# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285830817 -7200
#      Thu Sep 30 09:13:37 2010 +0200
# Node ID 54697b37d8bf16e97923fa534c66101eb360c1c5
# Parent  4ffa19147604dcc218b257b348dd86312e7756ff
replace Octave_map->octave_scalar_map in oct-parse.yy and ov-fcn-handle.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-parse.yy (Fautoload): Replace Octave_map by octave_map.
+	* ov-fcn-handle.cc (Ffunctions): Replace Octave_map by 
+	octave_scalar_map.
+
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* help.cc (F__which__): Use octave_map instead of Octave_map.
 	* load-save.cc (do_load, save_fields, save_vars): Use 
 	octave_scalar_map instead of Octave_map.
 
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -3827,17 +3827,17 @@ With no arguments, return a structure co
       for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
         {
           func_names(i) = p->first;
           file_names(i) = p->second;
 
           i++;
         }
 
-      Octave_map m;
+      octave_map m;
 
       m.assign ("function", func_names);
       m.assign ("file", file_names);
 
       retval = m;
     }
   else if (nargin == 2)
     {
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1596,80 +1596,80 @@ Return a struct containing information a
       octave_fcn_handle *fh = args(0).fcn_handle_value ();
 
       if (! error_state)
         {
           octave_function *fcn = fh ? fh->function_value () : 0;
 
           if (fcn)
             {
-              Octave_map m;
+              octave_scalar_map m;
 
               std::string fh_nm = fh->fcn_name ();
 
               if (fh_nm == octave_fcn_handle::anonymous)
                 {
                   std::ostringstream buf;
                   fh->print_raw (buf);
-                  m.assign ("function", buf.str ());
+                  m.setfield ("function", buf.str ());
 
-                  m.assign ("type", "anonymous");
+                  m.setfield ("type", "anonymous");
                 }
               else
                 {
-                  m.assign ("function", fh_nm);
+                  m.setfield ("function", fh_nm);
 
                   if (fcn->is_nested_function ())
                     {
-                      m.assign ("type", "subfunction");
+                      m.setfield ("type", "subfunction");
                       Cell parentage (dim_vector (1, 2));
                       parentage.elem(0) = fh_nm;
                       parentage.elem(1) = fcn->parent_fcn_name ();
-                      m.assign ("parentage", octave_value (parentage)); 
+                      m.setfield ("parentage", octave_value (parentage)); 
                     }
                   else if (fcn->is_private_function ())
-                    m.assign ("type", "private");
+                    m.setfield ("type", "private");
                   else if (fh->is_overloaded ())
-                    m.assign ("type", "overloaded");
+                    m.setfield ("type", "overloaded");
                   else
-                    m.assign ("type", "simple");
+                    m.setfield ("type", "simple");
                 }
 
               std::string nm = fcn->fcn_file_name ();
 
               if (fh_nm == octave_fcn_handle::anonymous)
                 {
-                  m.assign ("file", nm);
+                  m.setfield ("file", nm);
 
                   octave_user_function *fu = fh->user_function_value ();
 
                   std::list<symbol_table::symbol_record> vars
                     = symbol_table::all_variables (fu->scope (), 0);
 
                   size_t varlen = vars.size ();
 
                   if (varlen > 0)
                     {
-                      Octave_map ws;
+                      octave_scalar_map ws;
                       for (std::list<symbol_table::symbol_record>::const_iterator p = vars.begin ();
                            p != vars.end (); p++)
                         {
                           ws.assign (p->name (), p->varval (0));
                         }
 
-                      m.assign ("workspace", ws);
+                      m.setfield ("workspace", ws);
                     }
                 }
               else if (fcn->is_user_function () || fcn->is_user_script ())
                 {
                   octave_function *fu = fh->function_value ();
-                  m.assign ("file", fu->fcn_file_name ());
+                  m.setfield ("file", fu->fcn_file_name ());
                 }
               else
-                m.assign ("file", "");
+                m.setfield ("file", "");
 
               retval = m;
             }
           else
             error ("functions: invalid function handle object");
         }
       else
         error ("functions: argument must be a function handle object");
