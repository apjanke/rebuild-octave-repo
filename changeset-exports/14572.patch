# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1334867054 14400
#      Thu Apr 19 16:24:14 2012 -0400
# Branch stable
# Node ID 000cd393f3c1391f57569bb79746cd5c2314807f
# Parent  6131fead3135a9d6d74fe8a035c25c77fd785fcd
avoid error for calls to functions returning varargout that ignore final outputs (bug #36221)

* pt-assign.cc (tree_multi_assignment::rvalue): Don't error if more
output values are requested than returned when the requested outputs
are ignored.  New test.

diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -426,17 +426,40 @@ tree_multi_assignment::rvalue (int)
                   else if (! error_state)
                     {
                       retval_list.push_back (rhs_val(k));
 
                       k++;
                     }
                 }
               else
-                error ("element number %d undefined in return list", k+1);
+                {
+                  // This can happen for a function like
+                  //
+                  //   function varargout = f ()
+                  //     varargout{1} = nargout;
+                  //   endfunction
+                  //
+                  // called with
+                  //
+                  //    [a, ~] = f ();
+                  //
+                  // Then the list of of RHS values will contain one
+                  // element but we are iterating over the list of all
+                  // RHS values.  We shouldn't complain that a value we
+                  // don't need is missing from the list.
+
+                  if (ult.is_black_hole ())
+                    {
+                      k++;
+                      continue;
+                    }
+                  else
+                    error ("element number %d undefined in return list", k+1);
+                }
             }
 
           if (error_state)
             break;
           else if (print_result ())
             {
               // We clear any index here so that we can get
               // the new value of the referenced object below,
@@ -462,16 +485,29 @@ tree_multi_assignment::rvalue (int)
 
     }
 
   first_execution = false;
 
   return retval;
 }
 
+/*
+%!function varargout = f ()
+%!  varargout{1} = nargout;
+%!endfunction
+%!
+%!test
+%! [a, ~] = f ();
+%! assert (a, 2);
+%!test
+%! [a, ~, ~, ~, ~] = f ();
+%! assert (a, 5);
+*/
+
 std::string
 tree_multi_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (op_type ());
 }
 
 tree_expression *
 tree_multi_assignment::dup (symbol_table::scope_id scope,
