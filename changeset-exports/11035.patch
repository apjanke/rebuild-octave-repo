# HG changeset patch
# User John Swensen <jpswensen@gmail.com>
# Date 1285709064 14400
#      Tue Sep 28 17:24:24 2010 -0400
# Node ID 8a6b7947f6185242f45c2af3cc09f84b79996388
# Parent  6589aaf769f6c17bbaa077885133ed49c0475b2c
Added support for checking supported image types at runtime.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-28  John P. Swensen  <jpswensen@gmail.com>
+
+	* image/imwrite.m: Call __magick_format_list__ to get list of
+	accepted formats.
+
 2010-09-28  Rik <octave@nomad.inbox5.com>
 
 	* scripts/linear-algebra/logm.m, scripts/plot/legend.m, 
 	scripts/signal/periodogram.m: Untabify scripts.
 
 2010-09-27  Rik <octave@nomad.inbox5.com>
 
 	* scripts/io/dlmwrite.m: Replace non-POSIX '\d' regex pattern.
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -60,21 +60,22 @@
 ## @item jp2 and jpx @tab Joint Photographic Experts Group 2000
 ## @end multitable
 ##
 ## @seealso{imread, imfinfo}
 ## @end deftypefn
 
 function imwrite (img, varargin)
   
-  %missing_formats = { "hdf", "jp2", "jpx" }; 
-  persistent accepted_formats = { "bmp", "gif", "jpg", "jpeg", ...
-    "pbm", "pcx", "pgm", "png", "pnm", "ppm", "ras", ...
-    "tif", "tiff", "xwd" };
+  persistent imwrite_possible_formats = {
+    "bmp" "gif"; "jp2"; "jpg"; "jpx"; "jpeg"; "hdf"; "pbm"; "pcx";
+    "pgm"; "png"; "pnm"; "ppm"; "ras"; "tif"; "tiff"; "xwd" };
 
+  persistent accepted_formats = __magick_format_list__ (imwrite_possible_formats);
+  
   if (nargin < 2 || ! (isnumeric (img) || islogical (img)))
     print_usage ();
   endif
 
   map = [];
   fmt = "";
 
   offset = 1;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-28  John P. Swensen  <jpswensen@gmail.com>
+
+	* DLD-FUNCTIONS/__magick_read__.cc (F__magick_format_list__):
+	New function. 
+
 2010-09-28  John P. Swensen  <jpswensen@gmail.com>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (encode_uint_image)
 	(encode_bool_image): Ensure bit depth encoding is correct for
 	logical, uint8, and uint16 images.
 
 2010-09-28  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -1127,8 +1127,66 @@ not be using this function.  Instead you
   error ("imfinfo: not available in this version of Octave");
 
 #endif
 
   return retval;
 }
 
 #undef GET_PARAM
+
+// Determine the file formats supported by GraphicsMagick.  This is
+// called once at the beginning of imread or imwrite to determine
+// exactly which file formats are supported, so error messages can be
+// displayed properly.
+
+DEFUN_DLD (__magick_format_list__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Function File} {} __magick_format_list__ (@var{formats})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+#ifdef HAVE_MAGICK
+  maybe_initialize_magick ();
+
+  std::list<std::string> accepted_formats;
+
+  if (args.length () == 1)
+    {
+      Cell c = args (0).cell_value ();
+
+      if (! error_state)
+        {
+          for (octave_idx_type i = 0; i < c.nelem (); i++)
+            {
+              try
+                {
+                  std::string fmt = c.elem (i).string_value ();
+
+                  Magick::CoderInfo info(fmt);
+
+                  if (info.isReadable () && info.isWritable ())
+                    accepted_formats.push_back (fmt);
+                }
+              catch (Magick::Exception& e)
+                {
+                  // Do nothing: exception here are simply missing formats.
+                }
+            }
+        }
+      else
+        error ("__magick_format_list__: expecting a cell array of image format names");
+    }
+  else
+    print_usage ();
+
+  retval = Cell (accepted_formats);
+
+#else
+
+  error ("__magick_format_list__: not available in this version of Octave");
+
+#endif
+
+  return retval;
+}
