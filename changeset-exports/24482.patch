# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514441078 28800
#      Wed Dec 27 22:04:38 2017 -0800
# Node ID b4e371b5f6b581d7c04c603e831390208b2676a0
# Parent  6b685bb172c664751063d321862ca2eb35535e33
Fix shrinking plots when colorbar or legend in "outside" location (bug #52732).

* legend.m: Supply list of axes, ca, to cb_axes_deleted callback.
* legend.m (cb_axes_deleted): Check whether axes are being deleted, or merely
reset.  If reset, don't disable legend deletefcn which calls cb_restore_axes.

* colorbar.m: Supply axes, hax, to cb_axes_deleted callback.
* legend.m (cb_axes_deleted): Check whether axes are being deleted, or merely
reset.  If reset, don't disable colorbar deletefcn which calls cb_restore_axes.

diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -986,17 +986,17 @@ function [hleg, hleg_obj, hplot, labels]
         ## that, when it is destroyed, will remove the legend.
         props = {"parent", ca(1), "tag", "deletelegend", ...
                  "visible", "off", "handlevisibility", "off", ...
                  "xliminclude", "off", "yliminclude", "off", ...
                  "zliminclude", "off"};
         htdel = findall (ca(1), "tag", "deletelegend", "type", "text");
         if (isempty (htdel))
           htdel = text (0, 0, "", props{:});
-          set (htdel, "deletefcn", {@cb_axes_deleted, hlegend});
+          set (htdel, "deletefcn", {@cb_axes_deleted, ca, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
           set (hlegend, "unmodified_axes_position",
                          unmodified_axes_position,
                         "unmodified_axes_outerposition",
                          unmodified_axes_outerposition);
         else
           addproperty ("unmodified_axes_position", hlegend,
@@ -1195,20 +1195,23 @@ endfunction
 function cb_legend_location (hleg, d)
 
   ## If it isn't "none", which means manual positioning, then rebuild .
   if (! strcmp (get (hleg, "location"), "none"))
     cb_legend_update (hleg, d);
   endif
 
 endfunction
-## Axes to which legend was attached has been deleted.  Delete legend.
-function cb_axes_deleted (~, ~, hlegend)
+## Axes to which legend was attached is being deleted/reset.  Delete legend.
+function cb_axes_deleted (~, ~, ca, hlegend)
   if (isaxes (hlegend))
-    set (hlegend, "deletefcn", []);
+    if (strcmp (get (ca(1), "beingdeleted"), "on"))
+      ## Axes are being deleted.  Disable call to cb_restore_axes.
+      set (hlegend, "deletefcn", []);
+    endif
     delete (hlegend);
   endif
 endfunction
 
 ## Restore position of axes object when legend is deleted.
 function cb_restore_axes (~, ~, ca, pos, outpos, htdel, hplots)
 
   hf = ancestor (ca(1), "figure");
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -251,17 +251,17 @@ function h = colorbar (varargin)
       endif
     endif
 
     ## Dummy object placed on axes to delete colorbar when axes is deleted.
     ctext = text (0, 0, "", "tag", "colorbar",
                   "visible", "off", "handlevisibility", "off",
                   "xliminclude", "off", "yliminclude", "off",
                   "zliminclude", "off",
-                  "deletefcn", {@cb_axes_deleted, hcb});
+                  "deletefcn", {@cb_axes_deleted, hax, hcb});
 
     set (hcb, "deletefcn", {@cb_restore_axes, hax, props});
 
     if (vertical)
       addlistener (hcb, "yscale", {@cb_error_on_logscale, "yscale"});
     else
       addlistener (hcb, "xscale", {@cb_error_on_logscale, "xscale"});
     endif
@@ -278,20 +278,23 @@ function h = colorbar (varargin)
   endif
 
   if (nargout > 0)
     h = hcb;
   endif
 
 endfunction
 
-## Axes to which colorbar was attached has been deleted.  Delete colorbar.
-function cb_axes_deleted (~, ~, hcb, orig_props)
+## Axes to which colorbar was attached is being deleted/reset. Delete colorbar.
+function cb_axes_deleted (~, ~, hax, hcb)
   if (isaxes (hcb))
-    set (hcb, "deletefcn", []);
+    if (strcmp (get (hax, "beingdeleted"), "on"))
+      ## Axes are being deleted.  Disable call to cb_restore_axes.
+      set (hcb, "deletefcn", []);
+    endif
     delete (hcb);
   endif
 endfunction
 
 ## Error on attempt to set logscale on colorbar axes
 function cb_error_on_logscale (hcb, ~, scale)
   if (strcmp (get (hcb, scale), "log"))
     set (hcb, scale, "linear");
