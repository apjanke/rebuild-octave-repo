# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1541106600 -3600
#      Thu Nov 01 22:10:00 2018 +0100
# Node ID 38a881b8fbec1a9f91330fc2f282f3c7370be471
# Parent  790595e6ebb9f0f00e9dfbb98ac7008dc70ec67e
do not use courier new as default font (bug #54086)

* gui-preferences.h: move the definition of fallback monospace font
  families from resource_manager to here in case Qt does not provide
  a default monospace font family;
  define keys for the font of the variable editor and the console, but
  without default values since the latter is provided by resource_manager
  and is read later from the preferences file

* resource-manager.cc (do_get_default_font_family): new method for detecting
  the default monospace font family, code is moved from do_reload_settings;
  (do_reload_settings): always get the default monospace font and write it
  to the preferences files as possible fallback for other console, editor etc.

* resource-manager.h: new method do_get_default_font_family

* settings-dialog.cc (settings_dialog): use new monospace font from preferences
  as fallback for terminal and variable editor font
  (write_lexer_settings): use new monospace font from preferences as fallback

* QTerminal.cc: include gui-preferences.h;
  (notice_settings): get default monospace font from preferences file
  and use it as fallback for reading the terminal front from the file

* terminal-dock-widget.cc (terminal_dock_widget): use new monospace font from
  preferences as fallback

* variable-editor.cc (notice_settings): use new monospace font from
  preferences as fallback

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -17,16 +17,17 @@ GNU General Public License for more deta
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not,
 see <https://www.gnu.org/licenses/>.
 
 */
 
 #include "QTerminal.h"
+#include "gui-preferences.h"
 
 #if defined (Q_OS_WIN32)
 # include "win32/QWinTerminalImpl.h"
 #else
 # include "unix/QUnixTerminalImpl.h"
 #endif
 
 QTerminal *
@@ -167,18 +168,19 @@ QTerminal::edit_file ()
 void
 QTerminal::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // Set terminal font:
   QFont term_font = QFont ();
   term_font.setStyleHint (QFont::TypeWriter);
+  QString default_font = settings->value (global_mono_font.key, global_mono_font.def).toString ();
   term_font.setFamily
-    (settings->value ("terminal/fontName", "Courier New").toString ());
+    (settings->value (cs_font.key, default_font).toString ());
   term_font.setPointSize (settings->value ("terminal/fontSize", 10).toInt ());
   setTerminalFont (term_font);
 
   QFontMetrics metrics (term_font);
   setMinimumSize (metrics.maxWidth ()*16, metrics.height ()*3);
 
   QString cursorType
     = settings->value ("terminal/cursorType", "ibeam").toString ();
diff --git a/libgui/src/gui-preferences.h b/libgui/src/gui-preferences.h
--- a/libgui/src/gui-preferences.h
+++ b/libgui/src/gui-preferences.h
@@ -34,27 +34,51 @@ along with Octave; see the file COPYING.
 
 struct gui_pref
 {
   gui_pref (const QString& key_, QVariant def_): key (key_), def (def_) {}
   QString   key;  // the key name
   QVariant  def;  // the default value
 };
 
+
+// Global preferences
+
+// Get the default monospaced font
+#if defined (Q_WS_X11)
+const QString global_font_family = "Monospace";
+#elif defined (Q_WS_WIN) || defined (Q_WS_MAC)
+const QString global_font_family = "Courier";
+#else
+const QString global_font_family = "Courier";
+#endif
+const gui_pref global_mono_font ("monospace_font", global_font_family);
+
+
+// Console preferences
+
+const gui_pref cs_font ("terminal/fontName", QVariant ());
+
+
+// Variable Editor preferences
+
+const gui_pref ve_font ("variable_editor/font_size", QVariant ());
+
+
 // Editor preferences
 
 // Octave comment strings
 const gui_pref ed_comment_str_old ("editor/octave_comment_string", QVariant (0));
 const gui_pref ed_comment_str ("editor/oct_comment_str", QVariant (0));
 const gui_pref ed_uncomment_str ("editor/oct_uncomment_str", QVariant (1 + 2 + 4 + 8));
-
 const QString ed_last_comment_str ("editor/oct_last_comment_str");
 const QStringList ed_comment_strings (QStringList () << "##" << "#" << "%"<< "%%" << "%!");
 const int ed_comment_strings_count = 5;
 
+
 // Session data
 const gui_pref ed_session_names ("editor/savedSessionTabs",
                                   QVariant (QStringList ()));
 const gui_pref ed_session_enc ("editor/saved_session_encodings",
                                   QVariant (QStringList ()));
 const gui_pref ed_session_ind ("editor/saved_session_tab_index",
                                   QVariant (QStringList ()));
 const gui_pref ed_session_lines ("editor/saved_session_lines",
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -201,48 +201,51 @@ namespace octave
     return m_settings_directory;
   }
 
   QString resource_manager::do_get_settings_file (void)
   {
     return m_settings_file;
   }
 
+  QString resource_manager::do_get_default_font_family (void)
+  {
+    // Get the default monospaced font
+#if defined (HAVE_QFONT_MONOSPACE)
+    QFont fixed_font;
+    fixed_font.setStyleHint (QFont::Monospace);
+    QString default_family = fixed_font.defaultFamily ();
+#else
+    QString default_family = global_font_family;
+#endif
+
+    std::string env_default_family = sys::env::getenv ("OCTAVE_DEFAULT_FONT");
+    if (! env_default_family.empty ())
+      default_family = QString::fromStdString (env_default_family);
+
+    return default_family;
+  }
+
   void resource_manager::do_reload_settings (void)
   {
+    QString default_family = do_get_default_font_family ();
+
     if (! QFile::exists (m_settings_file))
       {
         QDir ("/").mkpath (m_settings_directory);
         QFile qt_settings (default_qt_settings_file ());
 
         if (! qt_settings.open (QFile::ReadOnly))
           return;
 
         QTextStream in (&qt_settings);
         QString settings_text = in.readAll ();
         qt_settings.close ();
 
-        // Get the default monospaced font
-#if defined (HAVE_QFONT_MONOSPACE)
-        QFont fixed_font;
-        fixed_font.setStyleHint (QFont::Monospace);
-        QString default_family = fixed_font.defaultFamily ();
-#elif defined (Q_WS_X11) || defined (Q_WS_WIN)
-        QString default_family = "Courier New";
-#elif defined (Q_WS_MAC)
-        QString default_family = "Courier";
-#else
-        QString default_family = "courier";
-#endif
-
-        std::string env_default_family
-          = sys::env::getenv ("OCTAVE_DEFAULT_FONT");
-
-        if (! env_default_family.empty ())
-          default_family = QString::fromStdString (env_default_family);
+        default_family = do_get_default_font_family ();
 
         QString default_font_size = "10";
 
         std::string env_default_font_size
           = sys::env::getenv ("OCTAVE_DEFAULT_FONT_SIZE");
 
         if (! env_default_font_size.empty ())
           default_font_size = QString::fromStdString (env_default_font_size);
@@ -273,16 +276,22 @@ namespace octave
         QTextStream out (&user_settings);
 
         out << settings_text;
 
         user_settings.close ();
       }
 
     do_set_settings (m_settings_file);
+
+    // Write the default monospace font into the settings for later use by
+    // console and editor as fallbacks of their font prefernces.
+    if (m_settings)
+      m_settings->setValue (global_mono_font.key, default_family);
+
   }
 
   void resource_manager::do_set_settings (const QString& file)
   {
     delete m_settings;
     m_settings = new QSettings (file, QSettings::IniFormat);
 
     if (! (m_settings
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -145,16 +145,18 @@ namespace octave
     QSettings * do_get_settings (void) const;
 
     QSettings * do_get_default_settings (void) const;
 
     QString do_get_settings_directory (void);
 
     QString do_get_settings_file (void);
 
+    QString do_get_default_font_family (void);
+
     void do_reload_settings (void);
 
     void do_set_settings (const QString& file);
 
     bool do_update_settings_key (const QString& new_key, const QString& old_key);
 
     bool do_is_first_run (void) const;
 
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "variable-editor.h"
 #include "workspace-model.h"
 #include "settings-dialog.h"
+#include "gui-preferences.h"
 
 #include <QButtonGroup>
 #include <QDir>
 #include <QFileInfo>
 #include <QFileDialog>
 #include <QVector>
 #include <QHash>
 #include <QMessageBox>
@@ -328,17 +329,18 @@ namespace octave
     editor_notebook_tab_width_max->setValue (settings->value ("editor/notebook_tab_width_max", 300).toInt ());
     editor_restoreSession->setChecked (settings->value ("editor/restoreSession", true).toBool ());
     editor_create_new_file->setChecked (settings->value ("editor/create_new_file", false).toBool ());
     editor_reload_changed_files->setChecked (settings->value ("editor/always_reload_changed_files", false).toBool ());
     editor_hiding_closes_files->setChecked (settings->value ("editor/hiding_closes_files", false).toBool ());
     editor_show_dbg_file->setChecked (settings->value (ed_show_dbg_file.key, ed_show_dbg_file.def).toBool ());
 
     // terminal
-    terminal_fontName->setCurrentFont (QFont (settings->value ("terminal/fontName", "Courier New").toString ()));
+    QString default_font = settings->value (global_mono_font.key, global_mono_font.def).toString ();
+    terminal_fontName->setCurrentFont (QFont (settings->value (cs_font.key, default_font).toString ()));
     terminal_fontSize->setValue (settings->value ("terminal/fontSize", 10).toInt ());
     terminal_history_buffer->setValue (settings->value ("terminal/history_buffer", 1000).toInt ());
     terminal_cursorUseForegroundColor->setChecked (settings->value ("terminal/cursorUseForegroundColor", true).toBool ());
     terminal_focus_command->setChecked (settings->value ("terminal/focus_after_command", false).toBool ());
     terminal_print_dbg_location->setChecked (settings->value ("terminal/print_debug_location", false).toBool ());
 
     QString cursorType
       = settings->value ("terminal/cursorType", "ibeam").toString ();
@@ -395,17 +397,17 @@ namespace octave
 
     // variable editor
     varedit_columnWidth->setValue (settings->value ("variable_editor/column_width", 100).toInt ());
     varedit_autoFitColumnWidth->setChecked (settings->value ("variable_editor/autofit_column_width", false).toBool ());
     varedit_autofitType->setCurrentIndex (settings->value ("autofit_type", 0).toInt ());
     varedit_rowHeight->setValue (settings->value ("variable_editor/row_height", 10).toInt ());
     varedit_rowAutofit->setChecked (settings->value ("variable_editor/autofit_row_height", true).toBool ());
 
-    varedit_font->setCurrentFont (QFont (settings->value ("variable_editor/font_name", settings->value ("terminal/fontName", "Courier New")).toString ()));
+    varedit_font->setCurrentFont (QFont (settings->value ("variable_editor/font_name", settings->value (cs_font.key, default_font)).toString ()));
     varedit_fontSize->setValue (settings->value ("variable_editor/font_size", QVariant (10)).toInt ());
     connect (varedit_useTerminalFont, SIGNAL (toggled (bool)),
              varedit_font, SLOT (setDisabled (bool)));
     connect (varedit_useTerminalFont, SIGNAL (toggled (bool)),
              varedit_fontSize, SLOT (setDisabled (bool)));
     varedit_useTerminalFont->setChecked (settings->value ("variable_editor/use_terminal_font", false).toBool ());
     varedit_font->setDisabled (varedit_useTerminalFont->isChecked ());
     varedit_fontSize->setDisabled (varedit_useTerminalFont->isChecked ());
@@ -690,17 +692,20 @@ namespace octave
     // (enum is not continuous)
     int max_style = get_valid_lexer_styles (lexer, styles);
     QFontComboBox *select_font;
     QSpinBox *font_size;
     QCheckBox *attrib_font[3];
     color_picker *color;
     color_picker *bg_color;
     int default_size = 10;
-    QFont default_font = QFont ("Courier New", 10, -1, 0);
+
+    QString default_font_name
+      = settings->value (global_mono_font.key, global_mono_font.def).toString ();
+    QFont default_font = QFont (default_font_name, 10, -1, 0);
     QColor default_color = QColor ();
     QColor dummy_color = QColor (255, 0, 255);
 
     for (int i = 0; i < max_style; i++)  // get dialog elements and their contents
       {
         QString actual_name = lexer->description (styles[i]);
         select_font = tab->findChild <QFontComboBox *> (actual_name + "_font");
         font_size = tab->findChild <QSpinBox *> (actual_name + "_size");
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include "quit.h"
 #include "signal-wrappers.h"
 
 #include "sighandlers.h"
 
 #include "terminal-dock-widget.h"
 #include "resource-manager.h"
+#include "gui-preferences.h"
 
 namespace octave
 {
   terminal_dock_widget::terminal_dock_widget (QWidget *p)
     : octave_dock_widget ("TerminalDockWidget", p),
       m_terminal (QTerminal::create (p))
   {
     m_terminal->setObjectName ("OctaveTerminal");
@@ -58,18 +59,19 @@ namespace octave
              m_terminal, SLOT (handle_visibility_changed (bool)));
 
     // Chose a reasonable size at startup in order to avoid truncated
     // startup messages
     QSettings *settings = resource_manager::get_settings ();
 
     QFont font = QFont ();
     font.setStyleHint (QFont::TypeWriter);
+    QString default_font = settings->value (global_mono_font.key, global_mono_font.def).toString ();
     font.setFamily
-      (settings->value ("terminal/fontName", "Courier New").toString ());
+      (settings->value (cs_font.key, default_font).toString ());
     font.setPointSize (settings->value ("terminal/fontSize", 10).toInt ());
 
     QFontMetrics metrics(font);
 
     int win_x =  metrics.maxWidth()*80;
     int win_y =  metrics.height()*25;
 
     int max_x = QApplication::desktop ()->screenGeometry (this).width ();
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -47,16 +47,17 @@ along with Octave; see the file COPYING.
 #include <QToolButton>
 #include <QVBoxLayout>
 
 #include "dw-main-window.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "variable-editor.h"
 #include "variable-editor-model.h"
+#include "gui-preferences.h"
 
 // Code reuse functions
 
 static QString
 idx_to_expr (int32_t from, int32_t to)
 {
   return (from == to
           ? QString ("%1").arg (from)
@@ -1357,28 +1358,27 @@ namespace octave
 
     QString class_chars = resource_manager::varedit_color_chars ();
 
     m_use_terminal_font = settings->value ("variable_editor/use_terminal_font",
                                            true).toBool ();
 
     QString font_name;
     int font_size;
+    QString default_font = settings->value (global_mono_font.key,
+                                            global_mono_font.def).toString ();
 
     if (m_use_terminal_font)
       {
-        font_name = settings->value ("terminal/fontName", "Courier New").toString ();
+        font_name = settings->value (cs_font.key, default_font).toString ();
         font_size = settings->value ("terminal/fontSize", 10).toInt ();
       }
     else
       {
-        font_name = settings->value ("variable_editor/font_name",
-                                     settings->value ("terminal/fontName",
-                                                      "Courier New")).toString ();
-
+        font_name = settings->value (ve_font.key, default_font).toString ();
         font_size = settings->value ("variable_editor/font_size", 10).toInt ();
       }
 
     m_font = QFont (font_name, font_size);
 
     QFontMetrics fm (m_font);
 
     m_add_font_height = fm.height ();
