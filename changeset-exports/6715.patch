# HG changeset patch
# User dbateman
# Date 1181732807 0
#      Wed Jun 13 11:06:47 2007 +0000
# Node ID c729dcb215c66b340838133d423a45120b159de8
# Parent  81a73cdd87c07899df838d7048b114c2ef8050e8
[project @ 2007-06-13 11:06:47 by dbateman]

diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -442,16 +442,23 @@ when converted.
 @subsection Integer Arithmetic
 
 While many numerical computations can't be carried out in integers,
 Octave does support basic operations like addition and multiplication
 on integers. The operators @code{+}, @code{-}, @code{.*}, and @code{./}
 works on integers of the same type. So, it is possible to add two 32 bit
 integers, but not to add a 32 bit integer and a 16 bit integer.
 
+The arithmetic operations on integers are performed by casting the
+integer values to double precision values, performing the operation, and
+then re-casting the values back to the original integer type. As the
+double precision type of Octave is only capable of representing integers
+with up to 53 bits of precision, it is not possible to perform
+arithmetic of the 64 bit integer types.
+
 When doing integer arithmetic one should consider the possibility of
 underflow and overflow. This happens when the result of the computation
 can't be represented using the chosen integer type. As an example it is
 not possible to represent the result of @math{10 - 20} when using
 unsigned integers. Octave makes sure that the result of integer
 computations is the integer that is closest to the true result. So, the
 result of @math{10 - 20} when using unsigned integers is zero.
 
