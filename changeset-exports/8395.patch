# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228978300 -3600
#      Thu Dec 11 07:51:40 2008 +0100
# Node ID 88fd356b0d9536e44c3b3ab5aa0bf79e18b041e4
# Parent  68cb59d7a0d37c18f19772ba5b14ef246f44f917
optionally allow pivoting in fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Optionally allow pivoted qr factorization.
+
 2008-12-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* linear-algebra/expm.m: New source.
 
 2008-12-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* specfun/nchoosek.m: Use a recursionless approach.
 
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -70,16 +70,17 @@ function [x, fvec, info, output, fjac] =
 
   xsiz = size (x0);
   n = numel (x0);
 
   has_jac = strcmp (optimget (options, "Jacobian", "off"), "on");
   maxiter = optimget (options, "MaxIter", Inf);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
+  pivoting = optimget (options, "Pivoting", false);
   funvalchk = strcmp (optimget (options, "FunValCheck", "off"), "on");
 
   if (funvalchk)
     # replace fun with a guarded version
     fun = @(x) guarded_eval (fun, x);
   endif
 
   # These defaults are rather stringent. I think that normally, user prefers
@@ -121,17 +122,21 @@ function [x, fvec, info, output, fjac] =
     elseif (m > n && niter == 1)
       if (isempty (optimget (options, "TolFun")))
 	warning (["An overdetermined system cannot usually be solved exactly. ", ...
 	"Consider specifying the TolFun option."]);
       endif
     endif
     
     # get QR factorization of the jacobian
-    [q, r] = qr (fjac);
+    if (pivoting)
+      [q, r, p] = qr (fjac);
+    else
+      [q, r] = qr (fjac);
+    endif
 
     # get column norms, use them as scaling factor
     jcn = norm (fjac, 'columns').';
     if (niter == 1)
       if (autodg)
         dg = jcn;
         dg(dg == 0) = 1;
       endif
@@ -148,35 +153,42 @@ function [x, fvec, info, output, fjac] =
     nsuc = 0;
     # inner loop
     while (niter <= maxiter && nfev < maxfev && ! info)
 
       qtf = q'*fvec;
 
       # get TR model (dogleg) minimizer
       # in case of an overdetermined system, get lsq solution
-      p = - __dogleg__ (r(1:n,:), qtf(1:n), dg, delta);
-      pn = norm (dg .* p);
+      s = - __dogleg__ (r(1:n,:), qtf(1:n), dg, delta);
+      if (pivoting)
+	s = p * s;
+      endif
+      sn = norm (dg .* s);
 
       if (niter == 1)
-        delta = min (delta, pn);
+        delta = min (delta, sn);
       endif
 
-      fvec1 = fcn (reshape (x + p, xsiz)) (:);
+      fvec1 = fcn (reshape (x + s, xsiz)) (:);
       fn1 = norm (fvec1);
 
       if (fn1 < fn)
         # scaled actual reduction
         actred = 1 - (fn1/fn)^2;
       else
         actred = -1;
       endif
 
       # scaled predicted reduction, and ratio
-      w = qtf + r*p; 
+      if (pivoting)
+	w = qtf + r*(p'*s);
+      else
+	w = qtf + r*s;
+      endif
       t = norm (w);
       if (t < fn)
         prered = 1 - (t/fn)^2;
         ratio = actred / prered;
       else
         prered = 0;
         ratio = 0;
       endif
@@ -190,25 +202,25 @@ function [x, fvec, info, output, fjac] =
           # trust region became uselessly small
           info = -3;
           break;
         endif
       else
         nfail = 0;
         nsuc ++;
         if (abs (1-ratio) <= 0.1)
-          delta = 2*pn;
+          delta = 2*sn;
         elseif (ratio >= 0.5 || nsuc > 1)
-          delta = max (delta, 2*pn);
+          delta = max (delta, 2*sn);
         endif
       endif
 
       if (ratio >= 1e-4)
         # successful iteration
-        x += p;
+        x += s;
         xn = norm (dg .* x);
         fvec = fvec1;
         fn = fn1;
         niter ++;
       endif
 
       # Tests for termination conditions. A mysterious place, anything can
       # happen if you change something here...
@@ -222,33 +234,36 @@ function [x, fvec, info, output, fjac] =
       # perturbations of x, then norm (fjac*e) <= eps*n*xn, i.e. by tolf ~
       # eps we demand as much accuracy as we can expect. 
       if (fn <= tolf*n*xn)
         info = 1;
       # The following tests done only after successful step.
       elseif (actred > 0)
         # This one is classic. Note that we use scaled variables again, but
         # compare to scaled step, so nothing bad.
-        if (pn <= tolx*xn)
+        if (sn <= tolx*xn)
           info = 2;
         # Again a classic one. It seems weird to use the same tolf for two
         # different tests, but that's what M*b manual appears to say.
         elseif (actred < tolf)
           info = 3;
         endif
       endif
 
       # criterion for recalculating jacobian 
       if (nfail == 2)
         break;
       endif
 
       # compute the scaled Broyden update
-      u = (fvec1 - q*w) / pn; 
-      v = dg .* ((dg .* p) / pn);
+      u = (fvec1 - q*w) / sn; 
+      v = dg .* ((dg .* s) / sn);
+      if (pivoting)
+	v = p'*v;
+      endif
 
       # update the QR factorization
       [q, r] = qrupdate (q, r, u, v);
 
     endwhile
   endwhile
 
   # restore original shapes
@@ -321,8 +336,27 @@ endfunction
 %! 2.395931;
 %! 2.005014 ];
 %! tol = 1.0e-5;
 %! [x, fval, info] = fsolve (@f, [ 0.5; 2.0; 2.5 ], optimset ("TolFun", 1e-6));
 %! assert (info > 0);
 %! assert (norm (x - x_opt, Inf) < tol);
 %! assert (norm (fval) < tol);
 
+%!function retval = f (p) 
+%!  x = p(1);
+%!  y = p(2);
+%!  z = p(3);
+%!  retval = zeros (3, 1);
+%!  retval(1) = sin(x) + y**2 + log(z) - 7;
+%!  retval(2) = 3*x + 2**y -z**3 + 1;
+%!  retval(3) = x + y + z - 5;
+%!test
+%! x_opt = [ 0.599054;
+%! 2.395931;
+%! 2.005014 ];
+%! tol = 1.0e-5;
+%! opt = optimset ("Pivoting", true);
+%! [x, fval, info] = fsolve (@f, [ 0.5; 2.0; 2.5 ], opt);
+%! assert (info > 0);
+%! assert (norm (x - x_opt, Inf) < tol);
+%! assert (norm (fval) < tol);
+
