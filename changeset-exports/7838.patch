# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1203606114 -3600
#      Thu Feb 21 16:01:54 2008 +0100
# Node ID 0a2ba0053fbd8e30498da9672565826ba047dffc
# Parent  57095ca98533f7177e0361e91b5f545cfc231e2c
Render marker of patch objects.

diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,13 +1,16 @@
 2008-02-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* opengl/gl-render.cc (opengl_renderer::patch_tesselator::combine):
 	Protect against NULL vertex data.
 
+	* opengl/gl-render.cc (opengl_renderer::draw(patch)): Add marker
+	rendering of patch objects.
+
 2008-02-21  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* opengl/gl-render.cc: remove OpenGL includes
 	* opengl/gl-render.h: add OpenGL includes
 	* fltk_backend/fltk_backend.cc: remove OpenGL includes
 	(__fltk_redraw__): put figure handle into the figure's
 	__plot_stream__ property for later
 	(fltk_backend::close_figure): use argument as figure handle to
diff --git a/src/graphics/opengl/gl-render.cc b/src/graphics/opengl/gl-render.cc
--- a/src/graphics/opengl/gl-render.cc
+++ b/src/graphics/opengl/gl-render.cc
@@ -2437,17 +2437,57 @@ opengl_renderer::draw (const patch::prop
 	{
 	  // FIXME: implement transparency
 	}
     }
 
   if (! props.marker_is ("none") &&
       ! (props.markeredgecolor_is ("none") && props.markerfacecolor_is ("none")))
     {
-      // FIXME: implement this
+      bool do_edge = ! props.markeredgecolor_is ("none");
+      bool do_face = ! props.markerfacecolor_is ("none");
+
+      Matrix mecolor = props.get_markeredgecolor_rgb ();
+      Matrix mfcolor = props.get_markerfacecolor_rgb ();
+      Matrix cc (1, 3, 0.0);
+
+      if (mecolor.numel () == 0 && props.markeredgecolor_is ("auto"))
+	{
+	  mecolor = props.get_edgecolor_rgb ();
+	  do_edge = ! props.edgecolor_is ("none");
+	}
+
+      if (mfcolor.numel () == 0 && props.markerfacecolor_is ("auto"))
+	{
+	  mfcolor = props.get_facecolor_rgb ();
+	  do_face = ! props.facecolor_is ("none");
+	}
+
+      init_marker (props.get_marker (), props.get_markersize (),
+		   props.get_linewidth ());
+
+      for (int i = 0; i < nf; i++)
+	for (int j = 0; j < count_f(i); j++)
+	  {
+	    int idx = int (f(i,j) - 1);
+
+	    if (clip(idx))
+	      continue;
+
+	    Matrix lc = (do_edge ? (mecolor.numel () == 0 ?
+				    vdata(i,j).get_rep ()->color : mecolor)
+			 : Matrix ());
+	    Matrix fc = (do_face ? (mfcolor.numel () == 0 ?
+				    vdata(i,j).get_rep ()->color : mfcolor)
+			 : Matrix ());
+
+	    draw_marker (v(idx,0), v(idx,1), (has_z ? v(idx,2) : 0), lc, fc);
+	  }
+
+      end_marker ();
     }
 }
 
 void
 opengl_renderer::set_viewport (int w, int h)
 {
   glViewport (0, 0, w, h);
 }
