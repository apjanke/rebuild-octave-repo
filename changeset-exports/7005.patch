# HG changeset patch
# User jwe
# Date 1192043468 0
#      Wed Oct 10 19:11:08 2007 +0000
# Node ID 064f298f812f5023e449cd7b6ba43a7a02cc7f01
# Parent  45d6cc5a0359ad613bbb1db06c751f704097f1c7
[project @ 2007-10-10 19:11:08 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2007-10-10  Thomas Treichl  <Thomas.Treichl@gmx.net>
+
+	* time/tic.m: New optional output value.
+
+* 2007-10-10  Thomas Treichl  <Thomas.Treichl@gmx.net>
+
+	* general/int2str.m: Doc fix.
+
 2007-10-10  Arno Onken  <asnelt@asnelt.org>
 
 	* statistics/distributions/hygecdf.m,
 	statistics/distributions/hygeinv.m,
 	statistics/distributions/hygepdf.m,
 	statistics/distributions/hygernd.m:
 	Swap order of T and M args for compatibility.
 
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -14,18 +14,16 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} int2str (@var{n})
-## @deftypefnx {Function File} {} int2str (@var{x}, @var{precision})
-## @deftypefnx {Function File} {} int2str (@var{x}, @var{format})
 ## Convert an integer to a string.  This function is not very flexible.
 ## For better control over the results, use @code{sprintf}
 ## (@pxref{Formatted Output}). 
 ## @seealso{sprintf, num2str}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/time/tic.m b/scripts/time/tic.m
--- a/scripts/time/tic.m
+++ b/scripts/time/tic.m
@@ -15,28 +15,40 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tic ()
 ## @deftypefnx {Function File} {} toc ()
-## These functions set and check a wall-clock timer.  For example,
+## Set or check a wall-clock timer.  Calling @code{tic} without an
+## output argument sets the timer.  Subsequent calls to @code{toc}
+## return the number of seconds since the timer was set.  For example,
 ##
 ## @example
 ## tic ();
 ## # many computations later...
 ## elapsed_time = toc ();
 ## @end example
 ##
 ## @noindent
 ## will set the variable @code{elapsed_time} to the number of seconds since
 ## the most recent call to the function @code{tic}.
 ##
+## If called with one output argument then this function returns a scalar
+## of type @code{uint64} and the wall-clock timer is not started.
+##
+## @example
+## @group
+## t = tic; sleep (5); (double (tic ()) - double (t)) * 1e-6
+##      @result{} 5
+## @end group
+## @end example
+##
 ## Nested timing with @code{tic} and @code{toc} is not supported.
 ## Therefore @code{toc} will always return the elapsed time from the most
 ## recent call to @code{tic}.
 ##
 ## If you are more interested in the CPU time that your process used, you
 ## should use the @code{cputime} function instead.  The @code{tic} and
 ## @code{toc} functions report the actual wall clock time that elapsed
 ## between the calls.  This may include time spent processing other jobs or
@@ -53,19 +65,22 @@
 ##
 ## @noindent
 ## (This example also illustrates that the CPU timer may have a fairly
 ## coarse resolution.)
 ## @end deftypefn
 
 ## Author: jwe
 
-function tic ()
+function ret = tic ()
 
   if (nargin != 0)
     warning ("tic: ignoring extra arguments");
   endif
 
-  global __tic_toc_timestamp__;
-
-  __tic_toc_timestamp__ = clock ();
+  if (nargout == 1)
+    ret = uint64 (time () * 1e6);
+  else
+    global __tic_toc_timestamp__;
+    __tic_toc_timestamp__ = clock ();
+  endif
 
 endfunction
