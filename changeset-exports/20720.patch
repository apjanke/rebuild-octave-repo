# HG changeset patch
# User Rik <rik@octave.org>
# Date 1447914689 28800
#      Wed Nov 18 22:31:29 2015 -0800
# Node ID 7c21b151b8b43c6df0a3d99e495184b59a77c99d
# Parent  d903cccb8de843cd21c5d182073751b08229213d
build: Fix warning messages from compiler.

* file-editor.cc (switch_tab): Change input 'move' to 'movetab' to avoid
shadowing variable in *this.

* file-editor.h (switch_tab): Change input 'move' to 'movetab' in function
prototype.

* data.cc (get_sort_mode_option): Remove unused second input argn.
* data.cc (issorted): Remove second arg from calls to get_sort_mode_option.

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -2048,33 +2048,33 @@ file_editor::move_tab_left ()
 void
 file_editor::move_tab_right ()
 {
 #ifdef HAVE_QTABWIDGET_SETMOVABLE
   switch_tab (1, true);
 #endif
 }
 void
-file_editor::switch_tab (int direction, bool move)
+file_editor::switch_tab (int direction, bool movetab)
 {
   int tabs = _tab_widget->count ();
 
   if (tabs < 2)
     return;
 
   int old_pos = _tab_widget->currentIndex ();
   int new_pos = _tab_widget->currentIndex () + direction;
 
   if (new_pos < 0 || new_pos >= tabs)
     new_pos = new_pos - direction*tabs;
 
-  if (move)
+  if (movetab)
     {
 #ifdef HAVE_QTABWIDGET_SETMOVABLE
-      _tab_widget->tabBar ()->moveTab (old_pos,new_pos);
+      _tab_widget->tabBar ()->moveTab (old_pos, new_pos);
       _tab_widget->setCurrentIndex (old_pos);
       _tab_widget->setCurrentIndex (new_pos);
       focus ();
 #endif
     }
   else
     _tab_widget->setCurrentIndex (new_pos);
 }
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -264,17 +264,17 @@ private:
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
-  void switch_tab (int direction, bool move = false);
+  void switch_tab (int direction, bool movetab = false);
 
   bool editor_tab_has_focus ();
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6861,17 +6861,17 @@ Undocumented internal function.\n\
     }
   else
     error ("__sort_rows_idx__: needs a 2-dimensional object");
 
   return retval;
 }
 
 static sortmode
-get_sort_mode_option (const octave_value& arg, const char *argn)
+get_sort_mode_option (const octave_value& arg)
 {
   // FIXME: we initialize to UNSORTED here to avoid a GCC warning
   // about possibly using sortmode uninitialized.
   // FIXME: shouldn't these modes be scoped inside a class?
   sortmode smode = UNSORTED;
 
   std::string mode = arg.xstring_value ("issorted: MODE must be a string");
 
@@ -6921,23 +6921,23 @@ This function does not support sparse ma
 
   sortmode smode = ASCENDING;
 
   if (nargin > 1)
     {
       octave_value mode_arg;
 
       if (nargin == 3)
-        smode = get_sort_mode_option (args(2), "third");
+        smode = get_sort_mode_option (args(2));
 
       std::string tmp = args(1).xstring_value ("issorted: second argument must be a string");
       if (tmp == "rows")
         by_rows = true;
       else
-        smode = get_sort_mode_option (args(1), "second");
+        smode = get_sort_mode_option (args(1));
     }
 
   octave_value arg = args(0);
 
   if (by_rows)
     {
       if (arg.is_sparse_type ())
         error ("issorted: sparse matrices not yet supported");
