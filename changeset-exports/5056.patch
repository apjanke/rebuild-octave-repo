# HG changeset patch
# User jwe
# Date 1098457130 0
#      Fri Oct 22 14:58:50 2004 +0000
# Node ID 9379d8716407c26bfc961a886b3baf0dcac6fc3c
# Parent  51a4406317e916a123b02315751003ddab1d1e2e
[project @ 2004-10-22 14:58:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2004-10-22  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/filter.cc: Remove some unnecessary parens.
+
+2004-10-22  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/filter.cc (filter (MArray<T>&, MArray<T>&,
+	MArrayN<T>&, MArrayN<T>&, int)): If value to filter is
+	dimensionality 2 it might still be a vector, use special case.
+
 2004-10-21  John W. Eaton  <jwe@octave.org>
 
 	* ov-base.cc (INT_CONV_METHOD): Apply saturation semantics here too.
 
 2004-10-19  John W. Eaton  <jwe@octave.org>
 
 	* ov-range.h (octave_range::write): New function.
 
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -66,41 +66,40 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 
   if (norm == 0.0)
     {
       error ("filter: the first element of a must be non-zero");
       return y;
     }
 
   dim_vector x_dims = x.dims ();
-  if ((dim < 0) || (dim > x_dims.length ()))
+  if (dim < 0 || dim > x_dims.length ())
     {
       error ("filter: filtering over invalid dimension");
       return y;
     }
 
   int x_len = x_dims (dim);
 
   dim_vector si_dims = si.dims ();
   int si_len = si_dims (0);
 
   if (si_len != ab_len - 1)
     {
       error ("filter: first dimension of si must be of length max (length (a), length (b)) - 1");
       return y;
     }
 
-  if (si_dims.length() == 1)
+  if (si_dims.length () == 1)
     {
-      // Special case as x_dims.length() might be 2, but be a vector
-      if (x_dims.length() > 2 || 
-	  (x_dims.length () == 2 && ((x_dims(0) != 1 ||
-				      x_dims(1) != si_dims(0)) &&
-				     (x_dims(1) != 1 || 
-				      x_dims(0) != si_dims(0)))))
+      // Special case as x_dims.length () might be 2, but be a vector.
+      if (x_dims.length () > 2
+	  || (x_dims.length () == 2
+	      && (x_dims(0) != 1 || x_dims(1) != si_dims(0))
+	      && (x_dims(1) != 1 || x_dims(0) != si_dims(0))))
 	{
 	  error ("filter: dimensionality of si and x must agree");
 	  return y;
 	}
     }
   else if (si_dims.length () != x_dims.length ())
     {
       error ("filter: dimensionality of si and x must agree");
@@ -124,17 +123,17 @@ filter (MArray<T>& b, MArray<T>& a, MArr
     }
 
   if (norm != 1.0)
     {
       a = a / norm;
       b = b / norm;
     }
 
-  if ((a_len <= 1) && (si_len <= 0))
+  if (a_len <= 1 && si_len <= 0)
     return b(0) * x;
 
   y.resize (x_dims, 0.0);
 
   int x_stride = 1;
   for (int i = 0; i < dim; i++)
     x_stride *= x_dims(i);
 
@@ -224,17 +223,17 @@ template <class T>
 MArrayN<T>
 filter (MArray<T>& b, MArray<T>& a, MArrayN<T>& x, int dim = -1)
 {
   dim_vector x_dims = x.dims ();
 
   if (dim < 0)
     {
       // Find first non-singleton dimension
-      while ((dim < x_dims.length()) && (x_dims (dim) <= 1))
+      while (dim < x_dims.length () && x_dims (dim) <= 1)
 	dim++;
   
       // All dimensions singleton, pick first dimension
       if (dim == x_dims.length ())
 	dim = 0;
     }
   else
     if (dim < 0 || dim > x_dims.length ())
@@ -377,17 +376,17 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	  error ("filter: filtering over invalid dimension");
 	  return retval;
 	}
     }
   else
     {
       // Find first non-singleton dimension
       dim = 0;
-      while ((dim < x_dims.length()) && (x_dims (dim) <= 1))
+      while (dim < x_dims.length () && x_dims (dim) <= 1)
 	dim++;
   
       // All dimensions singleton, pick first dimension
       if (dim == x_dims.length ())
 	dim = 0;
     }
 
   if (args(0).is_complex_type ()
@@ -418,17 +417,17 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 
 	      si.resize (si_dims, 0.0);
 	    }
 	  else
 	    {
 	      dim_vector si_dims = args (3).dims ();
 	      bool si_is_vector = true;
 	      for (int i=0; i < si_dims.length (); i++)
-		if ((si_dims (i) != 1) && (si_dims (i) < si_dims.numel ()))
+		if (si_dims (i) != 1 && si_dims (i) < si_dims.numel ())
 		  {
 		    si_is_vector = false;
 		    break;
 		  }
 
 	      if (si_is_vector)
 		// XXX FIXME XXX -- there must be a better way...
 		si = ComplexNDArray (MArrayN<Complex> (ArrayN<Complex> (args(3).complex_vector_value ())));
@@ -476,17 +475,17 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 
 	      si.resize (si_dims, 0.0);
 	    }
 	  else
 	    {
 	      dim_vector si_dims = args (3).dims ();
 	      bool si_is_vector = true;
 	      for (int i=0; i < si_dims.length (); i++)
-		if ((si_dims (i) != 1) && (si_dims (i) < si_dims.numel ()))
+		if (si_dims (i) != 1 && si_dims (i) < si_dims.numel ())
 		  {
 		    si_is_vector = false;
 		    break;
 		  }
 
 	      if (si_is_vector)
 		// XXX FIXME XXX -- there must be a better way...
 		si = NDArray (MArrayN<double> (ArrayN<double> (args(3).vector_value ())));
