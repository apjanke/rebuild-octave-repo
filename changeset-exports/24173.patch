# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1508094407 -7200
#      Sun Oct 15 21:06:47 2017 +0200
# Node ID 730227072acb7e31a7f2716521619be67e8a9026
# Parent  90903d9156258cfb0a290840fd69ed17e5957d23
Add support for text background area for OpenGL toolkits (bug #39692).

* gl-render.h, gl-render.cc (opengl_renderer::draw_text_background): New method.
  (opengl_renderer::draw_axes_planes) Increase polygon_offset to 9 for axes
  planes.
  (opengl_renderer::draw_text) Call draw_text_background prior to drawing text.

* gl2ps-print.cc (gl2ps_renderer::draw_text): Ditto.

* genpropdoc.m (get_doc): Document relevant text properties.

* text.m: Modify second demo to include background properties.

* NEWS: Announce new functionality.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -54,16 +54,20 @@ Summary of important user-visible change
 
     A warning that a single tolerance input is now interpreted as an
     absolute tolerance will be issued in Octave versions 4.4 and 4.6,
     after which it will be removed.  The warning has ID
     "Octave:quadcc:RelTol-conversion" and can be disabled with
 
       warning ("off", "Octave:quadcc:RelTol-conversion")
 
+ ** The properties "BackgroundColor", "EdgeColor", "LineStyle",
+    "LineWidth", and "Margin" are now implemented for text objects using
+    an OpenGL toolkit.
+
  ** Other new functions added in 4.4:
 
       camlookat
       camorbit
       campos
       camroll
       camtarget
       camup
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -999,26 +999,28 @@ z data.";
   elseif (strcmp (objname, "text"))
     switch (field)
       ## Overridden shared properties
       case "children"
         s.doc = doc_unused;
 
       ## Specific properties
       case "backgroundcolor"
-        s.doc = sprintf (doc_notimpl, "Background area");
+        s.doc = "Color of the background area.  \
+@xref{Colors, , colorspec}.";
         s.valid = valid_color;
 
       case "color"
         s.doc = "Color of the text.  @xref{Colors, ,colorspec}.";
         s.valid = valid_color;
 
       case "displayname"
       case "edgecolor"
-        s.doc = sprintf (doc_notimpl, "Background area");
+        s.doc = "Color of the outline of the background area.  \
+@xref{Colors, , colorspec}.";
         s.valid = valid_color;
 
       case "editing"
         s.doc = doc_unused;
 
       case "extent"
         s.doc = "Vector @code{[x0 y0 width height]} indicating the size \
 and location of the text string.";
@@ -1043,24 +1045,26 @@ and location of the text string.";
 
       case "horizontalalignment"
       case "interpreter"
         s.doc = "Control the way the @qcode{\"string\"} property is \
 interpreted.\n\
 @xref{XREFinterpreterusage, , @w{Use of the interpreter property}}.";
 
       case "linestyle"
-        s.doc = sprintf (doc_notimpl, "Background area");
+        s.doc = "Style of the outline.  @xref{Line Styles}.";
 
       case "linewidth"
-        s.doc = sprintf (doc_notimpl, "Background area");
+        s.doc = "Width of the outline.";
         s.valid = "scalar";
 
       case "margin"
-        s.doc = sprintf (doc_notimpl, "Background area");
+        s.doc = "Margins between the borders of the background area \
+and the texts.  The value is currently interpreted as pixels, regardless \
+of the @qcode{\"fontunits\"} property.";
         s.valid = "scalar";
 
       case "position"
         s.doc = "Vector @code{[X0 Y0 Z0]} where X0, Y0 and Z0 indicate the \
 position of the text anchor as defined by @code{verticalalignment} and \
 @code{horizontalalignment}.";
         s.valid = valid_4elvec;
 
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1191,17 +1191,17 @@ namespace octave
     double zPlane = props.get_zPlane ();
     double xPlaneN = props.get_xPlaneN ();
     double yPlaneN = props.get_yPlaneN ();
     double zPlaneN = props.get_zPlaneN ();
     bool is2d = props.get_is2D ();
 
     // Axes planes
     set_color (axe_color);
-    set_polygon_offset (true, 2.5);
+    set_polygon_offset (true, 9.0);
 
     glBegin (GL_QUADS);
 
     if (! is2d)
       {
         // X plane
         glVertex3d (xPlane, yPlaneN, zPlaneN);
         glVertex3d (xPlane, yPlane, zPlaneN);
@@ -2396,17 +2396,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
             if ((fl_mode > 0) && (num_lights > 0))
               glEnable (GL_LIGHTING);
             glShadeModel ((fc_mode == INTERP || fl_mode == GOURAUD)
                           ? GL_SMOOTH : GL_FLAT);
-            set_polygon_offset (true, 1);
+            set_polygon_offset (true, 1.0);
             if (fc_mode == TEXTURE)
               glEnable (GL_TEXTURE_2D);
 
             for (int i = 1; i < zc; i++)
               {
                 if (y_mat)
                   {
                     i1 = i-1;
@@ -3426,22 +3426,32 @@ namespace octave
   void
   opengl_renderer::draw_text (const text::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     if (props.get_string ().isempty ())
       return;
 
+    Matrix pos = xform.scale (props.get_data_position ());
+
+    // Handle clipping manually when drawing text background
+    if (! props.is_clipping () ||
+        (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0) ==
+         octave_uint8 (0x40)))
+      {
+        set_clipping (false);
+        draw_text_background (props);
+        set_clipping (props.is_clipping ());
+      }
+
     set_font (props);
 
-    Matrix pos = xform.scale (props.get_data_position ());
     const Matrix bbox = props.get_extent_matrix ();
 
-    // FIXME: handle margin and surrounding box
     bool blend = glIsEnabled (GL_BLEND);
 
     glEnable (GL_BLEND);
     glEnable (GL_ALPHA_TEST);
     glRasterPos3d (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0);
     glBitmap (0, 0, 0, 0, bbox(0), bbox(1), nullptr);
     glDrawPixels (bbox(2), bbox(3),
                   GL_RGBA, GL_UNSIGNED_BYTE, props.get_pixels ().data ());
@@ -3457,16 +3467,120 @@ namespace octave
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
   void
+  opengl_renderer::draw_text_background (const text::properties& props,
+                                         bool do_rotate)
+  {
+#if defined (HAVE_OPENGL)
+
+    Matrix bgcol = props.get_backgroundcolor_rgb ();
+    Matrix ecol = props.get_edgecolor_rgb ();
+
+    if (bgcol.isempty () && ecol.isempty ())
+      return;
+
+    Matrix pos = xform.scale (props.get_data_position ());
+    ColumnVector pixpos = get_transform ().transform (pos(0), pos(1),
+                                                      pos(2), false);
+    const Matrix bbox = props.get_extent_matrix ();
+
+#  if defined (HAVE_FRAMEWORK_OPENGL)
+    GLint vp[4];
+#  else
+    int vp[4];
+#  endif
+
+    glGetIntegerv (GL_VIEWPORT, vp);
+
+    // Save current transform matrices and set orthogonal window coordinates
+    glMatrixMode (GL_PROJECTION);
+    glPushMatrix ();
+    glLoadIdentity ();
+    glOrtho (0, vp[2], vp[3], 0, xZ1, xZ2);
+    glMatrixMode (GL_MODELVIEW);
+    glPushMatrix ();
+    glLoadIdentity ();
+
+    // Translate coordinates so that the text anchor is (0,0)
+    glTranslated (pixpos(0), pixpos(1), -pixpos(2));
+
+    // FIXME: Only multiples of 90Â° are handled by the text renderer.
+    //        Handle others here.
+    double rotation = props.get_rotation ();
+
+    if (do_rotate && rotation != 0.0 && rotation != 90.0
+        && rotation != 180.0 && rotation != 270.0)
+      glRotated (-rotation, 0.0, 0.0, 1.0);
+
+    double m = props.get_margin ();
+    double x0 = bbox (0) - m;
+    double x1 = x0 + bbox(2) + 2 * m;
+    double y0 = -(bbox (1) - m);
+    double y1 = y0 - (bbox(3) + 2 * m);
+
+    if (! bgcol.isempty ())
+      {
+        glColor3f (bgcol(0), bgcol(1), bgcol(2));
+
+        bool depth_test = glIsEnabled (GL_DEPTH_TEST);
+        if (depth_test)
+          set_polygon_offset (true, 4.0);
+
+        glBegin (GL_QUADS);
+        glVertex2d (x0, y0);
+        glVertex2d (x1, y0);
+        glVertex2d (x1, y1);
+        glVertex2d (x0, y1);
+        glEnd ();
+
+        if (depth_test)
+          set_polygon_offset (false);
+      }
+
+    if (! ecol.isempty ())
+      {
+        glColor3f (ecol(0), ecol(1), ecol(2));
+
+        set_linestyle (props.get_linestyle (), false, props.get_linewidth ());
+        set_linewidth (props.get_linewidth ());
+
+        glBegin (GL_LINE_STRIP);
+        glVertex2d (x0, y0);
+        glVertex2d (x1, y0);
+        glVertex2d (x1, y1);
+        glVertex2d (x0, y1);
+        glVertex2d (x0, y0);
+        glEnd ();
+      }
+
+    // Restore previous coordinate system
+    glPopMatrix();
+    glMatrixMode (GL_PROJECTION);
+    glPopMatrix();
+
+#else
+
+    octave_unused_parameter (props);
+    octave_unused_parameter (do_rotate);
+
+    // This shouldn't happen because construction of opengl_renderer
+    // objects is supposed to be impossible if OpenGL is not available.
+
+    panic_impossible ();
+
+#endif
+  }
+
+  void
   opengl_renderer::draw_image (const image::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     octave_value cdata = props.get_color_data ();
     dim_vector dv (cdata.dims ());
     int h = dv(0);
     int w = dv(1);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -71,16 +71,18 @@ namespace octave
     virtual void draw_figure (const figure::properties& props);
     virtual void draw_axes (const axes::properties& props);
     virtual void draw_line (const line::properties& props);
     virtual void draw_surface (const surface::properties& props);
     virtual void draw_patch (const patch::properties& props);
     virtual void draw_light (const light::properties& props);
     virtual void draw_hggroup (const hggroup::properties& props);
     virtual void draw_text (const text::properties& props);
+    virtual void draw_text_background (const text::properties& props,
+                                       bool do_rotate = false);
     virtual void draw_image (const image::properties& props);
     virtual void draw_uipanel (const uipanel::properties& props,
                                const graphics_object& go);
     virtual void draw_uibuttongroup (const uibuttongroup::properties& props,
                                      const graphics_object& go);
     virtual void init_gl_context (bool enhanced, const Matrix& backgroundColor);
     virtual void setup_opengl_transformation (const axes::properties& props);
 
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -942,16 +942,18 @@ namespace octave
   }
 
   void
   gl2ps_renderer::draw_text (const text::properties& props)
   {
     if (props.get_string ().isempty ())
       return;
 
+    draw_text_background (props, true);
+
     // First set font properties: freetype will use them to compute
     // coordinates and gl2ps will retrieve the color directly from the
     // feedback buffer
     set_font (props);
     set_color (props.get_color_rgb ());
 
     std::string saved_font = fontname;
 
diff --git a/scripts/plot/appearance/text.m b/scripts/plot/appearance/text.m
--- a/scripts/plot/appearance/text.m
+++ b/scripts/plot/appearance/text.m
@@ -196,20 +196,25 @@ endfunction
 %! ylabel ("vertical alignment");
 %! title ("text alignment and rotation (0:30:360 degrees)");
 
 %!demo
 %! clf;
 %! h = mesh (peaks, "edgecolor", 0.7 * [1 1 1], ...
 %!                  "facecolor", "none", ...
 %!                  "facealpha", 0);
+%! colors = jet (9);
+%! ii = 1;
 %! for t = 0:45:359;
+%!   ii = ii +1;
 %!   text (25, 25, 0, "Vertical Alignment = Bottom", ...
 %!                    "rotation", t, ...
 %!                    "horizontalalignment", "left", ...
+%!                    "backgroundcolor", colors(ii,:), ...
+%!                    "edgecolor", "k", ...
 %!                    "verticalalignment", "bottom");
 %! endfor
 %! caxis ([-100 100]);
 %! title ("Vertically Aligned at Bottom");
 
 %!demo
 %! clf;
 %! axis ([0 8 0 8]);
