# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1537889093 -7200
#      Tue Sep 25 17:24:53 2018 +0200
# Node ID c1cd5561d1dc5e52ae6d16391c01896a8436feb8
# Parent  bb0c5879627588ad3e7777f714ef83a766069830
Fix clipping of patch/surface markers (bug #54690)

* gl-render.h (opengl_renderer::clip_code): Return uint8_t instead of
  octave_uint8.

* gl-render.cc (opengl_renderer::draw_patch, opengl_renderer::draw_surface):
  Make use of clip_code method to decide whether to draw markers or not. Use
  uint8_t instead of octave_uint8 for clip codes.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2235,19 +2235,20 @@ namespace octave
     Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
     Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
     Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     bool has_z = (z.numel () > 0);
     int n = static_cast<int> (std::min (std::min (x.numel (), y.numel ()),
                                         (has_z ? z.numel ()
                                          : std::numeric_limits<int>::max ())));
-    octave_uint8 clip_mask = (props.is_clipping () ? 0x7F : 0x40), clip_ok (0x40);
-
-    std::vector<octave_uint8> clip (n);
+    uint8_t clip_mask = (props.is_clipping () ? 0x7F : 0x40);
+    uint8_t clip_ok = 0x40;
+
+    std::vector<uint8_t> clip (n);
 
     if (has_z)
       for (int i = 0; i < n; i++)
         clip[i] = (clip_code (x(i), y(i), z(i)) & clip_mask);
     else
       {
         double z_mid = (zmin+zmax)/2;
 
@@ -2957,29 +2958,33 @@ namespace octave
           }
 
         if ((mecolor.isempty () || mfcolor.isempty ()) && c.isempty ())
           c = props.get_color_data ().array_value ();
 
         init_marker (props.get_marker (), props.get_markersize (),
                      props.get_linewidth ());
 
+        uint8_t clip_mask = (props.is_clipping () ? 0x7F : 0x40);
+        uint8_t clip_ok = 0x40;
+
         for (int i = 0; i < zc; i++)
           {
             if (y_mat)
               i1 = i;
 
             for (int j = 0; j < zr; j++)
               {
-                if (clip(j,i))
-                  continue;
-
                 if (x_mat)
                   j1 = j;
 
+                if ((clip_code (x(j1,i), y(j,i1), z(j,i)) & clip_mask)
+                    != clip_ok)
+                  continue;
+
                 if ((do_edge && mecolor.isempty ())
                     || (do_face && mfcolor.isempty ()))
                   {
                     if (! math::isfinite (c(j,i)))
                       continue;  // Skip NaNs in color data
 
                     for (int k = 0; k < 3; k++)
                       cc(k) = c(j,i,k);
@@ -3514,22 +3519,26 @@ namespace octave
                 has_markerfacecolor = ((c.numel () > 0)
                                        && (c.rows () == f.rows ()));
               }
           }
 
         init_marker (props.get_marker (), props.get_markersize (),
                      props.get_linewidth ());
 
+        uint8_t clip_mask = (props.is_clipping () ? 0x7F : 0x40);
+        uint8_t clip_ok = 0x40;
+
         for (int i = 0; i < nf; i++)
           for (int j = 0; j < count_f(i); j++)
             {
               int idx = int (f(i,j) - 1);
 
-              if (clip(idx))
+              if ((clip_code (v(idx,0), v(idx,1), (has_z ? v(idx,2) : 0))
+                   & clip_mask) != clip_ok)
                 continue;
 
               Matrix cc;
               if (c.numel () > 0)
                 {
                   cc.resize (1, 3);
                   if (has_markerfacecolor)
                     cc(0) = c(i,0), cc(1) = c(i,1), cc(2) = c(i,2);
@@ -3610,18 +3619,17 @@ namespace octave
 
     if (props.get_string ().isempty ())
       return;
 
     Matrix pos = xform.scale (props.get_data_position ());
 
     // Handle clipping manually when drawing text background
     if (! props.is_clipping () ||
-        (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0) ==
-         octave_uint8 (0x40)))
+        (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0) == 0x40))
       {
         set_clipping (false);
         draw_text_background (props);
         set_clipping (props.is_clipping ());
       }
 
     set_font (props);
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -175,17 +175,17 @@ namespace octave
     bool is_nan_or_inf (double x, double y, double z) const
     {
       return (math::isnan (x) || math::isnan (y)
               || math::isnan (z)
               || math::isinf (x) || math::isinf (y)
               || math::isinf (z));
     }
 
-    octave_uint8 clip_code (double x, double y, double z) const
+    uint8_t clip_code (double x, double y, double z) const
     {
       return ((x < xmin ? 1 : 0)
               | (x > xmax ? 1 : 0) << 1
               | (y < ymin ? 1 : 0) << 2
               | (y > ymax ? 1 : 0) << 3
               | (z < zmin ? 1 : 0) << 4
               | (z > zmax ? 1 : 0) << 5
               | (is_nan_or_inf (x, y, z) ? 0 : 1) << 6);
