# HG changeset patch
# User jwe
# Date 1172801918 0
#      Fri Mar 02 02:18:38 2007 +0000
# Node ID 0eac3484e8df813dd246b907125e879a8e012ab1
# Parent  5fced7a5eee8e7a250c80b2a4121685530205bf4
[project @ 2007-03-02 02:18:37 by jwe]

diff --git a/liboctave/MatrixType.h b/liboctave/MatrixType.h
--- a/liboctave/MatrixType.h
+++ b/liboctave/MatrixType.h
@@ -46,17 +46,17 @@ public:
     Hermitian,
     Banded_Hermitian,
     Tridiagonal,
     Tridiagonal_Hermitian,
     Rectangular
   };
 
   MatrixType (void);
-    
+
   MatrixType (const MatrixType &a);
 
   MatrixType (const Matrix &a);
 
   MatrixType (const ComplexMatrix &a);
 
   MatrixType (const SparseMatrix &a);
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-01  Daniel J Sebald  <daniel.sebald@ieee.org>
+
+	* image/__img__.m: Don't set xlim and ylim properties.
+
 2007-03-01  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* general/interp1.m: Fix *style cases for decreasing x.
 
 2007-03-01  Muthiah Annamalai  <muthuspost@gmail.com>
 
 	* polynomial/roots.m: Check nargin before accessing arg.
 
diff --git a/scripts/image/__img__.m b/scripts/image/__img__.m
--- a/scripts/image/__img__.m
+++ b/scripts/image/__img__.m
@@ -57,15 +57,15 @@ function h = __img__ (x, y, img)
   s.cdata = img;
   s.xdata = xlim;
   s.ydata = ylim;
 
   tmp = __uiobject_make_handle__ (s);
 
   __uiobject_adopt__ (ca, tmp);
 
-  set (ca, "view", [0, 90], "xlim", xlim, "ylim", ylim);
+  set (ca, "view", [0, 90]);
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2007-03-01  John W. Eaton  <jwe@octave.org>
+
+	* ov-base-mat.h	(octave_base_matrix::octave_base_matrix (const MT&), 
+	(octave_base_matrix::octave_base_matrix (const MT&, const MatrixType&)):
+	Use common definition with default argument value.
+	* ov-base-scalar.h (octave_base_scalar<T>::typ): New data member.
+	Initialize in constructors.
+	(octave_base_scalar<T>::matrix_type): New funtions.
+
 2007-03-01  David Bateman  <dbateman@free.fr>
 
         * DLD-FUNCTIONS/md5sum.cc: New file.
         * Makefile.in (DLD_XSRC): Add md5sum.cc
 
 2007-03-01  Olli Saarela  <Olli.Saarela@kcl.fi>
 
 	* input.cc (FPS1): Fix @seealso.
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -26,47 +26,39 @@ 02110-1301, USA.
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 
 #include "mx-base.h"
 #include "str-vec.h"
+#include "MatrixType.h"
 
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
-#include "MatrixType.h"
-
 class Octave_map;
 
 class tree_walker;
 
 // Real matrix values.
 
 template <class MT>
 class
 octave_base_matrix : public octave_base_value
 {
 public:
 
   octave_base_matrix (void)
     : octave_base_value (), typ (MatrixType ()) { }
 
-  octave_base_matrix (const MT& m)
-    : octave_base_value (), matrix (m), typ (MatrixType ())
-  {
-    if (matrix.ndims () == 0)
-      matrix.resize (dim_vector (0, 0));
-  }
-
-  octave_base_matrix (const MT& m, const MatrixType& t)
+  octave_base_matrix (const MT& m, const MatrixType& t = MatrixType ())
     : octave_base_value (), matrix (m), typ (t)
   {
     if (matrix.ndims () == 0)
       matrix.resize (dim_vector (0, 0));
   }
 
   octave_base_matrix (const octave_base_matrix& m)
     : octave_base_value (), matrix (m.matrix), typ (m.typ) { }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -28,36 +28,37 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <string>
 
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
+#include "MatrixType.h"
 
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 // Real scalar values.
 
 template <class ST>
 class
 octave_base_scalar : public octave_base_value
 {
 public:
 
   octave_base_scalar (void)
-    : octave_base_value () { }
+    : octave_base_value (), typ (MatrixType ()) { }
 
-  octave_base_scalar (const ST& s)
-    : octave_base_value (), scalar (s) { }
+  octave_base_scalar (const ST& s, const MatrixType& t = MatrixType ())
+    : octave_base_value (), scalar (s), typ (t) { }
 
   octave_base_scalar (const octave_base_scalar& s)
-    : octave_base_value (), scalar (s.scalar) { }
+    : octave_base_value (), scalar (s.scalar), typ (s.typ) { }
 
   ~octave_base_scalar (void) { }
 
   octave_base_value *clone (void) const { return new octave_base_scalar (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_scalar (); }
 
   octave_value squeeze (void) const { return scalar; }
 
@@ -87,16 +88,20 @@ public:
     { return scalar; }
 
   size_t byte_size (void) const { return sizeof (ST); }
 
   octave_value all (int = 0) const { return (scalar != ST ()); }
 
   octave_value any (int = 0) const { return (scalar != ST ()); }
 
+  MatrixType matrix_type (void) const { return typ; }
+  MatrixType matrix_type (const MatrixType& _typ) const
+    { MatrixType ret = typ; typ = _typ; return ret; }
+
   bool is_scalar_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_true (void) const { return (scalar != ST ()); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
@@ -107,16 +112,18 @@ public:
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
 protected:
 
   // The value of this scalar.
   ST scalar;
+
+  mutable MatrixType typ;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
