# HG changeset patch
# User jwe
# Date 1020455762 0
#      Fri May 03 19:56:02 2002 +0000
# Node ID e8627dc4bdf2685f870c3abb06dfc41c23ed1168
# Parent  e7ad1397d67b5977b248888a8272f04bdd4a95f4
[project @ 2002-05-03 19:56:01 by jwe]

diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -112,16 +112,20 @@ Kurt Hornik @email{Kurt.Hornik@@ci.tuwie
 @code{lcd}, @code{kurtosis}, @code{null}, @code{orth}, @code{poly},
 @code{polyfit}, @code{roots}, and @code{skewness} functions, supplied
 documentation for these and numerous other functions, rewrote the Emacs
 mode for editing Octave code and provided its documentation, and has
 helped tremendously with testing.  He has also been a constant source of
 new ideas for improving Octave.
 
 @item
+Cai Jianming @email{caijianming@@yahoo.co.uk} contributed the inital
+cell array implementation.
+
+@item
 Phil Johnson @email{johnsonp@@nicco.sscnet.ucla.edu} has helped to make
 Linux releases available.
 
 @item
 Steven G. Johnson @email{stevenj@@alum.mit.edu} added support for ATLAS,
 saving data in HDF5 files, and ported Octave's configure script to
 Autoconf 2.50.
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -243,27 +243,29 @@ public:
   idx_vector *get_idx (void) const { return idx; }
 
   void maybe_delete_elements (idx_vector& i);
 
   Array<T> value (void);
 
   Array<T> index (idx_vector& i) const;
 #endif
+
+  static T resize_fill_value (void) { return static_cast<T> (0); }
 };
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value);
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
-  return assign (lhs, rhs, static_cast<LT> (0));
+  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -189,17 +189,17 @@ public:
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value);
 
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs)
 {
-  return assign (lhs, rhs, static_cast<LT> (0));
+  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -108,17 +108,17 @@ public:
   // Note that the following element selection methods don't use
   // xelem() because they need to make use of the code in
   // Array<T>::elem() that checks the reference count.
 
   T& checkelem (int i, int j, int k)
     {
       if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler) ("range error in Array3");
 	  static T foo;
 	  return foo;
 	}
       return Array2<T>::elem (i, d2*k+j);
     }
 
   T& elem (int i, int j, int k) { return Array2<T>::elem (i, d2*k+j); }
 
@@ -127,17 +127,17 @@ public:
 #else
   T& operator () (int i, int j, int k) { return elem (i, j, k); }
 #endif
 
   T checkelem (int i, int j, int k) const
     {
       if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler) ("range error in Array3");
 	  return T ();
 	}
       return Array2<T>::elem (i, d1*k+j);
     }
 
   T elem (int i, int j, int k) const { return Array2<T>::elem (i, d2*k+j); }
 
 #if defined (BOUNDS_CHECKING)
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -132,28 +132,28 @@ ArrayN<T>::get_size (const Array<int>& a
 }
 
 template <class T>
 T
 ArrayN<T>::range_error (const char *fcn, const Array<int>& arr_idx) const
 {
   // XXX FIXME XXX -- report index values too!
 
-  (*current_liboctave_error_handler) ("range error");
+  (*current_liboctave_error_handler) ("range error in ArrayN");
 
   return T ();
 }
 
 template <class T>
 T&
 ArrayN<T>::range_error (const char *fcn, const Array<int>& arr_idx)
 {
   // XXX FIXME XXX -- report index values too!
 
-  (*current_liboctave_error_handler) ("range error");
+  (*current_liboctave_error_handler) ("range error in ArrayN");
 
   static T foo;
   return foo;
 }
 
 static inline bool
 index_in_bounds (const Array<int>& arr_idx, const Array<int>& dimensions)
 {
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -188,17 +188,17 @@ public:
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& resize_fill_value);
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs)
 {
-  return assign (lhs, rhs, static_cast<LT> (0));
+  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
 }
 
 template <class T>
 std::ostream&
 operator << (std::ostream&, const ArrayN<T>&);
 
 #endif
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2002-05-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.h (idx_vector::idx_vector (int)): New function.
+	(idx_vector_rep::idx_vector_rep (int)): New decl.
+	* idx-vector.cc (idx_vector_rep::idx_vector_rep (int)): New function.
+
+	* Array.h (Array<T>::resize_fill_value (void)): New static function.
+	(assign (Array<LT>&, const Array<RT>&)): Use it.
+	* Array2.h (assign (Array2<LT>&, const Array2<RT>&)): Use it.
+	* ArrayN.h (assign (ArrayN<LT>&, const ArrayN<RT>&)): Use it.
+
+2002-05-02  Cai Jianming <caijianming@yahoo.co.uk> 
+
+	* Array3.h (Array3<T>::checkelem): Improve error message.
+	* ArrayN.h (ArrayN<T>::range_error): Likewise.
+	* DiagArray2.cc (DiagArray2<T>::checkelem): Likewise.
+	* DiagArray2.cc (DiagArray2<T>::operator ()): Likewise.
+
 2002-04-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASSL.h (DASSL_options::init): Undo previous change.
 	(DASSL_options::set_absolute_tolerance): Likewise.
 
 2002-04-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASPK.h, DASPK.cc: New files.
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -50,30 +50,30 @@ DiagArray2<T>::elem (int r, int c)
 
 template <class T>
 T&
 DiagArray2<T>::checkelem (int r, int c)
 {
   static T foo (0);
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
-      (*current_liboctave_error_handler) ("range error");
+      (*current_liboctave_error_handler) ("range error in DiagArray2");
       return foo;
     }
   return (r == c) ? Array<T>::xelem (r) : foo;
 }
 
 template <class T>
 T&
 DiagArray2<T>::operator () (int r, int c)
 {
   static T foo (0);
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
-      (*current_liboctave_error_handler) ("range error");
+      (*current_liboctave_error_handler) ("range error in DiagArray2");
       return foo;
     }
   return (r == c) ? Array<T>::xelem (r) : foo;
 }
 #endif
 
 template <class T>
 T
@@ -83,29 +83,29 @@ DiagArray2<T>::elem (int r, int c) const
 }
 
 template <class T>
 T
 DiagArray2<T>::checkelem (int r, int c) const
 {
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
-      (*current_liboctave_error_handler) ("range error");
+      (*current_liboctave_error_handler) ("range error in DiagArray2");
       return T ();
     }
   return (r == c) ? Array<T>::xelem (r) : T (0);
 }
 
 template <class T>
 T
 DiagArray2<T>::operator () (int r, int c) const
 {
   if (r < 0 || c < 0 || r >= nr || c >= nc)
     {
-      (*current_liboctave_error_handler) ("range error");
+      (*current_liboctave_error_handler) ("range error in DiagArray2");
       return T ();
     }
   return (r == c) ? Array<T>::xelem (r) : T (0);
 }
 
 template <class T>
 T&
 DiagArray2<T>::xelem (int r, int c)
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -196,28 +196,28 @@ public:
     {
       return Proxy (this, r, c);
     }
 
   Proxy checkelem (int r, int c)
     {
       if (r < 0 || c < 0 || r >= nr || c >= nc)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler) ("range error in DiagArray2");
 	  return Proxy (0, r, c);
 	}
       else
 	return Proxy (this, r, c);
     }
 
   Proxy operator () (int r, int c)
     {
       if (r < 0 || c < 0 || r >= nr || c >= nc)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler) ("range error in DiagArray2");
 	  return Proxy (0, r, c);
 	}
       else
 	return Proxy (this, r, c);
   }
 #else
   T& elem (int r, int c);
   T& checkelem (int r, int c);
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -70,17 +70,25 @@ IDX_VEC_REP::idx_vector_rep (const IDX_V
       max_val = a.max_val;
       min_val = a.min_val;
     }
 }
 
 static inline int
 tree_to_mat_idx (double x)
 {
-  return (x > 0) ? ((int) (x + 0.5) - 1) : ((int) (x - 0.5) - 1);
+  return (x > 0)
+    ? (static_cast<int> (x + 0.5) - 1)
+    : (static_cast<int> (x - 0.5) - 1);
+}
+
+static inline int
+tree_to_mat_idx (int i)
+{
+  return i - 1;
 }
 
 static inline bool
 idx_is_inf_or_nan (double x)
 {
   bool retval = false;
 
   if (xisnan (x))
@@ -178,43 +186,16 @@ IDX_VEC_REP::idx_vector_rep (const Matri
 	    else
 	      data[k++] = tree_to_mat_idx (d);
 	  }
     }
 
   init_state ();
 }
 
-IDX_VEC_REP::idx_vector_rep (double d)
-{
-  data = 0;
-  initialized = 0;
-  frozen = 0;
-  colon_equiv_checked = 0;
-  colon_equiv = 0;
-  colon = 0;
-  one_zero = 0;
-
-  len = 1;
-
-  orig_nr = 1;
-  orig_nc = 1;
-
-  if (idx_is_inf_or_nan (d))
-    return;
-  else
-    {
-      data = new int [len];
-
-      data[0] = tree_to_mat_idx (d);
-    }
-
-  init_state ();
-}
-
 IDX_VEC_REP::idx_vector_rep (const Range& r)
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
   colon_equiv = 0;
   colon = 0;
@@ -253,16 +234,65 @@ IDX_VEC_REP::idx_vector_rep (const Range
 	return;
       else
 	data[i] = tree_to_mat_idx (val);
     }
 
   init_state ();
 }
 
+IDX_VEC_REP::idx_vector_rep (double d)
+{
+  data = 0;
+  initialized = 0;
+  frozen = 0;
+  colon_equiv_checked = 0;
+  colon_equiv = 0;
+  colon = 0;
+  one_zero = 0;
+
+  len = 1;
+
+  orig_nr = 1;
+  orig_nc = 1;
+
+  if (idx_is_inf_or_nan (d))
+    return;
+  else
+    {
+      data = new int [len];
+
+      data[0] = tree_to_mat_idx (d);
+    }
+
+  init_state ();
+}
+
+IDX_VEC_REP::idx_vector_rep (int i)
+{
+  data = 0;
+  initialized = 0;
+  frozen = 0;
+  colon_equiv_checked = 0;
+  colon_equiv = 0;
+  colon = 0;
+  one_zero = 0;
+
+  len = 1;
+
+  orig_nr = 1;
+  orig_nc = 1;
+
+  data = new int [len];
+
+  data[0] = tree_to_mat_idx (i);
+
+  init_state ();
+}
+
 IDX_VEC_REP::idx_vector_rep (char c)
 {
   assert (c == ':');
 
   colon = 1;
   len = 0;
   num_zeros = 0;
   num_ones = 0;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -63,16 +63,18 @@ private:
     idx_vector_rep (const ColumnVector& v);
 
     idx_vector_rep (const Matrix& m);
 
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
 
+    idx_vector_rep (int i);
+
     idx_vector_rep (char c);
 
     idx_vector_rep (bool b);
 
     idx_vector_rep (const boolMatrix& bm);
 
     idx_vector_rep (const idx_vector_rep& a);
 
@@ -165,16 +167,22 @@ public:
     }
 
   idx_vector (double d)
     {
       rep = new idx_vector_rep (d);
       rep->count = 1;
     }
 
+  idx_vector (int i)
+    {
+      rep = new idx_vector_rep (i);
+      rep->count = 1;
+    }
+
   idx_vector (char c)
     {
       rep = new idx_vector_rep (c);
       rep->count = 1;
     }
 
   idx_vector (bool b)
     {
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -25,28 +25,14 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Cell.h"
 
-octave_allocator
-Cell::allocator (sizeof (Cell));
-
-Cell
-Cell::index (idx_vector& i) const
-{
-  return Cell (data.index (i));
-}
-
-Cell
-Cell::index (idx_vector& i, idx_vector& j) const
-{
-  return Cell (data.index (i, j));
-}
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -31,67 +31,38 @@ Software Foundation, 59 Temple Place - S
 
 #include "Array2.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov.h"
 
 class
-Cell
+Cell : public Array2<octave_value>
 {
 public:
 
   Cell (void)
-    : data () { }
+    : Array2<octave_value> () { }
+
+  Cell (const octave_value& val)
+    : Array2<octave_value> (1, 1, val) { }
 
   Cell (int n, int m, const octave_value& val = octave_value ())
-    : data (n, m, val) { }
+    : Array2<octave_value> (n, m, val) { }
 
   Cell (const Array2<octave_value>& c)
-    : data (c) { }
+    : Array2<octave_value> (c) { }
 
   Cell (const Cell& c)
-    : data (c.data) { }
-
-  void *operator new (size_t size)
-    { return allocator.alloc (size); }
-
-  void operator delete (void *p, size_t size)
-    { allocator.free (p, size); }
-
-  Cell& operator = (const Cell& c)
-    {
-      if (this != &c)
-	data = c.data;
-
-      return *this;
-    }
-
-  int rows (void) const { return data.rows (); }
+    : Array2<octave_value> (c) { }
 
-  int columns (void) const { return data.columns (); }
-
-  octave_value& operator () (int i, int j) { return elem (i, j); }
-
-  octave_value operator () (int i, int j) const { return elem (i, j); }
-
-  octave_value& elem (int i, int j) { return data.elem (i, j); }
-
-  octave_value elem (int i, int j) const { return data.elem (i, j); }
-
-  Cell index (idx_vector& i) const;
-
-  Cell index (idx_vector& i, idx_vector& j) const;
-
-private:
-
-  static octave_allocator allocator;
-
-  Array2<octave_value> data;
+  boolMatrix all(void) const { return boolMatrix();} //FIXME
+  boolMatrix any(void) const {return boolMatrix();}  //FIXME
+  bool is_true(void) const {return false;} //FIXME
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,61 @@
+2002-05-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-base.cc (cell_conv): New conversion function.
+	(install_base_type_conversions): Install it.
+	Install conversion for indexed assignment of octave_cells to
+	undefined values.
+
+	* TEMPLATE-INST/Array-tc.cc: Instantiate assign functions too.
+	(Array<octave_value>::resize_fill_value (void)):
+	Provide specialization for octave_value.
+
+	* ov-cell.cc (octave_cell::assign (const octave_value_list&,
+	const octave_value&)): New function.
+	* Cell.h (Cell::Cell (const octave_value&)): New function.
+
+	* OPERATORS/op-cell.cc (install_list_ops): Use DEFASSIGNANYOP_FN
+	and INSTALL_ASSIGNANYOP, not DEFASSIGNOP_FN and INSTALL_ASSIGNOP.
+
+2002-05-03  Cai Jianming <caijianming@yahoo.co.uk>
+
+	* OPERATORS/op-cell.cc: New file.
+	* src/Makefile.in (OP_XSRC): Include it in the list.
+
+	* parse.y (cell): Return a cell type instead of Matrix type.
+
+	* ov.cc (install_types): Install octave_cell type.
+
+	* pr-output.cc (octave_print_internal): Handle Cells.
+	* pr-output.h (octave_print_internal): Provide decl.
+
+	* ov-cell.h (octave_cell): Derive from octave_base_matrix<Cell>.
+	* ov-cell.cc (do_index_op, assign, print, print_raw,
+	print_name_tag): Delete.
+
+	* Cell.cc (allocator, index): Delete.
+	* Cell.h (Cell): Derive from Array2<octave_value>.
+	Most functions removed since we can use those from Array2 instead.
+
+2002-05-02  Cai Jianming <caijianming@yahoo.co.uk>
+
+	* ov-base-mat.cc (octave_base_matrix<MT>::assign):
+	New function.
+	* ov-base-mat.h (octave_base_matrix<MT>::assign): Provide decl.
+	* ov-bool-mat.cc (octave_bool_matrix::assign): Delete.
+	* ov-bool-mat.h (octave_bool_matrix:assign): Delete decl
+	* ov-cx-mat.cc (octave_complex_matrix::assign (const
+	octave_value_list& idx, const ComplexMatrix&)): Delete.
+	* ov-cx-mat.h (octave_complex_matrix:assign (const
+	octave_value_list& idx, const ComplexMatrix&)): Replace decl with
+	function.
+	* ov-re-mat.cc (octave_bool_matrix::assign): Delete.
+	* ov-re-mat.h (octave_bool_matrix:assign): Delete decl.
+	
 2002-05-02  Cai Jianming <caijianming@yahoo.co.uk>
 
 	* OPERATORS/op-bm-b.cc: New file.x
 	* Makefile.in (OP_XSRC): Add it to the list.
 
 2002-04-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.cc (print_version_and_exit): Use
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -91,19 +91,20 @@ INCLUDES := BaseSLList.h Cell.h DLList.h
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc Map-fnc.cc \
 	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-ovl.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
 	SLStack-ue.cc SLStack-ui.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
-OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-chm.cc op-cm-cm.cc \
-	op-cm-cs.cc op-cm-m.cc op-cm-s.cc op-cs-cm.cc op-cs-cs.cc \
-	op-cs-m.cc op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
+OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
+	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
+	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
+	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc op-m-cs.cc \
 	op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc op-s-cs.cc op-s-m.cc \
 	op-s-s.cc op-str-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -33,15 +33,34 @@ Software Foundation, 59 Temple Place - S
 #include "Array2.cc"
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "ov.h"
 
 template class Array<octave_value>;
+
+octave_value
+Array<octave_value>::resize_fill_value (void)
+{
+  static octave_value retval = octave_value (Matrix ());
+  return retval;
+}
+
+template int assign (Array<octave_value>&, const Array<octave_value>&);
+
+template int assign (Array<octave_value>&,
+		     const Array<octave_value>&, const octave_value&);
+
+
 template class Array2<octave_value>;
 
+template int assign (Array2<octave_value>&, const Array2<octave_value>&);
+
+template int assign (Array2<octave_value>&,
+		     const Array2<octave_value>&, const octave_value&);
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -70,16 +70,58 @@ octave_base_matrix<MT>::do_index_op (con
 	       len, n.c_str ());
       }
       break;
     }
 
   return retval;
 }
 
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+template <class MT>
+extern void assign (MT&, const MT&);
+#endif
+
+template <class MT>
+void
+octave_base_matrix<MT>::assign (const octave_value_list& idx, const MT& rhs)
+{
+  int len = idx.length ();
+
+  switch (len)
+    {
+    case 2:
+      {
+	idx_vector i = idx (0).index_vector ();
+	idx_vector j = idx (1).index_vector ();
+
+	matrix.set_index (i);
+	matrix.set_index (j);
+
+	::assign (matrix, rhs);
+      }
+      break;
+
+    case 1:
+      {
+	idx_vector i = idx (0).index_vector ();
+
+	matrix.set_index (i);
+
+	::assign (matrix, rhs);
+      }
+      break;
+
+    default:
+      error ("invalid number of indices (%d) for indexed assignment",
+	     len);
+      break;
+    }
+}
+
 template <class MT>
 bool
 octave_base_matrix<MT>::is_true (void) const
 {
   bool retval = false;
 
   if (rows () == 0 || columns () == 0)
     {
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -62,16 +62,18 @@ public:
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) { return new octave_base_matrix (*this); }
 
   octave_value do_index_op (const octave_value_list& idx);
 
+  void assign (const octave_value_list& idx, const MT& rhs);
+
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   int length (void) const
   {
     int r = rows ();
     int c = columns ();
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -27,32 +27,32 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "lo-ieee.h"
 
-#include "Cell.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
-#include "ov-scalar.h"
-#include "ov-re-mat.h"
+#include "ov-cell.h"
+#include "ov-ch-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
-#include "ov-ch-mat.h"
+#include "ov-list.h"
+#include "ov-range.h"
+#include "ov-re-mat.h"
+#include "ov-scalar.h"
 #include "ov-str-mat.h"
-#include "ov-range.h"
-#include "ov-list.h"
 #include "variables.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value, "<unknown type>");
 
 octave_value
 octave_base_value::do_index_op (const octave_value_list&)
 {
   std::string nm = type_name ();
@@ -333,28 +333,35 @@ CONVDECLX (complex_matrix_conv)
   return new octave_complex_matrix ();
 }
 
 CONVDECLX (string_conv)
 {
   return new octave_char_matrix_str ();
 }
 
+CONVDECLX (cell_conv)
+{
+  return new octave_cell ();
+}
+
 void
 install_base_type_conversions (void)
 {
   INSTALL_ASSIGNCONV (octave_base_value, octave_scalar, octave_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_matrix, octave_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_complex, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_complex_matrix, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_range, octave_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_char_matrix_str, octave_char_matrix_str);
+  INSTALL_ASSIGNCONV (octave_base_value, octave_cell, octave_cell);
 
   INSTALL_WIDENOP (octave_base_value, octave_matrix, matrix_conv);
   INSTALL_WIDENOP (octave_base_value, octave_complex_matrix, complex_matrix_conv);
   INSTALL_WIDENOP (octave_base_value, octave_char_matrix_str, string_conv);
+  INSTALL_WIDENOP (octave_base_value, octave_cell, cell_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -73,53 +73,16 @@ octave_bool_matrix::try_narrowing_conver
   int nc = matrix.cols ();
 
   if (nr == 1 && nc == 1)
     retval = new octave_bool (matrix (0, 0));
 
   return retval;
 }
 
-void
-octave_bool_matrix::assign (const octave_value_list& idx,
-			    const boolMatrix& rhs)
-{
-  int len = idx.length ();
-
-  switch (len)
-    {
-    case 2:
-      {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
-
-	matrix.set_index (i);
-	matrix.set_index (j);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    case 1:
-      {
-	idx_vector i = idx (0).index_vector ();
-
-	matrix.set_index (i);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    default:
-      error ("invalid number of indices (%d) for indexed matrix assignment",
-	     len);
-      break;
-    }
-}
-
 bool
 octave_bool_matrix::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
 
 double
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -67,18 +67,16 @@ public:
   ~octave_bool_matrix (void) { }
 
   octave_value *clone (void) { return new octave_bool_matrix (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const boolMatrix& rhs);
-
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -34,149 +34,34 @@ Software Foundation, 59 Temple Place - S
 #include "lo-utils.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cell.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
+#include "ov-base-mat.h"
+#include "ov-base-mat.cc"
+#include "ov-re-mat.h"
+#include "ov-scalar.h"
+
+template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell");
 
-octave_value
-octave_cell::do_index_op (const octave_value_list& idx)
-{
-  octave_value retval;
-
-  int len = idx.length ();
-
-  switch (len)
-    {
-    case 2:
-      {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
-
-	retval = cell_val.index (i, j);
-      }
-      break;
-
-    case 1:
-      {
-	idx_vector i = idx (0).index_vector ();
-
-	retval = cell_val.index (i);
-      }
-      break;
-
-    default:
-      {
-	std::string n = type_name ();
-
-	error ("invalid number of indices (%d) for %s value",
-	       len, n.c_str ());
-      }
-      break;
-    }
-
-  return retval;
-}
-
 void
 octave_cell::assign (const octave_value_list& idx, const octave_value& rhs)
 {
-#if 0
-  if (idx.length () == 1)
-    {
-      int i = idx(0).int_value (true);
-
-      if (! error_state)
-	{
-	  int n = lst.length ();
-
-	  if (i > 0 && (Vresize_on_range_error || i <= n))
-	    lst(i-1) = rhs;
-	  else
-	    error ("list index = %d out of range", i);
-	}
-      else
-	error ("list index must be an integer");
-    }
+  if (rhs.is_cell ())
+    octave_base_matrix<Cell>::assign (idx, rhs.cell_value ());
   else
-    error ("lists may only be indexed by a single scalar");
-#endif
-}
-
-void
-octave_cell::print (std::ostream& os, bool) const
-{
-  print_raw (os);
-}
-
-void
-octave_cell::print_raw (std::ostream& os, bool) const
-{
-  unwind_protect::begin_frame ("octave_cell_print");
-
-  int nr = cell_val.rows ();
-  int nc = cell_val.columns();
-
-  if (nr > 0 && nc > 0)
-    {
-      indent (os);
-      os << "{";
-      newline (os);
-
-      increment_indent_level ();
-
-      for (int j = 0; j < nc; j++)
-	{
-	  for (int i = 0; i < nr; i++)
-	    {
-	      std::ostrstream buf;
-	      buf << "[" << i+1 << "," << j+1 << "]" << std::ends;
-	      const char *nm = buf.str ();
-
-	      octave_value val = cell_val(i,j);
-
-	      val.print_with_name (os, nm);
-
-	      delete [] nm;
-	    }
-	}
-
-      decrement_indent_level ();
-
-      indent (os);
-
-      os << "}";
-    }
-  else
-    os << "{}";
-
-  newline (os);
-
-  unwind_protect::run_frame ("octave_cell_print");
-}
-
-bool
-octave_cell::print_name_tag (std::ostream& os, const std::string& name) const
-{
-  indent (os);
-  if (is_empty ())
-    os << name << " = ";
-  else
-    {
-      os << name << " =";
-      newline (os);
-    }
-  return false;
+    octave_base_matrix<Cell>::assign (idx, Cell (rhs));
 }
 
 DEFUN (iscell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscell (@var{x})\n\
 Return true if @var{x} is a cell array object.  Otherwise, return\n\
 false.\n\
 @end deftypefn")
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -33,66 +33,57 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "error.h"
-#include "ov-base.h"
+#include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Cells.
 
 class
-octave_cell : public octave_base_value
+octave_cell : public octave_base_matrix<Cell>
 {
 public:
 
   octave_cell (void)
-    : octave_base_value () { }
+    : octave_base_matrix<Cell> () { }
 
   octave_cell (const Cell& c)
-    : octave_base_value (), cell_val (c) { }
+    : octave_base_matrix<Cell> (c) { }
 
   octave_cell (const octave_cell& c)
-    : octave_base_value (), cell_val (c.cell_val) { }
+    : octave_base_matrix<Cell> (c) { }
 
   ~octave_cell (void) { }
 
-  octave_value *clone (void) { return new octave_cell (*this); }
-
-  octave_value do_index_op (const octave_value_list& idx);
-
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
-  bool is_defined (void) const { return true; }
+  octave_value *clone (void) { return new octave_cell (*this); }
 
-  bool is_constant (void) const { return true; }
+#if 0
+  octave_value *try_narrowing_conversion (void);
+#endif
+
+  bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
-  Cell cell_value (void) const { return cell_val; }
-
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
-
-  bool print_name_tag (std::ostream& os, const std::string& name) const;
+  Cell cell_value (void) const { return matrix; }
 
 private:
-
-  Cell cell_val;
-
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -73,53 +73,16 @@ octave_complex_matrix::try_narrowing_con
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
-			       const ComplexMatrix& rhs)
-{
-  int len = idx.length ();
-
-  switch (len)
-    {
-    case 2:
-      {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
-
-	matrix.set_index (i);
-	matrix.set_index (j);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    case 1:
-      {
-	idx_vector i = idx (0).index_vector ();
-
-	matrix.set_index (i);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    default:
-      error ("invalid number of indices (%d) for indexed matrix assignment",
-	     len);
-      break;
-    }
-}
-
-void
-octave_complex_matrix::assign (const octave_value_list& idx,
 			       const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -72,17 +72,18 @@ public:
     : octave_base_matrix<ComplexMatrix> (cm) { }
 
   ~octave_complex_matrix (void) { }
 
   octave_value *clone (void) { return new octave_complex_matrix (*this); }
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
+  void assign (const octave_value_list& idx, const ComplexMatrix& rhs)
+    { octave_base_matrix<ComplexMatrix>::assign (idx, rhs); }
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -61,52 +61,16 @@ octave_matrix::try_narrowing_conversion 
   int nc = matrix.cols ();
 
   if (nr == 1 && nc == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
-void
-octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
-{
-  int len = idx.length ();
-
-  switch (len)
-    {
-    case 2:
-      {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
-
-	matrix.set_index (i);
-	matrix.set_index (j);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    case 1:
-      {
-	idx_vector i = idx (0).index_vector ();
-
-	matrix.set_index (i);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    default:
-      error ("invalid number of indices (%d) for indexed matrix assignment",
-	     len);
-      break;
-    }
-}
-
 bool
 octave_matrix::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
 
 double
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -72,18 +72,16 @@ public:
     : octave_base_matrix<Matrix> (m) { }
 
   ~octave_matrix (void) { }
 
   octave_value *clone (void) { return new octave_matrix (*this); }
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const Matrix& rhs);
-
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1520,16 +1520,17 @@ octave_value::op_eq_to_binary_op (assign
 
   return binop;
 }
 
 void
 install_types (void)
 {
   octave_base_value::register_type ();
+  octave_cell::register_type ();
   octave_scalar::register_type ();
   octave_complex::register_type ();
   octave_matrix::register_type ();
   octave_complex_matrix::register_type ();
   octave_range::register_type ();
   octave_bool::register_type ();
   octave_bool_matrix::register_type ();
   octave_char_matrix::register_type ();
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include <cstdio>
 
 #ifdef YYBYACC
 #include <cstdlib>
 #endif
 
 #include <strstream.h>
 
+#include "Cell.h"
 #include "Matrix.h"
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-time.h"
 
 #include "comment-list.h"
@@ -601,19 +602,19 @@ matrix_rows1	: cell_or_matrix_row
 		| matrix_rows1 ';' cell_or_matrix_row
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
 cell		: '{' '}'
-		  { $$ = new tree_constant (octave_value (Matrix ())); }
+		  { $$ = new tree_constant (octave_value (Cell ())); }
 		| '{' ';' '}'
-		  { $$ = new tree_constant (octave_value (Matrix ())); }
+		  { $$ = new tree_constant (octave_value (Cell ())); }
 		| '{' cell_rows '}'
 		  { $$ = finish_cell ($2); }
 		;
 
 cell_rows	: cell_rows1
 		  { $$ = $1; }
 		| cell_rows1 ';'	// Ignore trailing semicolon.
 		  { $$ = $1; }
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 #include <strstream>
 #include <string>
 
 #include "CMatrix.h"
 #include "Range.h"
 #include "cmd-edit.h"
 #include "dMatrix.h"
+#include "Cell.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-cmplx.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
@@ -1749,16 +1750,49 @@ octave_print_internal (std::ostream& os,
 	os << " ]";
     }
   else
     {
       os << "sorry, printing char matrices not implemented yet\n";
     }
 }
 
+void
+octave_print_internal (std::ostream& os, const Cell& cell_val,
+		       bool pr_as_read_syntax, int extra_indent)
+{
+  int nr = cell_val.rows ();
+  int nc = cell_val.columns();
+
+  if (nr > 0 && nc > 0)
+    {
+      os << "{\n";
+
+      for (int j = 0; j < nc; j++)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      std::ostrstream buf;
+	      buf << "[" << i+1 << "," << j+1 << "]" << std::ends;
+	      const char *nm = buf.str ();
+
+	      octave_value val = cell_val(i,j);
+
+	      val.print_with_name (os, nm);
+
+	      delete [] nm;
+	    }
+	}
+
+      os << "}";
+    }
+  else
+    os << "{}";
+}
+
 DEFUN (disp, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} disp (@var{x})\n\
 Display the value of @var{x}.  For example,\n\
 \n\
 @example\n\
 disp (\"The value of pi is:\"), disp (pi)\n\
 \n\
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-cmplx.h"
 
 class ComplexMatrix;
 class Matrix;
 class Range;
 class boolMatrix;
 class charMatrix;
+class Cell;
 
 extern void
 octave_print_internal (std::ostream& os, double d,
 		       bool pr_as_read_syntax = false);
 
 extern void
 octave_print_internal (std::ostream& os, const Matrix& m,
 		       bool pr_as_read_syntax = false,
@@ -62,15 +63,20 @@ octave_print_internal (std::ostream& os,
 		       int extra_indent = 0);
 
 extern void
 octave_print_internal (std::ostream& os, const charMatrix& chm,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
+extern void
+octave_print_internal (std::ostream& os, const Cell& c,
+		       bool pr_as_read_syntax = false,
+		       int extra_indent = 0);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
