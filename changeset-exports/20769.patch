# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448640886 18000
#      Fri Nov 27 11:14:46 2015 -0500
# Node ID 58e79b0078e4bd32e612a6bb9e4d31f606793173
# Parent  7655b399abff362137f8cfdbe6c32aa86259ffac
handle exceptions when discarding error messages (bug #46534)

* oct-parse.in.yy (octave_base_parser::finish_colon_expression,
octave_base_parser::finish_array_list): Catch and recover from
exception that may happen when error messages are being discarded.
* graphics.cc (base_graphics_object::remove_all_listeners): Likewise.
* variables.cc (generate_struct_completions): Likewise.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3223,20 +3223,27 @@ base_graphics_object::remove_all_listene
       frame.protect_var (discard_error_messages);
       frame.protect_var (Vdebug_on_error);
       frame.protect_var (Vdebug_on_warning);
 
       discard_error_messages = true;
       Vdebug_on_error = false;
       Vdebug_on_warning = false;
 
-      property p = get_properties ().get_property (pa->first);
-
-      if (p.ok ())
-        p.delete_listener ();
+      try
+        {
+          property p = get_properties ().get_property (pa->first);
+
+          if (p.ok ())
+            p.delete_listener ();
+        }
+      catch (const octave_execution_exception&)
+        {
+          recover_from_exception ();
+        }
     }
 }
 
 void
 base_graphics_object::build_user_defaults_map (property_list::pval_map_type &def, const std::string go_name) const
 {
   property_list local_defaults = get_defaults_list ();
   property_list::plist_map_const_iterator p =
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -263,23 +263,30 @@ generate_struct_completions (const std::
           unwind_protect frame;
 
           frame.protect_var (discard_error_messages);
           frame.protect_var (discard_warning_messages);
 
           discard_error_messages = true;
           discard_warning_messages = true;
 
-          octave_value tmp = eval_string (prefix, true, parse_status);
-
-          frame.run ();
-
-          if (tmp.is_defined ()
-              && (tmp.is_map () || tmp.is_java () || tmp.is_classdef_object ()))
-            names = tmp.map_keys ();
+          try
+            {
+              octave_value tmp = eval_string (prefix, true, parse_status);
+
+              frame.run ();
+
+              if (tmp.is_defined ()
+                  && (tmp.is_map () || tmp.is_java () || tmp.is_classdef_object ()))
+                names = tmp.map_keys ();
+            }
+          catch (const octave_execution_exception&)
+            {
+              recover_from_exception ();
+            }
         }
     }
 
   return names;
 }
 
 // FIXME: this will have to be much smarter to work "correctly".
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2258,32 +2258,39 @@ octave_base_parser::finish_colon_express
 
   if (base)
     {
       if (limit)
         {
           if (base->is_constant () && limit->is_constant ()
               && (! incr || (incr && incr->is_constant ())))
             {
-              octave_value tmp = e->rvalue1 ();
-
-              tree_constant *tc_retval
-                = new tree_constant (tmp, base->line (), base->column ());
-
-              std::ostringstream buf;
-
-              tree_print_code tpc (buf);
-
-              e->accept (tpc);
-
-              tc_retval->stash_original_text (buf.str ());
-
-              delete e;
-
-              retval = tc_retval;
+              try
+                {
+                  octave_value tmp = e->rvalue1 ();
+
+                  tree_constant *tc_retval
+                    = new tree_constant (tmp, base->line (), base->column ());
+
+                  std::ostringstream buf;
+
+                  tree_print_code tpc (buf);
+
+                  e->accept (tpc);
+
+                  tc_retval->stash_original_text (buf.str ());
+
+                  delete e;
+
+                  retval = tc_retval;
+                }
+              catch (const octave_execution_exception&)
+                {
+                  recover_from_exception ();
+                }
             }
         }
       else
         {
           e->preserve_base ();
           delete e;
 
           retval = base;
@@ -3796,33 +3803,40 @@ octave_base_parser::finish_array_list (t
   frame.protect_var (discard_error_messages);
   frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   if (array_list->all_elements_are_constant ())
     {
-      octave_value tmp = array_list->rvalue1 ();
-
-      tree_constant *tc_retval
-        = new tree_constant (tmp, array_list->line (),
-                             array_list->column ());
-
-      std::ostringstream buf;
-
-      tree_print_code tpc (buf);
-
-      array_list->accept (tpc);
-
-      tc_retval->stash_original_text (buf.str ());
-
-      delete array_list;
-
-      retval = tc_retval;
+      try
+        {
+          octave_value tmp = array_list->rvalue1 ();
+
+          tree_constant *tc_retval
+            = new tree_constant (tmp, array_list->line (),
+                                 array_list->column ());
+
+          std::ostringstream buf;
+
+          tree_print_code tpc (buf);
+
+          array_list->accept (tpc);
+
+          tc_retval->stash_original_text (buf.str ());
+
+          delete array_list;
+
+          retval = tc_retval;
+        }
+      catch (const octave_execution_exception&)
+        {
+          recover_from_exception ();
+        }
     }
 
   return retval;
 }
 
 // Finish building a matrix list.
 
 tree_expression *
