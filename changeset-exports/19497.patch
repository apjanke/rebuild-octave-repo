# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1379627481 -10800
#      Fri Sep 20 00:51:21 2013 +0300
# Node ID 77b52b86b419e2402df62b4b2af0f2015b0e8f3d
# Parent  a9c67ed90fc0b64f604a85d4db1b3c77b91e310d
change @audiorecorder method docstrings to work with new texinfo

* audiorecorder.m, get.m, getaudiodata.m, play.m, record.m, set.m: change
stand-alone deftypefnx tags to deftypefn tags

diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -1,20 +1,25 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} recorder = audiorecorder
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz sample rate.
-## @deftypefnx{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels})
+## @end deftypefn
+## @deftypefn{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels})
 ## Create an audiorecorder object recording at specified sample rate @var{Fs}, specified bit depth @var{nBytes} and specified number of @var{Channels}.
-## @deftypefnx{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels}, @var{ID})
+## @end deftypefn
+## @deftypefn{Function File} recorder = audiorecorder (@var{Fs}, @var{nBytes}, @var{Channels}, @var{ID})
 ## Create an audiorecorder object recording at specified sample rate @var{Fs}, specified bit depth @var{nBytes}, number of @var{Channels} and recording on the device specified by @var{ID}. You can get device IDs by using the audiodevinfo function.
-## @deftypefnx{Function File} recorder = audiorecorder (@var{function}, @var{Fs})
+## @end deftypefn
+## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs})
 ## Argument @var{function} is a function handle, inline function or a string value of a function name that will get called to process audio. Audio will be recorded at @var{Fs} sampling rate.
-## @deftypefnx{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes})
+## @end deftypefn
+## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes})
 ## Same as above but also allows you to specify the number of bytes per sample.
-## @deftypefnx{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
+## @end deftypefn
+## @deftypefn{Function File} recorder = audiorecorder (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
 ## Same as above but also allows you to specify device ID that will be used.
 ## @end deftypefn
 
 function recorder = audiorecorder (varargin)
   if (nargin > 5)
     print_usage ();
   endif
   if nargin > 0 && ischar(varargin{1})
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -1,14 +1,16 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} @var{Value} = get (@var{recorderObj}, @var{Name})
 ## Returns the @var{Value} of the property identified by @var{Name}.
-## @deftypefnx{Function File} @var{Values} = get (@var{recorderObj}, @{@var{Name1}, ... , @var{NameN}@})
+## @end deftypefn
+## @deftypefn{Function File} @var{Values} = get (@var{recorderObj}, @{@var{Name1}, ... , @var{NameN}@})
 ## Returns the @var{Values} of the properties identified by @var{Name1} to @var{NameN}.
-## @deftypefnx{Function File} @var{Values} = get (@var{recorderObj})
+## @end deftypefn
+## @deftypefn{Function File} @var{Values} = get (@var{recorderObj})
 ## Returns a scalar structure with values of all properties of @var{recorderObj}. 
 ## The field names correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   recorder = varargin{1};
   properties = __get_properties__ (recorder);
   if nargin == 1
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -1,12 +1,13 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} getaudiodata (@var{recorderObj})
 ## Returns recorder audio data as a Matrix with values between -1.0 and 1.0 and with as many columns as there are channels in the recorder.
-## @deftypefnx{Function File} getaudiodata (@var{recorderObj}, @var{dataType})
+## @end deftypefn
+## @deftypefn{Function File} getaudiodata (@var{recorderObj}, @var{dataType})
 ## Converts recorded data to specified @var{dataType}. It can be set to 'double',
 ## 'single', 'int16', 'int8' or 'uint8'.
 ## @end deftypefn
 
 function data = getaudiodata(varargin)
     if (nargin < 1 || nargin > 2)
       print_usage ();
     endif
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -1,14 +1,16 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} player = play (@var{recorderObj})
 ## Play the audio recorded in @var{recorderObj} and return a corresponding audioplayer object.
-## @deftypefnx{Function File} player = play (@var{recorderObj}, start)
+## @end deftypefn
+## @deftypefn{Function File} player = play (@var{recorderObj}, start)
 ## Play the audio recorded in @var{recorderObj} starting from @var{start} seconds in to the recording. Returns a corresponding audioplayer object.
-## @deftypefnx{Function File} player = play (@var{recorderObj}, [start, end])
+## @end deftypefn
+## @deftypefn{Function File} player = play (@var{recorderObj}, [start, end])
 ## Play the audio recorded in @var{recorderObj} starting from @var{start} seconds and ending at @var{end} seconds in the recording. Returns a corresponding audioplayer object.
 ## @end deftypefn
 
 function player = play(varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif 
   recorder = varargin{1};
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -1,12 +1,13 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} record (@var{recorderObj})
 ## Record audio without blocking. The recording will continue until you use the stop method on @var{recorderObj}.
-## @deftypefnx{Function File} record (@var{playerObj}, @var{length})
+## @end deftypefn
+## @deftypefn{Function File} record (@var{playerObj}, @var{length})
 ## Record audio without blocking. The recording will continue for @var{length} seconds.
 ## @end deftypefn
 
 function record(varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif 
   __recorder_record__(struct(varargin{1}).recorder, varargin{2:end});
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -1,16 +1,19 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} set (@var{recorderObj}, @var{Name}, @var{Value})
 ## Set the value of property specified by @var{Name} to a given @var{Value}.
-## @deftypefnx{Function File} set (@var{recorderObj}, @var{CellOfNames}, @var{CellOfValues})
+## @end deftypefn
+## @deftypefn{Function File} set (@var{recorderObj}, @var{CellOfNames}, @var{CellOfValues})
 ## Given a cell array of property names and a cell array of values, set each property to a corresponding value.
-## @deftypefnx{Function File} set (@var{recorderObj}, @var{StructOfProperties})
+## @end deftypefn
+## @deftypefn{Function File} set (@var{recorderObj}, @var{StructOfProperties})
 ## Given a structure where fields are property names, set the value of those properties for an audiorecorder object to corresponding values.
-## @deftypefnx{Function File} @var{settableProperties} = set (@var{recorderObj})
+## @end deftypefn
+## @deftypefn{Function File} @var{settableProperties} = set (@var{recorderObj})
 ## Returns a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage();
   endif
   recorder = struct (varargin{1}).recorder;
