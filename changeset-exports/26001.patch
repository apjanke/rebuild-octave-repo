# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1541094743 14400
#      Thu Nov 01 13:52:23 2018 -0400
# Node ID acb4689aa5f25caa0b8482432a882e26c5223890
# Parent  97e63ba8a34cb59907f840029f74402b3ce2a8dd
* qz.cc: Use octave_stdout instead of std::cout for debugging messages.

diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -31,33 +31,31 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cctype>
 #include <cmath>
 
-#if defined (DEBUG) || defined (DEBUG_SORT) || defined (DEBUG_EIG)
-#  include <iostream>
-#  if defined (DEBUG_EIG)
-#    include <iomanip>
-#  endif
+#if defined (DEBUG_EIG)
+#  include <iomanip>
 #endif
 
 #include "f77-fcn.h"
 #include "lo-lapack-proto.h"
 #include "qr.h"
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #if defined (DEBUG) || defined (DEBUG_SORT)
+#  include "pager.h"
 #  include "pr-output.h"
 #endif
 
 // FIXME: Matlab does not produce lambda as the first output argument.
 // Compatibility problem?
 
 DEFUN (qz, args, nargout,
        doc: /* -*- texinfo -*-
@@ -165,28 +163,28 @@ Note: @code{qz} performs permutation bal
 @code{eig}.  The order of output arguments was selected for compatibility with
 @sc{matlab}.
 @seealso{eig, ordeig, balance, lu, chol, hess, qr, qzhess, schur, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
 #if defined (DEBUG)
-  std::cout << "qz: nargin = " << nargin
-            << ", nargout = " << nargout << std::endl;
+  octave_stdout << "qz: nargin = " << nargin
+                << ", nargout = " << nargout << std::endl;
 #endif
 
   if (nargin < 2 || nargin > 3 || nargout > 7)
     print_usage ();
 
   if (nargin == 3 && (nargout < 3 || nargout > 4))
     error ("qz: invalid number of output arguments for form 3 call");
 
 #if defined (DEBUG)
-  std::cout << "qz: determine ordering option" << std::endl;
+  octave_stdout << "qz: determine ordering option" << std::endl;
 #endif
 
   // Determine ordering option.
 
   char ord_job = 'N';
   double safmin = 0.0;
 
   if (nargin == 3)
@@ -204,51 +202,53 @@ Note: @code{qz} performs permutation bal
         error ("qz: invalid order option '%c'", ord_job);
 
       // overflow constant required by dlag2
       F77_FUNC (xdlamch, XDLAMCH) (F77_CONST_CHAR_ARG2 ("S", 1),
                                    safmin
                                    F77_CHAR_ARG_LEN (1));
 
 #if defined (DEBUG_EIG)
-      std::cout << "qz: initial value of safmin="
-                << setiosflags (std::ios::scientific)
-                << safmin << std::endl;
+      octave_stdout << "qz: initial value of safmin="
+                    << setiosflags (std::ios::scientific)
+                    << safmin << std::endl;
 #endif
 
       // Some machines (e.g., DEC alpha) get safmin = 0;
       // for these, use eps instead to avoid problems in dlag2.
       if (safmin == 0)
         {
 #if defined (DEBUG_EIG)
-          std::cout << "qz: DANGER WILL ROBINSON: safmin is 0!" << std::endl;
+          octave_stdout << "qz: DANGER WILL ROBINSON: safmin is 0!"
+                        << std::endl;
 #endif
 
           F77_FUNC (xdlamch, XDLAMCH) (F77_CONST_CHAR_ARG2 ("E", 1),
                                        safmin
                                        F77_CHAR_ARG_LEN (1));
 
 #if defined (DEBUG_EIG)
-          std::cout << "qz: safmin set to "
-                    << setiosflags (std::ios::scientific)
-                    << safmin << std::endl;
+          octave_stdout << "qz: safmin set to "
+                        << setiosflags (std::ios::scientific)
+                        << safmin << std::endl;
 #endif
         }
     }
 
 #if defined (DEBUG)
-  std::cout << "qz: check matrix A" << std::endl;
+  octave_stdout << "qz: check matrix A" << std::endl;
 #endif
 
   // Matrix A: check dimensions.
   F77_INT nn = octave::to_f77_int (args(0).rows ());
   F77_INT nc = octave::to_f77_int (args(0).columns ());
 
 #if defined (DEBUG)
-  std::cout << "Matrix A dimensions: (" << nn << ',' << nc << ')' << std::endl;
+  octave_stdout << "Matrix A dimensions: (" << nn << ',' << nc << ')'
+                << std::endl;
 #endif
 
   if (args(0).isempty ())
     {
       warn_empty_arg ("qz: A");
       return octave_value_list (2, Matrix ());
     }
   else if (nc != nn)
@@ -259,17 +259,17 @@ Note: @code{qz} performs permutation bal
   ComplexMatrix caa;
 
   if (args(0).iscomplex ())
     caa = args(0).complex_matrix_value ();
   else
     aa = args(0).matrix_value ();
 
 #if defined (DEBUG)
-  std::cout << "qz: check matrix B" << std::endl;
+  octave_stdout << "qz: check matrix B" << std::endl;
 #endif
 
   // Extract argument 2 (bb, or cbb if complex).
   F77_INT b_nr = octave::to_f77_int (args(1).rows ());
   F77_INT b_nc = octave::to_f77_int (args(1).columns ());
 
   if (nn != b_nc || nn != b_nr)
     err_nonconformant ();
@@ -317,18 +317,17 @@ Note: @code{qz} performs permutation bal
   // Always perform permutation balancing.
   const char bal_job = 'P';
   RowVector lscale (nn), rscale (nn), work (6 * nn), rwork (nn);
 
   if (complex_case)
     {
 #if defined (DEBUG)
       if (comp_q == 'V')
-        std::cout << "qz: performing balancing; CQ=" << std::endl
-                  << CQ << std::endl;
+        octave_stdout << "qz: performing balancing; CQ =\n" << CQ << std::endl;
 #endif
       if (args(0).isreal ())
         caa = ComplexMatrix (aa);
 
       if (args(1).isreal ())
         cbb = ComplexMatrix (bb);
 
       if (comp_q == 'V')
@@ -344,18 +343,17 @@ Note: @code{qz} performs permutation bal
                  nn, ilo, ihi, lscale.fortran_vec (),
                  rscale.fortran_vec (), work.fortran_vec (), info
                  F77_CHAR_ARG_LEN (1)));
     }
   else
     {
 #if defined (DEBUG)
       if (comp_q == 'V')
-        std::cout << "qz: performing balancing; QQ=" << std::endl
-                  << QQ << std::endl;
+        octave_stdout << "qz: performing balancing; QQ =\n" << QQ << std::endl;
 #endif
 
       F77_XFCN (dggbal, DGGBAL,
                 (F77_CONST_CHAR_ARG2 (&bal_job, 1),
                  nn, aa.fortran_vec (), nn, bb.fortran_vec (),
                  nn, ilo, ihi, lscale.fortran_vec (),
                  rscale.fortran_vec (), work.fortran_vec (), info
                  F77_CHAR_ARG_LEN (1)));
@@ -374,34 +372,34 @@ Note: @code{qz} performs permutation bal
                  F77_CONST_CHAR_ARG2 ("L", 1),
                  nn, ilo, ihi, lscale.data (), rscale.data (),
                  nn, QQ.fortran_vec (), nn, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)));
 
 #if defined (DEBUG)
       if (comp_q == 'V')
-        std::cout << "qz: balancing done; QQ=" << std::endl << QQ << std::endl;
+        octave_stdout << "qz: balancing done; QQ =\n" << QQ << std::endl;
 #endif
     }
 
   // then right
   if (comp_z == 'V')
     {
       F77_XFCN (dggbak, DGGBAK,
                 (F77_CONST_CHAR_ARG2 (&bal_job, 1),
                  F77_CONST_CHAR_ARG2 ("R", 1),
                  nn, ilo, ihi, lscale.data (), rscale.data (),
                  nn, ZZ.fortran_vec (), nn, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)));
 
 #if defined (DEBUG)
       if (comp_z == 'V')
-        std::cout << "qz: balancing done; ZZ=" << std::endl << ZZ << std::endl;
+        octave_stdout << "qz: balancing done; ZZ=\n" << ZZ << std::endl;
 #endif
     }
 #endif
 
   char qz_job = (nargout < 2 ? 'E' : 'S');
 
   if (complex_case)
     {
@@ -467,53 +465,53 @@ Note: @code{qz} performs permutation bal
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
         }
 
     }
   else
     {
 #if defined (DEBUG)
-      std::cout << "qz: performing qr decomposition of bb" << std::endl;
+      octave_stdout << "qz: performing qr decomposition of bb" << std::endl;
 #endif
 
       // Compute the QR factorization of bb.
       octave::math::qr<Matrix> bqr (bb);
 
 #if defined (DEBUG)
-      std::cout << "qz: qr (bb) done; now performing qz decomposition"
-                << std::endl;
+      octave_stdout << "qz: qr (bb) done; now performing qz decomposition"
+                    << std::endl;
 #endif
 
       bb = bqr.R ();
 
 #if defined (DEBUG)
-      std::cout << "qz: extracted bb" << std::endl;
+      octave_stdout << "qz: extracted bb" << std::endl;
 #endif
 
       aa = (bqr.Q ()).transpose () * aa;
 
 #if defined (DEBUG)
-      std::cout << "qz: updated aa " << std::endl;
-      std::cout << "bqr.Q () = " << std::endl << bqr.Q () << std::endl;
+      octave_stdout << "qz: updated aa " << std::endl;
+      octave_stdout << "bqr.Q () =\n" << bqr.Q () << std::endl;
 
       if (comp_q == 'V')
-        std::cout << "QQ =" << QQ << std::endl;
+        octave_stdout << "QQ =" << QQ << std::endl;
 #endif
 
       if (comp_q == 'V')
         QQ = QQ * bqr.Q ();
 
 #if defined (DEBUG)
-      std::cout << "qz: precursors done..." << std::endl;
+      octave_stdout << "qz: precursors done..." << std::endl;
 #endif
 
 #if defined (DEBUG)
-      std::cout << "qz: comp_q = " << comp_q << ", comp_z = " << comp_z
-                << std::endl;
+      octave_stdout << "qz: comp_q = " << comp_q << ", comp_z = " << comp_z
+                    << std::endl;
 #endif
 
       // Reduce to generalized Hessenberg form.
       F77_XFCN (dgghrd, DGGHRD,
                 (F77_CONST_CHAR_ARG2 (&comp_q, 1),
                  F77_CONST_CHAR_ARG2 (&comp_z, 1),
                  nn, ilo, ihi, aa.fortran_vec (),
                  nn, bb.fortran_vec (), nn, QQ.fortran_vec (), nn,
@@ -544,51 +542,49 @@ Note: @code{qz} performs permutation bal
                      F77_CONST_CHAR_ARG2 ("L", 1),
                      nn, ilo, ihi, lscale.data (), rscale.data (),
                      nn, QQ.fortran_vec (), nn, info
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
 
 #if defined (DEBUG)
           if (comp_q == 'V')
-            std::cout << "qz: balancing done; QQ=" << std::endl
-                      << QQ << std::endl;
+            octave_stdout << "qz: balancing done; QQ=\n" << QQ << std::endl;
 #endif
         }
 
       // then right
       if (comp_z == 'V')
         {
           F77_XFCN (dggbak, DGGBAK,
                     (F77_CONST_CHAR_ARG2 (&bal_job, 1),
                      F77_CONST_CHAR_ARG2 ("R", 1),
                      nn, ilo, ihi, lscale.data (), rscale.data (),
                      nn, ZZ.fortran_vec (), nn, info
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
 
 #if defined (DEBUG)
           if (comp_z == 'V')
-            std::cout << "qz: balancing done; ZZ=" << std::endl
-                      << ZZ << std::endl;
+            octave_stdout << "qz: balancing done; ZZ=\n" << ZZ << std::endl;
 #endif
         }
 
     }
 
   // Order the QZ decomposition?
   if (ord_job != 'N')
     {
       if (complex_case)
         // Probably not needed, but better be safe.
         error ("qz: cannot re-order complex QZ decomposition");
 
 #if defined (DEBUG_SORT)
-      std::cout << "qz: ordering eigenvalues: ord_job = "
-                << ord_job << std::endl;
+      octave_stdout << "qz: ordering eigenvalues: ord_job = "
+                    << ord_job << std::endl;
 #endif
 
       Array<F77_LOGICAL> select (dim_vector (nn, 1));
 
       for (int j = 0; j < nn; j++)
         {
           switch (ord_job)
             {
@@ -635,34 +631,33 @@ Note: @code{qz} performs permutation bal
                  mm,
                  pl, pr,
                  nullptr,
                  rwork3.fortran_vec (), lrwork3,
                  iwork.fortran_vec (), liwork,
                  info));
 
 #if defined (DEBUG_SORT)
-      std::cout << "qz: back from dtgsen: aa=" << std::endl;
-      octave_print_internal (std::cout, aa, 0);
-      std::cout << std::endl << "bb="  << std::endl;
-      octave_print_internal (std::cout, bb, 0);
-
+      octave_stdout << "qz: back from dtgsen: aa =\n";
+      octave_print_internal (octave_stdout, aa);
+      octave_stdout << "\nbb =\n";
+      octave_print_internal (octave_stdout, bb);
       if (comp_z == 'V')
         {
-          std::cout << std::endl << "ZZ="  << std::endl;
-          octave_print_internal (std::cout, ZZ, 0);
+          octave_stdout << "\nZZ =\n";
+          octave_print_internal (octave_stdout, ZZ);
         }
-      std::cout << std::endl << "qz: info=" << info << std::endl;
-      std::cout << "alphar = " << std::endl;
-      octave_print_internal (std::cout, (Matrix) alphar, 0);
-      std::cout << std::endl << "alphai = " << std::endl;
-      octave_print_internal (std::cout, (Matrix) alphai, 0);
-      std::cout << std::endl << "beta = " << std::endl;
-      octave_print_internal (std::cout, (Matrix) betar, 0);
-      std::cout << std::endl;
+      octave_stdout << "\nqz: info=" << info;
+      octave_stdout << "\nalphar =\n";
+      octave_print_internal (octave_stdout, Matrix (alphar));
+      octave_stdout << "\nalphai =\n";
+      octave_print_internal (octave_stdout, Matrix (alphai));
+      octave_stdout << "\nbeta =\n";
+      octave_print_internal (octave_stdout, Matrix (betar));
+      octave_stdout << std::endl;
 #endif
     }
 
   // Compute the generalized eigenvalues as well?
   ComplexColumnVector gev;
 
   if (nargout < 2 || nargout == 7 || (nargin == 3 && nargout == 4))
     {
@@ -673,17 +668,17 @@ Note: @code{qz} performs permutation bal
           for (F77_INT i = 0; i < nn; i++)
             tmp(i) = xalpha(i) / xbeta(i);
 
           gev = tmp;
         }
       else
         {
 #if defined (DEBUG)
-          std::cout << "qz: computing generalized eigenvalues" << std::endl;
+          octave_stdout << "qz: computing generalized eigenvalues" << std::endl;
 #endif
 
           // Return finite generalized eigenvalues.
           ComplexColumnVector tmp (nn);
 
           F77_INT cnt = 0;
           for (F77_INT i = 0; i < nn; i++)
             if (betar(i) != 0)
@@ -723,17 +718,17 @@ Note: @code{qz} performs permutation bal
                      m, F77_DBLE_CMPLX_ARG (cwork2.fortran_vec ()),
                      rwork2.fortran_vec (), info
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
         }
       else
         {
 #if defined (DEBUG)
-          std::cout << "qz: computing generalized eigenvectors" << std::endl;
+          octave_stdout << "qz: computing generalized eigenvectors" << std::endl;
 #endif
 
           VL = QQ;
           VR = ZZ;
           F77_INT m;
 
           F77_XFCN (dtgevc, DTGEVC,
                     (F77_CONST_CHAR_ARG2 (&side, 1),
@@ -813,19 +808,19 @@ Note: @code{qz} performs permutation bal
       // Return right eigenvectors.
       retval(4) = CVR;
       OCTAVE_FALLTHROUGH;
 
     case 4:
       if (nargin == 3)
         {
 #if defined (DEBUG)
-          std::cout << "qz: sort: retval(3) = gev = " << std::endl;
-          octave_print_internal (std::cout, ComplexMatrix (gev));
-          std::cout << std::endl;
+          octave_stdout << "qz: sort: retval(3) = gev =\n";
+          octave_print_internal (octave_stdout, ComplexMatrix (gev));
+          octave_stdout << std::endl;
 #endif
           retval(3) = gev;
         }
       else
         {
           if (complex_case)
             retval(3) = CZ;
           else
@@ -850,55 +845,55 @@ Note: @code{qz} performs permutation bal
         }
       OCTAVE_FALLTHROUGH;
 
     case 2:
       {
         if (complex_case)
           {
 #if defined (DEBUG)
-            std::cout << "qz: retval(1) = cbb = " << std::endl;
-            octave_print_internal (std::cout, cbb, 0);
-            std::cout << std::endl << "qz: retval(0) = caa = " <<std::endl;
-            octave_print_internal (std::cout, caa, 0);
-            std::cout << std::endl;
+            octave_stdout << "qz: retval(1) = cbb =\n";
+            octave_print_internal (octave_stdout, cbb);
+            octave_stdout << "\nqz: retval(0) = caa =\n";
+            octave_print_internal (octave_stdout, caa);
+            octave_stdout << std::endl;
 #endif
             retval(1) = cbb;
             retval(0) = caa;
           }
         else
           {
 #if defined (DEBUG)
-            std::cout << "qz: retval(1) = bb = " << std::endl;
-            octave_print_internal (std::cout, bb, 0);
-            std::cout << std::endl << "qz: retval(0) = aa = " <<std::endl;
-            octave_print_internal (std::cout, aa, 0);
-            std::cout << std::endl;
+            octave_stdout << "qz: retval(1) = bb =\n";
+            octave_print_internal (octave_stdout, bb);
+            octave_stdout << "\nqz: retval(0) = aa =\n";
+            octave_print_internal (octave_stdout, aa);
+            octave_stdout << std::endl;
 #endif
             retval(1) = bb;
             retval(0) = aa;
           }
       }
       break;
 
     case 1:
     case 0:
 #if defined (DEBUG)
-      std::cout << "qz: retval(0) = gev = " << gev << std::endl;
+      octave_stdout << "qz: retval(0) = gev = " << gev << std::endl;
 #endif
       retval(0) = gev;
       break;
 
     default:
       error ("qz: too many return arguments");
       break;
     }
 
 #if defined (DEBUG)
-  std::cout << "qz: exiting (at long last)" << std::endl;
+  octave_stdout << "qz: exiting (at long last)" << std::endl;
 #endif
 
   return retval;
 }
 
 /*
 %!shared a, b, c
 %! a = [1 2; 0 3];
