# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454334781 18000
#      Mon Feb 01 08:53:01 2016 -0500
# Node ID a223cce1daa48c7b57bdcd089139161338367121
# Parent  1edaf1ee65eb0d65fd0102cf39ef9f35df2d9630
strip trailing space from source files we maintain

* gl2ps-renderer.cc, gl2ps-renderer.h, pt-eval.cc CmplxCHOL.cc,
sparse-lu.h, datetick.m, index.tst: Strip trailing whitespace.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1581,24 +1581,24 @@ LIBS="$save_LIBS"
 ### Check for CXSparse library
 
 OCTAVE_CHECK_LIB(cxsparse, CXSparse,
   [CXSparse library not found.  This will result in some lack of functionality for sparse matrices.],
   [suitesparse/cs.h ufsparse/cs.h cxsparse/cs.h cs.h],
   [cs${CXSPARSE_TAG}sqr],
   [C++], [don't use CXSparse library, disable some sparse matrix functionality])
 
-## Additional check for CXSparse version >= 2.2 
+## Additional check for CXSparse version >= 2.2
 if test $octave_cv_lib_cxsparse = yes; then
   OCTAVE_CHECK_CXSPARSE_VERSION_OK
   if test $octave_cv_cxsparse_version_ok = no; then
     AC_MSG_ERROR([CXSparse library is too old (< version 2.2).  Upgrade CXSparse (SuiteSparse) or configure Octave with --disable-cxsparse"])
   fi
 fi
-  
+
 ### Check for UMFPACK library.
 
 save_LIBS="$LIBS"
 save_CPPFLAGS="$CPPFLAGS"
 LIBS="$AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
 CPPFLAGS="$AMD_CPPFLAGS $CPPFLAGS"
 OCTAVE_CHECK_LIB([umfpack], UMFPACK,
   [UMFPACK not found.  This will result in some lack of functionality for sparse matrices.],
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -141,17 +141,17 @@ gl2ps_renderer::draw (const graphics_obj
             }
 
           opengl_renderer::draw (go);
 
           if (! buffer_overflow)
             old_print_cmd = print_cmd;
 
           // Don't check return value of gl2psEndPage, it is not meaningful.
-          // Errors and warnings are checked after gl2psEndViewport in 
+          // Errors and warnings are checked after gl2psEndViewport in
           // gl2ps_renderer::draw_axes instead.
           gl2psEndPage ();
         }
 
       // Copy temporary file to pipe
       gnulib::fseek (tmpf, 0, SEEK_SET);
       char str[256];
       int nread = 1;
diff --git a/libinterp/corefcn/gl2ps-renderer.h b/libinterp/corefcn/gl2ps-renderer.h
--- a/libinterp/corefcn/gl2ps-renderer.h
+++ b/libinterp/corefcn/gl2ps-renderer.h
@@ -64,17 +64,17 @@ protected:
     glFinish ();
 
     // Finalize viewport
     GLint state = gl2psEndViewport ();
     if (state == GL2PS_NO_FEEDBACK)
       warning ("gl2ps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
     else if (state == GL2PS_ERROR)
       error ("gl2ps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
-    
+
     buffer_overflow |= (state == GL2PS_OVERFLOW);
   }
 
   void draw_text (const text::properties& props);
   void draw_pixels (GLsizei w, GLsizei h, GLenum format,
                     GLenum type, const GLvoid *data);
 
   void set_linestyle (const std::string& s, bool use_stipple = false)
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -726,17 +726,17 @@ tree_evaluator::visit_statement (tree_st
                          "out of memory or dimension too large for Octave's index type");
         }
     }
 }
 
 void
 tree_evaluator::visit_statement_list (tree_statement_list& lst)
 {
-  // FIXME: commented out along with else clause below. 
+  // FIXME: commented out along with else clause below.
   // static octave_value_list empty_list;
 
   tree_statement_list::iterator p = lst.begin ();
 
   if (p != lst.end ())
     {
       while (true)
         {
diff --git a/liboctave/numeric/CmplxCHOL.cc b/liboctave/numeric/CmplxCHOL.cc
--- a/liboctave/numeric/CmplxCHOL.cc
+++ b/liboctave/numeric/CmplxCHOL.cc
@@ -364,17 +364,17 @@ ComplexCHOL::insert_sym (const ComplexCo
   octave_idx_type info = -1;
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () != n + 1)
     (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
   if (j < 0 || j > n)
     (*current_liboctave_error_handler) ("cholinsert: index out of range");
-  
+
   if (singular (chol_mat))
     info = 2;
   else if (u(j).imag () != 0.0)
     info = 3;
   else
     {
       ComplexMatrix a = chol_mat.hermitian () * chol_mat;
       ComplexMatrix a1 (n+1, n+1);
diff --git a/liboctave/numeric/sparse-lu.h b/liboctave/numeric/sparse-lu.h
--- a/liboctave/numeric/sparse-lu.h
+++ b/liboctave/numeric/sparse-lu.h
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 
 template <typename lu_type>
 class
 sparse_lu
 {
 public:
 
   typedef typename lu_type::element_type lu_elt_type;
-  
+
   sparse_lu (void)
     : Lfact (), Ufact (), Rfact (), cond (0), P (), Q () { }
 
   sparse_lu (const lu_type& a, const Matrix& piv_thres = Matrix (),
              bool scale = false);
 
   sparse_lu (const lu_type& a, const ColumnVector& Qinit,
              const Matrix& piv_thres, bool scale = false,
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -142,17 +142,17 @@ function __datetick__ (varargin)
   if (keepticks)
     ticks = get (gca (), [ax "tick"]);
   else
     ## Need to do our own axis tick position calculation as
     ## year, etc., don't fall back to nice datenum values.
     if (keeplimits)
       limits = get (gca (), [ax "lim"]);
       xmin = limits(1);
-      xmax = limits(2);  
+      xmax = limits(2);
     else
       objs = findall (gca ());
       xmin = xmax = NaN;
       for i = 1 : numel (objs)
         fld = get (objs(i));
         if (isfield (fld, [ax "data"]))
           xdata = getfield (fld, [ax "data"])(:);
           xmin = min (xmin, min (xdata));
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -571,18 +571,18 @@
 %!shared abc, z
 %! abc = [1 2];
 %!error <abc\(0\+1i\): subscripts must be real>     abc(i)
 %! abc = [1 2; 3 4];
 %!error <abc\(1\+0i\): subscripts must be real>     abc(complex(1))
 %!error <abc\(1\+0.5i,_\): subscripts must be real> abc(1+0.5*i,3)
 %!error <abc\(_,0-2i\): subscripts must be real>   abc(2,0-2*i)
 
-## bug #35841 
+## bug #35841
 %!test
 %! a(1,1,1).b(1) = 2;
 %! a(1,1,1).b(1) = 3;
 
-## bug #39789 
+## bug #39789
 %!test
 %! c = cell(1,1,1);
 %! c{1,1,1} = zeros(5, 2);
 %! c{1,1,1}(:, 1) = 1;
