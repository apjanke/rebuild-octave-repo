# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362669782 18000
#      Thu Mar 07 10:23:02 2013 -0500
# Branch classdef
# Node ID 3449bf2575148c2493dcf8843aaef88772227ea1
# Parent  a8f9eb92fa6ebc1f9df69f46deeff1a4ec1ad8d4
maint: fix botched merge of default to classdef

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -164,17 +164,19 @@ public:
     : end_of_input (false), convert_spaces_to_comma (true),
       do_comma_insert (false), at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
-      maybe_classdef_get_set_method (false), parsing_classdef (false),
+      parsing_classdef (false), maybe_classdef_get_set_method (false),
+      parsing_classdef_get_method (false),
+      parsing_classdef_set_method (false), 
       quote_is_transpose (false), force_script (false),
       reading_fcn_file (false), reading_script_file (false),
       reading_classdef_file (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0), token_count (0),
       help_text (), fcn_file_name (), fcn_file_full_name (),
@@ -192,26 +194,19 @@ public:
 
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
-<<<<<<< local
-  void prep_for_classdef_file (void);
-=======
   // gag.  stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
->>>>>>> other
 
-<<<<<<< local
-  int octave_read (char *buf, unsigned int max_size);
-=======
   // true means we are at the beginning of a statement, where a
   // command name is possible.
   bool at_beginning_of_statement;
 
   // true means we are parsing an anonymous function argument list.
   bool looking_at_anon_fcn_args;
 
   // true means we're parsing the return list for a function.
@@ -237,23 +232,29 @@ public:
 
   // true means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
   // true means we are parsing a class method in function or classdef file.
   bool parsing_class_method;
 
+  // true means we are parsing a classdef file
+  bool parsing_classdef;
+
   // true means we are parsing a class method declaration line in a
   // classdef file and can accept a property get or set method name.
   // for example, "get.propertyname" is recognized as a function name.
   bool maybe_classdef_get_set_method;
 
-  // true means we are parsing a classdef file
-  bool parsing_classdef;
+  // TRUE means we are parsing a classdef get.method.
+  bool parsing_classdef_get_method;
+
+  // TRUE means we are parsing a classdef set.method.
+  bool parsing_classdef_set_method;
 
   // return transpose or start a string?
   bool quote_is_transpose;
 
   // TRUE means treat the current file as a script even if the first
   // token is "function" or "classdef".
   bool force_script;
 
@@ -398,17 +399,16 @@ public:
 
   void reset (void);
 
   void prep_for_file (void);
 
   int read (char *buf, unsigned int max_size);
 
   int handle_end_of_input (void);
->>>>>>> other
 
   char *flex_yytext (void);
 
   int flex_yyleng (void);
 
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
@@ -510,104 +510,20 @@ public:
     return input_source () == "terminal";
   }
 
   bool input_from_file (void) const
   {
     return input_source () == "file";
   }
 
-<<<<<<< local
-  // TRUE means we're parsing the parameter list for a function.
-  bool looking_at_parameter_list;
-
-  // TRUE means we're parsing a declaration list (global or
-  // persistent).
-  bool looking_at_decl_list;
-
-  // TRUE means we are looking at the initializer expression for a
-  // parameter list element.
-  bool looking_at_initializer_expression;
-
-  // TRUE means we're parsing a matrix or the left hand side of
-  // multi-value assignment statement.
-  bool looking_at_matrix_or_assign_lhs;
-
-  // Object index not possible until we've seen something.
-  bool looking_for_object_index;
-
-  // TRUE means we're looking at an indirect reference to a
-  // structure element.
-  bool looking_at_indirect_ref;
-
-  // TRUE means we are parsing a class method in function or classdef file.
-  bool parsing_class_method;
-
-  // TRUE means we are parsing a class method declaration line in a
-  // classdef file and can accept a property get or set method name.
-  // For example, "get.PropertyName" is recognized as a function name.
-  bool maybe_classdef_get_set_method;
-
-  // TRUE means we are parsing a classdef file
-  bool parsing_classdef;
-
-  // TRUE means we are parsing a classdef get.method.
-  bool parsing_classdef_get_method;
-
-  // TRUE means we are parsing a classdef set.method.
-  bool parsing_classdef_set_method;
-
-  // Return transpose or start a string?
-  bool quote_is_transpose;
-
-  // The current input line number.
-  int input_line_number;
-
-  // The column of the current token.
-  int current_input_column;
-
-  // Square bracket level count.
-  int bracketflag;
-
-  // Curly brace level count.
-  int braceflag;
-
-  // TRUE means we're in the middle of defining a loop.
-  int looping;
-
-  // Nonzero means we're in the middle of defining a function.
-  int defining_func;
-
-  // Nonzero means we are parsing a function handle.
-  int looking_at_function_handle;
-
-  // Nestng level for blcok comments.
-  int block_comment_nesting_level;
-
-  // If the front of the list is TRUE, the closest paren, brace, or
-  // bracket nesting is an index for an object.
-  std::list<bool> looking_at_object_index;
-
-  // If the top of the stack is TRUE, then we've already seen the name
-  // of the current function.  Should only matter if
-  // current_function_level > 0
-  std::stack<bool> parsed_function_name;
-
-  // Set of identifiers that might be local variable names.
-  std::set<std::string> pending_local_variables;
-
-  // Is the closest nesting level a square bracket, squiggly brace or
-  // a paren?
-  bbp_nesting_level nesting_level;
-=======
   bool input_from_eval_string (void) const
   {
     return input_source () == "eval_string";
   }
->>>>>>> other
 
   // For unwind protect.
   static void cleanup (octave_lexer *lexer) { delete lexer; }
 
 private:
 
   // No copying!
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -41,23 +41,17 @@ object) relevant global values before an
 #include <config.h>
 #endif
 
 }
 
 %s COMMAND_START
 %s MATRIX_START
 
-<<<<<<< local
-%x SCRIPT_FILE_BEGIN
-%x FUNCTION_FILE_BEGIN
-%x CLASSDEF_FILE_BEGIN
-=======
 %x INPUT_FILE_BEGIN
->>>>>>> other
 
 %{
 
 #include <cctype>
 #include <cstring>
 
 #include <iostream>
 #include <set>
@@ -273,24 +267,16 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
     // May be reset later if we see "function" or "classdef" appears
     // as the first token.
     curr_lexer->reading_script_file = true;
 
     DISPLAY_TOK_AND_RETURN (INPUT_FILE);
   }
 
-<CLASSDEF_FILE_BEGIN>. {
-    LEXER_DEBUG ("<CLASSDEF_FILE_BEGIN>.");
-
-    BEGIN (INITIAL);
-    curr_lexer->xunput (yytext[0], yytext);
-    COUNT_TOK_AND_RETURN (CLASSDEF_FILE);
-  }
-
 %{
 // Help and other command-style functions.
 %}
 
 <COMMAND_START>{NL} {
     LEXER_DEBUG ("<COMMAND_START>{NL}");
 
     BEGIN (INITIAL);
@@ -1330,18 +1316,20 @@ lexical_feedback::reset (void)
   looking_at_return_list = false;
   looking_at_parameter_list = false;
   looking_at_decl_list = false;
   looking_at_initializer_expression = false;
   looking_at_matrix_or_assign_lhs = false;
   looking_for_object_index = false; 
   looking_at_indirect_ref = false;
   parsing_class_method = false;
+  parsing_classdef = false;
   maybe_classdef_get_set_method = false;
-  parsing_classdef = false;
+  parsing_classdef_get_method = false;
+  parsing_classdef_set_method = false;
   quote_is_transpose = false;
   force_script = false;
   reading_fcn_file = false;
   reading_script_file = false;
   reading_classdef_file = false;
   input_line_number = 1;
   current_input_column = 1;
   bracketflag = 0;
@@ -1475,49 +1463,22 @@ octave_lexer::reset (void)
   lexical_feedback::reset ();
 }
 
 void
 octave_lexer::prep_for_file (void)
 {
   OCTAVE_YYG;
 
-  reading_script_file = true;
-
   BEGIN (INPUT_FILE_BEGIN);
 }
 
 int
 octave_lexer::read (char *buf, unsigned max_size)
 {
-<<<<<<< local
-  OCTAVE_YYG;
-
-  BEGIN (FUNCTION_FILE_BEGIN);
-}
-
-void
-lexical_feedback::prep_for_classdef_file (void)
-{
-  OCTAVE_YYG;
-
-  BEGIN (CLASSDEF_FILE_BEGIN);
-}
-
-int
-lexical_feedback::octave_read (char *buf, unsigned max_size)
-{
-  static const char * const eol = "\n";
-  static std::string input_buf;
-  static const char *pos = 0;
-  static size_t chars_left = 0;
-  static bool eof = false;
-
-=======
->>>>>>> other
   int status = 0;
 
   if (input_buf.empty ())
     {
       bool eof = false;
       std::string input = input_reader.get_input (eof);
       input_buf.fill (input, eof);
     }
@@ -3760,23 +3721,17 @@ octave_lexer::display_token (int tok)
     case CATCH: std::cerr << "CATCH\n"; break;
     case GLOBAL: std::cerr << "GLOBAL\n"; break;
     case PERSISTENT: std::cerr << "PERSISTENT\n"; break;
     case FCN_HANDLE: std::cerr << "FCN_HANDLE\n"; break;
     case END_OF_INPUT: std::cerr << "END_OF_INPUT\n\n"; break;
     case LEXICAL_ERROR: std::cerr << "LEXICAL_ERROR\n\n"; break;
     case FCN: std::cerr << "FCN\n"; break;
     case CLOSE_BRACE: std::cerr << "CLOSE_BRACE\n"; break;
-<<<<<<< local
-    case SCRIPT_FILE: std::cerr << "SCRIPT_FILE\n"; break;
-    case FUNCTION_FILE: std::cerr << "FUNCTION_FILE\n"; break;
-    case CLASSDEF_FILE: std::cerr << "CLASSDEF_FILE\n"; break;
-=======
     case INPUT_FILE: std::cerr << "INPUT_FILE\n"; break;
->>>>>>> other
     case SUPERCLASSREF: std::cerr << "SUPERCLASSREF\n"; break;
     case METAQUERY: std::cerr << "METAQUERY\n"; break;
     case GET: std::cerr << "GET\n"; break;
     case SET: std::cerr << "SET\n"; break;
     case PROPERTIES: std::cerr << "PROPERTIES\n"; break;
     case METHODS: std::cerr << "METHODS\n"; break;
     case EVENTS: std::cerr << "EVENTS\n"; break;
     case CLASSDEF: std::cerr << "CLASSDEF\n"; break;
@@ -3812,20 +3767,16 @@ display_state (int state)
     case MATRIX_START:
       std::cerr << "MATRIX_START" << std::endl;
       break;
 
     case INPUT_FILE_BEGIN:
       std::cerr << "INPUT_FILE_BEGIN" << std::endl;
       break;
 
-    case CLASSDEF_FILE_BEGIN:
-      std::cerr << "CLASSDEF_FILE_BEGIN" << std::endl;
-      break;
-
     default:
       std::cerr << "UNKNOWN START STATE!" << std::endl;
       break;
     }
 }
 
 void
 octave_lexer::fatal_error (const char *msg)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -250,34 +250,24 @@ make_statement (T *arg)
 %token <tok_val> CLASSDEF
 %token <tok_val> PROPERTIES METHODS EVENTS ENUMERATION
 %token <tok_val> METAQUERY
 %token <tok_val> SUPERCLASSREF
 %token <tok_val> GET SET
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
-<<<<<<< local
-%token FCN SCRIPT_FILE CLASSDEF_FILE FUNCTION_FILE
-=======
-%token FCN INPUT_FILE CLASSDEF
->>>>>>> other
+%token FCN INPUT_FILE
 // %token VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
-<<<<<<< local
 %type <comment_type> stash_comment function_beg
 %type <tok_type> classdef_beg
-%type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep opt_comma
-=======
-%type <comment_type> stash_comment function_beg classdef_beg
-%type <comment_type> properties_beg methods_beg events_beg enum_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep opt_comma
->>>>>>> other
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr
@@ -287,26 +277,20 @@ make_statement (T *arg)
 %type <octave_user_function_type> function1 function2
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1 param_list2
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
-<<<<<<< local
 %type <tree_command_type> jump_command except_command
 %type <tree_function_def_type> function
 %type <tree_classdef_type> classdef
-%type <tree_command_type> script_file classdef_file
-%type <tree_command_type> function_file function_list
-=======
-%type <tree_command_type> jump_command except_command function
-%type <tree_command_type> file classdef
->>>>>>> other
+%type <tree_command_type> file
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
 %type <tree_decl_elt_type> decl2
 %type <tree_decl_init_list_type> decl1
@@ -358,23 +342,16 @@ make_statement (T *arg)
 // ==============================
 
 input           : input1
                   {
                     curr_parser.stmt_list = $1;
                     promptflag = 1;
                     YYACCEPT;
                   }
-<<<<<<< local
-                | function_file
-                  { YYACCEPT; }
-                | classdef_file
-                  { YYACCEPT; }
-=======
->>>>>>> other
                 | simple_list parse_error
                   { ABORT_PARSE; }
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
 input1          : '\n'
                   { $$ = 0; }
@@ -459,30 +436,30 @@ identifier      : NAME
 
 superclass_identifier
                 : SUPERCLASSREF
                   {
                     std::string method_nm = $1->superclass_method_name ();
                     std::string package_nm = $1->superclass_package_name ();
                     std::string class_nm = $1->superclass_class_name ();
 
-                    $$ = curr_parser->make_superclass_ref
-                                        (method_nm, package_nm, class_nm,
-                                         $1->line (), $1->column ());
+                    $$ = curr_parser.make_superclass_ref
+                                       (method_nm, package_nm, class_nm,
+                                        $1->line (), $1->column ());
                   }
                 ;
 
 meta_identifier : METAQUERY
                   {
                     std::string package_nm = $1->meta_package_name ();
                     std::string class_nm = $1->meta_class_name ();
 
-                    $$ = curr_parser->make_meta_class_query
-                                        (package_nm, class_nm,
-                                         $1->line (), $1->column ());
+                    $$ = curr_parser.make_meta_class_query
+                                       (package_nm, class_nm,
+                                        $1->line (), $1->column ());
                   }
                 ;
 
 string          : DQ_STRING
                   { $$ = curr_parser.make_constant (DQ_STRING, $1); }
                 | SQ_STRING
                   { $$ = curr_parser.make_constant (SQ_STRING, $1); }
                 ;
@@ -1184,16 +1161,23 @@ file            : INPUT_FILE opt_nl opt_
                                                   curr_lexer->input_line_number,
                                                   curr_lexer->current_input_column);
 
                         curr_parser.make_script ($3, end_of_script);
                       }
 
                     $$ = 0;
                   }
+                | INPUT_FILE opt_nl classdef opt_sep END_OF_INPUT
+                  {
+                    if (curr_lexer->reading_classdef_file)
+                      curr_parser.classdef_object = $3;
+
+                    $$ = 0;
+                  }
                 ;
 
 // ===================
 // Function definition
 // ===================
 
 function_beg    : push_fcn_symtab FCN stash_comment
                   {
@@ -1297,55 +1281,37 @@ function_end    : END
                       }
 
                     $$ = curr_parser.make_end ("endfunction",
                                                 curr_lexer->input_line_number,
                                                 curr_lexer->current_input_column);
                   }
                 ;
 
-// =============
-// Classdef file
-// =============
-
-classdef_file   : CLASSDEF_FILE classdef opt_sep END_OF_INPUT
-                  {
-                    curr_parser->classdef_object = $2;
-                    $$ = 0;
-                  }
-                ;
-
 // ========
 // Classdef
 // ========
 
 classdef_beg    : CLASSDEF
                   {
-                    if (! reading_classdef_file)
+                    if (! curr_lexer->reading_classdef_file)
                       {
-                        curr_parser->bison_error ("classdef must appear inside a file containing only a class definition");
+                        curr_parser.bison_error ("classdef must appear inside a file containing only a class definition");
                         YYABORT;
                       }
 
                     curr_lexer->parsing_classdef = true;
                     $$ = $1;
                   }
                 ;
 
 classdef        : classdef_beg stash_comment opt_attr_list identifier opt_superclass_list opt_sep class_body opt_sep END
                   {
                     curr_lexer->parsing_classdef = false;
-<<<<<<< local
-                    if (! ($$ = curr_parser->make_classdef ($1, $3, $4, $5, $7, $9, $2)))
-=======
-
-                    if (curr_parser.end_token_ok ($1, token::classdef_end))
-                      $$ = curr_parser.make_end ("endclassdef", $1->line (), $1->column ());
-                    else
->>>>>>> other
+                    if (! ($$ = curr_parser.make_classdef ($1, $3, $4, $5, $7, $9, $2)))
                       ABORT_PARSE;
                   }
                 ;
 
 opt_attr_list   : // empty
                   { $$ = 0; }
                 | '(' attr_list ')'
                   { $$ = $2; }
@@ -1421,18 +1387,18 @@ class_body      : properties_block
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 properties_block
                 : PROPERTIES stash_comment opt_attr_list opt_sep property_list opt_sep END
                   {
-                    if (! ($$ = curr_parser->make_classdef_properties_block
-                                               ($1, $3, $5, $7, $2)))
+                    if (! ($$ = curr_parser.make_classdef_properties_block
+                                              ($1, $3, $5, $7, $2)))
                       ABORT_PARSE;
                   }
                 ;
 
 property_list
                 : class_property
                   { $$ = new tree_classdef_property_list ($1); }
                 | property_list opt_sep class_property
@@ -1448,18 +1414,18 @@ class_property  : identifier
                   {
                     curr_lexer->looking_at_initializer_expression = false;
                     $$ = new tree_classdef_property ($1, $4);
                   }
                 ;
 
 methods_block   : METHODS stash_comment opt_attr_list opt_sep methods_list opt_sep END
                   {
-                    if (! ($$ = curr_parser->make_classdef_methods_block
-                                               ($1, $3, $5, $7, $2)))
+                    if (! ($$ = curr_parser.make_classdef_methods_block
+                                              ($1, $3, $5, $7, $2)))
                       ABORT_PARSE;
                   }
                 ;
 
 methods_list    : function
                   {
                     octave_value fcn;
                     if ($1)
@@ -1476,18 +1442,18 @@ methods_list    : function
 
                     $1->append (fcn);
                     $$ = $1;
                   }
                 ;
 
 events_block    : EVENTS stash_comment opt_attr_list opt_sep events_list opt_sep END
                   {
-                    if (! ($$ = curr_parser->make_classdef_events_block
-                                               ($1, $3, $5, $7, $2)))
+                    if (! ($$ = curr_parser.make_classdef_events_block
+                                              ($1, $3, $5, $7, $2)))
                       ABORT_PARSE;
                   }
                 ;
 
 events_list     : class_event
                   { $$ = new tree_classdef_events_list ($1); }
                 | events_list opt_sep class_event
                   {
@@ -1497,18 +1463,18 @@ events_list     : class_event
                 ;
 
 class_event     : identifier
                   { $$ = new tree_classdef_event ($1); }
                 ;
 
 enum_block      : ENUMERATION stash_comment opt_attr_list opt_sep enum_list opt_sep END
                   {
-                    if (! ($$ = curr_parser->make_classdef_enum_block
-                                               ($1, $3, $5, $7, $2)))
+                    if (! ($$ = curr_parser.make_classdef_enum_block
+                                              ($1, $3, $5, $7, $2)))
                       ABORT_PARSE;
                   }
                 ;
 
 enum_list       : class_enum
                   { $$ = new tree_classdef_enum_list ($1); }
                 | enum_list opt_sep class_enum
                   {
@@ -3001,22 +2967,22 @@ octave_parser::make_classdef (token *tok
                               tree_classdef_superclass_list *sc,
                               tree_classdef_body *body, token *end_tok,
                               octave_comment_list *lc)
 {
   tree_classdef *retval = 0;
 
   std::string cls_name = id->name ();
 
-  std::string nm = curr_fcn_file_name;
+  std::string nm = curr_lexer->fcn_file_name;
 
   size_t pos = nm.find_last_of (file_ops::dir_sep_chars ());
 
   if (pos != std::string::npos)
-    nm = curr_fcn_file_name.substr (pos+1);
+    nm = curr_lexer->fcn_file_name.substr (pos+1);
 
   if (nm != cls_name)
     {
       bison_error ("invalid classdef definition, the class name must match the file name");
       return retval;
     }
 
   if (end_token_ok (end_tok, token::classdef_end))
@@ -3477,181 +3443,56 @@ parse_fcn_file (const std::string& full_
 
   if (ffile)
     {
       bool eof;
 
       // octave_parser constructor sets this for us.
       frame.protect_var (CURR_LEXER);
 
-<<<<<<< local
-      octave_parser *curr_parser = new octave_parser ();
-      frame.add_fcn (octave_parser::cleanup, curr_parser);
-=======
       octave_parser curr_parser (ffile);
->>>>>>> other
-
-<<<<<<< local
-      curr_parser->curr_class_name = dispatch_type;
-      curr_parser->autoloading = autoload;
-      curr_parser->fcn_file_from_relative_lookup = relative_lookup;
-=======
+
       curr_parser.curr_class_name = dispatch_type;
       curr_parser.autoloading = autoload;
       curr_parser.fcn_file_from_relative_lookup = relative_lookup;
->>>>>>> other
-
-<<<<<<< local
-      std::string help_txt
-        = gobble_leading_white_space
-            (ffile, eof,
-             curr_parser->curr_lexer->input_line_number,
-             curr_parser->curr_lexer->current_input_column);
-=======
+
       // Do this with an unwind-protect cleanup function so that
       // the forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
->>>>>>> other
-
-<<<<<<< local
-      if (! help_txt.empty ())
-        help_buf.push (help_txt);
-=======
+
       curr_parser.curr_lexer->force_script = force_script;
       curr_parser.curr_lexer->prep_for_file ();
       curr_parser.curr_lexer->parsing_class_method = ! dispatch_type.empty ();
->>>>>>> other
-
-<<<<<<< local
-      if (! eof)
-        {
-          std::string file_type;
-=======
+
       curr_parser.curr_lexer->fcn_file_name = file;
       curr_parser.curr_lexer->fcn_file_full_name = full_file;
->>>>>>> other
-
-<<<<<<< local
-          frame.protect_var (get_input_from_eval_string);
-          frame.protect_var (reading_fcn_file);
-          frame.protect_var (reading_script_file);
-          frame.protect_var (reading_classdef_file);
-          frame.protect_var (Vecho_executing_commands);
-=======
+
       int status = curr_parser.run ();
->>>>>>> other
-
-<<<<<<< local
-          get_input_from_eval_string = false;
-=======
+
       fcn_ptr = curr_parser.primary_fcn_ptr;
->>>>>>> other
-
-<<<<<<< local
-          if (! force_script && looking_at_function_keyword (ffile))
-            {
-              file_type = "function";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = false;
-              reading_fcn_file = true;
-              reading_script_file = false;
-            }
-          else if (! force_script && looking_at_classdef_keyword (ffile))
-            {
-              file_type = "classdef";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = true;
-              reading_fcn_file = false;
-              reading_script_file = false;
-            }
-          else
+
+      if (status == 0)
+        {
+          if (curr_parser.curr_lexer->reading_classdef_file
+              && curr_parser.classdef_object)
             {
-              file_type = "script";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = false;
-              reading_fcn_file = false;
-              reading_script_file = true;
-            }
-
-          // Do this with an unwind-protect cleanup function so that
-          // the forced variables will be unmarked in the event of an
-          // interrupt.
-          symbol_table::scope_id scope = symbol_table::top_scope ();
-          frame.add_fcn (symbol_table::unmark_forced_variables, scope);
-
-          if (! help_txt.empty ())
-            help_buf.push (help_txt);
-
-          if (reading_script_file)
-            curr_parser->curr_lexer->prep_for_script_file ();
-          else if (reading_classdef_file)
-            curr_parser->curr_lexer->prep_for_classdef_file ();
-          else
-            curr_parser->curr_lexer->prep_for_function_file ();
-
-          curr_parser->curr_lexer->parsing_class_method = ! dispatch_type.empty ();
-
-          frame.protect_var (global_command);
-
-          global_command = 0;
-
-          int status = curr_parser->run ();
-
-          // Use an unwind-protect cleanup function so that the
-          // global_command list will be deleted in the event of an
-          // interrupt.
-
-          frame.add_fcn (cleanup_statement_list, &global_command);
-
-          fcn_ptr = curr_parser->primary_fcn_ptr;
-
-          if (status == 0)
-            {
-              if (reading_classdef_file && curr_parser->classdef_object)
-                {
-                  // Convert parse tree for classdef object to
-                  // meta.class info (and stash it in the symbol
-                  // table?).  Return pointer to constructor?
-
-                  if (fcn_ptr)
-                    panic_impossible ();
-
-                  fcn_ptr = curr_parser->classdef_object->make_meta_class ();
-                }
-            }
-          else
-            {
-              error ("parse error while reading %s file %s",
-                     file_type.c_str(), ff.c_str ());
+              // Convert parse tree for classdef object to
+              // meta.class info (and stash it in the symbol
+              // table?).  Return pointer to constructor?
+
+              if (fcn_ptr)
+                panic_impossible ();
+
+              fcn_ptr = curr_parser.classdef_object->make_meta_class ();
             }
         }
       else
-        {
-          int l = curr_parser->curr_lexer->input_line_number;
-          int c = curr_parser->curr_lexer->current_input_column;
-
-          tree_statement *end_of_script
-            = curr_parser->make_end ("endscript", l, c);
-
-          curr_parser->make_script (0, end_of_script);
-
-          fcn_ptr = curr_parser->primary_fcn_ptr;
-        }
-=======
-      if (status != 0)
         error ("parse error while reading file %s", full_file.c_str ());
->>>>>>> other
     }
   else if (require_file)
     error ("no such file, '%s'", full_file.c_str ());
   else if (! warn_for.empty ())
     error ("%s: unable to open file '%s'", warn_for.c_str (),
            full_file.c_str ());
 
   return fcn_ptr;
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -146,22 +146,18 @@ octave_parser
 public:
 
   octave_parser (void)
     : endfunction_found (false),
       autoloading (false), fcn_file_from_relative_lookup (false),
       parsing_subfunctions (false), max_fcn_depth (0),
       curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), function_scopes (), primary_fcn_ptr (0),
-<<<<<<< local
-      classdef_object (0), curr_lexer (new lexical_feedback ())
-=======
-      stmt_list (0),
+      classdef_object (0), stmt_list (0),
       curr_lexer (new octave_lexer ()), parser_state (0)
->>>>>>> other
   {
     init ();
   }
 
   octave_parser (FILE *file)
     : endfunction_found (false),
       autoloading (false), fcn_file_from_relative_lookup (false),
       parsing_subfunctions (false), max_fcn_depth (0),
@@ -451,23 +447,21 @@ public:
   // A stack holding the nested function scopes being parsed.
   // We don't use std::stack, because we want the clear method. Also, we
   // must access one from the top
   std::vector<symbol_table::scope_id> function_scopes;
 
   // Pointer to the primary user function or user script function.
   octave_function *primary_fcn_ptr;
 
-<<<<<<< local
   // Pointer to the classdef object we just parsed, if any.
   tree_classdef *classdef_object;
-=======
+
   // Result of parsing input.
   tree_statement_list *stmt_list;
->>>>>>> other
 
   // State of the lexer.
   octave_lexer *curr_lexer;
 
   // Internal state of the parser.  Only used if USE_PUSH_PARSER is
   // defined.
   void *parser_state;
 
