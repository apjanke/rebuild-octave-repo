# HG changeset patch
# User jwe
# Date 1196301431 0
#      Thu Nov 29 01:57:11 2007 +0000
# Node ID 4612ef369abb38f94f878ac5f9338cbbbdd3877f
# Parent  720c2b4271f82ae0a68a7f91bf5015b8b2bd6b25
[project @ 2007-11-29 01:57:10 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-11-28  John W. Eaton  <jwe@octave.org>
+
+	* plot/__go_draw_axes__.m (get_data_limits): Delete unused arg TX.
+
 2007-11-28  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* plot/drawnow.m: Fix typo.
 
 2007-11-27  David Bateman  <dbateman@free.fr>
 
 	* plot/errorbar.m, plot/loglog.m, plot/loglogerr.m, plot/polar.m,
 	plot/semilogx.m, plot/semilogxerr.m, plot/semilogy.m,
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -247,23 +247,23 @@ function __go_draw_axes__ (h, plot_strea
     is_image_data = [];
     hidden_removal = NaN;
 
     xminp = yminp = zminp = cminp = Inf;
     xmax = ymax = zmax = cmax = -Inf;
     xmin = ymin = zmin = cmin = Inf;
 
     ## This has to be done here as some of the code below depends on the
-    ## final clim
+    ## final clim.
     if (cautoscale)
       for i = 1:length (kids)
 	obj = get (kids(i));
 	if (isfield (obj, "cdata"))
-	  [cmin, cmax, cminp] = get_data_limits (cmin, cmax, cminp, 
-						 obj.cdata(:));
+	  cdat = obj.cdata(:);
+	  [cmin, cmax, cminp] = get_data_limits (cmin, cmax, cminp, cdat);
 	endif
       endfor
       if (cmin == cmax)
 	cmax = cmin + 1;
       endif      
       clim = [cmin, cmax];
     else
       clim = axis_obj.clim;
@@ -419,52 +419,73 @@ function __go_draw_axes__ (h, plot_strea
 	      xerr = true;
 	      xldat = xldat(:);
 	    endif
 	    xudat = obj.xudata;
 	    if (! isempty (xudat))
 	      xudat = xudat(:);
 	    endif
 	    if (yerr)
-	      ylo = ydat-ldat;
-	      yhi = ydat+udat;
+	      if (isempty (ldat))
+		ylo = ydat;
+	      else
+		ylo = ydat-ldat;
+	      endif
+	      if (isempty (udat))
+		yhi = ydat;
+	      else
+		yhi = ydat+udat;
+	      endif
 	      if (yautoscale)
 		ty = [ydat; ylo; yhi];
 		[ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ty);
 	      endif
 	      if (xerr)
-		xlo = xdat-xldat;
-		xhi = xdat+xudat;
+		if (isempty (xldat))
+		  xlo = xdat;
+		else
+		  xlo = xdat-xldat;
+		endif
+		if (isempty (xudat))
+		  xhi = xdat;
+		else
+		  xhi = xdat+xudat;
+		endif
 		if (xautoscale)
 		  tx = [xdat; xlo; xhi];
 		  [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, tx);
 		endif
 		data{data_idx} = [xdat, ydat, xlo, xhi, ylo, yhi]';
 		usingclause{data_idx} = "using ($1):($2):($3):($4):($5):($6)";
 		withclause{data_idx} = "with xyerrorbars";
 	      else
-		## Obtain the limits based on the exact x values.
 		if (xautoscale)
-		  [xmin, xmax, xminp] = get_data_limits (xmin, xmax,
-							 xminp, xdat);
+		  [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 		endif
 		data{data_idx} = [xdat, ydat, ylo, yhi]';
 		usingclause{data_idx} = "using ($1):($2):($3):($4)";
 		withclause{data_idx} = "with yerrorbars";
 	      endif
 	    elseif (xerr)
-	      xlo = xdat-xldat;
-	      xhi = xdat+xudat;
+	      if (isempty (xldat))
+		xlo = xdat;
+	      else
+		xlo = xdat-xldat;
+	      endif
+	      if (isempty (xudat))
+		xhi = xdat;
+	      else
+		xhi = xdat+xudat;
+	      endif
 	      if (xautoscale)
 		tx = [xdat; xlo; xhi];
 		[xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, tx);
 	      endif
 	      if (yautoscale)
-		[ymin, ymax, yminp] = get_data_limits (ymin, ymax,
-						       yminp, ydat, ty);
+		[ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ydat);
 	      endif
 	      data{data_idx} = [xdat, ydat, xlo, xhi]';
 	      usingclause{data_idx} = "using ($1):($2):($3):($4)";
 	      withclause{data_idx} = "with xerrorbars";
 	    else
 	      if (xautoscale)
 		[xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 	      endif
@@ -1250,31 +1271,24 @@ function __go_draw_axes__ (h, plot_strea
     fflush (plot_stream);
 
   else
     print_usage ();
   endif
 
 endfunction
 
-function [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat, tx)
-  if (! (isempty (xdat) || (nargin > 4 && isempty (tx))))
+function [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat)
+  if (! isempty (xdat))
     xdat = xdat(! isinf (xdat));
     xmin = min (xmin, min (xdat));
     xmax = max (xmax, max (xdat));
-    if (nargin == 5)
-      tx = tx(! isinf (xdat) & tx > 0);
-      if (! isempty (tx))
-	xminp = min (xminp, min (tx));
-      endif
-    else
-      tmp = min (xdat(xdat > 0));
-      if (! isempty (tmp))
-	xminp = min (xminp, tmp);
-      endif
+    tmp = min (xdat(xdat > 0));
+    if (! isempty (tmp))
+      xminp = min (xminp, tmp);
     endif
   endif
 endfunction
 
 ## Attempt to make "nice" limits from the actual max and min of the
 ## data.  For log plots, we will also use the smallest strictly positive
 ## value.
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1972,18 +1972,17 @@ line::properties::factory_defaults (void
   m["color"] = color_property ();
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
   m["keylabel"] = "";
-  m["interpreter"] = 
-    radio_property (radio_values ("{tex}|none|latex"));
+  m["interpreter"] = radio_property (radio_values ("{tex}|none|latex"));
 
   return m;
 }
 
 std::string line::properties::go_name ("line");
 
 // ---------------------------------------------------------------------
 
@@ -2127,36 +2126,33 @@ text::properties::factory_defaults (void
   m["string"] = "";
   m["units"] = "data";
   m["position"] = Matrix (1, 3, 0.0);
   m["rotation"] = 0;
   m["horizontalalignment"] = "left";
   m["color"] = Matrix (1, 3, 1.0);
   m["fontname"] = "Helvetica";
   m["fontsize"] = 10;
-  m["fontangle"] = 
-      radio_property (radio_values ("{normal}|italic|oblique"));
-  m["fontweight"] = 
-    radio_property (radio_values ("{normal}|bold|demi|light"));
-  m["interpreter"] = 
-    radio_property (radio_values ("{tex}|none|latex"));
+  m["fontangle"] = radio_property (radio_values ("{normal}|italic|oblique"));
+  m["fontweight"] = radio_property (radio_values ("{normal}|bold|demi|light"));
+  m["interpreter"] = radio_property (radio_values ("{tex}|none|latex"));
 
   return m;
 }
 
 std::string text::properties::go_name ("text");
 
 // ---------------------------------------------------------------------
 
 image::properties::properties (const graphics_handle& mh,
 			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
-    cdata (Matrix ()),
     xdata (Matrix ()),
-    ydata (Matrix ())
+    ydata (Matrix ()),
+    cdata (Matrix ())
 { }
 
 void
 image::properties::set (const caseless_str& name,
 			const octave_value& val)
 {
   bool modified = true;
 
@@ -2166,22 +2162,22 @@ image::properties::set (const caseless_s
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
-  else if (name.compare ("cdata"))
-    set_cdata (val);
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
+  else if (name.compare ("cdata"))
+    set_cdata (val);
   else
     {
       modified = false;
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
@@ -2192,19 +2188,19 @@ image::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
-  m.assign ("cdata", cdata);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
+  m.assign ("cdata", cdata);
 
   return m;
 }
 
 octave_value
 image::properties::get (const caseless_str& name) const
 {
   octave_value retval;
@@ -2214,51 +2210,51 @@ image::properties::get (const caseless_s
   else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
-  else if (name.compare ("cdata"))
-    retval = cdata;
   else if (name.compare ("xdata"))
     retval = xdata;
   else if (name.compare ("ydata"))
     retval = ydata;
+  else if (name.compare ("cdata"))
+    retval = cdata;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
 image::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
-  m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
+  m["cdata"] = Matrix ();
 
   return m;
 }
 
 std::string image::properties::go_name ("image");
 
 // ---------------------------------------------------------------------
 
 patch::properties::properties (const graphics_handle& mh,
 			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
-    cdata (Matrix ()),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
+    cdata (Matrix ()),
     faces (Matrix ()),
     vertices (Matrix ()),
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
     edgecolor (color_values(0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
@@ -2281,24 +2277,24 @@ patch::properties::set (const caseless_s
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
-  else if (name.compare ("cdata"))
-    set_cdata (val);
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
   else if (name.compare ("zdata"))
     set_zdata (val);
+  else if (name.compare ("cdata"))
+    set_cdata (val);
   else if (name.compare ("faces"))
     set_faces (val);
   else if (name.compare ("vertices"))
     set_vertices (val);
   else if (name.compare ("facecolor"))
     set_facecolor (val);
   else if (name.compare ("facealpha"))
     set_facealpha (val);
@@ -2335,20 +2331,20 @@ patch::properties::get (void) const
 {
   Octave_map m;
 
   m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
-  m.assign ("cdata", cdata);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
+  m.assign ("cdata", cdata);
   m.assign ("faces", faces);
   m.assign ("vertices", vertices);
   m.assign ("facecolor", facecolor);
   m.assign ("facealpha", facealpha);
   m.assign ("edgecolor", edgecolor);
   m.assign ("linestyle", linestyle);
   m.assign ("linewidth", linewidth);
   m.assign ("marker", marker);
@@ -2371,24 +2367,24 @@ patch::properties::get (const caseless_s
   else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
-  else if (name.compare ("cdata"))
-    retval = cdata;
   else if (name.compare ("xdata"))
     retval = xdata;
   else if (name.compare ("ydata"))
     retval = ydata;
   else if (name.compare ("zdata"))
     retval = zdata;
+  else if (name.compare ("cdata"))
+    retval = cdata;
   else if (name.compare ("faces"))
     retval = faces;
   else if (name.compare ("vertices"))
     retval = vertices;
   else if (name.compare ("facecolor"))
     retval = facecolor;
   else if (name.compare ("facealpha"))
     retval = facealpha;
@@ -2416,34 +2412,33 @@ patch::properties::get (const caseless_s
   return retval;
 }
 
 property_list::pval_map_type
 patch::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
-  m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
+  m["cdata"] = Matrix ();
   m["faces"] = Matrix ();
   m["vertices"] = Matrix ();
   m["facecolor"] = color_property ();
   m["facealpha"] = 1.0;
   m["edgecolor"] = color_property ("black");
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
   m["keylabel"] = "";
-  m["interpreter"] = 
-    radio_property (radio_values ("{tex}|none|latex"));
+  m["interpreter"] = radio_property (radio_values ("{tex}|none|latex"));
 
   return m;
 }
 
 std::string patch::properties::go_name ("patch");
 
 // ---------------------------------------------------------------------
 
@@ -2618,18 +2613,17 @@ surface::properties::factory_defaults (v
   m["edgecolor"] = color_property ("black");
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
   m["markersize"] = 1;
   m["keylabel"] = "";
-  m["interpreter"] = 
-    radio_property (radio_values ("{tex}|none|latex"));
+  m["interpreter"] = radio_property (radio_values ("{tex}|none|latex"));
 
   return m;
 }
 
 std::string surface::properties::go_name ("surface");
 
 // ---------------------------------------------------------------------
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -407,97 +407,77 @@ public:
 private:
   Matrix cmap;
 };
 
 class data_property
 {
 public:
   data_property (const Matrix& m = Matrix ())
-    : data (m), lo (min_val (m)), hi (max_val (m)) { }
+    : data (m), min_val (octave_Inf), max_val (-octave_Inf),
+      min_pos (octave_Inf)
+  {
+    get_data_limits ();
+  }
 
   data_property (const octave_value& val)
+    : data (), min_val (octave_Inf), max_val (-octave_Inf),
+      min_pos (octave_Inf)
   {
     data = val.matrix_value ();
 
-    lo = min_val (data);
-    hi = max_val (data);
+    get_data_limits ();
   }
 
   data_property& operator = (const data_property& a)
   {
     if (&a != this)
       {
 	data = a.data;
-	lo = a.lo;
-	hi = a.hi;
+	min_val = a.min_val;
+	max_val = a.max_val;
+	min_pos = a.min_pos;
       }
 
     return *this;
   }
 
-  data_property& operator = (const octave_value& val) 
-  {
-    data = val.matrix_value ();
-
-    lo = min_val (data);
-    hi = max_val (data);
-
-    return *this;
-  }
-
   operator octave_value (void) const { return data; }
 
 private:
   Matrix data;
-  double lo;
-  double hi;
-
-  static double min_val (const Matrix& m)
+  double min_val;
+  double max_val;
+  double min_pos;
+
+  void get_data_limits (void)
   {
-    double retval = octave_NaN;
-
-    octave_idx_type nel = m.numel ();
+    octave_idx_type nel = data.numel ();
 
     if (nel > 0)
       {
-	retval = octave_Inf;
+	const double *d = data.data ();
 
 	for (octave_idx_type i = 0; i < nel; i++)
 	  {
-	    double d = m(i);
-
-	    if (! isnan (d) && m(i) < retval)
-	      retval = d;
+	    double val = d[i];
+
+	    if (! (xisinf (val) || xisnan (val)))
+	      {
+		if (val < min_val)
+		  min_val = val;
+
+		if (val > max_val)
+		  max_val = val;
+
+		if (val > 0 && val < min_pos)
+		  min_pos = val;
+	      }
 	  }
       }
-
-    return retval;
-  }
-
-  static double max_val (const Matrix& m)
-  {
-    double retval = octave_NaN;
-
-    octave_idx_type nel = m.numel ();
-
-    if (nel > 0)
-      {
-	retval = -octave_Inf;
-
-	for (octave_idx_type i = 0; i < nel; i++)
-	  {
-	    double d = m(i);
-
-	    if (! isnan (d) && m(i) > retval)
-	      retval = d;
-	  }
-      }
-
-    return retval;
   }
 };
 
 class property_list
 {
 public:
   typedef std::map<std::string, octave_value> pval_map_type;
   typedef std::map<std::string, pval_map_type> plist_map_type;
