# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1340316425 25200
#      Thu Jun 21 15:07:05 2012 -0700
# Branch gui
# Node ID 67c6835e51b6250c2f1ff99fb5f1ac1d4aae58f2
# Parent  e10d7bcfdd9e0237b8d31505f134d12d8df8b17c
Correctly recognize bool type in Workspace window.
Add stubs for inline function and function handle support.

* symbol-information.h: Differentiate between real scalar and bool type.
Add stubs for inline function and function handle support.

diff --git a/gui/src/symbol-information.h b/gui/src/symbol-information.h
--- a/gui/src/symbol-information.h
+++ b/gui/src/symbol-information.h
@@ -118,33 +118,37 @@ typedef struct symbol_information
     _type   = QString (symbol_record.varval ().type_name ().c_str ());
     octave_value ov = symbol_record.varval ();
 
     // For every type, convert to a human readable string.
     if (ov.is_sq_string ())
       _value = QString ("\'%1\'").arg (ov.string_value ().c_str ());
     else if (ov.is_dq_string ())
       _value = QString ("\"%1\"").arg (ov.string_value ().c_str ());
-    else if (ov.is_real_scalar ())
+    else if (ov.is_real_scalar () && ! ov.is_bool_type ())
       _value = QString ("%1").arg (ov.scalar_value ());
     else if (ov.is_complex_scalar ())
       _value = QString ("%1 + %2i").arg (ov.scalar_value ())
                                    .arg (ov.complex_value ().imag ());
     else if (ov.is_range ())
       _value =  QString ("%1 : %2 : %3").arg (ov.range_value ().base ())
                                         .arg (ov.range_value ().inc ())
                                         .arg (ov.range_value ().limit ());
-    else if (ov.is_matrix_type())
+    else if (ov.is_matrix_type ())
+      _value = QString ("%1x%2").arg (ov.rows ())
+                                .arg (ov.columns ());
+    else if (ov.is_cell ())
       _value = QString ("%1x%2").arg (ov.rows ())
                                 .arg (ov.columns ());
-    else if (ov.is_cell())
-      _value = QString ("%1x%2").arg (ov.rows ())
-                                .arg (ov.columns ());
-    else if (ov.is_bool_type () && !ov.is_matrix_type())
-      _value = ov.bool_value () ? "true" : "false";
+    else if (ov.is_bool_type ())
+      _value = ov.bool_value () ? QString ("true") : QString ("false");
+    else if (ov.is_function_handle ())
+      _value = QString ("FIXME: function handle found"); // See code for func2str for a possible solution
+    else if (ov.is_inline_function ())
+      _value = QString ("FIXME: inline function found"); // See code for formula for a possible solution
     else
       _value = QString ("<Type not recognized>");
 
     _value.replace("\n", "\\n");
     return true;
   }
 } symbol_information;
 
