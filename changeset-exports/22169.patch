# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1458876520 -39600
#      Fri Mar 25 14:28:40 2016 +1100
# Node ID b3ced5e3cebbbe561a1dee8a9a19e6baf00d52a8
# Parent  cc731bdc5103fcbc944b4cc0bf70eecb1ead87cd
Enable shortcuts for find next / find previous

* file-editor-tab.cc (find_next, find_previous): new function/slot

* file-editor-tab.cc (find): connect signals to the above and add the
  actions from the editor to the find dialog

* file-editor-tab.h: New signals and slots

* file-editor.cc (constructor): create list of actions for the editor tabs

* file-editor.cc (request_find_next, request_find_previous):
  new funciton/slot

* file-editor.cc (request_find): emit find signal with action list to tab

* file-editor.cc (add_file_editor_tab): connect signals to the above

* file-editor.cc (construct): new actions: find next / find previous

* file-editor.cc (set_shortcut): shortcuts for the above

* file-editor.cc (check_actions): enable the above

* file-editor.h: New slots, signals and members

* shortcut-manager.cc: shortcuts for find-next and find-previous,
  new default for Goto Line, which conflicts with find next in linux

* find-dialog.cc (constructor): add new actions from the editor

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1173,34 +1173,42 @@ file_editor_tab::handle_find_dialog_fini
 {
   // Find dialog is going to hide.  Save location of window for
   // when it is reshown.
   _find_dialog_geometry = _find_dialog->geometry ();
   _find_dialog_is_visible = false;
 }
 
 void
-file_editor_tab::find (const QWidget *ID)
+file_editor_tab::find (const QWidget *ID, QList<QAction *> fetab_actions)
 {
   if (ID != this)
     return;
 
   // The find_dialog feature doesn't need a slot for return info.
   // Rather than Qt::DeleteOnClose, let the find feature hang about
   // in case it contains useful information like previous searches
   // and so on.  Perhaps one find dialog for the whole editor is
   // better, but individual find dialogs has the nice feature of
   // retaining position per file editor tabs, which can be undocked.
 
   if (! _find_dialog)
     {
       _find_dialog = new find_dialog (_edit_area,
+                                      fetab_actions.mid (0,2),
                                       qobject_cast<QWidget *> (sender ()));
       connect (_find_dialog, SIGNAL (finished (int)),
                this, SLOT (handle_find_dialog_finished (int)));
+
+      connect (this, SIGNAL (request_find_next ()),
+               _find_dialog, SLOT (find_next ()));
+
+      connect (this, SIGNAL (request_find_previous ()),
+               _find_dialog, SLOT (find_prev ()));
+
       _find_dialog->setWindowModality (Qt::NonModal);
       _find_dialog_geometry = _find_dialog->geometry ();
     }
   else if (! _find_dialog->isVisible ())
     {
       _find_dialog->setGeometry (_find_dialog_geometry);
       QPoint p = _find_dialog->pos ();
       _find_dialog->move(p.x ()+10, p.y ()+10);
@@ -1209,16 +1217,30 @@ file_editor_tab::find (const QWidget *ID
   _find_dialog->show ();
   _find_dialog_is_visible = true;
   _find_dialog->activateWindow ();
   _find_dialog->init_search_text ();
 
 }
 
 void
+file_editor_tab::find_next (const QWidget *ID)
+{
+  if (ID == this)
+    emit request_find_next ();
+}
+
+void
+file_editor_tab::find_previous (const QWidget *ID)
+{
+  if (ID == this)
+    emit request_find_previous ();
+}
+
+void
 file_editor_tab::goto_line (const QWidget *ID, int line)
 {
   if (ID != this)
     return;
 
   if (line <= 0)  // ask for desired line
     {
       bool ok = false;
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -109,17 +109,19 @@ public slots:
   void indent_selected_text (const QWidget *ID);
   void unindent_selected_text (const QWidget *ID);
   void convert_eol (const QWidget *ID, QsciScintilla::EolMode);
 
   void zoom_in (const QWidget *ID);
   void zoom_out (const QWidget *ID);
   void zoom_normal (const QWidget *ID);
 
-  void find (const QWidget *ID);
+  void find (const QWidget *ID, QList<QAction *>);
+  void find_next (const QWidget *ID);
+  void find_previous (const QWidget *ID);
   void goto_line (const QWidget *ID, int line = -1);
   void move_match_brace (const QWidget *ID, bool select);
   void show_auto_completion (const QWidget *ID);
 
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
   void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1,
@@ -154,16 +156,19 @@ signals:
   void mru_add_file (const QString& file_name, const QString& encoding);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void request_open_file (const QString&);
   void edit_mfile_request (const QString&, const QString&,
                            const QString&, int);
 
+  void request_find_next (void);
+  void request_find_previous (void);
+
   void remove_breakpoint_via_debugger_linenr (int debugger_linenr);
   void request_remove_breakpoint_via_editor_linenr (int editor_linenr);
   void remove_all_breakpoints (void);
   void find_translated_line_number (int original_linenr,
                                     int& translated_linenr, marker*&);
   void find_linenr_just_before (int linenr, int& original_linenr,
                                 int& editor_linenr);
   void report_marker_linenr (QIntList& lines, QStringList& conditions);
@@ -288,11 +293,12 @@ private:
   QsciAPIs *_lexer_apis;
   QString _prep_apis_file;
 
   static bool _cancelled;
 
   int _line;
   int _col;
   bool _lines_changed;
+
 };
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -59,16 +59,20 @@ file_editor::file_editor (QWidget *p)
   // preventing access to them when they are still undefined
   _undo_action = 0;
   _copy_action = 0;
   _paste_action = 0;
   _selectall_action = 0;
 
   construct ();
 
+  // actions that should also be available in the find dialog
+  _fetab_actions << _find_next_action;
+  _fetab_actions << _find_previous_action;
+
   setVisible (false);
   setAcceptDrops(true);
 
   _file_encoding = QString ();  // for selecting an encoding in open dialog
 }
 
 file_editor::~file_editor (void)
 {
@@ -1040,17 +1044,29 @@ file_editor::request_conv_eol_mac (bool)
 {
   emit fetab_convert_eol (_tab_widget->currentWidget (),
                           QsciScintilla::EolMac);
 }
 
 void
 file_editor::request_find (bool)
 {
-  emit fetab_find (_tab_widget->currentWidget ());
+  emit fetab_find (_tab_widget->currentWidget (), _fetab_actions);
+}
+
+void
+file_editor::request_find_next (bool)
+{
+  emit fetab_find_next (_tab_widget->currentWidget ());
+}
+
+void
+file_editor::request_find_previous (bool)
+{
+  emit fetab_find_previous (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_goto_line (bool)
 {
   emit fetab_goto_line (_tab_widget->currentWidget ());
 }
 
@@ -1607,16 +1623,22 @@ file_editor::construct (void)
 
   _cut_action = add_action (_edit_menu, resource_manager::icon ("edit-cut"),
           tr ("Cu&t"), SLOT (request_cut (bool)));
   _cut_action->setEnabled (false);
 
   _find_action = add_action (_edit_menu, resource_manager::icon ("edit-find-replace"),
           tr ("&Find and Replace..."), SLOT (request_find (bool)));
 
+  _find_next_action = add_action (_edit_menu, QIcon (),
+          tr ("Find &Next..."), SLOT (request_find_next (bool)));
+
+  _find_previous_action = add_action (_edit_menu, QIcon (),
+          tr ("Find &Previous..."), SLOT (request_find_previous (bool)));
+
   _edit_menu->addSeparator ();
 
   _edit_cmd_menu = _edit_menu->addMenu (tr ("&Commands"));
 
   _delete_line_action = add_action (_edit_cmd_menu, QIcon (),
           tr ("Delete Line"), SLOT (request_delete_line (bool)));
   _copy_line_action = add_action (_edit_cmd_menu, QIcon (),
           tr ("Copy Line"), SLOT (request_copy_line (bool)));
@@ -1827,16 +1849,18 @@ file_editor::construct (void)
   _tool_bar->addAction (_print_action);
   _tool_bar->addSeparator ();
   // _undo_action: later via main window
   _tool_bar->addAction (_redo_action);
   // _copy_action: later via the main window
   _tool_bar->addAction (_cut_action);
   // _paste_action: later via the main window
   _tool_bar->addAction (_find_action);
+  //_tool_bar->addAction (_find_next_action);
+  //_tool_bar->addAction (_find_previous_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_run_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_toggle_breakpoint_action);
   _tool_bar->addAction (_previous_breakpoint_action);
   _tool_bar->addAction (_next_breakpoint_action);
   _tool_bar->addAction (_remove_all_breakpoints_action);
 
@@ -1976,17 +2000,17 @@ file_editor::add_file_editor_tab (file_e
 
   connect (f, SIGNAL (edit_mfile_request (const QString&, const QString&,
                                           const QString&, int)),
            this, SLOT (handle_edit_mfile_request (const QString&, const QString&,
                                                   const QString&, int)));
 
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
-           f, SLOT (notice_settings (const QSettings *)));
+           f, SLOT (settings_changed (const QSettings *)));
 
   connect (this, SIGNAL (fetab_change_request (const QWidget*)),
            f, SLOT (change_editor_state (const QWidget*)));
 
   connect (this, SIGNAL (fetab_file_name_query (const QWidget*)),
            f, SLOT (file_name_query (const QWidget*)));
 
   connect (this, SIGNAL (fetab_save_file (const QWidget*, const QString&,
@@ -2071,18 +2095,24 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (indent_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_unindent_selected_text (const QWidget*)),
            f, SLOT (unindent_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_convert_eol (const QWidget*, QsciScintilla::EolMode)),
            f, SLOT (convert_eol (const QWidget*, QsciScintilla::EolMode)));
 
-  connect (this, SIGNAL (fetab_find (const QWidget*)),
-           f, SLOT (find (const QWidget*)));
+  connect (this, SIGNAL (fetab_find (const QWidget*, QList<QAction *>)),
+           f, SLOT (find (const QWidget*, QList<QAction *>)));
+
+  connect (this, SIGNAL (fetab_find_next (const QWidget*)),
+           f, SLOT (find_next (const QWidget*)));
+
+  connect (this, SIGNAL (fetab_find_previous (const QWidget*)),
+           f, SLOT (find_previous (const QWidget*)));
 
   connect (this, SIGNAL (fetab_goto_line (const QWidget*, int)),
            f, SLOT (goto_line (const QWidget*, int)));
 
   connect (this, SIGNAL (fetab_move_match_brace (const QWidget*, bool)),
            f, SLOT (move_match_brace (const QWidget*, bool)));
 
   connect (this, SIGNAL (fetab_completion (const QWidget*)),
@@ -2130,16 +2160,18 @@ file_editor::set_shortcuts ()
   shortcut_manager::set_shortcut (_close_all_action, "editor_file:close_all");
   shortcut_manager::set_shortcut (_close_others_action, "editor_file:close_other");
   shortcut_manager::set_shortcut (_print_action, "editor_file:print");
 
   // Edit menu
   shortcut_manager::set_shortcut (_redo_action, "editor_edit:redo");
   shortcut_manager::set_shortcut (_cut_action, "editor_edit:cut");
   shortcut_manager::set_shortcut (_find_action, "editor_edit:find_replace");
+  shortcut_manager::set_shortcut (_find_next_action, "editor_edit:find_next");
+  shortcut_manager::set_shortcut (_find_previous_action, "editor_edit:find_previous");
 
   shortcut_manager::set_shortcut (_delete_start_word_action, "editor_edit:delete_start_word");
   shortcut_manager::set_shortcut (_delete_end_word_action, "editor_edit:delete_end_word");
   shortcut_manager::set_shortcut (_delete_start_line_action, "editor_edit:delete_start_line");
   shortcut_manager::set_shortcut (_delete_end_line_action, "editor_edit:delete_end_line");
   shortcut_manager::set_shortcut (_delete_line_action, "editor_edit:delete_line");
   shortcut_manager::set_shortcut (_copy_line_action, "editor_edit:copy_line");
   shortcut_manager::set_shortcut (_cut_line_action, "editor_edit:cut_line");
@@ -2220,16 +2252,18 @@ file_editor::check_actions ()
   _context_doc_action->setEnabled (have_tabs);
 
   _view_editor_menu->setEnabled (have_tabs);
   _zoom_in_action->setEnabled (have_tabs);
   _zoom_out_action->setEnabled (have_tabs);
   _zoom_normal_action->setEnabled (have_tabs);
 
   _find_action->setEnabled (have_tabs);
+  _find_next_action->setEnabled (have_tabs);
+  _find_previous_action->setEnabled (have_tabs);
   _print_action->setEnabled (have_tabs);
   _run_action->setEnabled (have_tabs);
 
   _edit_function_action->setEnabled (have_tabs);
   _save_action->setEnabled (have_tabs);
   _save_as_action->setEnabled (have_tabs);
   _close_action->setEnabled (have_tabs);
   _close_all_action->setEnabled (have_tabs);
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -131,17 +131,19 @@ signals:
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_indent_selected_text (const QWidget* ID);
   void fetab_unindent_selected_text (const QWidget* ID);
   void fetab_convert_eol (const QWidget* ID, QsciScintilla::EolMode eol_mode);
-  void fetab_find (const QWidget* ID);
+  void fetab_find (const QWidget* ID, QList<QAction *>);
+  void fetab_find_next (const QWidget* ID);
+  void fetab_find_previous (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_move_match_brace (const QWidget* ID, bool select);
   void fetab_completion (const QWidget*);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID,
                                    int line = -1, const QString& = "");
   void fetab_set_focus (const QWidget* ID);
@@ -212,16 +214,18 @@ public slots:
   void request_lower_case (bool);
   void request_indent_selected_text (bool);
   void request_unindent_selected_text (bool);
   void request_conv_eol_windows (bool);
   void request_conv_eol_unix (bool);
   void request_conv_eol_mac (bool);
 
   void request_find (bool);
+  void request_find_next (bool);
+  void request_find_previous (bool);
 
   void request_goto_line (bool);
   void request_completion (bool);
 
   void handle_file_name_changed (const QString& fileName,
                                  const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request (void);
@@ -367,16 +371,18 @@ private:
   QAction *_delete_end_line_action;
   QAction *_delete_line_action;
   QAction *_copy_line_action;
   QAction *_cut_line_action;
   QAction *_duplicate_selection_action;
   QAction *_transpose_line_action;
 
   QAction *_find_action;
+  QAction *_find_next_action;
+  QAction *_find_previous_action;
   QAction *_find_files_action;
   QAction *_goto_line_action;
   QAction *_completion_action;
 
   QAction *_move_to_matching_brace;
   QAction *_sel_to_matching_brace;
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
@@ -413,16 +419,18 @@ private:
 
   QMenu *_edit_menu;
   QMenu *_edit_cmd_menu;
   QMenu *_edit_fmt_menu;
   QMenu *_edit_nav_menu;
   QMenu *_fileMenu;
   QMenu *_view_editor_menu;
 
+  QList<QAction*> _fetab_actions;
+
   tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   QString _file_encoding;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -64,17 +64,18 @@ along with Octave; see the file COPYING.
 #endif
 
 #if defined (HAVE_QSCINTILLA)
 
 #include <QtGui>
 #include <QIcon>
 #include "find-dialog.h"
 
-find_dialog::find_dialog (QsciScintilla* edit_area, QWidget *p)
+find_dialog::find_dialog (QsciScintilla* edit_area,
+                          QList<QAction *> find_actions, QWidget *p)
   : QDialog (p)
 {
   setWindowTitle (tr ("Find and Replace"));
   setWindowIcon (QIcon(":/actions/icons/find.png"));
 
   _search_label = new QLabel (tr ("Find &what:"));
   _search_line_edit = new QLineEdit;
   _search_label->setBuddy (_search_line_edit);
@@ -170,16 +171,19 @@ find_dialog::find_dialog (QsciScintilla*
   setLayout (main_layout);
 
   _extension->hide ();
   _find_next_button->setDefault (true);
   _find_result_available = false;
   _rep_all = 0;
   _rep_active = false;
 
+  // set the actions
+  addActions (find_actions);
+
   // move dialog to side of the parent if there is room on the desktop to do so.
   int xp = p->x () +20;
   int yp = p->y () + p->frameGeometry ().height () - sizeHint ().height () -20;
 
   if (yp < 0)
     yp = 0;
 
   move (xp, yp);
diff --git a/libgui/src/m-editor/find-dialog.h b/libgui/src/m-editor/find-dialog.h
--- a/libgui/src/m-editor/find-dialog.h
+++ b/libgui/src/m-editor/find-dialog.h
@@ -71,17 +71,18 @@ class QGroupBox;
 class QLabel;
 class QLineEdit;
 class QPushButton;
 
 class find_dialog : public QDialog
 {
   Q_OBJECT
 public:
-  find_dialog (QsciScintilla* edit_area, QWidget *parent = 0);
+  find_dialog (QsciScintilla* edit_area, QList<QAction *> find_actions,
+               QWidget *parent = 0);
   void init_search_text ();
 
 private slots:
   void handle_sel_search_changed (int);
   void handle_selection_changed (bool has_selected);
 
   void handle_backward_search_changed (int);
   void handle_search_text_changed (QString new_search_text);
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -200,16 +200,20 @@ shortcut_manager::do_init_data ()
   init (tr ("Close Other Files"), "editor_file:close_other", QKeySequence ());
   init (tr ("Print"), "editor_file:print", QKeySequence::Print);
 
   // edit
   init (tr ("Redo"), "editor_edit:redo", QKeySequence::Redo);
   init (tr ("Cut"), "editor_edit:cut", QKeySequence::Cut);
   init (tr ("Find and Replace"), "editor_edit:find_replace",
         QKeySequence::Find);
+  init (tr ("Find Next"), "editor_edit:find_next",
+        QKeySequence::FindNext);
+  init (tr ("Find Previous"), "editor_edit:find_previous",
+        QKeySequence::FindPrevious);
   init (tr ("Delete to Start of Word"), "editor_edit:delete_start_word",
         QKeySequence::DeleteStartOfWord);
   init (tr ("Delete to End of Word"), "editor_edit:delete_end_word",
         QKeySequence::DeleteEndOfWord);
   init (tr ("Delete to Start of Line"), "editor_edit:delete_start_line",
         QKeySequence (ctrl_shift + Qt::Key_Backspace));
   init (tr ("Delete to End of Line"), "editor_edit:delete_end_line",
         QKeySequence (ctrl_shift + Qt::Key_Delete));
@@ -250,17 +254,17 @@ shortcut_manager::do_init_data ()
   init (tr ("Convert Line Endings to Windows"), "editor_edit:conv_eol_winows",
         QKeySequence ());
   init (tr ("Convert Line Endings to Unix"), "editor_edit:conv_eol_unix",
         QKeySequence ());
   init (tr ("Convert Line Endings to Mac"), "editor_edit:conv_eol_mac",
         QKeySequence ());
 
   init (tr ("Goto Line"), "editor_edit:goto_line",
-        QKeySequence (ctrl + Qt::Key_G));
+        QKeySequence (ctrl + Qt::Key_L));
   init (tr ("Move to Matching Brace"), "editor_edit:move_to_brace",
         QKeySequence (ctrl + Qt::Key_M));
   init (tr ("Select to Matching Brace"), "editor_edit:select_to_brace",
         QKeySequence (ctrl_shift + Qt::Key_M));
   init (tr ("Toggle Bookmark"), "editor_edit:toggle_bookmark",
         QKeySequence (prefix + Qt::Key_F7));
   init (tr ("Next Bookmark"), "editor_edit:next_bookmark",
         QKeySequence (prefix + Qt::Key_F2));
