# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1379339204 -10800
#      Mon Sep 16 16:46:44 2013 +0300
# Node ID abde714a4f889c364460ac767060f732ee6b3bde
# Parent  11a1e8e41835f37f14aa4a30f13f86e16e17efba
let audiodevinfo be built even when PortAudio is not present

* audiodevinfo.cc: added conditional compilation constructs that prevent
parts of it from being compiled when PortAudio is not present

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -63,18 +63,19 @@ Returns the id of the first device that 
 \n\
 Returns 1 if the device bearing @var{ID} supports specified sampling rate\
  (@var{rate}), bits per sample (@var{bits}) and number of channels (@var{chans}).\
  Returns 0 otherwise. Set @var{IO} to 1 for input devices and to 0 for output\
  devices.\n\
 @end deftypefn"
 )
 {
+  octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length();
-  octave_value retval;
   PaError err;
   octave_scalar_map devinfo;
   octave_value_list input;
   octave_value_list output;
   err = Pa_Initialize ();
   if (err != paNoError) 
     { 
       error ("audiodevinfo: cannot initialize PortAudio");
@@ -356,16 +357,19 @@ and 1 for input devices");
         }
       retval = 0;
     }
   else
     {
       error ("audiodevinfo: wrong number of arguments");
       return retval;
     }
+#else
+  error ("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 /*
 
 %!test
 %!  devinfo = audiodevinfo;
 %!  assert(rows(devinfo.('input')) == 1);
