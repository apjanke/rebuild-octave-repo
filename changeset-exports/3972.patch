# HG changeset patch
# User jwe
# Date 1025722731 0
#      Wed Jul 03 18:58:51 2002 +0000
# Node ID c21bb69ea26201dfa6821dafaae169a9adf51b94
# Parent  41e7fa40ff4c8c24d8008887b186e65b62cd49c5
[project @ 2002-07-03 18:58:51 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2002-07-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (make_diag const octave_value&, const octave_value&):
+	Allow first arg to be 1x0 or 0x1.
+
 2002-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defaults.cc (loadpath): Comment out previous change.
 
 	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Return message too.  Only
 	generate error if user is not at least requesting the info output.
 
 	* DLD-FUNCTIONS/lsode.cc (Flsode): Fix typos in setting return value.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -312,16 +312,19 @@ DEFUN (cumsum, args, ,
 @deftypefn {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to 1 (column-wise cumulative sums).\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumsum);
 }
 
+// XXX FIXME XXX -- we could eliminate some duplicate code here with
+// some template functions or macros.
+
 static octave_value
 make_diag (const Matrix& v, int k)
 {
   int nr = v.rows ();
   int nc = v.columns ();
   assert (nc == 1 || nr == 1);
 
   octave_value retval;
@@ -475,40 +478,40 @@ make_diag (const octave_value& a, const 
     {
       Matrix m = a.matrix_value ();
 
       if (! error_state)
 	{
 	  int nr = m.rows ();
 	  int nc = m.columns ();
 
-	  if (nr == 0 || nc == 0)
+	  if (nr == 1 || nc == 1)
+	    retval = make_diag (m, k);
+	  else if (nr == 0 || nc == 0)
 	    retval = Matrix ();
-	  else if (nr == 1 || nc == 1)
-	    retval = make_diag (m, k);
 	  else
 	    {
 	      ColumnVector d = m.diag (k);
 	      retval = d;
 	    }
 	}
     }
   else if (a.is_complex_type ())
     {
       ComplexMatrix cm = a.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int nr = cm.rows ();
 	  int nc = cm.columns ();
 
-	  if (nr == 0 || nc == 0)
+	  if (nr == 1 || nc == 1)
+	    retval = make_diag (cm, k);
+	  else if (nr == 0 || nc == 0)
 	    retval = Matrix ();
-	  else if (nr == 1 || nc == 1)
-	    retval = make_diag (cm, k);
 	  else
 	    {
 	      ComplexColumnVector d = cm.diag (k);
 	      retval = d;
 	    }
 	}
     }
   else
