# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455903701 28800
#      Fri Feb 19 09:41:41 2016 -0800
# Node ID 61c96c37ce69d9410866b2d15e185c792d74f8f9
# Parent  0152d8745c3dc95c4c2679d8b25894c6879279e5
Use std::unique_ptr to replace deprecated std::auto_ptr.

* ov-cell.h, event-queue.h, txt-eng.h, idx-vector.cc, idx-vector.h,
unwind-prot.h:
Use std::unique_ptr to replace deprecated std::auto_ptr.

diff --git a/libinterp/corefcn/event-queue.h b/libinterp/corefcn/event-queue.h
--- a/libinterp/corefcn/event-queue.h
+++ b/libinterp/corefcn/event-queue.h
@@ -48,17 +48,17 @@ public:
     fifo.push (new_elem);
   }
 
   void run_first (void)
   {
     if (! empty ())
       {
         // No leak on exception!
-        std::auto_ptr<elem> ptr (fifo.front ());
+        std::unique_ptr<elem> ptr (fifo.front ());
         fifo.pop ();
         ptr->run ();
       }
   }
 
   void discard_first (void)
   {
     if (! empty ())
diff --git a/libinterp/corefcn/txt-eng.h b/libinterp/corefcn/txt-eng.h
--- a/libinterp/corefcn/txt-eng.h
+++ b/libinterp/corefcn/txt-eng.h
@@ -435,17 +435,17 @@ private:
   void* buffer_state;
 
   text_element* result;
 };
 
 inline text_element*
 text_parser::parse (const std::string& s, const caseless_str& interpreter)
 {
-  std::auto_ptr<text_parser> parser;
+  std::unique_ptr<text_parser> parser;
 
   if (interpreter.compare ("tex"))
     parser.reset (new text_parser_tex ());
   else
     parser.reset (new text_parser_none ());
 
   return parser->parse (s);
 }
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -177,15 +177,15 @@ public:
   // You should not use it anywhere else.
   void *mex_get_data (void) const;
 
 private:
 
   void clear_cellstr_cache (void) const
   { cellstr_cache.reset (); }
 
-  mutable std::auto_ptr<Array<std::string> > cellstr_cache;
+  mutable std::unique_ptr<Array<std::string> > cellstr_cache;
 
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -443,18 +443,18 @@ idx_vector::idx_base_rep *
 idx_vector::idx_vector_rep::sort_uniq_clone (bool uniq)
 {
   if (len == 0)
     {
       count++;
       return this;
     }
 
-  // This is wrapped in auto_ptr so that we don't leak on out-of-memory.
-  std::auto_ptr<idx_vector_rep> new_rep (
+  // This is wrapped in unique_ptr so that we don't leak on out-of-memory.
+  std::unique_ptr<idx_vector_rep> new_rep (
     new idx_vector_rep (0, len, ext, orig_dims, DIRECT));
 
   if (ext > len*xlog2 (1.0 + len))
     {
       // Use standard sort via octave_sort.
       octave_idx_type *new_data = new octave_idx_type [len];
       new_rep->data = new_data;
 
@@ -516,18 +516,18 @@ idx_vector::idx_vector_rep::sort_uniq_cl
     }
 
   return new_rep.release ();
 }
 
 idx_vector::idx_base_rep *
 idx_vector::idx_vector_rep::sort_idx (Array<octave_idx_type>& idx)
 {
-  // This is wrapped in auto_ptr so that we don't leak on out-of-memory.
-  std::auto_ptr<idx_vector_rep> new_rep (
+  // This is wrapped in unique_ptr so that we don't leak on out-of-memory.
+  std::unique_ptr<idx_vector_rep> new_rep (
     new idx_vector_rep (0, len, ext, orig_dims, DIRECT));
 
   if (ext > len*xlog2 (1.0 + len))
     {
       // Use standard sort via octave_sort.
       idx.clear (orig_dims);
       octave_idx_type *idx_data = idx.fortran_vec ();
       for (octave_idx_type i = 0; i < len; i++)
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -60,17 +60,17 @@ public:
     class_invalid = -1,
     class_colon = 0,
     class_range,
     class_scalar,
     class_vector,
     class_mask
   };
 
-  template <typename T> friend class std::auto_ptr;
+  template <typename T> friend class std::unique_ptr;
 
 private:
 
   class OCTAVE_API idx_base_rep
   {
   public:
     idx_base_rep (void) : count (1), err (false) { }
 
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -63,17 +63,17 @@ public:
   OCTAVE_DEPRECATED ("use 'run_first' instead")
   void run_top (void) { run_first (); }
 
   void run_first (void)
   {
     if (! empty ())
       {
         // No leak on exception!
-        std::auto_ptr<elem> ptr (lifo.top ());
+        std::unique_ptr<elem> ptr (lifo.top ());
         lifo.pop ();
         ptr->run ();
       }
   }
 
   OCTAVE_DEPRECATED ("use 'run' instead")
   void run_top (int num) { run (num); }
 
