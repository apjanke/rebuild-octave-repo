# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483742683 18000
#      Fri Jan 06 17:44:43 2017 -0500
# Node ID 6b4d2c8355f78f56f6b7e28737da1644fcf3ca28
# Parent  62eb83755336e696bc7081503bbe9776e8586631
move octave_local_buffer inside octave namespace

* oct-locbuf.h, oct-locbuf.cc (local_buffer): Move inside octave
namespace and rename from octave_local_buffer.  Change all uses.
(chunk_buffer): Likewise.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -1053,17 +1053,17 @@ namespace octave
         // object and then exit Octave.  Octave should crash with a
         // segfault when cleaning up the typinfo singleton.  We need some
         // way to force new octave_value_X types that are created in
         // .oct files to be unregistered when the .oct file shared library
         // is unloaded.
         //
         // OCTAVE_SAFE_CALL (singleton_cleanup_list::cleanup, ());
 
-        OCTAVE_SAFE_CALL (octave_chunk_buffer::clear, ());
+        OCTAVE_SAFE_CALL (octave::chunk_buffer::clear, ());
       }
 
     if (octave_link::exit (status))
       {
         if (safe_to_return)
           return;
         else
           {
diff --git a/liboctave/util/oct-locbuf.cc b/liboctave/util/oct-locbuf.cc
--- a/liboctave/util/oct-locbuf.cc
+++ b/liboctave/util/oct-locbuf.cc
@@ -30,123 +30,125 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 
 // FIXME: Maybe we should querying for available physical memory?
 
 #if ! defined (OCTAVE_LOCBUF_CHUNKSIZE_MB)
 #  define OCTAVE_LOCBUF_CHUNKSIZE_MB 32
 #endif
 
+namespace octave
+{
 // Each chunk will be at least this big.
 
-const size_t octave_chunk_buffer::chunk_size =
-  static_cast<size_t> (OCTAVE_LOCBUF_CHUNKSIZE_MB) << 20;
+  const size_t octave::chunk_buffer::chunk_size =
+    static_cast<size_t> (OCTAVE_LOCBUF_CHUNKSIZE_MB) << 20;
 
-char *octave_chunk_buffer::top = 0;
-char *octave_chunk_buffer::chunk = 0;
-size_t octave_chunk_buffer::left = 0;
-size_t octave_chunk_buffer::active = 0;
+  char *chunk_buffer::top = 0;
+  char *chunk_buffer::chunk = 0;
+  size_t chunk_buffer::left = 0;
+  size_t chunk_buffer::active = 0;
 
-octave_chunk_buffer::octave_chunk_buffer (size_t size) : cnk (0), dat (0)
-{
-  // Alignment mask.  The size of double or long int, whichever is
-  // greater.  All data will be aligned to this size.  If it's not
-  // enough for a type, that type should not be declared as POD.
+  chunk_buffer::chunk_buffer (size_t size) : cnk (0), dat (0)
+  {
+    // Alignment mask.  The size of double or long int, whichever is
+    // greater.  All data will be aligned to this size.  If it's not
+    // enough for a type, that type should not be declared as POD.
 
-  static const size_t align_mask = (sizeof (long) < sizeof (double)
-                                    ? sizeof (double)
-                                    : sizeof (long)) - 1;
+    static const size_t align_mask = (sizeof (long) < sizeof (double)
+                                      ? sizeof (double)
+                                      : sizeof (long)) - 1;
 
-  active++;
+    active++;
 
-  if (! size)
-    return;
+    if (! size)
+      return;
 
-  // Align size.  Note that size_t is unsigned, so size-1 must correctly
-  // wrap around.
+    // Align size.  Note that size_t is unsigned, so size-1 must correctly
+    // wrap around.
 
-  size = ((size - 1) | align_mask) + 1;
+    size = ((size - 1) | align_mask) + 1;
 
-  if (size > left)
-    {
-      // Big buffers (> 1/8 chunk) will be allocated as stand-alone and
-      // won't disrupt the chain.
+    if (size > left)
+      {
+        // Big buffers (> 1/8 chunk) will be allocated as stand-alone and
+        // won't disrupt the chain.
 
-      if (size > chunk_size >> 3)
-        {
-          // Use new [] to get std::bad_alloc if out of memory.
+        if (size > chunk_size >> 3)
+          {
+            // Use new [] to get std::bad_alloc if out of memory.
 
-          dat = new char [size];
-          return;
-        }
+            dat = new char [size];
+            return;
+          }
 
-      dat = new char [chunk_size];
-      chunk = top = dat;
-      left = chunk_size;
-    }
+        dat = new char [chunk_size];
+        chunk = top = dat;
+        left = chunk_size;
+      }
 
-  // Now allocate memory from the chunk and update state.
+    // Now allocate memory from the chunk and update state.
 
-  cnk = chunk;
-  dat = top;
-  left -= size;
-  top += size;
-}
+    cnk = chunk;
+    dat = top;
+    left -= size;
+    top += size;
+  }
 
-octave_chunk_buffer::~octave_chunk_buffer (void)
-{
-  active--;
+  chunk_buffer::~chunk_buffer (void)
+  {
+    active--;
 
-  if (cnk == chunk)
-    {
-      // Our chunk is still the active one.  Just restore the state.
+    if (cnk == chunk)
+      {
+        // Our chunk is still the active one.  Just restore the state.
 
-      left += top - dat;
-      top = dat;
-    }
-  else
-    {
-      if (cnk)
-        {
-          // Responsible for deletion.
+        left += top - dat;
+        top = dat;
+      }
+    else
+      {
+        if (cnk)
+          {
+            // Responsible for deletion.
 
-          delete [] chunk;
-          chunk = cnk;
-          top = dat;
+            delete [] chunk;
+            chunk = cnk;
+            top = dat;
 
-          // FIXME: the following calcuation of remaining data will
-          //        only work if each chunk has the same chunk_size.
+            // FIXME: the following calcuation of remaining data will
+            //        only work if each chunk has the same chunk_size.
 
-          left = chunk_size - (dat - cnk);
-        }
-      else
-        {
-          // We were a stand-alone buffer.
+            left = chunk_size - (dat - cnk);
+          }
+        else
+          {
+            // We were a stand-alone buffer.
 
-          delete [] dat;
-        }
-    }
-}
+            delete [] dat;
+          }
+      }
+  }
 
-// Clear the final chunk of allocated memory.
+  // Clear the final chunk of allocated memory.
 
-void
-octave_chunk_buffer::clear (void)
-{
-  if (active == 0)
-    {
-      delete [] chunk;
-      chunk = 0;
-      top = 0;
-      left = 0;
-    }
-  else
-    {
-      // FIXME: Doesn't this situation represent a programming error of
-      // some kind?  If so, maybe this should be a fatal error?
+  void
+  chunk_buffer::clear (void)
+  {
+    if (active == 0)
+      {
+        delete [] chunk;
+        chunk = 0;
+        top = 0;
+        left = 0;
+      }
+    else
+      {
+        // FIXME: Doesn't this situation represent a programming error of
+        // some kind?  If so, maybe this should be a fatal error?
 
-      (*current_liboctave_warning_with_id_handler)
-        ("Octave:local-buffer-inconsistency",
-         "octave_chunk_buffer::clear: %d active allocations remain!",
-         active);
-    }
+        (*current_liboctave_warning_with_id_handler)
+          ("Octave:local-buffer-inconsistency",
+           "chunk_buffer::clear: %d active allocations remain!",
+           active);
+      }
+  }
 }
-
diff --git a/liboctave/util/oct-locbuf.h b/liboctave/util/oct-locbuf.h
--- a/liboctave/util/oct-locbuf.h
+++ b/liboctave/util/oct-locbuf.h
@@ -23,192 +23,195 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_oct_locbuf_h)
 #define octave_oct_locbuf_h 1
 
 #include "octave-config.h"
 
 #include <cstddef>
 #include "oct-cmplx.h"
 
-// The default local buffer simply encapsulates an *array* pointer
-// that gets deleted automatically.  For common POD types, we provide
-// specializations.
-
-template <typename T>
-class octave_local_buffer
+namespace octave
 {
-public:
-  octave_local_buffer (size_t size)
-    : data (0)
+  // The default local buffer simply encapsulates an *array* pointer
+  // that gets deleted automatically.  For common POD types, we provide
+  // specializations.
+
+  template <typename T>
+  class local_buffer
   {
-    if (size)
-      data = new T [size];
-  }
+  public:
+    local_buffer (size_t size)
+      : data (0)
+    {
+      if (size)
+        data = new T [size];
+    }
 
-  // No copying!
+    // No copying!
 
-  octave_local_buffer (const octave_local_buffer&) = delete;
-
-  octave_local_buffer& operator = (const octave_local_buffer&) = delete;
+    local_buffer (const local_buffer&) = delete;
 
-  ~octave_local_buffer (void) { delete [] data; }
+    local_buffer& operator = (const local_buffer&) = delete;
 
-  operator T *() const { return data; }
+    ~local_buffer (void) { delete [] data; }
 
-private:
+    operator T *() const { return data; }
 
-  T *data;
-};
+  private:
+
+    T *data;
+  };
 
-// For buffers of POD types, we'll be smarter.  There is one thing
-// that differentiates a local buffer from a dynamic array - the local
-// buffers, if not manipulated improperly, have a FIFO semantics,
-// meaning that if buffer B is allocated after buffer A, B *must* be
-// deallocated before A.  This is *guaranteed* if you use local buffer
-// exclusively through the OCTAVE_LOCAL_BUFFER macro, because the C++
-// standard requires that explicit local objects be destroyed in
-// reverse order of declaration.  Therefore, we can avoid memory
-// fragmentation by allocating fairly large chunks of memory and
-// serving local buffers from them in a stack-like manner.  The first
-// returning buffer in previous chunk will be responsible for
-// deallocating the chunk.
+  // For buffers of POD types, we'll be smarter.  There is one thing
+  // that differentiates a local buffer from a dynamic array - the local
+  // buffers, if not manipulated improperly, have a FIFO semantics,
+  // meaning that if buffer B is allocated after buffer A, B *must* be
+  // deallocated before A.  This is *guaranteed* if you use local buffer
+  // exclusively through the OCTAVE_LOCAL_BUFFER macro, because the C++
+  // standard requires that explicit local objects be destroyed in
+  // reverse order of declaration.  Therefore, we can avoid memory
+  // fragmentation by allocating fairly large chunks of memory and
+  // serving local buffers from them in a stack-like manner.  The first
+  // returning buffer in previous chunk will be responsible for
+  // deallocating the chunk.
 
-class octave_chunk_buffer
-{
-public:
+  class chunk_buffer
+  {
+  public:
 
-  OCTAVE_API octave_chunk_buffer (size_t size);
+    OCTAVE_API chunk_buffer (size_t size);
 
-  // No copying!
+    // No copying!
 
-  octave_chunk_buffer (const octave_chunk_buffer&) = delete;
+    chunk_buffer (const chunk_buffer&) = delete;
 
-  octave_chunk_buffer& operator = (const octave_chunk_buffer&) = delete;
+    chunk_buffer& operator = (const chunk_buffer&) = delete;
 
-  OCTAVE_API virtual ~octave_chunk_buffer (void);
+    OCTAVE_API virtual ~chunk_buffer (void);
 
-  char *data (void) const { return dat; }
+    char *data (void) const { return dat; }
 
-  static OCTAVE_API void clear (void);
+    static OCTAVE_API void clear (void);
 
-private:
+  private:
 
-  // The number of bytes we allocate for each large chunk of memory we
-  // manage.
-  static const size_t chunk_size;
+    // The number of bytes we allocate for each large chunk of memory we
+    // manage.
+    static const size_t chunk_size;
 
-  // Pointer to the end end of the last allocation.
-  static char *top;
+    // Pointer to the end end of the last allocation.
+    static char *top;
 
-  // Pointer to the current active chunk.
-  static char *chunk;
+    // Pointer to the current active chunk.
+    static char *chunk;
 
-  // The number of bytes remaining in the active chunk.
-  static size_t left;
+    // The number of bytes remaining in the active chunk.
+    static size_t left;
 
-  // The number of active allocations.
-  static size_t active;
+    // The number of active allocations.
+    static size_t active;
 
-  // Pointer to the current chunk.
-  char *cnk;
+    // Pointer to the current chunk.
+    char *cnk;
 
-  // Pointer to the beginning of the most recent allocation.
-  char *dat;
-};
+    // Pointer to the beginning of the most recent allocation.
+    char *dat;
+  };
 
-// This specializes octave_local_buffer to use the chunked buffer
-// mechanism for POD types.
+  // This specializes local_buffer to use the chunked buffer
+  // mechanism for POD types.
 #define SPECIALIZE_POD_BUFFER(TYPE)                             \
   template <>                                                   \
-  class octave_local_buffer<TYPE> : private octave_chunk_buffer \
+  class local_buffer<TYPE> : private chunk_buffer \
   {                                                             \
   public:                                                       \
-    octave_local_buffer (size_t size)                           \
-      : octave_chunk_buffer (size * sizeof (TYPE)) { }          \
+    local_buffer (size_t size)                           \
+      : chunk_buffer (size * sizeof (TYPE)) { }          \
                                                                 \
     operator TYPE *() const                                     \
     {                                                           \
       return reinterpret_cast<TYPE *> (this->data ());          \
     }                                                           \
   }
 
-SPECIALIZE_POD_BUFFER (bool);
-SPECIALIZE_POD_BUFFER (char);
-SPECIALIZE_POD_BUFFER (unsigned short);
-SPECIALIZE_POD_BUFFER (short);
-SPECIALIZE_POD_BUFFER (int);
-SPECIALIZE_POD_BUFFER (unsigned int);
-SPECIALIZE_POD_BUFFER (long);
-SPECIALIZE_POD_BUFFER (unsigned long);
-SPECIALIZE_POD_BUFFER (float);
-SPECIALIZE_POD_BUFFER (double);
-// FIXME: Are these guaranteed to be POD and satisfy alignment?
-SPECIALIZE_POD_BUFFER (Complex);
-SPECIALIZE_POD_BUFFER (FloatComplex);
-// MORE ?
+  SPECIALIZE_POD_BUFFER (bool);
+  SPECIALIZE_POD_BUFFER (char);
+  SPECIALIZE_POD_BUFFER (unsigned short);
+  SPECIALIZE_POD_BUFFER (short);
+  SPECIALIZE_POD_BUFFER (int);
+  SPECIALIZE_POD_BUFFER (unsigned int);
+  SPECIALIZE_POD_BUFFER (long);
+  SPECIALIZE_POD_BUFFER (unsigned long);
+  SPECIALIZE_POD_BUFFER (float);
+  SPECIALIZE_POD_BUFFER (double);
+  // FIXME: Are these guaranteed to be POD and satisfy alignment?
+  SPECIALIZE_POD_BUFFER (Complex);
+  SPECIALIZE_POD_BUFFER (FloatComplex);
+  // MORE ?
 
-// All pointers and const pointers are also POD types.
-template <typename T>
-class octave_local_buffer<T *> : private octave_chunk_buffer
-{
-public:
-  octave_local_buffer (size_t size)
-    : octave_chunk_buffer (size * sizeof (T *))
-  { }
+  // All pointers and const pointers are also POD types.
+  template <typename T>
+  class local_buffer<T *> : private chunk_buffer
+  {
+  public:
+    local_buffer (size_t size)
+      : chunk_buffer (size * sizeof (T *))
+    { }
 
-  operator T **() const { return reinterpret_cast<T **> (this->data ()); }
-};
+    operator T **() const { return reinterpret_cast<T **> (this->data ()); }
+  };
 
-template <typename T>
-class octave_local_buffer<const T *> : private octave_chunk_buffer
-{
-public:
-  octave_local_buffer (size_t size)
-    : octave_chunk_buffer (size * sizeof (const T *))
-  { }
+  template <typename T>
+  class local_buffer<const T *> : private chunk_buffer
+  {
+  public:
+    local_buffer (size_t size)
+      : chunk_buffer (size * sizeof (const T *))
+    { }
 
-  operator const T **() const
-  {
-    return reinterpret_cast<const T **> (this->data ());
-  }
-};
+    operator const T **() const
+    {
+      return reinterpret_cast<const T **> (this->data ());
+    }
+  };
+}
 
 // If the compiler supports dynamic stack arrays, we can use the
 // attached hack to place small buffer arrays on the stack.  It may be
 // even faster than our obstack-like optimization, but is dangerous
 // because stack is a very limited resource, so we disable it.
 
 #if 0 // defined (HAVE_DYNAMIC_AUTO_ARRAYS)
 
 // Maximum buffer size (in bytes) to be placed on the stack.
 
 #define OCTAVE_LOCAL_BUFFER_MAX_STACK_SIZE 8192
 
 // If we have automatic arrays, we use an automatic array if the size
 // is small enough.  To avoid possibly evaluating 'size' multiple
 // times, we first cache it.  Note that we always construct both the
-// stack array and the octave_local_buffer object, but only one of
+// stack array and the octave::local_buffer object, but only one of
 // them will be nonempty.
 
 #define OCTAVE_LOCAL_BUFFER(T, buf, size)                               \
   const size_t _bufsize_ ## buf = size;                                 \
   const bool _lbufaut_ ## buf = _bufsize_ ## buf * sizeof (T)           \
     <= OCTAVE_LOCAL_BUFFER_MAX_STACK_SIZE;                              \
   T _bufaut_ ## buf [_lbufaut_ ## buf ? _bufsize_ ## buf : 0];          \
-  octave_local_buffer<T> _bufheap_ ## buf (! _lbufaut_ ## buf ? _bufsize_ ## buf : 0); \
+  octave::local_buffer<T> _bufheap_ ## buf (! _lbufaut_ ## buf ? _bufsize_ ## buf : 0); \
   T *buf = (_lbufaut_ ## buf                                            \
             ? _bufaut_ ## buf : static_cast<T *> (_bufheap_ ## buf))
 
 #else
 
 // If we don't have automatic arrays, we simply always use
-// octave_local_buffer.
+// octave::local_buffer.
 
 #define OCTAVE_LOCAL_BUFFER(T, buf, size)               \
-  octave_local_buffer<T> _buffer_ ## buf (size);        \
+  octave::local_buffer<T> _buffer_ ## buf (size);       \
   T *buf = _buffer_ ## buf
 
 #endif
 
 // Note: we use weird variables in the for loop to avoid warnings
 // about shadowed parameters.
 
 #define OCTAVE_LOCAL_BUFFER_INIT(T, buf, size, value)   \
