# HG changeset patch
# User jwe
# Date 1141747072 0
#      Tue Mar 07 15:57:52 2006 +0000
# Node ID 9e3a2d1e5e725d2cd58604bc22cc7c4f9ac0a6d1
# Parent  2b20d1707f292249b9c37b2df0eb1df962f9f879
[project @ 2006-03-07 15:57:52 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,15 @@
+2006-03-07  David Bateman  <dbateman@free.fr>
+
+	* liboctave/dae.texi, liboctave/factor.texi, liboctave/nleqn.texi,
+	liboctave/quad.texi, liboctave/matvec.texi, liboctave/nlfunc.texi,
+	liboctave/diffeq.texi, liboctave/array.texi, liboctave/range.texi,
+	liboctave/optim.texi: Fix some syntax problems for texinfo.tex 4.8.
+
 2006-03-06  Keith Goodman  <kwgoodman@gmail.com>
 
 	* interpreter/octave.texi (@seealso): Display args instead of
 	discarding them.
 
 2006-03-02  John W. Eaton  <jwe@octave.org>
 
 	* faq/Makefile.in (Octave-FAQ.ps): Depend on Octave-FAQ.dvi, not
diff --git a/doc/liboctave/array.texi b/doc/liboctave/array.texi
--- a/doc/liboctave/array.texi
+++ b/doc/liboctave/array.texi
@@ -154,17 +154,17 @@ the current size, the length is updated 
 @deftypefnx Constructor {} DiagArray<T> (int @var{n})
 @deftypefnx Constructor {} DiagArray<T> (int @var{n}, const T &@var{val})
 @deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c})
 @deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c}, const T &@var{val})
 @deftypefnx Constructor {} DiagArray<T> (const Array<T> &@var{a})
 @deftypefnx Constructor {} DiagArray<T> (const DiagArray<T> &@var{a})
 @end deftypefn
 
-@deftypeop {Assginment} DiagArray<T>& {operator =} (const DiagArray<T> &@var{a})
+@deftypeop Assginment DiagArray<T>& {} {operator =} (const DiagArray<T> &@var{a})
 @end deftypeop
 
 @deftypemethod DiagArray<T> int dim1 (void) const
 @deftypemethodx DiagArray<T> int rows (void) const
 @end deftypemethod
 
 @deftypemethod DiagArray<T> int dim2 (void) const
 @deftypemethodx DiagArray<T> int cols (void) const
diff --git a/doc/liboctave/dae.texi b/doc/liboctave/dae.texi
--- a/doc/liboctave/dae.texi
+++ b/doc/liboctave/dae.texi
@@ -1,16 +1,16 @@
 @node Differential Algebraic Equations, Error Handling, Ordinary Differential Equations, Top
 @chapter Differential Algebraic Equations
 @cindex DAE
 
-@deftypefn  {} {}DAE (void)
-@deftypefnx  {} {}DAE (int @var{n})
-@deftypefnx  {} {}DAE (const ColumnVector &@var{x}, double @var{time}, DAEFunc &@var{f})
-@deftypefnx  {} {}DAE (const ColumnVector &@var{x}, ColumnVector &@var{xdot}, double @var{time}, DAEFunc &@var{f})
+@deftypefn  {} {} DAE (void)
+@deftypefnx  {} {} DAE (int @var{n})
+@deftypefnx  {} {} DAE (const ColumnVector &@var{x}, double @var{time}, DAEFunc &@var{f})
+@deftypefnx  {} {} DAE (const ColumnVector &@var{x}, ColumnVector &@var{xdot}, double @var{time}, DAEFunc &@var{f})
 @end deftypefn
 
 @deftypefn {} ColumnVector deriv (void)
 @end deftypefn
 
 @deftypefn {} {virtual void} initialize (const ColumnVector &@var{x}, double @var{t})
 @deftypefnx {} {virtual void} initialize (const ColumnVector &@var{x}, ColumnVector &@var{xdot}, double @var{t})
 @end deftypefn
diff --git a/doc/liboctave/diffeq.texi b/doc/liboctave/diffeq.texi
--- a/doc/liboctave/diffeq.texi
+++ b/doc/liboctave/diffeq.texi
@@ -1,14 +1,14 @@
 @node Ordinary Differential Equations, Differential Algebraic Equations, Quadrature, Top
 @chapter Ordinary Differential Equations
 @cindex ODE
 
-@deftypefn  {} {}ODE_options (void)
-@deftypefnx  {} {}ODE_options (const ODE_options &@var{opt})
+@deftypefn  {} {} ODE_options (void)
+@deftypefnx  {} {} ODE_options (const ODE_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} ODE_options& {operator =} (const ODE_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} void init (void)
 @end deftypefn
 
@@ -35,19 +35,19 @@
 
 @deftypefn {} double absolute_tolerance (void)
 @deftypefnx {} double initial_step_size (void)
 @deftypefnx {} double maximum_step_size (void)
 @deftypefnx {} double minimum_step_size (void)
 @deftypefnx {} double relative_tolerance (void)
 @end deftypefn
 
-@deftypefn  {} {}ODE (void)
-@deftypefnx  {} {}ODE (int @var{n})
-@deftypefnx  {} {}ODE (const ColumnVector &@var{state}, double @var{time}, const ODEFunc &@var{f})
+@deftypefn  {} {} ODE (void)
+@deftypefnx  {} {} ODE (int @var{n})
+@deftypefnx  {} {} ODE (const ColumnVector &@var{state}, double @var{time}, const ODEFunc &@var{f})
 @end deftypefn
 
 @deftypefn {} {virtual int} size (void) const
 @end deftypefn
 
 @deftypefn {} {virtual ColumnVector} state (void) const
 @end deftypefn
 
diff --git a/doc/liboctave/factor.texi b/doc/liboctave/factor.texi
--- a/doc/liboctave/factor.texi
+++ b/doc/liboctave/factor.texi
@@ -1,45 +1,45 @@
 @node Matrix Factorizations, Ranges, Matrix and Vector Operations, Top
 @chapter Matrix Factorizations
 @cindex matrix factorizations
 @cindex factorizations
 
-@deftypefn  {} {}AEPBALANCE (void)
-@deftypefnx  {} {}AEPBALANCE (const Matrix &@var{a}, const char *@var{balance_job})
-@deftypefnx  {} {}AEPBALANCE (const AEPBALANCE &@var{a})
+@deftypefn  {} {} AEPBALANCE (void)
+@deftypefnx  {} {} AEPBALANCE (const Matrix &@var{a}, const char *@var{balance_job})
+@deftypefnx  {} {} AEPBALANCE (const AEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} AEPBALANCE& {operator =} (const AEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix balanced_matrix (void) const
 @deftypefnx {} Matrix balancing_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const AEPBALANCE &@var{a})
 @end deftypefn
 
-@deftypefn {} ComplexAEPBALANCE (void)
-@deftypefnx {} ComplexAEPBALANCE (const ComplexMatrix &@var{a}, const char *@var{balance_job})
-@deftypefnx {} ComplexAEPBALANCE (const ComplexAEPBALANCE &@var{a})
+@deftypefn {} {} ComplexAEPBALANCE (void)
+@deftypefnx {} {} ComplexAEPBALANCE (const ComplexMatrix &@var{a}, const char *@var{balance_job})
+@deftypefnx {} {} ComplexAEPBALANCE (const ComplexAEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexAEPBALANCE& {operator =} (const ComplexAEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix balanced_matrix (void) const
 @deftypefnx {} ComplexMatrix balancing_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexAEPBALANCE &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}DET (void)
-@deftypefnx  {} {}DET (const DET &@var{a})
+@deftypefn  {} {} DET (void)
+@deftypefnx  {} {} DET (const DET &@var{a})
 @end deftypefn
 
 @deftypefn {} DET& {operator =} (const DET &@var{a})
 @end deftypefn
 
 @deftypefn {} int value_will_overflow (void) const
 @deftypefnx {} int value_will_underflow (void) const
 @end deftypefn
@@ -47,18 +47,18 @@
 @deftypefn {} double coefficient (void) const
 @deftypefnx {} int exponent (void) const
 @deftypefnx {} double value (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const DET &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexDET (void)
-@deftypefnx  {} {}ComplexDET (const ComplexDET &@var{a})
+@deftypefn  {} {} ComplexDET (void)
+@deftypefnx  {} {} ComplexDET (const ComplexDET &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexDET& {operator =} (const ComplexDET &@var{a})
 @end deftypefn
 
 @deftypefn {} int value_will_overflow (void) const
 @deftypefnx {} int value_will_underflow (void) const
 @end deftypefn
@@ -66,231 +66,231 @@
 @deftypefn {} Complex coefficient (void) const
 @deftypefnx {} int exponent (void) const
 @deftypefnx {} Complex value (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexDET &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}GEPBALANCE (void)
-@deftypefnx  {} {}GEPBALANCE (const Matrix &@var{a}, const Matrix &, const char *@var{balance_job})
-@deftypefnx  {} {}GEPBALANCE (const GEPBALANCE &@var{a})
+@deftypefn  {} {} GEPBALANCE (void)
+@deftypefnx  {} {} GEPBALANCE (const Matrix &@var{a}, const Matrix &, const char *@var{balance_job})
+@deftypefnx  {} {} GEPBALANCE (const GEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} GEPBALANCE& {operator =} (const GEPBALANCE &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix balanced_a_matrix (void) const
 @deftypefnx {} Matrix balanced_b_matrix (void) const
 @deftypefnx {} Matrix left_balancing_matrix (void) const
 @deftypefnx {} Matrix right_balancing_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const GEPBALANCE &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}CHOL (void)
-@deftypefnx  {} {}CHOL (const Matrix &@var{a})
-@deftypefnx  {} {}CHOL (const Matrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}CHOL (const CHOL &@var{a})
+@deftypefn  {} {} CHOL (void)
+@deftypefnx  {} {} CHOL (const Matrix &@var{a})
+@deftypefnx  {} {} CHOL (const Matrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} CHOL (const CHOL &@var{a})
 @end deftypefn
 
 @deftypefn {} CHOL& {operator =} (const CHOL &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix chol_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const CHOL &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexCHOL (void)
-@deftypefnx  {} {}ComplexCHOL (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}ComplexCHOL (const ComplexMatrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}ComplexCHOL (const ComplexCHOL &@var{a})
+@deftypefn  {} {} ComplexCHOL (void)
+@deftypefnx  {} {} ComplexCHOL (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} ComplexCHOL (const ComplexMatrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} ComplexCHOL (const ComplexCHOL &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexCHOL& {operator =} (const ComplexCHOL &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix chol_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexCHOL &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}HESS (void)
-@deftypefnx  {} {}HESS (const Matrix &@var{a})
-@deftypefnx  {} {}HESS (const Matrix&a, int &@var{info})
-@deftypefnx  {} {}HESS (const HESS &@var{a})
+@deftypefn  {} {} HESS (void)
+@deftypefnx  {} {} HESS (const Matrix &@var{a})
+@deftypefnx  {} {} HESS (const Matrix&a, int &@var{info})
+@deftypefnx  {} {} HESS (const HESS &@var{a})
 @end deftypefn
 
 @deftypefn {} HESS& {operator =} (const HESS &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix hess_matrix (void) const
 @deftypefnx {} Matrix unitary_hess_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const HESS &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexHESS (void)
-@deftypefnx  {} {}ComplexHESS (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}ComplexHESS (const ComplexMatrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}ComplexHESS (const ComplexHESS &@var{a})
+@deftypefn  {} {} ComplexHESS (void)
+@deftypefnx  {} {} ComplexHESS (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} ComplexHESS (const ComplexMatrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} ComplexHESS (const ComplexHESS &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexHESS& {operator =} (const ComplexHESS &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix hess_matrix (void) const
 @deftypefnx {} ComplexMatrix unitary_hess_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexHESS &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}SCHUR (void)
-@deftypefnx  {} {}SCHUR (const Matrix &@var{a}, const char *@var{ord})
-@deftypefnx  {} {}SCHUR (const Matrix &@var{a}, const char *@var{ord}, int &@var{info})
-@deftypefnx  {} {}SCHUR (const SCHUR &@var{a}, const char *@var{ord})
+@deftypefn  {} {} SCHUR (void)
+@deftypefnx  {} {} SCHUR (const Matrix &@var{a}, const char *@var{ord})
+@deftypefnx  {} {} SCHUR (const Matrix &@var{a}, const char *@var{ord}, int &@var{info})
+@deftypefnx  {} {} SCHUR (const SCHUR &@var{a}, const char *@var{ord})
 @end deftypefn
 
 @deftypefn {} SCHUR& {operator =} (const SCHUR &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix schur_matrix (void) const
 @deftypefnx {} Matrix unitary_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const SCHUR &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexSCHUR (void)
-@deftypefnx  {} {}ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord})
-@deftypefnx  {} {}ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord}, int &@var{info})
-@deftypefnx  {} {}ComplexSCHUR (const ComplexSCHUR &@var{a}, const char *@var{ord})
+@deftypefn  {} {} ComplexSCHUR (void)
+@deftypefnx  {} {} ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord})
+@deftypefnx  {} {} ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord}, int &@var{info})
+@deftypefnx  {} {} ComplexSCHUR (const ComplexSCHUR &@var{a}, const char *@var{ord})
 @end deftypefn
 
 @deftypefn {} ComplexSCHUR& {operator =} (const ComplexSCHUR &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix schur_matrix (void) const
 @deftypefnx {} ComplexMatrix unitary_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexSCHUR &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}SVD (void)
-@deftypefnx  {} {}SVD (const Matrix &@var{a})
-@deftypefnx  {} {}SVD (const Matrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}SVD (const SVD &@var{a})
+@deftypefn  {} {} SVD (void)
+@deftypefnx  {} {} SVD (const Matrix &@var{a})
+@deftypefnx  {} {} SVD (const Matrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} SVD (const SVD &@var{a})
 @end deftypefn
 
 @deftypefn {} SVD& {operator =} (const SVD &@var{a})
 @end deftypefn
 
 @deftypefn {} DiagMatrix singular_values (void) const
 @deftypefnx {} Matrix left_singular_matrix (void) const
 @deftypefnx {} Matrix right_singular_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const SVD &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexSVD (void)
-@deftypefnx  {} {}ComplexSVD (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}ComplexSVD (const ComplexMatrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}ComplexSVD (const ComplexSVD &@var{a})
+@deftypefn  {} {} ComplexSVD (void)
+@deftypefnx  {} {} ComplexSVD (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} ComplexSVD (const ComplexMatrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} ComplexSVD (const ComplexSVD &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexSVD& {operator =} (const ComplexSVD &@var{a})
 @end deftypefn
 
 @deftypefn {} DiagMatrix singular_values (void) const
 @deftypefnx {} ComplexMatrix left_singular_matrix (void) const
 @deftypefnx {} ComplexMatrix right_singular_matrix (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexSVD &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}EIG (void)
-@deftypefnx  {} {}EIG (const Matrix &@var{a})
-@deftypefnx  {} {}EIG (const Matrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}EIG (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}EIG (const ComplexMatrix &@var{a}, int &@var{info})
-@deftypefnx  {} {}EIG (const EIG &@var{a})
+@deftypefn  {} {} EIG (void)
+@deftypefnx  {} {} EIG (const Matrix &@var{a})
+@deftypefnx  {} {} EIG (const Matrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} EIG (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} EIG (const ComplexMatrix &@var{a}, int &@var{info})
+@deftypefnx  {} {} EIG (const EIG &@var{a})
 @end deftypefn
 
 @deftypefn {} EIG& {operator =} (const EIG &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexColumnVector eigenvalues (void) const
 @end deftypefn
 
 @deftypefn {} ComplexMatrix eigenvectors (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const EIG &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}LU (void)
-@deftypefnx  {} {}LU (const Matrix &@var{a})
-@deftypefnx  {} {}LU (const LU &@var{a})
+@deftypefn  {} {} LU (void)
+@deftypefnx  {} {} LU (const Matrix &@var{a})
+@deftypefnx  {} {} LU (const LU &@var{a})
 @end deftypefn
 
 @deftypefn {} LU& {operator =} (const LU &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix L (void) const
 @deftypefnx {} Matrix U (void) const
 @deftypefnx {} Matrix P (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const LU &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexLU (void)
-@deftypefnx  {} {}ComplexLU (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}ComplexLU (const ComplexLU &@var{a})
+@deftypefn  {} {} ComplexLU (void)
+@deftypefnx  {} {} ComplexLU (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} ComplexLU (const ComplexLU &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexLU& {operator =} (const ComplexLU &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix L (void) const
 @deftypefnx {} ComplexMatrix U (void) const
 @deftypefnx {} Matrix P (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexLU &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}QR (void)
-@deftypefnx  {} {}QR (const Matrix &@var{A})
-@deftypefnx  {} {}QR (const QR &@var{a})
+@deftypefn  {} {} QR (void)
+@deftypefnx  {} {} QR (const Matrix &@var{A})
+@deftypefnx  {} {} QR (const QR &@var{a})
 @end deftypefn
 
 @deftypefn {} QR& {operator =} (const QR &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix Q (void) const
 @deftypefnx {} Matrix R (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const QR &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexQR (void)
-@deftypefnx  {} {}ComplexQR (const ComplexMatrix &@var{A})
-@deftypefnx  {} {}ComplexQR (const ComplexQR &@var{a})
+@deftypefn  {} {} ComplexQR (void)
+@deftypefnx  {} {} ComplexQR (const ComplexMatrix &@var{A})
+@deftypefnx  {} {} ComplexQR (const ComplexQR &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexQR& {operator =} (const ComplexQR &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix Q (void) const
 @deftypefnx {} ComplexMatrix R (void) const
 @end deftypefn
diff --git a/doc/liboctave/liboctave.texi b/doc/liboctave/liboctave.texi
--- a/doc/liboctave/liboctave.texi
+++ b/doc/liboctave/liboctave.texi
@@ -26,17 +26,17 @@
 @end iftex
 
 @defindex op
 
 @c Things like the Octave version number are defined in conf.texi.
 @c This file doesn't include a chapter, so it must not be included
 @c if you want to run the Emacs function texinfo-multiple-files-update.
 
-@c @include conf.texi
+@include conf.texi
 
 @settitle Octave C++ Classes
 
 @ifnottex
 
 Copyright (C) 1996, 1997 John W. Eaton.
 
 Permission is granted to make and distribute verbatim copies of
diff --git a/doc/liboctave/matvec.texi b/doc/liboctave/matvec.texi
--- a/doc/liboctave/matvec.texi
+++ b/doc/liboctave/matvec.texi
@@ -107,23 +107,23 @@ Unary MDiagArray ops.
 
 @c ------------------------------------------------------------------------
 
 @node Matrix and Vector Operations, Matrix Factorizations, Arrays, Top
 @chapter Matrix and Vector Operations
 @cindex matrix manipulations
 @cindex vector manipulations
 
-@deftypefn  {} {}Matrix (void)
-@deftypefnx  {} {}Matrix (int @var{r}, int @var{c})
-@deftypefnx  {} {}Matrix (int @var{r}, int @var{c}, double @var{val})
-@deftypefnx  {} {}Matrix (const Array2<double> &@var{a})
-@deftypefnx  {} {}Matrix (const Matrix &@var{a})
-@deftypefnx  {} {}Matrix (const DiagArray<double> &@var{a})
-@deftypefnx  {} {}Matrix (const DiagMatrix &@var{a})
+@deftypefn  {} {} Matrix (void)
+@deftypefnx  {} {} Matrix (int @var{r}, int @var{c})
+@deftypefnx  {} {} Matrix (int @var{r}, int @var{c}, double @var{val})
+@deftypefnx  {} {} Matrix (const Array2<double> &@var{a})
+@deftypefnx  {} {} Matrix (const Matrix &@var{a})
+@deftypefnx  {} {} Matrix (const DiagArray<double> &@var{a})
+@deftypefnx  {} {} Matrix (const DiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} Matrix& {operator =} (const Matrix &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const Matrix &@var{a}) const
 @deftypefnx {} int {operator !=} (const Matrix &@var{a}) const
 @end deftypefn
@@ -301,21 +301,21 @@ Unary MDiagArray ops.
 @deftypefn {} RowVector column_max (void) const
 @deftypefnx {} RowVector column_max_loc (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const Matrix &@var{a})
 @deftypefnx {} {istream&} {operator >>} (istream &@var{is}, Matrix &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ColumnVector (void)
-@deftypefnx  {} {}ColumnVector (int @var{n})
-@deftypefnx  {} {}ColumnVector (int @var{n}, double @var{val})
-@deftypefnx  {} {}ColumnVector (const Array<double> &@var{a})
-@deftypefnx  {} {}ColumnVector (const ColumnVector &@var{a})
+@deftypefn  {} {} ColumnVector (void)
+@deftypefnx  {} {} ColumnVector (int @var{n})
+@deftypefnx  {} {} ColumnVector (int @var{n}, double @var{val})
+@deftypefnx  {} {} ColumnVector (const Array<double> &@var{a})
+@deftypefnx  {} {} ColumnVector (const ColumnVector &@var{a})
 @end deftypefn
 
 @deftypefn {} ColumnVector& {operator =} (const ColumnVector &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const ColumnVector &@var{a}) const
 @deftypefnx {} int {operator !=} (const ColumnVector &@var{a}) const
 @end deftypefn
@@ -376,21 +376,21 @@ Unary MDiagArray ops.
 
 @deftypefn {} double min (void) const
 @deftypefnx {} double max (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ColumnVector &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}RowVector (void)
-@deftypefnx  {} {}RowVector (int @var{n})
-@deftypefnx  {} {}RowVector (int @var{n}, double @var{val})
-@deftypefnx  {} {}RowVector (const Array<double> &@var{a})
-@deftypefnx  {} {}RowVector (const RowVector &@var{a})
+@deftypefn  {} {} RowVector (void)
+@deftypefnx  {} {} RowVector (int @var{n})
+@deftypefnx  {} {} RowVector (int @var{n}, double @var{val})
+@deftypefnx  {} {} RowVector (const Array<double> &@var{a})
+@deftypefnx  {} {} RowVector (const RowVector &@var{a})
 @end deftypefn
 
 @deftypefn {} RowVector& {operator =} (const RowVector &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const RowVector &@var{a}) const
 @deftypefnx {} int {operator !=} (const RowVector &@var{a}) const
 @end deftypefn
@@ -453,25 +453,25 @@ Unary MDiagArray ops.
 
 @deftypefn {} double min (void) const
 @deftypefnx {} double max (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const RowVector &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}DiagMatrix (void)
-@deftypefnx  {} {}DiagMatrix (int @var{n})
-@deftypefnx  {} {}DiagMatrix (int @var{n}, double @var{val})
-@deftypefnx  {} {}DiagMatrix (int @var{r}, int @var{c})
-@deftypefnx  {} {}DiagMatrix (int @var{r}, int @var{c}, double @var{val})
-@deftypefnx  {} {}DiagMatrix (const RowVector &@var{a})
-@deftypefnx  {} {}DiagMatrix (const ColumnVector &@var{a})
-@deftypefnx  {} {}DiagMatrix (const DiagArray<double> &@var{a})
-@deftypefnx  {} {}DiagMatrix (const DiagMatrix &@var{a})
+@deftypefn  {} {} DiagMatrix (void)
+@deftypefnx  {} {} DiagMatrix (int @var{n})
+@deftypefnx  {} {} DiagMatrix (int @var{n}, double @var{val})
+@deftypefnx  {} {} DiagMatrix (int @var{r}, int @var{c})
+@deftypefnx  {} {} DiagMatrix (int @var{r}, int @var{c}, double @var{val})
+@deftypefnx  {} {} DiagMatrix (const RowVector &@var{a})
+@deftypefnx  {} {} DiagMatrix (const ColumnVector &@var{a})
+@deftypefnx  {} {} DiagMatrix (const DiagArray<double> &@var{a})
+@deftypefnx  {} {} DiagMatrix (const DiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} DiagMatrix& {operator =} (const DiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const DiagMatrix &@var{a}) const
 @deftypefnx {} int {operator !=} (const DiagMatrix &@var{a}) const
 @end deftypefn
@@ -554,25 +554,25 @@ Unary MDiagArray ops.
 
 @deftypefn {} ColumnVector diag (void) const
 @deftypefnx {} ColumnVector diag (int @var{k}) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const DiagMatrix &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexMatrix (void)
-@deftypefnx  {} {}ComplexMatrix (int @var{r}, int @var{c})
-@deftypefnx  {} {}ComplexMatrix (int @var{r}, int @var{c}, const Complex &@var{val})
-@deftypefnx  {} {}ComplexMatrix (const Matrix &@var{a})
-@deftypefnx  {} {}ComplexMatrix (const Array2<Complex> &@var{a})
-@deftypefnx  {} {}ComplexMatrix (const ComplexMatrix &@var{a})
-@deftypefnx  {} {}ComplexMatrix (const DiagMatrix &@var{a})
-@deftypefnx  {} {}ComplexMatrix (const DiagArray<Complex> &@var{a})
-@deftypefnx  {} {}ComplexMatrix (const ComplexDiagMatrix &@var{a})
+@deftypefn  {} {} ComplexMatrix (void)
+@deftypefnx  {} {} ComplexMatrix (int @var{r}, int @var{c})
+@deftypefnx  {} {} ComplexMatrix (int @var{r}, int @var{c}, const Complex &@var{val})
+@deftypefnx  {} {} ComplexMatrix (const Matrix &@var{a})
+@deftypefnx  {} {} ComplexMatrix (const Array2<Complex> &@var{a})
+@deftypefnx  {} {} ComplexMatrix (const ComplexMatrix &@var{a})
+@deftypefnx  {} {} ComplexMatrix (const DiagMatrix &@var{a})
+@deftypefnx  {} {} ComplexMatrix (const DiagArray<Complex> &@var{a})
+@deftypefnx  {} {} ComplexMatrix (const ComplexDiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexMatrix& {operator =} (const ComplexMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const ComplexMatrix &@var{a}) const
 @deftypefnx {} int {operator !=} (const ComplexMatrix &@var{a}) const
 @end deftypefn
@@ -771,22 +771,22 @@ Unary MDiagArray ops.
 @deftypefn {} ComplexRowVector column_max (void) const
 @deftypefnx {} ComplexRowVector column_max_loc (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexMatrix &@var{a})
 @deftypefnx {} {istream&} {operator >>} (istream &@var{is}, ComplexMatrix &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexColumnVector (void)
-@deftypefnx  {} {}ComplexColumnVector (int @var{n})
-@deftypefnx  {} {}ComplexColumnVector (int @var{n}, const Complex &@var{val})
-@deftypefnx  {} {}ComplexColumnVector (const ColumnVector &@var{a})
-@deftypefnx  {} {}ComplexColumnVector (const Array<Complex> &@var{a})
-@deftypefnx  {} {}ComplexColumnVector (const ComplexColumnVector &@var{a})
+@deftypefn  {} {} ComplexColumnVector (void)
+@deftypefnx  {} {} ComplexColumnVector (int @var{n})
+@deftypefnx  {} {} ComplexColumnVector (int @var{n}, const Complex &@var{val})
+@deftypefnx  {} {} ComplexColumnVector (const ColumnVector &@var{a})
+@deftypefnx  {} {} ComplexColumnVector (const Array<Complex> &@var{a})
+@deftypefnx  {} {} ComplexColumnVector (const ComplexColumnVector &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexColumnVector& {operator =} (const ComplexColumnVector &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const ComplexColumnVector &@var{a}) const
 @deftypefnx {} int {operator !=} (const ComplexColumnVector &@var{a}) const
 @end deftypefn
@@ -854,22 +854,22 @@ Unary MDiagArray ops.
 
 @deftypefn {} Complex min (void) const
 @deftypefnx {} Complex max (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexColumnVector &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexRowVector (void)
-@deftypefnx  {} {}ComplexRowVector (int @var{n})
-@deftypefnx  {} {}ComplexRowVector (int @var{n}, const Complex &@var{val})
-@deftypefnx  {} {}ComplexRowVector (const RowVector &@var{a})
-@deftypefnx  {} {}ComplexRowVector (const Array<Complex> &@var{a})
-@deftypefnx  {} {}ComplexRowVector (const ComplexRowVector &@var{a})
+@deftypefn  {} {} ComplexRowVector (void)
+@deftypefnx  {} {} ComplexRowVector (int @var{n})
+@deftypefnx  {} {} ComplexRowVector (int @var{n}, const Complex &@var{val})
+@deftypefnx  {} {} ComplexRowVector (const RowVector &@var{a})
+@deftypefnx  {} {} ComplexRowVector (const Array<Complex> &@var{a})
+@deftypefnx  {} {} ComplexRowVector (const ComplexRowVector &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexRowVector& {operator =} (const ComplexRowVector &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const ComplexRowVector &@var{a}) const
 @deftypefnx {} int {operator !=} (const ComplexRowVector &@var{a}) const
 @end deftypefn
@@ -943,28 +943,28 @@ Unary MDiagArray ops.
 
 @deftypefn {} Complex min (void) const
 @deftypefnx {} Complex max (void) const
 @end deftypefn
 
 @deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexRowVector &@var{a})
 @end deftypefn
 
-@deftypefn  {} {}ComplexDiagMatrix (void)
-@deftypefnx  {} {}ComplexDiagMatrix (int @var{n})
-@deftypefnx  {} {}ComplexDiagMatrix (int @var{n}, const Complex &@var{val})
-@deftypefnx  {} {}ComplexDiagMatrix (int @var{r}, int @var{c})
-@deftypefnx  {} {}ComplexDiagMatrix (int @var{r}, int @var{c}, const Complex &@var{val})
-@deftypefnx  {} {}ComplexDiagMatrix (const RowVector &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const ComplexRowVector &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const ColumnVector &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const ComplexColumnVector &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const DiagMatrix &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const DiagArray<Complex> &@var{a})
-@deftypefnx  {} {}ComplexDiagMatrix (const ComplexDiagMatrix &@var{a})
+@deftypefn  {} {} ComplexDiagMatrix (void)
+@deftypefnx  {} {} ComplexDiagMatrix (int @var{n})
+@deftypefnx  {} {} ComplexDiagMatrix (int @var{n}, const Complex &@var{val})
+@deftypefnx  {} {} ComplexDiagMatrix (int @var{r}, int @var{c})
+@deftypefnx  {} {} ComplexDiagMatrix (int @var{r}, int @var{c}, const Complex &@var{val})
+@deftypefnx  {} {} ComplexDiagMatrix (const RowVector &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const ComplexRowVector &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const ColumnVector &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const ComplexColumnVector &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const DiagMatrix &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const DiagArray<Complex> &@var{a})
+@deftypefnx  {} {} ComplexDiagMatrix (const ComplexDiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} ComplexDiagMatrix& {operator =} (const ComplexDiagMatrix &@var{a})
 @end deftypefn
 
 @deftypefn {} int {operator ==} (const ComplexDiagMatrix &@var{a}) const
 @deftypefnx {} int {operator !=} (const ComplexDiagMatrix &@var{a}) const
 @end deftypefn
diff --git a/doc/liboctave/nleqn.texi b/doc/liboctave/nleqn.texi
--- a/doc/liboctave/nleqn.texi
+++ b/doc/liboctave/nleqn.texi
@@ -1,14 +1,14 @@
 @node Nonlinear Equations, Optimization, Nonlinear Functions, Top
 @chapter Nonlinear Equations
 @cindex nonlinear equations
 
-@deftypefn  {} {}NLEqn_options (void)
-@deftypefnx  {} {}NLEqn_options (const NLEqn_options &@var{opt})
+@deftypefn  {} {} NLEqn_options (void)
+@deftypefnx  {} {} NLEqn_options (const NLEqn_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} NLEqn_options& {operator =} (const NLEqn_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} void init (void)
 @end deftypefn
 
@@ -19,19 +19,19 @@
 @end deftypefn
 
 @deftypefn {} void set_tolerance (double @var{val})
 @end deftypefn
 
 @deftypefn {} double tolerance (void)
 @end deftypefn
 
-@deftypefn  {} {}NLEqn (void)
-@deftypefnx  {} {}NLEqn (const ColumnVector&, const @var{NLFunc})
-@deftypefnx  {} {}NLEqn (const NLEqn &@var{a})
+@deftypefn  {} {} NLEqn (void)
+@deftypefnx  {} {} NLEqn (const ColumnVector&, const @var{NLFunc})
+@deftypefnx  {} {} NLEqn (const NLEqn &@var{a})
 @end deftypefn
 
 @deftypefn {} NLEqn& {operator =} (const NLEqn &@var{a})
 @end deftypefn
 
 @deftypefn {} void resize (int @var{n})
 @end deftypefn
 
diff --git a/doc/liboctave/nlfunc.texi b/doc/liboctave/nlfunc.texi
--- a/doc/liboctave/nlfunc.texi
+++ b/doc/liboctave/nlfunc.texi
@@ -1,16 +1,16 @@
 @node Nonlinear Functions, Nonlinear Equations, Ranges, Top
 @chapter Nonlinear Functions
 @cindex nonlinear functions
 
-@deftypefn  {} {}NLFunc (void)
-@deftypefnx  {} {}NLFunc (const @var{nonlinear_fcn})
-@deftypefnx  {} {}NLFunc (const @var{nonlinear_fcn}, const @var{jacobian_fcn})
-@deftypefnx  {} {}NLFunc (const NLFunc &@var{a})
+@deftypefn  {} {} NLFunc (void)
+@deftypefnx  {} {} NLFunc (const @var{nonlinear_fcn})
+@deftypefnx  {} {} NLFunc (const @var{nonlinear_fcn}, const @var{jacobian_fcn})
+@deftypefnx  {} {} NLFunc (const NLFunc &@var{a})
 @end deftypefn
 
 @deftypefn {} NLFunc& {operator =} (const NLFunc &@var{a})
 @end deftypefn
 
 @deftypefn {} nonlinear_fcn function (void) const;
 @end deftypefn
 
diff --git a/doc/liboctave/optim.texi b/doc/liboctave/optim.texi
--- a/doc/liboctave/optim.texi
+++ b/doc/liboctave/optim.texi
@@ -10,20 +10,20 @@
 * Quadratic Programming::       
 * Nonlinear Programming::       
 @end menu
 
 @node Objective Functions, Bounds, Optimization, Optimization
 @section Objective Functions
 @cindex objective functions
 
-@deftypefn  {} {}Objective (void)
-@deftypefnx  {} {}Objective (const @var{objective_fcn})
-@deftypefnx  {} {}Objective (const @var{objective_fcn}, const @var{gradient_fcn})
-@deftypefnx  {} {}Objective (const Objective &@var{a})
+@deftypefn  {} {} Objective (void)
+@deftypefnx  {} {} Objective (const @var{objective_fcn})
+@deftypefnx  {} {} Objective (const @var{objective_fcn}, const @var{gradient_fcn})
+@deftypefnx  {} {} Objective (const Objective &@var{a})
 @end deftypefn
 
 @deftypefn {} Objective& {operator =} (const Objective &@var{a})
 @end deftypefn
 
 @deftypefn {} objective_fcn objective_function (void) const;
 @end deftypefn
 
@@ -37,20 +37,20 @@
 @end deftypefn
 
 @c ------------------------------------------------------------------------
 
 @node Bounds, Linear Constraints, Objective Functions, Optimization
 @section Bounds
 @cindex bounds
 
-@deftypefn  {} {}Bounds (void)
-@deftypefnx  {} {}Bounds (int @var{n})
-@deftypefnx  {} {}Bounds (const ColumnVector @var{lb}, const ColumnVector @var{ub})
-@deftypefnx  {} {}Bounds (const Bounds &@var{a})
+@deftypefn  {} {} Bounds (void)
+@deftypefnx  {} {} Bounds (int @var{n})
+@deftypefnx  {} {} Bounds (const ColumnVector @var{lb}, const ColumnVector @var{ub})
+@deftypefnx  {} {} Bounds (const Bounds &@var{a})
 @end deftypefn
 
 @deftypefn {} Bounds& {operator =} (const Bounds &@var{a})
 @end deftypefn
 
 @deftypefn {} Bounds& resize (int @var{n})
 @end deftypefn
 
@@ -88,22 +88,22 @@
 @end deftypefn
 
 @c ------------------------------------------------------------------------
 
 @node Linear Constraints, Nonlinear Constraints, Bounds, Optimization
 @section Linear Constraints
 @cindex linear Constraints
 
-@deftypefn  {} {}LinConst (void)
-@deftypefnx  {} {}LinConst (int @var{nclin}, int @var{nx})
-@deftypefnx  {} {}LinConst (int @var{nclin_eq}, int @var{nclin_ineq}, int @var{nx})
-@deftypefnx  {} {}LinConst (const ColumnVector &@var{lb}, const Matrix &@var{A}, const ColumnVector &@var{ub})
-@deftypefnx  {} {}LinConst (const Matrix &@var{A_eq}, const ColumnVector &@var{b_eq}, const Matrix &@var{A_ineq}, const ColumnVector &@var{b_ineq})
-@deftypefnx  {} {}LinConst (const LinConst &@var{a})
+@deftypefn  {} {} LinConst (void)
+@deftypefnx  {} {} LinConst (int @var{nclin}, int @var{nx})
+@deftypefnx  {} {} LinConst (int @var{nclin_eq}, int @var{nclin_ineq}, int @var{nx})
+@deftypefnx  {} {} LinConst (const ColumnVector &@var{lb}, const Matrix &@var{A}, const ColumnVector &@var{ub})
+@deftypefnx  {} {} LinConst (const Matrix &@var{A_eq}, const ColumnVector &@var{b_eq}, const Matrix &@var{A_ineq}, const ColumnVector &@var{b_ineq})
+@deftypefnx  {} {} LinConst (const LinConst &@var{a})
 @end deftypefn
 
 @deftypefn {} LinConst& {operator =} (const LinConst &@var{a})
 @end deftypefn
 
 @deftypefn {} LinConst& resize (int @var{nclin}, int @var{n})
 @end deftypefn
 
@@ -125,39 +125,39 @@
 @end deftypefn
 
 @c ------------------------------------------------------------------------
 
 @node Nonlinear Constraints, Quadratic Programming, Linear Constraints, Optimization
 @section Nonlinear Constraints
 @cindex nonlinear Constraints
 
-@deftypefn  {} {}NLConst (void)
-@deftypefnx  {} {}NLConst (int @var{n})
-@deftypefnx  {} {}NLConst (const ColumnVector @var{lb}, const NLFunc @var{f}, const ColumnVector @var{ub})
-@deftypefnx  {} {}NLConst (const NLConst &@var{a})
+@deftypefn  {} {} NLConst (void)
+@deftypefnx  {} {} NLConst (int @var{n})
+@deftypefnx  {} {} NLConst (const ColumnVector @var{lb}, const NLFunc @var{f}, const ColumnVector @var{ub})
+@deftypefnx  {} {} NLConst (const NLConst &@var{a})
 @end deftypefn
 
 @deftypefn {} NLConst& {operator =} (const NLConst &@var{a})
 @end deftypefn
 
 @node Quadratic Programming, Nonlinear Programming, Nonlinear Constraints, Optimization
 @section Quadratic Programming
 @cindex QP
 @cindex quadratic programming
 
-@deftypefn  {} {}QP (void)
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const Bounds &@var{b})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const LinConst &@var{lc})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const Bounds &@var{b})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const LinConst &@var{lc})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const Bounds &@var{b}, const LinConst &@var{lc})
-@deftypefnx  {} {}QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const Bounds &@var{b}, const LinConst &@var{lc})
+@deftypefn  {} {} QP (void)
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const Bounds &@var{b})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const LinConst &@var{lc})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const Bounds &@var{b})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const LinConst &@var{lc})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const Bounds &@var{b}, const LinConst &@var{lc})
+@deftypefnx  {} {} QP (const ColumnVector &@var{x}, const Matrix &@var{H}, const ColumnVector &@var{c}, const Bounds &@var{b}, const LinConst &@var{lc})
 @end deftypefn
 
 @deftypefn {} {virtual ColumnVector} minimize (void)
 @deftypefnx {} {virtual ColumnVector} minimize (double &@var{objf})
 @deftypefnx {} {virtual ColumnVector} minimize (double &@var{objf}, int &@var{inform})
 @deftypefnx {} {virtual ColumnVector} minimize (double &@var{objf}, int &@var{inform}, ColumnVector &@var{lambda}) = 0;
 @end deftypefn
 
@@ -172,25 +172,25 @@
 
 @c ------------------------------------------------------------------------
 
 @node Nonlinear Programming,  , Quadratic Programming, Optimization
 @section Nonlinear Programming
 @cindex NLP
 @cindex nonlinear programming
 
-@deftypefn  {} {}NLP (void)
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const LinConst &@var{lc})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const LinConst &@var{lc}, const NLConst &@var{nlc})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const LinConst &@var{lc})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const LinConst &@var{lc}, const NLConst &@var{nlc})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const NLConst &@var{nlc})
-@deftypefnx  {} {}NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const NLConst &@var{nlc})
+@deftypefn  {} {} NLP (void)
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const LinConst &@var{lc})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const LinConst &@var{lc}, const NLConst &@var{nlc})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const LinConst &@var{lc})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const LinConst &@var{lc}, const NLConst &@var{nlc})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const NLConst &@var{nlc})
+@deftypefnx  {} {} NLP (const ColumnVector &@var{x}, const Objective &@var{phi}, const Bounds &@var{b}, const NLConst &@var{nlc})
 @end deftypefn
 
 @deftypefn {} NLP& {operator =} (const NLP &@var{a})
 @end deftypefn
 
 @deftypefn {} int size (void) const
 @end deftypefn
 
diff --git a/doc/liboctave/quad.texi b/doc/liboctave/quad.texi
--- a/doc/liboctave/quad.texi
+++ b/doc/liboctave/quad.texi
@@ -1,26 +1,26 @@
 @node Quadrature, Ordinary Differential Equations, Optimization, Top
 @chapter Quadrature
 @cindex quadrature
 @cindex numerical integration
 @cindex integration
 
-@deftypefn  {} {}Quad (integrand_fcn @var{fcn})
-@deftypefnx  {} {}Quad (integrand_fcn @var{fcn}, double @var{abs}, double @var{rel})
+@deftypefn  {} {} Quad (integrand_fcn @var{fcn})
+@deftypefnx  {} {} Quad (integrand_fcn @var{fcn}, double @var{abs}, double @var{rel})
 @end deftypefn
 
 @deftypefn {} {virtual double} integrate (void)
 @deftypefnx {} {virtual double} integrate (int &@var{ier})
 @deftypefnx {} {virtual double} integrate (int &@var{ier}, int &@var{neval})
 @deftypefnx {} {virtual double} integrate (int &@var{ier}, int &@var{neval}, double &@var{abserr}) = 0
 @end deftypefn
 
-@deftypefn {} Quad_options (void)
-@deftypefnx {} Quad_options (const Quad_options &@var{opt})
+@deftypefn {} {} Quad_options (void)
+@deftypefnx {} {} Quad_options (const Quad_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} Quad_options& {operator =} (const Quad_options &@var{opt})
 @end deftypefn
 
 @deftypefn {} void init (void)
 @end deftypefn
 
@@ -35,46 +35,46 @@
 
 @deftypefn {} void set_relative_tolerance (double @var{val})
 @end deftypefn
 
 @deftypefn {} double absolute_tolerance (void)
 @deftypefnx {} double relative_tolerance (void)
 @end deftypefn
 
-@deftypefn  {} {}DefQuad (integrand_fcn @var{fcn})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, double @var{abs}, double @var{rel})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, const ColumnVector &@var{sing})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, const ColumnVector &@var{sing}, double @var{abs}, double @var{rel})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, const ColumnVector &@var{sing})
-@deftypefnx  {} {}DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, const ColumnVector &@var{sing}, double @var{abs}, double @var{rel})
+@deftypefn  {} {} DefQuad (integrand_fcn @var{fcn})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, double @var{abs}, double @var{rel})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, const ColumnVector &@var{sing})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, const ColumnVector &@var{sing}, double @var{abs}, double @var{rel})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, const ColumnVector &@var{sing})
+@deftypefnx  {} {} DefQuad (integrand_fcn @var{fcn}, double @var{ll}, double @var{ul}, const ColumnVector &@var{sing}, double @var{abs}, double @var{rel})
 @end deftypefn
 
-@deftypefn  {} {}IndefQuad (integrand_fcn @var{fcn})
-@deftypefnx  {} {}IndefQuad (integrand_fcn @var{fcn}, double @var{b}, IntegralType @var{t})
-@deftypefnx  {} {}IndefQuad (integrand_fcn @var{fcn}, double @var{b}, IntegralType @var{t}, double @var{abs}, double @var{rel})
-@deftypefnx  {} {}IndefQuad (integrand_fcn @var{fcn}, double @var{abs}, double @var{rel})
+@deftypefn  {} {} IndefQuad (integrand_fcn @var{fcn})
+@deftypefnx  {} {} IndefQuad (integrand_fcn @var{fcn}, double @var{b}, IntegralType @var{t})
+@deftypefnx  {} {} IndefQuad (integrand_fcn @var{fcn}, double @var{b}, IntegralType @var{t}, double @var{abs}, double @var{rel})
+@deftypefnx  {} {} IndefQuad (integrand_fcn @var{fcn}, double @var{abs}, double @var{rel})
 @end deftypefn
 
 @menu
 * Collocation Weights::         
 @end menu
 
 @node Collocation Weights,  , Quadrature, Quadrature
 @section Collocation Weights
 @cindex orthogonal collocation
 @cindex collocation weights
 
-@deftypefn  {} {}CollocWt (void)
-@deftypefnx  {} {}CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r})
-@deftypefnx  {} {}CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r}, double @var{l}, double @var{r})
-@deftypefnx  {} {}CollocWt (int @var{n}, double @var{a}, double @var{b}, int @var{inc_l}, int @var{inc_r})
-@deftypefnx  {} {}CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r}, double @var{l}, double @var{r})
-@deftypefnx  {} {}CollocWt (const CollocWt&)
+@deftypefn  {} {} CollocWt (void)
+@deftypefnx  {} {} CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r})
+@deftypefnx  {} {} CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r}, double @var{l}, double @var{r})
+@deftypefnx  {} {} CollocWt (int @var{n}, double @var{a}, double @var{b}, int @var{inc_l}, int @var{inc_r})
+@deftypefnx  {} {} CollocWt (int @var{n}, int @var{inc_l}, int @var{inc_r}, double @var{l}, double @var{r})
+@deftypefnx  {} {} CollocWt (const CollocWt&)
 @end deftypefn
 
 @deftypefn {} CollocWt& {operator =} (const CollocWt&)
 @end deftypefn
 
 @deftypefn {} CollocWt& resize (int @var{ncol})
 @end deftypefn
 
diff --git a/doc/liboctave/range.texi b/doc/liboctave/range.texi
--- a/doc/liboctave/range.texi
+++ b/doc/liboctave/range.texi
@@ -1,16 +1,16 @@
 @node Ranges, Nonlinear Functions, Matrix Factorizations, Top
 @chapter Ranges
 @cindex ranges
 
-@deftypefn  {} {}Range (void)
-@deftypefnx  {} {}Range (const Range &@var{r})
-@deftypefnx  {} {}Range (double @var{b}, double @var{l})
-@deftypefnx  {} {}Range (double @var{b}, double @var{l}, double @var{i})
+@deftypefn  {} {} Range (void)
+@deftypefnx  {} {} Range (const Range &@var{r})
+@deftypefnx  {} {} Range (double @var{b}, double @var{l})
+@deftypefnx  {} {} Range (double @var{b}, double @var{l}, double @var{i})
 @end deftypefn
 
 @deftypefn {} double base (void) const
 @deftypefnx {} double limit (void) const
 @deftypefnx {} double inc (void) const
 @end deftypefn
 
 @deftypefn {} void set_base (double @var{b})
