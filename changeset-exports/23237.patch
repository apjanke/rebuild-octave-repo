# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1488113212 -3600
#      Sun Feb 26 13:46:52 2017 +0100
# Node ID 904c8a356e765fc5a7e276bf941d92116e3b979f
# Parent  4cd5f975d26cd26c3334334b50c81272f0f893ec
provide the possibility for breaking lines only in comments (bug #41555)

* file-editor-tab.cc (notice_settings): get preference on breaking lines in
  comments only;
  (handle_char_added): check current style for comment and break lines if
  desired, add comment string at the new line if comment is a line comment

* file-editor-tab.h: new class variable for line breaking in comments only

* settings-dialog.cc (settings_dialog): initialize new checkbox from settings;
  (write_changed_settings): store state of the checkbox into settings file

* settings-dialog.ui: new checkbox for line breaking in comments only

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2371,19 +2371,22 @@ file_editor_tab::notice_settings (const 
   else
     _edit_area->setWrapMode (QsciScintilla::WrapNone);
 
   if (settings->value ("editor/break_lines",false).toBool ())
     _line_break = line_length;
   else
     _line_break = 0;
 
+  _line_break_comments =
+        settings->value ("editor/break_lines_comments",false).toBool ();
+
   // highlight all occurrences of a word selected by a double click
-  _highlight_all_occurrences = settings->value (
-                    "editor/highlight_all_occurrences", true).toBool ();
+  _highlight_all_occurrences =
+        settings->value ("editor/highlight_all_occurrences", true).toBool ();
 
   // reload changed files
   _always_reload_changed_files =
         settings->value ("editor/always_reload_changed_files",false).toBool ();
 }
 
 void
 file_editor_tab::auto_margin_width ()
@@ -2680,16 +2683,27 @@ file_editor_tab::handle_char_added (int 
     // For taking the tab width into consideration, use own function
     int line, col, pos;
     _edit_area->get_current_position (&pos, &line, &col);
 
     // immediately return if line has not reached the max. line length
     if (col <= _line_break)
       return;
 
+    // If line breaking is only desired in comments,
+    // return if not in a comment
+    int style_comment = octave_qscintilla::ST_NONE;
+    if (_line_break_comments)
+      {
+        // line breaking only in comments, check for comment style
+        style_comment = _edit_area->is_style_comment ();
+        if (! style_comment)
+          return;       // no comment, return
+      }
+
     // Here we go for breaking the current line by inserting a newline.
     // For determining the position of a specific column, we have to get
     // the column from the QScintila function without taking tab lengths
     // into account, since the calculation from line/col to position ignores
     // this, too
     _edit_area->getCursorPosition (&line, &col);
     int c = 0;
     int col_space = col;
@@ -2707,18 +2721,18 @@ file_editor_tab::handle_char_added (int 
     // otherwise break at cursor position
     int col_newline = col - 1;
     if (c == ' ' || c == '\t')
       col_newline = col_space + 1;
 
     // Insert a newline char for breaking the line possibly followed
     // by a line comment string
     QString newline = QString ("\n");
-    int style = _edit_area->is_style_comment ();
-    if (style == octave_qscintilla::ST_LINE_COMMENT)
+    style_comment = _edit_area->is_style_comment ();
+    if (style_comment == octave_qscintilla::ST_LINE_COMMENT)
       newline = newline + _edit_area->comment_string ();
     _edit_area->insertAt (newline, line, col_newline);
 
     // Automatically indent the new line to the indentation of previous line
     // and set the cursor position to the end of the indentation.
     _edit_area->setIndentation (line + 1, indentation);
     _edit_area->SendScintilla (QsciScintillaBase::SCI_LINEEND);
   }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -296,16 +296,17 @@ private:
   QRect _find_dialog_geometry;
 
   QsciAPIs *_lexer_apis;
   QString _prep_apis_file;
 
   static bool _cancelled;
 
   int _line_break;
+  bool _line_break_comments;
   int _line;
   int _col;
   bool _lines_changed;
   bool _highlight_all_occurrences;
   int _indicator_highlight_all;
 
 };
 
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -404,16 +404,18 @@ settings_dialog::settings_dialog (QWidge
   ui->editor_long_line_marker->setChecked (
     settings->value ("editor/long_line_marker",true).toBool ());
   ui->editor_long_line_marker_background->setChecked (
     settings->value ("editor/long_line_marker_background",false).toBool ());
   ui->editor_long_line_column->setValue (
     settings->value ("editor/long_line_column",80).toInt ());
   ui->editor_break_checkbox->setChecked (
     settings->value ("editor/break_lines",false).toBool ());
+  ui->editor_break_checkbox->setChecked (
+    settings->value ("editor/break_lines_comments",false).toBool ());
   ui->editor_wrap_checkbox->setChecked (
     settings->value ("editor/wrap_lines",false).toBool ());
   ui->cb_edit_status_bar->setChecked (
     settings->value ("editor/show_edit_status_bar",true).toBool ());
   ui->cb_edit_tool_bar->setChecked (
     settings->value ("editor/show_toolbar",true).toBool ());
   ui->cb_code_folding->setChecked (
     settings->value ("editor/code_folding",true).toBool ());
@@ -799,16 +801,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/long_line_marker",
                       ui->editor_long_line_marker->isChecked ());
   settings->setValue ("editor/long_line_marker_background",
                       ui->editor_long_line_marker_background->isChecked ());
   settings->setValue ("editor/long_line_column",
                       ui->editor_long_line_column->value ());
   settings->setValue ("editor/break_lines",
                       ui->editor_break_checkbox->isChecked ());
+  settings->setValue ("editor/break_lines_comments",
+                      ui->editor_break_comments_checkbox->isChecked ());
   settings->setValue ("editor/wrap_lines",
                       ui->editor_wrap_checkbox->isChecked ());
   settings->setValue ("editor/code_folding",
                       ui->cb_code_folding->isChecked ());
   settings->setValue ("editor/show_edit_status_bar",
                       ui->cb_edit_status_bar->isChecked ());
   settings->setValue ("editor/show_toolbar",
                       ui->cb_edit_tool_bar->isChecked ());
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -493,19 +493,19 @@
         <widget class="QScrollArea" name="scrollArea">
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents">
           <property name="geometry">
            <rect>
             <x>0</x>
-            <y>-327</y>
+            <y>0</y>
             <width>642</width>
-            <height>927</height>
+            <height>956</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_16">
            <item>
             <widget class="QGroupBox" name="groupBox_5">
              <property name="title">
               <string>General</string>
              </property>
@@ -964,31 +964,22 @@
                      <string>Break long lines at line length</string>
                     </property>
                     <property name="checked">
                      <bool>false</bool>
                     </property>
                    </widget>
                   </item>
                   <item>
-                   <widget class="QCheckBox" name="editor_wrap_checkbox">
+                   <widget class="QCheckBox" name="editor_break_comments_checkbox">
                     <property name="enabled">
-                     <bool>true</bool>
-                    </property>
-                    <property name="sizePolicy">
-                     <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
-                      <horstretch>0</horstretch>
-                      <verstretch>0</verstretch>
-                     </sizepolicy>
-                    </property>
-                    <property name="toolTip">
-                     <string>This works well for monospaced fonts. The line is drawn at a position based on the width of a space character in the default font. It may not work very well if styles use proportional fonts or if varied font sizes or bold, italic and normal texts are used.</string>
+                     <bool>false</bool>
                     </property>
                     <property name="text">
-                     <string>Wrap lines at window border</string>
+                     <string>Break lines only in comments</string>
                     </property>
                     <property name="checked">
                      <bool>false</bool>
                     </property>
                    </widget>
                   </item>
                   <item>
                    <spacer name="horizontalSpacer_17">
@@ -1092,16 +1083,42 @@
                      </size>
                     </property>
                    </spacer>
                   </item>
                  </layout>
                 </item>
                </layout>
               </item>
+              <item>
+               <layout class="QHBoxLayout" name="horizontalLayout_19">
+                <item>
+                 <widget class="QCheckBox" name="editor_wrap_checkbox">
+                  <property name="enabled">
+                   <bool>true</bool>
+                  </property>
+                  <property name="sizePolicy">
+                   <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+                    <horstretch>0</horstretch>
+                    <verstretch>0</verstretch>
+                   </sizepolicy>
+                  </property>
+                  <property name="toolTip">
+                   <string>This works well for monospaced fonts. The line is drawn at a position based on the width of a space character in the default font. It may not work very well if styles use proportional fonts or if varied font sizes or bold, italic and normal texts are used.</string>
+                  </property>
+                  <property name="text">
+                   <string>Wrap long lines at curent window border</string>
+                  </property>
+                  <property name="checked">
+                   <bool>false</bool>
+                  </property>
+                 </widget>
+                </item>
+               </layout>
+              </item>
              </layout>
             </widget>
            </item>
            <item>
             <widget class="QGroupBox" name="groupBox_6">
              <property name="title">
               <string>Indentation</string>
              </property>
@@ -3049,10 +3066,26 @@
      <y>186</y>
     </hint>
     <hint type="destinationlabel">
      <x>507</x>
      <y>236</y>
     </hint>
    </hints>
   </connection>
+  <connection>
+   <sender>editor_break_checkbox</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>editor_break_comments_checkbox</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>286</x>
+     <y>446</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>483</x>
+     <y>446</y>
+    </hint>
+   </hints>
+  </connection>
  </connections>
 </ui>
