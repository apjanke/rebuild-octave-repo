# HG changeset patch
# User jwe
# Date 1163472905 0
#      Tue Nov 14 02:55:05 2006 +0000
# Node ID 645605133a6f236e1c3911b9a3c4528749ab5925
# Parent  57aeb18f161d5a08adc07894bf8c459891142289
[project @ 2006-11-14 02:55:05 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2006-11-13  John W. Eaton  <jwe@octave.org>
 
+	* octave.cc (maximum_braindamage): Disable
+	Octave:fopen-file-in-path and Octave:load-file-in-path warnings.
+
 	* run-octave.in: Substitute liboctinterp, liboctave, and libcruft.
 	Use them to set LD_PRELOAD.
 	* Makeconf.in (do-subst-script-vals): Also substitute
 	liboctinterp, liboctave, and libcruft.
 
 2006-11-13  Rafael Laboissiere  <rafael@debian.org>
 
 	* mkoctfile.in: Add -Wl,... options to ldflags, not pass_on_flags.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-11-13  John W. Eaton  <jwe@octave.org>
 
+	* load-save.cc (find_file_to_load): New function.
+	(Fload): Call find_file_to_load to search load path for file.
+
+	* file-io.cc (Ffopen): Search load path for file.
+
+	* load-path.cc (path::do_find_first_of, path::do_find_file):
+	Break out of all loops once file is found, not just innermost one.
+
 	* data.cc (Fsize_equal): New function.
 
 2006-11-13  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* ov.cc (check_subsref_elements, Fsubsref, Fsubsasgn):
 	New functions.
 
 	* ov-re-mat.h, ov-scalar.h, pr-output.h:
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -54,20 +54,23 @@ 02110-1301, USA.
 #endif
 
 #ifdef HAVE_ZLIB_H
 #include <zlib.h>
 #endif
 
 #include "error.h"
 #include "file-ops.h"
+#include "file-stat.h"
 #include "lo-ieee.h"
+#include "oct-env.h"
 
 #include "defun.h"
 #include "file-io.h"
+#include "load-path.h"
 #include "oct-fstrm.h"
 #include "oct-iostrm.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-prcstrm.h"
 #include "oct-stream.h"
 #include "oct-strstrm.h"
 #include "pager.h"
@@ -386,41 +389,61 @@ do_stream_open (const std::string& name,
 
   if (! error_state)
     {
       oct_mach_info::float_format flt_fmt =
 	oct_mach_info::string_to_float_format (arch);
 
       if (! error_state)
 	{
+	  std::string fname = file_ops::tilde_expand (name);
+
+	  if (! (md & std::ios::out || octave_env::absolute_pathname (fname)))
+	    {
+	      file_stat fs (fname);
+
+	      if (! fs.exists ())
+		{
+		  std::string tmp = octave_env::make_absolute
+		    (load_path::find_file (fname), octave_env::getcwd ());
+
+		  if (! tmp.empty ())
+		    {
+		      warning_with_id ("Octave:fopen-file-in-path",
+				       "fopen: file found in load path");
+		      fname = tmp;
+		    }
+		}
+	    }
+
 #if defined (HAVE_ZLIB)
 	  std::string tmode = mode;
 
 	  size_t pos = tmode.find ('z');
 
 	  if (pos != NPOS)
 	    {
 	      tmode.erase (pos, 1);
 
-	      gzFile fptr = ::gzopen (name.c_str (), tmode.c_str ());
+	      gzFile fptr = ::gzopen (fname.c_str (), tmode.c_str ());
 
 	      if (fptr)
-		retval = octave_zstdiostream::create (name, fptr, md, flt_fmt);
+		retval = octave_zstdiostream::create (fname, fptr, md, flt_fmt);
 	      else
 		{
 		  using namespace std;
 		  retval.error (::strerror (errno));
 		}
 	    }
 	  else
 #endif
 	    {
-	      FILE *fptr = ::fopen (name.c_str (), mode.c_str ());
+	      FILE *fptr = ::fopen (fname.c_str (), mode.c_str ());
 
-	      retval = octave_stdiostream::create (name, fptr, md, flt_fmt);
+	      retval = octave_stdiostream::create (fname, fptr, md, flt_fmt);
 
 	      if (! fptr)
 		{
 		  using namespace std;
 		  retval.error (::strerror (errno));
 		}
 	    }
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -756,21 +756,24 @@ load_path::do_find_file (const std::stri
 
       octave_idx_type len = all_files.length ();
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  if (all_files[i] == file)
 	    {
 	      dir_name = p->dir_name;
-	      break;
+
+	      goto done;
 	    }
 	}
     }
 
+ done:
+
   if (! dir_name.empty ())
     retval = dir_name + file_ops::dir_sep_str + file;
 
   return retval;
 }
 
 std::string
 load_path::do_find_first_of (const string_vector& flist) const
@@ -805,29 +808,31 @@ load_path::do_find_first_of (const strin
        p++)
     {
       string_vector all_files = p->all_files;
 
       octave_idx_type len = all_files.length ();
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
-	  
 	  for (octave_idx_type j = 0; j < rel_flen; j++)
 	    {
 	      if (all_files[i] == rel_flist[j])
 		{
 		  dir_name = p->dir_name;
 		  file_name = rel_flist[j];
-		  break;
+
+		  goto done;
 		}
 	    }
 	}
     }
 
+ done:
+
   if (! dir_name.empty ())
     retval = dir_name + file_ops::dir_sep_str + file_name;
 
   return retval;
 }
 
 string_vector
 load_path::do_find_all_first_of (const string_vector& flist) const
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -41,28 +41,30 @@ 02110-1301, USA.
 
 #ifdef HAVE_HDF5
 #include <hdf5.h>
 #endif
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
+#include "file-stat.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
+#include "load-path.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "pt-exp.h"
 #include "symtab.h"
 #include "sysdep.h"
@@ -581,16 +583,62 @@ do_load (std::istream& stream, const std
 	octave_stdout << msg;
     }
   else if (! retstruct.empty ())
     retval = retstruct;
 
   return retval;
 }
 
+std::string
+find_file_to_load (const std::string& name, const std::string& orig_name)
+{
+  std::string fname = name;
+
+  if (! octave_env::absolute_pathname (fname))
+    {
+      file_stat fs (fname);
+
+      if (! fs.exists ())
+	{
+	  std::string tmp = octave_env::make_absolute
+	    (load_path::find_file (fname), octave_env::getcwd ());
+
+	  if (! tmp.empty ())
+	    {
+	      warning_with_id ("Octave:load-file-in-path",
+			       "load: file found in load path");
+	      fname = tmp;
+	    }
+	}
+    }
+
+  if (fname.rfind (".") == NPOS)
+    {
+      file_stat fs (fname);
+
+      if (! fs.exists ())
+	fname = find_file_to_load (fname + ".mat", orig_name);
+    }
+  else
+    {
+      file_stat fs (fname);
+  
+      if (! fs.exists ())
+	{
+	  fname = "";
+
+	  error ("load: unable to find file %s", orig_name.c_str ());
+	}
+    }
+
+  return fname;
+}
+
+
 // HDF5 load/save documentation is included in the Octave manual
 // regardless, but if HDF5 is not linked in we also include a
 // sentence noting this, so the user understands that the features
 // aren't available.  Define a macro for this sentence:
 
 #ifdef HAVE_HDF5
 #define HAVE_HDF5_HELP_STRING ""
 #else /* ! HAVE_HDF5 */
@@ -641,17 +689,17 @@ detect the type of file and do conversio
 formats (currently only IEEE big and little endian, though other formats\n\
 may added in the future).\n\
 \n\
 Valid options for @code{load} are listed in the following table.\n\
 \n\
 @table @code\n\
 @item -force\n\
 The @samp{-force} option is accepted but ignored for backward\n\
-compatiability. Octave now overwrites variables currently in memory with\n\
+compatibility. Octave now overwrites variables currently in memory with\n\
 the same name as those found in the file.\n\
 \n\
 @item -ascii\n\
 Force Octave to assume the file contains columns of numbers in text format\n\
 without any header or other information.  Data in the file will be loaded\n\
 as a single numeric matrix with the name of the variable derived from the\n\
 name of the file.\n\
 \n\
@@ -680,17 +728,17 @@ Force Octave to assume the file is in HD
 Center for Supercomputing Applications at the University of Illinois.)\n\
 Note that Octave can read HDF5 files not created by itself, but may\n\
 skip some datasets in formats that it cannot support.\n"
 
 HAVE_HDF5_HELP_STRING
 
 "\n\
 @item -import\n\
-The @samp{-import} is accepted but ignored for backward compatiability.\n\
+The @samp{-import} is accepted but ignored for backward compatibility.\n\
 Octave can now support multi-dimensional HDF data and automatically\n\
 modifies variable names if they are invalid Octave identifiers.\n\
 \n\
 @item -text\n\
 Force Octave to assume the file is in Octave's text format.\n\
 @end table\n\
 @end deffn")
 {
@@ -805,35 +853,23 @@ Force Octave to assume the file is in Oc
 			    nargout);
 	}
       else
 	error ("load: must specify file format if reading from stdin");
     }
   else
     {
       std::string fname = file_ops::tilde_expand (argv[i]);
-      bool use_zlib = false;
+
+      fname = find_file_to_load (fname, orig_fname);
 
-      // Check if file exists, if it doesn't then also check with a 
-      // .mat extension
-      std::ifstream file_exist (fname.c_str ());
-      if (file_exist)
-	file_exist.close ();
-      else
-	{
-	  fname.append (".mat");
-	  std::ifstream file_mat_exist (fname.c_str ());
-	  if (file_mat_exist)
-	    file_mat_exist.close ();
-	  else
-	    {
-	      gripe_file_open ("load", orig_fname);
-	      return retval;
-	    }
-	}
+      if (error_state)
+	return retval;
+
+      bool use_zlib = false;
 
       if (format == LS_UNKNOWN)
 	format = get_file_format (fname, orig_fname, use_zlib);
 
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
 	{
 	  i++;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -490,17 +490,19 @@ maximum_braindamage (void)
   bind_internal_variable ("crash_dumps_octave_core", false);
   bind_internal_variable ("default_save_options", "-mat-binary");
   bind_internal_variable ("fixed_point_format", true);
   bind_internal_variable ("history_timestamp_format_string",
 			 "%%-- %D %I:%M %p --%%");
   bind_internal_variable ("page_screen_output", false);
   bind_internal_variable ("print_empty_dimensions", false);
 
+  disable_warning ("Octave:fopen-file-in-path");
   disable_warning ("Octave:function-name-clash");
+  disable_warning ("Octave:load-file-in-path");
 }
 
 // You guessed it.
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_env::set_program_name (argv[0]);
