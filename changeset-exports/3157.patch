# HG changeset patch
# User jwe
# Date 888140840 0
#      Sun Feb 22 09:47:20 1998 +0000
# Node ID 974e596662f9926cdb4438a63d07d2d0ae9f03c3
# Parent  a494f93e60ff68065e6b11b0c707a12d64ccf4ad
[project @ 1998-02-22 09:47:18 by jwe]

diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -68,16 +68,17 @@ F77 = @F77@
 FFLAGS = @FFLAGS@
 FPICFLAG = @FPICFLAG@
 FORTRAN_MAIN_FLAG = @FORTRAN_MAIN_FLAG@
 ALL_FFLAGS = $(FFLAGS)
 
 # cc and associated flags.
 
 DLFCN_INCFLAGS = @DLFCN_INCFLAGS@
+GLOB_INCFLAGS = @DLFCN_INCFLAGS@
 
 # Clean up INCFLAGS a bit if we are not compiling in a separate
 # directory.
 ifeq ($(srcdir),.)
   TMP_IF_1 = -I.
 else
   TMP_IF_1 = -I. -I$(srcdir)
 endif
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.298 $)
+AC_REVISION($Revision: 1.299 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -1104,17 +1104,17 @@ AC_ARG_ENABLE(picky-flags,
    fi], [])
 
 ### Run configure in subdirectories.
 
 export CC
 export CXX
 export F77
 
-AC_CONFIG_SUBDIRS($(GLOB_DIR) kpathsea scripts $PLPLOT_DIR $READLINE_DIR)
+AC_CONFIG_SUBDIRS($GLOB_DIR kpathsea scripts $PLPLOT_DIR $READLINE_DIR)
 
 ### Do the substitutions in all the Makefiles.
 
 AC_OUTPUT(Makefile octMakefile Makeconf test/Makefile dlfcn/Makefile
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile
   examples/Makefile liboctave/Makefile src/Makefile
   libcruft/Makefile libcruft/Makerules
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -144,18 +144,18 @@ do_initialization (void)
   initialized = 1;
 }
 
 static octave_value_list
 do_rand (const octave_value_list& args, int nargin)
 {
   octave_value_list retval;
 
-  int n = 0;
-  int m = 0;
+  volatile int n = 0;
+  volatile int m = 0;
 
   if (nargin == 0)
     {
       n = 1;
       m = 1;
 
       goto gen_matrix;
     }
@@ -290,19 +290,23 @@ do_rand (const octave_value_list& args, 
 
   if (n == 0 || m == 0)
     {
       Matrix m;
       retval.resize (1, m);
     }
   else if (n > 0 && m > 0)
     {
+      volatile int i;
+      volatile int j;
+
       Matrix rand_mat (n, m);
-      for (int j = 0; j < m; j++)
-	for (int i = 0; i < n; i++)
+
+      for (j = 0; j < m; j++)
+	for (i = 0; i < n; i++)
 	  {
 	    double val;
 	    switch (current_distribution)
 	      {
 	      case uniform_dist:
 		F77_XFCN (dgenunf, DGENUNF, (0.0, 1.0, val));
 		rand_mat (i, j) = val;
 		break;
diff --git a/src/TEMPLATE-INST/Map-fnc.cc b/src/TEMPLATE-INST/Map-fnc.cc
--- a/src/TEMPLATE-INST/Map-fnc.cc
+++ b/src/TEMPLATE-INST/Map-fnc.cc
@@ -35,15 +35,15 @@ Software Foundation, 59 Temple Place - S
 
 #include "fn-cache.h"
 
 template class Map<file_name_cache_elt>;
 template class CHNode<file_name_cache_elt>;
 template class CHMap<file_name_cache_elt>;
 
 template static int goodCHptr (CHNode<file_name_cache_elt> *t);
-template static int CHptr_to_index (CHNode<file_name_cache_elt> *t);
+template static unsigned int CHptr_to_index (CHNode<file_name_cache_elt> *t);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Map-tc.cc b/src/TEMPLATE-INST/Map-tc.cc
--- a/src/TEMPLATE-INST/Map-tc.cc
+++ b/src/TEMPLATE-INST/Map-tc.cc
@@ -31,15 +31,15 @@ Software Foundation, 59 Temple Place - S
 
 #include "ov.h"
 
 template class Map<octave_value>;
 template class CHNode<octave_value>;
 template class CHMap<octave_value>;
 
 template static int goodCHptr (CHNode<octave_value> *t);
-template static int CHptr_to_index (CHNode<octave_value> *t);
+template static unsigned int CHptr_to_index (CHNode<octave_value> *t);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -232,16 +232,21 @@ octave_dynamic_loader::load_fcn_from_dot
 
       builtin_fcn_installer f
 	= instance->resolve_reference (mangled_name, oct_file);
 
 
       // XXX FIXME XXX -- this should probably be handled correctly by
       // mangle_octave_oct_file_name using a configure test.
 
+      // Perhaps we should always check for both forms of the name and
+      // issue a warning if they both exist?  (I still think it would
+      // be best to use some configure test to determine exactly what
+      // form of the symbol name we should be looking for...)
+
       if (! f)
 	{
 	  string t = "_";
 
 	  mangled_name = t.append (mangled_name);
 
 	  f = instance->resolve_reference (mangled_name, oct_file);
 	}
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -99,23 +99,26 @@ tree_global_command::do_init (tree_decl_
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->link_to_global ();
 
       octave_lvalue ult = id->lvalue ();
 
-      if (ult.is_undefined () && Vinitialize_global_variables)
+      if (ult.is_undefined ())
 	{
 	  tree_expression *expr = elt.expression ();
 
-	  octave_value init_val = expr
-	    ? expr->rvalue ()
-	    : builtin_any_variable ("default_global_variable_value");
+	  octave_value init_val;
+
+	  if (expr)
+	    init_val = expr->rvalue ();
+	  else if (Vinitialize_global_variables)
+	    init_val = builtin_any_variable ("default_global_variable_value");
 
 	  ult.assign (octave_value::asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_global_command::eval (void)
