# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1489749940 -3600
#      Fri Mar 17 12:25:40 2017 +0100
# Branch stable
# Node ID f093b9d4ef302bec0bd5080bf945c8ae42bee31a
# Parent  3b2dbed2676282ac9e5e0007ec8b747c11ddf606
Fix eigs for generalized nonsymmetric and shift-invert problems (bug #39573).

* liboctave/numeric/eigs-base.cc: Fix the operator which computes mtmp in
EigsRealNonSymmetricMatrix and EigsComplexNonSymmetricMatrix.  Fix
vector_product for ido=-1.

* scripts/sparse/eigs.m: Add tests for the generalized nonsymmetric
problem (nonsymmetric and complex) and for the generalized shift-invert
problems (symmetric, nonsymmetric and complex).

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -1017,17 +1017,17 @@ EigsRealSymmetricMatrixShift (const M& m
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
-                  vector_product (m, workd+iptr(0)-1, dtmp);
+                  vector_product (b, workd+iptr(0)-1, dtmp);
 
                   Matrix tmp(n, 1);
 
                   for (octave_idx_type i = 0; i < n; i++)
                     tmp(i,0) = dtmp[P[i]];
 
                   lusolve (L, U, tmp);
 
@@ -1561,17 +1561,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               Matrix mtmp (n,1);
               for (octave_idx_type i = 0; i < n; i++)
                 mtmp(i,0) = workd[i + iptr(0) - 1];
 
-              mtmp = utsolve (bt, permB, m * ltsolve (b, permB, mtmp));
+              mtmp = ltsolve (b, permB, m * utsolve (bt, permB, mtmp));
 
               for (octave_idx_type i = 0; i < n; i++)
                 workd[i+iptr(1)-1] = mtmp(i,0);
             }
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
@@ -1696,17 +1696,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
 
           if (note3)
-            eig_vec = ltsolve (M(b), permB, eig_vec);
+            eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler) ("eigs: error %d in dneupd", info2);
 
   return ip(4);
 }
 
@@ -1865,17 +1865,17 @@ EigsRealNonSymmetricMatrixShift (const M
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
-                  vector_product (m, workd+iptr(0)-1, dtmp);
+                  vector_product (b, workd+iptr(0)-1, dtmp);
 
                   Matrix tmp(n, 1);
 
                   for (octave_idx_type i = 0; i < n; i++)
                     tmp(i,0) = dtmp[P[i]];
 
                   lusolve (L, U, tmp);
 
@@ -2516,17 +2516,17 @@ EigsComplexNonSymmetricMatrix (const M& 
 
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               ComplexMatrix mtmp (n,1);
               for (octave_idx_type i = 0; i < n; i++)
                 mtmp(i,0) = workd[i + iptr(0) - 1];
-              mtmp = utsolve (bt, permB, m * ltsolve (b, permB, mtmp));
+              mtmp = ltsolve (b, permB, m * utsolve (bt, permB, mtmp));
               for (octave_idx_type i = 0; i < n; i++)
                 workd[i+iptr(1)-1] = mtmp(i,0);
 
             }
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
@@ -2605,17 +2605,17 @@ EigsComplexNonSymmetricMatrix (const M& 
               for (octave_idx_type j = 0; j < n; j++)
                 z[off1 + j] = z[off2 + j];
 
               for (octave_idx_type j = 0; j < n; j++)
                 z[off2 + j] = ctmp[j];
             }
 
           if (note3)
-            eig_vec = ltsolve (b, permB, eig_vec);
+            eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler) ("eigs: error %d in zneupd", info2);
 
   return ip(4);
 }
 
@@ -2780,17 +2780,17 @@ EigsComplexNonSymmetricMatrixShift (cons
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
-                  vector_product (m, workd+iptr(0)-1, ctmp);
+                  vector_product (b, workd+iptr(0)-1, ctmp);
 
                   ComplexMatrix tmp(n, 1);
 
                   for (octave_idx_type i = 0; i < n; i++)
                     tmp(i,0) = ctmp[P[i]];
 
                   lusolve (L, U, tmp);
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -755,16 +755,98 @@ endfunction
 %! v = v(:, idx);
 %! R = chol (B);
 %! [v1, d1] = eigs (R' \ A / R, 5, "lm");
 %! d1diag = diag (d1);
 %! [d1diag, idx] = sort (d1diag);
 %! v1 = v1(:, idx);
 %! assert (abs (v), abs (R \ v1), 1e-12);
 %!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10);
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, "lm");
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12);
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, "lm");
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10) -...
+%! 1i * spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10);
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, "lm");
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12);
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, "lm");
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = toeplitz (sparse (1:10));
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, 1);
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12);
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, 1);
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10);
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, 1);
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12);
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, 1);
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10) -...
+%! 1i * spdiags ([[1./(2:11)]',[-5:-2:-23]',[1:10]'],-1:1,10,10);
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, 1);
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12);
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, 1);
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
 %! A = toeplitz (sparse (1:10));
 %! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
 %! R = chol (B);
 %! opts.cholB = R;
 %! [v, d] = eigs (A, R, 5, "lm", opts);
 %! for i = 1:5
 %!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
 %! endfor
