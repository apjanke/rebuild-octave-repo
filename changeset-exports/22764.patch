# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479156823 28800
#      Mon Nov 14 12:53:43 2016 -0800
# Node ID d261dcd73dcf3916dc31d99c990e0366a12dc795
# Parent  57e82b74f89b8d2c844c2b151317dfbacfa1e539
pqpnonneg.m: Overhaul function.

* pqpnonneg.m: Use @var entries in docstring.  Change to @table rather than
@bullet.  Rename function input x to x0 to match documentation.  Use double
quotes rather than single quotes.  Expand out input validation to give more
specific error messages.  Use isargout() to avoid calculating unnecessary
outputs.  Add BIST tests for input validation.

diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -21,92 +21,98 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} pqpnonneg (@var{c}, @var{d})
 ## @deftypefnx {} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0})
 ## @deftypefnx {} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0}, @var{options})
 ## @deftypefnx {} {[@var{x}, @var{minval}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}, @var{lambda}] =} pqpnonneg (@dots{})
-## Minimize @code{1/2*x'*c*x + d'*x} subject to @code{@var{x} >= 0}.
+## Minimize @code{1/2*@var{x}'*@var{c}*@var{x} + @var{d}'*@var{x}} subject to
+## @code{@var{x} >= 0}.
 ##
-## @var{c} and @var{d} must be real, and @var{c} must be symmetric and
+## @var{c} and @var{d} must be real matrices, and @var{c} must be symmetric and
 ## positive definite.
 ##
-## @var{x0} is an optional initial guess for @var{x}.
+## @var{x0} is an optional initial guess for the solution @var{x}.
 ##
 ## @var{options} is an options structure to change the behavior of the
 ## algorithm.
 ##
 ## Outputs:
 ##
-## @itemize @bullet
+## @table @var
+##
+## @item x
+## The solution matrix
+##
 ## @item minval
-##
-## The minimum attained model value, 1/2*xmin'*c*xmin + d'*xmin
+## The minimum attained model value,
+## @code{1/2*@var{xmin}'*@var{c}*@var{xmin} + @var{d}'*@var{xmin}}
 ##
 ## @item exitflag
-##
 ## An indicator of convergence.  0 indicates that the iteration count was
 ## exceeded, and therefore convergence was not reached; >0 indicates that the
 ## algorithm converged.  (The algorithm is stable and will converge given
 ## enough iterations.)
 ##
 ## @item output
-##
 ## A structure with two fields:
 ##
 ## @itemize @bullet
 ## @item @qcode{"algorithm"}: The algorithm used (@qcode{"nnls"})
 ##
 ## @item @qcode{"iterations"}: The number of iterations taken.
 ## @end itemize
 ##
 ## @item lambda
-##
-## Not implemented.
-## @end itemize
-## @seealso{optimset, lsqnonneg, qp}
+## @c FIXME: Something is output from the function, but what is it?
+## Undocumented output
+## @end table
+## @seealso{lsqnonneg, qp, optimset}
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("pqpnonneg");
 
-## This is analogical to the lsqnonneg implementation, which is
-## implemented from Lawson and Hanson's 1973 algorithm on page
-## 161 of Solving Least Squares Problems.
-## It shares the convergence guarantees.
+## This is analogical to the lsqnonneg implementation, which is implemented
+## from Lawson and Hanson's 1973 algorithm on page 161 of Solving Least Squares
+## Problems.  It shares the convergence guarantees.
 
-function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x = [], options = struct ())
+function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x0 = [], options = struct ())
 
-  if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
+  ## Special case: called to find default optimization options
+  if (nargin == 1 && ischar (c) && strcmp (c, "defaults"))
     x = optimset ("MaxIter", 1e5);
     return;
   endif
 
-  if (nargin < 2 || nargin > 4
-      || ! (isnumeric (c) && ismatrix (c))
-      || ! (isnumeric (d) && ismatrix (d))
-      || ! isstruct (options))
+  if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
+  if (! (isnumeric (c) && ismatrix (c)) || ! (isnumeric (d) && ismatrix (d)))
+    error ("pqpnonneg: C and D must be numeric matrices");
+  endif
+  if (! issquare (c))
+    error ("pqpnonneg: C must be a square matrix");
+  endif
+
+  if (! isstruct (options))
+    error ("pqpnonneg: OPTIONS must be a struct");
+  endif
+
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
-  m = rows (c);
   n = columns (c);
-  if (m != n)
-    error ("pqpnonneg: matrix must be square");
-  endif
-
-  if (isempty (x))
-    ## Initial guess is 0s.
+  if (isempty (x0))
+    ## Initial guess is all zeros.
     x = zeros (n, 1);
   else
     ## ensure nonnegative guess.
-    x = max (x, 0);
+    x = max (x0, 0);
   endif
 
   max_iter = optimget (options, "MaxIter", 1e5);
 
   ## Initialize P, according to zero pattern of x.
   p = find (x > 0).';
   ## Initialize the Cholesky factorization.
   r = chol (c(p, p));
@@ -131,17 +137,17 @@ function [x, minval, exitflag, output, l
       if (isempty (idx))
         ## LH7: tmp solution found, iterate.
         x(:) = 0;
         x(p) = xtmp;
         break;
       else
         ## LH8, LH9: find the scaling factor.
         pidx = p(idx);
-        sf = x(pidx)./(x(pidx) - xtmp(idx));
+        sf = x(pidx) ./ (x(pidx) - xtmp(idx));
         alpha = min (sf);
         ## LH10: adjust X.
         xx = zeros (n, 1);
         xx(p) = xtmp;
         x += alpha*(xx - x);
         ## LH11: move from P to Z all X == 0.
         ## This corresponds to those indices where minimum of sf is attained.
         idx = idx(sf == alpha);
@@ -154,17 +160,17 @@ function [x, minval, exitflag, output, l
     endwhile
 
     ## compute the gradient.
     w = -(d + c*x);
     w(p) = [];
     if (! any (w > 0))
       if (usechol)
         ## verify the solution achieved using qr updating.
-        ## in the best case, this should only take a single step.
+        ## In the best case, this should only take a single step.
         usechol = false;
         continue;
       else
         ## we're finished.
         break;
       endif
     endif
 
@@ -188,27 +194,30 @@ function [x, minval, exitflag, output, l
         usechol = false;
       endif
     endif
 
   endwhile
   ## LH12: complete.
 
   ## Generate the additional output arguments.
-  if (nargout > 1)
+  if (isargout (2))
     minval = 1/2*(x'*c*x) + d'*x;
   endif
-  exitflag = iter;
-  if (nargout > 2 && iter >= max_iter)
-    exitflag = 0;
+  if (isargout (3))
+    if (iter >= max_iter)
+      exitflag = 0;
+    else
+      exitflag = iter;
+    endif
   endif
-  if (nargout > 3)
+  if (isargout (4))
     output = struct ("algorithm", "nnls-pqp", "iterations", iter);
   endif
-  if (nargout > 4)
+  if (isargout (5))
     lambda = zeros (size (x));
     lambda(p) = w;
   endif
 
 endfunction
 
 
 %!test
@@ -217,8 +226,19 @@ endfunction
 %! assert (pqpnonneg (C, d), [0;0.5], 100*eps);
 
 ## Test equivalence of lsq and pqp
 %!test
 %! C = rand (20, 10);
 %! d = rand (20, 1);
 %! assert (pqpnonneg (C'*C, -C'*d), lsqnonneg (C, d), 100*eps);
 
+# Test input validation
+%!error pqpnonneg ()
+%!error pqpnonneg (1)
+%!error pqpnonneg (1,2,3,4,5)
+%!error <C .* must be numeric matrices> pqpnonneg ({1},2)
+%!error <C .* must be numeric matrices> pqpnonneg (ones (2,2,2),2)
+%!error <D must be numeric matrices> pqpnonneg (1,{2})
+%!error <D must be numeric matrices> pqpnonneg (1, ones (2,2,2))
+%!error <C must be a square matrix> pqpnonneg ([1 2], 2)
+%!error <OPTIONS must be a struct> pqpnonneg (1, 2, [], 3)
+
