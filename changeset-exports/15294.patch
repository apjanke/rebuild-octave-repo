# HG changeset patch
# User Rik <rik@octave.org>
# Date 1346805371 25200
#      Tue Sep 04 17:36:11 2012 -0700
# Node ID d1751eee9a42c5d745130e8c9ee567bdf3172ee9
# Parent  2981cdbb955f6c54eeecc082b0f8ab6f386544a8
acinclude.m4: Use AC_LANG_PUSH macro with AC_CACHE_CHECK for greater efficiency.

* acinclude.m4: Use AC_LANG_PUSH macro with AC_CACHE_CHECK for greater efficiency.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -352,20 +352,20 @@ dnl
 dnl Check whether ARPACK works (does not crash).
 dnl
 dnl Using a pure Fortran program doesn't seem to crash when linked
 dnl with the buggy ARPACK library but the C++ program does.  Maybe it
 dnl is the memory allocation that exposes the bug and using statically
 dnl allocated arrays in Fortran does not?
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_ARPACK_OK], [
-  AC_LANG_PUSH(C++)
   AC_CACHE_CHECK([whether the arpack library works],
     [octave_cv_lib_arpack_ok],
-    [AC_RUN_IFELSE([AC_LANG_PROGRAM([[
+    [AC_LANG_PUSH(C++)
+    AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 // External functions from ARPACK library
 extern "C" int
 F77_FUNC (dnaupd, DNAUPD) (int&, const char *, const int&, const char *,
                            int&, const double&, double*, const int&,
                            double*, const int&, int*, int*, double*,
                            double*, const int&, int&, long int, long int);
 
 extern "C" int
@@ -488,18 +488,18 @@ doit (void)
 ]], [[
 
   for (int i = 0; i < 10; i++)
     doit ();
     ]])],
     octave_cv_lib_arpack_ok=yes,
     octave_cv_lib_arpack_ok=no,
     octave_cv_lib_arpack_ok=yes)
+    AC_LANG_POP(C++)
   ])
-  AC_LANG_POP(C++)
   if test "$octave_cv_lib_arpack_ok" = "yes"; then
     $1
   else
     $2
   fi
 ])
 dnl
 dnl Check whether using HDF5 DLL under Windows.  This is done by
