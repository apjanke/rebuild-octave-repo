# HG changeset patch
# User jwe
# Date 797475424 0
#      Mon Apr 10 00:57:04 1995 +0000
# Node ID 38b876e46ff6241dd50b2beb12f1e0e30019542a
# Parent  766e2a1a4e7b2790eae68dd39c0e5cd7e9a1e4e2
[project @ 1995-04-10 00:56:17 by jwe]

diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -34,31 +34,32 @@ int breaking = 0;
 int continuing = 0;
 
 // Nonzero means we're returning from a function.  Global because it
 // is also needed in tree-expr.cc.
 int returning = 0;
 
 #include "user-prefs.h"
 #include "variables.h"
+#include "oct-map.h"
 #include "symtab.h"
 #include "error.h"
 #include "gripes.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-cmd.h"
 #include "tree-misc.h"
 #include "tree-const.h"
 #include "unwind-prot.h"
 
 // Decide if it's time to quit a for or while loop.
 static inline int
 quit_loop_now (void)
 {
-// Maybe handle `continue N' someday...
+  // Maybe handle `continue N' someday...
 
   if (continuing)
     continuing--;
 
   int quit = (returning || breaking || continuing);
 
   if (breaking)
     breaking--;
@@ -76,18 +77,19 @@ quit_loop_now (void)
 
 static tree **
 list_to_vector (tree *list, int& len)
 {
   len = list->length () + 1;
 
   tree **args = new tree * [len];
 
-// args[0] may eventually hold something useful, like the function
-// name.
+  // args[0] may eventually hold something useful, like the function
+  // name.
+
   tree *tmp_list = list;
   for (int k = 1; k < len; k++)
     {
       args[k] = tmp_list;
       tmp_list = tmp_list->next_elem ();
     }
   return args;
 }
@@ -231,27 +233,59 @@ tree_while_command::print_code (ostream&
   os << "endwhile";
 }
 
 // For.
 
 tree_for_command::~tree_for_command (void)
 {
   delete id;
+  delete id_list;
   delete expr;
   delete list;
 }
 
 inline void
-tree_for_command::do_for_loop_once (tree_constant& rhs, int& quit)
+tree_for_command::do_for_loop_once (tree_return_list *lst,
+				    const Octave_object& rhs, int& quit)
+{
+  quit = 0;
+
+  tree_oct_obj *tmp = new tree_oct_obj (rhs);
+  tree_multi_assignment_expression tmp_ass (lst, tmp, 1);
+  tmp_ass.eval (0);
+
+  if (error_state)
+    {
+      eval_error ();
+      return;
+    }
+
+  if (list)
+    {
+      list->eval (1);
+      if (error_state)
+	{
+	  eval_error ();
+	  quit = 1;
+	  return;
+	}
+    }
+
+  quit = quit_loop_now ();
+}
+
+inline void
+tree_for_command::do_for_loop_once (tree_index_expression *idx_expr,
+				    const tree_constant& rhs, int& quit)
 {
   quit = 0;
 
   tree_constant *tmp = new tree_constant (rhs);
-  tree_simple_assignment_expression tmp_ass (id, tmp, 1);
+  tree_simple_assignment_expression tmp_ass (idx_expr, tmp, 1);
   tmp_ass.eval (0);
 
   if (error_state)
     {
       eval_error ();
       return;
     }
 
@@ -304,22 +338,31 @@ tree_for_command::do_for_loop_once (tree
 	for (int i = 0; i < steps; i++) \
 	  { \
 	    tree_constant rhs (val); \
 	    int quit = 0; \
 	    do_for_loop_once (ident, rhs, quit); \
 	    if (quit) \
 	      break; \
 	  } \
+      else if (id_list) \
+	for (int i = 0; i < steps; i++) \
+	  { \
+	    Octave_object rhs (val); \
+	    int quit = 0; \
+	    do_for_loop_once (id_list, rhs, quit); \
+	    if (quit) \
+	      break; \
+	  } \
       else \
 	for (int i = 0; i < steps; i++) \
 	  { \
 	    tree_constant rhs (val); \
 	    int quit = 0; \
-	    do_for_loop_once (rhs, quit); \
+	    do_for_loop_once (tmp_id, rhs, quit); \
 	    if (quit) \
 	      break; \
 	  } \
     } \
   while (0)
 
 void
 tree_for_command::eval (void)
@@ -330,31 +373,46 @@ tree_for_command::eval (void)
   tree_constant tmp_expr = expr->eval (0);
 
   if (error_state || tmp_expr.is_undefined ())
     {
       eval_error ();
       return;
     }
 
+  tree_index_expression *tmp_id = id;
+  if (id_list && id_list->length () == 1)
+    tmp_id = id_list->front ();
+
   tree_identifier *ident = 0;
-  if (! id->arg_list ())
+  if (tmp_id && ! tmp_id->arg_list ())
     {
-      tree_indirect_ref *idr = id->ident ();
+      tree_indirect_ref *idr = tmp_id->ident ();
       if (idr->is_identifier_only ())
 	ident = idr->ident ();
     }
 
+  if (id_list && ! ident && ! tmp_expr->is_map ())
+    {
+      error ("in statement `for [X, Y] = VAL', VAL must be a structure");
+      return;
+    }
+
   if (tmp_expr.is_scalar_type ())
     {
       int quit = 0;
       if (ident)
 	do_for_loop_once (ident, tmp_expr, quit);
+      else if (id_list)
+	{
+	  Octave_object rhs (tmp_expr);
+	  do_for_loop_once (id_list, rhs, quit);
+	}
       else
-	do_for_loop_once (tmp_expr, quit);
+	do_for_loop_once (tmp_id, tmp_expr, quit);
     }
   else if (tmp_expr.is_matrix_type ())
     {
       Matrix m_tmp;
       ComplexMatrix cm_tmp;
       int nr;
       int steps;
       if (tmp_expr.is_real_matrix ())
@@ -407,26 +465,95 @@ tree_for_command::eval (void)
 
 	      int quit = 0;
 	      do_for_loop_once (ident, rhs, quit);
 
 	      if (quit)
 		break;
 	    }
 	}
+      else if (id_list)
+	{
+	  for (int i = 0; i < steps; i++)
+	    {
+	      double tmp_val = b + i * increment;
+
+	      Octave_object rhs (tmp_val);
+
+	      int quit = 0;
+	      do_for_loop_once (id_list, rhs, quit);
+
+	      if (quit)
+		break;
+	    }
+	}
       else
 	{
 	  for (int i = 0; i < steps; i++)
 	    {
 	      double tmp_val = b + i * increment;
 
 	      tree_constant rhs (tmp_val);
 
 	      int quit = 0;
-	      do_for_loop_once (rhs, quit);
+	      do_for_loop_once (tmp_id, rhs, quit);
+
+	      if (quit)
+		break;
+	    }
+	}
+    }
+  else if (tmp_expr.is_map ())
+    {
+      if (ident)
+	{
+	  Octave_map tmp_val (tmp_expr.map_value ());
+
+	  for (Pix p = tmp_val.first (); p != 0; tmp_val.next (p))
+	    {
+	      tree_constant rhs (tmp_val.contents (p));
+
+	      int quit;
+	      do_for_loop_once (ident, rhs, quit);
+
+	      if (quit)
+		break;
+	    }
+	}
+      else if (id_list)
+	{
+	  // Cycle through structure elements.  First element of
+	  // id_list is set to value and the second is set to the name
+	  // of the structure element.
+
+	  Octave_map tmp_val (tmp_expr.map_value ());
+
+	  for (Pix p = tmp_val.first (); p != 0; tmp_val.next (p))
+	    {
+	      Octave_object tmp;
+	      tmp (1) = tmp_val.key (p);
+	      tmp (0) = tmp_val.contents (p);
+
+	      int quit;
+	      do_for_loop_once (id_list, tmp, quit);
+
+	      if (quit)
+		break;
+	    }
+	}
+      else
+	{
+	  Octave_map tmp_val (tmp_expr.map_value ());
+
+	  for (Pix p = tmp_val.first (); p != 0; tmp_val.next (p))
+	    {
+	      tree_constant rhs = tmp_val.contents (p);
+
+	      int quit;
+	      do_for_loop_once (tmp_id, rhs, quit);
 
 	      if (quit)
 		break;
 	    }
 	}
     }
   else
     {
@@ -513,30 +640,31 @@ tree_unwind_protect_command::~tree_unwin
   delete cleanup_code;
 }
 
 static void
 do_unwind_protect_cleanup_code (void *ptr)
 {
   tree_statement_list *list = (tree_statement_list *) ptr;
 
-// We want to run the cleanup code without error_state being set, but
-// we need to restore its value, so that any errors encountered in
-// the first part of the unwind_protect are not completely ignored.
+  // We want to run the cleanup code without error_state being set,
+  // but we need to restore its value, so that any errors encountered
+  // in the first part of the unwind_protect are not completely
+  // ignored.
 
   unwind_protect_int (error_state);
 
   error_state = 0;
 
   if (list)
     list->eval (1);
 
-// We don't want to ignore errors that occur in the cleanup code, so
-// if an error is encountered there, leave error_state alone.
-// Otherwise, set it back to what it was before.
+  // We don't want to ignore errors that occur in the cleanup code, so
+  // if an error is encountered there, leave error_state alone.
+  // Otherwise, set it back to what it was before.
 
   if (error_state)
     discard_unwind_protect ();
   else
     run_unwind_protect ();
 }
 
 void
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -21,22 +21,25 @@ Software Foundation, 675 Mass Ave, Cambr
 
 */
 
 #if !defined (octave_tree_cmd_h)
 #define octave_tree_cmd_h 1
 
 #include <iostream.h>
 
+class Octave_object;
+
 class tree_statement_list;
 class tree_global_init_list;
 class tree_if_command_list;
 class tree_expression;
 class tree_index_expression;
 class tree_identifier;
+class tree_return_list;
 class tree_constant;
 class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
@@ -123,44 +126,61 @@ private:
 
 class
 tree_for_command : public tree_command
 {
 public:
   tree_for_command (int l = -1, int c = -1) : tree_command (l, c)
     {
       id = 0;
+      id_list = 0;
       expr = 0;
       list = 0;
     }
 
   tree_for_command (tree_index_expression *ident, tree_expression *e,
 		    tree_statement_list *lst, int l = -1, int c = -1)
     : tree_command (l, c)
       {
 	id = ident;
+	id_list = 0;
+	expr = e;
+	list = lst;
+      }
+
+  tree_for_command (tree_return_list *ident, tree_expression *e,
+		    tree_statement_list *lst, int l = -1, int c = -1)
+    : tree_command (l, c)
+      {
+	id = 0;
+	id_list = ident;
 	expr = e;
 	list = lst;
       }
 
   ~tree_for_command (void);
 
   void eval (void);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
 private:
+  void do_for_loop_once (tree_return_list *lst,
+			 const Octave_object& rhs, int& quit);
+
+  void do_for_loop_once (tree_index_expression *idx_expr,
+			 const tree_constant& rhs, int& quit);
+
   void do_for_loop_once (tree_identifier *ident,
 			 tree_constant& rhs, int& quit);
 
-  void do_for_loop_once (tree_constant& rhs, int& quit);
-
   tree_index_expression *id;	// Identifier to modify.
+  tree_return_list *id_list;	// List of identifiers to modify.
   tree_expression *expr;	// Expression to evaluate.
   tree_statement_list *list;	// List of commands to execute.
 };
 
 // If.
 
 class
 tree_if_command : public tree_command
