# HG changeset patch
# User jwe
# Date 1114655819 0
#      Thu Apr 28 02:36:59 2005 +0000
# Node ID f9aff9291d944725a6acddfa266f5d78a5e148fb
# Parent  99489e2ffbd4866a9c8e9db92309e425c4e2ca54
[project @ 2005-04-28 02:36:59 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1,10 +1,8 @@
-#define STD_OCTAVE std
-
 // Matrix manipulations.
 /*
 
 Copyright (C) 1996, 1997 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
@@ -994,17 +992,17 @@ ComplexMatrix::inverse (octave_idx_type&
 
       if (f77_exception_encountered) 
 	{
 	  (*current_liboctave_error_handler)
 	    ("unrecoverable error in zgetri");
 	  return retval;
 	}
 
-      lwork = static_cast<octave_idx_type> (STD_OCTAVE::real(z(0)));
+      lwork = static_cast<octave_idx_type> (std::real(z(0)));
       lwork = (lwork <  2 *nc ? 2*nc : lwork);
       z.resize (lwork);
       Complex *pz = z.fortran_vec ();
 
       info = 0;
 
       // Calculate the norm of the matrix, for later use.
       double anorm;
@@ -1503,22 +1501,22 @@ ComplexMatrix::determinant (octave_idx_t
 	      else 
 		{
 		  Complex d[2] = { 1., 0.};
 		  for (octave_idx_type i=0; i<nc; i++) 
 		    {
 		      if (ipvt(i) != (i+1)) d[0] = -d[0];
 		      d[0] = d[0] * atmp(i,i);
 		      if (d[0] == 0.) break;
-		      while (STD_OCTAVE::abs(d[0]) < 1.) 
+		      while (std::abs(d[0]) < 1.) 
 			{
 			  d[0] = 10. * d[0];
 			  d[1] = d[1] - 1.0;
 			}
-		      while (STD_OCTAVE::abs(d[0]) >= 10.) 
+		      while (std::abs(d[0]) >= 10.) 
 			{
 			  d[0] = 0.1 * d[0];
 			  d[1] = d[1] + 1.0;
 			}
 		    }
 		  retval = ComplexDET (d);
 		}
 	    }
@@ -1915,17 +1913,17 @@ ComplexMatrix::lssolve (const ComplexMat
 				 nrr, ps, rcond, rank,
 				 work.fortran_vec (), lwork, prwork,
 				 info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  lwork = static_cast<octave_idx_type> (STD_OCTAVE::real (work(0)));
+	  lwork = static_cast<octave_idx_type> (std::real (work(0)));
 	  work.resize (lwork);
 
 	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
 				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork,
 				     prwork, info));
 
 	  if (f77_exception_encountered)
@@ -2028,17 +2026,17 @@ ComplexMatrix::lssolve (const ComplexCol
 				 nrr, ps, rcond, rank,
 				 work.fortran_vec (), lwork, prwork,
 				 info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  lwork = static_cast<int> (STD_OCTAVE::real (work(0)));
+	  lwork = static_cast<int> (std::real (work(0)));
 	  work.resize (lwork);
 
 	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
 				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork,
 				     prwork, info));
 
 	  if (f77_exception_encountered)
@@ -2524,17 +2522,17 @@ ComplexMatrix::all_elements_are_real (vo
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       for (octave_idx_type i = 0; i < nr; i++)
 	{
-	  double ip = STD_OCTAVE::imag (elem (i, j));
+	  double ip = std::imag (elem (i, j));
 
 	  if (ip != 0.0 || lo_ieee_signbit (ip))
 	    return false;
 	}
     }
 
   return true;
 }
@@ -2548,18 +2546,18 @@ ComplexMatrix::all_integers (double& max
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       Complex val = elem (0, 0);
 
-      double r_val = STD_OCTAVE::real (val);
-      double i_val = STD_OCTAVE::imag (val);
+      double r_val = std::real (val);
+      double i_val = std::imag (val);
 
       max_val = r_val;
       min_val = r_val;
 
       if (i_val > max_val)
 	max_val = i_val;
 
       if (i_val < max_val)
@@ -2568,18 +2566,18 @@ ComplexMatrix::all_integers (double& max
   else
     return false;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
-	double r_val = STD_OCTAVE::real (val);
-	double i_val = STD_OCTAVE::imag (val);
+	double r_val = std::real (val);
+	double i_val = std::imag (val);
 
 	if (r_val > max_val)
 	  max_val = r_val;
 
 	if (i_val > max_val)
 	  max_val = i_val;
 
 	if (r_val < min_val)
@@ -2601,18 +2599,18 @@ ComplexMatrix::too_large_for_float (void
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
-	double r_val = STD_OCTAVE::real (val);
-	double i_val = STD_OCTAVE::imag (val);
+	double r_val = std::real (val);
+	double i_val = std::imag (val);
 
 	if (r_val > FLT_MAX
 	    || i_val > FLT_MAX
 	    || r_val < FLT_MIN
 	    || i_val < FLT_MIN)
 	  return true;
       }
 
@@ -2679,17 +2677,17 @@ Matrix ComplexMatrix::abs (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   Matrix retval (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
-      retval (i, j) = STD_OCTAVE::abs (elem (i, j));
+      retval (i, j) = std::abs (elem (i, j));
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::diag (void) const
 {
   return diag (0);
@@ -2740,17 +2738,17 @@ bool
 ComplexMatrix::row_is_real_only (octave_idx_type i) const
 {
   bool retval = true;
 
   octave_idx_type nc = columns ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
-      if (STD_OCTAVE::imag (elem (i, j)) != 0.0)
+      if (std::imag (elem (i, j)) != 0.0)
 	{
 	  retval = false;
 	  break;
 	}
     }
 
   return retval;	      
 }
@@ -2759,17 +2757,17 @@ bool
 ComplexMatrix::column_is_real_only (octave_idx_type j) const
 {
   bool retval = true;
 
   octave_idx_type nr = rows ();
 
   for (octave_idx_type i = 0; i < nr; i++)
     {
-      if (STD_OCTAVE::imag (elem (i, j)) != 0.0)
+      if (std::imag (elem (i, j)) != 0.0)
 	{
 	  retval = false;
 	  break;
 	}
     }
 
   return retval;	      
 }
@@ -2805,29 +2803,29 @@ ComplexMatrix::row_min (Array<octave_idx
 	  double abs_min = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_min = elem (i, idx_j);
 
 	      if (! octave_is_NaN_or_NA (tmp_min))
 		{
-		  abs_min = real_only ? STD_OCTAVE::real (tmp_min) : STD_OCTAVE::abs (tmp_min);
+		  abs_min = real_only ? std::real (tmp_min) : std::abs (tmp_min);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      Complex tmp = elem (i, j);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = real_only ? STD_OCTAVE::real (tmp) : STD_OCTAVE::abs (tmp);
+	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp < abs_min)
 		{
 		  idx_j = j;
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
@@ -2879,29 +2877,29 @@ ComplexMatrix::row_max (Array<octave_idx
 	  double abs_max = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_max = elem (i, idx_j);
 
 	      if (! octave_is_NaN_or_NA (tmp_max))
 		{
-		  abs_max = real_only ? STD_OCTAVE::real (tmp_max) : STD_OCTAVE::abs (tmp_max);
+		  abs_max = real_only ? std::real (tmp_max) : std::abs (tmp_max);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      Complex tmp = elem (i, j);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = real_only ? STD_OCTAVE::real (tmp) : STD_OCTAVE::abs (tmp);
+	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp > abs_max)
 		{
 		  idx_j = j;
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
@@ -2953,29 +2951,29 @@ ComplexMatrix::column_min (Array<octave_
 	  double abs_min = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_min = elem (idx_i, j);
 
 	      if (! octave_is_NaN_or_NA (tmp_min))
 		{
-		  abs_min = real_only ? STD_OCTAVE::real (tmp_min) : STD_OCTAVE::abs (tmp_min);
+		  abs_min = real_only ? std::real (tmp_min) : std::abs (tmp_min);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      Complex tmp = elem (i, j);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = real_only ? STD_OCTAVE::real (tmp) : STD_OCTAVE::abs (tmp);
+	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp < abs_min)
 		{
 		  idx_i = i;
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
@@ -3027,29 +3025,29 @@ ComplexMatrix::column_max (Array<octave_
 	  double abs_max = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_max = elem (idx_i, j);
 
 	      if (! octave_is_NaN_or_NA (tmp_max))
 		{
-		  abs_max = real_only ? STD_OCTAVE::real (tmp_max) : STD_OCTAVE::abs (tmp_max);
+		  abs_max = real_only ? std::real (tmp_max) : std::abs (tmp_max);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      Complex tmp = elem (i, j);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = real_only ? STD_OCTAVE::real (tmp) : STD_OCTAVE::abs (tmp);
+	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp > abs_max)
 		{
 		  idx_i = i;
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
@@ -3308,27 +3306,27 @@ min (const ComplexMatrix& a, const Compl
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (octave_idx_type i = 0; i < nr; i++)
 	{
 	  OCTAVE_QUIT;
-	  if (STD_OCTAVE::imag (a (i, j)) != 0.0 || STD_OCTAVE::imag (b (i, j)) != 0.0)
+	  if (std::imag (a (i, j)) != 0.0 || std::imag (b (i, j)) != 0.0)
 	    {
 	      columns_are_real_only = 0;
 	      break;
 	    }
 	}
 
       if (columns_are_real_only)
 	{
 	  for (octave_idx_type i = 0; i < nr; i++)
-	    result (i, j) = xmin (STD_OCTAVE::real (a (i, j)), STD_OCTAVE::real (b (i, j)));
+	    result (i, j) = xmin (std::real (a (i, j)), std::real (b (i, j)));
 	}
       else
 	{
 	  for (octave_idx_type i = 0; i < nr; i++)
 	    {
 	      OCTAVE_QUIT;
 	      result (i, j) = xmin (a (i, j), b (i, j));
 	    }
@@ -3396,50 +3394,50 @@ max (const ComplexMatrix& a, const Compl
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (octave_idx_type i = 0; i < nr; i++)
 	{
 	  OCTAVE_QUIT;
-	  if (STD_OCTAVE::imag (a (i, j)) != 0.0 || STD_OCTAVE::imag (b (i, j)) != 0.0)
+	  if (std::imag (a (i, j)) != 0.0 || std::imag (b (i, j)) != 0.0)
 	    {
 	      columns_are_real_only = 0;
 	      break;
 	    }
 	}
 
       if (columns_are_real_only)
 	{
 	  for (octave_idx_type i = 0; i < nr; i++)
 	    {
 	      OCTAVE_QUIT;
-	      result (i, j) = xmax (STD_OCTAVE::real (a (i, j)), STD_OCTAVE::real (b (i, j)));
+	      result (i, j) = xmax (std::real (a (i, j)), std::real (b (i, j)));
 	    }
 	}
       else
 	{
 	  for (octave_idx_type i = 0; i < nr; i++)
 	    {
 	      OCTAVE_QUIT;
 	      result (i, j) = xmax (a (i, j), b (i, j));
 	    }
 	}
     }
 
   return result;
 }
 
-MS_CMP_OPS(ComplexMatrix, STD_OCTAVE::real, Complex, STD_OCTAVE::real)
+MS_CMP_OPS(ComplexMatrix, std::real, Complex, std::real)
 MS_BOOL_OPS(ComplexMatrix, Complex, 0.0)
 
-SM_CMP_OPS(Complex, STD_OCTAVE::real, ComplexMatrix, STD_OCTAVE::real)
+SM_CMP_OPS(Complex, std::real, ComplexMatrix, std::real)
 SM_BOOL_OPS(Complex, ComplexMatrix, 0.0)
 
-MM_CMP_OPS(ComplexMatrix, STD_OCTAVE::real, ComplexMatrix, STD_OCTAVE::real)
+MM_CMP_OPS(ComplexMatrix, std::real, ComplexMatrix, std::real)
 MM_BOOL_OPS(ComplexMatrix, ComplexMatrix, 0.0)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -2193,17 +2193,17 @@ 2003-02-21  John W. Eaton  <jwe@bevo.che
 	imaginary parts.
 
 	* lo-ieee.h (lo_ieee_signbit): New macro.
 
 2003-02-18  David Bateman  <dbateman@free.fr>
 
 	* dMatrix.cc (Matrix::inverse, Matrix::determinant, Matrix::solve):
 	Use Lapack instead of Linpack.
-	* Cmatrix.cc (ComplexMatrix::inverse, ComplexMatrix::determinant,
+	* CMatrix.cc (ComplexMatrix::inverse, ComplexMatrix::determinant,
 	ComplexMatrix::solve): Likewise.
 
 	* dMatrix.cc (Matrix::determinant, Matrix::inverse): New arg,
 	calc_cond.  If 0, skip condition number calculation.
 	* CMatrix.cc (ComplexMatrix::determinant, ComplexMatrix::inverse):
 	Likewise.
 
 	* CmplxLU.cc (ComplexLU::ComplexLU): Allow non-square matrices.
