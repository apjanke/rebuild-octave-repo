# HG changeset patch
# User jwe
# Date 810458398 0
#      Thu Sep 07 07:19:58 1995 +0000
# Node ID cea4101a2f18430826d7808da100f893c71d40f1
# Parent  6d79fce68412303c9910e60ce7ff918b58198b33
[project @ 1995-09-07 07:19:58 by jwe]

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -31,32 +31,36 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include "error.h"
+#include "load-save.h"
 #include "octave.h"
 #include "sighandlers.h"
 #include "syswait.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
 // Nonzero means we can be interrupted.
 int can_interrupt = 0;
 
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   error ("%s -- stopping myself...", sig_name);
+
+  save_user_variables ();
+
   clean_up_and_exit (sig_number);
 }
 
 // I know, not really a signal handler.
 
 static void
 octave_new_handler (void)
 {
@@ -112,16 +116,41 @@ sigchld_handler (int i)
 	  cerr << "exited with status = " << hi_byte << "\n";
 	}
     }
 
   signal (SIGCHLD, sigchld_handler);
 }
 #endif
 
+#if defined (__alpha__)
+static RETSIGTYPE
+sigfpe_handler (int i)
+{
+  // Can this ever cause trouble on systems that don't forget signal
+  // handlers when they are invoked?
+
+  signal (SIGFPE, sigfpe_handler);
+
+  error ("floating point exception -- trying to continue");
+
+  if (can_interrupt)
+    {
+      jump_to_top_level ();
+      panic_impossible ();
+    }
+
+#if RETSIGTYPE == void
+  return;
+#else
+  return 0;
+#endif
+}
+#endif
+
 // Handle SIGINT by restarting the parser (see octave.cc).
 
 // XXX FIXME XXX -- it would probably be good to try to use POSIX
 // signal interface if it is available.
 
 static RETSIGTYPE
 sigint_handler (int i)
 {
@@ -191,18 +220,22 @@ install_signal_handlers (void)
 #endif
 #endif
 
 #ifdef SIGEMT
   signal (SIGEMT, generic_sig_handler);
 #endif
 
 #ifdef SIGFPE
+#if defined (__alpha__)
+  signal (SIGFPE, sigfpe_handler);
+#else
   signal (SIGFPE, generic_sig_handler);
 #endif
+#endif
 
 #ifdef SIGHUP
   signal (SIGHUP, generic_sig_handler);
 #endif
 
 #ifdef SIGILL
   signal (SIGILL, generic_sig_handler);
 #endif
