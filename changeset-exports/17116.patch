# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1375272849 -3600
#      Wed Jul 31 13:14:09 2013 +0100
# Node ID 59acfe9209dd425d412f6045efac240ac9cbfb2a
# Parent  00985134145e02ac3c14983177589a4606ab844b
Do not read alpha channel from image if output not requested.

* __magick_read__.cc (read_images): check nargout and change image
  type to its non-matte equivalent if alpha channel is not requested
  as output.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -142,17 +142,18 @@ read_indexed_images (std::vector<Magick:
 
 // This function is highly repetitive, a bunch of for loops that are
 // very similar to account for different image types. They are different
 // enough that trying to reduce the copy and paste would decrease its
 // readability too much.
 template <class T>
 octave_value_list
 read_images (std::vector<Magick::Image>& imvec,
-             const Array<octave_idx_type>& frameidx)
+             const Array<octave_idx_type>& frameidx,
+             const octave_idx_type nargout)
 {
   typedef typename T::element_type P;
 
   octave_value_list retval (3, Matrix ());
 
   const octave_idx_type nRows   = imvec[0].baseRows ();
   const octave_idx_type nCols   = imvec[0].baseColumns ();
   const octave_idx_type nFrames = frameidx.length ();
@@ -185,16 +186,50 @@ read_images (std::vector<Magick::Image>&
   // color). Its type will be bilevel since there is no BilevelMatte. The
   // only way to check for this seems to be by checking matte ().
   Magick::ImageType type = imvec[0].type ();
   if (type == Magick::BilevelType && imvec[0].matte ())
     {
       type = Magick::GrayscaleMatteType;
     }
 
+  // If the alpha channel was not requested, treat images as if
+  // it doesn't exist.
+  if (nargout < 3)
+    {
+      switch (type)
+        {
+        case Magick::GrayscaleMatteType:
+          {
+            type = Magick::GrayscaleType;
+            break;
+          }
+        case Magick::PaletteMatteType:
+          {
+            type = Magick::PaletteType;
+            break;
+          }
+        case Magick::TrueColorMatteType:
+          {
+            type = Magick::TrueColorType;
+            break;
+          }
+        case Magick::ColorSeparationMatteType:
+          {
+            type = Magick::ColorSeparationType;
+            break;
+          }
+        default:
+          {
+            // do nothing, other than silencing warnings about enumeration
+            // values not being handled in switch.
+          }
+        }
+    }
+
   switch (type)
     {
     case Magick::BilevelType:           // Monochrome bi-level image
     case Magick::GrayscaleType:         // Grayscale image
       {
         img = T (dim_vector (nRows, nCols, 1, nFrames));
         P *img_fvec = img.fortran_vec ();
 
@@ -575,29 +610,29 @@ use @code{imread}.\n\
           return output;
         }
     }
 
   else
     {
       if (depth <= 1)
         {
-          output = read_images<boolNDArray> (imvec, frameidx);
+          output = read_images<boolNDArray> (imvec, frameidx, nargout);
         }
       else if (depth <= 8)
         {
-          output = read_images<uint8NDArray> (imvec, frameidx);
+          output = read_images<uint8NDArray> (imvec, frameidx, nargout);
         }
       else if (depth <= 16)
         {
-          output = read_images<uint16NDArray> (imvec, frameidx);
+          output = read_images<uint16NDArray> (imvec, frameidx, nargout);
         }
       else if (depth <= 32)
         {
-          output = read_images<FloatNDArray> (imvec, frameidx);
+          output = read_images<FloatNDArray> (imvec, frameidx, nargout);
         }
       else
         {
           error ("imread: reading of images with %i-bit depth is not supported",
                  depth);
         }
     }
 
