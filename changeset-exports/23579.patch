# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497313448 25200
#      Mon Jun 12 17:24:08 2017 -0700
# Node ID c20a0fa91c0cc826c48a1adaf8eaca3cdb0d6e5d
# Parent  7b47b7c2d6c7386245217ce275bf2c8fa5761960
maint: Deprecate is_bool_type and replace with islogical.

* ov.h (is_bool_type): Use OCTAVE_DEPRECATED macro around function.
* ov.h (islogical): New function.


* __magick_read__.cc, besselj.cc, cellfun.cc, data.cc, find.cc, graphics.cc,
ls-mat5.cc, mex.cc, sparse.cc, typecast.cc, ov-base.h, ov-bool-mat.cc,
ov-bool-mat.h, ov-bool-sparse.h, ov-bool.h, ov-java.cc, ov.h:
Replace instances of is_bool_type with islogical.

diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -1487,17 +1487,17 @@ Use @code{imwrite} instead.
   const octave_value img = args(2);
   const Matrix cmap = args(3).xmatrix_value ("__magick_write__: invalid MAP");
 
   std::vector<Magick::Image> imvec;
 
   if (cmap.isempty ())
     {
       const octave_value alpha = options.getfield ("alpha");
-      if (img.is_bool_type ())
+      if (img.islogical ())
         encode_bool_image (imvec, img.bool_array_value ());
       else if (img.is_uint8_type ())
         encode_uint_image<uint8NDArray>  (imvec, img.uint8_array_value (),
                                           alpha.uint8_array_value ());
       else if (img.is_uint16_type ())
         encode_uint_image<uint16NDArray> (imvec, img.uint16_array_value (),
                                           alpha.uint16_array_value ());
       else if (img.is_uint32_type ())
diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -98,17 +98,17 @@ do_bessel (enum bessel_type type, const 
         rpt_error = true;
       else if (opt_arg.is_numeric_type ())
         {
           double opt_val = opt_arg.double_value ();
           if (opt_val != 0.0 && opt_val != 1.0)
             rpt_error = true;
           scaled = (opt_val == 1.0);
         }
-      else if (opt_arg.is_bool_type ())
+      else if (opt_arg.islogical ())
         scaled = opt_arg.bool_value ();
 
       if (rpt_error)
         error ("%s: OPT must be 0 (or false) or 1 (or true)", fn);
     }
 
   octave_value alpha_arg = args(0);
   octave_value x_arg = args(1);
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -136,17 +136,17 @@ try_cellfun_internal_ops (const octave_v
       for (octave_idx_type count = 0; count < k; count++)
         result(count) = f_args.elem (count).isempty ();
       retval(0) = result;
     }
   else if (name == "islogical")
     {
       BNDA result (f_args.dims ());
       for (octave_idx_type count= 0; count < k; count++)
-        result(count) = f_args.elem (count).is_bool_type ();
+        result(count) = f_args.elem (count).islogical ();
       retval(0) = result;
     }
   else if (name == "isnumeric")
     {
       BNDA result (f_args.dims ());
       for (octave_idx_type count= 0; count < k; count++)
         result(count) = f_args.elem (count).is_numeric_type ();
       retval(0) = result;
@@ -1777,17 +1777,17 @@ num2cell ([1,2;3,4],1)
   octave_value retval;
 
   octave_value array = args(0);
 
   Array<int> dimv;
   if (nargin > 1)
     dimv = args(1).int_vector_value (true);
 
-  if (array.is_bool_type ())
+  if (array.islogical ())
     retval = do_num2cell (array.bool_array_value (), dimv);
   else if (array.is_char_matrix ())
     retval = do_num2cell (array.char_array_value (), dimv);
   else if (array.is_numeric_type ())
     {
       if (array.is_integer_type ())
         {
           if (array.is_int8_type ())
@@ -2266,17 +2266,17 @@ slicing is done along the first non-sing
 
   if (lb.numel () != ub.numel ())
     error ("cellslices: the lengths of LB and UB must match");
 
   Cell retcell;
   if (! x.is_sparse_type () && x.is_matrix_type ())
     {
       // specialize for some dense arrays.
-      if (x.is_bool_type ())
+      if (x.islogical ())
         retcell = do_cellslices_nda (x.bool_array_value (),
                                      lb, ub, dim);
       else if (x.is_char_matrix ())
         retcell = do_cellslices_nda (x.char_array_value (),
                                      lb, ub, dim);
       else if (x.is_integer_type ())
         {
           if (x.is_int8_type ())
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3103,17 +3103,17 @@ DEFUN (islogical, args, ,
 @deftypefnx {} {} isbool (@var{x})
 Return true if @var{x} is a logical object.
 @seealso{isfloat, isinteger, ischar, isnumeric, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_bool_type ());
+  return ovl (args(0).islogical ());
 }
 
 DEFALIAS (isbool, islogical);
 
 /*
 %!assert (islogical (true), true)
 %!assert (islogical (false), true)
 %!assert (islogical ([true, false]), true)
@@ -6989,17 +6989,17 @@ Undocumented internal function.
         {
           if (vals.is_complex_type ())
             retval = do_accumarray_sum (idx,
                                         vals.float_complex_array_value (),
                                         n);
           else
             retval = do_accumarray_sum (idx, vals.float_array_value (), n);
         }
-      else if (vals.is_numeric_type () || vals.is_bool_type ())
+      else if (vals.is_numeric_type () || vals.islogical ())
         {
           if (vals.is_complex_type ())
             retval = do_accumarray_sum (idx,
                                         vals.complex_array_value (),
                                         n);
           else
             retval = do_accumarray_sum (idx, vals.array_value (), n);
         }
@@ -7210,17 +7210,17 @@ Undocumented internal function.
           if (vals.is_complex_type ())
             retval = do_accumdim_sum (idx,
                                       vals.float_complex_array_value (),
                                       dim, n);
           else
             retval = do_accumdim_sum (idx, vals.float_array_value (),
                                       dim, n);
         }
-      else if (vals.is_numeric_type () || vals.is_bool_type ())
+      else if (vals.is_numeric_type () || vals.islogical ())
         {
           if (vals.is_complex_type ())
             retval = do_accumdim_sum (idx, vals.complex_array_value (),
                                       dim, n);
           else
             retval = do_accumdim_sum (idx, vals.array_value (), dim, n);
         }
       else
@@ -7326,17 +7326,17 @@ result(! mask) = fval(! mask);
 @var{mask} can also be arbitrary numeric type, in which case it is first
 converted to logical.
 @seealso{logical, diff}
 @end deftypefn */)
 {
   if (args.length () != 3)
     print_usage ();
 
-  if (! (args(0).is_bool_type () || args(0).is_numeric_type ()))
+  if (! (args(0).islogical () || args(0).is_numeric_type ()))
     error ("merge: first argument must be logical or numeric");
 
   octave_value retval;
 
   octave_value mask_val = args(0);
 
   if (mask_val.is_scalar_type ())
     retval = (mask_val.is_true () ? args(1) : args(2));
@@ -7562,17 +7562,17 @@ an empty matrix is returned.
 @seealso{sort, merge}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
-  if (! (args(0).is_numeric_type () || args(0).is_bool_type ()))
+  if (! (args(0).is_numeric_type () || args(0).islogical ()))
     error ("diff: X must be numeric or logical");
 
   int dim = -1;
   octave_idx_type order = 1;
   if (nargin > 1)
     {
       if (args(1).is_scalar_type ())
         order = args(1).idx_type_value (true, false);
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -420,17 +420,17 @@ b = sparse (i, j, v, sz(1), sz(2));
       else
         error ("find: DIRECTION must be \"first\" or \"last\"");
     }
 
   octave_value_list retval;
 
   octave_value arg = args(0);
 
-  if (arg.is_bool_type ())
+  if (arg.islogical ())
     {
       if (arg.is_sparse_type ())
         {
           SparseBoolMatrix v = arg.sparse_bool_matrix_value ();
 
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction);
         }
       else if (nargout <= 1 && n_to_find == -1 && direction == 1)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -966,17 +966,17 @@ convert_cdata (const base_properties& pr
   if (cdata.is_uint8_type ())
     CONVERT_CDATA_1 (uint8NDArray, uint8_, false);
   else if (cdata.is_uint16_type ())
     CONVERT_CDATA_1 (uint16NDArray, uint16_, false);
   else if (cdata.is_double_type ())
     CONVERT_CDATA_1 (NDArray, , true);
   else if (cdata.is_single_type ())
     CONVERT_CDATA_1 (FloatNDArray, float_, true);
-  else if (cdata.is_bool_type ())
+  else if (cdata.islogical ())
     CONVERT_CDATA_1 (boolNDArray, bool_, false);
   else
     {
       // Don't throw an error; leads to an incomplete FLTK object (bug #46933).
       warning ("unsupported type for cdata (= %s).  "
                "Valid types are uint8, uint16, double, single, and bool.",
                cdata.type_name ().c_str ());
       a = NDArray (dv, 0);  // return 0 instead
@@ -1538,17 +1538,17 @@ array_property::is_equal (const octave_v
                 for (int i = 0; flag && i < data.numel (); i++)         \
                   if (d1[i] != d2[i])                                   \
                     flag = false;                                       \
                                                                         \
                 return flag;                                            \
               }                                                         \
           }
 
-          if (data.is_double_type () || data.is_bool_type ())
+          if (data.is_double_type () || data.islogical ())
             CHECK_ARRAY_EQUAL (double, , NDArray)
           else if (data.is_single_type ())
             CHECK_ARRAY_EQUAL (float, float_, FloatNDArray)
           else if (data.is_int8_type ())
             CHECK_ARRAY_EQUAL (octave_int8, int8_, int8NDArray)
           else if (data.is_int16_type ())
             CHECK_ARRAY_EQUAL (octave_int16, int16_, int16NDArray)
           else if (data.is_int32_type ())
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -2120,17 +2120,17 @@ save_mat5_element_length (const octave_v
   else if (cname == "uint8")
     INT_LEN (tc.uint8_array_value ().numel (), 1)
   else if (cname == "uint16")
     INT_LEN (tc.uint16_array_value ().numel (), 2)
   else if (cname == "uint32")
     INT_LEN (tc.uint32_array_value ().numel (), 4)
   else if (cname == "uint64")
     INT_LEN (tc.uint64_array_value ().numel (), 8)
-  else if (tc.is_bool_type ())
+  else if (tc.islogical ())
     INT_LEN (tc.bool_array_value ().numel (), 1)
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ())
     {
       if (tc.is_single_type ())
         {
           const FloatNDArray m = tc.float_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
@@ -2332,17 +2332,17 @@ save_mat5_binary_element (std::ostream& 
 #endif
 
   write_mat5_tag (os, miMATRIX, save_mat5_element_length
                   (tc, name, save_as_floats, mat7_format));
 
   // array flags subelement
   write_mat5_tag (os, miUINT32, 8);
 
-  if (tc.is_bool_type ())
+  if (tc.islogical ())
     flags |= 0x0200;
 
   if (mark_global)
     flags |= 0x0400;
 
   if (tc.is_complex_scalar () || tc.is_complex_matrix ())
     flags |= 0x0800;
 
@@ -2351,17 +2351,17 @@ save_mat5_binary_element (std::ostream& 
   else if (cname == "int8")
     flags |= MAT_FILE_INT8_CLASS;
   else if (cname == "int16")
     flags |= MAT_FILE_INT16_CLASS;
   else if (cname == "int32")
     flags |= MAT_FILE_INT32_CLASS;
   else if (cname == "int64")
     flags |= MAT_FILE_INT64_CLASS;
-  else if (cname == "uint8" || tc.is_bool_type ())
+  else if (cname == "uint8" || tc.islogical ())
     flags |= MAT_FILE_UINT8_CLASS;
   else if (cname == "uint16")
     flags |= MAT_FILE_UINT16_CLASS;
   else if (cname == "uint32")
     flags |= MAT_FILE_UINT32_CLASS;
   else if (cname == "uint64")
     flags |= MAT_FILE_UINT64_CLASS;
   else if (tc.is_sparse_type ())
@@ -2533,17 +2533,17 @@ save_mat5_binary_element (std::ostream& 
       write_mat5_integer_data (os, m.fortran_vec (), 4, m.numel ());
     }
   else if (cname == "uint64")
     {
       uint64NDArray m = tc.uint64_array_value ();
 
       write_mat5_integer_data (os, m.fortran_vec (), 8, m.numel ());
     }
-  else if (tc.is_bool_type ())
+  else if (tc.islogical ())
     {
       uint8NDArray m (tc.bool_array_value ());
 
       write_mat5_integer_data (os, m.fortran_vec (), 1, m.numel ());
     }
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ())
     {
       if (tc.is_single_type ())
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -227,17 +227,17 @@ public:
   int is_int16 (void) const { return val.is_int16_type (); }
 
   int is_int32 (void) const { return val.is_int32_type (); }
 
   int is_int64 (void) const { return val.is_int64_type (); }
 
   int is_int8 (void) const { return val.is_int8_type (); }
 
-  int is_logical (void) const { return val.is_bool_type (); }
+  int is_logical (void) const { return val.islogical (); }
 
   int is_numeric (void) const { return val.is_numeric_type (); }
 
   int is_single (void) const { return val.is_single_type (); }
 
   int is_sparse (void) const { return val.is_sparse_type (); }
 
   int is_struct (void) const { return val.is_map (); }
@@ -390,17 +390,17 @@ public:
   {
     if (val.is_sparse_type ())
       {
         // For sparse arrays, return the first non-zero value.
         void *data = val.mex_get_data ();
         if (data == nullptr)
           return 0.0;
 
-        if (val.is_bool_type ())
+        if (val.islogical ())
           return *static_cast<bool *> (data);
         else if (val.is_real_type ())
           return *static_cast<double *> (data);
         else  // Complex type, only return real part
           return *static_cast<double *> (data);
       }
     else
       return val.scalar_value (true);
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -132,17 +132,17 @@ Compressed Column Sparse (rows = 3, cols
   // Temporarily disable sparse_auto_mutate if set (it's obsolete anyway).
   octave::unwind_protect frame;
   frame.protect_var (Vsparse_auto_mutate);
   Vsparse_auto_mutate = false;
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
-      if (arg.is_bool_type ())
+      if (arg.islogical ())
         retval = arg.sparse_bool_matrix_value ();
       else if (arg.is_complex_type ())
         retval = arg.sparse_complex_matrix_value ();
       else if (arg.is_numeric_type ())
         retval = arg.sparse_matrix_value ();
       else
         err_wrong_type_arg ("sparse", arg);
     }
@@ -192,17 +192,17 @@ Compressed Column Sparse (rows = 3, cols
 
       int k = 0;    // index we're checking when index_vector throws
       try
         {
           idx_vector i = args(0).index_vector ();
           k = 1;
           idx_vector j = args(1).index_vector ();
 
-          if (args(2).is_bool_type ())
+          if (args(2).islogical ())
             retval = SparseBoolMatrix (args(2).bool_array_value (), i,j,
                                        m, n, summation, nzmax);
           else if (args(2).is_complex_type ())
             retval = SparseComplexMatrix (args(2).complex_array_value(),
                                           i, j, m, n, summation, nzmax);
           else if (args(2).is_numeric_type ())
             retval = SparseMatrix (args(2).array_value (), i, j,
                                    m, n, summation, nzmax);
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -145,17 +145,17 @@ typecast (@var{x}, "uint8")
   octave::unwind_protect frame;
 
   const void *data = nullptr;
   octave_idx_type byte_size = 0;
   dim_vector old_dims;
 
   octave_value array = args(0);
 
-  if (array.is_bool_type ())
+  if (array.islogical ())
     get_data_and_bytesize (array.bool_array_value (), data, byte_size,
                            old_dims, frame);
   else if (array.is_string ())
     get_data_and_bytesize (array.char_array_value (), data, byte_size,
                            old_dims, frame);
   else if (array.is_integer_type ())
     {
       if (array.is_int8_type ())
@@ -350,17 +350,17 @@ bit 1, etc.
 The result is a row vector if @var{x} is a row vector, otherwise it is a
 column vector.
 @seealso{bitunpack, typecast}
 @end deftypefn */)
 {
   if (args.length () != 2)
     print_usage ();
 
-  if (! args(0).is_bool_type ())
+  if (! args(0).islogical ())
     error ("bitpack: X must be a logical array");
 
   octave_value retval;
 
   boolNDArray bitp = args(0).bool_array_value ();
 
   std::string numclass = args(1).string_value ();
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -404,17 +404,17 @@ public:
   virtual bool is_uint8_type (void) const { return false; }
 
   virtual bool is_uint16_type (void) const { return false; }
 
   virtual bool is_uint32_type (void) const { return false; }
 
   virtual bool is_uint64_type (void) const { return false; }
 
-  virtual bool is_bool_type (void) const { return false; }
+  virtual bool islogical (void) const { return false; }
 
   virtual bool is_integer_type (void) const { return false; }
 
   virtual bool is_real_type (void) const { return false; }
 
   virtual bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -595,17 +595,17 @@ Compatibility Note: Octave accepts compl
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value retval;
 
   octave_value arg = args(0);
 
-  if (arg.is_bool_type ())
+  if (arg.islogical ())
     retval = arg;
   else if (arg.is_numeric_type ())
     {
       if (arg.is_sparse_type ())
         retval = arg.sparse_bool_matrix_value ();
       else if (arg.is_scalar_type ())
         retval = arg.bool_value ();
       else
diff --git a/libinterp/octave-value/ov-bool-mat.h b/libinterp/octave-value/ov-bool-mat.h
--- a/libinterp/octave-value/ov-bool-mat.h
+++ b/libinterp/octave-value/ov-bool-mat.h
@@ -91,17 +91,17 @@ public:
   {
     return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix));
   }
 
   builtin_type_t builtin_type (void) const { return btyp_bool; }
 
   bool is_bool_matrix (void) const { return true; }
 
-  bool is_bool_type (void) const { return true; }
+  bool islogical (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return false; }
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
diff --git a/libinterp/octave-value/ov-bool-sparse.h b/libinterp/octave-value/ov-bool-sparse.h
--- a/libinterp/octave-value/ov-bool-sparse.h
+++ b/libinterp/octave-value/ov-bool-sparse.h
@@ -89,17 +89,17 @@ public:
   {
     return idx_vector (matrix);
   }
 
   builtin_type_t builtin_type (void) const { return btyp_bool; }
 
   bool is_bool_matrix (void) const { return true; }
 
-  bool is_bool_type (void) const { return true; }
+  bool islogical (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return false; }
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -74,17 +74,17 @@ public:
   idx_vector index_vector (bool /* require_integers */ = false) const { return idx_vector (scalar); }
 
   builtin_type_t builtin_type (void) const { return btyp_bool; }
 
   bool is_real_scalar (void) const { return true; }
 
   bool is_bool_scalar (void) const { return true; }
 
-  bool is_bool_type (void) const { return true; }
+  bool islogical (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_true (void) const { return scalar; }
 
   int8NDArray
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1538,17 +1538,17 @@ unbox (JNIEnv *jni_env, const octave_val
     } \
   while (0)
 
       // Note that we do NOT handle char here because they are unboxed
       // into a String[], not into a char array
 
       if (val.is_double_type ())
         UNBOX_PRIMITIVE_ARRAY ( , , jdouble,  Double);
-      else if (val.is_bool_type ())
+      else if (val.islogical ())
         UNBOX_PRIMITIVE_ARRAY (bool_, bool, jboolean, Boolean);
       else if (val.is_float_type ())
         UNBOX_PRIMITIVE_ARRAY (float_, Float, jfloat, Float);
       else if (val.is_int8_type ())
         UNBOX_PRIMITIVE_ARRAY (int8_, int8, jbyte, Byte);
       else if (val.is_uint8_type ())
         UNBOX_PRIMITIVE_ARRAY (uint8_, uint8, jbyte, Byte);
       else if (val.is_int16_type ())
@@ -1580,17 +1580,17 @@ unbox (JNIEnv *jni_env, const octave_val
       const jmethodID mid = jni_env->GetMethodID (dcls, "<init>", JAVA_CON); \
       jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (dcls, fid)); \
       jobj = jni_env->NewObject (dcls, mid, ov); \
      } \
    while (0)
 
       if (val.is_double_type ())
         UNBOX_PRIMITIVE_SCALAR (double, double, "java/lang/Double", "(D)V");
-      else if (val.is_bool_type ())
+      else if (val.islogical ())
         UNBOX_PRIMITIVE_SCALAR (bool, bool, "java/lang/Boolean", "(Z)V");
       else if (val.is_float_type ())
         UNBOX_PRIMITIVE_SCALAR (float, float, "java/lang/Float", "(F)V");
       else if (val.is_int8_type ())
         UNBOX_PRIMITIVE_SCALAR (int8_t, int8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_uint8_type ())
         UNBOX_PRIMITIVE_SCALAR (uint8_t, uint8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_int16_type ())
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -655,18 +655,22 @@ public:
   bool is_uint32_type (void) const
   { return rep->is_uint32_type (); }
 
   bool is_uint64_type (void) const
   { return rep->is_uint64_type (); }
 
   // Other type stuff.
 
+  bool islogical (void) const
+  { return rep->islogical (); }
+
+  OCTAVE_DEPRECATED ("use 'islogical' instead")
   bool is_bool_type (void) const
-  { return rep->is_bool_type (); }
+  { return rep->islogical (); }
 
   bool is_integer_type (void) const
   { return rep->is_integer_type (); }
 
   bool is_real_type (void) const
   { return rep->is_real_type (); }
 
   bool is_complex_type (void) const
