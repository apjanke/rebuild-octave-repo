# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365271318 14400
#      Sat Apr 06 14:01:58 2013 -0400
# Node ID 6cd66a5a76e835faf3712c78d38cae44d2b93f74
# Parent  7a2ee6ea7800da6f1d98b72eb2c27b74eb437149
undo unintended changes in changeset 302157614308

diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -51,16 +51,17 @@ workspace_model::workspace_model(QObject
 workspace_model::~workspace_model()
 {
   delete _rootItem;
 }
 
 void
 workspace_model::request_update_workspace ()
 {
+  octave_link::post_event (this, &workspace_model::update_workspace_callback);
 }
 
 QModelIndex
 workspace_model::index(int row, int column, const QModelIndex &p) const
 {
   if (!hasIndex(row, column, p))
     return QModelIndex();
 
@@ -162,17 +163,16 @@ workspace_model::data(const QModelIndex 
   if (role != Qt::DisplayRole)
     return QVariant();
 
   tree_item *item = static_cast<tree_item*>(idx.internalPointer());
 
   return item->data(idx.column());
 }
 
-#if 0
 void
 workspace_model::update_workspace_callback (void)
 {
   std::list < symbol_table::symbol_record > symbolTable = symbol_table::all_variables ();
 
   _symbol_information.clear ();
   for (std::list < symbol_table::symbol_record > ::iterator iterator = symbolTable.begin ();
        iterator != symbolTable.end (); iterator++)
@@ -208,9 +208,8 @@ workspace_model::update_workspace_callba
 
         default:
           break;
         }
     }
 
   endResetModel();
 }
-#endif
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -126,16 +126,18 @@ class workspace_model
                      const QModelIndex &parent = QModelIndex ()) const;
   QModelIndex parent (const QModelIndex &index) const;
   int rowCount (const QModelIndex &parent = QModelIndex ()) const;
   int columnCount (const QModelIndex &parent = QModelIndex ()) const;
 
   void insert_top_level_item (int at, tree_item *treeItem);
   tree_item *top_level_item (int at);
 
+  void update_workspace_callback (void);
+
 public slots:
   void request_update_workspace ();
 
 signals:
   void model_changed ();
 
 private:
 
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -109,16 +109,18 @@ workspace_view::handle_visibility_change
 {
   if (visible)
     emit active_changed (true);
 }
 
 void
 workspace_view::model_changed ()
 {
+  _workspace_model->update_workspace_callback ();
+
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
   // because the view itself determines (based on the model) whether it
   // is appropriate to collapse or expand items.
   //
   // Now, the logic requires that we update our model item by item, which
   // would make it work correctly, but this is extremely slow and scales
   // very bad (O(n^2)). That's why we throw away our model and rebuild it
