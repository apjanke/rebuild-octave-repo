# HG changeset patch
# User jwe
# Date 956478189 0
#      Sun Apr 23 08:23:09 2000 +0000
# Node ID 1d8d6429396a09b2c46fe312634faece01044278
# Parent  2dc265765850d14f7288d3f1bb7cb2869bc18de3
[project @ 2000-04-23 08:23:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2000-04-23  etienne grossmann <etienne@anonimo.isr.ist.utl.pt>
+
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::eval_error):
+	New args x and y, for dimension mismatch info.
+	Change callers where appropriate.
+	(tm_const::init): Report mismatched column dimensions.
+
 2000-04-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sysdep.cc (kbhit): Also clear cin if at EOF.
 
 2000-04-11  Joao Cardoso <jcardoso@inescn.pt>
 
 	* sysdep.cc (kbhit): New arg, wait.
 	(raw_mode): Ditto.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -98,17 +98,18 @@ private:
     void init (const tree_argument_list&);
 
   private:
 
     tm_row_const_rep (const tm_row_const_rep&);
 
     tm_row_const_rep& operator = (const tm_row_const_rep&);
 
-    void eval_error (const char *msg, int l, int c) const;
+    void eval_error (const char *msg, int l, int c,
+		     int x = -1, int y = -1) const;
 
     void eval_warning (const char *msg, int l, int c) const;
   };
 
 public:
 
   tm_row_const (void)
     : rep (0) { }
@@ -208,17 +209,17 @@ tm_row_const::tm_row_const_rep::init (co
 		{
 		  first_elem = false;
 
 		  nr = this_elt_nr;
 		}
 	      else if (this_elt_nr != nr)
 		{
 		  eval_error ("number of rows must match",
-			      elt->line (), elt->column ());
+			      elt->line (), elt->column (), this_elt_nr, nr);
 		  break;
 		}
 
 	      nc += this_elt_nc;
 
 	      append (tmp);
 	    }
 
@@ -233,22 +234,32 @@ tm_row_const::tm_row_const_rep::init (co
 	}
     }
 
   ok = ! error_state;
 }
 
 void
 tm_row_const::tm_row_const_rep::eval_error (const char *msg, int l,
-					    int c) const
+					    int c, int x, int y) const
 {
   if (l == -1 && c == -1)
-    ::error ("%s", msg);
+    {
+      if (x == -1 || y == -1)
+	::error ("%s", msg);
+      else
+	::error ("%s (%d != %d)", msg, x, y);
+    }
   else
-    ::error ("%s near line %d, column %d", msg, l, c);
+    {
+      if (x == -1 || y == -1)
+	::error ("%s near line %d, column %d", msg, l, c);
+      else
+	::error ("%s (%d != %d) near line %d, column %d", msg, x, y, l, c);
+    }
 }
 
 void
 tm_row_const::tm_row_const_rep::eval_warning (const char *msg, int l,
 					      int c) const
 {
   if (l == -1 && c == -1)
     ::warning ("%s", msg);
@@ -375,17 +386,18 @@ tm_const::init (const tree_matrix& tm)
 		}
 	      else if (all_str)
 		{
 		  if (this_elt_nc > nc)
 		    nc = this_elt_nc;
 		}
 	      else if (this_elt_nc != nc)
 		{
-		  ::error ("number of columns must match");
+		  ::error ("number of columns must match (%d != %d)",
+			   this_elt_nc, nc);
 		  break;
 		}
 
 	      nr += this_elt_nr;
 	    }
 	}
     }
 
