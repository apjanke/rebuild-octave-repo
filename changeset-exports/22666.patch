# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477416013 25200
#      Tue Oct 25 10:20:13 2016 -0700
# Node ID 68d5c4759783248569e7f0dfb533181606832be1
# Parent  4ea5b0c3b10ffe4ace33e5a4a182538579304d66
dlmread: Return correct number of columns when line ends with separator (bug #42025).

* dlmread.cc (Fdlmread): Initialize rmax to 32 so that output matrix is not
constantly resized for small datasets.  Detect separator followed by EOL
and break out of while loop over columns.  When re-sizing matrix, maintain
rmax as a power of 2 which may be more efficient for underlying heap allocation
routines.  Use std::max to maintain cmax at the largest value seen.
Adjust BIST tests to pass for new behavior.

diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -267,20 +267,21 @@ such as text, are also replaced by the @
       if (r0 < 0 || c0 < 0)
         error ("dlmread: left & top must be positive");
     }
 
   octave_idx_type i = 0;
   octave_idx_type j = 0;
   octave_idx_type r = 1;
   octave_idx_type c = 1;
-  octave_idx_type rmax = 0;
+  // Start with a reasonable size to avoid constant resizing of matrix.
+  octave_idx_type rmax = 32;
   octave_idx_type cmax = 0;
 
-  Matrix rdata;
+  Matrix rdata (rmax, cmax, empty_value);
   ComplexMatrix cdata;
 
   bool iscmplx = false;
   bool sep_is_wspace = (sep.find_first_of (" \t") != std::string::npos);
   bool auto_sep_is_wspace = false;
 
   std::string line;
 
@@ -327,19 +328,19 @@ such as text, are also replaced by the @
 
                 default:
                   sep = ch;
                   break;
                 }
             }
         }
 
+      // Estimate the number of columns from first line of data.
       if (cmax == 0)
         {
-          // Try to estimate the number of columns.
           size_t pos1, pos2;
           if (auto_sep_is_wspace)
             pos1 = line.find_first_not_of (" \t");
           else
             pos1 = 0;
 
           do
             {
@@ -348,22 +349,26 @@ such as text, are also replaced by the @
               if (auto_sep_is_wspace && pos2 != std::string::npos)
                 {
                   // Treat consecutive separators as one.
                   pos2 = line.find_first_not_of (sep, pos2);
                   if (pos2 != std::string::npos)
                     pos2 -= 1;
                 }
 
-              cmax++;
+              // Separator followed by EOL doesn't generate extra column
+              if (pos2 != std::string::npos)
+                cmax++;
 
               pos1 = pos2 + 1;
             }
           while (pos2 != std::string::npos);
 
+          // FIXME: Should always be the case that iscmplx == false.
+          //        Flag is initialized that way and no data has been read.
           if (iscmplx)
             cdata.resize (rmax, cmax, empty_value);
           else
             rdata.resize (rmax, cmax, empty_value);
         }
 
       r = (r > i + 1 ? r : i + 1);
       j = 0;
@@ -386,22 +391,26 @@ such as text, are also replaced by the @
               // Treat consecutive separators as one.
               pos2 = line.find_first_not_of (sep, pos2);
               if (pos2 != std::string::npos)
                 pos2 -= 1;
               else
                 pos2 = line.length () - 1;
             }
 
+          // Separator followed by EOL doesn't generate extra column
+          if (pos2 == std::string::npos && str.empty ())
+            break;
+
           c = (c > j + 1 ? c : j + 1);
           if (r > rmax || c > cmax)
             {
               // Use resize_and_fill for the case of unequal length rows.
-              rmax = 2*r;
-              cmax = c;
+              rmax = 2 * std::max (r-1, 1);  // keep rmax a power of 2
+              cmax = std::max (c, cmax);
               if (iscmplx)
                 cdata.resize (rmax, cmax, empty_value);
               else
                 rdata.resize (rmax, cmax, empty_value);
             }
 
           tmp_stream.str (str);
           tmp_stream.clear ();
@@ -519,18 +528,18 @@ such as text, are also replaced by the @
 %!test <42025>
 %! file = tempname ();
 %! unwind_protect
 %!   fid = fopen (file, "wt");
 %!   fwrite (fid, "    \n 1 2\n11 22\n ");
 %!   fclose (fid);
 %!
 %!   assert (dlmread (file), [1, 2; 11, 22]);
-%!   assert (dlmread (file, " "), [ 0,  0, 0, 0, 0,
-%!                                  0,  1, 2, 0, 0,
-%!                                 11, 22, 0, 0, 0,
-%!                                  0,  0, 0, 0, 0]);
+%!   assert (dlmread (file, " "), [ 0,  0, 0, 0
+%!                                  0,  1, 2, 0
+%!                                 11, 22, 0, 0
+%!                                  0,  0, 0, 0]);
 %! unwind_protect_cleanup
 %!   unlink (file);
 %! end_unwind_protect
 
 */
 
