# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499456467 14400
#      Fri Jul 07 15:41:07 2017 -0400
# Node ID 7f176909ab86c29615688c7b21c4728dda2b576d
# Parent  a732be9020611363db0da958de35d4eaff29f442
move display_info class inside octave namespace

* display.h, display.cc (class display_info): Move inside octave
namespace.  Change all uses.  Rename member variables with "m_"
prefix.
(display_info::display_info): Allow display name to be passed as
argument.

* cdisplay.h, cdisplay.c (octave_get_display_info): New arg, dpy_name.

diff --git a/libinterp/corefcn/cdisplay.c b/libinterp/corefcn/cdisplay.c
--- a/libinterp/corefcn/cdisplay.c
+++ b/libinterp/corefcn/cdisplay.c
@@ -43,18 +43,18 @@ along with Octave; see the file COPYING.
 // results in the declaration of a "panic" function that conflicts with
 // Octave's global panic function, so Carbon.h can't be included in any
 // file that also includes Octave's error.h header file.
 
 // Please do NOT eliminate this file and move code from here to
 // display.cc.
 
 const char *
-octave_get_display_info (int *ht, int *wd, int *dp, double *rx, double *ry,
-                         int *dpy_avail)
+octave_get_display_info (const char *dpy_name, int *ht, int *wd, int *dp,
+                         double *rx, double *ry, int *dpy_avail)
 {
   const char *msg = NULL;
 
   *dpy_avail = 0;
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   HDC hdc = GetDC (0);
@@ -122,53 +122,49 @@ octave_get_display_info (int *ht, int *w
 
       *dpy_avail = 1;
     }
   else
     msg = "no graphical display found";
 
 #elif defined (HAVE_X_WINDOWS)
 
-  const char *display_name = getenv ("DISPLAY");
-
-  if (display_name && *display_name)
-    {
-      Display *display = XOpenDisplay (display_name);
+  /* If dpy_name is NULL, XopenDisplay will look for DISPLAY in the
+     environment.  */
 
-      if (display)
-        {
-          Screen *screen = DefaultScreenOfDisplay (display);
+  Display *display = XOpenDisplay (dpy_name);
 
-          if (screen)
-            {
-              *dp = DefaultDepthOfScreen (screen);
+  if (display)
+    {
+      Screen *screen = DefaultScreenOfDisplay (display);
 
-              *ht = HeightOfScreen (screen);
-              *wd = WidthOfScreen (screen);
+      if (screen)
+        {
+          *dp = DefaultDepthOfScreen (screen);
 
-              int screen_number = XScreenNumberOfScreen (screen);
-
-              double ht_mm = DisplayHeightMM (display, screen_number);
-              double wd_mm = DisplayWidthMM (display, screen_number);
+          *ht = HeightOfScreen (screen);
+          *wd = WidthOfScreen (screen);
 
-              *rx = *wd * 25.4 / wd_mm;
-              *ry = *ht * 25.4 / ht_mm;
-            }
-          else
-            msg = "X11 display has no default screen";
+          int screen_number = XScreenNumberOfScreen (screen);
 
-          XCloseDisplay (display);
+          double ht_mm = DisplayHeightMM (display, screen_number);
+          double wd_mm = DisplayWidthMM (display, screen_number);
 
-          *dpy_avail = 1;
+          *rx = *wd * 25.4 / wd_mm;
+          *ry = *ht * 25.4 / ht_mm;
         }
       else
-        msg = "unable to open X11 DISPLAY";
+        msg = "X11 display has no default screen";
+
+      XCloseDisplay (display);
+
+      *dpy_avail = 1;
     }
   else
-    msg = "X11 DISPLAY environment variable not set";
+    msg = "unable to open X11 DISPLAY";
 
 #else
 
   octave_unused_parameter (ht);
   octave_unused_parameter (wd);
   octave_unused_parameter (dp);
   octave_unused_parameter (rx);
   octave_unused_parameter (ry);
diff --git a/libinterp/corefcn/cdisplay.h b/libinterp/corefcn/cdisplay.h
--- a/libinterp/corefcn/cdisplay.h
+++ b/libinterp/corefcn/cdisplay.h
@@ -25,16 +25,16 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #if defined (__cplusplus)
 extern "C" {
 #endif
 
 OCTINTERP_API extern const char *
-octave_get_display_info (int *ht, int *wd, int *dp, double *rx, double *ry,
-                         int *dpy_avail);
+octave_get_display_info (const char *dpy_name, int *ht, int *wd, int *dp,
+                         double *rx, double *ry, int *dpy_avail);
 
 #if defined (__cplusplus)
 }
 #endif
 
 #endif
diff --git a/libinterp/corefcn/display.cc b/libinterp/corefcn/display.cc
--- a/libinterp/corefcn/display.cc
+++ b/libinterp/corefcn/display.cc
@@ -25,45 +25,52 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "singleton-cleanup.h"
 
 #include "cdisplay.h"
 #include "display.h"
 #include "error.h"
 
-display_info *display_info::instance = nullptr;
-
-void
-display_info::init (bool query)
+namespace octave
 {
-  if (query)
-    {
-      int avail = 0;
+  display_info *display_info::instance = nullptr;
 
-      const char *msg = octave_get_display_info (&ht, &wd, &dp, &rx, &ry,
-                                                 &avail);
-
-      dpy_avail = avail;
+  void
+  display_info::init (const std::string& dpy_name, bool query)
+  {
+    if (query)
+      {
+        int avail = 0;
 
-      if (msg)
-        err_msg = msg;
-    }
-}
+        const char *display_name
+          = dpy_name.empty () ? nullptr : dpy_name.c_str ();
+
+        const char *msg
+          = octave_get_display_info (display_name, &m_ht, &m_wd, &m_dp,
+                                     &m_rx, &m_ry, &avail);
+
+        m_dpy_avail = avail;
 
-bool
-display_info::instance_ok (bool query)
-{
-  bool retval = true;
+        if (msg)
+          m_err_msg = msg;
+      }
+  }
 
-  if (! instance)
-    {
-      instance = new display_info (query);
+  bool
+  display_info::instance_ok (bool query)
+  {
+    bool retval = true;
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
+    if (! instance)
+      {
+        instance = new display_info (query);
 
-  if (! instance)
-    error ("unable to create display_info object!");
+        if (instance)
+          singleton_cleanup_list::add (cleanup_instance);
+      }
 
-  return retval;
+    if (! instance)
+      error ("unable to create display_info object!");
+
+    return retval;
+  }
 }
diff --git a/libinterp/corefcn/display.h b/libinterp/corefcn/display.h
--- a/libinterp/corefcn/display.h
+++ b/libinterp/corefcn/display.h
@@ -24,105 +24,129 @@ along with Octave; see the file COPYING.
 #define octave_display_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 class Matrix;
 
-class
-OCTINTERP_API
-display_info
+namespace octave
 {
-protected:
-
-  display_info (bool query = true)
-    : ht (1), wd (1), dp (0), rx (72), ry (72), dpy_avail (false),
-      err_msg ()
-  {
-    init (query);
-  }
-
-public:
-
-  static int height (void)
-  {
-    return instance_ok () ? instance->do_height () : 0;
-  }
-
-  static int width (void)
-  {
-    return instance_ok () ? instance->do_width () : 0;
-  }
-
-  static int depth (void)
-  {
-    return instance_ok () ? instance->do_depth () : 0;
-  }
-
-  static double x_dpi (void)
-  {
-    return instance_ok () ? instance->do_x_dpi () : 0;
-  }
-
-  static double y_dpi (void)
-  {
-    return instance_ok () ? instance->do_y_dpi () : 0;
-  }
-
-  static bool display_available (void)
-  {
-    std::string msg;
-    return instance_ok () ? instance->do_display_available (msg) : false;
-  }
-
-  static bool display_available (std::string& msg)
+  class
+  OCTINTERP_API
+  display_info
   {
-    return instance_ok () ? instance->do_display_available (msg) : false;
-  }
+  protected:
+
+    display_info (void)
+      : m_ht (1), m_wd (1), m_dp (0),
+        m_rx (72), m_ry (72), m_dpy_avail (false), m_err_msg ()
+    {
+      init ();
+    }
 
-  // To disable querying the window system for defaults, this function
-  // must be called before any other display_info function.
-  static void no_window_system (void)
-  {
-    instance_ok (false);
-  }
+    explicit display_info (const std::string& dpy_name)
+      : m_ht (1), m_wd (1), m_dp (0),
+        m_rx (72), m_ry (72), m_dpy_avail (false), m_err_msg ()
+    {
+      init (dpy_name);
+    }
+
+    explicit display_info (bool query)
+      : m_ht (1), m_wd (1), m_dp (0),
+        m_rx (72), m_ry (72), m_dpy_avail (false), m_err_msg ()
+    {
+      init ("", query);
+    }
 
-private:
+    explicit display_info (const std::string& dpy_name, bool query)
+      : m_ht (1), m_wd (1), m_dp (0),
+        m_rx (72), m_ry (72), m_dpy_avail (false), m_err_msg ()
+    {
+      init (dpy_name, query);
+    }
 
-  static display_info *instance;
+  public:
+
+    static int height (void)
+    {
+      return instance_ok () ? instance->do_height () : 0;
+    }
 
-  static void cleanup_instance (void) { delete instance; instance = 0; }
+    static int width (void)
+    {
+      return instance_ok () ? instance->do_width () : 0;
+    }
+
+    static int depth (void)
+    {
+      return instance_ok () ? instance->do_depth () : 0;
+    }
 
-  // Height, width, and depth of the display.
-  int ht;
-  int wd;
-  int dp;
+    static double x_dpi (void)
+    {
+      return instance_ok () ? instance->do_x_dpi () : 0;
+    }
+
+    static double y_dpi (void)
+    {
+      return instance_ok () ? instance->do_y_dpi () : 0;
+    }
 
-  // X- and Y- Resolution of the display in dots (pixels) per inch.
-  double rx;
-  double ry;
+    static bool display_available (void)
+    {
+      std::string msg;
+      return instance_ok () ? instance->do_display_available (msg) : false;
+    }
 
-  bool dpy_avail;
+    static bool display_available (std::string& msg)
+    {
+      return instance_ok () ? instance->do_display_available (msg) : false;
+    }
 
-  std::string err_msg;
+    // To disable querying the window system for defaults, this function
+    // must be called before any other display_info function.
+    static void no_window_system (void)
+    {
+      instance_ok (false);
+    }
 
-  int do_height (void) const { return ht; }
-  int do_width (void) const { return wd; }
-  int do_depth (void) const { return dp; }
+  private:
+
+    static display_info *instance;
+
+    static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  double do_x_dpi (void) const { return rx; }
-  double do_y_dpi (void) const { return ry; }
+    // Height, width, and depth of the display.
+    int m_ht;
+    int m_wd;
+    int m_dp;
 
-  bool do_display_available (std::string& msg) const
-  {
-    msg = err_msg;
+    // X- and Y- Resolution of the display in dots (pixels) per inch.
+    double m_rx;
+    double m_ry;
+
+    bool m_dpy_avail;
+
+    std::string m_err_msg;
 
-    return dpy_avail;
-  }
+    int do_height (void) const { return m_ht; }
+    int do_width (void) const { return m_wd; }
+    int do_depth (void) const { return m_dp; }
+
+    double do_x_dpi (void) const { return m_rx; }
+    double do_y_dpi (void) const { return m_ry; }
 
-  void init (bool query = true);
+    bool do_display_available (std::string& msg) const
+    {
+      msg = m_err_msg;
 
-  static bool instance_ok (bool query = true);
-};
+      return m_dpy_avail;
+    }
+
+    void init (const std::string& dpy_name = "", bool query = true);
+
+    static bool instance_ok (bool query = true);
+  };
+}
 
 #endif
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -213,36 +213,36 @@ viridis_colormap (void)
   Matrix cmap (64, 3, 0.0);
   std::copy (cmapv, cmapv + (64*3), cmap.fortran_vec ());
   return cmap;
 }
 
 static double
 default_screendepth (void)
 {
-  return display_info::depth ();
+  return octave::display_info::depth ();
 }
 
 static Matrix
 default_screensize (void)
 {
   Matrix retval (1, 4);
 
   retval(0) = 1.0;
   retval(1) = 1.0;
-  retval(2) = display_info::width ();
-  retval(3) = display_info::height ();
+  retval(2) = octave::display_info::width ();
+  retval(3) = octave::display_info::height ();
 
   return retval;
 }
 
 static double
 default_screenpixelsperinch (void)
 {
-  return (display_info::x_dpi () + display_info::y_dpi ()) / 2;
+  return (octave::display_info::x_dpi () + octave::display_info::y_dpi ()) / 2;
 }
 
 static Matrix
 default_colororder (void)
 {
   Matrix retval (7, 3, 0.0);
 
   retval(0,1) = 0.447;
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -956,10 +956,10 @@ equivalent to
 DEFUN (have_window_system, , ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} have_window_system ()
 Return true if a window system is available (X11, Windows, or Apple OS X)
 and false otherwise.
 @seealso{isguirunning}
 @end deftypefn */)
 {
-  return ovl (display_info::display_available ());
+  return ovl (octave::display_info::display_available ());
 }
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -2483,17 +2483,17 @@ Undocumented internal function.  Calls F
 
 DEFMETHOD_DLD (__init_fltk__, interp, , ,
                doc: /* -*- texinfo -*-
 @deftypefn {} {} __init_fltk__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
 #if defined (HAVE_FLTK)
-  if (! display_info::display_available ())
+  if (! octave::display_info::display_available ())
     error ("__init_fltk__: no graphics DISPLAY available");
   else if (! toolkit_loaded)
     {
       interp.mlock ();
 
       fltk_graphics_toolkit *fltk = new fltk_graphics_toolkit (interp);
       graphics_toolkit tk (fltk);
       gtk_manager::load_toolkit (tk);
