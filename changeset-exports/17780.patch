# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1382930025 14400
#      Sun Oct 27 23:13:45 2013 -0400
# Node ID 8b353af4a1ca4757efb9807b1db2fdbcc665e94a
# Parent  9244d2a908fdd3e61e3f8fdba1d7fa8649caf5b9
allow octave main program to work on Windows systems

* main.in.cc: Simply exec octave-gui or octave-cli on Windows
systems.

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -34,29 +34,28 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 #include <cstring>
 
 #include <algorithm>
 #include <iostream>
 #include <string>
 
-#include <sys/wait.h>
-#include <sys/types.h>
-#include <sys/signal.h>
-#include <fcntl.h>
+// From gnulib, so OK for Windows too.
 #include <unistd.h>
 
-#ifndef OCTAVE_BINDIR
-#define OCTAVE_BINDIR %OCTAVE_BINDIR%
-#endif
+#if ! defined (__WIN32__) && ! defined (__CYGWIN__)
 
-#ifndef OCTAVE_PREFIX
-#define OCTAVE_PREFIX %OCTAVE_PREFIX%
-#endif
+#include <sys/types.h>
+#include <signal.h>
+#include <fcntl.h>
+
+// This is a liboctave header, but it doesn't include any other Octave
+// headers or declare any functions that are defined in liboctave.
+#include "syswait.h"
 
 typedef void sig_handler (int);
 
 // Forward signals to the GUI process.
 
 static pid_t gui_pid = 0;
 
 static void
@@ -225,16 +224,26 @@ have_controlling_terminal (void)
       retval = 1;
     }
 
 #endif
 
   return retval;
 }
 
+#endif
+
+#ifndef OCTAVE_BINDIR
+#define OCTAVE_BINDIR %OCTAVE_BINDIR%
+#endif
+
+#ifndef OCTAVE_PREFIX
+#define OCTAVE_PREFIX %OCTAVE_PREFIX%
+#endif
+
 // Find the directory where the octave binary is supposed to be
 // installed.
 
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
      && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
 static const char dir_sep_char = '\\';
 #else
 static const char dir_sep_char = '/';
@@ -319,22 +328,16 @@ strsave (const char *s)
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
   bool start_gui = true;
   bool cli_only = false;
 
-#if defined (__WIN32__) || defined (__CYGWIN__)
-  bool no_fork_required = true;
-#else
-  bool no_fork_required = false;
-#endif
-
   std::string octave_bindir = get_octave_bindir ();
 
   std::string file = octave_bindir + dir_sep_char + "octave-gui";
 
   char **new_argv = new char * [argc + 1];
 
   int k = 0;
   new_argv[k++] = strsave ("octave");
@@ -364,18 +367,23 @@ main (int argc, char **argv)
           new_argv[k++] = argv[i];
         }
       else
         new_argv[k++] = argv[i];
     }
 
   new_argv[k] = 0;
 
-  if (cli_only || no_fork_required
-      || (! start_gui && ! have_controlling_terminal ()))
+#if defined (__WIN32__) || defined (__CYGWIN__)
+
+  retval = octave_exec (file, new_argv);
+
+#else
+
+  if (cli_only || (! start_gui && ! have_controlling_terminal ()))
     {
       retval = octave_exec (file, new_argv);
     }
   else
     {
       install_signal_handlers ();
 
       gui_pid = fork ();
@@ -403,28 +411,30 @@ main (int argc, char **argv)
         {
           // Parent.  Forward signals to the child while waiting for it
           // to exit.
 
           int status;
 
           while (1)
             {
-              waitpid (gui_pid, &status, 0);
+              WAITPID (gui_pid, &status, 0);
 
               if (WIFEXITED (status))
                 {
                   retval = WIFEXITED (status) ? WEXITSTATUS (status) : 127;
 
                   break;
                 }
             }
         }
     }
 
+#endif
+
   return retval;
 }
 
 /*!
 @mainpage Source code documentation for GNU Octave
 
 GNU Octave is a high-level language, primarily intended for numerical
 computations.  It provides a convenient interactive command line
