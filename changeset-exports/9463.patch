# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248683949 -7200
#      Mon Jul 27 10:39:09 2009 +0200
# Node ID d34baf412786832b8d952b5090c16323a996683a
# Parent  44e2e568f973838417342029e4160ce2d4d6ac20
support non-local function lookups in str2func

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2009-07-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::xfind,
+	symbol_table::fcn_info::fcn_info_rep::find,
+	symbol_table::fcn_info::fcn_info_rep::find_function,
+	symbol_table::fcn_info::find,
+	symbol_table::fcn_info::find_function,
+	symbol_table::find, symbol_table::do_find,
+	symbol_table::find_function):
+	Add local_funcs parameter.
+	* symtab.h: Update decls.
+	* ov-fcn-handle.cc (make_fcn_handle): Add local_funcs parameter.
+	* ov-fcn-handle.h: Update decls.
+
 2009-07-24  John W. Eaton  <jwe@octave.org>
 
 	* pt-mat.cc (DO_SINGLE_TYPE_CONCAT_NO_MUTATE): New macro.
 	(tree_matrix::rvalue1): Use it to avoid complex -> real conversion.
 
 2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCIONS/cellfun.cc (Fcellfun): Avoid double error messages.
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1300,17 +1300,17 @@ get_builtin_classes (void)
       for (int i = 0; i < 15; i++)
         retval(i) = cnames[i];
     }
 
   return retval;
 }
 
 octave_value
-make_fcn_handle (const std::string& nm)
+make_fcn_handle (const std::string& nm, bool local_funcs)
 {
   octave_value retval;
 
   // Bow to the god of compatibility.
 
   // FIXME -- it seems ugly to put this here, but there is no single
   // function in the parser that converts from the operator name to
   // the corresponding function name.  At least try to do it without N
@@ -1433,17 +1433,18 @@ make_fcn_handle (const std::string& nm)
 
 	case '|':
 	  tnm = "or";
 	  break;
 	}
     }
 
   bool handle_ok = false;
-  octave_value f = symbol_table::find_function (tnm);
+  octave_value f = symbol_table::find_function (tnm, octave_value_list (),
+                                                local_funcs);
 
   if (f.is_undefined ())
     {
       if (load_path::any_class_method (tnm))
         handle_ok = true;
       else
         {
           load_path::update ();
@@ -1651,27 +1652,31 @@ the function handle @var{fcn_handle}.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (str2func, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} str2func (@var{fcn_name})\n\
+@deftypefnx {Built-in Function} {} str2func (@var{fcn_name}, \"global\")\n\
 Return a function handle constructed from the string @var{fcn_name}.\n\
+If the optional \"global\" argument is passed, locally visible functions\n\
+are ignored in the lookup.\n\
 @end deftypefn")
 {
   octave_value retval;
+  int nargin = args.length ();
 
-  if (args.length () == 1)
+  if (nargin == 1 || nargin == 2)
     {
       std::string nm = args(0).string_value ();
 
       if (! error_state)
-	retval = make_fcn_handle (nm);
+	retval = make_fcn_handle (nm, nargin != 2);
       else
 	error ("str2func: expecting string as first argument");
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -140,20 +140,21 @@ protected:
 
   // The name of the handle, including the "@".
   std::string nm;
 
   // A pointer to statical dispatch to standard classes. If null, we don't want
   // to dispatch at all.
   std::auto_ptr<str_ov_map> disp;
 
-  friend octave_value make_fcn_handle (const std::string &);
+  friend octave_value make_fcn_handle (const std::string &, bool);
 };
 
-extern octave_value make_fcn_handle (const std::string& nm);
+extern octave_value make_fcn_handle (const std::string& nm,
+                                     bool local_funcs = true);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -479,111 +479,116 @@ get_dispatch_type (const octave_value_li
 //   class method
 //   legacy dispatch
 //   command-line function
 //   autoload function
 //   function on the path
 //   built-in function
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::find (const octave_value_list& args)
+symbol_table::fcn_info::fcn_info_rep::find (const octave_value_list& args,
+                                            bool local_funcs)
 {
-  octave_value retval = xfind (args);
+  octave_value retval = xfind (args, local_funcs);
 
   if (! retval.is_defined ())
     {
       // It is possible that the user created a file on the fly since
       // the last prompt or chdir, so try updating the load path and
       // searching again.
 
       load_path::update ();
 
-      retval = xfind (args);
+      retval = xfind (args, local_funcs);
     }
 
   return retval;
 }
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::xfind (const octave_value_list& args)
+symbol_table::fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
+                                             bool local_funcs)
 {
-  // Subfunction.  I think it only makes sense to check for
-  // subfunctions if we are currently executing a function defined
-  // from a .m file.
+  if (local_funcs)
+    {
+      // Subfunction.  I think it only makes sense to check for
+      // subfunctions if we are currently executing a function defined
+      // from a .m file.
+
+      scope_val_iterator r = subfunctions.find (xcurrent_scope);
+
+      octave_function *curr_fcn = 0;
 
-  scope_val_iterator r = subfunctions.find (xcurrent_scope);
+      if (r != subfunctions.end ())
+        {
+          // FIXME -- out-of-date check here.
 
-  octave_function *curr_fcn = 0;
+          return r->second;
+        }
+      else
+        {
+          curr_fcn = octave_call_stack::current ();
 
-  if (r != subfunctions.end ())
-    {
-      // FIXME -- out-of-date check here.
+          if (curr_fcn)
+            {
+              scope_id pscope = curr_fcn->parent_fcn_scope ();
+
+              if (pscope > 0)
+                {
+                  r = subfunctions.find (pscope);
 
-      return r->second;
-    }
-  else
-    {
-      curr_fcn = octave_call_stack::current ();
+                  if (r != subfunctions.end ())
+                    {
+                      // FIXME -- out-of-date check here.
+
+                      return r->second;
+                    }
+                }
+            }
+        }
+
+      // Private function.
+
+      if (! curr_fcn)
+        curr_fcn = octave_call_stack::current ();
 
       if (curr_fcn)
-	{
-	  scope_id pscope = curr_fcn->parent_fcn_scope ();
-
-	  if (pscope > 0)
-	    {
-	      r = subfunctions.find (pscope);
-
-	      if (r != subfunctions.end ())
-		{
-		  // FIXME -- out-of-date check here.
+        {
+          std::string dir_name = curr_fcn->dir_name ();
 
-		  return r->second;
-		}
-	    }
-	}
-    }
+          if (! dir_name.empty ())
+            {
+              str_val_iterator q = private_functions.find (dir_name);
 
-  // Private function.
-
-  if (! curr_fcn)
-    curr_fcn = octave_call_stack::current ();
-
-  if (curr_fcn)
-    {
-      std::string dir_name = curr_fcn->dir_name ();
+              if (q == private_functions.end ())
+                {
+                  octave_value val = load_private_function (dir_name);
 
-      if (! dir_name.empty ())
-	{
-	  str_val_iterator q = private_functions.find (dir_name);
+                  if (val.is_defined ())
+                    return val;
+                }
+              else
+                {
+                  octave_value& fval = q->second;
 
-	  if (q == private_functions.end ())
-	    {
-	      octave_value val = load_private_function (dir_name);
-
-	      if (val.is_defined ())
-		return val;
-	    }
-	  else
-	    {
-	      octave_value& fval = q->second;
+                  if (fval.is_defined ())
+                    out_of_date_check_internal (fval);
 
-	      if (fval.is_defined ())
-		out_of_date_check_internal (fval);
+                  if (fval.is_defined ())
+                    return fval;
+                  else
+                    {
+                      octave_value val = load_private_function (dir_name);
 
-	      if (fval.is_defined ())
-		return fval;
-	      else
-		{
-		  octave_value val = load_private_function (dir_name);
-
-		  if (val.is_defined ())
-		    return val;
-		}
-	    }
-	}
+                      if (val.is_defined ())
+                        return val;
+                    }
+                }
+            }
+        }
     }
 
   // Class constructors.  The class name and function name are the same.
 
   str_val_iterator q = class_constructors.find (name);
 
   if (q == class_constructors.end ())
     {
@@ -1025,44 +1030,40 @@ symbol_table::fcn_info::fcn_info_rep::du
       for (dispatch_map_const_iterator p = dispatch_map.begin ();
 	   p != dispatch_map.end (); p++)
 	os << tprefix << "dispatch: " << fcn_file_name (p->second)
 	   << " [" << p->first << "]\n";
     }
 }
 
 octave_value
-symbol_table::fcn_info::find (const octave_value_list& args)
-{
-  return rep->find (args);
-}
-
-octave_value
 symbol_table::find (const std::string& name, 
                     const octave_value_list& args, 
-                    bool skip_variables)
+                    bool skip_variables,
+                    bool local_funcs)
 {
   symbol_table *inst = get_instance (xcurrent_scope);
 
   return inst
-    ? inst->do_find (name, args, skip_variables)
+    ? inst->do_find (name, args, skip_variables, local_funcs)
     : octave_value ();
 }
 
 octave_value
 symbol_table::builtin_find (const std::string& name)
 {
   symbol_table *inst = get_instance (xcurrent_scope);
 
   return inst ? inst->do_builtin_find (name) : octave_value ();
 }
 
 octave_value
 symbol_table::find_function (const std::string& name,
-                             const octave_value_list& args)
+                             const octave_value_list& args,
+                             bool local_funcs)
 {
   octave_value retval;
 
   if (! name.empty () && name[0] == '@')
     {
       // Look for a class specific function.
       std::string dispatch_type = 
 	name.substr (1, name.find_first_of (file_ops::dir_sep_str ()) - 1);
@@ -1073,23 +1074,24 @@ symbol_table::find_function (const std::
 
       retval = find_method (method, dispatch_type);
     }
   else
     {
       size_t pos = name.find_first_of (Vfilemarker);
 
       if (pos == std::string::npos)
-	retval = find (name, args, true);
+	retval = find (name, args, true, local_funcs);
       else
 	{
 	  std::string fcn_scope = name.substr (0, pos);
 	  scope_id stored_scope = xcurrent_scope;
 	  xcurrent_scope = xtop_scope;
-	  octave_value parent = find_function (name.substr(0, pos));
+	  octave_value parent = find_function (name.substr(0, pos),
+                                               octave_value_list (), false);
 
 	  if (parent.is_defined ())
 	    {
 	      octave_function *parent_fcn = parent.function_value ();
 
 	      if (parent_fcn)
 		{
 		  xcurrent_scope = parent_fcn->scope ();
@@ -1201,17 +1203,18 @@ symbol_table::stash_dir_name_for_subfunc
 	    f->stash_dir_name (dir_name);
 	}
     }
 }
 
 octave_value
 symbol_table::do_find (const std::string& name, 
                        const octave_value_list& args,
-		       bool skip_variables)
+		       bool skip_variables,
+                       bool local_funcs)
 {
   octave_value retval;
 
   // Variable.
 
   if (! skip_variables)
     {
       table_iterator p = table.find (name);
@@ -1232,22 +1235,22 @@ symbol_table::do_find (const std::string
 		return val;
 	    }
 	}
     }
 
   fcn_table_iterator p = fcn_table.find (name);
 
   if (p != fcn_table.end ())
-    return p->second.find (args);
+    return p->second.find (args, local_funcs);
   else
     {
       fcn_info finfo (name);
 
-      octave_value fcn = finfo.find (args);
+      octave_value fcn = finfo.find (args, local_funcs);
 
       if (fcn.is_defined ())
 	fcn_table[name] = finfo;
 
       return fcn;
     }
 
   return retval;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -533,34 +533,34 @@ public:
 	  count (1) { }
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value find (const octave_value_list& args = octave_value_list ());
+      octave_value find (const octave_value_list& args, bool local_funcs);
 
       octave_value builtin_find (void);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
       octave_value find_user_function (void);
 
       bool is_user_function_defined (void) const
       {
 	return function_on_path.is_defined ();
       }
 
-      octave_value find_function (const octave_value_list& args = octave_value_list ())
+      octave_value find_function (const octave_value_list& args, bool local_funcs)
       {
-	return find (args);
+	return find (args, local_funcs);
       }
 
       void lock_subfunction (scope_id scope)
       {
 	scope_val_iterator p = subfunctions.find (scope);
 
 	if (p != subfunctions.end ())
 	  p->second.lock ();
@@ -713,17 +713,17 @@ public:
       octave_value function_on_path;
 
       octave_value built_in_function;
 
       size_t count;
 
     private:
 
-      octave_value xfind (const octave_value_list& args);
+      octave_value xfind (const octave_value_list& args, bool local_funcs);
 
       octave_value x_builtin_find (void);
 
       // No copying!
 
       fcn_info_rep (const fcn_info_rep&);
 
       fcn_info_rep& operator = (const fcn_info_rep&);
@@ -754,17 +754,21 @@ public:
     }
 
     ~fcn_info (void)
     {
       if (--rep->count == 0)
 	delete rep;
     }
 
-    octave_value find (const octave_value_list& args);
+    octave_value find (const octave_value_list& args = octave_value_list (),
+                       bool local_funcs = true)
+    {
+      return rep->find (args, local_funcs);
+    }
 
     octave_value builtin_find (void)
     {
       return rep->builtin_find ();
     }
 
     octave_value find_method (const std::string& dispatch_type) const
     {
@@ -786,24 +790,20 @@ public:
       return rep->find_user_function ();
     }
 
     bool is_user_function_defined (void) const
     {
       return rep->is_user_function_defined ();
     }
 
-    octave_value find_function (void)
+    octave_value find_function (const octave_value_list& args = octave_value_list (),
+                                bool local_funcs = true)
     {
-      return rep->find_function ();
-    }
-
-    octave_value find_function (const octave_value_list& args)
-    {
-      return rep->find_function (args);
+      return rep->find_function (args, local_funcs);
     }
 
     void lock_subfunction (scope_id scope)
     {
       rep->lock_subfunction (scope);
     }
 
     void unlock_subfunction (scope_id scope)
@@ -1028,17 +1028,18 @@ public:
   }
 
   static bool at_top_level (void) { return xcurrent_scope == xtop_scope; }
 
   // Find a value corresponding to the given name in the table.
   static octave_value
   find (const std::string& name, 
         const octave_value_list& args = octave_value_list (),
-	bool skip_variables = false);
+	bool skip_variables = false,
+        bool local_funcs = true);
 
   static octave_value builtin_find (const std::string& name);
 
   // Insert a new name in the table.
   static symbol_record& insert (const std::string& name)
   {
     static symbol_record foobar;
 
@@ -1167,17 +1168,18 @@ public:
     fcn_table_iterator p = fcn_table.find (name);
 
     return (p != fcn_table.end ())
       ? p->second.find_autoload () : octave_value ();
   }
 
   static octave_value
   find_function (const std::string& name, 
-                 const octave_value_list& args = octave_value_list ());
+                 const octave_value_list& args = octave_value_list (),
+                 bool local_funcs = true);
 
   static octave_value find_user_function (const std::string& name)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     return (p != fcn_table.end ())
       ? p->second.find_user_function () : octave_value ();
   }
@@ -1968,17 +1970,17 @@ private:
   static fcn_info *get_fcn_info (const std::string& name)
     {
       fcn_table_iterator p = fcn_table.find (name);
       return p != fcn_table.end () ? &p->second : 0;
     }
 
   octave_value
   do_find (const std::string& name, const octave_value_list& args,
-           bool skip_variables);
+           bool skip_variables, bool local_funcs);
 
   octave_value do_builtin_find (const std::string& name);
 
   symbol_record& do_insert (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     return p == table.end ()
