# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546367944 28800
#      Tue Jan 01 10:39:04 2019 -0800
# Branch stable
# Node ID acfd683ea00b132ce004531ebf37d772da877072
# Parent  df510676ca6a4ed96eb7940818f6a7592c56273d
__eigs__.cc: Fix static analyzer detected issues (bug #55347).

* __eigs__.cc (eigs_complex_func): Call correct input conversion function
xcomplex_vector_value.  Write "0.0" rather than "0." for clarity.

diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -109,17 +109,17 @@ eigs_complex_func (const ComplexColumnVe
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
-          retval = tmp(0).complex_vector_value ("eigs: evaluation of user-supplied function failed");
+          retval = tmp(0).xcomplex_vector_value ("eigs: evaluation of user-supplied function failed");
         }
       else
         {
           eigs_error = 1;
           err_user_supplied_eval ("eigs");
         }
     }
 
@@ -160,17 +160,17 @@ Undocumented internal function.
   if (nargin == 0)
     print_usage ();
 
   octave_value_list retval;
 
   std::string fcn_name;
   octave_idx_type n = 0;
   octave_idx_type k = 6;
-  Complex sigma = 0.;
+  Complex sigma = 0.0;
   double sigmar, sigmai;
   bool have_sigma = false;
   std::string typ = "LM";
   Matrix amm, bmm, bmt;
   ComplexMatrix acm, bcm, bct;
   SparseMatrix asmm, bsmm, bsmt;
   SparseComplexMatrix ascm, bscm, bsct;
   int b_arg = 0;
@@ -299,17 +299,17 @@ Undocumented internal function.
     {
       if (args(2+arg_offset).is_string ())
         {
           typ = args(2+arg_offset).string_value ();
 
           // Use STL function to convert to upper case
           transform (typ.begin (), typ.end (), typ.begin (), toupper);
 
-          sigma = 0.;
+          sigma = 0.0;
         }
       else
         {
           sigma = args(2+arg_offset).xcomplex_value ("eigs: SIGMA must be a scalar or a string");
 
           have_sigma = true;
         }
     }
@@ -325,24 +325,24 @@ Undocumented internal function.
       octave_scalar_map map = args(3+arg_offset).xscalar_map_value ("eigs: OPTS argument must be a scalar structure");
 
       octave_value tmp;
 
       // issym is ignored for complex matrix inputs
       tmp = map.getfield ("issym");
       if (tmp.is_defined () && ! sym_tested)
         {
-          symmetric = tmp.double_value () != 0.;
+          symmetric = tmp.double_value () != 0.0;
           sym_tested = true;
         }
 
       // isreal is ignored if A is not a function
       tmp = map.getfield ("isreal");
       if (tmp.is_defined () && have_a_fun)
-        a_is_complex = ! (tmp.double_value () != 0.);
+        a_is_complex = ! (tmp.double_value () != 0.0);
 
       tmp = map.getfield ("tol");
       if (tmp.is_defined ())
         tol = tmp.double_value ();
 
       tmp = map.getfield ("maxit");
       if (tmp.is_defined ())
         maxit = tmp.nint_value ();
@@ -361,17 +361,17 @@ Undocumented internal function.
         }
 
       tmp = map.getfield ("disp");
       if (tmp.is_defined ())
         disp = tmp.nint_value ();
 
       tmp = map.getfield ("cholB");
       if (tmp.is_defined ())
-        cholB = tmp.double_value () != 0.;
+        cholB = tmp.double_value () != 0.0;
 
       tmp = map.getfield ("permB");
       if (tmp.is_defined ())
         permB = ColumnVector (tmp.vector_value ()) - 1.0;
     }
 
   if (nargin > (4+arg_offset))
     error ("eigs: incorrect number of arguments");
@@ -454,17 +454,17 @@ Undocumented internal function.
                      maxit);
         }
 
       if (nargout < 2)
         retval(0) = eig_val;
       else
         retval = ovl (eig_vec, ComplexDiagMatrix (eig_val), double (info));
     }
-  else if (sigmai != 0.)
+  else if (sigmai != 0.0)
     {
       // Promote real problem to a complex one.
       ComplexMatrix eig_vec;
       ComplexColumnVector eig_val;
 
       if (have_a_fun)
         {
           if (b_is_sparse)
