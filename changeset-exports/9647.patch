# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253101309 -7200
#      Wed Sep 16 13:41:49 2009 +0200
# Node ID 54f45f883a53a7805039d3906ad461856d965db5
# Parent  b6f5a59a66d73144323a3578e266cbf23eeab5a8
optimize & extend randperm

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-rand.cc (octave_rand::do_matrix, do_nd_array, do_vector):
+	Use Array::clear rather than Array::resize.
+
 2009-09-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dColVector.h (operator *(const Matrix&, const ColumnVector)):
 	Optimize.
 	* fColVector.h (operator *(const FloatMatrix&, const
 	FloatColumnVector)): Optimize.
 	* CColVector.h (operator *(const ComplexMatrix&, const
 	ComplexColumnVector)): Optimize.
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -385,17 +385,17 @@ octave_rand::do_scalar (double a)
 
 Matrix
 octave_rand::do_matrix (octave_idx_type n, octave_idx_type m, double a)
 {
   Matrix retval;
 
   if (n >= 0 && m >= 0)
     {
-      retval.resize (n, m);
+      retval.clear (n, m);
 
       if (n > 0 && m > 0)
 	fill (retval.capacity(), retval.fortran_vec(), a);
     }
   else
     (*current_liboctave_error_handler) ("rand: invalid negative argument");
 
   return retval;
@@ -403,32 +403,32 @@ octave_rand::do_matrix (octave_idx_type 
 
 NDArray
 octave_rand::do_nd_array (const dim_vector& dims, double a)
 {
   NDArray retval;
 
   if (! dims.all_zero ())
     {
-      retval.resize (dims);
+      retval.clear (dims);
 
       fill (retval.capacity(), retval.fortran_vec(), a);
     }
 
   return retval;
 }
 
 Array<double>
 octave_rand::do_vector (octave_idx_type n, double a)
 {
   Array<double> retval;
 
   if (n > 0)
     {
-      retval.resize (n);
+      retval.clear (n);
 
       fill (retval.capacity (), retval.fortran_vec (), a);
     }
   else if (n < 0)
     (*current_liboctave_error_handler) ("rand: invalid negative argument");
 
   return retval;
 }
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/randperm.m: Remove.
+	* general/Makefile.in: Update.
+
 2009-09-15  John W. Eaton  <jwe@octave.org>
 
 	* confiugre.ac: Rename from configure.in
 	* Makefile.in: Rename all instances of configure.in to
 	configure.ac.
 
 2009-09-11  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/scripts/general/Makefile.in b/scripts/general/Makefile.in
--- a/scripts/general/Makefile.in
+++ b/scripts/general/Makefile.in
@@ -38,17 +38,17 @@ SOURCES = __isequal__.m __splinen__.m ac
   cart2sph.m cellidx.m cell2mat.m celldisp.m circshift.m colon.m common_size.m \
   cplxpair.m cumtrapz.m dblquad.m deal.m del2.m display.m flipdim.m \
   fliplr.m flipud.m genvarname.m gradient.m idivide.m int2str.m \
   interp1.m interp1q.m interp2.m interp3.m interpn.m interpft.m \
   is_duplicate_entry.m isa.m isdefinite.m isdir.m isequal.m \
   isequalwithequalnans.m isscalar.m issquare.m issymmetric.m \
   isvector.m loadobj.m logical.m logspace.m mod.m nargchk.m \
   nargoutchk.m nextpow2.m nthroot.m num2str.m perror.m pol2cart.m \
-  polyarea.m postpad.m prepad.m quadgk.m quadl.m quadv.m randperm.m rat.m \
+  polyarea.m postpad.m prepad.m quadgk.m quadl.m quadv.m rat.m \
   rem.m repmat.m rot90.m rotdim.m runlength.m saveobj.m shift.m shiftdim.m \
   sortrows.m sph2cart.m strerror.m structfun.m subsindex.m \
   triplequad.m trapz.m tril.m triu.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
diff --git a/scripts/general/randperm.m b/scripts/general/randperm.m
deleted file mode 100644
--- a/scripts/general/randperm.m
+++ /dev/null
@@ -1,40 +0,0 @@
-## Copyright (C) 1998, 1999, 2000, 2002, 2005, 2006, 2007 John W. Eaton
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {} randperm (@var{n})
-## Return a row vector containing a random permutation of the
-## integers from 1 to @var{n}.
-## @end deftypefn
-
-## Author: "James R. Van Zandt" <jrv@vanzandt.mv.com>
-## Adapted-By: jwe
-
-function retval = randperm (n)
-
-  if (nargin == 1 && isscalar (n) && floor (n) == n)
-    if (n >= 0)
-      [junk, retval] = sort (rand (1, n));
-    else
-      error ("randperm: argument must be non-negative");
-    endif
-  else
-    print_usage ();
-  endif
-
-endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-09-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/rand.cc (Frandperm): New function.
+
 2009-09-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-misc.cc (tree_parameter_list::convert_to_const_vector): Pass
 	in nargout. Don't return excess elements. Optimize varargout-only case
 	to possibly use a shallow copy.
 	* pt-misc.h: Update decl.
 	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op): Update call
 	to tree_parameter_list::convert_to_const_vector.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -1,12 +1,13 @@
 /*
 
 Copyright (C) 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2005, 2006,
               2007, 2008, 2009 John W. Eaton
+Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -35,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "quit.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
+#include "ov-re-mat.h"
 
 /*
 %!shared __random_statistical_tests__
 %! % Flag whether the statistical tests should be run in "make check" or not
 %! __random_statistical_tests__ = 0;
 */
 
 static octave_value
@@ -1012,13 +1014,96 @@ D 50 p1284, 1994\n\
 %!     assert(mean(x),a(1),a(2));
 %!     assert(var(x),a(1),0.02*a(1));
 %!     assert(skewness(x),1/sqrt(a(1)),a(3));
 %!     assert(kurtosis(x),1/a(1),3*a(3));
 %!   endfor
 %! endif
 */
 
+DEFUN_DLD (randperm, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} randperm (@var{n})\n\
+@deftypefnx {Loadable Function} {} randperm (@var{n}, @var{m})\n\
+Return a row vector containing a random permutation of @code{1:@var{n}}.\n\
+If @var{m} is supplied, return @var{m} permutations,\n\
+one in each row of a NxM matrix. The complexity is O(M*N) in both time and\n\
+memory. The randomization is performed using rand().\n\
+All permutations are equally likely.\n\
+@seealso{perms}\n\
+@end deftypefn")
+{
+  int nargin = args.length ();
+  octave_value retval;
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_idx_type n, m;
+      
+      if (nargin == 2)
+        m = args(1).idx_type_value (true);
+      else
+        m = 1;
+
+      n = args(0).idx_type_value (true);
+
+      if (m < 0 || n < 0)
+        error ("randperm: m and n must be non-negative");
+
+      if (! error_state)
+        {
+          // Generate random numbers.
+          NDArray r = octave_rand::nd_array (dim_vector (m, n));
+
+          // Create transposed to allow faster access.
+          Array<octave_idx_type> idx (dim_vector (n, m));
+
+          double *rvec = r.fortran_vec ();
+
+          octave_idx_type *ivec = idx.fortran_vec ();
+
+          // Perform the Knuth shuffle.
+          for (octave_idx_type j = 0; j < m; j++)
+            {
+              for (octave_idx_type i = 0; i < n; i++)
+                ivec[i] = i;
+
+              for (octave_idx_type i = 0; i < n; i++)
+                {
+                  octave_idx_type k = i + floor (rvec[i] * (n - i));
+                  std::swap (ivec[i], ivec[k]);
+                }
+
+              ivec += n;
+              rvec += n;
+            }
+
+          // Transpose.
+          idx = idx.transpose ();
+
+          // Re-fetch the pointers.
+          ivec = idx.fortran_vec ();
+          rvec = r.fortran_vec ();
+
+          // Convert to doubles, reusing r.
+          for (octave_idx_type i = 0, l = m*n; i < l; i++)
+            rvec[i] = ivec[i] + 1;
+
+          // Now create an array object with a cached idx_vector.
+          retval = new octave_matrix (r, idx_vector (idx)); 
+        }
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+/*
+%!assert(sort(randperm(20)),1:20)
+%!assert(sort(randperm(20,50),2),repmat(1:20,50,1))
+*/
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
