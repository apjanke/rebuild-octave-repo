# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1382119263 -7200
#      Fri Oct 18 20:01:03 2013 +0200
# Node ID 65544374c1cf74f6d554ddb6241e3bd932c56b52
# Parent  3d862202c4f6c92186aecd6bf52862f037601a88
restore (un)docking of widgets without reparenting on non-windows systems

* octave-dock-widget.cc(constructor): dock widgets features depending on system;
  (destructor): update comment;
  (set_title): set title in user defined title bar widget only on windows;
  (make_window): just set the windows flag when floating on non-windows systems;
  (make_widget): just set the widget flag when docked on non-windows systems;
  (change_floating): detect actual state from related flag on non-windows sys.;

* main-window.cc(set_window_layout): use correct setting categorie for geometry

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -628,17 +628,17 @@ main_window::set_window_layout (QSetting
           bool floating = settings->value
               ("DockWidgets/" + name + "Floating", false).toBool ();
           if (floating)
             widget->make_window ();
           else if (! widget->parent ())  // should not be floating but is
             widget->make_widget (false); // no docking, just reparent
 
           // restore geometry
-          QVariant val = settings->value (name);
+          QVariant val = settings->value ("DockWidgets/" + name);
           widget->restoreGeometry (val.toByteArray ());
 
           // make widget visible if desired
           bool visible = settings->value
               ("DockWidgets/" + name + "Visible", true).toBool ();
           if (floating && visible)              // floating and visible
             float_and_visible.append (widget);  // not show before main win
           else
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -33,24 +33,28 @@ along with Octave; see the file COPYING.
 #include "octave-dock-widget.h"
 
 
 octave_dock_widget::octave_dock_widget (QWidget *p)
     : QDockWidget (p)
 {
 
   _parent = static_cast<QMainWindow *> (p);     // store main window
-  setFeatures (QDockWidget::DockWidgetMovable); // not floatable or cloasable
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_visibility_changed (bool)));
 
   connect (p, SIGNAL (settings_changed (const QSettings*)),
            this, SLOT (notice_settings (const QSettings*)));
 
+#if defined (Q_OS_WIN32)
+  // windows: add an extra title bar that persists when floating
+
+  setFeatures (QDockWidget::DockWidgetMovable); // not floatable or closeable
+
   // the custom (extra) title bar of the widget
   _dock_action = new QAction
                    (QIcon (":/actions/icons/widget-undock.png"), "", this);
   _dock_action-> setToolTip (tr ("Undock widget"));
   connect (_dock_action, SIGNAL (triggered (bool)),
            this, SLOT (change_floating (bool)));
   QToolButton *dock_button = new QToolButton (this);
   dock_button->setDefaultAction (_dock_action);
@@ -73,33 +77,45 @@ octave_dock_widget::octave_dock_widget (
   h_layout->addWidget (close_button);
   h_layout->setSpacing (0);
   h_layout->setContentsMargins (6,0,0,0);
 
   QWidget *title_widget = new QWidget ();
   title_widget->setLayout (h_layout);
   setTitleBarWidget (title_widget);
 
+#else
+
+  // non windows: qt takes control of floating widgets
+  setFeatures (QDockWidget::DockWidgetMovable |
+               QDockWidget::DockWidgetClosable |
+               QDockWidget::DockWidgetFloatable); // floatable and closeable
+
+  connect (this, SIGNAL (topLevelChanged (bool)),
+           this, SLOT (change_floating (bool)));
+
+#endif
+
   // copy & paste handling
   connect (p, SIGNAL (copyClipboard_signal ()), this, SLOT (copyClipboard ()));
   connect (p, SIGNAL (pasteClipboard_signal()), this, SLOT (pasteClipboard ()));
 }
 
 octave_dock_widget::~octave_dock_widget ()
 {
   // save state of this dock-widget
   bool floating = false;
   bool visible;
   QString name = objectName ();
   QSettings *settings = resource_manager::get_settings ();
 
   settings->beginGroup ("DockWidgets");
 
   if (!parent ())
-    { // widget is floating, save actual floating geometry
+    { // widget is floating (windows), save actual floating geometry
       floating = true;
       settings->setValue (name+"_floating_geometry", saveGeometry ());
     }
   else  // not floating save docked (normal) geometry
     settings->setValue (name, saveGeometry ());
 
   visible = isVisible ();
   settings->setValue (name+"Floating", floating);  // store floating state
@@ -118,49 +134,67 @@ octave_dock_widget::connect_visibility_c
   emit active_changed (isVisible ());  // emit once for init of window menu
 }
 
 
 // set the title in the dockwidgets title bar
 void
 octave_dock_widget::set_title (const QString& title)
 {
+#if defined (Q_OS_WIN32)
   QHBoxLayout* h_layout =
       static_cast<QHBoxLayout *> (titleBarWidget ()->layout ());
   QLabel *label = new QLabel (title);
   h_layout->insertWidget (0,label);
+#endif
   setWindowTitle (title);
 }
 
 // make the widget floating
 void
 octave_dock_widget::make_window ()
 {
+#if defined (Q_OS_WIN32)
+
+  // windows: the widget has to be reparented (parent = 0)
+
   QSettings *settings = resource_manager::get_settings ();
 
   // save the docking area for later redocking
   // FIXME: dockWidgetArea always returns 2
   settings->setValue ("DockWidgets/" + objectName () + "_dock_area",
                       _parent->dockWidgetArea (this));
   settings->sync ();
 
   // remove parent and adjust the (un)dock icon
   setParent (0, Qt::Window);
   _dock_action->setIcon (QIcon (":/actions/icons/widget-dock.png"));
   _dock_action->setToolTip (tr ("Dock widget"));
 
   // restore the last geometry when floating
   restoreGeometry (settings->value
           ("DockWidgets/" + objectName ()+"_floating_geometry").toByteArray ());
+
+#else
+
+  // non windows: Just set the appripriate window flag
+  setWindowFlags (Qt::Window);
+
+#endif
+
 }
 
 // dock the widget
 void
 octave_dock_widget::make_widget (bool dock)
 {
+#if defined (Q_OS_WIN32)
+
+  // windows: Since floating widget has no parent, we have to readd it
+
   QSettings *settings = resource_manager::get_settings ();
 
   // save last floating geometry
   settings->setValue ("DockWidgets/" + objectName () + "_floating_geometry",
                       saveGeometry ());
   settings->sync ();
 
   if (dock)
@@ -174,23 +208,34 @@ octave_dock_widget::make_widget (bool do
       //        ("DockWidgets/" + objectName ()).toByteArray ());
     }
   else  // only reparent, no docking
     setParent (_parent);
 
   // adjust the (un)dock icon
   _dock_action->setIcon (QIcon (":/actions/icons/widget-undock.png"));
   _dock_action->setToolTip (tr ("Undock widget"));
+
+#else
+
+  // non windows: just say we are a docked widget again
+  setWindowFlags (Qt::Widget);
+
+#endif
 }
 
 // slot for (un)dock action
 void
-octave_dock_widget::change_floating (bool)
-{
-  if (parent())
+octave_dock_widget::change_floating (bool floating)
+ {
+#if defined (Q_OS_WIN32)
+   if (parent())
+#else
+  if (floating)
+#endif
     {
       make_window ();
       focus ();
     }
   else
     make_widget ();
 }
 
