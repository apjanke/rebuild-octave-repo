# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1443903718 14400
#      Sat Oct 03 16:21:58 2015 -0400
# Node ID 52ce821a52fdf2d5bebf865481bcb475ac4c3c95
# Parent  2f8500ca91d3cc16e88ec3d36fd09052089fb9f5
eliminate simple uses of error_state in parser and lexer

* lex.ll, oct-parse.in.yy: Eliminate simple uses of global error_state
variable.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1906,19 +1906,16 @@ If @var{name} is omitted, return a list 
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("iskeyword");
 
-  if (error_state)
-    return retval;
-
   if (argc == 1)
     {
       // Neither set and get are keywords.  See the note in the
       // is_keyword function for additional details.
 
       string_vector lst (TOTAL_KEYWORDS);
 
       int j = 0;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2241,18 +2241,16 @@ octave_base_parser::maybe_warn_variable_
 
 tree_expression *
 octave_base_parser::finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect frame;
 
-  frame.protect_var (error_state);
-
   frame.protect_var (discard_error_messages);
   frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
@@ -2262,33 +2260,30 @@ octave_base_parser::finish_colon_express
     {
       if (limit)
         {
           if (base->is_constant () && limit->is_constant ()
               && (! incr || (incr && incr->is_constant ())))
             {
               octave_value tmp = e->rvalue1 ();
 
-              if (! error_state)
-                {
-                  tree_constant *tc_retval
-                    = new tree_constant (tmp, base->line (), base->column ());
-
-                  std::ostringstream buf;
-
-                  tree_print_code tpc (buf);
-
-                  e->accept (tpc);
-
-                  tc_retval->stash_original_text (buf.str ());
-
-                  delete e;
-
-                  retval = tc_retval;
-                }
+              tree_constant *tc_retval
+                = new tree_constant (tmp, base->line (), base->column ());
+
+              std::ostringstream buf;
+
+              tree_print_code tpc (buf);
+
+              e->accept (tpc);
+
+              tc_retval->stash_original_text (buf.str ());
+
+              delete e;
+
+              retval = tc_retval;
             }
         }
       else
         {
           e->preserve_base ();
           delete e;
 
           retval = base;
@@ -3793,46 +3788,41 @@ octave_base_parser::validate_matrix_for_
 
 tree_expression *
 octave_base_parser::finish_array_list (tree_array_list *array_list)
 {
   tree_expression *retval = array_list;
 
   unwind_protect frame;
 
-  frame.protect_var (error_state);
-
   frame.protect_var (discard_error_messages);
   frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   if (array_list->all_elements_are_constant ())
     {
       octave_value tmp = array_list->rvalue1 ();
 
-      if (! error_state)
-        {
-          tree_constant *tc_retval
-            = new tree_constant (tmp, array_list->line (),
-                                 array_list->column ());
-
-          std::ostringstream buf;
-
-          tree_print_code tpc (buf);
-
-          array_list->accept (tpc);
-
-          tc_retval->stash_original_text (buf.str ());
-
-          delete array_list;
-
-          retval = tc_retval;
-        }
+      tree_constant *tc_retval
+        = new tree_constant (tmp, array_list->line (),
+                             array_list->column ());
+
+      std::ostringstream buf;
+
+      tree_print_code tpc (buf);
+
+      array_list->accept (tpc);
+
+      tc_retval->stash_original_text (buf.str ());
+
+      delete array_list;
+
+      retval = tc_retval;
     }
 
   return retval;
 }
 
 // Finish building a matrix list.
 
 tree_expression *
@@ -4372,61 +4362,58 @@ not loaded anymore during the current Oc
       m.assign ("file", file_names);
 
       retval = m;
     }
   else if (nargin == 2 || nargin == 3)
     {
       string_vector argv = args.make_argv ("autoload");
 
-      if (! error_state)
+      std::string nm = argv[2];
+
+      if (! octave_env::absolute_pathname (nm))
         {
-          std::string nm = argv[2];
-
-          if (! octave_env::absolute_pathname (nm))
+          octave_user_code *fcn = octave_call_stack::caller_user_code ();
+
+          bool found = false;
+
+          if (fcn)
             {
-              octave_user_code *fcn = octave_call_stack::caller_user_code ();
-
-              bool found = false;
-
-              if (fcn)
+              std::string fname = fcn->fcn_file_name ();
+
+              if (! fname.empty ())
                 {
-                  std::string fname = fcn->fcn_file_name ();
-
-                  if (! fname.empty ())
+                  fname = octave_env::make_absolute (fname);
+                  fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str ()) + 1);
+
+                  file_stat fs (fname + nm);
+
+                  if (fs.exists ())
                     {
-                      fname = octave_env::make_absolute (fname);
-                      fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str ()) + 1);
-
-                      file_stat fs (fname + nm);
-
-                      if (fs.exists ())
-                        {
-                          nm = fname + nm;
-                          found = true;
-                        }
+                      nm = fname + nm;
+                      found = true;
                     }
                 }
-              if (! found)
-                warning_with_id ("Octave:autoload-relative-file-name",
-                                 "autoload: '%s' is not an absolute file name",
-                                 nm.c_str ());
             }
-          if (nargin == 2)
-            autoload_map[argv[1]] = nm;
-          else if (nargin == 3)
-            {
-              if (argv[3].compare ("remove") != 0)
-                error_with_id ("Octave:invalid-input-arg",
-                               "autoload: third argument can only be 'remove'");
-
-              // Remove function from symbol table and autoload map.
-              symbol_table::clear_dld_function (argv[1]);
-              autoload_map.erase (argv[1]);
-            }
+          if (! found)
+            warning_with_id ("Octave:autoload-relative-file-name",
+                             "autoload: '%s' is not an absolute file name",
+                             nm.c_str ());
+        }
+      if (nargin == 2)
+        autoload_map[argv[1]] = nm;
+      else if (nargin == 3)
+        {
+          if (argv[3].compare ("remove") != 0)
+            error_with_id ("Octave:invalid-input-arg",
+                           "autoload: third argument can only be 'remove'");
+
+          // Remove function from symbol table and autoload map.
+          symbol_table::clear_dld_function (argv[1]);
+          autoload_map.erase (argv[1]);
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -4492,50 +4479,48 @@ source_file (const std::string& file_nam
     {
       if (context == "caller")
         octave_call_stack::goto_caller_frame ();
       else if (context == "base")
         octave_call_stack::goto_base_frame ();
       else
         error ("source: context must be \"caller\" or \"base\"");
 
-      if (! error_state)
-        frame.add_fcn (octave_call_stack::pop);
+      frame.add_fcn (octave_call_stack::pop);
     }
 
-  if (! error_state)
+  try
     {
       octave_function *fcn = parse_fcn_file (file_full_name, file_name,
                                              "", "", require_file, true,
                                              false, false, warn_for);
-
-      if (! error_state)
+    }
+  catch (const octave_execution_error)
+    {
+      error ("source: error sourcing file '%s'",
+             file_full_name.c_str ());
+    }
+
+  if (fcn && fcn->is_user_script ())
+    {
+      octave_value_list args;
+
+      if (verbose)
         {
-          if (fcn && fcn->is_user_script ())
-            {
-              octave_value_list args;
-
-              if (verbose)
-                {
-                  std::cout << "executing commands from " << file_full_name << " ... ";
-                  reading_startup_message_printed = true;
-                  std::cout.flush ();
-                }
-
-              fcn->do_multi_index_op (0, args);
-
-              if (verbose)
-                std::cout << "done." << std::endl;
-
-              delete fcn;
-            }
+          std::cout << "executing commands from " << file_full_name << " ... ";
+          reading_startup_message_printed = true;
+          std::cout.flush ();
         }
-      else
-        error ("source: error sourcing file '%s'",
-               file_full_name.c_str ());
+
+      fcn->do_multi_index_op (0, args);
+
+      if (verbose)
+        std::cout << "done." << std::endl;
+
+      delete fcn;
     }
 }
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mfilename ()\n\
 @deftypefnx {Built-in Function} {} mfilename (\"fullpath\")\n\
 @deftypefnx {Built-in Function} {} mfilename (\"fullpathext\")\n\
@@ -4656,19 +4641,24 @@ feval (const std::string& name, const oc
   octave_value_list retval;
 
   octave_value fcn = symbol_table::find_function (name, args);
 
   if (fcn.is_defined ())
     retval = fcn.do_multi_index_op (nargout, args);
   else
     {
-      maybe_missing_function_hook (name);
-      if (! error_state)
-        error ("feval: function '%s' not found", name.c_str ());
+      try
+        {
+          maybe_missing_function_hook (name);
+        }
+      catch (const octave_execution_exception&)
+        {
+          error ("feval: function '%s' not found", name.c_str ());
+        }
     }
 
   return retval;
 }
 
 octave_value_list
 feval (octave_function *fcn, const octave_value_list& args, int nargout)
 {
@@ -4703,22 +4693,19 @@ feval (const octave_value_list& args, in
   if (nargin > 0)
     {
       octave_value f_arg = args(0);
 
       if (f_arg.is_string ())
         {
           std::string name = f_arg.string_value ();
 
-          if (! error_state)
-            {
-              octave_value_list tmp_args = get_feval_args (args);
-
-              retval = feval (name, tmp_args, nargout);
-            }
+          octave_value_list tmp_args = get_feval_args (args);
+
+          retval = feval (name, tmp_args, nargout);
         }
       else if (f_arg.is_function_handle ()
                || f_arg.is_anonymous_function ()
                || f_arg.is_inline_function ())
         {
           const octave_value_list tmp_args = get_feval_args (args);
 
           retval = f_arg.do_multi_index_op (nargout, tmp_args);
@@ -4873,29 +4860,28 @@ eval_string (const std::string& eval_str
 
                       do_bind_ans = (! id->is_variable ());
                     }
                   else
                     do_bind_ans = (! expr->is_assignment_expression ());
 
                   retval = expr->rvalue (nargout);
 
-                  if (do_bind_ans && ! (error_state || retval.empty ()))
+                  if (do_bind_ans && ! retval.empty ())
                     bind_ans (retval(0), expr->print_result ());
 
                   if (nargout == 0)
                     retval = octave_value_list ();
                 }
               else if (nargout == 0)
                 parser.stmt_list->accept (*current_evaluator);
               else
                 error ("eval: invalid use of statement list");
 
-              if (error_state
-                  || tree_return_command::returning
+              if (tree_return_command::returning
                   || tree_break_command::breaking
                   || tree_continue_command::continuing)
                 break;
             }
           else if (parser.lexer.end_of_input)
             break;
         }
     }
@@ -5153,65 +5139,62 @@ Like @code{eval}, except that the expres
 
           if (context == "caller")
             octave_call_stack::goto_caller_frame ();
           else if (context == "base")
             octave_call_stack::goto_base_frame ();
           else
             error ("evalin: CONTEXT must be \"caller\" or \"base\"");
 
-          if (! error_state)
+          frame.add_fcn (octave_call_stack::pop);
+
+          if (nargin > 2)
+            {
+              frame.protect_var (buffer_error_messages);
+              buffer_error_messages++;
+            }
+
+          int parse_status = 0;
+
+          bool execution_error = false;
+
+          octave_value_list tmp;
+
+          try
+            {
+              tmp = eval_string (args(1), nargout > 0,
+                                 parse_status, nargout);
+            }
+          catch (const octave_execution_exception&)
             {
-              frame.add_fcn (octave_call_stack::pop);
-
-              if (nargin > 2)
-                {
-                  frame.protect_var (buffer_error_messages);
-                  buffer_error_messages++;
-                }
-
-              int parse_status = 0;
-
-              bool execution_error = false;
-
-              octave_value_list tmp;
-
-              try
-                {
-                  tmp = eval_string (args(1), nargout > 0,
-                                     parse_status, nargout);
-                }
-              catch (const octave_execution_exception&)
-                {
-                  execution_error = true;
-                }
-
-              if (nargin > 2 && (parse_status != 0 || execution_error))
-                {
-                  // Set up for letting the user print any messages from
-                  // errors that occurred in the first part of this eval().
-
-                  buffer_error_messages--;
-
-                  tmp = eval_string (args(2), nargout > 0,
-                                     parse_status, nargout);
-
-                  retval = (nargout > 0) ? tmp : octave_value_list ();
-                }
-              else
-                {
-                  if (nargout > 0)
-                    retval = tmp;
-
-                  // FIXME: we should really be rethrowing whatever
-                  // exception occurred, not just throwing an
-                  // execution exception.
-                  if (execution_error)
-                    octave_throw_execution_exception ();
-                }
+              execution_error = true;
+            }
+
+          if (nargin > 2 && (parse_status != 0 || execution_error))
+            {
+              // Set up for letting the user print any messages from
+              // errors that occurred in the first part of this eval().
+
+              buffer_error_messages--;
+
+              tmp = eval_string (args(2), nargout > 0,
+                                 parse_status, nargout);
+
+              retval = (nargout > 0) ? tmp : octave_value_list ();
+            }
+          else
+            {
+              if (nargout > 0)
+                retval = tmp;
+
+              // FIXME: we should really be rethrowing whatever
+              // exception occurred, not just throwing an
+              // execution exception.
+              if (execution_error)
+                octave_throw_execution_exception ();
             }
         }
       else
         error ("evalin: CONTEXT must be a string");
     }
   else
     print_usage ();
 
