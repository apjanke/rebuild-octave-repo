# HG changeset patch
# User jwe
# Date 856601062 0
#      Sat Feb 22 08:44:22 1997 +0000
# Node ID 2b5c27299cde17b75f69df6851e16e2f4e480a27
# Parent  df8c732b4fb28d7518ffb847ca1cd57fc7424ec8
[project @ 1997-02-22 08:40:55 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,23 @@
+Sat Feb 22 01:06:22 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* polynomial/conv.m: Check inputs with is_vector(), not is_matrix().
+	* polynomial/deconv.m: Likewise.
+	* polynomial/polyderiv.m: Likewise.
+	* polynomial/polyinteg.m: Likewise.
+	* polynomial/polyreduce.m: Likewise.
+	* polynomial/polyval.m: Likewise.
+	* polynomial/polyvalm.m: Likewise.
+	* general/postpad.m: Likewise.
+	* general/prepad.m: Likewise.
+
+	* polynomial/compan.m: Check input with is_vector(), not
+	is_matrix().  Handle scalar case.
+
 Fri Feb 21 13:36:58 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/contour.m: Order data so that it is consistent with
 	meshgrid and mesh.
 
 	* plot/meshdom.m, plot/meshgrid.m: Change help message.
 	* plot/sombrero.m: Use meshgrid, not meshdom.
 
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -33,17 +33,17 @@ function y = postpad (x, l, c)
   ##  June 1994
 
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("postpad (x, l) or postpad (x, l, c)");
   endif
 
-  if (is_matrix (x))
+  if (! is_vector (x))
     error ("first argument must be a vector");
   elseif (! is_scalar (l))
     error ("second argument must be a scaler");
   endif
 
   if (l < 0)
     error ("second argument must be non-negative");
   endif
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -33,17 +33,17 @@ function y = prepad (x, l, c)
   ##  June 1994
 
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("prepad (x, l) or prepad (x, l, c)");
   endif
 
-  if (is_matrix (x))
+  if (! is_vector (x))
     error ("first argument must be a vector");
   elseif (! is_scalar (l))
     error ("second argument must be a scaler");
   endif
 
   if (l < 0)
     error ("second argument must be non-negative");
   endif
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -47,23 +47,28 @@
 ## Adapted-By: jwe
 
 function A = compan (c)
 
   if (nargin != 1)
     usage ("compan (vector)");
   endif
 
-  if(is_matrix (c))
+  if (! is_vector (c))
     error("compan: expecting a vector argument.");
   endif
 
   ## Ensure that c is a row vector.
 
-  if(rows(c) > 1)
+  if (rows (c) > 1)
     c = c.';
   endif
 
   n = length (c);
-  A = diag (ones (n-2, 1), -1);
-  A (1, :) = -c (2:n) /c (1);
+
+  if (n == 1)
+    A = [];
+  else
+    A = diag (ones (n-2, 1), -1);
+    A(1,:) = -c(2:n) / c(1);
+  endif
 
 endfunction
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -34,17 +34,17 @@
 ## Adapted-By: jwe
 
 function y = conv (a, b)
 
   if (nargin != 2)
     usage ("conv(a, b)");
   endif
 
-  if (is_matrix (a) || is_matrix (b))
+  if (! (is_vector (a) && is_vector (b)))
     error("conv: both arguments must be vectors");
   endif
 
   la = length (a);
   lb = length (b);
 
   ly = la + lb - 1;
 
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -36,17 +36,17 @@
 ## Adapted-By: jwe
 
 function [b, r] = deconv (y, a)
 
   if (nargin != 2)
     usage ("deconv (y, a)");
   endif
 
-  if (is_matrix (y) || is_matrix (a))
+  if (! (is_vector (y) && is_vector (a)))
     error("conv: both arguments must be vectors");
   endif
 
   la = length (a);
   ly = length (y);
 
   lb = ly - la + 1;
 
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -30,17 +30,17 @@
 ## Adapted-By: jwe
 
 function q = polyderiv (p)
 
   if (nargin != 1)
     usage ("polyderiv (vector)");
   endif
 
-  if (is_matrix (p))
+  if (! is_vector (p))
     error ("argument must be a vector");
   endif
 
   lp = length (p);
   if (lp == 1)
     q = 0;
     return;
   elseif (lp == 0)
diff --git a/scripts/polynomial/polyinteg.m b/scripts/polynomial/polyinteg.m
--- a/scripts/polynomial/polyinteg.m
+++ b/scripts/polynomial/polyinteg.m
@@ -32,17 +32,17 @@
 ## Adapted-By: jwe
 
 function p = polyinteg (p)
 
   if(nargin != 1)
     usage ("polyinteg (vector)");
   endif
 
-  if (is_matrix (p))
+  if (! (is_vector (p) || isempty (p)))
     error ("argument must be a vector");
   endif
 
   lp = length (p);
 
   if (lp == 0)
     p = [];
     return;
diff --git a/scripts/polynomial/polyreduce.m b/scripts/polynomial/polyreduce.m
--- a/scripts/polynomial/polyreduce.m
+++ b/scripts/polynomial/polyreduce.m
@@ -26,29 +26,41 @@
 ##           polyderiv, polyinteg
 
 ## Author: Tony Richardson <amr@mpl.ucsd.edu>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function p = polyreduce (p)
 
-  index = find (p == 0);
+  if (nargin != 1)
+    usage ("polyreduce (p)");
+  endif
 
-  if (length (index) != 0)
+  if (! (is_vector (p) || isempty (p)))
+    error ("polyreduce: argument must be a vector");
+  endif
 
-    index = find (index == 1:length (index));
+  if (! isempty (p))
+
+    index = find (p == 0);
 
     if (length (index) != 0)
 
-      if (length (p) > 1)
-	p = p (index (length (index))+1:length (p));
-      endif
+      index = find (index == 1:length (index));
+
+      if (length (index) != 0)
 
-      if (length (p) == 0)
-	p = 0;
+      	if (length (p) > 1)
+	  p = p (index (length (index))+1:length (p));
+      	endif
+
+      	if (length (p) == 0)
+	  p = 0;
+      	endif
+
       endif
 
     endif
 
   endif
 
 endfunction
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -40,20 +40,25 @@
 ## Adapted-By: jwe
 
 function y = polyval (c, x)
 
   if (nargin != 2)
     usage ("polyval (c, x)");
   endif
 
-  if(is_matrix (c))
+  if (! (is_vector (c) || isempty (c)))
     error ("poly: first argument must be a vector.");
   endif
 
+  if (isempty (x))
+    y = [];
+    return;
+  endif
+
   if (length (c) == 0)
     y = c;
     return;
   endif
 
   n = length (c);
   y = c (1) * ones (rows (x), columns (x));
   for index = 2:n
diff --git a/scripts/polynomial/polyvalm.m b/scripts/polynomial/polyvalm.m
--- a/scripts/polynomial/polyvalm.m
+++ b/scripts/polynomial/polyvalm.m
@@ -41,21 +41,26 @@
 ## Adapted-By: jwe
 
 function y = polyvalm (c, x)
 
   if(nargin != 2)
     usage ("polyvalm (c, x)");
   endif
 
-  if (is_matrix (c))
+  if (! (is_vector (c) || isempty (c)))
     error("poly: first argument must be a vector.");
   endif
 
   if(! is_square (x))
     error("poly: second argument must be a square matrix.");
   endif
 
-  [v, d] = eig(x);
+  if (isempty (c))
+    y = [];
+    return;
+  endif
+
+  [v, d] = eig (x);
 
   y = v * diag (polyval (c, diag (d))) * v';
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 Fri Feb 21 15:35:18 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l: Require flex 2.5 or later (we really want 2.5.4 or later,
+	but there seems to be no good way to check the patchlevel).
+
 	* oct-stream.cc (octave_base_stream::oscanf): Instead of returning
 	an error, just quit processing after a conversion fails.
 
 Thu Feb 20 02:58:05 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.4 released.
 
 Wed Feb 19 10:30:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -58,16 +58,22 @@ Software Foundation, 59 Temple Place - S
 #include "pt-mat.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "utils.h"
 #include "variables.h"
 #include <y.tab.h>
 #include <oct-gperf.h>
 
+#if ! (defined (FLEX_SCANNER) \
+       && defined (YY_FLEX_MAJOR_VERSION) && YY_FLEX_MAJOR_VERSION >= 2 \
+       && defined (YY_FLEX_MINOR_VERSION) && YY_FLEX_MINOR_VERSION >= 5)
+#error lex.l requires flex version 2.5.4 or later
+#endif
+
 // Flags that need to be shared between the lexer and parser.
 lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
 // one of the macros defined there uses token_stack.
 //
diff --git a/test/octave.test/poly/compan-1.m b/test/octave.test/poly/compan-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-1.m
@@ -0,0 +1,1 @@
+all (all (compan ([1, 2, 3]) == [-2, -3; 1, 0]))
diff --git a/test/octave.test/poly/compan-2.m b/test/octave.test/poly/compan-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-2.m
@@ -0,0 +1,1 @@
+all (all (compan ([1; 2; 3]) == [-2, -3; 1, 0]))
diff --git a/test/octave.test/poly/compan-3.m b/test/octave.test/poly/compan-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-3.m
@@ -0,0 +1,1 @@
+isempty (compan (4))
diff --git a/test/octave.test/poly/compan-4.m b/test/octave.test/poly/compan-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-4.m
@@ -0,0 +1,1 @@
+all (all (compan ([3, 2, 1]) == [-2/3, -1/3; 1, 0]))
diff --git a/test/octave.test/poly/compan-5.m b/test/octave.test/poly/compan-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-5.m
@@ -0,0 +1,1 @@
+compan ([1,2;3,4])
diff --git a/test/octave.test/poly/compan-6.m b/test/octave.test/poly/compan-6.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/compan-6.m
@@ -0,0 +1,1 @@
+compan ([])
diff --git a/test/octave.test/poly/conv-1.m b/test/octave.test/poly/conv-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-1.m
@@ -0,0 +1,1 @@
+all (all (conv (ones (3, 1), ones (3, 1)) == [1, 2, 3, 2, 1]))
diff --git a/test/octave.test/poly/conv-2.m b/test/octave.test/poly/conv-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-2.m
@@ -0,0 +1,1 @@
+all (all (conv (ones (1, 3), ones (3, 1)) == [1, 2, 3, 2, 1]))
diff --git a/test/octave.test/poly/conv-3.m b/test/octave.test/poly/conv-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-3.m
@@ -0,0 +1,1 @@
+all (all (conv (3, [1, 2, 3]) == [3, 6, 9]))
diff --git a/test/octave.test/poly/conv-4.m b/test/octave.test/poly/conv-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-4.m
@@ -0,0 +1,1 @@
+conv ([1, 2; 3, 4], 3)
diff --git a/test/octave.test/poly/conv-5.m b/test/octave.test/poly/conv-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-5.m
@@ -0,0 +1,1 @@
+conv (2, 3)
diff --git a/test/octave.test/poly/conv-6.m b/test/octave.test/poly/conv-6.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/conv-6.m
@@ -0,0 +1,1 @@
+conv (2, [])
diff --git a/test/octave.test/poly/deconv-1.m b/test/octave.test/poly/deconv-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/deconv-1.m
@@ -0,0 +1,2 @@
+[b, r] = deconv ([3, 6, 9, 9], [1, 2, 3]);
+all (all (b == [3, 0])) && r == 9
diff --git a/test/octave.test/poly/deconv-2.m b/test/octave.test/poly/deconv-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/deconv-2.m
@@ -0,0 +1,2 @@
+[b, r] = deconv ([3, 6], [1, 2, 3]);
+b == 0 && all (all (r == [3, 6]))
diff --git a/test/octave.test/poly/deconv-3.m b/test/octave.test/poly/deconv-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/deconv-3.m
@@ -0,0 +1,2 @@
+[b, r] = deconv ([3, 6], [1; 2; 3]);
+b == 0 && all (all (r == [3, 6]))
diff --git a/test/octave.test/poly/deconv-4.m b/test/octave.test/poly/deconv-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/deconv-4.m
@@ -0,0 +1,1 @@
+[b, r] = deconv ([3, 6], [1, 2; 3, 4]);
diff --git a/test/octave.test/poly/deconv-5.m b/test/octave.test/poly/deconv-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/deconv-5.m
@@ -0,0 +1,2 @@
+[b, r] = deconv ([3; 6], [1, 2, 3]);
+b == 0 && all (all (r == [3, 6]))
diff --git a/test/octave.test/poly/poly-1.m b/test/octave.test/poly/poly-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/poly-1.m
@@ -0,0 +1,1 @@
+all (all (poly ([1, 2, 3]) == [1, -6, 11, -6]))
diff --git a/test/octave.test/poly/poly-2.m b/test/octave.test/poly/poly-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/poly-2.m
@@ -0,0 +1,1 @@
+all (all (poly ([1, 2; 3, 4]) - [1, -5, -2] < 2 * eps))
diff --git a/test/octave.test/poly/poly-3.m b/test/octave.test/poly/poly-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/poly-3.m
@@ -0,0 +1,1 @@
+poly ([1, 2, 3; 4, 5, 6])
diff --git a/test/octave.test/poly/poly-4.m b/test/octave.test/poly/poly-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/poly-4.m
@@ -0,0 +1,1 @@
+poly ([])
diff --git a/test/octave.test/poly/poly.exp b/test/octave.test/poly/poly.exp
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/poly.exp
@@ -0,0 +1,203 @@
+set test compan-1
+set prog_output "ans = 1"
+do_test compan-1.m
+
+set test compan-2
+set prog_output "ans = 1"
+do_test compan-2.m
+
+set test compan-3
+set prog_output "ans = 1"
+do_test compan-3.m
+
+set test compan-4
+set prog_output "ans = 1"
+do_test compan-4.m
+
+set test compan-5
+set prog_output "error:.*"
+do_test compan-5.m
+
+set test compan-6
+set prog_output "error:.*"
+do_test compan-6.m
+
+set test conv-1
+set prog_output "ans = 1"
+do_test conv-1.m
+
+set test conv-2
+set prog_output "ans = 1"
+do_test conv-2.m
+
+set test conv-3
+set prog_output "ans = 1"
+do_test conv-3.m
+
+set test conv-4
+set prog_output "error:.*"
+do_test conv-4.m
+
+set test conv-5
+set prog_output "ans = 6"
+do_test conv-5.m
+
+set test conv-6
+set prog_output "error:.*"
+do_test conv-6.m
+
+set test deconv-1
+set prog_output "ans = 1"
+do_test deconv-1.m
+
+set test deconv-2
+set prog_output "ans = 1"
+do_test deconv-2.m
+
+set test deconv-3
+set prog_output "ans = 1"
+do_test deconv-3.m
+
+set test deconv-4
+set prog_output "error:.*"
+do_test deconv-4.m
+
+set test deconv-5
+set prog_output "error:.*"
+do_test deconv-5.m
+
+set test poly-1
+set prog_output "ans = 1"
+do_test poly-1.m
+
+set test poly-2
+set prog_output "ans = 1"
+do_test poly-2.m
+
+set test poly-3
+set prog_output "error:.*"
+do_test poly-3.m
+
+set test poly-4
+set prog_output "ans = 1"
+do_test poly-4.m
+
+set test polyderiv-1
+set prog_output "ans = 1"
+do_test polyderiv-1.m
+
+set test polyderiv-2
+set prog_output "ans = 1"
+do_test polyderiv-2.m
+
+set test polyderiv-3
+set prog_output "error:.*"
+do_test polyderiv-3.m
+
+set test polyderiv-4
+set prog_output "error:.*"
+do_test polyderiv-4.m
+
+set test polyfit-1
+set prog_output "ans = 1"
+do_test polyfit-1.m
+
+set test polyfit-2
+set prog_output "ans = 1"
+do_test polyfit-2.m
+
+set test polyfit-3
+set prog_output "error:.*"
+do_test polyfit-3.m
+
+set test polyfit-4
+set prog_output "error:.*"
+do_test polyfit-4.m
+
+set test polyfit-5
+set prog_output "error:.*"
+do_test polyfit-5.m
+
+set test polyinteg-1
+set prog_output "ans = 1"
+do_test polyinteg-1.m
+
+set test polyinteg-2
+set prog_output "ans = 1"
+do_test polyinteg-2.m
+
+set test polyinteg-3
+set prog_output "ans = 1"
+do_test polyinteg-3.m
+
+set test polyinteg-4
+set prog_output "error:.*"
+do_test polyinteg-4.m
+
+set test polyreduce-1
+set prog_output "ans = 1"
+do_test polyreduce-1.m
+
+set test polyreduce-2
+set prog_output "ans = 1"
+do_test polyreduce-2.m
+
+set test polyreduce-3
+set prog_output "ans = 1"
+do_test polyreduce-3.m
+
+set test polyreduce-4
+set prog_output "ans = 1"
+do_test polyreduce-4.m
+
+set test polyreduce-5
+set prog_output "error:.*"
+do_test polyreduce-5.m
+
+set test polyval-1
+set prog_output "ans = 1"
+do_test polyval-1.m
+
+set test polyval-2
+set prog_output "ans = 1"
+do_test polyval-2.m
+
+set test polyval-3
+set prog_output "ans = 1"
+do_test polyval-3.m
+
+set test polyval-4
+set prog_output "ans = 1"
+do_test polyval-4.m
+
+set test polyval-5
+set prog_output "error:.*"
+do_test polyval-5.m
+
+set test polyval-6
+set prog_output "ans = 1"
+do_test polyval-6.m
+
+set test polyvalm-1
+set prog_output "ans = 1"
+do_test polyvalm-1.m
+
+set test polyvalm-2
+set prog_output "error:.*"
+do_test polyvalm-2.m
+
+set test residue-1
+set prog_output "ans = 1"
+do_test residue-1.m
+
+set test roots-1
+set prog_output "ans = 1"
+do_test roots-1.m
+
+set test roots-2
+set prog_output "ans = 1"
+do_test roots-2.m
+
+set test roots-3
+set prog_output "error:.*"
+do_test roots-3.m
diff --git a/test/octave.test/poly/polyderiv-1.m b/test/octave.test/poly/polyderiv-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyderiv-1.m
@@ -0,0 +1,1 @@
+all (all (polyderiv ([1, 2, 3]) == [2, 2]))
\ No newline at end of file
diff --git a/test/octave.test/poly/polyderiv-2.m b/test/octave.test/poly/polyderiv-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyderiv-2.m
@@ -0,0 +1,1 @@
+polyderiv (13) == 0
diff --git a/test/octave.test/poly/polyderiv-3.m b/test/octave.test/poly/polyderiv-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyderiv-3.m
@@ -0,0 +1,1 @@
+polyderiv ([])
diff --git a/test/octave.test/poly/polyderiv-4.m b/test/octave.test/poly/polyderiv-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyderiv-4.m
@@ -0,0 +1,1 @@
+polyderiv ([1, 2; 3, 4])
diff --git a/test/octave.test/poly/polyfit-1.m b/test/octave.test/poly/polyfit-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyfit-1.m
@@ -0,0 +1,2 @@
+x = [-2, -1, 0, 1, 2];
+all (all (polyfit (x, x.^2+x+1, 2) - [1; 1; 1] < 4*eps))
diff --git a/test/octave.test/poly/polyfit-2.m b/test/octave.test/poly/polyfit-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyfit-2.m
@@ -0,0 +1,2 @@
+x = [-2, -1, 0, 1, 2];
+all (all (polyfit (x, x.^2+x+1, 3) - [0; 1; 1; 1] < 8*eps))
diff --git a/test/octave.test/poly/polyfit-3.m b/test/octave.test/poly/polyfit-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyfit-3.m
@@ -0,0 +1,1 @@
+polyfit ([1, 2; 3, 4], [1, 2; 3, 4], 4)
diff --git a/test/octave.test/poly/polyfit-4.m b/test/octave.test/poly/polyfit-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyfit-4.m
@@ -0,0 +1,2 @@
+x = [-2, -1, 0, 1, 2];
+polyfit (x, x.^2+x+1)
diff --git a/test/octave.test/poly/polyfit-5.m b/test/octave.test/poly/polyfit-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyfit-5.m
@@ -0,0 +1,2 @@
+x = [-2, -1, 0, 1, 2];
+polyfit (x, x.^2+x+1, [])
diff --git a/test/octave.test/poly/polyinteg-1.m b/test/octave.test/poly/polyinteg-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyinteg-1.m
@@ -0,0 +1,1 @@
+all (all (polyinteg ([2, 2]) == [1, 2, 0]))
diff --git a/test/octave.test/poly/polyinteg-2.m b/test/octave.test/poly/polyinteg-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyinteg-2.m
@@ -0,0 +1,1 @@
+isempty (polyinteg ([]))
diff --git a/test/octave.test/poly/polyinteg-3.m b/test/octave.test/poly/polyinteg-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyinteg-3.m
@@ -0,0 +1,1 @@
+all (all (polyinteg (3) == [3, 0]))
diff --git a/test/octave.test/poly/polyinteg-4.m b/test/octave.test/poly/polyinteg-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyinteg-4.m
@@ -0,0 +1,1 @@
+polyinteg ([1, 2; 3, 4])
diff --git a/test/octave.test/poly/polyreduce-1.m b/test/octave.test/poly/polyreduce-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyreduce-1.m
@@ -0,0 +1,1 @@
+all (all (polyreduce ([0, 0, 1, 2, 3]) == [1, 2, 3]))
diff --git a/test/octave.test/poly/polyreduce-2.m b/test/octave.test/poly/polyreduce-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyreduce-2.m
@@ -0,0 +1,1 @@
+all (all (polyreduce ([1, 2, 3, 0, 0]) == [1, 2, 3, 0, 0]))
diff --git a/test/octave.test/poly/polyreduce-3.m b/test/octave.test/poly/polyreduce-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyreduce-3.m
@@ -0,0 +1,1 @@
+all (all (polyreduce ([1, 0, 3]) == [1, 0, 3]))
diff --git a/test/octave.test/poly/polyreduce-4.m b/test/octave.test/poly/polyreduce-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyreduce-4.m
@@ -0,0 +1,1 @@
+isempty (polyreduce ([]))
diff --git a/test/octave.test/poly/polyreduce-5.m b/test/octave.test/poly/polyreduce-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyreduce-5.m
@@ -0,0 +1,1 @@
+polyreduce ([1, 2; 3, 4])
diff --git a/test/octave.test/poly/polyval-1.m b/test/octave.test/poly/polyval-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-1.m
@@ -0,0 +1,1 @@
+polyval ([1, 1, 1], 2) == 7
diff --git a/test/octave.test/poly/polyval-2.m b/test/octave.test/poly/polyval-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-2.m
@@ -0,0 +1,1 @@
+all (all (polyval ([1, 1, 1], [0; 1; 2]) == [1; 3; 7]))
diff --git a/test/octave.test/poly/polyval-3.m b/test/octave.test/poly/polyval-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-3.m
@@ -0,0 +1,1 @@
+isempty (polyval ([1, 1, 1], []))
diff --git a/test/octave.test/poly/polyval-4.m b/test/octave.test/poly/polyval-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-4.m
@@ -0,0 +1,1 @@
+all (all (polyval ([1, 1, 1], [-1, 0; 1, 2]) == [1, 1; 3, 7]))
diff --git a/test/octave.test/poly/polyval-5.m b/test/octave.test/poly/polyval-5.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-5.m
@@ -0,0 +1,1 @@
+polyval ([1, 2; 3, 4], [-1, 0; 1, 2])
diff --git a/test/octave.test/poly/polyval-6.m b/test/octave.test/poly/polyval-6.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyval-6.m
@@ -0,0 +1,1 @@
+isempty (polyval ([], [-1, 0; 1, 2]))
diff --git a/test/octave.test/poly/polyvalm-1.m b/test/octave.test/poly/polyvalm-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyvalm-1.m
@@ -0,0 +1,1 @@
+isempty (polyvalm ([], [1, 2; 3, 4]))
diff --git a/test/octave.test/poly/polyvalm-2.m b/test/octave.test/poly/polyvalm-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/polyvalm-2.m
@@ -0,0 +1,1 @@
+polyvalm ([1, 1, 1], [1, 2; 3, 4; 5, 6])
diff --git a/test/octave.test/poly/residue-1.m b/test/octave.test/poly/residue-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/residue-1.m
@@ -0,0 +1,7 @@
+b = [1, 1, 1];
+a = [1, -5, 8, -4];
+[r, p, k, e] = residue (b, a);
+(abs (r - [-2; 7; 3]) < sqrt (eps)
+ && abs (p - [2; 2; 1]) < sqrt (eps)
+ && isempty (k)
+ && e == [1; 2; 1])
diff --git a/test/octave.test/poly/roots-1.m b/test/octave.test/poly/roots-1.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/roots-1.m
@@ -0,0 +1,1 @@
+all (all (abs (roots ([1, -6, 11, -6]) - [3; 2; 1]) < sqrt (eps)))
diff --git a/test/octave.test/poly/roots-2.m b/test/octave.test/poly/roots-2.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/roots-2.m
@@ -0,0 +1,1 @@
+isempty (roots ([]))
diff --git a/test/octave.test/poly/roots-3.m b/test/octave.test/poly/roots-3.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/poly/roots-3.m
@@ -0,0 +1,1 @@
+roots ([1, 2; 3, 4])
