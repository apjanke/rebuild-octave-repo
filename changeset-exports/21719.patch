# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463455567 14400
#      Mon May 16 23:26:07 2016 -0400
# Node ID ff054947d1327e040e7f81339b567477b3bf4bc8
# Parent  601ee461f23198c92cf03951c71b075b5a99de22
use bool instead of int for some logical flags

* CMatrix.cc, CMatrix.h, CSparse.cc, CSparse.h, dMatrix.cc, dMatrix.h,
dSparse.cc, dSparse.h, fCMatrix.cc, fCMatrix.h, fMatrix.cc, fMatrix.h:
Use bool instead of int for logical flags calc_cond,
columns_are_real_only, and force.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -928,18 +928,18 @@ ComplexMatrix
 ComplexMatrix::inverse (octave_idx_type& info) const
 {
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 ComplexMatrix
-ComplexMatrix::inverse (octave_idx_type& info, double& rcon, int force,
-                        int calc_cond) const
+ComplexMatrix::inverse (octave_idx_type& info, double& rcon, bool force,
+                        bool calc_cond) const
 {
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, force, calc_cond);
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (MatrixType &mattype) const
 {
@@ -952,17 +952,17 @@ ComplexMatrix
 ComplexMatrix::inverse (MatrixType &mattype, octave_idx_type& info) const
 {
   double rcon;
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 ComplexMatrix
 ComplexMatrix::tinverse (MatrixType &mattype, octave_idx_type& info,
-                         double& rcon, int force, int calc_cond) const
+                         double& rcon, bool force, bool calc_cond) const
 {
   ComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -1007,17 +1007,17 @@ ComplexMatrix::tinverse (MatrixType &mat
   if (info == -1 && ! force)
     retval = *this; // Restore matrix contents.
 
   return retval;
 }
 
 ComplexMatrix
 ComplexMatrix::finverse (MatrixType &mattype, octave_idx_type& info,
-                         double& rcon, int force, int calc_cond) const
+                         double& rcon, bool force, bool calc_cond) const
 {
   ComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -1090,17 +1090,17 @@ ComplexMatrix::finverse (MatrixType &mat
   if (info != 0)
     mattype.mark_as_rectangular ();
 
   return retval;
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (MatrixType &mattype, octave_idx_type& info,
-                        double& rcon, int force, int calc_cond) const
+                        double& rcon, bool force, bool calc_cond) const
 {
   int typ = mattype.type (false);
   ComplexMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
@@ -1514,26 +1514,26 @@ ComplexDET
 ComplexMatrix::determinant (octave_idx_type& info) const
 {
   double rcon;
   return determinant (info, rcon, 0);
 }
 
 ComplexDET
 ComplexMatrix::determinant (octave_idx_type& info, double& rcon,
-                            int calc_cond) const
+                            bool calc_cond) const
 {
   MatrixType mattype (*this);
   return determinant (mattype, info, rcon, calc_cond);
 }
 
 ComplexDET
 ComplexMatrix::determinant (MatrixType& mattype,
                             octave_idx_type& info, double& rcon,
-                            int calc_cond) const
+                            bool calc_cond) const
 {
   ComplexDET retval (1.0);
 
   info = 0;
   rcon = 0.0;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
@@ -3757,23 +3757,23 @@ min (const ComplexMatrix& a, const Compl
       ("two-arg min requires same size arguments");
 
   EMPTY_RETURN_CHECK (ComplexMatrix);
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
-      int columns_are_real_only = 1;
+      bool columns_are_real_only = true;
       for (octave_idx_type i = 0; i < nr; i++)
         {
           octave_quit ();
           if (std::imag (a(i, j)) != 0.0 || std::imag (b(i, j)) != 0.0)
             {
-              columns_are_real_only = 0;
+              columns_are_real_only = false;
               break;
             }
         }
 
       if (columns_are_real_only)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             result(i, j) = xmin (std::real (a(i, j)), std::real (b(i, j)));
@@ -3842,23 +3842,23 @@ max (const ComplexMatrix& a, const Compl
       ("two-arg max requires same size arguments");
 
   EMPTY_RETURN_CHECK (ComplexMatrix);
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
-      int columns_are_real_only = 1;
+      bool columns_are_real_only = true;
       for (octave_idx_type i = 0; i < nr; i++)
         {
           octave_quit ();
           if (std::imag (a(i, j)) != 0.0 || std::imag (b(i, j)) != 0.0)
             {
-              columns_are_real_only = 0;
+              columns_are_real_only = false;
               break;
             }
         }
 
       if (columns_are_real_only)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             {
diff --git a/liboctave/array/CMatrix.h b/liboctave/array/CMatrix.h
--- a/liboctave/array/CMatrix.h
+++ b/liboctave/array/CMatrix.h
@@ -184,47 +184,47 @@ public:
   void resize (octave_idx_type nr, octave_idx_type nc,
                const Complex& rfv = Complex (0))
   {
     MArray<Complex>::resize (dim_vector (nr, nc), rfv);
   }
 
 private:
   ComplexMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
-                          double& rcon, int force, int calc_cond) const;
+                          double& rcon, bool force, bool calc_cond) const;
 
   ComplexMatrix finverse (MatrixType &mattype, octave_idx_type& info,
-                          double& rcon, int force, int calc_cond) const;
+                          double& rcon, bool force, bool calc_cond) const;
 
 public:
   ComplexMatrix inverse (void) const;
   ComplexMatrix inverse (octave_idx_type& info) const;
-  ComplexMatrix inverse (octave_idx_type& info, double& rcon, int force = 0,
-                         int calc_cond = 1) const;
+  ComplexMatrix inverse (octave_idx_type& info, double& rcon,
+                         bool force = false, bool calc_cond = true) const;
 
   ComplexMatrix inverse (MatrixType &mattype) const;
   ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info,
-                         double& rcon, int force = 0,
-                         int calc_cond = 1) const;
+                         double& rcon, bool force = false,
+                         bool calc_cond = true) const;
 
   ComplexMatrix pseudo_inverse (double tol = 0.0) const;
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
   ComplexMatrix fourier2d (void) const;
   ComplexMatrix ifourier2d (void) const;
 
   ComplexDET determinant (void) const;
   ComplexDET determinant (octave_idx_type& info) const;
   ComplexDET determinant (octave_idx_type& info, double& rcon,
-                          int calc_cond = 1) const;
+                          bool calc_cond = true) const;
   ComplexDET determinant (MatrixType &mattype, octave_idx_type& info,
-                          double& rcon, int calc_cond = 1) const;
+                          double& rcon, bool calc_cond = true) const;
 
   double rcond (void) const;
   double rcond (MatrixType &mattype) const;
 
 private:
   // Upper triangular matrix solvers
   ComplexMatrix utsolve (MatrixType &typ, const ComplexMatrix& b,
                          octave_idx_type& info, double& rcon,
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -1052,17 +1052,17 @@ SparseComplexMatrix::tinverse (MatrixTyp
       rcond = 1. / ainvnorm / anorm;
     }
 
   return retval;
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::inverse (MatrixType& mattype, octave_idx_type& info,
-                              double& rcond, int, int calc_cond) const
+                              double& rcond, bool, bool calc_cond) const
 {
   int typ = mattype.type (false);
   SparseComplexMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Diagonal || typ == MatrixType::Permuted_Diagonal)
@@ -1133,17 +1133,17 @@ ComplexDET
 SparseComplexMatrix::determinant (octave_idx_type& info) const
 {
   double rcond;
   return determinant (info, rcond, 0);
 }
 
 ComplexDET
 SparseComplexMatrix::determinant (octave_idx_type& err, double& rcond,
-                                  int) const
+                                  bool) const
 {
   ComplexDET retval;
 
 #ifdef HAVE_UMFPACK
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -159,23 +159,23 @@ private:
                                 const bool calccond = true) const;
 
 public:
   SparseComplexMatrix inverse (void) const;
   SparseComplexMatrix inverse (MatrixType& mattype) const;
   SparseComplexMatrix inverse (MatrixType& mattype,
                                octave_idx_type& info) const;
   SparseComplexMatrix inverse (MatrixType& mattype, octave_idx_type& info,
-                               double& rcond, int force = 0,
-                               int calc_cond = 1) const;
+                               double& rcond, bool force = false,
+                               bool calc_cond = true) const;
 
   ComplexDET determinant (void) const;
   ComplexDET determinant (octave_idx_type& info) const;
   ComplexDET determinant (octave_idx_type& info, double& rcond,
-                          int calc_cond = 1) const;
+                          bool calc_cond = true) const;
 
 private:
   // Diagonal matrix solvers
   ComplexMatrix dsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                         double& rcond, solve_singularity_handler sing_handler,
                         bool calc_cond = false) const;
 
   ComplexMatrix dsolve (MatrixType &typ, const ComplexMatrix& b,
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -620,18 +620,18 @@ Matrix
 Matrix::inverse (octave_idx_type& info) const
 {
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 Matrix
-Matrix::inverse (octave_idx_type& info, double& rcon, int force,
-                 int calc_cond) const
+Matrix::inverse (octave_idx_type& info, double& rcon, bool force,
+                 bool calc_cond) const
 {
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, force, calc_cond);
 }
 
 Matrix
 Matrix::inverse (MatrixType& mattype) const
 {
@@ -644,17 +644,17 @@ Matrix
 Matrix::inverse (MatrixType &mattype, octave_idx_type& info) const
 {
   double rcon;
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 Matrix
 Matrix::tinverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                  int force, int calc_cond) const
+                  bool force, bool calc_cond) const
 {
   Matrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -700,17 +700,17 @@ Matrix::tinverse (MatrixType &mattype, o
     retval = *this; // Restore matrix contents.
 
   return retval;
 }
 
 
 Matrix
 Matrix::finverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                  int force, int calc_cond) const
+                  bool force, bool calc_cond) const
 {
   Matrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -780,17 +780,17 @@ Matrix::finverse (MatrixType &mattype, o
   if (info != 0)
     mattype.mark_as_rectangular ();
 
   return retval;
 }
 
 Matrix
 Matrix::inverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                 int force, int calc_cond) const
+                 bool force, bool calc_cond) const
 {
   int typ = mattype.type (false);
   Matrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
@@ -1197,25 +1197,25 @@ Matrix::determinant (void) const
 DET
 Matrix::determinant (octave_idx_type& info) const
 {
   double rcon;
   return determinant (info, rcon, 0);
 }
 
 DET
-Matrix::determinant (octave_idx_type& info, double& rcon, int calc_cond) const
+Matrix::determinant (octave_idx_type& info, double& rcon, bool calc_cond) const
 {
   MatrixType mattype (*this);
   return determinant (mattype, info, rcon, calc_cond);
 }
 
 DET
 Matrix::determinant (MatrixType& mattype,
-                     octave_idx_type& info, double& rcon, int calc_cond) const
+                     octave_idx_type& info, double& rcon, bool calc_cond) const
 {
   DET retval (1.0);
 
   info = 0;
   rcon = 0.0;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
diff --git a/liboctave/array/dMatrix.h b/liboctave/array/dMatrix.h
--- a/liboctave/array/dMatrix.h
+++ b/liboctave/array/dMatrix.h
@@ -144,46 +144,46 @@ public:
 
   void resize (octave_idx_type nr, octave_idx_type nc, double rfv = 0)
   {
     MArray<double>::resize (dim_vector (nr, nc), rfv);
   }
 
 private:
   Matrix tinverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                   int force, int calc_cond) const;
+                   bool force, bool calc_cond) const;
 
   Matrix finverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                   int force, int calc_cond) const;
+                   bool force, bool calc_cond) const;
 
 public:
   Matrix inverse (void) const;
   Matrix inverse (octave_idx_type& info) const;
-  Matrix inverse (octave_idx_type& info, double& rcon, int force = 0,
-                  int calc_cond = 1) const;
+  Matrix inverse (octave_idx_type& info, double& rcon, bool force = false,
+                  bool calc_cond = true) const;
 
   Matrix inverse (MatrixType &mattype) const;
   Matrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   Matrix inverse (MatrixType &mattype, octave_idx_type& info, double& rcon,
-                  int force = 0, int calc_cond = 1) const;
+                  bool force = false, bool calc_cond = true) const;
 
   Matrix pseudo_inverse (double tol = 0.0) const;
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
   ComplexMatrix fourier2d (void) const;
   ComplexMatrix ifourier2d (void) const;
 
   DET determinant (void) const;
   DET determinant (octave_idx_type& info) const;
   DET determinant (octave_idx_type& info, double& rcon,
-                   int calc_cond = 1) const;
+                   bool calc_cond = true) const;
   DET determinant (MatrixType &mattype, octave_idx_type& info,
-                   double& rcon, int calc_cond = 1) const;
+                   double& rcon, bool calc_cond = true) const;
 
   double rcond (void) const;
   double rcond (MatrixType &mattype) const;
 
 private:
   // Upper triangular matrix solvers
   Matrix utsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                   double& rcon, solve_singularity_handler sing_handler,
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -1142,17 +1142,17 @@ SparseMatrix::tinverse (MatrixType &matt
       rcond = 1. / ainvnorm / anorm;
     }
 
   return retval;
 }
 
 SparseMatrix
 SparseMatrix::inverse (MatrixType &mattype, octave_idx_type& info,
-                       double& rcond, int, int calc_cond) const
+                       double& rcond, bool, bool calc_cond) const
 {
   int typ = mattype.type (false);
   SparseMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Diagonal || typ == MatrixType::Permuted_Diagonal)
@@ -1219,17 +1219,17 @@ SparseMatrix::determinant (void) const
 DET
 SparseMatrix::determinant (octave_idx_type& info) const
 {
   double rcond;
   return determinant (info, rcond, 0);
 }
 
 DET
-SparseMatrix::determinant (octave_idx_type& err, double& rcond, int) const
+SparseMatrix::determinant (octave_idx_type& err, double& rcond, bool) const
 {
   DET retval;
 
 #ifdef HAVE_UMFPACK
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -159,22 +159,23 @@ private:
                          double& rcond, const bool force = false,
                          const bool calccond = true) const;
 
 public:
   SparseMatrix inverse (void) const;
   SparseMatrix inverse (MatrixType& mattype) const;
   SparseMatrix inverse (MatrixType& mattype, octave_idx_type& info) const;
   SparseMatrix inverse (MatrixType& mattype, octave_idx_type& info,
-                        double& rcond, int force = 0, int calc_cond = 1) const;
+                        double& rcond, bool force = false,
+                        bool calc_cond = true) const;
 
   DET determinant (void) const;
   DET determinant (octave_idx_type& info) const;
   DET determinant (octave_idx_type& info, double& rcond,
-                   int calc_cond = 1) const;
+                   bool calc_cond = true) const;
 
 private:
   // Diagonal matrix solvers
   Matrix dsolve (MatrixType &typ, const Matrix& b, octave_idx_type& info,
                  double& rcond, solve_singularity_handler sing_handler,
                  bool calc_cond = false) const;
 
   ComplexMatrix dsolve (MatrixType &typ, const ComplexMatrix& b,
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -934,18 +934,18 @@ FloatComplexMatrix
 FloatComplexMatrix::inverse (octave_idx_type& info) const
 {
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 FloatComplexMatrix
-FloatComplexMatrix::inverse (octave_idx_type& info, float& rcon, int force,
-                             int calc_cond) const
+FloatComplexMatrix::inverse (octave_idx_type& info, float& rcon, bool force,
+                             bool calc_cond) const
 {
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, force, calc_cond);
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::inverse (MatrixType &mattype) const
 {
@@ -958,17 +958,17 @@ FloatComplexMatrix
 FloatComplexMatrix::inverse (MatrixType &mattype, octave_idx_type& info) const
 {
   float rcon;
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::tinverse (MatrixType &mattype, octave_idx_type& info,
-                              float& rcon, int force, int calc_cond) const
+                              float& rcon, bool force, bool calc_cond) const
 {
   FloatComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -1013,17 +1013,17 @@ FloatComplexMatrix::tinverse (MatrixType
   if (info == -1 && ! force)
     retval = *this; // Restore matrix contents.
 
   return retval;
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::finverse (MatrixType &mattype, octave_idx_type& info,
-                              float& rcon, int force, int calc_cond) const
+                              float& rcon, bool force, bool calc_cond) const
 {
   FloatComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -1093,17 +1093,17 @@ FloatComplexMatrix::finverse (MatrixType
   if (info != 0)
     mattype.mark_as_rectangular ();
 
   return retval;
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::inverse (MatrixType &mattype, octave_idx_type& info,
-                             float& rcon, int force, int calc_cond) const
+                             float& rcon, bool force, bool calc_cond) const
 {
   int typ = mattype.type (false);
   FloatComplexMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
@@ -1515,26 +1515,26 @@ FloatComplexDET
 FloatComplexMatrix::determinant (octave_idx_type& info) const
 {
   float rcon;
   return determinant (info, rcon, 0);
 }
 
 FloatComplexDET
 FloatComplexMatrix::determinant (octave_idx_type& info, float& rcon,
-                                 int calc_cond) const
+                                 bool calc_cond) const
 {
   MatrixType mattype (*this);
   return determinant (mattype, info, rcon, calc_cond);
 }
 
 FloatComplexDET
 FloatComplexMatrix::determinant (MatrixType& mattype,
                                  octave_idx_type& info, float& rcon,
-                                 int calc_cond) const
+                                 bool calc_cond) const
 {
   FloatComplexDET retval (1.0);
 
   info = 0;
   rcon = 0.0;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
@@ -3773,23 +3773,23 @@ min (const FloatComplexMatrix& a, const 
       ("two-arg min requires same size arguments");
 
   EMPTY_RETURN_CHECK (FloatComplexMatrix);
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
-      int columns_are_real_only = 1;
+      bool columns_are_real_only = true;
       for (octave_idx_type i = 0; i < nr; i++)
         {
           octave_quit ();
           if (std::imag (a(i, j)) != 0.0 || std::imag (b(i, j)) != 0.0)
             {
-              columns_are_real_only = 0;
+              columns_are_real_only = false;
               break;
             }
         }
 
       if (columns_are_real_only)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             result(i, j) = xmin (std::real (a(i, j)), std::real (b(i, j)));
@@ -3858,23 +3858,23 @@ max (const FloatComplexMatrix& a, const 
       ("two-arg max requires same size arguments");
 
   EMPTY_RETURN_CHECK (FloatComplexMatrix);
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
-      int columns_are_real_only = 1;
+      bool columns_are_real_only = true;
       for (octave_idx_type i = 0; i < nr; i++)
         {
           octave_quit ();
           if (std::imag (a(i, j)) != 0.0 || std::imag (b(i, j)) != 0.0)
             {
-              columns_are_real_only = 0;
+              columns_are_real_only = false;
               break;
             }
         }
 
       if (columns_are_real_only)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             {
diff --git a/liboctave/array/fCMatrix.h b/liboctave/array/fCMatrix.h
--- a/liboctave/array/fCMatrix.h
+++ b/liboctave/array/fCMatrix.h
@@ -189,47 +189,47 @@ public:
   void resize (octave_idx_type nr, octave_idx_type nc,
                const FloatComplex& rfv = FloatComplex (0))
   {
     MArray<FloatComplex>::resize (dim_vector (nr, nc), rfv);
   }
 
 private:
   FloatComplexMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
-                               float& rcon, int force, int calc_cond) const;
+                               float& rcon, bool force, bool calc_cond) const;
 
   FloatComplexMatrix finverse (MatrixType &mattype, octave_idx_type& info,
-                               float& rcon, int force, int calc_cond) const;
+                               float& rcon, bool force, bool calc_cond) const;
 
 public:
   FloatComplexMatrix inverse (void) const;
   FloatComplexMatrix inverse (octave_idx_type& info) const;
   FloatComplexMatrix inverse (octave_idx_type& info, float& rcon,
-                              int force = 0, int calc_cond = 1) const;
+                              bool force = false, bool calc_cond = true) const;
 
   FloatComplexMatrix inverse (MatrixType &mattype) const;
   FloatComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   FloatComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info,
-                              float& rcon, int force = 0,
-                              int calc_cond = 1) const;
+                              float& rcon, bool force = false,
+                              bool calc_cond = true) const;
 
   FloatComplexMatrix pseudo_inverse (float tol = 0.0) const;
 
   FloatComplexMatrix fourier (void) const;
   FloatComplexMatrix ifourier (void) const;
 
   FloatComplexMatrix fourier2d (void) const;
   FloatComplexMatrix ifourier2d (void) const;
 
   FloatComplexDET determinant (void) const;
   FloatComplexDET determinant (octave_idx_type& info) const;
   FloatComplexDET determinant (octave_idx_type& info, float& rcon,
-                               int calc_cond = 1) const;
+                               bool calc_cond = true) const;
   FloatComplexDET determinant (MatrixType &mattype, octave_idx_type& info,
-                               float& rcon, int calc_cond = 1) const;
+                               float& rcon, bool calc_cond = true) const;
 
   float rcond (void) const;
   float rcond (MatrixType &mattype) const;
 
 private:
   // Upper triangular matrix solvers
   FloatComplexMatrix utsolve (MatrixType &typ, const FloatComplexMatrix& b,
                               octave_idx_type& info, float& rcon,
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -627,18 +627,18 @@ FloatMatrix
 FloatMatrix::inverse (octave_idx_type& info) const
 {
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 FloatMatrix
-FloatMatrix::inverse (octave_idx_type& info, float& rcon, int force,
-                      int calc_cond) const
+FloatMatrix::inverse (octave_idx_type& info, float& rcon, bool force,
+                      bool calc_cond) const
 {
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, force, calc_cond);
 }
 
 FloatMatrix
 FloatMatrix::inverse (MatrixType& mattype) const
 {
@@ -651,17 +651,17 @@ FloatMatrix
 FloatMatrix::inverse (MatrixType &mattype, octave_idx_type& info) const
 {
   float rcon;
   return inverse (mattype, info, rcon, 0, 0);
 }
 
 FloatMatrix
 FloatMatrix::tinverse (MatrixType &mattype, octave_idx_type& info, float& rcon,
-                       int force, int calc_cond) const
+                       bool force, bool calc_cond) const
 {
   FloatMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -707,17 +707,17 @@ FloatMatrix::tinverse (MatrixType &matty
     retval = *this; // Restore matrix contents.
 
   return retval;
 }
 
 
 FloatMatrix
 FloatMatrix::finverse (MatrixType &mattype, octave_idx_type& info, float& rcon,
-                       int force, int calc_cond) const
+                       bool force, bool calc_cond) const
 {
   FloatMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc || nr == 0 || nc == 0)
     (*current_liboctave_error_handler) ("inverse requires square matrix");
@@ -787,17 +787,17 @@ FloatMatrix::finverse (MatrixType &matty
   if (info != 0)
     mattype.mark_as_rectangular ();
 
   return retval;
 }
 
 FloatMatrix
 FloatMatrix::inverse (MatrixType &mattype, octave_idx_type& info, float& rcon,
-                      int force, int calc_cond) const
+                      bool force, bool calc_cond) const
 {
   int typ = mattype.type (false);
   FloatMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
@@ -1207,26 +1207,26 @@ FloatDET
 FloatMatrix::determinant (octave_idx_type& info) const
 {
   float rcon;
   return determinant (info, rcon, 0);
 }
 
 FloatDET
 FloatMatrix::determinant (octave_idx_type& info, float& rcon,
-                          int calc_cond) const
+                          bool calc_cond) const
 {
   MatrixType mattype (*this);
   return determinant (mattype, info, rcon, calc_cond);
 }
 
 FloatDET
 FloatMatrix::determinant (MatrixType& mattype,
                           octave_idx_type& info, float& rcon,
-                          int calc_cond) const
+                          bool calc_cond) const
 {
   FloatDET retval (1.0);
 
   info = 0;
   rcon = 0.0;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
diff --git a/liboctave/array/fMatrix.h b/liboctave/array/fMatrix.h
--- a/liboctave/array/fMatrix.h
+++ b/liboctave/array/fMatrix.h
@@ -148,46 +148,46 @@ public:
 
   void resize (octave_idx_type nr, octave_idx_type nc, float rfv = 0)
   {
     MArray<float>::resize (dim_vector (nr, nc), rfv);
   }
 
 private:
   FloatMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
-                        float& rcon, int force, int calc_cond) const;
+                        float& rcon, bool force, bool calc_cond) const;
 
   FloatMatrix finverse (MatrixType &mattype, octave_idx_type& info,
-                        float& rcon, int force, int calc_cond) const;
+                        float& rcon, bool force, bool calc_cond) const;
 
 public:
   FloatMatrix inverse (void) const;
   FloatMatrix inverse (octave_idx_type& info) const;
-  FloatMatrix inverse (octave_idx_type& info, float& rcon, int force = 0,
-                       int calc_cond = 1) const;
+  FloatMatrix inverse (octave_idx_type& info, float& rcon, bool force = false,
+                       bool calc_cond = true) const;
 
   FloatMatrix inverse (MatrixType &mattype) const;
   FloatMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   FloatMatrix inverse (MatrixType &mattype, octave_idx_type& info, float& rcon,
-                       int force = 0, int calc_cond = 1) const;
+                       bool force = false, bool calc_cond = true) const;
 
   FloatMatrix pseudo_inverse (float tol = 0.0) const;
 
   FloatComplexMatrix fourier (void) const;
   FloatComplexMatrix ifourier (void) const;
 
   FloatComplexMatrix fourier2d (void) const;
   FloatComplexMatrix ifourier2d (void) const;
 
   FloatDET determinant (void) const;
   FloatDET determinant (octave_idx_type& info) const;
   FloatDET determinant (octave_idx_type& info, float& rcon,
-                        int calc_cond = 1) const;
+                        bool calc_cond = true) const;
   FloatDET determinant (MatrixType &mattype, octave_idx_type& info,
-                        float& rcon, int calc_cond = 1) const;
+                        float& rcon, bool calc_cond = true) const;
 
   float rcond (void) const;
   float rcond (MatrixType &mattype) const;
 
 private:
   // Upper triangular matrix solvers
   FloatMatrix utsolve (MatrixType &typ, const FloatMatrix& b,
                        octave_idx_type& info,
