# HG changeset patch
# User jwe
# Date 1074827399 0
#      Fri Jan 23 03:09:59 2004 +0000
# Node ID fe25e290fafb93d788fb33e7728dd8d69fe01f6f
# Parent  7bed0ef1a6adb8c4197ba6d25612c87820d82b2f
[project @ 2004-01-23 03:09:59 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2491,26 +2491,24 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			{
 			  int ii = idx_i.elem (k++);
 			  int fr = ii % lhs_nr;
 			  int fc = (ii - fr) / lhs_nr;
 			  lhs.elem (fr, fc) = rhs.elem (i, j);
 			}
 		    }
 		}
-	      else if (rhs_nr == 1 && rhs_nc == 1 && len <= lhs_nr * lhs_nc)
+	      else if (rhs_nr == 1 && rhs_nc == 1)
 		{
 		  RT scalar = rhs.elem (0, 0);
 
 		  for (int i = 0; i < len; i++)
 		    {
 		      int ii = idx_i.elem (i);
-		      int fr = ii % lhs_nr;
-		      int fc = (ii - fr) / lhs_nr;
-		      lhs.elem (fr, fc) = scalar;
+		      lhs.elem (ii) = scalar;
 		    }
 		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
       ("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 		  retval = 0;
@@ -2637,17 +2635,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 	    {
 	      for (int i = 0; i < len; i++)
 		{
 		  int ii = iidx.elem (i);
 
 		  lhs.elem (ii) = rhs.elem (i);
 		}
 	    }
-	  else if (rhs_is_scalar && len <= lhs_len)
+	  else if (rhs_is_scalar)
 	    {
 	      RT scalar = rhs.elem (0);
 
 	      for (int i = 0; i < len; i++)
 		{
 		  int ii = iidx.elem (i);
 
 		  lhs.elem (ii) = scalar;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2004-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::assign2, Array<T>::assignN):
+	For X(I) = RHS, don't restrict I to fewer elements than X.
+
+	* Array.cc (Array<T>::assign2): Simplify indexing for X(I) = RHS case.
+
 2004-01-22  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* mx-inlines.cc	(MX_ND_REDUCTION, MX_ND_CUMULATIVE_OP):
 	Simplify calculation of number of elements in retval.
 
 	* Array.cc (Array<T>::assignN): Eliminate unnecessray code for
 	filling when RHS is scalar and dimension lengths agree.
 
