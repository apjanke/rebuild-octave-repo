# HG changeset patch
# User Rik <rik@octave.org>
# Date 1534187878 25200
#      Mon Aug 13 12:17:58 2018 -0700
# Node ID e04c56bbbacee4fa0878c0a7131dac5cb56159f7
# Parent  7c5956c45a29204f45e3ddffa93788ea99203fdf
isdir.m: Make m-file a legacy function (bug #54489)

* isdir.m: Note that function is not recommended in docstring.
Add 1-time warning about function being obsolete.  Add first time
BIST test to provoke and suppress warning.

* scripts/legacy/module.mk, scripts/miscellaneous/module.mk: Move isdir.m from
miscellaneous/ dir to legacy/ dir.

* NEWS: Announce change to legacy function.

* syscalls.cc (Fstat): Add isfolder to @seealso link.
* utils.cc (Fis_absolute_filename, Fis_rooted_relative_filename, Fmake_absolute_filename):
Replace isdir with isfolder in @seealso links.

* uigetdir.m, uigetfile.m, uiputfile.m, which.m, copyfile.m, mkdir.m,
movefile.m, tempdir.m, unpack.m, what.m, __print_parse_opts__.m,
compare_plot_demos.m, rundemos.m, runtests.m: Replace instances of isdir
with isfolder in core Octave.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -74,16 +74,17 @@ Summary of important user-visible change
     means they are obsolete and should not be used in any new code.
     Unlike deprecated functions, however, their removal from Octave has
     not yet been scheduled.
 
       Function             | Replacement
       ---------------------|------------------
       findstr              | strfind
       flipdim              | flip
+      isdir                | isfolder or dir_in_loadpath
       isequalwithequalnans | isequaln
       isstr                | ischar
       setstr               | char
       strmatch             | strncmp or strcmp
       strread              | textscan
       textread             | textscan
 
  ** Deprecated functions.
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -847,17 +847,17 @@ For example:
        mode = -rw-r--r--
        modestr = -rw-r--r--
        ino = 9316
        dev = 2049
      @}
   @result{} err = 0
   @result{} msg =
 @end example
-@seealso{lstat, ls, dir}
+@seealso{lstat, ls, dir, isfolder}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value_list retval;
 
   if (args(0).is_scalar_type ())
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -835,17 +835,17 @@ replaces the unprintable alert character
 %!error undo_string_escapes ("foo", "bar")
 %!error undo_string_escapes (3)
 */
 
 DEFUN (is_absolute_filename, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} is_absolute_filename (@var{file})
 Return true if @var{file} is an absolute filename.
-@seealso{is_rooted_relative_filename, make_absolute_filename, isdir}
+@seealso{is_rooted_relative_filename, make_absolute_filename, isfolder}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_string ()
               && octave::sys::env::absolute_pathname (args(0).string_value ()));
 }
@@ -856,17 +856,17 @@ Return true if @var{file} is an absolute
 %!error is_absolute_filename ()
 %!error is_absolute_filename ("foo", "bar")
 */
 
 DEFUN (is_rooted_relative_filename, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} is_rooted_relative_filename (@var{file})
 Return true if @var{file} is a rooted-relative filename.
-@seealso{is_absolute_filename, make_absolute_filename, isdir}
+@seealso{is_absolute_filename, make_absolute_filename, isfolder}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_string ()
               && octave::sys::env::rooted_relative_pathname (args(0).string_value ()));
 }
@@ -880,17 +880,17 @@ Return true if @var{file} is a rooted-re
 
 DEFUN (make_absolute_filename, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} make_absolute_filename (@var{file})
 Return the full name of @var{file} beginning from the root of the file
 system.
 
 No check is done for the existence of @var{file}.
-@seealso{canonicalize_file_name, is_absolute_filename, is_rooted_relative_filename, isdir}
+@seealso{canonicalize_file_name, is_absolute_filename, is_rooted_relative_filename, isfolder}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   std::string nm = args(0).xstring_value ("make_absolute_filename: FILE argument must be a filename");
 
   return ovl (octave::sys::env::make_absolute (nm));
diff --git a/scripts/gui/uigetdir.m b/scripts/gui/uigetdir.m
--- a/scripts/gui/uigetdir.m
+++ b/scripts/gui/uigetdir.m
@@ -35,17 +35,17 @@ function dirname = uigetdir (init_path =
   if (nargin > 2)
     print_usage ();
   endif
 
   if (! ischar (init_path) || ! ischar (dialog_name))
     error ("uigetdir: INIT_PATH and DIALOG_NAME must be string arguments");
   endif
 
-  if (! isdir (init_path))
+  if (! isfolder (init_path))
     init_path = fileparts (init_path);
   endif
 
   if (__octave_link_enabled__ ())
     file_filter = cell (0, 2);
     default_file_name = "";
     dialog_position = [240, 120];
     dialog_mode = "dir";
diff --git a/scripts/gui/uigetfile.m b/scripts/gui/uigetfile.m
--- a/scripts/gui/uigetfile.m
+++ b/scripts/gui/uigetfile.m
@@ -121,17 +121,17 @@ function [retfile, retpath, retindex] = 
       endif
     elseif (! isempty (args{2}))
       print_usage ();
     endif
   endif
 
   if (len > 2)
     if (ischar (args{3}))
-      if (isdir (args{3}))
+      if (isfolder (args{3}))
         fdir = args{3};
         fname = fext = "";
       else
         [fdir, fname, fext] = fileparts (varargin{3});
       endif
       if (! isempty (fdir))
         outargs{6} = fdir;
       endif
diff --git a/scripts/gui/uiputfile.m b/scripts/gui/uiputfile.m
--- a/scripts/gui/uiputfile.m
+++ b/scripts/gui/uiputfile.m
@@ -85,17 +85,17 @@ function [retfile, retpath, retindex] = 
       outargs{2} = varargin{2};
     elseif (! isempty (varargin{2}))
       print_usage ();
     endif
   endif
 
   if (nargin > 2)
     if (ischar (varargin{3}))
-      if (isdir (varargin{3}))
+      if (isfolder (varargin{3}))
         fdir = varargin{3};
         fname = fext = "";
       else
         [fdir, fname, fext] = fileparts (varargin{3});
       endif
       if (! isempty (fdir))
         outargs{6} = fdir;
       endif
diff --git a/scripts/help/which.m b/scripts/help/which.m
--- a/scripts/help/which.m
+++ b/scripts/help/which.m
@@ -49,17 +49,17 @@ function varargout = which (varargin)
         printf ("'%s' is a variable\n", m(i).name);
       elseif (isempty (m(i).file))
         if (! isempty (m(i).type))
           printf ("'%s' is a %s\n",
                   m(i).name, m(i).type);
         endif
       else
         if (isempty (m(i).type))
-          if (isdir (m(i).file))
+          if (isfolder (m(i).file))
             printf ("'%s' is the directory %s\n",
                     m(i).name, m(i).file);
           else
             printf ("'%s' is the file %s\n",
                     m(i).name, m(i).file);
           endif
         else
           printf ("'%s' is a %s from the file %s\n",
diff --git a/scripts/miscellaneous/isdir.m b/scripts/legacy/isdir.m
rename from scripts/miscellaneous/isdir.m
rename to scripts/legacy/isdir.m
--- a/scripts/miscellaneous/isdir.m
+++ b/scripts/legacy/isdir.m
@@ -13,29 +13,54 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} isdir (@var{f})
-## Return true if @var{f} is a directory.
-## @seealso{exist, stat, is_absolute_filename, is_rooted_relative_filename}
+##
+## This function is not recommended.  Use @code{isfolder} or
+## @code{file_in_loadpath} instead.
+##
+## Return true if @var{f} is a directory and false otherwise.
+##
+## Compatibility Note: The @sc{matlab} function of the same name will also
+## search for @var{f} in the load path directories.  To emulate this behavior
+## use
+## 
+## @example
+## @var{tf} = ! isempty (file_in_loadpath (@var{f}))
+## @end example
+##
+## @seealso{isfolder, file_in_loadpath, exist, stat, is_absolute_filename, is_rooted_relative_filename}
 ## @end deftypefn
 
 function retval = isdir (f)
 
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:legacy-function",
+             "isdir is obsolete; use isfolder or dir_in_loadpath instead\n");
+  endif
+
   if (nargin != 1)
     print_usage ();
   endif
 
   ## Exist returns an integer but isdir should return a logical.
   retval = (exist (f, "dir") == 7);
 
 endfunction
 
 
+## First test is necessary to provoke 1-time legacy warning
+%!test
+%! warning ("off", "Octave:legacy-function", "local");
+%! isdir (pwd ());
+
 %!assert (isdir (pwd ()))
-%!assert (! isdir ("this is highly unlikely to be a directory name"))
+%!assert (! isdir (tempname ()))
 
 %!error isdir ()
 %!error isdir (1, 2)
diff --git a/scripts/legacy/module.mk b/scripts/legacy/module.mk
--- a/scripts/legacy/module.mk
+++ b/scripts/legacy/module.mk
@@ -1,13 +1,14 @@
 FCN_FILE_DIRS += scripts/legacy
 
 %canon_reldir%_FCN_FILES = \
   %reldir%/findstr.m \
   %reldir%/flipdim.m \
+  %reldir%/isdir.m \
   %reldir%/isequalwithequalnans.m \
   %reldir%/isstr.m \
   %reldir%/setstr.m \
   %reldir%/strmatch.m \
   %reldir%/strread.m \
   %reldir%/textread.m
 
 %canon_reldir%dir = $(fcnfiledir)/legacy
diff --git a/scripts/miscellaneous/copyfile.m b/scripts/miscellaneous/copyfile.m
--- a/scripts/miscellaneous/copyfile.m
+++ b/scripts/miscellaneous/copyfile.m
@@ -73,17 +73,17 @@ function [status, msg, msgid] = copyfile
     error ("copyfile: F2 must be a string");
   endif
 
   if (nargin == 3 && strcmp (force, "f"))
     cmd = [cmd " " cmd_force_flag];
   endif
 
   ## If f1 has more than 1 element then f2 must be a directory
-  isdir = (exist (f2, "dir") != 0);
+  isdir = isfolder (f2);
   if (numel (f1) > 1 && ! isdir)
     error ("copyfile: when copying multiple files, F2 must be a directory");
   endif
 
   ## Protect the filename(s).
   f1 = glob (f1);
   if (isempty (f1))
     error ("copyfile: no files to move");
diff --git a/scripts/miscellaneous/mkdir.m b/scripts/miscellaneous/mkdir.m
--- a/scripts/miscellaneous/mkdir.m
+++ b/scripts/miscellaneous/mkdir.m
@@ -66,17 +66,17 @@ function [status, msg, msgid] = mkdir (p
 
 endfunction
 
 ## Recursively make directories until parent/dirname can be created.
 function [status, msg, msgid] = mkdir_recur (parent, dirname)
 
   status = 1;
 
-  if (! isdir (parent))
+  if (! isfolder (parent))
     [grandparent, name, ext] = fileparts (parent);
     [status, msg, msgid] = mkdir_recur (grandparent, [name, ext]);
   endif
 
   if (status)
     [status, msg, msgid] = __mkdir__ (parent, dirname);
   endif
 
@@ -85,31 +85,31 @@ endfunction
 
 %!test
 %! dir1 = tempname ();
 %! dir2 = "%_unlikely_name_%";
 %! dir = fullfile (dir1, dir2);
 %! unwind_protect
 %!   status = mkdir (dir);
 %!   assert (status);
-%!   assert (isdir (dir));
+%!   assert (isfolder (dir));
 %! unwind_protect_cleanup
 %!   confirm_recursive_rmdir (false, "local");
 %!   rmdir (dir1, "s");
 %! end_unwind_protect
 
 %!test <*53031>
 %! HOME = getenv ("HOME");
 %! tmp_dir = tempname ();
 %! unwind_protect
 %!   mkdir (tmp_dir);
 %!   setenv ("HOME", tmp_dir);
 %!   status = mkdir ("~/subdir");
 %!   assert (status);
-%!   assert (isdir (fullfile (tmp_dir, "subdir")));
+%!   assert (isfolder (fullfile (tmp_dir, "subdir")));
 %! unwind_protect_cleanup
 %!   rmdir (fullfile (tmp_dir, "subdir"));
 %!   rmdir (tmp_dir);
 %!   if (isempty (HOME))
 %!     unsetenv ("HOME");
 %!   else
 %!     setenv ("HOME", HOME);
 %!   endif
diff --git a/scripts/miscellaneous/module.mk b/scripts/miscellaneous/module.mk
--- a/scripts/miscellaneous/module.mk
+++ b/scripts/miscellaneous/module.mk
@@ -28,17 +28,16 @@ FCN_FILE_DIRS += \
   %reldir%/genvarname.m \
   %reldir%/getfield.m \
   %reldir%/grabcode.m \
   %reldir%/gunzip.m \
   %reldir%/info.m \
   %reldir%/inputParser.m \
   %reldir%/inputname.m \
   %reldir%/isdeployed.m \
-  %reldir%/isdir.m \
   %reldir%/isfolder.m \
   %reldir%/ismac.m \
   %reldir%/ispc.m \
   %reldir%/isunix.m \
   %reldir%/license.m \
   %reldir%/list_primes.m \
   %reldir%/loadobj.m \
   %reldir%/ls.m \
diff --git a/scripts/miscellaneous/movefile.m b/scripts/miscellaneous/movefile.m
--- a/scripts/miscellaneous/movefile.m
+++ b/scripts/miscellaneous/movefile.m
@@ -82,17 +82,17 @@ function [status, msg, msgid] = movefile
     error ("movefile: F2 must be a string");
   endif
 
   if (nargin == 3 && strcmp (force, "f"))
     cmd = [cmd " " cmd_force_flag];
   endif
 
   ## If f1 has more than 1 element f2 must be a directory
-  isdir = (exist (f2, "dir") != 0);
+  isdir = isfolder (f2);
   if (numel (f1) > 1 && ! isdir)
     error ("movefile: when moving multiple files, F2 must be a directory");
   endif
 
   ## Protect the filename(s).
   f1 = glob (f1);
   if (isempty (f1))
     error ("movefile: no files to move");
diff --git a/scripts/miscellaneous/tempdir.m b/scripts/miscellaneous/tempdir.m
--- a/scripts/miscellaneous/tempdir.m
+++ b/scripts/miscellaneous/tempdir.m
@@ -32,17 +32,17 @@ function dirname = tempdir ()
   if (isempty (dirname))
     dirname = P_tmpdir;
   endif
 
   if (! strcmp (dirname(end), filesep))
     dirname = [dirname filesep];
   endif
 
-  if (! isdir (dirname))
+  if (! isfolder (dirname))
     warning ("tempdir: '%s' does not exist or is not a directory", dirname);
   endif
 
 endfunction
 
 
 %!assert (ischar (tempdir ()))
 
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -110,17 +110,17 @@ function filelist = unpack (file, dir = 
       filelist = files;
     endif
     return;
 
   else
     file = file{1};
   endif
 
-  if (isdir (file))
+  if (isfolder (file))
     if (isempty (filetype))
       error ("unpack: FILETYPE must be given for a directory");
     elseif (! any (strcmpi (filetype, "gunzip")))
       error ('unpack: FILETYPE must be "gunzip" for a directory');
     endif
     ext = ".gz";
   else
     [pathstr, name, ext] = fileparts (file);
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -111,17 +111,17 @@ function retval = what (dir)
       if (strcmp (e, ".m"))
         w.m{end+1} = n;
       elseif (strcmp (e, ".mat"))
         w.mat{end+1} = n;
       elseif (strcmp (e, ".oct"))
         w.oct{end+1} = n;
       elseif (strcmp (e, mexext ()))
         w.mex{end+1} = n;
-      elseif (n(1) == "@" && isdir (fullfile (dir, n)))
+      elseif (n(1) == "@" && isfolder (fullfile (dir, n)))
         w.classes{end+1} = n;
       endif
     endif
   endfor
 
   if (nargout == 0)
     __display_filenames__ ("M-files in directory", w.path, w.m);
     __display_filenames__ ("\nMAT-files in directory", w.path, w.mat);
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -270,17 +270,18 @@ function arg_st = __print_parse_opts__ (
 
   if (arg_st.append_to_file)
     if (isempty (arg_st.name))
       arg_st.append_to_file = false;
     elseif (any (strcmpi (arg_st.devopt, {"eps", "eps2", "epsc", "epsc2", ...
                                           "ps", "ps2", "psc", "psc2", "pdf"})))
       have_ghostscript = ! isempty (__ghostscript_binary__ ());
       if (have_ghostscript)
-        file_exists = (numel (dir (arg_st.name)) == 1 && ! isdir (arg_st.name));
+        file_exists = (numel (dir (arg_st.name)) == 1
+                       && ! isfolder (arg_st.name));
         if (! file_exists)
           arg_st.append_to_file = false;
         endif
       else
         arg_st.append_to_file = false;
         warning ("print.m: appended output requires Ghostscript to be installed");
       endif
     else
diff --git a/scripts/testfun/private/compare_plot_demos.m b/scripts/testfun/private/compare_plot_demos.m
--- a/scripts/testfun/private/compare_plot_demos.m
+++ b/scripts/testfun/private/compare_plot_demos.m
@@ -81,17 +81,17 @@ function compare_plot_demos (varargin)
 
   [~, fcn_name] = fileparts (arg.fcn_file);
 
   ## Generate the plot demo images for each toolkit
   cwd = pwd ();
   unwind_protect
     addpath (pwd);
     for n = 1:numel (arg.toolkits)
-      if (! isdir (fullfile (cwd, arg.toolkits{n})))
+      if (! isfolder (fullfile (cwd, arg.toolkits{n})))
         mkdir (arg.toolkits{n});
       endif
       cd (arg.toolkits{n});
       if (arg.replace_images && ! isempty (dir (["*." arg.fmt])))
         delete (["*." arg.fmt]);
       endif
       if (! strcmp (arg.toolkits{n}, "matlab"))
         close all;
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -33,17 +33,17 @@
 
 function rundemos (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
-    if (isempty (dirs{1}) || ! isdir (dirs{1}))
+    if (isempty (dirs{1}) || ! isfolder (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
       fullname = dir_in_loadpath (directory);
       if (isempty (fullname))
         error ("rundemos: DIRECTORY argument must be a valid pathname");
       endif
@@ -77,17 +77,17 @@ function run_all_demos (directory, do_cl
           printf ("error: %s\n\n", lasterror ().message);
         end_try_catch
         if (i != numel (flist))
           input ("Press <enter> to continue: ", "s");
         endif
       endif
     elseif (f(1) == "@")
       f = fullfile (directory, f);
-      if (isdir (f))
+      if (isfolder (f))
         dirs(end+1) = f;
       endif
     endif
   endfor
 
   ## Recurse into class directories since they are implied in the path
   if (do_class_dirs)
     for i = 1:numel (dirs)
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -33,17 +33,17 @@
 
 function runtests (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
-    if (isempty (dirs{1}) || ! isdir (dirs{1}))
+    if (isempty (dirs{1}) || ! isfolder (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
       fullname = dir_in_loadpath (directory);
       if (isempty (fullname))
         error ("runtests: DIRECTORY argument must be a valid pathname");
       endif
@@ -78,17 +78,17 @@ function run_all_tests (directory, do_cl
         [p, n, xf, xb, sk, rtsk, rgrs] = test (ff, "quiet");
         print_pass_fail (p, n, xf, xb, sk, rtsk, rgrs);
         fflush (stdout);
       elseif (has_functions (ff))
         no_tests(end+1) = f;
       endif
     elseif (f(1) == "@")
       f = fullfile (directory, f);
-      if (isdir (f))
+      if (isfolder (f))
         dirs(end+1) = f;
       endif
     endif
   endfor
   if (! isempty (no_tests))
     printf ("\nThe following files in %s have no tests:\n\n", directory);
     printf ("%s", list_in_columns (no_tests));
   endif
