# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1516281233 0
#      Thu Jan 18 13:13:53 2018 +0000
# Node ID 89b0a53258b767ae15640aa580b0ffdebebcc8f5
# Parent  66729bff987773e124f3cf0626cad2523334cdaf
ismember: use both real and imaginary parts instead of magnitude (bug #52437)

diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -75,16 +75,31 @@
 ## Reimplemented using lookup & unique: Jaroslav Hajek <highegg@gmail.com>
 
 function [tf, s_idx] = ismember (a, s, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
+  ## lookup() uses absolute values for complex input so we handle the
+  ## real and imaginary parts separately (bug #52437)
+  if (iscomplex (a) || iscomplex (s))
+    real_argout = cell (nargout, 1);
+    imag_argout = cell (nargout, 1);
+    [real_argout{:}] = ismember (real (a), real (s), varargin{:});
+    [imag_argout{:}] = ismember (imag (a), imag (s), varargin{:});
+    tf = real_argout{1} & imag_argout{1};
+    if (isargout (2))
+      s_idx = zeros (size (real_argout{2}));
+      s_idx(tf) = real_argout{2}(tf);
+    endif
+    return
+  endif
+
   ## lookup() does not handle logical values
   if (islogical (a))
     a = uint8 (a);
   endif
   if (islogical (s))
     s = uint8 (s);
   endif
 
@@ -232,8 +247,38 @@ endfunction
 %! assert (s_idx, [1 0 0 0 1 0]');
 
 %!test <*51187>
 %! assert (ismember ('b ', {'a ', 'b '}), true);
 
 %!test <*51187>
 %! abc = ['a '; 'b '; 'c '];
 %! assert (ismember (abc, {abc}), [false; false; false]);
+
+%!test <*52437>
+%! [tf, s_idx] = ismember ([5 4-3j 3+4j], [5 4-3j 3+4j]);
+%! assert (tf, logical ([1 1 1]))
+%! assert (s_idx, [1 2 3])
+%!
+%! [tf, s_idx] = ismember ([5 4-3j 3+4j], 5);
+%! assert (tf, logical ([1 0 0]))
+%! assert (s_idx, [1 0 0])
+%!
+%! [tf, s_idx] = ismember ([5 5 5], 4-3j);
+%! assert (tf, logical ([0 0 0]))
+%! assert (s_idx, [0 0 0])
+%!
+%! [tf, s_idx] = ismember ([5 4-3j 3+4j; 5i 6 6i], [5 6]);
+%! assert (tf, logical ([1 0 0; 0 1 0]))
+%! assert (s_idx, [1 0 0; 0 2 0])
+%!
+%! [tf, s_idx] = ismember ([5 4-3j 3+4j; 5 4-3j 3+4j], [5 5 5], "rows");
+%! assert (tf, logical ([0; 0]))
+%! assert (s_idx, [0; 0])
+%!
+%! [tf, s_idx] = ismember ([5 5 5], [5 4-3j 3+4j; 5 5 5], "rows");
+%! assert (tf, true)
+%! assert (s_idx, 2)
+%!
+%! [tf] = ismember ([5 4-3j 3+4j], 5);
+%! assert (tf, logical ([1 0 0]))
+%! [~, s_idx] = ismember ([5 4-3j 3+4j], 5);
+%! assert (s_idx, [1 0 0])
