# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1354842958 18000
#      Thu Dec 06 20:15:58 2012 -0500
# Branch stable
# Node ID f63a4f23bfe75801e88d5850a36128a46f713c9e
# Parent  ddc651eecf7a232c516d771838bbd66d420a502c
Fix infinite loop when setting fftw planner method (bug #37873)

* liboctave/oct-fftw.h (octave_float_fftw_planner::method): Fix typo
method -> do_method.
* src/DLD-FUNCTIONS/fftw.cc: Add tests.

diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -220,24 +220,24 @@ public:
       ? instance->do_create_plan (rank, dims, howmany, stride, dist, in, out)
       : dummy;
   }
 
   static FftwMethod method (void)
   {
     static FftwMethod dummy;
 
-    return instance_ok () ? instance->method () : dummy;
+    return instance_ok () ? instance->do_method () : dummy;
   }
 
   static FftwMethod method (FftwMethod _meth)
   {
     static FftwMethod dummy;
 
-    return instance_ok () ? instance->method (_meth) : dummy;
+    return instance_ok () ? instance->do_method (_meth) : dummy;
   }
 
 private:
 
   // No copying!
 
   octave_float_fftw_planner (const octave_float_fftw_planner&);
 
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -262,8 +262,37 @@ they will not be efficient and the point
 #else
 
   warning ("fftw: this copy of Octave was not configured to use the FFTW3 planner");
 
 #endif
 
   return retval;
 }
+
+/*
+
+%!testif HAVE_FFTW
+%! def_method = fftw ("planner");
+%! unwind_protect
+%!   method = "estimate";
+%!   fftw ("planner", method);
+%!   assert (fftw ("planner"), method);
+%!   method = "measure";
+%!   fftw ("planner", method);
+%!   assert (fftw ("planner"), method);
+%!   method = "patient";
+%!   fftw ("planner", method);
+%!   assert (fftw ("planner"), method);
+%!   method = "exhaustive";
+%!   fftw ("planner", method);
+%!   assert (fftw ("planner"), method);
+%!   method = "hybrid";
+%!   fftw ("planner", method);
+%!   assert (fftw ("planner"), method);
+%! unwind_protect_cleanup
+%!   fftw ("planner", def_method);
+%! end_unwind_protect
+
+%!error <Invalid call to fftw> fftw ();
+%!error <Invalid call to fftw> fftw ("planner", "estimate", "measure");
+
+ */
