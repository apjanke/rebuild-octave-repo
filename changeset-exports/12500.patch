# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1299186350 28800
#      Thu Mar 03 13:05:50 2011 -0800
# Node ID 8f2056646dbae2877fc8696aca0ae819f0433e9f
# Parent  a3019189ac51bd2eff95f0338b7c438fc8684937
Improve docstrings for archive functions (gzip, bzip2, etc.)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2010-03-03  Rik  <octave@nomad.inbox5.com>
+
+	* miscellaneous/bunzip2.m, miscellaneous/bzip2.m,
+	miscellaneous/gunzip.m, miscellaneous/gzip.m, miscellaneous/unpack.m,
+	miscellaneous/untar.m, miscellaneous/unzip.m: Improve docstrings
+
+	* miscellaneous/tar.m, miscellaneous/zip.m: Check for invalid arguments
+	at the top, rather than bottom, of code.
+
 2010-03-03  Rik  <octave@nomad.inbox5.com>
 
 	* miscellaneous/gzip.m: Use same functional form as bzip, zip, etc.
 	* miscellaneous/private/__xzip__.m: Allow use of character arrays of
 	filenames.
 	* miscellaneous/unpack.m: Allow use of character arrays of filenames.
 	Add capability for gunzip to work recursively on a directory.
 	Fix bug where unzip returned the archive name in addition to the list
diff --git a/scripts/miscellaneous/bunzip2.m b/scripts/miscellaneous/bunzip2.m
--- a/scripts/miscellaneous/bunzip2.m
+++ b/scripts/miscellaneous/bunzip2.m
@@ -12,20 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} bunzip2 (@var{bzfile}, @var{dir})
+## @deftypefn  {Function File} {} bunzip2 (@var{bzfile})
+## @deftypefnx {Function File} {} bunzip2 (@var{bzfile}, @var{dir})
 ## Unpack the bzip2 archive @var{bzfile} to the directory @var{dir}.  If
 ## @var{dir} is not specified, it defaults to the current directory.
-## @seealso{unpack, bzip2, tar, untar, gzip, gunzip, zip, unzip}
+## @seealso{bzip2, unpack, gunzip, unzip, untar}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function varargout = bunzip2 (bzfile, dir = ".")
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
diff --git a/scripts/miscellaneous/bzip2.m b/scripts/miscellaneous/bzip2.m
--- a/scripts/miscellaneous/bzip2.m
+++ b/scripts/miscellaneous/bzip2.m
@@ -17,19 +17,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{entries} =} bzip2 (@var{files})
 ## @deftypefnx {Function File} {@var{entries} =} bzip2 (@var{files}, @var{outdir})
 ## Compress the list of files specified in @var{files}.
 ## Each file is compressed separately and a new file with a '.bz2' extension
-## is created.  The original files are not touched.  Existing compressed files
-## are silently overwritten.If @var{outdir} is defined the compressed versions
-## of the files are placed in this directory.
+## is created.  The original files are not modified.  Existing compressed files
+## are silently overwritten.  If @var{outdir} is defined the compressed 
+## files are placed in this directory.
 ## @seealso{bunzip2, gzip, zip, tar}
 ## @end deftypefn
 
 function entries = bzip2 (varargin)
 
   if (nargin == 1 || nargin == 2)
     if nargout == 0
       __xzip__ ("bzip2", "bz2", "bzip2 %s", varargin{:});
diff --git a/scripts/miscellaneous/gunzip.m b/scripts/miscellaneous/gunzip.m
--- a/scripts/miscellaneous/gunzip.m
+++ b/scripts/miscellaneous/gunzip.m
@@ -15,19 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gunzip (@var{gzfile}, @var{dir})
 ## Unpack the gzip archive @var{gzfile} to the directory @var{dir}.  If
 ## @var{dir} is not specified, it defaults to the current directory.  If
-## the @var{gzfile} is a directory, all gzfile in the directory will be
+## @var{gzfile} is a directory, all gzfiles in the directory will be
 ## recursively gunzipped.
-## @seealso{unpack, bunzip2, tar, untar, gzip, gunzip, zip, unzip}
+## @seealso{gzip, unpack, bunzip2, unzip, untar}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function varargout = gunzip (gzfile, dir = ".")
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
diff --git a/scripts/miscellaneous/gzip.m b/scripts/miscellaneous/gzip.m
--- a/scripts/miscellaneous/gzip.m
+++ b/scripts/miscellaneous/gzip.m
@@ -16,19 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{entries} =} gzip (@var{files})
 ## @deftypefnx {Function File} {@var{entries} =} gzip (@var{files}, @var{outdir})
 ## Compress the list of files and/or directories specified in @var{files}.
 ## Each file is compressed separately and a new file with a '.gz' extension
-## is created.  The original files are not touched.  Existing compressed
+## is created.  The original files are not modified.  Existing compressed
 ## files are silently overwritten.  If @var{outdir} is defined the compressed
-## versions of the files are placed in this directory.
+## files are placed in this directory.
 ## @seealso{gunzip, bzip2, zip, tar}
 ## @end deftypefn
 
 function entries = gzip (varargin)
   if (nargin != 1 && nargin != 2) || (nargout > 1)
     print_usage ();
   endif
      
diff --git a/scripts/miscellaneous/tar.m b/scripts/miscellaneous/tar.m
--- a/scripts/miscellaneous/tar.m
+++ b/scripts/miscellaneous/tar.m
@@ -12,63 +12,55 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{entries} =} tar (@var{tarfile}, @var{files}, @var{root})
+## @deftypefn  {Function File} {@var{entries} =} tar (@var{tarfile}, @var{files})
+## @deftypefnx {Function File} {@var{entries} =} tar (@var{tarfile}, @var{files}, @var{root})
 ## Pack @var{files} @var{files} into the TAR archive @var{tarfile}.  The
 ## list of files must be a string or a cell array of strings.
 ##
 ## The optional argument @var{root} changes the relative path of @var{files}
 ## from the current directory.
 ##
 ## If an output argument is requested the entries in the archive are
 ## returned in a cell array.
-## @seealso{untar, gzip, gunzip, zip, unzip}
+## @seealso{untar, bzip2, gzip, zip}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <hauberg@gmail.com>
 
-function entries = tar (tarfile, files, root)
-
-  if (nargin == 2 || nargin == 3)
+function entries = tar (tarfile, files, root = ".")
 
-    if (nargin == 2)
-      root = ".";
-    endif
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+  endif
 
-    ## Test type of input
-    if (ischar (files))
-      files = cellstr (files);
-    endif
+  if (ischar (files))
+    files = cellstr (files);
+  endif
 
-    if (ischar (tarfile) && iscellstr (files) && ischar (root))
-
-      cmd = sprintf ("tar cvf %s -C %s %s", tarfile, root,
-                     sprintf (" %s", files{:}));
+  if (ischar (tarfile) && iscellstr (files) && ischar (root))
+    error ("tar: all arguments must be character strings");
+  endif
 
-      [status, output] = system (cmd);
+  cmd = sprintf ("tar cvf %s -C %s %s", tarfile, root,
+                 sprintf (" %s", files{:}));
+
+  [status, output] = system (cmd);
 
-      if (status == 0)
-        if (nargout > 0)
-          if (output(end) == "\n")
-            output(end) = [];
-          endif
-          entries = strsplit (output, "\n");
-          entries = entries';
-        endif
-      else
-        error ("tar: tar exited with status = %d", status);
-      endif
+  if (status)
+    error ("tar: tar exited with status = %d", status);
+  endif
 
-    else
-      error ("tar: expecting all arguments to be character strings");
+  if (nargout > 0)
+    if (output(end) == "\n")
+      output(end) = [];
     endif
-
-  else
-    print_usage("tar");
+    entries = strsplit (output, "\n");
+    entries = entries';
   endif
 
 endfunction
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -16,24 +16,23 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{files} =} unpack (@var{file})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir}, @var{filetype})
 ## Unpack the archive @var{file} based on its extension to the directory
-## @var{dir}.  If @var{file} is a cellstr, then all files will be
-## handled individually.  If @var{dir} is not specified, it defaults to
-## the current directory.  It returns a list of @var{files}
-## unpacked.  If a directory is in the file list, then the
-## @var{filetype} to unpack must also be specified.
+## @var{dir}.  If @var{file} is a list of strings, then each file is 
+## unpacked individually.  If @var{dir} is not specified, it defaults to
+## the current directory.  If a directory is in the file list, then the
+## @var{filetype} must also be specified.
 ##
-## The @var{files} includes the entire path to the output files.
-## @seealso{bunzip2, tar, untar, gzip, gunzip, zip, unzip}
+## The optional return value is a list of @var{files} unpacked.  
+## @seealso{bzip2, gzip, zip, tar}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function filelist = unpack (file, dir = ".", filetype = "")
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
diff --git a/scripts/miscellaneous/untar.m b/scripts/miscellaneous/untar.m
--- a/scripts/miscellaneous/untar.m
+++ b/scripts/miscellaneous/untar.m
@@ -12,20 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} untar (@var{tarfile}, @var{dir})
+## @deftypefn  {Function File} {} untar (@var{tarfile})
+## @deftypefnx {Function File} {} untar (@var{tarfile}, @var{dir})
 ## Unpack the TAR archive @var{tarfile} to the directory @var{dir}.
 ## If @var{dir} is not specified, it defaults to the current directory.
-## @seealso{unpack, bunzip2, tar, gzip, gunzip, zip, unzip}
+## @seealso{tar, unpack, bunzip2, gunzip, unzip}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <hauberg@gmail.com>
 ## Adapted-By: jwe, Bill Denney
 
 function varargout = untar (tarfile, dir = ".")
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/miscellaneous/unzip.m b/scripts/miscellaneous/unzip.m
--- a/scripts/miscellaneous/unzip.m
+++ b/scripts/miscellaneous/unzip.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} unzip (@var{zipfile})
 ## @deftypefnx {Function File} {} unzip (@var{zipfile}, @var{dir})
 ## Unpack the ZIP archive @var{zipfile} to the directory @var{dir}.
 ## If @var{dir} is not specified, it defaults to the current directory.
-## @seealso{unpack, bunzip2, tar, untar, gzip, gunzip, zip}
+## @seealso{zip, unpack, bunzip2, gunzip, untar}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <hauberg@gmail.com>
 ## Adapted-By: jwe, Bill Denney
 
 function varargout = unzip (zipfile, dir = ".")
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/miscellaneous/zip.m b/scripts/miscellaneous/zip.m
--- a/scripts/miscellaneous/zip.m
+++ b/scripts/miscellaneous/zip.m
@@ -15,62 +15,54 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{entries} =} zip (@var{zipfile}, @var{files})
 ## @deftypefnx {Function File} {@var{entries} =} zip (@var{zipfile}, @var{files}, @var{rootdir})
 ## Compress the list of files and/or directories specified in @var{files}
-## into the archive @var{zipfiles} in the same directory.  If @var{rootdir}
-## is defined the @var{files} is located relative to @var{rootdir} rather
-## than the current directory
-## @seealso{unzip,tar}
+## into the archive @var{zipfile} in the same directory.  If @var{rootdir}
+## is defined the @var{files} are located relative to @var{rootdir} rather
+## than the current directory.
+## @seealso{unzip, bzip2, gzip, tar}
 ## @end deftypefn
 
 ## Author: Sylvain Pelissier <sylvain.pelissier@gmail.com>
 
-function entries = zip (zipfile, files, rootdir)
-
-  if (nargin != 3)
-    rootdir = "./";
-  endif
-
-  if (nargin == 2 || nargin == 3)
-    rootdir = tilde_expand (rootdir);
-
-    if (ischar (files))
-      files = cellstr (files);
-    endif
-
-    if (ischar (zipfile) && iscellstr (files))
-
-      cmd = sprintf ("cd %s; zip -r %s/%s %s", rootdir, pwd (), zipfile,
-                     sprintf (" %s", files{:}));
-
-      [status, output] = system (cmd);
+function entries = zip (zipfile, files, rootdir = ".")
 
-      if (status == 0)
-        if (nargout > 0)
-          cmd = sprintf ("unzip -Z -1 %s", zipfile);
-          [status, entries] = system (cmd);
-          if (status == 0)
-            if (entries(end) == "\n")
-              entries(end) = [];
-            endif
-            entries = strsplit (entries, "\n");
-          else
-            error ("zip: zipinfo failed with exit status = %d", status);
-          endif
-        endif
-      else
-        error ("zip: zip failed with exit status = %d", status);
-      endif
-
-    else
-      error ("zip: expecting all arguments to be character strings");
-    endif
-
-  else
+  if (nargin != 2 && nargin != 3)
     print_usage ();
   endif
 
+  rootdir = tilde_expand (rootdir);
+
+  if (ischar (files))
+    files = cellstr (files);
+  endif
+
+  if (! ischar (zipfile) && ! iscellstr (files))
+    error ("zip: expecting all arguments to be character strings");
+  endif
+
+  cmd = sprintf ("cd %s; zip -r %s/%s %s", rootdir, pwd (), zipfile,
+                 sprintf (" %s", files{:}));
+
+  [status, output] = system (cmd);
+
+  if (status)
+    error ("zip: zip failed with exit status = %d", status);
+  endif
+
+  if (nargout > 0)
+    cmd = sprintf ("unzip -Z -1 %s", zipfile);
+    [status, entries] = system (cmd);
+    if (status)
+      error ("zip: zipinfo failed with exit status = %d", status);
+    endif
+    if (entries(end) == "\n")
+      entries(end) = [];
+    endif
+    entries = strsplit (entries, "\n");
+  endif
+
 endfunction
