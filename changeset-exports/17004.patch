# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374174334 25200
#      Thu Jul 18 12:05:34 2013 -0700
# Node ID 19b7c7412a632ad6a929617f16b3ef14481c4750
# Parent  c6a39f7f193db04bf4d1ef5bf2f44b5026ad082f
cell2mat.m: Re-vamp input validation for 30% speedup

* scripts/general/cell2mat.m: Use if tree to only call cellfun if necessary
to further validate inputs.  Add %!error tests for input validation.  Use
standard variable name 'sz' for size of object.

* libinterp/corefcn/cellfun.cc(try_cellfun_internal_ops): Put test for 'numel'
ahead of test for 'prodofsize' since it is the more common usage.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -156,17 +156,17 @@ try_cellfun_internal_ops (const octave_v
     }
   else if (name == "ndims")
     {
       NDArray result (f_args.dims ());
       for (octave_idx_type count = 0; count < k; count++)
         result(count) = static_cast<double> (f_args.elem (count).ndims ());
       retval(0) = result;
     }
-  else if (name == "prodofsize" || name == "numel")
+  else if (name == "numel" || name == "prodofsize")
     {
       NDArray result (f_args.dims ());
       for (octave_idx_type count = 0; count < k; count++)
         result(count) = static_cast<double> (f_args.elem (count).numel ());
       retval(0) = result;
     }
   else if (name == "size")
     {
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -16,18 +16,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{m} =} cell2mat (@var{c})
 ## Convert the cell array @var{c} into a matrix by concatenating all
 ## elements of @var{c} into a hyperrectangle.  Elements of @var{c} must
-## be numeric, logical or char matrices, or cell arrays, and @code{cat}
-## must be able to concatenate them together.
+## be numeric, logical, or char matrices; or cell arrays; or structs; and
+## @code{cat} must be able to concatenate them together.
 ## @seealso{mat2cell, num2cell}
 ## @end deftypefn
 
 function m = cell2mat (c)
 
   if (nargin != 1)
     print_usage ();
   endif
@@ -37,45 +37,49 @@ function m = cell2mat (c)
   endif
 
   nb = numel (c);
 
   if (nb == 0)
     m = [];
   else
 
-    ## We only want numeric, logical, and char matrices.
+    ## Check first for valid matrix types
     valid = cellfun ("isnumeric", c);
-    valid |= cellfun ("islogical", c);
-    valid |= cellfun ("isclass", c, "char");
-    validc = cellfun ("isclass", c, "cell");
-    valids = cellfun ("isclass", c, "struct");
-
-    if (! all (valid(:)) && ! all (validc(:)) && ! all (valids(:)))
-      error ("cell2mat: wrong type elements or mixed cells, structs and matrices");
+    valid = cellfun ("islogical", c(! valid));
+    valid = cellfun ("isclass", c(! valid), "char");
+    if (! all (valid(:)))
+      valid = cellfun ("isclass", c, "cell");
+      if (! all (valid(:)))
+        valid = cellfun ("isclass", c, "struct");
+        if (! all (valid(:)))
+          error ("cell2mat: wrong type elements or mixed cells, structs, and matrices");
+        endif
+      endif
     endif
 
-    sc = size (c);
+    sz = size (c);
     if (all (cellfun ("numel", c)(:) == 1))
-      m = reshape (cat (1, c{:}), sc);
+      ## Special case of all scalars
+      m = reshape (cat (1, c{:}), sz);
     else
 
       ## The goal is to minimize the total number of cat() calls.
       ## The dimensions can be concatenated along in arbitrary order.
       ## The numbers of concatenations are:
       ## n / d1
       ## n / (d1 * d2)
       ## n / (d1 * d2 * d3)
       ## etc.
       ## This is minimized if d1 >= d2 >= d3...
 
       nd = ndims (c);
-      [~, isc] = sort (sc, "descend");
-      for idim = isc
-        if (sc(idim) == 1)
+      [~, isz] = sort (sz, "descend");
+      for idim = isz
+        if (sz(idim) == 1)
           continue;
         endif
         xdim = [1:idim-1, idim+1:nd];
         cc = num2cell (c, xdim);
         c = cellfun ("cat", {idim}, cc{:}, "uniformoutput", false);
       endfor
       m = c{1};
 
@@ -104,8 +108,15 @@ endfunction
 %!test
 %! m = int8 (256*rand (4, 5, 6, 7, 8));
 %! c = mat2cell (m, [1 2 1], [1 2 2], [3 1 1 1], [4 1 2], [3 1 4]);
 %! assert (cell2mat (c), m);
 %!test
 %! m = {1, 2, 3};
 %! assert (cell2mat (mat2cell (m, 1, [1 1 1])), m);
 
+%!error cell2mat ()
+%!error cell2mat (1,2)
+%!error <C is not a cell array> cell2mat ([1,2])
+%!error <mixed cells, structs, and matrices> cell2mat ({[1], struct()})
+%!error <mixed cells, structs, and matrices> cell2mat ({[1], {1}})
+%!error <mixed cells, structs, and matrices> cell2mat ({struct(), {1}})
+
