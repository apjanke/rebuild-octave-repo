# HG changeset patch
# User jwe
# Date 769676435 0
#      Mon May 23 07:00:35 1994 +0000
# Node ID b8c0ee979c15add62bb4f4055401e34ff535716a
# Parent  b61c335c45c52e1c52f3e17a5f69ace2a4544175
[project @ 1994-05-23 06:55:52 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1905,16 +1905,60 @@ tree_constant_rep::convert_to_str (void)
     case magic_colon:
     default:
       panic_impossible ();
       break;
     }
   return retval;
 }
 
+int
+tree_constant_rep::is_true (void) const
+{
+  if (type_tag == string_constant || type_tag == range_constant)
+    {
+      tree_constant tmp = make_numeric ();
+      return tmp.is_true ();
+    }
+
+  int retval;
+  switch (type_tag)
+    {
+    case scalar_constant:
+      retval = (scalar != 0.0);
+      break;
+    case matrix_constant:
+      {
+	Matrix m = (matrix->all ()) . all ();
+	retval = (m.rows () == 1
+		  && m.columns () == 1
+		  && m.elem (0, 0) != 0.0);
+      }
+      break;
+    case complex_scalar_constant:
+      retval = (*complex_scalar != 0.0);
+      break;
+    case complex_matrix_constant:
+      {
+	Matrix m = (complex_matrix->all ()) . all ();
+	retval = (m.rows () == 1
+		  && m.columns () == 1
+		  && m.elem (0, 0) != 0.0);
+      }
+      break;
+    case string_constant:
+    case range_constant:
+    case magic_colon:
+    default:
+      panic_impossible ();
+      break;
+    }
+  return retval;
+}
+
 tree_constant
 tree_constant_rep::cumprod (void) const
 {
   if (type_tag == string_constant || type_tag == range_constant)
     {
       tree_constant tmp = make_numeric ();
       return tmp.cumprod ();
     }
@@ -2211,34 +2255,44 @@ tree_constant_rep::diag (void) const
     {
     case scalar_constant:
       retval = tree_constant (scalar);
       break;
     case matrix_constant:
       {
 	int nr = rows ();
 	int nc = columns ();
-	if (nr == 1 || nc == 1)
+	if (nr == 0 || nc == 0)
+	  {
+	    Matrix mtmp (nr, nc);
+	    retval = tree_constant (mtmp);
+	  }
+	else if (nr == 1 || nc == 1)
 	  retval = make_diag (matrix_value (), 0);
 	else
 	  {
 	    ColumnVector v = matrix->diag ();
 	    if (v.capacity () > 0)
 	      retval = tree_constant (v);
 	  }
       }
       break;
     case complex_scalar_constant:
       retval = tree_constant (*complex_scalar);
       break;
     case complex_matrix_constant:
       {
 	int nr = rows ();
 	int nc = columns ();
-	if (nr == 1 || nc == 1)
+	if (nr == 0 || nc == 0)
+	  {
+	    Matrix mtmp (nr, nc);
+	    retval = tree_constant (mtmp);
+	  }
+	else if (nr == 1 || nc == 1)
 	  retval = make_diag (complex_matrix_value (), 0);
 	else
 	  {
 	    ComplexColumnVector v = complex_matrix->diag ();
 	    if (v.capacity () > 0)
 	      retval = tree_constant (v);
 	  }
       }
@@ -2292,17 +2346,22 @@ tree_constant_rep::diag (const tree_cons
 	}
       break;
     case matrix_constant:
       if (a_type == scalar_constant)
 	{
 	  int k = NINT (tmp_a.double_value ());
 	  int nr = rows ();
 	  int nc = columns ();
-	  if (nr == 1 || nc == 1)
+	  if (nr == 0 || nc == 0)
+	    {
+	      Matrix mtmp (nr, nc);
+	      retval = tree_constant (mtmp);
+	    }
+	  else if (nr == 1 || nc == 1)
 	    retval = make_diag (matrix_value (), k);
 	  else
 	    {
 	      ColumnVector d = matrix->diag (k);
 	      retval = tree_constant (d);
 	    }
 	}
       else
@@ -2331,17 +2390,22 @@ tree_constant_rep::diag (const tree_cons
 	}
       break;
     case complex_matrix_constant:
       if (a_type == scalar_constant)
 	{
 	  int k = NINT (tmp_a.double_value ());
 	  int nr = rows ();
 	  int nc = columns ();
-	  if (nr == 1 || nc == 1)
+	  if (nr == 0 || nc == 0)
+	    {
+	      Matrix mtmp (nr, nc);
+	      retval = tree_constant (mtmp);
+	    }
+	  else if (nr == 1 || nc == 1)
 	    retval = make_diag (complex_matrix_value (), k);
 	  else
 	    {
 	      ComplexColumnVector d = complex_matrix->diag (k);
 	      retval = tree_constant (d);
 	    }
 	}
       else
