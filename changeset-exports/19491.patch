# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1379593105 -10800
#      Thu Sep 19 15:18:25 2013 +0300
# Node ID 93f26237c30b61c741c9ba9375ae153f8ff899bf
# Parent  9a9b0985e50800c9265a05c031bc65ae5a97454d
fix some missing semicolons and add some conditional compilation constructs to audio functions

* audioinfo.cc, audioread.cc, audiowrite.cc: fix a missing semicolon
* audiowrite.cc: prevent building the extension to format table if sndfile
is not present

diff --git a/libinterp/dldfcn/audioinfo.cc b/libinterp/dldfcn/audioinfo.cc
--- a/libinterp/dldfcn/audioinfo.cc
+++ b/libinterp/dldfcn/audioinfo.cc
@@ -53,12 +53,12 @@ Return information about an audio file s
       bits = -1;
     }
   retval.assign ("BitsPerSample", bits);
   retval.assign ("BitRate", -1);
   retval.assign ("Title", sf_get_string (file, SF_STR_TITLE));
   retval.assign ("Artist", sf_get_string (file, SF_STR_ARTIST));
   retval.assign ("Comment", sf_get_string (file, SF_STR_COMMENT));
 #else
-  error("sndfile not found on your system and thus audioinfo is not functional")
+  error("sndfile not found on your system and thus audioinfo is not functional");
 #endif
   return octave_value(retval);
 }
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -104,12 +104,12 @@ Read a file and return a specified range
     }
   else
     {
       ret_audio = octave_value (audio);
     }
   retval(0) = ret_audio;
   retval(1) = info.samplerate;
 #else
-  error("sndfile not found on your system and thus audioread is not functional")
+  error("sndfile not found on your system and thus audioread is not functional");
 #endif
   return octave_value(retval);
 }
diff --git a/libinterp/dldfcn/audiowrite.cc b/libinterp/dldfcn/audiowrite.cc
--- a/libinterp/dldfcn/audiowrite.cc
+++ b/libinterp/dldfcn/audiowrite.cc
@@ -1,16 +1,17 @@
 #include "oct.h"
 #include "ov-struct.h"
 #ifdef HAVE_SNDFILE
   #include <sndfile.h>
 #endif
 #include <string>
 #include <map>
 
+#ifdef HAVE_SNDFILE
 static void fill_extension_table(std::map<std::string, int> &table)
 {
   table["wav"] = SF_FORMAT_WAV;
   table["aiff"] = SF_FORMAT_AIFF;
   table["au"] = SF_FORMAT_AU;
   table["raw"] = SF_FORMAT_RAW;
   table["paf"] = SF_FORMAT_PAF;
   table["svx"] = SF_FORMAT_SVX;
@@ -29,16 +30,17 @@ static void fill_extension_table(std::ma
   table["sd2"] = SF_FORMAT_SD2;
   table["flac"] = SF_FORMAT_FLAC;
   table["caf"] = SF_FORMAT_CAF;
   table["wve"] = SF_FORMAT_WVE;
   table["ogg"] = SF_FORMAT_OGG;
   table["mpc2k"] = SF_FORMAT_MPC2K;
   table["rf64"] = SF_FORMAT_RF64;
 }
+#endif
   
 DEFUN_DLD(audiowrite, args, ,
 "-*- texinfo -*-\n\
 @deftypefn{Loadable Function} audiowrite(@var{filename}, @var{y}, @var{Fs})\n\
 \n\
 Write audio data from the matrix @var{y} to a file specified by @var{filename}, \
 file format will be determined by the file extension.\
 \n\
@@ -159,12 +161,12 @@ Comment.\n\
   if (comment != "")
     {
       sf_set_string (file, SF_STR_COMMENT, comment.c_str ());
     }
   sf_write_float (file, data, audio.rows () * audio.cols ());
   sf_close (file);
   free (data);
 #else
-  error("sndfile not found on your system and thus audiowrite is not functional")
+  error("sndfile not found on your system and thus audiowrite is not functional");
 #endif
   return octave_value(retval);
 }
