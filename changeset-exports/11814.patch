# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1219176952 14400
#      Tue Aug 19 16:15:52 2008 -0400
# Branch release-3-0-x
# Node ID 2ca993580acaf32d052b08ef8d9d4baa0dae72cc
# Parent  22876f8e0f1790aeefee069cec99428a721a97bb
Add a search for Contents.m files to the help function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2008-08-19  David Bateman  <dbateman@free.fr>
+
+	* load-path.cc (load-path::do_find_dir (const std:string&) const)):
+	Method to find a directory on the load-path corresponding to the
+	argument.
+	* load-path.h (load-path::do_find_dir (const std:string&) const),
+	load-path::find_dir (const std::string&) const): New methods.
+	* utils.cc (std::string contents_file_in_path (const std::string&)):
+	New function.
+	* utils.h  (std::string contents_file_in_path (const std::string&)): 
+	Declare it.
+	* help.cc (static bool raw_help_from_file (const std::string&,
+	std::string&, std::string&, bool&)): Also check is requested
+	argument is a directory and contains the file Contents.m.
+
 2008-08-19  Jaroslav Hajek <highegg@gmail.com>
 
 	* pt-assign.h (tree_simple_assignment::first_execution): New
 	member field.
 	(tree_simple_assignment::first_execution): Dtto.
 	* pt-assign.cc (tree_simple_assignment::tree_simple_assignment):
 	Initialize first_execution.
 	(tree_multi_assignment::tree_multi_assignment): Dtto.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1058,16 +1058,28 @@ raw_help_from_file (const std::string& n
 		    std::string& file, bool& symbol_found)
 {
   bool retval = false;
 
   h = get_help_from_file (nm, symbol_found, file);
 
   if (h.length () > 0)
     retval = true;
+  else if (! symbol_found)
+    {
+      file = contents_file_in_path (nm);
+      
+      if (! file.empty ())
+	{
+	  h = get_help_from_file (file, symbol_found);
+
+	  if (h.length () > 0)
+	    retval = true;
+	}
+    }
 
   return retval;
 }
 
 static bool
 help_from_file (std::ostream& os, const std::string& nm, bool& symbol_found)
 {
   bool retval = false;
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -789,16 +789,60 @@ load_path::do_find_file (const std::stri
 	    }
 	}
     }
 
   return retval;
 }
 
 std::string
+load_path::do_find_dir (const std::string& dir) const
+{
+  std::string retval;
+
+  if (dir.find_first_of (file_ops::dir_sep_chars ()) != std::string::npos
+      && (octave_env::absolute_pathname (dir)
+	  || octave_env::rooted_relative_pathname (dir)))
+    {
+      file_stat fs (dir);
+
+      if (fs.exists () && fs.is_dir ())
+	return dir;
+    }
+  else
+    {
+      for (const_dir_info_list_iterator p = dir_info_list.begin ();
+	   p != dir_info_list.end ();
+	   p++)
+	{
+	  std::string dname = p->dir_name;
+
+	  size_t dname_len = dname.length ();
+
+	  if (dname.substr (dname_len - 1) == file_ops::dir_sep_str ())
+	    dname = dname.substr (0, dname_len - 1);
+
+	  size_t dir_len = dir.length ();
+
+	  if (dname_len >= dir_len
+	      && file_ops::is_dir_sep (dname[dname_len - dir_len - 1])
+	      && dir.compare (dname.substr (dname_len - dir_len)) == 0)
+	    {
+	      file_stat fs (p->dir_name);
+
+	      if (fs.exists () && fs.is_dir ())
+		return p->dir_name;
+	    }
+	}
+    }
+
+  return retval;
+}
+
+std::string
 load_path::do_find_first_of (const string_vector& flist) const
 {
   std::string retval;
 
   std::string dir_name;
   std::string file_name;
 
   octave_idx_type flen = flist.length ();
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -111,16 +111,22 @@ public:
   }
 
   static std::string find_file (const std::string& file)
   {
     return instance_ok ()
       ? instance->do_find_file (file) : std::string ();
   }
 
+  static std::string find_dir (const std::string& dir)
+  {
+    return instance_ok ()
+      ? instance->do_find_dir (dir) : std::string ();
+  }
+
   static std::string find_first_of (const string_vector& files)
   {
     return instance_ok () ?
       instance->do_find_first_of (files) : std::string ();
   }
 
   static string_vector find_all_first_of (const string_vector& files)
   {
@@ -317,16 +323,18 @@ private:
 
   void do_update (void) const;
 
   std::string do_find_fcn (const std::string& fcn,
 			   int type = M_FILE | OCT_FILE | MEX_FILE) const;
 
   std::string do_find_file (const std::string& file) const;
 
+  std::string do_find_dir (const std::string& dir) const;
+
   std::string do_find_first_of (const string_vector& files) const;
 
   string_vector do_find_all_first_of (const string_vector& files) const;
 
   string_vector do_dirs (void) const;
 
   std::list<std::string> do_dir_list (void) const;
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -741,16 +741,38 @@ if @var{name} is not found.\n\
 	  int val = args(0).int_value ();
 
 	  if (! error_state)
 	    retval = octave_errno::set (val);
 	  else
 	    error ("errno: expecting integer argument");
 	}
     }
+
+  return retval;
+}
+
+// See if there is a directory called "name" in the path and if it
+// contains a Contents.m file return the full path to this file.
+
+std::string
+contents_file_in_path (const std::string& dir)
+{
+  std::string retval;
+
+  if (dir.length () > 0)
+    {
+      std::string tcontents = file_ops::concat (load_path::find_dir (dir), 
+						std::string ("Contents.m"));
+
+      file_stat fs (tcontents);
+
+      if (fs.exists ())
+	retval = octave_env::make_absolute (tcontents, octave_env::getcwd ());
+    }
   else if (nargin == 0)
     retval = octave_errno::get ();
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -59,16 +59,18 @@ extern OCTINTERP_API std::string
 search_path_for_file (const std::string&, const string_vector&);
 
 extern OCTINTERP_API string_vector
 search_path_for_all_files (const std::string&, const string_vector&);
 
 extern OCTINTERP_API std::string
 file_in_path (const std::string&, const std::string&);
 
+extern OCTINTERP_API std::string contents_file_in_path (const std::string&);
+
 extern OCTINTERP_API std::string fcn_file_in_path (const std::string&);
 extern OCTINTERP_API std::string oct_file_in_path (const std::string&);
 extern OCTINTERP_API std::string mex_file_in_path (const std::string&);
 
 extern OCTINTERP_API std::string do_string_escapes (const std::string& s);
 
 extern OCTINTERP_API const char *undo_string_escape (char c);
 
