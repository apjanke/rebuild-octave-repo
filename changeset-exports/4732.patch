# HG changeset patch
# User jwe
# Date 1075869168 0
#      Wed Feb 04 04:32:48 2004 +0000
# Node ID b484cdca27be4ab9b964484e7b35aff09245b93e
# Parent  176fcf62c46499b6d23d9d22173700f1f0a4b410
[project @ 2004-02-04 04:32:48 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2004-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.cc (tree_to_mat_idx): New arg, conversion_error.
+	Call error handler and return conversion_error == true if arg is
+	not integer.
+	(IDX_VEC_REP::idx_vector_rep): Exit early if conversion_error.
+
 2004-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* boolNDArray.h (boolNDArray::boolNDArray): Declare dim_vector
 	reference arg const.
 
 2004-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array-flags.cc: Include Array-flags.h, not Array.h.  Doh.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -55,21 +55,33 @@ IDX_VEC_REP::idx_vector_rep (const IDX_V
     {
       data = new int [len];
       for (int i = 0; i < len; i++)
 	data[i] = a.data[i];
     }
 }
 
 static inline int
-tree_to_mat_idx (double x)
+tree_to_mat_idx (double x, bool& conversion_error)
 {
-  return (x > 0)
-    ? (static_cast<int> (x + 0.5) - 1)
-    : (static_cast<int> (x - 0.5) - 1);
+  int retval = -1;
+
+  conversion_error = false;
+
+  if (D_NINT (x) != x)
+    {
+      (*current_liboctave_error_handler)
+	("expecting integer index, found %f", x);
+
+      conversion_error = true;
+    }
+  else
+    retval = static_cast<int> (x - 1);
+
+  return retval;
 }
 
 static inline int
 tree_to_mat_idx (int i)
 {
   return i - 1;
 }
 
@@ -102,24 +114,29 @@ IDX_VEC_REP::idx_vector_rep (const Colum
     {
       initialized = 1;
       return;
     }
   else
     {
       data = new int [len];
 
+      bool conversion_error = false;
+
       for (int i = 0; i < len; i++)
 	{
 	  double d = v.elem (i);
 
 	  if (idx_is_inf_or_nan (d))
 	    return;
 	  else
-	    data[i] = tree_to_mat_idx (d);
+	    data[i] = tree_to_mat_idx (d, conversion_error);
+
+	  if (conversion_error)
+	    return;
 	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const NDArray& nda)
   : data (0), len (nda.length ()), num_zeros (0), num_ones (0),
@@ -133,24 +150,29 @@ IDX_VEC_REP::idx_vector_rep (const NDArr
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
 
+      bool conversion_error = false;
+
       for (int i = 0; i < len; i++)
 	{
 	  double d = nda.elem (i);
 
 	  if (idx_is_inf_or_nan (d))
 	    return;
 	  else
-	    data[k++] = tree_to_mat_idx (d);
+	    data[k++] = tree_to_mat_idx (d, conversion_error);
+
+	  if (conversion_error)
+	    return;
 	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const Range& r)
   : data (0), len (r.nelem ()), num_zeros (0), num_ones (0),
@@ -170,24 +192,29 @@ IDX_VEC_REP::idx_vector_rep (const Range
       return;
     }
 
   double b = r.base ();
   double step = r.inc ();
 
   data = new int [len];
 
+  bool conversion_error = false;
+
   for (int i = 0; i < len; i++)
     {
       double val = b + i * step;
 
       if (idx_is_inf_or_nan (val))
 	return;
       else
-	data[i] = tree_to_mat_idx (val);
+	data[i] = tree_to_mat_idx (val, conversion_error);
+
+      if (conversion_error)
+	return;
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
   : data (0), len (1), num_zeros (0), num_ones (0),
     max_val (0), min_val (0), count (1), frozen_at_z_len (0),
@@ -196,17 +223,22 @@ IDX_VEC_REP::idx_vector_rep (double d)
     orig_dims (1, 1)
 {
   if (idx_is_inf_or_nan (d))
     return;
   else
     {
       data = new int [len];
 
-      data[0] = tree_to_mat_idx (d);
+      bool conversion_error = false;
+
+      data[0] = tree_to_mat_idx (d, conversion_error);
+
+      if (conversion_error)
+	return;
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (int i)
   : data (0), len (1), num_zeros (0), num_ones (0),
     max_val (0), min_val (0), count (1), frozen_at_z_len (0),
diff --git a/liboctave/lo-sstream.h b/liboctave/lo-sstream.h
--- a/liboctave/lo-sstream.h
+++ b/liboctave/lo-sstream.h
@@ -32,16 +32,18 @@ Software Foundation, 59 Temple Place - S
 #include <sstream>
 
 #define STRINGSTREAMBUF std::stringbuf
 
 #define ISSTREAM std::istringstream
 
 #define OSSTREAM std::ostringstream
 #define OSSTREAM_STR(os) (os).str ()
+// XXX FIXME XXX -- how long is the temporary created by the str()
+// method guaranteed to exist?
 #define OSSTREAM_C_STR(os) (os).str () . c_str ()
 #define OSSTREAM_ENDS ""
 #define OSSTREAM_FREEZE(os) do { } while (0)
 
 #else
 
 #include <strstream>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,35 @@
+2004-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* error.cc (defun_usage_message): Only accept one arg, a const
+	std::string& object.  Change all uses.  Pass nul-terminated string
+	to defun_message_1.
+	(defun_usage_message_1): New function, equivalent to old
+	defun_usage_message.
+
+	* ov-base.cc (nint_value): Use fix, not NINT.
+	(INT_CONV_METHOD): Likewise, use fix instead of just casting.
+
+	* data.cc (make_diag): Use int_value instead of nint_value to
+	extract k for Matlab compatibility.
+	(Flinspace): Likewise, for npoints.
+	(fill_matrix): Likewise, for extracting dims.
+	(Fsize): Likewise, for extracting dim argument.  Require int value.
+	* utils.cc (get_dimensions): Likewise.  Use fix, not NINT.
+
 2004-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* error.cc (verror, error_1): New arg, os.  Use this instead
+	of always printing to std:cerr.  Change all callers.
+
+	* error.cc (defun_usage_message): New function.
+	* error.h: Provide decl.
+	* defun.cc (print_usage): Use it to display error message.
+
 	* error.cc (verror): New arg, save_last_error.  Change all callers.
 	(usage): Set error_state after calling verror.
 
 	* oct-map.cc (Octave_map::assign (const std::string, const Cell&)):
 	Set dimensions to RHS dimensions, not 1x1.
 
 2004-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -562,17 +562,17 @@ make_diag (const octave_value& arg)
   return retval;
 }
 
 static octave_value
 make_diag (const octave_value& a, const octave_value& b)
 {
   octave_value retval;
 
-  int k = b.nint_value ();
+  int k = b.int_value ();
 
   if (error_state)
     {
       error ("diag: invalid second argument");      
       return retval;
     }
 
   if (a.is_real_type ())
@@ -841,17 +841,17 @@ returns the number of columns in the giv
 	  for (int i = 0; i < ndims; i++)
 	    m(0, i) = dimensions(i);
 
 	  retval(0) = m;
 	}
     }
   else if (nargin == 2 && nargout < 2)
     {
-      int nd = args(1).nint_value ();
+      int nd = args(1).int_value (true);
 
       if (error_state)
 	error ("size: expecting scalar as second argument");
       else
 	{
 	  if (nd == 1)
 	    retval(0) = args(0).rows ();
 	  else if (nd == 2)
@@ -1055,21 +1055,21 @@ fill_matrix (const octave_value_list& ar
       break;
 
     default:
       {
 	dims.resize (nargin);
 
 	for (int i = 0; i < nargin; i++)
 	  {
-	    dims(i) = args(i).is_empty () ? 0 : args(i).nint_value ();
+	    dims(i) = args(i).is_empty () ? 0 : args(i).int_value ();
 
 	    if (error_state)
 	      {
-		error ("%s: expecting scalar arguments", fcn);
+		error ("%s: expecting scalar integer arguments", fcn);
 		break;
 	      }
 	  }
       }
       break;
     }
 
   if (! error_state)
@@ -1242,17 +1242,17 @@ The @code{linspace} function always retu
 
   if (nargin != 2 && nargin != 3)
     {
       print_usage ("linspace");
       return retval;
     }
 
   if (nargin == 3)
-    npoints = args(2).nint_value ();
+    npoints = args(2).int_value ();
 
   if (! error_state)
     {
       octave_value arg_1 = args(0);
       octave_value arg_2 = args(1);
 
       if (arg_1.is_complex_type () || arg_2.is_complex_type ())
 	{
@@ -1276,16 +1276,18 @@ The @code{linspace} function always retu
 	    {
 	      RowVector rv = linspace (x1, x2, npoints);
 
 	      if (! error_state)
 		retval = rv;
 	    }
 	}
     }
+  else
+    error ("linspace: expecting third argument to be an integer");
 
   return retval;
 }
 
 DEFUN (reshape, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
 @deftypefnx {Function File} {} reshape (@var{a}, @var{siz})\n\
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -46,24 +46,32 @@ print_usage (const std::string& nm, bool
   symbol_record *sym_rec = fbi_sym_tab->lookup (nm);
 
   if (sym_rec)
     {
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
 	{
-	  octave_stdout << "\n*** " << nm << ":\n\n";
+	  OSSTREAM buf;
+
+	  buf << "\n*** " << nm << ":\n\n";
 
-	  display_help_text (octave_stdout, h);
+	  display_help_text (buf, h);
 
-	  octave_stdout << "\n";
+	  buf << "\n";
 
 	  if (! just_usage)
-	    additional_help_message (octave_stdout);
+	    additional_help_message (buf);
+
+	  buf << OSSTREAM_ENDS;
+
+	  defun_usage_message (OSSTREAM_STR (buf));
+
+	  OSSTREAM_FREEZE (buf);
 	}
     }
   else
     warning ("no usage message found for `%s'", nm.c_str ());
 }
 
 void
 check_version (const std::string& version, const std::string& fcn)
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -149,17 +149,18 @@ vwarning (const char *name, const char *
     }
 
   octave_diary << msg_string;
 
   std::cerr << msg_string;
 }
 
 static void
-verror (bool save_last_error, const char *name, const char *fmt, va_list args)
+verror (bool save_last_error, std::ostream& os,
+	const char *name, const char *fmt, va_list args)
 {
   if (discard_error_messages)
     return;
 
   if (! buffer_error_messages)
     flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
@@ -211,73 +212,73 @@ verror (bool save_last_error, const char
 	    tmp = msg_string.substr (pos+2);
 	}
 
       *error_message_buffer << tmp;
     }
   else
     {
       octave_diary << msg_string;
-      std::cerr << msg_string;
+      os << msg_string;
     }
 }
 
 // Note that we don't actually print any message if the error string
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
 
 static void
-error_1 (const char *name, const char *fmt, va_list args)
+error_1 (std::ostream& os, const char *name, const char *fmt, va_list args)
 {
   if (error_state != -2)
     {
       if (fmt)
 	{
 	  if (*fmt)
 	    {
 	      int len = strlen (fmt);
 	      if (fmt[len - 1] == '\n')
 		{
 		  if (len > 1)
 		    {
 		      char *tmp_fmt = strsave (fmt);
 		      tmp_fmt[len - 1] = '\0';
-		      verror (true, name, tmp_fmt, args);
+		      verror (true, os, name, tmp_fmt, args);
 		      delete [] tmp_fmt;
 		    }
 
 		  error_state = -2;
 		}
 	      else
-		verror (true, name, fmt, args);
+		verror (true, os, name, fmt, args);
 	    }
 	}
       else
 	panic ("error_1: invalid format");
 
       if (! error_state)
 	error_state = 1;
     }
 }
 
 void
 message (const char *name, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  verror (false, name, fmt, args);
+  verror (false, std::cerr, name, fmt, args);
   va_end (args);
 }
 
 void
 usage (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  verror (true, "usage", fmt, args);
+  verror (true, std::cerr, "usage", fmt, args);
   error_state = -1;
   va_end (args);
 }
 
 static void
 pr_where_2 (const char *fmt, va_list args)
 {
   if (fmt)
@@ -286,22 +287,22 @@ pr_where_2 (const char *fmt, va_list arg
 	{
 	  int len = strlen (fmt);
 	  if (fmt[len - 1] == '\n')
 	    {
 	      if (len > 1)
 		{
 		  char *tmp_fmt = strsave (fmt);
 		  tmp_fmt[len - 1] = '\0';
-		  verror (false, 0, tmp_fmt, args);
+		  verror (false, std::cerr, 0, tmp_fmt, args);
 		  delete [] tmp_fmt;
 		}
 	    }
 	  else
-	    verror (false, 0, fmt, args);
+	    verror (false, std::cerr, 0, fmt, args);
 	}
     }
   else
     panic ("pr_where_2: invalid format");
 }
 
 static void
 pr_where_1 (const char *fmt, ...)
@@ -393,17 +394,17 @@ warning (const char *fmt, ...)
 
 void
 error (const char *fmt, ...)
 {
   int init_state = error_state;
 
   va_list args;
   va_start (args, fmt);
-  error_1 ("error", fmt, args);
+  error_1 (std::cerr, "error", fmt, args);
   va_end (args);
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0 && curr_function)
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
@@ -417,32 +418,47 @@ error (const char *fmt, ...)
     }
 }
 
 void
 parse_error (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  error_1 (0, fmt, args);
+  error_1 (std::cerr, 0, fmt, args);
   va_end (args);
 }
 
 void
 panic (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   buffer_error_messages = 0;
   discard_error_messages = false;
-  verror (false, "panic", fmt, args);
+  verror (false, std::cerr, "panic", fmt, args);
   va_end (args);
   abort ();
 }
 
+static void
+defun_usage_message_1 (const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  error_1 (octave_stdout, 0, fmt, args);
+  va_end (args);
+}
+
+void
+defun_usage_message (const std::string& msg)
+{
+  defun_usage_message_1 ("%s", msg.c_str ());
+}
+
 typedef void (*error_fun)(const char *, ...);
 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
 
 static std::string
 handle_message (error_fun f, const char *msg, const octave_value_list& args)
 {
   std::string retval;
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -33,16 +33,19 @@ extern void reset_error_handler (void);
 
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
 extern void parse_error (const char *fmt, ...);
 extern void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
+// Helper function for print_usage defined in defun.cc.
+extern void defun_usage_message (const std::string& msg);
+
 // Current error state.
 extern int error_state;
 
 // Current warning state.
 extern int warning_state;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <climits>
 
 #include <iostream>
 
 #include "lo-ieee.h"
+#include "lo-mappers.h"
 #include "so-array.h"
 
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
@@ -255,17 +256,17 @@ octave_base_value::print_info (std::ostr
     if (! error_state) \
       { \
 	if (require_int && D_NINT (d) != d) \
 	  error ("conversion of %g to " #T " value failed", d); \
 	else if (d < MIN_LIMIT || d > MAX_LIMIT) \
 	  error ("conversion of %g to short int out of range (%d, %d)", \
 		 d, MIN_LIMIT, MAX_LIMIT); \
 	else \
-	  retval = static_cast<T> (d); \
+	  retval = static_cast<T> (fix (d)); \
       } \
     else \
       gripe_wrong_type_arg ("octave_base_value::" #F "_value ()", \
 			    type_name ()); \
  \
     return retval; \
   }
 
@@ -288,17 +289,17 @@ octave_base_value::nint_value (bool frc_
   if (! error_state)
     {
       if (xisnan (d))
 	{
 	  error ("conversion of NaN to integer value failed");
 	  return retval;
 	}
 
-      retval = NINT (d);
+      retval = static_cast<int> (fix (d));
     }
   else
     gripe_wrong_type_arg ("octave_base_value::nint_value ()", type_name ());
 
   return retval;
 }
 
 double
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -44,16 +44,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <setjmp.h>
 
 #include "quit.h"
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
+#include "lo-mappers.h"
 #include "lo-sstream.h"
 #include "oct-cmplx.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include <defaults.h>
@@ -786,17 +787,17 @@ check_dimensions (dim_vector& dim, const
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 dim_vector& dim)
 {
   if (a.is_scalar_type ())
     {
       dim.resize (2);
-      dim(0) = a.nint_value ();
+      dim(0) = a.int_value ();
       dim(1) = dim(0);
     }
   else
     {
       int nr = a.rows ();
       int nc = a.columns ();
 
       if (nr == 1 || nc == 1)
@@ -804,62 +805,62 @@ get_dimensions (const octave_value& a, c
           Array<double> v = a.vector_value ();
 
           if (error_state)
             return;
 
           int n = v.length ();
           dim.resize (n);
           for (int i = 0; i < n; i++)
-            dim(i) = NINT (v(i));
+            dim(i) = fix (v(i));
         }
       else
         warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
   check_dimensions (dim, warn_for); // May set error_state.
 }
 
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
 		int& nr, int& nc)
 {
   if (a.is_scalar_type ())
     {
-      nr = nc = a.nint_value ();
+      nr = nc = a.int_value ();
     }
   else
     {
       nr = a.rows ();
       nc = a.columns ();
 
       if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
 	{
 	  Array<double> v = a.vector_value ();
 
 	  if (error_state)
 	    return;
 
-	  nr = NINT (v (0));
-	  nc = NINT (v (1));
+	  nr = fix (v (0));
+	  nc = fix (v (1));
 	}
       else
 	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
   check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
 void
 get_dimensions (const octave_value& a, const octave_value& b,
 		const char *warn_for, int& nr, int& nc)
 {
-  nr = a.is_empty () ? 0 : a.nint_value ();
-  nc = b.is_empty () ? 0 : b.nint_value ();
+  nr = a.is_empty () ? 0 : a.int_value ();
+  nc = b.is_empty () ? 0 : b.int_value ();
 
   if (error_state)
     error ("%s: expecting two scalar arguments", warn_for);
   else
     check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
 Matrix
