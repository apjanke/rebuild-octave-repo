# HG changeset patch
# User jwe
# Date 949015848 0
#      Thu Jan 27 23:30:48 2000 +0000
# Node ID 8b1f46ac2b6498999a41384367fc211e3f41cc32
# Parent  1bb6e519a4a2bc9f5e9c6bf90aad234e829b0464
[project @ 2000-01-27 23:30:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-walk.h (tree_walker::visit_do_while_command): New pure virtual.
+	(tree_walker::visit_do_until_command): Ditto.
+	* pt-pr-code.cc (tree_print_code::visit_do_while_command):
+	New function.
+	(tree_print_code::visit_do_until_command): Ditto.
+	* pt-loop.h (tree_do_while_command): New class.
+	(tree_do_until_command): Ditto.
+	(tree_while_command::expr, tree_while_command::list):
+	Now protected instead of private.
+	* parse.y (make_do_while_command): New function.
+	(make_do_until_command): Ditto.
+	(loop_command): Recognize do-while and do-until statements.
+	(DO, UNTIL): New tokens.
+	* Makefile.in (parse.cc): Expect 13 shift/reduce conflicts.
+
+	* input.cc (match_sans_spaces): Require non-blank part of test
+	string to match standard string exactly.
+
 2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.h (scanf_format_elt::char_class): New struct elt.
 	Add arg to constructor.
 	(scanf_format_elt::special_conversion): New enum.
 	* oct-stream.cc (scanf_format_list::add_elt_to_list): New arg,
 	char_class.  Pass it to scanf_format_elt constructor.
 	(scanf_format_list::scanf_format_list): Create separate list
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -432,17 +432,17 @@ bin-dist:
 	if [ -n "$(BINDISTLIBS)" ]; then \
 	  echo $(BINDISTLIBS) >> ../`cat ../.fname`/LIBRARIES; \
 	fi
 .PHONY: bin-dist
 
 # Special rules -- these files need special things to be defined.
 
 parse.cc : parse.y
-	@echo "expect 11 shift/reduce conflicts"
+	@echo "expect 13 shift/reduce conflicts"
 	$(YACC) $(YFLAGS) $<
 	@$(top_srcdir)/move-if-change y.tab.c $(@F)
 
 lex.cc : lex.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -478,17 +478,17 @@ match_sans_spaces (const string& standar
   size_t beg = test.find_first_not_of (" \t");
 
   if (beg != NPOS)
     {
       size_t end = test.find_last_not_of (" \t");
 
       size_t len = end == NPOS ? NPOS : end - beg + 1;
 
-      return test.compare (standard, beg, len) == 0;
+      return (test.substr (beg, len) == standard);
     }
 
   return false;
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1015,16 +1015,17 @@ is_keyword (const string& s)
 	case catch_kw:
 	case continue_kw:
 	case else_kw:
 	case elseif_kw:
 	case global_kw:
 	case otherwise_kw:
 	case return_kw:
 	case static_kw:
+	case until_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
 	  yylval.tok_val = new token (token::simple_end, l, c);
 	  break;
 
 	case end_try_catch_kw:
@@ -1050,16 +1051,17 @@ is_keyword (const string& s)
 	case endswitch_kw:
 	  yylval.tok_val = new token (token::switch_end, l, c);
 	  break;
 
 	case endwhile_kw:
 	  yylval.tok_val = new token (token::while_end, l, c);
 	  break;
 
+	case do_kw:
 	case for_kw:
 	case while_kw:
 	  promptflag--;
 	  lexer_flags.looping++;
 	  break;
 
 	case if_kw:
 	case try_kw:
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -2,16 +2,17 @@
 
 enum octave_kw_id
 {
   all_va_args_kw,
   break_kw,
   case_kw,
   catch_kw,
   continue_kw,
+  do_kw,
   else_kw,
   elseif_kw,
   end_kw,
   end_try_catch_kw,
   end_unwind_protect_kw,
   endfor_kw,
   endfunction_kw,
   endif_kw,
@@ -26,29 +27,31 @@ enum octave_kw_id
   magic_file_kw,
   magic_line_kw,
   otherwise_kw,
   replot_kw,
   return_kw,
   static_kw,
   switch_kw,
   try_kw,
+  until_kw,
   unwind_protect_kw,
   unwind_protect_cleanup_kw,
   while_kw
 };
 
 %}
 struct octave_kw { const char *name; int tok; octave_kw_id kw_id; };
 %%
 all_va_args, ALL_VA_ARGS, all_va_args_kw
 break, BREAK, break_kw
 case, CASE, case_kw
 catch, CATCH, catch_kw
 continue, CONTINUE, continue_kw
+do, DO, do_kw
 else, ELSE, else_kw
 elseif, ELSEIF, elseif_kw
 end, END, end_kw
 end_try_catch, END, end_try_catch_kw
 end_unwind_protect, END, end_unwind_protect_kw
 endfor, END, endfor_kw
 endfunction, END, endfunction_kw
 endif, END, endif_kw
@@ -61,13 +64,14 @@ gplot, PLOT, gplot_kw
 gsplot, PLOT, gsplot_kw
 if, IF, if_kw
 otherwise, OTHERWISE, otherwise_kw
 replot, PLOT, replot_kw
 return, FUNC_RET, return_kw
 static, STATIC, static_kw
 switch, SWITCH, switch_kw
 try, TRY, try_kw
+until, UNTIL, until_kw
 unwind_protect, UNWIND, unwind_protect_kw
 unwind_protect_cleanup, CLEANUP, unwind_protect_cleanup_kw
 while, WHILE, while_kw
 __FILE__, TEXT, magic_file_kw
 __LINE__, NUM, magic_line_kw
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -181,16 +181,26 @@ static tree_command *
 make_try_command (token *try_tok, tree_statement_list *body,
 		  tree_statement_list *cleanup, token *end_tok);
 
 // Build a while command.
 static tree_command *
 make_while_command (token *while_tok, tree_expression *expr,
 		    tree_statement_list *body, token *end_tok);
 
+// Build a do-while command.
+static tree_command *
+make_do_while_command (token *do_tok, tree_statement_list *body,
+		       tree_expression *expr);
+
+// Build a do-until command.
+static tree_command *
+make_do_until_command (token *do_tok, tree_statement_list *body,
+		       tree_expression *expr);
+
 // Build a for command.
 static tree_command *
 make_for_command (token *for_tok, tree_argument_list *lhs,
 		  tree_expression *expr, tree_statement_list *body,
 		  token *end_tok);
 
 // Build a break command.
 static tree_command *
@@ -346,17 +356,17 @@ set_stmt_print_flag (tree_statement_list
 %token <tok_val> QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> STRUCT_ELT
 %token <tok_val> NAME
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE AXES_TAG
-%token <tok_val> FOR WHILE
+%token <tok_val> FOR WHILE DO UNTIL
 %token <tok_val> IF ELSEIF ELSE
 %token <tok_val> SWITCH CASE OTHERWISE
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL STATIC
 
 // Other tokens.
@@ -944,16 +954,26 @@ default_case	: OTHERWISE opt_sep opt_lis
 // Looping
 // =======
 
 loop_command	: WHILE expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_while_command ($1, $2, $4, $5)))
 		      ABORT_PARSE;
 		  }
+		| DO opt_sep opt_list WHILE expression
+		  {
+		    if (! ($$ = make_do_while_command ($1, $3, $5)))
+		      ABORT_PARSE;
+		  }
+		| DO opt_sep opt_list UNTIL expression
+		  {
+		    if (! ($$ = make_do_until_command ($1, $3, $5)))
+		      ABORT_PARSE;
+		  }
 		| FOR assign_lhs '=' expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_for_command ($1, $2, $4, $6, $7)))
 		      ABORT_PARSE;
 		  }
 		;
 
 // =======
@@ -2067,16 +2087,58 @@ make_while_command (token *while_tok, tr
       int c = while_tok->column ();
 
       retval = new tree_while_command (expr, body, l, c);
     }
 
   return retval;
 }
 
+// Build a do-while command.
+
+static tree_command *
+make_do_while_command (token *do_tok, tree_statement_list *body,
+		       tree_expression *expr)
+{
+  tree_command *retval = 0;
+
+  maybe_warn_assign_as_truth_value (expr);
+
+  // We have to do this because while can also be used to begin a loop.
+  lexer_flags.looping -= 2;
+  promptflag++;
+
+  int l = do_tok->line ();
+  int c = do_tok->column ();
+
+  retval = new tree_do_while_command (expr, body, l, c);
+
+  return retval;
+}
+
+// Build a do-until command.
+
+static tree_command *
+make_do_until_command (token *do_tok, tree_statement_list *body,
+		       tree_expression *expr)
+{
+  tree_command *retval = 0;
+
+  maybe_warn_assign_as_truth_value (expr);
+
+  lexer_flags.looping--;
+
+  int l = do_tok->line ();
+  int c = do_tok->column ();
+
+  retval = new tree_do_until_command (expr, body, l, c);
+
+  return retval;
+}
+
 // Build a for command.
 
 static tree_command *
 make_for_command (token *for_tok, tree_argument_list *lhs,
 		  tree_expression *expr, tree_statement_list *body,
 		  token *end_tok)
 {
   tree_command *retval = 0;
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -110,16 +110,102 @@ tree_while_command::eval_error (void)
 }
 
 void
 tree_while_command::accept (tree_walker& tw)
 {
   tw.visit_while_command (*this);
 }
 
+// Do-While
+
+void
+tree_do_while_command::eval (void)
+{
+  if (error_state)
+    return;
+
+  if (! expr)
+    panic_impossible ();
+
+  for (;;)
+    {
+      if (list)
+	{
+	  list->eval ();
+
+	  if (error_state)
+	    {
+	      eval_error ();
+	      return;
+	    }
+	}
+
+      if (quit_loop_now () || ! expr->is_logically_true ("do-while"))
+	break;
+    }
+}
+
+void
+tree_do_while_command::eval_error (void)
+{
+  if (error_state > 0)
+    ::error ("evaluating do-while command near line %d, column %d",
+	     line (), column ());
+}
+
+void
+tree_do_while_command::accept (tree_walker& tw)
+{
+  tw.visit_do_while_command (*this);
+}
+
+// Do-Until
+
+void
+tree_do_until_command::eval (void)
+{
+  if (error_state)
+    return;
+
+  if (! expr)
+    panic_impossible ();
+
+  for (;;)
+    {
+      if (list)
+	{
+	  list->eval ();
+
+	  if (error_state)
+	    {
+	      eval_error ();
+	      return;
+	    }
+	}
+
+      if (quit_loop_now () || expr->is_logically_true ("do-until"))
+	break;
+    }
+}
+
+void
+tree_do_until_command::eval_error (void)
+{
+  if (error_state > 0)
+    ::error ("evaluating do-until command near line %d, column %d",
+	     line (), column ());
+}
+
+void
+tree_do_until_command::accept (tree_walker& tw)
+{
+  tw.visit_do_until_command (*this);
+}
+
 // For.
 
 tree_simple_for_command::~tree_simple_for_command (void)
 {
   delete expr;
   delete list;
 }
 
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -62,31 +62,101 @@ public:
   void eval_error (void);
 
   tree_expression *condition (void) { return expr; }
 
   tree_statement_list *body (void) { return list; }
 
   void accept (tree_walker& tw);
 
-private:
+protected:
 
   // Expression to test.
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
 
+private:
+
   // No copying!
 
   tree_while_command (const tree_while_command&);
 
   tree_while_command& operator = (const tree_while_command&);
 };
 
+// Do-While.
+
+class
+tree_do_while_command : public tree_while_command
+{
+public:
+
+  tree_do_while_command (int l = -1, int c = -1)
+    : tree_while_command (l, c) { }
+
+  tree_do_while_command (tree_expression *e, int l = -1, int c = -1)
+    : tree_while_command (e, l, c) { }
+
+  tree_do_while_command (tree_expression *e, tree_statement_list *lst,
+		      int l = -1, int c = -1)
+    : tree_while_command (e, lst, l, c) { }
+
+  ~tree_do_while_command (void) { }
+
+  void eval (void);
+
+  void eval_error (void);
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_do_while_command (const tree_do_while_command&);
+
+  tree_do_while_command& operator = (const tree_do_while_command&);
+};
+
+// Do-Until.
+
+class
+tree_do_until_command : public tree_while_command
+{
+public:
+
+  tree_do_until_command (int l = -1, int c = -1)
+    : tree_while_command (l, c) { }
+
+  tree_do_until_command (tree_expression *e, int l = -1, int c = -1)
+    : tree_while_command (e, l, c) { }
+
+  tree_do_until_command (tree_expression *e, tree_statement_list *lst,
+		      int l = -1, int c = -1)
+    : tree_while_command (e, lst, l, c) { }
+
+  ~tree_do_until_command (void) { }
+
+  void eval (void);
+
+  void eval_error (void);
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_do_until_command (const tree_do_until_command&);
+
+  tree_do_until_command& operator = (const tree_do_until_command&);
+};
+
 // For.
 
 class
 tree_simple_for_command : public tree_command
 {
 public:
 
   tree_simple_for_command (int l = -1, int c = -1)
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1096,16 +1096,76 @@ tree_print_code::visit_while_command (tr
       decrement_indent_level ();
     }
 
   indent ();
 
   os << "endwhile";
 }
 
+void
+tree_print_code::visit_do_while_command (tree_do_while_command& cmd)
+{
+  indent ();
+
+  os << "do";
+
+  newline ();
+
+  tree_statement_list *list = cmd.body ();
+
+  if (list)
+    {
+      increment_indent_level ();
+      list->accept (*this);
+      decrement_indent_level ();
+    }
+
+  indent ();
+
+  os << "while";
+
+  tree_expression *expr = cmd.condition ();
+
+  if (expr)
+    expr->accept (*this);
+
+  newline ();
+}
+
+void
+tree_print_code::visit_do_until_command (tree_do_until_command& cmd)
+{
+  indent ();
+
+  os << "do";
+
+  newline ();
+
+  tree_statement_list *list = cmd.body ();
+
+  if (list)
+    {
+      increment_indent_level ();
+      list->accept (*this);
+      decrement_indent_level ();
+    }
+
+  indent ();
+
+  os << "until";
+
+  tree_expression *expr = cmd.condition ();
+
+  if (expr)
+    expr->accept (*this);
+
+  newline ();
+}
+
 // Current indentation.
 int tree_print_code::curr_print_indent_level = 0;
 
 // TRUE means we are at the beginning of a line.
 bool tree_print_code::beginning_of_line = true;
 
 // Each print_code() function should call this before printing
 // anything.
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -133,16 +133,20 @@ public:
   void visit_switch_command (tree_switch_command&);
 
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
+  void visit_do_while_command (tree_do_while_command&);
+
+  void visit_do_until_command (tree_do_until_command&);
+
 private:
 
   ostream& os;
 
   string prefix;
 
   bool print_original_text;
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -62,16 +62,18 @@ class tree_statement_list;
 class subplot;
 class subplot_axes;
 class subplot_list;
 class subplot_style;
 class subplot_using;
 class tree_try_catch_command;
 class tree_unwind_protect_command;
 class tree_while_command;
+class tree_do_until_command;
+class tree_do_while_command;
 
 class
 tree_walker
 {
 public:
 
   virtual void
   visit_argument_list (tree_argument_list&) = 0;
@@ -200,16 +202,22 @@ public:
   visit_try_catch_command (tree_try_catch_command&) = 0;
 
   virtual void
   visit_unwind_protect_command (tree_unwind_protect_command&) = 0;
 
   virtual void
   visit_while_command (tree_while_command&) = 0;
 
+  virtual void
+  visit_do_while_command (tree_do_while_command&) = 0;
+
+  virtual void
+  visit_do_until_command (tree_do_until_command&) = 0;
+
 protected:
 
   tree_walker (void) { }
 
   virtual ~tree_walker (void) { }
 
 private:
 
