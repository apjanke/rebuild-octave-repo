# HG changeset patch
# User jwe
# Date 1035473040 0
#      Thu Oct 24 15:24:00 2002 +0000
# Node ID da4c69a811378a41241128607a482948c5819dd5
# Parent  19a1626b8d578cd88e23b00de578402865eaac42
[project @ 2002-10-24 15:23:59 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-10-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (LINK_DEPS): Include $(LIBKPATHSEA) here.
+	(liboctave.$(SHLEXT)): Not here.
+
 2002-10-17  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-shlib.cc (octave_w32_shlib): New class to support Windows.
 
 2002-10-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Don't bother with versions for
 	$(SHLBIN) files.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -16,17 +16,18 @@ include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 ifeq ($(INCLUDE_LINK_DEPS), true)
   LINK_DEPS = \
     -L../libcruft -L../kpathsea -L../glob -L. $(RLD_FLAG) \
-    $(LIBCRUFT) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBREADLINE) -lglob $(LIBS)
+    $(LIBCRUFT) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBREADLINE) \
+    -lglob $(LIBS) $(LIBKPATHSEA)
 endif
 
 MATRIX_INC := Array.h Array2.h Array3.h ArrayN.h DiagArray2.h Array-flags.h \
 	Array-idx.h Array2-idx.h Array3-idx.h ArrayN-idx.h MArray-defs.h \
 	MArray.h MArray2.h MDiagArray2.h Matrix.h \
 	base-lu.h mx-base.h mx-op-defs.h mx-defs.h mx-ext.h \
 	CColVector.h CDiagMatrix.h CMatrix.h CRowVector.h CmplxAEPBAL.h \
 	CmplxCHOL.h CmplxDET.h CmplxHESS.h CmplxLU.h CmplxQR.h \
@@ -215,17 +216,17 @@ liboctave.$(LIBEXT): $(LIBOCTAVE_OBJECTS
 	$(RANLIB) $@
 
 liboctave.$(SHLEXT_VER): liboctave.$(SHLEXT)
 	rm -f $@
 	$(LN_S) $< $@
 
 liboctave.$(SHLEXT): $(LIBOCTAVE_PICOBJ)
 	rm -f $@
-	$(SH_LD) $(SH_LDFLAGS) $(SONAME_FLAGS) -o $@ $^ $(LINK_DEPS) $(LIBKPATHSEA)
+	$(SH_LD) $(SH_LDFLAGS) $(SONAME_FLAGS) -o $@ $^ $(LINK_DEPS)
 
 $(LIBOCTAVE_PICOBJ): stmp-pic
 
 check: all
 .PHONY: check
 
 install: install-lib install-inc
 .PHONY: install
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-10-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-mapper.cc (octave_mapper::apply): Don't try real_type case if
+	arg is a string and we have a ch_map_fcn.
+
+	* Makefile.in: Add $(LIBKPATHSEA) to $(OCTAVE_LIBS) if
+	$(INCLUDE_LINK_DEPS) is false, not if $(SHARED_LIBS) is false.
+
 2002-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/daspk.cc (daspk): Use set_options, not copy. 
 	* DLD-FUNCTIONS/dasrt.cc (dasrt): Likewise.
 	* DLD-FUNCTIONS/dassl.cc (dassl): Likewise.
 	* DLD-FUNCTIONS/fsolve.cc (fsolve): Likewise.
 	* DLD-FUNCTIONS/lsode.cc (lsode): Likewise.
 	* DLD-FUNCTIONS/odessa.cc (Fodessa): Likewise.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -191,17 +191,17 @@ DOC_FILES := $(sort $(DEF_FILES) $(patsu
 
 OCTAVE_LFLAGS = -L$(TOPDIR)/liboctave -L$(TOPDIR)/libcruft \
   -L$(TOPDIR)/src $(RLD_FLAG)
 
 OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAVE) \
   $(SPECIAL_MATH_LIB) $(LIBCRUFT) \
   $(LIBPLPLOT) $(LIBGLOB) $(LIBDLFCN)
 
-ifneq ($SHARED_LIBS), true)
+ifneq ($INCLUDE_LINK_DEPS), true)
 OCTAVE_LIBS += $(LIBKPATHSEA)
 endif
 
 ifeq ($(INCLUDE_LINK_DEPS),true)
   OCTINTERP_LINK_DEPS = -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT)
   OCT_LINK_DEPS = \
     -L../libcruft $(LIBCRUFT) -L../liboctave $(LIBOCTAVE) -L. $(LIBOCTINTERP)
 endif
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -100,17 +100,21 @@ any_element_greater_than (const Matrix& 
 #define MAPPER_LOOP(T, F, M) \
   MAPPER_LOOP_1 (T, F, M, )
 
 octave_value
 octave_mapper::apply (const octave_value& arg) const
 {
   octave_value retval;
 
-  if (arg.is_real_type ())
+  // XXX FIXME XXX -- is_real_type can return true for strings if
+  // implicit_str_to_num_ok is nonzero.  Should it really work that
+  // way?
+
+  if (arg.is_real_type () && ! (arg.is_string () && ch_map_fcn))
     {
       if (arg.is_scalar_type ())
 	{
 	  double d = arg.double_value ();
 
 	  if (can_ret_cmplx_for_real && (d < lower_limit || d > upper_limit))
 	    {
 	      if (c_c_map_fcn)
