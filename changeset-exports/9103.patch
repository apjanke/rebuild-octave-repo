# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239180786 -7200
#      Wed Apr 08 10:53:06 2009 +0200
# Node ID 10bed8fbec991f98fb540baaa3da3e6995d5edde
# Parent  9dc516d361758078b9da9c7cdf4e88f14820d616
optimize scalar .^ range operation

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-04-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xpow.cc (elem_xpow (double, const Range&),
+	elem_xpow (const Complex&, const Range&)): New functions.
+	* xpow.h: Declare them.
+	* OPERATORS/op-range.cc: Define scalar .^ range and complex .^ range &
+	install them.
+
 2009-04-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (octave_struct::subsasgn): Fix reference counting
 	optimization.
 
 2008-04-03  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/max.cc (MINMAX_SPARSE_BODY): Allow sparse boolean 
diff --git a/src/OPERATORS/op-range.cc b/src/OPERATORS/op-range.cc
--- a/src/OPERATORS/op-range.cc
+++ b/src/OPERATORS/op-range.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
 #include "ops.h"
+#include "xpow.h"
 
 // range unary ops.
 
 DEFUNOP (not, range)
 {
   CAST_UNOP_ARG (const octave_range&);
 
   return octave_value (! v.matrix_value());
@@ -62,16 +63,19 @@ DEFUNOP (transpose, range)
 
 DEFBINOP_OP (addrs, range, scalar, +)
 DEFBINOP_OP (addsr, scalar, range, +)
 DEFBINOP_OP (subrs, range, scalar, -)
 DEFBINOP_OP (subsr, scalar, range, -)
 DEFBINOP_OP (mulrs, range, scalar, *)
 DEFBINOP_OP (mulsr, scalar, range, *)
 
+DEFBINOP_FN (el_powsr, scalar, range, elem_xpow)
+DEFBINOP_FN (el_powcsr, complex, range, elem_xpow)
+
 DEFNDCATOP_FN (r_r, range, range, array, array, concat)
 DEFNDCATOP_FN (r_s, range, scalar, array, array, concat)
 DEFNDCATOP_FN (r_m, range, matrix, array, array, concat)
 DEFNDCATOP_FN (r_cs, range, complex, array, complex_array, concat)
 DEFNDCATOP_FN (r_cm, range, complex_matrix, array, complex_array, concat)
 DEFNDCATOP_FN (r_b, range, bool, array, array, concat)
 DEFNDCATOP_FN (r_bm, range, bool_matrix, array, array, concat)
 DEFNDCATOP_FN (r_chm, range, char_matrix, array, char_array, concat)
@@ -101,16 +105,19 @@ install_range_ops (void)
 
   INSTALL_BINOP (op_add, octave_range, octave_scalar, addrs);
   INSTALL_BINOP (op_add, octave_scalar, octave_range, addsr);
   INSTALL_BINOP (op_sub, octave_range, octave_scalar, subrs);
   INSTALL_BINOP (op_sub, octave_scalar, octave_range, subsr);
   INSTALL_BINOP (op_mul, octave_range, octave_scalar, mulrs);
   INSTALL_BINOP (op_mul, octave_scalar, octave_range, mulsr);
 
+  INSTALL_BINOP (op_el_pow, octave_scalar, octave_range, el_powsr);
+  INSTALL_BINOP (op_el_pow, octave_complex, octave_range, el_powcsr);
+
   INSTALL_CATOP (octave_range, octave_range, r_r);
   INSTALL_CATOP (octave_range, octave_scalar, r_s);
   INSTALL_CATOP (octave_range, octave_matrix, r_m);
   INSTALL_CATOP (octave_range, octave_complex, r_cs);
   INSTALL_CATOP (octave_range, octave_complex_matrix, r_cm);
   INSTALL_CATOP (octave_range, octave_bool, r_b);
   INSTALL_CATOP (octave_range, octave_bool_matrix, r_bm);
   INSTALL_CATOP (octave_range, octave_char_matrix, r_chm);
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "EIG.h"
 #include "fEIG.h"
 #include "dDiagMatrix.h"
 #include "fDiagMatrix.h"
 #include "dMatrix.h"
 #include "PermMatrix.h"
 #include "mx-cm-cdm.h"
 #include "oct-cmplx.h"
+#include "Range.h"
 #include "quit.h"
 
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "xpow.h"
 
 #ifdef _OPENMP
@@ -686,16 +687,53 @@ elem_xpow (double a, const ComplexMatrix
       {
 	OCTAVE_QUIT;
 	result (i, j) = std::pow (atmp, b (i, j));
       }
 
   return result;
 }
 
+octave_value
+elem_xpow (double a, const Range& r)
+{
+  octave_value retval;
+
+  if (r.nelem () <= 0)
+    retval = Matrix ();
+  else if (a < 0.0 && ! r.all_elements_are_ints ())
+    {
+      ComplexMatrix mat (1, r.nelem ());
+      Complex atmp (a);
+      Complex *pmat = mat.fortran_vec ();
+
+      pmat[0] = std::pow (atmp, r.base ());
+      Complex mul = std::pow (atmp, r.inc ());
+      for (octave_idx_type i = 1; i < r.nelem (); i++)
+        pmat[i] = pmat[i-1] * mul;
+
+      retval = mat;
+    }
+  else
+    {
+      Matrix mat (1, r.nelem ());
+      double *pmat = mat.fortran_vec ();
+
+      double base = std::pow (a, r.base ());
+      pmat[0] = base;
+      double mul = std::pow (a, r.inc ());
+      for (octave_idx_type i = 1; i < r.nelem (); i++)
+        pmat[i] = (base *= mul);
+
+      retval = mat;
+    }
+
+  return retval;
+}
+
 // -*- 3 -*-
 octave_value
 elem_xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
@@ -883,16 +921,39 @@ elem_xpow (const Complex& a, const Compl
       {
 	OCTAVE_QUIT;
 	result (i, j) = std::pow (a, b (i, j));
       }
 
   return result;
 }
 
+octave_value
+elem_xpow (const Complex& a, const Range& r)
+{
+  octave_value retval;
+
+  if (r.nelem () <= 0)
+    retval = Matrix ();
+  else
+    {
+      ComplexMatrix mat (1, r.nelem ());
+      Complex *pmat = mat.fortran_vec ();
+
+      pmat[0] = std::pow (a, r.base ());
+      Complex mul = std::pow (a, r.inc ());
+      for (octave_idx_type i = 1; i < r.nelem (); i++)
+        pmat[i] = pmat[i-1] * mul;
+
+      retval = mat;
+    }
+
+  return retval;
+}
+
 // -*- 9 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, double b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
diff --git a/src/xpow.h b/src/xpow.h
--- a/src/xpow.h
+++ b/src/xpow.h
@@ -35,16 +35,17 @@ class ComplexDiagMatrix;
 class FloatDiagMatrix;
 class FloatComplexDiagMatrix;
 class PermMatrix;
 class NDArray;
 class FloatNDArray;
 class ComplexNDArray;
 class FloatComplexNDArray;
 class octave_value;
+class Range;
 
 extern octave_value xpow (double a, double b);
 extern octave_value xpow (double a, const Matrix& b);
 extern octave_value xpow (double a, const Complex& b);
 extern octave_value xpow (double a, const ComplexMatrix& b);
 
 extern octave_value xpow (const Matrix& a, double b);
 extern octave_value xpow (const Matrix& a, const Complex& b);
@@ -62,24 +63,26 @@ extern octave_value xpow (const Complex&
 extern octave_value xpow (const ComplexMatrix& a, double b);
 extern octave_value xpow (const ComplexMatrix& a, const Complex& b);
 
 extern octave_value xpow (const ComplexDiagMatrix& a, double b);
 extern octave_value xpow (const ComplexDiagMatrix& a, const Complex& b);
 
 extern octave_value elem_xpow (double a, const Matrix& b);
 extern octave_value elem_xpow (double a, const ComplexMatrix& b);
+extern octave_value elem_xpow (double a, const Range& r);
 
 extern octave_value elem_xpow (const Matrix& a, double b);
 extern octave_value elem_xpow (const Matrix& a, const Matrix& b);
 extern octave_value elem_xpow (const Matrix& a, const Complex& b);
 extern octave_value elem_xpow (const Matrix& a, const ComplexMatrix& b);
 
 extern octave_value elem_xpow (const Complex& a, const Matrix& b);
 extern octave_value elem_xpow (const Complex& a, const ComplexMatrix& b);
+extern octave_value elem_xpow (const Complex& a, const Range& r);
 
 extern octave_value elem_xpow (const ComplexMatrix& a, double b);
 extern octave_value elem_xpow (const ComplexMatrix& a, const Matrix& b);
 extern octave_value elem_xpow (const ComplexMatrix& a, const Complex& b);
 extern octave_value elem_xpow (const ComplexMatrix& a, const ComplexMatrix& b);
 
 
 extern octave_value elem_xpow (double a, const NDArray& b);
