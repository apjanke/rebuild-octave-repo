# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1424514750 -3600
#      Sat Feb 21 11:32:30 2015 +0100
# Node ID 4569903d6c5a4ed99938d80a32b4c94efa1b1945
# Parent  6e94fcc1a8a624cdbab927d71fed0074e520adbf
axes.m: reworks axes restacking for ML compatibility (bug #43282)

* axes.m (restack_axes): New subfunction.
* axes.m ("axes (prp/val)" form): restack annotation axes, only if it was already on top
* axes.m ("axes (HAX)" form): let axes with "handlevisibility" == "off" be restacked also
* annotation.m: ensure annotation axes is on top when drawing a new annotation.

diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -235,16 +235,19 @@ function varargout = annotation (varargi
     endif
     
     ## Axes
     hca = get (hf, "currentaxes");
 
     hax = findall (hf, "-depth", 1, "tag", "scribeoverlay");
     if (isempty (hax))
       hax = buildoverlay (hf);
+    else
+      ## Make sure the annotations are on top of other axes
+      axes (hax);
     endif
 
     ## Build annotation
     htmp = buildannot (hax, objtype, lims);
 
     ## Set user defined properties
     if (!isempty (opts))
       set (htmp, opts{:});
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -37,66 +37,73 @@
 ## @seealso {gca, set, get}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = axes (varargin)
 
   if (nargin == 0 || nargin > 1)
-    ## Create an axes object.
+    ## Parent figure
     idx = find (strcmpi (varargin(1:2:end), "parent"), 1, "first");
     if (! isempty (idx) && length (varargin) >= 2*idx)
       cf = varargin{2*idx};
       varargin([2*idx-1, 2*idx]) = [];
     else
       cf = gcf ();
     endif
+
+    ## If there is an annotation axes currently on top of the figure
+    ## children stack, we will put it back on top
+    do_restack = false;
+    ch = allchild (cf);
+    hax = ch(isaxes (ch));
+    idx = find (strcmp (get (hax, "tag"), "scribeoverlay"));
+    if (idx == 1)
+      hover = hax(idx);
+      do_restack = true;
+    endif
+    
+    ## Create an axes object.
     htmp = __go_axes__ (cf, varargin{:});
     if (__is_handle_visible__ (htmp))
       set (ancestor (cf, "figure"), "currentaxes", htmp);
     endif
+
+    ## Restack if necessary
+    if (do_restack)
+      restack_axes (hover, cf);
+    endif
   else
     ## ARG is axes handle.
     htmp = varargin{1};
     if (isscalar (htmp) && isaxes (htmp))
+      cf = ancestor (htmp, "figure");
       if (__is_handle_visible__ (htmp))
-        cf = ancestor (htmp, "figure");
         set (0, "currentfigure", cf);
         set (cf, "currentaxes", htmp);
+      endif
 
-        ## restack
-        ch = get (cf, "children")(:);
-        idx = (ch == htmp);
-        ch = [ch(idx); ch(!idx)];
-        set (cf, "children", ch);
-      endif
+      ## restack
+      restack_axes (htmp, cf);
     else
       error ("axes: H must be a scalar axes handle");
     endif
   endif
-  
-  ## FIXME: In order to have the overlay axes on top of all other axes
-  ##        we restack the figure children. Does Matlab use a similar
-  ##        hack?
-  show = get (0, "showhiddenhandles");
-  set (0, "showhiddenhandles", "on");
-  unwind_protect
-    ch = get (cf, "children");
-    idx = strcmp (get (ch, "tag"), "scribeoverlay");
-    hover = ch(idx);
-    if (! isempty (hover))
-      hax = ch(isaxes (ch));
-      if (numel (hax) > 1)
-        ch(isaxes (ch)) = [hover; hax(hax != hover)];
-        set (cf, "children", ch);
-      endif
-    endif
-  unwind_protect_cleanup
-    set (0, "showhiddenhandles", show);
-  end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
+function restack_axes (h, cf)
+  show = get (0, "showhiddenhandles");
+  set (0, "showhiddenhandles", "on");
+  unwind_protect
+    ch = get (cf, "children");
+    hax = ch(isaxes (ch));
+    ch(isaxes (ch)) = [h; hax(hax != h)];
+    set (cf, "children", ch);
+  unwind_protect_cleanup
+    set (0, "showhiddenhandles", show);
+  end_unwind_protect
+endfunction
