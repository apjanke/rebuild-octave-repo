# HG changeset patch
# User jwe
# Date 812950811 0
#      Fri Oct 06 03:40:11 1995 +0000
# Node ID 47bd45a30ddae72251d7469f74ca30be0b432b37
# Parent  749b8b19733fe62d039ba7d95815bc0cd726abcb
[project @ 1995-10-06 03:40:11 by jwe]

diff --git a/scripts/plot/mplot.m b/scripts/plot/mplot.m
--- a/scripts/plot/mplot.m
+++ b/scripts/plot/mplot.m
@@ -33,19 +33,19 @@ function mplot (...)
 # as this is just mulitplot version of the same command.
 
 
 # Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 
 # global variables to keep track of multiplot options
 
   global multiplot_mode
-  global multi_xsize multi_ysize
-  global multi_xn multi_yn
-  global multi_xi multi_yi
+  global multiplot_xsize multiplot_ysize
+  global multiplot_xn multiplot_yn
+  global multiplot_xi multiplot_yi
 
 # This is a real kludge.  We gnuplot should be made so that replot can
 # be executed while doing multiple plots...
 
   global multiplot_save_auto_replot = automatic_replot
 
   if ((isstr (automatic_replot) && strcmp (automatic_replot,"true"))
        || automatic_replot)
@@ -58,29 +58,29 @@ function mplot (...)
   set nopolar;
 
   plot_int ("plot", all_va_args);
 
 # update the plot position
 
   if (multiplot_mode)
 
-    if (multi_xi < multi_xn)
-      multi_xi++;
+    if (multiplot_xi < multiplot_xn)
+      multiplot_xi++;
     else
-      multi_xi = 1;
-      if (multi_yi < multi_xn)
-	multi_yi++;
+      multiplot_xi = 1;
+      if (multiplot_yi < multiplot_xn)
+	multiplot_yi++;
       else
-	multi_yi = 1;
+	multiplot_yi = 1;
       endif
     endif
 
-    xo = (multi_xi - 1.0)*multi_xsize;
-    yo = (multi_yn - multi_yi)*multi_ysize;
+    xo = (multiplot_xi - 1.0)*multiplot_xsize;
+    yo = (multiplot_yn - multiplot_yi)*multiplot_ysize;
 
     eval (sprintf ("set origin %g, %g", xo,yo));
 
   endif
 
 endfunction
 
 
diff --git a/scripts/plot/multiplot.m b/scripts/plot/multiplot.m
--- a/scripts/plot/multiplot.m
+++ b/scripts/plot/multiplot.m
@@ -30,19 +30,19 @@ function multiplot (xn, yn)
 # NOTE: this will work only with gnuplot installed with
 #       multiplot patch
 
 # Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
 # global variables to keep track of multiplot options
 
   global multiplot_mode
-  global multi_xsize multi_ysize
-  global multi_xn multi_yn
-  global multi_xi multi_yi
+  global multiplot_xsize multiplot_ysize
+  global multiplot_xn multiplot_yn
+  global multiplot_xi multiplot_yi
 
 # This is a real kludge.  We gnuplot should be made so that replot can
 # be executed while doing multiple plots...
 
   global multiplot_save_auto_replot = automatic_replot
 
   if (nargin != 2)
     usage ("multiplot (xn, yn)");
@@ -64,22 +64,22 @@ function multiplot (xn, yn)
 
   if (xn == 0 && yn == 0)
 
     set nomultiplot;
     set size 1,1
     set origin 0,0
 
     multiplot_mode = 0;
-    multi_xsize = 1;
-    multi_ysize = 1;
-    multi_xn = 1;
-    multi_yn = 1;
-    multi_xi = 1;
-    multi_yi = 1;
+    multiplot_xsize = 1;
+    multiplot_ysize = 1;
+    multiplot_xn = 1;
+    multiplot_yn = 1;
+    multiplot_xi = 1;
+    multiplot_yi = 1;
 
 # Someone may have reset it betweeen calls...
 
     if (! isstr (automatic_replot) && ! automatic_replot)
       automatic_replot = multiplot_save_auto_replot;
     endif
 
     return;
@@ -98,18 +98,18 @@ function multiplot (xn, yn)
     eval (sprintf ("set size %g, %g", xsize, ysize));
 
     xo = 0.0;
     yo = (yn - 1.0)*ysize;
 
     eval (sprintf ("set origin %g, %g", xo, yo));
 
     multiplot_mode = 1;
-    multi_xsize = xsize;
-    multi_ysize = ysize;
-    multi_xn = xn;
-    multi_yn = yn;
-    multi_xi = 1;
-    multi_yi = 1;
+    multiplot_xsize = xsize;
+    multiplot_ysize = ysize;
+    multiplot_xn = xn;
+    multiplot_yn = yn;
+    multiplot_xi = 1;
+    multiplot_yi = 1;
 
   endif
 
 endfunction
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -55,19 +55,19 @@ function subplot (rows, columns, index)
 #   -----------------------------------
 #
 
 # Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 
 # global variables to keep track of multiplot options
 
   global multiplot_mode 
-  global multi_xsize multi_ysize 
-  global multi_xn multi_yn
-  global multi_xi multi_yi
+  global multiplot_xsize multiplot_ysize 
+  global multiplot_xn multiplot_yn
+  global multiplot_xi multiplot_yi
 
 # This is a real kludge.  We gnuplot should be made so that replot can
 # be executed while doing multiple plots...
 
   global multiplot_save_auto_replot = automatic_replot
 
   if (nargin != 3 && nargin != 1)
     usage ("subplot (rows, columns, index) or subplot (rcn)");
@@ -77,24 +77,26 @@ function subplot (rows, columns, index)
        || automatic_replot)
     warning ("turning off automatic replot for multiplot mode");
     multiplot_save_auto_replot = automatic_replot;
     automatic_replot = 0;
   endif
 
   if (nargin == 1)
 
-    if (! is_scalar (rows))
-      error ("subplot: input rcn has to be a scalar");
+    if (! (is_scalar (rows) && rows >= 0))
+      error ("subplot: input rcn has to be a positive scalar");
     endif
 
-    xnp = rows;
-    rows = round (xnp/100);
-    columns = round ((xnp - 100*rows)/10);
-    index = xnp - 10*columns - 100*rows;
+    tmp = rows;
+    index = rem (tmp, 10);
+    tmp = (tmp - index) / 10;
+    columns = rem (tmp, 10);
+    tmp = (tmp - columns) / 10;
+    rows = rem (tmp, 10);
 
   elseif (! (is_scalar (columns) && is_scalar (rows) && is_scalar (index)))
     error ("subplot: columns, rows, and index have to be scalars");
   endif
 
   columns = round (columns);
   rows = round (rows);
   index = round (index);
@@ -110,61 +112,62 @@ function subplot (rows, columns, index)
   if (columns*rows == 1)
 
 # switching to single plot ?
 
     set nomultiplot;
     set size 1,1
     set origin 0,0
 
-    multi_xn = 1;
-    multi_yn = 1;
+    multiplot_xn = 1;
+    multiplot_yn = 1;
     multiplot_mode = 0;
 
 # Someone may have reset it betweeen calls...
 
     if (! isstr (automatic_replot) && ! automatic_replot)
       automatic_replot = multiplot_save_auto_replot;
     endif
 
-    return;
-
-  endif
+  else
 
 # doing multiplot plots
 
-  doagain = 0;
+    doagain = 0;
 
-  if (exist ("multiplot_mode") != 1)
-    doagain = 1;
-  elseif (multiplot_mode != 1 || multi_xn != columns || multi_yn != rows)
-    doagain = 1;
-  endif
+    if (exist ("multiplot_mode") != 1)
+      doagain = 1;
+    elseif (multiplot_mode != 1 || multiplot_xn != columns
+	    || multiplot_yn != rows)
+      doagain = 1;
+    endif
 
-  if (doagain)
+    if (doagain)
+
+      multiplot_mode = 1;
+      multiplot_xn = columns;
+      multiplot_yn = rows;
+      multiplot_xsize = 1.0 ./ columns;
+      multiplot_ysize = 1.0 ./ rows;
 
-    multiplot_mode = 1;
-    multi_xn = columns;
-    multi_yn = rows;
-    multi_xsize = 1.0 ./ columns;
-    multi_ysize = 1.0 ./ rows;
+      set multiplot;
+
+      eval (sprintf ("set size %g, %g", multiplot_xsize, multiplot_ysize));
+
+    endif
+
+# get the sub plot location
 
-    set multiplot;
+    yp = fix ((index-1)/columns);
+    xp = index - yp*columns - 1;
+    multiplot_xi = ++xp;
+    multiplot_yi = ++yp;
 
-    eval (sprintf ("set size %g, %g", multi_xsize, multi_ysize));
+# set the origin
+
+    xo = (xp - 1.0)*multiplot_xsize;
+    yo = (rows - yp)*multiplot_ysize;
+
+    eval (sprintf ("set origin %g, %g", xo, yo));
 
   endif
 
-# get the sub plot location
-
-  yp = round ((index-1)/columns);
-  xp = index - yp*columns - 1;
-  multi_xi = ++xp;
-  multi_yi = ++yp;
-
-# set the origin
-
-  xo = (xp - 1.0)*multi_xsize;
-  yo = (rows - yp)*multi_ysize;
-
-  eval (sprintf ("set origin %g, %g", xo, yo));
-
 endfunction
diff --git a/scripts/plot/subwindow.m b/scripts/plot/subwindow.m
--- a/scripts/plot/subwindow.m
+++ b/scripts/plot/subwindow.m
@@ -28,18 +28,18 @@ function subwindow (xn, yn)
 # multiplot mode has to be previously initialized using multiplot()
 # command, else this command just becomes an aliad to multiplot()
 
 # Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
 # global variables to keep track of multiplot options
 
   global multiplot_mode 
-  global multi_xsize multi_ysize 
-  global multi_xn multi_yn
+  global multiplot_xsize multiplot_ysize 
+  global multiplot_xn multiplot_yn
 
 # check calling argument count
 
   if (nargin != 2)
     usage ("subwindow (xn, yn)");
   endif
 
 # check for scalar inputs
@@ -56,18 +56,18 @@ function subwindow (xn, yn)
 
   if (multiplot_mode != 1)
     multiplot (xn, yn)
     return;
   endif
 
 # get the sub plot location
 
-  if (xn < 1 || xn > multi_xn || yn < 1 || yn > multi_yn)
+  if (xn < 1 || xn > multiplot_xn || yn < 1 || yn > multiplot_yn)
     error ("subwindow: incorrect xn and yn");
   endif
 
-  xo = (xn - 1.0)*multi_xsize;
-  yo = (multi_yn - yn)*multi_ysize;
+  xo = (xn - 1.0)*multiplot_xsize;
+  yo = (multiplot_yn - yn)*multiplot_ysize;
 
   eval (sprintf ("set origin %g, %g", xo, yo));
 
 endfunction
