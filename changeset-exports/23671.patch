# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1498067002 25200
#      Wed Jun 21 10:43:22 2017 -0700
# Node ID d197f62cde8a50667d6b7c27367697db86d2a81b
# Parent  fcf7c4362eb12399879f92f4adb7b39b68cbf54c
restore Java method calls by delegating indexing properly (bug #51152)

* pt-eval.cc (tree_evaluator::visit_index_expression): Delegate indexing
operations to Java objects also.
* ov-java.cc: Add %!tests for typical Java method call usage via Octave
indexing operations.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -3244,9 +3244,26 @@ Return true if @var{x} is a Java object.
 %! assert (class (javaMethod ("valueOf", "java.math.BigDecimal", double (1))), "java.math.BigDecimal")
 %! assert (class (javaMethod ("valueOf", "java.math.BigInteger",  int64 (1))), "java.math.BigInteger")
 
 ## Automatic conversion from string cell array into String[]
 %!testif HAVE_JAVA; usejava ("jvm") <*45290>
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0);
+
+## Test that Octave index syntax allows Java object method calls with args
+%!testif HAVE_JAVA; usejava ("jvm") <*51152>
+%! s = javaObject ("java.lang.String", "Octave");
+%! assert (s.length (), 6)
+%! assert (s.charAt (0), "O")
+%! assert (s.charAt (5), "e")
+%! assert (s.matches ("^Octave$"))
+%! assert (s.startsWith ("Oct"))
+%! ## same tests with Java object as part of another indexing expression
+%! a(1).s = s;
+%! assert (! a(1).s.isEmpty ())
+%! assert (a(1).s.length (), 6)
+%! assert (a(1).s.charAt (0), "O")
+%! assert (a(1).s.charAt (5), "e")
+%! assert (a(1).s.matches ("^Octave$"))
+%! assert (a(1).s.startsWith ("Oct"))
 */
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1278,17 +1278,17 @@ namespace octave
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
-    bool indexing_object = base_expr_val.isobject ();
+    bool indexing_object = base_expr_val.isobject () || base_expr_val.isjava ();
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
     for (int i = beg; i < n; i++)
       {
         if (i > beg)
@@ -1316,17 +1316,17 @@ namespace octave
                         if (partial_expr_val.is_cs_list ())
                           err_indexed_cs_list ();
 
                         retval = partial_expr_val;
 
                         beg = i;
                         idx.clear ();
 
-                        if (partial_expr_val.isobject ())
+                        if (partial_expr_val.isobject () || partial_expr_val.isjava ())
                           {
                             // Found an object, so now we'll build up
                             // complete index list for one big subsref
                             // call from this point on.
 
                             indexing_object = true;
                           }
                       }
