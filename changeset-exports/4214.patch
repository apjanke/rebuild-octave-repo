# HG changeset patch
# User jwe
# Date 1038977821 0
#      Wed Dec 04 04:57:01 2002 +0000
# Node ID b9317f3973ec11f98f192a7ccb00ee4e6e4f2137
# Parent  f8f7fc582c62b6991a8adaa2464f7cce50cd7c66
[project @ 2002-12-04 04:57:01 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2002-12-03  Nix  <nix@esperi.demon.co.uk>
+
+	* configure.in: Use AC_CHECK_DECL in conjunction with
+        AC_DECL_SYS_SIGLIST to ensure signal.h is searched.
+
 2002-12-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Dont't set SONAME_FLAGS for alpha alpha*-dec-osf*
 	systems.
 
 2002-11-29  Paul Kienzle <pkienzle@users.sf.net>
 
 	* mkoctfile.in: Include "$incflags $def" in commands to generate
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.397 $)
+AC_REVISION($Revision: 1.398 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1118,17 +1118,19 @@ AC_TRY_LINK([#include <math.h>],
   [struct exception *x; x->type; x->name;],
   AC_MSG_RESULT(yes)
   AC_DEFINE(EXCEPTION_IN_MATH, 1, [Define if your math.h declares struct exception for matherr().]),
   AC_MSG_RESULT(no))
 
 ### Signal stuff.
 
 AC_TYPE_SIGNAL
-AC_DECL_SYS_SIGLIST
+AC_CHECK_DECL([sys_siglist],
+  [AC_DEFINE(SYS_SIGLIST_DECLARED, 1, [Define if your system has a declaration of sys_siglist.])],
+  [AC_CHECK_DECLS([sys_siglist])], [#include <signal.h>])
 AC_MSG_CHECKING([for sys_siglist variable])
 AC_TRY_LINK([#include <stdio.h>],
   [extern char *sys_siglist[]; printf ("%s\n", sys_siglist[1]);],
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SYS_SIGLIST, 1, [Define if your system has a sys_siglist variable.]),
   AC_MSG_RESULT(no))
 OCTAVE_SIGNAL_CHECK
 OCTAVE_REINSTALL_SIGHANDLERS
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,29 @@
 2002-12-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* utils.cc: Don't include SLStack.h.
+	* TEMPLATE-INST/SLStack-i.cc, TEMPLATE-INST/SLStack-ovl.cc,
+	TEMPLATE-INST/SLStack-pc.cc, TEMPLATE-INST/SLStack-str.cc,
+	TEMPLATE-INST/SLStack-sym.cc, TEMPLATE-INST/SLStack-tok.cc,
+	TEMPLATE-INST/SLStack-ue.cc, TEMPLATE-INST/SLStack-ui.cc:
+	Delete unnecessary files.
+	* Makefile.in (TI_XSRC): Delete them from the list.
+
+	* toplev.cc (octave_atexit_functions): Now std::stack, not SLStack.
+	* pt-plot.cc (tmp_files): Likewise. 
+	* lex.l (token_stack): Likewise.
+	(class bracket_brace_paren_nesting_level): Make context a data
+	member instead of deriving from SLStack object.
+	Use std::stack instead of SLStack.
+	* ov-usr-fcn.h (octave_user_function::saved_args): Likewise.
+	* symtab.h (symbol_record::context): Likewise.
+	(symbol_record::global_link_context): Likewise.
+
+	* unwind-prot.h (unwind_protect::elt_list): Rename from list.
+	Now std::stack, not SLStack.
 
 	* pt-stmt.h (tree_statement_list): Make list member data instead
 	of deriving from SLList object.
 	* pt-select.h (tree_switch_case_list): Likewise.
 	(tree_if_command_list): Likewise.
 	* pt-plot.h (subplot_list): Likewise.
 	* pt-mat.h (tree_matrix): Likewise.
 	* pt-decl.h (tree_decl_init_list): Likewise.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -87,19 +87,17 @@ INCLUDES := BaseSLList.h Cell.h DLList.h
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h \
 	oct-stream.h oct-strstrm.h oct-lvalue.h oct.h octave.h \
 	ops.h pager.h parse.h pr-output.h procstream.h sighandlers.h \
 	siglist.h symtab.h sysdep.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc Map-fnc.cc \
 	Map-oct-obj.cc Map-tc.cc SLList-expr.cc SLList-misc.cc \
-	SLList-plot.cc SLList-tc.cc SLList-tm.cc SLStack-i.cc \
-	SLStack-ovl.cc SLStack-pc.cc SLStack-str.cc SLStack-sym.cc \
-	SLStack-tok.cc SLStack-ue.cc SLStack-ui.cc
+	SLList-plot.cc SLList-tc.cc SLList-tm.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -27,26 +27,25 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
 
 #include <string>
+#include <stack>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
-#include "SLStack.h"
-
 #include "cmd-edit.h"
 #include "quit.h"
 #include "lo-sstream.h"
 
 // These would be alphabetical, but y.tab.h must be included before
 // oct-gperf.h and y.tab.h must be included after token.h and the tree
 // class declarations.  We can't include y.tab.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
@@ -82,51 +81,58 @@ lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
 // one of the macros defined there uses token_stack.
 //
 // XXX FIXME XXX -- this should really be static, but that causes
 // problems on some systems.
-SLStack <token*> token_stack;
+std::stack <token*> token_stack;
 
 // Did eat_whitespace() eat a space or tab, or a newline, or both?
 
 typedef int yum_yum;
 
 const yum_yum ATE_NOTHING = 0;
 const yum_yum ATE_SPACE_OR_TAB = 1;
 const yum_yum ATE_NEWLINE = 2;
 
 // Is the closest nesting level a square bracket, squiggly brace or a paren?
 
-class bracket_brace_paren_nesting_level : public SLStack <int>
+class bracket_brace_paren_nesting_level
 {
 public:
 
-  bracket_brace_paren_nesting_level (void) : SLStack<int> () { }
+  bracket_brace_paren_nesting_level (void) : context () { }
 
   ~bracket_brace_paren_nesting_level (void) { }
 
-  void bracket (void) { push (BRACKET); }
-  bool is_bracket (void) { return ! empty () && top () == BRACKET; }
-
-  void brace (void) { push (BRACE); }
-  bool is_brace (void) { return ! empty () && top () == BRACE; }
-
-  void paren (void) { push (PAREN); }
-  bool is_paren (void) { return ! empty () && top () == PAREN; }
-
-  bool none (void) { return empty (); }
-
-  void remove (void) { if (! empty ()) SLStack<int>::pop (); }
+  void bracket (void) { context.push (BRACKET); }
+  bool is_bracket (void)
+    { return ! context.empty () && context.top () == BRACKET; }
+
+  void brace (void) {  context.push (BRACE); }
+  bool is_brace (void)
+    { return ! context.empty () && context.top () == BRACE; }
+
+  void paren (void) {  context.push (PAREN); }
+  bool is_paren (void)
+    { return ! context.empty () && context.top () == PAREN; }
+
+  bool none (void) { return context.empty (); }
+
+  void remove (void) { if (! context.empty ()) context.pop (); }
+
+  void clear (void) { while (! context.empty ()) context.pop (); }
 
 private:
 
+  std::stack<int> context;
+
   enum { BRACKET = 1, BRACE = 2, PAREN = 3 };
 
   bracket_brace_paren_nesting_level (const bracket_brace_paren_nesting_level&);
 
   bracket_brace_paren_nesting_level&
   operator = (const bracket_brace_paren_nesting_level&);
 };
 
@@ -814,17 +820,20 @@ reset_parser (void)
   promptflag = 1;
 
   // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
-    delete token_stack.pop ();
+    {
+      delete token_stack.top ();
+      token_stack.pop ();
+    }
 
   // Can be reset by defining a function.
   if (! (reading_script_file || reading_fcn_file))
     {
       current_input_column = 1;
       input_line_number = command_editor::current_command_number () - 1;
     }
 
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -97,16 +97,21 @@ public:
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   ~octave_value_list (void) { }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
+  // XXX FIXME XXX -- without this, I have errors with the stack of
+  // octave_value_list objects in ov-usr-fcn.h.  Why?
+  void *operator new (size_t size, void *p)
+    { return ::operator new (size, p); }
+
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value_list& operator = (const octave_value_list& obj)
     {
       if (this != &obj)
 	{
 	  data = obj.data;
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -25,24 +25,23 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <ctime>
 
 #include <string>
+#include <stack>
 
 #include "comment-list.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
-#include "SLStack.h"
-
 class string_vector;
 
 class octave_value;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 class tree_walker;
 class symbol_table;
@@ -129,17 +128,20 @@ public:
       args_passed = args;
     }
 
   void restore_args_passed (void)
     {
       if (saved_args.empty ())
 	args_passed = octave_value_list ();
       else
-	args_passed = saved_args.pop ();
+	{
+	  args_passed = saved_args.top ();
+	  saved_args.pop ();
+	}
     }
 
   octave_value_list subsref (const std::string type,
 			     const SLList<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
@@ -208,17 +210,17 @@ private:
 
   // The number of arguments that have names.
   int num_named_args;
 
   // The values that were passed as arguments.
   octave_value_list args_passed;
 
   // A place to store the passed args for recursive calls.
-  SLStack<octave_value_list> saved_args;
+  std::stack<octave_value_list> saved_args;
 
   // The number of arguments passed in.
   int num_args_passed;
 
   // Used to keep track of the current offset into the list of va_args.
   int curr_va_arg_number;
 
   // The list of return values when an unspecified number can be
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -22,18 +22,16 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_parse_h)
 #define octave_parse_h 1
 
 #include <cstdio>
 
 #include <string>
 
-#include "SLStack.h"
-
 extern void reset_parser (void);
 extern int yylex (void);
 extern int yyparse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class symbol_record;
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -28,25 +28,25 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cstring>
 
 #include <fstream>
 #include <iostream>
 #include <string>
+#include <stack>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
-#include "SLStack.h"
 #include "procstream.h"
 
 #include "file-ops.h"
 #include "lo-mappers.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
@@ -86,17 +86,17 @@ static std::string gnuplot_terminal_type
 
 // Should the graph window be cleared before plotting the next line?
 static bool clear_before_plotting = true;
 
 // List of files to delete when we exit or crash.
 //
 // XXX FIXME XXX -- this should really be static, but that causes
 // problems on some systems.
-SLStack <std::string> tmp_files;
+std::stack <std::string> tmp_files;
 
 // Pipe to gnuplot.
 static oprocstream *plot_stream = 0;
 
 // ID of the plotter process.
 static pid_t plot_stream_pid = 0;
 
 // Gnuplot command strings that we use.
@@ -895,17 +895,18 @@ mark_for_deletion (const std::string& fi
   tmp_files.push (file);
 }
 
 void
 cleanup_tmp_files (void)
 {
   while (! tmp_files.empty ())
     {
-      std::string filename = tmp_files.pop ();
+      std::string filename = tmp_files.top ();
+      tmp_files.pop ();
       unlink (filename.c_str ());
     }
 }
 
 void
 close_plot_stream (void)
 {
   octave_child_list::remove (plot_stream_pid);
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -389,19 +389,21 @@ symbol_record::pop_context (void)
   // inserted in the symbol table during recursive calls.  This can
   // happen as a result of calls to eval() and feval().
 
   if (! context.empty ())
     {
       if (--definition->count <= 0)
 	delete definition;
 
-      definition = context.pop ();
+      definition = context.top ();
+      context.pop ();
 
-      linked_to_global = global_link_context.pop ();
+      linked_to_global = global_link_context.top ();
+      global_link_context.pop ();
     }
 }
 
 void
 symbol_record::print_symbol_info_line (std::ostream& os) const
 {
   os << (is_read_only () ? " r-" : " rw")
      << (is_eternal () ? "-" : "d")
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -25,18 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <cassert>
 
 #include <string>
-
-#include "SLStack.h"
+#include <stack>
 
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov.h"
 
 class octave_lvalue;
 
@@ -360,18 +359,18 @@ private:
 
   std::string nm;
   change_function chg_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
   // This should maybe be one stack with a structure containing all the
   // items we need to save for recursive calls...
-  SLStack <symbol_def *> context;
-  SLStack <unsigned int> global_link_context;
+  std::stack <symbol_def *> context;
+  std::stack <unsigned int> global_link_context;
 
   bool read_only_error (const char *action);
 
   void link_to_builtin_variable (void);
 
   // No copying!
 
   symbol_record (const symbol_record& s);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -569,26 +569,28 @@ variable @code{status} to the integer @s
 
   return retval;
 }
 
 DEFALIAS (shell_cmd, system);
 
 // XXX FIXME XXX -- this should really be static, but that causes
 // problems on some systems.
-SLStack<std::string> octave_atexit_functions;
+std::stack<std::string> octave_atexit_functions;
 
 void
 do_octave_atexit (void)
 {
   static bool deja_vu = false;
 
   while (! octave_atexit_functions.empty ())
     {
-      octave_value_list fcn = octave_atexit_functions.pop ();
+      octave_value_list fcn = octave_atexit_functions.top ();
+
+      octave_atexit_functions.pop ();
 
       feval (fcn, 0);
 
       flush_octave_stdout ();
     }
 
   if (! deja_vu)
     {
diff --git a/src/unwind-prot.cc b/src/unwind-prot.cc
--- a/src/unwind-prot.cc
+++ b/src/unwind-prot.cc
@@ -25,27 +25,23 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstddef>
 
-#include <string>
-
-#include "SLStack.h"
-
 #include "CMatrix.h"
 
 #include "error.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
-SLStack<unwind_elem> unwind_protect::list;
+std::stack<unwind_elem> unwind_protect::elt_list;
 
 class
 saved_variable
 {
 public:
 
   enum var_type
   {
@@ -191,90 +187,99 @@ saved_variable::restore (void *s)
   sv->restore_value ();
   delete sv;
 }
 
 void
 unwind_protect::add (unwind_elem::cleanup_func fptr, void *ptr)
 {
   unwind_elem el (fptr, ptr);
-  list.push (el);
+  elt_list.push (el);
 }
 
 void
 unwind_protect::run (void)
 {
-  unwind_elem el = list.pop ();
+  unwind_elem el = elt_list.top ();
+
+  elt_list.pop ();
 
   unwind_elem::cleanup_func f = el.fptr ();
 
   if (f)
     f (el.ptr ());
 }
 
 void
 unwind_protect::discard (void)
 {
-  list.pop ();
+  elt_list.pop ();
 }
 
 void
 unwind_protect::begin_frame (const std::string& tag)
 {
   unwind_elem elem (tag);
-  list.push (elem);
+  elt_list.push (elem);
 }
 
 void
 unwind_protect::run_frame (const std::string& tag)
 {
-  while (! list.empty ())
+  while (! elt_list.empty ())
     {
-      unwind_elem el = list.pop ();
+      unwind_elem el = elt_list.top ();
+
+      elt_list.pop ();
 
       unwind_elem::cleanup_func f = el.fptr ();
 
       if (f)
 	f (el.ptr ());
 
       if (tag == el.tag ())
 	break;
     }
 }
 
 void
 unwind_protect::discard_frame (const std::string& tag)
 {
-  while (! list.empty ())
+  while (! elt_list.empty ())
     {
-      unwind_elem el = list.pop ();
+      unwind_elem el = elt_list.top ();
+
+      elt_list.pop ();
 
       if (tag == el.tag ())
 	break;
     }
 }
 
 void
 unwind_protect::run_all (void)
 {
-  while (! list.empty ())
+  while (! elt_list.empty ())
     {
-      unwind_elem el = list.pop ();
+      unwind_elem el = elt_list.top ();
+
+      elt_list.pop ();
 
       unwind_elem::cleanup_func f = el.fptr ();
 
       if (f)
 	f (el.ptr ());
     }
 }
 
 void
 unwind_protect::discard_all (void)
 {
-  list.clear ();
+  while (! elt_list.empty ())
+    elt_list.pop ();
 }
 
 void
 unwind_protect::save_bool (bool *ptr, bool value)
 {
   saved_variable *s = new saved_variable (ptr, value);
   add (saved_variable::restore, s);
 }
diff --git a/src/unwind-prot.h b/src/unwind-prot.h
--- a/src/unwind-prot.h
+++ b/src/unwind-prot.h
@@ -25,18 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <cstddef>
 
 #include <string>
-
-#include <SLStack.h>
+#include <stack>
 
 class
 unwind_elem
 {
 public:
 
   typedef void (*cleanup_func) (void *ptr);
 
@@ -106,17 +105,17 @@ public:
   static void save_int (int *ptr, int value);
 
   static void save_str (std::string *ptr, const std::string& value);
 
   static void save_ptr (void **ptr, void *value);
 
   static void save_var (void *ptr, void *value, size_t size);
 
-  static SLStack<unwind_elem> list;
+  static std::stack<unwind_elem> elt_list;
 };
 
 // We could get by without these macros, but they are nice to have...
 
 #define unwind_protect_bool(b) \
   unwind_protect::save_bool (&(b), (b))
 
 #define unwind_protect_int(i) \
