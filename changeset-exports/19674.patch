# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1423355924 18000
#      Sat Feb 07 19:38:44 2015 -0500
# Node ID b3363c531662b669569e798dcbec95cdd1da3bf9
# Parent  cdf9c83b0e791c77ea2974b2bdd39e1a6b15d535
Stop audioplayer and audiorecorder when done or interrupted

* audiodevinfo.cc (audioplayer::playblocking, audiorecorder::recordblocking):
Use unwind_protect to stop stream.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "oct-locbuf.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int32.h"
 #include "ov-struct.h"
 #include "parse.h"
+#include "unwind-prot.h"
 
 #if defined (HAVE_PORTAUDIO)
 
 #include <portaudio.h>
 
 PaSampleFormat
 bits_to_format (int bits)
 {
@@ -841,16 +842,22 @@ portaudio_play_callback (const void *, v
 
           player->set_sample_number (sample_number + 1);
         }
     }
 
   return paContinue;
 }
 
+static void
+safe_audioplayer_stop (audioplayer *player)
+{
+  player->stop ();
+}
+
 audioplayer::audioplayer (void)
   : octave_callback_function (0),
     id (-1), fs (0), nbits (16), channels (0), sample_number (0),
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (0), output_parameters (), type ()
 { }
 
 audioplayer::~audioplayer (void)
@@ -1146,44 +1153,30 @@ audioplayer::playblocking (void)
       error ("audioplayer: unable to start start audio playback stream");
       return;
     }
 
   unsigned int start, end;
   start = get_sample_number ();
   end = get_end_sample ();
 
+  unwind_protect frame;
+
+  frame.add_fcn (safe_audioplayer_stop, this);
+
   for (unsigned int i = start; i < end; i += buffer_size)
     {
       OCTAVE_QUIT;
       if (octave_callback_function != 0)
         octave_play_callback (0, buffer, buffer_size, 0, 0, this);
       else
         portaudio_play_callback (0, buffer, buffer_size, 0, 0, this);
 
       err = Pa_WriteStream (stream, buffer, buffer_size);
     }
-
-  err = Pa_StopStream (stream);
-  if (err != paNoError)
-    {
-      error ("audioplayer: failed to stop audio playback stream");
-      return;
-    }
-
-  err = Pa_CloseStream (stream);
-  if (err != paNoError)
-    {
-      error ("audioplayer: failed to close audio playback stream");
-      return;
-    }
-
-  stream = 0;
-  set_sample_number (0);
-  reset_end_sample ();
 }
 
 void
 audioplayer::play (void)
 {
   if (get_stream ())
     stop ();
 
@@ -1529,16 +1522,22 @@ portaudio_record_callback (const void *i
     }
 
   if (recorder->get_sample_number () >= recorder->get_end_sample ())
     return paComplete;
 
   return paContinue;
 }
 
+static void
+safe_audiorecorder_stop (audiorecorder *recorder)
+{
+  recorder->stop ();
+}
+
 audiorecorder::audiorecorder (void)
   : octave_callback_function (0),
     id (-1), fs (44100), nbits (16), channels (2), sample_number (0),
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (0), input_parameters (), type ()
 { }
 
 audiorecorder::~audiorecorder (void)
@@ -1821,16 +1820,20 @@ audiorecorder::recordblocking (float sec
   if (err != paNoError)
     {
       error ("audiorecorder: unable to start audio recording stream");
       return;
     }
 
   unsigned int frames = seconds * get_fs ();
 
+  unwind_protect frame;
+
+  frame.add_fcn (safe_audiorecorder_stop, this);
+
   for (unsigned int i = 0; i < frames; i += buffer_size)
     {
       OCTAVE_QUIT;
       Pa_ReadStream (get_stream (), buffer, buffer_size);
 
       if (octave_callback_function != 0)
         octave_record_callback (buffer, 0, buffer_size, 0, 0, this);
       else
