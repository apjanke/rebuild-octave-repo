# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552670772 0
#      Fri Mar 15 17:26:12 2019 +0000
# Node ID ab9520ef389558ee1e2513efae8e17f58196cda0
# Parent  c81b471cdb28075fc73eb3eca5bf92e4f7880f19
ensure classdef dtor doesn't wipe out expression value (bug #53844, bug #55758)

* pt-eval.cc (tree_evaluator::visit_index_expression): Delete any
temporary values from intermediate expression evaluations prior to
pushing final result value(s).

* test/bug-55758/bug-55758.tst, test/bug-55758/class_bug_55758.m,
test/bug-55758/module.mk: New files.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2252,16 +2252,22 @@ namespace octave
                       error ("indexing undefined value");
                     else
                       base_expr_val = retval(0);
                   }
                 else
                   {
                     // No more indices, so we are done.
 
+                    // See note at end of function about deleting
+                    // temporaries prior to pushing result.
+
+                    base_expr_val = octave_value ();
+                    first_args = octave_value_list ();
+
                     push_result (retval);
                     return;
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
@@ -2439,16 +2445,29 @@ namespace octave
 
                 final_args = idx.front ();
               }
 
             retval = fcn->call (*this, nargout, final_args);
           }
       }
 
+    // Delete any temporary values prior to pushing the result and
+    // returning so that destructors for any temporary classdef handle
+    // objects will be called before we return.  Otherwise, the
+    // destructor may push result values that will wipe out the result
+    // that we push below.  Although the method name is "push_result"
+    // there is only a single register (either an octave_value or an
+    // octave_value_list) not a stack.
+
+    idx.clear ();
+    partial_expr_val = octave_value ();
+    base_expr_val = octave_value ();
+    val = octave_value ();
+
     push_result (retval);
   }
 
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
     tm_const tmp (expr, *this);
 
diff --git a/test/bug-55758/bug-55758.tst b/test/bug-55758/bug-55758.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-55758/bug-55758.tst
@@ -0,0 +1,16 @@
+%!test
+%! global class_bug_55758_dtor_called
+%! class_bug_55758_dtor_called = false;
+%!
+%! assert (class_bug_55758 (5).value, 5);
+%! assert (class_bug_55758_dtor_called);
+%!
+%! assert (class_bug_55758 (5)(1), 5);
+%! assert (class_bug_55758_dtor_called);
+%!
+%! assert (size (class_bug_55758 (5)), [1, 1]);
+%! assert (class_bug_55758_dtor_called);
+%!
+%! assert (numel (class_bug_55758 (5)), 1);
+%! assert (class_bug_55758_dtor_called);
+%! clear -global class_bug_55758_dtor_called;  # cleanup after test
diff --git a/test/bug-55758/class_bug_55758.m b/test/bug-55758/class_bug_55758.m
new file mode 100644
--- /dev/null
+++ b/test/bug-55758/class_bug_55758.m
@@ -0,0 +1,23 @@
+classdef class_bug_55758 < handle
+  properties
+    value
+  endproperties
+
+  methods
+    function self = class_bug_55758 (val)
+      if (nargin < 1)
+        val = 0;
+      endif
+      self.value = val;
+    endfunction
+
+    function delete (self)
+      global class_bug_55758_dtor_called;
+      class_bug_55758_dtor_called = true;
+    endfunction
+
+    function ret = subsref (self, idx)
+      ret = self.value;
+    endfunction
+  endmethods
+endclassdef
diff --git a/test/bug-55758/module.mk b/test/bug-55758/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-55758/module.mk
@@ -0,0 +1,5 @@
+bug_55758_TEST_FILES = \
+  %reldir%/bug-55758.tst \
+  %reldir%/class_bug_55758.m
+
+TEST_FILES += $(bug_55758_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -73,16 +73,17 @@ include %reldir%/bug-51192/module.mk
 include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51534/module.mk
 include %reldir%/bug-51599/module.mk
 include %reldir%/bug-52075/module.mk
 include %reldir%/bug-52722/module.mk
 include %reldir%/bug-53027/module.mk
 include %reldir%/bug-53468/module.mk
 include %reldir%/bug-54995/module.mk
+include %reldir%/bug-55758/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/local-functions/module.mk
 include %reldir%/mex/module.mk
