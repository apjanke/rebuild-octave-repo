# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1529522165 14400
#      Wed Jun 20 15:16:05 2018 -0400
# Branch stable
# Node ID fbc270aeb55df8d6236c9fa5f38e03656357bf93
# Parent  0d7a89bec20e598863f52f8c972937cdba086c59
* interpreter.cc (intialize_xerbla_error_handler, xerbla_abort): New functions.
(interpreter::interpreter): Call intialize_xerbla_error_handler.

* configure.ac (AMCOND_BUILD_EXTERNAL_LIBXERBLA): New conditional.

* libinterp/module.mk (%canon_reldir%_liboctinterp_la_LIBADD):
Add libxerbla.la as an additional dependency if building libxerbla as
an external library.

* liboctave/external/blas-xtra/module.mk: Update.  Allow building a
separate library for xerbla.

* xerbla.c: Rename from xerbla.f and implement in C.  Allow programs
to define a handler function to call.

* f77-fcn.c (xstopx): Modernize.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1105,16 +1105,26 @@ AC_DEFINE_UNQUOTED(OCTAVE_SIZEOF_F77_INT
   [Define to the size of the octave_f77_int_type (8 or 4).])
 
 OCTAVE_F77_FLAG([-ffloat-store], [
   AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
   F77_FLOAT_STORE_FLAG=-ffloat-store
   AC_SUBST(F77_FLOAT_STORE_FLAG)
 ])
 
+BUILD_EXTERNAL_LIBXERBLA=
+case $host_os in
+  msdosmsvc | mingw*)
+    BUILD_EXTERNAL_LIBXERBLA=ues
+  ;;
+esac
+
+AM_CONDITIONAL([AMCOND_BUILD_EXTERNAL_LIBXERBLA],
+  [test -n "$BUILD_EXTERNAL_LIBXERBLA"])
+
 ### Dynamic linking is now enabled only if we are building shared
 ### libs and some API for dynamic linking has been detected.
 
 dnl FIXME: A lot of the following duplicates the functionality of
 dnl code generated by the dlopen option for LT_INIT.
 
 LD_CXX="${CXX}"
 RDYNAMIC_FLAG=
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -122,60 +122,16 @@ Undocumented internal function.
           vinfo.assign (idx, "Release", Cell (octave_value (args(2))));
           vinfo.assign (idx, "Date", Cell (octave_value (args(3))));
         }
     }
 
   return retval;
 }
 
-static void
-initialize_version_info (void)
-{
-  octave_value_list args;
-
-  args(3) = OCTAVE_RELEASE_DATE;
-  args(2) = octave::config::release ();
-  args(1) = OCTAVE_VERSION;
-  args(0) = "GNU Octave";
-
-  F__version_info__ (args, 0);
-}
-
-OCTAVE_NORETURN static void
-lo_error_handler (const char *fmt, ...)
-{
-  va_list args;
-  va_start (args, fmt);
-  verror_with_cfn (fmt, args);
-  va_end (args);
-
-  octave_throw_execution_exception ();
-}
-
-OCTAVE_NORETURN static void
-lo_error_with_id_handler (const char *id, const char *fmt, ...)
-{
-  va_list args;
-  va_start (args, fmt);
-  verror_with_id_cfn (id, fmt, args);
-  va_end (args);
-
-  octave_throw_execution_exception ();
-}
-
-static void
-initialize_error_handlers ()
-{
-  set_liboctave_error_handler (lo_error_handler);
-  set_liboctave_error_with_id_handler (lo_error_with_id_handler);
-  set_liboctave_warning_handler (warning);
-  set_liboctave_warning_with_id_handler (warning_with_id);
-}
-
 DEFUN (quit, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} exit
 @deftypefnx {} {} exit (@var{status})
 @deftypefnx {} {} quit
 @deftypefnx {} {} quit (@var{status})
 Exit the current Octave session.
 
@@ -276,75 +232,150 @@ from the list, so if a function was plac
 
       if (nargout > 0)
         retval = ovl (found);
     }
 
   return retval;
 }
 
-// Execute commands from a file and catch potential exceptions in a consistent
-// way.  This function should be called anywhere we might parse and execute
-// commands from a file before we have entered the main loop in
-// toplev.cc.
-
-static int
-safe_source_file (const std::string& file_name,
-                  const std::string& context = "",
-                  bool verbose = false, bool require_file = true,
-                  const std::string& warn_for = "")
-{
-  try
-    {
-      octave::source_file (file_name, context, verbose, require_file, warn_for);
-    }
-  catch (const octave::interrupt_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-
-      return 1;
-    }
-  catch (const octave::execution_exception& e)
-    {
-      std::string stack_trace = e.info ();
-
-      if (! stack_trace.empty ())
-        std::cerr << stack_trace;
-
-      octave::interpreter::recover_from_exception ();
-
-      return 1;
-    }
-
-  return 0;
-}
-
-static void
-execute_pkg_add (const std::string& dir)
-{
-  std::string file_name = octave::sys::file_ops::concat (dir, "PKG_ADD");
-
-  octave::load_path& lp = octave::__get_load_path__ ("execute_pkg_add");
-
-  try
-    {
-      lp.execute_pkg_add (dir);
-    }
-  catch (const octave::interrupt_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-    }
-  catch (const octave::execution_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-    }
-}
-
 namespace octave
 {
+  // Execute commands from a file and catch potential exceptions in a consistent
+  // way.  This function should be called anywhere we might parse and execute
+  // commands from a file before we have entered the main loop in
+  // toplev.cc.
+
+  static int safe_source_file (const std::string& file_name,
+                               const std::string& context = "",
+                               bool verbose = false,
+                               bool require_file = true,
+                               const std::string& warn_for = "")
+  {
+    try
+      {
+        source_file (file_name, context, verbose, require_file, warn_for);
+      }
+    catch (const interrupt_exception&)
+      {
+        interpreter::recover_from_exception ();
+
+        return 1;
+      }
+    catch (const execution_exception& e)
+      {
+        std::string stack_trace = e.info ();
+
+        if (! stack_trace.empty ())
+          std::cerr << stack_trace;
+
+        interpreter::recover_from_exception ();
+
+        return 1;
+      }
+
+    return 0;
+  }
+
+  static void execute_pkg_add (const std::string& dir)
+  {
+    std::string file_name = sys::file_ops::concat (dir, "PKG_ADD");
+
+    load_path& lp = __get_load_path__ ("execute_pkg_add");
+
+    try
+      {
+        lp.execute_pkg_add (dir);
+      }
+    catch (const interrupt_exception&)
+      {
+        interpreter::recover_from_exception ();
+      }
+    catch (const execution_exception&)
+      {
+        interpreter::recover_from_exception ();
+      }
+  }
+
+  static void initialize_version_info (void)
+  {
+    octave_value_list args;
+
+    args(3) = OCTAVE_RELEASE_DATE;
+    args(2) = config::release ();
+    args(1) = OCTAVE_VERSION;
+    args(0) = "GNU Octave";
+
+    F__version_info__ (args, 0);
+  }
+
+  static void xerbla_abort (void)
+  {
+    error ("Fortran procedure terminated by call to XERBLA");
+  }
+
+  static void initialize_xerbla_error_handler (void)
+  {
+    // The idea here is to force xerbla to be referenced so that we will
+    // link to our own version instead of the one provided by the BLAS
+    // library.  But numeric_limits<double>::NaN () should never be -1, so
+    // we should never actually call xerbla.  FIXME (again!): If this
+    // becomes a constant expression the test might be optimized away and
+    // then the reference to the function might also disappear.
+
+    if (numeric_limits<double>::NaN () == -1)
+      F77_FUNC (xerbla, XERBLA) ("octave", 13 F77_CHAR_ARG_LEN (6));
+
+    typedef void (*xerbla_handler_ptr) (void);
+
+    typedef void (*octave_set_xerbla_handler_ptr) (xerbla_handler_ptr);
+
+    dynamic_library libs ("");
+
+    if (libs)
+      {
+        octave_set_xerbla_handler_ptr octave_set_xerbla_handler
+          = reinterpret_cast<octave_set_xerbla_handler_ptr>
+          (libs.search ("octave_set_xerbla_handler"));
+
+        if (octave_set_xerbla_handler)
+          octave_set_xerbla_handler (xerbla_abort);
+      }
+  }
+
+  OCTAVE_NORETURN static void
+  lo_error_handler (const char *fmt, ...)
+  {
+    va_list args;
+    va_start (args, fmt);
+    verror_with_cfn (fmt, args);
+    va_end (args);
+
+    octave_throw_execution_exception ();
+  }
+
+  OCTAVE_NORETURN static void
+  lo_error_with_id_handler (const char *id, const char *fmt, ...)
+  {
+    va_list args;
+    va_start (args, fmt);
+    verror_with_id_cfn (id, fmt, args);
+    va_end (args);
+
+    octave_throw_execution_exception ();
+  }
+
+  static void initialize_error_handlers (void)
+  {
+    set_liboctave_error_handler (lo_error_handler);
+    set_liboctave_error_with_id_handler (lo_error_with_id_handler);
+    set_liboctave_warning_handler (warning);
+    set_liboctave_warning_with_id_handler (warning_with_id);
+  }
+
   // Create an interpreter object and perform initialization up to the
   // point of setting reading command history and setting the load
   // path.
 
   interpreter::interpreter (application *app_context)
     : m_app_context (app_context),
       m_environment (),
       m_help_system (*this),
@@ -396,25 +427,17 @@ namespace octave
     // that may reset them.
 
     initialize_default_warning_state ();
 
     octave_ieee_init ();
 
     octave_prepare_hdf5 ();
 
-    // The idea here is to force xerbla to be referenced so that we will link to
-    // our own version instead of the one provided by the BLAS library.  But
-    // numeric_limits<double>::NaN () should never be -1, so we
-    // should never actually call xerbla.  FIXME (again!):  If this
-    // becomes a constant expression the test might be optimized away and
-    // then the reference to the function might also disappear.
-
-    if (numeric_limits<double>::NaN () == -1)
-      F77_FUNC (xerbla, XERBLA) ("octave", 13 F77_CHAR_ARG_LEN (6));
+    initialize_xerbla_error_handler ();
 
     initialize_error_handlers ();
 
     if (m_app_context)
       install_signal_handlers ();
     else
       quit_allowed = false;
 
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -161,16 +161,21 @@ nodist_%canon_reldir%_liboctinterp_la_SO
 %canon_reldir%_liboctinterp_la_LIBADD = \
   %reldir%/octave-value/liboctave-value.la \
   %reldir%/parse-tree/libparse-tree.la \
   %reldir%/corefcn/libcorefcn.la \
   $(LIBINTERP_DLDFCN_LIBADD) \
   liboctave/liboctave.la \
   $(LIBOCTINTERP_LINK_DEPS)
 
+if AMCOND_BUILD_EXTERNAL_LIBXERBLA
+  %canon_reldir%_liboctinterp_la_LIBADD += \
+    liboctave/external/blas-xtra/libxerbla.la
+endif
+
 # Increment these as needed and according to the rules in the libtool manual:
 %canon_reldir%_liboctinterp_current = 5
 %canon_reldir%_liboctinterp_revision = 0
 %canon_reldir%_liboctinterp_age = 0
 
 %canon_reldir%_liboctinterp_version_info = $(%canon_reldir%_liboctinterp_current):$(%canon_reldir%_liboctinterp_revision):$(%canon_reldir%_liboctinterp_age)
 
 %canon_reldir%_liboctinterp_la_LDFLAGS = \
diff --git a/liboctave/external/blas-xtra/module.mk b/liboctave/external/blas-xtra/module.mk
--- a/liboctave/external/blas-xtra/module.mk
+++ b/liboctave/external/blas-xtra/module.mk
@@ -12,15 +12,36 @@ EXTERNAL_SOURCES += \
   %reldir%/xdznrm2.f \
   %reldir%/xzdotc.f \
   %reldir%/xzdotu.f \
   %reldir%/xsdot.f \
   %reldir%/xsnrm2.f \
   %reldir%/xscnrm2.f \
   %reldir%/xcdotc.f \
   %reldir%/xcdotu.f \
-  %reldir%/xerbla.f \
   %reldir%/cconv2.f \
   %reldir%/csconv2.f \
   %reldir%/dconv2.f \
   %reldir%/sconv2.f \
   %reldir%/zconv2.f \
   %reldir%/zdconv2.f
+
+XERBLA_SRC = \
+  %reldir%/xerbla.c
+
+%canon_reldir%_libxerbla_la_SOURCES = $(XERBLA_SRC)
+
+%canon_reldir%_libxerbla_la_CPPFLAGS = \
+  $(liboctave_liboctave_la_CPPFLAGS)
+
+if AMCOND_BUILD_EXTERNAL_LIBXERBLA
+  octlib_LTLIBRARIES += %reldir%/libxerbla.la
+
+  %canon_reldir%_libxerbla_la_LDFLAGS = \
+    -avoid-version \
+    $(NO_UNDEFINED_LDFLAG) \
+    -bindir $(bindir) \
+    $(WARN_LDFLAGS)
+else
+  noinst_LTLIBRARIES += %reldir%/libxerbla.la
+
+  liboctave_liboctave_la_LIBADD += %reldir%/libxerbla.la
+endif
diff --git a/liboctave/external/blas-xtra/xerbla.f b/liboctave/external/blas-xtra/xerbla.c
rename from liboctave/external/blas-xtra/xerbla.f
rename to liboctave/external/blas-xtra/xerbla.c
--- a/liboctave/external/blas-xtra/xerbla.f
+++ b/liboctave/external/blas-xtra/xerbla.c
@@ -1,43 +1,71 @@
-      SUBROUTINE XERBLA( SRNAME, INFO )
-*
-*  -- LAPACK auxiliary routine (preliminary version) --
-*     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
-*     Courant Institute, Argonne National Lab, and Rice University
-*     February 29, 1992
-*
-*     .. Scalar Arguments ..
-      CHARACTER*6        SRNAME
-      INTEGER            INFO
-*     ..
-*
-*  Purpose
-*  =======
-*
-*  XERBLA  is an error handler for the LAPACK routines.
-*  It is called by an LAPACK routine if an input parameter has an
-*  invalid value.  A message is printed and execution stops.
-*
-*  Installers may consider modifying the STOP statement in order to
-*  call system-specific exception-handling facilities.
-*
-*  Arguments
-*  =========
-*
-*  SRNAME  (input) CHARACTER*6
-*          The name of the routine which called XERBLA.
-*
-*  INFO    (input) INTEGER
-*          The position of the invalid parameter in the parameter list
-*          of the calling routine.
-*
-*
-      WRITE( *, FMT = 9999 )SRNAME, INFO
-*
-      CALL XSTOPX (' ')
-*
- 9999 FORMAT( ' ** On entry to ', A6, ' parameter number ', I2, ' had ',
-     $      'an illegal value' )
-*
-*     End of XERBLA
-*
-      END
+/*
+
+Copyright (C) 1996-2018 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdio.h>
+
+#include "f77-fcn.h"
+
+typedef void (*xerbla_handler_fptr) (void);
+
+/* Pointer to function to call to handle error.  In the Octave
+   interpreter we set this to a function that throws an exception and
+   transfers control to the enclosing try/catch block.  That is
+   typically at the top-level REPL.
+
+   We must use a function pointer instead of simply calling error
+   directly here because this function is called by LAPACK and BLAS
+   subroutines.  To build shared libraries of those packages on Windows
+   requires that all symbols be known when the shared library is
+   constructed.  If we call error directly, that would mean that the
+   BLAS and LAPACK libraries would have to depend on Octave...  */
+
+static xerbla_handler_fptr xerbla_handler = NULL;
+
+void
+octave_set_xerbla_handler (xerbla_handler_fptr fcn)
+{
+  xerbla_handler = fcn;
+}
+
+/* Replacement for BLAS and LAPACK XERBLA subroutine that calls an
+   optionally installed handler function.  */
+
+F77_RET_T
+F77_FUNC (xerbla, XERBLA) (F77_CONST_CHAR_ARG_DEF (s_arg, len),
+                           const F77_INT *info
+                           F77_CHAR_ARG_LEN_DEF (len))
+{
+  const char *s = F77_CHAR_ARG_USE (s_arg);
+  size_t slen = F77_CHAR_ARG_LEN_USE (s_arg, len);
+
+  fprintf (stderr, "%.*s: parameter number %ld is invalid\n", slen, s,
+           (long) (*info));
+
+   if (xerbla_handler)
+     (*xerbla_handler) ();
+
+  F77_RETURN (0)
+}
diff --git a/liboctave/util/f77-fcn.c b/liboctave/util/f77-fcn.c
--- a/liboctave/util/f77-fcn.c
+++ b/liboctave/util/f77-fcn.c
@@ -29,39 +29,27 @@ along with Octave; see the file COPYING.
 
 #include "f77-fcn.h"
 #include "quit.h"
 #include "lo-error.h"
 
 /* All the STOP statements in the Fortran routines have been replaced
    with a call to XSTOPX.
 
-   XSTOPX jumps back to the entry point for the Fortran function that
-   called us.  Then the calling function should do whatever cleanup
-   is necessary.
-
-   Note that the order of arguments for the Visual Fortran function
-   signature is the same as for gfortran and f2c only becuase there is
-   a single assumed size character string argument.  Visual Fortran
-   inserts the length after each character string argument, f2c appends
-   all length arguments at the end of the parameter list, and gfortran
-   appends length arguments for assumed size character strings to the
-   end of the list (ignoring others).  */
+   XSTOPX calls the liboctave error handler.  In the Octave interpreter
+   we set this to a function that throws an exception and transfers
+   control to the enclosing try/catch block.  That is typically at the
+   top-level REPL.  */
 
 F77_RET_T
-#if defined (F77_USES_CRAY_CALLING_CONVENTION)
-F77_FUNC (xstopx, XSTOPX) (octave_cray_ftn_ch_dsc desc)
-#else
-F77_FUNC (xstopx, XSTOPX) (const char *s, F77_CHAR_ARG_LEN_TYPE slen)
-#endif
+F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DEF (s_arg, len)
+                           F77_CHAR_ARG_LEN_DEF (len))
 {
-#if defined (F77_USES_CRAY_CALLING_CONVENTION)
-  const char *s = desc.const_ptr = ptr_arg;
-  unsigned long slen = desc.mask.len;
-#endif
+  const char *s = F77_CHAR_ARG_USE (s_arg);
+  size_t slen = F77_CHAR_ARG_LEN_USE (s_arg, len);
 
   /* Skip printing message if it is just a single blank character.  */
   if (! (s && slen > 0 && ! (slen == 1 && *s == ' ')))
     {
       s = "unknown error in fortran subroutine";
       slen = strlen (s);
     }
 
