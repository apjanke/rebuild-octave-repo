# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1506126255 25200
#      Fri Sep 22 17:24:15 2017 -0700
# Node ID 4d9ceaf17dda6cc35809effd25eb89252fe82316
# Parent  b47cbbfff5012518aaef1b7a13f10baf9e27d38c
return empty matrix if meta.*.fromName fails (bug #52096)

* ov-classdef.cc (class_fromName): Call lookup_class with
error_not_found = false.
(package_fromName): Call find_package with error_not_found = false.
(lookup_package): New args, error_if_not_found and load_if_not_found.
Pass them to find_package.

* test/classdef/classdef.tst: New tests.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -522,17 +522,17 @@ class_fromName (const octave_value_list&
 {
   octave_value_list retval;
 
   if (args.length () != 1)
     error ("fromName: invalid number of parameters");
 
   std::string name = args(0).xstring_value ("fromName: CLASS_NAME must be a string");
 
-  retval(0) = to_ov (lookup_class (name));
+  retval(0) = to_ov (lookup_class (name, false));
 
   return retval;
 }
 
 static octave_value_list
 class_fevalStatic (const octave_value_list& args, int nargout)
 {
   if (args.length () <= 1 || args(0).type_name () != "object")
@@ -3102,34 +3102,35 @@ cdef_method::cdef_method_rep::meta_subsr
 
   if (type.length () > 1 && idx.size () > 1 && ! retval.empty ())
     retval = retval(0).next_subsref (nargout, type, idx, 1);
 
   return retval;
 }
 
 static cdef_package
-lookup_package (const std::string& name)
+lookup_package (const std::string& name, bool error_if_not_found = true,
+                bool load_if_not_found = true)
 {
   cdef_manager& cdm = octave::__get_cdef_manager__ ("lookup_package");
 
-  return cdm.find_package (name);
+  return cdm.find_package (name, error_if_not_found, load_if_not_found);
 }
 
 static octave_value_list
 package_fromName (const octave_value_list& args, int /* nargout */)
 {
   octave_value_list retval;
 
   if (args.length () != 1)
     error ("fromName: invalid number of parameters");
 
   std::string name = args(0).xstring_value ("fromName: PACKAGE_NAME must be a string");
 
-  retval(0) = to_ov (lookup_package (name));
+  retval(0) = to_ov (lookup_package (name, false));
 
   return retval;
 }
 
 static octave_value_list
 package_get_classes (const octave_value_list& args, int /* nargout */)
 {
   octave_value_list retval (1, Matrix ());
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -81,8 +81,11 @@
 %! meta.class.fromName ("inputParser");
 
 ## Do not change this to "containers.Map()".  This test is intended to
 ## ensure that calling a function in a +package directory will work
 ## properly.
 %!test <*51715>
 %! x = containers.Map;
 %! assert (isobject (x));
+
+%!assert <*52096> isempty (meta.class.fromName ("__nonexi$tent_cl@$$__"))
+%!assert <*52096> isempty (meta.package.fromName ("__nonexi$tent_p@ck@ge__"))
