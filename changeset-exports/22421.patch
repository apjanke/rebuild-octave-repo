# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472788509 14400
#      Thu Sep 01 23:55:09 2016 -0400
# Node ID d6c1da692e59c1ad1a7744e3fbc89953696636db
# Parent  e5ae26e50374975187350982f764aa859479fddc
Backed out changeset 08aa03dfb00e

This changeset can cause trouble like this:

>> gnuplot_binary("/usr/bin/gnuplot")
error: '__gnuplot_has_feature__' undefined near line 49 column 5
error: called from
    gnuplot_binary at line 49 column 5

if Octave is running in a build tree that is separate from the source
tree.  The problem happens because gnuplot_binary.m is generated and
so is stored in the build tree.  But the private functions like
__gnuplot_has_feature__ are in the source tree.  Since the private
directory where __gnuplot_has_feature__ is located is not a
subdirectory of the directory where gnuplot_binary is located, Octave
doesn't find it.

I also noticed another problem due to this changeset.  The test executes

  gnuplot_binary ("X")

and that now ends up calling __gnuplot_version__ which attempts to
execute the command "X --version".  On many systems, "X" is the X11
server.  So then I see errors about the X server failing to start
properly and Octave hangs.

It also seems bad that "gnuplot_binary (new_prog)" will now call
gnuplot_binary recursively.  It currently works because the persistent
value that stores the program name is set before calling
__gnuplot_version__, but that seems a bit fragile.

I'm also wondering how important it is to be able to change the
gnuplot binary during a single Octave session.  Is this something that
comes up frequently?

diff --git a/scripts/plot/util/gnuplot_binary.in.m b/scripts/plot/util/gnuplot_binary.in.m
--- a/scripts/plot/util/gnuplot_binary.in.m
+++ b/scripts/plot/util/gnuplot_binary.in.m
@@ -41,17 +41,16 @@ function [prog, args] = gnuplot_binary (
     args = gp_args;
   endif
 
   if (nargin == 1)
     if (! ischar (new_prog) || isempty (new_prog))
       error ("gnuplot_binary: NEW_PROG must be a non-empty string");
     endif
     gp_binary = new_prog;
-    __gnuplot_has_feature__ ("__reset__");
   endif
 
   if (nargin > 1)
     if (! iscellstr (varargin))
       error ("gnuplot_binary: arguments must be character strings");
     endif
     gp_args = varargin;
   endif
diff --git a/scripts/plot/util/private/__gnuplot_has_feature__.m b/scripts/plot/util/private/__gnuplot_has_feature__.m
--- a/scripts/plot/util/private/__gnuplot_has_feature__.m
+++ b/scripts/plot/util/private/__gnuplot_has_feature__.m
@@ -37,19 +37,19 @@ function res = __gnuplot_has_feature__ (
                          "key_has_font_properties",
                          "windows_figure_position",
                          "has_termoption_dashed",
                          "needs_color_with_postscript",
                          "linetype",
                          "dashtype"};
   persistent has_features;
 
-  if (isempty (has_features) || strcmp (feature, "__reset__"))
+  if (isempty (has_features))
     try
-      gnuplot_version = __gnuplot_version__ ("__reset__");
+      gnuplot_version = __gnuplot_version__ ();
     catch
       ## Don't throw an error if gnuplot isn't installed
       gnuplot_version = "0.0.0";
     end_try_catch
     versions = {"4.2.5", "4.2.5", "4.4", "4.4", "4.4", "4.2", "4.2", "4.4", "4.4", "4.4", "4.4", "4.3", "4.6", "4.6", "5.0"};
     operators = {">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">="};
     have_features = false (size (features));
     for n = 1 : numel (have_features)
diff --git a/scripts/plot/util/private/__gnuplot_version__.m b/scripts/plot/util/private/__gnuplot_version__.m
--- a/scripts/plot/util/private/__gnuplot_version__.m
+++ b/scripts/plot/util/private/__gnuplot_version__.m
@@ -16,21 +16,25 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{version} =} __gnuplot_version__ ()
 ## Undocumented internal function.
 ## @end deftypefn
 
-function version = __gnuplot_version__ (do_reset = false)
+## Return the version of gnuplot we are using.  Note that we do not
+## attempt to handle the case of the user switching to different
+## versions of gnuplot during the same session.
+
+function version = __gnuplot_version__ ()
 
   persistent __version__ = "";
 
-  if (isempty (__version__) || do_reset)
+  if (isempty (__version__))
     [status, output] = system (sprintf ('"%s" --version', gnuplot_binary ()));
     if (status != 0)
       ## This message ends in a newline so that the traceback messages
       ## are skipped and people might actually see the message, read it,
       ## comprehend it, take the advice it gives, and stop asking us
       ## why plotting fails when gnuplot is not found.
       error ("you must have gnuplot installed to display graphics; if you have gnuplot installed in a non-standard location, see the 'gnuplot_binary' function\n");
     endif
