# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232206410 -3600
#      Sat Jan 17 16:33:30 2009 +0100
# Node ID b01fef323c24150ee8bfd6d59c0a08c0e9334386
# Parent  c7e49bf03d42004a651108bcf9364f69b8527aac
add some explaining comments

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -102,16 +102,23 @@ public:
   typedef T element_type;
 
 protected:
 
   typename Array<T>::ArrayRep *rep;
 
   dim_vector dimensions;
 
+  // Rationale:
+  // slice_data is a pointer to rep->data, denoting together with slice_len the
+  // actual portion of the data referenced by this Array<T> object. This allows
+  // to make shallow copies not only of a whole array, but also of contiguous
+  // subranges. Every time rep is directly manipulated, slice_data and slice_len
+  // need to be properly updated.
+
   T* slice_data;
   octave_idx_type slice_len;
 
   Array (T *d, octave_idx_type n)
     : rep (new typename Array<T>::ArrayRep (d, n)), dimensions (n) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array<T>): Document internal use of slice_data and
+	slice_len.
+
 2009-01-15  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::reshape): Include mismatched dimensions in
 	error message.
 	* Array.cc (Array<T>::reshape): Likewise.
 	From Robert Millan <rmh@aybabtu.com>.
 
 2009-01-14  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.h: Describe usage of storable_value and make_storable_value.
+	* ov.cc: Remove FIXME comment.
+
 2009-01-15  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Freshape): Include mismatched dimensions in error message.
 	From Robert Millan <rmh@aybabtu.com>.
 
 2009-01-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::maybe_economize): New method.
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1547,19 +1547,16 @@ octave_value::float_complex_vector_value
   if (error_state)
     return retval;
   else
     return retval.reshape (make_vector_dims (retval.dims (),
                                              force_vector_conversion,
                                              type_name (), "complex vector"));
 }
 
-// FIXME: This is a good place for pre-storage hooks, but the functions should
-// probably be named differently. These functions will be called
-
 octave_value 
 octave_value::storable_value (void) const
 {
   octave_value retval = *this;
   if (is_null_value ())
     retval = octave_value (rep->empty_clone ());
   else
     retval.maybe_economize ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -847,21 +847,24 @@ public:
   Array<FloatComplex> float_complex_vector_value (bool frc_str_conv = false,
 				       bool frc_vec_conv = false) const;
 
   // Possibly economize a lazy-indexed value.
 
   void maybe_economize (void)
     { rep->maybe_economize (); }
 
-  // Make a copy suitable for storing.
+  // The following two hook conversions are called on any octave_value prior to
+  // storing it to a "permanent" location, like a named variable, a cell or a
+  // struct component, or a return value of a function. 
 
   octave_value storable_value (void) const;
 
-  // Ditto, but in place.
+  // Ditto, but in place, i.e. equivalent to *this = this->storable_value (),
+  // but possibly more efficient.
 
   void make_storable_value (void);
 
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
   // it, and we should convert it if possible.
 
   octave_value convert_to_str (bool pad = false, bool force = false,
