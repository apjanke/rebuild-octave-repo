# HG changeset patch
# User jwe
# Date 1130340248 0
#      Wed Oct 26 15:24:08 2005 +0000
# Node ID 7865515fc6c2ce70ac09e0ecab9e4671dc198d8b
# Parent  273612001e3a1bd18ad2b6ec84ad6366ca34a91d
[project @ 2005-10-26 15:24:07 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2005-10-26  Arno J. Klaassen  <arno@heho.snv.jussieu.fr>
+
+	* configure.in [*-*-freebsd*] (SH_LDFLAGS): Properly quote.
+	(RLD_FLAG): Set.
+
 2005-10-23  David Bateman  <dbateman@free.fr>
 
 	* configure.in (OCTAVE_UMFPACK_SEPERATE_SPLIT): Check for metis 
 	separately.
 	* PROJECTS: Remove completed sparse matrix tasks.
 
 2005-10-17  Paul Kienzle <pkienzle@users.sf.net>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.487 $)
+AC_REVISION($Revision: 1.488 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -942,17 +942,18 @@ TEMPLATE_ARFLAGS="$ARFLAGS"
 library_path_var=LD_LIBRARY_PATH
 case "$canonical_host_type" in
   *-*-386bsd* | *-*-openbsd* | *-*-netbsd*)
     SH_LD=ld
     SH_LDFLAGS=-Bshareable
   ;;
   *-*-freebsd*)
     SH_LD='$(CC)'
-    SH_LDFLAGS=-shared -Wl,-x
+    SH_LDFLAGS="-shared -Wl,-x"
+    RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
   ;;
   alpha*-dec-osf*)
     CPICFLAG=
     CXXPICFLAG=
     FPICFLAG=
     SH_LDFLAGS="-shared -Wl,-expect_unresolved -Wl,'*'"
     RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
   ;;
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -195,27 +195,16 @@ public:
 
   ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, octave_idx_type& info) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, octave_idx_type& info,
 			       octave_idx_type& rank) const;
 
   ComplexMatrix expm (void) const;
 
-  // column vector by row vector -> matrix operations
-
-  friend ComplexMatrix operator * (const ColumnVector& a,
-				   const ComplexRowVector& b);
-
-  friend ComplexMatrix operator * (const ComplexColumnVector& a,
-				   const RowVector& b);
-
-  friend ComplexMatrix operator * (const ComplexColumnVector& a,
-				   const ComplexRowVector& b);
-
   // matrix by diagonal matrix -> matrix operations
 
   ComplexMatrix& operator += (const DiagMatrix& a);
   ComplexMatrix& operator -= (const DiagMatrix& a);
 
   ComplexMatrix& operator += (const ComplexDiagMatrix& a);
   ComplexMatrix& operator -= (const ComplexDiagMatrix& a);
 
@@ -276,20 +265,32 @@ public:
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
 private:
 
   ComplexMatrix (Complex *d, octave_idx_type r, octave_idx_type c) : MArray2<Complex> (d, r, c) { }
 };
 
-ComplexMatrix Givens (const Complex&, const Complex&);
+// column vector by row vector -> matrix operations
+
+extern ComplexMatrix
+operator * (const ColumnVector& a, const ComplexRowVector& b);
+
+extern ComplexMatrix
+operator * (const ComplexColumnVector& a, const RowVector& b);
 
-ComplexMatrix Sylvester (const ComplexMatrix&, const ComplexMatrix&,
-			 const ComplexMatrix&);
+extern ComplexMatrix
+operator * (const ComplexColumnVector& a, const ComplexRowVector& b);
+
+extern ComplexMatrix
+Givens (const Complex&, const Complex&);
+
+extern ComplexMatrix
+Sylvester (const ComplexMatrix&, const ComplexMatrix&, const ComplexMatrix&);
 
 extern ComplexMatrix operator * (const Matrix&,        const ComplexMatrix&);
 extern ComplexMatrix operator * (const ComplexMatrix&, const Matrix&);
 extern ComplexMatrix operator * (const ComplexMatrix&, const ComplexMatrix&);
 
 extern ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
 extern ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
 extern ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,32 @@
+2005-10-26  John W. Eaton  <jwe@octave.org>
+
+	Changes for GCC 4.1, tip from Arno J. Klaassen
+	<arno@heho.snv.jussieu.fr>:
+
+	* dColVector.h (real (const ComplexColumnVector&)):
+	Publish externally used friend function.
+	(imag (const ComplexColumnVector&)): Likewise.
+
+	* dNDArray.h (real (const ComplexNDArray&)):
+	Publish externally used friend function.
+	(imag (const ComplexNDArray&)): Likewise.
+
+	* dMatrix.h (operator * (const ComplexMatrix&)): 
+	Move decl outside class.  No need to be friend.
+	(real (const ComplexMatrix&)): Publish externally used friend function.
+	(imag (const ComplexMatrix&)): Likewise.
+
+	* CMatrix.h: (operator * (const ColumnVector&, const
+	ComplexRowVector&)): Move decl outside class.  No need to be friend.
+	(operator * (const ComplexColumnVector&, const RowVector&)): Likewise.
+	(operator * (const ComplexColumnVector&, const ComplexRowVector& b)):
+	Likewise.
+
 2005-10-23  David Bateman  <dbateman@free.fr>
 	
 	* Sparse-op-defs.h (SPARSE_SPARSE_MUL): Check whether trailing zero
 	elements need to be removed.
 	
 	* oct-sparse.h.in: Include metis headers and some macros for long/int
 	versions of cholmod.
 	
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -94,16 +94,21 @@ public:
   friend std::ostream& operator << (std::ostream& os, const ColumnVector& a);
   friend std::istream& operator >> (std::istream& is, ColumnVector& a);
 
 private:
 
   ColumnVector (double *d, octave_idx_type l) : MArray<double> (d, l) { }
 };
 
+// Publish externally used friend functions.
+
+extern ColumnVector real (const ComplexColumnVector& a);
+extern ColumnVector imag (const ComplexColumnVector& a);
+
 MARRAY_FORWARD_DEFS (MArray, ColumnVector, double)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -172,20 +172,16 @@ public:
 
   Matrix& operator += (const DiagMatrix& a);
   Matrix& operator -= (const DiagMatrix& a);
 
   // unary operations
 
   boolMatrix operator ! (void) const;
 
-  // column vector by row vector -> matrix operations
-
-  friend Matrix operator * (const ColumnVector& a, const RowVector& b);
-
   // other operations
 
   Matrix map (d_d_Mapper f) const;
   boolMatrix map (b_d_Mapper f) const;
 
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (bool = false) const;
@@ -226,16 +222,27 @@ public:
 
   static double resize_fill_value (void) { return 0; }
 
 private:
 
   Matrix (double *d, octave_idx_type r, octave_idx_type c) : MArray2<double> (d, r, c) { }
 };
 
+// Publish externally used friend functions.
+
+extern Matrix real (const ComplexMatrix& a);
+extern Matrix imag (const ComplexMatrix& a);
+
+// column vector by row vector -> matrix operations
+
+extern Matrix operator * (const ColumnVector& a, const RowVector& b);
+
+// Other functions.
+
 extern Matrix Givens (double, double);
 
 extern Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
 
 extern Matrix operator * (const Matrix& a, const Matrix& b);
 
 extern Matrix min (double d, const Matrix& m);
 extern Matrix min (const Matrix& m, double d);
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -122,16 +122,21 @@ public:
 
   static double resize_fill_value (void) { return 0; }
 
 private:
 
   NDArray (double *d, const dim_vector& dv) : MArrayN<double> (d, dv) { }
 };
 
+// Publish externally used friend functions.
+
+extern NDArray real (const ComplexNDArray& a);
+extern NDArray imag (const ComplexNDArray& a);
+
 extern NDArray min (double d, const NDArray& m);
 extern NDArray min (const NDArray& m, double d);
 extern NDArray min (const NDArray& a, const NDArray& b);
 
 extern NDArray max (double d, const NDArray& m);
 extern NDArray max (const NDArray& m, double d);
 extern NDArray max (const NDArray& a, const NDArray& b);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2005-10-26  John W. Eaton  <jwe@octave.org>
+
+	Changes for GCC 4.1, tip from Arno J. Klaassen
+	<arno@heho.snv.jussieu.fr>:
+
+	* ov.h (do_unary_op (octave_value::unary_op, const octave_value&)):
+	Publish externally used friend function.
+	(do_unary_op (octave_value::unary_op, const octave_value&,
+	const octave_value&)): Likewise.
+
 2005-10-25  David Bateman  <dbateman@free.fr>
 
 	* data.cc (do_cat): called with 2 args, should return args(1) 
 	for compatibility.
 
 2005-10-23  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in (DLD_XSRC): Add spchol.cc.
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -828,16 +828,25 @@ private:
 
   binary_op op_eq_to_binary_op (assign_op op);
 
   DECLARE_OCTAVE_ALLOCATOR
 
   octave_value *nil_rep (void) const;
 };
 
+// Publish externally used friend functions.
+
+extern octave_value
+do_unary_op (octave_value::unary_op op, const octave_value& a);
+
+extern octave_value
+do_binary_op (octave_value::binary_op op,
+	      const octave_value& a, const octave_value& b);
+
 #define OV_UNOP_FN(name) \
   inline octave_value \
   name (const octave_value& a) \
   { \
     return do_unary_op (octave_value::name, a); \
   }
 
 #define OV_UNOP_OP(name, op) \
