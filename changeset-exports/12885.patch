# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1311664735 18000
#      Tue Jul 26 02:18:55 2011 -0500
# Node ID 39ee18712709f1ae5acf6719ad106c626b0cde52
# Parent  6e2971841d6783a53b00e3a4bcc15e8561b18383
# Parent  73e75ff9c31b917e05fe82ef7fdb86462b9a3658
maint: periodic merge of stable to default

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1495,17 +1495,17 @@ Array<T>::insert (const Array<T>& a, oct
   idx_vector j (c, c + a.columns ());
   if (ndims () == 2 && a.ndims () == 2)
     assign (i, j, a);
   else
     {
       Array<idx_vector> idx (dim_vector (a.ndims (), 1));
       idx(0) = i;
       idx(1) = j;
-      for (int k = 0; k < a.ndims (); k++)
+      for (int k = 2; k < a.ndims (); k++)
         idx(k) = idx_vector (0, a.dimensions(k));
       assign (idx, a);
     }
 
   return *this;
 }
 
 template <class T>
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -120,19 +120,18 @@ function assert (cond, varargin)
         try
           empty = numel (cond) == 0;
           normal = numel (cond) == 1;
           for [v, k] = cond
             if (! isfield (expected, k))
               error ();
             endif
             if (empty)
-              v = cell (1, 0);
-            endif
-            if (normal)
+              v = {};
+            elseif (normal)
               v = {v};
             else
               v = v(:)';
             endif
             assert (v, {expected.(k)}, tol);
           endfor
         catch
           iserror = 1;
@@ -302,18 +301,24 @@ endfunction
 %!shared x,y
 %! x.a = 1; x.b=[2, 2];
 %! y.a = 1; y.b=[2, 2];
 %!assert (x,y)
 %!test y.b=3;
 %!error assert (x,y)
 %!error assert (3, x);
 %!error assert (x, 3);
-
-## check usage statements
-%!error assert
-%!error assert(1,2,3,4,5)
+%!test
+%! # Empty structures
+%! x = resize (x, 0, 1);
+%! y = resize (y, 0, 1);
+%! assert (x, y);
 
 ## strings
 %!assert("dog","dog")
 %!error assert("dog","cat")
 %!error assert("dog",3);
 %!error assert(3,"dog");
+
+## check input validation
+%!error assert
+%!error assert (1,2,3,4,5)
+
