# HG changeset patch
# User Rik <rik@octave.org>
# Date 1536861943 25200
#      Thu Sep 13 11:05:43 2018 -0700
# Node ID 369e43cda3c7e616c02441479e1df8e9b5c532f3
# Parent  c25ee75beea1cfaf39275779fbc825fa8c17c9b8
# Parent  49734a75561f14c23ed23a13cf6b47ef20d6cc40
maint: merge stable to default.

diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -24,26 +24,28 @@
 ## @var{breaks} and coefficients @var{coefs}.
 ##
 ## @var{breaks} must be a vector of strictly increasing values.  The number of
 ## intervals is given by @code{@var{ni} = length (@var{breaks}) - 1}.
 ##
 ## When @var{m} is the polynomial order @var{coefs} must be of size:
 ## @w{@var{ni}-by-(@var{m} + 1)}.
 ##
-## The i-th row of @var{coefs}, @code{@var{coefs} (@var{i},:)}, contains the
+## The i-th row of @var{coefs}, @code{@var{coefs}(@var{i},:)}, contains the
 ## coefficients for the polynomial over the @var{i}-th interval, ordered from
-## highest (@var{m}) to lowest (@var{0}).
+## highest (@var{m}) to lowest (@var{0}) degree.
 ##
 ## @var{coefs} may also be a multi-dimensional array, specifying a
 ## vector-valued or array-valued polynomial.  In that case the polynomial
 ## order @var{m} is defined by the length of the last dimension of @var{coefs}.
 ## The size of first dimension(s) are given by the scalar or vector @var{d}.
-## If @var{d} is not given it is set to @code{1}.  In any case @var{coefs} is
-## reshaped to a 2-D matrix of size @code{[@var{ni}*prod(@var{d}) @var{m}]}.
+## If @var{d} is not given it is set to @code{1}.  In this case
+## @code{@var{p}(@var{r}, @var{i}, :)} contains the coefficients for the
+## @var{r}-th polynomial defined on interval @var{i}.  In any case @var{coefs}
+## is reshaped to a 2-D matrix of size @code{[@var{ni}*prod(@var{d}) @var{m}]}.
 ##
 ## @seealso{unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 function pp = mkpp (x, P, d)
 
   ## check number of arguments
   if (nargin < 2 || nargin > 3)
@@ -76,25 +78,43 @@ function pp = mkpp (x, P, d)
 
   dim_vec = [pp.pieces * prod(pp.dim), pp.order];
   pp.coefs = reshape (P, dim_vec);
 
 endfunction
 
 
 %!demo # linear interpolation
-%! x = linspace (0,pi,5)';
+%! x = linspace (0, pi, 5)';
 %! t = [sin(x), cos(x)];
 %! m = diff (t) ./ (x(2)-x(1));
 %! b = t(1:4,:);
 %! pp = mkpp (x, [m(:),b(:)]);
-%! xi = linspace (0,pi,50);
-%! plot (x,t,"x", xi,ppval (pp,xi));
+%! xi = linspace (0, pi, 50);
+%! plot (x, t, "x", xi, ppval (pp,xi));bb4af245dff7
 %! legend ("control", "interp");
 
+%!demo # piecewise polynomial shape
+%! breaks = [0 1 2 3];
+%! dim = 2;
+%! coefs = zeros (dim, length (breaks) - 1, 4);
+%! # 1st edge of the shape (x, x^2)
+%! coefs(1,1,:) = [0 0 1 0];
+%! coefs(2,1,:) = [0 1 0 0];
+%! # 2nd edge of the shape (-3x, 1)
+%! coefs(1,2,:) = [0 0 -3 1];
+%! coefs(2,2,:) = [0 0 0 1];
+%! # 3rd edge of the shape (2x - 2, -4(x -1/2)^3 + 1/2)
+%! coefs(1,3,:) = [0 0 2 -2];
+%! coefs(2,3,:) = [-4 6 -3 1];
+%! pp = mkpp (breaks, coefs, dim);
+%! t = linspace (0, 3, 100).';
+%! xy = ppval (pp, t).';
+%! patch (xy(:,1), xy(:,2), 'r');
+
 %!shared b,c,pp
 %! b = 1:3; c = 1:24; pp = mkpp (b,c);
 %!assert (pp.pieces, 2)
 %!assert (pp.order, 12)
 %!assert (pp.dim, 1)
 %!assert (size (pp.coefs), [2,12])
 %! pp = mkpp (b,c,2);
 %!assert (pp.pieces, 2)
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -16,31 +16,49 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {[@var{x}, @var{p}, @var{n}, @var{k}, @var{d}] =} unmkpp (@var{pp})
 ##
 ## Extract the components of a piecewise polynomial structure @var{pp}.
 ##
+## This function is the inverse of @code{mkpp}: it extracts the inputs to
+## @code{mkpp} needed to create the piecewise polynomial structure @var{PP}.
+## The code below makes this relation explicit:
+##
+## @example
+## @group
+## [breaks, coefs, numinter, order, dim] = unmkpp (pp);
+## pp2  = mkpp (breaks, coefs, dim);
+## @end group
+## @end example
+##
+## The piecewise polynomial structure @code{pp2} obtained in this way, is
+## identical to the original @code{pp}.  The same can be obtained by directly
+## accessing the fields of the structure @code{pp}.
+##
 ## The components are:
 ##
 ## @table @asis
 ## @item @var{x}
-## Sample points.
+## Sample points or breaks.
 ##
 ## @item @var{p}
 ## Polynomial coefficients for points in sample interval.
-## @code{@var{p} (@var{i}, :)} contains the coefficients for the polynomial
-## over interval @var{i} ordered from highest to lowest.  If
-## @code{@var{d} > 1}, @code{@var{p} (@var{r}, @var{i}, :)} contains the
-## coefficients for the r-th polynomial defined on interval @var{i}.
+## @code{@var{p}(@var{i}, :)} contains the coefficients for the polynomial
+## over interval @var{i} ordered from highest to lowest degree.
+## If @code{@var{d} > 1}, then @var{p} is a matrix of size
+## @code{[@var{n}*prod(@var{d}) @var{m}]}, where the
+## @code{@var{i} + (1:@var{d})} rows are the coefficients of all the @var{d}
+## polynomials in the interval @var{i}.
 ##
 ## @item @var{n}
-## Number of polynomial pieces.
+## Number of polynomial pieces or intervals,
+## @code{@var{n} = length (@var{x}) - 1}.
 ##
 ## @item @var{k}
 ## Order of the polynomial plus 1.
 ##
 ## @item @var{d}
 ## Number of polynomials defined for each interval.
 ## @end table
 ##
