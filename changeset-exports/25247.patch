# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523722360 25200
#      Sat Apr 14 09:12:40 2018 -0700
# Branch stable
# Node ID db31e068f4db0a9bc8e56e96c4707214bb6a190a
# Parent  b20d0736f32277134afb5943f4d01f36008fe8bb
Rewrite incorrect assert statement in colloc calculation (bug #53653)

* colloc.cc (jcobi, dfopr): Correct assert statement to be nt >= 1 to match
original Fortran.

* CollocWt.cc (Fcolloc): Add a few BIST tests.

diff --git a/libinterp/corefcn/colloc.cc b/libinterp/corefcn/colloc.cc
--- a/libinterp/corefcn/colloc.cc
+++ b/libinterp/corefcn/colloc.cc
@@ -84,8 +84,17 @@ Reference: @nospell{J. Villadsen}, @nosp
 
   ColumnVector r = wts.roots ();
   Matrix A = wts.first ();
   Matrix B = wts.second ();
   ColumnVector q = wts.quad_weights ();
 
   return ovl (r, A, B, q);
 }
+
+/*
+
+%!assert (colloc (1), 0.5)
+%!assert (colloc (1, "left"), [0; 0.5])
+%!assert (colloc (1, "right"), [0.5; 1])
+%!assert (colloc (1, "left", "right"), [0; 0.5; 1])
+
+*/
diff --git a/liboctave/numeric/CollocWt.cc b/liboctave/numeric/CollocWt.cc
--- a/liboctave/numeric/CollocWt.cc
+++ b/liboctave/numeric/CollocWt.cc
@@ -148,17 +148,17 @@ jcobi (octave_idx_type n, octave_idx_typ
        double alpha, double beta, double *dif1, double *dif2,
        double *dif3, double *root)
 {
   assert (n0 == 0 || n0 == 1);
   assert (n1 == 0 || n1 == 1);
 
   octave_idx_type nt = n + n0 + n1;
 
-  assert (nt > 1);
+  assert (nt >= 1);
 
 // -- first evaluation of coefficients in recursion formulas.
 // -- recursion coefficients are stored in dif1 and dif2.
 
   double ab = alpha + beta;
   double ad = beta - alpha;
   double ap = beta * alpha;
 
@@ -310,17 +310,17 @@ dfopr (octave_idx_type n, octave_idx_typ
        octave_idx_type i, octave_idx_type id, double *dif1,
        double *dif2, double *dif3, double *root, double *vect)
 {
   assert (n0 == 0 || n0 == 1);
   assert (n1 == 0 || n1 == 1);
 
   octave_idx_type nt = n + n0 + n1;
 
-  assert (nt > 1);
+  assert (nt >= 1);
 
   assert (id == 1 || id == 2 || id == 3);
 
   if (id != 3)
     assert (i >= 0 && i < nt);
 
   // Evaluate discretization matrices and Gaussian quadrature weights.
   // Quadrature weights are normalized to sum to one.
