# HG changeset patch
# User jwe
# Date 1161740426 0
#      Wed Oct 25 01:40:26 2006 +0000
# Node ID 802aec2b1a2e8deca281f08e56268a492886479e
# Parent  34b1758d3247b72c5be9cbf5c2e5e63510339c86
[project @ 2006-10-25 01:40:26 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2006-10-24  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)): Resize the
+	lhs at the point we know the assignment can succeed if the lhs is
+	empty.
+
 2006-10-23  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign2): Don't require vector assignments to be oriented.
 
 2006-10-17  John W. Eaton  <jwe@octave.org>
 
 	* lo-cieee.c: If isnan is not available but _isnan is, then define
 	isnan to be _isnan, and define HAVE_ISNAN.  Likewise for _finite
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2466,16 +2466,21 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			    }
 			}
 
 		      if (scalar != RT())
 			new_nzmx += m * n;
 
 		      Sparse<LT> stmp (new_nr, new_nc, new_nzmx);
 
+		      // Started with an empty matrix. Now that we know
+		      // the assignment will succeed, resize lhs 
+		      if (lhs_nr <= 0 || lhs_nc <= 0)
+			lhs = Sparse<RT>(n, m);
+
 		      octave_idx_type jji = 0;
 		      octave_idx_type jj = idx_j.elem (jji);
 		      octave_idx_type kk = 0;
 		      stmp.cidx(0) = 0;
 		      for (octave_idx_type j = 0; j < new_nc; j++)
 			{
 			  if (jji < m && jj == j)
 			    {
@@ -2618,16 +2623,21 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			for (octave_idx_type i = 0; i < m; i++)
 			  rhs_idx_j[i] = i;
 
 		      // Maximum number of non-zero elements
 		      octave_idx_type new_nzmx = lhs.nnz() + rhs.nnz();
 
 		      Sparse<LT> stmp (new_nr, new_nc, new_nzmx);
 
+		      // Started with an empty matrix. Now that we know
+		      // the assignment will succeed, resize lhs 
+		      if (lhs_nr <= 0 || lhs_nc <= 0)
+			lhs = Sparse<RT>(n, m);
+
 		      octave_idx_type jji = 0;
 		      octave_idx_type jj = idx_j.elem (jji);
 		      octave_idx_type kk = 0;
 		      stmp.cidx(0) = 0;
 		      for (octave_idx_type j = 0; j < new_nc; j++)
 			{
 			  if (jji < m && jj == j)
 			    {
