# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1205427943 14400
#      Thu Mar 13 13:05:43 2008 -0400
# Node ID 1f662945c2be859b6051bacb77aa1b2a05e141f7
# Parent  84122fb29c754281b397edf119de16fd79848943
handle varargin and varargout without keywords

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2008-03-13  John W. Eaton  <jwe@octave.org>
+
+	* octave.gperf: Eliminate varargin and varargout keywords.
+	* lex.l (is_keyword_token): Eliminate varargin_kw and varargout_kw
+	from switch statement.
+	* parse.y (return_list): Eliminate special cases for VARARGOUT.
+	Call validate on tree_parameter_list object.
+	(param_list1): Likewise, for VARARGIN.
+	* pt-misc.cc (tree_parameter_list::validate): New function.
+	(tree_parameter_list::mark_varargs_only): Now private.
+	(tree_parameter_list::mark_varargs): Now private.
+	* pt-misc.h (tree_parameter_list::validate): Provide decl.
+
 2008-03-12  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (Vwhos_line_format): Omit print_dims parameter.
 	Fix doc string in Vwhos_line_format DEVAR.
 	(symbol_record_name_compare): Delete unused function.
 	(whos_parameter::dimensions): Delete struct field.
 	(symbol_info_list): New class.
 	(dimensions_string_req_first_space, make_dimensions_string,
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1139,28 +1139,16 @@ is_keyword_token (const std::string& s)
 	      yylval.tok_val = new token ("stdin", l, c);
 	  }
 	  break;
 
         case magic_line_kw:
 	  yylval.tok_val = new token (static_cast<double> (l), "", l, c);
 	  break;
 
-	case varargin_kw:
-	  if (! lexer_flags.looking_at_parameter_list)
-	    return 0;
-	  break;
-
-	case varargout_kw:
-	  if (! (lexer_flags.looking_at_return_list
-		 || (lexer_flags.defining_func
-		     && ! lexer_flags.parsed_function_name)))
-	    return 0;
-	  break;
-
 	default:
 	  panic_impossible ();
 	}
 
       if (! yylval.tok_val)
 	yylval.tok_val = new token (l, c);
 
       token_stack.push (yylval.tok_val);
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -49,18 +49,16 @@ enum octave_kw_id
   otherwise_kw,
   return_kw,
   static_kw,
   switch_kw,
   try_kw,
   until_kw,
   unwind_protect_kw,
   unwind_protect_cleanup_kw,
-  varargin_kw,
-  varargout_kw,
   while_kw
 };
 
 %}
 
 struct octave_kw { const char *name; int tok; octave_kw_id kw_id; };
 %%
 break, BREAK, break_kw
@@ -86,13 +84,11 @@ otherwise, OTHERWISE, otherwise_kw
 persistent, STATIC, static_kw
 return, FUNC_RET, return_kw
 static, STATIC, static_kw
 switch, SWITCH, switch_kw
 try, TRY, try_kw
 until, UNTIL, until_kw
 unwind_protect, UNWIND, unwind_protect_kw
 unwind_protect_cleanup, CLEANUP, unwind_protect_cleanup_kw
-varargin, VARARGIN, varargin_kw
-varargout, VARARGOUT, varargout_kw
 while, WHILE, while_kw
 __FILE__, DQ_STRING, magic_file_kw
 __LINE__, NUM, magic_line_kw
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -394,17 +394,18 @@ set_stmt_print_flag (tree_statement_list
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL STATIC
 %token <tok_val> FCN_HANDLE
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
-%token FCN VARARGIN VARARGOUT
+%token FCN
+// %token VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
@@ -1142,29 +1143,20 @@ param_list	: param_list_beg param_list1 
 		  }
 		;
 
 param_list1	: // empty
 		  { $$ = 0; }
 		| param_list2
 		  {
 		    $1->mark_as_formal_parameters ();
-		    $$ = $1;
-		  }
-		| VARARGIN
-		  {
-		    tree_parameter_list *tmp = new tree_parameter_list ();
-		    tmp->mark_varargs_only ();
-		    $$ = tmp;
-		  }
-		| param_list2 ',' VARARGIN
-		  {
-		    $1->mark_as_formal_parameters ();
-		    $1->mark_varargs ();
-		    $$ = $1;
+		    if ($1->validate (tree_parameter_list::in))
+		      $$ = $1;
+		    else
+		      ABORT_PARSE;
 		  }
 		;
 
 param_list2	: decl2
 		  { $$ = new tree_parameter_list ($1); }
 		| param_list2 ',' decl2
 		  {
 		    $1->append ($3);
@@ -1176,45 +1168,31 @@ param_list2	: decl2
 // List of function return value names
 // ===================================
 
 return_list	: '[' ']'
 		  {
 		    lexer_flags.looking_at_return_list = false;
 		    $$ = new tree_parameter_list ();
 		  }
-		| '[' VARARGOUT ']'
-		  {
-		    lexer_flags.looking_at_return_list = false;
-		    tree_parameter_list *tmp = new tree_parameter_list ();
-		    tmp->mark_varargs_only ();
-		    $$ = tmp;
-		  }
-		| VARARGOUT
-		  {
-		    lexer_flags.looking_at_return_list = false;
-		    tree_parameter_list *tmp = new tree_parameter_list ();
-		    tmp->mark_varargs_only ();
-		    $$ = tmp;
-		  }
 		| return_list1
 		  {
 		    lexer_flags.looking_at_return_list = false;
-		    $$ = $1;
+		    if ($1->validate (tree_parameter_list::out))
+		      $$ = $1;
+		    else
+		      ABORT_PARSE;
 		  }
 		| '[' return_list1 ']'
 		  {
 		    lexer_flags.looking_at_return_list = false;
-		    $$ = $2;
-		  }
-		| '[' return_list1 ',' VARARGOUT ']'
-		  {
-		    lexer_flags.looking_at_return_list = false;
-		    $2->mark_varargs ();
-		    $$ = $2;
+		    if ($2->validate (tree_parameter_list::out))
+		      $$ = $2;
+		    else
+		      ABORT_PARSE;
 		  }
 		;
 
 return_list1	: identifier
 		  { $$ = new tree_parameter_list (new tree_decl_elt ($1)); }
 		| return_list1 ',' identifier
 		  {
 		    $1->append (new tree_decl_elt ($3));
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -54,16 +54,75 @@ tree_parameter_list::mark_as_formal_para
 {
   for (iterator p = begin (); p != end (); p++)
     {
       tree_decl_elt *elt = *p;
       elt->mark_as_formal_parameter ();
     }
 }
 
+bool
+tree_parameter_list::validate (in_or_out type)
+{
+  bool retval = true;
+
+  std::set<std::string> dict;
+
+  for (iterator p = begin (); p != end (); p++)
+    {
+      tree_decl_elt *elt = *p;
+
+      tree_identifier *id = elt->ident ();
+
+      if (id)
+	{
+	  std::string name = id->name ();
+
+	  if (dict.find (name) != dict.end ())
+	    {
+	      retval = false;
+	      error ("`%s' appears more than once in parameter list",
+		     name.c_str ());
+	      break;
+	    }
+	  else
+	    dict.insert (name);
+	}
+    }
+
+  if (! error_state)
+    {
+      std::string va_type = (type == in ? "varargin" : "varargout");
+
+      size_t len = length ();
+
+      if (len > 0)
+	{
+	  tree_decl_elt *elt = back ();
+
+	  tree_identifier *id = elt->ident ();
+
+	  if (id && id->name () == va_type)
+	    {
+	      if (len == 1)
+		mark_varargs_only ();
+	      else
+		mark_varargs ();
+
+	      iterator p = end ();
+	      --p;
+	      delete *p;
+	      erase (p);
+	    }
+	}
+    }
+
+  return retval;
+}
+
 void
 tree_parameter_list::initialize_undefined_elements (const std::string& warnfor,
 						    int nargout,
 						    const octave_value& val)
 {
   bool warned = false;
 
   int count = 0;
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -43,32 +43,36 @@ class tree_walker;
 // parameters in a function definition.  Elements are identifiers
 // only.
 
 class
 tree_parameter_list : public octave_base_list<tree_decl_elt *>
 {
 public:
 
+  enum in_or_out
+    {
+      in = 1,
+      out = 2
+    };
+
   tree_parameter_list (void)
     : marked_for_varargs (0) { }
 
   tree_parameter_list (tree_decl_elt *t)
     : marked_for_varargs (0) { append (t); }
 
   ~tree_parameter_list (void);
 
   void mark_as_formal_parameters (void);
 
-  void mark_varargs (void) { marked_for_varargs = 1; }
+  bool validate (in_or_out type);
 
   bool takes_varargs (void) const { return marked_for_varargs != 0; }
 
-  void mark_varargs_only (void) { marked_for_varargs = -1; }
-
   bool varargs_only (void) { return (marked_for_varargs < 0); }
 
   void initialize_undefined_elements (const std::string& warnfor,
 				      int nargout, const octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
   void undefine (void);
@@ -80,16 +84,20 @@ public:
   tree_parameter_list *dup (symbol_table::scope_id scope);
 
   void accept (tree_walker& tw);
 
 private:
 
   int marked_for_varargs;
 
+  void mark_varargs (void) { marked_for_varargs = 1; }
+
+  void mark_varargs_only (void) { marked_for_varargs = -1; }
+
   // No copying!
 
   tree_parameter_list (const tree_parameter_list&);
 
   tree_parameter_list& operator = (const tree_parameter_list&);
 };
 
 // Return lists.  Used to hold the right hand sides of multiple
