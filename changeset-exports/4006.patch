# HG changeset patch
# User jwe
# Date 1027646446 0
#      Fri Jul 26 01:20:46 2002 +0000
# Node ID efac4b97bb09bc32d8de8c5b8ea2db04a4480da3
# Parent  fc000ebb19df6b9923deb77ffa0d4db5335b1ffd
[project @ 2002-07-26 01:20:46 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2002-07-25  Teemu Ikonen <tpikonen@pcu.helsinki.fi>
+
+	* plot/__errcomm__.m: New file.  Common functionality for error plots.
+	* plot/loglogerr.m: New file.  Double logarithm plots with errorbars.
+	* plot/semilogxerr.m: New file.  Semilogarithm plots with errorbars.
+	* plot/semilogyerr.m: New file.  Semilogarithm plots with errorbars
+
+	* plot/errorbar.m: Use __errcomm__.m.
+	* plot/__errplot__.m: Minor cleanups.
+	* plot/__pltopt__.m: Handle boxxyerrorbars plot style. 
+	* plot/__pltopt1__.m: Likewise.
+
 2002-07-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/rem.m: Delete redundant call to usage.
 
 	* general/mod.m: Additional error checks, Texinfoize doc string.
 
 2002-04-29  Paul Kienzle <pkienzle@users.sf.net>
 
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000, Teemu Ikonen
+## Copyright (C) 2000-2002 Teemu Ikonen
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __errplot__ (@var{args})
 ## Really plot errorbar plots. User interface in function errorbar.
-##
+## 
 ## @example
 ## __errplot__ (@var{arg1}, @var{arg2}, ..., @var{fmt})
 ## @end example
 ##
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
@@ -47,84 +47,69 @@ function __errplot__ (varargin)
     a = varargin{k++};
     if (! isstr (a))
       ndata++;
       eval (sprintf ("arg%d = a;", ndata));
     else
       fstr = a;
     endif
   endwhile
-
+  
   fmt = __pltopt__ ("__errplot__", fstr);
-
+  
   nplots = size (arg1, 2);
   len = size (arg1, 1);
-
+  
   if (ndata == 2)
     for i = 1:nplots,
       tmp = [(1:len)', arg1(:,i), arg2(:,i)];
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
-    end
+    endfor
   elseif (ndata == 3)
     for i = 1:nplots,
       tstr = "tmp =[arg1(:,i)";
       for j = 2:ndata,
-	tstr = [tstr, sprintf(", arg%d(:,i)", j)];
+       tstr = [tstr, sprintf(", arg%d(:,i)", j)];
       endfor
       tstr = [tstr, "];"];
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
     endfor
   elseif (ndata == 4)
     for i = 1:nplots, # this is getting ugly
       if (index (fmt, "boxxy") || index (fmt, "xyerr"))
-	tstr = "tmp = [arg1(:,i), arg2(:,i), arg3(:,i), arg4(:,i)];";
+       tstr = "tmp = [arg1(:,i), arg2(:,i), arg3(:,i), arg4(:,i)];";
       elseif (index (fmt, "xerr"))
-	tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i)];";
+       tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i)];";
       else
-	tstr = "tmp = [arg1(:,i), arg2(:,i), arg2(:,i)-arg3(:,i), arg2(:,i)+arg4(:,i)];";
+       tstr = "tmp = [arg1(:,i), arg2(:,i), arg2(:,i)-arg3(:,i), arg2(:,i)+arg4(:,i)];";
       endif
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
     endfor
   elseif (ndata == 6)
     for i = 1:nplots,
       tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i), arg2(:,i)-arg5(:,i), arg2(:,i)+arg6(:,i)];";
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
-    endfor
-  else
+    endfor    
+  else 
     for i = 1:nplots,
       tstr = "tmp = [arg1(:,i)";
       for j = 2:ndata,
-	tstr = [tstr, sprintf(", arg%d(:,i)", j)];
+       tstr = [tstr, sprintf(", arg%d(:,i)", j)];
       endfor
       tstr = [tstr, "];"];
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
     endfor
   endif
+    
+endfunction    
+    
 
-  ## if (ndata == 2)
-  ##   for i = 1:nplots,
-  ##     tmp = [(1:len)', arg1(:,i), arg2(:,i)];
-  ##     cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
-  ##     eval (cmd);
-  ##   endfor
-  ## else
-  ##   for i = 1:nplots,
-  ##     tstr = "tmp =[arg1(:,i)";
-  ##     for j = 2:ndata,
-  ##       tstr = [tstr, sprintf(", arg%d(:,i)", j)];
-  ##     endif
-  ##     tstr = [tstr, "];"];
-  ##     eval (tstr);
-  ##     cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
-  ##     eval (cmd);
-  ##   endfor
-  ## endif
 
-endfunction
+
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -44,16 +44,17 @@ function fmt = __pltopt1__ (caller, opt)
 
   more_opts = 1;
 
   WITH = "w";
   LINES = "l";
   LINESPOINTS = "linesp";
   BOXERRORBARS = "boxer";
   BOXES = "boxes";
+  BOXXY = "boxxy";
   POINTS = "p";
   DOTS = "d";
   IMPULSES = "i";
   STEPS = "s";
   YERRORBARS = "yerr";
   XERRORBARS = "xerr";
   XYERRORBARS = "xyerr";
   TITLE = "title";
@@ -162,31 +163,32 @@ function fmt = __pltopt1__ (caller, opt)
       while (working)
         if (max (size (opt)) > 1)
           char = opt(1);
           opt = opt(2:length(opt));
         else
           char = opt;
           if (! strcmp (char, ";"))
             error ("%s: unfinished key label", caller);
-          end
+          endif
           more_opts = 0;
           working = 0;
         endif
         if strcmp (char, ";")
           working = 0;
         else
           if (isempty (key_title))  # needs this to avoid empty matrix warning.
             key_title = char;
           else
             key_title = strcat (key_title, char);
           endif
         endif
       endwhile
     elseif (strcmp (char, " "))
+    elseif (isempty(char))
       ## whitespace -- do nothing.
     else
       error ("%s: unrecognized format character: '%s'", caller, char);
     endif
   endwhile
 
   ## Now create format string.
 
@@ -194,17 +196,19 @@ function fmt = __pltopt1__ (caller, opt)
 
   if (set_lines)
     if (set_points)
       fmt = strcat (fmt, " ", LINESPOINTS);
     else
       fmt = strcat (fmt, " ", LINES);
     endif
   elseif (set_boxes)
-    if (set_yerrbars)
+    if (set_yerrbars && set_xerrbars)
+      fmt = strcat (fmt, " ", BOXXY);
+    elseif (set_yerrbars )
       fmt = strcat (fmt, " ", BOXERRORBARS);
     else
       fmt = strcat (fmt, " ", BOXES);
     endif
   elseif (set_points)
     fmt = strcat (fmt, " ", POINTS);
   elseif (set_dots)
     fmt = strcat (fmt, " ", DOTS);
@@ -218,17 +222,21 @@ function fmt = __pltopt1__ (caller, opt)
     else
         fmt = strcat (fmt, " ", YERRORBARS);
     endif
   elseif (set_xerrbars)
     fmt = strcat (fmt, " ", XERRORBARS);
   endif
 
   if (strcmp (fmt, WITH))
-    fmt = strcat (fmt, " ", LINES);
+      if(strcmp (caller, "__errplot"))
+          fmt = strcat (fmt, " ", YERRORBARS);
+      else
+          fmt = strcat (fmt, " ", LINES);
+      endif      
   endif
 
   if (set_color)
     fmt = strcat (fmt, " ", color);
     if (set_symbol)
       fmt = strcat (fmt, " ", symbol);
     endif
   elseif (set_symbol)
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -56,16 +56,19 @@
 ## For xerrorbars plot style.
 ##
 ## @item "~>"
 ## For xyerrorbars plot style.
 ##
 ## @item "#~"
 ## For boxerrorbars plot style.
 ##
+## @item "#~>"
+## For boxxyerrorbars plot style.
+##
 ## @item "n"
 ## With @code{n} in 1-6 (wraps at 8), plot color
 ##
 ## @item "nm"
 ## With @code{m} in 1-6 (wraps at 6), point style (only valid for @code{"@"} or
 ## @code{"-@"})
 ##
 ## @item @var{c}
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000, Teemu Ikonen
+## Copyright (C) 2000-2002 Teemu Ikonen
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
@@ -111,75 +111,15 @@
 ## Keywords: errorbar, plotting
 
 function errorbar (varargin)
 
   if (nargin < 2)
     usage ("errorbar (...)");
   endif
 
-  save_hold = ishold;
-  unwind_protect
-    if (! ishold)
-      clg ()
-    endif
-    hold ("on");
-    k = 1;
-    while (nargin)
-      a = varargin{k++};
-      nargin--;
-      if (is_vector (a))
-	a = a(:);
-      elseif (is_matrix (a));
-	;
-      else
-	usage ("errorbar (...)");
-      endif
-      sz = size (a);
-      ndata = 1;
-      arg1 = a;
-      fmt = " ";
-      while (nargin)
-	nargin--;
-	a = varargin{k++};
-	if (isstr (a))
-	  fmt = a;
-	  cmd = "__errplot__ (arg1";
-	  for i = 2:ndata,
-	    cmd = [cmd, sprintf(", arg%d",i)];
-	  endfor
-	  cmd = [cmd, ", fmt);"];
-	  eval (cmd);
-	  break;
-	elseif (is_vector (a))
-	  a = a(:);
-	elseif (is_matrix (a))
-	  ;
-	else
-	  error ("wrong argument types");
-	endif
-	if (size (a) != sz)
-	  error ("argument sizes do not match");
-	endif
-	ndata++;
-	eval (sprintf ("arg%d = a;", ndata));
-	if (ndata > 6)
-	  error ("too many arguments to a plot");
-	endif
-      endwhile
-    endwhile
-
-    if (! isstr (a))
-      fmt = " ";
-      cmd = "__errplot__(arg1";
-      for i = 2:ndata,
-	cmd = [cmd, sprintf(", arg%d",i)];
-      endfor
-      cmd = [cmd, ", fmt);"];
-      eval (cmd);
-    endif
-  unwind_protect_cleanup
-    if (! save_hold)
-      hold ("off");
-    endif
-  end_unwind_protect
+  gset nologscale x;
+  gset nologscale y;
+  gset nopolar;
+    
+  __errcomm__ ("errorbar", varargin);
 
 endfunction
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -89,31 +89,16 @@
 ## Set linespoints plot style.
 ##
 ## @item ^
 ## Set impulses plot style.
 ##
 ## @item L
 ## Set steps plot style.
 ##
-## @item "#"
-## For boxes plot style.
-##
-## @item "~"
-## For yerrorbars plot style.
-##
-## @item ">"
-## For xerrorbars plot style.
-##
-## @item "~>"
-## For xyerrorbars plot style.
-##
-## @item "#~"
-## For boxerrorbars plot style.
-##
 ## @item @var{n}
 ## Interpreted as the plot color if @var{n} is an integer in the range 1 to
 ## 6.
 ##
 ## @item @var{nm}
 ## If @var{nm} is a two digit integer and @var{m} is an integer in the
 ## range 1 to 6, @var{m} is interpreted as the point style.  This is only
 ## valid in combination with the @code{@@} or @code{-@@} specifiers.
