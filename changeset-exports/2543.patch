# HG changeset patch
# User jwe
# Date 848458982 0
#      Wed Nov 20 03:03:02 1996 +0000
# Node ID 050924aee81a80a62b7ccca06ba4481c17585560
# Parent  484977eb65ad18ebd3cc6d4b862a49813c3ef168
[project @ 1996-11-20 03:03:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,14 @@
 Tue Nov 19 12:01:13 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lex.l (plot_style_token): Add new plot styles for gnuplot 3.6.
-	* pt-plot.cc (subplot_style::errorbars): Recognize more errorbar
-	plot types.
+	* pt-plot.cc (subplot_style::columns_ok): Rename from
+	subplot_style::errorbars. Recognize more styles and do a better
+	job of diagnosing column number/style mismatches.
 
 	* sighandlers.cc (my_friendly_exit): If we are called twice, try
 	to remove the signal handler for SIGABRT and the call abort ().
 
 	* help.cc (Ftype): If a function is defined from a file and
 	transformed text has not been requested, just print the contents
 	of the file.
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -594,25 +594,43 @@ subplot_style::print (ostrstream& plot_b
 	}
     }
   else
     return -1;
 
   return 0;
 }
 
-int
-subplot_style::errorbars (void)
+bool
+subplot_style::columns_ok (int nc)
 {
-  return (almost_match ("boxerrorbars", sp_style, 5, 0)
-	  || almost_match ("boxxyerrorbars", sp_style, 4, 0)
-	  || almost_match ("errorbars", sp_style, 1, 0)
-	  || almost_match ("xerrorbars", sp_style, 2, 0)
-	  || almost_match ("xyerrorbars", sp_style, 2, 0)
-	  || almost_match ("yerrorbars", sp_style, 1, 0));
+  bool retval = true;
+
+  if ((almost_match ("boxes", sp_style, 5, 0) && nc != 3)
+      || (almost_match ("boxerrorbars", sp_style, 5, 0)
+	  && (! (nc == 3 || nc == 4 || nc == 5)))
+      || ((almost_match ("boxxyerrorbars", sp_style, 4, 0)
+	   || almost_match ("xyerrorbars", sp_style, 2, 0))
+	  && (! (nc == 4 || nc == 6 || nc == 7)))
+      || ((almost_match ("candlesticks", sp_style, 1, 0)
+	   || almost_match ("financebars", sp_style, 2, 0))
+	  && nc != 5)
+      || ((almost_match ("errorbars", sp_style, 1, 0)
+	   || almost_match ("xerrorbars", sp_style, 1, 0)
+	   || almost_match ("yerrorbars", sp_style, 1, 0))
+	  && (! (nc == 3 || nc == 4))))
+    {
+      error
+	("invalid number of data columns = %d specified for plot style `%s'",
+	 nc, sp_style.c_str ());
+
+      retval = false;
+    }
+
+  return retval;
 }
 
 void
 subplot_style::accept (tree_walker& tw)
 {
   tw.visit_subplot_style (*this);
 }
 
@@ -642,27 +660,20 @@ subplot::extract_plot_data (int ndim, oc
       if (error_state)
 	return octave_value ();
     }
   else
     {
       retval = data;
     }
 
-  if (ndim == 2 && sp_style_clause && sp_style_clause->errorbars ())
-    {
-      int nc = retval.columns ();
+  int nc = retval.columns ();
 
-      if (nc < 3 || nc > 6)
-	{
-	  error ("plots with errorbars require 3 to 6 columns of data");
-	  error ("but %d were provided", nc);
-	  return octave_value ();
-	}
-    }
+  if (ndim == 2 && sp_style_clause && ! sp_style_clause->columns_ok (nc))
+    return octave_value ();
 
   return retval;
 }
 
 int
 subplot::handle_plot_data (int ndim, ostrstream& plot_buf)
 {
   if (sp_plot_data)
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -209,17 +209,17 @@ public:
   subplot_style (const string& s = string (),
 		 tree_expression *lt = 0, tree_expression *pt = 0)
     : sp_style (s), sp_linetype (lt), sp_pointtype (pt) { }
 
   ~subplot_style (void);
 
   int print (ostrstream& plot_buf);
 
-  int errorbars (void);
+  bool columns_ok (int nc);
 
   string style (void) { return sp_style; }
 
   tree_expression *linetype (void) { return sp_linetype; }
 
   tree_expression *pointtype (void) { return sp_pointtype; }
 
   void accept (tree_walker& tw);
