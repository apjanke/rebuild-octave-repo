# HG changeset patch
# User jwe
# Date 1183059762 0
#      Thu Jun 28 19:42:42 2007 +0000
# Node ID a6c8000f113ec4cc84f7eb1ffe17b12c367b953f
# Parent  6373d320a9572ab47c95c67ac3e2f97f3ec3ce5c
[project @ 2007-06-28 19:42:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2007-06-28  John W. Eaton  <jwe@octave.org>
 
+	* ov-cell.cc (octave_cell::subsasgn): Given x = {}, convert to
+	struct for assignments like x(1).f = val;
+
+	* oct-stream.cc (octave_scan_1): New function
+	(octave_scan): Use it.  Handle fmt.width.
+
 	* graphics.h (axes::axes_properties::visible): New data member.
 	* graphics.cc (axes::axes_properties::axes_properties, 
 	axes::axes_properties::set, axes::axes_properties::get, 
 	axes::axes_properties::factory_defaults): Handle visible property.
 
 2007-06-27  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.h (color_values::color_values): Arg is now std:string
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1042,22 +1042,19 @@ octave_base_stream::gets (octave_idx_typ
 #if defined (__GNUG__) && ! defined (CXX_ISO_COMPLIANT_LIBRARY)
 
 #define OCTAVE_SCAN(is, fmt, arg) is.scan ((fmt).text, arg)
 
 #else
 
 #define OCTAVE_SCAN(is, fmt, arg) octave_scan (is, fmt, arg)
 
-// FIXME -- this needs to be fixed to handle formats which
-// specify a maximum width.
-
 template <class T>
 std::istream&
-octave_scan (std::istream& is, const scanf_format_elt& fmt, T* valptr)
+octave_scan_1 (std::istream& is, const scanf_format_elt& fmt, T* valptr)
 {
   T& ref = *valptr;
 
   switch (fmt.type)
     {
     case 'o':
       is >> std::oct >> ref >> std::dec;
       break;
@@ -1103,16 +1100,40 @@ octave_scan (std::istream& is, const sca
     default:
       is >> ref;
       break;
     }
 
   return is;
 }
 
+template <class T>
+std::istream&
+octave_scan (std::istream& is, const scanf_format_elt& fmt, T* valptr)
+{
+  if (fmt.width)
+    {
+      // Limit input to fmt.width characters by reading into a
+      // temporary stringstream buffer.
+
+      std::string tmp;
+
+      is.width (fmt.width);
+      is >> tmp;
+
+      std::istringstream ss (tmp);
+
+      octave_scan_1 (ss, fmt, valptr);
+    }
+  else
+    octave_scan_1 (is, fmt, valptr);
+
+  return is;
+}
+
 // Note that this specialization is only used for reading characters, not 
 // character strings. See BEGIN_S_CONVERSION for details.
 
 template<>
 std::istream&
 octave_scan<> (std::istream& is, const scanf_format_elt& /* fmt */,
 	       char* valptr)
 {
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -132,30 +132,44 @@ octave_cell::subsasgn (const std::string
   octave_value t_rhs = rhs;
 
   if (n > 1)
     {
       switch (type[0])
 	{
 	case '(':
 	  {
-	    octave_value tmp = do_index_op (idx.front (), true);
+	    if (is_empty () && type[1] == '.')
+	      {
+		// Allow conversion of empty cell array to some other
+		// type in cases like
+		//
+		//  x = []; x(i).f = rhs
 
-	    if (! tmp.is_defined ())
-	      tmp = octave_value::empty_conv (type.substr (1), rhs);
+		octave_value tmp = octave_value::empty_conv (type, rhs);
 
-	    if (! error_state)
+		return tmp.subsasgn (type, idx, rhs);
+	      }
+	    else
 	      {
-		std::list<octave_value_list> next_idx (idx);
+		octave_value tmp = do_index_op (idx.front (), true);
 
-		next_idx.erase (next_idx.begin ());
+		if (! tmp.is_defined ())
+		  tmp = octave_value::empty_conv (type.substr (1), rhs);
 
-		tmp.make_unique ();
+		if (! error_state)
+		  {
+		    std::list<octave_value_list> next_idx (idx);
 
-		t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
+		    next_idx.erase (next_idx.begin ());
+
+		    tmp.make_unique ();
+
+		    t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
+		  }
 	      }
 	  }
 	  break;
 
 	case '{':
 	  {
 	    octave_value tmp = do_index_op (idx.front (), true);
 
