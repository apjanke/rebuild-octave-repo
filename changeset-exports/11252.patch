# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1289772105 0
#      Sun Nov 14 22:01:45 2010 +0000
# Node ID d048ce3f7cefebfd5c71a20adaf63f440915a648
# Parent  77989197a3c7a2b14e9475c2643b7dabab550d62
Replace "delete" with "del" in DOS shell commands.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-11-14  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* plot/print.m: Use "del" instead of "delete" in DOS shell, and
+	replace	forward slashes with backslashes.
+	* plot/__gnuplot_print__.m: Likewise.
+
 2010-11-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/__all_opts__.m: Ensure that the array is always
 	case-insensitively sorted.
 
 2010-11-13  John W. Eaton  <jwe@octave.org>
 
 	* plot/gnuplot_drawnow.m (have_non_legend_axes): New function.
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -52,17 +52,17 @@ function opts = __gnuplot_print__ (opts)
   case {"eps", "eps2", "epsc", "epsc2"}
     if (any (strcmp (opts.devopt, {"eps", "epsc"})))
       gp_opts = sprintf ("%s level1", gp_opts);
     endif
     if (opts.tight_flag || ! isempty (opts.preview))
       tmp_file = strcat (tmpnam (), ".eps");
       eps_drawnow (opts, tmp_file, gp_opts);
       if (dos_shell)
-        cleanup = sprintf (" & delete %s", tmp_file);
+        cleanup = sprintf (" & del %s", strrep (tmp_file, '/', '\'));
       else
         cleanup = sprintf (" ; rm %s", tmp_file);
       endif
       pipeline = {sprintf("%s %s",
                           opts.epstool_cmd (opts, tmp_file, opts.name),
                           cleanup)};
     else
       eps_drawnow (opts, opts.name, gp_opts);
@@ -118,17 +118,17 @@ function opts = __gnuplot_print__ (opts)
     [cmd_gs, cmd_cleanup] = __ghostscript__ (opts.ghostscript); 
     if (opts.send_to_printer || isempty (opts.name))
       cmd_lpr = opts.lpr_cmd (opts);
       cmd = sprintf ("%s | %s", cmd_gs, cmd_lpr);
     else
       cmd = sprintf ("%s", cmd_gs);
     endif
     if (dos_shell)
-      cmd = sprintf ("%s & delete %s", cmd, opts.ghostscript.source);
+      cmd = sprintf ("%s & del %s", cmd, strrep (opts.ghostscript.source, '/', '\'));
     else
       cmd = sprintf ("%s ; rm %s", cmd, opts.ghostscript.source);
     endif
     if (! isempty (cmd_cleanup))
       if (dos_shell)
         pipeline = {sprintf("%s & %s", cmd, cmd_cleanup)};
       else
         pipeline = {sprintf("%s ; %s", cmd, cmd_cleanup)};
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -395,46 +395,46 @@ endfunction
 
 function cmd = epstool (opts, filein, fileout)
   ## As epstool does not work with pipes, a subshell is used to
   ## permit piping. Since this solution does not work with the DOS
   ## command shell, the -tight and -preview options are disabled if
   ## output must be piped.
 
   ## DOS Shell:
-  ##   copy con <filein> & epstool -bbox -preview-tiff <filein> <fileout> & delete <filein>
+  ##   copy con <filein> & epstool -bbox -preview-tiff <filein> <fileout> & del <filein>
   ## Unix Shell;
   ##   cat > <filein> ; epstool -bbox -preview-tiff <filein> <fileout> ; rm <filein>
 
   dos_shell = (ispc () && ! isunix ());
 
   cleanup = "";
   if (nargin < 3)
     fileout = opts.name;
   elseif (isempty (fileout))
     fileout = "-";
   endif
 
   if (nargin < 2 || strcmp (filein, "-") || isempty (filein))
     pipein = true;
     filein = strcat (tmpnam (), ".eps");
     if (dos_shell)
-      cleanup = sprintf ("& delete %s ", filein);
+      cleanup = sprintf ("& del %s ", strrep (filein, '/', '\'));
     else
       cleanup = sprintf ("; rm %s ", filein);
     endif
   else
     pipein = false;
     filein = strcat ("'", strtrim (filein), "'");
   endif
   if (strcmp (fileout, "-"))
     pipeout = true;
     fileout = strcat (tmpnam (), ".eps");
     if (dos_shell)
-      cleanup = horzcat (cleanup, sprintf ("& delete %s ", fileout));
+      cleanup = horzcat (cleanup, sprintf ("& del %s ", strrep (fileout, '/', '\')));
     else
       cleanup = horzcat (cleanup, sprintf ("; rm %s ", fileout));
     endif
   else
     pipeout = false;
     fileout = strcat ("'", strtrim (fileout), "'");
   endif
 
