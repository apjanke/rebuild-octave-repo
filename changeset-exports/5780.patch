# HG changeset patch
# User jwe
# Date 1146168228 0
#      Thu Apr 27 20:03:48 2006 +0000
# Node ID cbf717bf81507a7952e61ff05e2b0fcc5466e345
# Parent  12eeebfa7ead9b9b511f7de540b295eed3618897
[project @ 2006-04-27 20:02:30 by jwe]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -5818,17 +5818,17 @@ SparseComplexMatrix::fsolve (SparseType 
 #else
 		  for (octave_idx_type i = 0; i < b_nr; i++)
 		    Bz[i] = b.elem (i, j);
 
 		  status = UMFPACK_ZNAME (solve) (UMFPACK_A, Ap,
 					     Ai,
 					     reinterpret_cast<const double *> (Ax), 
 					     NULL,
-					     reinterpret_cast<double *>, (&Xx[iidx]), 
+					     reinterpret_cast<double *> (&Xx[iidx]), 
 					     NULL,
 					     reinterpret_cast<const double *> (Bz),
 					     NULL, Numeric, 
 					     control, info);
 #endif
 
 		  if (status < 0)
 		    {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,67 @@
+2006-04-27  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (Fexist): Fix doc string.
+
+	* help.cc (simple_help): No need to handle built-in constants now.
+	* variables.cc (do_who): Likewise.
+	(symbol_exist): Likewise.
+	(link_to_builtin_or_function): Likewise.
+
+	* symtab.cc (SYMBOL_DEF::type_as_string): Likewise.
+	(record::read_only_error): Likewise.
+	(SYMBOL_DEF::type): Likewise.
+	(record::variable_reference): Likewise.
+	(symbol_record::define_builtin_const): Delete function.
+
+	* symtab.h (symbol_record::define_builtin_const): Delete decl.
+	(symbol_record::symbol_def::is_constant): Delete function.
+	(symbol_record::symbol_def::is_builtin_constant): Delete function.
+	(symbol_record::symbol_def::is_constant): Delete function.
+	(symbol_record::is_builtin_constant): Delete function.
+	(SYMTAB_ALL_TYPES): No need to handle builtin-constants now.
+	(symbol_record::TYPE): Remove BUILTIN_CONSTANT from enum.
+	(symbol_record): 
+
+	* defun.cc (install_builtin_constant): Delete function.
+	* defun-int.h (install_builtin_constant): Delete decl.
+
+	* variables.cc (bind_builtin_constant): Delete function.
+	* variables.h (bind_builtin_constant): Delete decl.
+
+	* defun-int.h (DEFCONST, DEFCONSTX, DEFCONST_INTERNAL,
+	DEFCONSTX_INTERNAL): Delete definitions.
+
+	* sighandlers.cc (FSIG): New function to replace DEFCONST in
+	symbols_of_sighandlers. 
+
+	* octave.cc (intern_argv): Set octave_argv instead of calling
+	bind_builtin_variable here.
+	(Fargv, Fprogram_invocation_name, Fprogram_name): New functions to
+	replace DEFCONSTs in symbols_of_toplvev in toplev.cc.
+	(octave_program_invocation_name, octave_program_name):	
+	New static variables.
+	(execute_command_line_file): Use unwind_protect_str to protect
+	octave_program_invocation_name, octave_program_name instead of
+	using a restore function.
+	(restore_program_name): Delete.
+
+	* defaults.cc (FOCTAVE_HOME): New function to replace DEFCONST in
+	symbols_of_defaults.
+
 2006-04-27  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc (octregexp): Fix for infinite loop in
 	regexp. Include news regexp arguments, and associated tests.
 
+2006-04-26  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc: Also instantiate do_read functions for boolNDArray.
+
 2006-04-26  Bill Denney  <denney@seas.upenn.edu>
 
  	* pager.cc (Fterminal_size): Add list_in_columns to @seealso.
 
 2006-04-26  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc (Ffilesep): New function to replace DEFCONST in
 	symbols_of_dirfns.
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -729,23 +729,32 @@ variable @code{LOADPATH}.\n\
 @end defvr");
   
   DEFVAR (IMAGEPATH, OCTAVE_IMAGEPATH, imagepath,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} IMAGEPATH\n\
 A colon separated list of directories in which to search for image\n\
 files.\n\
 @end defvr");
+}
 
-  DEFCONST (OCTAVE_HOME, Voctave_home,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Constant} OCTAVE_HOME\n\
-The name of the top-level Octave installation directory.\n\
-@end defvr");
+DEFUN (OCTAVE_HOME, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} OCTAVE_HOME ()\n\
+Return the name of the top-level Octave installation directory.\n\
+@end deftypefn")
+{
+  octave_value retval;
 
+  if (args.length () == 0)
+    retval = Voctave_home;
+  else
+    print_usage ("OCTAVE_HOME");
+
+  return retval;
 }
 
 DEFUNX ("OCTAVE_VERSION", FOCTAVE_VERSION, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} OCTAVE_VERSION ()\n\
 Return the version number of Octave, as a string.\n\
 @end deftypefn")
 {
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -49,20 +49,16 @@ install_builtin_function (octave_builtin
 
 extern void
 install_builtin_variable (const std::string& n, const octave_value& v,
 			  bool p, bool e,
 			  symbol_record::change_function chg_fcn,
 			  const std::string& h);
 
 extern void
-install_builtin_constant (const std::string& n, const octave_value& v,
-			  bool p, const std::string& h);
-
-extern void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
 		      const octave_shlib& shl,
 		      const std::string& doc, bool is_text_fcn = false);
 
 extern void
 alias_builtin (const std::string& alias, const std::string& name);
 
 #define DECLARE_FUNX(name, args_name, nargout_name) \
@@ -111,30 +107,16 @@ typedef bool (*octave_dld_fcn_installer)
 //     this variable is given a new value.  It can be 0 if there is no
 //     function to call.  See also the code in user-prefs.cc.
 //
 //   doc is the simple help text for this variable.
 
 #define DEFVAR(name, defn, chg_fcn, doc) \
   DEFVAR_INTERNAL (#name, SBV_ ## name, defn, false, chg_fcn, doc)
 
-// Define a builtin constant `name' (which may be redefined, but will
-// retain its original value when cleared) and also an alias to it
-// called `__name__' (which may not be redefined).
-
-#define DEFCONST(name, defn, doc) \
-  DEFCONST_INTERNAL (name, defn, doc)
-
-// This one can be used when `name' cannot be used directly (if it is
-// already defined as a macro).  In that case, name is already a
-// quoted string, and the name of the structure must to be passed too.
-
-#define DEFCONSTX(name, sname, defn, doc) \
-  DEFCONSTX_INTERNAL (name, sname, defn, doc)
-
 // MAKE_BUILTINS is defined to extract function names and related
 // information and create the *.df files that are eventually used to
 // create the builtins.cc file.
 
 #if defined (MAKE_BUILTINS)
 
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
@@ -172,26 +154,16 @@ typedef bool (*octave_dld_fcn_installer)
     XDEFALIAS_INTERNAL(alias, name) \
   END_INSTALL_BUILTIN
 
 #define DEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
   END_INSTALL_BUILTIN
 
-#define DEFCONST_INTERNAL(name, defn, doc) \
-  BEGIN_INSTALL_BUILTIN \
-    XDEFCONST_INTERNAL(name, defn, doc) \
-  END_INSTALL_BUILTIN
-
-#define DEFCONSTX_INTERNAL(name, sname, defn, doc) \
-  BEGIN_INSTALL_BUILTIN \
-    XDEFCONST_INTERNAL(name, defn, doc) \
-  END_INSTALL_BUILTIN
-
 #define DEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 			      d_c_map, c_c_map, lo, hi, \
 			      ch_map_flag, can_ret_cmplx_for_real, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 		           d_c_map, c_c_map, lo, hi, \
 			   ch_map_flag, can_ret_cmplx_for_real, doc) \
   END_INSTALL_BUILTIN
@@ -221,22 +193,16 @@ typedef bool (*octave_dld_fcn_installer)
   install_builtin_variable (name, octave_value (defn), protect, \
 			    (chg_fcn != 0), chg_fcn, doc)
 
 // How builtin variables are actually installed.
 
 #define INSTALL_CONST(name, sname, defn, protect, doc) \
   install_builtin_constant (name, octave_value (defn), protect, doc)
 
-#define DEFCONST_INTERNAL(name, defn, doc) \
-  INSTALL_CONST (#name, SBV_ ## name, defn, false, doc);
-
-#define DEFCONSTX_INTERNAL(name, sname, defn, doc) \
-  INSTALL_CONST (name, sname, defn, false, doc);
-
 // How mapper functions are actually installed.
 
 // FIXME -- Really want to avoid the following casts, since
 // (as always with casts) it may mask some real errors...
 
 #define DEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 			      d_c_map, c_c_map, lo, hi, \
 			      ch_map_flag, can_ret_cmplx_for_real, doc) \
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -122,23 +122,16 @@ install_builtin_function (octave_builtin
   sym_rec->unprotect ();
   sym_rec->define (new octave_builtin (f, name, doc), t);
   sym_rec->document (doc);
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
-install_builtin_constant (const std::string& name, const octave_value& val,
-			  bool protect, const std::string& help)
-{
-  bind_builtin_constant (name, val, protect, false, help);
-}
-
-void
 install_builtin_variable (const std::string& name, const octave_value& value,
 			  bool protect, bool eternal,
 			  symbol_record::change_function chg_fcn,
 			  const std::string& doc)
 {
   bind_builtin_variable (name, value, protect, eternal, chg_fcn, doc);
 }
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -513,18 +513,16 @@ simple_help (void)
   display_names_from_help_list (octave_stdout, operator_help (),
 				"operators");
 
   display_names_from_help_list (octave_stdout, keyword_help (),
 				"reserved words");
 
   // FIXME -- is this distinction needed?
 
-  LIST_SYMBOLS (symbol_record::BUILTIN_CONSTANT, "built-in constants");
-
   LIST_SYMBOLS (symbol_record::BUILTIN_VARIABLE, "built-in variables");
 
   LIST_SYMBOLS (symbol_record::COMMAND, "commands");
 
   LIST_SYMBOLS (symbol_record::MAPPER_FUNCTION, "mapper functions");
 
   LIST_SYMBOLS (symbol_record::BUILTIN_FUNCTION, "general functions");
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3190,16 +3190,17 @@ INSTANTIATE_DO_READ (int16NDArray);
 INSTANTIATE_DO_READ (uint16NDArray);
 INSTANTIATE_DO_READ (int32NDArray);
 INSTANTIATE_DO_READ (uint32NDArray);
 INSTANTIATE_DO_READ (int64NDArray);
 INSTANTIATE_DO_READ (uint64NDArray);
 // INSTANTIATE_DO_READ (floatNDArray);
 INSTANTIATE_DO_READ (NDArray);
 INSTANTIATE_DO_READ (charNDArray);
+INSTANTIATE_DO_READ (boolNDArray);
 
 typedef octave_value (*read_fptr) (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool,
 				   oct_mach_info::float_format ffmt, octave_idx_type&);
 
 INSTANTIATE_ARRAY (read_fptr);
 template class Array2<read_fptr>;
 
 #define FILL_TABLE_ROW(R, VAL_T) \
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -83,16 +83,23 @@ extern void install_builtins (void);
 #if !defined (HAVE_ATEXIT) && defined (HAVE_ON_EXIT)
 extern "C" int on_exit ();
 #define atexit on_exit
 #endif
 
 // The command-line options.
 static string_vector octave_argv;
 
+// The name used to invoke Octave.
+static std::string
+octave_program_invocation_name;
+
+// The last component of octave_program_invocation_name.
+static std::string octave_program_name;
+
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
 // TRUE means we read the site-wide octaverc files.
 // (--norc; --no-site-file; -f)
 static bool read_site_files = true;
 
@@ -170,31 +177,25 @@ static void
 intern_argv (int argc, char **argv)
 {
   symbol_record *nargin_sr = top_level_sym_tab->lookup ("__nargin__", true);
 
   nargin_sr->mark_as_static ();
 
   nargin_sr->define (argc-1);
 
-  Cell args;
-
   if (argc > 1)
     {
-      Array<octave_value> tmp (argc-1);
+      octave_argv.resize (argc-1);
 
       // Skip program name in argv.
       int i = argc;
       while (--i > 0)
-	tmp(i-1) = octave_value (*(argv+i));
-
-      args = Cell (tmp, argc-1, 1);
+	octave_argv[i-1] = *(argv+i);
     }
-
-  bind_builtin_constant ("argv", args, true, true);
 }
 
 static void
 initialize_pathsearch (void)
 {
   // This may seem odd, but doing it this way means that we don't have
   // to modify the kpathsea library...
 
@@ -349,53 +350,45 @@ execute_eval_option_code (const std::str
   eval_string (code, false, parse_status, 0);
 
   unwind_protect::run_frame ("execute_eval_option_code");
 
   return parse_status;
 }
 
 static void
-restore_program_name (void *)
-{
-  bind_builtin_variable ("program_invocation_name",
-			 octave_env::get_program_invocation_name ());
-
-  bind_builtin_variable ("program_name", octave_env::get_program_name ());
-}
-
-static void
 execute_command_line_file (const std::string& fname)
 {
   unwind_protect::begin_frame ("execute_command_line_file");
 
   unwind_protect_bool (interactive);
   unwind_protect_bool (reading_script_file);
   unwind_protect_bool (input_from_command_line_file);
 
   unwind_protect_str (curr_fcn_file_name);
   unwind_protect_str (curr_fcn_file_full_name);
 
-  unwind_protect::add (restore_program_name, 0);
+  unwind_protect_str (octave_program_invocation_name);
+  unwind_protect_str (octave_program_name);
 
   interactive = false;
   reading_script_file = true;
   input_from_command_line_file = true;
 
   curr_fcn_file_name = fname;
   curr_fcn_file_full_name = curr_fcn_file_name;
 
-  bind_builtin_variable ("program_invocation_name", curr_fcn_file_name);
+  octave_program_invocation_name = curr_fcn_file_name;
 
   size_t pos = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars);
   
   std::string tmp = (pos != NPOS)
     ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
 
-  bind_builtin_variable ("program_name", tmp);
+  octave_program_name = tmp;
 
   parse_and_execute (fname, false, "octave");
  
   unwind_protect::run_frame ("execute_command_line_file");
 }
 
 // Usage message with extra help.
 
@@ -485,16 +478,19 @@ maximum_braindamage (void)
 
 // You guessed it.
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_env::set_program_name (argv[0]);
 
+  octave_program_invocation_name = octave_env::get_program_invocation_name ();
+  octave_program_name = octave_env::get_program_name ();
+
   // The order of these calls is important.  The call to
   // install_defaults must come before install_builtins because
   // default variable values must be available for the variables to be
   // installed, and the call to install_builtins must come before the
   // options are processed because some command line options override
   // defaults by calling bind_builtin_variable.
 
   sysdep_init ();
@@ -741,13 +737,82 @@ octave_main (int argc, char **argv, int 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 
   return 0;
 }
 
+DEFUN (argv, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} argv ()\n\
+Return the command line arguments passed to Octave.  For example,\n\
+if you invoked Octave using the command\n\
+\n\
+@example\n\
+octave --no-line-editing --silent\n\
+@end example\n\
+\n\
+@noindent\n\
+@code{argv} would return a cell array of strings with the elements\n\
+@code{--no-line-editing} and @code{--silent}.\n\
+\n\
+If you write an executable Octave script, @code{argv} will return the\n\
+list of arguments passed to the script.  @xref{Executable Octave Programs},\n\
+for an example of how to create an executable Octave script.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = Cell (octave_argv);
+  else
+    print_usage ("argv");
+
+  return retval;
+}
+
+DEFUN (program_invocation_name, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} program_invocation_name ()\n\
+Return the name that was typed at the shell prompt to run Octave.\n\
+\n\
+If executing a script from the command line (e.g., @code{octave foo.m})\n\
+or using an executable Octave script, the program name is set to the\n\
+name of the script.  @xref{Executable Octave Programs}, for an example of\n\
+how to create an executable Octave script.\n\
+@seealso{program_name}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = octave_program_invocation_name;
+  else
+    print_usage ("program_invocation_name");
+
+  return retval;
+}
+
+DEFUN (program_name, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} program_name ()\n\
+Return the last component of of the value returned by\n\
+@code{program_invocation_name}.\n\
+@seealso{program_invocation_name}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = octave_program_name;
+  else
+    print_usage ("program_name");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -966,16 +966,36 @@ OCL_REP::wait (void)
 	      break;
 	    }
 	}
     }
 
   return retval;
 }
 
+DEFUN (SIG, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} SIG ()\n\
+Return a structure containing Unix signal names and their defined values.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    {
+      static Octave_map m = make_sig_struct ();
+
+      retval = m;
+    }
+  else
+    print_usage ("SIG");
+
+  return retval;
+}
+
 static int
 debug_on_interrupt (void)
 {
   Vdebug_on_interrupt = check_preference ("debug_on_interrupt");
 
   return 0;
 }
 
@@ -1020,21 +1040,15 @@ hangup signal.  The default value is 1.\
   DEFVAR (sigterm_dumps_octave_core, true, sigterm_dumps_octave_core,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} sigterm_dumps_octave_core\n\
 If this variable is set to a nonzero value and\n\
 @code{crash_dumps_octave_core} is also nonzero, Octave tries to save all\n\
 current variables the the file \"octave-core\" if it receives a\n\
 terminate signal.  The default value is 1.\n\
 @end defvr");
-
-  DEFCONST (SIG, make_sig_struct (),
-    "-*- texinfo -*-\n\
-@defvr {Built-in Constant} SIG\n\
-Structure of Unix signal names and their defined values.\n\
-@end defvr");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -77,18 +77,16 @@ SYMBOL_DEF::type_as_string (void) const
   if (is_user_variable ())
     retval = "user-defined variable";
   else if (is_command ())
     retval = "built-in command";
   else if (is_mapper_function ())
     retval = "built-in mapper function";
   else if (is_user_function ())
     retval = "user-defined function";
-  else if (is_builtin_constant ())
-    retval = "built-in constant";
   else if (is_builtin_variable ())
     retval = "built-in variable";
   else if (is_builtin_function ())
     retval = "built-in function";
   else if (is_dld_function ())
     retval = "dynamically-linked function";
 
   return retval;
@@ -127,19 +125,17 @@ SYMBOL_DEF::type (std::ostream& os, cons
 	  if (pr_type_info && ! quiet)
 	    os << name << " is a " << type_as_string () << ":\n\n";
 
 	  tree_print_code tpc (os, "", pr_orig_txt);
 
 	  defn->accept (tpc);
 	}
     }
-  else if (is_user_variable ()
-	   || is_builtin_variable ()
-	   || is_builtin_constant ())
+  else if (is_user_variable () || is_builtin_variable ())
     {
       if (pr_type_info && ! quiet)
 	os << name << " is a " << type_as_string () << "\n";
 
       definition.print_raw (os, true);
 
       if (pr_type_info)
 	os << "\n";
@@ -223,31 +219,16 @@ symbol_record::define_builtin_var (const
 {
   define (v, symbol_record::BUILTIN_VARIABLE);
 
   if (chg_fcn)
     chg_fcn ();
 }
 
 bool
-symbol_record::define_builtin_const (const octave_value& v)
-{
-  bool retval = false;
-
-  if (! read_only_error ("redefine"))
-    {
-      definition->define (v, symbol_record::BUILTIN_CONSTANT);
-
-      retval = true;
-    }
-
-  return retval;
-}
-
-bool
 symbol_record::define (octave_function *f, unsigned int sym_type)
 {
   bool retval = false;
 
   if (! read_only_error ("redefine"))
     {
       maybe_delete_def ();
 
@@ -363,17 +344,17 @@ symbol_record::variable_reference (void)
 	warning ("variable `%s' hides function", nm.c_str ());
       else
 	{
 	  error ("variable `%s' hides function", nm.c_str ());
 	  return octave_lvalue ();
 	}
     }
 
-  if (is_function () || is_constant ())
+  if (is_function ())
     clear ();
 
   if (! is_defined ())
     {
       if (! (is_formal_parameter () || is_linked_to_global ()))
 	link_to_builtin_variable ();
 
       if (! is_defined ())
@@ -675,17 +656,17 @@ symbol_record::print_info (std::ostream&
     os << prefix << "symbol " << name () << " is undefined\n";
 }
 
 bool
 symbol_record::read_only_error (const char *action)
 {
   if (is_read_only ())
     {
-      if (is_variable () || is_constant ())
+      if (is_variable ())
 	::error ("can't %s read-only constant `%s'", action, nm.c_str ());
       else if (is_function ())
 	::error ("can't %s read-only function `%s'", action, nm.c_str ());
       else
 	::error ("can't %s read-only symbol `%s'", action, nm.c_str ());
 
       return true;
     }
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -70,18 +70,17 @@ public:
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
       DLD_FUNCTION = 4,
       BUILTIN_FUNCTION = 8,
       COMMAND = 16,
       RAWCOMMAND = 32,
       MAPPER_FUNCTION = 64,
-      BUILTIN_VARIABLE = 128,
-      BUILTIN_CONSTANT = 256
+      BUILTIN_VARIABLE = 128
     };
 
 private:
 
   // Variables or functions.
 
   class symbol_def
   {
@@ -89,19 +88,16 @@ private:
 
     symbol_def (const octave_value& val = octave_value (),
 		unsigned int sym_type = 0)
       : symbol_type (sym_type), eternal (0), read_only (0), help_string (),
 	definition (val), count (1) { }
 
     ~symbol_def (void) { }
 
-    bool is_constant (void) const
-      { return (symbol_type & symbol_record::BUILTIN_CONSTANT); }
-
     bool is_variable (void) const
       {
 	return (symbol_type & symbol_record::USER_VARIABLE
 		|| symbol_type & symbol_record::BUILTIN_VARIABLE);
       }
 
     // It's not necessary to check for COMMAND and MAPPER_FUNCTION
     // here.  Those tags are just used as additional qualifiers for
@@ -138,19 +134,16 @@ private:
       { return (symbol_type & symbol_record::RAWCOMMAND); }      
 
     bool is_mapper_function (void) const
       { return (symbol_type & symbol_record::MAPPER_FUNCTION); }
 
     bool is_user_function (void) const
       { return (symbol_type & symbol_record::USER_FUNCTION); }
 
-    bool is_builtin_constant (void) const
-      { return (symbol_type & symbol_record::BUILTIN_CONSTANT); }
-
     bool is_builtin_variable (void) const
       { return (symbol_type & symbol_record::BUILTIN_VARIABLE); }
 
     bool is_builtin_function (void) const
       { return (symbol_type & symbol_record::BUILTIN_FUNCTION); }
 
     bool is_dld_function (void) const
       { return (symbol_type & symbol_record::DLD_FUNCTION); }
@@ -326,22 +319,16 @@ public:
     { return definition->is_user_function (); }
 
   bool is_builtin_function (void) const
     { return definition->is_builtin_function (); }
 
   bool is_dld_function (void) const
     { return definition->is_dld_function (); }
 
-  bool is_constant (void) const
-    { return definition->is_constant (); }
-
-  bool is_builtin_constant (void) const
-    { return definition->is_builtin_constant (); }
-
   bool is_variable (void) const
     { return definition->is_variable (); }
 
   bool is_user_variable (void) const
     { return definition->is_user_variable (); }
 
   bool is_builtin_variable (void) const
     { return definition->is_builtin_variable (); }
@@ -368,18 +355,16 @@ public:
   bool is_visible (void) const { return visible; }
 
   void set_change_function (change_function f) { chg_fcn = f; }
 
   void define (const octave_value& v, unsigned int sym_type = USER_VARIABLE);
 
   void define_builtin_var (const octave_value& v);
 
-  bool define_builtin_const (const octave_value& v);
-
   bool define (octave_function *f, unsigned int sym_type);
 
   void document (const std::string& h) { definition->document (h); }
 
   void clear (void);
 
   void alias (symbol_record *s, bool mark_to_clear = false);
 
@@ -506,18 +491,17 @@ private:
 
 #define SYMTAB_ALL_TYPES (symbol_record::USER_FUNCTION \
 			  | symbol_record::USER_VARIABLE \
 			  | symbol_record::DLD_FUNCTION \
 			  | symbol_record::BUILTIN_FUNCTION \
 			  | symbol_record::COMMAND \
   			  | symbol_record::RAWCOMMAND \
 			  | symbol_record::MAPPER_FUNCTION \
-			  | symbol_record::BUILTIN_VARIABLE \
-			  | symbol_record::BUILTIN_CONSTANT)
+			  | symbol_record::BUILTIN_VARIABLE)
 
 #define SYMTAB_VARIABLES (symbol_record::USER_VARIABLE \
 			  | symbol_record::BUILTIN_VARIABLE)
 
 class
 symbol_table
 {
 public:
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -922,64 +922,13 @@ void
     std::cerr << "__builtin_delete: " << ptr << std::endl;
 
   if (ptr)
     free (ptr);
 }
 
 #endif
 
-void
-symbols_of_toplev (void)
-{
-  DEFCONST (argv, ,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Constant} argv\n\
-The command line arguments passed to Octave are available in this\n\
-variable.  For example, if you invoked Octave using the command\n\
-\n\
-@example\n\
-octave --no-line-editing --silent\n\
-@end example\n\
-\n\
-@noindent\n\
-@code{argv} would be a cell array of strings with the elements\n\
-@code{--no-line-editing} and @code{--silent}.\n\
-\n\
-If you write an executable Octave script, @code{argv} will contain the\n\
-list of arguments passed to the script.  @xref{Executable Octave Programs},\n\
-for an example of how to create an executable Octave script.\n\
-@end defvr");
-
-  DEFCONST (program_invocation_name,
-	    octave_env::get_program_invocation_name (),
-    "-*- texinfo -*-\n\
-@defvr {Built-in Constant} program_invocation_name\n\
-@defvrx {Built-in Constant} program_name\n\
-When Octave starts, the value of the built-in variable\n\
-@code{program_invocation_name} is automatically set to the name that was\n\
-typed at the shell prompt to run Octave, and the value of\n\
-@code{program_name} is automatically set to the final component of\n\
-@code{program_invocation_name}.  For example, if you typed\n\
-@samp{@value{OCTAVEHOME}/bin/octave} to start Octave,\n\
-@code{program_invocation_name} would have the value\n\
-@code{\"@value{OCTAVEHOME}/bin/octave\"}, and @code{program_name} would\n\
-have the value @code{\"octave\"}.\n\
-\n\
-If executing a script from the command line (e.g., @code{octave foo.m})\n\
-or using an executable Octave script, the program name is set to the\n\
-name of the script.  @xref{Executable Octave Programs}, for an example of\n\
-how to create an executable Octave script.\n\
-@end defvr");
-
-  DEFCONST (program_name, octave_env::get_program_name (),
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} program_name\n\
-See: program_invocation_name.\n\
-@end defvr");
-
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -800,20 +800,16 @@ symbol_exist (const std::string& name, c
 	  if (not_a_struct && sr->is_builtin_function ())
 	    {
 	      retval = 5;
 	    }
 	  else if (var_ok && sr->is_builtin_variable ())
 	    {
 	      retval = 101;
 	    }
-	  else if (var_ok && sr->is_builtin_constant ())
-	    {
-	      retval = 102;
-	    }
 	}
 
       if (! retval
 	  && not_a_struct
 	  && (type == "any" || type == "file")
 	  && (sr->is_user_function () || sr->is_dld_function ()))
 	{
 	  octave_value t = sr->def ();
@@ -908,17 +904,17 @@ unique_symbol_name (const std::string& b
 
 DEFUN (exist, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} exist (@var{name}, @var{type})\n\
 Return 1 if the name exists as a variable, 2 if the name (after\n\
 appending @samp{.m}) is a function file in Octave's LOADPATH, 3 if the\n\
 name is a @samp{.oct} file in Octave's LOADPATH, 5 if the name is a\n\
 built-in function, 7 if the name is a directory, 101 if the name is\n\
-a built-in variable, 102 if the name is a built-in constant, or 103\n\
+a built-in variable, or 103\n\
 if the name is a function not associated with a file (entered on\n\
 the command line).\n\
 \n\
 Otherwise, return 0.\n\
 \n\
 This function also returns 2 if a regular file called @var{name}\n\
 exists in Octave's @code{LOADPATH}.  If you want information about\n\
 other types of files, you should use some combination of the functions\n\
@@ -1360,17 +1356,17 @@ link_to_global_variable (symbol_record *
 	}
     }
 }
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the builtin variable of the same name.
 
 // Make the definition of the symbol record sr be the same as the
-// definition of the builtin variable, constant, or function, or user
+// definition of the builtin variable or function, or user
 // function of the same name, provided that the name has not been used
 // as a formal parameter.
 
 void
 link_to_builtin_or_function (symbol_record *sr)
 {
   std::string nm = sr->name ();
 
@@ -1383,17 +1379,16 @@ link_to_builtin_or_function (symbol_reco
       tmp_sym = fbi_sym_tab->lookup (parent + ":" + nm);
     }
 
   if (! tmp_sym)
     tmp_sym = fbi_sym_tab->lookup (nm);
 
   if (tmp_sym
       && (tmp_sym->is_builtin_variable ()
-	  || tmp_sym->is_builtin_constant ()
 	  || tmp_sym->is_function ())
       && ! tmp_sym->is_formal_parameter ())
     sr->alias (tmp_sym);
 }
 
 // Force a link to a function in the current symbol table.  This is
 // used just after defining a function to avoid different behavior
 // depending on whether or not the function has been evaluated after
@@ -1533,29 +1528,25 @@ do_who (int argc, const string_vector& a
 
   if (return_list)
     {
       // FIXME -- maybe symbol_list should return a std::list
       // object instead of an Array.
 
       dim_vector dv (0, 0);
 
-      Array<symbol_record *> s1 (dv);
       Array<symbol_record *> s2 (dv);
       Array<symbol_record *> s3 (dv);
       Array<symbol_record *> s4 (dv);
       Array<symbol_record *> s5 (dv);
       Array<symbol_record *> s6 (dv);
       Array<symbol_record *> s7 (dv);
 
       if (show_builtins)
 	{
-	  s1 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_CONSTANT,
-					 SYMTAB_ALL_SCOPES);
-
 	  s2 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_VARIABLE,
 					 SYMTAB_ALL_SCOPES);
 
 	  s3 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_FUNCTION,
 					 SYMTAB_ALL_SCOPES);
 	}
 
       if (show_functions)
@@ -1571,33 +1562,30 @@ do_who (int argc, const string_vector& a
 	{
 	  s6 = curr_sym_tab->symbol_list (pats, symbol_record::USER_VARIABLE,
 					  SYMTAB_LOCAL_SCOPE);
 
 	  s7 = curr_sym_tab->symbol_list (pats, symbol_record::USER_VARIABLE,
 					  SYMTAB_GLOBAL_SCOPE);
 	}
 
-      octave_idx_type s1_len = s1.length ();
       octave_idx_type s2_len = s2.length ();
       octave_idx_type s3_len = s3.length ();
       octave_idx_type s4_len = s4.length ();
       octave_idx_type s5_len = s5.length ();
       octave_idx_type s6_len = s6.length ();
       octave_idx_type s7_len = s7.length ();
 
       octave_idx_type symbols_len
-	= s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len;
+	= s2_len + s3_len + s4_len + s5_len + s6_len + s7_len;
 
       Array<symbol_record *> symbols (dim_vector (symbols_len, 1));
 
       octave_idx_type k = 0;
 
-      symbols.insert (s1, k, 0);
-      k += s1_len;
       symbols.insert (s2, k, 0);
       k += s2_len;
       symbols.insert (s3, k, 0);
       k += s3_len;
       symbols.insert (s4, k, 0);
       k += s4_len;
       symbols.insert (s5, k, 0);
       k += s5_len;
@@ -1673,20 +1661,16 @@ do_who (int argc, const string_vector& a
     }
   else
     {
       int pad_after = 0;
 
       if (show_builtins)
 	{
 	  pad_after += fbi_sym_tab->maybe_list
-	    ("*** built-in constants:", pats, octave_stdout,
-	     show_verbose, symbol_record::BUILTIN_CONSTANT, SYMTAB_ALL_SCOPES);
-
-	  pad_after += fbi_sym_tab->maybe_list
 	    ("*** built-in variables:", pats, octave_stdout,
 	     show_verbose, symbol_record::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
 
 	  pad_after += fbi_sym_tab->maybe_list
 	    ("*** built-in functions:", pats, octave_stdout,
 	     show_verbose, symbol_record::BUILTIN_FUNCTION, SYMTAB_ALL_SCOPES);
 	}
 
@@ -1824,42 +1808,16 @@ bind_ans (const octave_value& val, bool 
     {
       sr->define (val);
 
       if (print)
 	val.print_with_name (octave_stdout, "ans");
     }
 }
 
-// Give a global constant a definition.  This will insert the symbol
-// in the global table if necessary.
-
-// How is this different than install_builtin_constant?  Are both
-// functions needed?
-
-void
-bind_builtin_constant (const std::string& name, const octave_value& val,
-		       bool protect, bool eternal, const std::string& help)
-{
-  symbol_record *sym_rec = fbi_sym_tab->lookup (name, true);
-  sym_rec->unprotect ();
-
-  std::string tmp_help = help.empty () ? sym_rec->help () : help;
-
-  sym_rec->define_builtin_const (val);
-
-  sym_rec->document (tmp_help);
-
-  if (protect)
-    sym_rec->protect ();
-
-  if (eternal)
-    sym_rec->make_eternal ();
-}
-
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const std::string& varname, const octave_value& val,
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -114,21 +114,16 @@ extern octave_value builtin_any_variable
 extern void link_to_global_variable (symbol_record *sr);
 extern void link_to_builtin_or_function (symbol_record *sr);
 
 extern void force_link_to_function (const std::string&);
 
 extern void bind_ans (const octave_value& val, bool print);
 
 extern void
-bind_builtin_constant (const std::string&, const octave_value&,
-		       bool protect = false, bool eternal = false,
-		       const std::string& help = std::string ());
-
-extern void
 bind_builtin_variable (const std::string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
 		       symbol_record::change_function f = 0,
 		       const std::string& help = std::string ());
 
 extern void mlock (const std::string&);
 extern void munlock (const std::string&);
 extern bool mislocked (const std::string&);
