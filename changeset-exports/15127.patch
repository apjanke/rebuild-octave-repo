# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344436079 14400
#      Wed Aug 08 10:27:59 2012 -0400
# Node ID 87411930d6c40e723378fae281c9e721c55758bb
# Parent  25200c04bc252803461dd82f1410a8a0c3cd857c
avoid "function declared 'noreturn' has a return statement" warning.

* configure.ac (HAVE_ATTR_DEPRECATED, HAVE_ATTR_NORETURN,
HAVE_ATTR_UNUSED): New macros, corresponding to GCC_ATTR_DEPRECATED,
GCC_ATTR_NORETURN, and GCC_ATTR_UNUSED.
* libcruft/misc/f77-fcn.c (xstopx): Use F77_NORETURN instead of
F77_RETURN.
* libcruft/misc/f77-fcn.h (F77_RETURN): New macro.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2154,18 +2154,23 @@ export F77
 
 AH_BOTTOM([
 #if !defined (GNULIB_NAMESPACE)
 #define GNULIB_NAMESPACE gnulib
 #endif
 
 #if defined (__GNUC__)
 #define GCC_ATTR_DEPRECATED __attribute__ ((__deprecated__))
+#define HAVE_ATTR_DEPRECATED
+
 #define GCC_ATTR_NORETURN __attribute__ ((__noreturn__))
+#define HAVE_ATTR_NORETURN
+
 #define GCC_ATTR_UNUSED __attribute__ ((__unused__))
+#define HAVE_ATTR_UNUSED
 #else
 #define GCC_ATTR_DEPRECATED
 #define GCC_ATTR_NORETURN
 #define GCC_ATTR_UNUSED
 #endif
 
 #define X_CAST(T, E) (T) (E)
 
diff --git a/libcruft/misc/f77-fcn.c b/libcruft/misc/f77-fcn.c
--- a/libcruft/misc/f77-fcn.c
+++ b/libcruft/misc/f77-fcn.c
@@ -55,10 +55,10 @@ F77_FUNC (xstopx, XSTOPX) (const char *s
   f77_exception_encountered = 1;
 
   /* Skip printing message if it is just a single blank character.  */
   if (s && slen > 0 && ! (slen == 1 && *s == ' '))
     (*current_liboctave_error_handler) ("%.*s", slen, s);
 
   octave_jump_to_enclosing_context ();
 
-  F77_RETURN (0)
+  F77_NORETURN (0)
 }
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -103,16 +103,21 @@ CRUFT_API extern int f77_exception_encou
 #define F77_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
 #define F77_CONST_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
 #define F77_CHAR_ARG_LEN_DEF(len)
 #define F77_CHAR_ARG_USE(s) s.ptr
 #define F77_CHAR_ARG_LEN_USE(s, len) (s.mask.len>>3)
 
 #define F77_RET_T int
 #define F77_RETURN(retval) return retval;
+#if defined (HAVE_ATTR_NORETURN)
+#define F77_NORETURN(retval)
+#else
+#define F77_NORETURN(retval) return retval;
+#endif
 
 /* FIXME -- these should work for SV1 or Y-MP systems but will
    need to be changed for others.  */
 
 typedef union
 {
   const char *const_ptr;
   char *ptr;
@@ -171,17 +176,18 @@ octave_make_cray_const_ftn_ch_dsc (const
    Fortran-style character strings.  */
 #define F77_CHAR_ARG_DEF(s, len) char *s, int len
 #define F77_CONST_CHAR_ARG_DEF(s, len) const char *s, int len
 #define F77_CHAR_ARG_LEN_DEF(len)
 #define F77_CHAR_ARG_USE(s) s
 #define F77_CHAR_ARG_LEN_USE(s, len) len
 
 #define F77_RET_T void
-#define F77_RETURN(retval)
+#define F77_RETURN(retval) return;
+#define F77_NORETURN(retval)
 
 #else
 
 /* Assume f2c-compatible calling convention.  */
 
 /* Use these macros to pass character strings from C to Fortran.  */
 #define F77_CHAR_ARG(x) x
 #define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
@@ -198,16 +204,21 @@ octave_make_cray_const_ftn_ch_dsc (const
 #define F77_CHAR_ARG_DEF(s, len) char *s
 #define F77_CONST_CHAR_ARG_DEF(s, len) const char *s
 #define F77_CHAR_ARG_LEN_DEF(len) , long len
 #define F77_CHAR_ARG_USE(s) s
 #define F77_CHAR_ARG_LEN_USE(s, len) len
 
 #define F77_RET_T int
 #define F77_RETURN(retval) return retval;
+#if defined (HAVE_ATTR_NORETURN)
+#define F77_NORETURN(retval)
+#else
+#define F77_NORETURN(retval) return retval;
+#endif
 
 #endif
 
 
 /* Build a C string local variable CS from the Fortran string parameter S
    declared as F77_CHAR_ARG_DEF(s, len) or F77_CONST_CHAR_ARG_DEF(s, len).
    The string will be cleaned up at the end of the current block.
    Needs to include <cstring> and <vector>.  */
