# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1296164810 18000
#      Thu Jan 27 16:46:50 2011 -0500
# Branch release-3-4-x
# Node ID 9086df10c460484f1c67cdbd55b0ffa3c33cba5f
# Parent  c626741871a0d8bbbd3ed7c63cb45fa82cb7f0ee
sparse matrix indexed assignment bug

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-27  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse<T>::assign (const idx_vector&, const idx_vector&,
+	const Sparse<T>&)): Allow 0x0 LHS with colon dimensions to
+	inherit dimensions from RHS.  Fix tests.  Bug #32263.
+
 2011-01-26  John W. Eaton  <jwe@octave.org>
 
 	* oct-refcount.h: Strip trailing whitespace.
 
 2011-01-24  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
 
 	* SparseQR.h (class SparseQR::SparseQR_reps): Disallow copying.
 	* Array.cc (class rec_permute_helper, class rec_index_helper,
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1853,31 +1853,61 @@ Sparse<T>::assign (const idx_vector& idx
 
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
   octave_idx_type n = rhs.rows ();
   octave_idx_type m = rhs.columns ();
 
-  if (idx_i.length (nr) == n && idx_j.length (nc) == m)
+  // FIXME -- this should probably be written more like the
+  // Array<T>::assign function...
+
+  bool orig_zero_by_zero = (nr == 0 && nc == 0);
+
+  if (orig_zero_by_zero || (idx_i.length (nr) == n && idx_j.length (nc) == m))
     {
-      if (n == 0 || m == 0)
-        return;
+      octave_idx_type nrx;
+      octave_idx_type ncx;
+
+      if (orig_zero_by_zero)
+        {
+          if (idx_i.is_colon ())
+            {
+              nrx = n;
 
-      octave_idx_type nrx = idx_i.extent (nr), ncx = idx_j.extent (nc);
+              if (idx_j.is_colon ())
+                ncx = n;
+              else
+                ncx = idx_j.extent (nc);
+            }
+          else if (idx_j.is_colon ())
+            {
+              nrx = idx_i.extent (nr);
+              ncx = m;
+            }
+        }
+      else
+        {
+          nrx = idx_i.extent (nr);
+          ncx = idx_j.extent (nc);
+        }
+
       // Try to resize first if necessary.
       if (nrx != nr || ncx != nc)
         {
           resize (nrx, ncx);
           nr = rows ();
           nc = cols ();
           // nz is preserved.
         }
 
+      if (n == 0 || m == 0)
+        return;
+
       if (idx_i.is_colon ())
         {
           octave_idx_type lb, ub;
           // Great, we're just manipulating columns. This is going to be quite
           // efficient, because the columns can stay compressed as they are.
           if (idx_j.is_colon ())
             *this = rhs; // Shallow copy.
           else if (idx_j.is_cont_range (nc, lb, ub))
@@ -2594,18 +2624,18 @@ Sparse<T>::array_value () const
 
 #### 2d indexing
 
 ## size = [2 0]
 %!test test_sparse_slice([2 0], 21, []);
 %!test test_sparse_slice([2 0], 21, 1);
 %!test test_sparse_slice([2 0], 21, 2);
 %!test test_sparse_slice([2 0], 21, [2,2]);
-%!assert(set_slice(sparse(ones([2 0])), 21, 3), sparse(2,0));  # sparse different from full
-%!assert(set_slice(sparse(ones([2 0])), 21, 4), sparse(2,0));  # sparse different from full
+%!assert(set_slice(sparse(ones([2 0])), 21, 3), sparse(3,0));
+%!assert(set_slice(sparse(ones([2 0])), 21, 4), sparse(4,0));
 %!test test_sparse_slice([2 0], 22, []);
 %!test test_sparse_slice([2 0], 22, 1);
 %!test test_sparse_slice([2 0], 22, 2);
 %!test test_sparse_slice([2 0], 22, [2,2]);
 %!assert(set_slice(sparse(ones([2 0])), 22, 3), sparse([0 0 2;0 0 2]));  # sparse different from full
 %!assert(set_slice(sparse(ones([2 0])), 22, 4), sparse([0 0 0 2;0 0 0 2]));  # sparse different from full
 
 ## size = [0 2]
@@ -2614,18 +2644,18 @@ Sparse<T>::array_value () const
 %!test test_sparse_slice([0 2], 21, 2);
 %!test test_sparse_slice([0 2], 21, [2,2]);
 %!assert(set_slice(sparse(ones([0 2])), 21, 3), sparse([0 0;0 0;2 2]));  # sparse different from full
 %!assert(set_slice(sparse(ones([0 2])), 21, 4), sparse([0 0;0 0;0 0;2 2]));  # sparse different from full
 %!test test_sparse_slice([0 2], 22, []);
 %!test test_sparse_slice([0 2], 22, 1);
 %!test test_sparse_slice([0 2], 22, 2);
 %!test test_sparse_slice([0 2], 22, [2,2]);
-%!assert(set_slice(sparse(ones([0 2])), 22, 3), sparse(0,2));  # sparse different from full
-%!assert(set_slice(sparse(ones([0 2])), 22, 4), sparse(0,2));  # sparse different from full
+%!assert(set_slice(sparse(ones([0 2])), 22, 3), sparse(0,3));
+%!assert(set_slice(sparse(ones([0 2])), 22, 4), sparse(0,4));
 
 ## size = [2 1]
 %!test test_sparse_slice([2 1], 21, []);
 %!test test_sparse_slice([2 1], 21, 1);
 %!test test_sparse_slice([2 1], 21, 2);
 %!test test_sparse_slice([2 1], 21, [2,2]);
 %!test test_sparse_slice([2 1], 21, 3);
 %!test test_sparse_slice([2 1], 21, 4);
