# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501448882 25200
#      Sun Jul 30 14:08:02 2017 -0700
# Node ID ccc4e85762ac363988437465d4648becbb0345c0
# Parent  057a894914df2bf57272a5abfa7121f2b62ff179
Overhaul vectorize() to use C++11 string functions.

* ov-fcn-inline.cc (Fvectorize): Overhaul function to use C++11 string
functions.

diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -938,46 +938,47 @@ quadv (fcn, 0, 3)
   std::string old_func;
   octave_fcn_inline *old = nullptr;
   bool func_is_string = true;
 
   if (args(0).is_string ())
     old_func = args(0).string_value ();
   else
     {
-      old = args(0).fcn_inline_value (true);
       func_is_string = false;
 
-      if (old)
-        old_func = old->fcn_text ();
-      else
+      old = args(0).fcn_inline_value (true);
+      if (! old)
         error ("vectorize: FUN must be a string or inline function");
+
+      old_func = old->fcn_text ();
     }
 
+  size_t len = old_func.length ();
   std::string new_func;
+  new_func.reserve (len + 10);
+
   size_t i = 0;
-
-  while (i < old_func.length ())
+  while (i < len)
     {
-      std::string t1 = old_func.substr (i, 1);
+      char t1 = old_func[i];
 
-      if (t1 == "*" || t1 == "/" || t1 == "\\" || t1 == "^")
+      if (t1 == '*' || t1 == '/' || t1 == '\\' || t1 == '^')
         {
-          if (i && old_func.substr (i-1, 1) != ".")
-            new_func += '.';
+          if (i && old_func[i-1] != '.')
+            new_func.push_back ('.');
 
           // Special case for ** operator.
-          if (t1 == "*" && i < (old_func.length () - 1)
-              && old_func.substr (i+1, 1) == "*")
+          if (t1 == '*' && i < (len - 1) && old_func[i+1] == '*')
             {
-              new_func += '*';
+              new_func.push_back ('*');
               i++;
             }
         }
-      new_func.append (t1);
+      new_func.push_back (t1);
       i++;
     }
 
   if (func_is_string)
     return ovl (new_func);
   else
     return ovl (new octave_fcn_inline (new_func, old->fcn_arg_names ()));
 }
