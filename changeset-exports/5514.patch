# HG changeset patch
# User jwe
# Date 1130427809 0
#      Thu Oct 27 15:43:29 2005 +0000
# Node ID e0011660696ceb5e1955974f8e21d702dc242897
# Parent  843fa0a80229c6ee892278dd8182578bf9f005e6
[project @ 2005-10-27 15:43:29 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2005-10-27  John W. Eaton  <jwe@octave.org>
+
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::tm_row_const_rep):
+	Ensure that we always have at least two dimensions here.
+	(tm_const::tm_const): Likewise.
+	(tm_const::rows, tm_const::columns): Simplify.
+	(tm_row_const::rows, tm_row_const::columns)): Simplify.
+
 2005-10-26  John W. Eaton  <jwe@octave.org>
 
 	* oct-procbuf.cc (octave_procbuf::open): Cast 0 to void * to avoid
 	new g++ warning.
 	* toplev.cc (Fsystem): Likewise.
 
 	Changes for GCC 4.1, tip from Arno J. Klaassen
 	<arno@heho.snv.jussieu.fr>:
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -62,23 +62,23 @@ tm_row_const
 private:
 
   class
   tm_row_const_rep : public octave_base_list<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
-      : count (1), dv (), all_str (false),
+      : count (1), dv (0, 0), all_str (false),
 	all_sq_str (false), all_dq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
 	all_mt (true), ok (false) { }
 
     tm_row_const_rep (const tree_argument_list& row)
-      : count (1), dv (), all_str (false), all_sq_str (false),
+      : count (1), dv (0, 0), all_str (false), all_sq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
 	all_mt (true), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
@@ -145,21 +145,18 @@ public:
   }
 
   ~tm_row_const (void)
   {
     if (rep && --rep->count == 0)
       delete rep;
   }
 
-  octave_idx_type rows (void)
-  { return (rep->dv.length () > 0 ? rep->dv(0) : 0); }
-
-  octave_idx_type cols (void)
-  { return (rep->dv.length () > 1 ? rep->dv(1) : 0); }
+  octave_idx_type rows (void) { return rep->dv(0); }
+  octave_idx_type cols (void) { return rep->dv(1); }
 
   dim_vector dims (void) { return rep->dv; }
 
   bool all_strings_p (void) const { return rep->all_str; }
   bool all_sq_strings_p (void) const { return rep->all_sq_str; }
   bool all_dq_strings_p (void) const { return rep->all_dq_str; }
   bool some_strings_p (void) const { return rep->some_str; }
   bool all_real_p (void) const { return rep->all_real; }
@@ -352,25 +349,25 @@ tm_row_const::tm_row_const_rep::eval_war
 }
 
 class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
-    : dv (), all_str (false), all_sq_str (false), all_dq_str (false),
+    : dv (0, 0), all_str (false), all_sq_str (false), all_dq_str (false),
       some_str (false), all_real (false), all_cmplx (false),
       all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
-  octave_idx_type rows (void) const { return (dv.length () > 0 ? dv.elem (0) : 0); }
-  octave_idx_type cols (void) const { return (dv.length () > 1 ? dv.elem (1) : 0); }
+  octave_idx_type rows (void) const { return dv.elem (0); }
+  octave_idx_type cols (void) const { return dv.elem (1); }
 
   dim_vector dims (void) const { return dv; }
 
   bool all_strings_p (void) const { return all_str; }
   bool all_sq_strings_p (void) const { return all_sq_str; }
   bool all_dq_strings_p (void) const { return all_dq_str; }
   bool some_strings_p (void) const { return some_str; }
   bool all_real_p (void) const { return all_real; }
