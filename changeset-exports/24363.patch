# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512578744 18000
#      Wed Dec 06 11:45:44 2017 -0500
# Node ID 4e746afab61735a98e4fcab311fb7675d84e5d60
# Parent  3fc24b792a244f43b6614b9c5f084bcadf2e4e79
don't store relative directory names in load path (bug #52598)

A similar change was made for Matlab in release 2016b.

* load-path.h, load-path.cc (load_path::dir_info::is_relative):
Delete data member.
(load_path::dir_info::initialize): Call make_absolute for all
directory names.
(load_path::dir_info::update): Eliminate handling of relative
directory names.
(load_path::find_dir, load_path::find_matching_dirs): Don't call
make_absolute for directory name.

* NEW: Note change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -61,16 +61,20 @@ Summary of important user-visible change
 
  ** The properties "BackgroundColor", "EdgeColor", "LineStyle",
     "LineWidth", and "Margin" are now implemented for text objects using
     an OpenGL toolkit.
 
  ** An initial implementation of alpha transparency has been made for
     patch and surface objects.  Printing to svg and pdf is supported.
 
+ ** All directories are now converted to absolute names when they are
+    added to the load path.  This change was made for compatibility with
+    Matlab, which was changed similarly in release 2016b.
+
  ** The following statistical functions have been moved from core
     Octave to the statistics package available from Octave Forge.
 
     table -> crosstab
 
  ** Other new functions added in 4.4:
 
       camlookat
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -492,17 +492,17 @@ namespace octave
 
         if (fs.exists () && fs.is_dir ())
           return dir;
       }
     else
       {
         for (const auto& di : dir_info_list)
           {
-            std::string dname = sys::env::make_absolute (di.dir_name);
+            std::string dname = di.dir_name;
 
             size_t dname_len = dname.length ();
 
             if (dname.substr (dname_len - 1)
                 == sys::file_ops::dir_sep_str ())
               {
                 dname = dname.substr (0, dname_len - 1);
                 dname_len--;
@@ -538,17 +538,17 @@ namespace octave
 
         if (fs.exists () && fs.is_dir ())
           retlist.push_back (dir);
       }
     else
       {
         for (const auto& di : dir_info_list)
           {
-            std::string dname = sys::env::make_absolute (di.dir_name);
+            std::string dname = di.dir_name;
 
             size_t dname_len = dname.length ();
 
             if (dname.substr (dname_len - 1)
                 == sys::file_ops::dir_sep_str ())
               {
                 dname = dname.substr (0, dname_len - 1);
                 dname_len--;
@@ -1118,69 +1118,18 @@ namespace octave
   {
     sys::file_stat fs (dir_name);
 
     if (! fs)
       {
         std::string msg = fs.error ();
         warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
       }
-    else
-      {
-        if (is_relative)
-          {
-            try
-              {
-                std::string abs_name = sys::env::make_absolute (dir_name);
-
-                const_abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
-
-                if (p != abs_dir_cache.end ())
-                  {
-                    // The directory is in the cache of all directories we have
-                    // visited (indexed by absolute name).  If it is out of date,
-                    // initialize it.  Otherwise, copy the info from the cache.
-                    // By doing that, we avoid unnecessary calls to stat that can
-                    // slow things down tremendously for large directories.
-                    const dir_info& di = p->second;
-
-                    if (fs.mtime () + fs.time_resolution ()
-                        > di.dir_time_last_checked)
-                      initialize ();
-                    else
-                      {
-                        // Copy over info from cache, but leave dir_name and
-                        // is_relative unmodified.
-                        this->abs_dir_name = di.abs_dir_name;
-                        this->dir_mtime = di.dir_mtime;
-                        this->dir_time_last_checked = di.dir_time_last_checked;
-                        this->all_files = di.all_files;
-                        this->fcn_files = di.fcn_files;
-                        this->private_file_map = di.private_file_map;
-                        this->method_file_map = di.method_file_map;
-                        this->package_dir_map = di.package_dir_map;
-                      }
-                  }
-                else
-                  {
-                    // We haven't seen this directory before.
-                    initialize ();
-                  }
-              }
-            catch (const execution_exception&)
-              {
-                // Skip updating if we don't know where we are,
-                // but don't treat it as an error.
-                interpreter::recover_from_exception ();
-              }
-          }
-        // Absolute path, check timestamp to see whether it requires re-caching
-        else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
-          initialize ();
-      }
+    else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
+      initialize ();
   }
 
   bool
   load_path::dir_info::is_package (const std::string& name) const
   {
     size_t pos = name.find ('.');
 
     if (pos == std::string::npos)
@@ -1197,49 +1146,39 @@ namespace octave
         else
           return false;
       }
   }
 
   void
   load_path::dir_info::initialize (void)
   {
-    is_relative = ! sys::env::absolute_pathname (dir_name);
+    // We only handle absolute directory names.
+
+    dir_name = sys::env::make_absolute (dir_name);
 
     dir_time_last_checked = sys::time (static_cast<time_t> (0));
 
     sys::file_stat fs (dir_name);
 
     if (fs)
       {
         method_file_map.clear ();
         package_dir_map.clear ();
 
         dir_mtime = fs.mtime ();
         dir_time_last_checked = sys::time ();
 
         get_file_list (dir_name);
 
-        try
-          {
-            std::string abs_name = sys::env::make_absolute (dir_name);
-
-            // FIXME: nothing is ever removed from this cache of
-            // directory information, so there could be some resource
-            // problems.  Perhaps it should be pruned from time to time.
-
-            abs_dir_cache[abs_name] = *this;
-          }
-        catch (const execution_exception&)
-          {
-            // Skip updating if we don't know where we are but don't treat
-            // it as an error.
-
-            interpreter::recover_from_exception ();
-          }
+        // FIXME: nothing is ever removed from this cache of directory
+        // information, so there could be some resource problems.
+        // Perhaps it should be pruned from time to time.
+
+        abs_dir_cache[dir_name] = *this;
       }
     else
       {
         std::string msg = fs.error ();
         warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
       }
   }
 
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -247,34 +247,33 @@ namespace octave
       typedef package_dir_map_type::iterator package_dir_map_iterator;
 
       // This default constructor is only provided so we can create a
       // std::map of dir_info objects.  You should not use this
       // constructor for any other purpose.
       dir_info (void) = default;
 
       dir_info (const std::string& d)
-        : dir_name (d), abs_dir_name (), is_relative (false),
-          dir_mtime (), dir_time_last_checked (), all_files (), fcn_files (),
+        : dir_name (d), abs_dir_name (), dir_mtime (),
+          dir_time_last_checked (), all_files (), fcn_files (),
           private_file_map (), method_file_map (), package_dir_map ()
       {
         initialize ();
       }
 
       dir_info (const dir_info& di) = default;
 
       ~dir_info (void) = default;
 
       dir_info& operator = (const dir_info& di) = default;
 
       void update (void);
 
       std::string dir_name;
       std::string abs_dir_name;
-      bool is_relative;
       sys::time dir_mtime;
       sys::time dir_time_last_checked;
       string_vector all_files;
       string_vector fcn_files;
       fcn_file_map_type private_file_map;
       method_file_map_type method_file_map;
       package_dir_map_type package_dir_map;
 
