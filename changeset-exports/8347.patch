# HG changeset patch
# User Brian Gough<bjg@network-theory.co.uk>
# Date 1227778104 -3600
#      Thu Nov 27 10:28:24 2008 +0100
# Node ID fa78cb8d8a5c4e418384e0bce3ec90de50ca18a4
# Parent  8302788f09dbc901e58148d5e07d3979ae39a343
corrections for typos
Here is a patch with some corrections for typos and missing/extra
words in the manual.

changeset:   8347:34fd1d1c2294
user:        Brian Gough <bjg@gnu.org>
date:        Wed Nov 26 11:00:15 2008 -0500
summary:     [docs] can not => cannot

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -291,17 +291,17 @@ Octave environment.
 @item .octaverc
 @cindex @code{.octaverc}
 This file can be used to make changes to the default Octave environment
 for a particular project.  Octave searches for this file in the current
 directory after it reads @file{~/.octaverc}.  Any use of the @code{cd}
 command in the @file{~/.octaverc} file will affect the directory that
 Octave searches for the file @file{.octaverc}.
 
-If you start Octave in your home directory, commands from from the file
+If you start Octave in your home directory, commands from the file
 @file{~/.octaverc} will only be executed once.
 @end table
 
 A message will be displayed as each of the startup files is read if you
 invoke Octave with the @code{--verbose} option but without the
 @code{--silent} option.
 
 @node Quitting Octave
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -272,17 +272,17 @@ ans =
 @{
   a = string1
   b =  1
 @}
 @end group
 @end example
 
 Furthermore, the structure array can return a comma separated list
-(@pxref{Comma Separated Lists}), if indexed by one of itself field
+(@pxref{Comma Separated Lists}), if indexed by one of its own field
 names. For example
 
 @example
 @group
 octave:3> x.a
 ans =
 
 (,
@@ -536,33 +536,33 @@ c = cell(2,2)
          @}
 @end group
 @end example
 
 Just like numerical arrays, cell arrays can be multidimensional. The
 @code{cell} function accepts any number of positive integers to describe
 the size of the returned cell array. It is also possible to set the size
 of the cell array through a vector of positive integers. In the
-following example two cell arrays of equal size is created, and the size
+following example two cell arrays of equal size are created, and the size
 of the first one is displayed
 
 @example
 c1 = cell(3, 4, 5);
 c2 = cell( [3, 4, 5] );
 size(c1)
      @result{} ans =
          3   4   5
 @end example
 
 @noindent
 As can be seen, the @code{size} function also works for cell arrays. As
 do the other functions describing the size of an object, such as
 @code{length}, @code{numel}, @code{rows}, and @code{columns}.
 
-An alternative to creating empty cell arrays, and then filling them, it
+As an alternative to creating empty cell arrays, and then filling them,  it
 is possible to convert numerical arrays into cell arrays using the
 @code{num2cell} and @code{mat2cell} functions.
 
 @DOCSTRING(cell)
 
 @DOCSTRING(iscell)
 
 @DOCSTRING(num2cell)
@@ -711,17 +711,17 @@ can appear on both the right and left ha
 example
 
 @example
 [@var{i}, @var{j}] = ceil (find (@var{x}, [], "last"));
 @end example
 
 @noindent
 where @code{@var{i}, @var{j}} is equally a comma separated list. Comma
-separated lists can not be directly manipulated by the user. However,
+separated lists cannot be directly manipulated by the user. However,
 both structures and cell arrays can be converted into comma
 separated lists, which makes them useful to keep the input arguments and
 return values of functions organized. Another example of where a comma
 separated list can be used is in the creation of a new array. If all the
 accessed elements of a cell array are scalars or column vectors, they
 can be concatenated into a new column vector containing the elements, by
 surrounding the list with @code{[} and @code{]} as in the following
 example
@@ -792,17 +792,17 @@ in @{3@} = "last";
 in @{4@} = "first";
 out = cell (4, 1);
 [out@{1:2@}] = find (in@{1 : 3@});
 [out@{3:4@}] = find (in@{[1, 2, 4]@});
 @end group
 @end example
 
 Structure arrays can equally be used to create comma separated
-lists. This is done by addresses one of the fields of a structure
+lists. This is done by addressing one of the fields of a structure
 array. For example
 
 @example
 @group
 x = ceil (randn (10, 1)); 
 in = struct ("call1", @{x, Inf, "last"@}, 
              "call2", @{x, Inf, "first"@});
 out = struct ("call1", cell (2, 1), "call2", cell (2, 1));
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -74,17 +74,17 @@ result in Octave terminating normally.
 @section Breakpoints
 
 Breakpoints can be set in any Octave function, using the @code{dbstop}
 function.
 
 @DOCSTRING(dbstop)
 
 @noindent
-Note that breakpoints can not be set in built-in functions
+Note that breakpoints cannot be set in built-in functions
 (eg. @code{sin}, etc) or dynamically loaded function (ie. oct-files). To
 set a breakpoint immediately on entering a function, the breakpoint
 should be set to line 1. The leading comment block will be ignored and
 the breakpoint will be set to the first executable statement in the
 function. For example
 
 @example
 @group
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -64,17 +64,17 @@ Does it make as much use as possible of 
 routines?  These are highly optimized and many do not carry the overhead
 of being interpreted.
 @item
 Does writing a dynamically linked function represent useful investment
 of your time, relative to staying in Octave?
 @end itemize
 
 Also, as oct- and mex-files are dynamically linked to octave, they
-introduce to possibility of having Octave abort due to coding errors in
+introduce the possibility of Octave crashing due to errors in
 the user code.  For example a segmentation violation in the user's code
 will cause Octave to abort.
 
 @menu
 * Oct-Files::                   
 * Mex-Files::                   
 * Standalone Programs::         
 @end menu
@@ -1132,17 +1132,17 @@ than what they requested.\n\
 @{
 @dots{}
 @}
 @end group
 @end example
 
 @noindent
 where, as can be seen, end line of text within the help string is
-terminated by @code{\n\} which is an an embedded new-line in the string
+terminated by @code{\n\} which is an embedded new-line in the string
 together with a C++ string continuation character.  Note that the final
 @code{\} must be the last character on the line.
 
 Octave also includes the ability to embed the test and demonstration
 code for a function within the code itself (@ref{Test and Demo Functions}).
 This can be used from within oct-files (or in fact any file) with
 certain provisos.  Firstly, the test and demo functions of Octave look
 for a @code{%!} as the first characters on a new-line to identify test
@@ -1254,17 +1254,17 @@ contain the text
 %FIRSTMEXDEMO Simple test of the functionality of a mex-file.
 @end example
 
 In this case, the function that will be executed within Octave will be
 given by the mex-file, while the help string will come from the
 m-file.  This can also be useful to allow a sample implementation of the
 mex-file within the Octave language itself for testing purposes.
 
-Although we can not have multiple entry points into a single mex-file,
+Although we cannot have multiple entry points into a single mex-file,
 we can use the @code{mexFunctionName} function to determine what name
 the mex-file was called with.  This can be used to alter the behavior of
 the mex-file based on the function name.  For example if
 
 @examplefile{myfunc.c}
 
 @noindent
 is in file @file{myfunc.c}, and it is compiled with
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -165,17 +165,17 @@ endfor
 @DOCSTRING(lasterror)
 
 @DOCSTRING(lasterr)
 
 When an error has been handled it is possible to raise it again.  This
 can be useful when an error needs to be detected, but the program should
 still abort.  This is possible using the @code{rethrow} function.  The
 previous example can now be changed to count the number of errors
-related to the @samp{*} operator, but still abort of another kind of
+related to the @samp{*} operator, but still abort if another kind of
 error occurs.
 
 @example
 number_of_errors = 0;
 for n = 1:100
   try
     @dots{}
   catch
@@ -235,17 +235,17 @@ endif
      @print{} 'a' must be non-negative. Setting 'a' to zero.
 @end example
 
 Since warnings aren't fatal to a running program, it is not possible
 to catch a warning using the @code{try} statement or something similar.
 It is however possible to access the last warning as a string using the
 @code{lastwarn} function.
 
-It is also possible to assign an identification string a a warning.
+It is also possible to assign an identification string to a warning.
 If a warning has such an ID the user can enable and disable this warning
 as will be described in the next section.  To assign an ID to a warning,
 simply call @code{warning} with two string arguments, where the first
 is the identification string, and the second is the actual warning.
 
 @DOCSTRING(warning)
 
 @DOCSTRING(lastwarn)
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -20,30 +20,30 @@
 @chapter Evaluation
 
 Normally, you evaluate expressions simply by typing them at the Octave
 prompt, or by asking Octave to interpret commands that you have saved in
 a file.
 
 Sometimes, you may find it necessary to evaluate an expression that has
 been computed and stored in a string, which is exactly what the
-@code{eval} lets you do.
+@code{eval} function lets you do.
 
 @DOCSTRING(eval)
 
 @menu
 * Calling a Function by its Name::
 * Evaluation in a Different Context::
 @end menu
 
 @node Calling a Function by its Name
 @section Calling a Function by its Name
 
 The @code{feval} function allows you to call a function from a string
-containing its name. This is useful when writing a function that need to
+containing its name. This is useful when writing a function that needs to
 call user-supplied functions. The @code{feval} function takes the name
 of the function to call as its first argument, and the remaining 
 arguments are given to the function.
 
 The following example is a simple-minded function using @code{feval}
 that finds the root of a user-supplied function of one variable using
 Newton's method.
 
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -262,17 +262,17 @@ expressions.  See also @ref{Index Expres
 @node Call by Value
 @subsection Call by Value
 
 In Octave, unlike Fortran, function arguments are passed by value, which
 means that each argument in a function call is evaluated and assigned to
 a temporary location in memory before being passed to the function.
 There is currently no way to specify that a function parameter should be
 passed by reference instead of by value.  This means that it is
-impossible to directly alter the value of function parameter in the
+impossible to directly alter the value of a function parameter in the
 calling function.  It can only change the local copy within the function
 body.  For example, the function
 
 @example
 @group
 function f (x, n)
   while (n-- > 0)
     disp (x);
@@ -619,17 +619,17 @@ comparison expressions using the boolean
 operators ``or'' (@samp{|}), ``and'' (@samp{&}), and ``not'' (@samp{!}),
 along with parentheses to control nesting.  The truth of the boolean
 expression is computed by combining the truth values of the
 corresponding elements of the component expressions.  A value is
 considered to be false if it is zero, and true otherwise.
 
 Element-by-element boolean expressions can be used wherever comparison
 expressions can be used.  They can be used in @code{if} and @code{while}
-statements.  However, if a matrix value used as the condition in an
+statements.  However,  a matrix value used as the condition in an
 @code{if} or @code{while} statement is only true if @emph{all} of its
 elements are nonzero.
 
 Like comparison operations, each element of an element-by-element
 boolean expression also has a numeric value (1 if true, 0 if false) that
 comes into play if the result of the boolean expression is stored in a
 variable, or used in arithmetic.
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -636,17 +636,17 @@ ignore the time stamps for all function 
 When a function is called Octave searches a list of directories for
 a file that contains the function declaration. This list of directories
 is known as the load path. By default the load path contains
 a list of directories distributed with Octave plus the current
 working directory. To see your current load path call the @code{path}
 function without any input or output arguments.
 
 It is possible to add or remove directories to or from the load path
-using the @code{addpath} and @code{rmpath}. As an example, the following
+using @code{addpath} and @code{rmpath}. As an example, the following
 code adds @samp{~/Octave} to the load path.
 
 @example
 addpath("~/Octave")
 @end example
 
 @noindent
 After this the directory @samp{~/Octave} will be searched for functions.
@@ -747,17 +747,17 @@ endfunction
 
 dispatch ("sin", "spsin", "sparse matrix");
 y0 = sin(eye(3));
 y1 = sin(speye(3));
 @end group
 @end example
 
 @noindent
-Which aliases the @code{spsin} to @code{sin}, but only for real sparse
+which aliases the user-defined function @code{spsin} to @code{sin}, but only for real sparse
 matrices. Note that the builtin @code{sin} already  correctly treats
 sparse matrices and so this example is only illustrative.
 
 @DOCSTRING(dispatch)
 
 @DOCSTRING(builtin)
 
 A single dynamically linked file might define several
diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -14,17 +14,17 @@
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Geometry
 @chapter Geometry
 
-Much of geometry code in Octave is based on the QHull @footnote{Barber,
+Much of geometry code in Octave is based on the QHull library@footnote{Barber,
 C.B., Dobkin, D.P., and Huhdanpaa, H.T., "The Quickhull algorithm for
 convex hulls," ACM Trans. on Mathematical Software, 22(4):469-483, Dec
 1996, @url{http://www.qhull.org}}. Some of the documentation for Qhull,
 particularly for the options that can be passed to @code{delaunay},
 @code{voronoi} and @code{convhull}, etc, is relevant to Octave users.
 
 @menu
 * Delaunay Triangulation::
@@ -140,17 +140,17 @@ function in a triangulation, and @code{t
 an N-dimensional tessellation.
 
 To identify whether a particular point represented by a vector @var{p}
 falls within one of the simplices of an N-Simplex, we can write the
 Cartesian coordinates of the point in a parametric form with respect to
 the N-Simplex.  This parametric form is called the Barycentric
 Coordinates of the point.  If the points defining the N-Simplex are given
 by @code{@var{N} + 1} vectors @var{t}(@var{i},:), then the Barycentric
-coordinates defining the point @var{p} is given by
+coordinates defining the point @var{p} are given by
 
 @example
 @var{p} = sum (@var{beta}(1:@var{N}+1) * @var{t}(1:@var{N}+1),:)
 @end example
 
 @noindent
 where there are @code{@var{N} + 1} values @code{@var{beta}(@var{i})}
 that together as a vector represent the Barycentric coordinates of the
@@ -273,17 +273,17 @@ where the point outside the tessellation
 @section Voronoi Diagrams
 
 A Voronoi diagram or Voronoi tessellation of a set of points @var{s} in
 an N-dimensional space, is the tessellation of the N-dimensional space
 such that all points in @code{@var{v}(@var{p})}, a partitions of the
 tessellation where @var{p} is a member of @var{s}, are closer to @var{p}
 than any other point in @var{s}.  The Voronoi diagram is related to the
 Delaunay triangulation of a set of points, in that the vertexes of the
-Voronoi tessellation are the center's of the circum-circles of the
+Voronoi tessellation are the centers of  the circum-circles of the
 simplicies of the Delaunay tessellation. 
 
 @DOCSTRING(voronoi)
 
 @DOCSTRING(voronoin)
 
 An example of the use of @code{voronoi} is
 
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -104,24 +104,24 @@ 3-vector corresponds to the red, green, 
 pixel.
 
 The actual meaning of the value of a pixel in a gray-scale or RGB
 image depends on the class of the matrix. If the matrix is of class
 @code{double} pixel intensities are between 0 and 1, if it is of class
 @code{uint8} intensities are between 0 and 255, and if it is of class
 @code{uint16} intensities are between 0 and 65535.
 
-A binary image is a M-by-N matrix of class @code{logical}.
+A binary image is an M-by-N matrix of class @code{logical}.
 A pixel in a binary image is black if it is @code{false} and white
 if it is @code{true}.
 
 An indexed image consists of an M-by-N matrix of integers
 and a C-by-3 color map. Each integer corresponds to an
 index in the color map, and each row in the color map corresponds to
-a RGB color. The color map must be of class @code{double} with values
+an RGB color. The color map must be of class @code{double} with values
 between 0 and 1.
 
 @DOCSTRING(gray2ind)
 
 @DOCSTRING(ind2gray)
 
 @DOCSTRING(rgb2ind)
 
@@ -160,17 +160,17 @@ between 0 and 1.
 @DOCSTRING(white)
 
 @DOCSTRING(winter)
 
 @DOCSTRING(contrast)
 
 An additional colormap is @code{gmap40}. This code map contains only
 colors with integer values of the red, green and blue components. This
-workaround a limitation on gnuplot 4.0, that does not allow the color of
+is a workaround for a limitation of gnuplot 4.0, that does not allow the color of
 line or patch objects to be set, and so @code{gmap40} is useful for
 gnuplot 4.0 users, and in particular in conjunction with the @var{bar},
 @var{barh} or @var{contour} functions.
 
 @DOCSTRING(gmap40)
 
 @node Plotting on top of Images
 @section Plotting on top of Images
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -24,17 +24,17 @@
 * Multi-dimensional Interpolation::
 @end menu
 
 @node One-dimensional Interpolation
 @section One-dimensional Interpolation
 
 Octave supports several methods for one-dimensional interpolation, most
 of which are described in this section.  @ref{Polynomial Interpolation}
-and @ref{Interpolation on Scattered Data} describes further methods.
+and @ref{Interpolation on Scattered Data} describe further methods.
 
 @DOCSTRING(interp1)
 
 There are some important differences between the various interpolation
 methods. The 'spline' method enforces that both the first and second
 derivatives of the interpolated values have a continuous derivative,
 whereas the other methods do not. This means that the results of the
 'spline' method are generally smoother. If the function to be
@@ -128,17 +128,17 @@ periodic data}
 @end float
 @end ifnotinfo
 
 In additional the support function @code{spline} and @code{lookup} that
 underlie the @code{interp1} function can be called directly.
 
 @DOCSTRING(spline)
 
-The @code{lookup} is used by other interpolation function to identify
+The @code{lookup} function is used by other interpolation functions to identify
 the points of the original data that are closest to the current point
 of interest.
 
 @DOCSTRING(lookup)
 
 @node Multi-dimensional Interpolation
 @section Multi-dimensional Interpolation
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -16,17 +16,17 @@
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Input and Output
 @chapter Input and Output
 
 Octave supports several ways of reading and writing data to or from the
 prompt or a file.  The most simple functions for data Input and Output
-(I/O) are easy to use, but only provides a limited control of how
+(I/O) are easy to use, but only provides limited control of how
 data is processed.  For more control, a set of functions modelled
 after the C standard library are also provided by Octave.
 
 @menu
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 @end menu
 
@@ -213,17 +213,17 @@ separated lists.
 
 @menu
 * Saving Data on Unexpected Exits::
 @end menu
 
 @node Saving Data on Unexpected Exits
 @subsubsection Saving Data on Unexpected Exits
 
-If Octave for some reason exits unexpected it will by default save the
+If Octave for some reason exits unexpectedly it will by default save the
 variables available in the workspace to a file in the current directory.
 By default this file is named @samp{octave-core} and can be loaded
 into memory with the @code{load} command.  While the default behaviour
 most often is reasonable it can be changed through the following
 functions.
 
 @DOCSTRING(crash_dumps_octave_core)
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -17,17 +17,17 @@
 @c <http://www.gnu.org/licenses/>.
 
 @node Linear Algebra
 @chapter Linear Algebra
 
 This chapter documents the linear algebra functions of Octave.
 Reference material for many of these functions may be found in
 Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
-1989, and in @cite{@sc{Lapack} Users' Guide}, SIAM, 1992.
+1989, and in the @cite{@sc{Lapack} Users' Guide}, SIAM, 1992.
 
 @menu
 * Techniques used for Linear Algebra::
 * Basic Matrix Functions::      
 * Matrix Factorizations::       
 * Functions of a Matrix::       
 @end menu
 
@@ -63,17 +63,17 @@ using the @sc{Lapack} xGETRF function.
 
 @item  If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a least squares solution using
 the @sc{Lapack} xGELSD function.
 @end enumerate
 
 The user can force the type of the matrix with the @code{matrix_type}
 function. This overcomes the cost of discovering the type of the matrix.
-However, it should be noted incorrectly identifying the type of the matrix
+However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
 It should be noted that the test for whether a matrix is a candidate for
 Cholesky factorization, performed above and by the @code{matrix_type}
 function, does not give a certainty that the matrix is
 Hermitian. However, the attempt to factorize the matrix will quickly
 flag a non-Hermitian matrix.
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -499,17 +499,17 @@ when converted.
 @end menu
 
 @node Integer Arithmetic
 @subsection Integer Arithmetic
 
 While many numerical computations can't be carried out in integers,
 Octave does support basic operations like addition and multiplication
 on integers. The operators @code{+}, @code{-}, @code{.*}, and @code{./}
-works on integers of the same type. So, it is possible to add two 32 bit
+work on integers of the same type. So, it is possible to add two 32 bit
 integers, but not to add a 32 bit integer and a 16 bit integer.
 
 The arithmetic operations on integers are performed by casting the
 integer values to double precision values, performing the operation, and
 then re-casting the values back to the original integer type. As the
 double precision type of Octave is only capable of representing integers
 with up to 53 bits of precision, it is not possible to perform
 arithmetic of the 64 bit integer types.
@@ -568,38 +568,38 @@ As the maximum number that can be repres
 for bit manipulation, particularly when forming masks, Octave supplies
 the function @code{bitmax}.
 
 @DOCSTRING(bitmax)
 
 This is the double precision version of the functions @code{intmax},
 previously discussed.
 
-Octave also include the basic bitwise 'and', 'or' and 'exclusive or'
+Octave also includes the basic  bitwise 'and', 'or' and 'exclusive or'
 operators.
 
 @DOCSTRING(bitand)
 
 @DOCSTRING(bitor)
 
 @DOCSTRING(bitxor)
 
-The bitwise 'not' operator is unary operator that performs a logical
+The bitwise 'not' operator is a unary operator that performs a logical
 negation of each of the bits of the value. For this to make sense, the
 mask against which the value is negated must be defined. Octave's
 bitwise 'not' operator is @code{bitcmp}.
 
 @DOCSTRING(bitcmp)
 
-Octave also includes the ability to left and right values bitwise.
+Octave also includes the ability to left-shift and right-shift values bitwise.
 
 @DOCSTRING(bitshift)
 
 Bits that are shifted out of either end of the value are lost. Octave
-also uses arithmetic shifts, where the sign bit of the value is keep
+also uses arithmetic shifts, where the sign bit of the value is kept
 during a right shift. For example
 
 @example
 @group
 bitshift (-10, -1)
 @result{} -5
 bitshift (int8 (-1), -1)
 @result{} -1
@@ -614,17 +614,17 @@ 1, 1, 1, 1, 1, 1]}.
 @section Logical Values
 
 Octave has built-in support for logical values, i.e. variables that
 are either @code{true} or @code{false}. When comparing two variables,
 the result will be a logical value whose value depends on whether or
 not the comparison is true.
 
 The basic logical operations are @code{&}, @code{|}, and @code{!},
-that corresponds to ``Logical And'', ``Logical Or'', and ``Logical
+which correspond to ``Logical And'', ``Logical Or'', and ``Logical
 Negation''. These operations all follow the rules of logic.
 
 It is also possible to use logical values as part of standard numerical
 calculations. In this case @code{true} is converted to @code{1}, and
 @code{false} to 0, both represented using double precision floating
 point numbers. So, the result of @code{true*22 - false/6} is @code{22}.
 
 Logical values can also be used to index matrices and cell arrays.
@@ -723,17 +723,17 @@ x (1, 1) = single (2)
 
 @noindent
 where @code{x} remains of the double precision type. 
 
 @node Predicates for Numeric Objects
 @section Predicates for Numeric Objects
 
 Since the type of a variable may change during the execution of a
-program, it can be necessary to type checking at run-time. Doing this
+program, it can be necessary to do type checking at run-time. Doing this
 also allows you to change the behaviour of a function depending on the
 type of the input. As an example, this naive implementation of @code{abs}
 returns the absolute value of the input if it is a real number, and the
 length of the input if it is a complex number.
 
 @example
 function a = abs (x)
   if (isreal (x))
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -33,17 +33,17 @@
 @end macro
 
 @node Object Oriented Programming
 @chapter Object Oriented Programming
 
 Octave includes the capability to include user classes, including the
 features of operator and function overloading. Equally a user class
 can be used to encapsulate certain properties of the class so that
-they can not be altered accidentally and can be set up to address the
+they cannot be altered accidentally and can be set up to address the
 issue of class precedence in mixed class operations.
 
 This chapter discussions the means of constructing a user class with
 the example of a polynomial class, how to query and set the properties
 of this class, together with the means to overload operators and
 functions.
 
 @menu
diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -279,17 +279,17 @@ external scripts, etc, called by functio
 * The INDEX file::              
 * PKG_ADD and PKG_DEL directives::  
 @end menu
 
 @node The DESCRIPTION File
 @subsection The DESCRIPTION File
 
 The @code{DESCRIPTION} file contains various information about the
-package, such as it's name, author, and version. This file has a very
+package, such as its name, author, and version. This file has a very
 simple format
 
 @noindent
 @itemize
 @item
 Lines starting with @code{#} are comments.
 
 @item
@@ -377,69 +377,69 @@ lines.
 
 @item License
 An optional short description of the used license (e.g. GPL version 3
 or newer). This is optional since the file @code{COPYING} is mandatory.
 
 @item SystemRequirements
 These are the external install dependencies of the package and are not
 checked by the package manager. This is here as a hint to the
-distribution packager. They follows the same conventions as the
+distribution packager. They follow the same conventions as the
 @code{Depends} keyword.
 
 @item BuildRequires
 These are the external build dependencies of the package and are not
 checked by the package manager. This is here as a hint to the
-distribution packager. They follows the same conventions as the 
+distribution packager. They follow the same conventions as the 
 @code{Depends} keyword. Note that in general, packaging systems such
 as @code{rpm} or @code{deb} and autoprobe the install dependencies
 from the build dependencies, and therefore the often a
 @code{BuildRequires} dependency removes the need for a
 @code{SystemRequirements} dependency.
 
 @end table
 
 @noindent
 The developer is free to add additional arguments to the 
 @code{DESCRIPTION} file for their own purposes. One further detail to
 aid the packager is that the @code{SystemRequirements} and
-@code{BuildRequires} keywords can have distribution dependent section,
+@code{BuildRequires} keywords can have a distribution dependent section,
 and the automatic build process will use these. An example of the
 format of this is
 
 @example
 BuildRequires: libtermcap-devel [Mandriva] libtermcap2-devel
 @end example
 
 @noindent
 where the first package name will be used as a default and if the
 RPMs are built on a Mandriva distribution, then the second package
 name will be used instead. 
 
 @node The INDEX file
 @subsection The INDEX file
 
-The optional @code{INDEX} file provides an categorical view of the
+The optional @code{INDEX} file provides a categorical view of the
 functions in the package. This file has a very simple format
 
 @noindent
 @itemize
 @item Lines beginning with @code{#} are comments.
 
 @item The first non-comment line should look like this
 
 @example
 toolbox >> Toolbox name
 @end example
 
 @item Lines beginning with an alphabetical character indicates a new
 category of functions.
 
 @item Lines starting with a white space character indicate that the
-function names on the line belong to last mentioned category.
+function names on the line belong to the last mentioned category.
 @end itemize
 
 @noindent
 The format can be summarized with the following example
 
 @example
 # A comment
 toolbox >> Toolbox name
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -113,17 +113,17 @@ produce two-dimensional contour plots fr
 
 @DOCSTRING(contour)
 
 @DOCSTRING(contourf)
 
 @DOCSTRING(contourc)
 
 The @code{errorbar}, @code{semilogxerr}, @code{semilogyerr}, and
-@code{loglogerr} functions produces plots with error bar markers.  For
+@code{loglogerr} functions produce plots with error bar markers.  For
 example,
 
 @example
 x = 0:0.1:10;
 y = sin (x);
 yp =  0.1 .* randn (size (x));
 ym = -0.1 .* randn (size (x));
 errorbar (x, sin (x), ym, yp);
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -31,17 +31,17 @@ represented as a vector of numbers.
 * Set Operations:: 
 @end menu
 
 @node Set Operations
 @section Set Operations
 
 Octave supports the basic set operations.  That is, Octave can compute
 the union, intersection, complement, and difference of two sets.
-Octave can also supports the @emph{Exclusive Or} set operation, and
+Octave also supports the @emph{Exclusive Or} set operation, and
 membership determination.  The functions for set operations all work in
 pretty much the same way.  As an example, assume that @code{x} and
 @code{y} contains two sets, then
 
 @example
 union(x, y)
 @end example
 
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -430,17 +430,17 @@ symmetric or @code{treeplot(etree(A+A'))
 * MathConsiderations:: Mathematical Considerations
 @end menu
 
 @node Functions, ReturnType, Operators and Functions, Operators and Functions
 @subsubsection Sparse Functions
 
 An important consideration in the use of the sparse functions of
 Octave is that many of the internal functions of Octave, such as
-@dfn{diag}, can not accept sparse matrices as an input. The sparse
+@dfn{diag}, cannot accept sparse matrices as an input. The sparse
 implementation in Octave therefore uses the @dfn{dispatch}
 function to overload the normal Octave functions with equivalent
 functions that work with sparse matrices. However, at any time the
 sparse matrix specific version of the function can be used by
 explicitly calling its function name. 
 
 The table below lists all of the sparse functions of Octave.  Note that
 the names of the 
@@ -571,17 +571,17 @@ the examples
   a6 = s ./ s;
 @end example
 
 will give. The first example of @var{s} raised to the power of 2 causes
 no problems. However @var{s} raised element-wise to itself involves a
 large number of terms @code{0 .^ 0} which is 1. There @code{@var{s} .^
 @var{s}} is a full matrix. 
 
-Likewise @code{@var{s} .^ -2} involves terms terms like @code{0 .^ -2} which
+Likewise @code{@var{s} .^ -2} involves terms like @code{0 .^ -2} which
 is infinity, and so @code{@var{s} .^ -2} is equally a full matrix.
 
 For the "./" operator @code{@var{s} ./ 2} has no problems, but 
 @code{2 ./ @var{s}} involves a large number of infinity terms as well
 and is equally a full matrix. The case of @code{@var{s} ./ @var{s}}
 involves terms like @code{0 ./ 0} which is a @code{NaN} and so this
 is equally a full matrix with the zero elements of @var{s} filled with
 @code{NaN} values.
@@ -806,17 +806,17 @@ narrow banded, triangular or diagonal ma
 calculating the condition number is significant, and can in fact
 exceed the cost of factoring the matrix. Therefore the condition
 number is not calculated in these cases, and Octave relies on simpler
 techniques to detect singular matrices or the underlying LAPACK code in
 the case of banded matrices.
 
 The user can force the type of the matrix with the @code{matrix_type}
 function. This overcomes the cost of discovering the type of the matrix.
-However, it should be noted incorrectly identifying the type of the matrix
+However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
 @DOCSTRING(normest)
 
 @DOCSTRING(onenormest)
 
 @DOCSTRING(condest)
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -28,17 +28,17 @@ control the flow of execution in Octave 
 statements start with special keywords such as @code{if} and
 @code{while}, to distinguish them from simple expressions.
 Many control statements contain other statements; for example, the
 @code{if} statement contains another statement which may or may not be
 executed.
 
 @cindex @code{end} statement
 Each control statement has a corresponding @dfn{end} statement that
-marks the end of the end of the control statement.  For example, the
+marks the end of the control statement.  For example, the
 keyword @code{endif} marks the end of an @code{if} statement, and
 @code{endwhile} marks the end of a @code{while} statement.  You can use
 the keyword @code{end} anywhere a more specific end keyword is expected,
 but using the more specific keywords is preferred because if you use
 them, Octave is able to provide better diagnostics for mismatched or
 missing end tokens.
 
 The list of statements contained between keywords like @code{if} or
@@ -242,17 +242,17 @@ switch (X)
   otherwise
     do_something_completely_different ();
 endswitch
 @end example
 
 @noindent
 This code makes the repetitive structure of the problem more explicit,
 making the code easier to read, and hence maintain. Also, if the
-variable @code{X} should change it's name, only one line would need
+variable @code{X} should change its name, only one line would need
 changing compared to one line per case when @code{if} statements are
 used.
 
 The general form of the @code{switch} statement is
 
 @example
 @group
 switch @var{expression}
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -213,17 +213,17 @@ element by element as the following exam
 @example
 GNU = "GNU's Not UNIX";
 spaces = (GNU == " ")
 @result{} spaces =
       0   0   0   0   0   1   0   0   0   1   0   0   0   0
 @end example
 
 @noindent
-To determine if two functions are identical it is therefore necessary
+To determine if two strings are identical it is therefore necessary
 to use the @code{strcmp} or @code{strncpm} functions. Similar 
 functions exist for doing case-insensitive comparisons.
 
 @DOCSTRING(strcmp)
 
 @DOCSTRING(strcmpi)
 
 @DOCSTRING(strncmp)
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -393,17 +393,17 @@ as @@var@{variable@}.
 @end example
 
 This help string must be commented in user functions, or in the help
 string of the @code{DEFUN_DLD} macro for dynamically loadable
 functions.  The important aspects of the documentation string are
 
 @table @asis
 @item -*- texinfo -*-
-This string signals Octave that the follow text is in Texinfo format,
+This string signals Octave that the following text is in Texinfo format,
 and should be the first part of any help string in Texinfo format.
 @item @@deftypefn@{class@} @dots{} @@end deftypefn
 The entire help string should be enclosed within the block defined by
 deftypefn.
 @item @@cindex index term
 This generates an index entry, and can be useful when the function is
 included as part of a larger piece of documentation.  It is ignored
 within Octave's help viewer.
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -356,17 +356,17 @@ large_matrix = zeros (4000, 4000);
 
 @noindent
 Since having this variable in memory might slow down other computations,
 it can be necessary to remove it manually from memory. The @code{clear}
 function allows this.
 
 @DOCSTRING(clear)
 
-Information about a function or variable such as it's location in the
+Information about a function or variable such as its location in the
 file system can also be acquired from within Octave. This is usually
 only useful during development of programs, and not within a program.
 
 @DOCSTRING(document)
 
 @DOCSTRING(type)
 
 @DOCSTRING(which)
diff --git a/scripts/deprecated/loadimage.m b/scripts/deprecated/loadimage.m
--- a/scripts/deprecated/loadimage.m
+++ b/scripts/deprecated/loadimage.m
@@ -14,17 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{map}] =} loadimage (@var{file})
-## Load an image file and it's associated color map from the specified
+## Load an image file and its associated color map from the specified
 ## @var{file}.  The image must be stored in Octave's image format.
 ## @seealso{saveimage, load, save}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -39,17 +39,17 @@
 ## @end group
 ## @end example
 ## @end ifnottex
 ##
 ## The above to continued to N-dimensional arrays calculating the second
 ## derivative over the higher dimensions.
 ##
 ## The spacing between evaluation points may be defined by @var{h}, which is a
-## scalar defining the spacing in all dimensions. Or alternative, the spacing
+## scalar defining the spacing in all dimensions. Or alternatively, the spacing
 ## in each dimension may be defined separately by @var{dx}, @var{dy}, etc. 
 ## Scalar spacing values give equidistant spacing, whereas vector spacing 
 ## values can be used to specify variable spacing. The length of the vectors
 ## must match the respective dimension of @var{m}. The default spacing value
 ## is 1.
 ##
 ## You need at least 3 data points for each dimension. Boundary points are
 ## calculated as the linear extrapolation of the interior points.
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {@var{zi}=} interp2 (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@var{Z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@var{Z}, @var{n})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Two-dimensional interpolation. @var{x}, @var{y} and @var{z} describe a
 ## surface function. If @var{x} and @var{y} are vectors their length
-## must correspondent to the size of @var{z}. @var{x} and @var{Yy} must be
+## must correspondent to the size of @var{z}. @var{x} and @var{y} must be
 ## monotonic. If they are matrices they  must have the @code{meshgrid} 
 ## format. 
 ##
 ## @table @code
 ## @item interp2 (@var{x}, @var{y}, @var{Z}, @var{xi}, @var{yi}, @dots{}) 
 ## Returns a matrix corresponding to the points described by the
 ## matrices  @var{XI}, @var{YI}. 
 ##
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{vi} =} interp3 (@var{x}, @var{y},@var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@var{v}, @var{m})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@var{v})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method}, @var{extrapval})
 ##
-## Perform 3-dimensional interpolation. Each element of then 3-dimensional 
+## Perform 3-dimensional interpolation. Each element of the 3-dimensional 
 ## array @var{v} represents a value at a location given by the parameters 
 ## @var{x}, @var{y}, and @var{z}. The parameters @var{x}, @var{x}, and 
 ## @var{z} are either 3-dimensional arrays of the same size as the array 
 ## @var{v} in the 'meshgrid' format or vectors. The parameters @var{xi}, etc 
 ## respect a similar format to @var{x}, etc, and they represent the points 
 ## at which the array @var{vi} is interpolated.
 ##
 ## If @var{x}, @var{y}, @var{z} are omitted, they are assumed to be 
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {@var{vi} =} interpn (@var{x1}, @var{x2}, @dots{}, @var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{m})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Perform @var{n}-dimensional interpolation, where @var{n} is at least two. 
-## Each element of then @var{n}-dimensional array @var{v} represents a value 
+## Each element of the @var{n}-dimensional array @var{v} represents a value 
 ## at a location given by the parameters @var{x1}, @var{x2}, @dots{}, @var{xn}. 
 ## The parameters @var{x1}, @var{x2}, @dots{}, @var{xn} are either 
 ## @var{n}-dimensional arrays of the same size as the array @var{v} in 
 ## the 'ndgrid' format or vectors. The parameters @var{y1}, etc respect a 
 ## similar format to @var{x1}, etc, and they represent the points at which
 ## the array @var{vi} is interpolated.
 ##
 ## If @var{x1}, @dots{}, @var{xn} are omitted, they are assumed to be 
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -29,18 +29,18 @@
 ## @code{structfun} accepts an arbitrary function @var{func} in the form of 
 ## an inline function, function handle, or the name of a function (in a 
 ## character string). In the case of a character string argument, the 
 ## function must accept a single argument named @var{x}, and it must return 
 ## a string value. If the function returns more than one argument, they are
 ## returned as separate output variables.
 ##
 ## If the param 'UniformOutput' is set to true (the default), then the function
-## must return either a single element which will be concatenated into the
-## return value. If 'UniformOutput is false, the outputs placed in a structure
+## must return a single element which will be concatenated into the
+## return value. If 'UniformOutput' is false, the outputs placed in a structure
 ## with the same fieldnames as the input structure.
 ## 
 ## @example
 ## @group
 ## s.name1 = "John Smith"; 
 ## s.name2 = "Jill Jones"; 
 ## structfun (@@(x) regexp (x, '(\w+)$', 'matches')@{1@}, s, 
 ##            'UniformOutput', false)
diff --git a/scripts/geometry/dsearch.m b/scripts/geometry/dsearch.m
--- a/scripts/geometry/dsearch.m
+++ b/scripts/geometry/dsearch.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi}, @var{s})
-## Returns the index @var{idx} or the closest point in @code{@var{x}, @var{y})}
+## Returns the index @var{idx} or the closest point in @code{@var{x}, @var{y}}
 ## to the elements @code{[@var{xi}(:), @var{yi}(:)]}. The variable @var{s} is
 ## accepted but ignored for compatibility.
 ## @seealso{dsearchn, tsearch}
 ## @end deftypefn
 
 function idx = dsearch (x, y, t, xi, yi, s)
   if (nargin < 5 || nargin > 6)
     print_usage ();
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} voronoi (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} voronoi (@var{x}, @var{y}, "plotstyle")
 ## @deftypefnx {Function File} {} voronoi (@var{x}, @var{y}, "plotstyle", @var{options})
 ## @deftypefnx {Function File} {[@var{vx}, @var{vy}] =} voronoi (@dots{})
 ## plots voronoi diagram of points @code{(@var{x}, @var{y})}.
 ## The voronoi facets with points at infinity are not drawn.
-## [@var{vx}, @var{vy}] = voronoi(...) returns the vertices instead plotting the
+## [@var{vx}, @var{vy}] = voronoi(...) returns the vertices instead of plotting the
 ## diagram. plot (@var{vx}, @var{vy}) shows the voronoi diagram.
 ##
 ## A fourth optional argument, which must be a string, contains extra options
 ## passed to the underlying qhull command.  See the documentation for the
 ## Qhull library for details.
 ##
 ## @example
 ## @group
diff --git a/scripts/image/image_viewer.m b/scripts/image/image_viewer.m
--- a/scripts/image/image_viewer.m
+++ b/scripts/image/image_viewer.m
@@ -24,17 +24,17 @@
 ## When the @code{image} or @code{imshow} function is called it will
 ## launch an external program to display the image.  The default behaviour
 ## is to use gnuplot if the installed version supports image viewing,
 ## and otherwise try the programs @code{display}, @code{xv}, and
 ## @code{xloadimage}.  Using this function it is possible to change that
 ## behaviour.
 ##
 ## When called with one input argument images will be displayed by saving
-## the image to a file and the system command @var{command} will called
+## the image to a file and the system command @var{command} will be called
 ## to view the image.  The @var{command} must be a string containing
 ## @code{%s} and possibly @code{%f}. The @code{%s} will be replaced by
 ## the filename of the image, and the @code{%f} will (if present) be
 ## replaced by the zoom factor given to the @code{image} function.
 ## For example,
 ## @example
 ## image_viewer ("eog %s");
 ## @end example
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{map}] =} rgb2ind (@var{rgb})
 ## @deftypefnx {Function File} {[@var{x}, @var{map}] =} rgb2ind (@var{r}, @var{g}, @var{b})
-## Convert and RGB image to an Octave indexed image.
+## Convert an RGB image to an Octave indexed image.
 ## @seealso{ind2rgb, rgb2ntsc}
 ## @end deftypefn
 
 ## Bugs: The color map may have duplicate entries.
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -25,17 +25,17 @@
 ## @table @code
 ## @item "img"
 ## Octave's image format.  The current colormap is also saved in the file.
 ##
 ## @item "ppm"
 ## Portable pixmap format.
 ##
 ## @item "ps"
-## PostScript format.  Note that images saved in PostScript format can not
+## PostScript format.  Note that images saved in PostScript format cannot
 ## be read back into Octave with loadimage.
 ## @end table
 ##
 ## If the fourth argument is supplied, the specified colormap will also be
 ## saved along with the image.
 ##
 ## Note: if the colormap contains only two entries and these entries are
 ## black and white, the bitmap ppm and PostScript formats are used.  If the
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{est}, @var{v}] =} condest (@var{a}, @var{t}) 
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{a}, @var{solve}, @var{solve_t}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{apply}, @var{apply_t}, @var{solve}, @var{solve_t}, @var{n}, @var{t})
 ##
-## Estimate the 1-norm condition number of a matrix matrix @var{A}
+## Estimate the 1-norm condition number of a matrix @var{A}
 ## using @var{t} test vectors using a randomized 1-norm estimator.
 ## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g. when  estimating the condition 
 ## number of @var{a} given an LU factorization, @code{condest} uses the 
 ## following functions:
 ##
 ## @table @var
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -28,17 +28,17 @@
 ## Plot a surface graphic object given matrices @var{x}, and @var{y} from 
 ## @code{meshgrid} and a matrix @var{z} corresponding to the @var{x} and 
 ## @var{y} coordinates of the surface.  If @var{x} and @var{y} are vectors,
 ## then a typical vertex  is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, 
 ## columns of @var{z} correspond to different @var{x} values and rows of 
 ## @var{z} correspond to different @var{y} values. If @var{x} and @var{y}
 ## are missing, they are constructed from size of the matrix @var{z}.
 ##
-## Any additional properties passed are assigned the the surface..
+## Any additional properties passed are assigned to the surface.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = surface (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("surface", varargin{:});
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{p}, @var{n}, @var{k}, @var{d}] =} unmkpp (@var{pp})
 ##
 ## Extract the components of a piece-wise polynomial structure @var{pp}.
 ## These are as follows:
 ##
 ## @table @asis
 ## @item @var{x}
-## Samples points.
+## Sample points.
 ## @item @var{p}
 ## Polynomial coefficients for points in sample interval. @code{@var{p}
 ## (@var{i}, :)} contains the coefficients for the polynomial over
 ## interval @var{i} ordered from highest to lowest. If @code{@var{d} >
 ## 1}, @code{@var{p} (@var{r}, @var{i}, :)} contains the coefficients for 
 ## the r-th polynomial defined on interval @var{i}. However, this is 
 ## stored as a 2-D array such that @code{@var{c} = reshape (@var{p} (:,
 ## @var{j}), @var{n}, @var{d})} gives @code{@var{c} (@var{i},  @var{r})}
diff --git a/scripts/statistics/distributions/tinv.m b/scripts/statistics/distributions/tinv.m
--- a/scripts/statistics/distributions/tinv.m
+++ b/scripts/statistics/distributions/tinv.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tinv (@var{x}, @var{n})
-## For each probability value @var{x}, compute the the inverse of the
+## For each probability value @var{x}, compute the inverse of the
 ## cumulative distribution function (CDF) of the t (Student)
 ## distribution with degrees of freedom @var{n}.  This function is
 ## analagous to looking in a table for the t-value of a single-tailed
 ## distribution.
 ## @end deftypefn
 
 ## For very large n, the "correct" formula does not really work well,
 ## and the quantiles of the standard normal distribution are used
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -14,17 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2bin (@var{n}, @var{len})
-## Return a binary number corresponding the nonnegative decimal number
+## Return a binary number corresponding to the nonnegative decimal number
 ## @var{n}, as a string of ones and zeros.  For example,
 ##
 ## @example
 ## dec2bin (14)
 ##      @result{} "1110"
 ## @end example
 ##
 ## If @var{n} is a vector, returns a string matrix, one row per value,
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -86,18 +86,18 @@ cellfun (@@atan2, @{1, 0@}, @{0, 1@})\n\
 @result{}ans = [1.57080   0.00000]\n\
 @end group\n\
 @end example\n\
 \n\
 Note that the default output argument is an array of the same size as the\n\
 input arguments.\n\
 \n\
 If the param 'UniformOutput' is set to true (the default), then the function\n\
-must return either a single element which will be concatenated into the\n\
-return value. If 'UniformOutput is false, the outputs are concatenated in\n\
+must return a single element which will be concatenated into the\n\
+return value. If 'UniformOutput' is false, the outputs are concatenated in\n\
 a cell array. For example\n\
 \n\
 @example\n\
 @group\n\
 cellfun (\"tolower(x)\", @{\"Foo\", \"Bar\", \"FooBar\"@},\n\
          \"UniformOutput\",false)\n\
 @result{} ans = @{\"foo\", \"bar\", \"foobar\"@}\n\
 @end group\n\
diff --git a/src/DLD-FUNCTIONS/dmperm.cc b/src/DLD-FUNCTIONS/dmperm.cc
--- a/src/DLD-FUNCTIONS/dmperm.cc
+++ b/src/DLD-FUNCTIONS/dmperm.cc
@@ -190,17 +190,17 @@ 16(4):303-324, 1990.\n\
 
 DEFUN_DLD (sprank, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} sprank (@var{s})\n\
 \n\
 @cindex Structural Rank\n\
 Calculates the structural rank of a sparse matrix @var{s}. Note that\n\
 only the structure of the matrix is used in this calculation based on\n\
-a Dulmage-Mendelsohn to block triangular form. As such the numerical\n\
+a Dulmage-Mendelsohn permutation to block triangular form. As such the numerical\n\
 rank of the matrix @var{s} is bounded by @code{sprank (@var{s}) >=\n\
 rank (@var{s})}. Ignoring floating point errors @code{sprank (@var{s}) ==\n\
 rank (@var{s})}.\n\
 @seealso{dmperm}\n\
 @end deftypefn")
 {
   int nargin = args.length();
   octave_value_list retval;
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -407,17 +407,17 @@ bitshift (float a, int n, int64_t mask)
 DEFUN (bitshift, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Built-in Function} {} bitshift (@var{a}, @var{k}, @var{n})\n\
 Return a @var{k} bit shift of @var{n}- digit unsigned\n\
 integers in @var{a}.  A positive @var{k} leads to a left shift.\n\
 A negative value to a right shift.  If @var{n} is omitted it defaults\n\
 to log2(bitmax)+1.\n\
-@var{n} must be in range [1,log2(bitmax)+1] usually [1,33]\n\
+@var{n} must be in the range [1,log2(bitmax)+1] usually [1,33]\n\
 \n\
 @example\n\
 bitshift (eye (3), 1)\n\
 @result{}\n\
 @group\n\
 2 0 0\n\
 0 2 0\n\
 0 0 2\n\
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -528,17 +528,17 @@ map_s_s (d_dd_fcn f, const SparseMatrix&
 
   return retval;
 }
 
 DEFUN (atan2, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
 Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
-and @var{x}.  The result is in range -pi to pi.\n\
+and @var{x}.  The result is in the range -pi to pi.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 && args(0).is_defined () && args(1).is_defined ())
     {
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -368,17 +368,17 @@ DEFCMD (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{rline} =} dbstop (@var{func}, @var{line}, @dots{})\n\
 Set a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
-Line you would like the breakpoint to be set on. Multiple\n\
+Line number you would like the breakpoint to be set on. Multiple\n\
 lines might be given as separate arguments or as a vector.\n\
 @end table\n\
 \n\
 The rline returned is the real line that the breakpoint was set at.\n\
 @seealso{dbclear, dbstatus, dbstep}\n\
 @end deftypefn")
 {
   bp_table::intmap retval;
@@ -400,17 +400,17 @@ DEFCMD (dbclear, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbclear (@var{func}, @var{line}, @dots{})\n\
 Delete a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
-Line where you would like to remove the breakpoint. Multiple\n\
+Line number where you would like to remove the breakpoint. Multiple\n\
 lines might be given as separate arguments or as a vector.\n\
 @end table\n\
 No checking is done to make sure that the line you requested is really\n\
 a breakpoint. If you get the wrong line nothing will happen.\n\
 @seealso{dbstop, dbstatus, dbwhere}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1412,17 +1412,17 @@ information related to this error. The e
 \n\
 @table @asis\n\
 @item 'message'\n\
 The text of the last error message\n\
 @item 'identifier'\n\
 The message identifier of this error message\n\
 @item 'stack'\n\
 A structure containing information on where the message occurred. This might\n\
-be an empty structure if this in the case where this information can not\n\
+be an empty structure if this in the case where this information cannot\n\
 be obtained. The fields of this structure are:\n\
 \n\
 @table @asis\n\
 @item 'file'\n\
 The name of the file where the error occurred\n\
 @item 'name'\n\
 The name of function in which the error occurred\n\
 @item 'line'\n\
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1812,17 +1812,17 @@ the '-all' argument is supplied. All sea
 Called with no output arguments, @code{lookfor} prints the list of matching\n\
 functions to the terminal. Otherwise the output arguments @var{fun} and\n\
 @var{helpstring} define the matching functions and the first sentence of\n\
 each of their help strings.\n\
 \n\
 Note that the ability of @code{lookfor} to correctly identify the first\n\
 sentence of the help of the functions is dependent on the format of the\n\
 functions help. All of the functions in Octave itself will correctly\n\
-find the first sentence, but the same can not be guaranteed for other\n\
+find the first sentence, but the same cannot be guaranteed for other\n\
 functions. Therefore the use of the '-all' argument might be necessary\n\
 to find related functions that are not part of Octave.\n\
 @seealso{help, which}\n\
 @end deffn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -912,17 +912,17 @@ how to create an executable Octave scrip
     print_usage ();
 
   return retval;
 }
 
 DEFUN (program_name, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} program_name ()\n\
-Return the last component of of the value returned by\n\
+Return the last component of the value returned by\n\
 @code{program_invocation_name}.\n\
 @seealso{program_invocation_name}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = octave_program_name;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -785,17 +785,17 @@ enum system_exec_type { et_sync, et_asyn
 
 DEFUN (system, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})\n\
 Execute a shell command specified by @var{string}.  The second\n\
 argument is optional.  If @var{type} is @code{\"async\"}, the process\n\
 is started in the background and the process id of the child process\n\
 is returned immediately.  Otherwise, the process is started, and\n\
-Octave waits until it exits.  If @var{type} argument is omitted, a\n\
+Octave waits until it exits.  If the @var{type} argument is omitted, a\n\
 value of @code{\"sync\"} is assumed.\n\
 \n\
 If two input arguments are given (the actual value of\n\
 @var{return_output} is irrelevant) and the subprocess is started\n\
 synchronously, or if @var{system} is called with one input argument and\n\
 one or more output arguments, the output from the command is returned.\n\
 Otherwise, if the subprocess is executed synchronously, its output is\n\
 sent to the standard output.  To send the output of a command executed\n\
