# HG changeset patch
# User Rik <rik@octave.org>
# Date 1390584775 28800
#      Fri Jan 24 09:32:55 2014 -0800
# Branch stable
# Node ID 4b32677b6229c3228249444f3aad56b9ff9a827d
# Parent  877b82d73ed9337099fb4d4ef86dde02cd9ff6e4
Rename Fortran example files from 'fort' prefix to 'fortran' prefix.

* examples/fortrandemo.cc, examples/fortransub.f: Renamed files.

* examples/fortdemo.cc, examples/fortsub.f: Deleted files.

* examples/Makefile.am, doc/interpreter/Makefile.am: Change build
system to use new file names.

* doc/interpreter/external.txi: Change documentation to reflect new names.

diff --git a/doc/interpreter/Makefile.am b/doc/interpreter/Makefile.am
--- a/doc/interpreter/Makefile.am
+++ b/doc/interpreter/Makefile.am
@@ -54,18 +54,18 @@ EXAMPLE_FILES = \
   $(top_srcdir)/examples/@polynomial/polynomial.m \
   $(top_srcdir)/examples/@polynomial/polynomial_superiorto.m \
   $(top_srcdir)/examples/@polynomial/polyval.m \
   $(top_srcdir)/examples/@polynomial/set.m \
   $(top_srcdir)/examples/@polynomial/subsref.m \
   $(top_srcdir)/examples/addtwomatrices.cc \
   $(top_srcdir)/examples/celldemo.cc \
   $(top_srcdir)/examples/embedded.cc \
-  $(top_srcdir)/examples/fortdemo.cc \
-  $(top_srcdir)/examples/fortsub.f \
+  $(top_srcdir)/examples/fortrandemo.cc \
+  $(top_srcdir)/examples/fortransub.f \
   $(top_srcdir)/examples/funcdemo.cc \
   $(top_srcdir)/examples/globaldemo.cc \
   $(top_srcdir)/examples/helloworld.cc \
   $(top_srcdir)/examples/mycell.c \
   $(top_srcdir)/examples/myfeval.c \
   $(top_srcdir)/examples/myfunc.c \
   $(top_srcdir)/examples/myhello.c \
   $(top_srcdir)/examples/mypow2.c \
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1032,40 +1032,40 @@ for Fortran code that is short running a
 there is potentially an overhead in doing so.  However, if @w{@code{F77_FCN}}
 is used with code that calls @code{XSTOP}, Octave can generate a
 segmentation fault.
 
 An example of the inclusion of a Fortran function in an oct-file is
 given in the following example, where the C++ wrapper is
 
 @example
-@EXAMPLEFILE(fortdemo.cc)
+@EXAMPLEFILE(fortrandemo.cc)
 @end example
 
 @noindent
 and the Fortran function is
 
 @example
-@EXAMPLEFILE(fortsub.f)
+@EXAMPLEFILE(fortransub.f)
 @end example
 
 This example demonstrates most of the features needed to link to an
 external Fortran function, including passing arrays and strings, as well
 as exception handling.  Both the Fortran and C++ files need to be compiled
 in order for the example to work.
 
 @example
 @group
-mkoctfile fortdemo.cc fortsub.f
-[b, s] = fortdemo (1:3)
+mkoctfile fortrandemo.cc fortransub.f
+[b, s] = fortrandemo (1:3)
 @result{}
   b = 1.00000   0.50000   0.33333
   s = There are   3 values in the input vector
-[b, s] = fortdemo (0:3)
-error: fortdemo: fortsub: divide by zero
+[b, s] = fortrandemo (0:3)
+error: fortrandemo: fortransub: divide by zero
 @end group
 @end example
 
 @node Allocating Local Memory in Oct-Files
 @subsection Allocating Local Memory in Oct-Files
 
 Allocating memory within an oct-file might seem easy as the C++
 new/delete operators can be used.  However, in that case great care must be
diff --git a/examples/Makefile.am b/examples/Makefile.am
--- a/examples/Makefile.am
+++ b/examples/Makefile.am
@@ -29,18 +29,18 @@ FCN_FILES =
 include @polynomial/module.mk
 include @FIRfilter/module.mk
 
 EXTRA_DIST += \
   $(FCN_FILES) \
   addtwomatrices.cc \
   celldemo.cc \
   embedded.cc \
-  fortdemo.cc \
-  fortsub.f \
+  fortrandemo.cc \
+  fortransub.f \
   funcdemo.cc \
   globaldemo.cc \
   helloworld.cc \
   make_int.cc \
   mex_demo.c \
   mycell.c \
   myfeval.c \
   myfevalf.f \
diff --git a/examples/fortdemo.cc b/examples/fortrandemo.cc
rename from examples/fortdemo.cc
rename to examples/fortrandemo.cc
--- a/examples/fortdemo.cc
+++ b/examples/fortrandemo.cc
@@ -1,35 +1,35 @@
 #include <octave/oct.h>
 #include <octave/f77-fcn.h>
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (fortsub, FORTSUB)
+  F77_FUNC (fortransub, FORTSUB)
     (const int&, double*, F77_CHAR_ARG_DECL F77_CHAR_ARG_LEN_DECL);
 }
 
-DEFUN_DLD (fortdemo, args, , "Fortran Demo")
+DEFUN_DLD (fortrandemo, args, , "Fortran Demo")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
   if (nargin != 1)
     print_usage ();
   else
     {
       NDArray a = args(0).array_value ();
       if (! error_state)
         {
           double *av = a.fortran_vec ();
           octave_idx_type na = a.numel ();
           OCTAVE_LOCAL_BUFFER (char, ctmp, 128);
 
-          F77_XFCN (fortsub, FORTSUB,
+          F77_XFCN (fortransub, FORTSUB,
                     (na, av, ctmp F77_CHAR_ARG_LEN (128)));
 
           retval(1) = std::string (ctmp);
           retval(0) = a;
         }
     }
   return retval;
 }
diff --git a/examples/fortsub.f b/examples/fortransub.f
rename from examples/fortsub.f
rename to examples/fortransub.f
--- a/examples/fortsub.f
+++ b/examples/fortransub.f
@@ -1,21 +1,21 @@
-      subroutine fortsub (n, a, s)
+      subroutine fortransub (n, a, s)
       implicit none
       character*(*) s
       real*8 a(*)
       integer*4 i, n, ioerr
       do i = 1, n
         if (a(i) .eq. 0d0) then
-          call xstopx ('fortsub: divide by zero')
+          call xstopx ('fortransub: divide by zero')
         else
           a(i) = 1d0 / a(i)
         endif
       enddo
       write (unit = s, fmt = '(a,i3,a,a)', iostat = ioerr)
      $       'There are ', n,
      $       ' values in the input vector', char(0)
       if (ioerr .ne. 0) then
-        call xstopx ('fortsub: error writing string')
+        call xstopx ('fortransub: error writing string')
       endif
       return
       end
 
