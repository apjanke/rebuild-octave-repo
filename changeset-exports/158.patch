# HG changeset patch
# User jwe
# Date 750545307 0
#      Wed Oct 13 20:48:27 1993 +0000
# Node ID 76926a2d39a69fecafb15fbca370a24b29f99465
# Parent  94aa0774c4171e693869c1cccc86d9b2f87b2918
[project @ 1993-10-13 20:48:27 by jwe]
(npsol): Call error(), not message(), to print error messages.
(linear_constraints_ok): Likewise.
(nonlinear_constraints_ok): Likewise.

diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -80,17 +80,17 @@ npsol_objective_function (ColumnVector& 
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  objective_value = tmp[0];
 	  delete [] tmp;
 	}
       else
 	{
 	  delete [] tmp;
-	  message ("npsol", "error evaluating objective function");
+	  error ("npsol: error evaluating objective function");
 	  jump_to_top_level ();
 	}
     }
 
   static double retval;
   retval = 0.0;
 
   switch (objective_value.const_type ())
@@ -148,17 +148,17 @@ npsol_constraint_function (ColumnVector&
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_vector ();
 	  delete [] tmp;
 	}
       else
 	{
 	  delete [] tmp;
-	  message ("npsol", "error evaluating constraints");
+	  error ("npsol: error evaluating constraints");
 	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 int
@@ -173,24 +173,24 @@ linear_constraints_ok (const ColumnVecto
   int c_cols = c.columns ();
 
   int ok = 1;
   if (warn)
     {
       if (c_rows == 0 || c_cols == 0 || llb_len == 0 || lub_len == 0)
 	{
 	  ok = 0;
-	  message (warn_for,
-		   "linear constraints must have nonzero dimensions");
+	  error ("%s: linear constraints must have nonzero dimensions",
+		 warn_for);
 	}
       else if (x_len != c_cols || llb_len != lub_len || llb_len != c_rows)
 	{
 	  ok = 0;
-	  message (warn_for,
-		   "linear constraints have inconsistent dimensions");
+	  error ("%s: linear constraints have inconsistent dimensions",
+		 warn_for);
 	}
     }
 
   return ok;
 }
 
 int
 nonlinear_constraints_ok (const ColumnVector& x, const ColumnVector& nllb,
@@ -203,24 +203,24 @@ nonlinear_constraints_ok (const ColumnVe
   int c_len = c.capacity ();
 
   int ok = 1;
   if (warn)
     {
       if (nllb_len == 0 || nlub_len == 0 || c_len == 0)
 	{
 	  ok = 0;
-	  message (warn_for,
-		   "nonlinear constraints have nonzero dimensions");
+	  error ("%s: nonlinear constraints have nonzero dimensions",
+		 warn_for);
 	}
       else if (nllb_len != nlub_len || nllb_len != c_len)
 	{
 	  ok = 0;
-	  message (warn_for,
-		   "nonlinear constraints have inconsistent dimensions");
+	  error ("%s: nonlinear constraints have inconsistent dimensions"
+		 warn_for,);
 	}
     }
   return ok;
 }
 
 tree_constant *
 npsol (tree_constant *args, int nargin, int nargout)
 {
@@ -242,17 +242,17 @@ Handle all of the following:
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   ColumnVector x = args[1].to_vector ();
 
   if (x.capacity () == 0)
     {
-      message ("npsol", "expecting vector as first argument");
+      error ("npsol: expecting vector as first argument");
       return retval;
     }
 
   npsol_objective = is_valid_function (args[2], "npsol", 1);
   if (npsol_objective == NULL_TREE
       || takes_correct_nargs (npsol_objective, 2, "npsol", 1) != 1)
     return retval;
 
@@ -265,17 +265,17 @@ Handle all of the following:
     {
       ColumnVector lb = args[3].to_vector ();
       ColumnVector ub = args[4].to_vector ();
 
       int lb_len = lb.capacity ();
       int ub_len = ub.capacity ();
       if (lb_len != ub_len || lb_len != x.capacity ())
 	{
-	  message ("npsol", "lower and upper bounds and decision variable\n\
+	  error ("npsol: lower and upper bounds and decision variable\n\
        vector must all have the same number of elements");
 	  return retval;
 	}
 
       bounds.resize (lb_len);
       bounds.set_lower_bounds (lb);
       bounds.set_upper_bounds (ub);
     }
