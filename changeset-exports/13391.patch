# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302519871 -7200
#      Mon Apr 11 13:04:31 2011 +0200
# Node ID d5d56d353278046f0e76f89a7c2e9b644dfa892f
# Parent  ee41454753d4e77ccfa1c7d2c1f4473b96a38b58
Replaced pthreads by QThreads.

diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -20,17 +20,17 @@
 #include <QMenu>
 #include <QAction>
 #include <QtWebKit/QWebView>
 
 #include "MainWindow.h"
 
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent),
-      isRunning(true) {
+      m_isRunning(true) {
     resize(1000, 600);
     constructWindow();
     establishOctaveLink();
 }
 
 MainWindow::~MainWindow() {
 }
 
@@ -43,87 +43,26 @@ void MainWindow::constructWindow() {
 
     addDockWidget(Qt::LeftDockWidgetArea, m_variablesDockWidget);
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
 }
 
 void MainWindow::establishOctaveLink() {
     //QMetaObject::invokeMethod(this, "setStatus", Q_ARG(QString, QString("Establishing Octave link..")));
     m_octaveLink = new OctaveLink();
-    pthread_create(&m_octaveThread, 0, MainWindow::octaveMainWrapper, this);
-    pthread_create(&m_octaveCallbackThread, 0, MainWindow::octaveCallback, this);
+
+    m_octaveMainThread = new OctaveMainThread(this);
+    m_octaveMainThread->start();
+
+    m_octaveCallbackThread = new OctaveCallbackThread(this, this);
+    m_octaveCallbackThread->start();
+
     command_editor::add_event_hook(server_rl_event_hook_function);
 
     int fdm, fds;
     if(openpty(&fdm, &fds, 0, 0, 0) < 0) {
         assert(0);
     }
     dup2 (fds, 0);
     dup2 (fds, 1);
     dup2 (fds, 2);
     m_octaveTerminal->openTeletype(fdm);
 }
-
-void* MainWindow::octaveMainWrapper(void *widget) {
-    //MainWindow *mainWindow = (MainWindow*)ptr;
-
-    int argc = 3;
-    const char* argv[] = {"octave", "--interactive", "--line-editing"};
-    octave_main(argc, (char**)argv,1);
-    switch_to_buffer(create_buffer(get_input_from_stdin()));
-    main_loop();
-    clean_up_and_exit(0);
-    return 0;
-}
-
-void* MainWindow::octaveCallback(void *widget) {
-    MainWindow *mainWindow = (MainWindow*)widget;
-
-    while(mainWindow->isRunning) {
-
-    // Get a full variable list.
-    std::vector<OctaveLink::VariableMetaData> variables = oct_octave_server.variableInfoList();
-    if(variables.size()) {
-        // TODO: Update variables view.
-    }
-
-    // Check whether any requested variables have been returned.
-    std::vector<OctaveLink::RequestedVariable> reqVars = oct_octave_server.requestedVariables();
-    for(std::vector<OctaveLink::RequestedVariable>::iterator it = reqVars.begin();
-        it != reqVars.end(); it++ ) {
-        // TODO: Process requested variables.
-    }
-
-    // Collect history list.
-    string_vector historyList = oct_octave_server.getHistoryList();
-    if(historyList.length()) {
-        mainWindow->m_historyDockWidget->updateHistory(historyList);
-    }
-
-    // Put a marker in each buffer at the proper location.
-    int status = 0;
-    std::vector<OctaveLink::BreakPoint> breakPoints = oct_octave_server.breakPointList(status);
-    if(status==0) {
-        //MEditor::GetInstance()->process_breakpoint_list (bps);
-    }
-
-    // Find out if a breakpoint is hit
-    static bool lineNumber = -1;
-    bool hitBreakPoint = oct_octave_server.isBreakpointReached(status);
-    if((status==0) && hitBreakPoint) {
-        std::vector<OctaveLink::BreakPoint> hit_breakpoint = oct_octave_server.reachedBreakpoint();
-
-        if(hit_breakpoint.size() > 0 && (hit_breakpoint[0].lineNumber != lineNumber)) {
-            //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
-            //MEditor::GetInstance()->add_breakpoint_marker(hit_breakpoint[0], BP_MARKER_TYPE_HIT);
-            lineNumber = hit_breakpoint[0].lineNumber;
-        }
-    }
-    else if((status==0) && lineNumber>0) {
-        //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
-        lineNumber = -1;
-    }
-
-        usleep(100000);
-    }
-
-    return 0;
-}
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -15,16 +15,17 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef MAINWINDOW_H
 #define MAINWINDOW_H
 
 #include <QtGui/QMainWindow>
+#include <QThread>
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 
 // Octave includes
 #undef PACKAGE_BUGREPORT
 #undef PACKAGE_NAME
@@ -62,39 +63,124 @@ extern OCTINTERP_API FILE *get_input_fro
 #include <termios.h>
 #include <sys/types.h>
 #include <signal.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <iostream>
 #include <vector>
 #include "pty.h"
+
+class OctaveMainThread;
+class OctaveCallbackThread;
+
 /**
   * \class MainWindow
   *
   * Represents the main window.
   */
 class MainWindow : public QMainWindow
 {
     Q_OBJECT
 public:
-    static void* octaveMainWrapper(void *widget);
-    static void* octaveCallback(void *widget);
-
     MainWindow(QWidget *parent = 0);
     ~MainWindow();
 
+    bool isRunning() { return m_isRunning; }
+    OctaveTerminal *octaveTerminal() { return m_octaveTerminal; }
+    VariablesDockWidget *variablesDockWidget() { return m_variablesDockWidget; }
+    HistoryDockWidget *historyDockWidget() { return m_historyDockWidget; }
+
 public slots:
 private:
     void constructWindow();
     void establishOctaveLink();
     OctaveTerminal *m_octaveTerminal;
     VariablesDockWidget *m_variablesDockWidget;
     HistoryDockWidget *m_historyDockWidget;
 
     // Threads for running octave and managing the data interaction.
     OctaveLink *m_octaveLink;
-    pthread_t m_octaveThread;
-    pthread_t m_octaveCallbackThread;
-    bool isRunning;
+    OctaveMainThread *m_octaveMainThread;
+    OctaveCallbackThread *m_octaveCallbackThread;
+    bool m_isRunning;
+};
+
+class OctaveMainThread : public QThread {
+    Q_OBJECT
+public:
+    OctaveMainThread(QObject *parent)
+        : QThread(parent) {
+    }
+protected:
+    void run() {
+        int argc = 3;
+        const char* argv[] = {"octave", "--interactive", "--line-editing"};
+        octave_main(argc, (char**)argv,1);
+        switch_to_buffer(create_buffer(get_input_from_stdin()));
+        main_loop();
+        clean_up_and_exit(0);
+    }
+};
+
+class OctaveCallbackThread : public QThread {
+    Q_OBJECT
+public:
+    OctaveCallbackThread(QObject *parent, MainWindow *mainWindow)
+        : QThread(parent),
+          m_mainWindow(mainWindow) {
+    }
+
+protected:
+    void run() {
+        while(m_mainWindow->isRunning()) {
+
+        // Get a full variable list.
+        std::vector<OctaveLink::VariableMetaData> variables = oct_octave_server.variableInfoList();
+        if(variables.size()) {
+            // TODO: Update variables view.
+        }
+
+        // Check whether any requested variables have been returned.
+        std::vector<OctaveLink::RequestedVariable> reqVars = oct_octave_server.requestedVariables();
+        for(std::vector<OctaveLink::RequestedVariable>::iterator it = reqVars.begin();
+            it != reqVars.end(); it++ ) {
+            // TODO: Process requested variables.
+        }
+
+        // Collect history list.
+        string_vector historyList = oct_octave_server.getHistoryList();
+        if(historyList.length()) {
+            m_mainWindow->historyDockWidget()->updateHistory(historyList);
+        }
+
+        // Put a marker in each buffer at the proper location.
+        int status = 0;
+        std::vector<OctaveLink::BreakPoint> breakPoints = oct_octave_server.breakPointList(status);
+        if(status==0) {
+            //MEditor::GetInstance()->process_breakpoint_list (bps);
+        }
+
+        // Find out if a breakpoint is hit
+        static bool lineNumber = -1;
+        bool hitBreakPoint = oct_octave_server.isBreakpointReached(status);
+        if((status==0) && hitBreakPoint) {
+            std::vector<OctaveLink::BreakPoint> hit_breakpoint = oct_octave_server.reachedBreakpoint();
+
+            if(hit_breakpoint.size() > 0 && (hit_breakpoint[0].lineNumber != lineNumber)) {
+                //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
+                //MEditor::GetInstance()->add_breakpoint_marker(hit_breakpoint[0], BP_MARKER_TYPE_HIT);
+                lineNumber = hit_breakpoint[0].lineNumber;
+            }
+        }
+        else if((status==0) && lineNumber>0) {
+            //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
+            lineNumber = -1;
+        }
+
+            usleep(100000);
+        }
+    }
+private:
+    MainWindow *m_mainWindow;
 };
 
 #endif // MAINWINDOW_H
