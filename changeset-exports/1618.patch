# HG changeset patch
# User jwe
# Date 815418573 0
#      Fri Nov 03 17:09:33 1995 +0000
# Node ID 9c1fca4bd859707e979f1263a13f9ad75e5e8377
# Parent  14d95b8282d70e0bbc21d0b4c535a644295858cf
[project @ 1995-11-03 17:08:53 by jwe]

diff --git a/libcruft/misc/dostop.c b/libcruft/misc/dostop.c
--- a/libcruft/misc/dostop.c
+++ b/libcruft/misc/dostop.c
@@ -20,41 +20,33 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
-#include <signal.h>
-#include <stdlib.h>
+extern void jump_to_top_level (void);
 
-/*
- * All the STOP statements in the Fortran routines have been replaced
- * with a call to XSTOPX, defined in the file libcruft/misc/xstopx.f.
- *
- * The XSTOPX function calls this function, which will send a SIGINT
- * signal to the program that invoked it.
- *
- * Octave\'s SIGINT signal handler calls jump_to_top_level(), and the
- * user will end up at the top level instead of the shell prompt.
- *
- * Programs that don\'t handle SIGINT will be interrupted.
- */
+/* All the STOP statements in the Fortran routines have been replaced
+   with a call to XSTOPX, defined in the file libcruft/misc/xstopx.f.
+
+   The XSTOPX function calls this function, which calls
+   jump_to_top_level(), and the user will end up at the top level
+   instead of the shell prompt. */
 
 volatile void
 #if defined (F77_APPEND_UNDERSCORE)
 dostop_ (void)
 #else
 dostop (void)
 #endif
 {
-  raise (SIGINT);
-  abort ();
+  jump_to_top_level ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -166,19 +166,16 @@ sigfpe_handler (int /* sig */)
 #else
   return 0;
 #endif
 }
 #endif
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 
-// XXX FIXME XXX -- it would probably be good to try to use POSIX
-// signal interface if it is available.
-
 static RETSIGTYPE
 sigint_handler (int /* sig */)
 {
   // Can this ever cause trouble on systems that don't forget signal
   // handlers when they are invoked?
 
   octave_set_signal_handler (SIGINT, sigint_handler);
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -240,17 +240,17 @@ pathstring_to_vector (char *pathstring)
       delete [] tmp_path;
     }
 
   return path;
 }
 
 // Return to the main command loop in octave.cc.
 
-void
+extern "C" void
 jump_to_top_level (void)
 {
   run_all_unwind_protects ();
 
   longjmp (toplevel, 1);
 }
 
 int
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -42,17 +42,17 @@ extern char *search_path_for_file (const
 extern char *file_in_path (const char *, const char *);
 extern char *fcn_file_in_path (const char *);
 extern char *oct_file_in_path (const char *);
 
 extern char *octave_tmp_file_name (void);
 
 extern char **pathstring_to_vector (char *pathstring);
 
-extern void jump_to_top_level (void) NORETURN;
+extern "C" void jump_to_top_level (void) NORETURN;
 
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
 
 extern char **get_fcn_file_names (int& ffl_len, const char *dir,
