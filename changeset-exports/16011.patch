# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1360256326 18000
#      Thu Feb 07 11:58:46 2013 -0500
# Node ID 8122286c69a958d720912e205ad8404a3fe92a54
# Parent  c5d548e4101f63ab1ddd7606bec01210c6512927
initial large file support for 32-bit systems

* bootstrap.conf (gnulib_modules): Explicitly list largefile.
* c-file-ptr-stream.cc, c-file-ptr-stream.h, oct-fstrm.cc,
oct-fstrm.h, oct-iostrm.cc, oct-iostrm.h, oct-stdstrm.h,
oct-stream.cc, oct-stream.h, oct-strstrm.cc, oct-strstrm.h,
file-io.cc: Use off_t instead of long for seek and tell file position
values.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -39,16 +39,17 @@ gnulib_modules="
   fseek
   ftell
   getcwd
   gethostname
   getopt-gnu
   gettimeofday
   glob
   isatty
+  largefile
   link
   lstat
   malloc-gnu
   mkdir
   mkfifo
   mkostemp
   mktime
   nanosleep
diff --git a/libinterp/interp-core/c-file-ptr-stream.cc b/libinterp/interp-core/c-file-ptr-stream.cc
--- a/libinterp/interp-core/c-file-ptr-stream.cc
+++ b/libinterp/interp-core/c-file-ptr-stream.cc
@@ -188,25 +188,25 @@ c_file_ptr_buf::buf_close (void)
       retval = cf (f);
       f = 0;
     }
 
   return retval;
 }
 
 int
-c_file_ptr_buf::seek (long offset, int origin)
+c_file_ptr_buf::seek (off_t offset, int origin)
 {
-  return f ? gnulib::fseek (f, offset, origin) : -1;
+  return f ? gnulib::fseeko (f, offset, origin) : -1;
 }
 
-long
+off_t
 c_file_ptr_buf::tell (void)
 {
-  return f ? gnulib::ftell (f) : -1;
+  return f ? gnulib::ftello (f) : -1;
 }
 
 int
 c_file_ptr_buf::file_close (FILE *f)
 {
   return gnulib::fclose (f);
 }
 
diff --git a/libinterp/interp-core/c-file-ptr-stream.h b/libinterp/interp-core/c-file-ptr-stream.h
--- a/libinterp/interp-core/c-file-ptr-stream.h
+++ b/libinterp/interp-core/c-file-ptr-stream.h
@@ -69,19 +69,19 @@ public:
   int sync (void);
 
   int flush (void);
 
   int buf_close (void);
 
   int file_number () const { return f ? fileno (f) : -1; }
 
-  int seek (long offset, int origin);
+  int seek (off_t offset, int origin);
 
-  long tell (void);
+  off_t tell (void);
 
   void clear (void) { if (f) clearerr (f); }
 
   static int file_close (FILE *f);
 
 protected:
 
   FILE *f;
@@ -112,20 +112,20 @@ public:
     : STREAM_T (0), buf (new BUF_T (f, cf)) { STREAM_T::init (buf); }
 
   ~c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   BUF_T *rdbuf (void) { return buf; }
 
   void stream_close (void) { if (buf) buf->buf_close (); }
 
-  int seek (long offset, int origin)
+  int seek (off_t offset, int origin)
     { return buf ? buf->seek (offset, origin) : -1; }
 
-  long tell (void) { return buf ? buf->tell () : -1; }
+  off_t tell (void) { return buf ? buf->tell () : -1; }
 
   void clear (void) { if (buf) buf->clear (); STREAM_T::clear (); }
 
 private:
 
   BUF_T *buf;
 
   // No copying!
@@ -187,20 +187,20 @@ public:
   int sync (void);
 
   int flush (void);
 
   int buf_close (void);
 
   int file_number () const { return -1; }
 
-  int seek (long offset, int origin)
-    { return f ? gzseek (f, offset, origin) : -1; }
+  int seek (off_t offset, int origin)
+    { return f ? gzseek (f, offset, origin) >= 0 : -1; }
 
-  long tell (void) { return f ? gztell (f) : -1; }
+  off_t tell (void) { return f ? gztell (f) : -1; }
 
   void clear (void) { if (f) gzclearerr (f); }
 
   static int file_close (gzFile f) { return ::gzclose (f); }
 
 protected:
 
   gzFile f;
diff --git a/libinterp/interp-core/oct-fstrm.cc b/libinterp/interp-core/oct-fstrm.cc
--- a/libinterp/interp-core/oct-fstrm.cc
+++ b/libinterp/interp-core/oct-fstrm.cc
@@ -57,25 +57,25 @@ octave_fstream::octave_fstream (const st
 
   if (! fs)
     error (gnulib::strerror (errno));
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_fstream::seek (long, int)
+octave_fstream::seek (off_t, int)
 {
   error ("fseek: invalid_operation");
   return -1;
 }
 
 // Return current stream position.
 
-long
+off_t
 octave_fstream::tell (void)
 {
   error ("ftell: invalid_operation");
   return -1;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
diff --git a/libinterp/interp-core/oct-fstrm.h b/libinterp/interp-core/oct-fstrm.h
--- a/libinterp/interp-core/oct-fstrm.h
+++ b/libinterp/interp-core/oct-fstrm.h
@@ -41,21 +41,21 @@ public:
   static octave_stream
   create (const std::string& nm_arg,
           std::ios::openmode arg_md = std::ios::in|std::ios::out,
           oct_mach_info::float_format flt_fmt
             = oct_mach_info::native_float_format ());
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (long offset, int origin);
+  int seek (off_t offset, int origin);
 
   // Return current stream position.
 
-  long tell (void);
+  off_t tell (void);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   void do_close (void);
 
   // The name of the file.
diff --git a/libinterp/interp-core/oct-iostrm.cc b/libinterp/interp-core/oct-iostrm.cc
--- a/libinterp/interp-core/oct-iostrm.cc
+++ b/libinterp/interp-core/oct-iostrm.cc
@@ -25,25 +25,25 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "error.h"
 #include "oct-iostrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_iostream::seek (long, int)
+octave_base_iostream::seek (off_t, int)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return current stream position.
 
-long
+off_t
 octave_base_iostream::tell (void)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
diff --git a/libinterp/interp-core/oct-iostrm.h b/libinterp/interp-core/oct-iostrm.h
--- a/libinterp/interp-core/oct-iostrm.h
+++ b/libinterp/interp-core/oct-iostrm.h
@@ -35,21 +35,21 @@ public:
   octave_base_iostream (const std::string& n = std::string (),
                         std::ios::openmode m = std::ios::in|std::ios::out,
                         oct_mach_info::float_format ff
                           = oct_mach_info::native_float_format ())
     : octave_base_stream (m, ff), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (long offset, int origin);
+  int seek (off_t offset, int origin);
 
   // Return current stream position.
 
-  long tell (void);
+  off_t tell (void);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/libinterp/interp-core/oct-stdstrm.h b/libinterp/interp-core/oct-stdstrm.h
--- a/libinterp/interp-core/oct-stdstrm.h
+++ b/libinterp/interp-core/oct-stdstrm.h
@@ -38,22 +38,22 @@ public:
                          = oct_mach_info::native_float_format (),
                        typename BUF_T::close_fcn cf = BUF_T::file_close)
     : octave_base_stream (m, ff), nm (n), md (m),
       s (f ? new STREAM_T (f, cf) : 0), fnum (fid)
   { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (long offset, int origin)
+  int seek (off_t offset, int origin)
     { return s ? s->seek (offset, origin) : -1; }
 
   // Return current stream position.
 
-  long tell (void) { return s ? s->tell () : -1; }
+  off_t tell (void) { return s ? s->tell () : -1; }
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return s ? s->eof () : true; }
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/libinterp/interp-core/oct-stream.cc b/libinterp/interp-core/oct-stream.cc
--- a/libinterp/interp-core/oct-stream.cc
+++ b/libinterp/interp-core/oct-stream.cc
@@ -1023,20 +1023,20 @@ octave_base_stream::getl (octave_idx_typ
 }
 
 std::string
 octave_base_stream::gets (octave_idx_type max_len, bool& err, const std::string& who)
 {
   return do_gets (max_len, err, false, who);
 }
 
-long
-octave_base_stream::skipl (long num, bool& err, const std::string& who)
+off_t
+octave_base_stream::skipl (off_t num, bool& err, const std::string& who)
 {
-  long cnt = -1;
+  off_t cnt = -1;
 
   if ((interactive || forced_interactive) && file_number () == 0)
     {
       ::error ("%s: unable to read from stdin while running interactively",
                who.c_str ());
 
       return count;
     }
@@ -2811,31 +2811,31 @@ octave_stream::gets (const octave_value&
     }
 
   if (! error_state)
     retval = gets (max_len, err, who);
 
   return retval;
 }
 
-long
-octave_stream::skipl (long count, bool& err, const std::string& who)
+off_t
+octave_stream::skipl (off_t count, bool& err, const std::string& who)
 {
-  long retval = -1;
+  off_t retval = -1;
 
   if (stream_ok ())
     retval = rep->skipl (count, err, who);
 
   return retval;
 }
 
-long
+off_t
 octave_stream::skipl (const octave_value& tc_count, bool& err, const std::string& who)
 {
-  long retval = -1;
+  off_t retval = -1;
 
   err = false;
 
   int conv_err = 0;
 
   int count = 1;
 
   if (tc_count.is_defined ())
@@ -2856,35 +2856,35 @@ octave_stream::skipl (const octave_value
 
   if (! error_state)
     retval = skipl (count, err, who);
 
   return retval;
 }
 
 int
-octave_stream::seek (long offset, int origin)
+octave_stream::seek (off_t offset, int origin)
 {
   int status = -1;
 
   if (stream_ok ())
     {
       clearerr ();
 
       // Find current position so we can return to it if needed.
 
-      long orig_pos = rep->tell ();
+      off_t orig_pos = rep->tell ();
 
       // Move to end of file.  If successful, find the offset of the end.
 
       status = rep->seek (0, SEEK_END);
 
       if (status == 0)
         {
-          long eof_pos = rep->tell ();
+          off_t eof_pos = rep->tell ();
 
           if (origin == SEEK_CUR)
             {
               // Move back to original position, otherwise we will be
               // seeking from the end of file which is probably not the
               // original location.
 
               rep->seek (orig_pos, SEEK_SET);
@@ -2894,17 +2894,17 @@ octave_stream::seek (long offset, int or
           // of existing file.
 
           status = rep->seek (offset, origin);
 
           if (status == 0)
             {
               // Where are we after moving to desired position?
 
-              long desired_pos = rep->tell ();
+              off_t desired_pos = rep->tell ();
 
               // I don't think save_pos can be less than zero, but we'll
               // check anyway...
 
               if (desired_pos > eof_pos || desired_pos < 0)
                 {
                   // Seek outside bounds of file.  Failure should leave
                   // position unchanged.
@@ -2930,17 +2930,20 @@ octave_stream::seek (long offset, int or
 }
 
 int
 octave_stream::seek (const octave_value& tc_offset,
                      const octave_value& tc_origin)
 {
   int retval = -1;
 
-  long xoffset = tc_offset.long_value (true);
+  // FIXME -- should we have octave_value methods that handle off_t
+  // explicitly?
+  octave_int64 val = tc_offset.int64_scalar_value ();
+  off_t xoffset = val.value ();
 
   if (! error_state)
     {
       int conv_err = 0;
 
       int origin = SEEK_SET;
 
       if (tc_origin.is_string ())
@@ -2984,20 +2987,20 @@ octave_stream::seek (const octave_value&
         error ("fseek: invalid value for origin");
     }
   else
     error ("fseek: invalid value for offset");
 
   return retval;
 }
 
-long
+off_t
 octave_stream::tell (void)
 {
-  long retval = -1;
+  off_t retval = -1;
 
   if (stream_ok ())
     retval = rep->tell ();
 
   return retval;
 }
 
 int
@@ -3556,27 +3559,27 @@ octave_stream::write (const Array<T>& da
         {
           std::ostream& os = *osp;
 
           if (skip != 0 && (i % block_size) == 0)
             {
               // Seek to skip when inside bounds of existing file.
               // Otherwise, write NUL to skip.
 
-              long orig_pos = tell ();
+              off_t orig_pos = tell ();
 
               seek (0, SEEK_END);
 
-              long eof_pos = tell ();
+              off_t eof_pos = tell ();
 
               // Is it possible for this to fail to return us to the
               // original position?
               seek (orig_pos, SEEK_SET);
 
-              long remaining = eof_pos - orig_pos;
+              off_t remaining = eof_pos - orig_pos;
 
               if (remaining < skip)
                 {
                   seek (0, SEEK_END);
 
                   // FIXME -- probably should try to write larger
                   // blocks...
 
diff --git a/libinterp/interp-core/oct-stream.h b/libinterp/interp-core/oct-stream.h
--- a/libinterp/interp-core/oct-stream.h
+++ b/libinterp/interp-core/oct-stream.h
@@ -340,21 +340,21 @@ public:
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  virtual int seek (long offset, int origin) = 0;
+  virtual int seek (off_t offset, int origin) = 0;
 
   // Return current stream position.
 
-  virtual long tell (void) = 0;
+  virtual off_t tell (void) = 0;
 
   // Return TRUE if EOF has been reached on this stream.
 
   virtual bool eof (void) const = 0;
 
   // The name of the file.
 
   virtual std::string name (void) const = 0;
@@ -455,17 +455,17 @@ private:
   // Functions that are defined for all input streams (input streams
   // are those that define is).
 
   std::string do_gets (octave_idx_type max_len, bool& err, bool strip_newline,
                        const std::string& who /* = "gets" */);
 
   std::string getl (octave_idx_type max_len, bool& err, const std::string& who /* = "getl" */);
   std::string gets (octave_idx_type max_len, bool& err, const std::string& who /* = "gets" */);
-  long skipl (long count, bool& err, const std::string& who /* = "skipl" */);
+  off_t skipl (off_t count, bool& err, const std::string& who /* = "skipl" */);
 
   octave_value do_scanf (scanf_format_list& fmt_list, octave_idx_type nr, octave_idx_type nc,
                          bool one_elt_size_spec, octave_idx_type& count,
                          const std::string& who /* = "scanf" */);
 
   octave_value scanf (const std::string& fmt, const Array<double>& size,
                       octave_idx_type& count, const std::string& who /* = "scanf" */);
 
@@ -519,23 +519,23 @@ public:
   std::string getl (octave_idx_type max_len, bool& err, const std::string& who /* = "getl" */);
   std::string getl (const octave_value& max_len, bool& err,
                     const std::string& who /* = "getl" */);
 
   std::string gets (octave_idx_type max_len, bool& err, const std::string& who /* = "gets" */);
   std::string gets (const octave_value& max_len, bool& err,
                     const std::string& who /* = "gets" */);
 
-  long skipl (long count, bool& err, const std::string& who /* = "skipl" */);
-  long skipl (const octave_value& count, bool& err, const std::string& who /* = "skipl" */);
+  off_t skipl (off_t count, bool& err, const std::string& who /* = "skipl" */);
+  off_t skipl (const octave_value& count, bool& err, const std::string& who /* = "skipl" */);
 
-  int seek (long offset, int origin);
+  int seek (off_t offset, int origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
-  long tell (void);
+  off_t tell (void);
 
   int rewind (void);
 
   bool is_open (void) const;
 
   void close (void);
 
   octave_value read (const Array<double>& size, octave_idx_type block_size,
diff --git a/libinterp/interp-core/oct-strstrm.cc b/libinterp/interp-core/oct-strstrm.cc
--- a/libinterp/interp-core/oct-strstrm.cc
+++ b/libinterp/interp-core/oct-strstrm.cc
@@ -24,25 +24,25 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "oct-strstrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_strstream::seek (long, int)
+octave_base_strstream::seek (off_t, int)
 {
   error ("fseek: invalid operation");
   return -1;
 }
 
 // Return current stream position.
 
-long
+off_t
 octave_base_strstream::tell (void)
 {
   error ("ftell: invalid operation");
   return -1;
 }
 
 octave_stream
 octave_istrstream::create (const char *data, std::ios::openmode arg_md,
diff --git a/libinterp/interp-core/oct-strstrm.h b/libinterp/interp-core/oct-strstrm.h
--- a/libinterp/interp-core/oct-strstrm.h
+++ b/libinterp/interp-core/oct-strstrm.h
@@ -35,21 +35,21 @@ public:
 
   octave_base_strstream (std::ios::openmode m = std::ios::out,
                          oct_mach_info::float_format ff
                            = oct_mach_info::native_float_format ())
     : octave_base_stream (m, ff) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (long, int);
+  int seek (off_t, int);
 
   // Return current stream position.
 
-  virtual long tell (void);
+  virtual off_t tell (void);
 
   // The name of the file.
 
   std::string name (void) const { return std::string (); }
 
   virtual std::streambuf *rdbuf (void) = 0;
 
   virtual bool bad (void) const = 0;
@@ -99,17 +99,17 @@ public:
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is.eof (); }
 
   std::istream *input_stream (void) { return &is; }
 
   std::ostream *output_stream (void) { return 0; }
 
-  long tell (void) { return is.tellg (); }
+  off_t tell (void) { return is.tellg (); }
 
   std::streambuf *rdbuf (void) { return is ? is.rdbuf () : 0; }
 
   bool bad (void) const { return is.bad (); }
 
   void clear (void) { is.clear (); }
 
 protected:
diff --git a/libinterp/interpfcn/file-io.cc b/libinterp/interpfcn/file-io.cc
--- a/libinterp/interpfcn/file-io.cc
+++ b/libinterp/interpfcn/file-io.cc
@@ -431,17 +431,17 @@ Returns the number of lines skipped (end
       octave_stream os = octave_stream_list::lookup (args(0), who);
 
       if (! error_state)
         {
           octave_value count_arg = (nargin == 2) ? args(1) : octave_value ();
 
           bool err = false;
 
-          long tmp = os.skipl (count_arg, err, who);
+          off_t tmp = os.skipl (count_arg, err, who);
 
           if (! (error_state || err))
             retval = tmp;
         }
     }
   else
     print_usage ();
 
