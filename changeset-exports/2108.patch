# HG changeset patch
# User jwe
# Date 830861084 0
#      Tue Apr 30 10:44:44 1996 +0000
# Node ID 2b67abb63030db7811a207f357751c3c62e1f116
# Parent  2eec34fc1aca4c1a8fbc12d40cdeccb6f0df98ef
[project @ 1996-04-30 10:44:17 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1996 John W. Eaton
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.194 $)
+AC_REVISION($Revision: 1.195 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -178,16 +178,28 @@ AC_ARG_ENABLE(readline,
      READLINE_DIR="";
    fi], [])
 if $USE_READLINE; then
   AC_DEFINE(USE_READLINE, 1)
 fi
 AC_SUBST(LIBREADLINE)
 AC_SUBST(READLINE_DIR)
 
+### By default, Octave's internal array and matrix classes do bounds
+### checking on element references.  This slows some operations down a
+### bit, so give the user the option of disabling it.
+
+BOUNDS_CHECKING=true
+AC_ARG_ENABLE(bounds-check,
+  [  --enable-bounds-check   for internal array classes (default is yes)],
+  [if test "$enableval" = no; then BOUNDS_CHECKING=false; fi], [])
+if $BOUNDS_CHECKING; then
+  AC_DEFINE(BOUNDS_CHECKING, 1)
+fi
+
 ### See which C++ compiler to use (we expect to find g++).
 
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_PROG_CXX
 AC_PROG_CXXCPP
 
 ### Do special things for g++.
@@ -322,17 +334,17 @@ AC_ARG_ENABLE(dl,
    elif test $enableval = yes; then WITH_DL=yes;
    else WITH_DL=maybe; fi],
   WITH_DL=maybe)
 
 ### Allow the user to experiment with dynamic linking using
 ### shl_load/shl_findsym (HP/UX only?).
 
 AC_ARG_ENABLE(shl,
-  [  --enable-shl            use shl_load/shl_findsym for dynamic linking (HP only?)],
+  [  --enable-shl            use shl_load/shl_findsym for dynamic linking (HP only)],
   [if test $enableval = no; then WITH_SHL=no;
    elif test $enableval = yes; then WITH_SHL=yes;
    else WITH_SHL=maybe; fi],
   WITH_SHL=maybe)
 
 ### Enable creation of shared libraries.  Currently only works with
 ### gcc on some systems.
 
@@ -1053,13 +1065,14 @@ Octave is now configured for $canonical_
   C++ compiler:         $CXX $CXX_EXTRAS $CXXFLAGS
   Fortran compiler:     $FORT
   Fortran libraries:    $FLIBS
   Use GNU readline:     $USE_READLINE
   Use GNU info reader:  $USE_GNU_INFO
   Default pager:        $DEFAULT_PAGER
   gnuplot:              $GNUPLOT_BINARY
 
+  Do internal array bounds checking:       $BOUNDS_CHECKING
   Build shared libraries:                  $SHARED_LIBS
   Minimal kernel option:                   $OCTAVE_LITE
   Dynamic Linking (dlopen/dlsym):          $WITH_DL
   Dynamic Linking (shl_load/shl_findsym):  $WITH_SHL
 ])
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -159,64 +159,67 @@ public:
 
   ~Array (void);
 
   Array<T>& operator = (const Array<T>& a);
 
   int capacity (void) const { return rep->length (); }
   int length (void) const { return rep->length (); }
 
+  // No checking, even for multiple references, ever.
+
+  T& xelem (int n) { return rep->elem (n); }
+  T xelem (int n) const { return rep->elem (n); }
+
   // XXX FIXME XXX -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
-  T& elem (int n)
-    {
-      make_unique ();
-      return rep->elem (n);
-    }
-
   T& Array<T>::checkelem (int n)
     {
       if (n < 0 || n >= rep->length ())
 	{
 	  (*current_liboctave_error_handler) ("range error");
 	  static T foo;
 	  return foo;
 	}
       else
-	return elem (n);
+	{
+	  make_unique ();
+	  return xelem (n);
+	}
     }
 
-#if defined (NO_BOUNDS_CHECKING)
-  T& operator () (int n) { return elem (n); }
+#if defined (BOUNDS_CHECKING)
+  T& elem (int n) { return checkelem (n); }
 #else
-  T& operator () (int n) { return checkelem (n); }
+  T& elem (int n)
+    {
+      make_unique ();
+      return xelem ();
+    }
 #endif
 
-  T Array<T>::elem (int n) const { return rep->elem (n); }
+  T& operator () (int n) { return elem (n); }
 
   T Array<T>::checkelem (int n) const
     {
       if (n < 0 || n >= rep->length ())
 	return range_error ();
       else
-	return elem (n);
+	return xelem (n);
     }
 
-#if defined (NO_BOUNDS_CHECKING)
-  T Array<T>::operator () (int n) const { return elem (n); }
+#if defined (BOUNDS_CHECKING)
+  T Array<T>::elem (int n) const { return checkelem (n); }
 #else
-  T Array<T>::operator () (int n) const { return checkelem (n); }
+  T Array<T>::elem (int n) const { return xelem (n); }
 #endif
 
-  // No checking, even for multiple references, ever.
-
-  T& xelem (int n) { return rep->elem (n); }
-  T xelem (int n) const { return rep->elem (n); }
+  T Array<T>::operator () (int n) const { return elem (n); }
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
 
