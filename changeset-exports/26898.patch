# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1552460590 -3600
#      Wed Mar 13 08:03:10 2019 +0100
# Node ID d94876e7a0aa3770e1bfd3c691222eab036a3786
# Parent  ba0c9e84f6a86c7101df3680c66ea5afc590e86c
Remove calls to deprecated sundials functions.

* libinterp/dldfcn/__ode15__.cc : Simplify list of includes
  and remove use of deprecated functions.
* m4/acinclude.m4 : do not check for headers that are not
  actually included

diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -36,61 +36,44 @@ along with Octave; see the file COPYING.
 #include "oct-map.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
 #include "parse.h"
 
 #if defined (HAVE_SUNDIALS)
 
-#  if defined (HAVE_IDA_IDA_H)
-#    include <ida/ida.h>
+#  if defined (HAVE_NVECTOR_NVECTOR_SERIAL_H)
+#    include <nvector/nvector_serial.h>
 #  endif
 
-#  if defined (HAVE_SUNDIALS_SUNDIALS_MATRIX_H)
-#    include <sundials/sundials_matrix.h>
-#  endif
-
-#  if defined (HAVE_SUNDIALS_SUNDIALS_LINEARSOLVER_H)
-#    include <sundials/sundials_linearsolver.h>
+#  if defined (HAVE_IDA_IDA_H)
+#    include <ida/ida.h>
 #  endif
 
 #  if defined (HAVE_SUNLINSOL_SUNLINSOL_DENSE_H)
 #    include <sunlinsol/sunlinsol_dense.h>
 #  endif
 
-#  if defined (HAVE_IDA_IDA_DIRECT_H)
-#    include <ida/ida_direct.h>
-#  endif
-
-#  if defined (HAVE_SUNDIALS_SUNDIALS_SPARSE_H)
-#    include <sundials/sundials_sparse.h>
-#  endif
-
-
 #  if defined (HAVE_SUNLINSOL_SUNLINSOL_KLU_H)
 #    if defined (HAVE_KLU_H)
 #      include <klu.h>
 #    endif
 #    if defined (HAVE_KLU_KLU_H)
 #      include <klu/klu.h>
 #    endif
 #    if defined (HAVE_SUITESPARSE_KLU_H)
 #      include <suitesparse/klu.h>
 #    endif
 #    if defined (HAVE_UFPARSE_KLU_H)
 #      include <ufsparse/klu.h>
 #    endif
 #    include <sunlinsol/sunlinsol_klu.h>
 #  endif
 
-#  if defined (HAVE_NVECTOR_NVECTOR_SERIAL_H)
-#    include <nvector/nvector_serial.h>
-#  endif
-
 static inline realtype *
 nv_data_s (N_Vector& v)
 {
 #if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
    // Disable warning from GCC about old-style casts in Sundials
    // macro expansions.  Do this in a function so that this
    // diagnostic may still be enabled for the rest of the file.
 #  pragma GCC diagnostic push
@@ -258,17 +241,17 @@ namespace octave
       IDA *self = static_cast <IDA *> (user_data);
       self->jacsparse_impl (t, cj, yy, yyp, Jac);
       return 0;
     }
 
     void
     jacsparse_impl (realtype t, realtype cj, N_Vector& yy,
                     N_Vector& yyp, SUNMatrix& Jac);
-#endif
+#  endif
 
     void set_maxstep (realtype maxstep);
 
     void set_initialstep (realtype initialstep);
 
     bool
     interpolate (int& cont, Matrix& output, ColumnVector& tout,
                  int refine, realtype tend, bool haveoutputfcn,
@@ -361,53 +344,53 @@ namespace octave
 
   void
   IDA::set_up (const ColumnVector& y)
   {
     N_Vector yy = ColToNVec(y, num);
 
     if (havejacsparse)
       {
-#if defined (HAVE_SUNDIALS_SUNLINSOL_KLU)
+#  if defined (HAVE_SUNDIALS_SUNLINSOL_KLU)
         // FIXME : one should not allocate space for a full Jacobian
         // when using a sparse format. Consider allocating less space
         // then possibly using SUNSparseMatrixReallocate to increase it.
         sunJacMatrix = SUNSparseMatrix (num, num, num*num, CSC_MAT);
         if (! sunJacMatrix)
           error ("Unable to create sparse Jacobian for Sundials");
 
-        sunLinearSolver = SUNKLU (yy, sunJacMatrix);
+        sunLinearSolver = SUNLinSol_KLU (yy, sunJacMatrix);
         if (! sunLinearSolver)
           error ("Unable to create KLU sparse solver");
 
-        if (IDADlsSetLinearSolver (mem, sunLinearSolver, sunJacMatrix))
+        if (IDASetLinearSolver (mem, sunLinearSolver, sunJacMatrix))
           error ("Unable to set sparse linear solver");
 
-        IDADlsSetJacFn (mem, IDA::jacsparse);
+        IDASetJacFn (mem, IDA::jacsparse);
 
 #  else
         error ("SUNDIALS SUNLINSOL KLU is not available in this version of Octave");
 #  endif
 
       }
     else
       {
 
         sunJacMatrix = SUNDenseMatrix (num, num);
         if (! sunJacMatrix)
           error ("Unable to create dense Jacobian for Sundials");
 
-        sunLinearSolver = SUNDenseLinearSolver (yy, sunJacMatrix);
+        sunLinearSolver = SUNLinSol_Dense (yy, sunJacMatrix);
         if (! sunLinearSolver)
           error ("Unable to create dense linear solver");
 
-        if (IDADlsSetLinearSolver (mem, sunLinearSolver, sunJacMatrix))
+        if (IDASetLinearSolver (mem, sunLinearSolver, sunJacMatrix))
           error ("Unable to set dense linear solver");
 
-        if (havejac && IDADlsSetJacFn (mem, IDA::jacdense) != 0)
+        if (havejac && IDASetJacFn (mem, IDA::jacdense) != 0)
           error ("Unable to set dense Jacobian function");
 
       }
   }
 
   void
   IDA::jacdense_impl (realtype t, realtype cj,
                       N_Vector& yy, N_Vector& yyp, SUNMatrix& JJ)
@@ -465,17 +448,17 @@ namespace octave
     for (int i = 0; i < jac.nnz (); i++)
       {
         rowvals[i] = jac.ridx(i);
         d[i] = jac.data(i);
       }
 
     END_INTERRUPT_WITH_EXCEPTIONS;
   }
-#endif
+#  endif
 
   ColumnVector
   IDA::NVecToCol (N_Vector& v, long int n)
   {
     ColumnVector data (n);
     realtype *punt = nv_data_s (v);
 
     for (octave_idx_type i = 0; i < n; i++)
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2234,26 +2234,23 @@ AC_DEFUN([OCTAVE_CHECK_SUNDIALS_SIZEOF_R
     OCTAVE_CONFIGURE_WARNING([warn_sundials_realtype])
   fi
 ])
 dnl
 dnl Check whether SUNDIALS IDA library is configured with SUNLINSOL_KLU
 dnl enabled.
 dnl
 AC_DEFUN([OCTAVE_CHECK_SUNDIALS_SUNLINSOL_KLU], [
-  AC_CHECK_HEADERS([sundials/sundials_sparse.h sunlinsol/sunlinsol_klu.h])
+  AC_CHECK_HEADERS([sunlinsol/sunlinsol_klu.h])
   AC_CACHE_CHECK([whether SUNDIALS IDA is configured with SUNLINSOL_KLU enabled],
     [octave_cv_sundials_sunlinsol_klu],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
          #if defined (HAVE_IDA_IDA_H)
          #include <ida/ida.h>
          #endif
-         #if defined (HAVE_SUNDIALS_SUNDIALS_SPARSE_H)
-         #include <sundials/sundials_sparse.h>
-         #endif
          #if defined (HAVE_KLU_H)
          #include <klu.h>
          #endif
          #if defined (HAVE_KLU_KLU_H)
          #include <klu/klu.h>
          #endif
          #if defined (HAVE_SUITESPARSE_KLU_H)
          #include <suitesparse/klu.h>
@@ -2278,31 +2275,26 @@ AC_DEFUN([OCTAVE_CHECK_SUNDIALS_SUNLINSO
     OCTAVE_CONFIGURE_WARNING([warn_sundials_sunlinsol_klu])
   fi
 ])
 dnl
 dnl Check whether SUNDIALS IDA library has the SUNLINSOL_DENSE linear solver.
 dnl The IDADENSE API was removed in SUNDIALS version 3.0.0.
 dnl
 AC_DEFUN([OCTAVE_CHECK_SUNDIALS_SUNLINSOL_DENSE], [
-  AC_CHECK_HEADERS([sunlinsol/sunlinsol_dense.h sundials/sundials_matrix.h sundials/sundials_linearsolver.h ida/ida_direct.h])
+  AC_CHECK_HEADERS([sunlinsol/sunlinsol_dense.h])
   AC_CACHE_CHECK([whether SUNDIALS IDA includes the SUNLINSOL_DENSE linear solver],
     [octave_cv_sundials_sunlinsol_dense],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
          #if defined (HAVE_IDA_IDA_H)
          #include <ida/ida.h>
          #endif
-         #if defined (HAVE_SUNDIALS_SUNDIALS_MATRIX_H)
-         #include <sundials/sundials_matrix.h>
+         #if defined (HAVE_SUNLINSOL_SUNLINSOL_DENSE_H)
+         #include <sunlinsol/sunlinsol_dense.h>
          #endif
-         #if defined (HAVE_SUNDIALS_SUNDIALS_LINEARSOLVER_H)
-         #include <sundials/sundials_linearsolver.h>
-         #endif
-         #if defined (HAVE_IDA_IDA_DIRECT_H)
-         #include <ida/ida_direct.h>
          #endif         
          ]], [[
          void *mem = 0;
          long int num = 0;
          IDADense (mem, num);
       ]])],
       octave_cv_sundials_sunlinsol_dense=yes,
       octave_cv_sundials_sunlinsol_dense=no)
