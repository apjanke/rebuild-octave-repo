# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1337858427 -7200
#      Thu May 24 13:20:27 2012 +0200
# Branch gui
# Node ID 66ff321cb62eea099c05625a084a279084218819
# Parent  628eeaf879f761b128eadda3c4c3a02aff293a71
Integrated the editor to be docked with the other widgets.

* FilesDockWidget: Some code style corrections.
* MainWindow: Added a checkable menu entry for the editor and added file editor as dockable widget.
* FileEditor: Moved setting the object name to the interface.
* FileEditorInterface: Added routines to correctly handle closing and opening the dock widget.

diff --git a/gui/src/FilesDockWidget.cpp b/gui/src/FilesDockWidget.cpp
--- a/gui/src/FilesDockWidget.cpp
+++ b/gui/src/FilesDockWidget.cpp
@@ -20,17 +20,18 @@
 
 #include <QApplication>
 #include <QFileInfo>
 #include <QCompleter>
 #include <QSettings>
 #include <QProcess>
 #include <QDebug>
 
-FilesDockWidget::FilesDockWidget (QWidget * parent):QDockWidget (parent)
+FilesDockWidget::FilesDockWidget (QWidget *parent)
+  : QDockWidget (parent)
 {
   setObjectName ("FilesDockWidget");
   setWindowTitle (tr ("Current Directory"));
   setWidget (new QWidget (this));
 
   // Create a toolbar
   m_navigationToolBar = new QToolBar ("", widget ());
   m_navigationToolBar->setAllowedAreas (Qt::TopToolBarArea);
@@ -45,17 +46,17 @@ FilesDockWidget::FilesDockWidget (QWidge
   m_directoryUpAction->setStatusTip (tr ("Move up one directory."));
 
   m_currentDirectory = new QLineEdit (m_navigationToolBar);
   m_currentDirectory->setStatusTip (tr ("Enter the path or filename."));
 
   m_navigationToolBar->addAction (m_directoryUpAction);
   m_navigationToolBar->addWidget (m_currentDirectory);
   connect (m_directoryUpAction, SIGNAL (triggered ()), this,
-	   SLOT (onUpDirectory ()));
+           SLOT (onUpDirectory ()));
 
   // TODO: Add other buttons for creating directories
 
   // Create the QFileSystemModel starting in the home directory
   QString
     homePath = QDir::homePath ();
   // TODO: This should occur after Octave has been initialized and the startup directory of Octave is established
 
@@ -72,33 +73,33 @@ FilesDockWidget::FilesDockWidget (QWidge
   m_fileTreeView->setAlternatingRowColors (true);
   m_fileTreeView->setAnimated (true);
   m_fileTreeView->setColumnHidden (1, true);
   m_fileTreeView->setColumnHidden (2, true);
   m_fileTreeView->setColumnHidden (3, true);
   m_fileTreeView->setStatusTip (tr ("Doubleclick a file to open it."));
 
   setCurrentDirectory (m_fileSystemModel->fileInfo (rootPathIndex).
-		       absoluteFilePath ());
+                       absoluteFilePath ());
 
   connect (m_fileTreeView, SIGNAL (doubleClicked (const QModelIndex &)), this,
-	   SLOT (itemDoubleClicked (const QModelIndex &)));
+           SLOT (itemDoubleClicked (const QModelIndex &)));
 
   // Layout the widgets vertically with the toolbar on top
   QVBoxLayout *
     layout = new QVBoxLayout ();
   layout->setSpacing (0);
   layout->addWidget (m_navigationToolBar);
   layout->addWidget (m_fileTreeView);
   layout->setMargin (1);
   widget ()->setLayout (layout);
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
   connect (m_currentDirectory, SIGNAL (returnPressed ()), this,
-	   SLOT (currentDirectoryEntered ()));
+           SLOT (currentDirectoryEntered ()));
   QCompleter *
     completer = new QCompleter (m_fileSystemModel, this);
   m_currentDirectory->setCompleter (completer);
 
   connect (this, SIGNAL (visibilityChanged(bool)), this, SLOT(handleVisibilityChanged(bool)));
 }
 
 void
@@ -108,17 +109,17 @@ FilesDockWidget::itemDoubleClicked (cons
   QFileInfo fileInfo = m_fileSystemModel->fileInfo (index);
 
   // If it is a directory, cd into it.
   if (fileInfo.isDir ())
     {
       m_fileSystemModel->setRootPath (fileInfo.absolutePath ());
       m_fileTreeView->setRootIndex (index);
       setCurrentDirectory (m_fileSystemModel->fileInfo (index).
-			   absoluteFilePath ());
+                           absoluteFilePath ());
     }
   // Otherwise attempt to open it.
   else
     {
       // Check if the user wants to use a custom file editor.
       QSettings *settings = ResourceManager::instance ()->settings ();
       if (settings->value ("useCustomFileEditor").toBool ())
         {
@@ -143,35 +144,35 @@ FilesDockWidget::setCurrentDirectory (QS
 void
 FilesDockWidget::onUpDirectory (void)
 {
   QDir dir =
     QDir (m_fileSystemModel->filePath (m_fileTreeView->rootIndex ()));
   dir.cdUp ();
   m_fileSystemModel->setRootPath (dir.absolutePath ());
   m_fileTreeView->setRootIndex (m_fileSystemModel->
-				index (dir.absolutePath ()));
+                                index (dir.absolutePath ()));
   setCurrentDirectory (dir.absolutePath ());
 }
 
 void
 FilesDockWidget::currentDirectoryEntered ()
 {
   QFileInfo fileInfo (m_currentDirectory->text ());
   if (fileInfo.isDir ())
     {
       m_fileTreeView->setRootIndex (m_fileSystemModel->
-				    index (fileInfo.absolutePath ()));
+                                    index (fileInfo.absolutePath ()));
       m_fileSystemModel->setRootPath (fileInfo.absolutePath ());
       setCurrentDirectory (fileInfo.absoluteFilePath ());
     }
   else
     {
       if (QFile::exists (fileInfo.absoluteFilePath ()))
-	emit openFile (fileInfo.absoluteFilePath ());
+        emit openFile (fileInfo.absoluteFilePath ());
     }
 }
 
 void
 FilesDockWidget::noticeSettings ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   m_fileTreeView->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
diff --git a/gui/src/FilesDockWidget.h b/gui/src/FilesDockWidget.h
--- a/gui/src/FilesDockWidget.h
+++ b/gui/src/FilesDockWidget.h
@@ -28,21 +28,21 @@
 #include <QToolButton>
 #include <QVBoxLayout>
 #include <QAction>
 #include <QTreeView>
 
 #include <QDockWidget>
 #include <QLineEdit>
 
-class FilesDockWidget:public QDockWidget
+class FilesDockWidget : public QDockWidget
 {
   Q_OBJECT
 public:
-  FilesDockWidget (QWidget * parent = 0);
+  FilesDockWidget (QWidget *parent = 0);
 
 public slots:
   /** Slot for handling a change in directory via double click. */
   void itemDoubleClicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void onUpDirectory ();
 
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -223,16 +223,17 @@ MainWindow::construct ()
   m_currentDirectoryUpToolButton = new QToolButton (this);
   m_currentDirectoryUpToolButton->setIcon (style->standardIcon (QStyle::SP_FileDialogToParent));
 
   // Octave Terminal subwindow.
   m_terminalView = new QTerminal(this);
   setCentralWidget (m_terminalView);
 
   m_fileEditor = new FileEditor (m_terminalView, this);
+  addDockWidget (Qt::BottomDockWidgetArea, m_fileEditor);
 
   QMenu *fileMenu = menuBar ()->addMenu (tr ("&File"));
   QAction *newFileAction
     = fileMenu->addAction (QIcon::fromTheme ("document-new",
       style->standardIcon (QStyle::SP_FileIcon)), tr ("New File"));
 
   QAction *openFileAction
       = fileMenu->addAction (QIcon::fromTheme ("document-open",
@@ -279,16 +280,18 @@ MainWindow::construct ()
   // Window menu
   QMenu *windowMenu = menuBar ()->addMenu (tr ("&Window"));
   QAction *showWorkspaceAction = windowMenu->addAction (tr ("Workspace"));
   showWorkspaceAction->setCheckable (true);
   QAction *showHistoryAction = windowMenu->addAction (tr ("History"));
   showHistoryAction->setCheckable (true);
   QAction *showFileBrowserAction = windowMenu->addAction (tr ("File Browser"));
   showFileBrowserAction->setCheckable (true);
+  QAction *showEditorAction = windowMenu->addAction (tr ("Editor"));
+  showEditorAction->setCheckable (true);
 
   // Help menu
   QMenu *helpMenu = menuBar ()->addMenu (tr ("&Help"));
   QAction *reportBugAction = helpMenu->addAction (tr ("Report Bug"));
   QAction *agoraAction = helpMenu->addAction (tr ("Visit Agora"));
   QAction *octaveForgeAction = helpMenu->addAction (tr ("Visit Octave Forge"));
   helpMenu->addSeparator ();
   QAction *aboutOctaveAction = helpMenu->addAction (tr ("About Octave"));
@@ -319,16 +322,18 @@ MainWindow::construct ()
   connect (aboutOctaveAction, SIGNAL (triggered ()), this, SLOT (showAboutOctave ()));
 
   connect (showWorkspaceAction, SIGNAL (toggled (bool)), m_workspaceView, SLOT (setShown (bool)));
   connect (m_workspaceView, SIGNAL (activeChanged (bool)), showWorkspaceAction, SLOT (setChecked (bool)));
   connect (showHistoryAction, SIGNAL (toggled (bool)), m_historyDockWidget, SLOT (setShown (bool)));
   connect (m_historyDockWidget, SIGNAL (activeChanged (bool)), showHistoryAction, SLOT (setChecked (bool)));
   connect (showFileBrowserAction, SIGNAL (toggled (bool)), m_filesDockWidget, SLOT (setShown (bool)));
   connect (m_filesDockWidget, SIGNAL (activeChanged (bool)), showFileBrowserAction, SLOT (setChecked (bool)));
+  connect (showEditorAction, SIGNAL (toggled (bool)), m_fileEditor, SLOT (setShown (bool)));
+  connect (m_fileEditor, SIGNAL (activeChanged (bool)), showEditorAction, SLOT (setChecked (bool)));
 
   //connect (this, SIGNAL (settingsChanged ()), m_workspaceView, SLOT (noticeSettings ()));
   //connect (this, SIGNAL (settingsChanged ()), m_historyDockWidget, SLOT (noticeSettings ()));
   connect (this, SIGNAL (settingsChanged ()), m_filesDockWidget, SLOT (noticeSettings ()));
 
   connect (m_filesDockWidget, SIGNAL (openFile (QString)), m_fileEditor, SLOT (requestOpenFile (QString)));
   connect (m_historyDockWidget, SIGNAL (information (QString)), this, SLOT (reportStatusMessage (QString)));
   connect (m_historyDockWidget, SIGNAL (commandDoubleClicked (QString)), this, SLOT (handleCommandDoubleClicked (QString)));
diff --git a/gui/src/editor/FileEditor.cpp b/gui/src/editor/FileEditor.cpp
--- a/gui/src/editor/FileEditor.cpp
+++ b/gui/src/editor/FileEditor.cpp
@@ -248,22 +248,23 @@ FileEditor::handleEditorStateChanged ()
       m_copyAction->setEnabled (copyAvailable);
       m_cutAction->setEnabled (copyAvailable);
     }
 }
 
 void
 FileEditor::construct ()
 {
+  QWidget *widget = new QWidget (this);
   QSettings *settings = ResourceManager::instance ()->settings ();
   QStyle *style = QApplication::style ();
 
-  m_menuBar = new QMenuBar (this);
-  m_toolBar = new QToolBar (this);
-  m_tabWidget = new QTabWidget (this);
+  m_menuBar = new QMenuBar (widget);
+  m_toolBar = new QToolBar (widget);
+  m_tabWidget = new QTabWidget (widget);
   m_tabWidget->setTabsClosable (true);
   //m_longTitle = settings->value ("editor/longWindowTitle",true).toBool ();
 
   // Theme icons with QStyle icons as fallback
   QAction *newAction = new QAction (
         QIcon::fromTheme("document-new",style->standardIcon (QStyle::SP_FileIcon)),
         tr("&New File"), m_toolBar);
 
@@ -282,18 +283,18 @@ FileEditor::construct ()
   QAction *undoAction = new QAction (
         QIcon::fromTheme("edit-undo",style->standardIcon (QStyle::SP_ArrowLeft)),
         tr("&Undo"), m_toolBar);
 
   QAction *redoAction = new QAction (
         QIcon::fromTheme("edit-redo",style->standardIcon (QStyle::SP_ArrowRight)),
         tr("&Redo"), m_toolBar);
 
-  m_copyAction = new QAction (QIcon::fromTheme("edit-copy"), tr("&Copy"),m_toolBar);
-  m_cutAction = new QAction (QIcon::fromTheme("edit-cut"), tr("Cu&t"),m_toolBar);
+  m_copyAction = new QAction (QIcon::fromTheme ("edit-copy"), tr ("&Copy"), m_toolBar);
+  m_cutAction = new QAction (QIcon::fromTheme ("edit-cut"), tr ("Cu&t"), m_toolBar);
 
   QAction *pasteAction              = new QAction (QIcon::fromTheme ("edit-paste"), tr ("&Paste"),m_toolBar);
   QAction *nextBookmarkAction       = new QAction (tr ("&Next Bookmark"),m_toolBar);
   QAction *prevBookmarkAction       = new QAction (tr ("Pre&vious Bookmark"),m_toolBar);
   QAction *toggleBookmarkAction     = new QAction (tr ("Toggle &Bookmark"),m_toolBar);
   QAction *removeBookmarkAction     = new QAction (tr ("&Remove All Bookmarks"),m_toolBar);
   QAction *commentSelectedAction    = new QAction (tr ("&Comment Selected Text"),m_toolBar);
   QAction *uncommentSelectedAction  = new QAction (tr ("&Uncomment Selected Text"),m_toolBar);
@@ -367,17 +368,18 @@ FileEditor::construct ()
   runMenu->addAction (runAction);
   m_menuBar->addMenu (runMenu);
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (m_menuBar);
   layout->addWidget (m_toolBar);
   layout->addWidget (m_tabWidget);
   layout->setMargin (0);
-  setLayout (layout);
+  widget->setLayout (layout);
+  setWidget (widget);
 
   connect (newAction,               SIGNAL (triggered ()), this, SLOT (requestNewFile ()));
   connect (openAction,              SIGNAL (triggered ()), this, SLOT (requestOpenFile ()));
   connect (undoAction,              SIGNAL (triggered ()), this, SLOT (requestUndo ()));
   connect (redoAction,              SIGNAL (triggered ()), this, SLOT (requestRedo ()));
   connect (m_copyAction,            SIGNAL (triggered ()), this, SLOT (requestCopy ()));
   connect (m_cutAction,             SIGNAL (triggered ()), this, SLOT (requestCut ()));
   connect (pasteAction,             SIGNAL (triggered ()), this, SLOT (requestPaste ()));
diff --git a/gui/src/editor/FileEditorInterface.h b/gui/src/editor/FileEditorInterface.h
--- a/gui/src/editor/FileEditorInterface.h
+++ b/gui/src/editor/FileEditorInterface.h
@@ -13,37 +13,56 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef FILEEDITORINTERFACE_H
 #define FILEEDITORINTERFACE_H
 
-#include <QWidget>
+#include <QDockWidget>
 
 class QTerminal;
 class MainWindow;
 
-class FileEditorInterface : public QWidget
+class FileEditorInterface : public QDockWidget
 {
   Q_OBJECT
 
   public:
     FileEditorInterface (QTerminal *terminal, MainWindow *mainWindow)
-      : QWidget ()
+      : QDockWidget ((QWidget*)mainWindow) // QDockWidget constructor is explicit, hence the cast.
     {
+      setObjectName ("FileEditor");
       m_terminal = terminal;
       m_mainWindow = mainWindow;
+
+      connect (this, SIGNAL (visibilityChanged (bool)), this, SLOT (handleVisibilityChanged (bool)));
     }
 
     virtual ~FileEditorInterface () { }
   public slots:
     virtual void requestNewFile () = 0;
     virtual void requestOpenFile () = 0;
     virtual void requestOpenFile (QString fileName) = 0;
 
+  signals:
+      void activeChanged (bool active);
+
   protected:
     QTerminal* m_terminal;
     MainWindow* m_mainWindow;
+
+    void closeEvent (QCloseEvent *event)
+    {
+      emit activeChanged (false);
+      QDockWidget::closeEvent (event);
+    }
+
+  protected slots:
+    void handleVisibilityChanged (bool visible)
+    {
+      if (visible)
+        emit activeChanged (true);
+    }
 };
 
 #endif // FILEEDITORINTERFACE_H
