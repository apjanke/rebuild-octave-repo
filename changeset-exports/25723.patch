# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1533185915 -7200
#      Thu Aug 02 06:58:35 2018 +0200
# Node ID 22544083fe2c82fd17d5f1c399a86c0f335d80a0
# Parent  05e714d0b58908cf239c0579b36c17a07074adb6
use common callback for workspace actions initiated by gui

* main-window.cc (handle_save_workspace_request, handle_load_workspace_request,
  handle_clear_workspace_request): replace post_event by inserting a new
  octave_cmd_builtin into the common command queue
  (save_workspace_callback, load_workspace_callback, clear_workspace_callback):
  remove separate callback functions

* main-window.h: remove separate callback functions

* octave-cmd.cc (octave_cmd_builtin::execute): add option for setting
  workspace after executing the desired function

* octave-cmd.h: add update option for setting workspace

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -372,44 +372,53 @@ namespace octave
   void main_window::handle_save_workspace_request (void)
   {
     QString file
       = QFileDialog::getSaveFileName (this, tr ("Save Workspace As"), ".",
                                       nullptr, nullptr,
                                       QFileDialog::DontUseNativeDialog);
 
     if (! file.isEmpty ())
-      octave_link::post_event (this, &main_window::save_workspace_callback,
-                               file.toStdString ());
+      {
+        octave_cmd_builtin *cmd
+                = new octave_cmd_builtin (&Fsave, ovl (file.toStdString ()));
+        m_cmd_queue.add_cmd (cmd);
+      }
   }
 
   void main_window::handle_load_workspace_request (const QString& file_arg)
   {
     QString file = file_arg;
 
     if (file.isEmpty ())
       file = QFileDialog::getOpenFileName (this, tr ("Load Workspace"), ".",
                                            nullptr, nullptr,
                                            QFileDialog::DontUseNativeDialog);
 
     if (! file.isEmpty ())
-      octave_link::post_event (this, &main_window::load_workspace_callback,
-                               file.toStdString ());
+      {
+        octave_cmd_builtin *cmd
+            = new octave_cmd_builtin (&Fload, ovl (file.toStdString ()),
+                                      0, octave_cmd_builtin::CMD_UPD_WORKSPACE);
+        m_cmd_queue.add_cmd (cmd);
+      }
   }
 
   void main_window::handle_open_any_request (const QString& file_arg)
   {
     if (! file_arg.isEmpty ())
       octave_link::post_event (this, &main_window::open_any_callback,
                                file_arg.toStdString ());
   }
 
   void main_window::handle_clear_workspace_request (void)
   {
-    octave_link::post_event (this, &main_window::clear_workspace_callback);
+    octave_cmd_builtin *cmd
+          = new octave_cmd_builtin (&Fclear, ovl ());
+    m_cmd_queue.add_cmd (cmd);
   }
 
   void main_window::handle_clear_command_window_request (void)
   {
     octave_link::post_event (this, &main_window::clear_command_window_callback);
   }
 
   void main_window::handle_clear_history_request (void)
@@ -2562,36 +2571,16 @@ namespace octave
         emit settings_changed (settings);
       }
 
     // We are done: Unlock and wake the worker thread
     m_octave_qt_link->unlock ();
     m_octave_qt_link->wake_all ();
   }
 
-  void main_window::save_workspace_callback (const std::string& file)
-  {
-    // INTERPRETER THREAD
-
-    Fsave (ovl (file));
-  }
-
-  void main_window::load_workspace_callback (const std::string& file)
-  {
-    // INTERPRETER THREAD
-
-    Fload (ovl (file));
-
-    symbol_scope scope
-      = __get_current_scope__ ("main_window::load_workspace_callback");
-
-    if (scope)
-      octave_link::set_workspace (true, scope);
-  }
-
   void main_window::rename_variable_callback (const main_window::name_pair& names)
   {
     // INTERPRETER THREAD
 
     symbol_scope scope
       = __get_current_scope__ ("main_window::rename_variable_callback");
 
     if (scope)
@@ -2644,26 +2633,16 @@ namespace octave
     // Update the workspace since open.m may have loaded new variables.
     symbol_scope scope
       = __get_current_scope__ ("main_window::open_any_callback");
 
     if (scope)
           octave_link::set_workspace (true, scope);
   }
 
-  void main_window::clear_workspace_callback (void)
-  {
-    // INTERPRETER THREAD
-
-    interpreter& interp
-      = __get_interpreter__ ("main_window::clear_workspace_callback");
-
-    Fclear (interp);
-  }
-
   void main_window::clear_history_callback (void)
   {
     // INTERPRETER THREAD
 
     Fhistory (ovl ("-c"));
   }
 
   void main_window::refresh_workspace_callback (void)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -318,34 +318,28 @@ namespace octave
     void construct_documentation_menu (QMenu *p);
 
     void construct_news_menu (QMenuBar *p);
 
     void construct_tool_bar (void);
 
     QString gui_preference_adjust (const QString& key, const QString& value);
 
-    void save_workspace_callback (const std::string& file);
-
-    void load_workspace_callback (const std::string& file);
-
     void open_any_callback (const std::string& file);
 
     void rename_variable_callback (const name_pair& names);
 
     void command_window_undo_callback (void);
 
     void clear_command_window_callback (void);
 
     void resize_command_window_callback (void);
 
     void set_screen_size_callback (const int_pair&);
 
-    void clear_workspace_callback (void);
-
     void clear_history_callback (void);
 
     void refresh_workspace_callback (void);
 
     bool focus_console_after_command (void);
 
     void new_figure_callback (void);
 
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -76,16 +76,32 @@ namespace octave
   }
 
   void octave_cmd_builtin::execute (interpreter& interp)
   {
     if (m_callback_fi)
       m_callback_fi (interp, m_argin, m_nargin);
     else if (m_callback_f)
       m_callback_f (m_argin, m_nargin);
+
+    switch (m_update)
+      {
+        case CMD_UPD_WORKSPACE:
+          {
+            symbol_scope scope
+                = __get_current_scope__ ("octave_cmd_builtin::execute");
+            if (scope)
+              octave_link::set_workspace (true, scope);
+            break;
+          }
+
+        default:
+          break;
+      }
+
   }
 
   void octave_cmd_debug::execute (interpreter& interp)
   {
     if (m_cmd == "step")
       {
         F__db_next_breakpoint_quiet__ (interp, ovl (m_suppress_dbg_location));
         Fdbstep (interp);
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -76,16 +76,17 @@ namespace octave
   };
 
   class octave_cmd_builtin : public octave_cmd
   {
     public:
 
     enum cmd_upd {
       CMD_UPD_NO        = 0,
+      CMD_UPD_WORKSPACE = 1
     };
 
     // C'tor for Fxxx requiring the interpreter
     octave_cmd_builtin (
           octave_value_list (*Ff) (octave::interpreter&,
                                    const octave_value_list&, int),
           octave_value_list argin = ovl (), int nargin = 0,
           cmd_upd update = CMD_UPD_NO, octave_qt_link *oct_qt_link = nullptr)
