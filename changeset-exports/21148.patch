# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1454045074 -3600
#      Fri Jan 29 06:24:34 2016 +0100
# Node ID e8c3590da9ff7f67726fccb300fbe26e7aead9b3
# Parent  95feb42d7a975bd81283707cb8be70a52f25fe0a
update directory in gui after add-path/change-dir dialog

* file-editor-tab.cc (file_editor_tab): get main window from editor which is
  given as argument;
  (add_breakpoint_callback, remove_breakpoint_callback,
  remove_all_breakpoints_callback): call file_in_path via the instance of
  octave_qt_link since it is not static anymore

* file-editor-tab.h: include main-window.h, contructor gets editor widget as
  first argument, store the main window widget in a class variable

* file-editor.cc (request_new_file, request_open_file): pass own pointer
  to a new file editor tab

* main-window.cc (run_file_callback): pass the instance of octave_qt_link
  to the octave cmd

* main-window.h: new function returning the instance of octave_qt_link

* octave-cmd.cc (execute): call file_in_path via instance (not static)

* octave-cmd.h: instance of octave_qt_link is given as argument and stored
  in a class variable

* octave-qt-link.cc (file_in_path): update gui directory when user wants to
  change the directory

* octave-qt-link.h: file_in_path is normal memebr, not static anymore

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -56,24 +56,24 @@ along with Octave; see the file COPYING.
 #include <QTextCodec>
 #include <QStyle>
 #include <QTextBlock>
 #include <QLabel>
 #include <QCheckBox>
 #include <QDialogButtonBox>
 #include <QPushButton>
 
+#include "file-ops.h"
+
 #include "resource-manager.h"
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-txt-lexer.h"
 #include "marker.h"
 
-#include "file-ops.h"
-
 #include "debug.h"
 #include "octave-qt-link.h"
 #include "version.h"
 #include "utils.h"
 #include "defaults.h"
 #include <oct-map.h>
 
 bool file_editor_tab::_cancelled = false;
@@ -81,23 +81,25 @@ bool file_editor_tab::_cancelled = false
 /**
  A file_editor_tab object consists of a text area and three left margins.
  The first holds breakpoints, bookmarks, and the debug program counter.
  The second holds line numbers.
  The third holds "fold" marks, to hide sections of text.
  */
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
-file_editor_tab::file_editor_tab (const QString& directory_arg)
+file_editor_tab::file_editor_tab (octave_dock_widget *editor,
+                                  const QString& directory_arg)
 {
   _lexer_apis = 0;
   _is_octave_file = true;
   _lines_changed = false;
 
   _ced = directory_arg;
+  _main_win = static_cast<main_window*> (editor->parent ());
 
   _file_name = "";
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
   _line = 0;
   _col  = 0;
 
@@ -837,34 +839,34 @@ file_editor_tab::remove_bookmark (const 
 }
 
 void
 file_editor_tab::add_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (octave_qt_link::file_in_path (info.file, info.dir))
+  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
     bp_table::add_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (octave_qt_link::file_in_path (info.file, info.dir))
+  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
     bp_table::remove_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_all_breakpoints_callback (const bp_info& info)
 {
-  if (octave_qt_link::file_in_path (info.file, info.dir))
+  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
     bp_table::remove_all_breakpoints_in_file (info.function_name, true);
 }
 
 file_editor_tab::bp_info::bp_info (const QString& fname, int l)
   : line (l), file (fname.toStdString ())
 {
   QFileInfo file_info (fname);
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -38,30 +38,31 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #include "ovl.h"
 #endif
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
 #include "builtin-defun-decls.h"
+#include "main-window.h"
 
 #include "marker.h" /* Only needed for typedef of "QIntList", which may be
                        typedefed elsewhere.  Could use common location. */
 
 
 class file_editor;
 
 class file_editor_tab : public QWidget
 {
   Q_OBJECT
 
 public:
 
-  file_editor_tab (const QString& directory = "");
+  file_editor_tab (octave_dock_widget *editor, const QString& directory = "");
 
   ~file_editor_tab (void);
 
   octave_qscintilla *qsci_edit_area () { return _edit_area; }
 
   // Will initiate close if associated with the identifier tag.
   bool conditional_close (void);
 
@@ -249,16 +250,17 @@ private:
   QString get_function_name ();
 
   void do_smart_indent (void);
 
   QsciScintilla::EolMode detect_eol_mode ();
   void update_eol_indicator ();
 
   octave_qscintilla *_edit_area;
+  main_window *_main_win;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
   QLabel *_eol_indicator;
   QLabel *_enc_indicator;
 
   QsciScintilla::EolMode _save_as_desired_eol;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -196,17 +196,17 @@ file_editor::request_new_file (const QSt
   // some initial contents and even without being sure a new file is opened
   if (call_custom_editor ())
     return;
 
   // New file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
-  file_editor_tab *fileEditorTab = new file_editor_tab (ced);
+  file_editor_tab *fileEditorTab = new file_editor_tab (this, ced);
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       focus ();                                 // focus editor and new tab
     }
 }
 
@@ -446,17 +446,17 @@ file_editor::request_open_file (const QS
           if (! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
             {
               emit fetab_set_focus (tab);
               focus ();
             }
         }
       else
         {
-          file_editor_tab *fileEditorTab = new file_editor_tab ();
+          file_editor_tab *fileEditorTab = new file_editor_tab (this);
           if (fileEditorTab)
             {
               fileEditorTab->set_encoding (encoding);
               QString result = fileEditorTab->load_file (openFileName);
               if (result == "")
                 {
                   // Supply empty title then have the file_editor_tab update
                   // with full or short name.
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -333,17 +333,17 @@ main_window::run_file_in_terminal (const
   octave_link::post_event (this, &main_window::run_file_callback, info);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_callback (const QFileInfo& info)
 {
-  octave_cmd_eval *cmd = new octave_cmd_eval (info);
+  octave_cmd_eval *cmd = new octave_cmd_eval (info, _octave_qt_link);
   _cmd_queue.add_cmd (cmd);
 }
 
 void
 main_window::handle_new_figure_request (void)
 {
   octave_link::post_event (this, &main_window::new_figure_callback);
 }
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -77,16 +77,18 @@ public:
   main_window (QWidget *parent = 0, bool start_gui = true);
 
   ~main_window (void);
 
   bool command_window_has_focus (void) const;
 
   void focus_command_window (void);
 
+  octave_qt_link* get_octave_qt_link () { return _octave_qt_link; };
+
 signals:
 
   void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
   void editor_focus_changed (bool);
 
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include "octave-cmd.h"
 
 #include "octave-qt-link.h"
 #include "cmd-edit.h"
 #include "builtin-defun-decls.h"
 #include "utils.h"
 
+#include "main-window.h"
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_exec: executing a command
 
 void
 octave_cmd_exec::execute ()
 {
   std::string pending_input = command_editor::get_current_line ();
@@ -60,17 +61,17 @@ octave_cmd_eval::execute ()
   std::string file_path = _info.absoluteFilePath ().toStdString ();
 
   std::string pending_input = command_editor::get_current_line ();
 
   if (valid_identifier (function_name.toStdString ()))
     {
       // valid identifier: call as function with possibility to debug
       std::string path = _info.absolutePath ().toStdString ();
-      if (octave_qt_link::file_in_path (file_path, path))
+      if (_octave_qt_link->file_in_path (file_path, path))
         command_editor::replace_line (function_name.toStdString ());
     }
   else
     {
       // no valid identifier: use Fsource (), no debug possible
       Fsource (ovl (file_path));
       command_editor::replace_line ("");
     }
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -61,22 +61,28 @@ protected:
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_eval
 
 class octave_cmd_eval : public octave_cmd
 {
 public:
 
-  octave_cmd_eval (const QFileInfo& info) : octave_cmd () { _info = info; };
+  octave_cmd_eval (const QFileInfo& info,
+                   octave_qt_link* octave_qt_link) : octave_cmd ()
+    { _info = info;
+      _octave_qt_link = octave_qt_link;
+    };
+
   void execute ();
 
 protected:
 
   QFileInfo _info;
+  octave_qt_link *_octave_qt_link;
 };
 
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_debug
 
 class octave_cmd_debug : public octave_cmd_exec
 {
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -612,16 +612,17 @@ octave_qt_link::file_in_path (const std:
 
   if (! ok)
     {
       int action = debug_cd_or_addpath_error (file, dir, addpath_option);
       switch (action)
         {
         case 1:
           Fcd (ovl (dir));
+          update_directory ();
           ok = true;
           break;
 
         case 2:
           load_path::prepend (dir);
           ok = true;
           break;
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -124,17 +124,17 @@ public:
   void do_execute_in_debugger_event (const std::string& file, int line);
   void do_exit_debugger_event (void);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line);
 
   void do_set_default_prompts (std::string& ps1, std::string& ps2,
                                std::string& ps4);
 
-  static bool file_in_path (const std::string& file, const std::string& dir);
+  bool file_in_path (const std::string& file, const std::string& dir);
 
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
   QMutex mutex;
   QWaitCondition waitcondition;
   void shutdown_confirmation (bool sd) {_shutdown_confirm_result = sd;}
