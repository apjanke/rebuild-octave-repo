# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510879140 18000
#      Thu Nov 16 19:39:00 2017 -0500
# Node ID f494b87d2a93b7a0042ddcaa7320197622c66270
# Parent  94c4ebecca6e4f51d407479d99c0c6e7ccd454e7
rename scope to symbol_scope

* symscope.h, symscope.cc: Rename from scope.h and scope.cc.
(class symbol_scope): Rename from scope.  Change all uses.

diff --git a/libinterp/corefcn/fcn-info.cc b/libinterp/corefcn/fcn-info.cc
--- a/libinterp/corefcn/fcn-info.cc
+++ b/libinterp/corefcn/fcn-info.cc
@@ -29,18 +29,18 @@ along with Octave; see the file COPYING.
 
 #include "fcn-info.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "parse.h"
-#include "scope.h"
 #include "symrec.h"
+#include "symscope.h"
 #include "symtab.h"
 
 namespace octave
 {
   octave_value
   fcn_info::fcn_info_rep::load_private_function (const std::string& dir_name)
   {
     octave_value retval;
@@ -369,17 +369,17 @@ namespace octave
   }
 
   octave_value
   fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
                                  bool local_funcs)
   {
     if (local_funcs)
       {
-        scope *curr_scope
+        symbol_scope *curr_scope
           = __get_current_scope__ ("fcn_info::fcn_info_rep::xfind");
 
         octave_user_function *current_fcn
           = curr_scope ? curr_scope->function () : nullptr;
 
         // Local function.
 
         if (current_fcn)
@@ -587,17 +587,17 @@ namespace octave
 
     // Command-line function.
 
     if (cmdline_function.is_defined ())
       return cmdline_function;
 
     // Private function.
 
-    scope *curr_scope
+    symbol_scope *curr_scope
       = __get_current_scope__ ("fcn_info::fcn_info_rep::x_builtin_find");
 
     octave_user_function *current_fcn = curr_scope ? curr_scope->function () : nullptr;
 
     if (current_fcn)
       {
         std::string dir_name = current_fcn->dir_name ();
 
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -74,21 +74,21 @@ COREFCN_INC = \
   %reldir%/oct-stream.h \
   %reldir%/oct-strstrm.h \
   %reldir%/oct.h \
   %reldir%/octave-default-image.h \
   %reldir%/octave-link.h \
   %reldir%/pager.h \
   %reldir%/pr-output.h \
   %reldir%/procstream.h \
-  %reldir%/scope.h \
   %reldir%/sighandlers.h \
   %reldir%/sparse-xdiv.h \
   %reldir%/sparse-xpow.h \
   %reldir%/symrec.h \
+  %reldir%/symscope.h \
   %reldir%/symtab.h \
   %reldir%/sysdep.h \
   %reldir%/text-renderer.h \
   %reldir%/toplev.h \
   %reldir%/txt-eng.h \
   %reldir%/url-handle-manager.h \
   %reldir%/utils.h \
   %reldir%/variables.h \
@@ -220,30 +220,30 @@ COREFCN_SRC = \
   %reldir%/psi.cc \
   %reldir%/quad.cc \
   %reldir%/quadcc.cc \
   %reldir%/qz.cc \
   %reldir%/rand.cc \
   %reldir%/rcond.cc \
   %reldir%/regexp.cc \
   %reldir%/schur.cc \
-  %reldir%/scope.cc \
   %reldir%/sighandlers.cc \
   %reldir%/sparse-xdiv.cc \
   %reldir%/sparse-xpow.cc \
   %reldir%/sparse.cc \
   %reldir%/spparms.cc \
   %reldir%/sqrtm.cc \
   %reldir%/str2double.cc \
   %reldir%/strfind.cc \
   %reldir%/strfns.cc \
   %reldir%/sub2ind.cc \
   %reldir%/svd.cc \
   %reldir%/sylvester.cc \
   %reldir%/symrec.cc \
+  %reldir%/symscope.cc \
   %reldir%/symtab.cc \
   %reldir%/syscalls.cc \
   %reldir%/sysdep.cc \
   %reldir%/time.cc \
   %reldir%/text-renderer.cc \
   %reldir%/toplev.cc \
   %reldir%/tril.cc \
   %reldir%/tsearch.cc \
diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -30,30 +30,30 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-time.h"
 
 #include "fcn-info.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
-#include "scope.h"
 #include "symrec.h"
+#include "symscope.h"
 #include "symtab.h"
 
 namespace octave
 {
   symbol_record::context_id
   symbol_record::symbol_record_rep::get_decl_scope_context (void) const
   {
     return m_decl_scope ? m_decl_scope->current_context () : 0;
   }
 
   void
-  symbol_record::symbol_record_rep::clear (scope *sid)
+  symbol_record::symbol_record_rep::clear (symbol_scope *sid)
   {
     if (m_fwd_rep)
       {
         m_fwd_rep->clear (sid);
         return;
       }
 
     if (! (is_hidden () || is_inherited ())
@@ -77,17 +77,17 @@ namespace octave
   symbol_record::symbol_record_rep::init_persistent (void)
   {
     if (m_fwd_rep)
       {
         m_fwd_rep->init_persistent ();
         return;
       }
 
-    scope *curr_scope
+    symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::init_persistent");
 
     if (! is_defined ())
       {
         mark_persistent ();
 
         assign (curr_scope->persistent_varval (name));
       }
@@ -102,24 +102,24 @@ namespace octave
     if (m_fwd_rep)
       {
         m_fwd_rep->erase_persistent ();
         return;
       }
 
     unmark_persistent ();
 
-    scope *curr_scope
+    symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::erase_persistent");
 
     curr_scope->erase_persistent (name);
   }
 
   symbol_record::symbol_record_rep *
-  symbol_record::symbol_record_rep::dup (scope *new_scope) const
+  symbol_record::symbol_record_rep::dup (symbol_scope *new_scope) const
   {
     // FIXME: is this the right thing do to?
     if (m_fwd_rep)
       return m_fwd_rep->dup (new_scope);
 
     return new symbol_record_rep (new_scope, name, varval (), storage_class);
   }
 
@@ -160,17 +160,17 @@ namespace octave
   }
 
   octave_value&
   symbol_record::symbol_record_rep::xpersistent_varref (void)
   {
     if (m_fwd_rep)
       return m_fwd_rep->xpersistent_varref ();
 
-    scope *curr_scope
+    symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varref");
 
     return (curr_scope
             ? curr_scope->persistent_varref (name) : dummy_octave_value);
   }
 
   octave_value
   symbol_record::symbol_record_rep::xglobal_varval (void) const
@@ -185,17 +185,17 @@ namespace octave
   }
 
   octave_value
   symbol_record::symbol_record_rep::xpersistent_varval (void) const
   {
     if (m_fwd_rep)
       return m_fwd_rep->xpersistent_varval ();
 
-    scope *curr_scope
+    symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varval");
 
     return curr_scope ? curr_scope->persistent_varval (name) : octave_value ();
   }
 
   symbol_record::symbol_record (void)
     : rep (new symbol_record_rep (__get_current_scope__ ("symbol_record"),
                                   "", octave_value (), local))
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 class octave_user_function;
 
 #include "ov.h"
 #include "ovl.h"
 
 namespace octave
 {
   class fcn_info;
-  class scope;
+  class symbol_scope;
 
   class symbol_record
   {
   public:
 
     typedef size_t context_id;
 
     // generic variable
@@ -75,17 +75,17 @@ namespace octave
     static const unsigned int added_static = 128;
 
   private:
 
     class symbol_record_rep
     {
     public:
 
-      symbol_record_rep (scope *s, const std::string& nm,
+      symbol_record_rep (symbol_scope *s, const std::string& nm,
                          const octave_value& v, unsigned int sc)
         : m_decl_scope (s), curr_fcn (nullptr), name (nm),
           m_fwd_rep (nullptr), value_stack (),
           storage_class (sc), /* finfo (), */ valid (true), count (1)
       {
         value_stack.push_back (v);
       }
 
@@ -195,17 +195,17 @@ namespace octave
           {
             if (context < value_stack.size ())
               return value_stack[context];
             else
               return octave_value ();
           }
       }
 
-      void push_context (scope *sid)
+      void push_context (symbol_scope *sid)
       {
         if (m_fwd_rep)
           {
             m_fwd_rep->push_context (sid);
             return;
           }
 
         if (! (is_persistent () || is_global ())
@@ -222,17 +222,17 @@ namespace octave
       //       foo (n-1);
       //     else
       //       eval ("x = 1");
       //     endif
       //   endfunction
       //
       // Here, X should only exist in the final stack frame.
 
-      size_t pop_context (scope *sid)
+      size_t pop_context (symbol_scope *sid)
       {
         if (m_fwd_rep)
           return m_fwd_rep->pop_context (sid);
 
         size_t retval = 1;
 
         if (! (is_persistent () || is_global ())
             && sid == decl_scope ())
@@ -250,17 +250,17 @@ namespace octave
           {
             m_fwd_rep->clear ();
             return;
           }
 
         clear (decl_scope ());
       }
 
-      void clear (scope *sid);
+      void clear (symbol_scope *sid);
 
       bool is_defined (void) const
       {
         if (m_fwd_rep)
           return m_fwd_rep->is_defined ();
 
         return varval ().is_defined ();
       }
@@ -537,17 +537,17 @@ namespace octave
             return;
           }
 
         valid = false;
       }
 
       void erase_persistent (void);
 
-      scope *decl_scope (void)
+      symbol_scope *decl_scope (void)
       {
         if (m_fwd_rep)
           return m_fwd_rep->decl_scope ();
 
         return m_decl_scope;
       }
 
       void set_curr_fcn (octave_user_function *fcn)
@@ -563,21 +563,21 @@ namespace octave
 
       // We don't forward more than once, so no need to forward the
       // next two.
 
       void bind_fwd_rep (symbol_record_rep *fwd_rep) { m_fwd_rep = fwd_rep; }
 
       void unbind_fwd_rep (void) { m_fwd_rep = nullptr; }
 
-      symbol_record_rep * dup (scope *new_scope) const;
+      symbol_record_rep * dup (symbol_scope *new_scope) const;
 
       octave_value dump (void) const;
 
-      scope *m_decl_scope;
+      symbol_scope *m_decl_scope;
 
       octave_user_function *curr_fcn;
 
       std::string name;
 
       symbol_record_rep *m_fwd_rep;
 
       std::deque<octave_value> value_stack;
@@ -600,17 +600,17 @@ namespace octave
 
       octave_value xpersistent_varval (void) const;
     };
 
   public:
 
     symbol_record (void);
 
-    symbol_record (scope *s, const std::string& nm = "",
+    symbol_record (symbol_scope *s, const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
       : rep (new symbol_record_rep (s, nm, v, sc)) { }
 
     symbol_record (const symbol_record& sr)
       : rep (sr.rep)
     {
       rep->count++;
@@ -631,17 +631,17 @@ namespace octave
     }
 
     ~symbol_record (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
-    symbol_record dup (scope *sid) const
+    symbol_record dup (symbol_scope *sid) const
     {
       return symbol_record (rep->dup (sid));
     }
 
     const std::string& name (void) const { return rep->name; }
 
     void rename (const std::string& new_name) { rep->name = new_name; }
 
@@ -684,23 +684,23 @@ namespace octave
       return rep->varref ();
     }
 
     octave_value varval (void) const
     {
       return rep->varval ();
     }
 
-    void push_context (scope *sid) { rep->push_context (sid); }
+    void push_context (symbol_scope *sid) { rep->push_context (sid); }
 
-    size_t pop_context (scope *sid) { return rep->pop_context (sid); }
+    size_t pop_context (symbol_scope *sid) { return rep->pop_context (sid); }
 
     void clear (void) { rep->clear (); }
 
-    void clear (scope *sid) { rep->clear (sid); }
+    void clear (symbol_scope *sid) { rep->clear (sid); }
 
     bool is_defined (void) const
     {
       return rep->is_defined ();
     }
 
     bool is_undefined (void) const
     {
@@ -745,17 +745,17 @@ namespace octave
     void unmark_added_static (void) { rep->unmark_added_static (); }
 
     void init_persistent (void) { rep->init_persistent (); }
 
     void erase_persistent (void) { rep->erase_persistent (); }
 
     void invalidate (void) { rep->invalidate (); }
 
-    scope *decl_scope (void) { return rep->decl_scope (); }
+    symbol_scope *decl_scope (void) { return rep->decl_scope (); }
 
     unsigned int xstorage_class (void) const { return rep->storage_class; }
 
     void set_curr_fcn (octave_user_function *fcn)
     {
       rep->set_curr_fcn (fcn);
     }
 
diff --git a/libinterp/corefcn/scope.cc b/libinterp/corefcn/symscope.cc
rename from libinterp/corefcn/scope.cc
rename to libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/scope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -27,31 +27,31 @@ along with Octave; see the file COPYING.
 
 #include <sstream>
 
 #include "fcn-info.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
-#include "scope.h"
 #include "symrec.h"
+#include "symscope.h"
 #include "symtab.h"
 #include "utils.h"
 
 namespace octave
 {
   octave_value
-  scope::find (const std::string& name, const octave_value_list& args,
-               bool skip_variables, bool local_funcs)
+  symbol_scope::find (const std::string& name, const octave_value_list& args,
+                      bool skip_variables, bool local_funcs)
   {
     // Variable.
 
     symbol_table& symtab
-      = __get_symbol_table__ ("scope::find");
+      = __get_symbol_table__ ("symbol_scope::find");
 
     if (! skip_variables)
       {
         table_iterator p = m_symbols.find (name);
 
         if (p != m_symbols.end ())
           {
             symbol_record sr = p->second;
@@ -79,17 +79,17 @@ namespace octave
         if (fcn.is_defined ())
           return fcn;
       }
 
     return symtab.fcn_table_find (name, args, local_funcs);
   }
 
   symbol_record&
-  scope::insert (const std::string& name, bool force_add)
+  symbol_scope::insert (const std::string& name, bool force_add)
   {
     table_iterator p = m_symbols.find (name);
 
     if (p == m_symbols.end ())
       {
         symbol_record ret (this, name);
 
         if (m_is_nested && m_parent && m_parent->look_nonlocal (name, ret))
@@ -102,55 +102,55 @@ namespace octave
             return m_symbols[name] = ret;
           }
       }
     else
       return p->second;
   }
 
   void
-  scope::clear_global (const std::string& name)
+  symbol_scope::clear_global (const std::string& name)
   {
     table_iterator p = m_symbols.find (name);
 
     if (p != m_symbols.end ())
       {
         symbol_record& sr = p->second;
 
         if (sr.is_global ())
           sr.unmark_global ();
       }
 
     symbol_table& symtab
-      = __get_symbol_table__ ("scope::clear_global");
+      = __get_symbol_table__ ("symbol_scope::clear_global");
 
     symtab.erase_global (name);
   }
 
   void
-  scope::clear_global_pattern (const std::string& pat)
+  symbol_scope::clear_global_pattern (const std::string& pat)
   {
     glob_match pattern (pat);
 
     for (auto& nm_sr : m_symbols)
       {
         symbol_record& sr = nm_sr.second;
 
         if (sr.is_global () && pattern.match (sr.name ()))
           sr.unmark_global ();
       }
 
     symbol_table& symtab
-      = __get_symbol_table__ ("scope::clear_global_pattern");
+      = __get_symbol_table__ ("symbol_scope::clear_global_pattern");
 
     symtab.erase_global_pattern (pattern);
   }
 
   std::list<workspace_element>
-  scope::workspace_info (void) const
+  symbol_scope::workspace_info (void) const
   {
     std::list<workspace_element> retval;
 
     for (const auto& nm_sr : m_symbols)
       {
         std::string nm = nm_sr.first;
         symbol_record sr = nm_sr.second;
 
@@ -194,95 +194,95 @@ namespace octave
               }
           }
       }
 
     return retval;
   }
 
   octave_value
-  scope::dump (void) const
+  symbol_scope::dump (void) const
   {
     std::map<std::string, octave_value> m
       = {{ "name", m_name },
          { "symbols", dump_symbols_map () },
          { "persistent_variables", m_persistent_symbols },
          { "subfunctions", dump_function_map (m_subfunctions) }};
 
     return octave_value (m);
   }
 
   octave_value
-  scope::dump_symbols_map (void) const
+  symbol_scope::dump_symbols_map (void) const
   {
     std::map<std::string, octave_value> info_map;
 
     for (const auto& nm_sr : m_symbols)
       {
         std::string nm = nm_sr.first;
         const symbol_record& sr = nm_sr.second;
         info_map[nm] = sr.dump ();
       }
 
     return octave_value (info_map);
   }
 
   void
-  scope::install_subfunction (const std::string& name,
-                              const octave_value& fval, bool is_nested)
+  symbol_scope::install_subfunction (const std::string& name,
+                                     const octave_value& fval, bool is_nested)
   {
     m_subfunctions[name] = fval;
 
     // This can be simpler once the scope object is stored in the function
     // object...
     octave_user_function *fcn = fval.user_function_value ();
 
-    scope *fcn_scope = fcn->scope ();
+    symbol_scope *fcn_scope = fcn->scope ();
 
     fcn_scope->set_parent (this);
 
     if (is_nested)
       {
         m_children.push_back (fcn_scope);
 
         fcn->mark_as_nested_function ();
 
         fcn_scope->m_is_nested = true;
       }
 
   }
 
   octave_value
-  scope::find_subfunction (const std::string& name) const
+  symbol_scope::find_subfunction (const std::string& name) const
   {
     subfunctions_const_iterator p = m_subfunctions.find (name);
 
     if (p != m_subfunctions.end ())
       return p->second;
 
     if (m_parent)
       return m_parent->find_subfunction (name);
 
     return octave_value ();
   }
 
   void
-  scope::mark_subfunctions_in_scope_as_private (const std::string& class_name)
+  symbol_scope::mark_subfunctions_in_scope_as_private (const std::string& class_name)
   {
     for (auto& nm_sf : m_subfunctions)
       {
         octave_function *fcn = nm_sf.second.function_value ();
 
         if (fcn)
           fcn->mark_as_private_function (class_name);
       }
   }
 
   void
-  scope::set_parent (scope *p)
+  symbol_scope::set_parent (symbol_scope *p)
   {
     m_parent = p;
 
     if (m_parent)
       {
         // If m_parent is the top-level scope, there will be no parent
         // function.
 
@@ -294,17 +294,17 @@ namespace octave
 
             if (parent_fcn)
               m_parent_fcn = octave_value (parent_fcn, true);
           }
       }
   }
 
   void
-  scope::update_nest (void)
+  symbol_scope::update_nest (void)
   {
     if (m_parent)
       {
         // fix bad symbol_records
         for (auto& nm_sr : m_symbols)
           {
             symbol_record& ours = nm_sr.second;
 
@@ -330,17 +330,17 @@ namespace octave
           nm_sr.second.set_curr_fcn (m_fcn);
       }
 
     for (auto& symtab_p : m_children)
       symtab_p->update_nest ();
   }
 
   bool
-  scope::look_nonlocal (const std::string& name, symbol_record& result)
+  symbol_scope::look_nonlocal (const std::string& name, symbol_record& result)
   {
     table_iterator p = m_symbols.find (name);
     if (p == m_symbols.end ())
       {
         if (m_is_nested && m_parent)
           return m_parent->look_nonlocal (name, result);
       }
     else if (! p->second.is_automatic ())
@@ -348,21 +348,21 @@ namespace octave
         result.bind_fwd_rep (p->second);
         return true;
       }
 
     return false;
   }
 
   void
-  scope::bind_script_symbols (scope *curr_scope)
+  symbol_scope::bind_script_symbols (symbol_scope *curr_scope)
   {
     for (auto& nm_sr : m_symbols)
       nm_sr.second.bind_fwd_rep (curr_scope->find_symbol (nm_sr.first));
   }
 
   void
-  scope::unbind_script_symbols (void)
+  symbol_scope::unbind_script_symbols (void)
   {
     for (auto& nm_sr : m_symbols)
       nm_sr.second.unbind_fwd_rep ();
   }
 }
diff --git a/libinterp/corefcn/scope.h b/libinterp/corefcn/symscope.h
rename from libinterp/corefcn/scope.h
rename to libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/scope.h
+++ b/libinterp/corefcn/symscope.h
@@ -16,18 +16,18 @@ MERCHANTABILITY or FITNESS FOR A PARTICU
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if ! defined (octave_scope_h)
-#define octave_scope_h 1
+#if ! defined (octave_symscope_h)
+#define octave_symscope_h 1
 
 #include "octave-config.h"
 
 #include <deque>
 #include <limits>
 #include <list>
 #include <map>
 #include <set>
@@ -42,17 +42,17 @@ class octave_user_function;
 
 #include "ov.h"
 #include "ovl.h"
 #include "symrec.h"
 #include "workspace-element.h"
 
 namespace octave
 {
-  class scope
+  class symbol_scope
   {
   public:
 
     typedef symbol_record::context_id context_id;
 
     typedef std::map<std::string, symbol_record>::const_iterator
     table_const_iterator;
     typedef std::map<std::string, symbol_record>::iterator
@@ -63,49 +63,49 @@ namespace octave
     typedef std::map<std::string, octave_value>::iterator
     m_persistent_symbols_iterator;
 
     typedef std::map<std::string, octave_value>::const_iterator
     subfunctions_const_iterator;
     typedef std::map<std::string, octave_value>::iterator
     subfunctions_iterator;
 
-    scope (const std::string& name = "")
+    symbol_scope (const std::string& name = "")
       : m_name (name), m_symbols (), m_persistent_symbols (), m_subfunctions (),
         m_fcn (nullptr), m_parent (nullptr), m_parent_fcn (), m_children (), m_is_nested (false),
         m_is_static (false), m_context (0)
     { }
 
     // No copying!
 
-    scope (const scope&) = delete;
+    symbol_scope (const symbol_scope&) = delete;
 
-    scope& operator = (const scope&) = delete;
+    symbol_scope& operator = (const symbol_scope&) = delete;
 
-    ~scope (void) = default;
+    ~symbol_scope (void) = default;
 
     void insert_symbol_record (const symbol_record& sr)
     {
       m_symbols[sr.name ()] = sr;
     }
 
     bool is_nested (void) const { return m_is_nested; }
 
     void mark_nested (void) { m_is_nested = true; }
 
     bool is_static (void) const { return m_is_static; }
 
     void mark_static (void) { m_is_static = true; }
 
-    scope * parent_scope (void) const { return m_parent; }
+    symbol_scope * parent_scope (void) const { return m_parent; }
     octave_value parent_fcn (void) const { return m_parent_fcn; }
 
-    scope * dup (void) const
+    symbol_scope * dup (void) const
     {
-      scope *new_sid = new scope ();
+      symbol_scope *new_sid = new symbol_scope ();
 
       for (const auto& nm_sr : m_symbols)
         new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
 
       new_sid->m_parent = m_parent;
       new_sid->m_parent_fcn = m_parent_fcn;
 
       return new_sid;
@@ -120,17 +120,17 @@ namespace octave
       table_iterator p = m_symbols.find (name);
 
       if (p == m_symbols.end ())
         return insert (name);
       else
         return p->second;
     }
 
-    void inherit_internal (scope& donor_scope)
+    void inherit_internal (symbol_scope& donor_scope)
     {
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (! (sr.is_automatic () || sr.is_formal ()))
             {
               std::string nm = sr.name ();
@@ -145,17 +145,17 @@ namespace octave
 
                       sr.mark_inherited ();
                     }
                 }
             }
         }
     }
 
-    void inherit (scope *donor_scope)
+    void inherit (symbol_scope *donor_scope)
     {
       while (donor_scope)
         {
           inherit_internal (*donor_scope);
 
           if (donor_scope->is_nested ())
             donor_scope = donor_scope->parent_scope ();
           else
@@ -532,23 +532,23 @@ namespace octave
     std::string name (void) const { return m_name; }
 
     void cache_name (const std::string& name) { m_name = name; }
 
     octave_user_function *function (void) { return m_fcn; }
 
     void set_function (octave_user_function *fcn) { m_fcn = fcn; }
 
-    void set_parent (scope *p);
+    void set_parent (symbol_scope *p);
 
     void update_nest (void);
 
     bool look_nonlocal (const std::string& name, symbol_record& result);
 
-    void bind_script_symbols (scope *curr_scope);
+    void bind_script_symbols (symbol_scope *curr_scope);
 
     void unbind_script_symbols (void);
 
   private:
 
     // Name for this scope (usually the corresponding filename of the
     // function corresponding to the scope).
     std::string m_name;
@@ -561,21 +561,21 @@ namespace octave
 
     // Map from symbol names to subfunctions.
     std::map<std::string, octave_value> m_subfunctions;
 
     // The associated user code (may be null).
     octave_user_function *m_fcn;
 
     // Parent of nested function (may be null).
-    scope *m_parent;
+    symbol_scope *m_parent;
     octave_value m_parent_fcn;
 
     // Child nested functions.
-    std::vector<scope*> m_children;
+    std::vector<symbol_scope*> m_children;
 
     // If true, then this scope belongs to a nested function.
     bool m_is_nested;
 
     // If true then no variables can be added.
     bool m_is_static;
 
     context_id m_context;
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -41,18 +41,18 @@ along with Octave; see the file COPYING.
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-pr-code.h"
-#include "scope.h"
 #include "symrec.h"
+#include "symscope.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
 // Should Octave always check to see if function files have changed
 // since they were last compiled?
 static int Vignore_function_time_stamp = 1;
 
@@ -438,17 +438,17 @@ namespace octave
       {
         size_t pos = name.find_first_of (Vfilemarker);
 
         if (pos == std::string::npos)
           retval = find (name, args, true, local_funcs);
         else
           {
             std::string fcn_scope = name.substr (0, pos);
-            scope *stored_scope = m_current_scope;
+            symbol_scope *stored_scope = m_current_scope;
             m_current_scope = m_top_scope;
             octave_value parent = find_function (name.substr (0, pos),
                                                  octave_value_list (), false);
 
             if (parent.is_defined ())
               {
                 octave_function *parent_fcn = parent.function_value ();
 
@@ -477,17 +477,17 @@ namespace octave
 
     std::string full_name = '@' + dispatch_type +
       sys::file_ops::dir_sep_str () + name;
     size_t pos = full_name.find_first_of (Vfilemarker);
 
     if (pos != std::string::npos)
       {
         std::string fcn_scope = full_name.substr (0, pos);
-        scope *stored_scope = m_current_scope;
+        symbol_scope *stored_scope = m_current_scope;
         m_current_scope = m_top_scope;
         octave_value parent = find_function (full_name.substr (0, pos),
                                              octave_value_list (), false);
         if (parent.is_defined ())
           {
             octave_function *parent_fcn = parent.function_value ();
 
             if (parent_fcn)
@@ -653,17 +653,17 @@ DEFMETHOD (__current_scope__, interp, , 
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{scope}, @var{context}]} __current_scope__ ()
 Return the current scope and context as integers.
 @seealso{__dump_symtab_info__}
 @end deftypefn */)
 {
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
-  octave::scope *scope = symtab.current_scope ();
+  octave::symbol_scope *scope = symtab.current_scope ();
 
   std::string nm = scope ? scope->name () : "<unknown>";
 
   return ovl (nm, symtab.current_context ());
 }
 
 DEFMETHOD (__dump_symtab_info__, interp, args, ,
            doc: /* -*- texinfo -*-
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -38,102 +38,102 @@ along with Octave; see the file COPYING.
 #include "oct-refcount.h"
 
 class tree_argument_list;
 class octave_user_function;
 
 #include "fcn-info.h"
 #include "ov.h"
 #include "ovl.h"
-#include "scope.h"
 #include "symrec.h"
+#include "symscope.h"
 #include "workspace-element.h"
 
 namespace octave
 {
   class OCTINTERP_API symbol_table
   {
   public:
 
     typedef octave::symbol_record symbol_record;
-    typedef octave::scope scope;
+    typedef octave::symbol_scope scope;
     typedef octave::fcn_info fcn_info;
 
     typedef scope::context_id context_id;
 
     symbol_table (void)
       : m_global_symbols (), m_fcn_table (), m_class_precedence_table (),
-      m_parent_map (), m_global_scope (new scope ("global scope")),
-      m_top_scope (new scope ("top scope")),
-      m_current_scope (m_top_scope)
+        m_parent_map (), m_global_scope (new scope ("global scope")),
+        m_top_scope (new symbol_scope ("top scope")),
+        m_current_scope (m_top_scope)
       { }
 
     // No copying!
 
     symbol_table (const symbol_table&) = delete;
 
     symbol_table& operator = (const symbol_table&) = delete;
 
     ~symbol_table (void)
       {
         delete m_top_scope;
         delete m_global_scope;
       }
 
-    scope *global_scope (void) { return m_global_scope; }
-    scope *top_scope (void) { return m_top_scope; }
+    symbol_scope *global_scope (void) { return m_global_scope; }
+    symbol_scope *top_scope (void) { return m_top_scope; }
 
-    scope *current_scope (void) { return m_current_scope; }
+    symbol_scope *current_scope (void) { return m_current_scope; }
 
-    scope *require_current_scope (const std::string& who)
+    symbol_scope *require_current_scope (const std::string& who)
     {
       if (! m_current_scope)
         error ("%s: missing scope", who.c_str ());
 
       return m_current_scope;
     }
 
     context_id current_context (void) const
     {
       return m_current_scope ? m_current_scope->current_context () : 0;
     }
 
-    void set_scope (scope *sid)
+    void set_scope (symbol_scope *sid)
     {
       set_scope_and_context (sid, 0);
     }
 
-    void set_scope_and_context (scope *sid, context_id context)
+    void set_scope_and_context (symbol_scope *sid, context_id context)
     {
       if (sid == m_global_scope)
         error ("can't set scope to global");
 
       m_current_scope = sid;
 
       if (m_current_scope)
         m_current_scope->set_context (context);
     }
 
-    symbol_record find_symbol (const std::string& name, scope *sid)
+    symbol_record find_symbol (const std::string& name, symbol_scope *sid)
     {
       return sid ? sid->find_symbol (name) : symbol_record ();
     }
 
     symbol_record find_symbol (const std::string& name)
     {
       return find_symbol (name, m_current_scope);
     }
 
-    void inherit (scope *recipient_scope, scope *donor_scope)
+    void inherit (symbol_scope *recipient_scope, symbol_scope *donor_scope)
     {
       if (recipient_scope)
         recipient_scope->inherit (donor_scope);
     }
 
-    void inherit (scope *recipient_scope)
+    void inherit (symbol_scope *recipient_scope)
     {
       inherit (recipient_scope, m_current_scope);
     }
 
     bool at_top_level (void) { return m_current_scope == m_top_scope; }
 
     // Find a value corresponding to the given name in the table.
     octave_value
@@ -783,20 +783,20 @@ namespace octave
     // Map from class names to parent class names.
     std::map<std::string, std::list<std::string>> m_parent_map;
 
     typedef std::map<std::string, std::list<std::string>>::const_iterator
       const_parent_map_iterator;
     typedef std::map<std::string, std::list<std::string>>::iterator
       parent_map_iterator;
 
-    scope *m_global_scope;
-    scope *m_top_scope;
+    symbol_scope *m_global_scope;
+    symbol_scope *m_top_scope;
 
-    scope *m_current_scope;
+    symbol_scope *m_current_scope;
 
     octave_value dump_fcn_table_map (void) const;
   };
 
   extern bool out_of_date_check (octave_value& function,
                                  const std::string& dispatch_type = "",
                                  bool check_relative = true);
 
