# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1543860906 -3600
#      Mon Dec 03 19:15:06 2018 +0100
# Node ID ef1ef6364a6aca8c1b2a52159613936fee28eee4
# Parent  a61d3d3463e090835ba7fe06f9f35886c07e0d49
Silence compiler warnings about incorrect format specifiers cross-compiling (bug #55046).

* sysdep.cc: Use format specifier %ld for long int.
* audioread.cc: Use format specifier macro PRId64 for int64_t.

diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -928,17 +928,17 @@ On non-Windows platforms this function f
     error ("winqueryreg: ROOTKEY is not a valid root key identifier");
 
   if (get_names)
     {
       std::list<std::string> fields;
 
       LONG retval = get_regkey_names (h_rootkey, subkey_name, fields);
       if (retval != ERROR_SUCCESS)
-        error ("winqueryreg: error %d reading names from registry", retval);
+        error ("winqueryreg: error %ld reading names from registry", retval);
 
       Cell fieldnames (dim_vector (1, fields.size ()));
       size_t i;
       std::list<std::string>::const_iterator it;
       for (i = 0, it = fields.begin (); it != fields.end (); ++it, ++i)
         fieldnames(i) = *it;
 
       return ovl (fieldnames);
@@ -948,17 +948,17 @@ On non-Windows platforms this function f
       octave_value key_val;
       LONG retval = get_regkey_value (h_rootkey, subkey_name, value_name,
                                       key_val);
       if (retval == ERROR_FILE_NOT_FOUND)
         error ("winqueryreg: no value found for '%s' at %s\\%s.",
                value_name.c_str (), rootkey_name.c_str (),
                subkey_name.c_str ());
       if (retval != ERROR_SUCCESS)
-        error ("winqueryreg: error %d reading the specified key", retval);
+        error ("winqueryreg: error %ld reading the specified key", retval);
 
       return ovl (key_val);
     }
 #else
 
   octave_unused_parameter (args);
 
   error ("winqueryreg: function is only supported on Windows platforms");
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -452,18 +452,18 @@ Comment.
   while (total_items_written < items_to_write)
     {
       if (items_to_write - offset < chunk_size)
         chunk_size = items_to_write - offset;
 
       sf_count_t items_written = sf_write_float (file, data+offset, chunk_size);
 
       if (items_written != chunk_size)
-        error ("audiowrite: write failed, wrote %ld of %ld items\n",
-               items_written, chunk_size);
+        error ("audiowrite: write failed, wrote %" PRId64 " of %" PRId64
+               " items\n", items_written, chunk_size);
 
       total_items_written += items_written;
       offset += chunk_size;
     }
 
   // FIXME: shouldn't we return something to indicate whether the file
   // was written successfully?
   return ovl ();
