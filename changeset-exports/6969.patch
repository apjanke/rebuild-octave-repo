# HG changeset patch
# User jwe
# Date 1191680120 0
#      Sat Oct 06 14:15:20 2007 +0000
# Node ID 0a64abe792f42ddc6e9de1e9901799a1f1e699ed
# Parent  c8fc3487ed2c5824767156da7e75632a6b8a9b2c
[project @ 2007-10-06 14:15:19 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-06  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: Check for lgamma and tgamma.
+
 2007-10-04  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (UGLY_DEFS): Delete special case for darwin.
 
 2007-10-03  John W. Eaton  <jwe@octave.org>
 
 	* aclocal.m4 (OCTAVE_PROG_SED): Also check for \(X\|Y\) style
 	regular expression alternation.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.578 $)
+AC_REVISION($Revision: 1.579 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1427,22 +1427,22 @@ else
   AC_MSG_ERROR([You are required to have fnmatch.h and glob.h])
 fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name chmod \
   dup2 endgrent endpwent execvp fcntl fork getcwd getegid geteuid \
   getgid getgrent getgrgid getgrnam getpgrp getpid getppid getpwent \
-  getpwuid gettimeofday getuid getwd _kbhit kill link localtime_r \
+  getpwuid gettimeofday getuid getwd _kbhit kill lgamma link localtime_r \
   lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv raise \
   readlink realpath rename resolvepath rindex rmdir round select setgrent \
   setlocale setpwent setvbuf sigaction siglongjmp sigpending sigprocmask \
   sigsuspend snprintf stat strcasecmp strdup strerror stricmp \
-  strncasecmp strnicmp strptime strsignal symlink tempnam umask \
+  strncasecmp strnicmp strptime strsignal symlink tempnam tgamma umask \
   uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
   _chmod _snprintf x_utime _utime32)
 
 case "$canonical_host_type" in
   *-*-msdosmsvc)
     ## The %T format specifier for strftime is reportedly broken,
     ## so use our version.  We could use an actual configure test
     ## for this.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2007-10-06  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc: (zlgamma): Delete.
+	(xgamma): Use C library gamma function if available.
+	(xlgamma): Use C library lgamma function if available.
+	(xlgamma) [! HAVE_LGAMMA]: Allow calculation for any value of X
+	other than NaN or Inf.
+
 2007-10-05  John W. Eaton  <jwe@octave.org>
 
 	* lo-specfun.cc (zlgamma): New function.
 
 2007-10-04  John W. Eaton  <jwe@octave.org>
 
 	* oct-sort.cc (octave_sort<T>::binarysort): Remove register
 	qualifiers on local variables.
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -155,60 +155,50 @@ erfc (double x)
   F77_XFCN (xderfc, XDERFC, (x, retval));
   return retval;
 }
 #endif
 
 double
 xgamma (double x)
 {
+#if defined (HAVE_TGAMMA)
+  return tgamma (x);
+#else
   double result;
 
   if (xisnan (x))
     result = x;
   else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
     result = octave_Inf;
   else
     F77_XFCN (xdgamma, XDGAMMA, (x, result));
+
   return result;
+#endif
 }
 
 double
 xlgamma (double x)
 {
+#if defined (HAVE_LGAMMA)
+  return lgamma (x);
+#else
   double result;
   double sgngam;
 
   if (xisnan (x))
     result = x;
-  else if (x <= 0 || xisinf (x))
+  else if (xisinf (x))
     result = octave_Inf;
   else
     F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
-}
-
-Complex
-zlgamma (double x)
-{
-  Complex result;
-
-  if (xisnan (x))
-    result = x;
-  else if (x > 0)
-    result = xlgamma (x);
-  else
-    {
-      double tmp = xgamma (x);
-
-      result = tmp < 0 ? std::log (Complex (tmp)) : log (tmp);
-    }
-
-  return result;
+#endif
 }
 
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesy (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -54,17 +54,16 @@ extern OCTAVE_API double erf (double);
 #endif
 
 #if !defined (HAVE_ERFC)
 extern OCTAVE_API double erfc (double);
 #endif
 
 extern OCTAVE_API double xgamma (double x);
 extern OCTAVE_API double xlgamma (double x);
-extern OCTAVE_API Complex zlgamma (double x);
 
 extern OCTAVE_API Complex
 besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
 bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-10-06  John W. Eaton  <jwe@octave.org>
+
+	* mappers.cc (install_mapper_functions): Undo previous change.
+	Fix doc string for lgamma.
+	(xzlgamma): Delete.
+
 2007-10-05  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (axes::properties): New property, colororder.
 	* graphics.cc (default_colororder): New function.
 	(axes::properties::properties, axes::properties::get,
 	axes::properties::set_defaults,
 	axes::properties::factory_defaults, ): Handle colororder.
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -167,31 +167,16 @@ xreal (const Complex& x)
 }
 
 static int
 dummyp (int)
 {
   return 0;
 }
 
-// FIXME -- maybe our mapper function structure should alow for
-// functions that take real arguments and produce complex values.
-static Complex
-xzlgamma (const Complex& x)
-{
-  Complex retval;
-
-  if (x.imag () != 0)
-    error ("lgamma: expecting real arguments");
-  else
-    retval = zlgamma (x.real ());
-
-  return retval;
-}
-
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, xabs, 0, 0, fabs, xabs, 0, 0.0, 0.0, 1, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
 Compute the magnitude of @var{z}, defined as\n\
 @iftex\n\
@@ -537,21 +522,22 @@ Return 1 for upper case letters.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isxdigit, xisxdigit, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isxdigit (@var{s})\n\
 Return 1 for characters that are hexadecimal digits.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, xzlgamma, 0.0, octave_Inf, 0, 1,
+  DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} lgamma (@var{x})\n\
 @deftypefnx {Mapping Function} {} gammaln (@var{x})\n\
-Return the natural logarithm of the gamma function.\n\
+Return the natural logarithm of the absolute value of the gamma\n\
+function of @var{x}.\n\
 @seealso{gamma, gammai}\n\
 @end deftypefn");
 
   DEFUN_MAPPER (log, 0, 0, 0, log, 0, std::log, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm for each element of @var{x}.  To compute the\n\
 matrix logarithm, see @ref{Linear Algebra}.\n\
