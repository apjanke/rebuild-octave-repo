# HG changeset patch
# User S?bastien Villemot <sebastien@debian.org>
# Date 1550729420 18000
#      Thu Feb 21 01:10:20 2019 -0500
# Branch stable
# Node ID 17d806c3f7cd43314d895fe770226b8516954e9d
# Parent  c39d26971f4b737a7477296ee7ea253e35381f13
fix overloaded classdef subsasgn with curly braces (bug #55223, bug #54783)

* ov-classdef.h, ov-classdef.cc (octave_classdef::subsref (..., bool auto_add)):
Call user method overload if present.

* test/bug-55223/bug-55223.tst, test/bug-55223/class_bug55223.m,
test/bug-55223/module.mk: New files.
* test/module.mk: Update.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -899,18 +899,38 @@ octave_classdef::subsref (const std::str
                           const std::list<octave_value_list>& idx,
                           bool auto_add)
 {
   size_t skip = 0;
   octave_value_list retval;
 
   // This variant of subsref is used to create temporary values when doing
   // assignment with multi-level indexing.  AFAIK this is only used for internal
-  // purpose (not sure we should even implement this) and any overload subsref
-  // should not be called.
+  // purpose (not sure we should even implement this).
+
+  cdef_class cls = object.get_class ();
+
+  if (! in_class_method (cls))
+    {
+      cdef_method meth = cls.find_method ("subsref");
+
+      if (meth.ok ())
+        {
+          octave_value_list args;
+
+          args(1) = make_idx_args (type, idx, "subsref");
+
+          count++;
+          args(0) = octave_value (this);
+
+          retval = meth.execute (args, 1, true, "subsref");
+
+          return retval.length () > 0 ? retval(0) : octave_value ();
+        }
+    }
 
   retval = object.subsref (type, idx, 1, skip, cdef_class (), auto_add);
 
   if (type.length () > skip && idx.size () > skip)
     retval = retval(0).next_subsref (1, type, idx, skip);
 
   return retval.length () > 0 ? retval(0) : octave_value ();
 }
diff --git a/test/bug-55223/bug-55223.tst b/test/bug-55223/bug-55223.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-55223/bug-55223.tst
@@ -0,0 +1,22 @@
+## Copyright (C) 2018 SÃ©bastien Villemot <sebastien@debian.org>
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+%!test <*55223>
+%! x = class_bug55223 ();
+%! x{2}(2) = 3;
+%! assert (x{2}(2), 3);
diff --git a/test/bug-55223/class_bug55223.m b/test/bug-55223/class_bug55223.m
new file mode 100644
--- /dev/null
+++ b/test/bug-55223/class_bug55223.m
@@ -0,0 +1,23 @@
+classdef class_bug55223<handle
+  properties
+    x
+  endproperties
+
+  methods
+    function obj = class_bug55223 ()
+      obj.x = eye (4);
+    endfunction
+
+    function val = subsref (obj, S)
+      if (length (S) == 2 && S(1).type == "{}" && S(2).type == "()")
+        val = obj.x(S(1).subs{1}, S(2).subs{1});
+      endif
+    endfunction
+
+    function obj = subsasgn (obj, S, val)
+      if (length (S) == 2 && S(1).type == "{}" && S(2).type == "()")
+        obj.x(S(1).subs{1}, S(2).subs{1}) = val;
+      endif
+    endfunction
+  endmethods
+endclassdef
diff --git a/test/bug-55223/module.mk b/test/bug-55223/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-55223/module.mk
@@ -0,0 +1,5 @@
+bug_55223_TEST_FILES = \
+  %reldir%/bug-55223.tst \
+  %reldir%/class_bug55223.m
+
+TEST_FILES += $(bug_55223_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -72,16 +72,17 @@ include %reldir%/bug-51192/module.mk
 include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51534/module.mk
 include %reldir%/bug-51599/module.mk
 include %reldir%/bug-52075/module.mk
 include %reldir%/bug-52722/module.mk
 include %reldir%/bug-53027/module.mk
 include %reldir%/bug-53468/module.mk
 include %reldir%/bug-54995/module.mk
+include %reldir%/bug-55223/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/local-functions/module.mk
 include %reldir%/mex/module.mk
