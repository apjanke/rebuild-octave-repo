# HG changeset patch
# User Rik <rik@octave.org>
# Date 1467643142 25200
#      Mon Jul 04 07:39:02 2016 -0700
# Node ID 8df31c24dce380c436eee25badef9e0f9029624e
# Parent  98ee8b1ebbebe52a522ff6cf3013f4fb44fedb6e
Optimize do_make_absolute for most common calling usage.

* oct-env.cc: Put in shortcut path to detect when path is '.' which
is called every time that Octave returns to prompt.  Rename variable
tmp to sep_pos for clarity.

diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -381,34 +381,35 @@ namespace octave
 
     std::string
     env::do_make_absolute (const std::string& s,
                            const std::string& dot_path) const
     {
       if (dot_path.empty () || s.empty () || do_absolute_pathname (s))
         return s;
 
+      // Optimization: every time Octave returns to the prompt it calls
+      // make_absolute_filename with '.' as argument.
+      if (s == ".")
+        return dot_path;
+
       std::string current_dir = dot_path;
 
-      size_t pos = current_dir.length () - 1;
-
-      if (! octave::sys::file_ops::is_dir_sep (current_dir[pos]))
+      if (! octave::sys::file_ops::is_dir_sep (current_dir.back ()))
         current_dir.append (octave::sys::file_ops::dir_sep_str ());
 
-      // FIXME: this is probably not correct for all systems.
-
       size_t i = 0;
       size_t slen = s.length ();
 
       while (i < slen)
         {
           if (s[i] == '.')
             {
               if (i + 1 == slen)
-                return current_dir;
+                break;
 
               if (octave::sys::file_ops::is_dir_sep (s[i+1]))
                 {
                   i += 2;
                   continue;
                 }
 
               if (s[i+1] == '.'
@@ -420,33 +421,33 @@ namespace octave
                     i++;
 
                   pathname_backup (current_dir, 1);
 
                   continue;
                 }
             }
 
-          size_t tmp;
-          tmp = s.find_first_of (octave::sys::file_ops::dir_sep_chars (), i);
+          size_t sep_pos;
+          sep_pos = s.find_first_of (octave::sys::file_ops::dir_sep_chars (), i);
 
-          if (tmp == std::string::npos)
+          if (sep_pos == std::string::npos)
             {
-              current_dir.append (s, i, tmp-i);
+              current_dir.append (s, i, sep_pos-i);
               break;
             }
-          else if (tmp == i)
+          else if (sep_pos == i)
             {
               /* Two separators in a row, skip adding 2nd separator */
               i++;
             }
           else
             {
-              current_dir.append (s, i, tmp-i+1);
-              i = tmp + 1;
+              current_dir.append (s, i, sep_pos-i+1);
+              i = sep_pos + 1;
             }
         }
 
       // Strip any trailing directory separator
       if (octave::sys::file_ops::is_dir_sep (current_dir.back ()))
         current_dir.pop_back ();
       
       return current_dir;
