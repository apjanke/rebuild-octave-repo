# HG changeset patch
# User jwe
# Date 1179777523 0
#      Mon May 21 19:58:43 2007 +0000
# Node ID ffee6a1a10f319cab2316dcf2ff3c9864ee0a897
# Parent  27ec13d8499b6297ff921bff16fd079b1f3a2cd8
[project @ 2007-05-21 19:58:43 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,13 @@
 2007-05-21  Søren Hauberg  <hauberg@gmail.com>
 
+        * interpreter/expr.txi: Describe +=, -=, *=, and /= operators.
+	Add new example.
+
         * interpreter/eval.txi: Partition the chapter into sections.
         Describe evalin and assignin functions using text from Paul
 	Kienzle.
 
         * interpreter/func.txi: New section describing load path.
         Improve 'inline' and 'command' sections.
 
         * interpreter/stmt.txi: Describe cell array cases for the switch
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -107,16 +107,35 @@ a ([1, 1], [1, 1, 1])
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
 use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
+It is also possible to create a matrix with different values. The
+following example create a 10 dimensional row vector @math{a} containing
+the values
+@iftex
+@tex
+$a_i = \sqrt{i}$.
+@end tex
+@end iftex
+@ifnottex
+a(i) = sqrt(i).
+@end ifnottex
+
+@example
+for i = 1:10
+  a(i) = sqrt (i);
+endfor
+@end example
+
+@noindent
 Note that it is quite inefficient to create a vector using a loop like
 the one shown in the example above.  In this particular case, it would
 have been much more efficient to use the expression
 
 @example
 a = sqrt (1:10);
 @end example
 
@@ -296,17 +315,17 @@ temporary result.
 @cindex factorial function
 
 With some restrictions@footnote{Some of Octave's function are
 implemented in terms of functions that cannot be called recursively.
 For example, the ODE solver @code{lsode} is ultimately implemented in a
 Fortran subroutine that cannot be called recursively, so @code{lsode}
 should not be called either directly or indirectly from within the
 user-supplied function that @code{lsode} requires.  Doing so will result
-in undefined behavior.}, recursive function calls are allowed.  A
+in an error.}, recursive function calls are allowed.  A
 @dfn{recursive function} is one which calls itself, either directly or
 indirectly.  For example, here is an inefficient@footnote{It would be
 much better to use @code{prod (1:n)}, or @code{gamma (n+1)} instead,
 after first checking to ensure that the value @code{n} is actually a
 positive integer.} way to compute the factorial of a given integer:
 
 @example
 @group
@@ -910,16 +929,73 @@ not exceed the number of values on the r
 following will produce an error.
 
 @example
 [a, b, c, d] = [u, s, v] = svd (a)
      @print{} error: element number 4 undefined in return list
         error: evaluating assignment expression near line 8, column 15
 @end example
 
+@opindex +=
+A very common programming pattern is to increment an existing variable
+with a given value, like this
+
+@example
+a = a + 2;
+@end example
+
+@noindent
+This can be written in a clearer and more condensed form using the
+@code{+=} operator
+
+@example
+a += 2;
+@end example
+
+@noindent
+@opindex -=
+@opindex *=
+@opindex /=
+Similar operators also exist for subtraction (@code{-=}),
+multiplication (@code{*=}), and division (@code{/=}). An expression
+of the form
+
+@example
+@var{expr1} @var{op}= @var{expr2}
+@end example
+
+@noindent
+is evaluated as
+
+@example
+@var{expr1} = (@var{expr1}) @var{op} (@var{expr2})
+@end example
+
+@noindent
+where @var{op} can be either @code{+}, @code{-}, @code{*}, or @code{/}.
+So, the expression
+
+@example
+a *= b+1
+@end example
+
+@noindent
+is evaluated as
+
+@example
+a = a * (b+1)
+@end example
+
+@noindent
+and @emph{not}
+
+@example
+a = a * b + 1
+@end example
+
 You can use an assignment anywhere an expression is called for.  For
 example, it is valid to write @code{x != (y = 1)} to set @code{y} to 1
 and then test whether @code{x} equals 1.  But this style tends to make
 programs hard to read.  Except in a one-shot program, you should rewrite
 it to get rid of such nesting of assignments.  This is never very hard.
 
 @DOCSTRING(subsasgn)
 
@@ -1008,17 +1084,18 @@ operator follows the operand.  For examp
 Here is a table of the operators in Octave, in order of increasing
 precedence.
 
 @table @code
 @item statement separators
 @samp{;}, @samp{,}.
 
 @item assignment
-@samp{=}.  This operator groups right to left.
+@samp{=}, @samp{+=}, @samp{-=}, @samp{*=},@samp{/=}.  This operator
+groups right to left.
 
 @item logical "or" and "and"
 @samp{||}, @samp{&&}.
 
 @item element-wise "or" and "and"
 @samp{|}, @samp{&}.
 
 @item relational
