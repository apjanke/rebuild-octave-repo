# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424536733 0
#      Sat Feb 21 16:38:53 2015 +0000
# Node ID 059a05bc398c52932c302cc4854fffb30abbd22c
# Parent  f81a1da191e4c220c5b30c3691f547882c365bc7
Replace 'Octave:broadcast' warning with 'Octave:matlab-incompatible'.

* liboctave/numeric/bsxfun.h: replace the 'Octave:broadcasting' with the more
common 'Octave:matlab-compatible' warning which is off by default.
* plot/appearance/annotation.m, image/cubehelix.m: remove turning off the
warning since now it is done by default.
* miscellaneous/warning_ids.m: remove entry about Octave:broadcast
* NEWS: make note of this change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -263,16 +263,20 @@ Summary of important user-visible change
 
  ** The internal class <Octave_map> was deprecated in Octave 3.8 and has
     been removed from Octave 4.0.  Replacement classes are
     <octave_map> (struct array) or <octave_scalar_map> for a single structure.
 
  ** The warning ID Octave:singular-matrix-div has been replaced by
     Octave:nearly-singular-matrix and Octave:singular-matrix.
 
+ ** The warning ID Octave:broadcast has been removed.  Instead automatic
+    broadcasting will throw an Octave:matlab-incompatible warning, together
+    with other features not available in Matlab.
+
  ** The configure option --enable-octave-allocator has been removed.
     The internal class <octave_allocator> declared in oct-alloc.h has
     been removed.  The header remains, but is deprecated.  The macros to
     access the class (DECLARE_OCTAVE_ALLOCATOR, DEFINE_OCTAVE_ALLOCATOR,
     and DEFINE_OCTAVE_ALLOCATOR2) are now unconditionally defined to be
     empty.
 
  ** Qt and FLTK graphics toolkit now support offscreen rendering,
diff --git a/liboctave/numeric/bsxfun.h b/liboctave/numeric/bsxfun.h
--- a/liboctave/numeric/bsxfun.h
+++ b/liboctave/numeric/bsxfun.h
@@ -41,17 +41,18 @@ is_valid_bsxfun (const std::string& name
       octave_idx_type xk = dx(i);
       octave_idx_type yk = dy(i);
       // Check the three conditions for valid bsxfun dims
       if (! ((xk == yk) || (xk == 1 && yk > 1) || (xk > 1 && yk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
-    ("Octave:broadcast", "%s: automatic broadcasting operation applied",
+    ("Octave:matlab-incompatible",
+     "Matlab compatibility problem - %s automatic broadcasting",
      name.c_str ());
 
   return true;
 }
 
 // since we can't change the size of the assigned-to matrix, we cannot
 // apply singleton expansion to it, so the conditions to check are
 // different here.
@@ -71,17 +72,18 @@ is_valid_inplace_bsxfun (const std::stri
       octave_idx_type xk = dx(i);
 
       // Only two valid canditions to check; can't stretch rk
       if (! ((rk == xk) || (rk > 1 && xk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
-    ("Octave:broadcast", "%s: automatic broadcasting operation applied",
+    ("Octave:matlab-incompatible",
+     "Matlab compatibility problem - %s automatic broadcasting",
      name.c_str ());
 
   return true;
 }
 
 #include "bsxfun-defs.cc"
 
 #endif
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -59,17 +59,16 @@ function map = cubehelix (n = rows (colo
   if (n > 1)
     coeff = [ -0.14861  -0.29227   1.97294
                1.78277  -0.90649   0.00000];
 
     fract = ((0:n-1) / (n-1))';
     angle = 2 * pi * (start/3 + 1 + rots*fract);
     fract = fract .^ gamma;
     amp   = hue * fract .* (1-fract) /2;
-    warning ("off", "Octave:broadcast", "local");
     map   = fract + amp .* ([cos(angle) sin(angle)] * coeff);
 
     ## Clip values (only in case users have changed values of hue or gamma)
     map(map < 0) = 0;
     map(map > 1) = 1;
 
   elseif (n > 0)
     map = [0, 0, 0];
diff --git a/scripts/miscellaneous/warning_ids.m b/scripts/miscellaneous/warning_ids.m
--- a/scripts/miscellaneous/warning_ids.m
+++ b/scripts/miscellaneous/warning_ids.m
@@ -117,21 +117,16 @@
 ## @item Octave:autoload-relative-file-name
 ## If the @code{Octave:autoload-relative-file-name} is enabled,
 ## Octave will warn when parsing autoload() function calls with relative
 ## paths to function files.  This usually happens when using autoload()
 ## calls in PKG_ADD files, when the PKG_ADD file is not in the same
 ## directory as the .oct file referred to by the autoload() command.
 ## By default, the @code{Octave:autoload-relative-file-name} warning is enabled.
 ##
-## @item Octave:broadcast
-## Warn when performing broadcasting operations.  By default, this is
-## enabled.  See @ref{Broadcasting} in the chapter Vectorization and Faster
-## Code Execution of the manual.
-##
 ## @item Octave:built-in-variable-assignment
 ## By default, the @code{Octave:built-in-variable-assignment} warning is
 ## enabled.
 ##
 ## @item Octave:deprecated-keyword
 ## If the @code{Octave:deprecated-keyword} warning is enabled, a
 ## warning is issued when Octave encounters a keyword that is obsolete and
 ## scheduled for removal from Octave.
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -664,17 +664,16 @@ function update_line (h, dummy, prop, hl
         set (hli, "xdata", x);
         set (hli, "ydata", y);
 
     endswitch
   endif
 endfunction
 
 function [x, y] = arrowcoordinates (h, nar = [])
-  warning ("off", "Octave:broadcast", "local")
   pos = getnormpos (h);
   ppos = norm2pts (h, pos(3:4).');
   ang = angle (complex (ppos(1), ppos(2)));
 
   if (isempty (nar))
     ln = get (h, "headlength");   # in points
     wd = get (h, "headwidth");
     headstyle = get (h, "headstyle");
@@ -825,18 +824,16 @@ function update_textbox (h, dummy, prop,
         endswitch
         set (hte, "position", [x y 0]);
     endswitch
   endif
 
 endfunction
 
 function XY = textcoordinates (hte, pos)
-  warning ("off", "Octave:broadcast", "local")
-
   ## Get the "tight" extent of the text object in points units
   textpos = get(hte, "position");
   rot = get (hte, "rotation");
   units = get (hte, "units");
 
   set (hte, "rotation", 0, "units", "points", "position", [0 0 0]);
   ext = get (hte, "extent");
   set (hte, "rotation", rot, "units", units, "position", textpos);
