# HG changeset patch
# User jwe
# Date 1106326941 0
#      Fri Jan 21 17:02:21 2005 +0000
# Node ID cda8c0a823c569d6a2c248cf81ba5ea52b8e091e
# Parent  cd9a8ae4e6d48efc0e55640b1e3c469d7b4565d1
[project @ 2005-01-21 17:02:21 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2005-01-21  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/filter.cc (filter): Avoid slow Marray indexing ops.
+
 2005-01-20  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (EXTRAS): Move ov-base-mat.cc ov-base-scalar.cc here.
 	(OV_SRC): From here.
 
 2005-01-18  John W. Eaton  <jwe@octave.org>
 
 	* ov-complex.h (octave_complex::any): New function.
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -141,60 +141,79 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 	      x_offset2++;
 	    }
 	  x_offset += x_offset2 * x_stride * x_len;
 	}
       int si_offset = num * si_len;
 
       if (a_len > 1)
 	{
-	  for (int i = 0; i < x_len; i++)
+	  T *py = y.fortran_vec ();
+	  T *psi = si.fortran_vec ();
+
+	  const T *pa = a.data ();
+	  const T *pb = b.data ();
+	  const T *px = x.data ();
+
+	  psi += si_offset;
+
+	  for (int i = 0, idx = x_offset; i < x_len; i++, idx += x_stride)
 	    {
-	      int idx = i * x_stride + x_offset; 
-	      y (idx) = si (si_offset) + b (0) * x (idx);
+	      py[idx] = psi[0] + pb[0] * px[idx];
+
+	      if (si_len > 0)
+		{
+		  for (int j = 0; j < si_len - 1; j++)
+		    {
+		      OCTAVE_QUIT;
+
+		      psi[j] = psi[j+1] - pa[j+1] * py[idx] + pb[j+1] * px[idx];
+		    }
+
+		  psi[si_len-1] = pb[si_len] * px[idx] - pa[si_len] * py[idx];
+		}
+	      else
+		{
+		  OCTAVE_QUIT;
+
+		  psi[0] = pb[si_len] * px[idx] - pa[si_len] * py[idx];
+		}
+	    }
+	}
+      else if (si_len > 0)
+	{
+	  T *py = y.fortran_vec ();
+	  T *psi = si.fortran_vec ();
+
+	  const T *pb = b.data ();
+	  const T *px = x.data ();
+
+	  psi += si_offset;
+
+	  for (int i = 0, idx = x_offset; i < x_len; i++, idx += x_stride)
+	    {
+	      py[idx] = psi[0] + pb[0] * px[idx];
 
 	      if (si_len > 1)
 		{
 		  for (int j = 0; j < si_len - 1; j++)
 		    {
 		      OCTAVE_QUIT;
 
-		      si (j + si_offset) =  si (j + 1 + si_offset) - 
-			a (j+1) * y (idx) + b (j+1) * x (idx);
+		      psi[j] = psi[j+1] + pb[j+1] * px[idx];
 		    }
 
-		  si (si_len - 1 + si_offset) = b (si_len) * x (idx)
-		    - a (si_len) * y (idx);
+		  psi[si_len-1] = pb[si_len] * px[idx];
 		}
 	      else
-		si (si_offset) = b (si_len) * x (idx)
-		  - a (si_len) * y (idx);
-	    }
-	}
-      else if (si_len > 0)
-	{
-	  for (int i = 0; i < x_len; i++)
-	    {
-	      int idx = i * x_stride + x_offset; 
-	      y (idx) = si (si_offset) + b (0) * x (idx);
+		{
+		  OCTAVE_QUIT;
 
-	      if (si_len > 1)
-		{
-		  for (int j = 0; j < si_len - 1; j++)
-		    {
-		      OCTAVE_QUIT;
-
-		      si (j + si_offset) = si (j + 1 + si_offset) + 
-			b (j+1) * x (idx);
-		    }
-
-		  si (si_len - 1 + si_offset) = b (si_len) * x (idx);
+		  psi[0] = pb[1] * px[idx];
 		}
-	      else
-		si (si_offset) = b (1) * x (idx);
 	    }
 	}
     }
   
   return y;
 }
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
