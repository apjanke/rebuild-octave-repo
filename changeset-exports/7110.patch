# HG changeset patch
# User jwe
# Date 1194388582 0
#      Tue Nov 06 22:36:22 2007 +0000
# Node ID 0e63f1126f01a0a1fa415a74e2d4c2501c68ef61
# Parent  5436efbf35e3d8e2851a5ec967de628a7ea949e9
[project @ 2007-11-06 22:36:22 by jwe]

diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -569,17 +569,18 @@ function __go_draw_axes__ (h, plot_strea
 	   else
 	     data{data_idx} = [xcol, ycol]';
 	   endif
 	   usingclause{data_idx} = "using ($1):($2)";
 	 endfor
 
 	case "surface"
 	  nd = 4;
-          if !((strncmp(obj.edgecolor,"none",4)) && (strncmp(obj.facecolor,"none",4)))
+          if (! (strncmp (obj.edgecolor, "none", 4)
+		 && strncmp (obj.facecolor, "none", 4)))
 	    data_idx++;
 	    is_image_data(data_idx) = false;
 	    parametric(data_idx) = false;
 	    [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	    if (isempty (obj.keylabel))
 	      titlespec{data_idx} = "title \"\"";
 	    else
 	      tmp = undo_string_escapes (obj.keylabel);
@@ -593,17 +594,17 @@ function __go_draw_axes__ (h, plot_strea
 	      withclause{data_idx} = sprintf ("with %s linetype %d %s",
 		 			      style, typ, with);
 	    endif
 
 	    xdat = obj.xdata;
 	    ydat = obj.ydata;
 	    zdat = obj.zdata;
 	    cdat = obj.cdata;
-	  
+
 	    if (xautoscale)
 	      tx = xdat(:);
 	      [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, tx);
 	    endif
 	    if (yautoscale)
 	      ty = ydat(:);
 	      [ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ty);
 	    endif
@@ -616,17 +617,18 @@ function __go_draw_axes__ (h, plot_strea
 	      [cmin, cmax, cminp] = get_data_limits (cmin, cmax, cminp, tc);
 	    endif
 
   	    err = false;
             if (! size_equal(zdat, cdat))
               err = true;
             endif
 	    if (isvector (xdat) && isvector (ydat) && ismatrix (zdat))
-	      if (rows (zdat) == length (ydat) && columns (zdat) == length (xdat))
+	      if (rows (zdat) == length (ydat)
+		  && columns (zdat) == length (xdat))
                 [xdat, ydat] = meshgrid (xdat, ydat);
 	      else
                 err = true;
 	      endif
 	    elseif (ismatrix (xdat) && ismatrix (ydat) && ismatrix (zdat))
 	      if (! (size_equal (xdat, ydat) && size_equal (xdat, zdat)))
                 err = true;
 	      endif
@@ -659,50 +661,53 @@ function __go_draw_axes__ (h, plot_strea
 	    fputs (plot_stream, "set hidden3d;\n");
 	    fputs (plot_stream, "set style data lines;\n");
 	    fputs (plot_stream, "set surface;\n");
 	    fputs (plot_stream, "unset contour;\n");
 	    fprintf (plot_stream, "set cbrange [%g:%g];\n", cmin, cmax);
 
 	    if (have_newer_gnuplot)
 	      ## Interpolation does not work for flat surfaces (e.g. pcolor)
-              ## and color mapping --> currently set empty
+              ## and color mapping --> currently set empty.
               interp_str = "";
               surf_colormap = parent_figure_obj.colormap;
-              flat_interp_face = strncmp(obj.facecolor,"flat",4) || strncmp(obj.facecolor,"interp",6);
-              flat_interp_edge = strncmp(obj.edgecolor,"flat",4) || strncmp(obj.edgecolor,"interp",6);
+              flat_interp_face = (strncmp (obj.facecolor, "flat", 4)
+				  || strncmp (obj.facecolor, "interp", 6));
+              flat_interp_edge = (strncmp (obj.edgecolor, "flat", 4)
+				  || strncmp (obj.edgecolor, "interp", 6));
               palette_data = [];
 
-              if ((flat_interp_face) || 
-                  (flat_interp_edge && strncmp(obj.facecolor,"none",4)))
+              if (flat_interp_face
+		  || (flat_interp_edge && strncmp (obj.facecolor, "none", 4)))
                 palette_data = [1:rows(surf_colormap); surf_colormap'];
-              endif 
+              endif
 
-              if (isnumeric(obj.facecolor))
+              if (isnumeric (obj.facecolor))
                 palette_data = [1:2; [obj.facecolor; obj.facecolor]'];
               endif
 
-              if ((strncmp(obj.facecolor,"none",4) && isnumeric(obj.edgecolor)))
+              if (strncmp (obj.facecolor, "none", 4)
+		  && isnumeric (obj.edgecolor))
                 palette_data = [1:2; [obj.edgecolor; obj.edgecolor]'];
               endif
 
-              if (strncmp(obj.facecolor,"none",4))
-              elseif (flat_interp_face && strncmp(obj.edgecolor,"flat",4))
-                fprintf (plot_stream, "set pm3d at s %s\n", interp_str);
+              if (strncmp (obj.facecolor, "none", 4))
+              elseif (flat_interp_face && strncmp (obj.edgecolor, "flat", 4))
+                fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
               else
-                if (strncmp(obj.edgecolor,"none",4))
-                  fprintf (plot_stream, "set pm3d at s %s\n", interp_str);
+                if (strncmp(obj.edgecolor, "none", 4))
+                  fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
                 else
                   edgecol = obj.edgecolor;
                   if (ischar(obj.edgecolor))
                     edgecol = [0 0 0];
                   endif
-                  fprintf (plot_stream, "set pm3d at s hidden3d %d %s \n", data_idx, interp_str);
-                  fprintf (plot_stream, 
-                           "set style line %d linecolor rgb \"#%02x%02x%02x\" lw %f\n",
+                  fprintf (plot_stream, "set pm3d at s hidden3d %d %s;\n", data_idx, interp_str);
+                  fprintf (plot_stream,
+                           "set style line %d linecolor rgb \"#%02x%02x%02x\" lw %f;\n",
                            data_idx, round (255*edgecol), obj.linewidth);
                 endif
               endif
 
               if (length(palette_data) > 0)
                 fprintf (plot_stream,
 	                 "set palette positive color model RGB maxcolors %i;\n",
 	                 columns(palette_data));
@@ -804,17 +809,18 @@ function __go_draw_axes__ (h, plot_strea
     else
       ylim = axis_obj.ylim;
     endif
     if (strcmpi (axis_obj.ydir, "reverse"))
       ydir = "reverse";
     else
       ydir = "noreverse";
     endif
-    fprintf (plot_stream, "set %srange [%.15e:%.15e] %s;\n", yaxisloc, ylim, ydir);
+    fprintf (plot_stream, "set %srange [%.15e:%.15e] %s;\n",
+	     yaxisloc, ylim, ydir);
 
     if (nd == 3 || nd == 4)
       if (zautoscale && have_data)
 	zlim = get_axis_limits (zmin, zmax, zminp, zlogscale);
 	if (isempty (zlim))
 	  return;
 	endif
 	set (h, "zlim", zlim, "zlimmode", "auto");
@@ -823,17 +829,17 @@ function __go_draw_axes__ (h, plot_strea
       endif
       if (strcmpi (axis_obj.zdir, "reverse"))
 	zdir = "reverse";
       else
 	zdir = "noreverse";
       endif
       fprintf (plot_stream, "set zrange [%.15e:%.15e] %s;\n", zlim, zdir);
     endif
-		      
+
     if (strcmpi (axis_obj.box, "on"))
       if (nd == 3 || nd == 4)
 	fputs (plot_stream, "set border 4095;\n");
       else
 	fputs (plot_stream, "set border 431;\n");
       endif
     else
       if (nd == 3 || nd == 4)
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -30,17 +30,21 @@
 
 ## Author: jwe
 
 function h = mesh (varargin)
 
   newplot ();
 
   tmp = surface (varargin{:});
-  ax = get(tmp, "parent");
-  set (tmp, "FaceColor", "none");
-  set (tmp, "EdgeColor", "flat");
+
+  ax = get (tmp, "parent");
+
+  set (tmp, "facecolor", "none");
+  set (tmp, "edgecolor", "flat");
+
   set (ax, "view", [-37.5, 30]);
+
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/pcolor.m b/scripts/plot/pcolor.m
--- a/scripts/plot/pcolor.m
+++ b/scripts/plot/pcolor.m
@@ -1,11 +1,9 @@
-
-## Copyright (C) 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2002, 2004,
-##               2005, 2006, 2007 John W. Eaton
+## Copyright (C) 2007 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -25,35 +23,38 @@
 ## a matrix @var{c} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{c}(i,j)).  Thus, columns of @var{c}
 ## correspond to different @var{x} values and rows of @var{c} correspond
 ## to different @var{y} values.
 ## @seealso{meshgrid, contour}
 ## @end deftypefn
 
-## Author: jwe
+## Author: Kai Habel <kai.habel@gmx.de>
 
-function h = pcolor (x,y,c)
+function h = pcolor (x, y, c)
 
   newplot ();
 
   if (nargin == 1)
-    C = x;
-    Z = zeros(size(C));
-    [nr, nc] = size(C);
-    [X, Y] = meshgrid(1:nr, 1:nc);
+    c = x;
+    z = zeros (size (c));
+    [nr, nc] = size (c);
+    [x, y] = meshgrid (1:nr, 1:nc);
   elseif (nargin == 3)
-    Z = zeros(size(C));
+    z = zeros (size (c));
   else
-    print_usage();
-  end;
+    print_usage ();
+  endif
 
+  tmp = surface (X, Y, Z, c);
 
-  tmp = surface (X,Y,Z,C);
-  ax = get(tmp, "parent");
-  set (tmp, "FaceColor", "flat");
+  ax = get (tmp, "parent");
+
+  set (tmp, "facecolor", "flat");
+
   set (ax, "view", [0, 90]);
+
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -1,10 +1,9 @@
-
-## Copyright (C) 2006,2007  Kai Habel
+## Copyright (C) 2006, 2007  Kai Habel
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
 ## Octave is distributed in the hope that it will be useful, but
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -26,38 +25,43 @@
 ## current axis.
 ##
 ## @example
 ## shading ("interp")
 ## @end example
 ##
 ## @end deftypefn
 
-function shading(ax, mode)
+## Author: Kai Habel <kai.habel@gmx.de>
+
+function shading (ax, mode)
 
   if (nargin == 1)
     mode = ax;
-    ax = gca();
-  end
-
-  if ((nargin !=1 ) && (nargin != 2))
-    print_usage();
+    ax = gca ();
   end
 
-  obj = findobj(ax,"Type","patch");
-  obj = [obj; findobj(ax,"Type","surface")];
+  if (nargin != 1 && nargin != 2)
+    print_usage ();
+  endif
 
-  for n = 1 : length(obj)
+  h1 = findobj (ax, "type", "patch");
+  h2 = findobj (ax, "type", "surface");
+
+  obj = [h1, h2];
+
+  for n = 1:numel(obj)
     h = obj(n); 
-    if strcmp(mode, "flat") 
-      set(h,"FaceColor","flat");
-      set(h,"EdgeColor","none");
-    elseif strcmp(mode,"interp")
-      set(h,"FaceColor","interp");
-      set(h,"EdgeColor","none");
-    elseif strcmp(mode,"faceted")
-      set(h,"FaceColor","flat");
-      set(h,"EdgeColor",[0 0 0]);
+    if (strcmp (mode, "flat"))
+      set (h, "facecolor", "flat");
+      set (h, "edgecolor", "none");
+    elseif (strcmp (mode, "interp"))
+      set (h, "facecolor", "interp");
+      set (h, "edgecolor", "none");
+    elseif (strcmp (mode, "faceted"))
+      set (h, "facecolor", "flat");
+      set (h, "edgecolor", [0 0 0]);
     else
-      error("unknown argument")
+      error ("unknown argument");
     endif
   endfor
+
 endfunction
diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -1,11 +1,9 @@
-
-## Copyright (C) 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2002, 2004,
-##               2005, 2006, 2007 John W. Eaton
+## Copyright (C) 2007 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -24,23 +22,27 @@
 ## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ## @seealso{mesh, surface}
 ## @end deftypefn
 
-## Author: jwe
+## Author: Kai Habel <kai.habel@gmx.de>
 
 function h = surf (varargin)
 
   newplot ();
 
   tmp = surface (varargin{:});
-  ax = get(tmp, "parent");
-  set (tmp, "FaceColor", "flat");
+
+  ax = get (tmp, "parent");
+
+  set (tmp, "facecolor", "flat");
+
   set (ax, "view", [-37.5, 30]);
+
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -1,9 +1,8 @@
-
 ## Copyright (C) 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2002, 2004,
 ##               2005, 2006, 2007 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
@@ -29,72 +28,68 @@
 ## to different @var{y} values.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = surface (x, y, z, c)
 
-  ax = gca();
+  ax = gca ();
 
   if (nargin == 1)
     c = z = x;
     if (ismatrix (z))
       [nr, nc] = size (z);
       x = 1:nc;
       y = (1:nr)';
     else
       error ("surface: argument must be a matrix");
     endif
   elseif (nargin == 3)
+    c = z;
     if (isvector (x) && isvector (y) && ismatrix (z))
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
-        msg = "surface: rows (z) must be the same as length (y) and";
-        msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
-        error (msg);
+        error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)");
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       if (! (size_equal (x, y) && size_equal (x, z)))
         error ("surface: x, y, and z must have same dimensions");
       endif
-      c = z;
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   elseif (nargin == 4)
-    if !(size_equal (z, c))
+    if (! size_equal (z, c))
       error ("surface: z and c must have same size");
     endif
     if (isvector (x) && isvector (y) && ismatrix (z))
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
-        msg = "surface: rows (z) must be the same as length (y) and";
-        msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
-        error (msg);
+        error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)"
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       if (! (size_equal (x, y) && size_equal (x, z)))
         error ("surface: x, y, and z must have same dimensions");
       endif
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   else
     print_usage ();
   endif
 
-  ## make a default surface object
+  ## Make a default surface object.
   tmp = __go_surface__ (ax, "xdata", x, "ydata", y, "zdata", z, "cdata", c);
 
   set (ax, "view", [0, 90], "box", "off");
-  set (tmp, "FaceColor","flat");
+  set (tmp, "facecolor","flat");
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
