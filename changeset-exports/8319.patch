# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1226525799 0
#      Wed Nov 12 21:36:39 2008 +0000
# Node ID c374691576f6206788add8ab35358c4b86fcc75a
# Parent  cc29ef9a2d84c53334567fa7c97f09b64c8eaa79
Fix for MSVC compilation

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,27 @@
+2008-11-12  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* MArray-C.cc, MArray-d.cc, MArray-f.cc, MArray-fC.cc: Declare
+	MArray<T>::norm specialization before implicit MArray<T> implicit
+	instantiation.
+	* idx-vector.h (class idx_vector::idx_base_rep, class
+	idx_vector::idx_range_rep, class idx_vector::idx_colon_rep, class
+	idx_vector::idx_scalar_rep, class idx_vector::idx_vector_rep): Add
+	OCTAVE_API tag.
+	* idx-vector.cc (idx_vector::idx_scalar_rep::idx_scalar_rep(T),
+	idx_vector::idx_vector_rep::idx_vector_rep(const Array<T>&)): Ditto.
+	* oct-inttypes.cc (octave_int<T>::type_name): Ditto.
+	* oct-inttypes.cc (powf(const octave_int<T>&,const float&)): Cast 'b'
+	to double.
+	* oct-inttypes.h: Undefine min/max.
+	* oct-norm.h (xnorm, xfrobnorm, xcolnorms, xrownorms): Add OCTAVE_API
+	tag.
+	* oct-norm.cc (xnorm, xfrobnorm, xcolnorms, xrownorms): Ditto.
+
 2008-11-12  Jaroslav Hajek <highegg@gmail.com>
 
 	* DiagArray2.h (DiagArray2<T>::maybe_delete_elements): Remove
 	declaration.
 
 2008-11-09  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-norm.cc: Don't include Array.cc.  
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 // Instantiate MArrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "MArray.h"
 #include "MArray.cc"
+template <> OCTAVE_API double MArray<Complex>::norm (double p) const;
 #include "CColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API double
 MArray<Complex>::norm (double p) const
 {
   return xnorm (ComplexColumnVector (*this), p);
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
--- a/liboctave/MArray-d.cc
+++ b/liboctave/MArray-d.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 // Instantiate MArrays of double values.
 
 #include "MArray.h"
 #include "MArray.cc"
+template <> OCTAVE_API double MArray<double>::norm (double p) const;
 #include "dColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API double
 MArray<double>::norm (double p) const
 {
   return xnorm (ColumnVector (*this), p);
diff --git a/liboctave/MArray-f.cc b/liboctave/MArray-f.cc
--- a/liboctave/MArray-f.cc
+++ b/liboctave/MArray-f.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 // Instantiate MArrays of float values.
 
 #include "MArray.h"
 #include "MArray.cc"
+template <> OCTAVE_API float MArray<float>::norm (float p) const;
 #include "fColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API float
 MArray<float>::norm (float p) const
 {
   return xnorm (FloatColumnVector (*this));
diff --git a/liboctave/MArray-fC.cc b/liboctave/MArray-fC.cc
--- a/liboctave/MArray-fC.cc
+++ b/liboctave/MArray-fC.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 // Instantiate MArrays of FloatComplex values.
 
 #include "oct-cmplx.h"
 
 #include "MArray.h"
 #include "MArray.cc"
+template <> OCTAVE_API float MArray<FloatComplex>::norm (float p) const;
 #include "fCColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API float
 MArray<FloatComplex>::norm (float p) const
 {
   return xnorm (FloatComplexColumnVector (*this));
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -546,18 +546,18 @@ idx_vector::ones_count () const
   else
     for (octave_idx_type i = 0; i < length (1); i++)
       if (xelem (i) == 0) n++;
   return n;
 }
 
 // Instantiate the octave_int constructors we want.
 #define INSTANTIATE_SCALAR_VECTOR_REP_CONST(T) \
-  template idx_vector::idx_scalar_rep::idx_scalar_rep (T); \
-  template idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>&);
+  template OCTAVE_API idx_vector::idx_scalar_rep::idx_scalar_rep (T); \
+  template OCTAVE_API idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>&);
 
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (float)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (double)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int8)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int16)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int32)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int64)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_uint8)
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -54,17 +54,17 @@ public:
       class_colon = 0,
       class_range,
       class_scalar,
       class_vector
     };
 
 private:
 
-  class idx_base_rep
+  class OCTAVE_API idx_base_rep
   {
   public:
     idx_base_rep (void) : count (1), err (false) { }
 
     virtual ~idx_base_rep (void) { }
 
     // Non-range-checking element query.
     virtual octave_idx_type xelem (octave_idx_type i) const = 0;
@@ -101,17 +101,17 @@ private:
 
   private:
 
     // No copying!
     idx_base_rep (const idx_base_rep&);
   };
 
   // The magic colon index.
-  class idx_colon_rep : public idx_base_rep
+  class OCTAVE_API idx_colon_rep : public idx_base_rep
   {
   public:
     idx_colon_rep (void) { }
 
     idx_colon_rep (char c);
 
     octave_idx_type xelem (octave_idx_type i) const
       { return i; }
@@ -139,17 +139,17 @@ private:
     // No copying!
     idx_colon_rep (const idx_colon_rep& idx);
   };
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
 
   // The integer range index.
-  class idx_range_rep : public idx_base_rep
+  class OCTAVE_API idx_range_rep : public idx_base_rep
   {
   public:
     idx_range_rep (octave_idx_type _start, octave_idx_type _len,
                    octave_idx_type _step, direct) 
       : idx_base_rep (), start(_start), len(_len), step(_step) { }
 
     idx_range_rep (void) 
       : start(0), len(0), step(1) { }
@@ -192,17 +192,17 @@ private:
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
 
   };
 
   // The integer scalar index.
-  class idx_scalar_rep : public idx_base_rep
+  class OCTAVE_API idx_scalar_rep : public idx_base_rep
   {
   public:
     idx_scalar_rep (octave_idx_type i, direct)
       : data (i) { }
 
     idx_scalar_rep (void)
       : data (0) { }
 
@@ -243,17 +243,17 @@ private:
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
 
     octave_idx_type data;
 
   };
 
   // The integer vector index.
-  class idx_vector_rep : public idx_base_rep
+  class OCTAVE_API idx_vector_rep : public idx_base_rep
   {
   public:
     // Direct constructor.
     idx_vector_rep (octave_idx_type *_data, octave_idx_type _len, 
                     octave_idx_type _ext, const dim_vector& od, direct)
       : data (_data), len (_len), ext (_ext), aowner (0), orig_dims (od) { }
 
     idx_vector_rep (void) 
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -33,17 +33,17 @@ template<class T>
 const octave_int<T> octave_int<T>::zero (static_cast<T> (0));
 
 template<class T>
 const octave_int<T> octave_int<T>::one (static_cast<T> (1));
 
 // define type names. 
 #define DECLARE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME) \
   template <> \
-  const char * \
+  OCTAVE_API const char * \
   octave_int<TYPE>::type_name () { return TYPENAME; }
 
 DECLARE_OCTAVE_INT_TYPENAME (int8_t, "int8")
 DECLARE_OCTAVE_INT_TYPENAME (int16_t, "int16")
 DECLARE_OCTAVE_INT_TYPENAME (int32_t, "int32")
 DECLARE_OCTAVE_INT_TYPENAME (int64_t, "int64")
 DECLARE_OCTAVE_INT_TYPENAME (uint8_t, "uint8")
 DECLARE_OCTAVE_INT_TYPENAME (uint16_t, "uint16")
@@ -587,17 +587,17 @@ powf (const float& a, const octave_int<T
 { return octave_int<T> (pow (a, b.float_value ())); }
 
 template <class T>
 octave_int<T>
 powf (const octave_int<T>& a, const float& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits && b == xround (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
-          : octave_int<T> (pow (a.double_value (), b))); 
+          : octave_int<T> (pow (a.double_value (), static_cast<double> (b)))); 
 }
 
 #define INSTANTIATE_INTTYPE(T) \
   template class OCTAVE_API octave_int<T>; \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const double&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const double&); \
   template OCTAVE_API octave_int<T> powf (const float&, const octave_int<T>&); \
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -34,16 +34,22 @@ along with Octave; see the file COPYING.
 #include "oct-types.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 inline long double xround (long double x) { return roundl (x); }
 #endif
 
+// Undefine min/max if needed (this may happen under Windows)
+#ifdef min
+#undef min
+#undef max
+#endif
+
 // FIXME: we define this by our own because some compilers, such as MSVC,
 // do not provide std::abs (int64_t) and std::abs (uint64_t). In the future,
 // it should go away in favor of std::abs.
 template <class T>
 inline T octave_int_abs (T x) { return x >= 0 ? x : -x; }
 
 // Query for an integer type of certain sizeof, and signedness.
 template<int qsize, bool qsigned>
diff --git a/liboctave/oct-norm.cc b/liboctave/oct-norm.cc
--- a/liboctave/oct-norm.cc
+++ b/liboctave/oct-norm.cc
@@ -503,23 +503,23 @@ R matrix_norm (const MatrixT& m, R p, Ve
     (*current_liboctave_error_handler) (p_less1_gripe); 
 
   return res;
 }
 
 // and finally, here's what we've promised in the header file
 
 #define DEFINE_XNORM_FUNCS(PREFIX, RTYPE) \
-  RTYPE xnorm (const PREFIX##ColumnVector& x, RTYPE p) \
+  OCTAVE_API RTYPE xnorm (const PREFIX##ColumnVector& x, RTYPE p) \
   { return vector_norm (x, p); } \
-  RTYPE xnorm (const PREFIX##RowVector& x, RTYPE p) \
+  OCTAVE_API RTYPE xnorm (const PREFIX##RowVector& x, RTYPE p) \
   { return vector_norm (x, p); } \
-  RTYPE xnorm (const PREFIX##Matrix& x, RTYPE p) \
+  OCTAVE_API RTYPE xnorm (const PREFIX##Matrix& x, RTYPE p) \
   { return matrix_norm (x, p, PREFIX##Matrix (), PREFIX##SVD ()); } \
-  RTYPE xfrobnorm (const PREFIX##Matrix& x) \
+  OCTAVE_API RTYPE xfrobnorm (const PREFIX##Matrix& x) \
   { return vector_norm (x, static_cast<RTYPE> (2)); }
 
 DEFINE_XNORM_FUNCS(, double)
 DEFINE_XNORM_FUNCS(Complex, double)
 DEFINE_XNORM_FUNCS(Float, float)
 DEFINE_XNORM_FUNCS(FloatComplex, float)
 
 // this is needed to avoid copying the sparse matrix for xfrobnorm
@@ -529,32 +529,32 @@ inline void array_norm_2 (const T* v, oc
   norm_accumulator_2<R> acc;
   for (octave_idx_type i = 0; i < n; i++)
     acc.accum (v[i]);
 
   res = acc;
 }
 
 #define DEFINE_XNORM_SPARSE_FUNCS(PREFIX, RTYPE) \
-  RTYPE xnorm (const Sparse##PREFIX##Matrix& x, RTYPE p) \
+  OCTAVE_API RTYPE xnorm (const Sparse##PREFIX##Matrix& x, RTYPE p) \
   { return matrix_norm (x, p, PREFIX##Matrix ()); } \
-  RTYPE xfrobnorm (const Sparse##PREFIX##Matrix& x) \
+  OCTAVE_API RTYPE xfrobnorm (const Sparse##PREFIX##Matrix& x) \
   { \
     RTYPE res; \
     array_norm_2 (x.data (), x.nnz (), res); \
     return res; \
   }
 
 DEFINE_XNORM_SPARSE_FUNCS(, double)
 DEFINE_XNORM_SPARSE_FUNCS(Complex, double)
 
 #define DEFINE_COLROW_NORM_FUNCS(PREFIX, RPREFIX, RTYPE) \
-  extern RPREFIX##RowVector xcolnorms (const PREFIX##Matrix& m, RTYPE p) \
+  extern OCTAVE_API RPREFIX##RowVector xcolnorms (const PREFIX##Matrix& m, RTYPE p) \
   { return column_norms (m, p); } \
-  extern RPREFIX##ColumnVector xrownorms (const PREFIX##Matrix& m, RTYPE p) \
+  extern OCTAVE_API RPREFIX##ColumnVector xrownorms (const PREFIX##Matrix& m, RTYPE p) \
   { return row_norms (m, p); } \
 
 DEFINE_COLROW_NORM_FUNCS(, , double)
 DEFINE_COLROW_NORM_FUNCS(Complex, , double)
 DEFINE_COLROW_NORM_FUNCS(Float, Float, float)
 DEFINE_COLROW_NORM_FUNCS(FloatComplex, Float, float)
 
 DEFINE_COLROW_NORM_FUNCS(Sparse, , double)
diff --git a/liboctave/oct-norm.h b/liboctave/oct-norm.h
--- a/liboctave/oct-norm.h
+++ b/liboctave/oct-norm.h
@@ -27,32 +27,32 @@ along with Octave; see the file COPYING.
 
 #include "oct-cmplx.h"
 
 #define DECLARE_XNORM_FUNCS(PREFIX, RTYPE) \
   class PREFIX##Matrix; \
   class PREFIX##ColumnVector; \
   class PREFIX##RowVector; \
   \
-  extern RTYPE xnorm (const PREFIX##ColumnVector&, RTYPE p = 2); \
-  extern RTYPE xnorm (const PREFIX##RowVector&, RTYPE p = 2); \
-  extern RTYPE xnorm (const PREFIX##Matrix&, RTYPE p = 2); \
-  extern RTYPE xfrobnorm (const PREFIX##Matrix&); 
+  extern OCTAVE_API RTYPE xnorm (const PREFIX##ColumnVector&, RTYPE p = 2); \
+  extern OCTAVE_API RTYPE xnorm (const PREFIX##RowVector&, RTYPE p = 2); \
+  extern OCTAVE_API RTYPE xnorm (const PREFIX##Matrix&, RTYPE p = 2); \
+  extern OCTAVE_API RTYPE xfrobnorm (const PREFIX##Matrix&); 
 
 DECLARE_XNORM_FUNCS(, double)
 DECLARE_XNORM_FUNCS(Complex, double)
 DECLARE_XNORM_FUNCS(Float, float)
 DECLARE_XNORM_FUNCS(FloatComplex, float)
 
 DECLARE_XNORM_FUNCS(Sparse, double)
 DECLARE_XNORM_FUNCS(SparseComplex, double)
 
 #define DECLARE_COLROW_NORM_FUNCS(PREFIX, RPREFIX, RTYPE) \
-  extern RPREFIX##RowVector xcolnorms (const PREFIX##Matrix&, RTYPE p = 2); \
-  extern RPREFIX##ColumnVector xrownorms (const PREFIX##Matrix&, RTYPE p = 2); \
+  extern OCTAVE_API RPREFIX##RowVector xcolnorms (const PREFIX##Matrix&, RTYPE p = 2); \
+  extern OCTAVE_API RPREFIX##ColumnVector xrownorms (const PREFIX##Matrix&, RTYPE p = 2); \
 
 DECLARE_COLROW_NORM_FUNCS(, , double)
 DECLARE_COLROW_NORM_FUNCS(Complex, , double)
 DECLARE_COLROW_NORM_FUNCS(Float, Float, float)
 DECLARE_COLROW_NORM_FUNCS(FloatComplex, Float, float)
 
 DECLARE_COLROW_NORM_FUNCS(Sparse, , double)
 DECLARE_COLROW_NORM_FUNCS(SparseComplex, , double)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,16 @@
 2008-11-12  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* dirfcn.cc (Ffilesep): Make it return all file separators when 'all'
 	is given as argument.
 
+	* DLD-FUNCTIONS/getrusage.cc: Undefine min/max.
+	* TEMPLATE-INST/Array-os.cc: Declare Array<bool> as extern template.
+
 2008-11-12  David Bateman  <dbateman@free.fr>
 
 	* OPERATORS/op-cell.cc (op_catop_matrix_cell): Cast args in the correct
 	order.
 	* OPERATORS/op-struct.cc (op_catop_matrix_struct): Ditto.
 
 2008-11-11  Jaroslav Hajek <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/getrusage.cc b/src/DLD-FUNCTIONS/getrusage.cc
--- a/src/DLD-FUNCTIONS/getrusage.cc
+++ b/src/DLD-FUNCTIONS/getrusage.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_SYS_RESOURCE_H
 #include <sys/resource.h>
 #endif
 
 #if defined (__WIN32__)
 #include <windows.h>
 #ifdef min
 #undef min
+#undef max
 #endif
 #endif
 
 #if defined (HAVE_TIMES) && defined (HAVE_SYS_TIMES_H)
 
 #if defined (HAVE_SYS_PARAM_H)
 #include <sys/param.h>
 #endif
diff --git a/src/TEMPLATE-INST/Array-os.cc b/src/TEMPLATE-INST/Array-os.cc
--- a/src/TEMPLATE-INST/Array-os.cc
+++ b/src/TEMPLATE-INST/Array-os.cc
@@ -24,16 +24,18 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array.h"
 #include "Array.cc"
 
+extern template class OCTAVE_API Array<bool>;
+
 #include "oct-stream.h"
 
 typedef scanf_format_elt* scanf_format_elt_ptr;
 typedef printf_format_elt* printf_format_elt_ptr;
 
 NO_INSTANTIATE_ARRAY_SORT (scanf_format_elt_ptr);
 INSTANTIATE_ARRAY (scanf_format_elt_ptr, OCTINTERP_API);
 
