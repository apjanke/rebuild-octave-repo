# HG changeset patch
# User Rik <rik@octave.org>
# Date 1424200021 28800
#      Tue Feb 17 11:07:01 2015 -0800
# Node ID 554aaaf99644febc1d02ac6b3a86354207591d0e
# Parent  17a7e9f26e50d85b142cb2524e4bef1f2feb5425
Fix return phase of acosh to match Matlab (bug #44286).

* NEWS: Announce change.

* mappers.cc (Facosh): Add BIST tests for new behavior.

* lo-mappers.cc: Re-write expression sqrt (x*x -1.0) as
sqrt (x + 1.0) * sqrt (x - 1.0) which gets phase correct if x is complex.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -82,16 +82,20 @@ Summary of important user-visible change
 
  ** The trigonometric functions asin and acos return different phase values
     from previous versions of Octave when the input is outside the principal
     branch ([-1, 1]).  If the real portion of the input is greater than 1 then
     the limit from below is taken.  If the real portion is less than 1 then the
     limit from above is taken.  This criteria is consistent with several other
     numerical analysis software packages.
 
+ ** The hyperbolic function acosh now returns values with a phase in the range
+    [-pi/2, +pi/2].  Previously Octave returned values in the range [0, pi].
+    This is consistent with several other numerical analysis software packages.
+
  ** strfind changes when using empty pattern ("") for Matlab compatibility
 
     strfind now returns an empty array when the pattern itself is empty.
     In previous versions of Octave, strfind matched at every character
     location when the pattern was empty.
 
       NEW
       strfind ("abc", "") => []
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -150,20 +150,32 @@ Compute the inverse hyperbolic cosine fo
 
 /*
 %!test
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
 %!test
+%! re = 2.99822295029797;
+%! im = pi/2;
+%! assert (acosh (10i), re + i*im);
+%! assert (acosh (-10i), re - i*im);
+
+%!test
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
+%!test
+%! re = single (2.99822295029797);
+%! im = single (pi/2);
+%! assert (acosh (single (10i)), re + i*im, 5*eps ("single"));
+%! assert (acosh (single (-10i)), re - i*im, 5*eps ("single"));
+
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
 DEFUN (angle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
 See arg.\n\
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -192,17 +192,17 @@ acos (const Complex& x)
     tmp = 1.0 - x*x;
 
   return -i * log (x + i * sqrt (tmp));
 }
 
 Complex
 acosh (const Complex& x)
 {
-  return log (x + sqrt (x*x - 1.0));
+  return log (x + sqrt (x + 1.0) * sqrt (x - 1.0));
 }
 
 Complex
 asin (const Complex& x)
 {
   static Complex i (0, 1);
 
   Complex tmp;
@@ -429,17 +429,17 @@ acos (const FloatComplex& x)
     tmp = 1.0f - x*x;
 
   return -i * log (x + i * sqrt (tmp));
 }
 
 FloatComplex
 acosh (const FloatComplex& x)
 {
-  return log (x + sqrt (x*x - static_cast<float>(1.0)));
+  return log (x + sqrt (x + 1.0f) * sqrt (x - 1.0f));
 }
 
 FloatComplex
 asin (const FloatComplex& x)
 {
   static FloatComplex i (0, 1);
 
   FloatComplex tmp;
