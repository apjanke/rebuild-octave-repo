# HG changeset patch
# User Rik <rik@octave.org>
# Date 1456159035 28800
#      Mon Feb 22 08:37:15 2016 -0800
# Node ID 8880d93010d8c7a5cb53f3e465658015a2446fe9
# Parent  280ea93d48ddebfc4292f1f342d569d2e16f3e26
Remove further uses of CLASS field in @deftypefn macro.

* errors.txi, external.txi, genpropdoc.m, intro.txi, tips.txi, ode23.m,
runge_kutta_23.m, gnuplot_binary.in:
Remove further uses of CLASS field in @deftypefn macro.

diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -85,17 +85,17 @@ by the @code{@@deftypefn} parts of the h
 isn't written in Texinfo, the error message contains the entire help
 message.
 
 Consider the following function.
 
 @example
 @group
 ## -*- texinfo -*-
-## @@deftypefn @{Function File@} f (@@var@{arg1@})
+## @@deftypefn @{@} f (@@var@{arg1@})
 ## Function help text goes here@dots{}
 ## @@end deftypefn
 function f (arg1)
   if (nargin == 0)
     print_usage ();
   endif
 endfunction
 @end group
@@ -106,22 +106,22 @@ When it is called with no input argument
 error.
 
 @example
 @group
 f ()
 
 @print{}  error: Invalid call to f.  Correct usage is:
 @print{}
-@print{}   -- Function File: f (ARG1)
+@print{}   -- f (ARG1)
 @print{}
 @print{}
 @print{}  Additional help for built-in functions and operators is
 @print{}  available in the online version of the manual.  Use the command
-@print{}  `doc <topic>' to search the manual index.
+@print{}  'doc <topic>' to search the manual index.
 @print{}
 @print{}  Help and information about Octave is also available on the WWW
 @print{}  at http://www.octave.org and via the help@@octave.org
 @print{}  mailing list.
 @end group
 @end example
 
 @DOCSTRING(print_usage)
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1215,17 +1215,17 @@ The major issue is that the help string 
 single line of text, and so the formatting of long help strings needs to
 be taken into account.  There are several possible solutions, but the most
 common is illustrated in the following example,
 
 @example
 @group
 DEFUN_DLD (do_what_i_want, args, nargout,
   "-*- texinfo -*-\n\
-@@deftypefn @{Function File@} @{@} do_what_i_say (@@var@{n@})\n\
+@@deftypefn @{@} @{@} do_what_i_say (@@var@{n@})\n\
 A function that does what the user actually wants rather\n\
 than what they requested.\n\
 @@end deftypefn")
 @{
 @dots{}
 @}
 @end group
 @end example
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -10,17 +10,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{retval} =} genpropdoc (@var{OBJNAME}, @var{FILENAME})
+## @deftypefn {} {@var{retval} =} genpropdoc (@var{OBJNAME}, @var{FILENAME})
 ##
 ## Print FILENAME texinfo source file associated to OBJNAME objects.  This
 ## function is meant to be run for generating octave documentation
 ## (see doc/interpreter/graphics_properties.mk).
 ##
 ## All the hard coded documentation is written in getdoc function.  See the
 ## comments in getdoc bellow for instruction on how to document a graphics
 ## property.
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -575,19 +575,19 @@ concise one-sentence summary of the func
 
 After the summary there may be documentation on the inputs and outputs,
 examples of function usage, notes about the algorithm used, and references
 to related functions.
 
 Here is a description of an imaginary function @code{foo}:
 
 @need 4000
-@deftypefn  {Function File} {} foo (@var{x})
-@deftypefnx {Function File} {} foo (@var{x}, @var{y})
-@deftypefnx {Function File} {} foo (@var{x}, @var{y}, @dots{})
+@deftypefn  {} {} foo (@var{x})
+@deftypefnx {} {} foo (@var{x}, @var{y})
+@deftypefnx {} {} foo (@var{x}, @var{y}, @dots{})
 The function @code{foo} subtracts @var{x} from @var{y}, then adds the
 remaining arguments to the result.
 
 If @var{y} is not supplied, then the number 19 is used by default.
 
 Example:
 
 @example
@@ -654,20 +654,20 @@ arguments.
 
 Command descriptions have a format similar to function descriptions,
 except that the word `Function' is replaced by `Command'.  Commands are
 functions that may be called without surrounding their arguments in
 parentheses.  For example, here is the description for Octave's
 @code{diary} command:
 
 @need 4000
-@deftypefn  {Command} {} diary
-@deftypefnx {Command} {} diary on
-@deftypefnx {Command} {} diary off
-@deftypefnx {Command} {} diary @var{filename}
+@deftypefn  {} {} diary
+@deftypefnx {} {} diary on
+@deftypefnx {} {} diary off
+@deftypefnx {} {} diary @var{filename}
 Record a list of all commands @emph{and} the output they produce, mixed
 together just as they appear on the terminal.
 
 Valid options are:
 
 @table @asis
 @item on
 Start recording a session in a file called @file{diary} in the
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -336,27 +336,25 @@ vary.
 
 Octave also allows extensive formatting of the help string of functions
 using Texinfo.  The effect on the online documentation is relatively
 small, but makes the help string of functions conform to the help of
 Octave's own functions.  However, the effect on the appearance of printed
 or online documentation will be greatly improved.
 
 The fundamental building block of Texinfo documentation strings is the
-Texinfo-macro @code{@@deftypefn}, which takes three arguments: The class
-the function is in, its output arguments, and the function's
-signature.  Typical classes for functions include @code{Function File}
-for standard Octave functions, and @code{Loadable Function} for
-dynamically linked functions.  A skeletal Texinfo documentation string
-therefore looks like this
+Texinfo macro @code{@@deftypefn}.  The first argument to the macro is
+always blank.  The second and third arguments are the function's output
+arguments and the function signature.  A skeletal Texinfo documentation
+string looks like this
 
 @example
 @group
 -*- texinfo -*-
-@@deftypefn @{Function File@} @{@@var@{ret@} =@} fn (@dots{})
+@@deftypefn @{@} @{@@var@{ret@} =@} fn (@dots{})
 @@cindex index term
 Help text in Texinfo format.  Code samples should be marked
 like @@code@{sample of code@} and variables should be marked
 as @@var@{variable@}.
 @@seealso@{fn2, fn3@}
 @@end deftypefn
 @end group
 @end example
@@ -365,17 +363,17 @@ This help string must be commented in us
 string of the @w{@code{DEFUN_DLD}} macro for dynamically loadable
 functions.  The important aspects of the documentation string are
 
 @table @asis
 @item -*- @nospell{texinfo} -*-
 This string signals Octave that the following text is in Texinfo format,
 and should be the first part of any help string in Texinfo format.
 
-@item @@deftypefn @{class@} @dots{} @@end deftypefn
+@item @@deftypefn @{@} @dots{} @@end deftypefn
 The entire help string should be enclosed within the block defined by
 deftypefn.
 
 @item @@cindex index term
 This generates an index entry, and can be useful when the function is
 included as part of a larger piece of documentation.  It is ignored
 within Octave's help viewer.  Only one index term may appear per line
 but multiple @@cindex lines are valid if the function should be
@@ -482,32 +480,32 @@ boundary can be calculated.
 
 In many cases a function has multiple ways in which it can be called,
 and the @code{@@deftypefnx} macro can be used to give alternatives.  For
 example
 
 @example
 @group
 -*- texinfo -*-
-@@deftypefn  @{Function File@} @{@@var@{a@} =@} fn (@@var@{x@}, @dots{})
-@@deftypefnx @{Function File@} @{@@var@{a@} =@} fn (@@var@{y@}, @dots{})
+@@deftypefn  @{@} @{@@var@{a@} =@} fn (@@var@{x@}, @dots{})
+@@deftypefnx @{@} @{@@var@{a@} =@} fn (@@var@{y@}, @dots{})
 Help text in Texinfo format.
 @@end deftypefn
 @end group
 @end example
 
 Many complete examples of Texinfo documentation can be taken from the
 help strings for the Octave functions themselves.  A relatively complete
 example of which is the @code{nchoosek} function.  The Texinfo
 documentation string for @code{nchoosek} is
 
 @example
 -*- texinfo -*-
-@@deftypefn  @{Function File@} @{@@var@{c@} =@} nchoosek (@@var@{n@}, @@var@{k@})
-@@deftypefnx @{Function File@} @{@@var@{c@} =@} nchoosek (@@var@{set@}, @@var@{k@})
+@@deftypefn  @{@} @{@@var@{c@} =@} nchoosek (@@var@{n@}, @@var@{k@})
+@@deftypefnx @{@} @{@@var@{c@} =@} nchoosek (@@var@{set@}, @@var@{k@})
 
 Compute the binomial coefficient of @@var@{n@} or list all possible
 combinations of a @@var@{set@} of items.
 
 If @@var@{n@} is a scalar then calculate the binomial coefficient
 of @@var@{n@} and @@var@{k@} which is defined as
 @@tex
 $$
@@ -572,23 +570,24 @@ coefficients at once with vector inputs 
 which demonstrates most of the concepts discussed above.
 @iftex
 This documentation string renders in Info format as
 @c Note: use the actual output of info below, rather than try and
 @c reproduce it here to prevent it looking different from how it would
 @c appear with info.
 
 @example
- -- Function File: C = nchoosek (N, K)
- -- Function File: C = nchoosek (SET, K)
+ -- C = nchoosek (N, K)
+ -- C = nchoosek (SET, K)
+
      Compute the binomial coefficient of N or list all possible
      combinations of a SET of items.
 
-     If N is a scalar then calculate the binomial coefficient of N and
-     K which is defined as
+     If N is a scalar then calculate the binomial coefficient of N and K
+     which is defined as
 
            /   \
            | n |    n (n-1) (n-2) ... (n-k+1)       n!
            |   |  = ------------------------- =  ---------
            | k |               k!                k! (n-k)!
            \   /
 
      This is the number of combinations of N items taken in groups of
@@ -611,26 +610,26 @@ This documentation string renders in Inf
           nchoosek (1:3, 2)
              =>  1   2
                  1   3
                  2   3
 
      Programming Note: When calculating the binomial coefficient
      `nchoosek' works only for non-negative, integer arguments.  Use
      `bincoeff' for non-integer and negative scalar arguments, or for
-     computing many binomial coefficients at once with vector inputs
-     for N or K.
+     computing many binomial coefficients at once with vector inputs for
+     N or K.
 
      See also: bincoeff, perms.
 @end example
 @noindent
 whereas in printed documentation using @TeX{} it will appear as
 
-@deftypefn  {Function File} {@var{c} =} nchoosek (@var{n}, @var{k})
-@deftypefnx {Function File} {@var{c} =} nchoosek (@var{set}, @var{k})
+@deftypefn  {} {@var{c} =} nchoosek (@var{n}, @var{k})
+@deftypefnx {} {@var{c} =} nchoosek (@var{set}, @var{k})
 
 Compute the binomial coefficient of @var{n} or list all possible
 combinations of a @var{set} of items.
 
 If @var{n} is a scalar then calculate the binomial coefficient
 of @var{n} and @var{k} which is defined as
 @tex
 $$
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -14,21 +14,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init})
-## @deftypefnx {Function File} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init}, @var{ode_opt})
-## @deftypefnx {Function File} {[@var{t}, @var{y}] =} ode23 (@dots{}, @var{par1}, @var{par2}, @dots{})
-## @deftypefnx {Function File} {[@var{t}, @var{y}, @var{te}, @var{ye}, @var{ie}] =} ode23 (@dots{})
-## @deftypefnx {Function File} {@var{solution} =} ode23 (@dots{})
+## @deftypefn  {} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init})
+## @deftypefnx {} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init}, @var{ode_opt})
+## @deftypefnx {} {[@var{t}, @var{y}] =} ode23 (@dots{}, @var{par1}, @var{par2}, @dots{})
+## @deftypefnx {} {[@var{t}, @var{y}, @var{te}, @var{ye}, @var{ie}] =} ode23 (@dots{})
+## @deftypefnx {} {@var{solution} =} ode23 (@dots{})
 ##
 ## Solve a set of non-stiff Ordinary Differential Equations (non-stiff ODEs)
 ## with the well known explicit @nospell{Bogacki-Shampine} method of order 3.
 ## For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods}.
 ##
 ## @var{fun} is a function handle, inline function, or string containing the
 ## name of the function that defines the ODE: @code{y' = f(t,y)}.  The function
diff --git a/scripts/ode/private/runge_kutta_23.m b/scripts/ode/private/runge_kutta_23.m
--- a/scripts/ode/private/runge_kutta_23.m
+++ b/scripts/ode/private/runge_kutta_23.m
@@ -13,22 +13,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt})
-## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
-## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
-## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in}, @var{t_next})
-## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_23 (@dots{})
-## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_23 (@dots{})
+## @deftypefn  {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in}, @var{t_next})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_23 (@dots{})
+## @deftypefnx {} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_23 (@dots{})
 ##
 ## This function can be used to integrate a system of ODEs with a given initial
 ## condition @var{x} from @var{t} to @var{t+dt}, with the Bogacki-Shampine
 ## method of third order.  For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods}.
 ##
 ## @var{@fun} is a function handle that defines the ODE: @code{y' = f(tau,y)}.
 ## The function must accept two inputs where the first is time @var{tau} and the
diff --git a/scripts/plot/util/gnuplot_binary.in b/scripts/plot/util/gnuplot_binary.in
--- a/scripts/plot/util/gnuplot_binary.in
+++ b/scripts/plot/util/gnuplot_binary.in
@@ -12,20 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Loadable Function} {[@var{prog}, @var{args}] =} gnuplot_binary ()
-## @deftypefnx {Loadable Function} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
+## @deftypefn  {} {[@var{prog}, @var{args}] =} gnuplot_binary ()
+## @deftypefnx {} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
 ## Query or set the name of the program invoked by the plot command when the
-## graphics toolkit is set to "gnuplot".
+## graphics toolkit is set to @qcode{"gnuplot"}.
 ##
 ## Additional arguments to pass to the external plotting program may also be
 ## given.  The default value is @qcode{"gnuplot"} with no additional arguments.
 ## @xref{Installation}.
 ## @seealso{graphics_toolkit}
 ## @end deftypefn
 
 ## Author: jwe
