# HG changeset patch
# User jwe
# Date 857810460 0
#      Sat Mar 08 08:41:00 1997 +0000
# Node ID d77a29e4387fcc3e85243e181a95033202a5b96c
# Parent  d477bceb9e2ad95a7caf115c07e274a77956b76b
[project @ 1997-03-08 08:35:56 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -76,62 +76,68 @@ Numerical:
     - Call FSQP.
 
   * Optional inputs for fsqp.
 
   * Allow parameters to be passed through the call to fsolve() to the
     user-supplied function for Matlab compatibility.  Don't place an
     upper limit on the number of arguments.
 
-  * If possible, make economy QR factorization actually take advantage
-    of the form of the result instead of just dropping columns.
-    Lapack doesn't appear to do this yet.
-
   * Check matrices for symmetry before computing eigenvalues, etc.,
     and then use the routines for symmetric matrices for improved
     performance.
 
   * Check matrix classes for proper handling of empty matrices.
 
   * Force all empty matrices to be 0x0 even when other dimensions have
     been speicified, for compatibility with Matlab, at least when some
     preference variable is set.
 
   * Make operations with empty matrices produce empty matrices, for
     compatibility with Matlab (but only if Matlab 5 still does things
     this way). For example:  [1, 2] * [] ==> [].
 
+  * Should any ([]) return [] or 0?  What about all ([])?
+
   * Improve design of ODE, DAE, classes.
 
   * Make it possible to specify a time which dassl and lsode should
     not integrate past.
 
+  * Add interface to daspk (new version of dassl).
+
   * Extend meaning of .* to include v .* M or M .* v (where v is a
     column vector with the same number of rows as M) to scale rows of
     M by elements of v.  Similarly, if w is a row vector with as many
     columns as M, then either w .* M or M .* w scales the columns of
     M.
 
   * Add support for +=, -=, etc.
 
   * Given two vectors x and y of length m and n, implement a function
     outer (x, y, f) that returns an m-by-n matrix with entries
     f (x(i), y(j)).  If f is omitted, multiplication is the default.
     Should probably work for any vectors, not just if x is a column
     vector and y is a row vector.
 
-  * On systems that support matherr(), make it possible for users to
-    enable the printing of warning messages.
-
   * Make it possible to solve b = L \ x efficiently, either by
     providing an explicit function call, or by automatically
     determining that L is triangular.  If it is done automatically,
     provide some means for determining whether Octave has actually
     detected that the matrix is triangular.
 
+  * The polyfit function uses the economy QR factorization, but even
+    that can take a lot of time for large datasets.  Consider an
+    option to compute the result with inv (A' * A) * A' * y or some
+    other faster method.d  Possibly just switch to this method if the
+    dataset is larger than some value.
+
+  * Consider making the behavior of the / and \ operators for
+    non-square systems compatible with Matlab.
+
 --------
 Graphics:
 --------
 
   * Make plotting with plplot work.
 
   * Fix interface with gnuplot to wait for gnuplot to output any text
     before octave returns a prompt.  Possible by implementing two
@@ -151,16 +157,19 @@ Graphics:
   * Make it possible to check the current graphics terminal type.
 
   * If possible, pass data to gnuplot without using temporary files.
 
   * If using temporary files, delete them when gnuplot exits.
 
   * If possible, pass binary data to gnuplot to speed things up.
 
+  * If using gnuplot, consider setting a smaller default for the
+    `zero' value (e.g., set zero sqrt (realmin) or something).
+
 -------
 Strings:
 -------
 
   * Improve performance of string functions, particularly for
     searching and replacing.
 
   * Provide some regex matching functions.
@@ -209,16 +218,30 @@ Input/Output:
     versions of these functions would also be nice, and if you are
     working on them, it would be good to support other size
     specifications (integer*2, etc.).
 
   * Make load and save work for structures.
 
   * Make load and save look for <file>.mat if only given <file>.
 
+    Potential sticky points:
+
+      - For load, if both foo and foo.mat exist, should it prefer foo
+        or foo.mat?  Should the preference depend on the arguments to
+        load?  I think it should only prefer .mat files if the
+        -mat-binary option is supplied, or if the file foo.mat exists
+        but the file foo does not.
+
+      - For save, should it prefer to create foo or foo.mat?  Should
+        the preference depend on the arguments to save?  Should the
+        default_save_format imply a default preference?  I think it
+        should only create .mat files if it is writing Matlab
+        compatible files.
+
   * Move some pr-output stuff to liboctave.
 
   * Make the cutoff point for changing to packed storage a
     user-preference variable with default value 8192.
 
   * Save image data in binary format to save space.
 
   * Make it possible to load other image formats (ppm, pbm, etc. would
@@ -419,17 +442,17 @@ Interpreter:
 
   * Consider making it possible to specify an empty matrix with a
     syntax like [](e1, e2).  Of course at least one of the expressions
     must be zero...
 
   * Eliminate force_numeric and make_numeric functions.
 
   * Is Matrix::fortran_vec() really necessary?
-
+b
   * print_usage() should set error_state in most cases?
 
   * Make statements like this
 
       foo bar baz
 
     turn into function calls like this:
 
@@ -441,24 +464,30 @@ Interpreter:
 
   * Handle comments in parse trees for use with the type command.
 
   * Make the type command handle script files too, by just reading and
     printing them.
 
   * Clean up eye, eval, feval, keyboard, input, ones, zeros.
 
+  * Turn off printing when evaluating expressions in an eval()
+    statement, for compatibility with Matlab.
+
   * It would be nice to have an interactive debugger.
 
   * Make whos report total memory used by variables (and functions?).
 
   * Rewrite whos and the symbol_record_info class.  Write a built-in
     function that gives all the basic information, then write who and
     whos as M-files.
 
+  * On systems that support matherr(), make it possible for users to
+    enable the printing of warning messages.
+
 -------
 History:
 -------
 
   * Add an option to allow saving input from script files in the
     history list.
 
   * Fix history problems -- core dump if multiple processes are
@@ -528,18 +557,16 @@ Documentation and On-Line Help:
 
   * Make the arrow keys work in the info reader.
 
   * Update Info to be based on the current Texinfo release.
 
   * Should info/terminal.c include definitions for PC, BC, UP, and
     ospeed on all systems?
 
-  * Clean up help stuff.
-
   * Demo files.
 
   * As the number of m-files with octave grows perhaps a 'Contents.m'
     file for each toolbox (directory) would be appropriate so one
     knows exactly what functions are in a toolbox with a quick look.
     It would be best to generate information for each function directly
     from the M-files, so that the information doesn't have to be
     duplicated, and will remain current if the M-files change.  It
diff --git a/doc/interpreter/control.texi b/doc/interpreter/control.texi
--- a/doc/interpreter/control.texi
+++ b/doc/interpreter/control.texi
@@ -369,19 +369,31 @@ function attempts to solve either
 @tex
 $AXA^T - X + B B^T = 0$ or $A^TXA - X + B^TB = 0$,
 @end tex
 @ifinfo
 @code{a x a' - x + b b' = 0} or @code{a' x a - x + b' b = 0},
 @end ifinfo
 whichever is appropriate.
 
-Uses Schur decomposition method as in Kitagawa, International Journal of
-Control (1977); column-by-column solution method as suggested in
-Hammarling, IMA Journal of Numerical Analysis, (1982).
+Uses Schur decomposition method as in Kitagawa 
+@iftex
+@tex
+@cite{An Algorithm for Solving the Matrix Equation $X = F X F^\prime + S$},
+@end tex
+@end iftex
+@ifinfo
+@cite{An Algorithm for Solving the Matrix Equation @var{X} =
+@var{F}@var{X}@var{F}' + @var{S}},
+@end ifinfo
+International Journal of Control, Volume 25, Number 5, pages 745--753
+(1977); column-by-column solution method as suggested in
+Hammerling, @cite{Numerical Solution of the Stable, Non-Negative
+Definite Lyapunov Equation}, IMA Journal of Numerical Analysis, Volume
+2, pages 303--323 (1982).
 @end deftypefn
 
 @deftypefn {Function File} {} is_controllable (@var{a}, @var{b}, @var{tol})
 Return 1 if the pair (@var{a}, @var{b}) is controllable.  Otherwise,
 return 0.
 
 The optional argument @var{tol} is a roundoff parameter.  If it is
 omitted, a value of @code{2*eps} is used.
diff --git a/doc/interpreter/func.texi b/doc/interpreter/func.texi
--- a/doc/interpreter/func.texi
+++ b/doc/interpreter/func.texi
@@ -121,16 +121,21 @@ endfunction
 @end example
 
 @noindent
 The symbol @var{ret-var} is the name of the variable that will hold the
 value to be returned by the function.  This variable must be defined
 before the end of the function body in order for the function to return
 a value.
 
+Variables used in the body of a function are local to the
+function.  Variables named in @var{arg-list} and @var{ret-var} are also
+local to the function.  @xref{Global Variables}, for information about
+how to access global variables inside a function.
+
 For example, here is a function that computes the average of the
 elements of a vector:
 
 @example
 @group
 function retval = avg (v)
   retval = sum (v) / length (v);
 endfunction
diff --git a/doc/interpreter/install.texi b/doc/interpreter/install.texi
--- a/doc/interpreter/install.texi
+++ b/doc/interpreter/install.texi
@@ -47,16 +47,23 @@ of @var{prefix} is @file{/usr/local}.
 Look for Octave sources in the directory @var{dir}.
 
 @item --with-f2c
 Use @code{f2c} even if a Fortran compiler is available.
 
 @item --with-g77
 Use @code{g77} to compile Fortran code.
 
+@item --enable-shared
+Create shared libraries.  If you are planning to use
+@code{--enable-lite-kernelel} or the dynamic loading features, you will
+probably want to use this option.  It will make your @file{.oct} files
+much smaller.  You may also want to build a shared version of
+@code{libg++}, if your system doesn't already have one.
+
 @item --enable-dl
 Use @code{dlopen} and friends to make Octave capable of dynamically
 linking externally compiled functions.  This only works on systems that
 actually have these functions.
 
 @item --enable-shl
 Use @code{shl_load} and friends to make Octave capable of dynamically
 linking externally compiled functions.  This only works on systems that
@@ -176,23 +183,40 @@ Executables to be run by Octave rather t
 Object files that will be dynamically loaded.
 
 @item @var{prefix}/share/octave/@var{version}/imagelib
 Image files that are distributed with Octave.
 @end table
 @end itemize
 
 @menu
+* Notes::                       
 * Installation Problems::       
 * Binary Distributions::        
 @end menu
 
-@node Installation Problems, Binary Distributions, Installation, Installation
+@node Notes, Installation Problems, Installation, Installation
+@appendixsec Notes
+
+@itemize @bullet
+@item
+You must use the version of GNU Info distributed with Octave, because it
+includes some changes to allow Octave to search the indices of the info
+files.  If you would like, you should be able to replace other copies of
+the Info browser that you have with the one distributed with Octave.
+Patches relative to a recent release of the GNU Info browser are
+included in the file @file{INFO.PATCH} in the Octave source
+distribution.  This modification has been submitted to the GNU Info
+maintainer, and should appear in some future release.  Once that
+happens, the GNU Info browser will no longer be distributed with Octave.
+@end itemize
+
+@node Installation Problems, Binary Distributions, Notes, Installation
 @appendixsec Installation Problems
-	
+
 This section contains a list of problems (and some apparent problems
 that don't really mean anything is wrong) that may show up during
 installation of Octave.
 
 @itemize @bullet
 @item
 On some SCO systems, @code{info} fails to compile if
 @code{HAVE_TERMIOS_H} is defined int @file{config.h}.  Simply removing
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+Sat Mar  8 02:35:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (save_ascii_data, save_three_d): Where appropriate,
+	use bool instead of int.
+	(save_binary_data, save_mat_binary_data, save_ascii_data):
+	Print warning instead of error for wrong type arg.
+
+	* gripes.cc (gripe_wrong_type_arg): New arg, is_error.
+
+	* pt-plot.cc (save_in_tmp_file): Call save_ascii_data with bool
+	arg, not int.
+
 Fri Mar  7 00:56:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dassl.cc (show_dassl_option): For values that are determined
 	automatically, return a string instead of a magic value (-1.0).
 	* fsolve.cc (show_fsolve_option): Likewise.
 	* lsode.cc (show_lsode_option): Likewise.
 	* npsol.cc (show_npsol_option): Likewise.
 	* qpsol.cc (show_qpsol_option): Likewise.
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -55,17 +55,17 @@ gripe_nonconformant (void)
 void
 gripe_nonconformant (int r1, int c1, int r2, int c2)
 {
   error ("nonconformant matrices (op1 is %dx%d, op2 is %dx%d)",
 	 r1, c1, r2, c2);
 }
 
 void
-gripe_empty_arg (const char *name, int is_error)
+gripe_empty_arg (const char *name, bool is_error)
 {
   if (is_error)
     error ("%s: empty matrix is invalid as an argument", name);
   else
     warning ("%s: argument is empty matrix", name);
 }
 
 void
@@ -118,26 +118,34 @@ gripe_unrecognized_data_fmt (const char 
 
 void
 gripe_data_conversion (const char *from, const char *to)
 {
   error ("unable to convert from %s to %s format", from, to);
 }
 
 void
-gripe_wrong_type_arg (const char *name, const string& s)
+gripe_wrong_type_arg (const char *name, const string& s, bool is_error)
 {
-  error ("%s: wrong type argument `%s'", name, s.c_str ());
+  if (is_error)
+    error ("%s: wrong type argument `%s'", name, s.c_str ());
+  else
+    warning ("%s: wrong type argument `%s'", name, s.c_str ());
 }
 
 void
-gripe_wrong_type_arg (const char *name, const octave_value& tc)
+gripe_wrong_type_arg (const char *name, const octave_value& tc,
+		      bool is_error)
 {
   string type = tc.type_name ();
-  error ("%s: wrong type argument `%s'", name, type.c_str ());
+
+  if (is_error)
+    error ("%s: wrong type argument `%s'", name, type.c_str ());
+  else
+    warning ("%s: wrong type argument `%s'", name, type.c_str ());
 }
 
 void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op)
 {
   string type = op.type_name ();
   error ("invalid operand `%s' for unary operator", type.c_str ());
 }
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -22,37 +22,81 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_gripes_h)
 #define octave_gripes_h 1
 
 #include <string>
 
 class octave_value;
 
-extern void gripe_not_supported (const char *);
-extern void gripe_string_invalid (void);
-extern void gripe_range_invalid (void);
-extern void gripe_nonconformant (void);
-extern void gripe_nonconformant (int r1, int c1, int r2, int c2);
-extern void gripe_empty_arg (const char *name, int is_error);
-extern void gripe_square_matrix_required (const char *name);
-extern void gripe_user_supplied_eval (const char *name);
-extern void gripe_user_returned_invalid (const char *name);
-extern void gripe_invalid_conversion (const string& from, const string& to);
-extern void gripe_invalid_value_specified (const char *name);
-extern void gripe_2_or_3_dim_plot (void);
-extern void gripe_unrecognized_float_fmt (void);
-extern void gripe_unrecognized_data_fmt (const char *warn_for);
-extern void gripe_data_conversion (const char *from, const char *to);
-extern void gripe_wrong_type_arg (const char *name, const string& s);
-extern void gripe_wrong_type_arg (const char *name, const octave_value& tc);
-extern void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
-extern void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
-extern void gripe_implicit_conversion (const char *from, const char *to);
-extern void gripe_divide_by_zero (void);
+
+extern void
+gripe_not_supported (const char *);
+
+extern void
+gripe_string_invalid (void);
+
+extern void
+gripe_range_invalid (void);
+
+extern void
+gripe_nonconformant (void);
+
+extern void
+gripe_nonconformant (int r1, int c1, int r2, int c2);
+
+extern void
+gripe_empty_arg (const char *name, bool is_error);
+
+extern void
+gripe_square_matrix_required (const char *name);
+
+extern void
+gripe_user_supplied_eval (const char *name);
+
+extern void
+gripe_user_returned_invalid (const char *name);
+
+extern void
+gripe_invalid_conversion (const string& from, const string& to);
+
+extern void
+gripe_invalid_value_specified (const char *name);
+
+extern void
+gripe_2_or_3_dim_plot (void);
+
+extern void
+gripe_unrecognized_float_fmt (void);
+
+extern void
+gripe_unrecognized_data_fmt (const char *warn_for);
+
+extern void
+gripe_data_conversion (const char *from, const char *to);
+
+extern void
+gripe_wrong_type_arg (const char *name, const string& s,
+		      bool is_error = true);
+
+extern void
+gripe_wrong_type_arg (const char *name, const octave_value& tc,
+		      bool is_error = true);
+
+extern void
+gripe_wrong_type_arg_for_unary_op (const octave_value& op);
+
+extern void
+gripe_wrong_type_arg_for_binary_op (const octave_value& op);
+
+extern void
+gripe_implicit_conversion (const char *from, const char *to);
+
+extern void
+gripe_divide_by_zero (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1765,23 +1765,21 @@ get_save_type (double max_val, double mi
 
   return st;
 }
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
 // binary format described above for read_binary_data.
 
-static int
+static bool
 save_binary_data (ostream& os, const octave_value& tc,
 		  const string& name, const string& doc,
 		  int mark_as_global, int save_as_floats) 
 {
-  int fail = 0;
-
   FOUR_BYTE_INT name_len = name.length ();
 
   os.write (&name_len, 4);
   os << name;
 
   FOUR_BYTE_INT doc_len = doc.length ();
 
   os.write (&doc_len, 4);
@@ -1896,33 +1894,28 @@ save_binary_data (ostream& os, const oct
       double bas = r.base ();
       double lim = r.limit ();
       double inc = r.inc ();
       os.write (&bas, 8);
       os.write (&lim, 8);
       os.write (&inc, 8);
     }
   else
-    {
-      gripe_wrong_type_arg ("save", tc);
-      fail = 1;
-    }
-
-  return (os && ! fail);
+    gripe_wrong_type_arg ("save", tc, false);
+
+  return os;
 }
 
 // Save the data from TC along with the corresponding NAME on stream OS 
 // in the MatLab binary format.
 
-static int
+static bool
 save_mat_binary_data (ostream& os, const octave_value& tc,
 		      const string& name) 
 {
-  int fail = 0;
-
   FOUR_BYTE_INT mopt = 0;
 
   mopt += tc.is_string () ? 1 : 0;
 
   oct_mach_info::float_format flt_fmt =
     oct_mach_info::native_float_format ();;
 
   mopt += 1000 * float_format_to_mopt_digit (flt_fmt);
@@ -1988,26 +1981,23 @@ save_mat_binary_data (ostream& os, const
       int nel = r.nelem ();
       for (int i = 0; i < nel; i++)
 	{
 	  double x = base + i * inc;
 	  os.write (&x, 8);
 	}
     }
   else
-    {
-      gripe_wrong_type_arg ("save", tc);
-      fail = 1;
-    }
-
-  return (os && ! fail);
+    gripe_wrong_type_arg ("save", tc, false);
+
+  return os;
 }
 
 static void
-ascii_save_type (ostream& os, char *type, int mark_as_global)
+ascii_save_type (ostream& os, char *type, bool mark_as_global)
 {
   if (mark_as_global)
     os << "# type: global ";
   else
     os << "# type: ";
 
   os << type << "\n";
 }
@@ -2092,22 +2082,22 @@ strip_infnan (const ComplexMatrix& m)
 // axis ranges, etc.).
 //
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // XXX FIXME XXX -- should probably write the help string here too.
 
-int
+bool
 save_ascii_data (ostream& os, const octave_value& tc,
-		 const string& name, int strip_nan_and_inf,
-		 int mark_as_global, int precision) 
+		 const string& name, bool strip_nan_and_inf,
+		 bool mark_as_global, int precision) 
 {
-  int success = 1;
+  bool success = true;
 
   if (! precision)
     precision = Vsave_precision;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   long old_precision = os.precision ();
@@ -2118,17 +2108,17 @@ save_ascii_data (ostream& os, const octa
       ascii_save_type (os, "scalar", mark_as_global);
 
       double d = tc.double_value ();
       if (strip_nan_and_inf)
 	{
 	  if (xisnan (d))
 	    {
 	      error ("only value to plot is NaN");
-	      success = 0;
+	      success = false;
 	    }
 	  else
 	    {
 	      d = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
 	      os << d << "\n";
 	    }
 	}
       else
@@ -2151,17 +2141,17 @@ save_ascii_data (ostream& os, const octa
       ascii_save_type (os, "complex scalar", mark_as_global);
 
       Complex c = tc.complex_value ();
       if (strip_nan_and_inf)
 	{
 	  if (xisnan (c))
 	    {
 	      error ("only value to plot is NaN");
-	      success = 0;
+	      success = false;
 	    }
 	  else
 	    {
 	      double re = real (c);
 	      double im = imag (c);
 
 	      re = xisinf (re) ? (re > 0 ? OCT_RBV : -OCT_RBV) : re;
 	      im = xisinf (im) ? (im > 0 ? OCT_RBV : -OCT_RBV) : im;
@@ -2207,20 +2197,17 @@ save_ascii_data (ostream& os, const octa
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
       os << "# base, limit, increment\n"
 	 << tmp.base () << " "
 	 << tmp.limit () << " "
 	 << tmp.inc () << "\n";
     }
   else
-    {
-      gripe_wrong_type_arg ("save", tc);
-      success = 0;
-    }
+    gripe_wrong_type_arg ("save", tc, false);
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
 // Save the info from sr on stream os in the format specified by fmt.
 
@@ -2241,17 +2228,17 @@ do_save (ostream& os, symbol_record *sr,
   octave_value tc = tmp->eval (0);
 
   if (tc.is_undefined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
-      save_ascii_data (os, tc, name, 0, global);
+      save_ascii_data (os, tc, name, false, global);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
@@ -2502,18 +2489,18 @@ save variables in a file")
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
 // nonzero, assume a parametric 3-dimensional plot will be generated.
 
-int
-save_three_d (ostream& os, const octave_value& tc, int parametric)
+bool
+save_three_d (ostream& os, const octave_value& tc, bool parametric)
 {
   int fail = 0;
 
   int nr = tc.rows ();
   int nc = tc.columns ();
 
   if (tc.is_real_matrix ())
     {
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -24,23 +24,24 @@ Software Foundation, 59 Temple Place - S
 #define octave_load_save_h 1
 
 class ostream;
 
 class octave_value;
 
 #include <string>
 
-extern int save_ascii_data (ostream& os, const octave_value& t,
-			    const string& name = string (),
-			    int strip_nan_and_inf = 0,
-			    int mark_as_global = 0, int precision = 0);
+extern bool save_ascii_data (ostream& os, const octave_value& t,
+			     const string& name = string (),
+			     bool strip_nan_and_inf = false,
+			     bool mark_as_global = false,
+			     int precision = 0);
 
-extern int save_three_d (ostream& os, const octave_value& t,
-			 int parametric = 0);
+extern bool save_three_d (ostream& os, const octave_value& t,
+			  bool parametric = false);
 
 extern void save_user_variables (void);
 
 extern void symbols_of_load_save (void);
 
 #endif
 
 /*
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -856,17 +856,17 @@ save_in_tmp_file (octave_value& t, int n
     {
       ofstream file (name.c_str ());
 
       if (file)
 	{
 	  switch (ndim)
 	    {
 	    case 2:
-	      save_ascii_data (file, t, name, 1);
+	      save_ascii_data (file, t, name, true);
 	      break;
 
 	    case 3:
 	      save_three_d (file, t, parametric);
 	      break;
 
 	    default:
 	      gripe_2_or_3_dim_plot ();
