# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1382144433 14400
#      Fri Oct 18 21:00:33 2013 -0400
# Node ID efbe746f8fa89a6870f6b24ba89b918addd34c6d
# Parent  38cf56b77274504c79b9b8ac8a1c4bbc59d1dfe5
eliminate octave_comment_buffer singleton

* lex.h (octave_base_lexer::comment_buffer): New class adapted from
octave_comment_buffer class.  No longer a singleton class.
(octave_base_lexer::comment_buffer::reset): New function.
(octave_base_lexer::reset): Call comment_buf.reset.
(octave_base_lexer::comment_buf): New data member.
(octave_base_lexer::get_comment): New function.
* comment-list.h, comment-list.cc (octave_comment_buffer): Delete.
Change all uses of octave_comment_buffer to use local comment_buf
object instead.

* parse.h (octave_base_parser::make_statement): New member function.
* oct-parse.in.yy (make_statement): Delete.
Change all uses of make_statement to use the member function instead.
(safe_fclose): Don't extract and delete comment list here.

diff --git a/libinterp/corefcn/comment-list.cc b/libinterp/corefcn/comment-list.cc
--- a/libinterp/corefcn/comment-list.cc
+++ b/libinterp/corefcn/comment-list.cc
@@ -20,87 +20,26 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "lo-utils.h"
-#include "singleton-cleanup.h"
 
 #include "comment-list.h"
 #include "error.h"
 
-octave_comment_buffer *octave_comment_buffer::instance = 0;
-
 octave_comment_list *
 octave_comment_list::dup (void) const
 {
   octave_comment_list *new_cl = new octave_comment_list ();
 
   for (const_iterator p = begin (); p != end (); p++)
     {
       const octave_comment_elt elt = *p;
 
       new_cl->append (elt);
     }
 
   return new_cl;
 }
-
-bool
-octave_comment_buffer::instance_ok (void)
-{
-  bool retval = true;
-
-  if (! instance)
-    {
-      instance = new octave_comment_buffer ();
-
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
-
-  if (! instance)
-    {
-      ::error ("unable to create comment buffer object");
-
-      retval = false;
-    }
-
-  return retval;
-}
-
-void
-octave_comment_buffer::append (const std::string& s,
-                               octave_comment_elt::comment_type t)
-{
-  if (instance_ok ())
-    instance->do_append (s, t);
-}
-
-octave_comment_list *
-octave_comment_buffer::get_comment (void)
-{
-  return (instance_ok ()) ? instance->do_get_comment () : 0;
-}
-
-void
-octave_comment_buffer::do_append (const std::string& s,
-                                  octave_comment_elt::comment_type t)
-{
-  comment_list->append (s, t);
-}
-
-octave_comment_list *
-octave_comment_buffer::do_get_comment (void)
-{
-  octave_comment_list *retval = 0;
-
-  if (comment_list && comment_list->length () > 0)
-    {
-      retval = comment_list;
-      comment_list = new octave_comment_list ();
-    }
-
-  return retval;
-}
diff --git a/libinterp/corefcn/comment-list.h b/libinterp/corefcn/comment-list.h
--- a/libinterp/corefcn/comment-list.h
+++ b/libinterp/corefcn/comment-list.h
@@ -93,40 +93,9 @@ public:
 
   void append (const std::string& s,
                octave_comment_elt::comment_type t = octave_comment_elt::unknown)
     { append (octave_comment_elt (s, t)); }
 
   octave_comment_list *dup (void) const;
 };
 
-class
-octave_comment_buffer
-{
-public:
-
-  octave_comment_buffer (void)
-    : comment_list (new octave_comment_list ()) { }
-
-  ~octave_comment_buffer (void) { delete comment_list; }
-
-  static bool instance_ok (void);
-
-  static void append
-    (const std::string& s,
-     octave_comment_elt::comment_type t = octave_comment_elt::unknown);
-
-  static octave_comment_list *get_comment (void);
-
-private:
-
-  void do_append (const std::string& s, octave_comment_elt::comment_type t);
-
-  octave_comment_list *do_get_comment (void);
-
-  octave_comment_list *comment_list;
-
-  static octave_comment_buffer *instance;
-
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-};
-
 #endif
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -488,18 +488,60 @@ public:
   private:
 
     std::string buffer;
     const char *pos;
     size_t chars_left;
     bool eof;
   };
 
+  // Collect comment text.
+
+  class
+  comment_buffer
+  {
+  public:
+
+    comment_buffer (void) : comment_list (0) { }
+
+    ~comment_buffer (void) { delete comment_list; }
+
+    void append (const std::string& s, octave_comment_elt::comment_type t)
+    {
+      if (! comment_list)
+        comment_list = new octave_comment_list ();
+
+      comment_list->append (s, t);
+    }
+
+    // Caller is expected to delete the returned value.
+
+    octave_comment_list *get_comment (void)
+    {
+      octave_comment_list *retval = comment_list;
+
+      comment_list = 0;
+
+      return retval;
+    }
+
+    void reset (void)
+    {
+      delete comment_list;
+
+      comment_list = 0;
+    }
+
+  private:
+
+    octave_comment_list *comment_list;
+  };
+
   octave_base_lexer (void)
-    : lexical_feedback (), scanner (0), input_buf ()
+    : lexical_feedback (), scanner (0), input_buf (), comment_buf ()
   {
     init ();
   }
 
   virtual ~octave_base_lexer (void);
 
   void init (void);
 
@@ -540,16 +582,18 @@ public:
   bool whitespace_is_significant (void);
 
   void handle_number (void);
 
   void handle_continuation (void);
 
   void finish_comment (octave_comment_elt::comment_type typ);
 
+  octave_comment_list *get_comment (void) { return comment_buf.get_comment (); }
+
   int handle_close_bracket (int bracket_type);
 
   bool looks_like_command_arg (void);
 
   int handle_superclass_identifier (void);
 
   int handle_meta_identifier (void);
 
@@ -578,16 +622,19 @@ public:
   void lexer_debug (const char *pattern);
 
   // Internal state of the flex-generated lexer.
   void *scanner;
 
   // Object that reads and buffers input.
   input_buffer input_buf;
 
+  // Object that collects comment text.
+  comment_buffer comment_buf;
+
   virtual void increment_promptflag (void) = 0;
 
   virtual void decrement_promptflag (void) = 0;
 
   virtual int promptflag (void) const = 0;
 
   virtual int promptflag (int) = 0;
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2032,16 +2032,18 @@ octave_base_lexer::reset (void)
       && (interactive || forced_interactive)
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
             || input_from_eval_string ()))
     yyrestart (stdin, scanner);
 
   lexical_feedback::reset ();
+
+  comment_buf.reset ();
 }
 
 void
 octave_base_lexer::prep_for_file (void)
 {
   reading_script_file = true;
 
   push_start_state (INPUT_FILE_START);
@@ -2532,17 +2534,17 @@ octave_base_lexer::finish_comment (octav
 
   if (nesting_level.none () && help_text.empty ()
     && ! comment_text.empty () && ! copyright)
     help_text = comment_text;
 
   if (copyright)
     typ = octave_comment_elt::copyright;
 
-  octave_comment_buffer::append (comment_text, typ);
+  comment_buf.append (comment_text, typ);
 
   comment_text = "";
 
   at_beginning_of_statement = true;
 }
 
 int
 octave_base_lexer::handle_close_bracket (int bracket_type)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -100,26 +100,16 @@ bool reading_startup_message_printed = f
 // List of autoloads (function -> file mapping).
 static std::map<std::string, std::string> autoload_map;
 
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 static void yyerror (octave_base_parser& parser, const char *s);
 
-// Finish building a statement.
-template <class T>
-static tree_statement *
-make_statement (T *arg)
-{
-  octave_comment_list *comment = octave_comment_buffer::get_comment ();
-
-  return new tree_statement (arg, comment);
-}
-
 #define ABORT_PARSE \
   do \
     { \
       yyerrok; \
       if ((interactive || forced_interactive) \
           && ! lexer.input_from_eval_string ()) \
         YYACCEPT; \
       else \
@@ -391,21 +381,21 @@ list            : list1 opt_sep
 
 list1           : statement
                   { $$ = parser.make_statement_list ($1); }
                 | list1 sep statement
                   { $$ = parser.append_statement_list ($1, $2, $3, true); }
                 ;
 
 statement       : expression
-                  { $$ = make_statement ($1); }
+                  { $$ = parser.make_statement ($1); }
                 | command
-                  { $$ = make_statement ($1); }
+                  { $$ = parser.make_statement ($1); }
                 | word_list_cmd
-                  { $$ = make_statement ($1); }
+                  { $$ = parser.make_statement ($1); }
                 ;
 
 // =================
 // Word-list command
 // =================
 
 // These are not really like expressions since they can't appear on
 // the RHS of an assignment.  But they are also not like commands (IF,
@@ -1574,17 +1564,17 @@ class_enum      : identifier '(' express
 // Miscellaneous
 // =============
 
 stmt_begin      : // empty
                   { lexer.at_beginning_of_statement = true; }
                 ;
 
 stash_comment   : // empty
-                  { $$ = octave_comment_buffer::get_comment (); }
+                  { $$ = lexer.get_comment (); }
                 ;
 
 parse_error     : LEXICAL_ERROR
                   { parser.bison_error ("parse error"); }
                 | error
                 ;
 
 sep_no_nl       : ','
@@ -2333,17 +2323,17 @@ octave_base_parser::make_unwind_command 
                                          token *end_tok,
                                          octave_comment_list *lc,
                                          octave_comment_list *mc)
 {
   tree_command *retval = 0;
 
   if (end_token_ok (end_tok, token::unwind_protect_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       int l = unwind_tok->line ();
       int c = unwind_tok->column ();
 
       retval = new tree_unwind_protect_command (body, cleanup_stmts,
                                                 lc, mc, tc, l, c);
     }
   else
@@ -2365,17 +2355,17 @@ octave_base_parser::make_try_command (to
                                       token *end_tok,
                                       octave_comment_list *lc,
                                       octave_comment_list *mc)
 {
   tree_command *retval = 0;
 
   if (end_token_ok (end_tok, token::try_catch_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       int l = try_tok->line ();
       int c = try_tok->column ();
 
       tree_identifier *id = 0;
 
       if (! catch_sep && cleanup_stmts && ! cleanup_stmts->empty ())
         {
@@ -2419,17 +2409,17 @@ octave_base_parser::make_while_command (
                                         octave_comment_list *lc)
 {
   tree_command *retval = 0;
 
   maybe_warn_assign_as_truth_value (expr);
 
   if (end_token_ok (end_tok, token::while_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       lexer.looping--;
 
       int l = while_tok->line ();
       int c = while_tok->column ();
 
       retval = new tree_while_command (expr, body, lc, tc, l, c);
     }
@@ -2447,17 +2437,17 @@ octave_base_parser::make_while_command (
 tree_command *
 octave_base_parser::make_do_until_command (token *until_tok,
                                            tree_statement_list *body,
                                            tree_expression *expr,
                                            octave_comment_list *lc)
 {
   maybe_warn_assign_as_truth_value (expr);
 
-  octave_comment_list *tc = octave_comment_buffer::get_comment ();
+  octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
   lexer.looping--;
 
   int l = until_tok->line ();
   int c = until_tok->column ();
 
   return new tree_do_until_command (expr, body, lc, tc, l, c);
 }
@@ -2474,17 +2464,17 @@ octave_base_parser::make_for_command (in
                                       octave_comment_list *lc)
 {
   tree_command *retval = 0;
 
   bool parfor = tok_id == PARFOR;
 
   if (end_token_ok (end_tok, parfor ? token::parfor_end : token::for_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       lexer.looping--;
 
       int l = for_tok->line ();
       int c = for_tok->column ();
 
       if (lhs->length () == 1)
         {
@@ -2568,17 +2558,17 @@ octave_base_parser::finish_if_command (t
                                        tree_if_command_list *list,
                                        token *end_tok,
                                        octave_comment_list *lc)
 {
   tree_if_command *retval = 0;
 
   if (end_token_ok (end_tok, token::if_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       int l = if_tok->line ();
       int c = if_tok->column ();
 
       if (list && ! list->empty ())
         {
           tree_if_clause *elt = list->front ();
 
@@ -2621,17 +2611,17 @@ octave_base_parser::finish_switch_comman
                                            tree_switch_case_list *list,
                                            token *end_tok,
                                            octave_comment_list *lc)
 {
   tree_switch_command *retval = 0;
 
   if (end_token_ok (end_tok, token::switch_end))
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       int l = switch_tok->line ();
       int c = switch_tok->column ();
 
       if (list && ! list->empty ())
         {
           tree_switch_case *elt = list->front ();
 
@@ -2805,17 +2795,17 @@ octave_base_parser::start_function (tree
   body->append (end_fcn_stmt);
 
   octave_user_function *fcn
     = new octave_user_function (lexer.symtab_context.curr_scope (),
                                 param_list, 0, body);
 
   if (fcn)
     {
-      octave_comment_list *tc = octave_comment_buffer::get_comment ();
+      octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
       fcn->stash_trailing_comment (tc);
       fcn->stash_fcn_end_location (end_fcn_stmt->line (),
                                    end_fcn_stmt->column ());
     }
 
   return fcn;
 }
@@ -3339,16 +3329,26 @@ octave_base_parser::set_stmt_print_flag 
     {
       list->pop_back ();
       delete tmp;
     }
 
   return list;
 }
 
+// Finish building a statement.
+template <class T>
+tree_statement *
+octave_base_parser::make_statement (T *arg)
+{
+  octave_comment_list *comment = lexer.get_comment ();
+
+  return new tree_statement (arg, comment);
+}
+
 tree_statement_list *
 octave_base_parser::make_statement_list (tree_statement *stmt)
 {
   return new tree_statement_list (stmt);
 }
 
 tree_statement_list *
 octave_base_parser::append_statement_list (tree_statement_list *list,
@@ -3460,25 +3460,16 @@ octave_push_parser::run (const std::stri
   while (status == YYPUSH_MORE);
 
   return status;
 }
 
 static void
 safe_fclose (FILE *f)
 {
-  // FIXME -- comments at the end of an input file are
-  // discarded (otherwise, they would be appended to the next
-  // statement, possibly from the command line or another file, which
-  // can be quite confusing).
-
-  octave_comment_list *tc = octave_comment_buffer::get_comment ();
-
-  delete tc;
-
   if (f)
     fclose (static_cast<FILE *> (f));
 }
 
 static octave_function *
 parse_fcn_file (const std::string& full_file, const std::string& file,
                 const std::string& dispatch_type,
                 bool require_file, bool force_script, bool autoload,    
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -322,16 +322,20 @@ public:
 
   // Maybe print a warning.  Duh.
   void maybe_warn_missing_semi (tree_statement_list *);
 
   // Set the print flag for a statement based on the separator type.
   tree_statement_list *
   set_stmt_print_flag (tree_statement_list *, char, bool);
 
+  // Finish building a statement.
+  template <class T>
+  tree_statement *make_statement (T *arg);
+
   // Create a statement list.
   tree_statement_list *make_statement_list (tree_statement *stmt);
 
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
