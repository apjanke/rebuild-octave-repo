# HG changeset patch
# User jwe
# Date 789099103 0
#      Tue Jan 03 02:11:43 1995 +0000
# Node ID 46a2983cb2972ae8af547d5c0efbb254f7241758
# Parent  df3c4da3adb05bc03a90b560d509c9314fdfe762
[project @ 1995-01-03 02:08:32 by jwe]

diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -60,16 +60,41 @@ verror (const char *name, const char *fm
 
   char *msg = output_buf.str ();
 
   maybe_write_to_diary_file (msg);
 
   delete [] msg;
 }
 
+static void
+error_1 (const char *name, const char *fmt, va_list args)
+{
+  if (error_state != -2)
+    {
+      if (! error_state)
+	error_state = 1;
+
+      if (! suppress_octave_error_messages)
+	{
+	  int len = 0;
+	  if (fmt && *fmt && fmt[(len = strlen (fmt)) - 1] == '\n')
+	    {
+	      error_state = -2;
+	      char *tmp_fmt = strsave (fmt);
+	      tmp_fmt[len - 1] = '\0';
+	      verror (name, tmp_fmt, args);
+	      delete [] tmp_fmt;
+	    }
+	  else
+	    verror (name, fmt, args);
+	}
+    }
+}
+
 void
 message (const char *name, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror (name, fmt, args);
   va_end (args);
 }
@@ -91,40 +116,28 @@ warning (const char *fmt, ...)
   va_start (args, fmt);
   verror ("warning", fmt, args);
   va_end (args);
 }
 
 void
 error (const char *fmt, ...)
 {
-  if (error_state == -2)
-    return;
-
-  if (! error_state)
-    error_state = 1;
-
-  if (suppress_octave_error_messages)
-    return;
-
   va_list args;
   va_start (args, fmt);
+  error_1 ("error", fmt, args);
+  va_end (args);
+}
 
-  int len = 0;
-  if (fmt && *fmt && fmt[(len = strlen (fmt)) - 1] == '\n')
-    {
-      error_state = -2;
-      char *tmp_fmt = strsave (fmt);
-      tmp_fmt[len - 1] = '\0';
-      verror ("error", tmp_fmt, args);
-      delete [] tmp_fmt;
-    }
-  else
-    verror ("error", fmt, args);
-
+void
+parse_error (const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  error_1 (0, fmt, args);
   va_end (args);
 }
 
 void
 panic (const char *fmt, ...)
 {
   flush_output_to_pager ();
 
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -34,16 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 typedef void v_fcn_cpc_x (const char *, ...);
 volatile v_fcn_cpc_x panic;
 #endif
 
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
+extern void parse_error (const char *fmt, ...);
 extern void panic (const char *fmt, ...);
 
 // Current error state.
 extern int error_state;
 
 // XXX FIXME XXX
 extern int suppress_octave_error_messages;
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -266,17 +266,19 @@ parse_and_execute (FILE *f, int print)
   saving_history = 0;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
     {
       reset_parser ();
+
       retval = yyparse ();
+
       if (retval == 0 && global_command)
 	{
 	  global_command->eval (print);
 	  delete global_command;
 	}
     }
   while (retval == 0);
 
@@ -631,16 +633,19 @@ main (int argc, char **argv)
 	{
 	  global_command->eval (1);
 	  delete global_command;
 	  current_command_number++;
 	}
     }
   while (retval == 0);
 
+  if (retval == 1 && ! error_state)
+    retval = 0;
+
   clean_up_and_exit (retval);
 }
 
 DEFUN_TEXT ("casesen", Fcasesen, Scasesen, 2, 1,
   "casesen [on|off]")
 {
   Octave_object retval;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -156,17 +156,16 @@ static tree_expression *make_multi_val_r
 // Make an index expression.
 static tree_index_expression *make_index_expression
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
-      reset_parser (); \
       yyerrok; \
       if (interactive) \
 	YYACCEPT; \
       else \
 	YYABORT; \
     } \
   while (0)
 
@@ -627,41 +626,38 @@ command		: plot_command
 		    looping--;
 		    $$ = new tree_for_command ($2, $4, $6,
 					       $1->line (), $1->column ());
 		  }
 		| BREAK
 		  {
 		    if (!looping)
 		      {
-			yyerror ("parse error");
-			error ("break: only meaningful within a `for'\
+			yyerror ("break: only meaningful within a `for'\
  or `while' loop");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_break_command ($1->line (), $1->column ());
 		  }
 		| CONTINUE
 		  {
 		    if (!looping)
 		      {
-			yyerror ("parse error");
-			error ("continue: only meaningful within a\
+			yyerror ("continue: only meaningful within a\
  `for' or `while' loop");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_continue_command ($1->line (),
 						    $1->column ());
 		  }
 		| FUNC_RET
 		  {
 		    if (!defining_func)
 		      {
-			yyerror ("parse error");
-			error ("return: only meaningful within a function");
+			yyerror ("return: only meaningful within a function");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_return_command ($1->line (), $1->column ());
 		  }
 		;
 
 if_command	: IF if_cmd_list END
 		  {
@@ -714,18 +710,17 @@ screwed_again	: // empty
 		  { maybe_screwed_again++; }
 		;
 
 expression	: variable '=' expression
 		  { $$ = new tree_simple_assignment_expression
 		      ($1, $3, 0, 0, $2->line (), $2->column ()); }
 		| NUM '=' expression
 		  {
-		    yyerror ("parse error");
-		    error ("invalid assignment to a number");
+		    yyerror ("invalid assignment to a number");
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		| '[' screwed_again matrix_row SCREW_TWO '=' expression
 		  {
 		    $$ = make_multi_val_ret ($6, $5->line (), $5->column ());
 
 		    if (! $$)
@@ -839,20 +834,17 @@ simple_expr1	: NUM
 
 colon_expr	: simple_expr ':' simple_expr
 		  { $$ = new tree_colon_expression
 		      ($1, $3, $2->line (), $2->column ()); }
 		| colon_expr ':' simple_expr
 		  {
 		    $$ = $1->chain ($3);
 		    if (! $$)
-		      {
-			yyerror ("parse error");
-			ABORT_PARSE;
-		      }
+		      ABORT_PARSE;
 		  }
 		;
 
 word_list_cmd	: identifier word_list
 		  {
 		    $$ = new tree_index_expression
 			   ($1, $2, $1->line (), $1->column ());
 		  }
@@ -936,31 +928,29 @@ return_list	: return_list_x ']'
 		    $$ = $1;
 		  }
 		;
 
 return_list1	: return_list_x identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| return_list_x error
 		  {
-		    yyerror ("parse error");
-		    error ("invalid function return list");
+		    yyerror ("invalid function return list");
 		    ABORT_PARSE;
 		  }
 		| return_list1 ',' identifier
 		  { $1->append ($3); }
 		;
 
 func_def2	: identifier safe local_symtab func_def3
 		  {
 		    char *id_name = $1->name ();
 //		    if (is_text_function_name (id_name))
 //		      {
-//			yyerror ("parse error");
-//			error ("invalid use of reserved word %s", id_name);
+//			yyerror ("invalid use of reserved word %s", id_name);
 //			ABORT_PARSE;
 //		      }
 
 // If input is coming from a file, issue a warning if the name of the
 // file does not match the name of the function stated in the file.
 // Matlab doesn't provide a diagnostic (it ignores the stated name).
 
 		    $4->stash_function_name (id_name);
@@ -1046,18 +1036,17 @@ indirect_ref1	: identifier
 variable	: indirect_ref
 		  { $$ = make_index_expression ($1, 0); }
 		| indirect_ref '(' ')'
 		  { $$ = make_index_expression ($1, 0); }
 		| indirect_ref '(' arg_list ')'
 		  { $$ = make_index_expression ($1, $3); }
 		| indirect_ref '['
 		  {
-		    yyerror ("parse error");
-		    error ("use `(\' and `)\' as index operators, not\
+		    yyerror ("use `(\' and `)\' as index operators, not\
  `[\' and `]\'"); 
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
 
 param_list	: '(' ')'
 		  {
@@ -1085,24 +1074,22 @@ param_list	: '(' ')'
 		;
 
 param_list1	: '(' identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| param_list1 ',' identifier
 		  { $1->append ($3); }
 		| '(' error
 		  {
-		    yyerror ("parse error");
-		    error ("invalid parameter list");
+		    yyerror ("invalid parameter list");
 		    ABORT_PARSE;
 		  }
 		| param_list1 ',' error
 		  {
-		    yyerror ("parse error");
-		    error ("invalid parameter list");
+		    yyerror ("invalid parameter list");
 		    ABORT_PARSE;
 		  }
 		;
 
 identifier	: NAME
 		  {
 		    $$ = new tree_identifier
 		      ($1->sym_rec (), $1->line (), $1->column ());
@@ -1190,45 +1177,56 @@ matrix_row	: expression		// First elemen
 static void
 yyerror (char *s)
 {
   char *line = current_input_line;
   int err_col = current_input_column - 1;
   if (err_col == 0 && line)
     err_col = strlen (line) + 1;
 
-// Print a message like `parse error', maybe printing the line number
-// and file name.
-
   ostrstream output_buf;
 
-  output_buf.form ("\n%s", s);
+  if (reading_fcn_file || reading_script_file)
+    output_buf << "parse error near line " << input_line_number
+	       << " of file " << curr_fcn_file_name << ".m:";
+  else
+    output_buf << "parse error:";
 
-  if (reading_fcn_file || reading_script_file)
-    output_buf.form (" near line %d of file %s.m", input_line_number,
-		     curr_fcn_file_name);
+  if (s && strcmp (s, "parse error") != 0)
+    output_buf << "\n\n  " << s;
+
+  output_buf << "\n\n";
 
   if (line)
     {
       int len = strlen (line);
       if (line[len-1] == '\n')
         {
           len--;
           line[len] = '\0';
         }
+
 // Print the line, maybe with a pointer near the error token.
-      if (err_col > len)
-        output_buf.form (":\n\n  %s\n\n", line);
-      else
-        output_buf.form (":\n\n  %s\n  %*s\n\n", line, err_col, "^");
+
+      output_buf << "  " << line << "\n";
+      if (err_col <= len)
+	{
+	  for (int i = 0; i < err_col + 1; i++)
+	    output_buf << " ";
+	  output_buf << "^";
+	}
     }
-  else
-    output_buf << "\n\n";
+
+  output_buf << "\n" << ends;
 
-  maybe_page_output (output_buf);
+  char *msg = output_buf.str ();
+
+  parse_error (msg);
+
+  delete [] msg;
 }
 
 // Error mesages for mismatched end tokens.
 
 static void
 end_error (char *type, token::end_tok_type ettype, int l, int c)
 {
   static char *fmt = "`%s' command matched by `%s' near line %d column %d";
@@ -1579,30 +1577,23 @@ make_multi_val_ret (tree_expression *rhs
       else if (list_len > 1)
 	{
 	  if (rhs->is_multi_val_ret_expression ())
 	    {
 	      tree_multi_val_ret *t = (tree_multi_val_ret *) rhs;
 	      retval = new tree_multi_assignment_expression (id_list, t, l, c);
 	    }
 	  else
-	    {
-	      yyerror ("parse error");
-	      error ("RHS must be an expression that can return\
- multiple values");
-	    }
+	    yyerror ("RHS must be an expression that returns multiple values");
 	}
       else
 	panic_impossible ();
     }
   else
-    {
-      yyerror ("parse error");
-      error ("invalid identifier list for assignment");
-    }
+    yyerror ("invalid identifier list for assignment");
 
   return retval;
 }
 
 static tree_index_expression *
 make_index_expression (tree_indirect_ref *indir, tree_argument_list *args)
 {
   tree_index_expression *retval = 0;
