# HG changeset patch
# User jwe
# Date 810343619 0
#      Tue Sep 05 23:26:59 1995 +0000
# Node ID ed5757e3333b0e37694429e2ee9e70e60461b5df
# Parent  f9745982c98785b009e28198f7bb9a87479800e5
[project @ 1995-09-05 23:26:59 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -67,17 +67,17 @@ where OPT is an optional single characte
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3 || nargout < 0 || nargout > 4)
     {
       print_usage ("balance");
       return retval;
     }
 
-  char *bal_job;
+  const char *bal_job;
   int my_nargin;		// # args w/o optional string arg
 
   // Determine if balancing option is listed.  Set my_nargin to the
   // number of matrix inputs.
 
   if (args(nargin-1).is_string ())
     {
       bal_job = args(nargin-1).string_value ();
diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -79,17 +79,17 @@ DEFUN_DLD_BUILTIN ("colloc", Fcolloc, Sc
       if (args(i).is_defined ())
 	{
 	  if (! args(i).is_string ())
 	    {
 	      error ("colloc: expecting string argument");
 	      return retval;
 	    }
 
-	  char *s = args(i).string_value ();
+	  const char *s = args(i).string_value ();
 
 	  if (s && (((*s == 'R' || *s == 'r') && strlen (s) == 1)
 		    || strcmp (s, "right") == 0))
 	    {
 	      right = 1;
 	    }
 	  else if (s && (((*s == 'L' || *s == 'l') && strlen (s) == 1)
 			 || strcmp (s, "left") == 0))
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -269,17 +269,17 @@ print_dassl_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_dassl_option (char *keyword, double val)
+set_dassl_option (const char *keyword, double val)
 {
   DAE_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -289,17 +289,17 @@ set_dassl_option (char *keyword, double 
 	}
       list++;
     }
 
   warning ("dassl_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_dassl_option (char *keyword)
+show_dassl_option (const char *keyword)
 {
   Octave_object retval;
 
   DAE_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -327,17 +327,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_dassl_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_dassl_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -750,17 +750,17 @@ return nonzero if S is a structure with 
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       retval = 0.0;
       if (args(0).is_map () && args(1).is_string ())
 	{
-	  char *s = args(1).string_value ();
+	  const char *s = args(1).string_value ();
 	  tree_constant tmp = args(0).lookup_map_element (s, 0, 1);
 	  retval = (double) tmp.is_defined ();
 	}
     }
   else
     print_usage ("struct_contains");
 
   return retval;
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -170,17 +170,17 @@ DEFUN ("error", Ferror, Serror, 1, 1,
 This should eventually take us up to the top level, possibly\n\
 printing traceback messages as we go.\n\
 \n\
 If MESSAGE ends in a newline character, traceback messages are not\n\
 printed.") 
 {
   Octave_object retval;
 
-  char *msg = "unspecified error";
+  const char *msg = "unspecified error";
 
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
     {
       if (args(0).is_string ())
 	{
 	  msg = args(0).string_value ();
@@ -199,17 +199,17 @@ printed.")
 
 DEFUN ("warning", Fwarning, Swarning, 1, 1,
   "warning (MESSAGE): print a warning MESSAGE.\n\
 \n\
 See also: error")
 {
   Octave_object retval;
 
-  char *msg = "unspecified warning";
+  const char *msg = "unspecified warning";
 
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
     {
       if (args(0).is_string ())
 	{
 	  msg = args(0).string_value ();
@@ -228,17 +228,17 @@ See also: error")
 
 DEFUN ("usage", Fusage, Susage, 1, 1,
   "usage (MESSAGE): print a usage MESSAGE.\n\
 \n\
 See also: error")
 {
   Octave_object retval;
 
-  char *msg = "unknown";
+  const char *msg = "unknown";
 
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
     {
       if (args(0).is_string ())
 	{
 	  msg = args(0).string_value ();
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -162,17 +162,17 @@ return_valid_file (const tree_constant& 
 {
   if (arg.is_string ())
     {
       Pix p = file_list.first ();
       file_info file;
       int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
 	{
-	  char *file_name = arg.string_value ();
+	  const char *file_name = arg.string_value ();
 	  file = file_list (p);
 	  if (strcmp (file.name (), file_name) == 0)
 	    return p;
 	  file_list.next (p);
 	}
     }
   else
     {
@@ -238,17 +238,17 @@ file_io_get_file (const tree_constant& a
 		  const char *warn_for)
 {
   Pix p = return_valid_file (arg);
 
   if (! p)
     {
       if (arg.is_string ())
 	{
-	  char *name = arg.string_value ();
+	  const char *name = arg.string_value ();
 
 	  struct stat buffer;
 	  int status = stat (name, &buffer);
 
 	  if (status == 0)
 	    {
 	      if ((buffer.st_mode & S_IFREG) == S_IFREG)
 		p = fopen_file_for_user (name, mode, warn_for);
@@ -527,18 +527,18 @@ fopen_internal (const Octave_object& arg
     }
 
   if (! args(1).is_string ())
     {
       error ("fopen: file mode must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
-  char *mode = args(1).string_value ();
+  const char *name = args(0).string_value ();
+  const char *mode = args(1).string_value ();
 
   if (! valid_mode (mode))
     {
       error ("fopen: invalid mode");
       return retval;
     }
 
   struct stat buffer;
@@ -980,34 +980,34 @@ process_printf_format (const char *s, co
 	    sb.form (tmp_fmt, val);
 	    delete [] tmp_fmt;
 	    return chars_from_fmt_str;
 	  }
       }
 
     case 's':
       {
-	char *val = args(fmt_arg_count++).string_value ();
+	const char *val = args(fmt_arg_count++).string_value ();
 
 	if (error_state)
 	  goto invalid_conversion;
 	else
 	  {
 	    chars_from_fmt_str++;
 	    fmt << *s << ends;
 	    char *tmp_fmt = fmt.str ();
 	    sb.form (tmp_fmt, val);
 	    delete [] tmp_fmt;
 	    return chars_from_fmt_str;
 	  }
       }
 
     case 'c':
       {
-	char *val = args(fmt_arg_count++).string_value ();
+	const char *val = args(fmt_arg_count++).string_value ();
 
 	if (error_state || strlen (val) != 1)
 	  goto invalid_conversion;
 	else
 	  {
 	    chars_from_fmt_str++;
 	    fmt << *s << ends;
 	    char *tmp_fmt = fmt.str ();
@@ -1032,17 +1032,17 @@ process_printf_format (const char *s, co
 
 // Formatted printing to a file.
 
 static Octave_object
 do_printf (const char *type, const Octave_object& args, int nargout)
 {
   Octave_object retval;
   fmt_arg_count = 0;
-  char *fmt;
+  const char *fmt;
   file_info file;
 
   if (strcmp (type, "fprintf") == 0)
     {
       Pix p = file_io_get_file (args(0), "a+", type);
 
       if (! p)
 	return retval;
@@ -1077,17 +1077,17 @@ do_printf (const char *type, const Octav
 
       fmt_arg_count++;
     }
 
   // Scan fmt for % escapes and print out the arguments.
 
   ostrstream output_buf;
 
-  char *ptr = fmt;
+  const char *ptr = fmt;
 
   for (;;)
     {
       char c;
       while ((c = *ptr++) != '\0' && c != '%')
 	output_buf << c;
 
       if (c == '\0')
@@ -1352,17 +1352,17 @@ process_scanf_format (const char *s, ost
 }
 
 // Formatted reading from a file.
 
 static Octave_object
 do_scanf (const char *type, const Octave_object& args, int nargout)
 {
   Octave_object retval;
-  char *scanf_fmt = 0;
+  const char *scanf_fmt = 0;
   char *tmp_file = 0;
   int tmp_file_open = 0;
   FILE *fptr = 0;
   file_info file;
 
   fmt_arg_count = 0;
 
   if (strcmp (type, "scanf") != 0)
@@ -1394,17 +1394,17 @@ do_scanf (const char *type, const Octave
 	}
 
       fptr = file.fptr ();
     }
 
   if ((! fptr && args(0).is_string ())
       || (doing_fscanf && file.number () == 0))
     {
-      char *string;
+      const char *string;
 
       if (strcmp (type, "scanf") == 0)
 	scanf_fmt = args(0).string_value ();
 
       if (strcmp (type, "scanf") == 0
 	  || (doing_fscanf && file.number () == 0))
 	{
 	  // XXX FIXME XXX -- this should probably be possible for
@@ -1455,17 +1455,17 @@ do_scanf (const char *type, const Octave
       error ("%s: first argument must be a string", type);
       return retval;
     }
 
   // Scan scanf_fmt for % escapes and assign the arguments.
 
   retval.resize (nargout);
 
-  char *ptr = scanf_fmt;
+  const char *ptr = scanf_fmt;
 
   for (;;)
     {
       ostrstream fmt;
       char c;
       while ((c = *ptr++) != '\0' && c != '%')
 	fmt << c;
 
@@ -1548,17 +1548,17 @@ DEFUN ("sscanf", Fsscanf, Ssscanf, 2, -1
     retval = do_scanf ("sscanf", args, nargout);
 
   return retval;
 }
 
 // Find out how many elements are left to read.
 
 static long
-num_items_remaining (FILE *fptr, char *type)
+num_items_remaining (FILE *fptr, const char *type)
 {
   size_t size;
 
   if (strcasecmp (type, "uchar") == 0)
     size = sizeof (u_char);
   else if (strcasecmp (type, "char") == 0)
     size = sizeof (char);
   else if (strcasecmp (type, "short") == 0)
@@ -1623,17 +1623,17 @@ fread_internal (const Octave_object& arg
 
   Pix p = file_io_get_file (args(0), "r", "fread");
 
   if (! p)
     return retval;
 
   // Get type and number of bytes per element to read.
 
-  char *prec = "uchar";
+  const char *prec = "uchar";
   if (nargin > 2)
     {
       prec = args(2).string_value ();
 
       if (error_state)
 	{
 	  error ("fread: precision must be a specified as a string");
 	  return retval;
@@ -1810,17 +1810,17 @@ fwrite_internal (const Octave_object& ar
 
   Pix p = file_io_get_file (args(0), "a+", "fwrite");
 
   if (! p)
     return retval;
 
   // Get type and number of bytes per element to read.
 
-  char *prec = "uchar";
+  const char *prec = "uchar";
   if (nargin > 2)
     {
       prec = args(2).string_value ();
 
       if (error_state)
 	{
 	  error ("fwrite: precision must be a specified as a string");
 	  return retval;
@@ -1963,36 +1963,35 @@ popen_internal (const Octave_object& arg
   Octave_object retval;
 
   if (! args(0).is_string ())
     {
       error ("popen: file name must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
-
-  Pix p = return_valid_file (name);
+  Pix p = return_valid_file (args(0));
 
   if (p)
     {
       file_info file = file_list (p);
 
       retval(0) = (double) file.number ();
 
       return retval;
     }
 
   if (! args(1).is_string ())
     {
       error ("popen: file mode must be a string");
       return retval;
     }
 
-  char *mode = args(1).string_value ();
+  const char *name = args(0).string_value ();
+  const char *mode = args(1).string_value ();
 
   if (mode[1] || (mode[0] != 'w' && mode[0] != 'r'))
     {
       error ("popen: invalid mode, must be either \"r\" or \"w\".");
       return retval;
     }
 
   struct stat buffer;
@@ -2103,17 +2102,17 @@ execute_internal (const Octave_object& a
   int new_stdout;
 
   if (! args(0).is_string ())
     {
       error ("execute: file name must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   if (pipe (stdin_pipe) || pipe (stdout_pipe)) 
     {
       error ("execute: pipe creation failed");
       return retval;
     }
 
   pid = fork ();
@@ -2195,17 +2194,17 @@ sync_system_internal (const Octave_objec
   Octave_object retval (1, tree_constant (-1.0));
 
   if (! args(0).is_string ())
     {
       error ("sync_system: file name must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   retval (0) = (double) system (name);
   return retval;
 }
 
 DEFUN ("sync_system", Fsync_system, Ssync_system, 1, 1,
   "RETCODE = sync_system (FILENAME)\n\
 \n\
@@ -2230,17 +2229,17 @@ async_system_internal (const Octave_obje
   pid_t pid;
 
   if (! args(0).is_string ())
     {
       error ("async_system: file name must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   pid = fork ();
 
   if (pid < 0) 
     {
       error ("async_system: fork failed -- can't create child process");
       return retval;
     }
@@ -2363,17 +2362,17 @@ mkfifo_internal (const Octave_object& ar
   Octave_object retval (1, tree_constant (-1.0));
 
   if (! args(0).is_string ())
     {
       error ("mkfifo: file name must be a string");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   if (! args(1).is_scalar_type ())
     {
       error ("mkfifo:  MODE must be an integer");
       return retval;
     }
 
   long mode = (long) args(1).double_value ();
@@ -2412,17 +2411,17 @@ unlink_internal (const Octave_object& ar
 
   if (! args(0).is_string ())
     {
       error ("unlink: file name must be a string");
       retval (0) = -1.0;
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   retval (0) = (double) unlink (name);
 
   return retval;
 }
 
 DEFUN ("unlink", Funlink, Sunlink, 1, 1,
   "STATUS = unlink (NAME)\n\
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -235,17 +235,17 @@ print_fsolve_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_fsolve_option (char *keyword, double val)
+set_fsolve_option (const char *keyword, double val)
 {
   NLEQN_OPTIONS *list = fsolve_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -255,17 +255,17 @@ set_fsolve_option (char *keyword, double
 	}
       list++;
     }
 
   warning ("fsolve_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_fsolve_option (char *keyword)
+show_fsolve_option (const char *keyword)
 {
   Octave_object retval;
 
   NLEQN_OPTIONS *list = fsolve_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -293,17 +293,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_fsolve_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_fsolve_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -68,17 +68,17 @@ extern char *xmalloc ();
 // (Apparently, there isn't one there now...)
 
 #if 0
 #define LINE_SIZE 8192
 static int no_line_editing = 0;
 #endif
 
 char *
-gnu_readline (char *s)
+gnu_readline (const char *s)
 {
 #if 0
   static int state = 0;
   static char *line_from_stdin = 0;
   if (no_line_editing)
     {
       if (! state)
 	{
@@ -972,17 +972,17 @@ get_user_input (const Octave_object& arg
 
   int nargin = args.length ();
 
   int read_as_string = 0;
 
   if (nargin == 2)
     read_as_string++;
 
-  char *prompt = "debug> ";
+  const char *prompt = "debug> ";
   if (nargin > 0)
    {
      prompt = args(0).string_value ();
 
      if (error_state)
        {
 	 error ("input: unrecognized argument");
 	 return retval;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2423,17 +2423,17 @@ save_binary_data (ostream& os, const tre
   else if (tc.is_string ())
     {
       tmp = 5;
       os.write (&tmp, 1);
       int nr = tc.rows ();
       int nc = tc.columns ();
       FOUR_BYTE_INT len = nr * nc;
       os.write (&len, 4);
-      char *s = tc.string_value ();
+      const char *s = tc.string_value ();
       os.write (s, len);
     }
   else if (tc.is_range ())
     {
       tmp = 6;
       os.write (&tmp, 1);
       tmp = (char) LS_DOUBLE;
       os.write (&tmp, 1);
@@ -2721,17 +2721,17 @@ save_ascii_data (ostream& os, const tree
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
 
       os << tmp;
     }
   else if (tc.is_string ())
     {
       ascii_save_type (os, "string", mark_as_global);
-      char *tmp = tc.string_value ();
+      const char *tmp = tc.string_value ();
       os << "# length: " << strlen (tmp) << "\n"
 	 << tmp << "\n";
     }
   else if (tc.is_range ())
     {
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
       os << "# base, limit, increment\n"
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -250,17 +250,17 @@ print_lsode_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_lsode_option (char *keyword, double val)
+set_lsode_option (const char *keyword, double val)
 {
   ODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -270,17 +270,17 @@ set_lsode_option (char *keyword, double 
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_lsode_option (char *keyword)
+show_lsode_option (const char *keyword)
 {
   Octave_object retval;
 
   ODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -308,17 +308,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_lsode_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_lsode_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -714,17 +714,17 @@ print_npsol_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_npsol_option (char *keyword, double val)
+set_npsol_option (const char *keyword, double val)
 {
   NPSOL_OPTIONS *list = npsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -744,17 +744,17 @@ set_npsol_option (char *keyword, double 
 	}
       list++;
     }
 
   warning ("npsol_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_npsol_option (char *keyword)
+show_npsol_option (const char *keyword)
 {
   Octave_object retval;
 
   NPSOL_OPTIONS *list = npsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -800,17 +800,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_npsol_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_npsol_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -137,17 +137,17 @@ initialize_history (void)
 void
 clean_up_history (void)
 {
   stifle_history (octave_hist_size);
   write_history (octave_hist_file);
 }
 
 void
-maybe_save_history (char *s)
+maybe_save_history (const char *s)
 {
   if (saving_history)
     {
       add_history (s);
       history_lines_this_session++;
     }
 }
 
diff --git a/src/oct-hist.h b/src/oct-hist.h
--- a/src/oct-hist.h
+++ b/src/oct-hist.h
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_octave_hist_h)
 #define octave_octave_hist_h 1
 
 extern void initialize_history (void);
 extern void clean_up_history (void);
-extern void maybe_save_history (char*);
+extern void maybe_save_history (const char*);
 extern void do_history (int, char**);
 extern void do_edit_history (int, char**);
 extern void do_run_history (int, char**);
 extern int current_history_number (void);
 
 // Nonzero means input is coming from temporary history file.
 extern int input_from_tmp_history_file;
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -897,17 +897,17 @@ eval_string (const char *string, int pri
   retval = tmp(0);
 
   return retval;
 }
 
 static Octave_object
 eval_string (const tree_constant& arg, int& parse_status, int nargout)
 {
-  char *string = arg.string_value ();
+  const char *string = arg.string_value ();
 
   if (error_state)
     {
       error ("eval: expecting string argument");
       return -1.0;
     }
 
   // Yes Virginia, we always print here...
@@ -966,17 +966,17 @@ DEFUN ("system", Fsystem, Ssystem, 2, 1,
   if (nargin < 1 || nargin > 2)
     {
       print_usage ("system");
       return retval;
     }
 
   tree_constant tc_command = args(0);
 
-  char *tmp_str = tc_command.string_value ();
+  const char *tmp_str = tc_command.string_value ();
 
   if (error_state)
     {
       error ("system: expecting string as first argument");
     }
   else
     {
       iprocstream cmd (tmp_str);
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -323,17 +323,17 @@ print_qpsol_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_qpsol_option (char *keyword, double val)
+set_qpsol_option (const char *keyword, double val)
 {
   QPSOL_OPTIONS *list = qpsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -353,17 +353,17 @@ set_qpsol_option (char *keyword, double 
 	}
       list++;
     }
 
   warning ("qpsol_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_qpsol_option (char *keyword)
+show_qpsol_option (const char *keyword)
 {
   Octave_object retval;
 
   QPSOL_OPTIONS *list = qpsol_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -409,17 +409,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_qpsol_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_qpsol_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -307,17 +307,17 @@ print_quad_option_list (void)
       list++;
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
-set_quad_option (char *keyword, double val)
+set_quad_option (const char *keyword, double val)
 {
   QUAD_OPTIONS *list = quad_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
@@ -327,17 +327,17 @@ set_quad_option (char *keyword, double v
 	}
       list++;
     }
 
   warning ("quad_options: no match for `%s'", keyword);
 }
 
 static Octave_object
-show_quad_option (char *keyword)
+show_quad_option (const char *keyword)
 {
   Octave_object retval;
 
   QUAD_OPTIONS *list = quad_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
@@ -365,17 +365,17 @@ to the shortest match.")
 
   if (nargin == 0)
     {
       print_quad_option_list ();
       return retval;
     }
   else if (nargin == 1 || nargin == 2)
     {
-      char *keyword = args(0).string_value ();
+      const char *keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    return show_quad_option (keyword);
 	  else
 	    {
 	      double val = args(1).double_value ();
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -167,17 +167,18 @@ rand (SEED, N)        -- set seed")
       goto gen_matrix;
     }
   else if (nargin == 1)
     {
       tree_constant tmp = args(0);
 
       if (tmp.is_string ())
 	{
-	  char *s_arg = tmp.string_value ();
+	  const char *s_arg = tmp.string_value ();
+
 	  if (strcmp (s_arg, "dist") == 0)
 	    {
 	      char *s = curr_rand_dist ();
 	      retval(0) = s;
 	    }
 	  else if (strcmp (s_arg, "seed") == 0)
 	    {
 	      double d = curr_rand_seed ();
diff --git a/src/schur.cc b/src/schur.cc
--- a/src/schur.cc
+++ b/src/schur.cc
@@ -56,17 +56,17 @@ characters:\n\
   if (nargin < 1 || nargin > 2 || nargout > 2)
     {
       print_usage ("schur");
       return retval;
     }
 
   tree_constant arg = args(0);
 
-  char *ord = "U";
+  const char *ord = "U";
   if (nargin == 2)
     {
       ord = args(1).string_value ();
 
       if (error_state)
 	{
 	  error ("schur: expecting string as second argument");
 	  return retval;
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -520,17 +520,17 @@ DEFUN ("getenv", Fgetenv, Sgetenv, 1, 1,
   "getenv (STRING): get environment variable values")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      char *name = args(0).string_value ();
+      const char *name = args(0).string_value ();
 
       if (! error_state)
 	{
 	  char *value = getenv (name);
 	  if (value)
 	    retval = value;
 	  else
 	    retval = "";
diff --git a/src/timefns.cc b/src/timefns.cc
--- a/src/timefns.cc
+++ b/src/timefns.cc
@@ -267,17 +267,17 @@ DEFUN ("strftime", Fstrftime, Sstrftime,
     %x	locale's date representation (mm/dd/yy)\n\
     %y	last two digits of year (00..99)\n\
     %Y	year (1970...)")
 {
   Octave_object retval;
 
   if (args.length () == 2 && args(0).is_string () && args(1).is_map ()) 
     {
-      char *fmt = args(0).string_value ();
+      const char *fmt = args(0).string_value ();
       Octave_map map = args(1).map_value ();
 
       double fraction;
 
       struct tm *tm = extract_tm (map, fraction);
 
       if (! error_state)
 	{
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -776,17 +776,17 @@ undo_string_escape (char c)
 
     default:
       retval[0] = c;
       return retval;
     }
 }
 
 char *
-undo_string_escapes (char *s)
+undo_string_escapes (const char *s)
 {
   ostrstream buf;
 
   char *t;
   while ((t = undo_string_escape (*s++)))
     buf << t;
   buf << ends;
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -124,17 +124,17 @@ is_globally_visible (const char *name)
 
 // Is this tree_constant a valid function?
 
 tree_fvc *
 is_valid_function (const tree_constant& arg, char *warn_for, int warn)
 {
   tree_fvc *ans = 0;
 
-  char *fcn_name = arg.string_value ();
+  const char *fcn_name = arg.string_value ();
 
   if (error_state)
     {
       if (warn)
 	error ("%s: expecting function name as argument", warn_for);
       return ans;
     }
 
@@ -183,17 +183,17 @@ otherwise, return 0.")
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("is_global");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  const char *name = args(0).string_value ();
 
   if (error_state)
     {
       error ("is_global: expecting string argument");
       return retval;
     }
 
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
@@ -842,17 +842,17 @@ builtin_string_variable (const char *nam
   tree_fvc *defn = sr->def ();
 
   if (defn)
     {
       tree_constant val = defn->eval (0);
 
       if (! error_state && val.is_string ())
 	{
-	  char *s = val.string_value ();
+	  const char *s = val.string_value ();
 
 	  if (s)
 	    retval = strsave (s);
 	}
     }
 
   return retval;
 }
