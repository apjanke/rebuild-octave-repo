# HG changeset patch
# User Felipe G. Nievinski <fgnievinski@gmail.com>
# Date 1388943471 7200
#      Sun Jan 05 15:37:51 2014 -0200
# Branch stable
# Node ID 64f178d8e1e0aebf31a28033c2ad7ce9f311bf85
# Parent  6fd22474783ee66535202ad97e4894a894c3b73f
doc: Minor updates to help for Octave keywords (bug #41108)

* help.cc: Minor updates to help for Octave keywords.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -447,26 +447,28 @@ const static pair_type keywords[] =
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} break\n\
 Exit the innermost enclosing do, while or for loop.\n\
 @seealso{do, while, for, parfor, continue}\n\
 @end deftypefn"),
 
   pair_type ("case",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} case @{@var{value}@}\n\
-A case statement in an switch.  Octave cases are exclusive and do not\n\
+@deftypefn  {Keyword} {} case @var{value}\n\
+@deftypefnx {Keyword} {} case @{@var{value}, @dots{}@}\n\
+A case statement in a switch.  Octave cases are exclusive and do not\n\
 fall-through as do C-language cases.  A switch statement must have at least\n\
 one case.  See @code{switch} for an example.\n\
 @seealso{switch}\n\
 @end deftypefn"),
 
   pair_type ("catch",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} catch\n\
+@deftypefn  {Keyword} {} catch\n\
+@deftypefnx {Keyword} {} catch @var{value}\n\
 Begin the cleanup part of a try-catch block.\n\
 @seealso{try}\n\
 @end deftypefn"),
 
   pair_type ("continue",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} continue\n\
 Jump to the end of the innermost enclosing do, while or for loop.\n\
@@ -502,19 +504,20 @@ Alternate action for an if block.  See @
 @deftypefn {Keyword} {} elseif (@var{condition})\n\
 Alternate conditional test for an if block.  See @code{if} for an example.\n\
 @seealso{if}\n\
 @end deftypefn"),
 
   pair_type ("end",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} end\n\
-Mark the end of any @code{for}, @code{if}, @code{do}, @code{while}, or\n\
-@code{function} block.\n\
-@seealso{for, parfor, if, do, while, function}\n\
+Mark the end of any @code{for}, @code{parfor}, @code{if}, @code{do},\n\
+@code{while}, @code{function}, @code{switch}, @code{try}, or\n\
+@code{unwind_protect} block.\n\
+@seealso{for, parfor, if, do, while, function, switch, try, unwind_protect}\n\
 @end deftypefn"),
 
   pair_type ("end_try_catch",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} end_try_catch\n\
 Mark the end of an @code{try-catch} block.\n\
 @seealso{try, catch}\n\
 @end deftypefn"),
@@ -590,17 +593,17 @@ endfor\n\
 @deftypefnx {Keyword} {} function @var{outputs} = function\n\
 Begin a function body with @var{outputs} as results and @var{inputs} as\n\
 parameters.\n\
 @seealso{return}\n\
 @end deftypefn"),
 
   pair_type ("global",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} global\n\
+@deftypefn {Keyword} {} global @var{var}\n\
 Declare variables to have global scope.\n\
 \n\
 @example\n\
 @group\n\
 global @var{x};\n\
 if (isempty (@var{x}))\n\
   x = 1;\n\
 endif\n\
@@ -671,17 +674,17 @@ scope to a particular function and are n
 @deftypefn {Keyword} {} return\n\
 Return from a function.\n\
 @seealso{function}\n\
 @end deftypefn"),
 
   pair_type ("static",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} static\n\
-This function has been deprecated in favor of persistent.\n\
+This statement has been deprecated in favor of @code{persistent}.\n\
 @seealso{persistent}\n\
 @end deftypefn"),
 
   pair_type ("switch",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} switch @var{statement}\n\
 Begin a switch block.\n\
 \n\
@@ -711,17 +714,17 @@ If an error occurs within a try block, t
 execution will proceed after the catch block (though it is often\n\
 recommended to use the lasterr function to re-throw the error after cleanup\n\
 is completed).\n\
 @seealso{catch, unwind_protect}\n\
 @end deftypefn"),
 
   pair_type ("until",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} until\n\
+@deftypefn {Keyword} {} until (@var{cond})\n\
 End a do-until loop.  See @code{do} for an example.\n\
 @seealso{do}\n\
 @end deftypefn"),
 
   pair_type ("unwind_protect",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} unwind_protect\n\
 Begin an unwind_protect block.\n\
