# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1276093773 25200
#      Wed Jun 09 07:29:33 2010 -0700
# Node ID b32a0214a464c45856aba854d2d268ce196f3f16
# Parent  e0ba186b242b56b03387c096de4a1ce5dd1624ac
Use > 1 test to find first non-singleton dimension rather than != 1.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,25 +1,31 @@
-2010-06-03  Rik <octave@nomad.inbox5.com>
+2010-06-09  Rik <octave@nomad.inbox5.com>
+
+        * general/flipdim.m, general/accumdim.m: Use > 1 test to find
+        first non-singleton dimension rather than != 1.
+
+2010-06-08  Rik <octave@nomad.inbox5.com>
 
         * general/cumtrapz.m, general/postpad.m, general/prepad.m, 
         general/shift.m, general/trapz.m, signal/unwrap.m: Use common 
         method to find first non-singleton dimension.
-2010-06-03  Rik <octave@nomad.inbox5.com>
+
+2010-06-08  Rik <octave@nomad.inbox5.com>
 
         * general/rotdim.m: Modify function to use same variable names
         as documentation.
 
-2010-06-03  Rik <octave@nomad.inbox5.com>
+2010-06-08  Rik <octave@nomad.inbox5.com>
 
         * general/cart2pol.m, general/cart2sph.m, general/pol2cart.m, 
         general/sph2cart.m: Add option to operate on column matrix of 
         coordinates.
 
-2010-06-03  Rik <octave@nomad.inbox5.com>
+2010-06-08  Rik <octave@nomad.inbox5.com>
 
         * general/arrayfun.m, general/cart2pol.m, general/cart2sph.m, 
         general/idivide.m, general/logspace.m, general/sph2cart.m, 
         general/structfun.m, image/imagesc.m, io/csvread.m, io/csvwrite.m, 
         linear-algebra/cond.m, linear-algebra/condest.m, 
         linear-algebra/isdefinite.m, linear-algebra/null.m, 
         linear-algebra/orth.m, miscellaneous/list_primes.m, 
         optimization/fminunc.m, optimization/fzero.m, path/matlabroot.m,
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} accumdim (@var{subs}, @var{vals}, @var{dim}, @var{sz}, @var{func}, @var{fillval})
+## @deftypefn {Function File} {} accumdim (@var{subs}, @var{vals}, @var{dim}, @var{n}, @var{func}, @var{fillval})
 ## Create an array by accumulating the slices of an array into the
 ## positions defined by their subscripts along a specified dimension. 
 ## The subscripts are defined by the index vector @var{subs}.
 ## The dimension is specified by @var{dim}. If not given, it defaults
 ## to the first non-singleton dimension.
 ##
 ## The extent of the result matrix in the working dimension will be determined 
 ## by the subscripts themselves.
@@ -58,34 +58,34 @@ function A = accumdim (subs, val, dim, n
     print_usage ();
   endif
 
   if (isempty (fillval))
     fillval = 0;
   endif
 
   if (! isvector (subs))
-    error ("accumdim: subs must be a subscript vector");
+    error ("accumdim: SUBS must be a subscript vector");
   elseif (! isindex (subs)) # creates index cache
     error ("accumdim: indices must be positive integers");
   else
     m = max (subs);
     if (n == 0)
       n = m;
     elseif (n < m)
-      error ("accumdim: index out of range")
+      error ("accumdim: N index out of range")
     endif
   endif
 
   sz = size (val);
 
   if (nargin < 3)
-    [~, dim] = max (sz != 1); # first non-singleton dim
+    [~, dim] = max (sz > 1); # first non-singleton dim
   elseif (! isindex (dim))
-    error ("accumdim: dim must be a valid dimension");
+    error ("accumdim: DIM must be a valid dimension");
   elseif (dim > length (sz))
     sz(end+1:dim) = 1;
   endif
   sz(dim) = n;
  
   if (isempty (func) || func == @sum)
     ## Fast summation case.
     A = __accumdim_sum__ (subs, val, dim, n);
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -13,19 +13,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} flipdim (@var{x}, @var{dim})
+## @deftypefn  {Function File} {} flipdim (@var{x})
+## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
-## For example
+## @var{dim} defaults to the first non-singleton dimension.
+## For example,
 ##
 ## @example
 ## @group
 ## flipdim ([1, 2; 3, 4], 2)
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
@@ -38,23 +40,23 @@ function y = flipdim (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   nd = ndims (x);
   if (nargin == 1)
     ## Find the first non-singleton dimension.
-    dim = find (size (x) != 1, 1);
+    dim = find (size (x) > 1, 1);
     if (isempty (dim))
       dim = 1;
     endif
   else
     if (! (isscalar (dim) && isindex (dim, nd)))
-      error ("flipdim: dim must be an integer and valid dimension");
+      error ("flipdim: DIM must be an integer and a valid dimension");
     endif
   endif
 
   idx(1:nd) = {':'};
   idx{dim} = size (x, dim):-1:1;
   y = x(idx{:});
 
 endfunction
