# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1478679377 -3600
#      Wed Nov 09 09:16:17 2016 +0100
# Node ID 2df51376f58712838a0b34ba41cac6555c2c3329
# Parent  661cf739818c4c16ca7c3003cf968406b167e6f1
Correctly handle visibility of custom menu items (bug #49529)

* Figure.h (Figure::m_previousHeight: new int attribute to keep track of the
   menubar height
* Figure.h (Figure::updateMenuBar): change signature to accept a prescribed
   initial size for the menubar (default to -1)
* Figure.h (Figure::showMenuBar): ditto

* Figure.cc: revert cset 0cd8a1c22f23 (except removed comments)
* Figure.cc (Figure::showMenuBar): resize and change visibility if the menubar
   current and requested states don't match
* Figure.cc (Figure::hasUiMenuChildren): return true only if any custom menu is
   visible
* Figure.cc (Figure::eventNotifyBefore): store the menubar height before
   QEvent::ActionChanged events
* Figure.cc (Figure::eventNotifyAfter): after  QEvent::ActionChanged events,
   call updateMenuBar with a prescribed initial height when the menubar size
   has changed

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -88,17 +88,18 @@ namespace QtHandles
     gh_manager::auto_lock lock;
 
     Matrix kids = fp.get_all_children ();
 
     for (int i = 0; i < kids.numel (); i++)
       {
         graphics_object go (gh_manager::get_object (kids(i)));
 
-        if (go && go.isa ("uimenu"))
+        if (go && go.isa ("uimenu") && 
+            go.get ("visible").string_value () == "on")
           return true;
       }
 
     return false;
   }
 
   static QRect
   boundingBoxToRect (const Matrix& bb)
@@ -422,18 +423,18 @@ namespace QtHandles
       {
       case figure::properties::ID_POSITION:
         {
           m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
           int toffset = 0;
           int boffset = 0;
 
           foreach (QToolBar* tb, win->findChildren<QToolBar*> ())
-          if (! tb->isHidden ())
-            toffset += tb->sizeHint ().height ();
+            if (! tb->isHidden ())
+              toffset += tb->sizeHint ().height ();
 
           if (! m_menuBar->isHidden ())
             toffset += m_menuBar->sizeHint ().height ();
 
           if (! m_statusBar->isHidden ())
             boffset += m_statusBar->sizeHint ().height ();
 
           win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
@@ -527,53 +528,59 @@ namespace QtHandles
         m_statusBar->setVisible (visible);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
   void
-  Figure::showMenuBar (bool visible)
+  Figure::showMenuBar (bool visible, int h1)
   {
-    int h1 = m_menuBar->sizeHint ().height ();
+    // Get the height before and after toggling the visibility of builtin menus 
+    if (h1 <= 0)
+      h1 = m_menuBar->sizeHint ().height ();
 
     foreach (QAction* a, m_menuBar->actions ())
-    if (a->objectName () == "builtinMenu")
-      a->setVisible (visible);
+      if (a->objectName () == "builtinMenu")
+        a->setVisible (visible);
 
     int h2 = m_menuBar->sizeHint ().height ();
 
+    // Keep the menubar visible if it contains custom menus
     if (! visible)
       visible = hasUiMenuChildren (properties<figure> ());
-
-    int dy = qMax (h1, h2);
-    QRect r = qWidget<QWidget> ()->geometry ();
+    
+    if (m_menuBar->isVisible () ^ visible)
+      {
+        int dy = qMax (h1, h2);
+        QRect r = qWidget<QWidget> ()->geometry ();
+        
+        if (! visible)
+          r.adjust (0, dy, 0, 0);
+        else
+          r.adjust (0, -dy, 0, 0);
 
-    if (! visible)
-      r.adjust (0, dy, 0, 0);
-    else
-      r.adjust (0, -dy, 0, 0);
-
-    m_blockUpdates = true;
-    qWidget<QWidget> ()->setGeometry (r);
-    m_menuBar->setVisible (visible);
-    m_blockUpdates = false;
-
+        m_blockUpdates = true;
+        qWidget<QWidget> ()->setGeometry (r);
+        m_menuBar->setVisible (visible);
+        m_blockUpdates = false;
+      }
     updateBoundingBox (false);
   }
 
   void
-  Figure::updateMenuBar (void)
+  Figure::updateMenuBar (int height)
   {
     gh_manager::auto_lock lock;
     graphics_object go = object ();
 
     if (go.valid_object ())
-      showMenuBar (Utils::properties<figure> (go).menubar_is ("figure"));
+      showMenuBar (Utils::properties<figure> (go).menubar_is ("figure"), 
+                   height);
   }
 
   void
   Figure::updateStatusBar (ColumnVector pt)
   {
     if (! m_statusBar->isHidden ())
       m_statusBar->showMessage (QString ("(%1, %2)")
                                 .arg (pt(0), 0, 'g', 5)
@@ -679,16 +686,19 @@ namespace QtHandles
         if (obj == m_container)
           {
             // Do nothing...
           }
         else if (obj == m_menuBar)
           {
             switch (xevent->type ())
               {
+              case QEvent::ActionChanged:
+                m_previousHeight = m_menuBar->sizeHint ().height ();
+                break;
               case QEvent::ActionRemoved:
                 {
                   QAction* a = dynamic_cast<QActionEvent*> (xevent)->action ();
 
                   if (! a->isSeparator ()
                       && a->objectName () != "builtinMenu")
                     updateMenuBar ();
                 }
@@ -750,22 +760,33 @@ namespace QtHandles
               default:
                 break;
               }
           }
         else if (watched == m_menuBar)
           {
             switch (xevent->type ())
               {
+              case QEvent::ActionChanged:
+                // The mennubar may have been resized if no action is visible
+                {
+                  QAction* a = dynamic_cast<QActionEvent*> (xevent)->action ();
+                  if (m_menuBar->sizeHint ().height () != m_previousHeight
+                      && a->objectName () != "builtinMenu"
+                      && ! a->isSeparator ())
+                    updateMenuBar (m_previousHeight);
+                }
+                break;
               case QEvent::ActionAdded:
                 {
                   QAction* a = dynamic_cast<QActionEvent*> (xevent)->action ();
 
                   if (! a->isSeparator ()
-                      && a->objectName () != "builtinMenu")
+                      && a->objectName () != "builtinMenu"
+                      && a->isVisible ())
                     updateMenuBar ();
                 }
                 break;
 
               default:
                 break;
               }
           }
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -97,17 +97,17 @@ namespace QtHandles
     void print (const QString& file_cmd, const QString& term);
     void update (int pId);
     void updateBoundingBox (bool internal = false, int flags = 0);
     void beingDeleted (void);
 
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
-    void showMenuBar (bool visible);
+    void showMenuBar (bool visible, int height = -1);
     void addCustomToolBar (QToolBar* bar, bool visible);
     void showCustomToolBar (QToolBar* bar, bool visible);
 
     void updateFigureToolBarAndMenuBar (void);
 
     static void updateBoundingBoxHelper (void*);
 
     void save_figure_callback (const std::string& file);
@@ -117,17 +117,17 @@ namespace QtHandles
 
   private slots:
     void setMouseMode (MouseMode mode);
     void fileSaveFigure (bool prompt = false);
     void fileSaveFigureAs (void);
     void fileCloseFigure (void);
     void editCopy (bool choose_format = false);
     void helpAboutOctave (void);
-    void updateMenuBar (void);
+    void updateMenuBar (int height = -1);
     void updateContainer (void);
     void toggleAxes (void);
     void toggleGrid (void);
     void autoAxes (void);
 
   signals:
     void asyncUpdate (void);
 
@@ -135,14 +135,15 @@ namespace QtHandles
     Container* m_container;
     bool m_blockUpdates;
     QToolBar* m_figureToolBar;
     MenuBar* m_menuBar;
     QStatusBar* m_statusBar;
     QRect m_innerRect;
     QRect m_outerRect;
     MouseModeActionGroup* m_mouseModeGroup;
+    int m_previousHeight;
   };
 
 }
 
 #endif
 
