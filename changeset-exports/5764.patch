# HG changeset patch
# User jwe
# Date 1145214601 0
#      Sun Apr 16 19:10:01 2006 +0000
# Node ID 80409c2defcc16d68460956508a53bb1adf64220
# Parent  2d055c8fa019c214581f4857d07588e71e53bd8e
[project @ 2006-04-16 19:10:00 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2006-04-16  John W. Eaton  <jwe@octave.org>
+
+	* kpse.cc (kpse_hash): Rename from hash.
+	(hash_lookup): Call kpse_hash instead of hash.
+
+	* SparseType.cc (SparseType::SparseType): Use std::vector<bool>
+	to avoid local array with variable dimension.
+
 2006-04-13  David Bateman  <dbateman@free.fr>
 
         * Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)):
 	Optimize assignment.
 
 2006-04-13  John W. Eaton  <jwe@octave.org>
 
         * Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)):
diff --git a/liboctave/SparseType.cc b/liboctave/SparseType.cc
--- a/liboctave/SparseType.cc
+++ b/liboctave/SparseType.cc
@@ -84,17 +84,17 @@ SparseType::SparseType (const SparseMatr
 	    {
 	      tmp_typ = SparseType::Permuted_Diagonal;
 	      break;
 	    }
 	}
 	  
       if (tmp_typ == SparseType::Permuted_Diagonal)
 	{
-	  bool found [nrows];
+	  std::vector<bool> found (nrows);
 
 	  for (octave_idx_type j = 0; j < i; j++)
 	    found [j] = true;
 	  for (octave_idx_type j = i; j < nrows; j++)
 	    found [j] = false;
 	      
 	  for (octave_idx_type j = i; j < nm; j++)
 	    {
@@ -409,17 +409,17 @@ SparseType::SparseType (const SparseComp
 	    {
 	      tmp_typ = SparseType::Permuted_Diagonal;
 	      break;
 	    }
 	}
 	  
       if (tmp_typ == SparseType::Permuted_Diagonal)
 	{
-	  bool found [nrows];
+	  std::vector<bool> found (nrows);
 
 	  for (octave_idx_type j = 0; j < i; j++)
 	    found [j] = true;
 	  for (octave_idx_type j = i; j < nrows; j++)
 	    found [j] = false;
 	      
 	  for (octave_idx_type j = i; j < nm; j++)
 	    {
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -354,17 +354,17 @@ struct hash_element_type
 
 struct hash_table_type
 {
   hash_element_type **buckets;
   unsigned size;
 };
 
 static unsigned
-hash (hash_table_type table, const std::string& key)
+kpse_hash (hash_table_type table, const std::string& key)
 {
   unsigned n = 0;
 
   /* Our keys aren't often anagrams of each other, so no point in
      weighting the characters.  */
   size_t len = key.length ();
   for (size_t i = 0; i < len; i++)
     n = (n + n + key[i]) % table.size;
@@ -375,17 +375,17 @@ hash (hash_table_type table, const std::
 /* Look up STR in MAP.  Return a (dynamically-allocated) list of the
    corresponding strings or NULL if no match.  */
 
 static string_vector
 hash_lookup (hash_table_type table, const std::string& key)
 {
   hash_element_type *p;
   string_vector ret;
-  unsigned n = hash (table, key);
+  unsigned n = kpse_hash (table, key);
 
   /* Look at everything in this bucket.  */
   for (p = table.buckets[n]; p; p = p->next)
     if (key == p->key)
       ret.append (p->value);
 
 #ifdef KPSE_DEBUG
   if (KPSE_DEBUG_P (KPSE_DEBUG_HASH))
