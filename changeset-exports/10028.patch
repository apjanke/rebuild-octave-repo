# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1261803488 18000
#      Fri Dec 25 23:58:08 2009 -0500
# Node ID 52a248732bb611f1f04ad859b34c8230dbcf403d
# Parent  0f312e11957e0fb81182a38c3f5713f685dcc9a6
use mkfifo module from gnulib

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1430,17 +1430,17 @@ fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name \
   chmod dup2 endgrent endpwent execvp expm1 expm1f fcntl fork fstat getcwd \
   getegid geteuid getgid getgrent getgrgid getgrnam getpgrp getpid \
   getppid getpwent getpwuid gettimeofday getuid getwd _kbhit kill \
   lgamma lgammaf lgamma_r lgammaf_r link localtime_r log1p log1pf lstat \
-  memmove mkfifo mkstemp on_exit pipe poll putenv raise readlink \
+  memmove mkstemp on_exit pipe poll putenv raise readlink \
   realpath rename resolvepath rindex rmdir roundl select setgrent setlocale \
   setpwent setvbuf sigaction siglongjmp sigpending sigprocmask sigsuspend \
   snprintf stat strcasecmp strdup strerror stricmp strncasecmp \
   strnicmp strptime strsignal symlink tempnam tgammaf trunc umask \
   uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
   _chmod _snprintf x_utime _utime32)
 
 AC_LANG_PUSH(C++)
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -130,27 +130,27 @@ file_ops::mkfifo (const std::string& nam
 
 int
 file_ops::mkfifo (const std::string& name, mode_t mode, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
-#if defined (HAVE_MKFIFO)
+  // With gnulib we will always have mkfifo, but some systems like MinGW
+  // don't have working mkfifo functions.  On those systems, mkfifo will
+  // always return -1 and set errno.
+
   status = ::mkfifo (name.c_str (), mode);
 
   if (status < 0)
     {
       using namespace std;
       msg = ::strerror (errno);
     }
-#else
-  msg = NOT_SUPPORTED ("mkfifo");
-#endif
 
   return status;
 }
 
 // I don't know how to emulate this on systems that don't provide it.
 
 int
 file_ops::link (const std::string& old_name, const std::string& new_name)
