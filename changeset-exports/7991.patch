# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1212695894 -7200
#      Thu Jun 05 21:58:14 2008 +0200
# Node ID 139f47cf17ab8a9bcb67f5e5d88fda0520cbaf67
# Parent  86dae6e5b83cb7ff65f08c297fac8a20e6790a1d
Change NA value to support single to double precision conversion

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2008-07-29  David Bateman  <dbateman@free.fr>
+
+	* lo-ieee.h (LO_IEEE_NA_HW, LO_IEEE_NA_LW, LO_IEEE_NA_FLOAT):
+	Change definition so cast from single to double and visa versa
+	maintains NA value.
+	(LO_IEEE_NA_HW_OLD, LO_IEEE_NA_LW_OLD): Keep old values.
+	(extern OCTAVE_API int __lo_ieee_is_old_NA (double)): Function to
+	detect old NA value.
+	(extern OCTAVE_API double __lo_ieee_replace_old_NA (double)):
+	Function to replace old NA value with new new.
+	* lo-cieee.c (int __lo_ieee_is_old_NA (double)): Function to
+	detect old NA value.
+	(double __lo_ieee_replace_old_NA (double)): Function to replace
+	old NA value with new new.
+	* data-conv.cc (void read_doubles(std::istream&, double *, 
+	save_type, int, bool, octave_mach_info::float_format)): Test if
+	loaded NA values is the old representation and replace it.
+	
 2008-07-28  Jaroslav Hajek <highegg@gmail.com>
 
 	* lo-math.h: Ensure log2 is undefined from cmath in C++ mode.
 
 2008-07-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* oct-mutex.h (octave_base_mutex::octave_base_mutex): Initialize
 	count to 1, not -1.
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 
 #include <iostream>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
+#include "lo-ieee.h"
 
 template void swap_bytes<2> (volatile void *, int);
 template void swap_bytes<4> (volatile void *, int);
 template void swap_bytes<8> (volatile void *, int);
 
 #if defined HAVE_LONG_LONG_INT
 #define FIND_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
   do \
@@ -1043,18 +1044,23 @@ read_doubles (std::istream& is, double *
 	is.read (reinterpret_cast<char *> (ptr), 4 * len);
 	do_float_format_conversion (ptr, len, fmt);
 	for (int i = 0; i < len; i++)
 	  data[i] = ptr[i];
       }
       break;
 
     case LS_DOUBLE: // No conversion necessary.
-      is.read (reinterpret_cast<char *> (data), 8 * len);
-      do_double_format_conversion (data, len, fmt);
+      {
+	is.read (reinterpret_cast<char *> (data), 8 * len);
+	do_double_format_conversion (data, len, fmt);
+
+	for (int i = 0; i < len; i++)
+	  data[i] = __lo_ieee_replace_old_NA (data[i]);
+      }
       break;
 
     default:
       is.clear (std::ios::failbit|is.rdstate ());
       break;
     }
 }
 
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -145,23 +145,46 @@ int
 }
 
 int
 __lo_ieee_is_NA (double x)
 {
 #if defined (HAVE_ISNAN)
   lo_ieee_double t;
   t.value = x;
-  return (isnan (x) && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
+  return (isnan (x) && t.word[lo_ieee_hw] == LO_IEEE_NA_HW 
+	  && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
 #else
   return 0;
 #endif
 }
 
 int
+__lo_ieee_is_old_NA (double x)
+{
+#if defined (HAVE_ISNAN)
+  lo_ieee_double t;
+  t.value = x;
+  return (isnan (x) && t.word[lo_ieee_lw] == LO_IEEE_NA_LW_OLD 
+	  && t.word[lo_ieee_hw] == LO_IEEE_NA_HW_OLD) ? 1 : 0;
+#else
+  return 0;
+#endif
+}
+
+double
+__lo_ieee_replace_old_NA (double x)
+{
+  if (__lo_ieee_is_old_NA (x))
+    return lo_ieee_na_value ();
+  else
+    return x;
+}
+
+int
 __lo_ieee_is_NaN_or_NA (double x)
 {
   return __lo_ieee_isnan (x);
 }
 
 double
 lo_ieee_inf_value (void)
 {
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -59,19 +59,22 @@ typedef union
 } lo_ieee_double;
 
 typedef union
 {
   float value;
   unsigned int word;
 } lo_ieee_float;
 
-#define LO_IEEE_NA_HW 0x7ff00000
-#define LO_IEEE_NA_LW 1954
-#define LO_IEEE_NA_FLOAT   0x7f8207a2
+#define LO_IEEE_NA_HW_OLD 0x7ff00000
+#define LO_IEEE_NA_LW_OLD 1954
+#define LO_IEEE_NA_HW 0x7FF840F4
+#define LO_IEEE_NA_LW 0x40000000
+#define LO_IEEE_NA_FLOAT   0x7FC207A2
+ 
 
 extern OCTAVE_API void octave_ieee_init (void);
 
 #if defined (SCO)
 extern int __isnan (double);
 extern int __isinf (double);
 extern int __isnanf (float);
 extern int __isinff (float);
@@ -80,17 +83,19 @@ extern int __isinff (float);
 #define isinf(x) (sizeof (x) == sizeof (float) ? __isinff (x) : __isinf (x))
 #endif
 
 extern OCTAVE_API int __lo_ieee_isnan (double x);
 extern OCTAVE_API int __lo_ieee_finite (double x);
 extern OCTAVE_API int __lo_ieee_isinf (double x);
 
 extern OCTAVE_API int __lo_ieee_is_NA (double);
+extern OCTAVE_API int __lo_ieee_is_old_NA (double);
 extern OCTAVE_API int __lo_ieee_is_NaN_or_NA (double) GCC_ATTR_DEPRECATED;
+extern OCTAVE_API double __lo_ieee_replace_old_NA (double);
 
 extern OCTAVE_API double lo_ieee_inf_value (void);
 extern OCTAVE_API double lo_ieee_na_value (void);
 extern OCTAVE_API double lo_ieee_nan_value (void);
 
 extern OCTAVE_API int __lo_ieee_signbit (double);
 
 extern OCTAVE_API int __lo_ieee_float_isnan (float x);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-07-29  David Bateman  <dbateman@free.fr>
 
+	* data.cc (FNA): Add tests for conversion of single to double NA
+	values.
+
 	* ov-flt-re-mat.cc (Fsingle): Documentation fix.
 
 2008-07-28  David Bateman  <dbateman@free.fr>
 
 	* error.cc (last_error_id, last_error_message, last_warning_id,
 	last_warning_message): New functions to return the error/warning
 	message and id without exposing the internal values.
 	* error.h  (last_error_id, last_error_message, last_warning_id,
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -3819,16 +3819,23 @@ DEFUN (NA, args, ,
 Return a matrix or N-dimensional array whose elements are all equal\n\
 to the special constant used to designate missing values.\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_na_value (), 
 		      lo_ieee_float_na_value (), "NA");
 }
 
+/*
+
+%!assert(single(NA('double')),NA('single'))
+%!assert(double(NA('single')),NA('double'))
+
+ */
+
 DEFUN (false, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} false (@var{x})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 0.\n\
 The arguments are handled the same as the arguments for @code{eye}.\n\
 @end deftypefn")
