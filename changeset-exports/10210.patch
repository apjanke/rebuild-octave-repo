# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264613079 -3600
#      Wed Jan 27 18:24:39 2010 +0100
# Node ID 752f349052a2fc14ec33f99727fdf4452c48f585
# Parent  ea0d83b4470bcae8fdbf4de0c232961911dedb39
ensure correct backtraces after error in unwind_protect

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-eval.cc (do_unwind_protect_cleanup_code): Save
+	current_statement and restore it after cleanup block.
+
 2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-parse.yy (validate_matrix_row): New static helper func.
 	(cell_or_matrix_row): Call it here.
 
 2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-lvalue.h (octave_lvalue::is_black_hole): New method.
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -896,16 +896,21 @@ tree_evaluator::do_unwind_protect_cleanu
   // We want to run the cleanup code without error_state being set,
   // but we need to restore its value, so that any errors encountered
   // in the first part of the unwind_protect are not completely
   // ignored.
 
   frame.protect_var (error_state);
   error_state = 0;
 
+  // We want to preserve the last statement indicator for possible
+  // backtracking.
+  frame.add_fcn (octave_call_stack::set_statement, 
+                 octave_call_stack::current_statement ());
+
   // Similarly, if we have seen a return or break statement, allow all
   // the cleanup code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
   frame.protect_var (tree_return_command::returning);
   tree_return_command::returning = 0;
 
@@ -951,19 +956,19 @@ tree_evaluator::do_unwind_protect_cleanu
       frame.run_top (2);
     }
 
   // We don't want to ignore errors that occur in the cleanup code, so
   // if an error is encountered there, leave error_state alone.
   // Otherwise, set it back to what it was before.
 
   if (error_state)
-    frame.discard_top ();
+    frame.discard_top (2);
   else
-    frame.run_top ();
+    frame.run_top (2);
 
   frame.run ();
 }
 
 void
 tree_evaluator::visit_unwind_protect_command (tree_unwind_protect_command& cmd)
 {
   tree_statement_list *cleanup_code = cmd.cleanup ();
