# HG changeset patch
# User jwe
# Date 1082490071 0
#      Tue Apr 20 19:41:11 2004 +0000
# Node ID c7f9ea142fda4f8f568e17f19080ebc8c6aa3894
# Parent  3cb99ace0edbfad595582e304a54c771cfe62b5b
[project @ 2004-04-20 19:41:11 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -41,16 +41,19 @@ extern void switch_to_buffer (YY_BUFFER_
 extern void delete_buffer (YY_BUFFER_STATE buf);
 
 // Restore a buffer (for unwind-prot).
 extern void restore_input_buffer (void *buf);
 
 // Delete a buffer (for unwind-prot).
 extern void delete_input_buffer (void *buf);
 
+// Is the given string a keyword?
+extern bool is_keyword (const std::string& s);
+
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   lexical_feedback (void) { init (); }
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -224,17 +224,17 @@ static bool Vwarn_separator_insert = fal
 static bool Vwarn_single_quote_string = false;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const std::string& s);
-static int is_keyword (const std::string& s);
+static int is_keyword_token (const std::string& s);
 static void prep_for_function (void);
 static void prep_for_nested_function (void);
 static std::string plot_style_token (const std::string& s);
 static symbol_record *lookup_identifier (const std::string& s);
 static std::string grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
@@ -1156,17 +1156,17 @@ prep_for_nested_function (void)
   end_tokens_expected--;
   yylval.tok_val = new token (input_line_number, current_input_column);
   token_stack.push (yylval.tok_val);
 }
 
 // Handle keywords.  Return -1 if the keyword should be ignored.
 
 static int
-is_keyword (const std::string& s)
+is_keyword_token (const std::string& s)
 {
   int l = input_line_number;
   int c = current_input_column;
 
   if (lexer_flags.plotting)
     {
       if (lexer_flags.in_plot_style)
 	{
@@ -2467,17 +2467,17 @@ handle_identifier (void)
 
       return STRUCT_ELT;
     }
 
   // If we have a regular keyword, or a plot STYLE, return it.
   // Keywords can be followed by identifiers (TOK_RETURN handles
   // that).
 
-  int kw_token = is_keyword (tok);
+  int kw_token = is_keyword_token (tok);
 
   if (kw_token)
     {
       if (kw_token < 0)
 	return kw_token;
       else if (kw_token == STYLE)
 	{
 	  current_input_column += yyleng;
@@ -2648,46 +2648,50 @@ lexical_feedback::init (void)
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
+bool
+is_keyword (const std::string& s)
+{
+  return octave_kw_lookup (s.c_str (), s.length ()) != 0;
+}
+
 DEFCMD (iskeyword, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iskeyword (@var{name})\n\
 Return true if @var{name} is an Octave keyword.  If @var{name}\n\
 is omitted, return a list of keywords.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = args.make_argv ("help");
+  string_vector argv = args.make_argv ("iskeyword");
 
   if (error_state)
     return retval;
 
   if (argc == 1)
     {
       string_vector lst (TOTAL_KEYWORDS);
 
       for (int i = 0; i < TOTAL_KEYWORDS; i++)
 	lst[i] = wordlist[i].name;
 
       retval = Cell (lst.qsort ());
     }
   else if (argc == 2)
     {
-      std::string s = argv[1];
-
-      retval = (octave_kw_lookup (s.c_str (), s.length ()) != 0);
+      retval = is_keyword (argv[1]);
     }
   else
     print_usage ("iskeyword");
 
   return retval;
 }
 
 
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -44,16 +44,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
+#include "lex.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "pt-exp.h"
 #include "symtab.h"
 #include "sysdep.h"
@@ -204,30 +205,30 @@ read_mat_ascii_data (std::istream& is, c
 
   size_t pos = filename.rfind ('/');
 
   if (pos != NPOS)
     varname = filename.substr (pos+1);
   else
     varname = filename;
 
-  pos = varname.find ('.');
+  pos = varname.rfind ('.');
 
   if (pos != NPOS)
     varname = varname.substr (0, pos);
 
   size_t len = varname.length ();
   for (size_t i = 0; i < len; i++)
     {
       char c = varname[i];
       if (! (isalnum (c) || c == '_'))
 	varname[i] = '_';
     }
 
-  if (! isalpha (varname[0]))
+  if (is_keyword (varname) || ! isalpha (varname[0]))
     varname.insert (0, "X");
 
   if (valid_identifier (varname))
     {
       int nr = 0;
       int nc = 0;
 
       int total_count = 0;
