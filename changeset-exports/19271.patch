# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1413426959 14400
#      Wed Oct 15 22:35:59 2014 -0400
# Node ID 030d56f673634d9007e4b017e576a2e2cf3f5efa
# Parent  efccb2a65b9a27f0cdd01db38aa327bf5ae220de
implement the open function

* open.m: New function.
* system.txi: Document it.
* __unimplemented__.m (missing_functions): Remove open from the list.
* scripts/miscellaneous/module.mk (miscellaneous_FCN_FILES):
Include open.m in the list.
* sysdep.cc (F__w32_shell_execute__): New function.

diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -325,16 +325,18 @@ use them if you can't find any way to do
 higher-level functions.
 
 @DOCSTRING(system)
 
 @DOCSTRING(unix)
 
 @DOCSTRING(dos)
 
+@DOCSTRING(open)
+
 @DOCSTRING(perl)
 
 @DOCSTRING(python)
 
 @DOCSTRING(popen)
 
 @DOCSTRING(pclose)
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -101,16 +101,17 @@ BSD_init (void)
 #endif
 }
 #endif
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #define WIN32_LEAN_AND_MEAN
 #include <tlhelp32.h>
+#include <windows.h>
 
 static void
 w32_set_octave_home (void)
 {
   std::string bin_dir;
 
   HANDLE h = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE
 #ifdef TH32CS_SNAPMODULE32
@@ -174,16 +175,46 @@ static void
 w32_init (void)
 {
   w32_set_octave_home ();
 
   command_editor::prefer_env_winsize (true);
 }
 #endif
 
+DEFUN (__w32_shell_execute__, args, ,
+           "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __w32_shell_execute__ (@var{file})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  bool retval = false;
+
+#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+  if (args.length () == 1)
+    {
+      std::string file = args(0).string_value ();
+
+      if (! error_state)
+        {
+          HINSTANCE status = ShellExecute (0, 0, file.c_str (), 0, 0, SW_SHOWNORMAL);
+
+          // ShellExecute returns a value greater than 32 if successful.
+          retval = (reinterpret_cast<ptrdiff_t> (status) > 32);
+        }
+      else
+        error ("__w32_shell_execute__: expecting argument to be a file name");
+    }
+  else
+    print_usage ();
+#endif
+
+  return octave_value (retval);
+}
+
 #if defined (__MINGW32__)
 static void
 MINGW_init (void)
 {
   w32_init ();
 }
 #endif
 
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -740,17 +740,16 @@ function list = missing_functions ()
   "ode23",
   "ode23s",
   "ode23t",
   "ode23tb",
   "ode45",
   "odeget",
   "odeset",
   "odextend",
-  "open",
   "openfig",
   "opengl",
   "openvar",
   "ordeig",
   "ordqz",
   "ordschur",
   "outerjoin",
   "padecoef",
diff --git a/scripts/miscellaneous/module.mk b/scripts/miscellaneous/module.mk
--- a/scripts/miscellaneous/module.mk
+++ b/scripts/miscellaneous/module.mk
@@ -45,16 +45,17 @@ miscellaneous_FCN_FILES = \
   miscellaneous/ls_command.m \
   miscellaneous/menu.m \
   miscellaneous/mex.m \
   miscellaneous/mexext.m \
   miscellaneous/mkoctfile.m \
   miscellaneous/movefile.m \
   miscellaneous/namelengthmax.m \
   miscellaneous/news.m \
+  miscellaneous/open.m \
   miscellaneous/orderfields.m \
   miscellaneous/pack.m \
   miscellaneous/paren.m \
   miscellaneous/parseparams.m \
   miscellaneous/perl.m \
   miscellaneous/python.m \
   miscellaneous/recycle.m \
   miscellaneous/rmappdata.m \
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/open.m
@@ -0,0 +1,87 @@
+## Copyright (C) 2014 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {@var{output} =} open @var{file}
+## @deftypefnx  {Function File} {@var{output} =} open (@var{file})
+## Open the file @var{file} in Octave or in an external application
+## based on the file type as determined by the file name extension.
+##
+## Recognized file types are
+##
+## @table @code
+## @item .m
+## Open file in the editor.
+## @item .mat
+## Load the file in the base workspace.
+## @item .exe
+## Execute the program (on Windows systems only).
+## @end table
+##
+## Other file types are opened in the appropriate external application.
+## @end deftypefn
+
+function output = open (file)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  if (! ischar (file))
+    error ("expecting argument to be a file name");
+  endif
+
+  [~, ~, ext] = fileparts (file);
+
+  if (strcmpi (ext, ".m"))
+    edit (file);
+  elseif (strcmpi (ext, ".mat"))
+    if (nargout > 0)
+      output = load (file);
+    else
+      evalin ("base", sprintf ("load ('%s');", file));
+    endif
+  elseif (any (strcmpi (ext, {".fig", ".mdl", ".slx", ".prj"})))
+    error ("opening file type '%s' is not supported", ext);
+  elseif (strcmpi (ext, ".exe"))
+    if (ispc ())
+      dos (file);
+    else
+      error ("executing .exe files is only supported on Windows systems");
+    endif
+  else
+    open_with_system_app (file);
+  endif
+
+endfunction
+
+%% Test input validation
+%!error open
+%!error open (1)
+%!error output = open (1)
+
+function open_with_system_app (file)
+
+  if (ispc ())
+    __w32_shell_execute__ (file);
+  else
+    ## FIXME: might not be xdg-open...
+    system (sprintf ("xdg-open %s 2> /dev/null", file), false, "async");
+  endif
+
+endfunction
