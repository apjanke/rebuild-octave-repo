# HG changeset patch
# User Rik <rik@octave.org>
# Date 1498009172 25200
#      Tue Jun 20 18:39:32 2017 -0700
# Node ID 90fdfe448ae65246bafb85cac336dc37782d904f
# Parent  af611609c6a4a09d755620937789f1e2785bc8e3
Promote simple functions from lo-mappers.cc to inline versions in lo-mappers.h
Benchmark shows 4% performance improvement.

* lo-mappers.cc (exp2, copysign, signbit, trunc, floor, round, isnan, isfinite,
isinf): Delete functions.
* lo-mappers.h (exp2, copysign, signbit, trunc, floor, round, isnan, isfinite,
isinf): new inline functions that forward to std library.

diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -116,23 +116,16 @@ namespace octave
       FloatComplex y = std::asin (x);
 
       if (std::imag (x) == 0.0f && std::real (x) > 1.0f)
         return std::conj (y);
       else
         return y;
     }
 
-    Complex atan (const Complex& x) { return std::atan (x); }
-
-    FloatComplex atan (const FloatComplex& x) { return std::atan (x); }
-
-    double log2 (double x) { return std::log2 (x); }
-    float log2 (float x) { return std::log2f (x); }
-
     Complex
     log2 (const Complex& x)
     {
 #if defined (M_LN2)
       static double ln2 = M_LN2;
 #else
       static double ln2 = std::log (2.0);
 #endif
@@ -173,56 +166,29 @@ namespace octave
     FloatComplex
     log2 (const FloatComplex& x, int& exp)
     {
       float ax = std::abs (x);
       float lax = log2 (ax, exp);
       return (ax != lax) ? (x / ax) * lax : x;
     }
 
-    double exp2 (double x) { return std::exp2 (x); }
-    float exp2 (float x) { return std::exp2f (x); }
-
-    double copysign (double x, double y) { return std::copysign (x, y); }
-    float copysign (float x, float y) { return std::copysign (x, y); }
-
-    double signbit (double x) { return std::signbit (x); }
-    float signbit (float x) { return std::signbit (x); }
-
     bool negative_sign (double x) { return __lo_ieee_signbit (x); }
     bool negative_sign (float x) { return __lo_ieee_float_signbit (x); }
 
-    double trunc (double x) { return std::trunc (x); }
-    float trunc (float x) { return std::trunc (x); }
-
-    double floor (double x) { return std::floor (x); }
-    float floor (float x) { return std::floor (x); }
-
-    double round (double x) { return std::round (x); }
-    float round (float x) { return std::roundf (x); }
-
     double frexp (double x, int *expptr)
     {
       return octave_frexp_wrapper (x, expptr);
     }
 
     float frexp (float x, int *expptr)
     {
       return octave_frexpf_wrapper (x, expptr);
     }
 
-    bool isnan (double x) { return std::isnan (x); }
-    bool isnan (float x) { return std::isnan (x); }
-
-    bool isfinite (double x) { return std::isfinite (x); }
-    bool isfinite (float x) { return std::isfinite (x); }
-
-    bool isinf (double x) { return std::isinf (x); }
-    bool isinf (float x) { return std::isinf (x); }
-
     // Sometimes you need a large integer, but not always.
 
     octave_idx_type
     nint_big (double x)
     {
       if (x > std::numeric_limits<octave_idx_type>::max ())
         return std::numeric_limits<octave_idx_type>::max ();
       else if (x < std::numeric_limits<octave_idx_type>::min ())
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -52,21 +52,21 @@ namespace octave
 
     extern OCTAVE_API bool isna (const FloatComplex& x);
     OCTAVE_DEPRECATED (4.4, "use 'octave::math::isna' instead")
     inline bool is_NA (const FloatComplex& x) { return octave::math::isna (x); }
 
     extern OCTAVE_API bool is_NaN_or_NA (const Complex& x);
     extern OCTAVE_API bool is_NaN_or_NA (const FloatComplex& x);
 
-    extern OCTAVE_API double copysign (double x, double y);
-    extern OCTAVE_API float copysign (float x, float y);
+    inline double copysign (double x, double y) { return std::copysign (x, y); }
+    inline float copysign (float x, float y) { return std::copysignf (x, y); }
 
-    extern OCTAVE_API double signbit (double x);
-    extern OCTAVE_API float signbit (float x);
+    inline double signbit (double x) { return std::signbit (x); }
+    inline float signbit (float x) { return std::signbit (x); }
 
     // Test for negative sign.
     extern OCTAVE_API bool negative_sign (double x);
     extern OCTAVE_API bool negative_sign (float x);
 
     // Test for positive sign.
     inline bool positive_sign (double x) { return ! negative_sign (x); }
     inline bool positive_sign (float x) { return ! negative_sign (x); }
@@ -76,18 +76,18 @@ namespace octave
 
     using std::acos;
 
     extern OCTAVE_API Complex asin (const Complex& x);
     extern OCTAVE_API FloatComplex asin (const FloatComplex& x);
 
     using std::asin;
 
-    extern OCTAVE_API Complex atan (const Complex& x);
-    extern OCTAVE_API FloatComplex atan (const FloatComplex& x);
+    inline Complex atan (const Complex& x) { return std::atan (x); }
+    inline FloatComplex atan (const FloatComplex& x) { return std::atan (x); }
 
     using std::atan;
 
     // C++ now provides versions of the following functions for arguments of
     // type std::complex<T> and T.  But some compilers (I'm looking at you,
     // clang) apparently don't get this right yet...  So we provide our own
     // wrappers for real-valued arguments.
 
@@ -129,73 +129,74 @@ namespace octave
 
     template <typename T>
     T
     real (const std::complex<T>& x)
     {
       return std::real (x);
     }
 
-    extern OCTAVE_API double log2 (double x);
-    extern OCTAVE_API float log2 (float x);
+    inline double log2 (double x) { return std::log2 (x); }
+    inline float log2 (float x) { return std::log2f (x); }
 
     extern OCTAVE_API Complex log2 (const Complex& x);
     extern OCTAVE_API FloatComplex log2 (const FloatComplex& x);
 
     extern OCTAVE_API double log2 (double x, int& exp);
     extern OCTAVE_API float log2 (float x, int& exp);
 
     extern OCTAVE_API Complex log2 (const Complex& x, int& exp);
     extern OCTAVE_API FloatComplex log2 (const FloatComplex& x, int& exp);
 
-    extern OCTAVE_API double exp2 (double x);
-    extern OCTAVE_API float exp2 (float x);
+    inline double exp2 (double x) { return std::exp2 (x); }
+    inline float exp2 (float x) { return std::exp2f (x); }
 
     inline double ceil (double x) { return ::ceil (x); }
     inline float ceil (float x) { return ::ceilf (x); }
 
     template <typename T>
     std::complex<T>
     ceil (const std::complex<T>& x)
     {
       return std::complex<T> (ceil (std::real (x)), ceil (std::imag (x)));
     }
 
-    extern OCTAVE_API double trunc (double x);
-    extern OCTAVE_API float trunc (float x);
+    inline double trunc (double x) { return std::trunc (x); }
+    inline float trunc (float x) { return std::truncf (x); }
 
     template <typename T>
     std::complex<T>
     trunc (const std::complex<T>& x)
     {
       return std::complex<T> (trunc (std::real (x)), trunc (std::imag (x)));
     }
 
+    // FIXME: Do we need this alias for trunc?
     inline double fix (double x) { return trunc (x); }
     inline float fix (float x) { return trunc (x); }
 
     template <typename T>
     std::complex<T>
     fix (const std::complex<T>& x)
     {
       return trunc (x);
     }
 
-    extern OCTAVE_API double floor (double x);
-    extern OCTAVE_API float floor (float x);
+    inline double floor (double x) { return std::floor (x); }
+    inline float floor (float x) { return std::floor (x); }
 
     template <typename T>
     std::complex<T>
     floor (const std::complex<T>& x)
     {
       return std::complex<T> (floor (std::real (x)), floor (std::imag (x)));
     }
 
-    extern OCTAVE_API double round (double x);
-    extern OCTAVE_API float round (float x);
+    inline double round (double x) { return std::round (x); }
+    inline float round (float x) { return std::roundf (x); }
 
     template <typename T>
     std::complex<T>
     round (const std::complex<T>& x)
     {
       return std::complex<T> (round (std::real (x)), round (std::imag (x)));
     }
 
@@ -228,28 +229,29 @@ namespace octave
       return std::complex<T> (roundb (std::real (x)), roundb (std::imag (x)));
     }
 
     extern OCTAVE_API double frexp (double x, int *expptr);
     extern OCTAVE_API float frexp (float x, int *expptr);
 
     inline bool isnan (bool) { return false; }
     inline bool isnan (char) { return false; }
-    extern OCTAVE_API bool isnan (double x);
-    extern OCTAVE_API bool isnan (float x);
+
+    inline bool isnan (double x) { return std::isnan (x); }
+    inline bool isnan (float x) { return std::isnan (x); }
 
     template <typename T>
     bool
     isnan (const std::complex<T>& x)
     {
       return (isnan (std::real (x)) || isnan (std::imag (x)));
     }
 
-    extern OCTAVE_API bool isfinite (double x);
-    extern OCTAVE_API bool isfinite (float x);
+    inline bool isfinite (double x) { return std::isfinite (x); }
+    inline bool isfinite (float x) { return std::isfinite (x); }
 
     template <typename T>
     bool
     isfinite (const std::complex<T>& x)
     {
       return (isfinite (std::real (x)) && isfinite (std::imag (x)));
     }
 
@@ -261,18 +263,18 @@ namespace octave
     template <typename T>
     OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
     bool
     finite (const std::complex<T>& x)
     {
       return octave::math::isfinite (x);
     }
 
-    extern OCTAVE_API bool isinf (double x);
-    extern OCTAVE_API bool isinf (float x);
+    inline bool isinf (double x) { return std::isinf (x); }
+    inline bool isinf (float x) { return std::isinf (x); }
 
     template <typename T>
     bool
     isinf (const std::complex<T>& x)
     {
       return (isinf (std::real (x)) || isinf (std::imag (x)));
     }
 
