# HG changeset patch
# User jwe
# Date 787264219 0
#      Mon Dec 12 20:30:19 1994 +0000
# Node ID e7165acbf96fd18f82acfc51a5051042a1ebf571
# Parent  a0fa18fa9d0c0e3aeb88aeac8473251c6965ae8d
[project @ 1994-12-12 20:30:19 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -15,17 +15,16 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
-%x NEW_MATRIX
 %x HELP_FCN
 %s TEXT_FCN
 %s MATRIX
 
 %{
 #define SHORT_CIRCUIT_LOGICALS 1
 
 #ifdef HAVE_CONFIG_H
@@ -103,18 +102,19 @@ static int is_plot_keyword (char *s);
 static int is_keyword (char *s);
 static char *plot_style_token (char *s);
 static symbol_record *lookup_identifier (char *s);
 static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static char *strip_trailing_whitespace (char *s);
+static void eat_whitespace (void);
 static void handle_number (char *yytext);
-static int handle_string (char delim);
+static int handle_string (char delim, int text_style = 0);
 static int handle_close_brace (char *yytext);
 static int handle_identifier (char *s, int next_tok_is_eq);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	[\n]
@@ -127,43 +127,22 @@ CCHAR	[#%]
 COMMENT	({CCHAR}.*{NL})
 SNLCMT	({SNL}|{COMMENT})
 NOTEQ	((~=)|(!=)|(<>))
 POW	((\*\*)|(\^))
 EPOW	(\.{POW})
 PLUS	((\+)|(\.\+))
 MINUS	((\-)|(\.\-))
 NOT	((\~)|(\!))
-QQ	(\'\')
-ECHAR	(\\.)
-QSTR	([^\n\'\\]*({QQ}|{ECHAR})*)
-DQSTR	([^\n\"\\]*{ECHAR}*)
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?))
 %%
 
 %{
-// XXX FIXME XXX -- this probably doesn't need to be an exclusive
-// start state since it always matches.  Also, we can probably
-// eliminate it by doing the check below using yyinput() in the only
-// place where we actually set this start state.
-%}
-
-<NEW_MATRIX>[^ \t\n#%] {
-    yyless (0);
-    BEGIN MATRIX;
-  }
-
-<NEW_MATRIX>{SNLCMT}* {
-    fixup_column_count (yytext);
-    BEGIN MATRIX;
-  }
-
-%{
 // Help and other text-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
 %}
 
 <HELP_FCN>{NL} |
 <TEXT_FCN>{NL} {
     BEGIN 0;
@@ -186,72 +165,31 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	BEGIN 0;
 	if (strcmp (yytext, ",") == 0)
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
       }
   }
 
+<TEXT_FCN>[\"\'] {
+    current_input_column++;
+    return handle_string (yytext[0], 1);
+  }
+
 <HELP_FCN>[^ \t\n]*{S}*	|
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
     static char *tok = 0;
     delete [] tok;
     tok = strip_trailing_whitespace (yytext);
     yylval.tok_val = new token (tok);
     token_stack.push (yylval.tok_val);
     TOK_RETURN (TEXT);
   }
 
-<TEXT_FCN>\'{QSTR}*[\n\'] {
-    if (yytext[yyleng-1] == '\n')
-      {
-	error ("unterminated string constant");
-	current_input_column = 1;
-	return LEXICAL_ERROR;
-      }
-    else
-      {
-	static char *tok = 0;
-	delete [] tok;
-	int off1 = doing_set ? 0 : 1;
-	int off2 = doing_set ? 0 : 2;
-	tok = strsave (&yytext[off1]);
-	tok[yyleng-off2] = '\0';
-	do_string_escapes (tok);
-	yylval.tok_val = new token (tok);
-	token_stack.push (yylval.tok_val);
-	current_input_column += yyleng;
-      }
-    return TEXT;
-  }
-
-<TEXT_FCN>\"{DQSTR}*[\n\"] {
-    if (yytext[yyleng-1] == '\n')
-      {
-	error ("unterminated string constant");
-	current_input_column = 1;
-	return LEXICAL_ERROR;
-      }
-    else
-      {
-	static char *tok = 0;
-	delete [] tok;
-	int off1 = doing_set ? 0 : 1;
-	int off2 = doing_set ? 0 : 2;
-	tok = strsave (&yytext[off1]);
-	tok[yyleng-off2] = '\0';
-	do_string_escapes (tok);
-	yylval.tok_val = new token (tok);
-	token_stack.push (yylval.tok_val);
-	current_input_column += yyleng;
-      }
-    return TEXT;
-  }
-
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 //
@@ -301,36 +239,44 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return ';';
   }
 
 %{
 // Open and close brace are handled differently if we are in the range
 // part of a plot command.
+//
 %}
 
 \[{S}* {
+    fixup_column_count (yytext);
+
     in_brace_or_paren.push (1);
+
+    promptflag--;
+    eat_whitespace ();
+
     if (plotting && ! past_plot_range)
       {
 	in_plot_range = 1;
 	TOK_RETURN (OPEN_BRACE);
       }
     else
       {
 	mlnm.push (1);
 	braceflag++;
-	promptflag--;
-	BEGIN NEW_MATRIX;
+	BEGIN MATRIX;
 	TOK_RETURN ('[');
       }
   }
 
 \] {
+    promptflag++;
+
     if (! in_brace_or_paren.empty ())
       in_brace_or_paren.pop ();
 
     if (plotting && ! past_plot_range)
       {
 	in_plot_range = 0;
 	TOK_RETURN (CLOSE_BRACE);
       }
@@ -1322,16 +1268,54 @@ strip_trailing_whitespace (char *s)
   t = strchr (retval, '\t');
   if (t)
     *t = '\0';
 
   return retval;
 }
 
 static void
+eat_whitespace (void)
+{
+  int in_comment = 0;
+  int c;
+  while ((c = yyinput ()) != EOF)
+    {
+      current_input_column++;
+
+      switch (c)
+	{
+	case ' ':
+	case '\t':
+	  break;
+
+	case '\n':
+	  in_comment = 0;
+	  current_input_column = 0;
+	  break;
+
+	case '#':
+	case '%':
+	  in_comment = 1;
+	  break;
+
+	default:
+	  if (in_comment)
+	    break;
+	  else
+	    goto done;
+	}
+    }
+
+ done:
+  yyunput (c, yytext);
+  return;
+}
+
+static void
 handle_number (char *yytext)
 {
   double value;
   int nread = sscanf (yytext, "%lf", &value);
 
   assert (nread == 1);
 
   quote_is_transpose = 1;
@@ -1374,16 +1358,17 @@ have_continuation (void)
 	  break;
 
 	case '%':
 	case '#':
 	  in_comment = 1;
 	  break;
 
 	case '\n':
+	  current_input_column = 0;
 	  return 1;
 
 	default:
 	  if (in_comment)
 	    break;
 	  else
 	    {
 	      buf << ends;
@@ -1422,17 +1407,17 @@ have_ellipsis_continuation (void)
     }
   else
     yyunput (c1, yytext);
 
   return 0;
 }
 
 static int
-handle_string (char delim)
+handle_string (char delim, int text_style)
 {
   ostrstream buf;
 
   int c;
   int prev = 0;
 
   while ((c = yyinput ()) != EOF)
     {
@@ -1468,22 +1453,41 @@ handle_string (char delim)
 	      if (c == delim)
 		buf << (char) c;
 	      else
 		{
 		  yyunput (c, yytext);
 		  buf << ends;
 		  char *tok = buf.str ();
 		  do_string_escapes (tok);
+
+		  if (text_style && doing_set)
+		    {
+		      if (tok)
+			{
+			  int len = strlen (tok) + 3;
+			  char *tmp = tok;
+			  tok = new char [len];
+			  tok[0] = delim;
+			  strcpy (tok+1, tmp);
+			  tok[len-2] = delim;
+			  tok[len-1] = '\0';
+			  delete [] tmp;
+			}
+		    }
+		  else
+		    {
+		      quote_is_transpose = 1;
+		      cant_be_identifier = 1;
+		      convert_spaces_to_comma = 1;
+		    }
+
 		  yylval.tok_val = new token (tok);
 		  delete [] tok;
 		  token_stack.push (yylval.tok_val);
-		  quote_is_transpose = 1;
-		  cant_be_identifier = 1;
-		  convert_spaces_to_comma = 1;
 		  return TEXT;
 		}
 	    }
 	}
       else
 	{
 	  buf << (char) c;
 	}
