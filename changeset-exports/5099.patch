# HG changeset patch
# User jwe
# Date 1103915161 0
#      Fri Dec 24 19:06:01 2004 +0000
# Node ID f7e39f977fe864d5508977a0020921da5d9f98cd
# Parent  ab4e64f925266db483e2fedbc2f3740035734294
[project @ 2004-12-24 19:06:01 by jwe]

diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -1,15 +1,17 @@
 \input texinfo.tex      @c -*-texinfo-*-
 
 @setfilename Octave-FAQ.info
 @settitle Frequently asked questions about Octave (with answers)
 
 @setchapternewpage off
-
+@direntry
+* Octave-FAQ: (Octave-FAQ). Frequently asked questions about Octave
+@end direntry
 @titlepage
 @title Octave FAQ
 @subtitle Frequently asked questions about Octave
 @subtitle February 14, 1998
 @sp 1
 @author John W. Eaton
 @page
 @end titlepage
diff --git a/doc/liboctave/liboctave.texi b/doc/liboctave/liboctave.texi
--- a/doc/liboctave/liboctave.texi
+++ b/doc/liboctave/liboctave.texi
@@ -1,14 +1,17 @@
 % Copyright (C) 1996, 1997 John W. Eaton
 % This is part of the Octave manual.
 % For copying conditions, see the file gpl.texi.
 
 \input texinfo  @c -*-texinfo-*-
 @setfilename liboctave.info
+@direntry
+* liboctave: (liboctave). Octave C++ Classes
+@end direntry
 
 @c @smallbook
 @c @setchapternewpage odd
 @c @cropmarks
 @c @finalout
 
 @c Smaller amounts of whitespace for the 8.5 by 11 inch format.
 @tex
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2004-12-22  John W. Eaton  <jwe@octave.org>
+
+	* ls-oct-ascii.cc (extract_keyword (std::istream&, const
+	string_vector&, std::string&, int&, const bool): New function.
+	* ls-oct-ascii.h: Provide decl.
+	* ov-bool-mat.cc (octave_bool_matrix::load_ascii):
+	Use new extract_keyword function to avoid calling tellg/seekg.
+	* ov-cell.cc (octave_cell::load_ascii): Likewise.
+	* ov-cx-mat.cc (octave_complex_matrix::load_ascii): Likewise.
+	* ov-re-mat.cc (octave_matrix::load_ascii): Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::load_ascii): Likewise.
+
+2004-12-20  John W. Eaton  <jwe@octave.org>
+
+	* pt-idx.cc (tree_index_expression::has_magic_end): Return true if
+	any argument list element has a magic end token.
+
+2004-12-03  John W. Eaton  <jwe@octave.org>
+  
+  	* version.h (OCTAVE_VERSION): Now 2.1.64.
+
 2004-12-03  Teemu Ikonen  <tpikonen@pcu.helsinki.fi>
 
 	* file-io.cc: Doc string fixes.
 
 2004-12-02  David Bateman  <dbateman@free.fr>
 
 	* input.cc (get_user_input): Only set nm and line for debugging if
 	both debug is true and curr_caller_function is non-null.
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -229,16 +229,81 @@ extract_keyword (std::istream& is, const
 	    }
 	  else if (next_only)
 	    break;
 	}
     }
   return status;
 }
 
+// Match one of the elements in KEYWORDS on stream IS, placing the
+// matched keyword in KW and the associated value in VALUE,
+// returning TRUE if successful and FALSE otherwise.
+//
+// Input should look something like:
+//
+//  [%#][ \t]*keyword[ \t]*int-value.*\n
+
+bool
+extract_keyword (std::istream& is, const string_vector& keywords,
+		 std::string& kw, int& value, const bool next_only)
+{
+  bool status = false;
+  kw = "";
+  value = 0;
+
+  char c;
+  while (is.get (c))
+    {
+      if (c == '%' || c == '#')
+	{
+	  OSSTREAM buf;
+
+	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
+	    ; // Skip whitespace and comment characters.
+
+	  if (isalpha (c))
+	    buf << c;
+
+	  while (is.get (c) && isalpha (c))
+	    buf << c;
+
+	  buf << OSSTREAM_ENDS;
+	  std::string tmp = OSSTREAM_STR (buf);
+	  OSSTREAM_FREEZE (buf);
+
+	  for (int i = 0; i < keywords.length (); i++)
+	    {
+	      int match = (tmp == keywords[i]);
+
+	      if (match)
+		{
+		  kw = keywords[i];
+
+		  while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
+		    ; // Skip whitespace and the colon.
+
+		  is.putback (c);
+		  if (c != '\n')
+		    is >> value;
+		  if (is)
+		    status = true;
+		  while (is.get (c) && c != '\n')
+		    ; // Skip to beginning of next line;
+		  return status;
+		}
+	    }
+
+	  if (next_only)
+	    break;
+	}
+    }
+  return status;
+}
+
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.  If the value
 // is tagged as global in the file, return TRUE in GLOBAL.
 //
 // Each type supplies its own function to load the data, and so this
 // function is extensible.
 //
 // FILENAME is used for error messages.
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -20,16 +20,20 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_ls_oct_ascii_h)
 #define octave_ls_oct_ascii_h 1
 
 #include <cfloat>
 
+#include <string>
+
+#include "str-vec.h"
+
 // Flag for cell elements
 #define CELL_ELT_TAG "<cell-element>"
 
 // Used when converting Inf to something that gnuplot can read.
 
 #ifndef OCT_RBV
 #define OCT_RBV DBL_MAX / 100.0
 #endif
@@ -37,16 +41,21 @@ Software Foundation, 59 Temple Place - S
 extern std::string
 extract_keyword (std::istream& is, const char *keyword, 
 		 const bool next_only = false);
 
 extern  bool
 extract_keyword (std::istream& is, const char *keyword, int& value,
 		 const bool next_only = false);
 
+extern  bool
+extract_keyword (std::istream& is, const string_vector& keywords,
+		 std::string& keyword, int& value,
+		 const bool next_only = false);
+
 extern std::string
 read_ascii_data (std::istream& is, const std::string& filename, bool& global,
 		 octave_value& tc, int count);
 
 extern bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
 		 const std::string& name, bool& infnan_warned,
 		 bool strip_nan_and_inf, bool mark_as_global,
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -182,90 +182,103 @@ octave_bool_matrix::save_ascii (std::ost
     }
 
   return true;
 }
 
 bool 
 octave_bool_matrix::load_ascii (std::istream& is)
 {
-  int mdims = 0;
   bool success = true;
-  std::streampos pos = is.tellg ();
 
-  if (extract_keyword (is, "ndims", mdims, true))
-    {
-      if (mdims >= 0)
-	{
-	  dim_vector dv;
-	  dv.resize (mdims);
+  string_vector keywords (2);
 
-	  for (int i = 0; i < mdims; i++)
-	    is >> dv(i);
-
-	  NDArray tmp(dv);
-	  is >> tmp;
+  keywords[0] = "ndims";
+  keywords[1] = "rows";
 
-	  if (!is) 
-	    {
-	      error ("load: failed to load matrix constant");
-	      success = false;
-	    }
+  std::string kw;
+  int val = 0;
 
-	  boolNDArray btmp (dv);
-	  for (int i = 0; i < btmp.nelem (); i++)
-	      btmp.elem (i) = (tmp.elem (i) != 0.);
-	  
-	  matrix = btmp;
-	}
-      else
-	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
-	}
-    }
-  else
+  if (extract_keyword (is, keywords, kw, val, true))
     {
-      int nr = 0;
-      int nc = 0;
-
-      // re-read the same line again
-      is.clear ();
-      is.seekg (pos);
+      if (kw == "ndims")
+	{
+	  int mdims = val;
 
-      if (extract_keyword (is, "rows", nr) && nr >= 0
-	  && extract_keyword (is, "columns", nc) && nc >= 0)
-	{
-	  if (nr > 0 && nc > 0)
+	  if (mdims >= 0)
 	    {
-	      Matrix tmp (nr, nc);
+	      dim_vector dv;
+	      dv.resize (mdims);
+
+	      for (int i = 0; i < mdims; i++)
+		is >> dv(i);
+
+	      NDArray tmp(dv);
 	      is >> tmp;
-	      if (!is) 
+
+	      if (!is)
 		{
 		  error ("load: failed to load matrix constant");
 		  success = false;
 		}
 
-	      boolMatrix btmp (nr,nc);
-	      for (int j = 0; j < nc; j++)
-		for (int i = 0; i < nr; i++)
-		  btmp.elem (i,j) = (tmp.elem (i, j) != 0.);
-	      
+	      boolNDArray btmp (dv);
+	      for (int i = 0; i < btmp.nelem (); i++)
+		btmp.elem (i) = (tmp.elem (i) != 0.);
+
 	      matrix = btmp;
 	    }
-	  else if (nr == 0 || nc == 0)
-	    matrix = boolMatrix (nr, nc);
 	  else
-	    panic_impossible ();
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
-      else 
+      else if (kw == "rows")
 	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
+	  int nr = val;
+	  int nc = 0;
+
+	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
+	    {
+	      if (nr > 0 && nc > 0)
+		{
+		  Matrix tmp (nr, nc);
+		  is >> tmp;
+		  if (!is) 
+		    {
+		      error ("load: failed to load matrix constant");
+		      success = false;
+		    }
+
+		  boolMatrix btmp (nr,nc);
+		  for (int j = 0; j < nc; j++)
+		    for (int i = 0; i < nr; i++)
+		      btmp.elem (i,j) = (tmp.elem (i, j) != 0.);
+
+		  matrix = btmp;
+		}
+	      else if (nr == 0 || nc == 0)
+		matrix = boolMatrix (nr, nc);
+	      else
+		panic_impossible ();
+	    }
+	  else
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
+      else
+	panic_impossible ();
+    }
+  else
+    {
+      error ("load: failed to extract number of rows and columns");
+      success = false;
     }
 
   return success;
 }
 
 bool 
 octave_bool_matrix::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -476,129 +476,142 @@ octave_cell::save_ascii (std::ostream& o
     }
 
   return true;
 }
 
 bool 
 octave_cell::load_ascii (std::istream& is)
 {
-  int mdims = 0;
   bool success = true;
-  std::streampos pos = is.tellg ();
+
+  string_vector keywords(2);
 
-  if (extract_keyword (is, "ndims", mdims, true))
+  keywords[0] = "ndims";
+  keywords[1] = "rows";
+
+  std::string kw;
+  int val = 0;
+
+  if (extract_keyword (is, keywords, kw, val, true))
     {
-      if (mdims >= 0)
+      if (kw == "ndims")
 	{
-	  dim_vector dv;
-	  dv.resize (mdims);
+	  int mdims = val;
 
-	  for (int i = 0; i < mdims; i++)
-	    is >> dv(i);
+	  if (mdims >= 0)
+	    {
+	      dim_vector dv;
+	      dv.resize (mdims);
+
+	      for (int i = 0; i < mdims; i++)
+		is >> dv(i);
 
-	  Cell tmp(dv);
+	      Cell tmp(dv);
 
-	  for (int i = 0; i < dv.numel (); i++)
-	    {
-	      octave_value t2;
-	      bool dummy;
+	      for (int i = 0; i < dv.numel (); i++)
+		{
+		  octave_value t2;
+		  bool dummy;
+
+		  // recurse to read cell elements
+		  std::string nm = read_ascii_data (is, std::string (), 
+						    dummy, t2, count);
 
-	      // recurse to read cell elements
-	      std::string nm = read_ascii_data (is, std::string (), 
-						dummy, t2, count);
+		  if (nm == CELL_ELT_TAG)
+		    {
+		      if (is)
+			tmp.elem (i) = t2;
+		    }
+		  else
+		    {
+		      error ("load: cell array element had unexpected name");
+		      success = false;
+		      break;
+		    }
+		}
 
-	      if (nm == CELL_ELT_TAG)
-		{
-		  if (is)
-		    tmp.elem (i) = t2;
-		}
+	      if (is)
+		matrix = tmp;
 	      else
 		{
-		  error ("load: cell array element had unexpected name");
+		  error ("load: failed to load matrix constant");
 		  success = false;
-		  break;
 		}
 	    }
-
-	  if (is)
-	    matrix = tmp;
 	  else
 	    {
-	      error ("load: failed to load matrix constant");
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
+	}
+      else if (kw == "rows")
+	{
+	  int nr = val;
+	  int nc = 0;
+
+	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
+	    {
+	      if (nr > 0 && nc > 0)
+		{
+		  Cell tmp (nr, nc);
+
+		  for (int j = 0; j < nc; j++)
+		    {
+		      for (int i = 0; i < nr; i++)
+			{
+			  octave_value t2;
+			  bool dummy;
+
+			  // recurse to read cell elements
+			  std::string nm = read_ascii_data (is, std::string (),
+							    dummy, t2, count);
+
+			  if (nm == CELL_ELT_TAG)
+			    {
+			      if (is)
+				tmp.elem (i, j) = t2;
+			    }
+			  else
+			    {
+			      error ("load: cell array element had unexpected name");
+			      success = false;
+			      goto cell_read_error;
+			    }
+			}
+		    }
+	      
+		cell_read_error:
+
+		  if (is)
+		    matrix = tmp;
+		  else
+		    {
+		      error ("load: failed to load cell element");
+		      success = false;
+		    }
+		}
+	      else if (nr == 0 || nc == 0)
+		matrix = Cell (nr, nc);
+	      else
+		panic_impossible ();
+	    }
+	  else
+	    {
+	      error ("load: failed to extract number of rows and columns for cell array");
 	      success = false;
 	    }
 	}
       else
-	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
-	}
-      
+	panic_impossible ();
     }
   else
     {
-      int nr = 0;
-      int nc = 0;
-
-      // re-read the same line again
-      is.clear ();
-      is.seekg (pos);
-
-      if (extract_keyword (is, "rows", nr) && nr >= 0
-	  && extract_keyword (is, "columns", nc) && nc >= 0)
-	{
-	  if (nr > 0 && nc > 0)
-	    {
-	      Cell tmp (nr, nc);
-
-	      for (int j = 0; j < nc; j++)
-		{
-		  for (int i = 0; i < nr; i++)
-		    {
-		      octave_value t2;
-		      bool dummy;
-
-		      // recurse to read cell elements
-		      std::string nm = read_ascii_data (is, std::string (), 
-							dummy, t2, count);
-
-		      if (nm == CELL_ELT_TAG)
-			{
-			  if (is)
-			    tmp.elem (i, j) = t2;
-			}
-		      else
-			{
-			  error ("load: cell array element had unexpected name");
-			  success = false;
-			  goto cell_read_error;
-			}
-		    }
-		}
-	      
-	    cell_read_error:
-
-	      if (is) 
-		matrix = tmp;
-	      else
-		{
-		  error ("load: failed to load cell element");
-		  success = false;
-		}
-	    }
-	  else if (nr == 0 || nc == 0)
-	    matrix = Cell (nr, nc);
-	  else
-	    panic_impossible ();
-	}
-      else {
-	error ("load: failed to extract number of rows and columns for cell array");
-	success = false;
-      }
+      error ("load: failed to extract number of rows and columns");
+      success = false;
     }
 
   return success;
 }
 
 bool 
 octave_cell::save_binary (std::ostream& os, bool& save_as_floats)
 {
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -271,79 +271,92 @@ octave_complex_matrix::save_ascii (std::
     }
 
   return true;
 }
 
 bool 
 octave_complex_matrix::load_ascii (std::istream& is)
 {
-  int mdims = 0;
   bool success = true;
-  std::streampos pos = is.tellg ();
+
+  string_vector keywords(2);
+
+  keywords[0] = "ndims";
+  keywords[1] = "rows";
 
-  if (extract_keyword (is, "ndims", mdims, true))
+  std::string kw;
+  int val = 0;
+
+  if (extract_keyword (is, keywords, kw, val, true))
     {
-      if (mdims >= 0)
+      if (kw == "ndims")
 	{
-	  dim_vector dv;
-	  dv.resize (mdims);
+	  int mdims = val;
 
-	  for (int i = 0; i < mdims; i++)
-	    is >> dv(i);
-
-	  ComplexNDArray tmp(dv);
-	  is >> tmp;
-
-	  if (!is) 
+	  if (mdims >= 0)
 	    {
-	      error ("load: failed to load matrix constant");
-	      success = false;
-	    }
-	  matrix = tmp;
-	}
-      else
-	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
-	}
-    }
-  else
-    {
-      int nr = 0;
-      int nc = 0;
+	      dim_vector dv;
+	      dv.resize (mdims);
 
-      // re-read the same line again
-      is.clear ();
-      is.seekg (pos);
+	      for (int i = 0; i < mdims; i++)
+		is >> dv(i);
 
-      if (extract_keyword (is, "rows", nr) && nr >= 0
-	  && extract_keyword (is, "columns", nc) && nc >= 0)
-	{
-	  if (nr > 0 && nc > 0)
-	    {
-	      ComplexMatrix tmp (nr, nc);
+	      ComplexNDArray tmp(dv);
 	      is >> tmp;
+
 	      if (!is) 
 		{
 		  error ("load: failed to load matrix constant");
 		  success = false;
 		}
 	      matrix = tmp;
 	    }
-	  else if (nr == 0 || nc == 0)
-	    matrix = ComplexMatrix (nr, nc);
 	  else
-	    panic_impossible ();
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
-      else 
+      else if (kw == "rows")
 	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
+	  int nr = val;
+	  int nc = 0;
+
+	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
+	    {
+	      if (nr > 0 && nc > 0)
+		{
+		  ComplexMatrix tmp (nr, nc);
+		  is >> tmp;
+		  if (!is)
+		    {
+		      error ("load: failed to load matrix constant");
+		      success = false;
+		    }
+		  matrix = tmp;
+		}
+	      else if (nr == 0 || nc == 0)
+		matrix = ComplexMatrix (nr, nc);
+	      else
+		panic_impossible ();
+	    }
+	  else
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
+      else
+	panic_impossible ();
+    }
+  else
+    {
+      error ("load: failed to extract number of rows and columns");
+      success = false;
     }
 
   return success;
 }
 
 bool 
 octave_complex_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -324,80 +324,93 @@ octave_matrix::save_ascii (std::ostream&
     }
 
   return true;
 }
 
 bool 
 octave_matrix::load_ascii (std::istream& is)
 {
-  int mdims = 0;
   bool success = true;
-  std::streampos pos = is.tellg ();
+
+  string_vector keywords(2);
+
+  keywords[0] = "ndims";
+  keywords[1] = "rows";
 
-  if (extract_keyword (is, "ndims", mdims, true))
+  std::string kw;
+  int val = 0;
+
+  if (extract_keyword (is, keywords, kw, val, true))
     {
-      if (mdims >= 0)
+      if (kw == "ndims")
 	{
-	  dim_vector dv;
-	  dv.resize (mdims);
+	  int mdims = val;
 
-	  for (int i = 0; i < mdims; i++)
-	    is >> dv(i);
-
-	  NDArray tmp(dv);
-	  is >> tmp;
-
-	  if (!is) 
+	  if (mdims >= 0)
 	    {
-	      error ("load: failed to load matrix constant");
-	      success = false;
-	    }
-	  matrix = tmp;
-	}
-      else
-	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
-	}
-    }
-  else
-    {
-      int nr = 0;
-      int nc = 0;
+	      dim_vector dv;
+	      dv.resize (mdims);
 
-      // re-read the same line again
-      is.clear ();
-      is.seekg (pos);
+	      for (int i = 0; i < mdims; i++)
+		is >> dv(i);
 
-      if (extract_keyword (is, "rows", nr) && nr >= 0
-	  && extract_keyword (is, "columns", nc) && nc >= 0)
-	{
-	  if (nr > 0 && nc > 0)
-	    {
-	      Matrix tmp (nr, nc);
+	      NDArray tmp(dv);
 	      is >> tmp;
-	      if (is)
-		matrix = tmp;
-	      else
+
+	      if (!is) 
 		{
 		  error ("load: failed to load matrix constant");
 		  success = false;
 		}
+	      matrix = tmp;
 	    }
-	  else if (nr == 0 || nc == 0)
-	    matrix = Matrix (nr, nc);
 	  else
-	    panic_impossible ();
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
-      else 
+      else if (kw == "rows")
 	{
-	  error ("load: failed to extract number of rows and columns");
-	  success = false;
+	  int nr = val;
+	  int nc = 0;
+
+	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
+	    {
+	      if (nr > 0 && nc > 0)
+		{
+		  Matrix tmp (nr, nc);
+		  is >> tmp;
+		  if (is)
+		    matrix = tmp;
+		  else
+		    {
+		      error ("load: failed to load matrix constant");
+		      success = false;
+		    }
+		}
+	      else if (nr == 0 || nc == 0)
+		matrix = Matrix (nr, nc);
+	      else
+		panic_impossible ();
+	    }
+	  else 
+	    {
+	      error ("load: failed to extract number of rows and columns");
+	      success = false;
+	    }
 	}
+      else
+	panic_impossible ();
+    }
+  else
+    {
+      error ("load: failed to extract number of rows and columns");
+      success = false;
     }
 
   return success;
 }
 
 bool 
 octave_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -289,61 +289,65 @@ octave_char_matrix_str::save_ascii (std:
     }
 
   return true;
 }
 
 bool 
 octave_char_matrix_str::load_ascii (std::istream& is)
 {
-  int mdims = 0;
   bool success = true;
-  std::streampos pos = is.tellg ();
+
+  string_vector keywords(3);
+
+  keywords[0] = "ndims";
+  keywords[1] = "elements";
+  keywords[2] = "length";
+
+  std::string kw;
+  int val = 0;
 
-  if (extract_keyword (is, "ndims", mdims, true))
+  if (extract_keyword (is, keywords, kw, val, true))
     {
-      if (mdims >= 0)
+      if (kw == "ndims")
 	{
-	  dim_vector dv;
-	  dv.resize (mdims);
+	  int mdims = val;
+
+	  if (mdims >= 0)
+	    {
+	      dim_vector dv;
+	      dv.resize (mdims);
 
-	  for (int i = 0; i < mdims; i++)
-	    is >> dv(i);
+	      for (int i = 0; i < mdims; i++)
+		is >> dv(i);
 
-	  charNDArray tmp(dv);
-	  char *ftmp = tmp.fortran_vec ();
+	      charNDArray tmp(dv);
+	      char *ftmp = tmp.fortran_vec ();
+
+	      // Skip the return line
+	      if (! is.read (ftmp, 1))
+		return false;
 
-	  // Skip the return line
-	  if (! is.read (ftmp, 1))
-	    return false;
-
-	  if (! is.read (ftmp, dv.numel ()) || !is)
+	      if (! is.read (ftmp, dv.numel ()) || !is)
+		{
+		  error ("load: failed to load string constant");
+		  success = false;
+		}
+	      else
+		matrix = tmp;
+	    }
+	  else
 	    {
-	      error ("load: failed to load string constant");
+	      error ("load: failed to extract matrix size");
 	      success = false;
 	    }
-	  else
-	    matrix = tmp;
 	}
-      else
+      else if (kw == "elements")
 	{
-	  error ("load: failed to extract matrix size");
-	  success = false;
-	}
-    }
-  else
-    {
-      int elements;
-
-      // re-read the same line again
-      is.clear ();
-      is.seekg (pos);
-
-      if (extract_keyword (is, "elements", elements, true))
-	{
+	  int elements = val;
 
 	  if (elements >= 0)
 	    {
 	      // XXX FIXME XXX -- need to be able to get max length
 	      // before doing anything.
 
 	      charMatrix chm (elements, 0);
 	      int max_len = 0;
@@ -377,33 +381,28 @@ octave_char_matrix_str::load_ascii (std:
 		      error ("load: failed to extract string length for element %d", 
 			     i+1);
 		      success = false;
 		    }
 		}
 	  
 	      if (! error_state)
 		matrix = chm;
-	  
 	    }
 	  else
 	    {
 	      error ("load: failed to extract number of string elements");
 	      success = false;
 	    }
 	}
-      else
+      else if (kw == "length")
 	{
-	  // re-read the same line again
-	  is.clear ();
-	  is.seekg (pos);
-
-	  int len;
+	  int len = val;
       
-	  if (extract_keyword (is, "length", len) && len >= 0)
+	  if (len >= 0)
 	    {
 	      // This is cruft for backward compatiability, 
 	      // but relatively harmless.
 
 	      OCTAVE_LOCAL_BUFFER (char, tmp, len+1);
 
 	      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
 		{
@@ -415,16 +414,23 @@ octave_char_matrix_str::load_ascii (std:
 		  
 		  if (is)
 		    matrix = charMatrix (tmp);
 		  else
 		    error ("load: failed to load string constant");
 		}
 	    }
 	}
+      else
+	panic_impossible ();
+    }
+  else
+    {
+      error ("load: failed to extract number of rows and columns");
+      success = false;
     }
 
   return success;
 }
 
 bool 
 octave_char_matrix_str::save_binary (std::ostream& os,
 				     bool& /* save_as_floats */)
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -105,16 +105,32 @@ tree_index_expression::~tree_index_expre
   while (! args.empty ())
     {
       std::list<tree_argument_list *>::iterator p = args.begin ();
       delete *p;
       args.erase (p);
     }
 }
 
+bool
+tree_index_expression::has_magic_end (void) const
+{
+  for (std::list<tree_argument_list *>::const_iterator p = args.begin ();
+       p != args.end ();
+       p++)
+    {
+      tree_argument_list *elt = *p;
+
+      if (elt && elt->has_magic_end ())
+	return true;
+    }
+  
+  return false;
+}
+
 // This is useful for printing the name of the variable in an indexed
 // assignment.
 
 std::string
 tree_index_expression::name (void) const
 {
   return expr->name ();
 }
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -55,17 +55,17 @@ public:
   tree_index_expression (tree_expression *e, const std::string& n,
 			 int l = -1, int c = -1);
 
   tree_index_expression (tree_expression *e, tree_expression* df,
 			 int l = -1, int c = -1);
 
   ~tree_index_expression (void);
 
-  bool has_magic_end (void) const { return false; }
+  bool has_magic_end (void) const;
 
   void append (tree_argument_list *lst = 0, char t = '(');
 
   void append (const std::string& n);
 
   void append (tree_expression *df);
 
   bool is_index_expression (void) const { return true; }
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.63"
+#define OCTAVE_VERSION "2.1.64"
 
 #define OCTAVE_API_VERSION "api-v12"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 2004 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" OCTAVE_CANONICAL_HOST_TYPE ")"
