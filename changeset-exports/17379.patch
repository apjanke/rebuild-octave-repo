# HG changeset patch
# User Rik <rik@octave.org>
# Date 1378423788 25200
#      Thu Sep 05 16:29:48 2013 -0700
# Node ID b91f29f021a3d92a3e65337cc1141b2833f981a3
# Parent  813523c2b5813d4390d5d97754bad62c360f3ec2
str2double.cc: miscellaneous simplifications to code.

* libinterp/corefcn/str2double.cc: return double from single_num() routine.
Expand FIXME comment about commas in strings.  Remove repeated %!assert test.

diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -37,19 +37,21 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "utils.h"
 
 static inline bool
 is_imag_unit (int c)
 { return c == 'i' || c == 'j'; }
 
-static std::istringstream&
-single_num (std::istringstream& is, double& num)
+static double
+single_num (std::istringstream& is)
 {
+  double num;
+
   char c = is.peek ();
 
   // Skip spaces.
   while (isspace (c))
     {
       is.get ();
       c = is.peek ();
     }
@@ -87,17 +89,17 @@ single_num (std::istringstream& is, doub
             }
           else
             is.setstate (std::ios::failbit); // indicate that read has failed.
         }
     }
   else
     is >> num;
 
-  return is;
+  return num;
 }
 
 static std::istringstream&
 extract_num (std::istringstream& is, double& num, bool& imag, bool& have_sign)
 {
   have_sign = imag = false;
 
   char c = is.peek ();
@@ -109,20 +111,20 @@ extract_num (std::istringstream& is, dou
       c = is.peek ();
     }
 
   bool negative = false;
 
   // Accept leading sign.
   if (c == '+' || c == '-')
     {
+      have_sign = true;
       negative = c == '-';
       is.get ();
       c = is.peek ();
-      have_sign = true;
     }
 
   // Skip spaces after sign.
   while (isspace (c))
     {
       is.get ();
       c = is.peek ();
     }
@@ -133,58 +135,56 @@ extract_num (std::istringstream& is, dou
       // possible infinity.
       is.get ();
       c = is.peek ();
 
       if (is.eof ())
         {
           // just 'i' and string is finished.  Return immediately.
           imag = true;
-          num = 1.0;
-          if (negative)
-            num = -num;
+          num = negative ? -1.0 : 1.0;
           return is;
         }
       else
-        { 
+        {
           if (std::tolower (c) != 'n')
             imag = true;
           is.unget ();
         }
     }
   else if (c == 'j')
     imag = true;
-    
+
   // It's i*num or just i
   if (imag)
     {
       is.get ();
       c = is.peek ();
       // Skip spaces after imaginary unit.
       while (isspace (c))
         {
           is.get ();
           c = is.peek ();
         }
 
       if (c == '*')
         {
           // Multiplier follows, we extract it as a number.
           is.get ();
-          single_num (is, num);
+          num = single_num (is);
           if (is.good ())
             c = is.peek ();
         }
       else
         num = 1.0;
     }
   else
     {
       // It's num, num*i, or numi.
-      single_num (is, num);
+      num = single_num (is);
       if (is.good ())
         {
           c = is.peek ();
 
           // Skip spaces after number.
           while (isspace (c))
             {
               is.get ();
@@ -260,20 +260,19 @@ set_component (Complex& c, double num, b
 
 static Complex
 str2double1 (const std::string& str_arg)
 {
   Complex val (0.0, 0.0);
 
   std::string str = str_arg;
 
-  // FIXME -- removing all commas does too much...
-  std::string::iterator se = str.end ();
-  se = std::remove (str.begin (), se, ',');
-  str.erase (se, str.end ());
+  // FIXME: removing all commas doesn't allow actual parsing.
+  //        Example: "1,23.45" is wrong, but passes Octave.
+  str.erase (std::remove (str.begin (), str.end(), ','), str.end ());
   std::istringstream is (str);
 
   double num;
   bool i1, i2, s1, s2;
 
   if (is.eof ())
     val = octave_NaN;
   else if (! extract_num (is, num, i1, s1))
@@ -372,17 +371,16 @@ risk of using @code{eval} on unknown dat
 
   return retval;
 }
 
 /*
 %!assert (str2double ("1"), 1)
 %!assert (str2double ("-.1e-5"), -1e-6)
 %!assert (str2double (char ("1", "2 3", "4i")), [1; NaN; 4i])
-%!assert (str2double ("-.1e-5"), -1e-6)
 %!assert (str2double ("1,222.5"), 1222.5)
 %!assert (str2double ("i"), i)
 %!assert (str2double ("2j"), 2i)
 %!assert (str2double ("2 + j"), 2+j)
 %!assert (str2double ("i*2 + 3"), 3+2i)
 %!assert (str2double (".5*i + 3.5"), 3.5+0.5i)
 %!assert (str2double ("1e-3 + i*.25"), 1e-3 + 0.25i)
 %!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -5])
