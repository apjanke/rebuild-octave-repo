# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1285530938 25200
#      Sun Sep 26 12:55:38 2010 -0700
# Node ID fa56fd98c0c5f104d0f6264b9527c45d13f2bcf9
# Parent  cb62c7401ea2b568a3062e842b9d6e6c268c562c
Remove requirement for PCRE in Octave.  (Bug #31025)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-26  Rik <octave@nomad.inbox5.com>
+
+	* testfun/runtests.m (has_tests): Recode to remove requirement for PCRE.
+	Bug #31025.
+
 2010-09-25  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Recongize gs devices {eps/pdf/ps}write.
 
 2010-09-23  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/bug_report.m: Display information about how to
 	submit bug reports instead of creating and mailing a bug report.
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -12,17 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} rundtests (@var{directory})
+## @deftypefn {Function File} {} runtests (@var{directory})
+## Execute built-in tests for all function files in the specified directory.
 ## @end deftypefn
 
 ## Author: jwe
 
 function runtests (directory)
 
   if (nargin == 0)
     dirs = strsplit (path (), pathsep ());
@@ -64,33 +65,29 @@ function run_all_tests (directory)
         print_pass_fail (n, p)
         fflush (stdout);
       else
         no_tests{end+1} = f;
       endif
     endif
   endfor
   if (! isempty (no_tests))
-    printf ("\nThe following files in have no tests:\n\n", directory);
+    printf ("\nThe following files in %s have no tests:\n\n", directory);
     printf ("%s", list_in_columns (no_tests));
   endif
 endfunction
 
 function retval = has_tests (f)
-  retval = false;
   fid = fopen (f);
   if (fid >= 0)
-    while (! feof (fid))
-      ln = fgetl (fid);
-      if (! isempty (regexp (ln, "%!(assert|error|test)", "lineanchors")))
-        retval = true;
-        break;
-      endif
-    endwhile
+    str = fread (fid, "*char")';
     fclose (fid);
+    ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
+    ## Equivalent to regexp ('^PTN','lineanchors')
+    retval = ! isempty (regexp (str, '[\r\n]\s*%!(test|assert|error|warning)', "once"));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
 function print_pass_fail (n, p)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-26  Rik <octave@nomad.inbox5.com>
+
+	* fntests.m (has_tests, has_functions): Recode to remove requirement 
+	for PCRE.
+
 2010-09-24  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m: Rephrase output for clarity.
 
 2010-08-17  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m: Add extra newline for more readable output.
 
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -63,59 +63,59 @@ function print_pass_fail (n, p)
     nfail = n - p;
     if (nfail > 0)
       printf (" FAIL %d", nfail);
     endif
   endif
   puts ("\n");
 endfunction
 
-function y = hasfunctions (f)
+function retval = has_functions (f)
   n = length (f);
   if (n > 3 && strcmp (f((end-2):end), ".cc"))
     fid = fopen (f);
-    if (fid < 0)
-      error ("fopen failed: %s", f);
-    else
+    if (fid >= 0)
       str = fread (fid, "*char")';
       fclose (fid);
-      y = ! isempty (regexp (str,'^(DEFUN|DEFUN_DLD)\b', "lineanchors"));
+      retval = ! isempty (regexp (str,'[\r\n](DEFUN|DEFUN_DLD)\b', "once"));
+    else
+      error ("fopen failed: %s", f);
     endif
   elseif (n > 2 && strcmp (f((end-1):end), ".m"))
-    y = true;
+    retval = true;
   else
-    y = false;
+    retval = false;
   endif
 endfunction
 
-## FIXME -- should we only try match the keyword at the start of a line?
-function y = hastests (f)
+function retval = has_tests (f)
   fid = fopen (f);
-  if (fid < 0)
-    error ("fopen failed: %s", f);
-  else
+  if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
-    y = ! isempty (regexp (str, "^[ \t]*%!(test|assert|error|warning)",
-                           "lineanchors"));
+    ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
+    ## Equivalent to regexp ('^PTN','lineanchors')
+    retval = ! isempty (regexp (str, '[\r\n]\s*%!(test|assert|error|warning)', "once"));
+  else
+    error ("fopen failed: %s", f);
   endif
 endfunction
 
 function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
   lst = dir (d);
   dp = dn = dxf = dsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (length (nm) > 5 && strcmp (nm(1:5), "test_")
 	&& strcmp (nm((end-1):end), ".m"))
       p = n = xf = sk = 0;
       ffnm = fullfile (d, nm);
-      if (hastests (ffnm))
+      if (has_tests (ffnm))
 	print_test_file_name (nm);
 	[p, n, xf, sk] = test (nm(1:(end-2)), "quiet", fid);
 	print_pass_fail (n, p);
 	files_with_tests(end+1) = ffnm;
       else
 	files_with_no_tests(end+1) = ffnm;
       endif
       dp += p;
@@ -150,28 +150,28 @@ function [dp, dn, dxf, dsk] = run_test_s
     if (nm(1) == '.')
       continue
     endif
     f = fullfile (d, nm);
     if ((length (nm) > 2 && strcmp (nm((end-1):end), ".m")) || 
         (length (nm) > 3 && strcmp (nm((end-2):end), ".cc")))
       p = n = xf = 0;
       ## Only run if it contains %!test, %!assert %!error or %!warning
-      if (hastests (f))
+      if (has_tests (f))
 	tmp = strrep (f, [topsrcdir, "/"], "");
 	tmp = strrep (tmp, [topbuilddir, "/"], "../");
 	print_test_file_name (tmp);
 	[p, n, xf, sk] = test (f, "quiet", fid);
 	print_pass_fail (n, p);
 	dp += p;
 	dn += n;
 	dxf += xf;
 	dsk += sk;
 	files_with_tests(end+1) = f;
-      elseif (hasfunctions (f))
+      elseif (has_functions (f))
 	## To reduce the list length, only mark .cc files that contain
 	## DEFUN definitions.
 	files_with_no_tests(end+1) = f;
       endif
     endif
   endfor 
   ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
@@ -191,17 +191,17 @@ function ret = prog_output_assert (str)
     ret = strcmp (_assert_printf, str);
   endif
   _assert_printf = "";
 endfunction
 
 function n = num_elts_matching_pattern (lst, pat)
   n = 0;
   for i = 1:length (lst)
-    if (! isempty (regexp (lst{i}, pat)))
+    if (! isempty (regexp (lst{i}, pat, "once")))
       n++;
     endif
   endfor
 endfunction
 
 function report_files_with_no_tests (with, without, typ)
   pat = cstrcat ("\\", typ, "$");
   n_with = num_elts_matching_pattern (with, pat);
