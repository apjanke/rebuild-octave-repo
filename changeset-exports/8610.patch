# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233116257 18000
#      Tue Jan 27 23:17:37 2009 -0500
# Node ID 85c9906abfd15993a50398ca38ad93eb88dd35f9
# Parent  fcf762ba66cf82be71f94090f05e5a197618ee69
use endif and endfor instead of end

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2009-01-27  John W. Eaton  <jwe@octave.org>
 
+	* general/arrayfun.m, image/imwrite.m, plot/axis.m, plot/clf.m,
+	plot/ribbon.m, plot/gnuplot_drawnow.m, plot/cla.m, set/unique.m:
+	Use endif or endfor instead of "end".
+
 	* path/savepath.m: Call command_line_path instead of commandlinepath.
 
 2009-01-27  Jason Riedy  <jason@acm.org>
 
 	* miscellaneous/orderfields.m: Really fix the indexing for struct
 	arrays.
 
 2009-01-27  Carlo de Falco  <kingcrimson@tsicali.it>
diff --git a/scripts/general/arrayfun.m b/scripts/general/arrayfun.m
--- a/scripts/general/arrayfun.m
+++ b/scripts/general/arrayfun.m
@@ -163,17 +163,17 @@ function varargout = arrayfun (func, var
     endif
   endwhile
 
   varargout = cell (max ([nargout, 1]), 1);
   if (idx >= len)
     [varargout{:}] = cellfun (func, cfarg{:});
   else
     [varargout{:}] = cellfun (func, cfarg{:}, varargin{idx:len});
-  end
+  endif
 endfunction
 
 %% Test function to check the "Errorhandler" option
 %!function [z] = arrayfunerror (S, varargin)
 %!      z = S;
 %!    endfunction
 %% First input argument can be a string, an inline function, a
 %% function_handle or an anonymous function
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -65,17 +65,17 @@ function imwrite (varargin)
       endif
     else
       print_usage ();
     endif
     if (offset < nargin)
       has_param_list = 1;
       for ii = offset:2:(nargin - 1)
         options.(varargin{ii}) = varargin{ii + 1};
-      end
+      endfor
     else
       has_param_list = 0;
     endif
   else
     print_usage ();
   endif
 
   filename = tilde_expand (filename);
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -284,18 +284,18 @@ function lims = __get_tight_lims__ (ca, 
     lims = get (ca, strcat (ax, "lim"));
   else
     data = get (kids, strcat (ax, "data"));
     if (iscell (data))
       lims(1) = min (cellfun (@min, data)(:));
       lims(2) = min (cellfun (@max, data)(:));
     else
       lims = [min(data(:)), max(data(:))];
-    end
-  end
+    endif
+  endif
 
 
 endfunction
 
 function __do_tight_option__ (ca)
 
   set (ca,
        "xlim", __get_tight_lims__ (ca, "x"),
diff --git a/scripts/plot/cla.m b/scripts/plot/cla.m
--- a/scripts/plot/cla.m
+++ b/scripts/plot/cla.m
@@ -57,24 +57,24 @@ function cla (varargin)
       do_reset = true;
     else
       print_usage ();
     endif
   else
     hax = gca;
     oldhax = hax;
     do_reset = false;
-  end
+  endif
 
   hc = get (hax, "children");
 
   if (! do_reset && ! isempty (hc))
     hc = findobj (hc, "flat", "visible", "on");
     hc = setdiff (hc, hax);
-  end
+  endif
 
   if (! isempty (hc))
     ## Delete the children of the axis.
     delete (hc);
   endif
 
   ## FIXME: The defaults should be "reset()" below, but so far there is
   ## no method to determine the defaults, much less return an object's
diff --git a/scripts/plot/clf.m b/scripts/plot/clf.m
--- a/scripts/plot/clf.m
+++ b/scripts/plot/clf.m
@@ -55,17 +55,17 @@ function clf (varargin)
       do_reset = true;
     else
       print_usage ();
     endif
   else
     hfig = gcf;
     oldfig = hfig;
     do_reset = false;
-  end
+  endif
 
   if (do_reset)
     ## Select all the children, including the one with hidden handles.
     hc = allchild (hfig);
     reset (hfig)
   else
     ## Select only the chilren with visible handles.
     hc = get (hfig, "children");
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -118,22 +118,22 @@ function [ enhanced ] = gnuplot_set_term
       ## Generate gnuoplot title string for backend plot windows
       if (isbackend (term))
         fig.numbertitle = get (h, "numbertitle");
         fig.name = get (h, "name");
         if (strcmpi (get (h, "numbertitle"), "on"))
           title_str = sprintf ("Figure %d", h);
         else
           title_str = "";
-        end
+        endif
         if (! isempty (fig.name) && ! isempty (title_str))
           title_str = sprintf ("%s: %s", title_str, fig.name);
         elseif (! isempty (fig.name) && isempty (title_str))
           title_str = fig.name;
-        end
+        endif
         if (! isempty (title_str))
           title_str = sprintf ("title \"%s\"", title_str);
         endif
       else
         title_str = "";
       endif
 
       if (isempty (strfind (opts_str, " size ")))
@@ -186,35 +186,35 @@ function [ enhanced ] = gnuplot_set_term
       size_str = "";
     endif
 
     ## Set the gnuplot terminal (type, enhanced?, title, & size)
     if (! isempty (term))
       term_str = sprintf ("set terminal %s", term);
       if (! isempty (enh_str))
         term_str = sprintf ("%s %s", term_str, enh_str);
-      end
+      endif
       if (! isempty (title_str))
         term_str = sprintf ("%s %s", term_str, title_str);
-      end
+      endif
       if (! isempty (size_str))
         ## size_str goes last to permit specification of canvas size
         ## for terminals cdr/corel
         term_str = sprintf ("%s %s", term_str, size_str);
-      end
+      endif
       if (nargin > 2 && ischar (opts_str))
         ## Options must go last
         term_str = sprintf ("%s %s", term_str, opts_str);
       endif
       fprintf (plot_stream, sprintf ("%s\n", term_str));
     else
       ## gnuplot will pick up the GNUTERM environment variable itself
       ## so no need to set the terminal type if not also setting the
       ## figure title, enhanced mode, or position.
-    end
+    endif
   endif
 
   if (nargin == 4)
     if (! isempty (file))
       fprintf (plot_stream, "set output \"%s\";\n", file);
     endif
   endif
 endfunction
diff --git a/scripts/plot/ribbon.m b/scripts/plot/ribbon.m
--- a/scripts/plot/ribbon.m
+++ b/scripts/plot/ribbon.m
@@ -41,17 +41,17 @@ function h = ribbon (x, y, width)
     endif
     [nr, nc] = size (y);
     x = repmat ((1:nr)', 1, nc);
     width = 0.75;
   elseif (nargin == 2)
     width = 0.75;
   elseif (nargin != 3)
     print_usage ();
-  end
+  endif
 
   if (isvector (x) && isvector (y))
     if (length (x) != length (y))
       error ("ribbon: in case of vectors, X and Y must have same length")
     else
       [x, y] = meshgrid (x, y);
     endif
   else
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -109,17 +109,17 @@ function [y, i, j] = unique (x, varargin
   endif
 
   if (nargout >= 3)
     j = i;
     if (dim == 1)
       j(i) = cumsum ([1; !match]);
     else
       j(i) = cumsum ([1, !match]);
-    end
+    endif
   endif
 
   if (optfirst)
     i(idx+1) = [];
   else
     i(idx) = [];
   endif
 
