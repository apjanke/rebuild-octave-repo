# HG changeset patch
# User Michael C. Grant <mcg@cvxr.com>
# Date 1388965398 21600
#      Sun Jan 05 17:43:18 2014 -0600
# Branch gui-release
# Node ID 4d90e104bf357f9e8310cbb0242db8c94dab4a6f
# Parent  6ef8b920a7d6a77b590e3b3a8c80b9e138b19dd4
Allow jit-typeinfo.h to compile with clang on OS X (bug #41114)

* jit-typeinfo.h, jit-typeinfo.cc
(jit_operation::signature_cmp::operator()): Now const.

diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -911,17 +911,17 @@ jit_operation::do_generate (const signat
 jit_function *
 jit_operation::generate (const signature_vec&) const
 {
   return 0;
 }
 
 bool
 jit_operation::signature_cmp
-::operator() (const signature_vec *lhs, const signature_vec *rhs)
+::operator() (const signature_vec *lhs, const signature_vec *rhs) const
 {
   const signature_vec& l = *lhs;
   const signature_vec& r = *rhs;
 
   if (l.size () < r.size ())
     return true;
   else if (l.size () > r.size ())
     return false;
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -367,17 +367,17 @@ protected:
   virtual jit_function *generate (const signature_vec& types) const;
 private:
   Array<octave_idx_type> to_idx (const signature_vec& types) const;
 
   const jit_function& do_generate (const signature_vec& types) const;
 
   struct signature_cmp
   {
-    bool operator() (const signature_vec *lhs, const signature_vec *rhs);
+    bool operator() (const signature_vec *lhs, const signature_vec *rhs) const;
   };
 
   typedef std::map<const signature_vec *, jit_function *, signature_cmp>
   generated_map;
 
   mutable generated_map generated;
 
   std::vector<Array<jit_function> > overloads;
