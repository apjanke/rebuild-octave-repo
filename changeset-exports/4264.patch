# HG changeset patch
# User jwe
# Date 1041571834 0
#      Fri Jan 03 05:30:34 2003 +0000
# Node ID 4e2d2516da227824daea650d71b70f5c657d38ef
# Parent  34b8cd8e6ef5505557aa6f835db40e745a45aea9
[project @ 2003-01-03 05:30:34 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Fail on all gcc 1.x and 2.x versions.
+
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (OCTAVE_LOCAL_BUFFER): New macro.
 
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkoctfile.in: Include $LIBOCTINTERP in the stand alone link command.
 	Define LIBOCTAVE, LIBOCTINTERP, LIBCRUFT, LIBREADLINE using -lLIB.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.401 $)
+AC_REVISION($Revision: 1.402 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -175,21 +175,18 @@ gxx_version=`$CXX -v 2>&1 | grep "^.*g..
 
 ### Auto instantiate all templates, other than those that are explicitly
 ### instantiated in Octave. Octave currently instantiates all needed
 ### templates for GCC-2.8.x and EGCS-1.1.x, but not for newer GNU releases
 ### nor for other supported compilers.
 
 cxx_auto_instantiate_templates=yes
 case "$gxx_version" in
-  1.* | 2.[[0123456]].* | 2.7.[01]*)
-    AC_MSG_ERROR([g++ version $gxx_version will not work to compile Octave])
-  ;;
-  2.8* | 2.9[[1-6]]*)
-    cxx_auto_instantiate_templates=no
+  1.* | 2.[[0123456789]].*)
+    AC_MSG_ERROR([g++ version $gxx_version will probably fail to compile Octave])
   ;;
 esac
 
 CXX_VERSION=
 if test -n "$gxx_version"; then
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* miscellaneous/fileparts.m: New file.
+
+	* io/beep.m: New file.
+
 	* plot/__pltopt1__.m: Call undo_string_escapes for title part of
 	format only.
 
 2003-01-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* strings/strcmp.m: Handle cell arrays of strings.
 
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/scripts/miscellaneous/fileparts.m b/scripts/miscellaneous/fileparts.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/fileparts.m
@@ -0,0 +1,43 @@
+## Copyright (C) 2003 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Built-in Function} {[@var{dir}, @var{name}, @var{ext}, @var{ver}]} fnmatch (@var{filename})
+## Return the directory, name, extension, and version components of
+## @var{filename}.
+## @end deftypefn
+
+function [directory, name, extension, version] = fileparts (filename)
+
+  if (nargin == 1)
+    if (isstr (filename))
+      ds = rindex (filename, filesep);
+      es = rindex (filename, ".");
+      directory = filename(1:ds-1);
+      name = filename(ds+1:es-1);
+      extension = filename(es+1:length (filename));
+      version = "";
+    else
+      error ("filesep: expecting filename argument to be a string");
+    endif
+  else
+    usage ("filesep (filename)");
+  endif
+
+endfunction
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -23,16 +23,18 @@
 ## The argument may be either @code{"on"} or @code{"off"}.  If it is
 ## omitted, @code{"on"} is assumed.
 ## @end deftypefn
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
+## PKG_ADD: mark_as_command grid
+
 function grid (x)
 
   usage_msg = "grid (\"on\" | \"off\")";
 
   if (nargin == 0)
     gset grid;
   elseif (nargin == 1)
     if (isstr (x))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dirfns.cc (symbols_of_dirfns): New function.
+	Install new built-in constant filesep.
+
+	* utils.cc (Fisvaranme): New function.
+	(valid_identifier): Identifiers can't start with digits!  Doh!
+
+	* lex.l (Fiskeyword): New function.
+
 	* Makefile.in (INCLUDES): Don't forget base-list.h.
 
 	* symtab.cc (symbol_record::define): If definition already exists,
 	redefine it instead of replacing it.
 
 	* variables.cc (symbol_exist): Don't use reference when handling
 	sr->def ().
 
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -386,16 +386,29 @@ install_defaults (void)
 
   set_default_editor ();
 
   set_local_site_defaults_file ();
 
   set_site_defaults_file ();
 }
 
+DEFUN (rehash, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} rehash ()\n\
+Reinitialize Octave's @code{LOADPATH} directory cache.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  Vload_path_dir_path.rehash ();
+
+  return retval;
+}
+
 static int
 editor (void)
 {
   int status = 0;
 
   std::string s = builtin_string_variable ("EDITOR");
 
   if (s.empty ())
@@ -624,26 +637,13 @@ The name of the top-level Octave install
   DEFCONSTX ("OCTAVE_VERSION", SBV_OCTAVE_VERSION, OCTAVE_VERSION,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} OCTAVE_VERSION\n\
 The version number of Octave, as a string.\n\
 @end defvr");
 
 }
 
-DEFUN (rehash, , ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} rehash ()\n\
-Reinitialize Octave's @code{LOADPATH} directory cache.\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  Vload_path_dir_path.rehash ();
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -633,13 +633,25 @@ fnmatch (\"a*b\", [\"ab\"; \"axyzb\"; \"
 	}
     }
   else
     print_usage ("fnmatch");
 
   return retval;
 }
 
+void
+symbols_of_dirfns (void)
+{
+  DEFCONST (filesep, file_ops::dir_sep_str,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} filesep\n\
+The character used to separate directory names.  The value\n\
+of this variable is system dependent.\n\
+@end defvr");
+
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -49,16 +49,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-sstream.h"
 
 // These would be alphabetical, but y.tab.h must be included before
 // oct-gperf.h and y.tab.h must be included after token.h and the tree
 // class declarations.  We can't include y.tab.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
 // times.
 
+#include "Cell.h"
 #include "comment-list.h"
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "ov.h"
 #include "parse.h"
 #include "pt-all.h"
@@ -2569,16 +2570,54 @@ lexical_feedback::init (void)
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
+DEFCMD (iskeyword, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} iskeyword (@var{name})\n\
+Return true if @var{name} is an Octave keyword.  If @var{name}\n\
+is omitted, return a list of keywords.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("help");
+
+  if (error_state)
+    return retval;
+
+  if (argc == 1)
+    {
+      string_vector lst (TOTAL_KEYWORDS);
+
+      for (int i = 0; i < TOTAL_KEYWORDS; i++)
+	lst[i] = wordlist[i].name;
+
+      retval = Cell (lst.qsort ());
+    }
+  else if (argc == 2)
+    {
+      std::string s = argv[1];
+
+      retval = (octave_kw_lookup (s.c_str (), s.length ()) != 0);
+    }
+  else
+    print_usage ("iskeyword");
+
+  return retval;
+}
+
+
 static void
 maybe_warn_separator_insert (char sep)
 {
   std::string nm = curr_fcn_file_full_name;
 
   if (Vwarn_separator_insert)
     {
       if (nm.empty ())
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -75,32 +75,54 @@ Software Foundation, 59 Temple Place - S
 // considered an error.
 static int Vtreat_neg_dim_as_zero;
 
 // Return TRUE if S is a valid identifier.
 
 bool
 valid_identifier (const char *s)
 {
-  if (! s || ! (isalnum (*s) || *s == '_'))
+  if (! s || ! (isalpha (*s) || *s == '_'))
      return false;
 
   while (*++s != '\0')
     if (! (isalnum (*s) || *s == '_'))
       return false;
 
   return true;
 }
 
 bool
 valid_identifier (const std::string& s)
 {
   return valid_identifier (s.c_str ());
 }
 
+DEFCMD (isvarname, args, ,
+  "@deftypefn {Built-in Function} {} isvarname (@var{name})\n\
+Return true if @var{name} is a valid variable name\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("help");
+
+  if (error_state)
+    return retval;
+
+  if (argc == 2)
+    retval = valid_identifier (argv[1]);
+  else
+    print_usage ("isvarname");
+
+  return retval;
+}
+
 int
 almost_match (const std::string& std, const std::string& s, int min_match_len,
 	      int case_sens)
 {
   int stdlen = std.length ();
   int slen = s.length ();
 
   return (slen <= stdlen
