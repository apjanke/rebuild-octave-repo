# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1505822588 -7200
#      Tue Sep 19 14:03:08 2017 +0200
# Branch stable
# Node ID ae35d50d975673e6a22f79cea912c7edfdd0b1eb
# Parent  8a6747c6db1a012803bd9f0fff1508a0602b6d61
Ensure numeric values are passed for the axes "clim" property (bug #52053).

* imagesc.m, imshow.m, slice.m: Cast values to double before setting "clim".

* caxis.m (__caxis__): Issue an error if requested clim vector is not increasing
 and numeric.  Change misleading argument name from "ax" to arg1.

diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -98,17 +98,17 @@ function h = imagesc (varargin)
       htmp = image (x, y, img, "cdatamapping", "scaled", varargin{chararg:end});
     else
       htmp = image ("cdatamapping", "scaled", varargin{:});
     endif
 
     if (do_new && ! ishold (hax))
       ## use given climits or guess them from the matrix
       if (numel (climits) == 2 && climits(1) <= climits(2))
-        set (hax, "clim", climits);
+        set (hax, "clim", double (climits));
       elseif (! isempty (climits))
         error ("imagesc: CLIMITS must be in form [lo, hi]");
       endif
     endif
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -173,17 +173,17 @@ function h = imshow (im, varargin)
   ## Check for complex images.
   if (iscomplex (im))
     warning ("imshow: only showing real part of complex image");
     im = real (im);
   endif
 
   ## Set default display range if display_range not set yet.
   if (isempty (display_range))
-    display_range = [min(im(:)), max(im(:))];
+    display_range = double ([min(im(:)), max(im(:))]);
   elseif (isna (display_range))
     t = class (im);
     switch (t)
       case {"double", "single", "logical"}
         display_range = [0, 1];
       case {"uint8", "uint16", "int16"}
         display_range = [intmin(t), intmax(t)];
       otherwise
diff --git a/scripts/plot/appearance/caxis.m b/scripts/plot/appearance/caxis.m
--- a/scripts/plot/appearance/caxis.m
+++ b/scripts/plot/appearance/caxis.m
@@ -68,33 +68,33 @@ function limits = caxis (varargin)
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
 endfunction
 
-function limits = __caxis__ (ca, ax, varargin)
+function limits = __caxis__ (ca, arg1, varargin)
 
   if (nargin == 1)
     limits = get (ca, "clim");
-  elseif (ischar (ax))
-    if (strcmpi (ax, "auto"))
+  elseif (ischar (arg1))
+    if (strcmpi (arg1, "auto"))
       set (ca, "climmode", "auto");
-    elseif (strcmpi (ax, "manual"))
+    elseif (strcmpi (arg1, "manual"))
       set (ca, "climmode", "manual");
     endif
-  elseif (isvector (ax))
-    len = length (ax);
-    if (len != 2)
-      error ("caxis: LIMITS must be a 2-element vector");
+  elseif (isvector (arg1))
+    if (numel (arg1) != 2 || ! isnumeric (arg1) || arg1(1) >= arg1(2))
+      error (["caxis: "
+              "LIMITS must be a numeric 2-element vector where LIM1 < LIM2"]);
     endif
 
-    set (ca, "clim", [ax(1), ax(2)]);
+    set (ca, "clim", arg1);
   else
     error ("caxis: expecting no args, a string, or a 2 element vector");
   endif
 
   ## FIXME: Why should it be possible to call __caxis__ recursively?
   if (nargin > 2)
     __caxis__ (ca, varargin{:})';
   endif
diff --git a/scripts/plot/draw/slice.m b/scripts/plot/draw/slice.m
--- a/scripts/plot/draw/slice.m
+++ b/scripts/plot/draw/slice.m
@@ -138,17 +138,17 @@ function h = slice (varargin)
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     sidx = 1;
     minv = min (v(:));
     maxv = max (v(:));
-    set (hax, "clim", [minv, maxv]);
+    set (hax, "clim", double ([minv, maxv]));
 
     if (have_sval)
       ns = length (sx) + length (sy) + length (sz);
       hs = zeros (ns,1);
       [ny, nx, nz] = size (v);
       if (length (sz) > 0)
         for i = 1:length (sz)
           [xi, yi, zi] = meshgrid (squeeze (x(1,:,1)),
