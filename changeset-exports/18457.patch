# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1392311257 18000
#      Thu Feb 13 12:07:37 2014 -0500
# Node ID 3afae1432cd67b5ba3fe8bb0c1852c0dd3a35c7b
# Parent  35803170227e0abb93f8cd39683c2b5eb72c5767
# Parent  9fbea0c395ec88a9a66b6328ef1cd45ff0e3cf27
maint: Periodic merge of gui-release to default.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1146,17 +1146,17 @@ parse_save_options (const string_vector 
         {
           use_zlib  = true;
         }
 #endif
       else if (argv[i] == "-struct")
         {
           retval.append (argv[i]);
         }
-      else if (argv[i][0] == '-')
+      else if (argv[i][0] == '-' && argv[i] != "-")
         {
           error ("save: Unrecognized option '%s'", argv[i].c_str ());
         }
       else
         retval.append (argv[i]);
     }
 
   if (do_double)
diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -77,18 +77,22 @@ function t = __isequal__ (nans_compare_e
       idx++;
       t = all (s_x(idx) == s_v(idx,:));
     endwhile
   endif
 
   ## From here on, compare objects as if they were structures.
   if (isobject (x))
     x = builtin ("struct", x);
-    varargin = cellfun (@(x) builtin ("struct", x), varargin,
-                        "uniformoutput", false);
+    for i = 1:numel (varargin)
+      if (! isobject (varargin{i}))
+        break;
+      endif
+      varargin{i} = builtin ("struct", varargin{i});
+    endfor
   endif
 
   if (t)
     ## Check individual classes.
     if (isstruct (x))
       ## Test the number of fields.
       fn_x = fieldnames (x);
       l_fn_x = length (fn_x);
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -151,18 +151,18 @@ function h = __img__ (hax, do_new, x, y,
     if (isempty (x))
       x = [1, columns(img)];
     endif
 
     if (isempty (y))
       y = [1, rows(img)];
     endif
 
-    xdata = x([1, end]);
-    ydata = y([1, end]);
+    xdata = x([1, end])(:).';  # (:).' is a hack to guarantee row vector
+    ydata = y([1, end])(:).';
 
     if (numel (x) > 2 && numel (y) > 2)
       ## Test data for non-linear spacing which is unsupported
       tol = .01;  # 1% tolerance.  FIXME: this value was chosen without thought.
       dx = diff (x);
       dxmean = (max (x) - min (x)) / (numel (x) - 1);
       dx = abs ((abs (dx) - dxmean) / dxmean);
       dy = diff (y);
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -13,66 +13,69 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n}, "whole")
+## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b})
+## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a})
+## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n})
 ## @deftypefnx {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
 ## @deftypefnx {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
 ## @deftypefnx {Function File} {} freqz (@dots{})
 ## 
 ## Return the complex frequency response @var{h} of the rational IIR filter
 ## whose numerator and denominator coefficients are @var{b} and @var{a},
 ## respectively.  The response is evaluated at @var{n} angular frequencies
 ## between 0 and
 ## @ifnottex
-##  2*pi.
+## 2*pi.
 ## @end ifnottex
 ## @tex
-##  $2\pi$.
+## $2\pi$.
 ## @end tex
 ##
 ## @noindent
 ## The output value @var{w} is a vector of the frequencies.
 ##
 ## If @var{a} is omitted, the denominator is assumed to be 1 (this
 ## corresponds to a simple FIR filter).
 ##
 ## If @var{n} is omitted, a value of 512 is assumed.
-##
 ## For fastest computation, @var{n} should factor into a small number of
 ## small primes.
 ##
 ## If the fourth argument, @qcode{"whole"}, is omitted the response is
 ## evaluated at frequencies between 0 and
 ## @ifnottex
-##  pi.
+## pi.
 ## @end ifnottex
 ## @tex
-##  $\pi$.
+## $\pi$.
 ## @end tex
 ##
 ## @code{freqz (@var{b}, @var{a}, @var{w})}
 ##
 ## Evaluate the response at the specific frequencies in the vector @var{w}.
 ## The values for @var{w} are measured in radians.
 ##
 ## @code{[@dots{}] = freqz (@dots{}, @var{Fs})}
 ##
 ## Return frequencies in Hz instead of radians assuming a sampling rate
 ## @var{Fs}.  If you are evaluating the response at specific frequencies
 ## @var{w}, those frequencies should be requested in Hz rather than radians.
 ##
 ## @code{freqz (@dots{})}
 ##
-## Plot the pass band, stop band and phase response of @var{h} rather
-## than returning them.
+## Plot the magnitude and phase response of @var{h} rather than returning them.
+##
+## @seealso{freqz_plot}
 ## @end deftypefn
 
 ## Author: jwe ???
 
 function [h_r, f_r] = freqz (b, a, n, region, Fs)
 
   if (nargin < 1 || nargin > 5)
     print_usage ();
@@ -104,21 +107,24 @@ function [h_r, f_r] = freqz (b, a, n, re
   if (isempty (region))
     if (isreal (b) && isreal (a))
       region = "half";
     else
       region = "whole";
     endif
   endif
   if (isempty (Fs))
+    freq_norm = true;
     if (nargout == 0)
       Fs = 2;
     else
       Fs = 2*pi;
     endif
+  else
+    freq_norm = false;
   endif
 
   a = a(:);
   b = b(:);
 
   if (! isscalar (n))
     ## Explicit frequency vector given
     w = f = n;
@@ -166,17 +172,17 @@ function [h_r, f_r] = freqz (b, a, n, re
   h = hb ./ ha;
 
   if (nargout != 0)
     ## Return values and don't plot.
     h_r = h;
     f_r = f;
   else
     ## Plot and don't return values.
-    freqz_plot (f, h);
+    freqz_plot (f, h, freq_norm);
   endif
 
 endfunction
 
 
 %!test # correct values and fft-polyval consistency
 %! ## butterworth filter, order 2, cutoff pi/2 radians
 %! b = [0.292893218813452  0.585786437626905  0.292893218813452];
diff --git a/scripts/signal/freqz_plot.m b/scripts/signal/freqz_plot.m
--- a/scripts/signal/freqz_plot.m
+++ b/scripts/signal/freqz_plot.m
@@ -12,56 +12,58 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} freqz_plot (@var{w}, @var{h})
-## Plot the pass band, stop band and phase response of @var{h}.
+## @deftypefn  {Function File} {} freqz_plot (@var{w}, @var{h})
+## @deftypefnx {Function File} {} freqz_plot (@var{w}, @var{h}, @var{freq_norm})
+## Plot the magnitude and phase response of @var{h}.
+##
+## If the optional @var{freq_norm} argument is true, the frequency vector
+## @var{w} is in units of normalized radians.  If @var{freq_norm} is false, or
+## not given, then @var{w} is measured in Hertz.
+## @seealso{freqz}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
-function freqz_plot (w, h)
+function freqz_plot (w, h, freq_norm = false)
 
-  if (nargin != 2)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   n = length (w);
 
   ## ## exclude zero-frequency
   ## h = h (2 : length (h));
   ## w = w (2 : length (w));
   ## n = n-1;
 
   mag = 20 * log10 (abs (h));
   phase = unwrap (arg (h));
-  maxmag = max (mag);
 
-  subplot (3, 1, 1);
-  plot (w, mag);
-  grid ("on");
-  legend ("Pass band (dB)");
-  axis ([w(1), w(n), maxmag-3, maxmag], "labely");
+  if (freq_norm)
+    x_label = 'Normalized Frequency (\times\pi rad/sample)';
+  else
+    x_label = "Frequency (Hz)";
+  endif
 
-  subplot (3, 1, 2);
+  subplot (2, 1, 1);
   plot (w, mag);
   grid ("on");
-  legend ("Stop band (dB)");
-  if (maxmag - min (mag) > 100)
-    axis ([w(1), w(n), maxmag-100, maxmag], "labely");
-  else
-    axis ("autoy", "labely");
-  endif
+  axis ([w(1), w(n)], "autoy");
+  xlabel (x_label);
+  ylabel ("Magnitude (dB)");
 
-  subplot (3, 1, 3);
+  subplot (2, 1, 2);
   plot (w, phase*360/(2*pi));
   grid ("on");
-  legend ("Phase (degrees)");
-  xlabel ("Frequency");
-  axis ([w(1), w(n)], "autoy", "label");
+  axis ([w(1), w(n)], "autoy");
+  xlabel (x_label);
+  ylabel ("Phase (degrees)");
 
 endfunction
 
diff --git a/scripts/statistics/distributions/logncdf.m b/scripts/statistics/distributions/logncdf.m
--- a/scripts/statistics/distributions/logncdf.m
+++ b/scripts/statistics/distributions/logncdf.m
@@ -15,23 +15,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} logncdf (@var{x})
 ## @deftypefnx {Function File} {} logncdf (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the lognormal distribution with
-## parameters @var{mu} and @var{sigma}.  If a random variable follows this
-## distribution, its logarithm is normally distributed with mean
-## @var{mu} and standard deviation @var{sigma}.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the lognormal distribution with parameters
+## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
+## its logarithm is normally distributed with mean @var{mu} and standard
+## deviation @var{sigma}.
 ##
-## Default values are @var{mu} = 1, @var{sigma} = 1.
+## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the log normal distribution
 
 function cdf = logncdf (x, mu = 0, sigma = 1)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/statistics/distributions/logninv.m b/scripts/statistics/distributions/logninv.m
--- a/scripts/statistics/distributions/logninv.m
+++ b/scripts/statistics/distributions/logninv.m
@@ -16,22 +16,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} logninv (@var{x})
 ## @deftypefnx {Function File} {} logninv (@var{x}, @var{mu}, @var{sigma})
 ## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the lognormal distribution with parameters @var{mu}
-## and @var{sigma}.  If a random variable follows this distribution, its
-## logarithm is normally distributed with mean @code{log (@var{mu})} and
-## variance @var{sigma}.
+## CDF) at @var{x} of the lognormal distribution with parameters
+## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
+## its logarithm is normally distributed with mean @var{mu} and standard
+## deviation @var{sigma}.
 ##
-## Default values are @var{mu} = 1, @var{sigma} = 1.
+## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the log normal distribution
 
 function inv = logninv (x, mu = 0, sigma = 1)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/statistics/distributions/lognpdf.m b/scripts/statistics/distributions/lognpdf.m
--- a/scripts/statistics/distributions/lognpdf.m
+++ b/scripts/statistics/distributions/lognpdf.m
@@ -18,20 +18,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} lognpdf (@var{x})
 ## @deftypefnx {Function File} {} lognpdf (@var{x}, @var{mu}, @var{sigma})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the lognormal distribution with parameters
 ## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
-## its logarithm is normally distributed with mean @var{mu}
-## and standard deviation @var{sigma}.
+## its logarithm is normally distributed with mean @var{mu} and standard
+## deviation @var{sigma}.
 ##
-## Default values are @var{mu} = 1, @var{sigma} = 1.
+## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the log normal distribution
 
 function pdf = lognpdf (x, mu = 0, sigma = 1)
 
   if (nargin != 1 && nargin != 3)
