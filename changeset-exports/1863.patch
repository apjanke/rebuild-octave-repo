# HG changeset patch
# User jwe
# Date 823430402 0
#      Sun Feb 04 10:40:02 1996 +0000
# Node ID 986e565efd0a1c1fc51f2c13111ffbec4a2076b7
# Parent  58b42823284f7cfe49a86c2dd0f869d4c7c67e2a
[project @ 1996-02-04 10:40:02 by jwe]

diff --git a/liboctave/NLP.h b/liboctave/NLP.h
--- a/liboctave/NLP.h
+++ b/liboctave/NLP.h
@@ -1,12 +1,12 @@
 // NLP.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -26,49 +26,51 @@ Software Foundation, 59 Temple Place - S
 
 #include "dColVector.h"
 #include "Objective.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "NLConst.h"
 #include "base-min.h"
 
-class NLP : public base_minimizer
+class
+NLP : public base_minimizer
 {
- public:
+public:
 
-  NLP (void) : base_minimizer () { }
+  NLP (void)
+    : base_minimizer (), phi (), bnds (), lc (), nlc () { }
 
   NLP (const ColumnVector& x, const Objective& obj)
-    : base_minimizer (x), phi (obj) { }
+    : base_minimizer (x), phi (obj), bnds (), lc (), nlc () { }
 
   NLP (const ColumnVector& x, const Objective& obj, const Bounds& b)
-    : base_minimizer (x), phi (obj), bnds (b) { }
+    : base_minimizer (x), phi (obj), bnds (b), lc (), nlc () { }
 
   NLP (const ColumnVector& x, const Objective& obj, const Bounds& b,
        const LinConst& l)
-    : base_minimizer (x), phi (obj), bnds (b), lc (l) { }
+    : base_minimizer (x), phi (obj), bnds (b), lc (l), nlc () { }
 
   NLP (const ColumnVector& x, const Objective& obj, const Bounds& b,
        const LinConst& l, const NLConst& nl)
     : base_minimizer (x), phi (obj), bnds (b), lc (l), nlc (nl) { }
 
   NLP (const ColumnVector& x, const Objective& obj, const LinConst& l)
-    : base_minimizer (x), phi (obj), lc (l) { }
+    : base_minimizer (x), phi (obj), bnds (), lc (l), nlc () { }
 
   NLP (const ColumnVector& x, const Objective& obj, const LinConst& l,
        const NLConst& nl)
-    : base_minimizer (x), phi (obj), lc (l), nlc (nl) { }
+    : base_minimizer (x), phi (obj), bnds (), lc (l), nlc (nl) { }
 
   NLP (const ColumnVector& x, const Objective& obj, const NLConst& nl)
-    : base_minimizer (x), phi (obj), nlc (nl) { }
+    : base_minimizer (x), phi (obj), bnds (), lc (), nlc (nl) { }
 
   NLP (const ColumnVector& x, const Objective& obj, const Bounds& b,
        const NLConst& nl)
-    : base_minimizer (x), phi (obj), bnds (b), nlc (nl) { }
+    : base_minimizer (x), phi (obj), bnds (b), lc (), nlc (nl) { }
 
   NLP (const NLP& a)
     : base_minimizer (a), phi (a.phi), bnds (a.bnds), lc (a.lc), nlc (a.nlc)
       { }
 
   NLP& operator = (const NLP& a)
     {
       if (this != &a)
@@ -80,19 +82,27 @@ class NLP : public base_minimizer
 	  lc = a.lc;
 	  nlc = a.nlc;
 	}
       return *this;
     }
 
   virtual ~NLP (void) { }
 
- protected:
+  Objective objective (void) const { return phi; }
+
+  Bounds bounds (void) const { return bnds; }
+
+  LinConst linear_constraints (void) const { return lc; }
 
-  Objective phi;  
+  NLConst nonlinear_constraints (void) const { return nlc; }
+
+protected:
+
+  Objective phi;
   Bounds bnds;
   LinConst lc;
   NLConst nlc;
 };
 
 #endif
 
 /*
