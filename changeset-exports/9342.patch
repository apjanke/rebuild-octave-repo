# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1244827385 14400
#      Fri Jun 12 13:23:05 2009 -0400
# Node ID 2ca8879a140c90cf489871788451222338914f84
# Parent  9fd5c56ce57a4b33cb23e275e1b75e9d5c6b7b11
allow function handles to be created from operators that correspond to named functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-06-12  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-handle.cc (make_fcn_handle): Accept operators which have
+	corresponding functions and make function handles using the names.
+	New test.
+
 2009-06-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (do_numeric_lookup): New template function.
 	(Flookup): Extend to support b and m options, improve diagnostic.
 	Refactor.
 
 2009-06-12  Kai NODA  <nodakai@gmail.com>
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1214,26 +1214,188 @@ octave_fcn_handle::print_raw (std::ostre
 			   current_print_indent_level ());
 }
 
 octave_value
 make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
-  octave_value f = symbol_table::find_function (nm);
+  // Bow to the god of compatibility.
+
+  // FIXME -- it seems ugly to put this here, but there is no single
+  // function in the parser that converts from the operator name to
+  // the corresponding function name.  At least try to do it without N
+  // string compares.
+
+  std::string tnm = nm;
+
+  size_t len = nm.length ();
+
+  if (len == 3 && nm == ".**")
+    tnm = "power";
+  else if (len == 2)
+    {
+      if (nm[0] == '.')
+	{
+	  switch (nm[1])
+	    {
+	    case '\'':
+	      tnm = "transpose";
+	      break;
+
+	    case '+':
+	      tnm = "plus";
+	      break;
+
+	    case '-':
+	      tnm = "minus";
+	      break;
+
+	    case '*':
+	      tnm = "times";
+	      break;
+
+	    case '/':
+	      tnm = "rdivide";
+	      break;
+
+	    case '^':
+	      tnm = "power";
+	      break;
+
+	    case '\\':
+	      tnm = "ldivide";
+	      break;
+	    }
+	}
+      else if (nm[1] == '=')
+	{
+	  switch (nm[0])
+	    {
+	    case '<':
+	      tnm = "le";
+	      break;
+
+	    case '=':
+	      tnm = "eq";
+	      break;
+
+	    case '>':
+	      tnm = "ge";
+	      break;
+
+	    case '~':
+	    case '!':
+	      tnm = "ne";
+	      break;
+	    }
+	}
+      else if (nm == "**")
+	tnm = "mpower";
+    }
+  else if (len == 1)
+    {
+      switch (nm[0])
+	{
+	case '~':
+	case '!':
+	  tnm = "not";
+	  break;
+
+	case '\'':
+	  tnm = "ctranspose";
+	  break;
+
+	case '+':
+	  tnm = "plus";
+	  break;
+
+	case '-':
+	  tnm = "minus";
+	  break;
+
+	case '*':
+	  tnm = "mtimes";
+	  break;
+
+	case '/':
+	  tnm = "mrdivide";
+	  break;
+
+	case '^':
+	  tnm = 'mpower';
+	  break;
+
+	case '\\':
+	  tnm = "mldivide";
+	  break;
+
+	case '<':
+	  tnm = "lt";
+	  break;
+
+	case '>':
+	  tnm = "glt";
+	  break;
+
+	case '&':
+	  tnm = "and";
+	  break;
+
+	case '|':
+	  tnm = "or";
+	  break;
+	}
+    }
+
+  octave_value f = symbol_table::find_function (tnm);
 
   if (f.is_defined ())
-    retval = octave_value (new octave_fcn_handle (f, nm));
+    retval = octave_value (new octave_fcn_handle (f, tnm));
   else
     error ("error creating function handle \"@%s\"", nm.c_str ());
 
   return retval;
 }
 
+/*
+%!test
+%! x = {".**", "power";
+%!      ".'", "transpose";
+%!      ".+", "plus";
+%!      ".-", "minus";
+%!      ".*", "times";
+%!      "./", "rdivide";
+%!      ".^", "power";
+%!      ".\\", "ldivide";
+%!      "<=", "le";
+%!      "==", "eq";
+%!      ">=", "ge";
+%!      "~=", "ne";
+%!      "!=", "ne";
+%!      "**", "mpower";
+%!      "~", "not";
+%!      "!", "not";
+%!      "\'", "ctranspose";
+%!      "+", "plus";
+%!      "-", "minus";
+%!      "*", "mtimes";
+%!      "/", "mrdivide";
+%!      "^", "mpower";
+%!      "\\", "mldivide";
+%!      "<", "lt";
+%!      ">", "glt";
+%!      "&", "and";
+%!      "|", "or"};
+%! for i = 1:rows (x)
+%!   assert (functions (str2func (x{i,1})).function, x{i,2})
+%! endfor
+*/
+
 DEFUN (functions, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} functions (@var{fcn_handle})\n\
 Return a struct containing information about the function handle\n\
 @var{fcn_handle}.\n\
 @end deftypefn")
 {
   octave_value retval;
