# HG changeset patch
# User jwe
# Date 1043796298 0
#      Tue Jan 28 23:24:58 2003 +0000
# Node ID a9560cebae6ebc8d6b239c5e4fa94cb5efe79bbc
# Parent  b738d1a02adb57d80ae9daf4aaca8732cd85f7ab
[project @ 2003-01-28 23:24:58 by jwe]

diff --git a/Makefile.in b/Makefile.in
--- a/Makefile.in
+++ b/Makefile.in
@@ -39,17 +39,17 @@ binary-dist: FORCE
 
 header-msg: FORCE
 	@echo ""
 	@echo "***********************************************************"
 	@echo "*"
 	@echo "*  To compile Octave, you will need a recent versions of"
 	@echo "*  the following software:"
 	@echo "*"
-	@echo "*    g++ (2.95.x or a more recent version)"
+	@echo "*    g++ (3.2.x or a more recent version)"
 	@echo "*"
 	@echo "*    flex (2.5.4 or a more recent version) -- required if"
 	@echo "*    you need to recreate lex.cc from lex.l"
 	@echo "*"
 	@echo "*    bison (1.28 or a more recent version) -- required if"
 	@echo "*    you need to recreate parse.cc from parse.y"
 	@echo "*"
 	@echo "*    gperf (2.7.1 or a more recent version) -- required if"
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2911,16 +2911,202 @@ operator * (const ComplexMatrix& m, cons
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zgemm");
 	}
     }
 
   return retval;
 }
 
+// XXX FIXME XXX -- it would be nice to share code among the min/max
+// functions below.
+
+#define EMPTY_RETURN_CHECK(T) \
+  if (nr == 0 || nc == 0) \
+    return T (nr, nc);
+
+ComplexMatrix
+min (const Complex& c, const ComplexMatrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmin (c, m (i, j));
+      }
+
+  return result;
+}
+
+ComplexMatrix
+min (const ComplexMatrix& m, const Complex& c)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmin (m (i, j), c);
+      }
+
+  return result;
+}
+
+ComplexMatrix
+min (const ComplexMatrix& a, const ComplexMatrix& b)
+{
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr != b.rows () || nc != b.columns ())
+    {
+      (*current_liboctave_error_handler)
+	("two-arg min expecting args of same size");
+      return ComplexMatrix ();
+    }
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    {
+      int columns_are_real_only = 1;
+      for (int i = 0; i < nr; i++)
+	{
+	  OCTAVE_QUIT;
+	  if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
+	    {
+	      columns_are_real_only = 0;
+	      break;
+	    }
+	}
+
+      if (columns_are_real_only)
+	{
+	  for (int i = 0; i < nr; i++)
+	    result (i, j) = xmin (real (a (i, j)), real (b (i, j)));
+	}
+      else
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      OCTAVE_QUIT;
+	      result (i, j) = xmin (a (i, j), b (i, j));
+	    }
+	}
+    }
+
+  return result;
+}
+
+ComplexMatrix
+max (const Complex& c, const ComplexMatrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmax (c, m (i, j));
+      }
+
+  return result;
+}
+
+ComplexMatrix
+max (const ComplexMatrix& m, const Complex& c)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmax (m (i, j), c);
+      }
+
+  return result;
+}
+
+ComplexMatrix
+max (const ComplexMatrix& a, const ComplexMatrix& b)
+{
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr != b.rows () || nc != b.columns ())
+    {
+      (*current_liboctave_error_handler)
+	("two-arg max expecting args of same size");
+      return ComplexMatrix ();
+    }
+
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    {
+      int columns_are_real_only = 1;
+      for (int i = 0; i < nr; i++)
+	{
+	  OCTAVE_QUIT;
+	  if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
+	    {
+	      columns_are_real_only = 0;
+	      break;
+	    }
+	}
+
+      if (columns_are_real_only)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      OCTAVE_QUIT;
+	      result (i, j) = xmax (real (a (i, j)), real (b (i, j)));
+	    }
+	}
+      else
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      OCTAVE_QUIT;
+	      result (i, j) = xmax (a (i, j), b (i, j));
+	    }
+	}
+    }
+
+  return result;
+}
+
 MS_CMP_OPS(ComplexMatrix, real, Complex, real)
 MS_BOOL_OPS(ComplexMatrix, Complex, 0.0)
 
 SM_CMP_OPS(Complex, real, ComplexMatrix, real)
 SM_BOOL_OPS(Complex, ComplexMatrix, 0.0)
 
 MM_CMP_OPS(ComplexMatrix, real, ComplexMatrix, real)
 MM_BOOL_OPS(ComplexMatrix, ComplexMatrix, 0.0)
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -284,16 +284,24 @@ ComplexMatrix Givens (const Complex&, co
 
 ComplexMatrix Sylvester (const ComplexMatrix&, const ComplexMatrix&,
 			 const ComplexMatrix&);
 
 extern ComplexMatrix operator * (const Matrix&,        const ComplexMatrix&);
 extern ComplexMatrix operator * (const ComplexMatrix&, const Matrix&);
 extern ComplexMatrix operator * (const ComplexMatrix&, const ComplexMatrix&);
 
+extern ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
+extern ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
+extern ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
+
+extern ComplexMatrix max (const Complex& c, const ComplexMatrix& m);
+extern ComplexMatrix max (const ComplexMatrix& m, const Complex& c);
+extern ComplexMatrix max (const ComplexMatrix& a, const ComplexMatrix& b);
+
 MS_CMP_OP_DECLS (ComplexMatrix, Complex)
 MS_BOOL_OP_DECLS (ComplexMatrix, Complex)
 
 SM_CMP_OP_DECLS (Complex, ComplexMatrix)
 SM_BOOL_OP_DECLS (Complex, ComplexMatrix)
 
 MM_CMP_OP_DECLS (ComplexMatrix, ComplexMatrix)
 MM_BOOL_OP_DECLS (ComplexMatrix, ComplexMatrix)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2003-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CMatrix.cc, dMatrix.cc: Move min and max functions here, from
+	src/DLD-FUNCTIONS/minmax.cc, and make them extern.
+	* CMatrix.h, dMatrix.h: Provide decls.
+
 2003-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-rand.h, oct-rand.cc: New files.
 	* Makefile.in: Add them to the appropriate lists.
 
 2003-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>::index): Fix off-by-one error.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2879,16 +2879,157 @@ operator * (const Matrix& m, const Matri
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in dgemm");
 	}
     }
 
   return retval;
 }
 
+// XXX FIXME XXX -- it would be nice to share code among the min/max
+// functions below.
+
+#define EMPTY_RETURN_CHECK(T) \
+  if (nr == 0 || nc == 0) \
+    return T (nr, nc);
+
+Matrix
+min (double d, const Matrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmin (d, m (i, j));
+      }
+
+  return result;
+}
+
+Matrix
+min (const Matrix& m, double d)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmin (m (i, j), d);
+      }
+
+  return result;
+}
+
+Matrix
+min (const Matrix& a, const Matrix& b)
+{
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr != b.rows () || nc != b.columns ())
+    {
+      (*current_liboctave_error_handler)
+	("two-arg min expecting args of same size");
+      return Matrix ();
+    }
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmin (a (i, j), b (i, j));
+      }
+
+  return result;
+}
+
+Matrix
+max (double d, const Matrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmax (d, m (i, j));
+      }
+
+  return result;
+}
+
+Matrix
+max (const Matrix& m, double d)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmax (m (i, j), d);
+      }
+
+  return result;
+}
+
+Matrix
+max (const Matrix& a, const Matrix& b)
+{
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr != b.rows () || nc != b.columns ())
+    {
+      (*current_liboctave_error_handler)
+	("two-arg max expecting args of same size");
+      return Matrix ();
+    }
+
+  EMPTY_RETURN_CHECK (Matrix);
+
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	OCTAVE_QUIT;
+	result (i, j) = xmax (a (i, j), b (i, j));
+      }
+
+  return result;
+}
+
 MS_CMP_OPS(Matrix, , double, )
 MS_BOOL_OPS(Matrix, double, 0.0)
 
 SM_CMP_OPS(double, , Matrix, )
 SM_BOOL_OPS(double, Matrix, 0.0)
 
 MM_CMP_OPS(Matrix, , Matrix, )
 MM_BOOL_OPS(Matrix, Matrix, 0.0)
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -241,16 +241,24 @@ private:
 };
 
 extern Matrix Givens (double, double);
 
 extern Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
 
 extern Matrix operator * (const Matrix& a, const Matrix& b);
 
+extern Matrix min (double d, const Matrix& m);
+extern Matrix min (const Matrix& m, double d);
+extern Matrix min (const Matrix& a, const Matrix& b);
+
+extern Matrix max (double d, const Matrix& m);
+extern Matrix max (const Matrix& m, double d);
+extern Matrix max (const Matrix& a, const Matrix& b);
+
 MS_CMP_OP_DECLS (Matrix, double)
 MS_BOOL_OP_DECLS (Matrix, double)
 
 SM_CMP_OP_DECLS (double, Matrix)
 SM_BOOL_OP_DECLS (double, Matrix)
 
 MM_CMP_OP_DECLS (Matrix, Matrix)
 MM_BOOL_OP_DECLS (Matrix, Matrix)
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -71,17 +71,17 @@ function fmt = get_fmt (x, sep)
     endif
     t = t(! nan_inf);
     if (isempty (t))
       ## Only zeros, Inf, and NaN.
       fmt = sprintf ("%%%dd", min_fw);
     else
       ## Could have anything.
       tfw = floor (log10 (abs (t))) + 1 + sep;
-      fw = max (tfw)
+      fw = max (tfw);
       if (any (t(tfw == fw) < 0))
 	fw++;
       endif
       fmt = sprintf ("%%%dd", max (fw, min_fw));
     endif
   endif
 
 endfunction
\ No newline at end of file
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/minmax.cc: Move min and max functions from here to
+	liboctave/dMatrix.cc and liboctave/CMatrix.cc.
+
 2003-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/rand.cc: Rewrite to use new octave_rand functions.
 
 2003-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (octave_base_stream::do_printf): Handle values
 	outside the range of integers in int conversions for
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -23,339 +23,25 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cmath>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "dMatrix.h"
+#include "CMatrix.h"
 #include "quit.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
-// XXX FIXME XXX -- it would be nice to share code among the min/max
-// functions below.
-
-#define EMPTY_RETURN_CHECK(T) \
-  if (nr == 0 || nc == 0) \
-    return T (nr, nc);
-
-static Matrix
-min (double d, const Matrix& m)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmin (d, m (i, j));
-      }
-
-  return result;
-}
-
-static Matrix
-min (const Matrix& m, double d)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmin (m (i, j), d);
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-min (const Complex& c, const ComplexMatrix& m)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmin (c, m (i, j));
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-min (const ComplexMatrix& m, const Complex& c)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmin (m (i, j), c);
-      }
-
-  return result;
-}
-
-static Matrix
-min (const Matrix& a, const Matrix& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr != b.rows () || nc != b.columns ())
-    {
-      error ("two-arg min expecting args of same size");
-      return Matrix ();
-    }
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmin (a (i, j), b (i, j));
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-min (const ComplexMatrix& a, const ComplexMatrix& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr != b.rows () || nc != b.columns ())
-    {
-      error ("two-arg min expecting args of same size");
-      return ComplexMatrix ();
-    }
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    {
-      int columns_are_real_only = 1;
-      for (int i = 0; i < nr; i++)
-	{
-	  OCTAVE_QUIT;
-	  if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
-	    {
-	      columns_are_real_only = 0;
-	      break;
-	    }
-	}
-
-      if (columns_are_real_only)
-	{
-	  for (int i = 0; i < nr; i++)
-	    result (i, j) = xmin (real (a (i, j)), real (b (i, j)));
-	}
-      else
-	{
-	  for (int i = 0; i < nr; i++)
-	    {
-	      OCTAVE_QUIT;
-	      result (i, j) = xmin (a (i, j), b (i, j));
-	    }
-	}
-    }
-
-  return result;
-}
-
-static Matrix
-max (double d, const Matrix& m)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmax (d, m (i, j));
-      }
-
-  return result;
-}
-
-static Matrix
-max (const Matrix& m, double d)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmax (m (i, j), d);
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-max (const Complex& c, const ComplexMatrix& m)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmax (c, m (i, j));
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-max (const ComplexMatrix& m, const Complex& c)
-{
-  int nr = m.rows ();
-  int nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmax (m (i, j), c);
-      }
-
-  return result;
-}
-
-static Matrix
-max (const Matrix& a, const Matrix& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr != b.rows () || nc != b.columns ())
-    {
-      error ("two-arg max expecting args of same size");
-      return Matrix ();
-    }
-
-  EMPTY_RETURN_CHECK (Matrix);
-
-  Matrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-	result (i, j) = xmax (a (i, j), b (i, j));
-      }
-
-  return result;
-}
-
-static ComplexMatrix
-max (const ComplexMatrix& a, const ComplexMatrix& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr != b.rows () || nc != b.columns ())
-    {
-      error ("two-arg max expecting args of same size");
-      return ComplexMatrix ();
-    }
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (int j = 0; j < nc; j++)
-    {
-      int columns_are_real_only = 1;
-      for (int i = 0; i < nr; i++)
-	{
-	  OCTAVE_QUIT;
-	  if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
-	    {
-	      columns_are_real_only = 0;
-	      break;
-	    }
-	}
-
-      if (columns_are_real_only)
-	{
-	  for (int i = 0; i < nr; i++)
-	    {
-	      OCTAVE_QUIT;
-	      result (i, j) = xmax (real (a (i, j)), real (b (i, j)));
-	    }
-	}
-      else
-	{
-	  for (int i = 0; i < nr; i++)
-	    {
-	      OCTAVE_QUIT;
-	      result (i, j) = xmax (a (i, j), b (i, j));
-	    }
-	}
-    }
-
-  return result;
-}
-
 #define MINMAX_BODY(FCN) \
  \
   octave_value_list retval;  \
  \
   int nargin = args.length (); \
  \
   if (nargin < 1 || nargin > 2 || nargout > 2) \
     { \
diff --git a/test/octave.test/string/int2str-1.m b/test/octave.test/string/int2str-1.m
--- a/test/octave.test/string/int2str-1.m
+++ b/test/octave.test/string/int2str-1.m
@@ -1,1 +1,1 @@
-strcmp (int2str (-123), " -123") && strcmp (int2str (1.2), "  1")
+strcmp (int2str (-123), "-123") && strcmp (int2str (1.2), "1")
diff --git a/test/octave.test/string/num2str-1.m b/test/octave.test/string/num2str-1.m
--- a/test/octave.test/string/num2str-1.m
+++ b/test/octave.test/string/num2str-1.m
@@ -1,2 +1,1 @@
-(strcmp (num2str (123), "        123")
- && strcmp (num2str (1.23), "       1.23"))
+(strcmp (num2str (123), "123") && strcmp (num2str (1.23), "1.23"))
