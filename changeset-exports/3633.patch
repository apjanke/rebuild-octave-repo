# HG changeset patch
# User jwe
# Date 953803956 0
#      Thu Mar 23 09:32:36 2000 +0000
# Node ID 2e6a41bc8fed55c3eb5284990c1502a5a8a77d67
# Parent  95d7c4b2b2e8e9c5a790f64fa88bfcbe31a21a8e
[project @ 2000-03-23 09:32:36 by jwe]

diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -20,16 +20,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
+#include <cstdarg>
 #include <cstring>
 
 #include <iomanip>
 #include <strstream>
 #include <fstream>
 #include <string>
 
 #include "lo-ieee.h"
@@ -38,16 +39,33 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "error.h"
 #include "input.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+static istream&
+octave_scan (istream& is, const char *fmt, ...)
+{
+#if defined (__GNUG__)
+
+  va_list args;
+  va_start (args, fmt);
+
+  is.vscan (fmt, args);
+
+  va_end (args);
+
+#endif
+
+  return is;
+}
+
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
 //   2 : value is NaN
 //   3 : value is not an integer
 
 static int
 convert_to_valid_int (const octave_value& tc, int& conv_err)
@@ -1007,17 +1025,17 @@ octave_base_stream::read (const Matrix& 
 }
 
 template <class T>
 void
 do_scanf_conv (std::istream& is, const char *fmt, T valptr, Matrix& mval,
 	       double *data, int& idx, int& conversion_count, int nr,
 	       int max_size, bool discard) 
 {
-  is.scan (fmt, valptr);
+  octave_scan (is, fmt, valptr);
 
   if (is)
     {
       if (idx == max_size && ! discard)
 	{
 	  max_size *= 2;
 
 	  if (nr > 0)
@@ -1121,17 +1139,17 @@ do_scanf_conv (std::istream&, const char
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char [width+1]; \
  \
-	  is.scan (fmt, tmp); \
+	  octave_scan (is, fmt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  int c = EOF; \
@@ -1162,17 +1180,17 @@ do_scanf_conv (std::istream&, const char
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char[width+1]; \
  \
-	  is.scan (fmt, tmp); \
+	  octave_scan (is, fmt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  std::string char_class = elt->char_class; \
@@ -1376,17 +1394,17 @@ octave_base_stream::do_scanf (scanf_form
 		case scanf_format_elt::literal_conversion:
 		  DO_LITERAL_CONVERSION ();
 		  break;
 
 		case '%':
 		  {
 		    int dummy;
 
-		    is.scan (fmt, &dummy);
+		    octave_scan (is, fmt, &dummy);
 		  }
 		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
@@ -1576,17 +1594,17 @@ octave_base_stream::scanf (const std::st
 	case 0:
 	  {
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    if (elt)
 	      {
 		is.clear ();
 
-		is.scan (elt->text);
+		octave_scan (is, elt->text);
 
 		if (! is)
 		  {
 		    // If it looks like we have a matching failure, then
 		    // reset the failbit in the stream state.
 
 		    if (is.rdstate () & std::ios::failbit)
 		      is.clear (is.rdstate () & (~std::ios::failbit));
@@ -1660,40 +1678,40 @@ octave_base_stream::do_oscanf (const sca
 	    case scanf_format_elt::literal_conversion:
 	      DO_LITERAL_CONVERSION ();
 	      break;
 
 	    case '%':
 	      {
 		int dummy;
 
-		if (! is.scan (fmt, &dummy))
+		if (! octave_scan (is, fmt, &dummy))
 		  quit = true;
 	      }
 	      break;
 
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	      {
 		int tmp;
 
-		if (is.scan (fmt, &tmp))
+		if (octave_scan (is, fmt, &tmp))
 		  {
 		    if (! discard)
 		      retval = static_cast<double> (tmp);
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
 		double tmp;
 
-		if (is.scan (fmt, &tmp))
+		if (octave_scan (is, fmt, &tmp))
 		  {
 		    if (! discard)
 		      retval = tmp;
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
@@ -1795,17 +1813,17 @@ octave_base_stream::oscanf (const std::s
 	case 0:
 	  {
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    if (elt)
 	      {
 		is.clear ();
 
-		is.scan (elt->text);
+		octave_scan (is, elt->text);
 
 		if (! is)
 		  {
 		    error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
 
 		    if (interactive && name () == "stdin")
