# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265828243 18000
#      Wed Feb 10 13:57:23 2010 -0500
# Node ID 9e0ec19df4bcc3e0c03639b1767be8b0a6e9f646
# Parent  dcc2535009c768e5d90d0ca623308facafb1659b
commit accidentally omitted parts of previous change

diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -59,16 +59,19 @@ public:
   ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
 
   template <class U>
   ComplexMatrix (const MArray2<U>& a) : MArray2<Complex> (a) { }
 
   template <class U>
   ComplexMatrix (const Array2<U>& a) : MArray2<Complex> (a) { }
 
+  template <class U>
+  ComplexMatrix (const Array<U>& a) : MArray2<Complex> (a) { }
+
   ComplexMatrix (const Matrix& re, const Matrix& im);
 
   explicit ComplexMatrix (const Matrix& a);
 
   explicit ComplexMatrix (const RowVector& rv);
 
   explicit ComplexMatrix (const ColumnVector& cv);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2010-02-10  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.h (template <class U> Matrix (const Array<U>&)):
+	New constructor.
+	* CMatrix.h (template <class U> ComplexMatrix (const Array<U>&)):
+	New constructor.
+	* fMatrix.h (template <class U> FloatMatrix (const Array<U>&)):
+	New constructor.
+	* fCMatrix.h (template <class U> FloatComplexMatrix (const Array<U>&)):
+	New constructor.
+
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
 	Array<octave_idx_type>&, octave_idx_type, direct)): New constructor.
 	* idx-vector.h: Declare it.
 	(idx_vector::idx_vector (const Array<octave_idx_type>&,
 	octave_idx_type)): New constructor.
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -56,16 +56,19 @@ public:
   Matrix (const Matrix& a) : MArray2<double> (a) { }
 
   template <class U>
   Matrix (const MArray2<U>& a) : MArray2<double> (a) { }
 
   template <class U>
   Matrix (const Array2<U>& a) : MArray2<double> (a) { }
 
+  template <class U>
+  Matrix (const Array<U>& a) : MArray2<double> (a) { }
+
   explicit Matrix (const RowVector& rv);
 
   explicit Matrix (const ColumnVector& cv);
 
   explicit Matrix (const DiagMatrix& a);
 
   explicit Matrix (const PermMatrix& a);
 
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -59,16 +59,19 @@ public:
   FloatComplexMatrix (const FloatComplexMatrix& a) : MArray2<FloatComplex> (a) { }
 
   template <class U>
   FloatComplexMatrix (const MArray2<U>& a) : MArray2<FloatComplex> (a) { }
 
   template <class U>
   FloatComplexMatrix (const Array2<U>& a) : MArray2<FloatComplex> (a) { }
 
+  template <class U>
+  FloatComplexMatrix (const Array<U>& a) : MArray2<FloatComplex> (a) { }
+
   explicit FloatComplexMatrix (const FloatMatrix& a);
 
   explicit FloatComplexMatrix (const FloatRowVector& rv);
 
   explicit FloatComplexMatrix (const FloatColumnVector& cv);
 
   explicit FloatComplexMatrix (const FloatDiagMatrix& a);
 
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -56,16 +56,19 @@ public:
   FloatMatrix (const FloatMatrix& a) : MArray2<float> (a) { }
 
   template <class U>
   FloatMatrix (const MArray2<U>& a) : MArray2<float> (a) { }
 
   template <class U>
   FloatMatrix (const Array2<U>& a) : MArray2<float> (a) { }
 
+  template <class U>
+  FloatMatrix (const Array<U>& a) : MArray2<float> (a) { }
+
   explicit FloatMatrix (const FloatRowVector& rv);
 
   explicit FloatMatrix (const FloatColumnVector& cv);
 
   explicit FloatMatrix (const FloatDiagMatrix& a);
 
   explicit FloatMatrix (const PermMatrix& a);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2010-02-10  John W. Eaton  <jwe@octave.org>
 
+	* graphics.cc (base_properties::set_children): Ensure that new
+	children are stored as a column vector.
+
 	* syscalls.cc (Fdup2, Fexec, Fpopen2, Ffork, Fgetpgrp, Fgetpid,
 	Fgetppid, Fgetegid, Fgetgid, Fgeteuid, Fkill, Ffstat, Flstat,
 	Fpipe, Fstat, Fwaitpid): Use DEFUNX instead of DEFUN.
 
 2010-02-10  David Grundberg  <davidg@cs.umu.se>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (read_images): Reimplement
 	copying with direct fortran_vec manipulation, avoiding indexing
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2010,26 +2010,30 @@ base_properties::set_parent (const octav
     error ("set: expecting parent to be a graphics handle");
 }
 
 void
 base_properties::set_children (const octave_value& val)
 {
   const Matrix new_kids = val.matrix_value ();
 
+  octave_idx_type nel = new_kids.numel ();
+
+  const Matrix new_kids_column = new_kids.reshape (dim_vector (nel, 1));
+
   bool ok = true;
 
   if (! error_state)
     {
       const Matrix visible_kids = get_children ();
 
       if (visible_kids.numel () == new_kids.numel ())
 	{
 	  Matrix t1 = visible_kids.sort ();
-	  Matrix t2 = new_kids.sort ();
+	  Matrix t2 = new_kids_column.sort ();
 
 	  if (t1 != t2)
 	    ok = false;
 	}
       else
 	ok = false;
 
       if (! ok)
@@ -2037,17 +2041,17 @@ base_properties::set_children (const oct
     }
   else
     {
       ok = false;
       error ("set: expecting children to be array of graphics handles");
     }
 
   if (ok)
-    children = new_kids.stack (get_hidden_children ());
+    children = new_kids_column.stack (get_hidden_children ());
 }
 
 void
 base_properties::mark_modified (void)
 {
   __modified__ = "on";
   graphics_object parent_obj = gh_manager::get_object (get_parent ());
   if (parent_obj)
