# HG changeset patch
# User jwe
# Date 1199993310 0
#      Thu Jan 10 19:28:30 2008 +0000
# Branch release-3-0-x
# Node ID 14142d0843665c71191e489af691581271520c4d
# Parent  c3d1d911dfa821bfb4fcbb187819a1ee29072b3b
[3-0-0-branch @ 2008-01-10 19:28:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,18 +1,23 @@
+2008-01-10  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (calc_single_subscript_internal): New static function.
+	(mxArray_octave_value::calc_single_subscript): Use it.
+	(mxArray_matlab::calc_single_subscript): Use it.
+
 2008-01-07  John W. Eaton  <jwe@octave.org>
 
 	* src/pt-except.cc (tree_try_catch_command::eval):
 	Set Vdebug_on_error and Vdebug_on_warning to false while executing
 	try block.
 
 	* error.cc (Vdebug_on_error, Vdebug_on_warning): No longer static.
 	* error.h: Provide decls.
 
-
 2008-01-04  John Swensen  <jpswensen@comcast.net>
 
 	* debug.cc (bp_table::do_remove_all_breakpoints_in_file):
 	Avoid calling erase on invalid bp_map iterators.
 	(bp_table::do_remove_breakpoint): Only try to delete breakpoints
 	if some exist.  Avoid calling erase on invalid bp_map iterators.
 	(parse_dbfunction_params): Return early if ARGS is empty.
 	New arg, WHO.  Change all uses.
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -266,16 +266,48 @@ protected:
 
   void error (const char *msg) const
   {
     // FIXME
     ::error ("%s", msg);
   }
 };
 
+static mwIndex
+calc_single_subscript_internal (mwSize ndims, const mwSize *dims,
+				mwSize nsubs, const mwIndex *subs)
+{
+  mwIndex retval = 0;
+
+  switch (nsubs)
+    {
+    case 0:
+      break;
+
+    case 1:
+      retval = subs[0];
+      break;
+
+    default:
+      {
+	// Both nsubs and ndims should be at least 2 here.
+
+	mwSize n = nsubs <= ndims ? nsubs : ndims;
+
+	retval = subs[--n];
+
+	while (--n >= 0)
+	  retval = dims[n] * retval + subs[n];
+      }
+      break;
+    }
+
+  return retval;
+}
+
 // The object that handles values pass to MEX files from Octave.  Some
 // methods in this class may set mutate_flag to TRUE to tell the
 // mxArray class to convert to the Matlab-style representation and
 // then invoke the method on that object instead (for example, getting
 // a pointer to real or imaginary data from a complex object requires
 // a mutation but getting a pointer to real data from a real object
 // does not).  Changing the representation causes a copy so we try to
 // avoid it unless it is really necessary.  Once the conversion
@@ -600,27 +632,20 @@ public:
 	  }
       }
 
     return buf;
   }
 
   mwIndex calc_single_subscript (mwSize nsubs, mwIndex *subs) const
   {
-    mwIndex retval = 0;
-
     // Force ndims, dims to be cached.
     get_dimensions ();
 
-    mwIndex n = nsubs <= ndims ? nsubs : ndims;
-
-    while (--n > 0)
-      retval = retval * dims[n] + subs[n];
-
-    return retval;
+    return calc_single_subscript_internal (ndims, dims, nsubs, subs);
   }
 
   size_t get_element_size (void) const
   {
     // Force id to be cached.
     get_class_id ();
 
     switch (id)
@@ -991,24 +1016,17 @@ public:
   char *array_to_string (void) const
   {
     invalid_type_error ();
     return 0;
   }
 
   mwIndex calc_single_subscript (mwSize nsubs, mwIndex *subs) const
   {
-    mwIndex retval = 0;
-
-    mwSize n = nsubs <= ndims ? nsubs : ndims;
-
-    while (--n > 0)
-      retval = retval * dims[n] + subs[n];
-
-    return retval;
+    return calc_single_subscript_internal (ndims, dims, nsubs, subs);
   }
 
   size_t get_element_size (void) const
   {
     switch (id)
       {
       case mxCELL_CLASS: return sizeof (mxArray *);
       case mxSTRUCT_CLASS: return sizeof (mxArray *);
