# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551855949 0
#      Wed Mar 06 07:05:49 2019 +0000
# Node ID ab97008be4116692cc8739a3e9167d13891b0f10
# Parent  98f34c841f89a7da774cfa1dffb2cd09d556e8aa
use m_ for member variables in function handle and inline function classes

* ov-fcn-handle.cc, ov-fcn-handle.h, ov-fcn-inline.cc,
ov-fcn-inline.h: Use "m_" prefix for member variable names in
octave_fcn_handle and octave_fcn_inline classes.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -80,46 +80,46 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "function handle",
                                      "function_handle");
 
 const std::string octave_fcn_handle::anonymous ("@<anonymous>");
 
 octave_fcn_handle::octave_fcn_handle (const octave::symbol_scope& scope,
                                       const octave_value& f,
                                       const std::string& n)
-  : fcn (f), nm (n), m_scope (scope), m_is_nested (false),
+  : m_fcn (f), m_name (n), m_scope (scope), m_is_nested (false),
     m_closure_frames (nullptr)
 {
-  octave_user_function *uf = fcn.user_function_value (true);
+  octave_user_function *uf = m_fcn.user_function_value (true);
 
-  if (uf && nm != anonymous)
+  if (uf && m_name != anonymous)
     {
       octave::symbol_scope uf_scope = uf->scope ();
 
       if (uf_scope)
-        uf_scope.cache_name (nm);
+        uf_scope.cache_name (m_name);
     }
 
   if (uf && uf->is_nested_function () && ! uf->is_subfunction ())
     m_is_nested = true;
 }
 
 octave_fcn_handle::octave_fcn_handle (const octave_value& f,
                                       const std::string& n)
-  : fcn (f), nm (n), m_scope (), m_is_nested (false),
+  : m_fcn (f), m_name (n), m_scope (), m_is_nested (false),
     m_closure_frames (nullptr)
 {
-  octave_user_function *uf = fcn.user_function_value (true);
+  octave_user_function *uf = m_fcn.user_function_value (true);
 
-  if (uf && nm != anonymous)
+  if (uf && m_name != anonymous)
     {
       octave::symbol_scope uf_scope = uf->scope ();
 
       if (uf_scope)
-        uf_scope.cache_name (nm);
+        uf_scope.cache_name (m_name);
     }
 
   if (uf && uf->is_nested_function () && ! uf->is_subfunction ())
     m_is_nested = true;
 }
 
 octave_fcn_handle::~octave_fcn_handle (void)
 {
@@ -175,28 +175,28 @@ octave_fcn_handle::subsref (const std::s
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
 octave_fcn_handle::call (int nargout, const octave_value_list& args)
 {
-  octave_value fcn_to_call = fcn;
+  octave_value fcn_to_call = m_fcn;
 
   if (! fcn_to_call.is_defined ())
     {
       octave::symbol_table& symtab
         = octave::__get_symbol_table__ ("octave_fcn_handle::call");
 
-      fcn_to_call = symtab.find_function (nm, args, m_scope);
+      fcn_to_call = symtab.find_function (m_name, args, m_scope);
     }
 
   if (! fcn_to_call.is_defined ())
-    error ("%s: no longer valid function handle", nm.c_str ());
+    error ("%s: no longer valid function handle", m_name.c_str ());
 
   octave::stack_frame *closure_context = nullptr;
 
   if (m_closure_frames && m_closure_frames->size () > 0)
     closure_context = m_closure_frames->front ();
 
   octave::tree_evaluator& tw
     = octave::__get_evaluator__ ("octave_fcn_handle::call");
@@ -210,43 +210,43 @@ dim_vector
 octave_fcn_handle::dims (void) const
 {
   static dim_vector dv (1, 1);
   return dv;
 }
 
 octave_function * octave_fcn_handle::function_value (bool)
 {
-  if (fcn.is_defined ())
-    return fcn.function_value ();
+  if (m_fcn.is_defined ())
+    return m_fcn.function_value ();
 
   octave::symbol_table& symtab
     = octave::__get_symbol_table__ ("octave_fcn_handle::set_fcn");
 
   // Cache this value so that the pointer will be valid as long as the
   // function handle object is valid.
 
-  m_generic_fcn = symtab.find_function (nm, octave_value_list (), m_scope);
+  m_generic_fcn = symtab.find_function (m_name, octave_value_list (), m_scope);
 
   return (m_generic_fcn.is_defined ()
           ? m_generic_fcn.function_value () : nullptr);
 }
 
 octave_user_function * octave_fcn_handle::user_function_value (bool)
 {
-  if (fcn.is_defined ())
-    return fcn.user_function_value ();
+  if (m_fcn.is_defined ())
+    return m_fcn.user_function_value ();
 
   octave::symbol_table& symtab
     = octave::__get_symbol_table__ ("octave_fcn_handle::set_fcn");
 
   // Cache this value so that the pointer will be valid as long as the
   // function handle object is valid.
 
-  m_generic_fcn = symtab.find_user_function (nm);
+  m_generic_fcn = symtab.find_user_function (m_name);
 
   return (m_generic_fcn.is_defined ()
           ? m_generic_fcn.user_function_value () : nullptr);
 }
 
 // Save call stack frames for handles to nested functions.
 
 void
@@ -274,19 +274,19 @@ octave_fcn_handle::push_closure_context 
     }
 
   m_closure_frames->push_back (dup_frame);
 }
 
 octave_value
 octave_fcn_handle::workspace (void) const
 {
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
-      octave_user_function *fu = fcn.user_function_value ();
+      octave_user_function *fu = m_fcn.user_function_value ();
 
       octave_scalar_map ws;
 
       if (fu)
         {
           for (const auto& nm_val : fu->local_var_init_vals ())
             ws.assign (nm_val.first, nm_val.second);
         }
@@ -322,20 +322,20 @@ octave_fcn_handle::workspace (void) cons
     }
 
   return Cell ();
 }
 
 bool
 octave_fcn_handle::is_equal_to (const octave_fcn_handle& h) const
 {
-  if (fcn.is_defined () && h.fcn.is_defined ())
-    return fcn.is_copy_of (h.fcn);
-  else if (fcn.is_undefined () && h.fcn.is_undefined ())
-    return nm == h.nm;
+  if (m_fcn.is_defined () && h.m_fcn.is_defined ())
+    return m_fcn.is_copy_of (h.m_fcn);
+  else if (m_fcn.is_undefined () && h.m_fcn.is_undefined ())
+    return m_name == h.m_name;
   else
     return false;
 }
 
 bool
 octave_fcn_handle::set_fcn (const std::string& octaveroot,
                             const std::string& fpath)
 {
@@ -352,75 +352,75 @@ octave_fcn_handle::set_fcn (const std::s
 
       if (fs.exists ())
         {
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
           octave_value ov_fcn
-            = octave::load_fcn_from_file (str, dir_name, "", "", nm);
+            = octave::load_fcn_from_file (str, dir_name, "", "", m_name);
 
           if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
+          m_fcn = octave_value (new octave_fcn_handle (ov_fcn, m_name));
         }
       else
         {
           // Next just search for it anywhere in the system path
           std::list<std::string> names;
-          names.push_back (nm + ".oct");
-          names.push_back (nm + ".mex");
-          names.push_back (nm + ".m");
+          names.push_back (m_name + ".oct");
+          names.push_back (m_name + ".mex");
+          names.push_back (m_name + ".m");
 
           octave::load_path& lp =
             octave::__get_load_path__ ("octave_fcn_handle::set_fcn");
 
           octave::directory_path p (lp.system_path ());
 
           str = octave::sys::env::make_absolute (p.find_first_of (names));
 
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
           octave_value ov_fcn
-            = octave::load_fcn_from_file (str, dir_name, "", "", nm);
+            = octave::load_fcn_from_file (str, dir_name, "", "", m_name);
 
           if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
+          m_fcn = octave_value (new octave_fcn_handle (ov_fcn, m_name));
         }
     }
   else
     {
       if (fpath.length () > 0)
         {
           size_t xpos = fpath.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = fpath.substr (0, xpos);
 
           octave_value ov_fcn
-            = octave::load_fcn_from_file (fpath, dir_name, "", "", nm);
+            = octave::load_fcn_from_file (fpath, dir_name, "", "", m_name);
 
           if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
+          m_fcn = octave_value (new octave_fcn_handle (ov_fcn, m_name));
         }
       else
         {
           octave::symbol_table& symtab
             = octave::__get_symbol_table__ ("octave_fcn_handle::set_fcn");
 
-          fcn = symtab.find_function (nm);
+          m_fcn = symtab.find_function (m_name);
 
-          if (! fcn.is_function ())
+          if (! m_fcn.is_function ())
             error ("function handle points to non-existent function");
         }
     }
 
   return true;
 }
 
 octave_value
@@ -429,29 +429,29 @@ octave_fcn_handle::convert_to_str_intern
   std::ostringstream buf;
   print_raw (buf, true);
   return octave_value (buf.str (), type);
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os)
 {
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
-      if (fcn.is_undefined ())
+      if (m_fcn.is_undefined ())
         return false;
 
-      octave_user_function *f = fcn.user_function_value ();
+      octave_user_function *f = m_fcn.user_function_value ();
 
       octave_user_function::local_vars_map local_vars
         = f->local_var_init_vals ();
 
       size_t varlen = local_vars.size ();
 
-      os << nm << "\n";
+      os << m_name << "\n";
 
       print_raw (os, true);
       os << "\n";
 
       if (varlen > 0)
         {
           os << "# length: " << varlen << "\n";
 
@@ -465,17 +465,17 @@ octave_fcn_handle::save_ascii (std::ostr
   else
     {
       octave_function *f = function_value ();
       std::string fnm = (f ? f->fcn_file_name () : "");
 
       os << "# octaveroot: " << octave::config::octave_exec_home () << "\n";
       if (! fnm.empty ())
         os << "# path: " << fnm << "\n";
-      os << nm << "\n";
+      os << m_name << "\n";
     }
 
   return true;
 }
 
 bool
 octave_fcn_handle::parse_anon_fcn_handle (const std::string& fcn_text)
 {
@@ -489,26 +489,26 @@ octave_fcn_handle::parse_anon_fcn_handle
     = interp.eval_string (fcn_text, true, parse_status);
 
   if (parse_status == 0)
     {
       octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
 
       if (fh)
         {
-          fcn = fh->fcn;
+          m_fcn = fh->m_fcn;
 
-          octave_user_function *uf = fcn.user_function_value (true);
+          octave_user_function *uf = m_fcn.user_function_value (true);
 
           if (uf)
             {
               octave::symbol_scope uf_scope = uf->scope ();
 
               if (uf_scope)
-                uf_scope.cache_name (nm);
+                uf_scope.cache_name (m_name);
             }
         }
       else
         success = false;
     }
   else
     success = false;
 
@@ -530,19 +530,19 @@ octave_fcn_handle::load_ascii (std::istr
   pos = is.tellg ();
   std::string fpath = extract_keyword (is, "path", true);
   if (fpath.empty ())
     {
       is.seekg (pos);
       is.clear ();
     }
 
-  is >> nm;
+  is >> m_name;
 
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
       skip_preceeding_newline (is);
 
       std::string buf;
 
       if (is)
         {
 
@@ -604,34 +604,34 @@ octave_fcn_handle::load_ascii (std::istr
     success = set_fcn (octaveroot, fpath);
 
   return success;
 }
 
 bool
 octave_fcn_handle::save_binary (std::ostream& os, bool save_as_floats)
 {
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
       std::ostringstream nmbuf;
 
-      if (fcn.is_undefined ())
+      if (m_fcn.is_undefined ())
         return false;
 
-      octave_user_function *f = fcn.user_function_value ();
+      octave_user_function *f = m_fcn.user_function_value ();
 
       octave_user_function::local_vars_map local_vars
         = f->local_var_init_vals ();
 
       size_t varlen = local_vars.size ();
 
       if (varlen > 0)
-        nmbuf << nm << ' ' << varlen;
+        nmbuf << m_name << ' ' << varlen;
       else
-        nmbuf << nm;
+        nmbuf << m_name;
 
       std::string buf_str = nmbuf.str ();
       int32_t tmp = buf_str.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (buf_str.c_str (), buf_str.length ());
 
       std::ostringstream buf;
       print_raw (buf, true);
@@ -652,17 +652,17 @@ octave_fcn_handle::save_binary (std::ost
     }
   else
     {
       std::ostringstream nmbuf;
 
       octave_function *f = function_value ();
       std::string fnm = (f ? f->fcn_file_name () : "");
 
-      nmbuf << nm << "\n" << octave::config::octave_exec_home () << "\n" << fnm;
+      nmbuf << m_name << "\n" << octave::config::octave_exec_home () << "\n" << fnm;
 
       std::string buf_str = nmbuf.str ();
       int32_t tmp = buf_str.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (buf_str.c_str (), buf_str.length ());
     }
 
   return true;
@@ -680,32 +680,32 @@ octave_fcn_handle::load_binary (std::ist
   if (swap)
     swap_bytes<4> (&tmp);
 
   OCTAVE_LOCAL_BUFFER (char, ctmp1, tmp+1);
   // is.get (ctmp1, tmp+1, 0); caused is.eof () to be true though
   // effectively not reading over file end
   is.read (ctmp1, tmp);
   ctmp1[tmp] = 0;
-  nm = std::string (ctmp1);
+  m_name = std::string (ctmp1);
 
   if (! is)
     return false;
 
   size_t anl = anonymous.length ();
 
-  if (nm.length () >= anl && nm.substr (0, anl) == anonymous)
+  if (m_name.length () >= anl && m_name.substr (0, anl) == anonymous)
     {
       octave_idx_type len = 0;
 
-      if (nm.length () > anl)
+      if (m_name.length () > anl)
         {
-          std::istringstream nm_is (nm.substr (anl));
+          std::istringstream nm_is (m_name.substr (anl));
           nm_is >> len;
-          nm = nm.substr (0, anl);
+          m_name = m_name.substr (0, anl);
         }
 
       if (! is.read (reinterpret_cast<char *> (&tmp), 4))
         return false;
       if (swap)
         swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp2, tmp+1);
@@ -752,23 +752,23 @@ octave_fcn_handle::load_binary (std::ist
       else
         success = false;
     }
   else
     {
       std::string octaveroot;
       std::string fpath;
 
-      if (nm.find_first_of ('\n') != std::string::npos)
+      if (m_name.find_first_of ('\n') != std::string::npos)
         {
-          size_t pos1 = nm.find_first_of ('\n');
-          size_t pos2 = nm.find_first_of ('\n', pos1 + 1);
-          octaveroot = nm.substr (pos1 + 1, pos2 - pos1 - 1);
-          fpath = nm.substr (pos2 + 1);
-          nm = nm.substr (0, pos1);
+          size_t pos1 = m_name.find_first_of ('\n');
+          size_t pos2 = m_name.find_first_of ('\n', pos1 + 1);
+          octaveroot = m_name.substr (pos1 + 1, pos2 - pos1 - 1);
+          fpath = m_name.substr (pos2 + 1);
+          m_name = m_name.substr (0, pos1);
         }
 
       success = set_fcn (octaveroot, fpath);
     }
 
   return success;
 }
 
@@ -790,17 +790,17 @@ octave_fcn_handle::save_hdf5 (octave_hdf
   if (group_hid < 0)
     return false;
 
   hid_t space_hid, data_hid, type_hid;
   space_hid = data_hid = type_hid = -1;
 
   // attach the type of the variable
   type_hid = H5Tcopy (H5T_C_S1);
-  H5Tset_size (type_hid, nm.length () + 1);
+  H5Tset_size (type_hid, m_name.length () + 1);
   if (type_hid < 0)
     {
       H5Gclose (group_hid);
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, 2);
   hdims[0] = 0;
@@ -817,26 +817,26 @@ octave_fcn_handle::save_hdf5 (octave_hdf
                         octave_H5P_DEFAULT, octave_H5P_DEFAULT,
                         octave_H5P_DEFAULT);
 #else
   data_hid = H5Dcreate (group_hid, "nm",  type_hid, space_hid,
                         octave_H5P_DEFAULT);
 #endif
   if (data_hid < 0
       || H5Dwrite (data_hid, type_hid, octave_H5S_ALL, octave_H5S_ALL,
-                   octave_H5P_DEFAULT, nm.c_str ()) < 0)
+                   octave_H5P_DEFAULT, m_name.c_str ()) < 0)
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Dclose (data_hid);
 
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
       std::ostringstream buf;
       print_raw (buf, true);
       std::string stmp = buf.str ();
 
       // attach the type of the variable
       H5Tset_size (type_hid, stmp.length () + 1);
       if (type_hid < 0)
@@ -861,17 +861,17 @@ octave_fcn_handle::save_hdf5 (octave_hdf
           H5Sclose (space_hid);
           H5Tclose (type_hid);
           H5Gclose (group_hid);
           return false;
         }
 
       H5Dclose (data_hid);
 
-      octave_user_function *f = fcn.user_function_value ();
+      octave_user_function *f = m_fcn.user_function_value ();
 
       octave_user_function::local_vars_map local_vars
                      = f->local_var_init_vals ();
 
       size_t varlen = local_vars.size ();
 
       if (varlen > 0)
         {
@@ -1095,19 +1095,19 @@ octave_fcn_handle::load_hdf5 (octave_hdf
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Tclose (st_id);
   H5Dclose (data_hid);
-  nm = nm_tmp;
+  m_name = nm_tmp;
 
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
 #if defined (HAVE_HDF5_18)
       data_hid = H5Dopen (group_hid, "fcn", octave_H5P_DEFAULT);
 #else
       data_hid = H5Dopen (group_hid, "fcn");
 #endif
 
       if (data_hid < 0)
@@ -1456,24 +1456,24 @@ octave_fcn_handle::print (std::ostream& 
   newline (os);
 }
 
 void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   bool printed = false;
 
-  if (nm == anonymous)
+  if (m_name == anonymous)
     {
       octave::tree_print_code tpc (os);
 
       // FCN is const because this member function is, so we can't
       // use it to call user_function_value, so we make a copy first.
 
-      octave_value ftmp = fcn;
+      octave_value ftmp = m_fcn;
 
       octave_user_function *f = ftmp.user_function_value ();
 
       if (f)
         {
           octave::tree_parameter_list *p = f->parameter_list ();
 
           os << "@(";
@@ -1499,17 +1499,17 @@ octave_fcn_handle::print_raw (std::ostre
                 tpc.print_fcn_handle_body (e);
             }
 
           printed = true;
         }
     }
 
   if (! printed)
-    octave_print_internal (os, '@' + nm, pr_as_read_syntax,
+    octave_print_internal (os, '@' + m_name, pr_as_read_syntax,
                            current_print_indent_level ());
 }
 
 namespace octave
 {
   // Hmm, should this function be a member of the interpreter class,
   // possibly forwarded to an actual implementation in the
   // tree_evaluator class?
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -52,26 +52,26 @@ private:
 
   typedef std::map<std::string, octave_value> str_ov_map;
 
 public:
 
   static const std::string anonymous;
 
   octave_fcn_handle (void)
-    : fcn (), nm (), m_scope (), m_is_nested (false),
+    : m_fcn (), m_name (), m_scope (), m_is_nested (false),
       m_closure_frames (nullptr)
   { }
 
   octave_fcn_handle (const octave::symbol_scope& scope, const std::string& n)
-    : fcn (), nm (n), m_scope (scope), m_is_nested (false),
+    : m_fcn (), m_name (n), m_scope (scope), m_is_nested (false),
       m_closure_frames (nullptr)
   {
-    if (! nm.empty () && nm[0] == '@')
-      nm = nm.substr (1);
+    if (! m_name.empty () && m_name[0] == '@')
+      m_name = m_name.substr (1);
   }
 
   octave_fcn_handle (const octave::symbol_scope& scope,
                      const octave_value& f,
                      const std::string& n = anonymous);
 
   octave_fcn_handle (const octave_value& f,
                      const std::string& n = anonymous);
@@ -106,19 +106,19 @@ public:
 
   // FIXME: These must go away.  They don't do the right thing for
   // scoping or overloads.
   octave_function * function_value (bool = false);
   octave_user_function * user_function_value (bool = false);
 
   octave_fcn_handle * fcn_handle_value (bool = false) { return this; }
 
-  octave_value fcn_val (void) const { return fcn; }
+  octave_value fcn_val (void) const { return m_fcn; }
 
-  std::string fcn_name (void) const { return nm; }
+  std::string fcn_name (void) const { return m_name; }
 
   void push_closure_context (octave::tree_evaluator& tw);
 
   octave_value workspace (void) const;
 
   bool is_equal_to (const octave_fcn_handle&) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
@@ -136,39 +136,39 @@ public:
 
   bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   // Simple function handles are printed without a newline.
-  bool print_as_scalar (void) const { return nm != anonymous; }
+  bool print_as_scalar (void) const { return m_name != anonymous; }
 
 private:
 
   bool set_fcn (const std::string& octaveroot, const std::string& fpath);
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
 protected:
 
   // The function we are handling (this should be valid for handles to
   // anonymous functions and some other special cases).  Otherwise, we
   // perform dynamic lookup based on the name of the function we are
   // handling and the scope where the funtion handle object was created.
-  octave_value fcn;
+  octave_value m_fcn;
 
   // The function we would find without considering argument types.  We
   // cache this value so that the function_value and user_function_value
   // methods may continue to work.
   octave_value m_generic_fcn;
 
   // The name of the handle, not including the "@".
-  std::string nm;
+  std::string m_name;
 
   // The scope where this object was defined.
   octave::symbol_scope m_scope;
 
   // TRUE means this is a handle to a nested function.
   bool m_is_nested;
 
   // Saved stack frames for handles to nested functions.  This allows us
@@ -179,12 +179,12 @@ protected:
   bool parse_anon_fcn_handle (const std::string& fcn_text);
 
   virtual octave_value_list call (int nargout, const octave_value_list& args);
 };
 
 namespace octave
 {
   extern octave_value
-  make_fcn_handle (interpreter& interp, const std::string& nm);
+  make_fcn_handle (interpreter& interp, const std::string& name);
 }
 
 #endif
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -59,50 +59,50 @@ Open Source Initiative (www.opensource.o
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_inline,
                                      "inline function",
                                      "function_handle");
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
                                       const string_vector& a,
                                       const std::string& n)
-  : octave_fcn_handle (n), iftext (f), ifargs (a)
+  : octave_fcn_handle (n), m_text (f), m_args (a)
 {
   // Form a string representing the function.
 
   std::ostringstream buf;
 
   buf << "@(";
 
-  for (int i = 0; i < ifargs.numel (); i++)
+  for (int i = 0; i < m_args.numel (); i++)
     {
       if (i > 0)
         buf << ", ";
 
-      buf << ifargs(i);
+      buf << m_args(i);
     }
 
-  buf << ") " << iftext;
+  buf << ") " << m_text;
 
   octave::interpreter& interp
     = octave::__get_interpreter__ ("octave_fcn_inline::octave_fcn_inline");
 
   int parse_status;
   octave_value anon_fcn_handle
     = interp.eval_string (buf.str (), true, parse_status);
 
   if (parse_status == 0)
     {
       octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
 
       if (fh)
         {
-          fcn = fh->fcn_val ();
+          m_fcn = fh->fcn_val ();
 
-          octave_user_function *uf = fcn.user_function_value ();
+          octave_user_function *uf = m_fcn.user_function_value ();
 
           if (uf)
             {
               octave::call_stack& cs = interp.get_call_stack ();
 
               octave_function *curr_fcn = cs.current ();
 
               if (curr_fcn)
@@ -114,17 +114,17 @@ octave_fcn_inline::octave_fcn_inline (co
                     parent_scope = curr_fcn->scope ();
 
                   uf->stash_parent_fcn_scope (parent_scope);
                 }
             }
         }
     }
 
-  if (fcn.is_undefined ())
+  if (m_fcn.is_undefined ())
     error ("inline: unable to define function");
 }
 
 // This function is supplied to allow a Matlab style class structure
 // to be returned..
 octave_map
 octave_fcn_inline::map_value (void) const
 {
@@ -147,81 +147,81 @@ octave_fcn_inline::map_value (void) cons
   m.assign ("inputExpr", buf.str ());
 
   return m;
 }
 
 bool
 octave_fcn_inline::save_ascii (std::ostream& os)
 {
-  os << "# nargs: " <<  ifargs.numel () << "\n";
-  for (int i = 0; i < ifargs.numel (); i++)
-    os << ifargs(i) << "\n";
-  if (nm.length () < 1)
+  os << "# nargs: " <<  m_args.numel () << "\n";
+  for (int i = 0; i < m_args.numel (); i++)
+    os << m_args(i) << "\n";
+  if (m_name.length () < 1)
     // Write an invalid value to flag empty fcn handle name.
     os << "0\n";
   else
-    os << nm << "\n";
-  os << iftext << "\n";
+    os << m_name << "\n";
+  os << m_text << "\n";
   return true;
 }
 
 bool
 octave_fcn_inline::load_ascii (std::istream& is)
 {
   int nargs;
   if (extract_keyword (is, "nargs", nargs, true))
     {
-      ifargs.resize (nargs);
+      m_args.resize (nargs);
       for (int i = 0; i < nargs; i++)
-        is >> ifargs(i);
-      is >> nm;
-      if (nm == "0")
-        nm = "";
+        is >> m_args(i);
+      is >> m_name;
+      if (m_name == "0")
+        m_name = "";
 
       skip_preceeding_newline (is);
 
       std::string buf;
 
       if (is)
         {
 
           // Get a line of text whitespace characters included,
           // leaving newline in the stream.
           buf = read_until_newline (is, true);
         }
 
-      iftext = buf;
+      m_text = buf;
 
-      octave_fcn_inline tmp (iftext, ifargs, nm);
-      fcn = tmp.fcn;
+      octave_fcn_inline tmp (m_text, m_args, m_name);
+      m_fcn = tmp.m_fcn;
 
       return true;
     }
   else
     return false;
 }
 
 bool
 octave_fcn_inline::save_binary (std::ostream& os, bool)
 {
-  int32_t tmp = ifargs.numel ();
+  int32_t tmp = m_args.numel ();
   os.write (reinterpret_cast<char *> (&tmp), 4);
-  for (int i = 0; i < ifargs.numel (); i++)
+  for (int i = 0; i < m_args.numel (); i++)
     {
-      tmp = ifargs(i).length ();
+      tmp = m_args(i).length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
-      os.write (ifargs(i).c_str (), ifargs(i).length ());
+      os.write (m_args(i).c_str (), m_args(i).length ());
     }
-  tmp = nm.length ();
+  tmp = m_name.length ();
   os.write (reinterpret_cast<char *> (&tmp), 4);
-  os.write (nm.c_str (), nm.length ());
-  tmp = iftext.length ();
+  os.write (m_name.c_str (), m_name.length ());
+  tmp = m_text.length ();
   os.write (reinterpret_cast<char *> (&tmp), 4);
-  os.write (iftext.c_str (), iftext.length ());
+  os.write (m_text.c_str (), m_text.length ());
   return true;
 }
 
 bool
 octave_fcn_inline::load_binary (std::istream& is, bool swap,
                                 octave::mach_info::float_format)
 {
   int32_t nargs;
@@ -230,58 +230,58 @@ octave_fcn_inline::load_binary (std::ist
   if (swap)
     swap_bytes<4> (&nargs);
 
   if (nargs < 1)
     return false;
   else
     {
       int32_t tmp;
-      ifargs.resize (nargs);
+      m_args.resize (nargs);
       for (int i = 0; i < nargs; i++)
         {
           if (! is.read (reinterpret_cast<char *> (&tmp), 4))
             return false;
           if (swap)
             swap_bytes<4> (&tmp);
 
           OCTAVE_LOCAL_BUFFER (char, ctmp, tmp+1);
           is.read (ctmp, tmp);
-          ifargs(i) = std::string (ctmp);
+          m_args(i) = std::string (ctmp);
 
           if (! is)
             return false;
         }
 
       if (! is.read (reinterpret_cast<char *> (&tmp), 4))
         return false;
       if (swap)
         swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp1, tmp+1);
       is.read (ctmp1, tmp);
-      nm = std::string (ctmp1);
+      m_name = std::string (ctmp1);
 
       if (! is)
         return false;
 
       if (! is.read (reinterpret_cast<char *> (&tmp), 4))
         return false;
       if (swap)
         swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp2, tmp+1);
       is.read (ctmp2, tmp);
-      iftext = std::string (ctmp2);
+      m_text = std::string (ctmp2);
 
       if (! is)
         return false;
 
-      octave_fcn_inline ftmp (iftext, ifargs, nm);
-      fcn = ftmp.fcn;
+      octave_fcn_inline ftmp (m_text, m_args, m_name);
+      m_fcn = ftmp.m_fcn;
     }
   return true;
 }
 
 bool
 octave_fcn_inline::save_hdf5 (octave_hdf5_id loc_id, const char *name,
                               bool /* save_as_floats */)
 {
@@ -295,30 +295,30 @@ octave_fcn_inline::save_hdf5 (octave_hdf
   group_hid = H5Gcreate (loc_id, name, octave_H5P_DEFAULT, octave_H5P_DEFAULT,
                          octave_H5P_DEFAULT);
 #else
   group_hid = H5Gcreate (loc_id, name, 0);
 #endif
   if (group_hid < 0) return false;
 
   size_t len = 0;
-  for (int i = 0; i < ifargs.numel (); i++)
-    if (len < ifargs(i).length ())
-      len = ifargs(i).length ();
+  for (int i = 0; i < m_args.numel (); i++)
+    if (len < m_args(i).length ())
+      len = m_args(i).length ();
 
   hid_t space_hid, data_hid, type_hid;
   space_hid = data_hid = type_hid = -1;
 
   // FIXME: Is there a better way of saving string vectors,
   //        than a null padded matrix?
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, 2);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
-  hdims[1] = ifargs.numel ();
+  hdims[1] = m_args.numel ();
   hdims[0] = len + 1;
 
   space_hid = H5Screate_simple (2, hdims, nullptr);
   if (space_hid < 0)
     {
       H5Gclose (group_hid);
       return false;
     }
@@ -331,42 +331,42 @@ octave_fcn_inline::save_hdf5 (octave_hdf
 #endif
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  OCTAVE_LOCAL_BUFFER (char, s, ifargs.numel () * (len + 1));
+  OCTAVE_LOCAL_BUFFER (char, s, m_args.numel () * (len + 1));
 
   // Save the args as a null teminated list
-  for (int i = 0; i < ifargs.numel (); i++)
+  for (int i = 0; i < m_args.numel (); i++)
     {
-      const char *cptr = ifargs(i).c_str ();
-      for (size_t j = 0; j < ifargs(i).length (); j++)
+      const char *cptr = m_args(i).c_str ();
+      for (size_t j = 0; j < m_args(i).length (); j++)
         s[i*(len+1)+j] = *cptr++;
-      s[ifargs(i).length ()] = '\0';
+      s[m_args(i).length ()] = '\0';
     }
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_CHAR, octave_H5S_ALL, octave_H5S_ALL,
                      octave_H5P_DEFAULT, s) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   if (! retval)
     {
       H5Gclose (group_hid);
       return false;
     }
 
   // attach the type of the variable
   type_hid = H5Tcopy (H5T_C_S1);
-  H5Tset_size (type_hid, nm.length () + 1);
+  H5Tset_size (type_hid, m_name.length () + 1);
   if (type_hid < 0)
     {
       H5Gclose (group_hid);
       return false;
     }
 
   hdims[0] = 0;
   space_hid = H5Screate_simple (0 , hdims, nullptr);
@@ -380,43 +380,43 @@ octave_fcn_inline::save_hdf5 (octave_hdf
   data_hid = H5Dcreate (group_hid, "nm",  type_hid, space_hid,
                         octave_H5P_DEFAULT, octave_H5P_DEFAULT, octave_H5P_DEFAULT);
 #else
   data_hid = H5Dcreate (group_hid, "nm",  type_hid, space_hid,
                         octave_H5P_DEFAULT);
 #endif
   if (data_hid < 0
       || H5Dwrite (data_hid, type_hid, octave_H5S_ALL, octave_H5S_ALL,
-                   octave_H5P_DEFAULT, nm.c_str ()) < 0)
+                   octave_H5P_DEFAULT, m_name.c_str ()) < 0)
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Dclose (data_hid);
 
   // attach the type of the variable
-  H5Tset_size (type_hid, iftext.length () + 1);
+  H5Tset_size (type_hid, m_text.length () + 1);
   if (type_hid < 0)
     {
       H5Gclose (group_hid);
       return false;
     }
 
 #if defined (HAVE_HDF5_18)
   data_hid = H5Dcreate (group_hid, "iftext",  type_hid, space_hid,
                         octave_H5P_DEFAULT, octave_H5P_DEFAULT, octave_H5P_DEFAULT);
 #else
   data_hid = H5Dcreate (group_hid, "iftext",  type_hid, space_hid,
                         octave_H5P_DEFAULT);
 #endif
   if (data_hid < 0
       || H5Dwrite (data_hid, type_hid, octave_H5S_ALL, octave_H5S_ALL,
-                   octave_H5P_DEFAULT, iftext.c_str ()) < 0)
+                   octave_H5P_DEFAULT, m_text.c_str ()) < 0)
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -466,34 +466,34 @@ octave_fcn_inline::load_hdf5 (octave_hdf
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
   OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  ifargs.resize (hdims[1]);
+  m_args.resize (hdims[1]);
 
   OCTAVE_LOCAL_BUFFER (char, s1, hdims[0] * hdims[1]);
 
   if (H5Dread (data_hid, H5T_NATIVE_UCHAR, octave_H5S_ALL, octave_H5S_ALL,
                octave_H5P_DEFAULT, s1) < 0)
     {
       H5Dclose (data_hid);
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   for (size_t i = 0; i < hdims[1]; i++)
-    ifargs(i) = std::string (s1 + i*hdims[0]);
+    m_args(i) = std::string (s1 + i*hdims[0]);
 
 #if defined (HAVE_HDF5_18)
   data_hid = H5Dopen (group_hid, "nm", octave_H5P_DEFAULT);
 #else
   data_hid = H5Dopen (group_hid, "nm");
 #endif
 
   if (data_hid < 0)
@@ -546,17 +546,17 @@ octave_fcn_inline::load_hdf5 (octave_hdf
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Tclose (st_id);
   H5Dclose (data_hid);
-  nm = nm_tmp;
+  m_name = nm_tmp;
 
 #if defined (HAVE_HDF5_18)
   data_hid = H5Dopen (group_hid, "iftext", octave_H5P_DEFAULT);
 #else
   data_hid = H5Dopen (group_hid, "iftext");
 #endif
 
   if (data_hid < 0)
@@ -609,20 +609,20 @@ octave_fcn_inline::load_hdf5 (octave_hdf
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Tclose (st_id);
   H5Dclose (data_hid);
-  iftext = iftext_tmp;
+  m_text = iftext_tmp;
 
-  octave_fcn_inline ftmp (iftext, ifargs, nm);
-  fcn = ftmp.fcn;
+  octave_fcn_inline ftmp (m_text, m_args, m_name);
+  m_fcn = ftmp.m_fcn;
 
   return true;
 
 #else
   octave_unused_parameter (loc_id);
   octave_unused_parameter (name);
 
   warn_load ("hdf5");
@@ -638,30 +638,30 @@ octave_fcn_inline::print (std::ostream& 
   newline (os);
 }
 
 void
 octave_fcn_inline::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   std::ostringstream buf;
 
-  if (nm.empty ())
+  if (m_name.empty ())
     buf << "f(";
   else
-    buf << nm << '(';
+    buf << m_name << '(';
 
-  for (int i = 0; i < ifargs.numel (); i++)
+  for (int i = 0; i < m_args.numel (); i++)
     {
       if (i)
         buf << ", ";
 
-      buf << ifargs(i);
+      buf << m_args(i);
     }
 
-  buf << ") = " << iftext;
+  buf << ") = " << m_text;
 
   octave_print_internal (os, buf.str (), pr_as_read_syntax,
                          current_print_indent_level ());
 }
 
 octave_value
 octave_fcn_inline::convert_to_str_internal (bool, bool, char type) const
 {
diff --git a/libinterp/octave-value/ov-fcn-inline.h b/libinterp/octave-value/ov-fcn-inline.h
--- a/libinterp/octave-value/ov-fcn-inline.h
+++ b/libinterp/octave-value/ov-fcn-inline.h
@@ -38,38 +38,38 @@ along with Octave; see the file COPYING.
 
 class
 OCTINTERP_API
 octave_fcn_inline : public octave_fcn_handle
 {
 public:
 
   octave_fcn_inline (void)
-    : octave_fcn_handle (), iftext (), ifargs () { }
+    : octave_fcn_handle (), m_text (), m_args () { }
 
   octave_fcn_inline (const std::string& f, const string_vector& a,
                      const std::string& n = "");
 
   octave_fcn_inline (const octave_fcn_inline& fi)
-    : octave_fcn_handle (fi), iftext (fi.iftext), ifargs (fi.ifargs) { }
+    : octave_fcn_handle (fi), m_text (fi.m_text), m_args (fi.m_args) { }
 
   ~octave_fcn_inline (void) = default;
 
   octave_base_value * clone (void) const
   { return new octave_fcn_inline (*this); }
   octave_base_value * empty_clone (void) const
   { return new octave_fcn_inline (); }
 
   bool is_inline_function (void) const { return true; }
 
   octave_fcn_inline * fcn_inline_value (bool = false) { return this; }
 
-  std::string fcn_text (void) const { return iftext; }
+  std::string fcn_text (void) const { return m_text; }
 
-  string_vector fcn_arg_names (void) const { return ifargs; }
+  string_vector fcn_arg_names (void) const { return m_args; }
 
   octave_value convert_to_str_internal (bool, bool, char) const;
 
   octave_map map_value (void) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
@@ -87,15 +87,15 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   // The expression of an inline function.
-  std::string iftext;
+  std::string m_text;
 
   // The args of an inline function.
-  string_vector ifargs;
+  string_vector m_args;
 };
 
 #endif
