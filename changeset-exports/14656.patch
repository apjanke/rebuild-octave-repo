# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1337385561 -7200
#      Sat May 19 01:59:21 2012 +0200
# Node ID 8d2ce821e38a4af3c79d9392ea430f01fa8c85cc
# Parent  43db83eff9dbe7100c684cd2f8c6e39c98ca888d
Ensure sparse constructors have valid ridx and data indices even if they are zero matrices (bug #36104)

diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -230,17 +230,17 @@ Sparse<T>::Sparse (octave_idx_type nr, o
 template <class T>
 Sparse<T>::Sparse (const dim_vector& dv)
   : rep (0), dimensions (dv)
 {
   if (dv.length() != 2)
     (*current_liboctave_error_handler)
       ("Sparse::Sparse (const dim_vector&): dimension mismatch");
   else
-    rep = new typename Sparse<T>::SparseRep (dv(0), dv(1));
+    rep = new typename Sparse<T>::SparseRep (dv(0), dv(1), 0);
 }
 
 template <class T>
 Sparse<T>::Sparse (const Sparse<T>& a, const dim_vector& dv)
   : rep (0), dimensions (dv)
 {
 
   // Work in unsigned long long to avoid overflow issues with numel
@@ -296,21 +296,20 @@ Sparse<T>::Sparse (const Array<T>& a, co
                                         r.extent (nr), nr);
 
   if (nc < 0)
     nc = c.extent (0);
   else if (c.extent (nc) > nc)
     (*current_liboctave_error_handler)
       ("sparse: column index %d out of bound %d", r.extent (nc), nc);
 
-  rep = new SparseRep (nr, nc);
+  rep = new typename Sparse<T>::SparseRep (nr, nc, (nzm > 0 ? nzm : 0));
 
   dimensions = dim_vector (nr, nc);
 
-
   octave_idx_type n = a.numel (), rl = r.length (nr), cl = c.length (nc);
   bool a_scalar = n == 1;
   if (a_scalar)
     {
       if (rl != 1)
         n = rl;
       else if (cl != 1)
         n = cl;
@@ -319,16 +318,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
   if ((rl != 1 && rl != n) || (cl != 1 && cl != n))
     (*current_liboctave_error_handler) ("sparse: dimension mismatch");
 
   if (rl <= 1 && cl <= 1)
     {
       if (n == 1 && a(0) != T ())
         {
           change_capacity (nzm > 1 ? nzm : 1);
+          xcidx(0) = 0;
           xridx(0) = r(0);
           xdata(0) = a(0);
           for (octave_idx_type j = 0; j < nc; j++)
             xcidx(j+1) = j >= c(0);
         }
     }
   else if (a_scalar)
     {
@@ -347,16 +347,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
 
           const octave_idx_type *rd = rs.raw ();
           // Count unique indices.
           octave_idx_type new_nz = 1;
           for (octave_idx_type i = 1; i < n; i++)
             new_nz += rd[i-1] != rd[i];
           // Allocate result.
           change_capacity (nzm > new_nz ? nzm : new_nz);
+          xcidx (0) = 0;
           xcidx (1) = new_nz;
           octave_idx_type *rri = ridx ();
           T *rrd = data ();
 
           octave_quit ();
 
           octave_idx_type k = -1, l = -1;
 
@@ -489,16 +490,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
 
       const octave_idx_type *rd = rs.raw (), *rdi = rsi.data ();
       // Count unique indices.
       octave_idx_type new_nz = 1;
       for (octave_idx_type i = 1; i < n; i++)
         new_nz += rd[i-1] != rd[i];
       // Allocate result.
       change_capacity (nzm > new_nz ? nzm : new_nz);
+      xcidx(0) = 0;
       xcidx(1) = new_nz;
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       octave_quit ();
 
       octave_idx_type k = 0;
       rri[k] = rd[0];
