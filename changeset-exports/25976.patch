# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1540844713 -3600
#      Mon Oct 29 21:25:13 2018 +0100
# Node ID a7cc5b7a3d225e07bf91ad5d8b6417565cfa5e14
# Parent  9fdc4c435a1523ef1b444bcee8a12a5364bcadd6
provide shortcuts for zooming into the doc browser (bug #54877)

* documentation.cc (documentation::documentation): initialize new shortcuts
  with values for editor zoom shortcuts and connect them to the related
  slots of the documentation_browser;
  (documentation_browser::documentation_browser): initialize the new
  class variable for storing the current zoom level
  (documentation_browser::zoom_in): new slot for zooming in;
  (documentation_browser::zoom_out): new slot for zooming out;
  (documentation_browser::zoom_normal): new slot for resetting the zoom level

* documentation.h: updated some comments;
  (class documentation_browser): new slots for zooming in, out and resetting,
  new constants for min and max zoom level,
  new class variable for storing the current zoom level;
  (class documentation): new shortcuts for zooming in, out and resetting

* shortcut-manager.cc (do_fill_treewidget): new section for zooming in editor
  and doc browser, add zoom shortcuts to this section

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -52,17 +52,20 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   // The documentation splitter, which is the main widget
   // of the doc dock widget
   documentation::documentation (QWidget *p)
     : QSplitter (Qt::Horizontal, p),
       m_show_shortcut (new QShortcut (p)),
       m_findnext_shortcut (new QShortcut (p)),
-      m_findprev_shortcut (new QShortcut (p))
+      m_findprev_shortcut (new QShortcut (p)),
+      m_zoom_in_shortcut (new QShortcut (p)),
+      m_zoom_out_shortcut (new QShortcut (p)),
+      m_zoom_normal_shortcut (new QShortcut (p))
   {
     // Get original collection
     QString collection = getenv ("OCTAVE_QTHELP_COLLECTION");
     if (collection.isEmpty ())
       collection = QString::fromStdString (config::oct_doc_dir ()
                                            + sys::file_ops::dir_sep_str ()
                                            + "octave_interpreter.qhc");
 
@@ -158,16 +161,27 @@ namespace octave
              this, SLOT(find_forward (void)));
     m_findprev_shortcut->setContext (Qt::WidgetWithChildrenShortcut);
     connect (m_findprev_shortcut, SIGNAL (activated (void)),
              this, SLOT(find_backward (void)));
 
     find_footer->hide ();
     m_search_anchor_position = 0;
 
+    // Zoom Shortcuts
+    m_zoom_in_shortcut->setContext (Qt::WidgetWithChildrenShortcut);
+    connect (m_zoom_in_shortcut, SIGNAL (activated (void)),
+             m_doc_browser, SLOT (zoom_in (void)));
+    m_zoom_out_shortcut->setContext (Qt::WidgetWithChildrenShortcut);
+    connect (m_zoom_out_shortcut, SIGNAL (activated (void)),
+             m_doc_browser, SLOT (zoom_out (void)));
+    m_zoom_normal_shortcut->setContext (Qt::WidgetWithChildrenShortcut);
+    connect (m_zoom_normal_shortcut, SIGNAL (activated (void)),
+             m_doc_browser, SLOT (zoom_normal (void)));
+
     // Layout contents, index and search
     QTabWidget *navi = new QTabWidget (this);
     navi->setTabsClosable (false);
     navi->setMovable (true);
 
     // Contents
     QHelpContentWidget *content = m_help_engine->contentWidget ();
     content->setObjectName ("documentation_tab_contents");
@@ -367,16 +381,19 @@ namespace octave
     qApp->restoreOverrideCursor();
   }
 
   void documentation::notice_settings (const QSettings *)
   {
     shortcut_manager::shortcut (m_show_shortcut, "editor_edit:find_replace");
     shortcut_manager::shortcut (m_findnext_shortcut, "editor_edit:find_next");
     shortcut_manager::shortcut (m_findprev_shortcut, "editor_edit:find_previous");
+    shortcut_manager::shortcut (m_zoom_in_shortcut, "editor_view:zoom_in");
+    shortcut_manager::shortcut (m_zoom_out_shortcut, "editor_view:zoom_out");
+    shortcut_manager::shortcut (m_zoom_normal_shortcut, "editor_view:zoom_normal");
   }
 
   void documentation::copyClipboard (void)
   {
     if (m_doc_browser->hasFocus ())
       {
         m_doc_browser->copy();
       }
@@ -546,17 +563,17 @@ namespace octave
         m_help_engine->unregisterDocumentation (ns);
         m_help_engine->setupData ();
       }
   }
 
 
   // The documentation browser
   documentation_browser::documentation_browser (QHelpEngine *he, QWidget *p)
-    : QTextBrowser (p), m_help_engine (he)
+    : QTextBrowser (p), m_help_engine (he), m_zoom_level (0)
   { }
 
   documentation_browser::~documentation_browser (void)
   { }
 
   void documentation_browser::handle_index_clicked (const QUrl& url,
                                                     const QString&)
   {
@@ -568,9 +585,33 @@ namespace octave
 
   QVariant documentation_browser::loadResource (int type, const QUrl &url)
   {
     if (url.scheme () == "qthelp")
       return QVariant (m_help_engine->fileData(url));
     else
       return QTextBrowser::loadResource(type, url);
   }
+
+  void documentation_browser::zoom_in (void)
+  {
+    if (m_zoom_level < max_zoom_level)
+      {
+        zoomIn ();
+        m_zoom_level++;
+      }
+  }
+
+  void documentation_browser::zoom_out (void)
+  {
+    if (m_zoom_level > min_zoom_level)
+      {
+        zoomOut ();
+        m_zoom_level--;
+      }
+  }
+
+  void documentation_browser::zoom_normal (void)
+  {
+    zoomIn (- m_zoom_level);
+    m_zoom_level = 0;
+  }
 }
diff --git a/libgui/src/documentation.h b/libgui/src/documentation.h
--- a/libgui/src/documentation.h
+++ b/libgui/src/documentation.h
@@ -28,17 +28,18 @@ along with Octave; see the file COPYING.
 #include <QSettings>
 #include <QShortcut>
 #include <QSplitter>
 #include <QTextBrowser>
 #include <QtHelp/QHelpEngine>
 
 namespace octave
 {
-  // The documentation browser
+  //! Documentation browser derived from Textbrowser
+
   class documentation_browser : public QTextBrowser
   {
     Q_OBJECT
 
   public:
 
     documentation_browser (QHelpEngine *help_engine, QWidget *parent = nullptr);
     ~documentation_browser (void);
@@ -46,23 +47,43 @@ namespace octave
     virtual QVariant loadResource (int type, const QUrl &url);
 
   public slots:
 
     void handle_index_clicked (const QUrl& url,
                                const QString& keyword = QString ());
     void notice_settings (const QSettings *settings);
 
+    //! Zooming in and out while taking care of the zoom level
+    //!@{
+    void zoom_in (void);
+    void zoom_out (void);
+    void zoom_normal (void);
+    //!@}
+
   private:
 
     QHelpEngine *m_help_engine;
+
+    //! Store the current zoom level
+    int m_zoom_level;
+
+    //! Minimal and maximal zoom level avoiding calling
+    //! zoom_in and zoom_out without actually zooming but
+    //! with changing the stored zoom level
+    enum
+    {
+      min_zoom_level = -5,
+      max_zoom_level = 10
+    };
   };
 
 
-  // The documentaiton main class (splitter)
+  //! The documentaiton main class derived from QSplitter
+
   class documentation : public QSplitter
   {
     Q_OBJECT
 
   public:
 
     documentation (QWidget *parent = nullptr);
     ~documentation (void);
@@ -100,15 +121,19 @@ namespace octave
 
     QHelpEngine *m_help_engine;
     QString m_internal_search;
     documentation_browser *m_doc_browser;
     QLineEdit *m_find_line_edit;
     int m_search_anchor_position;
     QComboBox *m_filter;
     QString m_collection;
+
     QShortcut *m_show_shortcut;
     QShortcut *m_findnext_shortcut;
     QShortcut *m_findprev_shortcut;
+    QShortcut *m_zoom_in_shortcut;
+    QShortcut *m_zoom_out_shortcut;
+    QShortcut *m_zoom_normal_shortcut;
   };
 }
 
 #endif
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -547,26 +547,29 @@ namespace octave
     QTreeWidgetItem *main_help = new QTreeWidgetItem (main);
     main_help->setText (0, tr ("Help Menu"));
     QTreeWidgetItem *main_news = new QTreeWidgetItem (main);
     main_news->setText (0, tr ("News Menu"));
     QTreeWidgetItem *main_tabs = new QTreeWidgetItem (main);
     main_tabs->setText (0, tr ("Tab Handling in Dock Widgets"));
     QTreeWidgetItem *main_find = new QTreeWidgetItem (main);
     main_find->setText (0, tr ("Find & Replace in Dock Widgets"));
+    QTreeWidgetItem *main_zoom = new QTreeWidgetItem (main);
+    main_zoom->setText (0, tr ("Zooming in Editor and Documentation"));
 
     m_level_hash["main_file"]   = main_file;
     m_level_hash["main_edit"]   = main_edit;
     m_level_hash["main_debug"]   = main_debug;
     m_level_hash["main_window"]   = main_window;
     m_level_hash["main_help"]   = main_help;
     m_level_hash["main_news"]   = main_news;
     m_level_hash["main_tabs"]   = main_tabs;
     m_level_hash["editor_tabs"]   = main_tabs;
     m_level_hash["editor_find"]   = main_find;
+    m_level_hash["editor_zoom"]   = main_zoom;
 
     QTreeWidgetItem *editor = new QTreeWidgetItem (tree_view);
     editor->setText (0, tr ("Editor"));
     editor->setExpanded (true);
     QTreeWidgetItem *editor_file = new QTreeWidgetItem (editor);
     editor_file->setText (0, tr ("File Menu"));
     QTreeWidgetItem *editor_edit = new QTreeWidgetItem (editor);
     editor_edit->setText (0, tr ("Edit Menu"));
@@ -604,16 +607,22 @@ namespace octave
               section = main_tabs;
           }
         if (section == editor_edit)
           {
             // Find & replace now in global file & replace handling section
             if (sc.m_settings_key.contains ("editor_edit:find"))
               section = main_find;
           }
+        if (section == editor_view)
+          {
+            // Zooming now in global zoom handling section
+            if (sc.m_settings_key.contains ("editor_view:zoom"))
+              section = main_zoom;
+          }
 
         QTreeWidgetItem *tree_item = new QTreeWidgetItem (section);
 
         // set a slightly transparent foreground for default columns
         QColor fg = QColor (tree_item->foreground (1).color ());
         fg.setAlpha (128);
         tree_item->setForeground (1, QBrush (fg));
 
