# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1444675744 -7200
#      Mon Oct 12 20:49:04 2015 +0200
# Node ID 395140e536560c43256af107ca58e2945595f143
# Parent  4e307c55a2b5c26d87bdbe46c17a5e10ea676e48
Fix regression in svg output and simplify viewport handling (bug #44765)

* gl2ps-renderer.cc (glps-renderer::draw): remove check for GL2PS_NO_FEEDBACK, it it always true after EndViewport

* gl2ps-renderer.h (glps-renderer::draw_axes): call gl2psBegin(End)Viewport for every axes and check for GL2PS_NO_FEEDBACK after each axes.

* gl2ps-renderer.h (glps-renderer::draw_axes):remove unnecessary "naxes" attribute

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -132,27 +132,23 @@ glps_renderer::draw (const graphics_obje
               error ("gl2ps-renderer::draw: gl2psBeginPage returned GL2PS_ERROR");
               return;
             }
 
           old_print_cmd = print_cmd;
 
           opengl_renderer::draw (go);
 
-          // Without glFinish () there may primitives be missing in the
+          // Without glFinish () there may be primitives missing in the
           // gl2ps output.
           glFinish ();
 
           state = gl2psEndPage ();
 
-          if (state == GL2PS_NO_FEEDBACK)
-            {
-              warning ("gl2ps-renderer::draw: empty feedback buffer and/or nothing else to print");
-            }
-          else if (state == GL2PS_ERROR)
+          if (state == GL2PS_ERROR)
             {
               old_print_cmd.clear ();
               error ("gl2ps-renderer::draw: gl2psEndPage returned GL2PS_ERROR");
               return;
             }
 
           // Don't check state for GL2PS_UNINITIALIZED (should never happen)
           // GL2PS_OVERFLOW (see while loop) or GL2PS_SUCCESS
diff --git a/libinterp/corefcn/gl2ps-renderer.h b/libinterp/corefcn/gl2ps-renderer.h
--- a/libinterp/corefcn/gl2ps-renderer.h
+++ b/libinterp/corefcn/gl2ps-renderer.h
@@ -32,46 +32,46 @@ along with Octave; see the file COPYING.
 
 class
 OCTINTERP_API
 glps_renderer : public opengl_renderer
 {
 public:
   glps_renderer (FILE *_fp, const std::string& _term)
     : opengl_renderer () , fp (_fp), term (_term), fontsize (), 
-    fontname (), naxes (0) { }
+    fontname () { }
 
   ~glps_renderer (void) { }
 
   void draw (const graphics_object& go, const std::string& print_cmd);
 
 protected:
 
   Matrix render_text (const std::string& txt,
                       double x, double y, double z,
                       int halign, int valign, double rotation = 0.0);
 
   void set_font (const base_properties& props);
 
   void draw_axes (const axes::properties& props)
   {
-    // Finish previous sorting tree here, the last one will be closed 
-    // by gl2psEndPage ()
-    if (naxes++)
-      gl2psEndViewport ();
-      
-    // Initialize a sorting tree in gl2ps for each axes
+    // Initialize a sorting tree (viewport) in gl2ps for each axes
     GLint vp[4];
     glGetIntegerv (GL_VIEWPORT, vp);
     gl2psBeginViewport (vp);
 
     // Draw and  glFinish () or there may primitives missing in the
     // gl2ps output.
     opengl_renderer::draw_axes (props);
     glFinish ();
+
+    // Finalize viewport
+    GLint state = gl2psEndViewport ();
+    if (state == GL2PS_NO_FEEDBACK)
+      warning ("gl2ps-renderer::draw: empty feedback buffer and/or nothing else to print");
   }
 
   void draw_text (const text::properties& props);
   void draw_pixels (GLsizei w, GLsizei h, GLenum format,
                     GLenum type, const GLvoid *data);
 
   void set_linestyle (const std::string& s, bool use_stipple = false)
   {
@@ -103,17 +103,16 @@ protected:
   }
 
 private:
   int alignment_to_mode (int ha, int va) const;
   FILE *fp;
   caseless_str term;
   double fontsize;
   std::string fontname;
-  int naxes;
 };
 
 #endif  // HAVE_GL2PS_H
 
 extern OCTINTERP_API void
 gl2ps_print (const graphics_object& fig, const std::string& cmd,
              const std::string& term);
 
