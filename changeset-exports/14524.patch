# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1333557000 14400
#      Wed Apr 04 12:30:00 2012 -0400
# Node ID 27f028a670b478a8aa47c332aacd2c87ca89ffe6
# Parent  c541f7addf2546826089219341eea757774bfc53
avoid nesting sprintf inside calls to error

* splinefit.m: Avoid unnecessary calls to sprintf.

diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -176,42 +176,41 @@ function pp = splinefit (x, y, breaks, v
     catch
       print_usage ();
     end_try_catch
   else
     props = struct ();
   endif
   fields = fieldnames (props);
   for f = 1:numel(fields)
-    if (! any (strcmp (fields{f}, {"periodic", "robust", "beta", ...
-                                   "order", "constraints"})))
-      error (sprintf ("%s:invalidproperty", mfilename ()),
-             sprintf ("""%s"" is not recongizied", fields{f}))
+    if (! any (strcmp (fields{f},
+                       {"periodic", "robust", "beta", "order", "constraints"})))
+      error ("splinefit:invalidproperty",
+             "unrecognized property '%s'", fields{f});
     endif
   endfor
   args = {};
   if (isfield (props, "periodic") && props.periodic)
     args{end+1} = "p";
   endif
   if (isfield (props, "robust") && props.robust)
     args{end+1} = "r";
   endif
   if (isfield (props, "beta"))
     if (0 < props.beta && props.beta < 1)
       args{end+1} = props.beta;
     else
-      error (sprintf ("%s:invalidbeta", mfilename),
-             "Invalid beta parameter (0 < beta < 1)")
+      error ("splinefit:invalidbeta", "invalid beta parameter (0 < beta < 1)");
     endif
   endif
   if (isfield (props, "order"))
     if (props.order >= 0)
       args{end+1} = props.order + 1;
     else
-      error (sprintf ("%s:invalidorder", mfilename), "Invalid order")
+      error ("splinefit:invalidorder", "invalid order");
     endif
   endif
   if (isfield (props, "constraints"))
     args{end+1} = props.constraints;
   endif
   if (nargin < 3)
     print_usage ();
   elseif (! isnumeric (breaks) || ! isvector (breaks))
