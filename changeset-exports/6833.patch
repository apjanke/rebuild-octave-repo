# HG changeset patch
# User jwe
# Date 1188235371 0
#      Mon Aug 27 17:22:51 2007 +0000
# Node ID e8a18d38009707d13cfc1d9e4ee76eb89c1f9296
# Parent  3c500bc71e148da9fe7f1a5880ce74e9617ea817
[project @ 2007-08-27 17:22:50 by jwe]

diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -40,17 +40,17 @@ public:
 
   Cell (void)
     : ArrayN<octave_value> (dim_vector (0, 0)) { }
 
   Cell (const octave_value& val)
     : ArrayN<octave_value> (dim_vector (1, 1), val) { }
 
   Cell (const octave_value_list& ovl)
-    : ArrayN<octave_value> (dim_vector (ovl.length (), 1))
+    : ArrayN<octave_value> (dim_vector (1, ovl.length ()))
     {
       for (octave_idx_type i = 0; i < ovl.length (); i++)
 	elem (i) = ovl (i);
     }
 
   Cell (octave_idx_type n, octave_idx_type m, const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dim_vector (n, m), val) { }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2007-08-27  John W. Eaton  <jwe@octave.org>
+
+	* Cell.h (Cell::Cell (const octave_value_list&)): Create row
+	vector instead of column vector.
+
+	* pt-idx.cc (tree_index_expression::lvalue): Handle [x.a] =
+	... style assignments.
+	* ov-struct.cc (octave_struct::subsasgn): Handle case of RHS as
+	comma-separated list.
+
+	* ov-cell.cc (gripe_failed_assignment): New function.
+	(octave_cell::subsasgn): Call gripe_failed_assignment if assign
+	methods fail.
+
 2007-08-24  David Bateman  <dbateman@free.fr>
 
 	* symtab.cc (void symbol_table::clear (void)): If the record in
 	the symbol table to clear is a user function that is a sub
 	function with a static parent or if the parent is the current
 	parent function, don't delete the record.
 	(void symbol_table::clear_functions (void)): ditto.
 	(void symbol_table::clear (const std::string&)): ditto.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -54,16 +54,22 @@ 02110-1301, USA.
 #include "ls-utils.h"
 
 template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
+static void
+gripe_failed_assignment (void)
+{
+  error ("assignment to cell array failed");
+}
+
 octave_value_list
 octave_cell::subsref (const std::string& type,
 		      const std::list<octave_value_list>& idx, int nargout)
 {
   octave_value_list retval;
 
   switch (type[0])
     {
@@ -223,18 +229,23 @@ octave_cell::subsasgn (const std::string
 	    if (t_rhs.is_cell ())
 	      octave_base_matrix<Cell>::assign (i, t_rhs.cell_value ());
 	    else
 	      if (t_rhs.is_empty ())
 		octave_base_matrix<Cell>::assign (i, Cell());
 	      else
 		octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
-	    count++;
-	    retval = octave_value (this);
+	    if (! error_state)
+	      {
+		count++;
+		retval = octave_value (this);
+	      }
+	    else
+	      gripe_failed_assignment ();
 	  }
 	  break;
 
 	case '{':
 	  {
 	    octave_value_list i = idx.front ();
 
 	    if (t_rhs.is_cs_list ())
@@ -245,18 +256,23 @@ octave_cell::subsasgn (const std::string
 		// RHS don't match the dimensions of the subscripted
 		// LHS.
 
 		octave_base_matrix<Cell>::assign (i, tmp_cell);
 	      }
 	    else
 	      octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
-	    count++;
-	    retval = octave_value (this);
+	    if (! error_state)
+	      {
+		count++;
+		retval = octave_value (this);
+	      }
+	    else
+	      gripe_failed_assignment ();
 	  }
 	  break;
 
 	case '.':
 	  {
 	    std::string nm = type_name ();
 	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
 	  }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -358,17 +358,28 @@ octave_struct::subsasgn (const std::stri
 	case '.':
 	  {
 	    octave_value_list key_idx = idx.front ();
 
 	    assert (key_idx.length () == 1);
 
 	    std::string key = key_idx(0).string_value ();
 
-	    map.assign (key, t_rhs);
+	    if (t_rhs.is_cs_list ())
+	      {
+		Cell tmp_cell = Cell (t_rhs.list_value ());
+
+		// FIXME -- shouldn't care if the dimensions of the
+		// RHS don't match the dimensions of the subscriped
+		// LHS.
+
+		map.assign (key, tmp_cell);
+	      }
+	    else
+	      map.assign (key, t_rhs);
 
 	    if (! error_state)
 	      {
 		count++;
 		retval = octave_value (this);
 	      }
 	    else
 	      gripe_failed_assignment ();
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -471,19 +471,32 @@ tree_index_expression::lvalue (void)
 			retval.numel (nel);
 		      }
 		  }
 	      }
 	      break;
 
 	    case '.':
 	      {
-		idx.push_back (octave_value (get_struct_index (p_arg_nm, p_dyn_field)));
+		octave_value tidx = get_struct_index (p_arg_nm, p_dyn_field);
+
+		if (! error_state)
+		  {
+		    idx.push_back (tidx);
 
-		if (error_state)
+		    if (i == n-1)
+		      {
+			// Last indexing element.  Will this result in a
+			// comma-separated list?
+
+			if (first_retval_object.is_map ())
+			  retval.numel (first_retval_object.numel ());
+		      }
+		  }
+		else
 		  eval_error ();
 	      }
 	      break;
 
 	    default:
 	      panic_impossible ();
 	    }
 
