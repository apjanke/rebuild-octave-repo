# HG changeset patch
# User jwe
# Date 951811195 0
#      Tue Feb 29 07:59:55 2000 +0000
# Node ID de4471c26cd3259d4cfe3a1f8d5d05b1031d86b1
# Parent  83889344cbefb6da2fc92abf5e68696071ede52f
[project @ 2000-02-29 07:59:54 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2000-02-29  Ben Sapp <bsapp@nua.lampf.lanl.gov>
+
+	* examples/make_int.cc (make_int): Handle new operator names.
+
 2000-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octMakefile.in (maintainer-clean distclean): Don't delete Makefile.
 	(dist): Delete stamp-auto.
 
 2000-02-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (octincludedir): Delete trailing /octave here.
diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -261,42 +261,42 @@ Creates an integer variable from VAL.")
 
   if (! type_loaded)
     {
       octave_integer::register_type ();
 
       cerr << "installing integer type at type-id = "
 	   << octave_integer::static_type_id () << "\n";
 
-      INSTALL_UNOP (not, octave_integer, not);
-      INSTALL_UNOP (uminus, octave_integer, uminus);
-      INSTALL_UNOP (transpose, octave_integer, transpose);
-      INSTALL_UNOP (hermitian, octave_integer, hermitian);
+      INSTALL_UNOP (op_not, octave_integer, not);
+      INSTALL_UNOP (op_uminus, octave_integer, uminus);
+      INSTALL_UNOP (op_transpose, octave_integer, transpose);
+      INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
 
-      INSTALL_NCUNOP (incr, octave_integer, incr);
-      INSTALL_NCUNOP (decr, octave_integer, decr);
+      INSTALL_NCUNOP (op_incr, octave_integer, incr);
+      INSTALL_NCUNOP (op_decr, octave_integer, decr);
 
-      INSTALL_BINOP (add, octave_integer, octave_integer, add);
-      INSTALL_BINOP (sub, octave_integer, octave_integer, sub);
-      INSTALL_BINOP (mul, octave_integer, octave_integer, mul);
-      INSTALL_BINOP (div, octave_integer, octave_integer, div);
-      INSTALL_BINOP (ldiv, octave_integer, octave_integer, ldiv);
-      INSTALL_BINOP (lt, octave_integer, octave_integer, lt);
-      INSTALL_BINOP (le, octave_integer, octave_integer, le);
-      INSTALL_BINOP (eq, octave_integer, octave_integer, eq);
-      INSTALL_BINOP (ge, octave_integer, octave_integer, ge);
-      INSTALL_BINOP (gt, octave_integer, octave_integer, gt);
-      INSTALL_BINOP (ne, octave_integer, octave_integer, ne);
-      INSTALL_BINOP (el_mul, octave_integer, octave_integer, el_mul);
-      INSTALL_BINOP (el_div, octave_integer, octave_integer, el_div);
-      INSTALL_BINOP (el_ldiv, octave_integer, octave_integer, el_ldiv);
-      INSTALL_BINOP (el_and, octave_integer, octave_integer, el_and);
-      INSTALL_BINOP (el_or, octave_integer, octave_integer, el_or);
+      INSTALL_BINOP (op_add, octave_integer, octave_integer, add);
+      INSTALL_BINOP (op_sub, octave_integer, octave_integer, sub);
+      INSTALL_BINOP (op_mul, octave_integer, octave_integer, mul);
+      INSTALL_BINOP (op_div, octave_integer, octave_integer, div);
+      INSTALL_BINOP (op_ldiv, octave_integer, octave_integer, ldiv);
+      INSTALL_BINOP (op_lt, octave_integer, octave_integer, lt);
+      INSTALL_BINOP (op_le, octave_integer, octave_integer, le);
+      INSTALL_BINOP (op_eq, octave_integer, octave_integer, eq);
+      INSTALL_BINOP (op_ge, octave_integer, octave_integer, ge);
+      INSTALL_BINOP (op_gt, octave_integer, octave_integer, gt);
+      INSTALL_BINOP (op_ne, octave_integer, octave_integer, ne);
+      INSTALL_BINOP (op_el_mul, octave_integer, octave_integer, el_mul);
+      INSTALL_BINOP (op_el_div, octave_integer, octave_integer, el_div);
+      INSTALL_BINOP (op_el_ldiv, octave_integer, octave_integer, el_ldiv);
+      INSTALL_BINOP (op_el_and, octave_integer, octave_integer, el_and);
+      INSTALL_BINOP (op_el_or, octave_integer, octave_integer, el_or);
 
-      INSTALL_BINOP (div, octave_integer, octave_scalar, i_s_div);
+      INSTALL_BINOP (op_div, octave_integer, octave_scalar, i_s_div);
     }
 
   octave_value retval;
 
   if (args.length () == 1)
     {
       double d = args(0).double_value ();
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2000-02-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/base/bode.m: Temporarily disable automatic_replot.
+
 2000-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (clean): Also remove gethelp.
 
 	* specfun/erfinv.m: Use z_new in convergence test, not z_old.
 
 2000-02-11  Georg Thimm <mgeorg@SGraphicsWS1.mpe.ntu.edu.sg>
 
diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -140,81 +140,87 @@ function [mag_r, phase_r, w_r] = bode (s
   systsam = sysgettsam(sys);
 
   ## Get the magnitude and phase of f.
   mag = abs(f);
   phase = arg(f)*180.0/pi;
 
   if (nargout < 1),
     ## Plot the information
-    if(gnuplot_has_multiplot)
-      oneplot();
-    endif
-    gset autoscale;
-    if(gnuplot_has_multiplot)
-      gset nokey;
-    endif
-    clearplot();
-    gset data style lines;
-    if(is_digital(sys))
-      xlstr = ["Digital frequency w=rad/sec.  pi/T=",num2str(pi/systsam)];
-      tistr = "(exp(jwT)) ";
-    else
-      xlstr = "Frequency in rad/sec";
-      tistr = "(jw)";
-    endif
-    xlabel(xlstr);
-    if(is_siso(sys))
-      if (gnuplot_has_multiplot)
-        subplot(2,1,1);
+    save_automatic_replot = automatic_replot;
+    unwind_protect
+      automatic_replot = 0;
+      if(gnuplot_has_multiplot)
+	oneplot();
+      endif
+      gset autoscale;
+      if(gnuplot_has_multiplot)
+	gset nokey;
+      endif
+      clearplot();
+      gset data style lines;
+      if(is_digital(sys))
+	xlstr = ["Digital frequency w=rad/sec.  pi/T=",num2str(pi/systsam)];
+	tistr = "(exp(jwT)) ";
+      else
+	xlstr = "Frequency in rad/sec";
+	tistr = "(jw)";
+      endif
+      xlabel(xlstr);
+      if(is_siso(sys))
+	if (gnuplot_has_multiplot)
+	  subplot(2,1,1);
+	endif
+	title(["|[Y/U]",tistr,"|, u=", nth(inname,1),", y=",nth(outname,1)]);
+      else
+	title([ "||Y(", tistr, ")/U(", tistr, ")||"]);
+	disp("MIMO plot from")
+	disp(__outlist__(inname,"     "));
+	disp("to")
+	disp(__outlist__(outname,"    "));
       endif
-      title(["|[Y/U]",tistr,"|, u=", nth(inname,1),", y=",nth(outname,1)]);
-    else
-      title([ "||Y(", tistr, ")/U(", tistr, ")||"]);
-      disp("MIMO plot from")
-      disp(__outlist__(inname,"     "));
-      disp("to")
-      disp(__outlist__(outname,"    "));
-    endif
-    wv = [min(w), max(w)];
-    if(do_db_plot && max(mag) > 0)
-      ylabel("Gain in dB");
-      md = 20*log10(mag);
-      axvec = axis2dlim([vec(w),vec(md)]);
-      axvec(1:2) = wv;
-      axis(axvec);
-    else
-      ylabel("Gain |Y/U|")
-      md = mag;
-    endif
+      wv = [min(w), max(w)];
+      if(do_db_plot && max(mag) > 0)
+	ylabel("Gain in dB");
+	md = 20*log10(mag);
+	axvec = axis2dlim([vec(w),vec(md)]);
+	axvec(1:2) = wv;
+	axis(axvec);
+      else
+	ylabel("Gain |Y/U|")
+	md = mag;
+      endif
 
-    grid("on");
-    if (do_db_plot)
-      semilogx(w,md);
-    else
-      loglog(w,md);
-    endif
-    if (is_siso(sys))
-      if (gnuplot_has_multiplot)
-        subplot(2,1,2);
+      grid("on");
+      if (do_db_plot)
+	semilogx(w,md);
       else
-        prompt("Press any key for phase plot");
+	loglog(w,md);
       endif
-      axvec = axis2dlim([vec(w),vec(phase)]);
-      axvec(1:2) = wv;
-      axis(axvec);
-      xlabel(xlstr);
-      ylabel("Phase in deg");
-      title([ "phase([Y/U]", tistr, ...
-         "), u=", nth(inname,1),", y=",nth(outname,1)]);
-      grid("on");
-      semilogx(w,phase);
-      ## This should be the default for subsequent plot commands.
-      if(gnuplot_has_multiplot)
-        oneplot();
+      if (is_siso(sys))
+	if (gnuplot_has_multiplot)
+	  subplot(2,1,2);
+	else
+	  prompt("Press any key for phase plot");
+	endif
+	axvec = axis2dlim([vec(w),vec(phase)]);
+	axvec(1:2) = wv;
+	axis(axvec);
+	xlabel(xlstr);
+	ylabel("Phase in deg");
+	title([ "phase([Y/U]", tistr, ...
+	   "), u=", nth(inname,1),", y=",nth(outname,1)]);
+	grid("on");
+	semilogx(w,phase);
+	## This should be the default for subsequent plot commands.
+	if(gnuplot_has_multiplot)
+	  oneplot();
+	endif
       endif
-    endif
+    unwind_protect_cleanup
+      automatic_replot = save_automatic_replot;
+    end_unwind_protect
   else
     mag_r = mag;
     phase_r = phase;
     w_r = w;
   endif
 endfunction
