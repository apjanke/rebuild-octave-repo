# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513358486 28800
#      Fri Dec 15 09:21:26 2017 -0800
# Node ID 3cd47be4fcbea96eac4f80301ff1c3c5dcd2d6b9
# Parent  2adff1743db73c60174937ec5ba2ee7ac5a9bc6f
fplot.m: Fix handling of non-vectorized input functions (bug #52673).

* fplot.m: Change documentation to note that performance is better with
vectorized functions, but that scalar functions are accepted.  If function is
determined to be scalar during input validation, use arrayfun to convert it to
a vectorized version.  Add eps to denominator of calculation of error so that 0
values do not result in NaN.  Add new BIST test for warning emitted when
function is not vectorized.

diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -61,20 +61,21 @@
 ## @end example
 ##
 ## Programming Notes:
 ##
 ## @code{fplot} works best with continuous functions.  Functions with
 ## discontinuities are unlikely to plot well.  This restriction may be removed
 ## in the future.
 ##
-## @code{fplot} requires that the function accept and return a vector argument.
-## Consider this when writing user-defined functions and use @code{.*},
-## @code{./}, etc.  See the function @code{vectorize} for potentially
-## converting inline or anonymous functions to vectorized versions.
+## @code{fplot} performance is better when the function accepts and returns a
+## vector argument.  Consider this when writing user-defined functions and use
+## element-by-element operators such as @code{.*}, @code{./}, etc.  See the
+## function @code{vectorize} for potentially converting inline or anonymous
+## functions to vectorized versions.
 ##
 ## @seealso{ezplot, plot, vectorize}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
 function [X, Y] = fplot (varargin)
 
@@ -133,26 +134,29 @@ function [X, Y] = fplot (varargin)
   else
     x0 = linspace (limits(1), limits(2), 5)';
     y0 = feval (fn, x0);
     n = 8;
     x = linspace (limits(1), limits(2), n)';
     y = feval (fn, x);
   endif
 
+  if (isscalar (y0))
+    warning ("fplot: FN is not a vectorized function which reduces performance");
+    fn = @(x) arrayfun (fn, x);  # Create a new fn that accepts vectors
+    y0 = feval (fn, x0);
+    y = feval (fn, x);
+  endif
+
   if (rows (x0) == rows (y0))
     fcn_transpose = false;
   elseif (rows (x0) == columns (y0))
     fcn_transpose = true;
     y0 = y0.';
     y = y.';
-  elseif (isscalar (y0))
-    ## FN is a constant value function
-    y0 = repmat (y0, size (x0));
-    y = repmat (y, size (x));
   else
     error ("fplot: invalid function FN (# of outputs not equal to inputs)");
   endif
 
   err0 = Inf;
 
   ## FIXME: This algorithm should really use adaptive scaling as
   ##        the numerical quadrature algorithms do so that extra points are
@@ -160,17 +164,17 @@ function [X, Y] = fplot (varargin)
   ##        x-range.  Try any function with a discontinuity, such as
   ##        fplot (@tan, [-2, 2]) or fplot ("1./x", [-3, 2]), to see the
   ##        problems with the current solution.
 
   while (n < 2^18)    # Something is wrong if we need more than 250K points
     yi = interp1 (x0, y0, x, "linear");
     ## relative error calculation using average of [yi,y] as reference
     ## since neither estimate is known a priori to be better than the other.
-    err = 0.5 * max (abs ((yi - y) ./ (yi + y))(:));
+    err = 0.5 * max (abs ((yi - y) ./ (yi + y + eps))(:));
     if (err < tol || abs (err - err0) < tol/2)
       ## Either relative tolerance has been met OR
       ## algorithm has stopped making any reasonable progress per iteration.
       break;
     endif
     x0 = x;
     y0 = y;
     err0 = err;
@@ -232,25 +236,28 @@ endfunction
 %! fn = @(x) 2 * x(:).';
 %! [x, y] = fplot (fn, [-1, 1]);
 %! assert (columns (y) == 1);
 %! assert (rows (x) == rows (y));
 %! assert (y, 2*x);
 
 %!test
 %! ## Constant value function
-%! fn = @(x) 5;
+%! fn = @(x) 0;
 %! [x, y] = fplot (fn, [-1, 1]);
 %! assert (columns (y) == 1);
 %! assert (rows (x) == rows (y));
-%! assert (y, repmat ([5], size (x)));
+%! assert (y, repmat ([0], size (x)));
 
 ## Test input validation
 %!error fplot (1)
 %!error fplot (1,2,3,4,5,6)
 %!error <FN must be a function handle> fplot (1, [0 1])
 %!error <LIMITS must be a real vector> fplot (@cos, [i, 2*i])
 %!error <LIMITS must be a real vector with 2 or 4> fplot (@cos, [1])
 %!error <LIMITS must be a real vector with 2 or 4> fplot (@cos, [1 2 3])
 %!error <bad input in position 3> fplot (@cos,[-1,1], {1})
 %!error <invalid function FN>
 %! fn = @(x) [x;x];
 %! fplot (fn, [-1,1]);
+%!warning <FN is not a vectorized function>
+%! fn = @(x) 0;
+%! [x,y] = fplot (fn, [-1,1]);
