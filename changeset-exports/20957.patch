# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450654313 28800
#      Sun Dec 20 15:31:53 2015 -0800
# Node ID 9db35d2042be7780998302f5f4ffdca1096af79f
# Parent  850e3d2533d4b72025b7a6c1f1de2b72300e4647
maint: eliminate special cases of statements after error.

* daspk.cc: Eliminate DASPK_ABORT, DASPK_ABORT1, DASPK_ABORT2 macros.

* dasrt.cc: Eliminate DASRT_ABORT, DASRT_ABORT1, DASRT_ABORT2 macros.

* dassl.cc: Eliminate DASSL_ABORT, DASSL_ABORT1, DASSL_ABORT2 macros.

libinterp/corefcn/graphics.cc (Fdrawnow): Reverse order and call
gh_manager::unlock() before call to error().

* variables.cc (Fmlock): Adjust indentation.

* __glpk__.cc (glpk): Add FIXME note about unreachable code.

* __init_fltk__.cc (F__fltk_check__, F__init_fltk__): Place return statement
within #ifdef HAVE_FLTK block.

* ov-fcn-handle.cc (load_hdf5): eliminate useless statements after error.

* ov-java.cc (F__java_exit__): Place return statement
within #ifdef HAVE_JAVA block.

* octave.cc (octave_process_command_line): Issue warning, which will return,
and then call octave_print_terse_usage_and_exit.

* lex.ll: Add FIXME notes about unreachable code.

* oct-parse.in.yy (source_file): Eliminate useless return after error.

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -152,35 +152,16 @@ daspk_user_jacobian (const ColumnVector&
         }
       else
         gripe_user_supplied_eval ("daspk");
     }
 
   return retval;
 }
 
-#define DASPK_ABORT() \
-  return retval
-
-#define DASPK_ABORT1(msg) \
-  do \
-    { \
-      error ("daspk: " msg); \
-      DASPK_ABORT (); \
-    } \
-  while (0)
-
-#define DASPK_ABORT2(fmt, arg) \
-  do \
-    { \
-      error ("daspk: " fmt, arg); \
-      DASPK_ABORT (); \
-    } \
-  while (0)
-
 DEFUN (daspk, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{x}, @var{xdot}, @var{istate}, @var{msg}] =} daspk (@var{fcn}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})\n\
 Solve the set of differential-algebraic equations\n\
 @tex\n\
 $$ 0 = f (x, \\dot{x}, t) $$\n\
 with\n\
 $$ x(t_0) = x_0, \\dot{x}(t_0) = \\dot{x}_0 $$\n\
@@ -288,17 +269,17 @@ parameters for @code{daspk}.\n\
   octave_value_list retval (4);
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    DASPK_ABORT1 ("invalid recursive call");
+    error ("daspk: invalid recursive call");
 
   std::string fcn_name, fname, jac_name, jname;
   daspk_fcn = 0;
   daspk_jac = 0;
 
   octave_value f_arg = args(0);
 
   if (f_arg.is_cell ())
@@ -338,17 +319,17 @@ parameters for @code{daspk}.\n\
                       if (fcn_name.length ())
                         clear_function (fcn_name);
                       daspk_fcn = 0;
                     }
                 }
             }
         }
       else
-        DASPK_ABORT1 ("incorrect number of elements in cell array");
+        error ("daspk: incorrect number of elements in cell array");
     }
 
   if (! daspk_fcn && ! f_arg.is_cell ())
     {
       if (f_arg.is_function_handle () || f_arg.is_inline_function ())
         daspk_fcn = f_arg.function_value ();
       else
         {
@@ -396,17 +377,17 @@ parameters for @code{daspk}.\n\
                       }
                   }
               }
             }
         }
     }
 
   if (! daspk_fcn)
-    DASPK_ABORT ();
+    return retval;
 
   ColumnVector state = args(1).xvector_value ("daspk: initial state X_0 must be a vector");
 
   ColumnVector deriv = args(2).xvector_value ("daspk: initial derivatives XDOT_0 must be a vector");
 
   ColumnVector out_times = args(3).xvector_value ("daspk: output time variable T must be a vector");
 
   ColumnVector crit_times;
@@ -414,17 +395,17 @@ parameters for @code{daspk}.\n\
   if (nargin > 4)
     {
       crit_times = args(4).xvector_value ("daspk: list of critical times T_CRIT must be a vector");
 
       crit_times_set = 1;
     }
 
   if (state.numel () != deriv.numel ())
-    DASPK_ABORT1 ("X_0 and XDOT_0 must have the same size");
+    error ("daspk: X_0 and XDOT_0 must have the same size");
 
   double tzero = out_times (0);
 
   DAEFunc func (daspk_user_function);
   if (daspk_jac)
     func.set_jacobian_function (daspk_user_jacobian);
 
   DASPK dae (state, deriv, tzero, func);
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -191,35 +191,16 @@ dasrt_user_j (const ColumnVector& x, con
         }
       else
         gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
 
-#define DASRT_ABORT \
-  return retval
-
-#define DASRT_ABORT1(msg) \
-  do \
-    { \
-      error ("dasrt: " msg); \
-      DASRT_ABORT; \
-    } \
-  while (0)
-
-#define DASRT_ABORT2(fmt, arg) \
-  do \
-    { \
-      error ("dasrt: " fmt, arg); \
-      DASRT_ABORT; \
-    } \
-  while (0)
-
 DEFUN (dasrt, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{x}, @var{xdot}, @var{t_out}, @var{istat}, @var{msg}] =} dasrt (@var{fcn}, [], @var{x_0}, @var{xdot_0}, @var{t})\n\
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, @var{g}, @var{x_0}, @var{xdot_0}, @var{t})\n\
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, [], @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})\n\
 @deftypefnx {} {@dots{} =} dasrt (@var{fcn}, @var{g}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})\n\
 Solve the set of differential-algebraic equations\n\
 @tex\n\
@@ -368,17 +349,17 @@ parameters for @code{dasrt}.\n\
   octave_value_list retval (5);
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    DASRT_ABORT1 ("invalid recursive call");
+    error ("dasrt: invalid recursive call");
 
   int argp = 0;
   std::string fcn_name, fname, jac_name, jname;
   dasrt_f = 0;
   dasrt_j = 0;
   dasrt_cf = 0;
 
   // Check all the arguments.  Are they the right animals?
@@ -424,17 +405,17 @@ parameters for @code{dasrt}.\n\
                       if (fcn_name.length ())
                         clear_function (fcn_name);
                       dasrt_f = 0;
                     }
                 }
             }
         }
       else
-        DASRT_ABORT1 ("incorrect number of elements in cell array");
+        error ("dasrt: incorrect number of elements in cell array");
     }
 
   if (! dasrt_f && ! f_arg.is_cell ())
     {
       if (f_arg.is_function_handle () || f_arg.is_inline_function ())
         dasrt_f = f_arg.function_value ();
       else
         {
@@ -471,45 +452,44 @@ parameters for @code{dasrt}.\n\
 
                     if (! dasrt_j)
                       dasrt_f = 0;
                   }
               }
               break;
 
             default:
-              DASRT_ABORT1
-                ("first arg should be a string or 2-element string array");
+              error ("dasrt: first arg should be a string or 2-element string array");
             }
         }
     }
 
   if (! dasrt_f)
-    DASRT_ABORT;
+    return retval;
 
   DAERTFunc func (dasrt_user_f);
 
   argp++;
 
   if (args(1).is_function_handle () || args(1).is_inline_function ())
     {
       dasrt_cf = args(1).function_value ();
 
       if (! dasrt_cf)
-        DASRT_ABORT1 ("invalid constraint function G");
+        error ("dasrt: invalid constraint function G");
 
       argp++;
 
       func.set_constraint_function (dasrt_user_cf);
     }
   else if (args(1).is_string ())
     {
       dasrt_cf = is_valid_function (args(1), "dasrt", true);
       if (! dasrt_cf)
-        DASRT_ABORT1 ("invalid constraint function G");
+        error ("dasrt: invalid constraint function G");
 
       argp++;
 
       func.set_constraint_function (dasrt_user_cf);
     }
 
   ColumnVector state = args(argp).xvector_value ("dasrt: initial state X_0 must be a vector");
 
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -152,35 +152,16 @@ dassl_user_jacobian (const ColumnVector&
         }
       else
         gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
 
-#define DASSL_ABORT() \
-  return retval
-
-#define DASSL_ABORT1(msg) \
-  do \
-    { \
-      error ("dassl: " msg); \
-      DASSL_ABORT (); \
-    } \
-  while (0)
-
-#define DASSL_ABORT2(fmt, arg) \
-  do \
-    { \
-      error ("dassl: " fmt, arg); \
-      DASSL_ABORT (); \
-    } \
-  while (0)
-
 DEFUN (dassl, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{x}, @var{xdot}, @var{istate}, @var{msg}] =} dassl (@var{fcn}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})\n\
 Solve the set of differential-algebraic equations\n\
 @tex\n\
 $$ 0 = f (x, \\dot{x}, t) $$\n\
 with\n\
 $$ x(t_0) = x_0, \\dot{x}(t_0) = \\dot{x}_0 $$\n\
@@ -289,17 +270,17 @@ parameters for @code{dassl}.\n\
   octave_value_list retval (4);
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    DASSL_ABORT1 ("invalid recursive call");
+    error ("dassl: invalid recursive call");
 
   std::string fcn_name, fname, jac_name, jname;
   dassl_fcn = 0;
   dassl_jac = 0;
 
   octave_value f_arg = args(0);
 
   if (f_arg.is_cell ())
@@ -339,17 +320,17 @@ parameters for @code{dassl}.\n\
                       if (fcn_name.length ())
                         clear_function (fcn_name);
                       dassl_fcn = 0;
                     }
                 }
             }
         }
       else
-        DASSL_ABORT1 ("incorrect number of elements in cell array");
+        error ("dassl: incorrect number of elements in cell array");
     }
 
   if (! dassl_fcn && ! f_arg.is_cell ())
     {
       if (f_arg.is_function_handle () || f_arg.is_inline_function ())
         dassl_fcn = f_arg.function_value ();
       else
         {
@@ -397,17 +378,17 @@ parameters for @code{dassl}.\n\
                       }
                   }
               }
             }
         }
     }
 
   if (! dassl_fcn)
-    DASSL_ABORT ();
+    return retval;
 
   ColumnVector state = args(1).xvector_value ("dassl: initial state X_0 must be a vector");
 
   ColumnVector deriv = args(2).xvector_value ("dassl: initial derivatives XDOT_0 must be a vector");
 
   ColumnVector out_times = args(3).xvector_value ("dassl: output time variable T must be a vector");
 
   ColumnVector crit_times;
@@ -415,17 +396,17 @@ parameters for @code{dassl}.\n\
   if (nargin > 4)
     {
       crit_times = args(4).xvector_value ("dassl: list of critical times T_CRIT must be a vector");
 
       crit_times_set = 1;
     }
 
   if (state.numel () != deriv.numel ())
-    DASSL_ABORT1 ("X and XDOT_0 must have the same size");
+    error ("dassl: X and XDOT_0 must have the same size");
 
   double tzero = out_times (0);
 
   DAEFunc func (dassl_user_function);
   if (dassl_jac)
     func.set_jacobian_function (dassl_user_jacobian);
 
   DASSL dae (state, deriv, tzero, func);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10838,29 +10838,25 @@ undocumented.\n\
           file = args(1).xstring_value ("drawnow: FILE must be a string");
 
           size_t pos_p = file.find_first_of ("|");
           size_t pos_c = file.find_first_not_of ("| ");
 
           if (pos_p == std::string::npos &&
               pos_c == std::string::npos)
             {
+              gh_manager::unlock ();
+
               error ("drawnow: empty output ''");
-
-              gh_manager::unlock ();
-
-              return ovl ();
             }
           else if (pos_c == std::string::npos)
             {
+              gh_manager::unlock ();
+
               error ("drawnow: empty pipe '|'");
-
-              gh_manager::unlock ();
-
-              return ovl ();
             }
           else if (pos_p != std::string::npos && pos_p < pos_c)
             {
               // Strip leading pipe character
               file = file.substr (pos_c);
             }
           else
             {
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1985,17 +1985,17 @@ Lock the current function into memory so
   if (args.length () != 0)
     print_usage ();
 
   octave_function *fcn = octave_call_stack::caller ();
 
   if (! fcn)
     error ("mlock: invalid use outside a function");
 
-    fcn->lock ();
+  fcn->lock ();
 
   return ovl ();
 }
 
 DEFUN (munlock, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} munlock ()\n\
 @deftypefnx {} {} munlock (@var{fcn})\n\
diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -165,16 +165,18 @@ glpk (int sense, int n, int m, double *c
 
   glp_load_matrix (lp, nz, rn, cn, a);
 
   if (save_pb)
     {
       static char tmp[] = "outpb.lp";
       if (glp_write_lp (lp, NULL, tmp) != 0)
         {
+          // FIXME: This doesn't work anymore now that error does not return.
+          //        Should longjmp just be deleted?
           error ("__glpk__: unable to write problem");
           longjmp (mark, -1);
         }
     }
 
   // scale the problem data
   if (! par->presol || lpsolver != 1)
     glp_scale_prob (lp, scale);
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -2344,21 +2344,22 @@ DEFUN_DLD (__fltk_check__, , ,
 Undocumented internal function.  Calls Fl::check ()\n\
 @end deftypefn")
 {
 #ifdef HAVE_FLTK
   Fl::check ();
 
   if (Vdrawnow_requested)
     Fdrawnow ();
+
+  return ovl ();
+  
 #else
   error ("__fltk_check__: not available without OpenGL and FLTK libraries");
 #endif
-
-  return octave_value ();
 }
 
 // Initialize the fltk graphics toolkit.
 
 DEFUN_DLD (__init_fltk__, , ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __init_fltk__ ()\n\
 Undocumented internal function.\n\
@@ -2377,21 +2378,21 @@ Undocumented internal function.\n\
       toolkit_loaded = true;
 
       octave_value fcn (new octave_builtin (F__fltk_check__));
       octave_value fcn_handle (new octave_fcn_handle (fcn, "@__fltk_check__"));
       octave_value_list id = Fadd_input_event_hook (fcn_handle, 1);
 
       fltk->set_input_event_hook_id (id);
     }
+
+  return ovl ();
 #else
   error ("__init_fltk__: not available without OpenGL and FLTK libraries");
 #endif
-
-  return octave_value ();
 }
 
 DEFUN_DLD (__have_fltk__, , ,
            "-*- texinfo -*-\n\
 @deftypefn {} {@var{FLTK_available} =} __have_fltk__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1139,21 +1139,17 @@ octave_fcn_handle::load_hdf5 (octave_hdf
             error ("load: failed to load anonymous function handle");
 
           hdf5_callback_data dsub;
           int current_item = 0;
           for (octave_idx_type i = 0; i < len; i++)
             {
               if (H5Giterate (group_hid, "symbol table", &current_item,
                               hdf5_read_next_data, &dsub) <= 0)
-                {
-                  error ("load: failed to load anonymous function handle");
-                  success = false;
-                  break;
-                }
+                error ("load: failed to load anonymous function handle");
 
               symbol_table::assign (dsub.name, dsub.tc, local_scope);
             }
         }
 
       if (success)
         {
           int parse_status;
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2098,21 +2098,22 @@ DEFUN (__java_exit__, , ,
 Internal function used @strong{only} when debugging Java interface.\n\
 \n\
 Function will directly call terminate_jvm() to destroy the current JVM\n\
 instance.\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   terminate_jvm ();
+
+  return ovl ();
+
 #else
   error ("__java_init__: Octave was not compiled with Java interface");
 #endif
-
-  return octave_value ();
 }
 
 DEFUN (javaObject, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{jobj} =} javaObject (@var{classname})\n\
 @deftypefnx {} {@var{jobj} =} javaObject (@var{classname}, @var{arg1}, @dots{})\n\
 Create a Java object of class @var{classsname}, by calling the class\n\
 constructor with the arguments @var{arg1}, @dots{}\n\
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -704,25 +704,25 @@ octave_process_command_line (int argc, c
           panic_impossible ();
           break;
         }
     }
 
   // Check for various incompatible argument pairs
   if (force_gui_option && no_gui_option)
     {
-      error ("only one of --force-gui and --no-gui may be used");
+      warning ("only one of --force-gui and --no-gui may be used");
 
       octave_print_terse_usage_and_exit ();
     }
 
   bool script_file = (argc - optind) > 0;
   if (! code_to_eval.empty () && script_file)
     {
-      error ("--eval \"CODE\" and script file are mutually exclusive options");
+      warning ("--eval \"CODE\" and script file are mutually exclusive options");
 
       octave_print_terse_usage_and_exit ();
     }
   an_octave_program = ((script_file || ! code_to_eval.empty ())
                        && ! persist && ! traditional);
 
 }
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1002,16 +1002,17 @@ ANY_INCLUDING_NL (.|{NL})
 <DQ_STRING_START>{NL} {
     curr_lexer->lexer_debug ("<DQ_STRING_START>{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     error ("unterminated character string constant");
 
+    // FIXME: This is no longer reachable now that error is exception based.
     return LEXICAL_ERROR;
   }
 
 %{
 // Single-quoted character strings.
 %}
 
 <SQ_STRING_START>\'\' {
@@ -1054,16 +1055,17 @@ ANY_INCLUDING_NL (.|{NL})
 <SQ_STRING_START>{NL} {
     curr_lexer->lexer_debug ("<SQ_STRING_START>{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     error ("unterminated character string constant");
 
+    // FIXME: This is no longer reachable now that error is exception based.
     return LEXICAL_ERROR;
   }
 
 %{
 // Fully-qualified identifiers (used for classdef).
 %}
 
 <FQ_IDENT_START>{FQIDENT} {
@@ -2865,16 +2867,17 @@ octave_base_lexer::handle_superclass_ide
   meth = meth.substr (0, pos);
 
   bool kw_token = (is_keyword_token (meth)
                    || fq_identifier_contains_keyword (cls));
 
   if (kw_token)
     {
       error ("method, class, and package names may not be keywords");
+      // FIXME: This is no longer reachable now that error is exception based.
       return LEXICAL_ERROR;
     }
 
   push_token (new token (SUPERCLASSREF, meth, cls,
                          input_line_number, current_input_column));
 
   current_input_column += flex_yyleng ();
 
@@ -2884,16 +2887,17 @@ octave_base_lexer::handle_superclass_ide
 int
 octave_base_lexer::handle_meta_identifier (void)
 {
   std::string cls = std::string(flex_yytext ()).substr (1);
 
   if (fq_identifier_contains_keyword (cls))
     {
       error ("class and package names may not be keywords");
+      // FIXME: This is no longer reachable now that error is exception based.
       return LEXICAL_ERROR;
     }
 
   push_token (new token (METAQUERY, cls, input_line_number,
                          current_input_column));
 
   current_input_column += flex_yyleng ();
 
@@ -2903,16 +2907,17 @@ octave_base_lexer::handle_meta_identifie
 int
 octave_base_lexer::handle_fq_identifier (void)
 {
   std::string tok = flex_yytext ();
 
   if (fq_identifier_contains_keyword (tok))
     {
       error ("function, method, class, and package names may not be keywords");
+      // FIXME: This is no longer reachable now that error is exception based.
       return LEXICAL_ERROR;
     }
 
   push_token (new token (FQ_IDENT, tok, input_line_number,
                          current_input_column));
 
   current_input_column += flex_yyleng ();
 
@@ -2952,17 +2957,17 @@ octave_base_lexer::handle_identifier (vo
 
   int kw_token = is_keyword_token (tok);
 
   if (looking_at_function_handle)
     {
       if (kw_token)
         {
           error ("function handles may not refer to keywords");
-
+          // FIXME: This is no longer reachable now that error is exception based.
           return LEXICAL_ERROR;
         }
       else
         {
           push_token (new token (FCN_HANDLE, tok, input_line_number,
                                  current_input_column));
 
           current_input_column += flex_yyleng ();
@@ -3246,16 +3251,17 @@ octave_base_lexer::display_token (int to
     }
 }
 
 void
 octave_base_lexer::fatal_error (const char *msg)
 {
   error (msg);
 
+  // FIXME: This is no longer reachable now that error is exception based.
   OCTAVE_QUIT;
 
   yy_fatal_error (msg, scanner);
 }
 
 void
 octave_base_lexer::lexer_debug (const char *pattern)
 {
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4480,20 +4480,17 @@ source_file (const std::string& file_nam
   if (source_call_depth.find (file_full_name) == source_call_depth.end ())
     source_call_depth[file_full_name] = -1;
 
   frame.protect_var (source_call_depth[file_full_name]);
 
   source_call_depth[file_full_name]++;
 
   if (source_call_depth[file_full_name] >= Vmax_recursion_depth)
-    {
-      error ("max_recursion_depth exceeded");
-      return;
-    }
+    error ("max_recursion_depth exceeded");
 
   if (! context.empty ())
     {
       if (context == "caller")
         octave_call_stack::goto_caller_frame ();
       else if (context == "base")
         octave_call_stack::goto_base_frame ();
       else
