# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1341855162 18000
#      Mon Jul 09 12:32:42 2012 -0500
# Node ID a5f75de0dab1c0a021a06668c35fe823e5d7de03
# Parent  d27fa4f0370696fc3bd60a708e8c715634d722c4
Rename jit_function to jit_operation

* src/TEMPLATE-INST/Array-jit.cc: Rename jit_function to jit_operation.
* src/pt-jit.h: Rename jit_function to jit_operation.
* src/pt-jit.cc: Rename jit_function to jit_operation.

diff --git a/src/TEMPLATE-INST/Array-jit.cc b/src/TEMPLATE-INST/Array-jit.cc
--- a/src/TEMPLATE-INST/Array-jit.cc
+++ b/src/TEMPLATE-INST/Array-jit.cc
@@ -26,13 +26,13 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_LLVM
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "pt-jit.h"
 
-NO_INSTANTIATE_ARRAY_SORT (jit_function::overload);
+NO_INSTANTIATE_ARRAY_SORT (jit_operation::overload);
 
-INSTANTIATE_ARRAY (jit_function::overload, OCTINTERP_API);
+INSTANTIATE_ARRAY (jit_operation::overload, OCTINTERP_API);
 
 #endif
diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -383,19 +383,19 @@ operator<< (std::ostream& os, const jit_
 
 // -------------------- jit_type --------------------
 llvm::Type *
 jit_type::to_llvm_arg (void) const
 {
   return llvm_type ? llvm_type->getPointerTo () : 0;
 }
 
-// -------------------- jit_function --------------------
+// -------------------- jit_operation --------------------
 void
-jit_function::add_overload (const overload& func,
+jit_operation::add_overload (const overload& func,
                             const std::vector<jit_type*>& args)
 {
   if (args.size () >= overloads.size ())
     overloads.resize (args.size () + 1);
 
   Array<overload>& over = overloads[args.size ()];
   dim_vector dv (over.dims ());
   Array<octave_idx_type> idx = to_idx (args);
@@ -415,18 +415,18 @@ jit_function::add_overload (const overlo
       }
 
   if (must_resize)
     over.resize (dv);
 
   over(idx) = func;
 }
 
-const jit_function::overload&
-jit_function::get_overload (const std::vector<jit_type*>& types) const
+const jit_operation::overload&
+jit_operation::get_overload (const std::vector<jit_type*>& types) const
 {
   // FIXME: We should search for the next best overload on failure
   static overload null_overload;
   if (types.size () >= overloads.size ())
     return null_overload;
 
   for (size_t i  =0; i < types.size (); ++i)
     if (! types[i])
@@ -438,17 +438,17 @@ jit_function::get_overload (const std::v
   for (octave_idx_type i = 0; i < dv.length (); ++i)
     if (idx(i) >= dv(i))
       return null_overload;
 
   return over(idx);
 }
 
 Array<octave_idx_type>
-jit_function::to_idx (const std::vector<jit_type*>& types) const
+jit_operation::to_idx (const std::vector<jit_type*>& types) const
 {
   octave_idx_type numel = types.size ();
   if (numel == 1)
     numel = 2;
 
   Array<octave_idx_type> idx (dim_vector (1, numel));
   for (octave_idx_type i = 0; i < static_cast<octave_idx_type> (types.size ());
        ++i)
@@ -635,34 +635,34 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     builder.CreateCall (gripe_div0);
     builder.CreateBr (normal_block);
 
     builder.SetInsertPoint (normal_block);
     llvm::Value *ret = builder.CreateFDiv (fn->arg_begin (),
                                            ++fn->arg_begin ());
     builder.CreateRet (ret);
 
-    jit_function::overload ol (fn, true, scalar, scalar, scalar);
+    jit_operation::overload ol (fn, true, scalar, scalar, scalar);
     binary_ops[octave_value::op_div].add_overload (ol);
     binary_ops[octave_value::op_el_div].add_overload (ol);
   }
   llvm::verifyFunction (*fn);
 
   // ldiv is the same as div with the operators reversed
   llvm::Function *div = fn;
   fn = create_function ("octave_jit_ldiv_scalar_scalar", scalar, scalar,
                         scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   {
     llvm::Value *ret = builder.CreateCall2 (div, ++fn->arg_begin (),
                                             fn->arg_begin ());
     builder.CreateRet (ret);
 
-    jit_function::overload ol (fn, true, scalar, scalar, scalar);
+    jit_operation::overload ol (fn, true, scalar, scalar, scalar);
     binary_ops[octave_value::op_ldiv].add_overload (ol);
     binary_ops[octave_value::op_el_ldiv].add_overload (ol);
   }
   llvm::verifyFunction (*fn);
 
   // now for binary index operators
   add_binary_op (index, octave_value::op_add, llvm::Instruction::Add);
 
@@ -1040,17 +1040,17 @@ jit_typeinfo::add_print (jit_type *ty, v
   name << "octave_jit_print_" << ty->name ();
 
   llvm::Type *void_t = llvm::Type::getVoidTy (context);
   llvm::Function *fn = create_function (name.str (), void_t,
                                         llvm::Type::getInt8PtrTy (context),
                                         ty->to_llvm ());
   engine->addGlobalMapping (fn, call);
 
-  jit_function::overload ol (fn, false, 0, string, ty);
+  jit_operation::overload ol (fn, false, 0, string, ty);
   print_fn.add_overload (ol);
 }
 
 // FIXME: cp between add_binary_op, add_binary_icmp, and add_binary_fcmp
 void
 jit_typeinfo::add_binary_op (jit_type *ty, int op, int llvm_op)
 {
   std::stringstream fname;
@@ -1063,17 +1063,17 @@ jit_typeinfo::add_binary_op (jit_type *t
   builder.SetInsertPoint (block);
   llvm::Instruction::BinaryOps temp
     = static_cast<llvm::Instruction::BinaryOps>(llvm_op);
   llvm::Value *ret = builder.CreateBinOp (temp, fn->arg_begin (),
                                           ++fn->arg_begin ());
   builder.CreateRet (ret);
   llvm::verifyFunction (*fn);
 
-  jit_function::overload ol(fn, false, ty, ty, ty);
+  jit_operation::overload ol(fn, false, ty, ty, ty);
   binary_ops[op].add_overload (ol);
 }
 
 void
 jit_typeinfo::add_binary_icmp (jit_type *ty, int op, int llvm_op)
 {
   std::stringstream fname;
   octave_value::binary_op ov_op = static_cast<octave_value::binary_op>(op);
@@ -1085,17 +1085,17 @@ jit_typeinfo::add_binary_icmp (jit_type 
   builder.SetInsertPoint (block);
   llvm::CmpInst::Predicate temp
     = static_cast<llvm::CmpInst::Predicate>(llvm_op);
   llvm::Value *ret = builder.CreateICmp (temp, fn->arg_begin (),
                                          ++fn->arg_begin ());
   builder.CreateRet (ret);
   llvm::verifyFunction (*fn);
 
-  jit_function::overload ol (fn, false, boolean, ty, ty);
+  jit_operation::overload ol (fn, false, boolean, ty, ty);
   binary_ops[op].add_overload (ol);
 }
 
 void
 jit_typeinfo::add_binary_fcmp (jit_type *ty, int op, int llvm_op)
 {
   std::stringstream fname;
   octave_value::binary_op ov_op = static_cast<octave_value::binary_op>(op);
@@ -1107,17 +1107,17 @@ jit_typeinfo::add_binary_fcmp (jit_type 
   builder.SetInsertPoint (block);
   llvm::CmpInst::Predicate temp
     = static_cast<llvm::CmpInst::Predicate>(llvm_op);
   llvm::Value *ret = builder.CreateFCmp (temp, fn->arg_begin (),
                                          ++fn->arg_begin ());
   builder.CreateRet (ret);
   llvm::verifyFunction (*fn);
 
-  jit_function::overload ol (fn, false, boolean, ty, ty);
+  jit_operation::overload ol (fn, false, boolean, ty, ty);
   binary_ops[op].add_overload (ol);
 }
 
 llvm::Function *
 jit_typeinfo::create_function (const llvm::Twine& name, jit_type *ret,
                                const std::vector<jit_type *>& args)
 {
   llvm::Type *void_t = llvm::Type::getVoidTy (context);
@@ -1993,17 +1993,17 @@ jit_convert::visit_binary_expression (tr
   else
     {
       tree_expression *lhs = be.lhs ();
       jit_value *lhsv = visit (lhs);
 
       tree_expression *rhs = be.rhs ();
       jit_value *rhsv = visit (rhs);
 
-      const jit_function& fn = jit_typeinfo::binary_op (be.op_type ());
+      const jit_operation& fn = jit_typeinfo::binary_op (be.op_type ());
       result = create_checked (fn, lhsv, rhsv);
     }
 }
 
 void
 jit_convert::visit_break_command (tree_break_command&)
 {
   breaks.push_back (block);
@@ -2121,17 +2121,17 @@ jit_convert::visit_simple_for_command (t
   jit_block *check_block = create<jit_block> ("for_check");
   append (check_block);
 
   if (! breaking)
     block->append (create<jit_branch> (check_block));
   finish_breaks (check_block, continues);
 
   block = check_block;
-  const jit_function& add_fn = jit_typeinfo::binary_op (octave_value::op_add);
+  const jit_operation& add_fn = jit_typeinfo::binary_op (octave_value::op_add);
   jit_value *one = create<jit_const_index> (1);
   jit_call *iter_inc = create<jit_call> (add_fn, iterator, one);
   block->append (iter_inc);
   block->append (create<jit_assign> (iterator, iter_inc));
   check = block->append (create<jit_call> (jit_typeinfo::for_check, control,
                                            iterator));
   block->append (create<jit_cond_branch> (check, body, tail));
 
@@ -2402,17 +2402,17 @@ jit_convert::visit_statement (tree_state
       jit_value *expr_result = visit (expr);
 
       if (do_bind_ans)
         do_assign ("ans", expr_result, expr->print_result ());
       else if (expr->is_identifier () && expr->print_result ())
         {
           // FIXME: ugly hack, we need to come up with a way to pass
           // nargout to visit_identifier
-          const jit_function& fn = jit_typeinfo::print_value ();
+          const jit_operation& fn = jit_typeinfo::print_value ();
           jit_const_string *name = create<jit_const_string> (expr->name ());
           block->append (create<jit_call> (fn, name, expr_result));
         }
     }
 }
 
 void
 jit_convert::visit_statement_list (tree_statement_list& lst)
@@ -2571,17 +2571,17 @@ jit_convert::do_assign (const std::strin
   jit_variable *var = get_variable (lhs);
   jit_assign *assign = block->append (create<jit_assign> (var, rhs));
 
   if (artificial)
     assign->mark_artificial ();
 
   if (print)
     {
-      const jit_function& print_fn = jit_typeinfo::print_value ();
+      const jit_operation& print_fn = jit_typeinfo::print_value ();
       jit_const_string *name = create<jit_const_string> (lhs);
       block->append (create<jit_call> (print_fn, name, var));
     }
 
   return var;
 }
 
 jit_value *
@@ -2893,17 +2893,17 @@ jit_convert::simplify_phi (void)
         simplify_phi (*static_cast<jit_phi *> (*iter));
     }
 }
 
 void
 jit_convert::simplify_phi (jit_phi& phi)
 {
   jit_block& pblock = *phi.parent ();
-  const jit_function& cast_fn = jit_typeinfo::cast (phi.type ());
+  const jit_operation& cast_fn = jit_typeinfo::cast (phi.type ());
   jit_variable *dest = phi.dest ();
   for (size_t i = 0; i < phi.argument_count (); ++i)
     {
       jit_value *arg = phi.argument (i);
       if (arg->type () != phi.type ())
         {
           jit_block *pred = phi.incomming (i);
           jit_block *split = pred->maybe_split (*this, pblock);
@@ -3145,38 +3145,38 @@ jit_convert::convert_llvm::visit (jit_as
   assign.stash_llvm (assign.src ()->to_llvm ());
 
   if (assign.artificial ())
     return;
 
   jit_value *new_value = assign.src ();
   if (isa<jit_assign_base> (new_value))
     {
-      const jit_function::overload& ol
+      const jit_operation::overload& ol
         = jit_typeinfo::get_grab (new_value->type ());
       if (ol.function)
         assign.stash_llvm (create_call (ol, new_value));
     }
 
   jit_value *overwrite = assign.overwrite ();
   if (isa<jit_assign_base> (overwrite))
     {
-      const jit_function::overload& ol
+      const jit_operation::overload& ol
         = jit_typeinfo::get_release (overwrite->type ());
       if (ol.function)
         create_call (ol, overwrite);
     }
 }
 
 void
 jit_convert::convert_llvm::visit (jit_argument&)
 {}
 
 llvm::Value *
-jit_convert::convert_llvm::create_call (const jit_function::overload& ol,
+jit_convert::convert_llvm::create_call (const jit_operation::overload& ol,
                                         const std::vector<jit_value *>& jargs)
 {
   llvm::IRBuilder<> alloca_inserter (prelude, prelude->begin ());
 
    llvm::Function *fun = ol.function;
    if (! fun)
      fail ("Missing overload");
 
@@ -3216,17 +3216,17 @@ jit_convert::convert_llvm::create_call (
         }
     }
 
   llvm::Value *llvm_call = builder.CreateCall (fun, args);
   return sret ? builder.CreateLoad (args[0]) : llvm_call;
 }
 
 llvm::Value *
-jit_convert::convert_llvm::create_call (const jit_function::overload& ol,
+jit_convert::convert_llvm::create_call (const jit_operation::overload& ol,
                                         const std::vector<jit_use>& uses)
 {
   std::vector<jit_value *> values (uses.size ());
   for (size_t i = 0; i < uses.size (); ++i)
     values[i] = uses[i].value ();
 
   return create_call (ol, values);
 }
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -43,19 +43,19 @@ along with Octave; see the file COPYING.
 // b = a * 5 + a;
 //
 // Indexing matrices with scalars works.
 //
 // if, elseif, else, break, continue, and for compile. Compilation is triggered
 // at the start of a simple for loop.
 //
 // The octave low level IR is a linear IR, it works by converting everything to
-// calls to jit_functions. This turns expressions like c = a + b into
+// calls to jit_operations. This turns expressions like c = a + b into
 // c = call binary+ (a, b)
-// The jit_functions contain information about overloads for different types.
+// The jit_operations contain information about overloads for different types.
 // For, example, if we know a and b are scalars, then c must also be a scalar.
 //
 // Support for function calls is in progress. Currently, calls to sin with a
 // scalar argument will compile.
 //
 // TODO:
 // 1. Function calls (In progress)
 // 2. Cleanup/documentation
@@ -307,17 +307,17 @@ private:
 };
 
 // seperate print function to allow easy printing if type is null
 std::ostream& jit_print (std::ostream& os, jit_type *atype);
 
 // Keeps track of overloads for a builtin function. Used for both type inference
 // and code generation.
 class
-jit_function
+jit_operation
 {
 public:
   struct
   overload
   {
     overload (void) : function (0), can_error (false), result (0) {}
 
 #define ASSIGN_ARG(i) arguments[i] = arg ## i;
@@ -448,84 +448,84 @@ public:
   static llvm::Type *get_index_llvm (void)
   { return instance->index->to_llvm (); }
 
   static jit_type *type_of (const octave_value& ov)
   {
     return instance->do_type_of (ov);
   }
 
-  static const jit_function& binary_op (int op)
+  static const jit_operation& binary_op (int op)
   {
     return instance->do_binary_op (op);
   }
 
-  static const jit_function& grab (void) { return instance->grab_fn; }
-
-  static const jit_function::overload& get_grab (jit_type *type)
+  static const jit_operation& grab (void) { return instance->grab_fn; }
+
+  static const jit_operation::overload& get_grab (jit_type *type)
   {
     return instance->grab_fn.get_overload (type);
   }
 
-  static const jit_function& release (void)
+  static const jit_operation& release (void)
   {
     return instance->release_fn;
   }
 
-  static const jit_function::overload& get_release (jit_type *type)
+  static const jit_operation::overload& get_release (jit_type *type)
   {
     return instance->release_fn.get_overload (type);
   }
 
-  static const jit_function& print_value (void)
+  static const jit_operation& print_value (void)
   {
     return instance->print_fn;
   }
 
-  static const jit_function& for_init (void)
+  static const jit_operation& for_init (void)
   {
     return instance->for_init_fn;
   }
 
-  static const jit_function& for_check (void)
+  static const jit_operation& for_check (void)
   {
     return instance->for_check_fn;
   }
 
-  static const jit_function& for_index (void)
+  static const jit_operation& for_index (void)
   {
     return instance->for_index_fn;
   }
 
-  static const jit_function& make_range (void)
+  static const jit_operation& make_range (void)
   {
     return instance->make_range_fn;
   }
 
-  static const jit_function& paren_subsref (void)
+  static const jit_operation& paren_subsref (void)
   {
     return instance->paren_subsref_fn;
   }
 
-  static const jit_function& paren_subsasgn (void)
+  static const jit_operation& paren_subsasgn (void)
   {
     return instance->paren_subsasgn_fn;
   }
 
-  static const jit_function& logically_true (void)
+  static const jit_operation& logically_true (void)
   {
     return instance->logically_true_fn;
   }
 
-  static const jit_function& cast (jit_type *result)
+  static const jit_operation& cast (jit_type *result)
   {
     return instance->do_cast (result);
   }
 
-  static const jit_function::overload& cast (jit_type *to, jit_type *from)
+  static const jit_operation::overload& cast (jit_type *to, jit_type *from)
   {
     return instance->do_cast (to, from);
   }
 
   static llvm::Value *insert_error_check (void)
   {
     return instance->do_insert_error_check ();
   }
@@ -567,35 +567,35 @@ private:
   jit_type *do_difference (jit_type *lhs, jit_type *)
   {
     // FIXME: Maybe we can do something smarter?
     return lhs;
   }
 
   jit_type *do_type_of (const octave_value &ov) const;
 
-  const jit_function& do_binary_op (int op) const
+  const jit_operation& do_binary_op (int op) const
   {
     assert (static_cast<size_t>(op) < binary_ops.size ());
     return binary_ops[op];
   }
 
-  const jit_function& do_cast (jit_type *to)
+  const jit_operation& do_cast (jit_type *to)
   {
-    static jit_function null_function;
+    static jit_operation null_function;
     if (! to)
       return null_function;
 
     size_t id = to->type_id ();
     if (id >= casts.size ())
       return null_function;
     return casts[id];
   }
 
-  const jit_function::overload& do_cast (jit_type *to, jit_type *from)
+  const jit_operation::overload& do_cast (jit_type *to, jit_type *from)
   {
     return do_cast (to).get_overload (from);
   }
 
   jit_type *new_type (const std::string& name, jit_type *parent,
                       llvm::Type *llvm_type);
 
 
@@ -684,30 +684,30 @@ private:
   jit_type *matrix;
   jit_type *scalar;
   jit_type *range;
   jit_type *string;
   jit_type *boolean;
   jit_type *index;
   std::map<std::string, jit_type *> builtins;
 
-  std::vector<jit_function> binary_ops;
-  jit_function grab_fn;
-  jit_function release_fn;
-  jit_function print_fn;
-  jit_function for_init_fn;
-  jit_function for_check_fn;
-  jit_function for_index_fn;
-  jit_function logically_true_fn;
-  jit_function make_range_fn;
-  jit_function paren_subsref_fn;
-  jit_function paren_subsasgn_fn;
+  std::vector<jit_operation> binary_ops;
+  jit_operation grab_fn;
+  jit_operation release_fn;
+  jit_operation print_fn;
+  jit_operation for_init_fn;
+  jit_operation for_check_fn;
+  jit_operation for_index_fn;
+  jit_operation logically_true_fn;
+  jit_operation make_range_fn;
+  jit_operation paren_subsref_fn;
+  jit_operation paren_subsasgn_fn;
 
   // type id -> cast function TO that type
-  std::vector<jit_function> casts;
+  std::vector<jit_operation> casts;
 
   // type id -> identity function
   std::vector<llvm::Function *> identities;
 };
 
 // The low level octave jit ir
 // this ir is close to llvm, but contains information for doing type inference.
 // We convert the octave parse tree to this IR directly.
@@ -1719,40 +1719,40 @@ public:
   JIT_VALUE_ACCEPT;
 };
 
 class
 jit_call : public jit_instruction
 {
 public:
 #define JIT_CALL_CONST(N)                                               \
-  jit_call (const jit_function& afunction,                              \
+  jit_call (const jit_operation& afunction,                              \
             OCT_MAKE_DECL_LIST (jit_value *, arg, N))                   \
     : jit_instruction (OCT_MAKE_ARG_LIST (arg, N)), mfunction (afunction) {} \
                                                                         \
-  jit_call (const jit_function& (*afunction) (void),                    \
+  jit_call (const jit_operation& (*afunction) (void),                    \
             OCT_MAKE_DECL_LIST (jit_value *, arg, N))                   \
     : jit_instruction (OCT_MAKE_ARG_LIST (arg, N)), mfunction (afunction ()) {}
 
   JIT_CALL_CONST (1)
   JIT_CALL_CONST (2)
   JIT_CALL_CONST (3)
   JIT_CALL_CONST (4)
 
 #undef JIT_CALL_CONST
 
 
-  const jit_function& function (void) const { return mfunction; }
+  const jit_operation& function (void) const { return mfunction; }
 
   bool can_error (void) const
   {
     return overload ().can_error;
   }
 
-  const jit_function::overload& overload (void) const
+  const jit_operation::overload& overload (void) const
   {
     return mfunction.get_overload (argument_types ());
   }
 
   virtual bool needs_release (void) const
   {
     return type () && jit_typeinfo::get_release (type ()).function;
   }
@@ -1773,17 +1773,17 @@ public:
       }
     return os << ")";
   }
 
   virtual bool infer (void);
 
   JIT_VALUE_ACCEPT;
 private:
-  const jit_function& mfunction;
+  const jit_operation& mfunction;
 };
 
 // FIXME: This is just ugly...
 // checks error_state, if error_state is false then goto the normal branche,
 // otherwise goto the error branch
 class
 jit_error_check : public jit_terminator
 {
@@ -1821,17 +1821,17 @@ public:
     stash_type (atype);
   }
 
   const std::string& name (void) const
   {
     return dest ()->name ();
   }
 
-  const jit_function::overload& overload (void) const
+  const jit_operation::overload& overload (void) const
   {
     return jit_typeinfo::cast (type (), jit_typeinfo::get_any ());
   }
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
     print_indent (os, indent);
 
@@ -1849,17 +1849,17 @@ public:
   : jit_instruction (var), dest (var)
   {}
 
   const std::string& name (void) const
   {
     return dest->name ();
   }
 
-  const jit_function::overload& overload (void) const
+  const jit_operation::overload& overload (void) const
   {
     return jit_typeinfo::cast (jit_typeinfo::get_any (), result_type ());
   }
 
   jit_value *result (void) const
   {
     return argument (0);
   }
@@ -2244,36 +2244,36 @@ private:
       return visit (*jvalue);
     }
 
     void visit (jit_value &jvalue)
     {
       jvalue.accept (*this);
     }
 
-    llvm::Value *create_call (const jit_function::overload& ol, jit_value *arg0)
+    llvm::Value *create_call (const jit_operation::overload& ol, jit_value *arg0)
     {
       std::vector<jit_value *> args (1, arg0);
       return create_call (ol, args);
     }
 
-    llvm::Value *create_call (const jit_function::overload& ol, jit_value *arg0,
+    llvm::Value *create_call (const jit_operation::overload& ol, jit_value *arg0,
                               jit_value *arg1)
     {
       std::vector<jit_value *> args (2);
       args[0] = arg0;
       args[1] = arg1;
 
       return create_call (ol, args);
     }
 
-    llvm::Value *create_call (const jit_function::overload& ol,
+    llvm::Value *create_call (const jit_operation::overload& ol,
                               const std::vector<jit_value *>& jargs);
 
-    llvm::Value *create_call (const jit_function::overload& ol,
+    llvm::Value *create_call (const jit_operation::overload& ol,
                               const std::vector<jit_use>& uses);
   private:
     jit_convert &jthis;
     llvm::Function *function;
     llvm::BasicBlock *prelude;
   };
 };
 
