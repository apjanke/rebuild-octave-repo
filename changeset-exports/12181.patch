# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1296127010 18000
#      Thu Jan 27 06:16:50 2011 -0500
# Node ID 88ff30dcc0487623a2ef4429897f5ebc3ebbc05e
# Parent  6d64359487b48e17fc13c5839c8c137ada63923f
fix another bug in class assignment to undefined object with index

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-27  John W. Eaton  <jwe@octave.org>
+
+	* ov-struct.cc (octave_struct::subsasgn,
+	octave_scalar_struct::subsasgn): Call undef_subsasgn on object
+	returned by octave_value::empty_conv if LHS is initially undefined.
+	Bug #32242.
+
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* input.cc (input_event_hook): Fix incorrect use of iterator.
 	Reported by Pascal Dupuis <Pascal.Dupuis@worldonline.be>.
 
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* ov-class.cc (octave_class::reconstruct_exemplar):
@@ -18,17 +25,17 @@ 2011-01-26  John W. Eaton  <jwe@octave.o
 2011-01-26  John W. Eaton  <jwe@octave.org>
 
 	Bug #32242.
 
 	* ov.h, ov.cc (octave_value::undef_subsasgn): New function.
 	* ov-class.h, ov-class.cc (octave_class::undef_subsasgn,
 	octave_class::subsasgn_common): New functions.
 	* ov-base.h, ov-base.cc (octave_base_value::subsasgn): If
-	undefined, undef_subsasgn on object returned by
+	undefined, call undef_subsasgn on object returned by
 	octave_value::empty_conv.
 	(octave_base_value::undef_subsasgn): New virtual function.
 	(octave_base_value::subsasgn): Only handle case of undefined
 	values here.
 
 2011-01-26  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
 	    John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -323,27 +323,31 @@ octave_struct::subsasgn (const std::stri
 
                 // FIXME: better code reuse? cf. octave_cell::subsasgn and the case below.
                 if (! error_state)
                   {
                     if (tmpc.numel () == 1)
                       {
                         octave_value& tmp = tmpc(0);
 
-                        if (! tmp.is_defined () || tmp.is_zero_by_zero ())
+                        bool orig_undefined = tmp.is_undefined ();
+
+                        if (orig_undefined || tmp.is_zero_by_zero ())
                           {
                             tmp = octave_value::empty_conv (next_type, rhs);
                             tmp.make_unique (); // probably a no-op.
                           }
                         else
                           // optimization: ignore the copy still stored inside our map.
                           tmp.make_unique (1);
 
                         if (! error_state)
-                          t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
+                          t_rhs = (orig_undefined
+                                   ? tmp.undef_subsasgn (next_type, next_idx, rhs)
+                                   : tmp.subsasgn (next_type, next_idx, rhs));
                       }
                     else
                       gripe_indexed_cs_list ();
                   }
               }
             else
               gripe_invalid_index_for_assignment ();
           }
@@ -373,27 +377,31 @@ octave_struct::subsasgn (const std::stri
 
             // FIXME: better code reuse?
             if (! error_state)
               {
                 if (tmpc.numel () == 1)
                   {
                     octave_value& tmp = tmpc(0);
 
-                    if (! tmp.is_defined () || tmp.is_zero_by_zero ())
+                    bool orig_undefined = tmp.is_undefined ();
+
+                    if (orig_undefined || tmp.is_zero_by_zero ())
                       {
                         tmp = octave_value::empty_conv (next_type, rhs);
                         tmp.make_unique (); // probably a no-op.
                       }
                     else
                       // optimization: ignore the copy still stored inside our map.
                       tmp.make_unique (1);
 
                     if (! error_state)
-                      t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
+                      t_rhs = (orig_undefined
+                               ? tmp.undef_subsasgn (next_type, next_idx, rhs)
+                               : tmp.subsasgn (next_type, next_idx, rhs));
                   }
                 else
                   gripe_indexed_cs_list ();
               }
           }
           break;
 
         case '{':
@@ -1239,27 +1247,31 @@ octave_scalar_struct::subsasgn (const st
           if (pkey != map.end ())
             {
               map.contents (pkey).make_unique ();
               tmp = map.contents (pkey);
             }
 
           if (! error_state)
             {
-              if (! tmp.is_defined () || tmp.is_zero_by_zero ())
+              bool orig_undefined = tmp.is_undefined ();
+
+              if (orig_undefined || tmp.is_zero_by_zero ())
                 {
                   tmp = octave_value::empty_conv (next_type, rhs);
                   tmp.make_unique (); // probably a no-op.
                 }
               else
                 // optimization: ignore the copy still stored inside our map.
                 tmp.make_unique (1);
 
               if (! error_state)
-                t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
+                t_rhs = (orig_undefined
+                         ? tmp.undef_subsasgn (next_type, next_idx, rhs)
+                         : tmp.subsasgn (next_type, next_idx, rhs));
             }
         }
 
       if (! error_state)
         map.setfield (key, t_rhs.storable_value ());
       else
         gripe_failed_assignment ();
 
