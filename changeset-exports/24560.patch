# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515443073 28800
#      Mon Jan 08 12:24:33 2018 -0800
# Branch stable
# Node ID 1c1adf6ab75d0673d0b7087f4543b7278d2fce54
# Parent  a3a263a26aabe50efa3e3e34a465f8e9a4b17014
doc: Fix issues in geometry, polynomial, and interpolation chapters (bug #52835).

* geometry.txi: Re-write section on how to calculate Barycentric coordinates.
Correct example code to actually work.

* interp2.m: Rename "extrapval" to "extrap" to match rest of documentation.

* tsearchn.m (cart2bary) : Clean up comments explaining code.

* mkpp.m: Clarify size of output matrix for multi-dimensional interpolation.

diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -97,17 +97,17 @@ to plot the Delaunay triangulation of a 
 @DOCSTRING(triplot)
 
 @DOCSTRING(trimesh)
 
 @DOCSTRING(trisurf)
 
 @DOCSTRING(tetramesh)
 
-The difference between @code{triplot}, and @code{trimesh} or @code{triplot},
+The difference between @code{triplot}, and @code{trimesh} or @code{trisurf},
 is that the former only plots the 2-dimensional triangulation itself, whereas
 the second two plot the value of a function @code{f (@var{x}, @var{y})}.  An
 example of the use of the @code{triplot} function is
 
 @example
 @group
 rand ("state", 2)
 x = rand (20, 1);
@@ -140,50 +140,49 @@ point.  The functions @code{tsearch} and
 function in a triangulation, and @code{tsearchn} and @code{dsearchn} in
 an N-dimensional tessellation.
 
 To identify whether a particular point represented by a vector @var{p}
 falls within one of the simplices of an N-simplex, we can write the
 Cartesian coordinates of the point in a parametric form with respect to
 the N-simplex.  This parametric form is called the Barycentric
 Coordinates of the point.  If the points defining the N-simplex are given
-by @code{@var{N} + 1} vectors @var{t}(@var{i},:), then the Barycentric
+by @var{N} + 1 vectors @code{@var{t}(@var{i},:)}, then the Barycentric
 coordinates defining the point @var{p} are given by
 
 @example
-@var{p} = sum (@var{beta}(1:@var{N}+1) * @var{t}(1:@var{N}+1),:)
+@var{p} = @var{beta} * @var{t}
 @end example
 
 @noindent
-where there are @code{@var{N} + 1} values @code{@var{beta}(@var{i})}
-that together as a vector represent the Barycentric coordinates of the
-point @var{p}.  To ensure a unique solution for the values of
-@code{@var{beta}(@var{i})} an additional criteria of
+where @var{beta} contains @var{N} + 1 values that together as a vector
+represent the Barycentric coordinates of the point @var{p}.  To ensure a unique
+solution for the values of @var{beta} an additional criteria of
 
 @example
-sum (@var{beta}(1:@var{N}+1)) == 1
+sum (@var{beta}) == 1
 @end example
 
 @noindent
 is imposed, and we can therefore write the above as
 
 @example
 @group
 @var{p} - @var{t}(end, :) = @var{beta}(1:end-1) * (@var{t}(1:end-1, :)
-      - ones (@var{N}, 1) * @var{t}(end, :)
+                - ones (@var{N}, 1) * @var{t}(end, :)
 @end group
 @end example
 
 @noindent
 Solving for @var{beta} we can then write
 
 @example
 @group
-@var{beta}(1:end-1) = (@var{p} - @var{t}(end, :)) / (@var{t}(1:end-1, :)
-      - ones (@var{N}, 1) * @var{t}(end, :))
+@var{beta}(1:end-1) = (@var{p} - @var{t}(end, :)) / 
+                (@var{t}(1:end-1, :) - ones (@var{N}, 1) * @var{t}(end, :))
 @var{beta}(end) = sum (@var{beta}(1:end-1))
 @end group
 @end example
 
 @noindent
 which gives the formula for the conversion of the Cartesian coordinates
 of the point @var{p} to the Barycentric coordinates @var{beta}.  An
 important property of the Barycentric coordinates is that for all points
@@ -207,17 +206,17 @@ Barycentric coordinates are not explicit
 
 An example of the use of @code{tsearch} can be seen with the simple
 triangulation
 
 @example
 @group
 @var{x} = [-1; -1; 1; 1];
 @var{y} = [-1; 1; -1; 1];
-@var{tri} = [1, 2, 3; 2, 3, 1];
+@var{tri} = [1, 2, 3; 2, 3, 4];
 @end group
 @end example
 
 @noindent
 consisting of two triangles defined by @var{tri}.  We can then identify
 which triangle a point falls in like
 
 @example
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -66,17 +66,17 @@
 ## Cubic interpolation (same as @qcode{"pchip"}).
 ##
 ## @item @qcode{"spline"}
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## @var{extrap} is a scalar number.  It replaces values beyond the endpoints
-## with @var{extrap}.  Note that if @var{extrapval} is used, @var{method} must
+## with @var{extrap}.  Note that if @var{extrap} is used, @var{method} must
 ## be specified as well.  If @var{extrap} is omitted and the @var{method} is
 ## @qcode{"spline"}, then the extrapolated values of the @qcode{"spline"} are
 ## used.  Otherwise the default @var{extrap} value for any other @var{method}
 ## is @qcode{"NA"}.
 ## @seealso{interp1, interp3, interpn, meshgrid}
 ## @end deftypefn
 
 function ZI = interp2 (varargin)
diff --git a/scripts/geometry/tsearchn.m b/scripts/geometry/tsearchn.m
--- a/scripts/geometry/tsearchn.m
+++ b/scripts/geometry/tsearchn.m
@@ -57,37 +57,37 @@ function [idx, p] = tsearchn (x, t, xi)
     p(ni(intri),:) = b(intri, :);
     ni(intri) = [];
   endfor
 
 endfunction
 
 function Beta = cart2bary (T, P)
   ## Conversion of Cartesian to Barycentric coordinates.
-  ## Given a reference simplex in N dimensions represented by a
-  ## (N+1)-by-(N) matrix, and arbitrary point P in cartesion coordinates,
-  ## represented by a N-by-1 row vector can be written as
+  ## Given a reference simplex in N dimensions represented by an
+  ## N+1-by-N matrix, an arbitrary point P in Cartesian coordinates,
+  ## represented by an N-by-1 column vector can be written as
   ##
   ## P = Beta * T
   ##
-  ## Where Beta is a N+1 vector of the barycentric coordinates.  A criteria
+  ## Where Beta is an N+1 vector of the barycentric coordinates.  A criteria
   ## on Beta is that
   ##
   ## sum (Beta) == 1
   ##
   ## and therefore we can write the above as
   ##
   ## P - T(end, :) = Beta(1:end-1) * (T(1:end-1,:) - ones (N,1) * T(end,:))
   ##
   ## and then we can solve for Beta as
   ##
   ## Beta(1:end-1) = (P - T(end,:)) / (T(1:end-1,:) - ones (N,1) * T(end,:))
   ## Beta(end) = sum (Beta)
   ##
-  ## Note below is generalize for multiple values of P, one per row.
+  ## Note code below is generalized for multiple values of P, one per row.
   [M, N] = size (P);
   Beta = (P - ones (M,1) * T(end,:)) / (T(1:end-1,:) - ones (N,1) * T(end,:));
   Beta (:,end+1) = 1 - sum (Beta, 2);
 
 endfunction
 
 
 %!shared x, tri
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -22,28 +22,28 @@
 ##
 ## Construct a piecewise polynomial (pp) structure from sample points
 ## @var{breaks} and coefficients @var{coefs}.
 ##
 ## @var{breaks} must be a vector of strictly increasing values.  The number of
 ## intervals is given by @code{@var{ni} = length (@var{breaks}) - 1}.
 ##
 ## When @var{m} is the polynomial order @var{coefs} must be of size:
-## @var{ni} x @var{m} + 1.
+## @w{@var{ni}-by-(@var{m} + 1)}.
 ##
 ## The i-th row of @var{coefs}, @code{@var{coefs} (@var{i},:)}, contains the
 ## coefficients for the polynomial over the @var{i}-th interval, ordered from
 ## highest (@var{m}) to lowest (@var{0}).
 ##
 ## @var{coefs} may also be a multi-dimensional array, specifying a
 ## vector-valued or array-valued polynomial.  In that case the polynomial
-## order is defined by the length of the last dimension of @var{coefs}.  The
-## size of first dimension(s) are given by the scalar or vector @var{d}.  If
-## @var{d} is not given it is set to @code{1}.  In any case @var{coefs} is
-## reshaped to a 2-D matrix of size @code{[@var{ni}*prod(@var{d} @var{m})]}.
+## order @var{m} is defined by the length of the last dimension of @var{coefs}.
+## The size of first dimension(s) are given by the scalar or vector @var{d}.
+## If @var{d} is not given it is set to @code{1}.  In any case @var{coefs} is
+## reshaped to a 2-D matrix of size @code{[@var{ni}*prod(@var{d}) @var{m}]}.
 ##
 ## @seealso{unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 function pp = mkpp (x, P, d)
 
   ## check number of arguments
   if (nargin < 2 || nargin > 3)
