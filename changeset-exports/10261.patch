# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265200541 -3600
#      Wed Feb 03 13:35:41 2010 +0100
# Node ID a4fb4675accb3708d50a89a6cca979f7a97128d4
# Parent  14d5fee02b3be2cc377ffac6d9f3107303389d0b
make printing of handles more Matlab-compatible

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-02-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-fcn-handle.h (octave_fcn_handle::anonymous): New static field.
+	* ov-fcn-handle.cc (octave_fcn_handle::anonymous): Initialize it.
+	Use everywhere instead of hardwired string.
+	(octave_fcn_handle::print_raw): Print named function handle with
+	starting @.
+	* pt-fcn-handle.cc: Use octave_fcn_handle::anonymous rather than
+	hardcoded string.
+
 2010-02-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-fcn.cc: New source.
 	* OPERATORS/module.mk: Include it.
 
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* file-io.cc: Assume we have fcntl.h and sys/stat.h.
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -63,23 +63,25 @@ along with Octave; see the file COPYING.
 #include "ls-utils.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function_handle");
 
+const std::string octave_fcn_handle::anonymous ("@<anonymous>");
+
 octave_fcn_handle::octave_fcn_handle (const octave_value& f,
 				      const std::string& n)
   : fcn (f), nm (n)
 {
   octave_user_function *uf = fcn.user_function_value (true);
 
-  if (uf)
+  if (uf && nm != anonymous)
     symbol_table::cache_name (uf->scope (), nm);
 }
 
 octave_value_list
 octave_fcn_handle::subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
 			    int nargout)
 {
@@ -279,17 +281,17 @@ octave_fcn_handle::set_fcn (const std::s
     }
 
   return success;
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os)
 {
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
       os << nm << "\n";
 
       print_raw (os, true);
       os << "\n";
 
       if (fcn.is_undefined ())
 	return false;
@@ -344,17 +346,17 @@ octave_fcn_handle::load_ascii (std::istr
   if (fpath.length() == 0)
     {
       is.seekg (pos);
       is.clear ();
     }
 
   is >> nm;
 
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
       skip_preceeding_newline (is);
 
       std::string buf;
 
       if (is)
 	{
 
@@ -442,17 +444,17 @@ octave_fcn_handle::load_ascii (std::istr
     success = set_fcn (octaveroot, fpath);
 
   return success;
 }
 
 bool
 octave_fcn_handle::save_binary (std::ostream& os, bool& save_as_floats)
 {
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
       std::ostringstream nmbuf;
 
       if (fcn.is_undefined ())
 	return false;
 
       octave_user_function *f = fcn.user_function_value ();
 
@@ -521,25 +523,27 @@ octave_fcn_handle::load_binary (std::ist
 
   OCTAVE_LOCAL_BUFFER (char, ctmp1, tmp+1);
   is.get (ctmp1, tmp+1, 0);
   nm = std::string (ctmp1);
 
   if (! is)
     return false;
 
-  if (nm.length() >= 12 && nm.substr (0, 12) == "@<anonymous>")
+  size_t anl = anonymous.length ();
+
+  if (nm.length() >= anl && nm.substr (0, anl) == anonymous)
     {
       octave_idx_type len = 0;
 
-      if (nm.length() > 12)
+      if (nm.length() > anl)
 	{
-	  std::istringstream nm_is (nm.substr(12));
+	  std::istringstream nm_is (nm.substr (anl));
 	  nm_is >> len;
-	  nm = nm.substr(0,12);
+	  nm = nm.substr (0, anl);
 	}
 
       if (! is.read (reinterpret_cast<char *> (&tmp), 4))
 	return false;
       if (swap)
 	swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp2, tmp+1);
@@ -674,17 +678,17 @@ octave_fcn_handle::save_hdf5 (hid_t loc_
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Dclose (data_hid);
 
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
       std::ostringstream buf;
       print_raw (buf, true);
       std::string stmp = buf.str ();
 
       // attach the type of the variable
       H5Tset_size (type_hid, stmp.length () + 1);
       if (type_hid < 0)
@@ -929,17 +933,17 @@ octave_fcn_handle::load_hdf5 (hid_t loc_
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Tclose (st_id);
   H5Dclose (data_hid);
   nm = nm_tmp;
 
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
 #if HAVE_HDF5_18
       data_hid = H5Dopen (group_hid, "fcn", H5P_DEFAULT);
 #else
       data_hid = H5Dopen (group_hid, "fcn");
 #endif
 
       if (data_hid < 0)
@@ -1259,17 +1263,17 @@ octave_fcn_handle::print (std::ostream& 
   newline (os);
 }
 
 void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   bool printed = false;
 
-  if (nm == "@<anonymous>")
+  if (nm == anonymous)
     {
       tree_print_code tpc (os);
 
       // FCN is const because this member function is, so we can't
       // use it to call user_function_value, so we make a copy first.
 
       octave_value ftmp = fcn;
 
@@ -1314,17 +1318,17 @@ octave_fcn_handle::print_raw (std::ostre
 		}
 	    }
 
 	  printed = true;
 	}
     }
 
   if (! printed)
-    octave_print_internal (os, nm, pr_as_read_syntax,
+    octave_print_internal (os, "@" + nm, pr_as_read_syntax,
 			   current_print_indent_level ());
 }
 
 octave_value
 make_fcn_handle (const std::string& nm, bool local_funcs)
 {
   octave_value retval;
 
@@ -1558,17 +1562,17 @@ Return a struct containing information a
 	  octave_function *fcn = fh ? fh->function_value () : 0;
 
 	  if (fcn)
 	    {
 	      Octave_map m;
 
 	      std::string fh_nm = fh->fcn_name ();
 
-	      if (fh_nm == "@<anonymous>")
+	      if (fh_nm == octave_fcn_handle::anonymous)
 		{
 		  std::ostringstream buf;
 		  fh->print_raw (buf);
 		  m.assign ("function", buf.str ());
 
 		  m.assign ("type", "anonymous");
 		}
 	      else
@@ -1588,17 +1592,17 @@ Return a struct containing information a
                   else if (fh->is_overloaded ())
 		    m.assign ("type", "overloaded");
 		  else
 		    m.assign ("type", "simple");
 		}
 
 	      std::string nm = fcn->fcn_file_name ();
 
-	      if (fh_nm == "@<anonymous>")
+	      if (fh_nm == octave_fcn_handle::anonymous)
 		{
 		  m.assign ("file", nm);
 
 		  octave_user_function *fu = fh->user_function_value ();
 
 		  std::list<symbol_table::symbol_record> vars
 		    = symbol_table::all_variables (fu->scope (), 0);
 
@@ -1650,17 +1654,17 @@ the function handle @var{fcn_handle}.\n\
   if (args.length () == 1)
     {
       octave_fcn_handle *fh = args(0).fcn_handle_value ();
 
       if (! error_state && fh)
 	{
 	  std::string fh_nm = fh->fcn_name ();
 
-	  if (fh_nm == "@<anonymous>")
+	  if (fh_nm == octave_fcn_handle::anonymous)
 	    {
 	      std::ostringstream buf;
 
 	      fh->print_raw (buf);
 
 	      retval = buf.str ();
 	    }
 	  else
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -44,23 +44,26 @@ private:
 
   typedef std::map<std::string, octave_value> str_ov_map;
 
   octave_fcn_handle (const octave_value& f, const std::string& n,
                      str_ov_map *sdisp)
     : fcn (f), nm (n), disp (sdisp) { }
 
 public:
+
+  static const std::string anonymous;
+
   octave_fcn_handle (void)
     : fcn (), nm () { }
 
   octave_fcn_handle (const std::string& n)
     : fcn (), nm (n) { }
 
-  octave_fcn_handle (const octave_value& f,  const std::string& n);
+  octave_fcn_handle (const octave_value& f,  const std::string& n = anonymous);
 
   octave_fcn_handle (const octave_fcn_handle& fh)
     : octave_base_value (fh), fcn (fh.fcn), nm (fh.nm)
    { 
      if (fh.disp.get ())
        disp.reset (new str_ov_map (*fh.disp));
    }
 
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
--- a/src/pt-fcn-handle.cc
+++ b/src/pt-fcn-handle.cc
@@ -121,17 +121,17 @@ tree_anon_fcn_handle::rvalue1 (int)
 	
       uf->stash_parent_fcn_scope (parent_scope);
     }
 
   uf->mark_as_inline_function ();
 
   octave_value ov_fcn (uf);
 
-  octave_value fh (new octave_fcn_handle (ov_fcn, "@<anonymous>"));
+  octave_value fh (new octave_fcn_handle (ov_fcn, octave_fcn_handle::anonymous));
 
   return fh;
 }
 
 /*
 %!function r = f2 (f, x)
 %!  r = f (x);
 %!function f = f1 (k)
