# HG changeset patch
# User SÃ¸ren Hauberg <soren@hauberg.org>
# Date 1266474964 18000
#      Thu Feb 18 01:36:04 2010 -0500
# Node ID 0c42b6b7da248ae750e125b1eba8e3fc8ad59d33
# Parent  5f6298220ced41aa1b3d58e72716665cc6bbd404
imfinfo: support image files with multiple frames

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-18  John W. Eaton  <jwe@octave.org>
+
+	* image/imfinfo.m: Don't handle file time stamp here.
+
 2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/base/center.m: Convert integer inputs to doubles.
 
 2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/interp2: Slightly optimize linear interpolation.
 
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -114,25 +114,17 @@ function info = imfinfo (filename)
       endif
 
       if (! isempty (fn))
 	delete_file = true;
       endif
 
     endif
 
-    [statinfo, err, msg] = stat (fn);
-    if (err != 0)
-      error ("imfinfo: error reading '%s': %s", fn, msg);
-    endif
-
-    time_stamp = strftime ("%e-%b-%Y %H:%M:%S", localtime (statinfo.mtime));
-  
     info = __magick_finfo__ (fn);
-    info.FileModDate = time_stamp;
 
   unwind_protect_cleanup
 
     if (delete_file)
       unlink (fn);
     endif
 
   end_unwind_protect
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-02-18  Søren Hauberg  <hauberg@gmail.com>
+
+	* DLD-FUNCTIONS/__magick_read__.cc (__magick_finfo__):
+	Handle multiple frames in a single image file.
+
+2010-02-18  John W. Eaton  <jwe@octave.org>
+
+	* oct-map.h (Octave_map::Octave_map): Allow dimension to also be
+	specified in string_vector constructor.
+
 2010-02-17  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (OCTAVE_LIBS, OCTINTERP_LINK_DEPS):
 	Include ../libcruft/libranlib.la in the list.
 	* oct-conf.h.in (OCTAVE_CONF_F77_INTEGER_8_FLAG): New macro.
 	* toplev.cc (octave_config_info): Include F77_INTEGER_8_FLAG in
 	the struct.
 
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -23,16 +23,19 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cmath>
 
+#include "file-stat.h"
+#include "oct-time.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "ov-struct.h"
 
 #ifdef HAVE_MAGICK
 
 #include <Magick++.h>
 
@@ -895,95 +898,155 @@ magick_to_octave_value (const Magick::Im
     }
 }
 
 // We put this in a try-block because GraphicsMagick will throw
 // exceptions if a parameter isn't present in the current image.
 #define GET_PARAM(NAME, OUTNAME) \
   try \
     { \
-      st.assign (OUTNAME, magick_to_octave_value (im.NAME ())); \
+      info.contents (OUTNAME)(frame,0) = magick_to_octave_value (im.NAME ()); \
     } \
   catch (Magick::Warning& w) \
     { \
     }
 
 #endif
 
 DEFUN_DLD (__magick_finfo__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable File} {} __magick_finfo__(@var{fname})\n\
 Read image information with GraphicsMagick++.  In general you should\n\
 not be using this function.  Instead you should use @code{imfinfo}.\n\
 @seealso{imfinfo, imread}\n\
 @end deftypefn")
 {
-  octave_value_list output;
+  octave_value retval;
 
 #ifdef HAVE_MAGICK
 
   if (args.length () < 1 || ! args (0).is_string ())
     {
       print_usage ();
-      return output;
+      return retval;
     }
 
   const std::string filename = args (0).string_value ();
 
   try
     {
       // Read the file.
-      Magick::Image im;
-      im.read (filename);
-      
-      // Read properties.
-      Octave_map st;
-      st.assign ("Filename", filename);
+      std::vector<Magick::Image> imvec;
+      Magick::readImages (&imvec, args(0).string_value ());
+      int nframes = imvec.size (); 
       
-      // Annoying CamelCase naming is for Matlab compatibility.
-      GET_PARAM (fileSize, "FileSize")
-      GET_PARAM (rows, "Height")
-      GET_PARAM (columns, "Width")
-      GET_PARAM (depth, "BitDepth")
-      GET_PARAM (magick, "Format")
-      GET_PARAM (format, "LongFormat")
-      GET_PARAM (xResolution, "XResolution")
-      GET_PARAM (yResolution, "YResolution")
-      GET_PARAM (totalColors, "TotalColors")
-      GET_PARAM (tileName, "TileName")
-      GET_PARAM (animationDelay, "AnimationDelay")
-      GET_PARAM (animationIterations, "AnimationIterations")
-      GET_PARAM (endian, "ByteOrder")
-      GET_PARAM (gamma, "Gamma")
-      GET_PARAM (matte, "Matte")
-      GET_PARAM (modulusDepth, "ModulusDepth")
-      GET_PARAM (quality, "Quality")
-      GET_PARAM (quantizeColors, "QuantizeColors")
-      GET_PARAM (resolutionUnits, "ResolutionUnits")
-      GET_PARAM (type, "ColorType")
-      GET_PARAM (view, "View")
-        
-      output (0) = st;
+      // Create the right size for the output.
+
+      static const char *fields[] =
+        {
+          "Filename",
+          "FileModDate",
+          "FileSize",
+          "Height",
+          "Width",
+          "BitDepth",
+          "Format",
+          "LongFormat",
+          "XResolution",
+          "YResolution",
+          "TotalColors",
+          "TileName",
+          "AnimationDelay",
+          "AnimationIterations",
+          "ByteOrder",
+          "Gamma",
+          "Matte",
+          "ModulusDepth",
+          "Quality",
+          "QuantizeColors",
+          "ResolutionUnits",
+          "ColorType",
+          "View",
+          0
+        };
+
+      Octave_map info (string_vector (fields), dim_vector (nframes, 1));
+
+      file_stat fs (filename);
+
+      std::string filetime;
+
+      if (fs)
+        {
+          octave_localtime mtime = fs.mtime ();
+
+          filetime = mtime.strftime ("%e-%b-%Y %H:%M:%S");
+        }
+      else
+        {
+          std::string msg = fs.error ();
+
+          error ("imfinfo: error reading `%s': %s",
+                 filename.c_str (), msg.c_str ());
+
+          return retval;
+        }
+
+      // For each frame in the image (some images contain multiple
+      // layers, each to be treated like a separate image).
+      for (int frame = 0; frame < nframes; frame++)
+        {
+          Magick::Image im = imvec[frame];
+      
+          // Add file name and timestamp.
+          info.contents ("Filename")(frame,0) = filename;
+          info.contents ("FileModDate")(frame,0) = filetime;
+          
+          // Annoying CamelCase naming is for Matlab compatibility.
+          GET_PARAM (fileSize, "FileSize")
+          GET_PARAM (rows, "Height")
+          GET_PARAM (columns, "Width")
+          GET_PARAM (depth, "BitDepth")
+          GET_PARAM (magick, "Format")
+          GET_PARAM (format, "LongFormat")
+          GET_PARAM (xResolution, "XResolution")
+          GET_PARAM (yResolution, "YResolution")
+          GET_PARAM (totalColors, "TotalColors")
+          GET_PARAM (tileName, "TileName")
+          GET_PARAM (animationDelay, "AnimationDelay")
+          GET_PARAM (animationIterations, "AnimationIterations")
+          GET_PARAM (endian, "ByteOrder")
+          GET_PARAM (gamma, "Gamma")
+          GET_PARAM (matte, "Matte")
+          GET_PARAM (modulusDepth, "ModulusDepth")
+          GET_PARAM (quality, "Quality")
+          GET_PARAM (quantizeColors, "QuantizeColors")
+          GET_PARAM (resolutionUnits, "ResolutionUnits")
+          GET_PARAM (type, "ColorType")
+          GET_PARAM (view, "View")
+        }
+
+      retval = octave_value (info);
     }
   catch (Magick::Warning& w)
     {
       warning ("Magick++ warning: %s", w.what ());
     }
   catch (Magick::ErrorCoder& e)
     {
       warning ("Magick++ coder error: %s", e.what ());
     }
   catch (Magick::Exception& e)
     {
       error ("Magick++ exception: %s", e.what ());
-      return output;
+      return retval;
     }
 
 #else
 
   error ("imfinfo: not available in this version of Octave");
 
 #endif
 
-  return output;
+  return retval;
 }
 
 #undef GET_PARAM
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -51,23 +51,24 @@ Octave_map
 
   Octave_map (const std::string& k, const octave_value& value)
     : map (), key_list (), dimensions (1, 1)
   {
     map[k] = value;
     key_list.push_back (k);
   }
 
-  Octave_map (const string_vector& sv)
-    : map (), key_list (), dimensions (0, 0)
+  Octave_map (const string_vector& sv,
+              const dim_vector& dv = dim_vector (0, 0))
+    : map (), key_list (), dimensions (dv)
   {
     for (octave_idx_type i = 0; i < sv.length (); i++)
       {
         std::string k = sv[i];
-        map[k] = Cell ();
+        map[k] = Cell (dv);
         key_list.push_back (k);
       }
   }
 
   Octave_map (const std::string& k, const Cell& vals)
     : map (), key_list (), dimensions (vals.dims ())
   {
     map[k] = vals;
