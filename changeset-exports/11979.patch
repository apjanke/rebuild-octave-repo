# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1244697199 -7200
#      Thu Jun 11 07:13:19 2009 +0200
# Branch release-3-2-x
# Node ID ba624b9b76791a1f7414b2a96df6633bf8fee5b7
# Parent  5d0dcd492f9f4f7fe96a8b0cff4a0100b5624efa
don't garble readline settings when line editing is disabled

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* octave.cc (octave_main): Call initialize_command_input
+	conditionally. Move line_editing update in front of it.
+
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Flog2): Fix tests.
 
 2009-06-08  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (symbol_exist): Returnn 1 for function handles and
 	inline function objects.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -772,20 +772,30 @@ octave_main (int argc, char **argv, int 
 #if defined (HAVE_ATEXIT) || defined (HAVE_ON_EXIT)
   // Make sure we clean up when we exit.  Also allow users to register
   // functions.  If we don't have atexit or on_exit, we're going to
   // leave some junk files around if we exit abnormally.
 
   atexit (do_octave_atexit);
 #endif
 
+  // Is input coming from a terminal?  If so, we are probably
+  // interactive.
+
+  interactive = (! embedded
+		 && isatty (fileno (stdin)) && isatty (fileno (stdout)));
+
+  if (! interactive && ! forced_line_editing)
+    line_editing = false;
+
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
 
-  initialize_command_input ();
+  if (line_editing)
+    initialize_command_input ();
 
   if (! inhibit_startup_message)
     std::cout << OCTAVE_STARTUP_MESSAGE "\n" << std::endl;
 
   if (traditional)
     maximum_braindamage ();
 
   octave_interpreter_ready = true;
@@ -801,25 +811,16 @@ octave_main (int argc, char **argv, int 
 
   execute_startup_files ();
 
   initialize_history (read_history_file);
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
-  // Is input coming from a terminal?  If so, we are probably
-  // interactive.
-
-  interactive = (! embedded
-		 && isatty (fileno (stdin)) && isatty (fileno (stdout)));
-
-  if (! interactive && ! forced_line_editing)
-    line_editing = false;
-
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int last_arg_idx = args.optind ();
 
   int remaining_args = argc - last_arg_idx;
 
