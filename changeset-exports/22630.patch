# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1476602634 18000
#      Sun Oct 16 02:23:54 2016 -0500
# Node ID 5ab3c91fc4bbe6b745f099eb3d2a83db1d6cfbb2
# Parent  4bd7bab38f3905f09d21b243c942581b7988c604
Correct hggroup plot legends for gnuplot toolkit, add legend demo 17 items (bug #49341)

* legend.m: For demo 17, use 2x1 subplots and add a stem example having both
  stem series with single color and with different color for stems and markers.
  Place both plot legends in the northwest corner.

* __gnuplot_draw_axes__.m: Move title and phantom data sooner in 'line' object
  case and set is_image_data, parametric, have_cdata and have_3d_patch array
  values all to 'false'.  Distinguish between stem series data and error bar
  data under 'line' case by checking for existence of 'format' property in the
  hggroup.  For stem series data, call another do_linestyle_command using the
  parent, i.e., hggroup.  For the 'patch' case, copy the parent 'displayname'
  property to the object--as was done prior to the phantom data approach.  The
  above two changes fixes 'demo legend 17'.  For 'surface' case, make a mock
  key symbol using phantom data and a thick line.  The above change fixes
  'demo legend 18'.
  (do_linestyle_command): Remove extraneous '! isempty (pt)' conditional tests.

diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -1366,20 +1366,23 @@ endfunction
 %! clf;
 %! subplot (2,1,1);
 %! rand_2x3_data1 = [0.341447, 0.171220, 0.284370; 0.039773, 0.731725, 0.779382];
 %! bar (rand_2x3_data1);
 %! ylim ([0 1.0]);
 %! title ("legend() works for bar graphs (hggroups)");
 %! legend ({"1st Bar", "2nd Bar", "3rd Bar"}, "location", "northwest");
 %! subplot (2,1,2);
-%! x = linspace (0, 10);
-%! stem (0.5+x.*rand (size (x)) / max (x));
+%! x = linspace (0, 10, 20);
+%! stem (x, 0.5+x.*rand (size (x))/max (x), "markeredgecolor", [0 0.7 0]);
+%! hold on;
+%! stem (x+10/(2*20), x.*(1.0+rand (size (x)))/max (x));
+%! xlim ([0 10+10/(2*20)]);
 %! title ("legend() works for stem plots (hggroups)");
-%! legend ("Stem Rand", "location", "northwest");
+%! legend ({"Multicolor", "Unicolor"}, "location", "northwest");
 
 %!demo
 %! clf;
 %! colormap (cool (64));
 %! surf (peaks ());
 %! legend ("peaks()");
 %! title ("legend() works for surface objects too");
 
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -607,16 +607,62 @@ function __gnuplot_draw_axes__ (h, plot_
         endif
 
         titlespec{data_idx} = "title \"\"";
         usingclause{data_idx} = sprintf ("binary array=%dx%d scan=yx origin=(%.15g,%.15g) dx=%.15g dy=%.15g using %s",
             x_dim, y_dim, x_origin, y_origin, dx, dy, format);
         withclause{data_idx} = sprintf ("with %s;", imagetype);
 
       case "line"
+        if (strcmp (get (obj.parent, "type"), "hggroup"))
+          hg = get (obj.parent, "children");
+          if (hg(1) == h_obj && ! isempty (get (obj.parent, "displayname")))
+            data_idx += 1;
+            is_image_data(data_idx) = false;
+            parametric(data_idx) = false;
+            have_cdata(data_idx) = false;
+            have_3d_patch(data_idx) = false;
+            tmpdispname = obj.displayname;
+            obj.displayname = get (obj.parent, "displayname");
+            tmp = undo_string_escapes (
+                    __maybe_munge_text__ (enhanced, obj, "displayname")
+                  );
+            titlespec{data_idx} = ['title "' tmp '"'];
+            obj.displayname = tmpdispname;
+            if (! isempty (findobj (obj.parent, "-property", "format", "-depth", 0)))
+              # Place phantom errorbar data for legend
+              data{data_idx} = nan (4,1);
+              usingclause{data_idx} = sprintf ("record=1 using ($1):($2):($3):($4)");
+              switch (get (obj.parent, "format"))
+                case {"box" "boxy" "boxxy"}
+                  errbars = "boxxy";
+                case "xyerr"
+                  errbars = "xyerrorbars";
+                case "yerr"
+                  errbars = "yerrorbars";
+                case "xerr"
+                  errbars = "xerrorbars";
+                otherwise
+                  errbars = "xerrorbars";
+              endswitch
+              withclause{data_idx} = sprintf ("with %s linestyle %d",
+                                              errbars, sidx(1));
+            else
+              ## Place phantom stemseries data for legend
+              data{data_idx} = nan (2,1);
+              usingclause{data_idx} = sprintf ("record=1 using ($1):($2)");
+              hgobj = get (obj.parent);
+              [hgstyle, hgsidx] = do_linestyle_command (hgobj, hgobj.color, data_idx,
+                                                        plot_stream);
+              withclause{data_idx} = sprintf ("with %s linestyle %d",
+                                              hgstyle{1}, hgsidx(1));
+            endif
+          endif
+        endif
+
         if (strcmp (obj.linestyle, "none")
             && (! isfield (obj, "marker")
                 || (isfield (obj, "marker")
                     && strcmp (obj.marker, "none"))))
           continue;
         endif
         data_idx += 1;
         is_image_data(data_idx) = false;
@@ -683,54 +729,21 @@ function __gnuplot_draw_axes__ (h, plot_
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
           withclause{data_idx} = sprintf ("with %s linestyle %d",
                                           style{3}, sidx(3));
         endif
 
+      case "patch"
         if (strcmp (get (obj.parent, "type"), "hggroup"))
-          hg = get (obj.parent, "children");
-          if (hg(1) == h_obj)
-            # Place phantom errorbar data for legend
-            data_idx += 1;
-            is_image_data(data_idx) = is_image_data(data_idx - 1);
-            parametric(data_idx) = parametric(data_idx - 1);
-            have_cdata(data_idx) = have_cdata(data_idx - 1);
-            have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-            obj.displayname = get (obj.parent, "displayname");
-            if (isempty (get (obj.parent, "displayname")))
-              titlespec{data_idx} = "title \"\"";
-            else
-              tmp = undo_string_escapes (
-                      __maybe_munge_text__ (enhanced, obj, "displayname")
-                    );
-              titlespec{data_idx} = ['title "' tmp '"'];
-            endif
-            data{data_idx} = nan (4,1);
-            usingclause{data_idx} = sprintf ("record=1 using ($1):($2):($3):($4)");
-            switch (get (obj.parent, "format"))
-              case {"box" "boxy" "boxxy"}
-                errbars = "boxxy";
-              case "xyerr"
-                errbars = "xyerrorbars";
-              case "yerr"
-                errbars = "yerrorbars";
-              case "xerr"
-                errbars = "xerrorbars";
-              otherwise
-                errbars = "xerrorbars";
-            endswitch
-            withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                            errbars, sidx(1));
-          endif
+          obj.displayname = get (obj.parent, "displayname");
         endif
 
-      case "patch"
         [nr, nc] = size (obj.xdata);
 
         if (! isempty (obj.cdata))
           cdat = obj.cdata;
         else
           cdat = [];
         endif
 
@@ -1178,23 +1191,32 @@ function __gnuplot_draw_axes__ (h, plot_
               data{data_idx} = data{data_idx - 1};
               withclause{data_idx} = tmpwith{3};
             endif
           endif
         endfor
 
       case "surface"
         view_map = true;
-        if (isempty (obj.displayname))
-          tspec = "title \"\"";
-        else
+        tspec = 'title ""';
+        if (! isempty (obj.displayname))
+          ## Place phantom line data for approximate legend symbol
+          data_idx += 1;
+          is_image_data(data_idx) = false;
+          parametric(data_idx) = false;
+          have_cdata(data_idx) = false;
+          have_3d_patch(data_idx) = false;
           tmp = undo_string_escapes (
                   __maybe_munge_text__ (enhanced, obj, "displayname")
                 );
-          tspec = ['title "' tmp '"'];
+          titlespec{data_idx} = ['title "' tmp '"'];
+          data{data_idx} = nan (3,1);
+          usingclause{data_idx} = sprintf ("record=1 using ($1):($2):($3)");
+          withclause{data_idx} = sprintf ("with line linewidth 10 linecolor rgb \"#%02x%02x%02x\"",
+                                          round (255*cmap(end/2,:)));
         endif
 
         xdat = obj.xdata;
         ydat = obj.ydata;
         zdat = obj.zdata;
         cdat = mapcdata (obj.cdata, obj.cdatamapping, clim, cmap_sz);
         err = false;
         if (! size_equal (zdat, cdat))
@@ -1976,26 +1998,23 @@ function [style, ltidx] = do_linestyle_c
       endif
       if (isfield (obj, "markersize"))
         fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
       endif
     endif
   endif
   if (! isempty(pt) && isfield (obj, "markeredgecolor")
       && ! strcmp (obj.markeredgecolor, "none"))
-    if (facesame && ! isempty (pt)
-        && (strcmp (obj.markeredgecolor, "auto")
-            || (isnumeric (obj.markeredgecolor)
-                && isequal (color, obj.markeredgecolor))))
+    if (facesame && (strcmp (obj.markeredgecolor, "auto")
+        || (isnumeric (obj.markeredgecolor)
+            && isequal (color, obj.markeredgecolor))))
       if (sidx == 1 && ((length (style{sidx}) == 5
           && strncmp (style{sidx}, "lines", 5)) || isempty (style{sidx})))
-        if (! isempty (pt))
-          style{sidx} = [style{sidx} "points"];
-          fprintf (plot_stream, " pointtype %s", pt);
-        endif
+        style{sidx} = [style{sidx} "points"];
+        fprintf (plot_stream, " pointtype %s", pt);
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     else
       if (! found_style)
         fputs (plot_stream, " default");
       endif
@@ -2014,21 +2033,19 @@ function [style, ltidx] = do_linestyle_c
         else
           edgecolor = obj.color;
         end
         fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                  round (255*edgecolor));
       else
         fprintf (plot_stream, " palette");
       endif
-      if (! isempty (pt))
-        style{sidx} = "points";
-        ltidx(sidx) = idx;
-        fprintf (plot_stream, " pointtype %s", pt);
-      endif
+      style{sidx} = "points";
+      ltidx(sidx) = idx;
+      fprintf (plot_stream, " pointtype %s", pt);
       if (isfield (obj, "markersize"))
         fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
       endif
     endif
   endif
 
   if (! found_style && isempty (style{1}))
     fputs (plot_stream, " default");
