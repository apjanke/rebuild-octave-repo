# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495562143 14400
#      Tue May 23 13:55:43 2017 -0400
# Node ID d2e300f7700c3eb2757bfe4ab228993b9fbd01e3
# Parent  551fa387961523dba96e06b24bd37806f31f84bc
fix compound binary op error introduced in c452180ab672

Access correct operator and operands when evaluating compound binary
expressions.

* pt-binop.h (tree_binary_expression::lhs,
tree_binary_expression::rhs): Now virtual.

* pt-cbinop.h (tree_compound_binary_expression::cop_lhs,
tree_compound_binary_expression::cop_rhs): Rename from op_lhs and
op_rhs.
(tree_compound_binary_expression::lhs,
tree_compound_binary_expression::rhs): New functions.

* pt-eval.cc ((tree_evaluator::visit_compound_binary_op): Use
compound_binary_op expression type instead of binary_op expression
type in call to do_binary_op.

diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -90,18 +90,18 @@ namespace octave
     bool is_binary_expression (void) const { return true; }
 
     bool rvalue_ok (void) const { return true; }
 
     std::string oper (void) const;
 
     octave_value::binary_op op_type (void) const { return etype; }
 
-    tree_expression * lhs (void) { return op_lhs; }
-    tree_expression * rhs (void) { return op_rhs; }
+    virtual tree_expression * lhs (void) { return op_lhs; }
+    virtual tree_expression * rhs (void) { return op_rhs; }
 
     bool is_eligible_for_braindead_shortcircuit (void) const
     {
       return eligible_for_braindead_shortcircuit;
     }
 
     tree_expression * dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -43,32 +43,36 @@ namespace octave
   {
   public:
 
     tree_compound_binary_expression (tree_expression *a, tree_expression *b,
                                      int l, int c,
                                      octave_value::binary_op t,
                                      tree_expression *ca, tree_expression *cb,
                                      octave_value::compound_binary_op ct)
-      : tree_binary_expression (a, b, l, c, t), op_lhs (ca), op_rhs (cb),
+      : tree_binary_expression (a, b, l, c, t), cop_lhs (ca), cop_rhs (cb),
         etype (ct) { }
 
     octave_value::compound_binary_op cop_type (void) const { return etype; }
 
     bool rvalue_ok (void) const { return true; }
 
+    tree_expression * lhs (void) { return cop_lhs; }
+    tree_expression * rhs (void) { return cop_rhs; }
+
     void accept (tree_walker& tw)
     {
       tw.visit_compound_binary_expression (*this);
     }
 
   private:
 
-    tree_expression *op_lhs;
-    tree_expression *op_rhs;
+    tree_expression *cop_lhs;
+    tree_expression *cop_rhs;
+
     octave_value::compound_binary_op etype;
 
     // No copying!
 
     tree_compound_binary_expression (const tree_compound_binary_expression&) = delete;
 
     tree_compound_binary_expression& operator =
     (const tree_compound_binary_expression&) = delete;
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -295,17 +295,17 @@ namespace octave
         tree_expression *op_rhs = expr.rhs ();
 
         if (a.is_defined () && op_rhs)
           {
             octave_value b = evaluate (op_rhs);
 
             if (b.is_defined ())
               {
-                octave_value::binary_op etype = expr.op_type ();
+                octave_value::compound_binary_op etype = expr.cop_type ();
 
                 val = ::do_binary_op (etype, a, b);
               }
           }
       }
 
     m_value_stack.push (ovl (val));
   }
