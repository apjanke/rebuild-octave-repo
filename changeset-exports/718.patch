# HG changeset patch
# User jwe
# Date 780159498 0
#      Wed Sep 21 14:58:18 1994 +0000
# Node ID e81d3a66725e6494391f5182ee0d975f968aebc8
# Parent  b14a2dda50e76a59063ee1e4bae4ef6514f5f0cf
[project @ 1994-09-21 14:58:18 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -91,18 +91,22 @@ where OPT is an optional single characte
 
   tree_constant arg_a = args(0);
 
   int a_nr = arg_a.rows ();
   int a_nc = arg_a.columns ();
 
 // Check argument 1 dimensions.
 
-  if (empty_arg ("balance", a_nr, a_nc) < 0)
+  int arg_is_empty = empty_arg ("balance", a_nr, a_nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  if (arg_is_empty > 0)
+    return Octave_object (2, Matrix ());
 
   if (a_nr != a_nc)
     {
       gripe_square_matrix_required ("balance");
       return retval;
     }
 
 // Extract argument 1 parameter for both AEP and GEP.
diff --git a/src/chol.cc b/src/chol.cc
--- a/src/chol.cc
+++ b/src/chol.cc
@@ -49,18 +49,22 @@ DEFUN_DLD_BUILTIN ("chol", Fchol, Schol,
       return retval;
     }
 
   tree_constant arg = args(0);
     
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("chol", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("chol", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  if (arg_is_empty > 0)
+    return Matrix ();
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -98,17 +98,17 @@ dassl_user_function (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
 
-DEFUN_DLD_BUILTIN ("dassl", Fdassl, Sdassl, 5, 1,
+DEFUN_DLD_BUILTIN ("dassl", Fdassl, Sdassl, 5, 2,
   "dassl (\"function_name\", x_0, xdot_0, t_out)\n\
 dassl (F, X_0, XDOT_0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of residuals.  It must have the form\n\
 \n\
   res = f (x, xdot, t)\n\
 \n\
@@ -120,17 +120,17 @@ where x, xdot, and res are vectors, and 
 
   if (nargin < 4 || nargin > 5)
     {
       print_usage ("dassl");
       return retval;
     }
 
   dassl_fcn = is_valid_function (args(0), "dassl", 1);
-  if (! dassl_fcn || takes_correct_nargs (dassl_fcn, 4, "dassl", 1) != 1)
+  if (! dassl_fcn || takes_correct_nargs (dassl_fcn, 3, "dassl", 1) != 1)
     return retval;
 
   ColumnVector state = args(1).vector_value ();
 
   if (error_state)
     {
       error ("dassl: expecting state vector as second argument");
       return retval;
diff --git a/src/det.cc b/src/det.cc
--- a/src/det.cc
+++ b/src/det.cc
@@ -55,18 +55,21 @@ DEFUN_DLD_BUILTIN ("det", Fdet, Sdet, 2,
   int nc = arg.columns ();
 
   if (nr == 0 && nc == 0)
     {
       retval = 1.0;
       return retval;
     }
 
-  if (empty_arg ("det", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("det", nr, nc);
+  if (arg_is_empty < 0)
     return retval;
+  if (arg_is_empty > 0)
+    return Matrix (1, 1, 1.0);
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("det");
       return retval;
     }
 
   if (arg.is_real_type ())
diff --git a/src/eig.cc b/src/eig.cc
--- a/src/eig.cc
+++ b/src/eig.cc
@@ -48,18 +48,21 @@ DEFUN_DLD_BUILTIN ("eig", Feig, Seig, 2,
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("eig", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("eig", nr, nc);
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (2, Matrix ());
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("eig");
       return retval;
     }
 
   Matrix tmp;
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -80,18 +80,22 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
       4.8562548562548563e-6,
       1.3875013875013875e-7,
       1.9270852604185938e-9,
     };
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("expm", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("expm", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  if (arg_is_empty > 0)
+    return Matrix ();
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("expm");
       return retval;
     }
 
   int i, j;
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -41,16 +41,18 @@ Software Foundation, 675 Mass Ave, Cambr
 // Global pointer for user defined function required by hybrd1.
 static tree_fvc *fsolve_fcn;
 
 static NLEqn_options fsolve_opts;
 
 int
 hybrd_info_to_fsolve_info (int info)
 {
+  cerr << "info: " << info << "\n";
+
   switch (info)
     {
     case -1:
       info = -2;
       break;
 
     case 0:
       info = -1;
@@ -114,40 +116,40 @@ fsolve_user_function (const ColumnVector
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
   return retval;
 }
 
-DEFUN_DLD_BUILTIN ("fsolve", Ffsolve, Sfsolve, 5, 1,
+DEFUN_DLD_BUILTIN ("fsolve", Ffsolve, Sfsolve, 2, 1,
   "Solve nonlinear equations using Minpack.  Usage:\n\
 \n\
   [X, INFO] = fsolve (F, X0)\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the vector of function values.  It must have the form\n\
 \n\
   y = f (x)
 \n\
 where y and x are vectors.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin < 2 || nargin > 6 || nargout > 3)
+  if (nargin != 2 || nargout > 3)
     {
       print_usage ("fsolve");
       return retval;
     }
 
   fsolve_fcn = is_valid_function (args(0), "fsolve", 1);
-  if (! fsolve_fcn || takes_correct_nargs (fsolve_fcn, 2, "fsolve", 1) != 1)
+  if (! fsolve_fcn || takes_correct_nargs (fsolve_fcn, 1, "fsolve", 1) != 1)
     return retval;
 
   ColumnVector x = args(1).vector_value ();
 
   if (error_state)
     {
       error ("fsolve: expecting vector as second argument");
       return retval;
diff --git a/src/hess.cc b/src/hess.cc
--- a/src/hess.cc
+++ b/src/hess.cc
@@ -49,18 +49,22 @@ DEFUN_DLD_BUILTIN ("hess", Fhess, Shess,
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("hess", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("hess", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (2, Matrix ());
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("hess");
       return retval;
     }
 
   if (arg.is_real_type ())
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -49,18 +49,22 @@ DEFUN_DLD_BUILTIN ("inv", Finv, Sinv, 2,
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("inverse", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("inverse", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Matrix ();
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("inverse");
       return retval;
     }
 
   if (arg.is_real_type ())
diff --git a/src/log.cc b/src/log.cc
--- a/src/log.cc
+++ b/src/log.cc
@@ -46,19 +46,23 @@ DEFUN_DLD_BUILTIN ("logm", Flogm, Slogm,
 
   if (nargin != 1)
     {
       print_usage ("logm");
       return retval;
     }
 
   tree_constant arg = args(0);
-    
-  if (empty_arg ("logm", arg.rows (), arg.columns ()) < 0)
+
+  int arg_is_empty = empty_arg ("logm", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Matrix ();
 
   if (arg.is_real_scalar ())
     {
       double d = arg.double_value ();
       if (d > 0.0)
 	retval(0) = log (d);
       else
 	{
@@ -154,19 +158,23 @@ DEFUN_DLD_BUILTIN ("sqrtm", Fsqrtm, Ssqr
 
   if (nargin != 1)
     {
       print_usage ("sqrtm");
       return retval;
     }
 
   tree_constant arg = args(0);
-    
-  if (empty_arg ("sqrtm", arg.rows (), arg.columns ()))
+
+  int arg_is_empty = empty_arg ("sqrtm", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Matrix ();
 
   if (arg.is_real_scalar ())
     {
       double d = arg.double_value ();
       if (d > 0.0)
 	retval(0) = sqrt (d);
       else
 	{
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -87,17 +87,17 @@ lsode_user_function (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
 
-DEFUN_DLD_BUILTIN ("lsode", Flsode, Slsode, 6, 1,
+DEFUN_DLD_BUILTIN ("lsode", Flsode, Slsode, 4, 1,
   "lsode (F, X0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of right hand sides.  It must have the form\n\
 \n\
   xdot = f (x, t)\n\
 \n\
 where xdot and x are vectors and t is a scalar.\n")
@@ -108,17 +108,17 @@ where xdot and x are vectors and t is a 
 
   if (nargin < 3 || nargin > 4 || nargout > 1)
     {
       print_usage ("lsode");
       return retval;
     }
 
   lsode_fcn = is_valid_function (args(0), "lsode", 1);
-  if (! lsode_fcn || takes_correct_nargs (lsode_fcn, 3, "lsode", 1) != 1)
+  if (! lsode_fcn || takes_correct_nargs (lsode_fcn, 2, "lsode", 1) != 1)
     return retval;
 
   ColumnVector state = args(1).vector_value ();
 
   if (error_state)
     {
       error ("lsode: expecting state vector as second argument");
       return retval;
diff --git a/src/lu.cc b/src/lu.cc
--- a/src/lu.cc
+++ b/src/lu.cc
@@ -48,18 +48,22 @@ DEFUN_DLD_BUILTIN ("lu", Flu, Slu, 2, 3,
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("lu", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("lu", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (3, Matrix ());
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("lu");
       return retval;
     }
 
   if (arg.is_real_type ())
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -60,20 +60,18 @@ npsol_objective_function (const ColumnVe
       decision_vars = m;
     }
   else
     {
       double d = x.elem (0);
       decision_vars = d;
     }
 
-//  tree_constant name = npsol_objective->name ();
   Octave_object args;
-  args(1) = decision_vars;
-//  args(0) = name;
+  args(0) = decision_vars;
 
   static double retval;
   retval = 0.0;
 
   tree_constant objective_value;
   if (npsol_objective)
     {
       Octave_object tmp = npsol_objective->eval (0, 1, args);
@@ -135,20 +133,18 @@ npsol_constraint_function (const ColumnV
       decision_vars = m;
     }
   else
     {
       double d = x.elem (0);
       decision_vars = d;
     }
 
-//  tree_constant name = npsol_constraints->name ();
   Octave_object args;
-  args(1) = decision_vars;
-//  args(0) = name;
+  args(0) = decision_vars;
 
   if (npsol_constraints)
     {
       Octave_object tmp = npsol_constraints->eval (0, 1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating constraints");
@@ -227,22 +223,22 @@ nonlinear_constraints_ok (const ColumnVe
 	}
     }
   return ok;
 }
 
 #endif
 
 #if defined (NPSOL_MISSING)
-DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 11, 3,
+DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 10, 4,
   "This function requires NPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/npsol/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 11, 3,
+DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 10, 4,
   "[X, OBJ, INFO, LAMBDA] = npsol (X, PHI [, LB, UB] [, LB, A, UB] [, LB, G, UB])\n\
 \n\
 Groups of arguments surrounded in `[]' are optional, but\n\
 must appear in the same relative order shown above.\n\
 \n\
 The second argument is a string containing the name of the objective\n\
 function to call.  The objective function must be of the form\n\
 \n\
@@ -301,17 +297,17 @@ Handle all of the following:
   if (error_state || x.capacity () == 0)
     {
       error ("npsol: expecting vector as first argument");
       return retval;
     }
 
   npsol_objective = is_valid_function (args(1), "npsol", 1);
   if (! npsol_objective
-      || takes_correct_nargs (npsol_objective, 2, "npsol", 1) != 1)
+      || takes_correct_nargs (npsol_objective, 1, "npsol", 1) != 1)
     return retval;
 
   Objective func (npsol_objective_function);
 
   ColumnVector soln;
 
   Bounds bounds;
   if (nargin == 4 || nargin == 7 || nargin == 10)
@@ -405,17 +401,17 @@ Handle all of the following:
 	      NPSOL nlp (x, func, bounds, linear_constraints);
 	      nlp.copy (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  goto solved;
 	}
       else
 	{
-	  if (takes_correct_nargs (npsol_constraints, 2, "npsol", 1))
+	  if (takes_correct_nargs (npsol_constraints, 1, "npsol", 1))
 	    {
 	      ColumnVector nlub = args(nargin).vector_value ();
 	      ColumnVector nllb = args(nargin-2).vector_value ();
 
 	      if (error_state
 		  || (! nonlinear_constraints_ok
 		      (x, nllb, npsol_constraint_function, nlub, "npsol", 1)))
 		return retval;
@@ -448,17 +444,17 @@ Handle all of the following:
     {
       if (! npsol_constraints)
 	{
 	  // Produce error message.
 	  is_valid_function (args(nargin-1), "npsol", 1);
 	}
       else
 	{
-	  if (takes_correct_nargs (npsol_constraints, 2, "npsol", 1))
+	  if (takes_correct_nargs (npsol_constraints, 1, "npsol", 1))
 	    {
 	      ColumnVector nlub = args(nargin).vector_value ();
 	      ColumnVector nllb = args(nargin-2).vector_value ();
 
 	      if (error_state
 		  || (! nonlinear_constraints_ok
 		      (x, nllb, npsol_constraint_function, nlub, "npsol", 1)))
 		return retval;
diff --git a/src/pinv.cc b/src/pinv.cc
--- a/src/pinv.cc
+++ b/src/pinv.cc
@@ -64,17 +64,17 @@ Returns the pseudoinverse of X; singular
       error ("pinv: tol must be greater than zero");
       return retval;
     }
 
   int arg_is_empty = empty_arg ("pinv", arg.rows (), arg.columns ());
 
   if (arg_is_empty < 0)
     return retval;
-  else if (arg_is_empty)
+  else if (arg_is_empty > 0)
     return Matrix ();
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	retval = m.pseudo_inverse (tol);
diff --git a/src/qr.cc b/src/qr.cc
--- a/src/qr.cc
+++ b/src/qr.cc
@@ -62,19 +62,23 @@ that R = triu (qr (X))")
 
   if (nargin != 1 && nargin != 2 || nargout > 3)
     {
       print_usage ("qr");
       return retval;
     }
 
   tree_constant arg = args(0);
-    
-  if (empty_arg ("qr", arg.rows (), arg.columns ()) < 0)
+
+  int arg_is_empty = empty_arg ("qr", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (3, Matrix ());
 
   QR::type type = nargout == 1 ? QR::raw
     : (nargin == 2 ? QR::economy : QR::std);
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -78,17 +78,17 @@ quad_user_function (double x)
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	}
     }
 
   return retval;
 }
 
-DEFUN_DLD_BUILTIN ("quad", Fquad, Squad, 6, 3,
+DEFUN_DLD_BUILTIN ("quad", Fquad, Squad, 5, 3,
   "[V, IER, NFUN] = quad (F, A, B [, TOL] [, SING])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the value of the integrand.  It must have the form\n\
 \n\
   y = f (x)
 \n\
 where y and x are scalars.\n\
@@ -103,18 +103,18 @@ at which the integrand is singular.")
   int nargin = args.length ();
 
   if (nargin < 3 || nargin > 5 || nargout > 4)
     {
       print_usage ("quad");
       return retval;
     }
 
-  quad_fcn = is_valid_function (args(0), "fsolve", 1);
-  if (! quad_fcn || takes_correct_nargs (quad_fcn, 2, "fsolve", 1) != 1)
+  quad_fcn = is_valid_function (args(0), "quad", 1);
+  if (! quad_fcn || takes_correct_nargs (quad_fcn, 1, "quad", 1) != 1)
     return retval;
 
   double a = args(1).double_value ();
 
   if (error_state)
     {
       error ("quad: expecting second argument to be a scalar");
       return retval;
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -73,19 +73,23 @@ A and B must be real matrices.")
   tree_constant arg_a = args(0);
   tree_constant arg_b = args(1);
 
   int a_nr = arg_a.rows();
   int a_nc = arg_a.columns();
 
   int b_nr = arg_b.rows();
   int b_nc = arg_b.columns();
-  
-  if (empty_arg ("qzvalue", a_nr, a_nc) < 0
-      || empty_arg ("qzvalue", b_nr, b_nc) < 0)
+
+  int arg_a_is_empty = empty_arg ("qzvalue", a_nr, a_nc);
+  int arg_b_is_empty = empty_arg ("qzvalue", b_nr, b_nc);
+
+  if (arg_a_is_empty > 0 && arg_b_is_empty > 0)
+    return Matrix ();
+  else if (arg_a_is_empty || arg_b_is_empty)
     return retval;
 
 // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc || b_nr != b_nc)
     {
       gripe_square_matrix_required ("qzvalue: first two parameters:");
       return retval;
diff --git a/src/schur.cc b/src/schur.cc
--- a/src/schur.cc
+++ b/src/schur.cc
@@ -78,18 +78,22 @@ characters:\n\
     {
       warning ("schur: incorrect ordered schur argument `%c'", *ord);
       return retval;
     }
 
   int nr = arg.rows ();
   int nc = arg.columns ();
 
-  if (empty_arg ("schur", nr, nc) < 0)
+  int arg_is_empty = empty_arg ("schur", nr, nc);
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (2, Matrix ());
 
   if (nr != nc)
     {
       gripe_square_matrix_required ("schur");
       return retval;
     }
 
   if (arg.is_real_matrix ())
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -50,18 +50,22 @@ unnecessary rows and columns of U and V"
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     {
       print_usage ("svd");
       return retval;
     }
 
   tree_constant arg = args(0);
 
-  if (empty_arg ("svd", arg.rows (), arg.columns ()) < 0)
+  int arg_is_empty = empty_arg ("svd", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
     return retval;
+  else if (arg_is_empty > 0)
+    return Octave_object (3, Matrix ());
 
   SVD::type type = (nargin == 2) ? SVD::economy : SVD::std;
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
       if (! error_state)
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -76,20 +76,24 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
   int a_nr = arg_a.rows ();
   int a_nc = arg_a.columns ();
 
   int b_nr = arg_b.rows ();
   int b_nc = arg_b.columns ();
 
   int c_nr = arg_c.rows ();
   int c_nc = arg_c.columns ();
-  
-  if (empty_arg ("syl", a_nr, a_nc) < 0
-      || empty_arg ("syl", b_nr, b_nc) < 0
-      || empty_arg ("syl", c_nr, c_nc) < 0)
+
+  int arg_a_is_empty = empty_arg ("syl", a_nr, a_nc);
+  int arg_b_is_empty = empty_arg ("syl", b_nr, b_nc);
+  int arg_c_is_empty = empty_arg ("syl", c_nr, c_nc);
+
+  if (arg_a_is_empty > 0 && arg_b_is_empty > 0 && arg_c_is_empty > 0)
+    return Matrix ();
+  else if (arg_a_is_empty || arg_b_is_empty || arg_c_is_empty)
     return retval;
 
 // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc || b_nr != b_nc)
     {
       gripe_square_matrix_required ("syl: first two parameters:");
       return retval;
