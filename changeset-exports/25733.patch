# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533251951 25200
#      Thu Aug 02 16:19:11 2018 -0700
# Node ID d3aa89a5b152adffcb21fc900588061d33a291a6
# Parent  c7ea6c3cd8de236dfa71f8f59d27b535bfc8a8ed
quantile.m: Return a vector of the same orientation as 2nd input for Matlab compatibility (bug #54421).

quantile.m: Check for case where output is a vector and second input argument
is a vector.  When found, use reshape to change output to match shape of second
input.  Re-format some comments to use capital 'D' for dimension.
Adjust BIST tests to pass with new behavior.  Add BIST tests for bug #54421.

diff --git a/scripts/statistics/quantile.m b/scripts/statistics/quantile.m
--- a/scripts/statistics/quantile.m
+++ b/scripts/statistics/quantile.m
@@ -182,31 +182,40 @@ function q = quantile (x, p = [], dim, m
   ## Set the permutation vector.
   perm = 1:ndims (x);
   perm(1) = dim;
   perm(dim) = 1;
 
   ## Permute dim to the 1st index.
   x = permute (x, perm);
 
-  ## Save the size of the permuted x N-d array.
+  ## Save the size of the permuted x N-D array.
   sx = size (x);
 
-  ## Reshape to a 2-d array.
-  x = reshape (x, [sx(1), prod(sx(2:end))]);
+  ## Reshape to a 2-D array.
+  x = reshape (x, sx(1), []);
 
   ## Calculate the quantiles.
   q = __quantile__ (x, p, method);
 
-  ## Return the shape to the original N-d array.
+  ## Return the shape to the original N-D array.
   q = reshape (q, [numel(p), sx(2:end)]);
 
   ## Permute the 1st index back to dim.
   q = ipermute (q, perm);
 
+  ## For Matlab compatibility, return vectors with the same orientation as p
+  if (isvector (q) && ! isscalar (q) && ! isscalar (p))
+    if (isrow (p))
+      q = reshape (q, 1, []);
+    else
+      q = reshape (q, [], 1);
+    endif
+  endif
+
 endfunction
 
 
 %!test
 %! p = 0.50;
 %! q = quantile (1:4, p);
 %! qa = 2.5;
 %! assert (q, qa);
@@ -246,85 +255,85 @@ endfunction
 %!      1.0000   1.0000   2.0000   3.0000   4.0000
 %!      1.0000   1.0000   2.0000   3.0000   4.0000
 %!      1.0000   1.5000   2.5000   3.5000   4.0000
 %!      1.0000   1.2500   2.5000   3.7500   4.0000
 %!      1.0000   1.7500   2.5000   3.2500   4.0000
 %!      1.0000   1.4167   2.5000   3.5833   4.0000
 %!      1.0000   1.4375   2.5000   3.5625   4.0000];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = [0.00, 0.25, 0.50, 0.75, 1.00];
 %! x = [1; 2; 3; 4; 5];
 %! a = [1.0000   2.0000   3.0000   4.0000   5.0000
 %!      1.0000   2.0000   3.0000   4.0000   5.0000
 %!      1.0000   1.0000   2.0000   4.0000   5.0000
 %!      1.0000   1.2500   2.5000   3.7500   5.0000
 %!      1.0000   1.7500   3.0000   4.2500   5.0000
 %!      1.0000   1.5000   3.0000   4.5000   5.0000
 %!      1.0000   2.0000   3.0000   4.0000   5.0000
 %!      1.0000   1.6667   3.0000   4.3333   5.0000
 %!      1.0000   1.6875   3.0000   4.3125   5.0000];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = [0.00, 0.25, 0.50, 0.75, 1.00];
 %! x = [1; 2; 5; 9];
 %! a = [1.0000   1.0000   2.0000   5.0000   9.0000
 %!      1.0000   1.5000   3.5000   7.0000   9.0000
 %!      1.0000   1.0000   2.0000   5.0000   9.0000
 %!      1.0000   1.0000   2.0000   5.0000   9.0000
 %!      1.0000   1.5000   3.5000   7.0000   9.0000
 %!      1.0000   1.2500   3.5000   8.0000   9.0000
 %!      1.0000   1.7500   3.5000   6.0000   9.0000
 %!      1.0000   1.4167   3.5000   7.3333   9.0000
 %!      1.0000   1.4375   3.5000   7.2500   9.0000];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = [0.00, 0.25, 0.50, 0.75, 1.00];
 %! x = [1; 2; 5; 9; 11];
 %! a = [1.0000    2.0000    5.0000    9.0000   11.0000
 %!      1.0000    2.0000    5.0000    9.0000   11.0000
 %!      1.0000    1.0000    2.0000    9.0000   11.0000
 %!      1.0000    1.2500    3.5000    8.0000   11.0000
 %!      1.0000    1.7500    5.0000    9.5000   11.0000
 %!      1.0000    1.5000    5.0000   10.0000   11.0000
 %!      1.0000    2.0000    5.0000    9.0000   11.0000
 %!      1.0000    1.6667    5.0000    9.6667   11.0000
 %!      1.0000    1.6875    5.0000    9.6250   11.0000];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = [0.00, 0.25, 0.50, 0.75, 1.00];
 %! x = [16; 11; 15; 12; 15;  8; 11; 12;  6; 10];
 %! a = [6.0000   10.0000   11.0000   15.0000   16.0000
 %!      6.0000   10.0000   11.5000   15.0000   16.0000
 %!      6.0000    8.0000   11.0000   15.0000   16.0000
 %!      6.0000    9.0000   11.0000   13.5000   16.0000
 %!      6.0000   10.0000   11.5000   15.0000   16.0000
 %!      6.0000    9.5000   11.5000   15.0000   16.0000
 %!      6.0000   10.2500   11.5000   14.2500   16.0000
 %!      6.0000    9.8333   11.5000   15.0000   16.0000
 %!      6.0000    9.8750   11.5000   15.0000   16.0000];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = [0.00, 0.25, 0.50, 0.75, 1.00];
 %! x = [-0.58851;  0.40048;  0.49527; -2.551500; -0.52057; ...
 %!      -0.17841; 0.057322; -0.62523;  0.042906;  0.12337];
 %! a = [-2.551474  -0.588505  -0.178409   0.123366   0.495271
@@ -332,17 +341,17 @@ endfunction
 %!      -2.551474  -0.625231  -0.178409   0.123366   0.495271
 %!      -2.551474  -0.606868  -0.178409   0.090344   0.495271
 %!      -2.551474  -0.588505  -0.067751   0.123366   0.495271
 %!      -2.551474  -0.597687  -0.067751   0.192645   0.495271
 %!      -2.551474  -0.571522  -0.067751   0.106855   0.495271
 %!      -2.551474  -0.591566  -0.067751   0.146459   0.495271
 %!      -2.551474  -0.590801  -0.067751   0.140686   0.495271];
 %! for m = 1:9
-%!   q = quantile (x, p, 1, m).';
+%!   q = quantile (x, p, 1, m);
 %!   assert (q, a(m,:), 0.0001);
 %! endfor
 
 %!test
 %! p = 0.5;
 %! x = [0.112600, 0.114800, 0.052100, 0.236400, 0.139300
 %!      0.171800, 0.727300, 0.204100, 0.453100, 0.158500
 %!      0.279500, 0.797800, 0.329600, 0.556700, 0.730700
@@ -361,16 +370,20 @@ endfunction
 %! x = rand (sx);
 %! dim = 2;
 %! p = 0.5;
 %! yobs = quantile (x, p, dim);
 %! yexp = median (x, dim);
 %! assert (yobs, yexp);
 
 %!assert <*45455> (quantile ([1 3 2], 0.5, 1), [1 3 2])
+%!assert <*54421> (quantile ([1:10], 0.5, 1), 1:10)
+%!assert <*54421> (quantile ([1:10]', 0.5, 2), [1:10]')
+%!assert <*54421> (quantile ([1:10], [0.25, 0.75]), [3, 8])
+%!assert <*54421> (quantile ([1:10], [0.25, 0.75]'), [3; 8])
 
 ## Test input validation
 %!error quantile ()
 %!error quantile (1, 2, 3, 4, 5)
 %!error quantile (['A'; 'B'], 10)
 %!error quantile (1:10, [true, false])
 %!error quantile (1:10, ones (2,2))
 %!error quantile (1, 1, 1.5)
