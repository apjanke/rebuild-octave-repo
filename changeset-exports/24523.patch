# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1515010901 -3600
#      Wed Jan 03 21:21:41 2018 +0100
# Node ID 501986e12b8b29dc8d4d7f053dcf5520b1c446b1
# Parent  ec5591efafe469c96bb66852cd2af2de0465e67f
Implement "pickableparts" property (bug #52795).

* NEWS: Announce that property "PickableParts" has been implemented.

* gendpropdoc.m: Document property. State that the property does nothing for
  figure and root objects.

* graphics.in.h: Add allowed value "all" to base_properties::pickableparts and
  remove pickableparts property from all other objects.

* gl-render.h (opengl_renderer::selecting): Add new boolean attribute and
  setter.

* gl-render.cc (opengl_renderer::draw_axes): While in selection mode don't draw
  axes if "pickableparts" is "none".
  (opengl_renderer::draw_axes_x/y/zgrid, opengl_renderer::draw_axes_plane):
  While in selection mode, allow drawing grids/plane if "pickableparts" is "all"
  (opengl_renderer::draw_line): While in selection mode, allow drawing line and
  markers "pickableparts" is "all".
  (opengl_renderer::draw_patch): While in selection mode, allow drawing lines
  polygons and markers if "pickableparts" is "all".
  (opengl_renderer::draw_surface): ditto.
  (opengl_renderer::draw_all_lights): while in selection mode, allow drawing
  children objects if "pickableparts" is "all".

* gl-select.cc (opengl_selector::draw): Put renderer in selection mode.

* Canvas.cc (Canvas::canvasMousePressEvent): overhaul handling of currentObj.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -58,16 +58,19 @@ Summary of important user-visible change
     "Octave:quadcc:RelTol-conversion" and can be disabled with
 
       warning ("off", "Octave:quadcc:RelTol-conversion")
 
  ** The qr function now returns a standard factorization unless
     explicitly instructed to perform an economy factorization by using a
     final argument of 0.
 
+ ** The graphic object property "PickableParts" has been implemented which
+    controls whether an object can accept mouse clicks.
+
  ** Text objects now implement the properties "BackgroundColor",
     "EdgeColor", "LineStyle", "LineWidth", and "Margin".
 
  ** An initial implementation of alpha transparency has been made for
     patch and surface objects.  Printing to svg and pdf is supported.
 
  ** ishandle now returns true for both graphics handle objects and
     Java objects.  The latter change was made for Matlab compatibility.
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -160,21 +160,40 @@ e.g., @code{set (groot, \"default__objna
 is deleted.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "handlevisibility"
         s.doc = "If __prop__ is @qcode{\"off\"}, the __objname__'s \
 handle is not visible in its parent's \"children\" property.";
 
       case "hittest"
+        s.doc = "Specify whether __objname__ processes mouse events \
+or passes them to ancestors of the object.  When enabled, the object may \
+respond to mouse clicks by evaluating the @qcode{\"buttondownfcn\"}, showing \
+the uicontextmenu, and eventually becoming the root \
+@qcode{\"currentobject\"}.  This property is only relevant when the object \
+can accept mouse clicks which is determined by the @qcode{\"pickableparts\"} \
+property.  @xref{XREF__objname__pickableparts, , @w{pickableparts property}}.";
+
       case "interruptible"
       case "parent"
         s.doc = "Handle of the parent graphics object.";
         s.valid = valid_handle;
 
+      case "pickableparts"
+        s.doc = "Specify whether __objname__ will accept mouse clicks.  \
+By default, __prop__ is @qcode{\"visible\"} and only visible parts of the \
+__objname__ or its children may react to mouse clicks.  When __prop__ is \
+@qcode{\"all\"} both visible and invisible parts (or children) may react to \
+mouse clicks.  When __prop__ is @qcode{\"none\"} mouse clicks on the object \
+are ignored and transmitted to any objects underneath this one.  When an \
+object is configured to accept mouse clicks the @qcode{\"hittest\"} property \
+will determine how they are processed.  \
+@xref{XREF__objname__hittest, , @w{hittest property}}.";
+        
       case "selected"
       case "selectionhighlight"
       case "tag"
         s.doc = "A user-defined string to label the graphics object.";
         s.valid = valid_string;
 
       case "type"
         s.doc = "Class name of the graphics object.  __prop__ is \
@@ -205,16 +224,22 @@ not rendered on screen.";
             "hittest", "interruptible", "selected", ...
             "selectionhighlight", "uicontextmenu", "visible"}
         s.doc = doc_unused;
 
       case "parent"
         s.doc = "Root figure has no parent graphics object.  __prop__ \
 is always empty.";
 
+      case "hittest"
+        s.doc = doc_unused;
+        
+      case "pickableparts"
+        s.doc = doc_unused;
+
       ## Specific properties
       case "callbackobject"
         s.doc = "Graphics handle of the current object whose callback is executing.";
         s.valid = valid_handle;
 
       case "currentfigure"
         s.doc = "Graphics handle of the current figure.";
         s.valid = valid_handle;
@@ -291,16 +316,19 @@ are visible in their parents' children l
 
   ## Figure properties
   elseif (strcmp (objname, "figure"))
     switch (field)
       ## Overridden shared properties
       case "clipping"
         s.doc = doc_unused;
 
+      case "pickableparts"
+        s.doc = doc_unused;
+
       ## Specific properties
       case "alphamap"
         s.doc = sprintf (doc_notimpl, "Transparency");
 
       case "closerequestfcn"
         s.doc = "Function that is executed when a figure is deleted.  \
 @xref{XREFclosereq, , closereq function}.\n\n__fcnmsg__";
         s.valid = valid_fcn;
@@ -716,19 +744,16 @@ axes, and legend.  The four elements of 
 coordinates of the lower left corner and width and height of the \
 plot, in units normalized to the width and height of the plot \
 window.  For example, @code{[0.2, 0.3, 0.4, 0.5]} sets the lower \
 left corner of the axes at @math{(0.2, 0.3)} and the width and \
 height to be 0.4 and 0.5 respectively.  \
 @xref{XREFaxesposition, , @w{position property}}.";
         s.valid = valid_4elvec;
 
-      case "pickableparts"
-        s.doc = doc_unused;
-
       case "plotboxaspectratio"
         s.doc = "@xref{XREFpbaspect, , pbaspect function}.  \
 __modemsg__.";
 
       case "plotboxaspectratiomode"
       case "position"
         s.doc = "Specify the position of the plot excluding titles, \
 axes, and legend.  The four elements of the vector are the \
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -612,85 +612,87 @@ namespace QtHandles
     graphics_object obj = gh_manager::get_object (m_handle);
 
     bool isdblclick = (event->type () == QEvent::MouseButtonDblClick);
 
     if (obj.valid_object ())
       {
         graphics_object figObj (obj.get_ancestor ("figure"));
 
+        // Any click in a figure canvas makes it current
         if (figObj)
           {
             graphics_object root = gh_manager::get_object (0);
             Utils::properties<root_figure> (root)
               .set_currentfigure (figObj.get_handle ().as_octave_value ());
           }
 
         graphics_object currentObj, axesObj;
 
+        // Retrieve selected object.   
         select_object (obj, event, currentObj, axesObj);
 
+        // currentObj may be invalid if, e.g., all objects under the mouse
+        // click had "hittest" -> "off" or "pickableparts" -> "none".  In that
+        // case, replace with underlying figObj which always accepts mouse
+        // clicks.
+        if (! currentObj.valid_object ())
+          currentObj = figObj;
+
         if (axesObj)
           {
             if (axesObj.get_properties ().handlevisibility_is ("on")
                 && axesObj.get_properties ().get_tag () != "legend"
                 && axesObj.get_properties ().get_tag () != "colorbar")
               Utils::properties<figure> (figObj)
               .set_currentaxes (axesObj.get_handle ().as_octave_value ());
-            if (! currentObj)
-              currentObj = axesObj;
           }
 
-        if (! currentObj)
-          currentObj = obj;
-
-        if (currentObj.get_properties ().handlevisibility_is ("on"))
-          Utils::properties<figure> (figObj)
-          .set_currentobject (currentObj.get_handle ().as_octave_value ());
-        else
-          Utils::properties<figure> (figObj).set_currentobject (
-            octave::numeric_limits<double>::NaN ());
-
         Figure *fig = dynamic_cast<Figure *> (Backend::toolkitObject (figObj));
 
         MouseMode newMouseMode = NoMode;
 
         if (fig)
           newMouseMode = fig->mouseMode ();
 
         switch (newMouseMode)
           {
           case NoMode:
-            gh_manager::post_set (figObj.get_handle (), "selectiontype",
-                                  Utils::figureSelectionType (event, isdblclick), false);
-
-            updateCurrentPoint (figObj, obj, event);
-
-            gh_manager::post_callback (figObj.get_handle (),
-                                       "windowbuttondownfcn",
-                                       button_number (event));
+            {
+              // Update the figure "currentobject"
+              auto& fprop = Utils::properties<figure> (figObj);
+            
+              if (currentObj.get_properties ().handlevisibility_is ("on"))
+                fprop.set_currentobject (currentObj.get_handle ()
+                                         .as_octave_value ());
+              else
+                fprop.set_currentobject (Matrix ());
+            
+              // Update figure "selectiontype" and "currentpoint" 
+              gh_manager::post_set (
+                                    figObj.get_handle (), "selectiontype",
+                                    Utils::figureSelectionType (event, isdblclick), false);
 
-            if (currentObj.get ("buttondownfcn").isempty ())
-              {
-                graphics_object parentObj =
-                  gh_manager::get_object (currentObj.get_parent ());
+              updateCurrentPoint (figObj, obj, event);
 
-                if (parentObj.valid_object () && parentObj.isa ("hggroup"))
-                  gh_manager::post_callback (parentObj.get_handle (),
-                                             "buttondownfcn",
-                                             button_number (event));
-              }
-            else
-              gh_manager::post_callback (currentObj.get_handle (),
-                                         "buttondownfcn",
+              gh_manager::post_callback (figObj.get_handle (),
+                                         "windowbuttondownfcn",
                                          button_number (event));
 
-            if (event->button () == Qt::RightButton)
-              ContextMenu::executeAt (currentObj.get_properties (),
-                                      event->globalPos ());
+              // Execute the "buttondownfcn" of the selected object
+              if (! currentObj.get ("buttondownfcn").isempty ())
+                gh_manager::post_callback (currentObj.get_handle (),
+                                           "buttondownfcn",
+                                           button_number (event));
+
+              // Show context menu of the selected object
+              if (event->button () == Qt::RightButton)
+                ContextMenu::executeAt (currentObj.get_properties (),
+                                        event->globalPos ());
+            }
             break;
 
           case TextMode:
             {
               if (event->modifiers () == Qt::NoModifier)
                 {
                   switch (event->buttons ())
                     {
diff --git a/libgui/graphics/gl-select.cc b/libgui/graphics/gl-select.cc
--- a/libgui/graphics/gl-select.cc
+++ b/libgui/graphics/gl-select.cc
@@ -135,17 +135,19 @@ namespace octave
 
   void
   opengl_selector::draw (const graphics_object& go, bool toplevel)
   {
     GLuint name = object_map.size ();
 
     object_map[name] = go;
     glPushName (name);
+    set_selecting (true);
     opengl_renderer::draw (go, toplevel);
+    set_selecting (false);
     glPopName ();
   }
 
   void
   opengl_selector::fake_text (double x, double y, double z, const Matrix& bbox,
                               bool use_scale)
   {
     ColumnVector xpos, xp1, xp2;
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -620,17 +620,18 @@ get_maxlights (void)
 
 #endif
 
 namespace octave
 {
   opengl_renderer::opengl_renderer (void)
     : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
       zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
-      camera_pos (), camera_dir (), interpreter ("none"), txt_renderer ()
+      camera_pos (), camera_dir (), interpreter ("none"), txt_renderer (), 
+      selecting (false)
   {
     // This constructor will fail if we don't have OpenGL or if the data
     // types we assumed in our public interface aren't compatible with the
     // OpenGL types.
 
 #if defined (HAVE_OPENGL)
 
     // Ensure that we can't request an image larger than OpenGL can handle.
@@ -1384,17 +1385,19 @@ namespace octave
 
   void
   opengl_renderer::draw_axes_x_grid (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     int xstate = props.get_xstate ();
 
-    if (props.is_visible () && xstate != AXE_DEPTH_DIR)
+    if (xstate != AXE_DEPTH_DIR
+        && (props.is_visible () 
+            || (selecting && props.pickableparts_is ("all"))))
       {
         int zstate = props.get_zstate ();
         bool x2Dtop = props.get_x2Dtop ();
         bool layer2Dtop = props.get_layer2Dtop ();
         bool xyzSym = props.get_xyzSym ();
         bool nearhoriz = props.get_nearhoriz ();
         double xticklen = props.get_xticklen ();
         double xtickoffset = props.get_xtickoffset ();
@@ -1565,17 +1568,19 @@ namespace octave
 
   void
   opengl_renderer::draw_axes_y_grid (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     int ystate = props.get_ystate ();
 
-    if (ystate != AXE_DEPTH_DIR && props.is_visible ())
+    if (ystate != AXE_DEPTH_DIR && props.is_visible ()
+        && (props.is_visible () 
+            || (selecting && props.pickableparts_is ("all"))))
       {
         int zstate = props.get_zstate ();
         bool y2Dright = props.get_y2Dright ();
         bool layer2Dtop = props.get_layer2Dtop ();
         bool xyzSym = props.get_xyzSym ();
         bool nearhoriz = props.get_nearhoriz ();
         double yticklen = props.get_yticklen ();
         double ytickoffset = props.get_ytickoffset ();
@@ -1745,17 +1750,19 @@ namespace octave
 #endif
   }
 
   void
   opengl_renderer::draw_axes_z_grid (const axes::properties& props)
   {
     int zstate = props.get_zstate ();
 
-    if (zstate != AXE_DEPTH_DIR && props.is_visible ())
+    if (zstate != AXE_DEPTH_DIR && props.is_visible ()
+        && (props.is_visible () 
+            || (selecting && props.pickableparts_is ("all"))))
       {
         bool xySym = props.get_xySym ();
         bool zSign = props.get_zSign ();
         double zticklen = props.get_zticklen ();
         double ztickoffset = props.get_ztickoffset ();
         double fx = props.get_fx ();
         double fy = props.get_fy ();
         double xPlane = props.get_xPlane ();
@@ -1955,35 +1962,39 @@ namespace octave
   {
 #if defined (HAVE_OPENGL)
     Matrix children = props.get_all_children ();
 
     for (octave_idx_type i = children.numel () - 1; i >= 0; i--)
       {
         graphics_object go = gh_manager::get_object (children(i));
 
-        if (go.get_properties ().is_visible ())
+        base_properties p = go.get_properties ();
+
+        if (p.is_visible ()
+            || (selecting && p.pickableparts_is ("all")))
           {
-            if (go.isa ("light"))
+            if (go.isa ("light") && ! selecting)
               {
                 if (num_lights < max_lights)
                   {
                     current_light = GL_LIGHT0 + num_lights;
-                    set_clipping (go.get_properties ().is_clipping ());
+                    set_clipping (p.is_clipping ());
                     draw (go);
                     num_lights++;
                   }
                 else
                   warning_with_id ("Octave:max-lights-exceeded",
                                    "light: Maximum number of lights (%d) in these axes is "
                                    "exceeded.", max_lights);
               }
-            else if (go.isa ("hggroup"))
+            else if (go.isa ("hggroup")
+                     && ! (selecting && p.pickableparts_is ("none")))
               draw_all_lights (go.get_properties (), obj_list);
-            else
+            else if (! (selecting && p.pickableparts_is ("none")))
               obj_list.push_back (go);
           }
       }
 #else
 
     octave_unused_parameter (props);
     octave_unused_parameter (obj_list);
 
@@ -2085,16 +2096,21 @@ namespace octave
   opengl_renderer::draw_axes (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     // Legends are not drawn when "visible" is "off".
     if (! props.is_visible () && props.get_tag () == "legend")
       return;
 
+    // Don't draw the axes and its children if we are in selection and
+    // pickable parts is "none".
+    if (selecting && props.pickableparts_is ("none"))
+      return;
+
     static double floatmax = std::numeric_limits<float>::max ();
 
     double x_min = props.get_x_min ();
     double x_max = props.get_x_max ();
     double y_min = props.get_y_min ();
     double y_max = props.get_y_max ();
     double z_min = props.get_z_min ();
     double z_max = props.get_z_max ();
@@ -2150,16 +2166,18 @@ namespace octave
 #endif
   }
 
   void
   opengl_renderer::draw_line (const line::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
+    bool draw_all = selecting && props.pickableparts_is ("all");
+
     Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
     Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
     Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     bool has_z = (z.numel () > 0);
     int n = static_cast<int> (std::min (std::min (x.numel (), y.numel ()),
                                         (has_z ? z.numel ()
                                          : std::numeric_limits<int>::max ())));
@@ -2246,21 +2264,25 @@ namespace octave
     set_clipping (false);
 
     if (! props.marker_is ("none")
         && ! (props.markeredgecolor_is ("none")
               && props.markerfacecolor_is ("none")))
       {
         Matrix lc, fc;
 
-        if (props.markeredgecolor_is ("auto"))
+        if (draw_all)
+          lc = Matrix (1, 3, 0.0);
+        else if (props.markeredgecolor_is ("auto"))
           lc = props.get_color_rgb ();
         else if (! props.markeredgecolor_is ("none"))
           lc = props.get_markeredgecolor_rgb ();
 
+        if (draw_all)
+          fc = Matrix (1, 3, 0.0);
         if (props.markerfacecolor_is ("auto"))
           fc = props.get_color_rgb ();
         else if (! props.markerfacecolor_is ("none"))
           fc = props.get_markerfacecolor_rgb ();
 
         init_marker (props.get_marker (), props.get_markersize (),
                      props.get_linewidth ());
 
@@ -2289,16 +2311,18 @@ namespace octave
 #endif
   }
 
   void
   opengl_renderer::draw_surface (const surface::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
+    bool draw_all = selecting && props.pickableparts_is ("all");
+
     const Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
     const Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
     const Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     int zr = z.rows ();
     int zc = z.columns ();
 
     NDArray c;
@@ -2373,17 +2397,17 @@ namespace octave
     if (fl_mode > 0 || el_mode > 0)
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
 
     // FIXME: good candidate for caching,
     //        transferring pixel data to OpenGL is time consuming.
     if (fc_mode == TEXTURE)
       tex = opengl_texture::create (props.get_color_data ());
 
-    if (! props.facecolor_is ("none"))
+    if (draw_all || ! props.facecolor_is ("none"))
       {
         if (fa_mode == 0)
           {
             fa = props.get_facealpha_double ();
             if (fc_mode == UNIFORM || fc_mode == TEXTURE)
               {
                 glColor4d (fcolor(0), fcolor(1), fcolor(2), fa);
                 if (fl_mode > 0)
@@ -2830,21 +2854,23 @@ namespace octave
     if (! props.marker_is ("none")
         && ! (props.markeredgecolor_is ("none")
               && props.markerfacecolor_is ("none")))
       {
         // FIXME: check how transparency should be handled in markers
         // FIXME: check what to do with marker facecolor set to auto
         //        and facecolor set to none.
 
-        bool do_edge = ! props.markeredgecolor_is ("none");
-        bool do_face = ! props.markerfacecolor_is ("none");
-
-        Matrix mecolor = props.get_markeredgecolor_rgb ();
-        Matrix mfcolor = props.get_markerfacecolor_rgb ();
+        bool do_edge = draw_all || ! props.markeredgecolor_is ("none");
+        bool do_face = draw_all || ! props.markerfacecolor_is ("none");
+
+        Matrix mecolor = (draw_all ? Matrix (1, 3, 0.0) :
+                          props.get_markeredgecolor_rgb ());
+        Matrix mfcolor = (draw_all ? Matrix (1, 3, 0.0) :
+                          props.get_markerfacecolor_rgb ());
         Matrix cc (1, 3, 0.0);
 
         if (mecolor.isempty () && props.markeredgecolor_is ("auto"))
           {
             mecolor = props.get_edgecolor_rgb ();
             do_edge = ! props.edgecolor_is ("none");
           }
 
@@ -2917,16 +2943,17 @@ namespace octave
     // Do not render if the patch has incoherent data
     std::string msg;
     if (props.has_bad_data (msg))
       {
         warning ("opengl_renderer: %s.  Not rendering.", msg.c_str ());
         return;
       }
 
+    bool draw_all = selecting && props.pickableparts_is ("all");
     const Matrix f = props.get_faces ().matrix_value ();
     const Matrix v = xform.scale (props.get_vertices ().matrix_value ());
     Matrix c;
     const Matrix n = props.get_vertexnormals ().matrix_value ();
     Matrix a;
     double fa = 1.0;
 
     int nv = v.rows ();
@@ -2935,17 +2962,17 @@ namespace octave
 
     bool has_z = (v.columns () > 2);
     bool has_facecolor = false;
     bool has_facealpha = false;
     // FIXME: remove when patch object has normal computation (patch #8951)
     bool has_normals = (n.rows () == nv);
 
     int fc_mode = ((props.facecolor_is ("none")
-                    || props.facecolor_is_rgb ()) ? 0 :
+                    || props.facecolor_is_rgb () || draw_all) ? 0 :
                    (props.facecolor_is ("flat") ? 1 : 2));
     int fl_mode = (props.facelighting_is ("none") ? 0 :
                    (props.facelighting_is ("flat") ? 1 : 2));
     int fa_mode = (props.facealpha_is_double () ? 0 :
                    (props.facealpha_is ("flat") ? 1 : 2));
     int ec_mode = ((props.edgecolor_is ("none")
                     || props.edgecolor_is_rgb ()) ? 0 :
                    (props.edgecolor_is ("flat") ? 1 : 2));
@@ -2984,31 +3011,34 @@ namespace octave
 
         for (int j = 0; j < fcmax && ! math::isnan (f(i,j)); j++, count++)
           fclip = (fclip || clip(int (f(i,j) - 1)));
 
         clip_f(i) = fclip;
         count_f(i) = count;
       }
 
-    if (fc_mode > 0 || ec_mode > 0)
+    if (draw_all || fc_mode > 0 || ec_mode > 0)
       {
-        c = props.get_color_data ().matrix_value ();
+        if (draw_all)
+          c = Matrix (1, 3, 0.0);
+        else
+          c = props.get_color_data ().matrix_value ();
 
         if (c.rows () == 1)
           {
             // Single color specifications, we can simplify a little bit
 
-            if (fc_mode > 0)
+            if (draw_all || fc_mode > 0)
               {
                 fcolor = c;
                 fc_mode = UNIFORM;
               }
 
-            if (ec_mode > 0)
+            if (draw_all || ec_mode > 0)
               {
                 ecolor = c;
                 ec_mode = UNIFORM;
               }
 
             c = Matrix ();
           }
         else
@@ -3072,17 +3102,17 @@ namespace octave
             }
 
           vdata[i+j*fr] = vertex_data (vv, cc, nn, aa, as, ds, ss, se, scr);
         }
 
     if (fl_mode > 0 || el_mode > 0)
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
 
-    if (! props.facecolor_is ("none"))
+    if (draw_all || ! props.facecolor_is ("none"))
       {
         // FIXME: adapt to double-radio property
         if (fa_mode == 0)
           {
             if (fc_mode == UNIFORM)
               {
                 glColor4d (fcolor(0), fcolor(1), fcolor(2), fa);
                 if (fl_mode > 0)
@@ -3171,17 +3201,18 @@ namespace octave
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement flat and interp transparency
           }
       }
 
-    if (! props.edgecolor_is ("none") && ! props.linestyle_is ("none"))
+    if (draw_all
+        || (! props.edgecolor_is ("none") && ! props.linestyle_is ("none")))
       {
         // FIXME: adapt to double-radio property
         if (props.get_edgealpha_double () == 1)
           {
             if (ec_mode == UNIFORM)
               {
                 glColor3dv (ecolor.data ());
                 if (el_mode > 0)
@@ -3305,23 +3336,25 @@ namespace octave
             // FIXME: implement transparency
           }
       }
 
     if (! props.marker_is ("none")
         && ! (props.markeredgecolor_is ("none")
               && props.markerfacecolor_is ("none")))
       {
-        bool do_edge = ! props.markeredgecolor_is ("none");
-        bool do_face = ! props.markerfacecolor_is ("none");
-
-        Matrix mecolor = props.get_markeredgecolor_rgb ();
-        Matrix mfcolor = props.get_markerfacecolor_rgb ();
-
-        bool has_markerfacecolor = false;
+        bool do_edge = draw_all || ! props.markeredgecolor_is ("none");
+        bool do_face = draw_all || ! props.markerfacecolor_is ("none");
+
+        Matrix mecolor = (draw_all ? Matrix (1, 3, 0.0) :
+                          props.get_markeredgecolor_rgb ());
+        Matrix mfcolor = (draw_all ? Matrix (1, 3, 0.0) :
+                          props.get_markerfacecolor_rgb ());
+
+        bool has_markerfacecolor = draw_all || false;
 
         if ((mecolor.isempty () && ! props.markeredgecolor_is ("none"))
             || (mfcolor.isempty () && ! props.markerfacecolor_is ("none")))
           {
             Matrix mc = props.get_color_data ().matrix_value ();
 
             if (mc.rows () == 1)
               {
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -81,30 +81,34 @@ namespace octave
     virtual void draw_image (const image::properties& props);
     virtual void draw_uipanel (const uipanel::properties& props,
                                const graphics_object& go);
     virtual void draw_uibuttongroup (const uibuttongroup::properties& props,
                                      const graphics_object& go);
     virtual void init_gl_context (bool enhanced, const Matrix& backgroundColor);
     virtual void setup_opengl_transformation (const axes::properties& props);
 
+    virtual void set_clipbox (double x1, double x2, double y1, double y2,
+                              double z1, double z2);
+    virtual void set_clipping (bool on);
+    virtual void set_font (const base_properties& props);
     virtual void set_color (const Matrix& c);
-    virtual void set_polygon_offset (bool on, float offset = 0.0f);
+    virtual void set_interpreter (const caseless_str& interp)
+    {
+      interpreter = interp;
+    }
     virtual void set_linewidth (float w);
     virtual void set_linestyle (const std::string& s, bool stipple = false,
                                 double linewidth = 0.5);
     virtual void set_linecap (const std::string&) { };
     virtual void set_linejoin (const std::string&) { };
-    virtual void set_clipbox (double x1, double x2, double y1, double y2,
-                              double z1, double z2);
-    virtual void set_clipping (bool on);
-    virtual void set_font (const base_properties& props);
-    virtual void set_interpreter (const caseless_str& interp)
+    virtual void set_polygon_offset (bool on, float offset = 0.0f);
+    virtual void set_selecting (bool on)
     {
-      interpreter = interp;
+      selecting = on;
     }
 
     virtual void init_marker (const std::string& m, double size, float width);
     virtual void end_marker (void);
     virtual void draw_marker (double x, double y, double z,
                               const Matrix& lc, const Matrix& fc);
 
     virtual void text_to_pixels (const std::string& txt,
@@ -211,14 +215,16 @@ namespace octave
 
     text_renderer txt_renderer;
 
     // light object present and visible
     int num_lights;
     unsigned int current_light;
     int max_lights;
 
+    // Indicate we are drawing for selection purpose
+    bool selecting;
   private:
     class patch_tesselator;
   };
 }
 
 #endif
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2361,17 +2361,17 @@ protected:
     children_property children gf , Matrix ()
     bool_property clipping , "on"
     callback_property createfcn , Matrix ()
     callback_property deletefcn , Matrix ()
     radio_property handlevisibility u , "{on}|callback|off"
     bool_property hittest , "on"
     bool_property interruptible , "on"
     handle_property parent fs , p
-    radio_property pickableparts , "{visible}|none"
+    radio_property pickableparts , "{visible}|all|none"
     bool_property selected , "off"
     bool_property selectionhighlight , "on"
     string_property tag s , ""
     string_property type frs , ty
     handle_property uicontextmenu u , graphics_handle ()
     any_property userdata , Matrix ()
     bool_property visible , "on"
 
@@ -3153,19 +3153,16 @@ public:
       callback_property windowbuttondownfcn , Matrix ()
       callback_property windowbuttonmotionfcn , Matrix ()
       callback_property windowbuttonupfcn , Matrix ()
       callback_property windowkeypressfcn , Matrix ()
       callback_property windowkeyreleasefcn , Matrix ()
       callback_property windowscrollwheelfcn , Matrix ()
       radio_property windowstyle , "{normal}|modal|docked"
 
-      // Base properties which don't exist on object
-      // radio_property pickableparts h , "{visible}|none"
-
       // Octave-specific properties
       mutable string_property __gl_extensions__ hr , ""
       mutable string_property __gl_renderer__ hr , ""
       mutable string_property __gl_vendor__ hr , ""
       mutable string_property __gl_version__ hr , ""
       string_property __graphics_toolkit__ hs , default_graphics_toolkit ()
       any_property __guidata__ h , Matrix ()
       radio_property __mouse_mode__ hS , "{none}|pan|rotate|select|text|zoom"
@@ -3634,17 +3631,16 @@ public:
       double_property linewidth , 0.5
       double_property minorgridalpha m , 0.25
       radio_property minorgridalphamode , "{auto}|manual"
       color_property minorgridcolor m , color_property (color_values (0.1, 0.1, 0.1), radio_values ("none"))
       radio_property minorgridcolormode , "{auto}|manual"
       radio_property minorgridlinestyle , "{:}|-|--|-.|none"
       radio_property nextplot , "{replace}|add|replacechildren"
       array_property outerposition u , default_axes_outerposition ()
-      radio_property pickableparts , "{visible}|all|none"
       row_vector_property plotboxaspectratio mu , Matrix (1, 3, 1.0)
       radio_property plotboxaspectratiomode u , "{auto}|manual"
       array_property position u , default_axes_position ()
       radio_property projection , "{orthographic}|perspective"
       radio_property sortmethod , "{depth}|childorder"
       radio_property tickdir mu , "{in}|out"
       radio_property tickdirmode u , "{auto}|manual"
       // FIXME: Added recently to Matlab, should replace interpreter property.
@@ -4308,17 +4304,16 @@ public:
       radio_property interpreter hd , "{tex}|none|latex"
       radio_property linejoin , "{round}|miter|chamfer"
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|+|o|*|.|x|s|square|d|diamond|^|v|>|<|p|pentagram|h|hexagram"
       color_property markeredgecolor , color_property (radio_values ("{auto}|none"), color_values (0, 0, 0))
       color_property markerfacecolor , color_property (radio_values ("auto|{none}"), color_values (0, 0, 0))
       double_property markersize , 6
-      radio_property pickableparts , "{visible}|all|none"
       row_vector_property xdata u , default_data ()
       string_property xdatasource , ""
       row_vector_property ydata u , default_data ()
       string_property ydatasource , ""
       row_vector_property zdata u , Matrix ()
       string_property zdatasource , ""
 
       // hidden properties for limit computation
@@ -4424,17 +4419,16 @@ public:
       double_property fontsize u , 10
       radio_property fontunits SU , "inches|centimeters|normalized|{points}|pixels"
       radio_property fontweight u , "light|{normal}|demi|bold"
       radio_property horizontalalignment mu , "{left}|center|right"
       radio_property interpreter u , "{tex}|none|latex"
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       double_property margin , 2
-      radio_property pickableparts , "{visible}|all|none"
       array_property position smu , Matrix (1, 3, 0.0)
       double_property rotation mu , 0
       text_label_property string u , ""
       radio_property units u , "{data}|pixels|normalized|inches|centimeters|points"
       radio_property verticalalignment mu , "top|cap|{middle}|baseline|bottom"
 
       // hidden properties for limit computation
       row_vector_property xlim hlr , Matrix ()
@@ -4590,17 +4584,16 @@ public:
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (image)
       array_property alphadata u , Matrix (1, 1, 1.0)
       radio_property alphadatamapping al , "{none}|direct|scaled"
       array_property cdata u , default_image_cdata ()
       radio_property cdatamapping al , "scaled|{direct}"
       radio_property erasemode h , "{normal}|none|xor|background"
-      radio_property pickableparts , "{visible}|all|none"
       row_vector_property xdata mu , Matrix ()
       row_vector_property ydata mu , Matrix ()
       // hidden properties for limit computation
       row_vector_property alim hlr , Matrix ()
       row_vector_property clim hlr , Matrix ()
       row_vector_property xlim hlr , Matrix ()
       row_vector_property ylim hlr , Matrix ()
       bool_property aliminclude hlg , "on"
@@ -4878,17 +4871,16 @@ public:
       radio_property interpreter hd , "{tex}|none|latex"
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|+|o|*|.|x|s|square|d|diamond|^|v|>|<|p|pentagram|h|hexagram"
       color_property markeredgecolor , color_property (radio_values ("none|{auto}|flat"), color_values (0, 0, 0))
       color_property markerfacecolor , color_property (radio_values ("{none}|auto|flat"), color_values (0, 0, 0))
       double_property markersize , 6
       radio_property normalmode hsg , "{auto}|manual"
-      radio_property pickableparts , "{visible}|all|none"
       double_property specularcolorreflectance , 1.0
       double_property specularexponent , 10.0
       double_property specularstrength , 0.9
       array_property vertexnormals m , Matrix ()
       radio_property vertexnormalsmode , "{auto}|manual"
       array_property vertices u , default_patch_vertices ()
       array_property xdata u , default_patch_xdata ()
       array_property ydata u , default_patch_ydata ()
@@ -5091,17 +5083,16 @@ public:
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|+|o|*|.|x|s|square|d|diamond|^|v|>|<|p|pentagram|h|hexagram"
       color_property markeredgecolor , color_property (radio_values ("none|{auto}|flat"), color_values (0, 0, 0))
       color_property markerfacecolor , color_property (radio_values ("{none}|auto|flat"), color_values (0, 0, 0))
       double_property markersize , 6
       radio_property meshstyle , "{both}|row|column"
       radio_property normalmode hsg , "{auto}|manual"
-      radio_property pickableparts , "{visible}|all|none"
       double_property specularcolorreflectance , 1
       double_property specularexponent , 10
       double_property specularstrength , 0.9
       array_property vertexnormals m , Matrix ()
       radio_property vertexnormalsmode u , "{auto}|manual"
       array_property xdata u , default_surface_xdata ()
       string_property xdatasource , ""
       array_property ydata u , default_surface_ydata ()
