# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237389435 -3600
#      Wed Mar 18 16:17:15 2009 +0100
# Node ID 1b097d86a61a6ccd28337bc4699e260d8f34911d
# Parent  a8d30dc1beecd363afa8c8654a76f00f10b2b7fa
remove a TODO in oct-norm.cc

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-03-18  Jaroslav Hajek <highegg@gmail.com>
+
+	* oct-norm.cc (get_eps): Remove that hack.
+	(higham): Use std::numeric_limits instead.
+	Include OCTAVE_QUIT.
+
 2009-03-16  Jason Riedy  <jason@acm.org>
 
 	* Sparse.cc (transpose): Eliminate the workspace by computing in
 	retval.xcidx.
 	* CSparse.cc (hermitian): Eliminate the workspace by computing in
 	retval.xcidx.
 
 2009-03-14  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/oct-norm.cc b/liboctave/oct-norm.cc
--- a/liboctave/oct-norm.cc
+++ b/liboctave/oct-norm.cc
@@ -408,16 +408,17 @@ R higham (const MatrixT& m, R p, R tol, 
 {
   x.resize (m.columns (), 1);
   // the OSE part
   VectorT y(m.rows (), 1, 0), z(m.rows (), 1);
   typedef typename VectorT::element_type RR;
   RR lambda = 0, mu = 0;
   for (octave_idx_type k = 0; k < m.columns (); k++)
     {
+      OCTAVE_QUIT;
       VectorT col (m.column (k));
       if (k > 0)
         higham_subp (y, col, 4*k, p, lambda, mu);
       for (octave_idx_type i = 0; i < k; i++)
         x(i) *= lambda;
       x(k) = mu;
       y = lambda * y + mu * col;
     }
@@ -425,16 +426,17 @@ R higham (const MatrixT& m, R p, R tol, 
   // the PM part
   x = x / vector_norm (x, p);
   R q = p/(p-1);
 
   R gamma = 0, gamma1;
   int iter = 0;
   while (iter < maxiter)
     {
+      OCTAVE_QUIT;
       y = m*x;
       gamma1 = gamma;
       gamma = vector_norm (y, p);
       z = dual_p (y, p, q);
       z = z.hermitian ();
       z = z * m;
 
       if (iter > 0 && (vector_norm (z, q) <= gamma
@@ -444,19 +446,16 @@ R higham (const MatrixT& m, R p, R tol, 
       z = z.hermitian ();
       x = dual_p (z, q, p);
       iter ++;
     }
 
   return gamma;
 }
 
-// TODO: is there a better way?
-inline float get_eps (float) { return FLT_EPSILON; }
-inline double get_eps (double) { return DBL_EPSILON; }
 // derive column vector and SVD types 
 
 static const char *p_less1_gripe = "xnorm: p must be at least 1";
 
 // Static constant to control the maximum number of iterations. 100 seems to be a good value.
 // Eventually, we can provide a means to change this constant from Octave.
 static int max_norm_iter = 100;
 
@@ -472,17 +471,18 @@ R matrix_norm (const MatrixT& m, R p, Ve
     }
   else if (p == 1)
     res = xcolnorms (m, 1).max ();
   else if (lo_ieee_isinf (p))
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
-      res = higham (m, p, std::sqrt (get_eps (p)), max_norm_iter, x);
+      const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
+      res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
     (*current_liboctave_error_handler) (p_less1_gripe); 
 
   return res;
 }
 
 // SVD-free version for sparse matrices
@@ -492,17 +492,18 @@ R matrix_norm (const MatrixT& m, R p, Ve
   R res = 0;
   if (p == 1)
     res = xcolnorms (m, 1).max ();
   else if (lo_ieee_isinf (p))
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
-      res = higham (m, p, std::sqrt (get_eps (p)), max_norm_iter, x);
+      const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
+      res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
     (*current_liboctave_error_handler) (p_less1_gripe); 
 
   return res;
 }
 
 // and finally, here's what we've promised in the header file
