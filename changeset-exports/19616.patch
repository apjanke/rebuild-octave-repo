# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422042790 18000
#      Fri Jan 23 14:53:10 2015 -0500
# Branch gui-release
# Node ID 709f3a77685d96d1264ca0e9a01d53d8398fa6f9
# Parent  4c1f638a381edc50aee0ced2ee5815a9e5c78218
avoid shadowed variable warnings in libgui sources

* BaseControl.cc, BaseControl.h, Container.cc, ContextMenu.cc,
Figure.cc, FigureWindow.cc, GLCanvas.cc, GenericEventNotify.h,
Menu.cc, MouseModeActionGroup.cc, Panel.cc, TextEdit.cc, TextEdit.h,
ToolBar.cc: Rename local variables to avoid shadowing class members or
functions.

diff --git a/libgui/graphics/BaseControl.cc b/libgui/graphics/BaseControl.cc
--- a/libgui/graphics/BaseControl.cc
+++ b/libgui/graphics/BaseControl.cc
@@ -142,34 +142,34 @@ void BaseControl::update (int pId)
     case uicontrol::properties::ID_KEYPRESSFCN:
       m_keyPressHandlerDefined = ! up.get_keypressfcn ().is_empty ();
       break;
     default:
       break;
     }
 }
 
-bool BaseControl::eventFilter (QObject* watched, QEvent* event)
+bool BaseControl::eventFilter (QObject* watched, QEvent* ev)
 {
-  switch (event->type ())
+  switch (ev->type ())
     {
     case QEvent::Resize:
       if (m_normalizedFont)
 	{
 	  gh_manager::auto_lock lock;
 
 	  qWidget<QWidget> ()->setFont (Utils::computeFont<uicontrol>
 					(properties<uicontrol> ()));
 	}
       break;
     case QEvent::MouseButtonPress:
 	{
 	  gh_manager::auto_lock lock;
 
-	  QMouseEvent* m = dynamic_cast<QMouseEvent*> (event);
+	  QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
 	  graphics_object go = object ();
 	  uicontrol::properties& up = Utils::properties<uicontrol> (go);
 	  graphics_object fig = go.get_ancestor ("figure");
 
 	  if (m->button () != Qt::LeftButton
 	      || ! up.enable_is ("on"))
 	    {
 	      gh_manager::post_set (fig.get_handle (), "selectiontype",
@@ -195,38 +195,38 @@ bool BaseControl::eventFilter (QObject* 
 	    }
 	}
       break;
     case QEvent::MouseMove:
       if (qWidget<QWidget> ()->hasMouseTracking ())
         {
 	  gh_manager::auto_lock lock;
 
-	  QMouseEvent* m = dynamic_cast<QMouseEvent*> (event);
+	  QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
 	  graphics_object go = object ();
 	  graphics_object fig = go.get_ancestor ("figure");
 
           gh_manager::post_set (fig.get_handle (), "currentpoint",
                                 Utils::figureCurrentPoint (fig, m), false);
           gh_manager::post_callback (fig.get_handle (), "windowbuttonmotionfcn");
         }
       break;
     case QEvent::KeyPress:
       if (m_keyPressHandlerDefined)
         {
           gh_manager::auto_lock lock;
 
           octave_scalar_map keyData =
-            Utils::makeKeyEventStruct (dynamic_cast<QKeyEvent*> (event));
+            Utils::makeKeyEventStruct (dynamic_cast<QKeyEvent*> (ev));
           graphics_object fig = object ().get_ancestor ("figure");
 
           gh_manager::post_set (fig.get_handle (), "currentcharacter",
                                 keyData.getfield ("Character"), false);
           gh_manager::post_callback (m_handle, "keypressfcn", keyData);
         }
       break;
     default: break;
     }
 
-  return Object::eventFilter (watched, event);
+  return Object::eventFilter (watched, ev);
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/BaseControl.h b/libgui/graphics/BaseControl.h
--- a/libgui/graphics/BaseControl.h
+++ b/libgui/graphics/BaseControl.h
@@ -34,17 +34,17 @@ namespace QtHandles
 class BaseControl : public Object
 {
 public:
   BaseControl (const graphics_object& go, QWidget* w);
   ~BaseControl (void);
 
   Container* innerContainer (void) { return 0; }
 
-  bool eventFilter (QObject* watched, QEvent* event);
+  bool eventFilter (QObject* watched, QEvent* e);
 
 protected:
   void init (QWidget* w, bool callBase = false);
   void update (int pId);
 
 private:
   bool m_normalizedFont;
   bool m_keyPressHandlerDefined;
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -32,38 +32,38 @@ along with Octave; see the file COPYING.
 #include "Canvas.h"
 #include "Container.h"
 #include "Object.h"
 #include "QtHandlesUtils.h"
 
 namespace QtHandles
 {
 
-Container::Container (QWidget* parent)
-  : ContainerBase (parent), m_canvas (0)
+Container::Container (QWidget* xparent)
+  : ContainerBase (xparent), m_canvas (0)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 Container::~Container (void)
 {
 }
 
-Canvas* Container::canvas (const graphics_handle& handle, bool create)
+Canvas* Container::canvas (const graphics_handle& gh, bool xcreate)
 {
-  if (! m_canvas && create)
+  if (! m_canvas && xcreate)
     {
-      graphics_object go = gh_manager::get_object (handle);
+      graphics_object go = gh_manager::get_object (gh);
 
       if (go)
 	{
 	  graphics_object fig = go.get_ancestor ("figure");
 
 	  m_canvas = Canvas::create (fig.get("renderer").string_value (),
-				     this, handle);
+				     this, gh);
 
 	  QWidget* canvasWidget = m_canvas->qWidget ();
 
 	  canvasWidget->lower ();
 	  canvasWidget->show ();
 	  canvasWidget->setGeometry (0, 0, width (), height ());
 	}
     }
@@ -91,17 +91,17 @@ void Container::resizeEvent (QResizeEven
 	      obj->qWidget<QWidget> ()
 		->setGeometry (xround (bb(0)), xround (bb(1)),
 			       xround (bb(2)), xround (bb(3)));
 	    }
 	}
     }
 }
 
-void Container::childEvent (QChildEvent* event)
+void Container::childEvent (QChildEvent* ev)
 {
-  if (event->child ()->isWidgetType ())
+  if (ev->child ()->isWidgetType ())
     {
-      qobject_cast<QWidget*> (event->child ())->setMouseTracking (hasMouseTracking ());
+      qobject_cast<QWidget*> (ev->child ())->setMouseTracking (hasMouseTracking ());
     }
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/ContextMenu.cc b/libgui/graphics/ContextMenu.cc
--- a/libgui/graphics/ContextMenu.cc
+++ b/libgui/graphics/ContextMenu.cc
@@ -42,51 +42,51 @@ ContextMenu* ContextMenu::create (const 
       QWidget* w = parent->qWidget<QWidget> ();
 
       return new ContextMenu (go, new QMenu (w));
     }
 
   return 0;
 }
 
-ContextMenu::ContextMenu (const graphics_object& go, QMenu* menu)
-    : Object (go, menu)
+ContextMenu::ContextMenu (const graphics_object& go, QMenu* xmenu)
+    : Object (go, xmenu)
 {
-  menu->setAutoFillBackground (true);
+  xmenu->setAutoFillBackground (true);
 
-  connect (menu, SIGNAL (aboutToShow (void)), SLOT (aboutToShow (void)));
-  connect (menu, SIGNAL (aboutToHide (void)), SLOT (aboutToHide (void)));
+  connect (xmenu, SIGNAL (aboutToShow (void)), SLOT (aboutToShow (void)));
+  connect (xmenu, SIGNAL (aboutToHide (void)), SLOT (aboutToHide (void)));
 }
 
 ContextMenu::~ContextMenu (void)
 {
 }
 
 void ContextMenu::update (int pId)
 {
   uicontextmenu::properties& up = properties<uicontextmenu> ();
-  QMenu* menu = qWidget<QMenu> ();
+  QMenu* xmenu = qWidget<QMenu> ();
 
   switch (pId)
     {
     case base_properties::ID_VISIBLE:
       if (up.is_visible ())
 	{
 	  Matrix pos = up.get_position ().matrix_value ();
-	  QWidget* parentW = menu->parentWidget ();
+	  QWidget* parentW = xmenu->parentWidget ();
 	  QPoint pt;
 
 	  pt.rx () = xround (pos(0));
 	  pt.ry () = parentW->height () - xround (pos(1));
 	  pt = parentW->mapToGlobal (pt);
 
-	  menu->popup (pt);
+	  xmenu->popup (pt);
 	}
       else
-	menu->hide ();
+	xmenu->hide ();
       break;
     default:
       Object::update (pId);
       break;
     }
 }
 
 void ContextMenu::aboutToShow (void)
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -488,102 +488,102 @@ void Figure::updateBoundingBox (bool int
   d->m_handle = m_handle;
   d->m_figure = this;
 
   //qDebug ("Figure::updateBoundingBox: internal=%d, bbox=[%g %g %g %g]",
   //        d->m_internal, d->m_bbox(0), d->m_bbox(1), d->m_bbox(2), d->m_bbox(3));
   gh_manager::post_function (Figure::updateBoundingBoxHelper, d);
 }
 
-bool Figure::eventNotifyBefore (QObject* obj, QEvent* event)
+bool Figure::eventNotifyBefore (QObject* obj, QEvent* ev)
 {
   if (! m_blockUpdates)
     {
       if (obj == m_container)
 	{
           // Do nothing...
 	}
       else if (obj == m_menuBar)
 	{
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::ActionRemoved:
 		{
-		  QAction* a = dynamic_cast<QActionEvent*> (event)->action ();
+		  QAction* a = dynamic_cast<QActionEvent*> (ev)->action ();
 
 		  if (! a->isSeparator ()
 		      && a->objectName () != "builtinMenu")
                     updateMenuBar ();
 		}
 	      break;
 	    default:
 	      break;
 	    }
 	}
       else
 	{
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::Close:
-	      event->ignore ();
+	      ev->ignore ();
 	      gh_manager::post_callback (m_handle, "closerequestfcn");
 	      return true;
 	    default:
 	      break;
 	    }
 	}
     }
 
   return false;
 }
 
-void Figure::eventNotifyAfter (QObject* watched, QEvent* event)
+void Figure::eventNotifyAfter (QObject* watched, QEvent* ev)
 {
   if (! m_blockUpdates)
     {
       if (watched == m_container)
         {
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::Resize:
 	      updateBoundingBox (true, UpdateBoundingBoxSize);
 	      break;
 	    case QEvent::ChildAdded:
-	      if (dynamic_cast<QChildEvent*> (event)->child
+	      if (dynamic_cast<QChildEvent*> (ev)->child
 		  ()->isWidgetType())
 		{
 		  gh_manager::auto_lock lock;
 		  const figure::properties& fp = properties<figure> ();
 
 		  showFigureToolBar (! hasUiControlChildren (fp));
 		}
 	    default:
 	      break;
 	    }
         }
       else if (watched == m_menuBar)
         {
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::ActionAdded:
 		{
-		  QAction* a = dynamic_cast<QActionEvent*> (event)->action ();
+		  QAction* a = dynamic_cast<QActionEvent*> (ev)->action ();
 
 		  if (! a->isSeparator ()
                       && a->objectName () != "builtinMenu")
                     updateMenuBar ();
 		}
 	      break;
 	    default:
 	      break;
 	    }
         }
       else
         {
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::Move:
 	      updateBoundingBox (false, UpdateBoundingBoxPosition);
 	      updateBoundingBox (true, UpdateBoundingBoxPosition);
 	      break;
 	    case QEvent::Resize:
 	      updateBoundingBox (false, UpdateBoundingBoxSize);
 	      break;
diff --git a/libgui/graphics/FigureWindow.cc b/libgui/graphics/FigureWindow.cc
--- a/libgui/graphics/FigureWindow.cc
+++ b/libgui/graphics/FigureWindow.cc
@@ -26,18 +26,18 @@ along with Octave; see the file COPYING.
 
 #include <QMenu>
 
 #include "FigureWindow.h"
 
 namespace QtHandles
 {
 
-FigureWindow::FigureWindow (QWidget* parent)
-  : FigureWindowBase (parent)
+FigureWindow::FigureWindow (QWidget* xparent)
+  : FigureWindowBase (xparent)
 {
 }
 
 FigureWindow::~FigureWindow (void)
 {
 }
 
 QMenu* FigureWindow::createPopupMenu (void)
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -32,29 +32,29 @@ along with Octave; see the file COPYING.
 #include "graphics.h"
 
 #include "GLCanvas.h"
 #include "gl-select.h"
 
 namespace QtHandles
 {
 
-GLCanvas::GLCanvas (QWidget* parent, const graphics_handle& handle)
-  : QGLWidget (parent), Canvas (handle)
+GLCanvas::GLCanvas (QWidget* xparent, const graphics_handle& gh)
+  : QGLWidget (xparent), Canvas (gh)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
-void GLCanvas::draw (const graphics_handle& handle)
+void GLCanvas::draw (const graphics_handle& gh)
 {
-  graphics_object go = gh_manager::get_object (handle);
+  graphics_object go = gh_manager::get_object (gh);
 
   if (go)
     {
       opengl_renderer r;
 
       r.set_viewport (width (), height ());
       r.draw(go);
     }
@@ -114,36 +114,36 @@ void GLCanvas::drawZoomBox (const QPoint
   glPopMatrix ();
 }
 
 void GLCanvas::paintGL (void)
 {
   canvasPaintEvent ();
 }
 
-void GLCanvas::mouseMoveEvent (QMouseEvent* event)
+void GLCanvas::mouseMoveEvent (QMouseEvent* ev)
 {
-  canvasMouseMoveEvent (event);
+  canvasMouseMoveEvent (ev);
 }
 
-void GLCanvas::mousePressEvent (QMouseEvent* event)
+void GLCanvas::mousePressEvent (QMouseEvent* ev)
 {
-  canvasMousePressEvent (event);
+  canvasMousePressEvent (ev);
 }
 
-void GLCanvas::mouseReleaseEvent (QMouseEvent* event)
+void GLCanvas::mouseReleaseEvent (QMouseEvent* ev)
 {
-  canvasMouseReleaseEvent (event);
+  canvasMouseReleaseEvent (ev);
 }
 
-void GLCanvas::keyPressEvent (QKeyEvent* event)
+void GLCanvas::keyPressEvent (QKeyEvent* ev)
 {
-  if (! canvasKeyPressEvent (event))
-    QGLWidget::keyPressEvent (event);
+  if (! canvasKeyPressEvent (ev))
+    QGLWidget::keyPressEvent (ev);
 }
 
-void GLCanvas::keyReleaseEvent (QKeyEvent* event)
+void GLCanvas::keyReleaseEvent (QKeyEvent* ev)
 {
-  if (! canvasKeyReleaseEvent (event))
-    QGLWidget::keyReleaseEvent (event);
+  if (! canvasKeyReleaseEvent (ev))
+    QGLWidget::keyReleaseEvent (ev);
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/GenericEventNotify.h b/libgui/graphics/GenericEventNotify.h
--- a/libgui/graphics/GenericEventNotify.h
+++ b/libgui/graphics/GenericEventNotify.h
@@ -81,17 +81,17 @@ void GenericEventNotifySender::notifyRec
   foreach (GenericEventNotifyReceiver* r, m_receivers)
     r->eventNotifyAfter (obj, evt);
 }
 
 #define DECLARE_GENERICEVENTNOTIFY_SENDER(T,B) \
 class T : public B, public GenericEventNotifySender \
 { \
 public: \
-  T (QWidget* parent) : B (parent), GenericEventNotifySender () { } \
+  T (QWidget* xparent) : B (xparent), GenericEventNotifySender () { } \
   ~ T (void) { } \
 \
   bool event (QEvent* evt) \
     { \
       bool result = true; \
       if (! notifyReceiversBefore (this, evt)) \
         result = B::event (evt); \
       notifyReceiversAfter (this, evt); \
diff --git a/libgui/graphics/Menu.cc b/libgui/graphics/Menu.cc
--- a/libgui/graphics/Menu.cc
+++ b/libgui/graphics/Menu.cc
@@ -53,30 +53,30 @@ static QKeySequence accelSequence (const
 	return QKeySequence (keyMod | static_cast<int> (c));
     }
 
   return QKeySequence ();
 }
 
 Menu* Menu::create (const graphics_object& go)
 {
-  Object* parent = Object::parentObject (go);
+  Object* parent_obj = Object::parentObject (go);
 
-  if (parent)
+  if (parent_obj)
     {
-      QObject* qObj = parent->qObject ();
+      QObject* qObj = parent_obj->qObject ();
 
       if (qObj)
-	return new Menu (go, new QAction (qObj), parent);
+	return new Menu (go, new QAction (qObj), parent_obj);
     }
 
   return 0;
 }
 
-Menu::Menu (const graphics_object& go, QAction* action, Object* parent)
+Menu::Menu (const graphics_object& go, QAction* action, Object* xparent)
     : Object (go, action), m_parent (0), m_separator (0)
 {
   uimenu::properties& up = properties<uimenu> ();
 
   action->setText (Utils::fromStdString (up.get_label ()));
   if (up.is_checked ())
     {
       action->setCheckable (true);
@@ -87,17 +87,17 @@ Menu::Menu (const graphics_object& go, Q
   action->setVisible (up.is_visible ());
   if (up.is_separator ())
     {
       m_separator = new QAction (action);
       m_separator->setSeparator (true);
       m_separator->setVisible (up.is_visible ());
     }
 
-  MenuContainer* menuContainer = dynamic_cast<MenuContainer*> (parent);
+  MenuContainer* menuContainer = dynamic_cast<MenuContainer*> (xparent);
 
   if (menuContainer)
     m_parent = menuContainer->menu ();
 
   if (m_parent)
     {
       int pos = static_cast<int> (up.get_position ());
 
diff --git a/libgui/graphics/MouseModeActionGroup.cc b/libgui/graphics/MouseModeActionGroup.cc
--- a/libgui/graphics/MouseModeActionGroup.cc
+++ b/libgui/graphics/MouseModeActionGroup.cc
@@ -28,18 +28,18 @@ along with Octave; see the file COPYING.
 #include <QIcon>
 
 #include "Figure.h"
 #include "MouseModeActionGroup.h"
 
 namespace QtHandles
 {
 
-MouseModeActionGroup::MouseModeActionGroup (QObject* parent)
-  : QObject (parent), m_current (0)
+MouseModeActionGroup::MouseModeActionGroup (QObject* xparent)
+  : QObject (xparent), m_current (0)
 {
   m_actions.append (new QAction (QIcon (":/images/rotate.png"),
 				 tr ("Rotate"), this));
   m_actions.append (new QAction (QIcon (":/images/zoom.png"),
 				 tr ("Zoom"), this));
   m_actions.append (new QAction (QIcon (":/images/pan.png"),
 				 tr ("Pan"), this));
   m_actions.append (new QAction (QIcon (":/images/select.png"),
diff --git a/libgui/graphics/Panel.cc b/libgui/graphics/Panel.cc
--- a/libgui/graphics/Panel.cc
+++ b/libgui/graphics/Panel.cc
@@ -139,23 +139,23 @@ Panel::Panel (const graphics_object& go,
   else
     frame->hide ();
 }
 
 Panel::~Panel (void)
 {
 }
 
-bool Panel::eventFilter (QObject* watched, QEvent* event)
+bool Panel::eventFilter (QObject* watched, QEvent* ev)
 {
   if (! m_blockUpdates)
     {
       if (watched == qObject ())
 	{
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::Resize:
 		{
 		  gh_manager::auto_lock lock;
 		  graphics_object go = object ();
 
 		  if (go.valid_object ())
 		    {
@@ -174,33 +174,33 @@ bool Panel::eventFilter (QObject* watche
 			    }
 			}
 		      updateLayout ();
 		    }
 		}
 	      break;
 	    case QEvent::MouseButtonPress:
 		{
-		  QMouseEvent* m = dynamic_cast<QMouseEvent*> (event);
+		  QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
 
 		  if (m->button () == Qt::RightButton)
 		    {
 		      gh_manager::auto_lock lock;
 
 		      ContextMenu::executeAt (properties (), m->globalPos ());
 		    }
 		}
 	      break;
 	    default:
 	      break;
 	    }
 	}
       else if (watched == m_container)
 	{
-	  switch (event->type ())
+	  switch (ev->type ())
 	    {
 	    case QEvent::Resize:
 	      if (qWidget<QWidget> ()->isVisible ())
 		{
 		  gh_manager::auto_lock lock;
 
 		  properties ().update_boundingbox ();
 		}
diff --git a/libgui/graphics/TextEdit.cc b/libgui/graphics/TextEdit.cc
--- a/libgui/graphics/TextEdit.cc
+++ b/libgui/graphics/TextEdit.cc
@@ -26,26 +26,26 @@ along with Octave; see the file COPYING.
 
 #include <QKeyEvent>
 
 #include "TextEdit.h"
 
 namespace QtHandles
 {
 
-void TextEdit::focusOutEvent (QFocusEvent* event)
+void TextEdit::focusOutEvent (QFocusEvent* ev)
 {
-  QTextEdit::focusOutEvent (event);
+  QTextEdit::focusOutEvent (ev);
 
   emit editingFinished ();
 }
 
-void TextEdit::keyPressEvent (QKeyEvent* event)
+void TextEdit::keyPressEvent (QKeyEvent* ev)
 {
-  QTextEdit::keyPressEvent (event);
+  QTextEdit::keyPressEvent (ev);
 
-  if ((event->key () == Qt::Key_Return
-       || event->key () == Qt::Key_Enter)
-      && event->modifiers () == Qt::ControlModifier)
+  if ((ev->key () == Qt::Key_Return
+       || ev->key () == Qt::Key_Enter)
+      && ev->modifiers () == Qt::ControlModifier)
     emit editingFinished ();
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/TextEdit.h b/libgui/graphics/TextEdit.h
--- a/libgui/graphics/TextEdit.h
+++ b/libgui/graphics/TextEdit.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 namespace QtHandles
 {
 
 class TextEdit : public QTextEdit
 {
   Q_OBJECT
 
 public:
-  TextEdit (QWidget* parent) : QTextEdit(parent) { }
+  TextEdit (QWidget* xparent) : QTextEdit(xparent) { }
   ~TextEdit (void) { }
 
 signals:
   void editingFinished (void);
 
 protected:
   void focusOutEvent (QFocusEvent* event);
   void keyPressEvent (QKeyEvent* event);
diff --git a/libgui/graphics/ToolBar.cc b/libgui/graphics/ToolBar.cc
--- a/libgui/graphics/ToolBar.cc
+++ b/libgui/graphics/ToolBar.cc
@@ -113,31 +113,31 @@ void ToolBar::update (int pId)
 	m_figure->showCustomToolBar (bar, tp.is_visible ());
       break;
     default:
       Object::update (pId);
       break;
     }
 }
 
-bool ToolBar::eventFilter (QObject* watched, QEvent* event)
+bool ToolBar::eventFilter (QObject* watched, QEvent* ev)
 {
   if (watched == qObject ())
     {
-      switch (event->type ())
+      switch (ev->type ())
 	{
 	case QEvent::ActionAdded:
 	case QEvent::ActionRemoved:
 	    {
-	      QActionEvent* ae = dynamic_cast<QActionEvent*> (event);
+	      QActionEvent* ae = dynamic_cast<QActionEvent*> (ev);
 	      QToolBar* bar = qWidget<QToolBar> ();
 
 	      if (ae->action () != m_empty)
 		{
-		  if (event->type () == QEvent::ActionAdded)
+		  if (ev->type () == QEvent::ActionAdded)
 		    {
 		      if (bar->actions ().size () == 2)
 			QTimer::singleShot (0, this, SLOT (hideEmpty (void)));
 		    }
 		  else
 		    {
 		      if (bar->actions ().size () == 1)
 			m_empty->setVisible (true);
