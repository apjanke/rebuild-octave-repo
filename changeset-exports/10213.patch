# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264662373 -3600
#      Thu Jan 28 08:06:13 2010 +0100
# Node ID f7ba6cfe7fb74c2266530945ca8316aae7bb0032
# Parent  56f7734f5448864a07493f48cbc34dbaa4e4922d
fix det() after singular matrix is flagged

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1572,18 +1572,24 @@ ComplexMatrix::determinant (MatrixType& 
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
 
+      // Even though the matrix is marked as singular (Rectangular), we may
+      // still get a useful number from the LU factorization, because it always
+      // completes.
+
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
+      else if (typ == MatrixType::Rectangular)
+        typ = MatrixType::Full;
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (Matrix::determinant): Treat matrices marked as singular
+	normally.
+	* fMatrix.cc (FloatMatrix::determinant): Ditto.
+	* CMatrix.cc (ComplexMatrix::determinant): Ditto.
+	* fCMatrix.cc (FloatComplexMatrix::determinant): Ditto.
+
 2010-01-26  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.cc: Don't tag functions with OCTAVE_API in source file.
 
 2010-01-26  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c, lo-utils.h (octave_link, octave_symlink,
 	octave_readlink, octave_mkdir, octave_mkfifo, octave_rmdir,
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1237,18 +1237,24 @@ Matrix::determinant (MatrixType& mattype
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
 
+      // Even though the matrix is marked as singular (Rectangular), we may
+      // still get a useful number from the LU factorization, because it always
+      // completes.
+
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
+      else if (typ == MatrixType::Rectangular)
+        typ = MatrixType::Full;
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1565,18 +1565,24 @@ FloatComplexMatrix::determinant (MatrixT
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
 
+      // Even though the matrix is marked as singular (Rectangular), we may
+      // still get a useful number from the LU factorization, because it always
+      // completes.
+
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
+      else if (typ == MatrixType::Rectangular)
+        typ = MatrixType::Full;
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1236,18 +1236,24 @@ FloatMatrix::determinant (MatrixType& ma
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
 
+      // Even though the matrix is marked as singular (Rectangular), we may
+      // still get a useful number from the LU factorization, because it always
+      // completes.
+
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
+      else if (typ == MatrixType::Rectangular)
+        typ = MatrixType::Full;
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
