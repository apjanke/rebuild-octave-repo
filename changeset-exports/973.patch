# HG changeset patch
# User jwe
# Date 787254607 0
#      Mon Dec 12 17:50:07 1994 +0000
# Node ID 46673c9180348ebfce8d1e16a5003d22f2b5930d
# Parent  3e25eb05b6c69ec0d2994828d4736745d90acac8
[project @ 1994-12-12 17:50:07 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -18,27 +18,26 @@ You should have received a copy of the G
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 %x NEW_MATRIX
 %x HELP_FCN
 %s TEXT_FCN
-%s DQSTRING
-%s STRING
 %s MATRIX
 
 %{
 #define SHORT_CIRCUIT_LOGICALS 1
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
+#include <strstream.h>
 #include <string.h>
 
 #include "input.h"
 #include "token.h"
 
 #include "SLStack.h"
 
 // Stack to hold tokens so that we can delete them when the parser is
@@ -105,16 +104,17 @@ static int is_keyword (char *s);
 static char *plot_style_token (char *s);
 static symbol_record *lookup_identifier (char *s);
 static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static char *strip_trailing_whitespace (char *s);
 static void handle_number (char *yytext);
+static int handle_string (char delim);
 static int handle_close_brace (char *yytext);
 static int handle_identifier (char *s, int next_tok_is_eq);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	[\n]
@@ -243,78 +243,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	yylval.tok_val = new token (tok);
 	token_stack.push (yylval.tok_val);
 	current_input_column += yyleng;
       }
     return TEXT;
   }
 
 %{
-// XXX FIXME XXX -- these need to be merged into a single function.
-%}
-
-<STRING>{QSTR}*[\n\'] {
-    if (braceflag)
-      BEGIN MATRIX;
-    else
-      BEGIN 0;
-
-    if (yytext[yyleng-1] == '\n')
-      {
-	error ("unterminated string constant");
-	current_input_column = 1;
-	return LEXICAL_ERROR;
-      }
-    else
-      {
-	static char *tok = 0;
-	delete [] tok;
-	tok = strsave (yytext);
-	tok[yyleng-1] = '\0';
-	do_string_escapes (tok);
-	yylval.tok_val = new token (tok);
-	token_stack.push (yylval.tok_val);
-	quote_is_transpose = 1;
-	cant_be_identifier = 1;
-	convert_spaces_to_comma = 1;
-	current_input_column += yyleng;
-      }
-    return TEXT;
-  }
-
-<DQSTRING>{DQSTR}*[\n\"] {
-    if (braceflag)
-      BEGIN MATRIX;
-    else
-      BEGIN 0;
-
-    if (yytext[yyleng-1] == '\n')
-      {
-	error ("unterminated string constant");
-	current_input_column = 1;
-	return LEXICAL_ERROR;
-      }
-    else
-      {
-	static char *tok = 0;
-	delete [] tok;
-	tok = strsave (yytext);
-	tok[yyleng-1] = '\0';
-	do_string_escapes (tok);
-	yylval.tok_val = new token (tok);
-	token_stack.push (yylval.tok_val);
-	quote_is_transpose = 1;
-	cant_be_identifier = 1;
-	convert_spaces_to_comma = 1;
-	current_input_column += yyleng;
-      }
-    return TEXT;
-  }
-
-%{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 //
 // It's also a pain in the ass to decide whether to insert a comma
@@ -493,24 +431,27 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     convert_spaces_to_comma = 1;
 
     if (quote_is_transpose)
       {
 	do_comma_insert_check ();
 	return QUOTE;
       }
     else
-      BEGIN STRING;
+      return handle_string ('\'');
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
-\"		{ BEGIN DQSTRING; }
+\" {
+    current_input_column++;
+    return handle_string ('"');
+}
 
 %{
 // The colon operator is handled differently if we are in the range
 // part of a plot command.
 %}
 
 ":" {
     if (plotting && (in_plot_range || in_plot_using))
@@ -772,21 +713,16 @@ do_string_escapes (char *s)
 
 	    default:
 	      warning ("unrecognized escape sequence `\\%c' --\
  converting to `%c'", *p2, *p2);
 	      *p1 = *p2;
 	      break;
 	    }
 	}
-      else if (*p2 == '\'' && *(p2+1) == '\'')
-	{
-	  *p1 = '\'';
-	  p2++;
-	}
       else
 	{
 	  *p1 = *p2;
 	}
 
       p1++;
       p2++;
     }
@@ -1410,16 +1346,160 @@ handle_number (char *yytext)
 
   token_stack.push (yylval.tok_val);
 
   current_input_column += yyleng;
 
   do_comma_insert_check ();
 }
 
+// Match whitespace only, followed by a comment character or newline.
+// Once a comment character is found, discard all input until newline.
+// If non-whitespace characters are found before comment
+// characters, return 0.  Otherwise, return 1.
+
+static int
+have_continuation (void)
+{
+  ostrstream buf;
+
+  int in_comment = 0;
+  char c;
+  while ((c = yyinput ()) != EOF)
+    {
+      buf << (char) c;
+
+      switch (c)
+	{
+	case ' ':
+	case '\t':
+	  break;
+
+	case '%':
+	case '#':
+	  in_comment = 1;
+	  break;
+
+	case '\n':
+	  return 1;
+
+	default:
+	  if (in_comment)
+	    break;
+	  else
+	    {
+	      buf << ends;
+	      char *s = buf.str ();
+	      if (s)
+		{
+		  int len = strlen (s);
+		  while (len--)
+		    yyunput (s[len], yytext);
+		}
+	      delete [] s;
+	      return 0;
+	    }
+	}
+    }
+
+  yyunput (c, yytext);
+
+  return 0;
+}
+
+static int
+have_ellipsis_continuation (void)
+{
+  char c1 = yyinput ();
+  if (c1 == '.')
+    {
+      char c2 = yyinput ();
+      if (c2 == '.' && have_continuation ())
+	return 1;
+      else
+	{
+	  yyunput (c2, yytext);
+	  yyunput (c1, yytext);
+	}
+    }
+  else
+    yyunput (c1, yytext);
+
+  return 0;
+}
+
+static int
+handle_string (char delim)
+{
+  ostrstream buf;
+
+  int c;
+  int prev = 0;
+
+  while ((c = yyinput ()) != EOF)
+    {
+      current_input_column++;
+
+      if (c == '\\')
+	{
+	  if (have_continuation ())
+	    promptflag--;
+	  else
+	    buf << (char) c;
+	  goto next;
+	}
+      else if (c == '.')
+	{
+	  if (have_ellipsis_continuation ())
+	    promptflag--;
+	  else
+	    buf << (char) c;
+	  goto next;
+	}
+      else if (c == '\n')
+	{
+	  break;
+	}
+      else if (c == delim)
+	{
+	  if (prev == '\\')
+	    buf << (char) c;
+	  else
+	    {
+	      c = yyinput ();
+	      if (c == delim)
+		buf << (char) c;
+	      else
+		{
+		  yyunput (c, yytext);
+		  buf << ends;
+		  char *tok = buf.str ();
+		  do_string_escapes (tok);
+		  yylval.tok_val = new token (tok);
+		  delete [] tok;
+		  token_stack.push (yylval.tok_val);
+		  quote_is_transpose = 1;
+		  cant_be_identifier = 1;
+		  convert_spaces_to_comma = 1;
+		  return TEXT;
+		}
+	    }
+	}
+      else
+	{
+	  buf << (char) c;
+	}
+
+    next:
+      prev = c;
+    }
+
+  return LEXICAL_ERROR;
+}
+
 static int
 handle_close_brace (char *yytext)
 {
   fixup_column_count (yytext);
 
   if (! in_brace_or_paren.empty ())
     {
       in_brace_or_paren.pop ();
