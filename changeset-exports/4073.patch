# HG changeset patch
# User jwe
# Date 1033149734 0
#      Fri Sep 27 18:02:14 2002 +0000
# Node ID 38a22328f192f226bb2636ce982f8cb320ceddb0
# Parent  3cc39e3b8fa5becb203b62038505c8d138c239ed
[project @ 2002-09-27 18:02:14 by jwe]

diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -26,32 +26,31 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && ! defined (NO_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
 #include <fstream>
 #include <cstdio>
 
-//
 // The c_file_ptr_buf requires a std::filebuf that accepts an open
 // file descriptor. This feature, while not part of the ISO C++
 // standard, is supported by a variety of C++ compiler runtimes,
 // albeit in slightly different ways.
 //
 // The C++ runtime libraries shipped with GCC versions < 3.0, Sun Pro,
 // Sun Workshop/Forte 5/6, Compaq C++ all support a non-standard filebuf
 // constructor that takes an open file descriptor. The almost ISO compliant
 // GNU C++ runtime shipped with GCC 3.0.x supports a different non-standard
 // filebuf constructor that takes a FILE* instead; starting from GCC 3.1,
 // the GNU C++ runtime removes all non-standard std::filebuf constructors
 // and provides an extension template class __gnu_cxx::stdio_filebuf
 // that supports the the 3.0.x behavior.
-//
-#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)
+
+#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1) && ! (defined (__APPLE__) && defined (__MACH__))
 # include <ext/stdio_filebuf.h>
 # define OCTAVE_STD_FILEBUF __gnu_cxx::stdio_filebuf<char>
 #else
 # define OCTAVE_STD_FILEBUF std::filebuf
 #endif
 
 class
 c_file_ptr_buf : public OCTAVE_STD_FILEBUF
