# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363345628 14400
#      Fri Mar 15 07:07:08 2013 -0400
# Node ID 6aafe87a314421f9f8866d6061ef64ad010ae20d
# Parent  9c4ac8f25a8c542cc45b5866483ee9d3a222ffe6
use int64_t for idx type if --enable-64

* configure.ac: Check for and use int64_t instead of long if
--enable-64.
(IDX_TYPE_LONG): Delete definion.  Change all uses to check
USE_64_BIT_IDX_T instead.
* MArray-i.cc: Instantiate arrays of int64_t instead of long, but only
if USE_64_BIT_IDX_T is defined.
* acinclinde.m4 (OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER): Use int64_t
instead of long.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -238,27 +238,19 @@ OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
   [if test "$enableval" = yes; then USE_64_BIT_IDX_T=yes; fi], [])
 if test $USE_64_BIT_IDX_T = yes; then
   AC_CHECK_SIZEOF([void *])
   AC_CHECK_SIZEOF([int])
   AC_CHECK_SIZEOF([long])
+  AC_CHECK_SIZEOF([int64_t])
   if test $ac_cv_sizeof_void_p -eq 8; then
-    if test $ac_cv_sizeof_int -eq 8; then
-      OCTAVE_IDX_TYPE=int
-    elif test $ac_cv_sizeof_long -eq 8; then
-      OCTAVE_IDX_TYPE=long
-      AC_DEFINE(IDX_TYPE_LONG, 1, [Define to 1 if octave index type is long.])
-    else
-      warn_64_bit="no suitable type found for octave_idx_type so disabling 64-bit features"
-      OCTAVE_CONFIGURE_WARNING([warn_64_bit])
-      USE_64_BIT_IDX_T=no
-    fi
+    OCTAVE_IDX_TYPE=int64_t
   else
     warn_64_bit="pointers are not 64-bits wide; disabling 64-bit features"
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     USE_64_BIT_IDX_T=no
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
@@ -2744,17 +2736,17 @@ typedef unsigned long ino_t;
 #define F77_USES_CRAY_CALLING_CONVENTION
 #endif
 
 #if 0
 #define F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION
 #endif
 
 #ifdef USE_64_BIT_IDX_T
-#define SIZEOF_OCTAVE_IDX_TYPE 8
+#define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT64_T
 #else
 #define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
 #endif
 
 /* To be able to use long doubles for 64-bit mixed arithmetics, we need
    them at least 80 bits wide and we need roundl declared in math.h.
    FIXME: Maybe substitute this by a more precise check in the future?  */
 #if (SIZEOF_LONG_DOUBLE >= 10) && defined (HAVE_ROUNDL)
@@ -2817,20 +2809,20 @@ typedef unsigned long ino_t;
 #ifdef OCTGUI_DLL
 #define OCTGUI_API OCTAVE_EXPORT
 #else
 #define OCTGUI_API OCTAVE_IMPORT
 #endif
 
 /* oct-types.h */
 
+#include <stdint.h>
+
 typedef OCTAVE_IDX_TYPE octave_idx_type;
 
-#include <stdint.h>
-
 /* Tag indicating Octave config.h has been included */
 #define OCTAVE_CONFIG_INCLUDED 1
 ])
 
 dnl end of AH_BOTTOM
 dnl ------------------------------------------------------------
 
 ### Make all AC_DEFINES available to testif feature of test.m function.
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -39,17 +39,17 @@ along with Octave; see the file COPYING.
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-map.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define AMD_NAME(name) amd_l ## name
 #else
 #define AMD_NAME(name) amd ## name
 #endif
 
 DEFUN_DLD (amd, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} amd (@var{S})\n\
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -38,17 +38,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define CCOLAMD_NAME(name) ccolamd_l ## name
 #define CSYMAMD_NAME(name) csymamd_l ## name
 #else
 #define CCOLAMD_NAME(name) ccolamd ## name
 #define CSYMAMD_NAME(name) csymamd ## name
 #endif
 
 DEFUN_DLD (ccolamd, args, nargout,
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -39,17 +39,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define COLAMD_NAME(name) colamd_l ## name
 #define SYMAMD_NAME(name) symamd_l ## name
 #else
 #define COLAMD_NAME(name) colamd ## name
 #define SYMAMD_NAME(name) symamd ## name
 #endif
 
 // The symmetric column elimination tree code take from the Davis LDL code.
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 
 #include "oct-sparse.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "SparseQR.h"
 #include "SparseCmplxQR.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define CXSPARSE_NAME(name) cs_dl ## name
 #else
 #define CXSPARSE_NAME(name) cs_di ## name
 #endif
 
 static RowVector
 put_int (octave_idx_type *p, octave_idx_type n)
 {
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -127,17 +127,17 @@ factorization as determined by @var{typ}
   cm->hypotenuse = CHOLMOD_NAME(hypot);
 
   double dummy;
   cholmod_sparse Astore;
   cholmod_sparse *A = &Astore;
   A->packed = true;
   A->sorted = true;
   A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
   A->itype = CHOLMOD_LONG;
 #else
   A->itype = CHOLMOD_INT;
 #endif
   A->dtype = CHOLMOD_DOUBLE;
   A->stype = 1;
   A->x = &dummy;
 
diff --git a/libinterp/interp-core/ls-hdf5.h b/libinterp/interp-core/ls-hdf5.h
--- a/libinterp/interp-core/ls-hdf5.h
+++ b/libinterp/interp-core/ls-hdf5.h
@@ -197,17 +197,17 @@ hdf5_get_scalar_attr (hid_t loc_id, hid_
 extern OCTINTERP_API herr_t
 hdf5_add_attr (hid_t loc_id, const char *attr_name);
 
 
 extern OCTINTERP_API herr_t
 hdf5_add_scalar_attr (hid_t loc_id, hid_t type_id,
                       const char *attr_name, void *buf);
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define H5T_NATIVE_IDX H5T_NATIVE_LONG
 #else
 #define H5T_NATIVE_IDX H5T_NATIVE_INT
 #endif
 
 #endif
 
 #endif
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5656,17 +5656,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5899,17 +5899,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -5923,17 +5923,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6190,17 +6190,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6412,17 +6412,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
@@ -6436,17 +6436,17 @@ SparseComplexMatrix::fsolve (MatrixType 
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -508,15 +508,15 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseComplexM
 SPARSE_SSM_CMP_OP_DECLS (Complex, SparseComplexMatrix, OCTAVE_API)
 SPARSE_SSM_BOOL_OP_DECLS (Complex, SparseComplexMatrix, OCTAVE_API)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix, OCTAVE_API)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix, OCTAVE_API)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseComplexMatrix, ComplexMatrix, Complex)
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define UMFPACK_ZNAME(name) umfpack_zl_ ## name
 #else
 #define UMFPACK_ZNAME(name) umfpack_zi_ ## name
 #endif
 
 #endif
diff --git a/liboctave/array/MArray-i.cc b/liboctave/array/MArray-i.cc
--- a/liboctave/array/MArray-i.cc
+++ b/liboctave/array/MArray-i.cc
@@ -27,27 +27,31 @@ along with Octave; see the file COPYING.
 #include "oct-inttypes.h"
 
 // Instantiate MArrays of int values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class OCTAVE_API MArray<int>;
-template class OCTAVE_API MArray<long>;
+#ifdef USE_64_BIT_IDX_T
+template class OCTAVE_API MArray<int64_t>;
+#endif
 
 // Explicit instantiation, as this seems to be required by weird compilers
 // like MSVC. This should be harmless on other compilers.
 template int xmin<int> (int, int);
 template int xmax<int> (int, int);
 template long xmin<long> (long, long);
 template long xmax<long> (long, long);
 
 INSTANTIATE_MARRAY_FRIENDS (int, OCTAVE_API)
-INSTANTIATE_MARRAY_FRIENDS (long, OCTAVE_API)
+#ifdef USE_64_BIT_IDX_T
+INSTANTIATE_MARRAY_FRIENDS (int64_t, OCTAVE_API)
+#endif
 
 template class OCTAVE_API MArray<octave_int8>;
 template class OCTAVE_API MArray<octave_int16>;
 template class OCTAVE_API MArray<octave_int32>;
 template class OCTAVE_API MArray<octave_int64>;
 
 INSTANTIATE_MARRAY_FRIENDS (octave_int8, OCTAVE_API)
 INSTANTIATE_MARRAY_FRIENDS (octave_int16, OCTAVE_API)
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5854,17 +5854,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6070,17 +6070,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6094,17 +6094,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
@@ -6332,17 +6332,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6566,17 +6566,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           A->ncol = nc;
 
           A->p = cidx ();
           A->i = ridx ();
           A->nzmax = nnz ();
           A->packed = true;
           A->sorted = true;
           A->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           A->itype = CHOLMOD_LONG;
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
@@ -6590,17 +6590,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
           B->nzmax = b.nnz ();
           B->packed = true;
           B->sorted = true;
           B->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
           B->itype = CHOLMOD_LONG;
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -464,15 +464,15 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseMatrix, 
 SPARSE_SSM_CMP_OP_DECLS (double, SparseMatrix, OCTAVE_API)
 SPARSE_SSM_BOOL_OP_DECLS (double, SparseMatrix, OCTAVE_API)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseMatrix, SparseMatrix, OCTAVE_API)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseMatrix, SparseMatrix, OCTAVE_API)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseMatrix, Matrix, double)
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define UMFPACK_DNAME(name) umfpack_dl_ ## name
 #else
 #define UMFPACK_DNAME(name) umfpack_di_ ## name
 #endif
 
 #endif
diff --git a/liboctave/numeric/SparseCmplxQR.h b/liboctave/numeric/SparseCmplxQR.h
--- a/liboctave/numeric/SparseCmplxQR.h
+++ b/liboctave/numeric/SparseCmplxQR.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-sparse.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define CXSPARSE_ZNAME(name) cs_cl ## name
 #else
 #define CXSPARSE_ZNAME(name) cs_ci ## name
 #endif
 
 class
 OCTAVE_API
 SparseComplexQR
diff --git a/liboctave/numeric/SparseQR.h b/liboctave/numeric/SparseQR.h
--- a/liboctave/numeric/SparseQR.h
+++ b/liboctave/numeric/SparseQR.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-sparse.h"
 
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define CXSPARSE_DNAME(name) cs_dl ## name
 #else
 #define CXSPARSE_DNAME(name) cs_di ## name
 #endif
 
 class
 OCTAVE_API
 SparseQR
diff --git a/liboctave/numeric/sparse-base-chol.cc b/liboctave/numeric/sparse-base-chol.cc
--- a/liboctave/numeric/sparse-base-chol.cc
+++ b/liboctave/numeric/sparse-base-chol.cc
@@ -131,17 +131,17 @@ sparse_base_chol<chol_type, chol_elt, p_
   ac->ncol = a_nc;
 
   ac->p = a.cidx ();
   ac->i = a.ridx ();
   ac->nzmax = a.nnz ();
   ac->packed = true;
   ac->sorted = true;
   ac->nz = 0;
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
   ac->itype = CHOLMOD_LONG;
 #else
   ac->itype = CHOLMOD_INT;
 #endif
   ac->dtype = CHOLMOD_DOUBLE;
   ac->stype = 1;
 #ifdef OCTAVE_CHOLMOD_TYPE
   ac->xtype = OCTAVE_CHOLMOD_TYPE;
diff --git a/liboctave/util/oct-sparse.h b/liboctave/util/oct-sparse.h
--- a/liboctave/util/oct-sparse.h
+++ b/liboctave/util/oct-sparse.h
@@ -82,16 +82,16 @@ along with Octave; see the file COPYING.
 #elif defined (HAVE_CS_H)
 #include <cs.h>
 #endif
 
 #if (defined (HAVE_SUITESPARSE_CHOLMOD_H) \
      || defined (HAVE_UFSPARSE_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_H))
-#ifdef IDX_TYPE_LONG
+#ifdef USE_64_BIT_IDX_T
 #define CHOLMOD_NAME(name) cholmod_l_ ## name
 #else
 #define CHOLMOD_NAME(name) cholmod_ ## name
 #endif
 #endif
 
 #endif
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -856,23 +856,20 @@ AC_DEFUN([OCTAVE_CHECK_SIZEOF_FORTRAN_IN
       return
       end
 ]],
       [mv conftest.$ac_objext fintsize.$ac_objext
       ac_octave_save_LIBS="$LIBS"
       LIBS="fintsize.$ac_objext $[]_AC_LANG_PREFIX[]LIBS"
       AC_LANG_PUSH(C)
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
-          #include <assert.h> ]], [[
+          #include <assert.h>
+          #include <stdint.h> ]], [[
           #ifdef USE_64_BIT_IDX_T
-          #if IDX_TYPE_LONG
-            typedef long octave_idx_type;
-          #else
-            typedef int octave_idx_type;
-          #endif
+            typedef int64_t octave_idx_type;
           #else
             typedef int octave_idx_type;
           #endif
           octave_idx_type n = 2;
           octave_idx_type in[2];
           octave_idx_type out[2];
           in[0] = 13;
           in[0] = 42;
