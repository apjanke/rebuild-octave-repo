# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498159246 14400
#      Thu Jun 22 15:20:46 2017 -0400
# Node ID ece6f43304e51eda1aaefdce7e53b2a1d21b1ece
# Parent  dcba4178849594a6aaddf229f3e42fa07cefde30
new function to convert dim_vector to Array<octave_idx_type>

* dim-vector.h, dim-vector.cc (dim_vector::as_array):
New function.

* oct-refcount.h (refcount::value): New function.

diff --git a/liboctave/array/dim-vector.cc b/liboctave/array/dim-vector.cc
--- a/liboctave/array/dim-vector.cc
+++ b/liboctave/array/dim-vector.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <limits>
 #include <new>
 #include <sstream>
 
+#include "Array.h"
 #include "dim-vector.h"
 
 octave_idx_type *
 dim_vector::nil_rep (void)
 {
   static dim_vector zv (0, 0);
   return zv.rep;
 }
@@ -304,8 +305,21 @@ dim_vector::redim (int n) const
 
       // All dim_vectors are at least 2-D.  Make Nx1 if necessary.
       if (n == 1)
         retval.rep[1] = 1;
 
       return retval;
     }
 }
+
+Array<octave_idx_type>
+dim_vector::as_array (void) const
+{
+  octave_idx_type nd = ndims ();
+
+  Array<octave_idx_type> retval (dim_vector (1, nd));
+
+  for (octave_idx_type i = 0; i < nd; i++)
+    retval(i) = elem (i);
+
+  return retval;
+}
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 #include <cassert>
 
 #include <algorithm>
 #include <initializer_list>
 #include <string>
 
 #include "oct-refcount.h"
 
+template <typename T> class Array;
+
 //! Vector representing the dimensions (size) of an Array.
 /*!
   A dim_vector is used to represent dimensions of an Array.  It is used
   on its constructor to specify its size, or when reshaping it.
 
   @code{.cc}
   // Matrix with 10 rows and 20 columns.
   Matrix m Matrix (dim_vector (10, 20));
@@ -543,16 +545,18 @@ public:
 
     for (int i = 1; i < ndims (); i++)
       k += rep[i-1] * idx[i];
 
     return k;
   }
 
   friend bool operator == (const dim_vector& a, const dim_vector& b);
+
+  Array<octave_idx_type> as_array (void) const;
 };
 
 inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   // Fast case.
   if (a.rep == b.rep)
     return true;
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -96,19 +96,24 @@ namespace octave
       return OCTAVE_ATOMIC_DECREMENT (&count);
     }
 
     count_type operator-- (int)
     {
       return OCTAVE_ATOMIC_POST_DECREMENT (&count);
     }
 
+    count_type value (void) const
+    {
+      return static_cast<count_type const volatile&> (count);
+    }
+
     operator count_type (void) const
     {
-      return static_cast<count_type const volatile&> (count);
+      return value ();
     }
 
     count_type * get (void)
     {
       return &count;
     }
 
   private:
