# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448651435 18000
#      Fri Nov 27 14:10:35 2015 -0500
# Node ID 826a4771718b260e13e19dc392f4bad0d408f648
# Parent  58e79b0078e4bd32e612a6bb9e4d31f606793173
warn about shadowed built ins with addpath -end (bug #46553)

* load-path.h, load-path.cc (load_path::add): New argument, UPDATING.
(load_path::loader::add): New argument UPDATING.
(load_path::loader::add_to_fcn_map): New argument UPDATING.  Don't
emit shadowed function warnings if updating.  Do warn about shadowed
built-in function names even when at_end is true.
(load_path::do_update): Pass updating=true to load_path::add.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -980,17 +980,17 @@ load_path::do_update (void) const
   for (dir_info_list_iterator p = dir_info_list.begin ();
        p != dir_info_list.end ();
        p++)
     {
       dir_info& di = *p;
 
       di.update ();
 
-      add (di, true);
+      add (di, true, "", true);
     }
 }
 
 bool
 load_path::check_file_type (std::string& fname, int type, int possible_types,
                             const std::string& fcn, const char *who)
 {
   bool retval = false;
@@ -1861,38 +1861,39 @@ in_path_list (const std::string& path_li
         pos = path_list.find (path, pos + 1);
     }
 
   return false;
 }
 
 void
 load_path::add (const dir_info& di, bool at_end,
-                const std::string& pname) const
+                const std::string& pname, bool updating) const
 {
   loader& l = get_loader (pname);
 
-  l.add (di, at_end);
+  l.add (di, at_end, updating);
 
   dir_info::package_dir_map_type package_dir_map = di.package_dir_map;
 
   for (dir_info::const_package_dir_map_iterator p = package_dir_map.begin ();
        p != package_dir_map.end (); ++p)
     {
       std::string full_name = p->first;
 
       if (! pname.empty ())
         full_name = pname + "." + full_name;
 
       add (p->second, at_end, full_name);
     }
 }
 
 void
-load_path::loader::add_to_fcn_map (const dir_info& di, bool at_end)
+load_path::loader::add_to_fcn_map (const dir_info& di, bool at_end,
+                                   bool updating)
 {
   std::string dir_name = di.dir_name;
 
   string_vector fcn_files = di.fcn_files;
 
   octave_idx_type len = fcn_files.numel ();
 
   for (octave_idx_type i = 0; i < len; i++)
@@ -1927,25 +1928,33 @@ load_path::loader::add_to_fcn_map (const
         t = load_path::M_FILE;
       else if (ext == ".oct")
         t = load_path::OCT_FILE;
       else if (ext == ".mex")
         t = load_path::MEX_FILE;
 
       if (p == file_info_list.end ())
         {
-          file_info fi (dir_name, t);
-
-          if (at_end)
-            file_info_list.push_back (fi);
-          else
+          // Warn if a built-in or library function is being shadowed,
+          // but not if we are just updating (rehashing) the list.
+
+          if (! updating)
             {
-              // Warn if a built-in or library function is being shadowed.
-
-              if (! file_info_list.empty ())
+              if (file_info_list.empty ())
+                {
+                  if (symbol_table::is_built_in_function_name (base))
+                    {
+                      std::string fcn_path = file_ops::concat (dir_name, fname);
+
+                      warning_with_id ("Octave:shadowed-function",
+                                       "function %s shadows a built-in function",
+                                       fcn_path.c_str ());
+                    }
+                }
+              else if (! at_end)
                 {
                   file_info& old = file_info_list.front ();
 
                   // FIXME: do we need to be more careful about the
                   // way we look for old.dir_name in sys_path to avoid
                   // partial matches?
 
                   // Don't warn about Contents.m files since we expect
@@ -1957,26 +1966,24 @@ load_path::loader::add_to_fcn_map (const
                     {
                       std::string fcn_path = file_ops::concat (dir_name, fname);
 
                       warning_with_id ("Octave:shadowed-function",
                                        "function %s shadows a core library function",
                                        fcn_path.c_str ());
                     }
                 }
-              else if (symbol_table::is_built_in_function_name (base))
-                {
-                  std::string fcn_path = file_ops::concat (dir_name, fname);
-                  warning_with_id ("Octave:shadowed-function",
-                                   "function %s shadows a built-in function",
-                                   fcn_path.c_str ());
-                }
-
-              file_info_list.push_front (fi);
             }
+
+          file_info fi (dir_name, t);
+
+          if (at_end)
+            file_info_list.push_back (fi);
+          else
+            file_info_list.push_front (fi);
         }
       else
         {
           file_info& fi = *p;
 
           fi.types |= t;
         }
     }
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -509,24 +509,24 @@ private:
           fcn_map = l.fcn_map;
           private_fcn_map = l.private_fcn_map;
           method_map = l.method_map;
         }
 
       return *this;
     }
 
-    void add (const dir_info& di, bool at_end)
+    void add (const dir_info& di, bool at_end, bool updating)
     {
       if (at_end)
         dir_list.push_back (di.dir_name);
       else
         dir_list.push_front (di.dir_name);
 
-      add_to_fcn_map (di, at_end);
+      add_to_fcn_map (di, at_end, updating);
 
       add_to_private_fcn_map (di);
 
       add_to_method_map (di, at_end);
     }
 
     void move (const dir_info& di, bool at_end);
 
@@ -560,17 +560,17 @@ private:
 
     std::list<std::string> methods (const std::string& class_name) const;
 
     void overloads (const std::string& meth, std::list<std::string>& l) const;
 
     string_vector fcn_names (void) const;
 
   private:
-    void add_to_fcn_map (const dir_info& di, bool at_end);
+    void add_to_fcn_map (const dir_info& di, bool at_end, bool updating);
 
     void add_to_private_fcn_map (const dir_info& di);
 
     void add_to_method_map (const dir_info& di, bool at_end);
 
     void move_fcn_map (const std::string& dir,
                        const string_vector& fcn_files, bool at_end);
 
@@ -717,17 +717,18 @@ private:
   void do_display (std::ostream& os) const;
 
   std::string do_system_path (void) const { return sys_path; }
 
   std::string do_get_command_line_path (void) const
   { return command_line_path; }
 
   void add (const dir_info& di, bool at_end,
-            const std::string& pname = std::string ()) const;
+            const std::string& pname = std::string (),
+            bool updating = false) const;
 
   friend dir_info::fcn_file_map_type get_fcn_files (const std::string& d);
 };
 
 extern std::string
 genpath (const std::string& dir, const string_vector& skip = "private");
 
 extern void execute_pkg_add (const std::string& dir);
