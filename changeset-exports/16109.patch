# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361857543 18000
#      Tue Feb 26 00:45:43 2013 -0500
# Node ID 229eb14653fd45952e1108f4a687a9733b474229
# Parent  3cce6b4e0f7c21ab8a2363d5a5ac223fbbe8f431
new entry point for parser

* oct-parse.yy (octave_parse_input): New function.
(parse_fcn_file, eval_string): Use it instead of yyparse.
* toplev.cc (main_loop): Use it instead of octave_parse.
* input.cc (get_debug_input): Use it instead of octave_parse.
* oct-parse.h (octave_parse_input): Provide decl.
(octave_parse): Delete decl.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -689,18 +689,17 @@ get_debug_input (const std::string& prom
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-      // This is the same as yyparse in parse.y.
-      int retval = octave_parse ();
+      int retval = octave_parse_input ();
 
       if (retval == 0 && global_command)
         {
           unwind_protect inner_frame;
 
           // Use an unwind-protect cleanup function so that the
           // global_command list will be deleted in the event of an
           // interrupt.
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -578,18 +578,17 @@ main_loop (void)
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
           frame.protect_var (global_command);
 
           global_command = 0;
 
-          // This is the same as yyparse in parse.y.
-          retval = octave_parse ();
+          retval = octave_parse_input ();
 
           if (retval == 0)
             {
               if (global_command)
                 {
                   // Use an unwind-protect cleanup function so that the
                   // global_command list will be deleted in the event of
                   // an interrupt.
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3582,17 +3582,17 @@ parse_fcn_file (const std::string& ff, c
             prep_lexer_for_function_file ();
 
           lexer_flags.parsing_class_method = ! dispatch_type.empty ();
 
           frame.protect_var (global_command);
 
           global_command = 0;
 
-          int status = yyparse ();
+          int status = octave_parse_input ();
 
           // Use an unwind-protect cleanup function so that the
           // global_command list will be deleted in the event of an
           // interrupt.
 
           frame.add_fcn (cleanup_statement_list, &global_command);
 
           fcn_ptr = primary_fcn_ptr;
@@ -4350,17 +4350,17 @@ eval_string (const std::string& s, bool 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-      parse_status = yyparse ();
+      parse_status = octave_parse_input ();
 
       tree_statement_list *command_list = global_command;
 
       // Unmark forced variables.
       // Restore previous value of global_command.
       frame.run (2);
 
       if (parse_status == 0)
@@ -4459,16 +4459,22 @@ cleanup_statement_list (tree_statement_l
 {
   if (*lst)
     {
       delete *lst;
       *lst = 0;
     }
 }
 
+int
+octave_parse_input (void)
+{
+  octave_parse ();
+}
+
 DEFUN (eval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eval (@var{try})\n\
 @deftypefnx {Built-in Function} {} eval (@var{try}, @var{catch})\n\
 Parse the string @var{try} and evaluate it as if it were an Octave\n\
 program.  If that fails, evaluate the optional string @var{catch}.\n\
 The string @var{try} is evaluated in the current context,\n\
 so any results remain available after @code{eval} returns.\n\
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 #include <cstdio>
 
 #include <string>
 
 #include <stack>
 
 extern void reset_parser (void);
 extern int octave_lex (void);
-extern int octave_parse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class tree_statement_list;
 class octave_function;
 
 #include "oct-obj.h"
@@ -102,9 +101,11 @@ feval (const octave_value_list& args, in
 extern OCTINTERP_API octave_value_list
 eval_string (const std::string&, bool silent, int& parse_status, int hargout);
 
 extern OCTINTERP_API octave_value
 eval_string (const std::string&, bool silent, int& parse_status);
 
 extern OCTINTERP_API void cleanup_statement_list (tree_statement_list **lst);
 
+extern OCTINTERP_API int octave_parse_input (void);
+
 #endif
