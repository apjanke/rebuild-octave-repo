# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512337336 18000
#      Sun Dec 03 16:42:16 2017 -0500
# Node ID 11d3603dd8805db490a1d5e4740d3efef0301fbc
# Parent  b153e3a70cfdadcdd6539636ee1b20e8b53a7ed9
give names to anonymous function scopes

* symscope.h (symbol_scope::dup): Also copy scope name.
(octave_fcn_handle::load_ascii, octave_fcn_handle::load_binary,
octave_fcn_handle::load_hdf5): Set scope name to text of anonymous
function definition.
* oct-parse.in.yy (push_fcn_symtab, param_list_beg,
push_script_symtab): Set temporary name for new scope.
(base_parser::make_anon_fcn_handle): Set scope name.

diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -91,17 +91,17 @@ namespace octave
 
     void mark_static (void) { m_is_static = true; }
 
     symbol_scope * parent_scope (void) const { return m_parent; }
     octave_value parent_fcn (void) const { return m_parent_fcn; }
 
     symbol_scope * dup (void) const
     {
-      symbol_scope *new_sid = new symbol_scope ();
+      symbol_scope *new_sid = new symbol_scope (m_name);
 
       for (const auto& nm_sr : m_symbols)
         new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
 
       new_sid->m_parent = m_parent;
       new_sid->m_parent_fcn = m_parent_fcn;
 
       return new_sid;
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -463,17 +463,17 @@ octave_fcn_handle::load_ascii (std::istr
       octave::unwind_protect_safe frame;
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       octave::symbol_table& symtab
         = octave::__get_symbol_table__ ("octave_fcn_handle::load_ascii");
 
-      octave::symbol_scope local_scope;
+      octave::symbol_scope local_scope (buf);
 
       symtab.set_scope (&local_scope);
 
       octave::call_stack& cs
         = octave::__get_call_stack__ ("octave_fcn_handle::load_ascii");
 
       cs.push (&local_scope, 0);
       frame.add_method (cs, &octave::call_stack::pop);
@@ -629,17 +629,17 @@ octave_fcn_handle::load_binary (std::ist
       octave::unwind_protect_safe frame;
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       octave::symbol_table& symtab
         = octave::__get_symbol_table__ ("octave_fcn_handle::load_binary");
 
-      octave::symbol_scope local_scope;
+      octave::symbol_scope local_scope (ctmp2);
 
       symtab.set_scope (&local_scope);
 
       octave::call_stack& cs
         = octave::__get_call_stack__ ("octave_fcn_handle::load_binary");
 
       cs.push (&local_scope, 0);
       frame.add_method (cs, &octave::call_stack::pop);
@@ -1131,17 +1131,17 @@ octave_fcn_handle::load_hdf5 (octave_hdf
       octave::unwind_protect_safe frame;
 
       // Set up temporary scope to use for evaluating the text that
       // defines the anonymous function.
 
       octave::symbol_table& symtab
         = octave::__get_symbol_table__ ("octave_fcn_handle::load_hdf5");
 
-      octave::symbol_scope local_scope;
+      octave::symbol_scope local_scope (fcn_tmp);
 
       symtab.set_scope (&local_scope);
 
       octave::call_stack& cs
         = octave::__get_call_stack__ ("octave_fcn_handle::load_hdf5");
 
       cs.push (&local_scope, 0);
       frame.add_method (cs, &octave::call_stack::pop);
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1279,17 +1279,18 @@ push_fcn_symtab : // empty
                   {
                     $$ = 0;
 
                     parser.m_curr_fcn_depth++;
 
                     if (parser.m_max_fcn_depth < parser.m_curr_fcn_depth)
                       parser.m_max_fcn_depth = parser.m_curr_fcn_depth;
 
-                    lexer.symtab_context.push (new octave::symbol_scope ());
+                    // Will get a real name later.
+                    lexer.symtab_context.push (new octave::symbol_scope ("parser:push_fcn_symtab"));
 
                     parser.m_function_scopes.push (lexer.symtab_context.curr_scope ());
 
                     if (! lexer.reading_script_file
                         && parser.m_curr_fcn_depth == 1
                         && ! parser.m_parsing_subfunctions)
                       parser.m_primary_fcn_scope
                         = lexer.symtab_context.curr_scope ();
@@ -1309,17 +1310,18 @@ push_fcn_symtab : // empty
 
 param_list_beg  : '('
                   {
                     $$ = 0;
                     lexer.looking_at_parameter_list = true;
 
                     if (lexer.looking_at_function_handle)
                       {
-                        lexer.symtab_context.push (new octave::symbol_scope ());
+                        // Will get a real name later.
+                        lexer.symtab_context.push (new octave::symbol_scope ("parser:param_lsit_beg"));
                         lexer.looking_at_function_handle--;
                         lexer.looking_at_anon_fcn_args = true;
                       }
                   }
                 ;
 
 param_list_end  : ')'
                   {
@@ -1446,17 +1448,18 @@ parsing_local_fcns
                 : // empty
                   { parser.m_parsing_local_functions = true; }
                 ;
 
 push_script_symtab : // empty
                   {
                     $$ = 0;
 
-                    lexer.symtab_context.push (new octave::symbol_scope ());
+                    // Will get a real name later.
+                    lexer.symtab_context.push (new octave::symbol_scope ("parser:push_script_symtab"));
                   }
                 ;
 
 begin_file      : push_script_symtab INPUT_FILE
                   { $$ = 0; }
                 ;
 
 file            : begin_file opt_nl opt_list END_OF_INPUT
@@ -2455,16 +2458,35 @@ namespace octave
     expr->set_print_flag (false);
 
     fcn_scope->mark_static ();
 
     tree_anon_fcn_handle *retval
       = new tree_anon_fcn_handle (param_list, expr, fcn_scope,
                                   parent_scope, l, c);
 
+    std::ostringstream buf;
+
+    tree_print_code tpc (buf);
+
+    retval->accept (tpc);
+
+    std::string file = m_lexer.fcn_file_full_name;
+    if (! file.empty ())
+      buf << ": file: " << file;
+    else if (m_lexer.input_from_terminal ())
+      buf << ": *terminal input*";
+    else if (m_lexer.input_from_eval_string ())
+      buf << ": *eval string*";
+    buf << ": line: " << l << " column: " << c;
+
+    std::string scope_name = buf.str ();
+
+    fcn_scope->cache_name (scope_name);
+
     // FIXME: Stash the filename.  This does not work and produces
     // errors when executed.
     //retval->stash_file_name (m_lexer.fcn_file_name);
 
     return retval;
   }
 
   // Build a colon expression.
diff --git a/libinterp/parse-tree/pt-fcn-handle.cc b/libinterp/parse-tree/pt-fcn-handle.cc
--- a/libinterp/parse-tree/pt-fcn-handle.cc
+++ b/libinterp/parse-tree/pt-fcn-handle.cc
@@ -78,16 +78,18 @@ namespace octave
 
     // FIXME: why should we inherit from the current scope here?  That
     // doesn't seem right, but with the way things work now it appears
     // to be required for bug-31371.tst to pass.
 
     if (new_scope)
       symtab.inherit (new_scope);
 
+    // FIXME: if new scope is nullptr, then we are in big trouble here...
+
     tree_anon_fcn_handle *new_afh = new
       tree_anon_fcn_handle (param_list ? param_list->dup (*new_scope) : nullptr,
                             expr ? expr->dup (*new_scope) : nullptr,
                             new_scope, af_parent_scope, line (), column ());
 
     new_afh->copy_base (*this);
 
     return new_afh;
