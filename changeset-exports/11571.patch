# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1295488011 -3600
#      Thu Jan 20 02:46:51 2011 +0100
# Node ID 0e414f837c5810cb7dd4fd7b1531b32c5b4ddfbd
# Parent  57632dea2446ecbd972af818297739c49c2c1e5d
Fix indexing error in the construction of sparse matrices

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2011-01-20  David Bateman  <dbateman@free.fr>
+
+	* Sparce.cc (template <class T> Sparse<T>::Sparse (const Array<T>&,
+	const idx_vector&, const idx_vector&, octave_idx_type,
+	octave_idx_type, bool, octave_idx_type): Fix off by one error in the
+	construction of sparse column vectors. Fix indexing issue in
+	construction of sparse row vectors.
+	* boolSparse.cc (SparseBoolMatrix SparseBoolMatrix::any (int) const):
+	Fully initialize cidx for any called on the first dimension.
+
 2011-01-19  John W. Eaton  <jwe@octave.org>
 
 	* Array.h (explicit Array (octave_idx_type, const T&)):
 	Restore constructor, but mark as deprecated.
 	(explicit Array (octave_idx_type, octave_idx_type)): Delete.
 	(Array (const Array<T>&, octave_idx_type, octave_idx_type)): Delete.
 	Fix all uses in Octave.
 	* Array3.h: Deprecate header file.  Remove all uses from Octave.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -345,23 +345,23 @@ Sparse<T>::Sparse (const Array<T>& a, co
                     }
                   else
                     rrd[k] += a0;
                 }
             }
           else
             {
               // Pick the last one.
-              for (octave_idx_type i = 1; i < n; i++)
+              for (octave_idx_type i = 0; i < n; i++)
                 {
                   if (rd[i] != l)
                     {
                       l = rd[i];
-                      rrd[++k] = a0;
-                      rri[k] = rd[i];
+                      rri[++k] = rd[i];
+                      rrd[k] = a0;
                     }
                 }
             }
 
         }
       else
         {
           idx_vector rr = r, cc = c;
@@ -379,17 +379,20 @@ Sparse<T>::Sparse (const Array<T>& a, co
               s = s1;
             }
 
           octave_quit ();
 
           // Bucket sort.
           OCTAVE_LOCAL_BUFFER (octave_idx_type, sidx, n);
           for (octave_idx_type i = 0; i < n; i++)
-            sidx[ci[cd[i]+1]++] = rd[i];
+            if (rl == 1)
+              sidx[ci[cd[i]+1]++] = rd[0];
+            else
+              sidx[ci[cd[i]+1]++] = rd[i];
 
           // Subsorts. We don't need a stable sort, all values are equal.
           xcidx(0) = 0;
           for (octave_idx_type j = 0; j < nc; j++)
             {
               std::sort (sidx + ci[j], sidx + ci[j+1]);
               octave_idx_type l = -1, nzj = 0;
               // Count.
@@ -520,17 +523,20 @@ Sparse<T>::Sparse (const Array<T>& a, co
       octave_quit ();
 
       typedef std::pair<octave_idx_type, octave_idx_type> idx_pair;
       // Bucket sort.
       OCTAVE_LOCAL_BUFFER (idx_pair, spairs, n);
       for (octave_idx_type i = 0; i < n; i++)
         {
           idx_pair& p = spairs[ci[cd[i]+1]++];
-          p.first = rd[i];
+          if (rl == 1)
+            p.first = rd[0];
+          else
+            p.first = rd[i];
           p.second = i;
         }
 
       // Subsorts. We don't need a stable sort, the second index stabilizes it.
       xcidx(0) = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           std::sort (spairs + ci[j], spairs + ci[j+1]);
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -145,17 +145,18 @@ SparseBoolMatrix::any (int dim) const
   octave_idx_type nr = rows (), nc = cols (), nz = nnz ();
   if (dim == -1)
     dim = (nr == 1 && nc != 1) ? 1 : 0;
 
   if (dim == 0)
     {
       // Result is a row vector.
       retval = Sparse<bool> (1, nc);
-      for(octave_idx_type i = 0; i < nc; i++)
+      retval.xcidx(0) = 0;
+      for (octave_idx_type i = 0; i < nc; i++)
         retval.xcidx(i+1) = retval.xcidx(i) + (cidx(i+1) > cidx(i));
       octave_idx_type new_nz = retval.xcidx(nc);
       retval.change_capacity (new_nz);
       fill_or_memset (new_nz, static_cast<octave_idx_type> (0), retval.ridx ());
       fill_or_memset (new_nz, true, retval.data ());
     }
   else if (dim == 1)
     {
