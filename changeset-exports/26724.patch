# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550005096 0
#      Tue Feb 12 20:58:16 2019 +0000
# Node ID 84355b7b95215686215492c0373187ad2aad32bd
# Parent  259953dac9b846ea1860af491e76c9a021462a7f
allow methods function to work for classdef objects (bug #42510)

* ov-classdef.h, ov-classdef.cc (F__methods__): Move here from
ov-class.cc. Also handle classdef names and objects.
(cdef_class::get_method_map, cdef_class_rep::get_method_map):
New methods.

* methods.m: New test.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1965,43 +1965,16 @@ Return true if the string @var{method} i
   octave::load_path& lp = interp.get_load_path ();
 
   if (lp.find_method (class_name, method) != "")
     return ovl (true);
   else
     return ovl (false);
 }
 
-DEFMETHOD (__methods__, interp, args, ,
-           doc: /* -*- texinfo -*-
-@deftypefn  {} {} __methods__ (@var{x})
-@deftypefnx {} {} __methods__ ("classname")
-Internal function.
-
-Implements @code{methods} for Octave class objects and classnames.
-@seealso{methods}
-@end deftypefn */)
-{
-  // Input validation has already been done in methods.m.
-  octave_value arg = args(0);
-
-  std::string class_name;
-
-  if (arg.isobject ())
-    class_name = arg.class_name ();
-  else if (arg.is_string ())
-    class_name = arg.string_value ();
-
-  octave::load_path& lp = interp.get_load_path ();
-
-  string_vector sv = lp.methods (class_name);
-
-  return ovl (Cell (sv));
-}
-
 static bool
 is_built_in_class (const std::string& cn)
 {
   static std::set<std::string> built_in_class_names;
 
   if (built_in_class_names.empty ())
     {
       built_in_class_names.insert ("double");
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2164,16 +2164,26 @@ cdef_class::cdef_class_rep::get_methods 
   int idx = 0;
 
   for (const auto& nm_mthd : meths)
     c(idx++, 0) = to_ov (nm_mthd.second);
 
   return c;
 }
 
+std::map<std::string, cdef_method>
+cdef_class::cdef_class_rep::get_method_map (bool only_inherited)
+{
+  std::map<std::string, cdef_method> methods;
+
+  find_methods (methods, only_inherited);
+
+  return methods;
+}
+
 void
 cdef_class::cdef_class_rep::find_methods (std::map<std::string,
                                           cdef_method>& meths,
                                           bool only_inherited)
 {
   load_all_methods ();
 
   method_const_iterator it;
@@ -3969,19 +3979,19 @@ Returns the meta.class object correspond
 // should be a function to do this job so that the DEFUN is just a
 // simple wrapper.
 
 DEFUN (properties, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} properties (@var{class_name})
 @deftypefnx {} {} properties (@var{obj})
 @deftypefnx {} {@var{plist} =} properties (@dots{})
-List of properties for the named class @var{class_name}
-or classdef object @var{obj}.  If output value is requested, return list
-of property names in a cell array.
+Return or display the properties for the named class @var{class_name}
+or classdef object @var{obj}.  If an output value is requested, return
+list of property names in a cell array.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   std::string class_name;
@@ -4031,13 +4041,66 @@ of property names in a cell array.
 
 /*
 %!assert (properties ("inputParser"),
 %!        {"CaseSensitive"; "FunctionName"; "KeepUnmatched";
 %!         "Parameters"; "PartialMatching"; "Results";
 %!         "StructExpand"; "Unmatched"; "UsingDefaults"});
 */
 
+// FIXME: Need to implement the -full option.
+
+DEFMETHOD (__methods__, interp, args, ,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {} __methods__ (@var{x})
+@deftypefnx {} {} __methods__ ("classname")
+Internal function.
+
+Implements @code{methods} for Octave class objects and classnames.
+@seealso{methods}
+@end deftypefn */)
+{
+  // Input validation has already been done in methods.m.
+  octave_value arg = args(0);
+
+  std::string class_name;
+
+  if (arg.isobject ())
+    class_name = arg.class_name ();
+  else if (arg.is_string ())
+    class_name = arg.string_value ();
+  else
+    err_wrong_type_arg ("__methods__", arg);
+
+  string_vector sv;
+
+  cdef_class cls = lookup_class (class_name, false, true);
+
+  if (cls.ok ())
+    {
+      std::map<std::string, cdef_method> method_map = cls.get_method_map ();
+
+      std::list<std::string> method_names;
+
+      for (const auto& nm_mthd : method_map)
+        {
+          std::string nm = nm_mthd.first;
+
+          method_names.push_back (nm);
+        }
+
+      sv = string_vector (method_names);
+    }
+
+  // The following will also find methods for legacy @CLASS objects.
+
+  octave::load_path& lp = interp.get_load_path ();
+
+  sv.append (lp.methods (class_name));
+
+  return ovl (Cell (sv));
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -689,16 +689,18 @@ private:
     bool is_sealed (void) const { return get ("Sealed").bool_value (); }
 
     cdef_method find_method (const std::string& nm, bool local = false);
 
     void install_method (const cdef_method& meth);
 
     Cell get_methods (void);
 
+    std::map<std::string, cdef_method> get_method_map (bool only_inherited);
+
     cdef_property find_property (const std::string& nm);
 
     void install_property (const cdef_property& prop);
 
     Cell get_properties (int mode);
 
     std::map<std::string, cdef_property> get_property_map (int mode);
 
@@ -848,16 +850,20 @@ public:
 
   cdef_method find_method (const std::string& nm, bool local = false);
 
   void install_method (const cdef_method& meth)
   { get_rep ()->install_method (meth); }
 
   Cell get_methods (void) { return get_rep ()->get_methods (); }
 
+  std::map<std::string, cdef_method>
+  get_method_map (bool only_inherited = false)
+  { return get_rep ()->get_method_map (only_inherited); }
+
   cdef_property find_property (const std::string& nm);
 
   void install_property (const cdef_property& prop)
   { get_rep ()->install_property (prop); }
 
   Cell get_properties (int mode = property_normal)
   { return get_rep ()->get_properties (mode); }
 
diff --git a/scripts/miscellaneous/methods.m b/scripts/miscellaneous/methods.m
--- a/scripts/miscellaneous/methods.m
+++ b/scripts/miscellaneous/methods.m
@@ -79,8 +79,15 @@ endfunction
 %! mtds = methods ("ftp");
 %! assert (mtds{1}, "ascii");
 
 ## test Java classname
 %!testif HAVE_JAVA; usejava ("jvm")
 %! mtds = methods ("java.lang.Double");
 %! search = strfind (mtds, "java.lang.Double valueOf");
 %! assert (! isempty ([search{:}]));
+
+## classdef
+%!assert (methods ("inputParser"),
+%!        {"addOptional"; "addParamValue"; "addParameter";
+%!         "addRequired"; "addSwitch"; "add_missing"; "delete";
+%!         "disp"; "error"; "is_argname"; "parse"; "validate_arg";
+%!         "validate_name"});
