# HG changeset patch
# User jwe
# Date 838244990 0
#      Wed Jul 24 21:49:50 1996 +0000
# Node ID 968a33af8b3d3310121dd957dd15b7cb8159a94e
# Parent  d7592de300ea3816376e75065c659cd423a0e9ab
[project @ 1996-07-24 21:49:32 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,13 @@
 Wed Jul 24 16:39:16 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (do_integrate): Check to make sure that the state and
 	derivative vectors are the same size.
+	* DASSL.cc (do_integrate): Likewise.
 
 Sun Jul 14 17:30:37 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read, Matrix::write): Convert to use
 	iostreams and handler data format conversions.  Delete old methods
 	that used stdio.
 
 	* data-conv.h, data-conv.cc (oct_data_conv): New class.
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -57,16 +57,18 @@ static int nn;
 DASSL::DASSL (void) : DAE ()
 {
   stop_time_set = 0;
   stop_time = 0.0;
 
   liw = 0;
   lrw = 0;
 
+  sanity_checked = 0;
+
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, double time, DAEFunc& f)
   : DAE (state, time, f)
@@ -74,16 +76,18 @@ DASSL::DASSL (const ColumnVector& state,
   n = size ();
 
   stop_time_set = 0;
   stop_time = 0.0;
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
+  sanity_checked = 0;
+
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, const ColumnVector& deriv,
 	  double time, DAEFunc& f)
@@ -95,16 +99,18 @@ DASSL::DASSL (const ColumnVector& state,
   stop_time = 0.0;
 
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
+  sanity_checked = 0;
+
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 void
 DASSL::force_restart (void)
@@ -208,16 +214,32 @@ DASSL::do_integrate (double tout)
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
   user_fun = DAEFunc::fun;
   user_jac = DAEFunc::jac;
 
+  if (! sanity_checked)
+    {
+      ColumnVector res = (*user_fun) (x, xdot, t);
+
+      if (res.length () != x.length ())
+	{
+	  (*current_liboctave_error_handler)
+	    ("dassl: inconsistent sizes for state and residual vectors");
+
+	  integration_error = 1;
+	  return retval;
+	}
+
+      sanity_checked = 1;
+    }
+  
   if (stop_time_set)
     {
       info.elem (3) = 1;
       rwork.elem (0) = stop_time;
     }
   else
     info.elem (3) = 0;
 
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -140,16 +140,17 @@ private:
   int stop_time_set;
 
   int n;
   int integration_error;
   int restart;
   int liw;  
   int lrw;
   int idid;
+  int sanity_checked;
   Array<int> info;
   Array<int> iwork;
   Array<double> rwork;
 
   friend int ddassl_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
   friend int ddassl_f (double *time, double *state, double *deriv,
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,13 @@
 Wed Jul 24 05:08:07 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lsode.cc (Flsode): Don't set the return value if an error
 	occurred during integration.
+	* dassl.cc (Fdassl): Likewise.
 
 	* file-io.cc (symbols_of_file_io): Redefine values of SEEK_SET,
 	SEEK_CUR, and SEEK_END for Matlab compatibility.
 	* oct-stream.cc (seek): Check for compatible values of ORIGIN arg.
 	Also handle "bof", "cof", and "eof".
 
 Fri Jul 19 15:24:36 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -183,19 +183,24 @@ where x, xdot, and res are vectors, and 
   Matrix output;
   Matrix deriv_output;
 
   if (crit_times_set)
     output = dae.integrate (out_times, deriv_output, crit_times);
   else
     output = dae.integrate (out_times, deriv_output);
 
-  retval.resize (2);
-  retval(0) = output;
-  retval(1) = deriv_output;
+  if (! error_state)
+    {
+      retval.resize (2);
+
+      retval(0) = output;
+      retval(1) = deriv_output;
+    }
+
   return retval;
 }
 
 typedef void (DASSL_options::*d_set_opt_mf) (double);
 typedef double (DASSL_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 3
 
