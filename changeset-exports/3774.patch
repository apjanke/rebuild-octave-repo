# HG changeset patch
# User jwe
# Date 981392044 0
#      Mon Feb 05 16:54:04 2001 +0000
# Node ID de61a7ba91f2c9442549a44c87b5904bd92fcd7f
# Parent  ce8dd72259857c1c84bf2cc1b491ac2fa713c894
[project @ 2001-02-05 16:54:04 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2001-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (next_token_is_bin_op): Remove Checks for spacing except
+	for ops that begin with +, - but are not ++, --, +=, or -=.
+
 2001-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (get_user_input): Handle dbg_cont and dbg_step here.
 	* debug.cc (Fdbg_cont): Delete.
 	* pt-bp.h (MAYBE_DO_BREAKPOINT): Check tree::break_next here.
 	* pt.h (tree::break_next): New static member.
 	* pt.cc: Initialize it.
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1276,17 +1276,19 @@ match_any (char c, const char *s)
     }
   return false;
 }
 
 // Given information about the spacing surrounding an operator,
 // return 1 if it looks like it should be treated as a binary
 // operator.  For example,
 //
-//   [ 1 + 2 ]  or  [ 1+ 2]  or  [ 1+2 ]  ==> binary
+//   [ 1 + 2 ]  or  [ 1+ 2]  or  [ 1+2 ]  ==>  binary
+//
+//   [ 1 +2 ]  ==>  unary
 
 static bool
 looks_like_bin_op (bool spc_prev, int next_char)
 {
   bool spc_next = (next_char == ' ' || next_char == '\t');
 
   return ((spc_prev && spc_next) || ! spc_prev);
 }
@@ -1347,115 +1349,113 @@ next_token_is_postfix_unary_op (bool spc
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.
 //
 // This kluge exists because whitespace is not always ignored inside
-// the square brackets that are used to create matrix objects.
+// the square brackets that are used to create matrix objects (though
+// spacing only really matters in the cases that can be interpreted
+// either as binary ops or prefix unary ops: currently just +, -).
+//
+// Note that
 //
-// Line continuations directly after the operator will cause this
-// function to return FALSE.
+//   octave> [a +\
+//   > b]
+//
+// (the characters '[' 'a' ' ' '+' '\' LFD 'b' ']') will cause Octave
+// to treat the + as a binary operator.
 
 static bool
 next_token_is_bin_op (bool spc_prev)
 {
   bool bin_op = false;
 
   int c0 = yyinput ();
 
   switch (c0)
     {
-    case ':':
     case '+':
     case '-':
+      {
+	int c1 = yyinput ();
+
+	switch (c1)
+	  {
+	  case '+':
+	  case '-':
+	    // Unary ops, spacing doesn't matter.
+	    break;
+
+	  case '=':
+	    // Binary ops, spacing doesn't matter.
+	    bin_op = true;
+	    break;
+
+	  default:
+	    // Could be either, spacing matters.
+	    bin_op = looks_like_bin_op (spc_prev, c1);
+	    break;
+	  }
+
+	unput (c1);
+      }
+      break;
+
+    case ':':
     case '/':
     case '\\':
     case '^':
-      {
-	int c1 = yyinput ();
-	bin_op = looks_like_bin_op (spc_prev, c1);
-	unput (c1);
-      }
+      // Always a binary op (may also include /=, \=, and ^=).
+      bin_op = true;
       break;
 
     // .+ .- ./ .\ .^ .* .**
     case '.':
       {
 	int c1 = yyinput ();
 
-	if (match_any (c1, "+-/\\^"))
-	  {
-	    int c2 = yyinput ();
-	    bin_op = looks_like_bin_op (spc_prev, c2);
-	    unput (c2);
-	  }
-	else if (c1 == '*')
-	  {
-	    int c2 = yyinput ();
-
-	    if (c2 == '*')
-	      {
-		int c3 = yyinput ();
-		bin_op = looks_like_bin_op (spc_prev, c3);
-		unput (c3);
-	      }
-	    else
-	      bin_op = looks_like_bin_op (spc_prev, c2);
-
-	    unput (c2);
-	  }
+	if (match_any (c1, "+-/\\^*"))
+	  // Always a binary op (may also include .+=, .-=, ./=, ...).
+	  bin_op = true;
 	else if (! isdigit (c1) && c1 != ' ' && c1 != '\t' && c1 != '.')
-	  {
-	    bin_op = true;
-	  }
+	  // A structure element reference is a binary op.
+	  bin_op = true;
 
 	unput (c1);
       }
       break;
 
     // = == & && | || * **
     case '=':
     case '&':
     case '|':
     case '*':
-      {
-	int c1 = yyinput ();
-
-	if (c1 == c0)
-	  {
-	    int c2 = yyinput ();
-	    bin_op = looks_like_bin_op (spc_prev, c2);
-	    unput (c2);
-	  }
-	else
-	  bin_op = looks_like_bin_op (spc_prev, c1);
-
-	unput (c1);
-      }
+      // Always a binary op (may also include ==, &&, ||, **).
+      bin_op = true;
       break;
 
-    // <= >= <> ~= != < >
+    // < <= <> > >=
     case '<':
     case '>':
+      // Always a binary op (may also include <=, <>, >=).
+      bin_op = true;
+      break;
+
+    // ~= !=
     case '~':
     case '!':
       {
 	int c1 = yyinput ();
 
-	if ((c1 == '=') || (c1 == '<' && c1 == '>'))
-	  {
-	    int c2 = yyinput ();
-	    bin_op = looks_like_bin_op (spc_prev, c2);
-	    unput (c2);
-	  }
-	else if (c1 != '~' && c1 != '!')
-	  bin_op = looks_like_bin_op (spc_prev, c1);
+	// ~ and ! can be unary ops, so require following =.
+	if (c1 == '=')
+	  bin_op = true;
 
 	unput (c1);
       }
       break;
 
     default:
       break;
     }
