# HG changeset patch
# User Rik <rik@octave.org>
# Date 1506366675 25200
#      Mon Sep 25 12:11:15 2017 -0700
# Node ID 71dad5be765a5568d83073bcb916217abf265146
# Parent  f3b60734ac9b19fc47dda1b78c954b98a9f539ee
quadcc.cc: Use an Absolute Tolerance, as well as RelTol (Bug #46349).

* quadcc.cc: Add #includes for <cmath> and <algorithm>.  Use C++ const rather
than #define for MIN_CQUAD_HEAPSIZE.  Introduce new constant DROP_RELTOL
used when deciding to drop an interval.  Cuddle operands being multiplied to
distinguish them from addition operator which takes place second.  Rewrite
documentation to describe specifying both absolute and relative tolerances.
Add implementation note about warning when calling function with only AbsTol.
Re-implement input processing to accept a 1- or 2-element vector containing
tolerances.  Add a warning_with_id call to warn programmers that the syntax
for the function has changed.  Add code to make sure this warning fires just
once for each Octave session.  Use std::copy_n and std::swap to simplify code.
Change stopping criteria for while loop to depend on both absolute tolerance
and relative tolerance [std::max (abstol, fabs (igral) * reltol)].  Adjust
tolerance in BIST tests to reflect new stopping criteria.  Add more input
validation BIST tests.

* NEWS: Announce changes to function.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -36,16 +36,34 @@ Summary of important user-visible change
     numeric array of the same size as the input cell array.  Previously,
     hex2num would accept a cell array of strings of arbitrary dimension
     but would always return a column vector.
 
  ** The "names" option used in regular expressions now returns a struct
     array, rather than a struct with a cell array for each field.  This
     change was made for Matlab compatibility.
 
+ ** The quadcc function now uses both absolute tolerance and relative
+    tolerance to determine the stopping criteria for an integration.
+    To be compatible with other quadXXX functions such as quadgk the
+    calling syntax has changed to
+
+      quadcc (f, a, b, [AbsTol, [RelTol]])
+
+    To update existing code, change instances of RelTol to [0, RelTol].
+
+      quadcc (f, a, b, tol) => quadcc (f, a, b, [0, tol])
+
+    A warning that a single tolerance input is now interpreted as an
+    absolute tolerance will be issued in Octave versions 4.4 and 4.6,
+    after which it will be removed.  The warning has ID
+    "Octave:quadcc:RelTol-conversion" and can be disabled with
+
+      warning ("off", "Octave:quadcc:RelTol-conversion")
+
  ** Other new functions added in 4.4:
 
       corrcoef
       getframe
       gsvd
       hgtransform
       humps
       integral
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -19,42 +19,49 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cmath>
+
+#include <algorithm>
+
 #include "lo-ieee.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ovl.h"
 #include "parse.h"
 #include "utils.h"
 #include "variables.h"
 
 // Extended debugging.
 #define DEBUG_QUADCC 0
 
 // Define the minimum size of the interval heap.
-#define MIN_CQUAD_HEAPSIZE 200
+static const int MIN_CQUAD_HEAPSIZE = 200;
 
 // Data of a single interval.
 typedef struct
 {
   double a, b;
   double c[64];
   double fx[33];
   double igral, err;
   int depth, rdepth, ndiv;
 } cquad_ival;
 
+// Define relative tolerance used when deciding to drop an interval.
+static const double DROP_RELTOL = std::numeric_limits<double>::epsilon () * 10;
+
 // Some constants and matrices that we'll need.
 
 static const double xi[33] =
 {
   -1., -0.99518472667219688624, -0.98078528040323044912,
   -0.95694033573220886493, -0.92387953251128675612,
   -0.88192126434835502970, -0.83146961230254523708,
   -0.77301045336273696082, -0.70710678118654752440,
@@ -1395,65 +1402,64 @@ static const double Tright[33 * 33] =
 };
 
 // Allocates a workspace for the given maximum number of intervals.
 // Note that if the workspace gets filled, the intervals with the lowest
 // error estimates are dropped.  The maximum number of intervals is
 // therefore not the maximum number of intervals that will be computed,
 // but merely the size of the buffer.
 
-// Compute the product of the fx with one of the inverse
-// Vandermonde-like matrices.
+// Compute the product of fx with one of the inverse Vandermonde-like matrices.
 
-void
+static void
 Vinvfx (const double *fx, double *c, const int d)
 {
   int i, j;
 
   switch (d)
     {
     case 0:
       for (i = 0; i <= 4; i++)
         {
           c[i] = 0.0;
           for (j = 0; j <= 4; j++)
-            c[i] += V1inv[i * 5 + j] * fx[j * 8];
+            c[i] += V1inv[i*5 + j] * fx[j * 8];
         }
       break;
     case 1:
       for (i = 0; i <= 8; i++)
         {
           c[i] = 0.0;
           for (j = 0; j <= 8; j++)
-            c[i] += V2inv[i * 9 + j] * fx[j * 4];
+            c[i] += V2inv[i*9 + j] * fx[j * 4];
         }
       break;
     case 2:
       for (i = 0; i <= 16; i++)
         {
           c[i] = 0.0;
           for (j = 0; j <= 16; j++)
-            c[i] += V3inv[i * 17 + j] * fx[j * 2];
+            c[i] += V3inv[i*17 + j] * fx[j * 2];
         }
       break;
     case 3:
       for (i = 0; i <= 32; i++)
         {
           c[i] = 0.0;
           for (j = 0; j <= 32; j++)
-            c[i] += V4inv[i * 33 + j] * fx[j];
+            c[i] += V4inv[i*33 + j] * fx[j];
         }
       break;
     }
 }
 
 // Downdate the interpolation given by the N coefficients C by removing
-// the nodes with indices in nans.
+// the nodes with indices in NaNs.
 
-void
+static void
 downdate (double *c, int n, int d, int *nans, int nnans)
 {
   static const int bidx[4] = { 0, 6, 16, 34 };
   double b_new[34], alpha;
   int i, j;
 
   for (i = 0; i <= n + 1; i++)
     b_new[i] = bee[bidx[d] + i];
@@ -1478,105 +1484,118 @@ downdate (double *c, int n, int d, int *
 // The actual integration routine.
 
 DEFUN (quadcc, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b})
 @deftypefnx {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})
 @deftypefnx {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})
 @deftypefnx {} {[@var{q}, @var{err}, @var{nr_points}] =} quadcc (@dots{})
-Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
-using doubly-adaptive @nospell{Clenshaw-Curtis} quadrature.
+Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using
+doubly-adaptive @nospell{Clenshaw-Curtis} quadrature.
 
 @var{f} is a function handle, inline function, or string containing the name
 of the function to evaluate.  The function @var{f} must be vectorized and
 must return a vector of output values if given a vector of input values.
 For example,
 
 @example
 f = @@(x) x .* sin (1./x) .* sqrt (abs (1 - x));
 @end example
 
 @noindent
 which uses the element-by-element ``dot'' form for all operators.
 
-@var{a} and @var{b} are the lower and upper limits of integration.  Either
-or both limits may be infinite.  @code{quadcc} handles an inifinite limit
-by substituting the variable of integration with @code{x = tan (pi/2*u)}.
+@var{a} and @var{b} are the lower and upper limits of integration.  Either or
+both limits may be infinite.  @code{quadcc} handles an infinite limit by
+substituting the variable of integration with @code{x = tan (pi/2*u)}.
 
-The optional argument @var{tol} defines the relative tolerance used to stop
-the integration procedure.  The default value is @math{1e^{-6}}.
+The optional argument @var{tol} is a 1- or 2-element vector that specifies the
+desired accuracy of the result.  The first element of the vector is the desired
+absolute tolerance, and the second element is the desired relative tolerance.
+To choose a relative test only, set the absolute tolerance to zero.  To choose
+an absolute test only, set the relative tolerance to zero.  The default
+absolute tolerance is @math{1e^{-10}} and the default relative tolerance is
+@math{1e^{-6}}.
 
-The optional argument @var{sing} contains a list of points where the
-integrand has known singularities, or discontinuities
-in any of its derivatives, inside the integration interval.
-For the example above, which has a discontinuity at x=1, the call to
-@code{quadcc} would be as follows
+The optional argument @var{sing} contains a list of points where the integrand
+has known singularities, or discontinuities in any of its derivatives, inside
+the integration interval.  For the example above, which has a discontinuity at
+x=1, the call to @code{quadcc} would be as follows
 
 @example
-int = quadcc (f, a, b, 1.0e-6, [ 1 ]);
+int = quadcc (f, a, b, [], [ 1 ]);
 @end example
 
 The result of the integration is returned in @var{q}.
 
 @var{err} is an estimate of the absolute integration error.
 
-@var{nr_points} is the number of points at which the integrand was
-evaluated.
+@var{nr_points} is the number of points at which the integrand was evaluated.
 
 If the adaptive integration did not converge, the value of @var{err} will be
 larger than the requested tolerance.  Therefore, it is recommended to verify
 this value for difficult integrands.
 
 @code{quadcc} is capable of dealing with non-numeric values of the integrand
-such as @code{NaN} or @code{Inf}.  If the integral diverges, and
-@code{quadcc} detects this, then a warning is issued and @code{Inf} or
-@code{-Inf} is returned.
+such as @code{NaN} or @code{Inf}.  If the integral diverges, and @code{quadcc}
+detects this, then a warning is issued and @code{Inf} or @code{-Inf} is
+returned.
 
 Note: @code{quadcc} is a general purpose quadrature algorithm and, as such,
 may be less efficient for a smooth or otherwise well-behaved integrand than
 other methods such as @code{quadgk}.
 
 The algorithm uses @nospell{Clenshaw-Curtis} quadrature rules of increasing
 degree in each interval and bisects the interval if either the function does
 not appear to be smooth or a rule of maximum degree has been reached.  The
 error estimate is computed from the L2-norm of the difference between two
 successive interpolations of the integrand over the nodes of the respective
 quadrature rules.
 
+@c FIXME: Remove in Octave version 4.8
+Implementation Note: For Octave versions <= 4.2, @code{quadcc} accepted a
+single tolerance argument which specified the relative tolerance.  For
+versions 4.4 and 4.6, @code{quadcc} will issue a warning when called with a
+single tolerance argument indicating that the meaning of this input has
+changed from relative tolerance to absolute tolerance.  The warning ID for this
+message is @qcode{"Octave:quadcc:RelTol-conversion"}.  The warning may be
+disabled with @code{warning ("off", "Octave:quadcc:RelTol-conversion")}.
+
 Reference: @nospell{P. Gonnet}, @cite{Increasing the Reliability of Adaptive
-Quadrature Using Explicit Interpolants}, ACM Transactions on
-Mathematical Software, Vol. 37, Issue 3, Article No. 3, 2010.
+Quadrature Using Explicit Interpolants}, ACM Transactions on Mathematical
+Software, Vol. 37, Issue 3, Article No. 3, 2010.
 @seealso{quad, quadv, quadl, quadgk, trapz, dblquad, triplequad}
 @end deftypefn */)
 {
   // Some constants that we will need.
   static const int n[4] = { 4, 8, 16, 32 };
   static const int skip[4] = { 8, 4, 2, 1 };
   static const int idx[4] = { 0, 5, 14, 31 };
   static const double w = M_SQRT2 / 2;
   static const int ndiv_max = 20;
 
   // Arguments left and right.
   int nargin = args.length ();
   octave_function *fcn;
-  double a, b, tol, *sing;
+  double a, b, abstol, reltol, *sing;
 
   // Variables needed for transforming the integrand.
   bool wrap = false;
   double xw;
 
   // Stuff we will need to call the integrand.
   octave_value_list fargs, fvals;
 
   // Actual variables (as opposed to constants above).
   double m, h, ml, hl, mr, hr, temp;
   double igral, err, igral_final, err_final;
-  int nivals, neval = 0;
-  int i, j, d, split, t;
+  int nivals;
+  int neval = 0;
+  int i, j, d, split;
   int nnans, nans[33];
   cquad_ival *iv, *ivl, *ivr;
   double nc, ncdiff;
 
   // Parse the input arguments.
   if (nargin < 3)
     print_usage ();
 
@@ -1588,35 +1607,62 @@ Mathematical Software, Vol. 37, Issue 3,
       std::string fname = "function y = ";
       fname.append (fcn_name);
       fname.append ("(x) y = ");
       fcn = extract_function (args(0), "quadcc", fcn_name, fname,
                               "; endfunction");
     }
 
   if (! args(1).is_real_scalar ())
-    error ("quadcc: lower limit of integration (A) must be a single real scalar");
-  else
-    a = args(1).double_value ();
+    error ("quadcc: lower limit of integration (A) must be a real scalar");
+  a = args(1).double_value ();
 
   if (! args(2).is_real_scalar ())
-    error ("quadcc: upper limit of integration (B) must be a single real scalar");
-  else
-    b = args(2).double_value ();
+    error ("quadcc: upper limit of integration (B) must be a real scalar");
+  b = args(2).double_value ();
 
   if (nargin < 4 || args(3).isempty ())
-    tol = 1.0e-6;
-  else if (! args(3).is_real_scalar () || args(3).double_value () <= 0)
-    error ("quadcc: tolerance (TOL) must be a single real scalar > 0");
+    {
+      abstol = 1.0e-10;
+      reltol = 1.0e-6;
+    }
+  else if (! args(3).isnumeric () || args(3).numel () > 2)
+    error ("quadcc: TOL must be a 1- or 2-element vector [AbsTol, RelTol]");
   else
-    tol = args(3).double_value ();
+    {
+      NDArray tol = args(3).array_value ();
+
+      abstol = tol(0);
+      if (abstol < 0)
+        error ("quadcc: absolute tolerance must be >=0");
 
+      if (tol.numel () == 1)
+        {
+          // FIXME: Remove warning in Octave version 4.8
+          static bool do_warn = true;
+          if (do_warn)
+            {
+              warning_with_id ("Octave:quadcc:RelTol-conversion",
+                               "A single tolerance input now sets AbsTol, not RelTol");
+              do_warn = false;
+            }
+
+          reltol = 1.0e-6;
+        }
+      else
+        {
+          reltol = tol(1);
+          if (reltol < 0)
+            error ("quadcc: relative tolerance must be >=0");
+        }
+    }
+  
   if (nargin < 5)
     nivals = 1;
-  else if (!(args(4).is_real_scalar () || args(4).is_real_matrix ()))
+  else if (! (args(4).is_real_scalar () || args(4).is_real_matrix ()))
     error ("quadcc: list of singularities (SING) must be a vector of real values");
   else
     nivals = 1 + args(4).numel ();
 
   int cquad_heapsize = (nivals >= MIN_CQUAD_HEAPSIZE ? nivals + 1
                                                      : MIN_CQUAD_HEAPSIZE);
   // The interval heap.
   OCTAVE_LOCAL_BUFFER (cquad_ival, ivals, cquad_heapsize);
@@ -1628,18 +1674,17 @@ Mathematical Software, Vol. 37, Issue 3,
       iivals[0] = a;
       iivals[1] = b;
     }
   else
     {
       // Intervals around singularities.
       sing = args(4).array_value ().fortran_vec ();
       iivals[0] = a;
-      for (i = 0; i < nivals - 1; i++)
-        iivals[i + 1] = sing[i];
+      std::copy_n (sing, nivals-1, iivals+1);
       iivals[nivals] = b;
     }
 
   // If a or b are +/-Inf, transform the integral.
   if (octave::math::isinf (a) || octave::math::isinf (b))
     {
       wrap = true;
       for (i = 0; i < nivals + 1; i++)
@@ -1662,39 +1707,39 @@ Mathematical Software, Vol. 37, Issue 3,
       iv = &(ivals[heap[j]]);
       m = (iivals[j] + iivals[j + 1]) / 2;
       h = (iivals[j + 1] - iivals[j]) / 2;
       nnans = 0;
       ColumnVector ex (33);
       if (wrap)
         {
           for (i = 0; i <= n[3]; i++)
-            ex(i) = tan (M_PI / 2 * (m + xi[i] * h));
+            ex(i) = tan (M_PI/2 * (m + xi[i]*h));
         }
       else
         {
           for (i = 0; i <= n[3]; i++)
-            ex(i) = m + xi[i] * h;
+            ex(i) = m + xi[i]*h;
         }
       fargs(0) = ex;
       fvals = octave::feval (fcn, fargs, 1);
       if (fvals.length () != 1 || ! fvals(0).is_real_matrix ())
         error ("quadcc: integrand F must return a single, real-valued vector");
 
       Matrix effex = fvals(0).matrix_value ();
       if (effex.numel () != ex.numel ())
         error ("quadcc: integrand F must return a single, real-valued vector of the same size as the input");
 
       for (i = 0; i <= n[3]; i++)
         {
           iv->fx[i] = effex(i);
           if (wrap)
             {
               xw = ex(i);
-              iv->fx[i] *= (1.0 + xw * xw) * M_PI / 2;
+              iv->fx[i] *= (1.0 + xw*xw) * M_PI/2;
             }
           neval++;
           if (! octave::math::isfinite (iv->fx[i]))
             {
               nans[nnans++] = i;
               iv->fx[i] = 0.0;
             }
         }
@@ -1715,47 +1760,47 @@ Mathematical Software, Vol. 37, Issue 3,
           temp = iv->c[idx[3] + i];
           nc += temp * temp;
         }
       ncdiff = nc;
       for (i = 0; i <= n[2]; i++)
         {
           temp = iv->c[idx[2] + i] - iv->c[idx[3] + i];
           ncdiff += temp * temp;
-          nc += iv->c[idx[3] + i] * iv->c[idx[3] + i];
+          temp = iv->c[idx[3] + i];
+          nc += temp * temp;
         }
       ncdiff = sqrt (ncdiff);
       nc = sqrt (nc);
       iv->err = ncdiff * 2 * h;
       if (ncdiff / nc > 0.1 && iv->err < 2 * h * nc)
         iv->err = 2 * h * nc;
 
       // Tabulate this interval's data.
       igral += iv->igral;
       err += iv->err;
 
       // Sift it up the heap.
       i = j;
       while (i > 0 && ivals[heap[i / 2]].err < ivals[heap[i]].err)
         {
-          temp = heap[i];
-          heap[i] = heap[i / 2];
-          heap[i / 2] = temp;
+          std::swap (heap[i], heap[i / 2]);
           i /= 2;
         }
     }
 
   // Initialize some global values.
   igral_final = 0.0;
   err_final = 0.0;
 
   // Main loop.
-  while (nivals > 0 && err > 0.0 && err > fabs (igral) * tol
-         && !(err_final > fabs (igral) * tol
-              && err - err_final < fabs (igral) * tol))
+  while (nivals > 0
+         && err > std::max (abstol, fabs (igral) * reltol)
+         && ! (err_final > std::max (abstol, fabs (igral) * reltol)
+               && err - err_final < std::max (abstol, fabs (igral) * reltol)))
     {
       // Allow the user to interrupt.
       octave_quit ();
 
       // Put our finger on the interval with the largest error.
       iv = &(ivals[heap[0]]);
       m = (iv->a + iv->b) / 2;
       h = (iv->b - iv->a) / 2;
@@ -1772,41 +1817,41 @@ Mathematical Software, Vol. 37, Issue 3,
           d = ++iv->depth;
 
           // Get the new (missing) function values.
           {
             ColumnVector ex (n[d] / 2);
             if (wrap)
               {
                 for (i = 0; i < n[d] / 2; i++)
-                  ex(i) = tan (M_PI / 2 * (m + xi[(2 * i + 1) * skip[d]] * h));
+                  ex(i) = tan (M_PI/2 * (m + xi[(2*i + 1) * skip[d]] * h));
               }
             else
               {
                 for (i = 0; i < n[d] / 2; i++)
-                  ex(i) = m + xi[(2 * i + 1) * skip[d]] * h;
+                  ex(i) = m + xi[(2*i + 1) * skip[d]] * h;
               }
             fargs(0) = ex;
             fvals = octave::feval (fcn, fargs, 1);
             if (fvals.length () != 1 || ! fvals(0).is_real_matrix ())
               error ("quadcc: integrand F must return a single, real-valued vector");
 
             Matrix effex = fvals(0).matrix_value ();
             if (effex.numel () != ex.numel ())
               error ("quadcc: integrand F must return a single, real-valued vector of the same size as the input");
 
             neval += effex.numel ();
             for (i = 0; i < n[d] / 2; i++)
               {
-                j = (2 * i + 1) * skip[d];
+                j = (2*i + 1) * skip[d];
                 iv->fx[j] = effex(i);
                 if (wrap)
                   {
                     xw = ex(i);
-                    iv->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
+                    iv->fx[j] *= (1.0 + xw*xw) * M_PI/2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[d])
             {
               if (! octave::math::isfinite (iv->fx[i]))
                 {
@@ -1832,70 +1877,66 @@ Mathematical Software, Vol. 37, Issue 3,
               temp = iv->c[idx[d] + i];
               nc += temp * temp;
             }
           ncdiff = nc;
           for (i = 0; i <= n[d - 1]; i++)
             {
               temp = iv->c[idx[d - 1] + i] - iv->c[idx[d] + i];
               ncdiff += temp * temp;
-              nc += iv->c[idx[d] + i] * iv->c[idx[d] + i];
+              temp = iv->c[idx[d] + i];
+              nc += temp * temp;
             }
           ncdiff = sqrt (ncdiff);
           nc = sqrt (nc);
           iv->err = ncdiff * 2 * h;
           // Compute the local integral.
           iv->igral = 2 * h * w * iv->c[idx[d]];
           // Split the interval prematurely?
           split = (nc > 0 && ncdiff / nc > 0.1);
         }
       else
         {
           // Maximum degree reached, just split.
           split = 1;
         }
 
       // Should we drop this interval?
-      if ((m + h * xi[0]) >= (m + h * xi[1])
-          || (m + h * xi[31]) >= (m + h * xi[32])
-          || iv->err < fabs (iv->igral)
-                       * std::numeric_limits<double>::epsilon () * 10)
+      if ((m + h*xi[0]) >= (m + h*xi[1])
+          || (m + h*xi[31]) >= (m + h*xi[32])
+          || iv->err < fabs (iv->igral) * DROP_RELTOL)
         {
 #if (DEBUG_QUADCC)
           printf ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
                   heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 #endif
 
           // Keep this interval's contribution.
           err_final += iv->err;
           igral_final += iv->igral;
           // Swap with the last element on the heap.
-          t = heap[nivals - 1];
-          heap[nivals - 1] = heap[0];
-          heap[0] = t;
+          std::swap (heap[nivals - 1], heap[0]);
           nivals--;
           // Fix up the heap.
           i = 0;
-          while (2 * i + 1 < nivals)
+          while (2*i + 1 < nivals)
             {
               // Get the kids.
-              j = 2 * i + 1;
+              j = 2*i + 1;
               // If the j+1st entry exists and is larger than the jth,
               // use it instead.
               if (j + 1 < nivals
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
               // Do we need to move the ith entry up?
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
                 break;
               else
                 {
-                  t = heap[j];
-                  heap[j] = heap[i];
-                  heap[i] = t;
+                  std::swap (heap[j], heap[i]);
                   i = j;
                 }
             }
         }
       else if (split)
         {
           // Some values we will need often...
           d = iv->depth;
@@ -1909,17 +1950,17 @@ Mathematical Software, Vol. 37, Issue 3,
           ivl->rdepth = iv->rdepth + 1;
           ivl->fx[0] = iv->fx[0];
           ivl->fx[32] = iv->fx[16];
           {
             ColumnVector ex (n[0] - 1);
             if (wrap)
               {
                 for (i = 0; i < n[0] - 1; i++)
-                  ex(i) = tan (M_PI / 2 * (ml + xi[(i + 1) * skip[0]] * hl));
+                  ex(i) = tan (M_PI/2 * (ml + xi[(i + 1) * skip[0]] * hl));
               }
             else
               {
                 for (i = 0; i < n[0] - 1; i++)
                   ex(i) = ml + xi[(i + 1) * skip[0]] * hl;
               }
             fargs(0) = ex;
             fvals = octave::feval (fcn, fargs, 1);
@@ -1933,17 +1974,17 @@ Mathematical Software, Vol. 37, Issue 3,
             neval += effex.numel ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivl->fx[j] = effex(i);
                 if (wrap)
                   {
                     xw = ex(i);
-                    ivl->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
+                    ivl->fx[j] *= (1.0 + xw*xw) * M_PI/2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[0])
             {
               if (! octave::math::isfinite (ivl->fx[i]))
                 {
@@ -1957,17 +1998,17 @@ Mathematical Software, Vol. 37, Issue 3,
               downdate (ivl->c, n[0], 0, nans, nnans);
               for (i = 0; i < nnans; i++)
                 ivl->fx[nans[i]] = octave::numeric_limits<double>::NaN ();
             }
           for (i = 0; i <= n[d]; i++)
             {
               ivl->c[idx[d] + i] = 0.0;
               for (j = i; j <= n[d]; j++)
-                ivl->c[idx[d] + i] += Tleft[i * 33 + j] * iv->c[idx[d] + j];
+                ivl->c[idx[d] + i] += Tleft[i*33 + j] * iv->c[idx[d] + j];
             }
           ncdiff = 0.0;
           for (i = 0; i <= n[0]; i++)
             {
               temp = ivl->c[i] - ivl->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           for (i = n[0] + 1; i <= n[d]; i++)
@@ -1975,17 +2016,17 @@ Mathematical Software, Vol. 37, Issue 3,
               temp = ivl->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           ncdiff = sqrt (ncdiff);
           ivl->err = ncdiff * h;
           // Check for divergence.
           ivl->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivl->c[0] / iv->c[0] > 2);
-          if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
+          if (ivl->ndiv > ndiv_max && 2*ivl->ndiv > ivl->rdepth)
             {
               igral = std::copysign (octave::numeric_limits<double>::Inf (), igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
           // Compute the local integral.
           ivl->igral = h * w * ivl->c[0];
@@ -2000,17 +2041,17 @@ Mathematical Software, Vol. 37, Issue 3,
           ivr->rdepth = iv->rdepth + 1;
           ivr->fx[0] = iv->fx[16];
           ivr->fx[32] = iv->fx[32];
           {
             ColumnVector ex (n[0] - 1);
             if (wrap)
               {
                 for (i = 0; i < n[0] - 1; i++)
-                  ex(i) = tan (M_PI / 2 * (mr + xi[(i + 1) * skip[0]] * hr));
+                  ex(i) = tan (M_PI/2 * (mr + xi[(i + 1) * skip[0]] * hr));
               }
             else
               {
                 for (i = 0; i < n[0] - 1; i++)
                   ex(i) = mr + xi[(i + 1) * skip[0]] * hr;
               }
             fargs(0) = ex;
             fvals = octave::feval (fcn, fargs, 1);
@@ -2024,17 +2065,17 @@ Mathematical Software, Vol. 37, Issue 3,
             neval += effex.numel ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivr->fx[j] = effex(i);
                 if (wrap)
                   {
                     xw = ex(i);
-                    ivr->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
+                    ivr->fx[j] *= (1.0 + xw*xw) * M_PI/2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[0])
             {
               if (! octave::math::isfinite (ivr->fx[i]))
                 {
@@ -2048,17 +2089,17 @@ Mathematical Software, Vol. 37, Issue 3,
               downdate (ivr->c, n[0], 0, nans, nnans);
               for (i = 0; i < nnans; i++)
                 ivr->fx[nans[i]] = octave::numeric_limits<double>::NaN ();
             }
           for (i = 0; i <= n[d]; i++)
             {
               ivr->c[idx[d] + i] = 0.0;
               for (j = i; j <= n[d]; j++)
-                ivr->c[idx[d] + i] += Tright[i * 33 + j] * iv->c[idx[d] + j];
+                ivr->c[idx[d] + i] += Tright[i*33 + j] * iv->c[idx[d] + j];
             }
           ncdiff = 0.0;
           for (i = 0; i <= n[0]; i++)
             {
               temp = ivr->c[i] - ivr->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           for (i = n[0] + 1; i <= n[d]; i++)
@@ -2066,94 +2107,84 @@ Mathematical Software, Vol. 37, Issue 3,
               temp = ivr->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           ncdiff = sqrt (ncdiff);
           ivr->err = ncdiff * h;
           // Check for divergence.
           ivr->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivr->c[0] / iv->c[0] > 2);
-          if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
+          if (ivr->ndiv > ndiv_max && 2*ivr->ndiv > ivr->rdepth)
             {
               igral = std::copysign (octave::numeric_limits<double>::Inf (), igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
           // Compute the local integral.
           ivr->igral = h * w * ivr->c[0];
 
           // Fix-up the heap: we now have one interval on top that we
-          // don't need any more and two new, unsorted ones at the
-          // bottom.
+          // don't need any more and two new, unsorted ones at the bottom.
 
           // Flip the last interval to the top of the heap and sift down.
-          t = heap[nivals - 1];
-          heap[nivals - 1] = heap[0];
-          heap[0] = t;
+          std::swap (heap[nivals - 1], heap[0]);
           nivals--;
           // Sift this interval back down the heap.
           i = 0;
-          while (2 * i + 1 < nivals - 1)
+          while (2*i + 1 < nivals - 1)
             {
-              j = 2 * i + 1;
+              j = 2*i + 1;
               if (j + 1 < nivals - 1
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
                 break;
               else
                 {
-                  t = heap[j];
-                  heap[j] = heap[i];
-                  heap[i] = t;
+                  std::swap (heap[j], heap[i]);
                   i = j;
                 }
             }
 
           // Now grab the last interval and sift it up the heap.
           i = nivals - 1;
           while (i > 0)
             {
               j = (i - 1) / 2;
               if (ivals[heap[j]].err < ivals[heap[i]].err)
                 {
-                  t = heap[j];
-                  heap[j] = heap[i];
-                  heap[i] = t;
+                  std::swap (heap[j], heap[i]);
                   i = j;
                 }
               else
                 break;
             }
         }
       else
         {
           // Otherwise, just fix-up the heap.
           i = 0;
-          while (2 * i + 1 < nivals)
+          while (2*i + 1 < nivals)
             {
-              j = 2 * i + 1;
+              j = 2*i + 1;
               if (j + 1 < nivals
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
                 break;
               else
                 {
-                  t = heap[j];
-                  heap[j] = heap[i];
-                  heap[i] = t;
+                  std::swap (heap[j], heap[i]);
                   i = j;
                 }
             }
         }
 
-      // If the heap is about to overflow, remove the last two
-      // intervals.
+      // If the heap is about to overflow, remove the last two intervals.
       while (nivals > cquad_heapsize - 2)
         {
           iv = &(ivals[heap[nivals - 1]]);
 #if (DEBUG_QUADCC)
           printf ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
                   heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 #endif
           err_final += iv->err;
@@ -2166,59 +2197,63 @@ Mathematical Software, Vol. 37, Issue 3,
       err = err_final;
       for (i = 0; i < nivals; i++)
         {
           igral += ivals[heap[i]].igral;
           err += ivals[heap[i]].err;
         }
     }
 
+#if (DEBUG_QUADCC)
   // Dump the contents of the heap.
-#if (DEBUG_QUADCC)
   for (i = 0; i < nivals; i++)
     {
       iv = &(ivals[heap[i]]);
       printf ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
               i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
               iv->rdepth, iv->ndiv);
     }
 #endif
 
   return ovl (igral, err, neval);
 }
 
 /*
-%!assert (quadcc (@sin, -pi, pi), 0, 1e-6)
-%!assert (quadcc (inline ("sin"),- pi, pi), 0, 1e-6)
-%!assert (quadcc ("sin", -pi, pi), 0, 1e-6)
+%!assert (quadcc (@sin, -pi, pi), 0, 1e-10)
+%!assert (quadcc (inline ("sin"), -pi, pi), 0, 1e-10)
+%!assert (quadcc ("sin", -pi, pi), 0, 1e-10)
 
-%!assert (quadcc (@sin, -pi, 0), -2, 1e-6)
-%!assert (quadcc (@sin, 0, pi), 2, 1e-6)
-%!assert (quadcc (@(x) 1./sqrt (x), 0, 1), 2, 1e-6)
-%!assert (quadcc (@(x) 1./(sqrt (x).*(x+1)), 0, Inf), pi, 1e-6)
+%!assert (quadcc (@sin, -pi, 0), -2, 1e-10)
+%!assert (quadcc (@sin, 0, pi), 2, 1e-10)
+%!assert (quadcc (@(x) 1./sqrt (x), 0, 1), 2, -1e-6)
+%!assert (quadcc (@(x) 1./(sqrt (x).*(x+1)), 0, Inf), pi, -1e-6)
+%!assert (quadcc (@(x) 1./(sqrt (x).*(x+1)), 0, Inf, [0, 1e-8]), pi, -1e-8)
 
-%!assert (quadcc (@(x) exp (-x .^ 2), -Inf, Inf), sqrt (pi), 1e-6)
-%!assert (quadcc (@(x) exp (-x .^ 2), -Inf, 0), sqrt (pi)/2, 1e-6)
+%!assert (quadcc (@(x) exp (-x .^ 2), -Inf, Inf), sqrt (pi), 1e-10)
+%!assert (quadcc (@(x) exp (-x .^ 2), -Inf, 0), sqrt (pi)/2, 1e-10)
 
 ## Test function with NaNs in interval
 %!function y = __nansin (x)
 %!  nan_locs = [-3*pi/4, -pi/4, 0, pi/3, pi/2, pi];
 %!  y = sin (x);
 %!  idx = min (abs (bsxfun (@minus, x(:), nan_locs)), [], 2);
 %!  y(idx < 1e-10) = NaN;
 %!endfunction
 
 %!test
-%! [q, err, npoints] = quadcc ("__nansin", -pi, pi);
-%! assert (q, 0, 1e-6);
+%! [q, err, npoints] = quadcc ("__nansin", -pi, pi, [0, 1e-6]);
+%! assert (q, 0, -1e-6);
 %! assert (err, 0, 15*eps);
 
 ## Test input validation
 %!error (quadcc ())
 %!error (quadcc (@sin))
 %!error (quadcc (@sin, 0))
-%!error (quadcc (@sin, ones (2), pi))
-%!error (quadcc (@sin, -i, pi))
-%!error (quadcc (@sin, 0, ones (2)))
-%!error (quadcc (@sin, 0, i))
-%!error (quadcc (@sin, 0, pi, 0))
-%!error (quadcc (@sin, 0, pi, 1e-6, [ i ]))
+%!error <lower limit .* must be a .* scalar> (quadcc (@sin, ones (2), pi))
+%!error <lower limit .* must be a real scalar> (quadcc (@sin, -i, pi))
+%!error <upper limit .* must be a .* scalar> (quadcc (@sin, 0, ones (2)))
+%!error <upper limit .* must be a real scalar> (quadcc (@sin, 0, i))
+%!error <TOL must be a 1- or 2-element vector> (quadcc (@sin, 0, pi, {1}))
+%!error <TOL must be a 1- or 2-element vector> (quadcc (@sin, 0, pi, [1,2,3]))
+%!error <absolute tolerance must be .=0> (quadcc (@sin, 0, pi, -1))
+%!error <relative tolerance must be .=0> (quadcc (@sin, 0, pi, [1, -1]))
+%!error <SING.* must be .* real values> (quadcc (@sin, 0, pi, 1e-6, [ i ]))
 */
