# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380773205 25200
#      Wed Oct 02 21:06:45 2013 -0700
# Node ID 4f57d4de0383adb7c9b55c3cf9a67b1252e7e3f7
# Parent  8a186cd5b9a6b1788faf3d1afbd94eeb38ee9f29
legend.m: Implement correct listener for DisplayName on line objects.

* scripts/plot/legend.m: Change updateline callback to accept a new
input "update_name".  Based on input_name, either rebuild legend strings
or just adjust linestyle properties of legend labels.

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -361,46 +361,47 @@ function [hleg, hleg_obj, hplot, labels]
     text_strings = {};
 
     if (have_labels)
       ## Check for valid data that can be labeled.
       have_data = false;
       have_dname = false;
       for k = 1 : nkids
         typ = get (kids(k), "type");
-        if (strcmp (typ, "line") || strcmp (typ, "surface")
-            || strcmp (typ, "patch") || strcmp (typ, "hggroup"))
+        if (any (strcmp (typ, {"line", "patch", "surface", "hggroup"})))
           have_data = true;
           break;
         endif
       endfor
 
       if (! have_data)
         warning ("legend: plot data is empty; setting key labels has no effect");
       endif
     else
       ## No labels.  Search for DisplayName property.
       have_dname = false;
       for k = 1 : nkids
         hkid = kids(k);
         typ = get (hkid, "type");
-        if (strcmp (typ, "line") || strcmp (typ, "surface")
-            || strcmp (typ, "patch"))
+        if (any (strcmp (typ, {"line", "patch", "surface"})))
           if (! isempty (get (hkid, "displayname")))
             have_dname = true;
             break;
           endif
         elseif (strcmp (typ, "hggroup"))
           hgkids = get (hkid, "children");
           for j = 1 : length (hgkids)
-            hgobj = get (hgkids(j));
-            if (isfield (hgobj, "displayname") && ! isempty (hgobj.displayname))
-              have_dname = true;
-              break;  # break from j-loop over hgkids
-            endif
+            try
+              dname = get (hgkids(j), "DisplayName");
+              if (! isempty (dname));
+                have_dname = true;
+                toc
+                break;  # break from j-loop over hgkids
+              endif
+            end_try_catch
           endfor
           if (have_dname)
             break;  # break from k loop over nkids
           endif
         endif  # elseif hggroup
       endfor   # for loop k = 1 : nkids
     endif      # else branch of if (have_labels)
 
@@ -412,40 +413,39 @@ function [hleg, hleg_obj, hplot, labels]
         have_labels = true;
         nargs = nkids;
       endif
       for i = 1 : nargs
         arg = varargin{i};
         if (ischar (arg))
           typ = get (kids(k), "type");
           while (k > 0
-                 && ! (strcmp (typ, "line") || strcmp (typ, "surface")
-                       || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
+                 && ! any (strcmp (typ, {"line","patch","surface","hggroup"})))
             typ = get (kids(--k), "type");
           endwhile
           if (k > 0)
             if (strcmp (get (kids(k), "type"), "hggroup"))
               hgkids = get (kids(k), "children");
               for j = 1 : length (hgkids)
                 hgobj = get (hgkids(j));
                 if (isfield (hgobj, "displayname"))
                   if (have_labels)
                     set (hgkids(j), "displayname", arg);
                   endif
-                  hplots = [hplots, hgkids(j)];
-                  text_strings = {text_strings{:}, arg};
+                  hplots(end+1) = hgkids(j);
+                  text_strings(end+1) = arg;
                   break;
                 endif
               endfor
             else
               if (have_labels)
                 set (kids(k), "displayname", arg);
               endif
-              hplots = [hplots, kids(k)];
-              text_strings = {text_strings{:}, arg};
+              hplots(end+1) = kids(k);
+              text_strings(end+1) = arg;
             endif
 
             if (--k == 0)
               break;
             endif
           else
             break;  # k = 0, no further handles to process
           endif
@@ -457,40 +457,38 @@ function [hleg, hleg_obj, hplot, labels]
         warning ("legend: ignoring extra labels");
       endif
     else
       ## No labels specified but objects have DisplayName property set.
       k = nkids;
       while (k > 0)
         typ = get (kids(k), "type");
         while (k > 1
-               && ! (strcmp (typ, "line") || strcmp (typ, "surface")
-                     || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
+               && ! any (strcmp (typ, {"line","patch","surface","hggroup"})))
           typ = get (kids(--k), "type");
         endwhile
-        if (! (strcmp (typ, "line") || strcmp (typ, "surface")
-               || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
+        if (! any (strcmp (typ, {"line","patch","surface","hggroup"})))
           break;
         endif
         if (k > 0)
           if (strcmp (get (kids(k), "type"), "hggroup"))
             hgkids = get (kids(k), "children");
             for j = 1 : length (hgkids)
               hgobj = get (hgkids(j));
               if (isfield (hgobj, "displayname")
                   && ! isempty (hgobj.displayname))
-                hplots = [hplots, hgkids(j)];
-                text_strings = {text_strings{:}, hgobj.displayname};
+                hplots(end+1) = hgkids(j);
+                text_strings(end+1) = hgobj.displayname;
                 break;
               endif
             endfor
           else
             if (! isempty (get (kids(k), "displayname")))
-              hplots = [hplots, kids(k)];
-              text_strings = {text_strings{:}, get(kids(k), "displayname")};
+              hplots(end+1) = kids(k);
+              text_strings(end+1) = get (kids(k), "displayname");
             endif
           endif
           if (--k == 0)
             break;
           endif
         endif
       endwhile
     endif
@@ -579,18 +577,20 @@ function [hleg, hleg_obj, hplot, labels]
           hlegend = axes ("tag", "legend", "userdata", struct ("handle", ud),
                           "box", box,
                           "xtick", [], "ytick", [],
                           "xlim", [0, 1], "ylim", [0, 1],
                           "visible", ifelse (strcmp (box, "on"), "on", "off"),
                           "activepositionproperty", "position",
                           "interpreter", "tex");
           ## Inherit properties from current axis
-          ## "fontunits" shoud be first because it affects interpretation of "fontsize"
-          proplist = {"fontunits", "fontangle", "fontname", "fontsize", "fontweight"};
+          ## "fontunits" shoud be first because it affects interpretation
+          ## of "fontsize" property
+          proplist = {"fontunits", "fontangle", "fontname", "fontsize", ...
+                      "fontweight"};
           ca_props = get (ca(1), proplist); 
           set (hlegend, proplist, ca_props);
         else
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
         endif
         if (addprops)
@@ -618,26 +618,26 @@ function [hleg, hleg_obj, hplot, labels]
         textcolor = get (hlegend, "textcolor");
         ## Add text label to the axis first, checking their extents
         nentries = numel (hplots);
         texthandle = [];
         maxwidth = 0;
         maxheight = 0;
         for k = 1 : nentries
           halign = ifelse (strcmp (textpos, "right"), "left", "right");
-          texthandle = [texthandle, text(0, 0, text_strings{k},
-                                               "userdata", hplots(k),
-                                               "color", textcolor,
-                                               "horizontalalignment", halign,
-                                               "interpreter", interpreter,
-                                               "fontunits", fontunits,
-                                               "fontangle", fontangle,
-                                               "fontname", fontname,
-                                               "fontsize", fontsize,
-                                               "fontweight", fontweight)];,
+          texthandle(end+1) = text (0, 0, text_strings{k},
+                                    "color", textcolor,
+                                    "horizontalalignment", halign,
+                                    "interpreter", interpreter,
+                                    "fontunits", fontunits,
+                                    "fontangle", fontangle,
+                                    "fontname", fontname,
+                                    "fontsize", fontsize,
+                                    "fontweight", fontweight,
+                                    "userdata", hplots(k));
           units = get (texthandle(end), "units");
           unwind_protect
             set (texthandle(end), "units", "points");
             extents = get (texthandle(end), "extent");
             maxwidth = max (maxwidth, extents(3));
             maxheight = max (maxheight, extents(4));
           unwind_protect_cleanup
             set (texthandle(end), "units", units);
@@ -708,19 +708,19 @@ function [hleg, hleg_obj, hplot, labels]
           ## This implies that a change in fontsize should trigger a listener
           ## to update the legend.  The "2" was determined using a long legend
           ## key in the absence of any subplots.
           gnuplot_offset = gnuplot_offset - 2 * fontsize;
         else
           gnuplot_offset = 0;
         endif
 
-        ## For legend's outside the associated axes postion, align their edge
-        ## to the unmodified_axes_outerpostion, and adjust the axes postion
-        ## accordingly.
+        ## For legend's outside the associated axes postion,
+        ## align their edge to the unmodified_axes_outerpostion,
+        ## and adjust the axes postion accordingly.
         switch (location)
           case "north"
             if (outside)
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_outpos(2) + ca_outpos(4) - lpos(4) - ypad, lpos(3), ...
                       lpos(4)];
 
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3), ca_pos(4) - lpos(4)];
@@ -819,77 +819,82 @@ function [hleg, hleg_obj, hplot, labels]
         unwind_protect_cleanup
           set (hlegend, "units", units);
         end_unwind_protect
 
         ## Now write the line segments and place the text objects correctly
         xk = 0;
         yk = 0;
         for k = 1 : numel (hplots)
-          hobjects = [hobjects, texthandle(k)];
+          hobjects(end+1) = texthandle(k);
           switch (get (hplots(k), "type"))
 
             case "line"
               color = get (hplots(k), "color");
               style = get (hplots(k), "linestyle");
               if (! strcmp (style, "none"))
                 l1 = line ("xdata", ([xoffset, xoffset + linelength] + xk * xstep) / lpos(3),
                            "ydata", [1, 1] .* (lpos(4) - yoffset - yk * ystep) / lpos(4),
-                           "color", color, "linestyle", style, "marker", "none",
-                           "userdata", hplots (k));
-                hobjects = [hobjects, l1];
+                           "color", color, "linestyle", style,
+                           "marker", "none",
+                           "userdata", hplots(k));
+                hobjects(end+1) = l1;
               endif
               marker = get (hplots(k), "marker");
               if (! strcmp (marker, "none"))
                 l1 = line ("xdata", (xoffset + 0.5 * linelength  + xk * xstep) / lpos(3),
                            "ydata", (lpos(4) - yoffset - yk * ystep) / lpos(4),
-                           "color", color, "linestyle", "none", "marker", marker,
-                           "markeredgecolor", get (hplots (k), "markeredgecolor"),
-                           "markerfacecolor", get (hplots (k), "markerfacecolor"),
-                           "markersize", get (hplots (k), "markersize"),
-                           "userdata", hplots (k));
-                hobjects = [hobjects, l1];
+                           "color", color, "linestyle", "none",
+                           "marker", marker,
+                           "markeredgecolor",get (hplots(k), "markeredgecolor"),
+                           "markerfacecolor",get (hplots(k), "markerfacecolor"),
+                           "markersize", get (hplots(k), "markersize"),
+                           "userdata", hplots(k));
+                hobjects(end+1) = l1;
               endif
 
-              addlistener (hplots(k), "color",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "linestyle",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "marker",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "markeredgecolor",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "markerfacecolor",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "markersize",
-                           {@updateline, hlegend, linelength});
-              addlistener (hplots(k), "displayname",
-                           {@updateline, hlegend, linelength});
+              if (addprops)
+                addlistener (hplots(k), "color",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "linestyle",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "marker",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "markeredgecolor",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "markerfacecolor",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "markersize",
+                             {@updateline, hlegend, linelength, false});
+                addlistener (hplots(k), "displayname",
+                             {@updateline, hlegend, linelength, true});
+              endif
 
             case "patch"
               facecolor = get (hplots(k), "facecolor");
               edgecolor = get (hplots(k), "edgecolor");
               cdata = get (hplots(k), "cdata");
               if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
                 p1 = patch ("xdata", ([0, linelength, linelength, 0] +
                                       xoffset + xk * xstep) / lpos(3),
                             "ydata", (lpos(4) - yoffset -
                                       [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
                            "facecolor", facecolor, "edgecolor", edgecolor,
                            "cdata", cdata, "userdata", hplots(k));
-                hobjects = [hobjects, p1];
+                hobjects(end+1) = p1;
               endif
 
             case "surface"
               ## FIXME: Would be nice to do something here
 
           endswitch
 
-          set (texthandle(k), "position", [(txoffset + xk * xstep) / lpos(3), ...
-                                           (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
+          set (texthandle(k), "position",
+                              [(txoffset + xk * xstep) / lpos(3), ...
+                               (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
           if (strcmp (orientation, "vertical"))
             yk++;
             if (yk > num1)
               yk = 0;
               xk++;
             endif
           else
             xk++;
@@ -906,30 +911,30 @@ function [hleg, hleg_obj, hplot, labels]
                  "handlevisibility", "off", "visible", "off", ...
                  "xliminclude", "off", "yliminclude", "off"};
         t1 = findall (ca(1), "tag", "legend", "type", "text");
         if (isempty (t1))
           t1 = text (0, 0, "", props{:});
           set (t1, "deletefcn", {@deletelegend1, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
-          set (hlegend, "unmodified_axes_position", unmodified_axes_position);
-          set (hlegend, "unmodified_axes_outerposition",
-               unmodified_axes_outerposition);
+          set (hlegend, "unmodified_axes_position",
+                         unmodified_axes_position,
+                        "unmodified_axes_outerposition",
+                         unmodified_axes_outerposition);
         else
           addproperty ("unmodified_axes_position", hlegend,
                        "data", unmodified_axes_position);
           addproperty ("unmodified_axes_outerposition", hlegend,
                        "data", unmodified_axes_outerposition);
         endif
 
-        ## Resize the axis that the legend is attached to if the
-        ## legend is "outside" the plot and create a listener to
-        ## resize axis to original size if the legend is deleted,
-        ## hidden, or shown.
+        ## Resize the axis that the legend is attached to if the legend is
+        ## "outside" the plot and create a listener to resize axis to original
+        ## size if the legend is deleted, hidden, or shown.
         if (outside)
           for i = 1 : numel (ca)
             units = get (ca(i), "units");
             unwind_protect
               set (ca(i), "units", "points");
               if (gnuplot && numel (ca) == 1)
                 ## Let Gnuplot handle the positioning of the keybox.
                 ## This violates strict Matlab compatibility, but reliably
@@ -952,17 +957,17 @@ function [hleg, hleg_obj, hplot, labels]
           addlistener (hlegend, "visible", {@hideshowlegend, ca, ...
                                             unmodified_axes_position, ...
                                             new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
         if (! addprops)
-          ## Remove listener's on existing legend temporarily
+          ## Remove listeners on existing legend temporarily to stop recursion.
           dellistener (hlegend, "location");
           dellistener (hlegend, "orientation");
           dellistener (hlegend, "string");
           dellistener (hlegend, "textposition");
         endif
 
         if (! addprops)
           set (hlegend, "string", text_strings);
@@ -970,16 +975,17 @@ function [hleg, hleg_obj, hplot, labels]
 
         if (outside)
           set (hlegend, "location", [location "outside"],
                         "orientation", orientation, "textposition", textpos);
         else
           set (hlegend, "location", location, "orientation", orientation,
                         "textposition", textpos);
         endif
+
         if (addprops)
           addlistener (hlegend, "edgecolor", @updatelegendtext);
           addlistener (hlegend, "fontangle", @updatelegendtext);
           addlistener (hlegend, "fontname", @updatelegendtext);
           addlistener (hlegend, "fontweight", @updatelegendtext);
           addlistener (hlegend, "textcolor", @updatelegendtext);
           ## Properties which could change size of box, such as fontsize,
           ## require legend to be redrawn.
@@ -1017,17 +1023,17 @@ endfunction
 
 function updatelegend (h, ~)
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
     unwind_protect
       hax = getfield (get (h, "userdata"), "handle");
-      [hplots, text_strings] = __getlegenddata__ (h);
+      [hplots, ~] = __getlegenddata__ (h);
       position = get (h, "unmodified_axes_position");
       outerposition = get (h, "unmodified_axes_outerposition");
       units = get (hax, "units");
       set (hax, "units", "points");
       switch (get (hax, "activepositionproperty"))
         case "position"
           set (hax, "outerposition", outerposition);
           set (hax, "position", position);
@@ -1123,72 +1129,54 @@ function deletelegend2 (h, ~, ca, pos, o
       dellistener (hplots(i), "markeredgecolor");
       dellistener (hplots(i), "markerfacecolor");
       dellistener (hplots(i), "markersize");
       dellistener (hplots(i), "displayname");
     endif
   endfor
 endfunction
 
-function updateline (h, ~, hlegend, linelength)
-
-  lm = [];
-  ll = [];
-  kids = get (hlegend, "children");
-  for i = 1 : numel (kids)
-    if (get (kids(i), "userdata") == h
-        && strcmp (get (kids(i), "type"), "line"))
-      if (strcmp (get (kids(i), "marker"), "none"))
-        ll = kids(i);
-      else
-        lm = kids(i);
-      endif
-    endif
-  endfor
-
-  [linestyle, marker, displayname] = ...
-    get (h, {"linestyle", "marker", "displayname"}){:};
+function updateline (h, ~, hlegend, linelength, update_name)
 
-  if ((isempty (displayname)
-       || (strcmp (marker, "none") && strcmp (linestyle, "none")))
-       && (! isempty (lm) || isempty (ll)))
-    ## An element was removed from the legend.
-    ## Need to call the legend function to re-create a new legend.
+  if (update_name)
+    ## When string changes, have to rebuild legend completely
     [hplots, text_strings] = __getlegenddata__ (hlegend);
-    idx = (hplots == h);
-    hplots(idx) = [];
-    text_strings(idx) = [];
-    legend (hplots, text_strings);
-  elseif ((! isempty (displayname)
-           && (! strcmp (marker, "none") || ! strcmp (linestyle, "none")))
-          && isempty (lm) && isempty (ll))
-    ## An element was added to the legend.
-    ## Need to call the legend function to re-create a new legend.
-    ## legend function to recreate a new legend.
-    [hplots, text_strings] = __getlegenddata__ (hlegend);
-    hplots(end+1) = h;
-    text_strings(end+1) = displayname;
     legend (hplots, text_strings);
   else
+    kids = get (hlegend, "children");
+    ll = lm = [];
+    for i = 1 : numel (kids)
+      if (get (kids(i), "userdata") == h
+          && strcmp (get (kids(i), "type"), "line"))
+        if (strcmp (get (kids(i), "marker"), "none"))
+          ll = kids(i);
+        else
+          lm = kids(i);
+        endif
+      endif
+    endfor
+
+    [linestyle, marker, displayname] = ...
+      get (h, {"linestyle", "marker", "displayname"}){:};
+
     if (! isempty (ll))
-      ypos1 = get (ll,"ydata");
-      xpos1 = get (ll,"xdata");
+      [xpos1, ypos1] = get (ll, {"xdata", "ydata"}){:};
+      xpos2 = sum (xpos1) / 2;
       ypos2 = ypos1(1);
-      xpos2 = sum (xpos1) / 2;
       delete (ll);
       if (! isempty (lm))
         delete (lm);
       endif
     else
-      ypos2 = get (lm,"ydata");
-      xpos2 = get (lm,"xdata");
+      [xpos2, ypos2] = get (lm, {"xdata", "ydata"}){:};
+      xpos1 = xpos2 + [-0.5, 0.5] * linelength;
       ypos1 = [ypos2, ypos2];
-      xpos1 = xpos2 + [-0.5, 0.5] * linelength;
       delete (lm);
     endif
+
     if (! strcmp (linestyle, "none"))
       line ("xdata", xpos1, "ydata", ypos1, "color", get (h, "color"),
             "linestyle", get (h, "linestyle"), "marker", "none",
             "userdata", h, "parent", hlegend);
     endif
     if (! strcmp (marker, "none"))
       line ("xdata", xpos2, "ydata", ypos2, "color", get (h, "color"),
             "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
