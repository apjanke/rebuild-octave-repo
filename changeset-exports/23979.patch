# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504208025 14400
#      Thu Aug 31 15:33:45 2017 -0400
# Node ID fb9b024a6041d9c431a8f66ccd42dc2cedbed2d1
# Parent  665507c3c29dad2180d65059af3fb1f49c2bd276
avoid SIGABRT on exit from the GUI (bug #50210)

* main-window.h, main-window.cc (octave_finished_signal): New signal.
(handle_octave_finished): New slot.  Terminate and wait for main
thread here, then call QApplication::exit.
(octave_interpreter::execute): Emit octave_finished_signal here
instead of calling QApplication::exit.
(main_window::main_window): Connext octave_finished_signal to
handle_octave_finished slot.
(main_window::~main_window): If m_main_thread is not finished,
terminate and wait for it before deleting it.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -133,17 +133,17 @@ octave_interpreter::execute (void)
       exit_status = ex.exit_status ();
     }
 
   // Whether or not initialization succeeds we need to clean up the
   // interpreter once we are done with it.
 
   m_app_context->delete_interpreter ();
 
-  qApp->exit (exit_status);
+  emit octave_finished_signal (exit_status);
 }
 
 void
 octave_interpreter::interrupt (void)
 {
   thread_manager.interrupt ();
 }
 
@@ -209,16 +209,19 @@ main_window::main_window (QWidget *p, oc
   construct ();
 
   connect (m_interpreter, SIGNAL (octave_ready_signal ()),
            this, SLOT (handle_octave_ready ()));
 
   connect (m_interpreter, SIGNAL (octave_ready_signal ()),
            doc_browser_window, SLOT (load_info_file ()));
 
+  connect (m_interpreter, SIGNAL (octave_finished_signal (int)),
+           this, SLOT (handle_octave_finished (int)));
+
   m_interpreter->moveToThread (m_main_thread);
 
   m_main_thread->start ();
 }
 
 main_window::~main_window (void)
 {
   // Destroy the terminal first so that STDERR stream is redirected back
@@ -230,17 +233,28 @@ main_window::~main_window (void)
   delete workspace_window;
   delete doc_browser_window;
   delete file_browser_window;
   delete history_window;
   delete status_bar;
   delete _workspace_model;
   delete variable_editor_window;
   delete m_interpreter;
+
+  // We are supposed to arrive here after the main thread is done, but
+  // if that doesn't happen for some reason, then terminate and wait
+  // before deleting it.
+  if (! m_main_thread->isFinished ())
+    {
+      m_main_thread->terminate ();
+      // FIXME: should there be a limit on how long we wait?
+      m_main_thread->wait ();
+    }
   delete m_main_thread;
+
   if (find_files_dlg)
     {
       delete find_files_dlg;
       find_files_dlg = nullptr;
     }
   if (release_notes_window)
     {
       delete release_notes_window;
@@ -1887,17 +1901,28 @@ main_window::handle_octave_ready ()
       // must be known for the lexer's auto completion informations
       editor_window->empty_script (true, false);
       editor_window->restore_session (settings);
 #endif
     }
 
   if (_start_gui)
     focus_command_window ();  // make sure that the command window has focus
-
+}
+
+void
+main_window::handle_octave_finished (int exit_status)
+{
+  // The main thread is done, so we can terminate it and wait for it to
+  // finish.
+  m_main_thread->terminate ();
+  // FIXME: should there be a limit on how long we wait?
+  m_main_thread->wait ();
+
+  qApp->exit (exit_status);
 }
 
 void
 main_window::construct_octave_qt_link (void)
 {
   _octave_qt_link = new octave_qt_link (this, m_app_context);
 
   octave_link::connect_link (_octave_qt_link);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -76,16 +76,17 @@ public:
 
   ~octave_interpreter (void) = default;
 
   void interrupt (void);
 
 signals:
 
   void octave_ready_signal ();
+  void octave_finished_signal (int);
 
 public slots:
 
   // Initialize and execute the octave interpreter.
 
   void execute (void);
 
 private:
@@ -241,16 +242,17 @@ public slots:
   void handle_create_filedialog (const QStringList& filters,
                                  const QString& title, const QString& filename,
                                  const QString& dirname,
                                  const QString& multimode);
 
   void handle_show_doc (const QString& file);
 
   void handle_octave_ready ();
+  void handle_octave_finished (int);
 
   // find files dialog
   void find_files (const QString& startdir = QDir::currentPath ());
   void find_files_finished (int);
 
   // setting global shortcuts
   void set_global_shortcuts (bool enable);
 
