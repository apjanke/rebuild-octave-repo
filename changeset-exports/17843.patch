# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383545945 18000
#      Mon Nov 04 01:19:05 2013 -0500
# Node ID 573f865aa8c8caf66f8b8032f86cca23f4ceaa8d
# Parent  7533f4482006d402dec30cae9c881a1944ea8f9e
use gnulib frexp module

* bootstrap.conf (gnulib_modules): Include frexp and frexpf.
* lo-mappers.cc (xlog2): Use gnulib::frexp.
* oct-inttypes.h (dblesplit): Use gnulib::frexp.
* data.cc (Feps): Use gnulib::frexp.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -33,16 +33,18 @@ gnulib_modules="
   fflush
   filemode
   float
   floor
   floorf
   fnmatch
   fopen
   fpucw
+  frexp
+  frexpf
   fseek
   ftell
   getcwd
   gethostname
   getopt-gnu
   gettimeofday
   glob
   isatty
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4168,17 +4168,17 @@ either @qcode{\"double\"} or @qcode{\"si
                   float val = ::fabsf (x(i));
                   if (xisnan (val) || xisinf (val))
                     epsval(i) = lo_ieee_nan_value ();
                   else if (val < std::numeric_limits<float>::min ())
                     epsval(i) = powf (2.0, -149e0);
                   else
                     {
                       int expon;
-                      frexpf (val, &expon);
+                      gnulib::frexpf (val, &expon);
                       epsval(i) = std::pow (static_cast <float> (2.0),
                                             static_cast <float> (expon - 24));
                     }
                 }
               retval = epsval;
             }
         }
       else
@@ -4194,17 +4194,17 @@ either @qcode{\"double\"} or @qcode{\"si
                   double val = ::fabs (x(i));
                   if (xisnan (val) || xisinf (val))
                     epsval(i) = lo_ieee_nan_value ();
                   else if (val < std::numeric_limits<double>::min ())
                     epsval(i) = pow (2.0, -1074e0);
                   else
                     {
                       int expon;
-                      frexp (val, &expon);
+                      gnulib::frexp (val, &expon);
                       epsval(i) = std::pow (static_cast <double> (2.0),
                                             static_cast <double> (expon - 53));
                     }
                   retval = epsval;
                 }
             }
         }
     }
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -131,17 +131,17 @@ xexp2 (double x)
 
   return exp (x * ln2);
 #endif
 }
 
 double
 xlog2 (double x, int& exp)
 {
-  return frexp (x, &exp);
+  return gnulib::frexp (x, &exp);
 }
 
 Complex
 xlog2 (const Complex& x, int& exp)
 {
   double ax = std::abs (x);
   double lax = xlog2 (ax, exp);
   return (ax != lax) ? (x / ax) * lax : x;
@@ -360,17 +360,17 @@ xexp2 (float x)
 
   return exp (x * ln2);
 #endif
 }
 
 float
 xlog2 (float x, int& exp)
 {
-  return frexpf (x, &exp);
+  return gnulib::frexpf (x, &exp);
 }
 
 FloatComplex
 xlog2 (const FloatComplex& x, int& exp)
 {
   float ax = std::abs (x);
   float lax = xlog2 (ax, exp);
   return (ax != lax) ? (x / ax) * lax : x;
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -375,17 +375,17 @@ umul128 (uint64_t x, uint64_t y, uint32_
   w[3] = a;
 }
 
 // Splits a double into bool sign, unsigned 64-bit mantissa and int exponent
 static void
 dblesplit (double x, bool& sign, uint64_t& mtis, int& exp)
 {
   sign = x < 0; x = fabs (x);
-  x = frexp (x, &exp);
+  x = gnulib::frexp (x, &exp);
   exp -= 52;
   mtis = static_cast<uint64_t> (ldexp (x, 52));
 }
 
 // Gets a double number from a
 // 32-bit unsigned integer mantissa, exponent, and sign.
 static double
 dbleget (bool sign, uint32_t mtis, int exp)
