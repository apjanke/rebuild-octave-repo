# HG changeset patch
# User jwe
# Date 1173394703 0
#      Thu Mar 08 22:58:23 2007 +0000
# Node ID 566343604d9525118f9cf8b4201ca2690994b2c6
# Parent  e4d3e9bddff3a892165b468b4d244632804625fe
[project @ 2007-03-08 22:58:22 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2007-03-08  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mxArray_octave_value::set_dimensions,
+	mxArray_octave_value::set_m, mxArray_octave_value::set_n, 
+	mxArray_octave_value::set_class_name,
+	mxArray_octave_value::set_ir, mxArray_octave_value::set_jc,
+	mxArray_octave_value::remove_field,
+	mxArray_octave_value::set_field_by_number):
+	Don't panic; request mutation instead.
+	(class mxArray_octave_value): 
+
+	* mxarray.h (mxArray::set_m, mxArray::set_n,
+	mxArray::set_dimensions): Wrap method call call with
+	DO_VOID_MUTABLE_METHOD.
+
 2007-03-08  David Bateman  <dbateman@free.fr>
 
 	* data.cc (do_cat): Ignore leading empty matrices.
 
 2007-03-07  Bob Weigel  <rweigel@gmu.edu>
 
 	* urlwrite.cc (urlget): Allow URL redirects.
 
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -355,23 +355,23 @@ public:
   int get_number_of_dimensions (void) const
   {
     // Force dims and ndims to be cached.
     get_dimensions ();
 
     return ndims;
   }
 
-  void set_m (int /*m*/) { panic_impossible (); }
-
-  void set_n (int /*n*/) { panic_impossible (); }
+  void set_m (int /*m*/) { request_mutation (); }
+
+  void set_n (int /*n*/) { request_mutation (); }
 
   void set_dimensions (int */*dims_arg*/, int /*ndims_arg*/)
   {
-    panic_impossible ();
+    request_mutation ();
   }
 
   int get_number_of_elements (void) const { return val.numel (); }
 
   int is_empty (void) const { return val.is_empty (); }
 
   mxClassID get_class_id (void) const
   {
@@ -427,26 +427,26 @@ public:
 	std::string s = val.class_name ();
 	class_name = strsave (s.c_str ());
       }
 
     return class_name;
   }
 
   // Not allowed.
-  void set_class_name (const char */*name_arg*/) { panic_impossible (); }
+  void set_class_name (const char */*name_arg*/) { request_mutation (); }
 
   mxArray *get_cell (int /*idx*/) const
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
-  void set_cell (int /*idx*/, mxArray */*val*/) { panic_impossible (); }
+  void set_cell (int /*idx*/, mxArray */*val*/) { request_mutation (); }
 
   double get_scalar (void) const { return val.scalar_value (true); }
 
   void *get_data (void) const
   {
     void *retval = 0;
 
     if (is_char ()
@@ -466,20 +466,20 @@ public:
       retval = 0;
     else
       request_mutation ();
 
     return retval;
   }
 
   // Not allowed.
-  void set_data (void */*pr*/) { panic_impossible (); }
+  void set_data (void */*pr*/) { request_mutation (); }
 
   // Not allowed.
-  void set_imag_data (void */*pi*/) { panic_impossible (); }
+  void set_imag_data (void */*pi*/) { request_mutation (); }
 
   int *get_ir (void) const
   {
 #if SIZEOF_OCTAVE_IDX_TYPE == SIZEOF_INT
     return val.mex_get_ir ();
 #else
     request_mutation ();
     return 0;
@@ -494,44 +494,44 @@ public:
     request_mutation ();
     return 0;
 #endif
   }
 
   int get_nzmax (void) const { return val.nzmax (); }
 
   // Not allowed.
-  void set_ir (int */*ir*/) { panic_impossible (); }
+  void set_ir (int */*ir*/) { request_mutation (); }
 
   // Not allowed.
-  void set_jc (int */*jc*/) { panic_impossible (); }
+  void set_jc (int */*jc*/) { request_mutation (); }
 
   // Not allowed.
-  void set_nzmax (int /*nzmax*/) { panic_impossible (); }
+  void set_nzmax (int /*nzmax*/) { request_mutation (); }
 
   // Not allowed.
   int add_field (const char */*key*/)
   {
-    panic_impossible ();
-    return -1;
+    request_mutation ();
+    return 0;
   }
 
   // Not allowed.
-  void remove_field (int /*key_num*/) { panic_impossible (); }
+  void remove_field (int /*key_num*/) { request_mutation (); }
 
   mxArray *get_field_by_number (int /*index*/, int /*key_num*/) const
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void set_field_by_number (int /*index*/, int /*key_num*/, mxArray */*val*/)
   {
-    panic_impossible ();
+    request_mutation ();
   }
 
   int get_number_of_fields (void) const { return val.nfields (); }
 
   const char *get_field_name_by_number (int /*key_num*/) const
   {
     request_mutation ();
     return 0;
diff --git a/src/mxarray.h b/src/mxarray.h
--- a/src/mxarray.h
+++ b/src/mxarray.h
@@ -207,21 +207,21 @@ public:
   virtual int get_m (void) const { return rep->get_m (); }
 
   virtual int get_n (void) const { return rep->get_n (); }
 
   virtual int *get_dimensions (void) const { return rep->get_dimensions (); }
 
   virtual int get_number_of_dimensions (void) const { return rep->get_number_of_dimensions (); }
 
-  virtual void set_m (int m) { rep->set_m (m); }
+  virtual void set_m (int m) { DO_VOID_MUTABLE_METHOD (set_m (m)); }
 
-  virtual void set_n (int n) { rep->set_n (n); }
+  virtual void set_n (int n) { DO_VOID_MUTABLE_METHOD (set_n (n)); }
 
-  virtual void set_dimensions (int *dims_arg, int ndims_arg) { rep->set_dimensions (dims_arg, ndims_arg); }
+  virtual void set_dimensions (int *dims_arg, int ndims_arg) { DO_VOID_MUTABLE_METHOD (set_dimensions (dims_arg, ndims_arg)); }
 
   virtual int get_number_of_elements (void) const { return rep->get_number_of_elements (); }
 
   virtual int is_empty (void) const { return get_number_of_elements () == 0; }
 
   const char *get_name (void) const { return name; }
 
   void set_name (const char *name_arg);
