# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1447879473 18000
#      Wed Nov 18 15:44:33 2015 -0500
# Node ID 4a25c398ffa2d745c901d50202adf83c2bdc446c
# Parent  7b608fadc6639bf8329b492e0a0acfdc5518c551
configure option to build with address sanitizer (bugg #46449)

* common.mk (WARN_LDFLAGS, ADDRESS_SANITIZER_OPTIONS): New variables.
(do_subst_script_vals): Substitute ADDRESS_SANITIZER_OPTIONS.
* configure.ac (GCC_ADDRESS_SANITIZER_FLAGS,
GXX_ADDRESS_SANITIZER_FLAGS, LD_ADDRESS_SANITIZER_FLAGS):
New flags to optionally add to WARN_CFLAGS, WARN_CXXFLAGS, and
WARN_LDFLAGS.
(--enable-address-sanitizer-flags): New option.
(WARN_LDFLAGS): Substitute new variable and display it in summary.
* libgui/module.mk, config-module.awk, libinterp/module.mk,
liboctave/module.mk, src/module.mk: Add WARN_LDFLAGS to linker options.
* run-octave.in: Handle address sanitizer environment variable.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -138,16 +138,17 @@ AM_CXXFLAGS = $(XTRA_CXXFLAGS)
 BUILD_CXX = @BUILD_CXX@
 BUILD_CXXFLAGS = @BUILD_CXXFLAGS@
 
 # Linker and library flags
 
 LD_CXX = @LD_CXX@
 LD_STATIC_FLAG = @LD_STATIC_FLAG@
 LIBFLAGS = -L$(top_builddir)
+WARN_LDFLAGS = @WARN_LDFLAGS@
 #ALL_LDFLAGS = $(LIBFLAGS) $(LD_STATIC_FLAG) $(CPICFLAG) $(LDFLAGS)
 
 BUILD_LDFLAGS = @BUILD_LDFLAGS@
 
 SH_LD = @SH_LD@
 SH_LDFLAGS = @SH_LDFLAGS@
 
 DL_LD = @DL_LD@
@@ -313,16 +314,20 @@ Z_CPPFLAGS = @Z_CPPFLAGS@
 Z_LDFLAGS = @Z_LDFLAGS@
 Z_LIBS = @Z_LIBS@
 
 # Miscellaneous
 
 USE_64_BIT_IDX_T = @USE_64_BIT_IDX_T@
 OCTAVE_IDX_TYPE = @OCTAVE_IDX_TYPE@
 
+if AMCOND_ADDRESS_SANITIZER_ENABLED
+  ADDRESS_SANITIZER_OPTIONS="symbolize=1"
+endif
+
 # The arguments passed to configure.
 config_opts = @config_opts@
 
 CONFIG_SUBDIRS = @subdirs@
 
 # ==================== Where To Install Things ====================
 
 # The default location for installation.  Everything is placed in
@@ -879,16 +884,17 @@ define do_subst_default_vals
   $(simple_move_if_change_rule)
 endef
 
 define do_subst_script_vals
   $(SED) < $< \
     -e "s|%AWK%|${AWK}|g" \
     -e "s|%FIND%|${FIND}|g" \
     -e "s|%SED%|${SED}|g" \
+    -e "s|%ADDRESS_SANITIZER_OPTIONS%|${ADDRESS_SANITIZER_OPTIONS}|g" \
     -e "s|%abs_top_srcdir%|${abs_top_srcdir}|" \
     -e "s|%builddir%|$(shell pwd)|" > $@-t && \
   $(simple_move_if_change_rule)
 endef
 
 define do_subst_qt_settings
   $(SED) < $< \
     -e "s|%DEFAULT_TERMINAL_FONT%|${DEFAULT_TERMINAL_FONT}|" \
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2459,17 +2459,16 @@ if test $ENABLE_DOCS = yes; then
   fi
 fi
 AM_CONDITIONAL([AMCOND_BUILD_DOCS], [test $ENABLE_DOCS = yes])
 
 ### Maybe add -Wall, -W, and -Wshadow to compiler flags now that we're
 ### done feature testing.
 
 GCC_EXTRA_FLAGS="-Wall -W -Wshadow -Wformat -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings -Wcast-align -Wcast-qual"
-
 GXX_EXTRA_FLAGS="-Wall -W -Wshadow -Wold-style-cast -Wformat -Wpointer-arith -Wwrite-strings -Wcast-align -Wcast-qual"
 
 try_extra_warning_flags=yes
 
 AC_ARG_ENABLE([extra-warning-flags],
   [AS_HELP_STRING([--disable-extra-warning-flags],
     [don't add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = no; then
@@ -2486,17 +2485,16 @@ if test $try_extra_warning_flags = yes; 
   for flag in $GXX_EXTRA_FLAGS; do
     OCTAVE_CXX_FLAG([$flag], [
       WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
   done
 fi
 
 GCC_STRICT_FLAGS="-Wconversion"
-
 GXX_STRICT_FLAGS="-Wconversion -Weffc++"
 
 try_strict_warning_flags=no
 
 AC_ARG_ENABLE([strict-warning-flags],
   [AS_HELP_STRING([--enable-strict-warning-flags],
     [add extra strict warning options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = yes; then
@@ -2512,18 +2510,55 @@ if test $try_strict_warning_flags = yes;
   done
   for flag in $GXX_STRICT_FLAGS; do
     OCTAVE_CXX_FLAG([$flag], [
       WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
   done
 fi
 
+GCC_ADDRESS_SANITIZER_FLAGS="-fsanitize=address -fno-omit-frame-pointer"
+GXX_ADDRESS_SANITIZER_FLAGS="-fsanitize=address -fno-omit-frame-pointer"
+LD_ADDRESS_SANITIZER_FLAGS="-fsanitize=address"
+
+try_address_sanitizer_flags=no
+
+AC_ARG_ENABLE([address-sanitizer-flags],
+  [AS_HELP_STRING([--enable-address-sanitizer-flags],
+    [add extra -fsanitize=address and -fno-omit-frame-pointer options to CFLAGS, CXXFLAGS, and LDFLAGS])],
+  [if test "$enableval" = yes; then
+     try_address_sanitizer_flags=yes
+   fi],
+  [])
+
+AM_CONDITIONAL([AMCOND_ADDRESS_SANITIZER_ENABLED],
+  [test $try_address_sanitizer_flags = yes])
+
+if test $try_address_sanitizer_flags = yes; then
+  for flag in $GCC_ADDRESS_SANITIZER_FLAGS; do
+    OCTAVE_CC_FLAG([$flag], [
+      WARN_CFLAGS="$WARN_CFLAGS $flag";
+      AC_MSG_RESULT([adding $flag to WARN_CFLAGS])])
+  done
+  for flag in $GXX_ADDRESS_SANITIZER_FLAGS; do
+    OCTAVE_CXX_FLAG([$flag], [
+      WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
+      AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
+  done
+  dnl FIXME: do we really need an LD-specific test, or is this good enough?
+  for flag in $LD_ADDRESS_SANITIZER_FLAGS; do
+    OCTAVE_CC_FLAG([$flag], [
+      WARN_LDFLAGS="$WARN_LDFLAGS $flag";
+      AC_MSG_RESULT([adding $flag to WARN_LDFLAGS])])
+  done
+fi
+
 AC_SUBST(WARN_CFLAGS)
 AC_SUBST(WARN_CXXFLAGS)
+AC_SUBST(WARN_LDFLAGS)
 
 ### Check for Java.
 
 build_java=yes
 AC_ARG_ENABLE([java],
   [AS_HELP_STRING([--disable-java],
     [disable Java interface])],
   [if test "$enableval" = no; then
@@ -3017,16 +3052,17 @@ Octave is now configured for $canonical_
   Source directory:            $srcdir
   Installation prefix:         $prefix
   C compiler:                  $CC $XTRA_CFLAGS $WARN_CFLAGS $CFLAGS
   C++ compiler:                $CXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
   Fortran compiler:            $F77 $FFLAGS
   Fortran libraries:           $FLIBS
   Lex libraries:               $LEXLIB
   LIBS:                        $LIBS
+  Extra LDFLAGS:               $WARN_LDFLAGS
 
   AMD CPPFLAGS:                $AMD_CPPFLAGS
   AMD LDFLAGS:                 $AMD_LDFLAGS
   AMD libraries:               $AMD_LIBS
   ARPACK CPPFLAGS:             $ARPACK_CPPFLAGS
   ARPACK LDFLAGS:              $ARPACK_LDFLAGS
   ARPACK libraries:            $ARPACK_LIBS
   BLAS libraries:              $BLAS_LIBS
diff --git a/libgui/module.mk b/libgui/module.mk
--- a/libgui/module.mk
+++ b/libgui/module.mk
@@ -58,17 +58,18 @@ libgui_liboctgui_revision = 0
 libgui_liboctgui_age = 0
 
 libgui_liboctgui_version_info = $(libgui_liboctgui_current):$(libgui_liboctgui_revision):$(libgui_liboctgui_age)
 
 libgui_liboctgui_la_LDFLAGS = \
   -version-info $(libgui_liboctgui_version_info) \
   $(NO_UNDEFINED_LDFLAG) \
   -bindir $(bindir) \
-  $(LIBOCTGUI_LINK_OPTS)
+  $(LIBOCTGUI_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 octetc_DATA += libgui/default-qt-settings
 
 octlocale_DATA += $(LOCALES)
 
 libgui/default-qt-settings: libgui/default-qt-settings.in | libgui/$(octave_dirstamp)
 	$(AM_V_GEN)$(do_subst_qt_settings)
 
diff --git a/libinterp/dldfcn/config-module.awk b/libinterp/dldfcn/config-module.awk
--- a/libinterp/dldfcn/config-module.awk
+++ b/libinterp/dldfcn/config-module.awk
@@ -59,14 +59,14 @@ BEGIN {
                 basename, cppflags[i]);
         printf ("libinterp_dldfcn_%s_la_CPPFLAGS = $(libinterp_liboctinterp_la_CPPFLAGS) %s\n",
                 basename, cppflags[i]);
       }
     printf ("libinterp_dldfcn_%s_la_CFLAGS = $(libinterp_liboctinterp_la_CFLAGS) %s\n",
             basename, cppflags[i]);
     printf ("libinterp_dldfcn_%s_la_CXXFLAGS = $(libinterp_liboctinterp_la_CXXFLAGS) %s\n",
             basename, cppflags[i]);
-    printf ("libinterp_dldfcn_%s_la_LDFLAGS = -avoid-version -module $(NO_UNDEFINED_LDFLAG) %s $(OCT_LINK_OPTS)\n",
+    printf ("libinterp_dldfcn_%s_la_LDFLAGS = -avoid-version -module $(NO_UNDEFINED_LDFLAG) %s $(OCT_LINK_OPTS) $(WARN_LDFLAGS)\n",
             basename, ldflags[i]);
     printf ("libinterp_dldfcn_%s_la_LIBADD = $(DLD_LIBOCTINTERP_LIBADD) liboctave/liboctave.la %s $(OCT_LINK_DEPS)\n",
             basename, libraries[i]);
   }
 }
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -182,17 +182,18 @@ libinterp_liboctinterp_revision = 0
 libinterp_liboctinterp_age = 0
 
 libinterp_liboctinterp_version_info = $(libinterp_liboctinterp_current):$(libinterp_liboctinterp_revision):$(libinterp_liboctinterp_age)
 
 libinterp_liboctinterp_la_LDFLAGS = \
   -version-info $(libinterp_liboctinterp_version_info) \
   $(NO_UNDEFINED_LDFLAG) \
   -bindir $(bindir) \
-  $(LIBOCTINTERP_LINK_OPTS)
+  $(LIBOCTINTERP_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 ## Section for defining and creating DEF_FILES
 
 ULT_DIST_SRC := \
   $(filter-out $(GENERATED_PARSER_FILES), $(DIST_SRC)) $(ULT_PARSER_SRC)
 
 SRC_DEF_FILES := $(shell $(srcdir)/libinterp/find-defun-files.sh "$(srcdir)" $(ULT_DIST_SRC))
 
diff --git a/liboctave/module.mk b/liboctave/module.mk
--- a/liboctave/module.mk
+++ b/liboctave/module.mk
@@ -79,17 +79,18 @@ liboctave_liboctave_age = 0
 
 liboctave_liboctave_version_info = $(liboctave_liboctave_current):$(liboctave_liboctave_revision):$(liboctave_age)
 
 liboctave_liboctave_la_LDFLAGS = \
   -version-info $(liboctave_liboctave_version_info) \
   $(NO_UNDEFINED_LDFLAG) \
   @XTRA_CRUFT_SH_LDFLAGS@ \
   -bindir $(bindir) \
-  $(LIBOCTAVE_LINK_OPTS)
+  $(LIBOCTAVE_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 ## Rules to build test files
 
 LIBOCTAVE_TST_SRC = \
   $(liboctave_array_libarray_la_SOURCES) \
   $(liboctave_numeric_libnumeric_la_SOURCES) \
   $(liboctave_system_libsystem_la_SOURCES) \
   $(liboctave_util_libutil_la_SOURCES) \
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -18,16 +18,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 : ${AWK=%AWK%}
 : ${FIND=%FIND%}
 : ${SED=%SED%}
+: ${ADDRESS_SANITIZER_OPTIONS="%ADRESS_SANITIZER_OPTIONS%"}
 
 # FIXME -- is there a better way to handle the possibility of spaces
 # in these names?
 
 top_srcdir='%abs_top_srcdir%'
 builddir='%builddir%'
 
 d1="$top_srcdir/scripts"
@@ -92,13 +93,17 @@ fi
 OCTAVE_ARCHLIBDIR="$builddir/src"; export OCTAVE_ARCHLIBDIR
 OCTAVE_BINDIR="$builddir/src"; export OCTAVE_BINDIR
 OCTAVE_DEFAULT_QT_SETTINGS="$builddir/libgui/default-qt-settings"; export OCTAVE_DEFAULT_QT_SETTINGS
 OCTAVE_JAVA_DIR="$builddir/scripts/java"; export OCTAVE_JAVA_DIR
 OCTAVE_LOCALE_DIR="$builddir/libgui/languages"; export OCTAVE_LOCALE_DIR
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/site-rcfile"; export OCTAVE_SITE_INITFILE
 OCTAVE_VERSION_INITFILE="$top_srcdir/scripts/startup/version-rcfile"; export OCTAVE_VERSION_INITFILE
 
+if [ "$ADDRESS_SANITIZER_ENABLED" = yes ]; then
+  ASAN_OPTIONS=symbolize=1; export ASAN_OPTIONS
+fi
+
 exec $builddir/libtool --mode=execute $driver \
   "$octave_executable" --no-init-path --path="$LOADPATH" \
   --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" \
   --built-in-docstrings-file="$BUILT_IN_DOCSTRINGS_FILE" \
   --texi-macros-file="$TEXIMACROSFILE" --info-file="$INFOFILE" "$@"
diff --git a/src/module.mk b/src/module.mk
--- a/src/module.mk
+++ b/src/module.mk
@@ -60,17 +60,18 @@ src_octave_SOURCES = src/display-availab
 src_octave_LDADD = \
   $(top_builddir)/libgnu/libgnu.la \
   $(X11_LIBS) \
   $(CARBON_LIBS) \
   $(GNULIB_LINK_DEPS)
 
 src_octave_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
-  $(OCTAVE_LINK_OPTS)
+  $(OCTAVE_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 if AMCOND_BUILD_GUI
   OCTAVE_CPPFLAGS = -DHAVE_OCTAVE_GUI
 endif
 
 src_octave_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
@@ -82,17 +83,18 @@ src_octave_CXXFLAGS = \
 src_octave_cli_SOURCES = src/main-cli.cc
 
 src_octave_cli_LDADD = \
   $(OCTAVE_CORE_LIBS) \
   $(OCTAVE_LINK_DEPS)
 
 src_octave_cli_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
-  $(OCTAVE_LINK_OPTS)
+  $(OCTAVE_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 src_octave_cli_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
 
 src_octave_cli_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
@@ -109,17 +111,18 @@ src_octave_gui_CPPFLAGS = \
 
 src_octave_gui_LDADD = \
   $(OCTAVE_GUI_LIBS) \
   $(OCTAVE_CORE_LIBS) \
   $(OCTAVE_GUI_LINK_DEPS)
 
 src_octave_gui_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
-  $(OCTAVE_GUI_LINK_OPTS)
+  $(OCTAVE_GUI_LINK_OPTS) \
+  $(WARN_LDFLAGS)
 
 src_octave_gui_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
 
 src_mkoctfile_SOURCES =
 
 nodist_src_mkoctfile_SOURCES = src/mkoctfile.cc
