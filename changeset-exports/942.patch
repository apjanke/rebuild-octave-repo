# HG changeset patch
# User jwe
# Date 785443065 0
#      Mon Nov 21 18:37:45 1994 +0000
# Node ID 8fa3c25ab27102429aaa2f7155025afe7e2a3b79
# Parent  c4827d0fe063506704b83353772e2cc6bf0bae52
[project @ 1994-11-21 18:37:45 by jwe]

diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -216,22 +216,28 @@ idx_vector::init_state (const char *rc, 
 	convert_one_zero_to_idx ();
     }
   else if (min_val < 0)
     {
       ::error ("%s index %d out of range", rc, min_val+1);
       initialized = 0;
       return;
     }
+#if 0
+// Checking max index against size won't work right here unless we
+// also look at resize on range error, and we have to do that later
+// on anyway.
+
   else if (max_val >= z_len)
     {
       ::error ("%s index %d out of range", rc, max_val+1);
       initialized = 0;
       return;
     }
+#endif
 
   initialized = 1;
 }
 
 void
 idx_vector::convert_one_zero_to_idx (void)
 {
   if (num_ones == 0)
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -149,19 +149,25 @@ TC_REP::do_scalar_index (const Octave_ob
 	    if (arg.is_matrix_type ())
 	      {
 		Matrix mj = arg.matrix_value ();
 
 		idx_vector j (mj, user_pref.do_fortran_indexing, "", 1);
 		if (! j)
 		  return retval;
 
+		int jmax = j.max ();
 		int len = j.length ();
 		if (len == j.ones_count ())
 		  cols = len;
+		else if (jmax > 0)
+		  {
+		    error ("invalid scalar index = %d", jmax+1);
+		    return retval;
+		  }
 	      }
 	    else if (arg.const_type () == magic_colon
 		     || (arg.is_scalar_type ()
 			 && NINT (arg.double_value ()) == 1))
 	      {
 		cols = 1;
 	      }
 	    else
@@ -177,34 +183,42 @@ TC_REP::do_scalar_index (const Octave_ob
 	    if (arg.is_matrix_type ())
 	      {
 		Matrix mi = arg.matrix_value ();
 
 		idx_vector i (mi, user_pref.do_fortran_indexing, "", 1);
 		if (! i)
 		  return retval;
 
+		int imax = i.max ();
 		int len = i.length ();
 		if (len == i.ones_count ())
 		  rows = len;
+		else if (imax > 0)
+		  {
+		    error ("invalid scalar index = %d", imax+1);
+		    return retval;
+		  }
 	      }
 	    else if (arg.const_type () == magic_colon
 		     || (arg.is_scalar_type ()
 			 && NINT (arg.double_value ()) == 1))
 	      {
 		rows = 1;
 	      }
 	    else if (arg.is_scalar_type ()
 		     && NINT (arg.double_value ()) == 0)
 	      {
 		return Matrix ();
 	      }
 	    else
 	      break;
 
+// If only one index, cols will not be set.
+
 	    if (cols == 0)
 	      {
 		if (user_pref.prefer_column_vectors)
 		  cols = 1;
 		else
 		  {
 		    cols = rows;
 		    rows = 1;
