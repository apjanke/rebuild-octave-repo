# HG changeset patch
# User Markus Mützel <markus.muetzel@gmx.de>
# Date 1527441647 -7200
#      Sun May 27 19:20:47 2018 +0200
# Node ID 922a93fc73ecd9970fdb8628db478a51bca8ceba
# Parent  ad3d018e595f8753e7011e0cd5b83590a8f2e3af
Add function to index characters in UTF-8 encoded strings.

* strfns.cc (Funicode_idx): Add new function.

* unistr-wrappers.(cc/h): Add wrapper for "u8_strmblen".

* strings.txi: UTF-8 as expected encoding. Add doc string for "unicode_idx".

diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -48,16 +48,19 @@ example, the expression
 @example
 [ "foo" , "bar" , "baz" ]
 @end example
 
 @noindent
 produces the string whose contents are @samp{foobarbaz}.  @xref{Numeric Data
 Types}, for more information about creating matrices.
 
+While strings can in principal store arbitrary content, most functions expect
+them to be UTF-8 encoded Unicode strings.
+
 @menu
 * Escape Sequences in String Constants::
 * Character Arrays::
 * Creating Strings::
 * Comparing Strings::
 * Manipulating Strings::
 * String Conversions::
 * Character Class Functions::
@@ -463,16 +466,18 @@ general regular expressions, the followi
 @DOCSTRING(regexpi)
 
 @DOCSTRING(regexprep)
 
 @DOCSTRING(regexptranslate)
 
 @DOCSTRING(untabify)
 
+@DOCSTRING(unicode_idx)
+
 @node String Conversions
 @section String Conversions
 
 Octave supports various kinds of conversions between strings and
 numbers.  As an example, it is possible to convert a string containing
 a hexadecimal number to a floating point number.
 
 @example
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #include <cctype>
 
 #include <queue>
 #include <sstream>
 
 #include "dMatrix.h"
 #include "localcharset-wrapper.h"
 #include "uniconv-wrappers.h"
+#include "unistr-wrappers.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ov.h"
 #include "ovl.h"
 #include "unwind-prot.h"
@@ -823,16 +824,70 @@ Convert UTF-8 string @var{utf8_str} to b
   uint8NDArray retval (dim_vector (1, len));
 
   for (octave_idx_type i = 0; i < len; i++)
     retval.xelem(i) = native_bytes[i];
 
   return ovl (retval);
 }
 
+DEFUN (unicode_idx, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {@var{idx} =} unicode_idx (@var{str})
+Return an array with the indices for each UTF-8 encoded character in @var{str}.
+
+@example
+@group
+unicode_idx ("aäbc")
+     @result{} [1, 2, 2, 3, 4]
+@end group
+@end example
+
+@end deftypefn */)
+{
+  int nargin = args.length ();
+
+  if (nargin != 1)
+    print_usage ();
+
+  charNDArray str = args(0).xchar_array_value ("STR must be a string");
+  Array<octave_idx_type> p (dim_vector (str.ndims (), 1));
+  charNDArray str_p;
+  if (str.ndims () > 1)
+  {
+    for (octave_idx_type i=0; i < str.ndims (); i++)
+      p(i) = i;
+    p(0) = 1;
+    p(1) = 0;
+    str_p = str.permute (p);
+  }
+
+  const uint8_t *src = reinterpret_cast<const uint8_t *> (str_p.data ());
+  octave_idx_type srclen = str.numel ();
+
+  NDArray idx (str_p.dims ());
+
+  octave_idx_type u8_char_num = 1;
+  for (octave_idx_type i = 0; i < srclen; u8_char_num++)
+  {
+    int mblen = octave_u8_strmblen_wrapper (src + i);
+    if (mblen < 1)
+      mblen = 1;
+    for (octave_idx_type j = 0; j < mblen; j++)
+      idx (i+j) = u8_char_num;
+    i += mblen;
+  }
+  
+  return ovl(str.ndims () > 1 ? idx.permute (p, true) : idx);
+}
+
+/*
+%!assert (unicode_idx (["aäou"; "Ä∞"]), [1 2 2 3 4; 5 5 6 6 6]);
+*/
+
 DEFUN (list_in_columns, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} list_in_columns (@var{arg}, @var{width}, @var{prefix})
 Return a string containing the elements of @var{arg} listed in columns with
 an overall maximum width of @var{width} and optional prefix @var{prefix}.
 
 The argument @var{arg} must be a cell array of character strings or a
 character array.
diff --git a/liboctave/wrappers/unistr-wrappers.c b/liboctave/wrappers/unistr-wrappers.c
--- a/liboctave/wrappers/unistr-wrappers.c
+++ b/liboctave/wrappers/unistr-wrappers.c
@@ -23,14 +23,20 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "unistr.h"
 
 #include "unistr-wrappers.h"
 
+int
+octave_u8_strmblen_wrapper (const uint8_t *src)
+{
+  return u8_strmblen (src);
+}
+
 uint32_t *
 octave_u8_to_u32_wrapper (const uint8_t *src, size_t src_len,
                           uint32_t *result_buf, size_t *lengthp)
 {
   return u8_to_u32 (src, src_len, result_buf, lengthp);
 }
diff --git a/liboctave/wrappers/unistr-wrappers.h b/liboctave/wrappers/unistr-wrappers.h
--- a/liboctave/wrappers/unistr-wrappers.h
+++ b/liboctave/wrappers/unistr-wrappers.h
@@ -22,16 +22,19 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_unistr_wrappers_h)
 #define octave_unistr_wrappers_h 1
 
 #if defined __cplusplus
 extern "C" {
 #endif
 
+extern int
+octave_u8_strmblen_wrapper (const uint8_t *src);
+
 extern uint32_t *
 octave_u8_to_u32_wrapper (const uint8_t *src, size_t src_len,
                           uint32_t *result_buf, size_t *lengthp);
 
 #if defined __cplusplus
 }
 #endif
 
