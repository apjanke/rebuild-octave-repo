# HG changeset patch
# User jwe
# Date 1145250317 0
#      Mon Apr 17 05:05:17 2006 +0000
# Node ID 7ba9ad1fec11d72a8d72472c866819f068441ffb
# Parent  80409c2defcc16d68460956508a53bb1adf64220
[project @ 2006-04-17 05:05:15 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2006-04-17  John W. Eaton  <jwe@octave.org>
+
+	* mk-opts.pl (emit_print_function): Emit code that uses
+	std::ostringstream directly.
+
 2006-04-13  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (CONST_CAST, DYNAMIC_CAST, REINTERPRET_CAST,
 	STATIC_CAST): Delete.
 
 2006-04-12  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: If using g++, also add -Wold-style-cast to CXXFLAGS.
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -25,25 +25,25 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <climits>
 
 #include <iostream>
+#include <sstream>
 #include <vector>
 
 #include "Array.h"
 #include "Array-flags.h"
 #include "Array-util.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : rep (a.rep), dimensions (dv), idx (0), idx_count (0)
 {
@@ -349,62 +349,58 @@ Array<T>::range_error (const char *fcn, 
   static T foo;
   return foo;
 }
 
 template <class T>
 T
 Array<T>::range_error (const char *fcn, const Array<int>& ra_idx) const
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
     buf << ra_idx(0);
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
-  buf << OSSTREAM_ENDS;
-
-  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
-
-  OSSTREAM_FREEZE (buf);
+  std::string buf_str = buf.str ();
+
+  (*current_liboctave_error_handler) (buf_str.c_str ());
 
   return T ();
 }
 
 template <class T>
 T&
 Array<T>::range_error (const char *fcn, const Array<int>& ra_idx)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
     buf << ra_idx(0);
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
-  buf << OSSTREAM_ENDS;
-
-  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
-
-  OSSTREAM_FREEZE (buf);
+  std::string buf_str = buf.str ();
+
+  (*current_liboctave_error_handler) (buf_str.c_str ());
 
   static T foo;
   return foo;
 }
 
 template <class T>
 Array<T>
 Array<T>::reshape (const dim_vector& new_dims) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,21 @@
 2006-04-16  John W. Eaton  <jwe@octave.org>
 
+	* lo-sstream.h: Delete.
+	* Makefile.in (INCLUDES): Remove it from the list.
+
+	* dim-vector.h (dim_vector::str): Use std::ostringstream directly.
+	* Sparse.cc (Sparse::range_error): Likewise.
+	* DASSL.cc (DASSL::error_message): Likewise.
+	* LSODE.cc (LSODE::error_message): Likewise.
+	* DASRT.cc (DASRT::error_message): Likewise.
+	* DASPK.cc (DASPK::error_message): Likewise.
+	* Array.cc (Array::range_error): Likewise.
+
 	* kpse.cc (kpse_hash): Rename from hash.
 	(hash_lookup): Call kpse_hash instead of hash.
 
 	* SparseType.cc (SparseType::SparseType): Use std::vector<bool>
 	to avoid local array with variable dimension.
 
 2006-04-13  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -23,20 +23,21 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <sstream>
+
 #include "DASPK.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "quit.h"
 
 typedef octave_idx_type (*daspk_fcn_ptr) (const double&, const double*,
 			      const double*, const double&,
 			      double*, octave_idx_type&, double*, octave_idx_type*);
 
 typedef octave_idx_type (*daspk_jac_ptr) (const double&, const double*,
 			      const double*, double*,
@@ -682,20 +683,19 @@ DASPK::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASPK::error_message (void) const
 {
   std::string retval;
 
-  OSSTREAM buf;
-  buf << t << OSSTREAM_ENDS;
-  std::string t_curr = OSSTREAM_STR (buf);
-  OSSTREAM_FREEZE (buf);
+  std::ostringstream buf;
+  buf << t;
+  std::string t_curr = buf.str ();
 
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -23,20 +23,21 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <sstream>
+
 #include "DASRT.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "quit.h"
 
 typedef octave_idx_type (*dasrt_fcn_ptr) (const double&, const double*, const double*,
 			      double*, octave_idx_type&, double*, octave_idx_type*);
 
 typedef octave_idx_type (*dasrt_jac_ptr) (const double&, const double*, const double*,
 			      double*, const double&, double*, octave_idx_type*);
 
@@ -560,20 +561,19 @@ DASRT::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASRT::error_message (void) const
 {
   std::string retval;
 
-  OSSTREAM buf;
-  buf << t << OSSTREAM_ENDS;
-  std::string t_curr = OSSTREAM_STR (buf);
-  OSSTREAM_FREEZE (buf);
+  std::ostringstream buf;
+  buf << t;
+  std::string t_curr = buf.str ();
 
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -23,20 +23,21 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <sstream>
+
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "quit.h"
 
 typedef octave_idx_type (*dassl_fcn_ptr) (const double&, const double*, const double*,
 			      double*, octave_idx_type&, double*, octave_idx_type*);
 
 typedef octave_idx_type (*dassl_jac_ptr) (const double&, const double*, const double*,
 			      double*, const double&, double*, octave_idx_type*);
 
@@ -498,20 +499,19 @@ DASSL::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASSL::error_message (void) const
 {
   std::string retval;
 
-  OSSTREAM buf;
-  buf << t << OSSTREAM_ENDS;
-  std::string t_curr = OSSTREAM_STR (buf);
-  OSSTREAM_FREEZE (buf);
+  std::ostringstream buf;
+  buf << t;
+  std::string t_curr = buf.str ();
 
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -23,20 +23,21 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <sstream>
+
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "quit.h"
 
 typedef octave_idx_type (*lsode_fcn_ptr) (const octave_idx_type&, const double&, double*,
 			      double*, octave_idx_type&);
 
 typedef octave_idx_type (*lsode_jac_ptr) (const octave_idx_type&, const double&, double*,
 			      const octave_idx_type&, const octave_idx_type&, double*, const
 			      octave_idx_type&);
@@ -313,20 +314,19 @@ LSODE::do_integrate (double tout)
   return retval;
 }
 
 std::string
 LSODE::error_message (void) const
 {
   std::string retval;
 
-  OSSTREAM buf;
-  buf << t << OSSTREAM_ENDS;
-  std::string t_curr = OSSTREAM_STR (buf);
-  OSSTREAM_FREEZE (buf);
+  std::ostringstream buf;
+  buf << t;
+  std::string t_curr = buf.str ();
 
   switch (istate)
     {
     case 1:
       retval = "prior to initial integration step";
       break;
 
     case 2:
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -58,17 +58,17 @@ OPTS_INC := $(OPTS_INC_DATA:.in=.h)
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DAERT.h \
 	DAERTFunc.h DASPK.h DASRT.h DASSL.h FEGrid.h \
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h \
 	NLFunc.h NLP.h ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	Objective.h QP.h Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
-	lo-ieee.h lo-mappers.h lo-specfun.h lo-sstream.h \
+	lo-ieee.h lo-mappers.h lo-specfun.h \
 	lo-sysdep.h lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h \
 	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-inttypes.h \
 	oct-passwd.h oct-rand.h oct-rl-edit.h oct-rl-hist.h \
 	oct-shlib.h oct-sort.h oct-spparms.h oct-syscalls.h \
 	oct-sparse.h oct-time.h oct-types.h oct-uname.h \
 	pathlen.h pathsearch.h prog-args.h \
 	randgamma.h randmtzig.h randpoisson.h \
 	so-array.h sparse-sort.h statdefs.h str-vec.h \
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -24,25 +24,25 @@ Boston, MA 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <climits>
 
 #include <iostream>
+#include <sstream>
 #include <vector>
 
 #include "Array.h"
 #include "Array-flags.h"
 #include "Array-util.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "quit.h"
 
 #include "Sparse.h"
 #include "sparse-sort.h"
 #include "oct-spparms.h"
 
 template <class T>
 T&
@@ -674,62 +674,58 @@ Sparse<T>::range_error (const char *fcn,
   static T foo;
   return foo;
 }
 
 template <class T>
 T
 Sparse<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
     buf << ra_idx(0);
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
-
-  buf << OSSTREAM_ENDS;
-
-  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
-
-  OSSTREAM_FREEZE (buf);
+  
+  std::string buf_str = buf.str ();
+
+  (*current_liboctave_error_handler) (buf_str.c_str ());
 
   return T ();
 }
 
 template <class T>
 T&
 Sparse<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
   if (n > 0)
     buf << ra_idx(0);
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
-  buf << OSSTREAM_ENDS;
-
-  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
-
-  OSSTREAM_FREEZE (buf);
+  std::string buf_str = buf.str ();
+
+  (*current_liboctave_error_handler) (buf_str.c_str ());
 
   static T foo;
   return foo;
 }
 
 template <class T>
 Sparse<T>
 Sparse<T>::reshape (const dim_vector& new_dims) const
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -20,19 +20,19 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #if !defined (octave_dim_vector_h)
 #define octave_dim_vector_h 1
 
 #include <cassert>
+#include <sstream>
 #include <string>
 
-#include "lo-sstream.h"
 #include "oct-types.h"
 
 class
 dim_vector
 {
 protected:
 
   class dim_vector_rep
@@ -206,31 +206,27 @@ public:
 
 	if (--old_rep->count <= 0)
 	  delete old_rep;
       }
   }
 
   std::string str (char sep = 'x') const
   {
-    OSSTREAM buf;
+    std::ostringstream buf;
 
     for (int i = 0; i < length (); i++)
       {
 	buf << elem (i);
 
 	if (i < length () - 1)
 	  buf << sep;
       }
 
-    buf << OSSTREAM_ENDS;
-
-    std::string retval = OSSTREAM_STR (buf);
-
-    OSSTREAM_FREEZE (buf);
+    std::string retval = buf.str ();
 
     return retval;
   }
 
   bool all_zero (void) const
   {
     bool retval = true;
 
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -84,17 +84,16 @@ extern "C" {
 #define fopen ln_fopen
 #define rename ln_rename
 #define stat ln_stat
 #endif /* OS2 */
 
 #include "kpse-xfns.h"
 
 #include "lo-error.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "str-vec.h"
 
 /* Header files that essentially all of our sources need, and
    that all implementations have.  We include these first, to help with
    NULL being defined multiple times.  */
 #include <cstdio>
diff --git a/liboctave/lo-sstream.h b/liboctave/lo-sstream.h
deleted file mode 100644
--- a/liboctave/lo-sstream.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
-
-Copyright (C) 2002 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301, USA.
-
-*/
-
-#if !defined (octave_liboctave_sstream_h)
-#define octave_liboctave_sstream_h 1
-
-#if defined (__GNUG__) && __GNUC__ < 3
-#undef HAVE_SSTREAM
-#endif
-
-#ifdef HAVE_SSTREAM
-
-#include <sstream>
-
-#define STRINGSTREAMBUF std::stringbuf
-
-#define ISSTREAM std::istringstream
-
-#define OSSTREAM std::ostringstream
-#define OSSTREAM_STR(os) (os).str ()
-// XXX FIXME XXX -- how long is the temporary created by the str()
-// method guaranteed to exist?
-#define OSSTREAM_C_STR(os) (os).str () . c_str ()
-#define OSSTREAM_ENDS ""
-#define OSSTREAM_FREEZE(os) do { } while (0)
-
-#else
-
-#include <strstream>
-
-#define STRINGSTREAMBUF std::strstreambuf
-
-#define ISSTREAM std::istrstream
-
-#define OSSTREAM std::ostrstream
-#define OSSTREAM_STR(os) std::string ((os).str ())
-#define OSSTREAM_C_STR(os) (os).str ()
-#define OSSTREAM_ENDS std::ends
-#define OSSTREAM_FREEZE(os) do { (os).freeze (false); } while (0)
-
-#endif
-
-#endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -592,17 +592,17 @@ sub emit_print_function
 {
   local ($i);
 
   ## XXX FIXME XXX -- determine the width of the table automatically.
 
   print "static void
 print_${class_name} (void)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << \"\\n\"
       << \"Options for $CLASS include:\\n\\n\"
       << \"  keyword                                             value\\n\"
       << \"  -------                                             -----\\n\";
 
   $struct_name *list = $static_table_name;\n\n";
 
@@ -672,21 +672,17 @@ print_${class_name} (void)
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "  }\n\n";
     }
 
-  print "  buf << OSSTREAM_ENDS;
-
-  print_usage (\"$opt_fcn_name\", true, OSSTREAM_STR (buf));
-
-  OSSTREAM_FREEZE (buf);
+  print "print_usage (\"$opt_fcn_name\", true, buf.str ());
 }\n\n";
 }
 
 sub emit_set_functions
 {
   print "static void
 set_${class_name} (const std::string& keyword, const octave_value& val)
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,63 @@
+2006-04-16  John W. Eaton  <jwe@octave.org>
+
+	* pager.h (octave_diary_buf, octave_pager_buf): Use std:stringbuf
+	directly.
+
+	* ls-mat-ascii.cc (read_mat_ascii_data): Use std::istringstream
+	directly.
+	* load-save.cc (parse_save_options): Likewise.
+	* ls-mat5.cc (read_mat5_binary_element): Likewise.
+	* oct-strstrm.h (octave_istrstream::is): Likewise.
+
+	* __gnuplot_raw__.l (printrange, handle_using, gnuplot::do_open,
+	gnuplot::do_set, gnuplot::do_show, gnuplot::makeplot,
+	gnuplot::handle_title): Use std::ostringstream directly.
+	* toplev.cc (run_command_and_return_output): Likewise.
+	* symtab.h (symbol_table::symbol_table): Likewise.
+	* strfns.cc (Flist_in_columns): Likewise.
+	* pt.cc (tree::str_print_code): Likewise.
+	* parse.y (yyerror, fold, finish_matrix): Likewise. 
+	* pr-output.cc (PRINT_ND_ARRAY, octave_print_internal, Fdisp):	
+	Likewise.
+	* symtab.cc (symbol_table::print_descriptor): Likewise.
+	* ov-list.cc (octave_list::print_raw, octave_list::save_ascii,
+	octave_list::save_binary, octave_list::save_hdf5): Likewise.
+	* ov-fcn-inline.cc (octave_fcn_inline::octave_fcn_inline,
+	octave_fcn_inline::load_ascii, octave_fcn_inline::print_raw,
+	Finline): Likewise.
+	* ov-fcn-handle.cc (octave_fcn_handle::load_ascii,
+	octave_fcn_handle::save_binary, octave_fcn_handle::save_hdf5):
+	Likewise.
+	* ov-cs-list.cc (octave_cs_list::print_raw): Likewise.
+	* ov-cell.cc (octave_cell::print_raw, octave_cell::save_hdf5):
+	Likewise.
+	* oct-strstrm.h (octave_ostrstream::os, octave_ostrstream::str):
+	Likewise.
+	* oct-stream.h (scanf_format_list::buf, printf_format_list::buf):
+	Likewise.
+	* oct-stream.cc (scanf_format_list::scanf_format_list,
+	printf_format_list::printf_format_list,
+	octave_base_stream::do_gets, BEGIN_CHAR_CLASS_CONVERSION, 
+	octave_stream_list::do_list_open_files): Likewise.
+	* ls-oct-ascii.h (extract_keyword): Likewise.
+	* load-save.cc (do_load): Likewise.
+	* lex.l (have_continuation, handle_string): Likewise.
+	* input.cc (get_user_input): Likewise.
+	* dirfns.cc (Fls): Likewise.
+	* error.cc (error_message_buffer, vwarning, verror, pr_where):
+	Likewise.
+	* defun.cc (print_usage): Likewise.
+	* help.cc (display_help_text, Ftype, first_help_sentence):
+	Likewise.
+	* ls-mat5.cc (save_mat5_binary_element): Likewise.
+	* DLD-FUNCTIONS/regexp.cc (octregexp): Likewise.
+	* DLD-FUNCTIONS/fftw_wisdom.cc (Ffftw_wisdom): Likewise.
+
 2006-04-13  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (lex.o parse.o __gnuplot_raw__.o, pic/parse.o
 	pic/__gnuplot_raw__.o):	Omit -Wold-style-cast from CXXFLAGS.
 
 	* ls-mat5.cc (READ_INTEGER_DATA): Allocate local buffer to avoid
 	pointer tricks.
 
diff --git a/src/DLD-FUNCTIONS/fftw_wisdom.cc b/src/DLD-FUNCTIONS/fftw_wisdom.cc
--- a/src/DLD-FUNCTIONS/fftw_wisdom.cc
+++ b/src/DLD-FUNCTIONS/fftw_wisdom.cc
@@ -24,23 +24,24 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #if defined (HAVE_FFTW3)
 #include <fftw3.h>
 #endif
 
+#include <sstream>
+
 #include "defaults.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "file-ops.h"
 #include "gripes.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "oct-obj.h"
 #include "sighandlers.h"
 #include "utils.h"
 
 DEFUN_DLD (fftw_wisdom, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} fftw_wisdom (@var{file}, @var{ow})\n\
@@ -153,17 +154,17 @@ Octave.\n\
       std::string name = file_ops::tempnam ("", "oct-");
 
       if (name.empty ())
 	{
 	  error ("fftw_wisdom: can not open temporary file");
 	  return retval;
 	}
 
-      OSSTREAM cmd_buf; 
+      std::ostringstream cmd_buf; 
       cmd_buf << Vfftw_wisdom_prog << " -n -o \"" << name << "\"";
 
       for (octave_idx_type k = 0; k < m.rows (); k++)
 	{
 	  bool first = true;
 
 	  cmd_buf << " ";
 
@@ -174,24 +175,22 @@ Octave.\n\
 		if (first)
 		  first = false;
 		else
 		  cmd_buf << "x";
 		cmd_buf << NINTbig(m(k,j)) ;
 	      }
 	} 
 
-      cmd_buf << OSSTREAM_ENDS;
-
       volatile octave_interrupt_handler old_interrupt_handler
 	= octave_ignore_interrupts ();
 
-      int status = system (OSSTREAM_C_STR (cmd_buf));
+      std::string cmd_buf_str = cmd_buf.str ();
 
-      OSSTREAM_FREEZE (cmd_buf);
+      int status = system (cmd_buf_str.c_str ());
 
       octave_set_interrupt_handler (old_interrupt_handler);
 
       if (WIFEXITED (status))
 	{
 	  FILE *ifile = fopen (name.c_str (), "r");
 	  if (! fftw_import_wisdom_from_file (ifile))
 	    error ("fftw_wisdom: can not import wisdom from temporary file"); 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -22,16 +22,18 @@ Boston, MA 02110-1301, USA.
 
 // XXX FIXME XXX
 // regexprep should be written as an m-file based on regexp
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <sstream>
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 #include "Cell.h"
 #include "oct-map.h"
@@ -122,17 +124,17 @@ octregexp (const octave_value_list &args
       // name on both sides of the alternative. Also fix that here by replacing
       // name tokens by dummy names, and dealing with the dummy names later.
       
       size_t pos = 0;
       size_t new_pos;
       string_vector named;
       int nnames = 0;
       int inames = 0;
-      OSSTREAM buf;
+      std::ostringstream buf;
       Array<int> named_idx;
 
       while ((new_pos = pattern.find ("(?<",pos)) != NPOS)
 	{
 	  size_t tmp_pos = pattern.find_first_of ('>',new_pos);
 
 	  if (tmp_pos == NPOS)
 	    {
@@ -165,29 +167,29 @@ octregexp (const octave_value_list &args
 	    buf << "(?P<n00" << inames++;
 	  else if (inames < 100)
 	    buf << "(?P<n0" << inames++;
 	  else
 	    buf << "(?P<n" << inames++;
 	  pos = tmp_pos;
 	}
 
-      buf << pattern.substr(pos) << OSSTREAM_ENDS;
+      buf << pattern.substr(pos);
 
       if (error_state)
 	return retval;
 
       // Compile expression
       pcre *re;
       const char *err;
       int erroffset;
-      re = pcre_compile(OSSTREAM_C_STR(buf), 
-			(case_insensitive ? PCRE_CASELESS : 0),
-			&err, &erroffset, NULL);
-      OSSTREAM_FREEZE (buf);
+      std::string buf_str = buf.str ();
+      re = pcre_compile (buf_str.c_str (),
+			 (case_insensitive ? PCRE_CASELESS : 0),
+			 &err, &erroffset, NULL);
     
       if (re == NULL) {
 	error("%s: %s at position %d of expression", nm.c_str(), 
 	      err, erroffset);
 	return retval;
       }
 
       int subpatterns;
diff --git a/src/__gnuplot_raw__.l b/src/__gnuplot_raw__.l
--- a/src/__gnuplot_raw__.l
+++ b/src/__gnuplot_raw__.l
@@ -37,16 +37,17 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <map>
 #include <string>
 #include <fstream>
 #include <iostream>
+#include <sstream>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
@@ -523,17 +524,17 @@ read_until (pred test, int& lasttok) thr
 // Eval the two expressions giving limits of range and print it.
 
 static std::string
 printrange (std::string starts, std::string ends)
 {
   octave_value startv, endv;
   int status;
   std::string s;
-  OSSTREAM range_buf;
+  std::ostringstream range_buf;
 
   range_buf << "[";
 
   if (! starts.empty ())
     {
       startv = eval_string (starts, true, status);
       if (! startv.is_real_scalar ())
 	throw gpt_parse_error ();
@@ -546,19 +547,18 @@ printrange (std::string starts, std::str
       {
 	endv = eval_string (ends, true, status);
 	if (! endv.is_real_scalar ())
 	  throw gpt_parse_error ();
         endv.print_raw (range_buf);
       }
 
     range_buf << "]";
-    range_buf << OSSTREAM_ENDS;
 
-    s = OSSTREAM_STR (range_buf);
+    s = range_buf.str ();
 
     return s;
 }
 
 // Handle plot parameters.
 
 // Parse, evaluate and print colon separated expressions in the using
 // plot parameter. The use of trailing format string is not supported.
@@ -576,20 +576,19 @@ handle_using (int& lasttok)
   while (! out)
     {
       expr_str = read_until (colon_plottok_or_end_p, tok);
 
       tmp_data = eval_string (expr_str, true, status);
       if (status != 0 || ! tmp_data.is_real_scalar ())
 	throw gpt_parse_error ();
 
-      OSSTREAM tmp_buf;
+      std::ostringstream tmp_buf;
       tmp_data.print_raw (tmp_buf);
-      tmp_buf << OSSTREAM_ENDS;
-      retstr += OSSTREAM_STR (tmp_buf);
+      retstr += tmp_buf.str ();
 
       if (tok == COLON)
 	retstr += ":";
       else
 	out = true;
     }
 
   lasttok = tok;
@@ -960,25 +959,21 @@ gnuplot::do_open (void)
       sigprocmask (SIG_BLOCK, &nset, &oset);
 #else
       volatile octave_interrupt_handler old_interrupt_handler
 	= octave_ignore_interrupts ();
 #endif
 
       if (use_title_option)
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
-	  buf << cmd
-	      << " -title \"Figure " << get_current_figure () << "\""
-	      << OSSTREAM_ENDS;
+	  buf << cmd << " -title \"Figure " << get_current_figure () << "\"";
 
-	  cmd = OSSTREAM_STR (buf);
-
-	  OSSTREAM_FREEZE (buf);
+	  cmd = buf.str ();
 	}
 
       plot_stream = new oprocstream (cmd.c_str ());
 
       if (plot_stream && *plot_stream)
 	octave_child_list::insert (plot_stream->pid (),
 				   plot_stream_event_handler);
       else
@@ -1114,71 +1109,66 @@ gnuplot::do_clear (void)
   plot_line_count = 0;
 }
 
 void
 gnuplot::do_set (const string_vector& argv)
 {
   int argc = argv.length ();
 
-  OSSTREAM plot_buf;
+  std::ostringstream plot_buf;
 
   if (argc > 1)
     {
       if (almost_match ("parametric", argv[1], 3))
 	parametric_plot = true;
       else if (almost_match ("noparametric", argv[1], 5))
 	parametric_plot = false;
       else if (almost_match ("term", argv[1], 1))
 	{
 	  gnuplot_terminal_type = "";
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 	  int i;
 	  for (i = 2; i < argc-1; i++)
 	    buf << argv[i] << " ";
 	  if (i < argc)
 	    buf << argv[i];
-	  buf << Vgnuplot_command_end << OSSTREAM_ENDS;
-	  gnuplot_terminal_type = OSSTREAM_STR (buf);
-	  OSSTREAM_FREEZE (buf);
+	  buf << Vgnuplot_command_end;
+	  gnuplot_terminal_type = buf.str ();
 	}
     }
 
   int i;
   for (i = 0; i < argc-1; i++)
     plot_buf << argv[i] << " ";
 
   if (i < argc)
     plot_buf << argv[i];
 
-  plot_buf << Vgnuplot_command_end << OSSTREAM_ENDS;
+  plot_buf << Vgnuplot_command_end;
 
-  do_send_raw (OSSTREAM_STR (plot_buf));
-
-  OSSTREAM_FREEZE (plot_buf);
+  do_send_raw (plot_buf.str ());
 }
 
 void
 gnuplot::do_show (const string_vector& argv)
 {
   int argc = argv.length ();
 
-  OSSTREAM plot_buf;
+  std::ostringstream plot_buf;
 
   int i;
   for (i = 0; i < argc-1; i++)
     plot_buf << argv[i] << " ";
   if (i < argc)
     plot_buf << argv[i];
 
-  plot_buf << Vgnuplot_command_end << OSSTREAM_ENDS;
+  plot_buf << Vgnuplot_command_end;
 
-  do_send (OSSTREAM_STR (plot_buf));
-
-  OSSTREAM_FREEZE (plot_buf);
+  do_send (plot_buf.str ());
 }
 
 void
 gnuplot::do_plot (const string_vector& argv)
 {
   std::string s;
 
   for (int i = 1; i < argv.length (); i++)
@@ -1290,19 +1280,18 @@ gnuplot::makeplot (std::string caller, s
 
 	  int status = 0;
 	  octave_value tmp_data = eval_string (plot_expr_str,
 					       true, status);
 
 	  if (status != 0 || ! tmp_data.is_defined ())
 	    throw gpt_parse_error ();
 
-	  OSSTREAM tmp_buf;
+	  std::ostringstream tmp_buf;
 	  tmp_data.print_raw (tmp_buf);
-	  tmp_buf << OSSTREAM_ENDS;
 
 	  if (tmp_data.is_string ())
 	    {
 	      file = file_ops::tilde_expand (tmp_data.string_value ());
 	      // XXX FIXME XXX -- perhaps should check if the file exists?
 	      outstr += file + " ";
 	    }
 	  else
@@ -1380,20 +1369,20 @@ gnuplot::makeplot (std::string caller, s
 	    default:
 	      tok = 0;
 	      break;
             }
         }
 
         if (! title_set)
 	  {
-            OSSTREAM tmp_buf;
+            std::ostringstream tmp_buf;
             tmp_buf << Vgnuplot_command_title << " \"line "
-                    << plot_line_count << "\" " << OSSTREAM_ENDS;
-            title_str = OSSTREAM_STR (tmp_buf);
+                    << plot_line_count << "\" ";
+            title_str = tmp_buf.str ();
 	    title_set = true;
         }
 
 	// Plot parameters have to be output in this order.
 	if (using_set)
 	  outstr += using_str;
 
 	if (axes_set)
@@ -1436,30 +1425,30 @@ gnuplot::handle_title (int& lasttok)
   title_expr_str += read_until (plottok_or_end_p, tok);
 
   int status;
   octave_value tmp_data = eval_string (title_expr_str, true, status);
 
   if (status != 0 || ! tmp_data.is_defined ())
     throw gpt_parse_error ();
 
-  OSSTREAM tmp_buf;
+  std::ostringstream tmp_buf;
   if (tmp_data.is_string ())
     {
       tmp_buf << '"';
       tmp_data.print_raw (tmp_buf);
-      tmp_buf << '"' << OSSTREAM_ENDS;
+      tmp_buf << '"';
     }
   else
     {
       warning ("line title must be a string");
       tmp_buf << '"' << "line " << plot_line_count << '"';
     }
 
-  retstr += OSSTREAM_STR (tmp_buf);
+  retstr += tmp_buf.str ();
 
   lasttok = tok;
 
   return retstr;
 }
 
 // The static instance of this class is here so that
 // gnuplot::close_all will be called when the .oct file is unloaded.
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -20,16 +20,17 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <sstream>
 #include <iostream>
 #include <string>
 
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "help.h"
 #include "ov.h"
@@ -51,34 +52,30 @@ print_usage (const std::string& nm, bool
   symbol_record *sym_rec = fbi_sym_tab->lookup (nm);
 
   if (sym_rec)
     {
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  buf << "\nInvalid call to " << nm << ".  Correct usage is:\n\n";
 
 	  h = extract_help_from_dispatch (nm) + h;
 
 	  display_help_text (buf, h);
 
 	  buf << extra_msg << "\n";
 
 	  if (! just_usage)
 	    additional_help_message (buf);
 
-	  buf << OSSTREAM_ENDS;
-
-	  defun_usage_message (OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  defun_usage_message (buf.str ());
 	}
     }
   else
     warning ("no usage message found for `%s'", nm.c_str ());
 }
 
 void
 check_version (const std::string& version, const std::string& fcn)
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -26,29 +26,29 @@ 02110-1301, USA.
 #endif
 
 #include <cerrno>
 #include <cstdio>
 #include <cstddef>
 #include <cstdlib>
 #include <cstring>
 
+#include <sstream>
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "glob-match.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
@@ -171,54 +171,46 @@ from system to system.\n\
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("ls");
 
   if (error_state)
     return retval;
 
-  OSSTREAM ls_buf;
+  std::ostringstream ls_buf;
 
   ls_buf << "ls -C ";
   for (int i = 1; i < argc; i++)
     ls_buf << file_ops::tilde_expand (argv[i]) << " ";
 
-  ls_buf << OSSTREAM_ENDS;
-
-  iprocstream *cmd = new iprocstream (OSSTREAM_STR (ls_buf));
-
-  OSSTREAM_FREEZE (ls_buf);
+  iprocstream *cmd = new iprocstream (ls_buf.str ());
 
   unwind_protect::add (cleanup_iprocstream, cmd);
 
   if (cmd && *cmd)
     {
       char ch;
 
-      OSSTREAM output_buf;
+      std::ostringstream output_buf;
 
       for (;;)
 	{
 	  if (cmd->get (ch))
 	    output_buf << ch;
 	  else
 	    break;
 	}
 
-      output_buf << OSSTREAM_ENDS;
-
-      std::string output = OSSTREAM_STR (output_buf);
+      std::string output = output_buf.str ();
 
       if (nargout > 0)
 	retval = output;
       else
 	octave_stdout << output;
-
-      OSSTREAM_FREEZE (output_buf);
     }
   else
     error ("couldn't start process for ls!");
 
   unwind_protect::run ();
 
   return retval;
 }
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -23,20 +23,19 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdarg>
 #include <cstring>
 
+#include <sstream>
 #include <string>
 
-#include "lo-sstream.h"
-
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "utils.h"
 #include "ov.h"
@@ -113,17 +112,17 @@ int buffer_error_messages = 0;
 
 // TRUE means error messages are turned off.
 bool discard_error_messages = false;
 
 // TRUE means warning messages are turned off.
 bool discard_warning_messages = false;
 
 // The message buffer.
-static OSSTREAM *error_message_buffer = 0;
+static std::ostringstream *error_message_buffer = 0;
 
 void
 reset_error_handler (void)
 {
   error_state = 0;
   warning_state = 0;
   buffer_error_messages = 0;
   discard_error_messages = false;
@@ -143,32 +142,30 @@ init_warning_options (const std::string&
 static void
 vwarning (const char *name, const char *id, const char *fmt, va_list args)
 {
   if (discard_warning_messages)
     return;
 
   flush_octave_stdout ();
 
-  OSSTREAM output_buf;
+  std::ostringstream output_buf;
 
   if (name)
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
 
-  output_buf << std::endl << OSSTREAM_ENDS;
+  output_buf << std::endl;
 
   // XXX FIXME XXX -- we really want to capture the message before it
   // has all the formatting goop attached to it.  We probably also
   // want just the message, not the traceback information.
 
-  std::string msg_string = OSSTREAM_STR (output_buf);
-
-  OSSTREAM_FREEZE (output_buf);
+  std::string msg_string = output_buf.str ();
 
   if (! warning_state)
     {
       // This is the first warning in a possible series.
 
       Vlast_warning_id = id;
       Vlast_warning_message = msg_string;
     }
@@ -188,51 +185,49 @@ verror (bool save_last_error, std::ostre
   if (discard_error_messages)
     return;
 
   if (! buffer_error_messages)
     flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
 
-  OSSTREAM output_buf;
+  std::ostringstream output_buf;
 
   if (to_beep_or_not_to_beep_p)
     output_buf << "\a";
 
   if (name)
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
 
-  output_buf << std::endl << OSSTREAM_ENDS;
+  output_buf << std::endl;
 
   // XXX FIXME XXX -- we really want to capture the message before it
   // has all the formatting goop attached to it.  We probably also
   // want just the message, not the traceback information.
 
-  std::string msg_string = OSSTREAM_STR (output_buf);
-
-  OSSTREAM_FREEZE (output_buf);
+  std::string msg_string = output_buf.str ();
 
   if (! error_state && save_last_error)
     {
       // This is the first error in a possible series.
 
       Vlast_error_id = id;
       Vlast_error_message = msg_string;
     }
 
   if (buffer_error_messages)
     {
       std::string tmp = msg_string;
 
       if (! error_message_buffer)
 	{
-	  error_message_buffer = new OSSTREAM;
+	  error_message_buffer = new std::ostringstream ();
 
 	  // XXX FIXME XXX -- this is ugly, but it prevents
 	  //
 	  //   eval ("error (\"msg\")", "error (lasterr ())");
 	  //
 	  // from printing `error: ' twice.  Assumes that the NAME we
 	  // have been given doesn't contain `:'.
 
@@ -412,29 +407,29 @@ pr_where (const char *name, bool print_c
       if (print_code)
 	{
 	  // XXX FIXME XXX -- Note that the column number is probably
 	  // not going to mean much here since the code is being
 	  // reproduced from the parse tree, and we are only showing
 	  // one statement even if there were multiple statements on
 	  // the original source line.
 
-	  OSSTREAM output_buf;
+	  std::ostringstream output_buf;
 
 	  output_buf << std::endl;
 
 	  tree_print_code tpc (output_buf, ">>> ");
 
 	  curr_statement->accept (tpc);
 
-	  output_buf << std::endl << OSSTREAM_ENDS;
+	  output_buf << std::endl;
 
-	  pr_where_1 ("%s", OSSTREAM_C_STR (output_buf));
+	  std::string msg = output_buf.str ();
 
-	  OSSTREAM_FREEZE (output_buf);
+	  pr_where_1 ("%s", msg.c_str ());
 	}
     }
 }
 
 static int
 check_state (const std::string& state)
 {
   // -1: not found
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -25,28 +25,28 @@ 02110-1301, USA.
 #include <config.h>
 #endif
 
 #include <cstdlib>
 #include <cstring>
 
 #include <iostream>
 #include <fstream>
+#include <sstream>
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "file-ops.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "fn-cache.h"
@@ -639,34 +639,31 @@ display_help_text (std::ostream& os, con
 	cols--;
 
       if (cols > 64)
 	cols -= 7;
 
       if (cols > 80)
 	cols = 72;
 
-      OSSTREAM buf;
+      std::ostringstream buf;
 
       buf << "sed -e 's/^[#%][#%]* *//' -e 's/^ *@/@/' | "
 	  << "\"" << Vmakeinfo_prog << "\""
 	  << " -D \"VERSION " << OCTAVE_VERSION << "\""
 	  << " -D \"OCTAVEHOME " << OCTAVE_PREFIX << "\""
 	  << " -D \"TARGETHOSTTYPE " << OCTAVE_CANONICAL_HOST_TYPE << "\""
 	  << " --fill-column " << cols
 	  << " --no-warn"
 	  << " --no-validate"
 	  << " --no-headers"
 	  << " --force"
-	  << " --output \"" << tmp_file_name << "\""
-	  << OSSTREAM_ENDS;
+	  << " --output \"" << tmp_file_name << "\"";
 
-      oprocstream filter (OSSTREAM_STR (buf));
-
-      OSSTREAM_FREEZE (buf);
+      oprocstream filter (buf.str ());
 
       if (filter && filter.is_open ())
 	{
 	  filter << "@macro seealso {args}\n"
 		 << "@sp 1\n"
 		 << "@noindent\n"
 		 << "See also: \\args\\.\n"
                  << "@end macro\n";
@@ -994,39 +991,33 @@ representation.  This problem may be fix
 	      else if (argv[idx] == "-t" || argv[idx] == "-transformed")
 		pr_orig_txt = false;
 	      else
 		break;
 	    }
 
 	  if (idx < argc)
 	    {
-	      OSSTREAM output_buf;
+	      std::ostringstream output_buf;
 
 	      for (int i = idx; i < argc; i++)
 		{
 		  std::string id = argv[i];
 
 		  if (nargout == 0)
 		    do_type (octave_stdout, id, true, quiet, pr_orig_txt);
 		  else
 		    do_type (output_buf, id, false, quiet, pr_orig_txt);
 
 		  if (error_state)
 		    goto abort;
 		}
 
 	      if (nargout != 0)
-		{
-		  output_buf << OSSTREAM_ENDS;
-
-		  retval = OSSTREAM_STR (output_buf);
-
-		  OSSTREAM_FREEZE (output_buf);
-		}
+		retval = output_buf.str ();
 	    }
 	  else
 	    print_usage ("type");
 	}
       else
 	print_usage ("type");
     }
 
@@ -1126,17 +1117,17 @@ first_help_sentence (const std::string& 
   std::string retval;
 
   size_t pos = 0;
 
   if (looks_like_texinfo (h, pos))
     { 
      // Get the parsed help string.
       pos = 0;
-      OSSTREAM os;
+      std::ostringstream os;
       display_help_text (os, h);
       std::string h2 = os.str ();
 
       while (1)
 	{
 	  // Skip leading whitespace and get new line
 	  pos = h2.find_first_not_of ("\n\t ", pos);
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -28,16 +28,17 @@ 02110-1301, USA.
 #endif
 
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
 #include <cassert>
 
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
@@ -557,31 +558,27 @@ get_user_input (const octave_value_list&
 	  if (nm.empty ())
 	    nm = caller->name ();
 
 	  if (curr_statement)
 	    line = curr_statement->line ();
 	}
     }
 
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   if (! nm.empty ())
     {
       buf << "stopped in " << nm;
 
       if (line > 0)
 	buf << " at line " << line;
     }
-    
-  buf << OSSTREAM_ENDS;
 
-  std::string msg = OSSTREAM_STR (buf);
-
-  OSSTREAM_FREEZE (buf);
+  std::string msg = buf.str ();
 
   if (! msg.empty ())
     message ("keyboard", msg.c_str ());
 
   std::string prompt = "debug> ";
 
   if (nargin > 0)
     {
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -32,30 +32,30 @@ 02110-1301, USA.
 %{
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
 
+#include <sstream>
 #include <string>
 #include <stack>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "quit.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 
 // These would be alphabetical, but y.tab.h must be included before
 // oct-gperf.h and y.tab.h must be included after token.h and the tree
 // class declarations.  We can't include y.tab.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
 // times.
 
 #include "Cell.h"
@@ -1778,17 +1778,17 @@ handle_number (void)
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
 // If non-whitespace characters are found before comment
 // characters, return 0.  Otherwise, return 1.
 
 static bool
 have_continuation (bool trailing_comments_ok)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   std::string comment_buf;
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
   int c = 0;
 
@@ -1871,19 +1871,17 @@ have_continuation (bool trailing_comment
 	}
     }
 
   yyunput (c, yytext);
   return false;
 
 cleanup:
 
-  buf << OSSTREAM_ENDS;
-  std::string s = OSSTREAM_STR (buf);
-  OSSTREAM_FREEZE (buf);
+  std::string s = buf.str ();
 
   int len = s.length ();
   while (len--)
     yyunput (s[len], yytext);
 
   return false;
 }
 
@@ -1931,17 +1929,17 @@ eat_continuation (void)
     yyunput (c, yytext);
 
   return retval;
 }
 
 static int
 handle_string (char delim, int text_style)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   int bos_line = input_line_number;
   int bos_col = current_input_column;
 
   int c;
   int escape_pending = 0;
 
   while ((c = yyinput ()) != EOF)
@@ -1989,22 +1987,21 @@ handle_string (char delim, int text_styl
 		  buf << static_cast<char> (c);		    
 		  if (lexer_flags.doing_rawcommand)
 		    buf << static_cast<char> (c);
 		}
 	      else
 		{
 		  std::string s;  
 		  yyunput (c, yytext);
-		  buf << OSSTREAM_ENDS;
+
 		  if (lexer_flags.doing_rawcommand || delim == '\'')
-		    s = OSSTREAM_STR (buf);
+		    s = buf.str ();
 		  else
-		    s = do_string_escapes (OSSTREAM_STR(buf));
-		  OSSTREAM_FREEZE (buf);
+		    s = do_string_escapes (buf.str ());
 
 		  if (text_style && lexer_flags.doing_rawcommand)
 		    s = std::string (1, delim) + s + std::string (1, delim);
 		  else
 		    {
 		      lexer_flags.quote_is_transpose = true;
 		      lexer_flags.convert_spaces_to_comma = true;
 		    }
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -31,28 +31,28 @@ 02110-1301, USA.
 
 #include <cfloat>
 #include <cstring>
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #ifdef HAVE_HDF5
 #include <hdf5.h>
 #endif
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
@@ -439,17 +439,17 @@ do_load (std::istream& stream, const std
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
 	 bool list_only, bool swap, bool verbose,
 	 const string_vector& argv, int argv_idx, int argc, int nargout)
 {
   octave_value retval;
 
   Octave_map retstruct;
 
-  OSSTREAM output_buf;
+  std::ostringstream output_buf;
 
   octave_idx_type count = 0;
 
   for (;;)
     {
       bool global = false;
       octave_value tc;
 
@@ -555,19 +555,17 @@ do_load (std::istream& stream, const std
 		   orig_fname.c_str ());
 
 	  break;
 	}
     }
 
   if (list_only && count)
     {
-      output_buf << OSSTREAM_ENDS;
-      std::string msg = OSSTREAM_STR (output_buf);
-      OSSTREAM_FREEZE (output_buf);
+      std::string msg = output_buf.str ();
 
       if (nargout > 0)
 	retval = msg;
       else
 	octave_stdout << msg;
     }
   else if (! retstruct.empty ())
     retval = retstruct;
@@ -1178,22 +1176,22 @@ parse_save_options (const string_vector 
   return i;
 }
 
 static int
 parse_save_options (const std::string &arg, load_save_format &format, 
 		    bool &append, bool &save_as_floats, 
 		    bool &save_builtins, bool &use_zlib, int start_arg)
 {
-  ISSTREAM is (arg);
+  std::istringstream is (arg);
   std::string str;
   int argc = 0;
   string_vector argv;
   
-  while (!is.eof ())
+  while (! is.eof ())
     {
       is >> str;
       argv.append (str);
       argc++;
     }
 
   return parse_save_options (argv, argc, format, append, save_as_floats, 
 			     save_builtins, use_zlib, start_arg);
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -41,17 +41,16 @@ 02110-1301, USA.
 
 #include <hdf5.h>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -27,24 +27,24 @@ 02110-1301, USA.
 
 #include <cfloat>
 #include <cstring>
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
@@ -246,21 +246,17 @@ read_mat_ascii_data (std::istream& is, c
 	    is.clear (std::ios::badbit);
 	  else
 	    {
 	      double d;
 	      for (octave_idx_type i = 0; i < nr; i++)
 		{
 		  std::string buf = get_mat_data_input_line (is);
 
-#ifdef HAVE_SSTREAM
 		  std::istringstream tmp_stream (buf);
-#else
-		  std::istrstream tmp_stream (buf.c_str ());
-#endif
 
 		  for (octave_idx_type j = 0; j < nc; j++)
 		    {
 		      OCTAVE_QUIT;
 
 		      d = octave_read_double (tmp_stream);
 
 		      if (tmp_stream || tmp_stream.eof ())
diff --git a/src/ls-mat4.cc b/src/ls-mat4.cc
--- a/src/ls-mat4.cc
+++ b/src/ls-mat4.cc
@@ -35,17 +35,16 @@ 02110-1301, USA.
 #include <string>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -29,25 +29,25 @@ 02110-1301, USA.
 
 #include <cfloat>
 #include <cstring>
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
+#include <sstream>
 #include <string>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
@@ -451,17 +451,17 @@ read_mat5_binary_element (std::istream& 
 
 	  int err = uncompress (reinterpret_cast<Bytef *> (const_cast<char *> (outbuf.c_str ())), &destLen, 
 				reinterpret_cast<Bytef *> (inbuf), element_length);
 
 	  if (err != Z_OK)
 	    error ("load: error uncompressing data element");
 	  else
 	    {
-	      ISSTREAM gz_is (outbuf);
+	      std::istringstream gz_is (outbuf);
 	      retval = read_mat5_binary_element (gz_is, filename, 
 						 swap, global, tc);
 	    }
 	}
       else
 	error ("load: error probing size of compressed data element");
 
       return retval;
@@ -1462,35 +1462,34 @@ save_mat5_binary_element (std::ostream& 
   std::string cname = tc.class_name ();
   int max_namelen = (mat7_format ? 63 : 31);
 
 #ifdef HAVE_ZLIB
   if (mat7_format && !compressing)
     {
       bool ret = false;
 
-      OSSTREAM buf;
+      std::ostringstream buf;
 
       // The code seeks backwards in the stream to fix the header. Can't
       // do this with zlib, so use a stringstream.
       ret = save_mat5_binary_element (buf, tc, name, mark_as_global, true,
 				      save_as_floats, true);
 
       if (ret)
 	{
-	  OSSTREAM_FREEZE (buf);
-      
 	  // destLen must be at least 0.1% larger than source buffer 
 	  // + 12 bytes. Reality is it must be larger again than that.
-	  uLongf srcLen = OSSTREAM_STR (buf).length ();
+	  std::string buf_str = buf.str ();
+	  uLongf srcLen = buf_str.length ();
 	  uLongf destLen = srcLen * 101 / 100 + 12; 
 	  OCTAVE_LOCAL_BUFFER (char, out_buf, destLen);
 
 	  if (compress (reinterpret_cast<Bytef *> (out_buf), &destLen, 
-			reinterpret_cast<const Bytef *> (OSSTREAM_C_STR (buf)), srcLen) == Z_OK)
+			reinterpret_cast<const Bytef *> (buf_str.c_str ()), srcLen) == Z_OK)
 	    {
 	      write_mat5_tag (os, miCOMPRESSED, static_cast<int> (destLen)); 
 	      os.write (out_buf, destLen);
 	    }
 	  else
 	    {
 	      error ("save: error compressing data element");
 	      ret = false;
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -28,24 +28,24 @@ 02110-1301, USA.
 #endif
 
 #include <cstring>
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
@@ -115,47 +115,44 @@ extract_keyword (std::istream& is, const
 {
   std::string retval;
 
   char c;
   while (is.get (c))
     {
       if (c == '%' || c == '#')
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 	
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
-	  buf << OSSTREAM_ENDS;
-	  std::string tmp = OSSTREAM_STR (buf);
+	  std::string tmp = buf.str ();
 	  bool match = (tmp.compare (0, strlen (keyword), keyword) == 0);
-	  OSSTREAM_FREEZE (buf);
 
 	  if (match)
 	    {
-	      OSSTREAM value;
+	      std::ostringstream value;
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      if (c != '\n')
 		{
 		  value << c;
 		  while (is.get (c) && c != '\n')
 		    value << c;
 		}
-	      value << OSSTREAM_ENDS;
-	      retval = OSSTREAM_STR (value);
-	      OSSTREAM_FREEZE (value);
+
+	      retval = value.str ();
 	      break;
 	    }
 	  else if (next_only)
 	    break;
 	}
     }
 
   int len = retval.length ();
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -21,19 +21,19 @@ 02110-1301, USA.
 
 */
 
 #if !defined (octave_ls_oct_ascii_h)
 #define octave_ls_oct_ascii_h 1
 
 #include <cfloat>
 
+#include <sstream>
 #include <string>
 
-#include "lo-sstream.h"
 #include "str-vec.h"
 
 // Flag for cell elements
 #define CELL_ELT_TAG "<cell-element>"
 
 // Used when converting Inf to something that gnuplot can read.
 
 #ifndef OCT_RBV
@@ -73,31 +73,29 @@ extract_keyword (std::istream& is, const
   bool status = false;
   value = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '%' || c == '#')
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
-	  buf << OSSTREAM_ENDS;
-	  std::string tmp = OSSTREAM_STR (buf);
+	  std::string tmp = buf.str ();
 	  bool match = (tmp.compare (0, strlen (keyword), keyword) == 0);
-	  OSSTREAM_FREEZE (buf);
 
 	  if (match)
 	    {
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      is.putback (c);
 	      if (c != '\n')
@@ -132,30 +130,28 @@ extract_keyword (std::istream& is, const
   kw = "";
   value = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '%' || c == '#')
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
-	  buf << OSSTREAM_ENDS;
-	  std::string tmp = OSSTREAM_STR (buf);
-	  OSSTREAM_FREEZE (buf);
+	  std::string tmp = buf.str ();
 
 	  for (int i = 0; i < keywords.length (); i++)
 	    {
 	      int match = (tmp == keywords[i]);
 
 	      if (match)
 		{
 		  kw = keywords[i];
diff --git a/src/ls-oct-binary.cc b/src/ls-oct-binary.cc
--- a/src/ls-oct-binary.cc
+++ b/src/ls-oct-binary.cc
@@ -35,17 +35,16 @@ 02110-1301, USA.
 #include <string>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -25,28 +25,28 @@ 02110-1301, USA.
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cstring>
 
 #include <iomanip>
 #include <fstream>
+#include <sstream>
 #include <string>
 
 #include <Array.h>
 #include <Array2.h>
 #include <Array3.h>
 
 #include <Array.cc>
 
 #include "byte-swap.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 #include "quit.h"
 
 #include "error.h"
 #include "input.h"
 #include "oct-stdstrm.h"
 #include "oct-stream.h"
@@ -171,17 +171,17 @@ scanf_format_list::scanf_format_list (co
 
   bool have_more = true;
 
   while (i < n)
     {
       have_more = true;
 
       if (! buf)
-	buf = new OSSTREAM ();
+	buf = new std::ostringstream ();
 
       if (s[i] == '%')
 	{
 	  // Process percent-escape conversion type.
 
 	  process_conversion (s, i, n, width, discard, type, modifier,
 			      num_elts);
 	  have_more = (buf != 0);
@@ -246,21 +246,17 @@ scanf_format_list::~scanf_format_list (v
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
 				    char modifier, int& num_elts,
 				    const std::string& char_class)
 {
   if (buf)
     {
-      *buf << OSSTREAM_ENDS;
-
-      std::string text = OSSTREAM_STR (*buf);
-
-      OSSTREAM_FREEZE (*buf);
+      std::string text = buf->str ();
 
       if (! text.empty ())
 	{
 	  scanf_format_elt *elt
 	    = new scanf_format_elt (text.c_str (), width, discard, type,
 				    modifier, char_class);
 
 	  if (num_elts == list.length ())
@@ -607,17 +603,17 @@ printf_format_list::printf_format_list (
   else
     {
       while (i < n)
 	{
 	  have_more = true;
 
 	  if (! buf)
 	    {
-	      buf = new OSSTREAM ();
+	      buf = new std::ostringstream ();
 	      empty_buf = true;
 	    }
 
 	  switch (s[i])
 	    {
 	    case '%':
 	      {
 		if (empty_buf)
@@ -676,21 +672,17 @@ printf_format_list::~printf_format_list 
 
 void
 printf_format_list::add_elt_to_list (int args, const std::string& flags,
 				     int fw, int prec, char type,
 				     char modifier, int& num_elts)
 {
   if (buf)
     {
-      *buf << OSSTREAM_ENDS;
-
-      std::string text = OSSTREAM_STR (*buf);
-
-      OSSTREAM_FREEZE (*buf);
+      std::string text = buf->str ();
 
       if (! text.empty ())
 	{
 	  printf_format_elt *elt
 	    = new printf_format_elt (text.c_str (), args, fw, prec, flags,
 				     type, modifier);
 
 	  if (num_elts == list.length ())
@@ -972,17 +964,17 @@ octave_base_stream::do_gets (octave_idx_
   err = false;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
-      OSSTREAM buf;
+      std::ostringstream buf;
 
       int c = 0;
       int char_count = 0;
       int newline_stripped = 0;
 
       while (is && (c = is.get ()) != EOF)
 	{
 	  char_count++;
@@ -999,21 +991,17 @@ octave_base_stream::do_gets (octave_idx_
 	  else
 	    buf << static_cast<char> (c);
 
 	  if (max_len > 0 && char_count == max_len)
 	    break;
 	}
 
       if (is.good () || (is.eof () && char_count > 0))
-	{
-	  buf << OSSTREAM_ENDS;
-	  retval = OSSTREAM_STR (buf);
-	  OSSTREAM_FREEZE (buf);
-	}
+	retval = buf.str ();
       else
 	{
 	  err = true;
 
 	  if (is.eof () && char_count == 0)
 	    error (who, "at end of file");
 	  else
 	    error (who, "read error");
@@ -1533,17 +1521,17 @@ do_scanf_conv (std::istream&, const scan
 	  OCTAVE_SCAN (is, *elt, tbuf); \
  \
 	  tbuf[width] = '\0'; \
           tmp = tbuf; \
           delete [] tbuf; \
 	} \
       else \
 	{ \
-	  OSSTREAM buf; \
+	  std::ostringstream buf; \
  \
 	  std::string char_class = elt->char_class; \
  \
 	  int c = EOF; \
  \
 	  if (elt->type == '[') \
 	    { \
 	      while (is && (c = is.get ()) != EOF \
@@ -1555,19 +1543,17 @@ do_scanf_conv (std::istream&, const scan
 	      while (is && (c = is.get ()) != EOF \
 		     && char_class.find (c) == NPOS) \
 		buf << static_cast<char> (c);		     \
 	    } \
  \
 	  if (c != EOF) \
 	    is.putback (c); \
  \
-	  buf << OSSTREAM_ENDS; \
-	  tmp = OSSTREAM_STR (buf); \
-	  OSSTREAM_FREEZE (buf); \
+	  tmp = buf.str (); \
  \
 	  if (tmp.empty ()) \
 	    is.setstate (std::ios::failbit); \
 	} \
     } \
   while (0)
 
 #define FINISH_CHARACTER_CONVERSION() \
@@ -4086,17 +4072,17 @@ octave_stream_list::do_get_info (const o
   return retval;
 }
 
 std::string
 octave_stream_list::do_list_open_files (void) const
 {
   std::string retval;
 
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << "\n"
       << "  number  mode  arch       name\n"
       << "  ------  ----  ----       ----\n";
 
   for (int i = 0; i < curr_len; i++)
     {
       octave_stream os = list(i);
@@ -4109,21 +4095,19 @@ octave_stream_list::do_list_open_files (
 	  << octave_stream::mode_as_string (os.mode ())
 	  << "  "
 	  << std::setw (9)
 	  << oct_mach_info::float_format_as_string (os.float_format ())
 	  << "  "
 	  << os.name () << "\n";
     }
 
-  buf << "\n" << OSSTREAM_ENDS;
-
-  retval = OSSTREAM_STR (buf);
-
-  OSSTREAM_FREEZE (buf);
+  buf << "\n";
+
+  retval = buf.str ();
 
   return retval;
 }
 
 octave_value
 octave_stream_list::do_open_file_numbers (void) const
 {
   Matrix retval (1, curr_len, 0.0);
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -25,21 +25,21 @@ 02110-1301, USA.
 #define octave_octave_stream_h 1
 
 class Matrix;
 class string_vector;
 class octave_value;
 class octave_value_list;
 
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #include "Array.h"
 #include "data-conv.h"
-#include "lo-sstream.h"
 #include "lo-utils.h"
 #include "mach-info.h"
 
 class
 scanf_format_elt
 {
 public:
 
@@ -155,17 +155,17 @@ private:
 
   // Index to current element;
   int curr_idx;
 
   // List of format elements.
   Array<scanf_format_elt*> list;
 
   // Temporary buffer.
-  OSSTREAM *buf;
+  std::ostringstream *buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
 			int& num_elts,
 			const std::string& char_class = std::string ()); 
 
   void process_conversion (const std::string& s, int& i, int n, int& width,
 			   bool& discard, char& type, char& modifier,
 			   int& num_elts);
@@ -287,17 +287,17 @@ private:
 
   // Index to current element;
   int curr_idx;
 
   // List of format elements.
   Array<printf_format_elt*> list;
 
   // Temporary buffer.
-  OSSTREAM *buf;
+  std::ostringstream *buf;
 
   void add_elt_to_list (int args, const std::string& flags, int fw,
 			int prec, char type, char modifier,
  			int& num_elts);
  
   void process_conversion (const std::string& s, int& i, int n,
 			   int& args, std::string& flags, int& fw,
 			   int& prec, char& modifier, char& type,
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -20,18 +20,17 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #if !defined (octave_octave_strstream_h)
 #define octave_octave_strstream_h 1
 
 #include <string>
-
-#include "lo-sstream.h"
+#include <sstream>
 
 #include "oct-stream.h"
 
 class
 octave_base_strstream : public octave_base_stream
 {
 public:
 
@@ -113,17 +112,17 @@ public:
   void clear (void) { is.clear (); }
 
 protected:
 
   ~octave_istrstream (void) { }
 
 private:
 
-  ISSTREAM is;
+  std::istringstream is;
 
   // No copying!
 
   octave_istrstream (const octave_istrstream&);
 
   octave_istrstream& operator = (const octave_istrstream&);
 };
 
@@ -145,37 +144,31 @@ public:
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os.eof (); }
 
   std::istream *input_stream (void) { return 0; }
 
   std::ostream *output_stream (void) { return &os; }
 
-  std::string str (void)
-    {
-      os << OSSTREAM_ENDS;
-      std::string retval = OSSTREAM_STR (os);
-      OSSTREAM_FREEZE (os);
-      return retval;
-    }
+  std::string str (void) { return os.str (); }
 
   std::streambuf *rdbuf (void) { return os ? os.rdbuf () : 0; }
 
   bool bad (void) const { return os.bad (); }
 
   void clear (void) { os.clear (); }
 
 protected:
 
   ~octave_ostrstream (void) { }
 
 private:
 
-  OSSTREAM os;
+  std::ostringstream os;
 
   // No copying!
 
   octave_ostrstream (const octave_ostrstream&);
 
   octave_ostrstream& operator = (const octave_ostrstream&);
 };
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -21,21 +21,21 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
+#include <sstream>
 #include <vector>
 
 #include "Array-util.h"
 #include "byte-swap.h"
-#include "lo-sstream.h"
 #include "lo-utils.h"
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cell.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
@@ -381,24 +381,22 @@ octave_cell::print_raw (std::ostream& os
 	  increment_indent_level ();
 
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    {
 	      for (octave_idx_type i = 0; i < nr; i++)
 		{
 		  OCTAVE_QUIT;
 
-		  OSSTREAM buf;
-		  buf << "[" << i+1 << "," << j+1 << "]" << OSSTREAM_ENDS;
+		  std::ostringstream buf;
+		  buf << "[" << i+1 << "," << j+1 << "]";
 
 		  octave_value val = matrix(i,j);
 
-		  val.print_with_name (os, OSSTREAM_STR (buf));
-
-		  OSSTREAM_FREEZE (buf);
+		  val.print_with_name (os, buf.str ());
 		}
 	    }
 
 	  decrement_indent_level ();
 
 	  indent (os);
 	  os << "}";
 	  newline (os);
@@ -780,20 +778,19 @@ octave_cell::save_hdf5 (hid_t loc_id, co
   H5Sclose (space_hid);
 
   // Recursively add each element of the cell to this group.
 
   Cell tmp = cell_value ();
   
   for (octave_idx_type i = 0; i < dv.numel (); i++)
     {
-      OSSTREAM buf;
-      buf << "_" << i << OSSTREAM_ENDS;
-      std::string s = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::ostringstream buf;
+      buf << "_" << i;
+      std::string s = buf.str ();
 
       if (! add_hdf5_data(data_hid, tmp.elem (i), s.c_str (), "", false,
 			  save_as_floats))
 	{
 	  H5Gclose (data_hid);
 	  return false;
 	}
     }
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -21,18 +21,18 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
+#include <sstream>
 
-#include "lo-sstream.h"
 #include "lo-utils.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cs-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
@@ -68,24 +68,22 @@ octave_cs_list::print_raw (std::ostream&
       indent (os);
       os << "(,";
       newline (os);
 
       increment_indent_level ();
 
       for (octave_idx_type i = 0; i < n; i++)
 	{
-	  OSSTREAM buf;
-	  buf << "[" << i+1 << "]" << OSSTREAM_ENDS;
+	  std::ostringstream buf;
+	  buf << "[" << i+1 << "]";
 
 	  octave_value val = lst(i);
 
-	  val.print_with_name (os, OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  val.print_with_name (os, buf.str ());
 	}
 
       decrement_indent_level ();
 
       indent (os);
       os << ",)";
     }
   else
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -21,16 +21,17 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
+#include <sstream>
 #include <vector>
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "oct-map.h"
 #include "ov-base.h"
@@ -159,17 +160,17 @@ octave_fcn_handle::save_ascii (std::ostr
 bool
 octave_fcn_handle::load_ascii (std::istream& is)
 {
   is >> nm;
 
   if (nm == "@<anonymous>")
     {
       char c;
-      OSSTREAM buf;
+      std::ostringstream buf;
 
       // Skip preceeding newline(s).
       while (is.get (c) && c == '\n')
 	/* do nothing */;
 
       if (is)
 	{
 	  buf << c;
@@ -181,22 +182,19 @@ octave_fcn_handle::load_ascii (std::istr
 	    {
 	      is.get (c);
 	      if (! is)
 		break;
 	      buf << c;
 	    }
 	}
 
-      buf << OSSTREAM_ENDS;
-
       int parse_status;
-      octave_value anon_fcn_handle = eval_string (OSSTREAM_STR (buf), 
-						  true, parse_status);
-      OSSTREAM_FREEZE (buf);
+      octave_value anon_fcn_handle = eval_string (buf.str (), true,
+						  parse_status);
 
       if (parse_status == 0)
 	{
 	  octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
 	  if (fh)
 	    fcn = fh->fcn;
 	  else
 	    return false;
@@ -217,20 +215,19 @@ octave_fcn_handle::load_ascii (std::istr
 bool
 octave_fcn_handle::save_binary (std::ostream& os, bool&)
 {
   FOUR_BYTE_INT tmp = nm.length ();
   os.write (reinterpret_cast<char *> (&tmp), 4);
   os.write (nm.c_str (), nm.length ());
   if (nm == "@<anonymous>")
     {
-      OSSTREAM buf;
+      std::ostringstream buf;
       print_raw (buf, true);
-      std::string stmp = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::string stmp = buf.str ();
       tmp = stmp.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (stmp.c_str (), stmp.length ());
     }
   return true;
 }
 
 bool
@@ -323,20 +320,19 @@ octave_fcn_handle::save_hdf5 (hid_t loc_
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Dclose (data_hid);
 
   if (nm == "@<anonymous>")
     {
-      OSSTREAM buf;
+      std::ostringstream buf;
       print_raw (buf, true);
-      std::string stmp = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::string stmp = buf.str ();
 
       // attach the type of the variable
       H5Tset_size (type_hid, stmp.length () + 1);
       if (type_hid < 0)
 	{
 	  H5Gclose (group_hid);
 	  return false;
 	}
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -24,16 +24,17 @@ Open Source Initiative (www.opensource.o
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <istream>
 #include <iostream>
+#include <sstream>
 #include <vector>
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-inline.h"
@@ -54,35 +55,32 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
 				      const string_vector& a,
 				      const std::string& n)
   : octave_fcn_handle (n), iftext (f), ifargs (a)
 {
   // Form a string representing the function.
 
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   buf << "@(";
 
   for (int i = 0; i < ifargs.length (); i++)
     {
       if (i > 0)
 	buf << ", ";
 
       buf << ifargs(i);
     }
 
-  buf << ") " << iftext << OSSTREAM_ENDS;
+  buf << ") " << iftext;
 
   int parse_status;
-  octave_value anon_fcn_handle = eval_string (OSSTREAM_STR (buf), true,
-					      parse_status);
-
-  OSSTREAM_FREEZE (buf);
+  octave_value anon_fcn_handle = eval_string (buf.str (), true, parse_status);
 
   if (parse_status == 0)
     {
       octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
 
       if (fh)
 	fcn = fh->fcn_val ();
     }
@@ -115,17 +113,17 @@ octave_fcn_inline::load_ascii (std::istr
       ifargs.resize (nargs);
       for (int i = 0; i < nargs; i++)
 	is >> ifargs(i);
       is >> nm;
       if (nm == "0")
 	nm = "";
 
       char c;
-      OSSTREAM buf;
+      std::ostringstream buf;
 
       // Skip preceeding newline(s)
       while (is.get (c) && c == '\n');
 
       if (is)
 	{
 	  buf << c;
 
@@ -135,19 +133,17 @@ octave_fcn_inline::load_ascii (std::istr
 	    {
 	      is.get (c);
 	      if (! is)
 		break;
 	      buf << c;
 	    }
 	}
 
-      buf << OSSTREAM_ENDS;
-      iftext = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      iftext = buf.str ();
 
       octave_fcn_inline tmp (iftext, ifargs, nm);
       fcn = tmp.fcn;
 
       return true;
     }
   else
     return false;
@@ -530,36 +526,35 @@ octave_fcn_inline::print (std::ostream& 
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 octave_fcn_inline::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   if (nm.empty ())
     buf << "f(";
   else
     buf << nm << "(";
 
   for (int i = 0; i < ifargs.length (); i++)
     {
       if (i)
 	buf << ", ";
 
       buf << ifargs(i);
     }
 
-  buf << ") = " << iftext << OSSTREAM_ENDS;
+  buf << ") = " << iftext;
 
-  octave_print_internal (os, OSSTREAM_STR (buf), pr_as_read_syntax,
+  octave_print_internal (os, buf.str (), pr_as_read_syntax,
 			 current_print_indent_level ());
-  OSSTREAM_FREEZE (buf);
 }
 
 octave_value
 octave_fcn_inline::convert_to_str_internal (bool, bool, char type) const
 {
   return octave_value (fcn_text (), type);
 }
 
@@ -677,20 +672,19 @@ If the second argument is an integer @va
 		  if (n >= 0)
 		    {
 		      fargs.resize (n+1);
 
 		      fargs(0) = "x";
 
 		      for (int i = 1; i < n+1; i++)
 			{
-			  OSSTREAM buf;
-			  buf << "P" << i << OSSTREAM_ENDS;
-			  fargs(i) = OSSTREAM_STR (buf);
-			  OSSTREAM_FREEZE (buf);
+			  std::ostringstream buf;
+			  buf << "P" << i;
+			  fargs(i) = buf.str ();
 			}
 		    }
 		  else
 		    {
 		      error ("inline: numeric argument must be nonnegative");
 		      return retval;
 		    }
 		}
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -21,18 +21,18 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
+#include <sstream>
 
-#include "lo-sstream.h"
 #include "lo-utils.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "ov.h"
 #include "ov-list.h"
 #include "unwind-prot.h"
@@ -306,25 +306,23 @@ octave_list::print_raw (std::ostream& os
       indent (os);
       os << "(";
       newline (os);
 
       increment_indent_level ();
 
       for (octave_idx_type i = 0; i < n; i++)
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
-	  buf << "[" << i+1 << "]" << OSSTREAM_ENDS;
+	  buf << "[" << i+1 << "]";
 
 	  octave_value val = data(i);
 
-	  val.print_with_name (os, OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  val.print_with_name (os, buf.str ());
 	}
 
       decrement_indent_level ();
 
       indent (os);
       os << ")";
     }
   else
@@ -544,20 +542,19 @@ octave_list::save_ascii (std::ostream& o
 {
   octave_value_list lst = list_value ();
   os << "# length: " << lst.length () << "\n";
 
   for (int i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
 
-      OSSTREAM buf;
-      buf << "_" << i << OSSTREAM_ENDS;
-      std::string s = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::ostringstream buf;
+      buf << "_" << i;
+      std::string s = buf.str ();
 
       bool b = save_ascii_data (os, lst (i), s.c_str (), infnan_warned, 
 				strip_nan_and_inf, 0, 0);
       
       if (! b)
 	return false;
     }
 
@@ -619,20 +616,19 @@ octave_list::save_binary (std::ostream& 
 
   FOUR_BYTE_INT len = lst.length();
   os.write (reinterpret_cast<char *> (&len), 4);
   
   for (int i = 0; i < lst.length (); i++)
     {
       // should we use lst.name_tags () to label the elements?
 
-      OSSTREAM buf;
-      buf << "_" << i << OSSTREAM_ENDS;
-      std::string s = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::ostringstream buf;
+      buf << "_" << i;
+      std::string s = buf.str ();
 
       // Recurse to print sub-value.
       bool b = save_binary_data (os, lst(i), s.c_str (), "", 0,
 				 save_as_floats);
 	      
       if (! b)
 	return false;
     }
@@ -699,20 +695,19 @@ octave_list::save_hdf5 (hid_t loc_id, co
 
   // recursively add each element of the list to this group
   octave_value_list lst = list_value ();
 
   for (octave_idx_type i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
 
-      OSSTREAM buf;
-      buf << "_" << i << OSSTREAM_ENDS;
-      std::string s = OSSTREAM_STR (buf);
-      OSSTREAM_FREEZE (buf);
+      std::ostringstream buf;
+      buf << "_" << i;
+      std::string s = buf.str ();
 
       bool retval2 = add_hdf5_data (data_hid, lst (i), s.c_str (), "",
 				    false, save_as_floats);
       if (! retval2)
 	break;
     }
 
   H5Gclose (data_hid);
diff --git a/src/pager.h b/src/pager.h
--- a/src/pager.h
+++ b/src/pager.h
@@ -20,31 +20,29 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #if !defined (octave_pager_h)
 #define octave_pager_h 1
 
 #include <iostream>
+#include <sstream>
 #include <string>
 
-#include "lo-sstream.h"
-
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 class
-octave_pager_buf : public STRINGSTREAMBUF
+octave_pager_buf : public std::stringbuf
 {
 public:
 
-  octave_pager_buf (void)
-    : STRINGSTREAMBUF (), diary_skip (0) { }
+  octave_pager_buf (void) : std::stringbuf (), diary_skip (0) { }
 
   void flush_current_contents_to_diary (void);
 
   void set_diary_skip (void);
 
 protected:
 
   int sync (void);
@@ -80,21 +78,21 @@ private:
   // No copying!
 
   octave_pager_stream (const octave_pager_stream&);
 
   octave_pager_stream& operator = (const octave_pager_stream&);
 };
 
 class
-octave_diary_buf : public STRINGSTREAMBUF
+octave_diary_buf : public std::stringbuf
 {
 public:
 
-  octave_diary_buf (void) : STRINGSTREAMBUF () { }
+  octave_diary_buf (void) : std::stringbuf () { }
 
 protected:
 
   int sync (void);
 };
 
 class
 octave_diary_stream : public std::ostream
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -35,24 +35,24 @@ 02110-1301, USA.
 #include <cassert>
 #include <cstdio>
 
 #ifdef YYBYACC
 #include <cstdlib>
 #endif
 
 #include <map>
+#include <sstream>
 
 #include "Cell.h"
 #include "Matrix.h"
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 
 #include "comment-list.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
@@ -1404,17 +1404,17 @@ opt_sep		: // empty
 
 // Generic error messages.
 
 static void
 yyerror (const char *s)
 {
   int err_col = current_input_column - 1;
 
-  OSSTREAM output_buf;
+  std::ostringstream output_buf;
 
   if (reading_fcn_file || reading_script_file)
     output_buf << "parse error near line " << input_line_number
 	       << " of file " << curr_fcn_file_full_name;
   else
     output_buf << "parse error:";
 
   if (s && strcmp (s, "parse error") != 0)
@@ -1437,21 +1437,21 @@ yyerror (const char *s)
 	err_col = len;
 
       for (int i = 0; i < err_col + 3; i++)
 	output_buf << " ";
 
       output_buf << "^";
     }
 
-  output_buf << "\n" << OSSTREAM_ENDS;
-
-  parse_error ("%s", OSSTREAM_C_STR (output_buf));
-
-  OSSTREAM_FREEZE (output_buf);
+  output_buf << "\n";
+
+  std::string msg = output_buf.str ();
+
+  parse_error ("%s", msg.c_str ());
 }
 
 // Error mesages for mismatched end tokens.
 
 static void
 end_error (const char *type, token::end_tok_type ettype, int l, int c)
 {
   static const char *fmt
@@ -1607,27 +1607,23 @@ fold (tree_binary_expression *e)
 		 && (op_type == EXPR_OR || op_type == EXPR_OR_OR)))))
     {
       octave_value tmp = e->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
 
-	  buf << OSSTREAM_ENDS;
-
-	  tc_retval->stash_original_text (OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  tc_retval->stash_original_text (buf.str ());
 
 	  delete e;
 
 	  retval = tc_retval;
 	}
     }
 
   unwind_protect::run_frame ("fold_binary_expression");
@@ -1656,27 +1652,23 @@ fold (tree_unary_expression *e)
   if (op->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
 
-	  buf << OSSTREAM_ENDS;
-
-	  tc_retval->stash_original_text (OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  tc_retval->stash_original_text (buf.str ());
 
 	  delete e;
 
 	  retval = tc_retval;
 	}
     }
 
   unwind_protect::run_frame ("fold_unary_expression");
@@ -1714,27 +1706,23 @@ finish_colon_expression (tree_colon_expr
 	      && (! incr || (incr && incr->is_constant ())))
 	    {
 	      octave_value tmp = e->rvalue ();
 
 	      if (! (error_state || warning_state))
 		{
 		  tree_constant *tc_retval = new tree_constant (tmp);
 
-		  OSSTREAM buf;
+		  std::ostringstream buf;
 
 		  tree_print_code tpc (buf);
 
 		  e->accept (tpc);
 
-		  buf << OSSTREAM_ENDS;
-
-		  tc_retval->stash_original_text (OSSTREAM_STR (buf));
-
-		  OSSTREAM_FREEZE (buf);
+		  tc_retval->stash_original_text (buf.str ());
 
 		  delete e;
 
 		  retval = tc_retval;
 		}
 	    }
 	}
       else
@@ -2813,27 +2801,23 @@ finish_matrix (tree_matrix *m)
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  m->accept (tpc);
 
-	  buf << OSSTREAM_ENDS;
-
-	  tc_retval->stash_original_text (OSSTREAM_STR (buf));
-
-	  OSSTREAM_FREEZE (buf);
+	  tc_retval->stash_original_text (buf.str ());
 
 	  delete m;
 
 	  retval = tc_retval;
 	}
     }
 
   unwind_protect::run_frame ("finish_matrix");
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -27,25 +27,25 @@ 02110-1301, USA.
 
 #include <cfloat>
 #include <cmath>
 #include <cstdio>
 #include <cstring>
 
 #include <iomanip>
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #include "Array-util.h"
 #include "CMatrix.h"
 #include "Range.h"
 #include "cmd-edit.h"
 #include "dMatrix.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-cmplx.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
@@ -1541,33 +1541,29 @@ octave_print_internal (std::ostream& os,
 	      OCTAVE_QUIT; \
  \
               std::string nm = "ans"; \
  \
               if (m > 1) \
                 { \
                   nm += "(:,:,"; \
  \
-                  OSSTREAM buf; \
+		  std::ostringstream buf; \
  \
                   for (int k = 2; k < ndims; k++) \
                     { \
                       buf << ra_idx(k) + 1; \
  \
                       if (k < ndims - 1) \
                         buf << ","; \
                       else \
                         buf << ")"; \
                     } \
  \
-                  buf << OSSTREAM_ENDS; \
- \
-                  nm += OSSTREAM_STR (buf); \
- \
-                  OSSTREAM_FREEZE (buf); \
+                  nm += buf.str (); \
                 } \
  \
               Array<idx_vector> idx (ndims); \
  \
               idx(0) = idx_vector (':'); \
               idx(1) = idx_vector (':'); \
  \
               for (int k = 2; k < ndims; k++) \
@@ -2039,33 +2035,29 @@ octave_print_internal (std::ostream& os,
       for (octave_idx_type i = 0; i < m; i++)
 	{
 	  std::string nm = "ans";
 
 	  if (m > 1)
 	    {
 	      nm += "(:,:,";
 
-	      OSSTREAM buf;
+	      std::ostringstream buf;
 
 	      for (int k = 2; k < ndims; k++)
 		{
 		  buf << ra_idx(k) + 1;
 
 		  if (k < ndims - 1)
 		    buf << ",";
 		  else
 		    buf << ")";
 		}
 
-	      buf << OSSTREAM_ENDS;
-
-	      nm += OSSTREAM_STR (buf);
-
-	      OSSTREAM_FREEZE (buf);
+	      nm += buf.str ();
 	    }
 
 	  Array<idx_vector> idx (ndims);
 
 	  idx(0) = idx_vector (':');
 	  idx(1) = idx_vector (':');
 
 	  for (int k = 2; k < ndims; k++)
@@ -2214,33 +2206,29 @@ octave_print_internal (std::ostream& os,
       octave_idx_type nc = dims(1);
 
       for (octave_idx_type i = 0; i < m; i++)
 	{
 	  if (m > 1)
 	    {
 	      std::string nm = "ans(:,:,";
 
-	      OSSTREAM buf;
+	      std::ostringstream buf;
 
 	      for (int k = 2; k < ndims; k++)
 		{
 		  buf << ra_idx(k) + 1;
 
 		  if (k < ndims - 1)
 		    buf << ",";
 		  else
 		    buf << ")";
 		}
 
-	      buf << OSSTREAM_ENDS;
-
-	      nm += OSSTREAM_STR (buf);
-
-	      OSSTREAM_FREEZE (buf);
+	      nm += buf.str ();
 
 	      os << nm << " =\n\n";
 	    }
 
 	  Array<idx_vector> idx (ndims);
 
 	  idx(0) = idx_vector (':');
 	  idx(1) = idx_vector (':');
@@ -2323,33 +2311,29 @@ octave_print_internal (std::ostream& os,
 	}
 
       for (octave_idx_type i = 0; i < m; i++)
 	{
 	  if (m > 1)
 	    {
 	      std::string nm = "ans(:,:,";
 
-	      OSSTREAM buf;
+	      std::ostringstream buf;
 
 	      for (int k = 2; k < ndims; k++)
 		{
 		  buf << ra_idx(k) + 1;
 
 		  if (k < ndims - 1)
 		    buf << ",";
 		  else
 		    buf << ")";
 		}
 
-	      buf << OSSTREAM_ENDS;
-
-	      nm += OSSTREAM_STR (buf);
-
-	      OSSTREAM_FREEZE (buf);
+	      nm += buf.str ();
 
 	      os << nm << " =\n\n";
 	    }
 
 	  Array<idx_vector> idx (ndims);
 
 	  idx(0) = idx_vector (':');
 	  idx(1) = idx_vector (':');
@@ -2547,21 +2531,19 @@ returns the formatted output in a string
   int nargin = args.length ();
 
   if (nargin == 1 && nargout < 2)
     {
       if (nargout == 0)
 	args(0).print (octave_stdout);
       else
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 	  args(0).print (buf);
-	  buf << OSSTREAM_ENDS;
-	  retval = OSSTREAM_STR (buf);
-	  OSSTREAM_FREEZE (buf);
+	  retval = buf.str ();
 	}
     }
   else
     print_usage ("disp");
 
   return retval;
 }
 
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -21,20 +21,19 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
+#include <sstream>
 #include <string>
 
-#include "lo-sstream.h"
-
 #include "ov-fcn.h"
 #include "pt.h"
 #include "pt-pr-code.h"
 
 // If true, stop executing at the next possible point.
 bool tree::break_next = false;
 
 // The line where dbnext was executed.
@@ -47,27 +46,23 @@ const octave_function *tree::break_funct
 const tree *tree::break_statement = 0;
 
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
 std::string
 tree::str_print_code (void)
 {
-  OSSTREAM buf;
+  std::ostringstream buf;
 
   tree_print_code tpc (buf);
 
   accept (tpc);
 
-  buf << OSSTREAM_ENDS;
-
-  std::string retval = OSSTREAM_STR (buf);
-
-  OSSTREAM_FREEZE (buf);
+  std::string retval = buf.str ();
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -21,16 +21,17 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
+#include <sstream>
 
 #include "dMatrix.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ov.h"
@@ -388,36 +389,32 @@ If @var{width} is not specified, the wid
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       string_vector s = args(0).all_strings ();
 
       if (! error_state)
 	{
-	  OSSTREAM buf;
+	  std::ostringstream buf;
 
 	  if (nargin == 1)
 	    // Let list_in_columns query terminal width.
 	    s.list_in_columns (buf);
 	  else
 	    {
 	      int width = args(1).int_value ();
 
 	      if (! error_state)
 		s.list_in_columns (buf, width);
 	      else
 		error ("list_in_columns: expecting width to be an integer");
 	    }
 
-	  buf << OSSTREAM_ENDS;
-
-	  retval = OSSTREAM_STR (buf);
-
-	  OSSTREAM_FREEZE (buf);
+	  retval = buf.str ();
 	}
       else
 	error ("list_in_columns: expecting cellstr or char array");
     }
   else
     print_usage ("list_in_columns");
 
   return retval;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -27,16 +27,17 @@ 02110-1301, USA.
 
 #include <cassert>
 #include <cctype>
 #include <climits>
 #include <cstdio>
 
 #include <iomanip>
 #include <fstream>
+#include <sstream>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
@@ -1220,17 +1221,17 @@ maybe_list_cmp_fcn (const void *a_arg, c
 }
 
 void
 symbol_table::print_descriptor (std::ostream& os,
 				std::list<whos_parameter> params) const
 {
   // This method prints a line of information on a given symbol
   std::list<whos_parameter>::iterator i = params.begin ();
-  OSSTREAM param_buf;
+  std::ostringstream param_buf;
 
   while (i != params.end ())
     {
       whos_parameter param = * i;
 
       if (param.command != '\0')
         {
 	  // Do the actual printing
@@ -1297,19 +1298,17 @@ symbol_table::print_descriptor (std::ost
       else
 	{
 	  os << param.text;
 	  param_buf << param.line;
 	  i++;
 	}
     }
 
-  param_buf << OSSTREAM_ENDS;
-  os << OSSTREAM_C_STR (param_buf);
-  OSSTREAM_FREEZE (param_buf);
+  os << param_buf.str ();
 }
 
 std::list<whos_parameter>
 symbol_table::parse_whos_line_format (Array<symbol_record *>& symbols) const
 {
   // This method parses the string whos_line_format, and returns
   // a parameter list, containing all information needed to print
   // the given attributtes of the symbols
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -23,18 +23,18 @@ 02110-1301, USA.
 
 #if !defined (octave_symtab_h)
 #define octave_symtab_h 1
 
 #include <cassert>
 
 #include <string>
 #include <stack>
+#include <sstream>
 
-#include "lo-sstream.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov.h"
 
 class octave_lvalue;
 
 class string_vector;
@@ -526,20 +526,19 @@ public:
 		const std::string& nm = std::string ())
     : table_size (tab_size), table (new symbol_record [table_size]),
       table_name (nm)
     {
       assert ((tab_size % 2) == 0);
 
       if (table_name.empty ())
 	{
-	  OSSTREAM buf;
-	  buf << symtab_count++ << OSSTREAM_ENDS;
-	  table_name = OSSTREAM_STR (buf);
-	  OSSTREAM_FREEZE (buf);
+	  std::ostringstream buf;
+	  buf << symtab_count++;
+	  table_name = buf.str ();
 	}
     }
 
   ~symbol_table (void);
 
   symbol_record *lookup (const std::string& nm, bool insert = false,
 			 bool warn = false);
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -28,30 +28,30 @@ 02110-1301, USA.
 #include <cassert>
 #include <cerrno>
 #include <cstdlib>
 #include <cstring>
 #include <new>
 
 #include <fstream>
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "oct-env.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "file-io.h"
@@ -405,17 +405,17 @@ run_command_and_return_output (const std
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
   if (cmd)
     {
       unwind_protect::add (cleanup_iprocstream, cmd);
 
       if (*cmd)
 	{
-	  OSSTREAM output_buf;
+	  std::ostringstream output_buf;
 
 	  // XXX FIXME XXX -- Perhaps we should read more than one
 	  // character at a time and find a way to avoid the call to
 	  // octave_usleep as well?
 
 	  // This is a bit of a kluge...
 
 	  octave_usleep (100);
@@ -441,22 +441,18 @@ run_command_and_return_output (const std
 
 	  int cmd_status = cmd->close ();
 
 	  if (WIFEXITED (cmd_status))
 	    cmd_status = WEXITSTATUS (cmd_status);
 	  else
 	    cmd_status = 127;
 
-	  output_buf << OSSTREAM_ENDS;
-
 	  retval(0) = (double) cmd_status;
-	  retval(1) = OSSTREAM_STR (output_buf);
-
-	  OSSTREAM_FREEZE (output_buf);
+	  retval(1) = output_buf.str ();
 	}
 
       unwind_protect::run ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
   return retval;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -41,17 +41,16 @@ 02110-1301, USA.
 #endif
 
 #include "quit.h"
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-mappers.h"
-#include "lo-sstream.h"
 #include "oct-cmplx.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include <defaults.h>
 #include "defun.h"
