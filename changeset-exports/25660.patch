# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1532032997 -7200
#      Thu Jul 19 22:43:17 2018 +0200
# Node ID 4de7535ece1119cc71d6c1e843e010bf22e8ea91
# Parent  e6d3f4f9473c1f4ab4ebc3a73fa60129200e7510
Relative path specifications for non-ASCII files on Windows.

* lo-sysdep.cc (get_ASCII_filename): Produce ASCII-only file name for files with
relative path specification.

diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -254,44 +254,60 @@ namespace octave
                         [](char c) { return (c < 0 || c >= 128); });
 
       if (first_non_ASCII == orig_file_name.end ())
         return orig_file_name;
 
       // 2. Check if file system stores short filenames (always
       // ASCII-only).
 
-      const wchar_t *w_orig_file_name = u8_to_wstring (orig_file_name).c_str ();
+      std::wstring w_orig_file_name_str = u8_to_wstring (orig_file_name);
+      const wchar_t *w_orig_file_name = w_orig_file_name_str.c_str ();
+
+      // Get full path to file
+      wchar_t w_full_file_name[_MAX_PATH];
+      if (_wfullpath (w_full_file_name, w_orig_file_name, _MAX_PATH) == nullptr)
+        return orig_file_name;
+
+      std::wstring w_full_file_name_str = w_full_file_name;
 
       // Get short filename (8.3) from UTF-16 filename.
 
-      long length = GetShortPathNameW (w_orig_file_name, NULL, 0);
+      long length = GetShortPathNameW (w_full_file_name, nullptr, 0);
 
-      // Dynamically allocate the correct size (terminating null char
-      // was included in length).
+      if (length > 0)
+        {
+          // Dynamically allocate the correct size (terminating null char
+          // was included in length).
 
-      wchar_t *w_short_file_name = new wchar_t[length];
-      length = GetShortPathNameW (w_orig_file_name, w_short_file_name, length);
+          wchar_t *w_short_file_name = new wchar_t[length];
+          GetShortPathNameW (w_full_file_name, w_short_file_name, length);
 
-      std::string short_file_name
-        = u8_from_wstring (std::wstring (w_short_file_name));
+          std::wstring w_short_file_name_str
+            = std::wstring (w_short_file_name, length);
+          std::string short_file_name = u8_from_wstring (w_short_file_name_str);
 
-      if (short_file_name.compare (orig_file_name) != 0)
-        return short_file_name;
+          if (w_short_file_name_str.compare (0, length-1, w_full_file_name_str) != 0)
+            return short_file_name;
+        }
 
       // 3. Create hard link with only-ASCII characters.
       // Get longest possible part of path that only contains ASCII chars.
 
-      std::string tmp_substr
-        = std::string (orig_file_name.begin (), first_non_ASCII);
+      std::wstring::iterator w_first_non_ASCII
+        = std::find_if (w_full_file_name_str.begin (), w_full_file_name_str.end (),
+                        [](wchar_t c) { return (c < 0 || c >= 128); });
+      std::wstring tmp_substr
+        = std::wstring (w_full_file_name_str.begin (), w_first_non_ASCII);
 
       size_t pos
-        = tmp_substr.find_last_of (octave::sys::file_ops::dir_sep_chars ());
+        = tmp_substr.find_last_of (u8_to_wstring (file_ops::dir_sep_chars ()));
 
-      std::string par_dir = orig_file_name.substr (0, pos+1);
+      std::string par_dir
+        = u8_from_wstring (w_full_file_name_str.substr (0, pos+1));
 
       // Create .oct_ascii directory.
       // FIXME: We need to have write permission in this location.
 
       std::string oct_ascii_dir = par_dir + ".oct_ascii";
       std::string test_dir = canonicalize_file_name (oct_ascii_dir);
 
       if (test_dir.empty ())
@@ -309,24 +325,24 @@ namespace octave
       // Create file from hash of full filename.
       std::string filename_hash
         = (oct_ascii_dir + file_ops::dir_sep_str ()
            + octave::crypto::hash ("SHA1", orig_file_name));
 
       std::string abs_filename_hash = canonicalize_file_name (filename_hash);
 
       if (! abs_filename_hash.empty ())
-        return abs_filename_hash;
+        octave::sys::unlink (filename_hash);
 
       wchar_t w_filename_hash[filename_hash.length ()+1] = {0};
 
       for (size_t i=0; i < filename_hash.length (); i++)
         w_filename_hash[i] = filename_hash.at (i);
 
-      if (CreateHardLinkW (w_filename_hash, w_orig_file_name, NULL))
+      if (CreateHardLinkW (w_filename_hash, w_orig_file_name, nullptr))
         return filename_hash;
 
 #endif
 
       return orig_file_name;
     }
   }
 }
