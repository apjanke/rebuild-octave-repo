# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541343701 28800
#      Sun Nov 04 07:01:41 2018 -0800
# Node ID 912e1daa03d23ded56df7a7a663903c1a9090414
# Parent  ca5170d4acb65f2d38847a8ef542e5d10dc334df
maint: Use 2D, 3D in variable names in graphics code rather than 2d,3d.

* gl-render.cc, graphics.cc: Use 2D, 3D in variable names in graphics code
rather than 2d,3d.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1249,25 +1249,25 @@ namespace octave
       return;
 
     double xPlane = props.get_xPlane ();
     double yPlane = props.get_yPlane ();
     double zPlane = props.get_zPlane ();
     double xPlaneN = props.get_xPlaneN ();
     double yPlaneN = props.get_yPlaneN ();
     double zPlaneN = props.get_zPlaneN ();
-    bool is2d = props.get_is2D ();
+    bool is2D = props.get_is2D ();
 
     // Axes planes
     set_color (axe_color);
     set_polygon_offset (true, 9.0);
 
     m_glfcns.glBegin (GL_QUADS);
 
-    if (! is2d)
+    if (! is2D)
       {
         // X plane
         m_glfcns.glVertex3d (xPlane, yPlaneN, zPlaneN);
         m_glfcns.glVertex3d (xPlane, yPlane, zPlaneN);
         m_glfcns.glVertex3d (xPlane, yPlane, zPlane);
         m_glfcns.glVertex3d (xPlane, yPlaneN, zPlane);
 
         // Y plane
@@ -1304,17 +1304,17 @@ namespace octave
   {
 #if defined (HAVE_OPENGL)
 
     if (! props.is_visible ())
       return;
 
     bool xySym = props.get_xySym ();
     bool layer2Dtop = props.get_layer2Dtop ();
-    bool is2d = props.get_is2D ();
+    bool is2D = props.get_is2D ();
     bool isXOrigin = props.xaxislocation_is ("origin")
                      && ! props.yscale_is ("log");
     bool isYOrigin = props.yaxislocation_is ("origin")
                      && ! props.xscale_is ("log");
     bool boxFull = (props.get_boxstyle () == "full");
     double linewidth = props.get_linewidth ();
     double xPlane = props.get_xPlane ();
     double yPlane = props.get_yPlane ();
@@ -1339,65 +1339,65 @@ namespace octave
     m_glfcns.glBegin (GL_LINES);
 
     if (layer2Dtop)
       std::swap (zpTick, zpTickN);
 
     // X box
     set_color (props.get_xcolor_rgb ());
 
-    if (! isXOrigin || props.is_box() || ! is2d)
+    if (! isXOrigin || props.is_box() || ! is2D)
       {
         m_glfcns.glVertex3d (xPlaneN, ypTick, zpTick);
         m_glfcns.glVertex3d (xPlane, ypTick, zpTick);
       }
 
     if (props.is_box ())
       {
         m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTick);
         m_glfcns.glVertex3d (xPlane, ypTickN, zpTick);
-        if (! is2d)
+        if (! is2D)
           {
             m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTickN);
             m_glfcns.glVertex3d (xPlane, ypTickN, zpTickN);
             if (boxFull)
               {
                 m_glfcns.glVertex3d (xPlaneN, ypTick, zpTickN);
                 m_glfcns.glVertex3d (xPlane, ypTick, zpTickN);
               }
           }
       }
 
     // Y box
     set_color (props.get_ycolor_rgb ());
-    if (! isYOrigin || props.is_box() || ! is2d)
+    if (! isYOrigin || props.is_box() || ! is2D)
       {
         m_glfcns.glVertex3d (xpTick, yPlaneN, zpTick);
         m_glfcns.glVertex3d (xpTick, yPlane, zpTick);
       }
 
     if (props.is_box () && ! plotyy)
       {
         m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTick);
         m_glfcns.glVertex3d (xpTickN, yPlane, zpTick);
 
-        if (! is2d)
+        if (! is2D)
           {
             m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTickN);
             m_glfcns.glVertex3d (xpTickN, yPlane, zpTickN);
             if (boxFull)
               {
                 m_glfcns.glVertex3d (xpTick, yPlaneN, zpTickN);
                 m_glfcns.glVertex3d (xpTick, yPlane, zpTickN);
               }
           }
       }
 
     // Z box
-    if (! is2d)
+    if (! is2D)
       {
         set_color (props.get_zcolor_rgb ());
 
         if (xySym)
           {
             m_glfcns.glVertex3d (xPlaneN, yPlane, zPlaneN);
             m_glfcns.glVertex3d (xPlaneN, yPlane, zPlane);
           }
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -626,30 +626,30 @@ convert_font_size (double font_size, con
 
 static Matrix
 convert_position (const Matrix& pos, const caseless_str& from_units,
                   const caseless_str& to_units, const Matrix& parent_dim)
 {
   Matrix retval (1, pos.numel ());
   double res = 0;
   bool is_rectangle = (pos.numel () == 4);
-  bool is_2d = (pos.numel () == 2);
+  bool is_2D = (pos.numel () == 2);
 
   if (from_units.compare ("pixels"))
     retval = pos;
   else if (from_units.compare ("normalized"))
     {
       retval(0) = pos(0) * parent_dim(0) + 1;
       retval(1) = pos(1) * parent_dim(1) + 1;
       if (is_rectangle)
         {
           retval(2) = pos(2) * parent_dim(0);
           retval(3) = pos(3) * parent_dim(1);
         }
-      else if (! is_2d)
+      else if (! is_2D)
         retval(2) = 0;
     }
   else if (from_units.compare ("characters"))
     {
       if (res <= 0)
         res = xget (0, "screenpixelsperinch").double_value ();
 
       double f = 0.0;
@@ -662,17 +662,17 @@ convert_position (const Matrix& pos, con
         {
           retval(0) = 0.5 * pos(0) * f;
           retval(1) = pos(1) * f;
           if (is_rectangle)
             {
               retval(2) = 0.5 * pos(2) * f;
               retval(3) = pos(3) * f;
             }
-          else if (! is_2d)
+          else if (! is_2D)
             retval(2) = 0;
         }
     }
   else
     {
       if (res <= 0)
         res = xget (0, "screenpixelsperinch").double_value ();
 
@@ -689,33 +689,33 @@ convert_position (const Matrix& pos, con
         {
           retval(0) = pos(0) * f + 1;
           retval(1) = pos(1) * f + 1;
           if (is_rectangle)
             {
               retval(2) = pos(2) * f;
               retval(3) = pos(3) * f;
             }
-          else if (! is_2d)
+          else if (! is_2D)
             retval(2) = 0;
         }
     }
 
   if (! to_units.compare ("pixels"))
     {
       if (to_units.compare ("normalized"))
         {
           retval(0) = (retval(0) - 1) / parent_dim(0);
           retval(1) = (retval(1) - 1) / parent_dim(1);
           if (is_rectangle)
             {
               retval(2) /= parent_dim(0);
               retval(3) /= parent_dim(1);
             }
-          else if (! is_2d)
+          else if (! is_2D)
             retval(2) = 0;
         }
       else if (to_units.compare ("characters"))
         {
           if (res <= 0)
             res = xget (0, "screenpixelsperinch").double_value ();
 
           double f = 0.0;
@@ -726,17 +726,17 @@ convert_position (const Matrix& pos, con
             {
               retval(0) = 2 * retval(0) / f;
               retval(1) = retval(1) / f;
               if (is_rectangle)
                 {
                   retval(2) = 2 * retval(2) / f;
                   retval(3) = retval(3) / f;
                 }
-              else if (! is_2d)
+              else if (! is_2D)
                 retval(2) = 0;
             }
         }
       else
         {
           if (res <= 0)
             res = xget (0, "screenpixelsperinch").double_value ();
 
@@ -753,22 +753,22 @@ convert_position (const Matrix& pos, con
             {
               retval(0) = (retval(0) - 1) / f;
               retval(1) = (retval(1) - 1) / f;
               if (is_rectangle)
                 {
                   retval(2) /= f;
                   retval(3) /= f;
                 }
-              else if (! is_2d)
+              else if (! is_2D)
                 retval(2) = 0;
             }
         }
     }
-  else if (! is_rectangle && ! is_2d)
+  else if (! is_rectangle && ! is_2D)
     retval(2) = 0;
 
   return retval;
 }
 
 static Matrix
 convert_text_position (const Matrix& pos, const text::properties& props,
                        const caseless_str& from_units,
@@ -6057,37 +6057,37 @@ axes::properties::update_axes_layout (vo
   is2D = viewmat(1) == 90;
 
   update_ticklength ();
 }
 
 void
 axes::properties::update_ticklength (void)
 {
-  bool mode2d = (((xstate > AXE_DEPTH_DIR ? 1 : 0) +
+  bool mode2D = (((xstate > AXE_DEPTH_DIR ? 1 : 0) +
                   (ystate > AXE_DEPTH_DIR ? 1 : 0) +
                   (zstate > AXE_DEPTH_DIR ? 1 : 0)) == 2);
 
   if (tickdirmode_is ("auto"))
-    tickdir.set (mode2d ? "in" : "out", true);
+    tickdir.set (mode2D ? "in" : "out", true);
 
   double ticksign = (tickdir_is ("in") ? -1 : 1);
 
   Matrix bbox = get_boundingbox (true);
   Matrix ticklen = get_ticklength ().matrix_value ();
   ticklen(0) *= std::max (bbox(2), bbox(3));
   ticklen(1) *= std::max (bbox(2), bbox(3));
 
-  xticklen = ticksign * (mode2d ? ticklen(0) : ticklen(1));
-  yticklen = ticksign * (mode2d ? ticklen(0) : ticklen(1));
-  zticklen = ticksign * (mode2d ? ticklen(0) : ticklen(1));
-
-  xtickoffset = (mode2d ? std::max (0., xticklen) : std::abs (xticklen)) + 5;
-  ytickoffset = (mode2d ? std::max (0., yticklen) : std::abs (yticklen)) + 5;
-  ztickoffset = (mode2d ? std::max (0., zticklen) : std::abs (zticklen)) + 5;
+  xticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
+  yticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
+  zticklen = ticksign * (mode2D ? ticklen(0) : ticklen(1));
+
+  xtickoffset = (mode2D ? std::max (0., xticklen) : std::abs (xticklen)) + 5;
+  ytickoffset = (mode2D ? std::max (0., yticklen) : std::abs (yticklen)) + 5;
+  ztickoffset = (mode2D ? std::max (0., zticklen) : std::abs (zticklen)) + 5;
 
   update_xlabel_position ();
   update_ylabel_position ();
   update_zlabel_position ();
   update_title_position ();
 }
 
 /*
@@ -9410,17 +9410,17 @@ patch::properties::update_data (void)
                   turn_valid = true;
                 }
               else
                 valid_vert = idx(ii,jj);
             }
         }
     }
 
-  // check coplanarity for 3d-faces with more than 3 corners
+  // check coplanarity for 3D-faces with more than 3 corners
   int fcmax = idx.rows ();
   if (fcmax > 3 && vert.columns () > 2)
     {
       for (octave_idx_type jj = 0; jj < idx.columns (); jj++)
         {
           if (! octave::math::isnan (idx(3,jj)))
             {
               // find first element that is NaN to get number of corners
@@ -9538,17 +9538,17 @@ cross_product (double x1, double y1, dou
 }
 
 void
 patch::properties::calc_face_normals (Matrix& fn)
 {
   Matrix v = get_vertices ().matrix_value ();
   Matrix f = get_faces ().matrix_value ();
 
-  bool is_3d = (v.columns () == 3);   // 2D or 3D patches
+  bool is_3D = (v.columns () == 3);   // 2D or 3D patches
   octave_idx_type num_f = f.rows ();  // number of faces
   octave_idx_type max_nc = f.columns ();  // max. number of polygon corners
 
   // In which cases can we skip updating the normals?
   if (max_nc < 3)
     {
       fn = Matrix ();
       return;
@@ -9584,17 +9584,17 @@ patch::properties::calc_face_normals (Ma
       double& ny = fnc(1);
       double& nz = fnc(2);
 
       if (is_coplanar)
         {
           // fast way for coplanar polygons
           i1 = f(i,0) - 1; i2 = f(i,1) - 1; i3 = f(i,nc-1) - 1;
 
-          if (is_3d)
+          if (is_3D)
             cross_product
               (v(i3,0) - v(i1,0), v(i3,1) - v(i1,1), v(i3,2) - v(i1,2),
                v(i2,0) - v(i1,0), v(i2,1) - v(i1,1), v(i2,2) - v(i1,2),
                nx, ny, nz);
           else
             {
               nz = (v(i2,0) - v(i1,0)) * (v(i3,1) - v(i1,1)) -
                    (v(i2,1) - v(i1,1)) * (v(i3,0) - v(i1,0));
