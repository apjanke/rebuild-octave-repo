# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1238456936 14400
#      Mon Mar 30 19:48:56 2009 -0400
# Node ID a6cf0ad87eee95a5653a688c90b75ea070568ff0
# Parent  6a495ba41f75db2f134729fbcf07675365c0801d
__go_draw_axes__.m: New subfunction create_fontspec(). Allow fontsize to be specified when the fontname is anonymous.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-30  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m: New subfunction create_fontspec(). Allow
+	fontsize to be specified when the fontname is anonymous.
+
 2009-03-30  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__gnuplot_default_font__.m: New function: determine gnuplot's
 	terminal dependent default font.
 	* plot/__go_draw_figure__.m: Substitute gnuplot default font when
 	"fontname" = "*".
 
 2009-03-29  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -31,16 +31,17 @@ function __go_draw_axes__ (h, plot_strea
     unwind_protect
       set (0, "showhiddenhandles", "on");
       axis_obj = __get__ (h);
     unwind_protect_cleanup
       set (0, "showhiddenhandles", showhiddenhandles);
     end_unwind_protect
 
     parent_figure_obj = get (axis_obj.parent);
+    term = __gnuplot_get_var__ (axis_obj.parent, "GPVAL_TERM");
 
     ## Set to false for plotyy axes.
     if (strcmp (axis_obj.tag, "plotyy"))
       ymirror = false;
     else
       ymirror = true;
     endif
 
@@ -90,21 +91,17 @@ function __go_draw_axes__ (h, plot_strea
     fputs (plot_stream, "unset x2tics;\n");
 
     if (! isempty (axis_obj.title))
       t = get (axis_obj.title);
       if (isempty (t.string))
 	fputs (plot_stream, "unset title;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	if (strcmp (f, "*"))
-	  fontspec = "";
-	else
-	  fontspec = sprintf ("font \"%s,%d\"", f, s);
-	endif
+	fontspec = create_fontspec (f, s, term);
 	fprintf (plot_stream, "set title \"%s\" %s %s",
 		 undo_string_escapes (tt), fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	if (nd == 3)
 	  fprintf (plot_stream, " offset screen 0, screen %.3f;\n", pos(4)/5);
 	else
 	  fprintf (plot_stream, ";\n");
 	endif
@@ -115,21 +112,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.xlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.xcolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset xlabel;\n");
 	fprintf (plot_stream, "unset x2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	if (strcmp (f, "*"))
-	  fontspec = "";
-	else
-	  fontspec = sprintf ("font \"%s,%d\"", f, s);
-	endif
+	fontspec = create_fontspec (f, s, term);
 	if (strcmpi (axis_obj.xaxislocation, "top"))
 	  fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set xlabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -147,21 +140,17 @@ function __go_draw_axes__ (h, plot_strea
       t = get (axis_obj.ylabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.ycolor, mono);
       if (isempty (t.string))
 	fprintf (plot_stream, "unset ylabel;\n");
 	fprintf (plot_stream, "unset y2label;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	if (strcmp (f, "*"))
-	  fontspec = "";
-	else
-	  fontspec = sprintf ("font \"%s,%d\"", f, s);
-	endif
+	fontspec = create_fontspec (f, s, term);
 	if (strcmpi (axis_obj.yaxislocation, "right"))
 	  fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
 	else
 	  fprintf (plot_stream, "set ylabel \"%s\" %s %s %s",
 		   undo_string_escapes (tt), colorspec, fontspec,
 		   __do_enhanced_option__ (enhanced, t));
@@ -178,21 +167,17 @@ function __go_draw_axes__ (h, plot_strea
     if (! isempty (axis_obj.zlabel))
       t = get (axis_obj.zlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.zcolor, mono);
       if (isempty (t.string))
 	fputs (plot_stream, "unset zlabel;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
-	if (strcmp (f, "*"))
-	  fontspec = "";
-	else
-	  fontspec = sprintf ("font \"%s,%d\"", f, s);
-	endif
+	fontspec = create_fontspec (f, s, term);
 	fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
 		 undo_string_escapes (tt), colorspec, fontspec,
 		 __do_enhanced_option__ (enhanced, t));
 	fprintf (plot_stream, " rotate by %f;\n", angle);
       endif
     endif
 
     if (strcmpi (axis_obj.xaxislocation, "top"))
@@ -951,21 +936,17 @@ function __go_draw_axes__ (h, plot_strea
                            obj.facealpha);
                 endif
               endif
             endif
 	  endif
 
 	case "text"
 	  [label, f, s] = __maybe_munge_text__ (enhanced, obj, "string");
-	  if (strcmp (f, "*"))
-	    fontspec = "";
-	  else
-	    fontspec = sprintf ("font \"%s,%d\"", f, s);
-	  endif
+	  fontspec = create_fontspec (f, s, term);
 	  lpos = obj.position;
 	  halign = obj.horizontalalignment;
 	  angle = obj.rotation;
           units = obj.units;
 	  color = obj.color;
           if (strcmpi (units, "normalized"))
             units = "graph";
           else
@@ -1247,16 +1228,29 @@ function __go_draw_axes__ (h, plot_strea
     fflush (plot_stream);
 
   else
     print_usage ();
   endif
 
 endfunction
 
+function fontspec = create_fontspec (f, s, term)
+  if (nargin > 3 || any (strcmp (term, {"x11", "wxt"})))
+    include_size_with_anonymous_fontname = true;
+  else
+    include_size_with_anonymous_fontname = false;
+  endif
+  if (! strcmp (f, "*") || include_size_with_anonymous_fontname)
+    fontspec = sprintf ("font \"%s,%d\"", f, s);
+  else
+    fontspec = "";
+  endif
+endfunction
+
 function [style, typ, with] = do_linestyle_command (obj, idx, mono,
 						    plot_stream, errbars = "")
 
   fprintf (plot_stream, "set style line %d default;\n", idx);
   fprintf (plot_stream, "set style line %d", idx);
 
   found_style = false;
   typ = NaN;
@@ -1439,95 +1433,92 @@ endfunction
 
 function do_tics (obj, plot_stream, ymirror, mono)
 
   obj.xticklabel = ticklabel_to_cell (obj.xticklabel);
   obj.yticklabel = ticklabel_to_cell (obj.yticklabel);
   obj.zticklabel = ticklabel_to_cell (obj.zticklabel);
 
   [fontname, fontsize] = get_fontname_and_size (obj);
+  term = __gnuplot_get_var__ (obj.parent, "GPVAL_TERM");
+  fontspec = create_fontspec (fontname, fontsize, term);
 
   ## A Gnuplot tic scale of 69 is equivalent to Octave's 0.5.
   ticklength = sprintf ("scale %4.1f", (69/0.5)*obj.ticklength(1));
 
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
 	       obj.xticklabel, obj.xcolor, "x2", plot_stream, true, mono,
-	       "border", obj.tickdir, ticklength, fontname, fontsize,
+	       "border", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x", plot_stream, true, mono, "border",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   elseif (strcmpi (obj.xaxislocation, "zero"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
 	       obj.xticklabel, obj.xcolor, "x", plot_stream, true, mono,
-	       "axis", obj.tickdir, ticklength, fontname, fontsize,
+	       "axis", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x2", plot_stream, true, mono, "axis",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   else
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xminortick, obj.xticklabelmode,
 	       obj.xticklabel, obj.xcolor, "x", plot_stream, true, mono,
-	       "border", obj.tickdir, ticklength, fontname, fontsize,
+	       "border", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.xticklabelmode, obj.xticklabel,
 	       obj.xcolor, "x2", plot_stream, true, mono, "border",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   endif
   if (strcmpi (obj.yaxislocation, "right"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
 	       obj.yticklabel, obj.ycolor, "y2", plot_stream, ymirror, mono,
-	       "border", obj.tickdir, ticklength, fontname, fontsize,
+	       "border", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y", plot_stream, ymirror, mono, "border",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   elseif (strcmpi (obj.yaxislocation, "zero"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
 	       obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror, mono,
-	       "axis", obj.tickdir, ticklength, fontname, fontsize,
+	       "axis", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y2", plot_stream, ymirror, mono, "axis",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   else
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yminortick, obj.yticklabelmode,
 	       obj.yticklabel, obj.ycolor, "y", plot_stream, ymirror, mono,
-	       "border", obj.tickdir, ticklength, fontname, fontsize,
+	       "border", obj.tickdir, ticklength, fontname, fontspec,
 	       obj.interpreter);
     do_tics_1 ("manual", [], "off", obj.yticklabelmode, obj.yticklabel,
 	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border",
-	       "", "", fontname, fontsize, obj.interpreter);
+	       "", "", fontname, fontspec, obj.interpreter);
   endif
   do_tics_1 (obj.ztickmode, obj.ztick, obj.zminortick, obj.zticklabelmode,
 	     obj.zticklabel, obj.zcolor, "z", plot_stream, true, mono,
-	     "border", obj.tickdir, ticklength, fontname, fontsize,
+	     "border", obj.tickdir, ticklength, fontname, fontspec,
 	     obj.interpreter);
 endfunction
 
 function do_tics_1 (ticmode, tics, mtics, labelmode, labels, color, ax,
 		    plot_stream, mirror, mono, axispos, tickdir, ticklength,
-		    fontname, fontsize, interpreter)
+		    fontname, fontspec, interpreter)
   persistent warned_latex = false;
   if (strcmpi (interpreter, "tex"))
     for n = 1 : numel(labels)
       labels{n} = __tex2enhanced__ (labels{n}, fontname, false, false);
     endfor
   elseif (strcmpi (interpreter, "latex"))
     if (! warned_latex)
       warning ("latex markup not supported for tick marks");
       warned_latex = true;
     endif
   endif
-  if (strcmp (fontname, "*"))
-    fontspec = "";
-  else
-    fontspec = sprintf ("font \"%s,%d\"",  fontname, fontsize);
-  endif
   colorspec = get_text_colorspec (color, mono);
   if (strcmpi (ticmode, "manual") || strcmpi (labelmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\nunset m%stics;\n", ax, ax);
     elseif (strcmpi (labelmode, "manual"))
       if (ischar (labels))
 	labels = cellstr (labels);
       endif
