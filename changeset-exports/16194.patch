# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362496787 18000
#      Tue Mar 05 10:19:47 2013 -0500
# Node ID b7ca669af5281e4dd5e5972e41290cb151ae4ba3
# Parent  d7392bf42fd10e1c7a840e02d766dbfd9d08fdfc
reset lexical_feedback state before starting a new parse

* lex.h, lex.cc (bbp_nesting_level::reset): New function.
(lexical_feedback::reset, lexical_feedback::reset_token_stack):
New functions.
(lexical_feedback::~lexical_feedback): Call reset_token_stack to do
the job.
(octave_lexer::reset): Call lexical_feedback::reset.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -101,16 +101,22 @@ public:
       if (&nl != this)
         context = nl.context;
 
       return *this;
     }
 
     ~bbp_nesting_level (void) { }
 
+    void reset (void)
+    {
+      while (! context.empty ())
+        context.pop ();
+    }
+
     void bracket (void) { context.push (BRACKET); }
 
     bool is_bracket (void)
     {
       return ! context.empty () && context.top () == BRACKET;
     }
 
     void brace (void) { context.push (BRACE); }
@@ -171,17 +177,19 @@ public:
       pending_local_variables (), nesting_level (), token_stack ()
   {
     init ();
   }
 
   ~lexical_feedback (void);
 
   void init (void);
-  
+
+  void reset (void);
+
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // gag.  stupid kludge so that [[1,2][3,4]] will work.
@@ -275,16 +283,18 @@ public:
 
   // Stack to hold tokens so that we can delete them when the parser is
   // reset and avoid growing forever just because we are stashing some
   // information.
   std::stack <token*> token_stack;
 
 private:
 
+  void reset_token_stack (void);
+
   // No copying!
 
   lexical_feedback (const lexical_feedback&);
 
   lexical_feedback& operator = (const lexical_feedback&);
 };
 
 // octave_lexer inherits from lexical_feedback because we will
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1289,35 +1289,82 @@ private:
 
   octave_lexer *lexer;
 
   char *buf;
 };
 
 lexical_feedback::~lexical_feedback (void)
 {
+  reset_token_stack ();
+}
+
+void
+lexical_feedback::init (void)
+{
+  // The closest paren, brace, or bracket nesting is not an object
+  // index.
+  looking_at_object_index.push_front (false);
+}
+
+void
+lexical_feedback::reset (void)
+{
+  end_of_input = false;
+  convert_spaces_to_comma = true;
+  do_comma_insert = false;
+  at_beginning_of_statement = true;
+  looking_at_anon_fcn_args = false;
+  looking_at_return_list = false;
+  looking_at_parameter_list = false;
+  looking_at_decl_list = false;
+  looking_at_initializer_expression = false;
+  looking_at_matrix_or_assign_lhs = false;
+  looking_for_object_index = false; 
+  looking_at_indirect_ref = false;
+  parsing_class_method = false;
+  maybe_classdef_get_set_method = false;
+  parsing_classdef = false;
+  quote_is_transpose = false;
+  input_line_number = 1;
+  current_input_column = 1;
+  bracketflag = 0;
+  braceflag = 0;
+  looping = 0;
+  defining_func = 0;
+  looking_at_function_handle = 0;
+  block_comment_nesting_level = 0;
+
+  looking_at_object_index.clear ();
+  looking_at_object_index.push_front (false);
+
+  while (! parsed_function_name.empty ())
+    parsed_function_name.pop ();
+
+  pending_local_variables.clear ();
+
+  nesting_level.reset ();
+
+  reset_token_stack ();
+}
+
+void
+lexical_feedback::reset_token_stack (void)
+{
   // Clear out the stack of token info used to track line and
   // column numbers.
 
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
       token_stack.pop ();
     }
 }
 
 void
-lexical_feedback::init (void)
-{
-  // The closest paren, brace, or bracket nesting is not an object
-  // index.
-  looking_at_object_index.push_front (false);
-}
-
-void
 octave_lexer::input_buffer::read (void)
 {
   buffer = get_user_input (eof);
   chars_left = buffer.length ();
   pos = buffer.c_str ();
 }
 
 int
@@ -1402,16 +1449,18 @@ octave_lexer::reset (void)
             || reading_script_file
             || get_input_from_eval_string
             || input_from_startup_file))
     yyrestart (stdin, scanner);
 
   // Clear the buffer for help text.
   while (! help_buf.empty ())
     help_buf.pop ();
+
+  lexical_feedback::reset ();
 }
 
 void
 octave_lexer::prep_for_script_file (void)
 {
   OCTAVE_YYG;
 
   BEGIN (SCRIPT_FILE_BEGIN);
