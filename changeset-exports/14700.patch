# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1338311285 -7200
#      Tue May 29 19:08:05 2012 +0200
# Branch gui
# Node ID 7623bece76df9e48296c38fb99c645424d341005
# Parent  0bab96aeb9951a266deb3709cd040136a92aa716
Implemented logic for current directory bar.

* MainWindow: Changed current working directory line edit to combo box. Added various signals and slots.
* OctaveLink: Added signal that will be emitted whenever a current directory change occurs.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -126,29 +126,76 @@ MainWindow::processSettingsDialogRequest
 }
 
 void
 MainWindow::noticeSettings ()
 {
   // Set terminal font:
   QSettings *settings = ResourceManager::instance ()->settings ();
   QFont font = QFont();
-  //font.setStyleHint(QFont::TypeWriter);
   font.setFamily(settings->value("terminal/fontName").toString());
   font.setPointSize(settings->value("terminal/fontSize").toInt ());
   m_terminal->setTerminalFont(font);
 }
 
 void
 MainWindow::prepareForQuit ()
 {
   writeSettings ();
 }
 
 void
+MainWindow::resetWindows ()
+{
+  // TODO: Implement.
+}
+
+void
+MainWindow::updateCurrentWorkingDirectory (QString directory)
+{
+  if(m_currentDirectoryComboBox->findText (directory) < 0)
+    {
+      if (m_currentDirectoryComboBox->count () > 31)
+        {
+          m_currentDirectoryComboBox->removeItem (0);
+        }
+      m_currentDirectoryComboBox->addItem (directory);
+      int index = m_currentDirectoryComboBox->findText (directory);
+      m_currentDirectoryComboBox->setCurrentIndex (index);
+    }
+}
+
+void
+MainWindow::changeCurrentWorkingDirectory ()
+{
+  QString selectedDirectory =
+      QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
+
+  if (!selectedDirectory.isEmpty ())
+    {
+      m_terminal->sendText (QString ("cd \'%1\'\n").arg (selectedDirectory));
+      m_terminal->setFocus ();
+    }
+}
+
+void
+MainWindow::changeCurrentWorkingDirectory (QString directory)
+{
+  m_terminal->sendText (QString ("cd \'%1\'\n").arg (directory));
+  m_terminal->setFocus ();
+}
+
+void
+MainWindow::currentWorkingDirectoryUp ()
+{
+  m_terminal->sendText ("cd ..\n");
+  m_terminal->setFocus ();
+}
+
+void
 MainWindow::showAboutOctave ()
 {
   QString message =
       "GNU Octave\n"
       "Copyright (C) 2009 John W. Eaton and others.\n"
       "This is free software; see the source code for copying conditions."
       "There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or"
       "FITNESS FOR A PARTICULAR PURPOSE.  For details, type `warranty'.\n"
@@ -208,27 +255,30 @@ MainWindow::construct ()
   m_workspaceView = new WorkspaceView (this);
   m_workspaceView->setStatusTip (tr ("View the variables in the active workspace."));
   m_historyDockWidget = new HistoryDockWidget (this);
   m_historyDockWidget->setStatusTip (tr ("Browse and search the command history."));
   m_filesDockWidget = new FilesDockWidget (this);
   m_filesDockWidget->setStatusTip (tr ("Browse your files."));
   m_statusBar = new QStatusBar (this);
 
-  m_currentDirectoryLineEdit = new QLineEdit (QDir::currentPath (), this);
-  m_currentDirectoryLineEdit->setFixedWidth (300);
+  m_currentDirectoryComboBox = new QComboBox (this);
+  m_currentDirectoryComboBox->setFixedWidth (300);
+  m_currentDirectoryComboBox->setEditable (true);
+  m_currentDirectoryComboBox->setInsertPolicy (QComboBox::InsertAtTop);
+  m_currentDirectoryComboBox->setMaxVisibleItems (14);
 
   m_currentDirectoryToolButton = new QToolButton (this);
   m_currentDirectoryToolButton->setIcon (style->standardIcon (QStyle::SP_DirOpenIcon));
 
   m_currentDirectoryUpToolButton = new QToolButton (this);
   m_currentDirectoryUpToolButton->setIcon (style->standardIcon (QStyle::SP_FileDialogToParent));
 
   // Octave Terminal subwindow.
-  m_terminal = new QTerminal(this);
+  m_terminal = new QTerminal (this);
   m_terminal->setObjectName ("OctaveTerminal");
   m_terminalDockWidget = new TerminalDockWidget (m_terminal, this);
 
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
   dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
   dummyWidget->hide ();
@@ -291,16 +341,19 @@ MainWindow::construct ()
   showWorkspaceAction->setCheckable (true);
   QAction *showHistoryAction = windowMenu->addAction (tr ("Command History"));
   showHistoryAction->setCheckable (true);
   QAction *showFileBrowserAction = windowMenu->addAction (tr ("Current Directory"));
   showFileBrowserAction->setCheckable (true);
   QAction *showEditorAction = windowMenu->addAction (tr ("Editor"));
   showEditorAction->setCheckable (true);
 
+  windowMenu->addSeparator ();
+  QAction *resetWindowsAction = windowMenu->addAction (tr ("Reset Windows"));
+
   // Help menu
   QMenu *helpMenu = menuBar ()->addMenu (tr ("&Help"));
   QAction *reportBugAction = helpMenu->addAction (tr ("Report Bug"));
   QAction *agoraAction = helpMenu->addAction (tr ("Visit Agora"));
   QAction *octaveForgeAction = helpMenu->addAction (tr ("Visit Octave Forge"));
   helpMenu->addSeparator ();
   QAction *aboutOctaveAction = helpMenu->addAction (tr ("About Octave"));
 
@@ -311,17 +364,17 @@ MainWindow::construct ()
   mainToolBar->addSeparator ();
   mainToolBar->addAction (cutAction);
   mainToolBar->addAction (copyAction);
   mainToolBar->addAction (pasteAction);
   mainToolBar->addAction (undoAction);
   mainToolBar->addAction (redoAction);
   mainToolBar->addSeparator ();
   mainToolBar->addWidget (new QLabel (tr ("Current Directory:")));
-  mainToolBar->addWidget (m_currentDirectoryLineEdit);
+  mainToolBar->addWidget (m_currentDirectoryComboBox);
   mainToolBar->addWidget (m_currentDirectoryToolButton);
   mainToolBar->addWidget (m_currentDirectoryUpToolButton);
 
   connect (qApp, SIGNAL(aboutToQuit ()), this, SLOT (prepareForQuit ()));
 
   connect (settingsAction, SIGNAL (triggered ()), this, SLOT (processSettingsDialogRequest ()));
   connect (exitAction, SIGNAL (triggered ()), this, SLOT (close ()));
   connect (newFileAction, SIGNAL (triggered ()), this, SLOT (newFile ()));
@@ -336,31 +389,41 @@ MainWindow::construct ()
   connect (showWorkspaceAction, SIGNAL (toggled (bool)), m_workspaceView, SLOT (setShown (bool)));
   connect (m_workspaceView, SIGNAL (activeChanged (bool)), showWorkspaceAction, SLOT (setChecked (bool)));
   connect (showHistoryAction, SIGNAL (toggled (bool)), m_historyDockWidget, SLOT (setShown (bool)));
   connect (m_historyDockWidget, SIGNAL (activeChanged (bool)), showHistoryAction, SLOT (setChecked (bool)));
   connect (showFileBrowserAction, SIGNAL (toggled (bool)), m_filesDockWidget, SLOT (setShown (bool)));
   connect (m_filesDockWidget, SIGNAL (activeChanged (bool)), showFileBrowserAction, SLOT (setChecked (bool)));
   connect (showEditorAction, SIGNAL (toggled (bool)), m_fileEditor, SLOT (setShown (bool)));
   connect (m_fileEditor, SIGNAL (activeChanged (bool)), showEditorAction, SLOT (setChecked (bool)));
-
+  connect (resetWindowsAction, SIGNAL (triggered ()), this, SLOT (resetWindows ()));
   //connect (this, SIGNAL (settingsChanged ()), m_workspaceView, SLOT (noticeSettings ()));
   //connect (this, SIGNAL (settingsChanged ()), m_historyDockWidget, SLOT (noticeSettings ()));
   connect (this, SIGNAL (settingsChanged ()), m_filesDockWidget, SLOT (noticeSettings ()));
   connect (this, SIGNAL (settingsChanged ()), this, SLOT (noticeSettings ()));
 
   connect (m_filesDockWidget, SIGNAL (openFile (QString)), m_fileEditor, SLOT (requestOpenFile (QString)));
   connect (m_historyDockWidget, SIGNAL (information (QString)), this, SLOT (reportStatusMessage (QString)));
   connect (m_historyDockWidget, SIGNAL (commandDoubleClicked (QString)), this, SLOT (handleCommandDoubleClicked (QString)));
   connect (saveWorkspaceAction, SIGNAL (triggered ()), this, SLOT (handleSaveWorkspaceRequest ()));
   connect (loadWorkspaceAction, SIGNAL (triggered ()), this, SLOT (handleLoadWorkspaceRequest ()));
   connect (clearWorkspaceAction, SIGNAL (triggered ()), this, SLOT (handleClearWorkspaceRequest ()));
 
+  connect (m_currentDirectoryToolButton, SIGNAL (clicked ()),
+           this, SLOT (changeCurrentWorkingDirectory ()));
+  connect (m_currentDirectoryUpToolButton, SIGNAL (clicked ()),
+           this, SLOT(currentWorkingDirectoryUp()));
   connect (copyAction, SIGNAL (triggered()), m_terminal, SLOT(copyClipboard ()));
   connect (pasteAction, SIGNAL (triggered()), m_terminal, SLOT(pasteClipboard ()));
+
+  connect (OctaveLink::instance (), SIGNAL (workingDirectoryChanged (QString)),
+           this, SLOT (updateCurrentWorkingDirectory (QString)));
+  connect (m_currentDirectoryComboBox, SIGNAL (activated (QString)),
+           this, SLOT (changeCurrentWorkingDirectory (QString)));
+
   setWindowTitle ("Octave");
 
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
 
   addDockWidget (Qt::LeftDockWidgetArea, m_workspaceView);
   addDockWidget (Qt::LeftDockWidgetArea, m_historyDockWidget);
   addDockWidget (Qt::RightDockWidgetArea, m_filesDockWidget);
   addDockWidget (Qt::RightDockWidgetArea, m_fileEditor);
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -24,16 +24,17 @@
 #include <QTabWidget>
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
 #include <QQueue>
 #include <QMdiSubWindow>
 #include <QCloseEvent>
 #include <QToolButton>
+#include <QComboBox>
 
 // Editor includes
 #include "FileEditorInterface.h"
 
 // QTerminal includes
 #include "QTerminal.h"
 
 // Own includes
@@ -86,16 +87,21 @@ public slots:
   void openFile ();
   void openBugTrackerPage ();
   void openAgoraPage ();
   void openOctaveForgePage ();
   void processSettingsDialogRequest ();
   void showAboutOctave ();
   void noticeSettings ();
   void prepareForQuit ();
+  void resetWindows ();
+  void updateCurrentWorkingDirectory (QString directory);
+  void changeCurrentWorkingDirectory ();
+  void changeCurrentWorkingDirectory (QString directory);
+  void currentWorkingDirectoryUp ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
   void readSettings ();
   void writeSettings ();
 
 private:
   void construct ();
@@ -108,17 +114,17 @@ private:
   WorkspaceView *m_workspaceView;
   HistoryDockWidget *m_historyDockWidget;
   FilesDockWidget *m_filesDockWidget;
   TerminalDockWidget *m_terminalDockWidget;
 
   // Toolbars.
   QStatusBar *m_statusBar;
 
-  QLineEdit *m_currentDirectoryLineEdit;
+  QComboBox *m_currentDirectoryComboBox;
   QToolButton *m_currentDirectoryToolButton;
   QToolButton *m_currentDirectoryUpToolButton;
 
   // Flag for closing whole application
   bool m_closing;
 };
 
 #endif // MAINWINDOW_H
diff --git a/gui/src/backend/OctaveLink.cpp b/gui/src/backend/OctaveLink.cpp
--- a/gui/src/backend/OctaveLink.cpp
+++ b/gui/src/backend/OctaveLink.cpp
@@ -12,24 +12,25 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "OctaveLink.h"
 #include "load-path.h"
+#include "oct-env.h"
 #include <QDir>
 #include <QApplication>
 
 int octave_readline_hook ()
 {
   OctaveLink::instance ()->triggerUpdateHistoryModel ();
   OctaveLink::instance ()->buildSymbolInformation ();
-  QDir::setCurrent (load_path::get_command_line_path ().c_str ());
+  OctaveLink::instance ()->updateCurrentWorkingDirectory ();
   return 0;
 }
 
 void octave_exit_hook (int status)
 {
   Q_UNUSED (status);
   OctaveLink::instance ()->terminateOctave ();
 }
@@ -47,16 +48,17 @@ OctaveLink::OctaveLink ():QObject ()
   m_workspaceModel->insertTopLevelItem(3, new TreeItem ("Hidden"));
 
   _updateWorkspaceModelTimer.setInterval (1000);
   _updateWorkspaceModelTimer.setSingleShot (false);
   connect(&_updateWorkspaceModelTimer, SIGNAL (timeout ()),
     m_workspaceModel, SLOT (updateFromSymbolTable ()));
 
   _symbolInformationSemaphore = new QSemaphore (1);
+  _currentWorkingDirectory = "";
 }
 
 OctaveLink::~OctaveLink ()
 {
 }
 
 void
 OctaveLink::launchOctave ()
@@ -91,16 +93,28 @@ OctaveLink::triggerUpdateHistoryModel ()
         {
           m_historyModel->insertRow (0);
           m_historyModel->setData (m_historyModel->index (0), QString (command_history::get_entry (i).c_str ()));
         }
     }
 }
 
 void
+OctaveLink::updateCurrentWorkingDirectory ()
+{
+  QString _queriedWorkingDirectory = octave_env::get_current_directory ().c_str();
+  if (_currentWorkingDirectory != _queriedWorkingDirectory)
+    {
+      _currentWorkingDirectory = _queriedWorkingDirectory;
+      QDir::setCurrent (_currentWorkingDirectory);
+      emit workingDirectoryChanged (_currentWorkingDirectory);
+    }
+}
+
+void
 OctaveLink::acquireSymbolInformation ()
 {
   _symbolInformationSemaphore->acquire (1);
 }
 
 void
 OctaveLink::releaseSymbolInformation ()
 {
diff --git a/gui/src/backend/OctaveLink.h b/gui/src/backend/OctaveLink.h
--- a/gui/src/backend/OctaveLink.h
+++ b/gui/src/backend/OctaveLink.h
@@ -92,31 +92,36 @@ public:
   }
 
   void launchOctave ();
   void terminateOctave ();
   QStringListModel *historyModel ();
   WorkspaceModel *workspaceModel ();
 
   void triggerUpdateHistoryModel ();
+  void updateCurrentWorkingDirectory ();
 
   void acquireSymbolInformation ();
   void releaseSymbolInformation ();
   void buildSymbolInformation ();
   const QList <SymbolInformation>& symbolInformation () const;
 
+signals:
+  void workingDirectoryChanged (QString directory);
+
 private:
   OctaveLink ();
   ~OctaveLink ();
 
   QStringListModel *m_historyModel;
   WorkspaceModel *m_workspaceModel;
 
   // Threads for running octave and managing the data interaction.
   OctaveMainThread *m_octaveMainThread;
   QTimer _updateWorkspaceModelTimer;
 
   QSemaphore *_symbolInformationSemaphore;
   QList <SymbolInformation> _symbolInformation;
 
+  QString _currentWorkingDirectory;
   static OctaveLink m_singleton;
 };
 #endif // OCTAVELINK_H
diff --git a/gui/src/backend/OctaveMainThread.cpp b/gui/src/backend/OctaveMainThread.cpp
--- a/gui/src/backend/OctaveMainThread.cpp
+++ b/gui/src/backend/OctaveMainThread.cpp
@@ -22,12 +22,12 @@ OctaveMainThread::OctaveMainThread (QObj
 {
 }
 
 void
 OctaveMainThread::run ()
 {
   setlocale(LC_ALL, "en_US.UTF-8");
   int argc = 1;
-  const char *argv[] = { "octave" };
+  const char *argv[] = { "" };
   emit ready();
   octave_main (argc, (char **) argv, 0);
 }
