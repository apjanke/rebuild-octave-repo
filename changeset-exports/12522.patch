# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1300513653 25200
#      Fri Mar 18 22:47:33 2011 -0700
# Node ID 33bbae85769aac5da079b77fb51400f3f5cd20ca
# Parent  02e48856e4860d642cc75547f31eaa19e74cdd37
Add uimenu, uigetdir, uigetfile, and uiputfile to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2010-03-18  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/doccheck/aspell-octave.en.pws, interpreter/io.txi,
+	interpreter/octave.texi, interpreter/plot.txi: Add uimenu, uigetdir,
+	uigetfile, and uiputfile to documentation.
+
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/nonlin.txi, interpreter/octave.texi: Add fminbnd,
 	fminunc functions to documentation.
 
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/arith.txi, interpreter/linalg.txi: Add function chop
diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -15,16 +15,17 @@ aleph
 alnum
 alphanum
 amd
 anova
 ANOVA
 Anymap
 API
 approximant
+arg
 ARMA
 arpack
 ascii
 Ashok
 async
 atan
 Attr
 AutoCAD
@@ -146,16 +147,17 @@ CorelDraw
 corrcoef
 cosecant
 courseware
 cov
 CPLEX
 CreateFcn
 csymamd
 ctranspose
+CTRL
 CTS
 cURL
 Cuthill
 cxsparse
 Cygwin
 DAE
 DAEs
 daspk
@@ -268,16 +270,17 @@ finv
 FIRfilter
 FIXME
 FlashPix
 FLTK
 fltk
 fontconfig
 fontname
 forall
+foregroundcolor
 formfeed
 Fortran
 fpdf
 fprintf
 FreeBSD
 freespacing
 freetype
 frnd
@@ -530,18 +533,20 @@ Montanet
 mpoles
 mpower
 mrdivide
 mtimes
 Multi
 multi
 multibyte
 multiline
+MultiSelect
 mxArray
 myclass
+myfun
 nabla
 NaN
 NaNs
 nargin
 nbincdf
 nbininv
 nbinpdf
 nbinrnd
@@ -789,16 +794,17 @@ subfunction
 Subfunction
 Subfunctions
 subfunctions
 subinterval
 sublicenses
 Sublicensing
 submatrices
 submatrix
+submenu
 subprocess
 subprocesses
 Subprocesses
 subsasgn
 subscripted
 Subscripted
 subscripting
 subseteq
@@ -858,17 +864,19 @@ Tsang
 tuples
 Tx
 txi
 typedefs
 ub
 UB
 uchar
 UID
+uimenu
 uint
+uiputfile
 ulong
 Ultrix
 umfpack
 uminus
 un
 Unary
 unary
 uncomment
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -23,16 +23,17 @@ Octave supports several ways of reading 
 prompt or a file.  The simplest functions for data Input and Output
 (I/O) are easy to use, but only provides limited control of how
 data is processed.  For more control, a set of functions modelled
 after the C standard library are also provided by Octave.
 
 @menu
 * Basic Input and Output::      
 * C-Style I/O Functions::       
+* GUI Dialogs for I/O::       
 @end menu
 
 @node Basic Input and Output
 @section Basic Input and Output
 
 @c We could use a two-line introduction here...
 
 @menu
@@ -1055,8 +1056,21 @@ four characters, and then returns to the
 @group
 marker = ftell (myfile);
 frewind (myfile);
 fourch = fgets (myfile, 4);
 fseek (myfile, marker, SEEK_SET);
 @end group
 @end example
 
+@node GUI Dialogs for I/O
+@section GUI Dialogs for I/O
+
+Simple dialog menus are available for choosing directories or files.  They
+return a string variable which can then be used when calling any command
+requiring a file name.
+
+@DOCSTRING(uigetdir)
+
+@DOCSTRING(uigetfile)
+
+@DOCSTRING(uiputfile)
+
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -456,16 +456,17 @@ Debugging
 * Breakpoints::
 * Debug Mode::
 * Call Stack::
 
 Input and Output
 
 * Basic Input and Output::      
 * C-Style I/O Functions::       
+* GUI Dialogs for I/O::       
 
 Basic Input and Output
 
 * Terminal Output::             
 * Terminal Input::              
 * Simple File I/O::             
 * Rational Approximations::
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -818,24 +818,27 @@ writes the current figure to an encapsul
 
 @DOCSTRING(orient)
 
 @node Interacting with Plots
 @subsection Interacting with Plots
 
 The user can select points on a plot with the @code{ginput} function or
 selection the position at which to place text on the plot with the
-@code{gtext} function using the mouse.
+@code{gtext} function using the mouse.  Menus may also be created
+and populated with specific user commands via the @code{uimenu} function.
 
 @DOCSTRING(ginput)
 
 @DOCSTRING(waitforbuttonpress)
 
 @DOCSTRING(gtext)
 
+@DOCSTRING(uimenu)
+
 @node Test Plotting Functions
 @subsection Test Plotting Functions
 
 The functions @code{sombrero} and @code{peaks} provide a way to check
 that plotting is working.  Typing either @code{sombrero} or @code{peaks}
 at the Octave prompt should display a three-dimensional plot.
 
 @DOCSTRING(sombrero)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-03-18  Rik  <octave@nomad.inbox5.com>
+
+	* plot/uigetdir.m, plot/uigetfile.m, plot/uimenu.m, plot/uiputfile.m:
+	Improve docstrings.  Check for error conditions (missing FLTK, wrong
+	number of arguments) at top of code.
+
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* general/curl.m, general/divergence.m, linear-algebra/cross.m:
 	Update seealso cross references.
 
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* help/get_first_help_sentence.m: Improve docstring.  Add tests.
diff --git a/scripts/plot/uigetdir.m b/scripts/plot/uigetdir.m
old mode 100755
new mode 100644
--- a/scripts/plot/uigetdir.m
+++ b/scripts/plot/uigetdir.m
@@ -15,38 +15,39 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{dirname} =} uigetdir ()
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path})
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path}, @var{dialog_name})
-## Open a GUI dialog to select a directory.  If @var{init_path} is not given
-## the current working directory is used.  @var{dialog_name} optionally be
+## Open a GUI dialog for selecting a directory.  If @var{init_path} is not 
+## given the current working directory is used.  @var{dialog_name} may be
 ## used to customize the dialog title.
+## @seealso{uigetfile}
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function dirname = uigetdir (init_path = pwd, dialog_name = "Choose directory?")
 
+  if (exist("__fltk_uigetfile__") != 3)
+    error ("uigetfile: fltk graphics toolkit required");
+  endif
+
   if (nargin > 2)
     print_usage ();
   endif
 
   if (!ischar (init_path) || !ischar (dialog_name))
     error ("uigetdir: INIT_PATH and DIALOG_NAME must be string arguments");
   endif
 
-  if (exist ("__fltk_uigetfile__") == 3)
-      if (!isdir (init_path))
-        init_path = fileparts (init_path);
-      endif
-      dirname = __fltk_uigetfile__ ("", dialog_name, init_path, [240, 120], "dir");
-  else
-    error ("uigetdir: fltk graphics toolkit required");
+  if (!isdir (init_path))
+    init_path = fileparts (init_path);
   endif
+  dirname = __fltk_uigetfile__ ("", dialog_name, init_path, [240, 120], "dir");
 
 endfunction
 
 %!demo
 %! uigetdir(pwd, "Select Directory")
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
old mode 100755
new mode 100644
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -12,151 +12,150 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uigetfile (@var{flt})
+## @deftypefn  {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uigetfile ()
+## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt})
+## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt}, @var{dialog_name})
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt}, @var{dialog_name}, @var{default_file})
-## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt}, @var{dialog_name})
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@dots{}, "Position", [@var{px}, @var{py}])
-## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@dots{}, "Multiselect", @var{mode})
+## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@dots{}, "MultiSelect", @var{mode})
 ##
-## Open a GUI dialog to select a file.  It returns the filename @var{fname},
+## Open a GUI dialog for selecting a file.  It returns the filename @var{fname},
 ## the path to this file @var{fpath}, and the filter index @var{fltidx}.
 ## @var{flt} contains a (list of) file filter string(s) in one of the following
 ## formats:
 ##
 ## @table @asis
 ## @item "/path/to/filename.ext"
-## If a filename is given the file extension is extracted and used as filter.
-## In addtion the path is selected as current path and the filname is selected
-## as default file.
-## Example: @code{uigetfile ("myfun.m")}
+## If a filename is given then the file extension is extracted and used as
+## filter.  In addition, the path is selected as current path and the filename
+## is selected as default file.  Example: @code{uigetfile ("myfun.m")}
 ##
 ## @item A single file extension "*.ext"
 ## Example: @code{uigetfile ("*.ext")}
 ##
 ## @item A 2-column cell array
-## containing the file extension in the first column and a brief description
+## containing a file extension in the first column and a brief description
 ## in the second column.
 ## Example: @code{uigetfile (@{"*.ext", "My Description";"*.xyz",
 ## "XYZ-Format"@})}
 ##
 ## The filter string can also contain a semicolon separated list of filter
 ## extensions.
 ## Example: @code{uigetfile (@{"*.gif;*.png;*.jpg", "Supported Picture
 ## Formats"@})}
 ## @end table
 ##
 ## @var{dialog_name} can be used to customize the dialog title.
-## If @var{default_file} is given it is selected in the GUI dialog.
-## If in addtion a path is given it is also used as current path.
+## If @var{default_file} is given then it will be selected in the GUI dialog.
+## If, in addition, a path is given it is also used as current path.
 ##
 ## The screen position of the GUI dialog can be set using the "Position" key
 ## and a 2-element vector containing the pixel coordinates.
-## Two or more files can be selected when setting the "Multiselect" key to "on".
+## Two or more files can be selected when setting the "MultiSelect" key to "on".
 ## In that case @var{fname} is a cell array containing the files.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function [retfile, retpath, retindex] = uigetfile (varargin)
 
-  if (nargin <= 7)
-
-    defaultvals = {"All Files(*)", #FLTK File Filter
-                   "Open File?",   #Dialog Title
-                   pwd,            #FLTK default file name
-                   [240, 120],     #Dialog Position (pixel x/y)
-                   "off"};         #Multiselect on/off
-
-    outargs = cell (5, 1);
-    for i = 1 : 5
-      outargs{i} = defaultvals{i};
-    endfor
-
-    idx1 = idx2 = [];
-    if (length (varargin) > 0)
-      for i = 1 : length (varargin)
-        val = varargin{i};
-        if (ischar (val))
-          if (strncmp (tolower (val), "multiselect", 11))
-            idx1 = i;
-          elseif (strncmp(tolower (val), "position", 8))
-            idx2 = i;
-          endif
-        endif
-      endfor
-    endif
-
-    stridx = [idx1, idx2, 0];
-    if (length (stridx) > 1)
-      stridx = min (stridx(1 : end - 1));
-    endif
-
-    args = varargin;
-    if (stridx)
-      args = varargin(1 : stridx - 1);
-    endif
+  if (exist("__fltk_uigetfile__") != 3)
+    error ("uigetfile: fltk graphics toolkit required");
+  endif
 
-    len = length (args);
-    if (len > 0)
-      file_filter = args{1};
-      outargs{1} = __fltk_file_filter__ (file_filter);
-      if (ischar (file_filter))
-        outargs{3} = file_filter;
-      endif
-    endif
-
-    if (len > 1)
-      outargs{2} = args{2};
-    endif
-
-    if (len > 2)
-      outargs{3} = args{3};
-    endif
-
-    if (stridx)
-      ## we have string arguments ("position" or "multiselect")
-
-      ## check for even number of remaining arguments, prop/value pair(s)
-      if (rem (nargin - stridx + 1, 2))
-        error ("uigetfile: expecting property/value pairs");
-      endif
-
-      for i = stridx : 2 : nargin
-        prop = varargin{i};
-        val = varargin{i + 1};
-        if (strncmp (tolower (prop), "position", 8))
-          if (ismatrix (val) && length(val) == 2)
-            outargs{4} = val;
-          else
-            error ("uigetfile: expecting 2-element vector for position argument");
-          endif
-        elseif (strncmp (tolower (prop), "multiselect", 11))
-          if (ischar (val))
-            outargs{5} = tolower (val);
-          else
-            error ("uigetfile: expecting string argument (on/off) for multiselect");
-          endif
-        else
-          error ("uigetfile: unknown argument");
-        endif
-      endfor
-    endif
-  else
+  if (nargin > 7)
     error ("uigetfile: number of input arguments must be less than eight");
   endif
 
-  if (exist("__fltk_uigetfile__") == 3)
-    [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
-  else
-    error ("uigetfile: fltk graphics toolkit required");
+  defaultvals = {"All Files(*)", #FLTK File Filter
+                 "Open File?",   #Dialog Title
+                 pwd,            #FLTK default file name
+                 [240, 120],     #Dialog Position (pixel x/y)
+                 "off"};         #MultiSelect on/off
+
+  outargs = cell (5, 1);
+  for i = 1 : 5
+    outargs{i} = defaultvals{i};
+  endfor
+
+  idx1 = idx2 = [];
+  if (length (varargin) > 0)
+    for i = 1 : length (varargin)
+      val = varargin{i};
+      if (ischar (val))
+        if (strncmp (tolower (val), "multiselect", 11))
+          idx1 = i;
+        elseif (strncmp(tolower (val), "position", 8))
+          idx2 = i;
+        endif
+      endif
+    endfor
+  endif
+
+  stridx = [idx1, idx2, 0];
+  if (length (stridx) > 1)
+    stridx = min (stridx(1 : end - 1));
+  endif
+
+  args = varargin;
+  if (stridx)
+    args = varargin(1 : stridx - 1);
   endif
 
+  len = length (args);
+  if (len > 0)
+    file_filter = args{1};
+    outargs{1} = __fltk_file_filter__ (file_filter);
+    if (ischar (file_filter))
+      outargs{3} = file_filter;
+    endif
+  endif
+
+  if (len > 1)
+    outargs{2} = args{2};
+  endif
+
+  if (len > 2)
+    outargs{3} = args{3};
+  endif
+
+  if (stridx)
+    ## we have string arguments ("position" or "multiselect")
+
+    ## check for even number of remaining arguments, prop/value pair(s)
+    if (rem (nargin - stridx + 1, 2))
+      error ("uigetfile: expecting property/value pairs");
+    endif
+
+    for i = stridx : 2 : nargin
+      prop = varargin{i};
+      val = varargin{i + 1};
+      if (strncmp (tolower (prop), "position", 8))
+        if (ismatrix (val) && length(val) == 2)
+          outargs{4} = val;
+        else
+          error ("uigetfile: expecting 2-element vector for position argument");
+        endif
+      elseif (strncmp (tolower (prop), "multiselect", 11))
+        if (ischar (val))
+          outargs{5} = tolower (val);
+        else
+          error ("uigetfile: expecting string argument (on/off) for multiselect");
+        endif
+      else
+        error ("uigetfile: unknown argument");
+      endif
+    endfor
+  endif
+
+  [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
+
 endfunction
 
 %!demo
 %! uigetfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"})
diff --git a/scripts/plot/uimenu.m b/scripts/plot/uimenu.m
--- a/scripts/plot/uimenu.m
+++ b/scripts/plot/uimenu.m
@@ -14,25 +14,25 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} uimenu (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {} uimenu (@var{h}, @var{property}, @var{value}, @dots{})
-## Create an uimenu object and return a handle to it.  If @var{h} is ommited
-## then a top level menu entry for the current figure is created.  If @var{h}
+## Create a uimenu object and return a handle to it.  If @var{h} is ommited
+## then a top-level menu for the current figure is created.  If @var{h}
 ## is given then a submenu relative to @var{h} is created.
 ##
-## Uimenu objects have the following specific properties:
+## uimenu objects have the following specific properties:
 ##
 ## @table @asis
 ## @item "accelerator"
-## A string containg the key combination together with CTRL to execute this
+## A string containing the key combination together with CTRL to execute this
 ## menu entry (e.g., "x" for CTRL+x).
 ##
 ## @item "callback"
 ## Is the function called when this menu entry is executed.  It can be either a
 ## function string (e.g., "myfun"), a function handle (e.g., @@myfun) or a cell
 ## array containing the function handle and arguments for the callback
 ## function (e.g., @{@@myfun, arg1, arg2@}).
 ##
@@ -43,27 +43,26 @@
 ## Can be set "on" or "off".  If disabled the menu entry cannot be selected
 ## and it is grayed out.
 ##
 ## @item "foregroundcolor"
 ## A color value setting the text color for this menu entry.
 ##
 ## @item "label"
 ## A string containing the label for this menu entry.  A "&"-symbol can be
-## used to mark the "accelerator" character (e.g., "E&xit")
+## used to mark the "accelerator" character (e.g., @nospell{"E&xit"})
 ##
 ## @item "position"
 ## An scalar value containing the relative menu position.  The entry with the
 ## lowest value is at the first position starting from left or top.
 ##
 ## @item "separator"
 ## Can be set "on" or "off".  If enabled it draws a separator line above the
 ## current position.  It is ignored for top level entries.
 ##
-##
 ## @end table
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## f = uimenu("label", "&File", "accelerator", "f");
 ## e = uimenu("label", "&Edit", "accelerator", "e");
diff --git a/scripts/plot/uiputfile.m b/scripts/plot/uiputfile.m
old mode 100755
new mode 100644
--- a/scripts/plot/uiputfile.m
+++ b/scripts/plot/uiputfile.m
@@ -12,28 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile (@var{flt}, @var{dialog_name}, @var{default_file})
-## @deftypefnx {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile (@var{flt}, @var{dialog_name})
+## @deftypefn  {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile ()
 ## @deftypefnx {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile (@var{flt})
-## @deftypefnx {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile ())
-## Open a GUI dialog to select a file.  @var{flt} contains a (list of) file
+## @deftypefnx {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile (@var{flt}, @var{dialog_name})
+## @deftypefnx {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uiputfile (@var{flt}, @var{dialog_name}, @var{default_file})
+## Open a GUI dialog for selecting a file.  @var{flt} contains a (list of) file
 ## filter string(s) in one of the following formats:
 ##
 ## @table @code
 ## @item "/path/to/filename.ext"
 ## If a filename is given the file extension is
 ## extracted and used as filter.
-## In addtion the path is selected as current path and the filname is selected
+## In addition the path is selected as current path and the filename is selected
 ## as default file.
 ## Example: uiputfile("myfun.m");
 ##
 ## @item "*.ext"
 ## A single file extension.
 ## Example: uiputfile("*.ext");
 ##
 ## @item @{"*.ext","My Description"@}
@@ -43,58 +43,56 @@
 ## @end table
 ##
 ## The filter string can also contain a semicolon separated list of filter
 ## extensions.
 ## Example: uiputfile(@{"*.gif;*.png;*.jpg", "Supported Picture Formats"@});
 ##
 ## @var{dialog_name} can be used to customize the dialog title.
 ## If @var{default_file} is given it is preselected in the GUI dialog.
-## If in addtion a path is given it is also used as current path.
+## If, in addition, a path is given it is also used as current path.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function [retfile, retpath, retindex] = uiputfile (varargin)
 
-  if (nargin <= 3)
-
-    defaultvals = {"All Files(*)", #FLTK File Filter
-                   "Save File?",   #Dialog Title
-                   pwd,            #FLTK default file name
-                   [240, 120],     #Dialog Position (pixel x/y)
-                   "create"};
-
-    outargs = cell(5, 1);
-    for i = 1 : 5
-      outargs{i} = defaultvals{i};
-    endfor
+  if (exist("__fltk_uigetfile__") != 3)
+    error ("uiputfile: fltk graphics toolkit required");
+  endif
 
-    if (nargin > 0)
-      file_filter = varargin{1};
-      outargs{1} = __fltk_file_filter__ (file_filter);
-      if (ischar (file_filter))
-        outargs{3} = file_filter;
-      endif
-    endif
-
-    if (nargin > 1)
-      outargs{2} = varargin{2};
-    endif
-
-    if (nargin > 2)
-      outargs{3} = varargin{3};
-    endif
-
-  else
-    error ("uiputfile: number of input arguments must be less than four");
+  if (nargin > 3)
+    print_usage ();
   endif
 
-  if (exist("__fltk_uigetfile__") == 3)
-    [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
-  else
-    error ("uiputfile: fltk graphics toolkit required");
+  defaultvals = {"All Files(*)", #FLTK File Filter
+                 "Save File?",   #Dialog Title
+                 pwd,            #FLTK default file name
+                 [240, 120],     #Dialog Position (pixel x/y)
+                 "create"};
+
+  outargs = cell(5, 1);
+  for i = 1 : 5
+    outargs{i} = defaultvals{i};
+  endfor
+
+  if (nargin > 0)
+    file_filter = varargin{1};
+    outargs{1} = __fltk_file_filter__ (file_filter);
+    if (ischar (file_filter))
+      outargs{3} = file_filter;
+    endif
   endif
 
+  if (nargin > 1)
+    outargs{2} = varargin{2};
+  endif
+
+  if (nargin > 2)
+    outargs{3} = varargin{3};
+  endif
+
+  [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
+
 endfunction
 
 %!demo
 %! uiputfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"})
