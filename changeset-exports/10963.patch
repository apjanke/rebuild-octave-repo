# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284359012 -7200
#      Mon Sep 13 08:23:32 2010 +0200
# Node ID 0d7624852beb52895bcef4d310fe1f047f496b96
# Parent  efc0f560e6905c331d7417e74fcc9e8b68411e13
implement cellindexmat function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellindexmat): New DEFUN.
+
 2010-09-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-fcn-handle.cc (octave_fcn_binder::maybe_binder): Stash name tags
 	in the template.
 	(octave_fcn_binder::do_multi_index_op): Don't use xelem to ensure
 	proper unsharing. Make a shallow copy prior to call to ensure
 	consistency throughout recursive calls.
 
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -1572,8 +1572,51 @@ slicing is done along the first non-sing
 }
 
 /*
 %!test
 %! m = [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11, 12];
 %! c = cellslices (m, [1, 2], [2, 3], 2);
 %! assert (c, {[1, 2; 5, 6; 9, 10], [2, 3; 6, 7; 10, 11]});
 */
+
+DEFUN_DLD (cellindexmat, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{y} =} cellindexmat (@var{x}, @var{varargin})\n\
+Given a cell array of matrices @var{x}, this function computes\n\
+@example\n\
+  Y = cell (size (X));\n\
+  for i = 1:numel (X)\n\
+    Y@{i@} = X@{i@}(varargin@{:@});\n\
+  endfor\n\
+@end example\n\
+@seealso{cellfun, cellslices}\n\
+@end deftypefn")
+{
+  octave_value retval;
+  if (args.length () >= 1)
+    {
+      if (args(0).is_cell ())
+        {
+          const Cell x = args(0).cell_value ();
+          NoAlias<Cell> y(x.dims ());
+          octave_idx_type nel = x.numel ();
+          octave_value_list idx = args.slice (1, args.length () - 1);
+
+          for (octave_idx_type i = 0; i < nel; i++)
+            {
+              octave_quit ();
+              octave_value tmp = x(i);
+              y(i) = tmp.do_index_op (idx);
+              if (error_state)
+                break;
+            }
+
+          retval = y;
+        }
+      else
+        error ("cellindexmat: first argument must be a cell");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
