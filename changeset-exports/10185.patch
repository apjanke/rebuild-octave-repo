# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264160223 -3600
#      Fri Jan 22 12:37:03 2010 +0100
# Node ID 455759a5fcbe2cd426d3c47623954596d44ee866
# Parent  b39bd23019eb3420f5c3a00cea02a616cd906b77
fix norm and svd on empty matrices

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dbleSVD.cc (SVD::init): Ensure LD* arguments >= 1.
+	* floatSVD.cc (FloatSVD::init): Likewise.
+	* CmplxSVD.cc (ComplexSVD::init): Likewise.
+	* fCmplxSVD.cc (FloatComplexSVD::init): Likewise.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc, fCMatrix.cc, cmd-edit.cc, cmd-hist.cc,
 	file-ops.cc, file-ops.h, file-stat.cc, file-stat.h, filemode.c,
 	kpse.cc, lo-cutils.c, lo-sysdep.cc, lo-utils.cc, oct-env.cc,
 	oct-group.cc, oct-group.h, oct-passwd.cc, oct-passwd.h,
 	oct-time.cc, oct-syscalls.cc, oct-syscalls.h, statdefs.h,
 	sysdir.h, syswait.h, tempname.c, regex-match.h:
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -136,31 +136,33 @@ ComplexSVD::init (const ComplexMatrix& a
   Array<double> rwork (lrwork);
 
   // Ask ZGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<Complex> work (1);
 
+  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+
   F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork,
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   lwork = static_cast<octave_idx_type> (work(0).real ());
   work.resize (lwork);
 
   F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork,
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -132,30 +132,32 @@ SVD::init (const Matrix& a, SVD::type sv
   double *vt = right_sm.fortran_vec ();
 
   // Ask DGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<double> work (1);
 
+  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+
   F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork, info
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   lwork = static_cast<octave_idx_type> (work(0));
   work.resize (lwork);
 
   F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork, info
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.transpose ();
 
   return info;
 }
diff --git a/liboctave/fCmplxSVD.cc b/liboctave/fCmplxSVD.cc
--- a/liboctave/fCmplxSVD.cc
+++ b/liboctave/fCmplxSVD.cc
@@ -136,31 +136,33 @@ FloatComplexSVD::init (const FloatComple
   Array<float> rwork (lrwork);
 
   // Ask ZGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<FloatComplex> work (1);
 
+  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+
   F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork,
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   lwork = static_cast<octave_idx_type> (work(0).real ());
   work.resize (lwork);
 
   F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork,
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork,
 			     rwork.fortran_vec (), info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
diff --git a/liboctave/floatSVD.cc b/liboctave/floatSVD.cc
--- a/liboctave/floatSVD.cc
+++ b/liboctave/floatSVD.cc
@@ -132,30 +132,32 @@ FloatSVD::init (const FloatMatrix& a, SV
   float *vt = right_sm.fortran_vec ();
 
   // Ask DGESVD what the dimension of WORK should be.
 
   octave_idx_type lwork = -1;
 
   Array<float> work (1);
 
+  octave_idx_type m1 = std::max (m, 1), nrow_vt1 = std::max (nrow_vt, 1);
+
   F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork, info
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   lwork = static_cast<octave_idx_type> (work(0));
   work.resize (lwork);
 
   F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
 			     F77_CONST_CHAR_ARG2 (&jobv, 1),
-			     m, n, tmp_data, m, s_vec, u, m, vt,
-			     nrow_vt, work.fortran_vec (), lwork, info
+			     m, n, tmp_data, m1, s_vec, u, m1, vt,
+			     nrow_vt1, work.fortran_vec (), lwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.transpose ();
 
   return info;
 }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (Fnorm): Don't special-case empty matrix.
+	* DLD-FUNCTIONS/svd.cc (Fsvd): Fix empty matrix case. Add tests.
+
 2010-01-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-builtin.cc (octave_builtin::do_multi_index_op): Partially undo
 	previous change.
 	* ov-type-conv.h (octave_type_conv_body): Undo previous change.
 	* ov-dld-fcn.cc (octave_dld_function::do_multi_index_op): Ditto.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -129,49 +129,71 @@ decomposition, eliminating the unnecessa
       return retval;
     }
 
   octave_value arg = args(0);
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
+  if (arg.ndims () != 2)
+    {
+      error ("svd: only valid for matrices");
+      return retval;
+    }
+
   bool isfloat = arg.is_single_type ();
 
+  SVD::type type = ((nargout == 0 || nargout == 1)
+                    ? SVD::sigma_only
+                    : (nargin == 2) ? SVD::economy : SVD::std);
+
   if (nr == 0 || nc == 0)
     {
       if (isfloat)
         {
-          if (nargout == 3)
+          switch (type)
             {
-              retval(3) = float_identity_matrix (nr, nr);
-              retval(2) = FloatMatrix (nr, nc);
-              retval(1) = float_identity_matrix (nc, nc);
+            case SVD::std:
+              retval(2) = FloatDiagMatrix (nc, nc, 1.0f);
+              retval(1) = FloatMatrix (nr, nc);
+              retval(0) = FloatDiagMatrix (nr, nr, 1.0f);
+              break;
+            case SVD::economy:
+              retval(2) = FloatDiagMatrix (0, nc, 1.0f);
+              retval(1) = FloatMatrix (0, 0);
+              retval(0) = FloatDiagMatrix (nr, 0, 1.0f);
+              break;
+            case SVD::sigma_only: default:
+              retval(0) = FloatMatrix (0, 1);
+              break;
             }
-          else
-            retval(0) = FloatMatrix (0, 1);
         }
       else
         {
-          if (nargout == 3)
+          switch (type)
             {
-              retval(3) = identity_matrix (nr, nr);
-              retval(2) = Matrix (nr, nc);
-              retval(1) = identity_matrix (nc, nc);
+            case SVD::std:
+              retval(2) = DiagMatrix (nc, nc, 1.0);
+              retval(1) = Matrix (nr, nc);
+              retval(0) = DiagMatrix (nr, nr, 1.0);
+              break;
+            case SVD::economy:
+              retval(2) = DiagMatrix (0, nc, 1.0);
+              retval(1) = Matrix (0, 0);
+              retval(0) = DiagMatrix (nr, 0, 1.0);
+              break;
+            case SVD::sigma_only: default:
+              retval(0) = Matrix (0, 1);
+              break;
             }
-          else
-            retval(0) = Matrix (0, 1);
         }
     }
   else
     {
-      SVD::type type = ((nargout == 0 || nargout == 1)
-                        ? SVD::sigma_only
-                        : (nargin == 2) ? SVD::economy : SVD::std);
-
       if (isfloat)
         {
           if (arg.is_real_type ())
             {
               FloatMatrix tmp = arg.float_matrix_value ();
 
               if (! error_state)
                 {
@@ -350,13 +372,27 @@ decomposition, eliminating the unnecessa
 %! [u, s, v] = svd (a, 1);
 %! assert (u * s * v', a, sqrt (eps('single')));
 
 %!test
 %! a = single([1, 2; 3, 4; 5, 6]);
 %! [u, s, v] = svd (a, 1);
 %! assert (u * s * v', a, sqrt (eps('single')));
 
+%!test
+%! a = zeros (0, 5);
+%! [u, s, v] = svd (a);
+%! assert (size (u), [0, 0]);
+%! assert (size (s), [0, 5]);
+%! assert (size (v), [5, 5]);
+
+%!test
+%! a = zeros (5, 0);
+%! [u, s, v] = svd (a, 1);
+%! assert (size (u), [5, 0]);
+%! assert (size (s), [0, 0]);
+%! assert (size (v), [0, 0]);
+
 %!error <Invalid call to svd.*> svd ();
 %!error <Invalid call to svd.*> svd ([1, 2; 4, 5], 2, 3);
 %!error <Invalid call to svd.*> [u, v] = svd ([1, 2; 3, 4]);
 
 */
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5056,24 +5056,17 @@ column norms are computed.\n\
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin >= 1 && nargin <= 3)
     {
       octave_value x_arg = args(0);
 
-      if (x_arg.is_empty ())
-	{
-	  if (x_arg.is_single_type ())
-	    retval(0) = static_cast<float>(0.0);
-	  else
-	    retval(0) = 0.0;
-	}
-      else if (x_arg.ndims () == 2)
+      if (x_arg.ndims () == 2)
 	{
           enum { sfmatrix, sfcols, sfrows, sffrob, sfinf } strflag = sfmatrix;
           if (nargin > 1 && args(nargin-1).is_string ())
             {
               std::string str = args(nargin-1).string_value ();
               if (str == "cols" || str == "columns")
                 strflag = sfcols;
               else if (str == "rows")
