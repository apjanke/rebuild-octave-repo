# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1541251657 14400
#      Sat Nov 03 09:27:37 2018 -0400
# Node ID 0af4653e48a4e8382cc3753726ebbe1b4c78cd01
# Parent  d2aae3570c8165bc5b75b68f2f46d4932cdfd666
install auto function vars in symbol scope when parsing function

* symscope.h, symscope.cc (symbol_scope::install_auto_fcn_vars,
symbol_scope_rep::install_auto_fcn_vars,
symbol_scope_rep::install_auto_fcn_var): New functions.

* oct-parse.yy (base_parser::finish_function):
Call symbol_scope::install_auto_fcn_vars.

diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -34,16 +34,32 @@ along with Octave; see the file COPYING.
 #include "ov-usr-fcn.h"
 #include "symrec.h"
 #include "symscope.h"
 #include "symtab.h"
 #include "utils.h"
 
 namespace octave
 {
+  void symbol_scope_rep::install_auto_fcn_vars (void)
+  {
+    install_auto_fcn_var (".argn.");
+    install_auto_fcn_var (".ignored.");
+    install_auto_fcn_var (".nargin.");
+    install_auto_fcn_var (".nargout.");
+    install_auto_fcn_var (".saved_warning_states.");
+  }
+
+  void symbol_scope_rep::install_auto_fcn_var (const std::string& name)
+  {
+    insert (name, true);
+    mark_hidden (name);
+    mark_automatic (name);
+  }
+
   octave_value
   symbol_scope_rep::find (const std::string& name,
                           const octave_value_list& args,
                           bool skip_variables, bool local_funcs)
   {
     // Variable.
 
     symbol_table& symtab
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -77,16 +77,20 @@ namespace octave
 
     ~symbol_scope_rep (void) = default;
 
     void insert_symbol_record (const symbol_record& sr)
     {
       m_symbols[sr.name ()] = sr;
     }
 
+    void install_auto_fcn_vars (void);
+
+    void install_auto_fcn_var (const std::string& name);
+
     bool is_nested (void) const { return m_is_nested; }
 
     void mark_nested (void) { m_is_nested = true; }
 
     bool is_static (void) const { return m_is_static; }
 
     void mark_static (void) { m_is_static = true; }
 
@@ -622,16 +626,22 @@ namespace octave
     explicit operator bool () const { return bool (m_rep); }
 
     void insert_symbol_record (const symbol_record& sr)
     {
       if (m_rep)
         m_rep->insert_symbol_record (sr);
     }
 
+    void install_auto_fcn_vars (void)
+    {
+      if (m_rep)
+        m_rep->install_auto_fcn_vars ();
+    }
+
     bool is_nested (void) const
     {
       return m_rep ? m_rep->is_nested () : false;
     }
 
     void mark_nested (void)
     {
       if (m_rep)
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3467,16 +3467,17 @@ namespace octave
         std::string file = fcn->fcn_file_name ();
 
         std::string tmp = nm;
         if (! file.empty ())
           tmp += ": " + file;
 
         symbol_scope fcn_scope = fcn->scope ();
         fcn_scope.cache_name (tmp);
+        fcn_scope.install_auto_fcn_vars ();
 
         if (lc)
           fcn->stash_leading_comment (lc);
 
         fcn->define_ret_list (ret_list);
 
         if (m_curr_fcn_depth > 1 || m_parsing_subfunctions)
           {
