# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233027320 18000
#      Mon Jan 26 22:35:20 2009 -0500
# Node ID 4e39b00218d305b6ecbb18703b696430095c1f78
# Parent  dacfd030633a4b6359c93418159fa80f8d381da2
load-path.cc (load_path::do_find_fcn): handle @foo/bar

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-26  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (load_path::do_find_fcn): Handle @foo/bar.
+
 2009-01-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-cell.cc (tree_cell::rvalue): Optimize the single row case.
 
 2009-01-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (octave_struct::subsasgn): Reshape cs-list on rhs 
 	according to the index expression.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -898,40 +898,57 @@ load_path::check_file_type (std::string&
 std::string
 load_path::do_find_fcn (const std::string& fcn, std::string& dir_name,
 			int type) const
 {
   std::string retval;
   
   //  update ();
 
-  dir_name = std::string ();
-
-  const_fcn_map_iterator p = fcn_map.find (fcn);
-
-  if (p != fcn_map.end ())
+  if (fcn.length () > 0 && fcn[0] == '@')
     {
-      const file_info_list_type& file_info_list = p->second;
+      size_t pos = fcn.find ('/');
 
-      for (const_file_info_list_iterator i = file_info_list.begin ();
-	   i != file_info_list.end ();
-	   i++)
+      if (pos != std::string::npos)
 	{
-	  const file_info& fi = *i;
+	  std::string class_name = fcn.substr (1, pos-1);
+	  std::string meth = fcn.substr (pos+1);
 
-	  retval = file_ops::concat (fi.dir_name, fcn);
+	  retval = do_find_method (class_name, meth, dir_name);
+	}
+      else
+	retval = std::string ();
+    }
+  else
+    {
+      dir_name = std::string ();
+
+      const_fcn_map_iterator p = fcn_map.find (fcn);
+
+      if (p != fcn_map.end ())
+	{
+	  const file_info_list_type& file_info_list = p->second;
 
-	  if (check_file_type (retval, type, fi.types,
-			       fcn, "load_path::do_find_fcn"))
+	  for (const_file_info_list_iterator i = file_info_list.begin ();
+	       i != file_info_list.end ();
+	       i++)
 	    {
-	      dir_name = fi.dir_name;
-	      break;
+	      const file_info& fi = *i;
+
+	      retval = file_ops::concat (fi.dir_name, fcn);
+
+	      if (check_file_type (retval, type, fi.types,
+				   fcn, "load_path::do_find_fcn"))
+		{
+		  dir_name = fi.dir_name;
+		  break;
+		}
+	      else
+		retval = std::string ();
 	    }
-	  else
-	    retval = std::string ();
 	}
     }
 
   return retval;
 }
 
 std::string
 load_path::do_find_private_fcn (const std::string& dir,
