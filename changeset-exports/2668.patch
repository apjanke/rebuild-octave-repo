# HG changeset patch
# User jwe
# Date 855858159 0
#      Thu Feb 13 18:22:39 1997 +0000
# Node ID 0d865ef7478f786a06f8a05628c8519d550b5340
# Parent  1d2a83e8a9a3a8c33266f5e1a3a35628ab9aeb0a
[project @ 1997-02-13 18:21:47 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+Tue Feb 11 19:44:28 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-ieee.cc: Declare quiet_nan() and infinity().
+
+Mon Feb 10 01:17:45 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-ops.cc (oct_unlink (const string&, string&)):
+	New two-arg version.
+	(oct_rmdir (const string&, string&)): New two-arg version.
+	(oct_mkdir (const string&, mode_t, string&)): New three-arg version.
+	(oct_mkfifo (const string&, mode_t, string&)): New three-arg version.
+	(oct_rename (const string&, const string&, string&)):
+	New three-arg version.
+
 Fri Feb  7 13:15:55 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): New function.
 
 	* Array2-idx.h (Array2<T>::index (idx_vector&, idx_vector&)):
 	Don't always resize to [](0x0) if one of the indices is empty or
 	zero.
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -233,45 +233,102 @@ is_newer (const string& file, time_t tim
 // We provide a replacement for mkdir().
 
 int
 oct_mkdir (const string& name, mode_t mode)
 {
   return mkdir (name.c_str (), mode);
 }
 
+int
+oct_mkdir (const string& name, mode_t mode, string& msg)
+{
+  msg = string ();
+
+  int status = mkdir (name.c_str (), mode);
+
+  if (status < 0)
+    msg = strerror (errno);
+
+  return status;
+}
+
 // I don't know how to emulate this on systems that don't provide it.
 
 int
 oct_mkfifo (const string& name, mode_t mode)
 {
 #if defined (HAVE_MKFIFO)
   return mkfifo (name.c_str (), mode);
 #else
   ::error ("mkfifo: not implemented on this system");
   return -1;
 #endif
 }
 
+int
+oct_mkfifo (const string& name, mode_t mode, string& msg)
+{
+  msg = string ();
+
+#if defined (HAVE_MKFIFO)
+  int status = mkfifo (name.c_str (), mode);
+
+  if (status < 0)
+    msg = strerror (errno);
+
+  return status;
+#else
+  ::error ("mkfifo: not implemented on this system");
+  return -1;
+#endif
+}
+
 // We provide a replacement for rename().
 
 int
 oct_rename (const string& from, const string& to)
 {
   return rename (from.c_str (), to.c_str ());
 }
 
+int
+oct_rename (const string& from, const string& to, string& msg)
+{
+  msg = string ();
+
+  int status = rename (from.c_str (), to.c_str ());
+
+  if (status < 0)
+    msg = strerror (errno);
+
+  return status;
+}
+
 // We provide a replacement for rmdir().
 
 int
 oct_rmdir (const string& name)
 {
   return rmdir (name.c_str ());
 }
 
+int
+oct_rmdir (const string& name, string& msg)
+{
+  msg = string ();
+
+  int status = rmdir (name.c_str ());
+
+  if (status < 0)
+    msg = strerror (errno);
+
+  return status;
+}
+
 // We provide a replacement for tempnam().
 
 string
 oct_tempnam (void)
 {
   string retval;
 
   char *tmp = tempnam (0, "oct-");
@@ -300,13 +357,26 @@ oct_umask (mode_t mode)
 }
 
 int
 oct_unlink (const string& name)
 {
   return unlink (name.c_str ());
 }
 
+int
+oct_unlink (const string& name, string& errmsg)
+{
+  errmsg = string ();
+
+  int status = unlink (name.c_str ());
+
+  if (status < 0)
+    errmsg = strerror (errno);
+
+  return status;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -187,22 +187,33 @@ private:
   void update_internal (bool force = false);
 
   void copy (const file_stat&);
 };
 
 extern int is_newer (const string&, time_t);
 
 extern int oct_mkdir (const string&, mode_t);
+extern int oct_mkdir (const string&, mode_t, string&);
+
 extern int oct_mkfifo (const string&, mode_t);
+extern int oct_mkfifo (const string&, mode_t, string&);
+
 extern int oct_rename (const string&, const string&);
+extern int oct_rename (const string&, const string&, string&);
+
 extern int oct_rmdir (const string&);
+extern int oct_rmdir (const string&, string&);
+
 extern string oct_tempnam (void);
+
 extern int oct_umask (mode_t);
+
 extern int oct_unlink (const string&);
+extern int oct_unlink (const string&, string&);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -36,16 +36,24 @@ Software Foundation, 59 Temple Place - S
 #define _IEEE 1
 #endif
 #include <nan.h>
 #if defined (SCO)
 #undef _IEEE
 #endif
 #endif
 
+#if defined (HAVE_INFINITY)
+#extern "C" double infinity ();
+#endif
+
+#if defined (HAVE_QUIET_NAN)
+#extern "C" double quiet_nan (long);
+#endif
+
 #include "lo-ieee.h"
 
 // Octave's idea of infinity.
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
@@ -53,17 +61,17 @@ void
 octave_ieee_init (void)
 {
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 
 // Some version of gcc on some old version of Linux used to crash when
 // trying to make Inf and NaN.
 
 #if defined (HAVE_INFINITY)
-  octave_Inf = (double) infinity ();
+  octave_Inf = infinity ();
 #elif defined (linux)
   octave_Inf = HUGE_VAL;
 #elif defined (__alpha__)
   extern unsigned int DINFINITY[2];
   octave_Inf =  (*((double *) (DINFINITY)));
 #elif defined (SCO)
   double tmp = 1.0;
   octave_Inf = 1.0 / (tmp - tmp);
@@ -79,17 +87,17 @@ octave_ieee_init (void)
     }
 #endif
 
 #endif
 
 #if defined (HAVE_ISNAN)
 
 #if defined (HAVE_QUIET_NAN)
-  octave_NaN = (double) quiet_nan ();
+  octave_NaN = quiet_nan (0L);
 #elif defined (linux)
   octave_NaN = NAN;
 #elif defined (__alpha__)
   extern unsigned int DQNAN[2];
   octave_NaN = (*((double *) (DQNAN)));
 #else
   octave_NaN = octave_Inf / octave_Inf;
 #endif
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -118,16 +118,23 @@ gripe_unrecognized_data_fmt (const char 
 
 void
 gripe_data_conversion (const char *from, const char *to)
 {
   error ("unable to convert from %s to %s format", from, to);
 }
 
 void
+gripe_wrong_type_arg (const char *name, const string& s)
+{
+  string type = tc.type_name ();
+  error ("%s: wrong type argument `%s'", name, s.c_str ());
+}
+
+void
 gripe_wrong_type_arg (const char *name, const octave_value& tc)
 {
   string type = tc.type_name ();
   error ("%s: wrong type argument `%s'", name, type.c_str ());
 }
 
 void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op)
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -37,16 +37,17 @@ extern void gripe_square_matrix_required
 extern void gripe_user_supplied_eval (const char *name);
 extern void gripe_user_returned_invalid (const char *name);
 extern void gripe_invalid_conversion (const string& from, const string& to);
 extern void gripe_invalid_value_specified (const char *name);
 extern void gripe_2_or_3_dim_plot (void);
 extern void gripe_unrecognized_float_fmt (void);
 extern void gripe_unrecognized_data_fmt (const char *warn_for);
 extern void gripe_data_conversion (const char *from, const char *to);
+extern void gripe_wrong_type_arg (const char *name, const string& s);
 extern void gripe_wrong_type_arg (const char *name, const octave_value& tc);
 extern void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 extern void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 extern void gripe_implicit_conversion (const char *from, const char *to);
 extern void gripe_divide_by_zero (void);
 
 #endif
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -33,19 +33,21 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
 
-int octave_char_matrix_str::t_id = -1;
+int
+octave_char_matrix_str::t_id (-1);
 
-const string octave_char_matrix_str::t_name ("string");
+const string
+octave_char_matrix_str::t_name ("string");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
   return new octave_matrix (v.matrix_value ());
 }
