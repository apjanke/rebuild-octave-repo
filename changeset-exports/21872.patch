# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465686414 14400
#      Sat Jun 11 19:06:54 2016 -0400
# Node ID adb0b3ac4b50faeea4dd9a545fd7d26cdfd626b7
# Parent  cab605836305ed51c12854bfb01f3068860bfd30
more kpse.cc cleanups

* kpse.cc (kpkpse_expand_kpse_dot, kpse_path_expand): Delete special
treatment of leading !! in path elements since we no longer use the
ls-R cache.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -536,18 +536,18 @@ path_search (const std::string& path, co
       else
         {
           /* We never want to search the whole disk.  */
           while (elt.length () > 1
                  && IS_DIR_SEP (elt[0]) && IS_DIR_SEP (elt[1]))
             elt = elt.substr (1);
         }
 
-      /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
-         (search), also tests first_search, and does the resetting.  */
+      /* Our caller (search), also tests first_search, and does
+         the resetting.  */
       if (first_search)
         found = std::list<std::string> ();
 
       /* Search the filesystem.  */
 
       if (found.empty ())
         {
           std::list<std::string> dirs = kpse_element_dirs (elt);
@@ -704,19 +704,18 @@ path_find_first_of (const std::string& p
       /* We have to search one directory at a time.  */
       dirs = kpse_element_dirs (elt);
       for (const auto &dir : dirs)
         {
           for (auto it = names.cbegin (); it != names.cend () && ! done; it++)
             {
               std::string name = *it;
 
-              /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
-                 (find_first_of), also tests first_search, and does the
-                 resetting.  */
+              /* Our caller (find_first_of), also tests first_search,
+                 and does the resetting.  */
               if (first_search)
                 found = std::list<std::string> ();
 
               /* Search the filesystem.  */
 
               if (found.empty ())
                 {
                   std::list<std::string> tmp;
@@ -971,23 +970,21 @@ kpse_expand_kpse_dot (const std::string&
 
   if (kpse_dot.empty ())
     return path;
 
   for (kpse_path_iterator pi (path); pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
-      /* We assume that the !! magic is only used on absolute components.
-         Single "." get special treatment, as does "./" or its equivalent.  */
+      /* Single "." get special treatment, as does "./" or its equivalent.  */
 
       size_t elt_len = elt.length ();
 
-      if (kpse_absolute_p (elt, false)
-          || (elt_len > 1 && elt[0] == '!' && elt[1] == '!'))
+      if (kpse_absolute_p (elt, false))
         ret += elt + ENV_SEP_STRING;
       else if (elt_len == 1 && elt[0] == '.')
         ret += kpse_dot + ENV_SEP_STRING;
       else if (elt_len > 1 && elt[0] == '.' && IS_DIR_SEP (elt[1]))
         ret += kpse_dot + elt.substr (1) + ENV_SEP_STRING;
       else
         ret += kpse_dot + DIR_SEP_STRING + elt + ENV_SEP_STRING;
     }
@@ -1089,20 +1086,16 @@ kpse_path_expand (const std::string& pat
 
   /* Now expand each of the path elements, printing the results */
   for (kpse_path_iterator pi (tmp); pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
       std::list<std::string> dirs;
 
-      /* Skip and ignore magic leading chars.  */
-      if (elt.length () > 1 && elt[0] == '!' && elt[1] == '!')
-        elt = elt.substr (2);
-
       /* Do not touch the device if present */
       if (NAME_BEGINS_WITH_DEVICE (elt))
         {
           while (elt.length () > 3
                  && IS_DIR_SEP (elt[2]) && IS_DIR_SEP (elt[3]))
             {
               elt[2] = elt[1];
               elt[1] = elt[0];
