# HG changeset patch
# User Rik <rik@octave.org>
# Date 1547741093 28800
#      Thu Jan 17 08:04:53 2019 -0800
# Branch stable
# Node ID f8d380d04b01e7db553b383dfede619f19e2b55a
# Parent  50439c2e8bbfe2ee9662fc465b6656642e6a1fb5
Fix dead assignments found by clang static analysis (bug #55440).

* find.cc (Ffind): Delete "direction = 0;" assignment.

* oct-map.cc (octave_fields::equal_up_to_order): Declare, but don't bother to
initialize retval.  If mismatch is found, return false directly to jump
out of loop.

* oct-stream.cc (printf_format_list::printf_format_list): Delete
"empty_buf = false;"

* oct-stream.cc (textscan::scan_complex): delete unnecessary call to
is.tellg () to get pos which is never used.

* regexp.cc (do_regexp_ptn_string_escapes): Delete "bad_esc_seq = true;".

* ov-java.cc (unbox): Delete "found = false;".

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -403,18 +403,16 @@ b = sparse (i, j, v, sz(1), sz(2));
       else if (! octave::math::isinf (val))
         n_to_find = val;
     }
 
   // Direction to do the searching (1 == forward, -1 == reverse).
   int direction = 1;
   if (nargin > 2)
     {
-      direction = 0;
-
       std::string s_arg = args(2).string_value ();
 
       if (s_arg == "first")
         direction = 1;
       else if (s_arg == "last")
         direction = -1;
       else
         error (R"(find: DIRECTION must be "first" or "last")");
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -119,29 +119,26 @@ octave_fields::orderfields (Array<octave
       perm(i++) = j;
     }
 }
 
 bool
 octave_fields::equal_up_to_order (const octave_fields& other,
                                   octave_idx_type *perm) const
 {
-  bool retval = true;
+  bool retval;
 
   auto p = begin ();
   auto q = other.begin ();
   for (; p != end () && q != other.end (); p++, q++)
     {
       if (p->first == q->first)
         perm[p->second] = q->second;
       else
-        {
-          retval = false;
-          break;
-        }
+        return false;
     }
 
   retval = (p == end () && q == other.end ());
 
   return retval;
 }
 
 bool
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -909,17 +909,16 @@ namespace octave
                 {
                   args = 0;
                   flags = "";
                   fw = -1;
                   prec = -1;
                   modifier = '\0';
                   type = '\0';
                   buf << s[i++];
-                  empty_buf = false;
                 }
                 break;
               }
 
             if (nconv < 0)
               {
                 have_more = false;
                 break;
@@ -2988,18 +2987,18 @@ namespace octave
                         break;
                       }
                   }
               }
           }
 
         if (! is.eof () && ! as_empty)
           {
-            state = is.rdstate ();        // before tellg, since that fails at EOF
-            pos = is.tellg ();
+            state = is.rdstate ();   // before tellg, since that fails at EOF
+
             ch = is.peek ();   // ch == EOF if read failed; no need to chk fail
             if (ch == 'i' || ch == 'j')           // pure imaginary
               {
                 is.get ();
                 im = re;
                 re = 0;
               }
             else if (ch == '+' || ch == '-')      // see if it is real+imag[ij]
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -102,17 +102,16 @@ do_regexp_ptn_string_escapes (const std:
                   int digit = s[k] - '0';
                   if (digit < 0 || digit > 7)
                     break;
                   tmpi <<= 3;
                   tmpi += digit;
                 }
               if (bad_esc_seq || (brace && s[k++] != '}'))
                 {
-                  bad_esc_seq = true;
                   tmpi = 0;
                   warning (R"(malformed octal escape sequence '\o' -- converting to '\0')");
                 }
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1806,17 +1806,16 @@ unbox (JNIEnv *jni_env, const octave_val
                                       (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([I[I)V");
           jobj = jni_env->NewObject
             (jclass (mcls), mID, jintArray (v), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
-          found = false;
           error ("cannot convert matrix of type '%s'",
                  val.class_name ().c_str ());
         }
     }
   else
     {
       jclass rcls = find_octave_class (jni_env, "org/octave/OctaveReference");
       jmethodID mID = jni_env->GetMethodID (rcls, "<init>", "(I)V");
