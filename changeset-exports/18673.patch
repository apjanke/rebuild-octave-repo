# HG changeset patch
# User Rik <rik@octave.org>
# Date 1398373426 25200
#      Thu Apr 24 14:03:46 2014 -0700
# Node ID 1dcc9539234cff9fb9b683135565bb4c0e2fbcf3
# Parent  78fac67300e86817e46e296a23739313dce28072
Fix bug with input() and nargout==0 (bug #42111).

* input.cc (Finput): Call get_user_input() to produce at least 1 output.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -743,39 +743,39 @@ prints the prompt\n\
 \n\
 @example\n\
 Pick a number, any number!\n\
 @end example\n\
 \n\
 @noindent\n\
 and waits for the user to enter a value.  The string entered by the user\n\
 is evaluated as an expression, so it may be a literal constant, a\n\
-variable name, or any other valid expression.\n\
+variable name, or any other valid Octave code.\n\
 \n\
-Currently, @code{input} only returns one value, regardless of the number\n\
-of values produced by the evaluation of the expression.\n\
+The number of return arguments, their size, and their class depend on the\n\
+expression entered.\n\
 \n\
 If you are only interested in getting a literal string value, you can\n\
 call @code{input} with the character string @qcode{\"s\"} as the second\n\
 argument.  This tells Octave to return the string entered by the user\n\
 directly, without evaluating it first.\n\
 \n\
 Because there may be output waiting to be displayed by the pager, it is\n\
 a good idea to always call @code{fflush (stdout)} before calling\n\
 @code{input}.  This will ensure that all pending output is written to\n\
 the screen before your prompt.\n\
-@seealso{yes_or_no, kbhit}\n\
+@seealso{yes_or_no, kbhit, pause}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
-    retval = get_user_input (args, nargout);
+    retval = get_user_input (args, std::max (nargout, 1));
   else
     print_usage ();
 
   return retval;
 }
 
 bool
 octave_yes_or_no (const std::string& prompt)
