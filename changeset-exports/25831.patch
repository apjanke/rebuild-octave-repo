# HG changeset patch
# User Rik <rik@octave.org>
# Date 1535499667 25200
#      Tue Aug 28 16:41:07 2018 -0700
# Branch stable
# Node ID d0062829754a13f36a7a992870114e26772a39c7
# Parent  8ac4bfa550538c0818e1bd40d3a847507a0f4742
Silence compiler warnings about unused functions from cset 8ac4bfa55053.

* pt-cbinop.cc (strip_not, simplify_and_or_op): Use #if 0 / #endif to comment
out unused functions.

diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -52,16 +52,20 @@ namespace octave
           op = octave_value::unknown_unary_op;
 
         return op;
       }
     else
       return octave_value::unknown_unary_op;
   }
 
+#if 0
+  // Restore this code if short-circuit behavior can be preserved when needed.
+  // See bug #54465.
+
   static octave_value::unary_op
   strip_not (octave::tree_expression_ptr_t& exp)
   {
     if (exp->is_unary_expression ())
       {
         octave::tree_unary_expression *uexp =
           dynamic_cast<octave::tree_unary_expression *> (exp);
 
@@ -72,16 +76,17 @@ namespace octave
         else
           op = octave_value::unknown_unary_op;
 
         return op;
       }
     else
       return octave_value::unknown_unary_op;
   }
+#endif
 
   // Possibly convert multiplication to trans_mul, mul_trans, herm_mul,
   // or mul_herm.
 
   static octave_value::compound_binary_op
   simplify_mul_op (octave::tree_expression_ptr_t& a,
                    octave::tree_expression_ptr_t& b)
   {
@@ -123,16 +128,19 @@ namespace octave
     else if (opa == octave_value::op_transpose)
       retop = octave_value::op_trans_ldiv;
 
     return retop;
   }
 
   // Possibly contract and/or with negation.
 
+#if 0
+  // Restore this code if short-circuit behavior can be preserved when needed.
+  // See bug #54465.
   static octave_value::compound_binary_op
   simplify_and_or_op (octave::tree_expression_ptr_t& a,
                       octave::tree_expression_ptr_t& b,
                       octave_value::binary_op op)
   {
     octave_value::compound_binary_op retop
       = octave_value::unknown_compound_binary_op;
 
@@ -155,16 +163,17 @@ namespace octave
               retop = octave_value::op_el_and_not;
             else if (op == octave_value::op_el_or)
               retop = octave_value::op_el_or_not;
           }
       }
 
     return retop;
   }
+#endif
 
   tree_binary_expression *
   maybe_compound_binary_expression (tree_expression *a, tree_expression *b,
                                     int l, int c, octave_value::binary_op t)
   {
     tree_expression *ca = a;
     tree_expression *cb = b;
     octave_value::compound_binary_op ct;
@@ -175,18 +184,18 @@ namespace octave
         ct = simplify_mul_op (ca, cb);
         break;
 
       case octave_value::op_ldiv:
         ct = simplify_ldiv_op (ca, cb);
         break;
 
 #if 0
-        // Restore this case if short-circuit behavior can be preserved
-        // when needed.  See bug #54465.
+      // Restore this case if short-circuit behavior can be preserved
+      // when needed.  See bug #54465.
       case octave_value::op_el_and:
       case octave_value::op_el_or:
         ct = simplify_and_or_op (ca, cb, t);
         break;
 #endif
 
       default:
         ct = octave_value::unknown_compound_binary_op;
