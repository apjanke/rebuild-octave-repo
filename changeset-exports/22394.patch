# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1472239592 25200
#      Fri Aug 26 12:26:32 2016 -0700
# Node ID 5e9e4d4a0d3331547f9007a2dd40e4f21454e875
# Parent  026067ffcf6689ad4ef2e01d135a758b996a985a
Add variadic template arguments to allow clang to resolve constructor

* str-vec.h (string_vector (const String_Container&)): Add optional template
arguments to allow clang to resolve constructor, when String_Container is a
class template with more than one template argument.

diff --git a/liboctave/util/str-vec.h b/liboctave/util/str-vec.h
--- a/liboctave/util/str-vec.h
+++ b/liboctave/util/str-vec.h
@@ -51,18 +51,18 @@ public:
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
   //! Constructor for STL containers of std::string
   /*!
     Templated constructor for any template class with std::string as the
     first parameter, and begin, end, and size methods, i.e., a class with
     similar interface as the STL containers.
   */
-  template<template <typename...> class String_Container>
-  string_vector (const String_Container<std::string>& lst);
+  template<template <typename...> class String_Container, typename... Other>
+  string_vector (const String_Container<std::string, Other...>& lst);
 
   string_vector (const Array<std::string>& s)
     : Array<std::string> (s.as_column ()) { }
 
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, octave_idx_type n);
 
@@ -122,18 +122,18 @@ public:
   static void delete_c_str_vec (const char * const*);
 
   std::ostream&
   list_in_columns (std::ostream&, int width = 0,
                    const std::string& prefix = "") const;
 };
 
 
-template<template <typename...> class String_Container>
-string_vector::string_vector (const String_Container<std::string>& lst)
+template<template <typename...> class String_Container, typename... Other>
+string_vector::string_vector (const String_Container<std::string, Other...>& lst)
   : Array<std::string> ()
 {
   resize (lst.size ());
 
   octave_idx_type i = 0;
   for (const std::string& s : lst)
     elem(i++) = s;
 }
