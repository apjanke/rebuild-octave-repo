# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1318884362 -3600
#      Mon Oct 17 21:46:02 2011 +0100
# Node ID d99aa455296e0ece82bddca44859d62344470dd4
# Parent  f80473f245532a328f7c925a8c4845581c56d978
Add outerposition property to figure objects.

* graphics.h.in (figure::properties::outerposition): New property.
(figure::properties::position): Make with 's' flag.
(figure::properties::set_position): Explicit definition with additional input
argument for toolkit notification.
(figure::properties::set_outerposition): New method.
(figure::properties::set_boundingbox): New arguments for inner/outer bounding
box and toolkit notification.
(figure::properties::init): Add constraint for outerposition.
* graphics.cc (figure::properties::get_boundingbox): Returns position or
outerposition, depending on internal flag.
(figure::properties::set_boundingbox): New input arguments for inner/outer
position and toolkit notification.
(figure::properties::set_position): New input argument for toolkit
noticiation.
(figure::properties::set_outerposition): New method.

diff --git a/src/graphics.cc b/src/graphics.cc
old mode 100644
new mode 100755
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3061,43 +3061,48 @@ figure::properties::set_visible (const o
       if (s == "on")
         xset (0, "currentfigure", __myhandle__.value ());
 
       visible = val;
     }
 }
 
 Matrix
-figure::properties::get_boundingbox (bool, const Matrix&) const
+figure::properties::get_boundingbox (bool internal, const Matrix&) const
 {
   Matrix screen_size = screen_size_pixels ();
-  Matrix pos;
-
-  pos = convert_position (get_position ().matrix_value (), get_units (),
-                          "pixels", screen_size);
+  Matrix pos = (internal ?
+                get_position ().matrix_value () :
+                get_outerposition ().matrix_value ());
+
+  pos = convert_position (pos, get_units (), "pixels", screen_size);
 
   pos(0)--;
   pos(1)--;
   pos(1) = screen_size(1) - pos(1) - pos(3);
 
   return pos;
 }
 
 void
-figure::properties::set_boundingbox (const Matrix& bb)
+figure::properties::set_boundingbox (const Matrix& bb, bool internal,
+                                     bool do_notify_toolkit)
 {
   Matrix screen_size = screen_size_pixels ();
   Matrix pos = bb;
 
   pos(1) = screen_size(1) - pos(1) - pos(3);
   pos(1)++;
   pos(0)++;
   pos = convert_position (pos, "pixels", get_units (), screen_size);
 
-  set_position (pos);
+  if (internal)
+    set_position (pos, do_notify_toolkit);
+  else
+    set_outerposition (pos, do_notify_toolkit);
 }
 
 Matrix
 figure::properties::map_from_boundingbox (double x, double y) const
 {
   Matrix bb = get_boundingbox (true);
   Matrix pos (1, 2, 0);
 
@@ -3125,40 +3130,54 @@ figure::properties::map_to_boundingbox (
                           bb.extract_n (0, 2, 1, 2));
   pos(0)--;
   pos(1) = bb(3) - pos(1);
 
   return pos;
 }
 
 void
-figure::properties::set_position (const octave_value& v)
+figure::properties::set_position (const octave_value& v,
+                                  bool do_notify_toolkit)
 {
   if (! error_state)
     {
       Matrix old_bb, new_bb;
 
       old_bb = get_boundingbox ();
-      position = v;
+      position.set (v, true, do_notify_toolkit);
       new_bb = get_boundingbox ();
 
       if (old_bb != new_bb)
         {
           if (old_bb(2) != new_bb(2) || old_bb(3) != new_bb(3))
             {
               execute_resizefcn ();
               update_boundingbox ();
             }
         }
 
       mark_modified ();
     }
 }
 
 void
+figure::properties::set_outerposition (const octave_value& v,
+                                       bool do_notify_toolkit)
+{
+  if (! error_state)
+    {
+      if (outerposition.set (v, true, do_notify_toolkit))
+        {
+          mark_modified ();
+        }
+    }
+}
+
+void
 figure::properties::set_paperunits (const octave_value& v)
 {
   if (! error_state)
     {
       caseless_str typ = get_papertype ();
       caseless_str punits = v.string_value ();
       if (! error_state)
         {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3090,20 +3090,27 @@ public:
                   mark_modified ();
                 }
             }
           else
             error ("set___graphics_toolkit__ must be a string");
         }
     }
 
+    void set_position (const octave_value& val,
+                       bool do_notify_toolkit = true);
+
+    void set_outerposition (const octave_value& val,
+                            bool do_notify_toolkit = true);
+
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
-    void set_boundingbox (const Matrix& bb);
+    void set_boundingbox (const Matrix& bb, bool internal = false,
+                          bool do_notify_toolkit = true);
 
     Matrix map_from_boundingbox (double x, double y) const;
 
     Matrix map_to_boundingbox (double x, double y) const;
 
     void update_units (const caseless_str& old_units);
 
     void update_paperunits (const caseless_str& old_paperunits);
@@ -3132,25 +3139,26 @@ public:
       bool_property integerhandle , "on"
       bool_property inverthardcopy , "off"
       callback_property keypressfcn , Matrix ()
       callback_property keyreleasefcn , Matrix ()
       radio_property menubar , "none|{figure}"
       double_property mincolormap , 64
       string_property name , ""
       bool_property numbertitle , "on"
+      array_property outerposition s , Matrix (1, 4, -1.0)
       radio_property paperunits Su , "{inches}|centimeters|normalized|points"
       array_property paperposition , default_figure_paperposition ()
       radio_property paperpositionmode , "auto|{manual}"
       array_property papersize U , default_figure_papersize ()
       radio_property papertype SU , "{usletter}|uslegal|a0|a1|a2|a3|a4|a5|b0|b1|b2|b3|b4|b5|arch-a|arch-b|arch-c|arch-d|arch-e|a|b|c|d|e|tabloid|<custom>"
       radio_property pointer , "crosshair|fullcrosshair|{arrow}|ibeam|watch|topl|topr|botl|botr|left|top|right|bottom|circle|cross|fleur|custom|hand"
       array_property pointershapecdata , Matrix (16, 16, 0)
       array_property pointershapehotspot , Matrix (1, 2, 0)
-      array_property position S , default_figure_position ()
+      array_property position s , default_figure_position ()
       radio_property renderer , "{painters}|zbuffer|opengl|none"
       radio_property renderermode , "{auto}|manual"
       bool_property resize , "on"
       callback_property resizefcn , Matrix ()
       radio_property selectiontype , "{normal}|open|alt|extend"
       radio_property toolbar , "none|{auto}|figure"
       radio_property units Su , "inches|centimeters|normalized|points|{pixels}|characters"
       callback_property windowbuttondownfcn , Matrix ()
@@ -3172,16 +3180,17 @@ public:
     void init (void)
       {
         colormap.add_constraint (dim_vector (-1, 3));
         alphamap.add_constraint (dim_vector (-1, 1));
         paperposition.add_constraint (dim_vector (1, 4));
         pointershapecdata.add_constraint (dim_vector (16, 16));
         pointershapehotspot.add_constraint (dim_vector (1, 2));
         position.add_constraint (dim_vector (1, 4));
+        outerposition.add_constraint (dim_vector (1, 4));
       }
 
   private:
     mutable graphics_toolkit toolkit;
   };
 
 private:
   properties xproperties;
