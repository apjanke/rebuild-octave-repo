# HG changeset patch
# User Rik <rik@octave.org>
# Date 1385443056 28800
#      Mon Nov 25 21:17:36 2013 -0800
# Node ID 6df05f2fd354261ef592a9cc91329640c70cada2
# Parent  2831a949a2199c58142bd43e795c6d7abd0ce97b
maint: Back out changeset 25b6fbe82827 and set default to GUI for 4.0 release.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,16 +1,15 @@
 Summary of important user-visible changes for version 3.8:
 ---------------------------------------------------------
 
- ** An experimental GUI is now available with Octave.  The GUI works well
-    on Linux systems, acceptably on Windows, but unsatisfactorily on Mac OS X.
-    To start a GUI session include the "--force-gui" option when invoking
-    Octave.  The GUI is under continuous improvement and will be the default
-    interface for the 4.0 release.
+ ** A GUI is now available with Octave and is the default when starting
+    an interactive session.  The original command line interface is also
+    available and can be entered by using the "--no-gui" option when
+    invoking Octave.
 
  ** Octave now uses OpenGL graphics by default with FLTK widgets.  If
     OpenGL libraries or FLTK widgets are not available when Octave is
     built, gnuplot is used.  You may also choose to use gnuplot for
     graphics by executing the command
 
       graphics_toolkit ("gnuplot")
 
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -580,66 +580,64 @@ strsave (const char *s)
   return tmp;
 }
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
-  bool start_gui = false;
-  bool gui_libs = false;
+  bool start_gui = true;
+  bool gui_libs = true;
 
   std::string octave_bindir = get_octave_bindir ();
 
-  std::string file = octave_bindir + dir_sep_char + "octave-cli";
+  std::string file = octave_bindir + dir_sep_char;
+
+#if defined (HAVE_OCTAVE_GUI)
+  file += "octave-gui";
+#else
+  file += "octave-cli";
+#endif
 
   char **new_argv = new char * [argc + 1];
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   int k = 1;
 #else
   int k = 0;
   new_argv[k++] = strsave ("octave");
 #endif
 
   bool warn_display = true;
 
   for (int i = 1; i < argc; i++)
     {
-      if (! strcmp (argv[i], "--force-gui"))
-        {
-          start_gui = true;
-          gui_libs = true;
-          file = octave_bindir + dir_sep_char;
-          #if defined (HAVE_OCTAVE_GUI)
-            file += "octave-gui";
-          #else
-            file += "octave-cli";
-          #endif
-        }
-      else if (! strcmp (argv[i], "--no-gui-libs"))
+      if (! strcmp (argv[i], "--no-gui-libs"))
         {
           // Run the version of Octave that is not linked with any GUI
           // libraries.  It may not be possible to do plotting or any
           // ui* calls, but it will be a little faster to start and
           // require less memory.  Don't pass the --no-gui-libs option
           // on as that option is not recognized by Octave.
 
-          // This is the default for 3.8 release.
+          start_gui = false;
+          gui_libs = false;
+          file = octave_bindir + dir_sep_char + "octave-cli";
         }
       else if (! strcmp (argv[i], "--no-gui"))
         {
           // If we see this option, then we can just exec octave; we
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave", not "octave-cli", because even
           // if the --no-gui option is given, we may be asked to do some
           // plotting or ui* calls.
 
-          // This option calls the cli executable for the 3.8 release.
+          start_gui = false;
+          new_argv[k++] = argv[i];
         }
       else if (! strcmp (argv[i], "--silent") || ! strcmp (argv[i], "--quiet")
                || ! strcmp (argv[i], "-q"))
         {
           warn_display = false;
           new_argv[k++] = argv[i];
         }
       else
@@ -692,17 +690,18 @@ main (int argc, char **argv)
 
               retval = 1;
             }
 
           retval = octave_exec (file, new_argv);
         }
       else
         {
-          // Parent.  Forward signals to child while waiting for it to exit.
+          // Parent.  Forward signals to the child while waiting for it
+          // to exit.
 
           int status;
 
           while (true)
             {
               WAITPID (gui_pid, &status, 0);
 
               if (caught_signal > 0)
