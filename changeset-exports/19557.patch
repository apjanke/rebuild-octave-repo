# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420828143 18000
#      Fri Jan 09 13:29:03 2015 -0500
# Node ID 182abae666ae105f54aec9d98138150972b52c82
# Parent  d7057df2968e6d683b9bca61c8f4795471884778
* audiodevinfo.cc: Explicitly use std::pow.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -559,45 +559,45 @@ octave_play_callback (const void *, void
 
   const double *p_l = sound_l.data ();
   const double *p_r = sound_r.data ();
 
   switch (player->get_nbits ())
     {
     case 8:
       {
-        static double scale_factor = pow (2.0, 7) - 1.0;
+        static double scale_factor = std::pow (2.0, 7) - 1.0;
 
         int8_t *buffer = static_cast<int8_t *> (output);
 
         for (unsigned long i = 0; i < frames; i++)
           {
             buffer[2*i] = p_l[i] * scale_factor;
             buffer[2*i+1] = p_r[i] * scale_factor;
           }
       }
       break;
 
     case 16:
       {
-        static double scale_factor = pow (2.0, 15) - 1.0;
+        static double scale_factor = std::pow (2.0, 15) - 1.0;
 
         int16_t *buffer = static_cast<int16_t *> (output);
 
         for (unsigned long i = 0; i < frames; i++)
           {
             buffer[2*i] = p_l[i] * scale_factor;
             buffer[2*i+1] = p_r[i] * scale_factor;
           }
       }
       break;
 
     case 24:
       {
-        static double scale_factor = pow (2.0, 23) - 1.0;
+        static double scale_factor = std::pow (2.0, 23) - 1.0;
 
         static int big_endian = oct_mach_info::words_big_endian ();
 
         uint8_t *buffer = static_cast<uint8_t *> (output);
 
         for (unsigned long i = 0; i < frames; i++)
           {
             int32_t sample_l = p_l[i];
@@ -657,17 +657,17 @@ portaudio_play_callback (const void *, v
   const double *pr = sound_l.data ();
 
   if (player->get_type () == DOUBLE)
     {
       switch (player->get_nbits ())
         {
         case 8:
           {
-            static double scale_factor = pow (2.0, 7) - 1.0;
+            static double scale_factor = std::pow (2.0, 7) - 1.0;
 
             int8_t *buffer = static_cast<int8_t *> (output);
 
             for (unsigned long j = 0; j < frames; j++)
               {
                 unsigned int sample_number = player->get_sample_number ();
 
                 if (sample_number >= player->get_end_sample ())
@@ -680,17 +680,17 @@ portaudio_play_callback (const void *, v
 
                 player->set_sample_number (sample_number + 1);
               }
           }
           break;
 
         case 16:
           {
-            static double scale_factor = pow (2.0, 15) - 1.0;
+            static double scale_factor = std::pow (2.0, 15) - 1.0;
 
             int16_t *buffer = static_cast<int16_t *> (output);
 
             for (unsigned long j = 0; j < frames; j++)
               {
                 unsigned int sample_number = player->get_sample_number ();
 
                 if (sample_number >= player->get_end_sample ())
@@ -703,17 +703,17 @@ portaudio_play_callback (const void *, v
 
                 player->set_sample_number (sample_number + 1);
               }
           }
           break;
 
         case 24:
           {
-            static double scale_factor = pow (2.0, 23) - 1.0;
+            static double scale_factor = std::pow (2.0, 23) - 1.0;
 
             static int big_endian = oct_mach_info::words_big_endian ();
 
             uint8_t *buffer = static_cast<uint8_t *> (output);
 
             for (unsigned long j = 0; j < frames; j++)
               {
                 unsigned int sample_number = player->get_sample_number ();
@@ -1314,29 +1314,33 @@ octave_record_callback (const void *inpu
   float sample_l, sample_r;
   Matrix sound;
   sound.resize (frames, 2);
   if (recorder->get_nbits () == 8)
     {
       const int8_t *input8 = static_cast<const int8_t *> (input);
       for (unsigned long i = 0; i < frames; i++)
         {
-          sample_l = input8[i * channels] / (pow (2.0, 7) - 1.0);
-          sample_r = input8[i * channels + (channels - 1)] / (pow (2.0, 7) - 1.0);
+          sample_l = input8[i * channels] / (std::pow (2.0, 7) - 1.0);
+          sample_r = input8[i * channels + (channels - 1)]
+            / (std::pow (2.0, 7) - 1.0);
+
           sound(i, 0) = sample_l;
           sound(i, 1) = sample_r;
         }
       }
   else if (recorder->get_nbits () == 16)
     {
       const int16_t *input16 = static_cast<const int16_t *> (input);
       for (unsigned long i = 0; i < frames; i++)
         {
-          sample_l = input16[i * channels] / (pow (2.0, 15) - 1.0);
-          sample_r = input16[i * channels + (channels - 1)] / (pow (2.0, 15) - 1.0);
+          sample_l = input16[i * channels] / (std::pow (2.0, 15) - 1.0);
+          sample_r = input16[i * channels + (channels - 1)]
+            / (std::pow (2.0, 15) - 1.0);
+
           sound(i, 0) = sample_l;
           sound(i, 1) = sample_r;
         }
     }
   else if (recorder->get_nbits () == 24)
     {
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
@@ -1354,18 +1358,18 @@ octave_record_callback (const void *inpu
             }
 
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
 
           if (sample_r32 & 0x00800000)
             sample_r32 |= 0xff000000;
 
-          sound(i, 0) = sample_l32 / pow (2.0, 23);
-          sound(i, 1) = sample_r32 / pow (2.0, 23);
+          sound(i, 0) = sample_l32 / std::pow (2.0, 23);
+          sound(i, 1) = sample_r32 / std::pow (2.0, 23);
         }
     }
 
   octave_value_list args, retval;
   args(0) = sound;
   retval = feval (recorder->octave_callback_function, args, 1);
 
   return retval(0).int_value ();
@@ -1379,28 +1383,32 @@ portaudio_record_callback (const void *i
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
   int channels = recorder->get_channels ();
   float sample_l, sample_r;
   if (recorder->get_nbits () == 8)
     {
       const int8_t *input8 = static_cast<const int8_t *> (input);
       for (unsigned long i = 0; i < frames; i++)
         {
-          sample_l = input8[i * channels] / (pow (2.0, 7) - 1.0);
-          sample_r = input8[i * channels + (channels - 1)] / (pow (2.0, 7) - 1.0);
+          sample_l = input8[i * channels] / (std::pow (2.0, 7) - 1.0);
+          sample_r = input8[i * channels + (channels - 1)]
+            / (std::pow (2.0, 7) - 1.0);
+
           recorder->append (sample_l, sample_r);
         }
     }
   else if (recorder->get_nbits () == 16)
     {
       const int16_t *input16 = static_cast<const int16_t *> (input);
       for (unsigned long i = 0; i < frames; i++)
         {
-          sample_l = input16[i * channels] / (pow (2.0, 15) - 1.0);
-          sample_r = input16[i * channels + (channels - 1)] / (pow (2.0, 15) - 1.0);
+          sample_l = input16[i * channels] / (std::pow (2.0, 15) - 1.0);
+          sample_r = input16[i * channels + (channels - 1)]
+            / (std::pow (2.0, 15) - 1.0);
+
           recorder->append (sample_l, sample_r);
         }
     }
   else if (recorder->get_nbits () == 24)
     {
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
 
@@ -1417,17 +1425,18 @@ portaudio_record_callback (const void *i
             }
 
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
 
           if (sample_r32 & 0x00800000)
             sample_r32 |= 0xff000000;
 
-          recorder->append (sample_l32 / pow (2.0, 23), sample_r32 / pow (2.0, 23));
+          recorder->append (sample_l32 / std::pow (2.0, 23),
+                            sample_r32 / std::pow (2.0, 23));
         }
     }
 
   if (recorder->get_sample_number () > recorder->get_end_sample ())
     return paComplete;
 
   return paContinue;
 }
