# HG changeset patch
# User pantxo <pantxo.diribarne@gmail.com>
# Date 1395092316 -3600
#      Mon Mar 17 22:38:36 2014 +0100
# Node ID 5264b0ec9f97a745baaaecf139479fc676e81a62
# Parent  8d5cb159fbc7b51b6d296500e36dc75c6891b2ba
Make set() omit read-only properties when called with 1 or 2 arguments (bug #41629).

* graphics.cc (Fset): check if a property is read-only for 2 arguments call.
* graphics.cc (values_as_string, value_as_string, values_as_struct):
Don't return read-only properties.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2979,20 +2979,22 @@ base_graphics_object::remove_all_listene
 std::string
 base_graphics_object::values_as_string (void)
 {
   std::string retval;
 
   if (valid_object ())
     {
       octave_map m = get ().map_value ();
+      graphics_object obj = gh_manager::get_object (get_handle ());
 
       for (octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
         {
-          if (pa->first != "children")
+          if (pa->first != "children" &&
+              ! obj.has_readonly_property (pa->first))
             {
               property p = get_properties ().get_property (pa->first);
 
               if (p.ok () && ! p.is_hidden ())
                 {
                   retval += "\n\t" + std::string (pa->first) + ":  ";
                   if (p.is_radio ())
                     retval += p.values_as_string ();
@@ -3011,17 +3013,19 @@ base_graphics_object::values_as_string (
 
 std::string
 base_graphics_object::value_as_string (const std::string& prop)
 {
   std::string retval;
 
   if (valid_object ())
     {
-      if (prop != "children")
+      graphics_object obj = gh_manager::get_object (get_handle ());
+
+      if (prop != "children" && ! obj.has_readonly_property (prop))
         {
           property p = get_properties ().get_property (prop);
 
           if (p.ok () && ! p.is_hidden ())
             {
               if (p.is_radio ())
                 retval += p.values_as_string ();
             }
@@ -3039,21 +3043,23 @@ base_graphics_object::value_as_string (c
 octave_scalar_map
 base_graphics_object::values_as_struct (void)
 {
   octave_scalar_map retval;
 
   if (valid_object ())
     {
       octave_scalar_map m = get ().scalar_map_value ();
+      graphics_object obj = gh_manager::get_object (get_handle ());
 
       for (octave_scalar_map::const_iterator pa = m.begin ();
            pa != m.end (); pa++)
         {
-          if (pa->first != "children")
+          if (pa->first != "children"
+              && ! obj.has_readonly_property (pa->first))
             {
               property p = get_properties ().get_property (pa->first);
 
               if (p.ok () && ! p.is_hidden ())
                 {
                   if (p.is_radio ())
                     retval.assign (p.get_name (), p.values_as_cell ());
                   else
@@ -3063,16 +3069,35 @@ base_graphics_object::values_as_struct (
         }
     }
   else
     error ("base_graphics_object::values_as_struct: invalid graphics object");
 
   return retval;
 }
 
+/*
+%!test
+%! hfig = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   ret = set (hax, "tightinset");
+%!   assert (isempty (ret));
+%!   ret = set (hax, "type");
+%!   assert (isempty (ret));
+%!   ret = set (hfig, "__graphics_toolkit__");
+%!   assert (isempty (ret));
+%!   ret = set (0, "commandwindowsize");
+%!   assert (isempty (ret));
+%!   ret = set (0);
+%!   assert (! isfield (ret, "commandwindowsize"));
+%! unwind_protect_cleanup
+%!   close (hfig);
+%! end_unwind_protect
+*/
 graphics_object
 graphics_object::get_ancestor (const std::string& obj_type) const
 {
   if (valid_object ())
     {
       if (isa (obj_type))
         return *this;
       else
@@ -8801,17 +8826,23 @@ being @qcode{\"portrait\"}.\n\
                       obj.set (args(1).map_value ());
                     }
                   else if (nargin == 2 && args(1).is_string ())
                     {
                       std::string property = args(1).string_value ();
                       
                       octave_map pmap = obj.values_as_struct ();
 
-                      if (pmap.isfield (property))
+                      if (obj.has_readonly_property (property))
+                        if (nargout != 0)
+                          retval = Matrix ();
+                        else
+                          octave_stdout << "set: " << property
+                                        <<" is read-only" << std::endl;
+                      else if (pmap.isfield (property))
                         {
                           if (nargout != 0)
                             retval = pmap.getfield (property)(0);
                           else
                             {
                               std::string s = obj.value_as_string (property);
                               if (! error_state)
                                 octave_stdout << s;
