# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523472769 25200
#      Wed Apr 11 11:52:49 2018 -0700
# Branch stable
# Node ID b72972ab83f18e847cba3c24897579cd1b6d766e
# Parent  7ca5f8c7087915f6c7f62954d5b3c7136125b801
test: Add bug IDs to failing %!xtest blocks.

* gammainc.m, test.m, classdef.tst: Add bug ID to failing %!xtest blocks.

* jit.tst: Add bug ID to failing %!xtest blocks.  Add code to immediately exit
from test if jit is not enabled.  Need to do this because there is no %!xtestif
keyword.

diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -514,18 +514,17 @@ endfunction
 %!assert (gammainc ([1e-02, 1e-03, 1e-5, 1e-9, 1e-14], 2), ...
 %!        [0.0000496679133402659, 4.99666791633340e-7, 4.99996666679167e-11, ...
 %!        4.99999999666667e-19, 4.99999999999997e-29], -1e-12);
 
 %!test <*53543>
 %! y_exp = 9.995001666250085e-04;
 %! assert (gammainc (1/1000, 1), y_exp, -eps);
 
-## FIXME: should this be tagged with a bug report number?
-%!xtest
+%!xtest <53612>
 %! assert (gammainc (-20, 1.1, "upper"), ...
 %!         6.50986687074979e8 + 2.11518396291149e8*i, -1e-13);
 
 ## Test conservation of the class (five tests for each subroutine).
 %!assert (class (gammainc (0, 1)) == "double")
 %!assert (class (gammainc (single (0), 1)) == "single")
 %!assert (class (gammainc (int8 (0), 1)) == "double")
 %!assert (class (gammainc (0, single (1))) == "single")
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -1005,17 +1005,17 @@ endfunction
 
 ## Test 'testif' keyword
 %!testif HAVE_INVALID_FEATURE
 %! error ("testif executed code despite not having feature");
 
 ## Test 'xtest' keyword
 %!xtest
 %! assert (1, 1);      # Test passes
-%!xtest
+%!xtest <53613>
 %! assert (0, 1);      # Test fails
 
 ## Test comment block.  It can contain anything.
 %!##
 %! it is the "#" as the block type that makes it a comment
 %! and it stays as a comment even through continuation lines
 %! which means that it works well with commenting out whole tests
 
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -43,17 +43,17 @@
 %!assert (isempty (q.principle))
 %!assert (isempty (q.term))
 %!assert (class (p), "foo_value_class")
 %!assert (p.term, 48)
 %!assert (p.rate, 4.0)
 %!assert (p.principle, 50e3)
 %!assert (p.amount, amt, eps ())
 %!assert (amount (p), amt, eps ())
-%!xtest
+%!xtest <53614>
 %! assert (properties (p), {'rate'; 'term'; 'principle'});
 %!test <42510>
 %! assert (methods (p), {'amount'; 'foo_value_class'});
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
 
 %%  Static method and Constant Property
 %!assert (foo_static_method_constant_property.radians_per_cycle, 2*pi)
diff --git a/test/jit.tst b/test/jit.tst
--- a/test/jit.tst
+++ b/test/jit.tst
@@ -535,19 +535,21 @@
 %!   for j=1:2
 %!     a = a + b;
 %!   endfor
 %! endfor
 %! assert (a, 2000);
 %! assert (b, 1);
 %! assert (jit_failcnt, 0);
 
-%!xtest
+%!xtest <53615>
 %! ## FIXME: No support for functions with complex input prototypes
-%! ## testif HAVE_LLVM
+%! if (! __have_feature__ ("ENABLE_JIT"))
+%!   return;
+%! endif
 %! jit_failcnt (0);
 %! a = [1+1i 1+2i];
 %! b = 0;
 %! while (1)
 %!   b = a(1);
 %!   break;
 %! endwhile
 %! assert (b, a(1));
@@ -566,19 +568,21 @@
 %!   test_undef ();
 %! end_try_catch
 %! assert (strncmp (lasterr (), "'XXX' undefined near", 20));
 %! assert (jit_failcnt, 1);
 
 %!shared id
 %! id = @(x) x;
 
-%!xtest
+%!xtest <53615>
 %! ## FIXME: No support for functions with complex input prototypes
-%! ## testif HAVE_LLVM
+%! if (! __have_feature__ ("ENABLE_JIT"))
+%!   return;
+%! endif
 %! jit_failcnt (0);
 %! assert (id (1), 1);
 %! assert (id (1+1i), 1+1i);
 %! assert (id (1, 2), 1);
 %! assert (jit_failcnt, 0);
 
 # %!testif HAVE_LLVM
 # %! jit_failcnt (0);
