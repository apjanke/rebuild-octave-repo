# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255681706 -7200
#      Fri Oct 16 10:28:26 2009 +0200
# Node ID 7b9cbaad68d64b9c7770adb3857f700480ba5806
# Parent  dd4aa19c305375296ca363babdb69098c1f09e06
extend Array<T>

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -46,21 +46,29 @@ along with Octave; see the file COPYING.
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : rep (a.rep), dimensions (dv), 
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
+  if (dv.numel () != a.numel ())
+    {
+      std::string dimensions_str = dimensions.str ();
+      std::string new_dims_str = dv.str ();
+
+      (*current_liboctave_error_handler)
+        ("reshape: can't reshape %s array to %s array",
+         dimensions_str.c_str (), new_dims_str.c_str ());
+    }
+
+  // This goes here because if an exception is thrown by the above,
+  // destructor will be never called.
   rep->count++;
-
-  if (a.numel () < dv.numel ())
-    (*current_liboctave_error_handler)
-      ("Array::Array (const Array&, const dim_vector&): dimension mismatch");
 }
 
 template <class T>
 void
 Array<T>::fill (const T& val)
 {
   if (rep->count > 1)
     {
@@ -409,40 +417,61 @@ Array<T>::range_error (const char *fcn, 
   std::string buf_str = buf.str ();
 
   (*current_liboctave_error_handler) (buf_str.c_str ());
 
   static T foo;
   return foo;
 }
 
+
+template <class T>
+Array<T>
+Array<T>::column (octave_idx_type k) const
+{
+  octave_idx_type r = dimensions(0);
+#ifdef BOUNDS_CHECKING
+  if (k < 0 || k * r >= numel ())
+    range_error ("column", k);
+#endif
+
+  return Array<T> (*this, dim_vector (r, 1), k*r, k*r + r);
+}
+
 template <class T>
 Array<T>
-Array<T>::reshape (const dim_vector& new_dims) const
+Array<T>::page (octave_idx_type k) const
+{
+  octave_idx_type r = dimensions(0), c = dimensions (1), p = r*c;
+#ifdef BOUNDS_CHECKING
+  if (k < 0 || k * p >= numel ())
+    range_error ("page", k);
+#endif
+
+  return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
+}
+
+template <class T>
+Array<T>
+Array<T>::linearize (void) const
 {
-  Array<T> retval;
-
-  if (dimensions != new_dims)
-    {
-      if (dimensions.numel () == new_dims.numel ())
-	retval = Array<T> (*this, new_dims);
-      else
-	{
-	  std::string dimensions_str = dimensions.str ();
-	  std::string new_dims_str = new_dims.str ();
-
-	  (*current_liboctave_error_handler)
-	    ("reshape: can't reshape %s array to %s array",
-	     dimensions_str.c_str (), new_dims_str.c_str ());
-	}
-    }
-  else
-    retval = *this;
-
-  return retval;
+  octave_idx_type n = numel ();
+  return Array<T> (*this, dim_vector (n, 1), 0, n);
+}
+
+template <class T>
+Array<T>
+Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
+{
+#ifdef BOUNDS_CHECKING
+  if (lo < 0 || up > numel ())
+    range_error ("linear_slice", lo, up);
+#endif
+  if (up < lo) up = lo;
+  return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
 class rec_permute_helper
 {
   octave_idx_type *dim, *stride;
   bool use_blk;
   int top;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -146,17 +146,17 @@ protected:
 
   // slice constructor
   Array (const Array<T>& a, const dim_vector& dv,
          octave_idx_type l, octave_idx_type u)
     : rep(a.rep), dimensions (dv)
     {
       rep->count++;
       slice_data = a.slice_data + l;
-      slice_len = std::min (u, a.slice_len) - l;
+      slice_len = u - l;
     }
 
 private:
 
   typename Array<T>::ArrayRep *nil_rep (void) const
     {
       static typename Array<T>::ArrayRep *nr
 	= new typename Array<T>::ArrayRep ();
@@ -234,16 +234,17 @@ public:
     : rep (new typename Array<T>::ArrayRep (get_size (dv))),
       dimensions (dv)
     {
       slice_data = rep->data;
       slice_len = rep->len;
       fill (val);
     }
 
+  // Reshape constructor.
   Array (const Array<T>& a, const dim_vector& dv);
 
   ~Array (void)
     {
       if (--rep->count <= 0)
         delete rep;
     }
 
@@ -450,17 +451,33 @@ public:
   T operator () (const Array<octave_idx_type>& ra_idx) const { return checkelem (ra_idx); }
 #else
   T operator () (octave_idx_type n) const { return elem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const { return elem (i, j); }
   T operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, j, k); }
   T operator () (const Array<octave_idx_type>& ra_idx) const { return elem (ra_idx); }
 #endif
 
-  Array<T> reshape (const dim_vector& new_dims) const;
+  // Fast extractors. All of these produce shallow copies.
+  // Warning: none of these do check bounds, unless BOUNDS_CHECKING is on!
+
+  // Extract column: A(:,k+1).
+  Array<T> column (octave_idx_type k) const;
+  // Extract page: A(:,:,k+1).
+  Array<T> page (octave_idx_type k) const;
+
+  // Give this array as a column vector: A(:).
+  Array<T> linearize (void) const;
+
+  // Extract a slice from this array as a column vector: A(:)(lo+1:up).
+  // Must be 0 <= lo && up <= numel. May be up < lo.
+  Array<T> linear_slice (octave_idx_type lo, octave_idx_type up) const;
+
+  Array<T> reshape (const dim_vector& new_dims) const
+    { return Array<T> (*this, new_dims); }
 
   Array<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
   Array<T> ipermute (const Array<octave_idx_type>& vec) const
     { return permute (vec, true); }
 
   bool is_square (void) const { return (dim1 () == dim2 ()); }
 
   bool is_empty (void) const { return numel () == 0; }
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -79,16 +79,26 @@ public:
   ArrayN<T>& operator = (const ArrayN<T>& a)
     {
       if (this != &a)
 	Array<T>::operator = (a);
 
       return *this;
     }
 
+  ArrayN<T> column (octave_idx_type k) const
+    { return Array<T>::column (k); }
+  ArrayN<T> page (octave_idx_type k) const
+    { return Array<T>::page (k); }
+
+  ArrayN<T> linearize (void) const
+    { return Array<T>::linearize (); }
+  ArrayN<T> linear_slice (octave_idx_type lo, octave_idx_type up) const
+    { return Array<T>::linear_slice (lo, up); }
+
   ArrayN<T> reshape (const dim_vector& new_dims) const
     { return Array<T>::reshape (new_dims); }
 
   ArrayN<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
     { return Array<T>::permute (vec, inv); }
 
   ArrayN<T> ipermute (const Array<octave_idx_type>& vec) const
     { return Array<T>::ipermute (vec); }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-10-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::column, Array<T>::page, Array<T>::linearize,
+	Array<T>::linear_slice): New methods.
+	* Array.h: Declare them
+	* ArrayN.h: Forward them.
+
 2009-10-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::nth_element): New overloaded method.
 	* oct-sort.h: Declare it.
 	* Array.cc (Array<T>::nth_element): New method.
 	* Array.h: Declare it.
 	(Array<T>::sort): Use int for dim argument.
 	* ArrayN.h (ArrayN<T>::nth_element): Wrap.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fnum2cell): Use Array<T>::column here.
+
 2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (Flookup): Update docstring.
 
 2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::octave_value (octave_base_value *, bool)) : New constructor.
 	(octave_value::octave_value (octave_base_value *, int)): Deprecate.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -988,18 +988,17 @@ do_num2cell (const NDA& array, const Arr
       NDA parray = array.permute (perm);
 
       octave_idx_type nela = arraydv.numel (), nelc = celldv.numel ();
       parray = parray.reshape (dim_vector (nela, nelc));
 
       Cell retval (celldv);
       for (octave_idx_type i = 0; i < nelc; i++)
         {
-          NDA tmp (parray.index (idx_vector::colon, idx_vector (i)));
-          retval.xelem (i) = tmp.reshape (arraydv);
+          retval.xelem (i) = NDA (parray.column (i).reshape (arraydv));
         }
 
       return retval;
     }
 }
 
 
 DEFUN_DLD (num2cell, args, ,
