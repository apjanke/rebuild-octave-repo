# HG changeset patch
# User jwe
# Date 1182795418 0
#      Mon Jun 25 18:16:58 2007 +0000
# Node ID 55411ecc8d8b391c225ca8990b2e14db84e751be
# Parent  451b346d8c2f0c70aac957039149764ade0d2772
[project @ 2007-06-25 18:16:58 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
+2007-06-25  John W. Eaton  <jwe@octave.org>
+
+	* mk-opts.pl (emit_print_function): Make generated function print
+	to ostream (passed as arg) instead of local buffer.  Don't call
+	print_usage in generated function.
+	(emit_options_function): Fix call to print_${class_name} in
+	generated to pass octave_stdout as arg.
+
 2007-06-18  John W. Eaton  <jwe@octave.org>
 
 	* emacs/octave-inf.el (inferior-octave-prompt): Match "octave.bin"
 	and "octave.exe" in addition to "octave".
 
 2007-06-15  John W. Eaton  <jwe@octave.org>
 
 	* run-octave.in: Use simple string concatenation instead of
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -590,100 +590,99 @@ sub emit_option_table_entry
 
 sub emit_print_function
 {
   local ($i);
 
   ## FIXME -- determine the width of the table automatically.
 
   print "static void
-print_${class_name} (void)
+print_${class_name} (std::ostream& os)
 {
   std::ostringstream buf;
 
-  buf << \"\\n\"
-      << \"Options for $CLASS include:\\n\\n\"
-      << \"  keyword                                             value\\n\"
-      << \"  -------                                             -----\\n\";
+  os << \"\\n\"
+     << \"Options for $CLASS include:\\n\\n\"
+     << \"  keyword                                             value\\n\"
+     << \"  -------                                             -----\\n\";
 
   $struct_name *list = $static_table_name;\n\n";
 
   for ($i = 0; $i < $opt_num; $i++)
     {
-      print "  {\n    buf << \"  \"
+      print "  {\n    os << \"  \"
         << std::setiosflags (std::ios::left) << std::setw (50)
         << list[$i].keyword
         << std::resetiosflags (std::ios::left)
         << \"  \";\n\n";
 
       if ($type[$i] eq "double")
         {
           print "    double val = $static_object_name.$opt[$i] ();\n\n";
-          print "    buf << val << \"\\n\";\n";
+          print "    os << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "int" || $type[$i] eq "octave_idx_type")
         {
           print "    int val = $static_object_name.$opt[$i] ();\n\n";
-          print "    buf << val << \"\\n\";\n";
+          print "    os << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "std::string")
         {
-          print "    buf << $static_object_name.$opt[$i] () << \"\\n\";\n";
+          print "    os << $static_object_name.$opt[$i] () << \"\\n\";\n";
         }
       elsif ($type[$i] eq "Array<int>" || $type[$i] eq "Array<octave_idx_type>")
         {
 	  if ($type[$i] eq "Array<int>")
             {
               $elt_type = "int";
             }
           else
             {
               $elt_type = "octave_idx_type";
             }
           print "    Array<$elt_type> val = $static_object_name.$opt[$i] ();\n\n";
           print "    if (val.length () == 1)
       {
-        buf << val(0) << \"\\n\";
+        os << val(0) << \"\\n\";
       }
     else
       {
-        buf << \"\\n\\n\";
+        os << \"\\n\\n\";
 	octave_idx_type len = val.length ();
 	Matrix tmp (len, 1);
 	for (octave_idx_type i = 0; i < len; i++)
 	  tmp(i,0) = val(i);
-        octave_print_internal (buf, tmp, false, 2);
-        buf << \"\\n\\n\";
+        octave_print_internal (os, tmp, false, 2);
+        os << \"\\n\\n\";
       }\n";
         }
       elsif ($type[$i] eq "Array<double>")
         {
           print "    Array<double> val = $static_object_name.$opt[$i] ();\n\n";
           print "    if (val.length () == 1)
       {
-        buf << val(0) << \"\\n\";
+        os << val(0) << \"\\n\";
       }
     else
       {
-        buf << \"\\n\\n\";
+        os << \"\\n\\n\";
         Matrix tmp = Matrix (ColumnVector (val));
-        octave_print_internal (buf, tmp, false, 2);
-        buf << \"\\n\\n\";
+        octave_print_internal (os, tmp, false, 2);
+        os << \"\\n\\n\";
       }\n";
         }
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "  }\n\n";
     }
 
-  print "print_usage ();
-}\n\n";
+  print "  os << \"\\n\";\n}\n\n";
 }
 
 sub emit_set_functions
 {
   print "static void
 set_${class_name} (const std::string& keyword, const octave_value& val)
 {
   $struct_name *list = $static_table_name;\n\n";
@@ -852,17 +851,17 @@ Options include\\n\\
   print "\@end table\\n\\\n\@end deftypefn\")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      print_${class_name} ();
+      print_${class_name} (octave_stdout);
     }
   else if (nargin == 1 || nargin == 2)
     {
       std::string keyword = args(0).string_value ();
 
       if (! error_state)
         {
           if (nargin == 1)
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -159,17 +159,17 @@ lsode_user_jacobian (const ColumnVector&
     { \
       ::error ("lsode: " fmt, arg); \
       LSODE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (lsode, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{x}, @var{istate}, @var{msg}]} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})\n\
 Solve the set of differential equations\n\
 @tex\n\
 $$ {dx \\over dt} = f (x, t) $$\n\
 with\n\
 $$ x(t_0) = x_0 $$\n\
 @end tex\n\
 @ifinfo\n\
 \n\
