# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1328485562 28800
#      Sun Feb 05 15:46:02 2012 -0800
# Node ID 34af9f9ff98bbef6def45cae6d0d5ab422acacaa
# Parent  ce2b59a6d0e5e2a12cad1bcb26d8ba6d92f654a5
Use Octave coding conventions (double-quote " in preference to single quote ')

* center.m, corr.m, cov.m, iqr.m, kendall.m, spearman.m, std.m, var.m:
Use Octave coding conventions (double-quote " in preference to single quote ')

diff --git a/scripts/statistics/base/center.m b/scripts/statistics/base/center.m
--- a/scripts/statistics/base/center.m
+++ b/scripts/statistics/base/center.m
@@ -65,17 +65,17 @@ function retval = center (x, dim)
 
 endfunction
 
 %!assert(center ([1,2,3]), [-1,0,1])
 %!assert(center (single([1,2,3])), single([-1,0,1]))
 %!assert(center (int8 ([1,2,3])), [-1,0,1])
 %!assert(center (logical ([1, 0, 0, 1])), [0.5, -0.5, -0.5, 0.5])
 %!assert(center (ones (3,2,0,2)), zeros (3,2,0,2))
-%!assert(center (ones (3,2,0,2, 'single')), zeros (3,2,0,2, 'single'))
+%!assert(center (ones (3,2,0,2, "single")), zeros (3,2,0,2, "single"))
 %!assert(center (magic (3)), [3,-4,1;-2,0,2;-1,4,-3])
 %!assert(center ([1 2 3; 6 5 4], 2), [-1 0 1; 1 0 -1])
 
 %% Test input validation
 %!error center ()
 %!error center (1, 2, 3)
 %!error center (1, ones(2,2))
 %!error center (1, 1.5)
diff --git a/scripts/statistics/base/corr.m b/scripts/statistics/base/corr.m
--- a/scripts/statistics/base/corr.m
+++ b/scripts/statistics/base/corr.m
@@ -51,17 +51,17 @@ function retval = corr (x, y = [])
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   ## Input validation is done by cov.m.  Don't repeat tests here
 
   ## Special case, scalar is always 100% correlated with itself
   if (isscalar (x))
-    if (isa (x, 'single'))
+    if (isa (x, "single"))
       retval = single (1);
     else
       retval = 1;
     endif
     return;
   endif
 
   ## No check for division by zero error, which happens only when
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -81,17 +81,17 @@ function c = cov (x, y = [], opt = 0)
   endif
 
   if (opt != 0 && opt != 1)
     error ("cov: normalization OPT must be 0 or 1");
   endif
 
   ## Special case, scalar has zero covariance
   if (isscalar (x))
-    if (isa (x, 'single'))
+    if (isa (x, "single"))
       c = single (0);
     else
       c = 0;
     endif
     return;
   endif
 
   if (isrow (x))
diff --git a/scripts/statistics/base/iqr.m b/scripts/statistics/base/iqr.m
--- a/scripts/statistics/base/iqr.m
+++ b/scripts/statistics/base/iqr.m
@@ -55,18 +55,18 @@ function y = iqr (x, dim)
       error ("iqr: DIM must be an integer and a valid dimension");
     endif
   endif
 
   ## This code is a bit heavy, but is needed until empirical_inv
   ## can take a matrix, rather than just a vector argument.
   n = sz(dim);
   sz(dim) = 1;
-  if (isa (x, 'single'))
-    y = zeros (sz, 'single');
+  if (isa (x, "single"))
+    y = zeros (sz, "single");
   else
     y = zeros (sz);
   endif
   stride = prod (sz(1:dim-1));
   for i = 1 : nel / n;
     offset = i;
     offset2 = 0;
     while (offset > stride)
diff --git a/scripts/statistics/base/kendall.m b/scripts/statistics/base/kendall.m
--- a/scripts/statistics/base/kendall.m
+++ b/scripts/statistics/base/kendall.m
@@ -94,20 +94,20 @@ function tau = kendall (x, y = [])
     endif
     if (rows (y) != n)
       error ("kendall: X and Y must have the same number of observations");
     else
       x = [x, y];
     endif
   endif
 
-  if (isa (x, 'single') || isa (y, 'single'))
-    cls = 'single';
+  if (isa (x, "single") || isa (y, "single"))
+    cls = "single";
   else
-    cls = 'double';
+    cls = "double";
   endif
   r   = ranks (x);
   m   = sign (kron (r, ones (n, 1, cls)) - kron (ones (n, 1, cls), r));
   tau = corr (m);
 
   if (nargin == 2)
     tau = tau(1 : c, (c + 1) : columns (x));
   endif
diff --git a/scripts/statistics/base/spearman.m b/scripts/statistics/base/spearman.m
--- a/scripts/statistics/base/spearman.m
+++ b/scripts/statistics/base/spearman.m
@@ -64,17 +64,17 @@ function rho = spearman (x, y = [])
     endif
     if (rows (x) != rows (y))
       error ("spearman: X and Y must have the same number of observations");
     endif
     rho = corr (ranks (x), ranks (y));
   endif
 
   ## Restore class cleared by ranks
-  if (isa (x, 'single') || isa (y, 'single'))
+  if (isa (x, "single") || isa (y, "single"))
     rho = single (rho);
   endif
 
 endfunction
 
 
 %!test
 %! x = 1:10;
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -87,18 +87,18 @@ function retval = std (x, opt = 0, dim)
     if (!(isscalar (dim) && dim == fix (dim))
         || !(1 <= dim && dim <= nd))
       error ("std: DIM must be an integer and a valid dimension");
     endif
   endif
 
   n = sz(dim);
   if (n == 1 || isempty (x))
-    if (isa (x, 'single'))
-      retval = zeros (sz, 'single');
+    if (isa (x, "single"))
+      retval = zeros (sz, "single");
     else
       retval = zeros (sz);
     endif
   else
     retval = sqrt (sumsq (center (x, dim), dim) / (n - 1 + opt));
   endif
 
 endfunction
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -87,18 +87,18 @@ function retval = var (x, opt = 0, dim)
     if (!(isscalar (dim) && dim == fix (dim))
         || !(1 <= dim && dim <= nd))
       error ("var: DIM must be an integer and a valid dimension");
     endif
   endif
 
   n = sz(dim);
   if (n == 1)
-    if (isa (x, 'single'))
-      retval = zeros (sz, 'single');
+    if (isa (x, "single"))
+      retval = zeros (sz, "single");
     else
       retval = zeros (sz);
     endif
   elseif (numel (x) > 0)
     retval = sumsq (center (x, dim), dim) / (n - 1 + opt);
   else
     error ("var: X must not be empty");
   endif
