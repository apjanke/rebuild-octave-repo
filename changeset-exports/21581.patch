# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459559761 25200
#      Fri Apr 01 18:16:01 2016 -0700
# Node ID 6fab85c1538f0fdb02df7eacab99890b75b79e4b
# Parent  ecce63c99c3fe81cf7007c0cef6ca49a59cd3a05
maint: Follow Octave conventions for use of semicolon in BIST tests.

* testfun.txi: Document Octave conventions for use of semicolon in BIST tests.

* cellfun.cc, ellipj.cc, file-io.cc, gcd.cc, hash.cc, nproc.cc,
utils.cc, fftw.cc, ov-usr-fcn.cc, oct-parse.in.yy, md5sum.m, wavread.m, wavwrite.m,
cplxpair.m, rat.m, im2double.m, rref.m, stem3.m, rotate.m, pchip.m, blackman.m,
hamming.m, hanning.m, spectral_adf.m, spectral_xdf.m, assert.m, fail.m,
etime.m, build-sparse-tests.sh, classes.tst, ctor-vs-method.tst, index.tst,
io.tst, struct.tst: Follow Octave conventions for use of semicolon in BIST
tests.

diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -45,18 +45,18 @@ block evaluated separately.  Blocks are 
 @code{test}, @code{function}, or @code{assert} immediately following @samp{%!}.
 A block is defined by indentation as in Python.  Lines beginning with
 @samp{%!<whitespace>} are part of the preceeding block.
 
 For example:
 
 @example
 @group
-%!test error ("this test fails!");
-%!test "test doesn't fail. it doesn't generate an error";
+%!test error ("this test fails!")
+%!test "test doesn't fail.  it doesn't generate an error"
 @end group
 @end example
 
 When a test fails, you will see something like:
 
 @example
 @group
   ***** test error ("this test fails!")
@@ -94,18 +94,18 @@ with @code{assert} the previous test is 
 @end group
 @end example
 
 @code{assert} can accept a tolerance so that you can compare results
 absolutely or relatively.  For example, the following all succeed:
 
 @example
 @group
-%!test assert (1+eps, 1, 2*eps)          # absolute error
-%!test assert (100+100*eps, 100, -2*eps) # relative error
+%!test assert (1+eps, 1, 2*eps)           # absolute error
+%!test assert (100+100*eps, 100, -2*eps)  # relative error
 @end group
 @end example
 
 You can also do the comparison yourself, but still have assert
 generate the error:
 
 @example
 @group
@@ -220,31 +220,31 @@ Because there is a space after @samp{%!}
 not begin a new block and this line is treated as a comment.
 
 Error and warning blocks are like test blocks, but they only succeed
 if the code generates an error.  You can check the text of the error
 is correct using an optional regular expression @code{<pattern>}.
 For example:
 
 @example
-%!error <passes!> error ("this test passes!");
+%!error <passes!> error ("this test passes!")
 @end example
 
 If the code doesn't generate an error, the test fails.  For example:
 
 @example
-%!error "this is an error because it succeeds.";
+%!error "this is an error because it succeeds."
 @end example
 
 @noindent
 produces
 
 @example
 @group
-  ***** error "this is an error because it succeeds.";
+  ***** error "this is an error because it succeeds."
 !!!!! test failed: no error
 @end group
 @end example
 
 It is important to automate the tests as much as possible, however
 some tests require user interaction.  These can be isolated into
 demo blocks, which if you are in batch mode, are only run when
 called with @code{demo} or the @code{verbose} option to @code{test}.
@@ -286,17 +286,17 @@ in the log file but not executed.  For e
 %! @var{t} = [0:0.01:2*pi]; @var{x} = sin (@var{t});
 %! plot (@var{t}, @var{x});
 %! # you should now see a sine wave in your figure window
 @end group
 @end example
 
 @noindent
 The following trivial code snippet provides examples for the use of
-fail, assert, error and xtest:
+fail, assert, error, and xtest:
 
 @example
 @group
 function output = must_be_zero (@var{input})
   if (@var{input} != 0)
     error ("Nonzero input!")
   endif
   output = input;
@@ -358,18 +358,45 @@ declare variables for use in multiple te
 @item %!function
 define a function for use in multiple tests
 
 @item %!endfunction
 close a function definition
 
 @item %!assert (x, y, tol)
 shorthand for @code{%!test assert (x, y, tol)}
+
+@item %!fail (CODE, PATTERN)
+shorthand for @code{%!test fail (CODE, PATTERN)}
+
 @end table
 
+When coding tests the Octave convention is that lines that begin with a block
+type do not have a semicolon at the end.  Any code that is within a block,
+however, is normal Octave code and usually will have a trailing semicolon.
+For example,
+
+@example
+@group
+## bare block instantiation
+%!assert (sin (0), 0)
+@end group
+@end example
+
+@noindent
+but
+
+@example
+@group
+## test block with normal Octave code 
+%!test
+%! assert (sin (0), 0);
+@end group
+@end example
+
 You can also create test scripts for built-in functions and your own C++
 functions.  To do so, put a file with the bare function name (no .m
 extension) in a directory in the load path and it will be discovered by
 the @code{test} function.  Alternatively, you can embed tests directly in your
 C++ code:
 
 @example
 @group
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -701,17 +701,17 @@ v = cellfun (@@det, a); # faster\n\
 %! x = cellfun (@__f11, {1});
 %! assert (__cellfun_test_num_outputs__, 1);
 
 %!test
 %! global __cellfun_test_num_outputs__;
 %! cellfun (@__f01, {1});
 %! assert (__cellfun_test_num_outputs__, 0);
 
-%!error x = cellfun (@__f01, {1, 2});
+%!error x = cellfun (@__f01, {1, 2})
 
 %!test
 %! assert (cellfun (@__f11, {1, 2}), [1, 2]);
 %! assert (cellfun (@__f11, {1, 2}, 'uniformoutput', false), {1, 2});
 
 %!test
 %! [a,b] = cellfun (@(x) x, cell (2, 0));
 %! assert (a, zeros (2, 0));
@@ -1400,17 +1400,17 @@ arrayfun (@@str2num, [1234],\n\
 %! x = arrayfun (@__f11, {1});
 %! assert (__arrayfun_test_num_outputs__, 1);
 
 %!test
 %! global __arrayfun_test_num_outputs__;
 %! arrayfun (@__f01, {1});
 %! assert (__arrayfun_test_num_outputs__, 0);
 
-%!error x = arrayfun (@__f01, [1, 2]);
+%!error x = arrayfun (@__f01, [1, 2])
 
 %!test
 %! assert (arrayfun (@__f11, [1, 2]), [1, 2]);
 %! assert (arrayfun (@__f11, [1, 2], "uniformoutput", false), {1, 2});
 %! assert (arrayfun (@__f11, {1, 2}), {1, 2});
 %! assert (arrayfun (@__f11, {1, 2}, "uniformoutput", false), {{1}, {2}});
 
 %!assert (arrayfun (@ones, 1, [2,3], "uniformoutput", false), {[1,1], [1,1,1]})
diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -826,17 +826,17 @@ and 16.15), Dover, 1965.\n\
 %! [~, ~, dn] = ellipj (u + x, m);
 %! D = 1/sqrt (2) * ones (size (x));
 %! assert (dn, D, 1e-6);
 
 %!error ellipj ()
 %!error ellipj (1)
 %!error ellipj (1,2,3,4)
 %!warning <required value 0 <= M <= 1> ellipj (1,2);
-## FIXME: errors commented out untill lasterr() truly returns the last error.
+## FIXME: errors commented out until lasterr() truly returns the last error.
 %!#error <M must be a scalar or matrix> ellipj (1, "1")
 %!#error <U must be a scalar or matrix> ellipj ("1", 1)
 %!#error <U must be a scalar or matrix> ellipj ({1}, 1)
 %!#error <U must be a scalar or matrix> ellipj ({1, 2}, 1)
 %!#error <M must be a scalar or matrix> ellipj (1, {1, 2})
 %!#error <U must be a scalar or matrix> ellipj ("1", [1, 2])
 %!#error <U must be a scalar or matrix> ellipj ({1}, [1, 2])
 %!#error <U must be a scalar or matrix> ellipj ({1}, [1, 2])
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1713,17 +1713,17 @@ as the name of the function when reporti
 %! c = textscan (fid, "%f %f %f", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
 %! u = textscan (str, "%f %f %f", "ReturnOnError", 1);
 %! assert (c, {[1;4], 2, 3});
 %! assert (u, {[1;4], 2, 3});
 
-%!error <Read error in field 2 of row 2> textscan ("1 2 3\n4 s 6", "%f %f %f", "ReturnOnError", 0);
+%!error <Read error in field 2 of row 2> textscan ("1 2 3\n4 s 6", "%f %f %f", "ReturnOnError", 0)
 
 %!test
 %! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1 s 3\n4 5 6");
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "");
@@ -1752,18 +1752,18 @@ as the name of the function when reporti
 
 ## Test input validation
 %!error textscan ()
 %!error textscan (single (40))
 %!error textscan ({40})
 %!error <must be a string> textscan ("Hello World", 2)
 #%!error <cannot provide position information> [C, pos] = textscan ("Hello World")
 %!error <at most one character or> textscan ("Hello World", '%s', 'EndOfLine', 3)
-%!error <'%z' is not a valid format specifier> textscan ("1.0", "%z");
-%!error <no valid format conversion specifiers> textscan ("1.0", "foo");
+%!error <'%z' is not a valid format specifier> textscan ("1.0", "%z")
+%!error <no valid format conversion specifiers> textscan ("1.0", "foo")
 
 ## Test incomplete first data line
 %! R = textscan (['Empty1' char(10)], 'Empty%d %f');
 %! assert (R{1}, int32 (1));
 %! assert (isempty (R{2}), true);
 
 ## bug #37023
 %!test
diff --git a/libinterp/corefcn/gcd.cc b/libinterp/corefcn/gcd.cc
--- a/libinterp/corefcn/gcd.cc
+++ b/libinterp/corefcn/gcd.cc
@@ -515,17 +515,17 @@ gcd ([15, 9], [20, 18])\n\
 %! u = [953 + i*971, 967 + i*977];
 %! [d, k(1), k(2)] = gcd (p(1), p(2));
 %! [z, w(1), w(2)] = gcd (u(1), u(2));
 %! assert (d, 1);
 %! assert (sum (p.*k), d);
 %! assert (abs (z), sqrt (2));
 %! assert (abs (sum (u.*w)), sqrt (2));
 
-%!error <all values must be integers> gcd (1/2, 2);
-%!error <all complex parts must be integers> gcd (e + i*pi, 1);
+%!error <all values must be integers> gcd (1/2, 2)
+%!error <all complex parts must be integers> gcd (e + i*pi, 1)
 
 %!error gcd ()
 
 %!test
 %! s.a = 1;
 %! fail ("gcd (s)");
 */
diff --git a/libinterp/corefcn/hash.cc b/libinterp/corefcn/hash.cc
--- a/libinterp/corefcn/hash.cc
+++ b/libinterp/corefcn/hash.cc
@@ -282,19 +282,19 @@ hash (\"md5\", fileread (file));\n\
 %! tfile = tempname ();
 %! fid = fopen (tfile, "wb");
 %! fwrite (fid, "abc\0");
 %! fclose (fid);
 %! assert (hash ("md5", fileread (tfile)), "147a664a2ca9410911e61986d3f0d52a");
 %! unlink (tfile);
 
 ## Test bad function calls
-%!error hash ();
-%!error hash ("");
-%!error hash ("", "");
-%!error hash ("", "", "");
-%!error hash (1, "");
-%!error hash ([1, 0; 0, 1], "");
-%!error hash ("unknown", "");
-%!error hash ("md5");
-%!error hash ("sha1");
-%!error hash ("sha512");
+%!error hash ()
+%!error hash ("")
+%!error hash ("", "")
+%!error hash ("", "", "")
+%!error hash (1, "")
+%!error hash ([1, 0; 0, 1], "")
+%!error hash ("unknown", "")
+%!error hash ("md5")
+%!error hash ("sha1")
+%!error hash ("sha512")
 */
diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -90,10 +90,10 @@ same as @code{current}, but overridable 
 %! unwind_protect_cleanup
 %!   if (! isempty (old_val))
 %!     setenv ("OMP_NUM_THREADS", old_val);
 %!   else
 %!     unsetenv ("OMP_NUM_THREADS");
 %!   endif
 %! end_unwind_protect
 
-%!error nproc ("no_valid_option");
+%!error nproc ("no_valid_option")
 */
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -119,17 +119,17 @@ Return true if @var{name} is a valid var
 %!assert (isvarname ("_foo"), true)
 %!assert (isvarname ("_1"), true)
 %!assert (isvarname ("1foo"), false)
 %!assert (isvarname (""), false)
 %!assert (isvarname (12), false)
 %!assert (isvarname ("foo+bar"), false)
 
 %!error isvarname ()
-%!error isvarname ("foo", "bar");
+%!error isvarname ("foo", "bar")
 */
 
 // Return TRUE if F and G are both names for the same file.
 
 bool
 same_file (const std::string& f, const std::string& g)
 {
   return same_file_internal (f, g);
diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -363,19 +363,19 @@ used per default.\n\
 %! n = fftw ("threads");
 %! unwind_protect
 %!   fftw ("threads", 3);
 %!   assert (fftw ("threads"), 3);
 %! unwind_protect_cleanup
 %!   fftw ("threads", n);
 %! end_unwind_protect
 
-%!error <Invalid call to fftw> fftw ();
-%!error <Invalid call to fftw> fftw ("planner", "estimate", "measure");
-%!error fftw (3);
-%!error fftw ("invalid");
-%!error fftw ("planner", "invalid");
-%!error fftw ("planner", 2);
-%!error fftw ("dwisdom", "invalid");
-%!error fftw ("swisdom", "invalid");
-%!error fftw ("threads", "invalid");
-%!error fftw ("threads", -3);
+%!error <Invalid call to fftw> fftw ()
+%!error <Invalid call to fftw> fftw ("planner", "estimate", "measure")
+%!error fftw (3)
+%!error fftw ("invalid")
+%!error fftw ("planner", "invalid")
+%!error fftw ("planner", 2)
+%!error fftw ("dwisdom", "invalid")
+%!error fftw ("swisdom", "invalid")
+%!error fftw ("threads", "invalid")
+%!error fftw ("threads", -3)
  */
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -1102,17 +1102,17 @@ element-by-element and a logical array i
 %!test
 %! [x, ~] = try_isargout ();
 %! assert (x, -1);
 %!
 %!test
 %! [~, y] = try_isargout ();
 %! assert (y, -2);
 %!
-%!error [~, ~] = try_isargout ();
+%!error [~, ~] = try_isargout ()
 %!
 %% Check to see that isargout isn't sticky:
 %!test
 %! [x, y] = try_isargout ();
 %! assert ([x, y], [1, 2]);
 %!
 %% It should work without ():
 %!test
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -5114,17 +5114,17 @@ the security considerations that the eva
 %!endfunction
 %!assert (__f(), 2)
 
 % bug #35645
 %!test
 %! [a,] = gcd (1,2);
 %! [a,b,] = gcd (1, 2);
 
-%!error eval ("switch = 13;");
+%!error eval ("switch = 13;")
 
 */
 
 DEFUN (assignin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @qcode{\"base\"} or @qcode{\"caller\"}.\n\
@@ -5165,17 +5165,17 @@ may be either @qcode{\"base\"} or @qcode
   else
     error ("assignin: invalid variable name in argument VARNAME");
 
   return retval;
 }
 
 /*
 
-%!error assignin ("base", "switch", "13");
+%!error assignin ("base", "switch", "13")
 
 */
 
 DEFUN (evalin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {} {} evalin (@var{context}, @var{try})\n\
 @deftypefnx {} {} evalin (@var{context}, @var{try}, @var{catch})\n\
 Like @code{eval}, except that the expressions are evaluated in the context\n\
@@ -5385,17 +5385,17 @@ s = evalc (\"t = 42\"), t\n\
 %!test
 %! warning ("off", "quiet", "local");
 %! assert (evalc ("warning ('foo')"), "warning: foo\n");
 
 %!test
 %! warning ("off", "quiet", "local");
 %! assert (evalc ("error ('foo')", "warning ('bar')"), "warning: bar\n");
 
-%!error evalc ("switch = 13;");
+%!error evalc ("switch = 13;")
 
 */
 
 DEFUN (__parser_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} __parser_debug_flag__ ()\n\
 @deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
 Query or set the internal flag that determines whether Octave's parser prints\n\
diff --git a/scripts/deprecated/md5sum.m b/scripts/deprecated/md5sum.m
--- a/scripts/deprecated/md5sum.m
+++ b/scripts/deprecated/md5sum.m
@@ -66,9 +66,9 @@ endfunction
 %!test
 %! tfile = tempname ();
 %! fid = fopen (tfile, "wb");
 %! fwrite (fid, "abc\0");
 %! fclose (fid);
 %! assert (md5sum (tfile), "147a664a2ca9410911e61986d3f0d52a");
 %! unlink (tfile);
 
-%!error md5sum ();
+%!error md5sum ()
diff --git a/scripts/deprecated/wavread.m b/scripts/deprecated/wavread.m
--- a/scripts/deprecated/wavread.m
+++ b/scripts/deprecated/wavread.m
@@ -120,10 +120,10 @@ endfunction
 ## Functional tests for wavread/wavwrite pair are in wavwrite.m.
 
 ## Test input validation
 %!error wavread ()
 %!error wavread (1)
 %!error wavread ("foo.wav", 2, 3, 4)
 %!error wavread ("foo.wav", "foo")
 %!error wavread ("foo.wav", -1)
-%!error wavread ("foo.wav", [1, Inf], "foo");
+%!error wavread ("foo.wav", [1, Inf], "foo")
 
diff --git a/scripts/deprecated/wavwrite.m b/scripts/deprecated/wavwrite.m
--- a/scripts/deprecated/wavwrite.m
+++ b/scripts/deprecated/wavwrite.m
@@ -185,10 +185,10 @@ endfunction
 %! unwind_protect_cleanup
 %!   unlink (fname);
 %! end_unwind_protect
 
 ## Test input validation
 %!error wavwrite ()
 %!error wavwrite (1)
 %!error wavwrite (1,2,3,4,5)
-%!error wavwrite ([], "foo.wav");
+%!error wavwrite ([], "foo.wav")
 
diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -151,19 +151,19 @@ endfunction
 %!assert (cplxpair (z(randperm (7))), z)
 %!assert (cplxpair ([z(randperm (7)), z(randperm (7))]), [z,z])
 %!assert (cplxpair ([z(randperm (7)), z(randperm (7))],[],1), [z,z])
 %!assert (cplxpair ([z(randperm (7)).'; z(randperm (7)).'],[],2), [z.';z.'])
 
 ## Test tolerance
 %!assert (cplxpair ([2000 * (1+eps) + 4j; 2000 * (1-eps) - 4j]), ...
 %!        [(2000 - 4j); (2000 + 4j)], 100*eps(200))
-%!error <could not pair> cplxpair ([2000 * (1+eps) + 4j; 2000 * (1-eps) - 4j], 0);
+%!error <could not pair> cplxpair ([2000 * (1+eps) + 4j; 2000 * (1-eps) - 4j], 0)
 
-%!error <could not pair> cplxpair ([2e6 + j; 2e6 - j; 1e-9 * (1 + j); 1e-9 * (1 - 2j)]);
+%!error <could not pair> cplxpair ([2e6 + j; 2e6 - j; 1e-9 * (1 + j); 1e-9 * (1 - 2j)])
 
 ## Test input validation
 %!error cplxpair ()
 %!error cplxpair (1,2,3,4)
 %!error <TOL must be .* positive> cplxpair (1, -1)
 %!error <TOL must be .* scalar number> cplxpair (1, ones (2,2))
 %!error <invalid dimension DIM> cplxpair (1, [], 3)
 
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -157,11 +157,11 @@ endfunction
 %!test
 %! [n, d] = rat ([0.5, 0.3, 1/3]);
 %! assert (n, [1, 3, 1]);
 %! assert (d, [2, 10, 3]);
 
 ## bug #43374
 %!assert (eval (rat (0.75)), [0.75])
 
-%!error rat ();
-%!error rat (1, 2, 3);
+%!error rat ()
+%!error rat (1, 2, 3)
 
diff --git a/scripts/image/im2double.m b/scripts/image/im2double.m
--- a/scripts/image/im2double.m
+++ b/scripts/image/im2double.m
@@ -121,11 +121,11 @@ endfunction
 
 ## Test lack of input check for Matlab compatibility
 %!assert (im2double ([0 1 2], "indexed"), [0 1 2])
 %!assert (im2double ([0 -1 -2], "indexed"), [0 -1 -2])
 %!assert (im2double ([0 -1.5 -2], "indexed"), [0 -1.5 -2])
 %!assert (im2double ([0 -1.5 -2i], "indexed"), [0 -1.5 -2i])
 %!assert (im2double ([false true], "indexed"), [0 1])
 
-%!error <unsigned integer class> im2double (int16 ([17 8]), "indexed");
-%!error <unsigned integer class> im2double (int16 ([-7 8]), "indexed");
-%!error <must be the string "indexed"> im2double ([1 2 3], "non-indexed");
+%!error <unsigned integer class> im2double (int16 ([17 8]), "indexed")
+%!error <unsigned integer class> im2double (int16 ([-7 8]), "indexed")
+%!error <must be the string "indexed"> im2double ([1 2 3], "non-indexed")
diff --git a/scripts/linear-algebra/rref.m b/scripts/linear-algebra/rref.m
--- a/scripts/linear-algebra/rref.m
+++ b/scripts/linear-algebra/rref.m
@@ -121,10 +121,10 @@ endfunction
 %! a = [1 2 1; 2 4 2.01; 2 4 2.1];
 %! tol = 0.02;
 %! [r k] = rref (a, tol);
 %! assert (rank (a, tol), rank (r, tol), 2e-8);
 %! tol = 0.2;
 %! [r k] = rref (a, tol);
 %! assert (rank (a, tol), rank (r, tol), 2e-8);
 
-%!error rref ();
+%!error rref ()
 
diff --git a/scripts/plot/draw/stem3.m b/scripts/plot/draw/stem3.m
--- a/scripts/plot/draw/stem3.m
+++ b/scripts/plot/draw/stem3.m
@@ -82,12 +82,12 @@ endfunction
 %! stem3 (cos (theta), sin (theta), theta);
 %! title ('stem3() plot');
 
 %!error stem3 ()
 %!error <must define X, Y, and Z> stem3 (1,2)
 %!error <X, Y, and Z must be numeric> stem3 ({1}, 1, 1)
 %!error <X, Y, and Z must be numeric> stem3 (1, {1}, 1)
 %!error <X, Y, and Z must be numeric> stem3 (1, 1, {1})
-%!error <inconsistent sizes for X, Y, and Z> stem3 (ones (2,2), 1, 1);
-%!error <inconsistent sizes for X, Y, and Z> stem3 (1, ones (2,2), 1);
-%!error <inconsistent sizes for X, Y, and Z> stem3 (1, 1, ones (2,2));
+%!error <inconsistent sizes for X, Y, and Z> stem3 (ones (2,2), 1, 1)
+%!error <inconsistent sizes for X, Y, and Z> stem3 (1, ones (2,2), 1)
+%!error <inconsistent sizes for X, Y, and Z> stem3 (1, 1, ones (2,2))
 %!error <No value specified for property "FOO"> stem3 (1, "FOO")
diff --git a/scripts/plot/util/rotate.m b/scripts/plot/util/rotate.m
--- a/scripts/plot/util/rotate.m
+++ b/scripts/plot/util/rotate.m
@@ -170,19 +170,19 @@ endfunction
 %!shared h1, h2, o1, o2, o3
 %! h1 = figure ("visible", "off");
 %! o1 = line ();
 %! h2 = figure ("visible", "off");
 %! o2 = line ();
 %! o3 = text (0, 0, "foobar");
 %!error rotate ()
 %!error rotate (o1)
-%!error rotate (o1, [0,0,0]);
-%!error <all handles must be children of the same axes object> rotate ([o1, o2], [0,0,0], 90);
-%!error <invalid direction> rotate (o1, "foo", 90);
-%!error <invalid rotation angle> rotate (o1, [0,0,0], "foo");
-%!error <invalid origin> rotate (o1, [0,0,0], 90, "foo");
-%!error rotate (o1, [0,0,0], 90, [0,0,0], 1);
-%!error <H must be an array of one or more graphics handles> rotate (NaN, [0,0,0], 90);
-%!error <expecting image, line, patch, or surface objects> rotate (o3, [0,0,0], 90);
+%!error rotate (o1, [0,0,0])
+%!error <all handles must be children of the same axes object> rotate ([o1, o2], [0,0,0], 90)
+%!error <invalid direction> rotate (o1, "foo", 90)
+%!error <invalid rotation angle> rotate (o1, [0,0,0], "foo")
+%!error <invalid origin> rotate (o1, [0,0,0], 90, "foo")
+%!error rotate (o1, [0,0,0], 90, [0,0,0], 1)
+%!error <H must be an array of one or more graphics handles> rotate (NaN, [0,0,0], 90)
+%!error <expecting image, line, patch, or surface objects> rotate (o3, [0,0,0], 90)
 %!test
 %! close (h1);
 %! close (h2);
diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -167,11 +167,11 @@ endfunction
 %!assert (pp.dim, [3,2])
 %!assert (ppval (pp,pi), [0,-1;1,0;-1,-2], 1e-14)
 %!assert (yi3(:,:,2), ppval (pp,pi), 1e-14)
 %!assert (yi3(:,:,1), [1,0;2,1;0,-1], 1e-14)
 %!assert (squeeze (yi1(1,2,:)), [1/sqrt(2); 0; -1/sqrt(2);-1], 1e-14)
 %!assert (size (yi2), [3,2,5,4])
 %!assert (squeeze (yi2(1,2,3,:)), [1/sqrt(2); 0; -1/sqrt(2);-1], 1e-14)
 
-%!error (pchip (1,2));
-%!error (pchip (1,2,3));
+%!error (pchip (1,2))
+%!error (pchip (1,2,3))
 
diff --git a/scripts/signal/blackman.m b/scripts/signal/blackman.m
--- a/scripts/signal/blackman.m
+++ b/scripts/signal/blackman.m
@@ -84,10 +84,10 @@ endfunction
 %! N = 16;
 %! A = blackman (N, "periodic");
 %! assert (A(N/2 + 1), 1, 1e-6);
 
 %!error blackman ()
 %!error blackman (0.5)
 %!error blackman (-1)
 %!error blackman (ones (1,4))
-%!error blackman (1, "invalid");
+%!error blackman (1, "invalid")
 
diff --git a/scripts/signal/hamming.m b/scripts/signal/hamming.m
--- a/scripts/signal/hamming.m
+++ b/scripts/signal/hamming.m
@@ -82,10 +82,10 @@ endfunction
 %! N = 16;
 %! A = hamming (N, "periodic");
 %! assert (A(N/2 + 1), 1);
 
 %!error hamming ()
 %!error hamming (0.5)
 %!error hamming (-1)
 %!error hamming (ones (1,4))
-%!error hamming (1, "invalid");
+%!error hamming (1, "invalid")
 
diff --git a/scripts/signal/hanning.m b/scripts/signal/hanning.m
--- a/scripts/signal/hanning.m
+++ b/scripts/signal/hanning.m
@@ -82,10 +82,10 @@ endfunction
 %! N = 16;
 %! A = hanning (N, "periodic");
 %! assert (A(N/2 + 1), 1);
 
 %!error hanning ()
 %!error hanning (0.5)
 %!error hanning (-1)
 %!error hanning (ones (1,4))
-%!error hanning (1, "invalid");
+%!error hanning (1, "invalid")
 
diff --git a/scripts/signal/spectral_adf.m b/scripts/signal/spectral_adf.m
--- a/scripts/signal/spectral_adf.m
+++ b/scripts/signal/spectral_adf.m
@@ -65,13 +65,13 @@ function retval = spectral_adf (c, win, 
   retval = 2 * real (fft (c)) - c(1);
   retval = [(zeros (cr, 1)), retval];
   retval(:, 1) = (0 : cr-1)' / cr;
 
 endfunction
 
 
 ## Test input validation
-%!error spectral_adf ();
-%!error spectral_adf (1, 2, 3, 4);
-%!error spectral_adf (1, 2);
-%!error spectral_adf (1, "invalid");
+%!error spectral_adf ()
+%!error spectral_adf (1, 2, 3, 4)
+%!error spectral_adf (1, 2)
+%!error spectral_adf (1, "invalid")
 
diff --git a/scripts/signal/spectral_xdf.m b/scripts/signal/spectral_xdf.m
--- a/scripts/signal/spectral_xdf.m
+++ b/scripts/signal/spectral_xdf.m
@@ -67,13 +67,13 @@ function retval = spectral_xdf (x, win, 
 
   retval = [(zeros (xr, 1)), retval];
   retval(:, 1) = (0 : xr-1)' / xr;
 
 endfunction
 
 
 ## Test input validation
-%!error spectral_xdf ();
-%!error spectral_xdf (1, 2, 3, 4);
-%!error spectral_xdf (1, 2);
-%!error spectral_xdf (1, "invalid");
+%!error spectral_xdf ()
+%!error spectral_xdf (1, 2, 3, 4)
+%!error spectral_xdf (1, 2)
+%!error spectral_xdf (1, "invalid")
 
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -444,25 +444,25 @@ endfunction
 %!assert (3+eps, 3, eps)
 %!assert (3, 3+eps, eps)
 %!error <Abs err 4.4409e-0?16 exceeds tol> assert (3+2*eps, 3, eps)
 %!error <Abs err 4.4409e-0?16 exceeds tol> assert (3, 3+2*eps, eps)
 
 ## vectors
 %!assert ([1,2,3],[1,2,3])
 %!assert ([1;2;3],[1;2;3])
-%!error <Abs err 1 exceeds tol 0> assert ([2,2,3,3],[1,2,3,4]);
-%!error <Abs err 1 exceeds tol 0.5> assert ([2,2,3,3],[1,2,3,4],0.5);
-%!error <Rel err 1 exceeds tol 0.1> assert ([2,2,3,5],[1,2,3,4],-0.1);
-%!error <Abs err 1 exceeds tol 0> assert ([6;6;7;7],[5;6;7;8]);
-%!error <Abs err 1 exceeds tol 0.5> assert ([6;6;7;7],[5;6;7;8],0.5);
-%!error <Rel err .* exceeds tol 0.1> assert ([6;6;7;7],[5;6;7;8],-0.1);
-%!error <Dimensions don't match> assert ([1,2,3],[1;2;3]);
-%!error <Dimensions don't match> assert ([1,2],[1,2,3]);
-%!error <Dimensions don't match> assert ([1;2;3],[1;2]);
+%!error <Abs err 1 exceeds tol 0> assert ([2,2,3,3],[1,2,3,4])
+%!error <Abs err 1 exceeds tol 0.5> assert ([2,2,3,3],[1,2,3,4],0.5)
+%!error <Rel err 1 exceeds tol 0.1> assert ([2,2,3,5],[1,2,3,4],-0.1)
+%!error <Abs err 1 exceeds tol 0> assert ([6;6;7;7],[5;6;7;8])
+%!error <Abs err 1 exceeds tol 0.5> assert ([6;6;7;7],[5;6;7;8],0.5)
+%!error <Rel err .* exceeds tol 0.1> assert ([6;6;7;7],[5;6;7;8],-0.1)
+%!error <Dimensions don't match> assert ([1,2,3],[1;2;3])
+%!error <Dimensions don't match> assert ([1,2],[1,2,3])
+%!error <Dimensions don't match> assert ([1;2;3],[1;2])
 
 ## matrices
 %!assert ([1,2;3,4],[1,2;3,4])
 %!error <\(1,2\)\s+4\s+2> assert ([1,4;3,4],[1,2;3,4])
 %!error <Dimensions don't match> assert ([1,3;2,4;3,5],[1,2;3,4])
 %!test  # 2-D matrix
 %! A = [1 2 3]'*[1,2];
 %! assert (A, A);
@@ -476,19 +476,19 @@ endfunction
 ## must give a small tolerance for floating point errors on relative
 %!assert (100+100*eps, 100, -2*eps)
 %!assert (100, 100+100*eps, -2*eps)
 %!error <Rel err .* exceeds tol> assert (100+300*eps, 100, -2*eps)
 %!error <Rel err .* exceeds tol> assert (100, 100+300*eps, -2*eps)
 
 ## test relative vs. absolute tolerances
 %!test  assert (0.1+eps, 0.1, 2*eps);
-%!error <Rel err 2.2204e-0?15 exceeds tol> assert (0.1+eps, 0.1, -2*eps);
+%!error <Rel err 2.2204e-0?15 exceeds tol> assert (0.1+eps, 0.1, -2*eps)
 %!test  assert (100+100*eps, 100, -2*eps);
-%!error <Abs err 2.8422e-0?14 exceeds tol> assert (100+100*eps, 100, 2*eps);
+%!error <Abs err 2.8422e-0?14 exceeds tol> assert (100+100*eps, 100, 2*eps)
 
 ## Corner case of relative tolerance with 0 divider
 %!error <Abs err 2 exceeds tol 0.1> assert (2, 0, -0.1)
 
 ## Extra checking of inputs when tolerance unspecified.
 %!error <Class single != double> assert (single (1), 1)
 %!error <Class uint8 != uint16> assert (uint8 (1), uint16 (1))
 %!error <sparse != non-sparse> assert (sparse([1]), [1])
diff --git a/scripts/testfun/fail.m b/scripts/testfun/fail.m
--- a/scripts/testfun/fail.m
+++ b/scripts/testfun/fail.m
@@ -137,19 +137,18 @@ function retval = fail (code, pattern, w
   error (msg);
 
 endfunction
 
 
 %!fail ("[1,2]*[2,3]", "nonconformant")
 %!fail ("fail ('[1,2]*[2;3]', 'nonconformant')", "expected error <nonconformant> but got none")
 %!fail ("fail ('[1,2]*[2,3]', 'usage:')", "expected error <usage:>\nbut got.*nonconformant")
-%!fail ("warning ('test warning')", "warning", "test warning");
-
-#%!fail ("warning ('next test')",'warning','next test');  # only allowed one warning test?!?
+%!fail ("warning ('test warning')", "warning", "test warning")
+%!fail ("warning ('next test')", 'warning', 'next test')
 
 ## Test that fail() itself will generate an error
 %!error <expected error> fail ("1")
 %!error <'__a__' undefined> fail ("__a__*[2;3]", "nonconformant")
 %!error <expected error .usage:>  fail ("__a__*[2,3]", "usage:")
 %!error <warning failure> fail ("warning ('warning failure')", "warning", "success")
 
 ## Test input validation
diff --git a/scripts/time/etime.m b/scripts/time/etime.m
--- a/scripts/time/etime.m
+++ b/scripts/time/etime.m
@@ -70,12 +70,12 @@ endfunction
 %! t5 = [1993, 8, 20, 4, 56, 14];
 %!
 %! assert (etime (t2, t1), 86400);
 %! assert (etime (t3, t1), 3600);
 %! assert (etime (t4, t1), 60);
 %! assert (etime (t5, t1), 13);
 
 ## Test input validation
-%!error etime ();
-%!error etime (1);
-%!error etime (1, 2, 3);
+%!error etime ()
+%!error etime (1)
+%!error etime (1, 2, 3)
 
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -578,18 +578,18 @@ gen_unaryop_tests() {
 %!error [i,j] = size (af);as(i-1,j+1);
 %!error [i,j] = size (af);as(i+1,j-1);
 %!test
 %! [Is,Js,Vs] = find (as);
 %! [If,Jf,Vf] = find (af);
 %! assert (Is, If);
 %! assert (Js, Jf);
 %! assert (Vs, Vf);
-%!error as(0,1);
-%!error as(1,0);
+%!error as(0,1)
+%!error as(1,0)
 %!assert (find (as), find (af))
 %!test
 %! [i,j,v] = find (as);
 %! [m,n] = size (as);
 %! x = sparse (i,j,v,m,n);
 %! assert (x, as);
 %!test
 %! [i,j,v,m,n] = find (as);
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -235,23 +235,23 @@
 
 %% Test overloaded times (.*) for the Snork class
 %!test  s = s1 .* s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 .* x2));
 %!test  s = s1 .* x2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 .* x2));
 %!test  s = x1 .* s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 .* x2));
 
 %% Test overloaded mpower (^) for the Snork class
 %!test  s = s1 ^ 3;   assert (isa (s, 'Snork') && isequal (s.gick, x1 ^ 3));
-%!error <mpower Snork!!!>  s = s1 ^ s1;
-%!error <mpower Snork!!!>  s = 20 ^ s1;
+%!error <mpower Snork!!!>  s = s1 ^ s1
+%!error <mpower Snork!!!>  s = 20 ^ s1
 
 %% Test overloaded power (.^) for the Snork class
 %!test  s = s1 .^ 2;   assert (isa (s, 'Snork') && isequal (s.gick, x1 .^ 2));
-%!error <power Snork!!!>  s = s1 .^ s1;
-%!error <power Snork!!!>  s = 20 .^ s1;
+%!error <power Snork!!!>  s = s1 .^ s1
+%!error <power Snork!!!>  s = 20 .^ s1
 
 %% Test overloaded rdivide (./) for the Snork class
 %!test  s = s1 ./ s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 ./ x2));
 %!test  s = s1 ./ x2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 ./ x2));
 %!test  s = x1 ./ s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 ./ x2));
 
 %% Test overloaded ldivide (.\) for the Snork class
 %!test  s = s1 .\ s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 .\ x2));
@@ -326,18 +326,18 @@
 %!test x2 = [x1 x1];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]))
 %!test x2 = [x1 51];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]))
 %!test x3 = [x2; x2];
 %!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]))
 %!test x3 = [x2; [51 x1]];
 %!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]))
-%!error <dimension mismatch> x4 = [x1, x3];
-%!error <dimension mismatch> x4 = [x1; x3];
+%!error <dimension mismatch> x4 = [x1, x3]
+%!error <dimension mismatch> x4 = [x1; x3]
 
 %%%%%%%%%%%%%%%%%%%%%%%%
 %% Testing precedence %%
 %%%%%%%%%%%%%%%%%%%%%%%%
 
 %% default: leftmost object wins
 %!shared A, B
 %!test A = Snork (rand (2));
@@ -346,25 +346,25 @@
 %!assert (isequal (tattack (B, A), 'CPrecedenceTester1'))  % idem
 
 %!shared A, B
 %!test A = Snork (rand (2));
 %!test B = CPrecedenceTester2 (1);  % CPrecedenceTester2 > Snork
 %!assert (isequal (tattack (A, B), 'CPrecedenceTester2'))
 %!assert (isequal (tattack (B, A), 'CPrecedenceTester2'))
 %% Trying to change to CPrecendenceTester < Snork
-%!error D = CPrecedenceTester2 (2);
+%!error D = CPrecedenceTester2 (2)
 
 %!shared A, B
 %!test A = Snork (rand (2));
 %!test B = CPrecedenceTester3 (2);  % CPrecedenceTester3 < Snork
 %!assert (isequal (tattack (A, B), 'Snork'))
 %!assert (isequal (tattack (B, A), 'Snork'))
 %% Trying to change to CPrecendenceTester3 > Snork
-%!error D = CPrecedenceTester3 (1);
+%!error D = CPrecedenceTester3 (1)
 
 ##############################################
 ## Testing overridden size+numel method     ##
 ## (builtin size method and similar methods ##
 ## use the size of the struct container)    ##
 ##############################################
 
 %!shared st
diff --git a/test/ctor-vs-method/ctor-vs-method.tst b/test/ctor-vs-method/ctor-vs-method.tst
--- a/test/ctor-vs-method/ctor-vs-method.tst
+++ b/test/ctor-vs-method/ctor-vs-method.tst
@@ -21,17 +21,17 @@
 %%
 %%  Note: This script and all classes are also intended to run
 %%        in Matlab to test compatibility.  Don't break that!
 
 %!shared d, o
 %! d = derived ();
 %! o = other ();
 %!
-%!error method (o);
+%!error method (o)
 
 %!test
 %! ctrace = {'begin parent/method';
 %!           'begin derived/parent';
 %!           'begin parent/parent';
 %!           'end parent/parent';
 %!           'end derived/parent';
 %!           'end parent/method'};
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -211,20 +211,20 @@
 %! dd = diag ([1, 2, 3], 6, 3);
 %!assert (d(1), 1)
 %!assert (dd(1), 1)
 %!assert (d(3, 3), 3)
 %!assert (dd(3, 3), 3)
 %!assert (d(2), 0)
 %!assert (dd(2), 0)
 %!assert (dd(6,1), 0)
-%!error d(6,6);
-%!error dd(6,6);
-%!error d(3,6);
-%!error dd(3,6);
+%!error d(6,6)
+%!error dd(6,6)
+%!error d(3,6)
+%!error dd(3,6)
 
 ## bug 31287
 %!test
 %! y = ones (2, 2, 2);
 %! x = ones (2, 2, 2);
 %! x(false) = [];
 %! assert (x, y);
 
@@ -405,17 +405,17 @@
 %! y = ones (2, 2);
 %! x = ones (2, 2);
 %! x(:, [], false) = [];
 %! assert (x, y);
 
 %!shared x, y
 %! y = ones (2, 2);
 %! x = ones (2, 2);
-%!error x(1, 1, []) = [];
+%!error x(1, 1, []) = []
 
 %!shared x, y
 %! y = ones (2, 2);
 %! x = ones (2, 2);
 %! x(false, false, 1) = [];
 %! assert (x, y);
 
 %!shared x, y
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -423,18 +423,18 @@
 %!error <Invalid call to fopen> fopen ()
 %!error <Invalid call to fopen> fopen ("foo", "wb", "native", 1)
 
 %!error fclose (0)
 %!error <Invalid call to fclose> fclose (1, 2)
 
 %!assert (ischar (tempname ()))
 
-%!error <DIR must be a string> tempname (1);
-%!error <PREFIX must be a string> tempname ("foo", 1);
+%!error <DIR must be a string> tempname (1)
+%!error <PREFIX must be a string> tempname ("foo", 1)
 
 %!error <Invalid call to tempname> tempname (1, 2, 3)
 
 %!test
 %! type_list = ["char"; "char*1"; "integer*1"; "int8";
 %! "schar"; "signed char"; "uchar"; "unsigned char";
 %! "short"; "ushort"; "unsigned short"; "int";
 %! "uint"; "unsigned int"; "long"; "ulong"; "unsigned long";
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -21,35 +21,35 @@
 %! c = fieldnames (s);
 %! assert (iscell (c) && strcmp (c{1}, "a"));
 
 %!test
 %! s.a.b = 1;
 %! c = fieldnames (s.a);
 %! assert (iscell (c) && strcmp (c{1}, "b"));
 
-%!error <Invalid call to fieldnames> fieldnames ();
+%!error <Invalid call to fieldnames> fieldnames ()
 
 %!test
 %! s.a = 1;
 %! fail ("fieldnames (s, 1)", "Invalid call to fieldnames");
 
-%!error fieldnames (1);
+%!error fieldnames (1)
 
 %!test
 %! s.aaa = 1;
 %! s.a = 2;
 %! assert (isfield (s, "a"));
 
 %!test
 %! s.aaa = 1;
 %! s.a = 2;
 %! assert (!(isfield (s, "b")));
 
-%!error <Invalid call to isfield> isfield ();
+%!error <Invalid call to isfield> isfield ()
 
 %!test
 %! s.aaa = 1;
 %! s.a = 2;
 %! fail ("isfield (s, 'a', 3);", "Invalid call to isfield");
 
 %!assert (isfield (1, "m") == 0)
 
@@ -69,17 +69,17 @@
 %!test
 %! s.a = 1;
 %! assert (isstruct (s));
 
 %!test
 %! s.a.b = 1;
 %! assert (isstruct (s.a));
 
-%!error <Invalid call to isstruct> isstruct ();
+%!error <Invalid call to isstruct> isstruct ()
 
 %!test
 %! s.a = 1;
 %! fail ("isstruct (s, 1)", "Invalid call to isstruct");
 
 ## increment element of matrix stored in struct array field
 %!test
 %! a = struct ("c", {[1, 2, 3], [4, 5, 6], [7, 8, 9]});
