# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238156341 -3600
#      Fri Mar 27 13:19:01 2009 +0100
# Node ID a1635f7c4cbeaf758dfde892c2a34bc1ae1d8532
# Parent  88bf56bbccca84f1800b460559bd8f3c7b07cb76
update diag-perm.txi

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/diagperm.txi: Mention mixing with sparse matrices.
+
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc (process_texi_input_file):
 	Copy leading comment with file name info to output.
 
 2009-03-09  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/Makefile.in (DISTFILES): Use doc-cache instead of
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -253,16 +253,22 @@ by its reciprocal.
 The matrix division algorithms do, in fact, use division rather than 
 multiplication by reciprocals for better numerical accuracy; otherwise, they
 honor the above definition.  Note that a diagonal matrix is never truncated due
 to ill-conditioning; otherwise, it would not be much useful for scaling. This
 is typically consistent with linear algebra needs. A full matrix that only
 happens to be diagonal (an is thus not a special object) is of course treated
 normally.
 
+Multiplication and division by diagonal matrices works efficiently also when
+combined with sparse matrices, i.e. @code{D*S}, where @var{D} is a diagonal
+matrix and @var{S} is a sparse matrix scales the rows of the sparse matrix and
+returns a sparse matrix. The expressions @code{S*D}, @code{D\S}, @code{S/D} work
+analogically.
+
 If @var{D1} and @var{D2} are both diagonal matrices, then the expressions
 @example
 D1 + D2
 D1 - D2 
 D1 * D2 
 D1 / D2 
 D1 \ D2
 @end example
@@ -315,16 +321,22 @@ A permutation matrix can be transposed (
 same, because a permutation matrix is never complex), inverting the
 permutation, or equivalently, turning a row-permutation matrix into a
 column-permutation one. For permutation matrices, transpose is equivalent to
 inversion, thus @code{P\M} is equivalent to @code{P'*M}.  Transpose of a
 permutation matrix (or inverse) is a constant-time operation, flipping only a
 flag internally, and thus the choice between the two above equivalent
 expressions for inverse permuting is completely up to the user's taste.
 
+Multiplication and division by permutation matrices works efficiently also when
+combined with sparse matrices, i.e. @code{P*S}, where @var{P} is a permutation
+matrix and @var{S} is a sparse matrix permutes the rows of the sparse matrix and
+returns a sparse matrix. The expressions @code{S*P}, @code{P\S}, @code{S/P} work
+analogically.
+
 Two permutation matrices can be multiplied or divided (if their sizes match), performing
 a composition of permutations. Also a permutation matrix can be indexed by a permutation
 vector (or two vectors), giving again a permutation matrix.
 Any other operations do not generally yield a permutation matrix and will thus
 trigger the implicit conversion.
 
 @node Function Support
 @section Functions That Are Aware of These Matrices
@@ -346,27 +358,34 @@ diagonal or permutation matrices).
 @dfn{inv} and @dfn{pinv} can be applied to a diagonal matrix, yielding again
 a diagonal matrix. @dfn{det} will use an efficient straightforward calculation
 when given a diagonal matrix, as well as @dfn{cond}.
 The following mapper functions can be applied to a diagonal matrix
 without converting it to a full one:
 @dfn{abs}, @dfn{real}, @dfn{imag}, @dfn{conj}, @dfn{sqrt}. 
 A diagonal matrix can also be returned from the @dfn{balance}
 and @dfn{svd} functions.
+The @dfn{sparse} function will convert a diagonal matrix efficiently to a
+sparse matrix.
 
 @node Permutation Matrix Functions
 @subsection Permutation Matrix Functions
 
 @dfn{inv} and @dfn{pinv} will invert a permutation matrix, preserving its
 specialness. @dfn{det} can be applied to a permutation matrix, efficiently
 calculating the sign of the permutation (which is equal to the determinant).
 
 A permutation matrix can also be returned from the built-in functions
 @dfn{lu} and @dfn{qr}, if a pivoted factorization is requested.
 
+The @dfn{sparse} function will convert a permutation matrix efficiently to a
+sparse matrix.
+The @dfn{find} function will also work efficiently with a permutation matrix,
+making it possible to conveniently obtain the permutation indices.
+
 @node Example Codes
 @section Some Examples of Usage
 
 The following can be used to solve a linear system @code{A*x = b}
 using the pivoted LU factorization:
 @example
   [L, U, P] = lu (A); ## now L*U = P*A
   x = U \ L \ P*b;
