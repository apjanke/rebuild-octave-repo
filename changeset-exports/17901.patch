# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1384203687 -3600
#      Mon Nov 11 22:01:27 2013 +0100
# Node ID 2c241092b47ba91941ec9b7d20bb35f7efc022e8
# Parent  8e95326328387633a0679d43087249a890928237
use edit.m for creating a new function with the gui (bug #40502)

* file-editor-interface.h: request_new_function without string argument

* file-editor.cc (request_new_function): boolean instead of string as parameter,
  ask for function name, set preference for not asking when creating new files,
  connect a signal when file is loaded, and evaluate edit in the console
  (restore_create_file_setting): slot that restores the create file pref when
  file is loaded
  (request_open_file): emit a signal when file is loaded
  (construct): new action for new function, connect execute in terminal signal

* file_editor.h: new signal for executing a command in terminal, new signal
  when file is loaded, request_new_function with boolean instead of string
  parameter, new slot for restoring prompt create new file preference

* main-window.cc (construct_new_menu): new function action as class variable
  (set_global_shortcuts): shortcut for new function

* main-window.h: new function action as class variable

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -59,17 +59,17 @@ public:
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_new_script (const QString& command = QString ()) = 0;
-  virtual void request_new_function (const QString& command = QString ()) = 0;
+  virtual void request_new_function (bool) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
 
 //protected:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <QApplication>
 #include <QFile>
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
 #include <QProcess>
+#include <QInputDialog>
 
 #include "octave-link.h"
 #include "utils.h"
 
 file_editor::file_editor (QWidget *p)
   : file_editor_interface (p)
 {
   // Set current editing directory before construct because loaded
@@ -146,32 +147,49 @@ file_editor::request_new_file (const QSt
 
 void
 file_editor::request_new_script (const QString& commands)
 {
   request_new_file (commands);
 }
 
 void
-file_editor::request_new_function (const QString& commands)
+file_editor::request_new_function (bool)
 {
-  QString text = commands;
+  bool ok;
+  // get the name of the new function
+  QString new_name  = QInputDialog::getText (this, tr ("New Function"),
+                      tr ("New function name:\n"), QLineEdit::Normal, "", &ok);
+  if (ok && new_name.length () > 0)
+    {
+      // append suffix if it not already exists
+      if (new_name.rightRef (2) != ".m")
+        new_name.append (".m");
+      // check whether new files are created without prompt
+      QSettings *settings = resource_manager::get_settings ();
+      if (! settings->value ("editor/create_new_file",false).toBool ())
+        {
+          // no, so enable this settings and wait for end of new file loading
+          settings->setValue ("editor/create_new_file",true);
+          connect (this, SIGNAL (file_loaded_signal ()),
+                   this, SLOT (restore_create_file_setting ()));
+        }
+      // start the edit command
+      emit execute_command_in_terminal_signal ("edit " + new_name);
+    }
+}
 
-  if (text.isEmpty ())
-    text = "## Copyright (C)\n"
-      "\n"
-      "## -*- texinfo -*-\n"
-      "## @deftypefn {Function File} {[outputs] =} unamed_function (inputs)\n"
-      "## @end deftypefn\n"
-      "\n"
-      "function [outputs] = unnamed_function (inputs)\n"
-      "\n"
-      "endfunction\n";
-
-  request_new_file (text);
+void
+file_editor::restore_create_file_setting ()
+{
+  // restore the new files creation setting
+  QSettings *settings = resource_manager::get_settings ();
+  settings->setValue ("editor/create_new_file",false);
+  disconnect (this, SIGNAL (file_loaded_signal ()),
+              this, SLOT (restore_create_file_setting ()));
 }
 
 void
 file_editor::request_open_file (void)
 {
   // Open file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
@@ -314,18 +332,17 @@ file_editor::request_open_file (const QS
                       msgBox->setAttribute (Qt::WA_DeleteOnClose);
                       msgBox->show ();
                     }
                   else
                     {
                       // File does not exist, should it be crated?
                       QMessageBox *msgBox;
                       int answer;
-                      if (settings->value ("editor/create_new_file",
-                                           false).toBool ())
+                      if (settings->value ("editor/create_new_file", false).toBool ())
                         {
                           answer = QMessageBox::Yes;
                         }
                       else
                         {
                           msgBox = new QMessageBox (QMessageBox::Question,
                                                     tr ("Octave Editor"),
                                                     tr ("File\n%1\ndoes not exist. "
@@ -361,16 +378,17 @@ file_editor::request_open_file (const QS
                             }
                         }
                     }
                 }
             }
 
           // really show editor and the current editor tab
           set_focus ();
+          emit file_loaded_signal ();
         }
     }
 }
 
 // open a file from the mru list
 void
 file_editor::request_mru_open_file (QAction *action)
 {
@@ -954,16 +972,18 @@ file_editor::construct (void)
   // menu bar
   QMenu *fileMenu = new QMenu (tr ("&File"), _menu_bar);
 
   _mru_file_menu = new QMenu (tr ("&Recent Editor Files"), fileMenu);
   for (int i = 0; i < MaxMRUFiles; ++i)
     _mru_file_menu->addAction (_mru_file_actions[i]);
 
   fileMenu->addAction (new_action);
+  fileMenu->addAction (QIcon (), tr ("New &Function"),
+                      this, SLOT (request_new_function (bool)));
   fileMenu->addAction (open_action);
   fileMenu->addMenu (_mru_file_menu);
   fileMenu->addSeparator ();
   _context_edit_action =
     fileMenu->addAction (QIcon (), tr ("&Edit Function"),
                          this, SLOT (request_context_edit (bool)));
   fileMenu->addSeparator ();
   fileMenu->addAction (_save_action);
@@ -1145,16 +1165,19 @@ file_editor::construct (void)
   mru_menu_update ();
 
   connect (_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (handle_tab_close_request (int)));
 
   connect (_tab_widget, SIGNAL (currentChanged (int)),
            this, SLOT (active_tab_changed (int)));
 
+  connect (this, SIGNAL (execute_command_in_terminal_signal (const QString&)),
+           main_win (), SLOT (execute_command_in_terminal (const QString&)));
+
   resize (500, 400);
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title ("Editor");
 
   //restore previous session
   if (settings->value ("editor/restoreSession", true).toBool ())
     {
       QStringList sessionFileNames
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -94,23 +94,25 @@ signals:
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID,
                                    int line = -1);
   void fetab_set_focus (const QWidget* ID);
   void request_settings_dialog (const QString&);
+  void execute_command_in_terminal_signal (const QString&);
+  void file_loaded_signal ();
 
 public slots:
   void focus (void);
 
   void request_new_file (const QString& commands);
   void request_new_script (const QString& commands);
-  void request_new_function (const QString& commands);
+  void request_new_function (bool triggered = true);
   void request_open_file (void);
   void request_close_file (bool);
   void request_close_all_files (bool);
   void request_close_other_files (bool);
   void request_mru_open_file (QAction *action);
   void request_print_file (void);
 
   void request_undo (void);
@@ -171,16 +173,17 @@ protected slots:
 
 private slots:
 
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
   void request_styles_preferences (bool);
+  void restore_create_file_setting ();
 
 private:
 
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1166,27 +1166,28 @@ main_window::construct_new_menu (QMenu *
 {
   QMenu *new_menu = p->addMenu (tr ("New"));
 
   _new_script_action
     = new_menu->addAction (QIcon (":/actions/icons/filenew.png"),
                            tr ("Script"));
   _new_script_action->setShortcutContext (Qt::ApplicationShortcut);
 
-  QAction *new_function_action = new_menu->addAction (tr ("Function"));
-  new_function_action->setEnabled (true);
+  _new_function_action = new_menu->addAction (tr ("Function"));
+  _new_function_action->setEnabled (true);
+  _new_function_action->setShortcutContext (Qt::ApplicationShortcut);
 
   QAction *new_figure_action = new_menu->addAction (tr ("Figure"));
   new_figure_action->setEnabled (true);
 
 #ifdef HAVE_QSCINTILLA
   connect (_new_script_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_new_script ()));
 
-  connect (new_function_action, SIGNAL (triggered ()),
+  connect (_new_function_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_new_function ()));
 #endif
 
   connect (new_figure_action, SIGNAL (triggered ()),
            this, SLOT (handle_new_figure_request ()));
 }
 
 void
@@ -1804,31 +1805,35 @@ main_window::find_files_finished (int)
 void
 main_window::set_global_shortcuts (bool set_shortcuts)
 {
   if (set_shortcuts)
     {
 
       _open_action->setShortcut (QKeySequence::Open);
       _new_script_action->setShortcut (QKeySequence::New);
+      _new_function_action->setShortcut (Qt::ControlModifier
+                                       + Qt::ShiftModifier
+                                       + Qt::Key_N);
 
       _exit_action->setShortcut (QKeySequence::Quit);
 
       _find_files_action->setShortcut (Qt::ControlModifier
                                        + Qt::ShiftModifier
                                        + Qt::Key_F);
 
     }
   else
     {
 
       QKeySequence no_key = QKeySequence ();
 
       _open_action->setShortcut (no_key);
       _new_script_action->setShortcut (no_key);
+      _new_function_action->setShortcut (no_key);
 
       _exit_action->setShortcut (no_key);
 
       _find_files_action->setShortcut (no_key);
 
     }
 
   emit set_widget_shortcuts_signal (set_shortcuts);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -298,16 +298,17 @@ private:
 
   QAction *_debug_continue;
   QAction *_debug_step_into;
   QAction *_debug_step_over;
   QAction *_debug_step_out;
   QAction *_debug_quit;
 
   QAction *_new_script_action;
+  QAction *_new_function_action;
   QAction *_open_action;
 
   QAction *_copy_action;
   QAction *_paste_action;
   QAction *_clear_clipboard_action;
   QAction *_undo_action;
 
   QAction *_find_files_action;
