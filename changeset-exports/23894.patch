# HG changeset patch
# User Rik <rik@octave.org>
# Date 1502487503 25200
#      Fri Aug 11 14:38:23 2017 -0700
# Node ID 61cd842e158a7d743ad374932aff365329c53350
# Parent  75eff5b667b3cdbcf8d107b25477f9b536a89a88
# Parent  ba46a8015b26d8cdc1f247f6f33759f3acb0cede
maint: merge away accidental second head.

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -700,16 +700,20 @@ files_dock_widget::contextmenu_delete (b
               if (fileLst.count () != 0)
                 QMessageBox::warning (this, tr ("Delete file/directory"),
                                       tr ("Can not delete a directory that is not empty"));
               else
                 _file_system_model->rmdir (index);
             }
           else
             {
+              // Close the file in the editor if open
+              emit file_remove_signal (info.filePath (), QString ());
+              // Remove the file. This operation might fail, but we will not
+              // reopen a possibly related editor tab in this case.
               _file_system_model->remove (index);
             }
 
           _file_system_model->revert ();
 
         }
     }
 }
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -127,16 +127,19 @@ signals:
   void load_file_signal (const QString& fileName);
 
   /** Emitted, whenever the user requested to run a file. */
   void run_file_signal (const QFileInfo& info);
 
   /** Emitted, whenever wants to search for a file . */
   void find_files_signal (const QString& startdir);
 
+  /** Emitted, whenever the user removes or renames a file. */
+  void file_remove_signal (const QString& old_name, const QString& new_name);
+
 private:
   void process_new_file (const QString& parent_name);
   void process_new_dir (const QString& parent_name);
   void process_set_current_dir (const QString& parent_name);
   void process_find_files (const QString& dir_name);
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2221,27 +2221,28 @@ file_editor_tab::handle_save_file_as_ans
 void
 file_editor_tab::handle_save_file_as_answer_cancel ()
 {
   // User canceled, allow editing again.
   _edit_area->setReadOnly (false);
 }
 
 void
-file_editor_tab::file_has_changed (const QString&)
+file_editor_tab::file_has_changed (const QString& do_close)
 {
   // Prevent popping up multiple message boxes when the file has
   // been changed multiple times by temporarily removing from the
   // file watcher.
   QStringList trackedFiles = _file_system_watcher.files ();
   if (! trackedFiles.isEmpty ())
     _file_system_watcher.removePath (_file_name);
 
-  if (QFile::exists (_file_name))
+  if (QFile::exists (_file_name) && do_close.isEmpty ())
     {
+      // The file is modified
       if (_always_reload_changed_files)
 
               load_file (_file_name);
 
       else
         {
           // give editor and this tab the focus,
           // possibly making the editor visible if it is hidden
@@ -2262,16 +2263,24 @@ file_editor_tab::file_has_changed (const
 
           msgBox->setWindowModality (Qt::WindowModal);
           msgBox->setAttribute (Qt::WA_DeleteOnClose);
           msgBox->show ();
         }
     }
   else
     {
+      // If desired and if file is not modified,
+      // close the file without any user interaction
+      if (! do_close.isEmpty () && ! _edit_area->isModified ())
+        {
+          handle_file_resave_answer (QMessageBox::Cancel);
+          return;
+        }
+
       // give editor and this tab the focus,
       // possibly making the editor visible  if it is hidden
       emit set_focus_editor_signal (this);
       _edit_area->setFocus ();
 
       QString modified = "";
       if (_edit_area->isModified ())
         modified = tr ("\n\nWarning: The contents in the editor is modified!");
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -131,17 +131,17 @@ public slots:
   void set_modified (bool modified = true);
 
   void set_encoding (const QString& new_encoding);
 
   QString load_file (const QString& fileName);
 
   void new_file (const QString& commands = QString ());
 
-  void file_has_changed (const QString& fileName);
+  void file_has_changed (const QString& do_close);
 
   void handle_context_menu_edit (const QString&);
   void handle_context_menu_break_condition (int linenr);
 
   void handle_request_add_breakpoint (int line, const QString& cond);
   void handle_request_remove_breakpoint (int line);
 
   void handle_octave_result (QObject *requester, QString& command,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -57,16 +57,17 @@ file_editor::file_editor (QWidget *p)
 
   // set action that are later added by the main window to null,
   // preventing access to them when they are still undefined
   _undo_action = nullptr;
   _copy_action = nullptr;
   _paste_action = nullptr;
   _selectall_action = nullptr;
   _closed = false;
+  _external_close_request = false;
 
   construct ();
 
   // actions that should also be available in the find dialog
   _fetab_actions << _find_next_action;
   _fetab_actions << _find_previous_action;
 
   setVisible (false);
@@ -148,16 +149,19 @@ file_editor::check_closing (void)
     }
 
   return true;
 }
 
 void
 file_editor::focus (void)
 {
+  if (_external_close_request)
+    return;  // No focus for the editor if external open/close request
+
   octave_dock_widget::focus ();
 
   // set focus to current tab
   QWidget *fileEditorTab = _tab_widget->currentWidget ();
   if (fileEditorTab)
     emit fetab_set_focus (fileEditorTab);
 }
 
@@ -235,17 +239,16 @@ file_editor::find_tab_widget (const QStr
 
   // Check all tabs for the given file name
   QWidget *retval = nullptr;
 
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     {
       QString tab_file = p->first;
-
       if (same_file (file.toStdString (), tab_file.toStdString ())
           || file == tab_file)     // needed as same_file ("","") is false.
         {
           retval = p->second.fet_ID;
           break;
         }
     }
 
@@ -575,16 +578,42 @@ file_editor::handle_update_breakpoint_ma
 
 void
 file_editor::handle_edit_file_request (const QString& file)
 {
   request_open_file (file);
 }
 
 void
+file_editor::handle_file_remove (const QString& old_name,
+                                 const QString& new_name)
+{
+
+  if (! old_name.isEmpty () && new_name.isEmpty ())
+    {
+      // Only old name is set, no new name -> close old name
+
+      // Have all file editor tabs signal what their filenames are.
+      editor_tab_map.clear ();
+      emit fetab_file_name_query (nullptr);
+
+      // Is old file open?
+      file_editor_tab *editor_tab
+        = static_cast<file_editor_tab *> (find_tab_widget (old_name));
+
+      if (editor_tab)
+        {
+          _external_close_request = true;  // Remember for not focussing editor
+          editor_tab->file_has_changed ("close");  // Close the tab
+          _external_close_request = false;  // Back to normal
+        }
+    }
+}
+
+void
 file_editor::do_undo ()
 {
   if (editor_tab_has_focus ())
     emit fetab_scintilla_command (_tab_widget->currentWidget (),
                                   QsciScintillaBase::SCI_UNDO);
 }
 
 void
@@ -1009,16 +1038,17 @@ file_editor::handle_tab_remove_request (
               delete fileEditorTab;
               break;
             }
         }
     }
   check_actions ();
 
   focus ();     // focus stays in editor when tab is closed
+
 }
 
 void
 file_editor::handle_add_filename_to_list (const QString& fileName,
                                           const QString& encoding, QWidget *ID)
 {
   // Should we allow multiple tabs for a single file?
   editor_tab_map[fileName].fet_ID = ID;
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -276,16 +276,18 @@ public slots:
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
                                                 const QString& cond);
 
   void handle_edit_file_request (const QString& file);
 
+  void handle_file_remove (const QString&, const QString&);
+
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
   void handle_visibility (bool visible);
 
   void update_octave_directory (const QString& dir);
@@ -457,16 +459,17 @@ private:
 
   QList<QAction*> _fetab_actions;
 
   file_editor_tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   bool _closed;
+  bool _external_close_request;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
   QStringList _mru_files_encodings;
 };
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1808,17 +1808,22 @@ main_window::construct (void)
 
       connect (this,
                SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
                                                         int, const QString&)),
                editor_window,
                SLOT (handle_update_breakpoint_marker_request (bool,
                                                               const QString&,
                                                               int,
-                                                                                                        const QString&)));
+                                                              const QString&)));
+
+      connect (file_browser_window,
+               SIGNAL (file_remove_signal (const QString&, const QString&)),
+               editor_window,
+               SLOT (handle_file_remove (const QString&, const QString&)));
 #endif
 
       octave_link::post_event (this,
                                &main_window::resize_command_window_callback);
 
       configure_shortcuts ();
     }
 }
