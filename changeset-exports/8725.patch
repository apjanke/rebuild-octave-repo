# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234424954 18000
#      Thu Feb 12 02:49:14 2009 -0500
# Node ID d5af326a3ede175a37518ba14a8e8687bdcd3a5b
# Parent  a50228129dba4abe6e594a9831aebc542ffcb9ef
[mq]: sort-traits

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -30,54 +30,60 @@ along with Octave; see the file COPYING.
 #include "oct-cmplx.h"
 #include "lo-mappers.h"
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
 template <>
-inline bool _sort_isnan (Complex x)
+inline bool
+sort_isnan<Complex> (const Complex& x)
 {
   return xisnan (x);
 }
 
 template <>
 bool
-octave_sort<Complex>::ascending_compare (Complex a, Complex b)
+octave_sort<Complex>::ascending_compare (const Complex& a, const Complex& b)
 {
   return ((std::abs (a) < std::abs (b))
 	  || ((std::abs (a) == std::abs (b)) && (arg (a) < arg (b))));
 }
 
 template <>
 bool
-octave_sort<Complex>::descending_compare (Complex a, Complex b)
+octave_sort<Complex>::descending_compare (const Complex& a, const Complex& b)
 {
   return ((std::abs (a) > std::abs (b))
 	  || ((std::abs (a) == std::abs (b)) && (arg (a) > arg (b))));
 }
 
-static bool nan_ascending_compare (Complex x, Complex y)
+static bool
+nan_ascending_compare (const Complex& x, const Complex& y)
 {
-  return xisnan (y) ? ! xisnan (x) : ((std::abs (x) < std::abs (x))
-	  || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x))));
+  return (xisnan (y)
+	  ? ! xisnan (x)
+	  : ((std::abs (x) < std::abs (x))
+	     || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x)))));
 }
 
-static bool nan_descending_compare (Complex x, Complex y)
+static bool
+nan_descending_compare (const Complex& x, const Complex& y)
 {
-  return xisnan (x) ? ! xisnan (y) : ((std::abs (x) > std::abs (x))
-	  || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x))));
+  return (xisnan (x)
+	  ? ! xisnan (y)
+	  : ((std::abs (x) > std::abs (x))
+	     || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x)))));
 }
 
-bool (*_sortrows_comparator (sortmode mode, 
-                             const Array<Complex>& a , bool allow_chk)) 
-(Complex, Complex)
+Array<Complex>::compare_fcn_type
+sortrows_comparator (sortmode mode, const Array<Complex>& a , bool allow_chk)
 {
-  bool (*result) (Complex, Complex) = 0;
+  Array<Complex>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
         {
           if (mode == ASCENDING)
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -32,36 +32,38 @@ along with Octave; see the file COPYING.
 #include "Array.cc"
 #include "oct-locbuf.h"
 
 #define INLINE_ASCENDING_SORT
 #define INLINE_DESCENDING_SORT
 #include "oct-sort.cc"
 
 template <>
-inline bool _sort_isnan (double x)
+inline bool
+sort_isnan<double> (double x)
 {
   return lo_ieee_isnan (x);
 }
 
-static bool nan_ascending_compare (double x, double y)
+static bool
+nan_ascending_compare (double x, double y)
 {
   return lo_ieee_isnan (y) ? ! lo_ieee_isnan (x) : x < y;
 }
 
-static bool nan_descending_compare (double x, double y)
+static bool
+nan_descending_compare (double x, double y)
 {
   return lo_ieee_isnan (x) ? ! lo_ieee_isnan (y) : x > y;
 }
 
-bool (*_sortrows_comparator (sortmode mode, 
-                             const Array<double>& a , bool allow_chk)) 
-(double, double)
+Array<double>::compare_fcn_type
+sortrows_comparator (sortmode mode, const Array<double>& a , bool allow_chk)
 {
-  bool (*result) (double, double) = 0;
+  Array<double>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
         {
           if (mode == ASCENDING)
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -32,36 +32,38 @@ along with Octave; see the file COPYING.
 #include "Array.cc"
 #include "oct-locbuf.h"
 
 #define INLINE_ASCENDING_SORT
 #define INLINE_DESCENDING_SORT
 #include "oct-sort.cc"
 
 template <>
-inline bool _sort_isnan (float x)
+inline bool
+sort_isnan<float> (float x)
 {
   return lo_ieee_isnan (x);
 }
 
-static bool nan_ascending_compare (float x, float y)
+static bool
+nan_ascending_compare (float x, float y)
 {
   return lo_ieee_isnan (y) ? ! lo_ieee_isnan (x) : x < y;
 }
 
-static bool nan_descending_compare (float x, float y)
+static bool
+nan_descending_compare (float x, float y)
 {
   return lo_ieee_isnan (x) ? ! lo_ieee_isnan (y) : x > y;
 }
 
-bool (*_sortrows_comparator (sortmode mode, 
-                             const Array<float>& a , bool allow_chk)) 
-(float, float)
+Array<float>::compare_fcn_type
+sortrows_comparator (sortmode mode, const Array<float>& a , bool allow_chk)
 {
-  bool (*result) (float, float) = 0;
+  Array<float>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
         {
           if (mode == ASCENDING)
diff --git a/liboctave/Array-fC.cc b/liboctave/Array-fC.cc
--- a/liboctave/Array-fC.cc
+++ b/liboctave/Array-fC.cc
@@ -30,54 +30,63 @@ along with Octave; see the file COPYING.
 #include "oct-cmplx.h"
 #include "lo-mappers.h"
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
 template <>
-inline bool _sort_isnan (FloatComplex x)
+inline bool
+sort_isnan<FloatComplex> (const FloatComplex& x)
 {
   return xisnan (x);
 }
 
 template <>
 bool
-octave_sort<FloatComplex>::ascending_compare (FloatComplex a, FloatComplex b)
+octave_sort<FloatComplex>::ascending_compare (const FloatComplex& a,
+					      const FloatComplex& b)
 {
   return ((std::abs (a) < std::abs (b))
 	  || ((std::abs (a) == std::abs (b)) && (arg (a) < arg (b))));
 }
 
 template <>
 bool
-octave_sort<FloatComplex>::descending_compare (FloatComplex a, FloatComplex b)
+octave_sort<FloatComplex>::descending_compare (const FloatComplex& a,
+					       const FloatComplex& b)
 {
   return ((std::abs (a) > std::abs (b))
 	  || ((std::abs (a) == std::abs (b)) && (arg (a) > arg (b))));
 }
 
-static bool nan_ascending_compare (FloatComplex x, FloatComplex y)
+static bool
+nan_ascending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  return xisnan (y) ? ! xisnan (x) : ((std::abs (x) < std::abs (x))
-	  || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x))));
+  return (xisnan (y)
+	  ? ! xisnan (x)
+	  : ((std::abs (x) < std::abs (x))
+	     || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x)))));
 }
 
-static bool nan_descending_compare (FloatComplex x, FloatComplex y)
+static bool
+nan_descending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  return xisnan (x) ? ! xisnan (y) : ((std::abs (x) > std::abs (x))
-	  || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x))));
+  return (xisnan (x)
+	  ? ! xisnan (y)
+	  : ((std::abs (x) > std::abs (x))
+	     || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x)))));
 }
 
-bool (*_sortrows_comparator (sortmode mode, 
-                             const Array<FloatComplex>& a , bool allow_chk)) 
-(FloatComplex, FloatComplex)
+Array<FloatComplex>::compare_fcn_type
+sortrows_comparator (sortmode mode, const Array<FloatComplex>& a,
+		     bool allow_chk)
 {
-  bool (*result) (FloatComplex, FloatComplex) = 0;
+  Array<FloatComplex>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
         {
           if (mode == ASCENDING)
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1972,18 +1972,18 @@ Array<T>::maybe_delete_dims (void)
     }
 
   if (nd != new_dims.length ())
     dimensions = new_dims;
 }
 
 // Non-real types don't have NaNs.
 template <class T>
-inline
-bool _sort_isnan (T)
+inline bool
+sort_isnan (typename ref_param<T>::type)
 {
   return false;
 }
 
 template <class T>
 Array<T>
 Array<T>::sort (octave_idx_type dim, sortmode mode) const
 {
@@ -2023,17 +2023,17 @@ Array<T>::sort (octave_idx_type dim, sor
       for (octave_idx_type j = 0; j < iter; j++)
 	{
           // copy and partition out NaNs. 
           // FIXME: impact on integer types noticeable?
           octave_idx_type kl = 0, ku = ns;
           for (octave_idx_type i = 0; i < ns; i++)
             {
               T tmp = ov[i];
-              if (_sort_isnan (tmp))
+              if (sort_isnan<T> (tmp))
                 v[--ku] = tmp;
               else
                 v[kl++] = tmp;
             }
 
           // sort.
 	  lsort.sort (v, kl);
 
@@ -2067,17 +2067,17 @@ Array<T>::sort (octave_idx_type dim, sor
 	  offset += offset2 * stride * ns;
 	  
           // gather and partition out NaNs. 
           // FIXME: impact on integer types noticeable?
           octave_idx_type kl = 0, ku = ns;
           for (octave_idx_type i = 0; i < ns; i++)
             {
               T tmp = ov[i*stride + offset];
-              if (_sort_isnan (tmp))
+              if (sort_isnan<T> (tmp))
                 buf[--ku] = tmp;
               else
                 buf[kl++] = tmp;
             }
 
           // sort.
 	  lsort.sort (buf, kl);
 
@@ -2145,17 +2145,17 @@ Array<T>::sort (Array<octave_idx_type> &
       for (octave_idx_type j = 0; j < iter; j++)
 	{
           // copy and partition out NaNs. 
           // FIXME: impact on integer types noticeable?
           octave_idx_type kl = 0, ku = ns;
           for (octave_idx_type i = 0; i < ns; i++)
             {
               T tmp = ov[i];
-              if (_sort_isnan (tmp))
+              if (sort_isnan<T> (tmp))
                 {
                   --ku;
                   v[ku] = tmp;
                   vi[ku] = i;
                 }
               else
                 {
                   v[kl] = tmp;
@@ -2203,17 +2203,17 @@ Array<T>::sort (Array<octave_idx_type> &
 	  offset += offset2 * stride * ns;
 	  
           // gather and partition out NaNs. 
           // FIXME: impact on integer types noticeable?
           octave_idx_type kl = 0, ku = ns;
           for (octave_idx_type i = 0; i < ns; i++)
             {
               T tmp = ov[i*stride + offset];
-              if (_sort_isnan (tmp))
+              if (sort_isnan<T> (tmp))
                 {
                   --ku;
                   buf[ku] = tmp;
                   bufi[ku] = i;
                 }
               else
                 {
                   buf[kl] = tmp;
@@ -2253,29 +2253,29 @@ sortmode
 Array<T>::is_sorted (sortmode mode) const
 {
   if (nelem () <= 1)
     return ASCENDING;
 
   const T *lo = data (), *hi = data () + nelem () - 1;
 
   // Check for NaNs at the beginning and end.
-  if (mode != ASCENDING && _sort_isnan (*lo))
+  if (mode != ASCENDING && sort_isnan<T> (*lo))
     {
       mode = DESCENDING;
       do
         ++lo;
-      while (lo < hi && _sort_isnan (*lo));
+      while (lo < hi && sort_isnan<T> (*lo));
     }
-  else if (mode != DESCENDING && _sort_isnan (*hi))
+  else if (mode != DESCENDING && sort_isnan<T> (*hi))
     {
       mode = ASCENDING;
       do
         --hi;
-      while (lo < hi && _sort_isnan (*hi));
+      while (lo < hi && sort_isnan<T> (*hi));
     }
   
   octave_sort<T> lsort;
 
   // If mode is still unknown, compare lo and hi
   if (! mode)
     {
       if (lsort.descending_compare (*lo, *hi))
@@ -2290,18 +2290,19 @@ Array<T>::is_sorted (sortmode mode) cons
 
   if (! lsort.is_sorted (lo, hi - lo + 1))
     mode = UNSORTED;
 
   return mode;
 }
 
 template <class T>
-bool (*_sortrows_comparator (sortmode mode, 
-                             const Array<T>& /* a */, bool /* allow_chk */)) (T, T)
+typename Array<T>::compare_fcn_type
+sortrows_comparator (sortmode mode, const Array<T>& /* a */,
+		     bool /* allow_chk */)
 {
   if (mode == ASCENDING)
     return octave_sort<T>::ascending_compare;
   else if (mode == DESCENDING)
     return octave_sort<T>::descending_compare;
   else
     return 0;
 }
@@ -2309,17 +2310,17 @@ bool (*_sortrows_comparator (sortmode mo
 template <class T>
 Array<octave_idx_type>
 Array<T>::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> idx;
 
   octave_sort<T> lsort;
 
-  lsort.set_compare (_sortrows_comparator (mode, *this, true));
+  lsort.set_compare (sortrows_comparator (mode, *this, true));
 
   octave_idx_type r = rows (), c = cols ();
 
   idx = Array<octave_idx_type> (r);
 
   lsort.sort_rows (data (), idx.fortran_vec (), r, c);
 
   return idx;
@@ -2335,17 +2336,18 @@ Array<T>::is_sorted_rows (sortmode mode)
   octave_idx_type r = rows (), c = cols ();
 
   if (r <= 1 || c == 0)
     return mode ? mode : ASCENDING;
 
   if (! mode)
     {
       // Auto-detect mode.
-      bool (*compare) (T, T) = _sortrows_comparator (ASCENDING, *this, false);
+      compare_fcn_type compare
+	= sortrows_comparator (ASCENDING, *this, false);
 
       octave_idx_type i;
       for (i = 0; i < cols (); i++)
         {
           T l = elem (0, i), u = elem (rows () - 1, i);
           if (compare (l, u))
             {
               if (mode == DESCENDING)
@@ -2368,17 +2370,17 @@ Array<T>::is_sorted_rows (sortmode mode)
             }
         }
       if (! mode && i == cols ())
         mode = ASCENDING;
     }
 
   if (mode)
     {
-      lsort.set_compare (_sortrows_comparator (mode, *this, false));
+      lsort.set_compare (sortrows_comparator (mode, *this, false));
 
       if (! lsort.is_sorted_rows (data (), r, c))
         mode = UNSORTED;
     }
 
   return mode;
 
 }
@@ -2393,19 +2395,18 @@ Array<T>::sort (octave_idx_type, sortmod
 template <> Array<T>  \
 Array<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type, sortmode) const \
 { sidx = Array<octave_idx_type> (); return *this; } \
  \
 template <> sortmode  \
 Array<T>::is_sorted (sortmode) const  \
 { return UNSORTED; } \
  \
-template <> \
-bool (*_sortrows_comparator (sortmode,  \
-                             const Array<T>&, bool)) (T, T) \
+Array<T>::compare_fcn_type \
+sortrows_comparator (sortmode, const Array<T>&, bool) \
 { return 0; } \
  \
 template <> Array<octave_idx_type>  \
 Array<T>::sort_rows_idx (sortmode) const  \
 { return Array<octave_idx_type> (); } \
  \
 template <> sortmode  \
 Array<T>::is_sorted_rows (sortmode) const \
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <cassert>
 #include <cstddef>
 
 #include <iostream>
 #include <algorithm>
 
 #include "dim-vector.h"
 #include "idx-vector.h"
+#include "lo-traits.h"
 #include "lo-utils.h"
 #include "oct-sort.h"
 #include "quit.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
@@ -96,16 +97,19 @@ protected:
   //--------------------------------------------------------------------
 
 public:
 
   void make_unique (void);
 
   typedef T element_type;
 
+  typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
+				    typename ref_param<T>::type);
+
 protected:
 
   typename Array<T>::ArrayRep *rep;
 
   dim_vector dimensions;
 
   // Rationale:
   // slice_data is a pointer to rep->data, denoting together with slice_len the
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,37 @@
+2009-02-12  John W. Eaton  <jwe@octave.org>
+
+	* lo-traits.h: New file.
+	* Makefile.in (INCLUDES): Add it to the list.
+
+	* Array.h (compare_fcn_type): New typedef.
+	* oct-sort.h (compare_fcn_type): Ditto.
+
+	* oct-sort.h, oct-sort.cc (octave_sort<T>::octave_sort,
+	octave_sort<T>::set_compare, octave_sort<T>::compare): 
+	Use typedef to simplify decl.
+	(octave_sort<T>::ascending_compare,
+	octave_sort<T>::descending_compare):
+	Use ref_param<T>::type for parameter decl.
+
+	* Array.cc (sort_isnan): Use ref_param<T>::type for parameter decl.
+	(Array<T>::sort): Use explicit template parameter for sort_isnan calls.
+
+	* Array.cc, Array-C.cc, Array-fC.cc, Array-d.cc, Array-f.cc
+	(sortrows_comparator): Rename from _sortrows_comparator.  Change
+	all uses.  Use typedef for return value to simplify decl.
+	(sort_isnan): Rename from _sort_isnan.  Change all uses.
+	(NO_INSTANTIATE_ARRAY_SORT): Use typedef to simplify instantiation
+	of sortrows_comparator.
+
+	* Array-C.cc, Array-fC.cc (sort_isnan, ascending_compare,
+	descending_compare, nan_ascending_compare,
+	nan_descending_compare):
+
 2009-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::is_sorted, octave_sort<T>::sort_rows,
 	octave_sort<T>::is_sorted_rows): New methods.
 	* oct-sort.h: Declare them.
 
 	* Array.cc (Array<T>::is_sorted): New method.
 	(INSTANTIATE_ARRAY_SORT, NO_INSTANTIATE_ARRAY_SORT,
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -80,18 +80,18 @@ OPT_INC := $(addsuffix .h, $(OPT_BASE))
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DAERT.h \
 	DAERTFunc.h DASPK.h DASRT.h DASSL.h FEGrid.h \
 	LinConst.h LP.h LSODE.h \
 	ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	Objective.h QP.h Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h functor.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
-	lo-ieee.h lo-mappers.h lo-math.h lo-specfun.h \
-	lo-sysdep.h lo-utils.h mach-info.h md5.h oct-alloc.h oct-cmplx.h \
+	lo-ieee.h lo-mappers.h lo-math.h lo-specfun.h lo-sysdep.h \
+	lo-traits.h lo-utils.h mach-info.h md5.h oct-alloc.h oct-cmplx.h \
 	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-inttypes.h \
 	oct-locbuf.h oct-lookup.h oct-md5.h oct-mutex.h oct-norm.h \
         oct-passwd.h oct-rand.h oct-rl-edit.h oct-rl-hist.h oct-shlib.h \
         oct-sort.h oct-spparms.h oct-syscalls.h oct-sparse.h oct-time.h \
         oct-uname.h pathlen.h pathsearch.h prog-args.h \
 	randgamma.h randmtzig.h randpoisson.h regex-match.h \
 	sparse-sort.h statdefs.h str-vec.h \
 	sparse-util.h sun-utils.h sysdir.h systime.h syswait.h \
diff --git a/liboctave/lo-traits.h b/liboctave/lo-traits.h
new file mode 100644
--- /dev/null
+++ b/liboctave/lo-traits.h
@@ -0,0 +1,80 @@
+/*
+
+Copyright (C) 2009 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_liboctave_traits_h)
+#define octave_liboctave_traits_h 1
+
+template <bool cond, typename T1, typename T2>
+class if_then_else;
+
+template<typename T1, typename T2>
+class if_then_else<true, T1, T2>
+{
+public:
+
+  typedef T1 result;
+};
+
+template<typename T1, typename T2>
+class if_then_else<false, T1, T2>
+{
+public:
+
+  typedef T2 result;
+};
+
+template<typename T1>
+class is_class_type
+{
+private:
+
+  typedef char one;
+  typedef struct { char c[2]; } two;
+
+  // Classes can have pointers to members.
+  template<typename T2> static one is_class_type_test (int T2::*);
+
+  // Catch everything else.
+  template<typename T2> static two is_class_type_test (...);
+
+public:
+
+  enum { yes = sizeof (is_class_type_test<T1> (0)) == 1 };
+  enum { no = ! yes };
+};
+
+template<typename T>
+class ref_param
+{
+public:
+
+  typedef typename if_then_else<is_class_type<T>::no, T, T const&>::result type;
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -106,17 +106,17 @@ The Python license is
 
 template <class T>
 octave_sort<T>::octave_sort (void) : compare (ascending_compare)
 { 
   merge_init ();
 }
 
 template <class T>
-octave_sort<T>::octave_sort (bool (*comp) (T, T)) : compare (comp) 
+octave_sort<T>::octave_sort (compare_fcn_type comp) : compare (comp) 
 { 
   merge_init (); 
 }
 
 template <class T>
 void
 octave_sort<T>::set_compare (sortmode mode)
 {
@@ -1758,24 +1758,26 @@ octave_sort<T>::is_sorted_rows (const T 
       retval = is_sorted_rows (data, rows, cols, compare);
 
   return retval;
 }
 
 
 template <class T>
 bool 
-octave_sort<T>::ascending_compare (T x, T y)
+octave_sort<T>::ascending_compare (typename ref_param<T>::type x,
+				   typename ref_param<T>::type y)
 {
   return x < y;
 }
 
 template <class T>
 bool 
-octave_sort<T>::descending_compare (T x, T y)
+octave_sort<T>::descending_compare (typename ref_param<T>::type x,
+				    typename ref_param<T>::type y)
 {
   return x > y;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -77,16 +77,18 @@ The Python license is
   8. By copying, installing or otherwise using Python 2.3, Licensee
   agrees to be bound by the terms and conditions of this License
   Agreement.
 */
 
 #if !defined (octave_sort_h)
 #define octave_sort_h 1
 
+#include "lo-traits.h"
+
 // The maximum number of entries in a MergeState's pending-runs stack.
 // This is enough to sort arrays of size up to about
 //     32 * phi ** MAX_MERGE_PENDING
 // where phi ~= 1.618.  85 is ridiculously large enough, good for an array
 // with 2**64 elements.
 #define MAX_MERGE_PENDING 85
 
 // When we get into galloping mode, we stay there until both runs win less
@@ -100,23 +102,26 @@ The Python license is
 enum sortmode { UNSORTED = 0, ASCENDING, DESCENDING };
 
 template <class T>
 class
 octave_sort
 {
 public:
 
+  typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
+				    typename ref_param<T>::type);
+
   octave_sort (void);
 
-  octave_sort (bool (*comp) (T, T));
+  octave_sort (compare_fcn_type);
   
   ~octave_sort (void) { merge_freemem (); }
 
-  void set_compare (bool (*comp) (T, T)) { compare = comp; }
+  void set_compare (compare_fcn_type comp) { compare = comp; }
 
   void set_compare (sortmode mode);
 
   // Sort an array in-place.
   void sort (T *data, octave_idx_type nel);
 
   // Ditto, but also permute the passed indices (may not be valid indices).
   void sort (T *data, octave_idx_type *idx, octave_idx_type nel);
@@ -128,18 +133,21 @@ public:
   // vector.
   void sort_rows (const T *data, octave_idx_type *idx,
                   octave_idx_type rows, octave_idx_type cols);
 
   // Determine whether a matrix (as a contiguous block) is sorted by rows.
   bool is_sorted_rows (const T *data, 
                        octave_idx_type rows, octave_idx_type cols);
 
-  static bool ascending_compare (T, T);
-  static bool descending_compare (T, T);
+  static bool ascending_compare (typename ref_param<T>::type,
+				 typename ref_param<T>::type);
+
+  static bool descending_compare (typename ref_param<T>::type,
+				  typename ref_param<T>::type);
 
 private:
 
   // One MergeState exists on the stack per invocation of mergesort.
   // It's just a convenient way to pass state around among the helper
   // functions.
   //
   // DGB: This isn't needed with mergesort in a class, but it doesn't
@@ -172,17 +180,17 @@ private:
     //   pending[i].base + pending[i].len == pending[i+1].base
     //
     // so we could cut the storage for this, but it's a minor amount,
     // and keeping all the info explicit simplifies the code.
     octave_idx_type n;
     struct s_slice pending[MAX_MERGE_PENDING];
   };
 
-  bool (*compare) (T, T);
+  compare_fcn_type compare;
   
   MergeState ms;
   
     
   template <class Comp>
   void binarysort (T *data, octave_idx_type nel, 
               octave_idx_type start, Comp comp);
     
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-02-12  John W. Eaton  <jwe@octave.org>
+
+	* TEMPLATE-INST/Array-tc.cc
+	(octave_sort<octave_value>::ascending_compare,
+	octave_sort<octave_value>::descending_compare):
+	Delete unused template specializations.
+	Use NO_INSTANTIATE_ARRAY_SORT instead of INSTANTIATE_ARRAY_SORT
+	for octave_values.
+
 2009-02-11  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* gl-render.h: Use HAVE_FRAMEWORK_OPENGL.
 	* gl-render.cc (opengl_tesselator, opengl_renderer::draw, 
 	opengl_renderer::init_marker): Use HAVE_FRAMEWORK_OPENGL.
 	
 2009-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -37,31 +37,17 @@ along with Octave; see the file COPYING.
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "oct-obj.h"
 
 #include "oct-sort.cc"
 
-template <>
-bool
-octave_sort<octave_value>::ascending_compare (octave_value a, octave_value b)
-{
-  return (a.string_value () < b.string_value ());
-}
-
-template <>
-bool
-octave_sort<octave_value>::descending_compare (octave_value a, octave_value b)
-{
-  return (a.string_value () > b.string_value ());
-}
-
-INSTANTIATE_ARRAY_SORT (octave_value);
+NO_INSTANTIATE_ARRAY_SORT (octave_value);
 
 INSTANTIATE_ARRAY (octave_value, OCTINTERP_API);
 
 template class OCTINTERP_API Array2<octave_value>;
 
 template class OCTINTERP_API ArrayN<octave_value>;
 
 /*
