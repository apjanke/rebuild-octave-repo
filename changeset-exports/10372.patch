# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1267375263 18000
#      Sun Feb 28 11:41:03 2010 -0500
# Node ID 634e182d34e461e091c60dab5e54a77d43582370
# Parent  dc8637fd7a76096fb6aaef67c0708b11a9cd5474
unique.m: return 0x1 for empty matrices with some nonzero dims; preserve class of argument; new tests

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-28  John W. Eaton  <jwe@octave.org>
+
+	* set/unique.m: Return 0x1 arrays for empty arrays with some
+	nonzero dimensions.  Return object with the same class as the
+	argument.  New tests.
+
 2010-02-27  Liam Groener <liamg@mac.com>
 
 	* /time/datetick.m: Fix 'keepticks' bug, and untabify.
 
 2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/str2double.m: Remove.
 
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -49,17 +49,17 @@ function [y, i, j] = unique (x, varargin
 
   if (nargin > 1)
 
     ## parse options
     if (iscellstr (varargin))
       varargin = unique (varargin);
       optfirst = strmatch ("first", varargin) > 0;
       optlast = strmatch ("last", varargin) > 0;
-      optrows = strmatch ("rows", varargin) > 0 && size (x, 2) > 1;
+      optrows = strmatch ("rows", varargin) > 0;
       if (optfirst && optlast)
         error ("unique: cannot specify both \"last\" and \"first\"");
       elseif (optfirst + optlast + optrows != nargin-1)
         error ("unique: invalid option");
       endif
     else
       error ("unique: options must be strings");
     endif
@@ -79,16 +79,23 @@ function [y, i, j] = unique (x, varargin
     dim = 1;
   else
     n = numel (x);
     dim = (size (x, 1) == 1) + 1;
   endif
 
   y = x;
   if (n < 1)
+    if (! optrows && isempty (x) && any (size (x)))
+      if (iscell (y))
+        y = cell (0, 1);
+      else
+        y = zeros (0, 1, class (y));
+      endif
+    endif
     i = j = [];
     return;
   elseif (n < 2)
     i = j = 1;
     return;
   endif
 
   if (optrows)
@@ -132,17 +139,29 @@ endfunction
 %!assert(unique([1 1 2; 1 0 1; 1 1 2],'rows'),[1 0 1; 1 1 2])
 %!assert(unique([]),[])
 %!assert(unique([1]),[1])
 %!assert(unique([1 2]),[1 2])
 %!assert(unique([1;2]),[1;2])
 %!assert(unique([1,NaN,Inf,NaN,Inf]),[1,Inf,NaN,NaN])
 %!assert(unique({'Foo','Bar','Foo'}),{'Bar','Foo'})
 %!assert(unique({'Foo','Bar','FooBar'}'),{'Bar','Foo','FooBar'}')
-
+%!assert(unique(zeros(1,0)), zeros(0,1))
+%!assert(unique(zeros(1,0), 'rows'), zeros(1,0))
+%!assert(unique(cell(1,0)), cell(0,1))
+%!assert(unique({}), {})
+%!assert(unique([1,2,2,3,2,4], 'rows'), [1,2,2,3,2,4])
+%!assert(unique([1,2,2,3,2,4]), [1,2,3,4])
+%!assert(unique([1,2,2,3,2,4]', 'rows'), [1,2,3,4]')
+%!assert(unique(single([1,2,2,3,2,4]), 'rows'), single([1,2,2,3,2,4]))
+%!assert(unique(single([1,2,2,3,2,4])), single([1,2,3,4]))
+%!assert(unique(single([1,2,2,3,2,4]'), 'rows'), single([1,2,3,4]'))
+%!assert(unique(uint8([1,2,2,3,2,4]), 'rows'), uint8([1,2,2,3,2,4]))
+%!assert(unique(uint8([1,2,2,3,2,4])), uint8([1,2,3,4]))
+%!assert(unique(uint8([1,2,2,3,2,4]'), 'rows'), uint8([1,2,3,4]'))
 %!test
 %! [a,i,j] = unique([1,1,2,3,3,3,4]);
 %! assert(a,[1,2,3,4])
 %! assert(i,[2,3,6,7])
 %! assert(j,[1,1,2,3,3,3,4])
 %!
 %!test
 %! [a,i,j] = unique([1,1,2,3,3,3,4]','first');
