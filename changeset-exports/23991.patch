# HG changeset patch
# User Rik <rik@octave.org>
# Date 1504291289 25200
#      Fri Sep 01 11:41:29 2017 -0700
# Node ID fcf7543e0d492118795c451c3e96e5c50a94ce39
# Parent  6f56efc098bdb5940517f858a1e341cee2356de7
Only print warning messages about missing print tools when needed (bug #44152).

* print.m (epstool, fig2dev, pstoedit): Emit an error when function which
invokes outside tool is called, but no binary is available.

* __ghostscript__.m: Use same error string for missing binary as epstool,
fig2dev, pstoedit.  Use single quotes in sprintf to avoid escaping double
quotes.

* __print_parse_opts__.m: Rename persistent variable to
warn_on_missing_ghostscript.  Use str2double rather than str2num in input
validation for efficiency and safety.  Make dev_list and suffixes persistent
variables for performance.  Only issue a warning about a missing binary
for Ghostscript since it is so critical.
* __print_parse_opts__.m (__ghostscript_binary__): Remove warning from
function since it occurs in __print_parse_opts__ now.
* __print_parse_opts__.m (__find_binary__): Remove warning from
function since it occurs in print.m now.

diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -608,75 +608,76 @@ function cmd = epstool (opts, filein, fi
     fileout = ["'" strtrim(fileout) "'"];
   endif
 
   if (! isempty (opts.preview) && opts.tight_flag)
     warning ("print:previewandtight",
              "print.m: eps preview may not be combined with -tight");
   endif
   if (! isempty (opts.preview) || opts.tight_flag)
-    if (! isempty (opts.epstool_binary))
-      if (opts.tight_flag)
-        cmd = "--copy --bbox";
-      elseif (! isempty (opts.preview))
-        switch (opts.preview)
-          case "tiff"
-            cmd = sprintf ("--add-%s-preview --device tiffg3", opts.preview);
-          case {"tiff6u", "tiff6p", "metafile"}
-            cmd = sprintf ("--add-%s-preview --device bmpgray", opts.preview);
-          case {"tiff4", "interchange"}
-            cmd = sprintf ("--add-%s-preview", opts.preview);
-          case "pict"
-            cmd = sprintf ("--add-%s-preview --mac-single", opts.preview);
-          otherwise
-            error ("print:invalidpreview",
-                   "print.m: epstool cannot include preview for format '%s'",
-                   opts.preview);
-        endswitch
-        if (! isempty (opts.ghostscript.resolution))
-          cmd = sprintf ("%s --dpi %d", cmd, fix (opts.ghostscript.resolution));
-        endif
-      else
-        cmd = "";
-      endif
-      if (! isempty (cmd))
-        cmd = sprintf ("%s --quiet %s %s %s ", opts.epstool_binary,
-                       cmd, filein, fileout);
+
+    if (isempty (opts.epstool_binary))
+      error ("print:noepstool", "print.m: 'epstool' is required for specified output format, but binary is not available in PATH");
+    endif
+
+    if (opts.tight_flag)
+      cmd = "--copy --bbox";
+    elseif (! isempty (opts.preview))
+      switch (opts.preview)
+        case "tiff"
+          cmd = sprintf ("--add-%s-preview --device tiffg3", opts.preview);
+        case {"tiff6u", "tiff6p", "metafile"}
+          cmd = sprintf ("--add-%s-preview --device bmpgray", opts.preview);
+        case {"tiff4", "interchange"}
+          cmd = sprintf ("--add-%s-preview", opts.preview);
+        case "pict"
+          cmd = sprintf ("--add-%s-preview --mac-single", opts.preview);
+        otherwise
+          error ("print:invalidpreview",
+                 "print.m: epstool cannot include preview for format '%s'",
+                 opts.preview);
+      endswitch
+      if (! isempty (opts.ghostscript.resolution))
+        cmd = sprintf ("%s --dpi %d", cmd, fix (opts.ghostscript.resolution));
       endif
-      if (pipein)
-        if (dos_shell)
-          filein(filein=="'") = "\"";
-          gs_cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
-                                    "device", epsdevice,
-                                    "source", "-",
-                                    "output", filein);
-          cmd = sprintf ("%s %s & %s", gs_cmd, filein, cmd);
-        else
-          cmd = sprintf ("cat > %s ; %s", filein, cmd);
-        endif
+    else
+      cmd = "";
+    endif
+    if (! isempty (cmd))
+      cmd = sprintf ("%s --quiet %s %s %s ", opts.epstool_binary,
+                     cmd, filein, fileout);
+    endif
+    if (pipein)
+      if (dos_shell)
+        filein(filein=="'") = "\"";
+        gs_cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
+                                  "device", epsdevice,
+                                  "source", "-",
+                                  "output", filein);
+        cmd = sprintf ("%s %s & %s", gs_cmd, filein, cmd);
+      else
+        cmd = sprintf ("cat > %s ; %s", filein, cmd);
       endif
-      if (pipeout)
-        if (dos_shell)
-          cmd = sprintf ("%s & type %s", cmd, fileout);
-        else
-          cmd = sprintf ("%s ; cat %s", cmd, fileout);
-        endif
+    endif
+    if (pipeout)
+      if (dos_shell)
+        cmd = sprintf ("%s & type %s", cmd, fileout);
+      else
+        cmd = sprintf ("%s ; cat %s", cmd, fileout);
       endif
-      if (! isempty (cleanup))
-        if (pipeout && dos_shell)
-          error ("print:epstoolpipe",
-                 "print.m: cannot pipe output of 'epstool' for DOS shell");
-        elseif (pipeout)
-          cmd = sprintf ("( %s %s )", cmd, cleanup);
-        else
-          cmd = sprintf ("%s %s", cmd, cleanup);
-        endif
+    endif
+    if (! isempty (cleanup))
+      if (pipeout && dos_shell)
+        error ("print:epstoolpipe",
+               "print.m: cannot pipe output of 'epstool' for DOS shell");
+      elseif (pipeout)
+        cmd = sprintf ("( %s %s )", cmd, cleanup);
+      else
+        cmd = sprintf ("%s %s", cmd, cleanup);
       endif
-    elseif (isempty (opts.epstool_binary))
-      error ("print:noepstool", "print.m: 'epstool' not found in PATH");
     endif
   else
     if (pipein && pipeout)
       if (dos_shell)
         cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
                                "device", epsdevice,
                                "source", "-",
                                "output", "-");
@@ -715,27 +716,28 @@ function cmd = epstool (opts, filein, fi
 endfunction
 
 function cmd = fig2dev (opts, devopt)
 
   if (nargin < 2)
     devopt = opts.devopt;
   endif
 
+  if (isempty (opts.fig2dev_binary))
+    error ("print:nofig2dev", "print.m: 'fig2dev' is required for specified output format, but binary is not available in PATH");
+  endif
+
   dos_shell = (ispc () && ! isunix ());
-  if (! isempty (opts.fig2dev_binary))
-    if (dos_shell)
-      ## FIXME: Is this the right thing to do for DOS?
-      cmd = sprintf ("%s -L %s 2> NUL", opts.fig2dev_binary, devopt);
-    else
-      cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
-    endif
-  elseif (isempty (opts.fig2dev_binary))
-    error ("print:nofig2dev", "print.m: 'fig2dev' not found in PATH");
+  if (dos_shell)
+    ## FIXME: Is this the right thing to do for DOS?
+    cmd = sprintf ("%s -L %s 2> NUL", opts.fig2dev_binary, devopt);
+  else
+    cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
   endif
+
   if (opts.debug)
     fprintf ("fig2dev command: '%s'\n", cmd);
   endif
 
 endfunction
 
 function latex_standalone (opts)
 
@@ -822,24 +824,25 @@ function cmd = lpr (opts)
 endfunction
 
 function cmd = pstoedit (opts, devopt)
 
   if (nargin < 2)
     devopt = opts.devopt;
   endif
 
+  if (isempty (opts.pstoedit_binary))
+    error ("print:nopstoedit", "print.m: 'pstoedit' is required for specified output format, but binary is not available in PATH");
+  endif
+
   dos_shell = (ispc () && ! isunix ());
-  if (! isempty (opts.pstoedit_binary))
-    if (dos_shell)
-      cmd = sprintf ("%s -f %s 2> NUL", opts.pstoedit_binary, devopt);
-    else
-      ## FIXME: Is this the right thing to do for DOS?
-      cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
-    endif
-  elseif (isempty (opts.pstoedit_binary))
-    error ("print:nopstoedit", "print.m: 'pstoedit' not found in PATH");
+  if (dos_shell)
+    cmd = sprintf ("%s -f %s 2> NUL", opts.pstoedit_binary, devopt);
+  else
+    ## FIXME: Is this the right thing to do for DOS?
+    cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
   endif
+
   if (opts.debug)
     fprintf ("pstoedit command: '%s'\n", cmd);
   endif
 
 endfunction
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -55,16 +55,20 @@ function [gs_cmd, cleanup_cmd] = __ghost
       opts.(f{m}) = args{n}.(f{m});
     endfor
     args(n) = [];
   endif
   for n = 1:2:numel (args)
     opts.(args{n}) = args{n+1};
   endfor
 
+  if (isempty (opts.binary))
+    error ("print:no_ghostscript", "__ghostscript__.m: Ghostscript binary is required for specified output format, but binary is not available in PATH");
+  endif
+
   if (isempty (opts.papersize))
     format_for_printer = false;
   else
     format_for_printer = true;
   endif
 
   gs_opts = ["-dQUIET -dNOPAUSE -dBATCH -dSAFER -dAutoRotatePages=/None -sDEVICE=" opts.device];
 
@@ -135,22 +139,21 @@ function [gs_cmd, cleanup_cmd] = __ghost
     end_unwind_protect
     if (opts.debug)
       fprintf ("---- begin %s ----\n", offsetfile);
       fprintf ("%s\n", offset_ps{:});
       fprintf ("----- end %s -----\n", offsetfile);
     endif
   endif
 
-  if (isempty (opts.binary))
-    error ("print:no_ghostscript", "__ghostscript__.m: ghostscript is required.");
-  elseif (isempty (opts.output))
+  if (isempty (opts.output))
     cmd = sprintf ("%s %s", opts.binary, gs_opts);
   else
-    cmd = sprintf ("%s %s -sOutputFile=\"%s\"", opts.binary, gs_opts, opts.output);
+    cmd = sprintf ('%s %s -sOutputFile="%s"',
+                   opts.binary, gs_opts, opts.output);
   endif
   if (! isempty (opts.prepend)
       && any (strcmpi (opts.device, {"pswrite", "ps2write", "pdfwrite"})))
     ## FIXME: Fonts get may be mangled when appending ps/ps2.
     ##        See "How to concatenate several PS files" at the link,
     ##        http://en.wikibooks.org/wiki/PostScript_FAQ
     cmd = sprintf ("%s %s", cmd, opts.prepend);
     if (isempty (cleanup_cmd))
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{args} =} __print_parse_opts__ (@var{propname}, @var{propvalue})
 ## @deftypefnx {} {@var{args} =} __print_parse_opts__ (@var{struct})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function arg_st = __print_parse_opts__ (varargin)
 
-  persistent warn_on_missing_binary = true
+  persistent warn_on_missing_ghostscript = true;
 
   arg_st.append_to_file = false;
   arg_st.canvas_size = [];
   arg_st.debug = false;
   arg_st.debug_file = "octave-print-commands.log";
   arg_st.devopt = "";
   arg_st.epstool_binary = __quote_path__ (__find_binary__ ("epstool"));
   arg_st.figure = get (0, "currentfigure");
@@ -97,17 +97,18 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-loose"))
         arg_st.loose = true;
         arg_st.tight_flag = false;
       elseif (strcmp (arg, "-tight"))
         arg_st.loose = false;
         arg_st.tight_flag = true;
       elseif (strcmp (arg, "-textspecial"))
         arg_st.special_flag = "textspecial";
-      elseif (any (strcmp (arg, {"-interchange", "-metafile", "-pict", "-tiff"})))
+      elseif (any (strcmp (arg,
+                           {"-interchange", "-metafile", "-pict", "-tiff"})))
         arg_st.preview = arg(2:end);
       elseif (strncmp (arg, "-debug", 6))
         arg_st.debug = true;
         arg_st.ghostscript.debug = true;
         if (length (arg) > 7)
           arg_st.debug_file = arg(8:end);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-d")
@@ -116,51 +117,48 @@ function arg_st = __print_parse_opts__ (
         arg_st.printer = arg;
       elseif (strncmp (arg, "-EPSTOOL:", 9))
         arg_st.epstool_binary = arg(10:end);
       elseif (strncmp (arg, "-FIG2DEV:", 9))
         arg_st.fig2dev_binary = arg(10:end);
       elseif (strncmp (arg, "-PSTOEDIT:", 9))
         arg_st.pstoedit_binary = arg(10:end);
       elseif (strncmpi (arg, "-textalphabits=", 15))
-        n = find (arg == "=");
-        if (! isempty (n) && n == numel (arg) - 1 && any (arg(end) == "124"))
-          arg_st.ghostscript.antialiasing_textalphabits = str2num (arg(end));
+        if (length (arg) == 16 && any (arg(end) == "124"))
+          arg_st.ghostscript.antialiasing_textalphabits = str2double (arg(end));
         else
           error ("print: improper syntax, or value, for TextAlphaBits");
         endif
       elseif (strncmpi (arg, "-graphicsalphabits=", 19))
-        n = find (arg == "=");
-        if (! isempty (n) && n == numel (arg) - 1 && any (arg(end) == "124"))
-          arg_st.ghostscript.antialiasing_graphicsalphabits = str2num (arg(end));
+        if (numel (arg) == 20 && any (arg(end) == "124"))
+          arg_st.ghostscript.antialiasing_graphicsalphabits = str2double (arg(end));
         else
           error ("print: improper syntax, or value, for GraphicsAlphaBits");
         endif
-      elseif ((length (arg) > 2) && arg(1:2) == "-G")
+      elseif (length (arg) > 2 && arg(1:2) == "-G")
         arg_st.ghostscript.binary = file_in_path (getenv ("PATH"), arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
-          error ("print: Ghostscript binary ""%s"" could not be located",
+          error ('print: Ghostscript binary "%s" not found in PATH',
                  arg(3:end));
-        else
-          arg_st.ghostscript.binary = __quote_path__ (arg_st.ghostscript.binary);
         endif
+        arg_st.ghostscript.binary = __quote_path__ (arg_st.ghostscript.binary);
       elseif (length (arg) > 2 && arg(1:2) == "-F")
         idx = rindex (arg, ":");
         if (idx)
           arg_st.font = arg(3:idx-1);
-          arg_st.fontsize = str2num (arg(idx+1:end));
+          arg_st.fontsize = str2double (arg(idx+1:end));
         else
           arg_st.font = arg(3:end);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-S")
-        arg_st.canvas_size = str2num (arg(3:end));
+        arg_st.canvas_size = str2double (arg(3:end));
       elseif (length (arg) > 2 && arg(1:2) == "-r")
         arg_st.ghostscript.resolution = str2double (arg(3:end));
       elseif (length (arg) > 2 && arg(1:2) == "-f")
-        arg_st.figure = str2num (arg(3:end));
+        arg_st.figure = str2double (arg(3:end));
       elseif (any (strcmp (arg, {"-painters", "-opengl"})))
         warning ("print: '%s' accepted for Matlab compatibility, but is ignored", arg);
       elseif (strcmp (arg, "-noui"))
         warning ("print: option '-noui' not yet implemented");
       elseif (length (arg) >= 1 && arg(1) == "-")
         error ("print: unknown option '%s'", arg);
       elseif (length (arg) > 0)
         arg_st.name = tilde_expand (arg);
@@ -181,20 +179,16 @@ function arg_st = __print_parse_opts__ (
     if (isfigure (arg_st.figure))
       arg_st.orientation = get (arg_st.figure, "paperorientation");
     else
       ## Allows tests to be run without error.
       arg_st.orientation = "portrait";
     endif
   endif
 
-  if (isempty (arg_st.ghostscript.binary))
-    arg_st.ghostscript.binary = __ghostscript_binary__ ();
-  endif
-
   dot = rindex (arg_st.name, ".");
   if (isempty (arg_st.devopt))
     if (dot == 0)
       arg_st.devopt = "psc";
     else
       arg_st.devopt = tolower (arg_st.name(dot+1:end));
     endif
   endif
@@ -214,31 +208,31 @@ function arg_st = __print_parse_opts__ (
   elseif (strcmp (arg_st.devopt, "cdr"))
     arg_st.devopt = "corel";
   elseif (strcmp (arg_st.devopt, "meta"))
     arg_st.devopt = "emf";
   elseif (strcmp (arg_st.devopt, "jpg"))
     arg_st.devopt = "jpeg";
   endif
 
-  dev_list = {"aifm", "corel", "fig", "png", "jpeg", ...
+  persistent dev_list = {"aifm", "corel", "fig", "png", "jpeg", ...
               "gif", "pbm", "pbmraw", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps2", "psc", ...
               "psc2", "eps", "eps2", "epsc", "epsc2", ...
               "emf", "pdf", "pslatex", "epslatex", "epslatexstandalone", ...
               "pslatexstandalone", "pdflatexstandalone", ...
               "pstex", "tiff", "tiffn" "tikz", "pcxmono", ...
               "pcx24b", "pcx256", "pcx16", "pgm", "pgmraw", ...
               "ppm", "ppmraw", "pdflatex", "texdraw", ...
               "epscairo", "pdfcairo", "pngcairo", "cairolatex", ...
               "pdfcairolatex", "pdfcairolatexstandalone", ...
               "epscairolatex", "epscairolatexstandalone", "pstricks", ...
               "epswrite", "eps2write", "pswrite", "ps2write", "pdfwrite"};
 
-  suffixes = {"ai", "cdr", "fig", "png", "jpg", ...
+  persistent suffixes = {"ai", "cdr", "fig", "png", "jpg", ...
               "gif", "pbm", "pbm", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps", "ps", ...
               "ps", "eps", "eps", "eps", "eps", ...
               "emf", "pdf", "tex", "tex", "tex", ...
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
@@ -254,41 +248,39 @@ function arg_st = __print_parse_opts__ (
     __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
   if (strcmp (__graphics_toolkit__, "gnuplot"))
     suffixes(strncmp (dev_list, "epslatex", 8)) = {"eps"};
   endif
 
   match = strcmpi (dev_list, arg_st.devopt);
-  if (any (match))
-    default_suffix = suffixes{match};
-  else
+  if (! any (match))
     error ("print: unknown device %s", arg_st.devopt);
   endif
+  default_suffix = suffixes{match};
 
   if (dot == 0 && ! isempty (arg_st.name))
     arg_st.name = [arg_st.name "." default_suffix];
   endif
 
   if (arg_st.append_to_file)
     if (isempty (arg_st.name))
       arg_st.append_to_file = false;
     elseif (any (strcmpi (arg_st.devopt, {"eps", "eps2", "epsc", "epsc2", ...
                                           "ps", "ps2", "psc", "psc2", "pdf"})))
       have_ghostscript = ! isempty (__ghostscript_binary__ ());
       if (have_ghostscript)
-        file_exists = ((numel (dir (arg_st.name)) == 1)
-                       && (! isdir (arg_st.name)));
+        file_exists = (numel (dir (arg_st.name)) == 1 && ! isdir (arg_st.name));
         if (! file_exists)
           arg_st.append_to_file = false;
         endif
       else
         arg_st.append_to_file = false;
-        warning ("print.m: appended output requires ghostscript to be installed");
+        warning ("print.m: appended output requires Ghostscript to be installed");
       endif
     else
       warning ("print.m: appended output is not supported for device '%s'",
                arg_st.devopt);
       arg_st.append_to_file = false;
     endif
   endif
 
@@ -342,17 +334,17 @@ function arg_st = __print_parse_opts__ (
     error ("print: an output filename must be specified");
   endif
 
   if (isempty (arg_st.canvas_size))
     if (isfigure (arg_st.figure))
       [arg_st.ghostscript.papersize, paperposition] = ...
                            gs_papersize (arg_st.figure, arg_st.orientation);
     else
-      ## allows tests to be run
+      ## allows BIST tests to be run
       arg_st.ghostscript.papersize = "letter";
       paperposition = [0.25, 2.50, 8.00, 6.00] * 72;
     endif
     arg_st.canvas_size = paperposition(3:4);
     if (strcmp (__graphics_toolkit__, "gnuplot")
         && ! arg_st.ghostscript.epscrop)
       arg_st.ghostscript.pageoffset = paperposition(1:2) - 50;
     else
@@ -372,31 +364,21 @@ function arg_st = __print_parse_opts__ (
 
   if (arg_st.formatted_for_printing)
     arg_st.ghostscript.resolution = [];
   else
     arg_st.ghostscript.papersize = "";
     arg_st.ghostscript.pageoffset = [0, 0];
   endif
 
-  if (warn_on_missing_binary)
+  if (warn_on_missing_ghostscript)
     if (isempty (arg_st.ghostscript.binary))
-      warning ("print:missing_gs", "print.m: Ghostscript binary is not available.\nOnly eps output is available.");
-    else
-      if (isempty (arg_st.epstool_binary))
-        warning ("print:missing_epstool", "print.m: epstool binary is not available.\nSome output formats are not available.");
-      endif
-      if (isempty (arg_st.fig2dev_binary))
-        warning ("print:missing_fig2dev", "print.m: fig2dev binary is not available.\nSome output formats are not available.");
-      endif
-      if (isempty (arg_st.pstoedit_binary))
-        warning ("print:missing_pstoedit", "print.m: pstoedit binary is not available.\nSome output formats are not available.");
-      endif
+      warning ("print:missing_gs", "print.m: Ghostscript binary is not available.  Only eps output is possible");
     endif
-    warn_on_missing_binary = false;
+    warn_on_missing_ghostscript = false;
   endif
 
 endfunction
 
 
 ## Test blocks are not allowed (and not needed) for private functions
 #%!test
 %! opts = __print_parse_opts__ ();
@@ -470,93 +452,79 @@ function cmd = __quote_path__ (cmd)
     endif
   endif
 
 endfunction
 
 
 function gs = __ghostscript_binary__ ()
 
-  persistent ghostscript_binary = ""
-  persistent warn_on_no_ghostscript = true
-  persistent warn_on_bad_gsc = true
+  persistent ghostscript_binary = "";
+  persistent warn_on_bad_gsc = true;
 
   if (isempty (ghostscript_binary))
     GSC = getenv ("GSC");
     if (exist (GSC, "file")
         || (! isempty (GSC) && file_in_path (getenv ("PATH"), GSC)))
       gs_binaries = {GSC};
     elseif (! isempty (GSC) && warn_on_bad_gsc)
       warning ("print:badgscenv",
                "print.m: GSC environment variable not set properly");
       warn_on_bad_gsc = false;
       gs_binaries = {};
     else
       gs_binaries = {};
     endif
+
     if (isunix ())
       ## Unix - Includes Mac OSX and Cygwin.
       gs_binaries = [gs_binaries, {"gs", "gs.exe"}];
     else
       ## pc - Includes Win32 and mingw.
       gs_binaries = [gs_binaries, ...
                      {"gs.exe", "gswin32c.exe", "gswin64c.exe", "mgs.exe"}];
     endif
     n = 0;
     while (n < numel (gs_binaries) && isempty (ghostscript_binary))
-      n += 1;
-      ghostscript_binary = file_in_path (getenv ("PATH"), gs_binaries{n});
+      ghostscript_binary = file_in_path (getenv ("PATH"), gs_binaries{++n});
     endwhile
-    if (warn_on_no_ghostscript && isempty (ghostscript_binary))
-      warning ("print:noghostscript",
-               "print.m: ghostscript not found in PATH");
-      warn_on_no_ghostscript = false;
-    endif
   endif
 
   gs = ghostscript_binary;
 
 endfunction
 
 function bin = __find_binary__ (binary)
 
-  persistent data = struct ()
+  persistent data = struct ();
 
   if (! isfield (data, binary))
-    ## Reinitialize when 'user_binaries' is present.
     data.(binary).bin = "";
-    data.(binary).warn_on_absence = false;
   endif
 
   if (isempty (data.(binary).bin))
     if (isunix ())
       ## Unix - Includes Mac OSX and Cygwin.
       binaries = strcat (binary, {"", ".exe"});
     else
       ## pc - Includes Win32 and mingw.
       binaries = strcat (binary, {".exe"});
     endif
     n = 0;
     while (n < numel (binaries) && isempty (data.(binary).bin))
-      n += 1;
-      data.(binary).bin = file_in_path (getenv ("PATH"), binaries{n});
+      data.(binary).bin = file_in_path (getenv ("PATH"), binaries{++n});
     endwhile
-    if (isempty (data.(binary).bin) && data.(binary).warn_on_absence)
-      warning (sprintf ("print:no%s", binary),
-               "print.m: '%s' not found in PATH", binary);
-      data.(binary).warn_on_absence = false;
-    endif
   endif
 
   bin = data.(binary).bin;
 
 endfunction
 
 function [papersize, paperposition] = gs_papersize (hfig, paperorientation)
-  persistent papertypes papersizes
+  persistent papertypes papersizes;
 
   if (isempty (papertypes))
     papertypes = {"usletter", "uslegal",     "a0",     "a1", ...
                         "a2",      "a3",     "a4",     "a5", ...
                         "b0",      "b1",     "b2",     "b3", ...
                         "b4",      "b5", "arch-a", "arch-b", ...
                     "arch-c",  "arch-d", "arch-e",      "a", ...
                          "b",       "c",      "d",      "e", ...
