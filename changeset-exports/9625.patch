# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1252227619 -7200
#      Sun Sep 06 11:00:19 2009 +0200
# Node ID cbabf50315caaa1cdaed9c8163c45647bac21e7d
# Parent  3fc7272937ce5bae3f982202e10bff6db7b433a0
optimize Matrix*ColumnVector

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -335,30 +335,27 @@ operator * (const ComplexMatrix& m, cons
   octave_idx_type nc = m.cols ();
 
   octave_idx_type a_len = a.length ();
 
   if (nc != a_len)
     gripe_nonconformant ("operator *", nr, nc, a_len, 1);
   else
     {
-      if (nc == 0 || nr == 0)
-	retval.resize (nr, 0.0);
-      else
-	{
-	  octave_idx_type ld = nr;
+      retval.clear (nr);
+
+      if (nr != 0)
+        {
+          Complex *y = retval.fortran_vec ();
 
-	  retval.resize (nr);
-	  Complex *y = retval.fortran_vec ();
-
-	  F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-				   nr, nc, 1.0, m.data (), ld,
-				   a.data (), 1, 0.0, y, 1
-				   F77_CHAR_ARG_LEN (1)));
-	}
+          F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+                                   nr, nc, 1.0, m.data (), nr,
+                                   a.data (), 1, 0.0, y, 1
+                                   F77_CHAR_ARG_LEN (1)));
+        }
     }
 
   return retval;
 }
 
 // matrix by column vector -> column vector operations
 
 ComplexColumnVector
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-09-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dColVector.h (operator *(const Matrix&, const ColumnVector)):
+	Optimize.
+	* fColVector.h (operator *(const FloatMatrix&, const
+	FloatColumnVector)): Optimize.
+	* CColVector.h (operator *(const ComplexMatrix&, const
+	ComplexColumnVector)): Optimize.
+	* fCColVector.h (operator *(const FloatComplexMatrix&, const
+	FloatComplexColumnVector)): Optimize.
+
 2009-09-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::clear (const dim_vector&)): new method.
 	* Array.h: Declare it.
 	(Array<T>::clear (octave_idx_type)): New method.
 	(Array<T>::clear (octave_idx_type, octave_idx_type)): New method.
 
 2009-09-04  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -204,30 +204,27 @@ operator * (const Matrix& m, const Colum
   octave_idx_type nc = m.cols ();
 
   octave_idx_type a_len = a.length ();
 
   if (nc != a_len)
     gripe_nonconformant ("operator *", nr, nc, a_len, 1);
   else
     {
-      if (nr == 0 || nc == 0)
-	retval.resize (nr, 0.0);
-      else
-	{
-	  octave_idx_type ld = nr;
+      retval.clear (nr);
+
+      if (nr != 0)
+        {
+          double *y = retval.fortran_vec ();
 
-	  retval.resize (nr);
-	  double *y = retval.fortran_vec ();
-
-	  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-				   nr, nc, 1.0, m.data (), ld,
-				   a.data (), 1, 0.0, y, 1
-				   F77_CHAR_ARG_LEN (1)));
-	}
+          F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+                                   nr, nc, 1.0, m.data (), nr,
+                                   a.data (), 1, 0.0, y, 1
+                                   F77_CHAR_ARG_LEN (1)));
+        }
     }
 
   return retval;
 }
 
 // diagonal matrix by column vector -> column vector operations
 
 ColumnVector
diff --git a/liboctave/fCColVector.cc b/liboctave/fCColVector.cc
--- a/liboctave/fCColVector.cc
+++ b/liboctave/fCColVector.cc
@@ -335,30 +335,27 @@ operator * (const FloatComplexMatrix& m,
   octave_idx_type nc = m.cols ();
 
   octave_idx_type a_len = a.length ();
 
   if (nc != a_len)
     gripe_nonconformant ("operator *", nr, nc, a_len, 1);
   else
     {
-      if (nc == 0 || nr == 0)
-	retval.resize (nr, 0.0);
-      else
-	{
-	  octave_idx_type ld = nr;
+      retval.clear (nr);
+
+      if (nr != 0)
+        {
+          FloatComplex *y = retval.fortran_vec ();
 
-	  retval.resize (nr);
-	  FloatComplex *y = retval.fortran_vec ();
-
-	  F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-				   nr, nc, 1.0, m.data (), ld,
-				   a.data (), 1, 0.0, y, 1
-				   F77_CHAR_ARG_LEN (1)));
-	}
+          F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+                                   nr, nc, 1.0f, m.data (), nr,
+                                   a.data (), 1, 0.0f, y, 1
+                                   F77_CHAR_ARG_LEN (1)));
+        }
     }
 
   return retval;
 }
 
 // matrix by column vector -> column vector operations
 
 FloatComplexColumnVector
diff --git a/liboctave/fColVector.cc b/liboctave/fColVector.cc
--- a/liboctave/fColVector.cc
+++ b/liboctave/fColVector.cc
@@ -204,30 +204,27 @@ operator * (const FloatMatrix& m, const 
   octave_idx_type nc = m.cols ();
 
   octave_idx_type a_len = a.length ();
 
   if (nc != a_len)
     gripe_nonconformant ("operator *", nr, nc, a_len, 1);
   else
     {
-      if (nr == 0 || nc == 0)
-	retval.resize (nr, 0.0);
-      else
-	{
-	  octave_idx_type ld = nr;
+      retval.clear (nr);
+
+      if (nr != 0)
+        {
+          float *y = retval.fortran_vec ();
 
-	  retval.resize (nr);
-	  float *y = retval.fortran_vec ();
-
-	  F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-				   nr, nc, 1.0, m.data (), ld,
-				   a.data (), 1, 0.0, y, 1
-				   F77_CHAR_ARG_LEN (1)));
-	}
+          F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+                                   nr, nc, 1.0f, m.data (), nr,
+                                   a.data (), 1, 0.0f, y, 1
+                                   F77_CHAR_ARG_LEN (1)));
+        }
     }
 
   return retval;
 }
 
 // diagonal matrix by column vector -> column vector operations
 
 FloatColumnVector
