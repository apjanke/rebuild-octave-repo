# HG changeset patch
# User Rik <rik@octave.org>
# Date 1409544338 25200
#      Sun Aug 31 21:05:38 2014 -0700
# Node ID d20c81d3cd21c7039d4715fcf216502610683bca
# Parent  d3a223128efc7283ea27572655fd0d68802f6b37
Deprecate syl, add new function sylvester.

* sylvester.cc: New function

* syl.cc: Remove syl C++ function.

* scriptss/deprecated/syl.m: m-file to replace syl.cc

* NEWS: Announce new sylvester function.  Announce deprecation of syl.

* linalg.txi: Replace reference to syl with sylvester.

* libinterp/corefcn/module.mk: Add sylvester.cc to build system.

* scripts/deprecated/module.mk: Add syl.m to build system.

* CMatrix.cc (Sylvester), dMatrix.cc (Sylvester), fCMatrix.cc (Sylvester),
fMatrix.cc (Sylvester): Return +C rather than -C to conform to changed
definition of Sylvester equation.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -64,26 +64,26 @@ Summary of important user-visible change
     previous separate warning IDs "Octave:fopen-file-in-path",
     "Octave:load-file-in-path", and "Octave:md5sum-file-in-path".
 
  ** Other new functions added in 4.2:
 
       bandwidth            ilu             javachk
       dir_in_loadpath      isbanded        linkaxes
       hgload               isdiag          numfields
-      hgsave               istril   
+      hgsave               istril          sylvester
       ichol                istriu   
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
-      bicubic
+      bicubic              syl
       find_dir_in_path
       nfields
 
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new            
       gen_doc_cache           java_unsigned_conversion  
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -196,17 +196,17 @@ detect a non-Hermitian matrix.
 @DOCSTRING(logm)
 
 @DOCSTRING(sqrtm)
 
 @DOCSTRING(kron)
 
 @DOCSTRING(blkmm)
 
-@DOCSTRING(syl)
+@DOCSTRING(sylvester)
 
 @node Specialized Solvers
 @section Specialized Solvers
 @cindex matrix, specialized solvers
 
 @DOCSTRING(bicg)
 
 @DOCSTRING(bicgstab)
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -239,17 +239,17 @@ COREFCN_SRC = \
   corefcn/sparse.cc \
   corefcn/spparms.cc \
   corefcn/sqrtm.cc \
   corefcn/str2double.cc \
   corefcn/strfind.cc \
   corefcn/strfns.cc \
   corefcn/sub2ind.cc \
   corefcn/svd.cc \
-  corefcn/syl.cc \
+  corefcn/sylvester.cc \
   corefcn/symtab.cc \
   corefcn/syscalls.cc \
   corefcn/sysdep.cc \
   corefcn/time.cc \
   corefcn/toplev.cc \
   corefcn/tril.cc \
   corefcn/txt-eng.cc \
   corefcn/txt-eng-ft.cc \
diff --git a/libinterp/corefcn/syl.cc b/libinterp/corefcn/sylvester.cc
rename from libinterp/corefcn/syl.cc
rename to libinterp/corefcn/sylvester.cc
--- a/libinterp/corefcn/syl.cc
+++ b/libinterp/corefcn/sylvester.cc
@@ -27,38 +27,40 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
-DEFUN (syl, args, nargout,
+DEFUN (sylvester, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {@var{x} =} syl (@var{A}, @var{B}, @var{C})\n\
+@deftypefn {Built-in Function} {@var{X} =} syl (@var{A}, @var{B}, @var{C})\n\
 Solve the Sylvester equation\n\
 @tex\n\
 $$\n\
- A X + X B + C = 0\n\
+ A X + X B = C\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
-A X + X B + C = 0\n\
+A X + X B = C\n\
 @end example\n\
 \n\
 @end ifnottex\n\
-using standard @sc{lapack} subroutines.  For example:\n\
+using standard @sc{lapack} subroutines.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
-syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])\n\
-   @result{} [ -0.50000, -0.66667; -0.66667, -0.50000 ]\n\
+sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])\n\
+   @result{} [ 0.50000, 0.66667; 0.66667, 0.50000 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -76,45 +78,50 @@ syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10;
   octave_idx_type a_nc = arg_a.columns ();
 
   octave_idx_type b_nr = arg_b.rows ();
   octave_idx_type b_nc = arg_b.columns ();
 
   octave_idx_type c_nr = arg_c.rows ();
   octave_idx_type c_nc = arg_c.columns ();
 
-  int arg_a_is_empty = empty_arg ("syl", a_nr, a_nc);
-  int arg_b_is_empty = empty_arg ("syl", b_nr, b_nc);
-  int arg_c_is_empty = empty_arg ("syl", c_nr, c_nc);
+  int arg_a_is_empty = empty_arg ("sylvester", a_nr, a_nc);
+  int arg_b_is_empty = empty_arg ("sylvester", b_nr, b_nc);
+  int arg_c_is_empty = empty_arg ("sylvester", c_nr, c_nc);
 
-  bool isfloat = arg_a.is_single_type () || arg_b.is_single_type ()
+  bool isfloat = arg_a.is_single_type ()
+                 || arg_b.is_single_type ()
                  || arg_c.is_single_type ();
 
   if (arg_a_is_empty > 0 && arg_b_is_empty > 0 && arg_c_is_empty > 0)
     if (isfloat)
       return octave_value (FloatMatrix ());
     else
       return octave_value (Matrix ());
   else if (arg_a_is_empty || arg_b_is_empty || arg_c_is_empty)
     return retval;
 
   // Arguments are not empty, so check for correct dimensions.
 
-  if (a_nr != a_nc || b_nr != b_nc)
+  if (a_nr != a_nc)
     {
-      gripe_square_matrix_required ("syl: first two parameters:");
+      gripe_square_matrix_required ("sylvester: input A");
+      return retval;
+    }
+  else if (b_nr != b_nc)
+    {
+      gripe_square_matrix_required ("sylvester: input B");
       return retval;
     }
   else if (a_nr != c_nr || b_nr != c_nc)
     {
       gripe_nonconformant ();
       return retval;
     }
 
-  // Dimensions look o.k., let's solve the problem.
   if (isfloat)
     {
       if (arg_a.is_complex_type ()
           || arg_b.is_complex_type ()
           || arg_c.is_complex_type ())
         {
           // Do everything in complex arithmetic;
 
@@ -204,15 +211,20 @@ syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10;
           retval = Sylvester (ca, cb, cc);
         }
     }
 
   return retval;
 }
 
 /*
-%!assert (syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12]), [-1/2, -2/3; -2/3, -1/2], sqrt (eps))
-%!assert (syl (single ([1, 2; 3, 4]), single ([5, 6; 7, 8]), single ([9, 10; 11, 12])), single ([-1/2, -2/3; -2/3, -1/2]), sqrt (eps ("single")))
+%!assert (sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12]), [1/2, 2/3; 2/3, 1/2], sqrt (eps))
+%!assert (sylvester (single ([1, 2; 3, 4]), single ([5, 6; 7, 8]), single ([9, 10; 11, 12])), single ([1/2, 2/3; 2/3, 1/2]), sqrt (eps ("single")))
 
-%!error syl ()
-%!error syl (1, 2, 3, 4)
-%!error <must be a square matrix> syl ([1, 2; 3, 4], [1, 2, 3; 4, 5, 6], [4, 3])
+%% Test input validation
+%!error sylvester ()
+%!error sylvester (1)
+%!error sylvester (1,2)
+%!error sylvester (1, 2, 3, 4)
+%!error <input A: .* must be a square matrix> sylvester (ones (2,3), ones (2,2), ones (2,2))
+%!error <input B: .* must be a square matrix> sylvester (ones (2,2), ones (2,3), ones (2,2))
+%!error <nonconformant matrices> sylvester (ones (2,2), ones (2,2), ones (3,3))
 */
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -3700,17 +3700,17 @@ Sylvester (const ComplexMatrix& a, const
                              F77_CONST_CHAR_ARG2 ("N", 1),
                              1, a_nr, b_nr, pa, a_nr, pb,
                              b_nr, px, a_nr, scale, info
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   // FIXME: check info?
 
-  retval = -ua * cx * ub.hermitian ();
+  retval = ua * cx * ub.hermitian ();
 
   return retval;
 }
 
 ComplexMatrix
 operator * (const ComplexMatrix& m, const Matrix& a)
 {
   if (m.columns () > std::min (m.rows (), a.columns ()) / 10)
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -3130,17 +3130,17 @@ Sylvester (const Matrix& a, const Matrix
                              1, a_nr, b_nr, pa, a_nr, pb,
                              b_nr, px, a_nr, scale, info
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
 
   // FIXME: check info?
 
-  retval = -ua*cx*ub.transpose ();
+  retval = ua*cx*ub.transpose ();
 
   return retval;
 }
 
 // matrix by matrix -> matrix operations
 
 /*
 
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -3724,17 +3724,17 @@ Sylvester (const FloatComplexMatrix& a, 
                              F77_CONST_CHAR_ARG2 ("N", 1),
                              1, a_nr, b_nr, pa, a_nr, pb,
                              b_nr, px, a_nr, scale, info
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   // FIXME: check info?
 
-  retval = -ua * cx * ub.hermitian ();
+  retval = ua * cx * ub.hermitian ();
 
   return retval;
 }
 
 FloatComplexMatrix
 operator * (const FloatComplexMatrix& m, const FloatMatrix& a)
 {
   if (m.columns () > std::min (m.rows (), a.columns ()) / 10)
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -3152,17 +3152,17 @@ Sylvester (const FloatMatrix& a, const F
                              1, a_nr, b_nr, pa, a_nr, pb,
                              b_nr, px, a_nr, scale, info
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
 
   // FIXME: check info?
 
-  retval = -ua*cx*ub.transpose ();
+  retval = ua*cx*ub.transpose ();
 
   return retval;
 }
 
 // matrix by matrix -> matrix operations
 
 /*
 ## Simple Dot Product, Matrix-Vector, and Matrix-Matrix Unit tests
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,14 +1,15 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/bicubic.m \
   deprecated/find_dir_in_path.m \
   deprecated/isstr.m \
   deprecated/nfields.m \
-  deprecated/strmatch.m
+  deprecated/strmatch.m \
+  deprecated/syl.m
 
 FCN_FILES += $(deprecated_FCN_FILES)
 
 PKG_ADD_FILES += deprecated/PKG_ADD
 
 DIRSTAMP_FILES += deprecated/$(octave_dirstamp)
diff --git a/scripts/deprecated/syl.m b/scripts/deprecated/syl.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/syl.m
@@ -0,0 +1,66 @@
+## Copyright (C) 2014 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Built-in Function} {@var{x} =} syl (@var{A}, @var{B}, @var{C})
+##
+## @code{syl} is deprecated and will be removed in Octave version 4.6.
+## Use @code{sylvester} for the equivalent functionality.
+##
+## Solve the Sylvester equation
+## @tex
+## $$
+##  A X + X B + C = 0
+## $$
+## @end tex
+## @ifnottex
+## 
+## @example
+## A X + X B + C = 0
+## @end example
+## 
+## @end ifnottex
+## using standard @sc{lapack} subroutines.  For example:
+## 
+## @example
+## @group
+## syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])
+##    @result{} [ -0.50000, -0.66667; -0.66667, -0.50000 ]
+## @end group
+## @end example
+## @end deftypefn
+
+## Deprecated in version 4.2
+
+function x = syl (A, B, C)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "syl is obsolete and will be removed from a future version of Octave, please use sylvester instead");
+  endif
+
+  if (nargin != 3 || nargout > 1)
+    print_usage ();
+  endif
+
+  x = -sylvester (A, B, C);
+
+endfunction
+
