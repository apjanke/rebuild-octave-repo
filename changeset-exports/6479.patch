# HG changeset patch
# User jwe
# Date 1175614258 0
#      Tue Apr 03 15:30:58 2007 +0000
# Node ID 2ee8293554a343d0014f356d9a1aae1d7eb0472c
# Parent  4da9255998e351c7df450a4712291a9debae4370
[project @ 2007-04-03 15:30:58 by jwe]

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -197,23 +197,24 @@ Execute commands from @var{file}.  Exit 
 Octave also includes several built-in variables that contain information
 about the command line, including the number of arguments and all of the
 options.
 
 @DOCSTRING(argv)
 
 @DOCSTRING(program_invocation_name)
 
-Here is an example of using these variables to reproduce Octave's
+Here is an example of using these functions to reproduce Octave's
 command line.
 
 @example
-printf ("%s", program_name);
+printf ("%s", program_name ());
 for i = 1:nargin
-  printf (" %s", nth (argv, i));
+  arg_list = argv ();
+  printf (" %s", arg_list@{i@});
 endfor
 printf ("\n");
 @end example
 
 @noindent
 @xref{Index Expressions}, for an explanation of how to properly index
 arrays of strings and substrings in Octave, and @xref{Defining Functions},
 for information about the variable @code{nargin}.
@@ -806,27 +807,28 @@ differently depending on the contents of
 @file{~/.octaverc} file.  @xref{Invoking Octave}.  Note that some
 operating systems may place a limit on the number of characters that are
 recognized after @samp{#!}.
 
 Self-contained Octave scripts are useful when you want to write a
 program which users can invoke without knowing that the program is
 written in the Octave language.
 
-If you invoke an executable Octave script with command line arguments,
-the arguments are available in the built-in variable @code{argv}.
+The built-in function @code{argv} returns a cell array containing the
+command line arguments passed to an executable Octave script
 @xref{Command Line Options}.  For example, the following program will
 reproduce the command line that is used to execute it.
 
 @example
 @group
 #! /bin/octave -qf
-printf ("%s", program_name);
+printf ("%s", program_name ());
 for i = 1:nargin
-  printf (" %s", argv@{i@});
+  arg_list = argv ();
+  printf (" %s", arg_list@{i@});
 endfor
 printf ("\n");
 @end group
 @end example
 
 @node Comments
 @section Comments in Octave Programs
 @cindex @samp{#}
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -968,16 +968,32 @@ ComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcond;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcond, 0, 0);
 }
 
 ComplexMatrix
+ComplexMatrix::inverse (octave_idx_type& info) const
+{
+  double rcond;
+  MatrixType mattype (*this);
+  return inverse (mattype, info, rcond, 0, 0);
+}
+
+ComplexMatrix
+ComplexMatrix::inverse (octave_idx_type& info, double& rcond, int force,
+			int calc_cond) const
+{
+  MatrixType mattype (*this);
+  return inverse (mattype, info, rcond, 0, 0);
+}
+
+ComplexMatrix
 ComplexMatrix::inverse (MatrixType &mattype) const
 {
   octave_idx_type info;
   double rcond;
   return inverse (mattype, info, rcond, 0, 0);
 }
 
 ComplexMatrix
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -139,16 +139,20 @@ private:
   ComplexMatrix tinverse (MatrixType &mattype, octave_idx_type& info,
 			  double& rcond, int force, int calc_cond) const;
 
   ComplexMatrix finverse (MatrixType &mattype, octave_idx_type& info,
 			  double& rcond, int force, int calc_cond) const;
 
 public:
   ComplexMatrix inverse (void) const;
+  ComplexMatrix inverse (octave_idx_type& info) const;
+  ComplexMatrix inverse (octave_idx_type& info, double& rcond, int force = 0, 
+			 int calc_cond = 1) const;
+
   ComplexMatrix inverse (MatrixType &mattype) const;
   ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   ComplexMatrix inverse (MatrixType &mattype, octave_idx_type& info,
 			 double& rcond, int force = 0, 
 			 int calc_cond = 1) const;
 
   ComplexMatrix pseudo_inverse (double tol = 0.0) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-04-02  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.h (Matrix::inverse): Reinstate versions without
+	MatrixType argument.
+	* CMatrix.h (ComplexMatrix::inverse): Likewise.
+
 2007-03-27  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (DISTDIRS): Delete variable.
 	(dist): Delete action for DISTDIRS.  Use ln instead of $(LN_S).
 
 2007-03-26  David Bateman <dbateman@free.fr>
 
 	* MatrixType.cc: Replace all uses of the method
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -636,16 +636,32 @@ Matrix::inverse (void) const
 {
   octave_idx_type info;
   double rcond;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcond, 0, 0);
 }
 
 Matrix
+Matrix::inverse (octave_idx_type& info) const
+{
+  double rcond;
+  MatrixType mattype (*this);
+  return inverse (mattype, info, rcond, 0, 0);
+}
+
+Matrix
+Matrix::inverse (octave_idx_type& info, double& rcond, int force,
+		 int calc_cond) const
+{
+  MatrixType mattype (*this);
+  return inverse (mattype, info, rcond, force, calc_cond);
+}
+
+Matrix
 Matrix::inverse (MatrixType& mattype) const
 {
   octave_idx_type info;
   double rcond;
   return inverse (mattype, info, rcond, 0, 0);
 }
 
 Matrix
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -111,16 +111,20 @@ private:
   Matrix tinverse (MatrixType &mattype, octave_idx_type& info, double& rcond, 
 		   int force, int calc_cond) const;
 
   Matrix finverse (MatrixType &mattype, octave_idx_type& info, double& rcond, 
 		   int force, int calc_cond) const;
 
 public:
   Matrix inverse (void) const;
+  Matrix inverse (octave_idx_type& info) const;
+  Matrix inverse (octave_idx_type& info, double& rcond, int force = 0,
+		  int calc_cond = 1) const;
+
   Matrix inverse (MatrixType &mattype) const;
   Matrix inverse (MatrixType &mattype, octave_idx_type& info) const;
   Matrix inverse (MatrixType &mattype, octave_idx_type& info, double& rcond,
 		  int force = 0, int calc_cond = 1) const;
 
   Matrix pseudo_inverse (double tol = 0.0) const;
 
   ComplexMatrix fourier (void) const;
