# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1225642064 -3600
#      Sun Nov 02 17:07:44 2008 +0100
# Node ID 02beb5be568356bab68d6fddc05d35c458a994d4
# Parent  d95c4e31bb2dd050ad1f5e5e202bdccc966d1ecf
add bzip2 function

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -59,16 +59,22 @@ 2008-10-31  Jaroslav Hajek  <highegg@gma
 	* optimization/optimget.m: New function file.
 	* optimization/Makefile.in: Add it.
 	* optimization/lsqnonneg.m: Query options using optimget.
 
 2008-10-31  Jaroslav Hajek <highegg@gmail.com>
 
 	* linear-algebra/__norm__.m: Remove.
 
+2008-10-25  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+        * miscellaneous/bzip2.m, miscellaneous/__xzip__.m: new commands.
+        * miscellaneous/gzip.m: change to use __xzip__ for actual compression,
+          add tests.
+                  
 2008-10-31  David Bateman  <dbateman@free.fr>
 
 	* plot/__contour__.m: Exclude infinite values when calculating contour
 	levels.
 	* plot/clabel.m: Close previous plots in demos to avoid pollution
 	between other plot demos.
 	* plot/plotyy.m: Ditto.
 
diff --git a/scripts/miscellaneous/__xzip__.m b/scripts/miscellaneous/__xzip__.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/__xzip__.m
@@ -0,0 +1,124 @@
+## Copyright (C) 2008 Thorsten Meyer
+## based on the original gzip function by David Bateman
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{entries} =} _xzip_ (@var{commandname}, @var{extension}, @var{commandtemplate}, @var{files}, @var{outdir})
+## Compresses the list of files and/or directories specified in @var{files} 
+## with the external compression command @var{commandname}. The template 
+## @var{commandtemplate} is used to actually start the command. Each file
+## is compressed separately and a new file with the extension @var{extension} 
+## is created and placed into the directory @var{outdir}. The original files 
+## are not touched. Existing compressed files are silently overwritten. 
+## This is an internal function. Do not use directly.
+## @seealso{gzip, bzip2}
+## @end deftypefn
+
+function entries = __xzip__ (commandname, extension, 
+                             commandtemplate, files, outdir)
+
+  if (nargin == 4 || nargin == 5)
+    if (! ischar (extension) || length (extension) == 0)
+      error (sprintf("%s: extension has to be a string with finite length",
+                     commandname));
+    endif
+    
+    if (nargin == 5 && ! exist (outdir, "dir"))
+      error ("__xzip__: output directory does not exist");
+    endif
+
+    if (ischar (files))
+      files = cellstr (files);
+    endif
+
+    if (nargin == 4)
+      outdir = tmpnam ();
+      mkdir (outdir);
+    endif
+
+    cwd = pwd();
+    unwind_protect
+      if (iscellstr (files))
+	files = glob (files);
+
+	## Ignore any file with the compress extension
+	files (cellfun (@(x) length(x) > length(extension) 
+          && strcmp (x((end - length(extension) + 1):end), extension), 
+          files)) = [];
+        
+	copyfile (files, outdir);
+
+	[d, f] = myfileparts(files);
+        
+	cd (outdir);
+
+	cmd = sprintf (commandtemplate, sprintf (" %s", f{:}));
+
+	[status, output] = system (cmd);
+	if (status == 0)
+
+	  if (nargin == 5)
+	    compressed_files = cellfun(
+                @(x) fullfile (outdir, sprintf ("%s.%s", x, extension)), 
+                f, "UniformOutput", false);
+	  else
+	    movefile (cellfun(@(x) sprintf ("%s.%s", x, extension), f, 
+			      "UniformOutput", false), cwd);
+            ## FIXME this does not work when you try to compress directories
+                     
+	    compressed_files  = cellfun(@(x) sprintf ("%s.%s", x, extension), 
+			      files, "UniformOutput", false);
+	  endif
+
+	  if (nargout > 0)
+            entries = compressed_files;
+	  endif
+	else
+	  error (sprintf("%s command failed with exit status = %d", 
+                         commandname, status));
+	endif
+    
+      else
+	error ("__xzip__: expecting all arguments to be character strings");
+      endif
+    unwind_protect_cleanup
+      cd(cwd);
+      if (nargin == 1)
+	crr = confirm_recursive_rmdir ();
+	unwind_protect
+	  confirm_recursive_rmdir (false);
+	  rmdir (outdir, "s");
+	unwind_protect_cleanup
+	  confirm_recursive_rmdir (crr);
+	end_unwind_protect
+      endif
+    end_unwind_protect
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+function [d, f] = myfileparts (files)
+  [d, f, ext] = cellfun (@(x) fileparts (x), files, "UniformOutput", false);
+  f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext,
+	       "UniformOutput", false); 
+  idx = cellfun (@(x) isdir (x), files);
+  d(idx) = "";
+  f(idx) = files(idx);
+endfunction
diff --git a/scripts/miscellaneous/bunzip2.m b/scripts/miscellaneous/bunzip2.m
--- a/scripts/miscellaneous/bunzip2.m
+++ b/scripts/miscellaneous/bunzip2.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bunzip2 (@var{bzfile}, @var{dir})
 ## Unpack the bzip2 archive @var{bzfile} to the directory @var{dir}. If
 ## @var{dir} is not specified, it defaults to the current directory.
-## @seealso{unpack, tar, untar, gzip, gunzip, zip, unzip}
+## @seealso{unpack, bzip2, tar, untar, gzip, gunzip, zip, unzip}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function varargout = bunzip2 (files, outputdir)
 
   if (! (nargin == 1 || nargin == 2))
     print_usage ();
diff --git a/scripts/miscellaneous/bzip2.m b/scripts/miscellaneous/bzip2.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/bzip2.m
@@ -0,0 +1,39 @@
+## Copyright (C) 2008 Thorsten Meyer
+## (based on gzip.m by David Bateman)
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{entries} =} bzip2 (@var{files})
+## @deftypefnx {Function File} {@var{entries} =} bzip2 (@var{files}, @var{outdir})
+## Compress the list of files specified in @var{files}.
+## Each file is compressed separately and a new file with a '.bz2' extension
+## is created. The original files are not touched.  Existing compressed files 
+## are silently overwritten.If @var{outdir} is defined the compressed versions 
+## of the files are placed in this directory.
+## @seealso{bunzip2, gzip, zip, tar, __xzip__}
+## @end deftypefn
+
+function entries = bzip2 (varargin)
+
+  if (nargin == 1 || nargin == 2)
+    __xzip__ ("bzip2", "bz2", "bzip2 %s", varargin{:});
+  else
+    print_usage ();
+  endif
+
+endfunction
diff --git a/scripts/miscellaneous/gzip.m b/scripts/miscellaneous/gzip.m
--- a/scripts/miscellaneous/gzip.m
+++ b/scripts/miscellaneous/gzip.m
@@ -16,94 +16,50 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{entries} =} gzip (@var{files})
 ## @deftypefnx {Function File} {@var{entries} =} gzip (@var{files}, @var{outdir})
 ## Compress the list of files and/or directories specified in @var{files}.
 ## Each file is compressed separately and a new file with a '.gz' extension
-## is created. The original file is not touched. If @var{rootdir} is defined 
-## the compressed versions of the files are placed in this directory.
-## @seealso{gunzip, zip, tar}
+## is created. The original files are not touched. Existing compressed
+## files are silently overwritten. If @var{outdir} is defined the compressed 
+## versions of the files are placed in this directory.
+## @seealso{gunzip, bzip2, zip, tar, __xzip__}
 ## @end deftypefn
 
-function entries = gzip (files, outdir)
-
-  if (nargin == 1 || nargin == 2)
-
-    if (nargin == 2 && ! exist (outdir, "dir"))
-      error ("gzip: output directory does not exist");
-    endif
-
-    if (ischar (files))
-      files = cellstr (files);
-    endif
-
-    if (nargin == 1)
-      outdir = tmpnam ();
-      mkdir (outdir);
+function entries = gzip (varargin)
+  if (nargin == 1 || nargin == 2) && (nargout <= 1)
+    if nargout == 0
+      __xzip__ ("gzip", "gz", "gzip -r %s", varargin{:});
+    else
+      entries = __xzip__ ("gzip", "gz", "gzip -r %s", varargin{:});
     endif
-
-    cwd = pwd();
-    unwind_protect
-      if (iscellstr (files))
-	files = glob (files);
-
-	## Ignore any file with a .gz extension
-	files (cellfun (@(x) strcmp (x(end-2:end), ".gz"), files)) = [];
-    
-	copyfile (files, outdir);
-	[d, f] = myfileparts(files);
-	cd (outdir);
-
-	cmd = sprintf ("gzip -r %s", sprintf (" %s", f{:}));
-
-	[status, output] = system (cmd);
-
-	if (status == 0)
-
-	  if (nargin == 2)
-	    gzfiles = cellfun(@(x) fullfile (outdir, sprintf ("%s.gz", x)), ...
-			      f, "UniformOutput", false);
-	  else
-	    movefile (cellfun(@(x) sprintf ("%s.gz", x), f, ...
-			      "UniformOutput", false), cwd);
-	    gzfiles = cellfun(@(x) sprintf ("%s.gz", x), ...
-			      files, "UniformOutput", false);
-	  endif
-
-	  if (nargout > 0)
-            entries = gzfiles;
-	  endif
-	else
-	  error ("gzip: failed with exit status = %d", status);
-	endif
-    
-      else
-	error ("gzip: expecting all arguments to be character strings");
-      endif
-    unwind_protect_cleanup
-      cd(cwd);
-      if (nargin == 1)
-	crr = confirm_recursive_rmdir ();
-	unwind_protect
-	  confirm_recursive_rmdir (false);
-	  rmdir (outdir, "s");
-	unwind_protect_cleanup
-	  confirm_recursive_rmdir (crr);
-	end_unwind_protect
-      endif
-    end_unwind_protect
   else
     print_usage ();
   endif
-
 endfunction
 
-function [d, f] = myfileparts (x)
-  [d, f, ext] = cellfun (@(x) fileparts (x), x, "UniformOutput", false);
-  f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext, ...
-	       "UniformOutput", false); 
-  idx = cellfun (@(x) isdir (x), x);
-  d(idx) = "";
-  f(idx) = x(idx);
-endfunction
+%!error <Invalid call to gzip.  Correct usage is> gzip("1", "2", "3");
+%!error <Invalid call to gzip.  Correct usage is> gzip();
+%!error <output directory does not exist> gzip("1", tmpnam);
+%!error <expecting all arguments to be character strings> gzip(1);
+%!xtest
+%!  unwind_protect
+%!    filename = tmpnam;
+%!    dummy    = 1;
+%!    save(filename, "dummy");
+%!    dirname  = tmpnam;
+%!    mkdir(dirname);
+%!    entry = gzip(filename, dirname);
+%!    [path, basename, extension] = fileparts(filename);
+%!    if ! strcmp(entry, [dirname, "/", basename, extension, ".gz"])
+%!      error("gzipped file does not match expected name!");
+%!    endif
+%!    if ! exist(entry, "file")
+%!      error("gzipped file cannot be found!");
+%!    endif 
+%!  unwind_protect_cleanup
+%!    delete(filename);
+%!    delete(entry{:});
+%!    rmdir(dirname);
+%!  end_unwind_protect
