# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302533128 -7200
#      Mon Apr 11 16:45:28 2011 +0200
# Node ID 877f82caaee3697465f25cc7ace35ef766cc1c05
# Parent  54756573cc1be9f725964e3aeb32bc7299a22a37
Quint saves and restores it's window state.

diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -15,42 +15,49 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include <QMenuBar>
 #include <QMenu>
 #include <QAction>
 #include <QtWebKit/QWebView>
-
+#include <QSettings>
 #include "MainWindow.h"
 
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent),
       m_isRunning(true) {
     resize(1000, 600);
     constructWindow();
     establishOctaveLink();
 }
 
 MainWindow::~MainWindow() {
+    QSettings settings("GNU", "Quint");
+    settings.setValue("MainWindow/geometry", saveGeometry());
+    settings.setValue("MainWindow/windowState", saveState());
 }
 
 void MainWindow::constructWindow() {
     m_octaveTerminal = new OctaveTerminal(this);
     m_variablesDockWidget = new VariablesDockWidget(this);
     m_historyDockWidget = new HistoryDockWidget(this);
     m_filesDockWidget = new FilesDockWidget(this);
 
     setWindowTitle("Octave");
     setCentralWidget(m_octaveTerminal);
 
     addDockWidget(Qt::LeftDockWidgetArea, m_variablesDockWidget);
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
     addDockWidget(Qt::RightDockWidgetArea, m_filesDockWidget);
+
+    QSettings settings("GNU", "Quint");
+    restoreGeometry(settings.value("MainWindow/geometry").toByteArray());
+    restoreState(settings.value("MainWindow/windowState").toByteArray());
 }
 
 void MainWindow::establishOctaveLink() {
     //QMetaObject::invokeMethod(this, "setStatus", Q_ARG(QString, QString("Establishing Octave link..")));
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
 
     m_octaveCallbackThread = new OctaveCallbackThread(this, this);
