# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250513178 -7200
#      Mon Aug 17 14:46:18 2009 +0200
# Node ID 8670e55078fd7a52119d9cfb8dbe637115a2c4af
# Parent  df0abc63c2301bc1d06dcd14b739527c6a8c61a6
allow constructing octave_value_list from size

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-obj.h (octave_value_list::octave_value_list (octave_idx_type)):
+	Allow this constructor.
+
 2009-08-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc (Ffind): Reuse cached index vector when
 	converting boolean mask to indices.
 
 2009-08-18  John W. Eaton  <jwe@octave.org>
 
 	* oct-conf.h.in: New #defines for HDF5_LDFLAGS and HDF5LDFLAGS.
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -39,16 +39,19 @@ class
 OCTINTERP_API
 octave_value_list
 {
 public:
 
   octave_value_list (void)
     : data () { }
 
+  explicit octave_value_list (octave_idx_type n)
+    : data (dim_vector (1, n)) { }
+
   octave_value_list (octave_idx_type n, const octave_value& val)
     : data (dim_vector (1, n), val) { }
 
   octave_value_list (const octave_value& tc)
     : data (1, tc) { }
 
   octave_value_list (const Array<octave_value>& d)
     : data (d.reshape (dim_vector (1, d.numel ()))) { }
@@ -149,32 +152,16 @@ private:
   static octave_allocator allocator;
 
   Array<octave_value> data;
 
   // This list of strings can be used to tag each element of data with
   // a name.  By default, it is empty.
   string_vector names;
 
-  // This constructor is private with no definition to keep statements
-  // like
-  //
-  //   octave_value_list foo = 5;
-  //   octave_value_list foo = 5.0;
-  //
-  // from doing different things.  Instead, you have to use the
-  // constructor
-  //
-  //   octave_value_list (n, val);
-  //
-  // and supply a default value to create a vector-valued
-  // octave_value_list.
-
-  octave_value_list (octave_idx_type n);
-
   octave_value& elem (octave_idx_type n)
     {
       if (n >= length ())
 	resize (n + 1);
 
       return data(n);
     }
 
