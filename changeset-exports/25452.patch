# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528813856 14400
#      Tue Jun 12 10:30:56 2018 -0400
# Node ID 582f343e9022bcd48d93603ae2e9883a1c9d990a
# Parent  d2d9701d2dcb0b324ec21be727b3f10fbc9a058f
# Parent  f84755f24ccd4785dca24c5bd08b9ee4bec44a11
maint: Merge stable to default.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -2068,19 +2068,23 @@ mxArray::~mxArray (void)
 void
 mxArray::set_name (const char *name_arg)
 {
   mxFree (name);
   name = mxArray::strsave (name_arg);
 }
 
 octave_value
-mxArray::as_octave_value (const mxArray *ptr)
+mxArray::as_octave_value (const mxArray *ptr, bool null_is_empty)
 {
-  return ptr ? ptr->as_octave_value () : octave_value ();
+  static const octave_value empty_matrix = Matrix ();
+
+  return (ptr
+          ? ptr->as_octave_value ()
+          : (null_is_empty ? empty_matrix : octave_value ()));
 }
 
 octave_value
 mxArray::as_octave_value (void) const
 {
   return rep->as_octave_value ();
 }
 
@@ -2464,37 +2468,28 @@ static inline void *
 maybe_unmark (void *ptr)
 {
   if (mex_context)
     mex_context->unmark (ptr);
 
   return ptr;
 }
 
-static mxArray *
-make_empty_matrix (void)
-{
-  static const mwSize zero = 0;
-
-  return new mxArray (mxDOUBLE_CLASS, zero, zero, mxREAL);
-}
-
 void
 mxArray_struct::set_field_by_number (mwIndex index, int key_num, mxArray *val)
 {
   if (key_num >= 0 && key_num < nfields)
-    data[nfields * index + key_num]
-      = val ? maybe_unmark_array (val) : make_empty_matrix ();
+    data[nfields * index + key_num] = maybe_unmark_array (val);
 }
 
 void
 mxArray_cell::set_cell (mwIndex idx, mxArray *val)
 {
   if (idx >= 0 && idx < get_number_of_elements ())
-    data[idx] = val ? maybe_unmark_array (val) : make_empty_matrix ();
+    data[idx] = maybe_unmark_array (val);
 }
 
 // ------------------------------------------------------------------
 
 // C interface to mxArray objects:
 
 // Floating point predicates.
 
@@ -3201,17 +3196,17 @@ call_mex (octave_mex_function& mex_fcn, 
     {
       // We have something for ans.
       nargout = 1;
     }
 
   retval.resize (nargout);
 
   for (int i = 0; i < nargout; i++)
-    retval(i) = mxArray::as_octave_value (argout[i]);
+    retval(i) = mxArray::as_octave_value (argout[i], false);
 
   return retval;
 }
 
 // C interface to mex functions:
 
 const char *
 mexFunctionName (void)
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -534,17 +534,18 @@ public:
         mwSize sz = sizeof (mxChar) * (strlen (str) + 1);
         retval = static_cast<char *> (mxArray::malloc (sz));
         strcpy (retval, str);
       }
 
     return retval;
   }
 
-  static octave_value as_octave_value (const mxArray *ptr);
+  static octave_value
+  as_octave_value (const mxArray *ptr, bool null_is_empty = true);
 
   octave_value as_octave_value (void) const;
 
 private:
 
   mutable mxArray_base *rep;
 
   char *name;
