# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497888567 25200
#      Mon Jun 19 09:09:27 2017 -0700
# Node ID 3dc16b35ba2c14ba49b20085cc1281020bad1656
# Parent  18ae8d3c745b1b607c386896b05067bee343d21a
Use round, roundf, roundl from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS, AC_CHECK_DECLS for round.

* lo-mappers.cc: Delegate to std::round or std::roundf.

* oct-inttypes.h: #include <cmath>.  Delegate to std::roundl.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2416,25 +2416,22 @@ AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([sqrt sqrtf], [],
                [AC_MSG_ERROR([Missing function required to build Octave])])
 
 ## exp2, round, tgamma function checks
 AC_LANG_PUSH(C++)
-AC_CHECK_DECLS([round, tgamma], [], [], [[#include <cmath>]])
-AC_CHECK_FUNCS([round tgamma])
+AC_CHECK_DECLS([tgamma], [], [], [[#include <cmath>]])
+AC_CHECK_FUNCS([tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
 extern "C" {
 #endif
-#if HAVE_ROUND && ! HAVE_DECL_ROUND
-double round (double);
-#endif
 #if HAVE_TGAMMA && ! HAVE_DECL_TGAMMA
 double tgamma (double);
 #endif
 #if defined (__cplusplus)
 }
 #endif
 ])
 AC_LANG_POP(C++)
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -288,17 +288,17 @@ namespace octave
 
     double trunc (double x) { return std::trunc (x); }
     float trunc (float x) { return std::trunc (x); }
 
     double floor (double x) { return std::floor (x); }
     float floor (float x) { return std::floor (x); }
 
     double round (double x) { return std::round (x); }
-    float round (float x) { return std::round (x); }
+    float round (float x) { return std::roundf (x); }
 
     double frexp (double x, int *expptr)
     {
       return octave_frexp_wrapper (x, expptr);
     }
 
     float frexp (float x, int *expptr)
     {
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_oct_inttypes_h)
 #define octave_oct_inttypes_h 1
 
 #include "octave-config.h"
 
+#include <cmath>
 #include <cstdlib>
 
 #include <iosfwd>
 #include <limits>
 
 #include "lo-math.h"
 #include "lo-mappers.h"
 #include "lo-traits.h"
@@ -48,17 +49,17 @@ typedef octave_int<uint32_t> octave_uint
 typedef octave_int<uint64_t> octave_uint64;
 
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 
 namespace octave
 {
   namespace math
   {
-    inline long double round (long double x) { return roundl (x); }
+    inline long double round (long double x) { return std::roundl (x); }
 
     inline long double isnan (long double x) { return isnan (static_cast<double> (x)); }
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
