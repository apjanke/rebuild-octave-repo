# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1334010897 25200
#      Mon Apr 09 15:34:57 2012 -0700
# Node ID 759944521fd6689118c82235ec681e0e1f330b87
# Parent  ac8520c03fc93433d82c87250b8bfa70e3da954b
Improve tetramesh docstring and add function to manual.

* geometry.txi: Add tetramesh to manual.

* delaunay.m, delaunay3.m, delaunayn.m: Update seealso cross-references.

* tetramesh.m: Update docstring.  Use Octave coding conventions.

diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -91,23 +91,26 @@ The result of which can be seen in @ref{
 * Identifying Points in Triangulation::
 @end menu
 
 @node Plotting the Triangulation
 @subsection Plotting the Triangulation
 
 Octave has the functions @code{triplot}, @code{trimesh}, and @code{trisurf}
 to plot the Delaunay triangulation of a 2-dimensional set of points.
+@code{tetramesh} will plot the triangulation of a 3-dimensional set of points.
 
 @DOCSTRING(triplot)
 
 @DOCSTRING(trimesh)
 
 @DOCSTRING(trisurf)
 
+@DOCSTRING(tetramesh)
+
 The difference between @code{triplot}, and @code{trimesh} or @code{triplot},
 is that the former only plots the 2-dimensional triangulation itself, whereas
 the second two plot the value of a function @code{f (@var{x}, @var{y})}.  An
 example of the use of the @code{triplot} function is
 
 @example
 @group
 rand ("state", 2)
diff --git a/scripts/geometry/delaunay.m b/scripts/geometry/delaunay.m
--- a/scripts/geometry/delaunay.m
+++ b/scripts/geometry/delaunay.m
@@ -51,17 +51,17 @@
 ## y = rand (1, 10);
 ## T = delaunay (x, y);
 ## VX = [ x(T(:,1)); x(T(:,2)); x(T(:,3)); x(T(:,1)) ];
 ## VY = [ y(T(:,1)); y(T(:,2)); y(T(:,3)); y(T(:,1)) ];
 ## axis ([0,1,0,1]);
 ## plot (VX, VY, "b", x, y, "r*");
 ## @end group
 ## @end example
-## @seealso{delaunay3, delaunayn, convhull, voronoi}
+## @seealso{delaunay3, delaunayn, convhull, voronoi, triplot, trimesh, trisurf}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function tri = delaunay (x, y, options)
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
diff --git a/scripts/geometry/delaunay3.m b/scripts/geometry/delaunay3.m
--- a/scripts/geometry/delaunay3.m
+++ b/scripts/geometry/delaunay3.m
@@ -37,17 +37,17 @@
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ## The default options are @code{@{"Qt", "Qbb", "Qc", "Qz"@}}.
 ##
 ## If @var{options} is not present or @code{[]} then the default arguments are
 ## used.  Otherwise, @var{options} replaces the default argument list. 
 ## To append user options to the defaults it is necessary to repeat the 
 ## default arguments in @var{options}.  Use a null string to pass no arguments.
 ##
-## @seealso{delaunay, delaunayn, convhull, voronoi}
+## @seealso{delaunay, delaunayn, convhull, voronoi, tetramesh}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function tetr = delaunay3 (x, y, z, options)
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
diff --git a/scripts/geometry/delaunayn.m b/scripts/geometry/delaunayn.m
--- a/scripts/geometry/delaunayn.m
+++ b/scripts/geometry/delaunayn.m
@@ -42,17 +42,17 @@
 ## @item 4-D and higher: @var{options} = @code{@{"Qt", "Qbb", "Qc", "Qx"@}}
 ## @end itemize
 ##
 ## If @var{options} is not present or @code{[]} then the default arguments are
 ## used.  Otherwise, @var{options} replaces the default argument list. 
 ## To append user options to the defaults it is necessary to repeat the 
 ## default arguments in @var{options}.  Use a null string to pass no arguments.
 ##
-## @seealso{delaunay, delaunay3, convhulln, voronoin}
+## @seealso{delaunay, delaunay3, convhulln, voronoin, trimesh, tetramesh}
 ## @end deftypefn
 
 function T = delaunayn (pts, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
diff --git a/scripts/plot/tetramesh.m b/scripts/plot/tetramesh.m
--- a/scripts/plot/tetramesh.m
+++ b/scripts/plot/tetramesh.m
@@ -14,148 +14,135 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} tetramesh (@var{T}, @var{X})
 ## @deftypefnx {Function File} tetramesh (@var{T}, @var{X}, @var{C})
-## @deftypefnx {Function File} {[@var{h}] =} tetramesh (...)
-## @deftypefnx {Function File} {[@var{h}] =} tetramesh (..., @var{PROP}, @var{VAL})
+## @deftypefnx {Function File} tetramesh (@dots{}, @var{property}, @var{val}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} tetramesh (@dots{})
 ##
-## The function displays the tetrahedrons defined in the m by 4 matrix @var{T}
-## as 3D patches. @var{T} is usually the output of a Delaunay triangulation of a
-## 3D set of points. 
-## Every row of @var{T} contains four indices into the n by 3 matrix @var{X} 
-## of the vertices of a tetrahedron. 
-## Every row in @var{X} represents one point in 3D space. 
+## Display the tetrahedrons defined in the m-by-4 matrix @var{T}
+## as 3-D patches.  @var{T} is typically the output of a Delaunay triangulation
+## of a 3-D set of points.  Every row of @var{T} contains four indices into
+## the n-by-3 matrix @var{X} of the vertices of a tetrahedron.  Every row in
+## @var{X} represents one point in 3-D space. 
 ##
-## If the vector @var{C} is supplied it must contain indices into the current 
-## colormap. Called without @var{C} it is set to 1:m, where m is the number of
-## tetrahedrons, the indices are scaled to map to the full range of the colormap. 
-## If more tetrahedrons than entries in the colormap are given the entries of
-## @var{C} are cyclic repeated.
+## The vector @var{C} specifies the color of each tetrahedron as an index
+## into the current colormap.  The default value is 1:m where m is the number
+## of tetrahedrons; the indices are scaled to map to the full range of the
+## colormap.  If there are more tetrahedrons than colors in the colormap then
+## the values in @var{C} are cyclically repeated.
 ## 
-## When called with one output argument @var{H} it returns a vector of patch 
-##  handles,each representing one tetrahedron in the order given by @var{T}. 
-## One use case for @var{H} is to turn the respective patch 'Visible' property 
-## 'on' or 'off'.
-##
-## Calling tetramesh(...,'param','value','param','value'...) passes all
-## option/value pairs directly as additional arguments to the patch function for
-## every tetrahedron.
+## Calling @code{tetramesh (@dots{}, "property", "value", @dots{})} passes all
+## property/value pairs directly to the patch function as additional arguments.
 ##
-## The command
+## The optional return value @var{h} is a vector of patch handles where each
+## handle represents one tetrahedron in the order given by @var{T}. 
+## A typical use case for @var{h} is to turn the respective patch "visible"
+## property "on" or "off".
 ##
-##@example
-## @group
-## demo tetramesh
-## @end group
-## @end example
-##
-## @noindent
-## will show some examples how to use it.
-#### @seealso{patch}
+## Type @code{demo tetramesh} to see examples on using @code{tetramesh}.
+## @seealso{delaunay3, delaunayn, trimesh, patch}
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
-function [h] = tetramesh (varargin)
+function h = tetramesh (varargin)
 
   [reg, prop] = parseparams (varargin);
 
   if (length (reg) < 2 || length (reg) > 3)
-    print_usage ()
+    print_usage ();
   endif
 
   T = reg{1};
   X = reg{2};
 
-  if (! ismatrix (T) || size (T, 2) != 4)
-    error ("tetramesh: T must be a n by 4 matrix")
+  if (! ismatrix (T) || columns (T) != 4)
+    error ("tetramesh: T must be a n-by-4 matrix");
   endif
-  if (! ismatrix (X) || size (X, 2) != 3)
-    error ("tetramesh: X must be a n by 3 matrix")
+  if (! ismatrix (X) || columns (X) != 3)
+    error ("tetramesh: X must be a n-by-3 matrix");
   endif
 
-  size_T = size (T, 1);
+  size_T = rows (T);
   colmap = colormap ();
   
-  # do we need to enable gnuplot workaround?
-  shrink = strcmp (graphics_toolkit (), "gnuplot");
-
   if (length (reg) < 3)
     size_colmap = size (colmap, 1);
     C = mod ((1:size_T)' - 1, size_colmap) + 1;
     if (size_T < size_colmap && size_T > 1) 
-      # expand to the available range of colors
+      ## expand to the available range of colors
       C = floor ((C - 1) * (size_colmap - 1) / (size_T - 1)) + 1;
     endif
   else
     C = reg{3};
     if (! isvector (C) || size_T != length (C))
-      error ("tetramesh: C must be a vector of the same length as T")
+      error ("tetramesh: C must be a vector of the same length as T");
     endif
   endif
 
   h = zeros (1, size_T);
-  if (shrink)
-    # tiny reduction of the tetrahedron size to help gnuplot by
-    # avoiding identical faces with different colors
-    for ii = 1:size_T
-      [th, p] = __shrink__ ([1 2 3 4], X(T(ii, :), :), 1 - 1e-7);
-      h(ii) = patch ("Faces", th, "Vertices", p, "FaceColor", ...
-                     colmap(C(ii), :), prop{:});
+  if (strcmp (graphics_toolkit (), "gnuplot"))
+    ## tiny reduction of the tetrahedron size to help gnuplot by
+    ## avoiding identical faces with different colors
+    for i = 1:size_T
+      [th, p] = __shrink__ ([1 2 3 4], X(T(i, :), :), 1 - 1e-7);
+      hvec(i) = patch ("Faces", th, "Vertices", p, 
+                       "FaceColor", colmap(C(i), :), prop{:});
     endfor
   else
-    for ii = 1:size_T
+    for i = 1:size_T
       th = [1 2 3; 2 3 4; 3 4 1; 4 1 2];
-      h(ii) = patch ("Faces", th, "Vertices", X(T(ii, :), :), "FaceColor", ...
-                     colmap(C(ii), :), prop{:});
+      hvec(i) = patch ("Faces", th, "Vertices", X(T(i, :), :), 
+                       "FaceColor", colmap(C(i), :), prop{:});
     endfor
   endif
 
-  if (nargout == 0) #return nothing
-    clear h;
+  if (nargout > 0)
+    h = hvec;
   endif
+
 endfunction
 
 ## shrink the tetrahedron relative to its center of gravity
 function [tri, p] = __shrink__ (T, X, sf)
   midpoint = repmat (sum (X(T, :), 1) / 4, 12, 1);
   p = [X([1 2 3], :); X([2 3 4], :); X([3 4 1], :); X([4 1 2], :)];
   p = sf * (p - midpoint) + midpoint;
   tri = reshape (1:12, 3, 4)';
 endfunction
 
+
 %!demo
+%! clf;
 %! d = [-1 1];
 %! [x,y,z] = meshgrid (d, d, d);
 %! x = [x(:); 0];
 %! y = [y(:); 0];
 %! z = [z(:); 0];
 %! tetra = delaunay3 (x, y, z);
 %! X = [x(:) y(:) z(:)];
-%! clf ()
-%! colormap (jet (64))
+%! colormap (jet (64));
 %! h = tetramesh (tetra, X);
-%! for ii=1:2:length(h);
-%!   set(h(ii), "Visible", "off");
-%! endfor
-%! axis equal
-%! view (30, 20)
-%! title ("Using jet (64), every other tetrahedron invisible")
+%! set (h(1:2:end), "Visible", "off");
+%! axis equal;
+%! view (30, 20);
+%! title ("Using jet (64), every other tetrahedron invisible");
 
 %!demo
+%! clf;
 %! d = [-1 1];
 %! [x,y,z] = meshgrid (d, d, d);
 %! x = [x(:); 0];
 %! y = [y(:); 0];
 %! z = [z(:); 0];
 %! tetra = delaunay3 (x, y, z);
 %! X = [x(:) y(:) z(:)];
-%! clf ()
 %! colormap (gray (256));
-%! tetramesh (tetra, X, 21:20:241, "EdgeColor", "w")
-%! axis equal
-%! view (30, 20)
-%! title ("Using gray (256) and white edges")
+%! tetramesh (tetra, X, 21:20:241, "EdgeColor", "w");
+%! axis equal;
+%! view (30, 20);
+%! title ("Using gray (256) and white edges");
+
