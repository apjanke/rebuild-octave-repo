# HG changeset patch
# User jwe
# Date 1094847846 0
#      Fri Sep 10 20:24:06 2004 +0000
# Node ID bad4898b468eed3b535fff418005e8be59bd328d
# Parent  fac558699d0ff75f6807b92ef4ad62169f59f7d5
[project @ 2004-09-10 20:24:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2004-09-10  John W. Eaton  <jwe@octave.org>
 
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Use unwind
+	protect frame instead of a single unwind_protect::run.
+	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
+
 	* data.cc (fill_matrix, identity_matrix):
 	Also allow logical data type.
 
 2004-09-10  David Bateman  <dbateman@free.fr>
 
 	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::double_value,
 	OCTAVE_VALUE_INT_MATRIX_T::scalar_value,
 	OCTAVE_VALUE_INT_SCALAR_T::double_value,
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -103,25 +103,27 @@ octave_builtin::do_multi_index_op (int n
 
   if (error_state)
     return retval;
 
   if (any_arg_is_magic_colon (args))
     ::error ("invalid use of colon in function argument list");
   else
     {
+      unwind_protect::begin_frame ("builtin_func_eval");
+
       unwind_protect_ptr (curr_function);
       unwind_protect_ptr (curr_caller_function);
 
       curr_caller_function = curr_function;
       curr_function = this;
 
       retval = (*f) (args, nargout);
 
-      unwind_protect::run ();
+      unwind_protect::run_frame ("builtin_func_eval");
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -282,25 +282,27 @@ octave_mapper::do_multi_index_op (int, c
   if (nargin > 1)
     ::error ("%s: too many arguments", name().c_str ());
   else if (nargin < 1)
     ::error ("%s: too few arguments", name().c_str ());
   else
     {
       if (args(0).is_defined ())
 	{
+	  unwind_protect::begin_frame ("mapper_func_eval");
+
 	  unwind_protect_ptr (curr_function);
 	  unwind_protect_ptr (curr_caller_function);
 
 	  curr_caller_function = curr_function;
 	  curr_function = this;
 
 	  retval = apply (args(0));
 
-	  unwind_protect::run ();
+	  unwind_protect::run_frame ("mapper_func_eval");
 	}
       else
 	::error ("%s: argument undefined", name().c_str ());
     }
 
   return retval;
 }
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -332,25 +332,25 @@ octave_user_function::do_multi_index_op 
   if (error_state)
     return retval;
 
   if (! cmd_list)
     return retval;
 
   int nargin = args.length ();
 
-  unwind_protect::begin_frame ("func_eval");
+  unwind_protect::begin_frame ("user_func_eval");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > Vmax_recursion_depth)
     {
       ::error ("max_recursion_limit exceeded");
-      unwind_protect::run_frame ("func_eval");
+      unwind_protect::run_frame ("user_func_eval");
       return retval;
     }
 
   if (symtab_entry && ! symtab_entry->is_read_only ())
     {
       symtab_entry->protect ();
       unwind_protect::add (unprotect_function, symtab_entry);
     }
@@ -488,17 +488,17 @@ octave_user_function::do_multi_index_op 
 	if (has_varargout ())
 	  varargout_to_vr_val ();
 
 	retval = ret_list->convert_to_const_vector (vr_list);
       }
   }
 
  abort:
-  unwind_protect::run_frame ("func_eval");
+  unwind_protect::run_frame ("user_func_eval");
 
   return retval;
 }
 
 void
 octave_user_function::traceback_error (void) const
 {
   if (error_state >= 0)
