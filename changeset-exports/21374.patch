# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456718634 18000
#      Sun Feb 28 23:03:54 2016 -0500
# Node ID 1487a68a496ac4b54e23a70a3afc5114bd3469e8
# Parent  21c3641422e082d9e60606ed0f685f7c7541cf8d
untangle configuration of OpenGL, FLTK, and Qt (bug #47263)

* configure.ac: Disentangle checks for FLTK, Qt, OpenGL, freetype,
fontconfig, etc.

* configure.ac (AMCOND_BUILD_QT_GRAPHICS): New automake conditional.
* libgui/graphics/module.mk: Use it.

* configure.ac (AMCOND_BUILD_QT_GUI): Rename from AMCOND_BUILD_GUI.
Change all uses.
(HAVE_OCTAVE_QT_GUI): Rename from HAVE_OCTAVE_GUI.  Change all uses.

* octave-gui.cc: Only initialize qt graphics toolkit if it is
available.

* __init_fltk__.cc: Only initialize fltk graphics toolkit if it is
available.  Allow compilation to succeed if FTLk widgets are availble
but OpenGL is not.

* __osmesa_print__.cc: Build even if OpenGL is not available.

* acinclude.m4 (OCTAVE_CHECK_LIB_OPENGL): Move AC_DEFINE for
HAVE_OPENGL here.

* libinterp/link-deps.mk (LIBOCTINTERP_LINK_DEPS): Include
$(FONTCONFIG_LIBS) and $(FREETYPE_LIBS) in the list.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -969,17 +969,17 @@ save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(glpk, GLPK,
   [GLPK library not found.  The glpk function for solving linear programs will be disabled.],
   [glpk/glpk.h glpk.h], [glp_simplex], [], [],
   [warn_glpk=
    OCTAVE_CHECK_LIB_GLPK_OK(
     [AC_DEFINE(HAVE_GLPK, 1, [Define to 1 if GLPK is available.])],
-    [warn_glpk="GLPK library found, but does not seem to work properly -- disabling glpk function"])])
+    [warn_glpk="GLPK library found, but does not seem to work properly; disabling glpk function"])])
 LIBS="$save_LIBS"
 CPPFLAGS="$save_CPPFLAGS"
 
 ### Checks for cURL header and library.
 
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
@@ -1154,240 +1154,425 @@ if test "$have_x" = yes; then
 
   if test "$x_includes" != "NONE"; then
     X11_INCFLAGS="$x_includes"
   fi
   AC_SUBST(X11_INCFLAGS)
 
   if test -z "$x_libraries"; then
     AC_CHECK_LIB([X11], XrmInitialize, [X11_LIBS="-lX11"], [X11_LIBS=])
-  elif test $x_libraries != "NONE"; then
+  elif test "$x_libraries" != "NONE"; then
     AC_CHECK_LIB([X11], XrmInitialize,
       [X11_LIBS="-L$x_libraries -lX11"], [X11_LIBS=], "-L$x_libraries")
   fi
   AC_SUBST(X11_LIBS)
 fi
 
 ### Check for the Carbon framework on MacOSX systems
 OCTAVE_HAVE_FRAMEWORK([Carbon],
   [[#include <Carbon/Carbon.h>]], [[CGMainDisplayID ()]],
   [have_framework_carbon=yes], [have_framework_carbon=no])
-if test $have_framework_carbon = yes; then
+if test "$have_framework_carbon" = yes; then
   AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1,
     [Define to 1 if framework CARBON is available.])
   CARBON_LIBS="-Wl,-framework -Wl,Carbon"
   AC_MSG_NOTICE([adding -Wl,-framework -Wl,Carbon to CARBON_LIBS])
   AC_SUBST(CARBON_LIBS)
 fi
 
-### Check for list of libraries needed for native graphics renderer.
-
-native_graphics=yes
-warn_freetype=""
-
-check_opengl=no
+### Check for list of libraries needed for OpenGL graphics renderer.
+
+check_opengl=yes
 AC_ARG_WITH([opengl],
   [AS_HELP_STRING([--without-opengl],
-    [don't use OpenGL libraries, disable native graphics])],
+    [don't use OpenGL libraries, disable OpenGL graphics])],
   [if test x"$withval" = x"no"; then
-     native_graphics=no
-     warn_opengl="--without-opengl specified.  Native graphics will be disabled."
-     OCTAVE_CONFIGURE_WARNING([warn_opengl])
-   else
-     check_opengl=yes
-   fi],
-  [check_opengl=yes])
+     check_opengl=no
+     warn_opengl="--without-opengl specified.  OpenGL graphics will be disabled."
+     OCTAVE_CONFIGURE_WARNING([warn_opengl_disabled])
+   fi])
 
 ## Check for OpenGL library
-if test $check_opengl = yes; then
+if test "$check_opengl" = yes; then
   OCTAVE_CHECK_LIB_OPENGL
+  if test -z "$OPENGL_LIBS"; then
+    warn_opengl_libs="OpenGL libs (GL and GLU) not found.  OpgnGL graphics will be disabled."
+    OCTAVE_CONFIGURE_WARNING([warn_opengl_libs])
+  fi
 fi
 
+## Check for FreeType 2 library
+
+warn_freetype=""
+PKG_CHECK_MODULES([FT2], [freetype2], [
+  min_ft2_version=9.03
+  AC_MSG_CHECKING([for FreeType2 version >= $min_ft2_version])
+  $PKG_CONFIG freetype2 --atleast-version=$min_ft2_version
+  ac_status=$?
+  if test "$ac_status" = 0; then
+    AC_MSG_RESULT(yes)
+    AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if you have Freetype library.])
+    save_LIBS="$LIBS"
+    LIBS="$FT2_LIBS $LIBS"
+    AC_CHECK_FUNCS([FT_Reference_Face])
+    LIBS="$save_LIBS"
+  else
+    AC_MSG_RESULT(no)
+    warn_freetype="FreeType library >= 9.03 not found.  OpenGL graphics will not be fully functional."
+  fi])
+
+if test -n "$warn_freetype"; then
+  OCTAVE_CONFIGURE_WARNING([warn_freetype])
+else
+  FT2_CPPFLAGS="$FT2_CFLAGS"
+fi
+
+## Check for Xft library (when using X11)
+
+warn_xft=""
+if test "$have_x" = yes; then
+  PKG_CHECK_MODULES(XFT, [xft],
+    [AC_DEFINE(HAVE_XFT, 1, [Define to 1 if Xft is present.])],
+    [warn_xft="Xft library not found.  OpenGL graphics will not be fully functional."])
+fi
+
+if test -n "$warn_xft"; then
+  OCTAVE_CONFIGURE_WARNING([warn_xft])
+fi
+
+## Check for fontconfig library
+
+warn_fontconfig=""
+PKG_CHECK_MODULES(FONTCONFIG, [fontconfig],
+  [AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is present.])],
+  [warn_fontconfig="Fontconfig library not found.  OpenGL graphics will not be fully functional."])
+
+if test -n "$warn_fontconfig"; then
+  OCTAVE_CONFIGURE_WARNING([warn_fontconfig])
+else
+  FONTCONFIG_CPPFLAGS="$FONTCONFIG_CFLAGS"
+fi
+
+## Check for OSMesa which is needed for offscreen rendering with OpenGL
+## FIXME: Check for version >= 9.0.0
+OCTAVE_CHECK_LIB(OSMesa, OSMesa,
+  [OSMesa library not found.  Offscreen rendering with OpenGL will be disabled.],
+  [osmesa.h GL/osmesa.h], [OSMesaCreateContext])
+
+## Check for gl2ps which is required for printing with OpenGL graphics
+
+AC_CHECK_HEADERS([gl2ps.h],
+  [GL2PS_LIBS="-lgl2ps"],
+  [warn_gl2ps="gl2ps library not found.  Printing of OpenGL graphics will be disabled."])
+
+if test -n "$warn_gl2ps"; then
+  OCTAVE_CONFIGURE_WARNING([warn_gl2ps])
+fi
+
+AC_SUBST(GL2PS_LIBS)
+
+### GUI/Qt related tests.
+
+QT_CPPFLAGS=
+QT_LDFLAGS=
+QT_LIBS=
+
+win32_terminal=no
+check_qt=yes
+build_qt_gui=no
+build_qt_graphics=no
+
+AC_ARG_ENABLE([qt],
+  [AS_HELP_STRING([--without-qt], [don't use Qt libraries; disable Qt GUI])],
+  [if test "$enableval" = no; then check_qt=no; fi], [])
+
+if test "$check_qt" = yes; then
+
+  warn_qt_libraries=""
+  ## Check for Qt libraries
+  QT_MODULES="QtCore QtGui QtNetwork QtOpenGL"
+  PKG_CHECK_MODULES(QT, [$QT_MODULES],
+    [],
+    [check_qt=no
+     warn_qt_libraries="Qt libraries not found; disabling Qt GUI"])
+
+  if test -n "$warn_qt_libraries"; then
+    OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
+  fi
+
+  if test "$check_qt" = yes; then
+    ## Retrieve Qt compilation and linker flags
+    QT_CPPFLAGS="`$PKG_CONFIG --cflags-only-I $QT_MODULES`"
+    QT_LDFLAGS="`$PKG_CONFIG --libs-only-L $QT_MODULES`"
+    QT_LIBS="`$PKG_CONFIG --libs-only-l $QT_MODULES`"
+
+    case $host_os in
+      *darwin*)
+        ## Qt might be installed in framework
+        if test -z "$QT_LIBS"; then
+          QT_LDFLAGS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -e '-F' | uniq | tr '\n' ' '`"
+          QT_LIBS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -v -e '-F' | uniq | tr '\n' ' '`"
+          ## Enabling link_all_deps works around libtool's imperfect handling
+          ## of the -F flag
+          AM_CONDITIONAL([AMCOND_LINK_ALL_DEPS],
+                         [test "$link_all_deps" = yes || test -n "$QT_LDFLAGS"])
+        fi
+      ;;
+    esac
+
+    ## Check for Qt4
+    if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
+      check_qt=no
+      warn_qt_version="Qt >= 4.0.0 not found; disabling Qt GUI"
+      OCTAVE_CONFIGURE_WARNING([warn_qt_version])
+    fi
+  fi
+
+  if test "$check_qt" = yes; then
+    warn_qt_tools=""
+    AC_CHECK_TOOLS(MOC, [moc-qt4 moc])
+    AC_CHECK_TOOLS(UIC, [uic-qt4 uic])
+    AC_CHECK_TOOLS(RCC, [rcc-qt4 rcc])
+    AC_CHECK_TOOLS(LRELEASE, [lrelease-qt4 lrelease])
+
+    if test -n "$MOC" && test -n "$UIC" && test -n "$RCC" && test -n "$LRELEASE"; then
+      AC_DEFINE(HAVE_QT, 1,
+        [Define to 1 if Qt is available (libraries, developer header files, utility programs (moc, uic, rcc, and lrelease))])
+    else
+      warn_qt_tools="Qt utility programs moc, uic, rcc, and lrelease not found; disabling Qt GUI"
+      check_qt=no
+      OCTAVE_CONFIGURE_WARNING([warn_qt_tools])
+    fi
+  fi
+
+  if test "$check_qt" = yes; then
+    warn_qt_setlocale=""
+    AC_CHECK_FUNCS([setlocale], [],
+      [check_qt=no
+       warn_qt_setlocale="setlocale not found; disabling Qt GUI"])
+
+    if test -n "$warn_qt_setlocale"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_setlocale])
+    fi
+  fi
+
+  if test "$check_qt" = yes; then
+    warn_qt_setvbuf=""
+    warn_qt_lib_fcns=""
+    case $host_os in
+      mingw* | msdosmsvc*)
+        AC_CHECK_FUNCS([setvbuf], [win32_terminal=yes],
+          [check_qt=no
+           warn_qt_setvbuf="setvbuf not found; disabling Qt GUI"])
+
+        if test -n "$warn_qt_setvbuf"; then
+          OCTAVE_CONFIGURE_WARNING([warn_qt_setvbuf])
+        fi
+      ;;
+      *)
+        AC_CHECK_HEADERS([pty.h libutil.h util.h])
+        AC_SEARCH_LIBS([openpty], [util],
+          [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
+        AC_CHECK_FUNCS([chmod chown ftruncate mmap munmap], [],
+          [check_qt=no
+           warn_qt_lib_fcns="At least one of chmod, chown, ftruncate, mmap, and munmap not found; disabling Qt GUI"])
+
+        if test -n "$warn_qt_lib_fcns"; then
+          OCTAVE_CONFIGURE_WARNING([warn_qt_lib_fcns])
+        fi
+      ;;
+    esac
+  fi
+
+  if test "$check_qt" = yes; then
+    OCTAVE_CHECK_FUNC_QABSTRACTITEMMODEL_BEGINRESETMODEL
+
+    if test "$octave_cv_func_qabstractitemmodel_beginresetmodel" = no; then
+      check_qt=no
+      warn_qt_abstract_item_model="QAbstractItemModel::beginResetModel not found; disabling Qt GUI"
+      OCTAVE_CONFIGURE_WARNING([warn_qt_abstract_item_model])
+    fi
+  fi
+
+  if test "$check_qt" = yes; then
+    ## We have what we need to build the Qt GUI.  The remaining
+    ## checks below are for optional features related to the Qt GUI.
+    build_qt_gui=yes
+  fi
+
+  if test "$check_qt" = yes; then
+    OCTAVE_CHECK_QFONT_MONOSPACE
+    OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS
+    OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
+
+    if test -n "$OPENGL_LIBS"; then
+      OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
+        [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
+
+      if test -n "$warn_qt_opengl"; then
+        OCTAVE_CONFIGURE_WARNING([warn_qt_opengl])
+      fi
+    endif
+
+      if test "$build_qt_graphics" = yes; then
+        AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
+      fi
+    fi
+
+    ## Check for Qscintilla library which is used in the Qt GUI editor.
+    AC_CACHE_CHECK([whether Qscintilla library is installed],
+      [octave_cv_lib_qscintilla],
+      [save_CPPFLAGS="$CPPFLAGS"
+      save_LDFLAGS="$LDFLAGS"
+      save_LIBS="$LIBS"
+      CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
+      LDFLAGS="$QT_LDFLAGS $LDFLAGS"
+      LIBS="$QT_LIBS -lqscintilla2"
+      AC_LANG_PUSH(C++)
+      AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+        #include <Qsci/qscilexersql.h>
+        ]], [[
+        QsciLexerSQL sqlLexer(0);
+        ]])],
+        octave_cv_lib_qscintilla=yes,
+        octave_cv_lib_qscintilla=no)
+      CPPFLAGS="$save_CPPFLAGS"
+      LDFLAGS="$save_LDFLAGS"
+      LIBS="$save_LIBS"
+      AC_LANG_POP([C++])
+    ])
+
+    if test "$octave_cv_lib_qscintilla" = no; then
+      warn_qscintilla_editor="Qscintilla library not found; disabling built-in Qt GUI editor"
+      OCTAVE_CONFIGURE_WARNING([warn_qscintilla])
+    else
+      ## Let's assume Qscintilla library is at the same location as
+      ## other regular Qt libraries.
+      QT_LIBS="$QT_LIBS -lqscintilla2"
+      OCTAVE_CHECK_VERSION_2_6_0
+      AC_DEFINE(HAVE_QSCINTILLA, 1,
+        [Define to 1 if the QScintilla library and header files are available])
+
+      save_CPPFLAGS="$CPPFLAGS"
+      CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
+      AC_LANG_PUSH(C++)
+      AC_CHECK_HEADERS([Qsci/qscilexeroctave.h Qsci/qscilexermatlab.h])
+      AC_LANG_POP(C++)
+      CPPFLAGS="$save_CPPFLAGS"
+
+      OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT
+      OCTAVE_CHECK_FUNC_QSCI_FINDSELECTION
+    fi
+  fi
+fi
+
+AC_SUBST(QT_CPPFLAGS)
+AC_SUBST(QT_LDFLAGS)
+AC_SUBST(QT_LIBS)
+
+AM_CONDITIONAL([AMCOND_BUILD_QT_GUI], [test "$build_qt_gui" = yes])
+AM_CONDITIONAL([AMCOND_BUILD_QT_GRAPHICS], [test "$build_qt_graphics" = yes])
+AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA],
+               [test "$octave_cv_lib_qscintilla" = yes])
+AM_CONDITIONAL([WIN32_TERMINAL], [test "$win32_terminal" = yes])
+
+## Check for FLTK (www.fltk.org) library
+
+check_fltk=yes
+AC_ARG_WITH([fltk],
+  [AS_HELP_STRING([--without-fltk],
+    [don't use FLTK libraries, disable OpenGL graphics with FLTK widgets])],
+  [if test x"$withval" = x"no"; then
+     check_fltk=no
+     warn_fltk="--without-fltk specified.  FLTK widgets will be disabled."
+     OCTAVE_CONFIGURE_WARNING([warn_fltk])
+   fi])
+
 FLTK_CPPFLAGS=
 FLTK_LDFLAGS=
 FLTK_LIBS=
 
-if test -z "$OPENGL_LIBS"; then
-  if test $check_opengl = yes; then
-    native_graphics=no
-    warn_fltk_opengl="OpenGL libs (GL and GLU) not found.  Native graphics will be disabled."
-    OCTAVE_CONFIGURE_WARNING([warn_fltk_opengl])
+if test $check_fltk = yes; then
+  AC_ARG_WITH([fltk-prefix],
+    [AS_HELP_STRING([--with-fltk-prefix=PFX],
+      [prefix where FLTK is installed (optional)])],
+    [fltk_prefix="$withval"],
+    [fltk_prefix=""])
+
+  AC_ARG_WITH([fltk-exec-prefix],
+    [AS_HELP_STRING([--with-fltk-exec-prefix=PFX],
+      [exec prefix where FLTK is installed (optional)])],
+    [fltk_exec_prefix="$withval"],
+    [fltk_exec_prefix=""])
+
+  if test "x$fltk_exec_prefix" != x; then
+    fltk_args="$fltk_args --exec-prefix=$fltk_exec_prefix"
+    if test "x${FLTK_CONFIG+set}" != xset ; then
+      FLTK_CONFIG="$fltk_exec_prefix/bin/fltk-config"
+    fi
   fi
-fi
-
-if test -n "$OPENGL_LIBS"; then
-  AC_DEFINE(HAVE_OPENGL, 1, [Define to 1 if OpenGL is available.])
-
-  ## Check for FreeType 2 library
-
-  PKG_CHECK_MODULES([FT2], [freetype2], [
-    min_ft2_version=9.03
-    AC_MSG_CHECKING([for FreeType2 version >= $min_ft2_version])
-    $PKG_CONFIG freetype2 --atleast-version=$min_ft2_version
-    ac_status=$?
-    if test $ac_status = 0; then
-      AC_MSG_RESULT(yes)
-      AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if you have Freetype library.])
-      save_LIBS="$LIBS"
-      LIBS="$FT2_LIBS $LIBS"
-      AC_CHECK_FUNCS([FT_Reference_Face])
-      LIBS="$save_LIBS"
-    else
-      AC_MSG_RESULT(no)
-      warn_freetype="FreeType library >= 9.03 not found.  Native graphics will be disabled."
-    fi])
-
-  if test -n "$warn_freetype"; then
-    native_graphics=no
-    OCTAVE_CONFIGURE_WARNING([warn_freetype])
-  else
-    FT2_CPPFLAGS="$FT2_CFLAGS"
-  fi
-
-  ## Check for fontconfig library
-
-  warn_fontconfig=""
-  if test $native_graphics = yes; then
-    PKG_CHECK_MODULES(FONTCONFIG, [fontconfig],
-      [have_fontconfig=yes
-       OPENGL_LIBS="$FONTCONFIG_LIBS $OPENGL_LIBS"
-       AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is present.])],
-      [have_fontconfig=no
-       warn_fontconfig="Fontconfig library not found.  Native graphics will be disabled."])
-  fi
-
-  if test -n "$warn_fontconfig"; then
-    native_graphics=no
-    OCTAVE_CONFIGURE_WARNING([warn_fontconfig])
-  else
-    FONTCONFIG_CPPFLAGS="$FONTCONFIG_CFLAGS"
-  fi
-
-  ## Check for Xft library (when using X11)
-
-  warn_xft=""
-  if test $native_graphics = yes && test "$have_x" = yes; then
-    PKG_CHECK_MODULES(XFT, [xft],
-      [AC_DEFINE(HAVE_XFT, 1, [Define to 1 if Xft is present.])],
-      [warn_xft="Xft library not found.  Native graphics will be disabled."])
-  fi
-
-  if test -n "$warn_xft"; then
-    native_graphics=no
-    OCTAVE_CONFIGURE_WARNING([warn_xft])
+
+  if test "x$fltk_prefix" != x; then
+    fltk_args="$fltk_args --prefix=$fltk_prefix"
+    if test x${FLTK_CONFIG+set} != xset ; then
+      FLTK_CONFIG="$fltk_prefix/bin/fltk-config"
+    fi
   fi
 
-  ## Check for FLTK (www.fltk.org) library
-
-  check_fltk=no
-  AC_ARG_WITH([fltk],
-    [AS_HELP_STRING([--without-fltk],
-      [don't use FLTK libraries, disable native graphics])],
-    [if test x"$withval" = x"no"; then
-       native_graphics=no
-       warn_fltk="--without-fltk specified.  Native graphics will be disabled."
-       OCTAVE_CONFIGURE_WARNING([warn_fltk])
-     else
-       check_fltk=yes
-     fi],
-    [check_fltk=yes])
-
-  if test $check_fltk = yes; then
-    AC_ARG_WITH([fltk-prefix],
-      [AS_HELP_STRING([--with-fltk-prefix=PFX],
-        [prefix where FLTK is installed (optional)])],
-      [fltk_prefix="$withval"],
-      [fltk_prefix=""])
-
-    AC_ARG_WITH([fltk-exec-prefix],
-      [AS_HELP_STRING([--with-fltk-exec-prefix=PFX],
-        [exec prefix where FLTK is installed (optional)])],
-      [fltk_exec_prefix="$withval"],
-      [fltk_exec_prefix=""])
-
-    if test x"$fltk_exec_prefix" != x""; then
-      fltk_args="$fltk_args --exec-prefix=$fltk_exec_prefix"
-      if test "x${FLTK_CONFIG+set}" != xset ; then
-        FLTK_CONFIG="$fltk_exec_prefix/bin/fltk-config"
-      fi
-    fi
-
-    if test x"$fltk_prefix" != x""; then
-      fltk_args="$fltk_args --prefix=$fltk_prefix"
-      if test x${FLTK_CONFIG+set} != xset ; then
-        FLTK_CONFIG="$fltk_prefix/bin/fltk-config"
-      fi
+  AC_PATH_PROG([FLTK_CONFIG], [fltk-config], [no])
+
+  warn_fltk_config=""
+  warn_fltk_opengl=""
+
+  if test "$FLTK_CONFIG" = no; then
+    warn_fltk_config="FLTK config script not found.  Native graphics will be disabled."
+    OCTAVE_CONFIGURE_WARNING([warn_fltk_config])
+  else
+    FLTK_CPPFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --cflags`
+    FLTK_LDFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --ldflags`
+
+    case $host_os in
+      mingw*)
+        FLTK_LDFLAGS=`echo $FLTK_LDFLAGS | $SED -e 's/-mwindows//g'`
+      ;;
+    esac
+
+    AC_CACHE_CHECK([for OpenGL support in FLTK],
+      [octave_cv_fltk_opengl_support],
+      [save_CPPFLAGS="$CPPFLAGS"
+      CPPFLAGS="$CFLAGS $FLTK_CPPFLAGS"
+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <FL/gl.h>
+        ]], [[
+        int nothing = 0;
+        ]])],
+        octave_cv_fltk_opengl_support=no,
+        octave_cv_fltk_opengl_support=yes)
+      CPPFLAGS="$save_CPPFLAGS"
+      ])
+    if test $octave_cv_fltk_opengl_support = no; then
+      warn_fltk_opengl="FLTK does not have OpenGL support.  OpenGL graphics with FLTK widgets will be disabled."
+    else
+      AC_DEFINE(HAVE_FLTK, 1, [Define to 1 if FLTK is available.])
     fi
 
-    AC_PATH_PROG([FLTK_CONFIG], [fltk-config], [no])
-
-    warn_fltk_config=""
-    warn_fltk_opengl=""
-
-    if test "$FLTK_CONFIG" = no; then
-      native_graphics=no
-      warn_fltk_config="FLTK config script not found.  Native graphics will be disabled."
-      OCTAVE_CONFIGURE_WARNING([warn_fltk_config])
-    else
-      FLTK_CPPFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --cflags`
-      FLTK_LDFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --ldflags`
-
-      case $host_os in
-        mingw*)
-          FLTK_LDFLAGS=`echo $FLTK_LDFLAGS | $SED -e 's/-mwindows//g'`
-        ;;
-      esac
-
-      AC_CACHE_CHECK([for OpenGL support in FLTK],
-        [octave_cv_fltk_opengl_support],
-        [save_CPPFLAGS="$CPPFLAGS"
-        CPPFLAGS="$CFLAGS $FLTK_CPPFLAGS"
-        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-          #include <FL/gl.h>
-          ]], [[
-          int nothing = 0;
-          ]])],
-          octave_cv_fltk_opengl_support=no,
-          octave_cv_fltk_opengl_support=yes)
-        CPPFLAGS="$save_CPPFLAGS"
-        ])
-      if test $octave_cv_fltk_opengl_support = no; then
-        warn_fltk_opengl="FLTK does not have OpenGL support.  Native graphics will be disabled."
-      else
-        AC_DEFINE(HAVE_FLTK, 1, [Define to 1 if FLTK is available.])
-      fi
-
-      if test -n "$warn_fltk_opengl"; then
-        native_graphics=no
-        OCTAVE_CONFIGURE_WARNING([warn_fltk_opengl])
-      fi
+    if test -n "$warn_fltk_opengl"; then
+      OCTAVE_CONFIGURE_WARNING([warn_fltk_opengl])
     fi
   fi
 fi
 
 AC_SUBST(FLTK_CPPFLAGS)
 AC_SUBST(FLTK_LDFLAGS)
 AC_SUBST(FLTK_LIBS)
 
-## Check for gl2ps which is required for printing with OpenGL graphics
-if test $native_graphics = yes; then
-  AC_CHECK_HEADERS([gl2ps.h],
-    [GL2PS_LIBS="-lgl2ps"],
-    [warn_gl2ps="gl2ps library not found.  OpenGL printing is disabled."
-     OCTAVE_CONFIGURE_WARNING([warn_gl2ps])])
-fi
-
-AC_SUBST(GL2PS_LIBS)
-
-if test -n "$OPENGL_LIBS"; then
-  ## Check for OSMesa which is needed for offscreen rendering with OpenGL
-  ## FIXME: Check for version >= 9.0.0
-  OCTAVE_CHECK_LIB(OSMesa, OSMesa,
-    [OSMesa library not found.  Offscreen rendering with OpenGL will be disabled.],
-    [osmesa.h GL/osmesa.h], [OSMesaCreateContext])
+if test -n "$warn_qt_opengl" && test -n "$warn_fltk_opengl"; then
+  opengl_graphics=no
+else
+  opengl_graphics=yes
 fi
 
 ### Start determination of shared vs. static libraries
 
 ## Use -static if compiling on Alpha OSF/1 1.3 systems.
 case $canonical_host_type in
   alpha*-dec-osf1.3)
     LD_STATIC_FLAG=-static
@@ -1642,17 +1827,17 @@ if test -z "$UMFPACK_LIBS"; then
     UMFPACK_LIBS="$UMFPACK_LIBS -lcblas"
   fi
   LIBS="$save_LIBS"
 fi
 
 ## Test features of the installed UMFPACK library
 
 if test -n "$UMFPACK_LIBS"; then
-  ## SuiteSparse >= 4.0 needs additional link library for SuiteSparse_time()
+  ## SuiteSparse >= 4.0 needs additional link library for SuiteSparse_time
   save_CPPFLAGS="$CPPFLAGS"
   save_LIBS="$LIBS";
   CPPFLAGS="$UMFPACK_CPPFLAGS $AMD_CPPFLAGS $CPPFLAGS"
   LIBS="$UMFPACK_LIBS $AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
   xtra_libs=
   OCTAVE_UMFPACK_NEED_SUITESPARSE_TIME
   if test $octave_cv_umfpack_need_suitesparse_time = yes; then
     AC_CHECK_LIB([rt], [clock_gettime], [xtra_libs="-lrt"], [xtra_libs=])
@@ -1694,17 +1879,17 @@ LIBS="$LAPACK_LIBS $BLAS_LIBS $FLIBS $LI
 OCTAVE_CHECK_LIB([arpack], ARPACK,
   [ARPACK not found.  The eigs function will be disabled.],
   [],
   [dseupd],
   [Fortran 77], [don't use the ARPACK library, disable eigs function],
   [warn_arpack=
    OCTAVE_CHECK_LIB_ARPACK_OK(
      [AC_DEFINE(HAVE_ARPACK, 1, [Define to 1 if ARPACK is available.])],
-     [warn_arpack="ARPACK library found, but does not seem to work properly -- disabling eigs function"])])
+     [warn_arpack="ARPACK library found, but does not seem to work properly; disabling eigs function"])])
 LIBS="$save_LIBS"
 
 ### Check for readline library.
 
 OCTAVE_ENABLE_READLINE
 
 ### Enable dynamic linking.  --enable-shared implies this, so
 ### --enable-dl is only need if you are only building static libraries
@@ -2285,17 +2470,17 @@ OCTAVE_CXX_BITWISE_OP_TEMPLATES
 OCTAVE_CXX_COMPLEX_SETTERS
 
 ## Are there functions to access real/imag parts of numbers via references?
 OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS
 
 ## Check if fast integer arithmetics based on bit tricks is available.
 OCTAVE_FAST_INT_OPS
 
-## Does the C compiler handle alloca() and const correctly?
+## Does the C compiler handle alloca and const correctly?
 AC_FUNC_ALLOCA
 
 ## Does the C compiler support Automake subdir-objects option?
 AM_PROG_CC_C_O
 
 ### gnulib initialization: part 2
 ### After all include and path modifications have taken place
 ### and at the same priority level as function checks.
@@ -2451,32 +2636,32 @@ esac
 if test $have_framework_carbon = yes; then
   OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL
 fi
 
 AC_CHECK_FUNCS([getpwnam], [], [AC_CHECK_LIB([sun], [getpwnam])])
 
 AC_FUNC_CLOSEDIR_VOID
 
-## Check return type of matherr()
+## Check return type of matherr
 AC_CACHE_CHECK([for struct exception in math.h],
   [octave_cv_func_matherr_type],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
       #include <math.h>
       ]], [[
       struct exception *x;
       x->type;
       x->name;
       ]])],
     octave_cv_func_matherr_type=yes,
     octave_cv_func_matherr_type=no)
   ])
 if test $octave_cv_func_matherr_type = yes; then
   AC_DEFINE(EXCEPTION_IN_MATH, 1,
-    [Define to 1 if math.h declares struct exception for matherr().])
+    [Define to 1 if math.h declares struct exception for matherr.])
 fi
 
 ## Signal stuff.
 
 AC_CHECK_DECLS([sys_siglist], [], [],
 [[#include <signal.h>
 /* NetBSD declares sys_siglist in unistd.h.  */
 #if HAVE_UNISTD_H
@@ -2484,23 +2669,25 @@ AC_CHECK_DECLS([sys_siglist], [], [],
 #endif
 ]])
 
 ### Need to disable building documentation if either gnuplot or
 ### makeinfo are missing.  Skip this warning if building docs was
 ### disabled with a configure option.
 
 if test $ENABLE_DOCS = yes; then
-  if test -n "$warn_gnuplot"; then
-    ENABLE_DOCS = no
-    warn_docs_gnuplot="building documentation disabled because gnuplot was not found; make dist will fail"
-    OCTAVE_CONFIGURE_WARNING([warn_docs_gnuplot])
+  if test "$opengl_graphics" = "no" || test -n "$warn_OSMesa"; then
+    if test -n "$warn_gnuplot"; then
+      ENABLE_DOCS=no
+      warn_docs_graphics="building documentation disabled because no suitable graphics toolkit is available; make dist will fail"
+        OCTAVE_CONFIGURE_WARNING([warn_docs_graphics])
+    fi
   fi
   if test -n "$warn_makeinfo"; then
-    ENABLE_DOCS = no
+    ENABLE_DOCS=no
     warn_docs_makeinfo="building documentation disabled because makeinfo was not found; make dist will fail"
     OCTAVE_CONFIGURE_WARNING([warn_docs_makeinfo])
   fi
 fi
 if test $ENABLE_DOCS = yes; then
   AC_DEFINE(ENABLE_DOCS, 1,
     [Define to 1 to build Octave documentation files.])
 fi
@@ -2883,204 +3070,32 @@ AM_CONDITIONAL([AMCOND_HAVE_JAVA], [test
 AC_SUBST(JAVA)
 AC_SUBST(JAVAC)
 AC_SUBST(JAR)
 AC_SUBST(JAVA_CPPFLAGS)
 AC_SUBST(JAVA_LIBS)
 AC_DEFINE_UNQUOTED([JAVA_HOME], ["$JAVA_HOME"], [Java home (top-level installation dir)])
 AC_DEFINE_UNQUOTED([JAVA_LDPATH], ["$JAVA_LDPATH"], [Java library path (libjvm)])
 
-### GUI/Qt related tests.
-
-QT_CPPFLAGS=
-QT_LDFLAGS=
-QT_LIBS=
-win32_terminal=no
-build_gui=yes
-AC_ARG_ENABLE([gui],
-  [AS_HELP_STRING([--disable-gui], [don't build the GUI])],
-  [if test "$enableval" = no; then build_gui=no; fi], [])
-
-if test -z "$OPENGL_LIBS"; then
-  build_gui=no
-  if test $check_opengl = yes; then
-    warn_gui="OpenGL libs (GL and GLU) not found -- disabling GUI"
-  else
-    warn_gui="--without-opengl was specified -- disabling GUI"
-  fi
-  OCTAVE_CONFIGURE_WARNING([warn_gui])
-fi
-
-if test $build_gui = yes; then
-
-  warn_gui=""
-  ## Check for Qt libraries
-  QT_MODULES="QtCore QtGui QtNetwork QtOpenGL"
-  PKG_CHECK_MODULES(QT, [$QT_MODULES],
-    [],
-    [warn_gui="Qt libraries not found -- disabling GUI"
-     build_gui=no])
-
-  if test $build_gui = yes; then
-    ## Retrieve Qt compilation and linker flags
-    QT_CPPFLAGS="`$PKG_CONFIG --cflags-only-I $QT_MODULES`"
-    QT_LDFLAGS="`$PKG_CONFIG --libs-only-L $QT_MODULES`"
-    QT_LIBS="`$PKG_CONFIG --libs-only-l $QT_MODULES`"
-
-    case $host_os in
-      *darwin*)
-        ## Qt might be installed in framework
-        if test -z "$QT_LIBS"; then
-          QT_LDFLAGS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -e '-F' | uniq | tr '\n' ' '`"
-          QT_LIBS="`$PKG_CONFIG --libs-only-other $QT_MODULES | tr ' ' '\n' | $GREP -v -e '-F' | uniq | tr '\n' ' '`"
-          ## Enabling link_all_deps works around libtool's imperfect handling
-          ## of the -F flag
-          AM_CONDITIONAL([AMCOND_LINK_ALL_DEPS],
-                         [test $link_all_deps = yes || test -n "$QT_LDFLAGS"])
-        fi
-      ;;
-    esac
-
-    ## Check for Qt4
-    if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
-      warn_gui="Qt >= 4.0.0 not found -- disabling GUI"
-      build_gui=no
-    fi
-  fi
-
-  if test $build_gui = yes; then
-    AC_CHECK_TOOLS(MOC, [moc-qt4 moc])
-    AC_CHECK_TOOLS(UIC, [uic-qt4 uic])
-    AC_CHECK_TOOLS(RCC, [rcc-qt4 rcc])
-    AC_CHECK_TOOLS(LRELEASE, [lrelease-qt4 lrelease])
-    if test -n "$MOC" && test -n "$UIC" && test -n "$RCC" && test -n "$LRELEASE"; then
-      AC_DEFINE(HAVE_QT, 1,
-        [Define to 1 if Qt is available (libraries, developer header files, utility programs (moc, uic, rcc, and lrelease))])
-    else
-      warn_gui="Qt utility programs moc, uic, rcc, and lrelease not found -- disabling GUI"
-      build_gui=no
-    fi
-  fi
-
-  if test $build_gui = yes; then
-    OCTAVE_CHECK_QT_OPENGL_OK([],
-      [warn_gui="Qt does not work with the OpenGL libs (GL and GLU) -- disabling GUI"
-       build_gui=no])
-  fi
-
-  if test $build_gui = yes; then
-    OCTAVE_CHECK_FUNC_QABSTRACTITEMMODEL_BEGINRESETMODEL
-    if test $octave_cv_func_qabstractitemmodel_beginresetmodel = no; then
-      warn_gui="QAbstractItemModel::beginResetModel() not found -- disabling GUI"
-      build_gui=no
-    fi
-  fi
-
-  if test $build_gui = yes; then
-    OCTAVE_CHECK_QFONT_MONOSPACE
-    OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS
-    OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT
-    OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
-    OCTAVE_CHECK_FUNC_QSCI_FINDSELECTION
-  fi
-
-  if test $build_gui = yes; then
-    ## Check for Qscintilla library which is used in the GUI editor.
-    AC_CACHE_CHECK([whether Qscintilla library is installed],
-      [octave_cv_lib_qscintilla],
-      [save_CPPFLAGS="$CPPFLAGS"
-      save_LDFLAGS="$LDFLAGS"
-      save_LIBS="$LIBS"
-      CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
-      LDFLAGS="$QT_LDFLAGS $LDFLAGS"
-      LIBS="$QT_LIBS -lqscintilla2"
-      AC_LANG_PUSH(C++)
-      AC_LINK_IFELSE([AC_LANG_PROGRAM([[
-        #include <Qsci/qscilexersql.h>
-        ]], [[
-        QsciLexerSQL sqlLexer(0);
-        ]])],
-        octave_cv_lib_qscintilla=yes,
-        octave_cv_lib_qscintilla=no)
-      CPPFLAGS="$save_CPPFLAGS"
-      LDFLAGS="$save_LDFLAGS"
-      LIBS="$save_LIBS"
-      AC_LANG_POP([C++])
-    ])
-    if test $octave_cv_lib_qscintilla = no; then
-      warn_gui_editor="Qscintilla library not found -- disabling built-in GUI editor"
-      OCTAVE_CONFIGURE_WARNING([warn_gui_editor])
-    else
-      ## Let's assume Qscintilla library is at the same location as
-      ## other regular Qt libraries.
-      QT_LIBS="$QT_LIBS -lqscintilla2"
-      OCTAVE_CHECK_VERSION_2_6_0
-      AC_DEFINE(HAVE_QSCINTILLA, 1,
-        [Define to 1 if the QScintilla library and header files are available])
-
-      save_CPPFLAGS="$CPPFLAGS"
-      CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
-      AC_LANG_PUSH(C++)
-      AC_CHECK_HEADERS([Qsci/qscilexeroctave.h Qsci/qscilexermatlab.h])
-      AC_LANG_POP(C++)
-      CPPFLAGS="$save_CPPFLAGS"
-    fi
-
-    AC_CHECK_FUNCS([setlocale], [],
-      [warn_gui="setlocale not found -- disabling GUI"
-       build_gui=no])
-
-    if test $build_gui = yes; then
-      case $host_os in
-        mingw* | msdosmsvc*)
-          AC_CHECK_FUNCS([setvbuf], [win32_terminal=yes],
-            [warn_gui="setvbuf not found -- disabling GUI"
-             build_gui=no])
-        ;;
-        *)
-          AC_CHECK_HEADERS([pty.h libutil.h util.h])
-          AC_SEARCH_LIBS([openpty], [util],
-            [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
-          AC_CHECK_FUNCS([chmod chown ftruncate mmap munmap], [],
-            [AC_MSG_ERROR([At least one of chmod, chown, ftruncate, mmap, and munmap not found -- disabling GUI])
-             build_gui=no])
-        ;;
-      esac
-    fi
-  fi
-
-  if test -n "$warn_gui"; then
-    OCTAVE_CONFIGURE_WARNING([warn_gui])
-  fi
-fi
-
-AM_CONDITIONAL([AMCOND_BUILD_GUI], [test $build_gui = yes])
-AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA],
-               [test "$octave_cv_lib_qscintilla" = yes])
-AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
-AC_SUBST(QT_CPPFLAGS)
-AC_SUBST(QT_LDFLAGS)
-AC_SUBST(QT_LIBS)
-
-# do we want to create cross-mkoctfile etc ?
+### Do we want to create cross-mkoctfile etc ?
+
 cross_tools=no
 AC_ARG_ENABLE([cross-tools],
   [AS_HELP_STRING([--enable-cross-tools],
     [build cross tools (mkoctfile, octave-config) if cross compiling])],
   [if test "$enableval" = yes; then cross_tools=yes; fi])
 
 if test "$cross_tools" = yes; then
   if test "$cross_compiling" = no; then
     AC_MSG_WARN([ignoring --enable-cross-tools when not cross compiling])
     cross_tools=no
   fi
 fi
 AM_CONDITIONAL([AMCOND_CROSS_TOOLS], [test $cross_tools = yes])
 
-
 ### Decide whether or not to install build logs with Octave.
 
 install_build_logs=no
 AC_ARG_ENABLE([install-build-logs],
   [AS_HELP_STRING([--enable-install-build-logs],
     [install build logs (e.g. config.log) with Octave])],
   [if test "$enableval" = yes; then install_build_logs=yes; fi])
 AM_CONDITIONAL([AMCOND_INSTALL_BUILD_LOGS], [test $install_build_logs = yes])
@@ -3218,17 +3233,17 @@ Octave is now configured for $canonical_
   X11 libraries:               $X11_LIBS
   Z CPPFLAGS:                  $Z_CPPFLAGS
   Z LDFLAGS:                   $Z_LDFLAGS
   Z libraries:                 $Z_LIBS
 
   Default pager:               $DEFAULT_PAGER
   gnuplot:                     $GNUPLOT
 
-  Build Octave GUI:                   $build_gui
+  Build Octave Qt GUI:                $build_qt_gui
   JIT compiler for loops:             $ENABLE_JIT
   Build Java interface:               $build_java
   Do internal array bounds checking:  $ENABLE_BOUNDS_CHECK
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:   $USE_READLINE
   64-bit array dims and indexing:     $ENABLE_64
@@ -3239,16 +3254,17 @@ Octave is now configured for $canonical_
 ])
 
 warn_msg_printed=false
 
 OCTAVE_CONFIGURE_WARNING_SUMMARY
 
 if test $ENABLE_DYNAMIC_LINKING = yes; then
   if test $SHARED_LIBS = no; then
+    AC_MSG_WARN([])
     AC_MSG_WARN([You used --enable-dl but not --enable-shared.])
     AC_MSG_WARN([Are you sure that is what you want to do?])
     warn_msg_printed=true
   fi
 fi
 
 if test $ENABLE_64 = yes; then
   AC_MSG_WARN([])
@@ -3258,62 +3274,33 @@ if test $ENABLE_64 = yes; then
   AC_MSG_WARN([Your Fortran compiler must have an option to generate])
   AC_MSG_WARN([code with 8 byte signed INTEGER values.  This option])
   AC_MSG_WARN([should be specified in the F77_INTEGER_8_FLAG variable])
   AC_MSG_WARN([Make.  This should work automatically for gfortran.  If])
   AC_MSG_WARN([you use another compiler, you will need to set this])
   AC_MSG_WARN([variable on the configure command line.  You must also])
   AC_MSG_WARN([compile the ARPACK, BLAS, LAPACK, QRUPDATE, and SuiteSparse])
   AC_MSG_WARN([libraries to use 8 byte signed integers for array indexing.])
-  AC_MSG_WARN([])
-  warn_msg_printed=true
-fi
-
-if test $native_graphics != yes; then
-  AC_MSG_WARN([])
-  AC_MSG_WARN([I didn't find the necessary libraries to compile native])
-  AC_MSG_WARN([graphics.  It isn't necessary to have native graphics,])
-  AC_MSG_WARN([but you will need to have gnuplot installed or you won't])
-  AC_MSG_WARN([be able to use any of Octave's plotting commands])
-  AC_MSG_WARN([])
   warn_msg_printed=true
 fi
 
-if test -n "$warn_gnuplot"; then
-  if test $native_graphics = yes; then
-    AC_MSG_WARN([])
-    AC_MSG_WARN([I didn't find gnuplot.  Plotting commands will use the])
-    AC_MSG_WARN([native graphics toolkit.])
-  else
-    AC_MSG_WARN([I didn't find gnuplot.  It isn't necessary to have gnuplot])
-    AC_MSG_WARN([installed, but you won't be able to use any of Octave's])
-    AC_MSG_WARN([plotting commands without it.])
-  fi
+if test "$opengl_graphics" = "no"; then
   AC_MSG_WARN([])
-  AC_MSG_WARN([If gnuplot is installed, but isn't in your path, you can])
-  AC_MSG_WARN([tell Octave where to find it by using the gnuplot_binary])
-  AC_MSG_WARN([function.  For example,])
-  AC_MSG_WARN([])
-  AC_MSG_WARN([gnuplot_binary ("/full/path/and/name/of/gnuplot/binary")])
-  AC_MSG_WARN([])
-  AC_MSG_WARN([at the Octave prompt.])
-  AC_MSG_WARN([])
-  AC_MSG_WARN([Setting default value to $GNUPLOT])
-  AC_MSG_WARN([])
-
+  AC_MSG_WARN([I didn't find the libraries needed to compile Octave])
+  AC_MSG_WARN([with support for OpenGL graphics.  Creating plots is])
+  AC_MSG_WARN([still possible if you have gnpulot installed.])
   warn_msg_printed=true
 fi
 
 if test $ENABLE_ATOMIC_REFCOUNT = no; then
   AC_MSG_WARN([])
   AC_MSG_WARN([atomic reference counting disabled.])
   AC_MSG_WARN([This feature allows access to Octave data safely from])
   AC_MSG_WARN([another thread, and is required when using the GUI's Qt toolkit])
   AC_MSG_WARN([for plotting.])
-  AC_MSG_WARN([])
 fi
 
 if $warn_msg_printed; then
   AC_MSG_NOTICE([])
   AC_MSG_NOTICE([NOTE: Libraries or auxiliary programs may be skipped if they are])
   AC_MSG_NOTICE([NOTE: not found OR if they are missing required features on your])
   AC_MSG_NOTICE([NOTE: system. ])
 fi
diff --git a/libgui/graphics/module.mk b/libgui/graphics/module.mk
--- a/libgui/graphics/module.mk
+++ b/libgui/graphics/module.mk
@@ -1,8 +1,10 @@
+if AMCOND_BUILD_QT_GRAPHICS
+
 OCTAVE_GUI_GRAPHICS_MOC = \
   libgui/graphics/moc-annotation-dialog.cc \
   libgui/graphics/moc-Backend.cc \
   libgui/graphics/moc-ButtonControl.cc \
   libgui/graphics/moc-ContextMenu.cc \
   libgui/graphics/moc-EditControl.cc \
   libgui/graphics/moc-Figure.cc \
   libgui/graphics/moc-FigureWindow.cc \
@@ -156,8 +158,10 @@ libgui_EXTRA_DIST += \
   libgui/graphics/images/zoom-in.png \
   libgui/graphics/images/zoom-out.png \
   $(octave_gui_graphics_UI)
 
 libgui_CLEANFILES += \
   $(octave_gui_graphics_MOC) \
   $(octave_gui_graphics_RC) \
   $(octave_gui_graphics_UI_H)
+
+endif
diff --git a/libgui/link-deps.mk b/libgui/link-deps.mk
--- a/libgui/link-deps.mk
+++ b/libgui/link-deps.mk
@@ -1,9 +1,9 @@
-if AMCOND_BUILD_GUI
+if AMCOND_BUILD_QT_GUI
 
 if AMCOND_ENABLE_DYNAMIC_LINKING
   LIBOCTGUI_LINK_DEPS =
 else
   LIBOCTGUI_LINK_DEPS = $(DLDFCN_LIBS)
 endif
 
 LIBOCTGUI_LINK_DEPS += \
diff --git a/libgui/module.mk b/libgui/module.mk
--- a/libgui/module.mk
+++ b/libgui/module.mk
@@ -1,9 +1,9 @@
-if AMCOND_BUILD_GUI
+if AMCOND_BUILD_QT_GUI
 
 libgui_EXTRA_DIST =
 
 libgui_CLEANFILES =
 libgui_DISTCLEANFILES =
 libgui_MAINTAINERCLEANFILES =
 
 MOC_CPPFLAGS =
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -49,17 +49,20 @@ along with Octave; see the file COPYING.
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "main-window.h"
 #include "octave-gui.h"
 #include "thread-manager.h"
 
 #include "builtin-defun-decls.h"
-#include "__init_qt__.h"
+
+#if defined (HAVE_QT_GRAPHICS)
+#  include "__init_qt__.h"
+#endif
 
 // Allow the Octave interpreter to start as in CLI mode with a
 // QApplication context so that it can use Qt for things like plotting
 // and UI widgets.
 
 class octave_cli_thread : public QThread
 {
 public:
@@ -105,19 +108,21 @@ octave_start_gui (int argc, char *argv[]
   octave_thread_manager::block_interrupt_signal ();
 
   std::string show_gui_msgs = octave_env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
   // Installing our handler suppresses the messages.
   if (show_gui_msgs.empty ())
     qInstallMsgHandler (message_handler);
 
+#if defined (HAVE_QT_GRAPHICS)
   install___init_qt___functions ();
 
   Fregister_graphics_toolkit (ovl ("qt"));
+#endif
 
   QApplication application (argc, argv);
   QTranslator gui_tr, qt_tr, qsci_tr;
 
   // Set the codec for all strings (before wizard)
 #if ! defined (Q_OS_WIN32)
   QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
 #endif
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 
 To initialize:
 
   graphics_toolkit ("fltk");
   plot (randn (1e3, 1));
 
 */
 
-// PKG_ADD: if (__have_fltk__ () && have_window_system ()) register_graphics_toolkit ("fltk"); endif
+// PKG_ADD: if (__have_feature__ ("FLTK") && __have_feature__ ("OPENGL") && have_window_system ()) register_graphics_toolkit ("fltk"); endif
 
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
 #endif
 
 #include "builtin-defun-decls.h"
 #include "defun-dld.h"
 #include "error.h"
@@ -111,18 +111,22 @@ left double click - autoscale\n\
 
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), renderer (),
       in_zoom (false), zoom_box ()
   {
+#if defined (HAVE_OPENGL)
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE | FL_MULTISAMPLE);
+#else
+  err_disabled_feature ("OpenGL_fltk", "OpenGL");
+#endif
   }
 
   ~OpenGL_fltk (void) { }
 
   void zoom (bool z)
   {
     in_zoom = z;
     if (! in_zoom)
@@ -136,17 +140,26 @@ public:
   {
     //std::cout << "OpenGL_fltk::print(cmd=" << cmd << ", term=" << term << ") canvas size = " << w () << "x" << h () << std::endl;
 
     gl2ps_print (gh_manager::get_object (number), cmd, term);
   }
 
   void resize (int xx, int yy, int ww, int hh)
   {
+#if defined (HAVE_OPENGL)
+
     Fl_Gl_Window::resize (xx, yy, ww, hh);
+
+#else
+  // This shouldn't happen because construction of Opengl_fltk
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
   }
 
   bool renumber (double new_number)
   {
     bool retval = false;
 
     if (number != new_number)
       {
@@ -161,40 +174,60 @@ private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
   // (x1,y1,x2,y2)
   Matrix zoom_box;
 
   void draw (void)
   {
+#if defined (HAVE_OPENGL)
+
     if (! valid ())
       {
         glMatrixMode (GL_PROJECTION);
         glLoadIdentity ();
         glViewport (0, 0, w (), h ());
       }
 
     renderer.draw (gh_manager::get_object (number));
 
     if (zoom ())
       overlay ();
+
+#else
+  // This shouldn't happen because construction of Opengl_fltk
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
   }
 
   void zoom_box_vertex (void)
   {
+#if defined (HAVE_OPENGL)
+
     glVertex2d (zoom_box(0), h () - zoom_box(1));
     glVertex2d (zoom_box(0), h () - zoom_box(3));
     glVertex2d (zoom_box(2), h () - zoom_box(3));
     glVertex2d (zoom_box(2), h () - zoom_box(1));
     glVertex2d (zoom_box(0), h () - zoom_box(1));
+
+#else
+  // This shouldn't happen because construction of Opengl_fltk
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
   }
 
   void overlay (void)
   {
+#if defined (HAVE_OPENGL)
+
     glPushMatrix ();
 
     glMatrixMode (GL_MODELVIEW);
     glLoadIdentity ();
 
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
     gluOrtho2D (0.0, w (), 0.0, h ());
@@ -210,31 +243,48 @@ private:
     glBegin (GL_LINE_STRIP);
     glLineWidth (1.5);
     glColor4f (0.45, 0.62, 0.81, 0.9);
     zoom_box_vertex ();
     glEnd ();
 
     glPopAttrib ();
     glPopMatrix ();
+
+#else
+  // This shouldn't happen because construction of Opengl_fltk
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
   }
 
   int handle (int event)
   {
+#if defined (HAVE_OPENGL)
+
     switch (event)
       {
       case FL_ENTER:
         cursor (FL_CURSOR_CROSS);
         return 1;
 
       case FL_LEAVE:
         cursor (FL_CURSOR_DEFAULT);
         return 1;
       }
+
     return Fl_Gl_Window::handle (event);
+
+#else
+  // This shouldn't happen because construction of Opengl_fltk
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
   }
 };
 
 void script_cb (Fl_Widget*, void* data)
 {
   static_cast<uimenu::properties*> (data)->execute_callback ();
 }
 
@@ -2384,25 +2434,8 @@ Undocumented internal function.\n\
     }
 
   return ovl ();
 
 #else
   err_disabled_feature ("__init_fltk__", "OpenGL and FLTK");
 #endif
 }
-
-DEFUN_DLD (__have_fltk__, , ,
-           "-*- texinfo -*-\n\
-@deftypefn {} {@var{FLTK_available} =} __have_fltk__ ()\n\
-Undocumented internal function.\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-#ifdef HAVE_FLTK
-  retval = true;
-#else
-  retval = false;
-#endif
-
-  return retval;
-}
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -38,17 +38,17 @@ from git://anongit.freedesktop.org/mesa/
 
 #include "defun-dld.h"
 #include "errwarn.h"
 #include "gl-render.h"
 #include "gl2ps-print.h"
 #include "graphics.h"
 #include "oct-opengl.h"
 
-#if defined (HAVE_OSMESA) && defined (HAVE_OPENGL)
+#if defined (HAVE_OSMESA)
 
 static void
 reset_visibility (figure::properties *fp)
 {
   fp->set_visible ("on");
 }
 
 #endif
@@ -79,19 +79,18 @@ Use GL2PS_SIMPLE_SORT instead of GL2PS_B
 Don't render text.\n\
 @end table\n\
 \n\
 The second method doesn't use gl2ps and returns a RGB image in @var{img}\n\
 instead.\n\
 \n\
 @end deftypefn")
 {
-#ifndef HAVE_OSMESA
-  err_disabled_feature ("__osmesa_print__", "offscreen rendering with OSMesa");
-#else
+#if defined (HAVE_OSMESA)
+
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
 
   if (nargin == 3)
     {
       if (! (args(1).is_string () && args(2).is_string ()))
@@ -189,16 +188,21 @@ instead.\n\
       // Remove alpha channel
       idx(2) = idx_vector (0, 3);
       retval = octave_value (img.permute (perm). index(idx));
     }
 
   OSMesaDestroyContext (ctx);
 
   return retval;
+
+#else
+
+  err_disabled_feature ("__osmesa_print__", "offscreen rendering with OSMesa");
+
 #endif
 }
 
 /*
 ## FIXME: osmesa does not work correctly on Windows platforms.
 ##        This is not critical, since this facility will mostly be used in
 ##        the future for generating the images in Octave's own documentation.
 ##        For the moment, disable these tests on PC's and Macs.
diff --git a/libinterp/link-deps.mk b/libinterp/link-deps.mk
--- a/libinterp/link-deps.mk
+++ b/libinterp/link-deps.mk
@@ -5,16 +5,18 @@ else
 endif
 
 LIBOCTINTERP_LINK_DEPS += \
   $(FT2_LIBS) \
   $(HDF5_LIBS) \
   $(Z_LIBS) \
   $(FFTW_XLIBS) \
   $(OPENGL_LIBS) \
+  $(FONTCONFIG_LIBS) \
+  $(FREETYPE_LIBS) \
   $(X11_LIBS) \
   $(CARBON_LIBS) \
   $(GL2PS_LIBS) \
   $(LLVM_LIBS) \
   $(JAVA_LIBS) \
   $(LAPACK_LIBS)
 
 LIBOCTINTERP_LINK_OPTS = \
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -469,22 +469,22 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_SETPLACEHOLD
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_setplaceholdertext = yes; then
     AC_DEFINE(HAVE_SETPLACEHOLDERTEXT, 1,
       [Define to 1 if you have the Qt SetPlaceholderText function.])
   fi
 ])
 dnl
-dnl Check whether the Qt QAbstractItemModel::beginResetModel() function exists.
-dnl Also checks for QAbstractItemModel::endResetModel().  These are two of the
+dnl Check whether the Qt QAbstractItemModel::beginResetModel function exists.
+dnl Also checks for QAbstractItemModel::endResetModel.  These are two of the
 dnl newest Qt functions that the Octave GUI depends on, added in Qt 4.6.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QABSTRACTITEMMODEL_BEGINRESETMODEL], [
-  AC_CACHE_CHECK([whether Qt has the QAbstractItemModel::beginResetModel() function],
+  AC_CACHE_CHECK([whether Qt has the QAbstractItemModel::beginResetModel function],
     [octave_cv_func_qabstractitemmodel_beginresetmodel],
     [AC_LANG_PUSH(C++)
     ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <QAbstractItemModel>
         class item_model : public QAbstractItemModel
         {
@@ -512,21 +512,21 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QABSTRACTITE
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qabstractitemmodel_beginresetmodel = yes; then
     AC_DEFINE(HAVE_QABSTRACTITEMMODEL_BEGINRESETMODEL, 1,
       [Define to 1 if Qt has the QAbstractItemModel::beginResetModel() function.])
   fi
 ])
 dnl
-dnl Check whether the Qt QTabWidget::setMovable() function exists.
+dnl Check whether the Qt QTabWidget::setMovable function exists.
 dnl This function was added in Qt 4.5.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE], [
-  AC_CACHE_CHECK([whether Qt has the QTabWidget::setMovable() function],
+  AC_CACHE_CHECK([whether Qt has the QTabWidget::setMovable function],
     [octave_cv_func_qtabwidget_setmovable],
     [AC_LANG_PUSH(C++)
     ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <QTabWidget>
         class tab_widget : public QTabWidget
         {
@@ -539,25 +539,25 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QTABWIDGET_S
         ]])],
       octave_cv_func_qtabwidget_setmovable=yes,
       octave_cv_func_qtabwidget_setmovable=no)
     CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qtabwidget_setmovable = yes; then
     AC_DEFINE(HAVE_QTABWIDGET_SETMOVABLE, 1,
-      [Define to 1 if Qt has the QTabWidget::setMovable() function.])
+      [Define to 1 if Qt has the QTabWidget::setMovable function.])
   fi
 ])
 dnl
-dnl Check whether the QsciScintilla::findFirstInSelection () function exists.
+dnl Check whether the QsciScintilla::findFirstInSelection function exists.
 dnl This function was added in QScintilla 2.7.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QSCI_FINDSELECTION], [
-  AC_CACHE_CHECK([whether QSci has the QsciScintilla::findFirstInSelection () function],
+  AC_CACHE_CHECK([whether QSci has the QsciScintilla::findFirstInSelection function],
     [octave_cv_func_qsci_findfirstinselection],
     [AC_LANG_PUSH(C++)
     ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <Qsci/qsciscintilla.h>
         class qsci : public QsciScintilla
         {
@@ -571,17 +571,17 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QSCI_FINDSEL
         ]])],
       octave_cv_func_qsci_findfirstinselection=yes,
       octave_cv_func_qsci_findfirstinselection=no)
     CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qsci_findfirstinselection = yes; then
     AC_DEFINE(HAVE_QSCI_FINDSELECTION, 1,
-      [Define to 1 if Qsci has the QsciScintilla::findFirstInSelection () function.])
+      [Define to 1 if Qsci has the QsciScintilla::findFirstInSelection function.])
   fi
 ])
 dnl
 dnl Check whether HDF5 library has version 1.6 API functions.
 dnl
 AC_DEFUN([OCTAVE_CHECK_HDF5_HAS_VER_16_API], [
   AC_CACHE_CHECK([whether HDF5 library has enforced version 1.6 API],
     [octave_cv_hdf5_has_ver_16_api],
@@ -1021,30 +1021,33 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
             #elif defined (HAVE_OPENGL_GL_H)
             # include <OpenGL/gl.h>
             #endif
             ]], [[
             glEnable(GL_SMOOTH);
             ]])], [OPENGL_LIBS="-lopengl32 -lglu32"])
 
           LIBS="$save_LIBS"
-          if test "x$OPENGL_LIBS" != "x"; then
+          if test -n "$OPENGL_LIBS"; then
             AC_MSG_RESULT([yes])
           else
             AC_MSG_RESULT([no])
           fi
           ;;
         *)
           ## Non-Mac, Non-Windows systems use this check
           AC_CHECK_LIB([GL], [glEnable], [OPENGL_LIBS="-lGL -lGLU"])
           ;;
       esac
     fi
   fi
   AC_SUBST(OPENGL_LIBS)
+  if test -n "$OPENGL_LIBS"; then
+    AC_DEFINE(HAVE_OPENGL, 1, [Define to 1 if OpenGL is available.])
+  fi
 ])
 dnl
 dnl Check whether Qhull works (does not crash).
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_QHULL_OK], [
   AC_CACHE_CHECK([whether the qhull library works],
     [octave_cv_lib_qhull_ok],
     [AC_RUN_IFELSE([AC_LANG_PROGRAM([[
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -58,17 +58,17 @@ along with Octave; see the file COPYING.
 #  define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
 #include "display-available.h"
 #include "shared-fcns.h"
 
 #include <cstdlib>
 
-#if (defined (HAVE_OCTAVE_GUI) \
+#if (defined (HAVE_OCTAVE_QT_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
 #include <signal.h>
 #include <fcntl.h>
 
 // This is a liboctave header, but it doesn't include any other Octave
 // headers or declare any functions that are defined in liboctave.
 #include "syswait.h"
@@ -431,17 +431,17 @@ main (int argc, char **argv)
   bool gui_libs = true;
 
   std::string octave_bindir = get_octave_bindir ();
   std::string octave_archlibdir = get_octave_archlibdir ();
   std::string octave_cli
     = octave_bindir + dir_sep_char + "octave-cli-" OCTAVE_VERSION;
   std::string octave_gui = octave_archlibdir + dir_sep_char + "octave-gui";
 
-#if defined (HAVE_OCTAVE_GUI)
+#if defined (HAVE_OCTAVE_QT_GUI)
   // The Octave version number is already embedded in the
   // octave_archlibdir directory name so we don't need to append it to
   // the octave-gui filename.
 
   std::string file = octave_gui;
 #else
   std::string file = octave_cli;
 #endif
@@ -514,17 +514,17 @@ main (int argc, char **argv)
     }
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   file += ".exe";
 #endif
 
   new_argv[0] = strsave (file.c_str ());
 
-#if (defined (HAVE_OCTAVE_GUI) \
+#if (defined (HAVE_OCTAVE_QT_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
   if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
       gui_pid = fork ();
 
diff --git a/src/module.mk b/src/module.mk
--- a/src/module.mk
+++ b/src/module.mk
@@ -38,17 +38,17 @@ OCTAVE_INTERPRETER_TARGETS += \
   $(OCTAVE_VERSION_LINKS)
 
 noinst_HEADERS += \
   src/display-available.h	\
   src/shared-fcns.h
 
 OCTAVE_VERSION_LINKS += src/octave-cli-$(version)$(EXEEXT)
 
-if AMCOND_BUILD_GUI
+if AMCOND_BUILD_QT_GUI
   archlib_PROGRAMS += src/octave-gui
   OCTAVE_VERSION_LINKS += src/octave-gui-$(version)$(EXEEXT)
 
   OCTAVE_INTERPRETER_TARGETS += src/octave-gui$(EXEEXT)
 endif
 
 OCTAVE_CORE_LIBS = \
   libinterp/liboctinterp.la \
@@ -63,18 +63,18 @@ src_octave_LDADD = \
   $(CARBON_LIBS) \
   $(GNULIB_LINK_DEPS)
 
 src_octave_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
   $(OCTAVE_LINK_OPTS) \
   $(WARN_LDFLAGS)
 
-if AMCOND_BUILD_GUI
-  OCTAVE_CPPFLAGS = -DHAVE_OCTAVE_GUI
+if AMCOND_BUILD_QT_GUI
+  OCTAVE_CPPFLAGS = -DHAVE_OCTAVE_QT_GUI
 endif
 
 src_octave_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
 
 src_octave_CXXFLAGS = \
   $(AM_CXXFLAGS) \
@@ -94,17 +94,17 @@ src_octave_cli_LDFLAGS = \
 src_octave_cli_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
 
 src_octave_cli_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
 
-if AMCOND_BUILD_GUI
+if AMCOND_BUILD_QT_GUI
   src_octave_gui_SOURCES = src/main-gui.cc
   OCTAVE_GUI_LIBS = libgui/liboctgui.la
   OCTAVE_GUI_CPPFLAGS = -I$(srcdir)/libgui/src
 endif
 
 src_octave_gui_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_GUI_CPPFLAGS)
