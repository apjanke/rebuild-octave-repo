# HG changeset patch
# User jwe
# Date 1198173216 0
#      Thu Dec 20 17:53:36 2007 +0000
# Node ID 55f35e469c43745ef7e00277097a3e089bc83bf3
# Parent  bf3fb3477d2a7637d47873e101108219845bfd1c
[project @ 2007-12-20 17:53:36 by jwe]

diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -530,19 +530,22 @@ make it a full matrix, and so the exampl
 
 @example
 speye(3) + 0
 @result{}   1  0  0
   0  1  0
   0  0  1
 @end example
 
-returns a full matrix as can be seen. Additionally all sparse functions
-test the amount of memory occupied by the sparse matrix to see if the 
-amount of storage used is larger than the amount used by the full 
+returns a full matrix as can be seen. 
+
+
+Additionally, if @code{sparse_auto_mutate} is true, all sparse functions
+test the amount of memory occupied by the sparse matrix to see if the
+amount of storage used is larger than the amount used by the full
 equivalent. Therefore @code{speye (2) * 1} will return a full matrix as
 the memory used is smaller for the full version than the sparse version.
 
 As all of the mixed operators and functions between full and sparse 
 matrices exist, in general this does not cause any problems. However,
 one area where it does cause a problem is where a sparse matrix is
 promoted to a full matrix, where subsequent operations would resparsify
 the matrix. Such cases are rare, but can be artificially created, for
@@ -559,16 +562,21 @@ depending on the type of its input argum
  a = diag (sparse([1,2,3]), -1);
 @end example
 
 should return a sparse matrix. To ensure this actually happens, the
 @dfn{sparse} function, and other functions based on it like @dfn{speye}, 
 always returns a sparse matrix, even if the memory used will be larger 
 than its full representation.
 
+@DOCSTRING(sparse_auto_mutate)
+
+Note that the @code{sparse_auto_mutate} option is incompatible with
+@sc{Matlab}, and so it is off by default.
+
 @node MathConsiderations, , ReturnType, Operators and Functions
 @subsubsection Mathematical Considerations
 
 The attempt has been made to make sparse matrices behave in exactly the
 same manner as there full counterparts. However, there are certain differences
 and especially differences with other products sparse implementations.
 
 Firstly, the "./" and ".^" operators must be used with care. Consider what
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -408,17 +408,17 @@ endfunction
 ## default author.  If form==0 return the login name.
 ## login@host will be the default email address.
 
 function ret = default_user (long_form)
 
   ent = getpwuid (getuid);
   if (! isstruct (ent))
     ret = getenv ("USER");
-    if (isempty ())
+    if (isempty (ret))
       ret = getenv ("USERNAME");
     endif
   elseif (long_form)
     ret = ent.gecos;
   else
     ret = ent.name;
   endif
 
