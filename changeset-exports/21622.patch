# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1460281790 -36000
#      Sun Apr 10 19:49:50 2016 +1000
# Node ID fed1111e18998c34546a4ebecf88be039b754a17
# Parent  fe0a6de805e4f09160ded882f0ec5c49500c792c
textscan: eliminate ReturnOnError="continue" mode (bug #47538)

* oct-stream.cc
  (textscan_format_list::read_first_row, textscan::scan_one)
    No longer skip failed fields.
  (textscan::do_scan): Do not terminate on no_conversions.
  (textscan::read_format_once): Only "fail" if field wasn't empty.
  (textscan::parse_options): No longer parse "continue" option.

* file-io.cc (Ftextscan): Update docstring and self-tests.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1332,18 +1332,17 @@ characters after the decimal point to be
 skipped.  For example, the specifier %8.2f would read 12.345e6 as 1.234e7.\n\
 \n\
 @item %*@dots{}\n\
 The word specified by the remainder of the conversion specifier is skipped.\n\
 \n\
 @item literals\n\
 In addition the format may contain literal character strings; these will be\n\
 skipped during reading.  If the input string does not match this literal,\n\
-the processing terminates, unless @qcode{\"ReturnOnError\"} is set to\n\
-@qcode{\"continue\"}.\n\
+the processing terminates.\n\
 @end table\n\
 \n\
 Parsed words corresponding to the first specifier are returned in the first\n\
 output argument and likewise for the rest of the specifiers.\n\
 \n\
 By default, if there is only one input argument, @var{format} is @t{\"%f\"}.\n\
 This means that numbers are read from the input into a single column vector.\n\
 If @var{format} is explicitly empty (@qcode{\"\"}) then textscan will\n\
@@ -1451,20 +1450,18 @@ considered to end with an empty value, b
 of a line causes the line to be considered to start with an empty value.\n\
 \n\
 @item @qcode{\"TreatAsEmpty\"}\n\
 Treat single occurrences (surrounded by delimiters or whitespace) of the\n\
 string(s) in @var{value} as missing values.\n\
 \n\
 @item @qcode{\"ReturnOnError\"}\n\
 If set to numerical 1 or true, return normally as soon as an error is\n\
-encountered, such as trying to read a string using @qcode{%f}.  If set to 0\n\
-or false, return an error and no data.  If set to @qcode{\"continue\"}\n\
-(default), textscan attempts to continue reading beyond the location;\n\
-however, this may cause the parsing to get out of sync.\n\
+encountered, such as trying to read a string using @qcode{%f}.\n\
+If set to 0 or false, return an error and no data.\n\
 \n\
 @item @qcode{\"Whitespace\"}\n\
 Any character in @var{value} will be interpreted as whitespace and trimmed;\n\
 The default value for whitespace is\n\
 @c Note: the next line specifically has a newline which generates a space\n\
 @c       in the output of qcode, but keeps the next line < 80 characters.\n\
 @qcode{\"\n\
 @xbackslashchar{}b@xbackslashchar{}r@xbackslashchar{}n@xbackslashchar{}t\"}\n\
@@ -1685,28 +1682,23 @@ as the name of the function when reporti
 
 %!test
 %! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! str = "1 2 3\n4 s 6";
 %! fprintf (fid, str);
 %! fseek (fid, 0, "bof");
-%! c = textscan (fid, "%f %f %f");
-%! fseek (fid, 0, "bof");
-%! d = textscan (fid, "%f %f %f", "ReturnOnError", 1);
+%! c = textscan (fid, "%f %f %f", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
-%! u = textscan (str, "%f %f %f");
-%! v = textscan (str, "%f %f %f", "ReturnOnError", 1);
-%! assert (c, {[1;4], [2;NaN], [3;6]});
-%! assert (d, {[1;4], [2], [3]});
-%! assert (u, {[1;4], [2;NaN], [3;6]});
-%! assert (v, {[1;4], [2], [3]});
+%! u = textscan (str, "%f %f %f", "ReturnOnError", 1);
+%! assert (c, {[1;4], [2], [3]});
+%! assert (u, {[1;4], [2], [3]});
 
 %!test
 %! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! str = "1 2 3\n4 s 6\n";
 %! fprintf (fid, str);
 %! fseek (fid, 0, "bof");
@@ -1721,24 +1713,21 @@ as the name of the function when reporti
 %!error <Read error in field 2 of row 2> textscan ("1 2 3\n4 s 6", "%f %f %f", "ReturnOnError", 0)
 
 %!test
 %! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1 s 3\n4 5 6");
 %! fseek (fid, 0, "bof");
-%! c = textscan (fid, "");
-%! fseek (fid, 0, "bof");
-%! d = textscan (fid, "", "ReturnOnError", 1);
+%! c = textscan (fid, "", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
-%! assert (c, {[1;4], [NaN;5], [3;6]});
-%! assert (d, {1});
+%! assert (c, {1});
 
 %!test
 %! ## Check ReturnOnError with empty fields
 %! c = textscan ("1,,3\n4,5,6", "", "Delimiter", ",", "ReturnOnError", 1);
 %! assert (c, {[1;4], [NaN;5], [3;6]});
 
 %!test
 %! ## Check ReturnOnError with empty fields
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2454,41 +2454,25 @@ textscan_format_list::read_first_row (de
       ts.scan_complex (ds, *fmt_elts[0], val);
       if (ds.fail ())
         {
           ds.clear (ds.rdstate () & ~std::ios::failbit);
 
           if (ds.eof ())
             break;
 
-          // If we don't continue after a conversion error, then
-          // unless this was a missing value (i.e., followed by a delimiter),
+          // Unless this was a missing value (i.e., followed by a delimiter),
           // return with an error status.
-          if (ts.return_on_error < 2)
+          ts.skip_delim (ds);
+          if (ds.no_progress ())
             {
-              ts.skip_delim (ds);
-              if (ds.no_progress ())
-                {
-                  retval = 4;
-                  break;
-                }
-              already_skipped_delim = true;
+              retval = 4;
+              break;
             }
-          else  // skip offending field
-            {
-              std::ios::iostate state = ds.rdstate ();
-              ds.clear ();          // clear to allow read pointer to advance
-
-              std::string dummy;
-              textscan_format_elt fe ("", first_line.length ());
-              ts.scan_string (ds, fe, dummy);
-
-              progress = (dummy.length ());
-              ds.setstate (state);
-            }
+          already_skipped_delim = true;
 
           val = ts.empty_value.scalar_value ();
 
           if (! --max_empty)
             break;
         }
 
       if (val.imag () == 0)
@@ -2529,17 +2513,17 @@ init_inf_nan (void)
 
 textscan::textscan (const std::string& who_arg)
   : who (who_arg), buf (), whitespace_table (), delim_table (),
     delims (), comment_style (), comment_len (0), comment_char (-2),
     buffer_size (0), date_locale (), inf_nan (init_inf_nan ()),
     empty_value (octave_NaN), exp_chars ("edED"),
     header_lines (0), treat_as_empty (), treat_as_empty_len (0),
     whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
-    return_on_error (2), collect_output (false),
+    return_on_error (1), collect_output (false),
     multiple_delims_as_one (false), default_exp (true),
     numeric_delim (false), lines (0)
 { }
 
 octave_value
 textscan::scan (std::istream& isp, const std::string& fmt,
                 octave_idx_type ntimes, const octave_value_list& options,
                 octave_idx_type& count)
@@ -2669,17 +2653,17 @@ textscan::do_scan (std::istream& isp, te
               for (std::list<octave_value>::iterator col = out.begin ();
                    col != out.end (); col++)
                 *col = (*col).resize (dim_vector (size, 1), 0);
             }
 
           row_idx(0) = row;
           err = read_format_once (is, fmt_list, out, row_idx, done_after);
 
-          if (err > 0 || ! is || (lines >= ntimes && ntimes > -1))
+          if ((err & ~1) > 0 || ! is || (lines >= ntimes && ntimes > -1))
             break;
         }
     }
 
   if ((err & 4) && ! return_on_error)
     error ("%s: Read error in field %d of row %d", who.c_str (),
            done_after + 1, row + 1);
 
@@ -3388,34 +3372,18 @@ textscan::scan_one (delimited_stream& is
                   {
                     octave_uint8 vv = v;
                     ov.internal_rep ()->fast_elem_insert (row(0), vv);
                   }
                 break;
               }
         }
 
-      if (is.fail ())
-        {
-          if (! fmt.discard)
-            ov = do_cat_op (ov, empty_value, row);
-
-          // If we are continuing after errors, skip over this field
-          if (return_on_error == 2)
-            {
-              std::ios::iostate state = is.rdstate ();
-              is.clear ();          // clear to allow read pointer to advance
-
-              std::string dummy;
-              scan_string (is, fmt, dummy);
-
-              is.setstate (state);
-            }
-        }
-
+      if (is.fail () & ! fmt.discard)
+        ov = do_cat_op (ov, empty_value, row);
     }
   else
     {
       std::string vv ("        ");      // initial buffer.  Grows as needed
       switch (fmt.type)
         {
         case 's':
           scan_string (is, fmt, vv);
@@ -3505,20 +3473,20 @@ textscan::read_format_once (delimited_st
 
       if (! is.fail ())
         {
           if (! elem->discard)
             no_conversions = false;
         }
       else
         {
-          if (return_on_error < 2)
+          is.clear (is.rdstate () & ~std::ios::failbit);
+
+          if (!is.eof () && ~is_delim (is.peek ()))
             this_conversion_failed = true;
-
-          is.clear (is.rdstate () & ~std::ios::failbit);
         }
 
       if (! elem->discard)
         out++;
 
       elem = fmt_list.next ();
       char *pos = is.tellg ();
 
@@ -3691,20 +3659,17 @@ textscan::parse_options (const octave_va
           buffer_size = args(i+1).xscalar_value ("%s: BufSize must be numeric", who.c_str ());
         }
       else if (param == "multipledelimsasone")
         {
           multiple_delims_as_one = args(i+1).xbool_value ("%s: MultipleDelimsAsOne must be logical or numeric", who.c_str ());
         }
       else if (param == "returnonerror")
         {
-          if (args(i+1).is_string () && args(i+1).string_value () == "continue")
-            return_on_error = 2;
-          else
-            return_on_error = args(i+1).xbool_value ("%s: ReturnOnError must be logical, numeric, or the string \"continue\"", who.c_str ());
+          return_on_error = args(i+1).xbool_value ("%s: ReturnOnError must be logical or numeric", who.c_str ());
         }
       else if (param == "whitespace")
         {
           whitespace = args(i+1).xstring_value ("%s: Whitespace must be a character string", who.c_str ());
         }
       else if (param == "expchars")
         {
           exp_chars = args(i+1).xstring_value ("%s: ExpChars must be a character string", who.c_str ());
