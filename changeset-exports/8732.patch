# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234467463 18000
#      Thu Feb 12 14:37:43 2009 -0500
# Node ID a669df7beb7354fbd7e981f64368f78b019d81d6
# Parent  5abe5ae55465c7944b06d8181af40143e0c83e3a
[mq]: x

diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -56,16 +56,28 @@ Cell::Cell (const string_vector& sv, boo
 	      s = (pos == std::string::npos) ? "" : s.substr (0, pos+1);
 	    }
 
 	  elem(i,0) = s;
 	}
     }
 }
 
+Cell::Cell (const Array<std::string>& sa)
+  : ArrayN<octave_value> (sa.dims ())
+{
+  octave_idx_type n = sa.numel ();
+
+  octave_value *dst = fortran_vec ();
+  const std::string *src = sa.data ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    dst[i] = src[i];
+}
+
 // Set size to DV, filling with [].  Then fill with as many elements of
 // SV as possible.
 
 Cell::Cell (const dim_vector& dv, const string_vector& sv, bool trim)
   : ArrayN<octave_value> (dv, resize_fill_value ())
 {
   octave_idx_type n = sv.length ();
 
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -59,16 +59,18 @@ public:
   Cell (const Array<octave_value>& c)
     : ArrayN<octave_value> (c) { }
 
   Cell (const Array<octave_value>& c, octave_idx_type nr, octave_idx_type nc)
     : ArrayN<octave_value> (c, dim_vector (nr, nc)) { }
 
   Cell (const string_vector& sv, bool trim = false);
 
+  Cell (const Array<std::string>& sa);
+
   Cell (const dim_vector& dv, const string_vector& sv, bool trim = false);
 
   Cell (const Cell& c)
     : ArrayN<octave_value> (c) { }
 
   bool is_cellstr (void) const;
 
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,22 @@
 2009-02-12  John W. Eaton  <jwe@octave.org>
 
+	* TEMPLATE-INST/Array-tc.cc: Don't instantiate sort functions for
+	Arrays of octave_value objects.
+	(octave_sort<octave_value>::ascending_compare,
+	octave_sort<octave_value>::descending_compare): Delete.
+
+	* ov.h (octave_value::cellstr_value): New function.
+	* ov-base.cc, ov-base.h (octave_base_value::cellstr_value):
+	New function.
+	* ov-cell.h (octave_cell::cellstr_value, octave_cell::sort,
+	octave_cell::sortrows_idx): New functions
+	* Cell.h, Cell.cc (Cell::Cell (Array<std::string>)): New constructor.
+
 	* TEMPLATE-INST/Array-tc.cc: Undo previous change.
 	(octave_sort<octave_value>::ascending_compare,
 	octave_sort<octave_value>::descending_compare):
 	Pass args by const reference instead of value.
 
 	* version.h (OCTAVE_VERSION): Now 3.1.52+.
 	(OCTAVE_API_VERSION): Now api-v34+.
 
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -30,41 +30,21 @@ along with Octave; see the file COPYING.
 #include "Array.h"
 #include "Array.cc"
 
 #include "Array2.h"
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
-#include "DiagArray2.h"
-#include "DiagArray2.cc"
-
 #include "oct-obj.h"
 
 #include "oct-sort.cc"
 
-// FIXME -- these comparisons don't look right.  Where do we sort
-// octave_value objects and expect them to be character strings?
-
-template <>
-bool
-octave_sort<octave_value>::ascending_compare (const octave_value& a, const octave_value& b)
-{
-  return (a.string_value () < b.string_value ());
-}
-
-template <>
-bool
-octave_sort<octave_value>::descending_compare (const octave_value& a, const octave_value& b)
-{
-  return (a.string_value () > b.string_value ());
-}
-
-INSTANTIATE_ARRAY_SORT (octave_value);
+NO_INSTANTIATE_ARRAY_SORT (octave_value);
 
 INSTANTIATE_ARRAY (octave_value, OCTINTERP_API);
 
 template class OCTINTERP_API Array2<octave_value>;
 
 template class OCTINTERP_API ArrayN<octave_value>;
 
 /*
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -773,16 +773,25 @@ octave_base_value::string_value (bool fo
   octave_value tmp = convert_to_str (force);
 
   if (! error_state)
     retval = tmp.string_value ();
 
   return retval;
 }
 
+Array<std::string>
+octave_base_value::cellstr_value (void) const
+{
+  Array<std::string> retval;
+  gripe_wrong_type_arg ("octave_base_value::cellstry_value()",
+			type_name ());
+  return retval;
+}
+
 Range
 octave_base_value::range_value (void) const
 {
   Range retval;
   gripe_wrong_type_arg ("octave_base_value::range_value()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -427,16 +427,18 @@ public:
   virtual uint32NDArray uint32_array_value (void) const;
 
   virtual uint64NDArray uint64_array_value (void) const;
 
   virtual string_vector all_strings (bool pad = false) const;
 
   virtual std::string string_value (bool force = false) const;
 
+  virtual Array<std::string> cellstr_value (void) const;
+
   virtual Range range_value (void) const;
 
   virtual Octave_map map_value (void) const;
 
   virtual string_vector map_keys (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -382,16 +382,68 @@ octave_cell::byte_size (void) const
   size_t retval = 0;
 
   for (octave_idx_type i = 0; i < numel (); i++)
     retval += matrix(i).byte_size ();
 
   return retval;
 }
 
+octave_value
+octave_cell::sort (octave_idx_type dim, sortmode mode) const
+{
+  octave_value retval;
+
+  if (is_cellstr ())
+    {
+      Array<std::string> tmp = cellstr_value ();
+
+      retval = Cell (tmp.sort (dim, mode));
+    }
+  else
+    error ("sort: only cell arrays of character strings may be sorted");
+  
+  return retval;
+}
+
+octave_value
+octave_cell::sort (Array<octave_idx_type> &sidx, octave_idx_type dim,
+		   sortmode mode) const
+{
+  octave_value retval;
+
+  if (is_cellstr ())
+    {
+      Array<std::string> tmp = cellstr_value ();
+
+      retval = Cell (tmp.sort (sidx, dim, mode));
+    }
+  else
+    error ("sort: only cell arrays of character strings may be sorted");
+  
+  return retval;
+}
+
+Array<octave_idx_type>
+octave_cell::sortrows_idx (sortmode mode) const
+{
+  Array<octave_idx_type> retval;
+
+  if (is_cellstr ())
+    {
+      Array<std::string> tmp = cellstr_value ();
+
+      retval = tmp.sort_rows_idx (mode);
+    }
+  else
+    error ("sortrows: only cell arrays of character strings may be sorted");
+  
+  return retval;
+}
+
 bool
 octave_cell::is_true (void) const
 {
   error ("invalid conversion from cell array to logical value");
   return false;
 }
 
 octave_value_list
@@ -455,16 +507,37 @@ octave_cell::all_strings (bool pad) cons
 	retval[k++] = std::string (max_len, ' ');
       else
 	retval[k++] = std::string ();
     }
 
   return retval;
 }
 
+Array<std::string>
+octave_cell::cellstr_value (void) const
+{
+  Array<std::string> retval (dims ());
+
+  if (is_cellstr ())
+    {
+      octave_idx_type n = numel ();
+
+      std::string *dst = retval.fortran_vec ();
+      const octave_value *src = matrix.data ();
+
+      for (octave_idx_type i = 0; i < n; i++)
+	dst[i] = src[i].string_value ();
+    }
+  else
+    error ("invalid conversion from cell array to Array<std::string>");
+
+  return retval;
+}
+
 bool
 octave_cell::print_as_scalar (void) const
 {
   return (ndims () > 2 || numel () == 0);
 }
 
 void
 octave_cell::print (std::ostream& os, bool) const
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -83,16 +83,23 @@ public:
                         bool auto_add);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   size_t byte_size (void) const;
 
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
+
+  octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
+		     sortmode mode = ASCENDING) const;
+
+  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const;
+
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
@@ -106,16 +113,18 @@ public:
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
     { return octave_value (all_strings (pad), type); }
 
   string_vector all_strings (bool pad = false) const;
 
+  Array<std::string> cellstr_value (void) const;
+
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 
   bool save_ascii (std::ostream& os);
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -789,16 +789,19 @@ public:
     { return rep->uint64_array_value (); }
 
   string_vector all_strings (bool pad = false) const
     { return rep->all_strings (pad); }
 
   std::string string_value (bool force = false) const
     { return rep->string_value (force); }
 
+  Array<std::string> cellstr_value (void) const
+    { return rep->cellstr_value (); }
+
   Range range_value (void) const
     { return rep->range_value (); }
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const
     { return rep->map_keys (); }
 
