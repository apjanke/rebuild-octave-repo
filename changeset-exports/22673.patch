# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477523516 25200
#      Wed Oct 26 16:11:56 2016 -0700
# Node ID 7c45d565d1b70c4ab2c40c23a0b10607c5ac493d
# Parent  305706823a2d11cd8d318ca9a432e26409505643
odeplot.m: Accept multiple input times (bug #49449).

* odeplot.m: Remove no longer used idx variable.  Store ode data using
concatenation which allows the input to contain multiple values.
Change the plot marker to 'o' for compatibility.

diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -70,41 +70,38 @@
 ## actions required.
 ## @seealso{odeset, odeget, ode23, ode45}
 ## @end deftypefn
 
 function stop_solve = odeplot (t, y, flag)
 
   ## No input argument checking is done for better performance
   persistent hlines num_lines told yold;
-  persistent idx = 1;   # Don't remove.  Required for Octave parser.
 
   ## odeplot never stops the integration
   stop_solve = false;
 
   if (isempty (flag))
     ## Default case, plot and return a value
-    idx += 1;
-    told(idx,1) = t(1,1);
-    yold(:,idx) = y(:,1);
+    told = [told; t(:)];
+    yold = [yold, y];
     for i = 1:num_lines
       set (hlines(i), "xdata", told, "ydata", yold(i,:));
     endfor
     drawnow;
 
     retval = false;
 
   elseif (strcmp (flag, "init"))
     ## t is either the time slot [tstart tstop] or [t0, t1, ..., tn]
     ## y is the initial value vector for the ode solution
-    idx = 1;
-    told = t(1,1);
+    told = t(1);
     yold = y(:,1);
     figure ();
-    hlines = plot (told, yold, "-", "marker", ".", "markersize", 9);
+    hlines = plot (told, yold, "o-");
     xlim ([t(1), t(end)]);  # Fix limits which also speeds up plotting
     num_lines = numel (hlines);
 
   elseif (strcmp (flag, "done"))
     ## Cleanup after ode solver has finished.
     hlines = num_lines = told = yold = idx = [];
 
   endif
