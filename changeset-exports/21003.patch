# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451349008 28800
#      Mon Dec 28 16:30:08 2015 -0800
# Node ID b51078f0788664e4082f27d39c1cd958fea18c7b
# Parent  314245afff3a55c585e962b2015e1dd363d3d9ba
num2str.m: Expand ND-arrays in columns for Matlab compatibility (bug #46770).

* num2str.m: Use repmat to produce format for sprintf which has all dimensions
greater than 2 printed as columns.  Use permute to move columens and all higher
dimensions to first position for call to sprintf.  Add BIST tests for correct
behavior.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -112,27 +112,27 @@ function retval = num2str (x, arg)
         endif
       else
         ## Logical input
         fmt = "%3d";
       endif
     endif
     fmt = do_string_escapes (fmt);  # required now that '\n' is interpreted.
     nd = ndims (x);
-    nc = columns (x);
-    x  = permute (x, [2, 1, 3:nd]);
+    nc = columns (x) * (nd - 1);    # ND-arrays are expanded in columns
+    x  = permute (x, [2, 3:nd, 1]);
     if (! (sum (fmt == "%") > 1 || any (strcmp (fmt, {"%s", "%c"}))))
       fmt = [deblank(repmat (fmt, 1, nc)), "\n"];
     endif
     tmp    = sprintf (fmt, x);
     retval = strtrim (char (ostrsplit (tmp, "\n", true)));
   else   # Complex matrix input
     if (nargin == 2)
       if (ischar (arg))
-        fmt = [arg "%-+" arg(2:end) "i"];
+        fmt = [deblank(arg) "%-+" arg(2:end) "i"];
       elseif (isnumeric (arg) && isscalar (arg) && arg >= 0 && arg == fix (arg))
         fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", arg+7, arg, arg+7, arg);
       else
         error ("num2str: PRECISION must be a scalar integer >= 0");
       endif
     else
       ## Setup a suitable format string
       dgt = floor (log10 (max (max (abs (real (x(! isinf (real (x(:))))))),
@@ -153,27 +153,27 @@ function retval = num2str (x, arg)
         ## FIXME: Integers should be masked to show only 16 significant digits
         ##        See %!xtest below
         fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", dgt+2, dgt, dgt+2, dgt);
       endif
     endif
 
     ## Manipulate the complex value to have real values in the odd
     ## columns and imaginary values in the even columns.
+    nd = ndims (x);
     nc = columns (x);
-    nd = ndims (x);
     idx = repmat ({':'}, nd, 1);
     perm(1:2:2*nc) = 1:nc;
     perm(2:2:2*nc) = nc + (1:nc);
     idx{2} = perm;
     x = horzcat (real (x), imag (x));
     x = x(idx{:});
-
-    fmt = [deblank(repmat(fmt, 1, nc)), "\n"];
-    tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
+    
+    fmt = [deblank(repmat(fmt, 1, nc * (nd - 1))), "\n"];
+    tmp = sprintf (fmt, permute (x, [2, 3:nd, 1]));
 
     ## Put the "i"'s where they are supposed to be.
     tmp = regexprep (tmp, " +i\n", "i\n");
     tmp = regexprep (tmp, "( +)i", "i$1");
 
     retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
   endif
 
@@ -199,16 +199,41 @@ endfunction
 %!assert (num2str (complex(1,Inf)), "1+Infi")
 %!assert (num2str (nan), "NaN")
 %!assert (num2str (complex (NaN, 1)), "NaN+1i")
 %!assert (num2str (complex (1, NaN)), "1+NaNi")
 %!assert (num2str (NA), "NA")
 %!assert (num2str (complex (NA, 1)), "NA+1i")
 %!assert (num2str (complex (1, NA)), "1+NAi")
 
+## ND-arrays are concatenated in columns
+%!shared m, x
+%! m = magic (3);
+%! x = cat (3, m, -m);
+
+## real case
+%!test
+%! y = num2str (x);
+%! assert (rows (y) == 3);
+%! assert (y, ["8   1   6  -8  -1  -6"
+%!             "3   5   7  -3  -5  -7"
+%!             "4   9   2  -4  -9  -2"]);
+
+## complex case
+%!test
+%! x(1,1,2) = -8+2i;
+%! y = num2str (x);
+%! assert (rows (y) == 3);
+%! assert (y, ["8+0i   1+0i   6+0i  -8+2i  -1+0i  -6+0i"
+%!             "3+0i   5+0i   7+0i  -3+0i  -5+0i  -7+0i"
+%!             "4+0i   9+0i   2+0i  -4+0i  -9+0i  -2+0i"]);
+
+## Clear shared variables
+%!shared
+
 ## FIXME: Integers greater than flintmax() - 1 should be masked to show just
 ##        16 digits of precision.
 %!xtest
 %! assert (num2str (1e23), "100000000000000000000000");
 
 ## Test for bug #44864, extra rows generated from newlines in format
 %!assert (rows (num2str (magic (3), '%3d %3d %3d\n')), 3)
 
