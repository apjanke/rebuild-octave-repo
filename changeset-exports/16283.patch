# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363036668 14400
#      Mon Mar 11 17:17:48 2013 -0400
# Node ID 9a85870f2bc1fc3dee36f3e6a0f66fd23b4bcf6f
# Parent  1bbc2fc552cfe1393b6178799c850389bdea5edb
delete unused class and unused functions

* lex.h, lex.ll (flex_stream_reader): Delete unused class.
(octave_lexer::next_token_can_follow_bin_op): Delete.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1424,40 +1424,16 @@ Undocumented internal function.\n\
   octave_value retval;
 
   retval = set_internal_variable (lexer_debug_flag, args, nargout,
                                   "__lexer_debug_flag__");
 
   return retval;
 }
 
-class
-flex_stream_reader : public stream_reader
-{
-public:
-  flex_stream_reader (octave_lexer *l, char *buf_arg)
-    : stream_reader (), lexer (l), buf (buf_arg)
-  { }
-
-  int getc (void) { return lexer->text_yyinput (); }
-  int ungetc (int c) { lexer->xunput (c, buf); return 0; }
-
-private:
-
-  // No copying!
-
-  flex_stream_reader (const flex_stream_reader&);
-
-  flex_stream_reader& operator = (const flex_stream_reader&);
-
-  octave_lexer *lexer;
-
-  char *buf;
-};
-
 lexical_feedback::~lexical_feedback (void)
 {
   tokens.clear ();
 }
 
 void
 lexical_feedback::init (void)
 {
@@ -2435,45 +2411,16 @@ octave_lexer::handle_close_bracket (int 
     }
 
   pop_start_state ();
 
   return retval;
 }
 
 bool
-octave_lexer::next_token_can_follow_bin_op (void)
-{
-  std::stack<char> buf;
-
-  int c = EOF;
-
-  // Skip whitespace in current statement on current line
-  while (true)
-    {
-      c = text_yyinput ();
-
-      buf.push (c);
-
-      if (match_any (c, ",;\n") || (c != ' ' && c != '\t'))
-        break;
-    }
-
-  // Restore input.
-  while (! buf.empty ())
-    {
-      xunput (buf.top ());
-
-      buf.pop ();
-    }
-
-  return (isalnum (c) || match_any (c, "!\"'(-[_{~"));
-}
-
-bool
 octave_lexer::looks_like_command_arg (void)
 {
   bool space_before = space_follows_previous_token ();
   bool space_after = looking_at_space ();
 
   return (space_before && ! space_after
           && previous_token_may_be_command ());
 }
