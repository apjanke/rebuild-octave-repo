# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1507181554 -7200
#      Thu Oct 05 07:32:34 2017 +0200
# Node ID 16c8ec7f08673405feaabd503f23809570ef15ca
# Parent  813b1385f85ddc7ea1ed83e9d35362604a6fa194
do not move the cursor when saving a file with breakpoints (bug #51793)

* file-editor-tab.h: new counter for the number of breakpoints that have to
  be restored during file saving;

* file-editor-tab.cc (file_editor_tab): initialize new counter for breakpoints
  that have to be restored to zero;
  (goto_line): if breakpoints are restored, just decrement counter and return;
  (check_restore_breakpoints): set the counter of breakpoints to restore

* file-editor.cc (request_open_file): request going to the breakpoint line
  only if the breakpoint is inserted, not if it is removed

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -102,16 +102,17 @@ file_editor_tab::file_editor_tab (const 
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
   _line = 0;
   _col  = 0;
 
   _bp_lines.clear ();      // start with empty lists of breakpoints
   _bp_conditions.clear ();
+  m_bp_restore_count = 0;
 
   // disable editor drag & drop so parent can handle
   _edit_area->setAcceptDrops (false);
 
   connect (_edit_area, SIGNAL (cursorPositionChanged (int, int)),
            this, SLOT (handle_cursor_moved (int,int)));
 
   connect (_edit_area, SIGNAL (SCN_CHARADDED (int)),
@@ -1325,16 +1326,24 @@ file_editor_tab::find_previous (const QW
 }
 
 void
 file_editor_tab::goto_line (const QWidget *ID, int line)
 {
   if (ID != this)
     return;
 
+  if (m_bp_restore_count > 0)
+    {
+      // This goto-line request is invoked by restoring a breakpoint during
+      // saving the file, thus, do not go to the related line
+      m_bp_restore_count--;
+      return;
+    }
+
   if (line <= 0)  // ask for desired line
     {
       bool ok = false;
       int index;
       _edit_area->getCursorPosition (&line, &index);
       line = QInputDialog::getInt (_edit_area, tr ("Goto line"),
                                    tr ("Line number"), line+1, 1,
                                    _edit_area->lines (), 1, &ok);
@@ -1620,16 +1629,17 @@ file_editor_tab::check_restore_breakpoin
 {
   if (! _bp_lines.isEmpty ())
     {
       // At least one breakpoint is present.
       // Get rid of breakpoints at old (now possibly invalid) linenumbers
       remove_all_breakpoints (this);
 
       // and set breakpoints at the new linenumbers
+      m_bp_restore_count = _bp_lines.length ();
       for (int i = 0; i < _bp_lines.length (); i++)
         handle_request_add_breakpoint (_bp_lines.value (i) + 1,
                                        _bp_conditions.value (i));
 
      // Keep the list of breakpoints empty, except after explicit requests.
       _bp_lines.clear ();
       _bp_conditions.clear ();
     }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -302,12 +302,13 @@ private:
 
   int _line_break;
   bool _line_break_comments;
   int _line;
   int _col;
   bool _lines_changed;
   bool _highlight_all_occurrences;
   int _indicator_highlight_all;
+  int m_bp_restore_count;
 
 };
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1342,17 +1342,18 @@ file_editor::request_open_file (const QS
       QWidget *tab = find_tab_widget (openFileName);
 
       if (tab)
         {
           m_tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
             {
-              emit fetab_goto_line (tab, line);
+              if (insert)
+                emit fetab_goto_line (tab, line);
 
               if (debug_pointer)
                 emit fetab_insert_debugger_pointer (tab, line);
 
               if (breakpoint_marker)
                 emit fetab_do_breakpoint_marker (insert, tab, line, cond);
             }
 
@@ -1394,17 +1395,18 @@ file_editor::request_open_file (const QS
                   fileEditorTab->update_window_title (false);
                   // file already loaded, add file to mru list here
                   QFileInfo file_info = QFileInfo (openFileName);
                   handle_mru_add_file (file_info.canonicalFilePath (),
                                        encoding);
 
                   if (line > 0)
                     {
-                      emit fetab_goto_line (fileEditorTab, line);
+                      if (insert)
+                        emit fetab_goto_line (fileEditorTab, line);
 
                       if (debug_pointer)
                         emit fetab_insert_debugger_pointer (fileEditorTab,
                                                             line);
                       if (breakpoint_marker)
                         emit fetab_do_breakpoint_marker (insert, fileEditorTab,
                                                          line, cond);
                     }
