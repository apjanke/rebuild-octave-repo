# HG changeset patch
# User Rik <rik@octave.org>
# Date 1535406192 25200
#      Mon Aug 27 14:43:12 2018 -0700
# Node ID 6784059127f5c44767d2b894fa852c64fa479fbc
# Parent  bd473c0cc34bfeaf79ca348877690a0d944e5395
get_first_help_sentence.m: Add ellipsis "..." to end of help text if it was truncated.

* get_first_help_sentence.m: Update docstring to describe new return text.
* get_first_help_sentence.m (first_sentence_plain_text): Implement if/else tree
and add "..." to end of help text if the text has been truncated.

diff --git a/scripts/help/get_first_help_sentence.m b/scripts/help/get_first_help_sentence.m
--- a/scripts/help/get_first_help_sentence.m
+++ b/scripts/help/get_first_help_sentence.m
@@ -20,17 +20,19 @@
 ## @deftypefn  {} {@var{text} =} get_first_help_sentence (@var{name})
 ## @deftypefnx {} {@var{text} =} get_first_help_sentence (@var{name}, @var{max_len})
 ## @deftypefnx {} {[@var{text}, @var{status}] =} get_first_help_sentence (@dots{})
 ## Return the first sentence of a function's help text.
 ##
 ## The first sentence is defined as the text after the function declaration
 ## until either the first period (".") or the first appearance of two
 ## consecutive newlines ("\n\n").  The text is truncated to a maximum length of
-## @var{max_len}, which defaults to 80.
+## @var{max_len}, which defaults to 80.  If the text must be truncated the last
+## three characters of the text are replaced with @qcode{"..."} to indicate
+## that more text was available.
 ##
 ## The optional output argument @var{status} returns the status reported by
 ## @code{makeinfo}.  If only one output argument is requested, and @var{status}
 ## is nonzero, a warning is displayed.
 ##
 ## As an example, the first sentence of this help text is
 ##
 ## @example
@@ -83,17 +85,28 @@ endfunction
 ## This function extracts the first sentence from a plain text help text
 function [text, status] = first_sentence_plain_text (help_text, max_len)
   ## Extract first line by searching for a period followed by a space class
   ## character (to support periods in numbers or words) ...
   period_idx = regexp (help_text, '\.\s', "once");
   ## ... or a double end-of-line (we subtract 1 because we are not interested
   ## in capturing the first newline).
   line_end_idx = regexp (help_text, "\n\n", "once") - 1;
-  text = help_text (1:min ([period_idx; line_end_idx; max_len; length(help_text)]));
+  help_len = length (help_text);
+  min_idx = min ([period_idx, line_end_idx, help_len]);
+  if (min_idx < max_len)
+    text = help_text(1:min_idx);
+  else
+    if (max_len > 3)
+      text = help_text(1:(max_len-3));
+      text = [text, "..."];
+    else
+      text = help_text(1:max_len);
+    endif
+  endif
   status = 0;
 endfunction
 
 ## This function extracts the first sentence from a Texinfo help text.
 ## The function works by removing @def* from the texinfo text.  After this, we
 ## render the text to plain text using makeinfo, and then extract the first
 ## line.
 function [text, status] = first_sentence_texinfo (help_text, max_len)
@@ -153,15 +166,18 @@ function [text, status] = first_sentence
   ## Extract first line with plain text method.
   text = first_sentence_plain_text (help_text, max_len);
 endfunction
 
 
 %!assert (get_first_help_sentence ('get_first_help_sentence'), ...
 %!        "Return the first sentence of a function's help text.")
 
+%!assert (get_first_help_sentence ('get_first_help_sentence', 28), ...
+%!        "Return the first sentence...")
+
 ## Test input validation
 %!error get_first_help_sentence ()
 %!error get_first_help_sentence (1, 2, 3)
 %!error <NAME must be a string> get_first_help_sentence (1)
 %!error <MAX_LEN must be positive integer> get_first_help_sentence ("ls", "a")
 %!error <MAX_LEN must be positive integer> get_first_help_sentence ("ls", 0)
 %!error <MAX_LEN must be positive integer> get_first_help_sentence ("ls", 80.1)
