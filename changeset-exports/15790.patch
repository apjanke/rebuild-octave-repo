# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355507497 28800
#      Fri Dec 14 09:51:37 2012 -0800
# Node ID 921912c921026e5d33ebef5871c7637a25f236c2
# Parent  8056d0e36bef7dc6d262ba32729329d76c669c23
Deprecate java_invoke, replace with javaMethod.
Update all m-files to use javaMethod.

* scripts/deprecated/java_invoke.m: New m-file with warning about function
being deprecated.

* libinterp/octave-value/ov-java.cc(Fjava_invoke, FjavaMethod): Remove
java_invoke.  Replace body of javaMethod with old java_invoke code.

* libinterp/octave-value/ov-java.cc(do_java_invoke): Rename to do_javaMethod.

* libinterp/octave-value/ov-java.cc(do_java_create): Rename to do_javaObject.


* libinterp/octave-value/ov-java.h(do_java_invoke, do_java_create): Rename
prototypes for functions to do_javaMethod and do_javaObject respectively.

* scripts/deprecated/javafields.m, scripts/deprecated/javamethods.m,
scripts/deprecated/module.mk, scripts/general/fieldnames.m,
scripts/general/methods.m, scripts/java/errordlg.m, scripts/java/helpdlg.m,
scripts/java/inputdlg.m, scripts/java/javaArray.m, scripts/java/javaaddpath.m,
scripts/java/javaclasspath.m, scripts/java/javamem.m,
scripts/java/javarmpath.m, scripts/java/listdlg.m, scripts/java/msgbox.m,
scripts/java/questdlg.m, scripts/java/warndlg.m: Replace java_invoke calls
with javaMethod calls.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -68,18 +68,16 @@ extern "C"
 
   JNIEXPORT void JNICALL
   Java_org_octave_Octave_doEvalString (JNIEnv *, jclass, jstring);
 
   JNIEXPORT jboolean JNICALL
   Java_org_octave_Octave_needThreadedInvokation (JNIEnv *, jclass);
 }
 
-static octave_value _java_invoke (const octave_value_list& args);
-
 static JavaVM *jvm = 0;
 static bool jvm_attached = false;
 
 // Need to keep hold of the shared library handle until exit.
 static octave_shlib jvm_lib;
 
 static std::map<int,octave_value> listener_map;
 static std::map<int,octave_value> octave_ref_map;
@@ -1395,61 +1393,16 @@ instance.\n\
 {
   octave_value retval;
 
   terminate_jvm ();
 
   return retval;
 }
 
-// internally called from java_invoke and javaMethod.
-
-static octave_value
-_java_invoke (const octave_value_list& args)
-{
-  octave_value retval;
-
-  initialize_java ();
-
-  if (! error_state)
-    {
-      JNIEnv *current_env = octave_java::thread_jni_env ();
-
-      if (args.length () > 1)
-        {
-          std::string methodname = args(1).string_value ();
-          if (! error_state)
-            {
-              octave_value_list tmp;
-              for (int i=2; i<args.length (); i++)
-                tmp(i-2) = args(i);
-
-              if (args(0).class_name () == "octave_java")
-                {
-                  octave_java *jobj = TO_JAVA (args(0));
-                  retval = jobj->do_java_invoke (current_env, methodname, tmp);
-                }
-              else if (args(0).is_string ())
-                {
-                  std::string cls = args(0).string_value ();
-                  retval = octave_java::do_java_invoke (current_env, cls, methodname, tmp);
-                }
-              else
-                error ("java_invoke: OBJ must be a Java object or a string");
-            }
-          else
-            error ("java_invoke: METHODNAME must be a string");
-        }
-      else
-        print_usage ();
-    }
-
-  return retval;
-}
-
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_call (JNIEnv *env, jclass, jstring funcName,
                              jobjectArray argin, jobjectArray argout)
 {
   std::string fname = jstring_to_string (env, funcName);
 
   int nargout = env->GetArrayLength (argout);
   int nargin = env->GetArrayLength (argin);
@@ -1584,21 +1537,21 @@ octave_java::subsref (const std::string&
 
   switch (type[0])
     {
     case '.':
       if (type.length () > 1 && type[1] == '(')
         {
           octave_value_list ovl;
           count++;
-          ovl(0) = octave_value (this);
-          ovl(1) = (idx.front ())(0);
+          ovl(1) = octave_value (this);
+          ovl(0) = (idx.front ())(0);
           std::list<octave_value_list>::const_iterator it = idx.begin ();
           ovl.append (*++it);
-          retval = feval (std::string ("java_invoke"), ovl, 1);
+          retval = feval (std::string ("javaMethod"), ovl, 1);
           skip++;
         }
       else
         {
           octave_value_list ovl;
           count++;
           ovl(0) = octave_value (this);
           ovl(1) = (idx.front ())(0);
@@ -1726,17 +1679,17 @@ octave_java::convert_to_str_internal (bo
 
   if (current_env)
     return convert_to_string (current_env, to_java (), force, type);
   else
     return octave_value ("");
 }
 
 octave_value
-octave_java::do_java_invoke (JNIEnv* jni_env, const std::string& name,
+octave_java::do_javaMethod (JNIEnv* jni_env, const std::string& name,
                              const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
@@ -1753,17 +1706,17 @@ octave_java::do_java_invoke (JNIEnv* jni
             retval = check_exception (jni_env);
         }
     }
 
   return retval;
 }
 
 octave_value
-octave_java:: do_java_invoke (JNIEnv* jni_env,
+octave_java:: do_javaMethod (JNIEnv* jni_env,
                               const std::string& class_name,
                               const std::string& name,
                               const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
@@ -1783,17 +1736,17 @@ octave_java:: do_java_invoke (JNIEnv* jn
             retval = check_exception (jni_env);
         }
     }
 
   return retval;
 }
 
 octave_value
-octave_java::do_java_create (JNIEnv* jni_env, const std::string& name,
+octave_java::do_javaObject (JNIEnv* jni_env, const std::string& name,
                              const octave_value_list& args)
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
 
@@ -1932,122 +1885,111 @@ while the second example supplies an ini
 \n\
 @example\n\
 @group\n\
   x = javaObject (\"java.lang.StringBuffer\")\n\
   x = javaObject (\"java.lang.StringBuffer\", \"Initial string\")\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{java_invoke}\n\
+@seealso{javaMethod}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
   initialize_java ();
+
   if (! error_state)
     {
       JNIEnv *current_env = octave_java::thread_jni_env ();
 
       if (args.length () > 0)
         {
           std::string classname = args(0).string_value ();
           if (! error_state)
             {
               octave_value_list tmp;
               for (int i=1; i<args.length (); i++)
                 tmp(i-1) = args(i);
-              retval = octave_java::do_java_create (current_env, classname, tmp);
+              retval = octave_java::do_javaObject (current_env, classname, tmp);
             }
           else
             error ("javaObject: CLASSNAME argument must be a string");
         }
       else
         print_usage ();
     }
 
   return retval;
 #else
   error ("javaObject: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
-DEFUN (java_invoke, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {@var{ret} =} java_invoke (@var{obj}, @var{methodname}, @var{arg1}, @dots{})\n\
-Invoke the method @var{methodname} on the Java object @var{obj} with the arguments\n\
-@var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
-representing the fully qualified name of the corresponding class.  The\n\
-function returns the result of the method invocation.\n\
-\n\
-When @var{obj} is a regular Java object, structure-like indexing can be\n\
-used as a shortcut syntax.  For instance, the two following statements are\n\
-equivalent\n\
-\n\
-@example\n\
-@group\n\
-  ret = java_invoke (x, \"method1\", 1.0, \"a string\")\n\
-  ret = x.method1 (1.0, \"a string\")\n\
-@end group\n\
-@end example\n\
-\n\
-@seealso{javaMethod, javaObject}\n\
-@end deftypefn")
-{
-#ifdef HAVE_JAVA
-  return _java_invoke (args);
-#else
-  error ("java_invoke: Octave was not compiled with Java interface");
-  return octave_value ();
-#endif
-}
-
 DEFUN (javaMethod, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
+@deftypefn  {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})\n\
+@deftypefnx {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
 Invoke the method @var{methodname} on the Java object @var{obj} with the arguments\n\
 @var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
 representing the fully qualified name of the corresponding class.  The\n\
 function returns the result of the method invocation.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be\n\
 used as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
 @group\n\
   ret = javaMethod (\"method1\", x, 1.0, \"a string\")\n\
   ret = x.method1 (1.0, \"a string\")\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{java_invoke, javaObject}\n\
+@seealso{methods, javaObject}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
-  if (args.length () > 1)
+  initialize_java ();
+
+  if (! error_state)
     {
-      // swap first two arguments
-      octave_value_list tmp;
-      tmp(0) = args(1);
-      tmp(1) = args(0);
+      JNIEnv *current_env = octave_java::thread_jni_env ();
+
+      if (args.length () > 1)
+        {
+          std::string methodname = args(0).string_value ();
+          if (! error_state)
+            {
+              octave_value_list tmp;
+              for (int i=2; i<args.length (); i++)
+                tmp(i-2) = args(i);
 
-      // copy remaining arguments
-      for (int i=2; i<args.length (); i++)
-        tmp(i) = args(i);
-
-      retval = _java_invoke (tmp);
-    }
-  else
-    {
-      print_usage ();
+              if (args(1).class_name () == "octave_java")
+                {
+                  octave_java *jobj = TO_JAVA (args(1));
+                  retval = jobj->do_javaMethod (current_env, methodname, tmp);
+                }
+              else if (args(1).is_string ())
+                {
+                  std::string cls = args(1).string_value ();
+                  retval = octave_java::do_javaMethod (current_env, cls, methodname, tmp);
+                }
+              else
+                error ("javaMethod: OBJ must be a Java object or a string");
+            }
+          else
+            error ("javaMethod: METHODNAME must be a string");
+        }
+      else
+        print_usage ();
     }
 
   return retval;
 #else
   error ("javaMethod: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
@@ -2065,17 +2007,17 @@ equivalent\n\
 \n\
 @example\n\
 @group\n\
   __java_get__ (x, \"field1\")\n\
   x.field1\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{java_set, java_invoke, javaObject}\n\
+@seealso{__java_set__, javaMethod, javaObject}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
   initialize_java ();
 
   if (! error_state)
@@ -2127,17 +2069,17 @@ equivalent\n\
 \n\
 @example\n\
 @group\n\
   __java_set__ (x, \"field1\", val)\n\
   x.field1 = val\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{__java_get__, java_invoke, javaObject}\n\
+@seealso{__java_get__, javaMethod, javaObject}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
   initialize_java ();
 
   if (! error_state)
@@ -2173,17 +2115,17 @@ equivalent\n\
 #else
   error ("__java_set__: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
 DEFUN (java2mat, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} java2mat (@var{obj})\n\
+@deftypefn {Built-in Function} {} java2mat (@var{javaobj})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value_list retval;
 
   initialize_java ();
 
@@ -2261,17 +2203,17 @@ Query or set the internal variable that 
 }
 
 // Outside of #ifdef HAVE_JAVA because it is desirable to be able to
 // merely test for the presence of a Java object without having Java installed. 
 DEFUN (isjava, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isjava (@var{x})\n\
 Return true if @var{x} is a Java object.\n\
-@seealso{class, typeinfo, isa}\n\
+@seealso{class, typeinfo, isa, javaObject}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 1)
     print_usage ();
   else
     retval = args(0).is_java ();
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -193,44 +193,44 @@ public:
         return current_env->IsInstanceOf (java_object, cls);
       }
 
     return false;
   }
 
   static JNIEnv* thread_jni_env (void);
 
-  octave_value do_java_invoke (JNIEnv* jni_env, const std::string& name,
-                               const octave_value_list& args);
+  octave_value do_javaMethod (JNIEnv* jni_env, const std::string& name,
+                              const octave_value_list& args);
 
   octave_value
-  do_java_invoke (const std::string& name, const octave_value_list& args)
+  do_javaMethod (const std::string& name, const octave_value_list& args)
   {
-    return do_java_invoke(thread_jni_env (), name, args);
+    return do_javaMethod(thread_jni_env (), name, args);
   }
 
   static octave_value
-  do_java_invoke (JNIEnv* jni_env, const std::string& class_name,
-                  const std::string& name, const octave_value_list& args);
+  do_javaMethod (JNIEnv* jni_env, const std::string& class_name,
+                 const std::string& name, const octave_value_list& args);
 
   static octave_value
-  do_java_invoke (const std::string& class_name, const std::string& name,
-                  const octave_value_list& args)
+  do_javaMethod (const std::string& class_name, const std::string& name,
+                 const octave_value_list& args)
   {
-    return do_java_invoke(thread_jni_env (), class_name, name, args);
+    return do_javaMethod(thread_jni_env (), class_name, name, args);
   }
 
   static octave_value
-  do_java_create (JNIEnv* jni_env, const std::string& name,
-                  const octave_value_list& args);
+  do_javaObject (JNIEnv* jni_env, const std::string& name,
+                 const octave_value_list& args);
 
   static octave_value
-  do_java_create (const std::string& name, const octave_value_list& args)
+  do_javaObject (const std::string& name, const octave_value_list& args)
   {
-    return do_java_create (thread_jni_env (), name, args);
+    return do_javaObject (thread_jni_env (), name, args);
   }
 
   octave_value do_java_get (JNIEnv* jni_env, const std::string& name);
 
   octave_value do_java_get (const std::string& name)
   {
     return do_java_get (thread_jni_env (), name);
   }
diff --git a/scripts/deprecated/java_invoke.m b/scripts/deprecated/java_invoke.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/java_invoke.m
@@ -0,0 +1,57 @@
+## Copyright (C) 2007 Michael Goffioul
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Built-in Function} {@var{ret} =} java_invoke (@var{obj}, @var{methodname})
+## @deftypefnx {Built-in Function} {@var{ret} =} java_invoke (@var{obj}, @var{methodname}, @var{arg1}, @dots{})
+## Invoke the method @var{methodname} on the Java object @var{obj} with the
+## arguments @var{arg1}, @dots{}  For static methods, @var{obj} can be a
+## string representing the fully qualified name of the corresponding class. 
+## The function returns the result of the method invocation.
+## 
+## When @var{obj} is a regular Java object, structure-like indexing can be
+## used as a shortcut syntax.  For instance, the two following statements are
+## equivalent
+## 
+## @example
+## @group
+##   ret = java_invoke (x, \"method1\", 1.0, \"a string\")
+##   ret = x.method1 (1.0, \"a string\")
+## @end group
+## @end example
+## 
+## @seealso{javaMethod, javaObject}
+## @end deftypefn
+
+function retval = java_invoke (obj, methodname, varargin)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "java_invoke is obsolete and will be removed from a future version of Octave, please use javaMethod instead");
+  endif
+  
+  if (nargin < 2)
+    print_usage ();
+  endif
+
+  retval = javaMethod (methodname, obj, varargin);
+
+endfunction
+
diff --git a/scripts/deprecated/javafields.m b/scripts/deprecated/javafields.m
--- a/scripts/deprecated/javafields.m
+++ b/scripts/deprecated/javafields.m
@@ -18,33 +18,33 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javafields (@var{javaobj})
 ## @deftypefnx {Function File} {} javafields ("@var{classname}")
 ## @deftypefnx {Function File} {@var{fld_names} =} javafields (@dots{})
 ## Return the fields of a Java object or Java class in the form of a cell 
 ## array of strings.  If no output is requested, print the result
 ## to the standard output.
-## @seealso{fieldnames, methods, javamethods, javaObject}
+## @seealso{fieldnames, methods, javaObject}
 ## @end deftypefn
 
 function fld_names = javafields (javaobj)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
              "javafields is obsolete and will be removed from a future version of Octave, please use fieldnames instead");
   endif
   
   if (nargin != 1)
     print_usage ();
   endif
   
-  c_methods = java_invoke ("org.octave.ClassHelper", "getFields", javaobj);
+  c_methods = javaMethod ("getFields", "org.octave.ClassHelper", javaobj);
   method_list = strsplit (c_methods, ';');
 
   if (nargout == 0)
     if (! isempty (method_list))
       disp (method_list);
     endif
   else
     fld_names = cellstr (method_list);
diff --git a/scripts/deprecated/javamethods.m b/scripts/deprecated/javamethods.m
--- a/scripts/deprecated/javamethods.m
+++ b/scripts/deprecated/javamethods.m
@@ -18,33 +18,33 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javamethods (@var{javaobj})
 ## @deftypefnx {Function File} {} javamethods ("@var{classname}")
 ## @deftypefnx {Function File} {@var{mtd_names} =} javamethods (@dots{})
 ## Return the methods of a Java object or Java class in the form of a cell 
 ## array of strings.  If no output is requested, print the result to the
 ## standard output.
-## @seealso{methods, javafields, java_invoke, javaMethod, javaObject}
+## @seealso{methods, fieldnames, javaMethod, javaObject}
 ## @end deftypefn
 
 function mtd_names = javamethods (classname)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
              "javamethods is obsolete and will be removed from a future version of Octave, please use methods instead");
   endif
   
   if (nargin != 1)
     print_usage ();
   endif
 
-  cls_methods = java_invoke ("org.octave.ClassHelper", "getMethods", classname);
+  cls_methods = javaMethod ("getMethods", "org.octave.ClassHelper", classname);
   method_list = strsplit (cls_methods, ';');
 
   if (nargout == 0)
     if (! isempty (method_list))
       disp (method_list);
     endif
   else
     mtd_names = cellstr (method_list);
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -3,16 +3,17 @@ FCN_FILE_DIRS += deprecated
 deprecated_FCN_FILES = \
   deprecated/__error_text__.m \
   deprecated/cor.m \
   deprecated/corrcoef.m \
   deprecated/cut.m \
   deprecated/error_text.m \
   deprecated/isstr.m \
   deprecated/java_get.m \
+  deprecated/java_invoke.m \
   deprecated/java_new.m \
   deprecated/java_set.m \
   deprecated/javafields.m \
   deprecated/javamethods.m \
   deprecated/polyderiv.m \
   deprecated/setstr.m \
   deprecated/shell_cmd.m \
   deprecated/studentize.m \
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -41,17 +41,17 @@ function names = fieldnames (obj)
   if (nargin != 1)
     print_usage ();
   endif
   
   if (isstruct (obj) || isobject (obj))
     ## Call internal C++ function for structs or Octave objects
     names = __fieldnames__ (obj);
   elseif (isjava (obj) || ischar (obj))
-    names_str = java_invoke ("org.octave.ClassHelper", "getFields", obj);
+    names_str = javaMethod ("getFields", "org.octave.ClassHelper", obj);
     names = strsplit (names_str, ';');
   else
     error ("fieldnames: Invalid input argument"); 
   endif
 
 endfunction
 
 
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -37,21 +37,21 @@ function mtds = methods (obj)
   if (isobject (obj))
     ## Call internal C++ function for Octave objects
     mtds_list = __methods__ (obj);
   elseif (ischar (obj))
     ## Could be a classname for an Octave class or Java class.
     ## Try Octave class first.
     mtds_list = __methods__ (obj);
     if (isempty (mtds_list))
-      mtds_str = java_invoke ("org.octave.ClassHelper", "getMethods", obj);
+      mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
       mtds_list = strsplit (mtds_str, ';');
     endif
   elseif (isjava (obj))
-    mtds_str = java_invoke ("org.octave.ClassHelper", "getMethods", obj);
+    mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
     mtds_list = strsplit (mtds_str, ';');
   else
     error ("methods: Invalid input argument");
   endif
 
   if (nargout == 0)
     classname = ifelse (ischar (obj), obj, class (obj));
     printf ("Methods for class %s:\n", classname);
diff --git a/scripts/java/errordlg.m b/scripts/java/errordlg.m
--- a/scripts/java/errordlg.m
+++ b/scripts/java/errordlg.m
@@ -44,12 +44,12 @@ function h = errordlg (msg, title = "Err
       error ("errordlg: MSG must be a string or cellstr array");
     endif
   endif
 
   if (! ischar (title))
     error ("errordlg: TITLE must be a character string");
   endif
 
-  h = java_invoke ("org.octave.JDialogBox", "errordlg", msg, title);
+  h = javaMethod ("errordlg", "org.octave.JDialogBox", msg, title);
 
 endfunction
 
diff --git a/scripts/java/helpdlg.m b/scripts/java/helpdlg.m
--- a/scripts/java/helpdlg.m
+++ b/scripts/java/helpdlg.m
@@ -44,12 +44,12 @@ function h = helpdlg (msg, title = "Help
       error ("helpdlg: MSG must be a string or cellstr array");
     endif
   endif
 
   if (! ischar (title))
     error ("helpdlg: TITLE must be a character string");
   endif
 
-  h = java_invoke ("org.octave.JDialogBox", "helpdlg", msg, title);
+  h = javaMethod ("helpdlg", "org.octave.JDialogBox", msg, title);
 
 endfunction
 
diff --git a/scripts/java/inputdlg.m b/scripts/java/inputdlg.m
--- a/scripts/java/inputdlg.m
+++ b/scripts/java/inputdlg.m
@@ -121,17 +121,17 @@ function cstr = inputdlg (prompt, title 
     ## dunno
     error ("inputdlg: unknown form of ROWSCOLS argument");
   endif
   
   ## convert numeric values in defaults cell array to strings
   defs = cellfun (@num2str, defaults, "UniformOutput", false);
   rc = arrayfun (@num2str, rowscols, "UniformOutput", false);
 
-  user_inputs = java_invoke ("org.octave.JDialogBox", "inputdlg",
+  user_inputs = javaMethod ("inputdlg", "org.octave.JDialogBox",
                              prompt, title, rc, defs);
   
    if (isempty (user_inputs))
      cstr = {};
    else
      cstr = cellstr (user_inputs);
    endif
 
diff --git a/scripts/java/javaArray.m b/scripts/java/javaArray.m
--- a/scripts/java/javaArray.m
+++ b/scripts/java/javaArray.m
@@ -39,13 +39,13 @@
 ## @end deftypefn
 
 function retval = javaArray (classname, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
-  retval = java_invoke ("org.octave.ClassHelper", "createArray",
+  retval = javaMethod ("createArray", "org.octave.ClassHelper",
                         classname, [varargin{:}]);
 
 endfunction
 
diff --git a/scripts/java/javaaddpath.m b/scripts/java/javaaddpath.m
--- a/scripts/java/javaaddpath.m
+++ b/scripts/java/javaaddpath.m
@@ -43,17 +43,17 @@ function javaaddpath (varargin)
     if (exist (new_path, "dir"))
       if (new_path(end) != filesep ())
         new_path = [new_path, filesep()];
       endif
     elseif (! exist (new_path, "file"))
       error ("javaaddpath: CLSPATH does not exist: %s", clspath);
     endif
 
-    success = java_invoke ("org.octave.ClassHelper", "addClassPath", new_path);
+    success = javaMethod ("addClassPath", "org.octave.ClassHelper", new_path);
 
     if (! success)
       warning ("javaaddpath: failed to add '%s' to Java classpath", new_path);
     endif
   endfor 
    
 endfunction
 
diff --git a/scripts/java/javaclasspath.m b/scripts/java/javaclasspath.m
--- a/scripts/java/javaclasspath.m
+++ b/scripts/java/javaclasspath.m
@@ -52,21 +52,21 @@
 ## Return both the static and dynamic classpath in a single cellstr.
 ## @end table
 ## @seealso{javaaddpath, javarmpath}
 ## @end deftypefn
 
 function varargout = javaclasspath (which)
 
   ## dynamic classpath
-  dynamic_path = java_invoke ("org.octave.ClassHelper", "getClassPath");
+  dynamic_path = javaMethod ("getClassPath", "org.octave.ClassHelper");
   dynamic_path_list = strsplit (dynamic_path, pathsep ());
 
   ## static classpath
-  static_path = java_invoke ("java.lang.System", "getProperty", "java.class.path");
+  static_path = javaMethod ("getProperty", "java.lang.System", "java.class.path");
   static_path_list = strsplit (static_path, pathsep ());
   if (numel (static_path_list) > 1)
     ## remove first element (which is .../octave.jar)
     static_path_list(1) = [];
   else
     static_path_list = {};
   endif
 
diff --git a/scripts/java/javamem.m b/scripts/java/javamem.m
--- a/scripts/java/javamem.m
+++ b/scripts/java/javamem.m
@@ -62,17 +62,17 @@
 ## Created: 2010-03-25
 ## Updates: 
 ## 2010-03-26 Changed name to javamem & indentation to double spaces
 ## 2010-08-25 Corrected text on java memory assignments
 ## 2010-09-05 Further overhauled help text
 
 function jmem = javamem ()
 
-  rt = java_invoke ("java.lang.Runtime", "getRuntime");
+  rt = javaMethod ("getRuntime", "java.lang.Runtime");
   rt.gc;
   jvmem = cell (3, 1);
   jvmem{1} = rt.maxMemory ().doubleValue ();
   jvmem{2} = rt.totalMemory ().doubleValue ();
   jvmem{3} = rt.freeMemory ().doubleValue ();
 
   if (nargout == 0)
     printf ("\nJava virtual machine (JVM) memory info:\n");
diff --git a/scripts/java/javarmpath.m b/scripts/java/javarmpath.m
--- a/scripts/java/javarmpath.m
+++ b/scripts/java/javarmpath.m
@@ -41,17 +41,17 @@ function javarmpath (varargin)
 
     old_path = canonicalize_file_name (tilde_expand (clspath));
     if (exist (old_path, "dir"))
       if (old_path(end) != filesep ())
         old_path = [old_path, filesep()];
       endif
     endif
 
-    success = java_invoke ("org.octave.ClassHelper", "removeClassPath",
+    success = javaMethod ("removeClassPath", "org.octave.ClassHelper",
                            old_path);
 
     if (! success)
       warning ("javarmpath: %s: not found in Java classpath", old_path);
     endif
   endfor
 
 endfunction
diff --git a/scripts/java/listdlg.m b/scripts/java/listdlg.m
--- a/scripts/java/listdlg.m
+++ b/scripts/java/listdlg.m
@@ -123,17 +123,17 @@ function varargout = listdlg (varargin)
      listcell = {listcell};
    endif
    
    ## transform matrices to cell arrays of strings
    ## swap width and height to correct calling format for JDialogBox
    listsize = {num2str(listsize(2)), num2str(listsize(1))};
    initialvalue = arrayfun (@num2str, initialvalue, "UniformOutput", false);
    
-   ret = java_invoke ("org.octave.JDialogBox", "listdlg", listcell,
+   ret = javaMethod ("listdlg", "org.octave.JDialogBox", listcell,
                       selmode, listsize, initialvalue, name, prompt,
                       okstring, cancelstring);
 
    if (numel (ret) > 0)
      varargout = {ret, 1};
    else
      varargout = {{}, 0};
    endif
diff --git a/scripts/java/msgbox.m b/scripts/java/msgbox.m
--- a/scripts/java/msgbox.m
+++ b/scripts/java/msgbox.m
@@ -65,12 +65,12 @@ function h = msgbox (msg, title = "", ic
         dlg = "warndlg";
       case "none"
         dlg = "emptydlg";
       otherwise
         error ("msgbox: ICON is not a valid type");
     endswitch
   endif
 
-  h = java_invoke ("org.octave.JDialogBox", dlg, msg, title);
+  h = javaMethod (dlg, "org.octave.JDialogBox", msg, title);
 
 endfunction
 
diff --git a/scripts/java/questdlg.m b/scripts/java/questdlg.m
--- a/scripts/java/questdlg.m
+++ b/scripts/java/questdlg.m
@@ -89,13 +89,13 @@ function btn = questdlg (msg, title = "Q
       options{3} = varargin{3};  # button3
       options{4} = varargin{4};  # default
 
     otherwise
       print_usage ();
 
   endswitch
 
-  btn = java_invoke ("org.octave.JDialogBox", "questdlg", msg,
+  btn = javaMethod ("questdlg", "org.octave.JDialogBox", msg,
                      title, options);
 
 endfunction
 
diff --git a/scripts/java/warndlg.m b/scripts/java/warndlg.m
--- a/scripts/java/warndlg.m
+++ b/scripts/java/warndlg.m
@@ -43,12 +43,12 @@ function retval = warndlg (msg, title = 
       error ("warndlg: MSG must be a string or cellstr array");
     endif
   endif
 
   if (! ischar (title))
     error ("warndlg: TITLE must be a character string");
   endif
 
-  retval = java_invoke ("org.octave.JDialogBox", "warndlg", msg, title);
+  retval = javaMethod ("warndlg", "org.octave.JDialogBox", msg, title);
 
 endfunction
 
