# HG changeset patch
# User Rik <rik@octave.org>
# Date 1509728616 25200
#      Fri Nov 03 10:03:36 2017 -0700
# Node ID d3dc76efb38b998302b82d789a2a97b892f8cd0d
# Parent  3333ca37c038ff24ec0dc722f055ddafef7ccb82
Return correct value for pinv of zero vectors and scalars (bug #51246).

CMatrix.cc, dMatrix.cc (pseudo_inverse): Change any computed tolerance of 0 to
std::numeric_limits<double>::min() so that zero values are later dropped from
calculation.

fCMatrix.cc, fMatrix.cc (pseudo_inverse): Change calculation of default tolerance
to us the <float> version of std::numeric_limits::epsilon () rather than the
double version.  Change any computed tolerance of 0 to
std::numeric_limits<float>::min() so that zero values are later dropped from
calculation.

* pinv.cc (Fpinv): Add BIST tests.

diff --git a/libinterp/corefcn/pinv.cc b/libinterp/corefcn/pinv.cc
--- a/libinterp/corefcn/pinv.cc
+++ b/libinterp/corefcn/pinv.cc
@@ -184,9 +184,18 @@ where @code{sigma_max (@var{x})} is the 
 %! assert (typeinfo (y)(1:8), "diagonal");
 %! assert (isa (y, "double"));
 %! assert (diag (y), [1/3, 1/2, 1, 0  1/-0.5]');
 %! y = pinv (x, 1);
 %! assert (diag (y), [1/3 1/2 1 0 0]');
 %! y = pinv (x, 2);
 %! assert (diag (y), [1/3 1/2 0 0 0]');
 
+## Test special case of 0 scalars and vectors
+%!assert (pinv (0), 0)
+%!assert (pinv ([0, 0, 0]), [0; 0; 0])
+%!assert (pinv (single (0)), single (0))
+%!assert (pinv (single ([0, 0, 0])), single ([0; 0; 0]))
+%!assert (pinv (complex (0,0)), 0)
+%!assert (pinv (complex ([0,0,0], [0,0,0])), [0; 0; 0])
+%!assert (pinv (complex (single (0),0)), single (0))
+%!assert (pinv (complex (single ([0,0,0]), [0,0,0])), single ([0; 0; 0]))
 */
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -968,16 +968,19 @@ ComplexMatrix::pseudo_inverse (double to
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
         tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
         tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+
+      if (tol == 0)
+        tol = std::numeric_limits<double>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     retval = ComplexMatrix (nc, nr, 0.0);
   else
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -667,16 +667,19 @@ Matrix::pseudo_inverse (double tol) cons
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
         tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
         tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+
+      if (tol == 0)
+        tol = std::numeric_limits<double>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     return Matrix (nc, nr, 0.0);
   else
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -967,19 +967,22 @@ FloatComplexMatrix::pseudo_inverse (floa
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+        tol = nr * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+        tol = nc * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
+
+      if (tol == 0)
+        tol = std::numeric_limits<float>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     retval = FloatComplexMatrix (nc, nr, 0.0);
   else
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -670,19 +670,22 @@ FloatMatrix::pseudo_inverse (float tol) 
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+        tol = nr * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+        tol = nc * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
+
+      if (tol == 0)
+        tol = std::numeric_limits<float>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     return FloatMatrix (nc, nr, 0.0);
   else
