# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477882052 25200
#      Sun Oct 30 19:47:32 2016 -0700
# Branch stable
# Node ID 2100cd2e1be002c7f70b266d0134ad912bb127dc
# Parent  8acad59ecec055b739d74fd621ca7e544c39552f
doc: Clarify behavior of size (bug #49478).

* data.cc (Fsize): Rewrite docstring and add more examples.

* deal.m: Delete extra space in @example block of docstring.

* cellfun.cc (Farrayfun): Correct example block so that it shows what Octave
actually produces.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1022,17 +1022,17 @@ The named function can also take more th
 the input arguments given as third input argument @var{b}, fourth
 input argument @var{c}, @dots{}  If given more than one array input
 argument then all input arguments must have the same sizes, for
 example:
 
 @example
 @group
 arrayfun (@@atan2, [1, 0], [0, 1])
-     @result{} [ 1.5708   0.0000 ]
+     @result{} [ 1.57080   0.00000 ]
 @end group
 @end example
 
 If the parameter @var{val} after a further string input argument
 @qcode{"UniformOutput"} is set @code{true} (the default), then the named
 function @var{func} must return a single element which then will be
 concatenated into the return value and is of type matrix.  Otherwise,
 if that parameter is set to @code{false}, then the outputs are
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2739,48 +2739,71 @@ indexing, i.e., @code{object@{@dots{}@}}
       retval = dims_to_numel (args(0).dims (), args.slice (1, nargin-1));
     }
 
   return retval;
 }
 
 DEFUN (size, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} size (@var{a})
-@deftypefnx {} {} size (@var{a}, @var{dim})
-Return the number of rows and columns of @var{a}.
-
-With one input argument and one output argument, the result is returned
-in a row vector.  If there are multiple output arguments, the number of
-rows is assigned to the first, and the number of columns to the second,
-etc.  For example:
+@deftypefn  {} {@var{sz} =} size (@var{a})
+@deftypefnx {} {@var{dim_sz} =} size (@var{a}, @var{dim})
+@deftypefnx {} {[@var{rows}, @var{cols}, @dots{}, @var{dim_N_sz}] =} size (@dots{})
+Return a row vector with the size (number of elements) of each dimension for
+the object @var{a}.
+
+When given a second argument, @var{dim}, return the size of the corresponding
+dimension.
+
+With a single output argument, @code{size} returns a row vector.  When called
+with multiple output arguments, @code{size} returns the size of dimension N
+in the Nth argument.  The number of rows, dimension 1, is returned in the
+first argument, the number of columns, dimension 2, is returned in the
+second argument, etc.  If there are more dimensions in @var{a} then there are
+output arguments, @code{size} returns the total number of elements in the
+remaining dimensions in the final output argument.
+
+Example 1: single row vector output
 
 @example
 @group
 size ([1, 2; 3, 4; 5, 6])
    @result{} [ 3, 2 ]
-
-[nr, nc] = size ([1, 2; 3, 4; 5, 6])
-    @result{} nr = 3
-    @result{} nc = 2
 @end group
 @end example
 
-If given a second argument, @code{size} will return the size of the
-corresponding dimension.  For example,
+Example 2: number of elements in 2nd dimension (columns)
 
 @example
 @group
 size ([1, 2; 3, 4; 5, 6], 2)
     @result{} 2
 @end group
 @end example
 
-@noindent
-returns the number of columns in the given matrix.
+Example 3: number of output arguments == number of dimensions
+
+@example
+@group
+[nr, nc] = size ([1, 2; 3, 4; 5, 6])
+    @result{} nr = 3
+    @result{} nc = 2
+@end group
+@end example
+
+Example 4: number of output arguments != number of dimensions
+
+@example
+@group
+[nr, remainder] = size (ones (2, 3, 4, 5)
+    @result{} nr = 2
+    @result{} remainder = 60
+@end group
+@end example
+
 @seealso{numel, ndims, length, rows, columns, size_equal, common_size}
 @end deftypefn */)
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
diff --git a/scripts/general/deal.m b/scripts/general/deal.m
--- a/scripts/general/deal.m
+++ b/scripts/general/deal.m
@@ -59,17 +59,17 @@
 ## Programming Note: @code{deal} is often used with comma separated lists
 ## derived from cell arrays or structures.  This is unnecessary as the
 ## interpreter can perform the same action without the overhead of a function
 ## call.  For example:
 ##
 ## @example
 ## @group
 ## c = @{[1 2], "Three", 4@};
-## [x, y, z ] = c@{:@}
+## [x, y, z] = c@{:@}
 ## @result{}
 ##    x =
 ##
 ##       1   2
 ##
 ##    y = Three
 ##    z =  4
 ## @end group
