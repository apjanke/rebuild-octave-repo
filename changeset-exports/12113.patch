# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1248373485 14400
#      Thu Jul 23 14:24:45 2009 -0400
# Branch release-3-2-x
# Node ID 232a0ddce7cd15edd6442bf5e3323f629899dde9
# Parent  3ab05b7b61ee8580cd5506ffe9d0d538f1aacedf
toplev.cc: handle exceptions while preparing to exit

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-07-23  John W. Eaton  <jwe@octave.org>
+
+	* toplev.cc (IGNORE_EXCEPTION, SAFE_CALL): New macros.
+	(clean_up_and_exit, do_octave_atexit): Use SAFE_CALL to handle
+	exceptions while preparing to exit.
+
 2009-08-04  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (octave_call_stack::do_goto_frame_relative): Allow
 	NSKIP to be 0.  Set current scope and context.
 	* input.cc (Fkeyboard): Use octave_call_stack::goto_frame_relative
 	to set scope in user code that called the keyboard function.
 
 2009-08-04  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -642,24 +642,43 @@ main_loop (void)
 	    << std::endl;
 	}
     }
   while (retval == 0);
 
   return retval;
 }
 
+// Call a function with exceptions handled to avoid problems with
+// errors while shutting down.
+
+#define IGNORE_EXCEPTION(E) \
+  catch (E) \
+    { \
+      std::cerr << "error: ignoring " #E " while preparing to exit" << std::endl; \
+      recover_from_exception (); \
+    }
+
+#define SAFE_CALL(F, ARGS) \
+  try \
+    { \
+      F ARGS; \
+    } \
+  IGNORE_EXCEPTION (octave_interrupt_exception) \
+  IGNORE_EXCEPTION (octave_execution_exception) \
+  IGNORE_EXCEPTION (std::bad_alloc)
+
 // Fix up things before exiting.
 
 void
 clean_up_and_exit (int retval)
 {
   do_octave_atexit ();
 
-  sysdep_cleanup ();
+  SAFE_CALL (sysdep_cleanup, ())
 
   if (octave_exit)
     (*octave_exit) (retval == EOF ? 0 : retval);
 }
 
 DEFUN (quit, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} exit (@var{status})\n\
@@ -986,71 +1005,56 @@ do_octave_atexit (void)
   static bool deja_vu = false;
 
   while (! octave_atexit_functions.empty ())
     {
       std::string fcn = octave_atexit_functions.front ();
 
       octave_atexit_functions.pop_front ();
 
-      reset_error_handler ();
+      SAFE_CALL (reset_error_handler, ())
 
-      try
-        {
-          feval (fcn, octave_value_list (), 0);
-        }
-      catch (octave_interrupt_exception)
-	{
-	  recover_from_exception ();
-	}
-      catch (octave_execution_exception)
-	{
-	  recover_from_exception ();
-	}
-      catch (std::bad_alloc)
-	{
-	  recover_from_exception ();
-	}
+      SAFE_CALL (feval, (fcn, octave_value_list (), 0))
 
-      flush_octave_stdout ();
+      SAFE_CALL (flush_octave_stdout, ())
     }
 
   if (! deja_vu)
     {
       deja_vu = true;
 
       // Do this explicitly so that destructors for mex file objects
       // are called, so that functions registered with mexAtExit are
       // called.
-      clear_mex_functions ();
+      SAFE_CALL (clear_mex_functions, ())
 
-      command_editor::restore_terminal_state ();
+	SAFE_CALL (command_editor::restore_terminal_state, ())
 
       // FIXME -- is this needed?  Can it cause any trouble?
-      raw_mode (0);
+      SAFE_CALL (raw_mode, (0))
 
-      octave_history_write_timestamp ();
+      SAFE_CALL (octave_history_write_timestamp, ())
 
       if (Vsaving_history)
-	command_history::clean_up_and_save ();
+	SAFE_CALL (command_history::clean_up_and_save, ())
 
-      close_files ();
+      SAFE_CALL (close_files, ())
 
-      cleanup_tmp_files ();
+      SAFE_CALL (cleanup_tmp_files, ())
 
-      flush_octave_stdout ();
+      SAFE_CALL (flush_octave_stdout, ())
 
       if (! quitting_gracefully && (interactive || forced_interactive))
 	{
 	  octave_stdout << "\n";
 
 	  // Yes, we want this to be separate from the call to
 	  // flush_octave_stdout above.
 
-	  flush_octave_stdout ();
+	  SAFE_CALL (flush_octave_stdout, ())
 	}
     }
 }
 
 void
 octave_add_atexit_function (const std::string& fname)
 {
   octave_atexit_functions.push_front (fname);
