# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1514059107 18000
#      Sat Dec 23 14:58:27 2017 -0500
# Node ID 516437d2194dc69f4bfbdb7efd2baf04e139067e
# Parent  e3751f50e8ef0cdc35131e25d909555c01411f6a
don't allow function parameters (in or out) to be persistent

* symrec.h (symbol_record::symbol_record_rep::mark_persistent):
Also error if this object is a function argument.

* __unimplemented__.m, imformats.m, odedefaults.m:
Don't make function parameters persistent.

diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -376,16 +376,18 @@ namespace octave
           {
             t_fwd_rep->mark_persistent ();
             return;
           }
 
         if (is_global ())
           error ("can't make global variable %s persistent", m_name.c_str ());
 
+        if (is_formal ())
+          error ("can't make function parameter %s persistent", m_name.c_str ());
         m_storage_class |= persistent;
       }
 
       void mark_added_static (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_added_static ();
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -541,17 +541,17 @@ function txt = check_package (fcn, name,
     otherwise
       ## this includes "not installed" and anything else if pkg changes
       ## the output of describe
       txt = sprintf ("%s which seems to not be installed in your system.", txt);
   endswitch
 
 endfunction
 
-function list = missing_functions ()
+function rlist = missing_functions ()
   persistent list = {
   "addcats",
   "addCause",
   "align",
   "alim",
   "alpha",
   "alphamap",
   "alphaShape",
@@ -836,16 +836,18 @@ function list = missing_functions ()
   "winopen",
   "winqueryreg",
   "workspace",
   "writetable",
   "xmlread",
   "xmlwrite",
   "xslt",
   };
+
+  rlist = list;
 endfunction
 
 %!test
 %! str = __unimplemented__ ("no_name_function");
 %! assert (isempty (str));
 %! str = __unimplemented__ ("matlabrc");
 %! assert (str(1:71), "matlabrc is not implemented.  Octave uses the file '.octaverc' instead.");
 %! str = __unimplemented__ ("MException");
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -137,17 +137,17 @@ function varargout = imformats (arg1, ar
       error ("imformats: first argument must be either a structure or string.");
     endif
   else
     varargout{1} = formats;
   endif
 
 endfunction
 
-function formats = default_formats ()
+function rformats = default_formats ()
 
   ## The available formats are dependent on what the user has installed at
   ## a given time, and how GraphicsMagick was built.  Checking for
   ## GraphicsMagick features when building Octave is not enough since it
   ## delegates some of them to external programs which can be removed or
   ## installed at any time.
   ## The recommended method would be to use CoderInfoList() to get a list of
   ## all available coders and try to write and read back a small test image.
@@ -173,16 +173,17 @@ function formats = default_formats ()
                                 "alpha", {},
                                 "description", {},
                                 "multipage", {});
 
   ## Image IO abilities won't change during the same Octave session,
   ## there's no need to go and calculate it all over again if we are
   ## requested to reset back to factory.
   if (! isempty (formats))
+    rformats = formats;
     return;
   endif
 
   ##      Building the formats info
   ##
   ## As mentioned above we start with a whitelist of coders.  Since the
   ## GraphicsMagick build may be missing some coders, we will remove those
   ## from the list.  Some info can be obtained directly from GraphicsMagick
@@ -252,16 +253,18 @@ function formats = default_formats ()
   ## the default info, read, and write functions
   [formats.info ] = deal (@__imfinfo__);
   [formats.read ] = deal (@__imread__);
   [formats.write] = deal (@__imwrite__);
 
   ## fills rest of format information by checking with GraphicsMagick
   formats = __magick_formats__ (formats);
 
+  rformats = formats;
+
 endfunction
 
 function is_valid_format (format)
   ## the minimal list of fields required in the structure.  We don't
   ## require multipage because it doesn't exist in matlab
   min_fields  = {"ext", "read", "isa", "write", "info", "alpha", "description"};
   fields_mask = isfield (format, min_fields);
   if (! all (fields_mask))
diff --git a/scripts/ode/private/odedefaults.m b/scripts/ode/private/odedefaults.m
--- a/scripts/ode/private/odedefaults.m
+++ b/scripts/ode/private/odedefaults.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {[@var{defaults}, @var{classes}, @var{attributes}] =} odedefaults (@var{n}, @var{t0}, @var{tf})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function [defaults, classes, attributes] = odedefaults (n, t0, tf)
+function [rdefaults, rclasses, rattributes] = odedefaults (n, t0, tf)
 
   persistent defaults = struct ("AbsTol", 1e-6,
                                 "BDF", "off",
                                 "Events", [],
                                 "InitialSlope", zeros (n,1),
                                 "InitialStep", [],
                                 "Jacobian", [],
                                 "JConstant", "off",
@@ -95,9 +95,13 @@ function [defaults, classes, attributes]
                                   "Refine", {{"scalar", ">", 0, "integer"}},
                                   "RelTol", {{"scalar", "positive", "real"}},
                                   "Stats", {{"on", "off"}},
                                   "Vectorized", {{"on", "off"}});
 
   attributes.InitialSlope = {"real", "vector", "numel", n};
   attributes.OutputSel = {"vector", "integer", "positive", ">", 0, "<=", n};
 
+  rdefaults = defaults;
+  rclasses = classes;
+  rattributes = attributes;
+
 endfunction
