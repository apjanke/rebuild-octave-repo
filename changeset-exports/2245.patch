# HG changeset patch
# User jwe
# Date 832742480 0
#      Wed May 22 05:21:20 1996 +0000
# Node ID aaeccf9e1d321b12538bfc55b7042192a2c8ace1
# Parent  d864935059f42be76acb54688a636725fc8939eb
[project @ 1996-05-22 05:21:16 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -113,23 +113,33 @@ Array<T>::maybe_delete_elements (idx_vec
   if (idx.is_colon_equiv (len, 1))
     resize (0);
   else
     {
       int num_to_delete = idx.length (len);
 
       if (num_to_delete != 0)
 	{
-	  int new_len = len - num_to_delete;
+	  int new_len = len;
+
+	  int iidx = 0;
+
+	  for (int i = 0; i < len; i++)
+	    if (i == idx.elem (iidx))
+	      {
+		iidx++;
+		new_len--;
+	      }
+
 	  if (new_len > 0)
 	    {
 	      T *new_data = new T [new_len];
 
 	      int ii = 0;
-	      int iidx = 0;
+	      iidx = 0;
 	      for (int i = 0; i < len; i++)
 		{
 		  if (i == idx.elem (iidx))
 		    iidx++;
 		  else
 		    {
 		      new_data[ii] = elem (i);
 		      ii++;
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -203,23 +203,33 @@ Array2<T>::maybe_delete_elements (idx_ve
 	  int num_to_delete = idx_j.length (nc);
 
 	  if (num_to_delete != 0)
 	    {
 	      if (nr == 1 && num_to_delete == nc)
 		resize (0, 0);
 	      else
 		{
-		  int new_nc = nc - num_to_delete;
+		  int new_nc = nc;
+
+		  int idx = 0;
+
+		  for (int j = 0; j < nc; j++)
+		    if (j == idx_j.elem (idx))
+		      {
+			idx++;
+			new_nc--;
+		      }
+
 		  if (new_nc > 0)
 		    {
 		      T *new_data = new T [nr * new_nc];
 
 		      int jj = 0;
-		      int idx = 0;
+		      idx = 0;
 		      for (int j = 0; j < nc; j++)
 			{
 			  if (j == idx_j.elem (idx))
 			    idx++;
 			  else
 			    {
 			      for (int i = 0; i < nr; i++)
 				new_data[nr*jj+i] = elem (i, j);
@@ -252,23 +262,33 @@ Array2<T>::maybe_delete_elements (idx_ve
 	  int num_to_delete = idx_i.length (nr);
 
 	  if (num_to_delete != 0)
 	    {
 	      if (nc == 1 && num_to_delete == nr)
 		resize (0, 0);
 	      else 
 		{
-		  int new_nr = nr - num_to_delete;
+		  int new_nr = nr;
+
+		  int idx = 0;
+
+		  for (int i = 0; i < nr; i++)
+		    if (i == idx_i.elem (idx))
+		      {
+			idx++;
+			new_nr--;
+		      }
+
 		  if (new_nr > 0)
 		    {
 		      T *new_data = new T [new_nr * nc];
 
 		      int ii = 0;
-		      int idx = 0;
+		      idx = 0;
 		      for (int i = 0; i < nr; i++)
 			{
 			  if (i == idx_i.elem (idx))
 			    idx++;
 			  else
 			    {
 			      for (int j = 0; j < nc; j++)
 				new_data[new_nr*j+ii] = elem (i, j);
