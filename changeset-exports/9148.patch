# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1240425687 14400
#      Wed Apr 22 14:41:27 2009 -0400
# Node ID 69e6bbfef8c2ebbb125fe1e21832cb302bb14075
# Parent  5579998f8acfa700f062269e75ec21106192d488
ov-class.cc: protect against possiblly invalid octave_value -> string conversions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-04-22  John W. Eaton  <jwe@octave.org>
+
+	* ov-class.cc (octave_class::dotref, octave_class::subsasgn):
+	Protect against possibly invalid octave_value -> string conversions.
+
 2009-04-22  Robert T. Short  <octave@phaselockedsystems.com>
 
 	* variables.cc (symbol_exist): Also return 1 for objects.
 	* ov-base.h (octave_base_value::assign): New virtual function.
 	* ov-class.h (octave_class::assign): New function.
 	* ov-class.cc (octave_class::find_parent_class): Simplify.
 	(octave_class::octave_class): Don't allow duplicate parent classes.
 	(octave_class::subsasgn): Allow cls = method (cls, value) to work
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -88,92 +88,31 @@ octave_class::octave_class (const Octave
 	    }
 	}
     }
 
   if (! error_state)
     load_path::add_to_parent_map (id, parent_list);
 }
 
-octave_base_value *
-octave_class::find_parent_class (const std::string& parent_class_name)
-{
-  octave_base_value* retval = 0;
-
-  if (parent_class_name == class_name ())
-    retval = this;
-  else
-    {
-      for (std::list<std::string>::iterator pit = parent_list.begin ();
-	   pit != parent_list.end ();
-	   pit++)
-	{
-	  Octave_map::const_iterator smap = map.seek (*pit);
-
-	  const Cell& tmp = smap->second;
-
-	  octave_value vtmp = tmp(0);
-
-	  octave_base_value *obvp = vtmp.internal_rep ();
-
-	  retval = obvp->find_parent_class (parent_class_name);
-
-	  if (retval)
-	    break;
-	}
-    }
-
-  return retval;
-}
-
 static std::string
 get_current_method_class (void)
 {
   // FIXME -- is there a better way to do this?
   octave_function *fcn = octave_call_stack::current ();
 
   std::string my_dir = fcn->dir_name ();
 
   size_t ipos = my_dir.find_last_of ("@");
 
   assert (ipos != std::string::npos);
 
   return my_dir.substr (ipos+1);
 }
 
-Cell
-octave_class::dotref (const octave_value_list& idx)
-{
-  Cell retval;
-
-  assert (idx.length () == 1);
-
-  std::string method_class = get_current_method_class ();
-
-  // Find the class in which this method resides before attempting to access
-  // the requested field.
-
-  octave_base_value *obvp = find_parent_class (method_class);
-
-  Octave_map my_map;
-
-  my_map = obvp ? obvp->map_value () : map;
-
-  std::string nm = idx(0).string_value ();
-
-  Octave_map::const_iterator p = my_map.seek (nm);
-
-  if (p != my_map.end ())
-    retval = my_map.contents (p);
-  else
-    error ("class has no member `%s'", nm.c_str ());
-
-  return retval;
-}
-
 static void
 gripe_invalid_index (void)
 {
   error ("invalid index for class");
 }
 
 static void
 gripe_invalid_index_for_assignment (void)
@@ -279,16 +218,51 @@ make_idx_args (const std::string& type,
       retval = m;
     }
   else
     error ("invalid index for %s", who.c_str ());
 
   return retval;
 }
 
+Cell
+octave_class::dotref (const octave_value_list& idx)
+{
+  Cell retval;
+
+  assert (idx.length () == 1);
+
+  std::string method_class = get_current_method_class ();
+
+  // Find the class in which this method resides before attempting to access
+  // the requested field.
+
+  octave_base_value *obvp = find_parent_class (method_class);
+
+  Octave_map my_map;
+
+  my_map = obvp ? obvp->map_value () : map;
+
+  std::string nm = idx(0).string_value ();
+
+  if (! error_state)
+    {
+      Octave_map::const_iterator p = my_map.seek (nm);
+
+      if (p != my_map.end ())
+	retval = my_map.contents (p);
+      else
+	error ("class has no member `%s'", nm.c_str ());
+    }
+  else
+    gripe_invalid_index ();
+
+  return retval;
+}
+
 octave_value_list
 octave_class::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       int nargout)
 {
   octave_value_list retval;
 
   if (in_class_method ())
@@ -463,78 +437,88 @@ octave_class::subsasgn (const std::strin
 		octave_value_list t_idx = *p;
 
 		octave_value_list key_idx = *++p;
 
 		assert (key_idx.length () == 1);
 
 		std::string key = key_idx(0).string_value ();
 
-		octave_value u;
-
-		if (! map.contains (key))
-		  u = octave_value::empty_conv (type.substr (2), rhs);
-		else
-		  {
-		    Cell map_val = map.contents (key);
-
-		    Cell map_elt = map_val.index (idx.front (), true);
-
-		    u = numeric_conv (map_elt, type.substr (2));
-		  }
-
 		if (! error_state)
 		  {
-		    std::list<octave_value_list> next_idx (idx);
+		    octave_value u;
 
-		    // We handled two index elements, so subsasgn to
-		    // needs to skip both of them.
+		    if (! map.contains (key))
+		      u = octave_value::empty_conv (type.substr (2), rhs);
+		    else
+		      {
+			Cell map_val = map.contents (key);
+
+			Cell map_elt = map_val.index (idx.front (), true);
+
+			u = numeric_conv (map_elt, type.substr (2));
+		      }
 
-		    next_idx.erase (next_idx.begin ());
-		    next_idx.erase (next_idx.begin ());
+		    if (! error_state)
+		      {
+			std::list<octave_value_list> next_idx (idx);
+
+			// We handled two index elements, so subsasgn to
+			// needs to skip both of them.
 
-		    u.make_unique ();
+			next_idx.erase (next_idx.begin ());
+			next_idx.erase (next_idx.begin ());
+
+			u.make_unique ();
 
-		    t_rhs = u.subsasgn (type.substr (2), next_idx, rhs);
+			t_rhs = u.subsasgn (type.substr (2), next_idx, rhs);
+		      }
 		  }
+		else
+		  gripe_invalid_index_for_assignment ();
 	      }
 	    else
 	      gripe_invalid_index_for_assignment ();
 	  }
 	  break;
 
 	case '.':
 	  {
 	    octave_value_list key_idx = idx.front ();
 
 	    assert (key_idx.length () == 1);
 
 	    std::string key = key_idx(0).string_value ();
 
-	    octave_value u;
-
-	    if (! map.contains (key))
-	      u = octave_value::empty_conv (type.substr (1), rhs);
-	    else
-	      {
-		Cell map_val = map.contents (key);
-
-		u = numeric_conv (map_val, type.substr (1));
-	      }
-
 	    if (! error_state)
 	      {
-		std::list<octave_value_list> next_idx (idx);
+		octave_value u;
 
-		next_idx.erase (next_idx.begin ());
+		if (! map.contains (key))
+		  u = octave_value::empty_conv (type.substr (1), rhs);
+		else
+		  {
+		    Cell map_val = map.contents (key);
+
+		    u = numeric_conv (map_val, type.substr (1));
+		  }
 
-		u.make_unique ();
+		if (! error_state)
+		  {
+		    std::list<octave_value_list> next_idx (idx);
+
+		    next_idx.erase (next_idx.begin ());
 
-		t_rhs = u.subsasgn (type.substr (1), next_idx, rhs);
+		    u.make_unique ();
+
+		    t_rhs = u.subsasgn (type.substr (1), next_idx, rhs);
+		  }
 	      }
+	    else
+	      gripe_invalid_index_for_assignment ();
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
 
 	default:
@@ -611,37 +595,42 @@ octave_class::subsasgn (const std::strin
 		      error ("invalid class assignment");
 		  }
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
-	    octave_value_list key_idx = idx.front ();
-
-	    assert (key_idx.length () == 1);
-
-	    std::string key = key_idx(0).string_value ();
-
 	    // Find the class in which this method resides before 
 	    // attempting to access the requested field.
 
 	    std::string method_class = get_current_method_class ();
 
 	    octave_base_value *obvp = find_parent_class (method_class);
 
 	    if (obvp)
 	      {
-		obvp->assign (key, t_rhs);
+		octave_value_list key_idx = idx.front ();
+
+		assert (key_idx.length () == 1);
+
+		std::string key = key_idx(0).string_value ();
 
 		if (! error_state)
 		  {
-		    count++;
-		    retval = octave_value (this);
+		    obvp->assign (key, t_rhs);
+
+		    if (! error_state)
+		      {
+			count++;
+			retval = octave_value (this);
+		      }
+		    else
+		      gripe_failed_assignment ();
 		  }
 		else
 		  gripe_failed_assignment ();
 	      }
 	    else
 	      error ("malformed class");
 	  }
 	  break;
@@ -716,16 +705,47 @@ octave_class::byte_size (void) const
 string_vector
 octave_class::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_class::map_keys()", type_name ());
   return retval;
 }
 
+octave_base_value *
+octave_class::find_parent_class (const std::string& parent_class_name)
+{
+  octave_base_value* retval = 0;
+
+  if (parent_class_name == class_name ())
+    retval = this;
+  else
+    {
+      for (std::list<std::string>::iterator pit = parent_list.begin ();
+	   pit != parent_list.end ();
+	   pit++)
+	{
+	  Octave_map::const_iterator smap = map.seek (*pit);
+
+	  const Cell& tmp = smap->second;
+
+	  octave_value vtmp = tmp(0);
+
+	  octave_base_value *obvp = vtmp.internal_rep ();
+
+	  retval = obvp->find_parent_class (parent_class_name);
+
+	  if (retval)
+	    break;
+	}
+    }
+
+  return retval;
+}
+
 void
 octave_class::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
 void
 octave_class::print_raw (std::ostream& os, bool) const
