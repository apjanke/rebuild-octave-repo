# HG changeset patch
# User jwe
# Date 993608944 0
#      Wed Jun 27 02:29:04 2001 +0000
# Node ID bbe74a066592ee2aeda65d1724129461ba9acc44
# Parent  79474340b3a11d7ffe0d63c2def1d57f4dca2e27
[project @ 2001-06-27 02:29:03 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2001-06-26  Mumit Khan  <khan@nanotech.wisc.edu>
+
+	* c-file-ptr-stream.h (c_file_ptr_buf::c_file_ptr_buf): Add GCC3
+	libstdc++-v3 support.
+	* load-save.cc (save_mat5_binary_element): Cast arguments to the
+	correct type.
+	(save_ascii_data): Eliminate compiler warning.
+	* toplev.cc (system): Prefix std::.
+
 2001-05-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cx-mat.cc: Deleve unnecessary instantiation of assign function.
 	* ov-re-mat.cc: Likewise.
 	* ov-re-nd-array.cc: Likewise.
 	* ov-str-mat.cc: Likewise.
 	* ov-bool-mat.cc: Likewise.
 
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -41,21 +41,20 @@ public:
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
   FILE* stdiofile (void) const { return f; }
 
   c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = ::fclose)
     : 
-#ifdef __SUNPRO_CC
-    std::filebuf (f_arg ? fileno (f_arg) : -1),
+#if defined __GNUC__ && __GNUC__ >= 3
+    std::filebuf (f_arg, std::ios::in | std::ios::out),
 #else
-    std::filebuf (f_arg ? fileno (f_arg) : -1,
-                  0, std::ios::in | std::ios::out),
+    std::filebuf (f_arg ? fileno (f_arg) : -1),
 #endif
     f (f_arg), cf (cf_arg),
     fd (f_arg ? fileno (f_arg) : -1)
     { }
 
   ~c_file_ptr_buf (void);
 
   int_type overflow (int_type);
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4249,17 +4249,18 @@ save_mat5_binary_element (std::ostream& 
 	  }
       }
     }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   contin = os.tellp ();
   os.seekp (fixup);
-  write_mat5_tag (os, miMATRIX, contin - fixup - 8); // the actual length
+  write_mat5_tag (os, miMATRIX, 
+                  static_cast<int>(contin - fixup) - 8); // the actual length
   os.seekp (contin);
 
   return true;
 
  error_cleanup:
   error ("save: error while writing `%s' to MAT file", name.c_str ());
 
   return false;
@@ -4468,17 +4469,17 @@ save_ascii_data (std::ostream& os, const
   if (tc.is_string ())
     {
       ascii_save_type (os, "string array", mark_as_global);
       charMatrix chm = tc.char_matrix_value ();
       int elements = chm.rows ();
       os << "# elements: " << elements << "\n";
       for (int i = 0; i < elements; i++)
 	{
-	  int len = chm.cols ();
+	  unsigned len = chm.cols ();
 	  os << "# length: " << len << "\n";
 	  std::string tstr = chm.row_as_string (i, false, true);
 	  const char *tmp = tstr.data ();
 	  if (tstr.length () > len)
 	    panic_impossible ();
 	  os.write (X_CAST (char *, tmp), len);
 	  os << "\n";
 	}
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -477,17 +477,17 @@ variable @code{status} to the integer @s
 	  // The value of TEXMFDBS that Octave puts in the environment
 	  // will cause trouble if we are asked to run TeX, so we
 	  // should reset it to whatever it was before Octave started.
 	  //
 	  // XXX FIXME XXX -- it would be better to fix the
 	  // kpathsearch library to not always do TeX-specific
 	  // things...
 
-	  static string odb;
+	  static std::string odb;
 
 	  odb = octave_env::getenv ("TEXMFDBS");
 
 	  unwind_protect::add (restore_texmfdbs_envvar, &odb);
 
 	  octave_env::putenv ("TEXMFDBS", octave_original_texmfdbs);
 
 	  if (type == async)
