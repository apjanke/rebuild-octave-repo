# HG changeset patch
# User jwe
# Date 798404952 0
#      Thu Apr 20 19:09:12 1995 +0000
# Node ID e1ddfb12566d46334eaf1ffba1dd1b4df106d319
# Parent  86672dc517f374ab57030e5157b0690557b569a6
[project @ 1995-04-20 18:56:04 by jwe]

diff --git a/info/xmalloc.c b/info/xmalloc.c
--- a/info/xmalloc.c
+++ b/info/xmalloc.c
@@ -38,24 +38,35 @@ static void memory_error_and_abort ();
 /*								    */
 /*		   Memory Allocation and Deallocation.		    */
 /*								    */
 /* **************************************************************** */
 
 /* Return a pointer to free()able block of memory large enough
    to hold BYTES number of bytes.  If the memory cannot be allocated,
    print an error message and abort. */
+
+#if defined (DEBUG_MALLOC_FREE)
+int debug_malloc_free = 0;
+#endif
+
 void *
 xmalloc (bytes)
      int bytes;
 {
   void *temp = (void *)malloc (bytes);
 
   if (!temp)
     memory_error_and_abort ("xmalloc");
+
+#if defined (DEBUG_MALLOC_FREE)
+  if (debug_malloc_free)
+    printf ("%x\n", temp);
+#endif
+
   return (temp);
 }
 
 void *
 xrealloc (pointer, bytes)
      void *pointer;
      int bytes;
 {
@@ -64,16 +75,21 @@ xrealloc (pointer, bytes)
   if (!pointer)
     temp = (void *)malloc (bytes);
   else
     temp = (void *)realloc (pointer, bytes);
 
   if (!temp)
     memory_error_and_abort ("xrealloc");
 
+#if defined (DEBUG_MALLOC_FREE)
+  if (debug_malloc_free)
+    printf ("%x\n", temp);
+#endif
+
   return (temp);
 }
 
 static void
 memory_error_and_abort (fname)
      char *fname;
 {
   fprintf (stderr, "%s: Out of virtual memory!\n", fname);
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -60,37 +60,53 @@ verror (const char *name, const char *fm
 
   char *msg = output_buf.str ();
 
   maybe_write_to_diary_file (msg);
 
   delete [] msg;
 }
 
+// Note that we don't actually print any message if the error string
+// is just "" or "\n".  This allows error ("") and error ("\n") to
+// just set the error state.
+
 static void
 error_1 (const char *name, const char *fmt, va_list args)
 {
   if (error_state != -2)
     {
       if (! error_state)
 	error_state = 1;
 
       if (! suppress_octave_error_messages)
 	{
-	  int len = 0;
-	  if (fmt && *fmt && fmt[(len = strlen (fmt)) - 1] == '\n')
+	  if (fmt)
 	    {
-	      error_state = -2;
-	      char *tmp_fmt = strsave (fmt);
-	      tmp_fmt[len - 1] = '\0';
-	      verror (name, tmp_fmt, args);
-	      delete [] tmp_fmt;
+	      if (*fmt)
+		{
+		  int len = strlen (fmt);
+		  if (fmt[len - 1] == '\n')
+		    {
+		      error_state = -2;
+
+		      if (len > 1)
+			{
+			  char *tmp_fmt = strsave (fmt);
+			  tmp_fmt[len - 1] = '\0';
+			  verror (name, tmp_fmt, args);
+			  delete [] tmp_fmt;
+			}
+		    }
+		  else
+		    verror (name, fmt, args);
+		}
 	    }
 	  else
-	    verror (name, fmt, args);
+	    panic ("error_1: invalid format");
 	}
     }
 }
 
 void
 message (const char *name, const char *fmt, ...)
 {
   va_list args;
@@ -163,17 +179,17 @@ printed.")
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
     {
       if (args(0).is_string ())
 	{
 	  msg = args(0).string_value ();
 
-	  if (! msg || ! *msg)
+	  if (! msg)
 	    return retval;
 	}
       else if (args(0).is_empty ())
 	return retval;
     }
 
   error (msg);
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1334,17 +1334,21 @@ next_token_is_bin_op (int spc_prev, char
   return bin_op;
 }
 
 // Used to delete trailing white space from tokens.
 
 static char *
 strip_trailing_whitespace (char *s)
 {
-  char *retval = strsave (s);
+  static char *retval = 0;
+
+  delete [] retval;
+
+  retval = strsave (s);
 
   char *t = strchr (retval, ' ');
   if (t)
     *t = '\0';
 
   t = strchr (retval, '\t');
   if (t)
     *t = '\0';
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -984,14 +984,52 @@ DEFUN ("system", Fsystem, Ssystem, 2, 1,
 	maybe_page_output (output_buf);
     }
 
   return retval;
 }
 
 DEFALIAS (shell_cmd, system);
 
+#if defined (__GNUG__) && defined (DEBUG_NEW_DELETE)
+int debug_new_delete = 0;
+
+typedef void (*vfp)(void);
+extern vfp __new_handler;
+
+void *
+__builtin_new (size_t sz)
+{
+  void *p;
+
+  /* malloc (0) is unpredictable; avoid it.  */
+  if (sz == 0)
+    sz = 1;
+  p = (void *) malloc (sz);
+  while (p == 0)
+    {
+      (*__new_handler) ();
+      p = (void *) malloc (sz);
+    }
+
+  if (debug_new_delete)
+    cout << "__builtin_new: " << p << endl;
+
+  return p;
+}
+
+void
+__builtin_delete (void *ptr)
+{
+  if (debug_new_delete)
+    cout << "__builtin_delete: " << ptr << endl;
+
+  if (ptr)
+    free (ptr);
+}
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1348,20 +1348,24 @@ maybe_convert_to_ans_assign (tree_expres
     }
   else if (expr->is_assignment_expression ()
 	   || expr->is_prefix_expression ())
     {
       return expr;
     }
   else
     {
+      // XXX FIXME XXX -- making ans_id static, passing its address to
+      // tree_simple_assignment_expression along with a flag to not
+      // delete it seems to create a memory leak.  Hmm.
+
       static symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
-      static tree_identifier ans_id (sr);
+      tree_identifier *ans_id = new tree_identifier (sr);
 
-      return new tree_simple_assignment_expression (&ans_id, expr, 1, 1);
+      return new tree_simple_assignment_expression (ans_id, expr, 0, 1);
     }
 }
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -646,22 +646,50 @@ do_unwind_protect_cleanup_code (void *pt
   tree_statement_list *list = (tree_statement_list *) ptr;
 
   // We want to run the cleanup code without error_state being set,
   // but we need to restore its value, so that any errors encountered
   // in the first part of the unwind_protect are not completely
   // ignored.
 
   unwind_protect_int (error_state);
+  error_state = 0;
 
-  error_state = 0;
+  // Similarly, if we have seen a return or break statement, allow all
+  // the cleanup code to run before returning or handling the break.
+  // We don't have to worry about continue statements because they can
+  // only occur in loops.
+
+  unwind_protect_int (returning);
+  returning = 0;
+
+  unwind_protect_int (breaking);
+  breaking = 0;
 
   if (list)
     list->eval (1);
 
+  // This is the one for breaking.  (The unwind_protects are popped
+  // off the stack in the reverse of the order they are pushed on).
+
+  // XXX FIXME XXX -- inside an unwind_protect, should break work like
+  // a return, or just jump to the end of the unwind_protect block?
+  // The following code makes it just jump to the end of the block.
+
+  run_unwind_protect ();
+  if (breaking)
+    breaking--;
+
+  // This is the one for returning.
+
+  if (returning)
+    discard_unwind_protect ();
+  else
+    run_unwind_protect ();
+
   // We don't want to ignore errors that occur in the cleanup code, so
   // if an error is encountered there, leave error_state alone.
   // Otherwise, set it back to what it was before.
 
   if (error_state)
     discard_unwind_protect ();
   else
     run_unwind_protect ();
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -119,17 +119,18 @@ strsave (const char *s)
 // Concatenate two strings.
 
 char *
 strconcat (const char *s, const char *t)
 {
   int len = strlen (s) + strlen (t);
   char *tmp = new char [len+1];
   strcpy (tmp, s);
-  return strcat (tmp, t);
+  strcat (tmp, t);
+  return tmp;
 }
 
 // Throw away input until a given character is read.
 
 void
 discard_until (istream& stream, char character)
 {
   int c;
@@ -689,24 +690,22 @@ DEFUN ("file_in_path", Ffile_in_path, Sf
 }
 
 
 char *
 file_in_path (const char *name, const char *suffix)
 {
   char *retval = 0;
 
-  char *nm = strsave (name);
+  char *nm = 0;
 
   if (suffix)
-    {
-      char *tmp = nm;
-      nm = strconcat (tmp, suffix);
-      delete [] tmp;
-    }
+    nm = strconcat (name, suffix);
+  else
+    nm = strsave (name);
 
   if (! the_current_working_directory)
     get_working_directory ("file_in_path");
 
   retval = search_path_for_file (user_pref.loadpath, nm);
 
   delete [] nm;
 
