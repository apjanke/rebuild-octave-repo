# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1303911241 -7200
#      Wed Apr 27 15:34:01 2011 +0200
# Node ID 0c896eff7a8015c369ddd766bfe11171ec050282
# Parent  68a13d4f6e150a94aceb5e14a35a7b19d98e3f8b
Removed annoying debug messages from the text editor.

diff --git a/gui//src/BlockArray.cpp b/gui//src/BlockArray.cpp
--- a/gui//src/BlockArray.cpp
+++ b/gui//src/BlockArray.cpp
@@ -213,17 +213,16 @@ void moveBlock(FILE *fion, int cursor, i
         perror("fread");
 
     res = KDE_fseek(fion, newpos * blocksize, SEEK_SET);
     if (res)
         perror("fseek");
     res = fwrite(buffer2, blocksize, 1, fion);
     if (res != 1)
         perror("fwrite");
-    //    printf("moving block %d to %d\n", cursor, newpos);
 }
 
 void BlockArray::decreaseBuffer(size_t newsize)
 {
     if (index < newsize) // still fits in whole
         return;
 
     int offset = (current - (newsize - 1) + size) % size;
diff --git a/gui//src/NumberedCodeEdit.cpp b/gui//src/NumberedCodeEdit.cpp
--- a/gui//src/NumberedCodeEdit.cpp
+++ b/gui//src/NumberedCodeEdit.cpp
@@ -414,29 +414,16 @@ bool NumberedCodeEdit::save(QString path
     delete stream;
     fclose(fl);
     textModifiedOk=false;
     view->document()->setModified(false);
   }else{
     return false;
   }
   
-  /*if(get_config("simple_rcs")=="true")
-  {
-  	QString repository=path+"~~";
-  	QString command("simplercs \""+repository+"\" \""+path+"\"");
-  	QProcess::startDetached(command);
-  	//QProcess::execute(command);
-  	printf("[NumberedTextView::save] Comando: %s\n", command.toLocal8Bit().data() );
-  }
-  else
-  {
-  	//printf("[NumberedTextView::save] No rcs\n");
-  }*/
-  
   return true;
 }
 
 QString NumberedCodeEdit::path()
 {
   return filePath;
 }
 
@@ -480,28 +467,26 @@ static QString startLineInsertText(QStri
 		int x;
 		
 		for(x=0;x<s.size();x++)
 		{
 			if( s.at(x)!=' ' && s.at(x)!='\t' ) break;
 		}
 		
 		QString s1=s.left(x);
-		QString s2=s.right(s.size()-x);
-		//printf("s1=%s s2=%s\n", s1.toLocal8Bit().data(), s2.toLocal8Bit().data() );
+                QString s2=s.right(s.size()-x);
 		list[i]=s1+textToInsert+s2;
 	}
 	
 	return list.join("\n");
 }
 
 static QString startLineRemoveText(QString str, QStringList textToRemove)
 {
 	str.replace(QChar(0x2029), "\n");
-	//printf("str=%s\n", str.toLocal8Bit().data() );
 	
 	QStringList list = str.split("\n");
 	
 	for(int i=0;i<list.size();i++)
 	{
 		QString s=list[i];
 		
 		int x;
@@ -532,18 +517,16 @@ static QString startLineRemoveText(QStri
 		list[i]=s1+s2;
 	}
 	
 	return list.join("\n");
 }
 
 void NumberedCodeEdit::indent()
 {
-	//QTextDocument *doc=textEdit()->document();
-	
 	QTextCursor cursor(textEdit()->textCursor());
 	
 	if( !cursor.hasSelection() ) return;
 	
 	QString str=cursor.selectedText();
 	
 	str=startLineInsertText(str, "\t");
 	
diff --git a/gui//src/SimpleEditor.cpp b/gui//src/SimpleEditor.cpp
--- a/gui//src/SimpleEditor.cpp
+++ b/gui//src/SimpleEditor.cpp
@@ -139,17 +139,16 @@ void SimpleEditor::keyPressEvent(QKeyEve
                 if(line[i] != ' ' && line[i] != '\t') {
                     line.resize(i);
                     break;
                 }
             }
 
             cursor.insertText("\n" + line);
             if(m_automaticIndentationStatement) {
-                    printf("[SimpleEditor::keyPressEvent] automatic_indention_statement_ok=%s\n", line2.toLocal8Bit().data() );
                     QRegExp re("^while .*|^if .*|^for .*|^switch .*|^do$|^try|^function .*|^else$|^elseif .*");
                     if(re.exactMatch(line2.trimmed())) {
                             cursor.insertText("\t");
                     }
             }
             setTextCursor(cursor);
         } else {
             QPlainTextEdit::keyPressEvent(keyEvent);
diff --git a/gui//src/SyntaxHighlighter.cpp b/gui//src/SyntaxHighlighter.cpp
--- a/gui//src/SyntaxHighlighter.cpp
+++ b/gui//src/SyntaxHighlighter.cpp
@@ -29,17 +29,16 @@ SyntaxHighlighter::SyntaxHighlighter(QOb
 
 
 bool SyntaxHighlighter::load(QString file)
 {
 	QXmlStreamReader xml;
 	QStack <QString> stack;
 	QFile fileDevice(file);
 	if (!fileDevice.open(QFile::ReadOnly | QFile::Text)) {
-	         printf("Error al abrir el archivo\n");
 	         return false;
 	}
 	
 	xml.setDevice(&fileDevice);
 	
 	QMap <QString,QString> values;
 	
 	QVector<QString> xmlMainItems;
@@ -114,17 +113,16 @@ SyntaxHighlighter::Rule1st SyntaxHighlig
 	rule1st.rule=-1;
 	
 	for(int i=0; i<highlightingRules.size(); i++)
 	{
 		HighlightingRule *rule=&(highlightingRules[i]);
 		
 		QRegExp *expression = &(rule->pattern);
 		int index = rule->lastFound;
-		//printf("[Syntax::highlight1stRule] i=%d pos=%d startIndex=%d\n", i, index, startIndex);
 		if(index>-1 && index<startIndex)
 		{
 			rule->lastFound = index = expression->indexIn(text, startIndex);
 		}
 		if ( index>-1 && index<rule1st.startIndex )
 		{
 			rule1st.startIndex=index;
 			rule1st.length=expression->matchedLength();
@@ -214,19 +212,16 @@ void SyntaxHighlighter::findBrackets(con
 			bracket.pos=index;
 			bracket.type=i;
 			bracket.length=rule.startPattern.matchedLength();
 			bracket.startBracketOk=true;
 			
 			startIndex=index+bracket.length;
 			
 			insertInOrder(blockData, bracket);
-			
-			//printf("[Syntax::findBrackets] bracket.pos=%d bracket.type=%d bracket.len=%d bracket.start=%d startIndex=%d\n", bracket.pos, bracket.type, bracket.length, (bracket.startBracketOk), startIndex );
-			
 			index = rule.startPattern.indexIn(text, startIndex);
 		}
 		
 		startIndex=start;
 		
 		index = rule.endPattern.indexIn(text, startIndex);
 		
 		
@@ -309,30 +304,22 @@ void SyntaxHighlighter::highlightBlock (
 	Rule1st rule1st, blockRule1st;
 	
 	//Find initial matches
 	for(int i=0; i<highlightingRules.size(); i++)
 	{
 		HighlightingRule *rule= &(highlightingRules[i]);
 		QRegExp *expression = &(rule->pattern);
 		int index = expression->indexIn(text, startIndex);
-		rule->lastFound = index;
-		//printf("[Syntax::highlightBlock] index=%d pos=%d \n", index, expression->pos(0));
+                rule->lastFound = index;
 	}
-	
-	//printf("[Syntax::highlightBlock] Find initial matches \n");
-	
+
 	rule1st=highlight1stRule( text, startIndex);
 	blockRule1st=highlight1stBlockRule( text, startIndex);
-	
-	//if(rule1st.rule<0 && blockRule1st.rule<0)
-	//{
-	//	findBrackets(text, startIndex, -1, blockData);
-	//}
-	//else 
+
 	while(rule1st.rule>=0 || blockRule1st.rule>=0)
 	{
 		if(rule1st.rule>=0 && blockRule1st.rule>=0)
 		{
 			if
 				( 
 					rule1st.startIndex<blockRule1st.startIndex
 					|| 
@@ -361,20 +348,16 @@ void SyntaxHighlighter::highlightBlock (
 			rule1st=highlight1stRule( text, startIndex);
 		}
 		else
 		{
 			findBrackets(text, startIndex, blockRule1st.startIndex, blockData);
 			startIndex=blockRuleSetFormat(text,blockRule1st);
 			blockRule1st=highlight1stBlockRule( text, startIndex);
 		}
-		
-		//Finds next 1st rule
-		//rule1st=highlight1stRule( text, startIndex);
-		//blockRule1st=highlight1stBlockRule( text, startIndex);
 	}
 	
 	findBrackets(text,startIndex, -1, blockData);
 	
 	setCurrentBlockUserData(blockData);
 }
 
 /**Search brackets in one QTextBlock.*/
@@ -416,43 +399,30 @@ void SyntaxHighlighter::setFormatPairBra
 	if(blockData==NULL) return;
 	
 	int pos=cursor.position()-block.position();
 	
 	BlockData::Bracket *bracket1;
 	QTextBlock block_bracket1=block;
 	
 	int i=blockData->brackets.size()-1;
-	
-	/*
-	printf("[Syntax::setFormatPairBrackets] brackets.size=%d\n", i+1);
-	for(int x=0;x<blockData->brackets.size();x++)
-	{
-		BlockData::Bracket *bracket=&(blockData->brackets[x]);
-		printf("[Syntax::setFormatPairBrackets] bracket.pos=%d bracket.type=%d bracket.len=%d bracket.start=%d\n", bracket->pos, bracket->type, bracket->length, (bracket->startBracketOk) );
-	}
-	*/
-	
-	
 	for(; i>=0; i--)
 	{
 		BlockData::Bracket *bracket=&(blockData->brackets[i]);
 		if(bracket->pos==pos)
 		{
 			bracket1=bracket;
 			break;
 		}
 	}
 	
 	if(i<0) return;
 	
 	int increment=(bracket1->startBracketOk) ? +1:-1;
 	int bracketsCount=0;
-	//i+=increment;
-	
 	//Looks in this block the other bracket
 	BlockData::Bracket *bracket2=NULL;
 	QTextBlock block_bracket2=block;
 	
 	bracket2=searchBracket( i, increment, bracketsCount, blockData, bracket1);
 	
 	{ //Search brackets in other blocks
 		while( bracket2==NULL )
diff --git a/gui//src/TerminalDisplay.cpp b/gui//src/TerminalDisplay.cpp
--- a/gui//src/TerminalDisplay.cpp
+++ b/gui//src/TerminalDisplay.cpp
@@ -741,18 +741,16 @@ void TerminalDisplay::setCursorPos(const
 {
     QPoint tL  = contentsRect().topLeft();
     int    tLx = tL.x();
     int    tLy = tL.y();
 
     int xpos, ypos;
     ypos = _topMargin + tLy + _fontHeight*(cury-1) + _fontAscent;
     xpos = _leftMargin + tLx + _fontWidth*curx;
-    //setMicroFocusHint(xpos, ypos, 0, _fontHeight); //### ???
-    // fprintf(stderr, "x/y = %d/%d\txpos/ypos = %d/%d\n", curx, cury, xpos, ypos);
     _cursorLine = cury;
     _cursorCol = curx;
 }
 #endif
 
 // scrolls the image by 'lines', down if lines > 0 or up otherwise.
 //
 // the terminal emulation keeps track of the scrolling of the character 
