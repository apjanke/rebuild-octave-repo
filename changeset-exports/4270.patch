# HG changeset patch
# User jwe
# Date 1041620111 0
#      Fri Jan 03 18:55:11 2003 +0000
# Node ID e7e10ce42860883ceb32014c5a9c083e1064a5bc
# Parent  5b075bd78a91ba2e85d8d15009af5ab26ba8fc2a
[project @ 2003-01-03 18:52:59 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Default value of BUILD_CXX is $CXX, not g++.
+
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Fail on all gcc 1.x and 2.x versions.
 
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (OCTAVE_LOCAL_BUFFER): New macro.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.402 $)
+AC_REVISION($Revision: 1.403 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -325,19 +325,19 @@ OCTAVE_CXX_PREPENDS_UNDERSCORE
 
 if test "$cross_compiling" = yes; then
   BUILD_CC="gcc"
   BUILD_CFLAGS="-O2 -g"
   BUILD_CXX="g++"
   BUILD_CXXFLAGS="-O2 -g"
   BUILD_EXEEXT=""
 else
-  BUILD_CC=$CC
+  BUILD_CC="$CC"
   BUILD_CFLAGS="-O2 -g"
-  BUILD_CXX="g++"
+  BUILD_CXX="$CXX"
   BUILD_CXXFLAGS="-O2 -g"
   BUILD_EXEEXT="$EXEEXT"
 fi
 
 AC_ARG_VAR(BUILD_CC, [build system C compiler (used if cross compiling)])
 AC_ARG_VAR(BUILD_CFLAGS, [build system C compiler flags (used if cross compiling)])
 AC_ARG_VAR(BUILD_CXX, [build system C++ compiler (used if cross compiling)])
 AC_ARG_VAR(BUILD_CXXFLAGS, [build system C++ compiler flags (used if cross compiling)])
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.cc: Add std:: qualifiers to memcpy calls.
+
 2003-01-03  Paul Kienzle <pkienzle@users.sf.net>
 
 	* misc/quit.h: Move #include <new> outside extern "C" block.
 	* misc/f77-fcn.h: Move #include "quit.h" outside extern "C" block.
 
 2002-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/quit.h (BEGIN_INTERRUPT_WITH_EXCEPTIONS,
diff --git a/libcruft/misc/quit.cc b/libcruft/misc/quit.cc
--- a/libcruft/misc/quit.cc
+++ b/libcruft/misc/quit.cc
@@ -35,23 +35,23 @@ Software Foundation, 59 Temple Place - S
 
 #include "quit.h"
 
 octave_jmp_buf current_context;
 
 void
 octave_save_current_context (void *save_buf)
 {
-  memcpy (save_buf, current_context, sizeof (octave_jmp_buf));
+  std::memcpy (save_buf, current_context, sizeof (octave_jmp_buf));
 }
 
 void
 octave_restore_current_context (void *save_buf)
 {
-  memcpy (current_context, save_buf, sizeof (octave_jmp_buf));
+  std::memcpy (current_context, save_buf, sizeof (octave_jmp_buf));
 }
 
 void
 octave_jump_to_enclosing_context (void)
 {
 #if defined (OCTAVE_HAVE_SIG_JUMP)
   siglongjmp (current_context, 1);
 #else
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -551,25 +551,28 @@ assign (Array2<LT>& lhs, const Array2<RT
 			{
 			  int ii = idx_i.elem (i);
 			  lhs.elem (ii, jj) = scalar;
 			}
 		    }
 		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
-		  MAYBE_RESIZE_LHS;
-
-		  for (int j = 0; j < m; j++)
+		  if (n > 0 && m > 0)
 		    {
-		      int jj = idx_j.elem (j);
-		      for (int i = 0; i < n; i++)
+		      MAYBE_RESIZE_LHS;
+
+		      for (int j = 0; j < m; j++)
 			{
-			  int ii = idx_i.elem (i);
-			  lhs.elem (ii, jj) = rhs.elem (i, j);
+			  int jj = idx_j.elem (j);
+			  for (int i = 0; i < n; i++)
+			    {
+			      int ii = idx_i.elem (i);
+			      lhs.elem (ii, jj) = rhs.elem (i, j);
+			    }
 			}
 		    }
 		}
 	      else if (n == 0 && m == 0)
 		{
 		  if (! ((rhs_nr == 1 && rhs_nc == 1)
 			 || (rhs_nr == 0 && rhs_nc == 0)))
 		    {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (assign): If assignment conforms but the RHS and
+	index are empty matrices, don't do anything.
+
 2002-12-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.cc (make_retval, free_c_array, make_c_names,
 	delete_c_names): New helper functions.
 	(dir_path::find_first_of): New function.
 	(dir_path::find_all_first_of): Likewise.
 	* pathsearch.h: Provide decls.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,19 +1,16 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* symtab.cc (symbol_table::rename): Explicitly convert C string to
 	std::string so type of second arg of ?: matches third.
 	(symbol_table::lookup): Likewise.
 
 	* mappers.cc: Remove std:: qualifiers from C library names.
 
-	* pr-output.cc: Replace std:: qualifiers on pow with STD_QUAL.
-	(STD_QUAL): New macro.
-
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-exp.h (tree_expression::has_magic_end): New pure virtual function.
 	* pt-id.h (tree_identifier::has_magic_end): New function.
 	* pt-colon.h (tree_colon_expression::has_magic_end): Likewise.
 	* pt-idx.h (tree_index_expression::has_magic_end): Likewise.
 	* pt-const.h (tree_constant::has_magic_end): Likewise.
 	* pt-unop.h (tree_unary_expression::has_magic_end): Likewise.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -51,22 +51,16 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
-#if defined (__GNUG__)
-#define STD_QUAL std::
-#else
-#define STD_QUAL
-#endif
-
 // TRUE means use a scaled fixed point format for `format long' and
 // `format short'.
 static bool Vfixed_point_format;
 
 // The maximum field width for a number printed by the default output
 // routines.
 static int Voutput_max_field_width;
 
@@ -500,17 +494,17 @@ set_format (const Matrix& m, int& fw, do
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
 			  int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
@@ -851,17 +845,17 @@ set_format (const ComplexMatrix& cm, int
     ? 0 : static_cast<int> (floor (log10 (i_max_abs) + 1.0));
 
   int i_x_min = i_min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (i_min_abs) + 1.0));
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
 			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
@@ -992,17 +986,17 @@ set_format (const Range& r, int& fw, dou
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || all_ints) ? 1.0 : STD_QUAL pow (10.0, x_max - 1);
+  scale = (x_max == 0 || all_ints) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_range_format (sign, x_max, x_min, all_ints, fw);
 }
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
