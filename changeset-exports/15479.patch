# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349248042 14400
#      Wed Oct 03 03:07:22 2012 -0400
# Node ID 3f447bcc8488525aca724260a45656b75abdf89a
# Parent  b1ff8c83e232a718b498d686a596d822a79d77c2
set Venable_jit_debugging and Venable_jit_compiler variables directly from command line options

* octave.cc (octave_process_command_line): Call Fenable_jit_debugging
and Fenable_jit_compiler directly.
(octave_initialize_interpreter): Don't call bind_internal_variable to
set Venable_jit_debugging and Venable_jit_compiler
(no_jit_compiler_option, jit_debug_option): Delete unused static
variables.

* octave.cc, pt-jit.h, pt-jit.cc: Use jit_debugging consistently
instead of mixing jit_debug and jit_debugging.

diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "ov.h"
 #include "pt-all.h"
 #include "pt-jit.h"
 #include "symtab.h"
 #include "variables.h"
 
-bool Venable_jit_debug = false;
+bool Venable_jit_debugging = false;
 
 bool Venable_jit_compiler = true;
 
 #ifdef HAVE_LLVM
 
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
@@ -1860,23 +1860,23 @@ tree_jit::trip_count (const octave_value
   // unsupported type
   return 0;
 }
 
 
 void
 tree_jit::optimize (llvm::Function *fn)
 {
-  if (Venable_jit_debug)
+  if (Venable_jit_debugging)
     llvm::verifyModule (*module);
 
   module_pass_manager->run (*module);
   pass_manager->run (*fn);
 
-  if (Venable_jit_debug)
+  if (Venable_jit_debugging)
     {
       std::string error;
       llvm::raw_fd_ostream fout ("test.bc", error,
                                  llvm::raw_fd_ostream::F_Binary);
       llvm::WriteBitcodeToFile (module, fout);
     }
 }
 
@@ -1895,17 +1895,17 @@ jit_function_info::jit_function_info (tr
 
   try
     {
       jit_convert conv (fcn, argument_types);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
       infer.infer ();
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           jit_block_list& blocks = infer.get_blocks ();
           jit_block *entry_block = blocks.front ();
           entry_block->label ();
           std::cout << "-------------------- Compiling function ";
           std::cout << "--------------------\n";
 
           tree_print_code tpc (std::cout);
@@ -1917,17 +1917,17 @@ jit_function_info::jit_function_info (tr
 
       jit_factory& factory = conv.get_factory ();
       llvm::Module *module = tjit.get_module ();
       jit_convert_llvm to_llvm;
       raw_fn = to_llvm.convert_function (module, infer.get_blocks (),
                                          factory.constants (), fcn,
                                          argument_types);
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           std::cout << "-------------------- raw function ";
           std::cout << "--------------------\n";
           std::cout << *raw_fn.to_llvm () << std::endl;
           llvm::verifyFunction (*raw_fn.to_llvm ());
         }
 
       std::string wrapper_name = fcn.name () + "_wrapper";
@@ -1965,33 +1965,33 @@ jit_function_info::jit_function_info (tr
           result = builder.CreateBitCast (zero, any_t->to_llvm ());
         }
 
       wrapper.do_return (builder, result);
 
       llvm::Function *llvm_function = wrapper.to_llvm ();
       tjit.optimize (llvm_function);
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           std::cout << "-------------------- optimized and wrapped ";
           std::cout << "--------------------\n";
           std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
 
       llvm::ExecutionEngine* engine = tjit.get_engine ();
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
     }
   catch (const jit_fail_exception& e)
     {
       argument_types.clear ();
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
 
       wrapper.erase ();
       raw_fn.erase ();
     }
@@ -2115,17 +2115,17 @@ jit_info::compile (tree_jit& tjit, tree&
   try
     {
       jit_convert conv (tee, for_bounds);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
 
       infer.infer ();
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           jit_block_list& blocks = infer.get_blocks ();
           jit_block *entry_block = blocks.front ();
           entry_block->label ();
           std::cout << "-------------------- Compiling tree --------------------\n";
           std::cout << tee.str_print_code () << std::endl;
           blocks.print (std::cout, "octave jit ir");
         }
@@ -2135,35 +2135,35 @@ jit_info::compile (tree_jit& tjit, tree&
       llvm_function = to_llvm.convert_loop (tjit.get_module (),
                                             infer.get_blocks (),
                                             factory.constants ());
       arguments = to_llvm.get_arguments ();
       bounds = conv.get_bounds ();
     }
   catch (const jit_fail_exception& e)
     {
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
     }
 
   if (llvm_function)
     {
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           std::cout << "-------------------- llvm ir --------------------";
           std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
 
       tjit.optimize (llvm_function);
 
-      if (Venable_jit_debug)
+      if (Venable_jit_debugging)
         {
           std::cout << "-------------------- optimized llvm ir "
                     << "--------------------\n";
           std::cout << *llvm_function << std::endl;
         }
 
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
@@ -2175,27 +2175,27 @@ jit_info::find (const vmap& extra_vars, 
 {
   vmap::const_iterator iter = extra_vars.find (vname);
   return iter == extra_vars.end () ? symbol_table::varval (vname)
     : *iter->second;
 }
 
 #endif
 
-DEFUN (enable_jit_debug, args, nargout,
+DEFUN (enable_jit_debugging, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} enable_jit_debug ()\n\
+@deftypefn {Built-in Function} {} enable_jit_debugging ()\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
-  return SET_INTERNAL_VARIABLE (enable_jit_debug);
+  return SET_INTERNAL_VARIABLE (enable_jit_debugging);
 #else
-  warning ("enable_jit_debug: JIT compiling not available in this version of Octave");
+  warning ("enable_jit_debugging: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
 DEFUN (enable_jit_compiler, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} enable_jit_compiler ()\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
diff --git a/libinterp/interp-core/pt-jit.h b/libinterp/interp-core/pt-jit.h
--- a/libinterp/interp-core/pt-jit.h
+++ b/libinterp/interp-core/pt-jit.h
@@ -436,14 +436,14 @@ private:
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
 
 #endif
 
 // If TRUE, enable JIT compiler debugging/tracing.
-extern bool Venable_jit_debug;
+extern bool Venable_jit_debugging;
 
 // If TRUE, enable JIT compiler.
 extern bool Venable_jit_compiler;
 
 #endif
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -121,24 +121,16 @@ static bool verbose_flag = false;
 // If TRUE, force the GUI to start.
 // (--force-gui)
 static bool force_gui_option = false;
 
 // If TRUE don't start the GUI.
 // (--no-gui)
 static bool no_gui_option = false;
 
-// If TRUE, disable the JIT compiler.
-// (--no-jit-compiler)
-static bool no_jit_compiler_option = false;
-
-// If TRUE, enable JIT compiler debugging/tracing.
-// (--jit-debug)
-static bool jit_debug_option = false;
-
 // If TRUE, force readline command line editing.
 // (--line-editing)
 static bool forced_line_editing = false;
 
 // If TRUE, initialize history list from saved history file.
 // (--no-history; -H)
 static bool read_history_file = true;
 
@@ -158,17 +150,17 @@ static std::string image_path;
 // (--no-window-system)
 static bool no_window_system = false;
 
 // Usage message
 static const char *usage_string =
   "octave [-HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
        [--exec-path path] [--force-gui] [--help] [--image-path path]\n\
        [--info-file file] [--info-program prog] [--interactive]\n\
-       [--jit-debug] [--line-editing] [--no-gui] [--no-history]\n\
+       [--jit-debugging] [--line-editing] [--no-gui] [--no-history]\n\
        [--no-init-file] [--no-init-path] [--no-jit-compiler]\n\
        [--no-line-editing] [--no-site-file] [--no-window-system]\n\
        [-p path] [--path path] [--silent] [--traditional]\n\
        [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the '+' must come first
 // to prevent getopt from permuting arguments!
@@ -185,17 +177,17 @@ static bool persist = false;
 #define BUILT_IN_DOCSTRINGS_FILE_OPTION 1
 #define DOC_CACHE_FILE_OPTION 2
 #define EVAL_OPTION 3
 #define EXEC_PATH_OPTION 4
 #define FORCE_GUI_OPTION 5
 #define IMAGE_PATH_OPTION 6
 #define INFO_FILE_OPTION 7
 #define INFO_PROG_OPTION 8
-#define JIT_DEBUG_OPTION 9
+#define JIT_DEBUGGING_OPTION 9
 #define LINE_EDITING_OPTION 10
 #define NO_GUI_OPTION 11
 #define NO_INIT_FILE_OPTION 12
 #define NO_INIT_PATH_OPTION 13
 #define NO_JIT_COMPILER_OPTION 14
 #define NO_LINE_EDITING_OPTION 15
 #define NO_SITE_FILE_OPTION 16
 #define NO_WINDOW_SYSTEM_OPTION 17
@@ -211,17 +203,17 @@ struct option long_opts[] = {
   { "eval",                     required_argument, 0, EVAL_OPTION },
   { "exec-path",                required_argument, 0, EXEC_PATH_OPTION },
   { "force-gui",                no_argument,       0, FORCE_GUI_OPTION },
   { "help",                     no_argument,       0, 'h' },
   { "image-path",               required_argument, 0, IMAGE_PATH_OPTION },
   { "info-file",                required_argument, 0, INFO_FILE_OPTION },
   { "info-program",             required_argument, 0, INFO_PROG_OPTION },
   { "interactive",              no_argument,       0, 'i' },
-  { "jit-debug",                no_argument,       0, JIT_DEBUG_OPTION },
+  { "jit-debugging",            no_argument,       0, JIT_DEBUGGING_OPTION },
   { "line-editing",             no_argument,       0, LINE_EDITING_OPTION },
   { "no-gui",                   no_argument,       0, NO_GUI_OPTION },
   { "no-history",               no_argument,       0, 'H' },
   { "no-init-file",             no_argument,       0, NO_INIT_FILE_OPTION },
   { "no-init-path",             no_argument,       0, NO_INIT_PATH_OPTION },
   { "no-jit-compiler",          no_argument,       0, NO_JIT_COMPILER_OPTION },
   { "no-line-editing",          no_argument,       0, NO_LINE_EDITING_OPTION },
   { "no-site-file",             no_argument,       0, NO_SITE_FILE_OPTION },
@@ -797,18 +789,18 @@ octave_process_command_line (int argc, c
             Vinfo_file = optarg;
           break;
 
         case INFO_PROG_OPTION:
           if (optarg)
             Vinfo_program = optarg;
           break;
 
-        case JIT_DEBUG_OPTION:
-          jit_debug_option = true;
+        case JIT_DEBUGGING_OPTION:
+          Fenable_jit_debugging (octave_value (true));
           break;
 
         case LINE_EDITING_OPTION:
           forced_line_editing = true;
           break;
 
         case NO_GUI_OPTION:
           no_gui_option = true;
@@ -818,17 +810,17 @@ octave_process_command_line (int argc, c
           read_init_files = false;
           break;
 
         case NO_INIT_PATH_OPTION:
           set_initial_path = false;
           break;
 
         case NO_JIT_COMPILER_OPTION:
-          no_jit_compiler_option = true;
+          Fenable_jit_compiler (octave_value (false));
           break;
 
         case NO_LINE_EDITING_OPTION:
           line_editing = false;
           break;
 
         case NO_SITE_FILE_OPTION:
           read_site_files = 0;
@@ -878,21 +870,16 @@ octave_initialize_interpreter (int argc,
 
   octave_env::set_program_name (argv[0]);
 
   octave_program_invocation_name = octave_env::get_program_invocation_name ();
   octave_program_name = octave_env::get_program_name ();
 
   octave_thread::init ();
 
-  // The order of these calls is important.  The call to
-  // install_builtins must come before the option settings are processed
-  // because some command line options override defaults by calling
-  // bind_internal_variable.
-
   init_signals ();
 
   sysdep_init ();
 
   octave_ieee_init ();
 
   // The idea here is to force xerbla to be referenced so that we will
   // link to our own version instead of the one provided by the BLAS
@@ -929,22 +916,16 @@ octave_initialize_interpreter (int argc,
     set_exec_path (exec_path);
 
   if (! image_path.empty ())
     set_image_path (image_path);
 
   if (no_window_system)
     display_info::no_window_system ();
 
-  if (jit_debug_option)
-    bind_internal_variable ("enable_jit_debugging", true);
-
-  if (no_jit_compiler_option)
-    bind_internal_variable ("enable_jit_compiler", false);
-
   // Make sure we clean up when we exit.  Also allow users to register
   // functions.  If we don't have atexit or on_exit, we're going to
   // leave some junk files around if we exit abnormally.
 
   atexit (do_octave_atexit);
 
   // Is input coming from a terminal?  If so, we are probably
   // interactive.
