# HG changeset patch
# User jwe
# Date 819442546 0
#      Wed Dec 20 06:55:46 1995 +0000
# Node ID 23aa282707e8eca5069604447aa4b329dc5e2215
# Parent  643b55bb57dd54660604edc006ba3933a4a44ca7
[project @ 1995-12-20 06:53:12 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 // Instantiate Arrays of Complex values.
 
 #include "Array.h"
 #include "Array.cc"
 
-#include <Complex.h>
+#include "oct-cmplx.h"
 
 template class ArrayRep<Complex>;
 template class Array<Complex>;
 template class Array2<Complex>;
 template class DiagArray<Complex>;
 
 template void assign (Array<Complex>&, const Array<Complex>&);
 template void assign (Array<Complex>&, const Array<double>&);
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -26,22 +26,21 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (zgemv, ZGEMV) (const char*, const int&, const int&,
 			      const Complex&, const Complex*,
 			      const int&, const Complex*, const int&,
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -26,21 +26,20 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Complex Diagonal Matrix class
 
 ComplexDiagMatrix::ComplexDiagMatrix (const RowVector& a)
   : MDiagArray<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
     elem (i, i) = a.elem (i);
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -30,24 +30,23 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cfloat>
 
 #include <iostream.h>
 
 #include <sys/types.h> // XXX FIXME XXX
 
-#include <Complex.h>
-
 #include "CmplxDET.h"
 #include "CmplxSVD.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (zgemm, ZGEMM) (const char*, const char*, const int&,
 			      const int&, const int&, const Complex&,
 			      const Complex*, const int&,
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -23,21 +23,20 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_ComplexMatrix_h)
 #define octave_ComplexMatrix_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#include <Complex.h>
-
 #include "MArray.h"
 
 #include "mx-defs.h"
+#include "oct-cmplx.h"
 
 class ComplexMatrix : public MArray2<Complex>
 {
 friend class Matrix;
 friend class ComplexCHOL;
 friend class ComplexHESS;
 friend class ComplexLU;
 friend class ComplexQR;
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -26,22 +26,21 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (zgemv, ZGEMV) (const char*, const int&, const int&,
 			      const Complex&, const Complex*,
 			      const int&, const Complex*, const int&,
diff --git a/liboctave/CmplxDET.cc b/liboctave/CmplxDET.cc
--- a/liboctave/CmplxDET.cc
+++ b/liboctave/CmplxDET.cc
@@ -27,19 +27,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include <Complex.h>
-
 #include "CmplxDET.h"
+#include "oct-cmplx.h"
 
 int
 ComplexDET::value_will_overflow (void) const
 {
   return det[2].real () + 1 > log10 (DBL_MAX) ? 1 : 0;
 }
 
 int
diff --git a/liboctave/CmplxDET.h b/liboctave/CmplxDET.h
--- a/liboctave/CmplxDET.h
+++ b/liboctave/CmplxDET.h
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_ComplexDET_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
-#include <Complex.h>
+#include "oct-cmplx.h"
 
 class ComplexDET
 {
   friend class ComplexMatrix;
 
 public:
 
   ComplexDET (void) { }
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 // Instantiate MArrays of Complex values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
-#include <Complex.h>
+#include "oct-cmplx.h"
 
 template class MArray<Complex>;
 template class MArray2<Complex>;
 template class MDiagArray<Complex>;
 
 template MArray<Complex>
 operator + (const MArray<Complex>& a, const Complex& s);
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -26,17 +26,17 @@ MATRIX_INC = Array.h Array-idx.h MArray.
 	dColVector.h dDiagMatrix.h dMatrix.h dRowVector.h dbleAEPBAL.h \
 	dbleCHOL.h dbleDET.h dbleGEPBAL.h dbleHESS.h dbleLU.h dbleQR.h \
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
 INCLUDES = Bounds.h CollocWt.h DAE.h DAEFunc.h FEGrid.h	FSQP.h \
 	LinConst.h LP.h LPsolve.h NLConst.h NLEqn.h NLFunc.h NLP.h \
 	NPSOL.h ODE.h ODEFunc.h Objective.h QLD.h QP.h QPSOL.h \
 	Quad.h Range.h base-min.h f77-uscore.h idx-vector.h \
-	lo-error.h sun-utils.h \
+	lo-error.h oct-cmplx.h sun-utils.h \
 	$(MATRIX_INC)
 
 TEMPLATE_SRC = Array.cc MArray.cc
 
 TI_SRC = Array-C.cc Array-c.cc Array-i.cc Array-d.cc Array-s.cc \
 	 MArray-C.cc MArray-c.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC = Array-ext.cc CColVector.cc CDiagMatrix.cc CMatrix.cc \
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -26,22 +26,21 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (dgemv, DGEMV) (const char*, const int&, const int&,
 			      const double&, const double*,
 			      const int&, const double*, const int&,
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -26,21 +26,20 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Diagonal Matrix class.
 
 int
 DiagMatrix::operator == (const DiagMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -32,24 +32,23 @@ Software Foundation, 59 Temple Place - S
 #include <cfloat>
 #include <cstdio>
 #include <cstring>
 
 #include <iostream.h>
 
 #include <sys/types.h>  // XXX FIXME XXX
 
-#include <Complex.h>
-
 #include "dbleDET.h"
 #include "dbleSVD.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (dgemm, DGEMM) (const char*, const char*, const int&,
 			      const int&, const int&, const double&,
 			      const double*, const int&,
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -26,22 +26,21 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
-#include <Complex.h>
-
 #include "f77-uscore.h"
 #include "lo-error.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
+#include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
   int F77_FCN (dgemv, DGEMV) (const char*, const int&, const int&,
 			      const double&, const double*,
 			      const int&, const double*, const int&,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -84,17 +84,17 @@ IDX_VEC_REP::idx_vector_rep (const Colum
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
   colon_equiv = 0;
   colon = 0;
 
-  int len = v.length ();
+  len = v.length ();
 
   orig_nr = len;
   orig_nc = 1;
 
   if (len == 0)
     {
       num_zeros = 0;
       num_ones = 0;
@@ -297,20 +297,20 @@ IDX_VEC_REP::maybe_convert_one_zero_to_i
 	  delete [] data;
 	  data = 0;
 	}
       else
 	{
 	  assert (num_ones + num_zeros == len);
 
 	  int *new_data = new int [num_ones];
-	  int count = 0;
+	  int k = 0;
 	  for (int i = 0; i < len; i++)
 	    if (data[i] == 0)
-	      new_data[count++] = i;
+	      new_data[k++] = i;
 
 	  delete [] data;
 	  len = num_ones;
 	  data = new_data;
 
 	  min_val = max_val = data[0];
 
 	  int i = 0;
@@ -335,50 +335,50 @@ IDX_VEC_REP::checkelem (int n) const
       (*current_liboctave_error_handler) ("idx-vector: index out of range");
       return 0;
     }
 
   return elem (n);
 }
 
 static inline int
-intcmp (int *i, int *j)
+intcmp (int *ii, int *jj)
 {
-  return (*i - *j);
+  return (*ii - *jj);
 }
 
 static inline void
-sort_data (int *d, int len)
+sort_data (int *d, int l)
 {
-  qsort ((void *) d, len, sizeof (int),
+  qsort ((void *) d, l, sizeof (int),
 	 (int (*)(const void*, const void*)) intcmp);
 }
 
 static inline int
-make_uniq (int *d, int len)
+make_uniq (int *d, int l)
 {
   int k = 0;
-  for (int i = 1; i < len; i++)
+  for (int ii = 1; k < l; ii++)
     {
-      if (d[i] != d[k])
+      if (d[ii] != d[k])
 	{
 	  k++;
-	  d[k] = d[i];
+	  d[k] = d[ii];
 	}
     }
   return k+1;
 }
 
 static inline int *
-copy_data (const int *d, int len)
+copy_data (const int *d, int l)
 {
-  int *new_data = new int [len];
+  int *new_data = new int [l];
 
-  for (int i = 0; i < len; i++)
-    new_data[i] = d[i];
+  for (int ii = 0; ii < l; ii++)
+    new_data[ii] = d[ii];
 
   return new_data;
 }
 
 int
 IDX_VEC_REP::is_colon_equiv (int n, int sort)
 {
   if (! colon_equiv_checked)
@@ -420,18 +420,18 @@ IDX_VEC_REP::shorten (int n)
   else
     (*current_liboctave_error_handler)
       ("idx_vector::shorten: internal error!");
 }
 
 ostream&
 IDX_VEC_REP::print (ostream& os) const
 {
-  for (int i = 0; i < len; i++)
-    os << data[i] << "\n";
+  for (int ii = 0; ii < len; ii++)
+    os << data[ii] << "\n";
   return os;
 }
 
 int
 IDX_VEC_REP::freeze (int z_len, const char *tag,
 		     int prefer_zero_one, int resize_ok)
 {
   if (frozen)
@@ -447,18 +447,18 @@ IDX_VEC_REP::freeze (int z_len, const ch
   else
     {
       if (len == 0)
 	frozen_len = 0;
       else
 	{
 	  maybe_convert_one_zero_to_idx (z_len, prefer_zero_one);
 
-	  int max_val = max ();
-	  int min_val = min ();
+	  max_val = max ();
+	  min_val = min ();
 
 	  if (min_val < 0)
 	    {
 	      if (tag)
 		(*current_liboctave_error_handler)
 		  ("invalid %s index = %d", tag, min_val+1);
 	      else
 		(*current_liboctave_error_handler)
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -16,17 +16,17 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
-#include <Complex.h>
+#include "oct-cmplx.h"
 
 // But first, some helper functions...
 
 // XXX FIXME XXX -- these need to be done with templates...
 
 static inline int
 equal (const char *x, const char *y, int len)
 {
