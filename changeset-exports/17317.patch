# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1377213788 14400
#      Thu Aug 22 19:23:08 2013 -0400
# Node ID 56fe31b248debaee1d5a835eb72ffe0cd674204c
# Parent  8e2906e2fb2660c00ccfa66e6f367c5e6a093f92
disallow ~ in global and persistent declaration lists

* oct-pasre.in.yy (decl2): Omit magic_tilde.
(param_list2): Use param_list_elt instead of decl2
(param_list_elt): New non-terminal constructed from decl2 and
magic_tilde.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -254,17 +254,17 @@ make_statement (T *arg)
 %type <tree_command_type> jump_command except_command function
 %type <tree_command_type> file classdef
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
-%type <tree_decl_elt_type> decl2
+%type <tree_decl_elt_type> decl2 param_list_elt
 %type <tree_decl_init_list_type> decl1
 %type <tree_decl_command_type> declaration
 %type <tree_statement_type> statement function_end classdef_end
 %type <tree_statement_list_type> simple_list simple_list1 list list1
 %type <tree_statement_list_type> opt_list input1
 // These types need to be specified.
 %type <dummy_type> attr
 %type <dummy_type> class_event
@@ -793,20 +793,16 @@ decl_param_init : // empty
 
 decl2           : identifier
                   { $$ = new tree_decl_elt ($1); }
                 | identifier '=' decl_param_init expression
                   {
                     lexer.looking_at_initializer_expression = false;
                     $$ = new tree_decl_elt ($1, $4);
                   }
-                | magic_tilde
-                  {
-                    $$ = new tree_decl_elt ($1);
-                  }
                 ;
 
 // ====================
 // Selection statements
 // ====================
 
 select_command  : if_command
                   { $$ = $1; }
@@ -1065,25 +1061,31 @@ param_list1     : // empty
                         lexer.mark_as_variables ($1->variable_names ());
                         $$ = $1;
                       }
                     else
                       ABORT_PARSE;
                   }
                 ;
 
-param_list2     : decl2
+param_list2     : param_list_elt
                   { $$ = new tree_parameter_list ($1); }
-                | param_list2 ',' decl2
+                | param_list2 ',' param_list_elt
                   {
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
+param_list_elt  : decl2
+                  { $$ = $1; }
+                | magic_tilde
+                  { $$ = new tree_decl_elt ($1); }
+                ;
+
 // ===================================
 // List of function return value names
 // ===================================
 
 return_list     : '[' ']'
                   {
                     lexer.looking_at_return_list = false;
 
