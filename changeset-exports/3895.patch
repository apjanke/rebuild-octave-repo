# HG changeset patch
# User jwe
# Date 1018466319 0
#      Wed Apr 10 19:18:39 2002 +0000
# Node ID d38c7538b954b2ce7305e3364408c8570b0b3bcb
# Parent  d71f92546e45cc24c999fb30f64eb6b246ea2b72
[project @ 2002-04-10 19:18:39 by jwe]

diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -122,17 +122,17 @@ bug reports and comments on @sc{Matlab} 
 
 @item
 Rick Niles @email{niles@@axp745.gsfc.nasa.gov} rewrote Octave's plotting
 functions to add line styles and the ability to specify an unlimited
 number of lines in a single call.  He also continues to track down odd
 incompatibilities and bugs.
 
 @item
-Mark Odegard @email{meo@@sugarland.unocal.com} provided the initial
+Mark Odegard @email{meo@@getech.com} provided the initial
 implementation of @code{fread}, @code{fwrite}, @code{feof}, and
 @code{ferror}.
 
 @item
 Tony Richardson @email{arichard@@stark.cc.oh.us} wrote Octave's
 image processing functions as well as most of the original polynomial
 functions.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2002-04-10  Ben Sapp <bsapp@lanl.gov>
+
+	* pt-stmt.cc (delete_breakpoint): List breakpoints if line < 0.
+	* debug.cc (get_user_function): Check symbol by name first.
+	(Fdbstop): Rename from Fdbg_set.
+	(Fdbclear): Rename from Fdbg_delete.
+	(Fdbstatus): Rename from Fdbg_list.
+	(Fdbg_where): Rename from Fdbwhere.
+	(do_dbtype, Fdbtype): New functions.
+
+2002-04-10  Peter Van Wieren <peter.vanwiere@avlna.com>
+
+	* load-save.cc (save_mat5_binary_element): Save elements of 2d
+	character matrices in proper order.
+
 2002-04-09  Paul Kienzle <pkienzle@users.sf.net>
 
 	* utils.cc (do_string_escapes): Handle \0 too.
 	(undo_string_escape): Likewise.
 
 2002-04-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* toplev.cc (octave_config_info): Define struct member EXEEXT, not EXE.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -19,16 +19,22 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <iostream>
+#include <fstream>
+#include <strstream>
+#include <string>
+#include <stdlib.h> 
+
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "parse.h"
 #include "symtab.h"
@@ -44,21 +50,17 @@ Software Foundation, 59 Temple Place - S
 #include "unwind-prot.h"
 #include "variables.h"
 
 octave_user_function *
 get_user_function (std::string str = "")
 {
   octave_user_function *dbg_fcn = NULL;
 
-  if (curr_function)
-    {
-      dbg_fcn = curr_function;
-    }
-  else if (str.compare (""))
+  if (str.compare (""))
     {
       symbol_record *ptr = curr_sym_tab->lookup (str);
       
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
 	  dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
 	}
@@ -68,43 +70,48 @@ get_user_function (std::string str = "")
 	  
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
 	      dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
+  else if (curr_function)
+    {
+      dbg_fcn = curr_function;
+    }
 
   return dbg_fcn;
 }
 
-DEFUN_TEXT (dbg_set, args, ,
+
+DEFUN_TEXT (dbstop, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {rline =} dbg_set (func, line)\n\
+@deftypefn {Loadable Function} {rline =} dbstop (func, line)\n\
 Set a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
 Line you would like the breakpoint to be set on\n\
 @end table\n\
 \n\
 The rline returned is the real line that the breakpoint was set at.\n\
 \n\
 @end deftypefn\n\
-@seealso{dbg_delete, dbg_list, dbg_where}")
+@seealso{dbclear, dbtatus, dbnext}")
 {
   octave_value retval;
 
   int result = -1;
   int nargin = args.length ();
   
-  string_vector argv = args.make_argv ("dbg_set");
+  string_vector argv = args.make_argv ("dbstop");
 
   if (error_state)
     return retval;
 
   if (nargin == 2)
     { 
       std::string symbol_name = argv[1];
 
@@ -141,99 +148,102 @@ The rline returned is the real line that
   else
     error ("one argument when in a function and two when not\n");
 
   retval = static_cast<double> (result);
 
   return retval;
 }
 
-DEFUN_TEXT (dbg_delete, args, ,
+DEFUN_TEXT (dbclear, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbg_delete (func, line)\n\
+@deftypefn {Loadable Function} {} dbclear (func, line)\n\
 Delete a breakpoint in a function\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
 @item line\n\
 Line where you would like to remove the the breakpoint\n\
 @end table\n\
 No checking is done to make sure that the line you requested is really\n\
 a breakpoint.   If you get the wrong line nothing will happen.\n\
 @end deftypefn\n\
-@seealso{dbg_set, dbg_list, dbg_where}")
+@seealso{dbstop, dbstatus, dbwhere}")
 {
   octave_value retval;
 
   std::string symbol_name = "";
-
+  std::string line_number;
   int line = -1;
   int nargin = args.length ();
   
   if (nargin != 1 && nargin != 2)
     {
       error ("need one or two arguements\n");
       return retval;
     }
   
-  string_vector argv = args.make_argv ("dbg_delete");
+  string_vector argv = args.make_argv ("dbclear");
 
   if (error_state)
     return retval;
 
   if (nargin == 2)
     {
       octave_stdout << "2 input arguments\n";
       symbol_name = argv[1];
  
       octave_stdout << argv[1] << std::endl;
-      std::string line_number = argv[2];
+      line_number = argv[2];
 
-      line = atoi (line_number.c_str ());     
     }
   else if (nargin == 1)
     {
       octave_stdout << "1 input argument\n";
-      std::string line_number = argv[1];
-
-      line = atoi (line_number.c_str ());     
+      line_number = argv[1];
     }
   else
     {
       error ("need one or two arguements\n");
       return retval;
     }
 
+
+  if (line_number.compare("all") && line_number.compare("ALL"))
+    line = atoi (line_number.c_str ());
+  else 
+    line = -1;
+
   octave_stdout << "symbol_name = " << symbol_name << std::endl;
   octave_user_function *dbg_fcn = get_user_function (symbol_name);
   
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
       cmds->delete_breakpoint (line);
     }
   else
     error ("unable to find the function requested\n");
 
   return retval;
 }
 
-DEFUN_TEXT (dbg_list, args, ,
+DEFUN_TEXT (dbstatus, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {lst =} dbg_list ([func])\n\
+@deftypefn {Loadable Function} {lst =} dbstatus ([func])\n\
 Return a vector containing the lines on which a function has \n\
 breakpoints set.\n\
 @table @code\n\
 @item func\n\
 String representing the function name.  When already in debug\n\
 mode this should be left out.\n\
 @end table\n\
 @end deftypefn\n\
-@seealso{dbg_delete, dbg_set, dbg_where}")
+@seealso{dbclear, dbwhere}")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin != 0 && nargin != 1)
     {
       error ("only zero or one arguements accepted\n");
@@ -242,17 +252,17 @@ mode this should be left out.\n\
 
   std::string symbol_name = "";
 
   if (nargin == 1)
     {
       if (args(0).is_string ())
 	symbol_name = args(0).string_value ();
       else
-	gripe_wrong_type_arg ("dbg_list", args(0));
+	gripe_wrong_type_arg ("dbstatus", args(0));
     }
 
   octave_user_function *dbg_fcn = get_user_function (symbol_name);
  
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
 
@@ -271,23 +281,22 @@ mode this should be left out.\n\
       retval = octave_value (vec);
     }
   else
     error ("unable to find the function you requested\n");
 
   return retval;
 }
 
-
-DEFUN_TEXT (dbg_where, , ,
+DEFUN_TEXT (dbwhere, , ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbg_where ()\n\
+@deftypefn {Loadable Function} {} dbwhere ()\n\
 Show where we are in the code\n\
 @end deftypefn\n\
-@seealso{dbg_delete, dbg_list, dbg_set}")
+@seealso{dbclear, dbstatus, dbstop}")
 {
   octave_value retval;
   
   octave_user_function *dbg_fcn = curr_function;
 
   if (dbg_fcn)
     {
       std::string name = dbg_fcn->function_name ();
@@ -300,17 +309,179 @@ Show where we are in the code\n\
 	{
 	  octave_stdout << "line " << dbg_stmt->line () << ", "; 
 	  octave_stdout << "column " << dbg_stmt->column () << std::endl;
 	}
       else
 	octave_stdout << "-1\n";
     }
   else
-    error ("must be inside of a user function to use dbg_where\n");
+    error ("must be inside of a user function to use dbwhere\n");
+
+  return retval;
+}
+
+// Copied and modified from the do_type command in help.cc
+// Maybe we could share some code?  
+void 
+do_dbtype(std::ostream& os, const std::string& name, int start, int end)
+{
+  std::string ff = fcn_file_in_path (name);
+
+  if (! ff.empty ())
+    {
+      std::ifstream fs (ff.c_str (), std::ios::in);
+      
+      if (fs)
+	{  
+	  char ch;
+	  int line = 1;
+	  
+	  if (line >= start && line <= end)
+	    os << line << "\t";
+ 	  
+	  while (fs.get (ch))
+	    {
+	      if (line >= start && line <= end)
+		{
+		  os << ch;
+		}
+
+	      if (ch == '\n')
+		{
+		  line++;
+		  if (line >= start && line <= end)
+		    os << line << "\t"; 
+		}
+	    }
+	}
+      else 
+	os << "unable to open `" << ff << "' for reading!\n";
+    }
+  else
+    os << "unkown function";
+
+}
+
+DEFUN_TEXT (dbtype, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} dbtype ()\n\
+List script file with line numbers.\n\
+@end deftypefn\n\
+@seealso{dbclear, dbstatus, dbstop}")
+{
+  octave_value retval;
+  octave_user_function *dbg_fcn;
+  
+  int nargin = args.length ();
+  string_vector argv = args.make_argv ("dbtype");
+    
+  if (! error_state)
+    {
+      switch (nargin)
+	{
+	case 0: // dbtype
+	  dbg_fcn = get_user_function ();
+
+	  if (dbg_fcn)
+	    do_dbtype(octave_stdout,dbg_fcn->function_name (), 0, INT_MAX);
+	  else
+	    error("must be in a user function to give no arguments to dbtype\n");
+
+	  break;
+	case 1: // (dbtype func) || (dbtype start:end) 
+	  dbg_fcn = get_user_function (argv[1].c_str ());
+
+	  if (dbg_fcn)
+	    do_dbtype(octave_stdout,dbg_fcn->function_name (), 0, INT_MAX);
+	  else
+	    {
+	      dbg_fcn = get_user_function ("");
+
+	      if (dbg_fcn)
+		{
+		  char *str = (char *)malloc(strlen(argv[1].c_str ()) + 1);
+
+		  if (str)
+		    memcpy(str, argv[1].c_str (), strlen(argv[1].c_str ()) + 1);
+		  else 
+		    error("croaked\n");
+		  
+		  char *ind = index(str,':');
+		  
+		  if (ind)
+		    *ind = '\0';
+		  else
+		    {
+		      free(str);
+		      error("if you specify lines it must be like `start:end`");
+		    }
+		  ind++;
+		  
+		  int start = atoi(str);
+		  int end   = atoi(ind);
+		  
+		  free(str);
+		  str = NULL;
+		  ind = NULL;
+		  
+		  octave_stdout << "got start and end\n";
+		  
+		  if (start > end)
+		    error("the start line must be less than the end line\n");
+		  
+		  octave_stdout << "doing dbtype\n";
+		  do_dbtype(octave_stdout, dbg_fcn->function_name (), start, end);
+		  octave_stdout << "did dbtype\n";
+		}
+	    }
+	  break;
+	case 2: // (dbtype func start:end) 
+	  dbg_fcn = get_user_function (argv[1].c_str ());
+
+	  if (dbg_fcn)
+	    {
+	      
+	      char *str = (char *)malloc(strlen(argv[2].c_str ()) + 1);
+
+	      if (str)
+		memcpy(str, argv[2].c_str (), strlen(argv[2].c_str ()) + 1);
+	      else
+		error("not enough memory\n");
+
+	      
+	      char *ind = index(str,':');
+
+	      if (ind)
+		*ind = '\0';
+	      else
+		{
+		  free(str);
+		  error("if you specify lines it must be like `start:end`");
+		}
+	      ind++;
+
+	      int start = atoi(str);
+	      int end   = atoi(ind);
+
+	      free(str);
+	      ind = NULL; 
+	      str = NULL; 
+
+	      if (start > end)
+		error("the start line must be less than the end line\n");
+
+	      do_dbtype(octave_stdout, dbg_fcn->function_name (), start, end);	      
+	    }
+
+	  break;
+	default:
+	  error("unacceptable number of arguments\n"); 
+	}
+    }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4152,29 +4152,28 @@ save_mat5_binary_element (std::ostream& 
   // data element
   if (tc.is_string ())
     {
       charMatrix chm = tc.char_matrix_value ();
       int nc = chm.cols ();
       int len = nr*nc*2;
       int paddedlength = PAD (nr*nc*2);
 
-      TWO_BYTE_INT *buf = new TWO_BYTE_INT[nc+3];
+      TWO_BYTE_INT *buf = new TWO_BYTE_INT[nc*nr+3];
       write_mat5_tag (os, miUINT16, len);
 
       for (int i = 0; i < nr; i++)
 	{
 	  std::string tstr = chm.row_as_string (i);
 	  const char *s = tstr.data ();
 
 	  for (int j = 0; j < nc; j++)
-	    buf[j] = *s++;
-
-	  os.write ((char *)buf, nc*2);
+	    buf[j*nr+i] = *s++;
 	}
+      os.write ((char *)buf, nr*nc*2);
       
       if (paddedlength > len)
 	os.write ((char *)buf, paddedlength - len);
 
       delete [] buf;
     }
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ())
     {
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -192,18 +192,33 @@ tree_statement_list::set_breakpoint (int
   accept (tbp);
   
   return tbp.get_line ();
 }
 
 void
 tree_statement_list::delete_breakpoint (int line)
 {
-  tree_breakpoint tbp (line, tree_breakpoint::clear); 
-  accept(tbp);
+  if (line < 0)
+    {
+      octave_value_list lst = list_breakpoints ();
+
+      int len = lst.length ();
+
+      for (int line = 0; line < len; line++)
+	{
+	  tree_breakpoint tbp (line, tree_breakpoint::clear);
+	  accept (tbp);
+	}
+    }
+  else
+    {
+      tree_breakpoint tbp (line, tree_breakpoint::clear); 
+      accept (tbp);
+    }
 }
 
 octave_value_list
 tree_statement_list::list_breakpoints (void)
 {
   tree_breakpoint tbp (0, tree_breakpoint::list);
   accept (tbp);
 
