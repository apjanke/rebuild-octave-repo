# HG changeset patch
# User jwe
# Date 774734215 0
#      Wed Jul 20 19:56:55 1994 +0000
# Node ID 2ca256b77602bf859fcf86a69f27e091de775c27
# Parent  1be78be437c79b82ec2a086a4d98fe2e72ab492b
[project @ 1994-07-20 19:56:55 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -644,16 +644,17 @@ operator >> (istream& is, ComplexColumnV
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
+  return is;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -31,17 +31,19 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "Array.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class ComplexColumnVector : public Array<Complex>
 {
+friend class ColumnVector;
 friend class ComplexRowVector;
+friend class ComplexMatrix;
 
 public:
 
   ComplexColumnVector (void) : Array<Complex> () { }
   ComplexColumnVector (int n) : Array<Complex> (n) { }
   ComplexColumnVector (int n, const Complex& val)
     : Array<Complex> (n, val) { }
   ComplexColumnVector (const ColumnVector& a);
@@ -139,28 +141,30 @@ public:
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
-  friend ostream& operator >> (ostream& is, ComplexColumnVector& a);
+  friend istream& operator >> (istream& is, ComplexColumnVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE Complex
 #define KL_VEC_TYPE ComplexColumnVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
 
-private:
-
+// private:
+// XXX FIXME XXX -- why does it not work to make this private, with
+// ColumnVector declared as a friend of ComplexColumnVector?  It seems
+// to work for the similar case with Matrix/ComplexMatrix.  Hmm...
   ComplexColumnVector (Complex *d, int l) : Array<Complex> (d, l) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -36,16 +36,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "CColVector.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class ComplexDiagMatrix : public DiagArray<Complex>
 {
+  friend DiagMatrix;
+
 public:
 
   ComplexDiagMatrix (void) : DiagArray<Complex> () { }
   ComplexDiagMatrix (int n) : DiagArray<Complex> (n) { }
   ComplexDiagMatrix (int n, const Complex& val)
     : DiagArray<Complex> (n, val) { }
   ComplexDiagMatrix (int r, int c) : DiagArray<Complex> (r, c) { }
   ComplexDiagMatrix (int r, int c, const Complex& val)
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -912,17 +912,17 @@ ComplexMatrix::inverse (void) const
 ComplexMatrix
 ComplexMatrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 ComplexMatrix
-ComplexMatrix::inverse (int& info, volatile double& rcond) const
+ComplexMatrix::inverse (int& info, double& rcond) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return ComplexMatrix ();
@@ -931,17 +931,18 @@ ComplexMatrix::inverse (int& info, volat
   info = 0;
 
   int *ipvt = new int [nr];
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), len);
 
   F77_FCN (zgeco) (tmp_data, &nr, &nc, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore contents.
     }
   else
     {
       int job = 1;
       Complex dummy;
@@ -1031,17 +1032,17 @@ ComplexMatrix::determinant (void) const
 ComplexDET
 ComplexMatrix::determinant (int& info) const
 {
   double rcond;
   return determinant (info, rcond);
 }
 
 ComplexDET
-ComplexMatrix::determinant (int& info, volatile double& rcond) const
+ComplexMatrix::determinant (int& info, double& rcond) const
 {
   ComplexDET retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0)
     {
@@ -1055,17 +1056,18 @@ ComplexMatrix::determinant (int& info, v
       info = 0;
       int *ipvt = new int [nr];
 
       Complex *z = new Complex [nr];
       Complex *tmp_data = dup (data (), length ());
 
       F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-      if (rcond + 1.0 == 1.0)
+      volatile double tmp_rcond = rcond;
+      if (tmp_rcond + 1.0 == 1.0)
 	{
 	  info = -1;
 	  retval = ComplexDET ();
 	}
       else
 	{
 	  int job = 10;
 	  Complex d[2];
@@ -1113,18 +1115,17 @@ ComplexMatrix::solve (const ComplexMatri
 
 ComplexMatrix
 ComplexMatrix::solve (const ComplexMatrix& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 ComplexMatrix
-ComplexMatrix::solve (const ComplexMatrix& b, int& info,
-		      volatile double& rcond) const
+ComplexMatrix::solve (const ComplexMatrix& b, int& info, double& rcond) const
 {
   ComplexMatrix retval;
 
   int nr = rows ();
   int nc = cols ();
   int b_nr = b.rows ();
   int b_nc = b.cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b_nr)
@@ -1137,17 +1138,18 @@ ComplexMatrix::solve (const ComplexMatri
   info = 0;
   int *ipvt = new int [nr];
 
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), length ());
 
   F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       Complex *result = dup (b.data (), b.length ());
@@ -1177,17 +1179,17 @@ ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info,
-		      volatile double& rcond) const
+		      double& rcond) const
 {
   ComplexColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
   int b_len = b.length ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b_len)
     {
@@ -1199,17 +1201,18 @@ ComplexMatrix::solve (const ComplexColum
   info = 0;
   int *ipvt = new int [nr];
 
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), length ());
 
   F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       Complex *result = dup (b.data (), b_len);
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -33,18 +33,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "Array.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class ComplexMatrix : public Array2<Complex>
 {
+friend class ComplexCHOL;
+friend class ComplexHESS;
 friend class ComplexLU;
+friend class ComplexQR;
+friend class ComplexSCHUR;
 friend class ComplexSVD;
+friend class ComplexColumnVector;
+friend class Matrix;
 
 public:
  
   ComplexMatrix (void) : Array2<Complex> () { }
   ComplexMatrix (int r, int c) : Array2<Complex> (r, c) { }
   ComplexMatrix (int r, int c, const Complex& val)
     : Array2<Complex> (r, c, val) { }
   ComplexMatrix (const Matrix& a);
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -673,16 +673,17 @@ operator >> (istream& is, ComplexRowVect
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
+  return is;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -32,16 +32,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class ComplexRowVector : public Array<Complex>
 {
 friend class ComplexColumnVector;
+friend class RowVector;
 
 public:
 
   ComplexRowVector (void) : Array<Complex> () { }
   ComplexRowVector (int n) : Array<Complex> (n) { }
   ComplexRowVector (int n, const Complex& val) : Array<Complex> (n, val) { }
   ComplexRowVector (const RowVector& a);
   ComplexRowVector (const Array<Complex>& a) : Array<Complex> (a) { }
@@ -137,17 +138,17 @@ public:
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
-  friend ostream& operator >> (ostream& is, ComplexRowVector& a);
+  friend istream& operator >> (istream& is, ComplexRowVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE Complex
 #define KL_VEC_TYPE ComplexRowVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
diff --git a/liboctave/CmplxDET.h b/liboctave/CmplxDET.h
--- a/liboctave/CmplxDET.h
+++ b/liboctave/CmplxDET.h
@@ -31,16 +31,18 @@ Software Foundation, 675 Mass Ave, Cambr
 class ostream;
 
 #include <Complex.h>
 
 extern "C++" {
 
 class ComplexDET
 {
+  friend class ComplexMatrix;
+
 public:
 
   ComplexDET (void);
 
   ComplexDET (const ComplexDET& a);
 
   ComplexDET& operator = (const ComplexDET& a);
 
diff --git a/liboctave/CmplxHESS.cc b/liboctave/CmplxHESS.cc
--- a/liboctave/CmplxHESS.cc
+++ b/liboctave/CmplxHESS.cc
@@ -88,18 +88,18 @@ ComplexHESS::init (const ComplexMatrix& 
    copy (z, h, n*n);
 
    F77_FCN (zunghr) (&n, &ilo, &ihi, z, &n, tau, work, &lwork, &info, 1L,
 		     1L);
 
    F77_FCN (zgebak) (&job, &side, &n, &ilo, &ihi, scale, &n, z, &n, &info,
 		     1L, 1L); 
 
-   hess_mat = ComplexMatrix (h,n,n);
-   unitary_hess_mat = ComplexMatrix (z,n,n);
+   hess_mat = ComplexMatrix (h, n, n);
+   unitary_hess_mat = ComplexMatrix (z, n, n);
 
 // If someone thinks of a more graceful way of doing this (or faster for
 // that matter :-)), please let me know!
 
    if (n > 2)
      for (int j = 0; j < a_nc; j++)
        for (int i = j+2; i < a_nr; i++)
          hess_mat.elem (i, j) = 0;
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -111,18 +111,18 @@ ComplexSCHUR::init (const ComplexMatrix&
     }
   else
     {
       F77_FCN (zgeesx) (&jobvs, &sort, (void *) 0, &sense, &n, s,
 			&n, &sdim, w, q, &n, &rconde, &rcondv, work,
 			&lwork, rwork, bwork, &info, 1L, 1L);
     }
 
-  schur_mat = ComplexMatrix (s,n,n);
-  unitary_mat = ComplexMatrix (q,n,n);
+  schur_mat = ComplexMatrix (s, n, n);
+  unitary_mat = ComplexMatrix (q, n, n);
 
   delete [] w;
   delete [] work;
   delete [] rwork;
   delete [] bwork;
 
   return info;
 }
diff --git a/liboctave/DAEFunc.cc b/liboctave/DAEFunc.cc
--- a/liboctave/DAEFunc.cc
+++ b/liboctave/DAEFunc.cc
@@ -59,30 +59,30 @@ DAEFunc&
 DAEFunc::operator = (const DAEFunc& a)
 {
   fun = a.fun;
   jac = a.jac;
 
   return *this;
 }
 
-DAERHSFunc
+DAEFunc::DAERHSFunc
 DAEFunc::function (void) const
 {
   return fun;
 }
 
 DAEFunc&
 DAEFunc::set_function (DAERHSFunc f)
 {
   fun = f;
   return *this;
 }
 
-DAEJacFunc
+DAEFunc::DAEJacFunc
 DAEFunc::jacobian_function (void) const
 {
   return jac;
 }
 
 DAEFunc&
 DAEFunc::set_jacobian_function (DAEJacFunc j)
 {
diff --git a/liboctave/DAEFunc.h b/liboctave/DAEFunc.h
--- a/liboctave/DAEFunc.h
+++ b/liboctave/DAEFunc.h
@@ -35,31 +35,34 @@ extern "C++" {
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 #if !defined (octave_DAEFunc_typedefs)
 #define octave_DAEFunc_typedefs 1
 
-typedef struct DAEJac
-{
-  Matrix *dfdxdot;
-  Matrix *dfdx;
-};
-
-typedef Vector (*DAERHSFunc) (const Vector& x, const Vector& xdot, double);
-typedef DAEJac (*DAEJacFunc) (const Vector& x, const Vector& xdot, double);
-
 #endif
 
 class DAEFunc
 {
 public:
 
+  struct DAEJac
+    {
+      Matrix *dfdxdot;
+      Matrix *dfdx;
+    };
+
+  typedef Vector (*DAERHSFunc) (const Vector& x,
+				const Vector& xdot, double); 
+
+  typedef DAEJac (*DAEJacFunc) (const Vector& x,
+				const Vector& xdot, double);
+
   DAEFunc (void);
   DAEFunc (DAERHSFunc f);
   DAEFunc (DAERHSFunc f, DAEJacFunc j);
 
   DAEFunc (const DAEFunc& a);
 
   DAEFunc& operator = (const DAEFunc& a);
 
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -40,18 +40,18 @@ extern "C"
 			const int*, double*, double*, double*,
 			double*, const int*, const double*,
 			const double*, int*, double*, const int*, 
 			int*, const int*, const double*, const int*,
 			int (*)(double*, double*, double*, double*,
 				double*, double*, int*));
 }
 
-static DAERHSFunc user_fun;
-static DAEJacFunc user_jac;
+static DAEFunc::DAERHSFunc user_fun;
+static DAEFunc::DAEJacFunc user_jac;
 static int nn;
 
 DAE::DAE (void)
 {
   n = 0;
   t = 0.0;
 
   stop_time_set = 0;
@@ -227,17 +227,17 @@ ddassl_j (double *time, double *state, d
   Vector tmp_state (nn);
   Vector tmp_deriv (nn);
 
 // XXX FIXME XXX
 
   Matrix tmp_dfdxdot (nn, nn);
   Matrix tmp_dfdx (nn, nn);
 
-  DAEJac tmp_jac;
+  DAEFunc::DAEJac tmp_jac;
   tmp_jac.dfdxdot = &tmp_dfdxdot;
   tmp_jac.dfdx    = &tmp_dfdx;
 
   tmp_jac = user_jac (tmp_state, tmp_deriv, *time);
 
   // Fix up the matrix of partial derivatives for dassl.
 
   tmp_dfdx = tmp_dfdx + (tmp_dfdxdot * (*cj));
@@ -249,17 +249,17 @@ ddassl_j (double *time, double *state, d
   return 0;
 }
 
 Vector
 DAE::integrate (double tout)
 {
   integration_error = 0;
 
-  if (DAEFunc::jac)
+  if (DAEFunc::jacobian_function ())
     iwork [4] = 1;
   else
     iwork [4] = 0;
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
diff --git a/liboctave/LPsolve.cc b/liboctave/LPsolve.cc
--- a/liboctave/LPsolve.cc
+++ b/liboctave/LPsolve.cc
@@ -30,16 +30,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include "dColVector.h"
 #include "LPsolve.h"
 
 Vector
 LPsolve::minimize (double& objf, int& inform, Vector& lambda)
 {
+  return Vector ();
 }
 
 void
 LPsolve::set_default_options (void)
 {
 // Maybe this isn't needed?
 }
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -42,18 +42,18 @@ extern "C"
   int F77_FCN (lsode) (int (*)(int*, double*, double*, double*, int*),
 		       int *, double *, double *, double *,
 		       int *, double *, double *, int *, int *, int *,
 		       double *, int *, int *, int *,
 		       int (*)(int*, double*, double*, int*, int*,
 			       double*, int*), int *);
 }
 
-static ColumnVector (*user_fun) (ColumnVector&, double);
-static Matrix       (*user_jac) (ColumnVector&, double);
+static ODEFunc::ODERHSFunc user_fun;
+static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 ODE::ODE (void)
 {
   n = 0;
   t = 0.0;
 
   stop_time_set = 0;
diff --git a/liboctave/ODEFunc.cc b/liboctave/ODEFunc.cc
--- a/liboctave/ODEFunc.cc
+++ b/liboctave/ODEFunc.cc
@@ -59,30 +59,30 @@ ODEFunc&
 ODEFunc::operator = (const ODEFunc& a)
 {
   fun = a.function ();
   jac = a.jacobian_function ();
 
   return *this;
 }
 
-ODERHSFunc
+ODEFunc::ODERHSFunc
 ODEFunc::function (void) const
 {
   return fun;
 }
 
 ODEFunc&
 ODEFunc::set_function (ODERHSFunc f)
 {
   fun = f;
   return *this;
 }
 
-ODEJacFunc
+ODEFunc::ODEJacFunc
 ODEFunc::jacobian_function (void) const
 {
   return jac;
 }
 
 ODEFunc&
 ODEFunc::set_jacobian_function (ODEJacFunc j)
 {
diff --git a/liboctave/ODEFunc.h b/liboctave/ODEFunc.h
--- a/liboctave/ODEFunc.h
+++ b/liboctave/ODEFunc.h
@@ -32,28 +32,23 @@ class Matrix;
 class ColumnVector;
 
 extern "C++" {
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
-#ifndef _ODEFunc_typedefs
-#define _ODEFunc_typedefs 1
-
-typedef Vector (*ODERHSFunc) (const Vector&, double);
-typedef Matrix (*ODEJacFunc) (const Vector&, double);
-
-#endif
-
 class ODEFunc
 {
 public:
 
+  typedef Vector (*ODERHSFunc) (const Vector&, double);
+  typedef Matrix (*ODEJacFunc) (const Vector&, double);
+
   ODEFunc (void);
   ODEFunc (ODERHSFunc f);
   ODEFunc (ODERHSFunc f, ODEJacFunc j);
 
   ODEFunc (const ODEFunc& a);
 
   ODEFunc& operator = (const ODEFunc& a);
 
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -476,16 +476,17 @@ operator >> (istream& is, ColumnVector& 
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
+  return is;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -31,17 +31,19 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "Array.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class ColumnVector : public Array<double>
 {
+friend class Matrix;
 friend class RowVector;
+friend class ComplexColumnVector;
 
 public:
 
   ColumnVector (void) : Array<double> () { }
   ColumnVector (int n) : Array<double> (n) { }
   ColumnVector (int n, double val) : Array<double> (n, val) { }
   ColumnVector (const Array<double>& a) : Array<double> (a) { }
   ColumnVector (const ColumnVector& a) : Array<double> (a) { }
@@ -127,17 +129,17 @@ public:
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ColumnVector& a);
-  friend ostream& operator >> (ostream& is, ColumnVector& a);
+  friend istream& operator >> (istream& is, ColumnVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE double
 #define KL_VEC_TYPE ColumnVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -36,16 +36,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "mx-defs.h"
 
 extern "C++" {
 
 class DiagMatrix : public DiagArray<double>
 {
 friend class SVD;
 friend class ComplexSVD;
+friend class ComplexDiagMatrix;
 
 public:
 
   DiagMatrix (void) : DiagArray<double> () { }
   DiagMatrix (int n) : DiagArray<double> (n) { }
   DiagMatrix (int n, double val) : DiagArray<double> (n, val) { }
   DiagMatrix (int r, int c) : DiagArray<double> (r, c) { }
   DiagMatrix (int r, int c, double val) : DiagArray<double> (r, c, val) { }
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -561,17 +561,17 @@ Matrix::inverse (void) const
 Matrix
 Matrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 Matrix
-Matrix::inverse (int& info, volatile double& rcond) const
+Matrix::inverse (int& info, double& rcond) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc || nr == 0 || nc == 0)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return Matrix ();
@@ -580,17 +580,18 @@ Matrix::inverse (int& info, volatile dou
   info = 0;
 
   int *ipvt = new int [nr];
   double *z = new double [nr];
   double *tmp_data = dup (data (), len);
 
   F77_FCN (dgeco) (tmp_data, &nr, &nc, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore matrix contents.
     }
   else
     {
       int job = 1;
       double dummy;
@@ -680,17 +681,17 @@ Matrix::determinant (void) const
 DET
 Matrix::determinant (int& info) const
 {
   double rcond;
   return determinant (info, rcond);
 }
 
 DET
-Matrix::determinant (int& info, volatile double& rcond) const
+Matrix::determinant (int& info, double& rcond) const
 {
   DET retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0)
     {
@@ -704,17 +705,18 @@ Matrix::determinant (int& info, volatile
       info = 0;
       int *ipvt = new int [nr];
 
       double *z = new double [nr];
       double *tmp_data = dup (data (), length ());
 
       F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-      if (rcond + 1.0 == 1.0)
+      volatile double tmp_rcond = rcond;
+      if (tmp_rcond + 1.0 == 1.0)
 	{
 	  info = -1;
 	  retval = DET ();
 	}
       else
 	{
 	  int job = 10;
 	  double d[2];
@@ -741,17 +743,17 @@ Matrix::solve (const Matrix& b) const
 Matrix
 Matrix::solve (const Matrix& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 Matrix
-Matrix::solve (const Matrix& b, int& info, volatile double& rcond) const
+Matrix::solve (const Matrix& b, int& info, double& rcond) const
 {
   Matrix retval;
 
   int nr = rows ();
   int nc = cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b.rows ())
     {
       (*current_liboctave_error_handler)
@@ -762,17 +764,18 @@ Matrix::solve (const Matrix& b, int& inf
   info = 0;
   int *ipvt = new int [nr];
 
   double *z = new double [nr];
   double *tmp_data = dup (data (), length ());
 
   F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       double *result = dup (b.data (), b.length ());
@@ -822,17 +825,17 @@ Matrix::solve (const ColumnVector& b) co
 ColumnVector
 Matrix::solve (const ColumnVector& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 ColumnVector
-Matrix::solve (const ColumnVector& b, int& info, volatile double& rcond) const
+Matrix::solve (const ColumnVector& b, int& info, double& rcond) const
 {
   ColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b.length ())
     {
       (*current_liboctave_error_handler)
@@ -843,17 +846,18 @@ Matrix::solve (const ColumnVector& b, in
   info = 0;
   int *ipvt = new int [nr];
 
   double *z = new double [nr];
   double *tmp_data = dup (data (), length ());
 
   F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  if (rcond + 1.0 == 1.0)
+  volatile double tmp_rcond = rcond;
+  if (tmp_rcond + 1.0 == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       int b_len = b.length ();
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -23,26 +23,37 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_Matrix_int_h)
 #define octave_Matrix_int_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+// For FILE...
+#include <stdio.h>
+
 #include "Array.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class Matrix : public Array2<double>
 {
+friend class ColumnVector;
+friend class AEPBAL;
+friend class CHOL;
+friend class GEPBAL;
+friend class HESS;
 friend class LU;
+friend class QR;
+friend class SCHUR;
 friend class SVD;
+friend class ComplexMatrix;
 
 public:
 
   Matrix (void) : Array2<double> () { }
   Matrix (int r, int c) : Array2<double> (r, c) { }
   Matrix (int r, int c, double val) : Array2<double> (r, c, val) { }
   Matrix (const Array2<double>& a) : Array2<double> (a) { }
   Matrix (const Matrix& a) : Array2<double> (a) { }
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -501,16 +501,17 @@ operator >> (istream& is, RowVector& a)
         {
           is >> tmp;
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
+  return is;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -32,16 +32,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "mx-defs.h"
 
 extern "C++" {
 
 class RowVector : public Array<double>
 {
 friend class ColumnVector;
+friend class ComplexRowVector;
 
 public:
 
   RowVector (void) : Array<double> () { }
   RowVector (int n) : Array<double> (n) { }
   RowVector (int n, double val) : Array<double> (n, val) { }
   RowVector (const Array<double>& a) : Array<double> (a) { }
   RowVector (const RowVector& a) : Array<double> (a) { }
@@ -123,17 +124,17 @@ public:
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
-  friend ostream& operator >> (ostream& is, RowVector& a);
+  friend istream& operator >> (istream& is, RowVector& a);
 
 #define KLUDGE_VECTORS
 #define TYPE double
 #define KL_VEC_TYPE RowVector
 #include "mx-kludge.h"
 #undef KLUDGE_VECTORS
 #undef TYPE
 #undef KL_VEC_TYPE
diff --git a/liboctave/dbleDET.h b/liboctave/dbleDET.h
--- a/liboctave/dbleDET.h
+++ b/liboctave/dbleDET.h
@@ -29,16 +29,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 class ostream;
 
 extern "C++" {
 
 class DET
 {
+friend class Matrix;
+
 public:
 
   DET (void);
 
   DET (const DET& a);
 
   DET& operator = (const DET& a);
 
diff --git a/liboctave/mx-defs.h b/liboctave/mx-defs.h
--- a/liboctave/mx-defs.h
+++ b/liboctave/mx-defs.h
@@ -56,20 +56,16 @@ class ComplexQR;
 // Other data types we use but that don't always need to have full
 // declarations.
 
 class Complex;
 
 class istream;
 class ostream;
 
-#ifndef FILE
-struct FILE;
-#endif
-
 #ifndef MAPPER_FCN_TYPEDEFS
 #define MAPPER_FCN_TYPEDEFS 1
 
 typedef double (*d_d_Mapper)(double);
 typedef double (*d_c_Mapper)(const Complex&);
 typedef Complex (*c_c_Mapper)(const Complex&);
 
 #endif
