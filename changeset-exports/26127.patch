# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1542921448 -3600
#      Thu Nov 22 22:17:28 2018 +0100
# Node ID 37e3aa267374ec17a6f71a52379a0a05e8c78aed
# Parent  f6f16b842d5d330c2e1e83976ac62b7470961a85
Move function str2double inside octave::string namespace (patch #9084).

* liboctave/util/oct-string.[cc/h]: Move function str2double inside
octave::string namespace.

* libgui/graphics/Table.cc, libinterp/corefcn/strfns.cc: Replace occurrences of
"octave_str2double".

diff --git a/libgui/graphics/Table.cc b/libgui/graphics/Table.cc
--- a/libgui/graphics/Table.cc
+++ b/libgui/graphics/Table.cc
@@ -373,33 +373,33 @@ namespace QtHandles
     SCANF_AND_CONVERT(int64, int64_t, "%jd %n")
     SCANF_AND_CONVERT(uint64, uint64_t, "%ju %n")
 
   #undef SCANF_AND_CONVERT
 
     else if (old_value.isnumeric () && ! old_value.isinteger ())
       {
         // Basically need to do str2double
-        Complex complex = octave_str2double (ov.string_value ());
+        Complex complex = octave::string::str2double (ov.string_value ());
         if (old_value.is_single_type ())
           retval = octave_value (FloatComplex (complex));
         else
           retval = octave_value (complex);
       }
     else if (old_value.islogical ())
       {
         // Right: Matlab basically needs this to be true or false, we should
         // accept 1 too.
         if (ov.string_value ()  == "true" || ov.string_value () == "1")
           retval = octave_value (true);
         else
           retval = octave_value (false);
       }
     else
-      retval = octave_value (octave_str2double (ov.string_value ()));
+      retval = octave_value (octave::string::str2double (ov.string_value ()));
     return retval;
   }
 
   QWidget *
   Table::checkBoxForLogical (octave_value val, bool enabled = false)
   {
     QWidget *retval = new QWidget (m_tableWidget);
     QCheckBox *checkBox = new QCheckBox ();
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -791,34 +791,34 @@ risk of using @code{eval} on unknown dat
 
   octave_value retval;
 
   if (args(0).is_string ())
     {
       if (args(0).rows () == 0 || args(0).columns () == 0)
         retval = Matrix (1, 1, octave::numeric_limits<double>::NaN ());
       else if (args(0).rows () == 1 && args(0).ndims () == 2)
-        retval = octave_str2double (args(0).string_value ());
+        retval = octave::string::str2double (args(0).string_value ());
       else
         {
           const string_vector sv = args(0).string_vector_value ();
 
-          retval = sv.map<Complex> (octave_str2double);
+          retval = sv.map<Complex> (octave::string::str2double);
         }
     }
   else if (args(0).iscell ())
     {
       const Cell cell = args(0).cell_value ();
 
       ComplexNDArray output (cell.dims (), octave::numeric_limits<double>::NaN ());
 
       for (octave_idx_type i = 0; i < cell.numel (); i++)
         {
           if (cell(i).is_string ())
-            output(i) = octave_str2double (cell(i).string_value ());
+            output(i) = octave::string::str2double (cell(i).string_value ());
         }
       retval = output;
     }
   else
     retval = Matrix (1, 1, octave::numeric_limits<double>::NaN ());
 
   return retval;
 }
diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -445,17 +445,17 @@ set_component (Complex& c, double num, b
   if (imag)
     c = Complex (c.real (), num);
   else
     c = Complex (num, c.imag ());
 #endif
 }
 
 Complex
-octave_str2double (const std::string& str_arg)
+octave::string::str2double (const std::string& str_arg)
 {
   Complex val (0.0, 0.0);
 
   std::string str = str_arg;
 
   // FIXME: removing all commas doesn't allow actual parsing.
   //        Example: "1,23.45" is wrong, but passes Octave.
   str.erase (std::remove (str.begin (), str.end(), ','), str.end ());
diff --git a/liboctave/util/oct-string.h b/liboctave/util/oct-string.h
--- a/liboctave/util/oct-string.h
+++ b/liboctave/util/oct-string.h
@@ -117,19 +117,19 @@ namespace octave
     template <typename T>
     bool strncmpi (const T& str_a, const T& str_b,
                    const typename T::size_type n);
 
     //! True if the first N characters are the same, ignoring case.
     template <typename T>
     bool strncmpi (const T& str_a, const typename T::value_type *str_b,
                    const typename T::size_type n);
+
+    extern OCTAVE_API Complex
+    str2double (const std::string& str_arg);
   }
 }
 
-extern OCTAVE_API Complex
-octave_str2double (const std::string& str_arg);
-
 template <typename T>
 extern OCTAVE_API std::string
 rational_approx (T val, int len);
 
 #endif
