# HG changeset patch
# User jwe
# Date 1038973845 0
#      Wed Dec 04 03:50:45 2002 +0000
# Node ID 8ad52ec4f37469a5217b59793e840d9ecfcb17bb
# Parent  4804f1151361d242a0cf1f0e5dd8b5946217032c
[project @ 2002-12-04 03:50:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,22 @@
 2002-12-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* utils.cc: Don't include SLStack.h.
+
+	* pt-stmt.h (tree_statement_list): Make list member data instead
+	of deriving from SLList object.
+	* pt-select.h (tree_switch_case_list): Likewise.
+	(tree_if_command_list): Likewise.
+	* pt-plot.h (subplot_list): Likewise.
+	* pt-mat.h (tree_matrix): Likewise.
+	* pt-decl.h (tree_decl_init_list): Likewise.
+	* pt-arg-list.h (tree_argument_list): Likewise.
+	* comment-list.h (octave_comment_list): Likewise.
+
 	* defun.h (DEFCMD): Rename from DEFUN_TEXT.  Provide DEFUN_TEXT as
 	an alias for DEFCMD.  Change all uses.
 
 	* variables.cc (at_top_level): New function.
 	(do_who, Fmark_as_command, Funmark_command): Use it.
 
 	* lex.l (COMMAND_START): Rename from TEXT_FCN.  Change all uses.
 	(MATRIX_START): Rename from MATRIX.  Change all uses.
diff --git a/src/comment-list.h b/src/comment-list.h
--- a/src/comment-list.h
+++ b/src/comment-list.h
@@ -80,41 +80,53 @@ private:
   // The text of the comment.
   std::string txt;
 
   // The type of comment.
   comment_type typ;
 };
 
 class
-octave_comment_list : public SLList<octave_comment_elt>
+octave_comment_list
 {
 public:
 
-  octave_comment_list (void) { }
+  octave_comment_list (void) : lst () { }
 
   ~octave_comment_list (void) { }
 
-  void append
-    (const std::string& s,
-     octave_comment_elt::comment_type t = octave_comment_elt::unknown)
-    {
-      SLList<octave_comment_elt>::append (octave_comment_elt (s, t));
-    }
+  void append (const std::string& s,
+	       octave_comment_elt::comment_type t = octave_comment_elt::unknown)
+    { lst.append (octave_comment_elt (s, t)); }
 
   octave_comment_list (const octave_comment_list& ocb)
-    : SLList<octave_comment_elt> (ocb) { }
+    : lst (ocb.lst) { }
 
   octave_comment_list& operator = (const octave_comment_list& ocb)
     {
       if (this != &ocb)
-	SLList<octave_comment_elt>::operator = (ocb);
+	lst = ocb.lst;
 
       return *this;
     }
+
+  int length (void) const { return lst.length (); }
+
+  octave_comment_elt& operator () (Pix p) { return lst (p); }
+
+  const octave_comment_elt& operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
+private:
+
+  // The list of comments.
+  SLList<octave_comment_elt> lst;
 };
 
 class
 octave_comment_buffer
 {
 public:
 
   octave_comment_buffer (void)
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -42,48 +42,48 @@ Software Foundation, 59 Temple Place - S
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
 
 // Argument lists.
 
 tree_argument_list::~tree_argument_list (void)
 {
-  while (! empty ())
+  while (! lst.empty ())
     {
-      tree_expression *t = remove_front ();
+      tree_expression *t = lst.remove_front ();
       delete t;
     }
 }
 
 int
 tree_argument_list::nargout_count (void) const
 {
   int retval = 0;
 
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_expression *elt = this->operator () (p);
+      tree_expression *elt = lst (p);
 
       // XXX FIXME XXX -- need to be able to determine whether elt is
       // an expression that could evaluate to a cs-list object, and if
       // so, how many elements are in that list.  Ugly!
 
       retval++;
     }
 
   return retval;
 }
 
 bool
 tree_argument_list::all_elements_are_constant (void) const
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_expression *elt = this->operator () (p);
+      tree_expression *elt = lst (p);
 
       if (! elt->is_constant ())
 	return false;
     }
 
   return true;
 }
 
@@ -95,21 +95,21 @@ tree_argument_list::convert_to_const_vec
   // XXX FIXME XXX -- would be nice to know in advance how largs args
   // needs to be even when we have a list containing an all_va_args
   // token.
 
   octave_value_list args;
   int args_len = len;
   args.resize (args_len);
 
-  Pix p = first ();
+  Pix p = lst.first ();
   int j = 0;
   for (int k = 0; k < len; k++)
     {
-      tree_expression *elt = this->operator () (p);
+      tree_expression *elt = lst (p);
 
       if (elt)
 	{
 	  octave_value tmp = elt->rvalue ();
 
 	  if (error_state)
 	    {
 	      ::error ("evaluating argument list element number %d", k+1);
@@ -167,19 +167,19 @@ string_vector
 tree_argument_list::get_arg_names (void) const
 {
   int len = length ();
 
   string_vector retval (len);
 
   int k = 0;
 
-  for (Pix p = first (); p; next (p))
+  for (Pix p = lst.first (); p; lst.next (p))
     {
-      tree_expression *elt = this->operator () (p);
+      tree_expression *elt = lst (p);
 
       retval(k++) = elt->str_print_code ();
     }
 
   return retval;
 }
 
 void
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -36,40 +36,60 @@ class tree_expression;
 class tree_walker;
 
 #include "str-vec.h"
 
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
 
 class
-tree_argument_list : public SLList<tree_expression *>
+tree_argument_list
 {
 public:
 
   tree_argument_list (void)
-    : SLList<tree_expression *> () { }
+    : lst () { }
 
   tree_argument_list (tree_expression *t)
-    : SLList<tree_expression *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~tree_argument_list (void);
 
+  int length (void) const { return lst.length (); }
+
+  void append (tree_expression *&s) { lst.append (s); }
+  void append (tree_expression * const &s) { lst.append (s); }
+
+  tree_expression *&operator () (Pix p) { return lst (p); }
+
+  tree_expression * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
+  int remove_front (tree_expression *x) { return lst.remove_front (x); }
+
+  tree_expression *remove_front (void) { return lst.remove_front (); }
+
   int nargout_count (void) const;
 
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (void);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of argument list elements.
+  SLList<tree_expression *> lst;
+
   // No copying!
 
   tree_argument_list (const tree_argument_list&);
 
   tree_argument_list& operator = (const tree_argument_list&);
 };
 
 #endif
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -372,17 +372,17 @@ tree_breakpoint::visit_matrix (tree_matr
 {
   if (found)
     return;
 
   Pix p = mat.first ();
 
   while (p)
     {
-      tree_argument_list *elt = mat (p);
+      tree_argument_list *elt = mat(p);
       mat.next (p);
 
       if (elt)
 	elt->accept (*this);
     }
 }
 
 void 
diff --git a/src/pt-decl.h b/src/pt-decl.h
--- a/src/pt-decl.h
+++ b/src/pt-decl.h
@@ -71,41 +71,55 @@ private:
   // No copying!
 
   tree_decl_elt (const tree_decl_elt&);
 
   tree_decl_elt& operator = (const tree_decl_elt&);
 };
 
 class
-tree_decl_init_list : public SLList<tree_decl_elt *>
+tree_decl_init_list
 {
 public:
 
   tree_decl_init_list (void)
-    : SLList<tree_decl_elt *> () { }
+    : lst () { }
 
   tree_decl_init_list (tree_decl_elt *t)
-    : SLList<tree_decl_elt *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~tree_decl_init_list (void)
     {
-      while (! empty ())
+      while (! lst.empty ())
 	{
-	  tree_decl_elt *t = remove_front ();
+	  tree_decl_elt *t = lst.remove_front ();
 	  delete t;
 	}
     }
 
+  void append (tree_decl_elt *&s) { lst.append (s); }
+  void append (tree_decl_elt * const &s) { lst.append (s); }
+
+  tree_decl_elt *&operator () (Pix p) { return lst (p); }
+
+  tree_decl_elt * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   void eval (tree_decl_elt::eval_fcn);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of variables/initializers.
+  SLList<tree_decl_elt *> lst;
+
   // No copying!
 
   tree_decl_init_list (const tree_decl_init_list&);
 
   tree_decl_init_list& operator = (const tree_decl_init_list&);
 };
 
 // Base class for declaration commands -- global, static, etc.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -401,29 +401,29 @@ tm_const::init (const tree_matrix& tm)
 	}
     }
 
   ok = ! error_state;
 }
 
 tree_matrix::~tree_matrix (void)
 {
-  while (! empty ())
+  while (! lst.empty ())
     {
-      tree_argument_list *t = remove_front ();
+      tree_argument_list *t = lst.remove_front ();
       delete t;
     }
 }
 
 bool
 tree_matrix::all_elements_are_constant (void) const
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_argument_list *elt = this->operator () (p);
+      tree_argument_list *elt = lst (p);
 
       if (! elt->all_elements_are_constant ())
 	return false;
     }
 
   return true;
 }
 
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -38,41 +38,57 @@ class tree_walker;
 #include <SLList.h>
 
 #include "pt-exp.h"
 
 // General matrices.  This allows us to construct matrices from
 // other matrices, variables, and functions.
 
 class
-tree_matrix : public tree_expression, public SLList<tree_argument_list *>
+tree_matrix : public tree_expression
 {
 public:
 
   tree_matrix (tree_argument_list *row = 0, int line = -1, int column = -1)
-    : tree_expression (line, column), SLList<tree_argument_list *> ()
+    : tree_expression (line, column), lst ()
   {
     if (row)
-      append (row);
+      lst.append (row);
   }
 
   ~tree_matrix (void);
 
+  int length (void) const { return lst.length (); }
+
+  void append (tree_argument_list *&s) { lst.append (s); }
+  void append (tree_argument_list * const &s) { lst.append (s); }
+
+  tree_argument_list *&operator () (Pix p) { return lst (p); }
+
+  tree_argument_list * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   bool all_elements_are_constant (void) const;
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list matrix elements for this row.
+  SLList<tree_argument_list *> lst;
+
   // No copying!
 
   tree_matrix (const tree_matrix&);
 
   tree_matrix& operator = (const tree_matrix&);
 };
 
 // The character to fill with when creating string arrays.
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -37,39 +37,39 @@ Software Foundation, 59 Temple Place - S
 #include "pt-idx.h"
 #include "pt-misc.h"
 #include "pt-walk.h"
 
 // Parameter lists.
 
 tree_parameter_list::~tree_parameter_list (void)
 {
-  while (! empty ())
+  while (! lst.empty ())
     {
-      tree_identifier *t = remove_front ();
+      tree_identifier *t = lst.remove_front ();
       delete t;
     }
 }
 
 void
 tree_parameter_list::mark_as_formal_parameters (void)
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_identifier *elt = this->operator () (p);
+      tree_identifier *elt = lst (p);
       elt->mark_as_formal_parameter ();
     }
 }
 
 void
 tree_parameter_list::initialize_undefined_elements (octave_value& val)
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_identifier *elt = this->operator () (p);
+      tree_identifier *elt = lst (p);
 
       if (! elt->is_defined ())
 	{
 	  octave_lvalue tmp = elt->lvalue ();
 
 	  tmp.assign (octave_value::op_asn_eq, val);
 	}
     }
@@ -80,74 +80,74 @@ tree_parameter_list::define_from_arg_vec
 {
   int nargin = args.length ();
 
   if (nargin <= 0)
     return;
 
   int expected_nargin = length ();
 
-  Pix p = first ();
+  Pix p = lst.first ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
-      tree_identifier *elt = this->operator () (p);
+      tree_identifier *elt = lst (p);
 
       octave_lvalue ref = elt->lvalue ();
 
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
 	      ::error ("invalid use of colon in function argument list");
 	      return;
 	    }
 
 	  ref.assign (octave_value::op_asn_eq, args(i));
 	}
       else
 	ref.assign (octave_value::op_asn_eq, octave_value ());
 
-      next (p);
+      lst.next (p);
     }
 }
 
 void
 tree_parameter_list::clear (void)
 {
   int len = length ();
 
-  Pix p = first ();
+  Pix p = lst.first ();
 
   for (int i = 0; i < len; i++)
     {
-      tree_identifier *elt = this->operator () (p);
+      tree_identifier *elt = lst (p);
 
       octave_lvalue ref = elt->lvalue ();
 
       ref.assign (octave_value::op_asn_eq, octave_value ());
 
-      next (p);
+      lst.next (p);
     }
 }
 
 octave_value_list
 tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
 {
   int nout = length ();
 
   if (vr_list)
     nout += vr_list->length ();
 
   octave_value_list retval;
   retval.resize (nout);
 
   int i = 0;
 
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
       tree_identifier *elt = this->operator () (p);
 
       if (elt->is_defined ())
 	retval(i) = elt->rvalue ();
 
       i++;
     }
@@ -164,19 +164,19 @@ tree_parameter_list::convert_to_const_ve
   return retval;
 }
 
 bool
 tree_parameter_list::is_defined (void)
 {
   bool status = true;
 
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_identifier *elt = this->operator () (p);
+      tree_identifier *elt = lst (p);
 
       if (! elt->is_defined ())
 	{
 	  status = false;
 	  break;
 	}
     }
 
@@ -188,19 +188,19 @@ tree_parameter_list::accept (tree_walker
 {
   tw.visit_parameter_list (*this);
 }
 
 // Return lists.
 
 tree_return_list::~tree_return_list (void)
 {
-  while (! empty ())
+  while (! lst.empty ())
     {
-      tree_index_expression *t = remove_front ();
+      tree_index_expression *t = lst.remove_front ();
       delete t;
     }
 }
 
 void
 tree_return_list::accept (tree_walker& tw)
 {
   tw.visit_return_list (*this);
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -38,28 +38,41 @@ class tree_va_return_list;
 
 class tree_walker;
 
 // Parameter lists.  Used to hold the list of input and output
 // parameters in a function definition.  Elements are identifiers
 // only.
 
 class
-tree_parameter_list : public SLList<tree_identifier *>
+tree_parameter_list
 {
 public:
 
   tree_parameter_list (void)
-    : SLList<tree_identifier *> (), marked_for_varargs (0) { }
+    : lst (), marked_for_varargs (0) { }
 
   tree_parameter_list (tree_identifier *t)
-    : SLList<tree_identifier *> (), marked_for_varargs (0) { append (t); }
+    : lst (), marked_for_varargs (0) { lst.append (t); }
 
   ~tree_parameter_list (void);
 
+  int length (void) const { return lst.length (); }
+
+  void append (tree_identifier *&s) { lst.append (s); }
+  void append (tree_identifier * const &s) { lst.append (s); }
+
+  tree_identifier *&operator () (Pix p) { return lst (p); }
+
+  tree_identifier * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   void mark_as_formal_parameters (void);
 
   void mark_varargs (void) { marked_for_varargs = 1; }
 
   bool takes_varargs (void) const { return marked_for_varargs != 0; }
 
   void mark_varargs_only (void) { marked_for_varargs = -1; }
 
@@ -74,63 +87,100 @@ public:
   bool is_defined (void);
 
   octave_value_list convert_to_const_vector (tree_va_return_list *vr_list);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of identifiers in the parameter list.
+  SLList<tree_identifier *> lst;
+
   int marked_for_varargs;
 
   // No copying!
 
   tree_parameter_list (const tree_parameter_list&);
 
   tree_parameter_list& operator = (const tree_parameter_list&);
 };
 
 // Return lists.  Used to hold the right hand sides of multiple
 // assignment expressions.
 
 class
-tree_return_list : public SLList<tree_index_expression *>
+tree_return_list
 {
 public:
 
   tree_return_list (void)
-    : SLList<tree_index_expression *> () { }
+    : lst () { }
 
   tree_return_list (tree_index_expression *t)
-    : SLList<tree_index_expression *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~tree_return_list (void);
 
+  void append (tree_index_expression *&s) { lst.append (s); }
+  void append (tree_index_expression * const &s) { lst.append (s); }
+
+  tree_index_expression *&operator () (Pix p) { return lst (p); }
+
+  tree_index_expression * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of expressions in the return list.
+  SLList<tree_index_expression *> lst;
+
   // No copying!
 
   tree_return_list (const tree_return_list&);
 
   tree_return_list& operator = (const tree_return_list&);
 };
 
 class
-tree_va_return_list : public SLList<octave_value>
+tree_va_return_list
 {
 public:
 
-  tree_va_return_list (void) : SLList<octave_value> () { }
+  tree_va_return_list (void) : lst () { }
 
   ~tree_va_return_list (void) { }
 
+  int length (void) const { return lst.length (); }
+
+  void clear (void) { lst.clear (); }
+
+  int empty (void) const { return lst.empty (); }
+
+  void append (octave_value& s) { lst.append (s); }
+  void append (const octave_value& s) { lst.append (s); }
+
+  octave_value& operator () (Pix p) { return lst (p); }
+
+  const octave_value& operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
 private:
 
+  // The list of values in the va return list.
+  SLList<octave_value> lst;
+
   // No copying!
 
   tree_va_return_list (const tree_va_return_list&);
 
   tree_va_return_list& operator = (const tree_va_return_list&);
 };
 
 #endif
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -812,31 +812,31 @@ subplot::print (int ndim, OSSTREAM& plot
 void
 subplot::accept (tree_walker& tw)
 {
   tw.visit_subplot (*this);
 }
 
 subplot_list::~subplot_list (void)
 {
-  while (! empty ())
+  while (! lst.empty ())
     {
-      subplot *t = remove_front ();
+      subplot *t = lst.remove_front ();
       delete t;
     }
 }
 
 int
 subplot_list::print (int ndim, OSSTREAM& plot_buf)
 {
   int status = 0;
 
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      subplot *elt = this->operator () (p);
+      subplot *elt = lst (p);
 
       plot_line_count++;
 
       if (p != first ())
 	plot_buf << ",\\\n  ";
 
       status = elt->print (ndim, plot_buf);
 
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -391,34 +391,48 @@ private:
   // No copying!
 
   subplot (const subplot&);
 
   subplot& operator = (const subplot&);
 };
 
 class
-subplot_list : public SLList<subplot *>
+subplot_list
 {
 public:
 
   subplot_list (void)
-    : SLList<subplot *> () { }
+    : lst () { }
 
   subplot_list (subplot *t)
-    : SLList<subplot *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~subplot_list (void);
 
+  void append (subplot *&s) { lst.append (s); }
+  void append (subplot * const &s) { lst.append (s); }
+
+  subplot *&operator () (Pix p) { return lst (p); }
+
+  subplot * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   int print (int ndim, OSSTREAM& plot_buf);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of subplot commands.
+  SLList<subplot *> lst;
+
   // No copying!
 
   subplot_list (const subplot_list&);
 
   subplot_list& operator = (const subplot_list&);
 };
 
 extern std::string save_in_tmp_file (octave_value& t, int ndim = 2,
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -68,19 +68,19 @@ tree_if_clause::accept (tree_walker& tw)
   tw.visit_if_clause (*this);
 }
 
 // List of if commands.
 
 void
 tree_if_command_list::eval (void)
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_if_clause *t = this->operator () (p);
+      tree_if_clause *t = lst (p);
 
       if (t->eval () || error_state)
 	break;
     }
 }
 
 void
 tree_if_command_list::accept (tree_walker& tw)
@@ -225,19 +225,19 @@ tree_switch_case::accept (tree_walker& t
   tw.visit_switch_case (*this);
 }
 
 // List of switch cases.
 
 void
 tree_switch_case_list::eval (const octave_value& val)
 {
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_switch_case *t = this->operator () (p);
+      tree_switch_case *t = lst (p);
 
       if (t->eval (val) || error_state)
 	break;
     }
 }
 
 void
 tree_switch_case_list::accept (tree_walker& tw)
diff --git a/src/pt-select.h b/src/pt-select.h
--- a/src/pt-select.h
+++ b/src/pt-select.h
@@ -83,41 +83,55 @@ private:
   // No copying!
 
   tree_if_clause (const tree_if_clause&);
 
   tree_if_clause& operator = (const tree_if_clause&);
 };
 
 class
-tree_if_command_list : public SLList<tree_if_clause *>
+tree_if_command_list
 {
 public:
 
   tree_if_command_list (void)
-    : SLList<tree_if_clause *> () { }
+    : lst () { }
 
   tree_if_command_list (tree_if_clause *t)
-    : SLList<tree_if_clause *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~tree_if_command_list (void)
     {
-      while (! empty ())
+      while (! lst.empty ())
 	{
-	  tree_if_clause *t = remove_front ();
+	  tree_if_clause *t = lst.remove_front ();
 	  delete t;
 	}
     }
 
+  void append (tree_if_clause *&s) { lst.append (s); }
+  void append (tree_if_clause * const &s) { lst.append (s); }
+
+  tree_if_clause *&operator () (Pix p) { return lst (p); }
+
+  tree_if_clause * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   void eval (void);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of if/elseif clauses.
+  SLList<tree_if_clause *> lst;
+
   // No copying!
 
   tree_if_command_list (const tree_if_command_list&);
 
   tree_if_command_list& operator = (const tree_if_command_list&);
 };
 
 class
@@ -211,41 +225,55 @@ private:
   // No copying!
 
   tree_switch_case (const tree_switch_case&);
 
   tree_switch_case& operator = (const tree_switch_case&);
 };
 
 class
-tree_switch_case_list : public SLList<tree_switch_case *>
+tree_switch_case_list
 {
 public:
 
   tree_switch_case_list (void)
-    : SLList<tree_switch_case *> () { }
+    : lst () { }
 
   tree_switch_case_list (tree_switch_case *t)
-    : SLList<tree_switch_case *> () { append (t); }
+    : lst () { lst.append (t); }
 
   ~tree_switch_case_list (void)
     {
-      while (! empty ())
+      while (! lst.empty ())
 	{
-	  tree_switch_case *t = remove_front ();
+	  tree_switch_case *t = lst.remove_front ();
 	  delete t;
 	}
     }
 
+  void append (tree_switch_case *&s) { lst.append (s); }
+  void append (tree_switch_case * const &s) { lst.append (s); }
+
+  tree_switch_case *&operator () (Pix p) { return lst (p); }
+
+  tree_switch_case * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
   void eval (const octave_value& val);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // The list of switch cases.
+  SLList<tree_switch_case *> lst;
+
   // No copying!
 
   tree_switch_case_list (const tree_switch_case_list&);
 
   tree_switch_case_list& operator = (const tree_switch_case_list&);
 };
 
 class
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -154,19 +154,19 @@ tree_statement::accept (tree_walker& tw)
 octave_value_list
 tree_statement_list::eval (bool silent, int nargout)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
-  for (Pix p = first (); p != 0; next (p))
+  for (Pix p = lst.first (); p != 0; lst.next (p))
     {
-      tree_statement *elt = this->operator () (p);
+      tree_statement *elt = lst (p);
 
       if (elt)
 	{
 	  OCTAVE_QUIT;
 
 	  retval = elt->eval (silent, nargout, function_body);
 
 	  if (error_state)
@@ -197,19 +197,19 @@ tree_statement_list::set_breakpoint (int
   return tbp.get_line ();
 }
 
 void
 tree_statement_list::delete_breakpoint (int line)
 {
   if (line < 0)
     {
-      octave_value_list lst = list_breakpoints ();
+      octave_value_list bp_lst = list_breakpoints ();
 
-      int len = lst.length ();
+      int len = bp_lst.length ();
 
       for (int line = 0; line < len; line++)
 	{
 	  tree_breakpoint tbp (line, tree_breakpoint::clear);
 	  accept (tbp);
 	}
     }
   else
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -100,49 +100,69 @@ private:
   tree_statement (const tree_statement&);
 
   tree_statement& operator = (const tree_statement&);
 };
 
 // A list of statements to evaluate.
 
 class
-tree_statement_list : public SLList<tree_statement *>
+tree_statement_list
 {
 public:
 
   tree_statement_list (void)
-    : SLList<tree_statement *> (), function_body (false) { }
+    : lst (), function_body (false) { }
 
   tree_statement_list (tree_statement *s)
-    : SLList<tree_statement *> (), function_body (false) { append (s); }
+    : lst (), function_body (false) { lst.append (s); }
 
   ~tree_statement_list (void)
     {
-      while (! empty ())
+      while (! lst.empty ())
 	{
-	  tree_statement *t = remove_front ();
+	  tree_statement *t = lst.remove_front ();
 	  delete t;
 	}
     }
 
+  void append (tree_statement *&s) { lst.append (s); }
+  void append (tree_statement * const &s) { lst.append (s); }
+
+  tree_statement *&operator () (Pix p) { return lst (p); }
+
+  tree_statement * const &operator () (Pix p) const { return lst (p); }
+
+  Pix first (void) const { return lst.first (); }
+
+  void next (Pix& p) const { return lst.next (p); }
+
+  tree_statement *front (void) { return lst.front (); }
+  tree_statement *rear (void) { return lst.rear (); }
+
+  const tree_statement *front (void) const { return lst.front (); }
+  const tree_statement *rear (void) const { return lst.rear (); }
+
   void mark_as_function_body (void) { function_body = true; }
 
   octave_value_list eval (bool silent = false, int nargout = 0);
 
   int set_breakpoint (int line);
 
   void delete_breakpoint (int line);
 
   octave_value_list list_breakpoints (void);
 
   void accept (tree_walker& tw);
 
 private:
 
+  // List of statements to evaluate.
+  SLList<tree_statement *> lst;
+
   // Does this list of statements make up the body of a function?
   bool function_body;
 
   // No copying!
 
   tree_statement_list (const tree_statement_list&);
 
   tree_statement_list& operator = (const tree_statement_list&);
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -39,18 +39,16 @@ Software Foundation, 59 Temple Place - S
 #include <unistd.h>
 #endif
 
 // Include setjmp.h, not csetjmp since the latter might only define
 // the ANSI standard C interface.
 
 #include <setjmp.h>
 
-#include "SLStack.h"
-
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-sstream.h"
 #include "oct-cmplx.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
