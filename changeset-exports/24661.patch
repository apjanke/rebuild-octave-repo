# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1517447747 28800
#      Wed Jan 31 17:15:47 2018 -0800
# Node ID 02989d7d68dc20d07c7cd5e5bf866af29c03dad1
# Parent  a4ea36915e38dcd5d144b54fee07b795f761d7ea
fftw: report error if FFTW library fails to return wisdom (bug #52244)

* fftw.cc (Ffftw): Report an error if the FFTW library fails to return a
valid wisdom string.  Resolves a fatal error when building with the Intel
MKL implementation of FFTW, which does not implement wisdom.

diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -227,29 +227,35 @@ used per default.
         {
           // Use STL function to convert to lower case
           std::transform (arg0.begin (), arg0.end (), arg0.begin (),
                           tolower);
 
           std::string arg1 = args(1).xstring_value ("fftw: WISDOM must be a string");
 
           char *str = fftw_export_wisdom_to_string ();
+          if (! str)
+            error ("fftw: could not get current FFTW wisdom");
+
           std::string wisdom_str (str);
           free (str);
 
           if (arg1.length () < 1)
             fftw_forget_wisdom ();
           else if (! fftw_import_wisdom_from_string (arg1.c_str ()))
             error ("fftw: could not import supplied WISDOM");
 
           retval = octave_value (wisdom_str);
         }
       else //dwisdom getter
         {
           char *str = fftw_export_wisdom_to_string ();
+          if (! str)
+            error ("fftw: could not get current FFTW wisdom");
+
           std::string wisdom_str (str);
           free (str);
           retval = octave_value (wisdom_str);
         }
     }
   else if (arg0 == "swisdom")
     {
       //swisdom uses fftwf_ functions (float), dwisdom fftw_ (real)
@@ -257,29 +263,35 @@ used per default.
         {
           // Use STL function to convert to lower case
           std::transform (arg0.begin (), arg0.end (), arg0.begin (),
                           tolower);
 
           std::string arg1 = args(1).xstring_value ("fftw: WISDOM must be a string");
 
           char *str = fftwf_export_wisdom_to_string ();
+          if (! str)
+            error ("fftw: could not get current FFTW wisdom");
+
           std::string wisdom_str (str);
           free (str);
 
           if (arg1.length () < 1)
             fftwf_forget_wisdom ();
           else if (! fftwf_import_wisdom_from_string (arg1.c_str ()))
             error ("fftw: could not import supplied WISDOM");
 
           retval = octave_value (wisdom_str);
         }
       else //swisdom getter
         {
           char *str = fftwf_export_wisdom_to_string ();
+          if (! str)
+            error ("fftw: could not get current FFTW wisdom");
+
           std::string wisdom_str (str);
           free (str);
           retval = octave_value (wisdom_str);
         }
     }
   else if (arg0 == "threads")
     {
       if (nargin == 2)  //threads setter
