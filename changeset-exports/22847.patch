# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480447851 18000
#      Tue Nov 29 14:30:51 2016 -0500
# Node ID 8fb0b766f61a68acca86e1e5a544af2d750f0bf9
# Parent  e827d2c089f4b1416dfc2e8ee6483712e06f727b
use F77_INT instead of octave_idx_type for liboctave Vector classes

* CColVector.cc, CRowVector.cc, dColVector.cc, dRowVector.cc,
fCColVector.cc, fCRowVector.cc, fColVector.cc, fRowVector.cc:
Use F77_INT instead of octave_idx_type for data passed to Fortran
subroutines.

diff --git a/liboctave/array/CColVector.cc b/liboctave/array/CColVector.cc
--- a/liboctave/array/CColVector.cc
+++ b/liboctave/array/CColVector.cc
@@ -295,20 +295,20 @@ operator * (const ComplexMatrix& m, cons
   return m * tmp;
 }
 
 ComplexColumnVector
 operator * (const ComplexMatrix& m, const ComplexColumnVector& a)
 {
   ComplexColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   retval.clear (nr);
 
   if (nr != 0)
     {
@@ -339,20 +339,20 @@ operator * (const Matrix& m, const Compl
   return tmp * a;
 }
 
 // diagonal matrix by column vector -> column vector operations
 
 ComplexColumnVector
 operator * (const DiagMatrix& m, const ComplexColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
@@ -364,20 +364,20 @@ operator * (const DiagMatrix& m, const C
     result.elem (i) = 0.0;
 
   return result;
 }
 
 ComplexColumnVector
 operator * (const ComplexDiagMatrix& m, const ColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
@@ -389,20 +389,20 @@ operator * (const ComplexDiagMatrix& m, 
     result.elem (i) = 0.0;
 
   return result;
 }
 
 ComplexColumnVector
 operator * (const ComplexDiagMatrix& m, const ComplexColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
diff --git a/liboctave/array/CRowVector.cc b/liboctave/array/CRowVector.cc
--- a/liboctave/array/CRowVector.cc
+++ b/liboctave/array/CRowVector.cc
@@ -277,20 +277,20 @@ ComplexRowVector::operator -= (const Row
 
 // row vector by matrix -> row vector
 
 ComplexRowVector
 operator * (const ComplexRowVector& v, const ComplexMatrix& a)
 {
   ComplexRowVector retval;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_nr = a.rows ();
-  octave_idx_type a_nc = a.cols ();
+  F77_INT a_nr = to_f77_int (a.rows ());
+  F77_INT a_nc = to_f77_int (a.cols ());
 
   if (a_nr != len)
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
@@ -401,19 +401,19 @@ operator * (const ComplexRowVector& v, c
   return v * tmp;
 }
 
 Complex
 operator * (const ComplexRowVector& v, const ComplexColumnVector& a)
 {
   Complex retval (0.0, 0.0);
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (len != a_len)
     octave::err_nonconformant ("operator *", len, a_len);
   if (len != 0)
     F77_FUNC (xzdotu, XZDOTU) (len, F77_CONST_DBLE_CMPLX_ARG (v.data ()), 1,
                                F77_CONST_DBLE_CMPLX_ARG (a.data ()), 1, F77_DBLE_CMPLX_ARG (&retval));
 
   return retval;
diff --git a/liboctave/array/dColVector.cc b/liboctave/array/dColVector.cc
--- a/liboctave/array/dColVector.cc
+++ b/liboctave/array/dColVector.cc
@@ -174,20 +174,20 @@ ColumnVector::extract_n (octave_idx_type
 
 // matrix by column vector -> column vector operations
 
 ColumnVector
 operator * (const Matrix& m, const ColumnVector& a)
 {
   ColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   retval.clear (nr);
 
   if (nr != 0)
     {
@@ -209,20 +209,20 @@ operator * (const Matrix& m, const Colum
 
 // diagonal matrix by column vector -> column vector operations
 
 ColumnVector
 operator * (const DiagMatrix& m, const ColumnVector& a)
 {
   ColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nr == 0 || nc == 0)
     retval.resize (nr, 0.0);
   else
     {
diff --git a/liboctave/array/dRowVector.cc b/liboctave/array/dRowVector.cc
--- a/liboctave/array/dRowVector.cc
+++ b/liboctave/array/dRowVector.cc
@@ -165,20 +165,20 @@ RowVector::extract_n (octave_idx_type r1
 
 // row vector by matrix -> row vector
 
 RowVector
 operator * (const RowVector& v, const Matrix& a)
 {
   RowVector retval;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_nr = a.rows ();
-  octave_idx_type a_nc = a.cols ();
+  F77_INT a_nr = to_f77_int (a.rows ());
+  F77_INT a_nc = to_f77_int (a.cols ());
 
   if (a_nr != len)
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
@@ -287,19 +287,19 @@ linspace (double x1, double x2, octave_i
 
 // row vector by column vector -> scalar
 
 double
 operator * (const RowVector& v, const ColumnVector& a)
 {
   double retval = 0.0;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (len != a_len)
     octave::err_nonconformant ("operator *", len, a_len);
 
   if (len != 0)
     F77_FUNC (xddot, XDDOT) (len, v.data (), 1, a.data (), 1, retval);
 
   return retval;
diff --git a/liboctave/array/fCColVector.cc b/liboctave/array/fCColVector.cc
--- a/liboctave/array/fCColVector.cc
+++ b/liboctave/array/fCColVector.cc
@@ -298,20 +298,20 @@ operator * (const FloatComplexMatrix& m,
   return m * tmp;
 }
 
 FloatComplexColumnVector
 operator * (const FloatComplexMatrix& m, const FloatComplexColumnVector& a)
 {
   FloatComplexColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   retval.clear (nr);
 
   if (nr != 0)
     {
@@ -340,20 +340,20 @@ operator * (const FloatMatrix& m, const 
   return tmp * a;
 }
 
 // diagonal matrix by column vector -> column vector operations
 
 FloatComplexColumnVector
 operator * (const FloatDiagMatrix& m, const FloatComplexColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return FloatComplexColumnVector (0);
 
   FloatComplexColumnVector result (nr);
@@ -365,20 +365,20 @@ operator * (const FloatDiagMatrix& m, co
     result.elem (i) = 0.0;
 
   return result;
 }
 
 FloatComplexColumnVector
 operator * (const FloatComplexDiagMatrix& m, const FloatColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return FloatComplexColumnVector (0);
 
   FloatComplexColumnVector result (nr);
@@ -390,20 +390,20 @@ operator * (const FloatComplexDiagMatrix
     result.elem (i) = 0.0;
 
   return result;
 }
 
 FloatComplexColumnVector
 operator * (const FloatComplexDiagMatrix& m, const FloatComplexColumnVector& a)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nc == 0 || nr == 0)
     return FloatComplexColumnVector (0);
 
   FloatComplexColumnVector result (nr);
diff --git a/liboctave/array/fCRowVector.cc b/liboctave/array/fCRowVector.cc
--- a/liboctave/array/fCRowVector.cc
+++ b/liboctave/array/fCRowVector.cc
@@ -278,20 +278,20 @@ FloatComplexRowVector::operator -= (cons
 
 // row vector by matrix -> row vector
 
 FloatComplexRowVector
 operator * (const FloatComplexRowVector& v, const FloatComplexMatrix& a)
 {
   FloatComplexRowVector retval;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_nr = a.rows ();
-  octave_idx_type a_nc = a.cols ();
+  F77_INT a_nr = to_f77_int (a.rows ());
+  F77_INT a_nc = to_f77_int (a.cols ());
 
   if (a_nr != len)
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
@@ -402,19 +402,19 @@ operator * (const FloatComplexRowVector&
   return v * tmp;
 }
 
 FloatComplex
 operator * (const FloatComplexRowVector& v, const FloatComplexColumnVector& a)
 {
   FloatComplex retval (0.0, 0.0);
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (len != a_len)
     octave::err_nonconformant ("operator *", len, a_len);
 
   if (len != 0)
     F77_FUNC (xcdotu, XCDOTU) (len, F77_CONST_CMPLX_ARG (v.data ()), 1,
                                F77_CONST_CMPLX_ARG (a.data ()), 1, F77_CMPLX_ARG (&retval));
 
diff --git a/liboctave/array/fColVector.cc b/liboctave/array/fColVector.cc
--- a/liboctave/array/fColVector.cc
+++ b/liboctave/array/fColVector.cc
@@ -174,20 +174,20 @@ FloatColumnVector::extract_n (octave_idx
 
 // matrix by column vector -> column vector operations
 
 FloatColumnVector
 operator * (const FloatMatrix& m, const FloatColumnVector& a)
 {
   FloatColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   retval.clear (nr);
 
   if (nr != 0)
     {
@@ -209,20 +209,20 @@ operator * (const FloatMatrix& m, const 
 
 // diagonal matrix by column vector -> column vector operations
 
 FloatColumnVector
 operator * (const FloatDiagMatrix& m, const FloatColumnVector& a)
 {
   FloatColumnVector retval;
 
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.cols ();
+  F77_INT nr = to_f77_int (m.rows ());
+  F77_INT nc = to_f77_int (m.cols ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (nc != a_len)
     octave::err_nonconformant ("operator *", nr, nc, a_len, 1);
 
   if (nr == 0 || nc == 0)
     retval.resize (nr, 0.0);
   else
     {
diff --git a/liboctave/array/fRowVector.cc b/liboctave/array/fRowVector.cc
--- a/liboctave/array/fRowVector.cc
+++ b/liboctave/array/fRowVector.cc
@@ -165,20 +165,20 @@ FloatRowVector::extract_n (octave_idx_ty
 
 // row vector by matrix -> row vector
 
 FloatRowVector
 operator * (const FloatRowVector& v, const FloatMatrix& a)
 {
   FloatRowVector retval;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_nr = a.rows ();
-  octave_idx_type a_nc = a.cols ();
+  F77_INT a_nr = to_f77_int (a.rows ());
+  F77_INT a_nc = to_f77_int (a.cols ());
 
   if (a_nr != len)
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
@@ -287,19 +287,19 @@ linspace (float x1, float x2, octave_idx
 
 // row vector by column vector -> scalar
 
 float
 operator * (const FloatRowVector& v, const FloatColumnVector& a)
 {
   float retval = 0.0;
 
-  octave_idx_type len = v.numel ();
+  F77_INT len = to_f77_int (v.numel ());
 
-  octave_idx_type a_len = a.numel ();
+  F77_INT a_len = to_f77_int (a.numel ());
 
   if (len != a_len)
     octave::err_nonconformant ("operator *", len, a_len);
 
   if (len != 0)
     F77_FUNC (xsdot, XSDOT) (len, v.data (), 1, a.data (), 1, retval);
 
   return retval;
