# HG changeset patch
# User jwe
# Date 1045208187 0
#      Fri Feb 14 07:36:27 2003 +0000
# Node ID 0990c9b77109f9c022d9548442436e332e88d40c
# Parent  0b24abe1ba0bd461904d061683f1e55dbb309984
[project @ 2003-02-14 07:36:26 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+2003-02-13  Arno Klaassen  <arno@scito.com>
+
+        * configure.in: Fix SH_LD and SH_LDFLAGS for -*-*-freebsd*.
+
+2003-02-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Use '$(CXX)', '$(AR)', not "$CXX" and "$AR" when
+	setting variables for building shared libraries.
+
 2003-02-13  Paul Kienzle <pkienzle@users.sf.net>
 
 	* examples/make_int.cc: Support for ISO standard compilers.
 
 2003-01-22  Richard Stallman <rms@gnu.org>
 
 	* emacs/octave-mod.el (octave-mode-map): Avoid binding keys that
 	are reserved for users.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.409 $)
+AC_REVISION($Revision: 1.410 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -625,31 +625,35 @@ CXXPICFLAG=-fPIC
 FPICFLAG=-fPIC
 SHLEXT=so
 SHLLIB='$(SHLEXT)'
 SHLBIN=
 SHLEXT_VER='$(SHLEXT).$(version)'
 SHLLIB_VER='$(SHLLIB).$(version)'
 SHLBIN_VER='$(SHLBIN).$(version)'
 SHLLINKEXT=
-SH_LD="$CXX"
+SH_LD='$(CXX)'
 SH_LDFLAGS=-shared
 MKOCTFILE_SH_LDFLAGS='$(SH_LDFLAGS)'
 SONAME_FLAGS=
 RLD_FLAG=
 NO_OCT_FILE_STRIP=false
 INCLUDE_LINK_DEPS=false
-TEMPLATE_AR="$AR"
+TEMPLATE_AR='$(AR)'
 TEMPLATE_ARFLAGS="$ARFLAGS"
 library_path_var=LD_LIBRARY_PATH
 case "$canonical_host_type" in
-  *-*-386bsd* | *-*-openbsd* | *-*-netbsd* | *-*-freebsd*)
+  *-*-386bsd* | *-*-openbsd* | *-*-netbsd*)
     SH_LD=ld
     SH_LDFLAGS=-Bshareable
   ;;
+  *-*-freebsd*)
+    SH_LD='$(CC)'
+    SH_LDFLAGS=-shared -Wl,-x
+  ;;
   alpha*-dec-osf*)
     CPICFLAG=
     CXXPICFLAG=
     FPICFLAG=
     SH_LDFLAGS="-shared -Wl,-expect_unresolved -Wl,'*'"
     RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
   ;;
   *-*-darwin*)
@@ -733,17 +737,17 @@ case "$canonical_host_type" in
       CXXPICFLAG=-KPIC
       SH_LDFLAGS=-G
     fi
     RLD_FLAG='-R $(octlibdir)'
     # Template closures in archive libraries need a different mechanism.
     if test "$GXX" = yes; then
       true
     else
-      TEMPLATE_AR="$CXX"
+      TEMPLATE_AR='$(CXX)'
       TEMPLATE_ARFLAGS="-xar -o"
     fi
   ;;
 esac
 
 if $use_rpath; then
   true
 else
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -38,17 +38,17 @@ Array2<T>::value (void)
       idx_vector *tmp = get_idx ();
       idx_vector idx_i = tmp[0];
       idx_vector idx_j = tmp[1];
 
       return index (idx_i, idx_j);
     }
   else if (n_idx == 1)
     {
-      return index (idx[0]);
+      return index (Array<T>::idx[0]);
     }
   else
     (*current_liboctave_error_handler)
       ("invalid number of indices for matrix expression");
 
   clear_index ();
 
   return retval;
@@ -93,17 +93,24 @@ Array2<T>::index (idx_vector& idx_arg, i
       // shape as the index.  Otherwise, it has same orientation as
       // indexed object.
 
       Array<T> tmp = Array<T>::index (idx_arg, resize_ok);
 
       int len = tmp.length ();
 
       if (len == 0)
-	retval = Array2<T> (idx_orig_rows, idx_orig_columns);
+	{
+	  if (idx_orig_rows == 0 || idx_orig_columns == 0)
+	    retval = Array2<T> (idx_orig_rows, idx_orig_columns);
+	  else if (nr == 1)
+	    retval = Array2<T> (1, 0);
+	  else
+	    retval = Array2<T> (0, 1);
+	}
       else
 	{
 	  if (idx_orig_rows == 1 || idx_orig_columns == 1)
 	    {
 	      if (nr == 1)
 		retval = Array2<T> (tmp, 1, len);
 	      else
 		retval = Array2<T> (tmp, len, 1);
@@ -278,20 +285,20 @@ Array2<T>::maybe_delete_elements (idx_ve
 		    new_data[ii] = elem (0, i);
 		  else
 		    new_data[ii] = elem (i, 0);
 
 		  ii++;
 		}
 	    }
 
-	  if (--rep->count <= 0)
-	    delete rep;
+	  if (--(Array<T>::rep)->count <= 0)
+	    delete Array<T>::rep;
 
-	  rep = new typename Array<T>::ArrayRep (new_data, new_n);
+	  Array<T>::rep = new typename Array<T>::ArrayRep (new_data, new_n);
 
 	  if (nr == 1)
 	    {
 	      d1 = 1;
 	      d2 = new_n;
 	    }
 	  else
 	    {
@@ -392,20 +399,20 @@ Array2<T>::maybe_delete_elements (idx_ve
 			  else
 			    {
 			      for (int i = 0; i < nr; i++)
 				new_data[nr*jj+i] = elem (i, j);
 			      jj++;
 			    }
 			}
 
-		      if (--rep->count <= 0)
-			delete rep;
+		      if (--(Array<T>::rep)->count <= 0)
+			delete Array<T>::rep;
 
-		      rep = new typename Array<T>::ArrayRep (new_data, nr * new_nc);
+		      Array<T>::rep = new typename Array<T>::ArrayRep (new_data, nr * new_nc);
 
 		      d2 = new_nc;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
@@ -456,20 +463,20 @@ Array2<T>::maybe_delete_elements (idx_ve
 			  else
 			    {
 			      for (int j = 0; j < nc; j++)
 				new_data[new_nr*j+ii] = elem (i, j);
 			      ii++;
 			    }
 			}
 
-		      if (--rep->count <= 0)
-			delete rep;
+		      if (--(Array<T>::rep)->count <= 0)
+			delete Array<T>::rep;
 
-		      rep = new typename Array<T>::ArrayRep (new_data, new_nr * nc);
+		      Array<T>::rep = new typename Array<T>::ArrayRep (new_data, new_nr * nc);
 
 		      d1 = new_nr;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -119,24 +119,24 @@ Array2<T>::resize (int r, int c)
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (r, c));
+  Array<T>::rep = new typename Array<T>::ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
@@ -159,24 +159,24 @@ Array2<T>::resize (int r, int c, const T
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (r, c));
+  Array<T>::rep = new typename Array<T>::ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -53,30 +53,30 @@ Array3<T>::resize (int r, int c, int p)
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new typename Array<T>::ArrayRep (ts);
+  Array<T>::rep = new typename Array<T>::ArrayRep (ts);
 
-  d1 = r;
-  d2 = c;
+  Array2<T>::d1 = r;
+  Array2<T>::d2 = c;
   d3 = p;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
       int min_p = old_d3 < p ? old_d3 : p;
 
@@ -99,31 +99,31 @@ Array3<T>::resize (int r, int c, int p, 
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
 
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new typename Array<T>::ArrayRep (ts);
+  Array<T>::rep = new typename Array<T>::ArrayRep (ts);
 
-  d1 = r;
-  d2 = c;
+  Array2<T>::d1 = r;
+  Array2<T>::d2 = c;
   d3 = p;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
   int min_p = old_d3 < p ? old_d3 : p;
 
   if (old_data && old_len > 0)
     for (int k = 0; k < min_p; k++)
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -43,107 +43,107 @@ class
 Array3 : public Array2<T>
 {
 protected:
 
   int d3;
 
   Array3 (T *d, int n, int m, int k) : Array2<T> (d, n, get_size (m, k))
     {
-      d2 = m;
+      Array2<T>::d2 = m;
       d3 = k;
       set_max_indices (3);
     }
 
 public:
 
   Array3 (void) : Array2<T> ()
     {
-      d2 = 0;
+      Array2<T>::d2 = 0;
       d3 = 0;
       set_max_indices (3);
     }
 
   Array3 (int n, int m, int k) : Array2<T> (n, get_size (m, k))
     {
-      d2 = m;
+      Array2<T>::d2 = m;
       d3 = k;
       set_max_indices (3);
     }
 
   Array3 (int n, int m, int k, const T& val) : Array2<T> (n, m*k, val)
     {
-      d2 = m;
+      Array2<T>::d2 = m;
       d3 = k;
       set_max_indices (3);
     }
 
   Array3 (const Array3<T>& a) : Array2<T> (a)
     {
-      d2 = a.d2;
+      Array2<T>::d2 = a.d2;
       d3 = a.d3;
       set_max_indices (3);
     }
 
   ~Array3 (void) { }
 
   Array3<T>& operator = (const Array3<T>& a)
     {
-      if (this != &a && rep != a.rep)
+      if (this != &a && Array<T>::rep != a.rep)
 	{
 	  Array<T>::operator = (a);
-	  d1 = a.d1;
-	  d2 = a.d2;
+	  Array2<T>::d1 = a.d1;
+	  Array2<T>::d2 = a.d2;
 	  d3 = a.d3;
 	}
 
       return *this;
     }
 
   int dim3 (void) const { return d3; }
 
   // No checking of any kind, ever.
 
-  T& xelem (int i, int j, int k) { return Array2<T>::xelem (i, d2*k+j); }
-  T xelem (int i, int j, int k) const { return Array2<T>::xelem (i, d2*k+j); }
+  T& xelem (int i, int j, int k) { return Array2<T>::xelem (i, Array2<T>::d2*k+j); }
+  T xelem (int i, int j, int k) const { return Array2<T>::xelem (i, Array2<T>::d2*k+j); }
 
   // Note that the following element selection methods don't use
   // xelem() because they need to make use of the code in
   // Array<T>::elem() that checks the reference count.
 
   T& checkelem (int i, int j, int k)
     {
-      if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+      if (i < 0 || j < 0 || k < 0 || i >= Array2<T>::d1 || j >= Array2<T>::d2 || k >= d3)
 	{
 	  (*current_liboctave_error_handler) ("range error in Array3");
 	  static T foo;
 	  return foo;
 	}
-      return Array2<T>::elem (i, d2*k+j);
+      return Array2<T>::elem (i, Array2<T>::d2*k+j);
     }
 
-  T& elem (int i, int j, int k) { return Array2<T>::elem (i, d2*k+j); }
+  T& elem (int i, int j, int k) { return Array2<T>::elem (i, Array2<T>::d2*k+j); }
 
 #if defined (BOUNDS_CHECKING)
   T& operator () (int i, int j, int k) { return checkelem (i, j, k); }
 #else
   T& operator () (int i, int j, int k) { return elem (i, j, k); }
 #endif
 
   T checkelem (int i, int j, int k) const
     {
-      if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+      if (i < 0 || j < 0 || k < 0 || i >= Array2<T>::d1 || j >= Array2<T>::d2 || k >= d3)
 	{
 	  (*current_liboctave_error_handler) ("range error in Array3");
 	  return T ();
 	}
-      return Array2<T>::elem (i, d1*k+j);
+      return Array2<T>::elem (i, Array2<T>::d1*k+j);
     }
 
-  T elem (int i, int j, int k) const { return Array2<T>::elem (i, d2*k+j); }
+  T elem (int i, int j, int k) const { return Array2<T>::elem (i, Array2<T>::d2*k+j); }
 
 #if defined (BOUNDS_CHECKING)
   T operator () (int i, int j, int k) const { return checkelem (i, j, k); }
 #else
   T operator () (int i, int j, int k) const { return elem (i, j, k); }
 #endif
 
   void resize (int n, int m, int k);
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -224,20 +224,20 @@ ArrayN<T>::resize (const Array<int>& dim
 	  no_change = false;
 	  break;
 	}
     }
 
   if (no_change)
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (dims));
+  Array<T>::rep = new typename Array<T>::ArrayRep (get_size (dims));
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
   Array<int> ra_idx (dimensions.length (), 0);
@@ -279,33 +279,33 @@ ArrayN<T>::resize (const Array<int>& dim
 	  no_change = false;
 	  break;
 	}
     }
 
   if (no_change)
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int len = get_size (dims);
 
-  rep = new typename Array<T>::ArrayRep (len);
+  Array<T>::rep = new typename Array<T>::ArrayRep (len);
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
   dimensions = dims;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
   for (int i = 0; i < len; i++)
-    rep->elem (i) = val;
+    Array<T>::rep->elem (i) = val;
 
   for (int i = 0; i < old_len; i++)
     {
       if (index_in_bounds (ra_idx, dimensions))
 	xelem (ra_idx) = old_data[i];
 
       increment_index (ra_idx, dimensions);
     }
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -43,16 +43,17 @@ class idx_vector;
 // N-dimensional array class.
 
 template <class T>
 class
 ArrayN : public Array<T>
 {
 protected:
 
+
   ArrayN (T *d, const Array<int>& dims) : Array<T> (d, get_size (dims))
     {
       dimensions = dims;
       set_max_indices (dimensions.length ());
     }
 
 public:
 
@@ -90,17 +91,17 @@ public:
       dimensions = dims;
       set_max_indices (dimensions.length ());
     }
 
   ~ArrayN (void) { }
 
   ArrayN<T>& operator = (const ArrayN<T>& a)
     {
-      if (this != &a && rep != a.rep)
+      if (this != &a && Array<T>::rep != a.rep)
 	{
 	  Array<T>::operator = (a);
 	  dimensions = a.dimensions;
 	}
 
       return *this;
     }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2003-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (Array2<T>::index): Fix thinko.
+	Additional compatibility fix.
+
+2003-02-13  Arno Klaassen  <arno@scito.com>
+ 
+        * Array2-idx.h, Array2.cc, Array2.h, Array3.cc, Array3.h,
+	ArrayN.cc, ArrayN.h, DiagArray2.cc, DiagArray2.h, MDiagArray2.h:
+	Sprinkle with Array<T>:: as necessary for gcc 3.4.
+ 
 2003-02-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>::index (idx_vector&, int, const T&)):
 	Compatibility fix.
 
 2003-02-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CColVector.cc (ComplexColumnVector::extract_n): New function.
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -129,23 +129,23 @@ DiagArray2<T>::resize (int r, int c)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new typename Array<T>::ArrayRep (new_len);
+  Array<T>::rep = new typename Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
@@ -165,23 +165,23 @@ DiagArray2<T>::resize (int r, int c, con
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  typename Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new typename Array<T>::ArrayRep (new_len);
+  Array<T>::rep = new typename Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -66,19 +66,19 @@ public:
   MDiagArray2<T>& operator = (const MDiagArray2<T>& a)
     {
       DiagArray2<T>::operator = (a);
       return *this;
     }
 
   operator MArray2<T> () const
     {
-      MArray2<T> retval (nr, nc,  T (0));
+      MArray2<T> retval (DiagArray2<T>::nr, DiagArray2<T>::nc,  T (0));
 
-      int len = nr < nc ? nr : nc;
+      int len = DiagArray2<T>::nr < DiagArray2<T>::nc ? DiagArray2<T>::nr : DiagArray2<T>::nc;
 
       for (int i = 0; i < len; i++)
 	retval.xelem (i, i) = xelem (i, i);
 
       return retval;
     }
 
   static MDiagArray2<T> nil_array;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2003-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-str-mat.h (octave_char_matrix_str::is_real_type, 
+	octave_char_matrix_str::is_matrix_type,
+	octave_char_matrix_str::is_numeric_type): Always return false.
+
+2003-02-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (<CCHAR>): If we are parsing a command, reset start state.
+	Use BEGIN (INITIAL) instead of BEGIN 0.  Use parens around start
+	state in BEGIN statements.
+
 2003-02-13  Paul Kienzle <pkienzle@users.sf.net>
 
 	* variables.cc (Fmlock, Fmunlock, Fmislocked): New functions.
 
 	* variables.cc (mlock, munlock, mislocked): New functions.
 	* variables.h: Provide decls.
 
 	* symtab.h (symbol_record::unmark_static): New function.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -240,51 +240,51 @@ NOT	((\~)|(\!))
 POW     ((\*\*)|(\^))
 EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 <NESTED_FUNCTION_END>. {
-    BEGIN NESTED_FUNCTION_BEGIN;
+    BEGIN (NESTED_FUNCTION_BEGIN);
     unput (yytext[0]);
     return ';';
   }
 
 <NESTED_FUNCTION_BEGIN>. {
-    BEGIN 0;
+    BEGIN (INITIAL);
     unput (yytext[0]);
     prep_for_nested_function ();
     return FCN;
   }
 
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
 %}
 
 <COMMAND_START>{NL} {
-    BEGIN 0;
+    BEGIN (INITIAL);
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
     return '\n';
   }
 
 <COMMAND_START>[\;\,] {
     if (lexer_flags.doing_set && strcmp (yytext, ",") == 0)
       {
 	TOK_PUSH_AND_RETURN (yytext, STRING);
       }
     else
       {
-	BEGIN 0;
+	BEGIN (INITIAL);
 	if (strcmp (yytext, ",") == 0)
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
       }
   }
 
 <COMMAND_START>[\"\'] {
@@ -450,17 +450,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
       {
 	lexer_flags.in_plot_range = true;
 	return OPEN_BRACE;
       }
     else
       {
 	lexer_flags.bracketflag++;
-	BEGIN MATRIX_START;
+	BEGIN (MATRIX_START);
 	return '[';
       }
   }
 
 \] {
     nesting_level.remove ();
 
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
@@ -650,16 +650,19 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     maybe_gripe_matlab_incompatible_comment (yytext[0]);
 
+    if (YY_START == COMMAND_START)
+      BEGIN (INITIAL);
+
     if (nesting_level.none ())
       return '\n';
     else if (nesting_level.is_bracket ())
       return ';';
   }
 
 %{
 // Other operators.
@@ -836,17 +839,17 @@ do_comma_insert_check (void)
 // Fix things up for errors or interrupts.  The parser is never called
 // recursively, so it is always safe to reinitialize its state before
 // doing any parsing.
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
-  BEGIN 0;
+  BEGIN (INITIAL);
 
   parser_end_of_input = false;
   end_tokens_expected = 0;
 
   while (! symtab_context.empty ())
     symtab_context.pop ();
 
   // We do want a prompt by default.
@@ -1263,17 +1266,17 @@ is_keyword (const std::string& s)
 	case function_kw:
 	  {
 	    if (lexer_flags.defining_func)
 	      {
 		if (reading_fcn_file)
 		  {
 		    if (lexer_flags.parsing_nested_function)
 		      {
-			BEGIN NESTED_FUNCTION_END;
+			BEGIN (NESTED_FUNCTION_END);
 
 			yylval.tok_val = new token (token::function_end, l, c);
 			token_stack.push (yylval.tok_val);
 
 			return END;
 		      }
 		    else
 		      {
@@ -2251,17 +2254,17 @@ handle_close_bracket (int spc_gobbled)
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
       lexer_flags.bracketflag--;
     }
 
   if (lexer_flags.bracketflag == 0)
-    BEGIN 0;
+    BEGIN (INITIAL);
 
   if (next_token_is_assign_op () && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else
     {
       int c1 = yyinput ();
@@ -2484,17 +2487,17 @@ handle_identifier (void)
 	{
 	  force_local_variable (tok);
 	}
       else if (! next_tok_is_paren)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = true;
 
-	  BEGIN COMMAND_START;
+	  BEGIN (COMMAND_START);
 	}
     }
 
   // Find the token in the symbol table.  Beware the magic
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";    
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -85,21 +85,21 @@ public:
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   bool is_string (void) const { return true; }
 
-  bool is_real_type (void) const { return Vimplicit_str_to_num_ok; }
+  bool is_real_type (void) const { return false; }
 
-  bool is_matrix_type (void) const { return Vimplicit_str_to_num_ok; }
+  bool is_matrix_type (void) const { return false; }
 
-  bool is_numeric_type (void) const { return Vimplicit_str_to_num_ok; }
+  bool is_numeric_type (void) const { return false; }
 
   bool valid_as_scalar_index (void) const;
 
   Matrix matrix_value (bool = false) const;
 
   string_vector all_strings (void) const;
 
   std::string string_value (void) const;
diff --git a/test/octave.test/number/ismatrix-5.m b/test/octave.test/number/ismatrix-5.m
--- a/test/octave.test/number/ismatrix-5.m
+++ b/test/octave.test/number/ismatrix-5.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! ismatrix ("t");
 implicit_str_to_num_ok = 1;
-t2 = ismatrix ("t");
+t2 = ! ismatrix ("t");
 t1 && t2
diff --git a/test/octave.test/number/ismatrix-6.m b/test/octave.test/number/ismatrix-6.m
--- a/test/octave.test/number/ismatrix-6.m
+++ b/test/octave.test/number/ismatrix-6.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! ismatrix ("test");
 implicit_str_to_num_ok = 1;
-t2 = ismatrix ("test");
+t2 = ! ismatrix ("test");
 t1 && t2
diff --git a/test/octave.test/number/ismatrix-7.m b/test/octave.test/number/ismatrix-7.m
--- a/test/octave.test/number/ismatrix-7.m
+++ b/test/octave.test/number/ismatrix-7.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! ismatrix (["test"; "ing"]);
 implicit_str_to_num_ok = 1;
-t2 = ismatrix (["test"; "ing"]);
+t2 = ! ismatrix (["test"; "ing"]);
 t1 && t2
diff --git a/test/octave.test/number/isscalar-5.m b/test/octave.test/number/isscalar-5.m
--- a/test/octave.test/number/isscalar-5.m
+++ b/test/octave.test/number/isscalar-5.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! isscalar ("t");
 implicit_str_to_num_ok = 1;
-t2 = isscalar ("t");
+t2 = ! isscalar ("t");
 t1 && t2
diff --git a/test/octave.test/number/issquare-5.m b/test/octave.test/number/issquare-5.m
--- a/test/octave.test/number/issquare-5.m
+++ b/test/octave.test/number/issquare-5.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! issquare ("t");
 implicit_str_to_num_ok = 1;
-t2 = (issquare ("t") == 1);
+t2 = ! issquare ("t");
 t1 && t2
diff --git a/test/octave.test/number/issquare-7.m b/test/octave.test/number/issquare-7.m
--- a/test/octave.test/number/issquare-7.m
+++ b/test/octave.test/number/issquare-7.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! issquare (["test"; "ing"; "1"; "2"]);
 implicit_str_to_num_ok = 1;
-t2 = (issquare (["test"; "ing"; "1"; "2"]) == 4);
+t2 = ! issquare (["test"; "ing"; "1"; "2"]);
 t1 && t2
diff --git a/test/octave.test/number/issymmetric-5.m b/test/octave.test/number/issymmetric-5.m
--- a/test/octave.test/number/issymmetric-5.m
+++ b/test/octave.test/number/issymmetric-5.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! issymmetric ("t");
 implicit_str_to_num_ok = 1;
-t2 = (issymmetric ("t") == 1);
+t2 = ! issymmetric ("t");
 t1 && t2
diff --git a/test/octave.test/number/issymmetric-7.m b/test/octave.test/number/issymmetric-7.m
--- a/test/octave.test/number/issymmetric-7.m
+++ b/test/octave.test/number/issymmetric-7.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! issymmetric (["te"; "et"]);
 implicit_str_to_num_ok = 1;
-t2 = (issymmetric (["te"; "et"]) == 2);
+t2 = ! issymmetric (["te"; "et"]);
 t1 && t2
diff --git a/test/octave.test/number/isvector-5.m b/test/octave.test/number/isvector-5.m
--- a/test/octave.test/number/isvector-5.m
+++ b/test/octave.test/number/isvector-5.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! isvector ("t");
 implicit_str_to_num_ok = 1;
-t2 = isvector ("t");
+t2 = ! isvector ("t");
 t1 && t2
diff --git a/test/octave.test/number/isvector-6.m b/test/octave.test/number/isvector-6.m
--- a/test/octave.test/number/isvector-6.m
+++ b/test/octave.test/number/isvector-6.m
@@ -1,5 +1,5 @@
 implicit_str_to_num_ok = 0;
 t1 = ! isvector ("test");
 implicit_str_to_num_ok = 1;
-t2 = isvector ("test");
+t2 = ! isvector ("test");
 t1 && t2
