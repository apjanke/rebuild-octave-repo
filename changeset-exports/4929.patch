# HG changeset patch
# User jwe
# Date 1091565934 0
#      Tue Aug 03 20:45:34 2004 +0000
# Node ID 585e9a8c2ef85fea96bfe4f13487d7f831b39cb2
# Parent  1cf16fb3459a2febd30a5d301a0b9e5f1544ac57
[project @ 2004-08-03 20:45:34 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -66,60 +66,55 @@ Array<T>::~Array (void)
 }
 
 template <class T>
 Array<T>
 Array<T>::squeeze (void) const
 {
   Array<T> retval = *this;
 
-  bool dims_changed = false;
-
-  dim_vector new_dimensions = dimensions;
-
-  int k = 0;
-
-  for (int i = 0; i < ndims (); i++)
+  if (ndims () > 2)
     {
-      if (dimensions(i) == 1)
-	dims_changed = true;
-      else
-	new_dimensions(k++) = dimensions(i);
-    }
-
-  if (dims_changed)
-    {
-      switch (k)
+      bool dims_changed = false;
+
+      dim_vector new_dimensions = dimensions;
+
+      int k = 0;
+
+      for (int i = 0; i < ndims (); i++)
 	{
-	case 0:
-	  new_dimensions = dim_vector (1, 1);
-	  break;
-
-	case 1:
-	  {
-	    int tmp = new_dimensions(0);
-
-	    new_dimensions.resize (2);
-
-	    if (dimensions(0) == 1)
+	  if (dimensions(i) == 1)
+	    dims_changed = true;
+	  else
+	    new_dimensions(k++) = dimensions(i);
+	}
+
+      if (dims_changed)
+	{
+	  switch (k)
+	    {
+	    case 0:
+	      new_dimensions = dim_vector (1, 1);
+	      break;
+
+	    case 1:
 	      {
-		new_dimensions(0) = 1;
-		new_dimensions(1) = tmp;
-	      }
-	    else
-	      {
+		int tmp = new_dimensions(0);
+
+		new_dimensions.resize (2);
+
 		new_dimensions(0) = tmp;
 		new_dimensions(1) = 1;
 	      }
-	  }
-	  break;
-
-	default:
-	  new_dimensions.resize (k);
-	  break;
+	      break;
+
+	    default:
+	      new_dimensions.resize (k);
+	      break;
+	    }
 	}
 
       retval.make_unique ();
 
       retval.dimensions = new_dimensions;
     }
 
   return retval;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2004-08-03  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::squeeze): Do nothing for 2-d arrays.  For
+	arrays with more than two dimensions and only one non-singleton
+	dimension, return a column vector.
+
 2004-07-28  John W. Eaton  <jwe@octave.org>
 
 	* oct-cmplx.h (pow (const Complex&, const double&):
 	Convert second arg to complex to avoid libstdc++ bug.
 
 2004-07-27  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (bitshift): New arg, MASK.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2004-08-03  John W. Eaton  <jwe@octave.org>
 
+	* ov-usr-fcn.cc (octave_user_fcn::do_multi_index_op): Call
+	install_automatic_vars here.
+	(octave_user_fcn::octave_user_fcn): Not here.
+	(install_automatic_vars): Don't mark argn_sr, nargin_sr,
+	nargout_sr, or varargin_sr as static.
+
 	* oct-stream.cc (octave_scan): Avoid need for pushing two
 	characters back on the input stream.
 
 2004-08-02  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_scan): For %i format, recognize numbers
 	with leading 0x or 0X as hex and leading 0 as octal.
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -74,18 +74,16 @@ octave_user_function::octave_user_functi
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (0), nested_function (false),
     args_passed (), num_args_passed (0),
     curr_va_arg_number (0), vr_list (0), symtab_entry (0),
     argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
-  install_automatic_vars ();
-
   if (param_list)
     {
       num_named_args = param_list->length ();
       curr_va_arg_number = num_named_args;
     }
 }
 
 octave_user_function::~octave_user_function (void)
@@ -374,16 +372,18 @@ octave_user_function::do_multi_index_op 
 
 	  unwind_protect::add (delete_vr_list, vr_list);
 	}
     }
 
   if (vr_list)
     vr_list->clear ();
 
+  install_automatic_vars ();
+
   // Force symbols to be undefined again when this function exits.
 
   unwind_protect::add (clear_symbol_table, sym_tab);
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   unwind_protect_ptr (curr_caller_sym_tab);
@@ -551,25 +551,18 @@ void
 octave_user_function::install_automatic_vars (void)
 {
   if (sym_tab)
     {
       argn_sr = sym_tab->lookup ("argn", true);
       nargin_sr = sym_tab->lookup ("__nargin__", true);
       nargout_sr = sym_tab->lookup ("__nargout__", true);
 
-      argn_sr->mark_as_static ();
-      nargin_sr->mark_as_static ();
-      nargout_sr->mark_as_static ();
-
       if (takes_varargs ())
-	{
-	  varargin_sr = sym_tab->lookup ("varargin", true);
-	  varargin_sr->mark_as_static ();
-	}
+	varargin_sr = sym_tab->lookup ("varargin", true);
     }
 }
 
 void
 octave_user_function::bind_automatic_vars
   (const string_vector& arg_names, int nargin, int nargout,
    const octave_value_list& va_args)
 {
