# HG changeset patch
# User Guillaume Flandin <guillaume.offline@gmail.com>
# Date 1540637687 14400
#      Sat Oct 27 06:54:47 2018 -0400
# Node ID c9ae077dedd16a3effe88ddc8b06707c6c42f052
# Parent  29eb60bd2e81dd21514f43a494734bd8a40172ab
New function openfig.m (bug #44670)

* openfig.m: New wrapper around hgload.m.
* scripts/plot/util/module.mk: Update.

* hgload.m: New option to override top-level properties.  Add support
for Matlab-named handle structures.  New tests.
* open.m: Also accept .fig file type.  Use openfig to open file.
* plot.txi: Document openfig.
* savefig.m: Add openfig to @seealso.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1103,16 +1103,18 @@ stages it is often better to save the gr
 associated information so that changes---to colors, axis limits, marker styles,
 etc.---can be made easily from within Octave.  The @code{hgsave}/@code{hgload}
 commands can be used to save and re-create a graphics object.
 
 @DOCSTRING(hgsave)
 
 @DOCSTRING(hgload)
 
+@DOCSTRING(openfig)
+
 @DOCSTRING(savefig)
 
 @node Interacting with Plots
 @subsection Interacting with Plots
 
 The user can select points on a plot with the @code{ginput} function or
 select the position at which to place text on the plot with the
 @code{gtext} function using the mouse.
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -1055,17 +1055,16 @@ function rlist = missing_functions ()
   "numpartitions",
   "numRegions",
   "numsides",
   "ode113",
   "ode23s",
   "ode23t",
   "ode23tb",
   "odextend",
-  "openfig",
   "openFile",
   "opengl",
   "ordqz",
   "outdegree",
   "outerjoin",
   "pad",
   "pagesetupdlg",
   "parse",
@@ -1153,17 +1152,16 @@ function rlist = missing_functions ()
   "rmslivers",
   "rng",
   "rowfun",
   "rtickangle",
   "rtickformat",
   "rticklabels",
   "ruler2num",
   "runperf",
-  "savefig",
   "scale",
   "scatteredInterpolant",
   "scroll",
   "second",
   "seconds",
   "selectmoveresize",
   "sendmail",
   "serial",
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -33,16 +33,19 @@
 ## Open the data file with @code{load}. If no return value @var{output}
 ## is requested, variables are loaded in the base workspace. Otherwise
 ## @var{output} will be a structure containing loaded data.
 ## @xref{XREFload, , load function}.
 ##
 ## @item .ofig
 ## Open the figure with hgload.  @xref{XREFhgload, , hgload function}.
 ##
+## @item .fig, .ofig
+## Load the figure
+##
 ## @item .exe
 ## Execute the program (on Windows systems only). No @var{output} value
 ## is returned.
 ## @end table
 ##
 ## Custom file extensions may also be handled if a function @code{openxxx},
 ## where @code{xxx} is the extension, is found in the load path.  The function
 ## must accept the file name as input.  For example, in order to load ".dat"
@@ -83,18 +86,18 @@ function output = open (file)
   elseif (strcmpi (ext, ".m"))
     edit (file);
   elseif (strcmpi (ext, ".mat") || strcmp (fname, "octave-workspace"))
     if (nargout > 0)
       output = load (file);
     else
       evalin ("base", sprintf ("load ('%s');", file));
     endif
-  elseif (strcmpi (ext, ".ofig"))
-    output = hgload (file);
+  elseif (strcmpi (ext, {".fig", ".ofig"}))
+    output = openfig (file);
     drawnow ();
   elseif (any (strcmpi (ext, {".mdl", ".slx", ".prj"})))
     error ("open: opening file type '%s' is not supported", ext);
   elseif (strcmpi (ext, ".exe"))
     if (ispc ())
       dos (file);
     else
       error ("open: executing .exe files is only supported on Windows systems");
diff --git a/scripts/plot/util/copyobj.m b/scripts/plot/util/copyobj.m
--- a/scripts/plot/util/copyobj.m
+++ b/scripts/plot/util/copyobj.m
@@ -36,17 +36,17 @@
 ## @end deftypefn
 
 ## Author: pdiribarne <pdiribarne@new-host.home>
 ## Created: 2012-04-01
 
 function hnew = copyobj (horig, hparent = 0)
 
   partypes = {"root", "figure", "axes", "hggroup"};
-  othertypes = {"line", "patch", "surface", "image", "text"};
+  othertypes = {"line", "patch", "surface", "image", "text", "uicontrol"};
   alltypes = [partypes othertypes];
 
   if (! ishghandle (horig) || nargin > 2)
     print_usage ();
   elseif (! ishghandle (hparent))
     hparent = figure (fix (hparent));
   else
     for hp = hparent(:)'
diff --git a/scripts/plot/util/hgload.m b/scripts/plot/util/hgload.m
--- a/scripts/plot/util/hgload.m
+++ b/scripts/plot/util/hgload.m
@@ -13,56 +13,109 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{h} =} hgload (@var{filename})
+## @deftypefnx {} {[@var{h}, @var{old_prop}] =} hgload (@var{filename}, @var{prop_struct})
 ## Load the graphics object in @var{filename} into the graphics handle @var{h}.
 ##
 ## If @var{filename} has no extension, Octave will try to find the file with
 ## and without the standard extension of @file{.ofig}.
-## @seealso{hgsave, struct2hdl}
+##
+## If provided, the elements of structure @var{prop_struct} will be used to
+## override the properties of top-level object stored in @var{filename} and the
+## old values will be stored in @var{old_prop}.  @var{old_prop} is a cell array
+## matching the size of @var{h}; each cell contains a structure of the existing
+## property names and values before being overriden.
+##
+## @seealso{openfig, hgsave, struct2hdl}
 ## @end deftypefn
 
 ## Author: Massimiliano Fasi
 
-function h = hgload (filename)
+function [h, old_prop] = hgload (filename, prop_struct = struct ())
 
   ## Check input arguments
-  if (nargin != 1)
+  if (nargin == 0 || nargin > 2)
     print_usage ();
   endif
 
+  ## Check second input argument
+  if (! isstruct(prop_struct))
+    error ("hgload: 'prop_struct' must be a struct");
+  endif
+
   ## Check file existence
   [~, ~, ext] = fileparts (filename);
   if (isempty (ext))
     if (! isempty (file_in_loadpath ([filename ".ofig"])))
       filename = [filename ".ofig"];
     elseif (isempty (file_in_loadpath (filename)))
       error ("hgload: unable to locate file %s", filename);
     endif
   else
     if (isempty (file_in_loadpath (filename)))
       error ("hgload: unable to locate file %s", filename);
     endif
   endif
 
-  ## Load the handle
-  try
-    stmp = load (filename, "s_oct40");
-  catch
+  ## Load the handle structure
+  hgs = {"s_oct40", "hgS_050200", "hgS_070000"};
+  hg = load (filename);
+  i = isfield (hg, hgs);
+  if (nnz (i) == 1)
+    hg = hg.(hgs{i});
+  else
     error ("hgload: could not load hgsave-formatted object in file %s", filename);
-  end_try_catch
+  endif
 
-  h = struct2hdl (stmp.s_oct40);
+  ## Override properties of top-level object
+  old_prop = [];
+  fn_new = fieldnames (prop_struct);
+  fn_old = fieldnames (hg.properties);
+  for i = 1:numel (fn_new)
+    idx = ismember (tolower (fn_old), tolower (fn_new{i}));
+    if (any (idx))
+      old_prop.(fn_new{i}) = hg.properties.(fn_old{idx});
+      hg.properties.(fn_old{idx}) = prop_struct.(fn_new{i});
+    endif
+  endfor
+  old_prop = { old_prop };
+
+  ## Build the graphics handle object
+  h = struct2hdl (hg);
 
 endfunction
 
 
 ## Functional test for hgload/hgsave pair is in hgsave.m
 
 ## Test input validation
 %!error hgload ()
-%!error hgload (1, 2)
+%!error hgload (1, 2, 3)
+%!error hgload (1, {})
 %!error <unable to locate file> hgload ("%%_A_REALLY_UNLIKELY_FILENAME_%%")
+
+## Test second input and output
+%!test
+%! unwind_protect
+%!   h1 = figure ("Visible", "off");
+%!   col = get (h1, "Color");
+%!   ftmp = [tempname() ".ofig"];
+%!   hgsave (h1, ftmp);
+%!   close (h1);
+%!   [h2, old] = hgload (ftmp);
+%!   assert (old, {[]});
+%!   [h3, old] = hgload (ftmp, struct ("Color", [1 0 0]));
+%!   assert (get (h3, "Color"), [1 0 0]);
+%!   assert (iscell (old) && numel (old) == 1);
+%!   assert (isstruct (old{1}) && isfield (old{1}, "Color"));
+%!   assert (old{1}.Color, col);
+%! unwind_protect_cleanup
+%!   unlink (ftmp);
+%!   try, close (h1); end_try_catch
+%!   try, close (h2); end_try_catch
+%!   try, close (h3); end_try_catch
+%! end_unwind_protect
diff --git a/scripts/plot/util/module.mk b/scripts/plot/util/module.mk
--- a/scripts/plot/util/module.mk
+++ b/scripts/plot/util/module.mk
@@ -65,16 +65,17 @@ GEN_FCN_FILES += $(%canon_reldir%_GEN_FC
   %reldir%/ishandle.m \
   %reldir%/ishold.m \
   %reldir%/isprop.m \
   %reldir%/linkaxes.m \
   %reldir%/linkprop.m \
   %reldir%/meshgrid.m \
   %reldir%/ndgrid.m \
   %reldir%/newplot.m \
+  %reldir%/openfig.m \
   %reldir%/pan.m \
   %reldir%/print.m \
   %reldir%/printd.m \
   %reldir%/refresh.m \
   %reldir%/refreshdata.m \
   %reldir%/rotate.m \
   %reldir%/rotate3d.m \
   %reldir%/saveas.m \
diff --git a/scripts/plot/util/openfig.m b/scripts/plot/util/openfig.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/util/openfig.m
@@ -0,0 +1,129 @@
+## Copyright (C) 2018 Guillaume Flandin
+##
+## This filename is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the filename COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {} openfig
+## @deftypefnx {} {} openfig (@var{filename})
+## @deftypefnx {} {} openfig (@dots{}, @var{copies})
+## @deftypefnx {} {} openfig (@dots{}, @var{visibility})
+## @deftypefnx {} {@var{h} =} openfig (@dots{})
+## Open a saved figure window from @var{filename} and return its graphics handle
+## @var{h}.
+##
+## By default, @var{filename} is @qcode{"Untitled.fig"}.  If a full path is not
+## specified, the file opened will be the first one encountered in the load
+## path.  If @var{filename} is not found and does not have an extension, a
+## search will take place for the first file in the load path with extension
+## @qcode{".fig"} or @qcode{".ofig"}, in that order.
+##
+## @var{copies} is an optional input indicating whether a new figure should
+## always be created (@qcode{"new"}) or if an already opened one can be reused
+## (@qcode{"reuse"}).  Default is @qcode{"new"}.
+##
+## @var{visibility} is an optional input indicating whether to make the figure
+## visible (@qcode{"visible"}) or not (@qcode{"invisible"}).  Default is
+## @qcode{"visible"} unless this setting is stored in @var{filename}, in which
+## case the latter will be used instead.
+##
+## @seealso{open, hgload, savefig, struct2hdl}
+## @end deftypefn
+
+function h = openfig (filename = "Untitled.fig", varargin)
+
+  if (nargin > 3)
+    print_usage ();
+  endif
+
+  ## Check input filename
+  [d,n,ext] = fileparts (filename);
+  if (isempty (file_in_loadpath (filename)))
+    if (isempty (ext))
+      filename = fullfile (d, [n ".fig"]);
+      if (isempty (file_in_loadpath (filename)))
+        filename = fullfile (d, [n ".ofig"]);
+        if (isempty (file_in_loadpath (filename)))
+          error ("openfig: cannot find file '%s'", filename);
+        endif
+      endif
+    else
+      error ("openfig: cannot find file '%s'", filename);
+    endif
+  endif
+  filename = file_in_loadpath (filename);
+
+  ## Get optional arguments
+  copies = true;
+  visibility = {};
+  for i = 1:numel (varargin)
+    if (! ischar (varargin{i}))
+      error ("openfig: input argument must be a char array");
+    endif
+    switch (tolower (varargin{i}))
+      case "reuse"
+        copies = false;
+      case "new"
+        copies = true;
+      case "visible"
+        visibility = {"Visible", "on"};
+      case "invisible"
+        visibility = {"Visible", "off"};
+      otherwise
+        error ("openfig: unknown option '%s'", varargin{i});
+    endswitch
+  endfor
+
+  ## Reuse an existing figure?
+  if (! copies)
+    h = findobj (allchild (0), "Type", "figure", "FileName", filename);
+    if (! isempty (h))
+      h = h(end);
+      if (! isempty (visibility))
+        set (h, visibility{:});
+      endif
+      movegui (h, "onscreen");
+      return;
+    endif
+  endif
+
+  ## Load graphics objects from file
+  prop_struct = cell2struct (visibility(2:2:end), visibility(1:2:end), 2);
+  h = hgload (filename, prop_struct);
+  set (h, "FileName", filename);
+
+endfunction
+
+%!error openfig (1, 2, 3, 4)
+%!error openfig ("%%_A_REALLY_UNLIKELY_FILENAME_%%")
+
+%!test
+%! unwind_protect
+%!   h1 = figure ("Visible", "off");
+%!   ftmp = [tempname() ".ofig"];
+%!   hgsave (h1, ftmp);
+%!   close (h1);
+%!   h2 = openfig (ftmp, "new", "invisible");
+%!   h3 = openfig (ftmp, "reuse");
+%!   assert (h2 == h3);
+%!   close (h2);
+%! unwind_protect_cleanup
+%!   unlink (ftmp);
+%!   try, close (h1); end_try_catch
+%!   try, close (h2); end_try_catch
+%!   try, close (h3); end_try_catch
+%! end_unwind_protect
diff --git a/scripts/plot/util/savefig.m b/scripts/plot/util/savefig.m
--- a/scripts/plot/util/savefig.m
+++ b/scripts/plot/util/savefig.m
@@ -26,19 +26,20 @@
 ## Save graphics handle @var{h} to file @var{filename}.
 ##
 ## If unspecified, @var{h} is set to the current figure.
 ##
 ## If unspecified, @var{filename} is set to @file{"Untitled.fig"}.  If
 ## @var{filename} does not have an extension, a default extension @file{".fig"}
 ## will be added.
 ##
-## A third input argument will be accepted but ignored, for Matlab compatibility.
+## A third input argument will be accepted but ignored, for Matlab
+## compatibility.
 ##
-## @seealso{hgsave, hdl2struct}
+## @seealso{hgsave, hdl2struct, openfig}
 ## @end deftypefn
 
 function savefig (varargin)
 
   ## Default values for input arguments
   h = [];
   filename = "Untitled.fig";
 
