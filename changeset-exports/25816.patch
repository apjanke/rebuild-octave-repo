# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1534703653 -7200
#      Sun Aug 19 20:34:13 2018 +0200
# Node ID 98242f7e8a0b8354875db91e812866e5bf30f461
# Parent  849f1a7e9a30809a0f08d7e08598a943f55d5fbf
Document how the JVM can be selected at load time (bug #49111).

* external.txi: Document the usage of JAVA_HOME.

* octave.texi: Change section title to "Set up the JVM".

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1800,17 +1800,17 @@ 34.4952
 
 The Java Interface is designed for calling Java functions from within Octave.
 If you want to do the reverse, and call Octave from within Java, try a library
 like @code{joPas} (@url{http://jopas.sourceforge.net}).
 
 @menu
 * Making Java Classes Available::
 * How to use Java from within Octave::
-* Passing parameters to the JVM::
+* Set up the JVM::
 * Java Interface Functions::
 @end menu
 
 
 @node Making Java Classes Available
 @subsection Making Java Classes Available
 
 @c - index -
@@ -2084,28 +2084,43 @@ debug_java ()
 @result{} ans = 1
 javaObject ("java.math.BigDecimal", "1") ...
   .divide (javaObject ("java.math.BigDecimal", "0"))
 @end group
 @end example
 
 
 
-@node Passing parameters to the JVM
-@subsection Passing parameters to the JVM
+@node Set up the JVM
+@subsection Set up the JVM
 @cindex memory, limitations on JVM
-
-In order to execute Java code Octave creates a Java Virtual Machine (JVM).
-Such a JVM allocates a fixed amount of initial memory and may expand this pool
-up to a fixed maximum memory limit.  The default values depend on the Java
-version (@pxref{XREFjavamem,,javamem}).  The memory pool is shared by all Java
-objects running in the JVM@.  This strict memory limit is intended mainly to
-avoid runaway applications inside web browsers or in enterprise servers which
-can consume all memory and crash the system.  When the maximum memory limit is
-hit, Java code will throw exceptions so that applications will fail or behave
+@cindex select JVM vesion
+
+In order to execute Java code Octave creates a Java Virtual Machine (JVM).  By
+default the version of the JVM is used that was detected during configuration
+on Unix-like systems or that is pointed to from the registry keys at
+@file{HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\JRE} or
+@file{HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment} on
+Windows.  The default path to the JVM can be overwritten by setting the
+environment variable @w{@env{JAVA_HOME}} to the path where the JVM is
+installed.  On Windows that might be e.g. @file{C:\Program
+Files\Java\jre-10.0.2}.  Make sure that you select a directory that contains
+the JVM with a bit-ness that matches Octave's.
+
+The JVM is only loaded once per Octave session.  Thus, to change the used
+version of the JVM, you might have to re-start Octave.  To check which version
+of the JVM is currently being used, run @code{version -java}.
+
+The JVM allocates a fixed amount of initial memory and may expand this pool up
+to a fixed maximum memory limit.  The default values depend on the Java version
+(@pxref{XREFjavamem,,javamem}).  The memory pool is shared by all Java objects
+running in the JVM@.  This strict memory limit is intended mainly to avoid
+runaway applications inside web browsers or in enterprise servers which can
+consume all memory and crash the system.  When the maximum memory limit is hit,
+Java code will throw exceptions so that applications will fail or behave
 unexpectedly.
 
 You can specify options for the creation of the JVM inside a file named
 @file{java.opts}.  This is a text file where enter you enter lines containing
 @option{-X} and @option{-D} options that are then passed to the JVM during
 initialization.
 
 The directory where the Java options file is located is specified by the
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -878,17 +878,17 @@ Mex-Files
 * Structures with Mex-Files::
 * Sparse Matrices with Mex-Files::
 * Calling Other Functions in Mex-Files::
 
 Java Interface
 
 * Making Java Classes Available::
 * How to use Java from within Octave::
-* Passing parameters to the JVM::
+* Set up the JVM::
 * Java Interface Functions::
 
 Test and Demo Functions
 
 * Test Functions::
 * Demonstration Functions::
 
 Trouble
