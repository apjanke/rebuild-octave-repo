# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284359121 -7200
#      Mon Sep 13 08:25:21 2010 +0200
# Node ID 50273985ebca2974e7cc058176f818c5da564e12
# Parent  0d7624852beb52895bcef4d310fe1f047f496b96
remove subsref optimization in cellfun (better handled by cellindexmat)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Remove subsref optimization.
+
 2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellindexmat): New DEFUN.
 
 2010-09-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-fcn-handle.cc (octave_fcn_binder::maybe_binder): Stash name tags
 	in the template.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -313,45 +313,16 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
               for (octave_idx_type count = 0; count < k ; count++)
                 result(count) = (f_args.elem(count).class_name() == class_name);
 
               retval(0) = result;
             }
           else
             error ("not enough arguments for `isclass'");
         }
-      else if (name == "subsref" && nargin == 5 && nargout == 1
-               && args(2).numel () == 1 && args(2).is_cell () 
-               && args(3).is_string ()
-               && args(3).xtolower ().string_value () == "uniformoutput"
-               && ! args(4).bool_value () && ! error_state)
-        {
-          // This optimizes the case of applying the same index expression to
-          // multiple values. We decode the subscript just once. uniformoutput must
-          // be set to false.
-
-          const Cell tmpc = args(2).cell_value ();
-          octave_value subs = tmpc(0);
-
-          std::string type;
-          std::list<octave_value_list> idx;
-          decode_subscripts ("subsref", subs, type, idx);
-
-          if (! error_state)
-            {
-              Cell result (f_args.dims ());
-              for (octave_idx_type count = 0; count < k && ! error_state; count++)
-                {
-                  octave_value tmp = f_args.elem (count);
-                  result(count) = tmp.subsref (type, idx);
-                }
-
-              retval(0) = result;
-            }
-        }
       else
         {
           if (! valid_identifier (name))
             {
 
               std::string fcn_name = unique_symbol_name ("__cellfun_fcn_");
               std::string fname = "function y = ";
               fname.append (fcn_name);
