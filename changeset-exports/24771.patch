# HG changeset patch
# User Rik <rik@octave.org>
# Date 1518799446 28800
#      Fri Feb 16 08:44:06 2018 -0800
# Node ID d277debe9c2f8dec411c02f63480521e077c1cf6
# Parent  39186eac5a05cd9752a39c353441a4103d4e19bd
doc: Update format() documentation for "free", "+", "bank" formats (bug #53169).

* pr-output.cc (Fformat): Update documentation for "free", "+", "bank" formats.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3988,49 +3988,56 @@ the @samp{short eng} format, @code{10 * 
 @item  long G
 @itemx short G
 Identical to @samp{short g} or @samp{long g} but displays an uppercase @samp{E}
 to indicate the exponent.
 
 @item  free
 @itemx none
 Print output in free format, without trying to line up columns of matrices on
-the decimal point.  This also causes complex numbers to be formatted as numeric
-pairs like this @samp{(0.60419, 0.60709)} instead of like this
+the decimal point.  This is a raw format equivalent to the C++ code
+@code{std::cout << @var{variable}}.  In general, the result is a presentation
+with 6 significant digits where unnecessary precision (such as trailing zeros
+for integers) is suppressed.  Complex numbers are formatted as numeric pairs
+like this @samp{(0.60419, 0.60709)} instead of like this
 @samp{0.60419 + 0.60709i}.
 @end table
 
 The following formats affect all numeric output (floating point and integer
 types).
 
-@table @code
-@item  "+"
-@itemx "+" @var{chars}
-@itemx plus
-@itemx plus @var{chars}
+@table @asis
+@item  @qcode{"+"}
+@itemx @qcode{"+"} @qcode{"@var{chars}"}
+@itemx @code{plus}
+@itemx @code{plus @var{chars}}
 Print a @samp{+} symbol for matrix elements greater than zero, a @samp{-}
-symbol for elements less than zero and a space for zero matrix elements.  This
-format can be very useful for examining the structure of a large sparse matrix.
+symbol for elements less than zero, and a space for zero matrix elements.  This
+format can be useful for examining the sparsity structure of a large matrix.
+For very large matrices the function @code{spy} which plots the sparsity
+pattern will be clearer.
 
 The optional argument @var{chars} specifies a list of 3 characters to use for
-printing values greater than zero, less than zero and equal to zero.  For
-example, with the @samp{"+" "+-."} format, @code{[1, 0, -1; -1, 0, 1]} is
-displayed as
+printing values greater than zero, less than zero, and equal to zero.  For
+example, with the format @qcode{"+" "+-."}, the matrix
+@code{[1, 0, -1; -1, 0, 1]} is displayed as
 
 @example
 @group
 ans =
 
 +.-
 -.+
 @end group
 @end example
 
 @item bank
-Print in a fixed format with two digits to the right of the decimal point.
+Print variable in a format appropriate for a currency (fixed format with two
+digits to the right of the decimal point).  Only the real part of a variable is
+displayed, as the imaginary part makes no sense for a currency.
 
 @item native-hex
 Print the hexadecimal representation of numbers as they are stored in memory.
 For example, on a workstation which stores 8 byte real values in IEEE format
 with the least significant byte first, the value of @code{pi} when printed in
 @code{native-hex} format is @code{400921fb54442d18}.
 
 @item hex
