# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1205953366 14400
#      Wed Mar 19 15:02:46 2008 -0400
# Branch release-3-0-x
# Node ID 7d65596343b81208bd456c73821c20cf78428122
# Parent  802f5890bf5d0e034b35314343eacc8e362508fd
Fix for mode.m NDArrays and row vectors

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2008-03-19  Ben Abbott  <bpabbott@mac.com>
+	
+	* statistics/base/mode.m: Add NDArray tests.
+
+2008-03-19  David Bateman  <dbateman@free.fr>
+
+	* statistics/base/mode.m: Fix for row vectors.
+
 2008-03-19  Jaroslav Hajek <highegg@gmail.com>
 
 	* statistics/distributions/exppdf.m,
 	statistics/distributions/expcdf.m,
 	statistics/distributions/expinv.m,
 	statistics/distributions/exprnd.m: Doc fix.
 
 2008-03-18  Michael D. Godfrey  <godfrey@isl.stanford.edu>
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -55,36 +55,36 @@ function [m, f, c] = mode (x, dim)
     endif
   endif
 
   sz2 = sz;
   sz2 (dim) = 1;
   sz3 = ones (1, nd);
   sz3 (dim) = sz (dim);
 
+  if (issparse (x))
+    t2 = sparse (sz(1), sz(2));
+  else
+    t2 = zeros (sz);
+  endif
+
   if (dim != 1)
-    perm = [1 : nd];
-    perm(1) = dim;
-    perm(dim) = 1;
+    perm = [dim, 1:dim-1, dim+1:nd];
+    t2 = permute (t2, perm);
   endif
 
   xs = sort (x, dim);
   t = cat (dim, true (sz2), diff (xs, 1, dim) != 0);
-  if (issparse (x))
-    t2 = sparse (sz(1), sz(2));
-  else
-    t2 = zeros (size (t));
-  endif
 
   if (dim != 1)
-    t2 (permute (t != 0, perm)) = diff ([find(permute (t, perm)); prod(sz)+1]);
+    t2 (permute (t != 0, perm)) = diff ([find(permute (t, perm))(:); prod(sz)+1]);
     f = max (ipermute (t2, perm), [], dim);
     xs = permute (xs, perm);
   else
-    t2 (t) = diff ([find(t); prod(sz)+1]);
+    t2 (t) = diff ([find(t)(:); prod(sz)+1]);
     f = max (t2, [], dim);
   endif
 
   c = cell (sz2);
   if (issparse (x))
     m = sparse (sz2(1), sz2(2));
   else
     m = zeros (sz2);
@@ -107,8 +107,45 @@ endfunction
 %! assert (c, {[1;2;3;4;5];[2];[2;3];[2];[1;2;3;4;5]});
 %!test
 %! a = sprandn (32, 32, 0.05);
 %! [m, f, c] = mode (a);
 %! [m2, f2, c2] = mode (full (a));
 %! assert (m, sparse (m2));
 %! assert (f, sparse (f2));
 %! assert (c, cellfun (@(x) sparse (0), c2, 'UniformOutput', false));
+
+%!assert(mode([2,3,1,2,3,4],1),[2,3,1,2,3,4])
+%!assert(mode([2,3,1,2,3,4],2),2)
+%!assert(mode([2,3,1,2,3,4]),2)
+
+%!assert(mode([2;3;1;2;3;4],1),2)
+%!assert(mode([2;3;1;2;3;4],2),[2;3;1;2;3;4])
+%!assert(mode([2;3;1;2;3;4]),2)
+
+%!shared x
+%! x(:,:,1) = toeplitz (1:3);
+%! x(:,:,2) = circshift (toeplitz (1:3), 1);
+%! x(:,:,3) = circshift (toeplitz (1:3), 2);
+%!test
+%! [m, f, c] = mode (x, 1);
+%! assert (reshape (m, [3, 3]), [1 1 1; 2 2 2; 1 1 1])
+%! assert (reshape (f, [3, 3]), [1 1 1; 2 2 2; 1 1 1])
+%! c = reshape (c, [3, 3]);
+%! assert (c{1}, [1; 2; 3])
+%! assert (c{2}, 2)
+%! assert (c{3}, [1; 2; 3])
+%!test
+%! [m, f, c] = mode (x, 2);
+%! assert (reshape (m, [3, 3]), [1 1 2; 2 1 1; 1 2 1])
+%! assert (reshape (f, [3, 3]), [1 1 2; 2 1 1; 1 2 1])
+%! c = reshape (c, [3, 3]);
+%! assert (c{1}, [1; 2; 3])
+%! assert (c{2}, 2)
+%! assert (c{3}, [1; 2; 3])
+%!test
+%! [m, f, c] = mode (x, 3);
+%! assert (reshape (m, [3, 3]), [1 2 1; 1 2 1; 1 2 1])
+%! assert (reshape (f, [3, 3]), [1 2 1; 1 2 1; 1 2 1])
+%! c = reshape (c, [3, 3]);
+%! assert (c{1}, [1; 2; 3])
+%! assert (c{2}, [1; 2; 3])
+%! assert (c{3}, [1; 2; 3])
