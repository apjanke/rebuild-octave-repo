# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444622981 25200
#      Sun Oct 11 21:09:41 2015 -0700
# Node ID 4e307c55a2b5c26d87bdbe46c17a5e10ea676e48
# Parent  d6d04088ac9edcb56abcc86434188f30ee501ef0
Use isempty () rather than any () for faster code in inverse statistical distributions.

betainv.m, binoinv.m, gaminv.m, poissinv.m: Use '! isempty (k)'  rather than
'any (k)' for faster code.

diff --git a/scripts/statistics/distributions/betainv.m b/scripts/statistics/distributions/betainv.m
--- a/scripts/statistics/distributions/betainv.m
+++ b/scripts/statistics/distributions/betainv.m
@@ -51,17 +51,17 @@ function inv = betainv (x, a, b)
 
   k = (x < 0) | (x > 1) | !(a > 0) | !(b > 0) | isnan (x);
   inv(k) = NaN;
 
   k = (x == 1) & (a > 0) & (b > 0);
   inv(k) = 1;
 
   k = find ((x > 0) & (x < 1) & (a > 0) & (b > 0));
-  if (any (k))
+  if (! isempty (k))
     if (! isscalar (a) || ! isscalar (b))
       a = a(k);
       b = b(k);
       y = a ./ (a + b);
     else
       y = a / (a + b) * ones (size (k));
     endif
     x = x(k);
diff --git a/scripts/statistics/distributions/binoinv.m b/scripts/statistics/distributions/binoinv.m
--- a/scripts/statistics/distributions/binoinv.m
+++ b/scripts/statistics/distributions/binoinv.m
@@ -50,17 +50,17 @@ function inv = binoinv (x, n, p)
   endif
 
   k = (!(x >= 0) | !(x <= 1) | !(n >= 0) | (n != fix (n)) |
        !(p >= 0) | !(p <= 1));
   inv(k) = NaN;
 
   k = find ((x >= 0) & (x <= 1) & (n >= 0) & (n == fix (n)
              & (p >= 0) & (p <= 1)));
-  if (any (k))
+  if (! isempty (k))
     x = x(k);
     if (isscalar (n) && isscalar (p))
       [inv(k), unfinished] = scalar_binoinv (x(:), n, p);
       k = k(unfinished);
       if (! isempty (k))
         inv(k) = bin_search_binoinv (x(k), n, p);
       endif
     else
diff --git a/scripts/statistics/distributions/gaminv.m b/scripts/statistics/distributions/gaminv.m
--- a/scripts/statistics/distributions/gaminv.m
+++ b/scripts/statistics/distributions/gaminv.m
@@ -53,17 +53,17 @@ function inv = gaminv (x, a, b)
   k = ((x < 0) | (x > 1) | isnan (x)
        | !(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf));
   inv(k) = NaN;
 
   k = (x == 1) & (a > 0) & (a < Inf) & (b > 0) & (b < Inf);
   inv(k) = Inf;
 
   k = find ((x > 0) & (x < 1) & (a > 0) & (a < Inf) & (b > 0) & (b < Inf));
-  if (any (k))
+  if (! isempty (k))
     if (! isscalar (a) || ! isscalar (b))
       a = a(k);
       b = b(k);
       y = a .* b;
     else
       y = a * b * ones (size (k));
     endif
     x = x(k);
diff --git a/scripts/statistics/distributions/poissinv.m b/scripts/statistics/distributions/poissinv.m
--- a/scripts/statistics/distributions/poissinv.m
+++ b/scripts/statistics/distributions/poissinv.m
@@ -56,35 +56,34 @@ function inv = poissinv (x, lambda)
 
   k = (x < 0) | (x > 1) | isnan (x) | !(lambda > 0);
   inv(k) = NaN;
 
   k = (x == 1) & (lambda > 0);
   inv(k) = Inf;
 
   k = (x > 0) & (x < 1) & (lambda > 0);
-
-  limit = 20;                           # After 'limit' iterations, use approx
-  if (! isempty (k))
+  if (any (k(:)))
+    limit = 20;                         # After 'limit' iterations, use approx
     if (isscalar (lambda))
       cdf = [(cumsum (poisspdf (0:limit-1,lambda))), 2];
       y = x(:);                         # force to column
       r = bsxfun (@le, y(k), cdf);
       [~, inv(k)] = max (r, [], 2);     # find first instance of x <= cdf
       inv(k) -= 1;
     else
       kk = find (k);
       cdf = exp (-lambda(kk));
       for i = 1:limit
         m = find (cdf < x(kk));
-        if (any (m))
+        if (isempty (m))
+          break;
+        else
           inv(kk(m)) += 1;
           cdf(m) += poisspdf (i, lambda(kk(m)));
-        else
-          break;
         endif
       endfor
     endif
 
     ## Use Mike Giles's magic when inv isn't < limit
     k &= (inv == limit);
     if (any (k(:)))
       if (isscalar (lambda))
@@ -181,16 +180,17 @@ function inv = analytic_approx (x, lambd
       if (r < 0.1 * r2)
         r = 0.1 * r2;
       endif
     endwhile
     t = log (r);
     y = lambda(k) .* r + log (sqrt (2*r.*((1-r) + r.*t)) ./ abs (r-1)) ./ t;
     inv(k) = floor (y - 0.0218 ./ (y + 0.065 * lambda(k)));
   endif
+
 endfunction
 
 
 %!shared x
 %! x = [-1 0 0.5 1 2];
 %!assert (poissinv (x, ones (1,5)), [NaN 0 1 Inf NaN])
 %!assert (poissinv (x, 1), [NaN 0 1 Inf NaN])
 %!assert (poissinv (x, [1 0 NaN 1 1]), [NaN NaN NaN Inf NaN])
