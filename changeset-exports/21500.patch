# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458392004 14400
#      Sat Mar 19 08:53:24 2016 -0400
# Node ID 7a6589e2867aca3824ac31ed532f4053550260e2
# Parent  365c3e0add9838257235593e90e6cdd6d11beb7e
more style fixes for textscan

* textscan.h, textscan.cc (textscan::scan): New arg, COUNT.  Compute
number of characters consumed here instead of in Ftextscan.  Use ovl
to return results.  Return Octave stream error message.
(Ftextscan): Use octave_istrstream for reading character strings.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <deque>
 #include <list>
 
 #include "Cell.h"
 #include "defun.h"
 #include "oct-stream.h"
+#include "oct-strstrm.h"
 #include "ov.h"
 #include "ovl.h"
 #include "textscan.h"
 #include "utils.h"
 
 // Delimited stream, optimised to read strings of characters separated
 // by single-character delimiters.
 //
@@ -1235,16 +1236,25 @@ textscan::textscan (void)
     return_on_error (2), collect_output (false),
     multiple_delims_as_one (false), default_exp (true),
     numeric_delim (false), lines (0)
 { }
 
 octave_value
 textscan::scan (std::istream& isp, const octave_value_list& args)
 {
+  octave_idx_type count = 0;
+
+  return scan (isp, args, count);
+}
+
+octave_value
+textscan::scan (std::istream& isp, const octave_value_list& args,
+                octave_idx_type& count)
+{
   std::string format;
   int params = 0;
 
   if (args.length () == 0)
     format = "%f";      // ommited format = %f.  explicit "" = width from file
   else if (args(0).is_string ())
     {
       format = args(0).string_value ();
@@ -1275,17 +1285,28 @@ textscan::scan (std::istream& isp, const
     }
 
   octave_value_list tmp_args = args.splice (0, params);
 
   textscan_format_list fmt_list (format);
 
   parse_options (tmp_args, fmt_list);
 
-  return do_scan (isp, fmt_list, ntimes);
+  octave_value result = do_scan (isp, fmt_list, ntimes);
+
+  // FIXME: this is probably not the best way to get count.  The
+  // position could easily be larger than octave_idx_type when using
+  // 32-bit indexing.
+
+  std::ios::iostate state = isp.rdstate ();
+  isp.clear ();
+  count = static_cast<octave_idx_type> (isp.tellg ());
+  isp.setstate (state);
+
+  return result;
 }
 
 octave_value
 textscan::do_scan (std::istream& isp, textscan_format_list& fmt_list,
                    octave_idx_type ntimes)
 {
   octave_value retval;
 
@@ -2737,17 +2758,17 @@ textscan::match_literal (delimited_strea
 
 DEFUN (textscan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{C} =} textscan (@var{fid}, @var{format})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{repeat})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{param}, @var{value}, @dots{})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{repeat}, @var{param}, @var{value}, @dots{})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{str}, @dots{})\n\
-@deftypefnx {} {[@var{C}, @var{position}] =} textscan (@dots{})\n\
+@deftypefnx {} {[@var{C}, @var{position}, @var{errmsg}] =} textscan (@dots{})\n\
 Read data from a text file or string.\n\
 \n\
 The string @var{str} or file associated with @var{fid} is read from and\n\
 parsed according to @var{format}.\n\
 The function is an extension of @code{strread} and @code{textread}.\n\
 Differences include: the ability to read from either a file or a string,\n\
 additional options, and additional format specifiers.\n\
 \n\
@@ -3017,50 +3038,60 @@ Data columns are not padded; textscan re
 \n\
 \n\
 The second output, @var{position}, provides the position, in characters\n\
 from the beginning of the file or string, at which the processing stopped.\n\
 \n\
 @seealso{dlmread, fscanf, load, strread, textread}\n\
 @end deftypefn")
 {
+  static std::string who = "textscan";
+
   octave_value_list retval;
 
   if (args.length () < 1)
     print_usage ();
 
   octave_value_list tmp_args = args.splice (0, 1);
 
+  octave_idx_type count = 0;
+
   textscan tscanner;
 
   if (args(0).is_string ())
     {
-      std::istringstream is (args(0).string_value ());
-
-      retval(0) = tscanner.scan (is, tmp_args);
-
-      std::ios::iostate state = is.rdstate ();
-      is.clear ();
-      retval(1) = octave_value (static_cast<long> (is.tellg ()));
-      is.setstate (state);
+      std::string data = args(0).string_value ();
+
+      octave_stream os = octave_istrstream::create (data);
+
+      if (! os.is_valid ())
+        error ("%s: unable to create temporary input buffer", who.c_str ());
+
+      std::istream *isp = os.input_stream ();
+
+      octave_value result = tscanner.scan (*isp, tmp_args, count);
+
+      std::string errmsg = os.error ();
+
+      return ovl (result, count, errmsg);
     }
   else
     {
-      octave_stream os = octave_stream_list::lookup (args(0), "textscan");
+      octave_stream os = octave_stream_list::lookup (args(0), who);
+
       std::istream *isp = os.input_stream ();
+
       if (! isp)
         error ("internal error: textscan called with invalid istream");
 
-      retval(0) = tscanner.scan (*isp, tmp_args);
-
-      // FIXME -- warn if stream is not opened in binary mode?
-      std::ios::iostate state = os.input_stream ()->rdstate ();
-      os.input_stream ()->clear ();
-      retval(1) = os.tell ();
-      os.input_stream ()->setstate (state);
+      octave_value result = tscanner.scan (*isp, tmp_args, count);
+
+      std::string errmsg = os.error ();
+
+      return ovl (result, count, errmsg);
     }
 
   return retval;
 }
 
 /*
 %!test
 %! str = "1,  2,  3,  4\n 5,  ,  ,  8\n 9, 10, 11, 12";
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -58,16 +58,19 @@ textscan
 public:
 
   textscan (void);
 
   ~textscan (void) { }
 
   octave_value scan (std::istream& isp, const octave_value_list& args);
 
+  octave_value scan (std::istream& isp, const octave_value_list& args,
+                     octave_idx_type& count);
+
 private:
 
   friend class textscan_format_list;
 
   std::string buf;
 
   // Three cases for delim_table and delim_list
   // 1. delim_table empty, delim_list empty:  whitespace delimiters
