# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1204745073 18000
#      Wed Mar 05 14:24:33 2008 -0500
# Node ID 0ef0f9802a378ed06c64b73ed4490b9742c7fc4e
# Parent  07522d7dcdf865c06edbdc5b4e9c2f732c86820a
modify QR updating methods to use 0-based indexing

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2008-03-05  Jaroslav Hajek <highegg@gmail.com>
 
+	* dbleQR.cc (QR::insert_col, QR::insert_row, 
+	QR::delete_col, QR::delete_row): Use 0-based indexing.
+	* CmplxQR.cc (ComplexQR::insert_col, ComplexQR::insert_row, 
+	ComplexQR::delete_col, ComplexQR::delete_row): Likewise.
+
 	* dbleCHOL.cc: Small doc and declaration fixes.
 	* CmplxHOL.cc: Small doc and declaration fixes.
 	* CmplxQR.cc (ComplexQR::ComplexQR): Adjust code to match dbleQR.cc.
 	* dbleQR.cc (QR::delete_row): Fix incorrect test.
 	* CmplxQR.cc (ComplexQR::delete_row): Fix incorrect test.
 
 2008-03-04  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -185,91 +185,91 @@ void
 ComplexQR::insert_col (const ComplexMatrix& u, octave_idx_type j)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.length () != m)
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > n+1) 
+  else if (j < 0 || j > n) 
     (*current_liboctave_error_handler) ("QR insert index out of range");
   else
     {
       ComplexMatrix r1 (m,n+1);
 
       F77_XFCN (zqrinc, ZQRINC, (m, n, k, q.fortran_vec (), r.data (),
-				 r1.fortran_vec (), j, u.data ()));
+				 r1.fortran_vec (), j+1, u.data ()));
 
       r = r1;
     }
 }
 
 void
 ComplexQR::delete_col (octave_idx_type j)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type k = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (k < m && k < n) 
     (*current_liboctave_error_handler) ("QR delete dimensions mismatch");
-  else if (j < 1 || j > n) 
+  else if (j < 0 || j > n-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       ComplexMatrix r1 (k, n-1);
 
       F77_XFCN (zqrdec, ZQRDEC, (m, n, k, q.fortran_vec (), r.data (),
-				 r1.fortran_vec (), j));
+				 r1.fortran_vec (), j+1));
 
       r = r1;
     }
 }
 
 void
 ComplexQR::insert_row (const ComplexMatrix& u, octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square () || u.length () != n)
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > m+1) 
+  else if (j < 0 || j > m) 
     (*current_liboctave_error_handler) ("QR insert index out of range");
   else
     {
       ComplexMatrix q1 (m+1, m+1);
       ComplexMatrix r1 (m+1, n);
 
       F77_XFCN (zqrinr, ZQRINR, (m, n, q.data (), q1.fortran_vec (), 
-				 r.data (), r1.fortran_vec (), j, u.data ()));
+				 r.data (), r1.fortran_vec (), j+1, u.data ()));
 
       q = q1;
       r = r1;
     }
 }
 
 void
 ComplexQR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > m) 
+  else if (j < 0 || j > m-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       ComplexMatrix q1 (m-1, m-1);
       ComplexMatrix r1 (m-1, n);
 
       F77_XFCN (zqrder, ZQRDER, (m, n, q.data (), q1.fortran_vec (), 
-				 r.data (), r1.fortran_vec (), j ));
+				 r.data (), r1.fortran_vec (), j+1 ));
 
       q = q1;
       r = r1;
     }
 }
 
 void
 ComplexQR::economize (void)
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -174,91 +174,91 @@ void
 QR::insert_col (const Matrix& u, octave_idx_type j)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.length () != m)
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > n+1) 
+  else if (j < 0 || j > n) 
     (*current_liboctave_error_handler) ("QR insert index out of range");
   else
     {
       Matrix r1 (m, n+1);
 
       F77_XFCN (dqrinc, DQRINC, (m, n, k, q.fortran_vec (), r.data (),
-				 r1.fortran_vec (), j, u.data ()));
+				 r1.fortran_vec (), j+1, u.data ()));
 
       r = r1;
     }
 }
 
 void
 QR::delete_col (octave_idx_type j)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type k = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (k < m && k < n) 
     (*current_liboctave_error_handler) ("QR delete dimensions mismatch");
-  else if (j < 1 || j > n) 
+  else if (j < 0 || j > n-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       Matrix r1 (k, n-1);
 
       F77_XFCN (dqrdec, DQRDEC, (m, n, k, q.fortran_vec (), r.data (),
-				 r1.fortran_vec (), j));
+				 r1.fortran_vec (), j+1));
 
       r = r1;
     }
 }
 
 void
 QR::insert_row (const Matrix& u, octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square () || u.length () != n)
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > m+1) 
+  else if (j < 0 || j > m) 
     (*current_liboctave_error_handler) ("QR insert index out of range");
   else
     {
       Matrix q1 (m+1, m+1);
       Matrix r1 (m+1, n);
 
       F77_XFCN (dqrinr, DQRINR, (m, n, q.data (), q1.fortran_vec (), 
-				 r.data (), r1.fortran_vec (), j, u.data ()));
+				 r.data (), r1.fortran_vec (), j+1, u.data ()));
 
       q = q1;
       r = r1;
     }
 }
 
 void
 QR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > m) 
+  else if (j < 0 || j > m-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       Matrix q1 (m-1, m-1);
       Matrix r1 (m-1, n);
 
       F77_XFCN (dqrder, DQRDER, (m, n, q.data (), q1.fortran_vec (), 
-				 r.data (), r1.fortran_vec (), j ));
+				 r.data (), r1.fortran_vec (), j+1 ));
 
       q = q1;
       r = r1;
     }
 }
 
 void
 QR::economize (void)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -2,16 +2,19 @@ 2008-03-05  Jaroslav Hajek <highegg@gmai
 
 	* DLD-FUNCTIONS/chol.cc (Fcholupdate): Adjust code to meet 
 	Octave's coding guidelines.
 
 	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete): Adjust 
 	code to meet Octave's coding guidelines.
 	* DLD-FUNCTIONS/qr.cc (Fqrdelete): Fix incorrect test. 
 
+	* DLD-FUNCTIONS/qr.cc (Fqrinsert, Fqrdelete): Modify to use
+	0-based indexing in liboctave's QR classes.
+
 2008-03-04  Jaroslav Hajek <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/chol.cc (Fcholupdate): New function.
 
 	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete):
 	New functions.
 
 2008-03-04  Ryan Rusaw  <rrusaw@gmail.com>
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -623,36 +623,36 @@ If @var{orient} is @code{\"row\"}, @var{
                     // real case
                     Matrix Q = argq.matrix_value ();
                     Matrix R = argr.matrix_value ();
                     Matrix x = argx.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (row) 
-                      fact.insert_row (x, j);
+                      fact.insert_row (x, j-1);
                     else 
-                      fact.insert_col (x, j);
+                      fact.insert_col (x, j-1);
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
                 else
                   {
                     // complex case
                     ComplexMatrix Q = argq.complex_matrix_value ();
                     ComplexMatrix R = argr.complex_matrix_value ();
                     ComplexMatrix x = argx.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (row) 
-                      fact.insert_row (x, j);
+                      fact.insert_row (x, j-1);
                     else 
-                      fact.insert_col (x, j);
+                      fact.insert_col (x, j-1);
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
 
               }
             else
               error ("qrinsert: index j out of range");
@@ -804,20 +804,20 @@ If @var{orient} is \"row\", @var{Q} must
                   {
                     // real case
                     Matrix Q = argq.matrix_value ();
                     Matrix R = argr.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (row) 
-                      fact.delete_row (j);
+                      fact.delete_row (j-1);
                     else 
                       {
-                        fact.delete_col (j);
+                        fact.delete_col (j-1);
 
                         if (! colp && k < m)
                           fact.economize ();
                       }
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
@@ -825,20 +825,20 @@ If @var{orient} is \"row\", @var{Q} must
                   {
                     // complex case
                     ComplexMatrix Q = argq.complex_matrix_value ();
                     ComplexMatrix R = argr.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (row) 
-                      fact.delete_row (j);
+                      fact.delete_row (j-1);
                     else 
                       {
-                        fact.delete_col (j);
+                        fact.delete_col (j-1);
 
                         if (! colp && k < m)
                           fact.economize ();
                       }
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
