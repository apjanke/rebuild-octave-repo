# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263403177 -3600
#      Wed Jan 13 18:19:37 2010 +0100
# Node ID eb8ac0eed9f1c442e4a95e29d10f53f2603000c7
# Parent  ab1101011a6da947247697d4eb31d9ff800b81d0
always chop dimension vector when constructing Arrays

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -59,16 +59,17 @@ Array<T>::Array (const Array<T>& a, cons
       (*current_liboctave_error_handler)
         ("reshape: can't reshape %s array to %s array",
          dimensions_str.c_str (), new_dims_str.c_str ());
     }
 
   // This goes here because if an exception is thrown by the above,
   // destructor will be never called.
   rep->count++;
+  dimensions.chop_trailing_singletons ();
 }
 
 template <class T>
 void
 Array<T>::fill (const T& val)
 {
   if (rep->count > 1)
     {
@@ -102,16 +103,17 @@ Array<T>::clear (const dim_vector& dv)
   if (--rep->count <= 0)
     delete rep;
 
   rep = new ArrayRep (dv.safe_numel ());
   slice_data = rep->data;
   slice_len = rep->len;
 
   dimensions = dv;
+  dimensions.chop_trailing_singletons ();
 }
 
 template <class T>
 Array<T>
 Array<T>::squeeze (void) const
 {
   Array<T> retval = *this;
 
@@ -488,18 +490,16 @@ Array<T>::permute (const Array<octave_id
   retval = Array<T> (dv_new);
 
   if (numel () > 0)
     {
       rec_permute_helper rh (dv, perm_vec);
       rh.permute (data (), retval.fortran_vec ());
     }
 
-  retval.chop_trailing_singletons ();
-
   return retval;
 }
 
 // Helper class for multi-d index reduction and recursive indexing/indexed assignment.
 // Rationale: we could avoid recursion using a state machine instead. However, using
 // recursion is much more amenable to possible parallelization in the future.
 // Also, the recursion solution is cleaner and more understandable.
 class rec_index_helper
@@ -829,16 +829,17 @@ Array<T>::index (const Array<idx_vector>
 
       if (mismatch)
         {
           gripe_index_out_of_range ();
         }
       else if (all_colons)
         {
           // A(:,:,...,:) produces a shallow copy.
+          dv.chop_trailing_singletons ();
           retval = Array<T> (*this, dv);
         }
       else 
         {
           // Form result dimensions.
           dim_vector rdv = dim_vector::alloc (ial);
           for (int i = 0; i < ial; i++) rdv(i) = ia(i).length (dv(i));
           rdv.chop_trailing_singletons ();
@@ -1324,18 +1325,17 @@ Array<T>::assign (const Array<idx_vector
                   if (isfill)
                     *this = Array<T> (rdv, rhs(0));
                   else
                     *this = Array<T> (rhs, rdv);
                   return;
                 }
 
               resize_fill (rdv, rfv);
-              dv = dimensions;
-              chop_trailing_singletons ();
+              dv = rdv;
             }
 
           if (all_colons)
             {
               // A(:,:,...,:) = X makes a full fill or a shallow copy.
               if (isfill)
                 fill (rhs(0));
               else
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -140,26 +140,28 @@ protected:
     }
 
   Array (T *d, const dim_vector& dv)
     : rep (new typename Array<T>::ArrayRep (d, dv.numel ())),
       dimensions (dv) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
+      dimensions.chop_trailing_singletons ();
     }
 
   // slice constructor
   Array (const Array<T>& a, const dim_vector& dv,
          octave_idx_type l, octave_idx_type u)
     : rep(a.rep), dimensions (dv)
     {
       rep->count++;
       slice_data = a.slice_data + l;
       slice_len = u - l;
+      dimensions.chop_trailing_singletons ();
     }
 
 private:
 
   typename Array<T>::ArrayRep *nil_rep (void) const
     {
       static typename Array<T>::ArrayRep *nr
 	= new typename Array<T>::ArrayRep ();
@@ -226,25 +228,27 @@ public:
 public:
 
   Array (const dim_vector& dv)
     : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
       dimensions (dv) 
     { 
       slice_data = rep->data;
       slice_len = rep->len;
+      dimensions.chop_trailing_singletons ();
     }
 
   Array (const dim_vector& dv, const T& val)
     : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
       dimensions (dv)
     {
       slice_data = rep->data;
       slice_len = rep->len;
       fill (val);
+      dimensions.chop_trailing_singletons ();
     }
 
   // Reshape constructor.
   Array (const Array<T>& a, const dim_vector& dv);
 
   ~Array (void)
     {
       if (--rep->count <= 0)
@@ -295,17 +299,17 @@ public:
 
   size_t byte_size (void) const { return numel () * sizeof (T); }
 
   // Return a const-reference so that dims ()(i) works efficiently.
   const dim_vector& dims (void) const { return dimensions; }
 
   Array<T> squeeze (void) const;
   
-  void chop_trailing_singletons (void) 
+  void chop_trailing_singletons (void) GCC_ATTR_DEPRECATED
   { dimensions.chop_trailing_singletons (); }
   
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
   T& range_error (const char *fcn, octave_idx_type n) const;
   T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
   T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
   T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,24 @@
+2010-01-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::chop_trailing_singletons): Only uniquify
+	if really needed.
+	* Array.h (Array<T>::Array (T*, const dim_vector&)): Call
+	chop_trailing_singletons.
+	(Array<T>::Array (const Array<T>&, const dim_vector&,
+	octave_idx_type...)): Ditto.
+	(Array<T>::Array (const dim_vector&)): Ditto.
+	(Array<T>::Array (const dim_vector&, const T&)): Ditto.
+	(Array<T>::chop_trailing_singletons): Deprecate.
+	* Array.cc (Array::Array(const Array&, const dim_vector&)): Ditto.
+	(Array::index (const Array<idx_vector>&, ...)): Ditto.
+	(Array<T>::permute): Don't call deprecate method here.
+	(Array<T>::assign): Neither here.
+
 2010-01-11  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Remove unnecessary use of simple_move_if_change_rule to allow
 	Make to update timestamps
 
 2010-01-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::crefT): New helper typedef.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -145,26 +145,25 @@ public:
   octave_idx_type elem (int i) const
     {
       assert (i >= 0 && i < ndims());
       return rep[i];
     }
 
   void chop_trailing_singletons (void)
     {
-      make_unique ();
       int l = ndims();
-      for (int i = l - 1; i > 1; i--)
+      if (l > 2 && rep[l-1] == 1)
         {
-          if (rep[i] == 1)
+          make_unique ();
+          do
             l--;
-          else
-            break;
+          while (l > 2 && rep[l-1] == 1);
+          ndims() = l;
         }
-      ndims() = l;
     }
 
   void chop_all_singletons (void)
     {
       make_unique ();
       int j = 0;
       int l = ndims();
 
