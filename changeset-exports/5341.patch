# HG changeset patch
# User jwe
# Date 1115399507 0
#      Fri May 06 17:11:47 2005 +0000
# Node ID 4bea82210dcd25db96a112c295f660ab26204023
# Parent  15843d76156d639bf710cf00a4da5864f61fb91a
[project @ 2005-05-06 17:11:47 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2005-05-06  John W. Eaton  <jwe@octave.org>
 
+	* ov-struct.cc (octave_struct::save_ascii,
+	octave_struct::save_binary, octave_sruct::save_hdf5):
+	Always save cell array.
+
+	* DLD-FUNCTIONS/__qp__.cc (qp): Use chol2inv to compute inverse
+	from Cholesky factors.
+	(cholinv): Delete.
+
 	* DLD-FUNCTIONS/chol.cc (Fcholinv): New function.
 	(Fchol2inv): New function.
 
 2005-05-05  Keith Goodman  <kwgoodman@gmail.com>
 
 	* ov-usr-fcn.cc	(Fnargout, Fnargin): Update doc strings.
 	* help.cc (keywords): Update doc strings for varargin, varargout.
 
diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -81,36 +81,16 @@ null (const Matrix& A, octave_idx_type& 
 	retval = V.extract (0, rank, A_nc-1, A_nc-1);
       else
 	retval.resize (A_nc, 0);
     }
 
   return retval;
 }
 
-static Matrix
-cholinv (const Matrix& R)
-{
-  // R should be the result of calling chol on a symmetric positive
-  // definite matrix.
-  octave_idx_type n = R.rows ();
-  Matrix L = R.transpose ();
-  ColumnVector d = L.diag ();
-  ColumnVector tmp (n);
-  for (octave_idx_type k = 0; k < n; k++)
-    {
-      for (octave_idx_type j = 0; j < n; j++)
-	L(j,k) = L(j,k) / d(k);
-      tmp(k) = 1.0/(d(k)*d(k));
-    }
-  DiagMatrix Dinv (tmp);
-  Matrix invL = L.inverse ();
-  return invL.transpose () * Dinv * invL;
-}
-
 static int
 qp (const Matrix& H, const ColumnVector& q,
     const Matrix& Aeq, const ColumnVector& beq,
     const Matrix& Ain, const ColumnVector& bin,
     int maxit,
     ColumnVector& x, ColumnVector& lambda, int& iter)
 {
   int info = 0;
@@ -203,17 +183,17 @@ qp (const Matrix& H, const ColumnVector&
 	      // Inverting the Hessian.  Using the Cholesky
 	      // factorization since the Hessian is positive
 	      // definite.
 
 	      CHOL cholH (H);
 
 	      R = cholH.chol_matrix ();
 
-	      Matrix Hinv = cholinv (R);
+	      Matrix Hinv = chol2inv (R);
 
 	      // Computing the unconstrained step.
 	      // p = -Hinv * g;
 
 	      p = -Hinv * g;
 
 	      info = 0;
 	    }
@@ -273,17 +253,17 @@ qp (const Matrix& H, const ColumnVector&
 	    {
 	      info = 0;
 
 	      // Computing the step pz. 
 	      if (dimZ > 0)
 		{
 		  // Using the Cholesky factorization to invert rH
 
-		  Matrix rHinv = cholinv (R);
+		  Matrix rHinv = chol2inv (R);
 
 		  ColumnVector pz = -rHinv * Zt * g;
 
 		  // Global step.
 		  p = Z * pz;
 		}
 	      else
 		{
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -982,20 +982,19 @@ octave_struct::save_ascii (std::ostream&
 			   bool strip_nan_and_inf)
 {
   Octave_map m = map_value ();
   os << "# length: " << m.length () << "\n";
 
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
-      Cell val = map.contents (i);
-      octave_value tmp = (map.numel () == 1) ? val(0) : octave_value (val);
+      octave_value val = map.contents (i);
 
-      bool b = save_ascii_data (os, tmp, m.key (i), infnan_warned, 
+      bool b = save_ascii_data (os, val, m.key (i), infnan_warned, 
 				strip_nan_and_inf, 0, 0);
       
       if (! b)
 	return os;
 
       i++;
     }
 
@@ -1064,20 +1063,19 @@ octave_struct::save_binary (std::ostream
   Octave_map m = map_value ();
 
   FOUR_BYTE_INT len = m.length();
   os.write (X_CAST (char *, &len), 4);
   
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
-      Cell val = map.contents (i);
-      octave_value tmp = (map.numel () == 1) ? val(0) : octave_value (val);
+      octave_value val = map.contents (i);
 
-      bool b = save_binary_data (os, tmp, m.key (i), "", 0, save_as_floats);
+      bool b = save_binary_data (os, val, m.key (i), "", 0, save_as_floats);
       
       if (! b)
 	return os;
 
       i++;
     }
 
   return true;
@@ -1148,20 +1146,19 @@ octave_struct::save_hdf5 (hid_t loc_id, 
   data_hid = H5Gcreate (loc_id, name, 0);
   if (data_hid < 0) return false;
 
   // recursively add each element of the structure to this group
   Octave_map m = map_value ();
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
-      Cell val = map.contents (i);
-      octave_value tmp = (map.numel () == 1) ? val(0) : octave_value (val);
+      octave_value val = map.contents (i);
 
-      bool retval2 = add_hdf5_data (data_hid, tmp, m.key (i), "", false, 
+      bool retval2 = add_hdf5_data (data_hid, val, m.key (i), "", false, 
 				    save_as_floats);
 
       if (! retval2)
 	break;
 
       i++;
     }
 
