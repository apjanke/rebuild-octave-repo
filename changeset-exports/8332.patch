# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1227020518 18000
#      Tue Nov 18 10:01:58 2008 -0500
# Node ID 34fde4755a0f5d015aa185790064a726b106eb86
# Parent  7418596586c32f39ab7aa7ee8db5bdc5cccb010e
style fixes

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2008-11-18  John W. Eaton  <jwe@octave.org>
+
+	* mkoctfile.cc.in, octave-bug.cc.in: Style fixes.
+
 2008-10-30  David Bateman  <dbateman@free.fr>
 
 	* NEWS: Minor update to document improved indexing code.
 
 2008-10-23  Jason Riedy  <jason@acm.org>
 
 	* configure.in: Take care to use FT2_CFLAGS when checking
 	for FTGL headers.
diff --git a/mkoctfile.cc.in b/mkoctfile.cc.in
--- a/mkoctfile.cc.in
+++ b/mkoctfile.cc.in
@@ -22,18 +22,18 @@
 using namespace std;
 
 static bool initialized = false;
 static map<string,string> vars;
 
 static string OCTAVE_VERSION = %OCTAVE_CONF_VERSION%;
 
 static std::string
-substitute_prefix(const std::string& s, const std::string& prefix,
-		  const std::string& new_prefix)
+substitute_prefix (const std::string& s, const std::string& prefix,
+		   const std::string& new_prefix)
 {
   std::string retval = s;
 
   if (!prefix.empty () && new_prefix != prefix)
     {
       int len = prefix.length ();
       if (retval.find (prefix) == 0)
 	retval.replace (0, len, new_prefix);
@@ -75,25 +75,26 @@ get_variable (const char *name, const st
   const char *val = getenv (name);
   if (val == NULL || val[0] == '\0')
     return defval;
   else
     return string (val);
 }
 
 static string
-quote_path(const string& s)
+quote_path (const string& s)
 {
   if (s.find (' ') != string::npos && s[0] != '"')
     return "\"" + s + "\"";
-  return s;
+  else
+    return s;
 }
 
 static void
-initialize(void)
+initialize (void)
 {
   if (initialized)
     return;
 
   initialized = true;
 
   vars["OCTAVE_HOME"] = get_variable ("OCTAVE_HOME", "");
 
@@ -122,99 +123,99 @@ initialize(void)
     {
       size_t pos = bin_dir.rfind ("\\bin\\");
 
       if (pos != string::npos)
 	vars["OCTAVE_HOME"] = bin_dir.substr (0, pos);
     }
 #endif
 
-  vars["SED"] = get_variable("SED", %OCTAVE_CONF_SED%);
+  vars["SED"] = get_variable ("SED", %OCTAVE_CONF_SED%);
 
   vars["OCTAVE_PREFIX"] = %OCTAVE_CONF_PREFIX%;
 
   std::string DEFAULT_OCTINCLUDEDIR = %OCTAVE_CONF_OCTINCLUDEDIR%;
   std::string DEFAULT_INCLUDEDIR = %OCTAVE_CONF_INCLUDEDIR%;
   std::string DEFAULT_LIBDIR = %OCTAVE_CONF_LIBDIR%;
   std::string DEFAULT_OCTLIBDIR = %OCTAVE_CONF_OCTLIBDIR%;
 
-  if (! vars["OCTAVE_HOME"].empty())
+  if (! vars["OCTAVE_HOME"].empty ())
     {
       DEFAULT_OCTINCLUDEDIR
-	= substitute_prefix(DEFAULT_OCTINCLUDEDIR, vars["OCTAVE_PREFIX"],
-			    vars["OCTAVE_HOME"]);
+	= substitute_prefix (DEFAULT_OCTINCLUDEDIR, vars["OCTAVE_PREFIX"],
+			     vars["OCTAVE_HOME"]);
 
       DEFAULT_INCLUDEDIR
-	= substitute_prefix(DEFAULT_INCLUDEDIR, vars["OCTAVE_PREFIX"],
-			    vars["OCTAVE_HOME"]);
+	= substitute_prefix (DEFAULT_INCLUDEDIR, vars["OCTAVE_PREFIX"],
+			     vars["OCTAVE_HOME"]);
 
       DEFAULT_LIBDIR
-	= substitute_prefix(DEFAULT_LIBDIR, vars["OCTAVE_PREFIX"],
-			    vars["OCTAVE_HOME"]);
+	= substitute_prefix (DEFAULT_LIBDIR, vars["OCTAVE_PREFIX"],
+			     vars["OCTAVE_HOME"]);
 
       DEFAULT_OCTLIBDIR
-	= substitute_prefix(DEFAULT_OCTLIBDIR, vars["OCTAVE_PREFIX"],
-			    vars["OCTAVE_HOME"]);
+	= substitute_prefix (DEFAULT_OCTLIBDIR, vars["OCTAVE_PREFIX"],
+			     vars["OCTAVE_HOME"]);
     }
 
-  vars["OCTINCLUDEDIR"] = get_variable("OCTINCLUDEDIR", DEFAULT_OCTINCLUDEDIR);
-  vars["INCLUDEDIR"] = get_variable("INCLUDEDIR", DEFAULT_INCLUDEDIR);
-  vars["LIBDIR"] = get_variable("LIBDIR", DEFAULT_LIBDIR);
-  vars["OCTLIBDIR"] = get_variable("OCTLIBDIR", DEFAULT_OCTLIBDIR);
+  vars["OCTINCLUDEDIR"] = get_variable ("OCTINCLUDEDIR", DEFAULT_OCTINCLUDEDIR);
+  vars["INCLUDEDIR"] = get_variable ("INCLUDEDIR", DEFAULT_INCLUDEDIR);
+  vars["LIBDIR"] = get_variable ("LIBDIR", DEFAULT_LIBDIR);
+  vars["OCTLIBDIR"] = get_variable ("OCTLIBDIR", DEFAULT_OCTLIBDIR);
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
-  std::string DEFAULT_INCFLAGS = "-I" + quote_path(vars["OCTINCLUDEDIR"])
-    + " -I" + quote_path(vars["OCTINCLUDEDIR"] + "\\octave");
+  std::string DEFAULT_INCFLAGS = "-I" + quote_path (vars["OCTINCLUDEDIR"])
+    + " -I" + quote_path (vars["OCTINCLUDEDIR"] + "\\octave");
 #else
-  std::string DEFAULT_INCFLAGS = "-I" + quote_path(vars["OCTINCLUDEDIR"])
- + " -I" + quote_path(vars["OCTINCLUDEDIR"] + "/octave");
+  std::string DEFAULT_INCFLAGS = "-I" + quote_path (vars["OCTINCLUDEDIR"])
+ + " -I" + quote_path (vars["OCTINCLUDEDIR"] + "/octave");
 #endif
   if (vars["INCLUDEDIR"] != "/usr/include")
-    DEFAULT_INCFLAGS += " -I" + quote_path(vars["INCLUDEDIR"]);
+    DEFAULT_INCFLAGS += " -I" + quote_path (vars["INCLUDEDIR"]);
 
-  std::string DEFAULT_LFLAGS = "-L" + quote_path(vars["OCTLIBDIR"]);
+  std::string DEFAULT_LFLAGS = "-L" + quote_path (vars["OCTLIBDIR"]);
   if (vars["LIBDIR"] != "/usr/lib")
-    DEFAULT_LFLAGS += " -L" + quote_path(vars["LIBDIR"]);
+    DEFAULT_LFLAGS += " -L" + quote_path (vars["LIBDIR"]);
 
-  vars["CPPFLAGS"] = get_variable("CPPFLAGS", %OCTAVE_CONF_CPPFLAGS%);
-  vars["INCFLAGS"] = get_variable("INCFLAGS", DEFAULT_INCFLAGS);
-  vars["F2C"] = get_variable("F2C", %OCTAVE_CONF_F2C%);
-  vars["F2CFLAGS"] = get_variable("F2CFLAGS", %OCTAVE_CONF_F2CFLAGS%);
-  vars["F77"] = get_variable("F77", %OCTAVE_CONF_F77%);
-  vars["FFLAGS"] = get_variable("FFLAGS", %OCTAVE_CONF_FFLAGS%);
-  vars["FPICFLAG"] = get_variable("FPICFLAG", %OCTAVE_CONF_FPICFLAG%);
-  vars["CC"] = get_variable("CC", %OCTAVE_CONF_CC%);
-  vars["CFLAGS"] = get_variable("CFLAGS", %OCTAVE_CONF_CFLAGS%);
-  vars["CPICFLAG"] = get_variable("CPICFLAG", %OCTAVE_CONF_CPICFLAG%);
-  vars["CXX"] = get_variable("CXX", %OCTAVE_CONF_CXX%);
-  vars["CXXFLAGS"] = get_variable("CXXFLAGS", %OCTAVE_CONF_CXXFLAGS%);
-  vars["CXXPICFLAG"] = get_variable("CXXPICFLAG", %OCTAVE_CONF_CXXPICFLAG%);
-  vars["XTRA_CFLAGS"] = get_variable("XTRA_CFLAGS", %OCTAVE_CONF_XTRA_CFLAGS%);
-  vars["XTRA_CXXFLAGS"] = get_variable("XTRA_CXXFLAGS", %OCTAVE_CONF_XTRA_CXXFLAGS%);
+  vars["CPPFLAGS"] = get_variable ("CPPFLAGS", %OCTAVE_CONF_CPPFLAGS%);
+  vars["INCFLAGS"] = get_variable ("INCFLAGS", DEFAULT_INCFLAGS);
+  vars["F2C"] = get_variable ("F2C", %OCTAVE_CONF_F2C%);
+  vars["F2CFLAGS"] = get_variable ("F2CFLAGS", %OCTAVE_CONF_F2CFLAGS%);
+  vars["F77"] = get_variable ("F77", %OCTAVE_CONF_F77%);
+  vars["FFLAGS"] = get_variable ("FFLAGS", %OCTAVE_CONF_FFLAGS%);
+  vars["FPICFLAG"] = get_variable ("FPICFLAG", %OCTAVE_CONF_FPICFLAG%);
+  vars["CC"] = get_variable ("CC", %OCTAVE_CONF_CC%);
+  vars["CFLAGS"] = get_variable ("CFLAGS", %OCTAVE_CONF_CFLAGS%);
+  vars["CPICFLAG"] = get_variable ("CPICFLAG", %OCTAVE_CONF_CPICFLAG%);
+  vars["CXX"] = get_variable ("CXX", %OCTAVE_CONF_CXX%);
+  vars["CXXFLAGS"] = get_variable ("CXXFLAGS", %OCTAVE_CONF_CXXFLAGS%);
+  vars["CXXPICFLAG"] = get_variable ("CXXPICFLAG", %OCTAVE_CONF_CXXPICFLAG%);
+  vars["XTRA_CFLAGS"] = get_variable ("XTRA_CFLAGS", %OCTAVE_CONF_XTRA_CFLAGS%);
+  vars["XTRA_CXXFLAGS"] = get_variable ("XTRA_CXXFLAGS", %OCTAVE_CONF_XTRA_CXXFLAGS%);
 
-  vars["DEPEND_FLAGS"] = get_variable("DEPEND_FLAGS", %OCTAVE_CONF_DEPEND_FLAGS%);
-  vars["DEPEND_EXTRA_SED_PATTERN"] = get_variable("DEPEND_EXTRA_SED_PATTERN", %OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%);
+  vars["DEPEND_FLAGS"] = get_variable ("DEPEND_FLAGS", %OCTAVE_CONF_DEPEND_FLAGS%);
+  vars["DEPEND_EXTRA_SED_PATTERN"] = get_variable ("DEPEND_EXTRA_SED_PATTERN", %OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%);
 
-  vars["DL_LD"] = get_variable("DL_LD", %OCTAVE_CONF_DL_LD%);
-  vars["DL_LDFLAGS"] = get_variable("DL_LDFLAGS", %OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%);
+  vars["DL_LD"] = get_variable ("DL_LD", %OCTAVE_CONF_DL_LD%);
+  vars["DL_LDFLAGS"] = get_variable ("DL_LDFLAGS", %OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%);
 
-  vars["RLD_FLAG"] = get_variable("RLD_FLAG", %OCTAVE_CONF_RLD_FLAG%);
-  vars["RDYNAMIC_FLAG"] = get_variable("RDYNAMIC_FLAG", %OCTAVE_CONF_RDYNAMIC_FLAG%);
+  vars["RLD_FLAG"] = get_variable ("RLD_FLAG", %OCTAVE_CONF_RLD_FLAG%);
+  vars["RDYNAMIC_FLAG"] = get_variable ("RDYNAMIC_FLAG", %OCTAVE_CONF_RDYNAMIC_FLAG%);
   vars["LIBOCTAVE"] = "-loctave";
   vars["LIBOCTINTERP"] = "-loctinterp";
   vars["LIBREADLINE"] = "-lreadline";
   vars["LIBCRUFT"] = "-lcruft";
-  vars["BLAS_LIBS"] = get_variable("BLAS_LIBS", %OCTAVE_CONF_BLAS_LIBS%);
-  vars["FFTW_LIBS"] = get_variable("FFTW_LIBS", %OCTAVE_CONF_FFTW_LIBS%);
-  vars["LIBS"] = get_variable("LIBS", %OCTAVE_CONF_LIBS%);
-  vars["FLIBS"] = get_variable("FLIBS", %OCTAVE_CONF_FLIBS%);
-  vars["LD_CXX"] = get_variable("LD_CXX", %OCTAVE_CONF_LD_CXX%);
-  vars["LDFLAGS"] = get_variable("LDFLAGS", %OCTAVE_CONF_LDFLAGS%);
-  vars["LD_STATIC_FLAG"] = get_variable("LD_STATIC_FLAG", %OCTAVE_CONF_LD_STATIC_FLAG%);
-  vars["LFLAGS"] = get_variable("LFLAGS", DEFAULT_LFLAGS);
+  vars["BLAS_LIBS"] = get_variable ("BLAS_LIBS", %OCTAVE_CONF_BLAS_LIBS%);
+  vars["FFTW_LIBS"] = get_variable ("FFTW_LIBS", %OCTAVE_CONF_FFTW_LIBS%);
+  vars["LIBS"] = get_variable ("LIBS", %OCTAVE_CONF_LIBS%);
+  vars["FLIBS"] = get_variable ("FLIBS", %OCTAVE_CONF_FLIBS%);
+  vars["LD_CXX"] = get_variable ("LD_CXX", %OCTAVE_CONF_LD_CXX%);
+  vars["LDFLAGS"] = get_variable ("LDFLAGS", %OCTAVE_CONF_LDFLAGS%);
+  vars["LD_STATIC_FLAG"] = get_variable ("LD_STATIC_FLAG", %OCTAVE_CONF_LD_STATIC_FLAG%);
+  vars["LFLAGS"] = get_variable ("LFLAGS", DEFAULT_LFLAGS);
 
   vars["ALL_FFLAGS"] = vars["FFLAGS"];
 
   vars["ALL_CFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CFLAGS"]
     + " " + vars["CFLAGS"];
 
   vars["ALL_CXXFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CXXFLAGS"]
     + " " + vars["CXXFLAGS"];
@@ -321,42 +322,42 @@ basename (const string& s, bool strip_pa
   if (pos == string::npos)
     retval = s;
   else
     retval = s.substr (0, pos);
   if (strip_path)
     {
       size_t p1 = retval.rfind ('/'), p2 = retval.rfind ('\\');
       pos = (p1 != string::npos && p2 != string::npos
-	     ? max(p1, p2) : (p2 != string::npos ? p2 : p1));
+	     ? max (p1, p2) : (p2 != string::npos ? p2 : p1));
       if (pos != string::npos)
 	retval = retval.substr (0, pos);
     }
   return retval;
 }
 
 inline bool
 starts_with (const string& s, const string& prefix)
 {
   return (s.length () >= prefix.length () && s.find (prefix) == 0);
 }
 
 inline bool
 ends_with (const string& s, const string& suffix)
 {
   return (s.length () >= suffix.length ()
-	  && s.rfind (suffix) == s.length ()-suffix.length());
+	  && s.rfind (suffix) == s.length () - suffix.length ());
 }
 
 static int
 run_command (const string& cmd)
 {
   if (debug)
     cout << cmd << endl;
-  return system (cmd.c_str());
+  return system (cmd.c_str ());
 }
 
 int
 main (int argc, char **argv)
 {
   initialize ();
 
   string file, output_option;
@@ -380,17 +381,17 @@ main (int argc, char **argv)
   bool compile = true;
 
   if (argc == 1)
     {
       cout << usage_msg << endl;
       return 1;
     }
 
-  if (argc == 2 && (!strcmp (argv[1], "-v") || !strcmp(argv[1], "--version")))
+  if (argc == 2 && (!strcmp (argv[1], "-v") || !strcmp (argv[1], "--version")))
     {
       cout << version_msg << endl;
       return 0;
     }
 
   for (int i = 1; i < argc; i++)
     {
       string arg = argv[i];
@@ -551,17 +552,17 @@ main (int argc, char **argv)
 	{
 	  string f = *it, dfile = basename (f) + ".d", line;
 
 	  unlink (dfile.c_str ());
 	  string cmd = vars["CC"] + " " + vars["DEPEND_FLAGS"] + " "
 	    + vars["CPPFLAGS"] + " " + vars["ALL_CFLAGS"] + " "
 	    + incflags  + " " + defs + " " + quote_path (f);
 
-	  FILE *fd = popen (cmd.c_str(), "r");
+	  FILE *fd = popen (cmd.c_str (), "r");
 	  ofstream fo (dfile.c_str ());
 	  int pos;
 	  while (!feof (fd))
 	    {
 	      line = get_line (fd);
 	      if ((pos = line.rfind (".o:")) != string::npos)
 		{
 		  int spos = line.rfind ('/', pos);
@@ -574,22 +575,22 @@ main (int argc, char **argv)
 	  pclose (fd);
 	  fo.close ();
 	}
 
       for (it = ccfiles.begin (); it != ccfiles.end (); ++it)
 	{
 	  string f = *it, dfile = basename (f) + ".d", line;
 
-	  unlink(dfile.c_str ());
+	  unlink (dfile.c_str ());
 	  string cmd = vars["CC"] + " " + vars["DEPEND_FLAGS"] + " "
 	    + vars["CPPFLAGS"] + " " + vars["ALL_CXXFLAGS"] + " "
-	    + incflags  + " " + defs + " " + quote_path(f);
+	    + incflags  + " " + defs + " " + quote_path (f);
 
-	  FILE *fd = popen (cmd.c_str(), "r");
+	  FILE *fd = popen (cmd.c_str (), "r");
 	  ofstream fo (dfile.c_str ());
 	  int pos;
 	  while (!feof (fd))
 	    {
 	      line = get_line (fd);
 	      if ((pos = line.rfind (".o:")) != string::npos)
 		{
 		  int spos = line.rfind ('/', pos);
diff --git a/octave-bug.cc.in b/octave-bug.cc.in
--- a/octave-bug.cc.in
+++ b/octave-bug.cc.in
@@ -60,19 +60,19 @@ get_env_variable (const char *name)
   char *value = ::getenv (name);
   if (value)
     return string (value);
   else
     return string ("");
 }
 
 inline bool
-starts_with(const string& s, const string& prefix)
+starts_with (const string& s, const string& prefix)
 {
-  return (s.length() >= prefix.length() && s.find(prefix) == 0);
+  return (s.length () >= prefix.length () && s.find (prefix) == 0);
 }
 
 int
 main (int argc, char **argv)
 {
   int arg_idx = 1;
 
   vars["config_optvars"] = %OCTAVE_CONF_config_opts%;
@@ -109,26 +109,27 @@ main (int argc, char **argv)
   vars["USER"] = get_env_variable ("LOGNAME");
   if (vars["USER"].empty ())
     vars["USER"] = get_env_variable ("USERNAME");
 
   vars["CC_AND_VERSION"] = (vars["CC"] + ", version" + vars["CC_VERSION"]);
   
   vars["CXX_AND_VERSION"] = (vars["CXX"] + ", version" + vars["CXX_VERSION"]);
 
-  /* FIXME: could be obtain from OS */
+  // FIXME -- could be obtained from OS.
   vars["UN"] = "Windows";
 
+  // FIXME -- the shell script also checks the minor version number,
+  // and if it is greater than or equal to 90, it is assumed that this
+  // version of Octave is a test release and bugs should go to the
+  // maintainers@octave.org list instead of bugs.
   if (starts_with (vars["VERSION"], "ss"))
     vars["BUGADDR"] = "maintainers@octave.org";
   else
-    {
-      /* FIXME: shell script contains more, but I don't get the logic */
-      vars["BUGADDR"] = "bug@octave.org";
-    }
+    vars["BUGADDR"] = "bug@octave.org";
 
   vars["SUBJECT"] = "[50 character or so descriptive subject here (for reference)]";
   if (arg_idx < argc && strcmp (argv[arg_idx], "-s") == 0)
     {
       arg_idx++;
       if (arg_idx < argc)
 	vars["SUBJECT"] = argv[arg_idx++];
       else
@@ -215,17 +216,17 @@ main (int argc, char **argv)
 
 	  msg += argv[arg_idx-1];
 	  warning (msg);
 	}
     }
 
   string content = os.str (), msg;
 
-  // Now go for MAPI stuff
+  // Now go for MAPI stuff.
 
   HMODULE hMapi;
   LHANDLE session;
   LPMAPILOGON mapiLogon;
   LPMAPILOGOFF mapiLogoff;
   LPMAPISENDMAIL mapiSendMail;
 
   hMapi = LoadLibrary ("mapi32.dll");
