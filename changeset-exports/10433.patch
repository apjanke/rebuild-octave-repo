# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1269286590 25200
#      Mon Mar 22 12:36:30 2010 -0700
# Node ID 2c01d24459fb8ce8a61c3d9ac5f64fbfa26b271f
# Parent  10207338603a6904e777866e17c6dee4c64061d3
Detabify scripts in 'scripts/image/'

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-03-22  Soren Hauberg  <hauberg@gmail.com>
+
+	* image/gmap40.m, image/hot.m, image/hsv2rgb.m, image/image.m,
+	image/image_viewer.m, image/imfinfo.m, image/imread.m, image/imshow.m,
+	image/saveimage: Detabify.
+
 2010-03-21  Soren Hauberg  <hauberg@gmail.com>
 
 	* general/quadv.m: Replace 'quadl' with 'quadv' in help text.
 
 2010-03-20  Soren Hauberg  <hauberg@gmail.com>
 
 	* general/interp2.m: For nearest neighbour interpolation ceil (instead of
     floor) at the center of the data intervals to be compatible with Matlab.
diff --git a/scripts/image/gmap40.m b/scripts/image/gmap40.m
--- a/scripts/image/gmap40.m
+++ b/scripts/image/gmap40.m
@@ -36,17 +36,17 @@ function map = gmap40 (number)
       error ("gmap40: argument must be a scalar");
     endif
   else
     print_usage ();
   endif
 
   if (number >= 1)
     map = repmat ([1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1],
-		  ceil (number / 6), 1) (1:number, :);
+          ceil (number / 6), 1) (1:number, :);
   else
     map = [];
   endif
 
 endfunction
 
 %!demo
 %! ## Show the 'gmap40' colormap as an image
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -26,17 +26,17 @@
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 function map = hot (number)
 
   if (nargin == 0)
     number = rows (colormap);
   elseif (nargin == 1) 
-	if (! isscalar (number))
+    if (! isscalar (number))
       error ("hot: argument must be a scalar");
     endif
   else
     print_usage ();
   endif
 
   if (number == 1)
     map = [0, 0, 0];  
diff --git a/scripts/image/hsv2rgb.m b/scripts/image/hsv2rgb.m
--- a/scripts/image/hsv2rgb.m
+++ b/scripts/image/hsv2rgb.m
@@ -72,17 +72,17 @@ function rgb_map = hsv2rgb (hsv_map)
          tp;
          (tp - 1/3 - floor (t - 1/3)')]';
 
   ## factor s*v -> f
   f = kron ([1, 1, 1], hsv_map(:,2)) .* kron ([1, 1, 1], hsv_map(:,3));
 
   ## add s*v* hue-function to rgb map
   rgb_map = rgb_map +  f .* (6 * (hue < 1/6) .* hue
-			     + (hue >= 1/6 & hue < 1/2)
-			     + (hue >= 1/2 & hue < 2/3) .* (4 - 6 * hue));
+                    + (hue >= 1/6 & hue < 1/2)
+                    + (hue >= 1/2 & hue < 2/3) .* (4 - 6 * hue));
 
   ## If input was an image, convert it back into one.
   if (is_image)
     rgb_map = reshape (rgb_map, Sz);
   endif
 
 endfunction
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -111,17 +111,17 @@ function h = __img__ (x, y, img, varargi
   ydata = [y(1), y(end)];
 
   xlim = [x(1)-0.5, x(end)+0.5];
   ylim = [y(1)-0.5, y(end)+0.5];
 
   ca = gca ();
 
   tmp = __go_image__ (ca, "cdata", img, "xdata", xdata, "ydata", ydata,
-		      "cdatamapping", "direct", varargin {:});
+                      "cdatamapping", "direct", varargin {:});
 
   ## FIXME -- how can we do this and also get the {x,y}limmode
   ## properties to remain "auto"?  I suppose this adjustment should
   ## happen automatically in axes::update_axis_limits instead of
   ## explicitly setting the values here.  But then what information is
   ## available to axes::update_axis_limits to determine that the
   ## adjustment is necessary?
   set (ca, "xlim", xlim, "ylim", ylim);
diff --git a/scripts/image/image_viewer.m b/scripts/image/image_viewer.m
--- a/scripts/image/image_viewer.m
+++ b/scripts/image/image_viewer.m
@@ -65,17 +65,17 @@
 function [ocmd, ofcn, ozoom] = image_viewer (cmd, fcn, zoom)
 
   persistent view_cmd;
   persistent view_fcn;
   persistent view_zoom = 1;
 
   if (isempty (view_fcn))
     if (isempty (view_cmd)
-	&& compare_versions (__gnuplot_version__ (), "4.0", ">"))
+        && compare_versions (__gnuplot_version__ (), "4.0", ">"))
       view_fcn = "gnuplot_internal";
     else
       view_fcn = @__img_via_file__;
     endif
   endif
 
   if (nargin > 3)
     print_usage ();
@@ -87,37 +87,37 @@ function [ocmd, ofcn, ozoom] = image_vie
     ozoom = view_zoom;
   endif
 
   if (nargin > 0)
 
     if (nargin < 3)
       zoom = 1;
       if (nargin < 2)
-	fcn = [];
+        fcn = [];
       endif
     endif
 
     view_cmd = cmd;
     view_fcn = fcn;
     view_zoom = zoom;
 
     if (nargin > 1)
       if (isa (fcn, "function_handle"))
-	view_fcn = fcn;
+        view_fcn = fcn;
       else
-	error ("image_viewer: expecting second argument to be a function handle");
+        error ("image_viewer: expecting second argument to be a function handle");
       endif
     endif
 
     if (nargin > 2)
       if (isnumeric (zoom) && isscalar (zoom) && isreal (zoom))
-	view_zoom = zoom;
+        view_zoom = zoom;
       else
-	error ("image_viewer: expecting third argument to be a real scalar");
+        error ("image_viewer: expecting third argument to be a real scalar");
       endif
     endif
 
   endif
 
 endfunction
 
 ## Display an image by saving it to a file in PPM format and launching
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -105,21 +105,21 @@ function info = imfinfo (filename)
 
       ## Couldn't find file. See if it's an URL.
 
       tmp = tmpnam ();
 
       [fn, status, msg] = urlwrite (filename, tmp);
 
       if (! status)
-	error ("imfinfo: cannot find %s", filename);
+        error ("imfinfo: cannot find %s", filename);
       endif
 
       if (! isempty (fn))
-	delete_file = true;
+        delete_file = true;
       endif
 
     endif
 
     info = __magick_finfo__ (fn);
 
   unwind_protect_cleanup
 
diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -61,30 +61,30 @@ function varargout = imread (filename, v
 
     img_field = false;
     x_field = false;
     map_field = false;
 
     try
       vars = load (fn);
       if (isstruct (vars))
-	img_field = isfield (vars, "img");
-	x_field = isfield (vars, "X");
-	map_field = isfield (vars, "map");
+        img_field = isfield (vars, "img");
+        x_field = isfield (vars, "X");
+        map_field = isfield (vars, "map");
       endif
     catch
       error ("imread: invalid image file: %s", magick_error);
     end_try_catch
 
     if (map_field && (img_field || x_field))
       varargout{2} = vars.map;
       if (img_field)
-	varargout{1} = vars.img;
+        varargout{1} = vars.img;
       else
-	varargout{1} = vars.X;
+        varargout{1} = vars.X;
       endif
     else
       error ("imread: invalid Octave image file format");
     endif
 
   end_try_catch
 
 endfunction
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -90,66 +90,66 @@ function h = imshow (im, varargin)
     error ("imshow: expecting MxN or MxNx3 matrix for image");
   endif
 
   narg = 1;
   while (narg <= numel (varargin))
     arg = varargin{narg++};
     if (isnumeric (arg))
       if (numel (arg) == 2 || isempty (arg))
-	display_range = arg;
+        display_range = arg;
       elseif (columns (arg) == 3)
-	indexed = true;
-	colormap (arg);
+        indexed = true;
+        colormap (arg);
       elseif (! isempty (arg))
-	error ("imshow: argument number %d is invalid", narg+1);
+        error ("imshow: argument number %d is invalid", narg+1);
       endif
     elseif (ischar (arg))
       switch (arg)
-	case "displayrange";
-	  display_range = varargin{narg++};
-	case {"truesize", "initialmagnification"}
-	  warning ("image: zoom argument ignored -- use GUI features");
-	otherwise
-	  warning ("imshow: unrecognized property %s", arg);
-	  narg++;
+        case "displayrange";
+          display_range = varargin{narg++};
+        case {"truesize", "initialmagnification"}
+          warning ("image: zoom argument ignored -- use GUI features");
+        otherwise
+          warning ("imshow: unrecognized property %s", arg);
+          narg++;
       endswitch
     else
       error ("imshow: argument number %d is invalid", narg+1);
     endif
   endwhile
 
   ## Set default display range if display_range not set yet.
   if (isempty (display_range))
     display_range = [min(im(:)), max(im(:))];
   elseif (isna (display_range))
     t = class (im);
     switch (t)
       case {"double", "single", "logical"}
-	display_range = [0, 1];
+        display_range = [0, 1];
       case {"int8", "int16", "int32", "uint8", "uint16", "uint32"}
-	## For compatibility, uint8 data should not be handled as
-	## double.  Doing so is a quick fix to allow the images to be
-	## displayed correctly.
-	display_range = double ([intmin(t), intmax(t)]);
+        ## For compatibility, uint8 data should not be handled as
+        ## double.  Doing so is a quick fix to allow the images to be
+        ## displayed correctly.
+        display_range = double ([intmin(t), intmax(t)]);
       otherwise
-	error ("imshow: invalid data type for image");
+        error ("imshow: invalid data type for image");
     endswitch
   endif
 
   ## Check for complex images.
   if (iscomplex (im))
     warning ("imshow: only showing real part of complex image");
     im = real (im);
   endif
   
   nans = isnan (im(:));
   if (any (nans))
     warning ("Octave:imshow-NaN",
-	     "imshow: pixels with NaN or NA values are set to minimum pixel value");
+             "imshow: pixels with NaN or NA values are set to minimum pixel value");
     im(nans) = display_range(1);
   endif
 
   ## This is for compatibility.
   if (! (indexed || (true_color && isinteger (im))) || islogical (im))
     im = double (im);
   endif
 
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -151,17 +151,17 @@ function saveimage (filename, img, img_f
 
     ## Would be nice to make this consistent with the line used by the
     ## load/save functions, but we need a good way to get username and
     ## hostname information.
 
     time_string = ctime (time ());
     time_string = time_string (1:length (time_string)-1);
     tagline = sprintf ("# Created by Octave %s, %s",
-		       OCTAVE_VERSION, time_string);
+                       OCTAVE_VERSION, time_string);
 
     if (grey && bw)
 
       if (map(1) != 0)
         map = [0; 1];
       else
         map = [1; 0];
       endif
