# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1342816517 14400
#      Fri Jul 20 16:35:17 2012 -0400
# Node ID aa6cba8ae88bec3a3c833ea1b8b0eed9c83ba5ba
# Parent  22bd268429d3fcaee83359c2941885101c3d1c67
Inserted msleep to reduce cpu usage on grabbing data from stdin.

diff --git a/libqterminal/unix/SelfListener.cpp b/libqterminal/unix/SelfListener.cpp
--- a/libqterminal/unix/SelfListener.cpp
+++ b/libqterminal/unix/SelfListener.cpp
@@ -1,19 +1,38 @@
+/* qterminal - a terminal widget for Qt
+ * Copyright (C) 2011 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
 #include "unix/SelfListener.h"
 
 SelfListener::SelfListener(int a, QObject *parent) :
     QThread(parent) {
     _a = a;
 }
 
 void SelfListener::run() {
-    char buf[1025];
+    char buf[4096];
     int len;
-
-    while(1) {
-        len = ::read(_a, buf, 1024);
-        if (len > 0) {
-           buf[len] = 0; // Just in case.
-           emit recvData(buf, len);
-        }
+    bool running = true;
+    while(running) {
+         while((len = ::read(_a, buf, 4096)) > 0) {
+            buf[len] = 0; // Just in case.
+            emit recvData(buf, len);
+            msleep(30);
+         }
+         if(len < 0)
+           running = false;
     }
 }
diff --git a/libqterminal/unix/SelfListener.h b/libqterminal/unix/SelfListener.h
--- a/libqterminal/unix/SelfListener.h
+++ b/libqterminal/unix/SelfListener.h
@@ -1,8 +1,25 @@
+/* qterminal - a terminal widget for Qt
+ * Copyright (C) 2011 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
 #ifndef SELFLISTENER_H
 #define SELFLISTENER_H
 
 #include <QThread>
 #include <unistd.h>
 
 class SelfListener : public QThread
 {
diff --git a/libqterminal/unix/TerminalView.cpp b/libqterminal/unix/TerminalView.cpp
--- a/libqterminal/unix/TerminalView.cpp
+++ b/libqterminal/unix/TerminalView.cpp
@@ -2417,44 +2417,16 @@ void TerminalView::setBellMode(int mode)
   _bellMode=mode;
 }
 
 void TerminalView::enableBell()
 {
   _allowBell = true;
 }
 
-void TerminalView::bell(const QString&)
-{
-  if (_bellMode==NoBell) return;
-
-  //limit the rate at which bells can occur
-  //...mainly for sound effects where rapid bells in sequence
-  //produce a horrible noise
-  if ( _allowBell )
-    {
-      _allowBell = false;
-      QTimer::singleShot(500,this,SLOT(enableBell()));
-
-      if (_bellMode==SystemBeepBell)
-        {
-          //        KNotification::beep();
-        }
-      else if (_bellMode==NotifyBell)
-        {
-          //        KNotification::event("BellVisible", message,QPixmap(),this);
-        }
-      else if (_bellMode==VisualBell)
-        {
-          swapColorTable();
-          QTimer::singleShot(200,this,SLOT(swapColorTable()));
-        }
-    }
-}
-
 void TerminalView::swapColorTable()
 {
   ColorEntry color = _colorTable[1];
   _colorTable[1]=_colorTable[0];
   _colorTable[0]= color;
   _colorsInverted = !_colorsInverted;
   update();
 }
diff --git a/libqterminal/unix/TerminalView.h b/libqterminal/unix/TerminalView.h
--- a/libqterminal/unix/TerminalView.h
+++ b/libqterminal/unix/TerminalView.h
@@ -437,38 +437,24 @@ public slots:
      * @param usesMouse Set to true if the program running in the terminal is interested in mouse events
      * or false otherwise.
      */
     void setUsesMouse(bool usesMouse);
 
     /** See setUsesMouse() */
     bool usesMouse() const;
 
-    /**
-     * Shows a notification that a bell event has occurred in the terminal.
-     * TODO: More documentation here
-     */
-    void bell(const QString& message);
-
 signals:
 
     /**
      * Emitted when the user presses a key whilst the terminal widget has focus.
      */
     void keyPressedSignal(QKeyEvent *e);
 
     /**
-     * Emitted when the user presses the suspend or resume flow control key combinations
-     *
-     * @param suspend true if the user pressed Ctrl+S (the suspend output key combination) or
-     * false if the user pressed Ctrl+Q (the resume output key combination)
-     */
-    void flowControlKeyPressed(bool suspend);
-
-    /**
      * A mouse event occurred.
      * @param button The mouse button (0 for left button, 1 for middle button, 2 for right button, 3 for release)
      * @param column The character column where the event occurred
      * @param line The character row where the event occurred
      * @param eventType The type of event.  0 for a mouse press / release or 1 for mouse motion
      */
     void mouseSignal(int button, int column, int line, int eventType);
     void changedFontMetricSignal(int height, int width);
diff --git a/libqterminal/unix/Vt102Emulation.cpp b/libqterminal/unix/Vt102Emulation.cpp
--- a/libqterminal/unix/Vt102Emulation.cpp
+++ b/libqterminal/unix/Vt102Emulation.cpp
@@ -38,20 +38,16 @@
 #include <unistd.h>
 #include <assert.h>
 
 // Qt
 #include <QtCore/QEvent>
 #include <QtGui/QKeyEvent>
 #include <QtCore/QByteRef>
 
-// KDE
-//#include <kdebug.h>
-//#include <klocale.h>
-
 // Konsole
 #include "unix/KeyboardTranslator.h"
 #include "unix/Screen.h"
 
 #if defined(HAVE_XKB)
 void scrolllock_set_off();
 void scrolllock_set_on();
 #endif
@@ -1257,10 +1253,9 @@ void Vt102Emulation::scan_buffer_report(
 
 void Vt102Emulation::ReportErrorToken()
 {
 #ifndef NDEBUG
   printf("undecodable "); scan_buffer_report();
 #endif
 }
 
-//#include "moc_Vt102Emulation.cpp"
 
