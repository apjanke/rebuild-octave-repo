# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250157127 -7200
#      Thu Aug 13 11:52:07 2009 +0200
# Node ID e08d72bb988e0d288580b11df3803795b69edf8e
# Parent  bd5909b89457a240c61a29c5d9008f4ec613b682
simplify cloning

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2009-08-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base.h (octave_base_value::count): Declare as octave_idx_type.
+	(octave_base_value::octave_base_value (const octave_base_value&)):
+	Initialize count to 1.
+	(octave_base_value::unique_clone ()): New method.
+	(octave_base_value::print_with_name): Declare as non-const.
+	* ov-base.cc (octave_base_value::print_with_name): Update.
+	* ov.h (octave_value::make_unique (void)): Don't set rep->count.
+	Call unique_clone.
+	(octave_value::make_unique (int)): Don't set rep->count.
+	Call unique_clone.
+	(octave_value::octave_value (const octave_base_value *)): Declare
+	as private.
+	* ov-class.cc (octave_class::print_with_name): Avoid using clone ().
+	* ov-class.h (octave_class::print_with_name): Declare as non-const.
+
 2009-08-13  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in: Consistently add library-specific CPPFLAGS and
 	LDFLAGS variables to CPPFLAGS and LDFLAGS for .oct files that need
 	them.  Also add X11_FLAGS to CPPFLAGS for display.d display.df and
 	pic/display.o.
 
 	* oct-conf.h.in: New #defines for QHULL_CPPFLAGS, QHULL_LDFLAGS,
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -381,17 +381,17 @@ octave_base_value::print_name_tag (std::
     }
 
   return retval;
 }
 
 void
 octave_base_value::print_with_name (std::ostream& output_buf,
 				    const std::string& name, 
-				    bool print_padding) const
+				    bool print_padding)
 {
   bool pad_after = print_name_tag (output_buf, name);
 
   print (output_buf);
 
   if (print_padding && pad_after)
     newline (output_buf);
 }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -120,26 +120,34 @@ public:
     type_conv_fcn _fcn;
     int _type_id;
   };
 
   friend class octave_value;
 
   octave_base_value (void) : count (1) { }
 
-  octave_base_value (const octave_base_value&) { }
+  octave_base_value (const octave_base_value&) : count (1) { }
 
   virtual ~octave_base_value (void) { }
 
+  // Unconditional clone. Always clones.
   virtual octave_base_value *
   clone (void) const { return new octave_base_value (*this); }
 
+  // Empty clone.
   virtual octave_base_value *
   empty_clone (void) const { return new octave_base_value (); }
 
+  // Unique clone. Usually clones, but may be overriden to fake the
+  // cloning when sharing copies is to be controlled from within an
+  // instance (see octave_class).
+  virtual octave_base_value *
+  unique_clone (void) { return clone (); }
+
   virtual type_conv_info
   numeric_conversion_function (void) const
     { return type_conv_info (); }
 
   virtual type_conv_info
   numeric_demotion_function (void) const
     { return type_conv_info (); }
 
@@ -495,17 +503,17 @@ public:
   virtual void
   print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   virtual bool
   print_name_tag (std::ostream& os, const std::string& name) const;
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name, 
-		   bool print_padding = true) const;
+		   bool print_padding = true);
 
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
   virtual bool save_ascii (std::ostream& os);
 
   virtual bool load_ascii (std::istream& is);
 
   virtual bool save_binary (std::ostream& os, bool& save_as_floats);
@@ -638,17 +646,20 @@ protected:
 
   void indent (std::ostream& os) const;
 
   void newline (std::ostream& os) const;
 
   void reset (void) const;
 
   // A reference count.
-  int count;
+  // NOTE: the declaration is octave_idx_type because with 64-bit indexing,
+  // it is well possible to have more than MAX_INT copies of a single value
+  // (think of an empty cell array with >2G elements).
+  octave_idx_type count;
 
 private:
 
   static int curr_print_indent_level;
   static bool beginning_of_line;
 
   DECLARE_OV_BASE_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -901,25 +901,26 @@ octave_class::print_name_tag (std::ostre
   newline (os);
   newline (os);
 
   return retval;
 }
 
 void
 octave_class::print_with_name (std::ostream&, const std::string& name, 
-			       bool) const
+			       bool)
 {
   octave_value fcn = symbol_table::find_method ("display", class_name ());
 
   if (fcn.is_defined ())
     {
       octave_value_list args;
 
-      args(0) = octave_value (clone (), 1);
+      count++;
+      args(0) = octave_value (this);
       
       string_vector arg_names (1);
 
       arg_names[0] = name;
 
       args.stash_name_tags (arg_names);
 
       feval (fcn.function_value (), args);
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -141,17 +141,17 @@ public:
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name, 
-			bool print_padding = true) const;
+			bool print_padding = true);
 
   bool reconstruct_exemplar (void);
 
   static void clear_exemplar_map (void);
 
   bool reconstruct_parents (void);
 
   bool save_ascii (std::ostream& os);
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -298,31 +298,29 @@ public:
       delete rep;
   }
 
   void make_unique (void)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
-	  rep = rep->clone ();
-	  rep->count = 1;
+	  rep = rep->unique_clone ();
 	}
     }
 
   // This uniquifies the value if it is referenced by more than a certain
   // number of shallow copies. This is useful for optimizations where we
   // know a certain copy, typically within a cell array, to be obsolete.
   void make_unique (int obsolete_copies)
     {
       if (rep->count > obsolete_copies + 1)
 	{
 	  --rep->count;
-	  rep = rep->clone ();
-	  rep->count = 1;
+	  rep = rep->unique_clone ();
 	}
     }
 
   // Simple assignment.
 
   octave_value& operator = (const octave_value& a)
     {
       if (rep != a.rep)
@@ -1137,16 +1135,20 @@ protected:
   octave_base_value *rep;
 
 private:
 
   assign_op unary_op_to_assign_op (unary_op op);
 
   binary_op op_eq_to_binary_op (assign_op op);
 
+  // This declaration protects against constructing octave_value from
+  // const octave_base_value* which actually silently calls octave_value (bool).
+  octave_value (const octave_base_value *);
+
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 // Publish externally used friend functions.
 
 extern OCTINTERP_API octave_value
 do_unary_op (octave_value::unary_op op, const octave_value& a);
 
