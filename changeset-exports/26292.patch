# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545586710 28800
#      Sun Dec 23 09:38:30 2018 -0800
# Branch stable
# Node ID d00577d95369d8de648b6350a96027a44f1dbedc
# Parent  f73bcf1d0b5a935d99cc4cb4cd5ab85c29d8532e
doc: Add warning note about integers exceeding flintmax to mod, rem (bug #55238).

* data.cc (Fmod, Frem): Add programming note describing how floating point
integers greater than flintmax will not behave correctly.  Suggest workaround
of using uint64 class.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -567,27 +567,30 @@ The remainder is computed using the expr
 
 @example
 x - y .* fix (x ./ y)
 @end example
 
 An error message is printed if the dimensions of the arguments do not agree,
 or if either argument is complex.
 
-Programming Notes: Floating point numbers within a few eps of an integer
-will be rounded to an integer before computation for compatibility with
-@sc{matlab}.
+Programming Notes: When calculating with floating point numbers (double,
+single), values within a few eps of an integer will be rounded to that
+integer before computation for compatibility with @sc{matlab}.  Any floating
+point integers greater than @code{flintmax} (2^53 for double) will not compute
+correctly.  For larger integer values convert the input to @code{uint64} before
+calling this function.
 
 By convention,
 
 @example
 @group
 rem (@var{x}, 0) = NaN  if @var{x} is a floating point variable
 rem (@var{x}, 0) = 0    if @var{x} is an integer variable
-rem (@var{x}, @var{y})        returns a value with the signbit from @var{x}
+rem (@var{x}, @var{y})  returns a value with the signbit from @var{x}
 @end group
 @end example
 
 For the opposite conventions see the @code{mod} function.  In general,
 @code{rem} is best when computing the remainder after division of two
 @emph{positive} numbers.  For negative numbers, or when the values are
 periodic, @code{mod} is a better choice.
 @seealso{mod}
@@ -748,19 +751,22 @@ x - y .* floor (x ./ y)
 @noindent
 and is written such that the correct modulus is returned for integer types.
 This function handles negative values correctly.  That is,
 @w{@code{mod (-1, 3)}} is 2, not -1, as @w{@code{rem (-1, 3)}} returns.
 
 An error results if the dimensions of the arguments do not agree, or if
 either of the arguments is complex.
 
-Programming Notes: Floating point numbers within a few eps of an integer
-will be rounded to an integer before computation for compatibility with
-@sc{matlab}.
+Programming Notes: When calculating with floating point numbers (double,
+single), values within a few eps of an integer will be rounded to that
+integer before computation for compatibility with @sc{matlab}.  Any floating
+point integers greater than @code{flintmax} (2^53 for double) will not compute
+correctly.  For larger integer values convert the input to @code{uint64} before
+calling this function.
 
 By convention,
 
 @example
 @group
 mod (@var{x}, 0) = @var{x}
 mod (@var{x}, @var{y})      returns a value with the signbit from @var{y}
 @end group
