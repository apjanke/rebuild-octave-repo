# HG changeset patch
# User jwe
# Date 794861402 0
#      Fri Mar 10 18:50:02 1995 +0000
# Node ID e2036dce97ea84462fde86851c3a0d861c657b8b
# Parent  364906259d4a4948aa1957ec4830c79418a16f8f
[project @ 1995-03-10 18:49:55 by jwe]

diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -45,17 +45,17 @@ int returning = 0;
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-cmd.h"
 #include "tree-misc.h"
 #include "tree-const.h"
 #include "unwind-prot.h"
 
 // Decide if it's time to quit a for or while loop.
-static int
+static inline int
 quit_loop_now (void)
 {
 // Maybe handle `continue N' someday...
 
   if (continuing)
     continuing--;
 
   int quit = (returning || breaking || continuing);
@@ -235,35 +235,126 @@ tree_while_command::print_code (ostream&
 
 tree_for_command::~tree_for_command (void)
 {
   delete id;
   delete expr;
   delete list;
 }
 
+inline void
+tree_for_command::do_for_loop_once (tree_constant& rhs, int& quit)
+{
+  quit = 0;
+
+  tree_constant *tmp = new tree_constant (rhs);
+  tree_simple_assignment_expression tmp_ass (id, tmp, 1);
+  tmp_ass.eval (0);
+
+  if (error_state)
+    {
+      eval_error ();
+      return;
+    }
+
+  if (list)
+    {
+      list->eval (1);
+      if (error_state)
+	{
+	  eval_error ();
+	  quit = 1;
+	  return;
+	}
+    }
+
+  quit = quit_loop_now ();
+}
+
+inline void
+tree_for_command::do_for_loop_once (tree_identifier *ident,
+				    tree_constant& rhs, int& quit)
+{
+  quit = 0;
+
+  ident->assign (rhs);
+
+  if (error_state)
+    {
+      eval_error ();
+      return;
+    }
+
+  if (list)
+    {
+      list->eval (1);
+      if (error_state)
+	{
+	  eval_error ();
+	  quit = 1;
+	  return;
+	}
+    }
+
+  quit = quit_loop_now ();
+}
+
+#define DO_LOOP(val) \
+  do \
+    { \
+      if (ident) \
+	for (int i = 0; i < steps; i++) \
+	  { \
+	    tree_constant rhs (val); \
+	    int quit = 0; \
+	    do_for_loop_once (ident, rhs, quit); \
+	    if (quit) \
+	      break; \
+	  } \
+      else \
+	for (int i = 0; i < steps; i++) \
+	  { \
+	    tree_constant rhs (val); \
+	    int quit = 0; \
+	    do_for_loop_once (rhs, quit); \
+	    if (quit) \
+	      break; \
+	  } \
+    } \
+  while (0)
+
 void
 tree_for_command::eval (void)
 {
   if (error_state || ! expr)
     return;
 
   tree_constant tmp_expr = expr->eval (0);
 
   if (error_state || tmp_expr.is_undefined ())
     {
       eval_error ();
       return;
     }
 
+  tree_identifier *ident = 0;
+  if (! id->arg_list ())
+    {
+      tree_indirect_ref *idr = id->ident ();
+      if (idr->is_identifier_only ())
+	ident = idr->ident ();
+    }
+
   if (tmp_expr.is_scalar_type ())
     {
-      tree_constant *rhs = new tree_constant (tmp_expr);
       int quit = 0;
-      do_for_loop_once (rhs, quit);
+      if (ident)
+	do_for_loop_once (ident, tmp_expr, quit);
+      else
+	do_for_loop_once (tmp_expr, quit);
     }
   else if (tmp_expr.is_matrix_type ())
     {
       Matrix m_tmp;
       ComplexMatrix cm_tmp;
       int nr;
       int steps;
       if (tmp_expr.is_real_matrix ())
@@ -274,63 +365,72 @@ tree_for_command::eval (void)
 	}
       else
 	{
 	  cm_tmp = tmp_expr.complex_matrix_value ();
 	  nr = cm_tmp.rows ();
 	  steps = cm_tmp.columns ();
 	}
 
-      for (int i = 0; i < steps; i++)
+      if (tmp_expr.is_real_matrix ())
 	{
-	  tree_constant *rhs = 0;
-
 	  if (nr == 1)
-	    {
-	      if (tmp_expr.is_real_matrix ())
-		rhs = new tree_constant (m_tmp (0, i));
-	      else
-		rhs = new tree_constant (cm_tmp (0, i));
-	    }
+	    DO_LOOP(m_tmp (0, i));
 	  else
-	    {
-	      if (tmp_expr.is_real_matrix ())
-		rhs = new tree_constant (m_tmp.extract (0, i, nr-1, i));
-	      else
-		rhs = new tree_constant (cm_tmp.extract (0, i, nr-1, i));
-	    }
-
-	  int quit = 0;
-	  do_for_loop_once (rhs, quit);
-	  if (quit)
-	    break;
+	    DO_LOOP(m_tmp.extract (0, i, nr-1, i));
+	}
+      else
+	{
+	  if (nr == 1)
+	    DO_LOOP(cm_tmp (0, i));
+	  else
+	    DO_LOOP(cm_tmp.extract (0, i, nr-1, i));
 	}
     }
   else if (tmp_expr.is_string ())
     {
       gripe_string_invalid ();
     }
   else if (tmp_expr.is_range ())
     {
       Range rng = tmp_expr.range_value ();
 
       int steps = rng.nelem ();
       double b = rng.base ();
       double increment = rng.inc ();
 
-      for (int i = 0; i < steps; i++)
+      if (ident)
 	{
-	  double tmp_val = b + i * increment;
+	  for (int i = 0; i < steps; i++)
+	    {
+	      double tmp_val = b + i * increment;
+
+	      tree_constant rhs (tmp_val);
+
+	      int quit = 0;
+	      do_for_loop_once (ident, rhs, quit);
 
-	  tree_constant *rhs = new tree_constant (tmp_val);
+	      if (quit)
+		break;
+	    }
+	}
+      else
+	{
+	  for (int i = 0; i < steps; i++)
+	    {
+	      double tmp_val = b + i * increment;
 
-	  int quit = 0;
-	  do_for_loop_once (rhs, quit);
-	  if (quit)
-	    break;
+	      tree_constant rhs (tmp_val);
+
+	      int quit = 0;
+	      do_for_loop_once (rhs, quit);
+
+	      if (quit)
+		break;
+	    }
 	}
     }
   else
     {
       ::error ("invalid type in for loop expression near line %d, column %d",
 	       line (), column ());
     }
 }
@@ -339,45 +439,16 @@ void
 tree_for_command::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating for command near line %d, column %d",
 	     line (), column ());
 }
 
 void
-tree_for_command::do_for_loop_once (tree_constant *rhs, int& quit)
-{
-  quit = 0;
-
-  tree_simple_assignment_expression tmp_ass (id, rhs, 1);
-
-  tmp_ass.eval (0);
-
-  if (error_state)
-    {
-      eval_error ();
-      return;
-    }
-
-  if (list)
-    {
-      list->eval (1);
-      if (error_state)
-	{
-	  eval_error ();
-	  quit = 1;
-	  return;
-	}
-    }
-
-  quit = quit_loop_now ();
-}
-
-void
 tree_for_command::print_code (ostream& os)
 {
   print_code_indent (os);
 
   os << "for ";
 
   if (id)
     id->print_code (os);
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -26,16 +26,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include <iostream.h>
 
 class tree_statement_list;
 class tree_global_init_list;
 class tree_if_command_list;
 class tree_expression;
 class tree_index_expression;
+class tree_identifier;
 class tree_constant;
 class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
@@ -144,17 +145,20 @@ public:
 
   void eval (void);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
 private:
-  void do_for_loop_once (tree_constant *rhs, int& quit);
+  void do_for_loop_once (tree_identifier *ident,
+			 tree_constant& rhs, int& quit);
+
+  void do_for_loop_once (tree_constant& rhs, int& quit);
 
   tree_index_expression *id;	// Identifier to modify.
   tree_expression *expr;	// Expression to evaluate.
   tree_statement_list *list;	// List of commands to execute.
 };
 
 // If.
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -28,16 +28,28 @@ Software Foundation, 675 Mass Ave, Cambr
 #include <iostream.h>
 
 #include "tree-const.h"
 #include "error.h"
 #include "gripes.h"
 #include "user-prefs.h"
 #include "oct-map.h"
 
+// The following three variables could be made static members of the
+// tree_constant class.
+
+// Pointer to the blocks of memory we manage.
+static tree_constant *newlist;
+
+// Multiplier for allocating new blocks.
+static const int newlist_grow_size = 128;
+
+// Pointer to the last element of the last block allocated.
+static tree_constant *newlist_tail = 0;
+
 Octave_map
 tree_constant::map_value (void) const
 {
   return rep->map_value ();
 }
 
 tree_constant::~tree_constant (void)
 {
@@ -48,32 +60,49 @@ tree_constant::~tree_constant (void)
 
   if (--rep->count <= 0)
     {
       delete rep;
       rep = 0;
     }
 }
 
-#if defined (MDEBUG)
 void *
 tree_constant::operator new (size_t size)
 {
-  tree_constant *p = ::new tree_constant;
-  cerr << "tree_constant::new(): " << p << "\n";
-  return p;
+  assert (size == sizeof (tree_constant));
+
+  if (! newlist)
+    {
+      int block_size = newlist_grow_size * sizeof (tree_constant);
+      newlist = (tree_constant *) new char [block_size];
+
+      for (int i = 0; i < newlist_grow_size - 1; i++)
+	newlist[i].freeptr = &newlist[i+1];
+
+      newlist[i].freeptr = 0;
+
+      if (newlist_tail)
+	newlist_tail->freeptr = newlist;
+
+      newlist_tail = &newlist[i];
+    }
+
+  tree_constant *tmp = newlist;
+  newlist = newlist->freeptr;
+  return tmp;
 }
 
 void
 tree_constant::operator delete (void *p, size_t size)
 {
-  cerr << "tree_constant::delete(): " << p << "\n";
-  ::delete p;
+  tree_constant *tmp = (tree_constant *) p;
+  tmp->freeptr = newlist;
+  newlist = tmp;
 }
-#endif
 
 // Simple assignment.
 
 tree_constant
 tree_constant::operator = (const tree_constant& a)
 {
   if (rep != a.rep)
     {
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -42,21 +42,25 @@ struct Mapper_fcn;
 
 // Constants.
 
 class
 tree_constant : public tree_fvc
 {
 private:
 
+// The real representation of a constant, declared in tc-rep.h
+
 #include "tc-rep.h"
 
-// The real representation of a constant, declared in tc-rep.h
-
-  tree_constant_rep *rep;
+  union
+    {
+      tree_constant *freeptr;  // For custom memory management.
+      tree_constant_rep *rep;  // The real representation.
+    };
 
 public:
 
   enum magic_colon { magic_colon_t };
   enum all_va_args { all_va_args_t };
 
 // Constructors.  It is possible to create the following types of
 // constants:
@@ -146,20 +150,18 @@ public:
   tree_constant (const tree_constant& a) : tree_fvc ()
     { rep = a.rep; rep->count++; }
 
 // Delete the representation of this constant if the count drops to
 // zero.
 
   ~tree_constant (void);
 
-#if defined (MDEBUG)
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
-#endif
 
 // Simple assignment.
 
   tree_constant operator = (const tree_constant& a);
 
 // Indexed assignment.
 
   tree_constant assign (tree_constant& rhs, const Octave_object& args)
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -44,16 +44,28 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "pager.h"
 #include "pr-output.h"
 #include "tree-const.h"
 #include "idx-vector.h"
 #include "oct-map.h"
 
 #include "tc-inlines.h"
 
+// The following three variables could be made static members of the
+// TC_REP class.
+
+// Pointer to the blocks of memory we manage.
+static TC_REP *newlist;
+
+// Multiplier for allocating new blocks.
+static const int newlist_grow_size = 128;
+
+// Pointer to the last element of the last block allocated.
+static TC_REP *newlist_tail = 0;
+
 static int
 any_element_is_complex (const ComplexMatrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (imag (a.elem (i, j)) != 0.0)
@@ -441,32 +453,49 @@ TC_REP::~tree_constant_rep (void)
     case magic_colon:
     case all_va_args:
       break;
     }
 
   delete [] orig_text;
 }
 
-#if defined (MDEBUG)
 void *
 TC_REP::operator new (size_t size)
 {
-  tree_constant_rep *p = ::new tree_constant_rep;
-  cerr << "TC_REP::new(): " << p << "\n";
-  return p;
+  assert (size == sizeof (TC_REP));
+
+  if (! newlist)
+    {
+      int block_size = newlist_grow_size * sizeof (TC_REP);
+      newlist = (TC_REP *) new char [block_size];
+
+      for (int i = 0; i < newlist_grow_size - 1; i++)
+	newlist[i].freeptr = &newlist[i+1];
+
+      newlist[i].freeptr = 0;
+
+      if (newlist_tail)
+	newlist_tail->freeptr = newlist;
+
+      newlist_tail = &newlist[i];
+    }
+
+  TC_REP *tmp = newlist;
+  newlist = newlist->freeptr;
+  return tmp;
 }
 
 void
 TC_REP::operator delete (void *p, size_t size)
 {
-  cerr << "TC_REP::delete(): " << p << "\n";
-  ::delete p;
+  TC_REP *tmp = (TC_REP *) p;
+  tmp->freeptr = newlist;
+  newlist = tmp;
 }
-#endif
 
 int
 TC_REP::rows (void) const
 {
   int retval = -1;
 
   switch (type_tag)
     {
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -76,20 +76,18 @@ private:
   tree_constant_rep (const Octave_map& m);
 
   tree_constant_rep (tree_constant_rep::constant_type t);
 
   tree_constant_rep (const tree_constant_rep& t);
 
   ~tree_constant_rep (void);
 
-#if defined (MDEBUG)
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
-#endif
 
   int rows (void) const;
   int columns (void) const;
 
   int is_defined (void) const
     { return type_tag != tree_constant_rep::unknown_constant; }
 
   int is_undefined (void) const
@@ -368,30 +366,32 @@ private:
   void delete_rows (Range& i);
 
   void delete_column (int);
   void delete_columns (idx_vector& j);
   void delete_columns (Range& j);
 
 // Data.
 
-  int count;
+  union
+    {
+      double scalar;		      // A real scalar constant.
+      Matrix *matrix;		      // A real matrix constant.
+      Complex *complex_scalar;	      // A real scalar constant.
+      ComplexMatrix *complex_matrix;  // A real matrix constant.
+      char *string;		      // A character string constant.
+      Range *range;		      // A set of evenly spaced values.
+      Octave_map *a_map;	      // An associative array.
+
+      tree_constant_rep *freeptr;     // For custom memory management.
+    };
 
   constant_type type_tag;
 
-  union
-    {
-      double scalar;			// A real scalar constant.
-      Matrix *matrix;			// A real matrix constant.
-      Complex *complex_scalar;		// A real scalar constant.
-      ComplexMatrix *complex_matrix;	// A real matrix constant.
-      char *string;			// A character string constant.
-      Range *range;			// A set of evenly spaced values.
-      Octave_map *a_map;		// An associative array.
-    };
+  int count;
 
   char *orig_text;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
