# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1451599596 18000
#      Thu Dec 31 17:06:36 2015 -0500
# Node ID ec532a439c6ffc08d0149e610c9cbba1d7049b56
# Parent  ebc439187d29a587e6a7159bf832db68801b7771
rework method of disabling warnings from GCC

* configure.ac: Check for GCC's #pragma GCC diagnostic feature.

* libinterp/module.mk, libinterp/corefcn/module.mk,
libinterp/parse-tree/module.mk: Eliminate separate libraries for TeX
and Octave parsers.

* oct-tex-lexer.in.ll, oct-tex-parser.in.yy, lex.ll, oct-parse.in.yy:
Use GCC #pragma GCC diagnostic feature to more selectively disable
warnings in generated code.

* libgui/module.mk (rcc-command): Use GCC #pragma GCC diagnostic
feature to more selectively disable warnings in generated code.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2550,16 +2550,37 @@ if test $try_address_sanitizer_flags = y
       AC_MSG_RESULT([adding $flag to WARN_LDFLAGS])])
   done
 fi
 
 AC_SUBST(WARN_CFLAGS)
 AC_SUBST(WARN_CXXFLAGS)
 AC_SUBST(WARN_LDFLAGS)
 
+## Also check for the GCC-specific pragmas for controlling warnings.
+
+AC_CACHE_CHECK([for @%:@pragma GCC diagnostic push/pop/ignore],
+  [octave_cv_gcc_has_pragma_GCC_diagnostic],
+  [AC_LANG_PUSH(C++)
+   AC_TRY_COMPILE([], [
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignore "-Wold-style-cast"
+  int three = (int) 3.1415926;
+#pragma GCC diagnostic pop
+    ],
+    [octave_cv_gcc_has_pragma_GCC_diagnostic=yes],
+    [octave_cv_gcc_has_pragma_GCC_diagnostic=no])
+   AC_LANG_POP(C++)],
+  ])
+
+if test $octave_cv_gcc_has_pragma_GCC_diagnostic = yes; then
+  AC_DEFINE(HAVE_PRAGMA_GCC_DIAGNOSTIC, 1,
+   [define if GCC supports @%:@pragma GCC diagnostic ...])
+fi
+
 ### Check for Java.
 
 build_java=yes
 AC_ARG_ENABLE([java],
   [AS_HELP_STRING([--disable-java],
     [disable Java interface])],
   [if test "$enableval" = no; then
      build_java=no
diff --git a/libgui/module.mk b/libgui/module.mk
--- a/libgui/module.mk
+++ b/libgui/module.mk
@@ -85,16 +85,20 @@ define moc-command
   mv $@-t $@
 endef
 
 define rcc-command
   rm -f $@-t $@ && \
   ( echo "#ifdef HAVE_CONFIG_H"; \
     echo "#include <config.h>"; \
     echo "#endif"; \
+    echo "// Ignore unused variable warnings in generated code."; \
+    echo "#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)"; \
+    echo "#pragma GCC diagnostic ignored \"-Wunused-variable\""; \
+    echo "#endif"; \
     $(RCC) -name $(@D) $< ) > $@-t && \
   mv $@-t $@
 endef
 
 moc-%.cc: %.h
 	$(AM_V_GEN)$(moc-command)
 
 ui-%.h: %.ui
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -15,19 +15,16 @@ OPT_HANDLERS = \
 $(OPT_HANDLERS): $(top_srcdir)/build-aux/mk-opts.pl
 
 JIT_INC = \
   libinterp/corefcn/jit-util.h \
   libinterp/corefcn/jit-typeinfo.h \
   libinterp/corefcn/jit-ir.h \
   libinterp/corefcn/pt-jit.h
 
-TEX_PARSER_INC = \
-  libinterp/corefcn/oct-tex-parser.h
-
 COREFCN_INC = \
   libinterp/corefcn/Cell.h \
   libinterp/corefcn/c-file-ptr-stream.h \
   libinterp/corefcn/cdisplay.h \
   libinterp/corefcn/comment-list.h \
   libinterp/corefcn/data.h \
   libinterp/corefcn/debug.h \
   libinterp/corefcn/defun-dld.h \
@@ -67,16 +64,17 @@ COREFCN_INC = \
   libinterp/corefcn/oct-lvalue.h \
   libinterp/corefcn/oct-map.h \
   libinterp/corefcn/oct-obj.h \
   libinterp/corefcn/oct-prcstrm.h \
   libinterp/corefcn/oct-procbuf.h \
   libinterp/corefcn/oct-stdstrm.h \
   libinterp/corefcn/oct-stream.h \
   libinterp/corefcn/oct-strstrm.h \
+  libinterp/corefcn/oct-tex-parser.h \
   libinterp/corefcn/oct.h \
   libinterp/corefcn/octave-default-image.h \
   libinterp/corefcn/octave-link.h \
   libinterp/corefcn/octave-preserve-stream-state.h \
   libinterp/corefcn/pager.h \
   libinterp/corefcn/pr-output.h \
   libinterp/corefcn/procstream.h \
   libinterp/corefcn/profiler.h \
@@ -91,29 +89,24 @@ COREFCN_INC = \
   libinterp/corefcn/txt-eng.h \
   libinterp/corefcn/utils.h \
   libinterp/corefcn/variables.h \
   libinterp/corefcn/workspace-element.h \
   libinterp/corefcn/xdiv.h \
   libinterp/corefcn/xnorm.h \
   libinterp/corefcn/xpow.h \
   libinterp/corefcn/zfstream.h \
-  $(JIT_INC) \
-  $(TEX_PARSER_INC)
+  $(JIT_INC)
 
 JIT_SRC = \
   libinterp/corefcn/jit-util.cc \
   libinterp/corefcn/jit-typeinfo.cc \
   libinterp/corefcn/jit-ir.cc \
   libinterp/corefcn/pt-jit.cc
 
-TEX_PARSER_SRC = \
-  libinterp/corefcn/oct-tex-lexer.ll \
-  libinterp/corefcn/oct-tex-parser.yy
-
 C_COREFCN_SRC = \
   libinterp/corefcn/siglist.c
 
 COREFCN_SRC = \
   libinterp/corefcn/Cell.cc \
   libinterp/corefcn/__contourc__.cc \
   libinterp/corefcn/__dispatch__.cc \
   libinterp/corefcn/__dsearchn__.cc \
@@ -198,16 +191,18 @@ COREFCN_SRC = \
   libinterp/corefcn/oct-hist.cc \
   libinterp/corefcn/oct-iostrm.cc \
   libinterp/corefcn/oct-lvalue.cc \
   libinterp/corefcn/oct-map.cc \
   libinterp/corefcn/oct-prcstrm.cc \
   libinterp/corefcn/oct-procbuf.cc \
   libinterp/corefcn/oct-stream.cc \
   libinterp/corefcn/oct-strstrm.cc \
+  libinterp/corefcn/oct-tex-lexer.ll \
+  libinterp/corefcn/oct-tex-parser.yy \
   libinterp/corefcn/octave-link.cc \
   libinterp/corefcn/ordschur.cc \
   libinterp/corefcn/pager.cc \
   libinterp/corefcn/pinv.cc \
   libinterp/corefcn/pr-output.cc \
   libinterp/corefcn/procstream.cc \
   libinterp/corefcn/profiler.cc \
   libinterp/corefcn/psi.cc \
@@ -323,41 +318,33 @@ libinterp/corefcn/oct-tex-symbols.cc: li
 libinterp/corefcn/txt-eng.cc: libinterp/corefcn/oct-tex-symbols.cc
 libinterp/corefcn/oct-tex-lexer.cc: LEX_OUTPUT_ROOT := lex.octave_tex_
 libinterp/corefcn/oct-tex-parser.h: libinterp/corefcn/oct-tex-parser.yy
 
 libinterp/corefcn/oct-tex-parser.yy: libinterp/corefcn/oct-tex-parser.in.yy
 	$(AM_V_GEN)$(call subst-bison-api-decls,octave_tex_)
 
 noinst_LTLIBRARIES += \
-  libinterp/corefcn/libcorefcn.la \
-  libinterp/corefcn/libtex_parser.la
+  libinterp/corefcn/libcorefcn.la
 
 libinterp_corefcn_libcorefcn_la_SOURCES = $(COREFCN_SRC)
 
 libinterp_corefcn_libcorefcn_la_CPPFLAGS = \
   $(libinterp_liboctinterp_la_CPPFLAGS) \
   $(FFTW_XCPPFLAGS) \
   $(FONTCONFIG_CPPFLAGS) \
   $(FT2_CPPFLAGS) \
   $(HDF5_CPPFLAGS) \
   $(LLVM_CPPFLAGS) \
   $(Z_CPPFLAGS)
 
 libinterp_corefcn_libcorefcn_la_CFLAGS = $(AM_CFLAGS) $(WARN_CFLAGS)
 
 libinterp_corefcn_libcorefcn_la_CXXFLAGS = $(AM_CXXFLAGS) $(WARN_CXXFLAGS) $(LLVM_CXXFLAGS)
 
-libinterp_corefcn_libtex_parser_la_SOURCES = $(TEX_PARSER_SRC)
-
-libinterp_corefcn_libtex_parser_la_CPPFLAGS = $(libinterp_liboctinterp_la_CPPFLAGS)
-
-libinterp_corefcn_libtex_parser_la_CXXFLAGS = \
-  $(filter-out -Wold-style-cast, $(libinterp_corefcn_libcorefcn_la_CXXFLAGS))
-
 libinterp_EXTRA_DIST += \
   libinterp/corefcn/defaults.in.h \
   libinterp/corefcn/graphics.in.h \
   libinterp/corefcn/mxarray.in.h \
   libinterp/corefcn/oct-errno.in.cc \
   libinterp/corefcn/oct-tex-lexer.in.ll \
   libinterp/corefcn/oct-tex-parser.in.yy \
   libinterp/corefcn/oct-tex-symbols.in
diff --git a/libinterp/corefcn/oct-tex-lexer.in.ll b/libinterp/corefcn/oct-tex-lexer.in.ll
--- a/libinterp/corefcn/oct-tex-lexer.in.ll
+++ b/libinterp/corefcn/oct-tex-lexer.in.ll
@@ -15,32 +15,43 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
+%top {
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// This one needs to be global.
+#pragma GCC diagnostic ignored "-Wunused-function"
+
+// Disable this warning for code that is generated by flex, including
+// pattern rules.  Push the current state so we can restore the warning
+// state prior to functions we define at the bottom of the file.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+#endif
+
+}
+
 %option prefix = "octave_tex_"
 %option noyywrap
 %option reentrant
 %option bison-bridge
 
 %option noyyalloc
 %option noyyrealloc
 %option noyyfree
 
-%top {
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-}
-
 %x NUM_MODE
 %x MAYBE_NUM_MODE
 
 %{
 
 // The generated code may include unistd.h.  We need that to happen
 // before defining isatty to be prefixed with the gnulib namespace
 // identifier.
@@ -166,18 +177,31 @@ NUM (({D}+\.?{D}*)|(\.{D}+))
 %}
 
 "\n" |
 .    {
     yylval->ch = yytext[0];
     return CH;
   }
 
+%{
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Also disable this warning for functions that is generated by flex
+// after the pattern rules.
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#endif
+%}
+
 %%
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
+
 void *
 octave_tex_alloc (yy_size_t size, yyscan_t)
 {
   return malloc (size);
 }
 
 void *
 octave_tex_realloc (void *ptr, yy_size_t size, yyscan_t)
diff --git a/libinterp/corefcn/oct-tex-parser.in.yy b/libinterp/corefcn/oct-tex-parser.in.yy
--- a/libinterp/corefcn/oct-tex-parser.in.yy
+++ b/libinterp/corefcn/oct-tex-parser.in.yy
@@ -40,16 +40,24 @@ static void yyerror (text_parser_tex& pa
 // them via the gnulib namespace.
 #define fclose GNULIB_NAMESPACE::fclose
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define malloc GNULIB_NAMESPACE::malloc
 #endif
 
 #define scanner parser.get_scanner ()
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Disable this warning for code that is generated by Bison, including
+// grammar rules.  Push the current state so we can restore the warning
+// state prior to functions we define at the bottom of the file.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+#endif
+
 %}
 
 %API_PREFIX_DECL%
 
 %define api.pure
 %parse-param { text_parser_tex& parser }
 %lex-param { void *scanner }
 
@@ -195,16 +203,21 @@ scoped_string_element_list      : START 
 string                          : // empty
                                   { parser.set_parse_result (new text_element_string ("")); }
                                 | string_element_list
                                   { parser.set_parse_result ($1); }
                                 ;
 
 %%
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
+
 text_element*
 text_parser_tex::parse (const std::string& s)
 {
   octave_tex_debug = 0;
 
   if (init_lexer (s))
     {
       result = 0;
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -122,19 +122,17 @@ nodist_octinclude_HEADERS += \
   libinterp/oct-conf.h \
   libinterp/version.h
 
 DIST_SRC += \
   libinterp/octave.cc \
   libinterp/version.cc \
   $(OCTAVE_VALUE_SRC) \
   $(PARSE_TREE_SRC) \
-  $(PARSER_SRC) \
-  $(COREFCN_SRC) \
-  $(TEX_PARSER_SRC)
+  $(COREFCN_SRC)
 
 include libinterp/parse-tree/module.mk
 include libinterp/octave-value/module.mk
 include libinterp/operators/module.mk
 include libinterp/template-inst/module.mk
 include libinterp/corefcn/module.mk
 include libinterp/dldfcn/module.mk
 
@@ -165,19 +163,17 @@ nodist_libinterp_liboctinterp_la_SOURCES
   libinterp/builtins.cc \
   libinterp/oct-conf.h \
   libinterp/oct-conf-features.h \
   libinterp/version.h
 
 libinterp_liboctinterp_la_LIBADD = \
   libinterp/octave-value/liboctave-value.la \
   libinterp/parse-tree/libparse-tree.la \
-  libinterp/parse-tree/libparser.la \
   libinterp/corefcn/libcorefcn.la \
-  libinterp/corefcn/libtex_parser.la \
   $(top_builddir)/liboctave/liboctave.la \
   $(LIBOCTINTERP_LINK_DEPS)
 
 # Increment these as needed and according to the rules in the libtool manual:
 libinterp_liboctinterp_current = 3
 libinterp_liboctinterp_revision = 0
 libinterp_liboctinterp_age = 0
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -26,32 +26,43 @@ interface but the Octave parser and lexe
 reentrant because both still use many global variables.  It should be
 safe to create a parser object and call it while another parser
 object is active (to parse a callback function while the main
 interactive parser is waiting for input, for example) if you take
 care to properly save and restore (typically with an unwind_protect
 object) relevant global values before and after the nested call.
 */
 
+%top {
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// This one needs to be global.
+#pragma GCC diagnostic ignored "-Wunused-function"
+
+// Disable this warning for code that is generated by flex, including
+// pattern rules.  Push the current state so we can restore the warning
+// state prior to functions we define at the bottom of the file.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+#endif
+
+}
+
 %option prefix = "octave_"
 %option noyywrap
 %option reentrant
 %option bison-bridge
 
 %option noyyalloc
 %option noyyrealloc
 %option noyyfree
 
-%top {
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-}
-
 %x COMMAND_START
 %s MATRIX_START
 
 %x INPUT_FILE_START
 
 %x BLOCK_COMMENT_START
 %x LINE_COMMENT_START
 
@@ -1718,18 +1729,39 @@ ANY_INCLUDING_NL (.|{NL})
         error ("invalid character '%s' (ASCII %d) near line %d, column %d",
                undo_string_escape (static_cast<char> (c)), c,
                curr_lexer->input_line_number, curr_lexer->current_input_column);
 
         return LEXICAL_ERROR;
       }
   }
 
+%{
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Disable this warning for code that is generated by flex.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+#endif
+%}
+
+%{
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Also disable this warning for functions that is generated by flex
+// after the pattern rules.
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#endif
+%}
+
 %%
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
+
 void *
 octave_alloc (yy_size_t size, yyscan_t)
 {
   return malloc (size);
 }
 
 void *
 octave_realloc (void *ptr, yy_size_t size, yyscan_t)
@@ -2706,17 +2738,17 @@ octave_base_lexer::handle_number (void)
       nread = sscanf (tmptxt, "%lx", &ival);
 
       value = static_cast<double> (ival);
     }
   else if (looks_like_bin (tmptxt, strlen (tmptxt)))
     {
       uint64_t ivalue = 0;
 
-      for (int i = 0; i < strlen (tmptxt); i++)
+      for (size_t i = 0; i < strlen (tmptxt); i++)
         {
           ivalue <<= 1;
           ivalue += static_cast<uint64_t> (tmptxt[i] == '1');
         }
 
       value = static_cast<double> (ivalue);
       nread = 1;  // Just to pass the assert stmt below
     }
diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -1,17 +1,11 @@
-PARSER_INC = \
+PARSE_TREE_INC = \
   libinterp/parse-tree/lex.h \
-  libinterp/parse-tree/parse.h
-
-PARSER_SRC = \
-  libinterp/parse-tree/lex.ll \
-  libinterp/parse-tree/oct-parse.yy
-
-PARSE_TREE_INC = \
+  libinterp/parse-tree/parse.h \
   libinterp/parse-tree/pt-all.h \
   libinterp/parse-tree/pt-arg-list.h \
   libinterp/parse-tree/pt-array-list.h \
   libinterp/parse-tree/pt-assign.h \
   libinterp/parse-tree/pt-binop.h \
   libinterp/parse-tree/pt-bp.h \
   libinterp/parse-tree/pt-cbinop.h \
   libinterp/parse-tree/pt-cell.h \
@@ -36,16 +30,18 @@ PARSE_TREE_INC = \
   libinterp/parse-tree/pt-select.h \
   libinterp/parse-tree/pt-stmt.h \
   libinterp/parse-tree/pt-unop.h \
   libinterp/parse-tree/pt-walk.h \
   libinterp/parse-tree/pt.h \
   libinterp/parse-tree/token.h
 
 PARSE_TREE_SRC = \
+  libinterp/parse-tree/lex.ll \
+  libinterp/parse-tree/oct-parse.yy \
   libinterp/parse-tree/pt-arg-list.cc \
   libinterp/parse-tree/pt-array-list.cc \
   libinterp/parse-tree/pt-assign.cc \
   libinterp/parse-tree/pt-binop.cc \
   libinterp/parse-tree/pt-bp.cc \
   libinterp/parse-tree/pt-cbinop.cc \
   libinterp/parse-tree/pt-cell.cc \
   libinterp/parse-tree/pt-check.cc \
@@ -86,31 +82,22 @@ libinterp/parse-tree/oct-gperf.h: libint
 	rm -f $@-t1
 
 libinterp/parse-tree/oct-parse.h: libinterp/parse-tree/oct-parse.cc
 
 libinterp/parse-tree/oct-parse.yy: libinterp/parse-tree/oct-parse.in.yy
 	$(AM_V_GEN)$(call subst-bison-api-decls,octave_)
 
 noinst_LTLIBRARIES += \
-  libinterp/parse-tree/libparse-tree.la \
-  libinterp/parse-tree/libparser.la
+  libinterp/parse-tree/libparse-tree.la
 
 libinterp_parse_tree_libparse_tree_la_SOURCES = $(PARSE_TREE_SRC)
 
 libinterp_parse_tree_libparse_tree_la_CPPFLAGS = $(libinterp_liboctinterp_la_CPPFLAGS)
 
-libinterp_parse_tree_libparse_tree_la_CFLAGS = $(AM_CFLAGS)	\
-$(WARN_CFLAGS)
+libinterp_parse_tree_libparse_tree_la_CFLAGS = $(AM_CFLAGS) $(WARN_CFLAGS)
 
 libinterp_parse_tree_libparse_tree_la_CXXFLAGS = $(AM_CXXFLAGS) $(WARN_CXXFLAGS)
 
-libinterp_parse_tree_libparser_la_SOURCES = $(PARSER_SRC)
-
-libinterp_parse_tree_libparser_la_CPPFLAGS = $(libinterp_liboctinterp_la_CPPFLAGS)
-
-libinterp_parse_tree_libparser_la_CXXFLAGS = \
-  $(filter-out -Wold-style-cast, $(AM_CXXFLAGS))
-
 libinterp_EXTRA_DIST += \
   libinterp/parse-tree/oct-parse.in.yy \
   libinterp/parse-tree/octave.gperf
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 // Parser for Octave.
 
 // C decarations.
 
 %{
+
 #define YYDEBUG 1
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cstdio>
@@ -116,16 +117,24 @@ static void yyerror (octave_base_parser&
       else \
         YYABORT; \
     } \
   while (0)
 
 #define lexer parser.lexer
 #define scanner lexer.scanner
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Disable this warning for code that is generated by Bison, including
+// grammar rules.  Push the current state so we can restore the warning
+// state prior to functions we define at the bottom of the file.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+#endif
+
 %}
 
 // Bison declarations.
 
 // The grammar currently has 14 shift/reduce conflicts.  Ensure that
 // we notice if that number changes.
 
 %expect 14
@@ -2000,16 +2009,21 @@ sep             : ','
 opt_sep         : // empty
                   { $$ = 0; }
                 | sep
                   { $$ = $1; }
                 ;
 
 %%
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
+
 // Generic error messages.
 
 #undef lexer
 
 static void
 yyerror (octave_base_parser& parser, const char *s)
 {
   parser.bison_error (s);
