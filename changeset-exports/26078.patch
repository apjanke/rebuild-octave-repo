# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542303283 18000
#      Thu Nov 15 12:34:43 2018 -0500
# Node ID 0549d088f50e8fa64d3027859c8df9401925daba
# Parent  31b443b5a6c1ae603080e102f8469aa6ff6e33ab
move get_dims_str from variables.cc to octave_value class

* ov.h, ov.cc (octave_value::get_dims_str): New function, moved here
from variables.cc.  Change all uses.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -934,37 +934,16 @@ print_descriptor (std::ostream& os, std:
           param_buf << param.line;
           i++;
         }
     }
 
   os << param_buf.str ();
 }
 
-// FIXME: This is a bit of a kluge.  We'd like to just use val.dims()
-// and if val is an object, expect that dims will call size if it is
-// overloaded by a user-defined method.  But there are currently some
-// unresolved const issues that prevent that solution from working.
-// This same kluge is done in symtab.cc (do_workspace_info), fix there too.
-
-std::string
-get_dims_str (const octave_value& val)
-{
-  octave_value tmp = val;
-
-  Matrix sz = tmp.size ();
-
-  dim_vector dv = dim_vector::alloc (sz.numel ());
-
-  for (octave_idx_type i = 0; i < dv.ndims (); i++)
-    dv(i) = sz(i);
-
-  return dv.str ();
-}
-
 class
 symbol_info_list
 {
 private:
   struct symbol_info
   {
     symbol_info (const octave::symbol_record& sr,
                  octave::symbol_record::context_id context,
@@ -982,17 +961,17 @@ private:
                 ? sr.varval (context) : expr_val);
 
       is_complex = varval.iscomplex ();
     }
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
-      std::string dims_str = get_dims_str (varval);
+      std::string dims_str = varval.get_dims_str ();
 
       auto i = params.begin ();
 
       octave::preserve_stream_state stream_state (os);
 
       while (i != params.end ())
         {
           whos_parameter param = *i;
@@ -1385,17 +1364,17 @@ public:
                 // rest = 0, total;
                 int rest = 0;
                 int first = param.first_parameter_length;
                 int total = param.parameter_length;
 
                 for (const auto& syminfo : lst)
                   {
                     octave_value val = syminfo.varval;
-                    std::string dims_str = get_dims_str (val);
+                    std::string dims_str = val.get_dims_str ();
                     int first1 = dims_str.find ('x');
                     int total1 = dims_str.length ();
                     int rest1 = total1 - first1;
                     rest = (rest1 > rest ? rest1 : rest);
                     first = (first1 > first ? first1 : first);
                     total = (total1 > total ? total1 : total);
                   }
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1553,16 +1553,36 @@ octave_value::assign (assign_op op, cons
         }
     }
   else
     error ("in computed assignment A OP= X, A must be defined first");
 
   return *this;
 }
 
+// FIXME: This is a bit of a kluge.  We'd like to just use val.dims()
+// and if val is an object, expect that dims will call size if it is
+// overloaded by a user-defined method.  But there are currently some
+// unresolved const issues that prevent that solution from working.
+
+std::string
+octave_value::get_dims_str (void) const
+{
+  octave_value tmp = *this;
+
+  Matrix sz = tmp.size ();
+
+  dim_vector dv = dim_vector::alloc (sz.numel ());
+
+  for (octave_idx_type i = 0; i < dv.ndims (); i++)
+    dv(i) = sz(i);
+
+  return dv.str ();
+}
+
 octave_idx_type
 octave_value::length (void) const
 {
   octave_idx_type retval = 0;
 
   const dim_vector dv = dims ();
 
   for (int i = 0; i < dv.ndims (); i++)
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -461,18 +461,19 @@ public:
 
   idx_vector index_vector (bool require_integers = false) const
   {
     return rep->index_vector (require_integers);
   }
 
   // Size.
 
-  dim_vector dims (void) const
-  { return rep->dims (); }
+  dim_vector dims (void) const { return rep->dims (); }
+
+  std::string get_dims_str (void) const;
 
   octave_idx_type rows (void) const { return rep->rows (); }
 
   octave_idx_type columns (void) const { return rep->columns (); }
 
   octave_idx_type length (void) const;
 
   int ndims (void) const { return rep->ndims (); }
