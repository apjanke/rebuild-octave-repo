# HG changeset patch
# User jwe
# Date 847679966 0
#      Mon Nov 11 02:39:26 1996 +0000
# Node ID 8ed4362aa0d6f4b294d3fa9fb9de481f8b2b2231
# Parent  06595bc7f2d0edc9a472b26b79cb094ed3ea18fb
[project @ 1996-11-11 02:35:04 by jwe]

diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/Array-b.cc
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 1996 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+// Instantiate Arrays of bool values.
+
+#include "Array.h"
+#include "Array.cc"
+
+template class Array<bool>;
+
+template void assign (Array<bool>&, const Array<bool>&);
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+Sun Nov 10 17:09:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* str-vec.h, str-vec.cc: Add constructors to make string vectors
+	from vectors of C strings.
+
+	* oct-glob.h, oct-glob.cc (glob_match): Allow pat to be a string
+	vector.
+	(glob_match::match): Allow match string to be a string vector.
+	(glob_match::glob): New function.
+
+	* chMatrix.cc (charMatrix::row_as_string): New arg, strip_ws.
+
+	* Array-b.cc: New file.
+	* Makefile.in (TI_SRC): Add it to the list.
+
 Fri Nov  8 18:09:12 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* file-ops.cc: Change #include "" to #include <> for safe-lstat.h
 	and safe-stat.h, to avoid getting them from $srcdir when we really
 	want the version from the build directory.  (Maybe this should be
 	done for all the include files, not just those that are
 	auto-generated?  Hmm.)
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -42,18 +42,18 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	lo-ieee.h lo-mappers.h lo-utils.h mach-info.h oct-alloc.h \
 	oct-cmplx.h oct-glob.h oct-math.h oct-term.h pathsearch.h \
 	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h \
 	$(MATRIX_INC)
 
 TEMPLATE_SRC := Array.cc Array2.cc Array3.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MDiagArray2.cc base-lu.cc
 
-TI_SRC := Array-C.cc Array-ch.cc Array-i.cc Array-d.cc Array-s.cc \
-	Array-str.cc \
+TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
+	Array-s.cc Array-str.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC := Array-flags.cc CColVector.cc CDiagMatrix.cc CMatrix.cc \
 	CRowVector.cc CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc \
 	CmplxHESS.cc CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc \
 	CmplxSVD.cc EIG.cc MArray-misc.cc chMatrix.cc dColVector.cc \
 	dDiagMatrix.cc dMatrix.cc dRowVector.cc dbleAEPBAL.cc \
 	dbleCHOL.cc dbleDET.cc dbleGEPBAL.cc dbleHESS.cc dbleLU.cc \
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -110,34 +110,46 @@ charMatrix::insert (const char *s, int r
 charMatrix&
 charMatrix::insert (const charMatrix& a, int r, int c)
 {
   Array2<char>::insert (a, r, c);
   return *this;
 }
 
 string
-charMatrix::row_as_string (int r) const
+charMatrix::row_as_string (int r, bool strip_ws = false) const 
 {
   if (r < 0 || r >= rows ())
     {
       (*current_liboctave_error_handler) ("range error for row_as_string");
       return 0;
     }
 
   int nc = cols ();
 
   string retval (nc, '\0');
 
   for (int i = 0; i < nc; i++)
     retval[i] = elem (r, i);
 
-  while (--nc >= 0)
-    if (retval[nc])
-      break;
+  if (strip_ws)
+    {
+      while (--nc >= 0)
+	{
+	  char c = retval[nc];
+	  if (c && c != ' ')
+	    break;
+	}
+    }
+  else
+    {
+      while (--nc >= 0)
+	if (retval[nc])
+	  break;
+    }
 
   retval.resize (nc+1);
 
   return retval;
 }
 
 charMatrix
 charMatrix::transpose (void) const
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -62,17 +62,17 @@ public:
   bool operator == (const charMatrix& a) const;
   bool operator != (const charMatrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
-  string row_as_string (int r) const;
+  string row_as_string (int r, bool strip_trailing_whitespace = false) const;
 
 #if 0
   Matrix& insert (const RowVector& a, int r, int c);
   Matrix& insert (const ColumnVector& a, int r, int c);
   Matrix& insert (const DiagMatrix& a, int r, int c);
 
   Matrix& fill (char val);
   Matrix& fill (char val, int r1, int c1, int r2, int c2);
diff --git a/liboctave/oct-glob.cc b/liboctave/oct-glob.cc
--- a/liboctave/oct-glob.cc
+++ b/liboctave/oct-glob.cc
@@ -20,24 +20,117 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <fnmatch.h>
+#include <glob.h>
+
+#include <iostream.h>
 
 #include <string>
 
+#include "file-ops.h"
 #include "oct-glob.h"
+#include "str-vec.h"
 
 bool
-glob_match::match (const string& s)
+glob_match::match (const string& s, match_type mt)
+{
+  int npat = pat.length ();
+
+  const char *str = s.c_str ();
+
+  if (mt == all)
+    {
+      for (int i = 0; i < npat; i++)
+	if (fnmatch (pat(i).c_str (), str, flags) == FNM_NOMATCH)
+	  return false;
+
+      return true;
+    }
+  else
+    {
+      for (int i = 0; i < npat; i++)
+	if (fnmatch (pat(i).c_str (), str, flags) != FNM_NOMATCH)
+	  return true;
+
+      return false;
+    }
+}
+
+Array<bool>
+glob_match::match (const string_vector& s, match_type mt)
+{
+  int n = s.length ();
+
+  Array<bool> retval (n);
+
+  for (int i = 0; i < n; i++)
+    retval(i) = match (s[i], mt);
+
+  return retval;
+}
+
+static bool
+single_match_exists (const string& file)
 {
-  return fnmatch (pat.c_str (), s.c_str (), flags) != FNM_NOMATCH;
+  file_stat s (file);
+
+  return s.exists ();
+}
+
+string_vector
+glob_match::glob (void)
+{
+  string_vector retval;
+
+  int npat = pat.length ();
+
+  int k = 0;
+
+  for (int i = 0; i < npat; i++)
+    {
+      string xpat = pat(i);
+
+      if (! xpat.empty ())
+	{
+	  glob_t glob_info;
+
+	  int err = ::glob (xpat.c_str (), GLOB_NOSORT, 0, &glob_info);
+
+	  if (! err)
+	    {
+	      int n = glob_info.gl_pathc;
+
+	      char **matches = glob_info.gl_pathv;
+
+	      // XXX FIXME XXX -- we shouldn't have to check to see if
+	      // a single match exists, but it seems that glob() won't
+	      // check for us unless the pattern contains globbing
+	      // characters.  Hmm.
+
+	      if (n > 1
+		  || (n == 1 && single_match_exists (string (matches[0]))))
+		{
+		  retval.resize (k+n);
+
+		  for (int j = 0; j < n; j++)
+		    retval[k++] = matches[j];
+		}
+
+	      globfree (&glob_info);
+	    }
+	}
+    }
+
+  return retval.qsort ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
+
diff --git a/liboctave/oct-glob.h b/liboctave/oct-glob.h
--- a/liboctave/oct-glob.h
+++ b/liboctave/oct-glob.h
@@ -20,54 +20,73 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_oct_glob_h)
 #define octave_oct_glob_h 1
 
 #include <string>
 
+#include "Array.h"
+#include "str-vec.h"
+
 class
 glob_match
 {
 public:
 
   enum opts
     {
       pathname = 1,  // No wildcard can ever match `/'.
       noescape = 2,  // Backslashes don't quote special chars.
       period = 4     // Leading `.' is matched only explicitly.
    };
 
+  enum match_type
+    {
+      any = 2,  // Match any pattern.
+      all = 2   // Must match all patterns.
+    };
+
   glob_match (const string& p = string (),
 	      unsigned int f = pathname|noescape|period)
     : pat (p), flags (f) { }
 
+  glob_match (const string_vector& p = string_vector (),
+	      unsigned int f = pathname|noescape|period)
+    : pat (p), flags (f) { }
+
   glob_match (const glob_match& gm) : pat (gm.pat), flags (gm.flags) { }
 
   glob_match& operator = (const glob_match& gm)
     {
       if (this != &gm)
 	{
 	  pat = gm.pat;
 	  flags = gm.flags;
 	}
       return *this;
     }
 
   ~glob_match (void) { }
 
   void set_pattern (const string& p) { pat = p; }
 
-  bool match (const string&);
+  void set_pattern (const string_vector& p) { pat = p; }
+
+  bool match (const string&, match_type mt = any);
+
+  Array<bool> match (const string_vector&, match_type mt = any);
+
+  string_vector glob (void);
 
 private:
 
-  // Globbing pattern.
-  string pat;
+  // Globbing pattern(s).
+  string_vector pat;
 
   // Option flags.
   unsigned int flags;
 };
 
 #endif
 
 /*
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -26,16 +26,42 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include <iostream.h>
 
 #include "oct-term.h"
 #include "str-vec.h"
 
+// Create a string vector from a NULL terminated list of C strings.
+
+string_vector::string_vector (const char * const *s)
+  : Array<string> ()
+{
+  int n = 0;
+
+  while (*s++)
+    n++;
+
+  resize (n);
+
+  for (int i = 0; i < n; i++)
+    elem (i) = s[i];
+}
+
+// Create a string vector from up to N C strings.  Assumes that N is
+// nonnegative.
+
+string_vector::string_vector (const char * const *s, int n)
+  : Array<string> (n)
+{
+  for (int i = 0; i < n; i++)
+    elem (i) = s[i];
+}
+
 // Format a list in neat columns.  Mostly stolen from GNU ls.
 
 ostream&
 string_vector::list_in_columns (ostream& os) const
 {
   // Compute the maximum name length.
 
   int max_name_length = 0;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -48,16 +48,20 @@ public:
   string_vector (int n) : Array<string> (n) { }
 
   string_vector (const char *s) : Array<string> (1, s) { }
 
   string_vector (const string& s) : Array<string> (1, s) { }
 
   string_vector (const string_vector& s) : Array<string> (s) { }
 
+  string_vector (const char * const *s);
+
+  string_vector (const char * const *s, int n);
+
   string_vector& operator = (const string_vector& s)
     {
       if (this != &s)
 	Array<string>::operator = (s);
 
       return *this;
     }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -140,20 +140,20 @@ charMatrix
 octave_base_value::char_matrix_value (bool) const
 {
   charMatrix retval;
   gripe_wrong_type_arg ("octave_base_value::char_matrix_value()",
 			type_name ());
   return retval;
 }
 
-charMatrix
+string_vector
 octave_base_value::all_strings (void) const
 {
-  charMatrix retval;
+  string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
   return retval;
 }
 
 string
 octave_base_value::string_value (void) const
 {
   string retval;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -137,17 +137,17 @@ public:
   Matrix matrix_value (bool frc_str_conv = false) const;
 
   Complex complex_value (bool frc_str_conv = false) const;
 
   ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const;
 
   charMatrix char_matrix_value (bool frc_str_conv = false) const;
 
-  charMatrix all_strings (void) const;
+  string_vector all_strings (void) const;
 
   string string_value (void) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
   octave_value not (void) const;
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -184,20 +184,27 @@ octave_char_matrix_str::matrix_value (bo
   if (flag)
     retval = Matrix (matrix);
   else
     gripe_invalid_conversion ("string", "real matrix");
 
   return retval;
 }
 
-charMatrix
+string_vector
 octave_char_matrix_str::all_strings (void) const
 {
-  return matrix;
+  int n = matrix.rows ();
+
+  string_vector retval (n);
+
+  for (int i = 0; i < n; i++)
+    retval[i] = matrix.row_as_string (i, true);
+
+  return retval;
 }
 
 string
 octave_char_matrix_str::string_value (void) const
 {
   return matrix.row_as_string (0);  // XXX FIXME??? XXX
 }
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -93,17 +93,17 @@ public:
 
   bool valid_as_scalar_index (void) const;
   bool valid_as_zero_index (void) const;
 
   bool is_true (void) const;
 
   Matrix matrix_value (bool = false) const;
 
-  charMatrix all_strings (void) const;
+  string_vector all_strings (void) const;
 
   string string_value (void) const;
 
   void print (ostream& os, bool pr_as_read_syntax = false);
 
   int type_id (void) const { return t_id; }
 
   string type_name (void) const { return t_name; }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -310,17 +310,17 @@ public:
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
-  virtual charMatrix all_strings (void) const
+  virtual string_vector all_strings (void) const
     { return rep->all_strings (); }
 
   virtual string string_value (void) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -549,25 +549,45 @@ oct_tilde_expand (const string& name)
       char *tmp = tilde_expand (name.c_str ());
       retval = tmp;
       delete [] tmp;
     }
 
   return retval;
 }
 
+// A vector version of the above.
+
+string_vector
+oct_tilde_expand (const string_vector& names)
+{
+  string_vector retval;
+
+  if (! error_state)
+    {
+      int n = names.length ();
+
+      retval.resize (n);
+
+      for (int i = 0; i < n; i++)
+	retval[i] = oct_tilde_expand (names[i]);
+    }
+
+  return retval;
+}
+
 DEFUN (tilde_expand, args, ,
   "tilde_expand (STRING): perform tilde expansion on STRING")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    retval = oct_tilde_expand (args(0).string_value ());
+    retval = oct_tilde_expand (args(0).all_strings ());
   else
     print_usage ("tilde_expand");
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/sysdep.h b/src/sysdep.h
--- a/src/sysdep.h
+++ b/src/sysdep.h
@@ -35,16 +35,17 @@ extern int kbhit (void);
 extern string octave_getcwd (void);
 extern int octave_chdir (const string&);
 
 #if !defined (HAVE_GETHOSTNAME) && defined (HAVE_SYS_UTSNAME_H)
 extern int gethostname (char *, int);
 #endif
 
 extern string oct_tilde_expand (const string&);
+extern string_vector oct_tilde_expand (const string_vector&);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
