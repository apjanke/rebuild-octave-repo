# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1521816239 -3600
#      Fri Mar 23 15:43:59 2018 +0100
# Branch stable
# Node ID baa7e37453b1e25b5d0aaaf7f84d3e8de04560cb
# Parent  a281de7620d70d51382692e350eaa1652e17b664
Added more tests for betainc and expint.

* betainc.m: Added to show that bug #34405 is solved.

* expint.m: Added tests to show that bugs #53351 and #47738 are solved.

diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -207,16 +207,20 @@ endfunction
 %!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -3e-13);
 
 ## Test trivial values
 %!test
 %! [a,b] = ndgrid (linspace (1e-4, 100, 20), linspace (1e-4, 100, 20));
 %! assert (betainc (0, a, b), zeros (20));
 %! assert (betainc (1, a, b), ones (20));
 
+%!test <34405>
+%! assert (betainc (NaN, 1, 2), NaN);
+%! assert (betainc (0.5, 1, Inf), NaN);
+
 ## Test input validation
 %!error betainc ()
 %!error betainc (1)
 %!error betainc (1,2)
 %!error betainc (1,2,3,4,5)
 %!error <must be of common size or scalars> betainc (ones (2,2), ones (1,2), 1)
 %!error <all inputs must be real> betainc (0.5i, 1, 2)
 %!error <all inputs must be real> betainc (0, 1i, 1)
diff --git a/scripts/specfun/expint.m b/scripts/specfun/expint.m
--- a/scripts/specfun/expint.m
+++ b/scripts/specfun/expint.m
@@ -233,16 +233,25 @@ endfunction
 
 ## Exceptional values (-Inf, Inf, NaN, 0, 0.37250741078)
 %!test
 %! x = [-Inf; Inf; NaN; 0; -0.3725074107813668];
 %! y_exp = [-Inf - i*pi; 0; NaN; Inf; 0 - i*pi];
 %! y = expint (x);
 %! assert (y, y_exp, 5*eps);
 
+%!test <53351>
+%! assert (expint (32.5 + 1i),
+%!         1.181108930758065e-16 - 1.966348533426658e-16i, -4*eps);
+%! assert (expint (44 + 1i),
+%!         9.018757389858152e-22 - 1.475771020004195e-21i, -4*eps);
+
+%!test <47738>
+%! assert (expint (10i), 0.0454564330044554 + 0.0875512674239774i, -4*eps);
+
 ## Test preservation or conversion of the class
 %!assert (class (expint (single (1))), "single")
 %!assert (class (expint (int8 (1))), "double")
 %!assert (class (expint (int16 (1))), "double")
 %!assert (class (expint (int32 (1))), "double")
 %!assert (class (expint (int64 (1))), "double")
 %!assert (class (expint (uint8 (1))), "double")
 %!assert (class (expint (uint16 (1))), "double")
