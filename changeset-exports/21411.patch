# HG changeset patch
# User Rik <rik@octave.org>
# Date 1457376373 28800
#      Mon Mar 07 10:46:13 2016 -0800
# Node ID 9f7282acc30f546e7f1f23b21bb45412bfbe957f
# Parent  0c2ff0876a0fbc92d2754529dd91692853e68388
Fix segfault caused by clang processing of GCC noreturn attribute.

* idx-vector.h (as_array): Remove OCTAVE_NORETURN attribute from prototype.

* idx-vector.cc: Add return statement to function to silence compiler warning.

diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -54,16 +54,19 @@ err_index_out_of_range (void)
     ("internal error: idx_vector index out of range");
 }
 
 Array<octave_idx_type>
 idx_vector::idx_base_rep::as_array (void)
 {
   (*current_liboctave_error_handler)
     ("internal error: as_array not allowed for this index class");
+
+  // Never actually executed, but required to silence compiler warning
+  return Array<octave_idx_type> ();
 }
 
 
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -100,17 +100,17 @@ private:
     virtual bool is_colon_equiv (octave_idx_type) const { return false; }
 
     // The original dimensions of object (used when subscribing by matrices).
     virtual dim_vector orig_dimensions (void) const { return dim_vector (); }
 
     // i/o
     virtual std::ostream& print (std::ostream& os) const = 0;
 
-    OCTAVE_NORETURN virtual Array<octave_idx_type> as_array (void);
+    virtual Array<octave_idx_type> as_array (void);
 
     octave_refcount<int> count;
 
     bool err;
 
   private:
 
     // No copying!
