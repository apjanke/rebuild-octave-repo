# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263820448 -3600
#      Mon Jan 18 14:14:08 2010 +0100
# Node ID ab80681c44d9cc1c3cb82689260690a9f1a2c48b
# Parent  e68431e60e3dbd15577cf18b2e2181fd1a900ae1
optimize third powers

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xpow.cc (xpow (const NDArray&, double), xpow (const FloatNDArray&,
+	float)): Optimize also the x.^3 case.
+
 2010-01-18  David Grundberg  <davidg@cs.umu.se>
 
 	* mex.cc (mexPrintf): Change signature.
 	* mexproto.h (mexPrintf): Dito.
 
 2010-01-18  David Grundberg  <davidg@cs.umu.se>
 
 	* mexproto.h (mxSetDimensions): Change signature.
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -1195,28 +1195,33 @@ elem_xpow (const NDArray& a, double b)
               result(i) = std::pow (a(i), b);
             }
 
           retval = result;
         }
     }
   else
     {
-      NDArray result (a.dims ());
+      NoAlias<NDArray> result (a.dims ());
 
       int ib = static_cast<int> (b);
       if (ib == 2)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = a(i) * a(i);
+            result(i) = a(i) * a(i);
+        }
+      else if (ib == 3)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result(i) = a(i) * a(i) * a(i);
         }
       else if (ib == -1)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = 1.0 / a(i);
+            result(i) = 1.0 / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               OCTAVE_QUIT;
               result(i) = std::pow (a(i), ib);
             }
@@ -2510,28 +2515,33 @@ elem_xpow (const FloatNDArray& a, float 
               result(i) = std::pow (a(i), b);
             }
 
           retval = result;
         }
     }
   else
     {
-      FloatNDArray result (a.dims ());
+      NoAlias<FloatNDArray> result (a.dims ());
 
       int ib = static_cast<int> (b);
       if (ib == 2)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = a(i) * a(i);
+            result(i) = a(i) * a(i);
+        }
+      else if (ib == 3)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result(i) = a(i) * a(i) * a(i);
         }
       else if (ib == -1)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
-            result.xelem (i) = 1.0f / a(i);
+            result(i) = 1.0f / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               OCTAVE_QUIT;
               result(i) = std::pow (a(i), ib);
             }
