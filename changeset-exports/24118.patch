# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1506894753 25200
#      Sun Oct 01 14:52:33 2017 -0700
# Node ID f87c9f5c0f43cd50859750f3aa18ba036c309d5a
# Parent  01df6b5209f489780e007c012d21b3a1b7d47005
maint: silence several compiler warnings when building for Windows

* sighandlers.cc (w32_interrupt_manager::do_jump_to_enclosing_context): Use
reinterpret_cast to silence compiler warning from -Wold-style-cast.
* welcome-wizard.cc (welcome_wizard::welcome_wizard): Likewise.

* oct-procbuf.cc (octave_procbuf_list): Only define on systems that use it to
silence compiler warning from -Wunused-variable.

* sysdep.cc (w32_shell_execute): Delete empty unused function to silence several
compiler warnings.  (raw_mode): Use octave_unused_parameter to silence compiler
warnings from -Wunused-parameter on certain systems.

* cdisplay.c (octave_get_display_info): Use octave_unused_parameter to silence
compiler warning from -Wunused-parameter on certain systems.
* oct-group.cc (octave::sys::group::getgrgid, octave::sys::group::getgrnam,
octave::sys::group::group): Likewise.
* oct-passwd.cc (octave::sys::password::getpwuid,
octave::sys::password::getpwnam, octave::sys::password::password): Likewise.
* signal-wrappers.c (octave_kill_wrapper, block_or_unblock_signal): Likewise.
* wait-for-input.c (octave_wait_for_input): Likewise.

* unistd-wrappers.c (prepare_spawn): Add const-qualifier on argument to silence
compiler warning from -Wdiscarded-qualifiers.

* stat-wrappers.c: Use pragma to disable -Wunused-parameter warnings for wrapper
functions around macros that may discard their arguments on certain systems.

* wait-wrappers.c Use pragma to disable -Wunused-parameter warnings for wrapper
functions around macros that may discard their arguments on certain systems.
Reorder functions to group related wrappers.
(octave_waitpid_wrapper): Use octave_unused_parameter to silence compiler
warning from -Wunused-parameter on certain systems.

diff --git a/libgui/src/welcome-wizard.cc b/libgui/src/welcome-wizard.cc
--- a/libgui/src/welcome-wizard.cc
+++ b/libgui/src/welcome-wizard.cc
@@ -63,17 +63,17 @@ welcome_wizard::welcome_wizard (QWidget 
   setEnabled (true);
   resize (600, 480);
   setMinimumSize (QSize (600, 480));
 
   show_page ();
 
 #if defined (OCTAVE_USE_WINDOWS_API)
   // HACK to forceshow of dialog if started minimized
-  ShowWindow ((HWND)winId (), SW_SHOWNORMAL);
+  ShowWindow (reinterpret_cast<HWND> (winId ()), SW_SHOWNORMAL);
 #endif
 }
 
 void
 welcome_wizard::handle_web_connect_option (int state)
 {
   m_allow_web_connect_state = state == Qt::Checked;
 }
diff --git a/libinterp/corefcn/cdisplay.c b/libinterp/corefcn/cdisplay.c
--- a/libinterp/corefcn/cdisplay.c
+++ b/libinterp/corefcn/cdisplay.c
@@ -52,16 +52,18 @@ octave_get_display_info (const char *dpy
                          double *rx, double *ry, int *dpy_avail)
 {
   const char *msg = NULL;
 
   *dpy_avail = 0;
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
+  octave_unused_parameter (dpy_name);
+
   HDC hdc = GetDC (0);
 
   if (hdc)
     {
       *dp = GetDeviceCaps (hdc, BITSPIXEL);
 
       *ht = GetDeviceCaps (hdc, VERTRES);
       *wd = GetDeviceCaps (hdc, HORZRES);
@@ -74,16 +76,18 @@ octave_get_display_info (const char *dpy
 
       *dpy_avail = 1;
     }
   else
     msg = "no graphical display found";
 
 #elif defined (HAVE_FRAMEWORK_CARBON)
 
+  octave_unused_parameter (dpy_name);
+
   CGDirectDisplayID display = CGMainDisplayID ();
 
   if (display)
     {
 #if defined (HAVE_CARBON_CGDISPLAYBITSPERPIXEL)
 
       *dp = CGDisplayBitsPerPixel (display);
 
@@ -158,16 +162,17 @@ octave_get_display_info (const char *dpy
 
       *dpy_avail = 1;
     }
   else
     msg = "unable to open X11 DISPLAY";
 
 #else
 
+  octave_unused_parameter (dpy_name);
   octave_unused_parameter (ht);
   octave_unused_parameter (wd);
   octave_unused_parameter (dp);
   octave_unused_parameter (rx);
   octave_unused_parameter (ry);
 
   msg = "no graphical display found";
 
diff --git a/libinterp/corefcn/oct-procbuf.cc b/libinterp/corefcn/oct-procbuf.cc
--- a/libinterp/corefcn/oct-procbuf.cc
+++ b/libinterp/corefcn/oct-procbuf.cc
@@ -54,18 +54,23 @@ along with Octave; see the file COPYING.
 
 #if ! defined (SHELL_PATH)
 #  define SHELL_PATH "/bin/sh"
 #endif
 
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
 
+#if (! (defined (__CYGWIN__) || defined (__MINGW32__) || defined (_MSC_VER)) \
+     && defined (HAVE_UNISTD_H))
+
 static octave_procbuf *octave_procbuf_list = nullptr;
 
+#endif
+
 #if ! defined (BUFSIZ)
 #  define BUFSIZ 1024
 #endif
 
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
 {
 #if defined (__CYGWIN__) || defined (__MINGW32__) || defined (_MSC_VER)
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -152,19 +152,19 @@ namespace octave
 
           CONTEXT threadContext;
 
           SuspendThread (thread);
           threadContext.ContextFlags = CONTEXT_CONTROL;
           GetThreadContext (thread, &threadContext);
 
 #if (defined (__MINGW64__) || defined (_WIN64))
-          threadContext.Rip = (DWORD64) jump_to_enclosing_context_sync;
+          threadContext.Rip = reinterpret_cast<DWORD64> (jump_to_enclosing_context_sync);
 #else
-          threadContext.Eip = (DWORD) jump_to_enclosing_context_sync;
+          threadContext.Eip = reinterpret_cast<DWORD> (jump_to_enclosing_context_sync);
 #endif
 
           SetThreadContext (thread, &threadContext);
 
           ResumeThread (thread);
         }
     }
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -159,20 +159,16 @@ w32_set_octave_home (void)
 static void
 w32_init (void)
 {
   w32_set_octave_home ();
 
   octave::command_editor::prefer_env_winsize (true);
 }
 
-static bool
-w32_shell_execute (const std::string& file)
-{ }
-
 #endif
 
 // Set app id if we have the SetCurrentProcessExplicitAppUserModelID
 // available (>= Win7).  FIXME: Could we check for existence of this
 // function in the configure script instead of dynamically loading
 // shell32.dll?
 
 void
@@ -456,16 +452,18 @@ raw_mode (bool on, bool wait)
 
         s = save_term;
       }
 
     ioctl (tty_fd, TCSETAW, &s);
   }
 #elif defined (HAVE_SGTTY_H)
   {
+    octave_unused_parameter (wait);
+
     struct sgttyb s;
     static struct sgttyb save_term;
 
     if (on)
       {
         // Get terminal modes.
 
         ioctl (tty_fd, TIOCGETP, &s);
@@ -487,16 +485,19 @@ raw_mode (bool on, bool wait)
         // Restore saved modes.
 
         s = save_term;
       }
 
     ioctl (tty_fd, TIOCSETN, &s);
   }
 #else
+
+  octave_unused_parameter (wait);
+
   warn_disabled_feature ("", "raw mode console I/O");
 
   // Make sure the current mode doesn't toggle.
   on = curr_on;
 #endif
 
   curr_on = on;
 }
diff --git a/liboctave/system/oct-group.cc b/liboctave/system/oct-group.cc
--- a/liboctave/system/oct-group.cc
+++ b/liboctave/system/oct-group.cc
@@ -112,16 +112,18 @@ namespace octave
 
     group
     group::getgrgid (gid_t gid, std::string& msg)
     {
 #if defined (HAVE_GETGRGID)
       msg = "";
       return group (::getgrgid (gid), msg);
 #else
+      octave_unused_parameter (gid);
+
       msg = NOT_SUPPORTED ("getgruid");
       return group ();
 #endif
     }
 
     group
     group::getgrnam (const std::string& nm)
     {
@@ -131,16 +133,18 @@ namespace octave
 
     group
     group::getgrnam (const std::string& nm, std::string& msg)
     {
 #if defined (HAVE_GETGRNAM)
       msg = "";
       return group (::getgrnam (nm.c_str ()), msg);
 #else
+      octave_unused_parameter (nm);
+
       msg = NOT_SUPPORTED ("getgrnam");
       return group ();
 #endif
     }
 
     int
     group::setgrent (void)
     {
@@ -216,13 +220,15 @@ namespace octave
 
               for (int i = 0; i < k; i++)
                 m_mem[i] = tmp[i];
             }
 
           valid = true;
         }
 #else
+      octave_unused_parameter (p);
+
       msg = NOT_SUPPORTED ("group functions");
 #endif
     }
   }
 }
diff --git a/liboctave/system/oct-passwd.cc b/liboctave/system/oct-passwd.cc
--- a/liboctave/system/oct-passwd.cc
+++ b/liboctave/system/oct-passwd.cc
@@ -138,16 +138,18 @@ namespace octave
 
     password
     password::getpwuid (uid_t uid, std::string& msg)
     {
 #if defined (HAVE_GETPWUID)
       msg = "";
       return password (::getpwuid (uid), msg);
 #else
+      octave_unused_parameter (uid);
+
       msg = NOT_SUPPORTED ("getpwuid");
       return password ();
 #endif
     }
 
     password
     password::getpwnam (const std::string& nm)
     {
@@ -157,16 +159,18 @@ namespace octave
 
     password
     password::getpwnam (const std::string& nm, std::string& msg)
     {
 #if defined (HAVE_GETPWNAM)
       msg = "";
       return password (::getpwnam (nm.c_str ()), msg);
 #else
+      octave_unused_parameter (nm);
+
       msg = NOT_SUPPORTED ("getpwnam");
       return password ();
 #endif
     }
 
     int
     password::setpwent (void)
     {
@@ -224,13 +228,15 @@ namespace octave
           m_gid = pw->pw_gid;
           m_gecos = pw->pw_gecos;
           m_dir = pw->pw_dir;
           m_shell = pw->pw_shell;
 
           valid = true;
         }
 #else
+      octave_unused_parameter (p);
+
       msg = NOT_SUPPORTED ("password functions");
 #endif
     }
   }
 }
diff --git a/liboctave/wrappers/signal-wrappers.c b/liboctave/wrappers/signal-wrappers.c
--- a/liboctave/wrappers/signal-wrappers.c
+++ b/liboctave/wrappers/signal-wrappers.c
@@ -43,16 +43,20 @@ along with Octave; see the file COPYING.
 #include "signal-wrappers.h"
 
 int
 octave_kill_wrapper (pid_t pid, int signum)
 {
 #if defined (HAVE_KILL)
   return kill (pid, signum);
 #else
+
+  octave_unused_parameter (pid);
+  octave_unused_parameter (signum);
+
   return -1;
 #endif
 }
 
 char *
 octave_strsignal_wrapper (int signum)
 {
   return strsignal (signum);
@@ -446,16 +450,21 @@ block_or_unblock_signal (int how, int si
 
   sigset_t signal_mask;
 
   sigemptyset (&signal_mask);
 
   sigaddset (&signal_mask, sig);
 
   pthread_sigmask (how, &signal_mask, 0);
+#else
+
+  octave_unused_parameter (how);
+  octave_unused_parameter (sig);
+
 #endif
 }
 
 void
 octave_block_interrupt_signal (void)
 {
   block_or_unblock_signal (SIG_BLOCK, SIGINT);
 }
diff --git a/liboctave/wrappers/stat-wrappers.c b/liboctave/wrappers/stat-wrappers.c
--- a/liboctave/wrappers/stat-wrappers.c
+++ b/liboctave/wrappers/stat-wrappers.c
@@ -137,16 +137,24 @@ octave_fstat_wrapper (int fid, mode_t *m
   int status = fstat (fid, &buf);
 
   assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
                       atime, mtime, ctime, rdev, blksize, blocks);
 
   return status;
 }
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Disable the unused parameter warning for the following wrapper functions.
+// The <sys/stat.h> header provided by gnulib may define some of the S_IS*
+// macros to expand to a constant and ignore the parameter.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#endif
+
 bool
 octave_is_blk_wrapper (mode_t mode)
 {
 #if defined (S_ISBLK)
   return S_ISBLK (mode);
 #else
   return false;
 #endif
@@ -207,16 +215,21 @@ octave_is_sock_wrapper (mode_t mode)
 {
 #if defined (S_ISSOCK)
   return S_ISSOCK (mode);
 #else
   return false;
 #endif
 }
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
+
 bool
 octave_have_struct_stat_st_rdev (void)
 {
 #if defined (HAVE_STRUCT_STAT_ST_RDEV)
   return true;
 #else
   return false;
 #endif
diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -136,17 +136,17 @@ octave_dup2_wrapper (int fd1, int fd2)
 
 #define SHELL_SPECIAL_CHARS \
   "\"\\ \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
 
 #define SHELL_SPACE_CHARS \
   " \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
 
 static char **
-prepare_spawn (char **argv)
+prepare_spawn (char *const *argv)
 {
   size_t argc;
   char **new_argv;
   size_t i;
 
   /* Count number of arguments.  */
   for (argc = 0; argv[argc] != NULL; argc++)
     ;
diff --git a/liboctave/wrappers/wait-for-input.c b/liboctave/wrappers/wait-for-input.c
--- a/liboctave/wrappers/wait-for-input.c
+++ b/liboctave/wrappers/wait-for-input.c
@@ -46,13 +46,15 @@ octave_wait_for_input (int fid)
       fd_set set;
 
       FD_ZERO (&set);
       FD_SET (fid, &set);
 
       retval = select (FD_SETSIZE, &set, 0, 0, 0);
     }
 #else
+  octave_unused_parameter (fid);
+
   retval = 1;
 #endif
 
   return retval;
 }
diff --git a/liboctave/wrappers/wait-wrappers.c b/liboctave/wrappers/wait-wrappers.c
--- a/liboctave/wrappers/wait-wrappers.c
+++ b/liboctave/wrappers/wait-wrappers.c
@@ -41,44 +41,74 @@ along with Octave; see the file COPYING.
 #if ! defined (WNOHANG)
 #  define WNOHANG 0
 #endif
 
 #if ! defined (WUNTRACED)
 #  define WUNTRACED 0
 #endif
 
+#if ! defined (WIFCONTINUED)
+#  define WIFCONTINUED(x) false
+#endif
+
 pid_t
 octave_waitpid_wrapper (pid_t pid, int *statusp, int options)
 {
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
+
+  octave_unused_parameter (pid);
+  octave_unused_parameter (options);
+
   // gnulib's waitpid replacement currently uses _cwait, which
   // apparently only works with console applications.
   *statusp = 0;
   return -1;
 #else
   return waitpid (pid, statusp, options);
 #endif
 }
 
 int
 octave_wcontinue_wrapper (void)
 {
   return WCONTINUE;
 }
 
 int
+octave_wnohang_wrapper (void)
+{
+  return WNOHANG;
+}
+
+int
+octave_wuntraced_wrapper (void)
+{
+  return WUNTRACED;
+}
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Disable the unused parameter warning for the following wrapper functions.
+// The <sys/wait.h> header provided by gnulib may define some of the W*
+// macros to expand to a constant and ignore the parameter.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#endif
+
+int
 octave_wcoredump_wrapper (int status)
 {
   return WCOREDUMP (status);
 }
 
-#if ! defined (WIFCONTINUED)
-#  define WIFCONTINUED(x) false
-#endif
+int
+octave_wexitstatus_wrapper (int status)
+{
+  return WEXITSTATUS (status);
+}
 
 bool
 octave_wifcontinued_wrapper (int status)
 {
   return WIFCONTINUED (status);
 }
 
 bool
@@ -95,36 +125,23 @@ octave_wifsignaled_wrapper (int status)
 
 bool
 octave_wifstopped_wrapper (int status)
 {
   return WIFSTOPPED (status);
 }
 
 int
-octave_wexitstatus_wrapper (int status)
-{
-  return WEXITSTATUS (status);
-}
-
-int
-octave_wnohang_wrapper (void)
-{
-  return WNOHANG;
-}
-
-int
 octave_wstopsig_wrapper (int status)
 {
   return WSTOPSIG (status);
 }
 
 int
 octave_wtermsig_wrapper (int status)
 {
   return WTERMSIG (status);
 }
 
-int
-octave_wuntraced_wrapper (void)
-{
-  return WUNTRACED;
-}
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+// Restore prevailing warning state for remainder of the file.
+#pragma GCC diagnostic pop
+#endif
