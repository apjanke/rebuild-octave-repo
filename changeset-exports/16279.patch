# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363029219 14400
#      Mon Mar 11 15:13:39 2013 -0400
# Node ID 8c17cd3704770beda3ff003e2e9d631a1727fbb7
# Parent  8cb65fd721649c0da5890b862e82e23da87e6593
# Parent  c8bf749fe6f88d054356add815cfc8c8563fe4bd
maint: merge recent parser/lexer changes

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2852,16 +2852,17 @@ AC_OUTPUT_MAKE_DEFS
 ### Do the substitutions in all the Makefiles.
 
 AC_SUBST(ac_config_files)
 AC_SUBST(ac_config_headers)
 
 AC_CONFIG_FILES([
   Makefile 
   doc/Makefile
+  doc/doxyhtml/Makefile
   doc/icons/Makefile
   doc/interpreter/Makefile
   doc/liboctave/Makefile
   doc/refcard/Makefile
   examples/Makefile
   libgnu/Makefile
   libgui/Makefile
   libinterp/Makefile
diff --git a/doc/Makefile.am b/doc/Makefile.am
--- a/doc/Makefile.am
+++ b/doc/Makefile.am
@@ -24,10 +24,10 @@ include $(top_srcdir)/build-aux/common.m
 ## which can lead to a confusing error message stream.
 .NOTPARALLEL:
 
 EXTRA_DIST = \
   Makefile.am \
   texinfo.tex \
   texmf.cnf
 
-SUBDIRS = icons interpreter liboctave refcard
+SUBDIRS = doxyhtml icons interpreter liboctave refcard
 
diff --git a/Doxyfile b/doc/doxyhtml/Doxygen.cfg
rename from Doxyfile
rename to doc/doxyhtml/Doxygen.cfg
diff --git a/doc/doxyhtml/Makefile.am b/doc/doxyhtml/Makefile.am
new file mode 100644
--- /dev/null
+++ b/doc/doxyhtml/Makefile.am
@@ -0,0 +1,32 @@
+# Makefile for Octave's doc/doxyhtml directory
+#
+# Copyright (C) 1993-2012 John W. Eaton
+#
+# This file is part of Octave.
+# 
+# Octave is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 3 of the License, or (at
+# your option) any later version.
+# 
+# Octave is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with Octave; see the file COPYING.  If not, see
+# <http://www.gnu.org/licenses/>.
+
+include $(top_srcdir)/build-aux/common.mk
+
+doxyhtml:
+	cd ../..; doxygen doc/doxyhtml/Doxygen.cfg 
+
+EXTRA_DIST = \
+  Doxygen.cfg \
+  Makefile.am \
+  README
+
+maintainer-clean-local:
+	rm -rf `ls | $(GREP) -v Doxygen.cfg | $(GREP) -v Makefile.am | $(GREP) -v Makefile.in | $(GREP) -v README`
diff --git a/doc/doxyhtml/README b/doc/doxyhtml/README
new file mode 100644
--- /dev/null
+++ b/doc/doxyhtml/README
@@ -0,0 +1,11 @@
+This directory contains documentation in Doxygen format for
+Octave's source code.  It is not created by default.
+
+To produce Doxygen documentation use
+
+make doxyhtml
+
+Doxygen documentation can be helpful for developers of Octave, but is not
+needed by users of Octave.  In addition, the documentation requires
+approximately 1.2GB of storage space.  For these reasons it is not maintained
+under version control nor distributed in tarballs.
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -36,18 +36,22 @@ and demonstration code in the source cod
 
 @code{test} scans the named script file looking for lines which start
 with the identifier @samp{%!}.  The prefix is stripped off and the rest
 of the line is processed through the Octave interpreter.  If the code
 generates an error, then the test is said to fail.
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
-block evaluated separately.  Blocks are introduced by the keyword
-@code{test} immediately following @samp{%!}.  For example:
+block evaluated separately.  Blocks are introduced by valid keywords like
+@code{test}, @code{function}, or @code{assert} immediately following @samp{%!}.
+A block is defined by indentation as in Python.  Lines beginning with
+@samp{%!<whitespace>} are part of the preceeding block.
+ 
+For example:
 
 @example
 @group
 %!test error ("this test fails!");
 %!test "test doesn't fail. it doesn't generate an error";
 @end group
 @end example
 
@@ -132,17 +136,17 @@ block will only be run if Octave was com
 @code{svds()}, depends on having the @sc{arpack} library.  All of the tests
 for @code{svds} begin with
 
 @example
 %!testif HAVE_ARPACK
 @end example
 
 @noindent
-Review @file{config.h} or @code{octave_config_info ("DEFS")} to see some
+Review @file{config.h} or @code{octave_config_info ("features")} to see some
 of the possible values to check.
 
 Sometimes during development there is a test that should work but is
 known to fail.  You still want to leave the test in because when the
 final code is ready the test should pass, but you may not be able to
 fix it immediately.  To avoid unnecessary bug reports for these known
 failures, mark the block with @code{xtest} rather than @code{test}:
 
@@ -192,16 +196,34 @@ You can also share test functions:
 %!endfunction
 %!assert (fn(2), 4);
 @end group
 @end example
 
 Note that all previous variables and values are lost when a new 
 shared block is declared.
 
+Remember that @code{%!function} begins a new block and that 
+@code{%!endfunction} ends this block.  Be aware that until a new block
+is started, lines starting with @samp{%!<space>} will be discarded as comments.
+The following is nearly identical to the example above, but does nothing.
+
+@example
+@group
+%!function @var{a} = fn (@var{b})
+%!  @var{a} = 2*@var{b};
+%!endfunction
+%! assert (fn(2), 4);
+@end group
+@end example
+
+@noindent
+Because there is a space after @samp{%!} the @code{assert} statement does
+not begin a new block and this line is treated as a comment.
+
 Error and warning blocks are like test blocks, but they only succeed 
 if the code generates an error.  You can check the text of the error
 is correct using an optional regular expression @code{<pattern>}.  
 For example:
 
 @example
 %!error <passes!> error ("this test passes!");
 @end example
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3194,18 +3194,16 @@ parse_fcn_file (const std::string& full_
 
   if (! full_file.empty ())
     ffile = gnulib::fopen (full_file.c_str (), "rb");
 
   frame.add_fcn (safe_fclose, ffile);
 
   if (ffile)
     {
-      bool eof;
-
       // octave_parser constructor sets this for us.
       frame.protect_var (CURR_LEXER);
 
       octave_parser curr_parser (ffile);
 
       curr_parser.curr_class_name = dispatch_type;
       curr_parser.autoloading = autoload;
       curr_parser.fcn_file_from_relative_lookup = relative_lookup;
