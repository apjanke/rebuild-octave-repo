# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1229629290 -3600
#      Thu Dec 18 20:41:30 2008 +0100
# Node ID 970b4dbff9e470b49897a4f3791dc8142823d123
# Parent  69d45a4c7d94c151bc33815c1260d216cc651173
optimize unique called with a single argument

diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -40,36 +40,41 @@
 ## @end deftypefn
 
 function [y, i, j] = unique (x, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
-  ## parse options
-  if (iscellstr (varargin))
-    optfirst = strmatch ('first', varargin) > 0;
-    optlast = strmatch ('last', varargin) > 0;
-    optrows = strmatch ('rows', varargin) > 0 && size (x, 2) > 1;
-    if (optfirst && optlast)
-      error ("unique: cannot specify both 'last' and 'first'.");
-    elseif (optfirst + optlast + optrows != nargin-1)
-      error ("unique: invalid option.");
+  if (nargin > 1)
+
+    ## parse options
+    if (iscellstr (varargin))
+      varargin = unique(varargin);
+      optfirst = strmatch ('first', varargin) > 0;
+      optlast = strmatch ('last', varargin) > 0;
+      optrows = strmatch ('rows', varargin) > 0 && size (x, 2) > 1;
+      if (optfirst && optlast)
+        error ("unique: cannot specify both 'last' and 'first'.");
+      elseif (optfirst + optlast + optrows != nargin-1)
+        error ("unique: invalid option.");
+      endif
+    else
+      error ("unique: options must be strings");
     endif
-    optlast = ! optfirst;
-  else
-    error ("unique: options must be strings");
-  endif
 
-  if (iscell (x))
-    if (optrows)
+    if (optrows && iscell (x))
       warning ("unique: 'rows' is ignored for cell arrays");
       optrows = false;
     endif
+
+  else
+    optfirst = 0;
+    optrows = 0;
   endif
 
   if (optrows)
     n = size (x, 1);
   else
     n = numel (x);
   endif
 
@@ -96,22 +101,21 @@ function [y, i, j] = unique (x, varargin
       match = strcmp (y(1:n-1), y(2:n));
     else
       match = (y(1:n-1) == y(2:n));
     endif
     idx = find (match);
     y(idx) = [];
   endif
 
-  ## I don't know why anyone would need reverse indices, but it
-  ## was an interesting challenge.  I welcome cleaner solutions.
   if (nargout >= 3)
     j = i;
-    j(i) = cumsum (prepad (! match, n, 1));
+    j(i) = cumsum ([1 !match]);
   endif
+
   if (optfirst)
     i(idx+1) = [];
   else
     i(idx) = [];
   endif
 
 
 endfunction
