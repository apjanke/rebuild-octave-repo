# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1311019480 -7200
#      Mon Jul 18 22:04:40 2011 +0200
# Node ID 7eb8cd35454c2bac05663426beee47eab2cc8ffa
# Parent  9accc22fd9b0fe8f70e00553816b6810bacf0208
Removed unused code in order shrink down the terminal code and hopefully nearing the goal to replace it.

diff --git a/gui/octave-gui.pro b/gui/octave-gui.pro
--- a/gui/octave-gui.pro
+++ b/gui/octave-gui.pro
@@ -98,17 +98,16 @@ HEADERS += \
         src/terminal/BlockArray.h \
         src/terminal/konsole_wcwidth.h \
 		  src/terminal/konsole_export.h \
         src/terminal/ScreenWindow.h \
         src/terminal/Emulation.h \
         src/terminal/Vt102Emulation.h \
         src/terminal/TerminalDisplay.h \
         src/terminal/Filter.h \
-        src/terminal/LineFont.h \
         src/terminal/Pty.h \
         src/terminal/kpty.h \
         src/terminal/kpty_p.h \
 		  src/terminal/kpty_export.h \
         src/terminal/kptyprocess.h \
         src/terminal/kprocess.h \
         src/terminal/kprocess_p.h \
         src/terminal/kptydevice.h \
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -282,11 +282,12 @@ MainWindow::establishOctaveLink ()
   int fdm, fds;
   if (openpty (&fdm, &fds, 0, 0, 0) < 0)
     {
       assert (0);
     }
   dup2 (fds, 0);
   dup2 (fds, 1);
   dup2 (fds, 2);
+
   m_octaveTerminal->openTeletype (fdm);
   reportStatusMessage (tr ("Established link to Octave."));
 }
diff --git a/gui/src/OctaveTerminal.cpp b/gui/src/OctaveTerminal.cpp
--- a/gui/src/OctaveTerminal.cpp
+++ b/gui/src/OctaveTerminal.cpp
@@ -29,11 +29,10 @@ OctaveTerminal::OctaveTerminal (QWidget 
 
 OctaveTerminal::~OctaveTerminal ()
 {
 }
 
 void
 OctaveTerminal::construct ()
 {
-  setScrollBarPosition (QTerminalWidget::ScrollBarRight);
   setSizePolicy (QSizePolicy::Expanding, QSizePolicy::Expanding);
 }
diff --git a/gui/src/terminal/LineFont.h b/gui/src/terminal/LineFont.h
deleted file mode 100644
--- a/gui/src/terminal/LineFont.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* OctaveGUI - A graphical user interface for Octave
- * Copyright (C) 2011 Jacob Dawid
- * jacob.dawid@googlemail.com
- *
- * This file was autogenerated for the Konsole project.
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-static const quint32 LineChars[] = {
-  0x00007c00, 0x000fffe0, 0x00421084, 0x00e739ce, 0x00000000, 0x00000000,
-    0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00427000, 0x004e7380,
-    0x00e77800, 0x00ef7bc0,
-  0x00421c00, 0x00439ce0, 0x00e73c00, 0x00e7bde0, 0x00007084, 0x000e7384,
-    0x000079ce, 0x000f7bce,
-  0x00001c84, 0x00039ce4, 0x00003dce, 0x0007bdee, 0x00427084, 0x004e7384,
-    0x004279ce, 0x00e77884,
-  0x00e779ce, 0x004f7bce, 0x00ef7bc4, 0x00ef7bce, 0x00421c84, 0x00439ce4,
-    0x00423dce, 0x00e73c84,
-  0x00e73dce, 0x0047bdee, 0x00e7bde4, 0x00e7bdee, 0x00427c00, 0x0043fce0,
-    0x004e7f80, 0x004fffe0,
-  0x004fffe0, 0x00e7fde0, 0x006f7fc0, 0x00efffe0, 0x00007c84, 0x0003fce4,
-    0x000e7f84, 0x000fffe4,
-  0x00007dce, 0x0007fdee, 0x000f7fce, 0x000fffee, 0x00427c84, 0x0043fce4,
-    0x004e7f84, 0x004fffe4,
-  0x00427dce, 0x00e77c84, 0x00e77dce, 0x0047fdee, 0x004e7fce, 0x00e7fde4,
-    0x00ef7f84, 0x004fffee,
-  0x00efffe4, 0x00e7fdee, 0x00ef7fce, 0x00efffee, 0x00000000, 0x00000000,
-    0x00000000, 0x00000000,
-  0x000f83e0, 0x00a5294a, 0x004e1380, 0x00a57800, 0x00ad0bc0, 0x004390e0,
-    0x00a53c00, 0x00a5a1e0,
-  0x000e1384, 0x0000794a, 0x000f0b4a, 0x000390e4, 0x00003d4a, 0x0007a16a,
-    0x004e1384, 0x00a5694a,
-  0x00ad2b4a, 0x004390e4, 0x00a52d4a, 0x00a5a16a, 0x004f83e0, 0x00a57c00,
-    0x00ad83e0, 0x000f83e4,
-  0x00007d4a, 0x000f836a, 0x004f93e4, 0x00a57d4a, 0x00ad836a, 0x00000000,
-    0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001c00, 0x00001084,
-    0x00007000, 0x00421000,
-  0x00039ce0, 0x000039ce, 0x000e7380, 0x00e73800, 0x000e7f80, 0x00e73884,
-    0x0003fce0, 0x004239ce
-};
diff --git a/gui/src/terminal/QTerminalWidget.cpp b/gui/src/terminal/QTerminalWidget.cpp
--- a/gui/src/terminal/QTerminalWidget.cpp
+++ b/gui/src/terminal/QTerminalWidget.cpp
@@ -81,81 +81,48 @@ QTerminalWidget::QTerminalWidget (int st
     }
 
   setFocus (Qt::OtherFocusReason);
   m_impl->m_terminalDisplay->resize (this->size ());
   setFocusProxy (m_impl->m_terminalDisplay);
 }
 
 void
-QTerminalWidget::startShellProgram ()
-{
-  if (m_impl->m_session->isRunning ())
-    return;
-
-  m_impl->m_session->run ();
-}
-
-void
 QTerminalWidget::initialize ()
 {
   m_impl->m_terminalDisplay->setSize (80, 40);
 
   QFont font = QApplication::font ();
   font.setFamily ("Monospace");
   font.setPointSize (10);
   font.setStyleHint (QFont::TypeWriter);
-  setTerminalFont (font);
-  setScrollBarPosition (NoScrollBar);
+  m_impl->m_terminalDisplay->setVTFont (font);
+  m_impl->m_terminalDisplay->setScrollBarPosition (TerminalDisplay::ScrollBarRight);
 
   m_impl->m_session->addView (m_impl->m_terminalDisplay);
 
   connect (m_impl->m_session, SIGNAL (finished ()), this,
 	   SLOT (sessionFinished ()));
 }
 
 QTerminalWidget::~QTerminalWidget ()
 {
   emit destroyed ();
 }
 
 void
-QTerminalWidget::setTerminalFont (QFont & font)
-{
-  if (!m_impl->m_terminalDisplay)
-    return;
-  m_impl->m_terminalDisplay->setVTFont (font);
-}
-
-void
-QTerminalWidget::setShellProgram (QString progname)
-{
-  if (!m_impl->m_session)
-    return;
-  m_impl->m_session->setProgram (progname);
-}
-
-void
 QTerminalWidget::openTeletype (int fd)
 {
   if (m_impl->m_session->isRunning ())
     return;
 
   m_impl->m_session->openTeletype (fd);
 }
 
 void
-QTerminalWidget::setArgs (QStringList & args)
-{
-  if (!m_impl->m_session)
-    return;
-  m_impl->m_session->setArguments (args);
-}
-
-void
 QTerminalWidget::setTextCodec (QTextCodec * codec)
 {
   if (!m_impl->m_session)
     return;
   m_impl->m_session->setCodec (codec);
 }
 
 void
@@ -171,37 +138,22 @@ QTerminalWidget::setHistorySize (int lin
 {
   if (lines < 0)
     m_impl->m_session->setHistoryType (HistoryTypeFile ());
   else
     m_impl->m_session->setHistoryType (HistoryTypeBuffer (lines));
 }
 
 void
-QTerminalWidget::setScrollBarPosition (ScrollBarPosition pos)
-{
-  if (!m_impl->m_terminalDisplay)
-    return;
-  m_impl->m_terminalDisplay->
-    setScrollBarPosition ((TerminalDisplay::ScrollBarPosition) pos);
-}
-
-void
 QTerminalWidget::sendText (const QString & text)
 {
   m_impl->m_session->sendText (text);
 }
 
 void
-QTerminalWidget::installEventFilterOnDisplay (QObject * object)
-{
-  m_impl->m_terminalDisplay->installEventFilter (object);
-}
-
-void
 QTerminalWidget::resizeEvent (QResizeEvent *)
 {
   m_impl->m_terminalDisplay->resize (this->size ());
   m_impl->m_terminalDisplay->update ();
 }
 
 void
 QTerminalWidget::sessionFinished ()
diff --git a/gui/src/terminal/QTerminalWidget.h b/gui/src/terminal/QTerminalWidget.h
--- a/gui/src/terminal/QTerminalWidget.h
+++ b/gui/src/terminal/QTerminalWidget.h
@@ -23,61 +23,35 @@
 
 struct TermWidgetImpl;
 /**
   * \class QTerminalWidget
   * This class forms a widget class that can be inserted into other widgets.
   */
 class QTerminalWidget:public QWidget
 {
-Q_OBJECT public:
-    /**
-      * \enum ScrollBarPosition
-      * Defines the scrollbar position of the terminal.
-      */
-  enum ScrollBarPosition
-  {
-    NoScrollBar,
-    ScrollBarLeft,
-    ScrollBarRight
-  };
-
+Q_OBJECT
+  public:
     QTerminalWidget (int startnow = 1, QWidget * parent = 0);
    ~QTerminalWidget ();
 
-  void startShellProgram ();
   void openTeletype (int fd);
 
-    /** Default is application font with family Monospace, size 10. */
-  void setTerminalFont (QFont & font);
-
-    /**	Shell program, default is /bin/bash. */
-  void setShellProgram (QString progname);
-
-    /** Shell program args, default is none. */
-  void setArgs (QStringList & args);
-
     /** Text codec, default is UTF-8. */
   void setTextCodec (QTextCodec * codec);
 
     /** Resize terminal widget. */
   void setSize (int h, int v);
 
     /** History size for scrolling, values below zero mean infinite. */
   void setHistorySize (int lines);
 
-    /** Presence of scrollbar. By default, there is no scrollbar present. */
-  void setScrollBarPosition (ScrollBarPosition);
-
     /** Send some text to the terminal. */
   void sendText (const QString & text);
 
-    /** Installs an event filter onto the display. */
-  void installEventFilterOnDisplay (QObject * object);
-
     signals:
     /** Emitted, when the current program has finished. */
   void finished ();
 
 protected:
     virtual void resizeEvent (QResizeEvent *);
 
   protected slots:void sessionFinished ();
diff --git a/gui/src/terminal/TerminalDisplay.cpp b/gui/src/terminal/TerminalDisplay.cpp
--- a/gui/src/terminal/TerminalDisplay.cpp
+++ b/gui/src/terminal/TerminalDisplay.cpp
@@ -425,162 +425,28 @@ enum LineEncode
   Int33 = (1 << 18),
   RightB = (1 << 19),
 
   BotL = (1 << 21),
   BotC = (1 << 22),
   BotR = (1 << 23)
 };
 
-#include "LineFont.h"
-
-static void
-drawLineChar (QPainter & paint, int x, int y, int w, int h, uchar code)
-{
-  //Calculate cell midpoints, end points.
-  int cx = x + w / 2;
-  int cy = y + h / 2;
-  int ex = x + w - 1;
-  int ey = y + h - 1;
-
-  quint32 toDraw = LineChars[code];
-
-  //Top _lines:
-  if (toDraw & TopL)
-    paint.drawLine (cx - 1, y, cx - 1, cy - 2);
-  if (toDraw & TopC)
-    paint.drawLine (cx, y, cx, cy - 2);
-  if (toDraw & TopR)
-    paint.drawLine (cx + 1, y, cx + 1, cy - 2);
-
-  //Bot _lines:
-  if (toDraw & BotL)
-    paint.drawLine (cx - 1, cy + 2, cx - 1, ey);
-  if (toDraw & BotC)
-    paint.drawLine (cx, cy + 2, cx, ey);
-  if (toDraw & BotR)
-    paint.drawLine (cx + 1, cy + 2, cx + 1, ey);
-
-  //Left _lines:
-  if (toDraw & LeftT)
-    paint.drawLine (x, cy - 1, cx - 2, cy - 1);
-  if (toDraw & LeftC)
-    paint.drawLine (x, cy, cx - 2, cy);
-  if (toDraw & LeftB)
-    paint.drawLine (x, cy + 1, cx - 2, cy + 1);
-
-  //Right _lines:
-  if (toDraw & RightT)
-    paint.drawLine (cx + 2, cy - 1, ex, cy - 1);
-  if (toDraw & RightC)
-    paint.drawLine (cx + 2, cy, ex, cy);
-  if (toDraw & RightB)
-    paint.drawLine (cx + 2, cy + 1, ex, cy + 1);
-
-  //Intersection points.
-  if (toDraw & Int11)
-    paint.drawPoint (cx - 1, cy - 1);
-  if (toDraw & Int12)
-    paint.drawPoint (cx, cy - 1);
-  if (toDraw & Int13)
-    paint.drawPoint (cx + 1, cy - 1);
-
-  if (toDraw & Int21)
-    paint.drawPoint (cx - 1, cy);
-  if (toDraw & Int22)
-    paint.drawPoint (cx, cy);
-  if (toDraw & Int23)
-    paint.drawPoint (cx + 1, cy);
-
-  if (toDraw & Int31)
-    paint.drawPoint (cx - 1, cy + 1);
-  if (toDraw & Int32)
-    paint.drawPoint (cx, cy + 1);
-  if (toDraw & Int33)
-    paint.drawPoint (cx + 1, cy + 1);
-
-}
-
-void
-TerminalDisplay::drawLineCharString (QPainter & painter, int x, int y,
-				     const QString & str,
-				     const Character * attributes)
-{
-  const QPen & currentPen = painter.pen ();
-
-  if ((attributes->rendition & RE_BOLD) && _boldIntense)
-    {
-      QPen boldPen (currentPen);
-      boldPen.setWidth (3);
-      painter.setPen (boldPen);
-    }
-
-  for (int i = 0; i < str.length (); i++)
-    {
-      uchar code = str[i].cell ();
-      if (LineChars[code])
-	drawLineChar (painter, x + (_fontWidth * i), y, _fontWidth,
-		      _fontHeight, code);
-    }
-
-  painter.setPen (currentPen);
-}
-
 void
 TerminalDisplay::setKeyboardCursorShape (KeyboardCursorShape shape)
 {
   _cursorShape = shape;
 }
 
 TerminalDisplay::KeyboardCursorShape TerminalDisplay::keyboardCursorShape () const
 {
   return _cursorShape;
 }
 
 void
-TerminalDisplay::setKeyboardCursorColor (bool useForegroundColor,
-					 const QColor & color)
-{
-  if (useForegroundColor)
-    _cursorColor = QColor ();	// an invalid color means that
-  // the foreground color of the
-  // current character should
-  // be used
-
-  else
-    _cursorColor = color;
-}
-
-QColor
-TerminalDisplay::keyboardCursorColor () const
-{
-  return _cursorColor;
-}
-
-void
-TerminalDisplay::setOpacity (qreal opacity)
-{
-  QColor color (_blendColor);
-  color.setAlphaF (opacity);
-
-  // enable automatic background filling to prevent the display
-  // flickering if there is no transparency
-  /*if ( color.alpha() == 255 ) 
-     {
-     setAutoFillBackground(true);
-     }
-     else
-     {
-     setAutoFillBackground(false);
-     } */
-
-  _blendColor = color.rgba ();
-}
-
-void
 TerminalDisplay::drawBackground (QPainter & painter, const QRect & rect,
 				 const QColor & backgroundColor,
 				 bool useOpacitySetting)
 {
   // the area of the widget showing the contents of the terminal display is drawn
   // using the background color from the color scheme set with setColorTable()
   //
   // the area of the widget behind the scroll-bar is drawn using the background
@@ -698,32 +564,20 @@ TerminalDisplay::drawCharacters (QPainte
   const QColor color = textColor.color (_colorTable);
   QPen pen = painter.pen ();
   if (pen.color () != color)
     {
       pen.setColor (color);
       painter.setPen (color);
     }
 
-  // draw text
-  if (isLineCharString (text))
-    drawLineCharString (painter, rect.x (), rect.y (), text, style);
+  if (_bidiEnabled)
+    painter.drawText (rect, 0, text);
   else
-    {
-      // the drawText(rect,flags,string) overload is used here with null flags
-      // instead of drawText(rect,string) because the (rect,string) overload causes 
-      // the application's default layout direction to be used instead of 
-      // the widget-specific layout direction, which should always be
-      // Qt::LeftToRight for this widget
-      // This was discussed in: http://lists.kde.org/?t=120552223600002&r=1&w=2
-      if (_bidiEnabled)
-	painter.drawText (rect, 0, text);
-      else
-	painter.drawText (rect, 0, LTR_OVERRIDE_CHAR + text);
-    }
+    painter.drawText (rect, 0, LTR_OVERRIDE_CHAR + text);
 }
 
 void
 TerminalDisplay::drawTextFragment (QPainter & painter,
 				   const QRect & rect,
 				   const QString & text,
 				   const Character * style)
 {
diff --git a/gui/src/terminal/TerminalDisplay.h b/gui/src/terminal/TerminalDisplay.h
--- a/gui/src/terminal/TerminalDisplay.h
+++ b/gui/src/terminal/TerminalDisplay.h
@@ -39,18 +39,16 @@ class QEvent;
 class QGridLayout;
 class QKeyEvent;
 class QScrollBar;
 class QShowEvent;
 class QHideEvent;
 class QTimerEvent;
 class QWidget;
 
-class KMenu;
-
 extern unsigned short vt100_graphics[32];
 
 class ScreenWindow;
 
 /**
  * A widget which displays output from a terminal emulation and sends input keypresses and mouse activity
  * to the terminal.
  *
@@ -76,19 +74,16 @@ Q_OBJECT public:
      */
   void setRandomSeed (uint seed);
     /**
      * Returns the seed used to generate random colors for the display
      * (in color schemes that support them).
      */
   uint randomSeed () const;
 
-    /** Sets the opacity of the terminal display. */
-  void setOpacity (qreal opacity);
-
     /** 
      * This enum describes the location where the scroll bar is positioned in the display widget.
      */
   enum ScrollBarPosition
   {
 	/** Do not show the scroll bar. */
     NoScrollBar = 0,
 	/** Show the scroll bar on the left side of the display. */
@@ -223,38 +218,16 @@ Q_OBJECT public:
      */
   void setKeyboardCursorShape (KeyboardCursorShape shape);
     /**
      * Returns the shape of the keyboard cursor.  See setKeyboardCursorShape()
      */
   KeyboardCursorShape keyboardCursorShape () const;
 
     /**
-     * Sets the color used to draw the keyboard cursor.  
-     *
-     * The keyboard cursor defaults to using the foreground color of the character
-     * underneath it.
-     *
-     * @param useForegroundColor If true, the cursor color will change to match
-     * the foreground color of the character underneath it as it is moved, in this
-     * case, the @p color parameter is ignored and the color of the character
-     * under the cursor is inverted to ensure that it is still readable.
-     * @param color The color to use to draw the cursor.  This is only taken into
-     * account if @p useForegroundColor is false.
-     */
-  void setKeyboardCursorColor (bool useForegroundColor, const QColor & color);
-
-    /** 
-     * Returns the color of the keyboard cursor, or an invalid color if the keyboard
-     * cursor color is set to change according to the foreground color of the character
-     * underneath it. 
-     */
-  QColor keyboardCursorColor () const;
-
-    /**
      * Returns the number of lines of text which can be displayed in the widget.
      *
      * This will depend upon the height of the widget and the current font.
      * See fontHeight()
      */
   int lines ()
   {
     return _lines;
@@ -676,19 +649,16 @@ private:
   // draws the cursor character
   void drawCursor (QPainter & painter, const QRect & rect,
 		   const QColor & foregroundColor,
 		   const QColor & backgroundColor, bool & invertColors);
   // draws the characters or line graphics in a text fragment
   void drawCharacters (QPainter & painter, const QRect & rect,
 		       const QString & text, const Character * style,
 		       bool invertCharacterColor);
-  // draws a string of line graphics
-  void drawLineCharString (QPainter & painter, int x, int y,
-			   const QString & str, const Character * attributes);
 
   // draws the preedit string for input methods
   void drawInputMethodPreeditString (QPainter & painter, const QRect & rect);
 
   // --
 
   // maps an area in the character image to an area on the widget 
   QRect imageToWidget (const QRect & imageArea) const;
@@ -798,17 +768,16 @@ private:
   bool _hasBlinkingCursor;	// has blinking cursor enabled
   bool _allowBlinkingText;	// allow text to blink
   bool _ctrlDrag;		// require Ctrl key for drag
   TripleClickMode _tripleClickMode;
   bool _isFixedSize;		//Columns / lines are locked.
   QTimer *_blinkTimer;		// active when hasBlinker
   QTimer *_blinkCursorTimer;	// active when hasBlinkingCursor
 
-  KMenu *_drop;
   QString _dropText;
   int _dndFileCount;
 
   bool _possibleTripleClick;	// is set in mouseDoubleClickEvent and deleted
   // after QApplication::doubleClickInterval() delay
 
 
   QLabel *_resizeWidget;
diff --git a/gui/src/terminal/kprocess.cpp b/gui/src/terminal/kprocess.cpp
--- a/gui/src/terminal/kprocess.cpp
+++ b/gui/src/terminal/kprocess.cpp
@@ -153,33 +153,19 @@ KProcess::setOutputChannelMode (OutputCh
 
 KProcess::OutputChannelMode KProcess::outputChannelMode () const
 {
   Q_D (const KProcess);
 
   return d->outputChannelMode;
 }
 
-void
-KProcess::setNextOpenMode (QIODevice::OpenMode mode)
-{
-  Q_D (KProcess);
-
-  d->openMode = mode;
-}
-
 #define DUMMYENV "_KPROCESS_DUMMY_="
 
 void
-KProcess::clearEnvironment ()
-{
-  setEnvironment (QStringList () << QString::fromLatin1 (DUMMYENV));
-}
-
-void
 KProcess::setEnv (const QString & name, const QString & value, bool overwrite)
 {
   QStringList env = environment ();
   if (env.isEmpty ())
     {
       env = systemEnvironment ();
       env.removeAll (QString::fromLatin1 (DUMMYENV));
     }
@@ -275,25 +261,16 @@ KProcess::clearProgram ()
 
   d->prog.clear ();
   d->args.clear ();
 #ifdef Q_OS_WIN
   setNativeArguments (QString ());
 #endif
 }
 
-void
-KProcess::setShellCommand (const QString & cmd)
-{
-  Q_D (KProcess);
-  d->args.clear ();
-  d->prog = QString::fromLatin1 ("/bin/sh");
-  d->args << QString::fromLatin1 ("-c") << cmd;
-}
-
 QStringList
 KProcess::program () const
 {
   Q_D (const KProcess);
 
   QStringList argv = d->args;
   argv.prepend (d->prog);
   return argv;
diff --git a/gui/src/terminal/kprocess.h b/gui/src/terminal/kprocess.h
--- a/gui/src/terminal/kprocess.h
+++ b/gui/src/terminal/kprocess.h
@@ -89,27 +89,16 @@ Q_OBJECT Q_DECLARE_PRIVATE (KProcess) pu
     /**
      * Query how the output channels of the child process are handled.
      *
      * @return the output channel handling mode
      */
   OutputChannelMode outputChannelMode () const;
 
     /**
-     * Set the QIODevice open mode the process will be opened in.
-     *
-     * This function must be called before starting the process, obviously.
-     *
-     * @param mode the open mode. Note that this mode is automatically
-     *   "reduced" according to the channel modes and redirections.
-     *   The default is QIODevice::ReadWrite.
-     */
-  void setNextOpenMode (QIODevice::OpenMode mode);
-
-    /**
      * Adds the variable @p name to the process' environment.
      *
      * This function must be called before starting the process.
      *
      * @param name the name of the environment variable
      * @param value the new value for the environment variable
      * @param overwrite if @c false and the environment variable is already
      *   set, the old value will be preserved
@@ -122,26 +111,16 @@ Q_OBJECT Q_DECLARE_PRIVATE (KProcess) pu
      *
      * This function must be called before starting the process.
      *
      * @param name the name of the environment variable
      */
   void unsetEnv (const QString & name);
 
     /**
-     * Empties the process' environment.
-     *
-     * Note that LD_LIBRARY_PATH/DYLD_LIBRARY_PATH is automatically added
-     * on *NIX.
-     *
-     * This function must be called before starting the process.
-     */
-  void clearEnvironment ();
-
-    /**
      * Set the program and the command line arguments.
      *
      * This function must be called before starting the process, obviously.
      *
      * @param exe the program to execute
      * @param args the command line arguments for the program,
      *   one per list element
      */
@@ -184,38 +163,16 @@ Q_OBJECT Q_DECLARE_PRIVATE (KProcess) pu
     KProcess & operator<< (const QStringList & args);
 
     /**
      * Clear the program and command line argument list.
      */
   void clearProgram ();
 
     /**
-     * Set a command to execute through a shell (a POSIX sh on *NIX
-     * and cmd.exe on Windows).
-     *
-     * Using this for anything but user-supplied commands is usually a bad
-     * idea, as the command's syntax depends on the platform.
-     * Redirections including pipes, etc. are better handled by the
-     * respective functions provided by QProcess.
-     *
-     * If KProcess determines that the command does not really need a
-     * shell, it will trasparently execute it without one for performance
-     * reasons.
-     *
-     * This function must be called before starting the process, obviously.
-     *
-     * @param cmd the command to execute through a shell.
-     *   The caller must make sure that all filenames etc. are properly
-     *   quoted when passed as argument. Failure to do so often results in
-     *   serious security holes. See KShell::quoteArg().
-     */
-  void setShellCommand (const QString & cmd);
-
-    /**
      * Obtain the currently set program and arguments.
      *
      * @return a list, the first element being the program, the remaining ones
      *  being command line arguments to the program.
      */
   QStringList program () const;
 
     /**
