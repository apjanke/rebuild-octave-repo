# HG changeset patch
# User jwe
# Date 1128618733 0
#      Thu Oct 06 17:12:13 2005 +0000
# Node ID 2ff5363a16bd27db0e22b38375932058be50d014
# Parent  d2df058c4319b119568adcda125c4fe58eb4089a
[project @ 2005-10-06 17:12:12 by jwe]

diff --git a/COPYING b/COPYING
--- a/COPYING
+++ b/COPYING
@@ -1,13 +1,13 @@
 		    GNU GENERAL PUBLIC LICENSE
 		       Version 2, June 1991
 
  Copyright (C) 1989, 1991 Free Software Foundation, Inc.
-                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
 
 			    Preamble
 
   The licenses for most software are designed to take away your
 freedom to share and change it.  By contrast, the GNU General Public
 License is intended to guarantee your freedom to share and change free
@@ -286,39 +286,39 @@ possible use to the public, the best way
 free software which everyone can redistribute and change under these terms.
 
   To do so, attach the following notices to the program.  It is safest
 to attach them to the start of each source file to most effectively
 convey the exclusion of warranty; and each file should have at least
 the "copyright" line and a pointer to where the full notice is found.
 
     <one line to give the program's name and a brief idea of what it does.>
-    Copyright (C) 19yy  <name of author>
+    Copyright (C) <year>  <name of author>
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
 
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 
 
 Also add information on how to contact you by electronic and paper mail.
 
 If the program is interactive, make it output a short notice like this
 when it starts in an interactive mode:
 
-    Gnomovision version 69, Copyright (C) 19yy name of author
+    Gnomovision version 69, Copyright (C) year name of author
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.
 
 The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.  Of course, the commands you use may
 be called something other than `show w' and `show c'; they could even be
 mouse-clicks or menu items--whatever suits your program.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2005-10-05  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (symbol_exist): Chekck for autoloaded functions.
+
+	* parse.y (Fautoload): New function.
+	(autoloading, autoload_map): New static variables.
+	(load_fcn_from_file, frob_function): Handle autoloading.
+	(lookup_autoload): New function.
+	(get_help_from_file): New args, symbol_found and include_file_info.
+	Change all callers.
+
 2005-10-05  David Bateman  <dbateman@free.fr>
 
 	* help.cc (try_info): format in command string for mingw.
 
 2005-09-30  John W. Eaton  <jwe@octave.org>
 
 	* ov.cc (octave_value::~octave_value): No need to set rep to zero
 	after deleting.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -844,31 +844,23 @@ help_from_symbol_table (std::ostream& os
   return retval;
 }
 
 static bool
 help_from_file (std::ostream& os, const std::string& nm, bool& symbol_found)
 {
   bool retval = false;
 
-  std::string file = fcn_file_in_path (nm);
-
-  if (file.length () > 0)
-    {
-      symbol_found = true;
-
-      std::string h = get_help_from_file (file);
+  std::string h = get_help_from_file (nm, symbol_found, true);
 
-      if (h.length () > 0)
-	{
-	  os << nm << " is the file: " << file << "\n\n";
-	  display_help_text (os, h);
-	  os << "\n";
-	  retval = true;
-	}
+  if (h.length () > 0)
+    {
+      display_help_text (os, h);
+      os << "\n";
+      retval = true;
     }
 
   return retval;
 }
 
 static void
 builtin_help (int argc, const string_vector& argv)
 {
@@ -1710,17 +1702,20 @@ to find related functions that are not p
 		      tmp(1) = name + ".m";
 		      std::string file_name = 
 			Vload_path_dir_path.find_first_of (tmp);
 
 
 		      if (file_name == dirs[i] + tmp(0)
 			  || file_name == dirs[i] + tmp(1))
 			{
-			  std::string h = get_help_from_file (file_name);
+			  bool symbol_found;
+
+			  std::string h
+			    = get_help_from_file (file_name, symbol_found);
 
 			  std::string s;
 			  if (first_sentence_only)
 			    s = first_help_sentence (h);
 			  else
 			    s = h;
 
 			  transform (s.begin (), s.end (), s.begin (), tolower);
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -87,17 +87,21 @@ extern int end_tokens_expected;
 
 extern void
 parse_and_execute (FILE *f);
 
 extern void
 parse_and_execute (const std::string& s, bool verbose = false,
 		   const char *warn_for = 0);
 
-extern std::string get_help_from_file (const std::string& f);
+extern std::string
+get_help_from_file (const std::string& nm, bool& symbol_found,
+		    bool include_file_info = false);
+
+extern std::string lookup_autoload (const std::string& nm);
 
 extern bool
 load_fcn_from_file (const std::string& nm, bool exec_script);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern void
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -34,16 +34,18 @@ 02110-1301, USA.
 
 #include <cassert>
 #include <cstdio>
 
 #ifdef YYBYACC
 #include <cstdlib>
 #endif
 
+#include <map>
+
 #include "Cell.h"
 #include "Matrix.h"
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-sstream.h"
 #include "oct-env.h"
@@ -141,16 +143,22 @@ int end_tokens_expected = 0;
 
 // Keep track of symbol table information when parsing functions.
 std::stack<symbol_table*> symtab_context;
 
 // Name of parent function when parsing function files that might
 // contain nested functions.
 std::string parent_function_name;
 
+// TRUE means we are in the process of autoloading a function.
+static bool autoloading = false;
+
+// List of autoloads (function -> file mapping).
+static std::map<std::string, std::string> autoload_map;
+
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
 static void
 yyerror (const char *s);
 
 // Error mesages for mismatched end tokens.
@@ -2505,19 +2513,19 @@ frob_function (const std::string& fname,
 {
   std::string id_name = fname;
 
   // If input is coming from a file, issue a warning if the name of
   // the file does not match the name of the function stated in the
   // file.  Matlab doesn't provide a diagnostic (it ignores the stated
   // name).
 
-  if (reading_fcn_file)
+  if (reading_fcn_file || autoloading)
     {
-      if (! lexer_flags.parsing_nested_function
+      if (! (lexer_flags.parsing_nested_function || autoloading)
           && curr_fcn_file_name != id_name)
 	{
 	  if (Vwarn_function_name_clash)
 	    warning ("function name `%s' does not agree with function\
  file name `%s'", id_name.c_str (), curr_fcn_file_full_name.c_str ());
 
 	  id_name = curr_fcn_file_name;
 	}
@@ -3162,30 +3170,38 @@ gobble_leading_white_space (FILE *ffile,
 	help_txt = gobble_leading_white_space (ffile, in_parts,
 					       update_pos, false);
     }
 
   return help_txt;
 }
 
 std::string
-get_help_from_file (const std::string& path)
+get_help_from_file (const std::string& nm, bool& symbol_found,
+		    bool include_file_info)
 {
   std::string retval;
 
-  if (! path.empty ())
+  std::string file = fcn_file_in_path (nm);
+
+  if (! file.empty ())
     {
-      FILE *fptr = fopen (path.c_str (), "r");
+      symbol_found = true;
+
+      FILE *fptr = fopen (file.c_str (), "r");
 
       if (fptr)
 	{
 	  unwind_protect::add (safe_fclose, (void *) fptr);
 
 	  retval = gobble_leading_white_space (fptr, true, true, false);
 
+	  if (! retval.empty () && include_file_info)
+	    retval = nm + " is the file: " + file + "\n\n" + retval;
+
 	  unwind_protect::run ();
 	}
     }
 
   return retval;
 }
 
 static int
@@ -3350,79 +3366,129 @@ parse_fcn_file (const std::string& ff, b
   else
     error ("no such file, `%s'", ff.c_str ());
 
   unwind_protect::run_frame ("parse_fcn_file");
 
   return script_file_executed;
 }
 
+std::string
+lookup_autoload (const std::string& nm)
+{
+  return
+    octave_env::make_absolute (Vload_path_dir_path.find (autoload_map[nm]),
+			       octave_env::getcwd ());
+}
+
 bool
 load_fcn_from_file (const std::string& nm, bool exec_script)
 {
+  unwind_protect::begin_frame ("load_fcn_from_file");
+
   bool script_file_executed = false;
 
   string_vector names (2);
 
   int nm_len = nm.length ();
 
   std::string file;
 
   if (octave_env::absolute_pathname (nm)
       && ((nm_len > 4 && nm.substr (nm_len-4) == ".oct")
 	  || (nm_len > 2 && nm.substr (nm_len-4) == ".m")))
     {
       file = nm;
     }
   else
     {
-      names[0] = nm + ".oct";
-      names[1] = nm + ".m";
-
-      file
-	= octave_env::make_absolute (Vload_path_dir_path.find_first_of (names),
-				     octave_env::getcwd ());
+      file = lookup_autoload (nm);
+
+      if (! file.empty ())
+	{
+	  unwind_protect_bool (autoloading);
+
+	  autoloading = true;
+	  exec_script = true;
+	}
+      else
+	{
+	  names[0] = nm + ".oct";
+	  names[1] = nm + ".m";
+
+	  file = octave_env::make_absolute (Vload_path_dir_path.find_first_of (names),
+					    octave_env::getcwd ());
+	}
     }
 
   int len = file.length ();
 
   if (len > 4 && file.substr (len-4, len-1) == ".oct")
     {
       if (octave_dynamic_loader::load (nm, file))
         force_link_to_function (nm);
     }
   else if (len > 2)
     {
       // These are needed by yyparse.
 
-      unwind_protect::begin_frame ("load_fcn_from_file");
-
       unwind_protect_str (curr_fcn_file_name);
       unwind_protect_str (curr_fcn_file_full_name);
 
       curr_fcn_file_name = nm;
       curr_fcn_file_full_name = file;
 
-      script_file_executed = parse_fcn_file (file, exec_script);
-
-      if (! (error_state || script_file_executed))
-	force_link_to_function (nm);
-
-      unwind_protect::run_frame ("load_fcn_from_file");
+      script_file_executed = parse_fcn_file (file, exec_script, autoloading);
+
+      if (! error_state)
+	{
+	  if (autoloading)
+	    {
+	      script_file_executed = false;
+	      force_link_to_function (nm);
+	    }
+	  else if (! script_file_executed)
+	    force_link_to_function (nm);
+	}
     }
 
+  unwind_protect::run_frame ("load_fcn_from_file");
+
   return script_file_executed;
 }
 
 bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script)
 {
   return load_fcn_from_file (sym_rec->name (), exec_script);
 }
 
+DEFCMD (autoload, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} autoload (@var{function}, @var{file})\n\
+Define @var{function} to autoload from @var{file}.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 2)
+    {
+      string_vector argv = args.make_argv ("autoload");
+
+      if (! error_state)
+	autoload_map[argv[1]] = argv[2];
+    }
+  else
+    print_usage ("autoload");
+
+  return retval;
+}
+
 void
 source_file (const std::string file_name)
 {
   std::string file_full_name = file_ops::tilde_expand (file_name);
 
   unwind_protect::begin_frame ("source_file");
 
   unwind_protect_str (curr_fcn_file_name);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -823,22 +823,27 @@ symbol_exist (const std::string& name, c
 	  retval = s.empty () ? 103 : (sr->is_user_function () ? 2 : 3);
 	}
     }
 
   if (! (type == "var" || type == "builtin"))
     {
       if (! retval)
 	{
-	  string_vector names (2);
-
-	  names(0) = name + ".oct";
-	  names(1) = name + ".m";
-
-	  std::string file_name = Vload_path_dir_path.find_first_of (names);
+	  std::string file_name = lookup_autoload (name);
+
+	  if (file_name.empty ())
+	    {
+	      string_vector names (2);
+
+	      names(0) = name + ".oct";
+	      names(1) = name + ".m";
+
+	      file_name = Vload_path_dir_path.find_first_of (names);
+	    }
 
 	  size_t len = file_name.length ();
 
 	  if (! file_name.empty ())
 	    {
 	      if (type == "any" || type == "file")
 		{
 		  if (file_name.substr (len-4) == ".oct")
