# HG changeset patch
# User jwe
# Date 823433320 0
#      Sun Feb 04 11:28:40 1996 +0000
# Node ID 52e7bca8ce33b7777182ea19e52cc5630cba335d
# Parent  b6c48195b552fd272f3d1c8c907e407737830f62
[project @ 1996-02-04 11:19:32 by jwe]

diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -443,124 +443,14 @@ DASSL::integrate (const ColumnVector& to
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
 
-DASSL_options::DASSL_options (void)
-{
-  init ();
-}
-
-DASSL_options::DASSL_options (const DASSL_options& opt)
-{
-  copy (opt);
-}
-
-DASSL_options&
-DASSL_options::operator = (const DASSL_options& opt)
-{
-  if (this != &opt)
-    copy (opt);
-
-  return *this;
-}
-
-DASSL_options::~DASSL_options (void)
-{
-}
-
-void
-DASSL_options::init (void)
-{
-  double sqrt_eps = sqrt (DBL_EPSILON);
-  x_absolute_tolerance = sqrt_eps;
-  x_initial_step_size = -1.0;
-  x_maximum_step_size = -1.0;
-  x_minimum_step_size = 0.0;
-  x_relative_tolerance = sqrt_eps;
-}
-
-void
-DASSL_options::copy (const DASSL_options& opt)
-{
-  x_absolute_tolerance = opt.x_absolute_tolerance;
-  x_initial_step_size = opt.x_initial_step_size;
-  x_maximum_step_size = opt.x_maximum_step_size;
-  x_minimum_step_size = opt.x_minimum_step_size;
-  x_relative_tolerance = opt.x_relative_tolerance;
-}
-
-void
-DASSL_options::set_default_options (void)
-{
-  init ();
-}
-
-void
-DASSL_options::set_absolute_tolerance (double val)
-{
-  x_absolute_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
-}
-
-void
-DASSL_options::set_initial_step_size (double val)
-{
-  x_initial_step_size = (val >= 0.0) ? val : -1.0;
-}
-
-void
-DASSL_options::set_maximum_step_size (double val)
-{
-  x_maximum_step_size = (val >= 0.0) ? val : -1.0;
-}
-
-void
-DASSL_options::set_minimum_step_size (double val)
-{
-  x_minimum_step_size = (val >= 0.0) ? val : 0.0;
-}
-
-void
-DASSL_options::set_relative_tolerance (double val)
-{
-  x_relative_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
-}
-
-double
-DASSL_options::absolute_tolerance (void)
-{
-  return x_absolute_tolerance;
-}
-
-double
-DASSL_options::initial_step_size (void)
-{
-  return x_initial_step_size;
-}
-
-double
-DASSL_options::maximum_step_size (void)
-{
-  return x_maximum_step_size;
-}
-
-double
-DASSL_options::minimum_step_size (void)
-{
-  return x_minimum_step_size;
-}
-
-double
-DASSL_options::relative_tolerance (void)
-{
-  return x_relative_tolerance;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,58 +29,61 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "CColVector.h"
 
-class EIG
+class
+EIG
 {
 friend class Matrix;
 friend class ComplexMatrix;
 
 public:
 
-  EIG (void) { }
+  EIG (void)
+    : lambda (), v () { }
 
   EIG (const Matrix& a) { init (a); }
+
   EIG (const Matrix& a, int& info) { info = init (a); }
 
   EIG (const ComplexMatrix& a) { init (a); }
+
   EIG (const ComplexMatrix& a, int& info) { info = init (a); }
 
   EIG (const EIG& a)
-    {
-      lambda = a.lambda;
-      v = a.v;
-    }
+    : lambda (a.lambda), v (a.v) { }
 
   EIG& operator = (const EIG& a)
     {
-      lambda = a.lambda;
-      v = a.v;
-
+      if (this != &a)
+	{
+	  lambda = a.lambda;
+	  v = a.v;
+	}
       return *this;
     }
 
   ComplexColumnVector eigenvalues (void) const { return lambda; }
 
   ComplexMatrix eigenvectors (void) const { return v; }
 
   friend ostream&  operator << (ostream& os, const EIG& a);
 
 private:
 
+  ComplexColumnVector lambda;
+  ComplexMatrix v;
+
   int init (const Matrix& a);
   int init (const ComplexMatrix& a);
-
-  ComplexColumnVector lambda;
-  ComplexMatrix v;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/FEGrid.h b/liboctave/FEGrid.h
--- a/liboctave/FEGrid.h
+++ b/liboctave/FEGrid.h
@@ -1,12 +1,12 @@
 // FEGrid.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,46 +27,66 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dColVector.h"
 
-class FEGrid
+class
+FEGrid
 {
-private:
-
-  void error (const char* msg) const;
-  void nel_error (void) const;
-
-  void check_grid (void) const;
-
 public:
 
-  FEGrid (void) { }
-  FEGrid (const ColumnVector& elbnds) : elem (elbnds) { check_grid (); }
+  FEGrid (void)
+    : elem () { }
+
+  FEGrid (const ColumnVector& elbnds)
+    : elem (elbnds) { check_grid (); }
+
   FEGrid (int nel, double width);
+
   FEGrid (int nel, double left, double right);
 
+  FEGrid (const FEGrid& a)
+    : elem (a.elem) { }
+
+  FEGrid& operator = (const FEGrid& a)
+    {
+      if (this != &a)
+	elem = a.elem;
+
+      return *this;
+    }
+
+  ~FEGrid (void) { }
+
   int element (double x) const;
 
   double left (void) const { return elem.elem (0); }
+
   double right (void) const { return elem.elem (elem.capacity () - 1); }
 
   int in_bounds (double x) const { return (x >= left () && x <= right ()); }
 
   ColumnVector element_boundaries (void) const { return elem; }
 
   friend ostream& operator << (ostream&, const FEGrid&);
 
 protected:
 
   ColumnVector elem;
+
+private:
+
+  void error (const char* msg) const;
+  void nel_error (void) const;
+
+  void check_grid (void) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/FSQP.h b/liboctave/FSQP.h
--- a/liboctave/FSQP.h
+++ b/liboctave/FSQP.h
@@ -1,12 +1,12 @@
 // FSQP.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,17 +27,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #ifndef FSQP_MISSING
 
 #include "NLP.h"
 
-class FSQP : public NLP
+class
+FSQP : public NLP
 {
 };
 
 #endif
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/LP.h b/liboctave/LP.h
--- a/liboctave/LP.h
+++ b/liboctave/LP.h
@@ -26,31 +26,32 @@ Software Foundation, 59 Temple Place - S
 
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "base-min.h"
 
 class LP : public base_minimizer
 {
- public:
+public:
 
-  LP (void) : base_minimizer () { }
+  LP (void)
+    : base_minimizer (), c (), bnds (), lc () { }
 
   LP (const ColumnVector& c_arg)
-    : base_minimizer (), c (c_arg) { }
+    : base_minimizer (), c (c_arg), bnds (), lc () { }
 
   LP (const ColumnVector& c_arg, const Bounds& b)
-    : base_minimizer (), c (c_arg), bnds (b) { }
+    : base_minimizer (), c (c_arg), bnds (b), lc () { }
 
   LP (const ColumnVector& c_arg, const Bounds& b, const LinConst& l)
     : base_minimizer (), c (c_arg), bnds (b), lc (l) { }
 
   LP (const ColumnVector& c_arg, const LinConst& l)
-    : base_minimizer (), c (c_arg), lc (l) { }
+    : base_minimizer (), c (c_arg), bnds (), lc (l) { }
 
   LP (const LP& a)
     : base_minimizer (a), c (a.c), bnds (a.bnds), lc (a.lc) { }
 
   LP& operator = (const LP& a)
     {
       if (this != &a)
 	{
@@ -60,17 +61,23 @@ class LP : public base_minimizer
 	  bnds = a.bnds;
 	  lc = a.lc;
 	}
       return *this;
     }
 
   ~LP (void) { }
 
- protected:
+  ColumnVector linear_obj_coeff (void) const { return c; }
+
+  Bounds bounds (void) const { return bnds; }
+
+  LinConst linear_constraints (void) const { return lc; }
+
+protected:
 
   ColumnVector c;
   Bounds bnds;
   LinConst lc;
 };
 
 #endif
 
diff --git a/liboctave/LPsolve.h b/liboctave/LPsolve.h
--- a/liboctave/LPsolve.h
+++ b/liboctave/LPsolve.h
@@ -27,19 +27,20 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ColumnVector;
 
 #include "LP.h"
 
-class LPsolve : public LP
+class
+LPsolve : public LP
 {
- public:
+public:
 
   LPsolve (void)
     : LP () { }
 
   LPsolve (const ColumnVector& c)
     : LP (c) { }
 
   LPsolve (const ColumnVector& c, const Bounds& b)
@@ -52,19 +53,18 @@ class LPsolve : public LP
     : LP (c, lc) { }
 
   LPsolve (const LPsolve& a)
     : LP (a) { }
 
   LPsolve& operator = (const LPsolve& a)
     {
       if (this != &a)
-	{
-	  LP::operator = (a);
-	}
+	LP::operator = (a);
+
       return *this;
     }
 
   ~LPsolve (void) { }
 
   ColumnVector do_minimize (double& objf, int& inform, ColumnVector& lambda);
 };
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -420,124 +420,14 @@ LSODE::integrate (const ColumnVector& to
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
 
-LSODE_options::LSODE_options (void)
-{
-  init ();
-}
-
-LSODE_options::LSODE_options (const LSODE_options& opt)
-{
-  copy (opt);
-}
-
-LSODE_options&
-LSODE_options::operator = (const LSODE_options& opt)
-{
-  if (this != &opt)
-    copy (opt);
-
-  return *this;
-}
-
-LSODE_options::~LSODE_options (void)
-{
-}
-
-void
-LSODE_options::init (void)
-{
-  double sqrt_eps = sqrt (DBL_EPSILON);
-  x_absolute_tolerance = sqrt_eps;
-  x_initial_step_size = -1.0;
-  x_maximum_step_size = -1.0;
-  x_minimum_step_size = 0.0;
-  x_relative_tolerance = sqrt_eps;
-}
-
-void
-LSODE_options::copy (const LSODE_options& opt)
-{
-  x_absolute_tolerance = opt.x_absolute_tolerance;
-  x_initial_step_size = opt.x_initial_step_size;
-  x_maximum_step_size = opt.x_maximum_step_size;
-  x_minimum_step_size = opt.x_minimum_step_size;
-  x_relative_tolerance = opt.x_relative_tolerance;
-}
-
-void
-LSODE_options::set_default_options (void)
-{
-  init ();
-}
-
-void
-LSODE_options::set_absolute_tolerance (double val)
-{
-  x_absolute_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
-}
-
-void
-LSODE_options::set_initial_step_size (double val)
-{
-  x_initial_step_size = (val >= 0.0) ? val : -1.0;
-}
-
-void
-LSODE_options::set_maximum_step_size (double val)
-{
-  x_maximum_step_size = (val >= 0.0) ? val : -1.0;
-}
-
-void
-LSODE_options::set_minimum_step_size (double val)
-{
-  x_minimum_step_size = (val >= 0.0) ? val : 0.0;
-}
-
-void
-LSODE_options::set_relative_tolerance (double val)
-{
-  x_relative_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
-}
-
-double
-LSODE_options::absolute_tolerance (void)
-{
-  return x_absolute_tolerance;
-}
-
-double
-LSODE_options::initial_step_size (void)
-{
-  return x_initial_step_size;
-}
-
-double
-LSODE_options::maximum_step_size (void)
-{
-  return x_maximum_step_size;
-}
-
-double
-LSODE_options::minimum_step_size (void)
-{
-  return x_minimum_step_size;
-}
-
-double
-LSODE_options::relative_tolerance (void)
-{
-  return x_relative_tolerance;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -27,56 +27,102 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #if 0
 class ostream;
 #endif
 
+#include <cmath>
+
 #include "ODE.h"
 
-class LSODE_options
+class
+LSODE_options
 {
- public:
+public:
+
+  LSODE_options (void) { init (); }
 
-  LSODE_options (void);
-  LSODE_options (const LSODE_options& opt);
+  LSODE_options (const LSODE_options& opt) { copy (opt); }
+
+  LSODE_options& operator = (const LSODE_options& opt)
+    {
+      if (this != &opt)
+	copy (opt);
 
-  LSODE_options& operator = (const LSODE_options& opt);
+      return *this;
+    }
+
+  ~LSODE_options (void) { }
 
-  ~LSODE_options (void);
+  void init (void)
+    {
+      double sqrt_eps = ::sqrt (DBL_EPSILON);
 
-  void init (void);
-  void copy (const LSODE_options& opt);
+      x_absolute_tolerance = sqrt_eps;
+      x_initial_step_size = -1.0;
+      x_maximum_step_size = -1.0;
+      x_minimum_step_size = 0.0;
+      x_relative_tolerance = sqrt_eps;
+    }
 
-  void set_default_options (void);
+  void copy (const LSODE_options& opt)
+    {
+      x_absolute_tolerance = opt.x_absolute_tolerance;
+      x_initial_step_size = opt.x_initial_step_size;
+      x_maximum_step_size = opt.x_maximum_step_size;
+      x_minimum_step_size = opt.x_minimum_step_size;
+      x_relative_tolerance = opt.x_relative_tolerance;
+    }
 
-  void set_absolute_tolerance (double);
-  void set_initial_step_size (double);
-  void set_maximum_step_size (double);
-  void set_minimum_step_size (double);
-  void set_relative_tolerance (double);
+  void set_default_options (void) { init (); }
+
+  void set_absolute_tolerance (double val)
+    { x_absolute_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
+
+  void set_initial_step_size (double val)
+    { x_initial_step_size = (val >= 0.0) ? val : -1.0; }
+
+  void set_maximum_step_size (double val)
+    { x_maximum_step_size = (val >= 0.0) ? val : -1.0; }
 
-  double absolute_tolerance (void);
-  double initial_step_size (void);
-  double maximum_step_size (void);
-  double minimum_step_size (void);
-  double relative_tolerance (void);
+  void set_minimum_step_size (double val)
+    { x_minimum_step_size = (val >= 0.0) ? val : 0.0; }
+
+  void set_relative_tolerance (double val)
+    { x_relative_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
+
+  double absolute_tolerance (void)
+    { return x_absolute_tolerance; }
 
- private:
+  double initial_step_size (void)
+    { return x_initial_step_size; }
+
+  double maximum_step_size (void)
+    { return x_maximum_step_size; }
+
+  double minimum_step_size (void)
+    { return x_minimum_step_size; }
+
+  double relative_tolerance (void)
+    {  return x_relative_tolerance; }
+
+private:
 
   double x_absolute_tolerance;
   double x_initial_step_size;
   double x_maximum_step_size;
   double x_minimum_step_size;
   double x_relative_tolerance;
 };
 
-class LSODE : public ODE, public LSODE_options
+class
+LSODE : public ODE, public LSODE_options
 {
 public:
 
   LSODE (void);
 
   LSODE (int n);
   
   LSODE (const ColumnVector& state, double time, const ODEFunc& f);
