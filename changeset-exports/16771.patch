# HG changeset patch
# User Rik <rik@octave.org>
# Date 1371603480 25200
#      Tue Jun 18 17:58:00 2013 -0700
# Node ID d8a719ccd4643be2385f4edaec8238fa1a03f696
# Parent  2b86cb4e172b6db6c01831ca983b7bd088d7017b
doc: Improve documentation for command debugger.

* doc/interpreter/debug.txi: Correct line numbers in examples.

* libinterp/interpfcn/debug.cc(dbstop, dbclear): Add new calling
forms to docstring to clarify behavior.

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -86,42 +86,43 @@ Note that breakpoints cannot be set in b
 set a breakpoint immediately on entering a function, the breakpoint
 should be set to line 1. The leading comment block will be ignored and
 the breakpoint will be set to the first executable statement in the
 function.  For example:
 
 @example
 @group
 dbstop ("asind", 1)
-@result{} 28
+@result{} 29
 @end group
 @end example
 
 @noindent
-Note that the return value of @code{27} means that the breakpoint was
-effectively set to line 27.  The status of breakpoints in a function can
+Note that the return value of @code{29} means that the breakpoint was
+effectively set to line 29.  The status of breakpoints in a function can
 be queried with the @code{dbstatus} function.
 
 @DOCSTRING(dbstatus)
 
 @noindent
-Taking the above as an example, @code{dbstatus ("asind")} should return
-28.  The breakpoints can then be cleared with the @code{dbclear} function
+Reusing the previous example, @code{dbstatus ("asind")} will return
+29.  The breakpoints listed can then be cleared with the @code{dbclear}
+function.
 
 @DOCSTRING(dbclear)
 
 @noindent
-These functions can be used to clear all the breakpoints in a function.  For
-example:
+These functions can be used together to clear all the breakpoints in a
+particular function.  For example:
 
 @example
 dbclear ("asind", dbstatus ("asind"));
 @end example
 
-A breakpoint can be set in a subfunction.  For example if a file contains
+A breakpoint may also be set in a subfunction.  For example, if a file contains
 the functions
 
 @example
 @group
 function y = func1 (x)
   y = func2 (x);
 endfunction
 function y = func2 (x)
@@ -146,17 +147,17 @@ subfunctions from the file containing th
 
 Another simple way of setting a breakpoint in an Octave script is the
 use of the @code{keyboard} function.
 
 @DOCSTRING(keyboard)
 
 @noindent
 The @code{keyboard} function is typically placed in a script at the
-point where the user desires that the execution is stopped.  It
+point where the user desires that the execution be stopped.  It
 automatically sets the running script into the debug mode.
 
 @node Debug Mode
 @section Debug Mode
 
 There are two additional support functions that allow the user to
 interrogate where in the execution of a script Octave entered the debug
 mode and to print the code in the script surrounding the point where
@@ -167,17 +168,17 @@ Octave entered debug mode.
 @DOCSTRING(dbtype)
 
 You may also use @code{isdebugmode} to determine whether the debugger is
 currently active.
 
 @DOCSTRING(isdebugmode)
 
 Debug mode also allows single line stepping through a function using
-the commands @code{dbstep}.
+the command @code{dbstep}.
 
 @DOCSTRING(dbstep)
 
 @node Call Stack
 @section Call Stack
 
 @DOCSTRING(dbstack)
 
diff --git a/libinterp/interpfcn/debug.cc b/libinterp/interpfcn/debug.cc
--- a/libinterp/interpfcn/debug.cc
+++ b/libinterp/interpfcn/debug.cc
@@ -604,17 +604,18 @@ intmap_to_ov (const bp_table::intmap& li
   retval.resize (dim_vector (1, idx));
 
   return retval;
 }
 
 DEFUN (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{rline} =} dbstop (\"@var{func}\")\n\
-@deftypefnx {Built-in Function} {@var{rline} =} dbstop (\"@var{func}\", @var{line}, @dots{})\n\
+@deftypefnx {Built-in Function} {@var{rline} =} dbstop (\"@var{func}\", @var{line})\n\
+@deftypefnx {Built-in Function} {@var{rline} =} dbstop (\"@var{func}\", @var{line1}, @var{line2}, @dots{})\n\
 Set a breakpoint in function @var{func}.\n\
 \n\
 Arguments are\n\
 \n\
 @table @var\n\
 @item func\n\
 Function name as a string variable.  When already in debug\n\
 mode this should be left out and only the line should be given.\n\
@@ -649,24 +650,26 @@ next executable line.\n\
 
   return intmap_to_ov (retval);
 }
 
 DEFUN (dbclear, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} dbclear (\"@var{func}\")\n\
 @deftypefnx {Built-in Function} {} dbclear (\"@var{func}\", @var{line}, @dots{})\n\
+@deftypefnx {Built-in Function} {} dbclear (@var{line}, @dots{})\n\
 Delete a breakpoint in the function @var{func}.\n\
 \n\
 Arguments are\n\
 \n\
 @table @var\n\
 @item func\n\
 Function name as a string variable.  When already in debug\n\
-mode this should be left out and only the line should be given.\n\
+mode this argument should be omitted and only the line number should be\n\
+given.\n\
 \n\
 @item line\n\
 Line number from which to remove a breakpoint.  Multiple\n\
 lines may be given as separate arguments or as a vector.\n\
 @end table\n\
 \n\
 When called without a line number specification all breakpoints\n\
 in the named function are cleared.\n\
