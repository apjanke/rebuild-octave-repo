# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512156273 28800
#      Fri Dec 01 11:24:33 2017 -0800
# Node ID cac0f8a1c696f22f5b5e287af681a95fcdb00706
# Parent  1b17a5d82e3f69910ef80936da20f9cd7c1b26b7
Stop segfault when starting Octave with conflicting options (bug #52567).

* octave.cc: Replace warning() function calls with direct print of message to
std::cerr.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -227,17 +227,17 @@ namespace octave
             panic_impossible ();
             break;
           }
       }
 
     // Check for various incompatible argument pairs
     if (m_force_gui && m_no_gui)
       {
-        warning ("only one of --force-gui and --no-gui may be used");
+        std::cerr << "error: only one of --force-gui and --no-gui may be used\n";
 
         octave_print_terse_usage_and_exit ();
       }
 
     m_remaining_args = string_vector (argv+octave_optind_wrapper (),
                                       argc-octave_optind_wrapper ());
   }
 
@@ -359,17 +359,17 @@ namespace octave
     std::string code_to_eval = m_options.code_to_eval ();
 
     m_have_script_file = ! remaining_args.empty ();
 
     m_have_eval_option_code = ! code_to_eval.empty ();
 
     if (m_have_eval_option_code && m_have_script_file)
       {
-        warning (R"(--eval "CODE" and script file are mutually exclusive options)");
+        std::cerr << R"(error: --eval "CODE" and script file are mutually exclusive options)" << std::endl;
 
         octave_print_terse_usage_and_exit ();
       }
 
     m_is_octave_program = ((m_have_script_file || m_have_eval_option_code)
                            && ! m_options.persist ()
                            && ! m_options.traditional ());
 
@@ -392,24 +392,25 @@ namespace octave
 // embedded is int here because octave_main is extern "C".
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   if (embedded)
     {
       if (argc > 0)
-        warning ("ignoring command line options for embedded octave");
+        std::cerr << "warning: ignoring command line options for embedded octave\n";
 
       static octave::interpreter embedded_interpreter;
       return embedded_interpreter.execute ();
     }
   else
     {
-      warning ("octave_main should only be used to create an embedded interpreter");
+      std::cerr << "warning: octave_main should only be used to create an embedded interpreter";
+
       static octave::cli_application app (argc, argv);
       return app.execute ();
     }
 }
 
 DEFUN (isguirunning, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isguirunning ()
