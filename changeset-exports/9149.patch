# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1240435591 14400
#      Wed Apr 22 17:26:31 2009 -0400
# Node ID 7120fbbecf9740b4fe72f53ea94b2e6188172c80
# Parent  69e6bbfef8c2ebbb125fe1e21832cb302bb14075
ov-base-int.cc: correct result for template specialization

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-04-22  John W. Eaton  <jwe@octave.org>
 
+	* ov-base-int.cc (octave_base_int_helper<T, false,
+	false>::char_value_out_of_range): Correct result for specialization.
+
 	* ov-class.cc (octave_class::dotref, octave_class::subsasgn):
 	Protect against possibly invalid octave_value -> string conversions.
 
 2009-04-22  Robert T. Short  <octave@phaselockedsystems.com>
 
 	* variables.cc (symbol_exist): Also return 1 for objects.
 	* ov-base.h (octave_base_value::assign): New virtual function.
 	* ov-class.h (octave_class::assign): New function.
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -66,17 +66,17 @@ struct octave_base_int_helper
 {
   static bool
   char_value_out_of_range (T val) { return val < 0 || val > UCHAR_MAX; }
 };
 
 template <class T>
 struct octave_base_int_helper<T, false, false>
 {
-  static bool char_value_out_of_range (T) { return true; }
+  static bool char_value_out_of_range (T) { return false; }
 };
 
 template <class T>
 struct octave_base_int_helper<T, false, true>
 {
   static bool char_value_out_of_range (T val) { return val > UCHAR_MAX; }
 };
 
