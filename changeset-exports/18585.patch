# HG changeset patch
# User Rik <rik@octave.org>
# Date 1395520846 25200
#      Sat Mar 22 13:40:46 2014 -0700
# Branch gui-release
# Node ID e7b347dcfc635b1daab33942eb2bb8e88bde275e
# Parent  89b7bd7d0b831dfa722a42a23445438dd1d8e891
# Parent  51a0d1c1023c085862b7d892553ccfab7eafb2a1
maint: Periodic merge of stable to gui-release.

diff --git a/scripts/gui/listdlg.m b/scripts/gui/listdlg.m
--- a/scripts/gui/listdlg.m
+++ b/scripts/gui/listdlg.m
@@ -89,31 +89,31 @@ function [sel, ok] = listdlg (varargin)
   initialvalue = 1;
   name = "";
   prompt = {};
   okstring = "OK";
   cancelstring = "Cancel";
 
   ## handle key, value pairs
   for i = 1:2:nargin-1
-    if (strcmp (varargin{i}, "ListString"))
+    if (strcmpi (varargin{i}, "ListString"))
       listcell = varargin{i+1};
-    elseif (strcmp (varargin{i}, "SelectionMode"))
+    elseif (strcmpi (varargin{i}, "SelectionMode"))
       selmode = varargin{i+1};
-    elseif (strcmp (varargin{i}, "ListSize"))
+    elseif (strcmpi (varargin{i}, "ListSize"))
       listsize = varargin{i+1};
-    elseif (strcmp (varargin{i}, "InitialValue"))
+    elseif (strcmpi (varargin{i}, "InitialValue"))
       initialvalue = varargin{i+1};
-    elseif (strcmp (varargin{i}, "Name"))
+    elseif (strcmpi (varargin{i}, "Name"))
       name = varargin{i+1};
-    elseif (strcmp (varargin{i}, "PromptString"))
+    elseif (strcmpi (varargin{i}, "PromptString"))
       prompt = varargin{i+1};
-    elseif (strcmp (varargin{i}, "OKString"))
+    elseif (strcmpi (varargin{i}, "OKString"))
       okstring = varargin{i+1};
-    elseif (strcmp (varargin{i}, "CancelString"))
+    elseif (strcmpi (varargin{i}, "CancelString"))
       cancelstring = varargin{i+1};
     endif
   endfor
 
   ## make sure prompt strings are a cell array
   if (! iscell (prompt))
     prompt = {prompt};
   endif
@@ -125,36 +125,40 @@ function [sel, ok] = listdlg (varargin)
 
   ## make sure valid selection mode
   if (! strcmp (selmode, "Multiple") && ! strcmp (selmode, "Single"))
     error ("invalid SelectionMode");
   endif
 
   if (__octave_link_enabled__ ())
     [sel, ok] = __octave_link_list_dialog__ (listcell, selmode, listsize,
-                                            initialvalue, name, prompt,
-                                            okstring, cancelstring);
+                                             initialvalue, name, prompt,
+                                             okstring, cancelstring);
   elseif (__have_feature__ ("JAVA"))
     ## transform matrices to cell arrays of strings
     ## swap width and height to correct calling format for JDialogBox
     listsize = {num2str(listsize(2)), num2str(listsize(1))};
     initialvalue = arrayfun (@num2str, initialvalue, "UniformOutput", false);
     if (isempty (prompt))
       prompt = {""};
     endif
 
     ret = javaMethod ("listdlg", "org.octave.JDialogBox", listcell,
                       selmode, listsize, initialvalue, name, prompt,
                       okstring, cancelstring);
 
     if (numel (ret) > 0)
-      sel = ret;
+      sel = zeros (1, numel (ret));
+      ## for loop needed to convert Java array ret into Octave double sel
+      for i = 1:numel (ret)
+        sel(i) = ret(i);
+      endfor
       ok = 1;
     else
-      sel = {};
+      sel = [];
       ok = 0;
     endif
   else
     error ("listdlg is not available in this version of Octave");
   endif
 
 endfunction
 
diff --git a/scripts/gui/waitbar.m b/scripts/gui/waitbar.m
--- a/scripts/gui/waitbar.m
+++ b/scripts/gui/waitbar.m
@@ -125,19 +125,17 @@ function h = waitbar (varargin)
     ## Cache the axes and patch handles.
     set (hf, "__guidata__", [ax hp]);
 
     if (! (ischar (msg) || iscellstr (msg)))
       msg = "Please wait...";
     endif
     title (ax, msg);
 
-    if (! isempty (cf))
-      set (0, "currentfigure", cf);
-    endif
+    set (0, "currentfigure", cf);
   endif
 
   drawnow ();
 
   if (nargout > 0)
     h = hf;
   endif
 
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2010-2013 Ben Abbott
+## Copyright (C) 2010-2014 Ben Abbott
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -130,16 +130,17 @@ function [C, position] = textscan (fid, 
   else
     ## Check if there's at least one string format specifier
     has_str_fmt = regexp (format, '%[*]?\d*s', "once");
     ## If there is a string format AND whitespace value = empty,
     ## don't add a space (char(32)) to whitespace
     if (! (isempty (args{ipos+1}) && has_str_fmt))
       args{ipos+1} = unique ([" ", args{ipos+1}]);
     endif
+    whitespace = args{ipos+1};
   endif
 
   if (! any (strcmpi (args, "delimiter")))
     ## Matlab says default delimiter = whitespace.
     ## strread() will pick this up further
     args(end+1:end+2) = {'delimiter', ""};
     delimiter = "";
   else
@@ -656,8 +657,12 @@ endfunction
 %! msg1 = "textscan: character value required for EndOfLine";
 %! try
 %! A = textscan (fid, "%f", "EndOfLine", 33);
 %! end_try_catch;
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
+%% Bug #41824
+%!test
+%! assert (textscan ("123", "", "whitespace", " "){:}, 123);
+
