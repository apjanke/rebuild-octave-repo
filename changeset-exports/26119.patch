# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542831857 18000
#      Wed Nov 21 15:24:17 2018 -0500
# Node ID 1dd0e16b82e3f608b557944e9ef22ec064df96ae
# Parent  7502fce4cd3abc0835996d1d949b7a950f0c56f7
eliminate some unnecessary function arguments

* symscope.h, symscope.cc (symbol_scope::find,
symbol_scope_rep::find): Eliminate ARGS, SKIP_VARIABLES, and
LOCAL_FUNCS args.  These functions were always called with ARGS set to
an empty octave_value_list object, SKIP_VARIABLES set to false, and
LOCAL_FUNCS set to true.  Change all uses.

* symtab.h, symtab.cc (symbol_table::fcn_table_find): Eliminate
optional LOCAL_FUNCS argument.  This function was always called with
LOCAL_FUNCS set to true.  Change all uses.

* ov-fcn-handle.h, ov-fcn-handle.cc (make_fcn_handle): Eliminate
optional LOCAL_FUNCS argument.  This function was always called with
LOCAL_FUNCS set to true.  Change all uses.

* fcn-info.h, fcn-info.cc (fcn_info::fcn_info_rep::find,
fcn_info::fcn_info_rep::xfind, fcn_info::fcn_info_rep::find_function,
fcn_info::find, fcn_inof::find_function): Eliminate optional
LOCAL_FUNCS argument.  These functions were was always called with
LOCAL_FUNCS set to true.  Change all uses.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1998,20 +1998,23 @@ namespace octave
   {
     symbol_table& symtab
       = __get_symbol_table__ ("file_editor_tab::exit_debug_and_clear");
 
     std::string base_name = base_name_q.toStdString ();
     octave_value sym;
     try
       {
+        // FIXME: maybe we should be looking up functions directly
+        // instead of using a function that can also find variables?
+
         symbol_scope curr_scope
           = __get_current_scope__ ("file_editor_tab::exit_debug_and_clear");
 
-        sym = curr_scope.find (base_name, octave_value_list (), false, true);
+        sym = curr_scope.find (base_name);
       }
     catch (const execution_exception& e)
       {
         // Ignore syntax error.
         // It was in the old file on disk; the user may have fixed it already.
       }
 
     // Return early if this file is not loaded in the symbol table
diff --git a/libinterp/corefcn/fcn-info.cc b/libinterp/corefcn/fcn-info.cc
--- a/libinterp/corefcn/fcn-info.cc
+++ b/libinterp/corefcn/fcn-info.cc
@@ -340,117 +340,113 @@ namespace octave
   //   autoload function
   //   function on the path
   //   built-in function
   //
   // Matlab documentation states that constructors have higher precedence
   // than methods, but that does not seem to be the case.
 
   octave_value
-  fcn_info::fcn_info_rep::find (const octave_value_list& args, bool local_funcs)
+  fcn_info::fcn_info_rep::find (const octave_value_list& args)
   {
-    octave_value retval = xfind (args, local_funcs);
+    octave_value retval = xfind (args);
 
     if (retval.is_undefined ())
       {
         // It is possible that the user created a file on the fly since
         // the last prompt or chdir, so try updating the load path and
         // searching again.
 
         load_path& lp = __get_load_path__ ("fcn_info::fcn_info_rep::find");
 
         lp.update ();
 
-        retval = xfind (args, local_funcs);
+        retval = xfind (args);
       }
 
     return retval;
   }
 
   octave_value
-  fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
-                                 bool local_funcs)
+  fcn_info::fcn_info_rep::xfind (const octave_value_list& args)
   {
-    if (local_funcs)
-      {
-        symbol_scope curr_scope
-          = __get_current_scope__ ("fcn_info::fcn_info_rep::xfind");
+    symbol_scope curr_scope
+      = __get_current_scope__ ("fcn_info::fcn_info_rep::xfind");
+
+    octave_user_function *current_fcn
+      = curr_scope ? curr_scope.function () : nullptr;
 
-        octave_user_function *current_fcn
-          = curr_scope ? curr_scope.function () : nullptr;
-
-        // Local function.
+    // Local function.
 
-        if (current_fcn)
-          {
-            std::string fcn_file = current_fcn->fcn_file_name ();
+    if (current_fcn)
+      {
+        std::string fcn_file = current_fcn->fcn_file_name ();
 
-            // For anonymous functions we look at the parent scope so that if
-            // they were defined within class methods and use local functions
-            // (helper functions) we can still use those anonymous functions
+        // For anonymous functions we look at the parent scope so that if
+        // they were defined within class methods and use local functions
+        // (helper functions) we can still use those anonymous functions
 
-            if (current_fcn->is_anonymous_function ())
-              {
-                if (fcn_file.empty ()
-                    && curr_scope.parent_scope ()
-                    && curr_scope.parent_scope ()->function () != nullptr)
-                  fcn_file
-                    = curr_scope.parent_scope ()->function ()->fcn_file_name();
-              }
+        if (current_fcn->is_anonymous_function ())
+          {
+            if (fcn_file.empty ()
+                && curr_scope.parent_scope ()
+                && curr_scope.parent_scope ()->function () != nullptr)
+              fcn_file
+                = curr_scope.parent_scope ()->function ()->fcn_file_name();
+          }
 
-            if (! fcn_file.empty ())
+        if (! fcn_file.empty ())
+          {
+            auto r = local_functions.find (fcn_file);
+
+            if (r != local_functions.end ())
               {
-                auto r = local_functions.find (fcn_file);
+                // We shouldn't need an out-of-date check here since
+                // local functions may ultimately be called only from
+                // a primary function or method defined in the same
+                // file.
 
-                if (r != local_functions.end ())
-                  {
-                    // We shouldn't need an out-of-date check here since
-                    // local functions may ultimately be called only from
-                    // a primary function or method defined in the same
-                    // file.
-
-                    return r->second;
-                  }
+                return r->second;
               }
           }
+      }
 
-        // Private function.
+    // Private function.
 
-        if (current_fcn)
+    if (current_fcn)
+      {
+        std::string dir_name = current_fcn->dir_name ();
+
+        if (! dir_name.empty ())
           {
-            std::string dir_name = current_fcn->dir_name ();
+            auto q = private_functions.find (dir_name);
 
-            if (! dir_name.empty ())
+            if (q == private_functions.end ())
               {
-                auto q = private_functions.find (dir_name);
+                octave_value val = load_private_function (dir_name);
 
-                if (q == private_functions.end ())
+                if (val.is_defined ())
+                  return val;
+              }
+            else
+              {
+                octave_value& fval = q->second;
+
+                if (fval.is_defined ())
+                  out_of_date_check (fval, "", false);
+
+                if (fval.is_defined ())
+                  return fval;
+                else
                   {
                     octave_value val = load_private_function (dir_name);
 
                     if (val.is_defined ())
                       return val;
                   }
-                else
-                  {
-                    octave_value& fval = q->second;
-
-                    if (fval.is_defined ())
-                      out_of_date_check (fval, "", false);
-
-                    if (fval.is_defined ())
-                      return fval;
-                    else
-                      {
-                        octave_value val = load_private_function (dir_name);
-
-                        if (val.is_defined ())
-                          return val;
-                      }
-                  }
               }
           }
       }
 
     // Class methods.
 
     if (! args.empty ())
       {
diff --git a/libinterp/corefcn/fcn-info.h b/libinterp/corefcn/fcn-info.h
--- a/libinterp/corefcn/fcn-info.h
+++ b/libinterp/corefcn/fcn-info.h
@@ -76,37 +76,36 @@ namespace octave
       octave_value install_local_function (const std::string& file_name);
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value find (const octave_value_list& args, bool local_funcs);
+      octave_value find (const octave_value_list& args);
 
       octave_value builtin_find (void);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
       octave_value find_package (void);
 
       octave_value find_user_function (void);
 
       bool is_user_function_defined (void) const
       {
         return function_on_path.is_defined ();
       }
 
-      octave_value find_function (const octave_value_list& args,
-                                  bool local_funcs)
+      octave_value find_function (const octave_value_list& args)
       {
-        return find (args, local_funcs);
+        return find (args);
       }
 
       void install_cmdline_function (const octave_value& f)
       {
         cmdline_function = f;
       }
 
       void install_local_function (const octave_value& f,
@@ -217,36 +216,35 @@ namespace octave
       octave_value function_on_path;
 
       octave_value package;
 
       octave_value built_in_function;
 
     private:
 
-      octave_value xfind (const octave_value_list& args, bool local_funcs);
+      octave_value xfind (const octave_value_list& args);
 
       octave_value x_builtin_find (void);
     };
 
   public:
 
     fcn_info (const std::string& nm = "")
       : m_rep (new fcn_info_rep (nm)) { }
 
     fcn_info (const fcn_info&) = default;
 
     fcn_info& operator = (const fcn_info&) = default;
 
     ~fcn_info (void) = default;
 
-    octave_value find (const octave_value_list& args = octave_value_list (),
-                       bool local_funcs = true)
+    octave_value find (const octave_value_list& args = octave_value_list ())
     {
-      return m_rep->find (args, local_funcs);
+      return m_rep->find (args);
     }
 
     octave_value builtin_find (void)
     {
       return m_rep->builtin_find ();
     }
 
     octave_value find_method (const std::string& dispatch_type) const
@@ -275,20 +273,19 @@ namespace octave
     }
 
     bool is_user_function_defined (void) const
     {
       return m_rep->is_user_function_defined ();
     }
 
     octave_value find_function (const octave_value_list& args
-                                = octave_value_list (),
-                                bool local_funcs = true)
+                                = octave_value_list ())
     {
-      return m_rep->find_function (args, local_funcs);
+      return m_rep->find_function (args);
     }
 
     void install_cmdline_function (const octave_value& f)
     {
       m_rep->install_cmdline_function (f);
     }
 
     void install_local_function (const octave_value& f,
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -51,58 +51,50 @@ namespace octave
   void symbol_scope_rep::install_auto_fcn_var (const std::string& name)
   {
     insert (name, true);
     mark_hidden (name);
     mark_automatic (name);
   }
 
   octave_value
-  symbol_scope_rep::find (const std::string& name,
-                          const octave_value_list& args,
-                          bool skip_variables, bool local_funcs)
+  symbol_scope_rep::find (const std::string& name)
   {
-    // Variable.
-
     symbol_table& symtab
       = __get_symbol_table__ ("symbol_scope_rep::find");
 
-    if (! skip_variables)
-      {
-        table_iterator p = m_symbols.find (name);
+    // Variable.
+
+    table_iterator p = m_symbols.find (name);
 
-        if (p != m_symbols.end ())
-          {
-            symbol_record sr = p->second;
+    if (p != m_symbols.end ())
+      {
+        symbol_record sr = p->second;
 
-            if (sr.is_global ())
-              return symtab.global_varval (name);
-            else
-              {
-                octave_value val = sr.varval (m_context);
+        if (sr.is_global ())
+          return symtab.global_varval (name);
+        else
+          {
+            octave_value val = sr.varval (m_context);
 
-                if (val.is_defined ())
-                  return val;
-              }
+            if (val.is_defined ())
+              return val;
           }
       }
 
-    if (local_funcs)
-      {
-        // Subfunction.  I think it only makes sense to check for
-        // subfunctions if we are currently executing a function defined
-        // from a .m file.
+    // Subfunction.  I think it only makes sense to check for
+    // subfunctions if we are currently executing a function defined
+    // from a .m file.
 
-        octave_value fcn = find_subfunction (name);
+    octave_value fcn = find_subfunction (name);
 
-        if (fcn.is_defined ())
-          return fcn;
-      }
+    if (fcn.is_defined ())
+      return fcn;
 
-    return symtab.fcn_table_find (name, args, local_funcs);
+    return symtab.fcn_table_find (name, ovl ());
   }
 
   symbol_record&
   symbol_scope_rep::insert (const std::string& name, bool force_add)
   {
     table_iterator p = m_symbols.find (name);
 
     if (p == m_symbols.end ())
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -176,19 +176,17 @@ namespace octave
 
           if (dsr->is_nested ())
             dsr = parent_scope_rep ();
           else
             break;
         }
     }
 
-    octave_value
-    find (const std::string& name, const octave_value_list& args,
-          bool skip_variables, bool local_funcs);
+    octave_value find (const std::string& name);
 
     symbol_record&
     insert (const std::string& name, bool force_add = false);
 
     void rename (const std::string& old_name, const std::string& new_name)
     {
       auto p = m_symbols.find (old_name);
 
@@ -713,23 +711,19 @@ namespace octave
     }
 
     void inherit (const symbol_scope& donor_scope)
     {
       if (m_rep)
         m_rep->inherit (donor_scope.get_rep ());
     }
 
-    octave_value
-    find (const std::string& name, const octave_value_list& args,
-          bool skip_variables, bool local_funcs)
+    octave_value find (const std::string& name)
     {
-      return (m_rep
-              ? m_rep->find (name, args, skip_variables, local_funcs)
-              : octave_value ());
+      return m_rep ? m_rep->find (name) : octave_value ();
     }
 
     symbol_record&
     insert (const std::string& name, bool force_add = false)
     {
       static symbol_record dummy_symrec;
       return m_rep ? m_rep->insert (name, force_add) : dummy_symrec;
     }
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -375,54 +375,52 @@ namespace octave
         return fcn;
       }
 
     return octave_value ();
   }
 
   octave_value
   symbol_table::fcn_table_find (const std::string& name,
-                                const octave_value_list& args,
-                                bool local_funcs)
+                                const octave_value_list& args)
   {
     fcn_table_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
-      return p->second.find (args, local_funcs);
+      return p->second.find (args);
     else
       {
         fcn_info finfo (name);
 
-        octave_value fcn = finfo.find (args, local_funcs);
+        octave_value fcn = finfo.find (args);
 
         if (fcn.is_defined ())
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
   octave_value
   symbol_table::find_function (const std::string& name,
-                               const octave_value_list& args,
-                               bool local_funcs)
+                               const octave_value_list& args)
   {
     octave_value fcn;
 
     if (m_current_scope)
       {
         fcn = m_current_scope.find_subfunction (name);
 
         if (fcn.is_defined ())
           return fcn;
       }
 
-    return fcn_table_find (name, args, local_funcs);
+    return fcn_table_find (name, args);
   }
 
   // FIXME: this function only finds legacy class methods, not
   // classdef methods.
 
   octave_value
   symbol_table::find_method (const std::string& name,
                              const std::string& dispatch_type)
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -205,23 +205,21 @@ namespace octave
       return (p != m_fcn_table.end ()
               ? p->second.find_autoload () : octave_value ());
     }
 
     octave_value builtin_find (const std::string& name);
 
     octave_value
     fcn_table_find (const std::string& name,
-                    const octave_value_list& args = octave_value_list (),
-                    bool local_funcs = true);
+                    const octave_value_list& args = octave_value_list ());
 
     octave_value
     find_function (const std::string& name,
-                   const octave_value_list& args = octave_value_list (),
-                   bool local_funcs = true);
+                   const octave_value_list& args = octave_value_list ());
 
     octave_value find_user_function (const std::string& name)
     {
       auto p = m_fcn_table.find (name);
 
       return (p != m_fcn_table.end ()
               ? p->second.find_user_function () : octave_value ());
     }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -3376,17 +3376,17 @@ cdef_package::cdef_package_rep::get_pack
 octave_value
 cdef_package::cdef_package_rep::find (const std::string& nm)
 {
   std::string symbol_name = get_name () + '.' + nm;
 
   octave::symbol_scope curr_scope
     = octave::__get_current_scope__ ("cdef_package::cdef_package_rep::find");
 
-  return curr_scope.find (symbol_name, octave_value_list (), false, true);
+  return curr_scope.find (symbol_name);
 }
 
 octave_value_list
 cdef_package::cdef_package_rep::meta_subsref
   (const std::string& type, const std::list<octave_value_list>& idx,
    int nargout)
 {
   octave_value_list retval;
@@ -3788,18 +3788,17 @@ cdef_manager::find_class (const std::str
 
           size_t pos = name.rfind ('.');
 
           if (pos == std::string::npos)
             {
               octave::symbol_scope curr_scope
                 = m_interpreter.get_current_scope ();
 
-              ov_cls = curr_scope.find (name, octave_value_list (),
-                                        false, true);
+              ov_cls = curr_scope.find (name);
             }
           else
             {
               std::string pack_name = name.substr (0, pos);
 
               cdef_package pack = find_package (pack_name, false, true);
 
               if (pack.ok ())
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1454,17 +1454,17 @@ octave_fcn_handle::print_raw (std::ostre
     }
 
   if (! printed)
     octave_print_internal (os, '@' + nm, pr_as_read_syntax,
                            current_print_indent_level ());
 }
 
 octave_value
-make_fcn_handle (const std::string& nm, bool local_funcs)
+make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
   // Bow to the god of compatibility.
 
   // FIXME: it seems ugly to put this here, but there is no single
   // function in the parser that converts from the operator name to
   // the corresponding function name.  At least try to do it without N
@@ -1588,27 +1588,25 @@ make_fcn_handle (const std::string& nm, 
         case '|':
           tnm = "or";
           break;
         }
     }
 
   octave::symbol_table& symtab = octave::__get_symbol_table__ ("make_fcn_handle");
 
-  octave_value f = symtab.find_function (tnm, octave_value_list (),
-                                         local_funcs);
+  octave_value f = symtab.find_function (tnm, octave_value_list ());
 
   octave_function *fptr = f.function_value (true);
 
   // Here we are just looking to see if FCN is a method or constructor
   // for any class.
-  if (local_funcs && fptr
-      && (fptr->is_subfunction () || fptr->is_private_function ()
-          || fptr->is_class_constructor ()
-          || fptr->is_classdef_constructor ()))
+  if (fptr && (fptr->is_subfunction () || fptr->is_private_function ()
+               || fptr->is_class_constructor ()
+               || fptr->is_classdef_constructor ()))
     {
       // Locally visible function.
       retval = octave_value (new octave_fcn_handle (f, tnm));
     }
   else
     {
       octave::load_path& lp = octave::__get_load_path__ ("make_fcn_handle");
 
@@ -1880,17 +1878,17 @@ functions.  This option is no longer sup
         retval = anon_fcn_handle;
     }
   else
     {
       if (nargin == 2)
         warning_with_id ("Octave:str2func-global-argument",
                          "str2func: second argument ignored");
 
-      retval = make_fcn_handle (nm, true);
+      retval = make_fcn_handle (nm);
     }
 
   return retval;
 }
 
 /*
 %!test
 %! f = str2func ("<");
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -178,18 +178,17 @@ protected:
 
   bool parse_anon_fcn_handle (const std::string& fcn_text);
 
   virtual octave_value_list call (int nargout, const octave_value_list& args);
 
   friend octave_value make_fcn_handle (const std::string &, bool);
 };
 
-extern octave_value make_fcn_handle (const std::string& nm,
-                                     bool local_funcs = true);
+extern octave_value make_fcn_handle (const std::string& nm);
 
 class
 OCTINTERP_API
 octave_fcn_binder : public octave_fcn_handle
 {
 private:
   // Private ctor.
   octave_fcn_binder (const octave_value& f, const octave_value& root,
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5002,17 +5002,17 @@ namespace octave
     if (extension == std::string::npos)
       extension = file_name.length ();
 
     std::string symbol = file_name.substr (dir_end, extension - dir_end);
     std::string full_name = sys::canonicalize_file_name (file_name);
 
     // Check if this file is already loaded (or in the path)
     symbol_scope curr_scope = __get_current_scope__ ("source_file");
-    octave_value ov_code = curr_scope.find (symbol, ovl (), false, true);
+    octave_value ov_code = curr_scope.find (symbol);
 
     // For compatibility with Matlab, accept both scripts and
     // functions.
 
     if (ov_code.is_user_code ())
       {
         octave_user_code *code = ov_code.user_code_value ();
 
