# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485437206 18000
#      Thu Jan 26 08:26:46 2017 -0500
# Node ID 0fed4c678795a12f66b264285f7f4598951b082a
# Parent  bc601e5137c55b21ef4fc8182538af4dfcdaa5a8
additional restructuring of startup and shutdown

* main-window.h, main-window.cc (main_window::~main_window):
Don't delete _octave_qt_link here.
(main_window::exit_app): Delete.
(main_window::construct_octave_qt_link): Delete connection from
octave_qt_link::exit_app_signal to main_window::exit_app slot.
Call octave_link::connect_link immediately after constructing new
octave_qt_link_object.

* octave-interpreter.h, octave-interpreter.cc
(octave_interpreter::m_exit_status): Delete unused data member.
(octave_interpreter::execute): Call qApp->exit here.

* octave-link.h (octave_link::do_exit): Delete.
(octave_link::exit): Delete.
(octave_link::disconnect_link, octave_link::enable,
octave_link::disable, octave_link::do_enable,
octave_link::do_disable): New functions.
(octave_link::process_events): Call do_disable instead of accessing link_enabled directly.
(octave_link::confirm_shutdown): Check enabled, not instance_ok.

* octave-qt-link.h, octave-qt-link.cc (octave_qt_link::do_exit):
Delete.
(octave_qt_link::exit_app_signal): Delete.

* interpreter.h, interpreter.cc (interpreter::execute_internal):
New function.  Perform interpreter::execute actions here.  Simply handle
If not in persist mode, simply return status from
execute_eval_option_code and execute_command_line_file.
Simply return status from main_loop.  Don't set m_quitting_gracefully here.
(interpreter::execute): Wrap interpreter::execute_internal in
try-catch block.  If exit_exception is caught, process octave_link
events and disconnect link here.  Call cleanup here, not from destructor.
(interpreter::m_quitting_gracefully): Delete data member and all uses.
(safe_source_file, execute_pkg_add): Don't catch index_exception.
Dopn't display message for execution_exception.
(initialize_load_path, execute_startup_files):
Return status from safe_source_file.  Don't fail, but preserve any
non-zero status.
(interpreter::execute_eval_option_code):
Don't catch exit_exception here.
(interpreter::main_loop): Don't print extra newline when interactive
main loop is done.
(interpreter::cleanup): Don't call raw_mode.

diff --git a/etc/HACKING b/etc/HACKING
--- a/etc/HACKING
+++ b/etc/HACKING
@@ -331,17 +331,17 @@ An overview of the directory layout of O
 
     fntests.m        script to run function tests embedded in C++ and
                      .m files
 
 ----
 John W. Eaton
 jwe@octave.org
 
-Last updated: Tue, 29 Oct 2013 11:42:47 PDT
+Last updated: Thu, 26 Jan 2017 08:29:19 EST
 
 
 ################################################################################
 
 Copyright (C) 2009-2016 John W. Eaton
 
 This file is part of Octave.
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -157,17 +157,16 @@ main_window::~main_window (void)
       delete _settings_dlg;
       _settings_dlg = 0;
     }
   if (community_news_window)
     {
       delete community_news_window;
       community_news_window = 0;
     }
-  delete _octave_qt_link;
 }
 
 // catch focus changes and determine the active dock widget
 void
 main_window::focus_changed (QWidget *, QWidget *new_widget)
 {
   octave_dock_widget* dock = 0;
   QWidget *w_new = new_widget;  // get a copy of new focus widget
@@ -826,22 +825,16 @@ main_window::prepare_to_exit (void)
   // caused it to run after QSettings deleted.
   if (find_files_dlg)
     find_files_dlg->save_settings ();
 
   write_settings ();
 }
 
 void
-main_window::exit_app (int status)
-{
-  qApp->exit (status);
-}
-
-void
 main_window::reset_windows (void)
 {
   QSettings *settings = resource_manager::get_default_settings ();
 
   set_window_layout (settings);
   showNormal ();  // make sure main window is not minimized
 }
 
@@ -1510,18 +1503,17 @@ main_window::handle_octave_ready ()
 
 }
 
 void
 main_window::construct_octave_qt_link (void)
 {
   _octave_qt_link = new octave_qt_link (this, m_app_context);
 
-  connect (_octave_qt_link, SIGNAL (exit_app_signal (int)),
-           this, SLOT (exit_app (int)));
+  octave_link::connect_link (_octave_qt_link);
 
   connect (_octave_qt_link, SIGNAL (confirm_shutdown_signal ()),
            this, SLOT (confirm_shutdown_octave ()));
 
   connect (_octave_qt_link,
            SIGNAL (copy_image_to_clipboard_signal (const QString&, bool)),
            this, SLOT (copy_image_to_clipboard (const QString&, bool)));
 
@@ -1611,18 +1603,16 @@ main_window::construct_octave_qt_link (v
                this,
                SLOT (handle_rename_variable_request (const QString&,
                                                      const QString&)));
 
       connect (command_window, SIGNAL (interrupt_signal (void)),
                _octave_qt_link, SLOT (terminal_interrupt (void)));
     }
 
-  octave_link::connect_link (_octave_qt_link);
-
   // Defer initializing and executing the interpreter until after the main
   // window and QApplication are running to prevent race conditions
   QTimer::singleShot (0, this, SLOT (execute_octave_interpreter ()));
 }
 
 void
 main_window::execute_octave_interpreter (void)
 {
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -137,17 +137,16 @@ public slots:
                                                          = QString ());
 
   void copy_image_to_clipboard (const QString& file, bool remove_file);
 
   void show_about_octave (void);
   void notice_settings (const QSettings *settings);
   void confirm_shutdown_octave (void);
   void prepare_to_exit (void);
-  void exit_app (int status);
   void reset_windows (void);
 
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
diff --git a/libgui/src/octave-interpreter.cc b/libgui/src/octave-interpreter.cc
--- a/libgui/src/octave-interpreter.cc
+++ b/libgui/src/octave-interpreter.cc
@@ -20,38 +20,41 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <QApplication>
+
 #include "octave.h"
 
 #include "octave-interpreter.h"
 
 octave_interpreter::octave_interpreter (octave::application *app_context)
-  : QObject (), thread_manager (), m_app_context (app_context),
-    m_exit_status (0)
+  : QObject (), thread_manager (), m_app_context (app_context)
 { }
 
 void
 octave_interpreter::execute (void)
 {
   thread_manager.register_current_thread ();
 
   octave_thread_manager::unblock_interrupt_signal ();
 
   // The application context owns the interpreter.
 
   m_app_context->create_interpreter ();
 
   emit octave_ready_signal ();
 
-  m_exit_status = m_app_context->execute_interpreter ();
+  int exit_status = m_app_context->execute_interpreter ();
+
+  qApp->exit (exit_status);
 }
 
 void
 octave_interpreter::interrupt (void)
 {
   thread_manager.interrupt ();
 }
diff --git a/libgui/src/octave-interpreter.h b/libgui/src/octave-interpreter.h
--- a/libgui/src/octave-interpreter.h
+++ b/libgui/src/octave-interpreter.h
@@ -54,13 +54,11 @@ public slots:
 
   void interrupt (void);
 
 private:
 
   octave_thread_manager thread_manager;
 
   octave::application *m_app_context;
-
-  int m_exit_status;
 };
 
 #endif
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -91,26 +91,16 @@ octave_qt_link::do_confirm_shutdown (voi
   // The GUI has sent a signal and the thread has been awakened.
 
   mutex.unlock ();
 
   return _shutdown_confirm_result;
 }
 
 bool
-octave_qt_link::do_exit (int status)
-{
-  emit exit_app_signal (status);
-
-  // Could wait for a while and then timeout, but for now just
-  // assume the GUI application exit will be without problems.
-  return true;
-}
-
-bool
 octave_qt_link::do_copy_image_to_clipboard (const std::string& file)
 {
   emit copy_image_to_clipboard_signal (QString::fromStdString (file), true);
 
   return true;
 }
 
 bool
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -58,17 +58,16 @@ public:
 
   octave_qt_link (QWidget *p, octave::gui_application *app_context);
 
   ~octave_qt_link (void);
 
   void execute_interpreter (void);
 
   bool do_confirm_shutdown (void);
-  bool do_exit (int status);
 
   bool do_copy_image_to_clipboard (const std::string& file);
 
   bool do_edit_file (const std::string& file);
   bool do_prompt_new_edit_file (const std::string& file);
 
   int do_message_dialog (const std::string& dlg, const std::string& msg,
                          const std::string& title);
@@ -200,16 +199,15 @@ signals:
   void insert_debugger_pointer_signal (const QString&, int);
   void delete_debugger_pointer_signal (const QString&, int);
 
   void show_preferences_signal (void);
 
   void show_doc_signal (const QString &file);
 
   void confirm_shutdown_signal (void);
-  void exit_app_signal (int status);
 
 public slots:
 
   void terminal_interrupt (void);
 };
 
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -357,68 +357,48 @@ safe_source_file (const std::string& fil
                   const std::string& context = "",
                   bool verbose = false, bool require_file = true,
                   const std::string& warn_for = "")
 {
   try
     {
       octave::source_file (file_name, context, verbose, require_file, warn_for);
     }
-  catch (const octave::index_exception& e)
-    {
-      recover_from_exception ();
-
-      std::cerr << "error: index exception in " << file_name << ": "
-                << e.message () << std::endl;
-
-      return 1;
-    }
   catch (const octave::interrupt_exception&)
     {
       recover_from_exception ();
 
       return 1;
     }
   catch (const octave::execution_exception&)
     {
       recover_from_exception ();
 
-      std::cerr << "error: execution exception in " << file_name << std::endl;
-
       return 1;
     }
 
   return 0;
 }
 
 static void
 execute_pkg_add (const std::string& dir)
 {
   std::string file_name = octave::sys::file_ops::concat (dir, "PKG_ADD");
 
   try
     {
       load_path::execute_pkg_add (dir);
     }
-  catch (const octave::index_exception& e)
-    {
-      recover_from_exception ();
-
-      std::cerr << "error: index exception in " << file_name << ": "
-                << e.message () << std::endl;
-    }
   catch (const octave::interrupt_exception&)
     {
       recover_from_exception ();
     }
   catch (const octave::execution_exception&)
     {
       recover_from_exception ();
-
-      std::cerr << "error: execution exception in " << file_name << std::endl;
     }
 }
 
 static void
 initialize_load_path (bool set_initial_path)
 {
   // Temporarily set the execute_pkg_add function to one that catches
   // exceptions.  This is better than wrapping load_path::initialize in
@@ -432,41 +412,52 @@ initialize_load_path (bool set_initial_p
 
   frame.add_fcn (load_path::set_add_hook, load_path::get_add_hook ());
 
   load_path::set_add_hook (execute_pkg_add);
 
   load_path::initialize (set_initial_path);
 }
 
-// Initialize by reading startup files.
+// Initialize by reading startup files.  Return non-zero if an exception
+// occurs when reading any of them, but don't exit early because of an
+// exception.
 
-static void
+static int
 execute_startup_files (bool read_site_files, bool read_init_files,
                        bool verbose_flag, bool inhibit_startup_message)
 {
   octave::unwind_protect frame;
 
   std::string context;
 
   bool verbose = (verbose_flag && ! inhibit_startup_message);
 
   bool require_file = false;
 
+  int exit_status = 0;
+
   if (read_site_files)
     {
       // Execute commands from the site-wide configuration file.
       // First from the file $(prefix)/lib/octave/site/m/octaverc
       // (if it exists), then from the file
       // $(prefix)/share/octave/$(version)/m/octaverc (if it exists).
 
-      safe_source_file (Vlocal_site_defaults_file, context, verbose,
-                        require_file);
+      int status = safe_source_file (Vlocal_site_defaults_file, context,
+                                     verbose, require_file);
+
+      if (status)
+        exit_status = status;
 
-      safe_source_file (Vsite_defaults_file, context, verbose, require_file);
+      status = safe_source_file (Vsite_defaults_file, context, verbose,
+                                 require_file);
+
+      if (status)
+        exit_status = status;
     }
 
   if (read_init_files)
     {
       // Try to execute commands from $HOME/$OCTAVE_INITFILE and
       // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set,
       // .octaverc is assumed.
 
@@ -480,17 +471,21 @@ execute_startup_files (bool read_site_fi
       std::string home_dir = octave::sys::env::get_home_directory ();
 
       std::string home_rc = octave::sys::env::make_absolute (initfile, home_dir);
 
       std::string local_rc;
 
       if (! home_rc.empty ())
         {
-          safe_source_file (home_rc, context, verbose, require_file);
+          int status = safe_source_file (home_rc, context, verbose,
+                                         require_file);
+
+          if (status)
+            exit_status = status;
 
           // Names alone are not enough.
 
           octave::sys::file_stat fs_home_rc (home_rc);
 
           if (fs_home_rc)
             {
               // We want to check for curr_dir after executing home_rc
@@ -502,29 +497,34 @@ execute_startup_files (bool read_site_fi
             }
         }
 
       if (! home_rc_already_executed)
         {
           if (local_rc.empty ())
             local_rc = octave::sys::env::make_absolute (initfile);
 
-          safe_source_file (local_rc, context, verbose, require_file);
+          int status = safe_source_file (local_rc, context, verbose,
+                                         require_file);
+
+          if (status)
+            exit_status = status;
         }
     }
+
+  return exit_status;
 }
 
 namespace octave
 {
   tree_evaluator *current_evaluator = 0;
 
   interpreter::interpreter (application *app_context, bool embedded)
     : m_app_context (app_context), m_evaluator (new tree_evaluator (this)),
-      m_embedded (embedded), m_interactive (false),
-      m_quitting_gracefully (false)
+      m_embedded (embedded), m_interactive (false)
   {
     current_evaluator = m_evaluator;
 
     cmdline_options options = m_app_context->options ();
 
     // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
     setlocale (LC_NUMERIC, "C");
     setlocale (LC_TIME, "C");
@@ -634,101 +634,101 @@ namespace octave
 
     initialize_load_path (options.set_initial_path ());
 
     initialize_history (options.read_history_file ());
   }
 
   interpreter::~interpreter (void)
   {
-    cleanup ();
-
     current_evaluator = 0;
 
     delete m_evaluator;
   }
 
   int interpreter::execute (void)
   {
+    int exit_status = 0;
+
+    try
+      {
+        exit_status = execute_internal ();
+      }
+    catch (const octave::exit_exception& ex)
+      {
+        exit_status = ex.exit_status ();
+      }
+
+    cleanup ();
+
+    return exit_status;
+  }
+
+  int interpreter::execute_internal (void)
+  {
     cmdline_options options = m_app_context->options ();
 
     if (m_interactive && ! options.inhibit_startup_message ())
       std::cout << octave_startup_message () << "\n" << std::endl;
 
     octave_prepare_hdf5 ();
 
-    execute_startup_files (options.read_site_files (),
-                           options.read_init_files (),
-                           options.verbose_flag (),
-                           options.inhibit_startup_message ());
+    // Don't fail, but return non-zero if there is an error in a startup
+    // file.
+
+    int exit_status = 0;
+
+    int status = execute_startup_files (options.read_site_files (),
+                                        options.read_init_files (),
+                                        options.verbose_flag (),
+                                        options.inhibit_startup_message ());
+
+    if (status)
+      exit_status = status;
 
     if (m_interactive && ! options.inhibit_startup_message ()
         && reading_startup_message_printed)
       std::cout << std::endl;
 
     // Execute any code specified with --eval 'CODE'
     std::string code_to_eval = options.code_to_eval ();
 
     if (! code_to_eval.empty ())
       {
-        int exit_status = 0;
+        status = execute_eval_option_code (code_to_eval);
 
-        try
-          {
-            exit_status = execute_eval_option_code (code_to_eval);
-          }
-        catch (const octave::exit_exception& ex)
-          {
-            recover_from_exception ();
-
-            return ex.exit_status ();
-          }
+        if (status)
+          exit_status = status;
 
         if (! options.persist ())
-          {
-            m_quitting_gracefully = true;
-
-            return exit_status;
-          }
+          return exit_status;
       }
 
     // If there is an extra argument, see if it names a file to read.
     // Additional arguments are taken as command line options for the script.
 
     if (m_app_context->have_script_file ())
       {
         // If we are running an executable script (#! /bin/octave) then
         // we should only see the args passed to the script.
 
-        int exit_status = 0;
+        string_vector script_args = options.remaining_args ();
 
-        try
-          {
-            string_vector script_args = options.remaining_args ();
-
-            m_app_context->intern_argv (script_args);
+        m_app_context->intern_argv (script_args);
 
-            exit_status = execute_command_line_file (script_args[0]);
-          }
-        catch (const octave::exit_exception& ex)
-          {
-            recover_from_exception ();
+        status = execute_command_line_file (script_args[0]);
 
-            return ex.exit_status ();
-          }
+        if (status)
+          exit_status = status;
 
         // Restore full set of args.
         m_app_context->intern_argv (options.all_args ());
 
         if (! options.persist ())
-          {
-            m_quitting_gracefully = true;
-
-            return exit_status;
-          }
+          return exit_status;
       }
 
     // Avoid counting commands executed from startup or script files.
 
     octave::command_editor::reset_current_command_number (1);
 
     // Force input to be echoed if not really interactive,
     // but the user has forced interactive behavior.
@@ -745,21 +745,17 @@ namespace octave
       {
         // FIXME: Do we need to do any cleanup here before returning?
         // If we don't, what will happen to Octave functions that have been
         // registered to execute with atexit, for example?
 
         return 1;
       }
 
-    int retval = main_loop ();
-
-    m_quitting_gracefully = true;
-
-    return retval;
+    return main_loop ();
   }
 
   int interpreter::execute_eval_option_code (const std::string& code)
   {
     octave::unwind_protect frame;
 
     octave_save_signal_mask ();
 
@@ -899,26 +895,16 @@ namespace octave
                       octave_completion_matches_called = false;
                     else
                       octave::command_editor::increment_current_command_number ();
                   }
                 else if (parser.lexer.end_of_input)
                   break;
               }
           }
-        catch (const octave::exit_exception& ex)
-          {
-            recover_from_exception ();
-
-            // If we are connected to a gui, allow it to manage the exit
-            // process.
-            octave_link::exit (ex.exit_status ());
-
-            return ex.exit_status ();
-          }
         catch (const octave::interrupt_exception&)
           {
             recover_from_exception ();
 
             // Required newline when the user does Ctrl+C at the prompt.
             if (octave::application::interactive ())
               octave_stdout << "\n";
           }
@@ -959,29 +945,32 @@ namespace octave
           {
             if (setjump (naninf_jump) != 0)
               debug_or_throw_exception (true);  // true = stack trace
           }
 #endif
       }
     while (retval == 0);
 
-    if (octave::application::interactive ())
-      octave_stdout << "\n";
-
     if (retval == EOF)
       retval = 0;
 
     return retval;
   }
 
   void interpreter::cleanup (void)
   {
     static bool deja_vu = false;
 
+    // If we are attached to a GUI, process pending events and
+    // disconnect the link.
+
+    octave_link::process_events (true);
+    octave_link::disconnect_link ();
+
     OCTAVE_SAFE_CALL (remove_input_event_hook_functions, ());
 
     while (! octave_atexit_functions.empty ())
       {
         std::string fcn = octave_atexit_functions.front ();
 
         octave_atexit_functions.pop_front ();
 
@@ -998,19 +987,16 @@ namespace octave
 
         // Do this explicitly so that destructors for mex file objects
         // are called, so that functions registered with mexAtExit are
         // called.
         OCTAVE_SAFE_CALL (clear_mex_functions, ());
 
         OCTAVE_SAFE_CALL (octave::command_editor::restore_terminal_state, ());
 
-        // FIXME: is this needed?  Can it cause any trouble?
-        OCTAVE_SAFE_CALL (raw_mode, (0));
-
         OCTAVE_SAFE_CALL (octave_history_write_timestamp, ());
 
         if (! octave::command_history::ignoring_entries ())
           OCTAVE_SAFE_CALL (octave::command_history::clean_up_and_save, ());
 
         OCTAVE_SAFE_CALL (gh_manager::close_all_figures, ());
 
         OCTAVE_SAFE_CALL (gtk_manager::unload_all_toolkits, ());
@@ -1022,17 +1008,17 @@ namespace octave
         OCTAVE_SAFE_CALL (symbol_table::cleanup, ());
 
         OCTAVE_SAFE_CALL (sysdep_cleanup, ());
 
         OCTAVE_SAFE_CALL (octave_finalize_hdf5, ());
 
         OCTAVE_SAFE_CALL (octave::flush_stdout, ());
 
-        if (! m_quitting_gracefully && octave::application::interactive ())
+        if (octave::application::interactive ())
           {
             octave_stdout << "\n";
 
             // Yes, we want this to be separate from the call to
             // octave::flush_stdout above.
 
             OCTAVE_SAFE_CALL (octave::flush_stdout, ());
           }
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -113,26 +113,26 @@ namespace octave
 
     int execute_command_line_file (const std::string& fname);
 
     bool interactive (void) const { return m_interactive; }
     void interactive (bool arg) { m_interactive = arg; }
 
   private:
 
+    int execute_internal (void);
+
     int main_loop (void);
 
     void cleanup (void);
 
     application *m_app_context;
 
     tree_evaluator *m_evaluator;
 
     bool m_embedded;
 
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
-
-    bool m_quitting_gracefully;
   };
 }
 
 #endif
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -71,60 +71,38 @@ public:
   // If disable is TRUE, then no additional events will be processed
   // other than exit.
 
   static void process_events (bool disable = false)
   {
     if (enabled ())
       {
         if (disable)
-          instance->link_enabled = false;
+          instance->do_disable ();
 
         instance->do_process_events ();
       }
   }
 
   static void discard_events (void)
   {
     if (enabled ())
       instance->do_discard_events ();
   }
 
   static bool confirm_shutdown (void)
   {
     bool retval = true;
 
-    if (instance_ok ())
+    if (enabled ())
       retval = instance->do_confirm_shutdown ();
 
     return retval;
   }
 
-  static bool exit (int status, bool process_events = true)
-  {
-    bool retval = false;
-
-    if (instance_ok ())
-      {
-        if (process_events)
-          {
-            // Disable additional event processing prior to processing
-            // all other pending events.
-
-            instance->link_enabled = false;
-
-            instance->do_process_events ();
-          }
-
-        retval = instance->do_exit (status);
-      }
-
-    return retval;
-  }
-
   template <typename T>
   static void post_event (T *obj, void (T::*method) (void))
   {
     if (enabled ())
       instance->do_post_event (obj, method);
   }
 
   template <typename T, typename A>
@@ -327,23 +305,63 @@ public:
                      const std::string& cond = "")
   {
     if (enabled ())
       instance->do_update_breakpoint (insert, file, line, cond);
   }
 
   static void connect_link (octave_link *);
 
+  static octave_link *disconnect_link (bool delete_instance = true)
+  {
+    if (delete_instance)
+      {
+        delete instance;
+        instance = 0;
+        return 0;
+      }
+    else
+      {
+        octave_link *retval = instance;
+        instance = 0;
+        return retval;
+      }
+  }
+
   static void set_default_prompts (std::string& ps1, std::string& ps2,
                                    std::string& ps4)
   {
     if (enabled ())
       instance->do_set_default_prompts (ps1, ps2, ps4);
   }
 
+  static bool enable (void)
+  {
+    return instance_ok () ? instance->do_enable () : false;
+  }
+
+  static bool disable (void)
+  {
+    return instance_ok () ? instance->do_disable () : false;
+  }
+
+  bool do_enable (void)
+  {
+    bool retval = link_enabled;
+    link_enabled = true;
+    return retval;
+  }
+
+  bool do_disable (void)
+  {
+    bool retval = link_enabled;
+    link_enabled = false;
+    return retval;
+  }
+
   static bool enabled (void)
   {
     return instance_ok () ? instance->link_enabled : false;
   }
 
   static bool
   show_preferences ()
   {
@@ -407,17 +425,16 @@ protected:
   {
     gui_event_queue.add_method (obj, method, arg);
   }
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   virtual bool do_confirm_shutdown (void) = 0;
-  virtual bool do_exit (int status) = 0;
 
   virtual bool do_copy_image_to_clipboard (const std::string& file) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
   virtual bool do_prompt_new_edit_file (const std::string& file) = 0;
 
   virtual int
   do_message_dialog (const std::string& dlg, const std::string& msg,
