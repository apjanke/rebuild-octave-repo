# HG changeset patch
# User dbateman
# Date 1196712996 0
#      Mon Dec 03 20:16:36 2007 +0000
# Node ID 3a695b7adf8e39b1f23dfb9739127f0281fe3b6c
# Parent  7d7f05863f2701cce129462947c56acea03276b0
[project @ 2007-12-03 20:16:36 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2007-12-03  David Bateman  <dbateman@free.fr>
+
+	* plot/plotyy.m: Use activepositionproperty property of axes
+	object. Set second axis color to "none".
+	* plot/__go_draw_axes__.m: Respect the activepositionproperty
+	property of the axis objects.
+
 2007-12-03  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* linear-algebra/condest.m: Loosen tolerance in test.
 
 2007-12-02  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Remove unnecessary call to
 	get_data_limits.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -28,28 +28,30 @@ function __go_draw_axes__ (h, plot_strea
 
     parent_figure_obj = get (axis_obj.parent);
 
     persistent have_newer_gnuplot ...
       = compare_versions (__gnuplot_version__ (), "4.0", ">");
 
     ## Set axis properties here?
     pos = [0, 0, 1, 1];
-    if (! isempty (axis_obj.outerposition))
-      pos = axis_obj.outerposition;
-    endif
-
-    ymirror = true;
-    if (! isempty (axis_obj.position))
-      pos = axis_obj.position;
-      fprintf (plot_stream, "set tmargin 3;\n");
-      fprintf (plot_stream, "set bmargin 3;\n");
-      fprintf (plot_stream, "set lmargin 10;\n");
-      fprintf (plot_stream, "set rmargin 10;\n");
+    if (strcmp (axis_obj.activepositionproperty, "outerposition"))
+      ymirror = true;
+      if (! isempty (axis_obj.outerposition))
+	pos = axis_obj.outerposition;
+      endif
+    else
       ymirror = false;
+      if (! isempty (axis_obj.position))
+	pos = axis_obj.position;
+	fprintf (plot_stream, "set tmargin 0;\n");
+	fprintf (plot_stream, "set bmargin 0;\n");
+	fprintf (plot_stream, "set lmargin 0;\n");
+	fprintf (plot_stream, "set rmargin 0;\n");
+      endif
     endif
 
     if (! strcmp (axis_obj.__colorbar__, "none"))
       [pos, cbox_orient, cbox_size, cbox_origin, cbox_mirror] = ...
 	  gnuplot_postion_colorbox (pos, axis_obj.__colorbar__);
     endif
 
     fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -90,30 +90,33 @@ function [ax, h1, h2] = __plotyy__ (ax, 
     fun2 = fun1;
   endif
 
   xlim = [min([x1(:); x2(:)]), max([x1(:); x2(:)])];
 
   h1 = feval (fun1, x1, y1);
 
   set (ax(1), "ycolor", getcolor (h1(1)));
-  set (ax(1), "position", get (ax(1), "outerposition"));
+  set (ax(1), "position", [0.11 0.13 0.78 0.73]);
+  set (ax(1), "activepositionproperty", "position");
   set (ax(1), "xlim", xlim);
 
   cf = gcf ();
   set (cf, "nextplot", "add");
   ax(2) = axes ();
   colors = get (ax(1), "colororder");
   set (ax(2), "colororder", [colors(2:end,:); colors(1,:)]);
 
   h2 = feval (fun2, x2, y2);
   set (ax(2), "yaxislocation", "right");
   set (ax(2), "ycolor", getcolor (h2(1)));
-  set (ax(2), "position", get (ax(1), "outerposition"));
+  set (ax(2), "position", get (ax(1), "position"));
+  set (ax(2), "activepositionproperty", "position");
   set (ax(2), "xlim", xlim);
+  set (ax(2), "color", "none");
 endfunction
 
 function color = getcolor (ax)
   obj = get (ax);
   if (isfield (obj, "color"))
     color = obj.color;
   elseif (isfield (obj, "facecolor") && ! ischar (obj.facecolor))
     color = obj.facecolor;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-12-02  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (class axes): Add color and activepositionproperty
+	properties to axis objects.
+	* graphics.h.in (class axes): ditto.
+
 2007-12-03  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc: Also include sys/types.h for regexp.
 
 2007-11-30  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/sort.cc (operator < (const Complex&, const Complex&),
 	operator > (const Complex&, const Complex&)):
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1109,31 +1109,33 @@ axes::properties::properties (const grap
     ytickmode ("auto"),
     ztickmode ("auto"),
     xticklabel (""),
     yticklabel (""),
     zticklabel (""),
     xticklabelmode ("auto"),
     yticklabelmode ("auto"),
     zticklabelmode ("auto"),
+    color (color_values(0, 0, 0), radio_values ("flat|none|interp")),
     xcolor (),
     ycolor (),
     zcolor (),
     xscale (radio_values ("{linear}|log")),
     yscale (radio_values ("{linear}|log")),
     zscale (radio_values ("{linear}|log")),
     xdir ("normal"),
     ydir ("normal"),
     zdir ("normal"),
     xaxislocation ("bottom"),
     yaxislocation ("left"),
     view (),
     visible ("on"),
     nextplot ("replace"),
     outerposition (),
+    activepositionproperty (radio_values ("{outerposition}|position")),
     __colorbar__ (radio_values ("{none}|north|south|east|west|northoutside|southoutside|eastoutside|westoutside"))
 {
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
   xlim = tlim;
   ylim = tlim;
   zlim = tlim;
   Matrix cl (1, 2, 0);
@@ -1301,16 +1303,18 @@ axes::properties::set (const caseless_st
   else if (name.compare ("zticklabel"))
     set_zticklabel (val);
   else if (name.compare ("xticklabelmode"))
     set_xticklabelmode (val);
   else if (name.compare ("yticklabelmode"))
     set_yticklabelmode (val);
   else if (name.compare ("zticklabelmode"))
     set_zticklabelmode (val);
+  else if (name.compare ("color"))
+    set_color (val);
   else if (name.compare ("xcolor"))
     set_xcolor (val);
   else if (name.compare ("ycolor"))
     set_ycolor (val);
   else if (name.compare ("zcolor"))
     set_zcolor (val);
   else if (name.compare ("xscale"))
     set_xscale (val);
@@ -1331,16 +1335,18 @@ axes::properties::set (const caseless_st
   else if (name.compare ("view"))
     set_view (val);
   else if (name.compare ("visible"))
     set_visible (val);
   else if (name.compare ("nextplot"))
     set_nextplot (val);
   else if (name.compare ("outerposition"))
     set_outerposition (val);
+  else if (name.compare ("activepositionproperty"))
+    set_activepositionproperty (val);
   else if (name.compare ("__colorbar__"))
     set___colorbar__ (val);
   else
     {
       modified = false;
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
@@ -1392,16 +1398,17 @@ axes::properties::set_defaults (base_gra
   ytickmode = "auto";
   ztickmode = "auto";
   xticklabel = "";
   yticklabel = "";
   zticklabel = "";
   xticklabelmode = "auto";
   yticklabelmode = "auto";
   zticklabelmode = "auto";
+  color = color_property (color_values (0, 0, 0), radio_values("flat|none|interp"));
   xcolor = color_property ("black");
   ycolor = color_property ("black");
   zcolor = color_property ("black");
   xscale = radio_property (radio_values ("{linear}|log"));
   yscale = radio_property (radio_values ("{linear}|log"));
   zscale = radio_property (radio_values ("{linear}|log"));
   xdir = "normal";
   ydir = "normal";
@@ -1422,16 +1429,17 @@ axes::properties::set_defaults (base_gra
   if (mode != "replace")
     {
       Matrix touterposition (1, 4, 0.0);
       touterposition(2) = 1;
       touterposition(3) = 1;
       outerposition = touterposition;
     }
 
+  activepositionproperty = radio_property (radio_values ("{outerposition}|position"));
   __colorbar__  = radio_property (radio_values ("{none}|north|south|east|west|northoutside|southoutside|eastoutside|westoutside"));
 
   delete_children ();
 
   children = Matrix ();
 
   override_defaults (obj);
 }
@@ -1515,31 +1523,33 @@ axes::properties::get (void) const
   m.assign ("ytickmode", ytickmode);
   m.assign ("ztickmode", ztickmode);
   m.assign ("xticklabel", xticklabel);
   m.assign ("yticklabel", yticklabel);
   m.assign ("zticklabel", zticklabel);
   m.assign ("xticklabelmode", xticklabelmode);
   m.assign ("yticklabelmode", yticklabelmode);
   m.assign ("zticklabelmode", zticklabelmode);
+  m.assign ("color", color);
   m.assign ("xcolor", xcolor);
   m.assign ("ycolor", ycolor);
   m.assign ("zcolor", zcolor);
   m.assign ("xscale", xscale);
   m.assign ("yscale", yscale);
   m.assign ("zscale", zscale);
   m.assign ("xdir", xdir);
   m.assign ("ydir", ydir);
   m.assign ("zdir", zdir);
   m.assign ("xaxislocation", xaxislocation);
   m.assign ("yaxislocation", yaxislocation);
   m.assign ("view", view);
   m.assign ("visible", visible);
   m.assign ("nextplot", nextplot);
   m.assign ("outerposition", outerposition);
+  m.assign ("activepositionproperty", activepositionproperty);
   m.assign ("__colorbar__", __colorbar__);
 
   return m;
 }
 
 octave_value
 axes::properties::get (const caseless_str& name) const
 {
@@ -1626,16 +1636,18 @@ axes::properties::get (const caseless_st
   else if (name.compare ("zticklabel"))
     retval = zticklabel;
   else if (name.compare ("xticklabelmode"))
     retval = xticklabelmode;
   else if (name.compare ("yticklabelmode"))
     retval = yticklabelmode;
   else if (name.compare ("zticklabelmode"))
     retval = zticklabelmode;
+  else if (name.compare ("color"))
+    retval = color;
   else if (name.compare ("xcolor"))
     retval = xcolor;
   else if (name.compare ("ycolor"))
     retval = ycolor;
   else if (name.compare ("zcolor"))
     retval = zcolor;
   else if (name.compare ("xscale"))
     retval = xscale;
@@ -1656,16 +1668,18 @@ axes::properties::get (const caseless_st
   else if (name.compare ("view"))
     retval = view;
   else if (name.compare ("visible"))
     retval = visible;
   else if (name.compare ("nextplot"))
     retval = nextplot;
   else if (name.compare ("outerposition"))
     retval = outerposition;
+  else if (name.compare ("activepositionproperty"))
+    retval = activepositionproperty;
   else if (name.compare ("__colorbar__"))
     retval = __colorbar__;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
@@ -1742,16 +1756,17 @@ axes::properties::factory_defaults (void
   m["ytickmode"] = "auto";
   m["ztickmode"] = "auto";
   m["xticklabel"] = "";
   m["yticklabel"] = "";
   m["zticklabel"] = "";
   m["xticklabelmode"] = "auto";
   m["yticklabelmode"] = "auto";
   m["zticklabelmode"] = "auto";
+  m["color"] = color_property (color_values (0, 0, 0), radio_values("flat|none|interp"));
   m["xcolor"] = color_property ("black");
   m["ycolor"] = color_property ("black");
   m["zcolor"] = color_property ("black");
   m["xscale"] = radio_property (radio_values ("{linear}|log"));
   m["yscale"] = radio_property (radio_values ("{linear}|log"));
   m["zscale"] = radio_property (radio_values ("{linear}|log"));
   m["xdir"] = "normal";
   m["ydir"] = "normal";
@@ -1767,16 +1782,17 @@ axes::properties::factory_defaults (void
   m["visible"] = "on";
   m["nextplot"] = "replace";
 
   Matrix touterposition (1, 4, 0.0);
   touterposition(2) = 1;
   touterposition(3) = 1;
 
   m["outerposition"] = touterposition;
+  m["activepositionproperty"] =  radio_property (radio_values ("{outerposition}|position"));
   m["__colorbar__"] = radio_property (radio_values ("{none}|north|south|east|west|northoutside|southoutside|eastoutside|westoutside"));
 
   return m;
 }
 
 octave_value
 axes::get_default (const caseless_str& name) const
 {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1371,31 +1371,33 @@ public:
       octave_value ytickmode
       octave_value ztickmode
       octave_value xticklabel m
       octave_value yticklabel m
       octave_value zticklabel m
       octave_value xticklabelmode
       octave_value yticklabelmode
       octave_value zticklabelmode
+      color_property color a
       color_property xcolor
       color_property ycolor
       color_property zcolor
       radio_property xscale al
       radio_property yscale al
       radio_property zscale al
       octave_value xdir
       octave_value ydir
       octave_value zdir
       octave_value xaxislocation
       octave_value yaxislocation
       octave_value view
       octave_value visible
       octave_value nextplot
       octave_value outerposition
+      radio_property activepositionproperty a
       radio_property __colorbar__ a
    END_PROPERTIES
 
     static std::string go_name;
   };
 
 private:
   properties xproperties;
