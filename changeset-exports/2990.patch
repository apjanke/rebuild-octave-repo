# HG changeset patch
# User jwe
# Date 863774352 0
#      Fri May 16 09:19:12 1997 +0000
# Node ID 35bd1b05cfbe506510dc80c782a65d4dd36e2cf6
# Parent  6a7b578b6fb4b14467de0bf3ea0ee9cd6e160cc8
[project @ 1997-05-16 09:19:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 Fri May 16 00:07:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-colon.h (tree_colon_expression::save_base): New data memmber.
+	(tree_colon_expression::preserve_base): New function.
+	* parse.y (finish_colon_expression): When converting to a simple
+	expression, be sure to delete the original colon expression but
+	not the base value.
+
+	* pt-mat.cc (tree_matrix::~tree_matrix): Actually do something.
+
 	* pt-all.h: New file.
 	* parse.y, lex.l, pt-pr-code.cc: Use it.
 
 	* pt.h: Rename from pt-base.h.
 
 	* All parse tree classes: Add private copy constructors and
 	assignment operators to prevent copying.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1551,18 +1551,18 @@ finish_colon_expression (tree_colon_expr
 	      else
 		delete e;
 	    }
 	  else
 	    retval = e;
 	}
       else
 	{
-	  // XXX FIXME XXX -- need to delete this without deleting base too.
-	  // delete e;
+	  e->preserve_base ();
+	  delete e;
 
 	  // XXX FIXME XXX -- need to attempt constant folding here
 	  // too (we need a generic way to do that).
 	  retval = base;
 	}
     }
 
   return retval;
diff --git a/src/pt-colon.h b/src/pt-colon.h
--- a/src/pt-colon.h
+++ b/src/pt-colon.h
@@ -40,28 +40,34 @@ class octave_lvalue;
 // Colon expressions.
 
 class
 tree_colon_expression : public tree_expression
 {
 public:
 
   tree_colon_expression (int l = -1, int c = -1)
-    : tree_expression (l, c), op_base (0), op_limit (0), op_increment (0) { }
+    : tree_expression (l, c), op_base (0), op_limit (0),
+      op_increment (0), save_base (false) { }
 
   tree_colon_expression (tree_expression *e, int l = -1, int c = -1)
-    : tree_expression (l, c), op_base (e), op_limit (0), op_increment (0) { }
+    : tree_expression (l, c), op_base (e), op_limit (0),
+      op_increment (0), save_base (false) { }
 
   ~tree_colon_expression (void)
     {
-      delete op_base;
+      if (! save_base)
+	delete op_base;
+
       delete op_limit;
       delete op_increment;
     }
 
+  void preserve_base (void) { save_base = true; }
+
   tree_colon_expression *append (tree_expression *t);
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
@@ -78,16 +84,18 @@ public:
 
 private:
 
   // The components of the expression.
   tree_expression *op_base;
   tree_expression *op_limit;
   tree_expression *op_increment;
 
+  bool save_base;
+
   // No copying!
 
   tree_colon_expression (const tree_colon_expression&);
 
   tree_colon_expression& operator = (const tree_colon_expression&);
 };
 
 #endif
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -99,48 +99,50 @@ private:
 
     void eval_error (const char *msg, int l, int c) const;
 
     void eval_warning (const char *msg, int l, int c) const;
   };
 
 public:
 
-  tm_row_const (void) : rep (0) { }
+  tm_row_const (void)
+    : rep (0) { }
 
   tm_row_const (const tree_argument_list& row)
     : rep (new tm_row_const_rep (row)) { }
 
-  tm_row_const (const tm_row_const& x) : rep (x.rep)
-    {
-      if (rep)
-	rep->count++;
-    }
+  tm_row_const (const tm_row_const& x)
+    : rep (x.rep)
+  {
+    if (rep)
+      rep->count++;
+  }
 
   tm_row_const& operator = (const tm_row_const& x)
-    {
-      if (this != &x && rep != x.rep)
-	{
-	  if (rep && --rep->count == 0)
-	    delete rep;
+  {
+    if (this != &x && rep != x.rep)
+      {
+	if (rep && --rep->count == 0)
+	  delete rep;
 
-	  rep = x.rep;
+	rep = x.rep;
 
-	  if (rep)
-	    rep->count++;
-	}
+	if (rep)
+	  rep->count++;
+      }
 
-      return *this;
-    }
+    return *this;
+  }
 
   ~tm_row_const (void)
-    {
-      if (rep && --rep->count == 0)
-	delete rep;
-    }
+  {
+    if (rep && --rep->count == 0)
+      delete rep;
+  }
 
   int rows (void) { return rep->nr; }
   int cols (void) { return rep->nc; }
 
   bool all_strings_p (void) const { return rep->all_str; }
   bool complex_p (void) const { return rep->is_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
 
@@ -148,20 +150,20 @@ public:
 
   const octave_value& operator () (Pix p) const
     { return rep->operator () (p); }
 
   Pix first (void) const { return rep->first (); }
   void next (Pix& p) const { rep->next (p); }
   
   operator void* () const
-    {
-      return (rep && rep->ok)
-	? static_cast<void *> (-1) : static_cast<void *> (0);
-    }
+  {
+    return (rep && rep->ok)
+      ? static_cast<void *> (-1) : static_cast<void *> (0);
+  }
 
 private:
 
   tm_row_const_rep *rep;
 };
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
@@ -374,16 +376,25 @@ tm_const::init (const tree_matrix& tm)
 	      nr += this_elt_nr;
 	    }
 	}
     }
 
   ok = ! error_state;
 }
 
+tree_matrix::~tree_matrix (void)
+{
+  while (! empty ())
+    {
+      tree_argument_list *t = remove_front ();
+      delete t;
+    }
+}
+
 bool
 tree_matrix::all_elements_are_constant (void) const
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_argument_list *elt = this->operator () (p);
 
       if (! elt->all_elements_are_constant ())
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -44,22 +44,22 @@ class tree_walker;
 
 class
 tree_matrix : public tree_expression, public SLList<tree_argument_list *>
 {
 public:
 
   tree_matrix (tree_argument_list *row = 0)
     : tree_expression (), SLList<tree_argument_list *> ()
-      {
-	if (row)
-	  append (row);
-      }
+  {
+    if (row)
+      append (row);
+  }
 
-  ~tree_matrix (void) { }
+  ~tree_matrix (void);
 
   bool all_elements_are_constant (void) const;
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
