# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1429627030 -3600
#      Tue Apr 21 15:37:10 2015 +0100
# Node ID 6ee26f89434621ed6e10351c051590490b78f69b
# Parent  8261c4a112507a3dca3659c4bc626e12d96a3e71
Add tests for bug #38821 which got fixed with cset 058e45de41cs

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2476,9 +2476,15 @@ Return true if @var{x} is a Java object.
 
 ## Check automatic conversion of octave types into java primitive arrays
 ## Note that uint8 are casted into int8
 %!assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2)
 %!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 255]), uint8  (255)) < 0)
 %!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 128]), uint8  (128)) < 0)
 %!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 127]), uint8  (127)), 2)
 %!assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2)
+
+## Check we can create objects that wrap java literals (bug #38821)
+%!assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
+%!assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
+%!assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
+%!assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
 */
