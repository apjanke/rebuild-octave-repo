# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549725264 0
#      Sat Feb 09 15:14:24 2019 +0000
# Node ID 606605d0cd310cf069842a7661f5bc54407262a5
# Parent  f35db7d5b7a4a54db32fae746851549a9852a45c
allow spaces in FQ_IDENT, SUPERCLASSREF, and METAQUERY tokens in lexer

This change is part of a fix for bug #47680.

* lex.ll (FQIDENT): Allow spaces around '.' character.
Allow spaces around '@' character when recognizing superclass method
identifiers.  Allow FQIDENT on either side of '@' character, not just
after it.  Allow Space between '?' and FQIDENT when recognizing
metaclass query.
(base_lexer::handle_superclass_identifier,
base_lexer::handle_meta_identifier, base_lexer::handle_fq_identifier):
Strip whitespace from text before creating tokens.
(is_space_or_tab): New static function.

* debug.cc: Update test for change in lexer.  We now have an ambiguity
with superclass references and things like "dbstop @ftp".  WDMD?

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -524,18 +524,18 @@ The @qcode{"warn"} field is set similarl
 /*
 %!test
 %! if (isguirunning ())
 %!   orig_show_dbg = __octave_link_gui_preference__ ("editor/show_dbg_file",
 %!                                                   "0");
 %! endif
 %! unwind_protect
 %!   dbclear all;   # Clear out breakpoints before test
-%!   dbstop @ftp/dir;
-%!   dbstop @audioplayer/set 70;
+%!   dbstop ("@ftp/dir");
+%!   dbstop ("@audioplayer/set", "70");
 %!   dbstop quantile>__quantile__;
 %!   dbstop ls;
 %!   s = dbstatus;
 %!   dbclear all;
 %!   assert (s(1).name, "@audioplayer/set>setproperty");
 %!   assert (s(2).name, "@ftp/dir");
 %!   assert (s(3).name, "ls");
 %!   assert (s(4).name, "quantile>__quantile__");
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -327,17 +327,17 @@ object) relevant global values before an
 
 D       [0-9]
 D_      [0-9_]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 Im      [iIjJ]
 CCHAR   [#%]
 IDENT   ([_$a-zA-Z][_$a-zA-Z0-9]*)
-FQIDENT ({IDENT}(\.{IDENT})*)
+FQIDENT ({IDENT}({S}*\.{S}*{IDENT})*)
 EXPON   ([DdEe][+-]?{D}{D_}*)
 NUMBIN  (0[bB][01_]+)
 NUMHEX  (0[xX][0-9a-fA-F][0-9a-fA-F_]*)
 NUMREAL (({D}{D_}*\.?{D_}*{EXPON}?)|(\.{D}{D_}*{EXPON}?))
 NUMBER  ({NUMREAL}|{NUMHEX}|{NUMBIN})
 
 ANY_EXCEPT_NL [^\r\n]
 ANY_INCLUDING_NL (.|{NL})
@@ -1074,17 +1074,17 @@ ANY_INCLUDING_NL (.|{NL})
     return curr_lexer->count_token_internal (LEXICAL_ERROR);
   }
 
 %{
 // Fully-qualified identifiers (used for classdef).
 %}
 
 <FQ_IDENT_START>{FQIDENT} {
-    curr_lexer->lexer_debug ("<FQ_IDENT_START>{FQIDENT}");
+    curr_lexer->lexer_debug ("<FQ_IDENT_START>{FQIDENT}{S}*");
     curr_lexer->pop_start_state ();
 
     int id_tok = curr_lexer->handle_fq_identifier ();
 
     if (id_tok >= 0)
       {
         curr_lexer->m_looking_for_object_index = true;
 
@@ -1094,16 +1094,18 @@ ANY_INCLUDING_NL (.|{NL})
 
 <FQ_IDENT_START>{S}+ {
     curr_lexer->m_current_input_column += yyleng;
 
     curr_lexer->mark_previous_token_trailing_space ();
   }
 
 <FQ_IDENT_START>. {
+    // If input doesn't match FQIDENT, return char and go to previous
+    // start state.
     yyless (0);
     curr_lexer->pop_start_state ();
   }
 
 %{
 // Imaginary numbers.
 %}
 
@@ -1240,18 +1242,18 @@ ANY_INCLUDING_NL (.|{NL})
 {IDENT} {
     HANDLE_IDENTIFIER ("{IDENT}", false);
   }
 
 %{
 // Superclass method identifiers.
 %}
 
-{IDENT}@{FQIDENT} {
-    curr_lexer->lexer_debug ("{IDENT}@{FQIDENT}");
+{FQIDENT}{S}*@{S}*{FQIDENT} {
+    curr_lexer->lexer_debug ("{FQIDENT}{S}*@{S}*{FQIDENT}");
 
     if (curr_lexer->previous_token_may_be_command ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
@@ -1265,18 +1267,18 @@ ANY_INCLUDING_NL (.|{NL})
           }
       }
   }
 
 %{
 // Metaclass query
 %}
 
-\?{FQIDENT} {
-    curr_lexer->lexer_debug ("\\?{FQIDENT}");
+\?{S}*{FQIDENT} {
+    curr_lexer->lexer_debug ("\\?{S}*{FQIDENT}");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
@@ -1795,16 +1797,22 @@ octave_realloc (void *ptr, yy_size_t siz
 }
 
 void
 octave_free (void *ptr, yyscan_t)
 {
   std::free (ptr);
 }
 
+static inline bool
+is_space_or_tab (char c)
+{
+  return c == ' ' || c == '\t';
+}
+
 static void
 display_character (char c)
 {
   if (isgraph (c))
     std::cerr << c;
   else
     switch (c)
       {
@@ -2962,16 +2970,19 @@ namespace octave
             && previous_token_may_be_command ());
   }
 
   int
   base_lexer::handle_superclass_identifier (void)
   {
     std::string txt = flex_yytext ();
 
+    txt.erase (std::remove_if (txt.begin (), txt.end (), is_space_or_tab),
+               txt.end ());
+
     size_t pos = txt.find ("@");
 
     std::string meth_or_obj = txt.substr (0, pos);
     std::string cls = txt.substr (pos + 1);
 
     bool kw_token = (is_keyword_token (meth_or_obj)
                      || fq_identifier_contains_keyword (cls));
 
@@ -2993,17 +3004,23 @@ namespace octave
     m_current_input_column += flex_yyleng ();
 
     return SUPERCLASSREF;
   }
 
   int
   base_lexer::handle_meta_identifier (void)
   {
-    std::string cls = std::string(flex_yytext ()).substr (1);
+    std::string txt = flex_yytext ();
+
+    txt.erase (std::remove_if (txt.begin (), txt.end (), is_space_or_tab),
+               txt.end ());
+
+    // Eliminate leading '?'
+    std::string cls = txt.substr (1);
 
     if (fq_identifier_contains_keyword (cls))
       {
         token *tok = new token (LEXICAL_ERROR,
                                 "class and package names may not be keywords",
                                 m_input_line_number, m_current_input_column);
         push_token (tok);
 
@@ -3016,31 +3033,34 @@ namespace octave
     m_current_input_column += flex_yyleng ();
 
     return METAQUERY;
   }
 
   int
   base_lexer::handle_fq_identifier (void)
   {
-    std::string fq_id = flex_yytext ();
-
-    if (fq_identifier_contains_keyword (fq_id))
+    std::string txt = flex_yytext ();
+
+    txt.erase (std::remove_if (txt.begin (), txt.end (), is_space_or_tab),
+               txt.end ());
+
+    if (fq_identifier_contains_keyword (txt))
       {
         token *tok
           = new token (LEXICAL_ERROR,
                        "function, method, class, and package names may not be keywords",
                        m_input_line_number, m_current_input_column);
 
         push_token (tok);
 
         return count_token_internal (LEXICAL_ERROR);
       }
 
-    push_token (new token (FQ_IDENT, fq_id, m_input_line_number,
+    push_token (new token (FQ_IDENT, txt, m_input_line_number,
                            m_current_input_column));
 
     m_current_input_column += flex_yyleng ();
 
     return FQ_IDENT;
   }
 
   // Figure out exactly what kind of token to return when we have seen
