# HG changeset patch
# User Michael Godfrey <michaeldgodfrey@gmail.com>
# Date 1361070419 18000
#      Sat Feb 16 22:06:59 2013 -0500
# Node ID 7cfb186592deb3afd2d7ee823a029187ab4aeba3
# Parent  821922270b66c35c6953c4441b36a24a8da573c0
Make signbit return logical 0 or 1 (bug #38291)

* libinterp/corefcn/mappers.cc(Fsignbit): Return logical
value (xsignbit != 0).

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1877,27 +1877,31 @@ whether zero is signed, use the @code{si
 
 %!error sign ()
 %!error sign (1, 2)
 */
 
 DEFUNX ("signbit", Fsignbit, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} signbit (@var{x})\n\
-Return a nonzero value if the value of @var{x} has its sign bit set.\n\
+Return logical true if the value of @var{x} has its sign bit set.\n\
+Otherwise return logical false.  This behavior is consistent with the other\n\
+logical functions. See@ref{Logical Values}.  The behavior differs from the\n\
+C language function which returns non-zero if the sign bit is set.\n\
 \n\
 This is not the same as @code{x < 0.0}, because IEEE 754 floating point\n\
 allows zero to be signed.  The comparison @code{-0.0 < 0.0} is false,\n\
 but @code{signbit (-0.0)} will return a nonzero value.\n\
 @seealso{sign}\n\
 @end deftypefn")
 {
   octave_value retval;
-  if (args.length () == 1)
+  if (args.length () == 1) {
     retval = args(0).xsignbit ();
+    retval = (retval != 0); }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!assert (signbit (1) == 0)
