# HG changeset patch
# User jwe
# Date 811149343 0
#      Fri Sep 15 07:15:43 1995 +0000
# Node ID 58d7f477c125922f11aadca390e78bc98e283880
# Parent  5f2cd468a1c30a0680ae74a57b00a246a73a9683
[project @ 1995-09-15 07:15:43 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -205,20 +205,19 @@ static struct option long_opts[] =
 static void
 intern_argv (int argc, char **argv)
 {
   if (argc > 1)
     {
       octave_argv.resize (argc-1);
       for (int i = 1; i < argc; i++)
 	octave_argv.elem (i-1) = argv[i];
+
+      bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
     }
-
-  tree_constant *tmp = new tree_constant (octave_argv);
-  bind_builtin_variable ("argv", tmp, 1, 1, 0);
 }
 
 // Initialize some global variables for later use.
 
 static void
 initialize_globals (char *name)
 {
   raw_prog_name = strsave (name);
@@ -646,26 +645,33 @@ main (int argc, char **argv)
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int remaining_args = argc - optind;
   if (remaining_args > 0)
     {
-      if (remaining_args == 1)
-	intern_argv (argc, argv);
-      else
-	intern_argv (remaining_args, argv+optind);
-
       reading_script_file = 1;
       curr_fcn_file_name = argv[optind];
+
       FILE *infile = get_input_from_file (curr_fcn_file_name);
+
       if (infile)
 	{
+	  bind_builtin_variable ("program_invocation_name",
+				 curr_fcn_file_name);
+
+	  char *tmp = strrchr (curr_fcn_file_name, '/');
+	  tmp = tmp ? tmp+1 : curr_fcn_file_name;
+
+	  bind_builtin_variable ("program_name", tmp);
+
+	  intern_argv (remaining_args, argv+optind);
+
 	  rl_blink_matching_paren = 0;
 	  switch_to_buffer (create_buffer (infile));
 	}
       else
 	clean_up_and_exit (1);
     }
   else
     {
