# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375490114 25200
#      Fri Aug 02 17:35:14 2013 -0700
# Node ID d74e2b5bdeb5e860007bca5fd09a1dcfdb20b294
# Parent  b491ef539071883277026787ce94fe785015d5e0
fplot.m: Accept an axis handle as first input.

* scripts/plot/fplot.m: Use __plt_axis_get_arg__ to accept an axis handle as
first input.

diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -35,16 +35,19 @@
 ## to 2e-3 (.2%).
 ## @var{n} is the minimum number of points to use.  When @var{n} is
 ## specified, the maximum stepsize will be
 ## @code{@var{xhi} - @var{xlo} / @var{n}}.  More than @var{n} points may still
 ## be used in order to meet the relative tolerance requirement.
 ## The @var{fmt} argument specifies the linestyle to be used by the plot
 ## command.
 ##
+## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## rather than the current axes returned by @code{gca}.
+##
 ## With no output arguments the results are immediately plotted.  With two
 ## output arguments the 2-D plot data is returned.  The data can subsequently
 ## be plotted manually with @code{plot (@var{x}, @var{y})}.
 ##
 ## Example:
 ##
 ## @example
 ## @group
@@ -56,22 +59,28 @@
 ## Note: @code{fplot} works best with continuous functions.  Functions with
 ## discontinuities are unlikely to plot well.  This restriction may be removed
 ## in the future.
 ## @seealso{ezplot, plot}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
-function [X, Y] = fplot (fn, limits, varargin)
+function [X, Y] = fplot (varargin)
+
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("fplot", varargin{:});
 
   if (nargin < 2 || nargin > 5)
     print_usage ();
   endif
 
+  fn = varargin{1};
+  limits = varargin{2};
+  varargin = varargin(3:end);
+
   if (strcmp (typeinfo (fn), "inline function"))
     fn = vectorize (fn);
     nam = formula (fn);
   elseif (isa (fn, "function_handle"))
     nam = func2str (fn);
   elseif (all (isalnum (fn)))
     nam = fn;
   elseif (ischar (fn))
@@ -149,25 +158,28 @@ function [X, Y] = fplot (fn, limits, var
     x = linspace (limits(1), limits(2), n)';
     y = feval (fn, x);
   endwhile
 
   if (nargout == 2)
     X = x;
     Y = y;
   else
-    plot (x, y, fmt);
-    axis (limits);
+    if (isempty (hax))
+      hax = gca ();
+    endif
+    plot (hax, x, y, fmt);
+    axis (hax, limits);
     if (isvector (y))
-      legend (nam);
+      legend (hax, nam);
     else
       for i = 1:columns (y)
         nams{i} = sprintf ("%s(:,%i)", nam, i);
       endfor
-      legend (nams{:});
+      legend (hax, nams{:});
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
