# HG changeset patch
# User jwe
# Date 1186767299 0
#      Fri Aug 10 17:34:59 2007 +0000
# Node ID 0089a504fdd68d5395f72fa0578ee0346e290828
# Parent  afa9123c5faac8e8f853d111d64e92ca121d7e92
[project @ 2007-08-10 17:34:59 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-08-10  Kai Habel  <kai.habel@gmx.de>
+
+	* plot/patch.m, plot/__patch__.m: New files.
+	* plot/Makefile.in (SOURCES): Add them to the list.
+
+2007-08-07  John W. Eaton  <jwe@octave.org>
+
+	* path/savepath.m: Use single quotes for argument to PATH command
+	that is inserted in file.
+
 2007-07-27  John W. Eaton  <jwe@octave.org>
 
 	* plot/drawnow.m: Only set default value for term if GNUTERM is
 	not set in the environment.
 
 2007-07-25  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in, audio/Makefile.in, control/Makefile.in,
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -103,17 +103,19 @@ function varargout = savepath (savefile)
   [fid, msg] = fopen (savefile, "wt");
   if (fid < 0)
     error ("savepath: unable to open file for writing, %s, %s", savefile, msg);
   end
   for i = 1:length (pre)
     fprintf (fid, "%s\n", pre{i})
   endfor
 
-  fprintf (fid, "%s\n  path (\"%s\");\n%s\n",
+  ## Use single quotes for PATH argument to avoid string escape
+  ## processing.
+  fprintf (fid, "%s\n  path ('%s');\n%s\n",
 	   beginstring, path (), endstring);
 
   for i = 1:length (post)
     fprintf (fid, "%s\n", post{i});
   endfor
   closeread = fclose (fid);
   if (closeread < 0)
     error ("savepath: could not close savefile after writing, %s", savefile);
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -28,16 +28,17 @@ SOURCES = \
   __errcomm__.m \
   __errplot__.m \
   __go_close_all__.m \
   __go_draw_axes__.m \
   __go_draw_figure__.m \
   __gnuplot_version__.m \
   __line__.m \
   __next_line_color__.m \
+  __patch__.m \
   __plr1__.m \
   __plr2__.m \
   __plt1__.m \
   __plt2__.m \
   __plt2mm__.m \
   __plt2mv__.m \
   __plt2ss__.m \
   __plt2vm__.m \
@@ -72,16 +73,17 @@ SOURCES = \
   loglog.m \
   loglogerr.m \
   mesh.m \
   meshc.m \
   meshgrid.m \
   ndgrid.m \
   newplot.m \
   orient.m \
+  patch.m \
   peaks.m \
   plot.m \
   plot3.m \
   polar.m \
   print.m \
   replot.m \
   semilogx.m \
   semilogxerr.m \
diff --git a/scripts/plot/__patch__.m b/scripts/plot/__patch__.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/__patch__.m
@@ -0,0 +1,103 @@
+## Copyright (C) 2007 John W. Eaton, Shai Ayal, Kai Habel
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} __patch__ (@var{p}, @var{x}, @var{y}, @var{c})
+## Create patch object from @var{x} and @var{y} with color @var{c} and parent @var{p}.
+## Return handle to patch object.
+## @end deftypefn
+
+## Author: Kai Habel
+
+function h = __patch__ (p, varargin)
+
+  if (nargin < 1)
+    print_usage ();
+  endif
+
+  nvargs = numel (varargin);
+
+  if (nvargs > 1 && isnumeric (varargin{1}) && isnumeric (varargin{2}))
+    num_data_args = 2;
+  else
+    num_data_args = 0;
+  endif
+
+  if (rem (nvargs - num_data_args - 1, 2) == 0 && nvargs > 2)
+  else
+    print_usage ("patch");
+  endif
+
+  x = varargin{1};
+  y = varargin{2};
+  c = varargin{3};
+
+  h = __go_patch__ (p);
+  ax = get (h, "parent");
+  if (num_data_args > 1)
+    set (h, "xdata", x, "ydata", y);
+  endif
+
+  if (isstr (c))
+    ## Have color string.
+    set (h, "FaceColor", c);
+  elseif (length (c) == 1)
+    if (isnan (c))
+      set (h, "FaceColor", [1, 1, 1]);
+      set (h, "CData", c);
+    elseif (isnumeric (c))
+      ## Have color index.
+      set (h, "FaceColor", "flat");
+      set (h, "CData", c);
+
+      clim = get(ax, "CLim");
+      if (c < clim(1))
+        set (ax, "CLim", [c, clim(2)])
+      endif
+      if (c > clim(2))
+        set (ax, "CLim", [clim(1), c])
+      end
+
+    else
+      ## Unknown color value.
+      error ("color value not valid");
+    end
+  elseif (length (c) == 3)
+    ## Have rgb/rgba value.
+    set (h, "FaceColor", c);
+  else
+    ## Color vector.
+    if (length (c) != length (x) || length (c) != length (y))
+      error ("size of x, y, and c must be equal")
+    else
+      set (h, "FaceColor", "interp");
+      set(h, "CData", c);
+      if (abs(max(c) - min(c)) < eps)
+        set (ax, "CLim", [c(1)-1, c(1)+1])
+      else
+        set (ax, "CLim", [min(c), max(c)]);
+      end
+    end
+  end 
+
+  if (nvargs > num_data_args + 1)
+    set (h, varargin{num_data_args+2:end});
+  endif
+
+endfunction
diff --git a/scripts/plot/patch.m b/scripts/plot/patch.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/patch.m
@@ -0,0 +1,42 @@
+## Copyright (C) 2005 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} patch ()
+## @deftypefnx {Function File} {} patch (@var{x}, @var{y}, @var{c})
+## @deftypefnx {Function File} {} patch (@var{x}, @var{y}, @var{c}, @var{opts})
+## Create patch object from @var{x} and @var{y} with color @var{c} and insert in current
+## axes object.  Return handle to patch object.
+## For an uniform colored patch, @var{c} can be given as [r, g, b]-vector, scalar value refering
+## to the current colormap, or string value (e.g. "r" or "red").
+## @end deftypefn
+
+## Author: jwe
+
+function h = patch (varargin)
+
+  ## make a default patch object, and make it the current axes for
+  ## the current figure.
+  tmp = __patch__ (gca (), varargin{:});
+
+  if (nargout > 0)
+    h = tmp;
+  endif
+
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-08-10  Kai Habel  <kai.habel@gmx.de>
+
+	* graphics.cc, graphics.h (patch): New class.
+	(axes::axes_properties): New properties, clim and climmode.
+	(surface::surface_properties::surface_properties): Handle patch.
+	(F__go_patch__): New function.
+
 2007-07-30  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_number::mxArray_number (int, const char **)):
 	First arg is now mwSize.
 	(max_str_len): Return mwSize value, not int.
 	* mxarray.h.in (mxArray::mxArray (int, const char **)):
 	First arg is now mwSize.
 	(mxArray::mxArray (mxClassID, mwSize, mwSize, int, mxComplexity)):
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -240,17 +240,17 @@ property_list::set (const property_name&
 
       if (pfx.compare ("axes") || pfx.compare ("line")
 	  || pfx.compare ("text"))
 	offset = 4;
       else if (len > 5)
 	{
 	  pfx = name.substr (0, 5);
 
-	  if (pfx.compare ("image"))
+	  if (pfx.compare ("image") || pfx.compare ("patch"))
 	    offset = 5;
 	  else if (len > 6)
 	    {
 	      pfx = name.substr (0, 6);
 
 	      if (pfx.compare ("figure"))
 		offset = 6;
 	      else if (len > 7)
@@ -313,17 +313,17 @@ property_list::lookup (const property_na
 
       if (pfx.compare ("axes") || pfx.compare ("line")
 	  || pfx.compare ("text"))
 	offset = 4;
       else if (len > 5)
 	{
 	  pfx = name.substr (0, 5);
 
-	  if (pfx.compare ("image"))
+	  if (pfx.compare ("image") || pfx.compare ("patch"))
 	    offset = 5;
 	  else if (len > 6)
 	    {
 	      pfx = name.substr (0, 6);
 
 	      if (pfx.compare ("figure"))
 		offset = 6;
 	      else if (len > 7)
@@ -940,19 +940,21 @@ axes::axes_properties::axes_properties (
     key ("off"),
     keybox ("off"),
     keypos (1),
     dataaspectratio (Matrix (1, 3, 1.0)),
     dataaspectratiomode ("auto"),
     xlim (),
     ylim (),
     zlim (),
+    clim (),
     xlimmode ("auto"),
     ylimmode ("auto"),
     zlimmode ("auto"),
+    climmode ("auto"),
     xlabel (octave_NaN),
     ylabel (octave_NaN),
     zlabel (octave_NaN),
     xgrid ("off"),
     ygrid ("off"),
     zgrid ("off"),
     xminorgrid ("off"),
     yminorgrid ("off"),
@@ -980,16 +982,19 @@ axes::axes_properties::axes_properties (
     nextplot ("replace"),
     outerposition ()
 {
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
   xlim = tlim;
   ylim = tlim;
   zlim = tlim;
+  Matrix cl (1, 2, 0);
+  cl(1) = 1;
+  clim = cl;
 
   Matrix tview (1, 2, 0.0);
   tview(1) = 90;
   view = tview;
 
   Matrix touterposition (1, 4, 0.0);
   touterposition(2) = 1;
   touterposition(3) = 1;
@@ -1049,22 +1054,29 @@ axes::axes_properties::set (const proper
       ylim = val;
       ylimmode = "manual";
     }
   else if (name.compare ("zlim"))
     {
       zlim = val;
       zlimmode = "manual";
     }
+  else if (name.compare ("clim"))
+    {
+      clim = val;
+      climmode = "manual";
+    }
   else if (name.compare ("xlimmode"))
     xlimmode = val;
   else if (name.compare ("ylimmode"))
     ylimmode = val;
   else if (name.compare ("zlimmode"))
     zlimmode = val;
+  else if (name.compare ("climmode"))
+    climmode = val;
   else if (name.compare ("xlabel"))
     {
       graphics_handle h = ::reparent (val, "set", "xlabel",
 				      __myhandle__, false);
       if (! error_state)
 	{
 	  if (! xisnan (xlabel))
 	    gh_manager::free (xlabel);
@@ -1193,20 +1205,25 @@ axes::axes_properties::set_defaults (bas
   dataaspectratio = Matrix (1, 3, 1.0);
   dataaspectratiomode = "auto";
 
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
   xlim = tlim;
   ylim = tlim;
   zlim = tlim;
-
+  
+  Matrix cl (1, 2, 0);
+  cl(1) = 1;
+  clim = cl;
+  
   xlimmode = "auto";
   ylimmode = "auto";
   zlimmode = "auto";
+  climmode = "auto";
   xlabel = octave_NaN;
   ylabel = octave_NaN;
   zlabel = octave_NaN;
   xgrid = "off";
   ygrid = "off";
   zgrid = "off";
   xminorgrid = "off";
   yminorgrid = "off";
@@ -1282,19 +1299,21 @@ axes::axes_properties::get (void) const
   m.assign ("key", key);
   m.assign ("keybox", keybox);
   m.assign ("keypos", keypos);
   m.assign ("dataaspectratio", dataaspectratio);
   m.assign ("dataaspectratiomode", dataaspectratiomode);
   m.assign ("xlim", xlim);
   m.assign ("ylim", ylim);
   m.assign ("zlim", zlim);
+  m.assign ("clim", clim);
   m.assign ("xlimmode", xlimmode);
   m.assign ("ylimmode", ylimmode);
   m.assign ("zlimmode", zlimmode);
+  m.assign ("climmode", climmode);
   m.assign ("xlabel", xlabel);
   m.assign ("ylabel", ylabel);
   m.assign ("zlabel", zlabel);
   m.assign ("xgrid", xgrid);
   m.assign ("ygrid", ygrid);
   m.assign ("zgrid", zgrid);
   m.assign ("xminorgrid", xminorgrid);
   m.assign ("yminorgrid", yminorgrid);
@@ -1360,22 +1379,26 @@ axes::axes_properties::get (const proper
   else if (name.compare ("dataaspectratiomode"))
     retval = dataaspectratiomode;
   else if (name.compare ("xlim"))
     retval = xlim;
   else if (name.compare ("ylim"))
     retval = ylim;
   else if (name.compare ("zlim"))
     retval = zlim;
+  else if (name.compare ("clim"))
+    retval = clim;
   else if (name.compare ("xlimmode"))
     retval = xlimmode;
   else if (name.compare ("ylimmode"))
     retval = ylimmode;
   else if (name.compare ("zlimmode"))
     retval = zlimmode;
+  else if (name.compare ("climmode"))
+    retval = climmode;
   else if (name.compare ("xlabel"))
     {
       if (xisnan (xlabel))
 	xlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
       retval = xlabel;
     }
   else if (name.compare ("ylabel"))
@@ -1501,20 +1524,26 @@ property_list::pval_map_type axes::axes_
   m["dataaspectratiomode"] = "auto";
 
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
 
   m["xlim"] = tlim;
   m["ylim"] = tlim;
   m["zlim"] = tlim;
+  
+  Matrix cl(1, 2, 0);
+  cl(1) = 1;
+  
+  m["clim"] = cl;
 
   m["xlimmode"] = "auto";
   m["ylimmode"] = "auto";
   m["zlimmode"] = "auto";
+  m["climmode"] = "auto";
   m["xlabel"] = octave_NaN;
   m["ylabel"] = octave_NaN;
   m["zlabel"] = octave_NaN;
   m["xgrid"] = "off";
   m["ygrid"] = "off";
   m["zgrid"] = "off";
   m["xminorgrid"] = "off";
   m["yminorgrid"] = "off";
@@ -1947,16 +1976,183 @@ property_list::pval_map_type image::imag
 
   return m;
 }
 
 std::string image::image_properties::go_name ("image");
 
 // ---------------------------------------------------------------------
 
+patch::patch_properties::patch_properties (const graphics_handle& mh,
+					   const graphics_handle& p)
+  : base_properties (go_name, mh, p),
+    cdata (Matrix ()),
+    xdata (Matrix ()),
+    ydata (Matrix ()),
+    zdata (Matrix ()),
+    facecolor (radio_values("{flat}|none|interp")),
+    facealpha (1.0),
+    edgecolor (color_values(0, 0, 0), radio_values("flat|none|interp")),
+    linestyle ("-"),
+    linewidth (0.5),
+    marker ("none"),
+    markeredgecolor ("auto"),
+    markerfacecolor ("none"),
+    markersize (1)
+{ }
+
+void
+patch::patch_properties::set (const property_name& name,
+			      const octave_value& val)
+{
+  bool modified = true;
+
+  if (name.compare ("parent"))
+    set_parent (val);
+  else if (name.compare ("children"))
+    children = maybe_set_children (children, val);
+  else if (name.compare ("__modified__"))
+    {
+      __modified__ = val.bool_value ();
+      modified = false;
+    }
+  else if (name.compare ("cdata"))
+    cdata = val;
+  else if (name.compare ("xdata"))
+    xdata = val;
+  else if (name.compare ("ydata"))
+    ydata = val;
+  else if (name.compare ("zdata"))
+    zdata = val;
+  else if (name.compare ("facecolor"))
+    facecolor = val;
+  else if (name.compare ("facealpha"))
+    facealpha = val;
+  else if (name.compare ("edgecolor"))
+    edgecolor = val;
+  else if (name.compare ("linestyle"))
+    linestyle = val;
+  else if (name.compare ("linewidth"))
+    linewidth = val;
+  else if (name.compare ("marker"))
+    marker = val;
+  else if (name.compare ("markeredgecolor"))
+    markeredgecolor = val;
+  else if (name.compare ("markerfacecolor"))
+    markerfacecolor = val;
+  else if (name.compare ("markersize"))
+    markersize = val;
+
+  else
+    {
+      modified = false;
+      warning ("set: invalid property `%s'", name.c_str ());
+    }
+
+  if (modified)
+    mark_modified ();
+}
+
+octave_value
+patch::patch_properties::get (void) const
+{
+  Octave_map m;
+
+  m.assign ("type", type);
+  m.assign ("parent", parent);
+  m.assign ("children", children);
+  m.assign ("__modified__", __modified__);
+  m.assign ("cdata", cdata);
+  m.assign ("xdata", xdata);
+  m.assign ("ydata", ydata);
+  m.assign ("zdata", zdata);
+  m.assign ("facecolor", facecolor);
+  m.assign ("facealpha", facealpha);
+  m.assign ("edgecolor", edgecolor);
+  m.assign ("linestyle", linestyle);
+  m.assign ("linewidth", linewidth);
+  m.assign ("marker", marker);
+  m.assign ("markeredgecolor", markeredgecolor);
+  m.assign ("markerface", markerfacecolor);
+  m.assign ("markersize", markersize);
+
+  return m;
+}
+
+octave_value
+patch::patch_properties::get (const property_name& name) const
+{
+  octave_value retval;
+
+  if (name.compare ("type"))
+    retval = type;
+  else if (name.compare ("parent"))
+    retval = parent;
+  else if (name.compare ("children"))
+    retval = children;
+  else if (name.compare ("__modified__"))
+    retval = __modified__;
+  else if (name.compare ("cdata"))
+    retval = cdata;
+  else if (name.compare ("xdata"))
+    retval = xdata;
+  else if (name.compare ("ydata"))
+    retval = ydata;
+  else if (name.compare ("zdata"))
+    retval = zdata;
+  else if (name.compare ("facecolor"))
+    retval = facecolor;
+  else if (name.compare ("facealpha"))
+    retval = facecolor;
+  else if (name.compare ("egdecolor"))
+    retval = edgecolor;
+  else if (name.compare ("linestyle"))
+    retval = linestyle;
+  else if (name.compare ("linewidth"))
+    retval = linewidth;
+  else if (name.compare ("marker"))
+    retval = marker;
+  else if (name.compare ("markeredgecolor"))
+    retval = markeredgecolor;
+  else if (name.compare ("markerfacecolor"))
+    retval = markerfacecolor;
+  else if (name.compare ("markersize"))
+    retval = markersize;
+  else
+    warning ("get: invalid property `%s'", name.c_str ());
+
+  return retval;
+}
+
+property_list::pval_map_type patch::patch_properties::factory_defaults (void)
+{
+  property_list::pval_map_type m;
+
+  m["cdata"] = Matrix ();
+  m["xdata"] = Matrix ();
+  m["ydata"] = Matrix ();
+  m["zdata"] = Matrix ();
+  m["facecolor"] = color_property();
+  m["facealpha"] = 1.0;
+  m["edgecolor"] = color_property("black");
+  m["linestyle"] = "-";
+  m["linewidth"] = 0.5;
+  m["marker"] = "none";
+  m["markeredgecolor"] = "auto";
+  m["markerfacecolor"] = "none";
+  m["markersize"] = 1;
+
+
+  return m;
+}
+
+std::string patch::patch_properties::go_name ("patch");
+
+// ---------------------------------------------------------------------
+
 surface::surface_properties::surface_properties (const graphics_handle& mh,
 						 const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     keylabel ("")
 { }
@@ -2091,19 +2287,20 @@ gh_manager::do_make_graphics_handle (con
   else if (go_name == "axes")
     go = new axes (h, p);
   else if (go_name == "line")
     go = new line (h, p);
   else if (go_name == "text")
     go = new text (h, p);
   else if (go_name == "image")
     go = new image (h, p);
+  else if (go_name == "patch")
+    go = new patch (h, p);
   else if (go_name == "surface")
     go = new surface (h, p);
-
   if (go)
     handle_map[h] = graphics_object (go);
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
 	   go_name.c_str ());
 
   return h;
 }
@@ -2146,16 +2343,17 @@ root_figure::init_factory_properties (vo
 {
   property_list::plist_map_type plist_map;
 
   plist_map["figure"] = figure::figure_properties::factory_defaults ();
   plist_map["axes"] = axes::axes_properties::factory_defaults ();
   plist_map["line"] = line::line_properties::factory_defaults ();
   plist_map["text"] = text::text_properties::factory_defaults ();
   plist_map["image"] = image::image_properties::factory_defaults ();
+  plist_map["patch"] = patch::patch_properties::factory_defaults ();
   plist_map["surface"] = surface::surface_properties::factory_defaults ();
 
   return plist_map;
 }
 
 // ---------------------------------------------------------------------
 
 DEFUN (ishandle, args, ,
@@ -2435,16 +2633,25 @@ DEFUN (__go_surface__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_surface__ (@var{parent})\n\
 Create a surface graphics object.\n\
 @end deftypefn")
 {
   GO_BODY (surface);
 }
 
+DEFUN (__go_patch__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __go_patch__ (@var{parent})\n\
+Create a patch graphics object.\n\
+@end deftypefn")
+{
+  GO_BODY (patch);
+}
+
 DEFUN (__go_delete__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_delete__ (@var{h})\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -1174,19 +1174,21 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, key);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keybox);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keypos);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, dataaspectratio);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, dataaspectratiomode);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xlim);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ylim);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zlim);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, clim);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xlimmode);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ylimmode);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zlimmode);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, climmode);
     OCTAVE_GRAPHICS_MUTABLE_PROPERTY (graphics_handle, xlabel);
     OCTAVE_GRAPHICS_MUTABLE_PROPERTY (graphics_handle, ylabel);
     OCTAVE_GRAPHICS_MUTABLE_PROPERTY (graphics_handle, zlabel);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xgrid);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ygrid);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zgrid);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xminorgrid);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, yminorgrid);
@@ -1579,16 +1581,109 @@ public:
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
+class patch : public base_graphics_object
+{
+public:
+  class patch_properties : public base_properties
+  {
+  public:
+    patch_properties (const graphics_handle& mh, const graphics_handle& p);
+
+    ~patch_properties (void) { }
+
+    void set (const property_name& name, const octave_value& val);
+
+    octave_value get (void) const;
+
+    octave_value get (const property_name& name) const;
+
+    std::string graphics_object_name (void) const { return go_name; }
+
+    static property_list::pval_map_type factory_defaults (void);
+
+  private:
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, cdata);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, xdata);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, ydata);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, zdata);
+    OCTAVE_GRAPHICS_PROPERTY (color_property, facecolor);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, facealpha);
+    OCTAVE_GRAPHICS_PROPERTY (color_property, edgecolor);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, linestyle);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, linewidth);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, marker);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, markeredgecolor);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, markerfacecolor);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, markersize);
+
+    static std::string go_name;
+  };
+
+  patch_properties properties;
+
+public:
+  patch (const graphics_handle& mh, const graphics_handle& p)
+    : base_graphics_object (), properties (mh, p)
+  {
+    properties.override_defaults (*this);
+  }
+
+  ~patch (void) { properties.delete_children (); }
+
+  std::string type (void) const { return properties.graphics_object_name (); }
+
+  void mark_modified (void) { properties.mark_modified (); }
+
+  void override_defaults (base_graphics_object& obj)
+  {
+    // Allow parent (figure) to override first (properties knows how
+    // to find the parent object).
+    properties.override_defaults (obj);
+  }
+
+  void set_from_list (property_list& plist)
+  {
+    properties.set_from_list (*this, plist);
+  }
+
+  void set (const property_name& name, const octave_value& val)
+  {
+    properties.set (name, val);
+  }
+
+  octave_value get (void) const
+  {
+    return properties.get ();
+  }
+
+  octave_value get (const property_name& name) const
+  {
+    return properties.get (name);
+  }
+
+  graphics_handle get_parent (void) const { return properties.get_parent (); }
+
+  void remove_child (const graphics_handle& h) { properties.remove_child (h); }
+
+  void adopt (const graphics_handle& h) { properties.adopt (h); }
+
+  void reparent (const graphics_handle& h) { properties.reparent (h); }
+
+  bool valid_object (void) const { return true; }
+};
+
+// ---------------------------------------------------------------------
+
 class surface : public base_graphics_object
 {
 public:
   class surface_properties : public base_properties
   {
   public:
     surface_properties (const graphics_handle& mh, const graphics_handle& p);
 
