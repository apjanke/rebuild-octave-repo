# HG changeset patch
# User jwe
# Date 1114653286 0
#      Thu Apr 28 01:54:46 2005 +0000
# Node ID 80c1aa832cb209a7d4adb1c7a426b0b7f17e717a
# Parent  46de0f964c1b793112297d42ece2df99188caf19
[project @ 2005-04-28 01:54:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2005-04-27  John W. Eaton  <jwe@octave.org>
 
+	* ov-fcn-handle.cc (octave_fcn_handle::subsref): check to see if
+	function is out of date.
+
+	* variables.cc (symbol_out_of_date (octave_fucntion *)): New function.
+	(function_out_of_date): New function.
+	* parse.y (load_fcn_from_file (const std::string&, bool)):
+	New function.
+
 	* DLD-FUNCTIONS/gplot.l (gnuplot_init): New function to handle
 	initialization.  If builtin variables have already been installed,
 	simply update our cached values.
 	(F__gnuplot_init__): Call gnuplot_init to do all the real work.
 	(Fclearplot, Fcloseplot, Fhold, Fishold, Fpurge_tmp_files,
 	F__gnuplot_raw__, F__gnuplot_set__, F__gnuplot_plot__,
 	F__gnuplot_splot__, F__gnuplot_replot__, Fgplot, Fgsplot, Fgraw,
 	Fgset, Fgshow): Call gnuplot_init before doing anything.
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -63,17 +63,36 @@ octave_fcn_handle::subsref (const std::s
 {
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
 	octave_function *f = function_value ();
-	retval = f->subsref (type, idx, nargout);
+
+	// XXX FIXME XXX -- need to check to see if the function has a
+	// new definition.  The following does not work for function
+	// handles that refer to subfunctions or functions defined on
+	// the command line.
+	//
+	// if (function_out_of_date (f))
+	//   {
+	//     octave_value tmp = lookup_function (fcn_name ());
+	//
+	//     octave_function *ftmp = tmp.function_value (true);
+	//
+	//     if (ftmp)
+	//       f = ftmp;
+	//   }
+
+	if (f)
+	  retval = f->subsref (type, idx, nargout);
+	else
+	  error ("invalid function handle");
       }
       break;
 
 
     case '{':
     case '.':
       {
 	std::string typ_nm = type_name ();
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -90,16 +90,19 @@ parse_and_execute (FILE *f);
 
 extern void
 parse_and_execute (const std::string& s, bool verbose = false,
 		   const char *warn_for = 0);
 
 extern std::string get_help_from_file (const std::string& f);
 
 extern bool
+load_fcn_from_file (const std::string& nm, bool exec_script);
+
+extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern void
 source_file (const std::string file_name);
 
 extern octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3327,22 +3327,20 @@ parse_fcn_file (const std::string& ff, b
     error ("no such file, `%s'", ff.c_str ());
 
   unwind_protect::run_frame ("parse_fcn_file");
 
   return script_file_executed;
 }
 
 bool
-load_fcn_from_file (symbol_record *sym_rec, bool exec_script)
+load_fcn_from_file (const std::string& nm, bool exec_script)
 {
   bool script_file_executed = false;
 
-  std::string nm = sym_rec->name ();
-
   string_vector names (2);
 
   names[0] = nm + ".oct";
   names[1] = nm + ".m";
 
   std::string file
    = octave_env::make_absolute (Vload_path_dir_path.find_first_of (names),
                                 octave_env::getcwd ());
@@ -3372,16 +3370,22 @@ load_fcn_from_file (symbol_record *sym_r
 	force_link_to_function (nm);
 
       unwind_protect::run_frame ("load_fcn_from_file");
     }
 
   return script_file_executed;
 }
 
+bool
+load_fcn_from_file (symbol_record *sym_rec, bool exec_script)
+{
+  return load_fcn_from_file (sym_rec->name (), exec_script);
+}
+
 void
 source_file (const std::string file_name)
 {
   std::string file_full_name = file_ops::tilde_expand (file_name);
 
   unwind_protect::begin_frame ("source_file");
 
   unwind_protect_str (curr_fcn_file_name);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -974,69 +974,90 @@ same_file (const std::string& f, const s
 
   return (f_fs.ino () == g_fs.ino () && f_fs.dev () == g_fs.dev ());
 }
 
 // Is there a corresponding function file that is newer than the
 // symbol definition?
 
 static bool
+function_out_of_date_internal (octave_function *fcn)
+{
+  bool retval = false;
+
+  if (fcn)
+    {
+      std::string ff = fcn->fcn_file_name ();
+
+      if (! (ff.empty ()
+	     || (Vignore_function_time_stamp
+		 && fcn->is_system_fcn_file ())))
+	{
+	  if (fcn->time_checked () < Vlast_prompt_time)
+	    {
+	      time_t tp = fcn->time_parsed ();
+
+	      std::string nm = fcn->name ();
+
+	      string_vector names (2);
+
+	      names[0] = nm + ".oct";
+	      names[1] = nm + ".m";
+
+	      std::string file = octave_env::make_absolute
+		(Vload_path_dir_path.find_first_of (names),
+		 octave_env::getcwd ());
+
+	      if (same_file (file, ff))
+		{
+		  fcn->mark_fcn_file_up_to_date (octave_time ());
+
+		  file_stat fs (ff);
+
+		  if (fs && fs.is_newer (tp))
+		    retval = true;
+		}
+	      else
+		retval = true;
+	    }
+	}
+    }
+
+  return retval;
+}
+
+static bool
 symbol_out_of_date (symbol_record *sr)
 {
   bool retval = false;
 
   if (Vignore_function_time_stamp != 2 && sr)
     {
       octave_value ans = sr->def ();
 
       octave_function *tmp = ans.function_value (true);
 
-      if (tmp)
-	{
-	  std::string ff = tmp->fcn_file_name ();
-
-	  if (! (ff.empty ()
-		 || (Vignore_function_time_stamp
-		     && tmp->is_system_fcn_file ())))
-	    {
-	      if (tmp->time_checked () < Vlast_prompt_time)
-		{
-		  time_t tp = tmp->time_parsed ();
-
-		  std::string nm = tmp->name ();
-
-		  string_vector names (2);
-
-		  names[0] = nm + ".oct";
-		  names[1] = nm + ".m";
-
-		  std::string file = octave_env::make_absolute
-		    (Vload_path_dir_path.find_first_of (names),
-		     octave_env::getcwd ());
-
-		  if (same_file (file, ff))
-		    {
-		      tmp->mark_fcn_file_up_to_date (octave_time ());
-
-		      file_stat fs (ff);
-
-		      if (fs && fs.is_newer (tp))
-			retval = true;
-		    }
-		  else
-		    retval = true;
-		}
-	    }
-	}
+      retval = function_out_of_date_internal (tmp);
     }
 
   return retval;
 }
 
 bool
+function_out_of_date (octave_function *fcn)
+{
+  bool retval = false;
+
+  if (Vignore_function_time_stamp != 2)
+    retval = function_out_of_date_internal (fcn);
+
+  return retval;
+}
+
+bool
 lookup (symbol_record *sym_rec, bool exec_script)
 {
   bool script_executed = false;
 
   if (! sym_rec->is_linked_to_global ())
     {
       if (sym_rec->is_defined ())
 	{
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -77,16 +77,18 @@ extern bool
 looks_like_struct (const std::string& text);
 
 extern int
 symbol_exist (const std::string& name, const std::string& type = "any");
 
 extern std::string
 unique_symbol_name (const std::string& basename);
 
+extern bool function_out_of_date (octave_function *fcn);
+
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_value lookup_function (const std::string& nm);
 
 extern octave_value lookup_user_function (const std::string& nm);
