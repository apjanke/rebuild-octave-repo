# HG changeset patch
# User jwe
# Date 976909649 0
#      Fri Dec 15 19:47:29 2000 +0000
# Node ID a816be1d1626489638cbf09db109640531bb012f
# Parent  574711ce9070250ae3dfc1dc75f4df33ed11f8dd
[project @ 2000-12-15 19:47:29 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -67,20 +67,16 @@ Numerical:
     conform.
 
   * Allow parameters to be passed through the call to fsolve() to the
     user-supplied function for Matlab compatibility.  Don't place an
     upper limit on the number of arguments.
 
   * Check matrix classes for proper handling of empty matrices.
 
-  * Force all empty matrices to be 0x0 even when other dimensions have
-    been speicified, for compatibility with Matlab, at least when some
-    preference variable is set.
-
   * Make operations with empty matrices produce empty matrices, for
     compatibility with Matlab (but only if Matlab 5 still does things
     this way). For example:  [1, 2] * [] ==> [].
 
   * Should any ([]) return [] or 0?  What about all ([])?
 
   * Improve design of ODE, DAE, classes.
 
@@ -90,18 +86,16 @@ Numerical:
   * Add interface to daspk (new version of dassl).
 
   * Extend meaning of .* to include v .* M or M .* v (where v is a
     column vector with the same number of rows as M) to scale rows of
     M by elements of v.  Similarly, if w is a row vector with as many
     columns as M, then either w .* M or M .* w scales the columns of
     M.
 
-  * Add support for +=, -=, etc.
-
   * Given two vectors x and y of length m and n, implement a function
     outer (x, y, f) that returns an m-by-n matrix with entries
     f (x(i), y(j)).  If f is omitted, multiplication is the default.
     Should probably work for any vectors, not just if x is a column
     vector and y is a row vector.
 
   * Make it possible to solve b = L \ x efficiently, either by
     providing an explicit function call, or by automatically
@@ -115,17 +109,18 @@ Numerical:
     other faster method.d  Possibly just switch to this method if the
     dataset is larger than some value.
 
   * Make QR more memory efficient for large matrices when not all the
     columns of Q are required (apparently this is not handled by the
     lapack code yet).
 
   * Consider making the behavior of the / and \ operators for
-    non-square systems compatible with Matlab.
+    non-square systems compatible with Matlab.  Currently, they return
+    the minimum norm solution from DGELSS, which behaves differently.
 
 --------
 Graphics:
 --------
 
   * Make plotting with plplot work.
 
   * Fix interface with gnuplot to wait for gnuplot to output any text
@@ -229,24 +224,20 @@ Input/Output:
         should only create .mat files if it is writing Matlab
         compatible files.
 
   * Move some pr-output stuff to liboctave.
 
   * Make the cutoff point for changing to packed storage a
     user-preference variable with default value 8192.
 
-  * Save image data in binary format to save space.
-
   * Make it possible to load other image formats (ppm, pbm, etc. would
     probably be best since there are already filters to convert to
     these formats from others.)
 
-  * Use HDF for binary data.
-
   * Make ascii load and save work for Inf and NaN.  (This is really a
     problem with the functions for reading floats in the GNU iolib.)
 
   * Complain if there is not enough disk space available (I think
     there is simply not enough error checking in the code that handles
     writing data).
 
   * Make it possible to tie arbitrary input and output streams
@@ -301,18 +292,16 @@ Interpreter:
   * Rewrite functions in input.cc to do the right thing in all cases
     of using readline, forced interactive behavior, echoing of input,
     etc.
 
   * Make it possible to redefine built-in variables and functions.
     (Fix whatever it is that is happening with clear for built-in
     variables.)
 
-  * Make it possible to check if a variable is complex.
-
   * Consider making linspace() and logspace() return the value
     corresponding to the first argument if the number of requested
     points is 1.
 
   * Consider allowing an arbitrary property list to be attached to any
     variable.  This could be a more general way to handle the help
     string that can currently be added with `document'.
 
@@ -364,18 +353,16 @@ Interpreter:
     flex and context for global variable settings.
 
   * make parser do more semantic checking, continue after errors when
     compiling functions, etc.
 
   * Make LEXICAL_ERROR have a value that is the error message for
     parse_error() to print?
 
-  * Make it possible to clear dynamically loaded functions.
-
   * Add a run-time alias mechanism that would allow things like
 
       alias fun function_with_a_very_long_name 
 
     so that `function_with_a_very_long_name' could be invoked as
     `fun'.
 
   * What should is_global() return when called for built-in variables?
@@ -386,18 +373,18 @@ Interpreter:
       function f ()
 	local prefer_column_vectors = something;
 	...
       endfunction
 
     would be equivalent to
 
       function f ()
+        save_prefer_column_vectors = prefer_column_vectors;
 	unwind_protect
-	  save_prefer_column_vectors = prefer_column_vectors;
 	  prefer_column_vectors = something;
 	  ...
 	unwind_protect_cleanup
 	  prefer_column_vectors = save_prefer_column_vectors;
 	end_unwind_protect
       endfunction
 
   * Fix all function files to check for bogus inputs (wrong number or
@@ -414,18 +401,16 @@ Interpreter:
   * Error output from Fortran code is ugly.  Something should be done to
     make it look better.
 
   * It would be nice if output from the Fortran routines could be
     passed through the pager.
 
   * Attempt to recognize common subexpressions in the parser.
 
-  * Remove the buffer size limit in octave_read() in input.cc.
-
   * Handle arrays with more than two dimensions.
 
   * Consider making assignment statements like
 
       M (i_idx, j_idx) = RHS
 
     produce the value of RHS instead of the value of M.
 
@@ -442,28 +427,26 @@ Interpreter:
   * Make statements like this
 
       foo bar baz
 
     turn into function calls like this:
 
       foo ("bar", "baz")
 
-    This is pretty ugly and introduces some conflicts.
+    This is pretty ugly and introduces some conflicts, so I don't
+    think it is a good idea.
 
   * Add a command that works like bash's `builtin' command.
 
-  * Handle comments in parse trees for use with the type command.
+  * Handle end-of-line comments correctly in parse trees for use with
+    the type command.
 
-  * Make the type command handle script files too, by just reading and
-    printing them.
-
-  * The which and type commands should distinguish between dynamically
-    linked functions and built-in functions.  For dynamically linked
-    functions, the location of the .oct file should be displayed.
+  * For dynamically linked functions, the which and type commands
+    should display the location of the .oct file.
 
   * Clean up eye, eval, feval, keyboard, input, ones, zeros.
 
   * It would be nice to have an interactive debugger.
 
   * Make whos report total memory used by variables (and functions?).
 
   * Rewrite whos and the symbol_record_info class.  Write a built-in
