# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1456711136 18000
#      Sun Feb 28 20:58:56 2016 -0500
# Node ID 21c3641422e082d9e60606ed0f685f7c7541cf8d
# Parent  a1aa52bff0797d43c6c358045f1903a2472b5be8
Fix gnuplot toolkit face/edgecolor and linestyle/width for surf() (bug #34523)

* __gnuplot_has_feature__.m (__gnuplot_has_feature__): Add "linetype" and
"dashtype" to list of 'features' string cell array, "4.6" and "5.0" to
'versions' string cell array, and ">=", ">=" to 'operators' string cell array.

* __gnuplot_draw_axes__.m (__gnuplot_draw_axes__): Keep hidden line removal
for case of line in 3D plot.  Get style index as part of do_linestyle_command
call.  Determine style command, 'linetype' or 'linestyle' depending on gnuplot
feature support, and place in the withclause{} strings.  Move linestyle property
translation to its own function gnuplot_linetype() and call that function.  For
a surface, do not initialize withclause{} to pm3d and drop withpm3d logical
variable.  Move flat_interp_face, flat_interp_edge and facecolor_none_or_white
definitions to sooner point in flow.  If the surface has a face color, set the
fourth data column to the same 24-bit RGB face color value.  Consolidate 'unset
pm3d' at one location prior to conditional tests.  After using style{1}, remove
it from cell list.  If surface has no face color, add "nohidden3d" to the
withclause{}.  If surface has face color, set hidden_removal to true and use
pm3d with the "linecolor RGB variable" mode option in the withclause{}.  Move
"set pm3d explicit etc." to after the conditional statements and change the
first test to negative logic.  Condense the additional style{} processing into
a for-loop.  Add "front nooffset" when setting hidden3d.  Place a newline
character at the end of the data sent to gnuplot.
(do_linestyle_command): Return the style indeces, ltidx, in addition to style
strings.  Add 8 to the index to keep first 8 linetypes intact.  Choose style
command according to gnuplot feature support, 'linetype' or 'line style'.  Use
new function gnuplot_linetype() to generate line pattern command and send to
gnuplot if not empty.  Add index to ltidx[] when string is added to style{}.
(gnuplot_linetype): New function containing switch statements for translating
linestyle to a gnuplot command option, either 'dashtype', 'linetype' or empty
depending upon whether gnuplot has the recent dashtype or linetype features.

diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -585,56 +585,60 @@ function __gnuplot_draw_axes__ (h, plot_
           if (! isempty (obj.zdata))
             zdat = obj.zdata(:);
           else
             zdat = zeros (size (xdat));
           endif
           data{data_idx} = [xdat, ydat, zdat]';
           usingclause{data_idx} = sprintf ("record=%d using ($1):($2):($3)",
                                            numel (xdat));
-          hidden_removal = false;
           ## fputs (plot_stream, "set parametric;\n");
         else
           xdat = obj.xdata(:);
           ydat = obj.ydata(:);
           data{data_idx} = [xdat, ydat]';
           usingclause{data_idx} = ...
             sprintf ("record=%d using ($1):($2) axes %s%s",
                      rows (xdat), xaxisloc_using, yaxisloc_using);
         endif
 
-        style = do_linestyle_command (obj, obj.color, data_idx,
-                                      plot_stream, errbars);
+        [style, sidx] = do_linestyle_command (obj, obj.color, data_idx,
+                                              plot_stream, errbars);
+        if (__gnuplot_has_feature__ ("linetype"))
+          scmd = "linetype";
+        else
+          scmd = "linestyle";
+        endif
 
-        withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                        style{1}, data_idx);
+        withclause{data_idx} = sprintf ("with %s %s %d",
+                                        style{1}, scmd, sidx(1));
 
         if (length (style) > 1)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
-          withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                          style{2}, data_idx);
+          withclause{data_idx} = sprintf ("with %s %s %d",
+                                          style{2}, scmd, sidx(2));
         endif
         if (length (style) > 2)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
-          withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                          style{3}, data_idx);
+          withclause{data_idx} = sprintf ("with %s %s %d",
+                                          style{3}, scmd, sidx(3));
         endif
 
      case "patch"
        cmap = parent_figure_obj.colormap;
        [nr, nc] = size (obj.xdata);
 
        if (! isempty (obj.cdata))
          cdat = obj.cdata;
@@ -877,34 +881,17 @@ function __gnuplot_draw_axes__ (h, plot_
                color = ec;
              else
                color = [0, 0, 0];
              endif
            else
              color = [0, 0, 0];
            endif
 
-           if (isfield (obj, "linestyle"))
-             switch (obj.linestyle)
-               case "-"
-                 lt = "lt 1";
-               case "--"
-                 lt = "lt 2";
-               case ":"
-                 lt = "lt 3";
-               case "-."
-                 lt = "lt 6";
-               case "none"
-                 lt = "";
-               otherwise
-                 lt = "";
-             endswitch
-           else
-             lt = "";
-           endif
+           lt = gnuplot_linetype (obj);
 
            if (isfield (obj, "linewidth"))
              lw = sprintf ("linewidth %f", obj.linewidth);
            else
              lw = "";
            endif
 
            [pt, pt2, obj] = gnuplot_pointtype (obj);
@@ -1119,33 +1106,42 @@ function __gnuplot_draw_axes__ (h, plot_
         view_map = true;
         if (! (strcmp (obj.edgecolor, "none")
                && strcmp (obj.facecolor, "none")))
           data_idx += 1;
           is_image_data(data_idx) = false;
           parametric(data_idx) = false;
           have_cdata(data_idx) = true;
           have_3d_patch(data_idx) = false;
-          style = do_linestyle_command (obj, obj.edgecolor,
-                                        data_idx,
-                                        plot_stream);
+          [style, sidx] = do_linestyle_command (obj, obj.edgecolor,
+                                                data_idx,
+                                                plot_stream);
+          if (__gnuplot_has_feature__ ("linetype"))
+            scmd = "linetype";
+          else
+            scmd = "linestyle";
+          endif
 
           if (isempty (obj.displayname))
             titlespec{data_idx} = "title \"\"";
           else
             tmp = undo_string_escapes (
                     __maybe_munge_text__ (enhanced, obj, "displayname")
                   );
             titlespec{data_idx} = ['title "' tmp '"'];
           endif
-          withclause{data_idx} = sprintf ("with pm3d linestyle %d",
-                                          data_idx);
-          withpm3d = true;
-          pm3didx = data_idx;
 
+          flat_interp_face = (strcmp (obj.facecolor, "flat")
+                              || strcmp (obj.facecolor, "interp"));
+          flat_interp_edge = (strcmp (obj.edgecolor, "flat")
+                              || strcmp (obj.edgecolor, "interp"));
+
+          facecolor_none_or_white = (strcmp (obj.facecolor, "none")
+                                     || (isnumeric (obj.facecolor)
+                                         && all (obj.facecolor == 1)));
           xdat = obj.xdata;
           ydat = obj.ydata;
           zdat = obj.zdata;
           cdat = obj.cdata;
 
           err = false;
           if (! size_equal (zdat, cdat))
             err = true;
@@ -1174,96 +1170,103 @@ function __gnuplot_draw_axes__ (h, plot_
             len = 4 * xlen;
             zz = zeros (ylen, len);
             k = 1;
             for kk = 1:4:len
               zz(:,kk)   = xdat(:,k);
               zz(:,kk+1) = ydat(:,k);
               zz(:,kk+2) = zdat(:,k);
               zz(:,kk+3) = cdat(:,k);
+              if (facecolor_none_or_white)
+                zz(:,kk+3) = cdat(:,k);
+              else
+                ## Convert color to 24-bit RGB
+                zz(:,kk+3) = hex2dec (sprintf ("%02x%02x%02x",
+                                               round (255*obj.facecolor)));
+               endif
               k += 1;
             endfor
             data{data_idx} = zz.';
           endif
 
           if (doing_interp_color)
             interp_str = "interpolate 0, 0";
           else
             ## No interpolation of facecolors.
             interp_str = "";
           endif
           usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3):($4)", ylen, xlen);
 
-          flat_interp_face = (strcmp (obj.facecolor, "flat")
-                              || strcmp (obj.facecolor, "interp"));
-          flat_interp_edge = (strcmp (obj.edgecolor, "flat")
-                              || strcmp (obj.edgecolor, "interp"));
-
-          facecolor_none_or_white = (strcmp (obj.facecolor, "none")
-                                     || (isnumeric (obj.facecolor)
-                                         && all (obj.facecolor == 1)));
-          hidden_removal = false;
+          fputs (plot_stream, "unset pm3d\n");
           fputs (plot_stream, "set style increment default;\n");
           if (flat_interp_edge && facecolor_none_or_white)
-            withpm3d = false;
             withclause{data_idx} = sprintf ("with %s palette", style{1});
-            fputs (plot_stream, "unset pm3d\n");
+            if (length (style) > 1)
+              style = style{2:end};
+              sidx = sidx(2:end);
+            else
+              style = {};
+              sidx = [];
+            end
             if (all (obj.facecolor == 1))
               hidden_removal = true;
+            else
+              withclause{data_idx} = [withclause{dataidx} " nohidden3d"];
             endif
           elseif (facecolor_none_or_white)
+            fputs (plot_stream,"set style increment user;\n");
+            withclause{data_idx} = sprintf ("with %s %s %d",
+                                            style{1}, scmd, sidx(1));
+            if (length (style) > 1)
+              style = style{2:end};
+              sidx = sidx(2:end);
+            else
+              style = {};
+              sidx = [];
+            end
             if (all (obj.facecolor == 1))
               hidden_removal = true;
+            else
+              withclause{data_idx} = [withclause{dataidx} " nohidden3d"];
             endif
-            fputs (plot_stream,"unset pm3d;\n");
-            fputs (plot_stream,"set style increment user;\n");
-            withpm3d = false;
-            withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                            style{1}, data_idx);
-            fputs (plot_stream, "unset pm3d\n");
-          endif
+          else
+            hidden_removal = true;
+            withclause{data_idx} = sprintf ("with pm3d linecolor rgb variable");
+
+            if (doing_interp_color)
+              ## "depthorder" interferes with interpolation of colors.
+              dord = "scansautomatic";
+            else
+              dord = "depthorder";
+            endif
 
-          if (doing_interp_color)
-            ## "depthorder" interferes with interpolation of colors.
-            dord = "scansautomatic";
-          else
-            dord = "depthorder";
-          endif
-
-          if (flat_interp_face && strcmp (obj.edgecolor, "flat"))
+            if (! (flat_interp_face && strcmp (obj.edgecolor, "flat"))
+                && ! facecolor_none_or_white)
+              if (strcmp (obj.edgecolor, "none"))
+                if (__gnuplot_has_feature__ ("transparent_surface")
+                    && isscalar (obj.facealpha))
+                  fprintf (plot_stream,
+                           "set style fill transparent solid %f;\n",
+                           obj.facealpha);
+                endif
+              else
+                if (__gnuplot_has_feature__ ("transparent_surface")
+                    && isscalar (obj.facealpha))
+                  fprintf (plot_stream,
+                           "set style fill transparent solid %f;\n",
+                           obj.facealpha);
+                endif
+              endif
+            endif
             fprintf (plot_stream,
                      "set pm3d explicit at s %s %s corners2color c3;\n",
                      interp_str, dord);
-          elseif (! facecolor_none_or_white)
-            if (strcmp (obj.edgecolor, "none"))
-              if (__gnuplot_has_feature__ ("transparent_surface")
-                  && isscalar (obj.facealpha))
-                fprintf (plot_stream,
-                         "set style fill transparent solid %f;\n",
-                         obj.facealpha);
-              endif
-              fprintf (plot_stream,
-                       "set pm3d explicit at s %s corners2color c3;\n",
-                       interp_str, dord);
-            else
-              fprintf (plot_stream,
-                       "set pm3d explicit at s hidden3d %d %s %s corners2color c3;\n",
-                       data_idx, interp_str, dord);
-
-              if (__gnuplot_has_feature__ ("transparent_surface")
-                  && isscalar (obj.facealpha))
-                fprintf (plot_stream,
-                         "set style fill transparent solid %f;\n",
-                         obj.facealpha);
-              endif
-            endif
           endif
 
-          zz = [];
-          if (length (style) > 1)
+          for i_stl = 1:length (style)
             len = 3 * xlen;
             zz = zeros (ylen, len);
             k = 1;
             for kk = 1:3:len
               zz(:,kk)   = xdat(:,k);
               zz(:,kk+1) = ydat(:,k);
               zz(:,kk+2) = zdat(:,k);
               k += 1;
@@ -1273,56 +1276,20 @@ function __gnuplot_draw_axes__ (h, plot_
             data_idx += 1;
             is_image_data(data_idx) = is_image_data(data_idx - 1);
             parametric(data_idx) = parametric(data_idx - 1);
             have_cdata(data_idx) = false;
             have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
             titlespec{data_idx} = "title \"\"";
             usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3)", ylen, xlen);
             data{data_idx} = zz;
-            withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                            style{2}, data_idx);
+            withclause{data_idx} = sprintf ("with %s %s %d",
+                                             style{i_stl}, scmd, sidx(i_stl));
+          endfor
 
-          endif
-          if (length (style) > 2)
-            data_idx += 1;
-            is_image_data(data_idx) = is_image_data(data_idx - 1);
-            parametric(data_idx) = parametric(data_idx - 1);
-            have_cdata(data_idx) = false;
-            have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-            titlespec{data_idx} = "title \"\"";
-            usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3)", ylen, xlen);
-            data{data_idx} = zz;
-            withclause{data_idx} = sprintf ("with %s linestyle %d",
-                                            style{3}, data_idx);
-          endif
-          if (withpm3d && strcmp (style{1}, "linespoints"))
-            if (isempty (zz))
-              len = 3 * xlen;
-              zz = zeros (ylen, len);
-              k = 1;
-              for kk = 1:3:len
-                zz(:,kk)   = xdat(:,k);
-                zz(:,kk+1) = ydat(:,k);
-                zz(:,kk+2) = zdat(:,k);
-                k += 1;
-              endfor
-              zz = zz.';
-            endif
-            data_idx += 1;
-            is_image_data(data_idx) = is_image_data(data_idx - 1);
-            parametric(data_idx) = parametric(data_idx - 1);
-            have_cdata(data_idx) = false;
-            have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-            titlespec{data_idx} = "title \"\"";
-            usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3)", ylen, xlen);
-            data{data_idx} = zz;
-            withclause{data_idx} = sprintf ("with points linestyle %d",
-                                            pm3didx);
-          endif
         endif
 
       case "text"
         [label, f, s] = __maybe_munge_text__ (enhanced, obj, "string");
         fontspec = create_fontspec (f, s, gnuplot_term);
         lpos = obj.position;
         halign = obj.horizontalalignment;
         valign = obj.verticalalignment;
@@ -1393,26 +1360,26 @@ function __gnuplot_draw_axes__ (h, plot_
         endif
 
       otherwise
         error ("__gnuplot_draw_axes__: unknown object class, %s", obj.type);
     endswitch
 
   endwhile
 
-  ## This is need to prevent warnings for rotations in 3D plots, while
+  ## This is needed to prevent warnings for rotations in 3D plots, while
   ## allowing colorbars with contours.
   if (nd == 2 || (data_idx > 1 && ! view_map))
     fputs (plot_stream, "set pm3d implicit;\n");
   else
     fputs (plot_stream, "set pm3d explicit;\n");
   endif
 
   if (isnan (hidden_removal) || hidden_removal)
-    fputs (plot_stream, "set hidden3d;\n");
+    fputs (plot_stream, "set hidden3d front nooffset;\n");
   else
     fputs (plot_stream, "unset hidden3d;\n");
   endif
 
   have_data = (! (isempty (data) || all (cellfun ("isempty", data))));
 
   ## Note we don't use the [xy]2range of gnuplot as we don't use the
   ## dual axis plotting features of gnuplot.
@@ -1811,54 +1778,42 @@ function idx = do_border_2d (obj, plot_s
     fprintf (plot_stream, "nohead nofilled front ");
     fprintf (plot_stream, "lc rgb ""#%02x%02x%02x"" ", round (255 * lc));
     fprintf (plot_stream, "linewidth %.3f ", obj.linewidth);
     fprintf (plot_stream, "from graph %d,%d,%d ", from);
     fprintf (plot_stream, "to graph %d,%d,%d\n", to);
   endfunction
 endfunction
 
-function style = do_linestyle_command (obj, linecolor, idx,
-                                       plot_stream, errbars = "")
+function [style, ltidx] = do_linestyle_command (obj, linecolor, idx,
+                                                plot_stream, errbars = "")
+  idx = idx + 8;
   style = {};
+  ltidx = [];
 
-  fprintf (plot_stream, "set style line %d default;\n", idx);
-  fprintf (plot_stream, "set style line %d", idx);
+  if (__gnuplot_has_feature__ ("linetype"))
+    scommand = "linetype";
+  else
+    scommand = "line style";
+  endif
+  fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
+  fprintf (plot_stream, "set %s %d", scommand, idx);
 
   found_style = false;
   if (isnumeric (linecolor))
     color = linecolor;
     fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
              round (255*color));
   else
     color = [0, 0, 0];
   endif
 
-  if (isfield (obj, "linestyle"))
-    switch (obj.linestyle)
-      case "-"
-        lt = "1";
-      case "--"
-        lt = "2";
-      case ":"
-        lt = "3";
-      case "-."
-        lt = "6";
-      case "none"
-        lt = "";
-      otherwise
-        lt = "";
-    endswitch
-
-    if (! isempty (lt))
-      fprintf (plot_stream, " linetype %s", lt);
-    endif
-
-  else
-    lt = "";
+  lt = gnuplot_linetype (obj);
+  if (! isempty (lt))
+    fprintf (plot_stream, " %s", lt);
   endif
   if (! isempty (errbars))
     found_style = true;
   endif
 
   if (isfield (obj, "linewidth"))
     fprintf (plot_stream, " linewidth %f", obj.linewidth);
     found_style = true;
@@ -1872,16 +1827,17 @@ function style = do_linestyle_command (o
 
   sidx = 1;
   if (isempty (errbars))
     if (isempty (lt))
       style{sidx} = "";
     else
       style{sidx} = "lines";
     endif
+    ltidx(sidx) = idx;
 
     facesame = true;
     if (! isequal (pt, pt2) && isfield (obj, "markerfacecolor")
         && ! strcmp (obj.markerfacecolor, "none"))
       if (strcmp (obj.markerfacecolor, "auto")
           || ! isnumeric (obj.markerfacecolor)
           || (isnumeric (obj.markerfacecolor)
               && isequal (color, obj.markerfacecolor)))
@@ -1899,24 +1855,25 @@ function style = do_linestyle_command (o
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
-        fprintf (plot_stream, "set style line %d default;\n", idx);
-        fprintf (plot_stream, "set style line %d", idx);
+        fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
+        fprintf (plot_stream, "set %s %d", scommand, idx);
         if (isnumeric (obj.markerfacecolor))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markerfacecolor));
         endif
         if (! isempty (pt2))
           style{sidx} = "points";
+          ltidx(sidx) = idx;
           fprintf (plot_stream, " pointtype %s", pt2);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     endif
     if (isfield (obj, "markeredgecolor")
@@ -1942,47 +1899,94 @@ function style = do_linestyle_command (o
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
-        fprintf (plot_stream, "set style line %d default;\n", idx);
-        fprintf (plot_stream, "set style line %d", idx);
+        fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
+        fprintf (plot_stream, "set %s %d", scommand, idx);
         if (strcmp (obj.markeredgecolor, "auto"))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*color));
         elseif (isnumeric (obj.markeredgecolor))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markeredgecolor));
         endif
         if (! isempty (pt))
           style{sidx} = "points";
+          ltidx(sidx) = idx;
           fprintf (plot_stream, " pointtype %s", pt);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     endif
   else
     style{1} = errbars;
+    ltidx(1) = idx;
     fputs (plot_stream, " pointtype 0");
   endif
 
   if (! found_style && isempty (style{1}))
     fputs (plot_stream, " default");
   endif
 
   fputs (plot_stream, ";\n");
 
 endfunction
 
+function [lt] = gnuplot_linetype (obj)
+  if (isfield (obj, "linestyle"))
+    if (__gnuplot_has_feature__ ("dashtype"))
+      opt = "dashtype";
+      switch (obj.linestyle)
+        case "-"
+          lt = "1";
+        case "--"
+          lt = "2";
+        case ":"
+          lt = "3";
+        case "-."
+          lt = "4";
+        case "none"
+          lt = "";
+        otherwise
+          lt = "";
+      endswitch
+    elseif (__gnuplot_has_feature__ ("linetype"))
+      opt = "linetype";
+      switch (obj.linestyle)
+        case "-"
+          lt = "1";
+        case "--"
+          lt = "2";
+        case ":"
+          lt = "3";
+        case "-."
+          lt = "6";
+        case "none"
+          lt = "";
+        otherwise
+          lt = "";
+      endswitch
+    else
+      lt = "";
+    endif
+    if (! isempty (lt))
+      lt = sprintf ("%s %s", opt, lt);
+    endif
+  else
+    lt = "";
+  endif
+endfunction
+
 function [pt, pt2, obj] = gnuplot_pointtype (obj)
   if (isfield (obj, "marker"))
     switch (obj.marker)
       case "+"
         pt = pt2 = "1";
       case "o"
         pt = "6";
         pt2 = "7";
diff --git a/scripts/plot/util/private/__gnuplot_has_feature__.m b/scripts/plot/util/private/__gnuplot_has_feature__.m
--- a/scripts/plot/util/private/__gnuplot_has_feature__.m
+++ b/scripts/plot/util/private/__gnuplot_has_feature__.m
@@ -32,28 +32,30 @@ function res = __gnuplot_has_feature__ (
                          "transparent_surface",
                          "epslatex_implies_eps_filesuffix",
                          "epslatexstandalone_terminal",
                          "screen_coordinates_for_{lrtb}margin",
                          "variable_GPVAL_TERMINALS",
                          "key_has_font_properties",
                          "windows_figure_position",
                          "has_termoption_dashed",
-                         "needs_color_with_postscript"};
+                         "needs_color_with_postscript",
+                         "linetype",
+                         "dashtype"};
   persistent has_features;
 
   if (isempty (has_features))
     try
       gnuplot_version = __gnuplot_version__ ();
     catch
       ## Don't throw an error if gnuplot isn't installed
       gnuplot_version = "0.0.0";
     end_try_catch
-    versions = {"4.2.5", "4.2.5", "4.4", "4.4", "4.4", "4.2", "4.2", "4.4", "4.4", "4.4", "4.4", "4.3", "5.0"};
-    operators = {">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">="};
+    versions = {"4.2.5", "4.2.5", "4.4", "4.4", "4.4", "4.2", "4.2", "4.4", "4.4", "4.4", "4.4", "4.3", "5.0", "4.6", "5.0"};
+    operators = {">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">=", ">="};
     have_features = false (size (features));
     for n = 1 : numel (have_features)
       has_features(n) = compare_versions (gnuplot_version, versions{n}, operators{n});
     endfor
   endif
 
   n = find (strcmpi (feature, features));
   if (isempty (n))
