# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465848086 14400
#      Mon Jun 13 16:01:26 2016 -0400
# Node ID 00f1249f248301a5992aaf8d8d8ce04fe63c0504
# Parent  525b46f1d48ff48e11d684e93b3dd5bf43351849
create wrappers for some gnulib functions

Begin moving toward a clean separation between Octave and gnulib
sources.

* liboctave/wrappers/canonicalize-file-name-wrapper.c,
liboctave/wrappers/canonicalize-file-name-wrapper.h,
liboctave/wrappers/gen-tempname-wrapper.c,
liboctave/wrappers/gen-tempname-wrapper.h,
liboctave/wrappers/mkostemp-wrapper.c,
liboctave/wrappers/mkostemp-wrapper.h,
liboctave/wrappers/nanosleep-wrapper.c,
liboctave/wrappers/nanosleep-wrapper.h,
liboctave/wrappers/nproc-wrapper.c,
liboctave/wrappers/nproc-wrapper.h,
liboctave/wrappers/putenv-wrapper.c,
liboctave/wrappers/putenv-wrapper.h,
liboctave/wrappers/strftime-wrapper.c,
liboctave/wrappers/strftime-wrapper.h,
liboctave/wrappers/strptime-wrapper.c,
liboctave/wrappers/strptime-wrapper.h,
liboctave/wrappers/unsetenv-wrapper.c,
liboctave/wrappers/unsetenv-wrapper.h,
liboctave/wrappers/vasprintf-wrapper.c,
liboctave/wrappers/vasprintf-wrapper.h,
liboctave/wrappers/module.mk: New files.

* liboctave/module.mk, changed libinterp/module.mk: Update.

* file-io.cc, load-save.cc, sysdep.cc, utils.cc, file-ops.cc,
oct-time.cc, lo-utils.cc: Include wrapper headers and use wrapper
functions instead of calling gnulib functions directly.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -52,16 +52,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_ZLIB_H)
 #  include <zlib.h>
 #endif
 
 #include "error.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-ieee.h"
+#include "mkostemp-wrapper.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "errwarn.h"
 #include "file-io.h"
 #include "load-path.h"
 #include "oct-fstrm.h"
@@ -2893,17 +2894,17 @@ message.\n\
 
   std::string tmpl8 = args(0).xstring_value ("mkstemp: TEMPLATE argument must be a string");
 
   octave_value_list retval = ovl (-1, "", "");
 
   OCTAVE_LOCAL_BUFFER (char, tmp, tmpl8.size () + 1);
   strcpy (tmp, tmpl8.c_str ());
 
-  int fd = gnulib::mkostemp (tmp, O_BINARY);
+  int fd = octave_mkostemp_wrapper (tmp);
 
   if (fd < 0)
     {
       retval(0) = fd;
       retval(2) = gnulib::strerror (errno);
     }
   else
     {
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -33,30 +33,29 @@ along with Octave; see the file COPYING.
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
 #include <sstream>
 #include <string>
 
-#include "strftime.h"
-
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
+#include "oct-locbuf.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
-#include "oct-locbuf.h"
+#include "strftime-wrapper.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "load-path.h"
 #include "load-save.h"
 #include "oct-hdf5.h"
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -66,16 +66,17 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "quit.h"
+#include "unsetenv-wrapper.h"
 
 #include "Cell.h"
 #include "builtins.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
@@ -690,17 +691,17 @@ occurred.\n\
 @seealso{setenv, getenv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   std::string tmp = args(0).string_value ();
 
-  return ovl (gnulib::unsetenv (tmp.c_str ()));
+  return ovl (octave_unsetenv_wrapper (tmp.c_str ()));
 }
 
 /*
 ## Test for unsetenv is in setenv test
 */
 
 // FIXME: perhaps kbhit should also be able to print a prompt?
 
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -28,29 +28,29 @@ along with Octave; see the file COPYING.
 #include <cerrno>
 #include <cstring>
 
 #include <fstream>
 #include <iostream>
 #include <limits>
 #include <string>
 
-#include "vasnprintf.h"
-
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
+#include "nanosleep-wrapper.h"
 #include "oct-cmplx.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "pathsearch.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "vasprintf-wrapper.h"
 
 #include "Cell.h"
 #include <defaults.h>
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
@@ -1283,17 +1283,17 @@ octave_vformat (std::ostream& os, const 
 
 std::string
 octave_vasprintf (const char *fmt, va_list args)
 {
   std::string retval;
 
   char *result;
 
-  int status = gnulib::vasprintf (&result, fmt, args);
+  int status = octave_vasprintf_wrapper (&result, fmt, args);
 
   if (status >= 0)
     {
       retval = result;
       ::free (result);
     }
 
   return retval;
@@ -1324,17 +1324,17 @@ octave_sleep (double seconds)
   fraction = gnulib::floor (fraction * 1000000000); // nanoseconds
 
   time_t sec = ((seconds > std::numeric_limits<time_t>::max ())
                 ? std::numeric_limits<time_t>::max ()
                 : static_cast<time_t> (seconds));
 
   struct timespec delay = { sec, static_cast<long> (fraction) };
   struct timespec remaining;
-  gnulib::nanosleep (&delay, &remaining);
+  octave_nanosleep_wrapper (&delay, &remaining);
 
   octave_quit ();
 }
 
 DEFUN (isindex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} isindex (@var{ind})\n\
 @deftypefnx {} {} isindex (@var{ind}, @var{n})\n\
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -15,16 +15,17 @@ libinterp_liboctinterp_la_CPPFLAGS = \
   -I$(srcdir)/liboctave/system \
   -I$(srcdir)/liboctave/util \
   -I$(srcdir)/libinterp/octave-value \
   -Ilibinterp -I$(srcdir)/libinterp \
   -I$(srcdir)/libinterp/operators \
   -Ilibinterp/parse-tree -I$(srcdir)/libinterp/parse-tree \
   -Ilibinterp/corefcn -I$(srcdir)/libinterp/corefcn \
   -Ilibgnu -I$(srcdir)/libgnu \
+  -I$(srcdir)/liboctave/wrappers \
   $(HDF5_CPPFLAGS) \
   $(MAGICK_CPPFLAGS)
 
 libinterp_liboctinterp_la_CFLAGS = $(AM_CFLAGS) $(WARN_CFLAGS)
 
 libinterp_liboctinterp_la_CXXFLAGS = $(AM_CXXFLAGS) $(WARN_CXXFLAGS)
 
 octlib_LTLIBRARIES += libinterp/liboctinterp.la
diff --git a/liboctave/module.mk b/liboctave/module.mk
--- a/liboctave/module.mk
+++ b/liboctave/module.mk
@@ -11,17 +11,18 @@ liboctave_liboctave_la_CPPFLAGS = \
   @CRUFT_DLL_DEFS@ \
   -Iliboctave -I$(srcdir)/liboctave \
   -I$(srcdir)/liboctave/array \
   -I$(srcdir)/liboctave/cruft/misc \
   -Iliboctave/numeric -I$(srcdir)/liboctave/numeric \
   -Iliboctave/operators -I$(srcdir)/liboctave/operators \
   -I$(srcdir)/liboctave/system \
   -I$(srcdir)/liboctave/util \
-  -Ilibgnu -I$(srcdir)/libgnu
+  -Ilibgnu -I$(srcdir)/libgnu \
+  -I$(srcdir)/liboctave/wrappers
 
 liboctave_liboctave_la_CFLAGS = $(AM_CFLAGS) $(WARN_CFLAGS)
 
 liboctave_liboctave_la_CXXFLAGS = $(AM_CXXFLAGS) $(WARN_CXXFLAGS)
 
 octlib_LTLIBRARIES += liboctave/liboctave.la
 
 BUILT_INCS = \
@@ -60,16 +61,17 @@ LIBOCTAVE_TEMPLATE_SRC =
 liboctave_liboctave_la_LIBADD =
 
 include liboctave/array/module.mk
 include liboctave/cruft/module.mk
 include liboctave/numeric/module.mk
 include liboctave/operators/module.mk
 include liboctave/system/module.mk
 include liboctave/util/module.mk
+include liboctave/wrappers/module.mk
 
 ## liboctave merely collects a bunch of compiled convenience libraries.
 ## It has no source code itself.
 liboctave_liboctave_la_SOURCES = \
   liboctave/liboctave-build-info.cc
 
 # Dummy C++ source to force C++ linking.
 EXTRA_liboctave_liboctave_la_SOURCES = liboctave/.dummy_force_cxx_link.cc
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -30,32 +30,29 @@ along with Octave; see the file COPYING.
 #include <cstring>
 
 #include <iostream>
 #include <vector>
 
 #include <sys/stat.h>
 
 #include "pathmax.h"
-#include "canonicalize.h"
 
-extern "C" {
-#include <tempname.h>
-}
-
+#include "canonicalize-file-name-wrapper.h"
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
+#include "gen-tempname-wrapper.h"
 
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
 #  include <algorithm>
 #endif
 
 namespace octave
 {
   namespace sys
@@ -715,17 +712,17 @@ namespace octave
       // add the required XXXXXX for the template
       templatename += "XXXXXX";
 
       // create and copy template to char array for call to gen_tempname
       char tname [templatename.length () + 1];
 
       strcpy (tname, templatename.c_str ());
 
-      if (gen_tempname (tname, 0, 0, GT_NOCREATE) == -1)
+      if (octave_gen_tempname_wrapper (tname) == -1)
         msg = gnulib::strerror (errno);
       else
         retval = tname;
 
       return retval;
     }
 
     std::string
@@ -737,17 +734,17 @@ namespace octave
 
     std::string
     canonicalize_file_name (const std::string& name, std::string& msg)
     {
       msg = "";
 
       std::string retval;
 
-      char *tmp = gnulib::canonicalize_file_name (name.c_str ());
+      char *tmp = octave_canonicalize_file_name_wrapper (name.c_str ());
 
       if (tmp)
         {
           retval = tmp;
           free (tmp);
         }
 
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
diff --git a/liboctave/system/oct-time.cc b/liboctave/system/oct-time.cc
--- a/liboctave/system/oct-time.cc
+++ b/liboctave/system/oct-time.cc
@@ -25,23 +25,23 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <limits>
 
 #include <ctime>
 
 #include <sys/time.h>
 
-#include "strftime.h"
-
 #include "lo-error.h"
 #include "lo-math.h"
 #include "lo-utils.h"
 #include "oct-locbuf.h"
 #include "oct-time.h"
+#include "strftime-wrapper.h"
+#include "strptime-wrapper.h"
 
 namespace octave
 {
   namespace sys
   {
     time::time (double d)
       : ot_unix_time (static_cast<time_t> (d)), ot_usec (0)
     {
@@ -184,17 +184,18 @@ namespace octave
           size_t chars_written = 0;
 
           while (chars_written == 0)
             {
               delete [] buf;
               buf = new char [bufsize];
               buf[0] = '\0';
 
-              chars_written = nstrftime (buf, bufsize, fmt_str, &t, 0, 0);
+              chars_written
+                = octave_strftime_wrapper (buf, bufsize, fmt_str, &t, 0, 0);
 
               bufsize *= 2;
             }
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
           delete [] ps;
 #endif
 
@@ -278,17 +279,17 @@ namespace octave
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
       char *ps = strsave ("");
       t.tm_zone = ps;
 #endif
 
       const char *p = str.c_str ();
 
-      char *q = gnulib::strptime (p, fmt.c_str (), &t);
+      char *q = octave_strptime_wrapper (p, fmt.c_str (), &t);
 
       // Fill in wday and yday, but only if mday is valid and the mon and year
       // are filled in, avoiding issues with mktime and invalid dates.
       if (t.tm_mday != 0 && t.tm_mon >= 0
           && t.tm_year != std::numeric_limits<int>::min ())
         {
           t.tm_isdst = -1;
           gnulib::mktime (&t);
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "quit.h"
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
+#include "putenv-wrapper.h"
 
 bool xis_int_or_inf_or_nan (double x)
 { return octave::math::isnan (x) || octave::math::x_nint (x) == x; }
 
 bool xis_one_or_zero (double x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (double x)
@@ -99,17 +100,17 @@ octave_putenv (const std::string& name, 
   // always leaks memory, but the saving grace is that the leaks are small.
   char *new_item = static_cast<char*> (gnulib::malloc (new_len));
 
   sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
 
   // As far as I can see there's no way to distinguish between the
   // various errors; putenv doesn't have errno values.
 
-  if (gnulib::putenv (new_item) < 0)
+  if (octave_putenv_wrapper (new_item) < 0)
     (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 }
 
 std::string
 octave_fgets (FILE *f)
 {
   bool eof;
   return octave_fgets (f, eof);
diff --git a/liboctave/wrappers/canonicalize-file-name-wrapper.c b/liboctave/wrappers/canonicalize-file-name-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/canonicalize-file-name-wrapper.c
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// canonicalize_file_name may be provided by gnulib.  We don't include
+// gnulib headers directly in Octave's C++ source files to avoid
+// problems that may be caused by the way that gnulib overrides standard
+// library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdlib.h>
+
+#include "canonicalize-file-name-wrapper.h"
+
+char *
+octave_canonicalize_file_name_wrapper (const char *name)
+{
+  return canonicalize_file_name (name);
+}
diff --git a/liboctave/wrappers/canonicalize-file-name-wrapper.h b/liboctave/wrappers/canonicalize-file-name-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/canonicalize-file-name-wrapper.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_canonicalize_file_name_wrapper_h)
+#define octave_canonicalize_file_name_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern char *octave_canonicalize_file_name_wrapper (const char *name);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/gen-tempname-wrapper.c b/liboctave/wrappers/gen-tempname-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/gen-tempname-wrapper.c
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// gen_tempname is provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "tempname.h"
+
+#include "gen-tempname-wrapper.h"
+
+int
+octave_gen_tempname_wrapper (char *tmpl)
+{
+  return gen_tempname (tmpl, 0, 0, GT_NOCREATE);
+}
diff --git a/liboctave/wrappers/gen-tempname-wrapper.h b/liboctave/wrappers/gen-tempname-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/gen-tempname-wrapper.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_gen_tempname_wrapper_h)
+#define octave_gen_tempname_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_gen_tempname_wrapper (char *tmpl);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/mkostemp-wrapper.c b/liboctave/wrappers/mkostemp-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/mkostemp-wrapper.c
@@ -0,0 +1,43 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// mkostemp may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdlib.h>
+
+#include "mkostemp-wrapper.h"
+
+#ifndef O_BINARY
+# define O_BINARY 0
+#endif
+
+int
+octave_mkostemp_wrapper (char *tmpl)
+{
+  return mkostemp (tmpl, O_BINARY);
+}
diff --git a/liboctave/wrappers/mkostemp-wrapper.h b/liboctave/wrappers/mkostemp-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/mkostemp-wrapper.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_mkostemp_wrapper_h)
+#define octave_mkostemp_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_mkostemp_wrapper (char *tmpl);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/module.mk
@@ -0,0 +1,34 @@
+NOINSTALL_WRAPPERS_INC = \
+  liboctave/wrappers/canonicalize-file-name-wrapper.h \
+  liboctave/wrappers/gen-tempname-wrapper.h \
+  liboctave/wrappers/mkostemp-wrapper.h \
+  liboctave/wrappers/nanosleep-wrapper.h \
+  liboctave/wrappers/nproc-wrapper.h \
+  liboctave/wrappers/putenv-wrapper.h \
+  liboctave/wrappers/strftime-wrapper.h \
+  liboctave/wrappers/strptime-wrapper.h \
+  liboctave/wrappers/unsetenv-wrapper.h \
+  liboctave/wrappers/vasprintf-wrapper.h
+
+WRAPPERS_SRC = \
+  liboctave/wrappers/canonicalize-file-name-wrapper.c \
+  liboctave/wrappers/gen-tempname-wrapper.c \
+  liboctave/wrappers/mkostemp-wrapper.c \
+  liboctave/wrappers/nanosleep-wrapper.c \
+  liboctave/wrappers/nproc-wrapper.c \
+  liboctave/wrappers/putenv-wrapper.c \
+  liboctave/wrappers/strftime-wrapper.c \
+  liboctave/wrappers/strptime-wrapper.c \
+  liboctave/wrappers/unsetenv-wrapper.c \
+  liboctave/wrappers/vasprintf-wrapper.c
+
+noinst_LTLIBRARIES += liboctave/wrappers/libwrappers.la
+
+liboctave_wrappers_libwrappers_la_SOURCES = $(WRAPPERS_SRC)
+
+liboctave_wrappers_libwrappers_la_CPPFLAGS = \
+  -Ilibgnu -I$(srcdir)/libgnu
+
+liboctave_wrappers_libwrappers_la_CFLAGS = $(liboctave_liboctave_la_CFLAGS)
+
+liboctave_liboctave_la_LIBADD += liboctave/wrappers/libwrappers.la
diff --git a/liboctave/wrappers/nanosleep-wrapper.c b/liboctave/wrappers/nanosleep-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/nanosleep-wrapper.c
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// nanosleep may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <time.h>
+
+#include "nanosleep-wrapper.h"
+
+int
+octave_nanosleep_wrapper (const struct timespec *requested,
+                          struct timespec *remaining)
+{
+  return nanosleep (requested, remaining);
+}
diff --git a/liboctave/wrappers/nanosleep-wrapper.h b/liboctave/wrappers/nanosleep-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/nanosleep-wrapper.h
@@ -0,0 +1,38 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_nanosleep_wrapper_h)
+#define octave_nanosleep_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int
+octave_nanosleep_wrapper (const struct timespec *requested,
+                          struct timespec *remaining);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/nproc-wrapper.c b/liboctave/wrappers/nproc-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/nproc-wrapper.c
@@ -0,0 +1,57 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// num_processors is provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "nproc.h"
+
+#include "nproc-wrapper.h"
+
+unsigned long int
+octave_num_processors_wrapper (enum octave_nproc_query octave_query)
+{
+  enum nproc_query query;
+
+  switch (octave_query)
+    {
+    case OCTAVE_NPROC_ALL:
+      query = NPROC_ALL;
+      break;
+
+    case OCTAVE_NPROC_CURRENT:
+      query = NPROC_CURRENT;
+      break;
+
+    case OCTAVE_NPROC_CURRENT_OVERRIDABLE:
+      query = NPROC_CURRENT_OVERRIDABLE;
+      break;
+    }
+
+  return num_processors (query);
+}
diff --git a/liboctave/wrappers/nproc-wrapper.h b/liboctave/wrappers/nproc-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/nproc-wrapper.h
@@ -0,0 +1,44 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_nproc_wrapper_h)
+#define octave_nproc_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+enum octave_nproc_query
+{
+  OCTAVE_NPROC_ALL,
+  OCTAVE_NPROC_CURRENT,
+  OCTAVE_NPROC_CURRENT_OVERRIDABLE
+};
+  
+extern unsigned long int
+octave_num_processors_wrapper (enum octave_nproc_query);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/putenv-wrapper.c b/liboctave/wrappers/putenv-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/putenv-wrapper.c
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// putenv may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdlib.h>
+
+#include "putenv-wrapper.h"
+
+int
+octave_putenv_wrapper (char *str)
+{
+  return putenv (str);
+}
diff --git a/liboctave/wrappers/putenv-wrapper.h b/liboctave/wrappers/putenv-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/putenv-wrapper.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_putenv_wrapper_h)
+#define octave_putenv_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_putenv_wrapper (char *str);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/strftime-wrapper.c b/liboctave/wrappers/strftime-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/strftime-wrapper.c
@@ -0,0 +1,42 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// nstrftime is provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <time.h>
+
+#include "strftime.h"
+
+#include "strftime-wrapper.h"
+
+size_t
+octave_strftime_wrapper (char *buf, size_t len, const char *fmt,
+                         const struct tm *t, struct tm_zone *tz, int ns)
+{
+  return nstrftime (buf, len, fmt, t, tz, ns);
+}
diff --git a/liboctave/wrappers/strftime-wrapper.h b/liboctave/wrappers/strftime-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/strftime-wrapper.h
@@ -0,0 +1,44 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_strftime_wrapper_h)
+#define octave_strftime_wrapper_h 1
+
+#if defined __cplusplus
+#  include <cstddef>
+#else
+#  include <stddef.h>
+#endif
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern size_t
+octave_strftime_wrapper (char *buf, size_t len, const char *fmt,
+                         const struct tm *t, struct tm_zone *tz, int ns);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/strptime-wrapper.c b/liboctave/wrappers/strptime-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/strptime-wrapper.c
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// strptime may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <time.h>
+
+#include "strptime-wrapper.h"
+
+char *
+octave_strptime_wrapper (const char *p, const char *fmt, struct tm *t)
+{
+  return strptime (p, fmt, t);
+}
diff --git a/liboctave/wrappers/strptime-wrapper.h b/liboctave/wrappers/strptime-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/strptime-wrapper.h
@@ -0,0 +1,37 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_strptime_wrapper_h)
+#define octave_strptime_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern char *
+octave_strptime_wrapper (const char *p, const char *fmt, struct tm *t);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/unsetenv-wrapper.c b/liboctave/wrappers/unsetenv-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unsetenv-wrapper.c
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// unsetenv may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdlib.h>
+
+#include "unsetenv-wrapper.h"
+
+int
+octave_unsetenv_wrapper (const char *name)
+{
+  return unsetenv (name);
+}
diff --git a/liboctave/wrappers/unsetenv-wrapper.h b/liboctave/wrappers/unsetenv-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unsetenv-wrapper.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_unsetenv_wrapper_h)
+#define octave_unsetenv_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_unsetenv_wrapper (const char *name);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/vasprintf-wrapper.c b/liboctave/wrappers/vasprintf-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/vasprintf-wrapper.c
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// vasprintf may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdio.h>
+
+#include "vasprintf-wrapper.h"
+
+int
+octave_vasprintf_wrapper (char **buf, const char *fmt, va_list args)
+{
+  return vasprintf (buf, fmt, args);
+}
diff --git a/liboctave/wrappers/vasprintf-wrapper.h b/liboctave/wrappers/vasprintf-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/vasprintf-wrapper.h
@@ -0,0 +1,43 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_vasprintf_wrapper_h)
+#define octave_vasprintf_wrapper_h 1
+
+#if defined __cplusplus
+#  include <cstdarg>
+#else
+#  include <stdarg.h>
+#endif
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int
+octave_vasprintf_wrapper (char **buf, const char *fmt, va_list args);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
