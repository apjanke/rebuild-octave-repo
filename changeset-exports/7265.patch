# HG changeset patch
# User jwe
# Date 1196968608 0
#      Thu Dec 06 19:16:48 2007 +0000
# Node ID 7da4a5262e2e4f28f28ccda27f8e51174afc7a96
# Parent  fac10884ddd4844fa6274029222b85c21819deba
[project @ 2007-12-06 19:16:47 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2860,21 +2860,26 @@ ComplexMatrix::expm (void) const
   // Now powers a^8 ... a^1.
 
   int minus_one_j = -1;
   for (octave_idx_type j = 7; j >= 0; j--)
     {
       for (octave_idx_type i = 0; i < nc; i++)
 	{
 	  octave_idx_type k = i * nc + i;
-	  pnpp [k] = pnpp [k] + padec [j];
-	  pdpp [k] = pdpp [k] + minus_one_j * padec [j];
+	  pnpp[k] += padec[j];
+	  pdpp[k] += minus_one_j * padec[j];
 	}      
+
       npp = m * npp;
+      pnpp = npp.fortran_vec ();
+
       dpp = m * dpp;
+      pdpp = dpp.fortran_vec ();
+
       minus_one_j *= -1;
     }
 
   // Zero power.
 
   dpp = -dpp;
   for (octave_idx_type j = 0; j < nc; j++)
     {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-12-06  John W. Eaton  <jwe@octave.org>
+
+	* CMatrix.cc (ComplexMatrix::expm): Update pointers to internal
+	data for npp and dpp after assignments.
+	* dMatrix.cc (Matrix::expm): Use same method as ComplexMatrix::expm.
+
 2007-12-04  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (assign (Sparse<LT>&,  const Sparse<RT>&)):
 	Do nothing if one index is empty.
 
 2007-12-04  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (assign (Sparse<LT>&,  const Sparse<RT>&)):
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2468,25 +2468,38 @@ Matrix::expm (void) const
 	scale_factor *= 2.0;
   
       m = m / scale_factor;
     }
   
   // npp, dpp: pade' approx polynomial matrices.
   
   Matrix npp (nc, nc, 0.0);
+  double *pnpp = npp.fortran_vec ();
   Matrix dpp = npp;
+  double *pdpp = dpp.fortran_vec ();
   
   // Now powers a^8 ... a^1.
   
   octave_idx_type minus_one_j = -1;
   for (octave_idx_type j = 7; j >= 0; j--)
     {
-      npp = m * npp + padec[j] * m;
-      dpp = m * dpp + (minus_one_j * padec[j]) * m;
+      for (octave_idx_type i = 0; i < nc; i++)
+	{
+	  octave_idx_type k = i * nc + i;
+	  pnpp[k] += padec[j];
+	  pdpp[k] += minus_one_j * padec[j];
+	}      
+
+      npp = m * npp;
+      pnpp = npp.fortran_vec ();
+
+      dpp = m * dpp;
+      pdpp = dpp.fortran_vec ();
+
       minus_one_j *= -1;
     }
   
   // Zero power.
   
   dpp = -dpp;
   for (octave_idx_type j = 0; j < nc; j++)
     {
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2007-12-06  John W. Eaton  <jwe@octave.org>
+
+	* general/issymmetric.m: Move tests here from test/test_number.m
+
+2007-12-06  Jason Riedy  <ejr@cs.berkeley.edu>
+
+	* general/issymmetric.m: To keep its argument sparse and the
+	function quick, use the infinity norm rather than the 2-norm.
+	Also measure the symmetric part rather than the Hermitian part.
+	* general/ishermitian.m: New file.  Measure the Hermitian part.
+	* general/Makefile.in: Add ishermitian.m to SOURCES.
+
 2007-12-04  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Omit "font \"NAME,SIZE\"" in gnuplot
 	text and label commands if font is "*".
 
 	* linear-algebra/krylov.m: Doc fixes.
 	From Marco Caliari <caliari@sci.univr.it>.
 
diff --git a/scripts/general/Makefile.in b/scripts/general/Makefile.in
--- a/scripts/general/Makefile.in
+++ b/scripts/general/Makefile.in
@@ -33,20 +33,20 @@ INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = __isequal__.m __splinen__.m accumarray.m arrayfun.m bicubic.m \
   bitcmp.m bitget.m bitset.m blkdiag.m cart2pol.m cart2sph.m cell2mat.m \
   celldisp.m circshift.m common_size.m cplxpair.m cumtrapz.m deal.m del2.m \
   diff.m flipdim.m fliplr.m flipud.m gradient.m ind2sub.m int2str.m interp1.m \
   interp2.m interp3.m interpn.m interpft.m is_duplicate_entry.m isa.m \
-  isdefinite.m isdir.m isequal.m isequalwithequalnans.m isscalar.m \
-  issquare.m issymmetric.m isvector.m logical.m logspace.m lookup.m mod.m \
-  nargchk.m nextpow2.m nthroot.m num2str.m perror.m pol2cart.m \
-  polyarea.m postpad.m prepad.m quadl.m randperm.m rat.m rem.m \
+  isdefinite.m isdir.m isequal.m isequalwithequalnans.m ishermitian.m \
+  isscalar.m issquare.m issymmetric.m isvector.m logical.m logspace.m \
+  lookup.m mod.m nargchk.m nextpow2.m nthroot.m num2str.m perror.m \
+  pol2cart.m polyarea.m postpad.m prepad.m quadl.m randperm.m rat.m rem.m \
   repmat.m rot90.m rotdim.m shift.m shiftdim.m sortrows.m \
   sph2cart.m strerror.m structfun.m sub2ind.m trapz.m tril.m triu.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
 
diff --git a/scripts/general/ishermitian.m b/scripts/general/ishermitian.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/ishermitian.m
@@ -0,0 +1,56 @@
+## Copyright (C) 1996, 1997, 2002, 2003, 2004, 2005, 2006, 2007
+##               John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} ishermitian (@var{x}, @var{tol})
+## If @var{x} is Hermitian within the tolerance specified by @var{tol},
+## then return the dimension of @var{x}.  Otherwise, return 0.  If
+## @var{tol} is omitted, use a tolerance equal to the machine precision.
+## Matrix @var{x} is considered symmetric if
+## @code{norm (@var{x} - @var{x}', inf) / norm (@var{x}, inf) < @var{tol}}.
+## @seealso{size, rows, columns, length, ismatrix, isscalar,
+## issquare, issymmetric, isvector}
+## @end deftypefn
+
+## Author: A. S. Hodel <scotte@eng.auburn.edu>
+## Created: August 1993
+## Adapted-By: jwe
+
+function retval = ishermitian (x, tol)
+
+  if (nargin == 1 || nargin == 2)
+    retval = issquare (x);
+    if (retval != 0)
+      if (nargin == 1)
+        tol = eps;
+      endif
+      norm_x = norm (x, inf);
+      if (norm_x != 0 && norm (x - x', inf) / norm_x > tol)
+        retval = 0;
+      endif
+    endif
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+%!assert(ishermitian ([1, 2i; -2i, 1]) == 2);
+%!assert(!ishermitian ([1, 2i; 2i, 1]));
+%!assert(ishermitian ([1, 2.1i; -2i, 1.1], 0.2) == 2);
diff --git a/scripts/general/issymmetric.m b/scripts/general/issymmetric.m
--- a/scripts/general/issymmetric.m
+++ b/scripts/general/issymmetric.m
@@ -17,34 +17,52 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} issymmetric (@var{x}, @var{tol})
 ## If @var{x} is symmetric within the tolerance specified by @var{tol},
 ## then return the dimension of @var{x}.  Otherwise, return 0.  If
 ## @var{tol} is omitted, use a tolerance equal to the machine precision.
-## @seealso{size, rows, columns, length, ismatrix, isscalar,
+## Matrix @var{x} is considered symmetric if
+## @code{norm (@var{x} - @var{x}.', inf) / norm (@var{x}, inf) < @var{tol}}.
+## @seealso{size, rows, columns, length, ishermitian, ismatrix, isscalar,
 ## issquare, isvector}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
-function retval = issymmetric (x,tol)
+function retval = issymmetric (x, tol)
 
   if (nargin == 1 || nargin == 2)
     retval = issquare (x);
     if (retval != 0)
       if (nargin == 1)
         tol = eps;
       endif
-      norm_x = norm (x);
-      if (norm_x != 0 && norm (x - x') / norm_x > tol)
+      norm_x = norm (x, inf);
+      if (norm_x != 0 && norm (x - x.', inf) / norm_x > tol)
         retval = 0;
       endif
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert(issymmetric (1));
+%!assert(!(issymmetric ([1, 2])));
+%!assert(!(issymmetric ([])));
+%!assert(issymmetric ([1, 2; 2, 1]) == 2);
+%!assert(!(issymmetric ("test")));
+%!assert(issymmetric ([1, 2.1; 2, 1.1], 0.2) == 2);
+%!assert(!issymmetric ([1, 2i; -2i, 1]));
+%!assert(!(issymmetric ("t")));
+%!assert(!(issymmetric (["te"; "et"])));
+%!error issymmetric ([1, 2; 2, 1], 0, 0);
+%!error issymmetric ();
+
+%!test
+%! s.a = 1;
+%! assert(!(issymmetric (s)));
