# HG changeset patch
# User jwe
# Date 980778788 0
#      Mon Jan 29 14:33:08 2001 +0000
# Node ID df962bbf17888ab75421ad190177f0b3dd3b020d
# Parent  e10451597802993b9dae1a943d126464c4efa6ff
[project @ 2001-01-29 14:33:07 by jwe]

diff --git a/src/OPERATORS/op-cm-cs.cc b/src/OPERATORS/op-cm-cs.cc
--- a/src/OPERATORS/op-cm-cs.cc
+++ b/src/OPERATORS/op-cm-cs.cc
@@ -54,17 +54,22 @@ DEFBINOP (div, complex_matrix, complex)
 
   return octave_value (v1.complex_matrix_value () / d);
 }
 
 DEFBINOP_FN (pow, complex_matrix, complex, xpow)
 
 DEFBINOP (ldiv, complex_matrix, complex)
 {
-  BINOP_NONCONFORMANT ("operator \\");
+  CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
+
+  ComplexMatrix m1 = v1.complex_matrix_value ();
+  ComplexMatrix m2 = v2.complex_matrix_value ();
+
+  return octave_value (xleftdiv (m1, m2));
 }
 
 DEFBINOP_FN (lt, complex_matrix, complex, mx_el_lt)
 DEFBINOP_FN (le, complex_matrix, complex, mx_el_le)
 DEFBINOP_FN (eq, complex_matrix, complex, mx_el_eq)
 DEFBINOP_FN (ge, complex_matrix, complex, mx_el_ge)
 DEFBINOP_FN (gt, complex_matrix, complex, mx_el_gt)
 DEFBINOP_FN (ne, complex_matrix, complex, mx_el_ne)
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -40,23 +40,17 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex matrix by matrix ops.
 
 DEFBINOP_OP (add, complex_matrix, matrix, +)
 DEFBINOP_OP (sub, complex_matrix, matrix, -)
 DEFBINOP_OP (mul, complex_matrix, matrix, *)
-
-DEFBINOP (div, complex_matrix, matrix)
-{
-  CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
-
-  return xdiv (v1.complex_matrix_value (), v2.matrix_value ());
-}
+DEFBINOP_FN (div, complex_matrix, matrix, xdiv)
 
 DEFBINOPX (pow, complex_matrix, matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, complex_matrix, matrix, xleftdiv)
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "mx-cm-s.h"
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-cx-mat.h"
+#include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex matrix by scalar ops.
 
@@ -56,17 +57,22 @@ DEFBINOP (div, complex_matrix, scalar)
 
   return octave_value (v1.complex_matrix_value () / d);
 }
 
 DEFBINOP_FN (pow, complex_matrix, scalar, xpow)
 
 DEFBINOP (ldiv, complex_matrix, scalar)
 {
-  BINOP_NONCONFORMANT ("operator \\");
+  CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
+
+  ComplexMatrix m1 = v1.complex_matrix_value ();
+  Matrix m2 = v2.matrix_value ();
+
+  return octave_value (xleftdiv (m1, m2));
 }
 
 DEFBINOP_FN (lt, complex_matrix, scalar, mx_el_lt)
 DEFBINOP_FN (le, complex_matrix, scalar, mx_el_le)
 DEFBINOP_FN (eq, complex_matrix, scalar, mx_el_eq)
 DEFBINOP_FN (ge, complex_matrix, scalar, mx_el_ge)
 DEFBINOP_FN (gt, complex_matrix, scalar, mx_el_gt)
 DEFBINOP_FN (ne, complex_matrix, scalar, mx_el_ne)
diff --git a/src/OPERATORS/op-cs-cm.cc b/src/OPERATORS/op-cs-cm.cc
--- a/src/OPERATORS/op-cs-cm.cc
+++ b/src/OPERATORS/op-cs-cm.cc
@@ -40,17 +40,22 @@ Software Foundation, 59 Temple Place - S
 // complex scalar by complex matrix ops.
 
 DEFBINOP_OP (add, complex, complex_matrix, +)
 DEFBINOP_OP (sub, complex, complex_matrix, -)
 DEFBINOP_OP (mul, complex, complex_matrix, *)
 
 DEFBINOP (div, complex, complex_matrix)
 {
-  BINOP_NONCONFORMANT ("operator /");
+  CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
+
+  ComplexMatrix m1 = v1.complex_matrix_value ();
+  ComplexMatrix m2 = v2.complex_matrix_value ();
+
+  return octave_value (xdiv (m1, m2));
 }
 
 DEFBINOP_FN (pow, complex, complex_matrix, xpow)
 
 DEFBINOP (ldiv, complex, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
 
diff --git a/src/OPERATORS/op-cs-m.cc b/src/OPERATORS/op-cs-m.cc
--- a/src/OPERATORS/op-cs-m.cc
+++ b/src/OPERATORS/op-cs-m.cc
@@ -44,17 +44,22 @@ Software Foundation, 59 Temple Place - S
 // complex scalar by matrix ops.
 
 DEFBINOP_OP (add, complex, matrix, +)
 DEFBINOP_OP (sub, complex, matrix, -)
 DEFBINOP_OP (mul, complex, matrix, *)
 
 DEFBINOP (div, complex, matrix)
 {
-  BINOP_NONCONFORMANT ("operator /");
+  CAST_BINOP_ARGS (const octave_complex&, const octave_matrix&);
+
+  ComplexMatrix m1 = v1.complex_matrix_value ();
+  Matrix m2 = v2.matrix_value ();
+
+  return octave_value (xdiv (m1, m2));
 }
 
 DEFBINOP_FN (pow, complex, matrix, xpow)
 
 DEFBINOP (ldiv, complex, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_matrix&);
 
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -40,23 +40,17 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // matrix by complex matrix ops.
 
 DEFBINOP_OP (add, matrix, complex_matrix, +)
 DEFBINOP_OP (sub, matrix, complex_matrix, -)
 DEFBINOP_OP (mul, matrix, complex_matrix, *)
-
-DEFBINOP (div, matrix, complex_matrix)
-{
-  CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
-
-  return xdiv (v1.matrix_value (), v2.complex_matrix_value ());
-}
+DEFBINOP_FN (div, matrix, complex_matrix, xdiv)
 
 DEFBINOPX (pow, matrix, complex_matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, matrix, complex_matrix, xleftdiv)
diff --git a/src/OPERATORS/op-m-cs.cc b/src/OPERATORS/op-m-cs.cc
--- a/src/OPERATORS/op-m-cs.cc
+++ b/src/OPERATORS/op-m-cs.cc
@@ -58,17 +58,22 @@ DEFBINOP (div, matrix, complex)
 
   return octave_value (v1.matrix_value () / d);
 }
 
 DEFBINOP_FN (pow, matrix, complex, xpow)
 
 DEFBINOP (ldiv, matrix, complex)
 {
-  BINOP_NONCONFORMANT ("operator \\");
+  CAST_BINOP_ARGS (const octave_matrix&, const octave_complex&);
+
+  Matrix m1 = v1.matrix_value ();
+  ComplexMatrix m2 = v2.complex_matrix_value ();
+
+  return octave_value (xleftdiv (m1, m2));
 }
 
 DEFBINOP_FN (lt, matrix, complex, mx_el_lt)
 DEFBINOP_FN (le, matrix, complex, mx_el_le)
 DEFBINOP_FN (eq, matrix, complex, mx_el_eq)
 DEFBINOP_FN (ge, matrix, complex, mx_el_ge)
 DEFBINOP_FN (gt, matrix, complex, mx_el_gt)
 DEFBINOP_FN (ne, matrix, complex, mx_el_ne)
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -51,23 +51,17 @@ DEFUNOP (transpose, matrix)
 DEFNCUNOP_METHOD (incr, matrix, increment)
 DEFNCUNOP_METHOD (decr, matrix, decrement)
 
 // matrix by matrix ops.
 
 DEFBINOP_OP (add, matrix, matrix, +)
 DEFBINOP_OP (sub, matrix, matrix, -)
 DEFBINOP_OP (mul, matrix, matrix, *)
-
-DEFBINOP (div, matrix, matrix)
-{
-  CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
-
-  return xdiv (v1.matrix_value (), v2.matrix_value ());
-}
+DEFBINOP_FN (div, matrix, matrix, xdiv)
 
 DEFBINOPX (pow, matrix, matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, matrix, matrix, xleftdiv)
diff --git a/src/OPERATORS/op-m-s.cc b/src/OPERATORS/op-m-s.cc
--- a/src/OPERATORS/op-m-s.cc
+++ b/src/OPERATORS/op-m-s.cc
@@ -54,17 +54,22 @@ DEFBINOP (div, matrix, scalar)
 
   return octave_value (v1.matrix_value () / d);
 }
 
 DEFBINOP_FN (pow, matrix, scalar, xpow)
 
 DEFBINOP (ldiv, matrix, scalar)
 {
-  BINOP_NONCONFORMANT ("operator \\");
+  CAST_BINOP_ARGS (const octave_matrix&, const octave_scalar&);
+
+  Matrix m1 = v1.matrix_value ();
+  Matrix m2 = v2.matrix_value ();
+
+  return octave_value (xleftdiv (m1, m2));
 }
 
 DEFBINOP_FN (lt, matrix, scalar, mx_el_lt)
 DEFBINOP_FN (le, matrix, scalar, mx_el_le)
 DEFBINOP_FN (eq, matrix, scalar, mx_el_eq)
 DEFBINOP_FN (ge, matrix, scalar, mx_el_ge)
 DEFBINOP_FN (gt, matrix, scalar, mx_el_gt)
 DEFBINOP_FN (ne, matrix, scalar, mx_el_ne)
diff --git a/src/OPERATORS/op-s-cm.cc b/src/OPERATORS/op-s-cm.cc
--- a/src/OPERATORS/op-s-cm.cc
+++ b/src/OPERATORS/op-s-cm.cc
@@ -30,30 +30,36 @@ Software Foundation, 59 Temple Place - S
 
 #include "mx-s-cm.h"
 #include "mx-cm-s.h"
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-scalar.h"
 #include "ov-cx-mat.h"
+#include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar by complex matrix ops.
 
 DEFBINOP_OP (add, scalar, complex_matrix, +)
 DEFBINOP_OP (sub, scalar, complex_matrix, -)
 DEFBINOP_OP (mul, scalar, complex_matrix, *)
 
 DEFBINOP (div, scalar, complex_matrix)
 {
-  BINOP_NONCONFORMANT ("operator /");
+  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
+
+  Matrix m1 = v1.matrix_value ();
+  ComplexMatrix m2 = v2.complex_matrix_value ();
+
+  return octave_value (xdiv (m1, m2));
 }
 
 DEFBINOP_FN (pow, scalar, complex_matrix, xpow)
 
 DEFBINOP (ldiv, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
diff --git a/src/OPERATORS/op-s-m.cc b/src/OPERATORS/op-s-m.cc
--- a/src/OPERATORS/op-s-m.cc
+++ b/src/OPERATORS/op-s-m.cc
@@ -40,17 +40,22 @@ Software Foundation, 59 Temple Place - S
 // scalar by matrix ops.
 
 DEFBINOP_OP (add, scalar, matrix, +)
 DEFBINOP_OP (sub, scalar, matrix, -)
 DEFBINOP_OP (mul, scalar, matrix, *)
 
 DEFBINOP (div, scalar, matrix)
 {
-  BINOP_NONCONFORMANT ("operator /");
+  CAST_BINOP_ARGS (const octave_scalar&, const octave_matrix&);
+
+  Matrix m1 = v1.matrix_value ();
+  Matrix m2 = v2.matrix_value ();
+
+  return octave_value (xdiv (m1, m2));
 }
 
 DEFBINOP_FN (pow, scalar, matrix, xpow)
 
 DEFBINOP (ldiv, scalar, matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_matrix&);
 
