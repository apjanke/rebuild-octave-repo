# HG changeset patch
# User jwe
# Date 1171057840 0
#      Fri Feb 09 21:50:40 2007 +0000
# Node ID b649aa46950d5acf245a0e276045c75e4faef422
# Parent  3588fc9044842547c0e5f5997ae2953eed5058d7
[project @ 2007-02-09 21:50:40 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,15 @@
 2007-02-09  John W. Eaton  <jwe@octave.org>
 
+	* plot/figure.m: Call drawnow for current figure before creating
+	or switching to a new figure.
+	* plot/__uiobject_init_figure__.in: Handle empty arg the same as
+	nargin == 0 case.
+
 	* testfun/assert.m: Try to avoid problems when comparisons involve
 	strange values like Inf+NaNi.
 
 2007-02-08  John W. Eaton  <jwe@octave.org>
 
 	* plot/drawnow.m: Use gnuplot_binary() instead of just "gnuplot"
 	and check gnuplot_use_title_option instead of just assuming -title
 	works.  From Michael Goffioul <michael.goffioul@swing.be>.
diff --git a/scripts/plot/__uiobject_init_figure__.in b/scripts/plot/__uiobject_init_figure__.in
--- a/scripts/plot/__uiobject_init_figure__.in
+++ b/scripts/plot/__uiobject_init_figure__.in
@@ -28,17 +28,17 @@
 ## Author: jwe
 
 function f = __uiobject_init_figure__ (f)
 
   __uiobject_globals__;
 
   if (nargin == 0 || nargin == 1)
 
-    if (nargin == 0)
+    if (nargin == 0 || isempty (f))
       if (isempty (__uiobject_figure_handles_free_list__))
 	f = max (__uiobject_handles__) + 1;
       else
 	f = __uiobject_figure_handles_free_list__(1);
 	__uiobject_figure_handles_free_list__(1) = [];
       endif
     endif
 
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -26,35 +26,46 @@
 ## Author: jwe, Bill Denney
 
 function h = figure (varargin)
 
   nargs = nargin;
 
   f = [];
 
+  init_new_figure = false;
   if (mod (nargs, 2) == 1)
     tmp = varargin{1};
     if (ishandle (tmp) && strcmp (get (tmp, "type"), "figure"))
       f = tmp;
       varargin(1) = [];
       nargs--;
     elseif (isnumeric (tmp) && tmp > 0 && round (tmp) == tmp)
       f = tmp;
-      __uiobject_init_figure__ (f);
+      init_new_figure = true;
       varargin(1) = [];
       nargs--;
     else
       error ("figure: expecting figure handle or figure number");
     endif
   endif
 
+  ## Check to see if we already have a figure on the screen.  If we do,
+  ## then update it if it is different from the figure we are creating
+  ## or switching to.
+  cf = get (0, "currentfigure");
+  if (! isempty (cf) && cf != 0)
+    if (isempty (f) || cf != f)
+      drawnow ();
+    endif
+  endif
+
   if (rem (nargs, 2) == 0)
-    if (isempty (f))
-      f = __uiobject_init_figure__ ();
+    if (isempty (f) || init_new_figure)
+      f = __uiobject_init_figure__ (f);
     endif
     if (nargs > 0)
       set (f, varargin{:});
     endif
     __uiobject_adopt__ (0, f);
     set (0, "currentfigure", f);
   else
     print_usage ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2007-02-09  John W. Eaton  <jwe@octave.org>
 
+	* ov-struct.cc (octave_struct::load_ascii,
+	octave_struct::load_binary, octave_struct::load_hdf5):
+	Delete obsolete attempt at backward compatibility.
+
 	* ls-mat5.cc (read_mat5_binary_element): Don't attempt to read
 	fieldnames if there are no fields.
 	(write_mat5_tag): Don't use small data element format if bytes == 0.
 
 	* ls-mat5.cc (read_mat5_binary_element): Always create a structure
 	that is at least 1x1.
 	* ov-struct.cc (octave_struct::load_ascii,
 	octave_struct::load_binary, octave_struct::load_hdf5): Likewise.
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1056,31 +1056,25 @@ octave_struct::load_ascii (std::istream&
 
 	      // recurse to read cell elements
 	      std::string nm
 		= read_ascii_data (is, std::string (), dummy, t2, j);
 
 	      if (!is)
 		break;
 
-	      // Try for some backward compatibility...
-	      if (t2.is_cell () && t2.length() > 1)
-		m.assign (nm, t2);
-	      else
-		{
-		  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+	      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
 
-		  if (error_state)
-		    {
-		      error ("load: internal error loading struct elements");
-		      return false;
-		    }
+	      if (error_state)
+		{
+		  error ("load: internal error loading struct elements");
+		  return false;
+		}
 
-		  m.assign (nm, tcell);
-		}
+	      m.assign (nm, tcell);
 	    }
 
 	  if (is) 
 	    map = m;
 	  else
 	    {
 	      error ("load: failed to load structure");
 	      success = false;
@@ -1146,31 +1140,25 @@ octave_struct::load_binary (std::istream
 
 	  // recurse to read cell elements
 	  std::string nm = read_binary_data (is, swap, fmt, std::string (), 
 					     dummy, t2, doc);
 
 	  if (!is)
 	    break;
 
-	  // Try for some backward compatibility...
-	  if (t2.is_cell () && t2.length() > 1)
-	    m.assign (nm, t2);
-	  else
-	    {
-	      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+	  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
  
-	      if (error_state)
-		{
-		  error ("load: internal error loading struct elements");
-		  return false;
-		}
+	  if (error_state)
+	    {
+	      error ("load: internal error loading struct elements");
+	      return false;
+	    }
 
-	      m.assign (nm, tcell);
-	    }
+	  m.assign (nm, tcell);
 	}
 
       if (is) 
 	map = m;
       else
 	{
 	  error ("load: failed to load structure");
 	  success = false;
@@ -1237,31 +1225,25 @@ octave_struct::load_hdf5 (hid_t loc_id, 
 				   hdf5_read_next_data, &dsub)) > 0)
 #else
   while ((retval2 = H5Giterate (loc_id, name, &current_item,
 				hdf5_read_next_data, &dsub)) > 0)
 #endif
     {
       octave_value t2 = dsub.tc;
 
-      // Try for some backward compatibility...
-      if (t2.is_cell () && t2.length() > 1)
-	m.assign (dsub.name, t2);
-      else
-	{
-	  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
  
-	  if (error_state)
-	    {
-	      error ("load: internal error loading struct elements");
-	      return false;
-	    }
+      if (error_state)
+	{
+	  error ("load: internal error loading struct elements");
+	  return false;
+	}
 
-	  m.assign (dsub.name, tcell);
-	}
+      m.assign (dsub.name, tcell);
 
       if (have_h5giterate_bug)
 	current_item++;  // H5Giterate returned the last index processed
     }
 
   if (retval2 >= 0)
     {
       map = m;
