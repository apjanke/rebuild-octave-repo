# HG changeset patch
# User jwe
# Date 1193291456 0
#      Thu Oct 25 05:50:56 2007 +0000
# Node ID 97db94ae2cf09eda8dc817597155cd06093cb550
# Parent  faff87ff9d5a2fd33cb0aa0a21dcc2f0edd82a76
[project @ 2007-10-25 05:50:55 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2007-10-25  John W. Eaton  <jwe@octave.org>
+
+	* oct-time.cc (octave_gmtime::init, octave_localtime::init):
+	Call unix_time on arg instead of relying on conversion operator.
+
+	* oct-time.h (octave_time::double_value): New function.
+	(octave_time::operator double () const): Delete.
+	(octave_time::operator time_t () const): Delete.
+
 2007-10-24  John W. Eaton  <jwe@octave.org>
 
 	* strptime.c: Also compile if OCTAVE_HAVE_BROKEN_STRPTIME is defined.
 
 2007-10-23  John W. Eaton  <jwe@octave.org>
 
 	* CRowVector.cc (operator * const ComplexRowVector&, const
 	ComplexColumnVector&)): Delete spurious code left from patch.
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -311,27 +311,27 @@ octave_base_tm::init (void *p)
 #endif
 }
 
 void
 octave_localtime::init (const octave_time& ot)
 {
   tm_usec = ot.usec ();
 
-  time_t t = ot;
+  time_t t = ot.unix_time ();
 
   octave_base_tm::init (localtime (&t));
 }
 
 void
 octave_gmtime::init (const octave_time& ot)
 {
   tm_usec = ot.usec ();
 
-  time_t t = ot;
+  time_t t = ot.unix_time ();
 
   octave_base_tm::init (gmtime (&t));
 }
 
 void
 octave_strptime::init (const std::string& str, const std::string& fmt)
 {
   struct tm t;
diff --git a/liboctave/oct-time.h b/liboctave/oct-time.h
--- a/liboctave/oct-time.h
+++ b/liboctave/oct-time.h
@@ -65,19 +65,17 @@ public:
 
     return *this;
   }
 
   ~octave_time (void) { }
 
   void stamp (void);
 
-  operator double () const { return ot_unix_time + ot_usec / 1e6; }
-
-  operator time_t () const { return ot_unix_time; }
+  double double_value (void) const { return ot_unix_time + ot_usec / 1e6; }
 
   time_t unix_time (void) const { return ot_unix_time; }
 
   int usec (void) const { return ot_usec; }
 
   std::string ctime (void) const;
 
 private:
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2007-10-25  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.in (graphics.h): Use $(AWK) instead of awk.
+
+	* DLD-FUNCTIONS/time.cc (Ftime, Fmktime): Avoid unnecessary cast.
+
+	* data.cc (Ftic, Ftoc): Call double_value on octave_time objects
+	instead of relying on conversion operator.
+	* ov.cc (octave_value::octave_value (octave_time)): Likewise.
+
+	* variables.cc (symbol_out_of_date): Use explicit conversion to
+	time_t instead of relying on conversion operator.
+	* ov-fcn-handle.cc (octave_fcn_handle::subsref): Likewise.
+
+	* data.cc (tic_toc_timestamp): Rename from __tic_toc_timestamp__.
+	Change all uses.
+
 2007-10-24  David Bateman  <dbateman@free.fr>
 
 	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::OCTAVE_VALUE_INT_MATRIX_T
 	(const ArrayN<OCTAVE_INT_T>&)): New constructor.
 	* ov.cc (octave_value::octave_value(const ArrayN<T>) with T being
 	octave_int8, octave_uint8, octave_int16, octave_uint16,
 	octave_int32, octave_uint32, octave_int64, octave_uint64): New
 	constructors.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -1235,18 +1235,20 @@ ordered lists.\n\
     {
       if (dim < 0 || dim > dv.length () - 1)
 	{
 	  error ("sort: dim must be a valid dimension");
 	  return retval;
 	}
     }
 
-  // FIXME Perhaps sort should be made a method of the octave_value classes
-  // and then the mess of if statements both might be replaced with 
+  // FIXME -- Perhaps sort should be made a method of the octave_value
+  // classes and then the mess of if statements below might be
+  // replaced with
+  //
   //   retval = arg.sort (dim, smode, return_idx);
 
   if (arg.is_real_type ())
     {
       if (arg.is_sparse_type ())
 	{
 	  SparseMatrix m = arg.sparse_matrix_value ();
 
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -84,17 +84,17 @@ epoch is referenced to 00:00:00 CUT (Coo
 1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the\n\
 value returned by @code{time} was 856163706.\n\
 @seealso{strftime, strptime, localtime, gmtime, mktime, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    retval = static_cast<double> (octave_time ());
+    retval = octave_time ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (gmtime, args, ,
   "-*- texinfo -*-\n\
@@ -201,17 +201,17 @@ mktime (localtime (time ())\n\
     {
       Octave_map map = args(0).map_value ();
 
       if (! error_state)
 	{
 	  octave_base_tm tm = extract_tm (map);
 
 	  if (! error_state)
-	    retval = static_cast<double> (octave_time (tm));
+	    retval = octave_time (tm);
 	  else
 	    error ("mktime: invalid TMSTRUCT argument");
 	}
       else
 	error ("mktime: expecting structure argument");
     }
   else
     print_usage ();
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -364,17 +364,17 @@ builtins.cc: $(DEF_FILES) mkbuiltins
 	@echo making $@
 	@echo DEF_FILES = $(DEF_FILES)
 	@echo $(DEF_FILES) > def-files
 	@$(srcdir)/mkbuiltins def-files > $@-t
 	@$(simple-move-if-change-rule)
 
 graphics.h: graphics.h.in genprops.awk
 	@echo making $@
-	@awk -f $(srcdir)/genprops.awk $< > $@-t
+	@$(AWK) -f $(srcdir)/genprops.awk $< > $@-t
 	@$(simple-move-if-change-rule)
 
 PKG_ADD: $(DLD_DEF_FILES)
 	$(srcdir)/mk-pkg-add $(DLD_DEF_FILES) > $@-t
 	@$(simple-move-if-change-rule)
 
 DOCSTRINGS: gendoc$(BUILD_EXEEXT)
 	@echo making $@
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2959,17 +2959,17 @@ DEFUN (or, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} or (@var{x}, @var{y})\n\
 This function is equivalent to @code{x | y}.\n\
 @end deftypefn")
 {
   BINARY_OP_DEFUN_BODY (op_el_or);
 }
 
-static double __tic_toc_timestamp__ = -1.0;
+static double tic_toc_timestamp = -1.0;
 
 DEFUN (tic, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} tic ()\n\
 @deftypefnx {Built-in Function} {} toc ()\n\
 Set or check a wall-clock timer.  Calling @code{tic} without an\n\
 output argument sets the timer.  Subsequent calls to @code{toc}\n\
 return the number of seconds since the timer was set.  For example,\n\
@@ -3014,53 +3014,64 @@ t = cputime (); sleep (5); cputime () - 
 @end example\n\
 \n\
 @noindent\n\
 (This example also illustrates that the CPU timer may have a fairly\n\
 coarse resolution.)\n\
 @end deftypefn")
 {
   octave_value retval;
+
   int nargin = args.length ();
 
   if (nargin != 0)
     warning ("tic: ignoring extra arguments");
 
+  octave_time now;
+
+  double tmp = now.double_value ();
+
   if (nargout > 0)
-    retval = static_cast<octave_uint64> (static_cast<double> (octave_time ()) * 1.0e6);
+    retval = static_cast<octave_uint64> (1e6 * tmp);
   else
-    __tic_toc_timestamp__= static_cast<double>(octave_time ());
+    tic_toc_timestamp = tmp;
       
   return retval;
 }
 
 DEFUN (toc, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} toc ()\n\
 See tic.\n\
 @end deftypefn")
 {
-  double sec = static_cast<double>(octave_time ());
   octave_value retval;
+
   int nargin = args.length ();
 
   if (nargin != 0)
     warning ("tic: ignoring extra arguments");
 
-  if (__tic_toc_timestamp__ < 0)
+  if (tic_toc_timestamp < 0)
     {
       warning ("toc called before timer set");
       if (nargout > 0)
-	retval = Matrix();
+	retval = Matrix ();
     }
-  else if (nargout > 0)
-    retval = sec - __tic_toc_timestamp__;
   else
-    octave_stdout << "Elapsed time is " << sec - __tic_toc_timestamp__ 
-		  << " seconds.\n";
+    {
+      octave_time now;
+
+      double tmp = now.double_value () - tic_toc_timestamp;
+
+      if (nargout > 0)
+	retval = tmp;
+      else
+	octave_stdout << "Elapsed time is " << tmp << " seconds.\n";
+    }
     
   return retval;
 }
 
 DEFUN (cputime, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{total}, @var{user}, @var{system}] =} cputime ();\n\
 Return the CPU time used by your Octave session.  The first output is\n\
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -87,17 +87,18 @@ octave_fcn_handle::subsref (const std::s
     case '(':
       {
 	octave_function *f = function_value ();
 
 	if (f && f->time_checked () < Vlast_prompt_time)
 	  {
 	    std::string ff_nm = f->fcn_file_name ();
 
-	    time_t tp = f->time_parsed ();
+	    octave_time ottp = f->time_parsed ();
+	    time_t tp = ottp.unix_time ();
 
 	    if (ff_nm.empty ())
 	      {
 		// FIXME -- need to handle inline and
 		// command-line functions here.
 	      }
 	    else
 	      {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -343,17 +343,17 @@ octave_value::octave_value (long long in
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
 octave_value::octave_value (unsigned long long int i)
   : rep (new octave_scalar (i))
 {
 }
 #endif
 
 octave_value::octave_value (octave_time t)
-  : rep (new octave_scalar (t))
+  : rep (new octave_scalar (t.double_value ()))
 {
 }
 
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d))
 {
 }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1003,17 +1003,18 @@ symbol_out_of_date (symbol_record *sr)
 	    {
 	      octave_time tc = fcn->time_checked ();
 
 	      bool relative = fcn->is_relative ();
 
 	      if (tc < Vlast_prompt_time
 		  || (relative && tc < Vlast_chdir_time))
 		{
-		  time_t tp = fcn->time_parsed ();
+		  octave_time ottp = fcn->time_parsed ();
+		  time_t tp = ottp.unix_time ();
 
 		  std::string nm = fcn->is_nested_function ()
 		    ? fcn->parent_fcn_name () : fcn->name ();
 
 		  // FIXME -- the following code is repeated
 		  // in load_fcn_from_file in parse.y.
 
 		  int nm_len = nm.length ();
