# HG changeset patch
# User jwe
# Date 1057792819 0
#      Wed Jul 09 23:20:19 2003 +0000
# Node ID f3c21a1d1c621f20f4172d274128af5682b5550f
# Parent  ea1d3e1a4b1b687d5631ab6981e3ee2147750494
[project @ 2003-07-09 23:20:18 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,15 +1,16 @@
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-mod.el (octave-variables): Include
 	DEFAULT_EXEC_PATH, DEFAULT_LOAD_PATH, crash_dumps_octave_core,
-	sighup_dumps_octave_core, sigterm_dumps_octave_core, and
-	warn_imag_to_real in the list.
-	Delete ok_to_lose_imaginary_part from list.	
+	sighup_dumps_octave_core, sigterm_dumps_octave_core,
+	warn_imag_to_real, warn_num_to_str, and warn_str_to_num in the list.
+	Delete ok_to_lose_imaginary_part, implicit_num_to_str_ok, and
+	implicit_str_to_num_ok from the list.
 
 2003-07-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-default-vals): Substitute OCTAVE_API_VERSION.
 	* octave-config.in: Handle new variable OCTAVE_API_VERSION.
 
 	* octMakefile.in (DIRS_TO_MAKE): Delete undefined vars
 	$(localfcnfilepathdirs) and $(localoctfilepathdirs) from the list.
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -236,26 +236,16 @@ Interpreter:
     intelligently so that something like
 
       debug> x = 1; return
 
     will work as expected.
 
   * Fix the parser so that
 
-      function foo ()
-        implicit_str_to_num_ok = 1;
-        '#' + 0;
-      endfunction
-
-    succeeds, even when implicit_str_to_num_ok is 0 at the time the
-    function is parsed.
-
-  * Fix the parser so that
-
       if (expr) 'this is a string' end
 
     is parsed as IF expr STRING END.
 
   * Consider grouping all preference variables in a structure instead
     of further polluting the namespace.  Maybe `Octave_options.xxx'?
 
   * Rewrite functions in input.cc to do the right thing in all cases
diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -720,18 +720,16 @@ variables may have been introduced since
   PS2 = ""
   beep_on_error = 1.0
   default_eval_print_flag = 0.0
   default_save_format = "mat-binary"
   define_all_return_values = 1.0
   do_fortran_indexing = 1.0
   empty_list_elements_ok = 1.0
   fixed_point_format = 1.0
-  implicit_num_to_str_ok = 1.0
-  implicit_str_to_num_ok = 1.0
   page_screen_output = 0.0
   prefer_column_vectors = 0.0
   prefer_zero_one_indexing = 1.0
   print_empty_dimensions = 0.0
   treat_neg_dim_as_zero = 1.0
   warn_function_name_clash = 0.0
   whitespace_in_literal_matrix = "traditional"
 @end group
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -158,17 +158,16 @@ values for compatibility with @sc{Matlab
 PS1                           = ">> "
 PS2                           = ""
 beep_on_error                 = 1
 default_save_format           = "mat-binary"
 define_all_return_values      = 1
 do_fortran_indexing           = 1
 crash_dumps_octave_core       = 0
 empty_list_elements_ok        = 1
-implicit_str_to_num_ok        = 1
 page_screen_output            = 0
 prefer_column_vectors         = 0
 print_empty_dimensions        = 0
 treat_neg_dim_as_zero         = 1
 warn_function_name_clash      = 0
 whitespace_in_literal_matrix  = "traditional"
 @end example
 
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -184,19 +184,19 @@ Data Types}, for more information about 
 @DOCSTRING(tolower)
 
 @DOCSTRING(toupper)
 
 @DOCSTRING(do_string_escapes)
 
 @DOCSTRING(undo_string_escapes)
 
-@DOCSTRING(implicit_num_to_str_ok)
+@DOCSTRING(warn_num_to_str)
 
-@DOCSTRING(implicit_str_to_num_ok)
+@DOCSTRING(warn_str_to_num)
 
 @DOCSTRING(warn_single_quote_string)
 
 @node Character Class Functions
 @section Character Class Functions
 
 Octave also provides the following character class test functions
 patterned after the functions in the standard C library.  They all
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -296,26 +296,16 @@ Default value: @code{"~/.octave_hist"}.
 
 Default value: 1024.
 
 @item ignore_function_time_stamp
 @xref{Function Files}.
 
 Default value: @code{"system"}.
 
-@item implicit_num_to_str_ok
-@xref{String Conversions}.
-
-Default value: 0.
-
-@item implicit_str_to_num_ok
-@xref{String Conversions}.
-
-Default value: 0.
-
 @item max_recursion_depth
 @xref{Recursion}.
 
 Default value: 256.
 
 @item output_max_field_width
 @xref{Matrices}.
 
@@ -411,31 +401,51 @@ Default value: 1.
 
 Default value: 1.
 
 @item warn_divide_by_zero
 @xref{Arithmetic Ops}.
 
 Default value: 1.
 
+@item warn_function_name_clash
+@xref{Function Files}.
+
+Default value: 1.
+
 @item warn_imag_to_real
 @xref{Special Utility Matrices}.
 
 Default value: 0.
 
-@item warn_function_name_clash
-@xref{Function Files}.
+@item warn_missing_semicolon
+@xref{Defining Functions}.
+
+Default value: 0.
+
+@item warn_num_to_str
+@xref{String Conversions}.
 
 Default value: 1.
 
+@item warn_str_to_num
+@xref{String Conversions}.
+
+Default value: 0.
+
 @item warn_reload_forces_clear
 @xref{Dynamically Linked Functions}.
 
 Default value: 1.
 
+@item warn_single_quote_string)
+@xref{String Conversions}.
+
+Default value: 0.
+
 @item warn_variable_switch_label
 @xref{The switch Statement}.
 
 Default value: 0.
 
 @item whitespace_in_literal_matrix
 @xref{Matrices}.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -140,33 +140,33 @@ All Octave abbrevs start with a grave ac
     "__program_invocation_name__" "__program_name__" "__realmax__"
     "__realmin__" "__stderr__" "__stdin__" "__stdout__" "ans" "argv"
     "automatic_replot" "beep_on_error" "completion_append_char"
     "crash_dumps_octave_core"
     "default_return_value" "default_save_format"
     "define_all_return_values" "do_fortran_indexing" "e"
     "echo_executing_commands" "empty_list_elements_ok" "eps"
     "error_text" "gnuplot_binary" "history_file"
-    "history_size" "ignore_function_time_stamp" "implicit_str_to_num_ok"
+    "history_size" "ignore_function_time_stamp"
     "inf" "nan" "nargin"
     "output_max_field_width" "output_precision"
     "page_output_immediately" "page_screen_output" "pi"
     "prefer_column_vectors" "prefer_zero_one_indexing"
     "print_answer_id_name" "print_empty_dimensions"
     "program_invocation_name" "program_name" "propagate_empty_matrices"
     "realmax" "realmin" "resize_on_range_error"
     "return_last_computed_value" "save_precision" "saving_history"
     "sighup_dumps_octave_core" "sigterm_dumps_octave_core"
     "silent_functions" "split_long_rows" "stderr" "stdin" "stdout"
     "string_fill_char" "struct_levels_to_print"
     "suppress_verbose_help_message" "treat_neg_dim_as_zero"
     "warn_assign_as_truth_value" "warn_comma_in_global_decl"
     "warn_divide_by_zero" "warn_function_name_clash"
-    "warn_imag_to_real"
-    "warn_missing_semicolon" "whitespace_in_literal_matrix")
+    "warn_imag_to_real" "warn_missing_semicolon"
+     "warn_num_to_str" "warn_str_to_num" "whitespace_in_literal_matrix")
   "Builtin variables in Octave.")
 
 (defvar octave-function-header-regexp
   (concat "^\\s-*\\<\\(function\\)\\>"
 	  "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")
   "Regexp to match an Octave function header.
 The string `function' and its name are given by the first and third
 parenthetical grouping.")
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,15 +1,20 @@
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* statistics/base/moment.m: Temporarily set warn_str_to_num, not
+	implict_str_to_num_ok.  Use unwind_protect block to do it.
+
 	* miscellaneous/dump_prefs.m: Include DEFAULT_EXEC_PATH,
 	DEFAULT_LOAD_PATH, crash_dumps_octave_core,
-	sighup_dumps_octave_core, sigterm_dumps_octave_core, and
-	warn_imag_to_real in the list.
-	Delete ok_to_lose_imaginary_part from list.	
+	sighup_dumps_octave_core, sigterm_dumps_octave_core,
+	warn_imag_to_real, warn_num_to_str, and warn_str_to_num in the
+	list.
+	Delete ok_to_lose_imaginary_part, implicit_num_to_str_ok, and
+	implicit_str_to_num_ok from list.
 
 2003-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (distclean, maintainer-clean): Also remove
 	gethelp$(BUILD_EXEEXT), $(DOCSTRINGS), and autom4te.cache
 	directory.
 
 2003-06-17  Aaron A. King <king@quercus.tiem.utk.edu>
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -69,18 +69,16 @@ function dump_prefs (file)
               "gnuplot_command_splot";
               "gnuplot_command_title";
               "gnuplot_command_using";
               "gnuplot_command_with";
               "gnuplot_has_frames";
               "history_file";
               "history_size";
               "ignore_function_time_stamp";
-              "implicit_num_to_str_ok";
-              "implicit_str_to_num_ok";
               "initialize_global_variables";
               "max_recursion_depth";
               "output_max_field_width";
               "output_precision";
               "page_output_immediately";
               "page_screen_output";
               "prefer_column_vectors";
               "print_answer_id_name";
@@ -100,16 +98,18 @@ function dump_prefs (file)
               "suppress_verbose_help_message";
               "treat_neg_dim_as_zero";
               "warn_assign_as_truth_value";
               "warn_divide_by_zero";
               "warn_function_name_clash";
               "warn_future_time_stamp";
               "warn_imag_to_real";
               "warn_missing_semicolon";
+              "warn_num_to_str";
+              "warn_str_to_num";
               "warn_variable_switch_label";
               "whitespace_in_literal_matrix"];
 
   for i = 1:rows(var_list)
     var = deblank (var_list(i,:));
     try
       fprintf (file, "  %s = %s\n", var, type ("-q", var));
     catch
diff --git a/scripts/statistics/base/moment.m b/scripts/statistics/base/moment.m
--- a/scripts/statistics/base/moment.m
+++ b/scripts/statistics/base/moment.m
@@ -52,22 +52,25 @@ function m = moment (x, p, opt)
   if (nr == 0 || nc == 0)
     error ("moment: x must not be empty");
   elseif (nr == 1)
     x  = reshape (x, nc, 1);
     nr = nc;
   endif
 
   if (nargin == 3)
-    tmp = implicit_str_to_num_ok;
-    implicit_str_to_num_ok = "true";
-    if any (opt == "c")
-      x = x - ones (nr, 1) * sum (x) / nr;
-    endif
-    if any (opt == "a")
-      x = abs (x);
-    endif
-    implicit_str_to_num_ok = tmp;
+    tmp = warn_str_to_num;
+    unwind_protect
+      warn_str_to_num = 0;
+      if any (opt == "c")
+	x = x - ones (nr, 1) * sum (x) / nr;
+      endif
+      if any (opt == "a")
+	x = abs (x);
+      endif
+    unwind_protect_cleanup
+      warn_str_to_num = tmp;
+    end_unwind_protect
   endif
 
   m = sum(x .^ p) / nr;
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,59 @@
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.cc (octave_value::convert_to_str): Call convert_to_str_internal.
+	(octave_value::convert_to_str_internal): New virtual function.
+	Rename all derived class convert_to_str functions to match.	
+
+	* variables.cc (generate_struct_completions): Set
+	discard_warning_messages, not Vwarning_option.  Also protect
+	warning_state.
+
+	* parse.y (fold): Temporarily discard warning messages.
+	Also protect warning_state.
+
+	* error.cc (discard_warning_messages): New variable.
+	(vwarning): Use it.
+	(warning): Don't print backtrace if discard_warning_messages is true.
+
+	* ov.cc (octave_value::convert_to_str):
+	Handle type conversion warning here.
+
+	* gripes.cc (gripe_implicit_conversion):
+	New function accepting std::string args.
+
+	* octave.cc (maximum_braindamage): Don't set
+	implicit_num_to_str_ok or implicit_str_to_num_ok.
+
+	* ov-base.cc (octave_base_value::char_matrix_value):
+	Vimplicit_num_to_str_ok no longer exists.
+	(octave_base_value::all_strings): Likewise.
+	(octave_base_value::string_value): Likewise.
+
+	* ov-str-mat.cc (octave_char_matrix_str::matrix_value): Warn based
+	on Vwarn_str_to_num instead of Vimplicit_str_to_num_ok.
+
+	* ov.cc (Vwarn_num_to_str, Vwarn_str_to_num): New variables.
+	(warn_num_to_str, warn_str_to_num): New functions.
+	(symbols_of_ov): Add DEFVARs for warn_num_to_str and Vwarn_str_to_num.
+	* ov.h (Vwarn_num_to_str, Vwarn_str_to_num): Provide decl.
+
+	* ov.cc (Vimplicit_num_to_str_ok, Vimplicit_str_to_num_ok):
+	Delete unused variables.
+	(implicit_num_to_str_ok, implicit_str_to_num_ok):
+	Delete unused functions.
+	(symbols_of_ov): Delete DEFVARs for implicit_num_to_str_ok and
+	implicit_str_to_num_ok.
+	* ov.h (Vimplicit_num_to_str_ok, Vimplicit_str_to_num_ok):
+	Delete decls.
+
+	* pt-mat.cc (tree_matrix::rvalue): Vimplicit_num_to_str_ok no
+	longer exists.
+
 	* ov.cc (Vwarn_imag_to_real): New variable.
 	(warn_imag_to_real): New function.
 	(symbols_of_ov): Add DEFVAR for warn_imag_to_real.
 	* ov.h (Vwarn_imag_to_real): Provide decl.
 
 	* ov.cc (Vok_to_lose_imaginary_part): Delete unused variable.
 	(ok_to_lose_imaginary_part): Delete unused function.
 	(symbols_of_ov): Delete DEFVAR for ok_to_lose_imaginary_part.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -95,16 +95,19 @@ int warning_state = 0;
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 bool buffer_error_messages = false;
 
 // TRUE means error messages are turned off.
 bool discard_error_messages = false;
 
+// TRUE means warning messages are turned off.
+bool discard_warning_messages = false;
+
 // The message buffer.
 static OSSTREAM *error_message_buffer = 0;
 
 void
 reset_error_handler (void)
 {
   error_state = 0;
   warning_state = 0;
@@ -112,16 +115,19 @@ reset_error_handler (void)
   discard_error_messages = false;
 }
 
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
 {
+  if (discard_warning_messages)
+    return;
+
   flush_octave_stdout ();
 
   OSSTREAM output_buf;
 
   if (name)
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
@@ -353,17 +359,18 @@ pr_where (const char *name)
 
 void
 warning (const char *fmt, ...)
 {
   if (Vwarning_option != "off")
     {
       if (curr_sym_tab != top_level_sym_tab
 	  && Vwarning_option == "backtrace"
-	  && ! warning_state)
+	  && ! warning_state
+	  && ! discard_warning_messages)
 	pr_where ("warning");
 
       va_list args;
       va_start (args, fmt);
       vwarning ("warning", fmt, args);
       va_end (args);
 
       warning_state = 1;
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -47,16 +47,19 @@ extern int warning_state;
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 extern bool buffer_error_messages;
 
 // TRUE means error messages are turned off.
 extern bool discard_error_messages;
 
+// TRUE means warning messages are turned off.
+extern bool discard_warning_messages;
+
 // The current warning state.  Valid values are "on", "off",
 // "backtrace", or "debug".
 extern std::string Vwarning_option;
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -159,16 +159,22 @@ gripe_wrong_type_arg_for_binary_op (cons
 
 void
 gripe_implicit_conversion (const char *from, const char *to)
 {
   warning ("implicit conversion from %s to %s", from, to);
 }
 
 void
+gripe_implicit_conversion (const std::string& from, const std::string& to)
+{
+  warning ("implicit conversion from %s to %s", from.c_str (), to.c_str ());
+}
+
+void
 gripe_divide_by_zero (void)
 {
   if (Vwarn_divide_by_zero)
     warning ("division by zero");
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -85,16 +85,19 @@ gripe_wrong_type_arg_for_unary_op (const
 
 extern void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
 extern void
 gripe_implicit_conversion (const char *from, const char *to);
 
 extern void
+gripe_implicit_conversion (const std::string& from, const std::string& to);
+
+extern void
 gripe_divide_by_zero (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -347,18 +347,16 @@ maximum_braindamage (void)
   bind_builtin_variable ("beep_on_error", true);
   bind_builtin_variable ("crash_dumps_octave_core", false);
   bind_builtin_variable ("default_eval_print_flag", false);
   bind_builtin_variable ("default_global_variable_value", Matrix ());
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", true);
   bind_builtin_variable ("do_fortran_indexing", true);
   bind_builtin_variable ("fixed_point_format", true);
-  bind_builtin_variable ("implicit_num_to_str_ok", true);
-  bind_builtin_variable ("implicit_str_to_num_ok", true);
   bind_builtin_variable ("initialize_global_variables", true);
   bind_builtin_variable ("page_screen_output", false);
   bind_builtin_variable ("prefer_column_vectors", false);
   bind_builtin_variable ("print_empty_dimensions", false);
   bind_builtin_variable ("treat_neg_dim_as_zero", true);
   bind_builtin_variable ("warn_function_name_clash", false);
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
 }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -161,19 +161,19 @@ octave_base_value::subsasgn (const std::
 
       retval = tmp.subsasgn (type, idx, rhs);
     }
 
   return retval;
 }
 
 octave_value
-octave_base_value::convert_to_str (bool) const
+octave_base_value::convert_to_str_internal (bool) const
 {
-  gripe_wrong_type_arg ("octave_base_value::convert_to_str ()",
+  gripe_wrong_type_arg ("octave_base_value::convert_to_str_internal ()",
 			type_name ());
   return octave_value ();
 }
 
 void
 octave_base_value::convert_to_row_or_column_vector (void)
 {
   gripe_wrong_type_arg
@@ -309,61 +309,46 @@ octave_base_value::complex_matrix_value 
   return retval;
 }
 
 charMatrix
 octave_base_value::char_matrix_value (bool) const
 {
   charMatrix retval;
 
-  if (Vimplicit_num_to_str_ok)
-    {
-      octave_value tmp = convert_to_str ();
+  octave_value tmp = convert_to_str ();
 
-      if (! error_state)
-	retval = tmp.char_matrix_value ();
-    }
-  else
-    gripe_wrong_type_arg ("octave_base_value::char_matrix_value()",
-			  type_name ());
+  if (! error_state)
+    retval = tmp.char_matrix_value ();
+
   return retval;
 }
 
 string_vector
 octave_base_value::all_strings (bool pad) const
 {
   string_vector retval;
 
-  if (Vimplicit_num_to_str_ok)
-    {
-      octave_value tmp = convert_to_str (pad);
+  octave_value tmp = convert_to_str (pad);
 
-      if (! error_state)
-	retval = tmp.all_strings ();
-    }
-  else
-    gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
+  if (! error_state)
+    retval = tmp.all_strings ();
 
   return retval;
 }
 
 std::string
 octave_base_value::string_value (void) const
 {
   std::string retval;
 
-  if (Vimplicit_num_to_str_ok)
-    {
-      octave_value tmp = convert_to_str ();
+  octave_value tmp = convert_to_str ();
 
-      if (! error_state)
-	retval = tmp.string_value ();
-    }
-  else
-    gripe_wrong_type_arg ("octave_base_value::string_value()", type_name ());
+  if (! error_state)
+    retval = tmp.string_value ();
 
   return retval;
 }
 
 Range
 octave_base_value::range_value (void) const
 {
   Range retval;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -214,17 +214,17 @@ public:
   octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   bool bool_value (void) const;
 
   boolMatrix bool_matrix_value (void) const;
 
-  octave_value convert_to_str (bool pad = false) const;
+  octave_value convert_to_str_internal (bool pad = false) const;
 
   void convert_to_row_or_column_vector (void);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -93,17 +93,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   boolMatrix bool_matrix_value (void) const
     { return matrix; }
 
-  octave_value convert_to_str (bool = false) const
+  octave_value convert_to_str_internal (bool = false) const
     { return octave_value (matrix); }
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -98,17 +98,17 @@ octave_bool::do_index_op (const octave_v
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 octave_value
-octave_bool::convert_to_str (bool) const
+octave_bool::convert_to_str_internal (bool) const
 {
   char s[2];
   s[0] = static_cast<char> (scalar);
   s[1] = '\0';
 
   return octave_value (s);
 }
 
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -97,17 +97,17 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   bool bool_value (void) const { return scalar; }
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
-  octave_value convert_to_str (bool pad = false) const;
+  octave_value convert_to_str_internal (bool pad = false) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -93,17 +93,17 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
-  octave_value convert_to_str (bool pad = false) const
+  octave_value convert_to_str_internal (bool pad = false) const
     { return all_strings (pad); }
 
   string_vector all_strings (bool pad = false) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -96,17 +96,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   charMatrix char_matrix_value (bool = false) const
     { return matrix; }
 
-  octave_value convert_to_str (bool = false) const
+  octave_value convert_to_str_internal (bool = false) const
     { return octave_value (matrix, true); }
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -112,19 +112,18 @@ any_element_greater_than (const Matrix& 
 #define MAPPER_LOOP(T, F, M) \
   MAPPER_LOOP_1 (T, F, M, )
 
 octave_value
 octave_mapper::apply (const octave_value& arg) const
 {
   octave_value retval;
 
-  // XXX FIXME XXX -- is_real_type can return true for strings if
-  // implicit_str_to_num_ok is nonzero.  Should it really work that
-  // way?
+  // XXX FIXME XXX -- is_real_type can return true.  Should it really
+  // work that way?
 
   if (arg.is_real_type () && ! (arg.is_string () && ch_map_fcn))
     {
       if (arg.is_scalar_type ())
 	{
 	  double d = arg.double_value ();
 
 	  if (can_ret_cmplx_for_real && (d < lower_limit || d > upper_limit))
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -200,17 +200,17 @@ octave_range::complex_value (bool) const
     retval = range.base ();
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
 }
 
 octave_value
-octave_range::convert_to_str (bool pad) const
+octave_range::convert_to_str_internal (bool pad) const
 {
   octave_value tmp (range.matrix_value ());
   return tmp.convert_to_str (pad);
 }
 
 void
 octave_range::print (std::ostream& os, bool pr_as_read_syntax) const
 {
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -149,17 +149,17 @@ public:
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
   Range range_value (void) const { return range; }
 
-  octave_value convert_to_str (bool pad = false) const;
+  octave_value convert_to_str_internal (bool pad = false) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -107,17 +107,17 @@ octave_matrix::complex_value (bool) cons
     retval = matrix (0, 0);
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
 }
 
 octave_value
-octave_matrix::convert_to_str (bool) const
+octave_matrix::convert_to_str_internal (bool) const
 {
   octave_value retval;
 
   int nr = matrix.rows ();
   int nc = matrix.columns ();
 
   if (nr == 0 && nc == 0)
     {
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -97,17 +97,17 @@ public:
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
-  octave_value convert_to_str (bool pad = false) const;
+  octave_value convert_to_str_internal (bool pad = false) const;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -72,17 +72,17 @@ octave_scalar::do_index_op (const octave
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 octave_value
-octave_scalar::convert_to_str (bool) const
+octave_scalar::convert_to_str_internal (bool) const
 {
   octave_value retval;
 
   if (xisnan (scalar))
     ::error ("invalid conversion from NaN to character");
   else
     {
       int ival = NINT (scalar);
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -89,17 +89,17 @@ public:
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
-  octave_value convert_to_str (bool pad = false) const;
+  octave_value convert_to_str_internal (bool pad = false) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -147,28 +147,20 @@ octave_char_matrix_str::valid_as_scalar_
   return retval;
 }
 
 Matrix
 octave_char_matrix_str::matrix_value (bool force_string_conv) const
 {
   Matrix retval;
 
-  int flag = force_string_conv;
-
-  if (! flag)
-    flag = Vimplicit_str_to_num_ok;
-
-  if (flag < 0)
+  if (! force_string_conv && Vwarn_str_to_num)
     gripe_implicit_conversion ("string", "real matrix");
 
-  if (flag)
-    retval = Matrix (matrix);
-  else
-    gripe_invalid_conversion ("string", "real matrix");
+  retval = Matrix (matrix);
 
   return retval;
 }
 
 string_vector
 octave_char_matrix_str::all_strings (bool) const
 {
   int n = matrix.rows ();
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -77,31 +77,29 @@ static bool Vsilent_functions;
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 bool Vdo_fortran_indexing;
 
-// Should `[97, 98, 99, "123"]' be a string?
-bool Vimplicit_num_to_str_ok;
+// Should we warn about conversions from complex to real?
+int Vwarn_imag_to_real;
 
-// Should we allow things like:
+// Should we print a warning when converting `[97, 98, 99, "123"]'
+// to a character string?
+bool Vwarn_num_to_str;
+
+// If TRUE, warn for operations like
 //
 //   octave> 'abc' + 0
 //   97 98 99
 //
-// to happen?  A positive value means yes.  A negative value means
-// yes, but print a warning message.  Zero means it should be
-// considered an error.
-int Vimplicit_str_to_num_ok;
-
-// Should we warn about conversions from complex to real?
-int Vwarn_imag_to_real;
+int Vwarn_str_to_num;
 
 // If TRUE, create column vectors when doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined).  Only matters when resize_on_range_error is also
 // TRUE.
 static bool Vprefer_column_vectors;
@@ -1123,16 +1121,27 @@ octave_value::complex_vector_value (bool
     {
       std::string tn = type_name ();
       gripe_invalid_conversion (tn.c_str (), "complex vector");
     }
 
   return retval;
 }
 
+octave_value
+octave_value::convert_to_str (bool pad) const
+{
+  octave_value retval = convert_to_str_internal (pad);
+
+  if (is_numeric_type () && Vwarn_num_to_str)
+    gripe_implicit_conversion (type_name (), retval.type_name ());
+
+  return retval;
+}
+
 void
 octave_value::print_with_name (std::ostream& output_buf,
 			       const std::string& name, 
 			       bool print_padding) const
 {
   if (! (evaluating_function_body && Vsilent_functions))
     {
       bool pad_after = print_name_tag (output_buf, name);
@@ -1749,35 +1758,35 @@ do_fortran_indexing (void)
   Vdo_fortran_indexing = check_preference ("do_fortran_indexing");
 
   liboctave_dfi_flag = Vdo_fortran_indexing;
 
   return 0;
 }
 
 static int
-implicit_num_to_str_ok (void)
+warn_imag_to_real (void)
 {
-  Vimplicit_num_to_str_ok = check_preference ("implicit_num_to_str_ok");
+  Vwarn_imag_to_real = check_preference ("warn_imag_to_real");
 
   return 0;
 }
 
 static int
-implicit_str_to_num_ok (void)
+warn_num_to_str (void)
 {
-  Vimplicit_str_to_num_ok = check_preference ("implicit_str_to_num_ok");
+  Vwarn_num_to_str = check_preference ("warn_num_to_str");
 
   return 0;
 }
 
 static int
-warn_imag_to_real (void)
+warn_str_to_num (void)
 {
-  Vwarn_imag_to_real = check_preference ("warn_imag_to_real");
+  Vwarn_str_to_num = check_preference ("warn_str_to_num");
 
   return 0;
 }
 
 static int
 prefer_column_vectors (void)
 {
   Vprefer_column_vectors
@@ -1855,43 +1864,16 @@ symbols_of_ov (void)
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} do_fortran_indexing\n\
 If the value of @code{do_fortran_indexing} is nonzero, Octave allows \n\
 you to select elements of a two-dimensional matrix using a single index\n\
 by treating the matrix as a single vector created from the columns of\n\
 the matrix.  The default value is 0. \n\
 @end defvr");
 
-  DEFVAR (implicit_num_to_str_ok, false, implicit_num_to_str_ok,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} implicit_num_to_str_ok\n\
-If the value of @code{implicit_num_to_str_ok} is nonzero, implicit\n\
-conversions of numbers to their ASCII character equivalents are\n\
-allowed when strings are constructed using a mixture of strings and\n\
-numbers in matrix notation.  Otherwise, an error message is printed and\n\
-control is returned to the top level. The default value is 0.  For\n\
-example,\n\
-\n\
-@example\n\
-@group\n\
-[ \"f\", 111, 111 ]\n\
-     @result{} \"foo\"\n\
-@end group\n\
-@end example\n\
-@end defvr");
-
-  DEFVAR (implicit_str_to_num_ok, false, implicit_str_to_num_ok,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} implicit_str_to_num_ok\n\
-If the value of @code{implicit_str_to_num_ok} is nonzero, implicit\n\
-conversions of strings to their numeric ASCII equivalents are allowed.\n\
-Otherwise, an error message is printed and control is returned to the\n\
-top level.  The default value is 0.\n\
-@end defvr");
-
   DEFVAR (prefer_column_vectors, true, prefer_column_vectors,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} prefer_column_vectors\n\
 If @code{prefer_column_vectors} is nonzero, operations like\n\
 \n\
 @example\n\
 for i = 1:10\n\
   a (i) = i;\n\
@@ -1981,15 +1963,49 @@ 0, the warning is omitted.  The default 
 
   DEFVAR (warn_imag_to_real, false, warn_imag_to_real,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_imag_to_real\n\
 If the value of @code{warn_imag_to_real} is nonzero, a warning is\n\
 printed for implicit conversions of complex numbers to real numbers.\n\
 The default value is 0.\n\
 @end defvr");
+
+  DEFVAR (warn_num_to_str, true, warn_num_to_str,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_num_to_str\n\
+If the value of @code{warn_num_to_str} is nonzero, a warning is\n\
+printed for implicit conversions of numbers to their ASCII character\n\
+equivalents when strings are constructed using a mixture of strings and\n\
+numbers in matrix notation.  For example,\n\
+\n\
+@example\n\
+@group\n\
+[ \"f\", 111, 111 ]\n\
+     @result{} \"foo\"\n\
+@end group\n\
+@end example\n\
+elicits a warning if @code{warn_num_to_str} is nonzero.  The default\n\
+value is 1.\n\
+@end defvr");
+
+  DEFVAR (warn_str_to_num, false, warn_str_to_num,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_str_to_num\n\
+If the value of @code{warn_str_to_num} is nonzero, a warning is printed\n\
+for implicit conversions of strings to their numeric ASCII equivalents.\n\
+For example,\n\
+@example\n\
+@group\n\
+\"abc\" + 0\n\
+     @result{} 97 98 99\n\
+@end group\n\
+@end example\n\
+elicits a warning if @code{warn_str_to_num} is nonzero.  The default\n\
+value is 0.\n\
+@end defvr");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -531,18 +531,20 @@ public:
 
   Array<Complex> complex_vector_value (bool frc_str_conv = false,
 				       bool frc_vec_conv = false) const;
 
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
   // it, and we should convert it if possible.
 
-  virtual octave_value convert_to_str (bool pad = false) const
-    { return rep->convert_to_str (pad); }
+  octave_value convert_to_str (bool pad = false) const;
+
+  virtual octave_value convert_to_str_internal (bool pad = false) const
+    { return rep->convert_to_str_internal (pad); }
 
   virtual void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
   virtual void print (std::ostream& os, bool pr_as_read_syntax = false) const
     { rep->print (os, pr_as_read_syntax); }
 
   virtual void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const
@@ -718,28 +720,26 @@ OV_BINOP_FN (op_struct_ref)
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 extern bool Vdo_fortran_indexing;
 
-// Should `[97, 98, 99, "123"]' be a string?
-extern bool Vimplicit_num_to_str_ok;
+// Should we print a warning when converting `[97, 98, 99, "123"]'
+// to a character string?
+extern bool Vwarn_num_to_str;
 
-// Should we allow things like:
+// If TRUE, warn for operations like
 //
 //   octave> 'abc' + 0
 //   97 98 99
 //
-// to happen?  A positive value means yes.  A negative value means
-// yes, but print a warning message.  Zero means it should be
-// considered an error.
-extern int Vimplicit_str_to_num_ok;
+extern int Vwarn_str_to_num;
 
 // Should we warn about conversions from complex to real?
 extern int Vwarn_imag_to_real;
 
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1729,19 +1729,23 @@ make_plot_command (token *tok, plot_limi
 static tree_expression *
 fold (tree_binary_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("fold_binary_expression");
 
   unwind_protect_int (error_state);
+  unwind_protect_int (warning_state);
 
   unwind_protect_bool (discard_error_messages);
+  unwind_protect_bool (discard_warning_messages);
+
   discard_error_messages = true;
+  discard_warning_messages = true;
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   if (op1->is_constant () && op2->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
@@ -1775,19 +1779,23 @@ fold (tree_binary_expression *e)
 static tree_expression *
 fold (tree_unary_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("fold_unary_expression");
 
   unwind_protect_int (error_state);
+  unwind_protect_int (warning_state);
 
   unwind_protect_bool (discard_error_messages);
+  unwind_protect_bool (discard_warning_messages);
+
   discard_error_messages = true;
+  discard_warning_messages = true;
 
   tree_expression *op = e->operand ();
 
   if (op->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
       if (! (error_state || warning_state))
@@ -1822,19 +1830,23 @@ fold (tree_unary_expression *e)
 static tree_expression *
 finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("finish_colon_expression");
 
   unwind_protect_int (error_state);
+  unwind_protect_int (warning_state);
 
   unwind_protect_bool (discard_error_messages);
+  unwind_protect_bool (discard_warning_messages);
+
   discard_error_messages = true;
+  discard_warning_messages = true;
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
   tree_expression *incr = e->increment ();
 
   if (base)
     {
       if (limit)
@@ -2798,19 +2810,23 @@ make_decl_command (int tok, token *tok_v
 static tree_expression *
 finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = m;
 
   unwind_protect::begin_frame ("finish_matrix");
 
   unwind_protect_int (error_state);
+  unwind_protect_int (warning_state);
 
   unwind_protect_bool (discard_error_messages);
+  unwind_protect_bool (discard_warning_messages);
+
   discard_error_messages = true;
+  discard_warning_messages = true;
 
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -481,17 +481,17 @@ tree_matrix::rvalue (void)
       // insert them in the result matrix.
 
       bool found_complex = tmp.complex_p ();
 
       all_strings_p = tmp.all_strings_p ();
       some_strings_p = tmp.some_strings_p ();
       all_empty_p = tmp.all_empty_p ();
 
-      frc_str_conv = Vimplicit_num_to_str_ok && some_strings_p;
+      frc_str_conv = some_strings_p;
 
       if (all_strings_p)
 	chm.resize (nr, nc, Vstring_fill_char);
       else if (found_complex)
 	cm.resize (nr, nc, 0.0);
       else
 	m.resize (nr, nc, 0.0);
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -434,22 +434,24 @@ generate_struct_completions (const std::
 	base_name = base_name.substr (0, pos);
 
       if (is_variable (base_name))
 	{
 	  int parse_status;
 
 	  unwind_protect::begin_frame ("generate_struct_completions");
 
-	  unwind_protect_str (Vwarning_option);
+	  unwind_protect_int (error_state);
+	  unwind_protect_int (warning_state);
+
 	  unwind_protect_bool (discard_error_messages);
-	  unwind_protect_int (error_state);
+	  unwind_protect_bool (discard_warning_messages);
 
-	  Vwarning_option = "off";
 	  discard_error_messages = true;
+	  discard_warning_messages = true;
 
 	  octave_value tmp = eval_string (prefix, true, parse_status);
 
 	  unwind_protect::run_frame ("generate_struct_completions");
 
 	  if (tmp.is_defined () && tmp.is_map ())
 	    names = tmp.map_keys ();
 	}
diff --git a/test/octave.test/io/io.exp b/test/octave.test/io/io.exp
--- a/test/octave.test/io/io.exp
+++ b/test/octave.test/io/io.exp
@@ -102,21 +102,21 @@ set test fclose-2
 set prog_output "\n... fclose:.*"
 do_test fclose-2.m
 
 set test tmpnam-1
 set prog_output "ans = 1"
 do_test tmpnam-1.m
 
 set test tmpnam-2
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test tmpnam-2.m
 
 set test tmpnam-3
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test tmpnam-3.m
 
 set test tmpnam-4
 set prog_output "\n... tmpnam:.*"
 do_test tmpnam-4.m
 
 ## set test file-io-1
 ## set prog_output "ok"
diff --git a/test/octave.test/linalg/linalg.exp b/test/octave.test/linalg/linalg.exp
--- a/test/octave.test/linalg/linalg.exp
+++ b/test/octave.test/linalg/linalg.exp
@@ -194,17 +194,17 @@ set test schur-1
 set prog_output "ans = 1"
 do_test schur-1.m
 
 set test schur-2
 set prog_output "\n... schur:.*"
 do_test schur-2.m
 
 set test schur-3
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test schur-3.m
 
 set test schur-4
 set prog_output "error:.*"
 do_test schur-4.m
 
 set test svd-1
 set prog_output "ans = 1"
diff --git a/test/octave.test/linalg/schur-3.m b/test/octave.test/linalg/schur-3.m
--- a/test/octave.test/linalg/schur-3.m
+++ b/test/octave.test/linalg/schur-3.m
@@ -1,1 +1,2 @@
+warn_num_to_str = 1;
 schur ([1, 2; 3, 4], 2)
diff --git a/test/octave.test/number/ismatrix-5.m b/test/octave.test/number/ismatrix-5.m
--- a/test/octave.test/number/ismatrix-5.m
+++ b/test/octave.test/number/ismatrix-5.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! ismatrix ("t");
-implicit_str_to_num_ok = 1;
-t2 = ! ismatrix ("t");
-t1 && t2
+warn_str_to_num = 0;
+ismatrix ("t")
diff --git a/test/octave.test/number/ismatrix-6.m b/test/octave.test/number/ismatrix-6.m
--- a/test/octave.test/number/ismatrix-6.m
+++ b/test/octave.test/number/ismatrix-6.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! ismatrix ("test");
-implicit_str_to_num_ok = 1;
-t2 = ! ismatrix ("test");
-t1 && t2
+warn_str_to_num = 0;
+ismatrix ("test")
diff --git a/test/octave.test/number/ismatrix-7.m b/test/octave.test/number/ismatrix-7.m
--- a/test/octave.test/number/ismatrix-7.m
+++ b/test/octave.test/number/ismatrix-7.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! ismatrix (["test"; "ing"]);
-implicit_str_to_num_ok = 1;
-t2 = ! ismatrix (["test"; "ing"]);
-t1 && t2
+warn_str_to_num = 0;
+ismatrix (["test"; "ing"])
diff --git a/test/octave.test/number/isscalar-5.m b/test/octave.test/number/isscalar-5.m
--- a/test/octave.test/number/isscalar-5.m
+++ b/test/octave.test/number/isscalar-5.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! isscalar ("t");
-implicit_str_to_num_ok = 1;
-t2 = ! isscalar ("t");
-t1 && t2
+warn_str_to_num = 0;
+isscalar ("t")
diff --git a/test/octave.test/number/issquare-5.m b/test/octave.test/number/issquare-5.m
--- a/test/octave.test/number/issquare-5.m
+++ b/test/octave.test/number/issquare-5.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! issquare ("t");
-implicit_str_to_num_ok = 1;
-t2 = ! issquare ("t");
-t1 && t2
+warn_str_to_num = 0;
+issquare ("t")
diff --git a/test/octave.test/number/issquare-7.m b/test/octave.test/number/issquare-7.m
--- a/test/octave.test/number/issquare-7.m
+++ b/test/octave.test/number/issquare-7.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! issquare (["test"; "ing"; "1"; "2"]);
-implicit_str_to_num_ok = 1;
-t2 = ! issquare (["test"; "ing"; "1"; "2"]);
-t1 && t2
+warn_str_to_num = 0;
+issquare (["test"; "ing"; "1"; "2"])
diff --git a/test/octave.test/number/issymmetric-5.m b/test/octave.test/number/issymmetric-5.m
--- a/test/octave.test/number/issymmetric-5.m
+++ b/test/octave.test/number/issymmetric-5.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! issymmetric ("t");
-implicit_str_to_num_ok = 1;
-t2 = ! issymmetric ("t");
-t1 && t2
+warn_str_to_num = 0;
+issymmetric ("t")
diff --git a/test/octave.test/number/issymmetric-7.m b/test/octave.test/number/issymmetric-7.m
--- a/test/octave.test/number/issymmetric-7.m
+++ b/test/octave.test/number/issymmetric-7.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! issymmetric (["te"; "et"]);
-implicit_str_to_num_ok = 1;
-t2 = ! issymmetric (["te"; "et"]);
-t1 && t2
+warn_str_to_num = 0;
+issymmetric (["te"; "et"])
diff --git a/test/octave.test/number/isvector-5.m b/test/octave.test/number/isvector-5.m
--- a/test/octave.test/number/isvector-5.m
+++ b/test/octave.test/number/isvector-5.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! isvector ("t");
-implicit_str_to_num_ok = 1;
-t2 = ! isvector ("t");
-t1 && t2
+warn_str_to_num = 0;
+isvector ("t")
diff --git a/test/octave.test/number/isvector-6.m b/test/octave.test/number/isvector-6.m
--- a/test/octave.test/number/isvector-6.m
+++ b/test/octave.test/number/isvector-6.m
@@ -1,5 +1,2 @@
-implicit_str_to_num_ok = 0;
-t1 = ! isvector ("test");
-implicit_str_to_num_ok = 1;
-t2 = ! isvector ("test");
-t1 && t2
+warn_str_to_num = 0;
+isvector ("test")
diff --git a/test/octave.test/number/number.exp b/test/octave.test/number/number.exp
--- a/test/octave.test/number/number.exp
+++ b/test/octave.test/number/number.exp
@@ -10,25 +10,25 @@ set test ismatrix-3
 set prog_output "ans = 1"
 do_test ismatrix-3.m
 
 set test ismatrix-4
 set prog_output "ans = 1"
 do_test ismatrix-4.m
 
 set test ismatrix-5
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test ismatrix-5.m
 
 set test ismatrix-6
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test ismatrix-6.m
 
 set test ismatrix-7
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test ismatrix-7.m
 
 set test ismatrix-8
 set prog_output "ans = 0"
 do_test ismatrix-8.m
 
 set test ismatrix-9
 set prog_output "\n... ismatrix:.*"
@@ -50,21 +50,21 @@ set test isvector-3
 set prog_output "ans = 0"
 do_test isvector-3.m
 
 set test isvector-4
 set prog_output "ans = 0"
 do_test isvector-4.m
 
 set test isvector-5
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test isvector-5.m
 
 set test isvector-6
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test isvector-6.m
 
 set test isvector-7
 set prog_output "ans = 0"
 do_test isvector-7.m
 
 set test isvector-8
 set prog_output "ans = 0"
@@ -90,17 +90,17 @@ set test isscalar-3
 set prog_output "ans = 0"
 do_test isscalar-3.m
 
 set test isscalar-4
 set prog_output "ans = 0"
 do_test isscalar-4.m
 
 set test isscalar-5
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test isscalar-5.m
 
 set test isscalar-6
 set prog_output "ans = 0"
 do_test isscalar-6.m
 
 set test isscalar-7
 set prog_output "ans = 0"
@@ -130,25 +130,25 @@ set test issquare-3
 set prog_output "ans = 0"
 do_test issquare-3.m
 
 set test issquare-4
 set prog_output "ans = 1"
 do_test issquare-4.m
 
 set test issquare-5
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test issquare-5.m
 
 set test issquare-6
 set prog_output "ans = 0"
 do_test issquare-6.m
 
 set test issquare-7
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test issquare-7.m
 
 set test issquare-8
 set prog_output "ans = 0"
 do_test issquare-8.m
 
 set test issquare-9
 set prog_output "ans = 0"
@@ -174,25 +174,25 @@ set test issymmetric-3
 set prog_output "ans = 0"
 do_test issymmetric-3.m
 
 set test issymmetric-4
 set prog_output "ans = 1"
 do_test issymmetric-4.m
 
 set test issymmetric-5
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test issymmetric-5.m
 
 set test issymmetric-6
 set prog_output "ans = 0"
 do_test issymmetric-6.m
 
 set test issymmetric-7
-set prog_output "ans = 1"
+set prog_output "ans = 0"
 do_test issymmetric-7.m
 
 set test issymmetric-8
 set prog_output "ans = 0"
 do_test issymmetric-8.m
 
 set test issymmetric-9
 set prog_output "ans = 1"
diff --git a/test/octave.test/prefer/prefer-12.m b/test/octave.test/prefer/prefer-12.m
--- a/test/octave.test/prefer/prefer-12.m
+++ b/test/octave.test/prefer/prefer-12.m
@@ -1,2 +1,2 @@
-implicit_str_to_num_ok = 1;
+warn_str_to_num = 1;
 "d" + 0
diff --git a/test/octave.test/prefer/prefer-13.m b/test/octave.test/prefer/prefer-13.m
--- a/test/octave.test/prefer/prefer-13.m
+++ b/test/octave.test/prefer/prefer-13.m
@@ -1,2 +1,2 @@
-implicit_str_to_num_ok = 0;
+warn_str_to_num = 1;
 "d" + 0
diff --git a/test/octave.test/prefer/prefer.exp b/test/octave.test/prefer/prefer.exp
--- a/test/octave.test/prefer/prefer.exp
+++ b/test/octave.test/prefer/prefer.exp
@@ -39,24 +39,24 @@ do_test prefer-9.m
 set test whitespace-in-literal-matrix-10
 set prog_output "ans = 3"
 do_test prefer-10.m
 
 set test whitespace-in-literal-matrix-11
 set prog_output "ans = 1"
 do_test prefer-11.m
 
-## implicit_str_to_num_ok
+## warn_str_to_num
 
 set test implicit-str-to-num-ok-1
 set prog_output "ans = 100"
 do_test prefer-12.m
 
 set test implicit-str-to-num-ok-2
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test prefer-13.m
 
 ## warn_imag_to_real
 
 set test warn-imag-to-real-1
 set prog_output "ans = 1"
 do_test prefer-14.m
 
diff --git a/test/octave.test/system/getenv-4.m b/test/octave.test/system/getenv-4.m
--- a/test/octave.test/system/getenv-4.m
+++ b/test/octave.test/system/getenv-4.m
@@ -1,1 +1,2 @@
+warn_num_to_str = 1;
 getenv (1)
diff --git a/test/octave.test/system/putenv-4.m b/test/octave.test/system/putenv-4.m
--- a/test/octave.test/system/putenv-4.m
+++ b/test/octave.test/system/putenv-4.m
@@ -1,1 +1,2 @@
+warn_num_to_str = 1;
 putenv (1, 2)
diff --git a/test/octave.test/system/system.exp b/test/octave.test/system/system.exp
--- a/test/octave.test/system/system.exp
+++ b/test/octave.test/system/system.exp
@@ -363,33 +363,33 @@ set test getenv-2
 set prog_output "\n... getenv:.*"
 do_test getenv-2.m
 
 set test getenv-3
 set prog_output "\n... getenv:.*"
 do_test getenv-3.m
 
 set test getenv-4
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test getenv-4.m
 
 set test putenv-1
 set prog_output "ans = 1"
 do_test putenv-1.m
 
 set test putenv-2
 set prog_output "\n... putenv:.*"
 do_test putenv-2.m
 
 set test putenv-3
 set prog_output "\n... putenv:.*"
 do_test putenv-3.m
 
 set test putenv-4
-set prog_output "error:.*"
+set prog_output "warning:.*"
 do_test putenv-4.m
 
 set test cd-1
 set prog_output "ans = 1"
 do_test cd-1.m
 
 set test cd-2
 set prog_output "error:.*"
