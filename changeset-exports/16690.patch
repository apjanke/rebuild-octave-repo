# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1369075045 14400
#      Mon May 20 14:37:25 2013 -0400
# Branch classdef
# Node ID 1c45e22fc444f84f9154930a6375589427724a62
# Parent  04e1104388730653301d453a380907f4294e971b
Implement meta.package.getAllPackages() method.

* libinterp/interpfcn/load-path.h (load_path::get_all_package_names):
New static method.
(load_path::do_get_all_package_names): New method.

* libinterp/interpfcn/load-path.cc
(load_path::do_get_all_package_names): New method.

* libinterp/octave-value/ov-classdef/cc (package_getAllPackages): New
static function.
(install_classdef): Install it as "meta.package,getAllPackages" method.

diff --git a/libinterp/interpfcn/load-path.cc b/libinterp/interpfcn/load-path.cc
--- a/libinterp/interpfcn/load-path.cc
+++ b/libinterp/interpfcn/load-path.cc
@@ -2098,16 +2098,31 @@ genpath (const std::string& dirname, con
                 }
             }
         }
     }
 
   return retval;
 }
 
+std::list<std::string>
+load_path::do_get_all_package_names (bool only_top_level) const
+{
+  std::list<std::string> retval;
+
+  for (const_loader_map_iterator l = loader_map.begin ();
+       l != loader_map.end (); ++l)
+    {
+      if (! only_top_level || l->first.find ('.') == std::string::npos)
+        retval.push_back (l->first);
+    }
+
+  return retval;
+}
+
 static void
 execute_pkg_add_or_del (const std::string& dir,
                         const std::string& script_file)
 {
   if (! octave_interpreter_ready)
     return;
 
   unwind_protect frame;
diff --git a/libinterp/interpfcn/load-path.h b/libinterp/interpfcn/load-path.h
--- a/libinterp/interpfcn/load-path.h
+++ b/libinterp/interpfcn/load-path.h
@@ -127,16 +127,24 @@ public:
   }
 
   static bool find_package (const std::string& package_name)
   {
     return instance_ok ()
       ? instance->do_find_package (package_name) : false;
   }
 
+  static std::list<std::string>
+  get_all_package_names (bool only_top_level = true)
+  {
+    return instance_ok ()
+      ? instance->do_get_all_package_names (only_top_level)
+      : std::list<std::string> ();
+  }
+
   static std::string find_fcn (const std::string& fcn, std::string& dir_name,
                                const std::string& pack_name = std::string ())
   {
     return instance_ok ()
       ? instance->get_loader (pack_name).find_fcn (fcn, dir_name)
       : std::string ();
   }
 
@@ -666,16 +674,18 @@ private:
 
   std::list<std::string> do_overloads (const std::string& meth) const;
 
   bool do_find_package (const std::string& package_name) const
   {
     return (loader_map.find (package_name) != loader_map.end ());
   }
 
+  std::list<std::string> do_get_all_package_names (bool only_top_level) const;
+
   std::string do_find_file (const std::string& file) const;
 
   std::string do_find_dir (const std::string& dir) const;
 
   string_vector do_find_matching_dirs (const std::string& dir) const;
 
   std::string do_find_first_of (const string_vector& files) const;
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2726,16 +2726,42 @@ package_get_packages (const octave_value
       cdef_package pack (to_cdef (args(0)));
 
       retval(0) = pack.get_packages ();
     }
 
   return retval;
 }
 
+static octave_value_list
+package_getAllPackages (const octave_value_list& /* args */,
+                        int /* nargout */)
+{
+  std::map<std::string, cdef_package> toplevel_packages;
+
+  std::list<std::string> names = load_path::get_all_package_names ();
+
+  toplevel_packages["meta"] = cdef_manager::find_package ("meta", false,
+                                                          false);
+
+  for (std::list<std::string>::const_iterator it = names.begin ();
+       it != names.end (); ++it)
+    toplevel_packages[*it] = cdef_manager::find_package (*it, false, true);
+
+  Cell c (toplevel_packages.size (), 1);
+
+  int i = 0;
+
+  for (std::map<std::string, cdef_package>::const_iterator it = toplevel_packages.begin ();
+       it != toplevel_packages.end (); ++it)
+    c(i++,0) = to_ov (it->second);
+
+  return octave_value_list (octave_value (c));
+}
+
 void
 cdef_package::cdef_package_rep::install_class (const cdef_class& cls,
                                                const std::string& nm)
 {
   class_map[nm] = cls;
 
   member_count++;
 }
@@ -3013,16 +3039,18 @@ install_classdef (void)
 		      make_fcn_handle (package_get_packages, "meta.package>get.PackageList"),
 		      "public", Matrix (), "private"));
   meta_package.install_property
       (make_property (meta_package, "Packages",
 		      make_fcn_handle (package_get_packages, "meta.package>get.Packages"),
 		      "public", Matrix (), "private"));
   meta_package.install_method (make_method (meta_package, "fromName", package_fromName,
                                             "public", true));
+  meta_package.install_method (make_method (meta_package, "getAllPackages", package_getAllPackages,
+                                            "public", true));
 
   /* create "meta" package */
   cdef_package package_meta = cdef_package::_meta = make_package ("meta");
   package_meta.install_class (meta_class,       "class");
   package_meta.install_class (meta_property,    "property");
   package_meta.install_class (meta_method,      "method");
   package_meta.install_class (meta_package,     "package");
   package_meta.install_class (meta_event,       "event");
