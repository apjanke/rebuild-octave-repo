# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502298714 14400
#      Wed Aug 09 13:11:54 2017 -0400
# Node ID 4b0e0cae49db920c120cf530950c791b7ba5e3f1
# Parent  d139435d9193674fc382d351c0e99eafa964bcf8
disallow dynamic variable creation in static scopes (bug #51698)

* error.cc (Fwarning): Use force_assign to set value of
.saved_warning_states. variable.
* ov-usr-fcn.cc (octave_user_function::bind_automatic_var): Use
force_assign to set value of .saved_warning_states. and
.ignored. variables.

* symtab.cc (symbol_table::scope::update_nest): Also mark the scope of
nested functions as static.

* symtab.h (symbol_table::scope::is_static,
symbol_table::scope::mark_static): New functions.

* oct-parse.in.yy (base_parser::make_anon_fcn_handle):
Mark anonymous function scope as static.

* nest.tst: Update tests.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1565,17 +1565,17 @@ disable escape sequence expansion use a 
 
                   ids(nel) = arg2;
                   states(nel) = curr_state;
                 }
 
               m.contents ("identifier") = ids;
               m.contents ("state") = states;
 
-              scope->assign (".saved_warning_states.", m);
+              scope->force_assign (".saved_warning_states.", m);
 
               // Now ignore the "local" argument and continue to
               // handle the current setting.
               nargin--;
             }
 
           if (nargin >= 2 && arg2 == "all")
             {
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1823,20 +1823,25 @@ namespace octave
                   {
                     ours.invalidate ();
                     nm_sr.second = parents;
                   }
               }
             else
               ours.set_curr_fcn (m_fcn);
           }
+
+        // The scopes of nested functions are static.
+        m_is_static = true;
       }
     else if (m_children.size ())
       {
+        // Parents of nested functions have static scopes.
         m_is_static = true;
+
         for (auto& nm_sr : m_symbols)
           nm_sr.second.set_curr_fcn (m_fcn);
       }
 
     for (auto& symtab_p : m_children)
       symtab_p->update_nest ();
   }
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1583,16 +1583,20 @@ namespace octave
       {
         m_symbols[sr.name ()] = sr;
       }
 
       bool is_nested (void) const { return m_is_nested; }
 
       void mark_nested (void) { m_is_nested = true; }
 
+      bool is_static (void) const { return m_is_static; }
+
+      void mark_static (void) { m_is_static = true; }
+
       scope * parent_scope (void) const { return m_parent; }
 
       scope * dup (void) const
       {
         scope *new_sid = new scope ();
 
         for (const auto& nm_sr : m_symbols)
           new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -802,27 +802,27 @@ octave_user_function::bind_automatic_var
   m_scope->force_assign (".nargout.", nargout);
 
   m_scope->mark_hidden (".nargin.");
   m_scope->mark_hidden (".nargout.");
 
   m_scope->mark_automatic (".nargin.");
   m_scope->mark_automatic (".nargout.");
 
-  m_scope->assign (".saved_warning_states.");
+  m_scope->force_assign (".saved_warning_states.", octave_value ());
 
   m_scope->mark_automatic (".saved_warning_states.");
   m_scope->mark_automatic (".saved_warning_states.");
 
   if (takes_varargs ())
     m_scope->assign ("varargin", va_args.cell_value ());
 
   Matrix ignored_fcn_outputs = tw.ignored_fcn_outputs ();
 
-  m_scope->assign (".ignored.", ignored_fcn_outputs);
+  m_scope->force_assign (".ignored.", ignored_fcn_outputs);
 
   m_scope->mark_hidden (".ignored.");
   m_scope->mark_automatic (".ignored.");
 }
 
 void
 octave_user_function::restore_warning_states (void)
 {
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2415,21 +2415,23 @@ namespace octave
 
     symbol_table::scope *fcn_scope = m_lexer.symtab_context.curr_scope ();
     symbol_table::scope *parent_scope = m_lexer.symtab_context.parent_scope ();
 
     m_lexer.symtab_context.pop ();
 
     expr->set_print_flag (false);
 
+    fcn_scope->mark_static ();
+
     tree_anon_fcn_handle *retval
       = new tree_anon_fcn_handle (param_list, expr, fcn_scope,
                                   parent_scope, l, c);
 
-// FIXME: Stash the filename.  This does not work and produces
+    // FIXME: Stash the filename.  This does not work and produces
     // errors when executed.
     //retval->stash_file_name (m_lexer.fcn_file_name);
 
     return retval;
   }
 
   // Build a colon expression.
 
diff --git a/test/nest/nest.tst b/test/nest/nest.tst
--- a/test/nest/nest.tst
+++ b/test/nest/nest.tst
@@ -43,18 +43,22 @@
 
 %!test
 %! scope1 (1);
 
 %!test
 %! scope3;
 
 %!assert (nest_eval ("x = 5;", "x = 6;"), 6)
-%!assert (nest_eval ("x = 5;", "y = 6;"), 5)
-%!assert (nest_eval ("x = -5; x = abs (x);", "y = 6;"), 5)
+
+%!error <can not add variable "y" to a static workspace>
+%! nest_eval ("x = 5;", "y = 6;");
+
+%!error <can not add variable "y" to a static workspace>
+%! nest_eval ("x = -5; x = abs (x);", "y = 6;")
 
 %!test
 %! f = no_closure (0);
 %! assert (f("foo"), "nested foo");
 %! assert (f("foo"), "nested foo");
 
 %!test <39257>
 %! f = no_closure (1);
