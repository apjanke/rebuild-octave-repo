# HG changeset patch
# User jwe
# Date 1157487230 0
#      Tue Sep 05 20:13:50 2006 +0000
# Node ID 1ed991f0ed61773eccb9c53c575c11ad55577e48
# Parent  dadcfe8b7ba424f04c0cbeee8a703bb216a50570
[project @ 2006-09-05 20:13:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-09-05  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mxArray_sparse::as_octave_value): Cast nzmax to
+	octave_idx_type for sparse matrix constructors.
+
 2006-09-01  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc: Don't handle nargout == 0 as a special case.
 	(octave_change_to_directory): Perform tilde expansion on directory
 	name here.
 
 2006-08-30  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -1387,17 +1387,18 @@ protected:
     dim_vector dv = dims_to_dim_vector ();
 
     switch (get_class_id ())
       {
       case mxLOGICAL_CLASS:
 	{
 	  bool *ppr = static_cast<bool *> (pr);
 
-	  SparseBoolMatrix val (get_m (), get_n (), nzmax);
+	  SparseBoolMatrix val (get_m (), get_n (),
+				static_cast<octave_idx_type> (nzmax));
 
 	  for (int i = 0; i < nzmax; i++)
 	    {
 	      val.xdata(i) = ppr[i];
 	      val.xridx(i) = ir[i];
 	    }
 
 	  for (int i = 0; i < get_n () + 1; i++)
@@ -1413,34 +1414,36 @@ protected:
 
       case mxDOUBLE_CLASS:
 	{
 	  if (pi)
 	    {
 	      double *ppr = static_cast<double *> (pr);
 	      double *ppi = static_cast<double *> (pi);
 
-	      SparseComplexMatrix val (get_m (), get_n (), nzmax);
+	      SparseComplexMatrix val (get_m (), get_n (),
+				       static_cast<octave_idx_type> (nzmax));
 
 	      for (int i = 0; i < nzmax; i++)
 		{
 		  val.xdata(i) = Complex (ppr[i], ppi[i]);
 		  val.xridx(i) = ir[i];
 		}
 
 	      for (int i = 0; i < get_n () + 1; i++)
 		val.xcidx(i) = jc[i];
 
 	      retval = val;
 	    }
 	  else
 	    {
 	      double *ppr = static_cast<double *> (pr);
 
-	      SparseMatrix val (get_m (), get_n (), nzmax);
+	      SparseMatrix val (get_m (), get_n (),
+				static_cast<octave_idx_type> (nzmax));
 
 	      for (int i = 0; i < nzmax; i++)
 		{
 		  val.xdata(i) = ppr[i];
 		  val.xridx(i) = ir[i];
 		}
 
 	      for (int i = 0; i < get_n () + 1; i++)
