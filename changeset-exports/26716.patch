# HG changeset patch
# User Rik <rik@octave.org>
# Date 1549816770 28800
#      Sun Feb 10 08:39:30 2019 -0800
# Node ID daa281e03d9ab9b2dc546216402c1bd66d24ccfb
# Parent  24e11ee4fe4505e7fee44a35975d522a11220e5e
Harden BIST tests against changes in format().

* oct-parse.yy: Save/restore format before running some evalc() tests.

* Map.m: Save/restore format and change %!error to %!test with fail().

* pr-output.cc (Frats): Save/restore format before running rats() tests.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3158,27 +3158,33 @@ If the length of the smallest possible r
           n = m + 1;
         }
     }
 
   return ovl (string_vector (lst));
 }
 
 /*
-%!assert (rats (2.0005, 9), "4001/2000")
-%!assert (rats (-2.0005, 10), "-4001/2000")
-%!assert (strtrim (rats (2.0005, 30)), "4001/2000")
-%!assert (pi - str2num (rats (pi, 30)), 0, 4 * eps)
-%!assert (e - str2num (rats (e, 30)), 0, 4 * eps)
-%!assert (rats (123, 2), " *")
-
 %!test
-%! v = 1 / double (intmax);
-%! err = v - str2num (rats(v, 12));
-%! assert (err, 0, 4 * eps);
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   assert (rats (2.0005, 9), "4001/2000");
+%!   assert (rats (-2.0005, 10), "-4001/2000");
+%!   assert (strtrim (rats (2.0005, 30)), "4001/2000");
+%!   assert (pi - str2num (rats (pi, 30)), 0, 4 * eps);
+%!   assert (e - str2num (rats (e, 30)), 0, 4 * eps);
+%!   assert (rats (123, 2), " *");
+%!   v = 1 / double (intmax);
+%!   err = v - str2num (rats (v, 12));
+%!   assert (err, 0, 4 * eps);
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 */
 
 DEFUN (disp, args, nargout,
        classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} disp (@var{x})
 @deftypefnx {} {@var{str} =} disp (@var{x})
 Display the value of @var{x}.
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5743,32 +5743,50 @@ s = evalc ("t = 42"), t
   eval_error_occurred = false;
 
   retval.prepend (buffer.str ());
   return retval;
 }
 
 /*
 
-%!assert (evalc ("1"), "ans =  1\n")
+%!test
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   str = evalc ("1");
+%!   assert (str, "ans =  1\n");
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
+
 %!assert (evalc ("1;"), "")
 
 %!test
 %! [s, y] = evalc ("1");
 %! assert (s, "");
 %! assert (y, 1);
 
 %!test
 %! [s, y] = evalc ("1;");
 %! assert (s, "");
 %! assert (y, 1);
 
 %!test
-%! assert (evalc ("y = 2"), "y =  2\n");
-%! assert (y, 2);
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   str = evalc ("y = 2");
+%!   assert (str, "y =  2\n");
+%!   assert (y, 2);
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 
 %!test
 %! assert (evalc ("y = 3;"), "");
 %! assert (y, 3);
 
 %!test
 %! [s, a, b] = evalc ("deal (1, 2)");
 %! assert (s, "");
diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -780,18 +780,25 @@ endclassdef
 %! m = containers.Map ();
 %! m.foobar;
 %!error <key type does not match the type of this container>
 %! m = containers.Map ("a", 1);
 %! m(1);
 %!error <specified key .b. does not exist>
 %! m = containers.Map ("a", 1);
 %! m("b");
-%!error <specified key .2. does not exist>
-%! m = containers.Map (1, 1);
-%! m(2);
+%!test
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   m = containers.Map (1, 1);
+%!   fail ("m(2)", "specified key <2> does not exist");
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 %!error <only '\(\)' indexing is supported>
 %! m = containers.Map ("a", 1);
 %! m{1};
 %!error <unsupported KeyType>
 %! m1 = containers.Map ("KeyType", "cell", "ValueType", "any");
 %!error <unsupported ValueType>
 %! m1 = containers.Map ("KeyType", "char", "ValueType", "cell");
