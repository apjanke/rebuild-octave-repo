# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295563873 18000
#      Thu Jan 20 17:51:13 2011 -0500
# Node ID d5bd2766c6404b1c6fb941a466e629254f529a9e
# Parent  c792872f8942baf00c812906f2103f256761fe17
style fixes for warning and error messages in script files

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,26 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* deprecated/cellidx.m, deprecated/dmult.m,
+	deprecated/intwarning.m, deprecated/str2mat.m, general/curl.m,
+	general/divergence.m, general/gradient.m, geometry/griddata.m,
+	help/gen_doc_cache.m, io/dlmwrite.m, miscellaneous/getappdata.m,
+	miscellaneous/isappdata.m, miscellaneous/rmappdata.m,
+	miscellaneous/setappdata.m, miscellaneous/unpack.m,
+	optimization/lsqnonneg.m, optimization/pqpnonneg.m,
+	pkg/get_forge_pkg.m, pkg/pkg.m, plot/__fltk_print__.m,
+	plot/__gnuplot_get_var__.m, plot/__gnuplot_open_stream__.m,
+	plot/__gnuplot_print__.m, plot/daspect.m,
+	plot/gnuplot_drawnow.m, plot/pbaspect.m,
+	plot/private/__errplot__.m, plot/private/__fltk_file_filter__.m,
+	plot/private/__ghostscript__.m, plot/uigetfile.m,
+	plot/uiputfile.m, polynomial/polyaffine.m, sparse/pcg.m:
+	Style fixes for error and warning messages.
+
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* @ftp/dir.m, @ftp/mget.m, @ftp/mput.m, ChangeLog,
 	audio/lin2mu.m, audio/setaudio.m, audio/wavread.m,
 	audio/wavwrite.m, deprecated/autocor.m, deprecated/autocov.m,
 	deprecated/betai.m, deprecated/create_set.m,
 	deprecated/dispatch.m, deprecated/gammai.m,
 	deprecated/intwarning.m, deprecated/replot.m, elfun/cosd.m,
diff --git a/scripts/deprecated/cellidx.m b/scripts/deprecated/cellidx.m
--- a/scripts/deprecated/cellidx.m
+++ b/scripts/deprecated/cellidx.m
@@ -36,17 +36,17 @@
 ## deprecated in version 3.4
 
 function [idxvec,errmsg]  = cellidx (listvar, strlist)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
-             "cellidx is obsolete and will be removed from a future version of Octave; use ismember instead.");
+             "cellidx is obsolete and will be removed from a future version of Octave; use ismember instead");
   endif
 
   if (nargin != 2)
     print_usage ();
   endif
 
   if (ischar (strlist))
     tmp = strlist;
diff --git a/scripts/deprecated/dmult.m b/scripts/deprecated/dmult.m
--- a/scripts/deprecated/dmult.m
+++ b/scripts/deprecated/dmult.m
@@ -28,17 +28,17 @@
 ## Deprecated in version 3.2
 
 function M = dmult (a, B)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
-             "dmult is obsolete and will be removed from a future version of Octave; please use the straightforward (and now efficient) syntax ""diag(A)*B"".");
+             "dmult is obsolete and will be removed from a future version of Octave; please use the straightforward (and now efficient) syntax \"diag(A)*B\"");
   endif
 
   if (nargin != 2)
     print_usage ();
   endif
  if (! isvector (a))
     error ("dmult: a must be a vector of length rows (B)");
   endif
diff --git a/scripts/deprecated/intwarning.m b/scripts/deprecated/intwarning.m
--- a/scripts/deprecated/intwarning.m
+++ b/scripts/deprecated/intwarning.m
@@ -65,17 +65,17 @@
 ## Deprecated in v. 3.4
 
 function y = intwarning (x)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
-             "intwarning is obsolete and will be removed from a future version of Octave. Integer math no longer produces warnings. Supply your own checks if you need those.");
+             "intwarning is obsolete and will be removed from a future version of Octave; integer math no longer produces warnings -- supply your own checks if you need those");
   endif
 
   return;
 
   if (nargin != 1)
     print_usage ();
   else
     if (nargout > 0)
diff --git a/scripts/deprecated/str2mat.m b/scripts/deprecated/str2mat.m
--- a/scripts/deprecated/str2mat.m
+++ b/scripts/deprecated/str2mat.m
@@ -32,14 +32,14 @@
 
 ## Deprecated in version 3.2
 
 function retval = str2mat (varargin)
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
-             "str2mat is obsolete and will be removed from a future version of Octave; please use char instead.");
+             "str2mat is obsolete and will be removed from a future version of Octave; please use char instead");
   endif
 
   retval = char (varargin{:});
 
 endfunction
diff --git a/scripts/general/curl.m b/scripts/general/curl.m
--- a/scripts/general/curl.m
+++ b/scripts/general/curl.m
@@ -71,19 +71,19 @@ function varargout = curl (varargin)
     dy = varargin{2}(:,1,1)(:);
     dz = varargin{3}(1,1,:)(:);
   else
     print_usage();
   endif
 
   if ((nargin == 4) || (nargin == 2))
     if (!size_equal (varargin{fidx}, varargin{fidx + 1}))
-      error ("curl: size of X and Y must match.");
+      error ("curl: size of X and Y must match");
     elseif (ndims (varargin{fidx}) != 2)
-      error ("curl: expected two-dimensional matrices X and Y.");
+      error ("curl: expected two-dimensional matrices X and Y");
     elseif ((length (dx) != columns (varargin{fidx}))
          || (length (dy) != rows (varargin{fidx})))
       error ("curl: size of dx and dy must match the respective dimension of X and Y");
     endif
 
     dFx_dy = gradient (varargin{fidx}.', dy, dx).';
     dFy_dx = gradient (varargin{fidx + 1}, dx, dy);
     rot_z = dFy_dx - dFx_dy;
@@ -91,28 +91,28 @@ function varargout = curl (varargin)
     if (nargout == 0)
       av
     elseif (nargout == 1)
       varargout{1} = av;
     elseif (nargout == 2)
       varargout{1} = rot_z;
       varargout{2} = av;
     else
-      error ("curl: number of output arguments must be 1 or 2.")
+      error ("curl: number of output arguments must be 1 or 2")
     endif
 
   elseif ((nargin == 6) || (nargin == 3))
     if (!size_equal (varargin{fidx}, varargin{fidx + 1}, varargin{fidx + 2}))
       error ("curl: size of X, Y, and Z must match")
     elseif (ndims (varargin{fidx}) != 3)
-      error ("curl: expected two-dimensional matrices X, Y, and Z.");
+      error ("curl: expected two-dimensional matrices X, Y, and Z");
     elseif ((length (dx) != size (varargin{fidx}, 2))
          || (length (dy) != size (varargin{fidx}, 1))
          || (length (dz) != size (varargin{fidx}, 3)))
-      error ("curl: size of dx, dy, and dz must match the respective dimesion of X, Y, and Z.");
+      error ("curl: size of dx, dy, and dz must match the respective dimesion of X, Y, and Z");
     endif
 
     [~, dFx_dy, dFx_dz] = gradient (varargin{fidx}, dx, dy, dz);
     [dFy_dx, ~, dFy_dz] = gradient (varargin{fidx + 1}, dx, dy, dz);
     [dFz_dx, dFz_dy] = gradient (varargin{fidx + 2}, dx, dy, dz);
     rot_x = dFz_dy - dFy_dz;
     rot_y = dFx_dz - dFz_dx;
     rot_z = dFy_dx - dFx_dy;
diff --git a/scripts/general/divergence.m b/scripts/general/divergence.m
--- a/scripts/general/divergence.m
+++ b/scripts/general/divergence.m
@@ -69,35 +69,35 @@ function retval = divergence (varargin)
     dy = varargin{2}(:,1,1)(:);
     dz = varargin{3}(1,1,:)(:);
   else
     print_usage();
   endif
 
   if ((nargin == 4) || (nargin == 2))
     if (!size_equal (varargin{fidx},varargin{fidx + 1}))
-      error ("divergence: size of X and Y must match.");
+      error ("divergence: size of X and Y must match");
     elseif (ndims (varargin{fidx}) != 2)
-      error ("divergence: expected two-dimensional matrices X and Y.");
+      error ("divergence: expected two-dimensional matrices X and Y");
     elseif ((length (dx) != columns (varargin{fidx})) || (length (dy) != rows (varargin{fidx})))
       error ("divergence: size of dx and dy must match the respective dimension of X and Y");
     endif
 
     retval = gradient(varargin{fidx}, dx, dy);
     retval += gradient(varargin{fidx + 1}.', dy, dx).';
 
   elseif ((nargin == 6) || (nargin == 3))
     if (!size_equal (varargin{fidx},varargin{fidx + 1},varargin{fidx + 2}))
       error ("divergence: size of X, Y, and Z must match")
     elseif (ndims (varargin{fidx}) != 3)
-      error ("divergence: expected two-dimensional matrices X, Y, and Z.");
+      error ("divergence: expected two-dimensional matrices X, Y, and Z");
     elseif ((length (dx) != size (varargin{fidx}, 2))
          || (length (dy) != size (varargin{fidx}, 1))
          || (length (dz) != size (varargin{fidx}, 3)))
-      error ("divergence: size of dx, dy, and dz must match the respective dimesion of X, Y, and Z.");
+      error ("divergence: size of dx, dy, and dz must match the respective dimesion of X, Y, and Z");
     endif
 
     ## x-direction
     retval = gradient (varargin{fidx}, dx, dy, dz);
     ## y-direction
     retval += shiftdim (gradient (shiftdim (varargin{fidx + 1}, 2), dy), 1);
     ## z-direction
     retval += shiftdim (gradient (shiftdim (varargin{fidx + 2}, 1), dz), 2);
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -116,17 +116,17 @@ function varargout = matrix_gradient (m,
       endfor
     else
       ## vector for one-dimensional derivative
       d{1} = diff (varargin{1}(:));
     endif
   else
     ## have spacing value for each dimension
     if (length(varargin) != nd)
-      error ("gradient: dimensions and number of spacing values do not match.");
+      error ("gradient: dimensions and number of spacing values do not match");
     endif
     for i = 1:nd
       if (isscalar (varargin{i}))
         d{i} = varargin{i} * ones (sz(i) - 1, 1);
       else
         d{i} = diff (varargin{i}(:));
       endif
     endfor
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -50,19 +50,19 @@ function [rx, ry, rz] = griddata (x, y, 
   if (ischar (method))
     method = tolower (method);
   endif
 
   if (isvector (x) && isvector (y) && all ([numel(y), numel(x)] == size (z)))
     [x, y] = meshgrid (x, y);
   elseif (! all (size (x) == size (y) & size (x) == size (z)))
     if (isvector (z))
-      error ("griddata: X, Y, and Z, be vectors of same length.");
+      error ("griddata: X, Y, and Z, be vectors of same length");
     else
-      error ("griddata: lengths of X, Y must match the columns and rows of Z.");
+      error ("griddata: lengths of X, Y must match the columns and rows of Z");
     endif
   endif
 
   ## Meshgrid xi and yi if they are a row and column vector.
   if (rows (xi) == 1 && columns (yi) == 1)
     [xi, yi] = meshgrid (xi, yi);
   endif
 
diff --git a/scripts/help/gen_doc_cache.m b/scripts/help/gen_doc_cache.m
--- a/scripts/help/gen_doc_cache.m
+++ b/scripts/help/gen_doc_cache.m
@@ -69,17 +69,17 @@ function [text, first_sentence, status] 
     case "html"
       [text, status] = strip_html_tags (text);
     otherwise
       status = 1;
   endswitch
 
   ## Did we get the help text?
   if (status != 0 || isempty (text))
-    warning ("gen_doc_cache: unusable help text in '%s'. Ignoring function.", f);
+    warning ("gen_doc_cache: unusable help text found in file '%s'", f);
     return;
   endif
 
   ## Get first sentence of help text
   first_sentence = get_first_help_sentence (f);
 endfunction
 
 function cache = create_cache (list)
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -135,17 +135,17 @@ function dlmwrite (file, M, varargin)
       opentype = "at";
     elseif (strcmpi (varargin{i}, "append"))
       i = i + 1;
       if (strcmpi (varargin{i}, "on"))
         opentype = "at";
       elseif (strcmpi (varargin{i}, "off"))
         opentype = "wt";
       else
-        error ("dlmwrite: append must be \"on\" or \"off\".");
+        error ("dlmwrite: append must be \"on\" or \"off\"");
       endif
     else
       if (i == 1)
         delim = varargin{i};
       elseif (i == 2)
         r = varargin{i};
       elseif (i == 3)
         c = varargin{i};
diff --git a/scripts/miscellaneous/getappdata.m b/scripts/miscellaneous/getappdata.m
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -21,17 +21,17 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function val = getappdata (h, name)
 
   if (! (all (ishandle (h)) && ischar (name)))
-    error ("getappdata: invalid input.")
+    error ("getappdata: invalid input")
   endif
 
   appdata(numel(h)) = struct();
   for nh = 1:numel(h)
     appdata(nh) = get (h(nh), "__appdata__");
   end
   if (nh > 1)
     val = {appdata.(name)};
diff --git a/scripts/miscellaneous/isappdata.m b/scripts/miscellaneous/isappdata.m
--- a/scripts/miscellaneous/isappdata.m
+++ b/scripts/miscellaneous/isappdata.m
@@ -22,17 +22,17 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function res = isappdata (h, name)
 
   if (! (all (ishandle (h)) && ischar (name)))
-    error ("isappdata: invalid input.")
+    error ("isappdata: invalid input")
   endif
 
   for nh = 1:numel(h)
     data = get (h(nh));
     if (isfield (data, "__appdata__") && isfield (data.__appdata__, name))
       res(nh) = true;
     else
       res(nh) = false;
diff --git a/scripts/miscellaneous/rmappdata.m b/scripts/miscellaneous/rmappdata.m
--- a/scripts/miscellaneous/rmappdata.m
+++ b/scripts/miscellaneous/rmappdata.m
@@ -21,17 +21,17 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function rmappdata (h, varargin)
 
   if (! (all (ishandle (h)) && iscellstr (varargin)))
-    error ("rmappdata: invalid input.")
+    error ("rmappdata: invalid input")
   endif
 
   for nh = 1:numel(h)
     appdata = get (h(nh), "__appdata__");
     appdata = rmfield (appdata, varargin);
     set (h(nh), "__appdata__", appdata);
   endfor
 
diff --git a/scripts/miscellaneous/setappdata.m b/scripts/miscellaneous/setappdata.m
--- a/scripts/miscellaneous/setappdata.m
+++ b/scripts/miscellaneous/setappdata.m
@@ -22,34 +22,34 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function setappdata (h, varargin)
 
   if (! (all (ishandle (h)) && mod (numel (varargin), 2) == 0))
-    error ("setappdata: invalid input.")
+    error ("setappdata: invalid input")
   endif
 
   for nh = 1:numel(h)
     if (! isfield (get (h(nh)), "__appdata__"))
       addproperty ("__appdata__", h(nh), "any", struct ());
     end
     appdata = get (h(nh), "__appdata__");
     for narg = 1:2:numel(varargin)
       if (iscellstr (varargin{narg}))
         ## Handle cell arrays like set() does.
         set (h(nh), "__appdata__", appdata);
         setappdata (h(nh), vertcat (varargin{narg}', varargin{narg+1}'){:});
         appdata = get (h(nh), "__appdata__");
       elseif (ischar (varargin{narg}))
         appdata.(varargin{narg}) = varargin{narg+1};
       else
-        error ("setappdata: invalid input.")
+        error ("setappdata: invalid input")
       endif
     endfor
     set (h(nh), "__appdata__", appdata);
   endfor
 
 endfunction
 
 %!test
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -74,17 +74,17 @@ function filelist = unpack (file, dir = 
 
     endif
 
     ## canonicalize_file_name returns empty if the file isn't found, so
     ## use that to check for existence.
     cfile = canonicalize_file_name (file);
 
     if (isempty (cfile))
-      error ("unpack: file \"%s\" not found.", file);
+      error ("unpack: file \"%s\" not found", file);
     else
       file = cfile;
     endif
 
   elseif (iscellstr (file))
     files = {};
     for i = 1:numel (file)
       tmpfiles = unpack (file{i}, dir);
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -155,17 +155,17 @@ function [x, resnorm, residual, exitflag
         break;
       endif
     endif
 
     ## find the maximum gradient.
     idx = find (w == max (w));
     if (numel (idx) > 1)
       warning ("lsqnonneg:nonunique",
-               "A non-unique solution may be returned due to equal gradients.");
+               "a non-unique solution may be returned due to equal gradients");
       idx = idx(1);
     endif
     ## move the index from Z to P. Keep P sorted.
     z = [1:n]; z(p) = [];
     zidx = z(idx);
     jdx = 1 + lookup (p, zidx);
     p = [p(1:jdx-1), zidx, p(jdx:end)];
     if (useqr)
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -154,17 +154,17 @@ function [x, minval, exitflag, output, l
         break;
       endif
     endif
 
     ## find the maximum gradient.
     idx = find (w == max (w));
     if (numel (idx) > 1)
       warning ("pqpnonneg:nonunique",
-               "A non-unique solution may be returned due to equal gradients.");
+               "a non-unique solution may be returned due to equal gradients");
       idx = idx(1);
     endif
     ## move the index from Z to P. Keep P sorted.
     z = [1:n]; z(p) = [];
     zidx = z(idx);
     jdx = 1 + lookup (p, zidx);
     p = [p(1:jdx-1), zidx, p(jdx:end)];
     if (usechol)
diff --git a/scripts/pkg/get_forge_pkg.m b/scripts/pkg/get_forge_pkg.m
--- a/scripts/pkg/get_forge_pkg.m
+++ b/scripts/pkg/get_forge_pkg.m
@@ -41,26 +41,26 @@ function [ver, url] = get_forge_pkg (nam
   [html, succ] = urlread (sprintf ("http://octave.sourceforge.net/%s/index.html", name));
   if (succ)
     ## Remove blanks for simpler matching.
     html(isspace(html)) = [];
     ## Good. Let's grep for the version.
     pat = "<tdclass=""package_table"">PackageVersion:</td><td>([0-9.]*)</td>";
     t = regexp (html, pat, "tokens");
     if (isempty (t) || isempty(t{1}))
-      error ("get_forge_pkg: could not read version number from package's page.");
+      error ("get_forge_pkg: could not read version number from package's page");
     else
       ver = t{1}{1};
       if (nargout > 1)
         # Build download string.
         urlbase = "http://downloads.sourceforge.net/octave/%s-%s.tar.gz?download";
         url = sprintf (urlbase, name, ver);
         ## Verify that the string exists on the page.
         if (isempty (strfind (html, url)))
-          warning ("get_forge_pkg: download URL not verified.");
+          warning ("get_forge_pkg: download URL not verified");
         endif
       endif
     endif
   else
     ## Try get the list of all packages.
     [html, succ] = urlread ("http://octave.sourceforge.net/packages.php");
     if (succ)
       t = regexp (html, "<div class=""package"" id=""(\\w+)"">", "tokens");
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1881,17 +1881,17 @@ function write_index (desc, dir, index_f
   categories = split_by (desc.categories, ",");
   if (length (categories) < 1)
       error ("the Category field is empty");
   endif
 
   ## Write INDEX.
   fid = fopen (index_file, "w");
   if (fid == -1)
-    error ("couldn't open %s for writing.", index_file);
+    error ("couldn't open %s for writing", index_file);
   endif
   fprintf (fid, "%s >> %s\n", desc.name, desc.title);
   fprintf (fid, "%s\n", categories{1});
   fprintf (fid, "  %s\n", functions{:});
   fclose (fid);
 endfunction
 
 function bad_deps = get_unsatisfied_deps (desc, installed_pkgs_lst)
diff --git a/scripts/plot/__fltk_print__.m b/scripts/plot/__fltk_print__.m
--- a/scripts/plot/__fltk_print__.m
+++ b/scripts/plot/__fltk_print__.m
@@ -134,29 +134,29 @@ function opts = __fltk_print__ (opts)
         pipeline = {sprintf("%s ; %s", cmd, cmd_cleanup)};
       endif
     else
       gl2ps_device = {"eps"};
       pipeline = {cmd};
     endif
   otherwise
     error (sprintf ("print:no%soutput", opts.devopt),
-           "print.m: %s output is not available for GL2PS output.",
+           "print.m: %s output is not available for GL2PS output",
            upper (opts.devopt))
   endswitch
 
   opts.pipeline = pipeline;
 
   for n = 1:numel(pipeline)
     if (opts.debug)
       fprintf ("fltk-pipeline: '%s'\n", pipeline{n})
     endif
     pid = popen (pipeline{n}, "w");
     if (pid < 0)
-      error ("print:popenfailed", "print.m: failed to open pipe.");
+      error ("print:popenfailed", "print.m: failed to open pipe");
     endif
     unwind_protect
       drawnow (gl2ps_device{n} , sprintf ("%d" , pid));
       waitpid (pid);
     unwind_protect_cleanup
       pclose (pid);
     end_unwind_protect
   endfor
diff --git a/scripts/plot/__gnuplot_get_var__.m b/scripts/plot/__gnuplot_get_var__.m
--- a/scripts/plot/__gnuplot_get_var__.m
+++ b/scripts/plot/__gnuplot_get_var__.m
@@ -85,17 +85,17 @@ function gp_var_value = __gnuplot_get_va
       fprintf (ostream, "\nset print \"%s\";\n", gpin_name);
       fflush (ostream);
       [gpin, err] = fopen (gpin_name, "r");
       if (err != 0)
         ## Try a second time, and then give an error.
         [gpin, err] = fopen (gpin_name, "r");
       endif
       if (err != 0)
-        error ("__gnuplot_get_var__: Can not open fifo.");
+        error ("__gnuplot_get_var__: can not open fifo");
       endif
       gp_cmd = sprintf ("\nif (exists(\"%s\")) print %s; else print NaN\n",
                         gp_var_name(1:n), gp_var_name);
       fputs (ostream, gp_cmd);
 
       ## Close output file, to force it to be flushed
       fputs (ostream, "set print;\n");
       fflush (ostream);
diff --git a/scripts/plot/__gnuplot_open_stream__.m b/scripts/plot/__gnuplot_open_stream__.m
--- a/scripts/plot/__gnuplot_open_stream__.m
+++ b/scripts/plot/__gnuplot_open_stream__.m
@@ -24,22 +24,22 @@
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2009-04-11
 
 function plot_stream = __gnuplot_open_stream__ (npipes, h)
   [prog, args] = gnuplot_binary ();
   if (npipes > 1)
     [plot_stream(1), plot_stream(2), pid] = popen2 (prog, args{:});
     if (pid < 0)
-      error ("__gnuplot_open_stream__: failed to open connection to gnuplot.");
+      error ("__gnuplot_open_stream__: failed to open connection to gnuplot");
     else
       plot_stream(3) = pid;
     endif
   else
     plot_stream = popen (sprintf ("%s ", prog, args{:}), "w");
     if (plot_stream < 0)
-      error ("__gnuplot_open_stream__: failed to open connection to gnuplot.");
+      error ("__gnuplot_open_stream__: failed to open connection to gnuplot");
     endif
   endif
   if (nargin > 1)
     set (h, "__plot_stream__", plot_stream);
   endif
 endfunction
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -88,29 +88,29 @@ function opts = __gnuplot_print__ (opts)
     endif
     local_drawnow (sprintf ("%s %s", term, gp_opts),
                    strcat (name, ".", suffix), opts)
   case "tikz"
     if (__gnuplot_has_terminal__ ("tikz"))
       local_drawnow (sprintf ("lua tikz %s", gp_opts), opts.name, opts);
     else
       error (sprintf ("print:no%soutput", opts.devopt),
-             "print.m: '%s' output is not available for Gnuplot-%s.",
+             "print.m: '%s' output is not available for gnuplot-%s",
              upper (opts.devopt), __gnuplot_version__ ())
     endif
   case "svg"
     local_drawnow (sprintf ("svg dynamic %s", gp_opts), opts.name, opts);
   case {"aifm", "corel", "eepic", "emf", "fig"}
     local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
   case {"pdfcairo", "pngcairo"}
     if (__gnuplot_has_terminal__ (opts.devopt))
       local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
     else
       error (sprintf ("print:no%soutput", opts.devopt),
-             "print.m: '%s' output is not available for Gnuplot-%s.",
+             "print.m: '%s' output is not available for gnuplot-%s",
              upper (opts.devopt), __gnuplot_version__ ())
     endif
   case {"canvas", "dxf", "hpgl", "mf", "gif", "pstricks", "texdraw"}
     local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts)
   case opts.ghostscript.device
     gp_opts = font_spec (opts, "devopt", "eps");
     opts.ghostscript.output = opts.name;
     opts.ghostscript.source = strcat (tmpnam (), ".eps");
@@ -150,17 +150,17 @@ function opts = __gnuplot_print__ (opts)
       fprintf ("gnuplot-pipeline: '%s'\n", pipeline{n})
     endif
     [status, output] = system (pipeline{n});
     if (status)
       fprintf ("%s\n%s\n%s\n",
                "---------- output begin ----------",
                output,
                "----------- output end -----------");
-      error ("gnuplot:failedpipe", "print: Failed to print.")
+      error ("gnuplot:failedpipe", "print: failed to print")
     endif
   endfor
 
 endfunction
 
 function eps_drawnow (opts, epsfile, gp_opts)
   [h, fontsize] = get_figure_text_objs (opts);
   unwind_protect
diff --git a/scripts/plot/daspect.m b/scripts/plot/daspect.m
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -51,41 +51,41 @@ function varargout = daspect (varargin)
       if (ischar (varargin{1})
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
         switch (varargin{1})
         case "mode"
           if (nargout < 2)
             varargout{1} = get (hax, "dataaspectratiomode");
             return
           else
-            error ("daspect: only one output is allowed.")
+            error ("daspect: only one output is allowed")
           endif
         case "manual"
           set (hax, "dataaspectratiomode", "manual");
         case "auto"
           set (hax, "dataaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1}) && numel (varargin{1}) == 2)
         set (hax, "dataaspectratio", [varargin{1}, 1])
       elseif (isreal (varargin{1}) && numel (varargin{1}) == 3)
         set (hax, "dataaspectratio", varargin{1})
       else
-        error ("daspect: invalid input.")
+        error ("daspect: invalid input")
       endif
     elseif (numel (varargin) > 1)
-      error ("daspect: too many inputs.")
+      error ("daspect: too many inputs")
     endif
   elseif (nargout == 0)
     print_usage ();
   endif
 
   if (nargout == 1)
     varargout{1} = get (hax, "dataaspectratio");
   elseif (nargout > 1)
-    error ("daspect: only one output is allowed.")
+    error ("daspect: only one output is allowed")
   endif
 
 endfunction
 
 %!demo
 %! x = 0:0.01:4;
 %! clf
 %! plot (x, cos (x), x, sin (x))
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -46,17 +46,17 @@ function gnuplot_drawnow (h, term, file,
         enhanced = gnuplot_set_term (plot_stream (1), true, h, term, file);
         __go_draw_figure__ (h, plot_stream(1), enhanced, mono);
         if (nargin == 5)
           fid = fopen (debug_file, "wb");
           enhanced = gnuplot_set_term (fid, true, h, term, file);
           __go_draw_figure__ (h, fid, enhanced, mono);
         endif
       else
-        error ("gnuplot_drawnow: the gnuplot terminal, \"%s\", is not available.",
+        error ("gnuplot_drawnow: the gnuplot terminal, \"%s\", is not available",
                gnuplot_trim_term (term))
       endif
     unwind_protect_cleanup
       set (h, "__plot_stream__", default_plot_stream);
       if (! isempty (plot_stream))
         pclose (plot_stream(1));
         if (numel (plot_stream) > 1)
           pclose (plot_stream(2));
diff --git a/scripts/plot/pbaspect.m b/scripts/plot/pbaspect.m
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -51,41 +51,41 @@ function varargout = pbaspect (varargin)
       if (ischar (varargin{1})
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
         switch (varargin{1})
         case "mode"
           if (nargout < 2)
             varargout{1} = get (hax, "plotboxaspectratiomode");
             return
           else
-            error ("pbaspect: only one output is allowed.")
+            error ("pbaspect: only one output is allowed")
           endif
         case "manual"
           set (hax, "plotboxaspectratiomode", "manual");
         case "auto"
           set (hax, "plotboxaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1}) && numel (varargin{1}) == 2)
         set (hax, "plotboxaspectratio", [varargin{1}, 1])
       elseif (isreal (varargin{1}) && numel (varargin{1}) == 3)
         set (hax, "plotboxaspectratio", varargin{1})
       else
-        error ("pbaspect: invalid input.")
+        error ("pbaspect: invalid input")
       endif
     elseif (numel (varargin) > 1)
-      error ("pbaspect: too many inputs.")
+      error ("pbaspect: too many inputs")
     endif
   elseif (nargout == 0)
     print_usage ();
   endif
 
   if (nargout == 1)
     varargout{1} = get (hax, "plotboxaspectratio");
   elseif (nargout > 1)
-    error ("pbaspect: only one output is allowed.")
+    error ("pbaspect: only one output is allowed")
   endif
 
 endfunction
 
 %!demo
 %! x = 0:0.01:4;
 %! clf
 %! plot (x, cos (x), x, sin (x))
diff --git a/scripts/plot/private/__errplot__.m b/scripts/plot/private/__errplot__.m
--- a/scripts/plot/private/__errplot__.m
+++ b/scripts/plot/private/__errplot__.m
@@ -141,17 +141,17 @@ function h = __errplot__ (fstr, p, varar
           xldata = varargin{3}(:,i);
           xudata = varargin{4}(:,i);
           ldata = varargin{5}(:,i);
           udata = varargin{6}(:,i);
         else
           error ("errorbar: error plot with 6 columns only valid for boxxy and xyerr");
         endif
       otherwise
-        error ("errorbar: error plot requires 2, 3, 4 or 6 arguments.");
+        error ("errorbar: error plot requires 2, 3, 4 or 6 arguments");
     endswitch
 
     addproperty ("xdata", hg, "data", xdata(:))
     addproperty ("ydata", hg, "data", ydata(:))
     addproperty ("ldata", hg, "data", ldata(:))
     addproperty ("udata", hg, "data", udata(:))
     addproperty ("xldata", hg, "data", xldata(:))
     addproperty ("xudata", hg, "data", xudata(:))
@@ -252,17 +252,17 @@ function [xdata, ydata] = errorbar_data 
     [x1, y1] = errorbar_data (xdata, ydata, ldata, udata,
                               xldata, xudata, "xerr", xscale, yscale);
     [x2, y2] = errorbar_data (xdata, ydata, ldata, udata,
                               xldata, xudata, "yerr", xscale, yscale);
     xdata = [x1; x2];
     ydata = [y1; y2];
     return
   else
-      error ("errorbar: valid error bar types are xerr, yerr, boxxy, and xyerr.")
+      error ("errorbar: valid error bar types are xerr, yerr, boxxy, and xyerr")
   endif
   xdata = xdata.'(:);
   ydata = ydata.'(:);
 endfunction
 
 function update_props (hg, dummy, hl)
   set (hl, "color", get (hg, "color"),
            "linewidth", get (hg, "linewidth"));,
diff --git a/scripts/plot/private/__fltk_file_filter__.m b/scripts/plot/private/__fltk_file_filter__.m
--- a/scripts/plot/private/__fltk_file_filter__.m
+++ b/scripts/plot/private/__fltk_file_filter__.m
@@ -24,17 +24,17 @@
 ## Author: Kai Habel
 
 function retval = __fltk_file_filter__ (file_filter)
   # converts octave's file filter format into fltk's.
   retval = "";
   if (iscell (file_filter))
     [r, c] = size (file_filter);
     if ((c == 0) || (c > 2))
-      error ("expecting 1 or to 2 columns for file filter cell.");
+      error ("expecting 1 or to 2 columns for file filter cell");
     endif
     fltk_str = "";
     for idx = 1 : r
 
       curr_ext = file_filter{idx, 1};
       curr_ext = strsplit (curr_ext, ";");
 
       if (length (curr_ext) > 1)
diff --git a/scripts/plot/private/__ghostscript__.m b/scripts/plot/private/__ghostscript__.m
--- a/scripts/plot/private/__ghostscript__.m
+++ b/scripts/plot/private/__ghostscript__.m
@@ -109,23 +109,23 @@ function [gs_cmd, cleanup_cmd] = __ghost
       cleanup_cmd = "";
     else
       offsetfile = strcat (tmpnam (), ".ps");
       cleanup_cmd = sprintf ("rm %s", offsetfile);
     endif
     unwind_protect
       fid = fopen (offsetfile, "w");
       if (fid == -1)
-        error ("print:fopenfailed", "__ghostscript__.m: fopen() failed.");
+        error ("print:fopenfailed", "__ghostscript__.m: fopen() failed");
       endif
       fprintf (fid, "%s\n", offset_ps{:})
     unwind_protect_cleanup
       status = fclose (fid);
       if (status == -1)
-        error ("print:fclosefailed", "__ghostscript__.m: fclose() failed.");
+        error ("print:fclosefailed", "__ghostscript__.m: fclose() failed");
       endif
     end_unwind_protect
     if (opts.debug)
       fprintf ("---- begin %s ----\n", offsetfile)
       fprintf ("%s\n", offset_ps{:})
       fprintf ("----- end %s -----\n", offsetfile)
     endif
   endif
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -148,15 +148,15 @@ function [retfile, retpath, retindex] = 
     endif
   else
     error ("uigetfile: number of input arguments must be less than eight");
   endif
 
   if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
   else
-    error ("uigetfile: fltk graphics toolkit required.");
+    error ("uigetfile: fltk graphics toolkit required");
   endif
 
 endfunction
 
 %!demo
 %! uigetfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"})
diff --git a/scripts/plot/uiputfile.m b/scripts/plot/uiputfile.m
--- a/scripts/plot/uiputfile.m
+++ b/scripts/plot/uiputfile.m
@@ -80,17 +80,17 @@ function [retfile, retpath, retindex] = 
       outargs{2} = varargin{2};
     endif
 
     if (nargin > 2)
       outargs{3} = varargin{3};
     endif
 
   else
-    error ("uiputfile: number of input arguments must be less than four.");
+    error ("uiputfile: number of input arguments must be less than four");
   endif
 
   if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});
   else
     error ("uiputfile: fltk graphics toolkit required");
   endif
 
diff --git a/scripts/polynomial/polyaffine.m b/scripts/polynomial/polyaffine.m
--- a/scripts/polynomial/polyaffine.m
+++ b/scripts/polynomial/polyaffine.m
@@ -33,21 +33,21 @@
 
 function g = polyaffine (f, mu)
 
    if (nargin != 2)
       print_usage ();
    endif
 
    if (! isvector (f))
-      error ("polyaffine: F must be a vector.");
+      error ("polyaffine: F must be a vector");
    endif
 
    if (! isvector (mu) || length (mu) != 2)
-      error ("polyaffine: MU must be a two-element vector.");
+      error ("polyaffine: MU must be a two-element vector");
    endif
 
    lf = length (f);
 
    ## Ensure that f is a row vector
    if (rows (f) > 1)
       f = f.';
    endif
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -328,17 +328,17 @@ function [x, flag, relres, iter, resvec,
     if (matrix_positive_definite)
       if (iter > 3)
         T = T(2:iter-2,2:iter-2);
         l = eig (T);
         eigest = [min(l), max(l)];
         ## fprintf (stderr, "pcg condest: %g\n", eigest(2)/eigest(1));
       else
         eigest = [NaN, NaN];
-        warning ("pcg: eigenvalue estimate failed: iteration converged too fast.");
+        warning ("pcg: eigenvalue estimate failed: iteration converged too fast");
       endif
     else
       eigest = [NaN, NaN];
     endif
 
     ## Apply the preconditioner once more and finish with the precond
     ## residual.
     if (exist_m1)
