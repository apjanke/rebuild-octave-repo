# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1360600214 18000
#      Mon Feb 11 11:30:14 2013 -0500
# Node ID dd583c258cf97125780c5757e4d20584db78af65
# Parent  999f8257313b51bdfe1ca17a758b9f3f291c7de1
Fix trivial typo in run-octave.in comment

diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -58,17 +58,17 @@ if [ $# -gt 0 ]; then
     driver="gdb --args"
     shift
   elif [ "x$1" = "x-gud" ]; then
     ## Frontends for gdb (e.g. Emacs's GUD mode) need --annotate=3
     driver="gdb --annotate=3 --args"
     shift
   elif [ "x$1" = "x-gud2" ]; then
     ## The latest version of gud needs -i=mi. There isn't a good way to check
-    ## this at configure time, so we just add a gdb2 flag
+    ## this at configure time, so we just add a gud2 flag
     driver="gdb -i=mi --args"
     shift
   elif [ "x$1" = "x-valgrind" ]; then
     driver="valgrind --tool=memcheck"
     shift
   elif [ "x$1" = "x-strace" ]; then
     driver="strace -o octave.trace"
     shift
diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -122,16 +122,22 @@ function r = pick_rand_diag (n, k)
   if (k == 1)
     r = 1;
     return
   endif
 
   ## Compute the stuff described above
   a = n*(n - 1)/2;
   d = [mod(k,2):2:min(n,k)-2];
+
+  ## Since we 
+  if (isempty (d))
+    keyboard
+  endif
+
   m = (k - d)/2;
   q = (n - d).*(n - d - 1).*m ./ (d + 2)./(d + 1)./(a - m + 1);
 
   ## Slight modification from discussion above: pivot around the max in
   ## order to avoid overflow (underflow is fine, just means effectively
   ## zero probabilities).
   [~, midx] = max (cumsum (log (q))) ;
   midx++;
