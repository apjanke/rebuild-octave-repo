# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1517999653 -3600
#      Wed Feb 07 11:34:13 2018 +0100
# Node ID aaf7bcea71dd0de9ab0a0411e4a2fa0be52b00c4
# Parent  d6370c5c9fd376c3ae858053db3383583e1e9a13
Silence build warnings about unused parameters.

* libinterp/octave-value/ov-base-diag.cc (octave_base_diag<DMT, MT>::edit_display),
libinterp/octave-value/ov-base-scalar.cc (octave_base_scalar<ST>::edit_display),
libinterp/octave-value/ov-cell.cc (octave_base_matrix<Cell>::edit_display),
libinterp/octave-value/ov-perm.cc (octave_perm_matrix::edit_display),
libinterp/octave-value/ov-str-mat.cc (octave_char_matrix_str::edit_display),
libinterp/octave-value/ov-struct.cc (octave_struct::edit_display,
octave_scalar_struct::edit_display): Remove identifier of unused parameter "fmt"
to silence many build warnings.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -610,17 +610,17 @@ octave_base_diag<DMT, MT>::short_disp (s
         os << ']';
     }
   else
     os << "...";
 }
 
 template <typename DMT, typename MT>
 std::string
-octave_base_diag<DMT, MT>::edit_display (const float_display_format& fmt,
+octave_base_diag<DMT, MT>::edit_display (const float_display_format&,
                                          octave_idx_type i,
                                          octave_idx_type j) const
 {
   std::ostringstream buf;
   octave_print_internal (buf, matrix(i,j));
   return buf.str ();
 }
 
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -185,17 +185,17 @@ octave_base_scalar<ST>::short_disp (std:
   if (pos != std::string::npos)
     os << tmp.substr (pos);
   else if (! tmp.empty ())
     os << tmp[0];
 }
 
 template <typename ST>
 std::string
-octave_base_scalar<ST>::edit_display (const float_display_format& fmt,
+octave_base_scalar<ST>::edit_display (const float_display_format&,
                                       octave_idx_type, octave_idx_type) const
 {
   std::ostringstream buf;
   octave_print_internal (buf, scalar);
   return buf.str ();
 }
 
 template <typename ST>
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -96,17 +96,17 @@ octave_base_matrix<Cell>::delete_element
   matrix.delete_elements (idx);
 }
 
 // FIXME: this list of specializations is becoming so long that we should
 // really ask whether octave_cell should inherit from octave_base_matrix at all.
 
 template <>
 std::string
-octave_base_matrix<Cell>::edit_display (const float_display_format& fmt,
+octave_base_matrix<Cell>::edit_display (const float_display_format&,
                                         octave_idx_type i,
                                         octave_idx_type j) const
 {
   octave_value val = matrix(i,j);
 
   std::string tname = val.type_name ();
   dim_vector dv = val.dims ();
   std::string dimstr = dv.str ();
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -539,17 +539,17 @@ octave_perm_matrix::try_narrowing_conver
 
   if (matrix.numel () == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
 std::string
-octave_perm_matrix::edit_display (const float_display_format& fmt,
+octave_perm_matrix::edit_display (const float_display_format&,
                                   octave_idx_type i, octave_idx_type j) const
 {
   // FIXME: maybe we should have octave_print_internal functions for
   // standard int types, not just octave_int<T> types.
 
   std::ostringstream buf;
   octave_print_internal (buf, octave_int<octave_idx_type> (matrix(i,j)));
   return buf.str ();
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -273,17 +273,17 @@ octave_char_matrix_str::short_disp (std:
       // FIXME: should this be configurable?
       size_t max_len = 100;
 
       os << (tmp.length () > max_len ? tmp.substr (0, 100) : tmp);
     }
 }
 
 std::string
-octave_char_matrix_str::edit_display (const float_display_format& fmt,
+octave_char_matrix_str::edit_display (const float_display_format&,
                                       octave_idx_type i,
                                       octave_idx_type) const
 {
   if (i == 0)
     {
       if (rows () == 1)
         {
           std::string retval = string_value ();
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -652,17 +652,17 @@ octave_struct::print_name_tag (std::ostr
 
 static bool
 scalar (const dim_vector& dims)
 {
   return dims.ndims () == 2 && dims(0) == 1 && dims(1) == 1;
 }
 
 std::string
-octave_struct::edit_display (const float_display_format& fmt,
+octave_struct::edit_display (const float_display_format&,
                              octave_idx_type r, octave_idx_type c) const
 {
   octave_value val;
   if (map.rows () == 1 || map.columns () == 1)
     {
       // Vector struct.  Columns are fields, rows are values.
 
       Cell cval = map.contents (c);
@@ -1355,17 +1355,17 @@ octave_scalar_struct::print_name_tag (st
 
       retval = true;
     }
 
   return retval;
 }
 
 std::string
-octave_scalar_struct::edit_display (const float_display_format& fmt,
+octave_scalar_struct::edit_display (const float_display_format&,
                                     octave_idx_type r, octave_idx_type) const
 {
   // Scalar struct.  Rows are fields, single column for values.
 
   octave_value val = map.contents (r);
 
   std::string tname = val.type_name ();
   dim_vector dv = val.dims ();
