# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470595180 -3600
#      Sun Aug 07 19:39:40 2016 +0100
# Node ID 3ac380d46d5481f9e423d070a6da58d7a7214662
# Parent  f99c0b8cb67bdef50be6f7384e1d7e1c9f8de95b
chol: make option passed as string case insensitive.

* libinterp/dldfcn/chol.cc: make comparison of strings for options case
insensitive.  Add tests.  Add missing include for <string> which is used
elsewhere in the file.

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -21,21 +21,24 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <string>
+
 #include "chol.h"
 #include "sparse-chol.h"
 #include "oct-spparms.h"
 #include "sparse-util.h"
 
+#include "caseless-str.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "utils.h"
 
@@ -155,23 +158,23 @@ sparse matrices.
     error ("chol: using three output arguments, matrix A must be sparse");
 
   bool LLt = false;
   bool vecout = false;
 
   int n = 1;
   while (n < nargin)
     {
-      std::string tmp = args(n++).xstring_value ("chol: optional arguments must be strings");
+      caseless_str tmp = args(n++).xstring_value ("chol: optional arguments must be strings");
 
-      if (tmp == "vector")
+      if (tmp.compare ("vector"))
         vecout = true;
-      else if (tmp == "lower")
+      else if (tmp.compare ("lower"))
         LLt = true;
-      else if (tmp == "upper")
+      else if (tmp.compare ("upper"))
         LLt = false;
       else
         error ("chol: optional argument must be one of \"vector\", \"lower\", or \"upper\"");
     }
 
   octave_value_list retval;
   octave_value arg = args(0);
 
@@ -308,16 +311,26 @@ sparse matrices.
     }
 
   return retval;
 }
 
 /*
 %!assert (chol ([2, 1; 1, 1]), [sqrt(2), 1/sqrt(2); 0, 1/sqrt(2)], sqrt (eps))
 %!assert (chol (single ([2, 1; 1, 1])), single ([sqrt(2), 1/sqrt(2); 0, 1/sqrt(2)]), sqrt (eps ("single")))
+
+%!assert (chol ([2, 1; 1, 1], "upper"), [sqrt(2), 1/sqrt(2); 0, 1/sqrt(2)],
+%!        sqrt (eps))
+%!assert (chol ([2, 1; 1, 1], "lower"), [sqrt(2), 0; 1/sqrt(2), 1/sqrt(2)],
+%!        sqrt (eps))
+
+%!assert (chol ([2, 1; 1, 1], "lower"), chol ([2, 1; 1, 1], "LoweR"))
+%!assert (chol ([2, 1; 1, 1], "upper"), chol ([2, 1; 1, 1], "Upper"))
+%!assert (chol ([2, 1; 1, 1], "vector"), chol ([2, 1; 1, 1], "VECTOR"))
+
 %!testif HAVE_CHOLMOD
 %! ## Bug #42587
 %! A = sparse ([1 0 8;0 1 8;8 8 1]);
 %! [Q, p] = chol (A);
 %! assert (p != 0);
 
 %!error chol ()
 %!error <matrix must be positive definite> chol ([1, 2; 3, 4])
