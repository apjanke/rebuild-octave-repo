# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1225452620 -3600
#      Fri Oct 31 12:30:20 2008 +0100
# Node ID be9b149457745c4430dc12f2c27c69f0143eceac
# Parent  7e87d3d76a5689e02cad5e31bb8e95c85a888627
Add code to remove listeners from properties and use it with newplot

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2008-10-31  David Bateman  <dbateman@free.fr>
+
+	* plot/__contour__.m: Exclude infinite values when calculating contour
+	levels.
+	* plot/clabel.m: Close previous plots in demos to avoid pollution
+	between other plot demos.
+	* plot/plotyy.m: Ditto.
+
 2008-10-30  David Bateman  <dbateman@free.fr>
 
 	* plot/legend.m: Add support for the "left" and "right" options.
 	* plot/__go_draw_axes__.m: If the axes property keyreverse is set,
 	reverse the key and labelling text.
 	
 	* plot/__clabel__.m, plot/clabel.m: New functions.
 	* plot/Makefile.in (SOURCES): Add them here.
diff --git a/scripts/plot/__contour__.m b/scripts/plot/__contour__.m
--- a/scripts/plot/__contour__.m
+++ b/scripts/plot/__contour__.m
@@ -73,32 +73,39 @@ function [c, hg] = __contour__ (varargin
   if (length (varargin) == 4 || length (varargin) == 6)
     vn = varargin {end};
     vnauto = false;
   else
     vnauto = true;
     vn = 10; 
   endif
 
+  if (isscalar (vn))
+    lvl = linspace (min (z1(!isinf(z1))), max (z1(!isinf(z1))), 
+		    vn + 2)(1:end-1);
+  else
+    lvl = vn;
+  endif
+
   if (strcmpi (filled, "on"))
     if (isvector (x1) || isvector (y1))
       [x1, y1] = meshgrid (x1, y1);
     endif
     [nr, nc] = size (z1);
     x0 = prepad(x1, nc+1, 2 * x1(1, 1) - x1(1, 2), 2);
     x0 = postpad(x0, nc+2, 2 * x1(1, nc) - x1(1, nc - 1), 2);
     x0 = [x0(1, :); x0; x0(1, :)];
     y0 = prepad(y1, nr+1, 2 * y1(1, 1) - y1(2, 1), 1);
     y0 = postpad(y0, nr+2, 2 * y1(nr, 1) - y1(nr - 1, 1));
     y0 = [y0(:, 1), y0, y0(:, 1)];
     z0 = -Inf(nr+2, nc+2);
     z0(2:nr+1, 2:nc+1) = z1;
-    [c, lev] = contourc (x0, y0, z0, vn);
+    [c, lev] = contourc (x0, y0, z0, lvl);
   else
-    [c, lev] = contourc (x1, y1, z1, vn);
+    [c, lev] = contourc (x1, y1, z1, lvl);
   endif
 
   hg = hggroup ();
   opts = __add_datasource__ ("__countour__", hg, {"x", "y", "z"}, opts{:});
 
   addproperty ("xdata", hg, "data", x1);
   addproperty ("ydata", hg, "data", y1);
   addproperty ("zdata", hg, "data", z1);
@@ -123,21 +130,17 @@ function [c, hg] = __contour__ (varargin
       z = varargin{3};
       z = 2 * (min (z(:)) - max (z(:)));
       addproperty ("zlevel", hg, "data", z);
     else
       addproperty ("zlevel", hg, "data", 0.);
     endif
   endif
 
-  if (isscalar (vn))
-    lvlstep = (max(z1(:)) - min(z1(:))) / vn;
-  else
-    lvlstep = (max(z1(:)) - min(z1(:))) / 10;
-  endif
+  lvlstep = sum (abs (diff (lvl))) / (length (lvl) - 1);
 
   addproperty ("levellist", hg, "data", lev);
   addproperty ("levelstep", hg, "double", lvlstep);
   if (vnauto)
     addproperty ("levellistmode", hg, "radio", "{auto}|manual", "auto");
     addproperty ("levelstepmode", hg, "radio", "{auto}|manual", "auto");
   elseif (isscalar (vn))
     addproperty ("levellistmode", hg, "radio", "{auto}|manual", "auto");
diff --git a/scripts/plot/clabel.m b/scripts/plot/clabel.m
--- a/scripts/plot/clabel.m
+++ b/scripts/plot/clabel.m
@@ -124,14 +124,16 @@ function retval = clabel (c, varargin)
       set (retval, varargin {:});
     endif
   else
     retval =  __clabel__ (c, v, hparent, label_spacing, [], varargin{:});
   endif
 endfunction
 
 %!demo
+%! close all
 %! [c, h] = contour (peaks(), -4 : 6);
 %! clabel (c, h, -4 : 2 : 6, 'fontsize', 12);
 
 %!demo
+%! close all
 %! [c, h] = contourf (peaks(), -7 : 6);
 %! clabel (c, h, -6 : 2 : 6, 'fontsize', 12);
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -177,16 +177,17 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   ## Tag the plotyy axes, so we can use that information
   ## not to mirror the y axis tick marks
   set (ax, "tag", "plotyy")
 
 endfunction
 
 %!demo
+%! close all;
 %! x = 0:0.1:2*pi; 
 %! y1 = sin (x);
 %! y2 = exp (x - 1);
 %! ax = plotyy (x, y1, x - 1, y2, @plot, @semilogy);
 %! xlabel ("X");
 %! ylabel (ax(1), "Axis 1");
 %! ylabel (ax(2), "Axis 2");
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,16 +1,30 @@
 2008-10-30  John W. Eaton  <jwe@octave.org>
 
 	* oct-map.cc (Octave_map::index): Copy key_list.
 
+2008-10-31  David Bateman  <dbateman@free.fr>
+
+	* graphics.h.in (base_property::delete_listener): New method.
+	(property::delete_listener): New method.
+	(base_graphics_object::delete_listener): New method.
+	(base_graphics_object::delete_property_listener): New method.
+	(base_graphics_object::remove_all_listeners): New method.
+	(graphics_object::delete_property_listener): New method.
+	(axes::set_defaults): Call remove_all_listeners.
+	* graphics.cc (void base_properties::delete_listener): New method
+	(void base_graphics_object::remove_all_listeners (void)): New method
+	(Fdellistener): New command to remove listener functions associated
+	with a property.
+	
 2008-10-30  David Bateman  <dbateman@free.fr>
 
-	* graphic.h.in (axes::properties): Add keyreverse property.
-	* graphic.cc (axes::properties::set_defaults): Initialize
+	* graphics.h.in (axes::properties): Add keyreverse property.
+	* graphics.cc (axes::properties::set_defaults): Initialize
 	keyreverse property.
 
 2008-10-28  Jaroslav Hajek <highegg@gmail.com>
 
 	* Cell.h (Cell::assign (const Array<idx_vector>&, ...),
 	Cell::delete_elements (const Array<idx_vector>&, ...)):
 	New member functions.
 	* Cell.cc (Cell::assign (const octave_value_list&, ...),
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1803,16 +1803,26 @@ base_properties::add_listener (const cas
 			       listener_mode mode)
 {
   property p = get_property (nm);
 
   if (! error_state && p.ok ())
     p.add_listener (v, mode);
 }
 
+void
+base_properties::delete_listener (const caseless_str& nm, 
+				  const octave_value& v, listener_mode mode)
+{
+  property p = get_property (nm);
+
+  if (! error_state && p.ok ())
+    p.delete_listener (v, mode);
+}
+
 // ---------------------------------------------------------------------
 
 class gnuplot_backend : public base_graphics_backend
 {
 public:
   gnuplot_backend (void)
       : base_graphics_backend ("gnuplot") { }
 
@@ -1935,16 +1945,33 @@ base_graphics_object::update_axis_limits
 
       if (parent_obj)
 	parent_obj.update_axis_limits (axis_type);
     }
   else
     error ("base_graphics_object::update_axis_limits: invalid graphics object");
 }
 
+void
+base_graphics_object::remove_all_listeners (void)
+{
+  Octave_map m = get (true).map_value ();
+
+  for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+    {
+      if (get_properties().has_property (pa->first))
+	{
+	  property p = get_properties ().get_property (pa->first);
+
+	  if (! error_state && p.ok ())
+	    p.delete_listener ();
+	}
+    }
+}
+
 // ---------------------------------------------------------------------
 
 #include "graphics-props.cc"
 
 // ---------------------------------------------------------------------
 
 void
 root_figure::properties::set_currentfigure (const octave_value& v)
@@ -4956,16 +4983,82 @@ addlistener (gcf, \"position\", @{@@my_l
 	error ("addlistener: invalid handle");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (dellistener, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} dellistener (@var{h}, @var{prop}, @var{fcn})\n\
+Remove the registration of @var{fcn} as a listener for the property\n\
+@var{prop} of the graphics object @var{h}. The function @var{fcn} must\n\
+be the same variable (not just the same value), as was passed to the\n\
+original call to @code{addlistener}.\n\
+\n\
+If @var{fcn} is not defined then all listener functions of @var{prop}\n\
+are removed.\n\
+\n\
+Example:\n\
+\n\
+@example\n\
+function my_listener (h, dummy, p1)\n\
+  fprintf (\"my_listener called with p1=%s\\n\", p1);\n\
+endfunction\n\
+\n\
+c = @{@@my_listener, \"my string\"@};\n\
+addlistener (gcf, \"position\", c);\n\
+dellistener (gcf, \"position\", c);\n\
+@end example\n\
+\n\
+@end deftypefn")
+{
+  gh_manager::autolock guard;
+
+  octave_value retval;
+
+  if (args.length () == 3 || args.length () == 2)
+    {
+      double h = args(0).double_value ();
+
+      if (! error_state)
+	{
+	  std::string pname = args(1).string_value ();
+
+	  if (! error_state)
+	    {
+	      graphics_handle gh = gh_manager::lookup (h);
+
+	      if (gh.ok ())
+		{
+		  graphics_object go = gh_manager::get_object (gh);
+
+		  if (args.length () == 2)
+		    go.delete_property_listener (pname, octave_value (), POSTSET);
+		  else
+		    go.delete_property_listener (pname, args(2), POSTSET);
+		}
+	      else
+		error ("dellistener: invalid graphics object (= %g)",
+		       h);
+	    }
+	  else
+	    error ("dellistener: invalid property name, expected a string value");
+	}
+      else
+	error ("dellistener: invalid handle");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (addproperty, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type}, [@var{arg}, @dots{}])\n\
 Create a new property named @var{name} in graphics object @var{h}.\n\
 @var{type} determines the type of the property to create. @var{args}\n\
 usually contains the default value of the property, but additional\n\
 arguments might be given, depending on the type of the property.\n\
 \n\
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -393,16 +393,47 @@ public:
     }
 
   void add_listener (const octave_value& v, listener_mode mode = POSTSET)
     {
       octave_value_list& l = listeners[mode];
       l.resize (l.length () + 1, v);
     }
 
+  void delete_listener (const octave_value& v = octave_value (), 
+			listener_mode mode = POSTSET)
+    {
+      octave_value_list& l = listeners[mode];
+
+      if (v.is_defined ())
+	{
+	  bool found = false;
+	  int i;
+
+	  for (i = 0; i < l.length (); i++)
+	    {
+	      if (v.internal_rep () == l(i).internal_rep ())
+		{
+		  found = true;
+		  break;
+		}
+	    }
+	  if (found)
+	    {
+	      for (int j = i; j < l.length() - 1; j++)
+		l(j) = l (j + 1);
+
+	      l.resize (l.length () - 1);
+	    }
+	}
+      else
+	l.resize (0);
+
+    }
+
   OCTINTERP_API void run_listeners (listener_mode mode = POSTSET);
 
   virtual base_property* clone (void) const
     { return new base_property (*this); }
 
 protected:
   virtual bool do_set (const octave_value&)
     {
@@ -1282,16 +1313,20 @@ public:
       rep->count++;
 
       return *this;
     }
 
   void add_listener (const octave_value& v, listener_mode mode = POSTSET)
     { rep->add_listener (v, mode); }
 
+  void delete_listener (const octave_value& v = octave_value (), 
+			listener_mode mode = POSTSET)
+  { rep->delete_listener (v, mode); }
+
   void run_listeners (listener_mode mode = POSTSET)
     { rep->run_listeners (mode); }
 
   OCTINTERP_API static
       property create (const std::string& name, const graphics_handle& parent,
 		       const caseless_str& type,
 		       const octave_value_list& args);
 
@@ -1627,16 +1662,19 @@ public:
   virtual Matrix get_boundingbox (bool /*internal*/ = false) const
     { return Matrix (1, 4, 0.0); }
 
   virtual void update_boundingbox (void);
 
   virtual void add_listener (const caseless_str&, const octave_value&,
 			     listener_mode = POSTSET);
 
+  virtual void delete_listener (const caseless_str&, const octave_value&,
+				listener_mode = POSTSET);
+
   void set_tag (const octave_value& val) { tag = val; }
 
   void set_parent (const octave_value& val);
 
   Matrix get_all_children (void) const { return children; }
 
   void set_children (const octave_value& val);
 
@@ -1922,16 +1960,26 @@ public:
   virtual void add_property_listener (const std::string& nm,
 				      const octave_value& v,
 				      listener_mode mode = POSTSET)
     {
       if (valid_object ())
 	get_properties ().add_listener (nm, v, mode);
     }
 
+  virtual void delete_property_listener (const std::string& nm,
+					 const octave_value& v,
+					 listener_mode mode = POSTSET)
+    {
+      if (valid_object ())
+	get_properties ().delete_listener (nm, v, mode);
+    }
+
+  virtual void remove_all_listeners (void);
+
 protected:
   // A reference count.
   int count;
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
@@ -2082,16 +2130,20 @@ public:
   { return get_properties ().is_handle_visible (); }
   
   graphics_backend get_backend (void) const { return rep->get_backend (); }
 
   void add_property_listener (const std::string& nm, const octave_value& v,
 			      listener_mode mode = POSTSET)
     { rep->add_property_listener (nm, v, mode); }
 
+  void delete_property_listener (const std::string& nm, const octave_value& v,
+				 listener_mode mode = POSTSET)
+    { rep->delete_property_listener (nm, v, mode); }
+
 private:
   base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
@@ -2768,16 +2820,17 @@ public:
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
       xproperties.set (name, value);
   }
 
   void set_defaults (const std::string& mode)
   {
+    remove_all_listeners ();
     xproperties.set_defaults (*this, mode);
   }
 
   octave_value get (const caseless_str& name) const
   {
     octave_value retval;
 
     // FIXME -- finish this.
