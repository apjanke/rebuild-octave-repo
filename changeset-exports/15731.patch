# HG changeset patch
# User Juan Pablo Carbajal <ajuanpi+dev@gmail.com>
# Date 1354648009 -3600
#      Tue Dec 04 20:06:49 2012 +0100
# Node ID 18f168880226bf091cf44dd857fc87346173906c
# Parent  84d29b28213015187869adf5e406bc23881c853a
error_ids: Adding ids and documentation

 error_ids.m:  Added ID Octave:bad-alloc and Octave:undefined-function
 error.txi:    Added section that explains how to catch errors with ids
               for this I needed a working example. I chose the ID
               Octave:invalid-indexing.
 ov-struct.cc: When a structure is indexed with a field it doesn't have
               the error now returns the corresponding ID
               Octave:invalid-indexing.

diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -175,16 +175,49 @@ for n = 1:100
 endfor
 @end group
 @end example
 
 @DOCSTRING(lasterror)
 
 @DOCSTRING(lasterr)
 
+It is also possible to assign an identification string to an error.
+If an error has such an ID the user can catch this error
+as will be shown in the next example.  To assign an ID to an error,
+simply call @code{error} with two string arguments, where the first
+is the identification string, and the second is the actual error.  Note
+that error IDs are in the format "NAMESPACE:ERROR-NAME".  The namespace
+"Octave" is used for Octave's own errors.  Any other string is available
+as a namespace for user's own errors.
+
+The next example counts indexing errors. The errors are catched using the
+field identifier of the structure returned by the function @code{lasterror}.
+
+@example
+@group
+number_of_errors = 0;
+for n = 1:100
+  try
+    @dots{}
+  catch
+    id = lasterror.identifier;
+    if (strcmp (id, "Octave:invalid-indexing"))
+      number_of_errors++;
+    endif
+  end_try_catch
+endfor
+@end group
+@end example
+
+The functions distributed with Octave can issue one of the following
+errors.
+
+@DOCSTRING(error_ids)
+
 When an error has been handled it is possible to raise it again.  This
 can be useful when an error needs to be detected, but the program should
 still abort.  This is possible using the @code{rethrow} function.  The
 previous example can now be changed to count the number of errors
 related to the @samp{*} operator, but still abort if another kind of
 error occurs.
 
 @example
@@ -300,16 +333,21 @@ is the identification string, and the se
 that warning IDs are in the format "NAMESPACE:WARNING-NAME".  The namespace
 "Octave" is used for Octave's own warnings.  Any other string is available
 as a namespace for user's own warnings.
 
 @DOCSTRING(warning)
 
 @DOCSTRING(lastwarn)
 
+The functions distributed with Octave can issue one of the following
+warnings.
+
+@DOCSTRING(warning_ids)
+
 @node Enabling and Disabling Warnings
 @subsection Enabling and Disabling Warnings
 
 The @code{warning} function also allows you to control which warnings
 are actually printed to the screen.  If the @code{warning} function
 is called with a string argument that is either @code{"on"} or @code{"off"}
 all warnings will be enabled or disabled.
 
@@ -329,14 +367,9 @@ while the following won't issue a warnin
 @example
 @group
 warning ("off", "example:non-negative-variable");
 warning ("example:non-negative-variable", 
          "'a' must be non-negative.  Setting 'a' to zero.");
 @end group
 @end example
 
-The functions distributed with Octave can issue one of the following
-warnings.
 
-@DOCSTRING(warning_ids)
-
-
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -80,17 +80,18 @@ octave_struct::dotref (const octave_valu
 
   octave_map::const_iterator p = map.seek (nm);
 
   if (p != map.end ())
     retval = map.contents (p);
   else if (auto_add)
     retval = (numel () == 0) ? Cell (dim_vector (1, 1)) : Cell (dims ());
   else
-    error ("structure has no member '%s'", nm.c_str ());
+    error_with_id ("Octave:invalid-indexing", 
+                   "structure has no member '%s'", nm.c_str ());
 
   return retval;
 }
 
 #if 0
 static void
 gripe_invalid_index1 (void)
 {
@@ -1138,17 +1139,18 @@ octave_scalar_struct::dotref (const octa
   maybe_warn_invalid_field_name (nm, "subsref");
 
   if (error_state)
     return retval;
 
   retval = map.getfield (nm);
 
   if (! auto_add && retval.is_undefined ())
-    error ("structure has no member '%s'", nm.c_str ());
+    error_with_id ("Octave:invalid-indexing",
+                   "structure has no member '%s'", nm.c_str ());
 
   return retval;
 }
 
 octave_value
 octave_scalar_struct::subsref (const std::string& type,
                                const std::list<octave_value_list>& idx)
 {
diff --git a/scripts/miscellaneous/error_ids.m b/scripts/miscellaneous/error_ids.m
--- a/scripts/miscellaneous/error_ids.m
+++ b/scripts/miscellaneous/error_ids.m
@@ -31,16 +31,23 @@
 ## @item Octave:invalid-fun-call
 ## Indicates that a function was called in an incorrect way, e.g., wrong number
 ## of input arguments.
 ##
 ## @item Octave:invalid-indexing
 ## Indicates that a data-type was indexed incorrectly, e.g., real-value index
 ## for arrays, non-existent field of a structure.
 ##
+## @item Octave:bad-alloc
+## Indicates that memory couldn't be allocated.
+##
+## @item Octave:undefined-function
+## Indicates a call to a function that is not defined. The function may
+## exist but Octave is unable to find it in the search path.
+##
 ## @end table
 
 
 function error_ids ()
   help ("error_ids");
 endfunction
 
 
