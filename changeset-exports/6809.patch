# HG changeset patch
# User jwe
# Date 1186771294 0
#      Fri Aug 10 18:41:34 2007 +0000
# Node ID 5e61f0bc0c27b97eacbe1d71454d73bf19800907
# Parent  64b2d6bcd54e5220746b044aeed84a1d7a036be2
[project @ 2007-08-10 18:41:33 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-08-10  Peter A. Gustafson  <petegus@umich.edu>
+
+	* plot/__go_draw_axes__.m: Add axes position to the usingclause,
+	use axes position in each appropriate gnuplot set statement.
+
 2007-08-10  John W. Eaton  <jwe@octave.org>
 
 	* image/Makefile.in (DISTFILES): Also include $(IMAGES) in the list.
 	(install install-strip): Use $(IMAGES), not $(IMAGE_FILES_NO_DIR).
 	(uninstall): Use $(IMAGES), not $(IMAGE_FILES_NO_DIR).
 	(IMAGE_FILES, IMAGE_FILES_NO_DIR): Delete obsolete variables.
 
 2007-08-10  Kai Habel  <kai.habel@gmx.de>
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -112,69 +112,84 @@ function __go_draw_axes__ (h, plot_strea
 	  ## Rotation of zlabel not yet support by gnuplot as of 4.2, but
 	  ## there is no message about it.
 	  fprintf (plot_stream, " rotate by %f;\n", angle);
 	endif
 	fputs (plot_stream, ";\n");
       endif
     endif
 
+    if (strcmpi (axis_obj.xaxislocation, "top"))
+      xaxisloc = "x2";
+      xaxisloc_using = "x2";
+    else
+      xaxisloc = "x";
+      xaxisloc_using = "x1";
+    endif
+    if (strcmpi (axis_obj.yaxislocation, "right"))
+      yaxisloc = "y2";
+      yaxisloc_using = "y2";
+    else
+      yaxisloc = "y";
+      yaxisloc_using = "y1";
+    endif
+
     if (strcmpi (axis_obj.xgrid, "on"))
-      fputs (plot_stream, "set grid xtics;\n");
+      fprintf (plot_stream, "set grid %stics;\n", xaxisloc);
     else
-      fputs (plot_stream, "set grid noxtics;\n");
+      fprintf (plot_stream, "set grid no%stics;\n", xaxisloc);
     endif
 
     if (strcmpi (axis_obj.ygrid, "on"))
-      fputs (plot_stream, "set grid ytics;\n");
+      fprintf (plot_stream, "set grid %stics;\n", yaxisloc);
     else
-      fputs (plot_stream, "set grid noytics;\n");
+      fprintf (plot_stream, "set grid no%stics;\n", yaxisloc);
     endif
 
     if (strcmpi (axis_obj.zgrid, "on"))
       fputs (plot_stream, "set grid ztics;\n");
     else
       fputs (plot_stream, "set grid ztics;\n");
     endif
 
     if (strcmpi (axis_obj.xminorgrid, "on"))
-      fputs (plot_stream, "set mxtics 5;\n");
-      fputs (plot_stream, "set grid mxtics;\n");
+      fprintf (plot_stream, "set m%stics 5;\n", xaxisloc);
+      fprintf (plot_stream, "set grid m%stics;\n", xaxisloc);
     else
-      fputs (plot_stream, "set grid nomxtics;\n");
+      fprintf (plot_stream, "set grid nom%stics;\n", xaxisloc);
     endif
 
     if (strcmpi (axis_obj.yminorgrid, "on"))
-      fputs (plot_stream, "set mytics 5;\n");
-      fputs (plot_stream, "set grid mytics;\n");
+      fprintf (plot_stream, "set m%stics 5;\n", yaxisloc);
+      fprintf (plot_stream, "set grid m%stics;\n", yaxisloc);
     else
-      fputs (plot_stream, "set grid nomytics;\n");
+      fprintf (plot_stream, "set grid nom%stics;\n", yaxisloc);
     endif
 
     if (strcmpi (axis_obj.zminorgrid, "on"))
       fputs (plot_stream, "set mztics 5;\n");
       fputs (plot_stream, "set grid mztics;\n");
     else
       fputs (plot_stream, "set grid nomztics;\n");
     endif
 
     do_tics (axis_obj, plot_stream);
 
     xlogscale = strcmpi (axis_obj.xscale, "log");
     if (xlogscale)
-      fputs (plot_stream, "set logscale x;\n");
+      fprintf (plot_stream, "set logscale %s;\n", xaxisloc);
     else
-      fputs (plot_stream, "unset logscale x;\n");
+      fprintf (plot_stream, "unset logscale %s;\n", xaxisloc);
     endif
 
     ylogscale = strcmpi (axis_obj.yscale, "log");
     if (ylogscale)
-      fputs (plot_stream, "set logscale y;\n");
+      fprintf (plot_stream, "set logscale %s;\n", yaxisloc);
     else
-      fputs (plot_stream, "unset logscale y;\n");
+      fprintf (plot_stream, "unset logscale %s;\n", yaxisloc);
     endif
 
     zlogscale = strcmpi (axis_obj.zscale, "log");
     if (zlogscale)
       fputs (plot_stream, "set logscale z;\n");
     else
       fputs (plot_stream, "unset logscale z;\n");
     endif
@@ -392,24 +407,26 @@ function __go_draw_axes__ (h, plot_strea
 	    else
 	      if (xautoscale)
 		[xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 	      endif
 	      if (yautoscale)
 		[ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ydat);
 	      endif
 	      data{data_idx} = [xdat, ydat]';
-	      usingclause{data_idx} = "using ($1):($2)";
+	      usingclause{data_idx} = sprintf ("using ($1):($2) axes %s%s",
+					      xaxisloc_using, yaxisloc_using);
 	    endif
 	  endif
 	  if (! (have_newer_gnuplot || isempty (with)))
 	    if (isempty (withclause{data_idx}))
-	      withclause{data_idx} = sprintf("with %s", with);
+	      withclause{data_idx} = sprintf ("with %s", with);
 	    else
-	      withclause{data_idx} = sprintf("%s %s", withclause{data_idx}, with);
+	      withclause{data_idx} = sprintf ("%s %s", withclause{data_idx},
+					      with);
 	    endif
 	  endif
 
        case "patch"
          if (! have_newer_gnuplot)
            warning ("patch objects require gnuplot v4.2 or later!, sorry")
          else
 	   if (! isempty (obj.zdata))
@@ -463,20 +480,20 @@ function __go_draw_axes__ (h, plot_strea
          ## I had to use data_idx instead of i here, not sure if o.k. (Kai)
          parametric(data_idx) = true;
          titlespec{data_idx} = "title \"\"";
 	 usingclause{data_idx} = "";
          if (isfield (obj, "edgecolor"))
            if (strncmp (obj.edgecolor, "none", 4))
              color = [1, 1, 1];
            elseif (strncmp (obj.edgecolor, "flat", 4))
-             warning("\"flat\" for edgecolor not supported");
+             warning ("\"flat\" for edgecolor not supported");
              color = [0, 0, 0];
            elseif (strncmp (obj.edgecolor, "interp", 6))
-             warning("\"interp\" for edgecolor not supported");
+             warning ("\"interp\" for edgecolor not supported");
              color = [0, 0, 0];
            else
 	     color = obj.edgecolor;
            endif
          else
            color = [0, 0, 0];
          endif
 	 withclause{data_idx} = sprintf ("with lines lc rgb \"#%02x%02x%02x\"",round (255*color));
@@ -615,30 +632,30 @@ function __go_draw_axes__ (h, plot_strea
     else
       xlim = axis_obj.xlim;
     endif
     if (strcmpi (axis_obj.xdir, "reverse"))
       xdir = "reverse";
     else
       xdir = "noreverse";
     endif
-    fprintf (plot_stream, "set xrange [%g:%g] %s;\n", xlim, xdir);
+    fprintf (plot_stream, "set %srange [%g:%g] %s;\n", xaxisloc, xlim, xdir);
 
     if (yautoscale && have_data)
       ylim = get_axis_limits (ymin, ymax, yminp, ylogscale);
       set (h, "ylim", ylim, "ylimmode", "auto");
     else
       ylim = axis_obj.ylim;
     endif
     if (strcmpi (axis_obj.ydir, "reverse"))
       ydir = "reverse";
     else
       ydir = "noreverse";
     endif
-    fprintf (plot_stream, "set yrange [%g:%g] %s;\n", ylim, ydir);
+    fprintf (plot_stream, "set %srange [%g:%g] %s;\n", yaxisloc, ylim, ydir);
 
     if (nd == 3)
       if (zautoscale && have_data)
 	zlim = get_axis_limits (zmin, zmax, zminp, zlogscale);
 	set (h, "zlim", zlim, "zlimmode", "auto");
       else
 	zlim = axis_obj.zlim;
       endif
@@ -992,20 +1009,38 @@ function __gnuplot_write_data__ (plot_st
       endfor
     endif
   endif
   fputs (plot_stream, "e\n");
 
 endfunction
 
 function do_tics (obj, plot_stream)
-  do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
-	     "x", plot_stream);
-  do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
-	     "y", plot_stream);
+  if (strcmpi (obj.xaxislocation, "top"))
+    do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
+	       "x2", plot_stream);
+    do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
+	       "x", plot_stream);
+  else
+    do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
+	       "x", plot_stream);
+    do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
+	       "x2", plot_stream);
+  endif
+  if (strcmpi (obj.yaxislocation, "right"))
+    do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
+	       "y2", plot_stream);
+    do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
+	       "y", plot_stream);
+  else
+    do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
+	       "y", plot_stream);
+    do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
+	       "y2", plot_stream);
+  endif
   do_tics_1 (obj.ztickmode, obj.ztick, obj.zticklabelmode, obj.zticklabel,
 	     "z", plot_stream);
 endfunction
 
 function do_tics_1 (ticmode, tics, labelmode, labels, ax, plot_stream)
   if (strcmpi (ticmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\n", ax);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-08-10  Peter A. Gustafson  <petegus@umich.edu>
+
+	* graphics.h, graphics.cc (axes::axes_properties): New properties,
+	xaxislocation and yaxislocation.
+
 2007-08-10  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.cc, graphics.h (patch): New class.
 	(axes::axes_properties): New properties, clim and climmode.
 	(surface::surface_properties::surface_properties): Handle patch.
 	(F__go_patch__): New function.
 
 2007-07-30  John W. Eaton  <jwe@octave.org>
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -972,16 +972,18 @@ axes::axes_properties::axes_properties (
     yticklabelmode ("auto"),
     zticklabelmode ("auto"),
     xscale ("linear"),
     yscale ("linear"),
     zscale ("linear"),
     xdir ("normal"),
     ydir ("normal"),
     zdir ("normal"),
+    xaxislocation ("bottom"),
+    yaxislocation ("left"),
     view (),
     visible ("on"),
     nextplot ("replace"),
     outerposition ()
 {
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
   xlim = tlim;
@@ -1169,16 +1171,20 @@ axes::axes_properties::set (const proper
   else if (name.compare ("zscale"))
     zscale = val;
   else if (name.compare ("xdir"))
     xdir = val;
   else if (name.compare ("ydir"))
     ydir = val;
   else if (name.compare ("zdir"))
     zdir = val;
+  else if (name.compare ("xaxislocation"))
+    xaxislocation = val;
+  else if (name.compare ("yaxislocation"))
+    yaxislocation = val;
   else if (name.compare ("view"))
     view = val;
   else if (name.compare ("visible"))
     visible = val;
   else if (name.compare ("nextplot"))
     nextplot = val;
   else if (name.compare ("outerposition"))
     outerposition = val;
@@ -1241,16 +1247,18 @@ axes::axes_properties::set_defaults (bas
   yticklabelmode = "auto";
   zticklabelmode = "auto";
   xscale = "linear";
   yscale = "linear";
   zscale = "linear";
   xdir = "normal";
   ydir = "normal";
   zdir = "normal";
+  xaxislocation = "left";
+  yaxislocation = "bottom";
 
   Matrix tview (1, 2, 0.0);
   tview(1) = 90;
   view = tview;
 
   visible = "on";
   nextplot = "replace";
 
@@ -1331,16 +1339,18 @@ axes::axes_properties::get (void) const
   m.assign ("yticklabelmode", yticklabelmode);
   m.assign ("zticklabelmode", zticklabelmode);
   m.assign ("xscale", xscale);
   m.assign ("yscale", yscale);
   m.assign ("zscale", zscale);
   m.assign ("xdir", xdir);
   m.assign ("ydir", ydir);
   m.assign ("zdir", zdir);
+  m.assign ("xaxislocation", xaxislocation);
+  m.assign ("yaxislocation", yaxislocation);
   m.assign ("view", view);
   m.assign ("visible", visible);
   m.assign ("nextplot", nextplot);
   m.assign ("outerposition", outerposition);
 
   return m;
 }
 
@@ -1458,16 +1468,20 @@ axes::axes_properties::get (const proper
   else if (name.compare ("zscale"))
     retval = zscale;
   else if (name.compare ("xdir"))
     retval = xdir;
   else if (name.compare ("ydir"))
     retval = ydir;
   else if (name.compare ("zdir"))
     retval = zdir;
+  else if (name.compare ("xaxislocation"))
+    retval = xaxislocation;
+  else if (name.compare ("yaxislocation"))
+    retval = yaxislocation;
   else if (name.compare ("view"))
     retval = view;
   else if (name.compare ("visible"))
     retval = visible;
   else if (name.compare ("nextplot"))
     retval = nextplot;
   else if (name.compare ("outerposition"))
     retval = outerposition;
@@ -1561,16 +1575,18 @@ property_list::pval_map_type axes::axes_
   m["yticklabelmode"] = "auto";
   m["zticklabelmode"] = "auto";
   m["xscale"] = "linear";
   m["yscale"] = "linear";
   m["zscale"] = "linear";
   m["xdir"] = "normal";
   m["ydir"] = "normal";
   m["zdir"] = "normal";
+  m["xaxislocation"] = "bottom";
+  m["yaxislocation"] = "left";
 
   Matrix tview (1, 2, 0.0);
   tview(1) = 90;
 
   m["view"] = tview;
 
   m["visible"] = "on";
   m["nextplot"] = "replace";
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -1206,16 +1206,18 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, yticklabelmode);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zticklabelmode);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xscale);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, yscale);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zscale);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xdir);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ydir);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zdir);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, xaxislocation);
+    OCTAVE_GRAPHICS_PROPERTY (octave_value, yaxislocation);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, view);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, nextplot);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, outerposition);
 
     static std::string go_name;
   };
 
