# HG changeset patch
# User jwe
# Date 1040857623 0
#      Wed Dec 25 23:07:03 2002 +0000
# Node ID 8627d992beb86dce585c48c14017235d41c566a0
# Parent  90db7796adc2e2c987302a99236bd4cd36f4ce16
[project @ 2002-12-25 23:07:03 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,25 @@
 2002-12-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (function_end): If parsing a nested function, set
+	lexer_flags.parsing_nested_function to -1.
+	(frob_function): If lexer_flags.parsing_nested_function is
+	negative, set it to zero.
+	* lex.h (lexical_feedback::parsing_nested_function): Now int.
+	Change uses as needed.
+
+	* lex.l (NESTED_FUNCTION_BEGIN): Rename from NESTED_FUNCTION_START.
+	Now an exclusive start state.
+	(NESTED_FUNCTION_END): New exclusive start state.
+	(is_keyword): When matching a new function keyword in a nested
+	function context, explicitly return END and set start state to
+	NESTED_FUNCTION_END.
+	(.): Accept EOF here too.
+
 	* variables.cc (link_to_builtin_or_function): Maybe prepend parent
 	function name symbol name.
 
 	* parse.y (parent_function_name): New variable.
 	(fcn_name): New non-terminal.
 	(function2): Use it.
 	(parsed_fcn_name): Fold into fcn_name.
 	(function_end): Don't call check_for_garbage_after_fcn_def.
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -181,18 +181,21 @@ public:
   // TRUE means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
   // TRUE means that we've already seen the name of this function.
   // Should only matter if defining_func is also TRUE.
   bool parsed_function_name;
 
-  // TRUE means that we're parsing a nested function definition.
-  bool parsing_nested_function;
+  // Are we parsing a nested function?
+  //   1 ==> Yes.
+  //   0 ==> No.
+  //  -1 ==> Yes, but it is the last one because we have seen EOF.
+  int parsing_nested_function;
 
   // TRUE means we've seen something that means we must be past the
   // range part of a plot command.
   bool past_plot_range;
 
   // TRUE means we're working on a plot command.
   bool plotting;
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -17,17 +17,19 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 %s COMMAND_START
 %s MATRIX_START
-%s NESTED_FUNCTION_START
+
+%x NESTED_FUNCTION_END
+%x NESTED_FUNCTION_BEGIN
 
 %{
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
@@ -236,18 +238,25 @@ SNLCMT	({SNL}|{COMMENT})
 NOT	((\~)|(\!))
 POW     ((\*\*)|(\^))
 EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
-<NESTED_FUNCTION_START>{} {
+<NESTED_FUNCTION_END>. {
+    BEGIN NESTED_FUNCTION_BEGIN;
+    unput (yytext[0]);
+    return ';';
+  }
+
+<NESTED_FUNCTION_BEGIN>. {
     BEGIN 0;
+    unput (yytext[0]);
     prep_for_nested_function ();
     return FCN;
   }
 
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
@@ -776,25 +785,30 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     return '}';
   }
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
-    current_input_column++;
-
-    // EOF can't happen here (we catch it above).
-
-    error ("invalid character `%s' (ASCII %d) near line %d, column %d",
-	   undo_string_escape (yytext[0]), static_cast<int> (yytext[0]),
-	   input_line_number, current_input_column);
-
-    return LEXICAL_ERROR;
+    // EOF happens here if we are parsing nested functions.
+
+    if (yytext[0] != EOF)
+      {
+	current_input_column++;
+
+	error ("invalid character `%s' (ASCII %d) near line %d, column %d",
+	       undo_string_escape (yytext[0]), static_cast<int> (yytext[0]),
+	       input_line_number, current_input_column);
+
+	return LEXICAL_ERROR;
+      }
+    else
+      TOK_RETURN (END_OF_INPUT);
   }
 
 %%
 
 // GAG.
 //
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
@@ -1078,18 +1092,20 @@ prep_for_function (void)
 
   if (! (reading_fcn_file || reading_script_file))
     input_line_number = 1;
 }
 
 static void
 prep_for_nested_function (void)
 {
-  lexer_flags.parsing_nested_function = true;
+  lexer_flags.parsing_nested_function = 1;
   prep_for_function ();
+  // We're still only expecting one end token for this set of functions.
+  end_tokens_expected--;
   yylval.tok_val = new token (input_line_number, current_input_column);
   token_stack.push (yylval.tok_val);
 }
 
 // Handle keywords.  Return -1 if the keyword should be ignored.
 
 static int
 is_keyword (const std::string& s)
@@ -1241,25 +1257,29 @@ is_keyword (const std::string& s)
 	  break;
 
 	case function_kw:
 	  {
 	    if (lexer_flags.defining_func)
 	      {
 		if (reading_fcn_file)
 		  {
-
 		    if (lexer_flags.parsing_nested_function)
 		      {
-			BEGIN NESTED_FUNCTION_START;
+			BEGIN NESTED_FUNCTION_END;
+
 			yylval.tok_val = new token (token::function_end, l, c);
+			token_stack.push (yylval.tok_val);
+
+			return END;
 		      }
 		    else
 		      {
 			prep_for_nested_function ();
+
 			return FCN;
 		      }
 		  }
 		else
 		  {
 		    error ("nested functions not implemented in this context");
 
 		    if ((reading_fcn_file || reading_script_file)
@@ -2614,17 +2634,17 @@ lexical_feedback::init (void)
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   beginning_of_function = false;
   defining_func = false;
   parsed_function_name = false;
-  parsing_nested_function = false;
+  parsing_nested_function = 0;
 
   // Not parsing a function return or parameter list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1289,17 +1289,18 @@ function4	: opt_sep opt_list function_en
 
 function_end	: END
 		  {
 		    if (! end_token_ok ($1, token::function_end))
 		      ABORT_PARSE;
 		  }
 		| END_OF_INPUT
 		  {
-		    lexer_flags.parsing_nested_function = false;
+		    if (lexer_flags.parsing_nested_function)
+		      lexer_flags.parsing_nested_function = -1;
 
 		    if (! (reading_fcn_file || reading_script_file
 			   || get_input_from_eval_string))
 		      YYABORT;
 		  }
 		;
 
 // ========
@@ -2590,16 +2591,19 @@ frob_function (tree_identifier *id, octa
     panic_impossible ();
 
   id->define (fcn, symbol_record::USER_FUNCTION);
 
   id->document (help_buf);
 
   help_buf.resize (0);
 
+  if (lexer_flags.parsing_nested_function < 0)
+    lexer_flags.parsing_nested_function = 0;
+  
   return fcn;
 }
 
 // Finish defining a function.
 
 static octave_user_function *
 finish_function (tree_identifier *id, octave_user_function *fcn,
 		 octave_comment_list *lc)
