# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1287622157 14400
#      Wed Oct 20 20:49:17 2010 -0400
# Node ID a44f979a35ce4a5bf6c8eee4f19f744a398455e3
# Parent  d3eaaa7c6762e397941175bb6257fe6e20233e54
style fixes for some .m files

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2010-10-20  John W. Eaton  <jwe@octave.org>
+
+	* io/strread.m, optimization/sqp.m, plot/daspect.m,
+	plot/pbaspect.m, plot/gnuplot_drawnow.m, plot/isocolors.m,
+	plot/isonormals.m, plot/legend.m, plot/print.m,
+	plot/private/__interp_cube__.m, plot/__fltk_print__.m,
+	plot/__gnuplot_print__.m, plot/__print_parse_opts__.m,
+	statistics/base/quantile.m: Style fixes.
+
 2010-10-19  John W. Eaton  <jwe@octave.org>
 
 	* strings/module.mk (strings_FCN_FILES): Include
 	strings/untabify.m in the list.
 	* strings/untabify.m: Escape { and } characters in docstring.
 
 2010-10-19  Ben Abbott <bpabbott@mac.com>
 
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -187,17 +187,17 @@ function varargout = strread (str, forma
   num_lines = ceil (num_words / nspecif);
   
   ## For each specifier
   k = 1;
   for m = 1:nspecif
     data = words (m:nspecif:end);
 
     ## Map to format
-    switch specif (m, :)
+    switch (specif(m,:))
       case "%s"
         data (end+1:num_lines) = {""};
         varargout {k} = data';
         k++;
       case {"%d", "%f"}
         data = str2double (data);
         data (end+1:num_lines) = numeric_fill_value;
         varargout {k} = data.';
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -229,23 +229,23 @@ function [x, obj, info, iter, nf, lambda
   endif
   if (rows (x) == 1)
     x = x';
   endif
 
   obj_grd = @fd_obj_grd;
   have_hess = 0;
   if (iscell (objf))
-    switch length (objf)
-     case {1}
+    switch (numel (objf))
+     case 1
        obj_fun = objf{1};
-     case {2}
+     case 2
        obj_fun = objf{1};
        obj_grd = objf{2};
-     case {3}
+     case 3
        obj_fun = objf{1};
        obj_grd = objf{2};
        obj_hess = objf{3};
        have_hess = 1;
      otherwise
       error ("sqp: invalid objective function specification");
     endswitch
   else
@@ -253,20 +253,20 @@ function [x, obj, info, iter, nf, lambda
   endif
   __sqp_obj_fun__ = obj_fun;
 
   ce_fun = @empty_cf;
   ce_grd = @empty_jac;
   if (nargin > 2)
     ce_grd = @fd_ce_jac;
     if (iscell (cef))
-      switch length (cef)
-       case {1}
+      switch (numel (cef))
+       case 1
          ce_fun = cef{1};
-       case {2}
+       case 2
          ce_fun = cef{1};
          ce_grd = cef{2};
        otherwise
          error ("sqp: invalid equality constraint function specification");
       endswitch
     elseif (! isempty (cef))
       ce_fun = cef;   # No cell array, only constraint equality function set
     endif
diff --git a/scripts/plot/__fltk_print__.m b/scripts/plot/__fltk_print__.m
--- a/scripts/plot/__fltk_print__.m
+++ b/scripts/plot/__fltk_print__.m
@@ -32,17 +32,17 @@ function opts = __fltk_print__ (opts)
     ## fig2dev is prefered for conversion to emf
     fig2dev_devices = {"pstex", "mf", "emf"};
   else
     fig2dev_devices = {"pstex", "mf"};
   endif
 
   gl2ps_device = {};
   pipeline = {};
-  switch lower (opts.devopt)
+  switch (lower (opts.devopt))
   case {"eps", "eps2", "epsc", "epsc2"}
     ## format GL2PS_EPS
     gl2ps_device = {"eps"};
     ## FIXME - use epstool to tighten bbox and provide preview.
     pipeline = {opts.epstool_cmd(opts, "-", opts.name)};
   case {"epslatex", "pslatex", "pdflatex", "epslatexstandalone", ...
         "pslatexstandalone", "pdflatexstandalone"}
     ## format GL2PS_TEX
@@ -65,21 +65,21 @@ function opts = __fltk_print__ (opts)
     gl2ps_device{2} = "tex";
     if (dos_shell)
       pipeline = {sprintf("copy con %s.%s", name, suffix)};
       pipeline{2} = sprintf ("copy con %s.tex", name);
     else
       pipeline = {sprintf("cat > %s.%s", name, suffix)};
       pipeline{2} = sprintf ("cat > %s.tex", name);
     endif
-  case {"tikz"}
+  case "tikz"
     ## format GL2PS_PGF
     gl2ps_device = {"pgf"};
     pipeline = {sprintf("cat > %s", opts.name)};
-  case {"svg"}
+  case "svg"
     ## format GL2PS_SVG
     gl2ps_device = {"svg"};
     pipeline = {sprintf("cat > %s", opts.name)};
   case fig2dev_devices
     cmd_pstoedit = opts.pstoedit_cmd (opts, "fig");
     cmd_fig2dev = opts.fig2dev_cmd (opts, opts.devopt);
     if (strcmp (opts.devopt, "pstex"))
       [~, ~, ext] = fileparts (opts.name);
@@ -94,17 +94,17 @@ function opts = __fltk_print__ (opts)
       gl2ps_device{2} = "eps";
       pipeline{2} = sprintf ("%s | %s > %s", cmd_pstoedit,
                              cmd_fig2dev, strrep(opts.name, ".ps", ".tex"));
     else
       cmd = sprintf ("%s | %s > %s", cmd_pstoedit, cmd_fig2dev, opts.name);
       gl2ps_device = {"eps"};
       pipeline = {cmd};
     endif
-  case {"aifm"}
+  case "aifm"
     cmd = opts.pstoedit_cmd (opts, "ps2ai");
     gl2ps_device = {"eps"};
     pipeline = {sprintf("%s > %s", cmd, opts.name)};
   case {"dxf", "emf", "fig", "hpgl"}
     cmd = opts.pstoedit_cmd (opts);
     gl2ps_device = {"eps"};
     pipeline = {sprintf("%s > %s", cmd, opts.name)};
   case {"corel", "gif"}
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -43,17 +43,17 @@ function opts = __gnuplot_print__ (opts)
     endif
   endif
   ## The axes-label and tick-label spacing is determined by
   ## the font spec given in "set terminal ..."
   gp_opts = font_spec (opts);
 
   pipeline = "";
 
-  switch lower (opts.devopt)
+  switch (lower (opts.devopt))
   case {"eps", "eps2", "epsc", "epsc2"}
     if (any (strcmp (opts.devopt, {"eps", "epsc"})))
       gp_opts = sprintf ("%s level1", gp_opts);
     endif
     if (opts.tight_flag || ! isempty (opts.preview))
       tmp_file = strcat (tmpnam (), ".eps");
       eps_drawnow (opts, tmp_file, gp_opts);
       if (dos_shell)
@@ -83,25 +83,25 @@ function opts = __gnuplot_print__ (opts)
     if (__gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
       suffix = "tex";
     else
       %% Gnuplot 4.0 wants a ".eps" suffix.
       suffix = "eps";
     endif
     local_drawnow (sprintf ("%s %s", term, gp_opts),
                    strcat (name, ".", suffix), opts)
-  case {"tikz"}
+  case "tikz"
     if (__gnuplot_has_terminal__ ("tikz"))
       local_drawnow (sprintf ("lua tikz %s", gp_opts), opts.name, opts);
     else
       error (sprintf ("print:no%soutput", opts.devopt),
              "print.m: '%s' output is not available for Gnuplot-%s.",
              upper (opts.devopt), __gnuplot_version__ ())
     endif
-  case {"svg"}
+  case "svg"
     local_drawnow (sprintf ("svg dynamic %s", gp_opts), opts.name, opts);
   case {"aifm", "corel", "eepic", "emf", "fig"}
     local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
   case {"pdfcairo", "pngcairo"}
     if (__gnuplot_has_terminal__ (opts.devopt))
       local_drawnow (sprintf ("%s %s", opts.devopt, gp_opts), opts.name, opts);
     else
       error (sprintf ("print:no%soutput", opts.devopt),
@@ -189,18 +189,18 @@ function local_drawnow (term, file, opts
   endif
 endfunction
 
 function f = font_spec (opts, varargin)
   for n = 1:2:numel(varargin)
     opts.(varargin{n}) = varargin{n+1};
   endfor
   f = "";
-  switch opts.devopt
-  case {"cgm"}
+  switch (opts.devopt)
+  case "cgm"
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
   case {"eps", "eps2", "epsc", "epsc2"}
@@ -210,27 +210,27 @@ function f = font_spec (opts, varargin)
     ## spacing for the requested fontsize.
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, 2 * opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", 2 * opts.fontsize);
     endif
-  case {"svg"}
+  case "svg"
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       fontsize = round (opts.fontsize * 0.75);
       f = sprintf ("fname ""%s"" fsize %d", opts.font, fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("fname ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       fontsize = round (opts.fontsize * 0.75);
       f = sprintf ("%s fsize %d", f, fontsize);
     endif
-  case {"pdf"}
+  case "pdf"
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("fsize %d", f, opts.fontsize);
     endif
   case {"pdfcairo", "pngcairo"}
@@ -240,61 +240,61 @@ function f = font_spec (opts, varargin)
   case {"epslatex", "epslatexstandalone"}
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s,%d""", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
-  case {"pslatex"}
+  case "pslatex"
     if (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
   case {"gif", "jpeg", "png"}
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font ""%s ,%d""", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font ""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("font ""%d""", opts.fontsize);
     endif
-  case {"emf"}
+  case "emf"
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("""%s"" %d", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("""%s""", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
-  case {"canvas"}
+  case "canvas"
     if (! isempty (opts.fontsize))
       f = sprintf ("fsize %d", opts.fontsize);
     endif
   case {"aifm", "corel"}
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("%s %d", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("%s", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("%d", opts.fontsize);
     endif
-  case {"fig"}
+  case "fig"
     if (! isempty (opts.font) && ! isempty (opts.fontsize))
       f = sprintf ("font %s fontsize %d", opts.font, opts.fontsize);
     elseif (! isempty (opts.font))
       f = sprintf ("font %s", opts.font);
     elseif (! isempty (opts.fontsize))
       f = sprintf ("fontsize %d", opts.fontsize);
     endif
   endswitch
 endfunction
 
 function [h, fontsize] = get_figure_text_objs (opts)
   h = findall (opts.figure, "-property", "fontsize");
   fontsize = get (h, "fontsize");
-  switch numel (fontsize)
+  switch (numel (fontsize))
   case 0
     fontsize = {};
   case 1
     fontsize = {fontsize};
   endswitch
 endfunction
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -537,38 +537,38 @@ function [papersize, paperposition] = gs
     paperposition = paperposition([2,1,4,3]);
   endif
 
   if ((! strcmp (papertype, "<custom>")) && (strcmp (paperorientation, "portrait")))
     ## For portrait use the ghostscript name
     papersize = papertype;
     papersize(papersize=="-") = "";
     papersize = strrep (papersize, "us", "");
-    switch papersize
+    switch (papersize)
     case "a"
       papersize = "letter";
     case {"b", "tabloid"}
       papersize = "11x17";
     case {"c", "d", "e"}
       papersize = strcat ("arch", papersize);
     endswitch
     if (strncmp (papersize, "arch", 4))
       papersize(end) = upper (papersize(end));
     endif
   endif
 
 endfunction
 
 function value = convert2points (value, units)
-    switch units
-    case {"inches"}
+    switch (units)
+    case "inches"
       value = value * 72;
-    case {"centimeters"}
+    case "centimeters"
       value = value * 72 / 25.4;
-    case {"normalized"}
+    case "normalized"
       error ("print:customnormalized",
              "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined.")
     endswitch
 endfunction
 
 function device_list = gs_device_list ();
   ## Graphics formats/languages, not priners.
   device_list = {"bmp16"; "bmp16m"; "bmp256"; "bmp32b"; "bmpgray"; ...
diff --git a/scripts/plot/daspect.m b/scripts/plot/daspect.m
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -45,31 +45,31 @@ function varargout = daspect (varargin)
       hax = varargin{1};
       varargin = varargin(2:end);
     endif
   endif
   if (numel (varargin) > 0)
     if (numel (varargin) == 1)
       if (ischar (varargin{1})
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
-        switch varargin{1}
-        case {"mode"}
+        switch (varargin{1})
+        case "mode"
           if (nargout < 2)
             varargout{1} = get (hax, "dataaspectratiomode");
             return
           else
             error ("daspect: only one output is allowed.")
           endif
-        case {"manual"}
+        case "manual"
           set (hax, "dataaspectratiomode", "manual");
-        case {"auto"}
+        case "auto"
           set (hax, "dataaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1})
-              && any (numel (varargin{1}) == [2 3]))
+              && any (numel (varargin{1}) == [2, 3]))
         set (hax, "dataaspectratio", varargin{1})
       else
         error ("daspect: invalid input.")
       endif
     elseif (numel (varargin) > 1)
       error ("daspect: too many inputs.")
     endif
   elseif (nargout == 0)
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -201,17 +201,17 @@ function enhanced = gnuplot_set_term (pl
                                  "pdfcairo", "postscript", "png", "pngcairo", ...
                                  "pstex", "pslatex", "svg", "tikz"};
           if (__gnuplot_has_feature__ ("x11_figure_position"))
             terminals_with_size{end+1} = "x11";
           endif
           if (__gnuplot_has_feature__ ("wxt_figure_size"))
             terminals_with_size{end+1} = "wxt";
           endif
-          switch term
+          switch (term)
           case terminals_with_size
             size_str = sprintf ("size %g,%g", gnuplot_size);
           case "tikz"
             size_str = sprintf ("size %gin,%gin", gnuplot_size);
           case "dumb"
             new_stream = 1;
             if (~isempty (getenv ("COLUMNS")) && ~isempty (getenv ("LINES")))
               ## Let dumb use full text screen size (minus prompt lines).
diff --git a/scripts/plot/isocolors.m b/scripts/plot/isocolors.m
--- a/scripts/plot/isocolors.m
+++ b/scripts/plot/isocolors.m
@@ -95,17 +95,17 @@
 ## @seealso{isosurface, isonormals, isocaps}
 ##
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
 function varargout = isocolors(varargin)
   calc_rgb = false;
-  switch nargin
+  switch (nargin)
     case 2
       c = varargin{1};
       vp = varargin{2};
       x = 1:size (c, 2);
       y = 1:size (c, 1);
       z = 1:size (c, 3);
     case 4
       calc_rgb = true;
@@ -136,27 +136,27 @@ function varargout = isocolors(varargin)
   endswitch
   if (ismatrix (vp) && size (vp,2) == 3)
     pa = [];
     v = vp;
   elseif ( ishandle (vp) )
     pa = vp;
     v = get (pa, "Vertices");
   else
-    error("isocolors: last argument is not a vertex list or patch handle");
+    error ("isocolors: last argument is not a vertex list or patch handle");
   endif
-  if ( calc_rgb )
+  if (calc_rgb)
     new_col = zeros (size (v, 1), 3);
-    new_col(:, 1) = __interp_cube__ (x, y, z, R, v, "values" );
-    new_col(:, 2) = __interp_cube__ (x, y, z, G, v, "values" );
-    new_col(:, 3) = __interp_cube__ (x, y, z, B, v, "values" );
+    new_col(:,1) = __interp_cube__ (x, y, z, R, v, "values" );
+    new_col(:,2) = __interp_cube__ (x, y, z, G, v, "values" );
+    new_col(:,3) = __interp_cube__ (x, y, z, B, v, "values" );
   else
     new_col = __interp_cube__ (x, y, z, c, v, "values" );
   endif
-  switch nargout
+  switch (nargout)
     case 0
       if (!isempty (pa))
         set (pa, "FaceVertexCData", new_col);
       endif
     case 1
       varargout = {new_col};
     otherwise
       print_usage ();
diff --git a/scripts/plot/isonormals.m b/scripts/plot/isonormals.m
--- a/scripts/plot/isonormals.m
+++ b/scripts/plot/isonormals.m
@@ -100,17 +100,17 @@ function varargout = isonormals(varargin
   if (ischar (varargin{nargin}))
     na = nargin-1;
     if (strcmp (lower (varargin{nargin}), "negate"))
       negate = true;
     else
       error ("isonormals: Unknown option '%s'", varargin{nargin});
     endif
   endif
-  switch na
+  switch (na)
     case 2
       c = varargin{1};
       vp = varargin{2};
       x = 1:size (c, 2);
       y = 1:size (c, 1);
       z = 1:size (c, 3);
     case 5
       x = varargin{1};
@@ -130,17 +130,17 @@ function varargout = isonormals(varargin
   else
     error ("isonormals: Last argument is not a vertex list or a patch handle");
   endif
   if (negate)
     normals = -__interp_cube__ (x, y, z, c, v, "normals");
   else
     normals = __interp_cube__ (x, y, z, c, v, "normals");
   endif
-  switch nargout
+  switch (nargout)
     case 0
       if (!isempty (pa))
         set (pa, "VertexNormals", normals);
       endif
     case 1
       varargout = {normals};
     otherwise
       print_usage ();
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -507,17 +507,17 @@ function [hlegend2, hobjects2, hplot2, t
         yoffset = ystep / 2;
 
         ## Place the legend in the desired position
         if (strcmp (orientation, "vertical"))
           lpos = [0, 0, num2 * xstep, num1 * ystep];
         else
           lpos = [0, 0, num1 * xstep, num2 * ystep];
         endif
-        switch(position)
+        switch (position)
           case "north"
             if (outside)
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_outpos(2) + ca_outpos(4) - lpos(4), lpos(3), lpos(4)];
 
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3), ca_pos(4) - lpos(4)];
               new_outpos = [ca_outpos(1), ca_outpos(2), ca_outpos(3), ...
                             ca_outpos(4) - lpos(4)];
@@ -616,17 +616,17 @@ function [hlegend2, hobjects2, hplot2, t
           set (hlegend, "units", units);
         end_unwind_protect
 
         ## Now write the line segments and place the text objects correctly
         xk = 0;
         yk = 0;
         for k = 1 : numel (hplots)
           hobjects = [hobjects, texthandle (k)];
-          switch get (hplots(k), "type")
+          switch (get (hplots(k), "type"))
           case "line"
             color = get (hplots(k), "color");
             style = get (hplots(k), "linestyle");
             if (! strcmp (style, "none"))
               l1 = line ("xdata", ([xoffset, xoffset + linelength] + xk * xstep) / lpos(3),
                          "ydata", [1, 1] .* (lpos(4) - yoffset - yk * ystep) / lpos(4), 
                          "color", color, "linestyle", style);
               hobjects = [hobjects, l1];
diff --git a/scripts/plot/pbaspect.m b/scripts/plot/pbaspect.m
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -45,31 +45,31 @@ function varargout = pbaspect (varargin)
       hax = varargin{1};
       varargin = varargin(2:end);
     endif
   endif
   if (numel (varargin) > 0)
     if (numel (varargin) == 1)
       if (ischar (varargin{1})
           && any (strcmpi (varargin{1}, {"mode", "manual", "auto"})))
-        switch varargin{1}
-        case {"mode"}
+        switch (varargin{1})
+        case "mode"
           if (nargout < 2)
             varargout{1} = get (hax, "plotboxaspectratiomode");
             return
           else
             error ("pbaspect: only one output is allowed.")
           endif
-        case {"manual"}
+        case "manual"
           set (hax, "plotboxaspectratiomode", "manual");
-        case {"auto"}
+        case "auto"
           set (hax, "plotboxaspectratiomode", "auto");
         endswitch
       elseif (isreal (varargin{1})
-              && any (numel (varargin{1}) == [2 3]))
+              && any (numel (varargin{1}) == [2, 3]))
         set (hax, "plotboxaspectratio", varargin{1})
       else
         error ("pbaspect: invalid input.")
       endif
     elseif (numel (varargin) > 1)
       error ("pbaspect: too many inputs.")
     endif
   elseif (nargout == 0)
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -358,17 +358,17 @@ function print (varargin)
         else
           fontsize = opts.fontsize;
         endif
         set (h, "fontsize", fontsize)
       endif
     endif
 
     ## call the backend print script
-    switch get (opts.figure, "__backend__")
+    switch (get (opts.figure, "__backend__"))
     case "gnuplot"
       opts = __gnuplot_print__ (opts);
     otherwise
       opts = __fltk_print__ (opts);
     endswitch
 
   unwind_protect_cleanup
     ## restore modified properties
diff --git a/scripts/plot/private/__interp_cube__.m b/scripts/plot/private/__interp_cube__.m
--- a/scripts/plot/private/__interp_cube__.m
+++ b/scripts/plot/private/__interp_cube__.m
@@ -45,17 +45,17 @@ function [Vxyz, idx, frac] = __interp_cu
   if (!ischar (req))
    error ("__interp_cube__: Invalid request parameter use 'values', 'normals' or 'normals8'");
   endif
   if (isempty (v))
     Vxyz = idx = frac = [];
     return
   endif
 
-  switch req
+  switch (req)
     case "values"
       [Vxyz, idx, frac] = interp_cube_trilin (x, y, z, val, v);
     case "normals"
       [idx, frac] = cube_idx (x, y, z, v);
 
       dx = x(2:end) - x(1:end-1);
       dy = y(2:end) - y(1:end-1);
       dz = z(2:end) - z(1:end-1);
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2008, 2009 Ben Abbott and Jaroslav Hajek
+n## Copyright (C) 2008, 2009 Ben Abbott and Jaroslav Hajek
 ## 
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -47,31 +47,34 @@
 ##
 ## @item Method 3: SAS definition: nearest even order statistic.
 ## @end enumerate
 ## 
 ## Continuous sample quantile methods 4 through 9, where p(k) is the linear
 ## interpolation function respecting each methods' representative cdf.
 ## 
 ## @enumerate 4
-## @item Method 4: p(k) = k / n. That is, linear interpolation of the empirical cdf.
+## @item Method 4: p(k) = k / n. That is, linear interpolation of the
+## empirical cdf.
 ##
-## @item Method 5: p(k) = (k - 0.5) / n. That is a piecewise linear function where 
-## the knots are the values midway through the steps of the empirical cdf. 
+## @item Method 5: p(k) = (k - 0.5) / n. That is a piecewise linear
+## function where the knots are the values midway through the steps of
+## the empirical cdf.
 ##
 ## @item Method 6: p(k) = k / (n + 1).
 ##
 ## @item Method 7: p(k) = (k - 1) / (n - 1).
 ##
-## @item Method 8: p(k) = (k - 1/3) / (n + 1/3).  The resulting quantile estimates 
-## are approximately median-unbiased regardless of the distribution of @var{x}.
+## @item Method 8: p(k) = (k - 1/3) / (n + 1/3).  The resulting quantile
+## estimates are approximately median-unbiased regardless of the
+## distribution of @var{x}.
 ##
-## @item Method 9: p(k) = (k - 3/8) / (n + 1/4).  The resulting quantile estimates 
-## are approximately unbiased for the expected order statistics if @var{x} is 
-## normally distributed.
+## @item Method 9: p(k) = (k - 3/8) / (n + 1/4).  The resulting quantile
+## estimates are approximately unbiased for the expected order
+## statistics if @var{x} is normally distributed.
 ## @end enumerate
 ## 
 ## Hyndman and Fan (1996) recommend method 8.  Maxima, S, and R
 ## (versions prior to 2.0.0) use 7 as their default.  Minitab and SPSS
 ## use method 6.  @sc{matlab} uses method 5.
 ## 
 ## References:
 ## 
@@ -318,19 +321,19 @@ function inv = __quantile__ (x, p, metho
     if (mx == 1)
       inv(k,:) = repmat (x, n, 1);
       return
     endif
 
     ## The column-distribution indices.
     pcd = kron (ones (n, 1), mx*(0:nx-1));
     mm = kron (ones (n, 1), m);
-    switch method
+    switch (method)
       case {1, 2, 3}
-        switch method
+        switch (method)
           case 1
             p = max (ceil (kron (p, m)), 1);
             inv(k,:) = x(p + pcd);
 
           case 2
             p = kron (p, m);
             p_lr = max (ceil (p), 1);
             p_rl = min (floor (p + 1), mm);
@@ -340,17 +343,17 @@ function inv = __quantile__ (x, p, metho
            ## Used by SAS, method PCTLDEF=2.
            ## http://support.sas.com/onlinedoc/913/getDoc/en/statug.hlp/stdize_sect14.htm
             t = max (kron (p, m), 1);
             t = roundb (t);
             inv(k,:) = x(t + pcd);
         endswitch
 
       otherwise
-        switch method
+        switch (method)
           case 4
             p = kron (p, m);
 
           case 5
             ## Used by Matlab.
             p = kron (p, m) + 0.5;
 
           case 6
