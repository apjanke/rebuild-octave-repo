# HG changeset patch
# User Rik <rik@octave.org>
# Date 1372907072 25200
#      Wed Jul 03 20:04:32 2013 -0700
# Node ID 8fbc09eded8c4e49e716adba3400a488c098fd02
# Parent  68fc671a933906faa80ca7c2fea6d858111f0c7e
Complete removal of warning about assigning to ancient built-in variables.

* libinterp/parse-tree/pt-assign.cc(tree_simple_assignment,
tree_multi_assignment): Remove first_execution variable from constructor.

* libinterp/parse-tree/pt-assign.cc(rvalue1): Remove setting first_execution.

* libinterp/parse-tree/pt-assign.cc(rvalue): Remove setting first_execution.
Remove useless loop over lhs for warning about assigning to built-in vars.

* libinterp/parse-tree/pt-assign.h(tree_simple_assignment,
tree_multi_assignment): Remove first_execution variable from constructors
and from private class variable list.

diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -43,18 +43,17 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 #include "variables.h"
 
 // Simple assignment expressions.
 
 tree_simple_assignment::tree_simple_assignment
   (tree_expression *le, tree_expression *re,
    bool plhs, int l, int c, octave_value::assign_op t)
-    : tree_expression (l, c), lhs (le), rhs (re), preserve (plhs), etype (t),
-      first_execution (true) { }
+    : tree_expression (l, c), lhs (le), rhs (re), preserve (plhs), etype (t) { }
 
 tree_simple_assignment::~tree_simple_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
 }
@@ -140,18 +139,16 @@ tree_simple_assignment::rvalue1 (int)
                                                      lhs->name ());
                         }
                     }
                 }
             }
         }
     }
 
-  first_execution = false;
-
   return retval;
 }
 
 std::string
 tree_simple_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
@@ -176,18 +173,17 @@ tree_simple_assignment::accept (tree_wal
   tw.visit_simple_assignment (*this);
 }
 
 // Multi-valued assignment expressions.
 
 tree_multi_assignment::tree_multi_assignment
   (tree_argument_list *lst, tree_expression *r,
    bool plhs, int l, int c)
-    : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs),
-      first_execution (true) { }
+    : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs) { }
 
 tree_multi_assignment::~tree_multi_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
 }
@@ -211,24 +207,16 @@ tree_multi_assignment::rvalue1 (int narg
 octave_value_list
 tree_multi_assignment::rvalue (int)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
-  if (first_execution)
-    {
-      for (tree_argument_list::iterator p = lhs->begin ();
-           p != lhs->end ();
-           p++)
-        tree_expression *lhs_expr = *p;
-    }
-
   if (rhs)
     {
       std::list<octave_lvalue> lvalue_list = lhs->lvalue_list ();
 
       if (error_state)
         return retval;
 
       octave_idx_type n_out = 0;
@@ -354,18 +342,16 @@ tree_multi_assignment::rvalue (int)
 
         }
 
       // Concatenate return values.
       retval = retval_list;
 
     }
 
-  first_execution = false;
-
   return retval;
 }
 
 /*
 %!function varargout = f ()
 %!  varargout{1} = nargout;
 %!endfunction
 %!
diff --git a/libinterp/parse-tree/pt-assign.h b/libinterp/parse-tree/pt-assign.h
--- a/libinterp/parse-tree/pt-assign.h
+++ b/libinterp/parse-tree/pt-assign.h
@@ -42,17 +42,17 @@ class octave_lvalue;
 class
 tree_simple_assignment : public tree_expression
 {
 public:
 
   tree_simple_assignment (bool plhs = false, int l = -1, int c = -1,
                           octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), ans_ass (),
-      etype (t), first_execution (true) { }
+      etype (t) { }
 
   tree_simple_assignment (tree_expression *le, tree_expression *re,
                           bool plhs = false, int l = -1, int c = -1,
                           octave_value::assign_op t = octave_value::op_asn_eq);
 
   ~tree_simple_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
@@ -95,36 +95,32 @@ private:
   bool preserve;
 
   // True if this is an assignment to the automatic variable ans.
   bool ans_ass;
 
   // The type of the expression.
   octave_value::assign_op etype;
 
-  // true only on first rvalue() call.
-  bool first_execution;
-
   // No copying!
 
   tree_simple_assignment (const tree_simple_assignment&);
 
   tree_simple_assignment& operator = (const tree_simple_assignment&);
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
 
   tree_multi_assignment (bool plhs = false, int l = -1, int c = -1)
-    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs),
-      first_execution (true) { }
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs) { }
 
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
                          bool plhs = false, int l = -1, int c = -1);
 
   ~tree_multi_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
 
@@ -155,19 +151,16 @@ private:
   tree_argument_list *lhs;
 
   // The right hand side of the assignment.
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
   bool preserve;
 
-  // true only on first rvalue() call.
-  bool first_execution;
-
   // No copying!
 
   tree_multi_assignment (const tree_multi_assignment&);
 
   tree_multi_assignment& operator = (const tree_multi_assignment&);
 };
 
 #endif
