# HG changeset patch
# User Rik <rik@octave.org>
# Date 1439828403 25200
#      Mon Aug 17 09:20:03 2015 -0700
# Node ID c6224b4e7774e94beb142e2c5e1e79e4b89e9c98
# Parent  ab2c5e84954a04ab260d4bb900b586a04c5fe843
maint: Rename instances of LS_ASCII to LS_TEXT for clarity.
Octave's default save format is '-text' which is confusingly referred to in the
code base as LS_ASCII (looks like '-ascii' mode).

* ls-oct-text.cc, ls-oct-text.h: Renamed from ls-oct-ascii.[cc|h].

* ls-oct-ascii.cc, ls-oct-ascii.h: Removed files.

* libinterp/corefcn/module.mk: Add ls-oct-text.cc, ls-oct-text.h to build
system.

* load-save.h (load_save_format_type): Change first value of enum from
LS_ASCII to LS_TEXT.

* load-save.cc: Rename instances of LS_ASCII to LS_TEXT.  Rename instances of
read_ascii_data to read_text_data.

* ov-base-diag.cc, ov-base-int.cc, ov-base-sparse.cc, ov-bool-mat.cc,
ov-bool.cc, ov-complex.cc, ov-cx-mat.cc ov-fcn-inline.cc, ov-float.cc,
ov-flt-complex.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-int16.cc,
ov-int32.cc, ov-int64.cc, ov-int8.cc, ov-perm.cc, ov-re-mat.cc, ov-scalar.cc,
ov-str-mat.cc, ov-uint16.cc, ov-uint32.cc, ov-uint64.cc, ov-uint8.cc:
Use '#include "ls-oct-text.h"' rather than ls-oct-ascii.h.

ov-cell.cc, ov-class.cc, ov-fcn-handle.cc, ov-lazy-idx.cc, ov-struct.cc:
Use '#include "ls-oct-text.h"' rather than ls-oct-ascii.h.
Rename save_ascii_data to save_text_data, read_ascii_data to read_text_data.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -72,17 +72,17 @@ along with Octave; see the file COPYING.
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 
 #include "ls-hdf5.h"
 #include "ls-mat-ascii.h"
 #include "ls-mat4.h"
 #include "ls-mat5.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 
 // Remove gnulib definitions, if any.
 #ifdef close
 #undef close
 #endif
 #ifdef open
 #undef open
@@ -265,17 +265,17 @@ get_file_format (std::istream& file, con
             {
               file.clear ();
               file.seekg (0, std::ios::beg);
 
               std::string name_val = extract_keyword (file, "name");
               std::string type_val = extract_keyword (file, "type");
 
               if (name_val.empty () != true && type_val.empty () != true)
-                retval = LS_ASCII;
+                retval = LS_TEXT;
               else
                 {
                   file.clear ();
                   file.seekg (0, std::ios::beg);
 
                   // FIXME: looks_like_mat_ascii_file does not check to see
                   // whether the file contains numbers.  It just skips comments
                   // and checks for the same number of words on each line.  We
@@ -358,18 +358,18 @@ do_load (std::istream& stream, const std
       bool global = false;
       octave_value tc;
 
       std::string name;
       std::string doc;
 
       switch (format.type)
         {
-        case LS_ASCII:
-          name = read_ascii_data (stream, orig_fname, global, tc, count);
+        case LS_TEXT:
+          name = read_text_data (stream, orig_fname, global, tc, count);
           break;
 
         case LS_BINARY:
           name = read_binary_data (stream, swap, flt_fmt, orig_fname,
                                    global, tc, doc);
           break;
 
         case LS_MAT_ASCII:
@@ -704,17 +704,17 @@ Force Octave to assume the file is in Oc
 #endif /* ! HAVE_HDF5 */
         }
       else if (argv[i] == "-import" || argv[i] == "-i")
         {
           warning ("load: -import ignored");
         }
       else if (argv[i] == "-text" || argv[i] == "-t")
         {
-          format = LS_ASCII;
+          format = LS_TEXT;
         }
       else
         break;
     }
 
   if (orig_fname == "")
     {
       if (i == argc)
@@ -923,18 +923,18 @@ glob_pattern_p (const std::string& patte
 
 static void
 do_save (std::ostream& os, const octave_value& tc,
          const std::string& name, const std::string& help,
          bool global, load_save_format fmt, bool save_as_floats)
 {
   switch (fmt.type)
     {
-    case LS_ASCII:
-      save_ascii_data (os, tc, name, global, 0);
+    case LS_TEXT:
+      save_text_data (os, tc, name, global, 0);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_ASCII:
       if (! save_mat_ascii_data (os, tc, fmt.opts & LS_MAT_ASCII_LONG ? 16 : 8,
@@ -1065,17 +1065,17 @@ parse_save_options (const string_vector 
           do_double = true;
         }
       else if (argv[i] == "-tabs")
         {
           do_tabs = true;
         }
       else if (argv[i] == "-text" || argv[i] == "-t")
         {
-          format = LS_ASCII;
+          format = LS_TEXT;
         }
       else if (argv[i] == "-binary" || argv[i] == "-b")
         {
           format = LS_BINARY;
         }
       else if (argv[i] == "-hdf5" || argv[i] == "-h")
         {
 #ifdef HAVE_HDF5
@@ -1224,17 +1224,17 @@ write_header (std::ostream& os, load_sav
         os.write (headertext, 128);
       }
 
       break;
 
 #ifdef HAVE_HDF5
     case LS_HDF5:
 #endif /* HAVE_HDF5 */
-    case LS_ASCII:
+    case LS_TEXT:
       {
         octave_localtime now;
 
         std::string comment_string = now.strftime (Vsave_header_format_string);
 
         if (! comment_string.empty ())
           {
 #ifdef HAVE_HDF5
@@ -1610,17 +1610,17 @@ the file @file{data} in Octave's binary 
   if (error_state)
     return retval;
 
   // Here is where we would get the default save format if it were
   // stored in a user preference variable.
 
   bool save_as_floats = false;
 
-  load_save_format format = LS_ASCII;
+  load_save_format format = LS_TEXT;
 
   bool append = false;
 
   bool use_zlib = false;
 
   // get default options
   parse_save_options (Vsave_default_options, format, append, save_as_floats,
                       use_zlib);
@@ -1635,17 +1635,17 @@ the file @file{data} in Octave's binary 
     return retval;
 
   if (i == argc)
     {
       print_usage ();
       return retval;
     }
 
-  if (save_as_floats && format == LS_ASCII)
+  if (save_as_floats && format == LS_TEXT)
     {
       error ("save: cannot specify both -ascii and -float-binary");
       return retval;
     }
 
   if (argv[i] == "-")
     {
       i++;
diff --git a/libinterp/corefcn/load-save.h b/libinterp/corefcn/load-save.h
--- a/libinterp/corefcn/load-save.h
+++ b/libinterp/corefcn/load-save.h
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 
 class octave_value;
 
 // FIXME: maybe MAT5 and MAT7 should be options to MAT_BINARY.
 // Similarly, save_as_floats may be an option for LS_BINARY, LS_HDF5 etc.
 enum load_save_format_type
 {
-  LS_ASCII,
+  LS_TEXT,
   LS_BINARY,
   LS_MAT_ASCII,
   LS_MAT_BINARY,
   LS_MAT5_BINARY,
   LS_MAT7_BINARY,
   LS_HDF5,
   LS_UNKNOWN
 };
diff --git a/libinterp/corefcn/ls-oct-ascii.cc b/libinterp/corefcn/ls-oct-text.cc
rename from libinterp/corefcn/ls-oct-ascii.cc
rename to libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-ascii.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -47,32 +47,32 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "ls-ascii-helper.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "pt-exp.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 
 // The number of decimal digits to use when writing ascii data.
 static int Vsave_precision = 16;
 
-// Functions for reading ascii data.
+// Functions for reading octave format text data.
 
 // Extract a KEYWORD and its value from stream IS, returning the
 // associated value in a new string.
 //
 // Input should look something like:
 //
 //  [%#][ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
@@ -219,27 +219,26 @@ extract_keyword (std::istream& is, const
 //  is
 //  # length: 1
 //  a
 //  # length: 6
 //  string
 //  # length: 5
 //  array
 //
-// FIXME: this format is fairly rigid, and doesn't allow for
-// arbitrary comments.  Someone should fix that. It does allow arbitrary
-// types however.
+// FIXME: This format is fairly rigid, and doesn't allow for arbitrary comments.
+// Someone should fix that.  It does allow arbitrary types however.
 
 // Ugh.  The signature of the compare method is not standard in older
 // versions of the GNU libstdc++.  Do this instead:
 
 #define SUBSTRING_COMPARE_EQ(s, pos, n, t) (s.substr (pos, n) == t)
 
 std::string
-read_ascii_data (std::istream& is, const std::string& filename, bool& global,
+read_text_data (std::istream& is, const std::string& filename, bool& global,
                  octave_value& tc, octave_idx_type count)
 {
   // Read name for this entry or break on EOF.
 
   std::string name = extract_keyword (is, "name");
 
   if (name.empty ())
     {
@@ -294,29 +293,29 @@ read_ascii_data (std::istream& is, const
       return std::string ();
     }
 
   return name;
 }
 
 // Save the data from TC along with the corresponding NAME, and global
 // flag MARK_AS_GLOBAL on stream OS in the plain text format described
-// above for load_ascii_data.  If NAME is empty, the name: line is not
+// above for load_text_data.  If NAME is empty, the name: line is not
 // generated.  PRECISION specifies the number of decimal digits to print.
 //
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // FIXME: should probably write the help string here too.
 
 bool
-save_ascii_data (std::ostream& os, const octave_value& val_arg,
-                 const std::string& name, bool mark_as_global,
-                 int precision)
+save_text_data (std::ostream& os, const octave_value& val_arg,
+                const std::string& name, bool mark_as_global,
+                int precision)
 {
   bool success = true;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   octave_value val = val_arg;
 
@@ -340,20 +339,20 @@ save_ascii_data (std::ostream& os, const
   os << "\n\n";
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
 bool
-save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
-                              const std::string& name)
+save_text_data_for_plotting (std::ostream& os, const octave_value& t,
+                             const std::string& name)
 {
-  return save_ascii_data (os, t, name, false, 6);
+  return save_text_data (os, t, name, false, 6);
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
 // TRUE, assume a parametric 3-dimensional plot will be generated.
 
diff --git a/libinterp/corefcn/ls-oct-ascii.h b/libinterp/corefcn/ls-oct-text.h
rename from libinterp/corefcn/ls-oct-ascii.h
rename to libinterp/corefcn/ls-oct-text.h
--- a/libinterp/corefcn/ls-oct-ascii.h
+++ b/libinterp/corefcn/ls-oct-text.h
@@ -15,18 +15,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if !defined (octave_ls_oct_ascii_h)
-#define octave_ls_oct_ascii_h 1
+#if !defined (octave_ls_oct_text_h)
+#define octave_ls_oct_text_h 1
 
 #include <cfloat>
 
 #include <sstream>
 #include <string>
 
 #include "str-vec.h"
 
@@ -41,25 +41,25 @@ along with Octave; see the file COPYING.
 #define OCT_RBV (std::numeric_limits<double>::max () / 100.0)
 #endif
 
 extern OCTINTERP_API std::string
 extract_keyword (std::istream& is, const char *keyword,
                  const bool next_only = false);
 
 extern OCTINTERP_API std::string
-read_ascii_data (std::istream& is, const std::string& filename, bool& global,
+read_text_data (std::istream& is, const std::string& filename, bool& global,
                  octave_value& tc, octave_idx_type count);
 
 extern OCTINTERP_API bool
-save_ascii_data (std::ostream& os, const octave_value& val_arg,
+save_text_data (std::ostream& os, const octave_value& val_arg,
                  const std::string& name, bool mark_as_global, int precision);
 
 extern OCTINTERP_API bool
-save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
+save_text_data_for_plotting (std::ostream& os, const octave_value& t,
                               const std::string& name);
 
 extern OCTINTERP_API bool
 save_three_d (std::ostream& os, const octave_value& t,
               bool parametric = false);
 
 // Match KEYWORD on stream IS, placing the associated value in VALUE,
 // returning TRUE if successful and FALSE otherwise.
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -48,17 +48,17 @@ COREFCN_INC = \
   libinterp/corefcn/input.h \
   libinterp/corefcn/load-path.h \
   libinterp/corefcn/load-save.h \
   libinterp/corefcn/ls-ascii-helper.h \
   libinterp/corefcn/ls-hdf5.h \
   libinterp/corefcn/ls-mat-ascii.h \
   libinterp/corefcn/ls-mat4.h \
   libinterp/corefcn/ls-mat5.h \
-  libinterp/corefcn/ls-oct-ascii.h \
+  libinterp/corefcn/ls-oct-text.h \
   libinterp/corefcn/ls-oct-binary.h \
   libinterp/corefcn/ls-utils.h \
   libinterp/corefcn/mex.h \
   libinterp/corefcn/mexproto.h \
   libinterp/corefcn/oct-errno.h \
   libinterp/corefcn/oct-fstrm.h \
   libinterp/corefcn/oct-handle.h \
   libinterp/corefcn/oct-hdf5.h \
@@ -177,17 +177,17 @@ COREFCN_SRC = \
   libinterp/corefcn/load-path.cc \
   libinterp/corefcn/load-save.cc \
   libinterp/corefcn/lookup.cc \
   libinterp/corefcn/ls-ascii-helper.cc \
   libinterp/corefcn/ls-hdf5.cc \
   libinterp/corefcn/ls-mat-ascii.cc \
   libinterp/corefcn/ls-mat4.cc \
   libinterp/corefcn/ls-mat5.cc \
-  libinterp/corefcn/ls-oct-ascii.cc \
+  libinterp/corefcn/ls-oct-text.cc \
   libinterp/corefcn/ls-oct-binary.cc \
   libinterp/corefcn/ls-utils.cc \
   libinterp/corefcn/lsode.cc \
   libinterp/corefcn/lu.cc \
   libinterp/corefcn/luinc.cc \
   libinterp/corefcn/mappers.cc \
   libinterp/corefcn/matrix_type.cc \
   libinterp/corefcn/max.cc \
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "pr-output.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-stream.h"
 #include "ops.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::subsref (const std::string& type,
                                     const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-scalar.h"
 #include "ov-base-scalar.cc"
 #include "ov-base-int.h"
 #include "ov-int-traits.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 // We have all the machinery below (octave_base_int_helper and
 // octave_base_int_helper_traits) to avoid a few warnings from GCC
 // about comparisons always false due to limited range of data types.
 // Ugh.  The cure may be worse than the disease.
 
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 
 #include "oct-obj.h"
 #include "ov-base.h"
 #include "quit.h"
 #include "pr-output.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 #include "boolSparse.h"
 #include "ov-base-sparse.h"
 #include "pager.h"
 #include "utils.h"
 
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -42,17 +42,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<boolNDArray>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool_matrix,
                                      "bool matrix", "logical");
diff --git a/libinterp/octave-value/ov-bool.cc b/libinterp/octave-value/ov-bool.cc
--- a/libinterp/octave-value/ov-bool.cc
+++ b/libinterp/octave-value/ov-bool.cc
@@ -37,17 +37,17 @@ along with Octave; see the file COPYING.
 #include "ov-bool-mat.h"
 #include "ov-base.h"
 #include "ov-base-scalar.h"
 #include "ov-base-scalar.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<bool>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool, "bool", "logical");
 
 static octave_base_value *
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -48,17 +48,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 // Cell is able to handle octave_value indexing by itself, so just forward
 // everything.
 
 template <>
@@ -772,17 +772,17 @@ octave_cell::save_ascii (std::ostream& o
 
       Cell tmp = cell_value ();
 
       for (octave_idx_type i = 0; i < d.numel (); i++)
         {
           octave_value o_val = tmp.elem (i);
 
           // Recurse to print sub-value.
-          bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
+          bool b = save_text_data (os, o_val, CELL_ELT_TAG, false, 0);
 
           if (! b)
             return ! os.fail ();
         }
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
@@ -794,17 +794,17 @@ octave_cell::save_ascii (std::ostream& o
 
       for (octave_idx_type j = 0; j < tmp.cols (); j++)
         {
           for (octave_idx_type i = 0; i < tmp.rows (); i++)
             {
               octave_value o_val = tmp.elem (i, j);
 
               // Recurse to print sub-value.
-              bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
+              bool b = save_text_data (os, o_val, CELL_ELT_TAG, false, 0);
 
               if (! b)
                 return ! os.fail ();
             }
 
           os << "\n";
         }
     }
@@ -844,17 +844,17 @@ octave_cell::load_ascii (std::istream& i
               Cell tmp(dv);
 
               for (octave_idx_type i = 0; i < dv.numel (); i++)
                 {
                   octave_value t2;
                   bool dummy;
 
                   // recurse to read cell elements
-                  std::string nm = read_ascii_data (is, std::string (),
+                  std::string nm = read_text_data (is, std::string (),
                                                     dummy, t2, i);
 
                   if (nm == CELL_ELT_TAG)
                     {
                       if (is)
                         tmp.elem (i) = t2;
                     }
                   else
@@ -893,17 +893,17 @@ octave_cell::load_ascii (std::istream& i
                   for (octave_idx_type j = 0; j < nc; j++)
                     {
                       for (octave_idx_type i = 0; i < nr; i++)
                         {
                           octave_value t2;
                           bool dummy;
 
                           // recurse to read cell elements
-                          std::string nm = read_ascii_data (is, std::string (),
+                          std::string nm = read_text_data (is, std::string (),
                                                             dummy, t2, i);
 
                           if (nm == CELL_ELT_TAG)
                             {
                               if (is)
                                 tmp.elem (i, j) = t2;
                             }
                           else
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "file-ops.h"
 #include "gripes.h"
 #include "load-path.h"
 #include "ls-hdf5.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 #include "ls-utils.h"
 #include "mxarray.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ov-class.h"
 #ifdef HAVE_JAVA
 #include "ov-java.h"
@@ -1272,17 +1272,17 @@ octave_class::save_ascii (std::ostream& 
 
   os << "# length: " << m.nfields () << "\n";
 
   octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
-      bool b = save_ascii_data (os, val, m.key (i), false, 0);
+      bool b = save_text_data (os, val, m.key (i), false, 0);
 
       if (! b)
         return ! os.fail ();
 
       i++;
     }
 
   return true;
@@ -1305,17 +1305,17 @@ octave_class::load_ascii (std::istream& 
 
               for (octave_idx_type j = 0; j < len; j++)
                 {
                   octave_value t2;
                   bool dummy;
 
                   // recurse to read cell elements
                   std::string nm
-                    = read_ascii_data (is, std::string (), dummy, t2, j);
+                    = read_text_data (is, std::string (), dummy, t2, j);
 
                   if (! is)
                     break;
 
                   Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
 
                   if (error_state)
                     {
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -41,17 +41,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-scalar.h"
 #include "ov-base-scalar.cc"
 #include "ov-cx-mat.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 #include "ops.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<Complex>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex,
                                      "complex scalar", "double");
 
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -48,17 +48,17 @@ along with Octave; see the file COPYING.
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<ComplexNDArray>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_matrix,
                                      "complex matrix", "double");
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -56,17 +56,17 @@ along with Octave; see the file COPYING.
 #include "defaults.h"
 #include "file-stat.h"
 #include "load-path.h"
 #include "oct-env.h"
 
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
 #include "ls-hdf5.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 #include "ls-utils.h"
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
                                      "function handle",
                                      "function_handle");
 
@@ -374,17 +374,17 @@ octave_fcn_handle::save_ascii (std::ostr
 
       if (varlen > 0)
         {
           os << "# length: " << varlen << "\n";
 
           for (std::list<symbol_table::symbol_record>::const_iterator
                p = vars.begin (); p != vars.end (); p++)
             {
-              if (! save_ascii_data (os, p->varval (0), p->name (), false, 0))
+              if (! save_text_data (os, p->varval (0), p->name (), false, 0))
                 return ! os.fail ();
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = f ? f->fcn_file_name () : std::string ();
@@ -457,17 +457,17 @@ octave_fcn_handle::load_ascii (std::istr
           if (len > 0)
             {
               for (octave_idx_type i = 0; i < len; i++)
                 {
                   octave_value t2;
                   bool dummy;
 
                   std::string name
-                    = read_ascii_data (is, std::string (), dummy, t2, i);
+                    = read_text_data (is, std::string (), dummy, t2, i);
 
                   if (!is)
                     {
                       error ("load: failed to load anonymous function handle");
                       break;
                     }
 
                   symbol_table::assign (name, t2, local_scope, 0);
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -45,17 +45,17 @@ Open Source Initiative (www.opensource.o
 #include "ov-usr-fcn.h"
 #include "pr-output.h"
 #include "variables.h"
 #include "parse.h"
 #include "toplev.h"
 
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_inline,
                                      "inline function",
                                      "function_handle");
 
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -44,17 +44,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-scalar.cc"
 #include "ov-flt-re-mat.h"
 #include "ov-typeinfo.h"
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 #include "ops.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<float>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_scalar, "float scalar",
                                      "single");
 
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -41,17 +41,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-scalar.cc"
 #include "ov-flt-cx-mat.h"
 #include "ov-float.h"
 #include "ov-flt-complex.h"
 #include "gripes.h"
 #include "pr-output.h"
 #include "ops.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<FloatComplex>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex,
                                      "float complex scalar", "single");
 
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -52,17 +52,17 @@ along with Octave; see the file COPYING.
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "pr-output.h"
 #include "ops.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<FloatComplexNDArray>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex_matrix,
                                      "float complex matrix", "single");
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -60,17 +60,17 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 #include "ops.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<FloatNDArray>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_matrix, "float matrix",
                                      "single");
diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int16.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int16NDArray>;
 
 template class octave_base_int_matrix<int16NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int32.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int32NDArray>;
 
 template class octave_base_int_matrix<int32NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int64.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int64NDArray>;
 
 template class octave_base_int_matrix<int64NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int8.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int8NDArray>;
 
 template class octave_base_int_matrix<int8NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-lazy-idx.cc b/libinterp/octave-value/ov-lazy-idx.cc
--- a/libinterp/octave-value/ov-lazy-idx.cc
+++ b/libinterp/octave-value/ov-lazy-idx.cc
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "ov-lazy-idx.h"
 #include "ops.h"
 #include "ov-scalar.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_lazy_index, "lazy_index", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_lazy_index&);
@@ -156,24 +156,24 @@ octave_lazy_index::is_sorted_rows (sortm
 {
   return index.as_array ().is_sorted_rows (mode);
 }
 
 static const std::string value_save_tag ("index_value");
 
 bool octave_lazy_index::save_ascii (std::ostream& os)
 {
-  return save_ascii_data (os, make_value (), value_save_tag, false, 0);
+  return save_text_data (os, make_value (), value_save_tag, false, 0);
 }
 
 bool octave_lazy_index::load_ascii (std::istream& is)
 {
   bool dummy;
 
-  std::string nm = read_ascii_data (is, std::string (), dummy, value, 0);
+  std::string nm = read_text_data (is, std::string (), dummy, value, 0);
 
   if (nm != value_save_tag)
     error ("lazy_index: corrupted data on load");
   else
     index = value.index_vector ();
 
   return ! error_state;
 }
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include "ov-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "error.h"
 #include "gripes.h"
 #include "ops.h"
 #include "pr-output.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 
 octave_value
 octave_perm_matrix::subsref (const std::string& type,
                              const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -60,17 +60,17 @@ along with Octave; see the file COPYING.
 #include "ov-cx-diag.h"
 #include "ov-lazy-idx.h"
 #include "ov-perm.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<NDArray>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_matrix, "matrix", "double");
 
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -44,17 +44,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-scalar.cc"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 #include "ops.h"
 
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<double>;
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar", "double");
 
 static octave_base_value *
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -36,17 +36,17 @@ along with Octave; see the file COPYING.
 #include "mx-base.h"
 #include "oct-locbuf.h"
 
 #include "byte-swap.h"
 #include "defun.h"
 #include "gripes.h"
 #include "ls-ascii-helper.h"
 #include "ls-hdf5.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "oct-obj.h"
 #include "oct-hdf5.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -37,17 +37,17 @@ along with Octave; see the file COPYING.
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "Array-util.h"
 #include "oct-locbuf.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 #include "pr-output.h"
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct", "struct");
 
@@ -761,17 +761,17 @@ octave_struct::save_ascii (std::ostream&
   string_vector keys = m.fieldnames ();
 
   for (octave_idx_type i = 0; i < nf; i++)
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
-      bool b = save_ascii_data (os, val, key, false, 0);
+      bool b = save_text_data (os, val, key, false, 0);
 
       if (! b)
         return ! os.fail ();
     }
 
   return true;
 }
 
@@ -815,17 +815,17 @@ octave_struct::load_ascii (std::istream&
 
           for (octave_idx_type j = 0; j < len; j++)
             {
               octave_value t2;
               bool dummy;
 
               // recurse to read cell elements
               std::string nm
-                = read_ascii_data (is, std::string (), dummy, t2, j);
+                = read_text_data (is, std::string (), dummy, t2, j);
 
               if (!is)
                 break;
 
               Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
 
               if (error_state)
                 {
@@ -1471,17 +1471,17 @@ octave_scalar_struct::save_ascii (std::o
   string_vector keys = m.fieldnames ();
 
   for (octave_idx_type i = 0; i < nf; i++)
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
-      bool b = save_ascii_data (os, val, key, false, 0);
+      bool b = save_text_data (os, val, key, false, 0);
 
       if (! b)
         return ! os.fail ();
     }
 
   return true;
 }
 
@@ -1499,17 +1499,17 @@ octave_scalar_struct::load_ascii (std::i
 
           for (octave_idx_type j = 0; j < len; j++)
             {
               octave_value t2;
               bool dummy;
 
               // recurse to read cell elements
               std::string nm
-                = read_ascii_data (is, std::string (), dummy, t2, j);
+                = read_text_data (is, std::string (), dummy, t2, j);
 
               if (!is)
                 break;
 
               if (error_state)
                 {
                   error ("load: internal error loading struct elements");
                   return false;
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint16.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint16NDArray>;
 
 template class octave_base_int_matrix<uint16NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint32.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint32NDArray>;
 
 template class octave_base_int_matrix<uint32NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint64.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint64NDArray>;
 
 template class octave_base_int_matrix<uint64NDArray>;
 
 
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint8.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
-#include "ls-oct-ascii.h"
+#include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint8NDArray>;
 
 template class octave_base_int_matrix<uint8NDArray>;
 
 
