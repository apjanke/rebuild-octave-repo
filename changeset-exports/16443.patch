# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365268000 14400
#      Sat Apr 06 13:06:40 2013 -0400
# Node ID 7a2ee6ea7800da6f1d98b72eb2c27b74eb437149
# Parent  3021576143085edfc8d6e2a380c4c7a04c4fa3b3
rename dbstop -> breakpoint in GUI interface functions

* file-editor-interface.h
(file_editor_interface::handle_update_breakpoint_marker_request):
Rename from
file_editor_interface::handle_update_dbstop_marker_request.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::do_breakpoint_marker): Rename from
file_editor_tab::do_dbstop_marker.  Change all uses.

* file-editor.h, file-editor.cc
(file_editor::handle_update_breakpoint_marker_request): Rename from
file_editor::handle_update_dbstop_marker_request.  Change all uses.
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc

* octave-qt-link.h (octave_qt_link::update_breakpoint_marker_signal):
Rename from octave_qt_link::update_dbstop_marker_signal.  Change all
uses.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -48,30 +48,30 @@ class file_editor_interface : public oct
   virtual void handle_exit_debug_mode (void) = 0;
 
   virtual void
   handle_insert_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void
   handle_delete_debugger_pointer_request (const QString& file, int line) = 0;
 
-  virtual void handle_update_dbstop_marker_request (bool insert,
-                                                    const QString& file,
-                                                    int line) = 0;
+  virtual void
+  handle_update_breakpoint_marker_request (bool insert, const QString& file,
+                                           int line) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
-                                  bool dbstop_marker = false,
+                                  bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
 
 //protected:
 
 //protected slots:
 
 };
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1153,17 +1153,17 @@ file_editor_tab::delete_debugger_pointer
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
     _edit_area->markerDelete (line, debugger_position);
 }
 
 void
-file_editor_tab::do_dbstop_marker (bool insert, const QWidget *ID, int line)
+file_editor_tab::do_breakpoint_marker (bool insert, const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
     {
       if (insert)
         _edit_area->markerAdd (line, breakpoint);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -77,17 +77,17 @@ public slots:
   void comment_selected_text (const QWidget* ID);
   void uncomment_selected_text (const QWidget* ID);
   void find (const QWidget* ID);
   void goto_line (const QWidget* ID, int line = -1);
 
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
-  void do_dbstop_marker (bool insert, const QWidget *ID, int line = -1);
+  void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file ();
 
   void file_has_changed (const QString& fileName);
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -145,17 +145,17 @@ file_editor::request_open_file ()
   fileDialog->setWindowModality (Qt::NonModal);
   fileDialog->setAttribute (Qt::WA_DeleteOnClose);
   fileDialog->show ();
 }
 
 void
 file_editor::request_open_file (const QString& openFileName, int line,
                                 bool debug_pointer,
-                                bool dbstop_marker, bool insert)
+                                bool breakpoint_marker, bool insert)
 {
   // Check if the user wants to use a custom file editor.
   QSettings *settings = resource_manager::get_settings ();
   if (settings->value ("useCustomFileEditor").toBool ())
     {
       QString editor = settings->value ("customFileEditor").toString ();
       editor.replace ("%f",openFileName);
       editor.replace ("%l",QString::number (line));
@@ -184,18 +184,18 @@ file_editor::request_open_file (const QS
 
           if (line > 0)
             {
               emit fetab_goto_line (p->second, line);
 
               if (debug_pointer)
                 emit fetab_insert_debugger_pointer (p->second, line-1);
 
-              if (dbstop_marker)
-                emit fetab_do_dbstop_marker (insert, p->second, line-1);
+              if (breakpoint_marker)
+                emit fetab_do_breakpoint_marker (insert, p->second, line-1);
             }
 
           emit fetab_set_focus (p->second);
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
@@ -211,18 +211,18 @@ file_editor::request_open_file (const QS
                   handle_mru_add_file(QDir::cleanPath (openFileName));
 
                   if (line > 0)
                     {
                       emit fetab_goto_line (fileEditorTab, line);
 
                       if (debug_pointer)
                         emit fetab_insert_debugger_pointer (fileEditorTab, line-1);
-                      if (dbstop_marker)
-                        emit fetab_do_dbstop_marker
+                      if (breakpoint_marker)
+                        emit fetab_do_breakpoint_marker
                           (insert, fileEditorTab, line-1);
                     }
                 }
               else
                 {
                   delete fileEditorTab;
                   // Create a NonModal message about error.
                   QMessageBox* msgBox = new QMessageBox (
@@ -337,17 +337,17 @@ file_editor::handle_delete_debugger_poin
             emit fetab_delete_debugger_pointer (p->second, line-1);
 
           emit fetab_set_focus (p->second);
         }
     }
 }
 
 void
-file_editor::handle_update_dbstop_marker_request (bool insert,
+file_editor::handle_update_breakpoint_marker_request (bool insert,
                                                   const QString& file, int line)
 {
   request_open_file (file, line, false, true, insert);
 }
 
 void
 file_editor::handle_edit_file_request (const QString& file)
 {
@@ -950,15 +950,15 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_goto_line (const QWidget *, int)),
            f, SLOT (goto_line (const QWidget *, int)));
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
   connect (this, SIGNAL (fetab_insert_debugger_pointer (const QWidget *, int)),
            f, SLOT (insert_debugger_pointer (const QWidget *, int)));
   connect (this, SIGNAL (fetab_delete_debugger_pointer (const QWidget *, int)),
            f, SLOT (delete_debugger_pointer (const QWidget *, int)));
-  connect (this, SIGNAL (fetab_do_dbstop_marker (bool, const QWidget *, int)),
-           f, SLOT (do_dbstop_marker (bool, const QWidget *, int)));
+  connect (this, SIGNAL (fetab_do_breakpoint_marker (bool, const QWidget *, int)),
+           f, SLOT (do_breakpoint_marker (bool, const QWidget *, int)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -87,17 +87,17 @@ signals:
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
-  void fetab_do_dbstop_marker (bool insert, const QWidget* ID, int line = -1);
+  void fetab_do_breakpoint_marker (bool insert, const QWidget* ID, int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_mru_open_file ();
   void request_print_file ();
 
@@ -131,27 +131,27 @@ public slots:
   void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
-  void handle_update_dbstop_marker_request (bool insert, const QString& file,
+  void handle_update_breakpoint_marker_request (bool insert, const QString& file,
                                             int line);
   void handle_edit_file_request (const QString& file);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
 private slots:
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
-                          bool dbstop_marker = false, bool insert = true);
+                          bool breakpoint_marker = false, bool insert = true);
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f, const QString &fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update ();
 
   std::map<QString, QWidget *> editor_tab_map;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1173,19 +1173,19 @@ main_window::construct ()
 
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
   connect (_octave_qt_link,
-           SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
+           SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
            _file_editor,
-           SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
+           SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
            _file_editor,
            SLOT (handle_edit_file_request (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -38,16 +38,24 @@ octave_qt_link::octave_qt_link (void)
 }
 
 void
 octave_qt_link::execute_interpreter (void)
 {
   main_thread->execute_interpreter ();
 }
 
+bool
+octave_qt_link::do_edit_file (const std::string& file)
+{
+  emit edit_file_signal (QString::fromStdString (file));
+
+  return true;
+}
+
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
   emit change_directory_signal (QString::fromStdString (dir));
 }
 
 void
 octave_qt_link::do_update_workspace (void)
@@ -113,25 +121,17 @@ octave_qt_link::do_exit_debugger_event (
 {
   emit exit_debugger_signal ();
 }
 
 void
 octave_qt_link::do_update_breakpoint (bool insert,
                                       const std::string& file, int line)
 {
-  emit update_dbstop_marker_signal (insert, QString::fromStdString (file), line);
-}
-
-bool
-octave_qt_link::do_edit_file (const std::string& file)
-{
-  emit edit_file_signal (QString::fromStdString (file));
-
-  return true;
+  emit update_breakpoint_marker_signal (insert, QString::fromStdString (file), line);
 }
 
 void
 octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
 {
   emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
 }
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -48,16 +48,18 @@ class octave_qt_link : public QObject, p
 public:
 
   octave_qt_link (void);
 
   ~octave_qt_link (void) { }
 
   void execute_interpreter (void);
 
+  bool do_edit_file (const std::string& file);
+
   void do_change_directory (const std::string& dir);
 
   void do_update_workspace (void);
 
   void do_set_history (const string_vector& hist);
   void do_append_history (const std::string& hist_entry);
   void do_clear_history (void);
 
@@ -65,46 +67,43 @@ public:
   void do_post_input_event (void);
 
   void do_enter_debugger_event (const std::string& file, int line);
   void do_execute_in_debugger_event (const std::string& file, int line);
   void do_exit_debugger_event (void);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line);
 
-  bool do_edit_file (const std::string& file);
-
 private:
 
   // No copying!
 
   octave_qt_link (const octave_qt_link&);
 
   octave_qt_link& operator = (const octave_qt_link&);
 
   void do_insert_debugger_pointer (const std::string& file, int line);
-
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   // Thread running octave_main.
   octave_main_thread *main_thread;
 
 signals:
 
+  void edit_file_signal (const QString& file);
+
   void change_directory_signal (const QString& dir);
 
   void set_history_signal (const QStringList& hist);
   void append_history_signal (const QString& hist_entry);
   void clear_history_signal (void);
 
   void enter_debugger_signal (void);
   void exit_debugger_signal (void);
 
-  void update_dbstop_marker_signal (bool insert, const QString& file, int line);
-
-  void edit_file_signal (const QString& file);
+  void update_breakpoint_marker_signal (bool insert, const QString& file,
+                                        int line);
 
   void insert_debugger_pointer_signal (const QString&, int);
-
   void delete_debugger_pointer_signal (const QString&, int);
 };
 
 #endif
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -103,16 +103,22 @@ public:
   }
 
   static void finished_readline_hook (void)
   {
     if (instance_ok ())
       instance->do_finished_readline_hook ();
   }
 
+  static bool
+  edit_file (const std::string& file)
+  {
+    return instance_ok () ? instance->do_edit_file (file) : false;
+  }
+
   static void change_directory (const std::string& dir)
   {
     if (instance_ok ())
       instance->do_change_directory (dir);
   }
 
   static void update_workspace (void)
   {
@@ -178,22 +184,16 @@ public:
 
   static void
   update_breakpoint (bool insert, const std::string& file, int line)
   {
     if (instance_ok ())
       instance->do_update_breakpoint (insert, file, line);
   }
 
-  static bool
-  edit_file (const std::string& file)
-  {
-    return instance_ok () ? instance->do_edit_file (file) : false;
-  }
-
   static void connect_link (octave_link *);
 
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
@@ -240,16 +240,18 @@ protected:
     gui_event_queue.add_method (obj, method, arg);
   }
 
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
+  virtual bool do_edit_file (const std::string& file) = 0;
+
   virtual void do_change_directory (const std::string& dir) = 0;
 
   virtual void do_update_workspace (void) = 0;
 
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
   virtual void do_clear_history (void) = 0;
 
@@ -257,13 +259,11 @@ protected:
   virtual void do_post_input_event (void) = 0;
 
   virtual void do_enter_debugger_event (const std::string& file, int line) = 0;
   virtual void do_execute_in_debugger_event (const std::string& file, int line) = 0;
   virtual void do_exit_debugger_event (void) = 0;
 
   virtual void do_update_breakpoint (bool insert,
                                      const std::string& file, int line) = 0;
-
-  virtual bool do_edit_file (const std::string& file) = 0;
 };
 
 #endif // OCTAVELINK_H
