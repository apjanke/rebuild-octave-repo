# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264080140 -3600
#      Thu Jan 21 14:22:20 2010 +0100
# Node ID a668fbd32e34bee7f2509b8d6e85de884f6d6568
# Parent  be952ce74023db61d3288945628e51de199f8fc2
improve cellfun & avoid undefined values from builtins

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2010-01-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base.h (octave_base_value::dim_vector): Return 0x0 by default.
+	* oct-obj.h (octave_value_list::xelem, octave_value_list::clear): New
+	methods.
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Don't call
+	make_storable_values. Chop a potential single undefined value.
+	* ov-type-conv.h (octave_type_conv_body): Ensure storable value.
+	* ov-dld-fcn.cc (octave_dld_function::do_multi_index_op): New method.
+	* DLD-FUNCTIONS/cellfun.cc (get_output_list): New helper function.
+	(Fcellfun): Call it here. Optimize.
+
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* defaults.h.in, graphics.h.in, oct-conf.h.in, oct-errno.cc.in,
 	version.h.in: Delete Emacs local-variable settings.
 
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* cutils.c, main.c, matherr.c, siglist.c, Cell.cc, bitfcns.cc,
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -218,16 +218,49 @@ make_col_helper (const octave_value& val
     default:
       retval = new scalar_col_helper_def (val, dims);
       break;
     }
 
   return retval;
 }
 
+static octave_value_list 
+get_output_list (octave_idx_type count, octave_idx_type nargout,
+                 const octave_value_list& inputlist,
+                 octave_value& func,
+                 octave_value& error_handler)
+{
+  octave_value_list tmp = func.do_multi_index_op (nargout, inputlist);
+
+  if (error_state)
+    {
+      if (error_handler.is_defined ())
+        {
+          Octave_map msg;
+          msg.assign ("identifier", last_error_id ());
+          msg.assign ("message", last_error_message ());
+          msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
+          octave_value_list errlist = inputlist;
+          errlist.prepend (msg);
+          buffer_error_messages--;
+          error_state = 0;
+          tmp = error_handler.do_multi_index_op (nargout, errlist);
+          buffer_error_messages++;
+
+          if (error_state)
+            tmp.clear ();
+        }
+      else
+        tmp.clear ();
+    }
+
+  return tmp;
+}
+
 DEFUN_DLD (cellfun, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} cellfun (@var{name}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"isclass\", @var{c}, @var{class})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c}, @var{d})\n\
 @deftypefnx {Loadable Function} {[@var{a}, @dots{}] =} cellfun (@dots{})\n\
@@ -602,40 +635,24 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
         {
           OCTAVE_LOCAL_BUFFER (std::auto_ptr<scalar_col_helper>, retptr, nargout1);
 
           for (octave_idx_type count = 0; count < k ; count++)
             {
               for (int j = 0; j < nargin; j++)
                 {
                   if (mask[j])
-                    inputlist(j) = cinputs[j](count);
+                    inputlist.xelem (j) = cinputs[j](count);
                 }
 
-              octave_value_list tmp = func.do_multi_index_op (nargout, inputlist);
-
-              if (error_state && error_handler.is_defined ())
-                {
-                  Octave_map msg;
-                  msg.assign ("identifier", last_error_id ());
-                  msg.assign ("message", last_error_message ());
-                  msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
-                  octave_value_list errlist = inputlist;
-                  errlist.prepend (msg);
-                  buffer_error_messages--;
-                  error_state = 0;
-                  tmp = error_handler.do_multi_index_op (nargout, errlist);
-                  buffer_error_messages++;
-
-                  if (error_state)
-                    return octave_value_list ();
-                }
+              const octave_value_list tmp = get_output_list (count, nargout, inputlist,
+                                                             func, error_handler);
 
               if (error_state)
-                return octave_value_list ();
+                return retval;
 
               if (tmp.length () < nargout1)
                 {
                   if (tmp.length () < nargout)
                     {
                       error ("cellfun: too many output arguments");
                       return octave_value_list ();
                     }
@@ -694,40 +711,24 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
           for (int j = 0; j < nargout1; j++)
             results[j].resize (fdims);
 
           for (octave_idx_type count = 0; count < k ; count++)
             {
               for (int j = 0; j < nargin; j++)
                 {
                   if (mask[j])
-                    inputlist(j) = cinputs[j](count);
+                    inputlist.xelem (j) = cinputs[j](count);
                 }
 
-              octave_value_list tmp = func.do_multi_index_op (nargout, inputlist);
-
-              if (error_state && error_handler.is_defined ())
-                {
-                  Octave_map msg;
-                  msg.assign ("identifier", last_error_id ());
-                  msg.assign ("message", last_error_message ());
-                  msg.assign ("index", octave_value(double (count + static_cast<octave_idx_type>(1))));
-                  octave_value_list errlist = inputlist;
-                  errlist.prepend (msg);
-                  buffer_error_messages--;
-                  error_state = 0;
-                  tmp = error_handler.do_multi_index_op (nargout, errlist);
-                  buffer_error_messages++;
-
-                  if (error_state)
-                    return octave_value_list ();
-                }
+              const octave_value_list tmp = get_output_list (count, nargout, inputlist,
+                                                             func, error_handler);
 
               if (error_state)
-                return octave_value_list ();
+                return retval;
 
               if (tmp.length () < nargout1)
                 {
                   if (tmp.length () < nargout)
                     {
                       error ("cellfun: too many output arguments");
                       return octave_value_list ();
                     }
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -144,16 +144,26 @@ public:
   string_vector make_argv (const std::string& = std::string()) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
   void make_storable_values (void);
 
+  octave_value& xelem (octave_idx_type i)
+    {
+      return data.xelem (i);
+    }
+
+  void clear (void)
+    {
+      data.clear ();
+    }
+
 private:
 
   static octave_allocator allocator;
 
   Array<octave_value> data;
 
   // This list of strings can be used to tag each element of data with
   // a name.  By default, it is empty.
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -267,17 +267,17 @@ public:
 
   virtual octave_value
   subsasgn (const std::string& type,
 	    const std::list<octave_value_list>& idx,
 	    const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const;
 
-  virtual dim_vector dims (void) const { return dim_vector (-1, -1); }
+  virtual dim_vector dims (void) const { return dim_vector (); }
 
   octave_idx_type rows (void) const
     {
       dim_vector dv = dims ();
 
       return (dv.length () > 0) ? dv(0) : -1;
     }
 
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -100,19 +100,26 @@ octave_builtin::do_multi_index_op (int n
 
       octave_call_stack::push (this);
 
       frame.add_fcn (octave_call_stack::pop);
 
       try
 	{
 	  retval = (*f) (args, nargout);
-          // Do not allow null values to be returned from functions.
-          // FIXME -- perhaps true builtins should be allowed?
-          retval.make_storable_values ();
+          // We don't check for null values here, builtins should handle that
+          // possibility themselves.
+          // Fix the case of a single undefined value.
+          // This happens when a compiled function uses
+          //   octave_value retval;
+          // instead of
+          //   octave_value_list retval;
+          // the idiom is very common, so we solve that here.
+          if (retval.length () == 1 && retval.xelem (0).is_undefined ())
+            retval.clear ();
 	}
       catch (octave_execution_exception)
 	{
 	  gripe_library_execution_error ();
 	}
     }
 
   return retval;
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -84,8 +84,19 @@ octave_dld_function::time_parsed (void) 
 //       of objects to point to an invalid code segment.
 
 octave_dld_function*
 octave_dld_function::create (octave_builtin::fcn ff, const octave_shlib& shl,
 			     const std::string& nm, const std::string& ds)
 {
   return new octave_dld_function (ff, shl, nm, ds);
 }
+
+octave_value_list
+octave_dld_function::do_multi_index_op (int nargout, const octave_value_list& args)
+{
+  octave_value_list retval = this->octave_builtin::do_multi_index_op (nargout, args);
+  // Guard against the possibility of null values leaking from user DLD functions.
+  // FIXME: is this needed?
+  retval.make_storable_values ();
+
+  return retval;
+}
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -70,16 +70,19 @@ public:
   static octave_dld_function* create (octave_builtin::fcn ff,
       const octave_shlib& shl,
       const std::string& nm = std::string (),
       const std::string& ds = std::string ());
 
   octave_shlib get_shlib (void) const
     { return sh_lib; }
 
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args);
+
 private:
 
   octave_shlib sh_lib;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   mutable octave_time t_checked;
 
diff --git a/src/ov-type-conv.h b/src/ov-type-conv.h
--- a/src/ov-type-conv.h
+++ b/src/ov-type-conv.h
@@ -27,17 +27,17 @@ static
 octave_value
 octave_type_conv_body (const octave_value &arg, const std::string& name, int t_result)
 {
   int t_arg = arg.type_id ();
   octave_value retval;
 
   if (t_arg == t_result || arg.class_name () == name)
     {
-      retval = arg;
+      retval = arg.storable_value ();
     }
   else
     {
       octave_base_value::type_conv_fcn cf1
         = octave_value_typeinfo::lookup_type_conv_op (t_arg, t_result);
        
       if (cf1)
         {
