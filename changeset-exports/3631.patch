# HG changeset patch
# User jwe
# Date 953802997 0
#      Thu Mar 23 09:16:37 2000 +0000
# Node ID 0b6b55fd0a5cbcf36e85f23d06819ce74571d76d
# Parent  8fbe6931e709b43dcb747c7e823a0da3064ff08b
[project @ 2000-03-23 09:16:36 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2000-03-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-procbuf.h, oct-procbuf.cc (octave_procbuf):
+	Derive from c_file_ptr_buf instead of filebuf.
+
 	* oct-stream.cc (octave_base_stream::printf): Use octave_format
 	instead of ostream::form.  Return number of characters written.
 
 2000-03-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (do_printf_conv): Use octave_format instead of
 	ostream::form.  Return number of characters written.
 	(octave_base_stream::do_printf): Return number of characters written.
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -49,21 +49,16 @@ Software Foundation, 59 Temple Place - S
 #if defined (__CYGWIN32__)
 static int Vkluge_procbuf_delay = 500000;
 #else
 static int Vkluge_procbuf_delay = 0;
 #endif
 
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
-//
-// It should work with the filebuf class from libg++, but it might not
-// work with others since it depends on being able to get at the
-// underlying file descriptor with filebuf::fd(), which is not
-// standard.
 
 static octave_procbuf *octave_procbuf_list = 0;
 
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
@@ -99,17 +94,17 @@ octave_procbuf::open (const char *comman
       if (child_end != child_std_end)
 	{
 	  ::dup2 (child_end, child_std_end);
 	  ::close (child_end);
 	}
 
       while (octave_procbuf_list)
 	{
-	  ::close (octave_procbuf_list->fd ());
+	  ::fclose (octave_procbuf_list->f);
 	  octave_procbuf_list = octave_procbuf_list->next;
 	}
 
       execl ("/bin/sh", "sh", "-c", command, NULL);
 
       exit (127);
     }
 
@@ -119,32 +114,34 @@ octave_procbuf::open (const char *comman
   ::close (child_end);
 
   if (proc_pid < 0)
     {
       ::close (parent_end);
       return 0;
     }
 
-  attach (parent_end);
+  f = ::fdopen (parent_end, (mode & std::ios::in) ? "w" : "r");
+
+  open_p = true;
 
   next = octave_procbuf_list;
   octave_procbuf_list = this;
 
   return this;
 
 #else
 
   return 0;
 
 #endif
 }
 
-int
-octave_procbuf::sys_close (void)
+octave_procbuf *
+octave_procbuf::close (void)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
   pid_t wait_pid;
 
   int status = -1;
 
   for (octave_procbuf **ptr = &octave_procbuf_list;
@@ -154,37 +151,34 @@ octave_procbuf::sys_close (void)
       if (*ptr == this)
 	{
 	  *ptr = (*ptr)->next;
 	  status = 0;
 	  break;
 	}
     }
 
-  if (status < 0 || ::close (fd ()) < 0)
-    return -1;
-
-  {
-    using namespace std;
+  if (status == 0 && ::fclose (f) == 0)
+    {
+      using namespace std;
 
-    do
-      {
-	wait_pid = ::waitpid (proc_pid, &wstatus, 0);
-      }
-    while (wait_pid == -1 && errno == EINTR);
-  }
+      do
+	{
+	  wait_pid = ::waitpid (proc_pid, &wstatus, 0);
+	}
+      while (wait_pid == -1 && errno == EINTR);
+    }
 
-  if (wait_pid == -1)
-    return -1;
+  open_p = false;
 
-  return wstatus;
+  return this;
 
 #else
 
-  return -1;
+  return 0;
 
 #endif
 }
 
 static int
 kluge_procbuf_delay (void)
 {
   double val;
diff --git a/src/oct-procbuf.h b/src/oct-procbuf.h
--- a/src/oct-procbuf.h
+++ b/src/oct-procbuf.h
@@ -21,51 +21,53 @@ Software Foundation, 59 Temple Place - S
 */
 
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
 
 #if !defined (octave_octave_procbuf_h)
 #define octave_octave_procbuf_h 1
 
-#include <fstream>
-
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
+#include "c-file-ptr-stream.h"
+
 class
-octave_procbuf : public std::filebuf
+octave_procbuf : public c_file_ptr_buf
 {
 public:
 
   octave_procbuf (void)
-    : std::filebuf (), wstatus (-1), proc_pid (-1), next (0) { }
+    : c_file_ptr_buf (0), wstatus (-1), open_p (false), proc_pid (-1),
+      next (0) { }
 
   octave_procbuf (const char *command, int mode)
-    : std::filebuf (), wstatus (-1), proc_pid (-1), next (0)
-  { open (command, mode); }
+    : c_file_ptr_buf (0), wstatus (-1), open_p (false), proc_pid (-1),
+      next (0) { open (command, mode); }
 
   ~octave_procbuf (void) { close (); }
 
   octave_procbuf *open (const char *command, int mode);
 
-  octave_procbuf *close (void)
-    { return static_cast<octave_procbuf *> (std::filebuf::close ()); }
-
-  virtual int sys_close (void);
+  octave_procbuf *close (void);
 
   int wait_status (void) const { return wstatus; }
 
+  bool is_open (void) const { return open_p; }
+
   pid_t pid (void) { return proc_pid; }
 
 protected:
 
   int wstatus;
 
+  bool open_p;
+
   pid_t proc_pid;
 
   octave_procbuf *next;
 };
 
 extern void symbols_of_oct_procbuf (void);
 
 #endif
