# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514402546 28800
#      Wed Dec 27 11:22:26 2017 -0800
# Node ID 0b65949870e34856f8228992045e948e6960aca8
# Parent  42d099b841aacf352bc2f4f1678acd9c7a22e861
isstring.m: Add new function for identifying string arrays.

* scripts/strings/isstring.m: New function.  Always returns false since Octave
does not implement string arrays.

* scripts/strings/module.mk: Add isstring.m to build system.

* NEWS: Announce new function.

* strings.txi: Add DOCSTRING entry for isstring to manual.
Rewrite how to distinguish a string (1xN char vector) from a char array.

* data.cc (Fislogical, Fisinteger, Fiscomplex, Fisfloat, Fisnumeric):
Add isstring to @seealso links.

* strfns.cc (Fischar): Add isstring to @seealso links.

* ov-cell.cc (Fiscellstr): Add isstring to @seealso links.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -95,16 +95,17 @@ Summary of important user-visible change
       groot
       gsvd
       hgtransform
       humps
       integral
       integral2
       integral3
       isgraphics
+      isstring
       openvar
       quad2d
       repelem
       rticks
       thetaticks
       vecnorm
       xticklabels
       xticks
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -172,29 +172,31 @@ collection = [ "String #1"; "String #2" 
 @noindent
 This creates a 2-by-9 character matrix.
 
 The function @code{ischar} can be used to test if an object is a character
 matrix.
 
 @DOCSTRING(ischar)
 
-To test if an object is a string (i.e., a character vector and not a character
-matrix) you can use the @code{ischar} function in combination with the
-@code{isvector} function as in the following example:
+@DOCSTRING(isstring)
+
+To test if an object is a string (i.e., a 1xN row vector of characters
+and not a character matrix) you can use the @code{ischar} function in
+combination with the @code{isrow} function as in the following example:
 
 @example
 @group
 ischar (collection)
      @result{} 1
 
-ischar (collection) && isvector (collection)
+ischar (collection) && isrow (collection)
      @result{} 0
 
-ischar ("my string") && isvector ("my string")
+ischar ("my string") && isrow ("my string")
      @result{} 1
 @end group
 @end example
 
 One relevant question is, what happens when a character matrix is
 created from strings of different length.  The answer is that Octave
 puts blank characters at the end of strings shorter than the longest
 string.  It is possible to use a different character than the
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3097,17 +3097,17 @@ but it uses less memory and avoids calli
 %!error sumsq ()
 */
 
 DEFUN (islogical, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} islogical (@var{x})
 @deftypefnx {} {} isbool (@var{x})
 Return true if @var{x} is a logical object.
-@seealso{isfloat, isinteger, ischar, isnumeric, isa}
+@seealso{ischar, isfloat, isinteger, isstring, isnumeric, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).islogical ());
 }
 
@@ -3129,17 +3129,17 @@ DEFALIAS (isbool, islogical);
 
 DEFUN (isinteger, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isinteger (@var{x})
 Return true if @var{x} is an integer object (int8, uint8, int16, etc.).
 
 Note that @w{@code{isinteger (14)}} is false because numeric constants in
 Octave are double precision floating point values.
-@seealso{isfloat, ischar, islogical, isnumeric, isa}
+@seealso{isfloat, ischar, islogical, isstring, isnumeric, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).isinteger ());
 }
 
@@ -3184,32 +3184,32 @@ Octave are double precision floating poi
 %!error isinteger ()
 %!error isinteger ("multiple", "parameters")
 */
 
 DEFUN (iscomplex, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} iscomplex (@var{x})
 Return true if @var{x} is a complex-valued numeric object.
-@seealso{isreal, isnumeric, islogical, ischar, isfloat, isa}
+@seealso{isreal, isnumeric, ischar, isfloat, islogical, isstring, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).iscomplex ());
 }
 
 DEFUN (isfloat, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isfloat (@var{x})
 Return true if @var{x} is a floating-point numeric object.
 
 Objects of class double or single are floating-point objects.
-@seealso{isinteger, ischar, islogical, isnumeric, isa}
+@seealso{isinteger, ischar, islogical, isnumeric, isstring, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).isfloat ());
 }
 
@@ -3560,17 +3560,17 @@ zero).
 
 DEFUN (isnumeric, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isnumeric (@var{x})
 Return true if @var{x} is a numeric object, i.e., an integer, real, or
 complex array.
 
 Logical and character arrays are not considered to be numeric.
-@seealso{isinteger, isfloat, isreal, iscomplex, islogical, ischar, iscell, isstruct, isa}
+@seealso{isinteger, isfloat, isreal, iscomplex, ischar, islogical, isstring, iscell, isstruct, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).isnumeric ());
 }
 
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -281,17 +281,17 @@ strvcat ([97, 98, 99], "", @{"98", "99",
 %!assert (strvcat ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"])
 %!assert (strvcat (), "")
 */
 
 DEFUN (ischar, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ischar (@var{x})
 Return true if @var{x} is a character array.
-@seealso{isfloat, isinteger, islogical, isnumeric, iscellstr, isa}
+@seealso{isfloat, isinteger, islogical, isnumeric, isstring, iscellstr, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_string ());
 }
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1264,17 +1264,17 @@ dimensions.
 %!error <out of memory> cell (1e24, 1);
 */
 
 DEFUN (iscellstr, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} iscellstr (@var{cell})
 Return true if every element of the cell array @var{cell} is a character
 string.
-@seealso{ischar}
+@seealso{ischar, isstring}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).iscellstr ());
 }
 
diff --git a/scripts/strings/isstring.m b/scripts/strings/isstring.m
new file mode 100644
--- /dev/null
+++ b/scripts/strings/isstring.m
@@ -0,0 +1,55 @@
+## Copyright (C) 2017 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {} isstring (@var{x})
+## Return true if @var{x} is a string array.
+##
+## A string array is a data type that stores strings (row vectors of characters)
+## at each element in the array.  It is distinct from character arrays which
+## are N-dimensional arrays where each element is a single 1x1 character.  It
+## is also distinct from cell arrays of strings which store strings at each
+## element, but use cell indexing @samp{@{@}} to access elements rather than
+## string arrays which use ordinary array indexing @samp{()}.
+##
+## Programming Note: Octave does not yet implement string arrays so this
+## function will always return false.
+## @seealso{ischar, iscellstr, isfloat, isinteger, islogical, isnumeric, isa}
+## @end deftypefn
+
+function retval = isstring (s)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  retval = false;
+
+endfunction
+
+
+%!assert (isstring ([]), false)
+%!assert (isstring (1), false)
+%!assert (isstring ('a'), false)
+## FIXME: when string arrays are implemented, this should return true. 
+#%!assert (isstring ("b"), true)
+%!assert (isstring ({'a'}), false)
+%!assert (isstring ({"b"}), false)
+
+%!error isstring ()
+%!error isstring ("a", "b")
diff --git a/scripts/strings/module.mk b/scripts/strings/module.mk
--- a/scripts/strings/module.mk
+++ b/scripts/strings/module.mk
@@ -9,16 +9,17 @@ FCN_FILE_DIRS += scripts/strings
   %reldir%/dec2base.m \
   %reldir%/dec2bin.m \
   %reldir%/dec2hex.m \
   %reldir%/erase.m \
   %reldir%/findstr.m \
   %reldir%/hex2dec.m \
   %reldir%/index.m \
   %reldir%/isletter.m \
+  %reldir%/isstring.m \
   %reldir%/isstrprop.m \
   %reldir%/mat2str.m \
   %reldir%/native2unicode.m \
   %reldir%/ostrsplit.m \
   %reldir%/regexptranslate.m \
   %reldir%/rindex.m \
   %reldir%/str2num.m \
   %reldir%/strcat.m \
