# HG changeset patch
# User jwe
# Date 1064081320 0
#      Sat Sep 20 18:08:40 2003 +0000
# Node ID 382cb0ed8c14f92dc04c03b0264aa7c765ca2e66
# Parent  b4449b1193ac06c8d07078fcd29f420b4dcc8c91
[project @ 2003-09-20 18:08:40 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -25,16 +25,17 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
+#include <climits>
 
 #include <iostream>
 
 #include "Array.h"
 #include "Array-flags.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -130,18 +130,26 @@ protected:
 	  rep = new ArrayRep (rep->length (), val);
 	}
       else
 	rep->fill (val);
     }
 
   typename Array<T>::ArrayRep *rep;
 
+public:
+
+  // !!! WARNING !!! -- this is public because template friends don't
+  // work properly with versions of gcc earlier than 3.3.  You should
+  // not access this data member directly!
+
   dim_vector dimensions;
 
+protected:
+
   idx_vector *idx;
   int idx_count;
 
   Array (T *d, int n)
     : rep (new typename Array<T>::ArrayRep (d, n)), dimensions (n),
       idx (0), idx_count (0) { }
 
   Array (T *d, const dim_vector& dims)
@@ -389,17 +397,23 @@ public:
   T operator () (const Array<int>& ra_idx) const { return checkelem (ra_idx); }
 #else
   T operator () (int n) const { return elem (n); }
   T operator () (int i, int j) const { return elem (i, j); }
   T operator () (int i, int j, int k) const { return elem (i, j, k); }
   T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
 #endif
 
-protected:
+  // !!! WARNING !!! -- the following resize_no_fill and
+  // resize_and_fill functions are public because template friends
+  // don't work properly with versions of gcc earlier than 3.3.  You
+  // should use these functions only in classes that are derived
+  // from Array<T>.
+
+  // protected:
 
   void resize_no_fill (int n);
 
   void resize_no_fill (int r, int c);
 
   void resize_no_fill (int r, int c, int p);
 
   void resize_no_fill (const dim_vector& dims);
@@ -484,35 +498,39 @@ public:
   Array<T> index (idx_vector& i, idx_vector& j, int resize_ok = 0,
 		  const T& rfv = resize_fill_value (T ())) const;
 
   Array<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 		  const T& rfv = resize_fill_value (T ())) const;
 
   //  static T resize_fill_value (void) { return T (); }
 
-  template <class LT, class RT>
-  friend int
-  assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
-
-  template <class LT, class RT>
-  friend int
-  assign1 (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
-
-  template <class LT, class RT>
-  friend int
-  assign2 (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
-
-  template <class LT, class RT>
-  friend int
-  assignN (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
-
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
+// NOTE: these functions should be friends of the Array<T> class and
+// Array<T>::dimensions should be protected, not public, but we can't
+// do that because of bugs in gcc prior to 3.3.
+
+template <class LT, class RT>
+/* friend */ int
+assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
+
+template <class LT, class RT>
+/* friend */ int
+assign1 (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
+
+template <class LT, class RT>
+/* friend */ int
+assign2 (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
+
+template <class LT, class RT>
+/* friend */ int
+assignN (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
+
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
   return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
 #endif
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,27 @@
+2003-09-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.h (dimensions): Now public.
+	template <class LT, class RT>
+	(assign (Array<LT>&, const Array<RT>&, const LT&),
+	assign1 (Array<LT>&, const Array<RT>&, const LT&),
+	assign2 (Array<LT>&, const Array<RT>&, const LT&),
+	assignN (Array<LT>&, const Array<RT>&, const LT&),
+	resize_no_fill (int),
+	resize_no_fill (int, int),
+	resize_no_fill (int, int, int),
+	resize_no_fill (const dim_vector&),
+	resize_and_fill (int, const T&),
+	resize_and_fill (int, int, const T&),
+	resize_and_fill (int, int, int, const T&),
+	resize_and_fill (const dim_vector&, const T&)): Now public.
+
+	* Array.cc: Include <climits>.
+
 2003-09-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc: Merge Array-idx.h.
 	* Array-idx.h: Delete.
 
 	* chNDArray.h, chNDArray.cc, boolNDArray.h, boolNDArray.cc: New files.
 
 	* Array.h, Array-idx.h, Array.cc: Fold all N-d functionality here.
