# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518593144 18000
#      Wed Feb 14 02:25:44 2018 -0500
# Node ID ca6a73be15da5827b1f0ea3e8c6f9ae48074196c
# Parent  0c6785fb557cffee6d465b6b70d56c8c1002ac74
allow NUL characters in printf and scanf formats (bug #53148)

* oct-strstrm.h (octave_istrstream): Don't call c_str() on std::string
data passed to std::istringstream ctor.

* oct-stream.cc (scanf_format_elt::text, printf_format_elt::text):
Use std::string, not char*.  Change all uses.
(class scanf_format_elt, class printf_format_elt): Use default copy
ctor, dtor, and assignment operator.

* io.tst: New tests.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -226,47 +226,31 @@ namespace octave
 
     enum special_conversion
       {
         whitespace_conversion = 1,
         literal_conversion = 2,
         null = 3
       };
 
-    scanf_format_elt (const char *txt = nullptr, int w = 0, bool d = false,
+    scanf_format_elt (const std::string& txt = "", int w = 0, bool d = false,
                       char typ = '\0', char mod = '\0',
                       const std::string& ch_class = "")
-      : text (strsave (txt)), width (w), discard (d), type (typ),
+      : text (txt), width (w), discard (d), type (typ),
         modifier (mod), char_class (ch_class)
     { }
 
-    scanf_format_elt (const scanf_format_elt& e)
-      : text (strsave (e.text)), width (e.width), discard (e.discard),
-        type (e.type), modifier (e.modifier), char_class (e.char_class)
-    { }
-
-    scanf_format_elt& operator = (const scanf_format_elt& e)
-    {
-      if (this != &e)
-        {
-          text = strsave (e.text);
-          width = e.width;
-          discard = e.discard;
-          type = e.type;
-          modifier = e.modifier;
-          char_class = e.char_class;
-        }
-
-      return *this;
-    }
-
-    ~scanf_format_elt (void) { delete [] text; }
+    scanf_format_elt (const scanf_format_elt& e) = default;
+
+    scanf_format_elt& operator = (const scanf_format_elt& e) = default;
+
+    ~scanf_format_elt (void) = default;
 
     // The C-style format string.
-    const char *text;
+    std::string text;
 
     // The maximum field width.
     int width;
 
     // TRUE if we are not storing the result of this conversion.
     bool discard;
 
     // Type of conversion -- 'd', 'i', 'o', 'u', 'x', 'e', 'f', 'g',
@@ -313,17 +297,17 @@ namespace octave
     const scanf_format_elt * current (void) const
     {
       return length () > 0 ? fmt_elts[curr_idx] : nullptr;
     }
 
     const scanf_format_elt * next (bool cycle = true)
     {
       static scanf_format_elt dummy
-        (nullptr, 0, false, scanf_format_elt::null, '\0', "");
+        ("", 0, false, scanf_format_elt::null, '\0', "");
 
       curr_idx++;
 
       if (curr_idx >= length ())
         {
           if (cycle)
             curr_idx = 0;
           else
@@ -458,17 +442,17 @@ namespace octave
                                       char modifier,
                                       const std::string& char_class)
   {
     std::string text = buf.str ();
 
     if (! text.empty ())
       {
         scanf_format_elt *elt
-          = new scanf_format_elt (text.c_str (), width, discard, type,
+          = new scanf_format_elt (text, width, discard, type,
                                   modifier, char_class);
 
         fmt_elts.push_back (elt);
       }
 
     buf.clear ();
     buf.str ("");
   }
@@ -738,48 +722,31 @@ namespace octave
       return false;
   }
 
   class
   printf_format_elt
   {
   public:
 
-    printf_format_elt (const char *txt = nullptr, int n = 0, int w = -1,
+    printf_format_elt (const std::string& txt = "", int n = 0, int w = -1,
                        int p = -1, const std::string& f = "",
                        char typ = '\0', char mod = '\0')
-      : text (strsave (txt)), args (n), fw (w), prec (p), flags (f),
+      : text (txt), args (n), fw (w), prec (p), flags (f),
         type (typ), modifier (mod)
     { }
 
-    printf_format_elt (const printf_format_elt& e)
-      : text (strsave (e.text)), args (e.args), fw (e.fw), prec (e.prec),
-        flags (e.flags), type (e.type), modifier (e.modifier)
-    { }
-
-    printf_format_elt& operator = (const printf_format_elt& e)
-    {
-      if (this != &e)
-        {
-          text = strsave (e.text);
-          args = e.args;
-          fw = e.fw;
-          prec = e.prec;
-          flags = e.flags;
-          type = e.type;
-          modifier = e.modifier;
-        }
-
-      return *this;
-    }
-
-    ~printf_format_elt (void) { delete [] text; }
+    printf_format_elt (const printf_format_elt& e) = default;
+
+    printf_format_elt& operator = (const printf_format_elt& e) = default;
+
+    ~printf_format_elt (void) = default;
 
     // The C-style format string.
-    const char *text;
+    std::string text;
 
     // How many args do we expect to consume?
     int args;
 
     // Field width.
     int fw;
 
     // Precision.
@@ -974,21 +941,18 @@ namespace octave
   printf_format_list::add_elt_to_list (int args, const std::string& flags,
                                        int fw, int prec, char type,
                                        char modifier)
   {
     std::string text = buf.str ();
 
     if (! text.empty ())
       {
-        // FIXME: The call to c_str() creates a NULL terminated character
-        //        array.  If there are NULLs already in the format text
-        //        then the text is truncated early.  See bug #53148.
         printf_format_elt *elt
-          = new printf_format_elt (text.c_str (), args, fw, prec, flags,
+          = new printf_format_elt (text, args, fw, prec, flags,
                                    type, modifier);
 
         fmt_elts.push_back (elt);
       }
 
     buf.clear ();
     buf.str ("");
   }
@@ -4396,17 +4360,17 @@ namespace octave
     }                                                                   \
   while (0)
 
 #define DO_LITERAL_CONVERSION()                                         \
   do                                                                    \
     {                                                                   \
       int c = std::istream::traits_type::eof ();                        \
                                                                         \
-      int n = strlen (fmt);                                             \
+      int n = fmt.length ();                                            \
       int i = 0;                                                        \
                                                                         \
       while (i < n && is && (c = is.get ()) != std::istream::traits_type::eof ()) \
         {                                                               \
           if (c == static_cast<unsigned char> (fmt[i]))                 \
             {                                                           \
               i++;                                                      \
               continue;                                                 \
@@ -4752,17 +4716,17 @@ namespace octave
                     else if (nr > 0)
                       mval.resize (nr, max_size / nr, 0.0);
                     else
                       mval.resize (max_size, 1, 0.0);
 
                     data = mval.fortran_vec ();
                   }
 
-                const char *fmt = elt->text;
+                std::string fmt = elt->text;
 
                 bool discard = elt->discard;
 
                 switch (elt->type)
                   {
                   case scanf_format_elt::whitespace_conversion:
                     DO_WHITESPACE_CONVERSION ();
                     break;
@@ -5044,17 +5008,17 @@ namespace octave
     bool quit = false;
 
     std::istream& is = *isp;
 
     std::ios::fmtflags flags = is.flags ();
 
     if (elt)
       {
-        const char *fmt = elt->text;
+        std::string fmt = elt->text;
 
         bool discard = elt->discard;
 
         switch (elt->type)
           {
           case scanf_format_elt::whitespace_conversion:
             DO_WHITESPACE_CONVERSION ();
             break;
@@ -5691,23 +5655,22 @@ namespace octave
   base_stream::do_numeric_printf_conv (std::ostream& os,
                                        const printf_format_elt *elt,
                                        int nsa, int sa_1, int sa_2,
                                        const octave_value& val,
                                        const std::string& who)
   {
     int retval = 0;
 
-    const char *fmt = elt->text;
+    std::string tfmt = elt->text;
 
     if (is_nan_or_inf (val))
       {
         double dval = val.double_value ();
 
-        std::string tfmt = fmt;
         std::string::size_type i1, i2;
 
         tfmt.replace ((i1 = tfmt.rfind (elt->type)), 1, 1, 's');
 
         if ((i2 = tfmt.rfind ('.')) != std::string::npos && i2 < i1)
           {
             tfmt.erase (i2, i1-i2);
             if (elt->prec == -2)
@@ -5742,62 +5705,61 @@ namespace octave
         switch (type)
           {
           case 'd': case 'i': case 'c':
             if (ok_for_signed_int_conv (val))
               {
                 octave_int64 tval = val.int64_scalar_value ();
 
                 // Insert "long" modifier.
-                std::string tfmt = fmt;
                 tfmt.replace (tfmt.rfind (type), 1, llmod + type);
 
                 retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2,
                                           tval.value (), who);
               }
             else
               {
-                std::string tfmt = switch_to_g_format (elt);
+                tfmt = switch_to_g_format (elt);
 
                 double dval = val.double_value (true);
 
                 retval += do_printf_conv (os, tfmt.c_str (), nsa,
                                           sa_1, sa_2, dval, who);
               }
             break;
 
           case 'o': case 'x': case 'X': case 'u':
             if (ok_for_unsigned_int_conv (val))
               {
                 octave_uint64 tval = val.uint64_scalar_value ();
 
                 // Insert "long" modifier.
-                std::string tfmt = fmt;
                 tfmt.replace (tfmt.rfind (type), 1, llmod + type);
 
                 retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2,
                                           tval.value (), who);
               }
             else
               {
-                std::string tfmt = switch_to_g_format (elt);
+                tfmt = switch_to_g_format (elt);
 
                 double dval = val.double_value (true);
 
                 retval += do_printf_conv (os, tfmt.c_str (), nsa,
                                           sa_1, sa_2, dval, who);
               }
             break;
 
           case 'f': case 'e': case 'E':
           case 'g': case 'G':
             {
               double dval = val.double_value (true);
 
-              retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2, dval, who);
+              retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2,
+                                        dval, who);
             }
             break;
 
           default:
             // Note: error is member fcn from base_stream, not ::error.
             // This error does not halt execution so "return ..." must exist.
             error ("%s: invalid format specifier", who.c_str ());
             return -1;
@@ -5860,20 +5822,20 @@ namespace octave
                   }
               }
 
             if (elt->type == '%')
               {
                 os << '%';
                 retval++;
               }
-            else if (elt->args == 0 && elt->text)
+            else if (elt->args == 0 && ! elt->text.empty ())
               {
                 os << elt->text;
-                retval += strlen (elt->text);
+                retval += (elt->text.length ());
               }
             else if (elt->type == 's' || elt->type == 'c')
               {
                 octave_value val = val_cache.get_next_value (elt->type);
 
                 if (val_cache)
                   {
                     if (val.is_string ())
diff --git a/libinterp/corefcn/oct-strstrm.h b/libinterp/corefcn/oct-strstrm.h
--- a/libinterp/corefcn/oct-strstrm.h
+++ b/libinterp/corefcn/oct-strstrm.h
@@ -81,17 +81,17 @@ public:
                      octave::mach_info::float_format ff
                        = octave::mach_info::native_float_format ())
     : octave_base_strstream (arg_md, ff), is (data) { }
 
   octave_istrstream (const std::string& data,
                      std::ios::openmode arg_md = std::ios::out,
                      octave::mach_info::float_format ff
                        = octave::mach_info::native_float_format ())
-    : octave_base_strstream (arg_md, ff), is (data.c_str ()) { }
+    : octave_base_strstream (arg_md, ff), is (data) { }
 
   // No copying!
 
   octave_istrstream (const octave_istrstream&) = delete;
 
   octave_istrstream& operator = (const octave_istrstream&) = delete;
 
 protected:
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -796,8 +796,11 @@
 
 ## bug #39735
 %!assert (sprintf ("a %d b", []), "a  b")
 %!assert (sprintf ("a %d b", ''), "a  b")
 %!assert (sprintf ("a %d b", ' '), "a 32 b")
 %!assert (sprintf ("a %s b", []), "a  b")
 %!assert (sprintf ("a %s b", ''), "a  b")
 %!assert (sprintf ("a %s b", ' '), "a   b")
+
+%!assert <*53148> (double (sprintf ("B\0B")), [66, 0, 66])
+%!assert <*53148> (sscanf ("B\0B 13", "B\0B %d"), 13)
