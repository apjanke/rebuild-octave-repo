# HG changeset patch
# User jwe
# Date 1021490289 0
#      Wed May 15 19:18:09 2002 +0000
# Node ID 31393822395b171d9b67cc499405224466f891d9
# Parent  f9ea3dcf58ee016c06040d361d2c9a54bffbd921
[project @ 2002-05-15 19:18:09 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2002-05-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* error.cc (warning): Don't do anything if Vdebug_option == "off".
+	Only print backtrace if Vdebug_option == "backtrace".
+	(handle_message): Now returns a string containing the text of the
+	formatted message.  Change all callers.
+	(Fwarning): Now a text-style function.  Handle Matlab-compatible
+	warning options.
+	(Flastwarn, set_warning_option): New functions.
+	(Vlast_warning_message, Vwarning_frequency, Vwarning_option):
+	New static variables.
+	(vwarning): Set Vlast_warning_message here too.
+
 2002-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::get_count): Now const.
 
 	* ov.h, ov.cc (octave_value::do_non_const_unary_op,
 	octave_value::assign): Idx is now a list of octave_value_list
 	objects.
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -52,16 +52,27 @@ static bool Vbeep_on_error;
 // is encountered.  This will also inhibit printing of the normal
 // traceback message (you will only see the top-level error message).
 static bool Vdebug_on_error;
 
 // TRUE means that Octave will try to enter the debugger when a warning
 // is encountered.
 static bool Vdebug_on_warning;
 
+// The text of the last warning message.
+static std::string Vlast_warning_message;
+
+// The warning frequency for Matlab handle graphics backwards
+// compatibility warnings (currently not used).
+static std::string Vwarning_frequency = "once";
+
+// The current warning state.  Valid values are "on", "off",
+// "backtrace", or "debug".
+static std::string Vwarning_option = "backtrace";
+
 // Current error state.
 int error_state = 0;
 
 // Current warning state.
 int warning_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
@@ -88,20 +99,23 @@ vwarning (const char *name, const char *
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
 
   output_buf << std::endl << std::ends;
 
   char *msg = output_buf.str ();
 
-  octave_diary << msg;
-  std::cerr << msg;
+  Vlast_warning_message = msg;
 
   delete [] msg;
+
+  octave_diary << Vlast_warning_message;
+
+  std::cerr << Vlast_warning_message;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   if (discard_error_messages)
     return;
 
@@ -298,33 +312,37 @@ pr_where (const char *name)
 
       delete [] msg;
     }
 }
 
 void
 warning (const char *fmt, ...)
 {
-  va_list args;
-  va_start (args, fmt);
-  warning_state = 1;
-  vwarning ("warning", fmt, args);
-  va_end (args);
+  if (Vwarning_option != "off")
+    {
+      va_list args;
+      va_start (args, fmt);
+      warning_state = 1;
+      vwarning ("warning", fmt, args);
+      va_end (args);
 
-  pr_where ("warning");
+      if (Vwarning_option == "backtrace")
+	pr_where ("warning");
 
-  if ((interactive || forced_interactive)
-      && Vdebug_on_warning && curr_function)
-    {
-      unwind_protect_bool (Vdebug_on_warning);
-      Vdebug_on_warning = false;
+      if ((interactive || forced_interactive)
+	  && Vdebug_on_warning && curr_function)
+	{
+	  unwind_protect_bool (Vdebug_on_warning);
+	  Vdebug_on_warning = false;
 
-      do_keyboard (octave_value_list ());
+	  do_keyboard (octave_value_list ());
 
-      unwind_protect::run ();
+	  unwind_protect::run ();
+	}
     }
 }
 
 void
 error (const char *fmt, ...)
 {
   int init_state = error_state;
 
@@ -369,20 +387,20 @@ panic (const char *fmt, ...)
   va_end (args);
   abort ();
 }
 
 typedef void (*error_fun)(const char *, ...);
 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
 
-static octave_value_list
+static std::string
 handle_message (error_fun f, const char *msg, const octave_value_list& args)
 {
-  octave_value_list retval;
+  std::string retval;
 
   std::string tstr;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       octave_value arg;
@@ -415,21 +433,25 @@ handle_message (error_fun f, const char 
   int len = strlen (msg);
   if (msg[len - 1] == '\n')
     {
       if (len > 1)
 	{
 	  char *tmp_msg = strsave (msg);
 	  tmp_msg[len - 1] = '\0';
 	  f ("%s\n", tmp_msg);
+	  retval = tmp_msg;
 	  delete [] tmp_msg;
 	}
     }
   else
-    f ("%s", msg);
+    {
+      f ("%s", msg);
+      retval = msg;
+    }
 
   return retval;
 }
 
 DEFUN (error, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} error (@var{template}, @dots{})\n\
 The @code{error} function formats the optional arguments under the\n\
@@ -480,30 +502,126 @@ a single message:\n\
 @group\n\
 function h () nargin == 1 || error (\"nargin != 1\\n\"); end\n\
 f ()\n\
 error: nargin != 1\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
-  return handle_message (error, "unspecified error", args);
+  octave_value_list retval;
+  handle_message (error, "unspecified error", args);
+  return retval;
 }
 
-DEFUN (warning, args, ,
+static inline octave_value_list
+set_warning_option (const std::string& state,
+		   const std::string& frequency, int nargout)
+{
+  octave_value_list retval;
+
+  if (nargout > 1)
+    retval(1) = Vwarning_frequency;
+
+  if (nargout > 0)
+    retval(0) = Vwarning_option;
+
+  if (! state.empty ())
+    Vwarning_option = state;
+    
+  if (! frequency.empty ())
+    Vwarning_frequency = frequency;
+    
+  return retval;
+}
+
+DEFUN_TEXT (warning, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} warning (@var{msg})\n\
 Print a warning message @var{msg} prefixed by the string @samp{warning: }.  \n\
 After printing the warning message, Octave will continue to execute\n\
 commands.  You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
 @end deftypefn")
 {
-  return handle_message (warning, "unspecified warning", args);
+  octave_value_list retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("warning");
+
+  if (! error_state)
+    {
+      bool done = false;
+
+      if (argc == 1)
+	{
+	  retval = set_warning_option ("", "", nargout);
+	  done = true;
+	}
+      else if (argc == 2)
+	{
+	  std::string arg = argv(1);
+
+	  if (arg == "on" || arg == "off" || arg == "backtrace")
+	    {
+	      retval = set_warning_option (arg, "", nargout);
+	      done = true;
+	    }
+	  else if (arg == "once" || arg == "always")
+	    {
+	      retval = set_warning_option ("", arg, nargout);
+	      done = true;
+	    }
+	  else if (arg == "debug")
+	    {
+	      bind_builtin_variable ("debug_on_warning", 1.0);
+	      retval = set_warning_option ("", "", nargout);
+	      done = true;
+	    }
+	}
+
+      if (! done)
+	{
+	  std::string curr_msg
+	    = handle_message (warning, "unspecified warning", args);
+
+	  if (nargout > 0)
+	    retval(0) = Vlast_warning_message;
+
+	  Vlast_warning_message = curr_msg;
+	}
+    }
+
+  return retval;
+}
+
+DEFUN (lastwarn, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} lastwarn ()\n\
+@deftypefnx {Built-in Function} {} lastwarn (@var{msg})\n\
+Without any arguments, return the last error message.  With one\n\
+argument, set the last warning message to @var{msg}.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("lastwarn");
+
+  if (argc == 1)
+    retval(0) = Vlast_warning_message;
+  else if (argc == 2)
+    Vlast_warning_message = argv(1);
+  else
+    print_usage ("lastwarn");
+
+  return retval;  
 }
 
 DEFUN (usage, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usage (@var{msg})\n\
 Print the message @var{msg}, prefixed by the string @samp{usage: }, and\n\
 set Octave's internal error state such that control will return to the\n\
 top level without evaluating any more commands.  This is useful for\n\
@@ -525,17 +643,19 @@ if (nargin != 2)\n\
 endif\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 to check for the proper number of arguments.\n\
 @end deftypefn")
 {
-  return handle_message (usage, "unknown", args);
+  octave_value_list retval;
+  handle_message (usage, "unknown", args);
+  return retval;
 }
 
 void
 bind_global_error_variable (void)
 {
   if (error_message_buffer)
     {
       *error_message_buffer << std::ends;
