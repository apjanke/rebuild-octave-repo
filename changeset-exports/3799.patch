# HG changeset patch
# User jwe
# Date 982523184 0
#      Sun Feb 18 19:06:24 2001 +0000
# Node ID 36fe147645b630800930bd31da717a633f4f5c42
# Parent  6065668133b15a82c0683ee1c1a82ff0bf16fce4
[project @ 2001-02-18 19:06:24 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2001-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* OPERATORS/op-s-s.cc (el_or, el_and): Return bool value.
+
 2001-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-binop.cc (tree_boolean_expression::rvalue):
 	Don't cast result to double.
 
 	* OPERATORS/op-b-b.cc: Allow & and | operators to return bool values.
 
 2001-02-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/OPERATORS/op-s-s.cc b/src/OPERATORS/op-s-s.cc
--- a/src/OPERATORS/op-s-s.cc
+++ b/src/OPERATORS/op-s-s.cc
@@ -109,33 +109,18 @@ DEFBINOP (el_ldiv, scalar, scalar)
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.double_value () / d);
 }
 
-DEFBINOP (el_and, scalar, scalar)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_scalar&);
-
-  double result = v1.double_value () && v2.double_value ();
-
-  return octave_value (result);
-}
-
-DEFBINOP (el_or, scalar, scalar)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_scalar&);
-
-  double result = v1.double_value () || v2.double_value ();
-
-  return octave_value (result);
-}
+DEFBINOP_OP (el_and, scalar, scalar, &&)
+DEFBINOP_OP (el_or, scalar, scalar, ||)
 
 DEFCONV (matrix_conv, scalar, matrix)
 {
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
