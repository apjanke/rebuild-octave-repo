# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374732766 25200
#      Wed Jul 24 23:12:46 2013 -0700
# Node ID 95c6cada50671db3ec4e0d1e19507294d32fd51a
# Parent  abf6a6147f1af5c7bd0d36489180c4e9fcfbf3cc
__bar__.m: Update to use new __plt_get_axis_arg__.

* scripts/plot/private/__bar__.m: Update to use new __plt_get_axis_arg__.

diff --git a/scripts/plot/private/__bar__.m b/scripts/plot/private/__bar__.m
--- a/scripts/plot/private/__bar__.m
+++ b/scripts/plot/private/__bar__.m
@@ -20,28 +20,24 @@
 ## @deftypefn {Function File} {} __bar__ (@var{vertical}, @var{func}, @dots{})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
 function varargout = __bar__ (vertical, func, varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ((nargout > 1), func, varargin{:});
+  [hax, varargin, nargs] = __plt_get_axis_arg__ (func, varargin{:});
 
   ## Slightly smaller than 0.8 to avoid clipping issue in gnuplot 4.0
   width = 0.8 - 10 * eps;
   group = true;
   bv = 0;
 
-  if (nargin < 3)
-    print_usage ();
-  endif
-
-  if (nargin > 3 && isnumeric (varargin{2}))
+  if (nargs > 1 && isnumeric (varargin{2}))
     x = varargin{1};
     if (isvector (x))
       x = x(:);
     endif
     y = varargin{2};
     if (isvector (y))
       y = y(:);
     endif
@@ -49,32 +45,32 @@ function varargout = __bar__ (vertical, 
       y = varargin{1};
       if (isvector (y))
         y = y(:);
       endif
       x = [1:rows(y)]';
       idx = 2;
     else
       if (! isvector (x))
-        error ("%s: x must be a vector", func);
+        error ("%s: X must be a vector", func);
       endif
       idx = 3;
     endif
   else
     y = varargin{1};
     if (isvector (y))
       y = y(:);
     endif
     x = [1:rows(y)]';
     idx = 2;
   endif
 
   newargs = {};
   have_line_spec = false;
-  while (idx <= nargin - 2)
+  while (idx <= nargs)
     if (ischar (varargin{idx}) && strcmpi (varargin{idx}, "grouped"))
       group = true;
       idx++;
     elseif (ischar (varargin{idx}) && strcmpi (varargin{idx}, "stacked"))
       group = false;
       idx++;
     else
       if ((ischar (varargin{idx}) || iscell (varargin{idx}))
@@ -86,17 +82,17 @@ function varargout = __bar__ (vertical, 
           ##        away from closing ']' on next line.
           newargs = [{"facecolor", linespec.color}, newargs] ;
           idx++;
           continue;
         endif
       endif
       if (isscalar (varargin{idx}))
         width = varargin{idx++};
-      elseif (idx == nargin - 2)
+      elseif (idx == nargs)
         newargs = [newargs,varargin(idx++)];
       elseif (ischar (varargin{idx})
               && strcmpi (varargin{idx}, "basevalue")
               && isscalar (varargin{idx+1}))
         bv = varargin{idx+1};
         idx += 2;
       else
         newargs = [newargs,varargin(idx:idx+1)];
@@ -104,20 +100,20 @@ function varargout = __bar__ (vertical, 
       endif
     endif
   endwhile
 
   xlen = rows (x);
   ylen = rows (y);
 
   if (xlen != ylen)
-    error ("%s: length of x and y must be equal", func);
+    error ("%s: length of X and Y must be equal", func);
   endif
   if (any (x(2:end) < x(1:end-1)))
-    error ("%s: x vector values must be in ascending order", func);
+    error ("%s: X vector values must be in ascending order", func);
   endif
 
   ycols = columns (y);
   if (numel (x) > 1)
     cutoff = min (diff (double (x))) / 2;
   else
     cutoff = 1;
   endif
@@ -148,29 +144,30 @@ function varargout = __bar__ (vertical, 
   yb(2:4:4*ylen,:) = y1;
   yb(3:4:4*ylen,:) = y1;
   yb(4:4:4*ylen,:) = y0;
 
   xb = reshape (xb, [4, numel(xb) / 4 / ycols, ycols]);
   yb = reshape (yb, [4, numel(yb) / 4 / ycols, ycols]);
 
   if (nargout < 2)
-    oldh = gca ();
+    oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
     unwind_protect
-      axes (h);
-      newplot ();
+      hax = newplot (hax);
 
-      tmp = bars (h, vertical, x, y, xb, yb, width, group,
-                  have_line_spec, bv, newargs{:});
-      if (nargout == 1)
-        varargout{1} = tmp;
+      htmp = bars (hax, vertical, x, y, xb, yb, width, group,
+                   have_line_spec, bv, newargs{:});
+    unwind_protect_cleanup
+      if (! isempty (oldfig))
+        set (0, "currentfigure", oldfig);
       endif
-    unwind_protect_cleanup
-      axes (oldh);
     end_unwind_protect
+    if (nargout == 1)
+      varargout{1} = htmp;
+    endif
   else
     if (vertical)
       varargout{1} = xb;
       varargout{2} = yb;
     else
       varargout{1} = yb;
       varargout{2} = xb;
     endif
@@ -191,38 +188,38 @@ function tmp = bars (ax, vertical, x, y,
 
     if (vertical)
       if (! have_color_spec)
         if (ycols == 1)
           lev = clim(1);
         else
           lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
         endif
-        h = patch (hg, xb(:,:,i), yb(:,:,i), "FaceColor", "flat",
+        h = patch (ax, xb(:,:,i), yb(:,:,i), "FaceColor", "flat",
                    "cdata", lev, "parent", hg);
       else
-        h = patch (hg, xb(:,:,i), yb(:,:,i), "parent", hg);
+        h = patch (ax, xb(:,:,i), yb(:,:,i), "parent", hg);
       endif
     else
       if (! have_color_spec)
         if (ycols == 1)
           lev = clim(1);
         else
           lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
         endif
-        h = patch (hg, yb(:,:,i), xb(:,:,i), "FaceColor", "flat",
+        h = patch (ax, yb(:,:,i), xb(:,:,i), "FaceColor", "flat",
                    "cdata", lev, "parent", hg);
       else
-        h = patch (hg, yb(:,:,i), xb(:,:,i), "parent", hg);
+        h = patch (ax, yb(:,:,i), xb(:,:,i), "parent", hg);
       endif
     endif
 
     if (i == 1)
       x_axis_range = get (ax, "xlim");
-      h_baseline = line (x_axis_range, [base_value, base_value],
+      h_baseline = line (ax, x_axis_range, [base_value, base_value],
                          "color", [0, 0, 0]);
       set (h_baseline, "handlevisibility", "off");
       set (h_baseline, "xliminclude", "off");
       addlistener (ax, "xlim", @update_xlim);
       addlistener (h_baseline, "ydata", @update_baseline);
       addlistener (h_baseline, "visible", @update_baseline);
     endif
 
@@ -357,19 +354,19 @@ function move_baseline (h, d)
   if (strcmpi (get (h, "barlayout"), "grouped"))
     update_data (h, d);
   endif
 endfunction
 
 function update_props (h, d)
   kids = get (h, "children");
   set (kids, "edgecolor", get (h, "edgecolor"),
-       "linewidth", get (h, "linewidth"),
-       "linestyle", get (h, "linestyle"),
-       "facecolor", get (h, "facecolor"));
+             "linewidth", get (h, "linewidth"),
+             "linestyle", get (h, "linestyle"),
+             "facecolor", get (h, "facecolor"));
 endfunction
 
 function update_data (h, d)
   persistent recursion = false;
 
   ## Don't allow recursion
   if (! recursion)
     unwind_protect
@@ -431,8 +428,9 @@ function update_group (h, d)
         endif
       endfor
       update_data (h, d);
     unwind_protect_cleanup
       recursion = false;
     end_unwind_protect
   endif
 endfunction
+
