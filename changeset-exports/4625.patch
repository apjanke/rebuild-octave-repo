# HG changeset patch
# User jwe
# Date 1068900680 0
#      Sat Nov 15 12:51:20 2003 +0000
# Node ID 87c01a296263b9ff6f76f03c8ce3b0c787b5886b
# Parent  372fc47d11537e198e94f4c1019749f63aebbc89
[project @ 2003-11-15 12:51:20 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -430,17 +430,17 @@ public:
 
   void resize_no_fill (const dim_vector& dv);
   void resize_and_fill (const dim_vector& dv, const T& val);
 
 public:
 
   void resize (int n) { resize_no_fill (n); }
 
-  //  void resize (int n, const T& val) { resize_and_fill (n, val); }
+  void resize (int n, const T& val) { resize_and_fill (n, val); }
 
   void resize (const dim_vector& dv) { resize_no_fill (dv); }
 
   void resize (const dim_vector& dv, const T& val)
     { resize_and_fill (dv, val); }
 
   Array<T>& insert (const Array<T>& a, int r, int c);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2003-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.h (Array<T>::resize (int, const T&)): Reinstate.
+	* MArray.h (resize): Delete.
+	* MArray2.h (resize): Delete.
+	* DASRT.cc (DASRT::integrate): Use resize, not resize_and_fill.
+	* ODESSA (ODESSA::integrate): Likewise.
+
 2003-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (dist): Depend on stamp-prereq.
 
 2003-11-12  John Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mach-info.c (oct_mach_info::init_float_format) [CRAY]:
 	Kluge to make it work.
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -251,17 +251,17 @@ DASRT::integrate (double tout)
 	  integration_error = true;
 	  return;
 	}
 
       info(4) = user_jsub ? 1 : 0;
 
       DAEFunc::reset = false;
 
-      jroot.resize_and_fill (ng, 1);
+      jroot.resize (ng, 1);
 
       pjroot = jroot.fortran_vec ();
 
       DAERTFunc::reset = false;
 
       // DASRT_options
 
       double mss = maximum_step_size ();
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -61,20 +61,16 @@ public:
   ~MArray (void) { }
 
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
-  void resize (int n) { Array<T>::resize_no_fill (n); }
-
-  void resize (int n, const T& val) { Array<T>::resize_and_fill (n, val); }
-
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 // XXX FIXME XXX -- there must be a better place for this...
 extern void
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -61,23 +61,16 @@ public:
   ~MArray2 (void) { }
 
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
 
-  void resize (int r, int c) { Array2<T>::resize_no_fill (r, c); }
-
-  void resize (int r, int c, const T& val)
-  {
-    Array<T>::resize_and_fill (r, c, val);
-  }
-
   MArray2<T>& insert (const Array2<T>& a, int r, int c)
   {
     Array2<T>::insert (a, r, c);
     return *this;
   }
 
   MArray2<T> transpose (void) const { return Array2<T>::transpose (); }
 
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -576,17 +576,17 @@ ODESSA::integrate (const ColumnVector& t
   Array<Matrix> x_s_out;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
 
-      x_s_out.resize_and_fill (npar, Matrix (n_out, n, 0.0));
+      x_s_out.resize (npar, Matrix (n_out, n, 0.0));
 
       for (int j = 0; j < n_out; j++)
 	{
 	  integrate (tout(j));
 
 	  if (integration_error)
 	    {
 	      retval = ODESSA_result (x_out, x_s_out);
@@ -620,17 +620,17 @@ ODESSA::integrate (const ColumnVector& t
   Array<Matrix> x_s_out;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
 
-      x_s_out.resize_and_fill (npar, Matrix (n_out, n, 0.0));
+      x_s_out.resize (npar, Matrix (n_out, n, 0.0));
 
       int n_crit = tcrit.capacity ();
 
       if (n_crit > 0)
 	{
 	  int i_crit = 0;
 	  int i_out = 0;
 	  double next_crit = tcrit(0);
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -34,17 +34,17 @@ Software Foundation, 59 Temple Place - S
 
 Cell::Cell (const string_vector& sv)
   : ArrayN<octave_value> ()
 {
   int n = sv.length ();
 
   if (n > 0)
     {
-      resize_no_fill (n, 1);
+      resize (dim_vector (n, 1));
 
       for (int i = 0; i < n; i++)
 	elem(i,0) = sv[i];
     }
 }
 
 Cell
 Cell::index (const octave_value_list& idx_arg, bool resize_ok) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-map.cc (Octave_map::assign): Use resize, not resize and fill.
+	* ov-typeinfo.cc (octave_value_typeinfo::do_register_type): Likewise.
+
+	* Cell.cc (Cell::Cell): Pass dim_vector to resize instead of two ints.
+
 2003-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (stamp-liboctave-prereq): New target.
 	($(DEF_FILES), $(MAKEDEPS)): Depend on it.	
 	(distclean): Remove it.
 
 	* version.h (OCTAVE_VERSION): Now 2.1.51.
 	(OCTAVE_API_VERSION): Now api-v2.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -185,22 +185,22 @@ Octave_map::assign (const octave_value_l
       dim_vector rhs_dims = tmp.dims ();
 
       dim_vector curr_dims = dims ();
 
       dim_vector new_dims = common_size (rhs_dims, curr_dims);
 
       if (new_dims != rhs_dims)
 	{
-	  tmp.resize_and_fill (new_dims, fill_value);
+	  tmp.resize (new_dims, fill_value);
 	}
       else if (new_dims != curr_dims)
 	{
 	  for (iterator p = begin (); p != end (); p++)
-	    contents(p).resize_and_fill (rhs_dims, fill_value);
+	    contents(p).resize (rhs_dims, fill_value);
 	}
 
       dimensions = new_dims;
 
       map[k] = tmp;
     }
 
   return *this;
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -158,17 +158,17 @@ octave_value_typeinfo::do_register_type 
       return i;
 
   int len = types.length ();
 
   if (i == len)
     {
       len *= 2;
 
-      types.resize_and_fill (len, std::string ());
+      types.resize (len, std::string ());
 
       unary_ops.resize (static_cast<int> (octave_value::num_unary_ops),
 			len, static_cast<unary_op_fcn> (0));
 
       non_const_unary_ops.resize
 	(static_cast<int> (octave_value::num_unary_ops),
 	 len, static_cast<non_const_unary_op_fcn> (0));
 
