# HG changeset patch
# User jwe
# Date 1074787311 0
#      Thu Jan 22 16:01:51 2004 +0000
# Node ID 8d4bb887f381c965a918ee9d1717290efcad3cd3
# Parent  2c73119a576a98d92084f198787d87e760f38d93
[project @ 2004-01-22 16:01:51 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -838,38 +838,40 @@ Array<T>::resize_and_fill (const dim_vec
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_len = length ();
 
   int len = get_size (dv);
-
+  
   rep = new typename Array<T>::ArrayRep (len);
 
+  dim_vector dv_old = dimensions;
+  
   dimensions = dv;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
   // XXX FIXME XXX -- it is much simpler to fill the whole array
   // first, but probably slower for large arrays, or if the assignment
   // operator for the type T is expensive.  OTOH, the logic for
   // deciding whether an element needs the copied value or the filled
   // value might be more expensive.
 
   for (int i = 0; i < len; i++)
     rep->elem (i) = val;
 
   for (int i = 0; i < old_len; i++)
     {
-      if (index_in_bounds (ra_idx, dimensions))
-	xelem (ra_idx) = old_data[i];
-
-      increment_index (ra_idx, dimensions);
+      if (index_in_bounds (ra_idx, dv_old))
+	xelem (ra_idx) = old_data[get_scalar_idx (ra_idx, dv_old)];
+
+      increment_index (ra_idx, dv_old);
     }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 Array<T>&
@@ -2227,16 +2229,39 @@ assign2 (Array<LT>& lhs, const Array<RT>
 
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.cols ();
+  
+  if (rhs.length () > 2)
+    {
+      dim_vector dv_tmp = rhs.squeeze().dims ();
+  
+      if (dv_tmp.length () > 2)
+	{
+	  (*current_liboctave_error_handler)
+	    ("Dimension mismatch");
+
+	  return 0;
+	}
+      
+      if (dv_tmp.length () == 1)
+	if (rhs_nr == 1)
+	  rhs_nc = dv_tmp.elem (0);
+
+      else if (dv_tmp.length () == 2)
+	{
+	  rhs_nr = dv_tmp.elem (0);
+	  rhs_nc = dv_tmp.elem (1);
+	}
+    }
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx_i;
   idx_vector idx_j;
 
   if (n_idx > 1)
     idx_j = tmp[1];
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-01-22  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* Array.cc (Array<T>::assign2): Check for RHS dimensions larger
+	than 2.
+
 2004-01-21  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* Array.h (Array<T>::chop_trailing_singletons): New function.
 	* Array.cc (Array<T>::assignN): Use it on LHS.
 
 	* Array.cc (Array<T>::assignN): Fix incorrectly nested if statement.
 	Retrieve scalar element by passin 0 instead of an index array.
 	Check for singleton dimensions where RHS is matrix or higher dimension.
