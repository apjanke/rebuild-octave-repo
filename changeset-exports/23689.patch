# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1498401630 -7200
#      Sun Jun 25 16:40:30 2017 +0200
# Node ID b729e97aa8d1e22e8da30ac827c739394a5a0c65
# Parent  cb36684b7a33c2bdf0e8fa3aed201d4ef0180c06
move smart indendation from file_editor_tab to octave_qscintilla

* file-editor-tab.cc (handle_cursor_moved): call smart_indent of _edit_area
  instead former local method do_smart_indent;
  (do_smart_indent) removed here

* file-editor-tab.h: removed do_smart_indent

* octave-qscintilla.cc (smart_indent): moved do_smart_indent to here, with
  previous line and col as parameter

* octave-qscintilla.h: new method smart_indent

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2677,17 +2677,17 @@ file_editor_tab::handle_cursor_moved (in
 {
   if (_edit_area->SendScintilla (QsciScintillaBase::SCI_AUTOCACTIVE))
     show_auto_completion (this);
 
   if (_lines_changed)  // check for smart indentation
     {
       _lines_changed = false;
       if (_is_octave_file && _smart_indent && line == _line+1 && col < _col)
-        do_smart_indent ();
+        _edit_area->smart_indent (_line,_col);
     }
 
   _line = line;
   _col  = col;
 
   _row_indicator->setNum (line+1);
   _col_indicator->setNum (col+1);
 }
@@ -2826,64 +2826,16 @@ file_editor_tab::handle_double_click (in
               _edit_area->setFirstVisibleLine (first_line);
               _edit_area->setCursorPosition (line, col);
               _edit_area->setSelection (line, col - wlen, line, col);
             }
         }
     }
 }
 
-void
-file_editor_tab::do_smart_indent ()
-{
-  QString prev_line = _edit_area->text (_line);
-
-  QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|do|function"
-                          "|unwind_protect|unwind_protect_cleanup|try)"
-                          "[\n\t #%]");
-  if (prev_line.contains (bkey))
-    {
-      _edit_area->indent (_line+1);
-      _edit_area->setCursorPosition (_line+1,
-                                     _edit_area->indentation (_line) +
-                                     _edit_area->indentationWidth ());
-      return;
-    }
-
-  QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch)[\t #%\n]");
-  if (prev_line.contains (mkey))
-    {
-      int prev_ind = _edit_area->indentation (_line-1);
-      int act_ind = _edit_area->indentation (_line);
-
-      if (prev_ind == act_ind)
-        _edit_area->unindent (_line);
-      else if (prev_ind > act_ind)
-        {
-          _edit_area->setIndentation (_line+1, prev_ind);
-          _edit_area->setCursorPosition (_line+1, prev_ind);
-        }
-      return;
-    }
-
-  QRegExp ekey = QRegExp ("^[\t ]*(end|endif|endfor|endwhile|until|endfunction"
-                          "|end_try_catch|end_unwind_protext)[\t #%\n(;]");
-  if (prev_line.contains (ekey))
-    {
-      if (_edit_area->indentation (_line-1) <= _edit_area->indentation (_line))
-        {
-          _edit_area->unindent (_line+1);
-          _edit_area->unindent (_line);
-          _edit_area->setCursorPosition (_line+1,
-                                         _edit_area->indentation (_line));
-        }
-      return;
-    }
-
-}
 
 QString
 file_editor_tab::get_function_name ()
 {
   QRegExp rxfun1 ("^[\t ]*function[^=]+=([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun3 ("^[\t ]*function[^=]+=[\t ]*([^\\s]+)[\t ]*$");
   QRegExp rxfun4 ("^[\t ]*function[\t ]+([^\\s]+)[\t ]*$");
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -254,18 +254,16 @@ private:
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void check_restore_breakpoints (void);
   void center_current_line (bool always=true);
 
   void add_octave_apis (octave_value_list key_ovl);
   QString get_function_name ();
 
-  void do_smart_indent (void);
-
   QsciScintilla::EolMode detect_eol_mode ();
   void update_eol_indicator ();
 
   octave_qscintilla *_edit_area;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -592,16 +592,66 @@ octave_qscintilla::keyPressEvent (QKeyEv
 
       break;
     }
 
   // Call default processing, even if we did the above.
   QsciScintilla::keyPressEvent (e);
 }
 
+// Do smart indendation after if, for, ...
+void
+octave_qscintilla::smart_indent (int line, int col)
+{
+  QString prevline = text (line);
+
+  QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|do|function"
+                          "|unwind_protect|unwind_protect_cleanup|try)"
+                          "[\n\t #%]");
+  if (prevline.contains (bkey))
+    {
+      indent (line+1);
+      setCursorPosition (line+1,
+                                     indentation (line) +
+                                     indentationWidth ());
+      return;
+    }
+
+  QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch)[\t #%\n]");
+  if (prevline.contains (mkey))
+    {
+      int prev_ind = indentation (line-1);
+      int act_ind = indentation (line);
+
+      if (prev_ind == act_ind)
+        unindent (line);
+      else if (prev_ind > act_ind)
+        {
+          setIndentation (line+1, prev_ind);
+          setCursorPosition (line+1, prev_ind);
+        }
+      return;
+    }
+
+  QRegExp ekey = QRegExp ("^[\t ]*(end|endif|endfor|endwhile|until|endfunction"
+                          "|end_try_catch|end_unwind_protext)[\t #%\n(;]");
+  if (prevline.contains (ekey))
+    {
+      if (indentation (line-1) <= indentation (line))
+        {
+          unindent (line+1);
+          unindent (line);
+          setCursorPosition (line+1,
+                                         indentation (line));
+        }
+      return;
+    }
+
+}
+
 // Is a specific cursor position in a line or block comment?
 int
 octave_qscintilla::is_style_comment (int pos)
 {
   int lexer = SendScintilla (QsciScintillaBase::SCI_GETLEXER);
   int style = get_style (pos);
 
   switch (lexer)
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -53,16 +53,17 @@ public:
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word ();
   void clear_indicator (int indicator_style);
   void get_current_position (int *pos, int *line, int *col);
   QString comment_string ();
   int get_style (int pos = -1);
   int is_style_comment (int pos = -1);
   void set_auto_endif (int ai) { _auto_endif = ai; }
+  void smart_indent (int line, int col);
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
   void create_context_menu_signal (QMenu*);
   void context_menu_edit_signal (const QString&);
   void qsci_has_focus_signal (bool);
   void status_update (bool,bool);
