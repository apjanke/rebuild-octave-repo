# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1489350734 -3600
#      Sun Mar 12 21:32:14 2017 +0100
# Node ID a921b6b772f3a8c01a07cb1bb2f708e874fc7649
# Parent  efb1395193889d24720d08653c3c3b089a31ec7a
Silence more "deprecated-property" warnings (bug #50327).

* graphics.cc (toggle_warn): new static function to switch warnings on and off.
* graphics.cc (base_graphics_object::remove_all_listeners,
xreset_default_properties, axes::reset_default_properties, F__get__):
make use of toggle_warn to handle deprecated-property warnings.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2935,33 +2935,50 @@ base_graphics_toolkit::initialize (const
 void
 base_graphics_toolkit::finalize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   finalize (go);
 }
 
+static int
+toggle_warn (std::string id, bool on, int state = -1)
+{
+  if (! on)
+    {
+      state = warning_enabled (id);
+      disable_warning (id);
+    }
+  else
+    {
+      if (state == 1)
+        set_warning_state (id, "on");
+      else if (state == 2)
+        set_warning_state (id, "error");
+    }
+  return state;
+}
+
 static void
 xreset_default_properties (graphics_handle h,
                            property_list::pval_map_type factory_pval)
 {
   graphics_object go = gh_manager::get_object (h);
 
   // Replace factory defaults by user defined ones
   std::string go_name = go.get_properties ().graphics_object_name ();
   property_list::pval_map_type pval;
   go.build_user_defaults_map (pval, go_name);
 
   for (const auto& p : pval)
     factory_pval[p.first] = p.second;
 
   // Save warning state of "Octave:deprecated-property"
-  int old_dep_prop = warning_enabled ("Octave:deprecated-property");
-  disable_warning ("Octave:deprecated-property");
+  int state = toggle_warn ("Octave:deprecated-property", false);
 
   // Reset defaults
   for (const auto& p : factory_pval)
     {
       std::string pname = p.first;
 
       // Don't reset internal properties and handle_properties
       if (! go.has_readonly_property (pname)
@@ -2975,21 +2992,17 @@ xreset_default_properties (graphics_hand
             go.set (pname, p.second);
         }
     }
 
   // set *mode properties
   for (const auto& p : pval)
     go.set (p.first, p.second);
 
-  // Re-enable warning state of "Octave:deprecated-property"
-  if (old_dep_prop == 1)
-    set_warning_state ("Octave:deprecated-property", "on");
-  else if (old_dep_prop == 2)
-    set_warning_state ("Octave:deprecated-property", "error");
+  toggle_warn ("Octave:deprecated-property", true, state);
 }
 
 // ---------------------------------------------------------------------
 
 void
 base_properties::set_from_list (base_graphics_object& bgo,
                                 property_list& defaults)
 {
@@ -3296,17 +3309,19 @@ base_graphics_object::update_axis_limits
 
   if (parent_go)
     parent_go.update_axis_limits (axis_type, h);
 }
 
 void
 base_graphics_object::remove_all_listeners (void)
 {
+  int state = toggle_warn ("Octave:deprecated-property", false);
   octave_map m = get (true).map_value ();
+  toggle_warn ("Octave:deprecated-property", true, state);
 
   for (const auto& pm : m)
     {
       // FIXME: there has to be a better way.  I think we want to
       // ask whether it is OK to delete the listener for the given
       // property.  How can we know in advance that it will be OK?
 
       octave::unwind_protect frame;
@@ -4538,18 +4553,18 @@ figure::get_default (const caseless_str&
   return retval;
 }
 
 void
 figure::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
-
   property_list::pval_map_type plist = xproperties.factory_defaults ();
+
   plist.erase ("units");
   plist.erase ("position");
   plist.erase ("outerposition");
   plist.erase ("paperunits");
   plist.erase ("paperposition");
   plist.erase ("windowstyle");
 
   remove_all_listeners ();
@@ -8199,28 +8214,23 @@ axes::properties::clear_zoom_stack (bool
 
 void
 axes::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
   // Save warning state of "Octave:deprecated-property"
-  int old_dep_prop = warning_enabled ("Octave:deprecated-property");
-  disable_warning ("Octave:deprecated-property");
+  int state = toggle_warn ("Octave:deprecated-property", false);
 
   // reset factory defaults
   remove_all_listeners ();
   set_defaults ("reset");
 
-  // Re-enable warning state of "Octave:deprecated-property"
-  if (old_dep_prop == 1)
-    set_warning_state ("Octave:deprecated-property", "on");
-  else if (old_dep_prop == 2)
-    set_warning_state ("Octave:deprecated-property", "error");
+  toggle_warn ("Octave:deprecated-property", true, state);
 }
 
 void
 axes::initialize (const graphics_object& go)
 {
   base_graphics_object::initialize (go);
 
   xinitialize (xproperties.get_title ());
@@ -10648,25 +10658,21 @@ Undocumented internal function.
   for (octave_idx_type n = 0; n < hcv_len; n++)
     {
       graphics_object go = gh_manager::get_object (hcv(n));
 
       if (! go)
         error ("get: invalid handle (= %g)", hcv(n));
 
       // Disable "Octave:deprecated-property" warnings
-      int old_dep_prop = warning_enabled ("Octave:deprecated-property");
-      disable_warning ("Octave:deprecated-property");
+      int state = toggle_warn ("Octave:deprecated-property", false);
 
       vals(n) = go.get (true);
 
-      if (old_dep_prop == 1)
-        set_warning_state ("Octave:deprecated-property", "on");
-      else if (old_dep_prop == 2)
-        set_warning_state ("Octave:deprecated-property", "error");
+      toggle_warn ("Octave:deprecated-property", true, state);
     }
 
   octave_idx_type vals_len = vals.numel ();
 
   if (vals_len > 1)
     return ovl (vals);
   else if (vals_len == 1)
     return ovl (vals(0));
