# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1390466621 18000
#      Thu Jan 23 03:43:41 2014 -0500
# Node ID a91654d70f99aa728d2dd4b13965ea0d177e5ea5
# Parent  7a1a71e3f328914b0fa8305ac0b6fc591e4c08ae
# Parent  1ecfcfa4858e3e988f9834ff6e2d0a3fd747c263
maint: Periodic merge of gui-release to default.

diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -13,16 +13,18 @@
 @c for more details.
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Diagonal and Permutation Matrices
 @chapter Diagonal and Permutation Matrices
+@cindex diagonal and permutation matrices
+@cindex matrices, diagonal and permutation
 
 @menu
 * Basic Usage::          Creation and Manipulation of Diagonal/Permutation Matrices
 * Matrix Algebra::       Linear Algebra with Diagonal/Permutation Matrices
 * Function Support::     Functions That Are Aware of These Matrices
 * Example Code::         Examples of Usage
 * Zeros Treatment::      Differences in Treatment of Zero Elements
 @end menu
@@ -219,16 +221,17 @@ are treated specially when performed on 
 
 @menu
 * Expressions Involving Diagonal Matrices::
 * Expressions Involving Permutation Matrices::
 @end menu
 
 @node Expressions Involving Diagonal Matrices
 @subsection Expressions Involving Diagonal Matrices
+@cindex diagonal matrix expressions
 
 Assume @var{D} is a diagonal matrix.  If @var{M} is a full matrix,
 then @code{D*M} will scale the rows of @var{M}.  That means,
 if @code{S = D*M}, then for each pair of indices
 i,j it holds 
 @tex
 $$S_{ij} = D_{ii} M_{ij}$$
 @end tex
@@ -255,32 +258,33 @@ then @code{D*M} is equivalent to
 @example
 [D(1:n,n) * M; zeros(m-n, columns (M))],
 @end example
 
 @noindent
 i.e., null rows are appended to the result.
 The situation for right-multiplication @code{M*D} is analogous.
 
+@cindex pseudoinverse
 The expressions @code{D \ M} and @code{M / D} perform inverse scaling.
 They are equivalent to solving a diagonal (or rectangular diagonal)
 in a least-squares minimum-norm sense.  In exact arithmetic, this is
 equivalent to multiplying by a pseudoinverse.  The pseudoinverse of
 a rectangular diagonal matrix is again a rectangular diagonal matrix
 with swapped dimensions, where each nonzero diagonal element is replaced
 by its reciprocal.
 The matrix division algorithms do, in fact, use division rather than 
 multiplication by reciprocals for better numerical accuracy; otherwise, they
 honor the above definition.  Note that a diagonal matrix is never truncated due
-to ill-conditioning; otherwise, it would not be much useful for scaling.  This
+to ill-conditioning; otherwise, it would not be of much use for scaling.  This
 is typically consistent with linear algebra needs.  A full matrix that only
-happens to be diagonal (an is thus not a special object) is of course treated
+happens to be diagonal (and is thus not a special object) is of course treated
 normally.
 
-Multiplication and division by diagonal matrices works efficiently also when
+Multiplication and division by diagonal matrices work efficiently also when
 combined with sparse matrices, i.e., @code{D*S}, where @var{D} is a diagonal
 matrix and @var{S} is a sparse matrix scales the rows of the sparse matrix and
 returns a sparse matrix.  The expressions @code{S*D}, @code{D\S}, @code{S/D}
 work analogically.
 
 If @var{D1} and @var{D2} are both diagonal matrices, then the expressions
 
 @example
@@ -394,16 +398,18 @@ without converting it to a full one:
 @dfn{abs}, @dfn{real}, @dfn{imag}, @dfn{conj}, @dfn{sqrt}. 
 A diagonal matrix can also be returned from the @dfn{balance}
 and @dfn{svd} functions.
 The @dfn{sparse} function will convert a diagonal matrix efficiently to a
 sparse matrix.
 
 @node Permutation Matrix Functions
 @subsection Permutation Matrix Functions
+@cindex matrix, permutation functions
+@cindex permutation matrix functions
 
 @dfn{inv} and @dfn{pinv} will invert a permutation matrix, preserving its
 specialness.  @dfn{det} can be applied to a permutation matrix, efficiently
 calculating the sign of the permutation (which is equal to the determinant).
 
 A permutation matrix can also be returned from the built-in functions
 @dfn{lu} and @dfn{qr}, if a pivoted factorization is requested.
 
@@ -450,17 +456,17 @@ The following expression is a way to eff
 permutation, given by a permutation vector @var{p}.  It will also work
 in earlier versions of Octave, but slowly.
 
 @example
   det (eye (length (p))(p, :))
 @end example
 
 @noindent
-Finally, here's how you solve a linear system @code{A*x = b}
+Finally, here's how to solve a linear system @code{A*x = b}
 with Tikhonov regularization (ridge regression) using SVD (a skeleton only):
 
 @example
 @group
   m = rows (A); n = columns (A);
   [U, S, V] = svd (A);
   ## determine the regularization factor alpha
   ## alpha = @dots{}
@@ -472,26 +478,27 @@ with Tikhonov regularization (ridge regr
   ## transform to solution basis
   x = V*x;
 @end group
 @end example
 
 
 @node Zeros Treatment
 @section Differences in Treatment of Zero Elements
+@cindex matrix, zero elements
 
 Making diagonal and permutation matrices special matrix objects in their own
 right and the consequent usage of smarter algorithms for certain operations
 implies, as a side effect, small differences in treating zeros.
-The contents of this section applies also to sparse matrices, discussed in
-the following chapter.
+The contents of this section apply also to sparse matrices, discussed in
+the following chapter. (@pxref{Sparse Matrices})
 
-The IEEE standard defines the result of the expressions @code{0*Inf} and 
-@code{0*NaN} as @code{NaN}, as it has been generally agreed that this is the
-best compromise.
+The IEEE floating point standard defines the result of the expressions @code{0*Inf} and 
+@code{0*NaN} as @code{NaN}. This is widely agreed to be a good
+compromise.
 Numerical software dealing with structured and sparse matrices (including
 Octave) however, almost always makes a distinction between a "numerical zero"
 and an "assumed zero". 
 A "numerical zero" is a zero value occurring in a place where any floating-point
 value could occur.  It is normally stored somewhere in memory as an explicit
 value. 
 An "assumed zero", on the contrary, is a zero matrix element implied by the
 matrix structure (diagonal, triangular) or a sparsity pattern; its value is
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -13,32 +13,34 @@
 @c for more details.
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Linear Algebra
 @chapter Linear Algebra
+@cindex linear algebra
 
 This chapter documents the linear algebra functions of Octave.
 Reference material for many of these functions may be found in
 Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
 1989, and in the @cite{@sc{lapack} Users' Guide}, SIAM, 1992.
 
 @menu
 * Techniques Used for Linear Algebra::
 * Basic Matrix Functions::
 * Matrix Factorizations::
 * Functions of a Matrix::
 * Specialized Solvers::
 @end menu
 
 @node Techniques Used for Linear Algebra
 @section Techniques Used for Linear Algebra
+@cindex linear algebra, techniques
 
 Octave includes a polymorphic solver, that selects an appropriate
 matrix factorization depending on the properties of the matrix itself. 
 Generally, the cost of determining the matrix type is small relative to 
 the cost of factorizing the matrix itself, but in any case the matrix 
 type is cached once it is calculated, so that it is not re-determined 
 each time it is used in a linear equation.
 
@@ -76,16 +78,17 @@ used with care.
 It should be noted that the test for whether a matrix is a candidate for
 Cholesky@tie{}factorization, performed above and by the @code{matrix_type}
 function, does not give a certainty that the matrix is
 Hermitian.  However, the attempt to factorize the matrix will quickly
 flag a non-Hermitian matrix.
 
 @node Basic Matrix Functions
 @section Basic Matrix Functions
+@cindex matrix functions, basic
 
 @DOCSTRING(balance)
 
 @DOCSTRING(cond)
 
 @DOCSTRING(det)
 
 @DOCSTRING(eig)
@@ -104,27 +107,29 @@ flag a non-Hermitian matrix.
 
 @DOCSTRING(null)
 
 @DOCSTRING(orth)
 
 @DOCSTRING(mgorth)
 
 @DOCSTRING(pinv)
+@cindex pseudoinverse
 
 @DOCSTRING(rank)
 
 @DOCSTRING(rcond)
 
 @DOCSTRING(trace)
 
 @DOCSTRING(rref)
 
 @node Matrix Factorizations
 @section Matrix Factorizations
+@cindex matrix factorizations
 
 @DOCSTRING(chol)
 
 @DOCSTRING(cholinv)
 
 @DOCSTRING(chol2inv)
 
 @DOCSTRING(cholupdate)
@@ -168,31 +173,33 @@ flag a non-Hermitian matrix.
 @c FIXME -- should there be a new section here?
 
 @DOCSTRING(housh)
 
 @DOCSTRING(krylov)
 
 @node Functions of a Matrix
 @section Functions of a Matrix
+@cindex matrix, functions of
 
 @DOCSTRING(expm)
 
 @DOCSTRING(logm)
 
 @DOCSTRING(sqrtm)
 
 @DOCSTRING(kron)
 
 @DOCSTRING(blkmm)
 
 @DOCSTRING(syl)
 
 @node Specialized Solvers
 @section Specialized Solvers
+@cindex matrix, specialized solvers
 
 @DOCSTRING(bicg)
 
 @DOCSTRING(bicgstab)
 
 @DOCSTRING(cgs)
 
 @DOCSTRING(gmres)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -44,16 +44,17 @@ of the @code{graphics_toolkit} property 
 figure.  This is explained in @ref{Graphics Data Structures}.
 @strong{Caution:} The FLTK toolkit uses single precision variables internally
 which limits the maximum value that can be displayed to approximately
 @math{10^{38}}.  If your data contains larger values you must use the gnuplot
 toolkit which supports values up to @math{10^{308}}.
 
 @node High-Level Plotting
 @section High-Level Plotting
+@cindex plotting, high-level
 
 Octave provides simple means to create many different types of two- and
 three-dimensional plots using high-level functions.
 
 If you need more detailed control, see @ref{Graphics Data Structures}
 and @ref{Advanced Plotting}.
 
 @menu
@@ -256,18 +257,19 @@ get or set individual axis limits.  Each
 @anchor{XREFylim}
 @anchor{XREFzlim}
 @findex ylim
 @findex zlim
 @DOCSTRING(xlim)
 
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
-
-Octave can plot a function from a function handle inline function or
+@cindex plotting, two-dimensional functions
+
+Octave can plot a function from a function handle, inline function, or
 string defining the function without the user needing to explicitly
 create the data to be plotted.  The function @code{fplot} also generates
 two-dimensional plots with linear axes using a function name and limits
 for the range of the x-coordinate instead of the x and y data.  For
 example,
 
 @example
 @group
@@ -295,16 +297,17 @@ function include @code{ezplot}, @code{ez
 
 @node Two-dimensional Geometric Shapes
 @subsubsection Two-dimensional Geometric Shapes
 
 @DOCSTRING(rectangle)
 
 @node Three-Dimensional Plots
 @subsection Three-Dimensional Plots
+@cindex plotting, three-dimensional
 
 The function @code{mesh} produces mesh surface plots.  For example,
 
 @example
 @group
 tx = ty = linspace (-8, 8, 41)';
 [xx, yy] = meshgrid (tx, ty);
 r = sqrt (xx .^ 2 + yy .^ 2) + eps;
@@ -475,16 +478,17 @@ See @ref{Text Properties} for the proper
 @DOCSTRING(box)
 
 @DOCSTRING(grid)
 
 @DOCSTRING(colorbar)
 
 @node Multiple Plots on One Page
 @subsection Multiple Plots on One Page
+@cindex plotting, multiple plots per figure
 
 Octave can display more than one plot in a single figure.  The simplest
 way to do this is to use the @code{subplot} function to divide the plot
 area into a series of subplot windows that are indexed by an integer.
 For example,
 
 @example
 @group
@@ -501,16 +505,17 @@ the other a cosine wave.  The first call
 into two plotting areas (two rows and one column) and makes the first plot
 area active.  The grid of plot areas created by @code{subplot} is
 numbered in column-major order (top to bottom, left to right).
 
 @DOCSTRING(subplot)
 
 @node Multiple Plot Windows
 @subsection Multiple Plot Windows
+@cindex plotting, multiple plot windows
 
 You can open multiple plot windows using the @code{figure} function.
 For example,
 
 @example
 @group
 figure (1);
 fplot (@@sin, [-10, 10]);
@@ -522,16 +527,17 @@ fplot (@@cos, [-10, 10]);
 @noindent
 creates two figures, with the first displaying a sine wave and
 the second a cosine wave.  Figure numbers must be positive integers.
 
 @DOCSTRING(figure)
 
 @node Manipulation of Plot Windows
 @subsection Manipulation of Plot Windows
+@cindex plotting, window manipulation
 
 By default, Octave refreshes the plot window when a prompt is printed,
 or when waiting for input.  The
 @code{drawnow} function is used to cause a plot window to be updated.
 
 @DOCSTRING(drawnow)
 
 Only figures that are modified will be updated.  The @code{refresh}
@@ -898,16 +904,17 @@ The result of which can be seen in @ref{
 @float Figure,fig:extendedtext
 @center @image{extended,4in}
 @caption{Example of inclusion of text with the @TeX{} interpreter}
 @end float
 @end ifnotinfo
 
 @node Printing and Saving Plots
 @subsection Printing and Saving Plots
+@cindex plotting, saving and printing plots
 @cindex printing plots
 @cindex saving plots
 
 The @code{print} command allows you to send plots to you printer and
 to save plots in a variety of formats.  For example,
 
 @example
 print -dpsc
@@ -1248,16 +1255,17 @@ name) then only the defaults for the req
 
 @DOCSTRING(ancestor)
 
 @DOCSTRING(allchild)
 
 @DOCSTRING(findfigs)
 
 @cindex saving graphics objects
+@cindex graphics objects, saving
 
 Figures can be printed or saved in many graphics formats with @code{print} and
 @code{saveas}.  Occasionally, however, it may be useful to save the original
 Octave handle graphic directly so that further modifications can be made such
 as modifying a title or legend.
 
 This can be accomplished with the following functions by
 
@@ -2980,18 +2988,18 @@ The properties of the bar series are
 @item  showbaseline
 @itemx baseline
 @itemx basevalue
 The property @code{showbaseline} flags whether the baseline of the bar
 series is displayed (default is @qcode{"on"}).  The handle of the graphics
 object representing the baseline is given by the @code{baseline} property and
 the y-value of the baseline by the @code{basevalue} property.
 
-Changes to any of these property are propagated to the other members of
-the bar series and to the baseline itself.  Equally changes in the
+Changes to any of these properties are propagated to the other members of
+the bar series and to the baseline itself.  Equally, changes in the
 properties of the base line itself are propagated to the members of the
 corresponding bar series.
 
 @item  barwidth
 @itemx barlayout
 @itemx horizontal
 The property @code{barwidth} is the width of the bar corresponding to
 the @var{width} variable passed to @code{bar} or @var{barh}.  Whether the
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1,8 +1,9 @@
+
 /*
 
 Copyright (C) 2011-2013 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -51,16 +52,17 @@ along with Octave; see the file COPYING.
 #include "file-editor-tab.h"
 #include "file-editor.h"
 
 #include "file-ops.h"
 
 #include "debug.h"
 #include "octave-qt-link.h"
 #include "version.h"
+#include "utils.h"
 
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
 file_editor_tab::file_editor_tab (const QString& directory_arg)
 {
   QString directory = directory_arg;
   _lexer_apis = 0;
   _app_closing = false;
@@ -1222,26 +1224,30 @@ file_editor_tab::save_file_as (bool remo
       connect (fileDialog, SIGNAL (fileSelected (const QString&)),
                this, SLOT (handle_save_file_as_answer (const QString&)));
     }
 
   show_dialog (fileDialog);
 }
 
 bool
-file_editor_tab::save_file_check_spaces (QString file_name)
+file_editor_tab::check_valid_identifier (QString file_name)
 {
-  QFileInfo file = QFileInfo(file_name);
+  QFileInfo file = QFileInfo (file_name);
+  QString base_name = file.baseName ();
 
-  if (file.suffix () == "m" && file.baseName ().contains (' '))
+  if ((file.suffix () == "m")
+      && (! valid_identifier (base_name.toStdString ())))
     {
       int ans = QMessageBox::question (0, tr ("Octave Editor"),
-         tr ("It is not advisable to save an Octave script\n"
-              "in a file with a name containing spaces.\n\n"
-              "Do you wnat to chose another name?"),
+         tr ("\"%1\"\n"
+             "is not a valid identifier.\n\n"
+             "If you keep this file name, you will not be able to\n"
+             "call your script using its name as an Octave command.\n\n"
+             "Do you want to choose another name?").arg (base_name),
           QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
 
       if (ans == QMessageBox::Yes)
         return true;
     }
 
   return false;
 }
@@ -1252,31 +1258,31 @@ file_editor_tab::handle_save_file_as_ans
   if (saveFileName == _file_name)
     {
       // same name as actual file, save it as "save" would do
       save_file (saveFileName);
     }
   else
     {
       // Have editor check for conflict, do not delete tab after save.
-      if (save_file_check_spaces (saveFileName))
+      if (check_valid_identifier (saveFileName))
         save_file_as (false);
       else
         emit editor_check_conflict_save (saveFileName, false);
     }
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_close (const QString& saveFileName)
 {
   // saveFileName == _file_name can not happen, because we only can get here
   // when we close a tab and _file_name is not a valid file name yet
 
   // Have editor check for conflict, delete tab after save.
-  if (save_file_check_spaces (saveFileName))
+  if (check_valid_identifier (saveFileName))
     save_file_as (true);
   else
     emit editor_check_conflict_save (saveFileName, true);
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_cancel ()
 {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -175,17 +175,17 @@ private:
     std::string file;
     std::string dir;
     std::string function_name;
   };
 
   bool valid_file_name (const QString& file=QString ());
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
-  bool save_file_check_spaces (QString file_name);
+  bool check_valid_identifier (QString file_name);
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void show_dialog (QDialog *dlg);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -55,16 +55,17 @@ along with Octave; see the file COPYING.
 #include "Array.h"
 #include "cmd-edit.h"
 #include "url-transfer.h"
 
 #include "builtin-defun-decls.h"
 #include "defaults.h"
 #include "symtab.h"
 #include "version.h"
+#include "utils.h"
 
 static file_editor_interface *
 create_default_editor (QWidget *p)
 {
 #ifdef HAVE_QSCINTILLA
   return new file_editor (p);
 #else
   return 0;
@@ -258,26 +259,27 @@ main_window::execute_command_in_terminal
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_in_terminal (const QFileInfo& info)
 {
   QString file_name = info.canonicalFilePath ();
-  QString command = "run \""+file_name+"\"";
+  QString command = "run \"" + file_name + "\"";
 
   QString function_name = info.fileName ();
   function_name.chop (info.suffix ().length () + 1);
 
-  if (function_name.contains (' '))
+  if (! valid_identifier (function_name.toStdString ()))
     {
       int ans = QMessageBox::question (0, tr ("Octave"),
          tr ("The file %1\n"
-             "contains spaces and can not be executed.\n\n"
+             "can not be executed because its name\n"
+             "is not a valid identifier.\n\n"
              "Do you want to execute\n%2\n"
              "instead?").
           arg (file_name).arg (command),
           QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
 
       if (ans == QMessageBox::Yes)
         execute_command_in_terminal (command);
 
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -549,25 +549,22 @@ s = urlread (\"http://www.google.com/sea
   std::ostringstream buf;
 
   url_transfer curl = url_transfer (url, buf);
 
   if (curl.is_valid ())
     {
       curl.http_action (param, method);
 
-      if (curl.good ())
+      if (nargout > 0)
         {
-          if (nargout > 0)
-            {
-              // Return empty string if no error occured.
-              retval(2) = curl.good () ? "" : curl.lasterror ();
-              retval(1) = curl.good ();
-              retval(0) = buf.str ();
-            }
+          // Return empty string if no error occured.
+          retval(2) = curl.good () ? "" : curl.lasterror ();
+          retval(1) = curl.good ();
+          retval(0) = buf.str ();
         }
 
       if (nargout < 2 && ! curl.good ())
         error ("urlread: %s", curl.lasterror().c_str());
     }
   else
     error ("support for url transfers was disabled when Octave was built");
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2308,16 +2308,18 @@ octave_base_lexer::is_keyword_token (con
   int c = current_input_column;
 
   int len = s.length ();
 
   const octave_kw *kw = octave_kw_hash::in_word_set (s.c_str (), len);
 
   if (kw)
     {
+      bool previous_at_bos = at_beginning_of_statement;
+
       // May be reset to true for some token types.
       at_beginning_of_statement = false;
 
       token *tok_val = 0;
 
       switch (kw->kw_id)
         {
         case break_kw:
@@ -2341,17 +2343,20 @@ octave_base_lexer::is_keyword_token (con
           break;
 
         case end_kw:
           if (inside_any_object_index ()
               || (! reading_classdef_file
                   && (defining_func
                       && ! (looking_at_return_list
                             || parsed_function_name.top ()))))
-            return 0;
+            {
+              at_beginning_of_statement = previous_at_bos;
+              return 0;
+            }
 
           tok_val = new token (end_kw, token::simple_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case end_try_catch_kw:
           tok_val = new token (end_try_catch_kw, token::try_catch_end, l, c);
           at_beginning_of_statement = true;
@@ -2443,27 +2448,33 @@ octave_base_lexer::is_keyword_token (con
           decrement_promptflag ();
           break;
 
         case get_kw:
         case set_kw:
           // 'get' and 'set' are keywords in classdef method
           // declarations.
           if (! maybe_classdef_get_set_method)
-            return 0;
+            {
+              at_beginning_of_statement = previous_at_bos;
+              return 0;
+            }
           break;
 
         case enumeration_kw:
         case events_kw:
         case methods_kw:
         case properties_kw:
           // 'properties', 'methods' and 'events' are keywords for
           // classdef blocks.
           if (! parsing_classdef)
-            return 0;
+            {
+              at_beginning_of_statement = previous_at_bos;
+              return 0;
+            }
           // fall through ...
 
         case classdef_kw:
           // 'classdef' is always a keyword.
           decrement_promptflag ();
 
           if (! force_script && token_count == 0 && input_from_file ())
             {
