# HG changeset patch
# User jwe
# Date 823915079 0
#      Sat Feb 10 01:17:59 1996 +0000
# Node ID 8c6cea97eb80e62d60892dbd37343adbf6c6c2f4
# Parent  fb2b7ebf77e4744ef41f7a48777e161d050079af
[project @ 1996-02-10 01:12:46 by jwe]

diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -61,25 +61,16 @@ typedef builtin_function * (*Octave_buil
 
 // XXX FIXME XXX -- need to provide some way to ensure that functions
 // that we are going to use will use the same naming convention as
 // Octave's internal functions.  It needs to be simpler than the
 // current DEFUN_DLD() macro, which assumes you know how to name the
 // function, the struct, and the helper function.
 
 static string
-mangle_octave_builtin_name (const string& name)
-{
-  string retval ("F");
-  retval.append (name);
-  retval.append ("__FRC13Octave_objecti");
-  return retval;
-}
-
-static string
 mangle_octave_oct_file_name (const string& name)
 {
   string retval ("FS");
   retval.append (name);
   retval.append ("__Fv");
   return retval;
 }
 
@@ -168,60 +159,40 @@ resolve_octave_reference (const string& 
 #elif defined (WITH_SHL)
 
   return shl_resolve_octave_reference (name, file);
 
 #endif
 }
 #endif
 
-Octave_builtin_fcn
-#if defined (WITH_DYNAMIC_LINKING)
-load_octave_builtin (const string& name)
-#else
-load_octave_builtin (const string&)
-#endif
-{
-  Octave_builtin_fcn retval = 0;
-
-#if defined (WITH_DYNAMIC_LINKING)
-
-  string mangled_name = mangle_octave_builtin_name (name);
-
-  retval = (Octave_builtin_fcn) resolve_octave_reference (mangled_name);
-
-#endif
-
-  return retval;
-}
-
 int
 load_octave_oct_file (const string& name)
 {
   int retval = 0;
 
 #if defined (WITH_DYNAMIC_LINKING)
 
   string oct_file = oct_file_in_path (name);
 
-  if (oct_file.empty ())
+  if (! oct_file.empty ())
     {
       string mangled_name = mangle_octave_oct_file_name (name);
 
       Octave_builtin_fcn_struct_fcn f =
 	(Octave_builtin_fcn_struct_fcn) resolve_octave_reference
 	  (mangled_name, oct_file);
 
       if (f)
 	{
 	  builtin_function *s = f ();
 
 	  if (s)
 	    {
-	      install_builtin_function (s);
+	      install_builtin_function (*s);
 	      retval = 1;
 	    }
 	}
     }
 
 #else
 
   (void) name;
diff --git a/src/dynamic-ld.h b/src/dynamic-ld.h
--- a/src/dynamic-ld.h
+++ b/src/dynamic-ld.h
@@ -23,18 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_dynamic_ld_h)
 #define octave_dynamic_ld_h 1
 
 #include "oct-obj.h"
 
 typedef Octave_object (*Octave_builtin_fcn)(const Octave_object&, int);
 
-extern Octave_builtin_fcn load_octave_builtin (const string& name);
-
 extern int load_octave_oct_file (const string& name);
 
 extern void init_dynamic_linker (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -23,17 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 // Born February 20, 1992.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
-#include <csetjmp>
 #include <csignal>
 #include <cstdlib>
 #include <cstring>
 #include <ctime>
 
 #include <fstream.h>
 #include <iostream.h>
 #include <strstream.h>
@@ -41,16 +40,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include <pwd.h>
 
 #include "lo-error.h"
+#include "str-vec.h"
 
 #include "builtins.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
 #include "file-ops.h"
@@ -87,18 +87,18 @@ char *program_invocation_short_name;
 #else
 extern char *program_invocation_name;
 extern char *program_invocation_short_name;
 #endif
 
 // This is from readline's paren.c:
 extern int rl_blink_matching_paren;
 
-// Top level context (?)
-jmp_buf toplevel;
+// The command-line options.
+static string_vector octave_argv;
 
 // Nonzero means we read ~/.octaverc and ./.octaverc.
 // (--norc; --ignore-init-file; -f)
 static int read_init_files = 1;
 
 // Nonzero means we don't print the usual startup message.
 // (--quiet; --silent; -q)
 static int inhibit_startup_message = 0;
@@ -161,23 +161,25 @@ intern_argv (int argc, char **argv)
       int max_len = 0;
       for (int i = 1; i < argc; i++)
 	{
 	  int tmp_len = strlen (argv[i]);
 	  if (tmp_len > max_len)
 	    max_len = tmp_len;
 	}
 
-      octave_argv.resize (argc-1, max_len, 0);
+      octave_argv.resize (argc-1);
 
       for (int i = 1; i < argc; i++)
-	octave_argv.insert (argv[i], i-1, 0);
+	octave_argv[i-1] = argv[i];
 
       bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
     }
+
+  bind_builtin_variable ("nargin", (double) argc-1, 1, 1, 0);
 }
 
 // Initialize some global variables for later use.
 
 static void
 initialize_globals (const string& name)
 {
   // Kpathsea needs this.
@@ -570,61 +572,30 @@ main (int argc, char **argv)
       intern_argv (argc, argv);
 
       switch_to_buffer (create_buffer (get_input_from_stdin ()));
     }
 
   // Force input to be echoed if not really interactive, but the user
   // has forced interactive behavior.
 
-  if (!interactive && forced_interactive)
+  if (! interactive && forced_interactive)
     {
       rl_blink_matching_paren = 0;
 
       // XXX FIXME XXX -- is this the right thing to do?
 
       bind_builtin_variable ("echo_executing_commands",
 			     (double) ECHO_CMD_LINE);
     }
 
   if (! interactive)
     using_readline = 0;
 
-  // Allow the user to interrupt us without exiting.
-
-  if (setjmp (toplevel) != 0)
-    {
-      raw_mode (0);
-
-      cout << "\n";
-    }
-
-  can_interrupt = 1;
-
-  catch_interrupts ();
-
-  // The big loop.
-
-  int retval;
-  do
-    {
-      curr_sym_tab = top_level_sym_tab;
-
-      reset_parser ();
-
-      retval = yyparse ();
-
-      if (retval == 0 && global_command)
-	{
-	  global_command->eval (1);
-	  delete global_command;
-	  current_command_number++;
-	}
-    }
-  while (retval == 0);
+  int retval = main_loop ();
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 }
 
 /*
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -638,36 +638,27 @@ tree_builtin::eval (bool /* print */)
 {
   tree_constant retval;
 
   if (error_state)
     return retval;
 
   if (fcn)
     {
-    eval_fcn:
-
       Octave_object args;
       Octave_object tmp = (*fcn) (args, 0);
       if (tmp.length () > 0)
 	retval = tmp(0);
     }
   else if (is_mapper)
     {
       ::error ("%s: too few arguments", my_name.c_str ());
     }
   else
-    {
-      fcn = load_octave_builtin (my_name);
-
-      if (fcn)
-	goto eval_fcn;
-      else
-	::error ("unable to load builtin function %s", my_name.c_str ());
-    }
+    panic_impossible ();
 
   return retval;
 }
 
 static tree_constant
 apply_mapper_fcn (const tree_constant& arg, Mapper_fcn& m_fcn,
 		  bool /* print */)
 {
@@ -761,18 +752,16 @@ tree_builtin::eval (bool /* print */, in
 
   if (error_state)
     return retval;
 
   int nargin = args.length ();
 
   if (fcn)
     {
-    eval_fcn:
-
       if (any_arg_is_magic_colon (args))
 	::error ("invalid use of colon in function argument list");
       else
 	retval = (*fcn) (args, nargout);
     }
   else if (is_mapper)
     {
 // XXX FIXME XXX -- should we just assume nargin_max == 1?
@@ -786,24 +775,17 @@ tree_builtin::eval (bool /* print */, in
 	  retval(0) = tmp;
 	}
       else
 	{
 	  ::error ("%s: too few arguments", my_name.c_str ());
 	}
     }
   else
-    {
-      fcn = load_octave_builtin (my_name);
-
-      if (fcn)
-	goto eval_fcn;
-      else
-	::error ("unable to load builtin function %s", my_name.c_str ());
-    }
+    panic_impossible ();
 
   return retval;
 }
 
 void
 tree_builtin::print_code (ostream& os)
 {
   os << my_name << " can't be printed because it is a builtin function\n";
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -130,23 +130,23 @@ int quitting_gracefully = 0;
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 tree_function *curr_function = 0;
 
 // Nonzero means input is coming from startup file.
 int input_from_startup_file = 0;
 
-// The command-line options.
-charMatrix octave_argv;
-
 // Nonzero means that input is coming from a file that was named on
 // the command line.
 int input_from_command_line_file = 1;
 
+// Top level context (?)
+jmp_buf toplevel;
+
 void
 parse_and_execute (FILE *f, int print)
 {
   begin_unwind_frame ("parse_and_execute");
   
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
@@ -218,16 +218,55 @@ parse_and_execute (const string& s, int 
 	cout << "done." << endl;
     }
   else if (warn_for)
     error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   run_unwind_frame ("parse_and_execute_2");
 }
 
+int
+main_loop (void)
+{
+  // Allow the user to interrupt us without exiting.
+
+  if (setjmp (toplevel) != 0)
+    {
+      raw_mode (0);
+
+      cout << "\n";
+    }
+
+  can_interrupt = 1;
+
+  catch_interrupts ();
+
+  // The big loop.
+
+  int retval;
+  do
+    {
+      curr_sym_tab = top_level_sym_tab;
+
+      reset_parser ();
+
+      retval = yyparse ();
+
+      if (retval == 0 && global_command)
+	{
+	  global_command->eval (1);
+	  delete global_command;
+	  current_command_number++;
+	}
+    }
+  while (retval == 0);
+
+  return retval;
+}
+
 DEFUN ("source", Fsource, Ssource, 10,
   "source (FILE)\n\
 \n\
 Parse and execute the contents of FILE.  Like executing commands in a\n\
 script file but without requiring the file to be named `FILE.m'.")
 {
   Octave_object retval;
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -39,16 +39,18 @@ extern void parse_and_execute (FILE *f, 
 
 extern void parse_and_execute (const string& s, int print = 0,
 			       int verbose = 0,
 			       const char *warn_for = 0);
 
 extern tree_constant eval_string (const string&, int print,
 				  int& parse_status);
 
+extern int main_loop (void);
+
 // argv[0] for this program.
 extern string raw_prog_name;
 
 // Cleaned-up name of this program, not including path information.
 extern string prog_name;
 
 // Login name for user running this program.
 extern string user_name;
@@ -93,19 +95,16 @@ extern int quitting_gracefully;
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern tree_function *curr_function;
 
 // Nonzero means input is coming from startup file.
 extern int input_from_startup_file;
 
-// The command-line options.
-extern charMatrix octave_argv;
-
 // Nonzero means that input is coming from a file that was named on
 // the command line.
 extern int input_from_command_line_file;
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
 
+#include "Array-flags.h"
+
 #include "error.h"
 #include "gripes.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
@@ -183,16 +185,18 @@ define_all_return_values (void)
 // for A already defined and a matrix type?
 
 int
 do_fortran_indexing (void)
 {
   user_pref.do_fortran_indexing =
     check_preference ("do_fortran_indexing"); 
 
+  liboctave_dfi_flag = user_pref.do_fortran_indexing;
+
   return 0;
 }
 
 
 // Echo commands as they are executed?
 //
 //   1  ==>  echo commands read from script files
 //   2  ==>  echo commands from functions
@@ -331,32 +335,36 @@ page_screen_output (void)
 // only matters when resize_on_range_error is also true.
 
 int
 prefer_column_vectors (void)
 {
   user_pref.prefer_column_vectors =
     check_preference ("prefer_column_vectors");
 
+  liboctave_pcv_flag = user_pref.prefer_column_vectors;
+
   return 0;
 }
 
 
 // For things like
 //
 //   a = [2,3]; a([1,1])
 //
 // return [2 3] instead of [2 2].
 
 int
 prefer_zero_one_indexing (void)
 {
   user_pref.prefer_zero_one_indexing =
     check_preference ("prefer_zero_one_indexing");
 
+  liboctave_pzo_flag = user_pref.prefer_zero_one_indexing;
+
   return 0;
 }
 
 
 // Should we print things like
 //
 //   octave> a = [1,2;3,4]
 //   a = 
@@ -412,16 +420,18 @@ read_only_constants (void)
 // are outside the current bounds?
 
 int
 resize_on_range_error (void)
 {
   user_pref.resize_on_range_error =
     check_preference ("resize_on_range_error");
 
+  liboctave_rre_flag = user_pref.resize_on_range_error;
+
   return 0;
 }
 
 
 // If a function does not return any values explicitly, return the
 // last computed value.
 
 int
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -667,16 +667,22 @@ is_function_file (FILE *ffile)
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = 1;
 
   fseek (ffile, pos, SEEK_SET);
 
   return status;
 }
 
+static void
+restore_command_history (void *)
+{
+  octave_command_history.ignore_entries (! user_pref.saving_history);
+}
+
 static int
 parse_fcn_file (int exec_script, const string& ff)
 {
   begin_unwind_frame ("parse_fcn_file");
 
   int script_file_executed = 0;
 
   // Open function file and parse.
@@ -702,16 +708,23 @@ parse_fcn_file (int exec_script, const s
     {
       // Check to see if this file defines a function or is just a
       // list of commands.
 
       string tmp_help_txt = gobble_leading_white_space (ffile, 0);
 
       if (is_function_file (ffile))
 	{
+	  // XXX FIXME XXX -- we shouldn't need both the
+	  // octave_command_history object and the
+	  // user_pref.saving_history variable...
+	  octave_command_history.ignore_entries ();
+
+	  add_unwind_protect (restore_command_history, 0);
+
 	  unwind_protect_int (user_pref.echo_executing_commands);
 	  unwind_protect_int (user_pref.saving_history);
 	  unwind_protect_int (reading_fcn_file);
 	  unwind_protect_int (input_from_command_line_file);
 
 	  user_pref.echo_executing_commands = ECHO_OFF;
 	  user_pref.saving_history = 0;
 	  reading_fcn_file = 1;
