# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1342799756 14400
#      Fri Jul 20 11:55:56 2012 -0400
# Node ID 22bd268429d3fcaee83359c2941885101c3d1c67
# Parent  2318531b7880ec1a5824a51157fc28434617f42b
Cursor is now blinking in the terminal.

diff --git a/libqterminal/unix/Filter.cpp b/libqterminal/unix/Filter.cpp
--- a/libqterminal/unix/Filter.cpp
+++ b/libqterminal/unix/Filter.cpp
@@ -105,17 +105,16 @@ QList<Filter::HotSpot*> FilterChain::hot
     QListIterator<Filter*> iter(*this);
     while (iter.hasNext())
     {
         Filter* filter = iter.next();
         list << filter->hotSpots();
     }
     return list;
 }
-//QList<Filter::HotSpot*> FilterChain::hotSpotsAtLine(int line) const;
 
 TerminalImageFilterChain::TerminalImageFilterChain()
 : _buffer(0)
 , _linePositions(0)
 {
 }
 
 TerminalImageFilterChain::~TerminalImageFilterChain()
diff --git a/libqterminal/unix/QUnixTerminalImpl.cpp b/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -29,16 +29,17 @@ QUnixTerminalImpl::QUnixTerminalImpl(QWi
     setMinimumSize(600, 400);
     initialize();
 }
 
 void QUnixTerminalImpl::initialize()
 {
     m_terminalView = new TerminalView(this);
     m_terminalView->setKeyboardCursorShape(TerminalView::UnderlineCursor);
+    m_terminalView->setBlinkingCursor(true);
     m_terminalView->setBellMode(TerminalView::NotifyBell);
     m_terminalView->setTerminalSizeHint(true);
     m_terminalView->setContextMenuPolicy(Qt::CustomContextMenu);
     m_terminalView->setTripleClickMode(TerminalView::SelectWholeLine);
     m_terminalView->setTerminalSizeStartup(true);
     m_terminalView->setSize(80, 40);
     m_terminalView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
diff --git a/libqterminal/unix/TerminalView.cpp b/libqterminal/unix/TerminalView.cpp
--- a/libqterminal/unix/TerminalView.cpp
+++ b/libqterminal/unix/TerminalView.cpp
@@ -58,17 +58,16 @@
 #define REPCHAR   "ABCDEFGHIJKLMNOPQRSTUVWXYZ" \
   "abcdefgjijklmnopqrstuvwxyz" \
   "0123456789./+@"
 
 // scroll increment used when dragging selection at top/bottom of window.
 
 // static
 bool TerminalView::_antialiasText = true;
-bool TerminalView::HAVE_TRANSPARENCY = false;
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                                Colors                                     */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
 /* Note that we use ANSI color order (bgr), while IBMPC color order is (rgb)
@@ -241,17 +240,16 @@ TerminalView::TerminalView(QWidget *pare
   ,_usedColumns(1)
   ,_contentHeight(1)
   ,_contentWidth(1)
   ,_image(0)
   ,_randomSeed(0)
   ,_resizing(false)
   ,_terminalSizeHint(false)
   ,_terminalSizeStartup(true)
-  ,_bidiEnabled(false)
   ,_actSel(0)
   ,_wordSelectionMode(false)
   ,_lineSelectionMode(false)
   ,_preserveLineBreaks(false)
   ,_columnSelectionMode(false)
   ,_scrollbarLocation(NoScrollBar)
   ,_wordCharacters(":@-./_~")
   ,_bellMode(SystemBeepBell)
@@ -495,65 +493,34 @@ void TerminalView::setKeyboardCursorColo
   else
     _cursorColor = color;
 }
 QColor TerminalView::keyboardCursorColor() const
 {
   return _cursorColor;
 }
 
-void TerminalView::setOpacity(qreal opacity)
-{
-  QColor color(_blendColor);
-  color.setAlphaF(opacity);
-
-  // enable automatic background filling to prevent the display
-  // flickering if there is no transparency
-  if ( color.alpha() == 255 )
-    {
-      setAutoFillBackground(true);
-    }
-  else
-    {
-      setAutoFillBackground(false);
-    }
-
-  _blendColor = color.rgba();
-}
-
-void TerminalView::drawBackground(QPainter& painter, const QRect& rect, const QColor& backgroundColor, bool useOpacitySetting )
+void TerminalView::drawBackground(QPainter& painter, const QRect& rect, const QColor& backgroundColor)
 {
   // the area of the widget showing the contents of the terminal display is drawn
   // using the background color from the color scheme set with setColorTable()
   //
   // the area of the widget behind the scroll-bar is drawn using the background
   // brush from the scroll-bar's palette, to give the effect of the scroll-bar
   // being outside of the terminal display and visual consistency with other KDE
   // applications.
   //
   QRect scrollBarArea = _scrollBar->isVisible() ?
         rect.intersected(_scrollBar->geometry()) :
         QRect();
+
   QRegion contentsRegion = QRegion(rect).subtracted(scrollBarArea);
   QRect contentsRect = contentsRegion.boundingRect();
 
-  if ( HAVE_TRANSPARENCY && qAlpha(_blendColor) < 0xff && useOpacitySetting )
-    {
-      QColor color(backgroundColor);
-      color.setAlpha(qAlpha(_blendColor));
-
-      painter.save();
-      painter.setCompositionMode(QPainter::CompositionMode_Source);
-      painter.fillRect(contentsRect, color);
-      painter.restore();
-    }
-  else {
-      painter.fillRect(contentsRect, backgroundColor);
-    }
-
+  painter.fillRect(contentsRect, backgroundColor);
   painter.fillRect(scrollBarArea,_scrollBar->palette().background());
 }
 
 void TerminalView::drawCursor(QPainter& painter,
                               const QRect& rect,
                               const QColor& foregroundColor,
                               const QColor& /*backgroundColor*/,
                               bool& invertCharacterColor)
@@ -660,17 +627,17 @@ void TerminalView::drawTextFragment(QPai
   painter.save();
 
   // setup painter
   const QColor foregroundColor = style->foregroundColor.color(_colorTable);
   const QColor backgroundColor = style->backgroundColor.color(_colorTable);
 
   // draw background if different from the display's background color
   if ( backgroundColor != palette().background().color() )
-    drawBackground(painter,rect,backgroundColor, false /* do not use transparency */);
+    drawBackground(painter,rect,backgroundColor);
 
   // draw cursor shape if the current character is the cursor
   // this may alter the foreground and background colors
   bool invertCharacterColor = false;
 
   if ( style->rendition & RE_CURSOR )
     drawCursor(painter,rect,foregroundColor,backgroundColor,invertCharacterColor);
   // draw text
@@ -1069,24 +1036,23 @@ void TerminalView::paintEvent( QPaintEve
 {
   updateImage();
   //qDebug("%s %d paintEvent", __FILE__, __LINE__);
   QPainter paint(this);
   //qDebug("%s %d paintEvent %d %d", __FILE__, __LINE__, paint.window().top(), paint.window().right());
 
   foreach (QRect rect, (pe->region() & contentsRect()).rects())
     {
-      drawBackground(paint,rect,palette().background().color(),	true /* use opacity setting */);
+      drawBackground(paint,rect,palette().background().color());
       drawContents(paint, rect);
     }
   //    drawBackground(paint,contentsRect(),palette().background().color(),	true /* use opacity setting */);
   //    drawContents(paint, contentsRect());
-  //drawInputMethodPreeditString(paint,preeditRect());
-  //paintFilters(paint);
-
+  drawInputMethodPreeditString(paint,preeditRect());
+  paintFilters(paint);
   paint.end();
 }
 
 QPoint TerminalView::cursorPosition() const
 {
   if (_screenWindow)
     return _screenWindow->cursorPosition();
   else
@@ -1113,17 +1079,17 @@ void TerminalView::drawInputMethodPreedi
     }
   const QPoint cursorPos = cursorPosition();
 
   bool invertColors = false;
   const QColor background = _colorTable[DEFAULT_BACK_COLOR].color;
   const QColor foreground = _colorTable[DEFAULT_FORE_COLOR].color;
   const Character* style = &_image[loc(cursorPos.x(),cursorPos.y())];
 
-  drawBackground(painter,rect,background,true);
+  drawBackground(painter,rect,background);
   drawCursor(painter,rect,foreground,background,invertColors);
   drawCharacters(painter,rect,_inputMethodData.preeditString,style,invertColors);
 
   _inputMethodData.previousPreeditRect = rect;
 }
 
 FilterChain* TerminalView::filterChain() const
 {
diff --git a/libqterminal/unix/TerminalView.h b/libqterminal/unix/TerminalView.h
--- a/libqterminal/unix/TerminalView.h
+++ b/libqterminal/unix/TerminalView.h
@@ -79,18 +79,16 @@ public:
      */
     void setRandomSeed(uint seed);
     /**
      * Returns the seed used to generate random colors for the display
      * (in color schemes that support them).
      */
     uint randomSeed() const;
 
-    /** Sets the opacity of the terminal display. */
-    void setOpacity(qreal opacity);
 
     /**
      * This enum describes the location where the scroll bar is positioned in the display widget.
      */
     enum ScrollBarPosition
     {
         /** Do not show the scroll bar. */
         NoScrollBar=0,
@@ -372,33 +370,28 @@ public:
     /**
      * Sets whether the terminal size display is shown briefly
      * after the widget is first shown.
      *
      * See setTerminalSizeHint() , isTerminalSizeHint()
      */
     void setTerminalSizeStartup(bool on) { _terminalSizeStartup=on; }
 
-    void setBidiEnabled(bool set) { _bidiEnabled=set; }
-    bool isBidiEnabled() { return _bidiEnabled; }
-
     /**
      * Sets the terminal screen section which is displayed in this widget.
      * When updateImage() is called, the display fetches the latest character image from the
      * the associated terminal screen window.
      *
      * In terms of the model-view paradigm, the ScreenWindow is the model which is rendered
      * by the TerminalDisplay.
      */
     void setScreenWindow( ScreenWindow* window );
     /** Returns the terminal screen section which is displayed in this widget.  See setScreenWindow() */
     ScreenWindow* screenWindow() const;
 
-    static bool HAVE_TRANSPARENCY;
-
 public slots:
 
     /**
      * Causes the terminal display to fetch the latest character image from the associated
      * terminal screen ( see setScreenWindow() ) and redraw the display.
      */
     void updateImage();
     /**
@@ -563,18 +556,17 @@ private:
     // draws a section of text, all the text in this section
     // has a common color and style
     void drawTextFragment(QPainter& painter, const QRect& rect,
                           const QString& text, const Character* style);
     // draws the background for a text fragment
     // if useOpacitySetting is true then the color's alpha value will be set to
     // the display's transparency (set with setOpacity()), otherwise the background
     // will be drawn fully opaque
-    void drawBackground(QPainter& painter, const QRect& rect, const QColor& color,
-                  bool useOpacitySetting);
+    void drawBackground(QPainter& painter, const QRect& rect, const QColor& color);
     // draws the cursor character
     void drawCursor(QPainter& painter, const QRect& rect , const QColor& foregroundColor,
                                        const QColor& backgroundColor , bool& invertColors);
     // draws the characters or line graphics in a text fragment
     void drawCharacters(QPainter& painter, const QRect& rect,  const QString& text,
                                            const Character* style, bool invertCharacterColor);
     // draws a string of line graphics
    void drawLineCharString(QPainter& painter, int x, int y,
@@ -657,17 +649,16 @@ private:
     QVector<LineProperty> _lineProperties;
 
     ColorEntry _colorTable[TABLE_COLORS];
     uint _randomSeed;
 
     bool _resizing;
     bool _terminalSizeHint;
     bool _terminalSizeStartup;
-    bool _bidiEnabled;
     bool _mouseMarks;
 
     QPoint  _iPntSel; // initial selection point
     QPoint  _pntSel; // current selection point
     QPoint  _tripleSelBegin; // help avoid flicker
     int     _actSel; // selection state
     bool    _wordSelectionMode;
     bool    _lineSelectionMode;
@@ -737,17 +728,11 @@ private:
     static bool _antialiasText;   // do we antialias or not
 
     //the delay in milliseconds between redrawing blinking text
     static const int BLINK_DELAY = 500;
    static const int DEFAULT_LEFT_MARGIN = 2;
    static const int DEFAULT_TOP_MARGIN = 2;
 
     bool _readonly;
-
-public:
-    static void setTransparencyEnabled(bool enable)
-    {
-        HAVE_TRANSPARENCY = enable;
-    }
 };
 
 #endif // TERMINALVIEW_H
