# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518041815 18000
#      Wed Feb 07 17:16:55 2018 -0500
# Node ID 28211444585e3d51c9c2e4ad4ee45a6f0f590cba
# Parent  15daa0b34826a3f222fbaa5ec263d6725211327f
style fixes for variable editor

* variable-editor.h, variable-editor.cc: Where possible, create new
objects in constructor initializer lists and perform setup inside
constructor functions.
(tab_bar::get_tab_bar): Rename from tabBar.  Perform cast here.

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 
 #include <limits>
 
 #include <QApplication>
 #include <QClipboard>
 #include <QFileDialog>
 #include <QHeaderView>
 #include <QLabel>
-#include <QMainWindow>
 #include <QMenu>
 #include <QPalette>
 #include <QSignalMapper>
 #include <QStackedWidget>
 #include <QTableView>
 #include <QTextEdit>
 #include <QTabWidget>
 #include <QToolBar>
@@ -111,35 +110,36 @@ var_editor_tab::set_editable (bool edita
       QVariant v_data = m_model->data ();
 
       QString str = v_data.toString ();
 
       viewer->setPlainText (str);
     }
 }
 
-//
-// Functions for reimplemented tab widget
-//
+// Functions for reimplemented tab widget.
 
 var_editor_tab_widget::var_editor_tab_widget (QWidget *p)
   : QTabWidget (p)
 {
   tab_bar *bar = new tab_bar (this);
 
+  m_tab_widget->setTabsClosable (true);
+  m_tab_widget->setMovable (true);
+
   connect (bar, SIGNAL (close_current_tab_signal (bool)),
            p->parent (), SLOT (request_close_tab (bool)));
 
   this->setTabBar (bar);
 }
 
-QTabBar*
-var_editor_tab_widget::tabBar (void) const
+tab_bar *
+var_editor_tab_widget::get_tab_bar (void) const
 {
-  return (QTabWidget::tabBar ());
+  return qobject_cast<tab_bar *> (tabBar ());
 }
 
 bool
 var_editor_tab_widget::current_tab_has_focus (void) const
 {
   var_editor_tab *tab
     = qobject_cast<var_editor_tab *> (widget (currentIndex ()));
 
@@ -159,94 +159,95 @@ QTextEdit *
 var_editor_tab_widget::get_disp_view (void) const
 {
   var_editor_tab *tab
     = qobject_cast<var_editor_tab *> (widget (currentIndex ()));
 
   return tab->get_disp_view ();
 }
 
-//
-// Variable editor
-//
+// Variable editor.
 
 variable_editor::variable_editor (QWidget *p)
   : octave_dock_widget (p),
-    m_default_width (30), m_default_height (100), m_add_font_height (0),
-    m_use_terminal_font (true), m_alternate_rows (true),
-    m_stylesheet (""), m_font (), m_sel_font (),
+    m_container (new QWidget (this)),
+    m_tool_bar (new QToolBar ("", m_container)),
+    m_tab_widget (new var_editor_tab_widget (m_container)),
+    m_tab_bar (m_tab_widget->get_tab_bar ()),
+    m_default_width (30),
+    m_default_height (100),
+    m_add_font_height (0),
+    m_use_terminal_font (true),
+    m_alternate_rows (true),
+    m_stylesheet (""),
+    m_font (),
+    m_sel_font (),
     m_table_colors ()
 {
-  // Use a MainWindow.
-
   setObjectName ("variable_editor");
   set_title (tr ("Variable Editor"));
   setStatusTip (tr ("Edit variables."));
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
-  // The dock widget's widget
-
-  QWidget *container = new QWidget (this);
-
-  // Tool Bar.
+  construct_tool_bar ();
 
-  m_tool_bar = new QToolBar ("", container);
-  m_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
-  m_tool_bar->setMovable (false);
-
-  construct_tool_bar ();
+  // Colors.
 
   for (int i = 0; i < resource_manager::varedit_color_chars ().length (); i++)
     m_table_colors.append (QColor (Qt::white));
 
   // Tab Widget.
 
-  m_tab_widget = new var_editor_tab_widget (container);
-  m_tab_widget->setTabsClosable (true);
-  m_tab_widget->setMovable (true);
-
   connect (m_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (closeTab (int)));
 
-   // Tab bar
-  m_tab_bar
-      = static_cast<tab_bar *>(m_tab_widget->tabBar ());
+  // Tab bar.
+
+  m_close_action
+    = add_action (m_tab_bar->get_context_menu (),
+                  resource_manager::icon ("window-close",false),
+                  tr ("&Close"),
+                  SLOT (request_close_tab (bool)));
 
-  m_close_action = add_action (m_tab_bar->get_context_menu (),
-        resource_manager::icon ("window-close",false), tr ("&Close"),
-        SLOT (request_close_tab (bool)));
-  m_close_others_action = add_action (m_tab_bar->get_context_menu (),
-        resource_manager::icon ("window-close",false), tr ("Close &Other Tabs"),
-        SLOT (request_close_other_tabs (bool)));
-  m_close_all_action = add_action (m_tab_bar->get_context_menu (),
-        resource_manager::icon ("window-close",false), tr ("Close &All Tabs"),
-        SLOT (request_close_all_tabs (bool)));
+  m_close_others_action
+    = add_action (m_tab_bar->get_context_menu (),
+                  resource_manager::icon ("window-close",false),
+                  tr ("Close &Other Tabs"),
+                  SLOT (request_close_other_tabs (bool)));
+
+  m_close_all_action
+    = add_action (m_tab_bar->get_context_menu (),
+                  resource_manager::icon ("window-close",false),
+                  tr ("Close &All Tabs"),
+                  SLOT (request_close_all_tabs (bool)));
 
   enable_actions ();
 
-  // Layout the widgets vertically with the toolbar on top
+  // Layout the widgets vertically with the toolbar on top.
+
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
+
   vbox_layout->setSpacing (0);
   vbox_layout->addWidget (m_tool_bar);
   vbox_layout->addWidget (m_tab_widget);
   vbox_layout->setMargin (1);
 
-  container->setLayout (vbox_layout);
-  setWidget (container);
+  m_container->setLayout (vbox_layout);
+
+  setWidget (m_container);
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
 }
 
-
+// Add an action to a menu or the widget itself.
 
-// Add an action to a menu or the widget itself
 QAction*
 variable_editor::add_action (QMenu *menu, const QIcon& icon, const QString& text,
-                         const char *member)
+                             const char *member)
 {
   QAction *a;
 
   if (menu)
     a = menu->addAction (icon, text, this, member);
   else
     {
       a = new QAction (this);
@@ -254,45 +255,47 @@ variable_editor::add_action (QMenu *menu
     }
 
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
 
   return a;
 }
 
-// Slot for the close tab action
+// Slot for the close tab action.
+
 void
 variable_editor::request_close_tab (bool)
 {
   closeTab (m_tab_bar->currentIndex ());
 }
 
-// Slot for the close other tabs action
+// Slot for the close other tabs action.
+
 void
 variable_editor::request_close_other_tabs (bool)
 {
   int current = m_tab_bar->currentIndex ();
 
   for (int index = m_tab_bar->count ()-1; index >= 0; index--)
-  {
-    if (current != index)
-      closeTab (index);
-  }
+    {
+      if (current != index)
+        closeTab (index);
+    }
 }
 
-// Slot for closing all tabs
+// Slot for closing all tabs.
+
 void
 variable_editor::request_close_all_tabs (bool)
 {
   for (int index = m_tab_bar->count ()-1; index >= 0; index--)
     closeTab (index);
 }
 
-
 void
 variable_editor::enable_actions (void)
 {
   const int count = m_tab_widget->count ();
 
   m_tool_bar->setEnabled (count > 0);
   m_close_action->setEnabled (count > 0);
   m_close_all_action->setEnabled (count > 0);
@@ -373,17 +376,16 @@ variable_editor::make_edit_view (var_edi
 
   model->setParent (table);
 
   table->setModel (model);
   table->setWordWrap (false);
   table->setContextMenuPolicy (Qt::CustomContextMenu);
   table->setSelectionMode (QAbstractItemView::ContiguousSelection);
 
-
   table->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
   table->verticalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
 
   connect (table->horizontalHeader (),
            SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT (columnmenu_requested (const QPoint&)));
 
   connect (table->verticalHeader (),
@@ -573,17 +575,18 @@ variable_editor::notice_settings (const 
 
   if (icon_size_settings == 1)
     icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
   else if (icon_size_settings == -1)
     icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
 
   m_tool_bar->setIconSize (QSize (icon_size, icon_size));
 
-  // Shortcuts
+  // Shortcuts.
+
   shortcut_manager::set_shortcut (m_close_action, "editor_file:close");
   shortcut_manager::set_shortcut (m_close_all_action, "editor_file:close_all");
   shortcut_manager::set_shortcut (m_close_others_action, "editor_file:close_other");
 }
 
 void
 variable_editor::closeEvent (QCloseEvent *e)
 {
@@ -1392,16 +1395,20 @@ void variable_editor::update_colors (voi
       view->setFont (m_font);
     }
 
 }
 
 void
 variable_editor::construct_tool_bar (void)
 {
+  m_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
+
+  m_tool_bar->setMovable (false);
+
   m_tool_bar->setObjectName ("VariableEditorToolBar");
 
   m_tool_bar->setWindowTitle (tr ("Variable Editor Toolbar"));
 
   m_tool_bar->addAction (resource_manager::icon ("document-save"),
                          tr ("Save"), this, SLOT (save ()));
 
   m_tool_bar->addSeparator ();
@@ -1423,16 +1430,17 @@ variable_editor::construct_tool_bar (voi
 
   m_tool_bar->addSeparator ();
 
   // FIXME: Add a print item?
   // QAction *print_action; /icons/fileprint.png
   // m_tool_bar->addSeparator ();
 
   QToolButton *plot_tool_button = new QToolButton (m_tool_bar);
+
   plot_tool_button->setText (tr ("Plot"));
   plot_tool_button->setToolTip (tr ("Plot Selected Data"));
   plot_tool_button->setIcon (resource_manager::icon ("plot-xy-curve"));
 
   plot_tool_button->setPopupMode (QToolButton::InstantPopup);
 
   QMenu *plot_menu = new QMenu (tr ("Plot"), plot_tool_button);
 
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -88,17 +88,17 @@ class var_editor_tab_widget : public QTa
   Q_OBJECT
 
 public:
 
   var_editor_tab_widget (QWidget *p);
 
   ~var_editor_tab_widget (void) = default;
 
-  QTabBar * tabBar (void) const;
+  tab_bar * get_tab_bar (void) const;
 
   bool current_tab_has_focus (void) const;
 
   QTextEdit *get_disp_view (void) const;
   QTableView *get_edit_view (void) const;
 };
 
 
@@ -196,22 +196,24 @@ signals:
 
 private:
 
   QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
                         const char *member);
 
   void enable_actions (void);
 
-  tab_bar *m_tab_bar;
+  QWidget *m_container;
 
   QToolBar *m_tool_bar;
 
   var_editor_tab_widget *m_tab_widget;
 
+  tab_bar *m_tab_bar;
+
   int m_default_width;
 
   int m_default_height;
 
   int m_add_font_height;
 
   bool m_use_terminal_font;
 
