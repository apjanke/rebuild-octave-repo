# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1515447926 18000
#      Mon Jan 08 16:45:26 2018 -0500
# Node ID dbec1e04f499be49b2cb5bf238b6a0e3e87a8286
# Parent  07876b7127bf4f33d63f062f5f3d7a66dc3024bc
accept type_info obj as arg to binary_op, unary_op, and cat_op functions

* ov.h, ov.cc (do_binary_op, do_unary_op, do_cat_op):
New verloads that accept reference to type_info object as argument.
(decompose_binary_op): New aregument, reference to type_info object.

* pt-eval.cc (tree_evaluator::visit_binary_expression):
Pass type_info object to do_binary_op.
(tree_evaluator::visit_postfix_expression,
tree_evaluator::visit_prefix_expression):
Pass type_info object to do_unary_op.
(tree_evaluator::visit_matrix): Pass type_info object to do_cat_op.

diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -2150,26 +2150,24 @@ err_binary_op (const std::string& on, co
 
 OCTAVE_NORETURN static void
 err_binary_op_conv (const std::string& on)
 {
   error ("type conversion failed for binary operator '%s'", on.c_str ());
 }
 
 octave_value
-do_binary_op (octave_value::binary_op op,
+do_binary_op (octave::type_info& ti, octave_value::binary_op op,
               const octave_value& v1, const octave_value& v2)
 {
   octave_value retval;
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
-  octave::type_info& ti = octave::__get_type_info__ ("do_binary_op");
-
   if (t1 == octave_class::static_type_id ()
       || t2 == octave_class::static_type_id ()
       || t1 == octave_classdef::static_type_id ()
       || t2 == octave_classdef::static_type_id ())
     {
       octave::type_info::binary_class_op_fcn f
         = ti.lookup_binary_class_op (op);
 
@@ -2287,130 +2285,145 @@ do_binary_op (octave_value::binary_op op
               retval = f (*tv1.rep, *tv2.rep);
             }
         }
     }
 
   return retval;
 }
 
+octave_value
+do_binary_op (octave_value::binary_op op,
+              const octave_value& v1, const octave_value& v2)
+{
+  octave::type_info& ti = octave::__get_type_info__ ("do_binary_op");
+
+  return do_binary_op (ti, op, v1, v2);
+}
+
 static octave_value
-decompose_binary_op (octave_value::compound_binary_op op,
+decompose_binary_op (octave::type_info& ti,
+                     octave_value::compound_binary_op op,
                      const octave_value& v1, const octave_value& v2)
 {
   switch (op)
     {
     case octave_value::op_trans_mul:
       return do_binary_op (octave_value::op_mul,
                            do_unary_op (octave_value::op_transpose, v1), v2);
 
     case octave_value::op_mul_trans:
-      return do_binary_op (octave_value::op_mul,
+      return do_binary_op (ti, octave_value::op_mul,
                            v1, do_unary_op (octave_value::op_transpose, v2));
 
     case octave_value::op_herm_mul:
-      return do_binary_op (octave_value::op_mul,
+      return do_binary_op (ti, octave_value::op_mul,
                            do_unary_op (octave_value::op_hermitian, v1), v2);
 
     case octave_value::op_mul_herm:
-      return do_binary_op (octave_value::op_mul,
+      return do_binary_op (ti, octave_value::op_mul,
                            v1, do_unary_op (octave_value::op_hermitian, v2));
 
     case octave_value::op_trans_ldiv:
-      return do_binary_op (octave_value::op_ldiv,
+      return do_binary_op (ti, octave_value::op_ldiv,
                            do_unary_op (octave_value::op_transpose, v1), v2);
 
     case octave_value::op_herm_ldiv:
-      return do_binary_op (octave_value::op_ldiv,
+      return do_binary_op (ti, octave_value::op_ldiv,
                            do_unary_op (octave_value::op_hermitian, v1), v2);
 
     case octave_value::op_el_not_and:
-      return do_binary_op (octave_value::op_el_and,
+      return do_binary_op (ti, octave_value::op_el_and,
                            do_unary_op (octave_value::op_not, v1), v2);
 
     case octave_value::op_el_not_or:
-      return do_binary_op (octave_value::op_el_or,
+      return do_binary_op (ti, octave_value::op_el_or,
                            do_unary_op (octave_value::op_not, v1), v2);
 
     case octave_value::op_el_and_not:
-      return do_binary_op (octave_value::op_el_and,
+      return do_binary_op (ti, octave_value::op_el_and,
                            v1, do_unary_op (octave_value::op_not, v2));
 
     case octave_value::op_el_or_not:
-      return do_binary_op (octave_value::op_el_or,
+      return do_binary_op (ti, octave_value::op_el_or,
                            v1, do_unary_op (octave_value::op_not, v2));
 
     default:
       error ("invalid compound operator");
     }
 }
 
 octave_value
-do_binary_op (octave_value::compound_binary_op op,
+do_binary_op (octave::type_info& ti, octave_value::compound_binary_op op,
               const octave_value& v1, const octave_value& v2)
 {
   octave_value retval;
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
-  octave::type_info& ti = octave::__get_type_info__ ("do_binary_op");
-
   if (t1 == octave_class::static_type_id ()
       || t2 == octave_class::static_type_id ()
       || t1 == octave_classdef::static_type_id ()
       || t2 == octave_classdef::static_type_id ())
     {
       octave::type_info::binary_class_op_fcn f = ti.lookup_binary_class_op (op);
 
       if (f)
         retval = f (v1, v2);
       else
-        retval = decompose_binary_op (op, v1, v2);
+        retval = decompose_binary_op (ti, op, v1, v2);
     }
   else
     {
       octave::type_info::binary_op_fcn f = ti.lookup_binary_op (op, t1, t2);
 
       if (f)
         retval = f (*v1.rep, *v2.rep);
       else
-        retval = decompose_binary_op (op, v1, v2);
+        retval = decompose_binary_op (ti, op, v1, v2);
     }
 
   return retval;
 }
 
+octave_value
+do_binary_op (octave_value::compound_binary_op op,
+              const octave_value& v1, const octave_value& v2)
+{
+  octave::type_info& ti = octave::__get_type_info__ ("do_binary_op");
+
+  return do_binary_op (ti, op, v1, v2);
+}
+
 OCTAVE_NORETURN static void
 err_cat_op (const std::string& tn1, const std::string& tn2)
 {
   error ("concatenation operator not implemented for '%s' by '%s' operations",
          tn1.c_str (), tn2.c_str ());
 }
 
 OCTAVE_NORETURN static void
 err_cat_op_conv (void)
 {
   error ("type conversion failed for concatenation operator");
 }
 
 octave_value
-do_cat_op (const octave_value& v1, const octave_value& v2,
-           const Array<octave_idx_type>& ra_idx)
+do_cat_op (octave::type_info& ti, const octave_value& v1,
+           const octave_value& v2, const Array<octave_idx_type>& ra_idx)
 {
   octave_value retval;
 
   // Can't rapid return for concatenation with an empty object here as
   // something like cat(1,[],single([]) must return the correct type.
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
-  octave::type_info& ti = octave::__get_type_info__ ("do_cat_op");
-
   octave::type_info::cat_op_fcn f = ti.lookup_cat_op (t1, t2);
 
   if (f)
     retval = f (*v1.rep, *v2.rep, ra_idx);
   else
     {
       octave_value tv1;
       octave_base_value::type_conv_info cf1 = v1.numeric_conversion_function ();
@@ -2448,23 +2461,32 @@ do_cat_op (const octave_value& v1, const
           t2 = tv2.type_id ();
         }
       else
         tv2 = v2;
 
       if (! cf1 && ! cf2)
         err_cat_op (v1.type_name (), v2.type_name ());
 
-      retval = do_cat_op (tv1, tv2, ra_idx);
+      retval = do_cat_op (ti, tv1, tv2, ra_idx);
     }
 
   return retval;
 }
 
 octave_value
+do_cat_op (const octave_value& v1, const octave_value& v2,
+           const Array<octave_idx_type>& ra_idx)
+{
+  octave::type_info& ti = octave::__get_type_info__ ("do_cat_op");
+
+  return do_cat_op (ti, v1, v2, ra_idx);
+}
+
+octave_value
 do_colon_op (const octave_value& base, const octave_value& increment,
              const octave_value& limit, bool is_for_cmd_expr)
 {
   octave_value retval;
 
   if (base.isobject () || increment.isobject () || limit.isobject ())
     {
       std::string dispatch_type;
@@ -2578,24 +2600,23 @@ err_unary_op (const std::string& on, con
 
 OCTAVE_NORETURN static void
 err_unary_op_conv (const std::string& on)
 {
   error ("type conversion failed for unary operator '%s'", on.c_str ());
 }
 
 octave_value
-do_unary_op (octave_value::unary_op op, const octave_value& v)
+do_unary_op (octave::type_info& ti, octave_value::unary_op op,
+             const octave_value& v)
 {
   octave_value retval;
 
   int t = v.type_id ();
 
-  octave::type_info& ti = octave::__get_type_info__ ("do_unary_op");
-
   if (t == octave_class::static_type_id ()
       || t == octave_classdef::static_type_id ())
     {
       octave::type_info::unary_class_op_fcn f = ti.lookup_unary_class_op (op);
 
       if (! f)
         err_unary_op (octave_value::unary_op_as_string (op), v.class_name ());
 
@@ -2628,16 +2649,24 @@ do_unary_op (octave_value::unary_op op, 
           tv = octave_value (tmp);
           retval = do_unary_op (op, tv);
         }
     }
 
   return retval;
 }
 
+octave_value
+do_unary_op (octave_value::unary_op op, const octave_value& v)
+{
+  octave::type_info& ti = octave::__get_type_info__ ("do_unary_op");
+
+  return do_unary_op (ti, op, v);
+}
+
 OCTAVE_NORETURN static void
 err_unary_op_conversion_failed (const std::string& op,
                                 const std::string& tn)
 {
   error ("operator %s: type conversion for '%s' failed",
          op.c_str (), tn.c_str ());
 }
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1278,35 +1278,35 @@ public:
   int type_id (void) const { return rep->type_id (); }
 
   std::string type_name (void) const { return rep->type_name (); }
 
   std::string class_name (void) const { return rep->class_name (); }
 
   // Unary and binary operations.
 
-  friend OCTINTERP_API octave_value do_unary_op (unary_op op,
-                                                 const octave_value& a);
+  friend OCTINTERP_API octave_value
+  do_unary_op (octave::type_info& ti, unary_op op, const octave_value& a);
 
   octave_value& do_non_const_unary_op (unary_op op);
 
   octave_value& do_non_const_unary_op (unary_op op, const std::string& type,
                                        const std::list<octave_value_list>& idx);
 
-  friend OCTINTERP_API octave_value do_binary_op (binary_op op,
-                                                  const octave_value& a,
-                                                  const octave_value& b);
+  friend OCTINTERP_API octave_value
+  do_binary_op (octave::type_info& ti, binary_op op,
+                const octave_value& a, const octave_value& b);
 
-  friend OCTINTERP_API octave_value do_binary_op (compound_binary_op op,
-                                                  const octave_value& a,
-                                                  const octave_value& b);
+  friend OCTINTERP_API octave_value
+  do_binary_op (octave::type_info& ti, compound_binary_op op,
+                const octave_value& a, const octave_value& b);
 
-  friend OCTINTERP_API octave_value do_cat_op (const octave_value& a,
-                                               const octave_value& b,
-                                               const Array<octave_idx_type>& ra_idx);
+  friend OCTINTERP_API octave_value
+  do_cat_op (octave::type_info& ti, const octave_value& a,
+             const octave_value& b, const Array<octave_idx_type>& ra_idx);
 
   friend OCTINTERP_API octave_value do_colon_op (const octave_value& base,
                                                  const octave_value& limit,
                                                  bool is_for_cmd_expr)
   {
     return do_colon_op (base, octave_value (), limit, is_for_cmd_expr);
   }
 
@@ -1507,28 +1507,49 @@ private:
   binary_op op_eq_to_binary_op (assign_op op);
 
   // This declaration protects against constructing octave_value from
   // const octave_base_value* which actually silently calls octave_value (bool).
   octave_value (const octave_base_value *);
 
 };
 
-// Publish externally used friend functions.
+// Publish externally used friend functions.  Which compiler requires
+// these extra declarations?
+
+extern OCTINTERP_API octave_value
+do_unary_op (octave::type_info& ti, octave_value::unary_op op,
+             const octave_value& a);
 
 extern OCTINTERP_API octave_value
 do_unary_op (octave_value::unary_op op, const octave_value& a);
 
 extern OCTINTERP_API octave_value
-do_binary_op (octave_value::binary_op op,
+do_binary_op (octave::type_info& ti, octave_value::binary_op op,
+              const octave_value& a, const octave_value& b);
+
+extern OCTINTERP_API octave_value
+do_binary_op (octave::type_info& ti, octave_value::compound_binary_op op,
               const octave_value& a, const octave_value& b);
 
 extern OCTINTERP_API octave_value
-do_binary_op (octave_value::compound_binary_op op,
-              const octave_value& a, const octave_value& b);
+do_binary_op (octave_value::binary_op op, const octave_value& a,
+              const octave_value& b);
+
+extern OCTINTERP_API octave_value
+do_binary_op (octave_value::compound_binary_op op, const octave_value& a,
+              const octave_value& b);
+
+extern OCTINTERP_API octave_value
+do_cat_op (octave::type_info& ti, const octave_value& a,
+           const octave_value& b, const Array<octave_idx_type>& ra_idx);
+
+extern OCTINTERP_API octave_value
+do_cat_op (const octave_value& a, const octave_value& b,
+           const Array<octave_idx_type>& ra_idx);
 
 #define OV_UNOP_FN(name)                        \
   inline octave_value                           \
   name (const octave_value& a)                  \
   {                                             \
     return do_unary_op (octave_value::name, a); \
   }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -229,17 +229,19 @@ namespace octave
                   block (m_profiler, expr);
 
                 // Note: The profiler does not catch the braindead
                 // short-circuit evaluation code above, but that should be
                 // ok.  The evaluation of operands and the operator itself
                 // is entangled and it's not clear where to start/stop
                 // timing the operator to make it reasonable.
 
-                val = ::do_binary_op (etype, a, b);
+                type_info& ti = m_interpreter.get_type_info ();
+
+                val = ::do_binary_op (ti, etype, a, b);
               }
           }
       }
 
     push_result (val);
   }
 
   void
@@ -312,17 +314,19 @@ namespace octave
         if (a.is_defined () && op_rhs)
           {
             octave_value b = evaluate (op_rhs);
 
             if (b.is_defined ())
               {
                 octave_value::compound_binary_op etype = expr.cop_type ();
 
-                val = ::do_binary_op (etype, a, b);
+                type_info& ti = m_interpreter.get_type_info ();
+
+                val = ::do_binary_op (ti, etype, a, b);
               }
           }
       }
 
     push_result (val);
   }
 
   void
@@ -1706,32 +1710,34 @@ namespace octave
 
                 if (! all_empty_p)
                   ctmp = ctmp.resize (dim_vector (0,0)).resize (dv);
               }
 
             // Now, extract the values from the individual elements and
             // insert them in the result matrix.
 
+            type_info& ti = m_interpreter.get_type_info ();
+
             int dv_len = dv.ndims ();
             octave_idx_type ntmp = (dv_len > 1 ? dv_len : 2);
             Array<octave_idx_type> ra_idx (dim_vector (ntmp, 1), 0);
 
             for (tm_row_const& row : tmp)
               {
                 octave_quit ();
 
                 for (auto& elt : row)
                   {
                     octave_quit ();
 
                     if (elt.isempty ())
                       continue;
 
-                    ctmp = do_cat_op (ctmp, elt, ra_idx);
+                    ctmp = do_cat_op (ti, ctmp, elt, ra_idx);
 
                     ra_idx (1) += elt.columns ();
                   }
 
                 ra_idx (0) += row.rows ();
                 ra_idx (1) = 0;
               }
 
@@ -2070,17 +2076,19 @@ namespace octave
           {
             octave_value op_val = evaluate (op);
 
             if (op_val.is_defined ())
               {
                 profiler::enter<tree_postfix_expression>
                   block (m_profiler, expr);
 
-                val = ::do_unary_op (etype, op_val);
+                type_info& ti = m_interpreter.get_type_info ();
+
+                val = ::do_unary_op (ti, etype, op_val);
               }
           }
       }
 
     push_result (val);
   }
 
   void
@@ -2113,17 +2121,21 @@ namespace octave
                 profiler::enter<tree_prefix_expression>
                   block (m_profiler, expr);
 
                 // Attempt to do the operation in-place if it is unshared
                 // (a temporary expression).
                 if (op_val.get_count () == 1)
                   val = op_val.do_non_const_unary_op (etype);
                 else
-                  val = ::do_unary_op (etype, op_val);
+                  {
+                    type_info& ti = m_interpreter.get_type_info ();
+
+                    val = ::do_unary_op (ti, etype, op_val);
+                  }
               }
           }
       }
 
     push_result (val);
   }
 
   void
