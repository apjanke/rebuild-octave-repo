# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259221079 -3600
#      Thu Nov 26 08:37:59 2009 +0100
# Node ID b7acf3cb59846b85668f8a0d921ed95268365221
# Parent  72d6e0de76c7daae60d619555848efd467f202a9
update NEWS

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* NEWS: Update.
+
 2009-11-25  Tatsuro MATSUOKA  <tmacchant@yahoo.co.jp>
 
 	* acinclude.m4 (OCTAVE_PROG_GNUPLOT): Don't check for pgnuplot or
 	pipe-gnuplot on Windows systems.  Set default to gnuplot for all
 	systems.
 	(OCTAVE_PROG_GHOSTSCRIPT): Check for gswin32c first on Windows
 	systems, then gs.
 
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -36,16 +36,33 @@ Summary of important user-visible change
 
     For instance, all of these assertions were true in Octave 3.0.x
     but false in 3.2.x due to new optimizations and improvements:
 
       assert (2*linspace (1, 5, 5), 2*(1:5))
       assert (zeros (0, 0), [])
       assert (2*ones (1, 5), (2) (ones (1,5)))
 
+ ** The behavior of library functions ismatrix, issquare and issymmetric has
+    been changed for better consistency.
+    
+    * ismatrix now returns true for all numeric and logical 2d or Nd matrices.
+      Previously, ismatrix returned false if the first or second dimension was 
+      zero. Hence, `ismatrix ([])' was false, while `ismatrix (zeros (1,2,0))'
+      was true.
+
+    * issquare now returns a logical scalar, and is equivalent to the expression
+      `ismatrix (x) && ndims (x) == 2 && rows (x) == columns (x)'. The dimension
+      is no longer returned. As a result, `issquare ([])' now yields true.
+    
+    * issymmetric now checks for symmetry instead of hermitianness. For the latter,
+      ishermitian was created. Also, logical scalar is returned rather than the
+      dimension, so `issymmetric ([])' is now true.
+      
+
  ** Function handles are now aware of overloaded functions. If a function
     is overloaded, the handle determines at the time of its reference which
     function to call. A non-overloaded version does not need to exist.
 
  ** The operation-assignment operators +=, -=, *= and /= now behave more
     efficiently in certain cases. For instance, if m is a matrix and s
     a scalar, then the statement
 
