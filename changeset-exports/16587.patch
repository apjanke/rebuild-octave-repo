# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1367191550 14400
#      Sun Apr 28 19:25:50 2013 -0400
# Node ID a3fdd6041e6486d08ce0a56556fa5d229cba7cf5
# Parent  f423873d32755e17a98e93cddfe3bc708bb72d8b
Fix ellipj, ellipke, and expint docstrings

* ellipj.cc, ellipke.m, expint.m: Fix docstring signatures and wording.

diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -131,19 +131,19 @@ sncndn (Complex& u, double m, Complex& s
       sn = Complex (ss*dd1/ddd, cc*dd*ss1*cc1/ddd);
       cn = Complex (cc*cc1/ddd, -ss*dd*ss1*dd1/ddd);
       dn = Complex (dd*cc1*dd1/ddd, -m*ss*cc*ss1/ddd);
     }
 }
 
 DEFUN (ellipj, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}] =} \
-ellipj (@var{u}, @var{m}, @var{err})\n\
-Compute the Jacobi elliptic functions sn, cn, dn of complex argument and real parameter.\n\
+@deftypefn {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m})\n\
+Compute the Jacobi elliptic functions @var{sn}, @var{cn}, and @var{dn}\n\
+of complex argument @var{u} and real parameter @var{m}.\n\
 \n\
 If @var{m} is a scalar, the results are the same size as @var{u}.\n\
 If @var{u} is a scalar, the results are the same size as @var{m}.\n\
 If @var{u} is a column vector and @var{m} is a row vector, the\n\
 results are matrices with @code{length (@var{u})} rows and\n\
 @code{length (@var{m})} columns.  Otherwise, @var{u} and\n\
 @var{m} must conform and the results will be the same size.\n\
 \n\
@@ -158,16 +158,17 @@ and is the same size as the result.\n\
 Normal return.\n\
 @item\n\
 Error---no computation, algorithm termination condition not met,\n\
 return @code{NaN}.\n\
 @end enumerate\n\
  Ref: Abramowitz, Milton and Stegun, Irene A\n\
       Handbook of Mathematical Functions, Dover, 1965\n\
       Chapter 16 (Sections 16.4, 16.13 and 16.15)\n\
+@seealso{ellipke}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 )
     {
diff --git a/scripts/specfun/ellipke.m b/scripts/specfun/ellipke.m
--- a/scripts/specfun/ellipke.m
+++ b/scripts/specfun/ellipke.m
@@ -17,22 +17,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} ellipke (@var{m})
 ## @deftypefnx {Function File} {} ellipke (@var{m}, @var{tol})
 ## @deftypefnx {Function File} {[@var{k}, @var{e}] =} ellipke (@dots{})
-## Compute complete elliptic integral of first K(@var{m}) and second E(@var{m}).
+## Compute complete elliptic integral of the first K(@var{m}) and second
+## E(@var{m}) kind.
 ##
-## @var{m} is either real array or scalar with 0 <= m <= 1
+## @var{m} is either real array or scalar with 0 <= m <= 1.
 ##
-## @var{tol} will be ignored (@sc{Matlab} uses this to allow faster, less
-## accurate approximation)
+## @var{tol} is currently ignored (@sc{Matlab} uses this to allow faster,
+## less accurate approximation).
 ##
 ## Ref: Abramowitz, Milton and Stegun, Irene A. Handbook of Mathematical
 ## Functions, Dover, 1965, Chapter 17.
 ## @seealso{ellipj}
 ## @end deftypefn
 
 function [k, e] = ellipke (m)
 
diff --git a/scripts/specfun/expint.m b/scripts/specfun/expint.m
--- a/scripts/specfun/expint.m
+++ b/scripts/specfun/expint.m
@@ -14,23 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} expint (@var{x})
 ## Compute the exponential integral,
-## @verbatim
-##                    infinity
-##                   /
-##       expint(x) = | exp(t)/t dt
-##                   /
-##                  x
-## @end verbatim
+## @tex
+## $$
+##  E_1 (x) = \int_x^\infty {e^{-t} \over t} dt.
+## $$
+## @end tex
+## @ifnottex
+##
+## @example
+## @group
+##               infinity
+##              /
+## expint (x) = | exp (-t)/t dt
+##              /
+##             x
+## @end group
+## @end example
+##
+## @end ifnottex
 ## @end deftypefn
 
 function y = expint (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
@@ -39,17 +50,17 @@ function y = expint (x)
 endfunction
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} expint_E1 (@var{x})
 ## Compute the exponential integral,
 ## @verbatim
 ##                    infinity
 ##                   /
-##       expint(x) = | exp(t)/t dt
+##       expint(x) = | exp(-t)/t dt
 ##                   /
 ##                  x
 ## @end verbatim
 ## @end deftypefn
 
 function y = expint_E1 (x)
 
   if (nargin != 1)
