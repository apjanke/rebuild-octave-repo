# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1240809597 25200
#      Sun Apr 26 22:19:57 2009 -0700
# Node ID ad20b967e1c951c3a736043c5d645694a3aa130c
# Parent  761fc0d3d980a3cc0e3a5859726ab2c0a6a26c39
Update section 17.3 (Trigonometry) of arith.txi

Add text to help strings to indicate which functions use radians and which use degrees.
Add cross-references to radian function descriptions.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,11 @@
+2009-04-26  Rik  <rdrider0-list@yahoo.com>
+	* interpreter/arith.txi: Update section 17.3 (Trigonometry) of arith.txi
+
 2009-04-24  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.2 (Complex Arithmetic) of
 	arith.txi
 	Use Tex in more of the doc strings for pretty printing in pdf format.
 
 2009-04-24  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/octave.pdf: 
 	Eliminate most overfull errors when running texi2pdf for generating 
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -98,27 +98,32 @@ defined as @code{sqrt (-1)}.
 
 @DOCSTRING(imag)
 
 @DOCSTRING(real)
 
 @node Trigonometry
 @section Trigonometry
 
-Octave provides the following trigonometric functions.  Angles are
+Octave provides the following trigonometric functions where angles are
 specified in radians.  To convert from degrees to radians multiply by
 @iftex
 @tex
 $\pi/180$
 @end tex
 @end iftex
 @ifinfo
 @code{pi/180}
 @end ifinfo
- (e.g., @code{sin (30 * pi/180)} returns the sine of 30 degrees).
+(e.g., @code{sin (30 * pi/180)} returns the sine of 30 degrees).  As
+an alternative, Octave provides a number of trigonometric functions
+which work directly on an argument specified in degrees.  These functions
+are named after the base trigonometric function with a @samp{d} suffix.  For
+example, @code{sin} expects an angle in radians while @code{sind} expects an
+angle in degrees.
 
 @DOCSTRING(sin)
 @DOCSTRING(cos)
 @DOCSTRING(tan)
 @DOCSTRING(sec)
 @DOCSTRING(csc)
 @DOCSTRING(cot)
 
@@ -138,32 +143,31 @@ specified in radians.  To convert from d
 
 @DOCSTRING(asinh)
 @DOCSTRING(acosh)
 @DOCSTRING(atanh)
 @DOCSTRING(asech)
 @DOCSTRING(acsch)
 @DOCSTRING(acoth)
 
-Each of these functions expects a single argument.  For matrix arguments,
-they work on an element by element basis.  For example,
+@DOCSTRING(atan2)
 
+Octave provides the following trigonometric functions where angles are
+specified in degrees.  These functions produce true zeros at the appropriate
+intervals rather than the small roundoff error that occurs when using
+radians.  For example:
 @example
 @group
-sin ([1, 2; 3, 4])
-     @result{}  0.84147   0.90930
-         0.14112  -0.75680
+cosd (90)
+     @result{} 0
+cos (pi/2)
+     @result{} 6.1230e-17
 @end group
 @end example
 
-@DOCSTRING(atan2)
-
-In addition to the trigonometric functions that work with radians,
-Octave also provides the following functions which work with degrees.
-
 @DOCSTRING(sind)
 @DOCSTRING(cosd)
 @DOCSTRING(tand)
 @DOCSTRING(secd)
 @DOCSTRING(cscd)
 @DOCSTRING(cotd)
 
 @DOCSTRING(asind)
@@ -188,16 +192,18 @@ Octave also provides the following funct
 
 @DOCSTRING(accumarray)
 
 @node Utility Functions
 @section Utility Functions
 
 @DOCSTRING(ceil)
 
+@DOCSTRING(cross)
+
 @DOCSTRING(del2)
 
 @DOCSTRING(factor)
 
 @DOCSTRING(factorial)
 
 @DOCSTRING(fix)
 
@@ -231,70 +237,68 @@ Octave also provides the following funct
 
 @DOCSTRING(roundb)
 
 @DOCSTRING(sign)
 
 @node Special Functions
 @section Special Functions
 
-@DOCSTRING(besselj)
+@DOCSTRING(airy)
 
-@DOCSTRING(airy)
+@DOCSTRING(besselj)
 
 @DOCSTRING(beta)
 
 @DOCSTRING(betainc)
 
 @DOCSTRING(betaln)
 
 @DOCSTRING(bincoeff)
 
+@DOCSTRING(commutation_matrix)
+
+@DOCSTRING(duplication_matrix)
+
 @DOCSTRING(erf)
 
 @DOCSTRING(erfc)
 
 @DOCSTRING(erfinv)
 
 @DOCSTRING(gamma)
 
 @DOCSTRING(gammainc)
 
 @DOCSTRING(legendre)
 
 @anchor{doc-gammaln}
 @DOCSTRING(lgamma)
 
-@DOCSTRING(cross)
-
-@DOCSTRING(commutation_matrix)
-
-@DOCSTRING(duplication_matrix)
-
 @node Coordinate Transformations
 @section Coordinate Transformations
 
 @DOCSTRING(cart2pol)
 
 @DOCSTRING(pol2cart)
 
 @DOCSTRING(cart2sph)
 
 @DOCSTRING(sph2cart)
 
 @node Mathematical Constants
 @section Mathematical Constants
 
+@DOCSTRING(e)
+
+@DOCSTRING(pi)
+
 @DOCSTRING(I)
 
 @DOCSTRING(Inf)
 
 @DOCSTRING(NaN)
 
-@DOCSTRING(pi)
-
-@DOCSTRING(e)
-
 @DOCSTRING(eps)
 
 @DOCSTRING(realmax)
 
 @DOCSTRING(realmin)
diff --git a/scripts/elfun/acosd.m b/scripts/elfun/acosd.m
--- a/scripts/elfun/acosd.m
+++ b/scripts/elfun/acosd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} acosd (@var{x})
-## Compute the inverse cosine of an angle in degrees.
-## @seealso{acos, cosd, asecd}
+## Compute the inverse cosine in degrees for each element of @var{x}.
+## @seealso{cosd, acos}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = acosd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/acot.m b/scripts/elfun/acot.m
--- a/scripts/elfun/acot.m
+++ b/scripts/elfun/acot.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} acot (@var{x})
-## Compute the inverse cotangent of each element of @var{x}.
+## Compute the inverse cotangent in radians for each element of @var{x}.
+## @seealso{cot, acotd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acot (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/acotd.m b/scripts/elfun/acotd.m
--- a/scripts/elfun/acotd.m
+++ b/scripts/elfun/acotd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} acotd (@var{x})
-## Compute the inverse cotangent of an angle in degrees.
-## @seealso{atan, tand}
+## Compute the inverse cotangent in degrees for each element of @var{x}.
+## @seealso{cotd, acot}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = acotd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/acoth.m b/scripts/elfun/acoth.m
--- a/scripts/elfun/acoth.m
+++ b/scripts/elfun/acoth.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} acoth (@var{x})
 ## Compute the inverse hyperbolic cotangent of each element of @var{x}.
+## @seealso{coth}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acoth (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/acsc.m b/scripts/elfun/acsc.m
--- a/scripts/elfun/acsc.m
+++ b/scripts/elfun/acsc.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} acsc (@var{x})
-## Compute the inverse cosecant of each element of @var{x}.
+## Compute the inverse cosecant in radians for each element of @var{x}.
+## @seealso{csc, acscd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acsc (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/acscd.m b/scripts/elfun/acscd.m
--- a/scripts/elfun/acscd.m
+++ b/scripts/elfun/acscd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} acscd (@var{x})
-## Compute the inverse cosecant of an angle in degrees.
-## @seealso{acsc, cscd, asecd}
+## Compute the inverse cosecant in degrees for each element of @var{x}.
+## @seealso{cscd, acsc}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = acscd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/acsch.m b/scripts/elfun/acsch.m
--- a/scripts/elfun/acsch.m
+++ b/scripts/elfun/acsch.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} acsch (@var{x})
 ## Compute the inverse hyperbolic cosecant of each element of @var{x}.
+## @seealso{csch}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acsch (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/asec.m b/scripts/elfun/asec.m
--- a/scripts/elfun/asec.m
+++ b/scripts/elfun/asec.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} asec (@var{x})
-## Compute the inverse secant of each element of @var{x}.
+## Compute the inverse secant in radians for each element of @var{x}.
+## @seealso{sec, asecd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = asec (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/asecd.m b/scripts/elfun/asecd.m
--- a/scripts/elfun/asecd.m
+++ b/scripts/elfun/asecd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} asecd (@var{x})
-## Compute inverse secant in degrees.
-## @seealso{asec, secd, acscd}
+## Compute the inverse secant in degrees for each element of @var{x}.
+## @seealso{secd, asec}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = asecd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} asech (@var{x})
 ## Compute the inverse hyperbolic secant of each element of @var{x}.
+## @seealso{sech}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = asech (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/asind.m b/scripts/elfun/asind.m
--- a/scripts/elfun/asind.m
+++ b/scripts/elfun/asind.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} asind (@var{x})
-## Compute the inverse sine of an angle in degrees.
-## @seealso{asin, sind, acosd}
+## Compute the inverse sine in degrees for each element of @var{x}.
+## @seealso{sind, asin}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = asind (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/atand.m b/scripts/elfun/atand.m
--- a/scripts/elfun/atand.m
+++ b/scripts/elfun/atand.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} atand (@var{x})
-## Compute the inverse tangent of an angle in degrees.
-## @seealso{acot, tand}
+## Compute the inverse tangent in degrees for each element of @var{x}.
+## @seealso{tand, atan}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = atand (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/cosd.m b/scripts/elfun/cosd.m
--- a/scripts/elfun/cosd.m
+++ b/scripts/elfun/cosd.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cosd (@var{x})
-## Compute the cosine of an angle in degrees.  Returns zero in elements
-## for which @code{(@var{x}-90)/180} is an integer.
-## @seealso{cos, sind, tand, acosd, asind, atand}
+## Compute the cosine for each element of @var{x} in degrees.  Returns zero 
+## for elements where @code{(@var{x}-90)/180} is an integer.
+## @seealso{acosd, cos}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = cosd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/cot.m b/scripts/elfun/cot.m
--- a/scripts/elfun/cot.m
+++ b/scripts/elfun/cot.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} cot (@var{x})
-## Compute the cotangent of each element of @var{x}.
+## Compute the cotangent for each element of @var{x} in radians.
+## @seealso{acot, cotd, coth}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = cot (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/cotd.m b/scripts/elfun/cotd.m
--- a/scripts/elfun/cotd.m
+++ b/scripts/elfun/cotd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cotd (@var{x})
-## Compute the cotangent of an angle in degrees.
-## @seealso{cot, tand}
+## Compute the cotangent for each element of @var{x} in degrees.
+## @seealso{acotd, cot}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = cotd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/coth.m b/scripts/elfun/coth.m
--- a/scripts/elfun/coth.m
+++ b/scripts/elfun/coth.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} coth (@var{x})
 ## Compute the hyperbolic cotangent of each element of @var{x}.
+## @seealso{acoth}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = coth (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/csc.m b/scripts/elfun/csc.m
--- a/scripts/elfun/csc.m
+++ b/scripts/elfun/csc.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} csc (@var{x})
-## Compute the cosecant of each element of @var{x}.
+## Compute the cosecant for each element of @var{x} in radians.
+## @seealso{acsc, cscd, csch}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = csc (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/cscd.m b/scripts/elfun/cscd.m
--- a/scripts/elfun/cscd.m
+++ b/scripts/elfun/cscd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cscd (@var{x})
-## Compute the cosecant of an angle in degrees.
-## @seealso{csc, secd, sind, cosd}
+## Compute the cosecant for each element of @var{x} in degrees.
+## @seealso{acscd, csc}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = cscd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/csch.m b/scripts/elfun/csch.m
--- a/scripts/elfun/csch.m
+++ b/scripts/elfun/csch.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} csch (@var{x})
 ## Compute the hyperbolic cosecant of each element of @var{x}.
+## @seealso{acsch}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = csch (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/sec.m b/scripts/elfun/sec.m
--- a/scripts/elfun/sec.m
+++ b/scripts/elfun/sec.m
@@ -14,17 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} sec (@var{x})
-## Compute the secant of each element of @var{x}.
+## Compute the secant for each element of @var{x} in radians.
+## @seealso{asec, secd, sech}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = sec (z)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/secd.m b/scripts/elfun/secd.m
--- a/scripts/elfun/secd.m
+++ b/scripts/elfun/secd.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} secd (@var{x})
-## Compute the secant of an angle in degrees.
-## @seealso{sec, cscd, sind, cosd}
+## Compute the secant for each element of @var{x} in degrees.
+## @seealso{asecd, sec}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = secd (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/sech.m b/scripts/elfun/sech.m
--- a/scripts/elfun/sech.m
+++ b/scripts/elfun/sech.m
@@ -15,16 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} sech (@var{x})
 ## Compute the hyperbolic secant of each element of @var{x}.
+## @seealso{asech}
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = sech (z)
 
 if (nargin != 1)
     print_usage ();
diff --git a/scripts/elfun/sind.m b/scripts/elfun/sind.m
--- a/scripts/elfun/sind.m
+++ b/scripts/elfun/sind.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sind (@var{x})
-## Compute the sine of each element of @var{x}.  Returns zero in elements
-## for which @code{@var{x}/180} is an integer.
-## @seealso{sin, cosd, tand, acosd, asind, atand}
+## Compute the sine for each element of @var{x} in degrees.  Returns zero 
+## for elements where @code{@var{x}/180} is an integer.
+## @seealso{asind, sin}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = sind (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/elfun/tand.m b/scripts/elfun/tand.m
--- a/scripts/elfun/tand.m
+++ b/scripts/elfun/tand.m
@@ -13,20 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tand (@var{x})
-## Compute the tangent of an angle in degrees.  Returns zero for elements
-## of for which @code{@var{x}/180} is an integer and @code{Inf} for elements
-## where @code{(@var{x}-90)/180} is an integer.
-## @seealso{tan, cosd, sind, acosd, asind, atand}
+## Compute the tangent for each element of @var{x} in degrees.  Returns zero 
+## for elements where @code{@var{x}/180} is an integer and @code{Inf} for
+## elements where @code{(@var{x}-90)/180} is an integer.
+## @seealso{atand, tan}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = tand (x)
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -529,17 +529,18 @@ map_s_s (d_dd_fcn f, const SparseMatrix&
 
   return retval;
 }
 
 DEFUN (atan2, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
 Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
-and @var{x}.  The result is in the range -pi to pi.\n\
+and @var{x}.  Signal an error if @var{y} and @var{x} do not match in size\n\
+and orientation.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 && args(0).is_defined () && args(1).is_defined ())
     {
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -85,17 +85,18 @@ abs (3 + 4i)\n\
 %!error abs ();
 %!error abs (1, 2);
 
  */
 
 DEFUN (acos, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acos (@var{x})\n\
-Compute the inverse cosine of each element of @var{x}.\n\
+Compute the inverse cosine in radians for each element of @var{x}.\n\
+@seealso{cos, acosd}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).acos ();
   else
     print_usage ();
 
@@ -121,17 +122,18 @@ Compute the inverse cosine of each eleme
 %!error acos ();
 %!error acos (1, 2);
 
 */
 
 DEFUN (acosh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acosh (@var{x})\n\
-Compute the inverse hyperbolic cosine of each element of @var{x}.\n\
+Compute the inverse hyperbolic cosine for each element of @var{x}.\n\
+@seealso{cosh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).acosh ();
   else
     print_usage ();
 
@@ -221,17 +223,18 @@ arg (3 + 4i)\n\
 %!error arg ();
 %!error arg (1, 2);
 
 */
 
 DEFUN (asin, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} asin (@var{x})\n\
-Compute the inverse sine of each element of @var{x}.\n\
+Compute the inverse sine in radians for each element of @var{x}.\n\
+@seealso{sin, asind}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).asin ();
   else
     print_usage ();
 
@@ -247,17 +250,18 @@ Compute the inverse sine of each element
 %! assert(all (abs (asin (x) - v) < sqrt (eps)));
 %!error asin ();
 %!error asin (1, 2);
 */
 
 DEFUN (asinh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} asinh (@var{x})\n\
-Compute the inverse hyperbolic sine of each element of @var{x}.\n\
+Compute the inverse hyperbolic sine for each element of @var{x}.\n\
+@seealso{sinh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).asinh ();
   else
     print_usage ();
 
@@ -279,17 +283,18 @@ Compute the inverse hyperbolic sine of e
 %!error asinh ();
 %!error asinh (1, 2);
 
 */
 
 DEFUN (atan, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan (@var{x})\n\
-Compute the inverse tangent of each element of @var{x}.\n\
+Compute the inverse tangent in radians for each element of @var{x}.\n\
+@seealso{tan, atand}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).atan ();
   else
     print_usage ();
 
@@ -315,17 +320,18 @@ Compute the inverse tangent of each elem
 %!error atan ();
 %!error atan (1, 2);
 
  */
 
 DEFUN (atanh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atanh (@var{x})\n\
-Compute the inverse hyperbolic tangent of each element of @var{x}.\n\
+Compute the inverse hyperbolic tangent for each element of @var{x}.\n\
+@seealso{tanh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).atanh ();
   else
     print_usage ();
 
@@ -433,17 +439,18 @@ Return the complex conjugate of @var{z},
 %!error conj ();
 %!error conj (1, 2);
 
 */
 
 DEFUN (cos, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cos (@var{x})\n\
-Compute the cosine of each element of @var{x}.\n\
+Compute the cosine for each element of @var{x} in radians.\n\
+@seealso{acos, cosd, cosh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).cos ();
   else
     print_usage ();
 
@@ -469,17 +476,18 @@ Compute the cosine of each element of @v
 %!error cos ();
 %!error cos (1, 2);
 
  */
 
 DEFUN (cosh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cosh (@var{x})\n\
-Compute the hyperbolic cosine of each element of @var{x}.\n\
+Compute the hyperbolic cosine for each element of @var{x}.\n\
+@seealso{acosh, sinh, tanh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).cosh ();
   else
     print_usage ();
 
@@ -512,21 +520,23 @@ Computes the error function,\n\
 $$\n\
  {\\rm erf} (z) = {2 \\over \\sqrt{\\pi}}\\int_0^z e^{-t^2} dt\n\
 $$\n\
 @end tex\n\
 @end iftex\n\
 @ifnottex\n\
 \n\
 @example\n\
+@group\n\
                          z\n\
                         /\n\
 erf (z) = (2/sqrt (pi)) | e^(-t^2) dt\n\
                         /\n\
                      t=0\n\
+@end group\n\
 @end example\n\
 @end ifnottex\n\
 @seealso{erfc, erfinv}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).erf ();
@@ -1443,17 +1453,18 @@ For complex arguments, @code{sign} retur
 %!error sign ();
 %!error sign (1, 2);
 
 */
 
 DEFUN (sin, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sin (@var{x})\n\
-Compute the sine of each element of @var{x}.\n\
+Compute the sine for each element of @var{x} in radians.\n\
+@seealso{asin, sind, sinh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).sin ();
   else
     print_usage ();
 
@@ -1479,17 +1490,18 @@ Compute the sine of each element of @var
 %!error sin ();
 %!error sin (1, 2);
 
 */
 
 DEFUN (sinh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sinh (@var{x})\n\
-Compute the hyperbolic sine of each element of @var{x}.\n\
+Compute the hyperbolic sine for each element of @var{x}.\n\
+@seealso{asinh, cosh, tanh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).sinh ();
   else
     print_usage ();
 
@@ -1546,17 +1558,18 @@ a complex result is returned.  To comput
 %!error sqrt ();
 %!error sqrt (1, 2);
 
 */
 
 DEFUN (tan, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} tan (@var{z})\n\
-Compute tangent of each element of @var{x}.\n\
+Compute the tangent for each element of @var{x} in radians.\n\
+@seealso{atan, tand, tanh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).tan ();
   else
     print_usage ();
 
@@ -1582,17 +1595,18 @@ Compute tangent of each element of @var{
 %!error tan ();
 %!error tan (1, 2);
 
 */
 
 DEFUN (tanh, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} tanh (@var{x})\n\
-Compute hyperbolic tangent of each element of @var{x}.\n\
+Compute hyperbolic tangent for each element of @var{x}.\n\
+@seealso{atanh, sinh, cosh}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).tanh ();
   else
     print_usage ();
 
