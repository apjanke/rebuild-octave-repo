# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1479484520 -3600
#      Fri Nov 18 16:55:20 2016 +0100
# Node ID 1444a65085caa662d1ac304923aa60738934149f
# Parent  b125351d4243208970deb2ce17caaa8de941a9a8
Make axes corners join in printout (bug #39643)

* gl-render.h (opengl_renderer::set_linecap) new method that does nothing by
   default
* gl-render.cc (opengl_renderer::draw_surface/line/patch) force "butt" line cap
* gl-render.cc (opengl_renderer::draw_axes) force "square" line cap
* gl2ps-print.cc (gl2ps_renderer::set_linecap) call gl2psLineCap conditioned on
   HAVE_GL2PSLINEJOIN (both functions were introduced at the same time)

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2005,16 +2005,17 @@ namespace octave
     // Disable line smoothing for axes
     GLboolean antialias;
     glGetBooleanv (GL_LINE_SMOOTH, &antialias);
     if (antialias == GL_TRUE)
       glDisable (GL_LINE_SMOOTH);
 
     set_font (props);
     set_interpreter (props.get_ticklabelinterpreter ());
+    set_linecap ("square");
     set_linewidth (props.get_linewidth ());
 
     // draw axes object
     draw_axes_planes (props);
 
     draw_axes_x_grid (props);
     draw_axes_y_grid (props);
     draw_axes_z_grid (props);
@@ -2072,16 +2073,17 @@ namespace octave
           clip[i] = (clip_code (x(i), y(i), z_mid) & clip_mask);
       }
 
     if (! props.linestyle_is ("none") && ! props.color_is ("none"))
       {
         set_color (props.get_color_rgb ());
         set_linestyle (props.get_linestyle (), false, props.get_linewidth ());
         set_linewidth (props.get_linewidth ());
+        set_linecap ("butt");
         set_linejoin (props.get_linejoin ());
 
         if (has_z)
           {
             bool flag = false;
 
             for (int i = 1; i < n; i++)
               {
@@ -2500,16 +2502,17 @@ namespace octave
             if ((el_mode > 0) && (num_lights > 0))
               glEnable (GL_LIGHTING);
             glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD) ? GL_SMOOTH
                           : GL_FLAT);
 
             set_linestyle (props.get_linestyle (), false,
                            props.get_linewidth ());
             set_linewidth (props.get_linewidth ());
+            set_linecap ("butt");
             set_linejoin ("miter");
 
             // Mesh along Y-axis
 
             if (props.meshstyle_is ("both") || props.meshstyle_is ("column"))
               {
                 for (int i = 0; i < zc; i++)
                   {
@@ -3083,16 +3086,17 @@ namespace octave
               }
 
             if ((el_mode > 0) && (num_lights > 0) && has_normals)
               glEnable (GL_LIGHTING);
 
             double linewidth = props.get_linewidth ();
             set_linestyle (props.get_linestyle (), false, linewidth);
             set_linewidth (linewidth);
+            set_linecap ("butt");
             set_linejoin ("miter");
 
             // NOTE: patch contour cannot be offset.  Offset must occur with the
             // filled portion of the patch above.  The tesselator uses
             // GLU_TESS_BOUNDARY_ONLY to get the outline of the patch and OpenGL
             // automatically sets the glType to GL_LINE_LOOP.  This primitive is
             // not supported by glPolygonOffset which is used to do Z offsets.
             patch_tesselator tess (this, ec_mode, el_mode);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -77,17 +77,18 @@ namespace octave
     virtual void init_gl_context (bool enhanced, const Matrix& backgroundColor);
     virtual void setup_opengl_transformation (const axes::properties& props);
 
     virtual void set_color (const Matrix& c);
     virtual void set_polygon_offset (bool on, float offset = 0.0f);
     virtual void set_linewidth (float w);
     virtual void set_linestyle (const std::string& s, bool stipple = false,
                                 double linewidth = 0.5);
-    virtual void set_linejoin (const std::string& /*s*/) { };
+    virtual void set_linecap (const std::string&) { };
+    virtual void set_linejoin (const std::string&) { };
     virtual void set_clipbox (double x1, double x2, double y1, double y2,
                               double z1, double z2);
     virtual void set_clipping (bool on);
     virtual void set_font (const base_properties& props);
     virtual void set_interpreter (const caseless_str& interp)
     {
       interpreter = interp;
     }
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -119,16 +119,30 @@ namespace octave
       octave::opengl_renderer::set_linestyle (s, use_stipple, linewidth);
 
       if (s == "-" && ! use_stipple)
         gl2psDisable (GL2PS_LINE_STIPPLE);
       else
         gl2psEnable (GL2PS_LINE_STIPPLE);
     }
 
+    void set_linecap (const std::string& s)
+      {
+        octave::opengl_renderer::set_linejoin (s);
+      
+#if defined (HAVE_GL2PSLINEJOIN)
+        if (s == "butt")
+          gl2psLineCap (GL2PS_LINE_CAP_BUTT);
+        else if (s == "square")
+          gl2psLineCap (GL2PS_LINE_CAP_SQUARE);
+        else if (s == "round")
+          gl2psLineCap (GL2PS_LINE_CAP_ROUND);
+#endif
+      }
+
     void set_linejoin (const std::string& s)
     {
       octave::opengl_renderer::set_linejoin (s);
       
 #if defined (HAVE_GL2PSLINEJOIN)
       if (s == "round")
         gl2psLineJoin (GL2PS_LINE_JOIN_ROUND);
       else if (s == "miter")
