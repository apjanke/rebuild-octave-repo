# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458337177 14400
#      Fri Mar 18 17:39:37 2016 -0400
# Node ID 71cd12d228044df2dac987fd857713d1b3e0d841
# Parent  4581d0d529487707ecb40698669c852236d26afd
* textscan.cc: Use std::istream::traits_type::eof () instead of EOF.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -226,29 +226,29 @@ delimited_stream::~delimited_stream (voi
 
 int
 delimited_stream::get_undelim (void)
 {
   int retval;
   if (eof ())
     {
       setstate (std::ios_base::failbit);
-      return EOF;
+      return std::istream::traits_type::eof ();
     }
 
   if (idx < eob)
     retval = *idx++;
   else
     {
       refresh_buf ();
 
       if (eof ())
         {
           setstate (std::ios_base::eofbit);
-          retval = EOF;
+          retval = std::istream::traits_type::eof ();
         }
       else
         retval = *idx++;
     }
 
   if (idx >= last)
     delimited = false;
 
@@ -271,17 +271,17 @@ delimited_stream::peek_undelim (void)
 // new data to fill it.  Return EOF if the file is at EOF before
 // reading any data and all of the data that has been read has been
 // processed.
 
 int
 delimited_stream::refresh_buf (void)
 {
   if (eof ())
-    return EOF;
+    return std::istream::traits_type::eof ();
 
   int retval;
   int old_remaining = eob - idx;
 
   if (old_remaining < 0)
     {
       idx = eob;
       old_remaining = 0;
@@ -309,17 +309,18 @@ delimited_stream::refresh_buf (void)
   last = eob;
   if (gcount == 0)
     {
       delimited = false;
 
       if (eob != buf)              // no more data in file, but still some to go
         retval = 0;
       else
-        retval = EOF;              // file and buffer are both done.
+        // file and buffer are both done.
+        retval = std::istream::traits_type::eof ();
     }
   else
     {
       delimited = true;
 
       for (last = eob - longest; last - buf >= 0; last--)
         {
           if (strchr (delims.c_str (), *last))
@@ -327,17 +328,18 @@ delimited_stream::refresh_buf (void)
         }
 
       if (last - buf < 0)
         delimited = false;
 
       retval = 0;
     }
 
-  if (retval == EOF)  // Ensure fast peek doesn't give valid char
+  // Ensure fast peek doesn't give valid char
+  if (retval == std::istream::traits_type::eof ())
     *idx = '\0';      // FIXME - check that no TreatAsEmpty etc starts w. \0?
 
   return retval;
 }
 
 // Return a pointer to a block of data of size size, assuming that a
 // sufficiently large buffer is available in buffer, if required.
 // If called when delimited == true, and size is no greater than
@@ -411,17 +413,18 @@ delimited_stream::read (char *buffer, in
 // Return in OUT an entire line, terminated by delim.  On input, OUT
 // must have length at least 1.
 
 int
 delimited_stream::getline (std::string& out, char delim)
 {
   int len = out.length (), used = 0;
   int ch;
-  while ((ch = get_undelim ()) != delim && ch != EOF)
+  while ((ch = get_undelim ()) != delim
+         && ch != std::istream::traits_type::eof ())
     {
       out[used++] = ch;
       if (used == len)
         {
           len <<= 1;
           out.resize (len);
         }
     }
@@ -1581,30 +1584,30 @@ textscan::read_double (delimited_stream&
             }
           valid = false;
           while (width_left-- && is && (ch = is.get ()) >= '0' && ch1 <= '9')
             {
               exp = exp*10 + ch - '0';
               valid = true;
             }
           width_left++;
-          if (ch != EOF && width_left)
+          if (ch != std::istream::traits_type::eof () && width_left)
             is.putback (ch);
 
           double multiplier = pown (10, exp);
           if (exp_sign > 0)
             retval *= multiplier;
           else
             retval /= multiplier;
 
           used_exp = true;
         }
     }
   is.clear ();
-  if (! used_exp && ch != EOF && width_left)
+  if (! used_exp && ch != std::istream::traits_type::eof () && width_left)
     is.putback (ch);
 
   // Check for +/- inf and NaN
   if (! valid && width_left >= 3)
     {
       int i = lookahead (is, inf_nan, 3, false);   // false -> case insensitive
       if (i == 0)
         {
@@ -1787,26 +1790,29 @@ textscan::scan_complex (delimited_stream
 }
 
 // Return in VAL the run of characters from IS NOT contained in PATTERN.
 
 int
 textscan::scan_caret (delimited_stream& is, const char *pattern,
                       std::string& val) const
 {
-  int c1 = EOF;
+  int c1 = std::istream::traits_type::eof ();
   std::ostringstream obuf;              // Is this optimised for growing?
 
-  while (is && (c1 = (is && ! is.eof ()) ? is.get_undelim () : EOF) != EOF
+  while (is && ((c1 = (is && ! is.eof ())
+                 ? is.get_undelim ()
+                 : std::istream::traits_type::eof ())
+                != std::istream::traits_type::eof ())
          && ! strchr (pattern, c1))
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
 
-  if (c1 != EOF)
+  if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
 
   return c1;
 }
 
 // Read until one of the strings in DELIMITERS is found.  For
 // efficiency, ENDS is a list of the last character of each delimiter.
 
@@ -1817,18 +1823,20 @@ textscan::read_until (delimited_stream& 
   std::string retval ("");
   bool done = false;
   do
     {                               // find sequence ending with an ending char
       std::string next;
       scan_caret (is, ends.c_str (), next);
       retval = retval + next;   // FIXME -- could use repeated doubling of size
 
-      int last = (! is.eof ()) ? is.get_undelim () : EOF;
-      if (last != EOF)
+      int last = (! is.eof ()
+                  ? is.get_undelim () : std::istream::traits_type::eof ());
+
+      if (last != std::istream::traits_type::eof ())
         {
           retval = retval + static_cast<char> (last);
           for (int i = 0; i < delimiters.numel (); i++)
             {
               std::string delim = delimiters(i).string_value ();
               int start = retval.length () - delim.length ();
               if (start < 0)
                 start = 0;
@@ -1861,17 +1869,17 @@ textscan::scan_string (delimited_stream&
       unsigned int i = 0;
       unsigned int width = fmt.width;
 
       for (i = 0; i < width; i++)
         {
           if (i+1 > val.length ())
             val = val + val + ' ';      // grow even if empty
           int ch = is.get ();
-          if (is_delim (ch) || ch == EOF)
+          if (is_delim (ch) || ch == std::istream::traits_type::eof ())
             {
               is.putback (ch);
               break;
             }
           else
             val[i] = ch;
         }
       val = val.substr (0, i);          // trim pre-allocation
@@ -1889,24 +1897,24 @@ textscan::scan_string (delimited_stream&
 }
 
 // Return in VAL the run of characters from IS contained in PATTERN.
 
 int
 textscan::scan_bracket (delimited_stream& is, const char *pattern,
                         std::string& val) const
 {
-  int c1 = EOF;
+  int c1 = std::istream::traits_type::eof ();
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && strchr (pattern, (c1 = is.get_undelim ())))
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
-  if (c1 != EOF)
+  if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
   return c1;
 }
 
 // Return in VAL a string, either delimited by whitespace/delimiters, or
 // enclosed in a pair of double quotes ("...").  Enclosing quotes are
 // removed.  A consecutive pair "" is inserted into VAL as a single ".
 
@@ -1942,17 +1950,17 @@ void
 textscan::scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
                         std::string& val) const
 {
   val.resize (fmt.width);
 
   for (unsigned int i = 0; is && i < fmt.width; i++)
     {
       int ch = is.get_undelim ();
-      if (ch != EOF)
+      if (ch != std::istream::traits_type::eof ())
         val[i] = ch;
       else
         {
           val.resize (i);
           break;
         }
     }
 }
@@ -2488,24 +2496,24 @@ textscan::parse_options (const octave_va
 }
 
 // Skip comments, and characters specified by the "Whitespace" option.
 // If EOLstop == true, don't skip end of line.
 
 int
 textscan::skip_whitespace (delimited_stream& is, bool EOLstop)
 {
-  int c1 = EOF;
+  int c1 = std::istream::traits_type::eof ();
   bool found_comment = false;
 
   do
     {
       found_comment = false;
       int prev = -1;
-      while (is && (c1 = is.get_undelim ()) != EOF
+      while (is && (c1 = is.get_undelim ()) != std::istream::traits_type::eof ()
              && ( ( (c1 == eol1 || c1 == eol2) && ++lines && ! EOLstop)
                   || isspace (c1)))
         {
           if (prev == eol1 && eol1 != eol2 && c1 == eol2)
             lines--;
           prev = c1;
         }
 
@@ -2559,17 +2567,17 @@ textscan::skip_whitespace (delimited_str
             {
               is.clear (state);
               is.seekg (pos);
             }
         }
     }
   while (found_comment);
 
-  if (c1 != EOF)
+  if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
   return c1;
 }
 
 // See if the next few characters match one of the strings in target.
 // For efficiency, MAX_LEN is the cached longest length of any target.
 // Return -1 if none is found, or the index of the match.
 
@@ -2625,25 +2633,26 @@ textscan::skip_delim (delimited_stream& 
           if (c1 == eol1 && is.peek_undelim () == eol2)
             is.get_undelim ();          // if \r\n, skip the \n too.
 
           if (multiple_delims_as_one)
             {
               int prev = -1;
               // skip multiple delims.
               // Increment lines for each end-of-line seen; for \r\n, decrement
-              while (is && (c1 = is.get_undelim ()) != EOF
+              while (is && ((c1 = is.get_undelim ())
+                            != std::istream::traits_type::eof ())
                      && (((c1 == eol1 || c1 == eol2) && ++lines)
                          || isspace (c1) || is_delim (c1)))
                 {
                   if (prev == eol1 && eol1 != eol2 && c1 == eol2)
                     lines--;
                   prev = c1;
                 }
-              if (c1 != EOF)
+              if (c1 != std::istream::traits_type::eof ())
                 is.putback (c1);
             }
         }
     }
   else                                  // multi-character delimiter
     {
       int first_match;
 
@@ -2661,17 +2670,18 @@ textscan::skip_delim (delimited_stream& 
               is.get_undelim ();
             }
 
           if (multiple_delims_as_one)
             {
               int prev = -1;
               // skip multiple delims.
               // Increment lines for each end-of-line seen; for \r\n, decrement
-              while (is && (c1 = skip_whitespace (is, true)) != EOF
+              while (is && ((c1 = skip_whitespace (is, true))
+                            != std::istream::traits_type::eof ())
                      && (((c1 == eol1 || c1 == eol2) && ++lines)
                          || -1 != lookahead (is, delim_list, delim_len)))
                 {
                   if (prev == eol1 && eol1 != eol2 && c1 == eol2)
                     lines--;
                   prev = c1;
                 }
             }
@@ -2692,17 +2702,17 @@ textscan::match_literal (delimited_strea
      // since a delimiter at the start of a line is a mismatch, not empty field
   skip_whitespace (is, false);
 
   for (unsigned int i = 0; i < fmt.width; i++)
     {
       int ch = is.get_undelim ();
       if (ch != fmt.text[i])
         {
-          if (ch != EOF)
+          if (ch != std::istream::traits_type::eof ())
             is.putback (ch);
           is.setstate (std::ios::failbit);
           return false;
         }
     }
   return true;
 }
 
