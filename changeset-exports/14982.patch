# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1341854479 18000
#      Mon Jul 09 12:21:19 2012 -0500
# Node ID d27fa4f0370696fc3bd60a708e8c715634d722c4
# Parent  50e9e02d7c0e3328aa520ae99e87b59d2781e24e
Fix bad merge

diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -109,21 +109,17 @@ tree_identifier::rvalue1 (int nargout)
     retval = tmp(0);
 
   return retval;
 }
 
 octave_lvalue
 tree_identifier::lvalue (void)
 {
-<<<<<<< local
   return octave_lvalue (&(sym->varref ()));
-=======
-  return octave_lvalue (&(xsym ().varref ()));
->>>>>>> other
 }
 
 tree_identifier *
 tree_identifier::dup (symbol_table::scope_id sc,
                       symbol_table::context_id) const
 {
   // The new tree_identifier object contains a symbol_record
   // entry from the duplicated scope.
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -58,27 +58,19 @@ public:
   bool has_magic_end (void) const { return (name () == "__end__"); }
 
   bool is_identifier (void) const { return true; }
 
   // The name doesn't change with scope, so use sym instead of
   // accessing it through sym so that this function may remain const.
   std::string name (void) const { return sym.name (); }
 
-<<<<<<< local
   bool is_defined (void) { return sym->is_defined (); }
-=======
-  bool is_defined (void) { return xsym ().is_defined (); }
->>>>>>> other
 
-<<<<<<< local
   virtual bool is_variable (void) { return sym->is_variable (); }
-=======
-  virtual bool is_variable (void) { return xsym ().is_variable (); }
->>>>>>> other
 
   virtual bool is_black_hole (void) { return false; }
 
   // Try to find a definition for an identifier.  Here's how:
   //
   //   * If the identifier is already defined and is a function defined
   //     in an function file that has been modified since the last time
   //     we parsed it, parse it again.
@@ -90,40 +82,24 @@ public:
   //     function file to parse.
   //
   //   * On systems that support dynamic linking, we prefer .oct files,
   //     then .mex files, then .m files.
 
   octave_value
   do_lookup (const octave_value_list& args = octave_value_list ())
   {
-<<<<<<< local
     return sym->find (args);
-=======
-    return xsym ().find (args);
->>>>>>> other
   }
 
-<<<<<<< local
   void mark_global (void) { sym->mark_global (); }
-=======
-  void mark_global (void) { xsym ().mark_global (); }
->>>>>>> other
 
-<<<<<<< local
   void mark_as_static (void) { sym->init_persistent (); }
-=======
-  void mark_as_static (void) { xsym ().init_persistent (); }
->>>>>>> other
 
-<<<<<<< local
   void mark_as_formal_parameter (void) { sym->mark_formal (); }
-=======
-  void mark_as_formal_parameter (void) { xsym ().mark_formal (); }
->>>>>>> other
 
   // We really need to know whether this symbol referst to a variable
   // or a function, but we may not know that yet.
 
   bool lvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
