# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498256287 14400
#      Fri Jun 23 18:18:07 2017 -0400
# Node ID ffd27f53fc795ae692140edc7d88f7b11d1b3658
# Parent  6fe13cd3543c62372f9a6d7583efccea631a859c
make +package function calls work again (bug #51295, #51296)

* ov.h (octave_value::is_classdef_meta): New function.
* ov-base.h (octave_base_value::is_classdef_meta):
New virtual function.
* ov-classdef.cc (octave_classdef_meta::is_classdef_meta):
New function.

* pt-eval.cc (tree_evaluator::visit_index_expression):
Handle calls to functions from +package directories.  Don't call
subsref on function objects unless they are classdef_meta objects.
If indexing produces a function object, call it.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -365,16 +365,18 @@ public:
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
   virtual bool isstruct (void) const { return false; }
 
   virtual bool isobject (void) const { return false; }
 
+  virtual bool is_classdef_meta (void) const { return false; }
+
   virtual bool is_classdef_object (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1012,16 +1012,18 @@ class octave_classdef_meta : public octa
 {
 public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
   ~octave_classdef_meta (void)
   { object.meta_release (); }
 
+  bool is_classdef_meta (void) const { return true; }
+
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
   {
     return object.meta_subsref (type, idx, nargout);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -581,16 +581,19 @@ public:
 
   bool isstruct (void) const
   { return rep->isstruct (); }
 
   OCTAVE_DEPRECATED (4.4, "use 'isstruct' instead")
   bool is_map (void) const
   { return rep->isstruct (); }
 
+  bool is_classdef_meta (void) const
+  { return rep->is_classdef_meta (); }
+
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
   OCTAVE_DEPRECATED (4.4, "use 'isobject' instead")
   bool is_object (void) const
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1357,28 +1357,41 @@ namespace octave
             panic_impossible ();
           }
 
         p_args++;
         p_arg_nm++;
         p_dyn_field++;
       }
 
-    if (! idx.empty ())
+    if (! idx.empty () && (! base_expr_val.is_function ()
+                           || base_expr_val.is_classdef_meta ()))
       {
         try
           {
             retval = base_expr_val.subsref (type.substr (beg, n-beg), idx, nargout);
           }
         catch (octave::index_exception& e)  // range problems, bad index type, etc.
           {
             final_index_error (e, expr);
           }
       }
 
+    // This happens if... ??
+
+    octave_value val = (retval.length () ? retval(0) : octave_value ());
+
+    if (val.is_function ())
+      {
+        octave_function *fcn = val.function_value (true);
+
+        if (fcn)
+          retval = fcn->call (*this, nargout);
+      }
+
     m_value_stack.push (retval);
   }
 
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
     octave_value retval = Matrix ();
 
