# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1450257905 -3600
#      Wed Dec 16 10:25:05 2015 +0100
# Node ID 0fb9de5b790310d2018534562b6c8466595a63ab
# Parent  40e1134ec9843c96f36733b3f6d06c3f4d6872b5
remove verbose warnings from ode solvers

* scripts/ode/ode{23,45}.m: remove warnings about default values.
* scripts/ode/module.mk: reorder files in alphabetical order.
* scripts/ode/{ode_struct_value_check.m,odeget.m,odeset.m}:
  add options for integrators with fixed step.

diff --git a/scripts/ode/module.mk b/scripts/ode/module.mk
--- a/scripts/ode/module.mk
+++ b/scripts/ode/module.mk
@@ -3,29 +3,30 @@ FCN_FILE_DIRS += \
   scripts/ode/private
 
 scripts_ode_PRIVATE_FCN_FILES = \
   scripts/ode/private/AbsRel_Norm.m \
   scripts/ode/private/integrate_adaptive.m \
   scripts/ode/private/integrate_const.m \
   scripts/ode/private/integrate_n_steps.m \
   scripts/ode/private/kahan.m \
+  scripts/ode/private/known_option_names \
   scripts/ode/private/ode_event_handler.m \
   scripts/ode/private/ode_struct_value_check.m \
+  scripts/ode/private/runge_kutta_23.m \
   scripts/ode/private/runge_kutta_45_dorpri.m \
   scripts/ode/private/runge_kutta_interpolate.m \
-  scripts/ode/private/starting_stepsize.m \
-  scripts/ode/private/runge_kutta_23.m
+  scripts/ode/private/starting_stepsize.m
 
-scripts_ode_FCN_FILES = \
+scripts_ode_FCN_FILES =  \
+  scripts/ode/ode23.m \
   scripts/ode/ode45.m \
   scripts/ode/odeset.m \
   scripts/ode/odeget.m \
-  scripts/ode/odeplot.m \
-  scripts/ode/ode23.m
+  scripts/ode/odeplot.m
 
 scripts_odedir = $(fcnfiledir)/ode
 
 scripts_ode_DATA = $(scripts_ode_FCN_FILES)
 
 scripts_ode_privatedir = $(fcnfiledir)/ode/private
 
 scripts_ode_private_DATA = $(scripts_ode_PRIVATE_FCN_FILES)
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -190,30 +190,24 @@ function varargout = ode23 (fun, trange,
   else
     warning ("Octave:invalid-input-arg",
              "ode23: assuming an adaptive integrate function\n");
     integrate_func = "adaptive";
   endif
 
   if (isempty (odeopts.RelTol) && ! odeopts.stepsizefixed)
     odeopts.RelTol = 1e-3;
-    warning ("Octave:invalid-input-arg",
-             "ode23: option \"RelTol\" not set, new value %f will be used\n",
-             odeopts.RelTol);
   elseif (! isempty (odeopts.RelTol) && odeopts.stepsizefixed)
     warning ("Octave:invalid-input-arg",
              ["ode23: option \"RelTol\" is ignored", ...
               " when fixed time stamps are given\n"]);
   endif
 
   if (isempty (odeopts.AbsTol) && ! odeopts.stepsizefixed)
     odeopts.AbsTol = 1e-6;
-    warning ("Octave:invalid-input-arg",
-             "ode23: option \"AbsTol\" not set, new value %f will be used\n",
-             odeopts.AbsTol);
   elseif (! isempty (odeopts.AbsTol) && odeopts.stepsizefixed)
     warning ("Octave:invalid-input-arg",
              ["ode23: option \"AbsTol\" is ignored", ...
               " when fixed time stamps are given\n"]);
   else
     odeopts.AbsTol = odeopts.AbsTol(:);  # Create column vector
   endif
 
@@ -243,32 +237,27 @@ function varargout = ode23 (fun, trange,
 
   if (odeopts.Refine > 0)
     odeopts.haverefine = true;
   else 
     odeopts.haverefine = false;
   endif
 
   if (isempty (odeopts.InitialStep) && strcmp (integrate_func, "adaptive"))
-    odeopts.InitialStep = odeopts.direction* ...
-      starting_stepsize (order, fun, trange(1), init, odeopts.AbsTol,
-                         odeopts.RelTol, odeopts.normcontrol);
-    warning ("Octave:invalid-input-arg",
-             ["ode23: option \"InitialStep\" not set,", ...
-              " estimated value %f will be used\n"],
-             odeopts.InitialStep);
+    odeopts.InitialStep = odeopts.direction * ...
+                          starting_stepsize (order, fun, trange(1),
+                                             init, odeopts.AbsTol,
+                                             odeopts.RelTol,
+                                             odeopts.normcontrol);
   elseif (isempty (odeopts.InitialStep))
     odeopts.InitialStep = TimeStepSize;
   endif
 
   if (isempty (odeopts.MaxStep) && ! odeopts.stepsizefixed)
     odeopts.MaxStep = abs (trange(end) - trange(1)) / 10;
-    warning ("Octave:invalid-input-arg",
-             "ode23: option \"MaxStep\" not set, new value %f will be used\n",
-             odeopts.MaxStep);
   endif
 
   odeopts.haveeventfunction = ! isempty (odeopts.Events);
 
   ## The options 'Jacobian', 'JPattern' and 'Vectorized' will be ignored
   ## by this solver because this solver uses an explicit Runge-Kutta method
   ## and therefore no Jacobian calculation is necessary
   if (! isempty (odeopts.Jacobian))
@@ -561,27 +550,16 @@ endfunction
 %!  sol = ode23 (@fpol, [0 10], [2 0], opt);
 %!  assert ([sol.ie, sol.xe, sol.ye], ...
 %!    [2.0, 2.496110, -0.830550, -2.677589], .5e-1);
 %!test ## Events option, five output arguments
 %!  opt = odeset ("Events", @fevn, "NormControl", "on");
 %!  [t, y, vxe, ye, vie] = ode23 (@fpol, [0 10], [2 0], opt);
 %!  assert ([vie, vxe, ye], ...
 %!    [2.0, 2.496110, -0.830550, -2.677589], 1e-1);
-%!test ## Jacobian option
-%!  opt = odeset ("Jacobian", @fjac);
-%!  sol = ode23 (@fpol, [0 2], [2 0], opt);
-%!  assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!test ## Jacobian option and sparse return value
-%!  opt = odeset ("Jacobian", @fjcc);
-%!  sol = ode23 (@fpol, [0 2], [2 0], opt);
-%!  assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!
-%! ## test for JPattern option is missing
-%! ## test for Vectorized option is missing
 %!
 %!test ## Mass option as function
 %!  opt = odeset ("Mass", @fmas);
 %!  sol = ode23 (@fpol, [0 2], [2 0], opt);
 %!  assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
 %!test ## Mass option as matrix
 %!  opt = odeset ("Mass", eye (2,2));
 %!  sol = ode23 (@fpol, [0 2], [2 0], opt);
@@ -593,20 +571,16 @@ endfunction
 %!test ## Mass option as function and sparse matrix
 %!  opt = odeset ("Mass", @fmsa);
 %!  sol = ode23 (@fpol, [0 2], [2 0], opt);
 %!  assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
 %!test ## Mass option as function and MStateDependence
 %!  opt = odeset ("Mass", @fmas, "MStateDependence", "strong");
 %!  sol = ode23 (@fpol, [0 2], [2 0], opt);
 %!  assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!test ## Set BDF option to something else than default
-%!  opt = odeset ("BDF", "on");
-%!  [t, y] = ode23 (@fpol, [0 2], [2 0], opt);
-%!  assert ([t(end), y(end,:)], [2, fref], 1e-3);
 %!
 %! ## test for MvPattern option is missing
 %! ## test for InitialSlope option is missing
 %! ## test for MaxOrder option is missing
 %!
 %!  warning ("on", "Octave:InvalidArgument");
 
 ## Local Variables: ***
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -173,30 +173,24 @@ function varargout = ode45 (fun, trange,
   else
     warning ("Octave:invalid-input-arg",
              "ode45: assuming an adaptive integrate function\n");
     integrate_func = "adaptive";
   endif
 
   if (isempty (odeopts.RelTol) && ! odeopts.stepsizefixed)
     odeopts.RelTol = 1e-3;
-    warning ("Octave:invalid-input-arg",
-             "ode45: option 'RelTol' not set, new value %f will be used\n",
-             odeopts.RelTol);
   elseif (! isempty (odeopts.RelTol) && odeopts.stepsizefixed)
     warning ("Octave:invalid-input-arg",
              ["ode45: option 'RelTol' is ignored", ...
               " when fixed time stamps are given\n"]);
   endif
 
   if (isempty (odeopts.AbsTol) && ! odeopts.stepsizefixed)
     odeopts.AbsTol = 1e-6;
-    warning ("Octave:invalid-input-arg",
-             "ode45: option 'AbsTol' not set, new value %f will be used\n",
-             odeopts.AbsTol);
   elseif (! isempty (odeopts.AbsTol) && odeopts.stepsizefixed)
     warning ("Octave:invalid-input-arg",
              ["ode45: option 'AbsTol' is ignored", ...
               " when fixed time stamps are given\n"]);
   else
     odeopts.AbsTol = odeopts.AbsTol(:);  # Create column vector
   endif
 
@@ -232,29 +226,22 @@ function varargout = ode45 (fun, trange,
 
   if (isempty (odeopts.InitialStep) && strcmp (integrate_func, "adaptive"))
     odeopts.InitialStep = ...
       odeopts.direction * starting_stepsize (order, fun, trange(1),
                                                   init,
                                                   odeopts.AbsTol,
                                                   odeopts.RelTol,
                                                   odeopts.normcontrol);
-    warning ("Octave:invalid-input-arg",
-             ["ode45: option 'InitialStep' not set,", ...
-              " estimated value %f will be used\n"],
-             odeopts.InitialStep);
   elseif (isempty (odeopts.InitialStep))
     odeopts.InitialStep = TimeStepSize;
   endif
 
   if (isempty (odeopts.MaxStep) && ! odeopts.stepsizefixed)
     odeopts.MaxStep = abs (trange(end) - trange(1)) / 10;
-    warning ("Octave:invalid-input-arg",
-             "ode45: option 'MaxStep' not set, new value %f will be used\n",
-             odeopts.MaxStep);
   endif
 
   odeopts.haveeventfunction = ! isempty (odeopts.Events);
 
   ## The options "Jacobian", "JPattern" and "Vectorized" will be ignored
   ## by this solver because this solver uses an explicit Runge-Kutta method
   ## and therefore no Jacobian calculation is necessary.
   if (! isempty (odeopts.Jacobian))
@@ -564,28 +551,16 @@ endfunction
 %! sol = ode45 (@fpol, [0 10], [2 0], opt);
 %! assert ([sol.ie, sol.xe, sol.ye],
 %!         [2.0, 2.496110, -0.830550, -2.677589], 6e-1);
 %!test  # Events option, five output arguments
 %! opt = odeset ("Events", @fevn, "NormControl", "on");
 %! [t, y, vxe, ye, vie] = ode45 (@fpol, [0 10], [2 0], opt);
 %! assert ([vie, vxe, ye],
 %!         [2.0, 2.496110, -0.830550, -2.677589], 6e-1);
-%!test  # Jacobian option
-%! opt = odeset ("Jacobian", @fjac);
-%! sol = ode45 (@fpol, [0 2], [2 0], opt);
-%! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!test  # Jacobian option and sparse return value
-%! opt = odeset ("Jacobian", @fjcc);
-%! sol = ode45 (@fpol, [0 2], [2 0], opt);
-%! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-
-## test for JPattern option is missing
-## test for Vectorized option is missing
-
 %!test  # Mass option as function
 %! opt = odeset ("Mass", @fmas);
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
 %!test  # Mass option as matrix
 %! opt = odeset ("Mass", eye (2,2));
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
@@ -596,21 +571,8 @@ endfunction
 %!test  # Mass option as function and sparse matrix
 %! opt = odeset ("Mass", @fmsa);
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
 %!test  # Mass option as function and MStateDependence
 %! opt = odeset ("Mass", @fmas, "MStateDependence", "strong");
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!test  # Set BDF option to something other than default
-%! opt = odeset ("BDF", "on");
-%! [t, y] = ode45 (@fpol, [0 2], [2 0], opt);
-%! assert ([t(end), y(end,:)], [2, fref], 1e-3);
-
-## test for MvPattern option is missing
-## test for InitialSlope option is missing
-## test for MaxOrder option is missing
-
-%!test
-%!
-%! #warning ("on", "Octave:invalid-input-arg");
-
diff --git a/scripts/ode/odeget.m b/scripts/ode/odeget.m
--- a/scripts/ode/odeget.m
+++ b/scripts/ode/odeget.m
@@ -71,22 +71,17 @@ function val = odeget (ode_opt, field, d
   elseif (! ischar (field))
     error ("odeget: FIELD must be a string");
   endif
 
   ## Check if the given struct is a valid ODEOPT struct
   ode_struct_value_check ("odeget", ode_opt);
 
   ## Define all the possible ODEOPT fields
-  persistent options = {"AbsTol"; "BDF"; "Events"; "InitialSlope";
-                        "InitialStep"; "Jacobian"; "JConstant"; "JPattern";
-                        "Mass"; "MassConstant"; "MassSingular"; "MaxOrder";
-                        "MaxStep"; "MStateDependence"; "MvPattern";
-                        "NonNegative"; "NormControl"; "OutputFcn"; "OutputSel";
-                        "Refine"; "RelTol"; "Stats"; "Vectorized"};
+  persistent options = known_option_names ();
 
   exactmatch = true;
   match = find (strcmpi (field, options));
   if (isempty (match))
     match = find (strncmpi (field, options, length (field)));
     exactmatch = false;
   endif
 
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -43,22 +43,17 @@
 ## new values from the structure @var{newstruct}.  Empty values in
 ## @var{newstruct} will not overwrite values in @var{oldstruct}.
 ## @seealso{odeget}
 ## @end deftypefn
 
 function odestruct = odeset (varargin)
 
   ## Column vector of all possible ODE options
-  persistent options = {"AbsTol"; "BDF"; "Events"; "InitialSlope";
-                        "InitialStep"; "Jacobian"; "JConstant"; "JPattern";
-                        "Mass"; "MassConstant"; "MassSingular"; "MaxOrder";
-                        "MaxStep"; "MStateDependence"; "MvPattern";
-                        "NonNegative"; "NormControl"; "OutputFcn"; "OutputSel";
-                        "Refine"; "RelTol"; "Stats"; "Vectorized"};
+  persistent options = known_option_names ();
 
   if (nargin == 0)
     ## Special calling syntax to display defaults
     if (nargout == 0)
       print_options ();
     else
       odestruct = cell2struct (cell (numel (options), 1), options);
     endif
diff --git a/scripts/ode/private/ode_struct_value_check.m b/scripts/ode/private/ode_struct_value_check.m
--- a/scripts/ode/private/ode_struct_value_check.m
+++ b/scripts/ode/private/ode_struct_value_check.m
@@ -246,16 +246,32 @@ function ode_struct = ode_struct_value_c
       case "Vectorized"
         if (! isempty (val))
           if (! strcmp (val, "on") && ! strcmp (val, "off"))
             error ("Octave:invalid-input-arg",
                    [caller ": invalid value assigned to field '%s'"], opt);
           endif
         endif
 
+      case "TimeStepSize"
+        if (! isempty (val))
+         if (! isscalar (val))
+              error ("Octave:invalid-input-arg",
+                     [caller ": invalid value assigned to field '%s'"], opt);
+         endif
+        endif
+        
+      case "TimeStepNumber"
+        if (! isempty (val))
+          if (! isscalar (val))
+            error ("Octave:invalid-input-arg",
+                   [caller ": invalid value assigned to field '%s'"], opt);
+          endif
+        endif
+
       otherwise
         warning ("Octave:invalid-input-arg",
                  [caller ": unknown field '%s' in ODE options\n"], opt);
     endswitch
   endfor
 
 endfunction
 
