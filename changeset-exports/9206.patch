# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1242417750 14400
#      Fri May 15 16:02:30 2009 -0400
# Node ID 5f36c6c9be13d6904662ce217a3cba2ea3bb3bf1
# Parent  ba7f45642ffe3f65a286ae8e414948899c66c2a7
Handle loading of objects with inheritance from MAT files.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-05-15  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* ov-class.cc (octave_class::exemplar_info): Fix typo in error message.
+	* ov-class.cc (Fmethods): Methods returns cell array.
+	* ls-mat5.cc (read_mat5_binary_element):
+	Construct exemplar array and ensure inheritance is correct.
+
 2009-05-15  John W. Eaton  <jwe@octave.org>
 
 	* error.cc (Ferror): Handle error struct argument.
 
 	* ls-mat5.cc (save_mat5_binary_element): Avoid multiple calls to
 	contents method.  From David Bateman <dbateman@free.fr>.
 	(save_mat5_element_length): Use const Cell to avoid making copies
 	when indexing.
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1101,18 +1101,23 @@ read_mat5_binary_element (std::istream& 
 		// inline is not an object in Octave but rather an
 		// overload of a function handle. Special case.
 		tc =  
 		  new octave_fcn_inline (m.contents("expr")(0).string_value(),
 					 m.contents("args")(0).string_value());
 	      }
 	    else
 	      {
-		tc = new octave_class (m, classname);
+		octave_class* cls = new octave_class (m, classname);
+		cls->reconstruct_exemplar ();
 
+		if (! cls->reconstruct_parents ())
+		  warning ("load: unable to reconstruct object inheritance");
+
+		tc = cls; 
 		if (load_path::find_method (classname, "loadobj") != 
 		    std::string())
 		  {
 		    octave_value_list tmp = feval ("loadobj", tc, 1);
 
 		    if (! error_state)
 		      tc = tmp(0);
 		    else
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -1482,17 +1482,17 @@ octave_class::exemplar_info::compare (co
 	{
 	  retval = false;
 	  error ("mismatch in number of fields");
 	}
     }
   else
     {
       retval = false;
-      error ("inavlid comparison of class exemplar to non-class object");
+      error ("invalid comparison of class exemplar to non-class object");
     }
 
   return retval;
 }
 
 DEFUN (class, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} class (@var{expr})\n\
@@ -1696,17 +1696,17 @@ object @var{x} or the named class.\n\
 	    {
 	      octave_stdout << "Methods for class " << class_name << ":\n\n";
 
 	      sv.list_in_columns (octave_stdout);
 
 	      octave_stdout << std::endl;
 	    }
 	  else
-	    retval = sv;
+	    retval = Cell (sv);
 	}	  
     }
   else
     print_usage ();
 
   return retval;
 }
 
