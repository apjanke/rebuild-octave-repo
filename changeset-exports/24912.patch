# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1516776183 28800
#      Tue Jan 23 22:43:03 2018 -0800
# Branch stable
# Node ID 08c871c4147b2dd9f86a348d4bff953fca5a0111
# Parent  8d6f3941a118fa6d7f96518f5d5eec3464fcea62
sinint(0) returns correctly signed zero output.

sinint.m: return correctly signed 0, add BIST.

diff --git a/scripts/specfun/sinint.m b/scripts/specfun/sinint.m
--- a/scripts/specfun/sinint.m
+++ b/scripts/specfun/sinint.m
@@ -58,17 +58,17 @@ function [y] = sinint (x)
   sz = size (x);
   x = x(:);
   y = zeros (size (x), class (x));
   tol = eps (class (x));
 
   i_miss = true (length (x), 1);
 
   ## Trivial values
-  y(x == 0) = 0;
+  y(x == 0) = x(x == 0);  # correctly signed zero
   y(x == Inf) = pi / 2;
   y(x == - Inf) = - pi / 2;
 
   i_miss = ((i_miss) & (x != 0) & (x != Inf) & (x != - Inf));
 
   ## For values large in modulus we use the relation with expint
 
   flag_large = abs (x) > 2;
@@ -118,16 +118,17 @@ endfunction
 %! x = [2, 3, pi; exp(1), 5, 6];
 %! A = sinint (x);
 %! %B = double (sinint (y));
 %! B = [1.60541297680269, 1.84865252799947, 1.85193705198247e+00; ...
 %!      1.82104026914757, 1.54993124494467, 1.42468755128051e+00];
 %! assert (A, B, -5e-15);
 
 %!assert (sinint (0), 0)
+%!assert (signbit (sinint (-0)))
 %!assert (sinint (inf), pi/2)
 %!assert (sinint (-inf), -pi/2)
 %!assert (isnan (sinint (nan)))
 
 %!assert (class (sinint (single (1))), "single")
 
 ##tests against maple
 %!assert (sinint (1), 0.9460830703671830149414, -2*eps)
