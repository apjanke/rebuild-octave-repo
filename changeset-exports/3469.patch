# HG changeset patch
# User jwe
# Date 948495686 0
#      Fri Jan 21 23:01:26 2000 +0000
# Node ID fe0c38ca9d826d0c95574dabf4c1f60a900d5a31
# Parent  a2dc6de198f9840183d2657e0e9be45bfc200502
[project @ 2000-01-21 23:01:26 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1609,28 +1609,28 @@ ComplexMatrix::expm (void) const
   Array<double> dpermute (nc);
   Array<double> dscale (nc);
 
   // XXX FIXME XXX -- should pass job as a parameter in expm
 
   // Permute first
   char job = 'P';
   F77_XFCN (zgebal, ZGEBAL, (&job, nc, mp, nc, ilo, ihi,
-            dpermute.fortran_vec(), info, 1L, 1L));
+            dpermute.fortran_vec (), info, 1L, 1L));
 
   if (f77_exception_encountered)
     {
       (*current_liboctave_error_handler) ("unrecoverable error in zgebal");
       return retval;
     }
 
   // then scale
   job = 'S';
   F77_XFCN (zgebal, ZGEBAL, (&job, nc, mp, nc, ilos, ihis,
-            dscale.fortran_vec(), info, 1L, 1L));
+            dscale.fortran_vec (), info, 1L, 1L));
 
   if (f77_exception_encountered)
     {
       (*current_liboctave_error_handler) ("unrecoverable error in zgebal");
       return retval;
     }
 
   // Preconditioning step 3: scaling.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1354,27 +1354,26 @@ Matrix::expm (void) const
   // Preconditioning step 2: balancing; code follows development
   // in AEPBAL
 
   double *p_m = m.fortran_vec ();
 
   int info, ilo, ihi, ilos, ihis;
   Array<double> dpermute (nc);
   Array<double> dscale (nc);
-  double *dp;
 
   // permutation first
   char job = 'P';
-  dp = dpermute.fortran_vec();
-  F77_XFCN (dgebal, DGEBAL, (&job, nc, p_m, nc, ilo, ihi, dp, info, 1L, 1L));
+  F77_XFCN (dgebal, DGEBAL, (&job, nc, p_m, nc, ilo, ihi,
+			     dpermute.fortran_vec (), info, 1L, 1L));
 
   // then scaling
   job = 'S';
-  dp = dscale.fortran_vec();
-  F77_XFCN (dgebal, DGEBAL, (&job, nc, p_m, nc, ilos, ihis, dp, info, 1L, 1L));
+  F77_XFCN (dgebal, DGEBAL, (&job, nc, p_m, nc, ilos, ihis,
+			     dscale.fortran_vec (), info, 1L, 1L));
 
   if (f77_exception_encountered)
     {
       (*current_liboctave_error_handler) ("unrecoverable error in dgebal");
       return retval;
     }
 
   // Preconditioning step 3: scaling.
