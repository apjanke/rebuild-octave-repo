# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236951907 14400
#      Fri Mar 13 09:45:07 2009 -0400
# Node ID ddea8b06ed7c320377a2165bea9e209843d74ffe
# Parent  5fa53d1b6247a4f98377c1181cf6fcefdbfb9b77
fix warning backtrace

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -2,16 +2,24 @@ 2009-03-13  Jaroslav Hajek  <highegg@gma
 
 	* ov-range.h (octave_range::octave_range (const Range&)): Allow
 	constructing from invalid range op result.
 	* ov-range.cc (octave_range::try_narrowing_conversion): Validate
 	invalid range op results.
 	* data.cc (fill_matrix): Return packed form (zero-step range) if
 	possible.
 
+2009-03-13  John W. Eaton  <jwe@octave.org>
+
+	* error.cc (pr_where): Use octave_call_stack::backtrace to print
+	complete stack trace at once.  Don't attempt to print code.
+	(error_2): Set error_state to 0 before calling pr_where.
+	(warning_1): Switch sense of test on symbol_table::at_top_level.
+	Call pr_where after printing primary warning message.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* DLD-FUNCTIONS/lu.cc (lu): Call fact.Pr_mat () and fact.Pc_mat ()
 	to return permutation matrices in the sparse case.
 
 2009-03-12  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat-ascii.cc (get_mat_data_input_line): If we are looking at
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -400,76 +400,42 @@ pr_where_1 (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   pr_where_2 (fmt, args);
   va_end (args);
 }
 
 static void
-pr_where (const char *name, bool print_code = true)
+pr_where (const char *who)
 {
-  if (octave_call_stack::current_statement ())
-    {
-      std::string nm;
+  octave_idx_type curr_frame = -1;
 
-      int l = -1;
-      int c = -1;
+  Octave_map stk = octave_call_stack::backtrace (0, curr_frame);
 
-      octave_user_code *fcn = octave_call_stack::caller_user_code ();
+  octave_idx_type nframes_to_display = stk.numel ();
 
-      if (fcn)
-	{
-	  nm = fcn->fcn_file_name ();
-
-	  if (nm.empty ())
-	    nm = fcn->name ();
+  if (nframes_to_display > 0)
+    {
+      pr_where_1 ("%s: called from\n", who);
 
-	  l = octave_call_stack::current_line ();
-	  c = octave_call_stack::current_column ();
-	}
+      Cell names = stk.contents ("name");
+      Cell lines = stk.contents ("line");
+      Cell columns = stk.contents ("column");
 
-      if (nm.empty ())
-	{
-	  if (l > 0 && c > 0)
-	    pr_where_1 ("%s: near line %d, column %d:", name, l, c);
-	}
-      else
+      for (octave_idx_type i = 0; i < nframes_to_display; i++)
 	{
-	  if (l > 0 && c > 0)
-	    pr_where_1 ("%s: in %s near line %d, column %d:",
-			name, nm.c_str (), l, c);
-	  else
-	    pr_where_1 ("%s: in %s", name, nm.c_str ());
-	}
-
-      if (print_code)
-	{
-	  // FIXME -- Note that the column number is probably
-	  // not going to mean much here since the code is being
-	  // reproduced from the parse tree, and we are only showing
-	  // one statement even if there were multiple statements on
-	  // the original source line.
+	  octave_value name = names(i);
+	  octave_value line = lines(i);
+	  octave_value column = columns(i);
 
-	  std::ostringstream output_buf;
-
-	  output_buf << std::endl;
-
-	  tree_print_code tpc (output_buf, ">>> ");
-
-	  tree_statement *curr_stmt = octave_call_stack::current_statement ();
+	  std::string nm = name.string_value ();
 
-	  if (curr_stmt)
-	    curr_stmt->accept (tpc);
-
-	  output_buf << std::endl;
-
-	  std::string msg = output_buf.str ();
-
-	  pr_where_1 ("%s", msg.c_str ());
+	  pr_where_1 ("    %s at line %d column %d\n", nm.c_str (),
+		      line.int_value (), column.int_value ());
 	}
     }
 }
 
 static void
 error_2 (const char *id, const char *fmt, va_list args)
 {
   int init_state = error_state;
@@ -478,19 +444,19 @@ error_2 (const char *id, const char *fmt
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0
       && octave_call_stack::caller_user_code ())
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
-      pr_where ("error");
+      error_state = 0;
 
-      error_state = 0;
+      pr_where ("error");
 
       do_keyboard (octave_value_list ());
 
       unwind_protect::run ();
     }
 }
 
 void
@@ -622,23 +588,23 @@ warning_1 (const char *id, const char *f
   if (warn_opt == 2)
     {
       // Handle this warning as an error.
 
       error_2 (id, fmt, args);
     }
   else if (warn_opt == 1)
     {
-      if (symbol_table::at_top_level ()
+      vwarning ("warning", id, fmt, args);
+
+      if (! symbol_table::at_top_level ()
 	  && Vbacktrace_on_warning
 	  && ! warning_state
 	  && ! discard_warning_messages)
-	pr_where ("warning", false);
-
-      vwarning ("warning", id, fmt, args);
+	pr_where ("warning");
 
       warning_state = 1;
 
       if ((interactive || forced_interactive)
 	  && Vdebug_on_warning
 	  && octave_call_stack::caller_user_code ())
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
