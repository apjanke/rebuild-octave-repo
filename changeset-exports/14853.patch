# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1341855283 25200
#      Mon Jul 09 10:34:43 2012 -0700
# Node ID 72b8b39e12be0fc67a5ae46cec21d4734bba1e3d
# Parent  53d2c3598d3346ef1f815efd0c2b09e8e5e0a12b
doc: Periodic grammarcheck of documentation.

* contrib.txi, diagperm.txi, emacs.txi, install.txi, package.txi, plot.txi,
poly.txi, vectorize.txi, strread.m, textscan.m, graphics_toolkit.m, bicg.m,
bicgstab.m, cgs.m, rand.cc, data.cc: Periodic grammarcheck of documentation.

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -61,57 +61,67 @@ gnulib sources that Octave depends on ar
 @end table
 
 Once you have the required tools installed, you can build Octave by
 doing
 
 @itemize @bullet
 @item
 Check out a copy of the Octave sources:
+
 @example
 hg clone http://hg.savannah.gnu.org/hgweb/octave
 @end example
 
 @item
 Change to the top-level directory of the newly checked out sources:
+
 @example
 cd octave
 @end example
 
 @item
 Generate the necessary configuration files:
+
 @example
 ./autogen.sh
 @end example
 
 @item
 Create a build directory and change to it:
+
 @example
+@group
 mkdir build
 cd build
+@end group
 @end example
+
 By using a separate build directory, you will keep the source directory
 clean and it will be easy to completely remove all files generated by
 the build.  You can also have parallel build trees for different
 purposes that all share the same sources.  For example, one build tree
 may be configured to disable compiler optimization in order to allow for
 easier debugging while another may be configured to test building with
 other specialized compiler flags.
 
 @item
 Run Octave's configure script from the build directory:
+
 @example
 ../configure
 @end example
 
 @item
 Run make in the build directory:
+
 @example
 make
 @end example
+
 @end itemize
 
 Once the build is finished, you will see a message like the following:
 
 @example
 @group
 Octave successfully built.  Now choose from the following:
 
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -506,16 +506,17 @@ or divided by @code{NaN}.
 The reason for this behavior is that the numerical multiplication is not
 actually performed anywhere by the underlying algorithm; the result is
 just assumed to be zero.  Equivalently, one can say that the part of the
 computation involving assumed zeros is performed symbolically, not numerically.
 
 This behavior not only facilitates the most straightforward and efficient
 implementation of algorithms, but also preserves certain useful invariants,
 like:
+
 @itemize
 @item scalar * diagonal matrix is a diagonal matrix
 
 @item sparse matrix / scalar preserves the sparsity pattern
 
 @item permutation matrix * matrix is equivalent to permuting rows
 @end itemize
 all of these natural mathematical truths would be invalidated by treating
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -324,16 +324,17 @@ Normally @samp{\}.
 
 @item octave-mode-startup-message
 If @code{t} (default), a startup message is displayed when Octave mode
 is called.
 
 @end table
 
 If Font Lock mode is enabled, Octave mode will display
+
 @itemize @bullet
 @item
 strings in @code{font-lock-string-face}
 
 @item
 comments in @code{font-lock-comment-face}
 
 @item
@@ -431,16 +432,17 @@ Delete all windows that display the infe
 
 @item C-c i k
 Kill the inferior Octave process and its buffer
 (@code{octave-kill-process}).
 @end table
 
 The effect of the commands which send code to the Octave process can be
 customized by the following variables.
+
 @table @code
 @item octave-send-echo-input
 Non-@code{nil} means echo input sent to the inferior Octave process.
 Default is @code{t}.
 
 @item octave-send-show-buffer
 Non-@code{nil} means display the buffer running the Octave process after
 sending a command (but without selecting it).
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -69,17 +69,17 @@ yourself.
 * Build Tools::
 * External Packages::
 @end menu
 
 @node Obtaining the Dependencies Automatically
 @subsection Obtaining the Dependencies Automatically
 
 On some systems you can obtain many of Octave's build dependencies
-automatically. The commands for doing this vary by system. Similarly,
+automatically.  The commands for doing this vary by system.  Similarly,
 the names of pre-compiled packages vary by system and do not always
 match exactly the names listed in @ref{Build Tools} and @ref{External
 Packages}.
 
 You will usually need the development version of an external dependency
 so that you get the libraries and header files for building software,
 not just for running already compiled programs.  These packages
 typically have names that end with the suffix @code{-dev} or @code{-devel}.
@@ -177,18 +177,20 @@ Automake.
 The following external packages are required:
 
 @table @asis
 @item BLAS
 Basic Linear Algebra Subroutine library
 (@url{http://www.netlib.org/blas}).  Accelerated BLAS libraries such as
 ATLAS (@url{http://math-atlas.sourceforge.net}) are recommeded for
 better performance.
+
 @item LAPACK
 Linear Algebra Package (@url{http://www.netlib.org/lapack}).
+
 @item PCRE
 The Perl Compatible Regular Expression library (http://www.pcre.org).
 @end table
 
 The following external package is optional but strongly recommended:
 
 @table @asis
 @item GNU Readline
@@ -244,17 +246,17 @@ GraphicsMagick++ is used to provide the 
 functions.
 
 @item HDF5
 Library for manipulating portable data files
 (@url{http://www.hdfgroup.org/HDF5}).  HDF5 is required for Octave's
 @code{load} and @code{save} commands to read and write HDF data files.
 
 @item OpenGL
-API for portable 2D and 3D graphics (@url{http://www.opengl.org}).  An
+API for portable 2-D and 3-D graphics (@url{http://www.opengl.org}).  An
 OpenGL implementation is required to provide Octave's OpenGL-based
 graphics functions.  Octave's OpenGL-based graphics functions usually
 outperform the gnuplot-based graphics functions because plot data can be
 rendered directly instead of sending data and commands to gnuplot for
 interpretation and rendering.
 
 @item Qhull
 Computational geometry library (@url{http://www.qhull.org}).  Qhull is
@@ -272,17 +274,17 @@ provide improved performance for the fun
 Sparse matrix factorization library
 (@url{http://www.cise.ufl.edu/research/sparse/SuiteSparse}).
 SuiteSparse is required to provide sparse matrix factorizations and
 solution of linear equations for sparse systems.
 
 @item zlib
 Data compression library (@url{http://zlib.net}).  The zlib library is
 required for Octave's @code{load} and @code{save} commands to handle
-compressed data, including @sc{Matlab} v5 MAT files.
+compressed data, including @sc{matlab} v5 MAT files.
 @end table
 
 @node Running Configure and Make
 @section Running Configure and Make
 
 @itemize @bullet
 @item
 Run the shell script @file{configure}.  This will determine the features
diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -176,17 +176,16 @@ called without a new path, the current p
 @node Creating Packages
 @section Creating Packages
 
 Internally a package is simply a gzipped tar file that contains a
 top level directory of any given name.  This directory will in the
 following be referred to as @code{package} and may contain the
 following files:
 
-@noindent
 @table @code
 @item package/COPYING
 This is a required file containing the license of the package.  No
 restrictions is made on the license in general.  If however the
 package contains dynamically linked functions the license must be
 compatible with the GNU General Public License.
 
 @item package/DESCRIPTION
@@ -255,17 +254,16 @@ package.
 @item package/on_uninstall.m
 This is an optional script that is run prior to the removal of a
 package. 
 @end table
 
 Besides the above mentioned files, a package can also contain on or
 more of the following directories:
 
-@noindent
 @table @code
 @item package/inst
 An optional directory containing any files that are directly installed
 by the package.  Typically this will include any @code{m}-files. 
 
 @item package/src
 An optional directory containing code that must be built prior to the
 packages installation.  The Octave package manager will execute
@@ -300,17 +298,16 @@ external scripts, etc., called by functi
 
 @node The DESCRIPTION File
 @subsection The DESCRIPTION File
 
 The @file{DESCRIPTION} file contains various information about the
 package, such as its name, author, and version.  This file has a very
 simple format
 
-@noindent
 @itemize
 @item
 Lines starting with @samp{#} are comments.
 
 @item
 Lines starting with a blank character are continuations from the 
 previous line.
 
@@ -335,17 +332,16 @@ Description: A short description of the 
  on the next by adding a space to the beginning of the
  following lines.
 License: GPL version 3 or later
 @end group
 @end example
 
 The package manager currently recognizes the following keywords
 
-@noindent
 @table @code
 @item Name
 Name of the package.
 
 @item Version
 Version of the package.  A package version must be 3 numbers separated
 by a dot.
 
@@ -436,17 +432,16 @@ RPMs are built on a Mandriva distributio
 name will be used instead. 
 
 @node The INDEX File
 @subsection The INDEX File
 
 The optional @file{INDEX} file provides a categorical view of the
 functions in the package.  This file has a very simple format
 
-@noindent
 @itemize
 @item Lines beginning with @samp{#} are comments.
 
 @item The first non-comment line should look like this
 
 @example
 toolbox >> Toolbox name
 @end example
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -839,17 +839,17 @@ The result of which can be seen in @ref{
 The @code{print} command allows you to send plots to you printer and
 to save plots in a variety of formats.  For example,
 
 @example
 print -dpsc
 @end example
 
 @noindent
-prints the current figure to a color PostScript printer. And,
+prints the current figure to a color PostScript printer.  And,
 
 @example
 print -deps foo.eps
 @end example
 
 @noindent
 saves the current figure to an encapsulated PostScript file called
 @file{foo.eps}.
@@ -1175,16 +1175,17 @@ In this Section the object properties ar
 with the root figure properties and continuing through the graphics object
 hierarchy.
 
 @node Root Figure Properties
 @subsubsection Root Figure Properties
 @cindex root figure properties
 
 The @code{root figure} properties are:
+
 @table @code
 @item __modified__  
 --- Values: "on," "off"
 
 @item __myhandle__
 
 @item beingdeleted  
 --- Values: "on," "off"
@@ -1247,16 +1248,17 @@ The @code{root figure} properties are:
 @item visible
 @end table
 
 @node Figure Properties
 @subsubsection Figure Properties
 @cindex figure properties
 
 The @code{figure} properties are:
+
 @table @code
 @item __graphics_toolkit__  
 --- The graphics toolkit currently in use.
 
 @item __enhanced__
 
 @item __modified__
 
@@ -1330,16 +1332,17 @@ mouse pointer is when the function gets 
 see @code{"keypressfcn"}
 
 @item keyreleasefcn
 With @code{"keypressfcn"}, The keyboard callback functions.  These
 callback functions get called when a key is pressed/released
 respectively.  The functions are called with two input arguments.  The
 first argument holds the handle of the calling figure.  The second
 argument holds the event structure which has the following members:
+
 @table @code
 @item Character
 The ASCII value of the key
 
 @item Key
 lowercase value of the key
 
 @item Modifier
@@ -1351,16 +1354,17 @@ the key.  Possible values are @code{"shi
 @item menubar
 
 @item mincolormap
 
 @item name
 
 @item nextplot
 May be one of
+
 @table @code
 @item "new"
 
 @item "add"
 
 @item "replace"
 
 @item "replacechildren"
@@ -1446,16 +1450,17 @@ holds the current coordinates of the cur
 @item xvisualmode
 @end table
 
 @node Axes Properties
 @subsubsection Axes Properties
 @cindex axes properties
 
 The @code{axes} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item activepositionproperty
 
 @item alim
@@ -1575,16 +1580,17 @@ Octave.
 @item linestyleorder
 
 @item linewidth
 
 @item minorgridlinestyle
 
 @item nextplot
 May be one of
+
 @table @code
 @item "new"
 
 @item "add"
 
 @item "replace"
 
 @item "replacechildren"
@@ -1791,16 +1797,17 @@ Either @code{"manual"} or @code{"auto"}.
 
 @end table
 
 @node Line Properties
 @subsubsection Line Properties
 @cindex line properties
 
 The @code{line} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item beingdeleted
 
 @item busyaction
@@ -1902,16 +1909,17 @@ The data to be plotted.
 @item zliminclude
 @end table
 
 @node Text Properties
 @subsubsection Text Properties
 @cindex text properties
 
 The @code{text} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item backgroundcolor
 
 @item beingdeleted
@@ -2019,16 +2027,17 @@ May be @code{"normalized"} or @code{"gra
 
 @end table
 
 @node Image Properties
 @subsubsection Image Properties
 @cindex image properties
 
 The @code{image} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item beingdeleted
 
 @item busyaction
@@ -2095,16 +2104,17 @@ the image.
 @item yliminclude
 @end table
 
 @node Patch Properties
 @subsubsection Patch Properties
 @cindex patch properties
 
 The @code{patch} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item alim
 
 @item aliminclude
@@ -2243,16 +2253,17 @@ Data defining the patch object.
 
 @end table
 
 @node Surface Properties
 @subsubsection Surface Properties
 @cindex surface properties
 
 The @code{surface} properties are:
+
 @table @code
 @item __modified__
 
 @item __myhandle__
 
 @item alim
 
 @item aliminclude
@@ -2518,16 +2529,17 @@ one, or by name.  Recognized color names
 @cindex line styles, graphics
 @cindex graphics line styles
 
 Line styles are specified by the following properties:
 
 @table @code
 @item linestyle
 May be one of
+
 @table @code
 @item "-"
 Solid line.  [default]
 
 @item "--"
 Dashed line.
 
 @item ":"
@@ -2546,16 +2558,17 @@ of 2 is twice as wide as the default, et
 @end table
 
 @node Marker Styles
 @subsection Marker Styles
 @cindex graphics marker styles
 @cindex marker styles, graphics
 
 Marker styles are specified by the following properties:
+
 @table @code
 @item marker
 A character indicating a plot marker to be place at each data point, or
 @code{"none"}, meaning no markers should be displayed.
 
 @itemx markeredgecolor
 The color of the edge around the marker, or @code{"auto"}, meaning that
 the edge color is the same as the face color.  @xref{Colors}.
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -144,17 +144,17 @@ In situations where a single polynomial 
 is to use several polynomials pieced together.  The function
 @code{splinefit} fits a peicewise polynomial (spline) to a set of
 data.
 
 @DOCSTRING(splinefit)
 
 The number of @var{breaks} (or knots) used to construct the piecewise
 polynomial is a significant factor in suppressing the noise present in
-the input data, @var{x} and @var{y}. This is demostrated by the example
+the input data, @var{x} and @var{y}.  This is demonstrated by the example
 below.
 
 @example
 @group
 x = 2 * pi * rand (1, 200);
 y = sin (x) + sin (2 * x) + 0.2 * randn (size (x));
 ## Uniform breaks
 breaks = linspace (0, 2 * pi, 41); % 41 breaks, 40 pieces
@@ -174,28 +174,27 @@ legend (@{"data", "41 breaks, 40 pieces"
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit1}.
 
 @float Figure,fig:splinefit1
 @center @image{splinefit1,4in}
 @caption{Comparison of a fitting a piecewise polynomial with 41 breaks to one
-with 11 breaks. The fit with the large number of breaks exhibits a fast ripple
+with 11 breaks.  The fit with the large number of breaks exhibits a fast ripple
 that is not present in the underlying function.}
 @end float
 @end ifnotinfo
 
-The piece-wise polynomial fit, provided by @code{splinefit}, has
-continuous derivatives up to the @var{order}-1. For example, a cubic fit
-has continuous first and second derivatives.   This is demonstrated by
+The piecewise polynomial fit, provided by @code{splinefit}, has
+continuous derivatives up to the @var{order}-1.  For example, a cubic fit
+has continuous first and second derivatives.  This is demonstrated by
 the code
 
 @example
-@group
 ## Data (200 points)
 x = 2 * pi * rand (1, 200);
 y = sin (x) + sin (2 * x) + 0.1 * randn (size (x));
 ## Piecewise constant
 pp1 = splinefit (x, y, 8, "order", 0);
 ## Piecewise linear
 pp2 = splinefit (x, y, 8, "order", 1);
 ## Piecewise quadratic
@@ -210,27 +209,26 @@ y1 = ppval (pp1, xx);
 y2 = ppval (pp2, xx);
 y3 = ppval (pp3, xx);
 y4 = ppval (pp4, xx);
 y5 = ppval (pp5, xx);
 plot (x, y, ".", xx, [y1; y2; y3; y4; y5])
 axis tight
 ylim auto
 legend (@{"data", "order 0", "order 1", "order 2", "order 3", "order 4"@})
-@end group
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit2}.
 
 @float Figure,fig:splinefit2
 @center @image{splinefit2,4in}
 @caption{Comparison of a piecewise constant, linear, quadratic, cubic, and
-quartic polynomials with 8 breaks to noisy data. The higher order solutions
+quartic polynomials with 8 breaks to noisy data.  The higher order solutions
 more accurately represent the underlying function, but come with the
 expense of computational complexity.}
 @end float
 @end ifnotinfo
 
 When the underlying function to provide a fit to is periodic, @code{splinefit}
 is able to apply the boundary conditions needed to manifest a periodic fit.
 This is demonstrated by the code below.
@@ -261,22 +259,21 @@ The result of which can be seen in @ref{
 
 @float Figure,fig:splinefit3
 @center @image{splinefit3,4in}
 @caption{Comparison of piecewise polynomial fits to a noisy periodic
 function with, and without, periodic boundary conditions.}
 @end float
 @end ifnotinfo
 
-More complex constraints may be added as well. For example, the code below
-illustrates a periodic fit with values that have been clamped at the end points,
-and a second periodic fit which is hinged at the end points.
+More complex constraints may be added as well.  For example, the code below
+illustrates a periodic fit with values that have been clamped at the endpoints,
+and a second periodic fit which is hinged at the endpoints.
 
 @example
-@group
 ## Data (200 points)
 x = 2 * pi * rand (1, 200);
 y = sin (2 * x) + 0.1 * randn (size (x));
 ## Breaks
 breaks = linspace (0, 2 * pi, 10);
 ## Clamped endpoints, y = y' = 0
 xc = [0, 0, 2*pi, 2*pi];
 cc = [(eye (2)), (eye (2))];
@@ -288,38 +285,36 @@ pp2 = splinefit (x, y, breaks, "constrai
 ## Plot
 xx = linspace (0, 2 * pi, 400);
 y1 = ppval (pp1, xx);
 y2 = ppval (pp2, xx);
 plot (x, y, ".", xx, [y1; y2])
 axis tight
 ylim auto
 legend (@{"data", "clamped", "hinged periodic"@})
-@end group
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit4}.
 
 @float Figure,fig:splinefit4
 @center @image{splinefit4,4in}
 @caption{Comparison of two periodic piecewise cubic fits to a noisy periodic
-signal. One fit has its end points clamped and the second has its end points
+signal.  One fit has its endpoints clamped and the second has its endpoints
 hinged.}
 @end float
 @end ifnotinfo
 
 The @code{splinefit} function also provides the convenience of a @var{robust}
 fitting, where the effect of outlying data is reduced.  In the example below,
 three different fits are provided.  Two with differing levels of outlier
 suppression and a third illustrating the non-robust solution.
 
 @example
-@group
 ## Data
 x = linspace (0, 2*pi, 200);
 y = sin (x) + sin (2 * x) + 0.05 * randn (size (x));
 ## Add outliers
 x = [x, linspace(0,2*pi,60)];
 y = [y, -ones(1,60)];
 ## Fit splines with hinged conditions
 con = struct ("xc", [0, 2*pi]);
@@ -334,26 +329,25 @@ xx = linspace (0, 2*pi, 400);
 y1 = ppval (pp1, xx);
 y2 = ppval (pp2, xx);
 y3 = ppval (pp3, xx);
 plot (x, y, ".", xx, [y1; y2; y3])
 legend (@{"data with outliers","robust, beta = 0.25", ...
          "robust, beta = 0.75", "no robust fitting"@})
 axis tight
 ylim auto
-@end group
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit6}.
 
 @float Figure,fig:splinefit6
 @center @image{splinefit6,4in}
-@caption{Comparison of two different levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data. A conventional fit, without
+@caption{Comparison of two different levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data.  A conventional fit, without
 robust fitting (@var{beta} = 0) is also included.}
 @end float
 @end ifnotinfo
 
 The function, @code{ppval}, evaluates the piecewise polynomials, created
 by @code{mkpp} or other means, and @code{unmkpp} returns detailed
 information about the piecewise polynomial.
 
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -186,26 +186,28 @@ unique
 lookup
 
 @item
 ifelse / merge
 @end itemize
 
 @item
 Repetition
+
 @itemize
 @item
 repmat
 
 @item
 repelems
 @end itemize
 
 @item
 Vectorized arithmetic
+
 @itemize
 @item
 sum
 
 @item
 prod
 
 @item
@@ -227,16 +229,17 @@ dot
 cummax
 
 @item
 cummin
 @end itemize
 
 @item
 Shape of higher dimensional arrays
+
 @itemize
 @item
 reshape
 
 @item
 resize
 
 @item
@@ -337,18 +340,18 @@ y - y'
 @end example
 
 @noindent
 Here the vectors of size @code{[1 3]} and @code{[3 1]} both get
 broadcast into matrices of size @code{[3 3]} before ordinary matrix
 subtraction takes place.
 
 A special case of broadcasting that may be familiar is when all
-dimensions of the array being broadcast are 1, i.e. the array is a
-scalar. Thus for example, operations like @code{x - 42} and @code{max
+dimensions of the array being broadcast are 1, i.e., the array is a
+scalar.  Thus for example, operations like @code{x - 42} and @code{max
 (x, 2)} are basic examples of broadcasting.
 
 For a higher-dimensional example, suppose @code{img} is an RGB image of
 size @code{[m n 3]} and we wish to multiply each color by a different
 scalar.  The following code accomplishes this with broadcasting,
 
 @example
 img .*= permute ([0.8, 0.9, 1.2], [1, 3, 2]);
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -163,17 +163,17 @@
 ## Data columns are padded with empty fields or Nan so that all columns
 ## have equal length 
 ##
 ## @item last character is not "\n"
 ## Data columns are not padded; strread returns columns of unequal length
 ##
 ## @end table
 ##
-# @seealso{textscan, textread, load, dlmread, fscanf}
+## @seealso{textscan, textread, load, dlmread, fscanf}
 ## @end deftypefn
 
 function varargout = strread (str, format = "%f", varargin)
 
   ## Check input
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -21,18 +21,18 @@
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{n})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{param}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{n}, @var{param}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{str}, @dots{})
 ## @deftypefnx {Function File} {[@var{C}, @var{position}] =} textscan (@var{fid}, @dots{})
 ## Read data from a text file or string.
 ##
 ## The string @var{str} or file associated with @var{fid} is read from and
-## parsed according to @var{format}. The function behaves like @code{strread}
-## except it can also read from file instead of a string. See the documentation
+## parsed according to @var{format}.  The function behaves like @code{strread}
+## except it can also read from file instead of a string.  See the documentation
 ## of @code{strread} for details.
 ##
 ## In addition to the options supported by @code{strread}, this function
 ## supports a few more:
 ##
 ## @itemize
 ## @item "collectoutput":
 ## A value of 1 or true instructs textscan to concatenate consecutive columns
diff --git a/scripts/plot/graphics_toolkit.m b/scripts/plot/graphics_toolkit.m
--- a/scripts/plot/graphics_toolkit.m
+++ b/scripts/plot/graphics_toolkit.m
@@ -12,27 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{name} =} graphics_toolkit ()
-## Returns the default graphics toolkit. The default graphics toolkit value
+## @deftypefn {Function File} {@var{name} =} graphics_toolkit ()
+## Return the default graphics toolkit.  The default graphics toolkit value
 ## is assigned to new figures.
 ## @deftypefnx {Function File} {@var{name} =} graphics_toolkit (@var{hlist})
-## Returns the graphics toolkits for the figures with handles @var{hlist}.
+## Return the graphics toolkits for the figures with handles @var{hlist}.
 ## @deftypefnx {Function File} {} graphics_toolkit (@var{name})
-## Sets the default graphics toolkit to @var{name}.  If the toolkit is not
+## Set the default graphics toolkit to @var{name}.  If the toolkit is not
 ## already loaded, it is initialized by calling the function
 ## @code{__init_@var{name}__}.
 ## @deftypefnx {Function File} {} graphics_toolkit (@var{hlist}, @var{name})
-## Sets the graphics toolkit for the figures with handles @var{hlist} to
+## Set the graphics toolkit for the figures with handles @var{hlist} to
 ## @var{name}.
 ## @seealso{available_graphics_toolkits}
 ## @end deftypefn
 
 function retval = graphics_toolkit (name, hlist = [])
 
   if (nargin > 2)
     print_usage ();
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -41,16 +41,17 @@
 ## a function handle or inline function @code{g} such that
 ## @code{g(x, "notransp") = M1 \ x} or @code{g(x, "notransp") = M2 \ x} and
 ## @code{g(x, "transp") = M1' \ x} or @code{g(x, "transp") = M2' \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
+##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
 ##
 ## @item 1: the maximum number of iterations was reached before convergence
 ##
 ## @item 3: the algorithm reached stagnation
 ## @end itemize
 ## (the value 2 is unused but skipped for compatibility).
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -43,16 +43,17 @@
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
 ## @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
+##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
 ##
 ## @item 1: the maximum number of iterations was reached before convergence
 ##
 ## @item 3: the algorithm reached stagnation
 ## @end itemize
 ## (the value 2 is unused but skipped for compatibility).
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -43,16 +43,17 @@
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
 ## @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
+##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
 ##
 ## @item 1: the maximum number of iterations was reached before convergence
 ##
 ## @item 3: the algorithm reached stagnation
 ## @end itemize
 ## (the value 2 is unused but skipped for compatibility).
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -443,17 +443,17 @@ However, it should be noted that queryin
 @code{rand} to use the old generators, only setting the seed will.\n\
 To cause @code{rand} to once again use the new generators, the\n\
 keyword \"state\" should be used to reset the state of the @code{rand}.\n\
 \n\
 The state or seed of the generator can be reset to a new random value\n\
 using the \"reset\" keyword.\n\
 \n\
 The class of the value returned can be controlled by a trailing \"double\"\n\
-or \"single\" argument. These are the only valid classes.\n\
+or \"single\" argument.  These are the only valid classes.\n\
 @seealso{randn, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   retval = do_rand (args, nargin, "rand", "uniform");
@@ -551,17 +551,17 @@ DEFUN_DLD (randn, args, ,
 Return a matrix with normally distributed random\n\
 elements having zero mean and variance one.  The arguments are\n\
 handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the Marsaglia and Tsang ``Ziggurat technique''\n\
 to transform from a uniform to a normal distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing \"double\"\n\
-or \"single\" argument. These are the only valid classes.\n\
+or \"single\" argument.  These are the only valid classes.\n\
 \n\
 Reference: G. Marsaglia and W.W. Tsang,\n\
 @cite{Ziggurat Method for Generating Random Variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/})\n\
 \n\
 @seealso{rand, rande, randg, randp}\n\
 @end deftypefn")
@@ -621,17 +621,17 @@ DEFUN_DLD (rande, args, ,
 @deftypefnx {Loadable Function} {} rande (@dots{}, \"double\")\n\
 Return a matrix with exponentially distributed random elements.  The\n\
 arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the Marsaglia and Tsang ``Ziggurat technique''\n\
 to transform from a uniform to an exponential distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing \"double\"\n\
-or \"single\" argument. These are the only valid classes.\n\
+or \"single\" argument.  These are the only valid classes.\n\
 \n\
 Reference: G. Marsaglia and W.W. Tsang,\n\
 @cite{Ziggurat Method for Generating Random Variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/})\n\
 \n\
 @seealso{rand, randn, randg, randp}\n\
 @end deftypefn")
@@ -767,17 +767,17 @@ r(df > 0) += 2 * randg (df(df > 0)/2)\n\
 r = (randg (a1), @dots{}, randg (ak))\n\
 r = r / sum (r)\n\
 @end group\n\
 @end example\n\
 \n\
 @end table\n\
 \n\
 The class of the value returned can be controlled by a trailing \"double\"\n\
-or \"single\" argument. These are the only valid classes.\n\
+or \"single\" argument.  These are the only valid classes.\n\
 @seealso{rand, randn, rande, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
@@ -989,17 +989,17 @@ unimodal distributions}, Doctoral Disser
 University Graz, Austria, 1994.\n\
 \n\
 @item For @var{l} > 1e8, use normal approximation.\n\
 L. Montanet, et al., @cite{Review of Particle Properties}, Physical Review\n\
 D 50 p1284, 1994.\n\
 @end table\n\
 \n\
 The class of the value returned can be controlled by a trailing \"double\"\n\
-or \"single\" argument. These are the only valid classes.\n\
+or \"single\" argument.  These are the only valid classes.\n\
 @seealso{rand, randn, rande, randg}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
@@ -1100,17 +1100,17 @@ DEFUN_DLD (randperm, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} randperm (@var{n})\n\
 @deftypefnx {Loadable Function} {} randperm (@var{n}, @var{m})\n\
 Return a row vector containing a random permutation of @code{1:@var{n}}.\n\
 If @var{m} is supplied, return @var{m} unique entries, sampled without\n\
 replacement from @code{1:@var{n}}.  The complexity is O(@var{n}) in\n\
 memory and O(@var{m}) in time, unless @var{m} < @var{n}/5, in which case\n\
 O(@var{m}) memory is used as well.  The randomization is performed using\n\
-rand(). All permutations are equally likely.\n\
+rand().  All permutations are equally likely.\n\
 @seealso{perms}\n\
 @end deftypefn")
 {
 
 #ifdef USE_UNORDERED_MAP_WITH_TR1
 using std::tr1::unordered_map;
 #else
 using std::unordered_map;
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5643,17 +5643,17 @@ At least one argument is required.\n\
                                      octave_value::op_el_or_eq, args);
 }
 
 static double tic_toc_timestamp = -1.0;
 
 DEFUN (tic, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} tic ()\n\
-@deftypefnx  {Built-in Function} {@var{id} =} tic ()\n\
+@deftypefnx {Built-in Function} {@var{id} =} tic ()\n\
 @deftypefnx {Built-in Function} {} toc ()\n\
 @deftypefnx {Built-in Function} {} toc (@var{id})\n\
 @deftypefnx {Built-in Function} {@var{val} =} toc (@dots{})\n\
 Set or check a wall-clock timer.  Calling @code{tic} without an\n\
 output argument sets the internal timer state.  Subsequent calls\n\
 to @code{toc} return the number of seconds since the timer was set.\n\
 For example,\n\
 \n\
@@ -5710,19 +5710,19 @@ doing nothing at all.\n\
   else
     tic_toc_timestamp = tmp;
 
   return retval;
 }
 
 DEFUN (toc, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} toc ()\n\
+@deftypefn  {Built-in Function} {} toc ()\n\
 @deftypefnx {Built-in Function} {} toc (@var{id})\n\
-@deftypefnx {Built-in Function} {@var{val} = } toc (@dots{})\n\
+@deftypefnx {Built-in Function} {@var{val} =} toc (@dots{})\n\
 See tic.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   double start_time = tic_toc_timestamp;
