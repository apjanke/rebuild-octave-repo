# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1328468035 18000
#      Sun Feb 05 13:53:55 2012 -0500
# Node ID 8d1ae996c12228f429ae09b6a3f1584107f18f2b
# Parent  19078011cdc30075740cf93e63569900440cd341
also save and restore symbol table context in parser (bug #35448)

* parse-private.h: New file to define new symtab_context class.
* Makefile.am (octinclude_HEADERS): Include it in the list.
* lex.ll, oct-parse.yy: Include parse-private.h.
* lex.ll (reset_parser): Clear parser_symtab_context.
* parse.h (symtab_context): Delete variable declaration.
* oct-parse.yy (symtab_context): Delete variable definition.
(parser_symtab_context): New variable.
(ABORT_PARSE, make_anon_fcn_handle, recover_from_parsing_function):
Pop parser_symtab_context.
(push_fcn_symtab, param_list_beg): Push parser_symtab_context.

diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -279,16 +279,17 @@ octinclude_HEADERS = \
   oct-stdstrm.h \
   oct-stream.h \
   oct-strstrm.h \
   oct.h \
   octave.h \
   ops.h \
   pager.h \
   parse.h \
+  parse-private.h \
   pr-output.h \
   procstream.h \
   profiler.h \
   sighandlers.h \
   siglist.h \
   sparse-xdiv.h \
   sparse-xpow.h \
   symtab.h \
diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -63,16 +63,17 @@ along with Octave; see the file COPYING.
 #include "comment-list.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "lex.h"
 #include "ov.h"
 #include "parse.h"
+#include "parse-private.h"
 #include "pt-all.h"
 #include "symtab.h"
 #include "token.h"
 #include "toplev.h"
 #include "utils.h"
 #include "variables.h"
 #include <oct-parse.h>
 #include <oct-gperf.h>
@@ -1108,18 +1109,17 @@ do_comma_insert_check (void)
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_end_of_input = false;
 
-  while (! symtab_context.empty ())
-    symtab_context.pop ();
+  parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // We are not in a block comment.
   block_comment_nesting_level = 0;
 
   // Error may have occurred inside some brackets, braces, or parentheses.
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -63,16 +63,17 @@ along with Octave; see the file COPYING.
 #include "oct-hist.h"
 #include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-null-mat.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
+#include "parse-private.h"
 #include "pt-all.h"
 #include "pt-eval.h"
 #include "symtab.h"
 #include "token.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -121,17 +122,17 @@ static int max_function_depth = 0;
 // FALSE if we are still at the primary function. Subfunctions can
 // only be declared inside function files.
 static int parsing_subfunctions = false;
 
 // Have we found an explicit end to a function?
 static bool endfunction_found = false;
 
 // Keep track of symbol table information when parsing functions.
-std::stack<symbol_table::scope_id> symtab_context;
+symtab_context parser_symtab_context;
 
 // Name of the current class when we are parsing class methods or
 // constructors.
 std::string current_class_name;
 
 // TRUE means we are in the process of autoloading a function.
 static bool autoloading = false;
 
@@ -360,21 +361,18 @@ make_statement (T *arg)
   return new tree_statement (arg, comment);
 }
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
-      if (! symtab_context.empty ()) \
-        { \
-          symbol_table::set_scope (symtab_context.top ()); \
-          symtab_context.pop (); \
-        } \
+      if (! parser_symtab_context.empty ()) \
+        parser_symtab_context.pop (); \
       if (interactive || forced_interactive) \
         YYACCEPT; \
       else \
         YYABORT; \
     } \
   while (0)
 
 %}
@@ -1219,17 +1217,18 @@ except_command  : UNWIND stash_comment o
 
 push_fcn_symtab : // empty
                   {
                     current_function_depth++;
 
                     if (max_function_depth < current_function_depth)
                       max_function_depth = current_function_depth;
 
-                    symtab_context.push (symbol_table::current_scope ());
+                    parser_symtab_context.push ();
+
                     symbol_table::set_scope (symbol_table::alloc_scope ());
 
                     if (! reading_script_file && current_function_depth == 1
                         && ! parsing_subfunctions)
                       primary_fcn_scope = symbol_table::current_scope ();
 
                     if (reading_script_file && current_function_depth > 1)
                       yyerror ("nested functions not implemented in this context");
@@ -1241,17 +1240,17 @@ push_fcn_symtab : // empty
 // ===========================
 
 param_list_beg  : '('
                   {
                     lexer_flags.looking_at_parameter_list = true;
 
                     if (lexer_flags.looking_at_function_handle)
                       {
-                        symtab_context.push (symbol_table::current_scope ());
+                        parser_symtab_context.push ();
                         symbol_table::set_scope (symbol_table::alloc_scope ());
                         lexer_flags.looking_at_function_handle--;
                         lexer_flags.looking_at_anon_fcn_args = true;
                       }
                   }
                 ;
 
 param_list_end  : ')'
@@ -2119,22 +2118,20 @@ make_anon_fcn_handle (tree_parameter_lis
   // FIXME -- need to get these from the location of the @ symbol.
   int l = input_line_number;
   int c = current_input_column;
 
   tree_parameter_list *ret_list = 0;
 
   symbol_table::scope_id fcn_scope = symbol_table::current_scope ();
 
-  if (symtab_context.empty ())
+  if (parser_symtab_context.empty ())
     panic_impossible ();
 
-  symbol_table::set_scope (symtab_context.top ());
-
-  symtab_context.pop ();
+  parser_symtab_context.pop ();
 
   stmt->set_print_flag (false);
 
   tree_statement_list *body = new tree_statement_list (stmt);
 
   body->mark_as_anon_function_body ();
 
   tree_anon_fcn_handle *retval
@@ -2967,21 +2964,20 @@ finish_function (tree_parameter_list *re
     }
 
   return retval;
 }
 
 static void
 recover_from_parsing_function (void)
 {
-  if (symtab_context.empty ())
+  if (parser_symtab_context.empty ())
     panic_impossible ();
 
-  symbol_table::set_scope (symtab_context.top ());
-  symtab_context.pop ();
+  parser_symtab_context.pop ();
 
   if (reading_fcn_file && current_function_depth == 1
       && ! parsing_subfunctions)
     parsing_subfunctions = true;
 
   current_function_depth--;
 
   lexer_flags.defining_func--;
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -57,19 +57,16 @@ extern std::stack<std::string> help_buf;
 extern bool line_editing;
 
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 // TRUE means input is coming from startup file.
 extern bool input_from_startup_file;
 
-// Keep track of symbol table information when parsing functions.
-extern std::stack<symbol_table::scope_id> symtab_context;
-
 // Name of the current class when we are parsing class methods or
 // constructors.
 extern std::string current_class_name;
 
 extern OCTINTERP_API std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
                     std::string& file);
 
diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -44,16 +44,17 @@ FCN_FILES = \
   test_struct.m \
   test_switch.m \
   test_system.m \
   test_transpose.m \
   test_try.m \
   test_unwind.m \
   test_while.m
 
+include bug-35448/module.mk
 include classes/module.mk
 include class-concat/module.mk
 include ctor-vs-method/module.mk
 include fcn-handle-derived-resolution/module.mk
 
 check: test_sparse.m test_bc_overloads.m
 	$(top_builddir)/run-octave --norc --silent --no-history $(srcdir)/fntests.m $(srcdir)
 
diff --git a/test/bug-35448/fA.m b/test/bug-35448/fA.m
new file mode 100644
--- /dev/null
+++ b/test/bug-35448/fA.m
@@ -0,0 +1,10 @@
+# fA.m
+function y = fA (x, f)
+  global gfun
+  if nargin < 2
+    y = fA (x, gfun);
+  else
+    w = feval (f, x);
+    y = feval (@fB, w);
+  endif
+endfunction
diff --git a/test/bug-35448/fB.m b/test/bug-35448/fB.m
new file mode 100644
--- /dev/null
+++ b/test/bug-35448/fB.m
@@ -0,0 +1,4 @@
+# fB.m
+function y = fB (x)
+  y = x;
+endfunction
diff --git a/test/bug-35448/fC.m b/test/bug-35448/fC.m
new file mode 100644
--- /dev/null
+++ b/test/bug-35448/fC.m
@@ -0,0 +1,4 @@
+# fC.m
+function y = fC (x)
+  y = x;
+endfunction
diff --git a/test/bug-35448/module.mk b/test/bug-35448/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-35448/module.mk
@@ -0,0 +1,7 @@
+bug_35448_FCN_FILES = \
+  bug-35448/fA.m \
+  bug-35448/fB.m \
+  bug-35448/fC.m \
+  class-concat/test_bug_35448.m
+
+FCN_FILES += $(bug_35448_FCN_FILES)
diff --git a/test/bug-35448/test_bug_35448.m b/test/bug-35448/test_bug_35448.m
new file mode 100644
--- /dev/null
+++ b/test/bug-35448/test_bug_35448.m
@@ -0,0 +1,11 @@
+%!test
+%! global gfun
+%! gfun = @fB;
+%! y = fA (e);
+%! assert (y, e);
+
+%!test
+%! global gfun
+%! gfun = @fC;
+%! y = fA (e);
+%! assert (y, e);
