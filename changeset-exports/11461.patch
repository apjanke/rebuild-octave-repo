# HG changeset patch
# User David Grundberg <individ@acc.umu.se>
# Date 1294484031 -3600
#      Sat Jan 08 11:53:51 2011 +0100
# Node ID 2b8531a6a3c920ab709301c07623aaf3295ce000
# Parent  17936067b48f5dcac2af0fd1dabfa7911532b01c
Change mentions of "nested function" to the less misleading "subfunction"

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-08  David Grundberg  <individ@acc.umu.se>
+
+	* ov-fcn.h (is_subfunction): Rename from is_nested_function.
+	Change all uses and nearby comments.
+	* ov-usr-fcn.h (is_subfunction, mark_as_subfunction): Rename from
+	is_nested_function, mark_as_nested_function.  Change all uses.
+
 2011-01-07  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): For uniformoutput case
 	with nargout > 0, initialize elements of retval to NDArray
 	objects of the same size as the input.  Bug #32067.
 
 2011-01-07  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -2947,19 +2947,17 @@ finish_function (tree_parameter_list *re
 
       if (lc)
         fcn->stash_leading_comment (lc);
 
       fcn->define_ret_list (ret_list);
 
       if (current_function_depth > 1 || parsing_subfunctions)
         {
-          // FIXME -- is this flag used to determine if the function is a
-          // _subfunction_ somewhere?
-          fcn->mark_as_nested_function ();
+          fcn->mark_as_subfunction ();
 
           symbol_table::install_subfunction (nm, octave_value (fcn),
                                              primary_fcn_scope);
         }
 
       if (! reading_fcn_file)
         {
           // We are either reading a script file or defining a function
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1468,17 +1468,17 @@ make_fcn_handle (const std::string& nm, 
   octave_value f = symbol_table::find_function (tnm, octave_value_list (),
                                                 local_funcs);
 
   octave_function *fptr = f.function_value (true);
 
   // Here we are just looking to see if FCN is a method or constructor
   // for any class.
   if (local_funcs && fptr 
-      && (fptr->is_nested_function () || fptr->is_private_function ()
+      && (fptr->is_subfunction () || fptr->is_private_function ()
           || fptr->is_class_constructor ()))
     {
       // Locally visible function.
       retval = octave_value (new octave_fcn_handle (f, tnm));
     }
   else
     {
       // Globally visible (or no match yet). Query overloads.
@@ -1589,17 +1589,17 @@ Return a struct containing information a
                   m.setfield ("function", buf.str ());
 
                   m.setfield ("type", "anonymous");
                 }
               else
                 {
                   m.setfield ("function", fh_nm);
 
-                  if (fcn->is_nested_function ())
+                  if (fcn->is_subfunction ())
                     {
                       m.setfield ("type", "subfunction");
                       Cell parentage (dim_vector (1, 2));
                       parentage.elem(0) = fh_nm;
                       parentage.elem(1) = fcn->parent_fcn_name ();
                       m.setfield ("parentage", octave_value (parentage)); 
                     }
                   else if (fcn->is_private_function ())
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -71,17 +71,17 @@ public:
   virtual symbol_table::scope_id scope (void) { return -1; }
 
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
-  virtual bool is_nested_function (void) const { return false; }
+  virtual bool is_subfunction (void) const { return false; }
 
   virtual bool is_class_constructor (const std::string& = std::string ()) const
     { return false; }
 
   virtual bool is_class_method (const std::string& = std::string ()) const
     { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -176,17 +176,17 @@ octave_user_function::octave_user_functi
    tree_parameter_list *rl, tree_statement_list *cl)
   : octave_user_code (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     lead_comm (), trail_comm (), file_name (),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (-1),
     num_named_args (param_list ? param_list->length () : 0),
-    nested_function (false), inline_function (false),
+    subfunction (false), inline_function (false),
     class_constructor (false), class_method (false),
     parent_scope (-1), local_scope (sid),
     curr_unwind_protect_frame (0)
 {
   if (cmd_list)
     cmd_list->mark_as_function_body ();
 
   if (local_scope >= 0)
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -243,19 +243,19 @@ public:
   void lock_subfunctions (void);
 
   void unlock_subfunctions (void);
 
   octave_value_list all_va_args (const octave_value_list& args);
 
   void stash_function_name (const std::string& s) { my_name = s; }
 
-  void mark_as_nested_function (void) { nested_function = true; }
+  void mark_as_subfunction (void) { subfunction = true; }
 
-  bool is_nested_function (void) const { return nested_function; }
+  bool is_subfunction (void) const { return subfunction; }
 
   void mark_as_inline_function (void) { inline_function = true; }
 
   bool is_inline_function (void) const { return inline_function; }
 
   void mark_as_class_constructor (void) { class_constructor = true; }
 
   bool is_class_constructor (const std::string& cname = std::string ()) const
@@ -361,18 +361,18 @@ private:
   bool system_fcn_file;
 
   // Used to keep track of recursion depth.
   int call_depth;
 
   // The number of arguments that have names.
   int num_named_args;
 
-  // TRUE means this is a nested function.
-  bool nested_function;
+  // TRUE means this subfunction of a primary function.
+  bool subfunction;
 
   // TRUE means this is an inline function.
   bool inline_function;
 
   // TRUE means this function is the constructor for class object.
   bool class_constructor;
 
   // TRUE means this function is a method for a class.
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -164,19 +164,19 @@ out_of_date_check (octave_value& functio
                    bool check_relative)
 {
   bool retval = false;
 
   octave_function *fcn = function.function_value (true);
 
   if (fcn)
     {
-      // FIXME -- we need to handle nested functions properly here.
+      // FIXME -- we need to handle subfunctions properly here.
 
-      if (! fcn->is_nested_function ())
+      if (! fcn->is_subfunction ())
         {
           std::string ff = fcn->fcn_file_name ();
 
           if (! ff.empty ())
             {
               octave_time tc = fcn->time_checked ();
 
               bool relative = check_relative && fcn->is_relative ();
