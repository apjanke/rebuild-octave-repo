# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544642738 28800
#      Wed Dec 12 11:25:38 2018 -0800
# Node ID da75dfccf14ba88161b2a1b34c9cfc71ecba95d6
# Parent  33913d29bed4810815aac99bdc79646ae6103cbd
__plt__.m: Improve performance by 35% by calling __go_line__ directly.

* __plt__.m: Rename variable 'h' to 'hp' (handle of parent).
Rename variable 'tmp' to 'htmp' (temporary graphics handle).
Replace all calls to line() with direct call to C++ __go_line__.

diff --git a/scripts/plot/draw/private/__plt__.m b/scripts/plot/draw/private/__plt__.m
--- a/scripts/plot/draw/private/__plt__.m
+++ b/scripts/plot/draw/private/__plt__.m
@@ -12,39 +12,39 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} __plt__ (@var{caller}, @var{h}, @var{varargin})
+## @deftypefn {} {} __plt__ (@var{caller}, @var{hparent}, @var{varargin})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt__ (caller, h, varargin)
+function retval = __plt__ (caller, hp, varargin)
 
   persistent warned_callers = {};
   nargs = nargin - 2;
 
   if (nargs > 0)
 
     k = 1;
 
     x_set = false;
     y_set = false;
     property_set = false;
     properties = {};
 
     ## Find any legend associated with this axes
     try
-      hlegend = get (h, "__legend_handle__");
+      hlegend = get (hp, "__legend_handle__");
     catch
       hlegend = [];
     end_try_catch
 
     setlgnd = false;
     if (isempty (hlegend))
       hlgnd = [];
       tlgnd = {};
@@ -99,40 +99,40 @@ function retval = __plt__ (caller, h, va
                        caller);
               endif
               properties = [properties, varargin(k:k+1)];
               k += 2;
               nargs -= 2;
             endwhile
           endif
           if (y_set)
-            tmp = __plt2__ (h, x, y, options, properties);
+            htmp = __plt2__ (hp, x, y, options, properties);
             [hlgnd, tlgnd, setlgnd] = ...
-              __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
+              __plt_key__ (htmp, options, hlgnd, tlgnd, setlgnd);
             properties = {};
-            retval = [retval; tmp];
+            retval = [retval; htmp];
           else
-            tmp = __plt1__ (h, x, options, properties);
+            htmp = __plt1__ (hp, x, options, properties);
             [hlgnd, tlgnd, setlgnd] = ...
-               __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
+               __plt_key__ (htmp, options, hlgnd, tlgnd, setlgnd);
             properties = {};
-            retval = [retval; tmp];
+            retval = [retval; htmp];
           endif
           x_set = false;
           y_set = false;
         else
           error ("plot: no data to plot");
         endif
       elseif (x_set)
         if (y_set)
           options = __pltopt__ (caller, {""});
-          tmp = __plt2__ (h, x, y, options, properties);
+          htmp = __plt2__ (hp, x, y, options, properties);
           [hlgnd, tlgnd, setlgnd] = ...
-            __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
-          retval = [retval; tmp];
+            __plt_key__ (htmp, options, hlgnd, tlgnd, setlgnd);
+          retval = [retval; htmp];
           x = next_arg;
           y_set = false;
           properties = {};
         else
           y = next_arg;
           y_set = true;
         endif
       else
@@ -146,35 +146,35 @@ function retval = __plt__ (caller, h, va
       legend (gca (), hlgnd, tlgnd);
     endif
   else
     error ("__plt__: invalid number of arguments");
   endif
 
 endfunction
 
-function [hlgnd, tlgnd, setlgnd] = __plt_key__ (h, options,
+function [hlgnd, tlgnd, setlgnd] = __plt_key__ (hp, options,
                                                 hlgnd, tlgnd, setlgnd)
-  n = numel (h);
+  n = numel (hp);
   if (numel (options) == 1)
     options = repmat (options(:), n, 1);
   endif
 
   for i = 1 : n
     key = options(i).key;
     if (! isempty (key))
-      hlgnd = [hlgnd(:); h(i)];
+      hlgnd = [hlgnd(:); hp(i)];
       tlgnd = {tlgnd{:}, key};
       setlgnd = true;
     endif
   endfor
 
 endfunction
 
-function retval = __plt1__ (h, x1, options, properties = {})
+function retval = __plt1__ (hp, x1, options, properties = {})
 
   if (nargin < 3 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   if (! isstruct (options))
     error ("__plt1__: options must be a struct array");
   endif
@@ -193,21 +193,21 @@ function retval = __plt1__ (h, x1, optio
       x2 = x1;
       x1 = (1:nr)';
     endif
   else
     x2 = x1;
     x1 = (1:nr)';
   endif
 
-  retval = __plt2__ (h, x1, x2, options, properties);
+  retval = __plt2__ (hp, x1, x2, options, properties);
 
 endfunction
 
-function retval = __plt2__ (h, x1, x2, options, properties = {})
+function retval = __plt2__ (hp, x1, x2, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   if (! isstruct (options))
     error ("__plt2__: options must be a struct array");
   endif
@@ -224,47 +224,47 @@ function retval = __plt2__ (h, x1, x2, o
     x2 = real (x2);
   endif
 
   h_set = false;
   if (isempty (x1) && isempty (x2))
     retval = zeros (0, 1);
   elseif (isscalar (x1))
     if (isscalar (x2))
-      retval = __plt2ss__ (h, x1, x2, options, properties);
+      retval = __plt2ss__ (hp, x1, x2, options, properties);
     elseif (isvector (x2))
-      retval = __plt2sv__ (h, x1, x2, options, properties);
+      retval = __plt2sv__ (hp, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isvector (x1))
     if (isscalar (x2))
-      retval = __plt2vs__ (h, x1, x2, options, properties);
+      retval = __plt2vs__ (hp, x1, x2, options, properties);
     elseif (isvector (x2))
-      retval = __plt2vv__ (h, x1, x2, options, properties);
+      retval = __plt2vv__ (hp, x1, x2, options, properties);
     elseif (ismatrix (x2))
-      retval = __plt2vm__ (h, x1, x2, options, properties);
+      retval = __plt2vm__ (hp, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (ismatrix (x1))
     if (isvector (x2))
-      retval = __plt2mv__ (h, x1, x2, options, properties);
+      retval = __plt2mv__ (hp, x1, x2, options, properties);
     elseif (ismatrix (x2))
-      retval = __plt2mm__ (h, x1, x2, options, properties);
+      retval = __plt2mm__ (hp, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   else
     error ("__plt2__: invalid data for plotting");
   endif
 
 endfunction
 
-function retval = __plt2mm__ (h, x, y, options, properties = {})
+function retval = __plt2mm__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
@@ -282,24 +282,24 @@ function retval = __plt2mm__ (h, x, y, o
     if (isempty (marker) && isempty (linestyle))
       [linestyle, marker] = __next_line_style__ ();
     endif
     color = options(i).color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    retval(i) = line (x(:,i), y(:,i), "color", color,
-                      "linestyle", linestyle,
-                      "marker", marker, properties{:});
+    retval(i) = __go_line__ (hp, "xdata", x(:,i), "ydata", y(:,i),
+                             "color", color, "linestyle", linestyle,
+                             "marker", marker, properties{:});
   endfor
 
 endfunction
 
-function retval = __plt2mv__ (h, x, y, options, properties = {})
+function retval = __plt2mv__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   y = y(:);
   [y_nr, y_nc] = size (y);
   [x_nr, x_nc] = size (x);
@@ -323,24 +323,24 @@ function retval = __plt2mv__ (h, x, y, o
     if (isempty (marker) && isempty (linestyle))
       [linestyle, marker] = __next_line_style__ ();
     endif
     color = options(i).color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    retval(i) = line (x(:,i), y, "color", color,
-                      "linestyle", linestyle,
-                      "marker", marker, properties{:});
+    retval(i) = __go_line__ (hp, "xdata", x(:,i), "ydata", y,
+                             "color", color, "linestyle", linestyle,
+                             "marker", marker, properties{:});
   endfor
 
 endfunction
 
-function retval = __plt2ss__ (h, x, y, options, properties = {})
+function retval = __plt2ss__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   if (numel (options) > 1)
     options = options(1);
   endif
@@ -352,23 +352,22 @@ function retval = __plt2ss__ (h, x, y, o
     linestyle = "-";
     marker = ".";
   endif
   color = options.color;
   if (isempty (color))
     color = __next_line_color__ ();
   endif
 
-  retval = line (x, y, "color", color,
-                 "linestyle", linestyle,
-                 "marker", marker, properties{:});
-
+  retval = __go_line__ (hp, "xdata", x, "ydata", y,
+                        "color", color, "linestyle", linestyle,
+                        "marker", marker, properties{:});
 endfunction
 
-function retval = __plt2sv__ (h, x, y, options, properties = {})
+function retval = __plt2sv__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   len = numel (y);
   if (numel (options) == 1)
     options = repmat (options(:), len, 1);
@@ -382,24 +381,24 @@ function retval = __plt2sv__ (h, x, y, o
       linestyle = "-";
       marker = ".";
     endif
     color = options(i).color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    retval(i) = line (x, y(i), "color", color,
-                      "linestyle", linestyle,
-                      "marker", marker, properties{:});
+    retval(i) = __go_line__ (hp, "xdata", x, "ydata", y(i),
+                             "color", color, "linestyle", linestyle,
+                             "marker", marker, properties{:});
   endfor
 
 endfunction
 
-function retval = __plt2vm__ (h, x, y, options, properties = {})
+function retval = __plt2vm__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   x = x(:);
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
@@ -423,24 +422,24 @@ function retval = __plt2vm__ (h, x, y, o
     if (isempty (marker) && isempty (linestyle))
       [linestyle, marker] = __next_line_style__ ();
     endif
     color = options(i).color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    retval(i) = line (x, y(:,i), "color", color,
-                      "linestyle", linestyle,
-                      "marker", marker, properties{:});
+    retval(i) = __go_line__ (hp, "xdata", x, "ydata", y(:,i),
+                             "color", color, "linestyle", linestyle,
+                             "marker", marker, properties{:});
   endfor
 
 endfunction
 
-function retval = __plt2vs__ (h, x, y, options, properties = {})
+function retval = __plt2vs__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   len = numel (x);
   if (numel (options) == 1)
     options = repmat (options(:), len, 1);
@@ -454,24 +453,24 @@ function retval = __plt2vs__ (h, x, y, o
       linestyle = "-";
       marker = ".";
     endif
     color = options(i).color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
 
-    retval(i) = line (x(i), y, "color", color,
-                      "linestyle", linestyle,
-                      "marker", marker, properties{:});
+    retval(i) = __go_line__ (hp, "xdata", x(i), "ydata", y,
+                             "color", color, "linestyle", linestyle,
+                             "marker", marker, properties{:});
   endfor
 
 endfunction
 
-function retval = __plt2vv__ (h, x, y, options, properties = {})
+function retval = __plt2vv__ (hp, x, y, options, properties = {})
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
   if (numel (options) > 1)
     options = options(1);
   endif
@@ -488,13 +487,13 @@ function retval = __plt2vv__ (h, x, y, o
   if (isempty (marker) && isempty (linestyle))
     [linestyle, marker] = __next_line_style__ ();
   endif
   color = options.color;
   if (isempty (color))
     color = __next_line_color__ ();
   endif
 
-  retval = line (x, y, "color", color,
-                 "linestyle", linestyle,
-                 "marker", marker, properties{:});
+  retval = __go_line__ (hp, "xdata", x, "ydata", y,
+                        "color", color, "linestyle", linestyle,
+                        "marker", marker, properties{:});
 
 endfunction
