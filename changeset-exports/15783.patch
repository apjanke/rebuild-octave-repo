# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1355432305 18000
#      Thu Dec 13 15:58:25 2012 -0500
# Node ID d61b92690820d90c27b331f86e31f0b1106455d0
# Parent  10ed43563df5a215540cbfc5d1dbacd1bae2a303
coerce plot array and vector properties to full

* graphics.h.in (array_property::array_property, array_property::set):
Store full array if given data is sparse.

diff --git a/libinterp/interpfcn/graphics.in.h b/libinterp/interpfcn/graphics.in.h
--- a/libinterp/interpfcn/graphics.in.h
+++ b/libinterp/interpfcn/graphics.in.h
@@ -1389,17 +1389,17 @@ public:
       xmin (), xmax (), xminp (), xmaxp (),
       type_constraints (), size_constraints ()
     {
       get_data_limits ();
     }
 
   array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
-    : base_property (nm, h), data (m),
+    : base_property (nm, h), data (m.is_sparse_type () ? m.full_value () : m),
       xmin (), xmax (), xminp (), xmaxp (),
       type_constraints (), size_constraints ()
     {
       get_data_limits ();
     }
 
   // This copy constructor is only intended to be used
   // internally to access min/max values; no need to
@@ -1449,22 +1449,24 @@ public:
       p->size_constraints = size_constraints;
 
       return p;
     }
 
 protected:
   bool do_set (const octave_value& v)
     {
-      if (validate (v))
+      octave_value tmp = v.is_sparse_type () ? v.full_value () : v;
+
+      if (validate (tmp))
         {
           // FIXME -- should we check for actual data change?
-          if (! is_equal (v))
+          if (! is_equal (tmp))
             {
-              data = v;
+              data = tmp;
 
               get_data_limits ();
 
               return true;
             }
         }
       else
         error ("invalid value for array property \"%s\"",
