# HG changeset patch
# User jwe
# Date 1079030957 0
#      Thu Mar 11 18:49:17 2004 +0000
# Node ID 8f669cc5a901a03e0541292ebdaec3f3eead7941
# Parent  399e8681b7745f63cc26be0841d21f550aaa519c
[project @ 2004-03-11 18:49:17 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -41,16 +41,27 @@ Software Foundation, 59 Temple Place - S
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "lo-sstream.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
+Array<T>::Array (const Array<T>& a, const dim_vector& dv)
+  : rep (a.rep), dimensions (dv), idx (0), idx_count (0)
+{
+  rep->count++;
+
+  if (a.numel () < dv.numel ())
+    (*current_liboctave_error_handler)
+      ("Array::Array (const Array&, const dim_vector&): dimension mismatch");
+}
+
+template <class T>
 Array<T>::~Array (void)
 {
   if (--rep->count <= 0)
     delete rep;
 
   delete [] idx;
 }
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -197,21 +197,17 @@ public:
 
   Array (const dim_vector& dv, const T& val)
     : rep (new typename Array<T>::ArrayRep (get_size (dv))),
       dimensions (dv), idx (0), idx_count (0)
     {
       fill (val);
     }
 
-  Array (const Array<T>& a, const dim_vector& dv)
-    : rep (a.rep), dimensions (dv), idx (0), idx_count (0)
-    {
-      rep->count++;
-    }
+  Array (const Array<T>& a, const dim_vector& dv);
 
   ~Array (void);
 
   Array<T>& operator = (const Array<T>& a)
     {
       if (this != &a)
 	{
 	  if (--rep->count <= 0)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2004-03-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::Array (const Array<T>&, const dim_vector&)):
+	Move here from Array.h, check that size of array arg is not
+	smaller than the size defined by the new dimensions.
+
 2004-03-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::index2): Allow result to be N-d if indexing
 	a scalar or vector with an N-d array.
 
 2004-03-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::index2): If scalar or vector is indexed by
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-03-10  Volker Kuhlmann  <VolkerKuhlmann@gmx.de>
+
+	* signal/sinewave.m: Allow N to default to M.
+
 2004-03-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* signal/unwrap.m: Use "isempty (tol)" instead of "tol == []".
 
 2004-03-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/deal.m: New function.
 	Add tests from Paul Kienzle.
diff --git a/scripts/signal/sinewave.m b/scripts/signal/sinewave.m
--- a/scripts/signal/sinewave.m
+++ b/scripts/signal/sinewave.m
@@ -17,25 +17,30 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sinewave (@var{m}, @var{n}, @var{d})
 ## Return an @var{m}-element vector with @var{i}-th element given by
 ## @code{sin (2 * pi * (@var{i}+@var{d}-1) / @var{n})}.
 ##
-## The default value for @var{d} is 0.
+## The default value for @var{d} is 0 and the default value for @var{n}
+## is @var{m}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Compute a sine wave
 
 function x = sinewave (m, n, d)
 
-  if (nargin == 2)
-    d = 0;
-  elseif (nargin != 3)
+  if (nargin > 0 && nargin < 4)
+    if (nargin < 3)
+      d = 0;
+    endif
+    if (nargin < 2)
+      n = m;
+    endif
+    x = sin (((1 : m) + d - 1) * 2 * pi / n);
+  else
     usage ("sinewave (m, n, d)");
   endif
 
-  x = sin (((1 : m) + d - 1) * 2 * pi / n);
-
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-03-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-base-mat.cc (octave_base_matrix<MT>::subsasgn): If empty,
+	allow type conversion when indexing with "{" and ".".
+
 2004-03-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pr-output.cc (init_format_state): Also set compact_format.
 	(pr_col_num_header): Print one newline character before column
 	headers for compact format.
 
 2004-03-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -97,18 +97,27 @@ octave_base_matrix<MT>::subsasgn (const 
 		   nm.c_str ());
 	  }
       }
       break;
 
     case '{':
     case '.':
       {
-	std::string nm = type_name ();
-	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+	if (is_empty ())
+	  {
+	    octave_value tmp = octave_value::empty_conv (type, rhs);
+
+	    retval = tmp.subsasgn (type, idx, rhs);
+	  }
+	else
+	  {
+	    std::string nm = type_name ();
+	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+	  }
       }
       break;
 
     default:
       panic_impossible ();
     }
 
   return retval;
