# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1245127436 -7200
#      Tue Jun 16 06:43:56 2009 +0200
# Branch release-3-2-x
# Node ID f944142010ced613089896914743151ddfcf8d45
# Parent  9caef5712f40657ab13ac10325521091e77a3555
plotyy.m: Fix compatibility with subplot.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-14  Ben Abbott <bpabbott@mac.com>
+
+	* plot/plotyy.m: Fix compatibility with subplot, add listeners for
+	dataaspectratio, and add a demo.
+
 2009-06-14  Eric Chassande-Mottin <echassandemottin@gmail.com>
 
 	* plot/plotyy.m: Correct behavior when there is no currentfigure.
 
 2009-06-11  Ben Abbott <bpabbott@mac.com>
 
 	* plot/print.m: Fix logic associated with 'have_ghostscript'.
 	* plot/gnuplot_drawnow.m: Add support for pdfcairo and pngcairo
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -70,17 +70,24 @@ function [Ax, H1, H2] = plotyy (varargin
     else
       error ("plotyy: expecting first argument to be axes handle");
     endif
   else
     f = get (0, "currentfigure");
     if (isempty (f))
       f = figure ();
     endif
-    ax = get (f, "children");
+    ca = get (f, "currentaxes");
+    if (isempty (ca))
+      ax = [];
+    elseif (strcmp (get (ca, "tag"), "plotyy"));
+      ax = get (ca, "__plotyy_axes__");
+    else
+      ax = ca;
+    endif
     if (length (ax) > 2)
       for i = 3 : length (ax)
         delete (ax (i));
       endfor
       ax = ax(1:2);
     elseif (length (ax) == 1)
       ax(2) = axes ();
     elseif (isempty (ax))
@@ -170,33 +177,52 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   set (t1, "deletefcn", {@deleteplotyy, ax(2), t2});
   set (t2, "deletefcn", {@deleteplotyy, ax(1), t1});
 
   addlistener (ax(1), "position", {@update_position, ax(2)});
   addlistener (ax(2), "position", {@update_position, ax(1)});
   addlistener (ax(1), "view", {@update_position, ax(2)});
   addlistener (ax(2), "view", {@update_position, ax(1)});
+  addlistener (ax(1), "dataaspectratio", {@update_position, ax(2)});
+  addlistener (ax(2), "dataaspectratio", {@update_position, ax(1)});
 
   ## Tag the plotyy axes, so we can use that information
   ## not to mirror the y axis tick marks
   set (ax, "tag", "plotyy")
 
+  ## Store the axes handles for the sister axes.
+  addproperty ("__plotyy_axes__", ax(1), "data", ax);
+  addproperty ("__plotyy_axes__", ax(2), "data", ax);
+
 endfunction
 
 %!demo
 %! clf
 %! x = 0:0.1:2*pi; 
 %! y1 = sin (x);
 %! y2 = exp (x - 1);
 %! ax = plotyy (x, y1, x - 1, y2, @plot, @semilogy);
 %! xlabel ("X");
 %! ylabel (ax(1), "Axis 1");
 %! ylabel (ax(2), "Axis 2");
 
+%!demo
+%! clf
+%! x = linspace (-1, 1, 201);
+%! subplot (2, 2, 1)
+%! plotyy (x, sin(pi*x), x, 10*cos(pi*x))
+%! subplot (2, 2, 2)
+%! surf (peaks (25))
+%! subplot (2, 2, 3)
+%! contour (peaks (25))
+%! subplot (2, 2, 4)
+%! plotyy (x, 10*sin(2*pi*x), x, cos(2*pi*x))
+%! axis square
+
 function deleteplotyy (h, d, ax2, t2)
   if (ishandle (ax2) && strcmp (get (ax2, "type"), "axes") && 
       (isempty (gcbf()) || strcmp (get (gcbf(), "beingdeleted"),"off")) &&
       strcmp (get (ax2, "beingdeleted"), "off"))
     set (t2, "deletefcn", []);
     delete (ax2);
   endif
 endfunction
@@ -205,20 +231,26 @@ function update_position (h, d, ax2)
   persistent recursion = false;
 
   ## Don't allow recursion
   if (! recursion)
     unwind_protect
       recursion = true;
       position = get (h, "position");
       view = get (h, "view");
+      dataaspectratio = get (h, "dataaspectratio");
       oldposition = get (ax2, "position");
       oldview = get (ax2, "view");
-      if (! (isequal (position, oldposition) && isequal (view, oldview)))
-	set (ax2, "position", position, "view", view);
+      olddataaspectratio = get (ax2, "dataaspectratio");
+      if (! (isequal (position, oldposition)
+             && isequal (view, oldview)
+             && isequal (dataaspectratio, olddataaspectratio)))
+	set (ax2, "position", position,
+                  "view", view,
+		  "dataaspectratio", dataaspectratio);
       endif
     unwind_protect_cleanup
       recursion = false;
     end_unwind_protect
   endif  
 endfunction
 
 function color = getcolor (ax)
