# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1524551351 -7200
#      Tue Apr 24 08:29:11 2018 +0200
# Branch stable
# Node ID 4c98a9e5ce2557e64256a8f02d857157187a80a3
# Parent  537b732926fb773f7796690a530c33b9439a76a0
Fix segmentation fault in eigs when B is not SPD (bug #53719).

* eigs-base.cc (make_cholb): check for info != 0 after a sparse
Cholesky factorization.
* eigs.m (select): Fix conditions for "lr", "sr", "li", and "si"
cases.  New test.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -205,17 +205,17 @@ make_cholb (Matrix& b, Matrix& bt, Colum
 }
 
 static bool
 make_cholb (SparseMatrix& b, SparseMatrix& bt, ColumnVector& permB)
 {
   octave_idx_type info;
   octave::math::sparse_chol<SparseMatrix> fact (b, info, false);
 
-  if (fact.P () != 0)
+  if (info != 0)
     return false;
   else
     {
       b = fact.L (); // lower triangular
       bt = b.transpose ();
       permB = fact.perm () - 1.0;
       return true;
     }
@@ -243,17 +243,17 @@ make_cholb (ComplexMatrix& b, ComplexMat
 
 static bool
 make_cholb (SparseComplexMatrix& b, SparseComplexMatrix& bt,
             ColumnVector& permB)
 {
   octave_idx_type info;
   octave::math::sparse_chol<SparseComplexMatrix> fact (b, info, false);
 
-  if (fact.P () != 0)
+  if (info != 0)
     return false;
   else
     {
       b = fact.L (); // lower triangular
       bt = b.hermitian ();
       permB = fact.perm () - 1.0;
       return true;
     }
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -300,38 +300,38 @@ function out = select (args, k, sigma, r
       case "be"
         if (real_valued && symmetric)
           [~, idx] = sort (real (d), "ascend");
         else
           error ('eigs: SIGMA = "be" requires real symmetric problem');
         endif
 
       case "lr"
-        if (! (real_valued || symmetric))
+        if (! (real_valued && symmetric))
           [~, idx] = sort (real (d), "descend");
         else
           error ('eigs: SIGMA = "lr" requires complex or unsymmetric problem');
         endif
 
       case "sr"
-        if (! (real_valued || symmetric))
+        if (! (real_valued && symmetric))
           [~, idx] = sort (real (d), "ascend");
         else
           error ('eigs: SIGMA = "sr" requires complex or unsymmetric problem');
         endif
 
       case "li"
-        if (! (real_valued || symmetric))
+        if (! (real_valued && symmetric))
           [~, idx] = sort (imag (d), "descend");
         else
           error ('eigs: SIGMA = "li" requires complex or unsymmetric problem');
         endif
 
       case "si"
-        if (! (real_valued || symmetric))
+        if (! (real_valued && symmetric))
           [~, idx] = sort (imag (d), "ascend");
         else
           error ('eigs: SIGMA = "si" requires complex or unsymmetric problem');
         endif
 
       otherwise
         error ("eigs: unrecognized value for SIGMA: %s", sigma);
     endswitch
@@ -1438,8 +1438,15 @@ endfunction
 %! A = 1i * magic (100);
 %! Afun = @(x) A * x;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
 %! opts.isreal = false;
 %! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (Afun, 100, 6, "lm", opts);
 %! assert (d(6), NaN+1i*NaN);
+%!testif HAVE_ARPACK
+%! A = sparse (magic (10));
+%! B = sparse (magic (10)); # not HPD
+%! fail ("eigs (A, B, 4)", "eigs: The matrix B is not positive definite")
+%!testif HAVE_ARPACK
+%! A = rand (8);
+%! eigs (A, 6, "lr"); # this failed in 4.2.x
