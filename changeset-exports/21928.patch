# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466096854 14400
#      Thu Jun 16 13:07:34 2016 -0400
# Node ID 315f4ba604c850b6b5936979b9d5d84b0bfe5e18
# Parent  6f62bd2489196693f9c197b09fd8b5b732e23691
* randmtzig.cc: Use octave::sys::time.

diff --git a/liboctave/numeric/randmtzig.cc b/liboctave/numeric/randmtzig.cc
--- a/liboctave/numeric/randmtzig.cc
+++ b/liboctave/numeric/randmtzig.cc
@@ -152,23 +152,19 @@ along with Octave; see the file COPYING.
    void oct_fill_float_rande (octave_idx_type, float [])
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cstdio>
-#include <ctime>
-
-#if defined (HAVE_GETTIMEOFDAY)
-#  include <sys/time.h>
-#endif
 
 #include "lo-math.h"
+#include "oct-time.h"
 #include "randmtzig.h"
 
 /* FIXME: may want to suppress X86 if sizeof(long) > 4 */
 #if ! defined (USE_X86_32)
 #  if defined (i386) || defined (HAVE_X86_32)
 #    define USE_X86_32 1
 #  else
 #    define USE_X86_32 0
@@ -270,28 +266,28 @@ oct_init_by_entropy (void)
           if (gnulib::fread (word, 4, 1, urandom) != 1)
             break;
           entropy[n++] = word[0]+(word[1]<<8)+(word[2]<<16)+(static_cast<uint32_t>(word[3])<<24);
         }
       gnulib::fclose (urandom);
     }
 
   /* If there isn't enough entropy, gather some from various sources */
+
+  octave::sys::time now;
+
   if (n < MT_N)
-    entropy[n++] = time (0); /* Current time in seconds */
+    entropy[n++] = now.unix_time (); /* Current time in seconds */
+
   if (n < MT_N)
     entropy[n++] = clock ();    /* CPU time used (usec) */
-#if defined (HAVE_GETTIMEOFDAY)
+
   if (n < MT_N)
-    {
-      struct timeval tv;
-      if (gnulib::gettimeofday (&tv, 0) != -1)
-        entropy[n++] = tv.tv_usec;   /* Fractional part of current time */
-    }
-#endif
+    entropy[n++] = now.usec ();   /* Fractional part of current time */
+
   /* Send all the entropy into the initial state vector */
   oct_init_by_array (entropy,n);
 }
 
 void
 oct_set_state (uint32_t *save)
 {
   int i;
