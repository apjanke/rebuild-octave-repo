# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1552333687 -3600
#      Mon Mar 11 20:48:07 2019 +0100
# Branch stable
# Node ID 6c25c714bec436f70098355ab9d81d3b2fb083af
# Parent  3c7c5b7c30444153d2b154c603d621363539c952
Improve error checking for iconv_open.

* inputcc (input_system::mfile_encoding): Check return value of iconv_open
  before checking errno.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -512,32 +512,35 @@ namespace octave
 #endif
           }
         else
           {
             std::transform (m_mfile_encoding.begin (),
                             m_mfile_encoding.end (),
                             m_mfile_encoding.begin (), ::tolower);
 
-            std::string codepage = (m_mfile_encoding.compare ("system") == 0)
+            std::string encoding = (m_mfile_encoding.compare ("system") == 0)
               ? octave_locale_charset_wrapper () : m_mfile_encoding;
 
-            // Check for valid codepage.
+            // Check for valid encoding name.
             void *codec
-              = octave_iconv_open_wrapper (codepage.c_str (), "utf-8");
+              = octave_iconv_open_wrapper (encoding.c_str (), "utf-8");
 
-            if (errno == EINVAL)
+            if (codec == reinterpret_cast<void *> (-1))
               {
                 m_mfile_encoding = saved_encoding;
-
-                error ("__mfile_encoding__: conversion from codepage '%s' not supported",
-                       codepage.c_str ());
+                if (errno == EINVAL)
+                  error ("__mfile_encoding__: conversion from encoding '%s' "
+                         "not supported", encoding.c_str ());
+                else
+                  error ("__mfile_encoding__: error %d opening encoding '%s'.",
+                         errno, encoding.c_str ());
               }
-
-            octave_iconv_close_wrapper (codec);
+            else
+              octave_iconv_close_wrapper (codec);
           }
 
       }
 
     // Synchronize the related gui preference for editor encoding
     octave::feval ("__octave_link_gui_preference__",
                    ovl ("editor/default_encoding", m_mfile_encoding));
 
