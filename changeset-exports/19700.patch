# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1423762496 -3600
#      Thu Feb 12 18:34:56 2015 +0100
# Node ID 00e31f316a3a78183c87971f758a8d2bec46aff3
# Parent  2e9f17872f366cdc4c7fe17a8a4fb47e9c30ecef
Fix Matlab incompatibility of "ismatrix" (bug #42422).

* data.cc (isvector): new tests
* data.cc (isrow): documentation improved, new tests
* data.cc (iscolumn): documentation improved, new tests
* data.cc (ismatrix): is matrix now only checks the dimension due to Matlab
compatibility, documentation improved, new tests

* accumarray.m: use more appropriate function, than ismatrix

* gradient.m: use more appropriate function, than ismatrix

* num2str.m: use more appropriate functions, than ismatrix

* ntsc2rgb.m: use more appropriate function, than ismatrix

* condest.m: use more appropriate function, than ismatrix

* expm.m: use more appropriate function, than ismatrix

* onenormest.m: use more appropriate function, than ismatrix

* isocolors.m: use more appropriate function, than ismatrix

* isonormals.m: use more appropriate function, than ismatrix

* isosurface.m: use more appropriate function, than ismatrix

* __errcomm__.m: use more appropriate function, than ismatrix

* __interp_cube__.m: use more appropriate function, than ismatrix

* __marching_cube__.m: use more appropriate function, than ismatrix

* __stem__.m: use more appropriate function, than ismatrix

* stairs.m: use more appropriate function, than ismatrix

* validsetargs.m: use more appropriate functions, than ismatrix

* unique.m: use more appropriate functions, than ismatrix

* bicg.m: additional tests for numerical value

* bicgstab.m: additional tests for numerical value

* cgs.m: additional tests for numerical value

* gmres.m: additional tests for numerical value

* qmr.m: additional tests for numerical value

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3738,38 +3738,39 @@ consequence a 1x1 array, or scalar, is a
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%!assert (isvector (1))
-%!assert (isvector ([1; 2; 3]))
+%!assert (isvector (1), true)
+%!assert (isvector ([1; 2; 3]), true)
+%!assert (isvector ([1, 2, 3]), true)
 %!assert (isvector ([]), false)
 %!assert (isvector ([1, 2; 3, 4]), false)
 
-%!assert (isvector ("t"))
-%!assert (isvector ("test"))
+%!assert (isvector ("t"), true)
+%!assert (isvector ("test"), true)
 %!assert (isvector (["test"; "ing"]), false)
 
 %!test
 %! s.a = 1;
-%! assert (isvector (s));
+%! assert (isvector (s), true);
 
 %% Test input validation
 %!error isvector ()
 %!error isvector ([1, 2], 2)
 */
 
 DEFUN (isrow, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} isrow (@var{x})\n\
-Return true if @var{x} is a row vector.\n\
+Return true if @var{x} is a row vector 1xN with nonnegative N.\n\
 @seealso{iscolumn, isscalar, isvector, ismatrix}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       dim_vector sz = args(0).dims ();
@@ -3783,33 +3784,43 @@ Return true if @var{x} is a row vector.\
 
 /*
 %!assert (isrow ([1, 2, 3]))
 %!assert (isrow ([1; 2; 3]), false)
 %!assert (isrow (1))
 %!assert (isrow ([]), false)
 %!assert (isrow ([1, 2; 3, 4]), false)
 
-%!assert (isrow ("t"))
-%!assert (isrow ("test"))
+%!assert (isrow (ones (1, 0)), true)
+%!assert (isrow (ones (1, 1)), true)
+%!assert (isrow (ones (1, 2)), true)
+%!assert (isrow (ones (1, 1, 1)), true)
+%!assert (isrow (ones (1, 1, 1, 1)), true)
+
+%!assert (isrow (ones (0, 0)), false)
+%!assert (isrow (ones (1, 1, 0)), false)
+
+
+%!assert (isrow ("t"), true)
+%!assert (isrow ("test"), true)
 %!assert (isrow (["test"; "ing"]), false)
 
 %!test
 %! s.a = 1;
-%! assert (isrow (s));
+%! assert (isrow (s), true);
 
 %% Test input validation
 %!error isrow ()
 %!error isrow ([1, 2], 2)
 */
 
 DEFUN (iscolumn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} iscolumn (@var{x})\n\
-Return true if @var{x} is a column vector.\n\
+Return true if @var{x} is a column vector Nx1 with nonnegative N.\n\
 @seealso{isrow, isscalar, isvector, ismatrix}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       dim_vector sz = args(0).dims ();
@@ -3818,79 +3829,86 @@ Return true if @var{x} is a column vecto
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!assert (iscolumn ([1, 2, 3]), false)
-%!assert (iscolumn ([1; 2; 3]))
-%!assert (iscolumn (1))
+%!assert (iscolumn ([1; 2; 3]), true)
+%!assert (iscolumn (1), true)
 %!assert (iscolumn ([]), false)
 %!assert (iscolumn ([1, 2; 3, 4]), false)
 
-%!assert (iscolumn ("t"))
+%!assert (iscolumn ("t"), true)
 %!assert (iscolumn ("test"), false)
 %!assert (iscolumn (["test"; "ing"]), false)
 
+%!assert (iscolumn (ones (0, 1)), true)
+%!assert (iscolumn (ones (1, 1)), true)
+%!assert (iscolumn (ones (2, 1)), true)
+%!assert (iscolumn (ones (1, 1, 1)), true)
+%!assert (iscolumn (ones (1, 1, 1, 1)), true)
+
+%!assert (iscolumn (ones (0, 0)), false)
+%!assert (iscolumn (ones (0, 1, 0)), false)
+
 %!test
 %! s.a = 1;
 %! assert (iscolumn (s));
 
 %% Test input validation
 %!error iscolumn ()
 %!error iscolumn ([1, 2], 2)
 */
 
 DEFUN (ismatrix, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ismatrix (@var{a})\n\
-Return true if @var{a} is a numeric, logical, or character matrix.\n\
-Scalars (1x1 matrices) and vectors (@nospell{1xN} or @nospell{Nx1} matrices)\n\
-are subsets of the more general N-dimensional matrix and @code{ismatrix}\n\
-will return true for these objects as well.\n\
+Return true if @var{a} is has exactly two nonnegative dimensions.\n\
 @seealso{isscalar, isvector, iscell, isstruct, issparse, isa}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
-      octave_value arg = args(0);
-
-      retval = arg.is_matrix_type ()
-               || arg.is_scalar_type ()
-               || arg.is_range ();
+      dim_vector sz = args(0).dims ();
+      retval = (sz.length () == 2) && (sz(0) >= 0) && (sz(1) >= 0);
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%!assert (ismatrix ([]))
-%!assert (ismatrix (1))
-%!assert (ismatrix ([1, 2, 3]))
-%!assert (ismatrix ([1, 2; 3, 4]))
-%!assert (ismatrix (zeros (3, 2, 4)))
-
-%!assert (ismatrix (single ([])))
-%!assert (ismatrix (single (1)))
-%!assert (ismatrix (single ([1, 2, 3])))
-%!assert (ismatrix (single ([1, 2; 3, 4])))
-
-%!assert (ismatrix ("t"))
-%!assert (ismatrix ("test"))
-%!assert (ismatrix (["test"; "ing"]))
+%!assert (ismatrix ([]), true)
+%!assert (ismatrix (1), true)
+%!assert (ismatrix ([1, 2, 3]), true)
+%!assert (ismatrix ([1, 2; 3, 4]), true)
+
+%!assert (ismatrix (zeros (0)), true)
+%!assert (ismatrix (zeros (0, 0)), true)
+%!assert (ismatrix (zeros (0, 0, 0)), false)
+%!assert (ismatrix (zeros (3, 2, 4)), false)
+
+%!assert (ismatrix (single ([])), true)
+%!assert (ismatrix (single (1)), true)
+%!assert (ismatrix (single ([1, 2, 3])), true)
+%!assert (ismatrix (single ([1, 2; 3, 4])), true)
+
+%!assert (ismatrix ("t"), true)
+%!assert (ismatrix ("test"), true)
+%!assert (ismatrix (["test"; "ing"]), true)
 
 %!test
 %! s.a = 1;
-%! assert (ismatrix (s), false);
+%! assert (ismatrix (s), true);
 
 %!error ismatrix ()
 %!error ismatrix ([1, 2; 3, 4], 2)
 */
 
 DEFUN (issquare, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} issquare (@var{x})\n\
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -234,17 +234,17 @@ function A = accumarray (subs, vals, sz 
         else
           sz = max (subs, [], 1);
         endif
       elseif (ndims != length (sz))
         error ("accumarray: dimensions mismatch");
       endif
 
       ## Convert multidimensional subscripts.
-      if (ismatrix (subs))
+      if (isnumeric (subs))
         subs = num2cell (subs, 1);
       endif
       subs = sub2ind (sz, subs{:}); # creates index cache
     elseif (! isempty (sz) && length (sz) < 2)
       error ("accumarray: needs at least 2 dimensions");
     elseif (! isindex (subs)) # creates index cache
       error ("accumarray: indices must be positive integers");
     endif
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -66,17 +66,17 @@
 
 function varargout = gradient (m, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
   nargout_with_ans = max (1,nargout);
-  if (ismatrix (m))
+  if (isnumeric (m))
     [varargout{1:nargout_with_ans}] = matrix_gradient (m, varargin{:});
   elseif (isa (m, "function_handle"))
     [varargout{1:nargout_with_ans}] = handle_gradient (m, varargin{:});
   elseif (ischar (m))
     [varargout{1:nargout_with_ans}] = handle_gradient (str2func (m), varargin{:});
   else
     error ("gradient: first input must be an array or a function");
   endif
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -66,17 +66,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
-  elseif (! ismatrix (x))
+  elseif (! (isnumeric (x) || islogical (x) || ischar (x)))
     error ("num2str: X must be a numeric, logical, or character array");
   endif
 
   if (ischar (x))
     retval = x;
   elseif (isempty (x))
     retval = "";
   elseif (isreal (x))
diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -45,17 +45,17 @@ function rgb = ntsc2rgb (yiq)
     print_usage ();
   endif
 
   if (! isa (yiq, "double"))
     error ("ntsc2rgb: YIQ must be of type double");
   endif
 
   ## If we have an image convert it into a color map.
-  if (ismatrix (yiq) && ndims (yiq) == 3)
+  if (isnumeric (yiq) && ndims (yiq) == 3)
     is_image = true;
     sz = size (yiq);
     yiq = [yiq(:,:,1)(:), yiq(:,:,2)(:), yiq(:,:,3)(:)];
   else
     is_image = false;
   endif
 
   if (! isreal (yiq) || columns (yiq) != 3 || issparse (yiq))
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -119,17 +119,17 @@ function [est, v] = condest (varargin)
   endif
 
   default_t = 5;
 
   have_A = false;
   have_t = false;
   have_solve = false;
 
-  if (ismatrix (varargin{1}))
+  if (isnumeric (varargin{1}))
     A = varargin{1};
     if (! issquare (A))
       error ("condest: matrix must be square");
     endif
     n = rows (A);
     have_A = true;
 
     if (nargin > 1)
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -72,17 +72,17 @@
 ## @end deftypefn
 
 function r = expm (A)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! ismatrix (A) || ! issquare (A))
+  if (! isnumeric (A) || ! issquare (A))
     error ("expm: A must be a square matrix");
   endif
 
   if (isscalar (A))
     r = exp (A);
     return;
   elseif (strfind (typeinfo (A), "diagonal matrix"))
     r = diag (exp (diag (A)));
diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -98,17 +98,17 @@ function [est, v, w, iter] = onenormest 
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   default_t = 5;
   itmax = 10;
 
-  if (ismatrix (varargin{1}))
+  if (isnumeric (varargin{1}))
     [n, nc] = size (varargin{1});
     if (n != nc)
       error ("onenormest: matrix must be square");
     endif
     apply = @(x) varargin{1} * x;
     apply_t = @(x) varargin{1}' * x;
     if (nargin > 1)
       t = varargin{2};
diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -128,17 +128,17 @@ function varargout = isocolors (varargin
       z = varargin{3};
       R = varargin{4};
       G = varargin{5};
       B = varargin{6};
       vp = varargin{7};
     otherwise
       print_usage ();
   endswitch
-  if (ismatrix (vp) && columns (vp) == 3)
+  if (isnumeric (vp) && columns (vp) == 3)
     pa = [];
     v = vp;
   elseif ( ishandle (vp) )
     pa = vp;
     v = get (pa, "Vertices");
   else
     error ("isocolors: last argument is not a vertex list or patch handle");
   endif
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -117,17 +117,17 @@ function varargout = isonormals (varargi
       x = varargin{1};
       y = varargin{2};
       z = varargin{3};
       c = varargin{4};
       vp = varargin{5};
     otherwise
       print_usage ();
   endswitch
-  if (ismatrix (vp) && columns (vp) == 3)
+  if (isnumeric (vp) && columns (vp) == 3)
     pa = [];
     v = vp;
   elseif (ishandle (vp))
     pa = vp;
     v = get (pa, "Vertices");
   else
     error ("isonormals: Last argument is not a vertex list or a patch handle");
   endif
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -129,17 +129,17 @@ function varargout = isosurface (varargi
   verbose = false;
   noshare = false;
   if (nargin >= 5)
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     val = varargin{4};
     iso = varargin{5};
-    if (nargin >= 6 && ismatrix (varargin{6}))
+    if (nargin >= 6 && isnumeric (varargin{6}))
       colors = varargin{6};
       calc_colors = true;
     endif
   else
     val = varargin{1};
     [n2, n1, n3] = size (val);
     [x, y, z] = meshgrid (1:n1, 1:n2, 1:n3);
     iso = varargin{2};
diff --git a/scripts/plot/draw/private/__errcomm__.m b/scripts/plot/draw/private/__errcomm__.m
--- a/scripts/plot/draw/private/__errcomm__.m
+++ b/scripts/plot/draw/private/__errcomm__.m
@@ -32,32 +32,32 @@ function retval = __errcomm__ (caller, h
   endif
 
   retval = [];
   data = cell (6,1);
   nargs = numel (varargin);
   k = 1;
   while (k <= nargs)
     arg = varargin{k++};
-    if (! ismatrix (arg))
+    if (! isnumeric (arg))
       error ("%s: data argument %d must be numeric", caller, k-1);
     endif
     if (isvector (arg))
       arg = arg(:);
     endif
     sz = size (arg);
     ndata = 1;
     data{ndata} = arg;
     while (k <= nargs)
       arg = varargin{k++};
       if (ischar (arg) || iscellstr (arg))
         retval(end+1,1) = __errplot__(arg, hax, data{1:ndata});
         break;
       endif
-      if (! ismatrix (arg))
+      if (! isnumeric (arg))
         error ("%s: data argument %d must be numeric", caller, k-1);
       endif
       if (isvector (arg))
         arg = arg(:);
       endif
       if (! isscalar (arg) && ((isvector (arg) && numel (arg) != prod (sz))
           || any (size (arg) != sz)))
         error ("%s: size of argument %d does not match others", caller, k-1);
diff --git a/scripts/plot/draw/private/__interp_cube__.m b/scripts/plot/draw/private/__interp_cube__.m
--- a/scripts/plot/draw/private/__interp_cube__.m
+++ b/scripts/plot/draw/private/__interp_cube__.m
@@ -19,18 +19,18 @@
 ## Author: Martin Helm <martin@mhelm.de>
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{vxyz}, @var{idx}, @var{frac}] =} __interp_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{v})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [Vxyz, idx, frac] = __interp_cube__ (x, y, z, val, v, req = "values" )
-  if (ismatrix (x) && ndims (x) == 3 && ismatrix (y) && ndims (y) == 3
-       && ismatrix (z) && ndims (z) == 3 && size_equal (x, y, z, val))
+  if (isnumeric (x) && ndims (x) == 3 && isnumeric (y) && ndims (y) == 3
+       && isnumeric (z) && ndims (z) == 3 && size_equal (x, y, z, val))
     x = squeeze (x(1,:,1))(:);
     y = squeeze (y(:,1,1))(:);
     z = squeeze (z(1,1,:))(:);
   elseif (isvector (x) && isvector (y) && isvector (z))
     x = x(:);
     y = y(:);
     z = z(:);
   else
diff --git a/scripts/plot/draw/private/__marching_cube__.m b/scripts/plot/draw/private/__marching_cube__.m
--- a/scripts/plot/draw/private/__marching_cube__.m
+++ b/scripts/plot/draw/private/__marching_cube__.m
@@ -93,17 +93,17 @@ function [T, p, col] = __marching_cube__
   if (isempty (tri_table) || isempty (edge_table))
     [edge_table, tri_table] = init_mc ();
   endif
 
   if ((nargin != 5 && nargin != 6) || (nargout != 2 && nargout != 3))
     print_usage ();
   endif
 
-  if (!ismatrix (xx) || !ismatrix (yy) || !ismatrix (zz) || !ismatrix (c) || ...
+  if (!isnumeric (xx) || !isnumeric (yy) || !isnumeric (zz) || !isnumeric (c) || ...
     ndims (xx) != 3 || ndims (yy) != 3 || ndims (zz) != 3 || ndims (c) != 3)
     error ("__marching_cube__: XX, YY, ZZ, C must be matrices of dim 3");
   endif
 
   if (!size_equal (xx, yy, zz, c))
     error ("__marching_cube__: XX, YY, ZZ, C must be of equal size");
   endif
 
@@ -111,17 +111,17 @@ function [T, p, col] = __marching_cube__
     error ("__marching_cube__: grid size must be at least 2x2x2");
   endif
 
   if (!isscalar (iso))
     error ("__marching_cube__: ISO must be scalar value");
   endif
 
   if (nargin == 6)
-    if ( !ismatrix (colors) || ndims (colors) != 3 || size (colors) != size (c) )
+    if ( !isnumeric (colors) || ndims (colors) != 3 || size (colors) != size (c) )
       error ( "COLORS must be a matrix of dim 3 and of same size as C" );
     endif
     calc_cols = true;
     lindex = 5;
   endif
 
   n = size (c) - 1;
 
diff --git a/scripts/plot/draw/private/__stem__.m b/scripts/plot/draw/private/__stem__.m
--- a/scripts/plot/draw/private/__stem__.m
+++ b/scripts/plot/draw/private/__stem__.m
@@ -234,28 +234,28 @@ function [x, y, z, dofill, lc, ls, mc, m
       if (nr >= nc)
         x = repmat ([1:nc], nr, 1);
         y = repmat ([1:nr]', 1, nc);
       else
         x = repmat ([1:nc], nr, 1);
         y = repmat ([1:nr]', 1, nc);
       endif
     endif
-    if (! (ismatrix (x) && ismatrix (y) && ismatrix (z)))
+    if (! (isnumeric (x) && isnumeric (y) && isnumeric (z)))
       error ("stem3: X, Y, and Z must be numeric");
     endif
   else
     if (isempty (x))
       if (isvector (y))
         x = 1:length (y);
       elseif (ismatrix (y))
         x = 1:rows (y);
       endif
     endif
-    if (! (ismatrix (x) && ismatrix (y)))
+    if (! (isnumeric (x) && isnumeric (y)))
       error ("stem: X and Y must be numeric");
     endif
   endif
 
   ## Check sizes of x, y and z.
   if (have_z)
     if (! size_equal (x, y, z))
       error ("stem3: inconsistent sizes for X, Y, and Z");
diff --git a/scripts/plot/draw/stairs.m b/scripts/plot/draw/stairs.m
--- a/scripts/plot/draw/stairs.m
+++ b/scripts/plot/draw/stairs.m
@@ -94,40 +94,40 @@ function [xs, ys] = stairs (varargin)
 
 endfunction
 
 function [h, xs, ys] = __stairs__ (doplot, varargin)
 
   if (nargin == 2 || ischar (varargin{2}))
     y = varargin{1};
     varargin(1) = [];
-    if (! ismatrix (y) || ndims (y) > 2)
+    if (! isnumeric (y) || ndims (y) > 2)
       error ("stairs: Y must be a numeric 2-D vector or matrix");
     endif
     if (isvector (y))
       y = y(:);
     endif
     x = 1:rows (y);
   else
     x = varargin{1};
     y = varargin{2};
     varargin(1:2) = [];
-    if (! ismatrix (x) || ! ismatrix (y) || ndims (x) > 2 || ndims (y) > 2)
+    if (! isnumeric (x) || ! isnumeric (y) || ndims (x) > 2 || ndims (y) > 2)
       error ("stairs: X and Y must be numeric 2-D vectors or matrices");
     endif
   endif
 
   vec_x = isvector (x);
   if (vec_x)
     x = x(:);
   endif
 
   if (isvector (y))
     y = y(:);
-  elseif (ismatrix (y) && vec_x)
+  elseif (isnumeric (y) && vec_x)
     x = repmat (x, [1, columns(y)]);
   endif
 
   if (! size_equal (x, y))
     error ("stairs: X and Y sizes must match");
   endif
 
   [nr, nc] = size (y);
diff --git a/scripts/set/private/validsetargs.m b/scripts/set/private/validsetargs.m
--- a/scripts/set/private/validsetargs.m
+++ b/scripts/set/private/validsetargs.m
@@ -16,38 +16,40 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Validate arguments for binary set operation.
 
 function [x, y] = validsetargs (caller, x, y, byrows_arg)
 
+  isallowedarraytype = @(x) isnumeric (x) || ischar (x) || islogical (x);
+
   if (nargin == 3)
     icx = iscellstr (x);
     icy = iscellstr (y);
     if (icx || icy)
       if (icx && ischar (y))
         y = cellstr (y);
       elseif (icy && ischar (x))
         x = cellstr (x);
       elseif (! (icx && icy))
         error ("%s: cell array of strings cannot be combined with a nonstring value", caller);
       endif
-    elseif (! (ismatrix (x) && ismatrix (y)))
+    elseif (! (isallowedarraytype (x) && isallowedarraytype (y)))
       error ("%s: A and B must be arrays or cell arrays of strings", caller);
     endif
   elseif (nargin == 4)
     if (! strcmpi (byrows_arg, "rows"))
       error ("%s: invalid option: %s", caller, byrows_arg);
     endif
 
     if (iscell (x) || iscell (y))
       error ('%s: cells not supported with "rows"', caller);
-    elseif (! (ismatrix (x) && ismatrix (y)))
+    elseif (! (isallowedarraytype (x) && isallowedarraytype (y)))
       error ("%s: A and B must be arrays or cell arrays of strings", caller);
     else
       if (ndims (x) > 2 || ndims (y) > 2)
         error ('%s: A and B must be 2-dimensional matrices for "rows"', caller);
       elseif (columns (x) != columns (y) && ! (isempty (x) || isempty (y)))
         error ("%s: number of columns in A and B must match", caller);
       endif
     endif
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -41,18 +41,18 @@
 ## is specified, return the lowest.  The default is @qcode{"last"}.
 ## @seealso{union, intersect, setdiff, setxor, ismember}
 ## @end deftypefn
 
 function [y, i, j] = unique (x, varargin)
 
   if (nargin < 1)
     print_usage ();
-  elseif (! (ismatrix (x) || iscellstr (x)))
-    error ("unique: X must be a matrix or cell array of strings");
+  elseif (! (isnumeric (x) || islogical (x) || ischar (x) || iscellstr (x)))
+    error ("unique: X must be an array or cell array of strings");
   endif
 
   if (nargin > 1)
     ## parse options
     if (! iscellstr (varargin))
       error ("unique: options must be strings");
     endif
 
@@ -211,17 +211,17 @@ endfunction
 %! A = [1,2,3;1,2,3];
 %! [a,i,j] = unique (A, "rows");
 %! assert (a, [1,2,3]);
 %! assert (A(i,:), a);
 %! assert (a(j,:), A);
 
 %% Test input validation
 %!error unique ()
-%!error <X must be a matrix or cell array of strings> unique ({1})
+%!error <X must be an array or cell array of strings> unique ({1})
 %!error <options must be strings> unique (1, 2)
 %!error <cannot specify both "first" and "last"> unique (1, "first", "last")
 %!error <invalid option> unique (1, "middle")
 %!error <invalid option> unique ({"a", "b", "c"}, "UnknownOption")
 %!error <invalid option> unique ({"a", "b", "c"}, "UnknownOption1", "UnknownOption2")
 %!error <invalid option> unique ({"a", "b", "c"}, "rows", "UnknownOption2")
 %!error <invalid option> unique ({"a", "b", "c"}, "UnknownOption1", "last")
 %!warning <"rows" is ignored for cell arrays> unique ({"1"}, "rows");
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -76,17 +76,17 @@
 function [x, flag, res1, k, resvec] = bicg (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && isvector (full (b)))
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
-    elseif (ismatrix (A))
+    elseif (isnumeric (A) && ismatrix (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
     else
       error (["bicg: first argument is expected to " ...
               "be a function or a square matrix"]);
@@ -102,17 +102,17 @@ function [x, flag, res1, k, resvec] = bi
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x, ignore) x;
       M1tm1x = M1m1x;
     elseif (ischar (M1))
       fun = str2func (M1);
       M1m1x  = @(x) feval (fun, x, "notransp");
       M1tm1x = @(x) feval (fun, x, "transp");
-    elseif (ismatrix (M1))
+    elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     else
       error (["bicg: preconditioner is expected to " ...
               "be a function or matrix"]);
@@ -120,17 +120,17 @@ function [x, flag, res1, k, resvec] = bi
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
-    elseif (ismatrix (M2))
+    elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     else
       error (["bicg: preconditioner is expected to " ...
               "be a function or matrix"]);
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -72,17 +72,17 @@
 
 function [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, maxit,
                                                      M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (ismatrix (A))
+    elseif (isnumeric(A) && ismatrix (A))
       Ax  = @(x) A  * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x);
     else
       error (["bicgstab: first argument is expected " ...
               "to be a function or a square matrix"]);
     endif
 
@@ -93,30 +93,30 @@ function [x, flag, relres, iter, resvec]
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
     endif
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
-    elseif (ismatrix (M1))
+    elseif (isnumeric(M1) && ismatrix (M1))
       M1m1x = @(x) M1  \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
       error (["bicgstab: preconditioner is " ...
               "expected to be a function or matrix"]);
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
-    elseif (ismatrix (M2))
+    elseif (isnumeric(M2) && ismatrix (M2))
       M2m1x = @(x) M2  \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
       error (["bicgstab: preconditioner is "...
               "expected to be a function or matrix"]);
     endif
 
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -71,17 +71,17 @@
 ## @end deftypefn
 
 function [x, flag, relres, iter, resvec] = cgs (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (ismatrix (A))
+    elseif (isnumeric (A) && ismatrix (A))
       Ax = @(x) A * x;
     elseif (isa (A, "function_handle"))
       Ax = @(x) feval (A, x);
     else
       error (["cgs: first argument is expected to "...
               "be a function or a square matrix"]);
     endif
 
@@ -92,29 +92,29 @@ function [x, flag, relres, iter, resvec]
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
     endif
 
     if (nargin < 5 || isempty (M1))
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
-    elseif (ismatrix (M1))
+    elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x = @(x) M1 \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
       error ("cgs: preconditioner is expected to be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
-    elseif (ismatrix (M2))
+    elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x = @(x) M2 \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
       error ("cgs: preconditioner is expected to be a function or matrix");
     endif
 
     precon = @(x) M2m1x (M1m1x (x));
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -75,17 +75,17 @@
 function [x, flag, relres, it, resvec] = gmres (A, b, restart, rtol, maxit, M1, M2, x0)
 
   if (nargin < 2 || nargin > 8)
     print_usage ();
   endif
 
   if (ischar (A))
     Ax = str2func (A);
-  elseif (ismatrix (A))
+  elseif (isnumeric (A) && ismatrix (A))
     Ax = @(x) A*x;
   elseif (isa (A, "function_handle"))
     Ax = A;
   else
     error ("gmres: A must be a function or matrix");
   endif
 
   if (nargin < 3 || isempty (restart))
@@ -99,29 +99,29 @@ function [x, flag, relres, it, resvec] =
   if (nargin < 5 || isempty (maxit))
     maxit = min (rows (b)/restart, 10);
   endif
 
   if (nargin < 6 || isempty (M1))
     M1m1x = @(x) x;
   elseif (ischar (M1))
     M1m1x = str2func (M1);
-  elseif (ismatrix (M1))
+  elseif (isnumeric (M1) && ismatrix (M1))
     M1m1x = @(x) M1 \ x;
   elseif (isa (M1, "function_handle"))
     M1m1x = M1;
   else
     error ("gmres: preconditioner M1 must be a function or matrix");
   endif
 
   if (nargin < 7 || isempty (M2))
     M2m1x = @(x) x;
   elseif (ischar (M2))
     M2m1x = str2func (M2);
-  elseif (ismatrix (M2))
+  elseif (isnumeric (M2) && ismatrix (M2))
     M2m1x = @(x) M2 \ x;
   elseif (isa (M2, "function_handle"))
     M2m1x = M2;
   else
     error ("gmres: preconditioner M2 must be a function or matrix");
   endif
 
   Pm1x = @(x) M2m1x (M1m1x (x));
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -93,17 +93,17 @@ function [x, flag, relres, iter, resvec]
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
-    elseif (ismatrix (A))
+    elseif (isnumeric (A) && ismatrix (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     else
       error (["qmr: first argument is expected to " ...
                 "be a function or a square matrix"]);
     endif
 
     if (nargin < 3 || isempty (tol))
@@ -119,17 +119,17 @@ function [x, flag, relres, iter, resvec]
       M1tm1x = M1m1x;
     elseif (ischar (M1))
       fun = str2func (M1);
       M1m1x  = @(x) feval (fun, x, "notransp");
       M1tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
-    elseif (ismatrix (M1))
+    elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     else
       error (["qmr: preconditioner is expected to " ...
                 "be a function or matrix"]);
     endif
 
     if (nargin < 6 || isempty (M2))
@@ -137,17 +137,17 @@ function [x, flag, relres, iter, resvec]
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
-    elseif (ismatrix (M2))
+    elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     else
       error (["qmr: preconditioner is expected to " ...
                 "be a function or matrix"]);
     endif
 
 
