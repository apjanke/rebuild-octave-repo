# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498514753 14400
#      Mon Jun 26 18:05:53 2017 -0400
# Node ID d396b5fd9199ddfa72cec15aa5a339aef4b83c2d
# Parent  a6e49930ddd2a81d1b1d9bedf21ecd8546c15366
move bind_ans to tree_evaluator class

* variables.h, variables.cc (bind_ans): Deprecate global function.
  Forward to tree_evaluator::bind_ans.

* pt-eval.h, pt-eval.cc (tree_evaluator::bind_ans): New function.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1898,51 +1898,17 @@ complex, nesting, persistent.
 {
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("whos");
 
   return do_who (interp, argc, argv, nargout == 1, true);
 }
 
-// Defining variables.
-
-void
-bind_ans (const octave_value& val, bool print)
-{
-  static std::string ans = "ans";
-
-  if (val.is_defined ())
-    {
-      if (val.is_cs_list ())
-        {
-          octave_value_list lst = val.list_value ();
-
-          for (octave_idx_type i = 0; i < lst.length (); i++)
-            bind_ans (lst(i), print);
-        }
-      else
-        {
-          octave::symbol_table::scope *scope
-            = octave::__get_current_scope__ ("bind_ans");
-
-          if (scope)
-            scope->force_assign (ans, val);
-
-          if (print)
-            {
-              octave_value_list args = ovl (val);
-              args.stash_name_tags (string_vector (ans));
-              octave::feval ("display", args);
-            }
-        }
-    }
-}
-
-void
+oid
 mlock (void)
 {
   octave::call_stack& cs = octave::__get_call_stack__ ("mlock");
 
   octave_function *fcn = cs.current ();
 
   if (! fcn)
     error ("mlock: invalid use outside a function");
@@ -2703,16 +2669,24 @@ should return an error message to be dis
 @end deftypefn */)
 {
   return SET_INTERNAL_VARIABLE (missing_component_hook);
 }
 
 // The following functions are deprecated.
 
 void
+bind_ans (const octave_value& val, bool print)
+{
+  octave::tree_evaluator& tw = octave::__get_evaluator__ ("bind_ans");
+
+  tw.bind_ans (val, print);
+}
+
+void
 clear_mex_functions (void)
 {
   octave::symbol_table& symtab = octave::__get_symbol_table__ ("clear_mex_functions");
 
   symtab.clear_mex_functions ();
 }
 
 void
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -113,24 +113,25 @@ set_internal_variable (int& var, const o
 
 #define SET_INTERNAL_VARIABLE_WITH_LIMITS(NM, MINVAL, MAXVAL)           \
   set_internal_variable (V ## NM, args, nargout, #NM, MINVAL, MAXVAL)
 
 // in the following, CHOICES must be a C string array terminated by null.
 #define SET_INTERNAL_VARIABLE_CHOICES(NM, CHOICES)              \
   set_internal_variable (V ## NM, args, nargout, #NM, CHOICES)
 
-extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
-
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void maybe_missing_function_hook (const std::string& name);
 
+OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::bind_ans' instead")
+extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
+
 OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_mex_functions' instead")
 extern OCTINTERP_API void clear_mex_functions (void);
 
 OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_function' instead")
 extern OCTINTERP_API void clear_function (const std::string& nm);
 
 OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_variable' instead")
 extern OCTINTERP_API void clear_variable (const std::string& nm);
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -5306,17 +5306,17 @@ namespace octave
                         do_bind_ans = (! id->is_variable ());
                       }
                     else
                       do_bind_ans = (! expr->is_assignment_expression ());
 
                     retval = tw.evaluate_n (expr, nargout);
 
                     if (do_bind_ans && ! retval.empty ())
-                      bind_ans (retval(0), expr->print_result ());
+                      tw.bind_ans (retval(0), expr->print_result ());
 
                     if (nargout == 0)
                       retval = octave_value_list ();
                   }
                 else if (nargout == 0)
                   parser.m_stmt_list->accept (tw);
                 else
                   error ("eval: invalid use of statement list");
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2524,16 +2524,46 @@ namespace octave
 
         m_call_stack.set_location (until_line, until_column);
 
         if (is_logically_true (expr, "do-until"))
           break;
       }
   }
 
+  void tree_evaluator::bind_ans (const octave_value& val, bool print)
+  {
+    static std::string ans = "ans";
+
+    if (val.is_defined ())
+      {
+        if (val.is_cs_list ())
+          {
+            octave_value_list lst = val.list_value ();
+
+            for (octave_idx_type i = 0; i < lst.length (); i++)
+              bind_ans (lst(i), print);
+          }
+        else
+          {
+            symbol_table::scope *scope
+              = m_interpreter.require_current_scope ("tree_evaluator::bind_ans");
+
+            scope->force_assign (ans, val);
+
+            if (print)
+              {
+                octave_value_list args = ovl (val);
+                args.stash_name_tags (string_vector (ans));
+                feval ("display", args);
+              }
+          }
+      }
+  }
+
   void
   tree_evaluator::do_breakpoint (tree_statement& stmt) const
   {
     do_breakpoint (stmt.is_breakpoint (true), stmt.is_end_of_fcn_or_script ());
   }
 
   void
   tree_evaluator::do_breakpoint (bool is_breakpoint,
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -204,16 +204,18 @@ namespace octave
 
     void do_unwind_protect_cleanup_code (tree_statement_list *list);
 
     void visit_unwind_protect_command (tree_unwind_protect_command&);
 
     void visit_while_command (tree_while_command&);
     void visit_do_until_command (tree_do_until_command&);
 
+    void bind_ans (const octave_value& val, bool print);
+
     static void reset_debug_state (void);
 
     static bool statement_printing_enabled (void);
 
     // If > 0, stop executing at the (N-1)th stopping point, counting
     //         from the the current execution point in the current frame.
     //
     // If < 0, stop executing at the next possible stopping point.
