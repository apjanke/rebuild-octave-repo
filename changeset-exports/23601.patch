# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497214620 14400
#      Sun Jun 11 16:57:00 2017 -0400
# Node ID a3898679d4598820532fdf3eead5242f2a9b47fc
# Parent  db947ba52118fee0ba482c1a3a888de2dc2248ef
eliminate unused dup methods in parse tree classes

Now that anonymous functions can only contain a single expression,
none of these are needed.

* pt-cmd.cc: Delete file containing only unused methods.
* libinterp/parse-tree/module.mk: Update.

* pt-classdef.cc, pt-classdef.h, pt-cmd.h, pt-decl.cc, pt-decl.h,
pt-except.cc, pt-except.h, pt-jump.cc, pt-jump.h, pt-loop.cc,
pt-loop.h, pt-misc.cc, pt-misc.h, pt-select.cc, pt-select.h,
pt-stmt.cc, pt-stmt.h: Delete unused dup methods.

diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -57,17 +57,16 @@ PARSE_TREE_SRC = \
   %reldir%/pt-array-list.cc \
   %reldir%/pt-assign.cc \
   %reldir%/pt-binop.cc \
   %reldir%/pt-bp.cc \
   %reldir%/pt-cbinop.cc \
   %reldir%/pt-cell.cc \
   %reldir%/pt-check.cc \
   %reldir%/pt-classdef.cc \
-  %reldir%/pt-cmd.cc \
   %reldir%/pt-colon.cc \
   %reldir%/pt-const.cc \
   %reldir%/pt-decl.cc \
   %reldir%/pt-eval.cc \
   %reldir%/pt-except.cc \
   %reldir%/pt-exp.cc \
   %reldir%/pt-fcn-handle.cc \
   %reldir%/pt-funcall.cc \
diff --git a/libinterp/parse-tree/pt-classdef.cc b/libinterp/parse-tree/pt-classdef.cc
--- a/libinterp/parse-tree/pt-classdef.cc
+++ b/libinterp/parse-tree/pt-classdef.cc
@@ -149,17 +149,9 @@ namespace octave
   {
     cdef_class cls = cdef_class::make_meta_class (interp, this, is_at_folder);
 
     if (cls.ok ())
       return cls.get_constructor_function ();
 
     return 0;
   }
-
-  tree_classdef *
-  tree_classdef::dup (symbol_table::scope_id,
-                      symbol_table::context_id) const
-  {
-    // FIXME
-    return 0;
-  }
 }
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -669,19 +669,16 @@ namespace octave
     octave_comment_list * leading_comment (void) { return lead_comm; }
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
     const std::string& package_name (void) const { return pack_name; }
 
     octave_function * make_meta_class (interpreter& interp,
                                        bool is_at_folder = false);
 
-    tree_classdef * dup (symbol_table::scope_id scope,
-                         symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_classdef (*this);
     }
 
   private:
 
     tree_classdef_attribute_list *attr_list;
diff --git a/libinterp/parse-tree/pt-cmd.cc b/libinterp/parse-tree/pt-cmd.cc
deleted file mode 100644
--- a/libinterp/parse-tree/pt-cmd.cc
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
-
-Copyright (C) 1994-2017 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "pt-cmd.h"
-#include "pt-walk.h"
-
-namespace octave
-{
-  // No-op.
-
-  tree_command *
-  tree_no_op_command::dup (symbol_table::scope_id,
-                           symbol_table::context_id) const
-  {
-    return new tree_no_op_command (orig_cmd, is_end_of_file (),
-                                   line (), column ());
-  }
-
-  // Function definition.
-
-  tree_command *
-  tree_function_def::dup (symbol_table::scope_id,
-                          symbol_table::context_id) const
-  {
-    return new tree_function_def (fcn, line (), column ());
-  }
-}
diff --git a/libinterp/parse-tree/pt-cmd.h b/libinterp/parse-tree/pt-cmd.h
--- a/libinterp/parse-tree/pt-cmd.h
+++ b/libinterp/parse-tree/pt-cmd.h
@@ -46,19 +46,16 @@ namespace octave
 
     // No copying!
 
     tree_command (const tree_command&) = delete;
 
     tree_command& operator = (const tree_command&) = delete;
 
     virtual ~tree_command (void) = default;
-
-    virtual tree_command * dup (symbol_table::scope_id,
-                                symbol_table::context_id context) const = 0;
   };
 
   // No-op.
 
   class tree_no_op_command : public tree_command
   {
   public:
 
@@ -69,19 +66,16 @@ namespace octave
     // No copying!
 
     tree_no_op_command (const tree_no_op_command&) = delete;
 
     tree_no_op_command& operator = (const tree_no_op_command&) = delete;
 
     ~tree_no_op_command (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_no_op_command (*this);
     }
 
     bool is_end_of_fcn_or_script (void) const
     {
       return (orig_cmd == "endfunction" || orig_cmd == "endscript");
@@ -110,19 +104,16 @@ namespace octave
     // No copying!
 
     tree_function_def (const tree_function_def&) = delete;
 
     tree_function_def& operator = (const tree_function_def&) = delete;
 
     ~tree_function_def (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_function_def (*this);
     }
 
     octave_value function (void) { return fcn; }
 
   private:
diff --git a/libinterp/parse-tree/pt-decl.cc b/libinterp/parse-tree/pt-decl.cc
--- a/libinterp/parse-tree/pt-decl.cc
+++ b/libinterp/parse-tree/pt-decl.cc
@@ -52,28 +52,16 @@ namespace octave
                       symbol_table::context_id context) const
   {
     return new tree_decl_elt (id ? id->dup (scope, context) : 0,
                               expr ? expr->dup (scope, context) : 0);
   }
 
   // Initializer lists for declaration statements.
 
-  tree_decl_init_list *
-  tree_decl_init_list::dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const
-  {
-    tree_decl_init_list *new_dil = new tree_decl_init_list ();
-
-    for (const tree_decl_elt *elt : *this)
-      new_dil->append (elt ? elt->dup (scope, context) : 0);
-
-    return new_dil;
-  }
-
   // Declaration commands (global, static).
 
   tree_decl_command::tree_decl_command (const std::string& n,
                                         tree_decl_init_list *t, int l, int c)
     : tree_command (l, c), cmd_name (n), init_list (t)
   {
     if (t)
       {
@@ -86,19 +74,9 @@ namespace octave
                  cmd_name.c_str ());
       }
   }
 
   tree_decl_command::~tree_decl_command (void)
   {
     delete init_list;
   }
-
-  tree_command *
-  tree_decl_command::dup (symbol_table::scope_id scope,
-                          symbol_table::context_id context) const
-  {
-    tree_decl_init_list *new_init_list
-      = init_list ? init_list->dup (scope, context) : 0;
-
-    return new tree_decl_command (name (), new_init_list, line (), column ());
-  }
 }
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -143,19 +143,16 @@ namespace octave
     }
 
     void mark_persistent (void)
     {
       for (tree_decl_elt *elt : *this)
         elt->mark_persistent ();
     }
 
-    tree_decl_init_list * dup (symbol_table::scope_id scope,
-                               symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_decl_init_list (*this);
     }
   };
 
   // Base class for declaration commands -- global, static, etc.
 
@@ -188,19 +185,16 @@ namespace octave
       if (init_list)
         init_list->mark_persistent ();
     }
 
     tree_decl_init_list * initializer_list (void) { return init_list; }
 
     std::string name (void) const { return cmd_name; }
 
-    tree_command *dup (symbol_table::scope_id scope,
-                       symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_decl_command (*this);
     }
 
   private:
 
     // The name of this command -- global, static, etc.
diff --git a/libinterp/parse-tree/pt-except.cc b/libinterp/parse-tree/pt-except.cc
--- a/libinterp/parse-tree/pt-except.cc
+++ b/libinterp/parse-tree/pt-except.cc
@@ -49,46 +49,19 @@ namespace octave
     delete expr_id;
     delete try_code;
     delete catch_code;
     delete lead_comm;
     delete mid_comm;
     delete trail_comm;
   }
 
-  tree_command *
-  tree_try_catch_command::dup (symbol_table::scope_id scope,
-                               symbol_table::context_id context) const
-  {
-    return new
-      tree_try_catch_command (try_code ? try_code->dup (scope, context) : 0,
-                              catch_code ? catch_code->dup (scope, context) : 0,
-                              expr_id ? expr_id->dup (scope, context) : 0,
-                              lead_comm ? lead_comm->dup () : 0,
-                              mid_comm ? mid_comm->dup () : 0,
-                              trail_comm ? trail_comm->dup () : 0,
-                              line (), column ());
-  }
-
   // Simple exception handling.
 
   tree_unwind_protect_command::~tree_unwind_protect_command (void)
   {
     delete unwind_protect_code;
     delete cleanup_code;
     delete lead_comm;
     delete mid_comm;
     delete trail_comm;
   }
-
-  tree_command *
-  tree_unwind_protect_command::dup (symbol_table::scope_id scope,
-                                    symbol_table::context_id context) const
-  {
-    return new tree_unwind_protect_command
-      (unwind_protect_code ? unwind_protect_code->dup (scope, context) : 0,
-       cleanup_code ? cleanup_code->dup (scope, context) : 0,
-       lead_comm ? lead_comm->dup () : 0,
-       mid_comm ? mid_comm->dup () : 0,
-       trail_comm ? trail_comm->dup () : 0,
-       line (), column ());
-  }
 }
diff --git a/libinterp/parse-tree/pt-except.h b/libinterp/parse-tree/pt-except.h
--- a/libinterp/parse-tree/pt-except.h
+++ b/libinterp/parse-tree/pt-except.h
@@ -69,19 +69,16 @@ namespace octave
     tree_statement_list * cleanup (void) { return catch_code; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * middle_comment (void) { return mid_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_try_catch_command (*this);
     }
 
   private:
 
     // The first block of code to attempt to execute.
@@ -136,19 +133,16 @@ namespace octave
     tree_statement_list * cleanup (void) { return cleanup_code; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * middle_comment (void) { return mid_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_unwind_protect_command (*this);
     }
 
   private:
 
     // The first body of code to attempt to execute.
diff --git a/libinterp/parse-tree/pt-jump.cc b/libinterp/parse-tree/pt-jump.cc
--- a/libinterp/parse-tree/pt-jump.cc
+++ b/libinterp/parse-tree/pt-jump.cc
@@ -34,39 +34,18 @@ class octave_value_list;
 
 namespace octave
 {
   // Break.
 
   // Nonzero means we're breaking out of a loop or function body.
   int tree_break_command::breaking = 0;
 
-  tree_command *
-  tree_break_command::dup (symbol_table::scope_id,
-                           symbol_table::context_id) const
-  {
-    return new tree_break_command (line (), column ());
-  }
-
   // Continue.
 
   // Nonzero means we're jumping to the end of a loop.
   int tree_continue_command::continuing = 0;
 
-  tree_command *
-  tree_continue_command::dup (symbol_table::scope_id,
-                              symbol_table::context_id) const
-  {
-    return new tree_continue_command (line (), column ());
-  }
-
   // Return.
 
   // Nonzero means we're returning from a function.
   int tree_return_command::returning = 0;
-
-  tree_command *
-  tree_return_command::dup (symbol_table::scope_id,
-                            symbol_table::context_id) const
-  {
-    return new tree_return_command (line (), column ());
-  }
 }
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -43,19 +43,16 @@ namespace octave
     // No copying!
 
     tree_break_command (const tree_break_command&) = delete;
 
     tree_break_command& operator = (const tree_break_command&) = delete;
 
     ~tree_break_command (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_break_command (*this);
     }
 
     static int breaking;
   };
 
@@ -71,19 +68,16 @@ namespace octave
     // No copying!
 
     tree_continue_command (const tree_continue_command&) = delete;
 
     tree_continue_command& operator = (const tree_continue_command&) = delete;
 
     ~tree_continue_command (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_continue_command (*this);
     }
 
     static int continuing;
   };
 
@@ -99,19 +93,16 @@ namespace octave
     // No copying!
 
     tree_return_command (const tree_return_command&) = delete;
 
     tree_return_command& operator = (const tree_return_command&) = delete;
 
     ~tree_return_command (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_return_command (*this);
     }
 
     static int returning;
   };
 }
diff --git a/libinterp/parse-tree/pt-loop.cc b/libinterp/parse-tree/pt-loop.cc
--- a/libinterp/parse-tree/pt-loop.cc
+++ b/libinterp/parse-tree/pt-loop.cc
@@ -52,81 +52,32 @@ namespace octave
     delete list;
     delete lead_comm;
     delete trail_comm;
 #if defined (HAVE_LLVM)
     delete compiled;
 #endif
   }
 
-  tree_command *
-  tree_while_command::dup (symbol_table::scope_id scope,
-                           symbol_table::context_id context) const
-  {
-    return new tree_while_command (expr ? expr->dup (scope, context) : 0,
-                                   list ? list->dup (scope, context) : 0,
-                                   lead_comm ? lead_comm->dup () : 0,
-                                   trail_comm ? trail_comm->dup (): 0,
-                                   line (), column ());
-  }
-
-  // Do-Until
-
-  tree_command *
-  tree_do_until_command::dup (symbol_table::scope_id scope,
-                              symbol_table::context_id context) const
-  {
-    return new tree_do_until_command (expr ? expr->dup (scope, context) : 0,
-                                      list ? list->dup (scope, context) : 0,
-                                      lead_comm ? lead_comm->dup () : 0,
-                                      trail_comm ? trail_comm->dup (): 0,
-                                      line (), column ());
-  }
-
   // For.
 
   tree_simple_for_command::~tree_simple_for_command (void)
   {
     delete lhs;
     delete expr;
     delete maxproc;
     delete list;
     delete lead_comm;
     delete trail_comm;
 #if defined (HAVE_LLVM)
     delete compiled;
 #endif
   }
 
-  tree_command *
-  tree_simple_for_command::dup (symbol_table::scope_id scope,
-                                symbol_table::context_id context) const
-  {
-    return new tree_simple_for_command
-      (parallel, lhs ? lhs->dup (scope, context) : 0,
-       expr ? expr->dup (scope, context) : 0,
-       maxproc ? maxproc->dup (scope, context) : 0,
-       list ? list->dup (scope, context) : 0,
-       lead_comm ? lead_comm->dup () : 0,
-       trail_comm ? trail_comm->dup () : 0, line (), column ());
-  }
-
   tree_complex_for_command::~tree_complex_for_command (void)
   {
     delete lhs;
     delete expr;
     delete list;
     delete lead_comm;
     delete trail_comm;
   }
-
-  tree_command *
-  tree_complex_for_command::dup (symbol_table::scope_id scope,
-                                 symbol_table::context_id context) const
-  {
-    return new tree_complex_for_command (lhs ? lhs->dup (scope, context) : 0,
-                                         expr ? expr->dup (scope, context) : 0,
-                                         list ? list->dup (scope, context) : 0,
-                                         lead_comm ? lead_comm->dup () : 0,
-                                         trail_comm ? trail_comm->dup () : 0,
-                                         line (), column ());
-  }
 }
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -87,19 +87,16 @@ namespace octave
     tree_expression * condition (void) { return expr; }
 
     tree_statement_list * body (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_while_command (*this);
     }
 
 #if defined (HAVE_LLVM)
     // some functions use by tree_jit
     jit_info * get_info (void) const
@@ -159,19 +156,16 @@ namespace octave
     // No copying!
 
     tree_do_until_command (const tree_do_until_command&) = delete;
 
     tree_do_until_command& operator = (const tree_do_until_command&) = delete;
 
     ~tree_do_until_command (void) = default;
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_do_until_command (*this);
     }
   };
 
   // For.
 
@@ -219,19 +213,16 @@ namespace octave
     tree_expression * maxproc_expr (void) { return maxproc; }
 
     tree_statement_list * body (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_simple_for_command (*this);
     }
 
 #if defined (HAVE_LLVM)
     // some functions use by tree_jit
     jit_info * get_info (void) const
@@ -304,19 +295,16 @@ namespace octave
     tree_expression * control_expr (void) { return expr; }
 
     tree_statement_list * body (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_complex_for_command (*this);
     }
 
   private:
 
     // Expression to modify.
diff --git a/libinterp/parse-tree/pt-misc.cc b/libinterp/parse-tree/pt-misc.cc
--- a/libinterp/parse-tree/pt-misc.cc
+++ b/libinterp/parse-tree/pt-misc.cc
@@ -161,21 +161,9 @@ namespace octave
   {
     while (! empty ())
       {
         iterator p = begin ();
         delete *p;
         erase (p);
       }
   }
-
-  tree_return_list *
-  tree_return_list::dup (symbol_table::scope_id scope,
-                         symbol_table::context_id context) const
-  {
-    tree_return_list *new_list = new tree_return_list ();
-
-    for (const tree_index_expression *elt : *this)
-      new_list->append (elt->dup (scope, context));
-
-    return new_list;
-  }
 }
diff --git a/libinterp/parse-tree/pt-misc.h b/libinterp/parse-tree/pt-misc.h
--- a/libinterp/parse-tree/pt-misc.h
+++ b/libinterp/parse-tree/pt-misc.h
@@ -109,19 +109,16 @@ namespace octave
     // No copying!
 
     tree_return_list (const tree_return_list&) = delete;
 
     tree_return_list& operator = (const tree_return_list&) = delete;
 
     ~tree_return_list (void);
 
-    tree_return_list * dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_return_list (*this);
     }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
diff --git a/libinterp/parse-tree/pt-select.cc b/libinterp/parse-tree/pt-select.cc
--- a/libinterp/parse-tree/pt-select.cc
+++ b/libinterp/parse-tree/pt-select.cc
@@ -41,103 +41,36 @@ namespace octave
 
   tree_if_clause::~tree_if_clause (void)
   {
     delete expr;
     delete list;
     delete lead_comm;
   }
 
-  tree_if_clause *
-  tree_if_clause::dup (symbol_table::scope_id scope,
-                       symbol_table::context_id context) const
-  {
-    return new tree_if_clause (expr ? expr->dup (scope, context) : 0,
-                               list ? list->dup (scope, context) : 0,
-                               lead_comm ? lead_comm->dup () : 0);
-  }
-
-  // List of if commands.
-
-  tree_if_command_list *
-  tree_if_command_list::dup (symbol_table::scope_id scope,
-                             symbol_table::context_id context) const
-  {
-    tree_if_command_list *new_icl = new tree_if_command_list ();
-
-    for (const tree_if_clause *elt : *this)
-      new_icl->append (elt ? elt->dup (scope, context) : 0);
-
-    return new_icl;
-  }
-
   // If.
 
   tree_if_command::~tree_if_command (void)
   {
     delete list;
     delete lead_comm;
     delete trail_comm;
   }
 
-  tree_command *
-  tree_if_command::dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const
-  {
-    return new tree_if_command (list ? list->dup (scope, context) : 0,
-                                lead_comm ? lead_comm->dup () : 0,
-                                trail_comm ? trail_comm->dup () : 0,
-                                line (), column ());
-  }
-
   // Switch cases.
 
   tree_switch_case::~tree_switch_case (void)
   {
     delete label;
     delete list;
     delete lead_comm;
   }
 
-  tree_switch_case *
-  tree_switch_case::dup (symbol_table::scope_id scope,
-                         symbol_table::context_id context) const
-  {
-    return new tree_switch_case (label ? label->dup (scope, context) : 0,
-                                 list ? list->dup (scope, context) : 0,
-                                 lead_comm ? lead_comm->dup () : 0);
-  }
-
-  // List of switch cases.
-
-  tree_switch_case_list *
-  tree_switch_case_list::dup (symbol_table::scope_id scope,
-                              symbol_table::context_id context) const
-  {
-    tree_switch_case_list *new_scl = new tree_switch_case_list ();
-
-    for (const tree_switch_case *elt : *this)
-      new_scl->append (elt ? elt->dup (scope, context) : 0);
-
-    return new_scl;
-  }
-
   // Switch.
 
   tree_switch_command::~tree_switch_command (void)
   {
     delete expr;
     delete list;
     delete lead_comm;
     delete trail_comm;
   }
-
-  tree_command *
-  tree_switch_command::dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const
-  {
-    return new tree_switch_command (expr ? expr->dup (scope, context) : 0,
-                                    list ? list->dup (scope, context) : 0,
-                                    lead_comm ? lead_comm->dup () : 0,
-                                    trail_comm ? trail_comm->dup () : 0,
-                                    line (), column ());
-  }
 }
diff --git a/libinterp/parse-tree/pt-select.h b/libinterp/parse-tree/pt-select.h
--- a/libinterp/parse-tree/pt-select.h
+++ b/libinterp/parse-tree/pt-select.h
@@ -65,19 +65,16 @@ namespace octave
     bool is_else_clause (void) { return ! expr; }
 
     tree_expression * condition (void) { return expr; }
 
     tree_statement_list * commands (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
-    tree_if_clause * dup (symbol_table::scope_id scope,
-                          symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_if_clause (*this);
     }
 
   private:
 
     // The condition to test.
@@ -109,19 +106,16 @@ namespace octave
       while (! empty ())
         {
           iterator p = begin ();
           delete *p;
           erase (p);
         }
     }
 
-    tree_if_command_list * dup (symbol_table::scope_id scope,
-                                symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_if_command_list (*this);
     }
   };
 
   class tree_if_command : public tree_command
   {
@@ -143,19 +137,16 @@ namespace octave
     ~tree_if_command (void);
 
     tree_if_command_list * cmd_list (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_if_command (*this);
     }
 
   private:
 
     // List of if commands (if, elseif, elseif, ... else, endif)
@@ -197,19 +188,16 @@ namespace octave
     bool is_default_case (void) { return ! label; }
 
     tree_expression * case_label (void) { return label; }
 
     tree_statement_list * commands (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
-    tree_switch_case * dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_switch_case (*this);
     }
 
   private:
 
     // The case label.
@@ -241,19 +229,16 @@ namespace octave
       while (! empty ())
         {
           iterator p = begin ();
           delete *p;
           erase (p);
         }
     }
 
-    tree_switch_case_list * dup (symbol_table::scope_id scope,
-                                 symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_switch_case_list (*this);
     }
   };
 
   class tree_switch_command : public tree_command
   {
@@ -280,19 +265,16 @@ namespace octave
     tree_expression * switch_value (void) { return expr; }
 
     tree_switch_case_list * case_list (void) { return list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
 
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_switch_command (*this);
     }
 
   private:
 
     // Value on which to switch.
diff --git a/libinterp/parse-tree/pt-stmt.cc b/libinterp/parse-tree/pt-stmt.cc
--- a/libinterp/parse-tree/pt-stmt.cc
+++ b/libinterp/parse-tree/pt-stmt.cc
@@ -162,31 +162,16 @@ namespace octave
 
         if (no_op_cmd)
           retval = no_op_cmd->is_end_of_file ();
       }
 
     return retval;
   }
 
-  tree_statement *
-  tree_statement::dup (symbol_table::scope_id scope,
-                       symbol_table::context_id context) const
-  {
-    tree_statement *new_stmt = new tree_statement ();
-
-    new_stmt->cmd = (cmd ? cmd->dup (scope, context) : 0);
-
-    new_stmt->expr = (expr ? expr->dup (scope, context) : 0);
-
-    new_stmt->comm = (comm ? comm->dup () : 0);
-
-    return new_stmt;
-  }
-
   // Create a "breakpoint" tree-walker, and get it to "walk" this statement list
   // (FIXME: What does that do???)
   int
   tree_statement_list::set_breakpoint (int line, const std::string& condition)
   {
     tree_breakpoint tbp (line, tree_breakpoint::set, condition);
     accept (tbp);
 
@@ -291,23 +276,9 @@ namespace octave
         retval[i] = lineno;
 
         if (! file.empty ())
           octave_link::update_breakpoint (false, file, lineno);
       }
 
     return retval;
   }
-
-  tree_statement_list *
-  tree_statement_list::dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const
-  {
-    tree_statement_list *new_list = new tree_statement_list ();
-
-    new_list->function_body = function_body;
-
-    for (const tree_statement *elt : *this)
-      new_list->append (elt ? elt->dup (scope, context) : 0);
-
-    return new_list;
-  }
 }
diff --git a/libinterp/parse-tree/pt-stmt.h b/libinterp/parse-tree/pt-stmt.h
--- a/libinterp/parse-tree/pt-stmt.h
+++ b/libinterp/parse-tree/pt-stmt.h
@@ -102,19 +102,16 @@ namespace octave
     // Allow modification of this statement.  Note that there is no
     // checking.  If you use these, are you sure you knwo what you are
     // doing?
 
     void set_command (tree_command *c) { cmd = c; }
 
     void set_expression (tree_expression *e) { expr = e; }
 
-    tree_statement * dup (symbol_table::scope_id scope,
-                          symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_statement (*this);
     }
 
   private:
 
     // Only one of cmd or expr can be valid at once.
@@ -180,19 +177,16 @@ namespace octave
     std::list<bp_type> breakpoints_and_conds (void);
 
     bp_table::intmap add_breakpoint (const std::string& file,
                                      const bp_table::intmap& line,
                                      const std::string& condition);
 
     bp_table::intmap remove_all_breakpoints (const std::string& file);
 
-    tree_statement_list * dup (symbol_table::scope_id scope,
-                               symbol_table::context_id context) const;
-
     void accept (tree_walker& tw)
     {
       tw.visit_statement_list (*this);
     }
 
   private:
 
     // Does this list of statements make up the body of a function?
