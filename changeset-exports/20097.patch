# HG changeset patch
# User Rafael Laboissiere <rafael@laboissiere.net>
# Date 1429437210 10800
#      Sun Apr 19 06:53:30 2015 -0300
# Node ID 1f9ed81bd17311337c8b9940e3067ee265d313be
# Parent  bb59bdbdb8acdefbe8030bd502ff5b53688e410b
maint: Fix spelling and grammar mistakes in docs and comments (bug #44878)

* NEWS, io.txi, file-io.cc, jit-ir.h, jit-typeinfo.h, ls-oct-binary.cc:
Fix misspellings of "compatibility" and "compatible".

* bsxfun.cc, file-io.cc, ov-base.h, oct-shlib.h, mesh.m: Fix
misspellings of "overridden".

* emacs.txi, image.txi, graphics.cc, __magick_read__.cc: Replace verb
phrase "allows to" with "allows one to".

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -69,17 +69,17 @@ Summary of important user-visible change
     is now enabled by default and the warning ID
 
       Octave:noninteger-range-as-index
 
     is now set to "on" by default instead of "error" by default and "on"
     for --traditional.
 
  ** The "backtrace" warning option is now enabled by default.  This change
-    was made for Matlab compatability.
+    was made for Matlab compatibility.
 
  ** For compatibility with Matlab, the "ismatrix (x)" function now only checks
     the dimension of "x".  The old behaviour of "ismatrix" is obtained by
     "isnumeric (x) || islogical (x) || ischar (x)".
 
  ** The nextpow2 function behaviour has been changed for vector inputs.
     Instead of computing `nextpow2 (length (x))', it will now compute
     nextpow2 for each element of the input.  This change is Matlab compatible,
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -501,16 +501,16 @@ If @file{gnuserv} is installed, add the 
 (gnuserv-start)
 @end lisp
 @noindent
 to your @file{.emacs} file.
 
 You can use either `plain' Emacs Info or the function @code{octave-help}
 as your Octave info reader (for @samp{help -i}).  In the former case,
 use @code{info_program ("info-emacs-info")}.
-The latter is perhaps more attractive because it allows to look up keys
+The latter is perhaps more attractive because it allows one to look up keys
 in the indices of @emph{several} info files related to Octave (provided
 that the Emacs variable @code{octave-help-files} is set correctly).  In
 this case, use @code{info_program ("info-emacs-octave-help")}.
 
 If you use Octave from within Emacs, it is best to add these settings to
 your @file{~/.emacs-octave} startup file (or the file pointed to by the
 Emacs variable @code{inferior-octave-startup-file}).
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -79,21 +79,21 @@ file.
 By default, Octave's image IO functions (@code{imread}, @code{imwrite},
 and @code{imfinfo}) use the @code{GraphicsMagick} library for their
 operations.  This means a vast number of image formats is supported
 but considering the large amount of image formats in science and
 its commonly closed nature, it is impossible to have a library
 capable of reading them all.  Because of this, the function
 @code{imformats} keeps a configurable list of available formats,
 their extensions, and what functions should the image IO functions
-use.  This allows to expand Octave's image IO capabilities by
+use.  This allows one to expand Octave's image IO capabilities by
 creating functions aimed at acting on specific file formats.
 
 While it would be possible to call the extra functions directly,
-properly configuring Octave with @code{imformats} allows to keep a
+properly configuring Octave with @code{imformats} allows one to keep a
 consistent code that is abstracted from file formats.
 
 It is important to note that a file format is not actually defined by its
 file extension and that @code{GraphicsMagick} is capable to read and write
 more file formats than the ones listed by @code{imformats}.  What this
 means is that even with an incorrect or missing extension the image may
 still be read correctly, and that even unlisted formats are not necessarily
 unsupported.
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -387,17 +387,17 @@ the line @samp{Free Software is needed f
 
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
 modeled after the C language functions of the same name, but they
 interpret the format template differently in order to improve the
 performance of printing vector and matrix values.
 
-Implementation Note: For compatability with @sc{matlab}, escape sequences in
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in
 the template string (e.g., @qcode{"\n"} => newline) are expanded even
 when the template string is defined with single quotes.
 
 @DOCSTRING(printf)
 
 @DOCSTRING(fprintf)
 
 @DOCSTRING(sprintf)
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -354,17 +354,17 @@ dimensionality as the other array.\n\
 
       const octave_value A = args(1);
       const octave_value B = args(2);
 
       if (func.is_builtin_function ()
           || (func.is_function_handle ()
               && ! A.is_object () && ! B.is_object ()))
         {
-          // This may break if the default behavior is overriden.  But if you
+          // This may break if the default behavior is overridden.  But if you
           // override arithmetic operators for builtin classes, you should
           // expect mayhem anyway (constant folding etc).  Querying
           // is_overloaded() may not be exactly what we need here.
           octave_function *fcn_val = func.function_value ();
           if (fcn_val)
             {
               octave_value tmp = maybe_optimized_builtin (fcn_val->name (),
                                                           A, B);
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -884,17 +884,17 @@ DEFUN (fprintf, args, nargout,
 This function is equivalent to @code{printf}, except that the output is\n\
 written to the file descriptor @var{fid} instead of @code{stdout}.\n\
 \n\
 If @var{fid} is omitted, the output is written to @code{stdout} making the\n\
 function exactly equivalent to @code{printf}.\n\
 \n\
 The optional output returns the number of bytes written to the file.\n\
 \n\
-Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
 the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
 when the template string is defined with single quotes.\n\
 @seealso{fputs, fdisp, fwrite, fscanf, printf, sprintf, fopen}\n\
 @end deftypefn")
 {
   static std::string who = "fprintf";
 
   octave_value retval;
@@ -954,17 +954,17 @@ Print optional arguments under the contr
 @var{template} to the stream @code{stdout} and return the number of\n\
 characters printed.\n\
 @ifclear OCTAVE_MANUAL\n\
 \n\
 See the Formatted Output section of the GNU Octave manual for a\n\
 complete description of the syntax of the template string.\n\
 @end ifclear\n\
 \n\
-Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
 the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
 when the template string is defined with single quotes.\n\
 @seealso{fprintf, sprintf, scanf}\n\
 @end deftypefn")
 {
   static std::string who = "printf";
 
   octave_value retval;
@@ -1063,17 +1063,17 @@ DEFUN (sprintf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\n\
 This is like @code{printf}, except that the output is returned as a\n\
 string.  Unlike the C library function, which requires you to provide a\n\
 suitably sized string as an argument, Octave's @code{sprintf} function\n\
 returns the string, automatically sized to hold all of the items\n\
 converted.\n\
 \n\
-Implementation Note: For compatability with @sc{matlab}, escape sequences in\n\
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
 the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
 when the template string is defined with single quotes.\n\
 @seealso{printf, fprintf, sscanf}\n\
 @end deftypefn")
 {
   static std::string who = "sprintf";
 
   octave_value_list retval;
@@ -2284,17 +2284,17 @@ const_value (const char *, const octave_
 DEFUNX ("P_tmpdir", FP_tmpdir, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} P_tmpdir ()\n\
 Return the name of the host system's @strong{default} directory for\n\
 temporary files.\n\
 \n\
 Programming Note: The value returned by @code{P_tmpdir} is always the\n\
 default location.  This value may not agree with that returned from\n\
-@code{tempdir} if the user has overriden the default with the @env{TMPDIR}\n\
+@code{tempdir} if the user has overridden the default with the @env{TMPDIR}\n\
 environment variable.\n\
 @seealso{tempdir, tempname, mkstemp, tmpfile}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11556,18 +11556,18 @@ A color property.  @var{arg} contains th
 When no default color is given, the property is set to black.\n\
 An optional second string argument may be given to specify an\n\
 additional set of accepted string values (like a radio property).\n\
 @end table\n\
 \n\
 @var{type} may also be the concatenation of a core object type and\n\
 a valid property name for that object type.  The property created\n\
 then has the same characteristics as the referenced property (type,\n\
-possible values, hidden state@dots{}).  This allows to clone an existing\n\
-property into the graphics object @var{h}.\n\
+possible values, hidden state@dots{}).  This allows one to clone an\n\
+existing property into the graphics object @var{h}.\n\
 \n\
 Examples:\n\
 \n\
 @example\n\
 @group\n\
 addproperty (\"my_property\", gcf, \"string\", \"a string value\");\n\
 addproperty (\"my_radio\", gcf, \"radio\", \"val_1|val_2|@{val_3@}\");\n\
 addproperty (\"my_style\", gcf, \"linelinestyle\", \"--\");\n\
diff --git a/libinterp/corefcn/jit-ir.h b/libinterp/corefcn/jit-ir.h
--- a/libinterp/corefcn/jit-ir.h
+++ b/libinterp/corefcn/jit-ir.h
@@ -561,17 +561,17 @@ public:
     : mvisit_count (avisit_count), mid (NO_ID), idom (0), mname (aname),
       malive (false)
   { }
 
   virtual void replace_with (jit_value *value);
 
   void replace_in_phi (jit_block *ablock, jit_block *with);
 
-  // we have a new internal list, but we want to stay compatable with jit_value
+  // we have a new internal list, but we want to stay compatible with jit_value
   jit_use *first_use (void) const { return jit_value::first_use (); }
 
   size_t use_count (void) const { return jit_value::use_count (); }
 
   // if a block is alive, then it might be visited during execution
   bool alive (void) const { return malive; }
 
   void mark_alive (void) { malive = true; }
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 
 // Defines the type system used by jit and a singleton class, jit_typeinfo, to
 // manage the types.
 //
 // FIXME:
 // Operations are defined and implemented in jit_typeinfo.  Eventually they
 // should be moved elsewhere. (just like with octave_typeinfo)
 
-// jit_range is compatable with the llvm range structure
+// jit_range is compatible with the llvm range structure
 struct
 jit_range
 {
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
                                   inc (from.inc ()), nelem (from.nelem ())
   { }
 
   operator Range () const
@@ -58,17 +58,17 @@ jit_range
   double base;
   double limit;
   double inc;
   octave_idx_type nelem;
 };
 
 std::ostream& operator << (std::ostream& os, const jit_range& rng);
 
-// jit_array is compatable with the llvm array/matrix structures
+// jit_array is compatible with the llvm array/matrix structures
 template <typename T, typename U>
 struct
 jit_array
 {
   jit_array () : array (0) { }
 
   jit_array (T& from) : array (new T (from))
   {
diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -202,17 +202,17 @@ read_binary_data (std::istream& is, bool
     case 4:
       tc = octave_value_typeinfo::lookup_type ("complex matrix");
       break;
 
     case 5:
       {
         // FIXME:
         // This is cruft, since its for a save type that is old. Maybe
-        // this is taking backward compatability too far!!
+        // this is taking backward compatibility too far!!
         int32_t len;
         if (! is.read (reinterpret_cast<char *> (&len), 4))
           goto data_read_error;
         if (swap)
           swap_bytes<4> (&len);
         OCTAVE_LOCAL_BUFFER (char, s, len+1);
         if (! is.read (reinterpret_cast<char *> (s), len))
           goto data_read_error;
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1868,17 +1868,17 @@ use @code{imfinfo}.\n\
     "Make",               // actually an Exif tag
     "Model",              // actually an Exif tag
     "DateTime",           // actually an Exif tag
     "ImageDescription",   // actually an Exif tag
     "Artist",             // actually an Exif tag
     "Copyright",          // actually an Exif tag
     "DigitalCamera",
     "GPSInfo",
-    // Notes for the future: GM allows to get many attributes, and even has
+    // Notes for the future: GM allows one to get many attributes, and even has
     // attribute() to obtain arbitrary ones, that may exist in only some
     // cases. The following is a list of some methods and into what possible
     // Matlab compatible values they may be converted.
     //
     //  colorSpace()      -> PhotometricInterpretation
     //  backgroundColor() -> BackgroundColor
     //  interlaceType()   -> Interlaced, InterlaceType, and PlanarConfiguration
     //  label()           -> Title
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -214,17 +214,17 @@ public:
   // Unconditional clone. Always clones.
   virtual octave_base_value *
   clone (void) const { return new octave_base_value (*this); }
 
   // Empty clone.
   virtual octave_base_value *
   empty_clone (void) const;
 
-  // Unique clone. Usually clones, but may be overriden to fake the
+  // Unique clone. Usually clones, but may be overridden to fake the
   // cloning when sharing copies is to be controlled from within an
   // instance (see octave_class).
   virtual octave_base_value *
   unique_clone (void) { return clone (); }
 
   virtual type_conv_info
   numeric_conversion_function (void) const
   { return type_conv_info (); }
@@ -759,17 +759,17 @@ public:
   fast_elem_extract (octave_idx_type n) const;
 
   // Assign the n-th element, aka val(n) = x. Returns false if val is not an
   // array type, x is not a matching scalar type, or n is out of range.
   // Never error.
   virtual bool
   fast_elem_insert (octave_idx_type n, const octave_value& x);
 
-  // This is a helper for the above, to be overriden in scalar types.  The
+  // This is a helper for the above, to be overridden in scalar types.  The
   // whole point is to handle the insertion efficiently with just *two* VM
   // calls, which is basically the theoretical minimum.
   virtual bool
   fast_elem_insert_self (void *where, builtin_type_t btyp) const;
 
   // Grab the reference count. For use by jit.
   void
   grab (void)
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -60,17 +60,17 @@ public: // FIXME: make this class privat
     virtual bool is_open (void) const
     { return false; }
 
     virtual void *search (const std::string&, name_mangler = 0)
     { return 0; }
 
     bool is_out_of_date (void) const;
 
-    // This method will be overriden conditionally.
+    // This method will be overridden conditionally.
     static shlib_rep *new_instance (const std::string& f);
 
     static shlib_rep *get_instance (const std::string& f, bool fake);
 
     octave_time time_loaded (void) const
     { return tm_loaded; }
 
     std::string file_name (void) const
diff --git a/scripts/plot/draw/mesh.m b/scripts/plot/draw/mesh.m
--- a/scripts/plot/draw/mesh.m
+++ b/scripts/plot/draw/mesh.m
@@ -136,11 +136,11 @@ endfunction
 %!demo
 %! clf;
 %! x = logspace (0,1,11);
 %! z = x'*x;
 %! mesh (x, x, z, 'facecolor', 'none', 'edgecolor', 'c');
 %! xlabel 'X-axis';
 %! ylabel 'Y-axis';
 %! zlabel 'Z-axis';
-%! title ({'mesh() default properties overriden', ...
+%! title ({'mesh() default properties overridden', ...
 %!         'transparent mesh with cyan color'});
 
