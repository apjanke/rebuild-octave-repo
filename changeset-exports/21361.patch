# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456510401 18000
#      Fri Feb 26 13:13:21 2016 -0500
# Node ID 9ca194f7a85809b0e8c5ac32a637d84c5e67ac12
# Parent  06c2a109935c69ae656a041dbd55dd08b6050ac2
disallow assignment to "end" in indexed assignments (bug #46459)

* parse.h, oct-parse.in.yy
(octave_base_parser::valid_id_for_assignment): New function.
(octave_base_parser::make_assign_op): Use it.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2946,18 +2946,16 @@ octave_base_parser::make_switch_case (to
 }
 
 // Build an assignment to a variable.
 
 tree_expression *
 octave_base_parser::make_assign_op (int op, tree_argument_list *lhs,
                                     token *eq_tok, tree_expression *rhs)
 {
-  tree_expression *retval = 0;
-
   octave_value::assign_op t = octave_value::unknown_assign_op;
 
   switch (op)
     {
     case '=':
       t = octave_value::op_asn_eq;
       break;
 
@@ -3012,35 +3010,75 @@ octave_base_parser::make_assign_op (int 
     default:
       panic_impossible ();
       break;
     }
 
   int l = eq_tok->line ();
   int c = eq_tok->column ();
 
-  if (lhs->is_simple_assign_lhs ())
+  if (! lhs->is_simple_assign_lhs () && t != octave_value::op_asn_eq)
     {
-      tree_expression *tmp = lhs->remove_front ();
-
-      retval = new tree_simple_assignment (tmp, rhs, false, l, c, t);
+      // Multiple assignments like [x,y] OP= rhs are only valid for
+      // '=', not '+=', etc.
 
       delete lhs;
+      delete rhs;
+
+      bison_error ("computed multiple assignment not allowed", l, c);
+
+      return 0;
     }
-  else if (t == octave_value::op_asn_eq)
-    return new tree_multi_assignment (lhs, rhs, false, l, c);
+
+  if (lhs->is_simple_assign_lhs ())
+    {
+      // We are looking at a simple assignment statement like x = rhs;
+
+      tree_expression *tmp = lhs->remove_front ();
+
+      if ((tmp->is_identifier () || tmp->is_index_expression ())
+          && ! valid_id_for_assignment (tmp->name ()))
+        {
+          std::string kw = tmp->name ();
+
+          delete tmp;
+          delete lhs;
+          delete rhs;
+
+          bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
+
+          return 0;
+        }
+
+      delete lhs;
+
+      return new tree_simple_assignment (tmp, rhs, false, l, c, t);
+    }
   else
     {
-      delete lhs;
-      delete rhs;
-
-      bison_error ("computed multiple assignment not allowed");
+      std::list<std::string> names = lhs->variable_names ();
+
+      for (std::list<std::string>::const_iterator it = names.begin ();
+           it != names.end (); it++)
+        {
+          std::string kw = *it;
+
+          if (! valid_id_for_assignment (kw))
+            {
+              delete lhs;
+              delete rhs;
+
+              bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
+
+              return 0;
+            }
+        }
+
+      return new tree_multi_assignment (lhs, rhs, false, l, c);
     }
-
-  return retval;
 }
 
 // Define a script.
 
 void
 octave_base_parser::make_script (tree_statement_list *cmds,
                                  tree_statement *end_script)
 {
@@ -3981,16 +4019,28 @@ octave_base_parser::bison_error (const s
       output_buf << "^";
     }
 
   output_buf << "\n";
 
   parse_error_msg = output_buf.str ();
 }
 
+bool
+octave_base_parser::valid_id_for_assignment (const std::string& s)
+{
+  // is_keyword will return true for some identfiers that are only
+  // keywords in certain contexts.
+
+  return (! is_keyword (s)
+          || (! lexer.parsing_classdef
+              && (s == "enumeration" || s == "events"
+                  || s == "methods" || s == "properties")));
+}
+
 int
 octave_parser::run (void)
 {
   int status = -1;
 
   yypstate *pstate = static_cast<yypstate *> (parser_state);
 
   try
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -388,16 +388,18 @@ public:
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
   // Generic error messages.
   void bison_error (const std::string& s, int l = -1, int c = -1);
 
+  bool valid_id_for_assignment (const std::string& s);
+
   // Contains error message if Bison-generated parser returns non-zero
   // status.
   std::string parse_error_msg;
 
   // Have we found an explicit end to a function?
   bool endfunction_found;
 
   // TRUE means we are in the process of autoloading a function.
