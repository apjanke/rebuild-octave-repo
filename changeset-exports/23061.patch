# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484682040 18000
#      Tue Jan 17 14:40:40 2017 -0500
# Node ID aedc662896a3f2dbb382cd5b793a6372c518747c
# Parent  baf03cdb28b5845af53dc0eb9471fff389f81662
move input reader classes into octave namespace

* input.h, input.cc (base_reader, file_reader, terminal_reader,
eval_string_reader, input_reader): Move classes inside octave
namespace and rename without octave_ prefix.  Change all uses.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -140,45 +140,48 @@ set_default_prompts (void)
 
   VPS1 = "octave:\\#> ";
   VPS2 = "> ";
   VPS4 = "+ ";
 
   octave_link::set_default_prompts (VPS1, VPS2, VPS4);
 }
 
-void
-octave_base_reader::do_input_echo (const std::string& input_string) const
+namespace octave
 {
-  bool forced_interactive = octave::application::forced_interactive ();
+  void
+  base_reader::do_input_echo (const std::string& input_string) const
+  {
+    bool forced_interactive = octave::application::forced_interactive ();
 
-  int do_echo = reading_script_file ()
-    ? (Vecho_executing_commands & ECHO_SCRIPTS)
-    : ((Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive);
+    int do_echo = reading_script_file ()
+      ? (Vecho_executing_commands & ECHO_SCRIPTS)
+      : ((Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive);
 
-  if (do_echo)
-    {
-      if (forced_interactive)
-        {
-          if (pflag > 0)
-            octave_stdout << octave::command_editor::decode_prompt_string (VPS1);
-          else
-            octave_stdout << octave::command_editor::decode_prompt_string (VPS2);
-        }
-      else
-        octave_stdout << octave::command_editor::decode_prompt_string (VPS4);
+    if (do_echo)
+      {
+        if (forced_interactive)
+          {
+            if (pflag > 0)
+              octave_stdout << octave::command_editor::decode_prompt_string (VPS1);
+            else
+              octave_stdout << octave::command_editor::decode_prompt_string (VPS2);
+          }
+        else
+          octave_stdout << octave::command_editor::decode_prompt_string (VPS4);
 
-      if (! input_string.empty ())
-        {
-          octave_stdout << input_string;
+        if (! input_string.empty ())
+          {
+            octave_stdout << input_string;
 
-          if (input_string[input_string.length () - 1] != '\n')
-            octave_stdout << "\n";
-        }
-    }
+            if (input_string[input_string.length () - 1] != '\n')
+              octave_stdout << "\n";
+          }
+      }
+  }
 }
 
 static std::string
 gnu_readline (const std::string& s, bool& eof)
 {
   octave_quit ();
 
   eof = false;
@@ -226,116 +229,119 @@ interactive_input (const std::string& s,
 
       if (eval_error)
         return "\n";
     }
 
   return gnu_readline (s, eof);
 }
 
-std::string
-octave_base_reader::octave_gets (bool& eof)
+namespace octave
 {
-  octave_quit ();
+  std::string
+  base_reader::octave_gets (bool& eof)
+  {
+    octave_quit ();
 
-  eof = false;
+    eof = false;
 
-  std::string retval;
+    std::string retval;
 
-  // Process pre input event hook function prior to flushing output and
-  // printing the prompt.
+    // Process pre input event hook function prior to flushing output and
+    // printing the prompt.
 
-  if (octave::application::interactive ())
-    {
-      if (! Vdebugging)
-        octave_link::exit_debugger_event ();
+    if (octave::application::interactive ())
+      {
+        if (! Vdebugging)
+          octave_link::exit_debugger_event ();
 
-      octave_link::pre_input_event ();
+        octave_link::pre_input_event ();
 
-      octave_link::set_workspace ();
-    }
+        octave_link::set_workspace ();
+      }
 
-  bool history_skip_auto_repeated_debugging_command = false;
+    bool history_skip_auto_repeated_debugging_command = false;
 
-  std::string ps = (pflag > 0) ? VPS1 : VPS2;
+    std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
-  std::string prompt = octave::command_editor::decode_prompt_string (ps);
+    std::string prompt = octave::command_editor::decode_prompt_string (ps);
 
-  octave::pipe_handler_error_count = 0;
+    octave::pipe_handler_error_count = 0;
 
-  octave::flush_stdout ();
+    octave::flush_stdout ();
 
-  octave::pager_stream::reset ();
-  octave::diary_stream::reset ();
+    octave::pager_stream::reset ();
+    octave::diary_stream::reset ();
 
-  octave_diary << prompt;
+    octave_diary << prompt;
 
-  retval = interactive_input (prompt, eof);
+    retval = interactive_input (prompt, eof);
 
-  // There is no need to update the load_path cache if there is no
-  // user input.
-  if (retval != "\n"
-      && retval.find_first_not_of (" \t\n\r") != std::string::npos)
-    {
-      load_path::update ();
+    // There is no need to update the load_path cache if there is no
+    // user input.
+    if (retval != "\n"
+        && retval.find_first_not_of (" \t\n\r") != std::string::npos)
+      {
+        load_path::update ();
 
-      if (Vdebugging)
-        last_debugging_command = retval;
-      else
-        last_debugging_command = "\n";
-    }
-  else if (Vdebugging)
-    {
-      retval = last_debugging_command;
-      history_skip_auto_repeated_debugging_command = true;
-    }
+        if (Vdebugging)
+          last_debugging_command = retval;
+        else
+          last_debugging_command = "\n";
+      }
+    else if (Vdebugging)
+      {
+        retval = last_debugging_command;
+        history_skip_auto_repeated_debugging_command = true;
+      }
 
-  if (retval != "\n")
-    {
-      if (! history_skip_auto_repeated_debugging_command)
-        {
-          if (octave::command_history::add (retval))
-            octave_link::append_history (retval);
-        }
+    if (retval != "\n")
+      {
+        if (! history_skip_auto_repeated_debugging_command)
+          {
+            if (octave::command_history::add (retval))
+              octave_link::append_history (retval);
+          }
 
-      octave_diary << retval;
+        octave_diary << retval;
 
-      if (retval[retval.length () - 1] != '\n')
-        octave_diary << "\n";
+        if (retval[retval.length () - 1] != '\n')
+          octave_diary << "\n";
 
-      do_input_echo (retval);
-    }
-  else
-    octave_diary << "\n";
+        do_input_echo (retval);
+      }
+    else
+      octave_diary << "\n";
 
-  // Process post input event hook function after the internal history
-  // list has been updated.
+    // Process post input event hook function after the internal history
+    // list has been updated.
 
-  if (octave::application::interactive ())
-    octave_link::post_input_event ();
+    if (octave::application::interactive ())
+      octave_link::post_input_event ();
 
-  return retval;
-}
+    return retval;
+  }
 
-bool
-octave_base_reader::reading_fcn_file (void) const
-{
-  return lexer ? lexer->reading_fcn_file : false;
-}
+  bool
+  base_reader::reading_fcn_file (void) const
+  {
+    return lexer ? lexer->reading_fcn_file : false;
+  }
 
-bool
-octave_base_reader::reading_classdef_file (void) const
-{
-  return lexer ? lexer->reading_classdef_file : false;
-}
+  bool
+  base_reader::reading_classdef_file (void) const
+  {
+    return lexer ? lexer->reading_classdef_file : false;
+  }
 
-bool
-octave_base_reader::reading_script_file (void) const
-{
-  return lexer ? lexer->reading_script_file : false;
+  bool
+  base_reader::reading_script_file (void) const
+  {
+    return lexer ? lexer->reading_script_file : false;
+  }
 }
 
 // Fix things up so that input can come from the standard input.  This
 // may need to become much more complicated, which is why it's in a
 // separate function.
 
 FILE *
 get_input_from_stdin (void)
@@ -718,63 +724,66 @@ get_debug_input (const std::string& prom
             std::cerr << stack_trace;
 
           // Ignore errors when in debugging mode;
           recover_from_exception ();
         }
     }
 }
 
-const std::string octave_base_reader::in_src ("invalid");
-
-const std::string octave_terminal_reader::in_src ("terminal");
+namespace octave
+{
+  const std::string base_reader::in_src ("invalid");
 
-std::string
-octave_terminal_reader::get_input (bool& eof)
-{
-  octave_quit ();
+  const std::string terminal_reader::in_src ("terminal");
 
-  eof = false;
+  std::string
+  terminal_reader::get_input (bool& eof)
+  {
+    octave_quit ();
 
-  return octave_gets (eof);
-}
+    eof = false;
 
-const std::string octave_file_reader::in_src ("file");
+    return octave_gets (eof);
+  }
+
+  const std::string file_reader::in_src ("file");
 
-std::string
-octave_file_reader::get_input (bool& eof)
-{
-  octave_quit ();
+  std::string
+  file_reader::get_input (bool& eof)
+  {
+    octave_quit ();
 
-  eof = false;
+    eof = false;
 
-  return octave_fgets (file, eof);
-}
+    return octave_fgets (file, eof);
+  }
 
-const std::string octave_eval_string_reader::in_src ("eval_string");
+  const std::string eval_string_reader::in_src ("eval_string");
 
-std::string
-octave_eval_string_reader::get_input (bool& eof)
-{
-  octave_quit ();
+  std::string
+  eval_string_reader::get_input (bool& eof)
+  {
+    octave_quit ();
 
-  eof = false;
+    eof = false;
 
-  std::string retval;
+    std::string retval;
 
-  retval = eval_string;
+    retval = eval_string;
 
-  // Clear the eval string so that the next call will return
-  // an empty character string with EOF = true.
-  eval_string = "";
+    // Clear the eval string so that the next call will return
+    // an empty character string with EOF = true.
+    eval_string = "";
 
-  if (retval.empty ())
-    eof = true;
+    if (retval.empty ())
+      eof = true;
 
-  return retval;
+    return retval;
+  }
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
 get_user_input (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -81,216 +81,237 @@ enum echo_state
   ECHO_FUNCTIONS = 2,
   ECHO_CMD_LINE = 4
 };
 
 extern int Vecho_executing_commands;
 
 extern octave::sys::time Vlast_prompt_time;
 
-class
-octave_base_reader
+namespace octave
 {
-public:
+  class
+  base_reader
+  {
+  public:
 
-  friend class octave_input_reader;
+    friend class input_reader;
 
-  octave_base_reader (octave::base_lexer *lxr)
-    : count (1), pflag (0), lexer (lxr)
-  { }
+    base_reader (octave::base_lexer *lxr)
+      : count (1), pflag (0), lexer (lxr)
+    { }
 
-  octave_base_reader (const octave_base_reader& x)
-    : count (1), pflag (x.pflag), lexer (x.lexer)
-  { }
+    base_reader (const base_reader& x)
+      : count (1), pflag (x.pflag), lexer (x.lexer)
+    { }
 
-  virtual ~octave_base_reader (void) = default;
+    virtual ~base_reader (void) = default;
 
-  virtual std::string get_input (bool& eof) = 0;
+    virtual std::string get_input (bool& eof) = 0;
 
-  virtual std::string input_source (void) const { return in_src; }
+    virtual std::string input_source (void) const { return in_src; }
 
-  void reset (void) { promptflag (1); }
+    void reset (void) { promptflag (1); }
 
-  void increment_promptflag (void) { pflag++; }
+    void increment_promptflag (void) { pflag++; }
 
-  void decrement_promptflag (void) { pflag--; }
+    void decrement_promptflag (void) { pflag--; }
 
-  int promptflag (void) const { return pflag; }
+    int promptflag (void) const { return pflag; }
 
-  int promptflag (int n)
-  {
-    int retval = pflag;
-    pflag = n;
-    return retval;
-  }
+    int promptflag (int n)
+    {
+      int retval = pflag;
+      pflag = n;
+      return retval;
+    }
+
+    std::string octave_gets (bool& eof);
 
-  std::string octave_gets (bool& eof);
+    virtual bool reading_fcn_file (void) const;
 
-  virtual bool reading_fcn_file (void) const;
+    virtual bool reading_classdef_file (void) const;
 
-  virtual bool reading_classdef_file (void) const;
+    virtual bool reading_script_file (void) const;
 
-  virtual bool reading_script_file (void) const;
+    virtual bool input_from_terminal (void) const { return false; }
 
-  virtual bool input_from_terminal (void) const { return false; }
+    virtual bool input_from_file (void) const { return false; }
 
-  virtual bool input_from_file (void) const { return false; }
+    virtual bool input_from_eval_string (void) const { return false; }
 
-  virtual bool input_from_eval_string (void) const { return false; }
+  private:
 
-private:
+    octave::refcount<int> count;
 
-  octave::refcount<int> count;
+    int pflag;
 
-  int pflag;
+    octave::base_lexer *lexer;
 
-  octave::base_lexer *lexer;
+    void do_input_echo (const std::string&) const;
 
-  void do_input_echo (const std::string&) const;
+    static const std::string in_src;
+  };
 
-  static const std::string in_src;
-};
+  class
+  terminal_reader : public base_reader
+  {
+  public:
 
-class
-octave_terminal_reader : public octave_base_reader
-{
-public:
+    terminal_reader (octave::base_lexer *lxr = 0)
+      : base_reader (lxr)
+    { }
+
+    std::string get_input (bool& eof);
 
-  octave_terminal_reader (octave::base_lexer *lxr = 0)
-    : octave_base_reader (lxr)
-  { }
+    std::string input_source (void) const { return in_src; }
 
-  std::string get_input (bool& eof);
+    bool input_from_terminal (void) const { return true; }
+
+  private:
 
-  std::string input_source (void) const { return in_src; }
-
-  bool input_from_terminal (void) const { return true; }
+    static const std::string in_src;
+  };
 
-private:
+  class
+  file_reader : public base_reader
+  {
+  public:
 
-  static const std::string in_src;
-};
+    file_reader (FILE *f_arg, octave::base_lexer *lxr = 0)
+      : base_reader (lxr), file (f_arg) { }
+
+    std::string get_input (bool& eof);
 
-class
-octave_file_reader : public octave_base_reader
-{
-public:
+    std::string input_source (void) const { return in_src; }
+
+    bool input_from_file (void) const { return true; }
 
-  octave_file_reader (FILE *f_arg, octave::base_lexer *lxr = 0)
-    : octave_base_reader (lxr), file (f_arg) { }
+  private:
+
+    FILE *file;
 
-  std::string get_input (bool& eof);
-
-  std::string input_source (void) const { return in_src; }
+    static const std::string in_src;
+  };
 
-  bool input_from_file (void) const { return true; }
-
-private:
-
-  FILE *file;
+  class
+  eval_string_reader : public base_reader
+  {
+  public:
 
-  static const std::string in_src;
-};
-
-class
-octave_eval_string_reader : public octave_base_reader
-{
-public:
+    eval_string_reader (const std::string& str,
+                               octave::base_lexer *lxr = 0)
+      : base_reader (lxr), eval_string (str)
+    { }
 
-  octave_eval_string_reader (const std::string& str,
-                             octave::base_lexer *lxr = 0)
-    : octave_base_reader (lxr), eval_string (str)
-  { }
-
-  std::string get_input (bool& eof);
+    std::string get_input (bool& eof);
 
-  std::string input_source (void) const { return in_src; }
-
-  bool input_from_eval_string (void) const { return true; }
-
-private:
-
-  std::string eval_string;
+    std::string input_source (void) const { return in_src; }
 
-  static const std::string in_src;
-};
+    bool input_from_eval_string (void) const { return true; }
 
-class
-octave_input_reader
-{
-public:
-  octave_input_reader (octave::base_lexer *lxr = 0)
-    : rep (new octave_terminal_reader (lxr))
-  { }
+  private:
+
+    std::string eval_string;
 
-  octave_input_reader (FILE *file, octave::base_lexer *lxr = 0)
-    : rep (new octave_file_reader (file, lxr))
-  { }
-
-  octave_input_reader (const std::string& str, octave::base_lexer *lxr = 0)
-    : rep (new octave_eval_string_reader (str, lxr))
-  { }
+    static const std::string in_src;
+  };
 
-  octave_input_reader (const octave_input_reader& ir)
-  {
-    rep = ir.rep;
-    rep->count++;
-  }
-
-  octave_input_reader& operator = (const octave_input_reader& ir)
+  class
+  input_reader
   {
-    if (&ir != this)
-      {
-        rep = ir.rep;
-        rep->count++;
-      }
+  public:
+    input_reader (octave::base_lexer *lxr = 0)
+      : rep (new terminal_reader (lxr))
+    { }
+
+    input_reader (FILE *file, octave::base_lexer *lxr = 0)
+      : rep (new file_reader (file, lxr))
+    { }
 
-    return *this;
-  }
+    input_reader (const std::string& str, octave::base_lexer *lxr = 0)
+      : rep (new eval_string_reader (str, lxr))
+    { }
+
+    input_reader (const input_reader& ir)
+    {
+      rep = ir.rep;
+      rep->count++;
+    }
 
-  ~octave_input_reader (void)
-  {
-    if (--rep->count == 0)
-      delete rep;
-  }
+    input_reader& operator = (const input_reader& ir)
+    {
+      if (&ir != this)
+        {
+          rep = ir.rep;
+          rep->count++;
+        }
 
-  void reset (void) { return rep->reset (); }
+      return *this;
+    }
 
-  void increment_promptflag (void) { rep->increment_promptflag (); }
+    ~input_reader (void)
+    {
+      if (--rep->count == 0)
+        delete rep;
+    }
 
-  void decrement_promptflag (void) { rep->decrement_promptflag (); }
+    void reset (void) { return rep->reset (); }
 
-  int promptflag (void) const { return rep->promptflag (); }
+    void increment_promptflag (void) { rep->increment_promptflag (); }
+
+    void decrement_promptflag (void) { rep->decrement_promptflag (); }
 
-  int promptflag (int n) { return rep->promptflag (n); }
+    int promptflag (void) const { return rep->promptflag (); }
+
+    int promptflag (int n) { return rep->promptflag (n); }
 
-  std::string get_input (bool& eof)
-  {
-    return rep->get_input (eof);
-  }
+    std::string get_input (bool& eof)
+    {
+      return rep->get_input (eof);
+    }
+
+    std::string input_source (void) const
+    {
+      return rep->input_source ();
+    }
 
-  std::string input_source (void) const
-  {
-    return rep->input_source ();
-  }
+    bool input_from_terminal (void) const
+    {
+      return rep->input_from_terminal ();
+    }
 
-  bool input_from_terminal (void) const
-  {
-    return rep->input_from_terminal ();
-  }
+    bool input_from_file (void) const
+    {
+      return rep->input_from_file ();
+    }
 
-  bool input_from_file (void) const
-  {
-    return rep->input_from_file ();
-  }
+    bool input_from_eval_string (void) const
+    {
+      return rep->input_from_eval_string ();
+    }
+
+  private:
+
+    base_reader *rep;
+  };
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-  bool input_from_eval_string (void) const
-  {
-    return rep->input_from_eval_string ();
-  }
+OCTAVE_DEPRECATED ("use 'octave::base_reader' instead")
+typedef octave::base_reader octave_base_reader;
+
+OCTAVE_DEPRECATED ("use 'octave::terminal_reader' instead")
+typedef octave::terminal_reader octave_terminal_reader;
 
-private:
+OCTAVE_DEPRECATED ("use 'octave::file_reader' instead")
+typedef octave::file_reader octave_file_reader;
 
-  octave_base_reader *rep;
-};
+OCTAVE_DEPRECATED ("use 'octave::eval_string_reader' instead")
+typedef octave::eval_string_reader octave_eval_string_reader;
+
+OCTAVE_DEPRECATED ("use 'octave::input_reader' instead")
+typedef octave::input_reader octave_input_reader;
 
 #endif
 
+#endif
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -474,17 +474,17 @@ namespace octave
 
   class
   base_lexer : public lexical_feedback
   {
   public:
 
     // Handle buffering of input for lexer.
 
-    class input_buffer
+   class input_buffer
     {
     public:
 
       input_buffer (void)
         : buffer (), pos (0), chars_left (0), eof (false)
       { }
 
       void fill (const std::string& input, bool eof_arg);
@@ -716,72 +716,72 @@ namespace octave
   };
 
   class
   lexer : public base_lexer
   {
   public:
 
     lexer (interpreter *interp_context = 0)
-      : base_lexer (interp_context), input_reader (this)
+      : base_lexer (interp_context), reader (this)
     { }
 
     lexer (FILE *file, interpreter *interp_context = 0)
-      : base_lexer (interp_context), input_reader (file, this)
+      : base_lexer (interp_context), reader (file, this)
     { }
 
     lexer (const std::string& eval_string,
            interpreter *interp_context = 0)
-      : base_lexer (interp_context), input_reader (eval_string, this)
+      : base_lexer (interp_context), reader (eval_string, this)
     { }
 
     // No copying!
 
     lexer (const lexer&) = delete;
 
     lexer& operator = (const lexer&) = delete;
 
     void reset (void)
     {
-      input_reader.reset ();
+      reader.reset ();
 
       base_lexer::reset ();
     }
 
-    void increment_promptflag (void) { input_reader.increment_promptflag (); }
+    void increment_promptflag (void) { reader.increment_promptflag (); }
 
-    void decrement_promptflag (void) { input_reader.decrement_promptflag (); }
+    void decrement_promptflag (void) { reader.decrement_promptflag (); }
 
-    int promptflag (void) const { return input_reader.promptflag (); }
+    int promptflag (void) const { return reader.promptflag (); }
 
-    int promptflag (int n) { return input_reader.promptflag (n); }
+    int promptflag (int n) { return reader.promptflag (n); }
 
     std::string input_source (void) const
     {
-      return input_reader.input_source ();
+      return reader.input_source ();
     }
 
     bool input_from_terminal (void) const
     {
-      return input_reader.input_from_terminal ();
+      return reader.input_from_terminal ();
     }
 
     bool input_from_file (void) const
     {
-      return input_reader.input_from_file ();
+      return reader.input_from_file ();
     }
 
     bool input_from_eval_string (void) const
     {
-      return input_reader.input_from_eval_string ();
+      return reader.input_from_eval_string ();
     }
 
     int fill_flex_buffer (char *buf, unsigned int max_size);
 
-    octave_input_reader input_reader;
+    input_reader reader;
   };
 
   class
   push_lexer : public base_lexer
   {
   public:
 
     push_lexer (interpreter *interp_context = 0)
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -3573,17 +3573,17 @@ namespace octave
   int
   lexer::fill_flex_buffer (char *buf, unsigned max_size)
   {
     int status = 0;
 
     if (input_buf.empty ())
       {
         bool eof = false;
-        current_input_line = input_reader.get_input (eof);
+        current_input_line = reader.get_input (eof);
         input_buf.fill (current_input_line, eof);
       }
 
     if (! input_buf.empty ())
       status = input_buf.copy_chunk (buf, max_size);
     else
       status = YY_NULL;
 
