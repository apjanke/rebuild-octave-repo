# HG changeset patch
# User jwe
# Date 1156214261 0
#      Tue Aug 22 02:37:41 2006 +0000
# Node ID c7105ffca0b645af86607642a8556687993a7369
# Parent  8b4d38c76bfa6d68f27bbe719430aa1c378ec319
[project @ 2006-08-22 02:37:41 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2006-08-21  John W. Eaton  <jwe@octave.org>
 
+	* ls-mat5.cc (read_mat5_binary_data, read_mat5_integer_data,
+	write_mat5_array): Unconditionally enable code for 64-bit int types.
+
 	* ov-fcn-handle.cc (DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA):	
 	For compatibility, set class to function_handle.
 
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
 	* pr-output.cc (set_real_matrix_format): Also always include space
 	for sign if values are int, inf, or nan.
 	(set_complex_format, set_complex_matrix_format): Always include
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -152,26 +152,23 @@ read_mat5_binary_data (std::istream& is,
     case miDOUBLE:
       read_doubles (is, data, LS_DOUBLE, count, swap, flt_fmt);
       break;
 
     case miRESERVE2:
     case miRESERVE3:
       break;
 
+    // FIXME -- how are the 64-bit cases supposed to work here?
     case miINT64:
-#ifdef int64_t
       read_doubles (is, data, LS_LONG, count, swap, flt_fmt);
-#endif
       break;
 
     case miUINT64:
-#ifdef int64_t
       read_doubles (is, data, LS_U_LONG, count, swap, flt_fmt);
-#endif
       break;
 
     case miMATRIX:
     default:
       break;
     }
 }
 
@@ -225,25 +222,21 @@ read_mat5_integer_data (std::istream& is
     case miSINGLE:
     case miRESERVE1:
     case miDOUBLE:
     case miRESERVE2:
     case miRESERVE3:
       break;
 
     case miINT64:
-#ifdef int64_t
       READ_INTEGER_DATA (int64_t, swap, m, 8, count, is);
-#endif
       break;
 
     case miUINT64:
-#ifdef int64_t
       READ_INTEGER_DATA (uint64_t, swap, m, 8, count, is);
-#endif
       break;
 
     case miMATRIX:
     default:
       break;
     }
 
 #undef READ_INTEGER_DATA
@@ -1099,41 +1092,35 @@ write_mat5_array (std::ostream& os, cons
       case LS_U_SHORT:
 	MAT5_DO_WRITE (uint16_t, data, nel, os);
 	break;
 	
       case LS_U_INT:
 	MAT5_DO_WRITE (uint32_t, data, nel, os);
 	break;
 	
-	// provide for 64 bit ints, even though get_save_type does
-	// not yet implement them
-#ifdef int64_t
       case LS_U_LONG:
 	MAT5_DO_WRITE (uint64_t, data, nel, os);
 	break;
-#endif
 
       case LS_CHAR:
 	MAT5_DO_WRITE (int8_t, data, nel, os);
 	break;
 	
       case LS_SHORT:
 	MAT5_DO_WRITE (int16_t, data, nel, os);
 	break;
 
       case LS_INT:
 	MAT5_DO_WRITE (int32_t, data, nel, os);
 	break;
 
-#ifdef int64_t
       case LS_LONG:
 	MAT5_DO_WRITE (int64_t, data, nel, os);
 	break;
-#endif
 
       case LS_FLOAT:
 	MAT5_DO_WRITE (float, data, nel, os);
 	break;
 
       case LS_DOUBLE: // No conversion necessary.
 	os.write (reinterpret_cast<const char *> (data), len);
 	break;
