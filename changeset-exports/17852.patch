# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1372107774 18000
#      Mon Jun 24 16:02:54 2013 -0500
# Node ID 4de2eeb7d790adb3953b70cd74584e2e4dc99d9f
# Parent  af685269e06c6b38734db34564499564571cd301
Align terminal window contents with bottom of view

* TerminalView.cc (TerminalDisplay::setCursorPos): Retrieve bottomLeft corner
of view and compute top as bL.y()-2*_topMargin-_fontHeight*_lines+1.
(TerminalView::scrollImage): Compute top using contentsRect().height() -
_topMargin - (_lines * _fontHeight) rather than _topMargin.
(TerminalView::updateImage, TerminalView::preeditRect,
TerminalView::drawContents, TerminalView::imageToWidget,
TerminalView::extendSelection): Retrieve bottomLeft corner of view and compute
top as bL.y()-2*_topMargin-_fontHeight*_lines+1.

diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -656,19 +656,20 @@ void TerminalView::setRandomSeed(uint ra
 uint TerminalView::randomSeed() const { return _randomSeed; }
 
 #if 0
 /*!
     Set XIM Position
 */
 void TerminalDisplay::setCursorPos(const int curx, const int cury)
 {
-  QPoint tL  = contentsRect().topLeft();
-  int    tLx = tL.x();
-  int    tLy = tL.y();
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bL  = contentsRect().bottomLeft();
+  int    tLx = bL.x();
+  int    tLy = bL.y()-2*_topMargin-_fontHeight*_lines+1;
 
   int xpos, ypos;
   ypos = _topMargin + tLy + _fontHeight*(cury-1) + _fontAscent;
   xpos = _leftMargin + tLx + _fontWidth*curx;
   //setMicroFocusHint(xpos, ypos, 0, _fontHeight); //### ???
   // fprintf(stderr, "x/y = %d/%d\txpos/ypos = %d/%d\n", curx, cury, xpos, ypos);
   _cursorLine = cury;
   _cursorCol = curx;
@@ -710,17 +711,17 @@ void TerminalView::scrollImage(int lines
           || (region.top() + abs(lines)) >= region.bottom()
           || this->_lines <= region.height() ) return;
 
   QRect scrollRect;
 
   void* firstCharPos = &_image[ region.top() * this->_columns ];
   void* lastCharPos = &_image[ (region.top() + abs(lines)) * this->_columns ];
 
-  int top = _topMargin + (region.top() * _fontHeight);
+  int top = contentsRect().height() - _topMargin - (_lines * _fontHeight) + (region.top() * _fontHeight);
   int linesToMove = region.height() - abs(lines);
   int bytesToMove = linesToMove *
       this->_columns *
       sizeof(Character);
 
   Q_ASSERT( linesToMove > 0 );
   Q_ASSERT( bytesToMove > 0 );
 
@@ -825,20 +826,20 @@ void TerminalView::updateImage()
   if (!_image)
     updateImageSize(); // Create _image
 
   Q_ASSERT( this->_usedLines <= this->_lines );
   Q_ASSERT( this->_usedColumns <= this->_columns );
 
   int y,x,len;
 
-  QPoint tL  = contentsRect().topLeft();
-
-  int    tLx = tL.x();
-  int    tLy = tL.y();
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bL  = contentsRect().bottomLeft();
+  int    tLx = bL.x();
+  int    tLy = bL.y()-2*_topMargin-_fontHeight*_lines+1;
   _hasBlinker = false;
 
   CharacterColor cf;       // undefined
   CharacterColor _clipboard;       // undefined
   int cr  = -1;   // undefined
 
   const int linesToUpdate = qMin(this->_lines, qMax(0,lines  ));
   const int columnsToUpdate = qMin(this->_columns,qMax(0,columns));
@@ -1093,18 +1094,23 @@ QPoint TerminalView::cursorPosition() co
 
 QRect TerminalView::preeditRect() const
 {
   const int preeditLength = string_width(_inputMethodData.preeditString);
 
   if ( preeditLength == 0 )
     return QRect();
 
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bL  = contentsRect().bottomLeft();
+  int    tLx = bL.x();
+  int    tLy = bL.y()-2*_topMargin-_fontHeight*_lines+1;
+
   return QRect(_leftMargin + _fontWidth*cursorPosition().x(),
-               _topMargin + _fontHeight*cursorPosition().y(),
+               _topMargin + tLy + _fontHeight*cursorPosition().y(),
                _fontWidth*preeditLength,
                _fontHeight);
 }
 
 void TerminalView::drawInputMethodPreeditString(QPainter& painter , const QRect& rect)
 {
   if ( _inputMethodData.preeditString.isEmpty() ) {
       return;
@@ -1208,19 +1214,20 @@ void TerminalView::paintFilters(QPainter
             }
         }
     }
 }
 void TerminalView::drawContents(QPainter &paint, const QRect &rect)
 {
   //qDebug("%s %d drawContents and rect x=%d y=%d w=%d h=%d", __FILE__, __LINE__, rect.x(), rect.y(),rect.width(),rect.height());
 
-  QPoint topLeft  = contentsRect().topLeft();
-  // Take the topmost vertical position for the view.
-  int topLeftY = topLeft.y();
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bottomLeft  = contentsRect().bottomLeft();
+  int bottomLeftY = bottomLeft.y();
+  int topLeftY = bottomLeftY-2*_topMargin-_fontHeight*_lines+1;
 
   // In Konsole, the view has been centered. Don't do that here, since there
   // are strange hopping effects during a resize when the view does no match
   // exactly the widget width.
   // int topLeftX = (_contentWidth - _usedColumns * _fontWidth) / 2;
   int topLeftX = 0;
 
   int leftUpperX = qMin(_usedColumns-1, qMax(0, qRound((rect.left()   - topLeftX - _leftMargin ) / _fontWidth)));
@@ -1356,20 +1363,25 @@ void TerminalView::blinkEvent()
   //TODO:  Optimise to only repaint the areas of the widget
   // where there is blinking text
   // rather than repainting the whole widget.
   update();
 }
 
 QRect TerminalView::imageToWidget(const QRect& imageArea) const
 {
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bL  = contentsRect().bottomLeft();
+  int    tLx = bL.x();
+  int    tLy = bL.y()-2*_topMargin-_fontHeight*_lines+1;
+
   //qDebug("%s %d imageToWidget", __FILE__, __LINE__);
   QRect result;
   result.setLeft( _leftMargin + _fontWidth * imageArea.left() );
-  result.setTop( _topMargin + _fontHeight * imageArea.top() );
+  result.setTop( _topMargin + tLy + _fontHeight * imageArea.top() );
   result.setWidth( _fontWidth * imageArea.width() );
   result.setHeight( _fontHeight * imageArea.height() );
 
   return result;
 }
 
 void TerminalView::blinkCursorEvent()
 {
@@ -1725,19 +1737,20 @@ void TerminalDisplay::setSelectionEnd()
 
 void TerminalView::extendSelection(const QPoint& position) {
   QPoint pos = position;
 
   if (!_screenWindow) {
       return;
     }
 
-  QPoint tL  = contentsRect().topLeft();
-  int    tLx = tL.x();
-  int    tLy = tL.y();
+  // Align contents with bottom of view by computing top coordinate
+  QPoint bL  = contentsRect().bottomLeft();
+  int    tLx = bL.x();
+  int    tLy = bL.y()-2*_topMargin-_fontHeight*_lines+1;
   int    scroll = _scrollBar->value();
 
   // we're in the process of moving the mouse with the left button pressed
   // the mouse cursor will kept caught within the bounds of the text in
   // this widget.
 
   // Adjust position within text area bounds. See FIXME above.
   if (pos.x() < tLx + _leftMargin) {
