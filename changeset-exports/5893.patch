# HG changeset patch
# User jwe
# Date 1153036143 0
#      Sun Jul 16 07:49:03 2006 +0000
# Node ID d73ffe42f2c8192f8a472382c7bba101c9488e08
# Parent  13aa80fc78398dff9acc52227419f21b6b1ce8a2
[project @ 2006-07-16 07:48:19 by jwe]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -1056,29 +1056,29 @@ SparseComplexMatrix::determinant (octave
     {
       err = 0;
 
       // Setup the control parameters
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_ZNAME (defaults) (control);
 
-      double tmp = Voctave_sparse_controls.get_key ("spumoni");
+      double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
 
-      tmp = Voctave_sparse_controls.get_key ("piv_tol");
+      tmp = octave_sparse_params::get_key ("piv_tol");
       if (!xisnan (tmp))
 	{
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	  Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	}
 
       // Set whether we are allowed to modify Q or not
-      tmp = Voctave_sparse_controls.get_key ("autoamd");
+      tmp = octave_sparse_params::get_key ("autoamd");
       if (!xisnan (tmp))
 	Control (UMFPACK_FIXQ) = tmp;
 
       // Turn-off UMFPACK scaling for LU 
       Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
       UMFPACK_ZNAME (report_control) (control);
 
@@ -5539,28 +5539,28 @@ SparseComplexMatrix::factorize (octave_i
   err = 0;
 
 #ifdef HAVE_UMFPACK
   // Setup the control parameters
   Control = Matrix (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_ZNAME (defaults) (control);
 
-  double tmp = Voctave_sparse_controls.get_key ("spumoni");
+  double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
-  tmp = Voctave_sparse_controls.get_key ("piv_tol");
+  tmp = octave_sparse_params::get_key ("piv_tol");
   if (!xisnan (tmp))
     {
       Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
       Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
     }
 
   // Set whether we are allowed to modify Q or not
-  tmp = Voctave_sparse_controls.get_key ("autoamd");
+  tmp = octave_sparse_params::get_key ("autoamd");
   if (!xisnan (tmp))
     Control (UMFPACK_FIXQ) = tmp;
 
   UMFPACK_ZNAME (report_control) (control);
 
   const octave_idx_type *Ap = cidx ();
   const octave_idx_type *Ai = ridx ();
   const Complex *Ax = data ();
@@ -5670,17 +5670,17 @@ SparseComplexMatrix::fsolve (MatrixType 
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -5927,17 +5927,17 @@ SparseComplexMatrix::fsolve (MatrixType 
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -6235,17 +6235,17 @@ SparseComplexMatrix::fsolve (MatrixType 
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -6474,17 +6474,17 @@ SparseComplexMatrix::fsolve (MatrixType 
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2006-07-16  John W. Eaton  <jwe@octave.org>
+
+	* oct-spparms.h, oct-spparms.cc (class octave_sparse_params):
+	Rename from SparseParams.  Use same implementation method as other
+	singleton classes in Octave.  Change all uses of
+	Voctave_sparse_controls to use static functions from
+	octave_sparse_params class instead.
+
+	* oct-spparms.h, oct-spparms.cc (SparseParams::set_key,
+	SparseParams::get_key): Pass std::string arg by const reference,
+	not const value.
+
 2006-07-15  John W. Eaton  <jwe@octave.org>
 
 	* data-conv.cc: Instantiante swap_bytes templates here.
 
 	* MatrixType.cc (MatrixType::MatrixType):
 	Use complete initializer lists in constructors.
 
 2006-07-06  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -32,17 +32,17 @@ Boston, MA 02110-1301, USA.
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-spparms.h"
 
 // FIXME There is a large code duplication here
 
 MatrixType::MatrixType (void)
   : typ (MatrixType::Unknown),
-    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_key ("bandden")),
     bandden (0), upper_band (0), lower_band (0), dense (false),
     full (false), nperm (0), perm (0) { }
 
 MatrixType::MatrixType (const MatrixType &a)
   : typ (a.typ), sp_bandden (a.sp_bandden), bandden (a.bandden), 
     upper_band (a.upper_band), lower_band (a.lower_band), 
     dense (a.dense), full (a.full), nperm (a.nperm)
 { 
@@ -179,21 +179,21 @@ MatrixType::MatrixType (const SparseMatr
     sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
     dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
 
-  if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+  if (octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
+  sp_bandden = octave_sparse_params::get_key ("bandden");
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
       // Maybe the matrix is diagonal
@@ -505,22 +505,22 @@ MatrixType::MatrixType (const SparseComp
     sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
     dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
 
-  if (Voctave_sparse_controls.get_key ("spumoni") != 0.)  full = true;
+  if (octave_sparse_params::get_key ("spumoni") != 0.)  full = true;
 
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  sp_bandden = Voctave_sparse_controls.get_key ("bandden");
+  sp_bandden = octave_sparse_params::get_key ("bandden");
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
       // Maybe the matrix is diagonal
@@ -823,33 +823,33 @@ MatrixType::MatrixType (const SparseComp
 	      else
 		typ = MatrixType::Tridiagonal_Hermitian;
 	    }
 	}
     }
 }
 MatrixType::MatrixType (const matrix_type t, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_key ("bandden")),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if (t == MatrixType::Full || t == MatrixType::Diagonal ||
       t == MatrixType::Permuted_Diagonal || t == MatrixType::Upper ||
       t == MatrixType::Lower || t == MatrixType::Tridiagonal ||
       t == MatrixType::Tridiagonal_Hermitian || t == MatrixType::Rectangular)
     typ = t;
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type np,
 			const octave_idx_type *p, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_key ("bandden")),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if (t == MatrixType::Permuted_Upper || t == MatrixType::Permuted_Lower)
     {
       typ = t;
       nperm = np;
       perm = new octave_idx_type [nperm];
@@ -858,17 +858,17 @@ MatrixType::MatrixType (const matrix_typ
     }
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type ku,
 			const octave_idx_type kl, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (Voctave_sparse_controls.get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_key ("bandden")),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if (t == MatrixType::Banded || t == MatrixType::Banded_Hermitian)
     {
       typ = t;
       upper_band = ku;
       lower_band = kl;
@@ -909,43 +909,43 @@ MatrixType::operator = (const MatrixType
 
   return *this;
 }
 
 int
 MatrixType::type (bool quiet)
 {
   if (typ != MatrixType::Unknown && (full ||
-      sp_bandden == Voctave_sparse_controls.get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_key ("bandden")))
     {
       if (!quiet &&
-	  Voctave_sparse_controls.get_key ("spumoni") != 0.)
+	  octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
   if (typ != MatrixType::Unknown && 
-      Voctave_sparse_controls.get_key ("spumoni") != 0.)
+      octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Invalidating Matrix Type");
 
   typ = MatrixType::Unknown;
 
   return typ;
 }
 
 int
 MatrixType::type (const SparseMatrix &a)
 {
   if (typ != MatrixType::Unknown && (full ||
-      sp_bandden == Voctave_sparse_controls.get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_key ("bandden")))
     {
-      if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+      if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
   MatrixType tmp_typ (a);
   typ = tmp_typ.typ;
@@ -966,19 +966,19 @@ MatrixType::type (const SparseMatrix &a)
 
   return typ;
 }
 
 int
 MatrixType::type (const SparseComplexMatrix &a)
 {
   if (typ != MatrixType::Unknown && (full || 
-      sp_bandden == Voctave_sparse_controls.get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_key ("bandden")))
     {
-      if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+      if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
   MatrixType tmp_typ (a);
   typ = tmp_typ.typ;
@@ -999,17 +999,17 @@ MatrixType::type (const SparseComplexMat
 
   return typ;
 }
 int
 MatrixType::type (const Matrix &a)
 {
   if (typ != MatrixType::Unknown)
     {
-      if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+      if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
   MatrixType tmp_typ (a);
   typ = tmp_typ.typ;
@@ -1026,17 +1026,17 @@ MatrixType::type (const Matrix &a)
   return typ;
 }
 
 int
 MatrixType::type (const ComplexMatrix &a)
 {
   if (typ != MatrixType::Unknown)
     {
-      if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+      if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
   MatrixType tmp_typ (a);
   typ = tmp_typ.typ;
@@ -1051,17 +1051,17 @@ MatrixType::type (const ComplexMatrix &a
     }
 
   return typ;
 }
 
 void
 MatrixType::info () const
 {
-  if (Voctave_sparse_controls.get_key ("spumoni") != 0.)
+  if (octave_sparse_params::get_key ("spumoni") != 0.)
     {
       if (typ == MatrixType::Unknown)
 	(*current_liboctave_warning_handler) 
 	  ("Unknown Matrix Type");
       else if (typ == MatrixType::Diagonal)
 	(*current_liboctave_warning_handler) 
 	  ("Diagonal Sparse Matrix");
       else if (typ == MatrixType::Permuted_Diagonal)
diff --git a/liboctave/SparseCmplxLU.cc b/liboctave/SparseCmplxLU.cc
--- a/liboctave/SparseCmplxLU.cc
+++ b/liboctave/SparseCmplxLU.cc
@@ -47,37 +47,37 @@ SparseComplexLU::SparseComplexLU (const 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   // Setup the control parameters
   Matrix Control (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_ZNAME (defaults) (control);
 
-  double tmp = Voctave_sparse_controls.get_key ("spumoni");
+  double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
   if (piv_thres >= 0.)
     {
       piv_thres = (piv_thres > 1. ? 1. : piv_thres);
       Control (UMFPACK_SYM_PIVOT_TOLERANCE) = piv_thres;
       Control (UMFPACK_PIVOT_TOLERANCE) = piv_thres;
     }
   else
     {
-      tmp = Voctave_sparse_controls.get_key ("piv_tol");
+      tmp = octave_sparse_params::get_key ("piv_tol");
       if (!xisnan (tmp))
 	{
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
       Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	}
     }
 
   // Set whether we are allowed to modify Q or not
-  tmp = Voctave_sparse_controls.get_key ("autoamd");
+  tmp = octave_sparse_params::get_key ("autoamd");
   if (!xisnan (tmp))
     Control (UMFPACK_FIXQ) = tmp;
 
   // Turn-off UMFPACK scaling for LU 
   Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
   UMFPACK_ZNAME (report_control) (control);
 
@@ -235,44 +235,44 @@ SparseComplexLU::SparseComplexLU (const 
       octave_idx_type nr = a.rows ();
       octave_idx_type nc = a.cols ();
 
       // Setup the control parameters
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_ZNAME (defaults) (control);
 
-      double tmp = Voctave_sparse_controls.get_key ("spumoni");
+      double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
       if (piv_thres >= 0.)
 	{
 	  piv_thres = (piv_thres > 1. ? 1. : piv_thres);
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = piv_thres;
 	  Control (UMFPACK_PIVOT_TOLERANCE) = piv_thres;
 	}
       else
 	{
-	  tmp = Voctave_sparse_controls.get_key ("piv_tol");
+	  tmp = octave_sparse_params::get_key ("piv_tol");
 	  if (!xisnan (tmp))
 	    {
 	      Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	      Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	    }
 	}
 
       if (droptol >= 0.)
 	Control (UMFPACK_DROPTOL) = droptol;
 
       // Set whether we are allowed to modify Q or not
       if (FixedQ)
 	Control (UMFPACK_FIXQ) = 1.0;
       else
 	{
-	  tmp = Voctave_sparse_controls.get_key ("autoamd");
+	  tmp = octave_sparse_params::get_key ("autoamd");
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_FIXQ) = tmp;
 	}
 
       // Turn-off UMFPACK scaling for LU 
       Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
       UMFPACK_ZNAME (report_control) (control);
diff --git a/liboctave/SparsedbleLU.cc b/liboctave/SparsedbleLU.cc
--- a/liboctave/SparsedbleLU.cc
+++ b/liboctave/SparsedbleLU.cc
@@ -46,38 +46,38 @@ SparseLU::SparseLU (const SparseMatrix& 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   // Setup the control parameters
   Matrix Control (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_DNAME (defaults) (control);
 
-  double tmp = Voctave_sparse_controls.get_key ("spumoni");
+  double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
 
   if (piv_thres >= 0.)
     {
       piv_thres = (piv_thres > 1. ? 1. : piv_thres);
       Control (UMFPACK_SYM_PIVOT_TOLERANCE) = piv_thres;
       Control (UMFPACK_PIVOT_TOLERANCE) = piv_thres;
     }
   else
     {
-      tmp = Voctave_sparse_controls.get_key ("piv_tol");
+      tmp = octave_sparse_params::get_key ("piv_tol");
       if (!xisnan (tmp))
 	{
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	  Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	}
     }
 
   // Set whether we are allowed to modify Q or not
-  tmp = Voctave_sparse_controls.get_key ("autoamd");
+  tmp = octave_sparse_params::get_key ("autoamd");
   if (!xisnan (tmp))
     Control (UMFPACK_FIXQ) = tmp;
 
   // Turn-off UMFPACK scaling for LU 
   Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
   UMFPACK_DNAME (report_control) (control);
 
@@ -223,45 +223,45 @@ SparseLU::SparseLU (const SparseMatrix& 
       octave_idx_type nr = a.rows ();
       octave_idx_type nc = a.cols ();
 
       // Setup the control parameters
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_DNAME (defaults) (control);
 
-      double tmp = Voctave_sparse_controls.get_key ("spumoni");
+      double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
       if (piv_thres >= 0.)
 	{
 	  piv_thres = (piv_thres > 1. ? 1. : piv_thres);
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = piv_thres;
 	  Control (UMFPACK_PIVOT_TOLERANCE) = piv_thres;
 	}
       else
 	{
-	  tmp = Voctave_sparse_controls.get_key ("piv_tol");
+	  tmp = octave_sparse_params::get_key ("piv_tol");
 	  if (!xisnan (tmp))
 	    {
 	      Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	      Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	    }
 	}
 
       if (droptol >= 0.)
 	Control (UMFPACK_DROPTOL) = droptol;
 
 
       // Set whether we are allowed to modify Q or not
       if (FixedQ)
 	Control (UMFPACK_FIXQ) = 1.0;
       else
 	{
-	  tmp = Voctave_sparse_controls.get_key ("autoamd");
+	  tmp = octave_sparse_params::get_key ("autoamd");
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_FIXQ) = tmp;
 	}
 
       // Turn-off UMFPACK scaling for LU 
       Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
       UMFPACK_DNAME (report_control) (control);
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -1132,29 +1132,29 @@ SparseMatrix::determinant (octave_idx_ty
     {
       err = 0;
 
       // Setup the control parameters
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_DNAME (defaults) (control);
 
-      double tmp = Voctave_sparse_controls.get_key ("spumoni");
+      double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
 
-      tmp = Voctave_sparse_controls.get_key ("piv_tol");
+      tmp = octave_sparse_params::get_key ("piv_tol");
       if (!xisnan (tmp))
 	{
 	  Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	  Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	}
 
       // Set whether we are allowed to modify Q or not
-      tmp = Voctave_sparse_controls.get_key ("autoamd");
+      tmp = octave_sparse_params::get_key ("autoamd");
       if (!xisnan (tmp))
 	Control (UMFPACK_FIXQ) = tmp;
 
       // Turn-off UMFPACK scaling for LU 
       Control (UMFPACK_SCALE) = UMFPACK_SCALE_NONE;
 
       UMFPACK_DNAME (report_control) (control);
 
@@ -5760,28 +5760,28 @@ SparseMatrix::factorize (octave_idx_type
   err = 0;
 
 #ifdef HAVE_UMFPACK
   // Setup the control parameters
   Control = Matrix (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_DNAME (defaults) (control);
 
-  double tmp = Voctave_sparse_controls.get_key ("spumoni");
+  double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
-  tmp = Voctave_sparse_controls.get_key ("piv_tol");
+  tmp = octave_sparse_params::get_key ("piv_tol");
   if (!xisnan (tmp))
     {
       Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
       Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
     }
 
   // Set whether we are allowed to modify Q or not
-  tmp = Voctave_sparse_controls.get_key ("autoamd");
+  tmp = octave_sparse_params::get_key ("autoamd");
   if (!xisnan (tmp))
     Control (UMFPACK_FIXQ) = tmp;
 
   UMFPACK_DNAME (report_control) (control);
 
   const octave_idx_type *Ap = cidx ();
   const octave_idx_type *Ai = ridx ();
   const double *Ax = data ();
@@ -5888,17 +5888,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -6119,17 +6119,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -6398,17 +6398,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
@@ -6649,17 +6649,17 @@ SparseMatrix::fsolve (MatrixType &mattyp
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
 	  cm->prefer_zomplex = false;
 
-	  double spu = Voctave_sparse_controls.get_key ("spumoni");
+	  double spu = octave_sparse_params::get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
 	    {
 	      cm->print = static_cast<int> (spu) + 2;
diff --git a/liboctave/oct-spparms.cc b/liboctave/oct-spparms.cc
--- a/liboctave/oct-spparms.cc
+++ b/liboctave/oct-spparms.cc
@@ -15,107 +15,199 @@ for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; see the file COPYING.  If not, write to the
 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 Boston, MA 02110-1301, USA.
 
 */
 
-#include "config.h"
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "lo-error.h"
 #include "lo-ieee.h"
 
 #include "oct-spparms.h"
 
-SparseParams Voctave_sparse_controls;
+octave_sparse_params *octave_sparse_params::instance = 0;
+
+bool
+octave_sparse_params::instance_ok (void)
+{
+  bool retval = true;
+
+  if (! instance)
+    instance = new octave_sparse_params ();
+
+  if (! instance)
+    {
+      (*current_liboctave_error_handler)
+	("unable to create octave_sparse_params object!");
+
+      retval = false;
+    }
+
+  return retval;
+}
+
+void
+octave_sparse_params::defaults (void)
+{
+  if (instance_ok ())
+    instance->do_defaults ();
+}
 
 void
-SparseParams::defaults (void)
+octave_sparse_params::tight (void)
+{
+  if (instance_ok ())
+    instance->do_tight ();
+}
+
+string_vector
+octave_sparse_params::get_keys (void)
+{
+  return instance_ok () ? instance->do_get_keys () : string_vector ();
+}
+
+ColumnVector
+octave_sparse_params::get_vals (void)
+{
+  return instance_ok () ? instance->do_get_vals () : ColumnVector ();
+}
+
+bool
+octave_sparse_params::set_vals (const NDArray& vals)
 {
-  Voctave_sparse_controls (0) = 0;    // spumoni
-  Voctave_sparse_controls (1) = 1;    // ths_rel
-  Voctave_sparse_controls (2) = 1;    // ths_abs
-  Voctave_sparse_controls (3) = 0;    // exact_d
-  Voctave_sparse_controls (4) = 3;    // supernd
-  Voctave_sparse_controls (5) = 3;    // rreduce
-  Voctave_sparse_controls (6) = 0.5;  // wh_frac
-  Voctave_sparse_controls (7) = 1;    // autommd
-  Voctave_sparse_controls (8) = 1;    // autoamd
-  Voctave_sparse_controls (9) = 0.1;  // piv_tol
-  Voctave_sparse_controls (10) = 0.5; // bandden
-  Voctave_sparse_controls (11) = 1;   // umfpack
+  return instance_ok () ? instance->do_set_vals (vals) : false;
+}
+
+bool
+octave_sparse_params::set_key (const std::string& key, const double& val)
+{
+  return instance_ok () ? instance->do_set_key (key, val) : false;
+}
+
+double
+octave_sparse_params::get_key (const std::string& key)
+{
+  return instance_ok () ? instance->do_get_key (key) : octave_NaN;
+}
+
+void
+octave_sparse_params::print_info (std::ostream& os, const std::string& prefix)
+{
+  if (instance_ok ())
+    instance->do_print_info (os, prefix);
 }
 
 void
-SparseParams::tight (void)
+octave_sparse_params::do_defaults (void)
 {
-  Voctave_sparse_controls (0) = 0;    // spumoni
-  Voctave_sparse_controls (1) = 1;    // ths_rel
-  Voctave_sparse_controls (2) = 0;    // ths_abs
-  Voctave_sparse_controls (3) = 1;    // exact_d
-  Voctave_sparse_controls (4) = 1;    // supernd
-  Voctave_sparse_controls (5) = 1;    // rreduce
-  Voctave_sparse_controls (6) = 0.5;  // wh_frac
-  Voctave_sparse_controls (7) = 1;    // autommd
-  Voctave_sparse_controls (8) = 1;    // autoamd
-  Voctave_sparse_controls (9) = 0.1;  // piv_tol
-  Voctave_sparse_controls (10) = 0.5; // bandden
-  Voctave_sparse_controls (11) = 1;   // umfpack
+  params(0) = 0;    // spumoni
+  params(1) = 1;    // ths_rel
+  params(2) = 1;    // ths_abs
+  params(3) = 0;    // exact_d
+  params(4) = 3;    // supernd
+  params(5) = 3;    // rreduce
+  params(6) = 0.5;  // wh_frac
+  params(7) = 1;    // autommd
+  params(8) = 1;    // autoamd
+  params(9) = 0.1;  // piv_tol
+  params(10) = 0.5; // bandden
+  params(11) = 1;   // umfpack
+}
+
+void
+octave_sparse_params::do_tight (void)
+{
+  params(0) = 0;    // spumoni
+  params(1) = 1;    // ths_rel
+  params(2) = 0;    // ths_abs
+  params(3) = 1;    // exact_d
+  params(4) = 1;    // supernd
+  params(5) = 1;    // rreduce
+  params(6) = 0.5;  // wh_frac
+  params(7) = 1;    // autommd
+  params(8) = 1;    // autoamd
+  params(9) = 0.1;  // piv_tol
+  params(10) = 0.5; // bandden
+  params(11) = 1;   // umfpack
 }
   
 void
-SparseParams::init_keys (void)
+octave_sparse_params::init_keys (void)
 {
-  keys (0) = "spumoni";
-  keys (1) = "ths_rel";
-  keys (2) = "ths_abs";
-  keys (3) = "exact_d";
-  keys (4) = "supernd";
-  keys (5) = "rreduce";
-  keys (6) = "wh_frac";
-  keys (7) = "autommd";
-  keys (8) = "autoamd";
-  keys (9) = "piv_tol";
-  keys (10) = "bandden";
-  keys (11) = "umfpack";
-}
-
-SparseParams& 
-SparseParams::operator = (const SparseParams& a)
-{
-  for (int i = 0; i < OCTAVE_SPARSE_CONTROLS_SIZE; i++)
-    params (i) = a.params (i);
-
-  return *this;
+  keys(0) = "spumoni";
+  keys(1) = "ths_rel";
+  keys(2) = "ths_abs";
+  keys(3) = "exact_d";
+  keys(4) = "supernd";
+  keys(5) = "rreduce";
+  keys(6) = "wh_frac";
+  keys(7) = "autommd";
+  keys(8) = "autoamd";
+  keys(9) = "piv_tol";
+  keys(10) = "bandden";
+  keys(11) = "umfpack";
 }
 
 bool
-SparseParams::set_key (const std::string key, const double& val)
+octave_sparse_params::do_set_vals (const NDArray& vals)
+{
+  octave_idx_type len = vals.length ();
+
+  if (len > OCTAVE_SPARSE_CONTROLS_SIZE)
+    {
+      (*current_liboctave_error_handler)
+	("octave_sparse_params::do_set_vals: too many values");
+
+      return false;
+    }
+  else
+    {
+      for (int i = 0; i < len; i++)
+	params(i) = vals(i);
+
+      return true;
+    }
+}
+
+bool
+octave_sparse_params::do_set_key (const std::string& key, const double& val)
 {
   for (int i = 0; i < OCTAVE_SPARSE_CONTROLS_SIZE; i++)
-    if (keys (i) == key)
-      {
-	params(i) = val;
-	return true;
-      }
+    {
+      if (keys (i) == key)
+	{
+	  params(i) = val;
+	  return true;
+	}
+    }
+
   return false;
 }
 
 double
-SparseParams::get_key (const std::string key)
+octave_sparse_params::do_get_key (const std::string& key)
 {
   for (int i = 0; i < OCTAVE_SPARSE_CONTROLS_SIZE; i++)
-    if (keys (i) == key)
+    {
+      if (keys (i) == key)
 	return params(i);
+    }
 
   return octave_NaN;
 }
 
 void
-SparseParams::print_info (std::ostream& os, const std::string& prefix) const
+octave_sparse_params::do_print_info (std::ostream& os,
+				     const std::string& prefix) const
 {
   for (int i = 0; i < OCTAVE_SPARSE_CONTROLS_SIZE; i++)
     os << prefix << keys(i) << ": " << params(i) << "\n";
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/oct-spparms.h b/liboctave/oct-spparms.h
--- a/liboctave/oct-spparms.h
+++ b/liboctave/oct-spparms.h
@@ -25,55 +25,79 @@ Boston, MA 02110-1301, USA.
 
 #include <cassert>
 #include <cstddef>
 
 #include <iostream>
 
 #include "str-vec.h"
 #include "dColVector.h"
+#include "dNDArray.h"
 
 #define OCTAVE_SPARSE_CONTROLS_SIZE 12
 
 class
-SparseParams
+octave_sparse_params
 {
- public:
-  SparseParams (void) : params (ColumnVector (OCTAVE_SPARSE_CONTROLS_SIZE)), 
-    keys (string_vector (OCTAVE_SPARSE_CONTROLS_SIZE)) 
-    { defaults (); init_keys (); }
-  
-  void defaults (void);
+protected:
 
-  void tight (void);
-  
-  SparseParams& operator = (const SparseParams& a);
+  octave_sparse_params (void)
+    : params (OCTAVE_SPARSE_CONTROLS_SIZE),
+      keys (OCTAVE_SPARSE_CONTROLS_SIZE) 
+  {
+    init_keys ();
+    do_defaults ();
+  }
+
+public:
+
+  static bool instance_ok (void);
+
+  static void defaults (void);
+
+  static void tight (void);
   
-  double& operator () (int n) { return params (n); }
-  double operator () (int n) const { return params (n); }
+  static string_vector get_keys (void);
 
-  string_vector get_keys (void) const { return keys; }
+  static ColumnVector get_vals (void);
 
-  ColumnVector get_vals (void) const { return params; }
+  static bool set_vals (const NDArray& vals);
 
-  bool set_key (const std::string key, const double& val);
+  static bool set_key (const std::string& key, const double& val);
 
-  double get_key (const std::string key);
+  static double get_key (const std::string& key);
 
-  void print_info (std::ostream& os, const std::string& prefix) const;
-  
- private:
-  void init_keys (void);
+  static void print_info (std::ostream& os, const std::string& prefix);
+
+private:
 
   ColumnVector params;
 
   string_vector keys;
-};
+
+  static octave_sparse_params *instance;
+
+  void do_defaults (void);
+
+  void do_tight (void);
+  
+  string_vector do_get_keys (void) const { return keys; }
+
+  ColumnVector do_get_vals (void) const { return params; }
 
-extern SparseParams Voctave_sparse_controls;
+  bool do_set_vals (const NDArray& vals);
+
+  bool do_set_key (const std::string& key, const double& val);
+
+  double do_get_key (const std::string& key);
+
+  void do_print_info (std::ostream& os, const std::string& prefix) const;
+  
+  void init_keys (void);
+};
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -94,17 +94,17 @@ sparse_base_chol<chol_type, chol_elt, p_
     }
 
   cholmod_common *cm = &Common;
 
   // Setup initial parameters
   CHOLMOD_NAME(start) (cm);
   cm->prefer_zomplex = false;
 
-  double spu = Voctave_sparse_controls.get_key ("spumoni");
+  double spu = octave_sparse_params::get_key ("spumoni");
   if (spu == 0.)
     {
       cm->print = -1;
       cm->print_function = 0;
     }
   else
     {
       cm->print = static_cast<int> (spu) + 2;
diff --git a/src/DLD-FUNCTIONS/spchol.cc b/src/DLD-FUNCTIONS/spchol.cc
--- a/src/DLD-FUNCTIONS/spchol.cc
+++ b/src/DLD-FUNCTIONS/spchol.cc
@@ -393,17 +393,17 @@ factorization as determined by @var{typ}
     }
 
 #ifdef HAVE_CHOLMOD
 
   cholmod_common Common;
   cholmod_common *cm = &Common;
   CHOLMOD_NAME(start) (cm);
 
-  double spu = Voctave_sparse_controls.get_key ("spumoni");
+  double spu = octave_sparse_params::get_key ("spumoni");
   if (spu == 0.)
     {
       cm->print = -1;
       cm->print_function = NULL;
     }
   else
     {
       cm->print = static_cast<int> (spu) + 2;
diff --git a/src/DLD-FUNCTIONS/spparms.cc b/src/DLD-FUNCTIONS/spparms.cc
--- a/src/DLD-FUNCTIONS/spparms.cc
+++ b/src/DLD-FUNCTIONS/spparms.cc
@@ -86,75 +86,74 @@ time.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       if (nargout == 0)
-	Voctave_sparse_controls.print_info (octave_stdout, "");
+	octave_sparse_params::print_info (octave_stdout, "");
       else if (nargout == 1)
-	retval(0) =  Voctave_sparse_controls.get_vals ();
+	retval(0) =  octave_sparse_params::get_vals ();
       else if (nargout == 2)
 	{
-	  retval (0) = Voctave_sparse_controls.get_keys ();
-	  retval (1) = Voctave_sparse_controls.get_vals ();
+	  retval (0) = octave_sparse_params::get_keys ();
+	  retval (1) = octave_sparse_params::get_vals ();
 	}
       else
 	error ("spparms: too many output arguments"); 
     }
   else if (nargin == 1)
     {
       if (args(0).is_string ())
 	{
 	  std::string str = args(0).string_value ();
 	  int len = str.length ();
 	  for (int i = 0; i < len; i++)
 	    str [i] = tolower (str [i]);
 
 	  if (str == "defaults")
-	    Voctave_sparse_controls.defaults ();
+	    octave_sparse_params::defaults ();
 	  else if (str == "tight")
-	    Voctave_sparse_controls.tight ();
+	    octave_sparse_params::tight ();
 	  else
 	    {
-	      double val = Voctave_sparse_controls.get_key (str);
+	      double val = octave_sparse_params::get_key (str);
 	      if (xisnan (val))
 		error ("spparams: unrecognized key");
 	      else
 		retval (0) = val;
 	    }
 	}
       else
 	{
 	  NDArray vals = args(0).array_value ();
 
 	  if (error_state)
 	    error ("spparms: input must be a string or a vector");
 	  else if (vals.numel () > OCTAVE_SPARSE_CONTROLS_SIZE)
 	    error ("spparams: too many elements in values vector");
 	  else
-	    for (int i = 0; i < vals.length (); i++)
-	      Voctave_sparse_controls (i) = vals (i);
+	    octave_sparse_params::set_vals (vals);
 	}
     }
   else if (nargin == 2)
     {
       if (args(0).is_string ())
 	{
 	  std::string str = args(0).string_value ();
 	  
 	  double val = args(1).double_value ();
 
 	  if (error_state)
 	    error ("spparms: second argument must be a real scalar");
           else if (str == "umfpack")
 	    warning ("spparms: request to disable umfpack solvers ignored");
-	  else if (!Voctave_sparse_controls.set_key (str, val))
+	  else if (!octave_sparse_params::set_key (str, val))
 	    error ("spparms: key not found");
 	}
       else
 	error ("spparms: first argument must be a string");
     }
   else
     error ("spparms: too many input arguments");
 
