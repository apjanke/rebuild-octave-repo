# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260878825 -3600
#      Tue Dec 15 13:07:05 2009 +0100
# Node ID 76cf4aec34e9d955997cdfadfac6be044b0c1b7d
# Parent  bb30843c49291763758539af81bcff5eebc23b77
allow functions returning no value in cellfun

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-12-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Preserve original nargout. Call
+	functions with this value. Use nargout1 to possibly accumulate extra
+	outputs, as long as they are defined.
+
 2009-12-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.cc (octave_range::do_index_op): Defer single subscript to
 	new Range methods.
 
 2009-12-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.cc (symbol_table::cleanup): New static method.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -267,17 +267,17 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 @end group\n\
 @end example\n\
 \n\
 @seealso{isempty, islogical, isreal, length, ndims, numel, size}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
-  nargout = (nargout < 1 ? 1 : nargout);
+  int nargout1 = (nargout < 1 ? 1 : nargout);
 
   if (nargin < 2)
     {
       error ("cellfun: you must supply at least 2 arguments");
       print_usage ();
       return retval;
     }
 
@@ -504,17 +504,17 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
             }
         }
 
       if (error_handler.is_defined ())
         buffer_error_messages++;
 
       if (uniform_output)
         {
-          OCTAVE_LOCAL_BUFFER (std::auto_ptr<scalar_col_helper>, retptr, nargout);
+          OCTAVE_LOCAL_BUFFER (std::auto_ptr<scalar_col_helper>, retptr, nargout1);
 
           for (octave_idx_type count = 0; count < k ; count++)
             {
               for (int j = 0; j < nargin; j++)
                 {
                   if (mask[j])
                     inputlist(j) = cinputs[j](count);
                 }
@@ -536,40 +536,45 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 
                   if (error_state)
                     goto cellfun_err;
                 }
 
               if (error_state)
                 goto cellfun_err;
 
-              if (tmp.length() < nargout)
+              if (tmp.length () < nargout1)
                 {
-                  error ("cellfun: too many output arguments");
-                  goto cellfun_err;
+                  if (tmp.length () < nargout)
+                    {
+                      error ("cellfun: too many output arguments");
+                      goto cellfun_err;
+                    }
+                  else
+                    nargout1 = 0;
                 }
 
               if (count == 0)
                 {
-                  for (int j = 0; j < nargout; j++)
+                  for (int j = 0; j < nargout1; j++)
                     {
                       octave_value val = tmp(j);
 
                       if (val.numel () == 1)
                         retptr[j].reset (make_col_helper (val, fdims));
                       else
                         {
                           error ("cellfun: expecting all values to be scalars for UniformOutput = true");
                           break;
                         }
                     }
                 }
               else
                 {
-                  for (int j = 0; j < nargout; j++)
+                  for (int j = 0; j < nargout1; j++)
                     {
                       octave_value val = tmp(j);
 
                       if (! retptr[j]->collect (count, val))
                         {
                           // FIXME: A more elaborate structure would allow again a virtual
                           // constructor here.
                           retptr[j].reset (new scalar_col_helper_def (retptr[j]->result (), 
@@ -578,29 +583,29 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
                         }
                     }
                 }
 
               if (error_state)
                 break;
             }
 
-          retval.resize (nargout);
-          for (int j = 0; j < nargout; j++)
+          retval.resize (nargout1);
+          for (int j = 0; j < nargout1; j++)
             {
               if (retptr[j].get ())
                 retval(j) = retptr[j]->result ();
               else
                 retval(j) = Matrix ();
             }
         }
       else
         {
-          OCTAVE_LOCAL_BUFFER (Cell, results, nargout);
-          for (int j = 0; j < nargout; j++)
+          OCTAVE_LOCAL_BUFFER (Cell, results, nargout1);
+          for (int j = 0; j < nargout1; j++)
             results[j].resize (fdims);
 
           for (octave_idx_type count = 0; count < k ; count++)
             {
               for (int j = 0; j < nargin; j++)
                 {
                   if (mask[j])
                     inputlist(j) = cinputs[j](count);
@@ -623,29 +628,34 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 
                   if (error_state)
                     goto cellfun_err;
                 }
 
               if (error_state)
                 goto cellfun_err;
 
-              if (tmp.length() < nargout)
+              if (tmp.length () < nargout1)
                 {
-                  error ("cellfun: too many output arguments");
-                  goto cellfun_err;
+                  if (tmp.length () < nargout)
+                    {
+                      error ("cellfun: too many output arguments");
+                      goto cellfun_err;
+                    }
+                  else
+                    nargout1 = 0;
                 }
 
 
-              for (int j = 0; j < nargout; j++)
+              for (int j = 0; j < nargout1; j++)
                 results[j](count) = tmp(j);
             }
 
-          retval.resize(nargout);
-          for (int j = 0; j < nargout; j++)
+          retval.resize(nargout1);
+          for (int j = 0; j < nargout1; j++)
             retval(j) = results[j];
         }
 
 cellfun_err:
       if (error_state)
         retval = octave_value_list();
 
       unwind_protect::run_frame (uwp_frame);
