# HG changeset patch
# User jwe
# Date 845142999 0
#      Sat Oct 12 17:56:39 1996 +0000
# Node ID d9147efd1a9348370ead28b3f97db21903b05460
# Parent  09652906683810a66c702920daf52fe1423e17f3
[project @ 1996-10-12 17:56:38 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -158,26 +158,26 @@ ComplexMatrix::ComplexMatrix (const Comp
 
 ComplexMatrix::ComplexMatrix (const charMatrix& a)
 {
   for (int i = 0; i < a.cols (); i++)
     for (int j = 0; j < a.rows (); j++)
       elem (i, j) = a.elem (i, j);
 }
 
-int
+bool
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
-    return 0;
+    return false;
 
   return equal (data (), a.data (), length ());
 }
 
-int
+bool
 ComplexMatrix::operator != (const ComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
 // destructive insert/delete/reorder operations
 
 ComplexMatrix&
@@ -1663,18 +1663,17 @@ ComplexMatrix
 operator * (const ComplexColumnVector& v, const ComplexRowVector& a)
 {
   ComplexMatrix retval;
 
   int len = v.length ();
   int a_len = a.length ();
 
   if (len != a_len)
-    (*current_liboctave_error_handler)
-      ("nonconformant vector multiplication attempted");
+    gripe_nonconformant ("operator *", len, 1, 1, a_len);
   else
     {
       if (len != 0)
 	{
 	  retval.resize (len, a_len);
 	  Complex *c = retval.fortran_vec ();
 
 	  F77_XFCN (zgemm, ZGEMM, ("N", "N", len, a_len, 1, 1.0,
@@ -1780,92 +1779,107 @@ operator - (const Complex& s, const Comp
 
 // matrix by diagonal matrix -> matrix operations
 
 ComplexMatrix&
 ComplexMatrix::operator += (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = rows ();
+  int a_nc = cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = rows ();
+  int a_nc = cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator += (const ComplexDiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = rows ();
+  int a_nc = cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const ComplexDiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = rows ();
+  int a_nc = cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix
 operator + (const Matrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -1874,20 +1888,23 @@ operator + (const Matrix& m, const Compl
   return result;
 }
 
 ComplexMatrix
 operator - (const Matrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -1903,18 +1920,17 @@ operator * (const Matrix& m, const Compl
 
   int nr = m.rows ();
   int nc = m.cols ();
 
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (nc != a_nr)
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, a_nc, 0.0);
       else
 	{
 	  retval.resize (nr, a_nc);
 	  Complex *c = retval.fortran_vec ();
@@ -1955,20 +1971,23 @@ operator * (const Matrix& m, const Compl
 
 // diagonal matrix by matrix -> matrix operations
 
 ComplexMatrix
 operator + (const DiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (a);
   for (int i = 0; i < m.length (); i++)
@@ -1977,20 +1996,23 @@ operator + (const DiagMatrix& m, const C
   return result;
 }
 
 ComplexMatrix
 operator - (const DiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (-a);
   for (int i = 0; i < m.length (); i++)
@@ -1999,22 +2021,23 @@ operator - (const DiagMatrix& m, const C
   return result;
 }
 
 ComplexMatrix
 operator * (const DiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
+
   int a_nr = a.rows ();
   int a_nc = a.cols ();
+
   if (nc != a_nr)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix multiplication attempted");
+      gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, nc, 0.0);
 
   ComplexMatrix c (nr, a_nc);
 
@@ -2047,20 +2070,23 @@ operator * (const DiagMatrix& m, const C
   return c;
 }
 
 ComplexMatrix
 operator + (const ComplexDiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (a);
   for (int i = 0; i < m.length (); i++)
@@ -2069,20 +2095,23 @@ operator + (const ComplexDiagMatrix& m, 
   return result;
 }
 
 ComplexMatrix
 operator - (const ComplexDiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (-a);
   for (int i = 0; i < m.length (); i++)
@@ -2091,22 +2120,23 @@ operator - (const ComplexDiagMatrix& m, 
   return result;
 }
 
 ComplexMatrix
 operator * (const ComplexDiagMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
+
   int a_nr = a.rows ();
   int a_nc = a.cols ();
+
   if (nc != a_nr)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix multiplication attempted");
+      gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, a_nc, 0.0);
 
   ComplexMatrix c (nr, a_nc);
 
@@ -2139,20 +2169,23 @@ operator * (const ComplexDiagMatrix& m, 
   return c;
 }
 
 ComplexMatrix
 operator + (const ComplexDiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (a);
   for (int i = 0; i < m.length (); i++)
@@ -2161,20 +2194,23 @@ operator + (const ComplexDiagMatrix& m, 
   return result;
 }
 
 ComplexMatrix
 operator - (const ComplexDiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (-a);
   for (int i = 0; i < m.length (); i++)
@@ -2183,22 +2219,23 @@ operator - (const ComplexDiagMatrix& m, 
   return result;
 }
 
 ComplexMatrix
 operator * (const ComplexDiagMatrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
+
   int a_nr = a.rows ();
   int a_nc = a.cols ();
+
   if (nc != a_nr)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix multiplication attempted");
+      gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, a_nc, 0.0);
 
   ComplexMatrix c (nr, a_nc);
 
@@ -2233,20 +2270,23 @@ operator * (const ComplexDiagMatrix& m, 
 
 // matrix by matrix -> matrix operations
 
 ComplexMatrix&
 ComplexMatrix::operator += (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -2254,20 +2294,23 @@ ComplexMatrix::operator += (const Matrix
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -2275,20 +2318,23 @@ ComplexMatrix::operator -= (const Matrix
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator += (const ComplexMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix += operation attempted");
+      gripe_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -2296,20 +2342,23 @@ ComplexMatrix::operator += (const Comple
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const ComplexMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix -= operation attempted");
+      gripe_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
@@ -2443,20 +2492,23 @@ operator / (const Complex& s, const Matr
 
 // matrix by diagonal matrix -> matrix operations
 
 ComplexMatrix
 operator + (const ComplexMatrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -2465,20 +2517,23 @@ operator + (const ComplexMatrix& m, cons
   return result;
 }
 
 ComplexMatrix
 operator - (const ComplexMatrix& m, const DiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -2490,21 +2545,21 @@ operator - (const ComplexMatrix& m, cons
 ComplexMatrix
 operator * (const ComplexMatrix& m, const DiagMatrix& a)
 {
   ComplexMatrix retval;
 
   int nr = m.rows ();
   int nc = m.cols ();
 
+  int a_nr = a.rows ();
   int a_nc = a.cols ();
 
-  if (nc != a.rows ())
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+  if (nc != a_nr)
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, nc, 0.0);
       else
 	{
 	  retval.resize (nr, a_nc);
 	  Complex *c = retval.fortran_vec ();
@@ -2542,20 +2597,23 @@ operator * (const ComplexMatrix& m, cons
   return retval;
 }
 
 ComplexMatrix
 operator + (const ComplexMatrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -2564,20 +2622,23 @@ operator + (const ComplexMatrix& m, cons
   return result;
 }
 
 ComplexMatrix
 operator - (const ComplexMatrix& m, const ComplexDiagMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   ComplexMatrix result (m);
   for (int i = 0; i < a.length (); i++)
@@ -2589,21 +2650,21 @@ operator - (const ComplexMatrix& m, cons
 ComplexMatrix
 operator * (const ComplexMatrix& m, const ComplexDiagMatrix& a)
 {
   ComplexMatrix retval;
 
   int nr = m.rows ();
   int nc = m.cols ();
 
+  int a_nr = a.rows ();
   int a_nc = a.cols ();
 
-  if (nc != a.rows ())
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+  if (nc != a_nr)
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, nc, 0.0);
       else
 	{
 	  retval.resize (nr, nc);
 	  Complex *c = retval.fortran_vec ();
@@ -2643,71 +2704,83 @@ operator * (const ComplexMatrix& m, cons
 
 // matrix by matrix -> matrix operations
 
 ComplexMatrix
 operator + (const ComplexMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (add (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 operator - (const ComplexMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (subtract (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 operator + (const Matrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix addition attempted");
+      gripe_nonconformant ("operator +", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   return ComplexMatrix (add (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 operator - (const Matrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix subtraction attempted");
+      gripe_nonconformant ("operator -", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (subtract (m.data (), a.data (), m.length ()), nr, nc);
 }
@@ -2729,21 +2802,21 @@ operator * (const Matrix& m, const Compl
 ComplexMatrix
 operator * (const ComplexMatrix& m, const ComplexMatrix& a)
 {
   ComplexMatrix retval;
 
   int nr = m.rows ();
   int nc = m.cols ();
 
+  int a_nr = a.rows ();
   int a_nc = a.cols ();
 
-  if (nc != a.rows ())
-    (*current_liboctave_error_handler)
-      ("nonconformant matrix multiplication attempted");
+  if (nc != a_nr)
+    gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
 	retval.resize (nr, nc, 0.0);
       else
 	{
 	  int ld  = nr;
 	  int lda = a.rows ();
@@ -2764,74 +2837,86 @@ operator * (const ComplexMatrix& m, cons
   return retval;
 }
 
 ComplexMatrix
 product (const ComplexMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix product attempted");
+      gripe_nonconformant ("product", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (multiply (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 quotient (const ComplexMatrix& m, const Matrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix quotient attempted");
+      gripe_nonconformant ("quotient", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (divide (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 product (const Matrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix product attempted");
+      gripe_nonconformant ("product", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (multiply (m.data (), a.data (), m.length ()), nr, nc);
 }
 
 ComplexMatrix
 quotient (const Matrix& m, const ComplexMatrix& a)
 {
   int nr = m.rows ();
   int nc = m.cols ();
-  if (nr != a.rows () || nc != a.cols ())
+
+  int a_nr = a.rows ();
+  int a_nc = a.cols ();
+
+  if (nr != a_nr || nc != a_nc)
     {
-      (*current_liboctave_error_handler)
-	("nonconformant matrix quotient attempted");
+      gripe_nonconformant ("quotient", nr, nc, a_nr, a_nc);
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0)
     return ComplexMatrix (nr, nc);
 
   return ComplexMatrix (divide (m.data (), a.data (), m.length ()), nr, nc);
 }
@@ -2849,25 +2934,42 @@ map (c_c_Mapper f, const ComplexMatrix& 
 void
 ComplexMatrix::map (c_c_Mapper f)
 {
   for (int j = 0; j < cols (); j++)
     for (int i = 0; i < rows (); i++)
       elem (i, j) = f (elem (i, j));
 }
 
+bool
+ComplexMatrix::any_element_is_inf_or_nan (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	Complex val = elem (i, j);
+	if (xisinf (val) || xisnan (val))
+	  return true;
+      }
+
+  return false;
+}
+
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
-int
+bool
 ComplexMatrix::all_integers (double& max_val, double& min_val) const
 {
   int nr = rows ();
-  int nc = columns ();
+  int nc = cols ();
 
   if (nr > 0 && nc > 0)
     {
       Complex val = elem (0, 0);
 
       double r_val = real (val);
       double i_val = imag (val);
 
@@ -2876,17 +2978,17 @@ ComplexMatrix::all_integers (double& max
 
       if (i_val > max_val)
 	max_val = i_val;
 
       if (i_val < max_val)
 	min_val = i_val;
     }
   else
-    return 0;
+    return false;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
 	double r_val = real (val);
 	double i_val = imag (val);
@@ -2899,43 +3001,44 @@ ComplexMatrix::all_integers (double& max
 
 	if (r_val < min_val)
 	  min_val = r_val;
 
 	if (i_val < min_val)
 	  min_val = i_val;
 
 	if (D_NINT (r_val) != r_val || D_NINT (i_val) != i_val)
-	  return 0;
+	  return false;
       }
-  return 1;
+
+  return true;
 }
 
-int
+bool
 ComplexMatrix::too_large_for_float (void) const
 {
   int nr = rows ();
-  int nc = columns ();
+  int nc = cols ();
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
 	double r_val = real (val);
 	double i_val = imag (val);
 
 	if (r_val > FLT_MAX
 	    || i_val > FLT_MAX
 	    || r_val < FLT_MIN
 	    || i_val < FLT_MIN)
-	  return 1;
+	  return true;
       }
 
-  return 0;
+  return false;
 }
 
 Matrix
 ComplexMatrix::all (void) const
 {
   int nr = rows ();
   int nc = cols ();
   Matrix retval;
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -64,18 +64,18 @@ public:
   ComplexMatrix (const charMatrix& a);
 
   ComplexMatrix& operator = (const ComplexMatrix& a)
     {
       MArray2<Complex>::operator = (a);
       return *this;
     }
 
-  int operator == (const ComplexMatrix& a) const;
-  int operator != (const ComplexMatrix& a) const;
+  bool operator == (const ComplexMatrix& a) const;
+  bool operator != (const ComplexMatrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, int r, int c);
   ComplexMatrix& insert (const RowVector& a, int r, int c);
   ComplexMatrix& insert (const ColumnVector& a, int r, int c);
   ComplexMatrix& insert (const DiagMatrix& a, int r, int c);
 
@@ -315,18 +315,19 @@ public:
   friend ComplexMatrix product (const Matrix& a, const ComplexMatrix& b);
   friend ComplexMatrix quotient (const Matrix& a, const ComplexMatrix& b);
 
   // other operations
 
   friend ComplexMatrix map (c_c_Mapper f, const ComplexMatrix& a);
   void map (c_c_Mapper f);
 
-  int all_integers (double& max_val, double& min_val) const;
-  int too_large_for_float (void) const;
+  bool any_element_is_inf_or_nan (void) const;
+  bool all_integers (double& max_val, double& min_val) const;
+  bool too_large_for_float (void) const;
 
   Matrix all (void) const;
   Matrix any (void) const;
 
   ComplexMatrix cumprod (void) const;
   ComplexMatrix cumsum (void) const;
   ComplexMatrix prod (void) const;
   ComplexMatrix sum (void) const;
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -68,26 +68,26 @@ charMatrix::charMatrix (const string_vec
   for (int i = 0; i < nr; i++)
     {
       int nc = s[i].length ();
       for (int j = 0; j < nc; j++)
 	elem (i, j) = s[i][j];
     }
 }
 
-int
+bool
 charMatrix::operator == (const charMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
 
-int
+bool
 charMatrix::operator != (const charMatrix& a) const
 {
   return !(*this == a);
 }
 
 charMatrix&
 charMatrix::insert (const char *s, int r, int c)
 {
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -54,18 +54,18 @@ public:
   charMatrix (const string_vector& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
       MArray2<char>::operator = (a);
       return *this;
     }
 
-  int operator == (const charMatrix& a) const;
-  int operator != (const charMatrix& a) const;
+  bool operator == (const charMatrix& a) const;
+  bool operator != (const charMatrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   string row_as_string (int r) const;
 
