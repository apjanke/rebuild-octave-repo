# HG changeset patch
# User Rik <rik@octave.org>
# Date 1400168222 25200
#      Thu May 15 08:37:02 2014 -0700
# Branch gui-release
# Node ID be569698970c47a0bf3eb3ebc8ebfb989e3674d7
# Parent  64bd9afac22c71628457d6c7c9c5b873e20de7d6
# Parent  83c85d95ac7bae52c00433a63b7b8dd8270c8474
maint: Periodic merge of stable to gui-release.

diff --git a/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp b/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
--- a/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
+++ b/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
@@ -959,17 +959,19 @@ void Vt102Emulation::sendKeyEvent( QKeyE
         // (unless there is an entry defined for this particular combination
         //  in the keyboard modifier)
         bool wantsAltModifier = entry.modifiers() & entry.modifierMask() & Qt::AltModifier;
         bool wantsAnyModifier = entry.state() & entry.stateMask() & KeyboardTranslator::AnyModifierState;
 
         if ( modifiers & Qt::AltModifier && !(wantsAltModifier || wantsAnyModifier)
              && !event->text().isEmpty() )
         {
-            textToSend.prepend("\033");
+#if !defined(Q_OS_MAC)
+          textToSend.prepend("\033");
+#endif
         }
 
         if ( entry.command() != KeyboardTranslator::NoCommand )
         {
             if (entry.command() & KeyboardTranslator::EraseCommand)
                 textToSend += getErase();
             // TODO command handling
         }
diff --git a/libinterp/corefcn/profiler.cc b/libinterp/corefcn/profiler.cc
--- a/libinterp/corefcn/profiler.cc
+++ b/libinterp/corefcn/profiler.cc
@@ -31,17 +31,21 @@ along with Octave; see the file COPYING.
 #include "ov-struct.h"
 #include "pager.h"
 #include "profiler.h"
 
 profile_data_accumulator::enter::enter (profile_data_accumulator& a,
                                         const std::string& f)
   : acc (a)
 {
-  if (acc.is_active ())
+  // FIXME: Add test for f != "" to prevent a blank line showing up
+  //        in profiler statistics.  See bug #39524.  The root cause
+  //        is that the function name is not set for the recurring readline
+  //        hook function.
+  if (acc.is_active () && f != "")
     {
       fcn = f;
       acc.enter_function (fcn);
     }
   else
     fcn = "";
 }
 
@@ -99,18 +103,20 @@ profile_data_accumulator::tree_node::ent
 
   ++retval->calls;
   return retval;
 }
 
 profile_data_accumulator::tree_node*
 profile_data_accumulator::tree_node::exit (octave_idx_type fcn)
 {
-  assert (parent);
-  assert (fcn_id == fcn);
+  // FIXME: These assert statements don't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //  assert (parent);
+  //  assert (fcn_id == fcn);
 
   return parent;
 }
 
 void
 profile_data_accumulator::tree_node::build_flat (flat_profile& data) const
 {
   // If this is not the top-level node, update profile entry for this function.
@@ -123,17 +129,17 @@ profile_data_accumulator::tree_node::bui
 
       assert (parent);
       if (parent->fcn_id != 0)
         {
           entry.parents.insert (parent->fcn_id);
           data[parent->fcn_id - 1].children.insert (fcn_id);
         }
 
-      if (!entry.recursive)
+      if (! entry.recursive)
         for (const tree_node* i = parent; i; i = i->parent)
           if (i->fcn_id == fcn_id)
             {
               entry.recursive = true;
               break;
             }
     }
 
@@ -202,17 +208,17 @@ profile_data_accumulator::~profile_data_
 }
 
 void
 profile_data_accumulator::set_active (bool value)
 {
   if (value)
     {
       // Create a call-tree top-node if there isn't yet one.
-      if (!call_tree)
+      if (! call_tree)
         call_tree = new tree_node (0, 0);
 
       // Let the top-node be the active one.  This ensures we have a clean
       // fresh start collecting times.
       active_fcn = call_tree;
     }
   else
     {
@@ -244,32 +250,37 @@ profile_data_accumulator::enter_function
       fcn_idx = known_functions.size ();
       fcn_index[fcn] = fcn_idx;
     }
   else
     fcn_idx = pos->second;
 
   active_fcn = active_fcn->enter (fcn_idx);
   last_time = query_time ();
+
 }
 
 void
 profile_data_accumulator::exit_function (const std::string& fcn)
 {
   assert (call_tree);
-  assert (active_fcn != call_tree);
+  // FIXME: This assert statements doesn't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //assert (active_fcn != call_tree);
 
   // Usually, if we are disabled this function is not even called.  But the
   // call disabling the profiler is an exception.  So also check here
   // and only record the time if enabled.
   if (is_active ())
     add_current_time ();
 
   fcn_index_map::iterator pos = fcn_index.find (fcn);
-  assert (pos != fcn_index.end ());
+  // FIXME: This assert statements doesn't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //assert (pos != fcn_index.end ());
   active_fcn = active_fcn->exit (pos->second);
 
   // If this was an "inner call", we resume executing the parent function
   // up the stack.  So note the start-time for this!
   last_time = query_time ();
 }
 
 void
@@ -403,17 +414,17 @@ profile_data_accumulator::add_current_ti
   active_fcn->add_time (t - last_time);
 }
 
 profile_data_accumulator profiler;
 
 // Enable or disable the profiler data collection.
 DEFUN (__profiler_enable__, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_enable ()\n\
+@deftypefn {Function File} __profiler_enable__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   const int nargin = args.length ();
   if (nargin > 0)
     {
@@ -429,17 +440,17 @@ Undocumented internal function.\n\
   retval(0) = profiler.is_active ();
 
   return retval;
 }
 
 // Clear all collected profiling data.
 DEFUN (__profiler_reset__, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_reset ()\n\
+@deftypefn {Function File} __profiler_reset__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   const int nargin = args.length ();
 
   if (nargin > 0)
     warning ("profiler_reset: ignoring extra arguments");
@@ -447,24 +458,25 @@ Undocumented internal function.\n\
   profiler.reset ();
 
   return retval;
 }
 
 // Query the timings collected by the profiler.
 DEFUN (__profiler_data__, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_data ()\n\
+@deftypefn {Function File} __profiler_data__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   const int nargin = args.length ();
 
   if (nargin > 0)
     warning ("profiler_data: ignoring extra arguments");
 
-  retval(0) = profiler.get_flat ();
   if (nargout > 1)
     retval(1) = profiler.get_hierarchical ();
+  retval(0) = profiler.get_flat ();
 
   return retval;
 }
+
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -649,16 +649,17 @@ octave_user_function::special_expr (void
   return stmt->expression ();
 }
 
 bool
 octave_user_function::subsasgn_optimization_ok (void)
 {
   bool retval = false;
   if (Voptimize_subsasgn_calls
+      && param_list && ret_list
       && param_list->length () > 0 && ! param_list->varargs_only ()
       && ret_list->length () == 1 && ! ret_list->takes_varargs ())
     {
       tree_identifier *par1 = param_list->front ()->ident ();
       tree_identifier *ret1 = ret_list->front ()->ident ();
       retval = par1->name () == ret1->name ();
     }
 
diff --git a/scripts/plot/util/figure.m b/scripts/plot/util/figure.m
--- a/scripts/plot/util/figure.m
+++ b/scripts/plot/util/figure.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} figure
 ## @deftypefnx {Command} {} figure @var{n}
 ## @deftypefnx {Function File} {} figure (@var{n})
 ## @deftypefnx {Function File} {} figure (@dots{}, "@var{property}", @var{value}, @dots{})
-## @deftypefnx {Function File} {@var{h} =} figure (@var{dots})
+## @deftypefnx {Function File} {@var{h} =} figure (@dots{})
 ## Create a new figure window for plotting.
 ##
 ## If no arguments are specified, a new figure with the next available number
 ## is created.
 ##
 ## If called with an integer @var{n}, and no such numbered figure exists, then
 ## a new figure with the specified number is created.  If the figure already
 ## exists then it is made visible and becomes the current figure for plotting.
diff --git a/scripts/plot/util/isaxes.m b/scripts/plot/util/isaxes.m
--- a/scripts/plot/util/isaxes.m
+++ b/scripts/plot/util/isaxes.m
@@ -30,27 +30,35 @@
 
 function retval = isaxes (h)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   hlist = ishandle (h);
+  retval = hlist;
+
   if (any (hlist))
     retval(hlist) = strcmp (get (h(hlist), "type"), "axes");
-  else
-    retval = hlist;
   endif
 
 endfunction
 
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ();
 %!   assert (isaxes (hax));
 %!   assert (! isaxes (-hax));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   assert (isaxes ([hax NaN]), [true false]);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/util/private/__go_draw_axes__.m b/scripts/plot/util/private/__go_draw_axes__.m
--- a/scripts/plot/util/private/__go_draw_axes__.m
+++ b/scripts/plot/util/private/__go_draw_axes__.m
@@ -1599,18 +1599,19 @@ function __go_draw_axes__ (h, plot_strea
     if (rows (textcolors) > 1)
       ## Gnuplot is unable to assign arbitrary colors to each text entry
       ## for the key/legend.  But, the text color can be set to match the
       ## color of the plot object.
       colorspec = "textcolor variable";
     else
       colorspec = get_text_colorspec (textcolors, mono);
     endif
-    fprintf (plot_stream, "set key %s %s;\nset key %s %s %s %s %s;\n",
-             inout, pos, box, reverse, horzvert, fontspec, colorspec);
+    fprintf (plot_stream, "set key %s %s;\nset key %s %s %s %s %s %s;\n",
+             inout, pos, box, reverse, horzvert, fontspec, colorspec,
+             __do_enhanced_option__ (enhanced, hlgnd));
   else
     fputs (plot_stream, "unset key;\n");
   endif
   fputs (plot_stream, "set style data lines;\n");
 
   cmap = [cmap; addedcmap];
   cmap_sz = cmap_sz + rows (addedcmap);
   if (length (cmap) > 0)
@@ -2160,17 +2161,17 @@ function do_tics_1 (ticmode, tics, mtics
         if (mirror)
           fprintf (plot_stream, "set %stics %s %s %s mirror (", ax,
                    tickdir, ticklength, axispos);
         else
           fprintf (plot_stream, "set %stics %s %s %s nomirror (", ax,
                    tickdir, ticklength, axispos);
         endif
 
-        labels = regexprep (labels, '%', "%%");
+        labels = strrep (labels, "%", "%%");
         for i = 1:ntics
           fprintf (plot_stream, " \"%s\" %.15g", labels{k++}, tics(i));
           if (i < ntics)
             fputs (plot_stream, ", ");
           endif
           if (k > nlabels)
             k = 1;
           endif
@@ -2317,48 +2318,20 @@ function [str, f, s] = __maybe_munge_tex
       else
         str = __tex2enhanced__ (str, fnt, it, bld);
       endif
     elseif (strcmpi (obj.interpreter, "latex"))
       if (! warned_latex)
         warning ("latex markup not supported for text objects");
         warned_latex = true;
       endif
-    elseif (enhanced)
-      str = no_super_sub_scripts (str);
     endif
   endif
 endfunction
 
-function str = no_super_sub_scripts (str)
-  if (iscellstr (str))
-    labels = str;
-  else
-    labels = cellstr (str);
-  endif
-  for marker = "_^" 
-    for m = 1 : numel (labels)
-      n1 = strfind (labels{m}, sprintf ("\\%s", marker));
-      n2 = strfind (labels{m}, marker);
-      if (! isempty (n1))
-        n1 = n1 + 1;
-        n2 = setdiff (n2, n1);
-      endif
-      for n = numel (n2):-1:1
-        labels{m} = [labels{m}(1:n2(n)-1), "\\", labels{m}(n2(n):end)];
-      endfor
-    endfor
-  endfor
-  if (iscellstr (str))
-    str = labels;
-  else
-    str = char (labels);
-  endif
-endfunction
-
 function str = __tex2enhanced__ (str, fnt, it, bld)
   persistent sym = __setup_sym_table__ ();
   persistent flds = fieldnames (sym);
 
   [s, e, m] = regexp (str, "\\\\([a-zA-Z]+|0)", "start", "end", "matches");
 
   for i = length (s) : -1 : 1
     ## special case for "\0"  and replace with "{/Symbol \306}'
