# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1467895364 14400
#      Thu Jul 07 08:42:44 2016 -0400
# Node ID 737b1d9d7ee31169b389aa156d6b8da44bea75ba
# Parent  9d2fc58e9eb6ee6c4e24b046f4c09fd78ee3075d
use octave::sys::time instead of C library time function

* graphics.cc, kpse.cc: Use octave::sys::time instead of calling C
library time function directly.
* bootstrap.conf: Drop unneeded time and times modules from list
(octave::sys::time uses gettimeofday instead of calling time).

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -101,18 +101,16 @@ gnulib_modules="
   strptime
   strsignal
   symlink
   sys_stat
   sys_time
   sys_times
   sys_wait
   tempname
-  time
-  times
   tmpfile
   trunc
   truncf
   uname
   unistd
   unlink
   unsetenv
   vasprintf
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -22,29 +22,29 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cctype>
 #include <cfloat>
 #include <cstdlib>
-#include <ctime>
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 #include <sstream>
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-locbuf.h"
+#include "oct-time.h"
 #include "singleton-cleanup.h"
 
 #include "builtins.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "graphics.h"
 #include "input.h"
@@ -11501,17 +11501,17 @@ In all cases, typing CTRL-C stops progra
   octave::unwind_protect frame;
 
   static uint32_t id_counter = 0;
   uint32_t id = 0;
 
   int max_arg_index = 0;
   int timeout_index = -1;
 
-  int timeout = 0;
+  double timeout = 0;
 
   if (args.length () > 1)
     {
       pname = args(1).xstring_value ("waitfor: PROP must be a string");
 
       if (pname.empty ())
         error ("waitfor: PROP must be a non-empty string");
 
@@ -11616,18 +11616,17 @@ In all cases, typing CTRL-C stops progra
       timeout_index = max_arg_index + 1;
     }
 
   if (timeout_index >= 0)
     {
       if (args.length () <= (timeout_index + 1))
         error ("waitfor: missing TIMEOUT value");
 
-      timeout = static_cast<int>
-        (args(timeout_index + 1).xscalar_value ("waitfor: TIMEOUT must be a scalar >= 1"));
+      timeout = args(timeout_index + 1).xscalar_value ("waitfor: TIMEOUT must be a scalar >= 1");
 
       if (timeout < 1)
         {
           warning ("waitfor: TIMEOUT value must be >= 1, using 1 instead");
           timeout = 1;
         }
     }
 
@@ -11641,20 +11640,20 @@ In all cases, typing CTRL-C stops progra
   //
   //        Using deletefcn callback is also unreliable as it could be
   //        modified during a callback execution and the waitfor loop
   //        would not stop.
   //
   //        The only "good" implementation would require object
   //        listeners, similar to property listeners.
 
-  time_t start = 0;
+  octave::sys::time start;
 
   if (timeout > 0)
-    start = time (0);
+    start.stamp ();
 
   while (true)
     {
       if (true)
         {
           gh_manager::auto_lock guard;
 
           graphics_handle gh = gh_manager::lookup (h);
@@ -11671,17 +11670,19 @@ In all cases, typing CTRL-C stops progra
       octave_sleep (0.1); // FIXME: really needed?
 
       OCTAVE_QUIT;
 
       octave::command_editor::run_event_hooks ();
 
       if (timeout > 0)
         {
-          if (start + timeout < time (0))
+          octave::sys::time now;
+
+          if (start + timeout < now)
             break;
         }
     }
 
   return ovl ();
 }
 
 DEFUN (__zoom__, args, ,
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -28,29 +28,29 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cctype>
 #include <cerrno>
 #include <cstdlib>
-#include <ctime>
 
 #include <map>
 #include <fstream>
 #include <iostream>
 #include <string>
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "kpse.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
+#include "oct-time.h"
 #include "pathsearch.h"
 #include "unistd-wrappers.h"
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
@@ -259,17 +259,20 @@ static bool first_search = true;
 /* This function is called after every search.  */
 
 static void
 log_search (const std::list<std::string>& filenames)
 {
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     {
       for (const auto &filename : filenames)
-        std::cerr << time (0) << " " << filename << std::endl;
+        {
+          octave::sys::time now;
+          std::cerr << now.unix_time () << " " << filename << std::endl;
+        }
     }
 }
 
 /* Concatenate each element in DIRS with NAME (assume each ends with a
    /, to save time).  If SEARCH_ALL is false, return the first readable
    regular file.  Else continue to search for more.  In any case, if
    none, return a list containing just NULL.
 
