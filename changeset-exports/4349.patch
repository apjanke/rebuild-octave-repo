# HG changeset patch
# User jwe
# Date 1045853947 0
#      Fri Feb 21 18:59:07 2003 +0000
# Node ID a6c22c2c9b097e8baa145cfc79d0d29d4e76bcd1
# Parent  05415e529cef5dc854020a710cc0f8ae452091a5
[project @ 2003-02-21 18:59:07 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for copysign and signbit.
+
 2003-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/Makefile.in (DISTFILES): Add otags.1 to the list.
 
 2003-02-18  Dirk Eddelbuettel <edd@debian.org>
 
 	* emacs/otags.1: New file.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.413 $)
+AC_REVISION($Revision: 1.414 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1096,17 +1096,17 @@ case "$canonical_host_type" in
     AC_MSG_RESULT([defining SCO to be 1])
     AC_DEFINE(SCO, 1, [Define if using an SCO system.])
     AC_MSG_RESULT([forcing HAVE_ISINF for SCO])
     AC_DEFINE(HAVE_ISINF, 1, [Define if you have isinf().])
     AC_MSG_RESULT([forcing HAVE_ISNAN for SCO])
     AC_DEFINE(HAVE_ISNAN, 1, [Define if you have isnan().])
   ;;
   *)
-    AC_CHECK_FUNCS(finite isnan isinf)
+    AC_CHECK_FUNCS(finite isnan isinf copysign signbit)
   ;;
 esac
 
 ### Check for nonstandard but common math functions that we need.
 
 AC_CHECK_FUNCS(acosh asinh atanh erf erfc)
 
 ### Checks for OS specific cruft.
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2482,19 +2482,25 @@ ComplexMatrix::any_element_is_inf_or_nan
 
 bool
 ComplexMatrix::all_elements_are_real (void) const
 {
   int nr = rows ();
   int nc = cols ();
 
   for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      if (imag (elem (i, j)) != 0.0)
-	return false;
+    {
+      for (int i = 0; i < nr; i++)
+	{
+	  double ip = imag (elem (i, j));
+
+	  if (ip != 0.0 || lo_ieee_signbit (ip))
+	    return false;
+	}
+    }
 
   return true;
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CMatrix.cc (ComplexMatrix::all_elements_are_real): Don't lose -0
+	imaginary parts.
+
+	* lo-ieee.h (lo_ieee_signbit): New macro.
+
 2003-02-18  David Bateman <dbateman@free.fr>
 
 	* dMatrix.cc (Matrix::inverse, Matrix::determinant, Matrix::solve):
 	Use Lapack instead of Linpack.
 	* Cmatrix.cc (ComplexMatrix::inverse, ComplexMatrix::determinant,
 	ComplexMatrix::solve): Likewise.
 
 	* dMatrix.cc (Matrix::determinant, Matrix::inverse): New arg,
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -61,16 +61,32 @@ extern int lo_ieee_isinf (double x);
 
 extern int lo_ieee_is_NA (double);
 extern int lo_ieee_is_NaN_or_NA (double);
 
 extern double lo_ieee_inf_value (void);
 extern double lo_ieee_na_value (void);
 extern double lo_ieee_nan_value (void);
 
+// In the following definitions, only check x < 0 explicitly to avoid
+// a function call when it looks like signbit or copysign are actually
+// functions.
+
+#if defined (signbit)
+#define lo_ieee_signbit(x) signbit (x)
+#elif defined (HAVE_SIGNBIT)
+#define lo_ieee_signbit(x) (x < 0 || signbit (x))
+#elif defined (copysign)
+#define lo_ieee_signbit(x) (copysign (1.0, x) < 0)
+#elif defined (HAVE_COPYSIGN)
+#define lo_ieee_signbit(x) (x < 0 || copysign (1.0, x) < 0)
+#else
+#define lo_ieee_signbit(x) 0
+#endif
+
 #ifdef	__cplusplus
 }
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1183,17 +1183,17 @@ pr_complex (std::ostream& os, const Comp
 
   double r = tmp.real ();
 
   pr_float (os, r, r_fw);
 
   if (! bank_format)
     {
       double i = tmp.imag ();
-      if (! (hex_format || bit_format) && i < 0)
+      if (! (hex_format || bit_format) && lo_ieee_signbit (i))
 	{
 	  os << " - ";
 	  i = -i;
 	  pr_imag_float (os, i, i_fw);
 	}
       else
 	{
 	  if (hex_format || bit_format)
