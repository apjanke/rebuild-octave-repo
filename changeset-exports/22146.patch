# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1468944454 14400
#      Tue Jul 19 12:07:34 2016 -0400
# Node ID ef91e43f162ab4ccc7e894f54c6a4955a9725b39
# Parent  cf5145769e3782c64fffac5f2183f266c256adad
set DLL directory when loading DLLs on Windows systems (bug #48511)

* file-ops.h (file_ops::dirname): New function.

* oct-shlib.cc (set_dll_directory): New function.
(octave_w32_shlib::octave_w32_shlib): Call file_ops::dirname to get
directory part of shared library file, then use set_dll_directory to
temporarily alter DLL search path.

* ov-java.cc (set_dll_directory): Delete.
(initialize_jvm): Don't set DLL search path for Windows systems here.
That job is now handled by octave::dynamic_library.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -325,36 +325,16 @@ get_module_filename (HMODULE hMod)
           n *= 2;
           retval.resize (n);
         }
     }
 
   return (found ? retval : "");
 }
 
-static void
-set_dll_directory (const std::string& dir = "")
-{
-  typedef BOOL (WINAPI *dllfcn_t) (LPCTSTR path);
-
-  static dllfcn_t dllfcn = 0;
-  static bool first = true;
-
-  if (! dllfcn && first)
-    {
-      HINSTANCE hKernel32 = GetModuleHandle ("kernel32");
-      dllfcn = reinterpret_cast<dllfcn_t> (GetProcAddress (hKernel32,
-                                           "SetDllDirectoryA"));
-      first = false;
-    }
-
-  if (dllfcn)
-    dllfcn (dir.empty () ? 0 : dir.c_str ());
-}
-
 #endif
 
 static std::string
 initial_java_dir (void)
 {
   static std::string java_dir;
 
   if (java_dir.empty ())
@@ -514,17 +494,16 @@ initialize_jvm (void)
   JNIEnv *current_env;
   const char *static_locale = setlocale (LC_ALL, 0);
   const std::string locale (static_locale);
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   HMODULE hMod = GetModuleHandle ("jvm.dll");
   std::string jvm_lib_path;
-  std::string old_cwd;
 
   if (hMod)
     {
       // JVM seems to be already loaded, better to use that DLL instead
       // of looking in the registry, to avoid opening a different JVM.
       jvm_lib_path = get_module_filename (hMod);
 
       if (jvm_lib_path.empty ())
@@ -553,30 +532,16 @@ initialize_jvm (void)
 
       key = key + "\\" + value;
       value = "RuntimeLib";
       jvm_lib_path = read_registry_string (key, value);
 
       if (jvm_lib_path.empty ())
         error ("unable to find Java Runtime Environment: %s::%s",
                key.c_str (), value.c_str ());
-
-      std::string jvm_bin_path;
-
-      value = "JavaHome";
-      jvm_bin_path = read_registry_string (key, value);
-      if (! jvm_bin_path.empty ())
-        {
-          jvm_bin_path = (jvm_bin_path + std::string ("\\bin"));
-
-          old_cwd = octave::sys::env::get_current_directory ();
-
-          set_dll_directory (jvm_bin_path);
-          octave::sys::env::chdir (jvm_bin_path);
-        }
     }
 
 #else
 
   // JAVA_LDPATH determined by configure and set in config.h
 #  if defined (__APPLE__)
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.dylib");
 #  else
@@ -590,25 +555,16 @@ initialize_jvm (void)
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
   octave::dynamic_library lib (jvm_lib_path);
 
   if (! lib)
     error ("unable to load Java Runtime Environment from %s",
            jvm_lib_path.c_str ());
 
-#if defined (OCTAVE_USE_WINDOWS_API)
-
-  set_dll_directory ();
-
-  if (! old_cwd.empty ())
-    octave::sys::env::chdir (old_cwd);
-
-#endif
-
   JNI_CreateJavaVM_t create_vm =
     reinterpret_cast<JNI_CreateJavaVM_t> (lib.search ("JNI_CreateJavaVM"));
   JNI_GetCreatedJavaVMs_t get_vm =
     reinterpret_cast<JNI_GetCreatedJavaVMs_t> (lib.search ("JNI_GetCreatedJavaVMs"));
 
   if (! create_vm)
     error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
 
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -94,16 +94,26 @@ namespace octave
       }
 
       static std::string tilde_expand (const std::string&);
 
       static string_vector tilde_expand (const string_vector&);
 
       static std::string concat (const std::string&, const std::string&);
 
+      // Return the directory part of a filename or an empty string if
+      // there is no directory component.  Does not check to see
+      // whether the file exists or is a directory.
+      static std::string dirname (const std::string& path)
+      {
+        size_t ipos = path.find_last_of (dir_sep_chars ());
+
+        return (ipos != std::string::npos) ? path.substr (0, ipos) : "";
+      }
+      
       // Return the tail member of a filename.
       static std::string tail (const std::string& path)
       {
         size_t ipos = path.find_last_of (dir_sep_chars ());
 
         if (ipos != std::string::npos)
           ipos++;
         else
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -50,16 +50,17 @@ extern int dlclose (void *);
 #elif defined (HAVE_SHL_LOAD_API)
 #  include <dl.h>
 #elif defined (HAVE_LOADLIBRARY_API)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 }
 
+#include "file-ops.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-shlib.h"
 #include "str-vec.h"
 
 namespace octave
 {
   dynamic_library::dynlib_rep::dynlib_rep (const std::string& f)
@@ -334,21 +335,33 @@ namespace octave
 
     octave_w32_shlib (const octave_w32_shlib&);
 
     octave_w32_shlib& operator = (const octave_w32_shlib&);
 
     HINSTANCE handle;
   };
 
+  static void
+  set_dll_directory (const std::string& dir = "")
+  {
+    SetDllDirectory (dir.empty () ? 0 : dir.c_str ());
+  }
+
   octave_w32_shlib::octave_w32_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), handle (0)
   {
+    std::string dir = octave::sys::file_ops::dirname (f);
+
+    set_dll_directory (dir);
+
     handle = LoadLibrary (file.c_str ());
 
+    set_dll_directory ();
+    
     if (! handle)
       {
         DWORD lastError = GetLastError ();
         const char *msg;
 
         switch (lastError)
           {
           case ERROR_MOD_NOT_FOUND:
