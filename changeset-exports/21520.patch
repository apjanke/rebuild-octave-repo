# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458664004 25200
#      Tue Mar 22 09:26:44 2016 -0700
# Node ID e1c921322ba2ab9241123c59ddc0552fe410ab14
# Parent  8e5eca2c5a64fe933fe591489c70bd96ca8c24b4
Fix configuration conditions in oct-fftw.cc

* oct-fftw.cc: Include "nproc.h" if either HAVE_FFTW3_THREADS or
HAVE_FFTW3F_THREADS are defined.
(octave_fftw_planner::threads): Use HAVE_FFTW3_THREADS in conditional.

diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
 
-#if defined (HAVE_FFTW3_THREADS)
+#if defined (HAVE_FFTW3_THREADS) || defined (HAVE_FFTW3F_THREADS)
 #  include "nproc.h"
 #endif
 
 octave_fftw_planner *octave_fftw_planner::instance = 0;
 
 // Helper class to create and cache FFTW plans for both 1D and
 // 2D. This implementation defaults to using FFTW_ESTIMATE to create
 // the plans, which in theory is suboptimal, but provides quite
@@ -123,17 +123,17 @@ octave_fftw_planner::instance_ok (void)
       ("unable to create octave_fftw_planner object!");
 
   return retval;
 }
 
 void
 octave_fftw_planner::threads (int nt)
 {
-#if defined (HAVE_FFTW3F_THREADS)
+#if defined (HAVE_FFTW3_THREADS)
   if (instance_ok () && nt != threads ())
     {
       instance->nthreads = nt;
       fftw_plan_with_nthreads (nt);
       // Clear the current plans.
       instance->rplan = instance->plan[0] = instance->plan[1] = 0;
     }
 #else
