# HG changeset patch
# User jwe
# Date 953872043 0
#      Fri Mar 24 04:27:23 2000 +0000
# Node ID 0aeae5fe4ab72a408f21e0001b38371a428531e6
# Parent  f90fbcddaa75d221e5aeccddc39ea6a5fbbd91da
[project @ 2000-03-24 04:27:23 by jwe]

diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -39,33 +39,16 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "error.h"
 #include "input.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "utils.h"
 
-std::istream&
-octave_scan (std::istream& is, const char *fmt, ...)
-{
-#if defined (__GNUG__)
-
-  va_list args;
-  va_start (args, fmt);
-
-  is.vscan (fmt, args);
-
-  va_end (args);
-
-#endif
-
-  return is;
-}
-
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
 //   2 : value is NaN
 //   3 : value is not an integer
 
 static int
 convert_to_valid_int (const octave_value& tc, int& conv_err)
@@ -1019,23 +1002,78 @@ octave_base_stream::read (const Matrix& 
 	}
     }
   else
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
+#if defined (__GNUG__)
+
+#define OCTAVE_SCAN_0(is, fmt) is.scan ((fmt).text)
+
+#define OCTAVE_SCAN_1(is, fmt, arg) is.scan ((fmt).text, arg)
+
+#else
+
+#define OCTAVE_SCAN_0(is, fmt) octave_scan (is, fmt)
+
+#define OCTAVE_SCAN_1(is, fmt, arg) octave_scan (is, fmt, arg)
+
+std::istream&
+octave_scan (std::istream& is, const scanf_format_elt& fmt)
+{
+  return is;
+}
+
+template <class T>
+std::istream&
+octave_scan (std::istream& is, const scanf_format_elt& fmt, T valptr)
+{
+  is >> std::ios::skipws;
+
+  if (fmt.width > 0)
+    is >> width (elt.width);
+
+  is >> valptr;
+
+  return is;
+}
+
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, char*);
+
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, int*);
+
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, long int*);
+
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, short int*);
+
+#if 0
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, float*);
+#endif
+
+template std::istream&
+octave_scan (std::istream&, const scanf_format_elt&, double*);
+
+#endif
+
 template <class T>
 void
-do_scanf_conv (std::istream& is, const char *fmt, T valptr, Matrix& mval,
-	       double *data, int& idx, int& conversion_count, int nr,
-	       int max_size, bool discard) 
+do_scanf_conv (std::istream& is, const scanf_format_elt& fmt,
+	       T valptr, Matrix& mval, double *data, int& idx,
+	       int& conversion_count, int nr, int max_size,
+	       bool discard) 
 {
-  octave_scan (is, fmt, valptr);
+  OCTAVE_SCAN_1 (is, fmt, valptr);
 
   if (is)
     {
       if (idx == max_size && ! discard)
 	{
 	  max_size *= 2;
 
 	  if (nr > 0)
@@ -1050,36 +1088,36 @@ do_scanf_conv (std::istream& is, const c
 	{
 	  conversion_count++;
 	  data[idx++] = *(valptr);
 	}
     }
 }
 
 template void
-do_scanf_conv (std::istream&, const char*, int*, Matrix&, double*, int&,
-	       int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, int*, Matrix&,
+	       double*, int&, int&, int, int, bool);
 
 template void
-do_scanf_conv (std::istream&, const char*, long int*, Matrix&, double*, int&,
-	       int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, long int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
 
 template void
-do_scanf_conv (std::istream&, const char*, short int*, Matrix&, double*, int&,
-	       int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, short int*,
+	       Matrix&, double*, int&, int&, int, int, bool);
 
 #if 0
 template void
-do_scanf_conv (std::istream&, const char*, float*, Matrix&, double*, int&,
-	       int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, float*,
+	       Matrix&, double*, int&, int&, int, int, bool);
 #endif
 
 template void
-do_scanf_conv (std::istream&, const char*, double*, Matrix&, double*, int&,
-	       int&, int, int, bool);
+do_scanf_conv (std::istream&, const scanf_format_elt&, double*,
+	       Matrix&, double*, int&, int&, int, int, bool);
 
 #define DO_WHITESPACE_CONVERSION() \
   do \
     { \
       int c = EOF; \
  \
       while (is && (c = is.get ()) != EOF && isspace (c)) \
 	/* skip whitespace */; \
@@ -1139,17 +1177,17 @@ do_scanf_conv (std::istream&, const char
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char [width+1]; \
  \
-	  octave_scan (is, fmt, tmp); \
+	  OCTAVE_SCAN_1 (is, *elt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  int c = EOF; \
@@ -1180,17 +1218,17 @@ do_scanf_conv (std::istream&, const char
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char[width+1]; \
  \
-	  octave_scan (is, fmt, tmp); \
+	  OCTAVE_SCAN_1 (is, *elt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  std::string char_class = elt->char_class; \
@@ -1394,17 +1432,17 @@ octave_base_stream::do_scanf (scanf_form
 		case scanf_format_elt::literal_conversion:
 		  DO_LITERAL_CONVERSION ();
 		  break;
 
 		case '%':
 		  {
 		    int dummy;
 
-		    octave_scan (is, fmt, &dummy);
+		    OCTAVE_SCAN_1 (is, *elt, &dummy);
 		  }
 		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
@@ -1594,17 +1632,17 @@ octave_base_stream::scanf (const std::st
 	case 0:
 	  {
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    if (elt)
 	      {
 		is.clear ();
 
-		octave_scan (is, elt->text);
+		OCTAVE_SCAN_0 (is, *elt);
 
 		if (! is)
 		  {
 		    // If it looks like we have a matching failure, then
 		    // reset the failbit in the stream state.
 
 		    if (is.rdstate () & std::ios::failbit)
 		      is.clear (is.rdstate () & (~std::ios::failbit));
@@ -1678,40 +1716,40 @@ octave_base_stream::do_oscanf (const sca
 	    case scanf_format_elt::literal_conversion:
 	      DO_LITERAL_CONVERSION ();
 	      break;
 
 	    case '%':
 	      {
 		int dummy;
 
-		if (! octave_scan (is, fmt, &dummy))
+		if (! OCTAVE_SCAN_1 (is, *elt, &dummy))
 		  quit = true;
 	      }
 	      break;
 
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	      {
 		int tmp;
 
-		if (octave_scan (is, fmt, &tmp))
+		if (OCTAVE_SCAN_1 (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = static_cast<double> (tmp);
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
 		double tmp;
 
-		if (octave_scan (is, fmt, &tmp))
+		if (OCTAVE_SCAN_1 (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = tmp;
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
@@ -1813,17 +1851,17 @@ octave_base_stream::oscanf (const std::s
 	case 0:
 	  {
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    if (elt)
 	      {
 		is.clear ();
 
-		octave_scan (is, elt->text);
+		OCTAVE_SCAN_0 (is, *elt);
 
 		if (! is)
 		  {
 		    error ("fscanf: read error");
 
 		    // XXX FIXME XXX -- is this the right thing to do?
 
 		    if (interactive && name () == "stdin")
