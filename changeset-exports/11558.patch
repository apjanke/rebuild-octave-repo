# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295290775 18000
#      Mon Jan 17 13:59:35 2011 -0500
# Node ID 1e4dfc7a9487f41cd086c93ccbf6e496f35e2fb4
# Parent  e9d72a3caa46a99b0caa4293a305cd62f8dbb183
use .argn. to store argument names for inputname function

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-17  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/inputname.m: Use __varval__ to lookup ".argn."
+	instead of "argn".
+
 2011-01-16  Ben Abbott <bpabbott@mac.com>
 
 	* plot/print.m: For DOS, connect the pipe to ghostscript (bug 31967),
 	and redirect to NUL instead of /dev/null.
 
 2011-01-16  John W. Eaton  <jwe@octave.org>
 
 	* gethelp.cc (main): Write function name along with file name in
diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -23,17 +23,17 @@
 ## @deftypefn {Function File} {} inputname (@var{n})
 ## Return the name of the @var{n}-th argument to the calling function.
 ## If the argument is not a simple variable name, return an empty string.
 ## @end deftypefn
 
 function s = inputname (n)
 
   if (nargin == 1)
-    s = evalin ("caller", sprintf ("deblank (argn(%d,:));", n));
+    s = evalin ("caller", sprintf ("__varval__ (\".argn.\"){%d};", n));
     ## For compatibility with Matlab, return empty string if argument
     ## name is not a valid identifier.
     if (! isvarname (s))
       s = "";
     endif
   else
     print_usage ();
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-17  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr-fcn.cc (octave_user_function::bind_automatic_vars):
+	Save argument names in hidden variable .argn..
+
+	* variables.cc (F__varval__): New function.
+
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr-fcn.cc (bind_automatic_vars): Mark variables created
 	here as automatic.
 
 	* symtab.h (symbol_table::mark_automatic): New function.
 	(symbol_table::do_mark_automatic): New function.
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -539,19 +539,28 @@ octave_user_function::print_code_functio
 
 void
 octave_user_function::bind_automatic_vars
   (const string_vector& arg_names, int nargin, int nargout,
    const octave_value_list& va_args, const std::list<octave_lvalue> *lvalue_list)
 {
   if (! arg_names.empty ())
     {
+      // It is better to save this in the hidden variable .argn. and
+      // then use that in the inputname function instead of using argn,
+      // which might be redefined in a function.  Keep the old argn name
+      // for backward compatibility of functions that use it directly.
+
       symbol_table::varref ("argn") = arg_names;
+      symbol_table::varref (".argn.") = Cell (arg_names);
+
+      symbol_table::mark_hidden (".argn.");
 
       symbol_table::mark_automatic ("argn");
+      symbol_table::mark_automatic (".argn.");
     }
 
   symbol_table::varref (".nargin.") = nargin;
   symbol_table::varref (".nargout.") = nargout;
 
   symbol_table::mark_hidden (".nargin.");
   symbol_table::mark_hidden (".nargout.");
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -2540,8 +2540,31 @@ void maybe_missing_function_hook (const 
       // Clear the variable prior to calling the function.
       const std::string func_name = Vmissing_function_hook;
       Vmissing_function_hook.clear ();
 
       // Call.
       feval (func_name, octave_value (name));
     }
 }
+
+DEFUN (__varval__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __varval__ (@var{name})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+        retval = symbol_table::varval (args(0).string_value ());
+      else
+        error ("__varval__: expecting argument to be variable name");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
