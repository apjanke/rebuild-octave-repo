# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1389817426 18000
#      Wed Jan 15 15:23:46 2014 -0500
# Branch gui-release
# Node ID 78c3b4cb0c7f2f850b5a3a71155281e4a3549c88
# Parent  12291fb903de5cf2c1bcdfce3b0ad6460389c5d8
# Parent  9a43d8d6e29ed1d9c29f3916f7064ebbbcb955f1
maint: Periodic merge of stable to gui-release.

diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -165,16 +165,27 @@ Package for Makefile generation
 (@url{http://www.gnu.org/software/automake}).  Automake is required if
 you modify Octave's @code{Makefile.am} files or other files that they
 depend on.
 
 @item Libtool
 Package for building software libraries
 (@url{http://www.gnu.org/software/libtool}).  Libtool is required by
 Automake.
+
+@item gperf
+Perfect hash function generator (@url{http://www.gnu.org/software/gperf}).
+You will need gperf if you modify the @code{octave.gperf} file or if you
+delete the file that is generated from it.
+
+@item Texinfo
+Package for generating online and print documentation
+(@url{http://www.gnu.org/software/texinfo}).  You will need Texinfo to
+build Octave's documentation or if you modify the documentation source
+files or the docstring of any Octave function.
 @end table
 
 @node External Packages
 @subsection External Packages
 
 The following external packages are required:
 
 @table @asis
@@ -250,16 +261,22 @@ Image processing library (@url{http://ww
 GraphicsMagick++ is used to provide the @code{imread} and @code{imwrite}
 functions.
 
 @item HDF5
 Library for manipulating portable data files
 (@url{http://www.hdfgroup.org/HDF5}).  @sc{hdf5} is required for Octave's
 @code{load} and @code{save} commands to read and write HDF data files.
 
+@item Java Development Kit
+Java programming language compiler and libraries.  The OpenJDK free
+software implementation is recommended (@url{http://openjdk.java.net/}),
+although other JDK implementations may work.  Java is required to be able
+to call Java functions from within Octave.
+
 @item LLVM
 Compiler framework, (@url{http://www.llvm.org}).  LLVM is required for
 Octave's experimental just-in-time (JIT) compilation for speeding up the
 interpreter.
 
 @item OpenGL
 API for portable 2-D and 3-D graphics (@url{http://www.opengl.org}).  An
 OpenGL implementation is required to provide Octave's OpenGL-based
diff --git a/etc/HACKING b/etc/HACKING
--- a/etc/HACKING
+++ b/etc/HACKING
@@ -49,16 +49,20 @@ the maintainer tools we depend upon, inc
   - gperf <http://www.gnu.org/software/gperf/>
   - Gzip <http://www.gnu.org/software/gzip/>
   - Libtool <http://www.gnu.org/software/libtool/>
   - Mercurial <http://mercurial.selenic.com/>
   - Perl <http://www.cpan.org/>
   - Rsync <http://samba.anu.edu.au/rsync/>
   - Tar <http://www.gnu.org/software/tar/>
 
+In addition to these maintainer tools, Octave makes use of many external
+libraries and packages.  See the file doc/interpreter/install.txi for the
+complete list of required and optional dependencies.
+
 Only building the initial full source tree will be a bit painful.
 Later, after synchronizing from the repository, a plain `make' should
 be sufficient.
 
 ** First clone
 
 If you are reading these notes, you may have already managed to clone
 this package from the repository.  For the record, you will find all the
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -394,21 +394,24 @@ news_reader::process (void)
       // Run this part in a separate thread so Octave can continue to
       // run while we wait for the page to load.  Then emit the signal
       // to display it when we have the page contents.
 
       QString url = base_url + "/" + page;
       std::ostringstream buf;
       url_transfer octave_dot_org (url.toStdString (), buf);
 
-      Array<std::string> param;
-      octave_dot_org.http_get (param);
-
-      if (octave_dot_org.good ())
-        html_text = QString::fromStdString (buf.str ());
+      if (octave_dot_org.is_valid ())
+        {
+          Array<std::string> param;
+          octave_dot_org.http_get (param);
+
+          if (octave_dot_org.good ())
+            html_text = QString::fromStdString (buf.str ());
+        }
 
       if (html_text.contains ("this-is-the-gnu-octave-community-news-page"))
         {
           if (serial >= 0)
             {
               QSettings *settings = resource_manager::get_settings ();
 
               if (settings)
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -184,20 +184,25 @@ private:
                                    const std::string& user,
                                    const std::string& passwd,
                                    std::ostream& os)
   {
     curl_handle h = get_handle ();
 
     url_transfer obj (host, user, passwd, os);
 
-    if (! error_state)
-      handle_map[h] = obj;
+    if (obj.is_valid ())
+      {
+        if (! error_state)
+          handle_map[h] = obj;
+        else
+          h = curl_handle ();
+      }
     else
-      h = curl_handle ();
+      error ("support for url transfers was disabled when Octave was built");
 
     return h;
   }
 
   Matrix do_handle_list (void)
   {
     Matrix retval (1, handle_map.size ());
 
@@ -408,41 +413,46 @@ urlwrite (\"http://www.google.com/search
     }
 
   unwind_protect_safe frame;
 
   frame.add_fcn (delete_file, filename);
 
   url_transfer curl = url_transfer (url, ofile);
 
-  curl.http_action (param, method);
-
-  ofile.close ();
+  if (! curl.is_valid ())
+    {
+      curl.http_action (param, method);
 
-  if (curl.good ())
-    frame.discard ();
+      ofile.close ();
 
-  if (nargout > 0)
-    {
       if (curl.good ())
+        frame.discard ();
+
+      if (nargout > 0)
         {
-          retval(2) = std::string ();
-          retval(1) = true;
-          retval(0) = octave_env::make_absolute (filename);
+          if (curl.good ())
+            {
+              retval(2) = std::string ();
+              retval(1) = true;
+              retval(0) = octave_env::make_absolute (filename);
+            }
+          else
+            {
+              retval(2) = curl.lasterror ();
+              retval(1) = false;
+              retval(0) = std::string ();
+            }
         }
-      else
-        {
-          retval(2) = curl.lasterror ();
-          retval(1) = false;
-          retval(0) = std::string ();
-        }
+
+      if (nargout < 2 && ! curl.good ())
+        error ("urlwrite: %s", curl.lasterror ().c_str ());
     }
-
-  if (nargout < 2 && ! curl.good ())
-    error ("urlwrite: %s", curl.lasterror ().c_str ());
+  else
+    error ("support for url transfers was disabled when Octave was built");
 
   return retval;
 }
 
 DEFUN (urlread, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
@@ -535,31 +545,36 @@ s = urlread (\"http://www.google.com/sea
           return retval;
         }
     }
 
   std::ostringstream buf;
 
   url_transfer curl = url_transfer (url, buf);
 
-  curl.http_action (param, method);
+  if (curl.is_valid ())
+    {
+      curl.http_action (param, method);
 
-  if (curl.good ())
-    {
-      if (nargout > 0)
+      if (curl.good ())
         {
-          // Return empty string if no error occured.
-          retval(2) = curl.good () ? "" : curl.lasterror ();
-          retval(1) = curl.good ();
-          retval(0) = buf.str ();
+          if (nargout > 0)
+            {
+              // Return empty string if no error occured.
+              retval(2) = curl.good () ? "" : curl.lasterror ();
+              retval(1) = curl.good ();
+              retval(0) = buf.str ();
+            }
         }
+
+      if (nargout < 2 && ! curl.good ())
+        error ("urlread: %s", curl.lasterror().c_str());
     }
-
-  if (nargout < 2 && ! curl.good ())
-    error ("urlread: %s", curl.lasterror().c_str());
+  else
+    error ("support for url transfers was disabled when Octave was built");
 
   return retval;
 }
 
 DEFUN (__ftp__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{handle} =} __ftp__ (@var{host})\n\
 @deftypefnx {Loadable Function} {@var{handle} =} __ftp__ (@var{host}, @var{username}, @var{password})\n\
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -762,50 +762,29 @@ private:
       return;
 
     SETOPT (CURLOPT_POSTQUOTE, 0);
   }
 };
 
 #undef SETOPT
 
-#else
-
-static void
-disabled_error (void)
-{
-  (*current_liboctave_error_handler)
-    ("support for url transfers was disabled when Octave was built");
-}
-
 #endif
 
 #if defined (HAVE_CURL)
 # define REP_CLASS curl_transfer
 #else
 # define REP_CLASS base_url_transfer
 #endif
 
 url_transfer::url_transfer (void) : rep (new REP_CLASS ())
-{
-#if !defined (HAVE_CURL)
-  disabled_error ();
-#endif
-}
+{ }
 
 url_transfer::url_transfer (const std::string& host, const std::string& user,
                             const std::string& passwd, std::ostream& os)
   : rep (new REP_CLASS (host, user, passwd, os))
-{
-#if !defined (HAVE_CURL)
-  disabled_error ();
-#endif
-}
+{ }
 
 url_transfer::url_transfer (const std::string& url, std::ostream& os)
   : rep (new REP_CLASS (url, os))
-{
-#if !defined (HAVE_CURL)
-  disabled_error ();
-#endif
-}
+{ }
 
 #undef REP_CLASS
