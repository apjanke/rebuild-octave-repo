# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1306363920 25200
#      Wed May 25 15:52:00 2011 -0700
# Node ID 53c0ed961de83fb617e6af5ab077d8d7b876b8c7
# Parent  6d4c18565de1dabd876624fd550c27c0e27d7926
# Parent  5dedac50fef955bfe0082796947b418973932a5c
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -1053,16 +1053,19 @@ function quick_countdown
 endfunction
 @end group
 @end example
 
 @noindent
 will produce a very quick countdown from '3' to 'Blast Off' as the
 lines "@code{disp(2);}" and "@code{disp(1);}" won't be executed.
 
+The block comment markers must appear alone as the only characters on a line
+(excepting whitepsace) in order to to be parsed correctly.
+
 @node Comments and the Help System
 @subsection Comments and the Help System
 @cindex documenting functions
 @cindex documenting user scripts
 @cindex help, user-defined functions
 
 The @code{help} command (@pxref{Getting Help}) is able to find the first
 block of comments in a function and return those as a documentation
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -78,17 +78,17 @@ function z = cumtrapz (x, y, dim)
   else
     if (!(isscalar (dim) && dim == fix (dim))
         || !(1 <= dim && dim <= nd))
       error ("trapz: DIM must be an integer and a valid dimension");
     endif
   endif
 
   n = sz(dim);
-  idx1 = idx2 = repmat ({:}, [nd, 1]);
+  idx1 = idx2 = repmat ({':'}, [nd, 1]);
   idx1{dim} = 2 : n;
   idx2{dim} = 1 : (n - 1);
 
   if (! have_xy)
     z = 0.5 * cumsum (x(idx1{:}) + x(idx2{:}), dim);
   else
     if (isvector (x) && !isvector (y))
       if (length (x) != sz(dim))
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -92,17 +92,17 @@ function z = trapz (x, y, dim)
   else
     if (!(isscalar (dim) && dim == fix (dim))
         || !(1 <= dim && dim <= nd))
       error ("trapz: DIM must be an integer and a valid dimension");
     endif
   endif
 
   n = sz(dim);
-  idx1 = idx2 = repmat ({:}, [nd, 1]);
+  idx1 = idx2 = repmat ({':'}, [nd, 1]);
   idx1{dim} = 2 : n;
   idx2{dim} = 1 : (n - 1);
 
   if (! have_xy)
     z = 0.5 * sum (x(idx1{:}) + x(idx2{:}), dim);
   else
     if (isvector (x) && !isvector (y))
       if (length (x) != sz(dim))
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -49,17 +49,21 @@ function varargout = textread (filename,
   fid = fopen (filename, "r");
   if (fid == -1)
     error ("textread: could not open '%s' for reading", filename);
   endif
 
   ## Maybe skip header lines
   headerlines = find (strcmpi (varargin, "headerlines"), 1);
   if (! isempty (headerlines))
-    fskipl (fid, headerlines);
+    hdr_lines = floor (varargin{headerlines + 1});
+    ## Beware of zero valued headerline, fskipl will count lines to EOF then
+    if (hdr_lines > 0)
+      fskipl (fid, hdr_lines);
+    endif
     varargin(headerlines:headerlines+1) = [];
   endif
 
   str = fread (fid, "char=>char").';
   fclose (fid);
 
   ## Call strread to make it do the real work
   [varargout{1:max (nargout, 1)}] = strread (str, format, varargin {:});
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -76,18 +76,21 @@ function [C, p] = textscan (fid, format,
         if (nargout == 2)
           error ("textscan: cannot provide position information for character input");
         endif
         str = fid;
       else
         ## Maybe skip header lines
         headerlines = find (strcmpi (args, "headerlines"), 1);
         if (! isempty (headerlines))
-          fskipl (fid, headerlines);
-          args(headerlines:headerlines+1) = [];
+          hdr_lines = floor (varargin{headerlines + 1});
+          ## Beware of zero valued headerline, fskipl will count lines to EOF
+          if (hdr_lines > 0)
+            fskipl (fid, hdr_lines);
+          endif
         endif
         if (isfinite (nlines))
           str = "";
           for n = 1:nlines
             str = strcat (str, fgets (fid));
           endfor
             else
           str = fread (fid, "char=>char").';
diff --git a/scripts/miscellaneous/ls_command.m b/scripts/miscellaneous/ls_command.m
--- a/scripts/miscellaneous/ls_command.m
+++ b/scripts/miscellaneous/ls_command.m
@@ -12,20 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{old_cmd} =} ls_command (@var{cmd})
-## Set or return the shell command used by Octave's @code{ls} command.
-## The value of @var{cmd} must be a character string.
-## With no arguments, simply return the previous value.
+## @deftypefn  {Function File} {@var{val} =} ls_command ()
+## @deftypefnx {Function File} {@var{old_val} =} ls_command (@var{new_val})
+## Query or set the shell command used by Octave's @code{ls} command.
 ## @seealso{ls}
 ## @end deftypefn
 
 ## Author: jwe
 
 function old_cmd = ls_command (cmd)
 
   global __ls_command__;
diff --git a/scripts/miscellaneous/ver.m b/scripts/miscellaneous/ver.m
--- a/scripts/miscellaneous/ver.m
+++ b/scripts/miscellaneous/ver.m
@@ -35,17 +35,17 @@
 ##
 ## @item Revision
 ## Revision of the package.
 ##
 ## @item Date
 ## Date respecting the version/revision.
 ## @end table
 ##
-## @deftypefnx {Function File} {v =} ver (@code{"Octave"})
+## @deftypefnx {Function File} {v =} ver ("Octave")
 ## Return version information for Octave only.
 ##
 ## @deftypefnx {Function File} {v =} ver (@var{package})
 ## Return version information for @var{package}.
 ##
 ## @seealso{version, octave_config_info}
 ## @end deftypefn
 
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -1266,23 +1266,23 @@ function __go_draw_axes__ (h, plot_strea
           ## Gnuplot's Character units are different for x/y and vary with fontsize. The aspect ratio
           ## of 1:1.7 was determined by experiment to work for eps/ps/etc. For the MacOS aqua terminal
           ## a value of 2.5 is needed. However, the difference is barely noticable.
           dx_and_dy = [(-dy * sind (angle)), (dy * cosd(angle))] .* [1.7 1];
 
           if (nd == 3)
             ## This produces the desired vertical alignment in 3D.
             fprintf (plot_stream,
-                     "set label \"%s\" at %s %.15g,%.15g,%.15g %s rotate by %f offset character %f,%f %s %s front %s;\n",
+                     "set label \"%s\" at %s %.15e,%.15e,%.15e %s rotate by %f offset character %f,%f %s %s front %s;\n",
                      undo_string_escapes (label), units, lpos(1),
                      lpos(2), lpos(3), halign, angle, dx_and_dy, fontspec,
                      __do_enhanced_option__ (enhanced, obj), colorspec);
           else
             fprintf (plot_stream,
-                     "set label \"%s\" at %s %.15g,%.15g %s rotate by %f offset character %f,%f %s %s front %s;\n",
+                     "set label \"%s\" at %s %.15e,%.15e %s rotate by %f offset character %f,%f %s %s front %s;\n",
                      undo_string_escapes (label), units,
                      lpos(1), lpos(2), halign, angle, dx_and_dy, fontspec,
                      __do_enhanced_option__ (enhanced, obj), colorspec);
           endif
 
         case "hggroup"
           ## Push group children into the kid list.
           if (isempty (kids))
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -66,17 +66,17 @@ function rnd = frnd (m, n, r, c)
       error ("frnd: R must be a positive integer or vector");
     endif
 
     if (any (size (m) != 1)
         && ((length (size (m)) != length (sz)) || any (size (m) != sz)))
       error ("frnd: M and N must be scalar or of size SZ");
     endif
   elseif (nargin == 2)
-    sz = size(a);
+    sz = size(m);
   else
     print_usage ();
   endif
 
 
   if (isscalar (m) && isscalar (n))
     if (isinf (m) || isinf (n))
       if (isinf (m))
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} datenum (@var{year}, @var{month}, @var{day})
 ## @deftypefnx {Function File} {} datenum (@var{year}, @var{month}, @var{day}, @var{hour})
 ## @deftypefnx {Function File} {} datenum (@var{year}, @var{month}, @var{day}, @var{hour}, @var{minute})
 ## @deftypefnx {Function File} {} datenum (@var{year}, @var{month}, @var{day}, @var{hour}, @var{minute}, @var{second})
-## @deftypefnx {Function File} {} datenum (@code{"date"})
-## @deftypefnx {Function File} {} datenum (@code{"date"}, @var{p})
+## @deftypefnx {Function File} {} datenum ("date")
+## @deftypefnx {Function File} {} datenum ("date", @var{p})
 ## Return the specified local time as a day number, with Jan 1, 0000
 ## being day 1.  By this reckoning, Jan 1, 1970 is day number 719529.
 ## The fractional portion, @var{p}, corresponds to the portion of the
 ## specified day.
 ##
 ## Notes:
 ##
 ## @itemize
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5868,17 +5868,17 @@ get_sort_mode_option (const octave_value
 
   return smode;
 }
 
 DEFUN (issorted, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} issorted (@var{a})\n\
 @deftypefnx {Built-in Function} {} issorted (@var{a}, @var{mode})\n\
-@deftypefnx {Built-in Function} {} issorted (@var{a}, @code{\"rows\"}, @var{mode})\n\
+@deftypefnx {Built-in Function} {} issorted (@var{a}, \"rows\", @var{mode})\n\
 Return true if the array is sorted according to @var{mode}, which\n\
 may be either \"ascending\", \"descending\", or \"either\".  By default,\n\
  @var{mode} is \"ascending\".  NaNs are treated in the same manner as\n\
 @code{sort}.\n\
 \n\
 If the optional argument \"rows\" is supplied, check whether\n\
 the array is sorted by rows as output by the function @code{sortrows}\n\
 (with no options).\n\
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -278,17 +278,17 @@ message identifier.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("rmdir", Frmdir, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} rmdir (@var{dir})\n\
-@deftypefnx {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} rmdir (@var{dir}, @code{\"s\"})\n\
+@deftypefnx {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} rmdir (@var{dir}, \"s\")\n\
 Remove the directory named @var{dir}.\n\
 \n\
 If successful, @var{status} is 1, with @var{msg} and @var{msgid} empty\n\
 character strings.  Otherwise, @var{status} is 0, @var{msg} contains a\n\
 system-dependent error message, and @var{msgid} contains a unique\n\
 message identifier.\n\
 \n\
 If the optional second parameter is supplied with value @code{\"s\"},\n\
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -1828,18 +1828,18 @@ DEFALIAS (lower, tolower);
 %!  a(3,3,3,3) = "D";
 %!  assert(tolower(a)(3,3,3,3), "d");
 
 */
 
 
 DEFUNX ("toupper", Ftoupper, args, ,
     "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} toupper (@var{s})\n\
-@deftypefnx {Built-in Function} {} upper (@var{s})\n\
+@deftypefn  {Mapping Function} {} toupper (@var{s})\n\
+@deftypefnx {Mapping Function} {} upper (@var{s})\n\
 Return a copy of the string or cell string @var{s}, with each lowercase\n\
 character replaced by the corresponding uppercase one; non-alphabetic\n\
 characters are left unchanged.  For example:\n\
 \n\
 @example\n\
 @group\n\
 toupper (\"MiXeD cAsE 123\")\n\
      @result{} \"MIXED CASE 123\"\n\
