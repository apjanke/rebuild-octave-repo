# HG changeset patch
# User jwe
# Date 1181110106 0
#      Wed Jun 06 06:08:26 2007 +0000
# Node ID 3d913ba36b759e6e5ae2c1425849e5c339ab120b
# Parent  768d3ad80bbf51bcc23d5a024f9d3c4838242413
[project @ 2007-06-06 06:08:25 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-06-06  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* configure.in: Check for utime.h and sys/utime.h headers.
+	Check for utime, _chmod, _utime, and _utime32 functions.
+
 2007-06-03  David Bateman  <dbateman@free.fr>
 
 	* configure.in (AC_CONFIG_FILES): Add src/mxarray.h
 	* examples/mycell.c, examples/mypow2.c, examples/mysparse.c,
 	examples/mystring.c, examples/mystruct.c: Use mwSize and mwIndex,
 	rather than int for indexing to conform to new mex API.
 	
 2007-06-01  John W. Eaton  <jwe@octave.org>
@@ -113,17 +118,17 @@ 2007-02-27  John W. Eaton  <jwe@octave.o
 	* run-octave.in (run-octave.in): Use --no-initial-path.
 	Rename to qargs to args.  Use $args not "$args" when invoking Octave.
 	Try harder to get quoting right when passing args to Octave.
 
 2007-02-26  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (DISTDIRS): Eliminate variable.
 
-2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
+2007-02-26  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* octMakefile.in, dlfcn/Makefile.in, emacs/Makefile.in:
 	Use $(LN_S) instead of ln or ln -s.
 
 	* octMakefile.in (dist): Use -9 instead of --best with gzip/bzip2.
 
 2007-02-21  John W. Eaton  <jwe@octave.org>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.563 $)
+AC_REVISION($Revision: 1.564 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1343,18 +1343,18 @@ AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
 ### C headers
 
 AC_CHECK_HEADERS(assert.h curses.h direct.h dlfcn.h fcntl.h float.h \
   floatingpoint.h grp.h ieeefp.h inttypes.h limits.h locale.h memory.h nan.h \
   ncurses.h poll.h pwd.h stdint.h stdlib.h string.h sys/ioctl.h \
   sys/param.h sys/poll.h sys/resource.h sys/select.h sys/stat.h \
-  sys/time.h sys/times.h sys/types.h sys/utsname.h termcap.h \
-  unistd.h varargs.h)
+  sys/time.h sys/times.h sys/types.h sys/utsname.h sys/utime.h termcap.h \
+  unistd.h utime.h varargs.h)
 
 ### C++ headers
 
 AC_LANG_PUSH(C++)
 AC_CHECK_HEADERS(sstream)
 AC_LANG_POP(C++)
 
 have_termios_h=no
@@ -1398,26 +1398,27 @@ if test "$have_fnmatch_h" = yes && test 
     AC_MSG_ERROR([You are required to have fnmatch and glob])
   fi
 else
   AC_MSG_ERROR([You are required to have fnmatch.h and glob.h])
 fi
 
 ### Checks for functions and variables.
 
-AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name \
+AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name chmod \
   dup2 endgrent endpwent execvp fcntl fork getcwd getegid geteuid \
   getgid getgrent getgrgid getgrnam getpgrp getpid getppid getpwent \
   getpwuid gettimeofday getuid getwd _kbhit kill link localtime_r \
   lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv raise \
   readlink realpath rename resolvepath rindex rmdir round select setgrent \
   setlocale setpwent setvbuf sigaction siglongjmp sigpending sigprocmask \
   sigsuspend stat strcasecmp strdup strerror stricmp \
   strncasecmp strnicmp strsignal symlink tempnam umask \
-  uname unlink usleep vfprintf vsprintf vsnprintf waitpid)
+  uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
+  _chmod _utime _utime32)
 
 case "$canonical_host_type" in
   *-*-msdosmsvc)
     ## The %T format specifier for strftime is reportedly broken,
     ## so use our version.  We could use an actual configure test
     ## for this.
   ;;
   *)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,20 @@
 2007-06-06  Michael Goffioul  <michael.goffioul@swing.be>
 
+	* file-ops.cc: Include sys/stat.h, fcntl.h, and utime.h or
+	sys/utime.h if they are available.
+	If _chmod is available but chmod is not, define chmod to _chmod
+	and define HAVE_CHMOD.  Likewise for utime and utimbuf.
+	If _S_IFMT is defined but S_IFMT is not, define S_IFMT to _S_IFMT.
+	Likewise for _O_RDONLY, _O_WRONLY, _O_CREAT and _O_BINARY.
+	(tilde_find_suffix, isolate_tilde_prefix, tilde_expand_word):
+	Use file_ops::is_dir_sep instead of comparing with
+	file_ops::dir_sep_char.
+
 	* MArray-C.cc: Sprinkle with OCTINTERP_API as needed.
 
 2007-06-04  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (Sparse<T> Sparse<T>::reshape): If length of new
 	dimensions is greater than 2, collapse to 2-D.
 
 2007-06-02  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -36,16 +36,30 @@ 02110-1301, USA.
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 
+#ifdef HAVE_SYS_STAT_H
+#include <sys/stat.h>
+#endif
+
+#ifdef HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
+#if defined (HAVE_UTIME_H)
+#include <utime.h>
+#elif defined (HAVE_SYS_UTIME_H)
+#include <sys/utime.h>
+#endif
+
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
 #include "statdefs.h"
@@ -58,23 +72,58 @@ 02110-1301, USA.
      && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
 char file_ops::dir_sep_char = '\\';
 std::string file_ops::dir_sep_str ("\\");
 #else
 char file_ops::dir_sep_char = '/';
 std::string file_ops::dir_sep_str ("/");
 #endif
 
-#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
-     && defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
 std::string file_ops::dir_sep_chars ("/\\");
 #else
 std::string file_ops::dir_sep_chars (file_ops::dir_sep_str);
 #endif
 
+#if ! defined (HAVE_CHMOD) && defined (HAVE__CHMOD)
+#define chmod _chmod
+#define HAVE_CHMOD 1
+#endif
+
+#if ! defined (HAVE_UTIME) \
+	&& (defined (HAVE__UTIME) || defined (HAVE__UTIME32))
+#define utime _utime
+#define utimbuf _utimbuf
+#define HAVE_UTIME 1
+#endif
+
+#if ! defined (S_IFMT) && defined (_S_IFMT)
+#define S_IFMT _S_IFMT
+#endif
+
+#if ! defined (O_RDONLY) && defined (_O_RDONLY)
+#define O_RDONLY _O_RDONLY
+#endif
+
+#if ! defined (O_WRONLY) && defined (_O_WRONLY)
+#define O_WRONLY _O_WRONLY
+#endif
+
+#if ! defined (O_CREAT) && defined (_O_CREAT)
+#define O_CREAT _O_CREAT
+#endif
+
+#ifndef O_BINARY
+#ifdef _O_BINARY
+#define O_BINARY _O_BINARY
+#else
+#define O_BINARY 0
+#endif
+#endif
+
 // We provide a replacement for mkdir().
 
 int
 file_ops::mkdir (const std::string& name, mode_t mode)
 {
   std::string msg;
   return mkdir (name, mode, msg);
 }
@@ -639,17 +688,17 @@ tilde_find_suffix (const std::string& s)
   size_t s_len = s.length ();
 
   string_vector suffixes = file_ops::tilde_additional_suffixes;
 
   size_t i = 0;
 
   for ( ; i < s_len; i++)
     {
-      if (s[i] == file_ops::dir_sep_char)
+      if (file_ops::is_dir_sep (s[i]))
 	break;
 
       if (! suffixes.empty ())
 	{
 	  for (int j = 0; j < suffixes.length (); j++)
 	    {
 	      size_t sfx_len = suffixes[j].length ();
 
@@ -666,17 +715,17 @@ tilde_find_suffix (const std::string& s)
 
 static std::string
 isolate_tilde_prefix (const std::string& fname)
 {
   size_t f_len = fname.length ();
 
   size_t len = 1;
 
-  while (len < f_len && fname[len] != file_ops::dir_sep_char)
+  while (len < f_len && ! file_ops::is_dir_sep (fname[len]))
     len++;
 
   return fname.substr (1, len);
 }
 
 // Do the work of tilde expansion on FILENAME.  FILENAME starts with a
 // tilde.
 
@@ -687,17 +736,17 @@ tilde_expand_word (const std::string& fi
 
   if (f_len == 0 || filename[0] != '~')
     return filename;
 
   // A leading `~/' or a bare `~' is *always* translated to the value
   // of $HOME or the home directory of the current user, regardless of
   // any preexpansion hook.
 
-  if (f_len == 1 || filename[1] == file_ops::dir_sep_char)
+  if (f_len == 1 || file_ops::is_dir_sep (filename[1]))
     return octave_env::get_home_directory () + filename.substr (1);
 
   std::string username = isolate_tilde_prefix (filename);
 
   size_t user_len = username.length ();
 
   std::string dirname;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-06  Benjamin Lindner  <lindnerben@gmx.net>
+
+	* utils.cc [__MINGW32__]: Don't define HAVE_C99_VSNPRINTF.
+
 2007-06-06  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* defaults.h.in, ls-hdf5.h, ov-complex.h, ov-cx-mat.h, ov-intx.h,
 	sysdep.h: Sprinkle with OCTINTERP_API as needed.
 
 2007-06-05  John W. Eaton  <jwe@octave.org>
 
 	* help.h (raw_help): Tag with OCTINTERP_API.
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -945,17 +945,17 @@ octave_vformat (std::ostream& os, const 
 
 #endif
 
   return retval;
 }
 
 /* FIXME -- we really need a configure test for this.  */
 
-#if defined __GNUC__ && __GNUC__ >= 3
+#if defined __GNUC__ && __GNUC__ >= 3 && ! defined __MINGW32__
 #define HAVE_C99_VSNPRINTF 1
 #endif
 
 // We manage storage.  User should not free it, and its contents are
 // only valid until next call to vsnprintf.
 
 // Interrupts might happen if someone makes a call with something that
 // will require a very large buffer.  If we are interrupted in that
