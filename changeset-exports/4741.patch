# HG changeset patch
# User jwe
# Date 1076018271 0
#      Thu Feb 05 21:57:51 2004 +0000
# Node ID e44d0ac643a544ac85146a9d88e78ba5f5eb5302
# Parent  65f30438c2a3ea52edd88b103d1221a431c2d113
[project @ 2004-02-05 21:57:50 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1463,16 +1463,27 @@ Array<T>::maybe_delete_elements (Array<i
 
       resize (temp_dims);
     }
   else if (num_ones (idx_is_colon) == n_idx - 1)
     {
       // We have colons in all indices except for one.
       // This index tells us which slice to delete
 
+      if (n_idx < lhs_dims.length ())
+	{
+	  for (int i = n_idx; i < lhs_dims.length (); i++)
+	    lhs_dims(n_idx-1) *= lhs_dims(i);
+
+	  lhs_dims.resize (n_idx);
+
+	  // Reshape *this.
+	  dimensions = lhs_dims;
+	}
+
       int non_col = 0;
 
       // Find the non-colon column.
 
       for (int i = 0; i < n_idx; i++)
 	{
 	  if (! idx_is_colon (i))
 	    non_col = i;
@@ -1538,22 +1549,16 @@ Array<T>::maybe_delete_elements (Array<i
 		      else
 			num_new_elem *= lhs_dims(i);
 		    }
 
 		  T *new_data = new T [num_new_elem];
 
 		  Array<int> result_idx (lhs_dims.length (), 0);
 
-		  dim_vector lhs_inc;
-		  lhs_inc.resize (lhs_dims.length ());
-
-		  for (int i = 0; i < lhs_dims.length (); i++)
-		    lhs_inc(i) = lhs_dims(i) + 1;
-
 		  dim_vector new_lhs_dim = lhs_dims;
 
 		  new_lhs_dim(non_col) = new_dim;
 
 		  int num_elem = 1;
 
 		  int numidx = 0;
 
@@ -2846,27 +2851,21 @@ assignN (Array<LT>& lhs, const Array<RT>
 	  Array<int> result_rhs_idx (rhs_dims.length (), 0);
 
 	  dim_vector frozen_rhs;
 	  frozen_rhs.resize (rhs_dims.length ());
 
 	  for (int i = 0; i < rhs_dims.length (); i++)
 	    frozen_rhs(i) = rhs_dims(i);
 
-	  dim_vector lhs_inc;
-	  lhs_inc.resize (lhs_dims.length ());
-
-	  for (int i = 0; i < lhs_dims.length (); i++)
-	    lhs_inc(i) = lhs_dims(i) + 1;
-
 	  for (int i = 0; i < n; i++)
 	    {
 	      elt_idx = get_elt_idx (idx, result_idx);
 
-	      if (index_in_bounds (elt_idx, lhs_inc))
+	      if (index_in_bounds (elt_idx, lhs_dims))
 		{
 		  int s = compute_index (result_rhs_idx, rhs_dims);
 
 		  lhs.checkelem (elt_idx) = rhs.elem (s);
 
 		  increment_index (result_rhs_idx, frozen_rhs);
 		}
 	      else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 2004-02-05  Petter Risholm  <risholm@stud.ntnu.no>
 
+	* Array.cc (Array<T>::maybe_delete_elements): Reshape LHS
+	when number of indices is less than number of dimensions.
+
+	* Array.cc (Array<T>::assignN, Array<T>::maybe_delete_elements):
+	Remove unsued variable lhs_inc.
+
 	* Array.cc (Array<T>::maybe_delete_elements): Declare idx_is_colon
 	and idx_is_colon_equiv Array<int> instead of dim_vector.
 
 	* Array.cc (Array<T>::assignN): Compute new dims in a cleaner way.
 
 	* Array.cc (Array<T>::index): Check for frozen_lengths.length ()
 	== n_dims before checking to see if all indices are colon_equiv.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2004-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* data.cc (Fsize): Update for N-d objects.
+
+	* ls-mat5.cc (read_mat5_binary_element): Force conversion.
+
+	* ov-base.cc (octave_base_value::char_matrix_value):
+	Pass force arg to convert_to_str.
+
 	* data.cc (Freshape): Chop trailing singletons from new dimensions.
 
 2004-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* error.cc (defun_usage_message): Only accept one arg, a const
 	std::string& object.  Change all uses.  Pass nul-terminated string
 	to defun_message_1.
 	(defun_usage_message_1): New function, equivalent to old
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -787,33 +787,33 @@ Returns the number of elements in the ob
 }
 
 DEFUN (size, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} size (@var{a}, @var{n})\n\
 Return the number rows and columns of @var{a}.\n\
 \n\
 With one input argument and one output argument, the result is returned\n\
-in a 2 element row vector.  If there are two output arguments, the\n\
-number of rows is assigned to the first, and the number of columns to\n\
-the second.  For example,\n\
+in a row vector.  If there are multiple output arguments, the number of\n\
+rows is assigned to the first, and the number of columns to the second,\n\
+etc.  For example,\n\
 \n\
 @example\n\
 @group\n\
 size ([1, 2; 3, 4; 5, 6])\n\
      @result{} [ 3, 2 ]\n\
 \n\
 [nr, nc] = size ([1, 2; 3, 4; 5, 6])\n\
      @result{} nr = 3\n\
      @result{} nc = 2\n\
 @end group\n\
 @end example\n\
 \n\
-If given a second argument of either 1 or 2, @code{size} will return\n\
-only the row or column dimension.  For example\n\
+If given a second argument, @code{size} will return the size of the\n\
+corresponding dimension.  For example\n\
 \n\
 @example\n\
 size ([1, 2; 3, 4; 5, 6], 2)\n\
      @result{} 2\n\
 @end example\n\
 \n\
 @noindent\n\
 returns the number of columns in the given matrix.\n\
@@ -847,22 +847,22 @@ returns the number of columns in the giv
   else if (nargin == 2 && nargout < 2)
     {
       int nd = args(1).int_value (true);
 
       if (error_state)
 	error ("size: expecting scalar as second argument");
       else
 	{
-	  if (nd == 1)
-	    retval(0) = args(0).rows ();
-	  else if (nd == 2)
-	    retval(0) = args(0).columns ();
+	  dim_vector dv = args(0).dims ();
+
+	  if (nd > 0 && nd <= dv.length ())
+	    retval(0) = dv(nd-1);
 	  else
-	    error ("size: invalid second argument -- expecting 1 or 2");
+	    error ("size: requested dimension (= %d) out of range", nd);
 	}
     }
   else
     print_usage ("size");
 
   return retval;
 }
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -503,17 +503,17 @@ read_mat5_binary_element (std::istream& 
 	    ctmp(i) = Complex (re(i), im(i));
 
 	  tc = ctmp;
 	}
       else
 	tc = re;
 
       if (arrayclass == mxCHAR_CLASS)
-	tc = tc.convert_to_str ();
+	tc = tc.convert_to_str (false, true);
     }
 
   is.seekg (pos + static_cast<std::streamoff> (element_length));
 
   if (is.eof ())
     is.clear ();
 
   return retval;
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -383,21 +383,21 @@ octave_base_value::bool_array_value (voi
 {
   boolNDArray retval;
   gripe_wrong_type_arg ("octave_base_value::bool_array_value()",
 			type_name ());
   return retval;
 }
 
 charMatrix
-octave_base_value::char_matrix_value (bool) const
+octave_base_value::char_matrix_value (bool force) const
 {
   charMatrix retval;
 
-  octave_value tmp = convert_to_str ();
+  octave_value tmp = convert_to_str (false, force);
 
   if (! error_state)
     retval = tmp.char_matrix_value ();
 
   return retval;
 }
 
 charNDArray
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -205,17 +205,17 @@ public:
   ComplexNDArray complex_array_value (bool = false) const;
 
   bool bool_value (void) const;
 
   boolMatrix bool_matrix_value (void) const;
 
   boolNDArray bool_array_value (void) const;
 
-  charMatrix char_matrix_value (bool = false) const;
+  charMatrix char_matrix_value (bool force = false) const;
 
   charNDArray char_array_value (bool = false) const;
 
   string_vector all_strings (bool pad = false, bool force = false) const;
 
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
