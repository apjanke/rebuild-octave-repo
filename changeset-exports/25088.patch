# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522703728 14400
#      Mon Apr 02 17:15:28 2018 -0400
# Branch stable
# Node ID 56e888cd82983e48c60827bbc9e0d45deda4c8c1
# Parent  8f1ab6db670987643573e873feae0593eff0819f
avoid cast warnings from GCC 8 (bug #53544)

* typecast.cc (reinterpret_int_copy): New template function.
(Ftypecast): Use it for int array casts.

diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -77,16 +77,35 @@ reinterpret_copy (const void *data, octa
 
   ArrayType retval (get_vec_dims (old_dims, n));
   T *dest = retval.fortran_vec ();
   std::memcpy (dest, data, n * sizeof (T));
 
   return retval;
 }
 
+template <typename ArrayType>
+static ArrayType
+reinterpret_int_copy (const void *data, octave_idx_type byte_size,
+                      const dim_vector& old_dims)
+{
+  typedef typename ArrayType::element_type T;
+  typedef typename T::val_type VT;
+  octave_idx_type n = byte_size / sizeof (T);
+
+  if (n * static_cast<int> (sizeof (T)) != byte_size)
+    error ("typecast: incorrect number of input values to make output value");
+
+  ArrayType retval (get_vec_dims (old_dims, n));
+  VT *dest = reinterpret_cast<VT *> (retval.fortran_vec ());
+  std::memcpy (dest, data, n * sizeof (VT));
+
+  return retval;
+}
+
 DEFUN (typecast, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{y} =} typecast (@var{x}, "@var{class}")
 Return a new array @var{y} resulting from interpreting the data of @var{x}
 in memory as data of the numeric class @var{class}.
 
 Both the class of @var{x} and @var{class} must be one of the built-in
 numeric classes:
@@ -213,37 +232,37 @@ typecast (@var{x}, "uint8")
     ;
   else if (numclass == "char")
     retval = octave_value (reinterpret_copy<charNDArray>
                            (data, byte_size, old_dims), array.is_dq_string () ? '"'
                            : '\'');
   else if (numclass[0] == 'i')
     {
       if (numclass == "int8")
-        retval = reinterpret_copy<int8NDArray> (data, byte_size, old_dims);
+        retval = reinterpret_int_copy<int8NDArray> (data, byte_size, old_dims);
       else if (numclass == "int16")
-        retval = reinterpret_copy<int16NDArray> (data, byte_size, old_dims);
+        retval = reinterpret_int_copy<int16NDArray> (data, byte_size, old_dims);
       else if (numclass == "int32")
-        retval = reinterpret_copy<int32NDArray> (data, byte_size, old_dims);
+        retval = reinterpret_int_copy<int32NDArray> (data, byte_size, old_dims);
       else if (numclass == "int64")
-        retval = reinterpret_copy<int64NDArray> (data, byte_size, old_dims);
+        retval = reinterpret_int_copy<int64NDArray> (data, byte_size, old_dims);
     }
   else if (numclass[0] == 'u')
     {
       if (numclass == "uint8")
-        retval = reinterpret_copy<uint8NDArray> (data, byte_size, old_dims);
+        retval = reinterpret_int_copy<uint8NDArray> (data, byte_size, old_dims);
       else if (numclass == "uint16")
-        retval = reinterpret_copy<uint16NDArray> (data, byte_size,
-                                                  old_dims);
+        retval = reinterpret_int_copy<uint16NDArray> (data, byte_size,
+                                                      old_dims);
       else if (numclass == "uint32")
-        retval = reinterpret_copy<uint32NDArray> (data, byte_size,
-                                                  old_dims);
+        retval = reinterpret_int_copy<uint32NDArray> (data, byte_size,
+                                                      old_dims);
       else if (numclass == "uint64")
-        retval = reinterpret_copy<uint64NDArray> (data, byte_size,
-                                                  old_dims);
+        retval = reinterpret_int_copy<uint64NDArray> (data, byte_size,
+                                                      old_dims);
     }
   else if (numclass == "single")
     retval = reinterpret_copy<FloatNDArray> (data, byte_size, old_dims);
   else if (numclass == "double")
     retval = reinterpret_copy<NDArray> (data, byte_size, old_dims);
   else if (numclass == "single complex")
     retval = reinterpret_copy<FloatComplexNDArray> (data, byte_size,
                                                     old_dims);
