# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528777946 14400
#      Tue Jun 12 00:32:26 2018 -0400
# Node ID e255f09dc70e38a084883253204edb5aebc52463
# Parent  582f343e9022bcd48d93603ae2e9883a1c9d990a
initial framework for testing MEX files

* test/mex/bug-51725.tst, test/mex/bug-54096.tst,
test/mex/bug_51725.c, test/mex/bug_54096.c: New tests.
* test/mex/module.mk: New file.

* test/module.mk: Include %reldir%/mex/module.mk.
(run-octave-tests): Add $(abs_top_builddir)/%reldir%/mex to Octave
load path when running tests.
(%canon_reldir%_EXTRA_DIST): Include $(noinst_TEST_FILES) and
$(MEX_TEST_SRC) in the list.

* Makefile.am (noinst_TEST_FILES): Initialize new variable.

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -143,16 +143,17 @@ octave_dirstamp = $(am__leading_dot)octa
 	: > $@
 
 CLEANFILES =
 DISTCLEANFILES =
 MAINTAINERCLEANFILES =
 info_TEXINFOS =
 BUILT_SOURCES =
 TEST_FILES =
+noinst_TEST_FILES =
 
 DOC_IMAGES_SRC =
 BUILT_DOC_IMAGES =
 BUILT_DOC_IMAGES_EPS =
 BUILT_DOC_IMAGES_PDF =
 BUILT_DOC_IMAGES_PNG =
 BUILT_DOC_IMAGES_TXT =
 DOC_IMAGES =
diff --git a/test/mex/bug-51725.tst b/test/mex/bug-51725.tst
new file mode 100644
--- /dev/null
+++ b/test/mex/bug-51725.tst
@@ -0,0 +1,20 @@
+## Copyright (C) 2018 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+%!assert (bug_51725 (), [])
+%!error <element number 2 undefined in return list> [x,y,z] = bug_51725 ();
diff --git a/test/mex/bug-54096.tst b/test/mex/bug-54096.tst
new file mode 100644
--- /dev/null
+++ b/test/mex/bug-54096.tst
@@ -0,0 +1,22 @@
+## Copyright (C) 2018 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+%!test
+%! s = bug_54096 ();
+%! assert (s, struct ("field", []))
+%! assert (s.field, [])
diff --git a/test/mex/bug_51725.c b/test/mex/bug_51725.c
new file mode 100644
--- /dev/null
+++ b/test/mex/bug_51725.c
@@ -0,0 +1,10 @@
+#include "mex.h"
+
+void mexFunction (int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
+{
+  if (nlhs > 0)
+    plhs[0] = mxCreateDoubleMatrix (0, 0, mxREAL);
+
+  if (nlhs > 2)
+    plhs[2] = mxCreateDoubleMatrix (0, 0, mxREAL);
+}
diff --git a/test/mex/bug_54096.c b/test/mex/bug_54096.c
new file mode 100644
--- /dev/null
+++ b/test/mex/bug_54096.c
@@ -0,0 +1,19 @@
+#include "mex.h"
+
+static const char* field_names[] = {"field"};
+
+void mexFunction (int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
+{
+  mxArray *tmp_val;
+
+  plhs[0] = mxCreateStructMatrix (1, 1, 1, field_names);
+
+  mxSetFieldByNumber (plhs[0], 0, 0, NULL);
+
+  tmp_val = mxGetFieldByNumber (plhs[0], 0, 0);
+
+  if (tmp_val)
+    mexErrMsgTxt ("struct elements set to NULL should be NULL internally");
+
+  /* But in the interpreter, they should appear as [].  */
+}
diff --git a/test/mex/module.mk b/test/mex/module.mk
new file mode 100644
--- /dev/null
+++ b/test/mex/module.mk
@@ -0,0 +1,47 @@
+mex_TEST_FILES = \
+  %reldir%/bug-54096.tst \
+  %reldir%/bug-51725.tst \
+  $(MEX_TEST_SRC)
+
+MEX_TEST_SRC = \
+  %reldir%/bug_54096.c \
+  %reldir%/bug_51725.c
+
+MEX_TEST_FUNCTIONS = $(MEX_TEST_SRC:%.c=%.mex)
+
+## Since these definitions for MKOCTFILE and MKMEXFILE are only used
+## here, defining them in this file is probably OK.  If there are ever
+## used elsewhre, maybe then they could be moved to build-aux/module.mk
+## or the main Makefile.am file.  The MKOCTFILE variables are included
+## for completeness, in case we someday want to test building .oct
+## files as well.
+
+AM_V_mkmexfile = $(am__v_mkmexfile_@AM_V@)
+am__v_mkmexfile_ = $(am__v_mkmexfile_@AM_DEFAULT_V@)
+am__v_mkmexfile_0 = @echo "  MKMEXFILE     " $@;
+am__v_mkmexfile_1 =
+
+AM_VOPT_mkmexfile = $(am__vopt_mkmexfile_@AM_V@)
+am__vopt_mkmexfile_ = $(am__vopt_mkmexfile_@AM_DEFAULT_V@)
+am__vopt_mkmexfile_0 =
+am__vopt_mkmexfile_1 = -v
+
+## And probably many others...
+MKOCTFILECPPFLAGS = \
+  -I$(top_srcdir)/libinterp/corefcn \
+  -Ilibinterp/corefcn
+
+MKOCTFILE = $(top_builddir)/src/mkoctfile $(MKOCTFILECPPFLAGS)
+
+MKMEXFILECPPFLAGS = \
+  -I$(top_srcdir)/libinterp/corefcn \
+  -Ilibinterp/corefcn
+
+MKMEXFILE = $(top_builddir)/src/mkoctfile --mex $(MKMEXFILECPPFLAGS)
+
+%.mex : %.c
+	$(AM_V_mkmexfile)$(MKMEXFILE) $(AM_VOPT_mkmexfile) $< -o $@ || rm -f $@
+
+## Until we decide how to handle installing the executable MEX files,
+## don't install them or the associated test files.
+noinst_TEST_FILES += $(mex_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -70,35 +70,36 @@ include %reldir%/bug-52722/module.mk
 include %reldir%/bug-53027/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/local-functions/module.mk
+include %reldir%/mex/module.mk
 include %reldir%/nest/module.mk
 include %reldir%/publish/module.mk
 include %reldir%/pkg/module.mk
 
 define run-octave-tests
-  ( cd %reldir% && $(SHELL) ../run-octave $(RUN_OCTAVE_OPTIONS) $(1) --norc --silent --no-history $(abs_top_srcdir)/%reldir%/fntests.m $(abs_top_srcdir)/%reldir% ); \
+  ( cd %reldir% && $(SHELL) ../run-octave $(RUN_OCTAVE_OPTIONS) $(1) --norc --silent --no-history -p $(abs_top_builddir)/%reldir%/mex $(abs_top_srcdir)/%reldir%/fntests.m $(abs_top_srcdir)/%reldir% ); \
   if $(AM_V_P); then \
     echo ""; \
     if [ -f %reldir%/fntests.log ]; then \
       echo "Contents of %reldir%/fntests.log:"; \
       echo ""; \
       $(AWK) -f $(srcdir)/%reldir%/show-failures.awk %reldir%/fntests.log; \
     else \
       echo "%reldir%/fntests.log is missing!"; \
     fi; \
   fi
 endef
 
-check-local: $(GENERATED_TEST_FILES) | $(OCTAVE_INTERPRETER_TARGETS) %reldir%/$(octave_dirstamp)
+check-local: $(GENERATED_TEST_FILES) $(MEX_TEST_FUNCTIONS) | $(OCTAVE_INTERPRETER_TARGETS) %reldir%/$(octave_dirstamp)
 	$(AM_V_at)$(call run-octave-tests)
 
 if AMCOND_HAVE_LLVM
 check-jit: $(GENERATED_TEST_FILES) | $(OCTAVE_INTERPRETER_TARGETS) %reldir%/$(octave_dirstamp)
 	$(AM_V_at)$(call run-octave-tests,--jit-compiler)
 endif
 
 COVERAGE_DIR = %reldir%/coverage
@@ -185,17 +186,19 @@ BUILT_SOURCES += $(GENERATED_TEST_FILES)
 
 %canon_reldir%_EXTRA_DIST += \
   %reldir%/bc-overloads-expected \
   %reldir%/mk-bc-overloads-tst.sh \
   %reldir%/mk-conv-tst.sh \
   %reldir%/mk-sparse-tst.sh \
   %reldir%/mk_bc_overloads_expected.m \
   %reldir%/show-failures.awk \
-  $(TEST_FILES)
+  $(TEST_FILES) \
+  $(noinst_TEST_FILES) \
+  $(MEX_TEST_SRC)
 
 EXTRA_DIST += $(%canon_reldir%_EXTRA_DIST)
 
 %canon_reldir%_CLEANFILES += \
   $(GENERATED_BC_OVERLOADS_FILES) \
   $(GENERATED_TEST_FILES)
 
 %canon_reldir%_DISTCLEANFILES += \
