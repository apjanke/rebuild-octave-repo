# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217861986 14400
#      Mon Aug 04 10:59:46 2008 -0400
# Branch release-3-0-x
# Node ID e633fd6ed0493f787bc0da53b589c6121e18c743
# Parent  642af2e62b1f0a30839b41c1f373528036fbccbe
strtok.m: include TAB, LF, VT, FF, and CR in default set of delim characters

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-08-04  John W. Eaton  <jwe@octave.org>
+
+	* strings/strtok.m: Include TAB, LF, VT, FF, and CR in default
+	list of delim characters.  Update tests.
+
 2008-06-11  John W. Eaton  <jwe@octave.org>
 
 	* general/rat.m: Properly initialize steps when all elements of
 	input array are integers.  Append spaces as necessary when
 	building  character array.
 
 2008-06-05  Jaroslav Hajek <highegg@gmail.com>
 
diff --git a/scripts/strings/strtok.m b/scripts/strings/strtok.m
--- a/scripts/strings/strtok.m
+++ b/scripts/strings/strtok.m
@@ -30,17 +30,17 @@
 
 function [tok, rem] = strtok (str, delim)
 
   if (nargin<1 || nargin > 2)
     print_usage ();
   endif
 
   if (nargin < 2 || isempty (delim))
-    delim = " "; 
+    delim = "\t\n\v\f\r "; 
   endif
 
   if (isempty (str))
     tok = rem = "";
   elseif (length (delim) > 3)
     start = 1;
     len = length (str);
     while (start <= len)
@@ -109,22 +109,22 @@ endfunction
 %!assert(strtok("this "), "this");    # delimiter at end
 %!assert(strtok("this is"), "this");  # delimiter in middle
 %!assert(strtok(" this"), "this");    # delimiter at start
 %!assert(strtok(" this "), "this");   # delimiter at start and end
 %!assert(strtok(" "), ""(1:0));            # delimiter only
 
 %!# test the remainder for all cases
 %!test [t,r] = strtok(""); assert(r, "");
-%!test [t,r] = strtok("this"); assert(r, "");
+%!test [t,r] = strtok("this"); assert(r, char (zeros (1, 0)));
 %!test [t,r] = strtok("this "); assert(r, " ");
 %!test [t,r] = strtok("this is"); assert(r, " is");
-%!test [t,r] = strtok(" this"); assert(r, "");
+%!test [t,r] = strtok(" this"); assert(r, char (zeros (1, 0)));
 %!test [t,r] = strtok(" this "); assert(r, " ");
-%!test [t,r] = strtok(" "); assert(r, "");
+%!test [t,r] = strtok(" "); assert(r, char (zeros (1, 0)));
 
 %!# simple check with 2 and 3 delimeters
 %!assert(strtok("this is", "i "), "th");
 %!assert(strtok("this is", "ij "), "th");
 
 %!# test all cases for 4 delimiters since a different 
 %!# algorithm is used when more than 3 delimiters
 %!assert(strtok("","jkl "), "");
@@ -133,8 +133,16 @@ endfunction
 %!assert(strtok("this is","jkl "), "this");
 %!assert(strtok(" this","jkl "), "this");
 %!assert(strtok(" this ","jkl "), "this");
 %!assert(strtok(" ","jkl "), ""(1:0));
 
 %!# test 'bad' string orientations
 %!assert(strtok(" this "'), "this"');   # delimiter at start and end
 %!assert(strtok(" this "',"jkl "), "this"');
+
+%!# test with TAB, LF, VT, FF, and CR
+%!test
+%! for ch = "\t\n\v\f\r"
+%!   [t, r] = strtok (cstrcat ("beg", ch, "end"));
+%!   assert (t, "beg");
+%!   assert (r, cstrcat (ch, "end"))
+%! endfor
