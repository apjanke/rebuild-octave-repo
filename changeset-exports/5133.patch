# HG changeset patch
# User jwe
# Date 1107890261 0
#      Tue Feb 08 19:17:41 2005 +0000
# Node ID 7191f6e086f9384978901fe3febc87357d13cc6e
# Parent  5c96a48f8dc203de7d81f6b3101a2b7b5159d9f8
[project @ 2005-02-08 19:17:41 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2005-02-08  John W. Eaton  <jwe@octave.org>
+
+	* misc/quit.h: Use C-style comments.
+
 2004-09-08  John W. Eaton  <jwe@octave.org>
 
 	* misc/machar.c (rmachar): Use modern C declaration.
 
 2004-02-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/f77-fcn.c: Handle Cray, CVF, and f2c calling conventions.
 
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -63,20 +63,21 @@ extern void octave_restore_signal_mask (
 class
 octave_interrupt_exception
 {
 };
 #endif
 
 extern sig_atomic_t octave_interrupt_immediately;
 
-// > 0: interrupt pending
-//   0: no interrupt pending
-// < 0: handling interrupt
-//
+/*
+  > 0: interrupt pending
+    0: no interrupt pending
+  < 0: handling interrupt
+*/
 extern sig_atomic_t octave_interrupt_state;
 
 extern sig_atomic_t octave_allocation_error;
 
 extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
 
 extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2005-02-08  John W. Eaton  <jwe@octave.org>
+
+	* strings/dec2base.m: Don't delete leading zero if third arg is
+	provided and len <= computed max_len.
+
 2005-01-27  David Bateman  <dbateman@free.fr>
 
 	* strings/dec2base.m: Be even more careful about handling all digits.
 
 2005-01-27  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* strings/dec2base.m: Use integer arithmetic to count number of digits.
 
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -84,18 +84,23 @@ function retval = dec2base (n, base, len
   ## determine digits for each number
   power = ones (length (n), 1) * (base .^ (max_len-1 : -1 : 0));
   n = n(:) * ones (1, max_len);
   digits = floor (rem (n, base*power) ./ power);
 
   ## convert digits to symbols
   retval = reshape (symbols (digits+1), size (digits));
 
-  ## Check if the first element is the zero symbol
-  if (all (retval(:,1) == symbols(1)))
+  ## Check if the first element is the zero symbol. It seems possible
+  ## that LEN is provided, and is less than the computed MAX_LEN and
+  ## MAX_LEN is computed to be one larger than necessary, so we would
+  ## have a leading zero to remove.  But if LEN >= MAX_LEN, we should
+  ## not remove any leading zeros.
+  if ((nargin == 2 || (nargin == 3 && max_len > len))
+      && all (retval(:,1) == symbols(1)))
     retval = retval(:,2:end);
   endif
 
 endfunction
 
 %!test
 %! s0='';
 %! for n=1:13
