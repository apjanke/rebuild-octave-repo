# HG changeset patch
# User jwe
# Date 1089652453 0
#      Mon Jul 12 17:14:13 2004 +0000
# Node ID 1242acab4246452d1c8eb486f7170077d57212d6
# Parent  5c9e36402f1734fc49b50e712906c39771d1a30d
[project @ 2004-07-12 17:14:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,32 @@
+2004-07-12  John W. Eaton  <jwe@octave.org>
+
+	* ov-intx.h: N-d array and scalar extractor functions take no args.
+
+	* ov.h (octave_value::int8_scalar_value,
+	octave_value::int16_scalar_value, octave_value::int32_scalar_value,
+	octave_value::int64_scalar_value, octave_value::uint8_scalar_value,
+	octave_value::uint16_scalar_value, octave_value::uint32_scalar_value,
+	octave_value::uint64_scalar_value): New functions.
+	* ov-base.cc (octave_base_value::int8_scalar_value,
+	octave_base_value::int16_scalar_value,
+	octave_base_value::int32_scalar_value,
+	octave_base_value::int64_scalar_value,
+	octave_base_value::uint8_scalar_value,
+	octave_base_value::uint16_scalar_value,
+	octave_base_value::uint32_scalar_value,
+	octave_base_value::uint64_scalar_value): New functions.
+	* ov-base.h: Provide decls.
+
+	* lex.l: (Vtoken_count): New static variable.
+	(COUNT_TOK_AND_RETURN): New macro.  Use it everywhere a token is
+	returned to the parser.
+	(F__token_count__): New function.
+
 2004-06-25  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-int-conv.cc: Add conversions for range type.
 
 2004-06-17  John W. Eaton  <jwe@octave.org>
 
 	* bitfcns.cc (bitfcns): New file.
 	* Makefile.in (DIST_SRC): Add it to the list.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -43,28 +43,30 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "quit.h"
+#include "lo-mappers.h"
 #include "lo-sstream.h"
 
 // These would be alphabetical, but y.tab.h must be included before
 // oct-gperf.h and y.tab.h must be included after token.h and the tree
 // class declarations.  We can't include y.tab.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
 // times.
 
 #include "Cell.h"
 #include "comment-list.h"
 #include "defun.h"
 #include "error.h"
+#include "gripes.h"
 #include "input.h"
 #include "lex.h"
 #include "ov.h"
 #include "parse.h"
 #include "pt-all.h"
 #include "symtab.h"
 #include "token.h"
 #include "toplev.h"
@@ -101,24 +103,32 @@ Software Foundation, 59 Temple Place - S
   do \
     { \
       error (msg); \
       OCTAVE_QUIT; \
       yy_fatal_error (msg); \
     } \
   while (0)
 
+#define COUNT_TOK_AND_RETURN(tok) \
+  do \
+    { \
+      Vtoken_count++; \
+      return tok; \
+    } \
+  while (0)
+
 #define TOK_RETURN(tok) \
   do \
     { \
       current_input_column += yyleng; \
       lexer_flags.quote_is_transpose = false; \
       lexer_flags.cant_be_identifier = false; \
       lexer_flags.convert_spaces_to_comma = true; \
-      return (tok); \
+      COUNT_TOK_AND_RETURN (tok); \
     } \
   while (0)
 
 #define TOK_PUSH_AND_RETURN(name, tok) \
   do \
     { \
       yylval.tok_val = new token (name, input_line_number, \
 				  current_input_column); \
@@ -131,17 +141,17 @@ Software Foundation, 59 Temple Place - S
   do \
     { \
       yylval.tok_val = new token (input_line_number, current_input_column); \
       token_stack.push (yylval.tok_val); \
       current_input_column += yyleng; \
       lexer_flags.quote_is_transpose = false; \
       lexer_flags.cant_be_identifier = true; \
       lexer_flags.convert_spaces_to_comma = convert; \
-      return (tok); \
+      COUNT_TOK_AND_RETURN (tok); \
     } \
   while (0)
 
 #define XBIN_OP_RETURN(tok, convert) \
   do \
     { \
 	gripe_matlab_incompatible_operator (yytext); \
         BIN_OP_RETURN (tok, convert); \
@@ -218,16 +228,18 @@ private:
 static bracket_brace_paren_nesting_level nesting_level;
 
 static bool Vwarn_matlab_incompatible = false;
 
 static bool Vwarn_separator_insert = false;
 
 static bool Vwarn_single_quote_string = false;
 
+static unsigned int Vtoken_count = 0;
+
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const std::string& s);
 static int is_keyword_token (const std::string& s);
 static void prep_for_function (void);
@@ -275,39 +287,39 @@ EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 <NESTED_FUNCTION_END>. {
     BEGIN (NESTED_FUNCTION_BEGIN);
     yyunput (yytext[0], yytext);
-    return ';';
+    COUNT_TOK_AND_RETURN (';');
   }
 
 <NESTED_FUNCTION_BEGIN>. {
     BEGIN (INITIAL);
     yyunput (yytext[0], yytext);
     prep_for_nested_function ();
-    return FCN;
+    COUNT_TOK_AND_RETURN (FCN);
   }
 
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
 %}
 
 <COMMAND_START>{NL} {
     BEGIN (INITIAL);
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
-    return '\n';
+    COUNT_TOK_AND_RETURN ('\n');
   }
 
 <COMMAND_START>[\;\,] {
     if (lexer_flags.doing_set && strcmp (yytext, ",") == 0)
       {
 	TOK_PUSH_AND_RETURN (yytext, STRING);
       }
     else
@@ -317,17 +329,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
       }
   }
 
 <COMMAND_START>[\"\'] {
     current_input_column++;
-    return handle_string (yytext[0], true);
+    COUNT_TOK_AND_RETURN (handle_string (yytext[0], true));
   }
 
 <COMMAND_START>[^#% \t\n\;\,\"\'][^ \t\n\;\,]*{S}* {
     std::string tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, STRING);
   }
 
 %{
@@ -343,26 +355,26 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %}
 
 <MATRIX_START>{SNLCMT}*\]{S}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
-    return handle_close_bracket (spc_gobbled, ']');
+    COUNT_TOK_AND_RETURN (handle_close_bracket (spc_gobbled, ']'));
   }
 
 <MATRIX_START>{SNLCMT}*\}{S}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
-    return handle_close_bracket (spc_gobbled, '}');
+    COUNT_TOK_AND_RETURN (handle_close_bracket (spc_gobbled, '}'));
   }
 
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
 %}
 
@@ -377,17 +389,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
       {
 	maybe_warn_separator_insert (';');
 
 	yyunput (';', yytext);
       }
 
-    return (',');
+    COUNT_TOK_AND_RETURN (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
 // constants so we just eat them.  If we don't check for continuations
 // here we can end up inserting too many commas.
 %}
@@ -411,34 +423,34 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	  }
 
 	lexer_flags.quote_is_transpose = false;
 	lexer_flags.cant_be_identifier = false;
 	lexer_flags.convert_spaces_to_comma = true;
 
 	maybe_warn_separator_insert (',');
 
-	return (',');
+	COUNT_TOK_AND_RETURN (',');
       }
   }
 
 %{
 // Semicolons are handled as row seprators in matrix constants.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 %}
 
 <MATRIX_START>{SNLCMT}*;{SNLCMT}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
-    return ';';
+    COUNT_TOK_AND_RETURN (';');
   }
 
 %{
 // In some cases, new lines can also become row separators.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 %}
 
@@ -454,17 +466,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     if (nesting_level.none ())
       return LEXICAL_ERROR;
 
     if (nesting_level.is_bracket_or_brace ())
       {
 	maybe_warn_separator_insert (';');
 
-	return ';';
+	COUNT_TOK_AND_RETURN (';');
       }
   }
 
 %{
 // Open and close bracket are handled differently if we are in the range
 // part of a plot command.
 //
 %}
@@ -478,23 +490,23 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.convert_spaces_to_comma = true;
 
     promptflag--;
     eat_whitespace ();
 
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
       {
 	lexer_flags.in_plot_range = true;
-	return OPEN_BRACE;
+	COUNT_TOK_AND_RETURN (OPEN_BRACE);
       }
     else
       {
 	lexer_flags.bracketflag++;
 	BEGIN (MATRIX_START);
-	return '[';
+	COUNT_TOK_AND_RETURN ('[');
       }
   }
 
 \] {
     nesting_level.remove ();
 
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
       {
@@ -506,28 +518,28 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
     handle_number ();
-    return IMAG_NUM;
+    COUNT_TOK_AND_RETURN (IMAG_NUM);
   }
 
 %{
 // Real numbers.  Don't grab the `.' part of a dot operator as part of
 // the constant.
 %}
 
 {D}+/\.[\*/\\^'] |
 {NUMBER} {
     handle_number ();
-    return NUM;
+    COUNT_TOK_AND_RETURN (NUM);
   }
 
 %{
 // Eat whitespace.  Whitespace inside matrix constants is handled by
 // the <MATRIX_START> start state code above.
 %}
 
 {S}* {
@@ -551,22 +563,22 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // An ellipsis not at the end of a line is not a continuation, but
 // does have another meaning.
 %}
 
 {EL} {
     if (lexer_flags.looking_at_parameter_list)
       {
 	warning ("`...' is deprecated; use varargin instead");
-	return VARARGIN;
+	COUNT_TOK_AND_RETURN (VARARGIN);
       }
     else if (lexer_flags.looking_at_return_list)
       {
 	warning ("`...' is deprecated; use varargout instead");
-	return VARARGOUT;
+	COUNT_TOK_AND_RETURN (VARARGOUT);
       }
     else
       return LEXICAL_ERROR;
   }
 
 %{
 // End of file.
 %}
@@ -579,17 +591,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
     int id_tok = handle_identifier ();
 
     if (id_tok >= 0)
-      return id_tok;
+      COUNT_TOK_AND_RETURN (id_tok);
   }
 
 %{
 // Function handles.
 %}
 
 @{IDENT} {
     TOK_PUSH_AND_RETURN (&yytext[1], FCN_HANDLE);
@@ -603,17 +615,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 {NL} {
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
-      return '\n';
+      COUNT_TOK_AND_RETURN ('\n');
     else if (nesting_level.is_paren ())
       gripe_matlab_incompatible ("bare newline inside parentheses");
     else if (nesting_level.is_bracket_or_brace ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
@@ -622,29 +634,29 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 "'" {
     current_input_column++;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (lexer_flags.quote_is_transpose)
       {
 	do_comma_insert_check ();
-	return QUOTE;
+	COUNT_TOK_AND_RETURN (QUOTE);
       }
     else
-      return handle_string ('\'');
+      COUNT_TOK_AND_RETURN (handle_string ('\''));
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
 \" {
     current_input_column++;
-    return handle_string ('"');
+    COUNT_TOK_AND_RETURN (handle_string ('"'));
 }
 
 %{
 // The colon operator is handled differently if we are in the range
 // part of a plot command.
 %}
 
 ":" {
@@ -705,19 +717,19 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.convert_spaces_to_comma = true;
 
     maybe_gripe_matlab_incompatible_comment (yytext[0]);
 
     if (YY_START == COMMAND_START)
       BEGIN (INITIAL);
 
     if (nesting_level.none ())
-      return '\n';
+      COUNT_TOK_AND_RETURN ('\n');
     else if (nesting_level.is_bracket_or_brace ())
-      return ';';
+      COUNT_TOK_AND_RETURN (';');
   }
 
 %{
 // Other operators.
 %}
 
 ".+"	{ XBIN_OP_RETURN (EPLUS, false); }
 ".-"	{ XBIN_OP_RETURN (EMINUS, false); }
@@ -785,17 +797,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 ")" {
     nesting_level.remove ();
 
     current_input_column++;
     lexer_flags.cant_be_identifier = true;
     lexer_flags.quote_is_transpose = true;
     lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket_or_brace ();
     do_comma_insert_check ();
-    return ')';
+    COUNT_TOK_AND_RETURN (')');
   }
 
 "." {
     TOK_RETURN ('.');
   }
 
 "+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
 "-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
@@ -822,17 +834,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     promptflag--;
     eat_whitespace ();
 
     lexer_flags.braceflag++;
     BEGIN (MATRIX_START);
-    return '{';
+    COUNT_TOK_AND_RETURN ('{');
   }
 
 "}" {
     nesting_level.remove ();
 
     TOK_RETURN ('}');
   }
 
@@ -2752,16 +2764,26 @@ gripe_matlab_incompatible_operator (cons
 {
   std::string t = op;
   int n = t.length ();
   if (t[n-1] == '\n')
     t.resize (n-1);
   gripe_matlab_incompatible (t + " used as operator");
 }
 
+DEFUN (__token_count__, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} disp (@var{x})\n\
+@deftypefn {Built-in Function} {} __token_count__\n\
+Number of language tokens processed since Octave startup.\n\
+@end deftypefn")
+{
+  return octave_value (Vtoken_count);
+}
+
 static int
 warn_matlab_incompatible (void)
 {
   Vwarn_matlab_incompatible = check_preference ("warn_matlab_incompatible");
 
   return 0;
 }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -404,78 +404,158 @@ charNDArray
 octave_base_value::char_array_value (bool) const
 {
   charNDArray retval;
   gripe_wrong_type_arg ("octave_base_value::char_array_value()",
 			type_name ());
   return retval;
 }
 
+octave_int8
+octave_base_value::int8_scalar_value (void) const
+{
+  octave_int8 retval;
+  gripe_wrong_type_arg ("octave_base_value::int8_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_int16
+octave_base_value::int16_scalar_value (void) const
+{
+  octave_int16 retval;
+  gripe_wrong_type_arg ("octave_base_value::int16_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_int32
+octave_base_value::int32_scalar_value (void) const
+{
+  octave_int32 retval;
+  gripe_wrong_type_arg ("octave_base_value::int32_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_int64
+octave_base_value::int64_scalar_value (void) const
+{
+  octave_int64 retval;
+  gripe_wrong_type_arg ("octave_base_value::int64_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_uint8
+octave_base_value::uint8_scalar_value (void) const
+{
+  octave_uint8 retval;
+  gripe_wrong_type_arg ("octave_base_value::uint8_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_uint16
+octave_base_value::uint16_scalar_value (void) const
+{
+  octave_uint16 retval;
+  gripe_wrong_type_arg ("octave_base_value::uint16_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_uint32
+octave_base_value::uint32_scalar_value (void) const
+{
+  octave_uint32 retval;
+  gripe_wrong_type_arg ("octave_base_value::uint32_scalar_value()",
+			type_name ());
+  return retval;
+}
+
+octave_uint64
+octave_base_value::uint64_scalar_value (void) const
+{
+  octave_uint64 retval;
+  gripe_wrong_type_arg ("octave_base_value::uint64_scalar_value()",
+			type_name ());
+  return retval;
+}
+
 int8NDArray
 octave_base_value::int8_array_value (void) const
 {
   int8NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::int8_array_value()",
 			type_name ());
+  return retval;
 }
 
 int16NDArray
 octave_base_value::int16_array_value (void) const
 {
   int16NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::int16_array_value()",
 			type_name ());
+  return retval;
 }
 
 int32NDArray
 octave_base_value::int32_array_value (void) const
 {
   int32NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::int32_array_value()",
 			type_name ());
+  return retval;
 }
 
 int64NDArray
 octave_base_value::int64_array_value (void) const
 {
   int64NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::int64_array_value()",
 			type_name ());
+  return retval;
 }
 
 uint8NDArray
 octave_base_value::uint8_array_value (void) const
 {
   uint8NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint8_array_value()",
 			type_name ());
+  return retval;
 }
 
 uint16NDArray
 octave_base_value::uint16_array_value (void) const
 {
   uint16NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint16_array_value()",
 			type_name ());
+  return retval;
 }
 
 uint32NDArray
 octave_base_value::uint32_array_value (void) const
 {
   uint32NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint32_array_value()",
 			type_name ());
+  return retval;
 }
 
 uint64NDArray
 octave_base_value::uint64_array_value (void) const
 {
   uint64NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint64_array_value()",
 			type_name ());
+  return retval;
 }
 
 string_vector
 octave_base_value::all_strings (bool pad, bool force) const
 {
   string_vector retval;
 
   octave_value tmp = convert_to_str (pad, force);
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -211,16 +211,32 @@ public:
   boolMatrix bool_matrix_value (void) const;
 
   boolNDArray bool_array_value (void) const;
 
   charMatrix char_matrix_value (bool force = false) const;
 
   charNDArray char_array_value (bool = false) const;
 
+  octave_int8 int8_scalar_value (void) const;
+
+  octave_int16 int16_scalar_value (void) const;
+
+  octave_int32 int32_scalar_value (void) const;
+
+  octave_int64 int64_scalar_value (void) const;
+
+  octave_uint8 uint8_scalar_value (void) const;
+
+  octave_uint16 uint16_scalar_value (void) const;
+
+  octave_uint32 uint32_scalar_value (void) const;
+
+  octave_uint64 uint64_scalar_value (void) const;
+
   int8NDArray int8_array_value (void) const;
 
   int16NDArray int16_array_value (void) const;
 
   int32NDArray int32_array_value (void) const;
 
   int64NDArray int64_array_value (void) const;
 
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -53,17 +53,17 @@ public:
   clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_value *
   empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   OCTAVE_INT_NDARRAY_T
-  OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (bool = false) const
+  OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (void) const
     { return matrix; }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
@@ -86,22 +86,22 @@ public:
   clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (*this); }
 
   octave_value *
   empty_clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (); }
 
   OCTAVE_INT_T
-  OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION (bool = false) const
+  OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION (void) const
     { return scalar; }
 
   OCTAVE_INT_NDARRAY_T
-  OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (bool = false) const
-    { return scalar; }
+  OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (void) const
+    { return OCTAVE_INT_NDARRAY_T (dim_vector (1, 1), scalar); }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -208,30 +208,30 @@ public:
   octave_value (const boolNDArray& bnda);
   octave_value (char c);
   octave_value (const char *s);
   octave_value (const std::string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (const charNDArray& chnda, bool is_string = false);
   octave_value (const octave_int8& i);
+  octave_value (const octave_int16& i);
+  octave_value (const octave_int32& i);
+  octave_value (const octave_int64& i);
   octave_value (const octave_uint8& i);
-  octave_value (const octave_int16& i);
   octave_value (const octave_uint16& i);
-  octave_value (const octave_int32& i);
   octave_value (const octave_uint32& i);
-  octave_value (const octave_int64& i);
   octave_value (const octave_uint64& i);
   octave_value (const int8NDArray& inda);
+  octave_value (const int16NDArray& inda);
+  octave_value (const int32NDArray& inda);
+  octave_value (const int64NDArray& inda);
   octave_value (const uint8NDArray& inda);
-  octave_value (const int16NDArray& inda);
   octave_value (const uint16NDArray& inda);
-  octave_value (const int32NDArray& inda);
   octave_value (const uint32NDArray& inda);
-  octave_value (const int64NDArray& inda);
   octave_value (const uint64NDArray& inda);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const octave_stream& s, int n);
   octave_value (const streamoff_array& off);
   octave_value (octave_function *f);
   octave_value (const fcn_handle_array& fha);
@@ -552,16 +552,40 @@ public:
     { return rep->bool_array_value (); }
 
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
   virtual charNDArray char_array_value (bool frc_str_conv = false) const
     { return rep->char_array_value (frc_str_conv); }
 
+  virtual octave_int8 int8_scalar_value (void) const
+    { return rep->int8_scalar_value (); }
+
+  virtual octave_int16 int16_scalar_value (void) const
+    { return rep->int16_scalar_value (); }
+
+  virtual octave_int32 int32_scalar_value (void) const
+    { return rep->int32_scalar_value (); }
+
+  virtual octave_int64 int64_scalar_value (void) const
+    { return rep->int64_scalar_value (); }
+
+  virtual octave_uint8 uint8_scalar_value (void) const
+    { return rep->uint8_scalar_value (); }
+
+  virtual octave_uint16 uint16_scalar_value (void) const
+    { return rep->uint16_scalar_value (); }
+
+  virtual octave_uint32 uint32_scalar_value (void) const
+    { return rep->uint32_scalar_value (); }
+
+  virtual octave_uint64 uint64_scalar_value (void) const
+    { return rep->uint64_scalar_value (); }
+
   virtual int8NDArray int8_array_value (void) const
     { return rep->int8_array_value (); }
 
   virtual int16NDArray int16_array_value (void) const
     { return rep->int16_array_value (); }
 
   virtual int32NDArray int32_array_value (void) const
     { return rep->int32_array_value (); }
