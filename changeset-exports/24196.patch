# HG changeset patch
# User Rik <rik@octave.org>
# Date 1509742425 25200
#      Fri Nov 03 13:53:45 2017 -0700
# Node ID 2b769c2421884d67ebc39fc8bc4a738e5b34624b
# Parent  d3dc76efb38b998302b82d789a2a97b892f8cd0d
Use std::max to simplify calculating pinv tolerance.

* CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc (pseudo_inverse):
Replace if/else decision based on rows with std::max (nr, nc).

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -964,20 +964,18 @@ ComplexMatrix::pseudo_inverse (double to
   ColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
-      if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
-      else
-        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+      tol = std::max (nr, nc) * sigma.elem (0)
+            * std::numeric_limits<double>::epsilon ();
 
       if (tol == 0)
         tol = std::numeric_limits<double>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -663,20 +663,18 @@ Matrix::pseudo_inverse (double tol) cons
   ColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
-      if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
-      else
-        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
+      tol = std::max (nr, nc) * sigma.elem (0)
+            * std::numeric_limits<double>::epsilon ();
 
       if (tol == 0)
         tol = std::numeric_limits<double>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -966,20 +966,18 @@ FloatComplexMatrix::pseudo_inverse (floa
   FloatColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
-      if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
-      else
-        tol = nc * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
+      tol = std::max (nr, nc) * sigma.elem (0)
+            * std::numeric_limits<float>::epsilon ();
 
       if (tol == 0)
         tol = std::numeric_limits<float>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -669,20 +669,18 @@ FloatMatrix::pseudo_inverse (float tol) 
   FloatColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.numel () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
-      if (nr > nc)
-        tol = nr * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
-      else
-        tol = nc * sigma.elem (0) * std::numeric_limits<float>::epsilon ();
+      tol = std::max (nr, nc) * sigma.elem (0)
+            * std::numeric_limits<float>::epsilon ();
 
       if (tol == 0)
         tol = std::numeric_limits<float>::min ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
