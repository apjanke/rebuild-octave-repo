# HG changeset patch
# User jwe
# Date 1021680308 0
#      Sat May 18 00:05:08 2002 +0000
# Node ID 818f5aec1db59aefeff5f6ad7c8dbdc62624a0bd
# Parent  a10df4059532b4b572a8dbeed72c1fa6cc7499a9
[project @ 2002-05-18 00:05:08 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -249,17 +249,17 @@ public:
 
   Array<T> value (void);
 
   Array<T> index (idx_vector& i, int resize_ok = 0,
 		  const T& rfv = Array<T>::resize_fill_value ()) const;
 
 #endif
 
-  static T resize_fill_value (void) { return static_cast<T> (0); }
+  static T resize_fill_value (void) { return T (); }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-05-17  Mumit Khan <khan@nanotech.wisc.edu>
+
+	* Array.h (Array<T>::resize_fill_value): Return default initialized
+	object.
+
 2002-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-rl-edit.c (OCTAVE_RL_SAVE_STRING): New macro.
 	(octave_rl_set_name, octave_rl_set_basic_quote_characters): Use it.
 	(octave_rl_set_basic_word_break_characters,
 	octave_rl_set_completer_word_break_characters): New functions.
 	* oct-rl-edit.h: Provide decls.
 	* cmd-edit.cc (gnu_readline::do_set_basic_word_break_characters,
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2002-05-17  Mumit Khan <khan@nanotech.wisc.edu>
+
+	* c-file-ptr-stream.h (OCTAVE_STD_FILEBUF): New macro to handle
+	various forms of extensions to std::filebuf.
+	(c_file_ptr_buf::c_file_ptr_buf): Use.
+	* pt-idx.cc (tree_index_expression::tree_index_expression): Remove
+	default arguments are from definition.
+	* symtab.cc (SYMBOL_DEF::print_info): Add std::.
+	(symbol_record::print_info): Likewise.
+	(symbol_table::print_info): Likewise.
+
 2002-05-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-map.cc (Octave_map::assign): Resize RHS if it is shorter
 	than existing struct array.
 
 	* ov-cell.cc (octave_cell::subsasgn): If an error has occurred,
 	skip final assignment step.
 	* ov-list.cc (octave_list::subsasgn): Likewise.
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -26,35 +26,59 @@ Software Foundation, 59 Temple Place - S
 #ifdef __GNUG__
 #pragma interface
 #endif
 
 #include <iostream>
 #include <fstream>
 #include <cstdio>
 
+//
+// The c_file_ptr_buf requires a std::filebuf that accepts an open
+// file descriptor. This feature, while not part of the ISO C++
+// standard, is supported by a variety of C++ compiler runtimes,
+// albeit in slightly different ways.
+//
+// The C++ runtime libraries shipped with GCC versions < 3.0, Sun Pro,
+// Sun Workshop/Forte 5/6, Compaq C++ all support a non-standard filebuf
+// constructor that takes an open file descriptor. The almost ISO compliant
+// GNU C++ runtime shipped with GCC 3.0.x supports a different non-standard
+// filebuf constructor that takes a FILE* instead; starting from GCC 3.1,
+// the GNU C++ runtime removes all non-standard std::filebuf constructors
+// and provides an extension template class __gnu_cxx::stdio_filebuf
+// that supports the the 3.0.x behavior.
+//
+#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)
+# include <ext/stdio_filebuf.h>
+# define OCTAVE_STD_FILEBUF __gnu_cxx::stdio_filebuf<char>
+#else
+# define OCTAVE_STD_FILEBUF std::filebuf
+#endif
+
 class
-c_file_ptr_buf : public std::filebuf
+c_file_ptr_buf : public OCTAVE_STD_FILEBUF
 {
 public:
 
 #if !defined (CXX_ISO_COMPLIANT_LIBRARY)
   typedef int int_type;
+#else
+  typedef std::filebuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
   FILE* stdiofile (void) const { return f; }
 
   c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = ::fclose)
     : 
 #if defined __GNUC__ && __GNUC__ >= 3
-    std::filebuf (f_arg, std::ios::in | std::ios::out),
+    OCTAVE_STD_FILEBUF (f_arg, std::ios::in | std::ios::out),
 #else
-    std::filebuf (f_arg ? fileno (f_arg) : -1),
+    OCTAVE_STD_FILEBUF (f_arg ? fileno (f_arg) : -1),
 #endif
     f (f_arg), cf (cf_arg),
     fd (f_arg ? fileno (f_arg) : -1)
     { }
 
   ~c_file_ptr_buf (void);
 
   int_type overflow (int_type);
@@ -89,16 +113,18 @@ protected:
 
   close_fcn cf;
 
 private:
 
   int fd;
 };
 
+#undef OCTAVE_STD_FILEBUF
+
 class
 i_c_file_ptr_stream : public std::istream
 {
 public:
 
   i_c_file_ptr_stream (FILE* f, c_file_ptr_buf::close_fcn cf = ::fclose)
     : std::istream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -54,17 +54,17 @@ tree_index_expression::tree_index_expres
 					      int l, int c, char t)
   : tree_expression (l, c), expr (e), args (), type (), arg_nm ()
 {
   append (lst, t);
 }
 
 tree_index_expression::tree_index_expression (tree_expression *e,
 					      const std::string& n,
-					      int l = -1, int c = -1)
+					      int l, int c)
   : tree_expression (l, c), expr (e), args (), type (), arg_nm ()
 {
   append (n);
 }
 
 void
 tree_index_expression::append (tree_argument_list *lst, char t)
 {
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -173,17 +173,17 @@ SYMBOL_DEF::which (std::ostream& os, con
 	  return;
 	}
     }
 
   os << " is a " << type_as_string () << "\n";
 }
 
 void
-SYMBOL_DEF::print_info (ostream& os, const std::string& prefix) const
+SYMBOL_DEF::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "symbol_def::count: " << count << "\n";
 
   definition.print_info (os, prefix + "  ");
 }
 
 // Individual records in a symbol table.
 
@@ -471,17 +471,17 @@ symbol_record::print_symbol_info_line (s
     os << std::setiosflags (std::ios::right) << std::setw (7) << nc;
 
   os << std::resetiosflags (std::ios::right);
 
   os << "  " << name () << "\n";
 }
 
 void
-symbol_record::print_info (ostream& os, const std::string& prefix) const
+symbol_record::print_info (std::ostream& os, const std::string& prefix) const
 {
   if (definition)
     definition->print_info (os, prefix);
   else
     os << prefix << "symbol " << name () << " is undefined\n";
 }
 
 bool
@@ -869,17 +869,17 @@ symbol_table::pop_context (void)
 	{
 	  ptr->pop_context ();
 	  ptr = ptr->next ();
 	}
     }
 }
 
 void
-symbol_table::print_info (ostream& os) const
+symbol_table::print_info (std::ostream& os) const
 {
   int count = 0;
   int empty_chains = 0;
   int max_chain_length = 0;
   int min_chain_length = INT_MAX;
 
   for (unsigned int i = 0; i < table_size; i++)
     {
