# HG changeset patch
# User jwe
# Date 1025284675 0
#      Fri Jun 28 17:17:55 2002 +0000
# Node ID 3030cb6cb559887ab8d3d5e7b396441c235ef74f
# Parent  05485f53259924455c172a3327a39a9ce4b05907
[project @ 2002-06-28 17:17:55 by jwe]

diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -169,16 +169,19 @@ The set of initial states and derivative
 be consistent.  In practice, however, @sc{Dassl} is not very good at\n\
 determining a consistent set for you, so it is best if you ensure that\n\
 the initial values result in the function evaluating to zero.\n\
 \n\
 The fifth argument is optional, and may be used to specify a set of\n\
 times that the DAE solver should not integrate past.  It is useful for\n\
 avoiding difficulties with singularities and points where there is a\n\
 discontinuity in the derivative.\n\
+\n\
+You can use the function @code{daspk_options} to set optional\n\
+parameters for @code{daspk}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fdaspk");
 
   unwind_protect_int (call_depth);
   call_depth++;
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -169,16 +169,19 @@ The set of initial states and derivative
 be consistent.  In practice, however, @sc{Dassl} is not very good at\n\
 determining a consistent set for you, so it is best if you ensure that\n\
 the initial values result in the function evaluating to zero.\n\
 \n\
 The fifth argument is optional, and may be used to specify a set of\n\
 times that the DAE solver should not integrate past.  It is useful for\n\
 avoiding difficulties with singularities and points where there is a\n\
 discontinuity in the derivative.\n\
+\n\
+You can use the function @code{dassl_options} to set optional\n\
+parameters for @code{dassl}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fdassl");
 
   unwind_protect_int (call_depth);
   call_depth++;
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -150,16 +150,19 @@ fsolve_user_function (const ColumnVector
   while (0)
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
+\n\
+You can use the function @code{fsolve_options} to set optional\n\
+parameters for @code{fsolve}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Ffsolve");
 
   unwind_protect_int (call_depth);
   call_depth++;
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -177,16 +177,19 @@ It must have the form\n\
 \n\
 @noindent\n\
 where @var{xdot} and @var{x} are vectors and @var{t} is a scalar.\n\
 \n\
 The fourth argument is optional, and may be used to specify a set of\n\
 times that the ODE solver should not integrate past.  It is useful for\n\
 avoiding difficulties with singularities and points where there is a\n\
 discontinuity in the derivative.\n\
+\n\
+You can use the function @code{lsode_options} to set optional\n\
+parameters for @code{lsode}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Flsode");
 
   unwind_protect_int (call_depth);
   call_depth++;
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -144,16 +144,19 @@ tolerance to zero. \n\
 The optional argument @var{sing} is a vector of values at which the\n\
 integrand is known to be singular.\n\
 \n\
 The result of the integration is returned in @var{v} and @var{ier}\n\
 contains an integer error code (0 indicates a successful integration).\n\
 The value of @var{nfun} indicates how many function evaluations were\n\
 required, and @var{err} contains an estimate of the error in the\n\
 solution.\n\
+\n\
+You can use the function @code{quad_options} to set optional\n\
+parameters for @code{quad}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fquad");
 
   unwind_protect_int (call_depth);
   call_depth++;
