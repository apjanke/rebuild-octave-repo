# HG changeset patch
# User jwe
# Date 1095781548 0
#      Tue Sep 21 15:45:48 2004 +0000
# Node ID ed25bed4340914737f2e773773734e264841f4c9
# Parent  1743bf92177366401901f1f841fddb37b87af7b6
[project @ 2004-09-21 15:45:48 by jwe]

diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/flipdim.m
@@ -0,0 +1,67 @@
+## Copyright (C) 2004 David Bateman
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} flipdim (@var{x}, @var{dim})
+## Return a copy of @var{x} flipped about the dimension @var{dim}.
+## For exmaple
+##
+## @example
+## @group
+## flipdim ([1, 2; 3, 4], 2)
+##      @result{}  2  1
+##          4  3
+## @end group
+## @end example
+## @end deftypefn
+## @seealso{fliplr, flipud, rot90 and rotdim}
+
+## Author: David Bateman
+
+function y = flipdim (x, dim)
+
+  if (nargin != 1 && nargin != 2)
+    usage ("flipdim (x, dim)");
+  endif
+
+  nd = ndims (x);
+  sz = size (x);
+  if (nargin == 1)
+    ## Find the first non-singleton dimension.
+    dim = 1;
+    while (dim < nd + 1 && sz(dim) == 1)
+      dim = dim + 1;
+    endwhile
+    if (dim > nd)
+      dim = 1;
+    endif
+  else
+    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && dim < (nd + 1))
+      error ("flipdim: dim must be an integer and valid dimension");
+    endif
+  endif
+
+  idx = cell ();
+  for i = 1:nd
+    idx{i} = 1:sz(i);
+  endfor
+  idx{dim} = sz(dim):-1:1;
+  y = x(idx{:});
+
+endfunction
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/rotdim.m
@@ -0,0 +1,121 @@
+## Copyright (C) 2004 David Bateman
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} rotdim (@var{x}, @var{n}, @var{plane})
+## Return a copy of @var{x} with the elements rotated counterclockwise in
+## 90-degree increments.  The second argument is optional, and specifies
+## how many 90-degree rotations are to be applied (the default value is 1).
+## The third argument is also optional and defines the plane of the
+## rotation. As such @var{plane} is a two element vector containing two
+## different valid dimensions of the matrix. If @var{plane} is not given
+## Then the first two non-singleton dimensions are used.
+##
+## Negative values of @var{n} rotate the matrix in a clockwise direction.
+## For example,
+##
+## @example
+## @group
+## rotdim ([1, 2; 3, 4], -1, [1, 2])
+##      @result{}  3  1
+##          4  2
+## @end group
+## @end example
+##
+## @noindent
+## rotates the given matrix clockwise by 90 degrees.  The following are all
+## equivalent statements:
+##
+## @example
+## @group
+## rot90 ([1, 2; 3, 4], -1, [1, 2])
+## @equiv{}
+## rot90 ([1, 2; 3, 4], 3, [1, 2])
+## @equiv{}
+## rot90 ([1, 2; 3, 4], 7, [1, 2])
+## @end group
+## @end example
+## @end deftypefn
+## @seealso{rot90, flipud, fliplr and flipdim}
+
+function y = rotdim (x, k, plane)
+  
+  if (nargin < 1 || nargin > 3)
+    usage ("rotdim (x, k, plane)");
+  endif
+
+  if (nargin > 1 && !isempty(k))
+    if (imag (k) != 0 || fix (k) != k)
+      error ("rotdim: k must be an integer");
+    endif
+  else
+    k = 1;
+  endif
+
+  nd = ndims (x);
+  sz = size (x);
+  if (nargin < 3)
+    ## Find the first two non-singleton dimension.
+    plane = [];
+    dim = 0;
+    while (dim < nd)
+      dim = dim + 1;
+      if (sz (dim) != 1)
+	plane = [plane, dim];
+	if (length (plane) == 2)
+	  break;
+	endif
+      endif
+    endwhile
+    if (length (plane) < 1)
+      plane = [1, 2];
+    elseif (length (plane) < 2)
+      plane = [1, plane];
+    endif
+  else
+    if (! (isvector (plane) && length (plane) == 2
+	   && all (plane == round (plane)) && all (plane > 0)
+	   && all (plane < (nd + 1)) && plane(1) != plane(2)))
+      error ("rotdim: plane must be a 2 element integer vector defining a valid plane");
+    endif
+  endif
+
+  k = rem (k, 4);
+  if (k < 0)
+    k = k + 4;
+  endif
+  if (k == 0)
+    y = x;
+  elseif (k == 2)
+    y = flipdim (flipdim (x, plane (1)), plane (2));
+  elseif (k == 1 || k == 3)
+    perm = 1:nd;
+    perm(plane(1)) = plane(2);
+    perm(plane(2)) = plane(1);
+    y = permute (x, perm);
+    if (k == 1)
+      y = flipdim (y, min (plane));
+    else
+      y = flipdim (y, max (plane));
+    endif
+  else
+    error ("rotdim: internal error!");
+  endif
+
+endfunction
