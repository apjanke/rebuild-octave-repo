# HG changeset patch
# User jwe
# Date 864495535 0
#      Sat May 24 17:38:55 1997 +0000
# Node ID fd2080b2800e0b1396bab2bdf71e0ba613a471e4
# Parent  9a54159563de43582502fb9725c2da1e82dad195
[project @ 1997-05-24 17:37:39 by jwe]

diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -96,19 +96,20 @@ alias_builtin (const string& alias, cons
   }
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
   octave_value_list \
   F ## name (const octave_value_list& args_name, int nargout_name)
 
 // How builtin variables are actually installed.
 
-#define DEFVAR_INTERNAL(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
+#define DEFVAR_INTERNAL(name, sname, defn, inst_as_fcn, protect, \
+			chg_fcn, doc) \
   install_builtin_variable (name, octave_value (defn), inst_as_fcn, \
-			    protect, (sv_fcn != 0), sv_fcn, doc)
+			    protect, (chg_fcn != 0), chg_fcn, doc)
 
 // How mapper functions are actually installed.
 
 #define DEFUN_MAPPER_INTERNAL(name, ch_map, d_d_map, d_c_map, c_c_map, \
 			      lo, hi, can_ret_cmplx_for_real, doc) \
   install_builtin_mapper \
     (new octave_mapper (ch_map, d_d_map, d_c_map, c_c_map, lo, hi, \
 			can_ret_cmplx_for_real, #name))
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -90,28 +90,28 @@ install_builtin_variable_as_function (co
 
   if (eternal)
     sym_rec->make_eternal ();
 }
 
 void
 install_builtin_variable (const string& name, const octave_value& value,
 			  bool install_as_function, bool protect,
-			  bool eternal, void *sv_fcn_arg,
+			  bool eternal, void *chg_fcn_arg,
 			  const string& help_string)
 {
-  symbol_record::sv_function sv_fcn
-    = static_cast<symbol_record::sv_function> (sv_fcn_arg);
+  symbol_record::change_function chg_fcn
+    = static_cast<symbol_record::change_function> (chg_fcn_arg);
 
   if (install_as_function)
     install_builtin_variable_as_function (name, value, protect,
 					  eternal, help_string);
   else
     bind_builtin_variable (name, value, protect, eternal,
-			   sv_fcn, help_string);
+			   chg_fcn, help_string);
 }
 
 void
 alias_builtin (const string& alias, const string& name)
 {
   symbol_record *sr_name = global_sym_tab->lookup (name);
 
   if (! sr_name)
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -41,44 +41,44 @@ Software Foundation, 59 Temple Place - S
 //
 //   protect is a flag that says whether it should be possible to give
 //     the variable a new value.
 //
 //   eternal is a flag that says whether it should be possible to
 //     clear the variable.  Most builtin variables are eternal, and
 //     cannot be cleared.
 //
-//   sv_fcn is a pointer to a function that should be called whenever
+//   chg_fcn is a pointer to a function that should be called whenever
 //     this variable is given a new value.  It can be 0 if there is no
 //     function to call.  See also the code in user-prefs.cc.
 //
 //   doc is the simple help text for this variable.
 
-#define DEFVAR(name, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INTERNAL (#name, SBV_ ## name, defn, inst_as_fcn, 0, sv_fcn, doc)
+#define DEFVAR(name, defn, inst_as_fcn, chg_fcn, doc) \
+  DEFVAR_INTERNAL (#name, SBV_ ## name, defn, inst_as_fcn, 0, chg_fcn, doc)
 
 // Define a builtin-constant, and a corresponding variable that can be
 // redefined.  This is just the same as DEFVAR, except that it defines
 // `name' as a variable, and `__name__' as a constant that cannot be
 // redefined.
 
-#define DEFCONST(name, defn, inst_as_fcn, sv_fcn, doc) \
+#define DEFCONST(name, defn, inst_as_fcn, chg_fcn, doc) \
   DEFVAR_INTERNAL (#name, SBV_ ## name, defn, inst_as_fcn, false, \
-		   sv_fcn, doc); \
+		   chg_fcn, doc); \
   DEFVAR_INTERNAL ("__" ## #name ## "__", XSBV_ ## name, defn, false, \
-		   true, sv_fcn, doc)
+		   true, chg_fcn, doc)
 
 // This one can be used when `name' cannot be used directly (if it is
 // already defined as a macro).  In that case, name is already a
 // quoted string, and the name of the structure has to be passed too.
 
-#define DEFCONSTX(name, sname, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INTERNAL (name, sname, defn, inst_as_fcn, false, sv_fcn, doc); \
+#define DEFCONSTX(name, sname, defn, inst_as_fcn, chg_fcn, doc) \
+  DEFVAR_INTERNAL (name, sname, defn, inst_as_fcn, false, chg_fcn, doc); \
   DEFVAR_INTERNAL ("__" ## name ## "__", X ## sname, defn, false, true, \
-		   sv_fcn, doc)
+		   chg_fcn, doc)
 
 // Define a builtin function.
 //
 //   name is the name of the function, unqouted.
 //
 //   args_name is the name of the octave_value_list variable used to pass
 //     the argument list to this function.
 //
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -73,16 +73,37 @@ enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_ASCII,
     LS_MAT_BINARY,
     LS_UNKNOWN,
   };
 
+// Return nonzero if S is a valid identifier.
+
+static bool
+valid_identifier (const char *s)
+{
+  if (! s || ! (isalnum (*s) || *s == '_'))
+     return false;
+
+  while (*++s != '\0')
+    if (! (isalnum (*s) || *s == '_'))
+      return false;
+
+  return true;
+}
+
+static bool
+valid_identifier (const string& s)
+{
+  return valid_identifier (s.c_str ());
+}
+
 // XXX FIXME XXX -- shouldn't this be implemented in terms of other
 // functions that are already available?
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is nonzero, replace any existing definition
 // for NAME.  If GLOBAL is nonzero, make the variable global.
 //
 // Assumes TC is defined.
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -31,21 +31,21 @@ class octave_value_list;
 #include "oct-obj.h"
 #include "symtab.h"
 
 class
 octave_lvalue
 {
 public:
 
-  octave_lvalue (octave_value *v = 0, symbol_record::sv_function f = 0)
+  octave_lvalue (octave_value *v = 0, symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name () { }
 
   octave_lvalue (octave_value *v, const string& nm,
-		 symbol_record::sv_function f = 0)
+		 symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name (nm) { }
 
   octave_lvalue (const octave_lvalue& vr)
     : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
       struct_elt_name (vr.struct_elt_name) { }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
@@ -97,17 +97,17 @@ public:
     }
 
 private:
 
   octave_value *val;
 
   octave_value_list idx;
 
-  symbol_record::sv_function chg_fcn;
+  symbol_record::change_function chg_fcn;
 
   string struct_elt_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -112,20 +112,20 @@ symbol_table *global_sym_tab = 0;
 
 // Create the initial symbol tables and set the current scope at the
 // top level.
 
 void
 initialize_symbol_tables (void)
 {
   if (! global_sym_tab)
-    global_sym_tab = new symbol_table ();
+    global_sym_tab = new symbol_table (2048);
 
   if (! top_level_sym_tab)
-    top_level_sym_tab = new symbol_table ();
+    top_level_sym_tab = new symbol_table (4096);
 
   curr_sym_tab = top_level_sym_tab;
 }
 
 // Attributes of variables and functions.
 
 // Is this variable a builtin?
 
@@ -1507,34 +1507,34 @@ clear_global_error_variable (void *)
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const string& varname, const octave_value& val,
 		       bool protect, bool eternal,
-		       symbol_record::sv_function sv_fcn,
+		       symbol_record::change_function chg_fcn,
 		       const string& help)
 {
   symbol_record *sr = global_sym_tab->lookup (varname, true);
 
   // It is a programming error for a builtin symbol to be missing.
   // Besides, we just inserted it, so it must be there.
 
   assert (sr);
 
   sr->unprotect ();
 
   // Must do this before define, since define will call the special
   // variable function only if it knows about it, and it needs to, so
   // that user prefs can be properly initialized.
 
-  if (sv_fcn)
-    sr->set_sv_function (sv_fcn);
+  if (chg_fcn)
+    sr->set_change_function (chg_fcn);
 
   sr->define_builtin_var (val);
 
   if (protect)
     sr->protect ();
 
   if (eternal)
     sr->make_eternal ();
@@ -1783,13 +1783,37 @@ With -x, exclude the named variables")
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
+DEFUN (__dump_symtab_info__, args, ,
+  "__dump_symtab_info__ (): print raw symbol table statistices")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      string arg = args(0).string_value ();
+
+      if (arg == "global")
+	global_sym_tab->print_stats ();
+      else
+	print_usage ("__dump_symtab_info__");
+    }
+  else if (nargin == 0)
+    curr_sym_tab->print_stats ();
+  else
+    print_usage ("__dump_symtab_info__");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -96,17 +96,17 @@ extern void bind_ans (const octave_value
 
 extern void bind_global_error_variable (void);
 
 extern void clear_global_error_variable (void *);
 
 extern void
 bind_builtin_variable (const string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
-		       symbol_record::sv_function f = 0,
+		       symbol_record::change_function f = 0,
 		       const string& help = string ());
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
