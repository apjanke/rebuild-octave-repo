# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1546973697 18000
#      Tue Jan 08 13:54:57 2019 -0500
# Node ID 10919e3c9aaaa42a3cc92c15d1a18084b5c127ac
# Parent  10f648516d5b83e9001654329cde7fa422df6c95
# Parent  bc6237a189e10a1e9b468099afc254dab642f6f3
maint: Merge stable to default.

diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -764,17 +764,17 @@ maybe_initialize_magick (void)
 {
   static bool initialized = false;
 
   if (! initialized)
     {
       // Save locale as GraphicsMagick might change this (fixed in
       // GraphicsMagick since version 1.3.13 released on December 24, 2011)
       const char *static_locale = setlocale (LC_ALL, nullptr);
-      const std::string locale (static_locale);
+      const std::string locale = (static_locale ? static_locale : "");
 
       const std::string program_name
         = octave::sys::env::get_program_invocation_name ();
       Magick::InitializeMagick (program_name.c_str ());
 
       // Restore locale from before GraphicsMagick initialisation
       setlocale (LC_ALL, locale.c_str ());
 
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -49,18 +49,18 @@ get_red_dims (const dim_vector& x, const
         }
       else if (i > dim)
         {
           z(i) = x(i);
           tmp_n *= x(i);
         }
       else
         {
+          z(i) = 1;
           tmp_k = x(i);
-          z(i) = 1;
         }
     }
 
   m = octave::to_f77_int (tmp_m);
   n = octave::to_f77_int (tmp_n);
   k = octave::to_f77_int (tmp_k);
 }
 
@@ -284,25 +284,25 @@ get_blkmm_dims (const dim_vector& dimx, 
   int nd = dimx.ndims ();
 
   m = octave::to_f77_int (dimx(0));
   k = octave::to_f77_int (dimx(1));
   n = octave::to_f77_int (dimy(1));
 
   octave_idx_type tmp_np = 1;
 
-  bool match = dimy(0) == k && nd == dimy.ndims ();
+  bool match = ((dimy(0) == k) && (nd == dimy.ndims ()));
 
   dimz = dim_vector::alloc (nd);
 
   dimz(0) = m;
   dimz(1) = n;
   for (int i = 2; match && i < nd; i++)
     {
-      match = match && dimx(i) == dimy(i);
+      match = (dimx(i) == dimy(i));
       dimz(i) = dimx(i);
       tmp_np *= dimz(i);
     }
 
   np = octave::to_f77_int (tmp_np);
 
   if (! match)
     error ("blkmm: A and B dimensions don't match: (%s) and (%s)",
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10478,24 +10478,27 @@ uicontrol::properties::update_units (voi
 }
 
 void
 uicontrol::properties::set_style (const octave_value& st)
 {
   // Don't notify the style change until the "value" property is fixed
   bool modified = style.set (st, true, false);
 
-  // We now need to override "value" for listbox and popupmenu and eventually
-  // notify the toolkit afterwards.
-  if (modified && (style_is ("listbox") || style_is ("popupmenu")))
-    {
-      Matrix v = value.get ().matrix_value ();
-      if (v.numel () == 1 && v(0) == 0)
-        value.set (octave_value (1), true, false);
-
+  // Override "value" property for listbox and popupmenu.
+  if (modified)
+    {
+      if (style_is ("listbox") || style_is ("popupmenu"))
+        {
+          Matrix v = value.get ().matrix_value ();
+          if (v.numel () == 1 && v(0) == 0)
+            value.set (octave_value (1), true, false);
+        }
+
+      // Notify toolkit
       graphics_object go = gh_manager::get_object (get___myhandle__ ());
       if (go)
         go.update (style.get_id ());
     }
 }
 
 Matrix
 uicontrol::properties::get_boundingbox (bool,
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -252,17 +252,17 @@ namespace octave
   static void
   unlink_cleanup (const char *file)
   {
     octave_unlink_wrapper (file);
   }
 
   history_system::history_system (interpreter& interp)
     : m_interpreter (interp), m_input_from_tmp_file (false),
-      m_timestamp_format_string ()
+      m_timestamp_format_string (default_timestamp_format ())
   { }
 
   void history_system::initialize (bool read_history_file)
   {
     command_history::initialize (read_history_file, default_file (),
                                  default_size (),
                                  sys::env::getenv ("OCTAVE_HISTCONTROL"));
 
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -524,17 +524,17 @@ namespace octave
 
     const char *s = strrchr (line, delim);
 
     if (s)
       {
         // Remove incomplete component.
         const char *f = strrchr (line, sys::file_ops::dir_sep_char ());
 
-        if (s[1] == '~' || (f && f != s))
+        if (f && (s[1] == '~' || f != s))
           {
             // For something like "A /b", f==s; don't assume a file.
 
             std::string candidate_filename = s+1;
 
             candidate_filename = candidate_filename.substr (0, f - s);
 
             // Handles any complete ~<username>, but doesn't expand usernames.
@@ -828,17 +828,18 @@ namespace octave
     std::string tmp = f (text, state);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   char *
   gnu_readline::command_quoter (char *text, int matches, char *qcp)
   {
@@ -849,17 +850,18 @@ namespace octave
     std::string tmp = f (text, matches, *qcp);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   char *
   gnu_readline::command_dequoter (char *text, int quote)
   {
@@ -870,17 +872,18 @@ namespace octave
     std::string tmp = f (text, quote);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   int
   gnu_readline::command_char_is_quoted (char *text, int quote)
   {
@@ -900,19 +903,20 @@ namespace octave
     ::octave_rl_redisplay ();
 
     return ::octave_rl_newline (count, key);
   }
 
   char **
   gnu_readline::command_completer (const char *text, int, int)
   {
-    char **matches = nullptr;
-    matches
-      = ::octave_rl_completion_matches (text, gnu_readline::command_generator);
+    char **matches =
+      ::octave_rl_completion_matches (text,
+                                      gnu_readline::command_generator);
+
     return matches;
   }
 
 #endif
 
   class
   default_command_editor : public command_editor
   {
@@ -1105,29 +1109,39 @@ namespace octave
   command_editor::insert_initial_input (void)
   {
     return instance_ok () ? instance->do_insert_initial_input () : 0;
   }
 
   int
   command_editor::startup_handler (void)
   {
-    for (startup_hook_fcn f : startup_hook_set)
+    // Iterate over a copy of the set to avoid problems if a hook
+    // function attempts to remove itself from the startup_hook_set.
+
+    std::set<startup_hook_fcn> hook_set = startup_hook_set;
+
+    for (startup_hook_fcn f : hook_set)
       {
         if (f)
           f ();
       }
 
     return 0;
   }
 
   int
   command_editor::pre_input_handler (void)
   {
-    for (pre_input_hook_fcn f : pre_input_hook_set)
+    // Iterate over copy of the set to avoid problems if a hook function
+    // attempts to remove itself from the pre_input_hook_set.
+
+    std::set<pre_input_hook_fcn> hook_set = pre_input_hook_set;
+
+    for (pre_input_hook_fcn f : hook_set)
       {
         if (f)
           f ();
       }
 
     return 0;
   }
 
@@ -1721,17 +1735,17 @@ namespace octave
                   if (c == 'd')
                     tmpstr = now.strftime ("%a %b %d");
                   else if (c == 't')
                     tmpstr = now.strftime ("%H:%M:%S");
                   else if (c == 'T')
                     tmpstr = now.strftime ("%I:%M:%S");
                   else if (c == '@')
                     tmpstr = now.strftime ("%I:%M %p");
-                  else if (c == 'A')
+                  else // (c == 'A')
                     tmpstr = now.strftime ("%H:%M");
 
                   break;
                 }
 
               case 'e':
                 {
                   tmpstr = '\033';
diff --git a/scripts/java/module.mk b/scripts/java/module.mk
--- a/scripts/java/module.mk
+++ b/scripts/java/module.mk
@@ -29,26 +29,36 @@ JAVA_SRC = \
 endif
 
 JAVA_CLASSES = $(JAVA_SRC:.java=.class)
 
 %canon_reldir%_JAVA_SRC = $(addprefix %reldir%/, $(JAVA_SRC))
 
 %canon_reldir%_JAVA_CLASSES = $(addprefix %reldir%/, $(JAVA_CLASSES))
 
+OCT_V_JAR = $(oct__v_JAR_$(V))
+oct__v_JAR_ = $(oct__v_JAR_$(AM_DEFAULT_VERBOSITY))
+oct__v_JAR_0 = @echo "  JAR     " $@;
+oct__v_JAR_1 =
+
+OCT_V_JAVAC = $(oct__v_JAVAC_$(V))
+oct__v_JAVAC_ = $(oct__v_JAVAC_$(AM_DEFAULT_VERBOSITY))
+oct__v_JAVAC_0 = @echo "  JAVAC   " $@;
+oct__v_JAVAC_1 =
+
 $(%canon_reldir%_JAVA_CLASSES) : %.class : %.java | %reldir%/$(octave_dirstamp)
-	$(AM_V_GEN)$(MKDIR_P) %reldir%/$(org_octave_dir) && \
+	$(OCT_V_JAVAC)$(MKDIR_P) %reldir%/$(org_octave_dir) && \
 	( cd $(srcdir)/scripts/java; \
 	  "$(JAVAC)" -source 1.6 -target 1.6 -Xlint:-options \
 	             -d $(abs_top_builddir)/scripts/java \
 	             $(org_octave_dir)/$(<F) )
 
 if AMCOND_HAVE_JAVA
 %reldir%/octave.jar: $(%canon_reldir%_JAVA_CLASSES)
-	$(AM_V_GEN)rm -f $@-t $@ && \
+	$(OCT_V_JAR)rm -f $@-t $@ && \
 	( cd scripts/java; \
 	  "$(JAR)" cf octave.jar-t $(JAVA_CLASSES) ) && \
 	mv $@-t $@
 endif
 
 %canon_reldir%dir = $(fcnfiledir)/java
 
 %canon_reldir%_DATA = \
diff --git a/scripts/plot/util/printd.m b/scripts/plot/util/printd.m
--- a/scripts/plot/util/printd.m
+++ b/scripts/plot/util/printd.m
@@ -39,17 +39,17 @@ function pr_out = printd (obj, filename)
   ## obj is the input object.
   ## filename is the output file (with required suffix).
 
   ## Extract .suffix from filename
   if ((sufix = rindex (filename, ".")) <= 0)
     error ("printd: output FILENAME '%s' requires a suffix.\nOptions are: pdf ps eps txt jpg jpeg", filename);
   endif
   opt = substr (filename, sufix+1);
-  [pf, tempf, mag] = mkstemp ("oct-XXXXXX", 1);
+  [pf, tempf, mag] = mkstemp (fullfile (tempdir (), "oct-XXXXXX"), true);
   fprintf (pf, "%s", disp (obj));
   frewind (pf);
 
   ## It seems best to only use convert for image output.  Its ps and pdf
   ## are badly rendered.
   opt = lower (opt);
   switch (opt)
     case "pdf"
@@ -89,25 +89,29 @@ endfunction
 %! "stem step: 10, data: unsorted.", ...
 %! "Hinges:    lo: 12, hi: 42"     , ...
 %! "   1 | 22118"                  , ...
 %! "   2 | 28"                     , ...
 %! "   3 | 98"                     , ...
 %! "   4 | 244"                    , ...
 %! "   5 | 2"                      );
 %! printd (r2, "test_p.txt");
-%! system ("cat test_p.txt");
-%! delete ("test_p.txt");
+%! type ("test_p.txt");
+%! unlink ("test_p.txt");
 
 %!test
 %! r2 = char (
 %! "stem step: 10, data: unsorted.",
 %! "Hinges:    lo: 12, hi: 42"     ,
 %! "   1 | 22118"                  ,
 %! "   2 | 28"                     ,
 %! "   3 | 98"                     ,
 %! "   4 | 244"                    ,
 %! "   5 | 2"                      );
-%! printd (r2, "test_p.txt");
-%! r4 = fileread ("test_p.txt");
-%! delete ("test_p.txt");
-%! r2 = disp (r2);
-%! assert (r4, r2);
+%! unwind_protect
+%!   filename = [tempname() ".txt"];
+%!   printd (r2, filename);
+%!   r4 = fileread (filename);
+%!   r2 = disp (r2);
+%!   assert (r4, r2);
+%! unwind_protect_cleanup
+%!   unlink (filename);
+%! end_unwind_protect
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -598,20 +598,22 @@ tmp_objfile_name (void)
 
   char *ctmpl = new char [tmpl.length () + 1];
 
   ctmpl = strcpy (ctmpl, tmpl.c_str ());
 
   // mkostemps will open the file and return a file descriptor.  We
   // won't worry about closing it because we will need the file until we
   // are done and then the file will be closed when mkoctfile exits.
-
   octave_mkostemps_wrapper (ctmpl, 2);
 
-  return std::string (ctmpl);
+  std::string retval (ctmpl);  // make C++ string from filled-in template
+  delete [] ctmpl;
+
+  return retval;
 }
 
 static void
 clean_up_tmp_files (const std::list<std::string>& tmp_files)
 {
   for (const auto& file : tmp_files)
     octave_unlink_wrapper (file.c_str ());
 }
diff --git a/test/pkg/pkg.tst b/test/pkg/pkg.tst
--- a/test/pkg/pkg.tst
+++ b/test/pkg/pkg.tst
@@ -56,25 +56,27 @@
 %!function silent_pkg_install (varargin)
 %!  evalc (["pkg install", sprintf(" %s", varargin{:})]);
 %!endfunction
 
 ## Action install/uninstall
 %!testif HAVE_Z
 %! for i = 1:numel (mfile_pkg_name)
 %!   silent_pkg_install (mfile_pkg_tgz{i});
+%!   system (["chmod -Rf u+w '" prefix "'"]);   ## FIXME: Work around bug #53578
 %!   pkg ("uninstall", mfile_pkg_name{i});
 %! endfor
 %!
 %!error pkg ("install", "nonexistent.zip")
 
 # -local
 %!testif HAVE_Z
 %! for i = 1:numel (mfile_pkg_name)
 %!   silent_pkg_install ("-local", mfile_pkg_tgz{i});
+%!   system (["chmod -Rf u+w '" prefix "'"]);   ## FIXME: Work around bug #53578
 %!   pkg ("uninstall", mfile_pkg_name{i});
 %! endfor
 
 # -forge (need check for options?)
 ## FIXME: Need test
 # We do not test this yet ... fails if no internet connection
 # use dataframe which is an mfile only package
 #%!test
@@ -85,24 +87,25 @@
 ## FIXME: Need test
 
 # -verbose
 ## FIXME: Need test
 
 ## Action load/unload (within install/uninstall)
 %!testif HAVE_Z
 %! for i = 1:numel (mfile_pkg_name)
-%!  name = mfile_pkg_name{i};
-%!  silent_pkg_install ("-local", mfile_pkg_tgz{i});
-%!  unwind_protect
-%!    pkg ("load", name);
-%!    pkg ("unload", name);
-%!  unwind_protect_cleanup
-%!    pkg ("uninstall", name);
-%!  end_unwind_protect
+%!   name = mfile_pkg_name{i};
+%!   silent_pkg_install ("-local", mfile_pkg_tgz{i});
+%!   unwind_protect
+%!     pkg ("load", name);
+%!     pkg ("unload", name);
+%!   unwind_protect_cleanup
+%!     system (["chmod -Rf u+w '" prefix "'"]); ## FIXME: Work around bug #53578
+%!     pkg ("uninstall", name);
+%!   end_unwind_protect
 %! endfor
 %!
 %!error <package foobar is not installed> pkg ("load", "foobar");
 
 # -nodeps
 ## FIXME: Need test
 
 # -verbose
@@ -117,16 +120,17 @@
 #%! oct_forge_pkgs = pkg ("list", "-forge");
 
 ## Action describe
 %!testif HAVE_Z
 %! silent_pkg_install ("-local", mfile_pkg_tgz{1});
 %! [desc, flag] = pkg ("describe", mfile_pkg_name{1});
 %! ## FIXME: this only tests that the describe command runs,
 %! ##        not that the output is in anyway correct.
+%! system (["chmod -Rf u+w '" prefix "'"]);     ## FIXME: Work around bug #53578
 %! pkg ("uninstall", mfile_pkg_name{1});
 
 # -verbose
 ## FIXME: Need test
 
 ## Action prefix
 %!test
 %! pfx_old = pkg ("prefix");
