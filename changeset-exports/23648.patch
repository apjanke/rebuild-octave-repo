# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497907617 25200
#      Mon Jun 19 14:26:57 2017 -0700
# Node ID 864ac8dabeffceac276e1fe195c1985c5db14a1b
# Parent  38b015656c29753e2c17605eac9e3fc04976b2c6
Use lgamma, lgammaf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for lgamma, lgammaf.

* lo-specfun.cc: Delegate to std::lgamma or std::lgammaf.

* randpoisson.cc (xlgamma): Delegate to std::lgamma.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2403,17 +2403,17 @@ gl_INIT
 dnl These checks define/undefine HAVE_FUNCNAME in config.h.
 dnl Code tests HAVE_FUNCNAME and either uses function or provides workaround.
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
 AC_CHECK_FUNCS([ctermid dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
 AC_CHECK_FUNCS([isascii kill])
-AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
+AC_CHECK_FUNCS([lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([realpath resolvepath])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([sqrt sqrtf], [],
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -245,57 +245,29 @@ namespace octave
       else if (octave::math::isnan (x))
         result = octave::numeric_limits<double>::NaN ();
       else
         result = std::tgamma (x);
 
       return result;
     }
 
-    double
-    lgamma (double x)
-    {
-#if defined (HAVE_LGAMMA)
-      return ::lgamma (x);
-#else
-      double result;
-      double sgngam;
-
-      if (octave::math::isnan (x))
-        result = x;
-      else if ((x <= 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
-        result = octave::numeric_limits<double>::Inf ();
-      else
-        F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
-
-      return result;
-#endif
-    }
+    double lgamma (double x) { return std::lgamma (x); }
 
     Complex
     rc_lgamma (double x)
     {
       double result;
 
 #if defined (HAVE_LGAMMA_R)
       int sgngam;
       result = lgamma_r (x, &sgngam);
-#elif defined (HAVE_LGAMMA)
-      result = lgamma (x);
+#else
+      result = std::lgamma (x);
       int sgngam = signgam;
-#else
-      double sgngam = 0.0;
-
-      if (octave::math::isnan (x))
-        result = x;
-      else if ((x <= 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
-        result = octave::numeric_limits<double>::Inf ();
-      else
-        F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
-
 #endif
 
       if (sgngam < 0)
         return result + Complex (0., M_PI);
       else
         return result;
     }
 
@@ -317,57 +289,29 @@ namespace octave
       else if (octave::math::isnan (x))
         result = octave::numeric_limits<float>::NaN ();
       else
         result = std::tgammaf (x);
 
       return result;
     }
 
-    float
-    lgamma (float x)
-    {
-#if defined (HAVE_LGAMMAF)
-      return lgammaf (x);
-#else
-      float result;
-      float sgngam;
-
-      if (octave::math::isnan (x))
-        result = x;
-      else if ((x <= 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
-        result = octave::numeric_limits<float>::Inf ();
-      else
-        F77_XFCN (algams, ALGAMS, (x, result, sgngam));
-
-      return result;
-#endif
-    }
+    float lgamma (float x) { return std::lgammaf (x); }
 
     FloatComplex
     rc_lgamma (float x)
     {
       float result;
 
 #if defined (HAVE_LGAMMAF_R)
       int sgngam;
       result = lgammaf_r (x, &sgngam);
-#elif defined (HAVE_LGAMMAF)
-      result = lgammaf (x);
+#else
+      result = std::lgammaf (x);
       int sgngam = signgam;
-#else
-      float sgngam = 0.0f;
-
-      if (octave::math::isnan (x))
-        result = x;
-      else if ((x <= 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
-        result = octave::numeric_limits<float>::Inf ();
-      else
-        F77_XFCN (algams, ALGAMS, (x, result, sgngam));
-
 #endif
 
       if (sgngam < 0)
         return result + FloatComplex (0., M_PI);
       else
         return result;
     }
 
diff --git a/liboctave/numeric/randpoisson.cc b/liboctave/numeric/randpoisson.cc
--- a/liboctave/numeric/randpoisson.cc
+++ b/liboctave/numeric/randpoisson.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
  * LGAMMA: log gamma function
  * INFINITE: function to test whether a value is infinite
  */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cmath>
 #include <cstddef>
 
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "randmtzig.h"
 #include "randpoisson.h"
@@ -48,30 +49,17 @@ along with Octave; see the file COPYING.
 #define INFINITE lo_ieee_isinf
 #define RUNI oct_randu()
 #define RNOR oct_randn()
 #define LGAMMA xlgamma
 
 static double
 xlgamma (double x)
 {
-  double result;
-#if defined (HAVE_LGAMMA)
-  result = lgamma (x);
-#else
-  double sgngam;
-
-  if (lo_ieee_isnan (x))
-    result = x;
-  else if (x <= 0 || lo_ieee_isinf (x))
-    result = octave_Inf;
-  else
-    F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
-#endif
-  return result;
+  return std::lgamma (x);
 }
 
 /* ---- pprsc.c from Stadloeber's winrand --- */
 
 /* flogfak(k) = ln(k!) */
 static double
 flogfak (double k)
 {
