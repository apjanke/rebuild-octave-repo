# HG changeset patch
# User jwe
# Date 1196722521 0
#      Mon Dec 03 22:55:21 2007 +0000
# Node ID da540e715d056ece1acbfcf6258b323263db0f25
# Parent  3a695b7adf8e39b1f23dfb9739127f0281fe3b6c
[project @ 2007-12-03 22:55:20 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -446,16 +446,26 @@ short_freeze (Array<idx_vector>& ra_idx,
 		("index exceeds N-d array dimensions");
 	    }
 	}
     }
 
   return retval;
 }
 
+int
+permute_vector_compare (const void *a, const void *b)
+{
+  const permute_vector *pva = static_cast<const permute_vector *> (a);
+  const permute_vector *pvb = static_cast<const permute_vector *> (b);
+
+  return pva->pidx > pvb->pidx;
+}
+
+
 void
 gripe_nonconformant (const char *op, int op1_len, int op2_len)
 {
   (*current_liboctave_error_handler)
     ("%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
      op, op1_len, op2_len);
 }
 
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -73,16 +73,25 @@ extern OCTAVE_API Array<octave_idx_type>
 			       const Array<octave_idx_type>& result_idx);
 
 extern OCTAVE_API Array<octave_idx_type> get_ra_idx (octave_idx_type idx, const dim_vector& dims);
 
 extern OCTAVE_API dim_vector short_freeze (Array<idx_vector>& ra_idx,
 				const dim_vector& dimensions,
 				int resize_ok);
 
+struct
+permute_vector
+{
+  octave_idx_type pidx;
+  octave_idx_type iidx;
+};
+
+extern int permute_vector_compare (const void *a, const void *b);
+
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
 				 int op2_nr, int op2_nc);
 
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, dim_vector& op1_dims,
 				 dim_vector& op2_dims);
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -396,31 +396,17 @@ Array<T>::reshape (const dim_vector& new
 	(*current_liboctave_error_handler) ("reshape: size mismatch");
     }
   else
     retval = *this;
 
   return retval;
 }
 
-struct
-permute_vector
-{
-  octave_idx_type pidx;
-  octave_idx_type iidx;
-};
-
-static int
-permute_vector_compare (const void *a, const void *b)
-{
-  const permute_vector *pva = static_cast<const permute_vector *> (a);
-  const permute_vector *pvb = static_cast<const permute_vector *> (b);
-
-  return pva->pidx > pvb->pidx;
-}
+
 
 template <class T>
 Array<T>
 Array<T>::permute (const Array<octave_idx_type>& perm_vec_arg, bool inv) const
 {
   Array<T> retval;
 
   Array<octave_idx_type> perm_vec = perm_vec_arg;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-12-03  Moritz Borgmann  <octave@moriborg.de>
+
+	* Array-util.cc (permute_vector_compare): Move here from Array.cc.
+	* Array-util.h (permute_vector, permute_vector_compare): Provide decls.
+	* Array.cc (permute_vector, permute_vector_compare): Delete.
+
 2007-12-03  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (template <class LT, class RT> int assign
 	(Sparse<LT>&,  const Sparse<RT>&)): Only set return matrix size to
 	rhs values if both no. rows and columns are zero.
 
 2007-11-30  John W. Eaton  <jwe@octave.org>
 
