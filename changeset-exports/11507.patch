# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294916468 18000
#      Thu Jan 13 06:01:08 2011 -0500
# Node ID c3ad80f4ce3620daef87aac8bfa9e7685fe31499
# Parent  964b7fd379f199b0ef63e30ccbb683615d59fc3f
Array.h, Array.cc: more constructor fixes

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -43,17 +43,17 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 #include "oct-locbuf.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
-  : rep (a.rep), dimensions (dv), 
+  : dimensions (dv), rep (a.rep),
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
   if (dimensions.safe_numel () != a.numel ())
     {
       std::string dimensions_str = a.dimensions.str ();
       std::string new_dims_str = dimensions.str ();
 
       (*current_liboctave_error_handler)
@@ -64,17 +64,17 @@ Array<T>::Array (const Array<T>& a, cons
   // This goes here because if an exception is thrown by the above,
   // destructor will be never called.
   rep->count++;
   dimensions.chop_trailing_singletons ();
 }
 
 template <class T>
 Array<T>::Array (const Array<T>& a, octave_idx_type nr, octave_idx_type nc)
-  : rep (a.rep), dimensions (nr, nc), 
+  : dimensions (nr, nc), rep (a.rep),
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
   if (dimensions.safe_numel () != a.numel ())
     {
       std::string dimensions_str = a.dimensions.str ();
       std::string new_dims_str = dimensions.str ();
 
       (*current_liboctave_error_handler)
@@ -312,45 +312,47 @@ Array<T>::linear_slice (octave_idx_type 
 #endif
   if (up < lo) up = lo;
   return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
 class rec_permute_helper
 {
-  octave_idx_type *dim, *stride;
+  // STRIDE occupies the last half of the space allocated for dim to
+  // avoid a double allocation.
+
+  int n;
+  int top;
+  octave_idx_type *dim;
+  octave_idx_type *stride;
   bool use_blk;
-  int top;
 
 public:
   rec_permute_helper (const dim_vector& dv, const Array<octave_idx_type>& perm)
+
+    : n (dv.length ()), top (0), dim (new octave_idx_type [2*n]),
+      stride (dim + n), use_blk (false)
     {
-      int n = dv.length ();
       assert (n == perm.length ());
 
-      dim = new octave_idx_type [2*n];
-      // A hack to avoid double allocation
-      stride = dim + n;
-
       // Get cumulative dimensions.
       OCTAVE_LOCAL_BUFFER (octave_idx_type, cdim, n+1);
       cdim[0] = 1;
       for (int i = 1; i < n+1; i++) cdim[i] = cdim[i-1] * dv(i-1);
 
       // Setup the permuted strides.
       for (int k = 0; k < n; k++)
         {
           int kk = perm(k);
           dim[k] = dv(kk);
           stride[k] = cdim[kk];
         }
 
       // Reduce contiguous runs.
-      top = 0;
       for (int k = 1; k < n; k++)
         {
           if (stride[k] == stride[top]*dim[top])
             dim[top] *= dim[k];
           else
             {
               top++;
               dim[top] = dim[k];
@@ -517,38 +519,40 @@ Array<T>::permute (const Array<octave_id
     {
       rec_permute_helper rh (dv, perm_vec);
       rh.permute (data (), retval.fortran_vec ());
     }
 
   return retval;
 }
 
-// Helper class for multi-d index reduction and recursive indexing/indexed assignment.
-// Rationale: we could avoid recursion using a state machine instead. However, using
-// recursion is much more amenable to possible parallelization in the future.
+// Helper class for multi-d index reduction and recursive
+// indexing/indexed assignment.  Rationale: we could avoid recursion
+// using a state machine instead.  However, using recursion is much
+// more amenable to possible parallelization in the future. 
 // Also, the recursion solution is cleaner and more understandable.
+
 class rec_index_helper
 {
-  octave_idx_type *dim, *cdim;
+  // CDIM occupies the last half of the space allocated for dim to
+  // avoid a double allocation.
+
+  int n;
+  int top;
+  octave_idx_type *dim;
+  octave_idx_type *cdim;
   idx_vector *idx;
-  int top;
 
 public:
   rec_index_helper (const dim_vector& dv, const Array<idx_vector>& ia)
+    : n (ia.length ()), top (0), dim (new octave_idx_type [2*n]),
+      cdim (dim + n), idx (new idx_vector [n])
     {
-      int n = ia.length ();
       assert (n > 0 && (dv.length () == std::max (n, 2)));
 
-      dim = new octave_idx_type [2*n];
-      // A hack to avoid double allocation
-      cdim = dim + n;
-      idx = new idx_vector [n];
-      top = 0;
-
       dim[0] = dv(0);
       cdim[0] = 1;
       idx[0] = ia(0);
 
       for (int i = 1; i < n; i++)
         {
           // Try reduction...
           if (idx[top].maybe_reduce (dim[top], ia(i), dv(i)))
@@ -574,50 +578,50 @@ private:
   // Recursive N-d indexing
   template <class T>
   T *do_index (const T *src, T *dest, int lev) const
     {
       if (lev == 0)
         dest += idx[0].index (src, dim[0], dest);
       else
         {
-          octave_idx_type n = idx[lev].length (dim[lev]), d = cdim[lev];
-          for (octave_idx_type i = 0; i < n; i++)
+          octave_idx_type nn = idx[lev].length (dim[lev]), d = cdim[lev];
+          for (octave_idx_type i = 0; i < nn; i++)
             dest = do_index (src + d*idx[lev].xelem (i), dest, lev-1);
         }
 
       return dest;
     }
   
   // Recursive N-d indexed assignment
   template <class T>
   const T *do_assign (const T *src, T *dest, int lev) const
     {
       if (lev == 0)
         src += idx[0].assign (src, dim[0], dest);
       else
         {
-          octave_idx_type n = idx[lev].length (dim[lev]), d = cdim[lev];
-          for (octave_idx_type i = 0; i < n; i++)
+          octave_idx_type nn = idx[lev].length (dim[lev]), d = cdim[lev];
+          for (octave_idx_type i = 0; i < nn; i++)
             src = do_assign (src, dest + d*idx[lev].xelem (i), lev-1);
         }
 
       return src;
     }
 
   // Recursive N-d indexed assignment
   template <class T>
   void do_fill (const T& val, T *dest, int lev) const
     {
       if (lev == 0)
         idx[0].fill (val, dim[0], dest);
       else
         {
-          octave_idx_type n = idx[lev].length (dim[lev]), d = cdim[lev];
-          for (octave_idx_type i = 0; i < n; i++)
+          octave_idx_type nn = idx[lev].length (dim[lev]), d = cdim[lev];
+          for (octave_idx_type i = 0; i < nn; i++)
             do_fill (val, dest + d*idx[lev].xelem (i), lev-1);
         }
     }
 
 public:
 
   template <class T>
   void index (const T *src, T *dest) const { do_index (src, dest, top); }
@@ -635,21 +639,24 @@ public:
     }
 };
 
 // Helper class for multi-d recursive resizing
 // This handles resize () in an efficient manner, touching memory only
 // once (apart from reinitialization)
 class rec_resize_helper
 {
-  octave_idx_type *cext, *sext, *dext;
+  octave_idx_type *cext;
+  octave_idx_type *sext;
+  octave_idx_type *dext;
   int n;
 
 public:
   rec_resize_helper (const dim_vector& ndv, const dim_vector& odv)
+    : cext (0), sext (0), dext (0), n (0)
     {
       int l = ndv.length ();
       assert (odv.length () == l);
       octave_idx_type ld = 1;
       int i = 0;
       for (; i < l-1 && ndv(i) == odv(i); i++) ld *= ndv(i);
       n = l - i;
       cext = new octave_idx_type[3*n];
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -120,38 +120,36 @@ public:
 
   typedef typename ref_param<T>::type crefT;
 
   typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
                                     typename ref_param<T>::type);
 
 protected:
 
-  typename Array<T>::ArrayRep *rep;
+  dim_vector dimensions;
 
-  dim_vector dimensions;
+  typename Array<T>::ArrayRep *rep;
 
   // Rationale:
   // slice_data is a pointer to rep->data, denoting together with slice_len the
   // actual portion of the data referenced by this Array<T> object. This allows
   // to make shallow copies not only of a whole array, but also of contiguous
   // subranges. Every time rep is directly manipulated, slice_data and slice_len
   // need to be properly updated.
 
   T* slice_data;
   octave_idx_type slice_len;
 
   // slice constructor
   Array (const Array<T>& a, const dim_vector& dv,
          octave_idx_type l, octave_idx_type u)
-    : rep(a.rep), dimensions (dv)
+    : dimensions (dv), rep(a.rep), slice_data (a.slice_data+l), slice_len (u-l)
     {
       rep->count++;
-      slice_data = a.slice_data + l;
-      slice_len = u - l;
       dimensions.chop_trailing_singletons ();
     }
 
 private:
 
   typename Array<T>::ArrayRep *nil_rep (void) const
     {
       static typename Array<T>::ArrayRep *nr
@@ -160,93 +158,82 @@ private:
       return nr;
     }
 
 public:
 
   // Empty ctor (0x0).
 
   Array (void)
-    : rep (nil_rep ()), dimensions () 
+    : dimensions (), rep (nil_rep ()), slice_data (rep->data),
+      slice_len (rep->len)
     { 
       rep->count++; 
-      slice_data = rep->data;
-      slice_len = rep->len;
     }
 
   // Obsolete 1D ctor (there are no 1D arrays).
   explicit Array (octave_idx_type n) GCC_ATTR_DEPRECATED
-    : rep (new typename Array<T>::ArrayRep (n)), dimensions (n, 1) 
-    { 
-      slice_data = rep->data;
-      slice_len = rep->len;
-    }
+    : dimensions (n, 1), rep (new typename Array<T>::ArrayRep (n)),
+      slice_data (rep->data), slice_len (rep->len)
+    { }
 
   // 2D uninitialized ctor.
   explicit Array (octave_idx_type m, octave_idx_type n)
-    : rep (), dimensions (m, n) 
-    { 
-      rep = new typename Array<T>::ArrayRep (dimensions.safe_numel ());
-      slice_data = rep->data;
-      slice_len = rep->len;
-    }
+    : dimensions (m, n),
+      rep (new typename Array<T>::ArrayRep (dimensions.safe_numel ())), 
+      slice_data (rep->data), slice_len (rep->len)
+    { }
 
   // 2D initialized ctor.
   explicit Array (octave_idx_type m, octave_idx_type n, const T& val)
-    : rep (), dimensions (m, n) 
+    : dimensions (m, n),
+      rep (new typename Array<T>::ArrayRep (dimensions.safe_numel ())),
+      slice_data (rep->data), slice_len (rep->len)
     { 
-      rep = new typename Array<T>::ArrayRep (dimensions.safe_numel ());
-      slice_data = rep->data;
-      slice_len = rep->len;
       fill (val);
     }
 
   // nD uninitialized ctor.
   explicit Array (const dim_vector& dv)
-    : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
-      dimensions (dv) 
+    : dimensions (dv),
+      rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
+      slice_data (rep->data), slice_len (rep->len)
     { 
-      slice_data = rep->data;
-      slice_len = rep->len;
       dimensions.chop_trailing_singletons ();
     }
 
   // nD initialized ctor.
   explicit Array (const dim_vector& dv, const T& val)
-    : rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
-      dimensions (dv)
+    : dimensions (dv),
+      rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
+      slice_data (rep->data), slice_len (rep->len)
     {
-      slice_data = rep->data;
-      slice_len = rep->len;
       fill (val);
       dimensions.chop_trailing_singletons ();
     }
 
   // Reshape constructor.
   Array (const Array<T>& a, const dim_vector& dv);
 
   Array (const Array<T>& a, octave_idx_type nr, octave_idx_type nc);
 
   // Type conversion case.
   template <class U>
   Array (const Array<U>& a)
-    : rep (new typename Array<T>::ArrayRep (a.data (), a.length ())),
-      dimensions (a.dims ())
-    {
-      slice_data = rep->data;
-      slice_len = rep->len;
-    }
+    : dimensions (a.dims ()),
+      rep (new typename Array<T>::ArrayRep (a.data (), a.length ())),
+      slice_data (rep->data), slice_len (rep->len)
+    { }
 
   // No type conversion case.
   Array (const Array<T>& a)
-    : rep (a.rep), dimensions (a.dimensions)
+    : dimensions (a.dimensions), rep (a.rep), slice_data (a.slice_data),
+      slice_len (a.slice_len)
     {
       rep->count++;
-      slice_data = a.slice_data;
-      slice_len = a.slice_len;
     }
 
 public:
 
   ~Array (void)
     {
       if (--rep->count <= 0)
         delete rep;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (rec_permute_helper::rec_permute_helper,
+	rec_index_helper::rec_index_helper,
+	rec_resize_helper::rec_resize_helper): Initialize all data
+	members in initialization lists.
+
+	* Array.h, Array.cc (Array::Array): Initialize slice_data and
+	slice_len in memeber initialization lists.
+	(Array::~Array): Now virtual.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* oct-locbuf.h (octave_chunk_buffer::~octave_chunk_buffer):
 	Now virtual.
 	(class octave_local_buffer, class octave_chunk_buffer):
 	Don't allow copying or assignment.
 
 	* file-stat.h (base_file_stat::~base_file_stat):
