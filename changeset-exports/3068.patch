# HG changeset patch
# User jwe
# Date 868328301 0
#      Tue Jul 08 02:18:21 1997 +0000
# Node ID 17e2f90e0d3b3030077e7c81c20b560a72394125
# Parent  aa76250a5b875baa0643d68204aac79bab547470
[project @ 1997-07-08 02:17:36 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Mon Jul  7 21:14:41 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dbleQR.cc (QR::init): Don't forget to initialize Q when type is raw.
+	* CmplxQR.cc (ComplexQR::init): Ditto.
+
 Sun Jun 15 21:06:37 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (acos (const Complex&)): Select branch that is
 	compatible with Matlab.
 
 Tue Jun 10 10:58:05 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h: Correctly handle empty matrices indexed by a
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -93,16 +93,18 @@ ComplexQR::init (const ComplexMatrix& a,
       if (qr_type == QR::raw)
 	{
 	  for (int j = 0; j < min_mn; j++)
 	    {
 	      int limit = j < min_mn - 1 ? j : min_mn - 1;
 	      for (int i = limit + 1; i < m; i++)
 		A_fact.elem (i, j) *= tau.elem (j);
 	    }
+
+	  q = A_fact;
 	}
       else
 	{
 	  volatile int n2;
 
 	  if (qr_type == QR::economy && m > n)
 	    {
 	      n2 = n;
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -91,16 +91,18 @@ QR::init (const Matrix& a, QR::type qr_t
       if (qr_type == QR::raw)
 	{
 	  for (int j = 0; j < min_mn; j++)
 	    {
 	      int limit = j < min_mn - 1 ? j : min_mn - 1;
 	      for (int i = limit + 1; i < m; i++)
 		A_fact.elem (i, j) *= tau.elem (j);
 	    }
+
+	  q = A_fact;
 	}
       else
 	{
 	  volatile int n2;
 
 	  if (qr_type == QR::economy && m > n)
 	    {
 	      n2 = n;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+Mon Jul  7 21:14:07 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/qr.cc (Fqr): Correctly handle nargout == 0. 
+
 Wed Jul  2 16:47:09 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* matherr.c: New file.  Move matherr function here.
 	* sysdep.cc: From here.
 	* Makefile.in (DIST_SRC): Add matherr.c to the list.
 
 	* error.cc (handle_message): Avoid bug in g++ snapshot.
 
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -67,58 +67,86 @@ that R = triu (qr (X))")
 
   int arg_is_empty = empty_arg ("qr", arg.rows (), arg.columns ());
 
   if (arg_is_empty < 0)
     return retval;
   else if (arg_is_empty > 0)
     return octave_value_list (3, Matrix ());
 
-  QR::type type = nargout == 1 ? QR::raw
+  QR::type type = (nargout == 0 || nargout == 1) ? QR::raw
     : (nargin == 2 ? QR::economy : QR::std);
 
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
-	  if (nargout < 3)
+	  switch (nargout)
 	    {
-	      QR fact (m, type);
-	      retval(1) = fact.R ();
-	      retval(0) = fact.Q ();
-	    }
-	  else
-	    {
-	      QRP fact (m, type);
-	      retval(2) = fact.P ();
-	      retval(1) = fact.R ();
-	      retval(0) = fact.Q ();
+	    case 0:
+	    case 1:
+	      {
+		QR fact (m, type);
+		retval(0) = fact.Q ();
+	      }
+	      break;
+
+	    case 2:
+	      {
+		QR fact (m, type);
+		retval(1) = fact.R ();
+		retval(0) = fact.Q ();
+	      }
+	      break;
+
+	    default:
+	      {
+		QRP fact (m, type);
+		retval(2) = fact.P ();
+		retval(1) = fact.R ();
+		retval(0) = fact.Q ();
+	      }
+	      break;
 	    }
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
-	  if (nargout < 3)
+	  switch (nargout)
 	    {
-	      ComplexQR fact (m, type);
-	      retval(1) = fact.R ();
-	      retval(0) = fact.Q ();
-	    }
-	  else
-	    {
-	      ComplexQRP fact (m, type);
-	      retval(2) = fact.P ();
-	      retval(1) = fact.R ();
-	      retval(0) = fact.Q ();
+	    case 0:
+	    case 1:
+	      {
+		ComplexQR fact (m, type);
+		retval(0) = fact.Q ();
+	      }
+	      break;
+
+	    case 2:
+	      {
+		ComplexQR fact (m, type);
+		retval(1) = fact.R ();
+		retval(0) = fact.Q ();
+	      }
+	      break;
+
+	    default:
+	      {
+		ComplexQRP fact (m, type);
+		retval(2) = fact.P ();
+		retval(1) = fact.R ();
+		retval(0) = fact.Q ();
+	      }
+	      break;
 	    }
 	}
     }
   else
     {
       gripe_wrong_type_arg ("qr", arg);
     }
 
diff --git a/src/matherr.c b/src/matherr.c
--- a/src/matherr.c
+++ b/src/matherr.c
@@ -19,19 +19,20 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "oct-math.h"
+#if defined (EXCEPTION_IN_MATH)
 
-#if defined (EXCEPTION_IN_MATH)
+#include <math.h>
+
 int
 matherr (struct exception *x)
 {
   /* Possibly print our own message someday.  Should probably be
      user-switchable. */
 
   switch (x->type)
     {
@@ -46,15 +47,13 @@ matherr (struct exception *x)
     }
 
   /* But don't print the system message. */
 
   return 1;
 }
 #endif
 
-#endif
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; End: ***
 */
