# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231862352 18000
#      Tue Jan 13 10:59:12 2009 -0500
# Node ID 124dd27bedaea8193fb79e80d47f4cb99ae48ddb
# Parent  0e0bd07e6ae2df29a519e2c26a5561a5f5d4a0be
Array.cc: style fixes

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1911,16 +1911,17 @@ Array<T>::sort (octave_idx_type dim, sor
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return m;
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
+
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
   octave_sort<T> lsort;
   
   if (mode == ASCENDING) 
     lsort.set_compare (ascending_compare);
@@ -1938,23 +1939,25 @@ Array<T>::sort (octave_idx_type dim, sor
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (T, pvi, ns);
 
       for (octave_idx_type j = 0; j < iter; j++) 
 	{
-	   octave_idx_type offset = j;
-	   octave_idx_type offset2 = 0;
+	  octave_idx_type offset = j;
+	  octave_idx_type offset2 = 0;
+
 	  while (offset >= stride)
 	    {
 	      offset -= stride;
 	      offset2++;
 	    }
+
 	  offset += offset2 * stride * ns;
 	  
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    pvi[i] = v[i*stride + offset];
 
 	  lsort.sort (pvi, ns);
 	      
 	  for (octave_idx_type i = 0; i < ns; i++)
@@ -1978,16 +1981,17 @@ Array<T>::sort (Array<octave_idx_type> &
     {
       sidx = Array<octave_idx_type> (dv);
       return m;
     }
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
+
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
   octave_sort<vec_index<T> *> indexed_sort;
 
   if (mode == ASCENDING) 
     indexed_sort.set_compare (ascending_compare);
@@ -2027,21 +2031,23 @@ Array<T>::sort (Array<octave_idx_type> &
 	}
     }
   else
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  octave_idx_type offset = j;
 	  octave_idx_type offset2 = 0;
+
 	  while (offset >= stride)
 	    {
 	      offset -= stride;
 	      offset2++;
 	    }
+
 	  offset += offset2 * stride * ns;
 	      
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    {
 	      vi[i]->vec = v[i*stride + offset];
 	      vi[i]->indx = i;
 	    }
 
