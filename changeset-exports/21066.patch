# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452783761 28800
#      Thu Jan 14 07:02:41 2016 -0800
# Node ID 258c787cd9ce624bab5f67686a739e593278509b
# Parent  e1ee2203efe0da943f6b45a66b83f39a192fde27
maint: Use "FIXME:" consistently in code base.

* file-editor-tab.h, mxarray.in.h, pr-output.cc, symtab.h, ov-bool-sparse.h,
ov-bool.h, ov-float.h, ov-scalar.h, ov-str-mat.cc, oct-parse.in.yy, f77-fcn.h,
lo-specfun.cc, randmtzig.c, randpoisson.c, lo-ieee.h, oct-rl-edit.c,
sparse-util.h: Use "FIXME:" consistently in code base.

diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include <QFileSystemWatcher>
 #include <QSettings>
 #include <QFileInfo>
 #include <Qsci/qsciapis.h>
 #include <QStatusBar>
 #include <QLabel>
 #include <QComboBox>
 
-// FIXME -- we should not be including config.h in header files.
+// FIXME: We should not be including config.h in header files.
 // Only needed for octave_value_list type.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #include "ov.h"
 #endif
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -77,19 +77,19 @@ typedef enum
 mxClassID;
 
 typedef unsigned char mxLogical;
 
 /* typedef Uint16 mxChar; */
 typedef char mxChar;
 
 /*
- * FIXME? Mathworks says these should be size_t on 64-bit system and when
- * mex is used with the -largearraydims flag, but why do that? Its better
- * to conform to the same indexing as the rest of Octave
+ * FIXME: Mathworks says these should be size_t on 64-bit system and when
+ * mex is used with the -largearraydims flag, but why do that?  Its better
+ * to conform to the same indexing as the rest of Octave.
  */
 typedef %OCTAVE_IDX_TYPE% mwSize;
 typedef %OCTAVE_IDX_TYPE% mwIndex;
 typedef %OCTAVE_IDX_TYPE% mwSignedIndex;
 
 #if ! defined (MXARRAY_TYPEDEFS_ONLY)
 
 #include <cstring>
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -2803,17 +2803,17 @@ octave_print_internal (std::ostream& os,
                      boolMatrix> (os, nda, pr_as_read_syntax);
       break;
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const charMatrix& chm,
                        bool pr_as_read_syntax,
-                       int /* extra_indent FIXME */,
+                       int /* FIXME: extra_indent */,
                        bool pr_as_string)
 {
   if (pr_as_string)
     {
       octave_idx_type nstr = chm.rows ();
 
       if (pr_as_read_syntax && nstr > 1)
         os << "[ ";
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -168,17 +168,17 @@ public:
   symbol_record
   {
   public:
 
     // generic variable
     static const unsigned int local = 1;
 
     // varargin, argn, .nargin., .nargout.
-    // (FIXME -- is this really used now?)
+    // (FIXME: is this really used now?)
     static const unsigned int automatic = 2;
 
     // formal parameter
     static const unsigned int formal = 4;
 
     // not listed or cleared (.nargin., .nargout.)
     static const unsigned int hidden = 8;
 
diff --git a/libinterp/octave-value/ov-bool-sparse.h b/libinterp/octave-value/ov-bool-sparse.h
--- a/libinterp/octave-value/ov-bool-sparse.h
+++ b/libinterp/octave-value/ov-bool-sparse.h
@@ -79,17 +79,17 @@ public:
   { return new octave_sparse_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_sparse_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
-  // FIXME Adapt idx_vector to allow sparse logical indexing without overflow!!
+  // FIXME: Adapt idx_vector to allow sparse logical indexing without overflow!
   idx_vector index_vector (bool /* require_integers */ = false) const
   {
     return idx_vector (matrix);
   }
 
   builtin_type_t builtin_type (void) const { return btyp_bool; }
 
   bool is_bool_matrix (void) const { return true; }
diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -177,17 +177,17 @@ public:
   { return ComplexNDArray (dim_vector (1, 1), Complex (scalar)); }
 
   FloatComplexNDArray float_complex_array_value (bool = false) const
   { return FloatComplexNDArray (dim_vector (1, 1), FloatComplex (scalar)); }
 
   SparseMatrix sparse_matrix_value (bool = false) const
   { return SparseMatrix (Matrix (1, 1, scalar)); }
 
-  // FIXME Need SparseComplexMatrix (Matrix) constructor!!!
+  // FIXME: Need SparseComplexMatrix (Matrix) constructor!
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return SparseBoolMatrix (boolMatrix (1, 1, scalar)); }
 
   charNDArray
   char_array_value (bool = false) const
diff --git a/libinterp/octave-value/ov-float.h b/libinterp/octave-value/ov-float.h
--- a/libinterp/octave-value/ov-float.h
+++ b/libinterp/octave-value/ov-float.h
@@ -159,17 +159,17 @@ public:
   { return NDArray (dim_vector (1, 1), scalar); }
 
   FloatNDArray float_array_value (bool = false) const
   { return FloatNDArray (dim_vector (1, 1), scalar); }
 
   SparseMatrix sparse_matrix_value (bool = false) const
   { return SparseMatrix (Matrix (1, 1, scalar)); }
 
-  // FIXME Need SparseComplexMatrix (Matrix) constructor!!!
+  // FIXME: Need SparseComplexMatrix (Matrix) constructor!
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const { return scalar; }
 
   FloatComplex float_complex_value (bool = false) const { return scalar; }
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -158,17 +158,17 @@ public:
   { return NDArray (dim_vector (1, 1), scalar); }
 
   FloatNDArray float_array_value (bool = false) const
   { return FloatNDArray (dim_vector (1, 1), scalar); }
 
   SparseMatrix sparse_matrix_value (bool = false) const
   { return SparseMatrix (Matrix (1, 1, scalar)); }
 
-  // FIXME Need SparseComplexMatrix (Matrix) constructor!!!
+  // FIXME: Need SparseComplexMatrix (Matrix) constructor!
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const { return scalar; }
 
   FloatComplex float_complex_value (bool = false) const { return scalar; }
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -236,17 +236,18 @@ octave_char_matrix_str::string_vector_va
 std::string
 octave_char_matrix_str::string_value (bool) const
 {
   if (matrix.ndims () != 2)
     error ("invalid conversion of charNDArray to string");
 
   charMatrix chm (matrix);
 
-  return chm.row_as_string (0);  // FIXME?
+  // FIXME: Is this correct?
+  return chm.row_as_string (0);
 }
 
 Array<std::string>
 octave_char_matrix_str::cellstr_value (void) const
 {
   Array<std::string> retval;
 
   if (matrix.ndims () != 2)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -80,17 +80,17 @@ along with Octave; see the file COPYING.
 #include "variables.h"
 
 // oct-parse.h must be included after pt-all.h
 #include <oct-parse.h>
 
 extern int octave_lex (YYSTYPE *, void *);
 
 // Global access to currently active lexer.
-// FIXME -- to be removed after more parser+lexer refactoring.
+// FIXME: to be removed after more parser+lexer refactoring.
 octave_base_lexer *LEXER = 0;
 
 #if defined (GNULIB_NAMESPACE)
 // Calls to the following functions appear in the generated output from
 // Bison without the namespace tag.  Redefine them so we will use them
 // via the gnulib namespace.
 #define fclose GNULIB_NAMESPACE::fclose
 #define fprintf GNULIB_NAMESPACE::fprintf
@@ -2382,17 +2382,17 @@ octave_base_parser::make_constant (int o
               tmp = octave_null_sq_str::instance;
           }
 
         retval = new tree_constant (tmp, l, c);
 
         if (op == DQ_STRING)
           txt = undo_string_escapes (txt);
 
-        // FIXME -- maybe this should also be handled by
+        // FIXME: maybe this should also be handled by
         // tok_val->text_rep () for character strings?
         retval->stash_original_text (delim + txt + delim);
       }
       break;
 
     default:
       panic_impossible ();
       break;
@@ -2415,17 +2415,17 @@ octave_base_parser::make_fcn_handle (tok
 }
 
 // Make an anonymous function handle.
 
 tree_anon_fcn_handle *
 octave_base_parser::make_anon_fcn_handle (tree_parameter_list *param_list,
                                           tree_statement *stmt)
 {
-  // FIXME -- need to get these from the location of the @ symbol.
+  // FIXME: need to get these from the location of the @ symbol.
   int l = lexer.input_line_number;
   int c = lexer.current_input_column;
 
   tree_parameter_list *ret_list = 0;
 
   symbol_table::scope_id fcn_scope = lexer.symtab_context.curr_scope ();
 
   lexer.symtab_context.pop ();
@@ -3167,17 +3167,17 @@ octave_base_parser::frob_function (const
 
   // If input is coming from a file, issue a warning if the name of
   // the file does not match the name of the function stated in the
   // file.  Matlab doesn't provide a diagnostic (it ignores the stated
   // name).
   if (! autoloading && lexer.reading_fcn_file
       && curr_fcn_depth == 1 && ! parsing_subfunctions)
   {
-    // FIXME -- should lexer.fcn_file_name already be
+    // FIXME: should lexer.fcn_file_name already be
     // preprocessed when we get here?  It seems to only be a
     // problem with relative filenames.
 
     std::string nm = lexer.fcn_file_name;
 
     size_t pos = nm.find_last_of (file_ops::dir_sep_chars ());
 
     if (pos != std::string::npos)
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -166,18 +166,18 @@ not returning a value from a function de
    tagged with a "noreturn" attribute.  */
 #define F77_RETURN(retval) return retval;
 #if defined (HAVE_ATTR_NORETURN)
 #define F77_NORETURN(retval)
 #else
 #define F77_NORETURN(retval) return retval;
 #endif
 
-/* FIXME -- these should work for SV1 or Y-MP systems but will
-   need to be changed for others.  */
+/* FIXME: These should work for SV1 or Y-MP systems but will
+          need to be changed for others.  */
 
 typedef union
 {
   const char *const_ptr;
   char *ptr;
   struct
   {
     unsigned off : 6;
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3927,18 +3927,18 @@ psi (const octave_idx_type n, const T z)
   octave_idx_type ierr = 0;
   fortran_psifn<T> (z, n, &ans, &ierr);
   if (ierr == 0)
     {
       // Remember that psifn and dpsifn return scales values
       // When n is 1: do nothing since ((-1)**(n+1)/gamma(n+1)) == 1
       // When n is 0: change sign since ((-1)**(n+1)/gamma(n+1)) == -1
       if (n > 1)
-        // FIXME xgamma here is a killer for our precision since it grows
-        //       way too fast
+        // FIXME: xgamma here is a killer for our precision since it grows
+        //        way too fast.
         ans = ans / (pow (-1.0, n + 1) / xgamma (double (n+1)));
       else if (n == 0)
         ans = -ans;
     }
   else if (ierr == 2)
     ans = - octave_Inf;
   else // we probably never get here
     ans = octave_NaN;
diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -161,17 +161,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_GETTIMEOFDAY
 #include <sys/time.h>
 #endif
 
 #include "lo-math.h"
 #include "randmtzig.h"
 
-/* FIXME may want to suppress X86 if sizeof(long) > 4 */
+/* FIXME: may want to suppress X86 if sizeof(long) > 4 */
 #if ! defined (USE_X86_32)
 # if defined (i386) || defined (HAVE_X86_32)
 #  define USE_X86_32 1
 # else
 #  define USE_X86_32 0
 # endif
 #endif
 
diff --git a/liboctave/numeric/randpoisson.c b/liboctave/numeric/randpoisson.c
--- a/liboctave/numeric/randpoisson.c
+++ b/liboctave/numeric/randpoisson.c
@@ -530,18 +530,18 @@ oct_randp (double L)
     }
   else if (L <= 1e8)
     {
       /* numerical recipes */
       poisson_rejection (L, &ret, 1);
     }
   else if (INFINITE(L))
     {
-      /* FIXME R uses NaN, but the normal approx. suggests that as
-       * limit should be inf. Which is correct? */
+      /* FIXME: R uses NaN, but the normal approximation suggests that
+       * limit should be Inf.  Which is correct? */
       ret = NAN;
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
       ret = floor (RNOR*sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
@@ -603,18 +603,18 @@ oct_float_randp (float FL)
     }
   else if (L <= 1e8)
     {
       /* numerical recipes */
       poisson_rejection_float (L, &ret, 1);
     }
   else if (INFINITE(L))
     {
-      /* FIXME R uses NaN, but the normal approx. suggests that as
-       * limit should be inf. Which is correct? */
+      /* FIXME: R uses NaN, but the normal approximation suggests that
+       * limit should be Inf. Which is correct? */
       ret = NAN;
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
       ret = floor (RNOR*sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
diff --git a/liboctave/util/lo-ieee.h b/liboctave/util/lo-ieee.h
--- a/liboctave/util/lo-ieee.h
+++ b/liboctave/util/lo-ieee.h
@@ -40,18 +40,18 @@ extern "C" {
 #define octave_Float_Inf (lo_ieee_float_inf_value ())
 
 /* Octave's idea of a missing value.  */
 #define octave_Float_NA (lo_ieee_float_na_value ())
 
 /* Octave's idea of not a number.  */
 #define octave_Float_NaN (lo_ieee_float_nan_value ())
 
-/* FIXME -- this code assumes that a double has twice the
-   number of bits as an int */
+/* FIXME: This code assumes that a double has twice the
+          number of bits as an int */
 
 typedef union
 {
   double value;
   unsigned int word[2];
 } lo_ieee_double;
 
 typedef union
diff --git a/liboctave/util/oct-rl-edit.c b/liboctave/util/oct-rl-edit.c
--- a/liboctave/util/oct-rl-edit.c
+++ b/liboctave/util/oct-rl-edit.c
@@ -84,18 +84,17 @@ octave_rl_erase_empty_line (int val)
 
 /* It would be much simpler if we could just call _rl_clear_screen to
    only clear the screen, but it is not a public function, and on some
    systems, it is not exported from shared library versions of
    readline, so we can't use it.
 
    Instead, temporarily redefine the redisplay function to do nothing.
 
-   FIXME -- It would be safer to do this when protected from
-   interrupts... */
+   FIXME: It would be safer to do this when protected from interrupts... */
 
 static void
 flush_stdout (void)
 {
   fflush (stdout);
 }
 
 void
diff --git a/liboctave/util/sparse-util.h b/liboctave/util/sparse-util.h
--- a/liboctave/util/sparse-util.h
+++ b/liboctave/util/sparse-util.h
@@ -19,20 +19,19 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if ! defined (octave_sparse_util_h)
 #define octave_sparse_util_h 1
 
-// The next two functions don't do anything unless CHOLMOD is
-// available
+// The next two functions don't do anything unless CHOLMOD is available
 
-// FIXME this overload is here due to API change in SuiteSparse (3.1 -> 3.2)
+// FIXME: This overload is here due to API change in SuiteSparse (3.1 -> 3.2)
 extern OCTAVE_API void
 SparseCholError (int status, char *file, int line, char *message);
 
 extern OCTAVE_API void
 SparseCholError (int status, const char *file, int line, const char *message);
 
 extern OCTAVE_API int
 SparseCholPrint (const char *fmt, ...);
