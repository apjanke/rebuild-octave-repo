# HG changeset patch
# User jwe
# Date 1153327932 0
#      Wed Jul 19 16:52:12 2006 +0000
# Node ID 8545ec4d6e65eae07e2a3196cb652c269786f76d
# Parent  fc22530e985b075cfae7a1bfc1502caab41aadcf
[project @ 2006-07-19 16:51:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-07-19  John W. Eaton  <jwe@octave.org>
+
+	* ov-base.cc (octave_base_value::numeric_assign):
+	Avoid memory leak when converting LHS.
+
 2006-07-18  John W. Eaton  <jwe@octave.org>
 
 	* ov.h (octave_value::is_int8_type, octave_value::is_int16_type,
 	octave_value::is_int32_type, octave_value::is_int64_type,
 	octave_value::is_uint8_type, octave_value::is_uint16_type,
 	octave_value::is_uint32_type, octave_value::is_uint64_type):
 	New functions. 
 	* ov-base.h (octave_base_value::is_int8_type,
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -967,35 +967,36 @@ octave_base_value::numeric_assign (const
 		}
 	    }
 	  else
 	    tmp_rhs = rhs;
 
 	  octave_base_value::type_conv_fcn cf_this
 	    = numeric_conversion_function ();
 
-	  octave_base_value *tmp_lhs = this;
+	  count++;
+	  octave_value tmp_lhs = octave_value (this);
 
 	  if (cf_this)
 	    {
 	      octave_base_value *tmp = cf_this (*this);
 
 	      if (tmp)
-		tmp_lhs = tmp;
+		tmp_lhs = octave_value (tmp);
 	      else
 		{
 		  gripe_assign_conversion_failed (type_name (),
 						  rhs.type_name ());
 		  return octave_value ();
 		}
 	    }
 
 	  if (cf_this || cf_rhs)
 	    {
-	      retval = tmp_lhs->subsasgn (type, idx, tmp_rhs);
+	      retval = tmp_lhs.subsasgn (type, idx, tmp_rhs);
 
 	      done = (! error_state);
 	    }
 	  else
 	    gripe_no_conversion (octave_value::assign_op_as_string (octave_value::op_asn_eq),
 				 type_name (), rhs.type_name ());
 	}
     }
