# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234986707 18000
#      Wed Feb 18 14:51:47 2009 -0500
# Node ID d724487d2c4b01e2aebe77c287a5b7825726d2f9
# Parent  401d54a836905dc39c34c28ce8ab164f0ceea02e
hex2num.cc: use union to avoid cast and GCC warning

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/hex2num.cc (Fhex2num, Fnum2hex):
+	Use union to avoid reinterpret_cast and GCC warning.
+
 	* mex.cc (call_mex): Declare local nargout variable volatile to
 	avoid "maybe clobbered by vfork" warning from GCC.
 
 	* ov-cx-mat.cc (xabs): Comment out unused static function.
 	* ov-flt-cx-mat.cc (xabs): Ditto.
 
 	* c-file-ptr-stream.cc (c_file_ptr_buf::seekoff,
 	c_file_ptr_buf::seepos, c_zfile_ptr_buf::seekoff,
diff --git a/src/DLD-FUNCTIONS/hex2num.cc b/src/DLD-FUNCTIONS/hex2num.cc
--- a/src/DLD-FUNCTIONS/hex2num.cc
+++ b/src/DLD-FUNCTIONS/hex2num.cc
@@ -63,65 +63,65 @@ hex2num ([\"4005bf0a8b145769\";\"4024000
       else if (! error_state)
 	{
 	  octave_idx_type nr = cmat.rows ();
 	  octave_idx_type nc = cmat.columns ();
 	  ColumnVector m (nr);
 
 	  for (octave_idx_type i = 0; i < nr; i++)
 	    {
-	      uint64_t num = 0;
+	      union
+	      {
+		uint64_t ival;
+		double dval;
+	      } num;
+
 	      for (octave_idx_type j = 0; j < nc; j++)
 		{
 		  unsigned char ch = cmat.elem (i, j);
 
 		  if (isxdigit (ch))
 		    {
-		      num <<= 4;
+		      num.ival <<= 4;
 		      if (ch >= 'a')
-			num += static_cast<uint64_t> (ch - 'a' + 10);
+			num.ival += static_cast<uint64_t> (ch - 'a' + 10);
 		      else if (ch >= 'A')
-			num += static_cast<uint64_t> (ch - 'A' + 10);
+			num.ival += static_cast<uint64_t> (ch - 'A' + 10);
 		      else
-			num += static_cast<uint64_t> (ch - '0');
+			num.ival += static_cast<uint64_t> (ch - '0');
 		    }
 		  else
 		    {
-		      error ("hex2num: invalid character found in string");
+		      error ("hex2num: illegal character found in string");
 		      break;
 		    }
 		}
 
 	      if (error_state)
 		break;
 	      else
 		{
 		  if (nc < 16)
-		    num <<= (16 - nc) * 4;
+		    num.ival <<= (16 - nc) * 4;
 
-		  m (i) = *reinterpret_cast<double *>(&num);
-
+		  m(i) = num.dval;
 		}
 	    }
 
 	  if (! error_state)
 	    retval =  m;
 	}
     }
 
   return retval;
 }
 
 /*
-
 %!assert (hex2num(['c00';'bff';'000';'3ff';'400']),[-2:2]')
-
- */
-
-
+*/
 
 DEFUN_DLD (num2hex, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} num2hex (@var{n})\n\
 Typecast a double precision number or vector to a 16 character hexadecimal\n\
 string of the IEEE 754 representation of the number. For example\n\
 \n\
 @example\n\
@@ -148,21 +148,28 @@ num2hex ([-1, 1, e, Inf, NaN, NA]);\n\
       if (! error_state)
 	{
 	  octave_idx_type nr = v.length ();
 	  charMatrix m (nr, 16);
 	  const double *pv = v.fortran_vec ();
 
 	  for (octave_idx_type i = 0; i < nr; i++)
 	    {
-	      const uint64_t num = *reinterpret_cast<const uint64_t *> (pv++);
+	      union
+	      {
+		uint64_t ival;
+		double dval;
+	      } num;
+
+	      num.dval = *pv++;
+
 	      for (octave_idx_type j = 0; j < 16; j++)
 		{
 		  unsigned char ch = 
-		    static_cast<char> (num >> ((15 - j) * 4) & 0xF);
+		    static_cast<char> (num.ival >> ((15 - j) * 4) & 0xF);
 		  if (ch >= 10)
 		    ch += 'a' - 10;
 		  else
 		    ch += '0';
 
 		  m.elem (i, j) = ch;
 		}
 	    }
@@ -170,14 +177,10 @@ num2hex ([-1, 1, e, Inf, NaN, NA]);\n\
 	  retval = octave_value (m, true);
 	}
     }
 
   return retval;
 }
 
 /*
-
 %!assert (num2hex (-2:2),['c000000000000000';'bff0000000000000';'0000000000000000';'3ff0000000000000';'4000000000000000'])
-
- */
-
-
+*/
