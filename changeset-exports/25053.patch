# HG changeset patch
# User Rik <rik@octave.org>
# Date 1522360791 25200
#      Thu Mar 29 14:59:51 2018 -0700
# Branch stable
# Node ID ef8c6852a53dfbaacf2319993bc589ad863f678a
# Parent  576ff914979c266f6bfbbd976374a83ed0ade3b8
ilu.m: Update BIST tests.

* ilu.m: Change %!xtest to %!error because it has beet determined that Octave
is correctly issuing an error rather than proceeding to create a singular
matrix L as Matlab does.  Change %!test which use fail() internally to directly
use %!error syntax.

diff --git a/scripts/sparse/ilu.m b/scripts/sparse/ilu.m
--- a/scripts/sparse/ilu.m
+++ b/scripts/sparse/ilu.m
@@ -257,19 +257,21 @@ function [L, U, P] = ilu (A, opts = stru
 
 endfunction
 
 
 %!shared n, dtol, A
 %! n = 1600;
 %! dtol = 0.1;
 %! A = gallery ("neumann", n) + speye (n);
+
 %!test
 %! opts.type = "nofill";
 %! assert (nnz (ilu (A, opts)), 7840);
+
 ## This test has been verified in both Matlab and Octave.
 %!test
 %! opts.type = "crout";
 %! opts.milu = "row";
 %! opts.droptol = dtol;
 %! [L, U] = ilu (A, opts);
 %! e = ones (size (A, 2),1);
 %! assert (norm (A*e - L*U*e), 1e-14, 1e-14);
@@ -308,61 +310,61 @@ endfunction
 %! opts.type = "ilutp";
 %! opts.thresh = 0;
 %! [L2, U2] = ilu (A, opts);
 %! assert (norm (L1 - L2, "fro") / norm (L1, "fro"), 0, eps);
 %! assert (norm (U1 - U2, "fro") / norm (U1, "fro"), 0, eps);
 
 ## Tests for real matrices of different sizes for ilu0, iluc and ilutp.
 ## The difference A - L*U should be not greater than eps because with droptol
-## equaling 0, the LU complete factorization is performed.
+## equal to 0, the LU complete factorization is performed.
 %!shared n_tiny, n_small, n_medium, n_large, A_tiny, A_small, A_medium, A_large
 %! n_tiny = 5;
 %! n_small = 40;
 %! n_medium = 600;
 %! n_large = 10000;
 %! A_tiny = spconvert ([1 4 2 3 3 4 2 5; 1 1 2 3 4 4 5 5; 1 2 3 4 5 6 7 8]');
 %! A_small = sprand (n_small, n_small, 1/n_small) + speye (n_small);
 %! A_medium = sprand (n_medium, n_medium, 1/n_medium) + speye (n_medium);
 %! A_large = sprand (n_large, n_large, 1/n_large/10) + speye (n_large);
-%!
+
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_tiny);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), 0, n_tiny * eps);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_small);
 %! assert (norm (A_small - L*U, "fro") / norm (A_small, "fro"), 0, 1);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_medium);
 %! assert (norm (A_medium - L*U, "fro") / norm (A_medium, "fro"), 0, 1);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_large);
 %! assert (norm (A_large - L*U, "fro") / norm (A_large, "fro"), 0, 1);
-%!
+
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_tiny, opts);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_small, opts);
 %! assert (norm (A_small - L*U, "fro") / norm (A_small, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_medium, opts);
 %! assert (norm (A_medium - L*U, "fro") / norm (A_medium, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_large, opts);
 %! assert (norm (A_large - L*U, "fro") / norm (A_large, "fro"), eps, eps);
-%!
+
 %!test
 %! opts.type = "ilutp";
 %! opts.droptol = 0;
 %! opts.thresh = 0;
 %! [L, U] = ilu (A_tiny, opts);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), eps, eps);
 %!test
 %! opts.type = "ilutp";
@@ -392,51 +394,51 @@ endfunction
 %! A_tiny = spconvert ([1 4 2 3 3 4 2 5; 1 1 2 3 4 4 5 5; 1 2 3 4 5 6 7 8]');
 %! A_tiny(1,1) += 1i;
 %! A_small = sprand (n_small, n_small, 1/n_small) + ...
 %!   i * sprand (n_small, n_small, 1/n_small) + speye (n_small);
 %! A_medium = sprand (n_medium, n_medium, 1/n_medium) + ...
 %!   i * sprand (n_medium, n_medium, 1/n_medium) + speye (n_medium);
 %! A_large = sprand (n_large, n_large, 1/n_large/10) + ...
 %!   i * sprand (n_large, n_large, 1/n_large/10) + speye (n_large);
-%!
+
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_tiny);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), 0, n_tiny * eps);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_small);
 %! assert (norm (A_small - L*U, "fro") / norm (A_small, "fro"), 0, 1);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_medium);
 %! assert (norm (A_medium - L*U, "fro") / norm (A_medium, "fro"), 0, 1);
 %!test
 %! opts.type = "nofill";
 %! [L, U] = ilu (A_large);
 %! assert (norm (A_large - L*U, "fro") / norm (A_large, "fro"), 0, 1);
-%!
+
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_tiny, opts);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_small, opts);
 %! assert (norm (A_small - L*U, "fro") / norm (A_small, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_medium, opts);
 %! assert (norm (A_medium - L*U, "fro") / norm (A_medium, "fro"), eps, eps);
 %!test
 %! opts.type = "crout";
 %! [L, U] = ilu (A_large, opts);
 %! assert (norm (A_large - L*U, "fro") / norm (A_large, "fro"), eps, eps);
-%!
+
 %!test
 %! opts.type = "ilutp";
 %! opts.droptol = 0;
 %! opts.thresh = 0;
 %! [L, U] = ilu (A_tiny, opts);
 %! assert (norm (A_tiny - L*U, "fro") / norm (A_tiny, "fro"), eps, eps);
 %!test
 %! opts.type = "ilutp";
@@ -453,94 +455,114 @@ endfunction
 %!test
 %! opts.type = "ilutp";
 %! opts.droptol = 0;
 %! opts.thresh = 0;
 %! [L, U] = ilu (A_large, opts);
 %! assert (norm (A_large - L*U, "fro") / norm (A_large, "fro"), eps, eps);
 
 ## Specific tests for ilutp
-
 %!shared A
 %! A = sparse ([0 0 4 3 1; 5 1 2.3 2 4.5; 0 0 0 2 1;0 0 8 0 2.2; 0 0 9 9 1 ]);
-%!
+
 %!test
 %! opts.udiag = 1;
 %! opts.type = "ilutp";
 %! opts.droptol = 0.2;
 %! [L, U, P] = ilu (A, opts);
 %! assert (norm (U, "fro"), 17.4577, 1e-4);
 %! assert (norm (L, "fro"), 2.4192, 1e-4);
-%!
-%!test
+
+%!error <encountered a pivot equal to 0>
 %! opts.type = "ilutp";
 %! opts.udiag = 0;
 %! opts.droptol = 0.2;
-%! fail ("ilu (A, opts)", "ilu: encountered a pivot equal to 0");
+%! ilu (A, opts);
 
-%!xtest
+## Matlab R2017b doesn't error, but returns a singular L which isn't helpful.
+%!error <encountered a pivot equal to 0>
 %! A = sparse ([3 1 0 0 4; 3 1 0 0 -2;0 0 8 0 0; 0 4 0 4 -4.5; 0 -1 0 0 1]);
 %! opts.type = "ilutp";
 %! opts.droptol = 0;
 %! opts.thresh = 0;
 %! opts.milu = "row";
-%! [L, U, P] = ilu (A, opts);  % Matlab R2016b passes, no pivoting necessary
+%! [L, U, P] = ilu (A, opts);
+
+%!test <*53440>
+%! A = sparse (magic (4));
+%! opts.type = "ilutp";
+%! [L, U] = ilu (A, opts);
+%! assert (L * U, A, eps)
 
 ## Tests for input validation
-%!shared A_tiny
+%!shared A_tiny, opts
 %! A_tiny = spconvert ([1 4 2 3 3 4 2 5; 1 1 2 3 4 4 5 5; 1 2 3 4 5 6 7 8]');
 
 %!test
 %! [L, U] = ilu (sparse ([]));
 %! assert (isempty (L));
 %! assert (isempty (U));
 %! opts.type = "crout";
 %! [L, U] = ilu (sparse ([]), opts);
 %! assert (isempty (L));
 %! assert (isempty (U));
 %! opts.type = "ilutp";
 %! [L, U] = ilu (sparse ([]), opts);
 %! assert (isempty (L));
 %! assert (isempty (U));
+
 %!error <A must be a sparse square matrix> ilu (0)
 %!error <A must be a sparse square matrix> ilu ([])
 %!error <zero on the diagonal> ilu (sparse (0))
 
-%!test
+%!error <invalid TYPE specified>
 %! opts.type = "foo";
-%! fail ("ilu (A_tiny, opts)", "invalid TYPE specified");
+%! ilu (A_tiny, opts);
+%!error <invalid TYPE specified>
 %! opts.type = 1;
-%! fail ("ilu (A_tiny, opts)", "invalid TYPE specified");
+%! ilu (A_tiny, opts);
+%!error <invalid TYPE specified>
 %! opts.type = [];
-%! fail ("ilu (A_tiny, opts)", "invalid TYPE specified");
-%!test
+%! ilu (A_tiny, opts);
+
+%!error <DROPTOL must be a non-negative real scalar>
+%! clear opts;
 %! opts.droptol = -1;
-%! fail ("ilu (A_tiny, opts)", "DROPTOL must be a non-negative real scalar");
+%! ilu (A_tiny, opts);
+%!error <DROPTOL must be a non-negative real scalar>
 %! opts.droptol = 0.5i;
-%! fail ("ilu (A_tiny, opts)", "DROPTOL must be a non-negative real scalar");
+%! ilu (A_tiny, opts);
+%!error <DROPTOL must be a non-negative real scalar>
 %! opts.droptol = [];
-%! fail ("ilu (A_tiny, opts)", "DROPTOL must be a non-negative real scalar");
-%!test
+%! ilu (A_tiny, opts);
+
+%!error <MILU must be one of "off", "col", or "row">
+%! clear opts;
 %! opts.milu = "foo";
-%! fail ("ilu (A_tiny, opts)", 'MILU must be one of "off"');
+%! ilu (A_tiny, opts);
+%!error <MILU must be one of "off", "col", or "row">
 %! opts.milu = 1;
-%! fail ("ilu (A_tiny, opts)", 'MILU must be one of "off"');
+%! ilu (A_tiny, opts);
+%!error <MILU must be one of "off", "col", or "row">
 %! opts.milu = [];
-%! fail ("ilu (A_tiny, opts)", 'MILU must be one of "off"');
-%!test
+%! ilu (A_tiny, opts);
+
+%!error <UDIAG must be 0 or 1>
+%! clear opts;
 %! opts.udiag = -1;
-%! fail ("ilu (A_tiny, opts)", "UDIAG must be 0 or 1");
+%! ilu (A_tiny, opts);
+%!error <UDIAG must be 0 or 1>
 %! opts.udiag = 0.5i;
-%! fail ("ilu (A_tiny, opts)", "UDIAG must be 0 or 1");
+%! ilu (A_tiny, opts);
+%!error <UDIAG must be 0 or 1>
 %! opts.udiag = [];
-%! fail ("ilu (A_tiny, opts)", "UDIAG must be 0 or 1");
-%!test
+%! ilu (A_tiny, opts);
+
+%!error <THRESH must be a scalar in the range \[0, 1\]>
+%! clear opts;
 %! opts.thresh = -1;
-%! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
+%! ilu (A_tiny, opts);
+%!error <THRESH must be a scalar in the range \[0, 1\]>
 %! opts.thresh = 0.5i;
-%! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
+%! ilu (A_tiny, opts);
+%!error <THRESH must be a scalar in the range \[0, 1\]>
 %! opts.thresh = [];
-%! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
-%!test <*53440>
-%! A = sparse (magic (4));
-%! opts.type = "ilutp";
-%! [L, U] = ilu (A, opts);
-%! assert (L * U, A, eps)
+%! ilu (A_tiny, opts);
