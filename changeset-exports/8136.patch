# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1222192154 14400
#      Tue Sep 23 13:49:14 2008 -0400
# Node ID 2b2ca62f8ab6616307125175b81a18e25bc9dce0
# Parent  170ff7258b31f28c791e105a36aaab3775d5948f
dispatch to user-defined end function for classes if one is defined

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-09-23  John W. Eaton  <jwe@octave.org>
+
+	* pt-arg-list.cc (F__end__): Dispatch to user-defined end
+	function for classes if one is defined.
+	* lex.l (is_keyword_token): Allow "end" as a functon name.
+
 2008-09-23  David Bateman  <dbateman@free.fr>
 
 	* variables.cc (static octave_value do_who (int, const string_vector&,
 	bool, bool, std::string): Add final message argument and simple
 	treatment of the "-file" option.
 
 2008-09-22  David Bateman  <dbateman@free.fr>
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1052,17 +1052,20 @@ is_keyword_token (const std::string& s)
 	case otherwise_kw:
 	case return_kw:
 	case static_kw:
 	case until_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
-	  if (lexer_flags.looking_at_object_index)
+	  if (lexer_flags.looking_at_object_index
+	      || (lexer_flags.defining_func
+		  && ! (lexer_flags.looking_at_return_list
+			|| lexer_flags.parsed_function_name)))
 	    return 0;
 	  else
 	    {
 	      if (reading_fcn_file && end_tokens_expected == 1)
 		return -1;
 	      else
 		{
 		  yylval.tok_val = new token (token::simple_end, l, c);
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "oct-lvalue.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-usr-fcn.h"
+#include "parse.h"
 #include "pt-arg-list.h"
 #include "pt-exp.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 
 // Argument lists.
@@ -98,16 +99,32 @@ static int num_indices = 0;
 
 DEFCONSTFUN (__end__, , ,
   "internal function")
 {
   octave_value retval;
 
   if (indexed_object)
     {
+      if (indexed_object->is_object ())
+	{
+	  octave_value_list args;
+
+	  args(2) = num_indices;
+	  args(1) = index_position;
+	  args(0) = *indexed_object;
+
+	  std::string class_name = indexed_object->class_name ();
+
+	  octave_value meth = symbol_table::find_method ("end", class_name);
+
+	  if (meth.is_defined ())
+	    return feval (meth.function_value (), args, 1);
+	}
+
       dim_vector dv = indexed_object->dims ();
       int ndims = dv.length ();
 
       if (num_indices < ndims)
 	{
 	  for (int i = num_indices; i < ndims; i++)
 	    dv(num_indices-1) *= dv(i);
 
