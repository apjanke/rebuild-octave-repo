# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1364359444 14400
#      Wed Mar 27 00:44:04 2013 -0400
# Node ID f482302d81c9800eccc1f4bd581126b5dcae4d2c
# Parent  8b0a04cbdc9d0f372e2f440c153a65928cb8f312
editor goto line menu item (bug #38590)

* file-editor-tab.h,file_editor_tab.cc (file_editor_tab::goto_line):
New function.
* file-editor.h, file-editor.cc (file-editor::request_goto_line):
New function.
(file_editor::request_goto_line): New function.
(file_editor::construct): New goto_line_action QAction.  Include it in
edit menu.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include <Qsci/qscilexerbatch.h>
 #include <Qsci/qscilexerdiff.h>
 #include "resource-manager.h"
 #include <QApplication>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QTextStream>
 #include <QVBoxLayout>
+#include <QInputDialog>
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-link.h"
 
 #include "debug.h"
 #include "oct-env.h"
 
@@ -623,16 +624,35 @@ file_editor_tab::find (const QWidget* ID
     }
 
   _find_dialog->activateWindow ();
   _find_dialog->init_search_text ();
 
 }
 
 void
+file_editor_tab::goto_line (const QWidget* ID)
+{
+  if (ID != this)
+    return;
+
+  int line, index;
+
+  _edit_area->getCursorPosition(&line, &index);
+
+  bool ok = false;
+
+  line = QInputDialog::getInt (_edit_area, "Goto line", "Line number", 
+                               line+1, 1, _edit_area->lines(), 1, &ok);
+  if (ok)
+    _edit_area->setCursorPosition (line-1, 0);
+}
+
+
+void
 file_editor_tab::do_comment_selected_text (bool comment)
 {
   if ( _edit_area->hasSelectedText() )
     {
       int lineFrom, lineTo, colFrom, colTo, i;
       _edit_area->getSelection (&lineFrom,&colFrom,&lineTo,&colTo);
       if ( colTo == 0 )  // the beginning of last line is not selected
         lineTo--;        // stop at line above
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -70,16 +70,17 @@ public slots:
   void toggle_breakpoint (const QWidget* ID);
   void next_breakpoint (const QWidget* ID);
   void previous_breakpoint (const QWidget* ID);
   void remove_all_breakpoints (const QWidget* ID);
 
   void comment_selected_text (const QWidget* ID);
   void uncomment_selected_text (const QWidget* ID);
   void find (const QWidget* ID);
+  void goto_line (const QWidget* ID);
 
   void set_debugger_position (int line);
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file ();
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -392,16 +392,23 @@ file_editor::request_uncomment_selected_
 
 void
 file_editor::request_find ()
 {
   emit fetab_find (_tab_widget->currentWidget ());
 }
 
 void
+file_editor::request_goto_line ()
+{
+  emit fetab_goto_line (_tab_widget->currentWidget ());
+}
+
+
+void
 file_editor::handle_mru_add_file (const QString& file_name)
 {
   _mru_files.removeAll (file_name);
   _mru_files.prepend (file_name);
   mru_menu_update ();
 }
 
 void
@@ -582,16 +589,18 @@ file_editor::construct ()
   QAction *uncomment_selection_action = new QAction (tr ("&Uncomment Selected Text"),_tool_bar);
 
   QAction *find_action = new QAction (QIcon(":/actions/icons/find.png"),
                                       tr ("&Find and Replace"), _tool_bar);
 
   _run_action = new QAction (QIcon(":/actions/icons/artsbuilderexecute.png"),
                              tr("Save File And Run"), _tool_bar);
 
+  QAction *goto_line_action  = new QAction (tr ("Go&to Line"), _tool_bar);
+
   // the mru-list and an empty array of actions
   QSettings *settings = resource_manager::get_settings ();
   // FIXME -- what should happen if settings is 0?
   _mru_files = settings->value ("editor/mru_file_list").toStringList ();
   for (int i = 0; i < MaxMRUFiles; ++i)
     {
        _mru_file_actions[i] = new QAction (this);
        _mru_file_actions[i]->setVisible (false);
@@ -666,16 +675,18 @@ file_editor::construct ()
   editMenu->addSeparator ();
   editMenu->addAction (comment_selection_action);
   editMenu->addAction (uncomment_selection_action);
   editMenu->addSeparator ();
   editMenu->addAction (toggle_bookmark_action);
   editMenu->addAction (next_bookmark_action);
   editMenu->addAction (previous_bookmark_action);
   editMenu->addAction (remove_bookmark_action);
+  editMenu->addSeparator ();
+  editMenu->addAction (goto_line_action);
   _menu_bar->addMenu (editMenu);
 
   _debug_menu = new QMenu (tr ("&Debug"), _menu_bar);
   _debug_menu->addAction (toggle_breakpoint_action);
   _debug_menu->addAction (next_breakpoint_action);
   _debug_menu->addAction (previous_breakpoint_action);
   _debug_menu->addAction (remove_all_breakpoints_action);
   _debug_menu->addSeparator ();
@@ -731,16 +742,20 @@ file_editor::construct ()
   connect (remove_all_breakpoints_action,
            SIGNAL (triggered ()), this, SLOT (request_remove_breakpoint ()));
   connect (comment_selection_action,
            SIGNAL (triggered ()), this, SLOT (request_comment_selected_text ()));
   connect (uncomment_selection_action,
            SIGNAL (triggered ()), this, SLOT (request_uncomment_selected_text ()));
   connect (find_action,
            SIGNAL (triggered ()), this, SLOT (request_find ()));
+
+  connect (goto_line_action,
+           SIGNAL (triggered ()), this, SLOT (request_goto_line ()));
+ 
   // The actions of the mru file menu
   for (int i = 0; i < MaxMRUFiles; ++i)
     {
       connect(_mru_file_actions[i], SIGNAL (triggered ()), this, SLOT (request_mru_open_file ()));
     }
   mru_menu_update ();
   connect (_tab_widget,
            SIGNAL (tabCloseRequested (int)), this, SLOT (handle_tab_close_request (int)));
@@ -827,15 +842,17 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_remove_all_breakpoints (const QWidget*)),
            f, SLOT (remove_all_breakpoints (const QWidget*)));
   connect (this, SIGNAL (fetab_comment_selected_text (const QWidget*)),
            f, SLOT (comment_selected_text (const QWidget*)));
   connect (this, SIGNAL (fetab_uncomment_selected_text (const QWidget*)),
            f, SLOT (uncomment_selected_text (const QWidget*)));
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
+  connect (this, SIGNAL (fetab_goto_line (const QWidget*)),
+           f, SLOT (goto_line (const QWidget*)));
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -80,16 +80,17 @@ signals:
   void fetab_remove_bookmark (const QWidget* ID);
   void fetab_toggle_breakpoint (const QWidget* ID);
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
+  void fetab_goto_line (const QWidget* ID);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_mru_open_file ();
 
   void request_undo ();
@@ -109,16 +110,18 @@ public slots:
   void request_next_breakpoint ();
   void request_previous_breakpoint ();
   void request_remove_breakpoint ();
 
   void request_comment_selected_text ();
   void request_uncomment_selected_text ();
   void request_find ();
 
+  void request_goto_line ();
+
   void handle_file_name_changed (const QString& fileName, const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
