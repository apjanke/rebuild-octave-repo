# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1392327246 18000
#      Thu Feb 13 16:34:06 2014 -0500
# Branch stable
# Node ID 9cfba3616503360e1c7a6a6f8ae08610add49afa
# Parent  0821a51a9e1b26c81585123a93a8a4588edfa084
allow sighandlers.cc to compile on 64-bit Windows systems

* sighandlers.cc
(w32_interrupt_manager::do_octave_jump_to_enclosing_context):
Avoid code that only works on Windows32 systems.

diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -134,24 +134,31 @@ private:
   void do_octave_jump_to_enclosing_context (void)
   {
     bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
 
     if (is_interrupt_thread)
       octave_jump_to_enclosing_context_sync ();
     else
       {
+        // 64-bit Windows does not appear to have threadContext.Eip.
+        // Something else must be done here to allow interrupts to
+        // properly work across threads.
+
+#if ! (defined (__MINGW64__) || defined (_WIN64))
+
         CONTEXT threadContext;
 
         SuspendThread (thread);
         threadContext.ContextFlags = CONTEXT_CONTROL;
         GetThreadContext (thread, &threadContext);
         threadContext.Eip = (DWORD) octave_jump_to_enclosing_context_sync;
         SetThreadContext (thread, &threadContext);
         ResumeThread (thread);
+#endif
       }
   }
 
   void do_user_abort (const char *sig_name, int sig_number)
   {
     bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
 
     if (is_interrupt_thread)
