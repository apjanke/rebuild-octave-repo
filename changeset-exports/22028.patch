# HG changeset patch
# User Stefan Miereis <stefan.miereis@gmx.de>
# Date 1467469184 14400
#      Sat Jul 02 10:19:44 2016 -0400
# Node ID 5c949eecb6dd674b63bed84b478163028f9ac912
# Parent  0f2389d8fe0cb9bbb9661967176cf4394c02476c
use int64_t for octave_hdf5_id (bug #47858)

* oct-hdf5-types.h (octave_hdf5_id): Use int64_t.

* ls-hdf5.cc (check_hdf5_id_value): New static function.
* ls-hdf5.h, ls-hdf5.cc (hdf5_read_next_data_internal): Rename from
hdf5_read_next_data.  Use HDF5 types directly.
(hdf5_read_next_data): Now a wrapper around
hdf5_read_next_data_internal.  Use octave HDF5 types in the interface.
(hdf5_h5g_iterate): New function.
(read_hdf5_data): Pass hdf5_read_next_data_internal instead of
hdf5_read_next_data to H5Giterate.

* ov-cell.cc (octave_cell::load_hdf5): Call hdf5_h5g_iterate wrapper
function instead of calling H5giterate directly.
* ov-class.cc (octave_class::load_hdf5): Likewise.
* ov-fcn-handle.cc (octave_fcn_handle::load_hdf5): Likewise.
* ov-struct.cc (octave_struct::load_hdf5): Likewise.

diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 
 #include <cfloat>
 #include <cstring>
 #include <cctype>
 
 #include <fstream>
 #include <iomanip>
 #include <iostream>
+#include <limits>
 #include <string>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
@@ -67,16 +68,29 @@ along with Octave; see the file COPYING.
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 #include "ov-lazy-idx.h"
 
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+#if defined (HAVE_HDF5)
+
+static hid_t
+check_hdf5_id_value (octave_hdf5_id id, const char *who)
+{
+  if (id > std::numeric_limits<hid_t>::max ())
+    error ("%s: internal error: ID too large for hid_t", who);
+
+  return static_cast<hid_t> (id);
+}
+
+#endif
+
 hdf5_fstreambase::hdf5_fstreambase (const char *name, int mode, int /* prot */)
   : file_id (-1), current_item (-1)
 {
 #if defined (HAVE_HDF5)
 
   if (mode & std::ios::in)
     file_id = H5Fopen (name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
@@ -322,31 +336,31 @@ hdf5_make_complex_type (octave_hdf5_id n
 
   return type_id;
 
 #else
   err_disabled_feature ("hdf5_make_complex_type", "HDF5");
 #endif
 }
 
+#if defined (HAVE_HDF5)
+
 // This function is designed to be passed to H5Giterate, which calls it
 // on each data item in an HDF5 file.  For the item whose name is NAME in
 // the group GROUP_ID, this function sets dv->tc to an Octave representation
 // of that item.  (dv must be a pointer to hdf5_callback_data.)  (It also
 // sets the other fields of dv).
 //
 // It returns 1 on success (in which case H5Giterate stops and returns),
 // -1 on error, and 0 to tell H5Giterate to continue on to the next item
 // (e.g., if NAME was a data type we don't recognize).
 
-octave_hdf5_err
-hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv)
+static herr_t
+hdf5_read_next_data_internal (hid_t group_id, const char *name, void *dv)
 {
-#if defined (HAVE_HDF5)
-
   hdf5_callback_data *d = static_cast<hdf5_callback_data *> (dv);
   hid_t type_id = -1;
   hid_t type_class_id = -1;
   hid_t data_id = -1;
   hid_t subgroup_id = -1;
   hid_t space_id = -1;;
 
   H5G_stat_t info;
@@ -665,22 +679,50 @@ done:
           d->doc = name;
         }
 
       // copy name (actually, vname):
       d->name = vname;
     }
 
   return retval;
+}
+
+#endif
+
+octave_hdf5_err
+hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv)
+{
+#if defined (HAVE_HDF5)
+
+  hid_t new_id = check_hdf5_id_value (group_id, "hdf5_read_next_data");
+
+  return hdf5_read_next_data_internal (new_id, name, dv);
 
 #else
   err_disabled_feature ("hdf5_read_next_data", "HDF5");
 #endif
 }
 
+octave_hdf5_err
+hdf5_h5g_iterate (octave_hdf5_id loc_id, const char* name, int *idx,
+                  void *operator_data)
+{
+#if defined (HAVE_HDF5)
+
+  hid_t new_id = check_hdf5_id_value (loc_id, "hdf5_h5g_iterate");
+
+  return H5Giterate (new_id, name, idx, hdf5_read_next_data_internal,
+                     operator_data);
+
+#else
+  err_disabled_feature ("hdf5_h5g_iterate", "HDF5");
+#endif
+}
+
 // Read the next Octave variable from the stream IS, which must really be
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.
 std::string
 read_hdf5_data (std::istream& is, const std::string& /* filename */,
                 bool& global, octave_value& tc, std::string& doc,
@@ -734,17 +776,17 @@ read_hdf5_data (std::istream& is, const 
       if (found)
         break;
 
       hs.current_item++;
     }
 
   if (hs.current_item < static_cast<int> (num_obj))
     H5Giterate_retval = H5Giterate (hs.file_id, "/", &hs.current_item,
-                                    hdf5_read_next_data, &d);
+                                    hdf5_read_next_data_internal, &d);
 
   if (H5Giterate_retval > 0)
     {
       global = d.global;
       tc = d.tc;
       doc = d.doc;
     }
   else
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -117,16 +117,20 @@ extern OCTINTERP_API octave_hdf5_id
 hdf5_make_complex_type (octave_hdf5_id num_type);
 
 extern OCTINTERP_API bool
 hdf5_types_compatible (octave_hdf5_id t1, octave_hdf5_id t2);
 
 extern OCTINTERP_API octave_hdf5_err
 hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv);
 
+extern OCTINTERP_API octave_hdf5_err
+hdf5_h5g_iterate (octave_hdf5_id loc_id, const char* name, int *idx,
+                  void *operator_data);
+
 extern OCTINTERP_API bool
 add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
                bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API int
 save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d);
 
@@ -148,13 +152,14 @@ hdf5_check_attr (octave_hdf5_id loc_id, 
 
 extern OCTINTERP_API bool
 hdf5_get_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf);
 
 extern OCTINTERP_API octave_hdf5_err
 hdf5_add_attr (octave_hdf5_id loc_id, const char *attr_name);
 
+
 extern OCTINTERP_API octave_hdf5_err
 hdf5_add_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf);
 
 #endif
diff --git a/libinterp/corefcn/oct-hdf5-types.h b/libinterp/corefcn/oct-hdf5-types.h
--- a/libinterp/corefcn/oct-hdf5-types.h
+++ b/libinterp/corefcn/oct-hdf5-types.h
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 
 #if defined (__cplusplus)
 // This function only needs to be defined for C++.
 extern bool check_hdf5_types (bool warn = true);
 #endif
 
 // Available for C and C++.
 
-typedef int octave_hdf5_id;
+typedef int64_t octave_hdf5_id;
 typedef int octave_hdf5_err;
 
 #if defined (__cplusplus)
 extern "C" {
 #endif
 
 // These are defined in a C file, so they should have C-linkage in
 // both C and C++ source files.
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1143,18 +1143,17 @@ octave_cell::load_hdf5 (octave_hdf5_id l
   H5Gclose (group_id);
 
   for (octave_idx_type i = 0; i < dv.numel (); i++)
     {
 
       if (current_item >= static_cast<int> (num_obj))
         retval2 = -1;
       else
-        retval2 = H5Giterate (loc_id, name, &current_item,
-                              hdf5_read_next_data, &dsub);
+        retval2 = hdf5_h5g_iterate (loc_id, name, &current_item,&dsub);
 
       if (retval2 <= 0)
         break;
 
       octave_value ov = dsub.tc;
       m.elem (i) = ov;
 
     }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1584,18 +1584,18 @@ octave_class::load_hdf5 (octave_hdf5_id 
   subgroup_hid = H5Gopen (group_hid, name, octave_H5P_DEFAULT);
 #else
   subgroup_hid = H5Gopen (group_hid, name);
 #endif
   H5Gget_num_objs (subgroup_hid, &num_obj);
   H5Gclose (subgroup_hid);
 
   while (current_item < static_cast<int> (num_obj)
-         && (retval2 = H5Giterate (group_hid, name, &current_item,
-                                   hdf5_read_next_data, &dsub)) > 0)
+         && (retval2 = hdf5_h5g_iterate (group_hid, name, &current_item,
+                                         &dsub)) > 0)
     {
       octave_value t2 = dsub.tc;
 
       Cell tcell = t2.is_cell () ? t2.xcell_value ("load: internal error loading class elements") : Cell (t2);
 
       m.assign (dsub.name, tcell);
 
     }
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1142,18 +1142,18 @@ octave_fcn_handle::load_hdf5 (octave_hdf
 
           if (num_obj != static_cast<hsize_t>(len))
             error ("load: failed to load anonymous function handle");
 
           hdf5_callback_data dsub;
           int current_item = 0;
           for (octave_idx_type i = 0; i < len; i++)
             {
-              if (H5Giterate (group_hid, "symbol table", &current_item,
-                              hdf5_read_next_data, &dsub) <= 0)
+              if (hdf5_h5g_iterate (group_hid, "symbol table", &current_item,
+                                    &dsub) <= 0)
                 error ("load: failed to load anonymous function handle");
 
               symbol_table::assign (dsub.name, dsub.tc, local_scope);
             }
         }
 
       if (success)
         {
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -939,18 +939,18 @@ octave_struct::load_hdf5 (octave_hdf5_id
 #endif
   H5Gget_num_objs (group_id, &num_obj);
   H5Gclose (group_id);
 
   // FIXME: fields appear to be sorted alphabetically on loading.
   // Why is that happening?
 
   while (current_item < static_cast<int> (num_obj)
-         && (retval2 = H5Giterate (loc_id, name, &current_item,
-                                   hdf5_read_next_data, &dsub)) > 0)
+         && (retval2 = hdf5_h5g_iterate (loc_id, name, &current_item,
+                                         &dsub)) > 0)
     {
       octave_value t2 = dsub.tc;
 
       Cell tcell = t2.is_cell () ? t2.xcell_value ("load: internal error loading struct elements") : Cell (t2);
 
       m.setfield (dsub.name, tcell);
 
     }
@@ -1544,18 +1544,18 @@ octave_scalar_struct::load_hdf5 (octave_
 #endif
   H5Gget_num_objs (group_id, &num_obj);
   H5Gclose (group_id);
 
   // FIXME: fields appear to be sorted alphabetically on loading.
   // Why is that happening?
 
   while (current_item < static_cast<int> (num_obj)
-         && (retval2 = H5Giterate (loc_id, name, &current_item,
-                                   hdf5_read_next_data, &dsub)) > 0)
+         && (retval2 = hdf5_h5g_iterate (loc_id, name, &current_item,
+                                         &dsub)) > 0)
     {
       octave_value t2 = dsub.tc;
 
       m.setfield (dsub.name, t2);
 
     }
 
   if (retval2 >= 0)
