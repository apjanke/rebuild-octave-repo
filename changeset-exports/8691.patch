# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233881884 18000
#      Thu Feb 05 19:58:04 2009 -0500
# Node ID 7838271ee25c70bf9e30c93454286aa0d4406c2d
# Parent  6e9887f9cf9f646de4e166f3236279e106c071b0
symtab.cc (symbol_table::fcn_info::fcn_info_rep::find): avoid recursive call

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-02-05  John W. Eaton  <jwe@octave.org>
 
+	* symtab.cc (symbol_table::fcn_info::cn_info_rep::xfind):
+	New function.
+	(symbol_table::fcn_info::cn_info_rep::find):
+	Use it to avoid recursive call.
+
 	* graphics.cc (Fdrawnow): Return after errors.  Don't strip
 	trailing directory separator from name used in call to file_stat.
 
 	* DLD-FUNCTIONS/eigs.cc (Feigs): Avoid warnings about ambiguous
 	else.  Style fixes.  Return after errors.
 
 2009-02-05  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -483,18 +483,37 @@ get_dispatch_type (const octave_value_li
 // need to determine the appropriate place(s) to clear them (for
 // example, before returning from tree_index_expression::rvalue).
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find
   (tree_argument_list *args, const string_vector& arg_names,
    octave_value_list& evaluated_args, bool& args_evaluated)
 {
-  static bool deja_vu = false;
+  octave_value retval = xfind (args, arg_names, evaluated_args, args_evaluated);
+
+  if (! retval.is_defined ())
+    {
+      // It is possible that the user created a file on the fly since
+      // the last prompt or chdir, so try updating the load path and
+      // searching again.
+
+      load_path::update ();
 
+      retval = xfind (args, arg_names, evaluated_args, args_evaluated);
+    }
+
+  return retval;
+}
+
+octave_value
+symbol_table::fcn_info::fcn_info_rep::xfind
+  (tree_argument_list *args, const string_vector& arg_names,
+   octave_value_list& evaluated_args, bool& args_evaluated)
+{
   // Subfunction.  I think it only makes sense to check for
   // subfunctions if we are currently executing a function defined
   // from a .m file.
 
   scope_val_iterator r = subfunctions.find (xcurrent_scope);
 
   octave_function *curr_fcn = 0;
 
@@ -667,39 +686,19 @@ symbol_table::fcn_info::fcn_info_rep::fi
 
   // Function on the path.
 
   fcn = find_user_function ();
 
   if (fcn.is_defined ())
     return fcn;
 
-  // Built-in function.
-
-  if (built_in_function.is_defined ())
-    return built_in_function;
-
-  // At this point, we failed to find anything.  It is possible that
-  // the user created a file on the fly since the last prompt or
-  // chdir, so try updating the load path and searching again.
-
-  octave_value retval;
+  // Built-in function (might be undefined).
 
-  if (! deja_vu)
-    {
-      load_path::update ();
-
-      deja_vu = true;
-
-      retval = find (args, arg_names, evaluated_args, args_evaluated);
-    }
-
-  deja_vu = false;
-
-  return retval;
+  return built_in_function;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_method (const std::string& dispatch_type)
 {
   octave_value retval;
 
   str_val_iterator q = class_methods.find (dispatch_type);
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -697,16 +697,20 @@ public:
       octave_value function_on_path;
 
       octave_value built_in_function;
 
       size_t count;
 
     private:
 
+      octave_value
+      xfind (tree_argument_list *args, const string_vector& arg_names,
+	     octave_value_list& evaluated_args, bool& args_evaluated);
+
       // No copying!
 
       fcn_info_rep (const fcn_info_rep&);
 
       fcn_info_rep& operator = (const fcn_info_rep&);
     };
 
   public:
