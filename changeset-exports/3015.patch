# HG changeset patch
# User jwe
# Date 865285435 0
#      Mon Jun 02 21:03:55 1997 +0000
# Node ID 2e114e914b773facd9867d3b96003249218c7d4f
# Parent  38de16594cb41e5409b2a658bcd96bb746683814
[project @ 1997-06-02 21:03:55 by jwe]

diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -20,20 +20,24 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_defun_int_h)
 #define octave_defun_int_h 1
 
 #include <string>
 
+#include "version.h"
+
 class octave_value;
 
 extern void print_usage (const string& nm, bool just_usage = false);
 
+extern void check_version (const string& version, const string& fcn);
+
 // XXX FIXME XXX -- change to use actual pointer types instead of void*
 // when things are not changing as rapidly.
 
 extern void
 install_builtin_mapper (void *mf);
 
 extern void
 install_builtin_function (void *f, const string& name, const string& doc,
@@ -88,17 +92,20 @@ alias_builtin (const string& alias, cons
 // the symbol table.
 
 #define DEFINE_FUN_INSTALLER_FUN(name, doc) \
   bool \
   FS ## name (void) \
   { \
     static bool installed = false; \
     if (! installed) \
-      install_builtin_function (F ## name, #name, doc); \
+      { \
+	check_version (OCTAVE_VERSION, #name); \
+	install_builtin_function (F ## name, #name, doc); \
+      } \
     return installed; \
   }
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
   octave_value_list \
   F ## name (const octave_value_list& args_name, int nargout_name)
 
 // How builtin variables are actually installed.
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -53,16 +53,24 @@ print_usage (const string& nm, bool just
 	  if (! just_usage)
 	    additional_help_message (octave_stdout);
 	}
     }
   else
     warning ("no usage message found for `%s'", nm.c_str ());
 }
 
+void
+check_version (const string& version, const string& fcn)
+{
+  if (version != OCTAVE_VERSION)
+    warning ("incompatible version %s found in function `%s'",
+	     version.c_str (), fcn.c_str ());
+}
+
 // Install variables and functions in the symbol tables.
 
 void
 install_builtin_mapper (void *mf_arg)
 {
   octave_mapper *mf = static_cast<octave_mapper *> (mf_arg);
 
   symbol_record *sym_rec = global_sym_tab->lookup (mf->name (), true);
