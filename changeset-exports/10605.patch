# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1273083658 14400
#      Wed May 05 14:20:58 2010 -0400
# Node ID 1834132fb50bb7d30ea066a0b16ca3ce7fba2f59
# Parent  d7ff75c977e25b455d3ab188900a8081226dec44
allow non-integer ranges as indices conditionally

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2010-05-05  John W. Eaton  <jwe@octave.org>
+
+	* utils.cc (reset_warning_state): New function.
+	(Fisindex): Temporarily set warning state for
+	Octave:allow-noninteger-ranges-as-indices to "error".
+	* error.cc (set_warning_state): New function.
+	(initialize_default_warning_state): Set default warning state
+	for Octave:allow-noninteger-ranges-as-indices to "error".
+	* error.h (set_warning_state): Provide decl.
+	* octave.cc (maximum_braindamage): Set warning state for
+	Octave:allow-noninteger-ranges-as-indices to "on".
+	* ov-range.cc (octave_range::index_vector): Warn if range
+	contains non-integer values.
+
 2010-05-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/svd.cc (driver): New static var.
 	(Fsvd): Use it to select a driver.
 	(Fsvd_driver): New DEFUN.
 
 2010-05-02  Rik <octave@nomad.inbox5.com>
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1435,25 +1435,37 @@ warning named by @var{id} is handled as 
 
       if (nargout > 0)
         retval = prev_msg;
     }
 
   return retval;
 }
 
-void
-disable_warning (const std::string& id)
+octave_value_list
+set_warning_state (const std::string& id, const std::string& state)
 {
   octave_value_list args;
 
   args(1) = id;
-  args(0) = "off";
+  args(0) = state;
+
+  return Fwarning (args, 1);
+}
 
-  Fwarning (args, 0);
+octave_value_list
+set_warning_state (const octave_value_list& args)
+{
+  return Fwarning (args, 1);
+}
+
+void
+disable_warning (const std::string& id)
+{
+  set_warning_state (id, "off");
 }
 
 void
 initialize_default_warning_state (void)
 {
   initialize_warning_options ("on");
 
   // Most people will want to have the following disabled.
@@ -1468,16 +1480,20 @@ initialize_default_warning_state (void)
   disable_warning ("Octave:neg-dim-as-zero");
   disable_warning ("Octave:resize-on-range-error");
   disable_warning ("Octave:separator-insert");
   disable_warning ("Octave:single-quote-string");
   disable_warning ("Octave:str-to-num");
   disable_warning ("Octave:string-concat");
   disable_warning ("Octave:variable-switch-label");
   disable_warning ("Octave:complex-cmp-ops");
+
+  // This should be an error unless we are in maximum braindamage mode.
+
+  set_warning_state ("Octave:allow-noninteger-ranges-as-indices", "error");
 }
 
 DEFUN (lasterror, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{err} =} lasterror (@var{err})\n\
 @deftypefnx {Built-in Function} {} lasterror ('reset')\n\
 Returns or sets the last error message.  Called without any arguments\n\
 returns a structure containing the last error message, as well as other\n\
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_error_h)
 #define octave_error_h 1
 
 #include <cstdarg>
 #include <string>
 
+class octave_value_list;
+
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
          __FILE__, __LINE__)
 
 extern OCTINTERP_API void reset_error_handler (void);
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
@@ -89,16 +91,22 @@ vparse_error_with_id (const char *id, co
 extern OCTINTERP_API void
 parse_error_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Helper function for print_usage defined in defun.cc.
 extern OCTINTERP_API void defun_usage_message (const std::string& msg);
 
+extern OCTINTERP_API octave_value_list
+set_warning_state (const std::string& id, const std::string& state);
+
+extern OCTINTERP_API octave_value_list
+set_warning_state (const octave_value_list& args);
+
 extern OCTINTERP_API void disable_warning (const std::string& id);
 extern OCTINTERP_API void initialize_default_warning_state (void);
 
 // TRUE means that Octave will try to enter the debugger when an error
 // is encountered.  This will also inhibit printing of the normal
 // traceback message (you will only see the top-level error message).
 extern OCTINTERP_API bool Vdebug_on_error;
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -568,16 +568,18 @@ maximum_braindamage (void)
   bind_internal_variable ("crash_dumps_octave_core", false);
   bind_internal_variable ("default_save_options", "-mat-binary");
   bind_internal_variable ("fixed_point_format", true);
   bind_internal_variable ("history_timestamp_format_string",
                          "%%-- %D %I:%M %p --%%");
   bind_internal_variable ("page_screen_output", false);
   bind_internal_variable ("print_empty_dimensions", false);
 
+  set_warning_state ("Octave:allow-noninteger-ranges-as-indices", "on");
+
   disable_warning ("Octave:abbreviated-property-match");
   disable_warning ("Octave:fopen-file-in-path");
   disable_warning ("Octave:function-name-clash");
   disable_warning ("Octave:load-file-in-path");
 }
 
 // You guessed it.
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -25,16 +25,18 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 
+#include "defun.h"
+#include "variables.h"
 #include "gripes.h"
 #include "ops.h"
 #include "oct-obj.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
@@ -137,16 +139,35 @@ octave_range::do_index_op (const octave_
   else
     {
       octave_value tmp (new octave_matrix (range.matrix_value ()));
 
       return tmp.do_index_op (idx, resize_ok);
     }
 }
 
+idx_vector
+octave_range::index_vector (void) const
+{
+  if (idx_cache)
+    return *idx_cache;
+  else
+    {
+      if (range.all_elements_are_ints ())
+        return set_idx_cache (idx_vector (range));
+      else
+        {
+          warning_with_id ("Octave:allow-noninteger-ranges-as-indices",
+                           "rounding non-integer range used as index to nearest integer");
+
+          return octave_value (matrix_value ()).round ().index_vector ();
+        }
+    }
+}
+
 double
 octave_range::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   octave_idx_type nel = range.nelem ();
 
   if (nel > 0)
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -101,18 +101,17 @@ public:
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
-  idx_vector index_vector (void) const 
-    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (range)); }
+  idx_vector index_vector (void) const;
 
   dim_vector dims (void) const
     { 
       octave_idx_type n = range.nelem ();
       return dim_vector (n > 0, n);
     }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -55,16 +55,17 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "oct-errno.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
+#include "parse.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Return TRUE if S is a valid identifier.
 
@@ -1298,16 +1299,27 @@ octave_sleep (double seconds)
       // defined in cutils.c.
       octave_sleep (sec);
       octave_usleep (usec);
 
       octave_quit ();
     }
 }
 
+// FIXME -- is there some way to fix the declarations in unwind-prot.h
+// so that this function's argument can be declared as
+// "const octave_value_list&"?
+
+static void
+reset_warning_state (octave_value_list args)
+{
+  if (! args.empty ())
+    set_warning_state (args);
+}
+
 DEFUN (isindex, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isindex (@var{ind}, @var{n})\n\
 Returns true if @var{ind} is a valid index.  Valid indices can be\n\
 either positive integers (though possibly real data), or logical arrays.\n\
 If present, @var{n} specifies the extent of the dimension to be indexed.\n\
 Note that, if possible, the internal conversion result is cached so that\n\
 subsequent indexing will not perform the checking again.\n\
@@ -1320,17 +1332,25 @@ subsequent indexing will not perform the
   if (nargin == 2)
     n = args(1).idx_type_value ();
   else if (nargin != 1)
     print_usage ();
 
   if (! error_state)
     {
       unwind_protect frame;
+
+      octave_value_list current_warning_state
+        = set_warning_state ("Octave:allow-noninteger-ranges-as-indices",
+                             "error");
+
+      frame.add_fcn (reset_warning_state, current_warning_state);
+
       frame.protect_var (error_state);
+
       frame.protect_var (discard_error_messages);
       discard_error_messages = true;
 
       try
         {
           idx_vector idx = args(0).index_vector ();
           if (! error_state)
             {
