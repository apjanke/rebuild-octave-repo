# HG changeset patch
# User mmuetzel <markus.muetzel@gmx.de>
# Date 1461142709 -7200
#      Wed Apr 20 10:58:29 2016 +0200
# Node ID 986dbd769bb1e785eefe46f3796625436b8919a3
# Parent  96518f623c91090c10dc0f6e7b5b2f998968bbc5
Handle large hex and binary integer input (bug #47690)

* lex.ll (octave_base_lexer::handle_number): Use uintmax_t for hex and
binary integer input.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2775,33 +2775,34 @@ octave_base_lexer::handle_number (void)
   {
     *wptr = *rptr++;
      wptr += (*wptr != '_');
   }
   *wptr = '\0';
 
   if (looks_like_hex (tmptxt, strlen (tmptxt)))
     {
-      unsigned long ival;
-
-      nread = sscanf (tmptxt, "%lx", &ival);
-
-      value = static_cast<double> (ival);
+      uintmax_t long_int_value;
+
+      nread = sscanf (tmptxt, "%jx", &long_int_value);
+
+      value = static_cast<double> (long_int_value);
     }
   else if (looks_like_bin (tmptxt, strlen (tmptxt)))
     {
-      uint64_t ivalue = 0;
+      uintmax_t long_int_value = 0;
 
       for (size_t i = 0; i < strlen (tmptxt); i++)
         {
-          ivalue <<= 1;
-          ivalue += static_cast<uint64_t> (tmptxt[i] == '1');
+          long_int_value <<= 1;
+          long_int_value += static_cast<uintmax_t> (tmptxt[i] == '1');
         }
 
-      value = static_cast<double> (ivalue);
+      value = static_cast<double> (long_int_value);
+
       nread = 1;  // Just to pass the assert stmt below
     }
   else
     {
       char *idx = strpbrk (tmptxt, "Dd");
 
       if (idx)
         *idx = 'e';
