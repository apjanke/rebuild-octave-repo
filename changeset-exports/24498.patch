# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514995848 28800
#      Wed Jan 03 08:10:48 2018 -0800
# Node ID 5865d2fef424e2395cceb88dabb05048a33f3f1f
# Parent  1c96b44feb7a311ec2529937aced5104cd0b0caf
legend.m: Clean up implementation.

* legend.m: Rename variable "fig" to "hfig" for clarity.  Remove unnecessary
error() that should never happen (someone will always report it if it does).
Add more comments to try and explain code.  Rename property "handle" to
"__axes_handle__" which points from legend to associated axes.  Add new
property "__legend_handle__" to associated axes which points back to legend.
Replace complicated searches for an existing legend object with try/catch
block looking for "__legend_handle__" property.  Remove redundanc code.
Rename "oldfig" to "origfig" for clarity.  Rename "curaxes" to "origaxes"
for clarity.  Important: Make new legend object's parent the same as the
parent of the associated axes.  This makes legends work for things like uipanel,
not just figures.  For performance, limit search for htdel text object to
a depth of 1.
* legend.m (cb_legend_update): Rename "handle" to "__axes_handle__".  Remove
unnecessarily complicated code to get hplots from existing legend.
* legend.m (cb_restore_axes): Set "__legend_handle__" on associated axes
to [] when deleting legend.

* __getlegenddata__.m, axes.m: Rename property "handle" to "__axes_handle__".

* __errplot__.m: Remove unnecessary ancestor() call to find axes.
Replace search for legend with try/catch on "__legend_handle__" property.

* __plt__.m: Replace search for legend with try/catch on "__legend_handle__"
property.

* hdl2struct.m: Replace search for legend with try/catch on "__legend_handle__"
property.  Replace search for colorbar with try/catch on "__colorbar_handle__"

* __gnuplot_draw_figure__.m: Rename property "handle" to "__axes_handle__".
Replace search for legend with try/catch on "__legend_handle__" property.

* __gnuplot_print__.m (get_figure_text): Simplify determination of legend,
it is just an axes object with tag set to legend.

diff --git a/scripts/plot/appearance/__getlegenddata__.m b/scripts/plot/appearance/__getlegenddata__.m
--- a/scripts/plot/appearance/__getlegenddata__.m
+++ b/scripts/plot/appearance/__getlegenddata__.m
@@ -20,17 +20,17 @@
 ## @deftypefn {} {[@var{hplots}, @var{strings}] =} __getlegenddata__ (@var{h})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [hplots, text_strings] = __getlegenddata__ (hlegend)
 
   hplots = [];
   text_strings = {};
-  ca = getappdata (hlegend, "handle");
+  ca = getappdata (hlegend, "__axes_handle__");
   if (numel (ca) == 1)
     kids = get (ca, "children");
   else
     kids = cell2mat (get (ca, "children"));
   endif
 
   for i = numel (kids):-1:1
     typ = get (kids(i), "type");
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -128,78 +128,75 @@
 ## @nospell{@qcode{"dataN"}}.  No more than 20 data labels will be
 ## automatically generated.  To label more, call @code{legend} explicitly and
 ## provide all labels.
 ##
 ## The legend @code{FontSize} property is initially set to 90% of the axes
 ## @code{FontSize} to which it is attached.  Use @code{set} to override this
 ## if necessary.
 ##
-## A legend is implemented as an additional axes object of the current figure
-## with the @code{tag} property set to @qcode{"legend"}.  Properties of the
-## legend object may be manipulated directly by using @code{set}.
+## A legend is implemented as an additional axes object with the @code{tag}
+## property set to @qcode{"legend"}.  Properties of the legend object may be
+## manipulated directly by using @code{set}.
 ## @end deftypefn
 
 function [hleg, hleg_obj, hplot, labels] = legend (varargin)
 
   if (nargin > 0
       && (! ishghandle (varargin{1})
           || (strcmp (get (varargin{1}, "type"), "axes")
               && ! strcmp (get (varargin{1}, "tag"), "legend"))))
     [ca, varargin, nargin] = __plt_get_axis_arg__ ("legend", varargin{:});
     if (isempty (ca))
       ca = gca ();
     endif
-    fig = ancestor (ca, "figure");
+    hfig = ancestor (ca, "figure");
   else
-    fig = get (0, "currentfigure");
-    if (isempty (fig))
-      fig = gcf ();
+    hfig = get (0, "currentfigure");
+    if (isempty (hfig))
+      hfig = gcf ();
     endif
     ca = gca ();
   endif
 
   ## Special handling for plotyy which has two axes objects
   if (isprop (ca, "__plotyy_axes__"))
     plty = get (ca, "__plotyy_axes__");
-    if (! all (ishghandle (plty)))
-      error ("legend.m: This should not happen.  File a bug report.");
-    endif
     ca = [ca, plty.'];
     ## Remove duplicates while preserving order
     [~, n] = unique (ca, "first");
     ca = ca(sort (n));
   endif
 
   if (nargin > 0 && all (ishghandle (varargin{1})))
+    ## List of plot objects to label given as first argument
     kids = flipud (varargin{1}(:));
     varargin(1) = [];
   else
+    ## Find list of plot objects from axes "children"
     kids = ca;
     kids(strcmp (get (ca, "tag"), "legend")) = [];
     if (isscalar (kids))
       kids = get (kids, "children")(:);
     else
       kids = vertcat (flipud (get (kids, "children")){:});
     endif
   endif
   nargs = numel (varargin);
   nkids = numel (kids);
 
-  ## Find any existing legend object on figure
+  ## Find any existing legend object associated with axes
   hlegend = [];
-  fkids = get (fig, "children");
-  for i = 1 : numel (fkids)
-    if (strcmp (get (fkids(i), {"type", "tag"}), {"axes", "legend"}))
-      handle = getappdata (fkids(i), "handle");
-      if (any (ismember (handle, ca)))
-        hlegend = fkids(i);
+  for hax = ca
+    try
+      hlegend = get (hax, "__legend_handle__");
+      if (! isempty (hlegend))
         break;
       endif
-    endif
+    end_try_catch
   endfor
 
   orientation = "default";
   location = "default";
   show = "create";
   textpos = "default";
   box = "default";
   delete_leg = false;
@@ -392,19 +389,16 @@ function [hleg, hleg_obj, hplot, labels]
                       "orientation", orientation);
       else
         set (hlegend, "location", location,
                       "orientation", orientation);
       endif
     endif
   else
     ## Create or modify legend object
-    hobjects = [];
-    hplots = [];
-    text_strings = {};
 
     if (! isempty (hlegend))
       ## Disable callbacks while modifying an existing legend
       setappdata (hlegend, "nocallbacks", true);
     endif
 
     if (have_labels)
       ## Check for valid data that can be labeled.
@@ -498,18 +492,17 @@ function [hleg, hleg_obj, hplot, labels]
           k--;
         endif
       endwhile
     endif
 
     if (isempty (hplots))
       ## Nothing to label
       if (! isempty (hlegend))
-        fkids = get (fig, "children");
-        delete (fkids(fkids == hlegend));
+        delete (hlegend);
         hlegend = [];
         hobjects = [];
         hplots = [];
         text_strings = {};
       endif
     else
       ## Preserve the old legend if it exists
       if (! isempty (hlegend))
@@ -577,57 +570,66 @@ function [hleg, hleg_obj, hplot, labels]
       end_unwind_protect
 
       ## Padding between legend entries horizontally and vertically
       xpad = 2;
       ypad = 2;
 
       linelength = 15;
 
-      ## Create the axes object first
-      oldfig = get (0, "currentfigure");
-      if (oldfig != fig)
-        set (0, "currentfigure", fig);
+      ## Preamble code to restore figure and axes after legend creation
+      origfig = get (0, "currentfigure");
+      if (origfig != hfig)
+        set (0, "currentfigure", hfig);
       else
-        oldfig = [];
+        origfig = [];
       endif
-      curaxes = get (fig, "currentaxes");
+      origaxes = get (hfig, "currentaxes");
       unwind_protect
         ud = ancestor (hplots, "axes");
         if (! isscalar (ud))
           ud = unique ([ud{:}]);
         endif
+        hpar = get (ud(1), "parent");
+
         if (isempty (hlegend))
           ## Create a legend object (axes + new properties)
           addprops = true;
-          hlegend = axes ("tag", "legend",
+          hlegend = axes ("parent", hpar, "tag", "legend",
                           "box", box,
                           "xtick", [], "ytick", [],
                           "xlim", [0, 1], "ylim", [0, 1],
                           "activepositionproperty", "position");
-          setappdata (hlegend, "handle", ud);
+          setappdata (hlegend, "__axes_handle__", ud);
+          try
+            addproperty ("__legend_handle__", ud(1), "handle", hlegend);
+          catch
+            set (ud(1), "__legend_handle__", hlegend);
+          end_try_catch
+
           ## Inherit fontsize from current axis
           ## "fontunits" should be first because it affects interpretation
           ## of "fontsize" property.
           [fontunits, fontsz] = get (ca(1), {"fontunits", "fontsize"}){:};
           fontsz *= 0.90;  # Reduce legend fontsize to 90% of axes fontsize
           set (hlegend, {"fontunits", "fontsize"}, {fontunits, fontsz});
           set (hlegend, "fontunits", "points");  # legend always works in pts.
           old_hplots = [];
         else
           ## Re-use existing legend.
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
           ## Hack: get list of hplots for which addlistener has been called.
-          old_hplots = [ get(hlegend, "deletefcn"){6:end} ];
+          old_hplots = get (hlegend, "deletefcn"){6};
         endif
 
         if (addprops)
           ## Only required for a newly created legend object
+          ## FIXME: "autoupdate" is not implemented.
           addproperty ("autoupdate", hlegend, "radio", "{on}|off");
           addproperty ("edgecolor", hlegend, "color", [0.15, 0.15, 0.15]);
           addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
           locations = {"north", "south", "east", "west", ...
                        "{northeast}", "southeast", "northwest", "southwest", ...
                        "northoutside", "southoutside", ...
                        "eastoutside", "westoutside", ...
                        "northeastoutside", "southeastoutside", ...
@@ -715,17 +717,17 @@ function [hleg, hleg_obj, hplot, labels]
 
         ## Place the legend in the desired location
         if (strcmp (orientation, "vertical"))
           lpos = [0, 0, num2 * xstep, num1 * ystep];
         else
           lpos = [0, 0, num1 * xstep, num2 * ystep];
         endif
 
-        gnuplot = strcmp (get (fig, "__graphics_toolkit__"), "gnuplot");
+        gnuplot = strcmp (get (hfig, "__graphics_toolkit__"), "gnuplot");
         if (gnuplot)
           ## gnuplot places the key (legend) at edge of the figure window.
           ## OpenGL places the legend box at edge of the unmodified axes
           ## position.
           if (isempty (strfind (location, "east")))
             gnuplot_offset = unmodified_axes_outerposition(1) ...
                            + unmodified_axes_outerposition(3) ...
                            - unmodified_axes_position(1) ...
@@ -979,23 +981,23 @@ function [hleg, hleg_obj, hplot, labels]
               xk = 0;
               yk += 1;
             endif
           endif
         endfor
 
         ## Add an invisible text object to original axis
         ## that, when it is destroyed, will remove the legend.
-        props = {"parent", ca(1), "tag", "deletelegend", ...
-                 "visible", "off", "handlevisibility", "off", ...
-                 "xliminclude", "off", "yliminclude", "off", ...
-                 "zliminclude", "off"};
-        htdel = findall (ca(1), "tag", "deletelegend", "type", "text");
+        htdel = findall (ca(1), "-depth", 1, "tag", "deletelegend",
+                                "type", "text");
         if (isempty (htdel))
-          htdel = text (0, 0, "", props{:});
+          htdel = text (0, 0, "", "parent", ca(1), "tag", "deletelegend", 
+                        "visible", "off", "handlevisibility", "off",
+                        "xliminclude", "off", "yliminclude", "off",
+                        "zliminclude", "off");
           set (htdel, "deletefcn", {@cb_axes_deleted, ca, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
           set (hlegend, "unmodified_axes_position",
                          unmodified_axes_position,
                         "unmodified_axes_outerposition",
                          unmodified_axes_outerposition);
         else
@@ -1089,20 +1091,21 @@ function [hleg, hleg_obj, hplot, labels]
           ##        addlistener (ca, "position", @update????);
         else
           ## Restore listeners temporarily disabled during reconstruction.
           addlistener (hlegend, "location", @cb_legend_update);
           addlistener (hlegend, "orientation", @cb_legend_update);
           addlistener (hlegend, "string", @cb_legend_update);
           addlistener (hlegend, "textposition", @cb_legend_update);
         endif
+
       unwind_protect_cleanup
-        set (fig, "currentaxes", curaxes);
-        if (! isempty (oldfig))
-          set (0, "currentfigure", oldfig);
+        set (hfig, "currentaxes", origaxes);
+        if (! isempty (origfig))
+          set (0, "currentfigure", origfig);
         endif
       end_unwind_protect
     endif
   endif
 
   ## Restore operation of callbacks
   setappdata (hlegend, "nocallbacks", false);
 
@@ -1117,19 +1120,19 @@ endfunction
 
 ## A non-text property of legend has changed requiring an update.
 function cb_legend_update (hleg, ~)
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
     unwind_protect
-      hax = getappdata (hleg, "handle");
+      hax = getappdata (hleg, "__axes_handle__");
       ## Hack.  Maybe store this somewhere else such as appdata.
-      hplots = [ get(hleg, "deletefcn"){6:end} ];
+      hplots = get (hleg, "deletefcn"){6};
       text_strings = get (hleg, "string");
       position = get (hleg, "unmodified_axes_position");
       outerposition = get (hleg, "unmodified_axes_outerposition");
       units = get (hax, "units");
       set (hax, "units", "points");
       switch (get (hax, "activepositionproperty"))
         case "position"
           set (hax, "outerposition", outerposition);
@@ -1195,16 +1198,17 @@ endfunction
 function cb_legend_location (hleg, d)
 
   ## If it isn't "none", which means manual positioning, then rebuild .
   if (! strcmp (get (hleg, "location"), "none"))
     cb_legend_update (hleg, d);
   endif
 
 endfunction
+
 ## Axes to which legend was attached is being deleted/reset.  Delete legend.
 function cb_axes_deleted (~, ~, ca, hlegend)
   if (isaxes (hlegend))
     if (strcmp (get (ca(1), "beingdeleted"), "on"))
       ## Axes are being deleted.  Disable call to cb_restore_axes.
       set (hlegend, "deletefcn", []);
     endif
     delete (hlegend);
@@ -1252,16 +1256,19 @@ function cb_restore_axes (~, ~, ca, pos,
       dellistener (hplots(i), "marker");
       dellistener (hplots(i), "markeredgecolor");
       dellistener (hplots(i), "markerfacecolor");
       dellistener (hplots(i), "markersize");
       dellistener (hplots(i), "displayname");
     endif
   endfor
 
+  ## Nullify legend link (can't delete properties yet)
+  set (ca(1), "__legend_handle__", []);
+
 endfunction
 
 ## Update legend item because underlying plot line object has changed.
 function cb_line_listener (h, ~, hlegend, linelength, update_name)
 
   ## Don't execute callbacks when legend is under construction
   legdata = getappdata (hlegend);
   if (legdata.nocallbacks)
@@ -1743,20 +1750,20 @@ endfunction
 %!test <*42035>
 %! h = figure ("visible", "off");
 %! unwind_protect
 %!   hax1 = subplot (1,2,1);
 %!   plot (1:10);
 %!   hax2 = subplot (1,2,2);
 %!   plot (1:10);
 %!   hleg1 = legend (hax1, "foo");
-%!   assert (getappdata (hleg1, "handle"), hax1);
+%!   assert (getappdata (hleg1, "__axes_handle__"), hax1);
 %!   assert (gca (), hax2);
 %!   hleg2 = legend ("bar");
-%!   assert (getappdata (hleg2, "handle"), gca ());
+%!   assert (getappdata (hleg2, "__axes_handle__"), gca ());
 %! unwind_protect_cleanup
 %!   close (h);
 %! end_unwind_protect
 
 %!test
 %! ## Difficult example from plotyy demo #1
 %! hf = figure ("visible", "off");
 %! unwind_protect
diff --git a/scripts/plot/draw/private/__errplot__.m b/scripts/plot/draw/private/__errplot__.m
--- a/scripts/plot/draw/private/__errplot__.m
+++ b/scripts/plot/draw/private/__errplot__.m
@@ -237,37 +237,30 @@ function h = __do_errplot__ (fstr, hax, 
     addlistener (hg, "xdata", fcn);
     addlistener (hg, "ydata", fcn);
     addlistener (hg, "ldata", fcn);
     addlistener (hg, "udata", fcn);
     addlistener (hg, "xldata", fcn);
     addlistener (hg, "xudata", fcn);
     addlistener (hg, "format", fcn);
 
-    hax = ancestor (hg, "axes");
     addlistener (hax, "xscale", fcn);
     addlistener (hax, "yscale", fcn);
 
     update_data (hg, [], hl);
 
   endfor
 
   ## Process legend key
   if (! isempty (fmt.key) && nplots > 0)
-    hlegend = [];
-    fkids = get (gcf (), "children");
-    for i = 1 : numel (fkids)
-      if (strcmp (get (fkids(i), {"type", "tag"}), {"axes", "legend"}))
-        leghandle = getappdata (fkids(i), "handle");
-        if (! isempty (intersect (leghandle, gca ())))
-          hlegend = fkids(i);
-          break;
-        endif
-      endif
-    endfor
+    try
+      hlegend = get (hax, "__legend_handle__");
+    catch
+      hlegend = [];
+    end_try_catch
 
     if (isempty (hlegend))
       hlgnd = [];
       tlgnd = {};
     else
       [hlgnd, tlgnd] = __getlegenddata__ (hlegend);
     endif
 
diff --git a/scripts/plot/draw/private/__plt__.m b/scripts/plot/draw/private/__plt__.m
--- a/scripts/plot/draw/private/__plt__.m
+++ b/scripts/plot/draw/private/__plt__.m
@@ -32,27 +32,22 @@ function retval = __plt__ (caller, h, va
 
     k = 1;
 
     x_set = false;
     y_set = false;
     property_set = false;
     properties = {};
 
-    hlegend = [];
-    fkids = get (gcf (), "children");
-    for i = 1 : numel (fkids)
-      if (strcmp (get (fkids(i), {"type", "tag"}), {"axes", "legend"}))
-        leghandle = getappdata (fkids(i), "handle");
-        if (! isempty (intersect (leghandle, gca ())))
-          hlegend = fkids(i);
-          break;
-        endif
-      endif
-    endfor
+    ## Find any legend associated with this axes
+    try
+      hlegend = get (h, "__legend_handle__");
+    catch
+      hlegend = [];
+    end_try_catch
 
     setlgnd = false;
     if (isempty (hlegend))
       hlgnd = [];
       tlgnd = {};
     else
       [hlgnd, tlgnd] = __getlegenddata__ (hlegend);
     endif
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -103,19 +103,19 @@ function restack_axes (h, cf)
     ch = get (cf, "children");
     axidx = isaxes (ch);
     hax = ch(axidx);
     ## Stack the legend associated with this axes on top of the axes itself
     hleg = hax(strcmp (get (hax, "tag"), "legend"));
     if (any (hleg))
       ## Get axes handles associated with legend
       if (isscalar (hleg))
-        hlegaxes = getappdata (hleg, "handle");
+        hlegaxes = getappdata (hleg, "__axes_handle__");
       else
-        hlegaxes = [getappdata(hleg, "handle"){:}](:);
+        hlegaxes = [getappdata(hleg, "__axes_handle__"){:}](:);
       endif
       hleg = hleg(hlegaxes == h);
       h = [hleg; h];
     endif
     ch(axidx) = [h; hax(! ismember (hax, h))];
     set (cf, "children", ch);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", show);
diff --git a/scripts/plot/util/hdl2struct.m b/scripts/plot/util/hdl2struct.m
--- a/scripts/plot/util/hdl2struct.m
+++ b/scripts/plot/util/hdl2struct.m
@@ -74,43 +74,41 @@ function s = hdl2struct (h)
       s.children(ii) = hdl2struct (special(nsp));
       s.special(nsp) = ii;
       nsp -= 1;
     endwhile
 
     if (strcmp (s.type, "axes") && isempty (get (h, "tag")))
       ## look for legends and colorbars among axes brothers and add them
       ## to the children list
-
-      par = get (h, "parent");
-      lg = findobj (par, "-depth", 1, "tag", "legend");
-      if (! isempty (lg))
-        ## identify legends which are attached to this axes.
-        idx = ([[get(lg).userdata].handle] == h);
-        lg = lg(idx);
-      endif
+      try
+        lg = get (h, "__legend_handle__");
+      catch
+        lg = [];
+      end_try_catch
       nlg = length (lg);
       if (nlg == 1)
         ii += 1;
         s.children(ii) = hdl2struct (lg);
       elseif (nlg > 1)
+        ## FIXME: Unreachable code now.  Delete?
         error ("hdl2struct: more than one legend found");
       endif
 
-      cb = findobj (par, "-depth", 1, "tag", "colorbar");
-      if (! isempty (cb))
-        ## identify colorbars which are attached to this axes.
-        idx = ([get(cb).axes] == h);
-        cb = cb(idx);
-      endif
+      try
+        cb = get (h, "__colorbar_handle__");
+      catch
+        cb = [];
+      end_try_catch
       ncb = length (cb);
       if (ncb == 1)
         ii += 1;
         s.children(ii) = hdl2struct (cb);
       elseif (ncb > 1)
+        ## FIXME: Unreachable code now.  Delete?
         error ("hdl2struct: more than one colorbar found");
       endif
     endif
 
   unwind_protect_cleanup
     set (0, "showhiddenhandles", hiddenh);
   end_unwind_protect
 
diff --git a/scripts/plot/util/private/__gnuplot_draw_figure__.m b/scripts/plot/util/private/__gnuplot_draw_figure__.m
--- a/scripts/plot/util/private/__gnuplot_draw_figure__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_figure__.m
@@ -44,21 +44,21 @@ function __gnuplot_draw_figure__ (h, plo
         bg_is_set = false;
       endif
       fg_was_set = false;
 
       for i = nkids:-1:1
         type = get (kids(i), "type");
         switch (type)
           case "axes"
-            if (strcmpi (get (kids (i), "tag"), "legend"))
+            if (strcmp (get (kids(i), "tag"), "legend"))
               ## This is so ugly.  If there was a way of getting
               ## gnuplot to give us the text extents of strings
               ## then we could get rid of this mess.
-              lh = getappdata (kids(i), "handle");
+              lh = getappdata (kids(i), "__axes_handle__");
               if (isscalar (lh))
                 ## We have a legend with a single parent.  It'll be handled
                 ## below as a gnuplot key to the axis it corresponds to.
                 continue;
               else
                 ca = lh(1);
                 ## Rely upon listener to convert axes position
                 ## to "normalized" units.
@@ -150,29 +150,22 @@ function __gnuplot_draw_figure__ (h, plo
                 else
                   fg_is_set = false;
                 endif
                 if (bg_is_set)
                   fprintf (plot_stream, ['set border linecolor rgb "#%02x%02x%02x"' "\n"], round (255 * (1 - bg)));
                 endif
                 ## Find if this axes has an associated legend axes and pass it
                 ## to __gnuplot_draw_axes__
-                hlegend = [];
-                fkids = get (h, "children");
-                for j = 1 : numel (fkids)
-                  if (ishghandle (fkids (j))
-                      && strcmp (get (fkids(j), {"type", "tag"}),
-                                 {"axes", "legend"}))
-                    leghandle = getappdata (fkids(j), "handle");
-                    if (! isempty (intersect (leghandle, kids(i))))
-                      hlegend = get (fkids(j));
-                      break;
-                    endif
-                  endif
-                endfor
+                try
+                  hlegend = get (kids(i), "__legend_handle__");
+                  hlegend = get (hlegend);
+                catch
+                  hlegend = [];
+                end_try_catch
                 __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced,
                                        bg_is_set, fg_is_set, hlegend);
               unwind_protect_cleanup
                 ## Return axes "units" and "position" back to
                 ## their original values.
                 set (kids(i), "units", orig_axes_units);
                 set (kids(i), "position", orig_axes_position);
                 bg_is_set = false;
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -349,19 +349,17 @@ function [h, fontsize] = get_figure_text
   h = findall (opts.figure, "-property", "fontsize");
   hp = get (h, "parent");
   if (iscell (hp))
     hp = cell2mat (hp);
   endif
   ## Do not change the text objects fontsizes for the children of a
   ## legend axes.  These will be handled by the fontsize listener.
   is_legend_key_string = strcmp (get (hp, "tag"), "legend") ...
-                       & isprop (hp, "string") ...
-                       & isprop (hp, "location") ...
-                       & strcmp (get (hp, "type"), "axes");
+                         & strcmp (get (hp, "type"), "axes");
   h(is_legend_key_string) = [];
   fontsize = get (h, "fontsize");
   switch (numel (fontsize))
     case 0
       fontsize = {};
     case 1
       fontsize = {fontsize};
   endswitch
