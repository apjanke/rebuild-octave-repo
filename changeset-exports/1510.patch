# HG changeset patch
# User jwe
# Date 812717020 0
#      Tue Oct 03 10:43:40 1995 +0000
# Node ID fe9c39fd89c7420ec7bab93bf7af6e5f54be52d0
# Parent  36477a20e8c8e3e7f1c9ec7422a05081cd6b2a88
[project @ 1995-10-03 10:43:11 by jwe]

diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -192,20 +192,22 @@ tree_expression::is_logically_true (cons
     {
       if (t1.is_defined ())
 	{
 	  if (t1.rows () == 0 || t1.columns () == 0)
 	    {
 	      t1 = 0.0;
 	      int flag = user_pref.propagate_empty_matrices;
 	      if (flag < 0)
-		warning ("%s: empty matrix used in conditional expression");
+		warning ("%s: empty matrix used in conditional expression",
+			 warn_for);
 	      else if (flag == 0)
 		{
-		  ::error ("%s: empty matrix used in conditional expression");
+		  ::error ("%s: empty matrix used in conditional expression",
+			   warn_for);
 		  return expr_value;
 		}
 	    }
 	  else if (! t1.is_scalar_type ())
 	    {
 	      tree_constant t2 = t1.all ();
 	      if (! error_state)
 		t1 = t2.all ();
@@ -216,23 +218,24 @@ tree_expression::is_logically_true (cons
 	      if (t1.is_real_scalar ())
 		expr_value = (int) t1.double_value ();
 	      else if (t1.is_complex_scalar ())
 		expr_value = t1.complex_value () != 0.0;
 	      else
 		panic_impossible ();
 	    }
 	  else
-	    ::error ("%s: invalid type in conditional expression");
+	    ::error ("%s: invalid type in conditional expression", warn_for);
 	}
       else
-	::error ("%s: undefined value used in conditional expression");
+	::error ("%s: undefined value used in conditional expression",
+		 warn_for);
     }
   else
-    ::error ("%s: error evaluating conditional expression");
+    ::error ("%s: error evaluating conditional expression", warn_for);
 
   return expr_value;
 }
 
 tree_constant
 tree_expression::eval (int /* print */)
 {
   panic ("invalid evaluation of generic expression");
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -83,16 +83,36 @@ public:
       print_flag = 1;
     }
 
   ~tree_statement (void);
 
   void set_print_flag (int print)
     { print_flag = print; }
 
+  int is_command (void)
+    { return command != 0; }
+
+  int is_expression (void)
+    { return expression != 0; }
+
+  int line (void)
+    {
+      return command
+	? command->line ()
+	  : (expression ? expression->line () : -1);
+    }
+
+  int column (void)
+    {
+      return command
+	? command->column ()
+	  : (expression ? expression->column () : -1);
+    }
+
   void print_code (ostream& os);
 
 private:
   tree_command *command;	// Command to execute.
   tree_expression *expression;	// Command to execute.
   int print_flag;		// Print result of eval for this command?
 };
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1825,17 +1825,17 @@ help and usage functions");
 
   DEFVAR ("warn_function_name_clash", SBV_warn_function_name_clash,
 	  1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR ("warn_missing_semicolon", SBV_warn_missing_semicolon,
 	  0.0, 0, warn_missing_semicolon,
     "produce a warning if a statement in a script or function file is
-not terminated with a semicolon")
+not terminated with a semicolon");
 
   DEFVAR ("whitespace_in_literal_matrix",
 	  SBV_whitespace_in_literal_matrix, "", 0,
 	  whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
 // Deleting names from the symbol tables.
