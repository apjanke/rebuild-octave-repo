# HG changeset patch
# User Rik <rik@octave.org>
# Date 1423371339 28800
#      Sat Feb 07 20:55:39 2015 -0800
# Node ID e5facc6eec13db98bf901d9dee1c5fc38e441ea1
# Parent  2099e00b18330eca992ec385757219a04f533a53
Silence warning messages in %!test code.

* ind2rgb.m: Turn off "Octave:ind2rgb:invalid-idx-img" locally.

* condest.m: Turn off "Octave:nearly-singular-matrix" locally.

* logm.m: Turn off "Octave:logm:non-principal" locally.
* polyfit.m: Turn off "Octave:nearly-singular-matrix" locally.

* __printf_assert__.m: Initialize global _assert_printf to empty string to
avoid num-to-str warning later.

* __prog_output_assert__.m: Initialize global _assert_printf to empty string to
avoid num-to-str warning later.
.
* parser.tst: Turn off "Octave:num-to-str" locally.

diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -87,16 +87,17 @@ endfunction
 %!assert (ergb, reshape ([r(:) g(:) b(:)], [size(img) 3]))
 %!test
 %! ## test correction for integers
 %! img = uint8 (img - 1);
 %! [rgb] = ind2rgb (img, map);
 %! assert (ergb, rgb);
 %!test
 %! ## Check that values below lower bound are mapped to first color value
+%! warning ("off", "Octave:ind2rgb:invalid-idx-img", "local");
 %! rgb = ind2rgb ([-1 0 2], gray (64));
 %! assert (rgb(:,1:2,:), zeros (1,2,3));
 %! assert (rgb(:,3,:), 1/63 * ones (1,1,3));
 
 %% Test input validation
 %!error ind2rgb ()
 %!error ind2rgb (1,2,3)
 %!error <X must be an indexed image> ind2rgb (ones (3,3,3), jet (64))
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -228,14 +228,15 @@ endfunction
 %! A = hilb (N);
 %! apply = @(x) A*x; apply_t = @(x) A'*x;
 %! solve = @(x) A\x; solve_t = @(x) A'\x;
 %! cA = condest (apply, apply_t, solve, solve_t, N);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-6);
 
 %!test
+%! warning ("off", "Octave:nearly-singular-matrix", "local");
 %! N = 12;
 %! A = hilb (N);
 %! [rcondA, v] = condest (A);
 %! x = A*v;
 %! assert (norm (x, inf), 0, eps);
 
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -156,17 +156,19 @@ function [x, w] = gauss_legendre (n)
   v = i./sqrt ((2*i).^2-1);
   [V, D] = eig (diag (v, -1) + diag (v, 1));
   x = diag (D);
   w = 2*(V(1,:)'.^2);
 endfunction
 
 
 %!assert (norm (logm ([1 -1;0 1]) - [0 -1; 0 0]) < 1e-5)
-%!assert (norm (expm (logm ([-1 2 ; 4 -1])) - [-1 2 ; 4 -1]) < 1e-5)
+%!test
+%! warning ("off", "Octave:logm:non-principal", "local");
+%! assert (norm (expm (logm ([-1 2 ; 4 -1])) - [-1 2 ; 4 -1]) < 1e-5);
 %!assert (logm ([1 -1 -1;0 1 -1; 0 0 1]), [0 -1 -1.5; 0 0 -1; 0 0 0], 1e-5)
 %!assert (logm (10), log (10))
 %!assert (full (logm (eye (3))), logm (full (eye (3))))
 %!assert (full (logm (10*eye (3))), logm (full (10*eye (3))), 8*eps)
 %!assert (logm (expm ([0 1i; -1i 0])), [0 1i; -1i 0], 10 * eps)
 
 %% Test input validation
 %!error logm ()
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -166,16 +166,17 @@ endfunction
 %!fail ("polyfit (x, x.^2+x+1)")
 %!fail ("polyfit (x, x.^2+x+1, [])")
 
 ## Test difficult case where scaling is really needed. This example
 ## demonstrates the rather poor result which occurs when the dependent
 ## variable is not normalized properly.
 ## Also check the usage of 2nd & 3rd output arguments.
 %!test
+%! warning ("off", "Octave:nearly-singular-matrix", "local");
 %! x = [ -1196.4, -1195.2, -1194, -1192.8, -1191.6, -1190.4, -1189.2, -1188, ...
 %!       -1186.8, -1185.6, -1184.4, -1183.2, -1182];
 %! y = [ 315571.7086, 315575.9618, 315579.4195, 315582.6206, 315585.4966, ...
 %!       315588.3172, 315590.9326, 315593.5934, 315596.0455, 315598.4201, ...
 %!       315600.7143, 315602.9508, 315605.1765 ];
 %! [p1, s1] = polyfit (x, y, 10);
 %! [p2, s2, mu] = polyfit (x, y, 10);
 %! assert (s2.normr < s1.normr);
@@ -183,16 +184,17 @@ endfunction
 %!test
 %! x = 1:4;
 %! p0 = [1i, 0, 2i, 4];
 %! y0 = polyval (p0, x);
 %! p = polyfit (x, y0, numel (p0) - 1);
 %! assert (p, p0, 1000*eps);
 
 %!test
+%! warning ("off", "Octave:nearly-singular-matrix", "local");
 %! x = 1000 + (-5:5);
 %! xn = (x - mean (x)) / std (x);
 %! pn = ones (1,5);
 %! y = polyval (pn, xn);
 %! [p, s, mu] = polyfit (x, y, numel (pn) - 1);
 %! [p2, s2] = polyfit (x, y, numel (pn) - 1);
 %! assert (p, pn, s.normr);
 %! assert (s.yf, y, s.normr);
diff --git a/scripts/testfun/__printf_assert__.m b/scripts/testfun/__printf_assert__.m
--- a/scripts/testfun/__printf_assert__.m
+++ b/scripts/testfun/__printf_assert__.m
@@ -17,16 +17,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __printf_assert__ (@dots{})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function __printf_assert__ (varargin)
-  global _assert_printf;
+  global _assert_printf = "";
   _assert_printf = cat (2, _assert_printf, sprintf (varargin{:}));
 endfunction
 
 
 ## No test coverage for internal function.  It is tested through calling fcn.
 %!assert (1)
 
diff --git a/scripts/testfun/__prog_output_assert__.m b/scripts/testfun/__prog_output_assert__.m
--- a/scripts/testfun/__prog_output_assert__.m
+++ b/scripts/testfun/__prog_output_assert__.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __prog_output_assert__ (@var{str})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function ret = __prog_output_assert__ (str)
-  global _assert_printf;
+  global _assert_printf = "";
   if (isempty (_assert_printf))
     ret = isempty (str);
   elseif (_assert_printf(end) == "\n")
     ret = strcmp (_assert_printf(1:(end-1)), str);
   else
     ret = strcmp (_assert_printf, str);
   endif
   _assert_printf = "";
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -288,16 +288,17 @@
 ## Check that xyz is tagged as a variable in the parser.  Both
 ## expressions must remain on one line for this test to work as
 ## intended.
 %!test
 %! xyz(1) = 1; xyz /= 1;
 %! assert (xyz, 1);
 
 %!test
+%! warning ("off", "Octave:num-to-str", "local");
 %! a = [97 ... % comment
 %!      'b'];
 %! assert (a, 'ab');
 
 ## Check that a cell array containing function handles is parsed
 ## correctly with or without commas.
 %!test
 %! a = {1, @sin, 2, @cos};
