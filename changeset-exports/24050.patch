# HG changeset patch
# User Nicholas R. Jankowski <jankowskin@asme.org>
# Date 1504116379 14400
#      Wed Aug 30 14:06:19 2017 -0400
# Node ID a03bb64031da9b6496b21ee338210eb74f46c552
# Parent  6782105f18206ac96d0cff2b5b68d9460abe0559
Implement missing axis tick and label functions (bug #51839).

* /scripts/plot/appearance/xticks.m, yticks.m, zticks.m, rticks.m,
thetaticks.m, xticklabels.m, yticklabels.m, zticklabels.m:
new function m-files.

* /scripts/plot/appearance/module.mk: Add new files to
scripts_general_FCN_FILES list.

* plot.txi: Add docstring references to manual.

* NEWS: Announce new functions.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -45,16 +45,24 @@ Summary of important user-visible change
 
       corrcoef
       getframe
       gsvd
       hgtransform
       humps
       openvar
       repelem
+      rticks
+      thetaticks
+      xticklabels
+      xticks
+      yticklabels
+      yticks
+      zticklabels
+      zticks
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.4 and will
     be removed from Octave 4.8 (or whatever version is the second major
     release after 4.4):
 
       Function             | Replacement
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -278,16 +278,46 @@ get or set individual axis limits.  Each
 
 @c Add cross-references and function index entries for other limit functions.
 @anchor{XREFylim}
 @anchor{XREFzlim}
 @findex ylim
 @findex zlim
 @DOCSTRING(xlim)
 
+The @code{xticks}, @code{yticks}, @code{zticks}, @code{rticks}, and
+@code{thetaticks} functions may be used to get or set the tick mark locations
+and modes on the respective axis.  Each has the same form, although mode 
+options are not currently avaliable for @code{rticks}, and @code{thetaticks}. 
+
+@c FIXME: Update this section if polarplot and polar axes changes change the
+@c        associated axis properties.
+@anchor{XREFyticks}
+@anchor{XREFzticks}
+@anchor{XREFrticks}
+@anchor{XREFthetaticks}
+@findex yticks
+@findex zticks
+@findex rticks
+@findex thetaticks
+@DOCSTRING(xticks)
+
+The @code{xticklabels}, @code{yticklabels}, and @code{zticklabels} functions
+may be used to get or set the label assigned to each tick location and the
+labeling mode on the respective axis.  Each has the same form. 
+
+@c FIXME: Update this section if polarplot and polar axes changes change the
+@c        associated axis properties.
+@c        Matlab also implements rticklabels and thetaticklabels.
+@anchor{XREFyticklabels}
+@anchor{XREFzticklabels}
+@findex yticklabels
+@findex zticklabels
+@DOCSTRING(xticklabels)
+
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 @cindex plotting, two-dimensional functions
 
 Octave can plot a function from a function handle, inline function, or
 string defining the function without the user needing to explicitly
 create the data to be plotted.  The function @code{fplot} also generates
 two-dimensional plots with linear axes using a function name and limits
diff --git a/scripts/plot/appearance/module.mk b/scripts/plot/appearance/module.mk
--- a/scripts/plot/appearance/module.mk
+++ b/scripts/plot/appearance/module.mk
@@ -20,28 +20,37 @@ FCN_FILE_DIRS += \
   %reldir%/grid.m \
   %reldir%/gtext.m \
   %reldir%/hidden.m \
   %reldir%/legend.m \
   %reldir%/lighting.m \
   %reldir%/material.m \
   %reldir%/orient.m \
   %reldir%/pbaspect.m \
+  %reldir%/rticks.m \
   %reldir%/shading.m \
   %reldir%/specular.m \
   %reldir%/text.m \
+  %reldir%/thetaticks.m \
   %reldir%/title.m \
   %reldir%/view.m \
   %reldir%/whitebg.m \
   %reldir%/xlabel.m \
   %reldir%/xlim.m \
+  %reldir%/xticks.m \
+  %reldir%/xticklabels.m \
   %reldir%/ylabel.m \
   %reldir%/ylim.m \
+  %reldir%/yticks.m \
+  %reldir%/yticklabels.m \
   %reldir%/zlabel.m \
-  %reldir%/zlim.m
+  %reldir%/zlim.m \
+  %reldir%/zticks.m \
+  %reldir%/zticklabels.m
+  
 
 %canon_reldir%dir = $(fcnfiledir)/plot/appearance
 
 %canon_reldir%_DATA = $(%canon_reldir%_FCN_FILES)
 
 %canon_reldir%_privatedir = $(fcnfiledir)/plot/appearance/private
 
 %canon_reldir%_private_DATA = $(%canon_reldir%_PRIVATE_FCN_FILES)
diff --git a/scripts/plot/appearance/rticks.m b/scripts/plot/appearance/rticks.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/rticks.m
@@ -0,0 +1,140 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} rticks
+## @deftypefnx {} rticks (@var{tickval})
+## @deftypefnx {} {@dots{} =} rticks (@var{hax}, @dots{})
+## Query or set the tick values on the r-axis of the current axis.
+##
+## When called without argument, return the current tick locations as specified
+## in the @qcode{"rtick"} axes property.  These locations can be changed by
+## calling @code{rticks} with a vector of tick values.  Note: ascending order
+## is not required.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{rticks} to set a property value
+## will result in an error.
+##
+## NOTE: Octave does not currently implement polaraxes objects.  It is
+## therefore not possible to query or set a @qcode{"mode"} for the
+## @qcode{"rtick"} property as can be done with the equivalent functions for
+## @var{x}, @var{y}, and @var{z} axes.
+##
+## @seealso{thetaticks, xticks, yticks, zticks, polar, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = rticks (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca (), "rtick");  # will error if no rtick exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "rtick");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("rticks: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (isnumeric (arg))
+    if (nargout > 0)
+      error ("rticks: too many output arguments requested");
+    endif
+    ## NOTE: Matlab errors if tick points are not in ascending order.  Octave
+    ## permits out of order tick points, so no error is produced.
+    set (hax, "rtick", arg);
+
+  elseif (ischar (arg))
+    error ("rticks: MODE is not yet implemented for the rtick property");
+
+    ## FIXME: Enable mode args if/when they are available in polar/polarplot
+    ## arg = tolower (arg);
+    ## switch (arg)
+    ##   case "mode"
+    ##     retval = get (hax, "rtickmode");
+    ##
+    ##   case {"auto", "manual"}
+    ##     if (nargout > 0)
+    ##       error (["rticks: " ...
+    ##               "too many output arguments requested for arg: ", arg]);
+    ##     endif
+    ##     set (hax, "rtickmode", arg);
+    ##
+    ##   otherwise
+    ##     error ("rticks: invalid option: %s", arg);
+    ##
+    ## endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   polar (linspace (0, pi, 20), rand (20,1));
+%!   hax = gca;
+%!   ticks = rticks;
+%!   assert (rticks (hax), ticks);
+%!   rticks (hax, [0 0.25 0.75 1 2]);
+%!   assert (rticks (hax), [0 0.25 0.75 1 2]);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error rticks (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   polar (linspace (0, pi, 20), 1:20);
+%!   hax = gca;
+%!   fail ("rticks (-1, [0 1])", "HAX must be a handle to an axes");
+%!   fail ("tmp = rticks (hax, [0 1])", "too many output arguments");
+%!   fail ("tmp = rticks (hax, 'mode')", "MODE is not yet implemented");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/thetaticks.m b/scripts/plot/appearance/thetaticks.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/thetaticks.m
@@ -0,0 +1,144 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} thetaticks
+## @deftypefnx {} thetaticks (@var{tickval})
+## @deftypefnx {} {@dots{} =} thetaticks (@var{hax}, @dots{})
+## Query or set the tick values on the theta-axis of the current axis.
+##
+## When called without argument, return the current tick locations as specified
+## in the @qcode{"ttick"} axes property.  These locations can be changed by
+## calling @code{thetaticks} with a vector of tick values.  Note: ascending
+## order is not required.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{thetaticks} to set a property
+## value will result in an error.
+##
+## NOTE: Octave does not currently implement polaraxes objects.  It is
+## therefore not possible to query or set a @qcode{"mode"} for the
+## @qcode{"thetatick"} property as can be done with the equivalent functions
+## for @var{x}, @var{y}, and @var{z} axes.
+##
+## @seealso{rticks, xticks, yticks, zticks, polar, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = thetaticks (varargin)
+
+  ## FIXME: Update function to work with polaraxes objects once that function
+  ##        is implemented in Octave.  For compatibility with Matlab this may
+  ##        need to function with both the property names ttick and thetatick.
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "ttick");  # will error if no ttick exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "ttick");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! ishandle (varargin{1}))
+        error ("thetaticks: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (isnumeric (arg))
+    if (nargout > 0)
+      error ("thetaticks: too many output arguments requested");
+    endif
+    ## NOTE: Matlab errors if tick points are not in ascending order.  Octave
+    ## permits out of order tick points, so error is not produced.
+    set (hax, "ttick", arg);
+
+  elseif (ischar (arg))
+    error ("thetaticks: MODE is not yet implemented for the ttick property");
+
+    ## FIXME: Enable mode args if/when they are available in polar/polarplot
+    ##    arg = tolower (arg);
+    ## switch (arg)
+    ##   case "mode"
+    ##     retval = get (hax, "ttickmode");
+    ##
+    ##   case {"auto", "manual"}
+    ##     if (nargout > 0)
+    ##       error (["thetaticks: " ...
+    ##               "too many output arguments requested for arg: ", arg]);
+    ##     endif
+    ##     set (hax, "ttickmode", arg);
+    ##
+    ##   otherwise
+    ##     error ("thetaticks: invalid option: %s", arg);
+    ##
+    ## endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%! polar (linspace (0, pi, 20), rand (20,1));
+%!   hax = gca;
+%!   ticks = thetaticks;
+%!   assert (thetaticks (hax), ticks);
+%!   thetaticks (hax, [0 45 90 135 180]);
+%!   assert (thetaticks (hax), [0 45 90 135 180]);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error thetaticks (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   polar (linspace (0, pi, 20), 1:20);
+%!   hax = gca;
+%!   fail ("thetaticks (-1, [0 1])", "HAX must be a handle to an axes");
+%!   fail ("tmp = thetaticks (hax, [0 1])", "too many output arguments");
+%!   fail ("tmp = thetaticks (hax, 'mode')", "MODE is not yet implemented");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/xticklabels.m b/scripts/plot/appearance/xticklabels.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/xticklabels.m
@@ -0,0 +1,171 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} xticklabels
+## @deftypefnx {} {@var{mode} =} xticklabels ("mode")
+## @deftypefnx {} xticklabels (@var{tickval})
+## @deftypefnx {} xticklabels ("auto")
+## @deftypefnx {} xticklabels ("manual")
+## @deftypefnx {} {@dots{} =} xticklabels (@var{hax}, @dots{})
+## Query or set the tick labels on the x-axis of the current axis.
+##
+## When called without an argument, return a cell array of strings of the
+## current tick labels as specified in the @qcode{"xticklabel"} axes property.
+## These labels can be changed by calling @code{xticklabels} with a cell array
+## of strings.  Note: a vector of numbers will be mapped to a cell array of
+## strings.  If fewer labels are specified than the current number of ticks,
+## blank labels will be appended to the array.
+##
+## When called with argument @qcode{"mode"}, @code{xticklabels} returns the
+## current value of the axes property @qcode{"xticklabelmode"}.  This property
+## can be changed by calling @code{xticklabels} with either @qcode{"auto"}
+## (algorithm determines tick labels) or @qcode{"manual"} (tick labels remain
+## fixed).  Note: Specifying xticklabel values will also set the
+## @qcode{"xticklabelmode"} and @qcode{"xticks"} properties to
+## @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{xticklabels} to set a property
+## value will result in an error.
+##
+## @seealso{xticks, yticklabels, zticklabels, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = xticklabels (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "xticklabel");  # will error if no xticklabel exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "xticklabel");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("xticklabels: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (iscell (arg) || isnumeric (arg))
+    if (nargout > 0)
+      error ("xticklabels: too many output arguments requested");
+    endif
+
+    if (isnumeric (arg))
+      ## NOTE: Matlab accepts a cell array, but a non-vector numeric array will
+      ## simply produce a black set of labels without error or warning.
+      ## This implementation allows for a numeric array, which is handled in
+      ## the same order as Matlab handles a cell array
+      arg = num2cell (arg(:));
+
+    endif
+
+    ## Convert any numeric elements to characters, make it a 1D cell array.
+    arg = cellfun (@num2str, arg, "UniformOutput", false)(:);
+
+    ## Pad with blank cell entries if needed.
+    arg((numel (arg) + 1):(numel (get (hax, "xtick")))) = {""};
+
+    ## Setting labels sets both ticklabel and tick mode to manual.
+    set (hax, "xticklabel", arg,
+              "xticklabelmode", "manual",
+              "xtickmode", "manual");
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "xticklabelmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error (["xticklabels: " ...
+                  "too many output arguments requested for arg: ", arg]);
+        endif
+        set (hax, "xticklabelmode", arg);
+
+      otherwise
+        error ("xticklabels: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "xticklabelmode", "auto");
+%!   hax = gca;
+%!   vals1 = xticklabels;
+%!   assert (xticklabels (hax), vals1);
+%!   mode1 = xticklabels ("mode");
+%!   assert (xticklabels (hax, "mode"), mode1);
+%!   xticklabels (hax, "manual");
+%!   assert (xticklabels (hax, "mode"), "manual");
+%!   xticklabels (hax, "auto");
+%!   assert (xticks (hax, "mode"), "auto");
+%!   xticklabels (hax, {"1", "2", "3", "4", "5", "6"});
+%!   assert (xticklabels (hax), {"1"; "2"; "3"; "4"; "5"; "6"});
+%!   assert (xticklabels (hax, "mode"), "manual");
+%!   assert (xticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error xticklabels (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("xticklabels (-1, {})", "HAX must be a handle to an axes");
+%!   fail ("tmp = xticklabels (hax, {'A','B'})", "too many output arguments");
+%!   fail ("tmp = xticklabels (hax, [0, 1])", "too many output arguments");
+%!   fail ("tmp = xticklabels (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = xticklabels (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/xticks.m b/scripts/plot/appearance/xticks.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/xticks.m
@@ -0,0 +1,149 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} xticks
+## @deftypefnx {} {@var{mode} =} xticks ("mode")
+## @deftypefnx {} xticks (@var{tickval})
+## @deftypefnx {} xticks ("auto")
+## @deftypefnx {} xticks ("manual")
+## @deftypefnx {} {@dots{} =} xticks (@var{hax}, @dots{})
+## Query or set the tick values on the x-axis of the current axis.
+##
+## When called without an argument, return the current tick locations as
+## specified in the @qcode{"xtick"} axes property.  These locations can be
+## changed by calling @code{xticks} with a vector of tick values.  Note:
+## ascending order is not required.
+##
+## When called with argument @qcode{"mode"}, @code{xticks} returns the current
+## value of the axes property @qcode{"xtickmode"}.  This property can be
+## changed by calling @code{xticks} with either @qcode{"auto"} (algorithm
+## determines tick positions) or @qcode{"manual"} (tick values remain fixed
+## regardless of axes resizing or rotation).  Note: Specifying xtick values
+## will also set the property @qcode{"xtickmode"} to @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{xticks} to set a property value
+## will result in an error.
+##
+## @seealso{xticklabels, yticks, zticks, rticks, thetaticks, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = xticks (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca, "xtick");  # will error if no xtick exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "xtick");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("xticks: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (isnumeric (arg))
+    if (nargout > 0)
+      error ("xticks: too many output arguments requested");
+    endif
+    ## NOTE: Matlab errors if tick points are not in ascending order. Octave
+    ## permits out of order tick points, so error is not produced.
+    set (hax, "xtick", arg);
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "xtickmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error ("xticks: too many output arguments requested for arg: %s",
+                                                                       arg);
+        endif
+        set (hax, "xtickmode", arg);
+
+      otherwise
+        error ("xticks: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "xtickmode", "auto");
+%!   hax = gca;
+%!   vals1 = xticks;
+%!   assert (xticks (hax), vals1);
+%!   mode1 = xticks ("mode");
+%!   assert (xticks (hax, "mode"), mode1);
+%!   xticks (hax, "manual");
+%!   assert (xticks (hax, "mode"), "manual");
+%!   xticks (hax, "auto");
+%!   assert (xticks (hax, "mode"), "auto");
+%!   xticks (hax, [1 2 3 4]);
+%!   assert (xticks (hax), [1 2 3 4]);
+%!   assert (xticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error xticks (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("xticks (-1, [0 1])", "HAX must be a handle to an axes");
+%!   fail ("tmp = xticks (hax, [0 1])", "too many output arguments");
+%!   fail ("tmp = xticks (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = xticks (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/yticklabels.m b/scripts/plot/appearance/yticklabels.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/yticklabels.m
@@ -0,0 +1,171 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} yticklabels
+## @deftypefnx {} {@var{mode} =} yticklabels ("mode")
+## @deftypefnx {} yticklabels (@var{tickval})
+## @deftypefnx {} yticklabels ("auto")
+## @deftypefnx {} yticklabels ("manual")
+## @deftypefnx {} {@dots{} =} yticklabels (@var{hax}, @dots{})
+## Query or set the tick labels on the x-axis of the current axis.
+##
+## When called without an argument, return a cell array of strings of the
+## current tick labels as specified in the @qcode{"yticklabel"} axes property.
+## These labels can be changed by calling @code{yticklabels} with a cell array
+## of strings.  Note: a vector of numbers will be mapped to a cell array of
+## strings.  If fewer labels are specified than the current number of ticks,
+## blank labels will be appended to the array.
+##
+## When called with argument @qcode{"mode"}, @code{yticklabels} returns the
+## current value of the axes property @qcode{"yticklabelmode"}.  This property
+## can be changed by calling @code{yticklabels} with either @qcode{"auto"}
+## (algorithm determines tick labels) or @qcode{"manual"} (tick labels remain
+## fixed).  Note: Specifying yticklabel values will also set the
+## @qcode{"yticklabelmode"} and @qcode{"yticks"} properties to
+## @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{xticklabels} to set a property
+## value will result in an error.
+##
+## @seealso{yticks, xticklabels, zticklabels, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = yticklabels (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "yticklabel"); # will error if no yticklabel exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "yticklabel");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("yticklabels: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (iscell (arg) || isnumeric (arg))
+    if (nargout > 0)
+      error ("yticklabels: too many output arguments requested");
+    endif
+
+    if (isnumeric (arg))
+      ## NOTE: Matlab accepts a cell array, but a non-vector numeric array will
+      ## simply produce a black set of labels without error or warning.
+      ## This implementation allows for a numeric array, which is handled in
+      ## the same order as Matlab handles a cell array
+      arg = num2cell (arg(:));
+
+    endif
+
+    ## Convert any numeric elements to characters, make it a 1D cell array.
+    arg = cellfun (@num2str, arg, "UniformOutput", false)(:);
+
+    ## Pad with blank cell entries if needed.
+    arg((numel (arg) + 1):(numel (get (hax, "ytick")))) = {""};
+
+    ## Setting labels sets both ticklabel and tick mode to manual.
+    set (hax, "yticklabel", arg,
+              "yticklabelmode", "manual",
+              "ytickmode", "manual");
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "yticklabelmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error (["yticklabels: " ...
+                  "too many output arguments requested for arg: ", arg]);
+        endif
+        set (hax, "yticklabelmode", arg);
+
+      otherwise
+        error ("yticklabels: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "yticklabelmode", "auto");
+%!   hax = gca;
+%!   vals1 = yticklabels;
+%!   assert (yticklabels (hax), vals1);
+%!   mode1 = yticklabels ("mode");
+%!   assert (yticklabels (hax, "mode"), mode1);
+%!   yticklabels (hax, "manual");
+%!   assert (yticklabels (hax, "mode"), "manual");
+%!   yticklabels (hax, "auto");
+%!   assert (yticks (hax, "mode"), "auto");
+%!   yticklabels (hax, {"1", "2", "3", "4", "5", "6"});
+%!   assert (yticklabels (hax), {"1"; "2"; "3"; "4"; "5"; "6"});
+%!   assert (yticklabels (hax, "mode"), "manual");
+%!   assert (yticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error yticklabels (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("yticklabels (-1, {})", "HAX must be a handle to an axes");
+%!   fail ("tmp = yticklabels (hax, {'A','B'})", "too many output arguments");
+%!   fail ("tmp = yticklabels (hax, [0, 1])", "too many output arguments");
+%!   fail ("tmp = yticklabels (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = yticklabels (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/yticks.m b/scripts/plot/appearance/yticks.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/yticks.m
@@ -0,0 +1,151 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} yticks
+## @deftypefnx {} {@var{mode} =} yticks ("mode")
+## @deftypefnx {} yticks (@var{tickval})
+## @deftypefnx {} yticks ("auto")
+## @deftypefnx {} yticks ("manual")
+## @deftypefnx {} {@dots{} =} yticks (@var{hax}, @dots{})
+## Query or set the tick values on the y-axis of the current axis.
+##
+## When called without an argument, return the current tick locations as
+## specified in the @qcode{"ytick"} axes property.  These locations can be
+## changed by calling @code{yticks} with a vector of tick values.  Note:
+## ascending order is not required.
+##
+## When called with argument @qcode{"mode"}, @code{yticks} returns the current
+## value of the axes property @qcode{"ytickmode"}.  This property can be
+## changed by calling @code{yticks} with either @qcode{"auto"} (algorithm
+## determines tick positions) or @qcode{"manual"} (tick values remain fixed
+## regardless of axes resizing or rotation).  Note: Specifying ytick values
+## will also set the property @qcode{"ytickmode"} to @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{yticks} to set a property value
+## will result in an error.
+##
+## @seealso{yticklabels, xticks, zticks, rticks, thetaticks, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = yticks (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "ytick");  # will error if no ytick exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "ytick");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("yticks: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (isnumeric (arg))
+    if (nargout > 0)
+      error ("yticks: too many output arguments requested");
+    else
+     ## NOTE: Matlab errors if tick points are not in ascending order. Octave
+     ## permits out of order tick points, so error is not produced.
+     set (hax, "ytick", arg);
+
+    endif
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "ytickmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error ("yticks: too many output arguments requested for arg: %s",
+                                                                       arg);
+        endif
+        set (hax, "ytickmode", arg);
+
+      otherwise
+        error ("yticks: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "ytickmode", "auto");
+%!   hax = gca;
+%!   vals1 = yticks;
+%!   assert (yticks (hax), vals1);
+%!   mode1 = yticks ("mode");
+%!   assert (yticks (hax, "mode"), mode1);
+%!   yticks (hax, "manual");
+%!   assert (yticks (hax, "mode"), "manual");
+%!   yticks (hax, "auto");
+%!   assert (yticks (hax, "mode"), "auto");
+%!   yticks (hax, [1 2 3 4]);
+%!   assert (yticks (hax), [1 2 3 4]);
+%!   assert (yticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error yticks (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("yticks (-1, [0 1])", "HAX must be a handle to an axes");
+%!   fail ("tmp = yticks (hax, [0 1])", "too many output arguments");
+%!   fail ("tmp = yticks (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = yticks (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/zticklabels.m b/scripts/plot/appearance/zticklabels.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/zticklabels.m
@@ -0,0 +1,171 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} zticklabels
+## @deftypefnx {} {@var{mode} =} zticklabels ("mode")
+## @deftypefnx {} zticklabels (@var{tickval})
+## @deftypefnx {} zticklabels ("auto")
+## @deftypefnx {} zticklabels ("manual")
+## @deftypefnx {} {@dots{} =} zticklabels (@var{hax}, @dots{})
+## Query or set the tick labels on the x-axis of the current axis.
+##
+## When called without an argument, return a cell array of strings of the
+## current tick labels as specified in the @qcode{"zticklabel"} axes property.
+## These labels can be changed by calling @code{zticklabels} with a cell array
+## of strings.  Note: a vector of numbers will be mapped to a cell array of
+## strings.  If fewer labels are specified than the current number of ticks,
+## blank labels will be appended to the array.
+##
+## When called with argument @qcode{"mode"}, @code{zticklabels} returns the
+## current value of the axes property @qcode{"zticklabelmode"}.  This property
+## can be changed by calling @code{zticklabels} with either @qcode{"auto"}
+## (algorithm determines tick labels) or @qcode{"manual"} (tick labels remain
+## fixed).  Note: Specifying zticklabel values will also set the
+## @qcode{"zticklabelmode"} and @qcode{"zticks"} properties to
+## @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{xticklabels} to set a property
+## value will result in an error.
+##
+## @seealso{zticks, xticklabels, zticklabels, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = zticklabels (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "zticklabel"); # will error if no zticklabel exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "zticklabel");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("zticklabels: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage;
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (iscell (arg) || isnumeric (arg))
+    if (nargout > 0)
+      error ("zticklabels: too many output arguments requested");
+    endif
+
+    if (isnumeric (arg))
+      ## NOTE: Matlab accepts a cell array, but a non-vector numeric array will
+      ## simply produce a black set of labels without error or warning.
+      ## This implementation allows for a numeric array, which is handled in
+      ## the same order as Matlab handles a cell array
+      arg = num2cell (arg(:));
+
+    endif
+
+    ## Convert any numeric elements to characters, make it a 1D cell array.
+    arg = cellfun (@num2str, arg, "UniformOutput", false)(:);
+
+    ## Pad with blank cell entries if needed.
+    arg((numel (arg) + 1):(numel (get (hax, "ztick")))) = {""};
+
+    ## Setting labels sets both ticklabel and tick mode to manual.
+    set (hax, "zticklabel", arg,
+              "zticklabelmode", "manual",
+              "ztickmode", "manual");
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "zticklabelmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error (["zticklabels: " ...
+                  "too many output arguments requested for arg: ", arg]);
+        endif
+        set (hax, "zticklabelmode", arg);
+
+      otherwise
+        error ("zticklabels: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage;
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "zticklabelmode", "auto");
+%!   hax = gca;
+%!   vals1 = zticklabels;
+%!   assert (zticklabels (hax), vals1);
+%!   mode1 = zticklabels ("mode");
+%!   assert (zticklabels (hax, "mode"), mode1);
+%!   zticklabels (hax, "manual");
+%!   assert (zticklabels (hax, "mode"), "manual");
+%!   zticklabels (hax, "auto");
+%!   assert (zticks (hax, "mode"), "auto");
+%!   zticklabels (hax, {"1", "2", "3", "4", "5", "6"});
+%!   assert (zticklabels (hax), {"1"; "2"; "3"; "4"; "5"; "6"});
+%!   assert (zticklabels (hax, "mode"), "manual");
+%!   assert (zticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error zticklabels (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("zticklabels (-1, {})", "HAX must be a handle to an axes");
+%!   fail ("tmp = zticklabels (hax, {'A','B'})", "too many output arguments");
+%!   fail ("tmp = zticklabels (hax, [0, 1])", "too many output arguments");
+%!   fail ("tmp = zticklabels (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = zticklabels (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/scripts/plot/appearance/zticks.m b/scripts/plot/appearance/zticks.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/appearance/zticks.m
@@ -0,0 +1,149 @@
+## Copyright (C) 2017 Nicholas Jankowski
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{tickval} =} zticks
+## @deftypefnx {} {@var{mode} =} zticks ("mode")
+## @deftypefnx {} zticks (@var{tickval})
+## @deftypefnx {} zticks ("auto")
+## @deftypefnx {} zticks ("manual")
+## @deftypefnx {} {@dots{} =} zticks (@var{hax}, @dots{})
+## Query or set the tick values on the z-axis of the current axis.
+##
+## When called without an argument, return the current tick locations as
+## specified in the @qcode{"ztick"} axes property.  These locations can be
+## changed by calling @code{zticks} with a vector of tick values.  Note:
+## ascending order is not required.
+##
+## When called with argument @qcode{"mode"}, @code{zticks} returns the current
+## value of the axes property @qcode{"ztickmode"}.  This property can be
+## changed by calling @code{zticks} with either @qcode{"auto"} (algorithm
+## determines tick positions) or @qcode{"manual"} (tick values remain fixed
+## regardless of axes resizing or rotation).  Note: Specifying ztick values
+## will also set the property @qcode{"ztickmode"} to @qcode{"manual"}.
+##
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
+##
+## Requesting a return value when calling @code{zticks} to set a property value
+## will result in an error.
+##
+## @seealso{zticklabels, xticks, yticks, rticks, thetaticks, get, set}
+## @end deftypefn
+
+## Author: Nicholas Jankowski <jankowskin@asme.org>
+## Created: 2017-08-24
+
+function retval = zticks (varargin)
+
+  hax = [];
+  switch (nargin)
+    case 0
+      retval = get (gca , "ztick");  # will error if no ztick exists.
+      return;
+
+    case 1
+      if (isaxes (varargin{1}))
+        retval = get (varargin{1}, "ztick");
+        return;
+      else
+        arg = varargin{1};     
+      endif
+
+    case 2
+      if (! isaxes (varargin{1}))
+        error ("zticks: HAX must be a handle to an axes object");
+      endif
+      hax = varargin{1};
+      arg = varargin{2};
+
+    otherwise
+      print_usage ();
+
+  endswitch
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  if (isnumeric (arg))
+    if (nargout > 0)
+      error ("zticks: too many output arguments requested");
+    endif
+    ## NOTE: Matlab errors if tick points are not in ascending order. Octave
+    ## permits out of order tick points, so error is not produced.
+    set (hax, "ztick", arg);
+
+  elseif (ischar (arg))
+    arg = tolower (arg);
+    switch (arg)
+      case "mode"
+        retval = get (hax, "ztickmode");
+
+      case {"auto", "manual"}
+        if (nargout > 0)
+          error ("zticks: too many output arguments requested for arg: %s",
+                                                                       arg);
+        endif
+        set (hax, "ztickmode", arg);
+
+      otherwise
+        error ("zticks: invalid option: %s", arg);
+
+    endswitch
+
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   set (gca, "ztickmode", "auto");
+%!   hax = gca;
+%!   vals1 = zticks;
+%!   assert (zticks (hax), vals1);
+%!   mode1 = zticks ("mode");
+%!   assert (zticks (hax, "mode"), mode1);
+%!   zticks (hax, "manual");
+%!   assert (zticks (hax, "mode"), "manual");
+%!   zticks (hax, "auto");
+%!   assert (zticks (hax, "mode"), "auto");
+%!   zticks (hax, [1 2 3 4]);
+%!   assert (zticks (hax), [1 2 3 4]);
+%!   assert (zticks (hax, "mode"), "manual");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+## Test input validation
+%!error zticks (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = gca;
+%!   fail ("zticks (-1, [0 1])", "HAX must be a handle to an axes");
+%!   fail ("tmp = zticks (hax, [0 1])", "too many output arguments");
+%!   fail ("tmp = zticks (hax, 'auto')", "too many .* for arg: auto");
+%!   fail ("tmp = zticks (hax, 'foo')", "invalid option: foo");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
