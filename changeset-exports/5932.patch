# HG changeset patch
# User jwe
# Date 1155711323 0
#      Wed Aug 16 06:55:23 2006 +0000
# Node ID 51cbaa2539f4667247ee51e1e4d79f87d96caae5
# Parent  25da9a7d5f6d72aa9f068e5647606d93719e6be1
[project @ 2006-08-16 06:55:23 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-08-16  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (gobble_leading_white_space): New arg, SKIP_CODE.
+	Change all uses.
+
 2006-08-15  John W. Eaton  <jwe@octave.org>
 
 	* help.cc (help_from_file): Call get_help_from_file with new file
 	arg.  Print file info here.
 
 	* parse.y (get_help_from_file): Delete include_file_info arg.
 	Provide two versions, one that returns the file found in a
 	reference arg and one that does not.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2998,24 +2998,38 @@ text_getc (FILE *f)
 }
 
 // Eat whitespace and comments from FFILE, returning the text of the
 // comments read if it doesn't look like a copyright notice.  If
 // IN_PARTS, consider each block of comments separately; otherwise,
 // grab them all at once.  If UPDATE_POS is TRUE, line and column
 // number information is updated.  If SAVE_COPYRIGHT is TRUE, then
 // comments that are recognized as a copyright notice are saved in the
-// comment buffer.
+// comment buffer.  If SKIP_CODE is TRUE, then ignore code, otherwise
+// stop at the first non-whitespace character that is not part of a
+// comment.
+
+// FIXME -- skipping code will fail for something like this:
+//
+//   function foo (x)
+//     fprintf ('%d\n', x);
+//
+//   % This is the help for foo.
+//
+// because we recognize the '%' in the fprintf format as a comment
+// character.  Fixing this will probably require actually parsing the
+// file properly.
 
 // FIXME -- grab_help_text() in lex.l duplicates some of this
 // code!
 
 static std::string
 gobble_leading_white_space (FILE *ffile, bool in_parts,
-			    bool update_pos, bool save_copyright)
+			    bool update_pos, bool save_copyright,
+			    bool skip_code)
 {
   std::string help_txt;
 
   // TRUE means we have already seen the first block of comments.
   bool first_comments_seen = false;
 
   // TRUE means we are at the beginning of a comment block.
   bool begin_comment = false;
@@ -3106,20 +3120,25 @@ gobble_leading_white_space (FILE *ffile,
 	      if (update_pos)
 		{
 		  input_line_number++;
 		  current_input_column = 0;
 		}
 	      continue;
 
 	    default:
-	      if (update_pos)
-		current_input_column--;
-	      ungetc (c, ffile);
-	      goto done;
+	      if (skip_code)
+		continue;
+	      else
+		{
+		  if (update_pos)
+		    current_input_column--;
+		  ungetc (c, ffile);
+		  goto done;
+		}
 	    }
 	}
     }
 
  done:
 
   if (! help_txt.empty ())
     {
@@ -3127,18 +3146,18 @@ gobble_leading_white_space (FILE *ffile,
 	{
 	  if (save_copyright)
 	    octave_comment_buffer::append (help_txt);
 
 	  help_txt.resize (0);
 	}
 
       if (in_parts && help_txt.empty ())
-	help_txt = gobble_leading_white_space (ffile, in_parts,
-					       update_pos, false);
+	help_txt = gobble_leading_white_space (ffile, in_parts, update_pos,
+					       false, skip_code);
     }
 
   return help_txt;
 }
 
 std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
 		    std::string& file)
@@ -3152,17 +3171,17 @@ get_help_from_file (const std::string& n
       symbol_found = true;
 
       FILE *fptr = fopen (file.c_str (), "r");
 
       if (fptr)
 	{
 	  unwind_protect::add (safe_fclose, fptr);
 
-	  retval = gobble_leading_white_space (fptr, true, true, false);
+	  retval = gobble_leading_white_space (fptr, true, true, false, true);
 
 	  unwind_protect::run ();
 	}
     }
 
   return retval;
 }
 
@@ -3175,17 +3194,17 @@ get_help_from_file (const std::string& n
 
 static int
 is_function_file (FILE *ffile)
 {
   int status = 0;
 
   long pos = ftell (ffile);
 
-  gobble_leading_white_space (ffile, false, false, false);
+  gobble_leading_white_space (ffile, false, false, false, false);
 
   char buf [10];
   fgets (buf, 10, ffile);
   int len = strlen (buf);
   if (len > 8 && strncmp (buf, "function", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = 1;
 
@@ -3275,24 +3294,24 @@ parse_fcn_file (const std::string& ff, b
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  reset_parser ();
 
 	  std::string txt
-	    = gobble_leading_white_space (ffile, true, true, true);
+	    = gobble_leading_white_space (ffile, true, true, true, false);
 
 	  help_buf.push (txt);
 
 	  octave_comment_buffer::append (txt);
 
 	  // FIXME -- this should not be necessary.
-	  gobble_leading_white_space (ffile, false, true, false);
+	  gobble_leading_white_space (ffile, false, true, false, false);
 
 	  int status = yyparse ();
 
 	  if (status != 0)
 	    {
 	      error ("parse error while reading function file %s",
 		     ff.c_str ());
 	      fbi_sym_tab->clear (curr_fcn_file_name);
