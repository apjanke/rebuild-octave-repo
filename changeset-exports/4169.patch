# HG changeset patch
# User jwe
# Date 1037070822 0
#      Tue Nov 12 03:13:42 2002 +0000
# Node ID d5667eaf8859bd11fcb117c4a48d4c11b9d55298
# Parent  20e64188361047423b8c23d4e84649560b9af3dd
[project @ 2002-11-12 03:13:42 by jwe]

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -13,17 +13,17 @@ will work for real and complex scalar or
 * Complex Arithmetic::          
 * Trigonometry::                
 * Sums and Products::           
 * Special Functions::           
 * Coordinate Transformations::
 * Mathematical Constants::      
 @end menu
 
-@node Utility Functions, Complex Arithmetic, Arithmetic, Arithmetic
+@node Utility Functions
 @section Utility Functions
 
 The following functions are available for working with complex numbers.
 Each expects a single argument.  They are called @dfn{mapping functions}
 because when given a matrix argument, they apply the given function to
 each element of the matrix.
 
 @DOCSTRING(ceil)
@@ -57,17 +57,17 @@ each element of the matrix.
 @DOCSTRING(rem)
 
 @DOCSTRING(round)
 
 @DOCSTRING(sign)
 
 @DOCSTRING(sqrt)
 
-@node Complex Arithmetic, Trigonometry, Utility Functions, Arithmetic
+@node Complex Arithmetic
 @section Complex Arithmetic
 
 The following functions are available for working with complex
 numbers.  Each expects a single argument.  Given a matrix they work on
 an element by element basis.  In the descriptions of the following
 functions,
 @iftex
 @tex
@@ -85,17 +85,17 @@ defined as @code{sqrt (-1)}.
 @DOCSTRING(arg)
 
 @DOCSTRING(conj)
 
 @DOCSTRING(imag)
 
 @DOCSTRING(real)
 
-@node Trigonometry, Sums and Products, Complex Arithmetic, Arithmetic
+@node Trigonometry
 @section Trigonometry
 
 Octave provides the following trigonometric functions.  Angles are
 specified in radians.  To convert from degrees to radians multipy by
 @iftex
 @tex
 $\pi/180$
 @end tex
@@ -142,30 +142,30 @@ sin ([1, 2; 3, 4])
      @result{}  0.84147   0.90930
          0.14112  -0.75680
 @end group
 @end example
 
 @DOCSTRING(atan2)
 
 
-@node Sums and Products, Special Functions, Trigonometry, Arithmetic
+@node Sums and Products
 @section Sums and Products
 
 @DOCSTRING(sum)
 
 @DOCSTRING(prod)
 
 @DOCSTRING(cumsum)
 
 @DOCSTRING(cumprod)
 
 @DOCSTRING(sumsq)
 
-@node Special Functions, Coordinate Transformations, Sums and Products, Arithmetic
+@node Special Functions
 @section Special Functions
 
 @DOCSTRING(besselj)
 
 @DOCSTRING(airy)
 
 @DOCSTRING(beta)
 
@@ -186,28 +186,28 @@ sin ([1, 2; 3, 4])
 @DOCSTRING(lgamma)
 
 @DOCSTRING(cross)
 
 @DOCSTRING(commutation_matrix)
 
 @DOCSTRING(duplication_matrix)
 
-@node Coordinate Transformations, Mathematical Constants, Special Functions, Arithmetic
+@node Coordinate Transformations
 @section Coordinate Transformations
 
 @DOCSTRING(cart2pol)
 
 @DOCSTRING(pol2cart)
 
 @DOCSTRING(cart2sph)
 
 @DOCSTRING(sph2cart)
 
-@node Mathematical Constants,  , Coordinate Transformations, Arithmetic
+@node Mathematical Constants
 @section Mathematical Constants
 
 @DOCSTRING(I)
 
 @DOCSTRING(Inf)
 
 @DOCSTRING(NaN)
 
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -35,16 +35,17 @@ The standard built-in data types are rea
 matrices, ranges, character strings, and a data structure type.
 Additional built-in data types may be added in future versions.  If you
 need a specialized data type that is not currently provided as a
 built-in type, you are encouraged to write your own user-defined data
 type and contribute it for distribution in a future release of Octave.
 
 @menu
 * Numeric Objects::             
+* Missing Data::                
 * String Objects::              
 * Data Structure Objects::      
 @end menu
 
 @node Numeric Objects
 @subsection Numeric Objects
 @cindex numeric constant
 @cindex numeric value
@@ -74,16 +75,26 @@ The exact values are given by the variab
 @code{realmax}, and @code{eps}, respectively.
 
 Matrix objects can be of any size, and can be dynamically reshaped and
 resized.  It is easy to extract individual rows, columns, or submatrices
 using a variety of powerful indexing features.  @xref{Index Expressions}.
 
 @xref{Numeric Data Types}, for more information.
 
+@node Missing Data
+@subsection Missing Data
+@cindex missing data
+
+@DOCSTRING(NA)
+
+@DOCSTRING(isna)
+
+@DOCSTRING(is_nan_or_na)
+
 @node String Objects
 @subsection String Objects
 @cindex strings
 @cindex character strings
 @opindex "
 @opindex '
 
 A character string in Octave consists of a sequence of characters
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -15,14 +15,18 @@ messages using the functions described i
 @DOCSTRING(error_text)
 
 @DOCSTRING(beep_on_error)
 
 @DOCSTRING(warning)
 
 @DOCSTRING(usage)
 
+@DOCSTRING(lasterr)
+
+@DOCSTRING(lastwarn)
+
 The following pair of functions are of limited usefulness, and may be
 removed from future versions of Octave.
 
 @DOCSTRING(perror)
 
 @DOCSTRING(strerror)
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Input and Output, Plotting, Error Handling, Top
+@node Input and Output
 @chapter Input and Output
 
 There are two distinct classes of input and output functions.  The first
 set are modeled after the functions available in @sc{Matlab}.  The
 second set are modeled after the standard I/O library used by the C
 programming language and offer more flexibility and control over the
 output.
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -210,16 +210,24 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(polar)
 
 @DOCSTRING(semilogx)
 
 @DOCSTRING(semilogy)
 
 @DOCSTRING(stairs)
 
+@DOCSTRING(errorbar)
+
+@DOCSTRING(loglogerr)
+
+@DOCSTRING(semilogxerr)
+
+@DOCSTRING(semilogyerr)
+
 @node Three-Dimensional Plotting
 @section Three-Dimensional Plotting
 
 @deffn {Command} gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 3-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -80,16 +80,18 @@ referred to as a @var{tm_struct}.
 @DOCSTRING(localtime)
 
 @DOCSTRING(mktime)
 
 @DOCSTRING(asctime)
 
 @DOCSTRING(strftime)
 
+@DOCSTRING(strptime)
+
 Most of the remaining functions described in this section are not
 patterned after the standard C library.  Some are available for
 compatiblity with @sc{Matlab} and others are provided because they are
 useful.
 
 @DOCSTRING(clock)
 
 @DOCSTRING(date)
@@ -116,16 +118,18 @@ creating, deleting, and reading director
 about the status of files.
 
 @DOCSTRING(rename)
 
 @DOCSTRING(link)
 
 @DOCSTRING(symlink)
 
+@DOCSTRING(readlink)
+
 @DOCSTRING(unlink)
 
 @DOCSTRING(readdir)
 
 @DOCSTRING(mkdir)
 
 @DOCSTRING(rmdir)
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -454,17 +454,17 @@ system-dependent error message.\n\
   else
     print_usage ("symlink");
 
   return retval;
 }
 
 DEFUN (readlink, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@var{result}, @var{err}, @var{msg}] =} symlink (@var{symlink})\n\
+@deftypefn {Built-in Function} {[@var{result}, @var{err}, @var{msg}] =} readlink (@var{symlink})\n\
 Read the value of the symbolic link @var{symlink}.\n\
 \n\
 If successful, @var{result} contains the contents of the symbolic link\n\
 @var{symlink}, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
