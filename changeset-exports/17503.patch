# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380259602 25200
#      Thu Sep 26 22:26:42 2013 -0700
# Node ID d997852176346cb568c7770f33069d91fbfc8e78
# Parent  578805a293e5098913e39b866b893f981101477e
legend.m: Text objects should inherit textcolor, interpreter properties from legend (bug #40064).

* scripts/plot/legend.m: Match variable names in function prototype to
docstring.  Get textcolor and interpreter properties from legend axis
object and apply them when creating text objects.  Use '~' to ignore
dummy input to callback functions.  Remove some for loops for performance.

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -97,30 +97,30 @@
 ## @item hleg_obj
 ##   Graphics handles to the text and line objects which make up the legend.
 ##
 ## @item hplot
 ##   Graphics handles to the plot objects which were used in making the legend.
 ##
 ## @item labels
 ##   A cell array of strings of the labels in the legend.
-## @end table 
+## @end table
 ##
 ## The legend label text is either provided in the call to @code{legend} or
 ## is taken from the DisplayName property of graphics objects.  If no
 ## labels or DisplayNames are available, then the label text is simply
 ## @qcode{"data1"}, @qcode{"data2"}, @dots{}, @nospell{@qcode{"dataN"}}.
 ##
 ## Implementation Note: A legend is implemented as an additional axes object
-## of the current figure with the @qcode{"tag"} set to @qcode{"legend"}. 
+## of the current figure with the @qcode{"tag"} set to @qcode{"legend"}.
 ## Properties of the legend object may be manipulated directly by using
 ## @code{set}.
 ## @end deftypefn
 
-function [hlegend2, hobjects2, hplot2, text_strings2] = legend (varargin)
+function [hleg, hleg_obj, hplot, labels] = legend (varargin)
 
   if (nargin > 0
       && (! ishandle (varargin{1})
           || (strcmp (get (varargin{1}, "type"), "axes")
               && ! strcmp (get (varargin{1}, "tag"), "legend"))))
     [ca, varargin, nargin] = __plt_get_axis_arg__ ("legend", varargin{:});
     if (isempty (ca))
       ca = gca ();
@@ -574,52 +574,64 @@ function [hlegend2, hobjects2, hplot2, t
 
       linelength = 15;
 
       ## Create the axis first
       ## FIXME: hlegend should inherit properties from "ca"
       curaxes = get (fig, "currentaxes");
       unwind_protect
         ud = ancestor (hplots, "axes");
-        if (!isscalar (ud))
+        if (! isscalar (ud))
           ud = unique ([ud{:}]);
         endif
         if (isempty (hlegend))
           addprops = true;
           hlegend = axes ("tag", "legend", "userdata", struct ("handle", ud),
                           "box", box,
                           "xtick", [], "ytick", [],
-                          "xticklabel", "", "yticklabel", "", "zticklabel", "",
                           "xlim", [0, 1], "ylim", [0, 1],
                           "visible", ifelse (strcmp (box, "on"), "on", "off"),
                           "activepositionproperty", "position",
                           "fontsize", ca_fontsize);
         else
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
         endif
+        if (addprops)
+          addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
+          addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
+          locations = {"north", "south", "east", "west", ...
+                       "northeast", "southeast", "northwest", "southwest", ...
+                       "northoutside", "southoutside", ...
+                       "eastoutside", "westoutside", ...
+                       "northeastoutside", "southeastoutside", ...
+                       "northwestoutside", "southwestoutside"};
+          addproperty ("location", hlegend, "radio", strjoin (locations, "|"));
+          addproperty ("orientation", hlegend, "radio",
+                       "{vertical}|horizontal");
+          addproperty ("string", hlegend, "any", text_strings);
+          addproperty ("textposition", hlegend, "radio", "{left}|right");
+        endif
         fontsize = get (hlegend, "fontsize");
+        interpreter = get (hlegend, "interpreter");
+        textcolor = get (hlegend, "textcolor");
         ## Add text label to the axis first, checking their extents
         nentries = numel (hplots);
         texthandle = [];
         maxwidth = 0;
         maxheight = 0;
         for k = 1 : nentries
-          if (strcmp (textpos, "right"))
-            texthandle = [texthandle, text(0, 0, text_strings{k},
-                                           "horizontalalignment", "left",
-                                           "userdata", hplots(k),
-                                           "fontsize", fontsize)];
-          else
-            texthandle = [texthandle, text(0, 0, text_strings{k},
-                                           "horizontalalignment", "right",
-                                           "userdata", hplots(k),
-                                           "fontsize", fontsize)];
-          endif
+          halign = ifelse (strcmp (textpos, "right"), "left", "right");
+          texthandle = [texthandle, text(0, 0, text_strings{k},
+                                         "userdata", hplots(k),
+                                         "color", textcolor,
+                                         "horizontalalignment", halign,
+                                         "interpreter", interpreter,
+                                         "fontsize", fontsize)];
           units = get (texthandle(end), "units");
           unwind_protect
             set (texthandle(end), "units", "points");
             extents = get (texthandle(end), "extent");
             maxwidth = max (maxwidth, extents(3));
             maxheight = max (maxheight, extents(4));
           unwind_protect_cleanup
             set (texthandle(end), "units", units);
@@ -667,29 +679,29 @@ function [hlegend2, hobjects2, hplot2, t
 
         ## Place the legend in the desired location
         if (strcmp (orientation, "vertical"))
           lpos = [0, 0, num2 * xstep, num1 * ystep];
         else
           lpos = [0, 0, num1 * xstep, num2 * ystep];
         endif
 
-        gnuplot =  strcmp (get (fig, "__graphics_toolkit__"), "gnuplot");
+        gnuplot = strcmp (get (fig, "__graphics_toolkit__"), "gnuplot");
         if (gnuplot)
           ## Gnuplot places the key (legend) at edge of the figure window.
           ## OpenGL places the legend box at edge of the unmodified axes
           ## position.
           if (isempty (strfind (location, "east")))
             gnuplot_offset = unmodified_axes_outerposition(1) ...
-                         + unmodified_axes_outerposition(3) ...
-                         - unmodified_axes_position(1) ...
-                         - unmodified_axes_position(3);
+                           + unmodified_axes_outerposition(3) ...
+                           - unmodified_axes_position(1) ...
+                           - unmodified_axes_position(3);
           else
             gnuplot_offset = unmodified_axes_position(1) ...
-                         - unmodified_axes_outerposition(1);
+                           - unmodified_axes_outerposition(1);
           endif
           ## FIXME: The "fontsize" is added to match the behavior of OpenGL.
           ## This implies that a change in fontsize should trigger a listener
           ## to update the legend.  The "2" was determined using a long legend
           ## key in the absence of any subplots.
           gnuplot_offset = gnuplot_offset - 2 * fontsize;
         else
           gnuplot_offset = 0;
@@ -803,16 +815,17 @@ function [hlegend2, hobjects2, hplot2, t
         end_unwind_protect
 
         ## Now write the line segments and place the text objects correctly
         xk = 0;
         yk = 0;
         for k = 1 : numel (hplots)
           hobjects = [hobjects, texthandle(k)];
           switch (get (hplots(k), "type"))
+
             case "line"
               color = get (hplots(k), "color");
               style = get (hplots(k), "linestyle");
               if (! strcmp (style, "none"))
                 l1 = line ("xdata", ([xoffset, xoffset + linelength] + xk * xstep) / lpos(3),
                            "ydata", [1, 1] .* (lpos(4) - yoffset - yk * ystep) / lpos(4),
                            "color", color, "linestyle", style, "marker", "none",
                            "userdata", hplots (k));
@@ -839,33 +852,38 @@ function [hlegend2, hobjects2, hplot2, t
               addlistener (hplots(k), "markeredgecolor",
                            {@updateline, hlegend, linelength});
               addlistener (hplots(k), "markerfacecolor",
                            {@updateline, hlegend, linelength});
               addlistener (hplots(k), "markersize",
                            {@updateline, hlegend, linelength});
               addlistener (hplots(k), "displayname",
                            {@updateline, hlegend, linelength});
+
             case "patch"
               facecolor = get (hplots(k), "facecolor");
               edgecolor = get (hplots(k), "edgecolor");
               cdata = get (hplots(k), "cdata");
               if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
                 p1 = patch ("xdata", ([0, linelength, linelength, 0] +
                                      xoffset + xk * xstep) / lpos(3),
                            "ydata", (lpos(4) - yoffset -
                                      [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
                            "facecolor", facecolor, "edgecolor", edgecolor,
                            "cdata", cdata, "userdata", hplots(k));
                 hobjects = [hobjects, p1];
               endif
+
             case "surface"
+              ## FIXME: Would be nice to do something here
+
           endswitch
-          set (texthandle (k), "position", [(txoffset + xk * xstep) / lpos(3), ...
-                                            (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
+
+          set (texthandle(k), "position", [(txoffset + xk * xstep) / lpos(3), ...
+                                           (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
           if (strcmp (orientation, "vertical"))
             yk++;
             if (yk > num1)
               yk = 0;
               xk++;
             endif
           else
             xk++;
@@ -876,24 +894,24 @@ function [hlegend2, hobjects2, hplot2, t
           endif
         endfor
 
         ## Add an invisible text object to original axis
         ## that when it is destroyed will remove the legend
         props = {"parent", ca(1), "tag", "legend", ...
                  "handlevisibility", "off", "visible", "off", ...
                  "xliminclude", "off", "yliminclude", "off"};
-        t1 = findall (ca(1), props{3:4}, "type", "text");
+        t1 = findall (ca(1), "tag", "legend", "type", "text");
         if (isempty (t1))
           t1 = text (0, 0, "", props{:});
           set (t1, "deletefcn", {@deletelegend1, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
           set (hlegend, "unmodified_axes_position", unmodified_axes_position);
-          set (hlegend, "unmodified_axes_outerposition", 
+          set (hlegend, "unmodified_axes_outerposition",
                unmodified_axes_outerposition);
         else
           addproperty ("unmodified_axes_position", hlegend,
                        "data", unmodified_axes_position);
           addproperty ("unmodified_axes_outerposition", hlegend,
                        "data", unmodified_axes_outerposition);
         endif
 
@@ -927,36 +945,22 @@ function [hlegend2, hobjects2, hplot2, t
                                       t1, hplots});
           addlistener (hlegend, "visible", {@hideshowlegend, ca, ...
                                             unmodified_axes_position, ...
                                             new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
-        if (addprops)
-          addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
-          addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
-          locations = {"north", "south", "east", "west", ...
-                       "northeast", "southeast", "northwest", "southwest", ...
-                       "northoutside", "southoutside", ...
-                       "eastoutside", "westoutside", ...
-                       "northeastoutside", "southeastoutside", ...
-                       "northwestoutside", "southwestoutside"};
-          addproperty ("location", hlegend, "radio", strjoin (locations, "|"));
-          addproperty ("orientation", hlegend, "radio",
-                       "{vertical}|horizontal");
-          addproperty ("string", hlegend, "any", text_strings);
-          addproperty ("textposition", hlegend, "radio", "{left}|right");
-        else
+        if (! addprops)
           set (hlegend, "string", text_strings);
         endif
 
         if (outside)
-          set (hlegend, "location", strcat (location, "outside"),
+          set (hlegend, "location", [location "outside"],
                "orientation", orientation, "textposition", textpos);
         else
           set (hlegend, "location", location, "orientation", orientation,
                "textposition", textpos);
         endif
         if (addprops)
           addlistener (hlegend, "edgecolor", @updatelegendtext);
           addlistener (hlegend, "textcolor", @updatelegendtext);
@@ -972,25 +976,25 @@ function [hlegend2, hobjects2, hplot2, t
         endif
       unwind_protect_cleanup
         set (fig, "currentaxes", curaxes);
       end_unwind_protect
     endif
   endif
 
   if (nargout > 0)
-    hlegend2 = hlegend;
-    hobjects2 = hobjects;
-    hplot2 = hplots;
-    text_strings2 = text_strings;
+    hleg = hlegend;
+    hleg_obj = hobjects;
+    hplot = hplots;
+    labels = text_strings;
   endif
 
 endfunction
 
-function updatelegend (h, d)
+function updatelegend (h, ~)
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
     unwind_protect
       hax = getfield (get (h, "userdata"), "handle");
       [hplots, text_strings] = __getlegenddata__ (h);
       position = get (h, "unmodified_axes_position");
@@ -1009,38 +1013,35 @@ function updatelegend (h, d)
       h = legend (hax, hplots, get (h, "string"));
     unwind_protect_cleanup
       recursive = false;
     end_unwind_protect
   endif
 
 endfunction
 
-function updatelegendtext (h, d)
-  hax = get (h, "userdata").handle;
+function updatelegendtext (h, ~)
   kids = get (h, "children");
-  text_kids = findobj (kids, "-property", "interpreter", "type", "text");
+  text_kids = findobj (kids, "type", "text");
   interpreter = get (h, "interpreter");
   textcolor = get (h, "textcolor");
   fontsize = get (h, "fontsize");
   set (text_kids, "interpreter", interpreter,
-                  "fontsize", fontsize,
-                  "color", textcolor);
+                  "color", textcolor,
+                  "fontsize", fontsize);
 endfunction
 
-function hideshowlegend (h, d, ca, pos1, pos2)
+function hideshowlegend (h, ~, ca, pos1, pos2)
+  keyboard;
   isvisible = strcmp (get (h, "visible"), "off");
   if (! isvisible)
     kids = get (h, "children");
-    for i = 1 : numel (kids)
-      if (! strcmp (get (kids(i), "visible"), "off"))
+    if (any (! strcmp (get (kids, "visible"), "off")))
         isvisible = true;
-        break;
-      endif
-    endfor
+    endif
   endif
 
   for i = 1 : numel (ca)
     if (isaxes (ca(i))
         && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"),"off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       units = get (ca(i), "units");
       unwind_protect
@@ -1052,25 +1053,25 @@ function hideshowlegend (h, d, ca, pos1,
         endif
       unwind_protect_cleanup
         set (ca(i), "units", units);
       end_unwind_protect
     endif
   endfor
 endfunction
 
-function deletelegend1 (h, d, ca)
+function deletelegend1 (h, ~, ca)
   if (isaxes (ca)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off"))
       && strcmp (get (ca, "beingdeleted"), "off"))
     delete (ca);
   endif
 endfunction
 
-function deletelegend2 (h, d, ca, pos, outpos, t1, hplots)
+function deletelegend2 (h, ~, ca, pos, outpos, t1, hplots)
   for i = 1 : numel (ca)
     if (isaxes (ca(i))
         && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       if (!isempty (pos) && !isempty(outpos))
         units = get (ca(i), "units");
         unwind_protect
           set (ca(i), "units", "points");
@@ -1091,17 +1092,17 @@ function deletelegend2 (h, d, ca, pos, o
       dellistener (hplots(i), "markeredgecolor");
       dellistener (hplots(i), "markerfacecolor");
       dellistener (hplots(i), "markersize");
       dellistener (hplots(i), "displayname");
     endif
   endfor
 endfunction
 
-function updateline (h, d, hlegend, linelength)
+function updateline (h, ~, hlegend, linelength)
   lm = [];
   ll = [];
   kids = get (hlegend, "children");
   for i = 1 : numel (kids)
     if (get (kids(i), "userdata") == h
         && strcmp (get (kids(i), "type"), "line"))
       if (strcmp (get (kids (i), "marker"), "none"))
         ll = kids(i);
@@ -1116,25 +1117,23 @@ function updateline (h, d, hlegend, line
   displayname = get (h, "displayname");
 
   if ((isempty (displayname)
        || (strcmp (marker, "none") && strcmp (linestyle, "none")))
        && (! isempty (lm) || isempty (ll)))
     ## An element was removed from the legend. Need to recall the
     ## legend function to recreate a new legend
     [hplots, text_strings] = __getlegenddata__ (hlegend);
-    for i = 1 : numel (hplots)
-      if (hplots(i) == h)
-        hplots(i) = [];
-        text_strings(i) = [];
-        break;
-      endif
-    endfor
+    idx = find (hplots == h, 1);
+    if (idx)
+      hplots(idx) = [];
+      text_strings(idx) = [];
+    endif
     legend (hplots, text_strings);
-  elseif ((!isempty (displayname)
+  elseif ((! isempty (displayname)
            && (! strcmp (marker, "none") || ! strcmp (linestyle, "none")))
           && isempty (lm) && isempty (ll))
     ## An element was added to the legend.  Need to re-call the
     ## legend function to recreate a new legend.
     [hplots, text_strings] = __getlegenddata__ (hlegend);
     hplots = [hplots, h];
     text_strings = {text_strings{:}, displayname};
     legend (hplots, text_strings);
@@ -1253,16 +1252,18 @@ endfunction
 %! legend show
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x, x, ';\alpha;',  ...
 %!       x, 2*x, ';\beta=2\alpha;',  ...
 %!       x, 3*x, ';\gamma=3\alpha;');
+%! hl = legend ();
+%! set (h, 'interpreter', 'tex');
 %! title ('Labels with interpreted Greek text');
 
 %!demo
 %! clf;
 %! plot (rand (2));
 %! title ('Labels with TeX interpreter turned off');
 %! h = legend ('Hello_World', 'foo^bar');
 %! set (h, 'interpreter', 'none');
