# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1222449782 14400
#      Fri Sep 26 13:23:02 2008 -0400
# Node ID ec0a13863eb7aa777d20ec8d6f73af2eb6099706
# Parent  2b48deec1aa2e0a0c54e6516396a2892744e2718
Only run tests that depend on HDF5 and QHull if Octave was actually
linked against these libraries.

diff --git a/scripts/geometry/convhull.m b/scripts/geometry/convhull.m
--- a/scripts/geometry/convhull.m
+++ b/scripts/geometry/convhull.m
@@ -68,17 +68,17 @@ function H = convhull (x, y, opt)
       next_i = i(next_idx + 1);
       i(next_idx + 1) = 0;
     endif
   endfor
 
   H(n + 1) = H(1);
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! x = -3:0.5:3;
 %! y = abs (sin (x));
 %! assert (convhull (x, y, {"s","Qci","Tcv","Pp"}), [1;7;13;12;11;10;4;3;2;1])
 
 %!demo
 %! x = -3:0.05:3;
 %! y = abs (sin (x));
 %! k = convhull (x, y);
diff --git a/scripts/geometry/delaunay.m b/scripts/geometry/delaunay.m
--- a/scripts/geometry/delaunay.m
+++ b/scripts/geometry/delaunay.m
@@ -68,17 +68,17 @@ function ret = delaunay (x, y, opt)
     X = [x(tri(:,1)); x(tri(:,2)); x(tri(:,3)); x(tri(:,1))];
     Y = [y(tri(:,1)); y(tri(:,2)); y(tri(:,3)); y(tri(:,1))];
     plot(X, Y, 'b', x, y, 'r*');
   else
     ret = tri;
   endif
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! x = [-1, 0, 1, 0, 0];
 %! y = [0, 1, 0, -1, 0];
 %! assert (sortrows (sort (delaunay (x, y), 2)), [1,2,5;1,4,5;2,3,5;3,4,5])
 
 %!demo
 %! rand ('state', 1);
 %! x = rand(1,10);
 %! y = rand(size(x));
diff --git a/scripts/geometry/delaunay3.m b/scripts/geometry/delaunay3.m
--- a/scripts/geometry/delaunay3.m
+++ b/scripts/geometry/delaunay3.m
@@ -47,12 +47,12 @@ function tetr = delaunay3 (x, y, z, opt)
       error ("delaunay3: fourth argument must be a string or cell array of strings");
     endif
   else
     error ("delaunay3: first three input arguments must be vectors of same size");
   endif
 
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! x = [-1, -1, 1, 0, -1]; y = [-1, 1, 1, 0, -1]; z = [0, 0, 0, 1, 1];
 %! assert (sortrows (sort (delaunay3 (x, y, z), 2)), [1,2,3,4;1,2,4,5])
 
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -120,17 +120,17 @@ function [rx, ry, rz] = griddata (x, y, 
     rz = zi;
   elseif (nargout == 1)
     rx = zi;
   elseif (nargout == 0)
     mesh (xi, yi, zi);
   endif
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! [xx,yy]=meshgrid(linspace(-1,1,32));
 %! x = xx(:);
 %! x = x + 10 * (2 * round(rand(size(x))) - 1) * eps;
 %! y = yy(:);
 %! y = y + 10 * (2 * round(rand(size(y))) - 1) * eps;
 %! z = sin(2*(x.^2+y.^2));
 %! zz = griddata(x,y,z,xx,yy,'linear');
 %! zz2 = sin(2*(xx.^2+yy.^2));
diff --git a/scripts/geometry/griddata3.m b/scripts/geometry/griddata3.m
--- a/scripts/geometry/griddata3.m
+++ b/scripts/geometry/griddata3.m
@@ -50,29 +50,29 @@ function vi = griddata3 (x, y, z, v, xi,
   if (any (size(xi) != size(yi)) || any (size(xi) != size(zi)))
     error ("griddata3: xi, yi and zi must be vectors or matrices of same size");
   endif
 
   vi = griddatan ([x(:), y(:), z(:)], v(:), [xi(:), yi(:), zi(:)], varargin{:});
   vi = reshape (vi, size (xi));
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! rand('state', 0);
 %! x = 2 * rand(1000, 1) - 1;
 %! y = 2 * rand(1000, 1) - 1;
 %! z = 2 * rand(1000, 1) - 1;
 %! v = x.^2 + y.^2 + z.^2;
 %! [xi, yi, zi] = meshgrid (-0.8:0.2:0.8);
 %! ##vi = reshape (griddatan([x(:), y(:), z(:)], v, [xi(:), yi(:), zi(:)], 'linear'), size (xi));
 %! vi = griddata3 (x, y, z, v, xi, yi, zi, 'linear');
 %! vv = vi - xi.^2 - yi.^2 - zi.^2;
 %! assert (max(abs(vv(:))), 0, 0.1)
 
-%!test
+%!testif HAVE_QHULL
 %! rand('state', 0);
 %! x = 2 * rand(1000, 1) - 1;
 %! y = 2 * rand(1000, 1) - 1;
 %! z = 2 * rand(1000, 1) - 1;
 %! v = x.^2 + y.^2 + z.^2;
 %! [xi, yi, zi] = meshgrid (-0.8:0.2:0.8);
 %! ##vi = reshape (griddatan([x(:), y(:), z(:)], v, [xi(:), yi(:), zi(:)], 'linear'), size (xi));
 %! vi = griddata3 (x, y, z, v, xi, yi, zi, 'nearest');
diff --git a/scripts/geometry/griddatan.m b/scripts/geometry/griddatan.m
--- a/scripts/geometry/griddatan.m
+++ b/scripts/geometry/griddatan.m
@@ -80,27 +80,27 @@ function yi = griddatan (x, y, xi, metho
     yi(valid) = sum (y(tri(tri_list,:)) .* bary_list, 2);
 
   else
     error ("griddatan: unknown interpolation method");
   endif
 
 endfunction
 
-%!test
+%!testif HAVE_QHULL
 %! [xx,yy] = meshgrid(linspace(-1,1,32));
 %! xi = [xx(:), yy(:)];
 %! x = (2 * rand(100,2) - 1);
 %! x = [x;1,1;1,-1;-1,-1;-1,1];
 %! y = sin(2*(sum(x.^2,2)));
 %! zz = griddatan(x,y,xi,'linear');
 %! zz2 = griddata(x(:,1),x(:,2),y,xi(:,1),xi(:,2),'linear');
 %! assert (zz, zz2, 1e-10)
 
-%!test
+%!testif HAVE_QHULL
 %! [xx,yy] = meshgrid(linspace(-1,1,32));
 %! xi = [xx(:), yy(:)];
 %! x = (2 * rand(100,2) - 1);
 %! x = [x;1,1;1,-1;-1,-1;-1,1];
 %! y = sin(2*(sum(x.^2,2)));
 %! zz = griddatan(x,y,xi,'nearest');
 %! zz2 = griddata(x(:,1),x(:,2),y,xi(:,1),xi(:,2),'nearest');
 %! assert (zz, zz2, 1e-10)
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -874,17 +874,17 @@ gen_save_tests() {
 %! assert(as_save,sparse(af));
 %!test # save binary
 %! savefile= tmpnam();
 %! as_save=as; save("-binary",savefile,"bf","as_save","af");
 %! clear as_save;
 %! load(savefile,"as_save");
 %! unlink(savefile);
 %! assert(as_save,sparse(af));
-%!test # save hdf5
+%!testif HAVE_HDF5 # save hdf5
 %! savefile= tmpnam();
 %! as_save=as; save("-hdf5",savefile,"bf","as_save","af");
 %! clear as_save;
 %! load(savefile,"as_save");
 %! unlink(savefile);
 %! assert(as_save,sparse(af));
 %!test # save matlab
 %! savefile= tmpnam();
