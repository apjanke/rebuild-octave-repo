# HG changeset patch
# User jwe
# Date 909790110 0
#      Fri Oct 30 23:28:30 1998 +0000
# Node ID 81738e630f571692454aee497ee84d732cf5b4d1
# Parent  bc61b0e8d60e8a4244e4c33eda1dd37ab3ab33e8
[project @ 1998-10-30 23:28:29 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
 Fri Oct 30 08:39:30 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (LEFTDIV_EQ, ELEFTDIV_EQ): New tokens.
+	(assign_expr): Add rules for them.
+	(make_assign_op): Handle them here too.
+	* lex.l: Recognize them.
+	* ov.h (octave_value::assign_op): Add ldiv_eq and el_ldiv_eq.
+	* ov.cc (octave_value::assign_op_as_string): Ditto.
+	(octave_value::op_eq_to_binary_op): Ditto.
+	(octave_value::assign): Handle OP= style operators with brute force.
+	(octave_value::simple_assign): New function.
+
 	* parse.y (matrix): Dont' forget to reset
 	lexer_flags.looking_at_matrix_or_assign_lhs.
 
 	* oct-lvalue.cc (octave_lvalue::assign): Don't call change
 	function if error occurs.
 	(octave_lvalue::do_unary_op): If we have an index, fail with message.
 
 Thu Oct 29 09:27:04 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -781,16 +781,29 @@ DEFUN (isempty, args, ,
 	retval = static_cast<double> (arg.length () == 0);
     }
   else
     print_usage ("isempty");
 
   return retval;
 }
 
+DEFUN (is_list, args, ,
+  "is_list (x): return nonzero if x is a list")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_list () ? 1.0 : 0.0;
+  else
+    print_usage ("is_list");
+
+  return retval;
+}
+
 DEFUN (is_matrix, args, ,
   "is_matrix (x): return nonzero if x can be considered a matrix")
 {
   double retval = 0.0;
 
   if (args.length () == 1)
     {
       octave_value arg = args(0);
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -624,20 +624,22 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 "." {
     TOK_RETURN ('.');
   }
 
 "+="	{ BIN_OP_RETURN (ADD_EQ, false); }
 "-="	{ BIN_OP_RETURN (SUB_EQ, false); }
 "*="	{ BIN_OP_RETURN (MUL_EQ, false); }
 "/="	{ BIN_OP_RETURN (DIV_EQ, false); }
+"\\="	{ BIN_OP_RETURN (LEFTDIV_EQ, false); }
 ".+="	{ BIN_OP_RETURN (ADD_EQ, false); }
 ".-="	{ BIN_OP_RETURN (SUB_EQ, false); }
 ".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
 "./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
+".\\="	{ BIN_OP_RETURN (ELEFTDIV_EQ, false); }
 "&="	{ BIN_OP_RETURN (AND_EQ, false); }
 "|="	{ BIN_OP_RETURN (OR_EQ, false); }
 "<<="	{ BIN_OP_RETURN (LSHIFT_EQ, false); }
 ">>="	{ BIN_OP_RETURN (RSHIFT_EQ, false); }
 
 %{
 // Unrecognized input is a lexical error.
 %}
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -216,18 +216,19 @@ Return a new list created by reversing t
 }
 
 DEFUN (splice, args, ,
   "splice (LIST_1, OFFSET, LENGTH, LIST_2)\n\
 splice (LIST_1, OFFSET, LENGTH, LIST_2)\n\
 splice (LIST_1, OFFSET, LENGTH)\n\
 splice (LIST_1, OFFSET)\n\
 \n\
-Replace LENGTH elements of LIST_1 beginning at OFFSET with the
-contents of LIST_2 (if any).  If LENGTH is omitted, ")
+Replace LENGTH elements of LIST_1 beginning at OFFSET with the\n\
+contents of LIST_2 (if any).  If LENGTH is omitted, all elements\n\
+from OFFSET to the end of LIST_1 are replaced.")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 5)
     {
       octave_value_list list_1 = args(0).list_value ();
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -279,32 +279,40 @@ octave_value::assign_op_as_string (assig
     case mul_eq:
       retval = "*=";
       break;
 
     case div_eq:
       retval = "/=";
       break;
 
+    case ldiv_eq:
+      retval = "\\=";
+      break;
+
     case lshift_eq:
       retval = "<<=";
       break;
 
     case rshift_eq:
       retval = ">>=";
       break;
 
     case el_mul_eq:
       retval = ".*=";
       break;
 
     case el_div_eq:
       retval = "./=";
       break;
 
+    case el_ldiv_eq:
+      retval = ".\\=";
+      break;
+
     case el_and_eq:
       retval = "&=";
       break;
 
     case el_or_eq:
       retval = "|=";
       break;
 
@@ -542,47 +550,124 @@ octave_value::do_index_op (int nargout, 
 
 static void
 gripe_no_conversion (const string& on, const string& tn1, const string& tn2)
 {
   error ("operator %s: no conversion for assignment of `%s' to indexed `%s'",
 	 on.c_str (), tn2.c_str (), tn1.c_str ());
 }
 
+static void
+gripe_assign_failed (const string& on, const string& tn1, const string& tn2)
+{
+  error ("assignment failed for `%s %s %s'",
+	 tn1.c_str (), on.c_str (), tn2.c_str ());
+}
+
+static void
+gripe_assign_failed_or_no_method (const string& on, const string& tn1,
+				  const string& tn2)
+{
+  error ("assignment failed, or no method for `%s %s %s'",
+	 tn1.c_str (), on.c_str (), tn2.c_str ());
+}
+
 void
 octave_value::assign (assign_op op, const octave_value& rhs)
 {
-  // XXX FIXME XXX -- make this work for ops other than `='.
-
   if (op == asn_eq)
     operator = (rhs);
   else
     {
-      string on = assign_op_as_string (op);
-      error ("operator `%s' not supported yet", on.c_str ());
+      // XXX FIXME XXX -- only do the following stuff if we can't find
+      // a specific function to call to handle the op= operation for
+      // the types we have.
+
+      binary_op binop = op_eq_to_binary_op (op);
+
+      if (! error_state)
+	{
+	  octave_value t = do_binary_op (binop, *this, rhs);
+
+	  if (! error_state)
+	    operator = (t);
+	}
+
+      if (error_state)
+	gripe_assign_failed_or_no_method (assign_op_as_string (op),
+					  type_name (), rhs.type_name ());
+    }
+}
+
+void
+octave_value::simple_assign (octave_value::assign_op orig_op,
+			     const octave_value_list& idx,
+			     const octave_value& rhs)
+{
+  make_unique ();
+
+  bool assignment_ok = try_assignment (asn_eq, idx, rhs);
+
+  if (! (error_state || assignment_ok))
+    {
+      assignment_ok = try_assignment_with_conversion (asn_eq, idx, rhs);
+
+      if (! (error_state || assignment_ok))
+	gripe_no_conversion (assign_op_as_string (orig_op),
+			     type_name (), rhs.type_name ());
     }
 }
 
 void
 octave_value::assign (octave_value::assign_op op,
 		      const octave_value_list& idx,
 		      const octave_value& rhs)
 {
   if (Vresize_on_range_error || is_defined ())
     {
-      make_unique ();
+      if (op == asn_eq)
+	simple_assign (op, idx, rhs);
+      else
+	{
+	  // XXX FIXME XXX -- only do the following stuff if we can't
+	  // find a specific function to call to handle the op=
+	  // operation for the types we have.
+
+	  octave_value t1 = *this;
 
-      bool assignment_ok = try_assignment (op, idx, rhs);
+	  t1 = t1.do_index_op (idx);
+
+	  if (! error_state)
+	    {
+	      binary_op binop = op_eq_to_binary_op (op);
+
+	      if (! error_state)
+		{
+		  octave_value t2 = do_binary_op (binop, t1, rhs);
 
-      if (! (error_state || assignment_ok))
-	{
-	  assignment_ok = try_assignment_with_conversion (op, idx, rhs);
+		  if (! error_state)
+		    {
+		      simple_assign (op, idx, t2);
 
-	  if (! (error_state || assignment_ok))
-	    gripe_no_conversion (assign_op_as_string (op),
+		      if (error_state)
+			gripe_assign_failed (assign_op_as_string (op),
+					     type_name (), rhs.type_name ());
+		    }
+		  else
+		    gripe_assign_failed_or_no_method (assign_op_as_string (op),
+						      type_name (),
+						      rhs.type_name ());
+		}
+	      else
+		gripe_assign_failed_or_no_method (assign_op_as_string (op),
+						  type_name (),
+						  rhs.type_name ());
+	    }
+	  else
+	    gripe_assign_failed (assign_op_as_string (op),
 				 type_name (), rhs.type_name ());
 	}
 
       if (! error_state)
 	maybe_mutate ();
     }
   else
     {
@@ -1185,16 +1270,81 @@ octave_value::newline (ostream& os) cons
 
 void
 octave_value::reset (void) const
 {
   beginning_of_line = true;
   curr_print_indent_level = 0;
 }
 
+octave_value::binary_op 
+octave_value::op_eq_to_binary_op (assign_op op)
+{
+  binary_op binop = unknown_binary_op;
+
+  switch (op)
+    {
+    case add_eq:
+      binop = add;
+      break;
+
+    case sub_eq:
+      binop = sub;
+      break;
+
+    case mul_eq:
+      binop = mul;
+      break;
+
+    case div_eq:
+      binop = div;
+      break;
+
+    case ldiv_eq:
+      binop = ldiv;
+      break;
+
+    case lshift_eq:
+      binop = lshift;
+      break;
+
+    case rshift_eq:
+      binop = rshift;
+      break;
+
+    case el_mul_eq:
+      binop = el_mul;
+      break;
+
+    case el_div_eq:
+      binop = el_div;
+      break;
+
+    case el_ldiv_eq:
+      binop = el_ldiv;
+      break;
+
+    case el_and_eq:
+      binop = el_and;
+      break;
+
+    case el_or_eq:
+      binop = el_or;
+      break;
+
+    default:
+      {
+	string on = assign_op_as_string (op);
+	error ("operator %s: no binary operator found", on.c_str ());
+      }
+    }
+
+  return binop;
+}
+
 void
 install_types (void)
 {
   octave_base_value::register_type ();
   octave_scalar::register_type ();
   octave_complex::register_type ();
   octave_matrix::register_type ();
   octave_complex_matrix::register_type ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -124,20 +124,22 @@ public:
 
   enum assign_op
   {
     asn_eq,
     add_eq,
     sub_eq,
     mul_eq,
     div_eq,
+    ldiv_eq,
     lshift_eq,
     rshift_eq,
     el_mul_eq,
     el_div_eq,
+    el_ldiv_eq,
     el_and_eq,
     el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
   static string unary_op_as_string (unary_op);
 
@@ -512,16 +514,21 @@ private:
 				       const octave_value_list& idx,
 				       const octave_value& rhs);
 
   bool try_assignment (assign_op, const octave_value_list& idx,
 		       const octave_value& rhs);
 
   static int curr_print_indent_level;
   static bool beginning_of_line;
+
+  binary_op op_eq_to_binary_op (assign_op op);
+
+  void simple_assign (assign_op orig_op, const octave_value_list& idx,
+		      const octave_value& rhs);
 };
 
 #define OV_UNOP_FN(name) \
   inline octave_value \
   name (const octave_value& a) \
   { \
     return do_unary_op (octave_value::name, a); \
   }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -326,17 +326,18 @@ set_stmt_print_flag (tree_statement_list
   subplot_using *subplot_using_type;
   subplot_style *subplot_style_type;
   subplot_axes *subplot_axes_type;
   octave_user_function *octave_user_function_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
-%token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ EMUL_EQ EDIV_EQ AND_EQ OR_EQ
+%token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ 
+%token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ AND_EQ OR_EQ
 %token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
 %token <tok_val> QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
@@ -393,17 +394,17 @@ set_stmt_print_flag (tree_statement_list
 %type <plot_limits_type> ranges
 %type <plot_range_type> ranges1 
 %type <subplot_using_type> using using1 
 %type <subplot_style_type> style
 %type <subplot_axes_type> axes
 
 // Precedence and associativity.
 %left ';' ',' '\n'
-%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ EMUL_EQ EDIV_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
+%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
 %left EXPR_AND_AND EXPR_OR_OR
 %left EXPR_AND EXPR_OR
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
@@ -727,24 +728,28 @@ assign_expr	: assign_lhs '=' expression
 		| assign_lhs ADD_EQ expression
 		  { $$ = make_assign_op (ADD_EQ, $1, $2, $3); }
 		| assign_lhs SUB_EQ expression
 		  { $$ = make_assign_op (SUB_EQ, $1, $2, $3); }
 		| assign_lhs MUL_EQ expression
 		  { $$ = make_assign_op (MUL_EQ, $1, $2, $3); }
 		| assign_lhs DIV_EQ expression
 		  { $$ = make_assign_op (DIV_EQ, $1, $2, $3); }
+		| assign_lhs LEFTDIV_EQ expression
+		  { $$ = make_assign_op (LEFTDIV_EQ, $1, $2, $3); }
 		| assign_lhs LSHIFT_EQ expression
 		  { $$ = make_assign_op (LSHIFT_EQ, $1, $2, $3); }
 		| assign_lhs RSHIFT_EQ expression
 		  { $$ = make_assign_op (RSHIFT_EQ, $1, $2, $3); }
 		| assign_lhs EMUL_EQ expression
 		  { $$ = make_assign_op (EMUL_EQ, $1, $2, $3); }
 		| assign_lhs EDIV_EQ expression
 		  { $$ = make_assign_op (EDIV_EQ, $1, $2, $3); }
+		| assign_lhs ELEFTDIV_EQ expression
+		  { $$ = make_assign_op (ELEFTDIV_EQ, $1, $2, $3); }
 		| assign_lhs AND_EQ expression
 		  { $$ = make_assign_op (AND_EQ, $1, $2, $3); }
 		| assign_lhs OR_EQ expression
 		  { $$ = make_assign_op (OR_EQ, $1, $2, $3); }
 		;
 
 word_list_cmd	: identifier word_list
 		  { $$ = make_index_expression ($1, $2); }
@@ -2159,32 +2164,40 @@ make_assign_op (int op, tree_argument_li
     case MUL_EQ:
       t = octave_value::mul_eq;
       break;
 
     case DIV_EQ:
       t = octave_value::div_eq;
       break;
 
+    case LEFTDIV_EQ:
+      t = octave_value::ldiv_eq;
+      break;
+
     case LSHIFT_EQ:
       t = octave_value::lshift_eq;
       break;
 
     case RSHIFT_EQ:
       t = octave_value::rshift_eq;
       break;
 
     case EMUL_EQ:
       t = octave_value::el_mul_eq;
       break;
 
     case EDIV_EQ:
       t = octave_value::el_div_eq;
       break;
 
+    case ELEFTDIV_EQ:
+      t = octave_value::el_ldiv_eq;
+      break;
+
     case AND_EQ:
       t = octave_value::el_and_eq;
       break;
 
     case OR_EQ:
       t = octave_value::el_or_eq;
       break;
 
