# HG changeset patch
# User jwe
# Date 1146075385 0
#      Wed Apr 26 18:16:25 2006 +0000
# Node ID 246b1fc1e628543d6c38fa36dacd198847d586e9
# Parent  1182d68521727cca6f4584ffa25784fe288bb4e7
[project @ 2006-04-26 18:16:24 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2006-04-26  John W. Eaton  <jwe@octave.org>
+
+	* pathsearch.cc (dir_path::path_sep_char, dir_path::path_sep_str):
+	New static data.
+	* pathsearch.h: Provide decls.
+	(dir_path::is_path_sep): New function.
+
 2006-04-18  John W. Eaton  <jwe@octave.org>
 
 	* randmtzig.c (randmt, randi53, randi54, randi64, randu32, randu53):
 	Omit inline from decl.
 
 	* Sparse.cc (Sparse<T>::index): Use std::vector<bool> to avoid
 	local array with variable dimension.
 
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -32,16 +32,20 @@ 02110-1301, USA.
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 #include "str-vec.h"
 
 #include "kpse.cc"
 
+char dir_path::path_sep_char = SEPCHAR;
+
+std::string dir_path::path_sep_str (SEPCHAR_STR);
+
 static bool octave_kpathsea_initialized = false;
 
 string_vector
 dir_path::elements (void)
 {
   return initialized ? pv : string_vector ();
 }
 
diff --git a/liboctave/pathsearch.h b/liboctave/pathsearch.h
--- a/liboctave/pathsearch.h
+++ b/liboctave/pathsearch.h
@@ -77,16 +77,21 @@ public:
   string_vector find_all_first_of (const string_vector& names);
 
   void rehash (void)
     {
       initialized = false;
       init ();
     }
 
+  static bool is_path_sep (char c) { return c == path_sep_char; }
+
+  static char path_sep_char;
+  static std::string path_sep_str;
+
 private:
 
   // The colon separated list that we were given.
   std::string p_orig;
 
   // The default path.  If specified, replaces leading, trailing, or
   // doubled colons in p_orig.
   std::string p_default;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2006-04-26  John W. Eaton  <jwe@octave.org>
+
+	* dirfns.cc (Ffilesep): New function to replace DEFCONST in
+	symbols_of_dirfns.
+	(Fpathsep): New function.
+
+	* defaults.cc (set_default_default_exec_path): Use
+	dir_path::path_sep_str instead of std::string (SEPCHAR_STR).
+	(set_default_exec_path): Likewise.
+	(set_default_path): Likewise.
+	(maybe_add_default_load_path): Likewise.  Use dir_path::is_path_sep.
+
 2006-04-18  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/regexp.cc: Include <algorithm>, for transform decl.
 
 	* DLD-FUNCTIONS/ccolamd.cc (Fccolamd, Fcsymamd):	
 	Always return something.
 
 	* sighandlers.cc (octave_set_signal_handler,
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -259,49 +259,49 @@ set_default_bin_dir (void)
 {
   Vbin_dir = subst_octave_home (OCTAVE_BINDIR);
 }
 
 static void
 set_default_default_exec_path (void)
 {
   Vdefault_exec_path
-    = Vlocal_ver_arch_lib_dir + std::string (SEPCHAR_STR)
-    + Vlocal_arch_lib_dir + std::string (SEPCHAR_STR)
-    + Varch_lib_dir + std::string (SEPCHAR_STR)
+    = Vlocal_ver_arch_lib_dir + dir_path::path_sep_str
+    + Vlocal_arch_lib_dir + dir_path::path_sep_str
+    + Varch_lib_dir + dir_path::path_sep_str
     + Vbin_dir;
 }
 
 static void
 set_default_exec_path (void)
 {
   std::string octave_exec_path = octave_env::getenv ("OCTAVE_EXEC_PATH");
 
   if (octave_exec_path.empty ())
     {
       std::string shell_path = octave_env::getenv ("PATH");
 
       if (! shell_path.empty ())
 	{
-	  Vexec_path = std::string (SEPCHAR_STR);
+	  Vexec_path = dir_path::path_sep_str;
 	  Vexec_path.append (shell_path);
 	}
     }
   else
     Vexec_path = std::string (octave_exec_path);
 }
 
 static void
 set_default_path (void)
 {
   Vdefault_load_path = subst_octave_home (OCTAVE_FCNFILEPATH);
 
   std::string oct_path = octave_env::getenv ("OCTAVE_PATH");
 
-  Vload_path = oct_path.empty () ? std::string (SEPCHAR_STR) : oct_path;
+  Vload_path = oct_path.empty () ? dir_path::path_sep_str : oct_path;
 
   update_load_path_dir_path ();
 }
 
 static void
 set_default_info_file (void)
 {
   std::string std_info_file = subst_octave_home (OCTAVE_INFOFILE);
@@ -360,32 +360,31 @@ set_site_defaults_file (void)
 
 std::string
 maybe_add_default_load_path (const std::string& pathstring)
 {
   std::string retval;
 
   if (! pathstring.empty ())
     {
-      if (pathstring[0] == SEPCHAR)
+      if (dir_path::is_path_sep (pathstring[0]))
 	{
 	  retval = Vdefault_load_path;
 	  retval.append (pathstring);
 	}
       else
 	retval = pathstring;
 
-      if (pathstring[pathstring.length () - 1] == SEPCHAR)
+      if (dir_path::is_path_sep (pathstring[pathstring.length () - 1]))
 	retval.append (Vdefault_load_path);
 
       size_t pos = 0;
       do
 	{
-	  pos = retval.find (std::string (SEPCHAR_STR) + 
-			     std::string (SEPCHAR_STR));
+	  pos = retval.find (dir_path::path_sep_str + dir_path::path_sep_str);
 
 	  if (pos != NPOS)
 	    retval.insert (pos+1, Vdefault_load_path);
 	}
       while (pos != NPOS);
     }
 
   return retval;
@@ -583,18 +582,18 @@ loadpath (void)
       gripe_invalid_value_specified ("LOADPATH");
       status = -1;
     }
   else if (Vload_path != s)
     {
       // I'm not sure whether this causes more problems that it
       // solves...
       //      if (! (s[0] == ':' || s[s.length () - 1] == ':'
-      //	     || s.find (std::string (SEPCHAR_STR) + 
-      //                        std::string (SEPCHAR_STR)) != NPOS))
+      //	     || s.find (dir_path::path_sep_str + 
+      //                        dir_path::path_sep_str) != NPOS))
       //	warning ("LOADPATH will ignore default load path");
 
       Vload_path = s;
 
       // By resetting the last prompt time variable, we will force
       // checks for out of date symbols even if the change to LOADPATH
       // and subsequent function calls happen between prompts.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -40,16 +40,17 @@ 02110-1301, USA.
 #endif
 #include <unistd.h>
 #endif
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "glob-match.h"
 #include "oct-env.h"
+#include "pathsearch.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
@@ -674,42 +675,68 @@ fnmatch (\"a*b\", [\"ab\"; \"axyzb\"; \"
 	}
     }
   else
     print_usage ("fnmatch");
 
   return retval;
 }
 
+DEFUN (filesep, args, ,
+    "-*- texinfo -*-\n\
+@detypefn {Built-in Function} {} filesep ()\n\
+Return the system-dependent character used to separate directory names.\n\
+@seealso{pathsep, dir, ls}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = file_ops::dir_sep_str;
+  else
+    print_usage ("filesep");
+
+  return retval;
+}
+
+DEFUN (pathsep, args, ,
+    "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} pathsep ()\n\
+Return the system-dependent character used to separate directories in\n\
+a path.\n\
+@seealso{filesep, dir, ls}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 0)
+    retval = dir_path::path_sep_str;
+  else
+    print_usage ("pathsep");
+
+  return retval;
+}
+
 static int
 confirm_recursive_rmdir (void)
 {
   Vconfirm_recursive_rmdir = check_preference ("confirm_recursive_rmdir");
 
   return 0;
 }
 
 void
 symbols_of_dirfns (void)
 {
   DEFVAR (confirm_recursive_rmdir, true, confirm_recursive_rmdir,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} confirm_recursive_rmdir\n\
 If the value of @code{confirm_recursive_rmdir} is nonzero, Octave\n\
 will ask for confirmation before recursively removing a directory tree.\n\
-The default value is 0.\n\
+The default value is 1.\n\
 @end defvr");
-
-  DEFCONST (filesep, file_ops::dir_sep_str,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} filesep\n\
-The character used to separate directory names.  The value\n\
-of this variable is system dependent.\n\
-@seealso{dir, ls}\n\
-@end defvr");
-
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
