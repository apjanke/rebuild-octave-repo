# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1356033252 18000
#      Thu Dec 20 14:54:12 2012 -0500
# Node ID bc7a130bbdfbb1169502f65ae92174296deb5279
# Parent  e7d9db9531d1ad9e462ce6b1c6326a0108db7bd6
allow history commands to take numeric arguments

* oct-hist.cc (do_history, mk_tmp_hist_file, do_edit_history,
do_runt_history): Accept args as octave_value_list instead of
string_vector.  Handle numeric and character string inputs.
(get_int_arg): New static function.
(Fhistory): Pass args and nargout to do_history instead of converting
args to a string_vector.
(Fedit_history): Pass args do_edit_history instead of converting
args to a string_vector.
(Frun_history): Likewise, for do_run_history.

diff --git a/libinterp/interpfcn/oct-hist.cc b/libinterp/interpfcn/oct-hist.cc
--- a/libinterp/interpfcn/oct-hist.cc
+++ b/libinterp/interpfcn/oct-hist.cc
@@ -124,36 +124,61 @@ static std::string Vhistory_timestamp_fo
 
 // Display, save, or load history.  Stolen and modified from bash.
 //
 // Arg of -w FILENAME means write file, arg of -r FILENAME
 // means read file, arg of -q means don't number lines.  Arg of N
 // means only display that many items.
 
 static string_vector
-do_history (int argc, const string_vector& argv, bool output = true)
+do_history (const octave_value_list& args, int nargout)
 {
-  int numbered_output = 1;
+  bool numbered_output = nargout == 0;
 
   unwind_protect frame;
+
   string_vector hlist;
 
   frame.add_fcn (command_history::set_file, command_history::file ());
 
+  int nargin = args.length ();
+
   // Number of history lines to show
-  std::string N;
-  for (int i = 1; i < argc; i++)
+  int limit = -1;
+
+  for (octave_idx_type i = 0; i < nargin; i++)
     {
-      std::string option = argv[i];
+      octave_value arg = args(i);
+
+      std::string option;
+
+      if (arg.is_string ())
+        option = arg.string_value ();
+      else if (arg.is_numeric_type ())
+        {
+          limit = arg.int_value ();
+          continue;
+        }
+      else
+        {
+          gripe_wrong_type_arg ("history", arg);
+          return hlist;
+        }
 
       if (option == "-r" || option == "-w" || option == "-a"
           || option == "-n")
         {
-          if (i < argc - 1)
-            command_history::set_file (argv[i+1]);
+          if (i < nargin - 1 && args(i+1).is_string ())
+            command_history::set_file (args(++i).string_value ());
+          else
+            {
+              error ("history: expecting file name for %s option",
+                     option.c_str ());
+              return hlist;
+            }
 
           if (option == "-a")
             // Append 'new' lines to file.
             command_history::append ();
 
           else if (option == "-w")
             // Write entire history.
             command_history::write ();
@@ -166,52 +191,55 @@ do_history (int argc, const string_vecto
             // Read 'new' history from file.
             command_history::read_range ();
 
           else
             panic_impossible ();
 
           return hlist;
         }
-      else if (argv[i] == "-q")
-        numbered_output = 0;
-      else if (argv[i] == "--")
+      else if (option == "-q")
+        numbered_output = false;
+      else if (option == "--")
         {
           i++;
           break;
         }
       else
-        // The last argument found in the command list that looks like
-        // an integer will be used
-        N = argv[i];
-    }
-
-  int limit = -1;
+        {
+          // The last argument found in the command list that looks like
+          // an integer will be used
+          int tmp;
 
-  if (N != "" && sscanf (N.c_str (), "%d", &limit) != 1)
-    {
-      if (N[0] == '-')
-        error ("history: unrecognized option '%s'", N.c_str ());
-      else
-        error ("history: bad non-numeric arg '%s'", N.c_str ());
+          if (sscanf (option.c_str (), "%d", &tmp) == 1)
+            limit = tmp;
+          else
+            {
+              if (option.length () > 0 && option[0] == '-')
+                error ("history: unrecognized option '%s'", option.c_str ());
+              else
+                error ("history: bad non-numeric arg '%s'", option.c_str ());
 
-      return hlist;
+              return  hlist;
+            }
+        }
     }
 
   if (limit < 0)
     limit = -limit;
 
-
   hlist = command_history::list (limit, numbered_output);
 
   int len = hlist.length ();
 
-  if (output)
-    for (int i = 0; i < len; i++)
-      octave_stdout << hlist[i] << "\n";
+  if (nargout == 0)
+    {
+      for (octave_idx_type i = 0; i < len; i++)
+        octave_stdout << hlist[i] << "\n";
+    }
 
   return hlist;
 }
 
 // Read the edited history lines from STREAM and return them
 // one at a time.  This can read unlimited length lines.  The
 // caller should free the storage.
 
@@ -314,19 +342,38 @@ edit_history_add_hist (const std::string
       if (len > 0 && tmp[len-1] == '\n')
         tmp.resize (len - 1);
 
       if (! tmp.empty ())
         command_history::add (tmp);
     }
 }
 
+static bool
+get_int_arg (const octave_value& arg, int& val)
+{
+  bool ok = true;
+
+  if (arg.is_string ())
+    {
+      std::string tmp = arg.string_value ();
+
+      ok = sscanf (tmp.c_str (), "%d", &val) == 1;
+    }
+  else if (arg.is_numeric_type ())
+    val = arg.int_value ();
+  else
+    ok = false;
+
+  return ok;
+}
+
 static std::string
-mk_tmp_hist_file (int argc, const string_vector& argv,
-                  int insert_curr, const char *warn_for)
+mk_tmp_hist_file (const octave_value_list& args,
+                  bool insert_curr, const char *warn_for)
 {
   std::string retval;
 
   string_vector hlist = command_history::list ();
 
   int hist_count = hlist.length ();
 
   // The current command line is already part of the history list by
@@ -339,41 +386,44 @@ mk_tmp_hist_file (int argc, const string
 
   hist_count--;
 
   // If no numbers have been specified, the default is to edit the
   // last command in the history list.
 
   int hist_end = hist_count;
   int hist_beg = hist_count;
-  int reverse = 0;
+
+  bool reverse = false;
 
   // Process options.
 
-  int usage_error = 0;
-  if (argc == 3)
+  int nargin = args.length ();
+
+  bool usage_error = false;
+  if (nargin == 2)
     {
-      if (sscanf (argv[1].c_str (), "%d", &hist_beg) != 1
-          || sscanf (argv[2].c_str (), "%d", &hist_end) != 1)
-        usage_error = 1;
-      else
+      if (get_int_arg (args(0), hist_beg)
+          && get_int_arg (args(1), hist_end))
         {
           hist_beg--;
           hist_end--;
         }
+      else
+        usage_error = true;
     }
-  else if (argc == 2)
+  else if (nargin == 1)
     {
-      if (sscanf (argv[1].c_str (), "%d", &hist_beg) != 1)
-        usage_error = 1;
-      else
+      if (get_int_arg (args(0), hist_beg))
         {
           hist_beg--;
           hist_end = hist_beg;
         }
+      else
+        usage_error = true;
     }
 
   if (hist_beg < 0 || hist_end < 0 || hist_beg > hist_count
       || hist_end > hist_count)
     {
       error ("%s: history specification out of range", warn_for);
       return retval;
     }
@@ -384,17 +434,17 @@ mk_tmp_hist_file (int argc, const string
       return retval;
     }
 
   if (hist_end < hist_beg)
     {
       int t = hist_end;
       hist_end = hist_beg;
       hist_beg = t;
-      reverse = 1;
+      reverse = true;
     }
 
   std::string name = octave_tempnam ("", "oct-");
 
   std::fstream file (name.c_str (), std::ios::out);
 
   if (! file)
     {
@@ -421,19 +471,19 @@ mk_tmp_hist_file (int argc, const string
 
 static void
 unlink_cleanup (const char *file)
 {
   gnulib::unlink (file);
 }
 
 static void
-do_edit_history (int argc, const string_vector& argv)
+do_edit_history (const octave_value_list& args)
 {
-  std::string name = mk_tmp_hist_file (argc, argv, 0, "edit_history");
+  std::string name = mk_tmp_hist_file (args, false, "edit_history");
 
   if (name.empty ())
     return;
 
   // Call up our favorite editor on the file of commands.
 
   std::string cmd = VEDITOR;
   cmd.append (" \"");
@@ -489,19 +539,19 @@ do_edit_history (int argc, const string_
 
   Vecho_executing_commands = ECHO_CMD_LINE;
   input_from_tmp_history_file = true;
 
   source_file (name);
 }
 
 static void
-do_run_history (int argc, const string_vector& argv)
+do_run_history (const octave_value_list& args)
 {
-  std::string name = mk_tmp_hist_file (argc, argv, 1, "run_history");
+  std::string name = mk_tmp_hist_file (args, true, "run_history");
 
   if (name.empty ())
     return;
 
   // Turn on command echo so the output from this will make better
   // sense.
 
   unwind_protect frame;
@@ -570,24 +620,17 @@ only extracts commands 13 through 169.  
 the first command than the last command reverses the list of commands\n\
 before placing them in the buffer to be edited.  If both arguments are\n\
 omitted, the previous command in the history list is used.\n\
 @seealso{run_history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("edit_history");
-
-  if (error_state)
-    return retval;
-
-  do_edit_history (argc, argv);
+  do_edit_history (args);
 
   return retval;
 }
 
 DEFUN (history, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Command} history options\n\
 @deftypefnx {Built-in Function} {@var{h} = } history (@var{opt1}, @var{opt2}, @dots{})\n\
@@ -615,57 +658,37 @@ and pasting commands using the X Window 
 For example, to display the five most recent commands that you have\n\
 typed without displaying line numbers, use the command\n\
 @kbd{history -q 5}.\n\
 \n\
 If invoked with a single output argument, the history will be saved to that\n\
 argument as a cell string and will not be output to screen.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("history");
-
-  if (error_state)
-    return retval;
+  octave_value retval;
 
-  string_vector hlist;
+  string_vector hlist = do_history (args, nargout);
+
   if (nargout > 0)
-    {
-      argv.append (std::string ("-q"));
-      argc++;
-      hlist = do_history (argc, argv, false);
-      retval(0) = Cell (hlist);
-    }
-  else
-    do_history (argc, argv, true);
+    retval = Cell (hlist);
 
   return retval;
 }
 
 DEFUN (run_history, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Command} {} run_history [@var{first}] [@var{last}]\n\
 Similar to @code{edit_history}, except that the editor is not invoked,\n\
 and the commands are simply executed as they appear in the history list.\n\
 @seealso{edit_history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("run_history");
-
-  if (error_state)
-    return retval;
-
-  do_run_history (argc, argv);
+  do_run_history (args);
 
   return retval;
 }
 
 DEFUN (history_control, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_control ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_control (@var{new_val})\n\
