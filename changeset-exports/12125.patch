# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1295518227 -3600
#      Thu Jan 20 11:10:27 2011 +0100
# Node ID a21a3875ca8305d6196e29cfd28a045e97dc6cab
# Parent  cd82f5933c7363216c6ea69ddd69344961ef857f
implement a common class for reference counts

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 
 #include "dim-vector.h"
 #include "idx-vector.h"
 #include "lo-traits.h"
 #include "lo-utils.h"
 #include "oct-sort.h"
 #include "quit.h"
 #include "oct-mem.h"
+#include "oct-refcount.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 class
 Array
 {
@@ -54,17 +55,17 @@ protected:
   //--------------------------------------------------------------------
 
   class ArrayRep
   {
   public:
 
     T *data;
     octave_idx_type len;
-    int count;
+    octave_refcount<int> count;
 
     ArrayRep (T *d, octave_idx_type l)
       : data (no_ctor_new<T> (l)), len (l), count (1)
         {
           copy_or_memcpy (l, d, data);
         }
 
     template <class U>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2011-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-refcount.h: New source.
+	* Makefile.am: Add it here.
+
+	* Array.h: Use octave_refcount for refcounting.
+	* Sparse.h: Ditto.
+	* SparseCmplxQR.h: Ditto.
+	* SparseQR.h: Ditto.
+	* idx-vector.h: Ditto.
+	* oct-shlib.h: Ditto.
+	* sparse-base-chol.h: Ditto.
+
 2011-01-21  Pascal Dupuis <Pascal.Dupuis@worldonline.be>
 
 	* oct-fftw.h (class octave_fftw_planner): Disallow copying
 	(class octave_float_fftw_planner): Likewise.
 	* oct-sort.h (class octave_sort): Likewise.
 	(struct oct_sort::MergeState): Likewise.
 	* SparseCmplxQR.h (class SparseComplexQR::SparseComplexQR_rep):
 	Likewise.
diff --git a/liboctave/Makefile.am b/liboctave/Makefile.am
--- a/liboctave/Makefile.am
+++ b/liboctave/Makefile.am
@@ -223,16 +223,17 @@ INCS = \
   oct-locbuf.h \
   oct-md5.h \
   oct-mem.h \
   oct-mutex.h \
   oct-norm.h \
   oct-openmp.h \
   oct-passwd.h \
   oct-rand.h \
+  oct-refcount.h \
   oct-rl-edit.h \
   oct-rl-hist.h \
   oct-shlib.h \
   oct-sort.h \
   oct-sparse.h \
   oct-spparms.h \
   oct-syscalls.h \
   oct-time.h \
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -63,17 +63,17 @@ protected:
   public:
 
     T *d;
     octave_idx_type *r;
     octave_idx_type *c;
     octave_idx_type nzmx;
     octave_idx_type nrows;
     octave_idx_type ncols;
-    int count;
+    octave_refcount<int> count;
 
     SparseRep (void) : d (0), r (0), c (new octave_idx_type [1]), nzmx (0), nrows (0),
                        ncols (0), count (1) { c[0] = 0; }
 
     SparseRep (octave_idx_type n) : d (0), r (0), c (new octave_idx_type [n+1]), nzmx (0), nrows (n),
       ncols (n), count (1)
       {
         for (octave_idx_type i = 0; i < n + 1; i++)
diff --git a/liboctave/SparseCmplxQR.h b/liboctave/SparseCmplxQR.h
--- a/liboctave/SparseCmplxQR.h
+++ b/liboctave/SparseCmplxQR.h
@@ -60,17 +60,17 @@ protected:
     ColumnVector P (void) const;
 
     SparseComplexMatrix R (const bool econ) const;
 
     ComplexMatrix C (const ComplexMatrix &b) const;
 
     ComplexMatrix Q (void) const;
 
-    int count;
+    octave_refcount<int> count;
 
     octave_idx_type nrows;
 #ifdef HAVE_CXSPARSE
     CXSPARSE_ZNAME (s) *S;
 
     CXSPARSE_ZNAME (n) *N;
 #endif
   private:
diff --git a/liboctave/SparseQR.h b/liboctave/SparseQR.h
--- a/liboctave/SparseQR.h
+++ b/liboctave/SparseQR.h
@@ -60,17 +60,17 @@ protected:
     ColumnVector P (void) const;
 
     SparseMatrix R (const bool econ) const;
 
     Matrix C (const Matrix &b) const;
 
     Matrix Q (void) const;
 
-    int count;
+    octave_refcount<int> count;
 
     octave_idx_type nrows;
 #ifdef HAVE_CXSPARSE
     CXSPARSE_DNAME (s) *S;
 
     CXSPARSE_DNAME (n) *N;
 #endif
   };
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <iosfwd>
 
 #include "dim-vector.h"
 #include "oct-inttypes.h"
 #include "oct-alloc.h"
 #include "oct-mem.h"
+#include "oct-refcount.h"
 
 template<class T> class Array;
 template<class T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
 // 4 types of index objects: a magic colon, a range, a scalar, or an index vector.
@@ -97,17 +98,17 @@ private:
     // The original dimensions of this object (used when subscribing by matrices).
     virtual dim_vector orig_dimensions (void) const { return dim_vector (); }
 
     // i/o
     virtual std::ostream& print (std::ostream& os) const = 0;
 
     virtual Array<octave_idx_type> as_array (void);
 
-    int count;
+    octave_refcount<int> count;
 
     bool err;
 
   private:
 
     // No copying!
     idx_base_rep (const idx_base_rep&);
     idx_base_rep& operator = (const idx_base_rep&);
diff --git a/liboctave/oct-refcount.h b/liboctave/oct-refcount.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-refcount.h
@@ -0,0 +1,65 @@
+/*
+
+Copyright (C) 2011 Jaroslav Hajek
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_refcount_h)
+#define octave_refcount_h 1
+
+// Encapsulates a reference counter.
+template <class T>
+class octave_refcount
+{
+public:
+  typedef T count_type;
+
+  octave_refcount(count_type initial_count) : count(initial_count) {}
+
+  // Increment/Decrement. int is postfix.
+  count_type operator++(void) 
+    { 
+      return ++count; 
+    }
+
+  count_type operator++(int) 
+    { 
+      return count++; 
+    }
+
+  count_type operator--(void)
+    { 
+      return --count; 
+    }
+
+  count_type operator--(int)
+    { 
+      return count--; 
+    }
+
+  operator count_type (void) const { return count; }
+
+  // For low-level optimizations only.
+  count_type& direct (void) const { return count; }
+
+private:
+  count_type count;
+};
+
+#endif
diff --git a/liboctave/oct-shlib.h b/liboctave/oct-shlib.h
--- a/liboctave/oct-shlib.h
+++ b/liboctave/oct-shlib.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_shlib_h)
 #define octave_shlib_h 1
 
 #include <string>
 #include <map>
 
 #include "oct-time.h"
+#include "oct-refcount.h"
 
 class
 OCTAVE_API
 octave_shlib
 {
 public: // FIXME: make this class private?
 
   typedef std::string (*name_mangler) (const std::string&);
@@ -80,17 +81,17 @@ public: // FIXME: make this class privat
     void add_fcn_name (const std::string&);
 
     bool remove_fcn_name (const std::string&);
 
     void do_close_hook (close_hook cl_hook);
 
   public:
 
-    int count;
+    octave_refcount<int> count;
 
   protected:
 
     void fake_reload (void);
 
     std::string file;
     octave_time tm_loaded;
 
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -73,17 +73,17 @@ protected:
     ColumnVector perm (void) const { return perms + 1; }
 
     p_type Q (void) const;
 
     bool is_positive_definite (void) const { return is_pd; }
 
     double rcond (void) const { return cond; }
 
-    int count;
+    octave_refcount<int> count;
 
   private:
     cholmod_sparse *Lsparse;
 
     cholmod_common Common;
 
     bool is_pd;
 
@@ -127,17 +127,17 @@ protected:
     ColumnVector perm (void) const { return perms + 1; }
 
     p_type Q (void) const;
 
     bool is_positive_definite (void) const { return is_pd; }
 
     double rcond (void) const { return cond; }
 
-    int count;
+    octave_refcount<int> count;
 
   private:
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* gl-render.cc: Use octave_refcount for refcounting.
+	* oct-map.h: Ditto.
+	* ov-base.h: Ditto.
+	* pt-mat.cc: Ditto.
+
 2011-01-22  Pascal Dupuis <Pascal.Dupuis@worldonline.be>
 
 	* ov-mex-fcn.h, txt-eng-ft.cc, mex.cc:
 	Initialize all data members in initialization list.
 
 2011-01-22  Pascal Dupuis <Pascal.Dupuis@worldonline.be>
 
 	* DLD-FUNCTIONS/__init_fltk__.cc (fltk_uimenu): Disallow copying.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -85,17 +85,17 @@ protected:
     void tex_coord (double q, double r) const
       { if (valid) glTexCoord2d (q*tx, r*ty); }
 
     GLuint id;
     int w, h;
     int tw, th;
     double tx, ty;
     bool valid;
-    int count;
+    octave_refcount<int> count;
   };
 
   texture_rep *rep;
 
 private:
   opengl_texture (texture_rep *_rep) : rep (_rep) { }
 
 public:
@@ -346,17 +346,17 @@ public:
     Matrix normal;
     double alpha;
     float ambient;
     float diffuse;
     float specular;
     float specular_exp;
 
     // reference counter
-    int count;
+    octave_refcount<int> count;
 
     vertex_data_rep (void)
       : coords (), color (), normal (), alpha (),
         ambient (), diffuse (), specular (), specular_exp (),count (1) { }
 
     vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
                      double a, float as, float ds, float ss, float se)
         : coords (c), color (col), normal (n), alpha (a),
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -38,17 +38,17 @@ octave_fields
 {
   class fields_rep : public std::map<std::string, octave_idx_type>
   {
   public:
     fields_rep (void) : std::map<std::string, octave_idx_type> (), count (1) { }
     fields_rep (const fields_rep& other)
       : std::map<std::string, octave_idx_type> (other), count (1) { }
 
-    int count;
+    octave_refcount<int> count;
 
   private:
     fields_rep& operator = (const fields_rep&); // no assignment!
   };
 
   fields_rep *rep;
 
   static fields_rep *nil_rep (void)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -771,17 +771,17 @@ protected:
   void newline (std::ostream& os) const;
 
   void reset (void) const;
 
   // A reference count.
   // NOTE: the declaration is octave_idx_type because with 64-bit indexing,
   // it is well possible to have more than MAX_INT copies of a single value
   // (think of an empty cell array with >2G elements).
-  octave_idx_type count;
+  octave_refcount<octave_idx_type> count;
 
 private:
 
   static const char *get_umap_name (unary_mapper_t);
 
   static int curr_print_indent_level;
   static bool beginning_of_line;
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -76,17 +76,17 @@ private:
       : count (1), dv (0, 0), all_str (false), all_sq_str (false),
         some_str (false), all_real (false), all_cmplx (false),
         all_mt (true), any_sparse (false), any_class (false),
         all_1x1 (! row.empty ()), class_nm (), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
-    int count;
+    octave_refcount<int> count;
 
     dim_vector dv;
 
     bool all_str;
     bool all_sq_str;
     bool all_dq_str;
     bool some_str;
     bool all_real;
