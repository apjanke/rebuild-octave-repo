# HG changeset patch
# User jwe
# Date 1155573723 0
#      Mon Aug 14 16:42:03 2006 +0000
# Node ID ceaf10a4743ca5178cc111e24c71e271f1ef662c
# Parent  84dc6800fcd89a14445ee1ea5ab0b1c2b9a9e9b1
[project @ 2006-08-14 16:42:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-08-14  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (load_path::find_dir_info, load_path::do_add,
+	load_path::do_remove): Perform tilde expansion on directory here.
+
 2006-07-29  John W. Eaton  <jwe@octave.org>
 
 	* matrix.h: Delete to avoid conflict with liboctave/Matrix.h on
 	case-insensitive filesystems.
 
 	* version.h (OCTAVE_VERSION): Now 2.9.7+.
 
 2006-07-28  John W. Eaton  <jwe@octave.org>
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -232,34 +232,38 @@ load_path::instance_ok (void)
 
       retval = false;
     }
 
   return retval;
 }
 
 load_path::const_dir_info_list_iterator
-load_path::find_dir_info (const std::string& dir) const
+load_path::find_dir_info (const std::string& dir_arg) const
 {
+  std::string dir = file_ops::tilde_expand (dir_arg);
+
   const_dir_info_list_iterator retval = dir_info_list.begin ();
 
   while (retval != dir_info_list.end ())
     {
       if (retval->dir_name == dir)
 	break;
 
       retval++;
     }
 
   return retval;
 }
 
 load_path::dir_info_list_iterator
-load_path::find_dir_info (const std::string& dir)
+load_path::find_dir_info (const std::string& dir_arg)
 {
+  std::string dir = file_ops::tilde_expand (dir_arg);
+
   dir_info_list_iterator retval = dir_info_list.begin ();
 
   while (retval != dir_info_list.end ())
     {
       if (retval->dir_name == dir)
 	break;
 
       retval++;
@@ -460,24 +464,26 @@ load_path::do_append (const std::string&
 void
 load_path::do_prepend (const std::string& dir, bool warn)
 {
   if (! dir.empty ())
     do_add (dir, false, warn);
 }
 
 void
-load_path::do_add (const std::string& dir, bool at_end, bool warn)
+load_path::do_add (const std::string& dir_arg, bool at_end, bool warn)
 {
-  size_t len = dir.length ();
+  size_t len = dir_arg.length ();
 
-  if (len > 1 && dir.substr (len-2) == "//")
+  if (len > 1 && dir_arg.substr (len-2) == "//")
     warning_with_id ("Octave:recursive-path-search",
 		     "trailing `//' is no longer special in search path elements");
 
+  std::string dir = file_ops::tilde_expand (dir_arg);
+
   dir_info_list_iterator i = find_dir_info (dir);
 
   if (i != dir_info_list.end ())
     move (i, at_end);
   else
     {
       file_stat fs (dir);
 
@@ -496,51 +502,53 @@ load_path::do_add (const std::string& di
 
 		  add_to_fcn_map (di, true);
 
 		  if (add_hook)
 		    add_hook (dir);
 		}
 	    }
 	  else if (warn)
-	    warning ("addpath: %s: not a directory", dir.c_str ());
+	    warning ("addpath: %s: not a directory", dir_arg.c_str ());
 	}
       else if (warn)
 	{
 	  std::string msg = fs.error ();
-	  warning ("addpath: %s: %s", dir.c_str (), msg.c_str ());
+	  warning ("addpath: %s: %s", dir_arg.c_str (), msg.c_str ());
 	}
     }
 
   // FIXME -- is there a better way to do this?
 
   i = find_dir_info (".");
 
   if (i != dir_info_list.end ())
     move (i, false);
   else
     panic_impossible ();
 }
 
 bool
-load_path::do_remove (const std::string& dir)
+load_path::do_remove (const std::string& dir_arg)
 {
   bool retval = false;
 
-  if (! dir.empty ())
+  if (! dir_arg.empty ())
     {
-      if (dir == ".")
+      if (dir_arg == ".")
 	{
 	  warning ("rmpath: can't remove \".\" from path");
 
 	  // Avoid additional warnings.
 	  retval = true;
 	}
       else
 	{
+	  std::string dir = file_ops::tilde_expand (dir_arg);
+
 	  dir_info_list_iterator i = find_dir_info (dir);
 
 	  if (i != dir_info_list.end ())
 	    {
 	      retval = true;
 
 	      string_vector fcn_files = i->fcn_files;
 
