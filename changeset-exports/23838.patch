# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1502143519 25200
#      Mon Aug 07 15:05:19 2017 -0700
# Node ID 6e0fd7e3c2623898b63bd000184c012e85991751
# Parent  551e4d1dd28fc00024f068c9784a1539c390e750
Fix argument lookup in '+' package functions (Bug #51532).

* pt-eval.cc (tree_evaluator::visit_index_expression): Check to see if the
expression is a package.  If it is, then indexing_object should be false.

* ov.h, ov-base.h, ov-classdef.cc (is_package): New method for checking if
object is a package.  It passes information from cdef_meta_object.

* test/module.mk, test/bug-51532/module.mk, test/+package_bug51532/foo.m,
test/bug-51532.tst: Added test for the bug.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -368,16 +368,18 @@ public:
 
   virtual bool isstruct (void) const { return false; }
 
   virtual bool isobject (void) const { return false; }
 
   virtual bool is_classdef_meta (void) const { return false; }
 
   virtual bool is_classdef_object (void) const { return false; }
+  
+  virtual bool is_package (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1013,16 +1013,18 @@ class octave_classdef_meta : public octa
 public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
   ~octave_classdef_meta (void)
   { object.meta_release (); }
 
   bool is_classdef_meta (void) const { return true; }
+  
+  bool is_package (void) const { return object.is_package(); }
 
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
   {
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -586,16 +586,19 @@ public:
   bool is_map (void) const
   { return rep->isstruct (); }
 
   bool is_classdef_meta (void) const
   { return rep->is_classdef_meta (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
+  
+  bool is_package (void) const
+  { return rep->is_package (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
   OCTAVE_DEPRECATED (4.4, "use 'isobject' instead")
   bool is_object (void) const
   { return rep->isobject (); }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1334,23 +1334,26 @@ namespace octave
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
     // If we are indexing an object or looking at something like
     //
     //   classname.static_function (args, ...);
     //
-    // then we'll just build a complete index list for one big subsref
-    // call.  If the expression we are indexing is a classname, then
-    // base_expr_val will be an octave_classdef_meta object.
-
-    bool indexing_object
-      = (base_expr_val.isobject () || base_expr_val.isjava ()
-         || base_expr_val.is_classdef_meta ());
+    // then we'll just build a complete index list for one big subsref call.
+    // If the expression we are indexing is a classname then base_expr_val will
+    // be an octave_classdef_meta object. 
+    // If we have files in a +packagename folder, they will also be an 
+    // octave_classdef_meta object, but we don't want to index them.
+
+    bool indexing_object = (   base_expr_val.isobject ()
+                            || base_expr_val.isjava ()
+                            || (base_expr_val.is_classdef_meta ()
+                                && ! base_expr_val.is_package ()));
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
     for (int i = beg; i < n; i++)
       {
         if (i > beg)
diff --git a/test/bug-51532/+package_bug51532/foo.m b/test/bug-51532/+package_bug51532/foo.m
new file mode 100644
--- /dev/null
+++ b/test/bug-51532/+package_bug51532/foo.m
@@ -0,0 +1,3 @@
+function retval = foo (val)
+  retval = val;
+end
diff --git a/test/bug-51532/bug-51532.tst b/test/bug-51532/bug-51532.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-51532/bug-51532.tst
@@ -0,0 +1,23 @@
+## Copyright (C) 2017 Piotr Held
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## Test for value returned from a +package function
+%!test
+%! r = package_bug51532.foo ("asdf");
+%! assert (ischar (r));
+%! assert (r, "asdf");
diff --git a/test/bug-51532/module.mk b/test/bug-51532/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-51532/module.mk
@@ -0,0 +1,5 @@
+bug_51532_TEST_FILES = \
+  %reldir%/bug-51532.tst \
+  %reldir%/+package_bug51532/foo.m
+
+TEST_FILES += $(bug_51532_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -52,20 +52,21 @@ include %reldir%/bug-38236/module.mk
 include %reldir%/bug-38691/module.mk
 include %reldir%/bug-41723/module.mk
 include %reldir%/bug-44940/module.mk
 include %reldir%/bug-46660/module.mk
 include %reldir%/bug-50014/module.mk
 include %reldir%/bug-50035/module.mk
 include %reldir%/bug-50716/module.mk
 include %reldir%/bug-51192/module.mk
+include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51599/module.mk
 include %reldir%/class-concat/module.mk
+include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
-include %reldir%/classdef/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/nest/module.mk
 include %reldir%/publish/module.mk
 
 ALL_LOCAL_TARGETS += %reldir%/.gdbinit
 
