# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228468818 -3600
#      Fri Dec 05 10:20:18 2008 +0100
# Node ID e3c9102431a9c50c04622e87deb34d8af98600ba
# Parent  0f8e810c69500cb42694dde9bfe25a25add0390b
fix design problems of diag & perm matrix classes

diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -524,57 +524,16 @@ operator * (const ComplexDiagMatrix& a, 
       c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
-ComplexColumnVector
-ComplexDiagMatrix::diag (octave_idx_type k) const
-{
-  octave_idx_type nnr = rows ();
-  octave_idx_type nnc = cols ();
-  if (k > 0)
-    nnc -= k;
-  else if (k < 0)
-    nnr += k;
-
-  ComplexColumnVector d;
-
-  if (nnr > 0 && nnc > 0)
-    {
-      octave_idx_type ndiag = (nnr < nnc) ? nnr : nnc;
-
-      d.resize (ndiag);
-
-      if (k > 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i+k);
-	}
-      else if ( k < 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i-k, i);
-	}
-      else
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i);
-	}
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("diag: requested diagonal out of range");
-
-  return d;
-}
-
 ComplexDET
 ComplexDiagMatrix::determinant (void) const
 {
   ComplexDET det (1.0);
   if (rows () != cols ())
     {
       (*current_liboctave_error_handler) ("determinant requires square matrix");
       det = ComplexDET (0.0);
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -117,17 +117,18 @@ public:
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
 
   // other operations
 
-  ComplexColumnVector diag (octave_idx_type k = 0) const;
+  ComplexColumnVector diag (octave_idx_type k = 0) const
+    { return MDiagArray2<Complex>::diag (k); }
 
   ComplexDET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const ComplexDiagMatrix& a);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DiagArray2.h (DiagArray2<T>): Inherit Array<T> privately.
+	(DiagArray2<T>::dim1, dim2, rows, columns, cols, length,
+	nelem, numel, byte_size, dims): New methods.
+	(DiagArray2<T>::diag): New method decl.
+	* DiagArray2.cc (DiagArray2<T>::diag): New method.
+	* MDiagArray2.h (MDiagArray2<T>::diag): New method.
+	* dDiagMatrix.cc (DiagMatrix::diag): Remove.
+	* fDiagMatrix.cc (FloatDiagMatrix::diag): Remove.
+	* CDiagMatrix.cc (ComplexDiagMatrix::diag): Remove.
+	* fCDiagMatrix.cc (FloatComplexDiagMatrix::diag): Remove.
+
+	* PermMatrix.h (PermMatrix): Inherit Array<octave_idx_type> privately.
+	(PermMatrix::dim1, dim2, rows, columns, cols, length,
+	nelem, numel, byte_size, dims): New methods.
+
+	
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* dDiagMatrix.cc (DiagMatrix::determinant, DiagMatrix::rcond): New
 	method.
 	* dDiagMatrix.h: Declare them.
 	* fDiagMatrix.cc (FloatDiagMatrix::determinant,
 	FloatDiagMatrix::rcond): New methods.
 	* fDiagMatrix.h: Declare them.
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -124,17 +124,17 @@ ComplexQRP::init (const ComplexMatrix& a
 
   q = A_fact;
   q.resize (m, n2);
 }
 
 ColumnVector
 ComplexQRP::Pvec (void) const
 {
-  Array<double> pa (p);
+  Array<double> pa (p.pvec ());
   ColumnVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -25,48 +25,73 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 
 #include <iostream>
 
+#include <algorithm>
+
 #include "DiagArray2.h"
 
 #include "lo-error.h"
 
 template <class T>
+Array<T>
+DiagArray2<T>::diag (octave_idx_type k) const
+{
+  Array<T> d;
+
+  if (k == 0)
+    {
+      // The main diagonal is shallow-copied.
+      d = *this;
+      d.dimensions = dim_vector (length ());
+    }
+  else if (k > 0 && k < cols ())
+    d = Array<T> (std::min (cols () - k, rows ()), T ());
+  else if (k < 0 && -k < rows ())
+    d = Array<T> (std::min (rows () + k, cols ()), T ());
+  else
+    (*current_liboctave_error_handler)
+      ("diag: requested diagonal out of range");
+
+  return d;
+}
+
+template <class T>
 DiagArray2<T>
 DiagArray2<T>::transpose (void) const
 {
   DiagArray2<T> retval (*this);
-  retval.dimensions = dim_vector (this->dim2 (), this->dim1 ());
+  retval.dimensions = dim_vector (dim2 (), dim1 ());
   return retval;
 }
 
 template <class T>
 DiagArray2<T>
 DiagArray2<T>::hermitian (T (* fcn) (const T&)) const
 {
-  DiagArray2<T> retval (this->dim2 (), this->dim1 ());
+  DiagArray2<T> retval (dim2 (), dim1 ());
   const T *p = this->data ();
   T *q = retval.fortran_vec ();
   for (octave_idx_type i = 0; i < this->length (); i++)
     q [i] = fcn (p [i]);
   return retval;
 }
 
 // A two-dimensional array with diagonal elements only.
 
 template <class T>
 T
 DiagArray2<T>::checkelem (octave_idx_type r, octave_idx_type c) const
 {
-  if (r < 0 || c < 0 || r >= this->dim1 () || c >= this->dim2 ())
+  if (r < 0 || c < 0 || r >= dim1 () || c >= dim2 ())
     {
       (*current_liboctave_error_handler) ("range error in DiagArray2");
       return T ();
     }
   return (r == c) ? Array<T>::xelem (r) : T (0);
 }
 
 template <class T>
@@ -74,17 +99,17 @@ void
 DiagArray2<T>::resize (octave_idx_type r, octave_idx_type c)
 {
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
-  if (r == this->dim1 () && c == this->dim2 ())
+  if (r == dim1 () && c == dim2 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = this->data ();
   octave_idx_type old_len = this->length ();
 
   octave_idx_type new_len = r < c ? r : c;
 
@@ -109,17 +134,17 @@ void
 DiagArray2<T>::resize (octave_idx_type r, octave_idx_type c, const T& val)
 {
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
-  if (r == this->dim1 () && c == this->dim2 ())
+  if (r == dim1 () && c == dim2 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = this->data ();
   octave_idx_type old_len = this->length ();
 
   octave_idx_type new_len = r < c ? r : c;
 
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -1,13 +1,14 @@
 // Template array classes
 /*
 
 Copyright (C) 1996, 1997, 2000, 2002, 2003, 2004, 2005, 2006, 2007
               John W. Eaton
+Copyright (C) 2008 Jaroslav Hajek
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -26,34 +27,36 @@ along with Octave; see the file COPYING.
 #define octave_DiagArray2_h 1
 
 #include <cassert>
 #include <cstdlib>
 
 #include "Array.h"
 #include "lo-error.h"
 
-class idx_vector;
-
 // A two-dimensional array with diagonal elements only.
 //
 // Idea and example code for Proxy class and functions from:
 //
 // From: kanze@us-es.sel.de (James Kanze)
 // Subject: Re: How to overload [] to do READ/WRITE differently ?
 // Message-ID: <KANZE.93Nov29151407@slsvhdt.us-es.sel.de>
 // Sender: news@us-es.sel.de
 // Date: 29 Nov 1993 14:14:07 GMT
 // --
 // James Kanze                             email: kanze@us-es.sel.de
 // GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
 
+// Array<T> is inherited privately because we abuse the dimensions variable
+// for true dimensions. Therefore, the inherited Array<T> object is not a valid
+// Array<T> object, and should not be publicly accessible.
+
 template <class T>
 class
-DiagArray2 : public Array<T>
+DiagArray2 : private Array<T>
 {
 private:
 
   T get (octave_idx_type i) { return Array<T>::xelem (i); }
 
   void set (const T& val, octave_idx_type i) { Array<T>::xelem (i) = val; }
 
   class Proxy
@@ -107,16 +110,18 @@ friend class Proxy;
 
 protected:
 
   DiagArray2 (T *d, octave_idx_type r, octave_idx_type c) : Array<T> (d, r < c ? r : c)
     { Array<T>::dimensions = dim_vector (r, c); }
 
 public:
 
+  typedef T element_type;
+
   DiagArray2 (void) : Array<T> (dim_vector (0, 0)) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c) : Array<T> (r < c ? r : c)
     { this->dimensions = dim_vector (r, c); }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c, const T& val) : Array<T> (r < c ? r : c)
     {
       this->dimensions = dim_vector (r, c);
@@ -126,48 +131,66 @@ public:
 
   DiagArray2 (const Array<T>& a) : Array<T> (a)
     { this->dimensions = dim_vector (a.length (), a.length ()); }
 
   DiagArray2 (const DiagArray2<T>& a) : Array<T> (a)
     { this->dimensions = a.dims (); }
 
   template <class U>
-  DiagArray2 (const DiagArray2<U>& a) : Array<T> (a)
+  DiagArray2 (const DiagArray2<U>& a) : Array<T> (a.diag ())
     { this->dimensions = a.dims (); }
 
   ~DiagArray2 (void) { }
 
   DiagArray2<T>& operator = (const DiagArray2<T>& a)
     {
       if (this != &a)
 	Array<T>::operator = (a);
 
       return *this;
     }
 
+
+  octave_idx_type dim1 (void) const { return Array<T>::dimensions(0); }
+  octave_idx_type dim2 (void) const { return Array<T>::dimensions(1); }
+
+  octave_idx_type rows (void) const { return dim1 (); }
+  octave_idx_type cols (void) const { return dim2 (); }
+  octave_idx_type columns (void) const { return dim2 (); }
+
+  octave_idx_type length (void) const { return Array<T>::length (); }
+  octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
+  octave_idx_type numel (void) const { return nelem (); }
+
+  size_t byte_size (void) const { return length () * sizeof (T); }
+
+  dim_vector dims (void) const { return Array<T>::dimensions; }
+
+  Array<T> diag (octave_idx_type k = 0) const;
+
   Proxy elem (octave_idx_type r, octave_idx_type c)
     {
       return Proxy (this, r, c);
     }
 
   Proxy checkelem (octave_idx_type r, octave_idx_type c)
     {
-      if (r < 0 || c < 0 || r >= this->dim1 () || c >= this->dim2 ())
+      if (r < 0 || c < 0 || r >= dim1 () || c >= dim2 ())
 	{
 	  (*current_liboctave_error_handler) ("range error in DiagArray2");
 	  return Proxy (0, r, c);
 	}
       else
 	return Proxy (this, r, c);
     }
 
   Proxy operator () (octave_idx_type r, octave_idx_type c)
     {
-      if (r < 0 || c < 0 || r >= this->dim1 () || c >= this->dim2 ())
+      if (r < 0 || c < 0 || r >= dim1 () || c >= dim2 ())
 	{
 	  (*current_liboctave_error_handler) ("range error in DiagArray2");
 	  return Proxy (0, r, c);
 	}
       else
 	return Proxy (this, r, c);
   }
 
@@ -199,16 +222,25 @@ public:
       return (r == c) ? Array<T>::xelem (r) : T (0);
     }
 
   void resize (octave_idx_type n, octave_idx_type m);
   void resize (octave_idx_type n, octave_idx_type m, const T& val);
 
   DiagArray2<T> transpose (void) const;
   DiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const;
+
+  const T *data (void) const { return Array<T>::data (); }
+
+  const T *fortran_vec (void) const { return Array<T>::fortran_vec (); }
+
+  T *fortran_vec (void) { return Array<T>::fortran_vec (); }
+
+  void print_info (std::ostream& os, const std::string& prefix) const
+    { Array<T>::print_info (os, prefix); }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_MDiagArray2_h)
 #define octave_MDiagArray2_h 1
 
 #include "DiagArray2.h"
 #include "MArray2.h"
+#include "MArray.h"
 
 // Two dimensional diagonal array with math ops.
 
 // But first, some preprocessor abuse...
 
 #include "MArray-defs.h"
 
 MDIAGARRAY2_OPS_FORWARD_DECLS (MDiagArray2, )
@@ -83,29 +84,32 @@ public:
 
       return retval;
     }
 
   octave_idx_type nnz (void) const
     {
       octave_idx_type retval = 0;
 
-      const T *d = this->Array<T>::data ();
+      const T *d = this->data ();
 
-      octave_idx_type nel = this->Array<T>::numel ();
+      octave_idx_type nel = this->length ();
 
       for (octave_idx_type i = 0; i < nel; i++)
 	{
 	  if (d[i] != T ())
 	    retval++;
 	}
 
       return retval;
     }
 
+  MArray<T> diag (octave_idx_type k = 0) const
+    { return DiagArray2<T>::diag (k); }
+
   MDiagArray2<T> transpose (void) const { return DiagArray2<T>::transpose (); }
   MDiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const { return DiagArray2<T>::hermitian (fcn); }
 
   bool is_multiple_of_identity (T val) const;
 
   static MDiagArray2<T> nil_array;
 
   // Currently, the OPS functions don't need to be friends, but that
diff --git a/liboctave/PermMatrix.cc b/liboctave/PermMatrix.cc
--- a/liboctave/PermMatrix.cc
+++ b/liboctave/PermMatrix.cc
@@ -118,17 +118,17 @@ PermMatrix::determinant (void) const
     }
   
   return neg ? -1 : 1;
 }
 
 PermMatrix 
 operator *(const PermMatrix& a, const PermMatrix& b)
 {
-  const Array<octave_idx_type>& ia = a, ib = b;
+  const Array<octave_idx_type> ia = a.pvec (), ib = b.pvec ();
   PermMatrix r;
   octave_idx_type n = a.columns ();
   if (n != b.rows ())
     gripe_nonconformant ("operator *", n, n, b.rows (), b.rows ());
   else if (a._colp == b._colp)
     {
       r = PermMatrix ((a._colp 
                        ? ia.index (idx_vector (ib)) 
diff --git a/liboctave/PermMatrix.h b/liboctave/PermMatrix.h
--- a/liboctave/PermMatrix.h
+++ b/liboctave/PermMatrix.h
@@ -21,37 +21,65 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_PermMatrix_h)
 #define octave_PermMatrix_h 1
 
 #include "Array.h"
 #include "mx-defs.h"
 
-class PermMatrix : public Array<octave_idx_type>
+// Array<T> is inherited privately because we abuse the dimensions variable
+// for true dimensions. Therefore, the inherited Array<T> object is not a valid
+// Array<T> object, and should not be publicly accessible.
+
+class PermMatrix : private Array<octave_idx_type>
 {
 private:
 
   octave_idx_type get (octave_idx_type i) const { return Array<octave_idx_type>::xelem (i); }
 
 public:
 
   PermMatrix (void) : Array<octave_idx_type> (), _colp (false) { }
 
   PermMatrix (octave_idx_type n);
 
   PermMatrix (const Array<octave_idx_type>& p, bool colp = false, 
               bool check = true);
 
   PermMatrix (const PermMatrix& m)
-    : Array<octave_idx_type> (m), _colp(m._colp) 
-    { this->dimensions = m.dims (); }
+    : Array<octave_idx_type> (m), _colp(m._colp) { }
   
   PermMatrix (const idx_vector& idx, bool colp = false, octave_idx_type n = 0); 
 
+  octave_idx_type dim1 (void) const 
+    { return Array<octave_idx_type>::dimensions(0); }
+  octave_idx_type dim2 (void) const 
+    { return Array<octave_idx_type>::dimensions(1); }
+
+  octave_idx_type rows (void) const { return dim1 (); }
+  octave_idx_type cols (void) const { return dim2 (); }
+  octave_idx_type columns (void) const { return dim2 (); }
+
+  octave_idx_type length (void) const 
+    { return Array<octave_idx_type>::length (); }
+  octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
+  octave_idx_type numel (void) const { return nelem (); }
+
+  size_t byte_size (void) const { return length () * sizeof (octave_idx_type); }
+
+  dim_vector dims (void) const { return Array<octave_idx_type>::dimensions; }
+
+  Array<octave_idx_type> pvec (void) const
+    {
+      Array<octave_idx_type> retval (*this);
+      retval.dimensions = dim_vector (length ());
+      return retval;
+    }
+
   octave_idx_type 
   elem (octave_idx_type i, octave_idx_type j) const
     {
       return (_colp 
               ? ((get(j) != i) ? 1 : 0)
               : ((get(i) != j) ? 1 : 0));
     }
 
@@ -75,16 +103,28 @@ public:
   // Determinant, i.e. the sign of permutation.
   octave_idx_type determinant (void) const;
 
   bool is_col_perm (void) const { return _colp; }
   bool is_row_perm (void) const { return !_colp; }
 
   friend PermMatrix operator *(const PermMatrix& a, const PermMatrix& b);
 
+  const octave_idx_type *data (void) const 
+    { return Array<octave_idx_type>::data (); }
+
+  const octave_idx_type *fortran_vec (void) const 
+    { return Array<octave_idx_type>::fortran_vec (); }
+
+  octave_idx_type *fortran_vec (void) 
+    { return Array<octave_idx_type>::fortran_vec (); }
+
+  void print_info (std::ostream& os, const std::string& prefix) const
+    { Array<octave_idx_type>::print_info (os, prefix); }
+
 private:
   bool _colp;
 };
 
 // Multiplying permutations together.
 PermMatrix 
 operator *(const PermMatrix& a, const PermMatrix& b);
 
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -337,61 +337,16 @@ operator * (const DiagMatrix& a, const D
       c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
-ColumnVector
-DiagMatrix::diag (octave_idx_type k) const
-{
-  ColumnVector d;
-
-  octave_idx_type nnr = rows ();
-  octave_idx_type nnc = cols ();
-
-  if (nnr == 0 || nnc == 0)
-    return d;
-    
-  if (k > 0)
-    nnc -= k;
-  else if (k < 0)
-    nnr += k;
-
-  if (nnr > 0 && nnc > 0)
-    {
-      octave_idx_type ndiag = (nnr < nnc) ? nnr : nnc;
-
-      d.resize (ndiag);
-
-      if (k > 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i+k);
-	}
-      else if ( k < 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i-k, i);
-	}
-      else
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i);
-	}
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("diag: requested diagonal out of range");
-
-  return d;
-}
-
 DET
 DiagMatrix::determinant (void) const
 {
   DET det (1.0);
   if (rows () != cols ())
     {
       (*current_liboctave_error_handler) ("determinant requires square matrix");
       det = 0.0;
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -92,17 +92,18 @@ public:
   ColumnVector column (octave_idx_type i) const;
   ColumnVector column (char *s) const;
 
   DiagMatrix inverse (void) const;
   DiagMatrix inverse (int& info) const;
 
   // other operations
 
-  ColumnVector diag (octave_idx_type k = 0) const;
+  ColumnVector diag (octave_idx_type k = 0) const
+    { return MDiagArray2<double>::diag (k); }
 
   DET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -246,17 +246,17 @@ Matrix::Matrix (const DiagMatrix& a)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 Matrix::Matrix (const PermMatrix& a)
   : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
-  const Array<octave_idx_type> ia (a);
+  const Array<octave_idx_type> ia (a.pvec ());
   octave_idx_type len = a.rows ();
   if (a.is_col_perm ())
     for (octave_idx_type i = 0; i < len; i++)
       elem (ia(i), i) = 1.0;
   else
     for (octave_idx_type i = 0; i < len; i++)
       elem (i, ia(i)) = 1.0;
 }
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -118,17 +118,17 @@ QRP::init (const Matrix& a, QR::type qr_
 
   q = A_fact;
   q.resize (m, n2);
 }
 
 ColumnVector
 QRP::Pvec (void) const
 {
-  Array<double> pa (p);
+  Array<double> pa (p.pvec ());
   ColumnVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -545,57 +545,16 @@ operator * (const FloatComplexDiagMatrix
         c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
-FloatComplexColumnVector
-FloatComplexDiagMatrix::diag (octave_idx_type k) const
-{
-  octave_idx_type nnr = rows ();
-  octave_idx_type nnc = cols ();
-  if (k > 0)
-    nnc -= k;
-  else if (k < 0)
-    nnr += k;
-
-  FloatComplexColumnVector d;
-
-  if (nnr > 0 && nnc > 0)
-    {
-      octave_idx_type ndiag = (nnr < nnc) ? nnr : nnc;
-
-      d.resize (ndiag);
-
-      if (k > 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i+k);
-	}
-      else if ( k < 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i-k, i);
-	}
-      else
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i);
-	}
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("diag: requested diagonal out of range");
-
-  return d;
-}
-
 FloatComplexDET
 FloatComplexDiagMatrix::determinant (void) const
 {
   FloatComplexDET det (1.0f);
   if (rows () != cols ())
     {
       (*current_liboctave_error_handler) ("determinant requires square matrix");
       det = FloatComplexDET (0.0);
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -117,17 +117,18 @@ public:
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
   FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);
 
   // other operations
 
-  FloatComplexColumnVector diag (octave_idx_type k = 0) const;
+  FloatComplexColumnVector diag (octave_idx_type k = 0) const
+    { return MDiagArray2<FloatComplex>::diag (k); }
 
   FloatComplexDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const FloatComplexDiagMatrix& a);
 
diff --git a/liboctave/fCmplxQRP.cc b/liboctave/fCmplxQRP.cc
--- a/liboctave/fCmplxQRP.cc
+++ b/liboctave/fCmplxQRP.cc
@@ -124,17 +124,17 @@ FloatComplexQRP::init (const FloatComple
 
   q = A_fact;
   q.resize (m, n2);
 }
 
 FloatColumnVector
 FloatComplexQRP::Pvec (void) const
 {
-  Array<float> pa (p);
+  Array<float> pa (p.pvec ());
   FloatColumnVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -344,61 +344,16 @@ operator * (const FloatDiagMatrix& a, co
         c.elem (i, i) = a_element * b_element;
     }
 
   return c;
 }
 
 // other operations
 
-FloatColumnVector
-FloatDiagMatrix::diag (octave_idx_type k) const
-{
-  FloatColumnVector d;
-
-  octave_idx_type nnr = rows ();
-  octave_idx_type nnc = cols ();
-
-  if (nnr == 0  || nnc == 0)
-    return d;
-    
-  if (k > 0)
-    nnc -= k;
-  else if (k < 0)
-    nnr += k;
-
-  if (nnr > 0 && nnc > 0)
-    {
-      octave_idx_type ndiag = (nnr < nnc) ? nnr : nnc;
-
-      d.resize (ndiag);
-
-      if (k > 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i+k);
-	}
-      else if ( k < 0)
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i-k, i);
-	}
-      else
-	{
-	  for (octave_idx_type i = 0; i < ndiag; i++)
-	    d.elem (i) = elem (i, i);
-	}
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("diag: requested diagonal out of range");
-
-  return d;
-}
-
 FloatDET
 FloatDiagMatrix::determinant (void) const
 {
   FloatDET det (1.0f);
   if (rows () != cols ())
     {
       (*current_liboctave_error_handler) ("determinant requires square matrix");
       det = 0.0f;
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -92,17 +92,18 @@ public:
   FloatColumnVector column (octave_idx_type i) const;
   FloatColumnVector column (char *s) const;
 
   FloatDiagMatrix inverse (void) const;
   FloatDiagMatrix inverse (int& info) const;
 
   // other operations
 
-  FloatColumnVector diag (octave_idx_type k = 0) const;
+  FloatColumnVector diag (octave_idx_type k = 0) const
+    { return MDiagArray2<float>::diag (k); }
 
   FloatDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatDiagMatrix& a);
 
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -245,17 +245,17 @@ FloatMatrix::FloatMatrix (const FloatDia
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 FloatMatrix::FloatMatrix (const PermMatrix& a)
   : MArray2<float> (a.rows (), a.cols (), 0.0)
 {
-  const Array<octave_idx_type> ia (a);
+  const Array<octave_idx_type> ia (a.pvec ());
   octave_idx_type len = a.rows ();
   if (a.is_col_perm ())
     for (octave_idx_type i = 0; i < len; i++)
       elem (ia(i), i) = 1.0;
   else
     for (octave_idx_type i = 0; i < len; i++)
       elem (i, ia(i)) = 1.0;
 }
diff --git a/liboctave/floatQRP.cc b/liboctave/floatQRP.cc
--- a/liboctave/floatQRP.cc
+++ b/liboctave/floatQRP.cc
@@ -118,17 +118,17 @@ FloatQRP::init (const FloatMatrix& a, QR
 
   q = A_fact;
   q.resize (m, n2);
 }
 
 FloatColumnVector
 FloatQRP::Pvec (void) const
 {
-  Array<float> pa (p);
+  Array<float> pa (p.pvec ());
   FloatColumnVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -552,17 +552,17 @@ idx_vector::is_permutation (octave_idx_t
               left[k] = false;
           else
             {
               retval = false;
               break;
             }
         }
 
-      delete left;
+      delete [] left;
     }
 
   return retval;
 }
 
 octave_idx_type 
 idx_vector::freeze (octave_idx_type z_len, const char *tag, bool resize_ok)
 {
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -1296,40 +1296,40 @@ M operator * (const PM& p, const M& x) \
   M result; \
   if (p.columns () != nr) \
     gripe_nonconformant ("operator *", p.rows (), p.columns (), nr, nc); \
   else \
     { \
       if (p.is_col_perm ()) \
         { \
           result = M (nr, nc); \
-          result.assign (idx_vector (p), idx_vector::colon, x); \
+          result.assign (p.pvec (), idx_vector::colon, x); \
         } \
       else \
-        result = x.index (idx_vector (p), idx_vector::colon); \
+        result = x.index (p.pvec (), idx_vector::colon); \
     } \
   \
   return result; \
 }
 
 #define MPM_MULTIPLY_OP(M, PM) \
 M operator * (const M& x, const PM& p) \
 { \
   octave_idx_type nr = x.rows (), nc = x.columns (); \
   M result; \
   if (p.rows () != nc) \
     gripe_nonconformant ("operator *", nr, nc, p.rows (), p.columns ()); \
   else \
     { \
       if (p.is_col_perm ()) \
-        result = x.index (idx_vector::colon, idx_vector (p)); \
+        result = x.index (idx_vector::colon, p.pvec ()); \
       else \
         { \
           result = M (nr, nc); \
-          result.assign (idx_vector::colon, idx_vector (p), x); \
+          result.assign (idx_vector::colon, p.pvec (), x); \
         } \
     } \
   \
   return result; \
 }
 
 #define PMM_BIN_OP_DECLS(R, PM, M, API) \
   BIN_OP_DECL (R, operator *, PM, M, API);
