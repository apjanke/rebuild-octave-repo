# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1416947578 18000
#      Tue Nov 25 15:32:58 2014 -0500
# Branch gui-release
# Node ID 998628b7963a13eac2017dc30fc175e95dcfc18f
# Parent  2d8728156ba4fc8d956985005bb7e88b0d5b02ca
# Parent  c6437824681c3d54272f019e0bea6b3b33af6bd2
maint: Periodic merge of stable to gui-release.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1053,17 +1053,17 @@ gamma (z) = | t^(z-1) exp (-t) dt.\n\
 %!test
 %! x = single ([.5, 1, 1.5, 2, 3, 4, 5]);
 %! v = single ([sqrt(pi), 1, .5*sqrt(pi), 1, 2, 6, 24]);
 %! assert (gamma (x), v, sqrt (eps ("single")));
 
 %!test
 %! ## Test exceptional values
 %! x = [-Inf, -1, -0, 0, 1, Inf, NaN];
-%! v = [NaN, NaN, -Inf, Inf, 1, Inf, NaN];
+%! v = [Inf, Inf, -Inf, Inf, 1, Inf, NaN];
 %! assert (gamma (x), v);
 %! assert (gamma (single (x)), single (v));
 
 %!error gamma ()
 %!error gamma (1, 2)
 */
 
 DEFUN (imag, args, ,
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -361,31 +361,32 @@ dawson (const FloatComplex& x)
   return FloatComplex (real (ret), imag (ret));
 }
 
 double
 xgamma (double x)
 {
   double result;
 
-  if (xisnan (x) || (x < 0 && (xisinf (x) || D_NINT (x) == x)))
+  // Special cases for (near) compatibility with Matlab instead of
+  // tgamma.  Matlab does not have -0.
+
+  if (x == 0)
+    result = xnegative_sign (x) ? -octave_Inf : octave_Inf;
+  else if ((x < 0 && D_NINT (x) == x) || xisinf (x))
+    result = octave_Inf;
+  else if (xisnan (x))
     result = octave_NaN;
-  else if (x == 0 && xnegative_sign (x))
-    result = -octave_Inf;
-  else if (x == 0 || xisinf (x))
-    result = octave_Inf;
   else
     {
 #if defined (HAVE_TGAMMA)
       result = tgamma (x);
 #else
       F77_XFCN (xdgamma, XDGAMMA, (x, result));
 #endif
-      if (xisinf (result) && (static_cast<int> (gnulib::floor (x)) % 2))
-        result = -octave_Inf;
     }
 
   return result;
 }
 
 double
 xlgamma (double x)
 {
@@ -432,31 +433,32 @@ rc_lgamma (double x)
     return result;
 }
 
 float
 xgamma (float x)
 {
   float result;
 
-  if (xisnan (x) || (x < 0 && (xisinf (x) || D_NINT (x) == x)))
+  // Special cases for (near) compatibility with Matlab instead of
+  // tgamma.  Matlab does not have -0.
+
+  if (x == 0)
+    result = xnegative_sign (x) ? -octave_Float_Inf : octave_Float_Inf;
+  else if ((x < 0 && D_NINT (x) == x) || xisinf (x))
+    result = octave_Float_Inf;
+  else if (xisnan (x))
     result = octave_Float_NaN;
-  else if (x == 0 && xnegative_sign (x))
-    result = -octave_Float_Inf;
-  else if (x == 0 || xisinf (x))
-    result = octave_Float_Inf;
   else
     {
 #if defined (HAVE_TGAMMA)
       result = tgammaf (x);
 #else
       F77_XFCN (xgamma, XGAMMA, (x, result));
 #endif
-      if (xisinf (result) && (static_cast<int> (gnulib::floor (x)) % 2))
-        result = -octave_Float_Inf;
     }
 
   return result;
 }
 
 float
 xlgamma (float x)
 {
