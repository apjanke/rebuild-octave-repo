# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1310850572 14400
#      Sat Jul 16 17:09:32 2011 -0400
# Node ID 8c6d715209201a6d358a88e72095c70271df4d61
# Parent  56bc9eda5c9c04084d9530f386a193c6e887a56b
codesprint: new tests for sysdep.cc functions

* sysdep.cc (FSIG, Fdebug_on_interrupt, Fsighup_dumps_octave_core,
  Fsigterm_dumps_octave_core): New tests.

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -940,44 +940,77 @@ Return a structure containing Unix signa
       retval = m;
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!error SIG (1);
+%!assert (isstruct (SIG ()));
+%!assert (! isempty (SIG ()));
+*/
+
 DEFUN (debug_on_interrupt, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_interrupt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_interrupt (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter debugging mode when it receives an interrupt signal (typically\n\
 generated with @kbd{C-c}).  If a second interrupt signal is received\n\
 before reaching the debugging mode, a normal interrupt will occur.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_interrupt);
 }
 
+/*
+%!error (debug_on_interrupt (1, 2));
+%!test
+%! old_val = debug_on_interrupt (false);
+%! debug_on_interrupt (true);
+%! assert (debug_on_interrupt (true));
+%! debug_on_interrupt (old_val);
+*/
+
 DEFUN (sighup_dumps_octave_core, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} sighup_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sighup_dumps_octave_core (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file \"octave-core\" if it receives\n\
 a hangup signal.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sighup_dumps_octave_core);
 }
 
+/*
+%!error (sighup_dumps_octave_core (1, 2));
+%!test
+%! old_val = sighup_dumps_octave_core (false);
+%! sighup_dumps_octave_core (true);
+%! assert (sighup_dumps_octave_core (true));
+%! sighup_dumps_octave_core (old_val);
+*/
+
 DEFUN (sigterm_dumps_octave_core, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} sigterm_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sigterm_dumps_octave_core (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file \"octave-core\" if it receives\n\
 a terminate signal.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sigterm_dumps_octave_core);
 }
+
+/*
+%!error (sigterm_dumps_octave_core (1, 2));
+%!test
+%! old_val = sigterm_dumps_octave_core (false);
+%! sigterm_dumps_octave_core (true);
+%! assert (sigterm_dumps_octave_core (true));
+%! sigterm_dumps_octave_core (old_val);
+*/
