# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345763254 14400
#      Thu Aug 23 19:07:34 2012 -0400
# Node ID 2d337a9869e9fab0c048cfbd292f94193e25e7c9
# Parent  a44e4a08fc55098d96489354f98cbe5808d05fdb
correctly handle multiple --path command line arguments

* octave.cc (command_line_path): Now a list of strings.
(octave_process_command_line): Append --path args to
command_line_path list.
(octave_initialize_interpreter): Call load_path::set_command_line_path
on each element of commnad_line_path list.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -133,17 +133,17 @@ static bool no_gui_option = false;
 static bool forced_line_editing = false;
 
 // If TRUE, initialize history list from saved history file.
 // (--no-history; -H)
 static bool read_history_file = true;
 
 // The value of "path" specified on the command line.
 // (--path; -p)
-static std::string command_line_path;
+static std::list<std::string> command_line_path;
 
 // Flags used to determine what commands should be echoed when they are
 // parsed and executed.
 // (--echo-commands; -x)
 static int echo_executing_commands = 0;
 
 // The file used for the doc string cache.
 // (--doc-cache-file)
@@ -753,17 +753,17 @@ octave_process_command_line (int argc, c
           break;
 
         case 'i':
           forced_interactive = true;
           break;
 
         case 'p':
           if (optarg)
-            command_line_path = optarg;
+            command_line_path.push_back (optarg);
           break;
 
         case 'q':
           inhibit_startup_message = true;
           break;
 
         case 'x':
           echo_executing_commands
@@ -926,18 +926,19 @@ octave_initialize_interpreter (int argc,
 
   install_ops ();
 
   install_builtins ();
 
   if (! read_history_file)
     bind_internal_variable ("saving_history", false);
 
-  if (! command_line_path.empty ())
-    load_path::set_command_line_path (command_line_path);
+  for (std::list<std::string>::const_iterator it = command_line_path.begin ();
+       it != command_line_path.end (); it++)
+    load_path::set_command_line_path (*it);
 
   if (echo_executing_commands)
     bind_internal_variable ("echo_executing_commands",
                             echo_executing_commands);
 
   if (! doc_cache_file.empty ())
     bind_internal_variable ("doc_cache_file", doc_cache_file);
 
