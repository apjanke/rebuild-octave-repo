# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1426355663 -3600
#      Sat Mar 14 18:54:23 2015 +0100
# Node ID f7a805f02723cf06e4dc4c6d2bd81645680bfbd7
# Parent  941e782d0429dc7b47319fdcfab87b2bfcff6663
link undo in main window to editor if the latter has focus (bug #44402)

* file-editor.cc (editor_tab_has_focus): helper function checking whether
  an edit area has the focus;
  (copyClipboard, pasteClipboard, selectAll): use this helper function;
  (do_undo): new slot for the undo action triggered from the main window

* file-editor.h: new helper function and new slots

* main-window.cc (handle_undo_request): emit a signal for undo instead of
  undoing in terminal window when terminal does not have focus

* main-window.h: new undo signal

* octave-dock-widget.cc (octave_dock_widget): connect undo signal from
  main-window to new virtual slot;

* octave-dock-widget.h: new virtual slot do_undo, doing nothing

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1754,45 +1754,49 @@ file_editor::add_file_editor_tab (file_e
                                                      int)),
            f, SLOT (do_breakpoint_marker (bool, const QWidget*, int)));
 
   _tab_widget->setCurrentWidget (f);
 
   check_actions ();
 }
 
+bool
+file_editor::editor_tab_has_focus ()
+{
+  QWidget * foc_w = focusWidget ();
+  if (foc_w && foc_w->inherits ("octave_qscintilla"))
+    return true;
+  return false;
+}
+
 void
 file_editor::copyClipboard ()
 {
-  QWidget * foc_w = focusWidget ();
-
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_copy (true);
-    }
+  if (editor_tab_has_focus ())
+    request_copy (true);
 }
 void
 file_editor::pasteClipboard ()
 {
-  QWidget * foc_w = focusWidget ();
-
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_paste (true);
-    }
+  if (editor_tab_has_focus ())
+    request_paste (true);
 }
 void
 file_editor::selectAll ()
 {
-  QWidget * foc_w = focusWidget ();
+  if (editor_tab_has_focus ())
+    request_selectall (true);
+}
 
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_selectall (true);
-    }
+void
+file_editor::do_undo ()
+{
+  if (editor_tab_has_focus ())
+    request_undo (true);
 }
 
 void
 file_editor::set_shortcuts ()
 {
   // File menu
   shortcut_manager::set_shortcut (_edit_function_action, "editor_file:edit_function");
   shortcut_manager::set_shortcut (_save_action, "editor_file:save");
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -208,16 +208,17 @@ public slots:
   void handle_visibility (bool visible);
 
   void update_octave_directory (const QString& dir);
 
 protected slots:
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
+  void do_undo ();
 
 private slots:
 
   void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
@@ -247,16 +248,18 @@ private:
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
+  bool editor_tab_has_focus ();
+
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
 
   std::map<QString, QWidget *> editor_tab_map;
   QHash<QMenu*, QStringList> _hash_menu_text;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -282,17 +282,20 @@ main_window::handle_rename_variable_requ
 
   octave_link::post_event (this, &main_window::rename_variable_callback,
                            names);
 }
 
 void
 main_window::handle_undo_request (void)
 {
-  octave_link::post_event (this, &main_window::command_window_undo_callback);
+  if (command_window_has_focus ())
+    octave_link::post_event (this, &main_window::command_window_undo_callback);
+  else
+    emit undo_signal ();
 }
 
 void
 main_window::handle_clear_command_window_request (void)
 {
   octave_link::post_event (this, &main_window::clear_command_window_callback);
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -98,16 +98,17 @@ signals:
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line);
 
   void copyClipboard_signal (void);
   void pasteClipboard_signal (void);
   void selectAll_signal (void);
+  void undo_signal (void);
 
 public slots:
 
   void focus_changed (QWidget *w_old, QWidget *w_new);
   void request_reload_settings ();
 
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -110,16 +110,18 @@ octave_dock_widget::octave_dock_widget (
 
   // copy & paste handling
   connect (p, SIGNAL (copyClipboard_signal ()),
            this, SLOT (copyClipboard ()));
   connect (p, SIGNAL (pasteClipboard_signal ()),
            this, SLOT (pasteClipboard ()));
   connect (p, SIGNAL (selectAll_signal ()),
            this, SLOT (selectAll ()));
+  // undo handling
+  connect (p, SIGNAL (undo_signal ()), this, SLOT (do_undo ()));
 
   installEventFilter (this);
 
 }
 
 octave_dock_widget::~octave_dock_widget ()
 {
   // save state of this dock-widget
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -92,25 +92,21 @@ protected slots:
 
   /** Slot to steer changing visibility from outside. */
   virtual void handle_visibility_changed (bool visible)
   {
     if (visible)
       emit active_changed (true);
   }
   /** slots to handle copy & paste */
-  virtual void copyClipboard ()
-  {
-  }
-  virtual void pasteClipboard ()
-  {
-  }
-  virtual void selectAll ()
-  {
-  }
+  virtual void copyClipboard () {  }
+  virtual void pasteClipboard () {  }
+  virtual void selectAll () {  }
+  /** slots to handle undo */
+  virtual void do_undo () {  }
 
   // event filter for double clicks into the window decoration elements
   bool eventFilter(QObject *obj, QEvent *e);
 
 private slots:
 
   void change_floating (bool);
   void change_visibility (bool);
