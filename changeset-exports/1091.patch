# HG changeset patch
# User jwe
# Date 791685014 0
#      Thu Feb 02 00:30:14 1995 +0000
# Node ID 54abf1b3a8e9a0ce7ded09837a9e66fe5b87be2f
# Parent  d5b0d11e3200f8e7f1b83fb0ed486352beedd4d5
[project @ 1995-02-02 00:30:14 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -116,18 +116,18 @@ static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static char *strip_trailing_whitespace (char *s);
 static void handle_number (char *yytext);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_brace (int spc_gobbled);
 static int handle_identifier (char *tok, int spc_gobbled);
-static int have_continuation (void);
-static int have_ellipsis_continuation (void);
+static int have_continuation (int trailing_comments_ok = 1);
+static int have_ellipsis_continuation (int trailing_comments_ok = 1);
 static int eat_whitespace (void);
 static int eat_continuation (void);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	[\n]
@@ -1455,17 +1455,17 @@ handle_number (char *yytext)
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
 // If non-whitespace characters are found before comment
 // characters, return 0.  Otherwise, return 1.
 
 static int
-have_continuation (void)
+have_continuation (int trailing_comments_ok)
 {
   ostrstream buf;
 
   int in_comment = 0;
   char c;
   while ((c = yyinput ()) != EOF)
     {
       buf << (char) c;
@@ -1473,60 +1473,62 @@ have_continuation (void)
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  break;
 
 	case '%':
 	case '#':
-	  in_comment = 1;
+	  if (trailing_comments_ok)
+	    in_comment = 1;
+	  else
+	    goto cleanup;
 	  break;
 
 	case '\n':
 	  current_input_column = 0;
 	  promptflag--;
 	  return 1;
 
 	default:
-	  if (in_comment)
-	    break;
-	  else
-	    {
-	      buf << ends;
-	      char *s = buf.str ();
-	      if (s)
-		{
-		  int len = strlen (s);
-		  while (len--)
-		    yyunput (s[len], yytext);
-		}
-	      delete [] s;
-	      return 0;
-	    }
+	  if (! in_comment)
+	    goto cleanup;
+	  break;
 	}
     }
 
   yyunput (c, yytext);
+  return 0;
 
+ cleanup:
+  buf << ends;
+  char *s = buf.str ();
+  if (s)
+    {
+      int len = strlen (s);
+      while (len--)
+	yyunput (s[len], yytext);
+    }
+  delete [] s;
   return 0;
 }
 
 // We have seen a `.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
 // line character.
 
 static int
-have_ellipsis_continuation (void)
+have_ellipsis_continuation (int trailing_comments_ok)
 {
   char c1 = yyinput ();
   if (c1 == '.')
     {
       char c2 = yyinput ();
-      if (c2 == '.' && have_continuation ())
+      if (c2 == '.' && have_continuation (trailing_comments_ok))
 	return 1;
       else
 	{
 	  yyunput (c2, yytext);
 	  yyunput (c1, yytext);
 	}
     }
   else
@@ -1570,29 +1572,29 @@ handle_string (char delim, int text_styl
 	{
 	  if (escape_pending)
 	    {
 	      buf << (char) c;
 	      escape_pending = 0;
 	    }
 	  else
 	    {
-	      if (have_continuation ())
+	      if (have_continuation (0))
 		escape_pending = 0;
 	      else
 		{
 		  buf << (char) c;
 		  escape_pending = 1;
 		}
 	    }
 	  continue;
 	}
       else if (c == '.')
 	{
-	  if (! have_ellipsis_continuation ())
+	  if (! have_ellipsis_continuation (0))
 	    buf << (char) c;
 	}
       else if (c == '\n')
 	{
 	  error ("unterminated string constant");
 	  break;
 	}
       else if (c == delim)
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -295,38 +295,33 @@ input		: input1
 		  }
 		| END_OF_INPUT
 		  {
 		    global_command = 0;
 		    promptflag = 1;
 		    YYABORT;
 		  }
 		| simple_list parse_error
-		  {
-		    yyerror ("parse error");
-		    ABORT_PARSE;
-		  }
+		  { ABORT_PARSE; }
 		| parse_error
-		  {
-		    yyerror ("parse error");
-		    ABORT_PARSE;
-		  }
+		  { ABORT_PARSE; }
 		;
 
 input1		: '\n'
 		  { $$ = 0; }
 		| simple_list
 		  { $$ = $1; }
 		| simple_list '\n'
 		  { $$ = $1; }
 		| simple_list END_OF_INPUT
 		  { $$ = $1; }
 		;
 
 parse_error	: LEXICAL_ERROR
+		  { yyerror ("parse error"); }
 		| error
 		;
 
 simple_list	: semi_comma
 		  { $$ = 0; }
 		| comma_semi
 		  { $$ = 0; }
 		| simple_list1
