# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381880010 25200
#      Tue Oct 15 16:33:30 2013 -0700
# Node ID f4b0430fa5fd951e5f3f56e4691409e5b1426710
# Parent  7975d75f933ce1cdda0545d55b314b33c29d144a
Avoid memory leak in Sparse constructor.

* liboctave/array/Sparse.cc: Move call to new() in constructor after all input
validation in case validation fails and error() called without freeing memory.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -296,33 +296,34 @@ Sparse<T>::Sparse (const Array<T>& a, co
                                         r.extent (nr), nr);
 
   if (nc < 0)
     nc = c.extent (0);
   else if (c.extent (nc) > nc)
     (*current_liboctave_error_handler)
       ("sparse: column index %d out of bound %d", r.extent (nc), nc);
 
-  rep = new typename Sparse<T>::SparseRep (nr, nc, (nzm > 0 ? nzm : 0));
-
   dimensions = dim_vector (nr, nc);
 
   octave_idx_type n = a.numel (), rl = r.length (nr), cl = c.length (nc);
   bool a_scalar = n == 1;
   if (a_scalar)
     {
       if (rl != 1)
         n = rl;
       else if (cl != 1)
         n = cl;
     }
 
   if ((rl != 1 && rl != n) || (cl != 1 && cl != n))
     (*current_liboctave_error_handler) ("sparse: dimension mismatch");
 
+  // Only create rep after input validation to avoid memory leak.
+  rep = new typename Sparse<T>::SparseRep (nr, nc, (nzm > 0 ? nzm : 0));
+
   if (rl <= 1 && cl <= 1)
     {
       if (n == 1 && a(0) != T ())
         {
           change_capacity (nzm > 1 ? nzm : 1);
           xcidx(0) = 0;
           xridx(0) = r(0);
           xdata(0) = a(0);
