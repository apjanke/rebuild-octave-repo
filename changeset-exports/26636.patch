# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1548429354 -3600
#      Fri Jan 25 16:15:54 2019 +0100
# Branch stable
# Node ID 803006651db5af65e30f2a3ea101ee3ae0cd4f01
# Parent  931ace437d5d1cb94c9e7d20c595913d60c2c1b2
Disallow recursion in drawnow for gnuplot toolkit (bug #55528)

* graphics.cc (Fdrawnow): Revert cset 32d4ee071348.
* __init_gnuplot__.cc (gnuplot_graphics_toolkit::redraw_figure): Prevent
  recursion for any gnuplot terminal.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -13115,36 +13115,27 @@ The event queue is flushed and any callb
 With the optional argument @qcode{"expose"}, only graphic objects are
 updated and no other events or callbacks are processed.
 
 The third calling form of @code{drawnow} is for debugging and is
 undocumented.
 @seealso{refresh}
 @end deftypefn */)
 {
-  // Disallow recursion when using gnuplot ASCII charts, i.e., with
-  // --no-window-system option.
-
-  static bool do_recursion = octave::display_info::display_available ();
-  static bool drawnow_executing = false;
-
   if (args.length () > 3)
     print_usage ();
 
   octave::unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
-  frame.protect_var (drawnow_executing);
 
   // Redraw unless we are in the middle of a deletion.
 
-  if (! delete_executing && (do_recursion || ! drawnow_executing))
-    {
-      drawnow_executing = true;
-
+  if (! delete_executing)
+    {
       gh_manager::auto_lock guard;
 
       if (args.length () <= 1)
         {
           // First process events so that the redraw happens when all
           // objects are in their definite state.
           bool do_events = true;
 
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -100,19 +100,29 @@ public:
               }
             break;
           }
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
-    octave_value_list args;
-    args(0) = go.get_handle ().as_octave_value ();
-    octave::feval ("__gnuplot_drawnow__", args);
+    static bool drawnow_executing = false;
+
+    // Prevent recursion
+    if (! drawnow_executing)
+      {
+        octave::unwind_protect frame;
+        frame.protect_var (drawnow_executing);
+
+        drawnow_executing = true;
+        octave_value_list args;
+        args(0) = go.get_handle ().as_octave_value ();
+        octave::feval ("__gnuplot_drawnow__", args);
+      }
   }
 
   void print_figure (const graphics_object& go, const std::string& term,
                      const std::string& file,
                      const std::string& debug_file) const
   {
     octave_value_list args;
     if (! debug_file.empty ())
