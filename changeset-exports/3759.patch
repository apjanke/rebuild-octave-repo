# HG changeset patch
# User jwe
# Date 976929913 0
#      Sat Dec 16 01:25:13 2000 +0000
# Node ID 110bc441a9543567ad5fb1dbeedf4cba0feb5d78
# Parent  a816be1d1626489638cbf09db109640531bb012f
[project @ 2000-12-16 01:25:12 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -435,19 +435,16 @@ Interpreter:
     This is pretty ugly and introduces some conflicts, so I don't
     think it is a good idea.
 
   * Add a command that works like bash's `builtin' command.
 
   * Handle end-of-line comments correctly in parse trees for use with
     the type command.
 
-  * For dynamically linked functions, the which and type commands
-    should display the location of the .oct file.
-
   * Clean up eye, eval, feval, keyboard, input, ones, zeros.
 
   * It would be nice to have an interactive debugger.
 
   * Make whos report total memory used by variables (and functions?).
 
   * Rewrite whos and the symbol_record_info class.  Write a built-in
     function that gives all the basic information, then write who and
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,21 @@
+2000-12-15  Teemu Ikonen  <tpikonen@pcu.helsinki.fi>
+
+	* strings/index.m: Return 0 if either string is empty.
+
+2000-12-15  Ben Sapp  <bsapp@lanl.gov>
+
+	* control/system/c2d.m: Allow option of matched pole/zero
+	equivalent for conversion.  
+
+2000-12-15  Matthew W. Roberts  <matt@lehi.tamu.edu>
+
+	* strings/findstr.m: Return empty matrix if search string is empty.
+
 2000-12-15  Kai Habel  <kai.habel@gmx.de>
 
 	* saveimage.m: Do create rawbit image for black and white images,
 	but do it correctly.
 
 2000-12-13   Teemu Ikonen  <tpikonen@pcu.helsinki.fi>
 
         * polynomial/deconv.m: For compatibility with Matlab, don't reduce
diff --git a/scripts/control/system/c2d.m b/scripts/control/system/c2d.m
--- a/scripts/control/system/c2d.m
+++ b/scripts/control/system/c2d.m
@@ -41,16 +41,19 @@
 ## @end example
 ## FIXME: This option exits with an error if @var{sys} is not purely
 ## continuous. (The @code{ex} option can handle mixed systems.)
 ## @item t
 ## sampling time; required if sys is purely continuous.
 ##
 ## @strong{Note} If the 2nd argument is not a string, @code{c2d} assumes that
 ## the 2nd argument is @var{t} and performs appropriate argument checks.
+## @item "matched"
+## Use the matched pole/zero equivalent transformation (currently only
+## works for purely continuous SISO systems).
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{dsys} discrete time equivalent via zero-order hold,
 ## sample each @var{t} sec.
 ##
 ## converts the system data structure describing
 ## @example
@@ -79,33 +82,39 @@ function dsys = c2d (sys, opt, T)
     error("sys must be a system data structure");
   elseif (nargin == 1)
     opt = "ex";
   elseif (nargin == 2 & !isstr(opt) )
     T = opt;
     opt = "ex";
   endif
 
+  if (! isstr (opt))
+    error ("expecting option as a string");
+  endif
+
   ## check if sampling period T was passed.
   Ts = sysgettsam(sys);
   if(!exist("T"))
     T = Ts;
     if(T == 0)
       error("sys is purely continuous; no sampling period T provided");
     endif
   elseif (T != Ts & Ts > 0)
     warning(["c2d: T=",num2str(T),", system tsam==",num2str(Ts), ...
       ": using T=", num2str(min(T,Ts))]);
     T = min(T,Ts);
   endif
 
   if (!is_sample(T))
     error("sampling period T must be a postive, real scalar");
-  elseif( ! (strcmp(opt,"ex") | strcmp(opt,"bi") ) )
-    error(["invalid option passed: ",opt])
+  elseif (! (strcmp (opt, "ex")
+	     || strcmp (opt, "bi")
+	     || strcmp (opt, "matched")))
+    error ("invalid option passed: %s", opt);
   endif
 
   sys = sysupdate(sys,"ss");
   [n,nz,m,p] = sysdimensions(sys);
   if(n == 0)
     dsys = syssetsignals(sys,"yd",ones(1:p));
   elseif(strcmp(opt,"ex"));
     [aa,bb,cc,dd] = sys2ss(sys);
@@ -162,14 +171,31 @@ function dsys = c2d (sys, opt, T)
       A = (IT+a)/(IT-a);
       iab = (IT-a)\b;
       tk=2/sqrt(T);
       B = tk*iab;
       C = tk*(c/(IT-a));
       D = d + (c*iab);
       stnamed = strappend(stname,"_d");
       dsys = ss2sys(A,B,C,D,T,0,rows(A),stnamed,inname,outname);
+   elseif(strcmp(opt,"matched"))
+     if(is_digital(sys))
+       error("c2d: system is already digital");
+     elseif((length(sys.inname) != 1) || (length(sys.outname) != 1))
+       error("c2d: system in not single input, single output");
+     else
+       sys = sysupdate(sys,"zp");
+       p = exp(sys.pol*T);
+       z = exp(sys.zer*T);
+       infinite_zeros = max(size(sys.pol))-max(size(sys.zer))-1;
+       for i = 1:infinite_zeros
+	 z = [z ; -1];
+       endfor
+       ## Should the freaquency we adjust around always be 1?   
+       [cmag,cphase,cw] = bode(sys,1);
+       [dmag,dpahse,dw] = bode(zp2sys(z,p,1,T),1);
+      dsys = zp2sys(z,p,cmag/dmag,T);
     endif
   else
-    error(["Bad option=",opt])
+    error ("invalid option = %s", opt);
   endif
 
 endfunction
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -55,16 +55,21 @@ function v = findstr (s, t, overlap)
       t = tmp;
     endif
 
     s = toascii (s);
     t = toascii (t);
 
     l_t = length (t);
 
+    if (l_t < 1)
+      v = [];
+      return;
+    endif
+
     ind = 1 : l_t;
     limit = length (s) - l_t + 1;
     v  = zeros (1, limit);
     i = 0;
 
     k = 1;
     while (k <= limit)
       if (s (ind + k - 1) == t)
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -43,16 +43,20 @@ function n = index (s, t)
 
   n = 0;
 
   if (isstr (s) && isstr (t))
 
     [nr_s, l_s] = size (s);
     [nr_t, l_t] = size (t);
 
+    if (nr_s == 0 || nr_t == 0)
+      return;
+    endif
+
     if (nr_s != 1 || nr_t != 1)
       error ("index: arguments cannot be string arrays");
     endif
 
     if (l_t <= l_s)
       tmp = l_s - l_t + 1;
       for idx = 1 : tmp
         if (strcmp (substr (s, idx, l_t), t))
