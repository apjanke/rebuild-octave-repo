# HG changeset patch
# User jwe
# Date 1069740448 0
#      Tue Nov 25 06:07:28 2003 +0000
# Node ID bf7272f8ba8cc230689686503874a4aa4d8d8275
# Parent  55211d6748c42400b0810c8196b6950da13e8e19
[project @ 2003-11-25 06:05:20 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -305,18 +305,18 @@ any_zero_len (const dim_vector& frozen_l
 	  break;
 	}
     }
 
   return retval;
 }
 
 dim_vector
-get_zero_len_size (const dim_vector& frozen_lengths,
-		   const dim_vector& dimensions)
+get_zero_len_size (const dim_vector& /* frozen_lengths */,
+		   const dim_vector& /* dimensions */)
 {
   dim_vector retval;
   assert (0);
   return retval;
 }
 
 bool
 all_colon_equiv (const Array<idx_vector>& ra_idx,
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,19 +1,28 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dbleQR.cc (QR::init): Use separate pwork pointers.
+	* CmplxQR.cc (ComplexQR::init): Likewise.
+
+	* oct-group.cc (octave_group::getgrnam): Pass correct args to
+	two-arg getgrnam version.
+
 	* Array.cc (assignN): Allow single indexing to work.
 	(Array<T>::range_error (const char*, const Array<int>&)):
 	Report index values.
 
 	* Array.cc (Array<T>::index): Delete unused arg names.
 	* ODESSA.cc (odessa_j): Likewise.
 	* DASRT.cc (ddasrt_f, ddasrt_g): Likewise.
 	* DASPK.cc (ddaspk_psol): Likewise.
 	* lo-mappers.cc (imag): Likewise.
+	* Array-util.cc (get_zero_len_size): Likewise.
+	* kpse.cc (path_search, path_find_first_of): Likewise.
+	* cmd-edit.cc (do_generate_filename_completions): Likewise.
 
 	* dim-vector.h (dim_vector::all_ones): New function.
 
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
 	zeros, not orig_rows or orig_columns.
 	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -119,17 +119,17 @@ ComplexQR::init (const ComplexMatrix& a,
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
 		r.elem (i, j) = A_fact.elem (i, j);
 	    }
 
 	  lwork = 32 * n2;
 	  work.resize (lwork);
-	  pwork = work.fortran_vec ();
+	  Complex *pwork2 = work.fortran_vec ();
 
 	  F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				     pwork, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zungqr");
 	  else
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -551,17 +551,17 @@ default_command_editor::do_set_output_st
 
 FILE *
 default_command_editor::do_get_output_stream (void)
 {
   return output_stream;
 }
 
 string_vector
-default_command_editor::do_generate_filename_completions (const std::string& text)
+default_command_editor::do_generate_filename_completions (const std::string&)
 {
   // XXX FIXME XXX
   return string_vector ();
 }
 
 void
 default_command_editor::do_insert_text (const std::string&)
 {
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -110,20 +110,20 @@ QR::init (const Matrix& a, QR::type qr_t
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
 		r.elem (i, j) = tmp_data[m*j+i];
 	    }
 
 	  lwork = 32 * n2;
 	  work.resize (lwork);
-	  pwork = work.fortran_vec ();
+	  double *pwork2 = work.fortran_vec ();
 
 	  F77_XFCN (dorgqr, DORGQR, (m, n2, min_mn, tmp_data, m, ptau,
-				     pwork, lwork, info));
+				     pwork2, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in dorgqr");
 	  else
 	    {
 	      q = A_fact;
 	      q.resize (m, n2);
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -843,17 +843,17 @@ absolute_search (const std::string& name
   return ret_list;
 }
 
 /* This is the hard case -- look for NAME in PATH.  If ALL is false,
    return the first file found.  Otherwise, search all elements of PATH.  */
 
 static string_vector
 path_search (const std::string& path, const std::string& name,
-	     bool must_exist, bool all)
+	     bool /* must_exist */, bool all)
 {
   string_vector ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != NPOS; pi++)
     {
       std::string elt = *pi;
 
@@ -1020,17 +1020,17 @@ kpse_all_path_search (const std::string&
 }
 
 /* This is the hard case -- look in each element of PATH for each
    element of NAMES.  If ALL is false, return the first file found.
    Otherwise, search all elements of PATH.  */
 
 static string_vector
 path_find_first_of (const std::string& path, const string_vector& names,
-		    bool must_exist, bool all)
+		    bool /* must_exist */, bool all)
 {
   string_vector ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != NPOS; pi++)
     {
       std::string elt = *pi;
 
diff --git a/liboctave/oct-group.cc b/liboctave/oct-group.cc
--- a/liboctave/oct-group.cc
+++ b/liboctave/oct-group.cc
@@ -112,17 +112,17 @@ octave_group::getgrgid (gid_t gid, std::
   return octave_group ();
 #endif
 }
 
 octave_group
 octave_group::getgrnam (const std::string& nm)
 {
   std::string msg;
-  return getgrnam (msg);
+  return getgrnam (nm, msg);
 }
 
 octave_group
 octave_group::getgrnam (const std::string& nm, std::string& msg)
 {
 #if defined (HAVE_GETGRNAM)
   msg = std::string ();
   return octave_group (::getgrnam (nm.c_str ()), msg);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,34 +1,38 @@
+2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.52.
 	(OCTAVE_API_VERSION): Now api-v3.
 
 	* ov.h (octave_value::all_strings): Pass second arg to rep function.
 
 	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_f): Delete unused arg names.
+	* ls-hdf5.h (hdf5_streambase::hdf5_streambase): Likewise.
+	* ls-hdf5.cc (read_hdf5_data): Likewise.
 	* ls-utils.cc (get_save_type): Likewise.
 	* parse.y (Fassignin): Likewise.
 	* utils.cc (empty_arg): Likewise.
 	* ov-usr-fcn.h (octave_user_function::subsref): Likewise.
 	* ov-base-mat.h (octave_base_matrix::subsref): Likewise.
 	* ov-mapper.h (octave_mapper::subsref): Likewise.
 	* ov-builtin.h (octave_builtin::subsref): Likewise.
 	* ov-cell.h (octave_cell::subsref): Likewise.
 	* ov-base-scalar.h (octave_base_scalar::subsref): Likewise.
 	* ov-struct.h (octave_struct::subsref): Likewise.
 	* ov-range.h (octave_range::subsref): Likewise.
 	* ov-list.h (octave_list::subsref): Likewise.
 	* ov-base.cc (octave_base_value::print_info): Likewise.
 	* pt-check.cc (tree_checker::visit_subplot_axes): Likewise.
 	* pr-output.cc (octave_print_internal (std::ostream&, double, bool),
 	octave_print_internal (std::ostream&, const Complex&, bool),
-	octave_print_internal (std::ostream& const charNDArray&, bool,
-	int, bool): Likewise.
+	octave_print_internal (std::ostream&, const ArrayN<std::string>&,
+	bool, int): Likewise.
 	* oct-stream.cc (octave_scan<> (std::istream&, const
 	scanf_format_elt&, char*): Likewise
 	* TEMPLATE-INST/Array-tc.cc (resize_fill_value<octave_value>):
 	Likewise.
 	* pt-bp.cc (tree_breakpoint::visit_octave_user_function,
 	tree_breakpoint::visit_octave_user_function_header,
 	tree_breakpoint::visit_octave_user_function_trailer,
 	tree_breakpoint::visit_plot_limits,
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -780,17 +780,17 @@ hdf5_read_next_data (hid_t group_id, con
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.  If import is true, we try extra hard to import "foreign"
 // datasets (not created by Octave), although we usually do a reasonable
 // job anyway.  (c.f. load -import documentation.)
 std::string
 read_hdf5_data (std::istream& is,
-		const std::string& filename, bool& global,
+		const std::string& /* filename */, bool& global,
 		octave_value& tc, std::string& doc, bool import)
 {
   std::string retval;
 
   doc.resize (0);
 
   hdf5_ifstream& hs = (hdf5_ifstream&) is;
   hdf5_callback_data d;
diff --git a/src/ls-hdf5.h b/src/ls-hdf5.h
--- a/src/ls-hdf5.h
+++ b/src/ls-hdf5.h
@@ -36,17 +36,17 @@ public:
   // HDF5 uses an "id" to refer to an open file
   hid_t file_id;
 
   // keep track of current item index in the file
   int current_item;
 
   hdf5_fstreambase () { file_id = -1; }
 
-  hdf5_fstreambase (const char *name, int mode, int prot = 0)
+  hdf5_fstreambase (const char *name, int mode, int /* prot */ = 0)
     {
       if (mode == std::ios::in)
 	file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode == std::ios::out)
 	file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
 
       if (file_id < 0)
 	std::ios::setstate (std::ios::badbit);
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1960,17 +1960,17 @@ octave_print_internal (std::ostream& os,
   else
     {
       os << "sorry, printing char matrices not implemented yet\n";
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const charNDArray& nda,
-		       bool pr_as_read_syntax, int /* extra_indent */,
+		       bool pr_as_read_syntax, int extra_indent,
 		       bool pr_as_string)
 {
   switch (nda.ndims ())
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent, pr_as_string);
@@ -1979,17 +1979,17 @@ octave_print_internal (std::ostream& os,
     default:
       PRINT_ND_ARRAY (os, nda, charNDArray, char, charMatrix);
       break;
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const ArrayN<std::string>& nda,
-		       bool pr_as_read_syntax, int extra_indent)
+		       bool pr_as_read_syntax, int /* extra_indent */)
 {
   // XXX FIXME XXX -- this mostly duplicates the code in the
   // PRINT_ND_ARRAY macro.
 
   if (nda.is_empty ())
     print_empty_nd_array (os, nda.dims (), pr_as_read_syntax);
   else if (nda.length () == 1)
     {
