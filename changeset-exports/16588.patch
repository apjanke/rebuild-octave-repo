# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1367192110 14400
#      Sun Apr 28 19:35:10 2013 -0400
# Node ID 4d2b0104ee05ab2f9f7a849a29b7ff5edcc396bc
# Parent  a3fdd6041e6486d08ce0a56556fa5d229cba7cf5
Add argument to ellipj for Matlab compatibility

* ellipj.cc: Allow third argument for compatibility, ignored for now.

diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -131,30 +131,34 @@ sncndn (Complex& u, double m, Complex& s
       sn = Complex (ss*dd1/ddd, cc*dd*ss1*cc1/ddd);
       cn = Complex (cc*cc1/ddd, -ss*dd*ss1*dd1/ddd);
       dn = Complex (dd*cc1*dd1/ddd, -m*ss*cc*ss1/ddd);
     }
 }
 
 DEFUN (ellipj, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m})\n\
+@deftypefn  {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m})\n\
+@deftypefnx {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m}, @var{tol})\n\
 Compute the Jacobi elliptic functions @var{sn}, @var{cn}, and @var{dn}\n\
 of complex argument @var{u} and real parameter @var{m}.\n\
 \n\
 If @var{m} is a scalar, the results are the same size as @var{u}.\n\
 If @var{u} is a scalar, the results are the same size as @var{m}.\n\
 If @var{u} is a column vector and @var{m} is a row vector, the\n\
 results are matrices with @code{length (@var{u})} rows and\n\
 @code{length (@var{m})} columns.  Otherwise, @var{u} and\n\
 @var{m} must conform and the results will be the same size.\n\
 \n\
 The value of @var{u} may be complex.\n\
 The value of @var{m} must be 0 <= m <= 1.\n\
 \n\
+@var{tol} is currently ignored (@sc{Matlab} uses this to allow faster,\n\
+less accurate approximation).\n\
+\n\
 If requested, @var{err} contains the following status information\n\
 and is the same size as the result.\n\
 \n\
 @enumerate 0\n\
 @item\n\
 Normal return.\n\
 @item\n\
 Error---no computation, algorithm termination condition not met,\n\
@@ -165,17 +169,17 @@ return @code{NaN}.\n\
       Chapter 16 (Sections 16.4, 16.13 and 16.15)\n\
 @seealso{ellipke}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin != 2 )
+  if (nargin < 2 || nargin > 3)
     {
       print_usage ();
       return retval;
     }
 
   octave_value u_arg = args(0);
   octave_value m_arg = args(1);
 
