# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522097502 14400
#      Mon Mar 26 16:51:42 2018 -0400
# Node ID 6932ced4b2e29eb2614df4c64c9ec56a3a48a36d
# Parent  4fbe69d150aad2a97c31ba0bc5b3ed32211f7d1a
# Parent  7f1d1a1ca22ef91bf18654b4b9dbb17bd3ab21d8
maint: merge stable to default.

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -990,25 +990,22 @@ namespace octave
       m_table_colors (),
       m_current_focus_vname (""),
       m_hovered_focus_vname ("")
   {
     setObjectName ("VariableEditor");
     set_title (tr ("Variable Editor"));
     setStatusTip (tr ("Edit variables."));
     setWindowIcon (QIcon (":/actions/icons/logo.png"));
-    setFocusPolicy (Qt::NoFocus);
     setAttribute (Qt::WA_AlwaysShowToolTips);
 
     // Tool Bar.
 
     construct_tool_bar ();
     m_main->addToolBar (m_tool_bar);
-    m_main->setFocusPolicy (Qt::NoFocus);
-    setFocusPolicy (Qt::NoFocus);
 
     // Colors.
 
     for (int i = 0; i < resource_manager::varedit_color_chars ().length (); i++)
       m_table_colors.append (QColor (Qt::white));
 
     // Use an MDI area that is shrunk to nothing as the central widget.
     // Future feature might be to switch to MDI mode in which the dock
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11540,17 +11540,17 @@ Undocumented internal function.
         gh_manager::execute_callback (h, name, args(2));
     }
 
   return ovl ();
 }
 
 DEFUN (__image_pixel_size__, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn {} {@var{px}, @var{py}} __image_pixel_size__ (@var{h})
+@deftypefn {} {@var{sz} =} __image_pixel_size__ (@var{h})
 Internal function: returns the pixel size of the image in normalized units.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   double h = args(0).xdouble_value ("__image_pixel_size__: argument is not a handle");
 
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -635,17 +635,17 @@ determine whether functions defined in f
 ## Test input validation
 %!error (ignore_function_time_stamp ("all", "all"))
 %!error (ignore_function_time_stamp ("UNKNOWN_VALUE"))
 %!error (ignore_function_time_stamp (42))
 */
 
 DEFMETHOD (__current_scope__, interp, , ,
            doc: /* -*- texinfo -*-
-@deftypefn {} {[@var{scope}, @var{context}]} __current_scope__ ()
+@deftypefn {} {[@var{scope}, @var{context}] =} __current_scope__ ()
 Return the current scope and context as integers.
 @seealso{__dump_symtab_info__}
 @end deftypefn */)
 {
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
   octave::symbol_scope scope = symtab.current_scope ();
 
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -1876,17 +1876,17 @@ get_recorder (const octave_value& ov)
 
   return rec;
 }
 
 #endif
 
 DEFUN_DLD (__recorder_getaudiodata__, args, ,
            doc: /* -*- texinfo -*-
-@deftypefn {} {@var{data}} __recorder_getaudiodata__ (@var{recorder})
+@deftypefn {} {@var{data} =} __recorder_getaudiodata__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_getaudiodata__",
diff --git a/scripts/plot/appearance/camorbit.m b/scripts/plot/appearance/camorbit.m
--- a/scripts/plot/appearance/camorbit.m
+++ b/scripts/plot/appearance/camorbit.m
@@ -229,17 +229,17 @@ endfunction
 %! unwind_protect
 %!   sphere ();
 %!   camorbit(20, 30, "data", [1 2 3]);
 %!   p = campos ();
 %!   u = camup ();
 %!   ## Matlab 2014a
 %!   pm = [-0.215772672525099  -9.04926615428815  14.7669978066852];
 %!   um = [0.413058199972826  0.773801198226611  0.48022351989284];
-%!   assert (p, pm, -5e-15);
+%!   assert (p, pm, -2e-14);  # FIXME: looser tolerance needed on i386
 %!   assert (u, um, -5e-15);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
diff --git a/scripts/plot/appearance/camroll.m b/scripts/plot/appearance/camroll.m
--- a/scripts/plot/appearance/camroll.m
+++ b/scripts/plot/appearance/camroll.m
@@ -122,17 +122,17 @@ endfunction
 %!   camroll (30);
 %!   p = camup ();
 %!   ## from Matlab R2014a
 %!   q = [0.826398839602911  0.255644120004753  0.50170812412194];
 %!   assert (p, q, 10*eps);
 %!   camroll (-30);
 %!   ## note it does not go back to [0 0 1]: instead orthog to camera view:
 %!   p = camup ();
-%!   assert (dot (p, camtarget () - campos ()), 0, eps);
+%!   assert (dot (p, camtarget () - campos ()), 0, 32*eps);  # FIXME: looser tolerance needed on i386
 %!   q = [0.496200420425837  0.646660977913424  0.57932264103285];
 %!   assert (p, q, 10*eps);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 ## test ax input by creating another axis
 %!test
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -1420,26 +1420,26 @@ endfunction
 %! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (Afun, 100, 4, "lm", opts);
 %! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
 %! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
-%! d = eigs (A, 4, "lm", opts);
-%! assert (d(4), NaN+1i*NaN);
+%! d = eigs (A, 5, "lm", opts);
+%! assert (d(5), NaN+1i*NaN);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100) + eye (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 7;
 %! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 10, "sm", opts);
 %! assert (d(9:10), [NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100);
 %! Afun = @(x) A * x;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
 %! opts.isreal = false;
 %! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
-%! d = eigs (Afun, 100, 4, "lm", opts);
-%! assert (d(4), NaN+1i*NaN);
+%! d = eigs (Afun, 100, 6, "lm", opts);
+%! assert (d(6), NaN+1i*NaN);
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -195,21 +195,21 @@ endfunction
 %! assert (v3, v4, sqrt (eps ("single")));
 
 %!test <51157>
 %! y = betainc ([0.00780;0.00782;0.00784],250.005,49750.995);
 %! y_ex = [0.999999999999989; 0.999999999999992; 0.999999999999995];
 %! assert (y, y_ex, -1e-14);
 
 %!assert (betainc (0.001, 20, 30), 2.750687665855991e-47, -3e-14);
-%!assert (betainc (0.0001, 20, 30), 2.819953178893307e-67, -3e-14);
+%!assert (betainc (0.0001, 20, 30), 2.819953178893307e-67, -7e-14);
 %!assert (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -3e-14);
-%!assert (betainc (0.999, 20, 30, "upper"), 1.850806276141535e-77, -3e-14);
+%!assert (betainc (0.999, 20, 30, "upper"), 1.850806276141535e-77, -7e-14);
 %!assert (betainc (0.5, 200, 300), 0.9999964565197356, -1e-15);
-%!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -1e-13);
+%!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -3e-13);
 
 ## Test trivial values
 %!test
 %! [a,b] = ndgrid (linspace (1e-4, 100, 20), linspace (1e-4, 100, 20));
 %! assert (betainc (0, a, b), zeros (20));
 %! assert (betainc (1, a, b), ones (20));
 
 ## Test input validation
diff --git a/scripts/specfun/betaincinv.m b/scripts/specfun/betaincinv.m
--- a/scripts/specfun/betaincinv.m
+++ b/scripts/specfun/betaincinv.m
@@ -250,24 +250,24 @@ endfunction
 %! xx = betaincinv (betainc (x, a, b, "upper"), a, b, "upper");
 %! assert (xx, x, 3e-15);
 
 %!test
 %! x = linspace (0.1, 0.9, 11);
 %! a = [0.1:0.1:1];
 %! [x,a,b] = ndgrid (x,a,a);
 %! xx = betaincinv (betainc (x, a, b), a, b);
-%! assert (xx, x, 3e-15);
+%! assert (xx, x, 5e-15);
 
 %!test
 %! x = linspace (0.1, 0.9, 11);
 %! a = [0.1:0.1:1];
 %! [x,a,b] = ndgrid (x,a,a);
 %! xx = betaincinv (betainc (x, a, b, "upper"), a, b, "upper");
-%! assert (xx, x, 3e-15);
+%! assert (xx, x, 5e-15);
 
 ## Test the conservation of the input class
 %!assert (class (betaincinv (0.5, 1, 1)), "double")
 %!assert (class (betaincinv (single (0.5), 1, 1)), "single")
 %!assert (class (betaincinv (0.5, single (1), 1)), "single")
 %!assert (class (betaincinv (int8 (0), 1, 1)), "double")
 %!assert (class (betaincinv (0.5, int8 (1), 1)), "double")
 %!assert (class (betaincinv (int8 (0), single (1), 1)), "single")
diff --git a/scripts/specfun/cosint.m b/scripts/specfun/cosint.m
--- a/scripts/specfun/cosint.m
+++ b/scripts/specfun/cosint.m
@@ -175,17 +175,17 @@ endfunction
 %!assert (cosint (complex (-inf, -0)), -1i * pi)
 %!assert (isnan (cosint (nan)))
 
 %!assert (class (cosint (single (1))), "single")
 
 ## tests against maple
 %!assert (cosint (1), 0.337403922900968135, -2*eps)
 %!assert (cosint (-1), 0.337403922900968135 + 3.14159265358979324*I, -2*eps)
-%!assert (cosint (pi), 0.0736679120464254860, -2*eps)
+%!assert (cosint (pi), 0.0736679120464254860, -2e-15)
 %!assert (cosint (-pi), 0.0736679120464254860 + 3.14159265358979324*I, -2*eps)
 %!assert (cosint (300), -0.00333219991859211178, -2*eps)
 %!assert (cosint (1e4), -0.0000305519167244852127, -2*eps)
 %!assert (cosint (20i), 1.28078263320282944e7 + 1.57079632679489662*I, -2*eps)
 
 %!test
 %! x = (0:4).';
 %! y_ex = [-Inf
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -453,17 +453,17 @@ endfunction
 %!assert (gammainc ([1, 2, 3], 1, "scaledupper"), 1 ./ [1, 2, 3])
 
 ## Test: case 7
 %!assert (gammainc (2, 2, "lower"), 0.593994150290162, -2e-15)
 %!assert (gammainc (2, 2, "upper"), 0.406005849709838, -2e-15)
 %!assert (gammainc (2, 2, "scaledlower"), 2.194528049465325, -2e-15)
 %!assert (gammainc (2, 2, "scaledupper"), 1.500000000000000, -2e-15)
 %!assert (gammainc ([3 2 36],[2 3 18], "upper"), ...
-%!        [4/exp(3) 5*exp(-2) (4369755579265807723 / 2977975)/exp(36)])
+%!        [4/exp(3) 5*exp(-2) (4369755579265807723 / 2977975)/exp(36)], -eps)
 %!assert (gammainc (10, 10), 1 - (5719087 / 567) * exp (-10), -eps)
 %!assert (gammainc (10, 10, "upper"), (5719087 / 567) * exp (-10), -eps)
 
 ## Test: case 8
 %!assert (gammainc (-10, 10), 3.112658265341493126871617e7, -2*eps)
 ## Matlab fails this next one%!      %!
 %!assert (isreal (gammainc (-10, 10)), true)
 %!assert (gammainc (-10, 10.1, "upper"), ...
@@ -480,21 +480,21 @@ endfunction
 %!assert (gammainc (709, 1000, "upper"), 0.99999999999999999999999954358, -eps)
 
 ## Test: case 9
 %!test <47800>
 %! assert (gammainc (60, 6, "upper"), 6.18022358081160257327264261e-20,
 %!         -10*eps);
 ## Matlab is better here than Octave
 %!assert (gammainc (751, 750, "upper"), 0.4805914320558831327179457887, -12*eps)
-%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -4*eps)
-%!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -3*eps)
+%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -5*eps)
+%!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -5*eps)
 %!assert (gammainc (200, 200, "scaledupper"), 17.3984438553791505135122900,
-%!       -eps)
-%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -6*eps)
+%!       -2*eps)
+%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -7*eps)
 %!assert (gammainc (201, 200, "upper"), 0.46249244908276709524913736667, -7*eps)
 
 ## Test small argument
 %!assert (gammainc ([1e-05, 1e-07,1e-10,1e-14], 0.1), ...
 %!        [0.33239840504050, 0.20972940370977, 0.10511370061022, ...
 %!        0.041846517936723], 1e-13);
 
 %!assert (gammainc ([1e-05, 1e-07,1e-10,1e-14], 0.2), ...
diff --git a/scripts/specfun/sinint.m b/scripts/specfun/sinint.m
--- a/scripts/specfun/sinint.m
+++ b/scripts/specfun/sinint.m
@@ -135,18 +135,18 @@ endfunction
 %!assert (isnan (sinint (NaN)))
 
 ## Check single data type is preserved
 %!assert (class (sinint (single (1))), "single")
 
 ## Tests against Maple
 %!assert (sinint (1)  ,  0.9460830703671830149414, -2*eps)
 %!assert (sinint (-1) , -0.9460830703671830149414, -2*eps)
-%!assert (sinint (pi) ,  1.851937051982466170361, -2*eps)
-%!assert (sinint (-pi), -1.851937051982466170361, -2*eps)
+%!assert (sinint (pi) ,  1.851937051982466170361, -3*eps)
+%!assert (sinint (-pi), -1.851937051982466170361, -3*eps)
 %!assert (sinint (300),  1.5708810882137495193, -2*eps)
 %!assert (sinint (1e4),  1.5708915453859619157, -2*eps)
 %!assert (sinint (20i),  1.2807826332028294459e7*1i, -2*eps)
 
 %!test
 %! x = (0:4)';
 %! y_ex = [0
 %!         0.946083070367183015
