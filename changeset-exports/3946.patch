# HG changeset patch
# User jwe
# Date 1022114536 0
#      Thu May 23 00:42:16 2002 +0000
# Node ID eab957395758e030d2a82aa8c968103ce8d978e8
# Parent  b050da7f9994cfe05357b19bd3e1b9bd3c5c3d79
[project @ 2002-05-23 00:42:15 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-05-22  Mumit Khan <khan@nanotech.wisc.edu>
+
+	* DASPK.cc (ddaspk_psol): Return value.
+	* oct-rl-edit.c: Use /* ... */ to comment.
+
 2002-05-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASSL.h (DASSL_options::init): Undo previous change.
 	(DASSL_options::set_absolute_tolerance): Likewise.
 	* LSODE.h (LSODE_options::init): Likewise.
 	(LSODE_options::set_absolute_tolerance): Likewise.
 
 	* DASPK.h (DASPK_options::init): Use default absolute tolerance of
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -167,16 +167,17 @@ ddaspk_f (const double& time, const doub
 int
 ddaspk_psol (const int& neq, const double& time, const double *state,
 	     const double *deriv, const double *savr,
 	     const double& cj, const double *wght, double *wp,
 	     int *iwp, double *b, const double& eplin, int& ier,
 	     double *, int*)
 {
   abort ();
+  return 0;
 }
 
 int
 ddaspk_j (const double& time, const double *, const double *, double *pd,
 	  const double& cj, double *, int *)
 {
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
diff --git a/liboctave/oct-rl-edit.c b/liboctave/oct-rl-edit.c
--- a/liboctave/oct-rl-edit.c
+++ b/liboctave/oct-rl-edit.c
@@ -63,25 +63,25 @@ octave_rl_screen_width (void)
 }
 
 void
 octave_rl_enable_paren_matching (int val)
 {
   rl_variable_bind ("blink-matching-paren", val ? "1" : "0");
 }
 
-// It would be much simpler if we could just call _rl_clear_screen to
-// only clear the screen, but it is not a public function, and on some
-// systems, it is not exported from shared library versions of
-// readline, so we can't use it.
-//
-// Instead, temporarily redefine the redisplay function to do nothing.
-//
-// XXX FIXME XXX -- It would be safer to do this when protected from
-// interrupts...
+/* It would be much simpler if we could just call _rl_clear_screen to
+   only clear the screen, but it is not a public function, and on some
+   systems, it is not exported from shared library versions of
+   readline, so we can't use it.
+
+   Instead, temporarily redefine the redisplay function to do nothing.
+
+   XXX FIXME XXX -- It would be safer to do this when protected from
+   interrupts... */
 
 static void
 no_redisplay (void)
 {
 }
 
 void
 octave_rl_clear_screen (void)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2002-05-22  Mumit Khan <khan@nanotech.wisc.edu>
+
+	* debug.cc: Include cstdlib instead of stdlib.h. Include cstring.
+	(dbtype): Use strchr instead of index.
+	* TEMPLATE-INST/Array-tc.cc (Array<octave_value>::resize_fill_value):
+	Fix template specialization syntax.
+
 2002-05-17  Mumit Khan <khan@nanotech.wisc.edu>
 
 	* c-file-ptr-stream.h (OCTAVE_STD_FILEBUF): New macro to handle
 	various forms of extensions to std::filebuf.
 	(c_file_ptr_buf::c_file_ptr_buf): Use.
 	* pt-idx.cc (tree_index_expression::tree_index_expression): Remove
 	default arguments are from definition.
 	* symtab.cc (SYMBOL_DEF::print_info): Add std::.
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "ov.h"
 
 template class Array<octave_value>;
 
+template<>
 octave_value
 Array<octave_value>::resize_fill_value (void)
 {
   static octave_value retval = octave_value (Matrix ());
   return retval;
 }
 
 template int assign (Array<octave_value>&, const Array<octave_value>&);
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -22,18 +22,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <fstream>
 #include <strstream>
-#include <string>
-#include <stdlib.h> 
+#include <cstring>
+#include <cstdlib>
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "parse.h"
@@ -53,26 +53,26 @@ Software Foundation, 59 Temple Place - S
 octave_user_function *
 get_user_function (std::string str = "")
 {
   octave_user_function *dbg_fcn = NULL;
 
   if (str.compare (""))
     {
       symbol_record *ptr = curr_sym_tab->lookup (str);
-      
+
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
 	  dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
 	}
       else
 	{
 	  symbol_record *ptr = lookup_by_name (str, false);
-	  
+	
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
 	      dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
   else if (curr_function)
@@ -100,30 +100,30 @@ The rline returned is the real line that
 \n\
 @end deftypefn\n\
 @seealso{dbclear, dbtatus, dbnext}")
 {
   octave_value retval;
 
   int result = -1;
   int nargin = args.length ();
-  
+
   string_vector argv = args.make_argv ("dbstop");
 
   if (error_state)
     return retval;
 
   if (nargin == 2)
-    { 
+    {
       std::string symbol_name = argv[1];
 
       std::string line_number = argv[2];
 
       int line = atoi (line_number.c_str ());
-      
+
       octave_user_function *dbg_fcn = get_user_function (symbol_name);
 
       if (dbg_fcn)
 	{
 	  tree_statement_list *cmds = dbg_fcn->body ();
 	  result = cmds->set_breakpoint (line);
 	}
       else
@@ -131,24 +131,24 @@ The rline returned is the real line that
     }
   else if (nargin == 1)
     {
       std::string line_number = argv[1];
 
       int line = atoi (line_number.c_str ());
 
       octave_user_function *dbg_fcn = get_user_function ();
-      
+
       if (dbg_fcn)
 	{
 	  tree_statement_list *cmds = dbg_fcn->body ();
 	  result = cmds->set_breakpoint (line);
 	}
       else
-	error ("unable to find the function requested\n");	 
+	error ("unable to find the function requested\n");	
     }
   else
     error ("one argument when in a function and two when not\n");
 
   retval = static_cast<double> (result);
 
   return retval;
 }
@@ -170,33 +170,33 @@ a breakpoint.   If you get the wrong lin
 @seealso{dbstop, dbstatus, dbwhere}")
 {
   octave_value retval;
 
   std::string symbol_name = "";
   std::string line_number;
   int line = -1;
   int nargin = args.length ();
-  
+
   if (nargin != 1 && nargin != 2)
     {
       error ("need one or two arguements\n");
       return retval;
     }
-  
+
   string_vector argv = args.make_argv ("dbclear");
 
   if (error_state)
     return retval;
 
   if (nargin == 2)
     {
       octave_stdout << "2 input arguments\n";
       symbol_name = argv[1];
- 
+
       octave_stdout << argv[1] << std::endl;
       line_number = argv[2];
 
     }
   else if (nargin == 1)
     {
       octave_stdout << "1 input argument\n";
       line_number = argv[1];
@@ -205,22 +205,22 @@ a breakpoint.   If you get the wrong lin
     {
       error ("need one or two arguements\n");
       return retval;
     }
 
 
   if (line_number.compare("all") && line_number.compare("ALL"))
     line = atoi (line_number.c_str ());
-  else 
+  else
     line = -1;
 
   octave_stdout << "symbol_name = " << symbol_name << std::endl;
   octave_user_function *dbg_fcn = get_user_function (symbol_name);
-  
+
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
       cmds->delete_breakpoint (line);
     }
   else
     error ("unable to find the function requested\n");
 
@@ -256,27 +256,27 @@ mode this should be left out.\n\
     {
       if (args(0).is_string ())
 	symbol_name = args(0).string_value ();
       else
 	gripe_wrong_type_arg ("dbstatus", args(0));
     }
 
   octave_user_function *dbg_fcn = get_user_function (symbol_name);
- 
+
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
 
       octave_value_list lst = cmds->list_breakpoints ();
 
       RowVector vec (lst.length (), 0.0);
 
       for (int i = 0; i < lst.length (); i++)
-	{ 
+	{
 	  vec(i) = lst(i).double_value ();
 
 	  if (error_state)
 	    panic_impossible ();
 	}
 
       retval = octave_value (vec);
     }
@@ -289,197 +289,199 @@ mode this should be left out.\n\
 DEFUN_TEXT (dbwhere, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbwhere ()\n\
 Show where we are in the code\n\
 @end deftypefn\n\
 @seealso{dbclear, dbstatus, dbstop}")
 {
   octave_value retval;
-  
+
   octave_user_function *dbg_fcn = curr_function;
 
   if (dbg_fcn)
     {
       std::string name = dbg_fcn->function_name ();
 
       octave_stdout << name << ":";
 
       const tree *dbg_stmt = tree::break_statement;
 
       if (dbg_stmt)
 	{
-	  octave_stdout << "line " << dbg_stmt->line () << ", "; 
+	  octave_stdout << "line " << dbg_stmt->line () << ", ";
 	  octave_stdout << "column " << dbg_stmt->column () << std::endl;
 	}
       else
 	octave_stdout << "-1\n";
     }
   else
     error ("must be inside of a user function to use dbwhere\n");
 
   return retval;
 }
 
 // Copied and modified from the do_type command in help.cc
-// Maybe we could share some code?  
-void 
+// Maybe we could share some code?
+void
 do_dbtype(std::ostream& os, const std::string& name, int start, int end)
 {
   std::string ff = fcn_file_in_path (name);
 
   if (! ff.empty ())
     {
       std::ifstream fs (ff.c_str (), std::ios::in);
-      
+
       if (fs)
-	{  
+	{
 	  char ch;
 	  int line = 1;
-	  
+	
 	  if (line >= start && line <= end)
 	    os << line << "\t";
- 	  
+ 	
 	  while (fs.get (ch))
 	    {
 	      if (line >= start && line <= end)
 		{
 		  os << ch;
 		}
 
 	      if (ch == '\n')
 		{
 		  line++;
 		  if (line >= start && line <= end)
-		    os << line << "\t"; 
+		    os << line << "\t";
 		}
 	    }
 	}
-      else 
+      else
 	os << "unable to open `" << ff << "' for reading!\n";
     }
   else
     os << "unkown function";
 
 }
 
 DEFUN_TEXT (dbtype, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbtype ()\n\
 List script file with line numbers.\n\
 @end deftypefn\n\
 @seealso{dbclear, dbstatus, dbstop}")
 {
   octave_value retval;
   octave_user_function *dbg_fcn;
-  
+
   int nargin = args.length ();
   string_vector argv = args.make_argv ("dbtype");
-    
+
   if (! error_state)
     {
       switch (nargin)
 	{
 	case 0: // dbtype
 	  dbg_fcn = get_user_function ();
 
 	  if (dbg_fcn)
-	    do_dbtype(octave_stdout,dbg_fcn->function_name (), 0, INT_MAX);
+	    do_dbtype (octave_stdout, dbg_fcn->function_name (), 0, INT_MAX);
 	  else
-	    error("must be in a user function to give no arguments to dbtype\n");
+	    error ("must be in a user function to give no arguments to dbtype\n");
+	  break;
 
-	  break;
-	case 1: // (dbtype func) || (dbtype start:end) 
+	case 1: // (dbtype func) || (dbtype start:end)
 	  dbg_fcn = get_user_function (argv[1].c_str ());
 
 	  if (dbg_fcn)
-	    do_dbtype(octave_stdout,dbg_fcn->function_name (), 0, INT_MAX);
+	    do_dbtype (octave_stdout, dbg_fcn->function_name (), 0, INT_MAX);
 	  else
 	    {
 	      dbg_fcn = get_user_function ("");
 
 	      if (dbg_fcn)
 		{
-		  char *str = (char *)malloc(strlen(argv[1].c_str ()) + 1);
+		  char *str = malloc (strlen (argv[1].c_str ()) + 1);
 
 		  if (str)
-		    memcpy(str, argv[1].c_str (), strlen(argv[1].c_str ()) + 1);
-		  else 
-		    error("croaked\n");
-		  
-		  char *ind = index(str,':');
-		  
+		    memcpy (str, argv[1].c_str (),
+			    strlen (argv[1].c_str ()) + 1);
+		  else
+		    error ("croaked\n");
+		
+		  char *ind = strchr (str, ':');
+		
 		  if (ind)
 		    *ind = '\0';
 		  else
 		    {
-		      free(str);
-		      error("if you specify lines it must be like `start:end`");
+		      free (str);
+		      error ("if you specify lines it must be like `start:end`");
 		    }
 		  ind++;
-		  
-		  int start = atoi(str);
-		  int end   = atoi(ind);
-		  
-		  free(str);
+		
+		  int start = atoi (str);
+		  int end   = atoi (ind);
+		
+		  free (str);
 		  str = NULL;
 		  ind = NULL;
-		  
+		
 		  octave_stdout << "got start and end\n";
-		  
+		
 		  if (start > end)
 		    error("the start line must be less than the end line\n");
-		  
+		
 		  octave_stdout << "doing dbtype\n";
-		  do_dbtype(octave_stdout, dbg_fcn->function_name (), start, end);
+		  do_dbtype (octave_stdout, dbg_fcn->function_name (), start, end);
 		  octave_stdout << "did dbtype\n";
 		}
 	    }
 	  break;
-	case 2: // (dbtype func start:end) 
+
+	case 2: // (dbtype func start:end)
 	  dbg_fcn = get_user_function (argv[1].c_str ());
 
 	  if (dbg_fcn)
 	    {
-	      
-	      char *str = (char *)malloc(strlen(argv[2].c_str ()) + 1);
+	
+	      char *str = malloc (strlen (argv[2].c_str ()) + 1);
 
 	      if (str)
-		memcpy(str, argv[2].c_str (), strlen(argv[2].c_str ()) + 1);
+		memcpy (str, argv[2].c_str (), strlen (argv[2].c_str ()) + 1);
 	      else
-		error("not enough memory\n");
+		error ("not enough memory\n");
 
-	      
-	      char *ind = index(str,':');
+	
+	      char *ind = strchr (str, ':');
 
 	      if (ind)
 		*ind = '\0';
 	      else
 		{
-		  free(str);
-		  error("if you specify lines it must be like `start:end`");
+		  free (str);
+		  error ("if you specify lines it must be like `start:end`");
 		}
 	      ind++;
 
-	      int start = atoi(str);
-	      int end   = atoi(ind);
+	      int start = atoi (str);
+	      int end   = atoi (ind);
 
-	      free(str);
-	      ind = NULL; 
-	      str = NULL; 
+	      free (str);
+	      ind = NULL;
+	      str = NULL;
 
 	      if (start > end)
-		error("the start line must be less than the end line\n");
+		error ("the start line must be less than the end line\n");
 
-	      do_dbtype(octave_stdout, dbg_fcn->function_name (), start, end);	      
+	      do_dbtype (octave_stdout, dbg_fcn->function_name (), start, end);
 	    }
+	  break;
 
-	  break;
 	default:
-	  error("unacceptable number of arguments\n"); 
+	  error ("unacceptable number of arguments\n");
 	}
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
