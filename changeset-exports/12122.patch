# HG changeset patch
# User Pascal Dupuis <Pascal.Dupuis@uclouvain.be>
# Date 1295680912 18000
#      Sat Jan 22 02:21:52 2011 -0500
# Node ID f4689107dd8cb491e4840afd40bd7c26dde82368
# Parent  62b7ea59a6ff354d2841a83ba170773f1b70357a
Explicitly disallow copying in some classes.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2011-01-21  Pascal Dupuis <Pascal.Dupuis@worldonline.be>
+
+	* oct-fftw.h (class octave_fftw_planner): Disallow copying
+	(class octave_float_fftw_planner): Likewise.
+	* oct-sort.h (class octave_sort): Likewise.
+	(struct oct_sort::MergeState): Likewise.
+	* SparseCmplxQR.h (class SparseComplexQR::SparseComplexQR_rep):
+	Likewise.
+	* sparse-base-chol.h (class sparse_base_cho::sparse_base_chol_rep):
+	Likewise.
+
 2011-01-21  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc (xgemm): Initialize output matrix for call to ZHERK.
 	* fCMatrix.cc (xgemm): Initialize output matrix for call to CHERK.
 
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* Array-b.cc, Array-d.cc, Array-f.cc, Array-util.cc,
diff --git a/liboctave/SparseCmplxQR.h b/liboctave/SparseCmplxQR.h
--- a/liboctave/SparseCmplxQR.h
+++ b/liboctave/SparseCmplxQR.h
@@ -68,16 +68,24 @@ protected:
     int count;
 
     octave_idx_type nrows;
 #ifdef HAVE_CXSPARSE
     CXSPARSE_ZNAME (s) *S;
 
     CXSPARSE_ZNAME (n) *N;
 #endif
+  private:
+
+    // No copying!
+
+    SparseComplexQR_rep (const SparseComplexQR_rep&);
+
+    SparseComplexQR_rep operator = (const SparseComplexQR_rep&);
+
   };
 private:
   SparseComplexQR_rep *rep;
 
 public:
   SparseComplexQR (void) :
     rep (new SparseComplexQR_rep (SparseComplexMatrix(), 0)) { }
 
diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -95,16 +95,22 @@ public:
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->do_method (_meth) : dummy;
   }
 
 private:
 
+  // No copying!
+
+  octave_fftw_planner (const octave_fftw_planner&);
+
+  octave_fftw_planner& operator = (const octave_fftw_planner&);
+
   static octave_fftw_planner *instance;
 
   fftw_plan
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const Complex *in,
                   Complex *out);
 
@@ -224,16 +230,22 @@ public:
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->method (_meth) : dummy;
   }
 
 private:
 
+  // No copying!
+
+  octave_float_fftw_planner (const octave_float_fftw_planner&);
+
+  octave_float_fftw_planner& operator = (const octave_float_fftw_planner&);
+
   static octave_float_fftw_planner *instance;
 
   fftwf_plan
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const FloatComplex *in,
                   FloatComplex *out);
 
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -213,16 +213,22 @@ private:
     // true (so long as the indices are in bounds) that
     //
     //   pending[i].base + pending[i].len == pending[i+1].base
     //
     // so we could cut the storage for this, but it's a minor amount,
     // and keeping all the info explicit simplifies the code.
     octave_idx_type n;
     struct s_slice pending[MAX_MERGE_PENDING];
+
+    // No copying!
+
+    MergeState (const MergeState&);
+
+    MergeState& operator = (const MergeState&);
   };
 
   compare_fcn_type compare;
 
   MergeState *ms;
 
 
   template <class Comp>
@@ -317,16 +323,22 @@ private:
   void lookup_sorted (const T *data, octave_idx_type nel,
                       const T* values, octave_idx_type nvalues,
                       octave_idx_type *idx, bool rev, Comp comp);
 
   template <class Comp>
   void nth_element (T *data, octave_idx_type nel,
                     octave_idx_type lo, octave_idx_type up,
                     Comp comp);
+
+  // No copying!
+
+  octave_sort (const octave_sort&);
+
+  octave_sort& operator = (const octave_sort&);
 };
 
 template <class T>
 class
 vec_index
 {
 public:
   T vec;
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -92,18 +92,21 @@ protected:
     ColumnVector perms;
 
     double cond;
 
     octave_idx_type init (const chol_type& a, bool natural = true);
 
     void drop_zeros (const cholmod_sparse* S);
 
-    // No assignment
-    sparse_base_chol_rep& operator = (const sparse_base_chol_rep& a);
+    // No copying!
+
+    sparse_base_chol_rep (const sparse_base_chol_rep&);
+
+    sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
   };
 #else
   class sparse_base_chol_rep
   {
   public:
     sparse_base_chol_rep (void)
       : count (1), is_pd (false), minor_p (0), perms (), cond (0) { }
 
@@ -137,18 +140,21 @@ protected:
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
     octave_idx_type init (const chol_type& a, bool natural = true);
 
-    // No assignment
-    sparse_base_chol_rep& operator = (const sparse_base_chol_rep& a);
+    // No copying!
+
+    sparse_base_chol_rep (const sparse_base_chol_rep&);
+
+    sparse_base_chol_rep& operator = (const sparse_base_chol_rep&);
   };
 #endif
 
  private:
   sparse_base_chol_rep *rep;
 
 public:
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,43 @@
+2011-01-22  Pascal Dupuis <Pascal.Dupuis@worldonline.be>
+
+	* DLD-FUNCTIONS/__init_fltk__.cc (fltk_uimenu): Disallow copying.
+	(class plot_window): Likewise.
+	* c-file-ptr-stream.h (class c_file_ptr_buf): Likewise.
+	(class c_file_ptr_stream): Likewise.
+	(class c_zfile_ptr_buf): Likewise.
+	* gl-render.cc (class opengl_tesselator): Likewise.
+	(class patch_tesselator): Likewise.
+	* lex.ll (class flex_stream_reader): Likewise.
+	* mex.cc (class mex): Likewise.
+	* oct-procbuf.h (class octave_procbuf): Likewise.
+	* pt-cbinop.h (class tree_compound_binary_expression): Likewise.
+	* symtab.h (class scope_id_cache): Likewise.
+	(class symbol_table): Likewise.
+	* txt-eng-ft.h (class ft_manager): Likewise.
+	(class ft_render): Likewise.
+	* unwind-prot.h (class unwind_protect::elem): Likewise.
+	(class unwind_protect::fcn_arg_elem): Likewise.
+	(class unwind_protect::method_elem): Likewise.
+	(class unwind_protect::restore_var_elem): Likewise.
+	(class unwind_protect::delete_ptr_elem): Likewise.
+	(class unwind_protect): Likewise.
+	* zfstream.h (class gzfilebuf): Likewise.
+
+	* mex.cc (class mxArray_octave_value): Disallow assignment.
+	(class mxArray_matlab): Likewise.
+	(class mxArray_number): Likewise.
+	(class mxArray_sparse): Likewise.
+	(class mxArray_struct): Likewise.
+	(class mxArray_cell): Likewise.
+
+	* unwind-prot.h (unwind_protect::elem::elem):
+	Provide default constructor.
+
 2011-01-21  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* src/graphics.cc (axes::properties::set_xlabel,
 	axes::properties::set_ylabel, axes::properties::set_zlabel):
 	Setting axis label color from axis color.
 
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -603,16 +603,23 @@ public:
     }
 
   ~fltk_uimenu()
     {
       delete menubar;
     }
 
 private:
+
+  // No copying!
+
+  fltk_uimenu (const fltk_uimenu&);
+
+  fltk_uimenu operator = (const fltk_uimenu&);
+
   Fl_Menu_Bar* menubar;
 };
 
 class plot_window : public Fl_Window
 {
   friend class fltk_uimenu;
 public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
@@ -865,16 +872,23 @@ public:
 
   void set_name (void)
   {
     window_label = fp.get_title ();
     label (window_label.c_str ());
   }
 
 private:
+
+  // No copying!
+
+  plot_window (const plot_window&);
+
+  plot_window& operator = (const plot_window&);
+
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Mod keys status
   int shift;
 
   // Number of dimensions, 2 or 3.
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -87,16 +87,22 @@ protected:
 
   FILE *f;
 
   close_fcn cf;
 
 private:
 
   int_type underflow_common (bool);
+
+  // No copying!
+
+  c_file_ptr_buf (const c_file_ptr_buf&);
+
+  c_file_ptr_buf& operator = (const c_file_ptr_buf&);
 };
 
 // FIXME -- the following three classes could probably share
 // some code...
 
 template <typename STREAM_T, typename FILE_T, typename BUF_T>
 class
 c_file_ptr_stream : public STREAM_T
@@ -117,16 +123,22 @@ public:
 
   long tell (void) { return buf ? buf->tell () : -1; }
 
   void clear (void) { if (buf) buf->clear (); STREAM_T::clear (); }
 
 private:
 
   BUF_T *buf;
+
+  // No copying!
+
+  c_file_ptr_stream (const c_file_ptr_stream&);
+
+  c_file_ptr_stream& operator = (const c_file_ptr_stream&);
 };
 
 typedef c_file_ptr_stream<std::istream, FILE *, c_file_ptr_buf> i_c_file_ptr_stream;
 typedef c_file_ptr_stream<std::ostream, FILE *, c_file_ptr_buf> o_c_file_ptr_stream;
 typedef c_file_ptr_stream<std::iostream, FILE *, c_file_ptr_buf> io_c_file_ptr_stream;
 
 #ifdef HAVE_ZLIB
 
@@ -194,16 +206,22 @@ protected:
 
   gzFile f;
 
   close_fcn cf;
 
 private:
 
   int_type underflow_common (bool);
+
+  // No copying!
+
+  c_zfile_ptr_buf (const c_zfile_ptr_buf&);
+
+  c_zfile_ptr_buf& operator = (const c_zfile_ptr_buf&);
 };
 
 typedef c_file_ptr_stream<std::istream, gzFile, c_zfile_ptr_buf> i_c_zfile_ptr_stream;
 typedef c_file_ptr_stream<std::ostream, gzFile, c_zfile_ptr_buf> o_c_zfile_ptr_stream;
 typedef c_file_ptr_stream<std::iostream, gzFile, c_zfile_ptr_buf> io_c_zfile_ptr_stream;
 
 #endif
 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -318,16 +318,23 @@ private:
 
   static void CALLBACK tess_edge_flag (GLboolean flag, void *t)
     { reinterpret_cast<opengl_tesselator *> (t)->edge_flag (flag); }
 
   static void CALLBACK tess_error (GLenum err, void *t)
     { reinterpret_cast<opengl_tesselator *> (t)->error (err); }
 
 private:
+
+  // No copying!
+
+  opengl_tesselator (const opengl_tesselator&);  
+
+  opengl_tesselator operator = (const opengl_tesselator&);  
+
   GLUtesselator *glu_tess;
   bool fill;
 };
 
 class
 vertex_data
 {
 public:
@@ -522,16 +529,23 @@ protected:
       vertex_data new_v (vv, cc, nn, aa, v[0]->ambient, v[0]->diffuse,
                          v[0]->specular, v[0]->specular_exp);
       tmp_vdata.push_back (new_v);
 
       *out_data = new_v.get_rep ();
     }
 
 private:
+
+  // No copying!
+
+  patch_tesselator (const patch_tesselator&);
+
+  patch_tesselator& operator = (const patch_tesselator&);
+
   opengl_renderer *renderer;
   int color_mode;       // 0: uni,  1: flat, 2: interp
   int light_mode;       // 0: none, 1: flat, 2: gouraud
   int index;
   bool first;
   std::list<vertex_data> tmp_vdata;
 };
 
diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -1876,16 +1876,23 @@ flex_stream_reader : public stream_reade
 {
 public:
   flex_stream_reader (char *buf_arg) : stream_reader (), buf (buf_arg) { }
 
   int getc (void) { return ::text_yyinput (); }
   int ungetc (int c) { ::xunput (c, buf); return 0; }
 
 private:
+
+  // No copying!
+
+  flex_stream_reader (const flex_stream_reader&);
+
+  flex_stream_reader& operator = (const flex_stream_reader&);	
+
   char *buf;
 };
 
 static int
 process_comment (bool start_in_block, bool& eof)
 {
   eof = false;
 
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -710,16 +710,21 @@ private:
   // Caching these does not cost much or lead to much duplicated
   // code.  For other things, we just request mutation to a
   // Matlab-style mxArray object.
 
   mutable mxClassID id;
   mutable char *class_name;
   mutable mwSize ndims;
   mutable mwSize *dims;
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_octave_value& operator = (const mxArray_octave_value&);
 };
 
 // The base class for the Matlab-style representation, used to handle
 // things that are common to all Matlab-style objects.
 
 class mxArray_matlab : public mxArray_base
 {
 protected:
@@ -1088,16 +1093,21 @@ private:
 
   mwSize ndims;
   mwSize *dims;
 
   void invalid_type_error (void) const
   {
     error ("invalid type for operation");
   }
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_matlab& operator = (const mxArray_matlab&);
 };
 
 // Matlab-style numeric, character, and logical data.
 
 class mxArray_number : public mxArray_matlab
 {
 public:
 
@@ -1471,16 +1481,21 @@ protected:
     if (pi)
       memcpy (pi, val.pi, nbytes);
   }
 
 private:
 
   void *pr;
   void *pi;
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_number& operator = (const mxArray_number&);
 };
 
 // Matlab-style sparse arrays.
 
 class mxArray_sparse : public mxArray_matlab
 {
 public:
 
@@ -1636,16 +1651,21 @@ private:
       memcpy (pi, val.pi, nbytes);
 
     if (ir)
       memcpy (ir, val.ir, nzmax * sizeof (mwIndex));
 
     if (jc)
       memcpy (jc, val.jc, (val.get_n () + 1) * sizeof (mwIndex));
   }
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_sparse& operator = (const mxArray_sparse&);
 };
 
 // Matlab-style struct arrays.
 
 class mxArray_struct : public mxArray_matlab
 {
 public:
 
@@ -1876,16 +1896,21 @@ private:
     mwSize nel = get_number_of_elements ();
 
     for (mwIndex i = 0; i < nel * nfields; i++)
       {
         mxArray *ptr = val.data[i];
         data[i] = ptr ? ptr->dup () : 0;
       }
   }
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_struct& operator = (const mxArray_struct& val);
 };
 
 // Matlab-style cell arrays.
 
 class mxArray_cell : public mxArray_matlab
 {
 public:
 
@@ -1953,16 +1978,21 @@ private:
     mwSize nel = get_number_of_elements ();
 
     for (mwIndex i = 0; i < nel; i++)
       {
         mxArray *ptr = val.data[i];
         data[i] = ptr ? ptr->dup () : 0;
       }
   }
+
+  // No assignment!  FIXME -- should this be implemented?  Note that we
+  // do have a copy constructor.
+
+  mxArray_cell& operator = (const mxArray_cell&);
 };
 
 // ------------------------------------------------------------------
 
 mxArray::mxArray (const octave_value& ov)
   : rep (new mxArray_octave_value (ov)), name (0) { }
 
 mxArray::mxArray (mxClassID id, mwSize ndims, const mwSize *dims, mxComplexity flag)
@@ -2370,16 +2400,22 @@ private:
     if (p != global_memlist.end ())
       global_memlist.erase (p);
 #ifdef DEBUG
     else
       warning ("%s: value not marked", function_name ());
 #endif
 
   }
+
+  // No copying!
+
+  mex (const mex&);
+
+  mex& operator = (const mex&);
 };
 
 // List of memory resources we allocated.
 std::set<void *> mex::global_memlist;
 
 // Current context.
 mex *mex_context = 0;
 
diff --git a/src/oct-procbuf.h b/src/oct-procbuf.h
--- a/src/oct-procbuf.h
+++ b/src/oct-procbuf.h
@@ -59,13 +59,21 @@ protected:
 
   int wstatus;
 
   bool open_p;
 
   pid_t proc_pid;
 
   octave_procbuf *next;
+
+private:
+
+  // No copying!
+
+  octave_procbuf (const octave_procbuf&);
+
+  octave_procbuf& operator = (const octave_procbuf&);
 };
 
 extern void symbols_of_oct_procbuf (void);
 
 #endif
diff --git a/src/pt-cbinop.h b/src/pt-cbinop.h
--- a/src/pt-cbinop.h
+++ b/src/pt-cbinop.h
@@ -54,16 +54,23 @@ public:
 
   octave_value::compound_binary_op cop_type (void) const { return etype; }
 
 private:
 
   tree_expression *op_lhs;
   tree_expression *op_rhs;
   octave_value::compound_binary_op etype;
+
+  // No copying!
+
+  tree_compound_binary_expression (const tree_compound_binary_expression&);
+
+  tree_compound_binary_expression& operator =
+    (const tree_compound_binary_expression&);
 };
 
 // a "virtual constructor"
 
 tree_binary_expression *
 maybe_compound_binary_expression (tree_expression *a, tree_expression *b,
                                   int l = -1, int c = -1,
                                   octave_value::binary_op t
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -95,16 +95,22 @@ public:
           retval = false;
         }
 
       return retval;
     }
 
   private:
 
+    // No copying!
+
+    scope_id_cache (const scope_id_cache&);
+
+    scope_id_cache& operator = (const scope_id_cache&);
+
     static scope_id_cache *instance;
 
     // The next available scope not in the free list.
     scope_id next_available;
 
     // The set of scope IDs that are currently allocated.
     std::set<scope_id> in_use;
 
@@ -1880,16 +1886,22 @@ public:
       assert (inst->curr_fcn == 0 || curr_fcn == 0);
       inst->curr_fcn = curr_fcn;
     }
 
   static void cleanup (void);
 
 private:
 
+  // No copying!
+
+  symbol_table (const symbol_table&);
+
+  symbol_table& operator = (const symbol_table&);
+
   typedef std::map<std::string, symbol_record>::const_iterator table_const_iterator;
   typedef std::map<std::string, symbol_record>::iterator table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator global_table_const_iterator;
   typedef std::map<std::string, octave_value>::iterator global_table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator persistent_table_const_iterator;
   typedef std::map<std::string, octave_value>::iterator persistent_table_iterator;
diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -59,19 +59,27 @@ public:
 
   static FT_Face get_font (const std::string& name, const std::string& weight,
                            const std::string& angle, double size)
     { return (instance_ok ()
               ? instance->do_get_font (name, weight, angle, size)
               : 0); }
 
 private:
+
   static ft_manager *instance;
 
 private:
+
+  // No copying!
+
+  ft_manager (const ft_manager&);
+
+  ft_manager& operator = (const ft_manager&);
+
   ft_manager (void)
     {
       if (FT_Init_FreeType (&library))
         {
           ::error ("unable to initialize freetype library");
         }
 
 #if HAVE_FONTCONFIG
diff --git a/src/txt-eng-ft.h b/src/txt-eng-ft.h
--- a/src/txt-eng-ft.h
+++ b/src/txt-eng-ft.h
@@ -76,16 +76,22 @@ public:
 
   void text_to_pixels (const std::string& txt,
                        uint8NDArray& pixels_, Matrix& bbox,
                        int halign, int valign, double rotation);
 
 private:
   int rotation_to_mode (double rotation) const;
 
+  // No copying!
+
+  ft_render (const ft_render&);
+
+  ft_render& operator = (const ft_render&);
+
 private:
   FT_Face face;
   Matrix bbox;
   uint8NDArray pixels;
   int xoffset;
   int yoffset;
   int mode;
   uint8_t red, green, blue;
diff --git a/src/unwind-prot.h b/src/unwind-prot.h
--- a/src/unwind-prot.h
+++ b/src/unwind-prot.h
@@ -38,20 +38,31 @@ public:
 
   // A generic unwind_protect element. Knows how to run itself and discard itself.
   // Also, contains a pointer to the next element.
   class elem
   {
     elem *next;
 
   public:
+    elem (void) : next (0) { }
+
     virtual void run (void) { }
+
     virtual ~elem (void) { }
 
     friend class unwind_protect;
+
+  private:
+
+    // No copying!
+
+    elem (const elem&);
+
+    elem& operator = (const elem&);
   };
 
   // An element that merely runs a void (*)(void) function.
 
   class fcn_elem : public elem
   {
   public:
     fcn_elem (void (*fptr) (void))
@@ -71,16 +82,23 @@ public:
   {
   public:
     fcn_arg_elem (void (*fcn) (T), T arg)
       : e_fcn (fcn), e_arg (arg) { }
 
     void run (void) { e_fcn (e_arg); }
 
   private:
+
+    // No copying!
+
+    fcn_arg_elem (const fcn_arg_elem&);
+
+    fcn_arg_elem& operator = (const fcn_arg_elem&);
+
     void (*e_fcn) (T);
     T e_arg;
   };
 
   // An element that stores a variable of type T along with a void (*) (const T&)
   // function pointer, and calls the function with the parameter.
 
   template <class T>
@@ -104,48 +122,68 @@ public:
   {
   public:
     method_elem (T *obj, void (T::*method) (void))
       : e_obj (obj), e_method (method) { }
 
     void run (void) { (e_obj->*e_method) (); }
 
   private:
+    // No copying! XXX
+
+    method_elem (const method_elem&);
+
+    method_elem operator = (const method_elem&);
+
     T *e_obj;
     void (T::*e_method) (void);
   };
 
   // An element that stores arbitrary variable, and restores it.
 
   template <class T>
   class restore_var_elem : public elem
   {
   public:
     restore_var_elem (T& ref, const T& val)
       : e_ptr (&ref), e_val (val) { }
 
     void run (void) { *e_ptr = e_val; }
 
   private:
+
+    // No copying!
+
+    restore_var_elem (const restore_var_elem&);
+
+    restore_var_elem& operator = (const restore_var_elem&);
+
     T *e_ptr, e_val;
   };
 
   // Deletes a class allocated using new.
 
   template <class T>
   class delete_ptr_elem : public elem
   {
   public:
     delete_ptr_elem (T *ptr)
       : e_ptr (ptr) { }
 
     void run (void) { delete e_ptr; }
 
   private:
+
     T *e_ptr;
+
+    // No copying!
+
+    delete_ptr_elem (const delete_ptr_elem&);
+
+    delete_ptr_elem operator = (const delete_ptr_elem&);
   };
 
   unwind_protect (void) : head () { }
 
   void add (elem *new_elem)
     {
       new_elem->next = head;
       head = new_elem;
@@ -262,16 +300,22 @@ public:
   ~unwind_protect (void)
     {
       run ();
     }
 
 private:
 
   elem *head;
+
+  // No copying!
+
+  unwind_protect (const unwind_protect&);
+
+  unwind_protect& operator = (const unwind_protect&);
 };
 
 // Like unwind_protect, but this one will guard against the possibility of seeing
 // an exception (or interrupt) in the cleanup actions. Not that we can do much about
 // it, but at least we won't crash.
 
 class
 OCTINTERP_API
diff --git a/src/zfstream.h b/src/zfstream.h
--- a/src/zfstream.h
+++ b/src/zfstream.h
@@ -194,16 +194,23 @@ protected:
 
 //
 // Some future enhancements
 //
 //  virtual int_type uflow();
 //  virtual int_type pbackfail(int_type c = traits_type::eof());
 
 private:
+
+  // No copying!
+
+  gzfilebuf (const gzfilebuf&);
+
+  gzfilebuf& operator = (const gzfilebuf&);
+
   /**
    *  @brief  Allocate internal buffer.
    *
    *  This function is safe to call multiple times. It will ensure
    *  that a proper internal buffer exists if it is required. If the
    *  buffer already exists or is external, the buffer pointers will be
    *  reset to their original state.
   */
