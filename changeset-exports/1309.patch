# HG changeset patch
# User jwe
# Date 804052994 0
#      Sun Jun 25 04:03:14 1995 +0000
# Node ID c0187e1c02f9168ea1fa30b84e014615a7e34480
# Parent  8c8a83cf184a3831acfa7283de5080f71cd6d68a
[project @ 1995-06-25 04:00:46 by jwe]

diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -62,16 +62,19 @@ static int free_format = 0;
 static int plus_format = 0;
 
 // Nonzero means always print like dollars and cents.
 static int bank_format = 0;
 
 // Nonzero means print data in hexadecimal format.
 static int hex_format = 0;
 
+// Nonzero means print data in binary-bit-pattern format.
+static int bit_format = 0;
+
 // Nonzero means don't put newlines around the column number headers.
 static int compact_format = 0;
 
 // Nonzero means use an e format.
 static int print_e = 0;
 
 // Nonzero means print E instead of e for exponent field.
 static int print_big_e = 0;
@@ -83,32 +86,34 @@ any_element_is_negative (const Matrix& a
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (a.elem (i, j) < 0.0)
 	return 1;
   return 0;
 }
 
-static int
+// XXX FIXME XXX -- these should probably be somewhere else.
+
+int
 any_element_is_inf_or_nan (const Matrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double val = a.elem (i, j);
 	if (xisinf (val) || xisnan (val))
 	  return 1;
       }
   return 0;
 }
 
-static int
+int
 any_element_is_inf_or_nan (const ComplexMatrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	Complex val = a.elem (i, j);
@@ -221,16 +226,21 @@ set_format (double d, int& fw)
       fw += sign;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (double);
       rd = 0;
     }
+  else if (bit_format)
+    {
+      fw = 8 * sizeof (double);
+      rd = 0;
+    }
   else if (xisnan (d) || D_NINT (d) == d)
     {
       fw = digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
     }
@@ -250,17 +260,17 @@ set_format (double d, int& fw)
 	}
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
-  if (! (bank_format || hex_format)
+  if (! (bank_format || hex_format || bit_format)
       && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (digits > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
@@ -322,16 +332,21 @@ set_format (const Matrix& m, int& fw)
       fw += sign;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (double);
       rd = 0;
     }
+  else if (bit_format)
+    {
+      fw = 8 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_int_or_inf_or_nan (m))
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
@@ -370,17 +385,17 @@ set_format (const Matrix& m, int& fw)
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
-  if (! (bank_format ||hex_format)
+  if (! (bank_format ||hex_format || bit_format)
       && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
@@ -460,16 +475,22 @@ set_format (const Complex& c, int& r_fw,
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (double);
       i_fw = 2 * sizeof (double);
       rd = 0;
     }
+  else if (bit_format)
+    {
+      r_fw = 8 * sizeof (double);
+      i_fw = 8 * sizeof (double);
+      rd = 0;
+    }
   else if (inf_or_nan || (D_NINT (rp) == rp && D_NINT (ip) == ip))
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
       rd = 0;
@@ -508,17 +529,17 @@ set_format (const Complex& c, int& r_fw,
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
-  if (! (bank_format || hex_format)
+  if (! (bank_format || hex_format || bit_format)
       && (r_fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
@@ -604,16 +625,22 @@ set_format (const ComplexMatrix& cm, int
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (double);
       i_fw = 2 * sizeof (double);
       rd = 0;
     }
+  else if (bit_format)
+    {
+      r_fw = 8 * sizeof (double);
+      i_fw = 8 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_int_or_inf_or_nan (rp)
 	   && all_elements_are_int_or_inf_or_nan (ip))
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
@@ -653,17 +680,17 @@ set_format (const ComplexMatrix& cm, int
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
-  if (! (bank_format || hex_format)
+  if (! (bank_format || hex_format || bit_format)
       && (r_fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
@@ -750,16 +777,21 @@ set_format (const Range& r, int& fw)
       fw = sign + digits < 0 ? 4 : digits + 3;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (double);
       rd = 0;
     }
+  else if (bit_format)
+    {
+      fw = 8 * sizeof (double);
+      rd = 0;
+    }
   else if (all_elements_are_ints (r))
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits;
       rd = 0;
     }
   else
     {
@@ -792,17 +824,17 @@ set_format (const Range& r, int& fw)
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = sign + ld + 1 + rd;
     }
 
-  if (! (bank_format || hex_format)
+  if (! (bank_format || hex_format || bit_format)
       && (fw > user_pref.output_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = sign + 2 + prec + exp_field;
 
@@ -827,16 +859,52 @@ set_format (const Range& r)
 }
 
 union equiv
 {
   double d;
   unsigned char i[sizeof (double)];
 };
 
+#define PRINT_CHAR_BITS(os, c) \
+  do \
+    { \
+      unsigned char ctmp = c; \
+      char stmp[9]; \
+      stmp[0] = (c & 0x80) ? '1' : '0'; \
+      stmp[1] = (c & 0x40) ? '1' : '0'; \
+      stmp[2] = (c & 0x20) ? '1' : '0'; \
+      stmp[3] = (c & 0x10) ? '1' : '0'; \
+      stmp[4] = (c & 0x08) ? '1' : '0'; \
+      stmp[5] = (c & 0x04) ? '1' : '0'; \
+      stmp[6] = (c & 0x02) ? '1' : '0'; \
+      stmp[7] = (c & 0x01) ? '1' : '0'; \
+      stmp[8] = '\0'; \
+      os.form ("%s", stmp); \
+    } \
+  while (0)
+
+#define PRINT_CHAR_BITS_SWAPPED(os, c) \
+  do \
+    { \
+      unsigned char ctmp = c; \
+      char stmp[9]; \
+      stmp[0] = (c & 0x01) ? '1' : '0'; \
+      stmp[1] = (c & 0x02) ? '1' : '0'; \
+      stmp[2] = (c & 0x04) ? '1' : '0'; \
+      stmp[3] = (c & 0x08) ? '1' : '0'; \
+      stmp[4] = (c & 0x10) ? '1' : '0'; \
+      stmp[5] = (c & 0x20) ? '1' : '0'; \
+      stmp[6] = (c & 0x40) ? '1' : '0'; \
+      stmp[7] = (c & 0x80) ? '1' : '0'; \
+      stmp[8] = '\0'; \
+      os.form ("%s", stmp); \
+    } \
+  while (0)
+
 static inline void
 pr_any_float (const char *fmt, ostream& os, double d, int fw = 0)
 {
   if (d == -0.0)
     d = 0.0;
 
   if (fmt)
     {
@@ -860,16 +928,48 @@ pr_any_float (const char *fmt, ostream& 
 		os.form ("%02x", (int) tmp.i[i]);
 	    }
 	  else
 	    {
 	      for (int i = sizeof (double) - 1; i >= 0; i--)
 		os.form ("%02x", (int) tmp.i[i]);
 	    }
 	}
+      else if (bit_format)
+	{
+	  equiv tmp;
+	  tmp.d = d;
+
+	  // Unless explicitly asked for, always print in big-endian
+	  // format.
+
+	  // XXX FIXME XXX -- is it correct to swap bytes for VAX
+	  // formats and not for Cray?
+
+	  if (native_float_format == OCTAVE_IEEE_BIG
+	      || native_float_format == OCTAVE_CRAY
+	      || native_float_format == OCTAVE_UNKNOWN_FLT_FMT)
+	    {
+	      for (int i = 0; i < sizeof (double); i++)
+		PRINT_CHAR_BITS (os, tmp.i[i]);
+	    }
+	  else
+	    {
+	      if (bit_format > 1)
+		{
+		  for (int i = 0; i < sizeof (double); i++)
+		    PRINT_CHAR_BITS_SWAPPED (os, tmp.i[i]);
+		}
+	      else
+		{
+		  for (int i = sizeof (double) - 1; i >= 0; i--)
+		    PRINT_CHAR_BITS (os, tmp.i[i]);
+		}
+	    }
+	}
       else if (xisinf (d))
 	{
 	  char *s;
 	  if (d < 0.0)
 	    s = "-Inf";
 	  else
 	    s = "Inf";
 
@@ -907,25 +1007,25 @@ pr_imag_float (ostream& os, double d, in
 static inline void
 pr_complex (ostream& os, const Complex& c, int r_fw = 0, int i_fw = 0)
 {
   double r = c.real ();
   pr_float (os, r, r_fw);
   if (! bank_format)
     {
       double i = c.imag ();
-      if (! hex_format && i < 0)
+      if (! (hex_format || bit_format) && i < 0)
 	{
 	  os << " - ";
 	  i = -i;
 	  pr_imag_float (os, i, i_fw);
 	}
       else
 	{
-	  if (hex_format)
+	  if (hex_format || bit_format)
 	    os << "  ";
 	  else
 	    os << " + ";
 
 	  pr_imag_float (os, i, i_fw);
 	}
       os << "i";
     }
@@ -1167,17 +1267,17 @@ octave_print_internal (ostream& os, cons
 	  os << "\n";
 	}
     }
   else
     {
       int r_fw, i_fw;
       set_format (cm, r_fw, i_fw);
       int column_width = i_fw + r_fw;
-      column_width += (bank_format || hex_format) ? 2 : 7;
+      column_width += (bank_format || hex_format|| bit_format) ? 2 : 7;
       int total_width = nc * column_width;
       int max_width = terminal_columns ();
 
       if (pr_as_read_syntax)
 	max_width -= 4;
 
       if (free_format)
 	{
@@ -1368,16 +1468,17 @@ DEFUN ("disp", Fdisp, Sdisp, 1, 1,
 
 static void
 init_format_state (void)
 {
   free_format = 0;
   plus_format = 0;
   bank_format = 0;
   hex_format = 0;
+  bit_format = 0;
   print_e = 0;
   print_big_e = 0;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
   tree_constant *tmp = 0;
@@ -1456,16 +1557,26 @@ set_format_style (int argc, char **argv)
 	      init_format_state ();
 	      hex_format = 1;
 	    }
 	  else if (strcmp (*argv, "native-hex") == 0)
 	    {
 	      init_format_state ();
 	      hex_format = 2;
 	    }
+	  else if (strcmp (*argv, "bit") == 0)
+	    {
+	      init_format_state ();
+	      bit_format = 1;
+	    }
+	  else if (strcmp (*argv, "native-bit") == 0)
+	    {
+	      init_format_state ();
+	      bit_format = 2;
+	    }
 	  else if (strcmp (*argv, "+") == 0 || strcmp (*argv, "plus") == 0)
 	    {
 	      init_format_state ();
 	      plus_format = 1;
 	    }
 	  else if (strcmp (*argv, "bank") == 0)
 	    {
 	      init_format_state ();
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -43,16 +43,22 @@ extern void octave_print_internal (ostre
 extern void octave_print_internal (ostream& os, const ComplexMatrix& cm,
 				   int pr_as_read_syntax = 0);
 
 extern void octave_print_internal (ostream& os, const Range& r,
 				   int pr_as_read_syntax = 0);
 
 extern void set_format_style (int argc, char **argv);
 
+// XXX FIXME XXX -- these should probably be somewhere else.
+
+extern int any_element_is_inf_or_nan (const Matrix& a);
+
+extern int any_element_is_inf_or_nan (const ComplexMatrix& a);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
