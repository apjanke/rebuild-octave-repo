# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498513836 14400
#      Mon Jun 26 17:50:36 2017 -0400
# Node ID a6e49930ddd2a81d1b1d9bedf21ecd8546c15366
# Parent  d59fb809595b93a2814538800f842231a40b6327
avoid some global access to interpreter and symbol table

* variables.cc: Avoid using __get_symbol_table__ or
__get_interpreter__ if possible.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -77,17 +77,18 @@ static std::string Vwhos_line_format
 octave_function *
 is_valid_function (const std::string& fcn_name,
                    const std::string& warn_for, bool warn)
 {
   octave_function *ans = nullptr;
 
   if (! fcn_name.empty ())
     {
-      octave::symbol_table& symtab = octave::__get_symbol_table__ ("is_valid_function");
+      octave::symbol_table& symtab
+        = octave::__get_symbol_table__ ("is_valid_function");
 
       octave_value val = symtab.find_function (fcn_name);
 
       if (val.is_defined ())
         ans = val.function_value (true);
     }
 
   // FIXME: Should this be "err" and "error_for", rather than warn?
@@ -192,24 +193,23 @@ get_struct_elts (const std::string& text
       if (len != std::string::npos)
         pos += len + 1;
     }
 
   return retval;
 }
 
 static inline bool
-is_variable (const std::string& name)
+is_variable (octave::symbol_table& symtab, const std::string& name)
 {
   bool retval = false;
 
   if (! name.empty ())
     {
-      octave::symbol_table::scope *scope
-        = octave::__get_current_scope__ ("is_variable");
+      octave::symbol_table::scope *scope = symtab.current_scope ();
 
       octave_value val = scope ? scope->varval (name) : octave_value ();
 
       retval = val.is_defined ();
     }
 
   return retval;
 }
@@ -240,17 +240,20 @@ generate_struct_completions (const std::
 
       std::string base_name = prefix;
 
       pos = base_name.find_first_of ("{(. ");
 
       if (pos != std::string::npos)
         base_name = base_name.substr (0, pos);
 
-      if (is_variable (base_name))
+      octave::symbol_table& symtab
+        = octave::__get_symbol_table__ ("generate_struct_completions");
+
+        if (is_variable (symtab, base_name))
         {
           int parse_status;
 
           octave::unwind_protect frame;
 
           frame.protect_var (discard_error_messages);
           frame.protect_var (discard_warning_messages);
 
@@ -312,79 +315,82 @@ looks_like_struct (const std::string& te
       retval = (tmp.is_defined () && tmp.isstruct ());
     }
 #endif
 
   return retval;
 }
 
 static octave_value
-do_isglobal (const octave_value_list& args)
+do_isglobal (octave::symbol_table& symtab, const octave_value_list& args)
 {
   if (args.length () != 1)
     print_usage ();
 
   if (! args(0).is_string ())
     error ("isglobal: NAME must be a string");
 
-  octave::symbol_table::scope *scope = octave::__get_current_scope__ ("do_isglobal");
+  octave::symbol_table::scope *scope = symtab.current_scope ();
 
   std::string name = args(0).string_value ();
 
   return scope && scope->is_global (name);
 }
 
-DEFUN (isglobal, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (isglobal, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} isglobal (@var{name})
 Return true if @var{name} is a globally visible variable.
 
 For example:
 
 @example
 @group
 global x
 isglobal ("x")
    @result{} 1
 @end group
 @end example
 @seealso{isvarname, exist}
 @end deftypefn */)
 {
-  return do_isglobal (args);
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
+  return do_isglobal (symtab, args);
 }
 
 /*
 %!test
 %! global x;
 %! assert (isglobal ("x"), true);
 
 %!error isglobal ()
 %!error isglobal ("a", "b")
 %!error isglobal (1)
 */
 
 static int
-symbol_exist (const std::string& name, const std::string& type = "any")
+symbol_exist (octave::interpreter& interp, const std::string& name,
+              const std::string& type = "any")
 {
   if (octave::is_keyword (name))
     return 0;
 
   bool search_any = type == "any";
   bool search_var = type == "var";
   bool search_dir = type == "dir";
   bool search_file = type == "file";
   bool search_builtin = type == "builtin";
   bool search_class = type == "class";
 
   if (! (search_any || search_var || search_dir || search_file ||
          search_builtin || search_class))
     error ("exist: unrecognized type argument \"%s\"", type.c_str ());
 
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("symbol_exist");
+  octave::symbol_table& symtab = interp.get_symbol_table ();
 
   if (search_any || search_var)
     {
       octave::symbol_table::scope *scope = symtab.current_scope ();
 
       octave_value val = scope ? scope->varval (name) : octave_value ();
 
       if (val.is_constant () || val.isobject ()
@@ -410,17 +416,17 @@ symbol_exist (const std::string& name, c
     }
 
   if (search_any || search_file || search_dir)
     {
       std::string file_name = octave::lookup_autoload (name);
 
       if (file_name.empty ())
         {
-          octave::load_path& lp = octave::__get_load_path__ ("symbol_exist");
+          octave::load_path& lp = interp.get_load_path ();
 
           file_name = lp.find_fcn (name);
         }
 
       size_t len = file_name.length ();
 
       if (len > 0)
         {
@@ -489,24 +495,27 @@ unique_symbol_name (const std::string& b
 
   std::string nm = basename + alpha[GET_IDX (len)];
 
   size_t pos = nm.length ();
 
   if (nm.substr (0, 2) == "__")
     nm.append ("__");
 
-  while (symbol_exist (nm, "any"))
+  octave::interpreter& interp
+    = octave::__get_interpreter__ ("unique_symbol_name");
+
+  while (symbol_exist (interp, nm, "any"))
     nm.insert (pos++, 1, alpha[GET_IDX (len)]);
 
   return nm;
 }
 
-DEFUN (exist, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (exist, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{c} =} exist (@var{name})
 @deftypefnx {} {@var{c} =} exist (@var{name}, @var{type})
 Check for the existence of @var{name} as a variable, function, file,
 directory, or class.
 
 The return code @var{c} is one of
 
 @table @asis
@@ -582,20 +591,20 @@ them.
 
   if (nargin == 2)
     {
       std::string type = args(1).xstring_value ("exist: TYPE must be a string");
 
       if (type == "class")
         warning ("exist: \"class\" type argument is not implemented");
 
-      return ovl (symbol_exist (name, type));
+      return ovl (symbol_exist (interp, name, type));
     }
   else
-    return ovl (symbol_exist (name));
+    return ovl (symbol_exist (interp, name));
 }
 
 /*
 %!shared dirtmp, __var1
 %! dirtmp = P_tmpdir ();
 %! __var1 = 1;
 
 %!assert (exist ("__%Highly_unlikely_name%__"), 0)
@@ -1584,25 +1593,24 @@ private:
 };
 
 static octave_value
 do_who (octave::interpreter& interp, int argc, const string_vector& argv,
         bool return_list, bool verbose = false, std::string msg = "")
 {
   octave_value retval;
 
+  octave::symbol_table& symtab = interp.get_symbol_table ();
   octave::call_stack& cs = interp.get_call_stack ();
 
   std::string my_name = argv[0];
 
   bool global_only = false;
   bool have_regexp = false;
 
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("do_who");
-
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-file")
         {
           // FIXME: This is an inefficient manner to implement this as the
           // variables are loaded in to a temporary context and then treated.
           // It would be better to refecat symbol_info_list to not store the
@@ -2114,21 +2122,20 @@ name_matches_any_pattern (const std::str
 static inline void
 maybe_warn_exclusive (bool exclusive)
 {
   if (exclusive)
     warning ("clear: ignoring --exclusive option");
 }
 
 static void
-do_clear_functions (const string_vector& argv, int argc, int idx,
+do_clear_functions (octave::symbol_table& symtab,
+                    const string_vector& argv, int argc, int idx,
                     bool exclusive = false)
 {
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("do_clear_functions");
-
   if (idx == argc)
     symtab.clear_functions ();
   else
     {
       if (exclusive)
         {
           string_vector fcns = symtab.user_function_names ();
 
@@ -2146,21 +2153,20 @@ do_clear_functions (const string_vector&
         {
           while (idx < argc)
             symtab.clear_function_pattern (argv[idx++]);
         }
     }
 }
 
 static void
-do_clear_globals (const string_vector& argv, int argc, int idx,
+do_clear_globals (octave::symbol_table& symtab,
+                  const string_vector& argv, int argc, int idx,
                   bool exclusive = false)
 {
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("do_clear_globals");
-
   octave::symbol_table::scope *scope = symtab.current_scope ();
 
   if (! scope)
     return;
 
   if (idx == argc)
     {
       string_vector gvars = symtab.global_variable_names ();
@@ -2190,21 +2196,21 @@ do_clear_globals (const string_vector& a
         {
           while (idx < argc)
             scope->clear_global_pattern (argv[idx++]);
         }
     }
 }
 
 static void
-do_clear_variables (const string_vector& argv, int argc, int idx,
+do_clear_variables (octave::symbol_table& symtab,
+                    const string_vector& argv, int argc, int idx,
                     bool exclusive = false, bool have_regexp = false)
 {
-  octave::symbol_table::scope *scope
-    = octave::__get_current_scope__ ("do_clear_variables");
+  octave::symbol_table::scope *scope = symtab.current_scope ();
 
   if (! scope)
     return;
 
   if (idx == argc)
     scope->clear_variables ();
   else
     {
@@ -2230,77 +2236,74 @@ do_clear_variables (const string_vector&
           else
             while (idx < argc)
               scope->clear_variable_pattern (argv[idx++]);
         }
     }
 }
 
 static void
-do_clear_symbols (const string_vector& argv, int argc, int idx,
+do_clear_symbols (octave::symbol_table& symtab,
+                  const string_vector& argv, int argc, int idx,
                   bool exclusive = false)
 {
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("do_clear_symbols");
-
   if (idx == argc)
     {
       octave::symbol_table::scope *scope = symtab.current_scope ();
 
       if (scope)
         scope->clear_variables ();
     }
   else
     {
       if (exclusive)
         {
           // FIXME: is this really what we want, or do we
           // somehow want to only clear the functions that are not
           // shadowed by local variables?  It seems that would be a
           // bit harder to do.
 
-          do_clear_variables (argv, argc, idx, exclusive);
-          do_clear_functions (argv, argc, idx, exclusive);
+          do_clear_variables (symtab, argv, argc, idx, exclusive);
+          do_clear_functions (symtab, argv, argc, idx, exclusive);
         }
       else
         {
           while (idx < argc)
             symtab.clear_symbol_pattern (argv[idx++]);
         }
     }
 }
 
 static void
-do_matlab_compatible_clear (const string_vector& argv, int argc, int idx)
+do_matlab_compatible_clear (octave::symbol_table& symtab,
+                            const string_vector& argv, int argc, int idx)
 {
   // This is supposed to be mostly Matlab compatible.
 
-  octave::symbol_table& symtab
-    = octave::__get_symbol_table__ ("do_matlab_compatible_clear");
-
   octave::symbol_table::scope *scope = symtab.current_scope ();
 
   if (! scope)
     return;
 
   for (; idx < argc; idx++)
     {
       if (argv[idx] == "all"
           && ! scope->is_local_variable ("all"))
         {
           symtab.clear_all ();
         }
       else if (argv[idx] == "functions"
                && ! scope->is_local_variable ("functions"))
         {
-          do_clear_functions (argv, argc, ++idx);
+          do_clear_functions (symtab, argv, argc, ++idx);
         }
       else if (argv[idx] == "global"
                && ! scope->is_local_variable ("global"))
         {
-          do_clear_globals (argv, argc, ++idx);
+          do_clear_globals (symtab, argv, argc, ++idx);
         }
       else if (argv[idx] == "variables"
                && ! scope->is_local_variable ("variables"))
         {
           scope->clear_variables ();
         }
       else if (argv[idx] == "classes"
                && ! scope->is_local_variable ("classes"))
@@ -2393,41 +2396,42 @@ The arguments are treated as regular exp
 match will be cleared.
 @end table
 
 With the exception of @code{exclusive}, all long options can be used
 without the dash as well.
 @seealso{who, whos, exist}
 @end deftypefn */)
 {
+  octave::symbol_table& symtab = interp.get_symbol_table ();
+
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
   if (argc == 1)
     {
-      do_clear_globals (argv, argc, true);
-      do_clear_variables (argv, argc, true);
+      do_clear_globals (symtab, argv, argc, true);
+      do_clear_variables (symtab, argv, argc, true);
 
       octave_link::clear_workspace ();
     }
   else
     {
       int idx = 0;
 
       bool clear_all = false;
       bool clear_functions = false;
       bool clear_globals = false;
       bool clear_variables = false;
       bool clear_objects = false;
       bool exclusive = false;
       bool have_regexp = false;
       bool have_dash_option = false;
 
-      octave::symbol_table& symtab = interp.get_symbol_table ();
       octave::symbol_table::scope *scope = symtab.current_scope ();
 
       while (++idx < argc)
         {
           if (argv[idx] == "-all" || argv[idx] == "-a")
             {
               CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
 
@@ -2476,54 +2480,54 @@ without the dash as well.
             }
           else
             break;
         }
 
       if (idx <= argc)
         {
           if (! have_dash_option)
-            do_matlab_compatible_clear (argv, argc, idx);
+            do_matlab_compatible_clear (symtab, argv, argc, idx);
           else
             {
               if (clear_all)
                 {
                   maybe_warn_exclusive (exclusive);
 
                   if (++idx < argc)
                     warning ("clear: ignoring extra arguments after -all");
 
                   symtab.clear_all ();
                 }
               else if (have_regexp)
                 {
-                  do_clear_variables (argv, argc, idx, exclusive, true);
+                  do_clear_variables (symtab, argv, argc, idx, exclusive, true);
                 }
               else if (clear_functions)
                 {
-                  do_clear_functions (argv, argc, idx, exclusive);
+                  do_clear_functions (symtab, argv, argc, idx, exclusive);
                 }
               else if (clear_globals)
                 {
-                  do_clear_globals (argv, argc, idx, exclusive);
+                  do_clear_globals (symtab, argv, argc, idx, exclusive);
                 }
               else if (clear_variables)
                 {
-                  do_clear_variables (argv, argc, idx, exclusive);
+                  do_clear_variables (symtab, argv, argc, idx, exclusive);
                 }
               else if (clear_objects)
                 {
                   if (scope)
                     scope->clear_objects ();
                   octave_class::clear_exemplar_map ();
                   symtab.clear_all ();
                 }
               else
                 {
-                  do_clear_symbols (argv, argc, idx, exclusive);
+                  do_clear_symbols (symtab, argv, argc, idx, exclusive);
                 }
             }
 
           octave_link::set_workspace ();
         }
     }
 
   return ovl ();
