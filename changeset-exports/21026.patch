# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451759339 28800
#      Sat Jan 02 10:28:59 2016 -0800
# Node ID 5a340d8458d695167b67708ec166da982ded041d
# Parent  f7e64e1baa08fcc768aef7fea39f880dca67df84
maint: Alphabetize list of gripes.

* gripes.h, gripes.cc: Alphabetize list of gripes.

diff --git a/libinterp/corefcn/gripes.cc b/libinterp/corefcn/gripes.cc
--- a/libinterp/corefcn/gripes.cc
+++ b/libinterp/corefcn/gripes.cc
@@ -25,38 +25,113 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ovl.h"
 #include "utils.h"
 
+////////////////////////////////////////////////////////////////////////////////
+// Alphabetized list of gripes.
+////////////////////////////////////////////////////////////////////////////////
+
 void
-gripe_not_supported (const char *fcn)
+gripe_2_or_3_dim_plot (void)
+{
+  error ("plot: can only plot in 2 or 3 dimensions");
+}
+
+void
+gripe_data_conversion (const char *from, const char *to)
+{
+  error ("unable to convert from %s to %s format", from, to);
+}
+
+void
+gripe_data_file_in_path (const std::string& fcn, const std::string& file)
 {
-  error ("%s: not supported on this system", fcn);
+  warning_with_id ("Octave:data-file-in-path",
+                   "%s: '%s' found by searching load path",
+                   fcn.c_str (), file.c_str ());
+}
+
+void
+gripe_disabled_feature (const std::string& func, const std::string& feature,
+                        const std::string& pkg /*="Octave"*/)
+{
+  error ("%s: support for %s was disabled when %s was built",
+         func.c_str (), feature.c_str (), pkg.c_str ());
+}
+
+void
+gripe_divide_by_zero (void)
+{
+  warning_with_id ("Octave:divide-by-zero", "division by zero");
+}
+
+void
+gripe_empty_arg (const char *name, bool is_error)
+{
+  if (is_error)
+    error ("%s: empty matrix is invalid as an argument", name);
+  else
+    warning ("%s: argument is empty matrix", name);
 }
 
 void
-gripe_not_implemented (const char *fcn)
+gripe_implicit_conversion (const char *id, const char *from, const char *to)
+{
+  warning_with_id (id, "implicit conversion from %s to %s", from, to);
+}
+
+void
+gripe_implicit_conversion (const std::string& id,
+                           const std::string& from, const std::string& to)
 {
-  error ("%s: not implemented", fcn);
+  warning_with_id (id.c_str (),
+                   "implicit conversion from %s to %s",
+                   from.c_str (), to.c_str ());
+}
+
+void
+gripe_indexed_cs_list (void)
+{
+  error ("a cs-list cannot be further indexed");
 }
 
 void
-gripe_string_invalid (void)
+gripe_invalid_conversion (const std::string& from, const std::string& to)
 {
-  error ("std::string constant used in invalid context");
+  error ("invalid conversion from %s to %s", from.c_str (), to.c_str ());
+}
+
+void
+gripe_invalid_inquiry_subscript (void)
+{
+  error ("invalid dimension inquiry of a non-existent value");
 }
 
 void
-gripe_range_invalid (void)
+gripe_invalid_value_specified (const char *name)
+{
+  warning ("invalid value specified for '%s'", name);
+}
+
+void
+gripe_logical_conversion (void)
 {
-  error ("range constant used in invalid context");
+  warning_with_id ("Octave:logical-conversion",
+                   "value not equal to 1 or 0 converted to logical 1");
+}
+
+void
+gripe_nonbraced_cs_list_assignment (void)
+{
+  error ("invalid assignment to cs-list outside multiple assignment");
 }
 
 void
 gripe_nonconformant (void)
 {
   error ("nonconformant matrices");
 }
 
@@ -64,85 +139,83 @@ void
 gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
                      octave_idx_type r2, octave_idx_type c2)
 {
   error ("nonconformant matrices (op1 is %dx%d, op2 is %dx%d)",
          r1, c1, r2, c2);
 }
 
 void
-gripe_empty_arg (const char *name, bool is_error)
+gripe_not_implemented (const char *fcn)
+{
+  error ("%s: not implemented", fcn);
+}
+
+void
+gripe_not_supported (const char *fcn)
 {
-  if (is_error)
-    error ("%s: empty matrix is invalid as an argument", name);
-  else
-    warning ("%s: argument is empty matrix", name);
+  error ("%s: not supported on this system", fcn);
+}
+
+void
+gripe_range_invalid (void)
+{
+  error ("range constant used in invalid context");
 }
 
 void
 gripe_square_matrix_required (const char *name)
 {
   error ("%s: argument must be a square matrix", name);
 }
 
 void
+gripe_string_invalid (void)
+{
+  error ("std::string constant used in invalid context");
+}
+
+void
+gripe_unrecognized_data_fmt (const char *warn_for)
+{
+  error ("%s: unrecognized data format requested", warn_for);
+}
+
+void
+gripe_unrecognized_float_fmt (void)
+{
+  error ("unrecognized floating point format requested");
+}
+
+void
+gripe_user_returned_invalid (const char *name)
+{
+  error ("%s: user-supplied function returned invalid value", name);
+}
+
+void
 gripe_user_supplied_eval (const char *name)
 {
   octave_execution_exception e;
 
   gripe_user_supplied_eval (e, name);
 }
 
 void
 gripe_user_supplied_eval (octave_execution_exception& e,
                           const char *name)
 {
   error (e, "%s: evaluation of user-supplied function failed", name);
 }
 
 void
-gripe_user_returned_invalid (const char *name)
-{
-  error ("%s: user-supplied function returned invalid value", name);
-}
-
-void
-gripe_invalid_conversion (const std::string& from, const std::string& to)
-{
-  error ("invalid conversion from %s to %s", from.c_str (), to.c_str ());
-}
-
-void
-gripe_invalid_value_specified (const char *name)
-{
-  warning ("invalid value specified for '%s'", name);
-}
-
-void
-gripe_2_or_3_dim_plot (void)
+gripe_warn_complex_cmp (void)
 {
-  error ("plot: can only plot in 2 or 3 dimensions");
-}
-
-void
-gripe_unrecognized_float_fmt (void)
-{
-  error ("unrecognized floating point format requested");
-}
-
-void
-gripe_unrecognized_data_fmt (const char *warn_for)
-{
-  error ("%s: unrecognized data format requested", warn_for);
-}
-
-void
-gripe_data_conversion (const char *from, const char *to)
-{
-  error ("unable to convert from %s to %s format", from, to);
+  warning_with_id ("Octave:language-extension",
+                   "comparing complex numbers is not supported in Matlab");
 }
 
 void
 gripe_wrong_type_arg (const char *name, const char *s, bool is_error)
 {
   octave_execution_exception e;
 
   gripe_wrong_type_arg (e, name, s, is_error);
@@ -255,89 +328,21 @@ gripe_wrong_type_arg (octave_execution_e
                       const octave_value& tc, bool is_error)
 {
   std::string type = tc.type_name ();
 
   gripe_wrong_type_arg (e, type, is_error);
 }
 
 void
-gripe_wrong_type_arg_for_unary_op (const octave_value& op)
-{
-  std::string type = op.type_name ();
-  error ("invalid operand '%s' for unary operator", type.c_str ());
-}
-
-void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op)
 {
   std::string type = op.type_name ();
   error ("invalid operand '%s' for binary operator", type.c_str ());
 }
 
 void
-gripe_implicit_conversion (const char *id, const char *from, const char *to)
-{
-  warning_with_id (id, "implicit conversion from %s to %s", from, to);
-}
-
-void
-gripe_implicit_conversion (const std::string& id,
-                           const std::string& from, const std::string& to)
+gripe_wrong_type_arg_for_unary_op (const octave_value& op)
 {
-  warning_with_id (id.c_str (),
-                   "implicit conversion from %s to %s",
-                   from.c_str (), to.c_str ());
-}
-
-void
-gripe_divide_by_zero (void)
-{
-  warning_with_id ("Octave:divide-by-zero", "division by zero");
-}
-
-void
-gripe_logical_conversion (void)
-{
-  warning_with_id ("Octave:logical-conversion",
-                   "value not equal to 1 or 0 converted to logical 1");
-}
-
-void
-gripe_invalid_inquiry_subscript (void)
-{
-  error ("invalid dimension inquiry of a non-existent value");
+  std::string type = op.type_name ();
+  error ("invalid operand '%s' for unary operator", type.c_str ());
 }
 
-void
-gripe_indexed_cs_list (void)
-{
-  error ("a cs-list cannot be further indexed");
-}
-
-void
-gripe_nonbraced_cs_list_assignment (void)
-{
-  error ("invalid assignment to cs-list outside multiple assignment");
-}
-
-void
-gripe_warn_complex_cmp (void)
-{
-  warning_with_id ("Octave:language-extension",
-                   "comparing complex numbers is not supported in Matlab");
-}
-
-void
-gripe_disabled_feature (const std::string& func, const std::string& feature,
-                        const std::string& pkg /*="Octave"*/)
-{
-  error ("%s: support for %s was disabled when %s was built",
-         func.c_str (), feature.c_str (), pkg.c_str ());
-}
-
-void
-gripe_data_file_in_path (const std::string& fcn, const std::string& file)
-{
-  warning_with_id ("Octave:data-file-in-path",
-                   "%s: '%s' found by searching load path",
-                   fcn.c_str (), file.c_str ());
-}
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -25,67 +25,103 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "lo-array-gripes.h"
 
 class octave_value;
 class octave_execution_exception;
 
+////////////////////////////////////////////////////////////////////////////////
+// Alphabetized list of gripes.
+////////////////////////////////////////////////////////////////////////////////
+
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_not_supported (const char *);
+gripe_2_or_3_dim_plot (void);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_data_conversion (const char *from, const char *to);
+
+extern OCTINTERP_API void
+gripe_data_file_in_path (const std::string& fcn, const std::string& file);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_not_implemented (const char *);
+gripe_disabled_feature (const std::string& func, const std::string& feature,
+                        const std::string& pkg="Octave");
+
+extern OCTINTERP_API void
+gripe_divide_by_zero (void);
+
+extern OCTINTERP_API void
+gripe_empty_arg (const char *name, bool is_error);
+
+extern OCTINTERP_API void
+gripe_implicit_conversion (const char *id, const char *from, const char *to);
+
+extern OCTINTERP_API void
+gripe_implicit_conversion (const std::string& id, const std::string& from,
+                           const std::string& to);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_string_invalid (void);
+gripe_indexed_cs_list (void);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_invalid_conversion (const std::string& from, const std::string& to);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_range_invalid (void);
+gripe_invalid_inquiry_subscript (void);
+
+extern OCTINTERP_API void
+gripe_invalid_value_specified (const char *name);
+
+extern OCTINTERP_API void
+gripe_logical_conversion (void);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_nonbraced_cs_list_assignment (void);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_nonconformant (void);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
                      octave_idx_type r2, octave_idx_type c2);
 
-extern OCTINTERP_API void
-gripe_empty_arg (const char *name, bool is_error);
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_not_implemented (const char *);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_not_supported (const char *);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_range_invalid (void);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_square_matrix_required (const char *name);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_string_invalid (void);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_unrecognized_data_fmt (const char *warn_for);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_unrecognized_float_fmt (void);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
+gripe_user_returned_invalid (const char *name);
+
+extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_user_supplied_eval (const char *name);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
 
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_user_returned_invalid (const char *name);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_invalid_conversion (const std::string& from, const std::string& to);
-
 extern OCTINTERP_API void
-gripe_invalid_value_specified (const char *name);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_2_or_3_dim_plot (void);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_unrecognized_float_fmt (void);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_unrecognized_data_fmt (const char *warn_for);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_data_conversion (const char *from, const char *to);
+gripe_warn_complex_cmp (void);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const char *s,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const char *s,
@@ -141,46 +177,14 @@ gripe_wrong_type_arg (const octave_value
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_wrong_type_arg_for_unary_op (const octave_value& op);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
 gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
-extern OCTINTERP_API void
-gripe_implicit_conversion (const char *id, const char *from, const char *to);
-
-extern OCTINTERP_API void
-gripe_implicit_conversion (const std::string& id, const std::string& from,
-                           const std::string& to);
-
-extern OCTINTERP_API void
-gripe_divide_by_zero (void);
-
-extern OCTINTERP_API void
-gripe_logical_conversion (void);
-
 extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_invalid_inquiry_subscript (void);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_indexed_cs_list (void);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_nonbraced_cs_list_assignment (void);
-
-extern OCTINTERP_API void
-gripe_warn_complex_cmp (void);
-
-extern OCTINTERP_API void GCC_ATTR_NORETURN
-gripe_disabled_feature (const std::string& func, const std::string& feature,
-                        const std::string& pkg="Octave");
-
-extern OCTINTERP_API void
-gripe_data_file_in_path (const std::string& fcn, const std::string& file);
+gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 #endif
