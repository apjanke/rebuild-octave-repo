# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1429157606 14400
#      Thu Apr 16 00:13:26 2015 -0400
# Node ID 27c0285828f8ef63e70840bedb9b4c86584b228d
# Parent  2d638e67aeef5e8feaba102db1d4a4c36a5528a2
make copying images to the clipboard work with Qt graphics

* Figure.h, Figure.cc (Figure::createFigureToolBarAndMenuBar): Enable
Copy item in the Edit menu.
(delete_file): New static function.
(Figure::copy_figure_callback): New member function.
(Figure::editCopy): New arg, choose_format.  Make it work.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -23,35 +23,40 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QAction>
 #include <QActionEvent>
 #include <QActionGroup>
 #include <QApplication>
+#include <QClipboard>
 #include <QEvent>
 #include <QFileDialog>
 #include <QFileInfo>
 #include <QFrame>
+#include <QImage>
 #include <QMainWindow>
 #include <QMenu>
 #include <QMenuBar>
 #include <QMessageBox>
 #include <QtDebug>
 #include <QTimer>
 #include <QToolBar>
 
 #include "Canvas.h"
 #include "Container.h"
 #include "Figure.h"
 #include "FigureWindow.h"
 #include "MouseModeActionGroup.h"
 #include "QtHandlesUtils.h"
 
+#include "file-ops.h"
+#include "unwind-prot.h"
+
 #include "octave-qt-link.h"
 
 #include "builtin-defun-decls.h"
 
 namespace QtHandles
 {
 
 #define ABOUT_TEXT "<b>QtHandles</b> - a Qt-based toolkit for <a href=\"http://www.octave.org\">Octave</a>.<br><br>Copyright (C) 2011-2015 Michael Goffioul"
@@ -308,18 +313,18 @@ Figure::createFigureToolBarAndMenuBar (v
   fileMenu->addAction (tr ("&Save"), this, SLOT (fileSaveFigure (bool)));
   fileMenu->addAction (tr ("Save &As"), this, SLOT (fileSaveFigureAs (void)));
   fileMenu->addSeparator ();
   fileMenu->addAction (tr ("&Close Figure"), this,
                        SLOT (fileCloseFigure (void)), Qt::CTRL|Qt::Key_W);
 
   QMenu* editMenu = m_menuBar->addMenu (tr ("&Edit"));
   editMenu->menuAction ()->setObjectName ("builtinMenu");
-  editMenu->addAction (tr ("Cop&y"), this, SLOT (editCopy (void)),
-                       Qt::CTRL|Qt::Key_C)->setEnabled (false);
+  editMenu->addAction (tr ("Cop&y"), this, SLOT (editCopy (bool)),
+                       Qt::CTRL|Qt::Key_C);
   editMenu->addSeparator ();
   editMenu->addActions (m_mouseModeGroup->actions ());
 
   QMenu* helpMenu = m_menuBar->addMenu (tr ("&Help"));
   helpMenu->menuAction ()->setObjectName ("builtinMenu");
   helpMenu->addAction (tr ("&About QtHandles"), this,
                        SLOT (helpAboutQtHandles (void)));
   helpMenu->addAction (tr ("About &Qt"), qApp, SLOT (aboutQt (void)));
@@ -804,34 +809,83 @@ Figure::fileSaveFigure (bool prompt)
     }
 }
 
 void
 Figure::save_figure_callback (const std::string& file)
 {
   Ffeval (ovl ("print", file));
 }
+
+static void
+delete_file (const std::string& file)
+{
+  octave_unlink (file);
+}
+  
+void
+Figure::copy_figure_callback (const std::string& format)
+{
+  std::string msg;
+
+  unwind_protect frame;
+
+  std::string file = octave_tempnam ("", "oct-", msg);
+
+  if (file.empty ())
+    {
+      // FIXME: report error contained in message.
+      return;
+    }
+
+  frame.add_fcn (delete_file, file);
+
+  std::string device = "-d" + format;
+
+  Ffeval (ovl ("print", file, device));
+
+  QClipboard *clipboard = QApplication::clipboard ();
+
+  clipboard->setImage (QImage (file.c_str ()));
+}
   
 void
 Figure::fileSaveFigureAs (void)
 {
   fileSaveFigure (true);
 }
 
 void
 Figure::fileCloseFigure (void)
 {
   qWidget<QMainWindow> ()->close ();
 }
 
 void
-Figure::editCopy (void)
+Figure::editCopy (bool /* choose_format */)
 {
-  // FIXME: implement this by printing to a temporary file in some
-  // format (jpg?  png?  pdf?) and copying the result to the clipboard.
+  QString format = "jpg";
+
+#if 0
+
+  // FIXME: allow choice of image formats.
+
+  if (choose_format)
+    {
+      QFileInfo finfo (file);
+
+      format = QFileDialog::getSaveFileName (qWidget<FigureWindow> (),
+                                           tr ("Save Figure As"),
+                                           finfo.absoluteFilePath (), 0, 0,
+                                           QFileDialog::DontUseNativeDialog);
+    }
+#endif
+
+  octave_link::post_event (this, &Figure::copy_figure_callback,
+                           format.toStdString ());
 }
 
 void
 Figure::addCustomToolBar (QToolBar* bar, bool visible)
 {
   QMainWindow* win = qWidget<QMainWindow> ();
 
   if (! visible)
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -104,23 +104,24 @@ private:
   void addCustomToolBar (QToolBar* bar, bool visible);
   void showCustomToolBar (QToolBar* bar, bool visible);
 
   void updateFigureToolBarAndMenuBar (void);
 
   static void updateBoundingBoxHelper (void*);
 
   void save_figure_callback (const std::string& file);
+  void copy_figure_callback (const std::string& format);
 
 private slots:
   void setMouseMode (MouseMode mode);
   void fileSaveFigure (bool prompt = false);
   void fileSaveFigureAs (void);
   void fileCloseFigure (void);
-  void editCopy (void);
+  void editCopy (bool choose_format = false);
   void helpAboutQtHandles (void);
   void updateMenuBar (void);
   void updateContainer (void);
   void toggleAxes (void);
   void toggleGrid (void);
   void autoAxes (void);
 
 signals:
