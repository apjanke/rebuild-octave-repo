# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361900595 18000
#      Tue Feb 26 12:43:15 2013 -0500
# Node ID 6884401b2fbbec9a2ffdcb6f446c6b2ea095f949
# Parent  bdf365c5c9bf00ee5058981b3947aeb43193c19a
move reset_parser lexer helper function to lexical_feedback class

* lex.h, lex.ll (reset_parser): Declare as member function of
lexical_feedback class.  Change all uses.
(cleanup_parser): Don't call reset parser.
* parse.h (reset_parser): Delete decl.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -681,17 +681,17 @@ get_debug_input (const std::string& prom
   frame.protect_var (curr_lexer);
   curr_lexer = new lexical_feedback ();
   frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
   while (Vdebugging)
     {
       reset_error_handler ();
 
-      reset_parser ();
+      curr_lexer->reset_parser ();
 
       // Save current value of global_command.
       frame.protect_var (global_command);
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -569,17 +569,17 @@ main_loop (void)
   do
     {
       try
         {
           unwind_protect inner_frame;
 
           reset_error_handler ();
 
-          reset_parser ();
+          curr_lexer->reset_parser ();
 
           if (symbol_table::at_top_level ())
             tree_evaluator::reset_debug_state ();
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -200,16 +200,18 @@ public:
 
   void init (void)
   {
     // The closest paren, brace, or bracket nesting is not an object
     // index.
     looking_at_object_index.push_front (false);
   }
 
+  void reset_parser (void);
+
   int octave_read (char *buf, unsigned int max_size);
 
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
   void xunput (char c, char *buf);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -971,22 +971,18 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
         return LEXICAL_ERROR;
       }
     else
       TOK_RETURN (END_OF_INPUT);
   }
 
 %%
 
-// Fix things up for errors or interrupts.  The parser is never called
-// recursively, so it is always safe to reinitialize its state before
-// doing any parsing.
-
 void
-reset_parser (void)
+lexical_feedback::reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
@@ -1204,18 +1200,16 @@ clear_all_buffers (void)
 {                 
   while (current_buffer ())
     octave_pop_buffer_state ();
 }
 
 void
 cleanup_parser (void)
 {
-  reset_parser ();
-
   clear_all_buffers ();
 }
 
 // Restore a buffer (for unwind-prot).
 
 void
 restore_input_buffer (void *buf)
 {
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3498,17 +3498,17 @@ parse_fcn_file (const std::string& ff, c
   if (ffile)
     {
       bool eof;
 
       frame.protect_var (curr_lexer);
       curr_lexer = new lexical_feedback ();
       frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
-      reset_parser ();
+      curr_lexer->reset_parser ();
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
       if (! eof)
         {
@@ -4339,17 +4339,17 @@ eval_string (const std::string& s, bool 
 
   frame.add_fcn (switch_to_buffer, old_buf);
   frame.add_fcn (delete_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   do
     {
-      reset_parser ();
+      curr_lexer->reset_parser ();
 
       frame.protect_var (global_command);
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_parse_h 1
 
 #include <cstdio>
 
 #include <string>
 
 #include <stack>
 
-extern void reset_parser (void);
 extern int octave_lex (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class tree_statement_list;
 class octave_function;
 
