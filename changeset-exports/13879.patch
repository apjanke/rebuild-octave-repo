# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1321555632 18000
#      Thu Nov 17 13:47:12 2011 -0500
# Node ID 440d7914cf017b6c0ff8185fc4199a9323a1e675
# Parent  0d32a681d943525aa8e6632be99a475a20be2d80
fix regression in __voronoi__ and convhulln option processing

* __voronoi__.cc (F__voronoi__): Allow user-supplied options to
completely replace defaults.
* convhulln.cc (F__convhulln__): Likewise.

* __voronoi__.cc (F__voronoi__): New argument, caller.
* voronoi.m, voronoin.m: Pass name of function to __voronoi__.

* voronoin.m: Don't check options here.
* voronoi.m: Don't check nargout.

diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -65,18 +65,16 @@
 ## 2003-12-14 Rafael Laboissiere <rafael@laboissiere.net>
 ## Added optional fourth argument to pass options to the underlying
 ## qhull command
 
 function [vx, vy] = voronoi (varargin)
 
   if (nargin < 1)
     print_usage ();
-  elseif (nargout > 2)
-    error ("voronoi: No more than two output arguments supported");
   endif
 
   narg = 1;
   if (isscalar (varargin{1}) && ishandle (varargin{1}))
     handl = varargin{1};
     if (! strcmp (get (handl, "type"), "axes"))
       error ("voronoi: expecting first argument to be an axes object");
     endif
@@ -126,17 +124,19 @@ function [vx, vy] = voronoi (varargin)
   ydelta = ymax - ymin;
   scale = 2;
 
   xbox = [xmin - scale * xdelta; xmin - scale * xdelta; ...
           xmax + scale * xdelta; xmax + scale * xdelta];
   ybox = [xmin - scale * xdelta; xmax + scale * xdelta; ...
           xmax + scale * xdelta; xmin - scale * xdelta];
 
-  [p, c, infi] = __voronoi__ ([[x(:) ; xbox(:)], [y(:); ybox(:)]], opts{:});
+  [p, c, infi] = __voronoi__ ("voronoi",
+                              [[x(:) ; xbox(:)], [y(:); ybox(:)]],
+                              opts{:});
 
   idx = find (! infi);
   ll = length (idx);
   c = c(idx).';
   k = sum (cellfun ("length", c));
   edges = cell2mat (cellfun (@(x) [x ; [x(end), x(1:end-1)]], c,
                              "uniformoutput", false));
 
diff --git a/scripts/geometry/voronoin.m b/scripts/geometry/voronoin.m
--- a/scripts/geometry/voronoin.m
+++ b/scripts/geometry/voronoin.m
@@ -43,24 +43,24 @@ function [C, F] = voronoin (pts, options
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   [np, dim] = size (pts);
 
   if (np <= dim)
     error ("voronoin: number of points must be greater than their dimension");
-  elseif (nargin == 2 && ! (ischar (options) || iscellstr (options)))
-    error ("voronoin: OPTIONS argument must be a string or cell array of strings");
   endif
 
+  caller = "voronoin";
+
   if (nargin == 1)
-    [C, F] = __voronoi__ (pts);
+    [C, F] = __voronoi__ (caller, pts);
   else
-    [C, F] = __voronoi__ (pts, options);
+    [C, F] = __voronoi__ (caller, pts, options);
   endif
 
 endfunction
 
 
 %% FIXME: Need functional tests
 
 %% FIXME: Need input validation tests
diff --git a/src/DLD-FUNCTIONS/__voronoi__.cc b/src/DLD-FUNCTIONS/__voronoi__.cc
--- a/src/DLD-FUNCTIONS/__voronoi__.cc
+++ b/src/DLD-FUNCTIONS/__voronoi__.cc
@@ -52,68 +52,84 @@ extern "C" {
 
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "__voronoi__.oct 2007-07-24";
 #endif
 #endif
 
 DEFUN_DLD (__voronoi__, args, ,
         "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{pts})\n\
-@deftypefnx {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{pts}, @var{options})\n\
+@deftypefn  {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{caller}, @var{pts})\n\
+@deftypefnx {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{caller}, @var{pts}, @var{options})\n\
 @deftypefnx {Loadable Function} {@var{C}, @var{F}, @var{Inf_Pts} =} __voronoi__ (@dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #ifdef HAVE_QHULL
 
   retval(0) = 0.0;
 
   int nargin = args.length ();
-  if (nargin < 1 || nargin > 2)
+  if (nargin < 2 || nargin > 3)
     {
       print_usage ();
       return retval;
     }
 
-  std::string cmd = "qhull v";
-
-  if (nargin == 2 && ! args(1).is_empty ())
-    {
-      if (args(1).is_string ())
-        cmd += " " + args(1).string_value ();
-      else if (args(1).is_cellstr ())
-        {
-          Array<std::string> tmp = args(1).cellstr_value ();
+  std::string caller = args(0).string_value ();
 
-          for (octave_idx_type i = 0; i < tmp.numel (); i++)
-            cmd += " " + tmp(i);
-        }
-      else
-        {
-          error ("__voronoi__: OPTIONS argument must be a string, cell array of strings, or empty");
-          return retval;
-        }
-    }
-
-  Matrix points (args(0).matrix_value ());
+  Matrix points = args(1).matrix_value ();
   const octave_idx_type dim = points.columns ();
   const octave_idx_type num_points = points.rows ();
 
   points = points.transpose ();
 
+  std::string options;
+
+  if (dim <= 4)
+    options = " Qbb";
+  else
+    options = " Qbb Qx";
+
+  if (nargin == 3)
+    {
+      octave_value opt_arg = args(2);
+
+      if (opt_arg.is_string ())
+        options = " " + args(1).string_value ();
+      else if (opt_arg.is_empty ())
+        ; // Use default options.
+      else if (args(1).is_cellstr ())
+        {
+          options = "";
+
+          Array<std::string> tmp = opt_arg.cellstr_value ();
+
+          for (octave_idx_type i = 0; i < tmp.numel (); i++)
+            options += " " + tmp(i);
+        }
+      else
+        {
+          error ("%s: OPTIONS must be a string, cell array of strings, or empty",
+                 caller.c_str ());
+          return retval;
+        }
+    }
+
   boolT ismalloc = false;
 
   // Replace the 0 pointer with stdout for debugging information
   FILE *outfile = 0;
   FILE *errfile = stderr;
 
-  // Qhull flags and points arguments are not const...
+  // qh_new_qhull command and points arguments are not const...
+
+  std::string cmd = "qhull v" + options;
 
   OCTAVE_LOCAL_BUFFER (char, cmd_str, cmd.length () + 1);
 
   strcpy (cmd_str, cmd.c_str ());
 
   int exitcode = qh_new_qhull (dim, num_points, points.fortran_vec (),
                                ismalloc, cmd_str, outfile, errfile);
   if (! exitcode) 
@@ -270,30 +286,30 @@ Undocumented internal function.\n\
           C(idx) = facet_list;
         }
 
       retval(2) = at_inf;
       retval(1) = C;
       retval(0) = F;
     }
   else
-    error ("__voronoi__: qhull failed");
+    error ("%s: qhull failed", caller.c_str ());
 
   // Free memory from Qhull
   qh_freeqhull (! qh_ALL);
 
   int curlong, totlong;
   qh_memfreeshort (&curlong, &totlong);
 
   if (curlong || totlong)
-    warning ("__voronoi__: did not free %d bytes of long memory (%d pieces)",
-             totlong, curlong);
+    warning ("%s: qhull did not free %d bytes of long memory (%d pieces)",
+             caller.c_str (), totlong, curlong);
 
 #else
-  error ("__voronoi__: not available in this version of Octave");
+  error ("%s: not available in this version of Octave", caller.c_str ());
 #endif
 
   return retval;
 }
 
 /*
 
 ## No test needed for internal helper function.
diff --git a/src/DLD-FUNCTIONS/convhulln.cc b/src/DLD-FUNCTIONS/convhulln.cc
--- a/src/DLD-FUNCTIONS/convhulln.cc
+++ b/src/DLD-FUNCTIONS/convhulln.cc
@@ -95,48 +95,54 @@ convex hull is calculated.\n\n\
     }
 
   Matrix points (args(0).matrix_value ());
   const octave_idx_type dim = points.columns ();
   const octave_idx_type num_points = points.rows ();
 
   points = points.transpose ();
 
-  std::string cmd = "qhull";
+  std::string options;
 
   if (dim <= 4)
-    cmd += " Qt";
+    options = " Qt";
   else
-    cmd += " Qt Qx";
+    options = " Qt Qx";
 
-  if (nargin == 2 && ! args(1).is_empty ())
+  if (nargin == 2)
     {
       if (args(1).is_string ())
-        cmd += " " + args(1).string_value ();
+        options = " " + args(1).string_value ();
+      else if (args(1).is_empty ())
+        ; // Use default options.
       else if (args(1).is_cellstr ())
         {
+          options = "";
+
           Array<std::string> tmp = args(1).cellstr_value ();
 
           for (octave_idx_type i = 0; i < tmp.numel (); i++)
-            cmd += " " + tmp(i);
+            options += " " + tmp(i);
         }
       else
         {
           error ("convhulln: OPTIONS must be a string, cell array of strings, or empty");
           return retval;
         }
      }
 
   boolT ismalloc = false;
 
   // Replace the 0 pointer with stdout for debugging information.
   FILE *outfile = 0;
   FILE *errfile = stderr;
       
-  // Qhull flags and points arguments are not const...
+  // qh_new_qhull command and points arguments are not const...
+
+  std::string cmd = "qhull" + options;
 
   OCTAVE_LOCAL_BUFFER (char, cmd_str, cmd.length () + 1);
 
   strcpy (cmd_str, cmd.c_str ());
 
   int exitcode = qh_new_qhull (dim, num_points, points.fortran_vec (),
                                ismalloc, cmd_str, outfile, errfile);
   if (! exitcode)
