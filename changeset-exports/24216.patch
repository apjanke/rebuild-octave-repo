# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510176607 18000
#      Wed Nov 08 16:30:07 2017 -0500
# Node ID 81d723f0cdfe414e6a1c818d82fe63b6f551c26a
# Parent  51954e5cbbc51c224d0bd485489ed1496286be88
clean up change merged from stable

* pt-decl.h (tree_decl_elt::name): Now const.
(tree_decl_init_list::variable_names): New function.
* oct-parse.in.yy (base_parser::make_decl_command): Call
tree_decl_init_list::variable_names instead of looping here.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3957,27 +3957,18 @@ namespace octave
   base_parser::make_decl_command (int tok, token *tok_val,
                                   tree_decl_init_list *lst)
   {
     tree_decl_command *retval = nullptr;
 
     int l = tok_val->line ();
     int c = tok_val->column ();
 
-    std::list<std::string> names;
-    for (tree_decl_init_list::iterator p = lst->begin ();
-         p != lst->end (); p++)
-      {
-        tree_decl_elt *elt = *p;
-
-        std::string nm = elt->name ();
-        if (! nm.empty ())
-          names.push_back (nm);
-      }
-    m_lexer.mark_as_variables (names);
+    if (lst)
+      m_lexer.mark_as_variables (lst->variable_names ());
 
     switch (tok)
       {
       case GLOBAL:
         {
           retval = new tree_decl_command ("global", lst, l, c);
           retval->mark_global ();
         }
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_pt_decl_h)
 #define octave_pt_decl_h 1
 
 #include "octave-config.h"
 
+#include <list>
 #include <string>
 
 #include "base-list.h"
 #include "oct-lvalue.h"
 #include "pt-cmd.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
@@ -84,17 +85,17 @@ namespace octave
     void mark_global (void) { type = global; }
     bool is_global (void) const { return type == global; }
 
     void mark_persistent (void) { type = persistent; }
     bool is_persistent (void) const { return type == persistent; }
 
     tree_identifier * ident (void) { return id; }
 
-    std::string name (void) { return id ? id->name () : ""; }
+    std::string name (void) const { return id ? id->name () : ""; }
 
     tree_expression * expression (void) { return expr; }
 
     tree_decl_elt * dup (symbol_table::scope& scope) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_decl_elt (*this);
@@ -142,16 +143,31 @@ namespace octave
     }
 
     void mark_persistent (void)
     {
       for (tree_decl_elt *elt : *this)
         elt->mark_persistent ();
     }
 
+    std::list<std::string> variable_names (void) const
+    {
+      std::list<std::string> retval;
+
+      for (const tree_decl_elt *elt : *this)
+      {
+        std::string nm = elt->name ();
+
+        if (! nm.empty ())
+          retval.push_back (nm);
+      }
+
+      return retval;
+    }
+
     void accept (tree_walker& tw)
     {
       tw.visit_decl_init_list (*this);
     }
   };
 
   // Base class for declaration commands -- global, static, etc.
 
