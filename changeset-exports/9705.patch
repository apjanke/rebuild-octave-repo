# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254981839 -7200
#      Thu Oct 08 08:03:59 2009 +0200
# Node ID 5acd99c3e79435b3936751d5e38d46c158f38b63
# Parent  bb413c0d0d6d0f8e072a6a3ddeb276d75a31ff3c
avoid recursive overloaded calls in builtin numel

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* utils.cc (dims_to_numel): New function.
+	* utils.h: Declare it.
+	* ov-base.cc (octave_base_value::numel (const octave_value_list&)):
+	Use it here.
+	* data.cc (Fnumel): Also here.
+
 2009-10-07  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (get_dims_str): New function.
 	(symbol_info_list::display_line,
 	symbol_info_list::parse_whos_line_format): Use it to get dims string.
 
 2009-10-07  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2326,29 +2326,38 @@ Trailing singleton dimensions are not co
     print_usage ();
 
   return retval;
 }
 
 DEFUN (numel, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} numel (@var{a})\n\
+@deftypefnx {Built-in Function} {} numel (@var{a}, @var{idx1}, @var{idx2}, @dots{})\n\
 Returns the number of elements in the object @var{a}.\n\
+Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,\n\
+return the number of elements that would result from the indexing\n\
+@example\n\
+  @var{a}(@var{idx1}, @var{idx2}, @dots{})\n\
+@end example\n\
+This method is also called when an object appears as lvalue with cs-list\n\
+indexing, i.e. @code{object@{@dots{}@}} or @code{object(@dots{}).field}.\n\
 @seealso{size}\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_idx_type nargin = args.length ();
 
-  if (nargin >= 1)
+  if (nargin == 1)
+    retval = args(0).numel ();
+  else if (nargin > 1)
     {
-      octave_idx_type numel = args(0).numel (args.slice (1, nargin-1));
-
-      if (! error_state)
-	  retval = numel;
+      // Don't use numel (const octave_value_list&) here as that corresponds to
+      // an overloaded call, not to builtin!
+      retval = dims_to_numel (args(0).dims (), args.slice (1, nargin-1));
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (size, args, nargout,
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -84,36 +84,17 @@ octave_base_value::size (void)
   for (octave_idx_type i = 0; i < dv.length (); i++)
     mdv(i) = dv(i);
   return mdv;
 }
 
 octave_idx_type
 octave_base_value::numel (const octave_value_list& idx)
 {
-  octave_idx_type retval;
-
-  octave_idx_type len = idx.length ();
-
-  if (len == 0)
-    retval = numel ();
-  else
-    {
-      const dim_vector dv = dims ().redim (len);
-      retval = 1;
-      for (octave_idx_type i = 0; i < len; i++)
-        {
-          if (idx(i).is_magic_colon ())
-            retval *= dv(i);
-          else
-            retval *= idx(i).numel ();
-        }
-    }
-
-  return retval;
+  return dims_to_numel (dims (), idx);
 }
 
 octave_value
 octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -995,16 +995,41 @@ get_dimensions (const octave_value& a, c
   nc = b.is_empty () ? 0 : b.int_value ();
 
   if (error_state)
     error ("%s: expecting two scalar arguments", warn_for);
   else
     check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
+octave_idx_type
+dims_to_numel (const dim_vector& dims, const octave_value_list& idx)
+{
+  octave_idx_type retval;
+
+  octave_idx_type len = idx.length ();
+
+  if (len == 0)
+    retval = dims.numel ();
+  else
+    {
+      const dim_vector dv = dims.redim (len);
+      retval = 1;
+      for (octave_idx_type i = 0; i < len; i++)
+        {
+          if (idx(i).is_magic_colon ())
+            retval *= dv(i);
+          else
+            retval *= idx(i).numel ();
+        }
+    }
+
+  return retval;
+}
+
 Matrix
 identity_matrix (octave_idx_type nr, octave_idx_type nc)
 {
   Matrix m (nr, nc, 0.0);
 
   if (nr > 0 && nc > 0)
     {
       octave_idx_type n = std::min (nr, nc);
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -87,16 +87,21 @@ extern OCTINTERP_API void
 get_dimensions (const octave_value& a, const octave_value& b,
 		const char *warn_for, octave_idx_type& nr,
 		octave_idx_type& nc);
 
 extern OCTINTERP_API void
 get_dimensions (const octave_value& a,const char *warn_for,
 		octave_idx_type& nr, octave_idx_type& nc);
 
+extern OCTINTERP_API octave_idx_type
+dims_to_numel (const dim_vector& dims, const octave_value_list& idx);
+
+
+
 extern OCTINTERP_API Matrix
 identity_matrix (octave_idx_type nr, octave_idx_type nc);
 
 extern OCTINTERP_API FloatMatrix
 float_identity_matrix (octave_idx_type nr, octave_idx_type nc);
 
 extern OCTINTERP_API int
 octave_format (std::ostream& os, const char *fmt, ...);
