# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267341589 -3600
#      Sun Feb 28 08:19:49 2010 +0100
# Node ID 9c4daf174387070989fb0a8a2b9b73548ee8c8d5
# Parent  3516a245d607989e848298fdb65c6bacb199650d
implement IDs for common liboctave exceptions

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,16 @@
+2010-02-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* misc/lo-error.c (liboctave_fatal_with_id,
+	set_liboctave_error_with_id_handler): New functions.
+	(current_liboctave_error_with_id_handler): New variable.
+	* misc/lo-error.h: Declare them.
+	(liboctave_error_with_id_handler): New typedef.
+
 2010-02-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* misc/quit.h: Define WIN32_LEAN_AND_MEAN and don't #undef min/max.
 
 	* Makefile.am: Add -bindir option to libcruft_la_LDFLAGS.
 
 2010-02-17  John W. Eaton  <jwe@octave.org>
 
diff --git a/libcruft/misc/lo-error.c b/libcruft/misc/lo-error.c
--- a/libcruft/misc/lo-error.c
+++ b/libcruft/misc/lo-error.c
@@ -32,16 +32,20 @@ along with Octave; see the file COPYING.
 
 /* Having this file in this directory is a kluge to avoid unresolved
    symbol errors when creating shared versions of libcruft. */
 
 /* Pointer to the current error handling function. */
 liboctave_error_handler current_liboctave_error_handler
   = liboctave_fatal;
 
+/* Pointer to the current error_with_id handling function. */
+liboctave_error_with_id_handler current_liboctave_error_with_id_handler
+  = liboctave_fatal_with_id;
+
 /* Pointer to the current warning handler. */
 liboctave_warning_handler current_liboctave_warning_handler
   = liboctave_warning;
 
 /* Pointer to the current warning_with_id handler. */
 liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler
   = liboctave_warning_with_id;
 
@@ -61,16 +65,25 @@ set_liboctave_error_handler (liboctave_e
 {
   if (f)
     current_liboctave_error_handler = f;
   else
     current_liboctave_error_handler = liboctave_fatal;
 }
 
 void
+set_liboctave_error_with_id_handler (liboctave_error_with_id_handler f)
+{
+  if (f)
+    current_liboctave_error_with_id_handler = f;
+  else
+    current_liboctave_error_with_id_handler = liboctave_fatal_with_id;
+}
+
+void
 set_liboctave_warning_handler (liboctave_warning_handler f)
 {
   if (f)
     current_liboctave_warning_handler = f;
   else
     current_liboctave_warning_handler = liboctave_warning;
 }
 
@@ -90,16 +103,27 @@ liboctave_fatal (const char *fmt, ...)
   va_start (args, fmt);
   verror ("fatal", fmt, args);
   va_end (args);
 
   exit (1);
 }
 
 void
+liboctave_fatal_with_id (const char *id, const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  verror ("fatal", fmt, args);
+  va_end (args);
+
+  exit (1);
+}
+
+void
 liboctave_warning (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror ("warning", fmt, args);
   va_end (args);
 }
 
diff --git a/libcruft/misc/lo-error.h b/libcruft/misc/lo-error.h
--- a/libcruft/misc/lo-error.h
+++ b/libcruft/misc/lo-error.h
@@ -24,36 +24,44 @@ along with Octave; see the file COPYING.
 #define octave_liboctave_error_h 1
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 extern void liboctave_fatal (const char *fmt, ...) GCC_ATTR_NORETURN;
 
+extern void liboctave_fatal_with_id (const char *id, const char *fmt, ...) GCC_ATTR_NORETURN;
+
 extern void liboctave_warning (const char *fmt, ...);
 
 extern void liboctave_warning_with_id (const char *id, const char *fmt, ...);
 
 typedef void (*liboctave_error_handler) (const char *, ...);
 
+typedef void (*liboctave_error_with_id_handler) (const char *, const char *, ...);
+
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *, ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
 CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
 
+CRUFT_API extern liboctave_error_with_id_handler current_liboctave_error_with_id_handler;
+
 CRUFT_API extern liboctave_warning_handler current_liboctave_warning_handler;
 
 CRUFT_API extern liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler;
 
 CRUFT_API extern void set_liboctave_error_handler (liboctave_error_handler f);
 
+CRUFT_API extern void set_liboctave_error_with_id_handler (liboctave_error_with_id_handler f);
+
 CRUFT_API extern void set_liboctave_warning_handler (liboctave_warning_handler f);
 
 CRUFT_API extern void set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);
 
 #ifdef __cplusplus
 }
 #endif
 
diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -612,73 +612,92 @@ int
 permute_vector_compare (const void *a, const void *b)
 {
   const permute_vector *pva = static_cast<const permute_vector *> (a);
   const permute_vector *pvb = static_cast<const permute_vector *> (b);
 
   return pva->pidx > pvb->pidx;
 }
 
+const char *error_id_nonconformant_args = "Octave:nonconformant-args";
+
+const char *error_id_index_out_of_bounds = "Octave:index-out-of-bounds";
+
+const char *error_id_invalid_index = "Octave:invalid-index";
+
 void
 gripe_nan_to_logical_conversion (void)
 {
   (*current_liboctave_error_handler) ("invalid conversion of NaN to logical");
 }
 
 void
 gripe_nonconformant (const char *op, int op1_len, int op2_len)
 {
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
+  const char *err_id = error_id_nonconformant_args;
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
      op, op1_len, op2_len);
 }
 
 void
 gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
                      int op2_nr, int op2_nc)
 {
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
+  const char *err_id = error_id_nonconformant_args;
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
      op, op1_nr, op1_nc, op2_nr, op2_nc);
 }
 
 void
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                      const dim_vector& op2_dims)
 {
+  const char *err_id = error_id_nonconformant_args;
   std::string op1_dims_str = op1_dims.str ();
   std::string op2_dims_str = op2_dims.str ();
 
-  (*current_liboctave_error_handler)
-    ("%s: nonconformant arguments (op1 is %s, op2 is %s)",
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "%s: nonconformant arguments (op1 is %s, op2 is %s)",
      op, op1_dims_str.c_str (), op2_dims_str.c_str ());
 }
 
 void gripe_index_out_of_range (int nd, int dim, 
                                octave_idx_type idx, octave_idx_type ext)
 {
+  const char *err_id = error_id_index_out_of_bounds;
   switch (nd)
     {
     case 1:
-      (*current_liboctave_error_handler)
-        ("A(I): index out of bounds; value %d out of bound %d",
+      (*current_liboctave_error_with_id_handler)
+        (err_id, "A(I): index out of bounds; value %d out of bound %d",
          idx, ext);
       break;
     case 2:
-      (*current_liboctave_error_handler)
-        ("A(I,J): %s index out of bounds; value %d out of bound %d",
+      (*current_liboctave_error_with_id_handler)
+        (err_id, "A(I,J): %s index out of bounds; value %d out of bound %d",
          (dim == 1) ? "row" : "column", idx, ext);
       break;
     default:
-      (*current_liboctave_error_handler)
-        ("A(I,J,...): index to dimension %d out of bounds; value %d out of bound %d",
+      (*current_liboctave_error_with_id_handler)
+        (err_id, "A(I,J,...): index to dimension %d out of bounds; value %d out of bound %d",
          dim, idx, ext);
       break;
     }
 }
 
 void gripe_del_index_out_of_range (bool is1d, octave_idx_type idx, 
                                    octave_idx_type ext)
 {
-  (*current_liboctave_error_handler)
-    ("A(%s) = []: index out of bounds; value %d out of bound %d",
+  const char *err_id = error_id_index_out_of_bounds;
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "A(%s) = []: index out of bounds; value %d out of bound %d",
      is1d ? "I" : "..,I,..", idx, ext);
 }
+
+void gripe_invalid_index (void)
+{
+  const char *err_id = error_id_invalid_index;
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "subscript indices must be either positive integers or logicals.");
+}
+
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -86,16 +86,22 @@ struct
 permute_vector
 {
   octave_idx_type pidx;
   octave_idx_type iidx;
 };
 
 extern int OCTAVE_API permute_vector_compare (const void *a, const void *b);
 
+extern OCTAVE_API const char *error_id_nonconformant_args;
+
+extern OCTAVE_API const char *error_id_index_out_of_bounds;
+
+extern OCTAVE_API const char *error_id_invalid_index;
+
 extern void OCTAVE_API gripe_nan_to_logical_conversion (void);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
                                  int op2_nr, int op2_nc);
 
 
@@ -103,9 +109,11 @@ extern void OCTAVE_API gripe_nonconforma
                                             const dim_vector& op2_dims);
 
 extern void OCTAVE_API gripe_index_out_of_range (int nd, int dim, 
                                                  octave_idx_type iext, octave_idx_type ext);
 
 extern void OCTAVE_API gripe_del_index_out_of_range (bool is1d, octave_idx_type iext, 
                                                      octave_idx_type ext);
 
+extern void OCTAVE_API gripe_invalid_index (void);
+
 #endif
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -204,106 +204,126 @@ Array<T>::compute_index (const Array<oct
 
   return retval;
 }
 
 template <class T>
 T& 
 Array<T>::checkelem (octave_idx_type n)
 {
-  if (n < 0 || n >= slice_len)
+  if (n < 0)
+    gripe_invalid_index ();
+  if (n >= slice_len)
     gripe_index_out_of_range (1, 1, n+1, slice_len);
 
   return elem (n);
 }
 
 template <class T>
 T& 
 Array<T>::checkelem (octave_idx_type i, octave_idx_type j)
 {
-  if (i < 0 || i >= dim1 ())
+  if (i < 0 || j < 0)
+    gripe_invalid_index ();
+  if (i >= dim1 ())
     gripe_index_out_of_range (2, 1, i+1, dim1 ());
-  if (j < 0 || j >= dimensions.numel (1))
+  if (j >= dimensions.numel (1))
     gripe_index_out_of_range (2, 2, j+1, dimensions.numel (1));
 
   return elem (i, j);
 }
 
 template <class T>
 T& 
 Array<T>::checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
 {
-  if (i < 0 || i >= dim1 ())
+  if (i < 0 || j < 0 || k < 0)
+    gripe_invalid_index ();
+  if (i >= dim1 ())
     gripe_index_out_of_range (3, 1, i+1, dim1 ());
-  if (j < 0 || j >= dim2 ())
+  if (j >= dim2 ())
     gripe_index_out_of_range (3, 2, j+1, dim2 ());
-  if (k < 0 || k >= dimensions.numel (2))
+  if (k >= dimensions.numel (2))
     gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
 
   return elem (i, j, k);
 }
 
 template <class T>
 T& 
 Array<T>::checkelem (const Array<octave_idx_type>& ra_idx)
 {
   int nd = ra_idx.length ();
   const dim_vector dv = dimensions.redim (nd);
   for (int d = 0; d < nd; d++)
-    if (ra_idx(d) < 0 || ra_idx(d) >= dv(d))
-      gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+    {
+      if (ra_idx(d) < 0)
+        gripe_invalid_index ();
+      if (ra_idx(d) >= dv(d))
+        gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+    }
 
   return elem (ra_idx);
 }
 
 template <class T>
 typename Array<T>::crefT
 Array<T>::checkelem (octave_idx_type n) const
 {
-  if (n < 0 || n >= slice_len)
+  if (n < 0)
+    gripe_invalid_index ();
+  if (n >= slice_len)
     gripe_index_out_of_range (1, 1, n+1, slice_len);
 
   return elem (n);
 }
 
 template <class T>
 typename Array<T>::crefT
 Array<T>::checkelem (octave_idx_type i, octave_idx_type j) const
 {
-  if (i < 0 || i >= dim1 ())
+  if (i < 0 || j < 0)
+    gripe_invalid_index ();
+  if (i >= dim1 ())
     gripe_index_out_of_range (2, 1, i+1, dim1 ());
-  if (j < 0 || j >= dimensions.numel (1))
+  if (j >= dimensions.numel (1))
     gripe_index_out_of_range (2, 2, j+1, dimensions.numel (1));
 
   return elem (i, j);
 }
 
 template <class T>
 typename Array<T>::crefT
 Array<T>::checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
 {
-  if (i < 0 || i >= dim1 ())
+  if (i < 0 || j < 0 || k < 0)
+    gripe_invalid_index ();
+  if (i >= dim1 ())
     gripe_index_out_of_range (3, 1, i+1, dim1 ());
-  if (j < 0 || j >= dim2 ())
+  if (j >= dim2 ())
     gripe_index_out_of_range (3, 2, j+1, dim2 ());
-  if (k < 0 || k >= dimensions.numel (2))
+  if (k >= dimensions.numel (2))
     gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
 
   return elem (i, j, k);
 }
 
 template <class T>
 typename Array<T>::crefT
 Array<T>::checkelem (const Array<octave_idx_type>& ra_idx) const
 {
   int nd = ra_idx.length ();
   const dim_vector dv = dimensions.redim (nd);
   for (int d = 0; d < nd; d++)
-    if (ra_idx(d) < 0 || ra_idx(d) >= dv(d))
-      gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+    {
+      if (ra_idx(d) < 0)
+        gripe_invalid_index ();
+      if (ra_idx(d) >= dv(d))
+        gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+    }
 
   return elem (ra_idx);
 }
 
 template <class T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
 {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2010-02-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-util.cc (gripe_index_out_of_range): Throw errors with id.
+	(gripe_nonconformant): Likewise.
+	(error_id_index_out_of_bounds, error_id_invalid_index,
+	error_id_nonconformant_args): New variables.
+	(gripe_invalid_index): New function.
+	* Array-util.h: Declare them.
+	* Array.cc (Array<T>::checkelem): Throw invalid-index when negative
+	indices are encountered.
+
 2010-02-27  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::diag): Handle case of diag (szv) when szv
 	is a sparse vector with nnz = 0.
 
 2010-02-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-util.cc (gripe_index_out_of_range): New function.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -29,31 +29,25 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 #include <memory>
 
 #include <iostream>
 
 #include "idx-vector.h"
 #include "Array.h"
+#include "Array-util.h"
 #include "Sparse.h"
 #include "Range.h"
 
 #include "oct-locbuf.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 static void
-gripe_invalid_index (void)
-{
-  (*current_liboctave_error_handler)
-    ("subscript indices must be either positive integers or logicals.");
-}
-
-static void
 gripe_invalid_range (void)
 {
   (*current_liboctave_error_handler)
     ("invalid range used as index.");
 }
 
 static void
 gripe_index_out_of_range (void)
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -530,19 +530,31 @@ lo_error_handler (const char *fmt, ...)
   va_start (args, fmt);
   verror_with_cfn (fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
 }
 
 static void
+lo_error_with_id_handler (const char *id, const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  verror_with_id_cfn (id, fmt, args);
+  va_end (args);
+
+  octave_throw_execution_exception ();
+}
+
+static void
 initialize_error_handlers ()
 {
   set_liboctave_error_handler (lo_error_handler);
+  set_liboctave_error_with_id_handler (lo_error_with_id_handler);
   set_liboctave_warning_handler (warning);
   set_liboctave_warning_with_id_handler (warning_with_id);
 }
 
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -125,17 +125,17 @@ get_current_method_class (void)
 
   if (fcn->is_class_method () || fcn->is_class_constructor ())
     retval = fcn->dispatch_class ();
 
   return retval;
 }
 
 static void
-gripe_invalid_index (void)
+gripe_invalid_index1 (void)
 {
   error ("invalid index for class");
 }
 
 static void
 gripe_invalid_index_for_assignment (void)
 {
   error ("invalid index for class assignment");
@@ -270,17 +270,17 @@ octave_class::dotref (const octave_value
       Octave_map::const_iterator p = my_map.seek (nm);
 
       if (p != my_map.end ())
         retval = my_map.contents (p);
       else
         error ("class has no member `%s'", nm.c_str ());
     }
   else
-    gripe_invalid_index ();
+    gripe_invalid_index1 ();
 
   return retval;
 }
 
 static bool
 called_from_builtin (void)
 {
   octave_function *fcn = octave_call_stack::caller ();
@@ -464,17 +464,17 @@ octave_class::subsref (const std::string
           if (retval.length () > 1)
             retval = octave_value (retval, true);
         }
       else
         {
           if (type.length () == 1 && type[0] == '(')
             retval(0) = octave_value (map.index (idx.front ()), class_name ());
           else
-            gripe_invalid_index ();
+            gripe_invalid_index1 ();
         }
     }
 
   return retval;
 }
 
 octave_value
 octave_class::numeric_conv (const Cell& val, const std::string& type)
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -69,17 +69,17 @@ octave_struct::dotref (const octave_valu
   else 
     error ("structure has no member `%s'", nm.c_str ());
 
   return retval;
 }
 
 #if 0
 static void
-gripe_invalid_index (void)
+gripe_invalid_index1 (void)
 {
   error ("invalid index for structure array");
 }
 #endif
 
 static void
 gripe_invalid_index_for_assignment (void)
 {
