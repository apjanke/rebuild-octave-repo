# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263298817 -3600
#      Tue Jan 12 13:20:17 2010 +0100
# Node ID 090173f2db40896bccd925c70799ae07743a225d
# Parent  76df75b10c800b5a81482695920c1bb65703b2da
improve overload dispatching of built-in classes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2010-01-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base.h (builtin_type_t): New enum constants: btyp_cell,
+	btyp_struct and btyp_func_handle.
+	(btyp_isinteger, btyp_isfloat, btyp_isarray): New funcs.
+	(btyp_class_name): New array.
+	(get_builtin_classes): New func.
+	* ov-cell.h (octave_cell::builtin_type): New virtual override.
+	* ov-struct.h (octave_struct::builtin_type): New virtual override.
+	* ov-fcn-handle.h (octave_fcn_handle::builtin_type): New virtual override.
+	* symtab.cc (get_dispatch_type): Rewrite. Add overload.
+	* symtab.h: Update decls.
+	* ov-fcn-handle.cc (octave_fcn_handle::do_multi_index_op): Rewrite.
+	(get_builtin_classes): Remove.
+
 2010-01-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-obj.cc (octave_value_list::any_cell): New method.
 	* oct-obj.h: Declare it.
 	* utils.cc (do_simple_cellfun): New overloaded function.
 	* utils.h: Declare it.
 	* DLD-FUNCTIONS/strfind.cc (Fstrfind): Call it here.
 	(Fstrrep): Also here.
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -73,16 +73,46 @@ builtin_type_t btyp_mixed_numeric (built
             && y >= btyp_int8 && y <= btyp_int64)
            || (x >= btyp_uint8 && x <= btyp_uint64
                && y >= btyp_uint8 && y <= btyp_uint64))
     retval = (x > y) ? x : y;
 
   return retval;
 }
 
+std::string btyp_class_name[btyp_num_types] = 
+{
+  "double", "single", "double", "single",
+  "int8", "int16", "int32", "int64",
+  "uint8", "uint16", "uint32", "uint64",
+  "logical", "char",
+  "struct", "cell", "function_handle"
+};
+
+string_vector
+get_builtin_classes (void)
+{
+  static string_vector retval;
+
+  if (retval.is_empty ())
+    {
+      int n = btyp_num_types - 2;
+      retval = string_vector (n);
+      int j = 0;
+      for (int i = 0; i < btyp_num_types; i++)
+        {
+          builtin_type_t ityp = static_cast<builtin_type_t> (i);
+          if (ityp != btyp_complex && ityp != btyp_float_complex)
+            retval(j++) = btyp_class_name[i];
+        }
+    }
+
+  return retval;
+}
+
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value,
 				     "<unknown type>", "unknown");
 
 // TRUE means to perform automatic sparse to real mutation if there
 // is memory to be saved
 bool Vsparse_auto_mutate = false;
 
 octave_value
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -66,23 +66,41 @@ enum builtin_type_t
   btyp_int32,
   btyp_int64,
   btyp_uint8,
   btyp_uint16,
   btyp_uint32,
   btyp_uint64,
   btyp_bool,
   btyp_char,
+  btyp_struct,
+  btyp_cell,
+  btyp_func_handle,
   btyp_unknown,
   btyp_num_types = btyp_unknown
 };
 
+extern OCTINTERP_API std::string 
+btyp_class_name [btyp_num_types];
+
+extern OCTINTERP_API string_vector
+get_builtin_classes (void); 
+
 inline bool btyp_isnumeric (builtin_type_t btyp)
 { return btyp <= btyp_uint64; }
 
+inline bool btyp_isinteger (builtin_type_t btyp)
+{ return btyp >= btyp_int8 && btyp <= btyp_uint64; }
+
+inline bool btyp_isfloat (builtin_type_t btyp)
+{ return btyp <= btyp_float_complex; }
+
+inline bool btyp_isarray (builtin_type_t btyp)
+{ return btyp <= btyp_char; }
+
 // Compute a numeric type for a possibly mixed-type operation, using these rules:
 // bool -> double
 // single + double -> single
 // real + complex -> complex
 // integer + real -> integer
 // uint + uint -> uint (the bigger one)
 // sint + sint -> sint (the bigger one)
 //
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -114,16 +114,18 @@ public:
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
+  builtin_type_t builtin_type (void) const { return btyp_cell; }
+
   bool is_cellstr (void) const;
 
   bool is_true (void) const;
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -126,57 +126,45 @@ octave_fcn_handle::do_multi_index_op (in
   if (fcn.is_defined ())
     out_of_date_check (fcn, std::string (), false);
 
   if (disp.get () && ! args.empty ())
     {
       // Possibly overloaded function.
       octave_value ovfcn = fcn;
 
+      // No need to compute built-in class dispatch if we don't have builtin class overloads.
+      bool builtin_class = ! disp->empty ();
       // Get dynamic (class) dispatch type.
-      std::string ddt = get_dispatch_type (args);
+      std::string dt = get_dispatch_type (args, builtin_class);
 
-      if (ddt.empty ())
+      if (! dt.empty ())
         {
-          // Static dispatch (class of 1st arg)?
-          if (! disp->empty ())
-            {
-              std::string sdt = args(0).class_name ();
-              str_ov_map::iterator pos = disp->find (sdt);
-              if (pos != disp->end ())
-                {
-                  out_of_date_check (pos->second, sdt, false);
-                  ovfcn = pos->second;
-                }
-            }
-        }
-      else
-        {
-          str_ov_map::iterator pos = disp->find (ddt);
+          str_ov_map::iterator pos = disp->find (dt);
           if (pos != disp->end ())
             {
-              out_of_date_check (pos->second, ddt, false);
+              out_of_date_check (pos->second, dt, false);
               ovfcn = pos->second;
             }
-          else
+          else if (! builtin_class)
             {
-              octave_value method = symbol_table::find_method (nm, ddt);
+              octave_value method = symbol_table::find_method (nm, dt);
               if (method.is_defined ())
-                (*disp)[ddt] = ovfcn = method;
+                (*disp)[dt] = ovfcn = method;
             }
         }
 
       if (ovfcn.is_defined ())
         retval = ovfcn.do_multi_index_op (nargout, args);
       else if (fcn.is_undefined ())
         {
-          if (ddt.empty ())
-            ddt = args(0).class_name ();
+          if (dt.empty ())
+            dt = args(0).class_name ();
 
-          error ("no %s method to handle class %s", nm.c_str (), ddt.c_str ());
+          error ("no %s method to handle class %s", nm.c_str (), dt.c_str ());
         }
       else
         error ("invalid function handle");
     }
   else
     {
       // Non-overloaded function (anonymous, subfunction, private function).
       if (fcn.is_defined ())
@@ -1331,50 +1319,16 @@ octave_fcn_handle::print_raw (std::ostre
 	}
     }
 
   if (! printed)
     octave_print_internal (os, nm, pr_as_read_syntax,
 			   current_print_indent_level ());
 }
 
-static string_vector
-get_builtin_classes (void)
-{
-  // FIXME: this should really be read from somewhere else.
-  static const char *cnames[15] = {
-      "double",
-      "single",
-      "int8",
-      "int16",
-      "int32",
-      "int64",
-      "uint8",
-      "uint16",
-      "uint32",
-      "uint64",
-      "logical",
-      "char",
-      "cell",
-      "struct",
-      "function_handle"
-  };
-
-  static string_vector retval;
-
-  if (retval.is_empty ())
-    {
-      retval = string_vector (15);
-      for (int i = 0; i < 15; i++)
-        retval(i) = cnames[i];
-    }
-
-  return retval;
-}
-
 octave_value
 make_fcn_handle (const std::string& nm, bool local_funcs)
 {
   octave_value retval;
 
   // Bow to the god of compatibility.
 
   // FIXME -- it seems ugly to put this here, but there is no single
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -82,16 +82,18 @@ public:
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
   bool is_defined (void) const { return true; }
 
   bool is_function_handle (void) const { return true; }
 
+  builtin_type_t builtin_type (void) const { return btyp_func_handle; }
+
   bool is_overloaded (void) const { return disp.get () && ! disp->empty (); }
 
   dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
 
   octave_function *function_value (bool = false)
     { return fcn.function_value (); }
 
   octave_user_function *user_function_value (bool = false)
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -115,16 +115,18 @@ public:
     { Octave_map tmap = map; tmap.resize (dv); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
+  builtin_type_t builtin_type (void) const { return btyp_struct; }
+
   Octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const { return map.keys (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -443,60 +443,112 @@ symbol_table::fcn_info::fcn_info_rep::he
       for (dispatch_map_const_iterator p = dispatch_map.begin ();
 	   p != dispatch_map.end (); p++)
 	retval += "  " + p->second + " (" + p->first + ", ...)\n\n";
     }
 
   return retval;
 }
 
+// :-) JWE, can you parse this? Returns a 2D array with second dimension equal
+// to btyp_num_types (static constant). Only the leftmost dimension can be
+// variable in C/C++. Typedefs are boring.
+
+static builtin_type_t (*build_sup_table (void))[btyp_num_types]
+{
+  static builtin_type_t sup_table[btyp_num_types][btyp_num_types];
+  for (int i = 0; i < btyp_num_types; i++)
+    for (int j = 0; j < btyp_num_types; j++)
+      {
+        builtin_type_t ityp = static_cast<builtin_type_t> (i);
+        builtin_type_t jtyp = static_cast<builtin_type_t> (j);
+        // FIXME: Is this really right?
+        bool use_j = 
+          (jtyp == btyp_func_handle || ityp == btyp_bool
+           || (btyp_isarray (ityp) 
+               && (! btyp_isarray (jtyp) 
+                   || (btyp_isinteger (jtyp) && ! btyp_isinteger (ityp))
+                   || ((ityp == btyp_double || ityp == btyp_complex || ityp == btyp_char)
+                       && (jtyp == btyp_float || jtyp == btyp_float_complex)))));
+
+        sup_table[i][j] = use_j ? jtyp : ityp;
+      }
+
+  return sup_table;
+}
+
 std::string
-get_dispatch_type (const octave_value_list& args)
+get_dispatch_type (const octave_value_list& args, 
+                   bool& builtin_class)
 {
+  static builtin_type_t (*sup_table)[btyp_num_types] = build_sup_table ();
   std::string dispatch_type;
 
   int n = args.length ();
 
   if (n > 0)
     {
       // Find first object, if any.
 
-      int i;
-
-      for (i = 0; i < n; i++)
+      for (int i = 0; i < n; i++)
 	{
 	  octave_value arg = args(i);
 
 	  if (arg.is_object ())
 	    {
 	      dispatch_type = arg.class_name ();
-	      break;
+              for (int j = i+1; j < n; j++)
+                {
+                  octave_value arg1 = args(j);
+
+                  if (arg1.is_object ())
+                    {
+                      std::string cname = arg1.class_name ();
+
+                      // Only switch to type of ARG if it is marked superior
+                      // to the current DISPATCH_TYPE.
+                      if (! symbol_table::is_superiorto (dispatch_type, cname)
+                          && symbol_table::is_superiorto (cname, dispatch_type))
+                        dispatch_type = cname;
+                    }
+                }
+
+              builtin_class = false;
+              break;
 	    }
 	}
 
-      for (int j = i+1; j < n; j++)
-	{
-	  octave_value arg = args(j);
+      // No object.
 
-	  if (arg.is_object ())
-	    {
-	      std::string cname = arg.class_name ();
+      if (builtin_class)
+        {
+          // Use the builtin_type mechanism to do this by one method call per
+          // element. 
 
-	      // Only switch to type of ARG if it is marked superior
-	      // to the current DISPATCH_TYPE.
-	      if (! symbol_table::is_superiorto (dispatch_type, cname)
-		  && symbol_table::is_superiorto (cname, dispatch_type))
-		dispatch_type = cname;
-	    }
-	}
+          builtin_type_t btyp = args(0).builtin_type ();
+          for (int i = 1; i < n; i++)
+            btyp = sup_table[btyp][args(i).builtin_type ()];
+
+          if (btyp != btyp_unknown)
+            dispatch_type = btyp_class_name[btyp];
+          else
+            builtin_class = false;
+        }
     }
 
   return dispatch_type;
 }
 
+std::string
+get_dispatch_type (const octave_value_list& args)
+{
+  bool builtin_class = true;
+  return get_dispatch_type (args, builtin_class);
+}
+
 // Find the definition of NAME according to the following precedence
 // list:
 //
 //   variable
 //   subfunction
 //   private function
 //   class constructor
 //   class method
@@ -634,19 +686,16 @@ symbol_table::fcn_info::fcn_info_rep::xf
     }
 
   // Class methods.
 
   if (! args.empty ())
     {
       std::string dispatch_type = get_dispatch_type (args);
 
-      if (dispatch_type.empty ())
-        dispatch_type = args(0).class_name ();
-
       octave_value fcn = find_method (dispatch_type);
 
       if (fcn.is_defined ())
         return fcn;
     }
 
   // Legacy dispatch.  
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2365,17 +2365,20 @@ private:
 
   void do_cache_name (const std::string& name) { table_name = name; }
 };
 
 extern bool out_of_date_check (octave_value& function,
                                const std::string& dispatch_type = std::string (),
                                bool check_relative = true);
 
-extern std::string get_dispatch_type (const octave_value_list& args);
+extern OCTINTERP_API std::string
+get_dispatch_type (const octave_value_list& args);
+extern OCTINTERP_API std::string
+get_dispatch_type (const octave_value_list& args, bool& builtin_class);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
