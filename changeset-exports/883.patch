# HG changeset patch
# User jwe
# Date 784081351 0
#      Sun Nov 06 00:22:31 1994 +0000
# Node ID ff0bbf26b028e67f716439b519fad70c4e1a8307
# Parent  714fd17fca2854b4449f728f3a62ac60f1cf907f
[project @ 1994-11-06 00:22:31 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -932,16 +932,21 @@ is_plot_keyword (char *s)
       return USING;
     }
   else if (almost_match ("with", s))
     {
       in_plot_style = 1;
       past_plot_range = 1;
       return WITH;
     }
+  else if (almost_match ("clear", s))
+    {
+      past_plot_range = 1;
+      return CLEAR;
+    }
   else
     {
       return 0;
     }
 }
 
 // Handle keywords.  Could probably be more efficient...
 
@@ -1350,63 +1355,62 @@ strip_trailing_whitespace (char *s)
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
 handle_identifier (char *tok, int next_tok_is_eq)
 {
+// It is almost always an error for an identifier to be followed
+// directly by another identifier.  Special cases are handled below.
+
+  cant_be_identifier = 1;
+
 // If we are expecting a structure element, we just want to return
 // TEXT_ID, which is a string that is also a valid identifier.
 
   if (looking_at_indirect_ref)
     {
       yylval.tok_val = new token (tok);
       token_stack.push (yylval.tok_val);
       TOK_RETURN (TEXT_ID);
     }
 
-// If we have a regular keyword, or a plot STYLE, return it.  STYLE is
-// special only because it can't be followed by an identifier.
+// If we have a regular keyword, or a plot STYLE, return it.  Keywords
+// can be followed by identifiers (TOK_RETURN handles that).
 
   int kw_token = is_keyword (tok);
   if (kw_token)
     {
       if (kw_token == STYLE)
 	{
 	  current_input_column += yyleng;
 	  quote_is_transpose = 0;
-	  cant_be_identifier = 1;
 	  convert_spaces_to_comma = 1;
 	  return kw_token;
 	}
       else
 	TOK_RETURN (kw_token);
     }
 
-// See if we have a plot keyword (title, using, or with).
+// See if we have a plot keyword (title, using, with, or clear).
 
   int plot_option_kw = is_plot_keyword (tok);
   if (plotting && cant_be_identifier && plot_option_kw)
     TOK_RETURN (plot_option_kw);
 
 // Yes, we really do need both of these plot_range variables.  One
 // is used to mark when we are past all possiblity of a plot range,
 // the other is used to mark when we are actually between the square
 // brackets that surround the range.
 
   if (plotting && ! in_plot_range)
     past_plot_range = 1;
 
-// It is always an error for an identifier to be followed directly by
-// another identifier.
-
-  cant_be_identifier = 1;
-
 // If we are looking at a text style function, set up to gobble its
 // arguments.  These are also reserved words, but only because it
 // would be very difficult to do anything intelligent with them if
 // they were not reserved.
 
   if (is_text_function_name (tok))
     {
       BEGIN TEXT_FCN;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -226,17 +226,17 @@ static tree_index_expression *make_index
 %token <tok_val> GLOBAL
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token END_OF_INPUT
-%token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
+%token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <tree_type> input
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
 %type <tree_indirect_ref_type> indirect_ref indirect_ref1
@@ -400,16 +400,22 @@ list1		: statement
 		    $1->append ($3);
 		  }
 		;
 
 statement	: command
 		  { $$ = new tree_statement ($1); }
 		| ans_expression
 		  { $$ = new tree_statement ($1); }
+		| PLOT CLEAR
+		  {
+		    symbol_record *sr = lookup_by_name ("clearplot", 0);
+		    tree_identifier *id = new tree_identifier (sr);
+		    $$ = new tree_statement (id);
+		  }
 		;
 
 plot_command	: PLOT plot_command1
 		  {
 		    if (! $2 && $1->pttype () != token::replot)
 		      {
 			yyerror ("must have something to plot");
 			ABORT_PARSE;
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -929,16 +929,17 @@ subplot::print_code (ostream& os)
 
   if (title)
     title->print_code (os);
 
   if (style)
     style->print_code (os);
 }
 
+int
 subplot_list::print (int ndim, ostrstream& plot_buf)
 {
   int status = 0;
 
   for (Pix p = first (); p != 0; next (p))
     {
       subplot *elt = this->operator () (p);
 
@@ -1032,25 +1033,33 @@ void
 close_plot_stream (void)
 {
   if (plot_stream.is_open ())
     plot_stream.close ();
 
   plot_line_count = 0;
 }
 
-DEFUN ("closeplot", Fcloseplot, Scloseplot, 1, 0,
+DEFUN ("clearplot", Fclearplot, Sclearplot, 0, 0,
+  "clearplot (): clear the plot window")
+{
+  Octave_object retval;
+  send_to_plot_stream ("clear\n");
+  return retval;
+}
+
+DEFUN ("closeplot", Fcloseplot, Scloseplot, 0, 0,
   "closeplot (): close the stream to plotter")
 {
   Octave_object retval;
   close_plot_stream ();
   return retval;
 }
 
-DEFUN_TEXT ("hold", Fhold, Shold, -1, 1,
+DEFUN_TEXT ("hold", Fhold, Shold, 1, 0,
   "hold [on|off]\n\
 \n\
 determine whether the plot window is cleared before the next line is\n\
 drawn.  With no argument, toggle the current state.") 
 {
   Octave_object retval;
 
   DEFINE_ARGV("hold");
@@ -1083,25 +1092,25 @@ drawn.  With no argument, toggle the cur
 DEFUN ("ishold", Fishold, Sishold, 0, 1,
   "ishold\n\
 \n\
 Return 1 if hold is on, otherwise return 0.")
 {
   return (double) (! clear_before_plotting);
 }
 
-DEFUN ("purge_tmp_files", Fpurge_tmp_files, Spurge_tmp_files, 5, 1,
+DEFUN ("purge_tmp_files", Fpurge_tmp_files, Spurge_tmp_files, 0, 0,
   "delete temporary data files used for plotting")
 {
   Octave_object retval;
   cleanup_tmp_files ();
   return retval;
 }
 
-DEFUN_TEXT ("set", Fset, Sset, -1, 1,
+DEFUN_TEXT ("set", Fset, Sset, -1, 0,
   "set [options]\n\
 \n\
 set plotting options")
 {
   Octave_object retval;
 
   DEFINE_ARGV("set");
 
@@ -1125,17 +1134,17 @@ set plotting options")
 
   delete [] plot_command;
 
   DELETE_ARGV;
 
   return retval;
 }
 
-DEFUN_TEXT ("show", Fshow, Sshow, -1, 1,
+DEFUN_TEXT ("show", Fshow, Sshow, -1, 0,
   "show [options]\n\
 \n\
 show plotting options")
 {
   Octave_object retval;
 
   DEFINE_ARGV("show");
 
