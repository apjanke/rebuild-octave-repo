# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1273623438 -7200
#      Wed May 12 02:17:18 2010 +0200
# Node ID 0e98fb2068fc593ec606f65c27efaaef3bc4adea
# Parent  f35903fa42eda86deda75168ad249ba17cc49a81
Fix error when saving sparse arrays to matlab files (bug #29786)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-05-11  David Bateman  <dbateman@free.fr>
+
+	* ls-mat5.cc (save_mat5_element_length): Correct element length for
+	sparse elements with NZMAX=1 or NC=0.
+	(save_mat5_binary_element): Save the NZMAX elements of the RIDX
+	sparse index.
+
 2010-05-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-lazy-idx.cc (octave_lazy_index::save_binary): Fix arguments to
 	save_binary_data.
 
 2010-05-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sqrtm.cc (do_sqrtm): Mark the result as triangular
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1783,29 +1783,35 @@ save_mat5_element_length (const octave_v
         ret += PAD (2 * chm.numel ());
     }
   else if (tc.is_sparse_type ())
     {
       if (tc.is_complex_type ())
         {
           SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
           octave_idx_type nc = m.cols ();
-          octave_idx_type nnz = m.nzmax ();
+          octave_idx_type nnz = m.nzmax (); // Yes its nzmax
 
-          ret += 16 + PAD (nnz * sizeof (int)) + PAD ((nc + 1) * sizeof (int)) +
-            save_mat5_array_length (m.data (), nnz, save_as_floats);
+          ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
+          if (nnz > 1)
+            ret += PAD (nnz * sizeof (int32_t));
+          if (nc > 1)
+            ret += PAD ((nc + 1) * sizeof (int32_t));
         }
       else
         {
           SparseMatrix m = tc.sparse_matrix_value ();
           octave_idx_type nc = m.cols ();
           octave_idx_type nnz = m.nzmax ();
 
-          ret += 16 + PAD (nnz * sizeof (int)) + PAD ((nc + 1) * sizeof (int)) +
-            save_mat5_array_length (m.data (), nnz, save_as_floats);
+          ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
+          if (nnz > 1)
+            ret += PAD (nnz * sizeof (int32_t));
+          if (nc > 1)
+            ret += PAD ((nc + 1) * sizeof (int32_t));
         }
     }
 
 #define INT_LEN(nel, size) \
   { \
     ret += 8; \
     octave_idx_type sz = nel * size; \
     if (sz > 4) \
@@ -1891,17 +1897,17 @@ save_mat5_element_length (const octave_v
   return ret;
 }
 
 static void
 write_mat5_sparse_index_vector (std::ostream& os,
                                 const octave_idx_type *idx,
                                 octave_idx_type nel)
 {
-  int tmp = sizeof (int);
+  int tmp = sizeof (int32_t);
 
   OCTAVE_LOCAL_BUFFER (int32_t, tmp_idx, nel);
 
   for (octave_idx_type i = 0; i < nel; i++)
     tmp_idx[i] = idx[i];
 
   write_mat5_integer_data (os, tmp_idx, -tmp, nel);
 }
@@ -2127,19 +2133,20 @@ save_mat5_binary_element (std::ostream& 
         }
     }
   else if (tc.is_sparse_type ())
     {
       if (tc.is_complex_type ())
         {
           SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
           octave_idx_type nnz = m.nnz ();
+          octave_idx_type nzmax = m.nzmax ();
           octave_idx_type nc = m.cols ();
 
-          write_mat5_sparse_index_vector (os, m.ridx (), nnz);
+          write_mat5_sparse_index_vector (os, m.ridx (), nzmax);
           write_mat5_sparse_index_vector (os, m.cidx (), nc + 1);
 
           NDArray buf (dim_vector (nnz, 1));
 
           for (octave_idx_type i = 0; i < nnz; i++)
             buf (i) = std::real (m.data (i));
 
           write_mat5_array (os, buf, save_as_floats);
@@ -2148,19 +2155,20 @@ save_mat5_binary_element (std::ostream& 
             buf (i) = std::imag (m.data (i));
 
           write_mat5_array (os, buf, save_as_floats);
         }
       else
         {
           SparseMatrix m = tc.sparse_matrix_value ();
           octave_idx_type nnz = m.nnz ();
+          octave_idx_type nzmax = m.nzmax ();
           octave_idx_type nc = m.cols ();
 
-          write_mat5_sparse_index_vector (os, m.ridx (), nnz);
+          write_mat5_sparse_index_vector (os, m.ridx (), nzmax);
           write_mat5_sparse_index_vector (os, m.cidx (), nc + 1);
 
           // FIXME
           // Is there a way to easily do without this buffer
           NDArray buf (dim_vector (nnz, 1));
 
           for (int i = 0; i < nnz; i++)
             buf (i) = m.data (i);
