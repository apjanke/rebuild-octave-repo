# HG changeset patch
# User jwe
# Date 1148677560 0
#      Fri May 26 21:06:00 2006 +0000
# Node ID b0d4ff99a0c5450a5d8692abff5894954e2ae65f
# Parent  0bb816a2833527d8b6ff72ecc3b1d576e28d7529
[project @ 2006-05-26 21:06:00 by jwe]

diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -18,31 +18,31 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cplxpair (@var{z}, @var{tol}, @var{dim})
 ## Sort the numbers @var{z} into complex conjugate pairs ordered by 
 ## increasing real part.  With identical real parts, order by increasing
 ## imaginary magnitude. Place the negative imaginary complex number
 ## first within each pair. Place all the real numbers after all the 
-## complex pairs (those with @code {abs ( imag (@var{z}) / @var{z}) < 
-## @var{tol}}), where the default value of @var{tol} is @code{100 * 
+## complex pairs (those with @code{abs (imag (@var{z}) / @var{z}) < 
+## @var{tol})}, where the default value of @var{tol} is @code{100 * 
 ## @var{eps}}.
 ##
 ## By default the complex pairs are sorted along the first non-singleton
 ## dimension of @var{z}. If @var{dim} is specified, then the complex
 ## pairs are sorted along this dimension.
 ##
 ## Signal an error if some complex numbers could not be paired. Requires
 ## all complex numbers to be exact conjugates within tol, or signals an 
 ## error. Note that there are no guarantees on the order of the returned
 ## pairs with identical real parts but differing imaginary parts.
 ##
 ## @example
-##     cplxpair (exp(2i*pi*[0:4]'/5)) == exp(2i*pi*[3; 2; 4; 1; 0]/5)
+## cplxpair (exp(2i*pi*[0:4]'/5)) == exp(2i*pi*[3; 2; 4; 1; 0]/5)
 ## @end example
 ## @end deftypefn
 
 ## TODO: subsort returned pairs by imaginary magnitude
 ## TODO: Why doesn't exp(2i*pi*[0:4]'/5) produce exact conjugates. Does
 ## TODO:    it in Matlab?  The reason is that complex pairs are supposed
 ## TODO:    to be exact conjugates, and not rely on a tolerance test.
 
diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -13,23 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{yi} =} ppval (@var{pp, @var{xi})
-##
+## @deftypefn {Function File} {@var{yi} =} ppval (@var{pp}, @var{xi})
 ## Evaluate piece-wise polynomial @var{pp} at the points @var{xi}.  
 ## If @code{@var{pp}.d} is a scalar greater than 1, or an array,
 ## then the returned value @var{yi} will be an array that is 
 ## @code{d1, d1, @dots{}, dk, length (@var{xi})]}.
-##
 ## @seealso{mkpp, unmkpp, spline}
 ## @end deftypefn 
 
 function yi = ppval (pp, xi)
 
   if (nargin != 2)
     usage ("yi = ppval(pp, xi)")
   endif
