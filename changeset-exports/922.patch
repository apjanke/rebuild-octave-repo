# HG changeset patch
# User jwe
# Date 784851253 0
#      Mon Nov 14 22:14:13 1994 +0000
# Node ID 708827b941b4daa0c4bbcae116401c9aa8355123
# Parent  58f0c171bbbd738baa5bc3bb88f3db669a1d4031
[project @ 1994-11-14 22:14:13 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -963,16 +963,19 @@ is_keyword (char *s)
 	  token_stack.push (yylval.tok_val);
 	  return STYLE;
 	}
     }
 
   int l = input_line_number;
   int c = current_input_column;
 
+// XXX FIXME XXX -- this has really become too large a list to search
+// like this...
+
   int end_found = 0;
   if (strcmp ("break", s) == 0)
     {
       yylval.tok_val = new token (l, c);
       token_stack.push (yylval.tok_val);
       return BREAK;
     }
   else if (strcmp ("continue", s) == 0)
@@ -1121,16 +1124,22 @@ is_keyword (char *s)
       return UNWIND_PROTECT_CLEANUP;
     }
   else if (strcmp ("end_unwind_protect", s) == 0)
     {
       end_found = 1;
       yylval.tok_val = new token (token::unwind_protect_end, l, c);
       token_stack.push (yylval.tok_val);
     }
+  else if (strcmp ("all_va_args", s) == 0)
+    {
+      yylval.tok_val = new token (l, c);
+      token_stack.push (yylval.tok_val);
+      return ALL_VA_ARGS;
+    }
 
   if (end_found)
     {
       if (! defining_func && ! looping)
 	promptflag++;
       return END;
     }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -226,16 +226,17 @@ static tree_index_expression *make_index
 %token <tok_val> UNWIND_PROTECT UNWIND_PROTECT_CLEANUP
 %token <tok_val> GLOBAL
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
+%token ALL_VA_ARGS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <tree_type> input
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title
 %type <tree_matrix_type> matrix
@@ -1111,27 +1112,41 @@ identifier	: NAME
 
 arg_list	: ':'
 		  {
 		    tree_constant *colon;
 		    tree_constant::magic_colon t;
 		    colon = new tree_constant (t);
 		    $$ = new tree_argument_list (colon);
 		  }
+		| expression
+		  { $$ = new tree_argument_list ($1); }
+		| ALL_VA_ARGS
+		  {
+		    tree_constant *all_va_args;
+		    tree_constant::all_va_args t;
+		    all_va_args = new tree_constant (t);
+		    $$ = new tree_argument_list (all_va_args);
+		  }
 		| arg_list ',' ':'
 		  {
 		    tree_constant *colon;
 		    tree_constant::magic_colon t;
 		    colon = new tree_constant (t);
 		    $1->append (colon);
 		  }
-		| expression
-		  { $$ = new tree_argument_list ($1); }
 		| arg_list ',' expression
 		  { $1->append ($3); }
+		| arg_list ',' ALL_VA_ARGS
+		  {
+		    tree_constant *all_va_args;
+		    tree_constant::all_va_args t;
+		    all_va_args = new tree_constant (t);
+		    $1->append (all_va_args);
+		  }
 		;
 
 matrix		: '[' screwed_again rows ']'
 		  {
 		    mlnm.pop ();
 		    maybe_screwed_again--;
 		    tree_matrix *tmp = ml.pop ();
 		    $$ = tmp->reverse ();
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -51,16 +51,17 @@ private:
 
 // The real representation of a constant, declared in tc-rep.h
 
   tree_constant_rep *rep;
 
 public:
 
   enum magic_colon { magic_colon_t };
+  enum all_va_args { all_va_args_t };
 
 // Constructors.  It is possible to create the following types of
 // constants:
 //
 // constant type    constructor arguments
 // -------------    ---------------------
 // unknown          none
 // real scalar      double
@@ -72,16 +73,17 @@ public:
 // complex matrix   ComplexMatrix
 //                  ComplexDiagMatrix
 //                  ComplexRowVector
 //                  ComplexColumnVector
 // string           char* (null terminated)
 // range            double, double, dobule
 //                  Range
 // magic colon      tree_constant::magic_colon
+// all_va_args      tree_constant::all_va_args
 
   tree_constant (void) : tree_fvc ()
     { rep = new tree_constant_rep (); rep->count = 1; }
 
   tree_constant (double d) : tree_fvc ()
     { rep = new tree_constant_rep (d); rep->count = 1; }
 
   tree_constant (const Matrix& m) : tree_fvc ()
@@ -126,16 +128,24 @@ public:
   tree_constant (tree_constant::magic_colon t) : tree_fvc ()
     {
       tree_constant_rep::constant_type tmp;
       tmp = tree_constant_rep::magic_colon;
       rep = new tree_constant_rep (tmp);
       rep->count = 1;
     }
 
+  tree_constant (tree_constant::all_va_args t) : tree_fvc ()
+    {
+      tree_constant_rep::constant_type tmp;
+      tmp = tree_constant_rep::all_va_args;
+      rep = new tree_constant_rep (tmp);
+      rep->count = 1;
+    }
+
 // Copy constructor.
 
   tree_constant (const tree_constant& a) : tree_fvc ()
     { rep = a.rep; rep->count++; }
 
 // Delete the representation of this constant if the count drops to
 // zero.
 
@@ -197,16 +207,17 @@ public:
   int is_real_scalar (void) const { return rep->is_real_scalar (); }
   int is_real_matrix (void) const { return rep->is_real_matrix (); }
   int is_complex_scalar (void) const { return rep->is_complex_scalar (); }
   int is_complex_matrix (void) const { return rep->is_complex_matrix (); }
   int is_string (void) const { return rep->is_string (); }
   int is_range (void) const { return rep->is_range (); }
   int is_map (void) const { return rep->is_map (); }
   int is_magic_colon (void) const { return rep->is_magic_colon (); }
+  int is_all_va_args (void) const { return rep->is_all_va_args (); }
 
 // Are any or all of the elements in this constant nonzero?
 
   tree_constant all (void) const { return rep->all (); }
   tree_constant any (void) const { return rep->any (); }
 
   int is_real_type (void) const { return rep->is_real_type (); }
 
@@ -231,25 +242,25 @@ public:
 // Does this constant correspond to a truth value?
 
   int is_true (void) const { return rep->is_true (); }
 
 // Is at least one of the dimensions of this constant zero?
 
   int is_empty (void) const
     {
-      return ((! (is_magic_colon () || is_unknown ()))
+      return ((! (is_magic_colon () || is_all_va_args () || is_unknown ()))
 	      && (rows () == 0 || columns () == 0));
     }
 
 // Are the dimensions of this constant zero by zero?
 
   int is_zero_by_zero (void) const
     {
-      return ((! (is_magic_colon () || is_unknown ()))
+      return ((! (is_magic_colon () || is_all_va_args () || is_unknown ()))
 	      && rows () == 0 && columns () == 0);
     } 
 
 // Values.
 
   double double_value (int force_string_conversion = 0) const
     { return rep->double_value (force_string_conversion); }
 
@@ -384,25 +395,26 @@ private:
 	return *this;
       else
 	return rep->make_numeric ();
     }
 #endif
 
   tree_constant make_numeric_or_magic (void) const
     {
-      if (is_numeric_type () || is_magic_colon ())
+      if (is_numeric_type () || is_all_va_args () || is_magic_colon ())
 	return *this;
       else
 	return rep->make_numeric ();
     }
 
   tree_constant make_numeric_or_range_or_magic (void) const
     {
-      if (is_numeric_type () || is_range () || is_magic_colon ())
+      if (is_numeric_type () || is_range () || is_all_va_args ()
+	  || is_magic_colon ())
 	return *this;
       else
 	return rep->make_numeric ();
     }
 };
 
 // XXX FIXME XXX -- this is not used very much now.  Perhaps it can be
 // eliminated.
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -852,19 +852,26 @@ tree_identifier::is_defined (void)
   return (sym && sym->is_defined ());
 }
 
 void
 tree_identifier::bump_value (tree_expression::type etype)
 {
   if (sym)
     {
-      tree_fvc *tmp = sym->def ();
-      if (tmp)
-	tmp->bump_value (etype);
+      if (sym->is_read_only ())
+	{
+	  ::error ("can't redefined read-only variable `%s'", name ());
+	}
+      else
+	{
+	  tree_fvc *tmp = sym->def ();
+	  if (tmp)
+	    tmp->bump_value (etype);
+	}
     }
 }
 
 void
 tree_identifier::eval_undefined_error (void)
 {
   char *nm = name ();
   int l = line ();
@@ -1233,29 +1240,33 @@ tree_index_expression::eval (int print)
     return retval;
 
   if (list)
     {
 // Extract the arguments into a simple vector.  Don't pass null args.
 
       Octave_object args = list->convert_to_const_vector ();
 
-      int nargin = args.length ();
-
       if (error_state)
 	eval_error ();
-      else if (nargin > 0 && all_args_defined (args))
+      else
 	{
-	  Octave_object tmp = id->eval (print, 1, args);
+	  int nargin = args.length ();
 
 	  if (error_state)
 	    eval_error ();
-
-	  if (tmp.length () > 0)
-	    retval = tmp(0);
+	  else if (nargin > 0 && all_args_defined (args))
+	    {
+	      Octave_object tmp = id->eval (print, 1, args);
+
+	      if (error_state)
+		eval_error ();
+	      else if (tmp.length () > 0)
+		retval = tmp(0);
+	    }
 	}
     }
   else
     {
       retval = id->eval (print);
 
       if (error_state)
 	eval_error ();
@@ -1273,26 +1284,31 @@ tree_index_expression::eval (int print, 
     return retval;
 
   if (list)
     {
 // Extract the arguments into a simple vector.  Don't pass null args.
 
       Octave_object args = list->convert_to_const_vector ();
 
-      int nargin = args.length ();
-
       if (error_state)
 	eval_error ();
-      else if (nargin > 0 && all_args_defined (args))
+      else
 	{
-	  retval = id->eval (print, nargout, args);
+	  int nargin = args.length ();
 
 	  if (error_state)
 	    eval_error ();
+	  else if (nargin > 0 && all_args_defined (args))
+	    {
+	      retval = id->eval (print, nargout, args);
+
+	      if (error_state)
+		eval_error ();
+	    }
 	}
     }
   else
     {
       Octave_object tmp_args;
 
       retval = id->eval (print, nargout, tmp_args);
 
@@ -1360,22 +1376,27 @@ tree_prefix_expression::eval (int print)
   tree_constant retval;
 
   if (error_state)
     return retval;
 
   if (id)
     {
       id->bump_value (etype);
-      retval = id->eval (print);
       if (error_state)
+	eval_error ();
+      else
 	{
-	  retval = tree_constant ();
+	  retval = id->eval (print);
 	  if (error_state)
-	    eval_error ();
+	    {
+	      retval = tree_constant ();
+	      if (error_state)
+		eval_error ();
+	    }
 	}
     }
   return retval;
 }
 
 char *
 tree_prefix_expression::oper (void) const
 {
@@ -1901,25 +1922,30 @@ tree_simple_assignment_expression::eval 
 	    eval_error ();
 	}
       else
 	{
 // Extract the arguments into a simple vector.
 
 	  Octave_object args = index->convert_to_const_vector ();
 
-	  int nargin = args.length ();
-
 	  if (error_state)
 	    eval_error ();
-	  else if (nargin > 0)
+	  else
 	    {
-	      retval = lhs->assign (rhs_val, args);
+	      int nargin = args.length ();
+
 	      if (error_state)
 		eval_error ();
+	      else if (nargin > 0)
+		{
+		  retval = lhs->assign (rhs_val, args);
+		  if (error_state)
+		    eval_error ();
+		}
 	    }
 	}
     }
 
   if (! error_state && retval.is_defined ())
     {
       int pad_after = 0;
       if (print && user_pref.print_answer_id_name)
@@ -2576,16 +2602,30 @@ tree_function::octave_va_arg (void)
     retval = args_passed (curr_va_arg_number++);
   else
     ::error ("va_arg: error getting arg number %d -- only %d provided",
 	     curr_va_arg_number + 1, num_args_passed);
 
   return retval;
 }
 
+Octave_object
+tree_function::octave_all_va_args (void)
+{
+  Octave_object retval;
+
+  retval.resize (num_args_passed - num_named_args);
+
+  int k = 0;
+  for (int i = num_named_args; i < num_args_passed; i++)
+    retval(k++) = args_passed(i);
+
+  return retval;
+}
+
 int
 tree_function::takes_var_return (void) const
 {
   return (ret_list && ret_list->takes_varargs ());
 }
 
 void
 tree_function::octave_vr_val (const tree_constant& val)
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -857,16 +857,18 @@ public:
 
   int takes_varargs (void) const;
 
   void octave_va_start (void)
     { curr_va_arg_number = num_named_args; }
 
   tree_constant octave_va_arg (void);
 
+  Octave_object octave_all_va_args (void);
+
   int takes_var_return (void) const;
 
   void octave_vr_val (const tree_constant& val);
 
   void stash_function_name (char *s);
 
   char *function_name (void)
     { return fcn_name; }
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -31,16 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-cmd.h"
+#include "octave.h"
 #include "tree-misc.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "oct-obj.h"
 
 // Nonzero means we're breaking out of a loop.
 extern int breaking;
 
@@ -198,36 +199,64 @@ tree_statement_list::print_code (ostream
     }
 }
 
 Octave_object
 tree_argument_list::convert_to_const_vector (void)
 {
   int len = length ();
 
+// XXX FIXME XXX -- would be nice to know in advance how largs args
+// needs to be even when we have a list containing an all_va_args
+// token.
+
   Octave_object args;
   args.resize (len);
 
   Pix p = first ();
+  int j = 0;
   for (int k = 0; k < len; k++)
     {
       tree_expression *elt = this->operator () (p);
       if (elt)
 	{
-	  args(k) = elt->eval (0);
+	  tree_constant tmp = elt->eval (0);
 	  if (error_state)
 	    {
 	      ::error ("evaluating argument list element number %d", k);
+	      args = Octave_object ();
 	      break;
 	    }
+	  else
+	    {
+	      if (tmp.is_all_va_args ())
+		{
+		  if (curr_function)
+		    {
+		      Octave_object tva;
+		      tva = curr_function->octave_all_va_args ();
+		      int n = tva.length ();
+		      for (int i = 0; i < n; i++)
+			args(j++) = tva(i);
+		    }
+		  else
+		    {
+		      ::error ("all_va_args is only valid inside functions");
+		      args = Octave_object ();
+		      break;
+		    }
+		}
+	      else
+		args(j++) = tmp;
+	    }
 	  next (p);
 	}
       else
 	{
-	  args(k) = tree_constant ();
+	  args(j) = tree_constant ();
 	  break;
 	}
     }
 
   return args;
 }
 
 void
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -353,18 +353,18 @@ TC_REP::tree_constant_rep (const Octave_
 {
   a_map = new Octave_map (m);
   type_tag = map_constant;
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (TC_REP::constant_type t)
 {
-  assert (t == magic_colon);
-  type_tag = magic_colon;
+  assert (t == magic_colon || t == all_va_args);
+  type_tag = t;
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (const tree_constant_rep& t)
 {
   type_tag = t.type_tag;
 
   switch (t.type_tag)
@@ -396,16 +396,17 @@ TC_REP::tree_constant_rep (const tree_co
       range = new Range (*(t.range));
       break;
 
     case map_constant:
       a_map = new Octave_map (*(t.a_map));
       break;
 
     case magic_colon:
+    case all_va_args:
       break;
     }
 
   orig_text = strsave (t.orig_text);
 }
 
 TC_REP::~tree_constant_rep (void)
 {
@@ -433,16 +434,17 @@ TC_REP::~tree_constant_rep (void)
 
     case map_constant:
       delete a_map;
       break;
 
     case unknown_constant:
     case scalar_constant:
     case magic_colon:
+    case all_va_args:
       break;
     }
 
   delete [] orig_text;
 }
 
 #if defined (MDEBUG)
 void *
@@ -1709,16 +1711,17 @@ TC_REP::print (void)
 		output_buf << " " << a_map->key (p);
 	      }
 	    output_buf << ">\n";
 	  }
 	  break;
 
 	case unknown_constant:
 	case magic_colon:
+	case all_va_args:
 	  panic_impossible ();
 	  break;
 	}
 
       output_buf << ends;
       maybe_page_output (output_buf);
     }
 }
@@ -1772,16 +1775,20 @@ TC_REP::print_code (ostream& os)
     case range_constant:
       octave_print_internal (os, *range, 1);
       break;
 
     case magic_colon:
       os << ":";
       break;
 
+    case all_va_args:
+      os << "all_va_args";
+      break;
+
     case map_constant:
     case unknown_constant:
       panic_impossible ();
       break;
     }
 }
 
 void
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -39,16 +39,17 @@ private:
       scalar_constant,
       matrix_constant,
       complex_scalar_constant,
       complex_matrix_constant,
       string_constant,
       range_constant,
       map_constant,
       magic_colon,
+      all_va_args,
     };
 
   enum force_orient
     {
       no_orient,
       row_orient,
       column_orient,
     };
@@ -116,16 +117,19 @@ private:
     { return type_tag == tree_constant_rep::range_constant; }
 
   int is_map (void) const
     { return type_tag == tree_constant_rep::map_constant; }
 
   int is_magic_colon (void) const
     { return type_tag == tree_constant_rep::magic_colon; }
 
+  int is_all_va_args (void) const
+    { return type_tag == tree_constant_rep::all_va_args; }
+
   tree_constant all (void) const;
   tree_constant any (void) const;
 
   int is_real_type (void) const
     {
       return (type_tag == scalar_constant
 	      || type_tag == matrix_constant
 	      || type_tag == range_constant
