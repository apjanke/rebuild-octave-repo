# HG changeset patch
# User jwe
# Date 1041309753 0
#      Tue Dec 31 04:42:33 2002 +0000
# Node ID 8a1ef8fe403611d3a60a26f97d9b792e53da49ee
# Parent  eef64f3f9a4c701eef406d82f76d9e9f77dc0753
[project @ 2002-12-31 04:42:32 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (OCTAVE_LOCAL_BUFFER): New macro.
+
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkoctfile.in: Include $LIBOCTINTERP in the stand alone link command.
 	Define LIBOCTAVE, LIBOCTINTERP, LIBCRUFT, LIBREADLINE using -lLIB.
 
 2002-12-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-script-install, do-script-uninstall):
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.399 $)
+AC_REVISION($Revision: 1.400 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1343,16 +1343,25 @@ typedef int sig_atomic_t;
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #define OCTAVE_USE_WINDOWS_API 1
 #endif
 
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #define OCTAVE_HAVE_SIG_JUMP
 #endif
+
+#if defined (__GNUG__)
+#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
+  T buf[size]
+#else
+#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
+  std::auto_ptr<T> buf_auto_ptr (new T [size]); \
+  T *buf = buf_auto_ptr.get ()
+#endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* utils.cc (Ffile_in_path): Index args correctly.
+
+	* utils.cc (Ffile_in_path): Call error, not print_usage, for
+	invalid option error.
+	(Ffile_in_loadpath): Likewise.
+
+	* load-save.cc: Use OCTAVE_LOCAL_BUFFER instead of local automatic
+	arrays or using new/delete.
+
 	* lex.l (.): Try another approach to handling EOF here.
 
 	* load-save.cc (read_mat_ascii_data): Use isalpha and isalnum, not
 	::isalpha and ::isalnum.
 
 	* defaults.cc (maybe_add_or_del_packages): SCRIPT_FILE arg is now
 	a const reference type.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -27,19 +27,20 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cstring>
 #include <cctype>
 
+#include <fstream>
 #include <iomanip>
 #include <iostream>
-#include <fstream>
+#include <memory>
 #include <string>
 
 #ifdef HAVE_HDF5
 #include <hdf5.h>
 #endif
 
 #include "byte-swap.h"
 #include "data-conv.h"
@@ -648,17 +649,18 @@ read_ascii_data (std::istream& is, const
 
 	      charMatrix chm (elements, 0);
 	      int max_len = 0;
 	      for (int i = 0; i < elements; i++)
 		{
 		  int len;
 		  if (extract_keyword (is, "length", len) && len >= 0)
 		    {
-		      char tmp[len+1];
+		      OCTAVE_LOCAL_BUFFER (char, tmp, len+1);
+
 		      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
 			{
 			  error ("load: failed to load string constant");
 			  break;
 			}
 		      else
 			{
 			  tmp [len] = '\0';
@@ -680,17 +682,18 @@ read_ascii_data (std::istream& is, const
 	  else
 	    error ("load: failed to extract number of string elements");
 	}
       else if (SUBSTRING_COMPARE_EQ (typ, 0, 6, "string"))
 	{
 	  int len;
 	  if (extract_keyword (is, "length", len) && len >= 0)
 	    {
-	      char *tmp = new char [len+1];
+	      OCTAVE_LOCAL_BUFFER (char, tmp, len+1);
+
 	      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
 		{
 		  error ("load: failed to load string constant");
 		}
 	      else
 		{
 		  tmp [len] = '\0';
 
@@ -926,17 +929,17 @@ read_binary_data (std::istream& is, bool
 
     case 5:
       {
 	FOUR_BYTE_INT len;
 	if (! is.read (X_CAST (char *, &len), 4))
 	  goto data_read_error;
 	if (swap)
 	  swap_4_bytes (X_CAST (char *, &len));
-	char s[len+1];
+	OCTAVE_LOCAL_BUFFER (char, s, len+1);
 	if (! is.read (X_CAST (char *, s), len))
 	  goto data_read_error;
 	s[len] = '\0';
 	tc = s;
       }
       break;
 
     case 6:
@@ -972,17 +975,17 @@ read_binary_data (std::istream& is, bool
 	int max_len = 0;
 	for (int i = 0; i < elements; i++)
 	  {
 	    FOUR_BYTE_INT len;
 	    if (! is.read (X_CAST (char *, &len), 4))
 	      goto data_read_error;
 	    if (swap)
 	      swap_4_bytes (X_CAST (char *, &len));
-	    char tmp[len+1];
+	    OCTAVE_LOCAL_BUFFER (char, tmp, len+1);
 	    if (! is.read (X_CAST (char *, tmp), len))
 	      goto data_read_error;
 	    if (len > max_len)
 	      {
 		max_len = len;
 		chm.resize (elements, max_len, 0);
 	      }
 	    tmp [len] = '\0';
@@ -1306,19 +1309,18 @@ static bool have_h5giterate_bug = false;
 
 static herr_t
 hdf5_read_next_data (hid_t group_id, const char *name, void *dv)
 {
   hdf5_callback_data *d = (hdf5_callback_data *) dv;
   H5G_stat_t info;
   herr_t retval = 0;
   bool ident_valid = valid_identifier (name);
-  char *vname;
-
-  vname = new char[strlen (name) + 1];
+
+  OCTAVE_LOCAL_BUFFER (char, vname, strlen (name) + 1);
 
   strcpy (vname, name);
 
   if (! ident_valid && d->import)
     {
       // fix the identifier, replacing invalid chars with underscores
       make_valid_identifier (vname);
 
@@ -1367,63 +1369,54 @@ hdf5_read_next_data (hid_t group_id, con
 			   H5P_DEFAULT, (void *) &dtmp) < 0)
 		retval = -1;  // error
 	      else
 		d->tc = dtmp;
 	    }
 	  else if (rank > 0 && rank <= 2)
 	    {
 	      // real matrix
-	      hsize_t *dims = new hsize_t[rank];
-	      hsize_t *maxdims = new hsize_t[rank];
+	      OCTAVE_LOCAL_BUFFER (hsize_t, dims, rank);
+	      OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
 	      H5Sget_simple_extent_dims (space_id, dims, maxdims);
 
 	      int nr, nc;  // rows and columns
 	      // octave uses column-major & HDF5 uses row-major
 	      nc = dims[0];
 	      nr = rank > 1 ? dims[1] : 1;
-
-	      delete [] dims;
-	      delete [] maxdims;
-
 	      Matrix m (nr, nc);
 	      double *re = m.fortran_vec ();
 	      if (H5Dread (data_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
 			   H5P_DEFAULT, (void *) re) < 0)
 		retval = -1;  // error
 	      else
 		d->tc = m;
 	    }
 	  else if (rank >= 3 && d->import)
 	    {
-	      hsize_t *dims = new hsize_t[rank];
-	      hsize_t *maxdims = new hsize_t[rank];
+	      OCTAVE_LOCAL_BUFFER (hsize_t, dims, rank);
+	      OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
 	      H5Sget_simple_extent_dims (space_id, dims, maxdims);
 
-	      hssize_t *start = new hssize_t[rank];
-	      hsize_t *count = new hsize_t[rank];
+	      OCTAVE_LOCAL_BUFFER (hssize_t, start, rank);
+	      OCTAVE_LOCAL_BUFFER (hsize_t, count, rank);
 
 	      for (hsize_t i = 0; i < rank; ++i)
 		{
 		  start[i] = 0;
 		  count[i] = 1;
 		}
 	      count[0] = dims[0];
 	      count[1] = dims[1];
 	      retval = hdf5_import_multidim (data_id, space_id,
 					     rank, dims, rank-1,
 					     start, count,
 					     H5T_NATIVE_DOUBLE, d->tc);
-
-	      delete [] count;
-	      delete [] start;
-	      delete [] dims;
-	      delete [] maxdims;
 	    }
 	  else
 	    {
 	      warning ("load: can't read %d-dim. hdf5 dataset %s",
 		       rank, name);
 	      retval = 0;  // skip; we can't read 3+ dimensional datasets
 	    }
 
@@ -1469,17 +1462,18 @@ hdf5_read_next_data (hid_t group_id, con
 	      if (slen < 0)
 		retval = -1;  // error
 	      else
 		{
 		  // hdf5 string arrays store strings of all the
 		  // same physical length (I think), which is
 		  // slightly wasteful, but oh well.
 
-		  char *s = new char [elements * slen];
+		  OCTAVE_LOCAL_BUFFER (char, s, elements * slen);
+
 		  // create datatype for (null-terminated) string
 		  // to read into:
 		  hid_t st_id = H5Tcopy (H5T_C_S1);
 		  H5Tset_size (st_id, slen);
 
 		  if (H5Dread (data_id, st_id, H5S_ALL, H5S_ALL, 
 			       H5P_DEFAULT, (void *) s) < 0)
 		    retval = -1;  // error
@@ -1488,18 +1482,16 @@ hdf5_read_next_data (hid_t group_id, con
 		      charMatrix chm (elements, slen - 1);
 		      for (hsize_t i = 0; i < elements; ++i)
 			{
 			  chm.insert (s + i*slen, i, 0);
 			}
 		      d->tc = octave_value (chm, true);
 		    }
 
-		  delete [] s;
-
 		  H5Tclose (st_id);
 		}
 	    }
 	  else
 	    {
 	      warning ("load: can't read %d-dim. hdf5 string vector %s",
 		       rank, name); 
 	      // skip; we can't read higher-dimensional string vectors
@@ -1526,58 +1518,51 @@ hdf5_read_next_data (hid_t group_id, con
 			       (void *) X_CAST (double *, &ctmp)) < 0)
 		    retval = -1;  // error
 		  else
 		    d->tc = ctmp;
 		}
 	      else if (rank > 0 && rank <= 2)
 		{
 		  // complex matrix
-		  hsize_t *dims = new hsize_t[rank];
-		  hsize_t *maxdims = new hsize_t[rank];
+		  OCTAVE_LOCAL_BUFFER (hsize_t, dims, rank);
+		  OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 		  H5Sget_simple_extent_dims (space_id, dims, maxdims);
 		  int nr, nc;  // rows and columns
 		  // octave uses column-major & HDF5 uses row-major
 		  nc = dims[0];
 		  nr = rank > 1 ? dims[1] : 1;
-		  delete [] dims;
-		  delete [] maxdims;
 		  ComplexMatrix m (nr, nc);
 		  Complex *reim = m.fortran_vec ();
 		  if (H5Dread (data_id, d->complex_type, H5S_ALL,
 			       H5S_ALL, H5P_DEFAULT,
 			       (void *) X_CAST (double *, reim)) < 0)
 		    retval = -1;  // error
 		  else
 		    d->tc = m;
 		}
 	      else if (rank >= 3 && d->import)
 		{
-		  hsize_t *dims = new hsize_t[rank];
-		  hsize_t *maxdims = new hsize_t[rank];
+		  OCTAVE_LOCAL_BUFFER (hsize_t, dims, rank);
+		  OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 		  H5Sget_simple_extent_dims (space_id, dims, maxdims);
-		  hssize_t *start = new hssize_t[rank];
-		  hsize_t *count = new hsize_t[rank];
+		  OCTAVE_LOCAL_BUFFER (hssize_t, start, rank);
+		  OCTAVE_LOCAL_BUFFER (hsize_t, count, rank);
 		  for (hsize_t i = 0; i < rank; ++i)
 		    {
 		      start[i] = 0;
 		      count[i] = 1;
 		    }
 		  count[0] = dims[0];
 		  count[1] = dims[1];
 		  retval = hdf5_import_multidim (data_id, space_id,
 						 rank, dims, rank-1,
 						 start, count,
 						 d->complex_type,
 						 d->tc);
-
-		  delete [] count;
-		  delete [] start;
-		  delete [] dims;
-		  delete [] maxdims;
 		}
 	      else
 		{
 		  warning ("load: can't read %d-dim. hdf5 dataset %s",
 			   rank, name);
 		  // skip; we can't read 3+ dimensional datasets
 		  retval = 0;
 		}
@@ -1726,18 +1711,16 @@ hdf5_read_next_data (hid_t group_id, con
       else
 	d->doc = 0;
 
       // copy name (actually, vname):
       d->name = new char [strlen (vname) + 1];
       strcpy (d->name, vname);
     }
 
-  delete [] vname;
-
   return retval;
 }
 
 // The following two subroutines create HDF5 representations of the way
 // we will store Octave complex and range types (pairs and triplets of
 // floating-point numbers, respectively).  NUM_TYPE is the HDF5 numeric
 // type to use for storage (e.g. H5T_NATIVE_DOUBLE to save as 'double').
 // Note that any necessary conversions are handled automatically by HDF5.
@@ -2353,17 +2336,17 @@ read_mat_binary_data (std::istream& is, 
       error ("load: encountered complex matrix with string flag set!");
       return retval;
     }
 
   // LEN includes the terminating character, and the file is also
   // supposed to include it, but apparently not all files do.  Either
   // way, I think this should work.
 
-  char name[len+1];
+  OCTAVE_LOCAL_BUFFER (char, name, len+1);
   if (! is.read (X_CAST (char *, name), len))
     goto data_read_error;
   name[len] = '\0';
   retval = name;
 
   dlen = nr * nc;
   if (dlen < 0)
     goto data_read_error;
@@ -2618,17 +2601,17 @@ read_mat5_binary_element (std::istream& 
       
     if (read_mat5_tag (is, swap, type, len) || type != miINT8)
       {
 	error ("load: invalid array name subelement");
 	goto early_read_error;
       }
 
     pos = is.tellg ();
-    char name[len+1];
+    OCTAVE_LOCAL_BUFFER (char, name, len+1);
 
     if (len)			// structure field subelements have
 				// zero-length array name subelements
       {
 	if (! is.read (X_CAST (char *, name), len ))
 	  goto data_read_error;
 	
 	is.seekg (pos + static_cast<std::streamoff> (PAD (len)));
@@ -2660,17 +2643,16 @@ read_mat5_binary_element (std::istream& 
 
     case mxSTRUCT_CLASS:
       {
 	Octave_map m;
 	FOUR_BYTE_INT type;
 	FOUR_BYTE_INT len;
 	FOUR_BYTE_INT field_name_length;
 	int i;
-	char *elname;
 
 	// field name length subelement -- actually the maximum length
 	// of a field name.  The Matlab docs promise this will always
 	// be 32.  We read and use the actual value, on the theory
 	// that eventually someone will recognize that's a waste of
 	// space.
 	if (read_mat5_tag (is, swap, type, len) || type != miINT32)
 	  {
@@ -2687,30 +2669,29 @@ read_mat5_binary_element (std::istream& 
 	// field name subelement.  The length of this subelement tells
 	// us how many fields there are.
 	if (read_mat5_tag (is, swap, type, len) || type != miINT8)
 	  {
 	    error ("load: invalid field name subelement");
 	    goto data_read_error;
 	  }
 
-	elname = new char[len];
+	OCTAVE_LOCAL_BUFFER (char, elname, len);
 
 	if (! is.read (elname, len))
 	  goto data_read_error;
 
 	// fields subelements
 	for (i = 0; i < len/field_name_length; i++)
 	  {
 	    octave_value fieldtc;
 	    read_mat5_binary_element (is, filename, swap, global, fieldtc);
 	    m[elname + i*field_name_length] = fieldtc;
 	  }
 
-	delete [] elname;
 	tc = m;
       }
       break;
 
     case mxCHAR_CLASS:
       // handle as a numerical array to start with
 
     case mxDOUBLE_CLASS:
@@ -3682,31 +3663,28 @@ add_hdf5_data (hid_t loc_id, const octav
       if (space_id < 0)
 	goto error_cleanup;
 
       data_id = H5Dcreate (loc_id, name.c_str (), 
 			   type_id, space_id, H5P_DEFAULT);
       if (data_id < 0)
 	goto error_cleanup;
 
-      char *s = new char [nr * (nc + 1)];
+      OCTAVE_LOCAL_BUFFER (char, s, nr * (nc + 1));
 
       for (int i = 0; i < nr; ++i)
 	{
 	  std::string tstr = chm.row_as_string (i);
 	  strcpy (s + i * (nc+1), tstr.c_str ());
 	}
 
       if (H5Dwrite (data_id, type_id, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		    (void*) s) < 0) {
-	delete [] s;
 	goto error_cleanup;
       }
-
-      delete [] s;
     }
   else if (tc.is_range ())
     {
       space_id = H5Screate_simple (0, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       type_id = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
@@ -4009,21 +3987,20 @@ write_mat5_array (std::ostream& os, Matr
   double *data = m.fortran_vec ();
 
 // Have to use copy here to avoid writing over data accessed via
 // Matrix::data().
 
 #define MAT5_DO_WRITE(TYPE, data, count, stream)			\
   do									\
     {									\
-      TYPE *ptr = new TYPE [count];					\
+      OCTAVE_LOCAL_BUFFER (TYPE, ptr, count);				\
       for (int i = 0; i < count; i++)					\
         ptr[i] = X_CAST (TYPE, data[i]);				\
       stream.write (X_CAST (char *, ptr), count * sizeof (TYPE));	\
-      delete [] ptr ;							\
     }									\
   while (0)
 
   if (save_as_floats)
     {
       if (m.too_large_for_float ())
 	{
 	  warning ("save: some values too large to save as floats --");
@@ -4182,48 +4159,45 @@ save_mat5_binary_element (std::ostream& 
     int namelen = name.length ();
 
     if (namelen > 31)
       namelen = 31; // only 31 char names permitted in mat file
 
     int paddedlength = PAD (namelen);
 
     write_mat5_tag (os, miINT8, namelen);
-    char * paddedname = new char [paddedlength];
+    OCTAVE_LOCAL_BUFFER (char, paddedname, paddedlength);
     memset (paddedname, 0, paddedlength);
     strncpy (paddedname, name.c_str (), namelen);
     os.write (paddedname, paddedlength);
-    delete [] paddedname;
   }
 
   // data element
   if (tc.is_string ())
     {
       charMatrix chm = tc.char_matrix_value ();
       int nc = chm.cols ();
       int len = nr*nc*2;
       int paddedlength = PAD (nr*nc*2);
 
-      TWO_BYTE_INT *buf = new TWO_BYTE_INT[nc*nr+3];
+      OCTAVE_LOCAL_BUFFER (TWO_BYTE_INT, buf, nc*nr+3);
       write_mat5_tag (os, miUINT16, len);
 
       for (int i = 0; i < nr; i++)
 	{
 	  std::string tstr = chm.row_as_string (i);
 	  const char *s = tstr.data ();
 
 	  for (int j = 0; j < nc; j++)
 	    buf[j*nr+i] = *s++;
 	}
       os.write ((char *)buf, nr*nc*2);
       
       if (paddedlength > len)
 	os.write ((char *)buf, paddedlength - len);
-
-      delete [] buf;
     }
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ())
     {
       Matrix m = tc.matrix_value ();
 
       write_mat5_array (os, m, save_as_floats);
     }
   else if (tc.is_complex_scalar () || tc.is_complex_matrix ()) 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -309,17 +309,17 @@ name in the path.  If no files are found
 	    }
 	  else if (nargin == 2)
 	    {
 	      std::string opt = args(1).string_value ();
 
 	      if (! error_state && opt == "all")
 		retval = Cell (make_absolute (Vload_path_dir_path.find_all_first_of (names)));
 	      else
-		print_usage ("file_in_loadpath: invalid option");
+		error ("file_in_loadpath: invalid option");
 	    }
 	}
       else
 	error ("file_in_loadpath: expecting string as first argument");
     }
   else
     print_usage ("file_in_loadpath");
 
@@ -343,49 +343,50 @@ file_in_path (LOADPATH, \"nargchk.m\")\n
 \n\
 If the second argument is a cell array of of strings, search each\n\
 directory of the path for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the third optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
+@seealso{file_in_loadpath}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
       std::string path = args(0).string_value ();
 
       if (! error_state)
 	{
-	  string_vector names = args(0).all_strings ();
+	  string_vector names = args(1).all_strings ();
 
 	  if (! error_state && names.length () > 0)
 	    {
 	      if (nargin == 2)
 		{
 		  std::string fname = search_path_for_file (path, names);
 
 		  if (fname.empty ())
 		    retval = Matrix ();
 		  else
 		    retval = fname;
 		}
 	      else if (nargin == 3)
 		{
-		  std::string opt = args(1).string_value ();
+		  std::string opt = args(2).string_value ();
 
 		  if (! error_state && opt == "all")
 		    retval = Cell (make_absolute (search_path_for_all_files (path, names)));
 		  else
-		    print_usage ("file_in_path: invalid option");
+		    error ("file_in_path: invalid option");
 		}
 	    }
 	  else
 	    error ("file_in_path: expecting string as second argument");
 	}
       else
 	error ("file_in_path: expecting string as first argument");
     }
diff --git a/test/octave.test/system/file_in_path-4.m b/test/octave.test/system/file_in_path-4.m
--- a/test/octave.test/system/file_in_path-4.m
+++ b/test/octave.test/system/file_in_path-4.m
@@ -1,1 +1,1 @@
-file_in_path ("foo", "bar", "baz")
+file_in_path ("foo", "bar", "baz", "ooka")
