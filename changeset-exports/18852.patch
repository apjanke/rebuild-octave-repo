# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1403304938 14400
#      Fri Jun 20 18:55:38 2014 -0400
# Node ID 47d4b680d0e07f39e32c1c676cbaa5f785208f2f
# Parent  479d1d3cb5c33fb8713b35e497d141bb97a5f134
improve accuracy of range/scalar arithmetic (bug #42589)

* Range.h, Range.cc (Range::Range (double, double, double,
octave_idx_type): New protected constructor.
(operator -, operator +, operator *): Use new constructor.
(Range::Range (double, double, octave_idx_type): Also check that the
limit remains finite.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -382,67 +382,67 @@ operator >> (std::istream& is, Range& a)
     }
 
   return is;
 }
 
 Range
 operator - (const Range& r)
 {
-  return Range (-r.base (), -r.inc (), r.nelem ());
+  return Range (-r.base (), -r.limit (), -r.inc (), r.nelem ());
 }
 
 Range operator + (double x, const Range& r)
 {
-  Range result (x + r.base (), r.inc (), r.nelem ());
+  Range result (x + r.base (), x + r.limit (), r.inc (), r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = x + r.matrix_value ();
 
   return result;
 }
 
 Range operator + (const Range& r, double x)
 {
-  Range result (r.base () + x, r.inc (), r.nelem ());
+  Range result (r.base () + x, r.limit () + x, r.inc (), r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = r.matrix_value () + x;
 
   return result;
 }
 
 Range operator - (double x, const Range& r)
 {
-  Range result (x - r.base (), -r.inc (), r.nelem ());
+  Range result (x - r.base (), x - r.limit (), -r.inc (), r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = x - r.matrix_value ();
 
   return result;
 }
 
 Range operator - (const Range& r, double x)
 {
-  Range result (r.base () - x, r.inc (), r.nelem ());
+  Range result (r.base () - x, r.limit () - x, r.inc (), r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = r.matrix_value () - x;
 
   return result;
 }
 
 Range operator * (double x, const Range& r)
 {
-  Range result (x * r.base (), x * r.inc (), r.nelem ());
+  Range result (x * r.base (), x * r.limit (), x * r.inc (), r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = x * r.matrix_value ();
 
   return result;
 }
 
 Range operator * (const Range& r, double x)
 {
-  Range result (r.base () * x, r.inc () * x, r.nelem ());
+  Range result (r.base () * x, r.limit () * x, r.inc () * x, r.nelem ());
   if (result.rng_nelem < 0)
     result.cache = r.matrix_value () * x;
 
   return result;
 }
 
 
 // C  See Knuth, Art Of Computer Programming, Vol. 1, Problem 1.2.4-5.
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -49,17 +49,17 @@ public:
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_nelem (nelem_internal ()), cache () { }
 
   // For operators' usage (to preserve element count).
   Range (double b, double i, octave_idx_type n)
     : rng_base (b), rng_limit (b + (n-1) * i), rng_inc (i),
       rng_nelem (n), cache ()
   {
-    if (! xfinite (b) || ! xfinite (i))
+    if (! xfinite (b) || ! xfinite (i) | ! xfinite (rng_limit))
       rng_nelem = -2;
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
   octave_idx_type nelem (void) const { return rng_nelem; }
 
@@ -140,16 +140,26 @@ private:
   octave_idx_type rng_nelem;
 
   mutable Matrix cache;
 
   octave_idx_type nelem_internal (void) const;
 
   void clear_cache (void) const { cache.resize (0, 0); }
 
+protected:
+
+  // For operators' usage (to allow all values to be set directly).
+  Range (double b, double l, double i, octave_idx_type n)
+    : rng_base (b), rng_limit (l), rng_inc (i),
+      rng_nelem (n), cache ()
+  {
+    if (! xfinite (b) || ! xfinite (i) || ! xfinite (l))
+      rng_nelem = -2;
+  }
 };
 
 extern OCTAVE_API Range operator - (const Range& r);
 
 extern OCTAVE_API Range operator + (double x, const Range& r);
 
 extern OCTAVE_API Range operator + (const Range& r, double x);
 
