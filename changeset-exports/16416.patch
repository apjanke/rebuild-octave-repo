# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365028223 14400
#      Wed Apr 03 18:30:23 2013 -0400
# Node ID 169f71c9d9c8502ce0a3630ca2fa1e6f4ce25207
# Parent  70032fc70bee2ae6cecccb40a93e7f61fe40eb2f
use octave_link instead of hook functions in input.cc

* octave-main-thread.cc pre_input_event_hook_fcn,
post_input_event_hook_fcn, enter_debugger_event_hook_fcn,
exit_debugger_event_hook_fcn): Delete.
(octave_main_thread::run): Don't install input and debugging hooks.
* input.cc (pre_input_event_hook_functions,
post_input_event_hook_functions, enter_debugger_event_hook_functions,
exit_debugger_event_hook_functions): Delete.
(octave_base_reader::octave_gets, get_debug_input): Use octave_link
instead of calling hook functions.
(exit_debugger_cleanup): Delete.
(Fadd_pre_input_event_hook, Fremove_pre_input_event_hook,
Fadd_post_input_event_hook, Fremove_post_input_event_hook,
Fadd_enter_debugger_event_hook, Fremove_enter_debugger_event_hook,
Fadd_exit_debugger_event_hook, Fremove_exit_debugger_event_hook):
Delete.

diff --git a/libgui/src/octave-main-thread.cc b/libgui/src/octave-main-thread.cc
--- a/libgui/src/octave-main-thread.cc
+++ b/libgui/src/octave-main-thread.cc
@@ -31,56 +31,16 @@ along with Octave; see the file COPYING.
 #include "octave.h"
 #include "ov-builtin.h"
 #include "ov-fcn-handle.h"
 
 #include "octave-main-thread.h"
 #include "octave-link.h"
 
 static octave_value_list
-pre_input_event_hook_fcn (const octave_value_list&, int)
-{
-  octave_value_list retval;
-
-  octave_link::pre_input_event ();
-
-  return retval;
-}
-
-static octave_value_list
-post_input_event_hook_fcn (const octave_value_list&, int)
-{
-  octave_value_list retval;
-
-  octave_link::post_input_event ();
-
-  return retval;
-}
-
-static octave_value_list
-enter_debugger_event_hook_fcn (const octave_value_list& args, int)
-{
-  octave_value_list retval;
-
-  octave_link::enter_debugger_event (args);
-
-  return retval;
-}
-
-static octave_value_list
-exit_debugger_event_hook_fcn (const octave_value_list& args, int)
-{
-  octave_value_list retval;
-
-  octave_link::exit_debugger_event (args);
-
-  return retval;
-}
-
-static octave_value_list
 dbstop_hook_fcn (const octave_value_list& args, int)
 {
   octave_value_list retval;
 
   octave_link::update_breakpoint (true, args);
 
   return retval;
 }
@@ -115,32 +75,16 @@ octave_main_thread::run ()
   // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
   setlocale (LC_NUMERIC, "C");
 
   emit ready ();
 
   octave_initialize_interpreter (octave_cmdline_argc, octave_cmdline_argv,
                                  octave_embedded);
 
-  octave_value pre_fcn (new octave_builtin (pre_input_event_hook_fcn));
-  octave_value pre_fcn_handle (new octave_fcn_handle (pre_fcn));
-  Fadd_pre_input_event_hook (pre_fcn_handle);
-
-  octave_value post_fcn (new octave_builtin (post_input_event_hook_fcn));
-  octave_value post_fcn_handle (new octave_fcn_handle (post_fcn));
-  Fadd_post_input_event_hook (post_fcn_handle);
-
-  octave_value enter_debugger_fcn (new octave_builtin (enter_debugger_event_hook_fcn));
-  octave_value enter_debugger_fcn_handle (new octave_fcn_handle (enter_debugger_fcn));
-  Fadd_enter_debugger_event_hook (enter_debugger_fcn_handle);
-
-  octave_value exit_debugger_fcn (new octave_builtin (exit_debugger_event_hook_fcn));
-  octave_value exit_debugger_fcn_handle (new octave_fcn_handle (exit_debugger_fcn));
-  Fadd_exit_debugger_event_hook (exit_debugger_fcn_handle);
-
   octave_value dbstop_fcn (new octave_builtin (dbstop_hook_fcn));
   octave_value dbstop_fcn_handle (new octave_fcn_handle (dbstop_fcn));
   Fadd_dbstop_hook (dbstop_fcn_handle);
 
   octave_value dbclear_fcn (new octave_builtin (dbclear_hook_fcn));
   octave_value dbclear_fcn_handle (new octave_fcn_handle (dbclear_fcn));
   Fadd_dbclear_hook (dbclear_fcn_handle);
 
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "hook-fcn.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
+#include "octave-link.h"
 #include "oct-map.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "oct-obj.h"
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathlen.h"
@@ -117,21 +118,17 @@ bool Vdebugging = false;
 static std::string last_debugging_command = "\n";
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
-static hook_function_list pre_input_event_hook_functions;
 static hook_function_list input_event_hook_functions;
-static hook_function_list post_input_event_hook_functions;
-static hook_function_list enter_debugger_event_hook_functions;
-static hook_function_list exit_debugger_event_hook_functions;
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
   input_event_hook_functions.clear ();
 }
 
@@ -210,17 +207,17 @@ octave_base_reader::octave_gets (bool& e
   eof = false;
 
   std::string retval;
 
   // Process pre input event hook function prior to flushing output and
   // printing the prompt.
 
   if (interactive || forced_interactive)
-    pre_input_event_hook_functions.run ();
+    octave_link::pre_input_event ();
 
   bool history_skip_auto_repeated_debugging_command = false;
 
   std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = command_editor::decode_prompt_string (ps);
 
   pipe_handler_error_count = 0;
@@ -266,17 +263,17 @@ octave_base_reader::octave_gets (bool& e
     }
   else
     octave_diary << "\n";
 
   // Process post input event hook function after the internal history
   // list has been updated.
 
   if (interactive || forced_interactive)
-    post_input_event_hook_functions.run ();
+    octave_link::pre_input_event ();
 
   return retval;
 }
 
 // Fix things up so that input can come from the standard input.  This
 // may need to become much more complicated, which is why it's in a
 // separate function.
 
@@ -453,22 +450,16 @@ initialize_command_input (void)
   command_editor::set_completer_quote_characters ("'\"");
 
   command_editor::set_completion_function (generate_completion);
 
   command_editor::set_quoting_function (quoting_filename);
 }
 
 static void
-exit_debugger_cleanup (const octave_value& loc_info)
-{
-  exit_debugger_event_hook_functions.run (loc_info);
-}
-
-static void
 get_debug_input (const std::string& prompt)
 {
   unwind_protect frame;
 
   octave_user_code *caller = octave_call_stack::caller_user_code ();
   std::string nm;
 
   int curr_debug_line = octave_call_stack::current_line ();
@@ -507,19 +498,21 @@ get_debug_input (const std::string& prom
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
               octave_value loc_info = location_info (nm, curr_debug_line);
 
-              enter_debugger_event_hook_functions.run (loc_info);
+              octave_value_list args (loc_info);
 
-              frame.add_fcn (exit_debugger_cleanup, loc_info);
+              octave_link::enter_debugger_event (args);
+
+              frame.add_fcn (octave_link::exit_debugger_event, args);
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
@@ -1086,104 +1079,16 @@ for details.\n\
   if (args.length () == 0)
     command_editor::re_read_init_file ();
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (add_pre_input_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_pre_input_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_pre_input_event_hook (@var{fcn}, @var{data})\n\
-Add the named function or function handle @var{fcn} to the list of functions to call\n\
-immediately prior to prompting for interactive user input.  The\n\
-function should have the form\n\
-\n\
-@example\n\
-@var{fcn} (@var{data})\n\
-@end example\n\
-\n\
-If @var{data} is omitted, Octave calls the function without any\n\
-arguments.\n\
-\n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
-@seealso{remove_pre_input_event_hook}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      octave_value user_data;
-
-      if (nargin == 2)
-        user_data = args(1);
-
-      hook_function hook_fcn (args(0), user_data);
-
-      if (! error_state)
-        {
-          pre_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
-
-          retval = hook_fcn.id ();
-        }
-      else
-        error ("add_pre_input_event_hook: expecting string as first arg");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (remove_pre_input_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_pre_input_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_input_event_hook (@var{fcn_id})\n\
-Remove the named function or function handle with the given identifier\n\
-from the list of functions to call immediately prior to prompting for\n\
-interactive user input.\n\
-@seealso{add_pre_input_event_hook}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string hook_fcn_id = args(0).string_value ();
-
-      bool warn = (nargin < 2);
-
-      if (! error_state)
-        {
-          hook_function_list::iterator p
-            = pre_input_event_hook_functions.find (hook_fcn_id);
-
-          if (p != pre_input_event_hook_functions.end ())
-            pre_input_event_hook_functions.erase (p);
-          else if (warn)
-            warning ("remove_pre_input_event_hook: %s not found in list",
-                     hook_fcn_id.c_str ());
-        }
-      else
-        error ("remove_pre_input_event_hook: argument not valid as a hook function name or id");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
- 
 static int
 internal_input_event_hook_fcn (void)
 {
   input_event_hook_functions.run ();
 
   if (input_event_hook_functions.empty ())
     command_editor::remove_event_hook (internal_input_event_hook_fcn);
 
@@ -1279,298 +1184,16 @@ for input.\n\
         error ("remove_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (add_post_input_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_post_input_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_post_input_event_hook (@var{fcn}, @var{data})\n\
-Add the named function or function handle @var{fcn} to the list of functions to call\n\
-immediately after accepting interactive user input.  The function\n\
-should have the form\n\
-\n\
-@example\n\
-@var{fcn} (@var{data})\n\
-@end example\n\
-\n\
-If @var{data} is omitted, Octave calls the function without any\n\
-arguments.\n\
-\n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
-@seealso{remove_post_input_event_hook}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      octave_value user_data;
-
-      if (nargin == 2)
-        user_data = args(1);
-
-      hook_function hook_fcn (args(0), user_data);
-
-      if (! error_state)
-        {
-          post_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
-
-          retval = hook_fcn.id ();
-        }
-      else
-        error ("add_post_input_event_hook: expecting string as first arg");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (remove_post_input_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_post_input_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_post_input_event_hook (@var{fcn_id})\n\
-Remove the named function or function handle with the given identifier\n\
-from the list of functions to call immediately after accepting\n\
-interactive user input.\n\
-@seealso{add_post_input_event_hook}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string hook_fcn_id = args(0).string_value ();
-
-      bool warn = (nargin < 2);
-
-      if (! error_state)
-        {
-          hook_function_list::iterator p
-            = post_input_event_hook_functions.find (hook_fcn_id);
-
-          if (p != post_input_event_hook_functions.end ())
-            post_input_event_hook_functions.erase (p);
-          else if (warn)
-            warning ("remove_post_input_event_hook: %s not found in list",
-                     hook_fcn_id.c_str ());
-        }
-      else
-        error ("remove_post_input_event_hook: argument not valid as a hook function name or id");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (add_enter_debugger_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_enter_debugger_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_enter_debugger_event_hook (@var{fcn}, @var{data})\n\
-Add the named function or function handle @var{fcn} to the list of\n\
-functions to call when a debugger breakpoint is reached.  The function\n\
-should have the form\n\
-\n\
-@example\n\
-@var{fcn} (@var{location}, @var{data})\n\
-@end example\n\
-\n\
-in which @var{location} is a structure containing the following elements:\n\
-\n\
-@table @code\n\
-@item file\n\
-The name of the file where the breakpoint is located.\n\
-@item line\n\
-The line number corresponding to the breakpoint.\n\
-@end table\n\
-\n\
-If @var{data} is omitted when the hook function is added, the hook\n\
-function is called with a single argument.\n\
-\n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
-@seealso{remove_enter_debugger_event_hook}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      octave_value user_data;
-
-      if (nargin == 2)
-        user_data = args(1);
-
-      hook_function hook_fcn (args(0), user_data);
-
-      if (! error_state)
-        {
-          enter_debugger_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
-
-          retval = hook_fcn.id ();
-        }
-      else
-        error ("add_enter_debugger_event_hook: expecting string as first arg");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (remove_enter_debugger_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_enter_debugger_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_enter_debugger_event_hook (@var{fcn_id})\n\
-Remove the named function or function handle with the given identifier\n\
-from the list of functions to call immediately after accepting\n\
-interactive user input.\n\
-@seealso{add_enter_debugger_event_hook}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string hook_fcn_id = args(0).string_value ();
-
-      bool warn = (nargin < 2);
-
-      if (! error_state)
-        {
-          hook_function_list::iterator p
-            = enter_debugger_event_hook_functions.find (hook_fcn_id);
-
-          if (p != enter_debugger_event_hook_functions.end ())
-            enter_debugger_event_hook_functions.erase (p);
-          else if (warn)
-            warning ("remove_enter_debugger_event_hook: %s not found in list",
-                     hook_fcn_id.c_str ());
-        }
-      else
-        error ("remove_enter_debugger_event_hook: argument not valid as a hook function name or id");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (add_exit_debugger_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_exit_debugger_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_exit_debugger_event_hook (@var{fcn}, @var{data})\n\
-Add the named function or function handle @var{fcn} to the list of\n\
-functions to call when continuing execution after a debugger breakpoint.\n\
-The function should have the form\n\
-\n\
-@example\n\
-@var{fcn} (@var{location}, @var{data})\n\
-@end example\n\
-\n\
-in which @var{location} is a structure containing the following elements:\n\
-\n\
-@table @code\n\
-@item file\n\
-The name of the file where the breakpoint is located.\n\
-@item line\n\
-The line number corresponding to the breakpoint.\n\
-@end table\n\
-\n\
-If @var{data} is omitted when the hook function is added, the hook\n\
-function is called with a single argument.\n\
-\n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
-@seealso{remove_exit_debugger_event_hook}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      octave_value user_data;
-
-      if (nargin == 2)
-        user_data = args(1);
-
-      hook_function hook_fcn (args(0), user_data);
-
-      if (! error_state)
-        {
-          exit_debugger_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
-
-          retval = hook_fcn.id ();
-        }
-      else
-        error ("add_exit_debugger_event_hook: expecting string as first arg");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (remove_exit_debugger_event_hook, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_exit_debugger_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_exit_debugger_event_hook (@var{fcn_id})\n\
-Remove the named function or function handle with the given identifier\n\
-from the list of functions to call immediately after accepting\n\
-interactive user input.\n\
-@seealso{add_exit_debugger_event_hook}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string hook_fcn_id = args(0).string_value ();
-
-      bool warn = (nargin < 2);
-
-      if (! error_state)
-        {
-          hook_function_list::iterator p
-            = exit_debugger_event_hook_functions.find (hook_fcn_id);
-
-          if (p != exit_debugger_event_hook_functions.end ())
-            exit_debugger_event_hook_functions.erase (p);
-          else if (warn)
-            warning ("remove_exit_debugger_event_hook: %s not found in list",
-                     hook_fcn_id.c_str ());
-        }
-      else
-        error ("remove_exit_debugger_event_hook: argument not valid as a hook function name or id");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
 DEFUN (PS1, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS1 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS1 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS1 (@var{new_val}, \"local\")\n\
 Query or set the primary prompt string.  When executing interactively,\n\
 Octave displays the primary prompt when it is ready to read a command.\n\
 \n\
