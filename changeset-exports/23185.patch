# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1486934440 -3600
#      Sun Feb 12 22:20:40 2017 +0100
# Branch stable
# Node ID 0032c2f7ee4eb6a23e63c5841598f19da7f7f5c2
# Parent  b5b86a6e96b8de0893ce40423f3b289356f7d7d8
Don't display legend, colorbar, and annotation axes coordinates (bug #50272).

* Canvas.h, Canvas.cc (Canvas::select_object): new argument to specify that axes
   with a given tag property should not be selected.
* Canvas.cc (Canvas::canvasMouseMoveEvent): specify that select_object should
   omit legends, colorbars and annotation axes.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -369,28 +369,38 @@ namespace QtHandles
     octave_scalar_map zm = ov_zm.scalar_map_value ();
 
     return zm.contents ("Motion").string_value ();
   }
 
   void
   Canvas::select_object (graphics_object obj, QMouseEvent* event,
                          graphics_object &currentObj, graphics_object &axesObj,
-                         bool axes_only)
+                         bool axes_only, std::vector<std::string> omit)
   {
     QList<graphics_object> axesList;
     Matrix children = obj.get_properties ().get_all_children ();
     octave_idx_type num_children = children.numel ();
 
     for (int i = 0; i < num_children; i++)
       {
         graphics_object childObj (gh_manager::get_object (children(i)));
 
         if (childObj.isa ("axes"))
-          axesList.append (childObj);
+          {
+            auto p = omit.begin ();
+            bool omitfound = false;
+            while (p != omit.end () && ! omitfound)
+              {
+                omitfound = (childObj.get ("tag").string_value () == *p);
+                p++;
+              }
+            if (! omitfound)
+              axesList.append (childObj);
+          }
         else if (childObj.isa ("uicontrol") || childObj.isa ("uipanel")
                  || childObj.isa ("uibuttongroup"))
           {
             Matrix bb = childObj.get_properties ().get_boundingbox (false);
             QRectF r (bb(0), bb(1), bb(2), bb(3));
 
             r.adjust (-5, -5, 5, 5);
 
@@ -540,17 +550,18 @@ namespace QtHandles
 
     // Update mouse coordinates in the figure window status bar
     graphics_object obj = gh_manager::get_object (m_handle);
     graphics_object figObj = obj.get_ancestor ("figure");
 
     if (figObj.valid_object () && obj.valid_object ())
       {
         graphics_object currentObj, axesObj;
-        select_object (obj, event, currentObj, axesObj, true);
+        std::vector<std::string> omit = {"legend", "colorbar", "scribeoverlay"};
+        select_object (obj, event, currentObj, axesObj, true, omit);
 
         if (axesObj.valid_object ())
           {
             // FIXME: should we use signal/slot mechanism instead of
             //        directly calling parent fig methods
             Figure* fig =
               dynamic_cast<Figure*> (Backend::toolkitObject (figObj));
             axes::properties& ap = Utils::properties<axes> (axesObj);
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -103,17 +103,18 @@ namespace QtHandles
     void updateCurrentPoint (const graphics_object& fig,
                              const graphics_object& obj, QMouseEvent *event);
     void updateCurrentPoint (const graphics_object& fig,
                              const graphics_object& obj);
 
     void annotation_callback (const octave_value_list& args);
     void select_object (graphics_object obj, QMouseEvent* event,
                         graphics_object &currentObj, graphics_object &axesObj,
-                        bool axes_only = false);
+                        bool axes_only = false, 
+                        std::vector<std::string> omit = std::vector<std::string> ());
 
   private:
     graphics_handle m_handle;
     bool m_redrawBlocked;
     MouseMode m_mouseMode;
     bool m_clickMode;              // True: ZoomIn, False: ZoomOut
     QPoint m_mouseAnchor;
     QPoint m_mouseCurrent;
