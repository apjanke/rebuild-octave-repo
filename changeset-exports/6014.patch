# HG changeset patch
# User jwe
# Date 1159630026 0
#      Sat Sep 30 15:27:06 2006 +0000
# Node ID 437f9086b967b4a1144e76b94d0397b8f86bb540
# Parent  13c4326d3501bf4a36c916d57f75a5857d910390
[project @ 2006-09-30 15:27:06 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-09-30  Benjamin Lindner  <lindnerben@gmx.net>
+
+	* polynomial/ppval.m: Use .' instead of '.
+	* polynomial/spline.m: Likewise.  New tests.
+
 2006-09-26  David Bateman  <dbateman@free.fr>
 
 	* __plt3__.m: Using global variables __plot_data__,
 	__plot_data_offset__ and __plot_command__ to store plots and
 	correctly handle multiplots, and hold state. Only accept a single
 	data parameter plus, using, format and with strings. Remove
 	setting of gnuplot parameters.
 	* __make_using_clause__.m: New function extracted from __plt__.m.
diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -36,21 +36,21 @@ function yi = ppval (pp, xi)
   endif
   if (isempty (xi))
     yi = [];
   else
     transposed = (columns (xi) == 1);
     xi = xi(:);
     xn = length (xi);
     idx = lookup (pp.x(2:pp.n), xi) + 1;
-    dx = (xi - pp.x(idx))';
+    dx = (xi - pp.x(idx)).';
     dx = reshape (dx(ones(1,prod(pp.d)),:),[pp.d,xn]);
     c = reshape (pp.P(:,1), pp.n, prod (pp.d));
-    yi = reshape (c(idx,:)', [pp.d, xn]);
+    yi = reshape (c(idx,:).', [pp.d, xn]);
     for i  = 2 : pp.k;
       c = reshape (pp.P(:,i), pp.n, prod (pp.d));
-      yi = yi .* dx + reshape (c(idx,:)', [pp.d, xn]);
+      yi = yi .* dx + reshape (c(idx,:).', [pp.d, xn]);
     endfor
     if (transposed && isscalar (pp.d) && pp.d == 1)
       yi = yi.';
     endif
   endif
 endfunction
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -89,23 +89,23 @@ function ret = spline (x, y, xi)
     error ("spline: requires at least 3 points"); 
   endif
 
   ## Check the size and shape of y
   ndy = ndims (y);
   szy = size (y);
   if (ndy == 2 && (szy(1) == 1 || szy(2) == 1))
     if (szy(1) == 1)
-      a = y';
+      a = y.';
     else
       a = y;
       szy = fliplr (szy);
     endif
   else
-    a = reshape (y, [prod(szy(1:end-1)), szy(end)])';
+    a = reshape (y, [prod(szy(1:end-1)), szy(end)]).';
   endif
   complete = false;
   if (size (a, 1) == n + 2)
     complete = true;
     dfs = a(1,:);
     dfe = a(end,:);
     a = a(2:end-1,:);
   endif
@@ -222,8 +222,18 @@ endfunction
 %! x = [0:10]; y = sin(x);
 %!assert (spline(x,y,x), y);
 %!assert (spline(x,y,x'), y');
 %!assert (spline(x',y',x'), y');
 %!assert (spline(x',y',x), y);
 %!assert (isempty(spline(x',y',[])));
 %!assert (isempty(spline(x,y,[])));
 %!assert (spline(x,[y;y],x), [spline(x,y,x);spline(x,y,x)])
+%! y = cos(x) + i*sin(x);
+%!assert ( spline(x,y,x), y )
+%!assert ( real(spline(x,y,x)), real(y) );
+%!assert ( real(spline(x,y,x.')), real(y).' );
+%!assert ( real(spline(x.',y.',x.')), real(y).' );
+%!assert ( real(spline(x.',y,x)), real(y) );
+%!assert ( imag(spline(x,y,x)), imag(y) );
+%!assert ( imag(spline(x,y,x.')), imag(y).' );
+%!assert ( imag(spline(x.',y.',x.')), imag(y).' );
+%!assert ( imag(spline(x.',y,x)), imag(y) );
