# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420268483 18000
#      Sat Jan 03 02:01:23 2015 -0500
# Node ID 7f271cef5850536fef6b0c0f13481e3733b0a7e9
# Parent  18377fc879d0aaf289da9c9015e691177b93df3b
protect all portaudio and sndfile dependent code with #ifdefs

* audiodevinfo.cc: Protect all code that depends on portaudio with
#ifdef HAVE_PORTAUDIO
* audioread.cc: Protect all code that depends on sndfile with #ifdef
HAVE_SNDFILE.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -35,18 +35,18 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int32.h"
 #include "ov-struct.h"
 #include "parse.h"
 
 #if defined (HAVE_PORTAUDIO)
+
 #include <portaudio.h>
-#endif
 
 PaSampleFormat
 bits_to_format (int bits)
 {
   if (bits == 8)
     return paInt8;
   else if (bits == 16)
     return paInt16;
@@ -55,16 +55,18 @@ bits_to_format (int bits)
   else if (bits == 32)
     return paInt32;
   else if (bits == -1)
     return paFloat32;
   else
     return 0;
 }
 
+#endif
+
 DEFUN_DLD (audiodevinfo, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{devinfo} =} audiodevinfo ()\n\
 \n\
 @deftypefnx {Loadable Function} {@var{devs} =} audiodevinfo (@var{io})\n\
 @deftypefnx {Loadable Function} {@var{name} =} audiodevinfo (@var{io}, @var{id})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{name})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
@@ -424,16 +426,18 @@ or recording using those parameters.\n\
 %! for i = 1:nout,
 %!   assert (devinfo.output(i).ID, audiodevinfo (0, devinfo.output(i).Name))
 %! endfor
 %! for i = 1:nin,
 %!   assert (devinfo.input(i).ID, audiodevinfo (1, devinfo.input(i).Name))
 %! endfor
 */
 
+#ifdef HAVE_PORTAUDIO
+
 enum audio_type { INT8, UINT8, INT16, DOUBLE };
 
 class audioplayer : public octave_base_value
 {
 public:
   audioplayer (void);
   ~audioplayer (void) {};
 
@@ -1633,16 +1637,18 @@ audiorecorder::append (float sample_l, f
 }
 
 PaStream *
 audiorecorder::get_stream (void)
 {
   return stream;
 }
 
+#endif
+
 DEFUN_DLD (__recorder_audiorecorder__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels})\n\
 @deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels}, @var{id})\n\
 @deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fcn}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
@@ -1691,26 +1697,30 @@ Undocumented internal function.\n\
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
+#ifdef HAVE_PORTAUDIO
+
 static audiorecorder *
 get_recorder (const octave_value& ov)
 {
   const octave_base_value& rep = ov.get_rep ();
 
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   return dynamic_cast<audiorecorder *> (ncrep);
 }
 
+#endif
+
 DEFUN_DLD (__recorder_getaudiodata__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{data}} __recorder_getaudiodata__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -2201,26 +2211,30 @@ Undocumented internal function.\n\
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
+#ifdef HAVE_PORTAUDIO
+
 static audioplayer *
 get_player (const octave_value& ov)
 {
   const octave_base_value& rep = ov.get_rep ();
 
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   return dynamic_cast<audioplayer *> (ncrep);
 }
 
+#endif
+
 DEFUN_DLD (__player_get_channels__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __player_get_channels__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -148,16 +148,17 @@ Read a file and return a specified range
   error ("sndfile not found on your system and thus audioread is not functional");
 
 #endif
 
   return retval;
 }
 
 #ifdef HAVE_SNDFILE
+
 static void
 fill_extension_table (std::map<std::string, int> &table)
 {
   table["wav"] = SF_FORMAT_WAV;
   table["aiff"] = SF_FORMAT_AIFF;
   table["au"] = SF_FORMAT_AU;
   table["raw"] = SF_FORMAT_RAW;
   table["paf"] = SF_FORMAT_PAF;
@@ -177,16 +178,17 @@ fill_extension_table (std::map<std::stri
   table["sd2"] = SF_FORMAT_SD2;
   table["flac"] = SF_FORMAT_FLAC;
   table["caf"] = SF_FORMAT_CAF;
   table["wve"] = SF_FORMAT_WVE;
   table["ogg"] = SF_FORMAT_OGG;
   table["mpc2k"] = SF_FORMAT_MPC2K;
   table["rf64"] = SF_FORMAT_RF64;
 }
+
 #endif
 
 DEFUN_DLD (audiowrite, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs})\n\
 @deftypefnx {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs}, @var{name}, @var{value}, @dots{})\n\
 \n\
 Write audio data from the matrix @var{y} to @var{filename} with the file\n\
@@ -332,24 +334,24 @@ Comment.\n\
 DEFUN_DLD (audioinfo, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{info} =} audioinfo (@var{filename})\n\
 Return information about an audio file specified by @var{filename}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
+#ifdef HAVE_SNDFILE
+
   if (args.length () != 1)
     {
       print_usage ();
       return retval;
     }
 
-#ifdef HAVE_SNDFILE
-
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (args(0).string_value ().c_str (), SFM_READ, &info);
 
   octave_scalar_map result;
 
   result.assign ("Filename", args(0).string_value ());
   result.assign ("CompressionMethod", "");
