# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1512912906 -3600
#      Sun Dec 10 14:35:06 2017 +0100
# Node ID 41cf6ee90cb62d462e7318450a6188a3f8c76a5d
# Parent  f997aa4be0ceb4d06a0908c289d91edd59eeb050
Better handling of "handlevisibility" property (bug #52621).

* graphics.in.h (base_property::handlevisibility): Declare virtual updater
  (figure::properties::update_handlevisibility): Declare overloaded method.

* graphics.cc (base_properties::update_handlevisibility): Don't let objects
  with "handlevisibility" = "off" be the root callbaackobject or figure
  currentobject.  Add BIST for handlevisibility property.
  (figure::properties::update_handlevisibility): Don't let figure with
  "handlevisibility" = "off" be the root currentfigure.
  (axes::properties::update_handlevisibility): Don't let axes with
  "handlevisibility" = "off" be the figure currentaxes.

* figure.m: Don't let figure become "currentfigure" if its handle is not
visible.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2052,16 +2052,38 @@ figure::properties::set___mouse_mode__ (
               set___zoom_mode__ (zm);
 
               mark_modified ();
             }
         }
     }
 }
 
+void
+figure::properties::update_handlevisibility (void)
+{
+  if (! is_handle_visible ())
+    {
+      octave_value cf = gh_manager::get_object (0).get ("currentfigure");
+      if (! cf.isempty () && cf.double_value () == __myhandle__)
+        {
+          gh_manager::auto_lock guard;
+          octave_value kids =  gh_manager::get_object (0).get ("children");
+          if (kids.isempty ())
+            gh_manager::get_object (0).set ("currentfigure", Matrix ());
+          else
+            {
+              NDArray kidsarray = kids.array_value ();
+              gh_manager::get_object (0).set ("currentfigure", kidsarray(0));
+            }
+        }
+    }
+
+  base_properties::update_handlevisibility ();
+}
 // ---------------------------------------------------------------------
 
 void
 property_list::set (const caseless_str& name, const octave_value& val)
 {
   size_t offset = 0;
 
   size_t len = name.length ();
@@ -3278,16 +3300,88 @@ base_properties::update_autopos (const s
 {
   graphics_object parent_go = gh_manager::get_object (get_parent ());
 
   if (parent_go.valid_object ())
     parent_go.get_properties ().update_autopos (elem_type);
 }
 
 void
+base_properties::update_handlevisibility (void)
+{
+  if (is_handle_visible ())
+    return;
+  
+  // This object should not be the root "callbackobject"
+  graphics_object rt = gh_manager::get_object (0);
+  octave_value cbo = rt.get ("callbackobject");
+  if (! cbo.isempty () && cbo.double_value () == __myhandle__)
+    {
+      gh_manager::auto_lock guard;
+      auto& root_props =
+        dynamic_cast<root_figure::properties&> (rt.get_properties ());
+      root_props.set_callbackobject (Matrix ());
+    }
+
+  // This object should not be the figure "currentobject"
+  graphics_object go (gh_manager::get_object (get___myhandle__ ()));
+  graphics_object fig (go.get_ancestor ("figure"));
+  if (fig.valid_object ())
+    {
+      octave_value co = fig.get ("currentobject");
+      if (! co.isempty () && co.double_value () == __myhandle__)
+        {
+          gh_manager::auto_lock guard;
+          auto& fig_props =
+            dynamic_cast<figure::properties&> (fig.get_properties ());
+          fig_props.set_currentobject (Matrix ());
+        }
+    }
+}
+
+/*
+## test current figure and current axes have visible handles 
+%!test
+%! hf1 = figure ("visible", "off");
+%! hf2 = figure ("visible", "off");
+%! hax1 = axes ();
+%! hax2 = axes ();
+%! unwind_protect
+%!   assert (get (0, "currentfigure"), hf2);
+%!   assert (get (hf2, "currentaxes"), hax2);
+%!   set (hf2, "handlevisibility", "off");
+%!   assert (get (0, "currentfigure"), hf1);
+%!   set (hax2, "handlevisibility", "off");
+%!   assert (get (hf2, "currentaxes"), hax1);
+%!   assert (get (hf2, "currentobject"), []);
+%! unwind_protect_cleanup
+%!   close ([hf1, hf2]);
+%! end_unwind_protect;
+*/
+
+/*
+## test current callback object have visible handle 
+%!test
+%! hf = figure ("visible", "off");
+%! hax = axes ();
+%! unwind_protect
+%!   fcn = @(h) assert (gcbo (), h);
+%!   addlistener (hax, "color", fcn);
+%!   set (hax, "color", "r");
+%!   dellistener (hax, "color", fcn);
+%!   set (hax, "handlevisibility", "off");
+%!   fcn = @() assert (gcbo (), []);
+%!   addlistener (hax, "color", fcn);
+%!   set (hax, "color", "b");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect;
+*/
+
+void
 base_properties::add_listener (const caseless_str& pname,
                                const octave_value& val,
                                listener_mode mode)
 {
   property p = get_property (pname);
 
   if (p.ok ())
     p.add_listener (val, mode);
@@ -8481,16 +8575,41 @@ axes::properties::unzoom (void)
       update_ylim ();
       update_zlim ();
 
       update_view ();
     }
 }
 
 void
+axes::properties::update_handlevisibility (void)
+{
+  if (! is_handle_visible ())
+    {
+      graphics_object go (gh_manager::get_object (get___myhandle__ ()));
+      graphics_object fig (go.get_ancestor ("figure"));
+      octave_value ca = fig.get ("currentaxes");
+      if (! ca.isempty () && ca.double_value () == __myhandle__)
+        {
+          gh_manager::auto_lock guard;
+          octave_value kids =  fig.get ("children");
+          if (kids.isempty ())
+            fig.set ("currentaxes", Matrix ());
+          else
+            {
+              NDArray kidsarray = kids.array_value ();
+              fig.set ("currentaxes", kidsarray(0));
+            }
+        }
+    }
+
+  base_properties::update_handlevisibility ();
+}
+
+void
 axes::properties::clear_zoom_stack (bool do_unzoom)
 {
   size_t items_to_leave_on_stack = (do_unzoom ? 7 : 0);
 
   while (zoom_stack.size () > items_to_leave_on_stack)
     zoom_stack.pop_front ();
 
   if (do_unzoom)
@@ -10128,23 +10247,21 @@ gh_manager::do_execute_callback (const g
       if (data.is_defined ())
         args(1) = data;
       else
         args(1) = Matrix ();
 
       octave::unwind_protect_safe frame;
       frame.add_fcn (gh_manager::restore_gcbo);
 
-      if (true)
-        {
-          gh_manager::auto_lock guard;
-
-          callback_objects.push_front (get_object (h));
-          xset_gcbo (h);
-        }
+      gh_manager::auto_lock guard;
+      graphics_object go (get_object (h));
+      callback_objects.push_front (go);
+      if (go.get ("handlevisibility").string_value () != "off")
+        xset_gcbo (h);
 
       // Copy CB because "function_value" method is non-const.
 
       octave_value cb = cb_arg;
 
       if (cb.is_function () || cb.is_function_handle ())
         fcn = cb.function_value ();
       else if (cb.is_string ())
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2357,32 +2357,34 @@ protected:
     // properties common to all objects
     bool_property beingdeleted , "off"
     radio_property busyaction , "{queue}|cancel"
     callback_property buttondownfcn , Matrix ()
     children_property children gf , Matrix ()
     bool_property clipping , "on"
     callback_property createfcn , Matrix ()
     callback_property deletefcn , Matrix ()
-    radio_property handlevisibility , "{on}|callback|off"
+    radio_property handlevisibility u , "{on}|callback|off"
     bool_property hittest , "on"
     bool_property interruptible , "on"
     handle_property parent fs , p
     bool_property selected , "off"
     bool_property selectionhighlight , "on"
     string_property tag s , ""
     string_property type frs , ty
     handle_property uicontextmenu u , graphics_handle ()
     any_property userdata , Matrix ()
     bool_property visible , "on"
     // additional (Octave-specific) properties
     bool_property __modified__ hs , "on"
     graphics_handle __myhandle__ fhrs , mh
   END_PROPERTIES
 
+    virtual void update_handlevisibility (void);
+
 protected:
   struct cmp_caseless_str
   {
     bool operator () (const caseless_str& a, const caseless_str& b) const
     {
       std::string a1 = a;
       std::transform (a1.begin (), a1.end (), a1.begin (), tolower);
       std::string b1 = b;
@@ -3197,16 +3199,18 @@ public:
     Matrix get_auto_paperposition (void);
 
     void update_paperpositionmode (void)
     {
       if (paperpositionmode.is ("auto"))
         paperposition.set (get_auto_paperposition ());
     }
 
+    void update_handlevisibility (void);
+
     mutable graphics_toolkit toolkit;
   };
 
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
@@ -3494,16 +3498,17 @@ public:
 
     void rotate3d (double x0, double x1, double y0, double y1,
                    bool push_to_zoom_stack = true);
 
     void rotate_view (double delta_az, double delta_el,
                       bool push_to_zoom_stack = true);
 
     void unzoom (void);
+    void update_handlevisibility (void);
     void push_zoom_stack (void);
     void clear_zoom_stack (bool do_unzoom = true);
 
     void update_units (const caseless_str& old_units);
 
     void update_fontunits (const caseless_str& old_fontunits);
 
   private:
diff --git a/scripts/plot/util/figure.m b/scripts/plot/util/figure.m
--- a/scripts/plot/util/figure.m
+++ b/scripts/plot/util/figure.m
@@ -85,17 +85,20 @@ function h = figure (varargin)
   if (init_new_figure)
     f = __go_figure__ (f, varargin{:});
     __add_default_menu__ (f);
     __set_default_mouse_modes__ (f);
   elseif (nargs > 0)
     set (f, varargin{:});
   endif
 
-  set (0, "currentfigure", f);
+  if (strcmp (get (f, "handlevisibility"), "on"))
+    set (0, "currentfigure", f);
+  endif
+  
   ## When switching to figure N, make figure visible and on top of stack,
   ## unless visibility is explicitly switched off.
   if (! init_new_figure && ! any (strcmpi (varargin(1:2:end), "visible")
                                   && strcmpi (varargin(2:2:end), "off")))
     set (f, "visible", "on");
   endif
 
   if (nargout > 0)
