# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1388329890 18000
#      Sun Dec 29 10:11:30 2013 -0500
# Branch stable
# Node ID 284e5c87f27b95876a34c4ffd0f8f58275edd25d
# Parent  0b5f669f5b0367048213eec53ed3cff3f6351aa0
Fix saving int8 and uint8 in plain text format (bug #40980)

* oct-inttypes.h (operator<<): Specialise this operator's
  octave_int<T> overloads for T = int8_t and T = uint8_t so that it
  calls non-char versions of std::operator<<

diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -1018,16 +1018,60 @@ inline std::istream&
 operator >> (std::istream& is, octave_int<T>& ival)
 {
   T tmp = 0;
   is >> tmp;
   ival = tmp;
   return is;
 }
 
+// We need to specialise for char and unsigned char because
+// std::operator<< and std::operator>> are overloaded to input and
+// output the ASCII character values instead of a representation of
+// their numerical value (e.g. os << char(10) outputs a space instead
+// of outputting the characters '1' and '0')
+
+template <>
+inline std::ostream&
+operator << (std::ostream& os, const octave_int<int8_t>& ival)
+{
+  os << static_cast<int> (ival.value ());
+  return os;
+}
+
+template <>
+inline std::ostream&
+operator << (std::ostream& os, const octave_int<uint8_t>& ival)
+{
+  os << static_cast<unsigned int> (ival.value ());
+  return os;
+}
+
+
+template <>
+inline std::istream&
+operator >> (std::istream& is, octave_int<int8_t>& ival)
+{
+  int tmp = 0;
+  is >> tmp;
+  ival = static_cast<int8_t> (tmp);
+  return is;
+}
+
+template <>
+inline std::istream&
+operator >> (std::istream& is, octave_int<uint8_t>& ival)
+{
+  unsigned int tmp = 0;
+  is >> tmp;
+  ival = static_cast<uint8_t> (tmp);
+  return is;
+}
+
+
 // Bitwise operations
 
 #define OCTAVE_INT_BITCMP_OP(OP) \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, const octave_int<T>& y) \
   { return x.value () OP y.value (); }
 
