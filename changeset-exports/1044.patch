# HG changeset patch
# User jwe
# Date 790446901 0
#      Wed Jan 18 16:35:01 1995 +0000
# Node ID 1aa6f2edd9752b626806a2a2a5360d2125c2b661
# Parent  b8dd808bc61f96cd3d92d8834708dceb4b08897c
[project @ 1995-01-18 16:35:01 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -40,16 +40,17 @@ Free Software Foundation, Inc.
 #include <sys/types.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 #include <time.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <iostream.h>
+#include <strstream.h>
 #include <string.h>
 #include <assert.h>
 #include <signal.h>
 
 // This must come before anything that includes iostream.h...
 extern "C"
 {
 #include "readline/readline.h"
@@ -424,16 +425,43 @@ decode_prompt_string (const char *string
       result = string_list (list);
       dispose_words (list);
     }
 #endif
 
   return result;
 }
 
+static void
+do_input_echo (const char *input_string)
+{
+  if (echo_input)
+    {
+      ostrstream buf;
+
+      if (! forced_interactive)
+	{
+	  char *prefix = decode_prompt_string (user_pref.ps4);
+	  buf << prefix;
+	  delete [] prefix;
+	}
+
+      if (input_string)
+	{
+	  buf << input_string;
+	  int len = strlen (input_string);
+	  if (input_string[len-1] != '\n')
+	    buf << "\n";
+	}
+
+      maybe_page_output (buf);
+    }
+}
+
+
 // Use GNU readline to get an input line and store it in the history
 // list.
 
 static char *
 octave_gets (void)
 {
   if (octave_gets_line)
     {
@@ -464,23 +492,17 @@ octave_gets (void)
   current_input_line = octave_gets_line;
 
   if (octave_gets_line && *octave_gets_line)
     {
       maybe_save_history (octave_gets_line);
 
       maybe_write_to_diary_file (octave_gets_line);
 
-      if (echo_input)
-	{
-	  if (! forced_interactive)
-	    cout << "+ ";
-
-	  cout << octave_gets_line << "\n";
-	}
+      do_input_echo (octave_gets_line);
     }
 
   maybe_write_to_diary_file ("\n");
   
   return octave_gets_line;
 }
 
 // Read a line from the input stream.
@@ -557,27 +579,24 @@ octave_read (char *buf, int max_size)
 	}
       else
 	status = 0; // Tell yylex that we found EOF.
 
       if (stashed_line)
 	delete [] stashed_line;
 
       stashed_line = strsave (buf);
+
       current_input_line = stashed_line;
 
-      if (echo_input && current_input_line && *current_input_line)
-	{
-	  if (! forced_interactive)
-	    cout << "+ ";
+      do_input_echo (current_input_line);
+    }
 
-	  cout << current_input_line << "\n";
-	}
-    }
   input_line_number++;
+
   return status;
 }
 
 // Fix things up so that input can come from file `name', printing a
 // warning if the file doesn't exist.
 
 FILE *
 get_input_from_file (char *name, int warn)
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -72,16 +72,17 @@ init_user_prefs (void)
   user_pref.editor = 0;
   user_pref.gnuplot_binary = 0;
   user_pref.imagepath = 0;
   user_pref.info_file = 0;
   user_pref.loadpath = 0;
   user_pref.pager_binary = 0;
   user_pref.ps1 = 0;
   user_pref.ps2 = 0;
+  user_pref.ps4 = 0;
   user_pref.pwd = 0;
 }
 
 // Check the value of a string variable to see if it it's ok to do
 // something.
 //
 //   return of  1 => always ok.
 //   return of  0 => never ok.
@@ -727,16 +728,36 @@ sv_ps2 (void)
       warning ("invalid value specified for PS2");
       status = -1;
     }
 
   return status;
 }
 
 int
+sv_ps4 (void)
+{
+  int status = 0;
+
+  char *s = builtin_string_variable ("PS4");
+  if (s)
+    {
+      delete [] user_pref.ps4;
+      user_pref.ps4 = s;
+    }
+  else
+    {
+      warning ("invalid value specified for PS4");
+      status = -1;
+    }
+
+  return status;
+}
+
+int
 sv_pwd (void)
 {
   int status = 0;
 
   char *s = builtin_string_variable ("PWD");
   if (s)
     {
       delete [] user_pref.pwd;
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -56,16 +56,17 @@ struct user_preferences
   char *editor;
   char *gnuplot_binary;
   char *imagepath;
   char *info_file;
   char *loadpath;
   char *pager_binary;
   char *ps1;
   char *ps2;
+  char *ps4;
   char *pwd;
 };
 
 extern user_preferences user_pref;
 
 extern void init_user_prefs (void);
 
 extern int automatic_replot (void);
@@ -99,16 +100,17 @@ extern int sv_default_save_format (void)
 extern int sv_editor (void);
 extern int sv_gnuplot_binary (void);
 extern int sv_imagepath (void);
 extern int sv_info_file (void);
 extern int sv_loadpath (void);
 extern int sv_pager_binary (void);
 extern int sv_ps1 (void);
 extern int sv_ps2 (void);
+extern int sv_ps4 (void);
 extern int sv_pwd (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1456,16 +1456,19 @@ install_builtin_variables (void)
     "path to pager binary");
 
   DEFVAR ("PS1", SBV_PS1, "\\s:\\#> ", 0, 0, 1, sv_ps1,
     "primary prompt string");
 
   DEFVAR ("PS2", SBV_PS2, "> ", 0, 0, 1, sv_ps2,
     "secondary prompt string");
 
+  DEFVAR ("PS4", SBV_PS4, "+ ", 0, 0, 1, sv_ps4,
+    "string printed before echoed input (enabled by --echo-input)");
+
   DEFVAR ("PWD", SBV_PWD, get_working_directory ("initialize_globals"),
 	  0, 1, 1, sv_pwd,
     "current working directory");
 
   DEFVAR ("SEEK_SET", SBV_SEEK_SET, 0.0, 0, 1, 1, 0,
     "used with fseek to position file relative to the beginning");
 
   DEFVAR ("SEEK_CUR", SBV_SEEK_CUR, 1.0, 0, 1, 1, 0,
