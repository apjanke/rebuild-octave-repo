# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1377871662 14400
#      Fri Aug 30 10:07:42 2013 -0400
# Node ID 4a348443de9bee9630fa20a4ae94613040eba4c4
# Parent  80bf005cdf8e2e0a6f730e71daded707857e9582
Support multibyte characters in Freetype-based renderer (bug #31596).

* bootstrap.conf (gnulib_modules): Add mbrtowc.
* libinterp/corefcn/txt-eng-ft.cc (clocale, cwchar): New include.
(ft_render::visit(text_element_string)): Decode string using mbrtowc.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -44,16 +44,17 @@ gnulib_modules="
   getopt-gnu
   gettimeofday
   glob
   isatty
   largefile
   link
   lstat
   malloc-gnu
+  mbrtowc
   mkdir
   mkfifo
   mkostemp
   mktime
   nanosleep
   nproc
   open
   opendir
diff --git a/libinterp/corefcn/txt-eng-ft.cc b/libinterp/corefcn/txt-eng-ft.cc
--- a/libinterp/corefcn/txt-eng-ft.cc
+++ b/libinterp/corefcn/txt-eng-ft.cc
@@ -25,16 +25,18 @@ along with Octave; see the file COPYING.
 #endif
 
 #if defined (HAVE_FREETYPE)
 
 #if defined (HAVE_FONTCONFIG)
 #include <fontconfig/fontconfig.h>
 #endif
 
+#include <clocale>
+#include <cwchar>
 #include <iostream>
 #include <map>
 #include <utility>
 
 #include "singleton-cleanup.h"
 
 #include "error.h"
 #include "pr-output.h"
@@ -623,28 +625,49 @@ ft_render::process_character (FT_ULong c
   return glyph_index;
 }
 
 void
 ft_render::visit (text_element_string& e)
 {
   if (font.is_valid ())
     {
-      std::string str = e.string_value ();
       FT_UInt glyph_index, previous = 0;
 
-      for (size_t i = 0; i < str.length (); i++)
+      std::string str = e.string_value ();
+      size_t n = str.length (), curr = 0;
+      mbstate_t ps = { 0 };
+      wchar_t wc;
+
+      while (n > 0)
         {
-          glyph_index = process_character (static_cast<unsigned char> (str[i]),
-                                           previous);
+          size_t r = gnulib::mbrtowc (&wc, str.data () + curr, n, &ps);
+
+          if (r > 0
+              && r != static_cast<size_t> (-1)
+              && r != static_cast<size_t> (-2))
+            {
+              n -= r;
+              curr += r;
 
-          if (str[i] == '\n')
-            previous = 0;
+              glyph_index = process_character (wc, previous);
+
+              if (wc == L'\n')
+                previous = 0;
+              else
+                previous = glyph_index;
+            }
           else
-            previous = glyph_index;
+            {
+              if (r != 0)
+                ::warning ("ft_render: failed to decode string `%s' with "
+                           "locale `%s'", str.c_str (),
+                           std::setlocale (LC_CTYPE, NULL));
+              break;
+            }
         }
     }
 }
 
 void
 ft_render::visit (text_element_list& e)
 {
   // Save and restore (after processing the list) the current font and color.
