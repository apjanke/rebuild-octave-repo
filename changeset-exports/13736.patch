# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1319120378 -3600
#      Thu Oct 20 15:19:38 2011 +0100
# Node ID deb69dab45148c9e3ee9a6644ba72b9b2019ecd0
# Parent  2cd903770748c27a53035428cc93400cfa084d31
Avoid some compilation warnings.

* graphics.cc (base_properties::is_handle_visible): Add parenthesis.
(uicontrol::properties::get_extent): Don't use "parent" variable.
(uicontrol::properties::update_units): Likewise.
(uipanel::properties::update_units): Likewise.
(gh_manager::do_event_processing): Rename "lock" variable into "guard".
* ov.h (DEF_DUMMY_VALUE_EXTRACTOR): Remove unused argument name.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2537,17 +2537,17 @@ base_properties::update_axis_limits (con
   if (obj)
     obj.update_axis_limits (axis_type, h);
 }
 
 bool
 base_properties::is_handle_visible (void) const
 {
   return (handlevisibility.is ("on")
-          || executing_callback && ! handlevisibility.is ("off"));
+          || (executing_callback && ! handlevisibility.is ("off")));
 }
 
 graphics_toolkit
 base_properties::get_toolkit (void) const
 {
   graphics_object go = gh_manager::get_object (get_parent ());
 
   if (go)
@@ -6941,18 +6941,18 @@ hggroup::update_axis_limits (const std::
 
 // ---------------------------------------------------------------------
 
 octave_value
 uicontrol::properties::get_extent (void) const
 {
   Matrix m = extent.get ().matrix_value ();
 
-  graphics_handle parent = get_parent ();
-  graphics_object parent_obj = gh_manager::get_object (parent);
+  graphics_object parent_obj =
+    gh_manager::get_object (get_parent ());
   Matrix parent_bbox = parent_obj.get_properties ().get_boundingbox (true),
          parent_size = parent_bbox.extract_n (0, 2, 1, 2);
 
   return convert_position (m, "pixels", get_units (), parent_size);
 }
 
 void
 uicontrol::properties::update_text_extent (void)
@@ -6988,18 +6988,17 @@ uicontrol::properties::update_text_exten
 #endif
 }
 
 void
 uicontrol::properties::update_units (void)
 {
   Matrix pos = get_position ().matrix_value ();
 
-  graphics_handle parent = get_parent ();
-  graphics_object parent_obj = gh_manager::get_object (parent);
+  graphics_object parent_obj = gh_manager::get_object (get_parent ());
   Matrix parent_bbox = parent_obj.get_properties ().get_boundingbox (true),
          parent_size = parent_bbox.extract_n (0, 2, 1, 2);
   
   pos = convert_position (pos, cached_units, get_units (), parent_size);
   set_position (pos);
 
   cached_units = get_units ();
 }
@@ -7160,18 +7159,17 @@ uipanel::properties::set_units (const oc
     }
 }
 
 void
 uipanel::properties::update_units (const caseless_str& old_units)
 {
   Matrix pos = get_position ().matrix_value ();
 
-  graphics_handle parent = get_parent ();
-  graphics_object parent_obj = gh_manager::get_object (parent);
+  graphics_object parent_obj = gh_manager::get_object (get_parent ());
   Matrix parent_bbox = parent_obj.get_properties ().get_boundingbox (true),
          parent_size = parent_bbox.extract_n (0, 2, 1, 2);
   
   pos = convert_position (pos, old_units, get_units (), parent_size);
   set_position (pos);
 }
 
 void
@@ -7723,17 +7721,17 @@ gh_manager::do_process_events (bool forc
     }
 
   return 0;
 }
 
 void 
 gh_manager::do_enable_event_processing (bool enable)
 {
-  gh_manager::auto_lock lock;
+  gh_manager::auto_lock guard;
 
   if (enable)
     {
       event_processing++;
 
       command_editor::add_event_hook (gh_manager::process_events);
     }
   else
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -1368,16 +1368,16 @@ DEF_VALUE_EXTRACTOR (PermMatrix, perm_ma
 
 DEF_VALUE_EXTRACTOR (SparseMatrix, sparse_matrix)
 DEF_VALUE_EXTRACTOR (SparseComplexMatrix, sparse_complex_matrix)
 DEF_VALUE_EXTRACTOR (SparseBoolMatrix, sparse_bool_matrix)
 #undef DEF_VALUE_EXTRACTOR
 
 #define DEF_DUMMY_VALUE_EXTRACTOR(VALUE,DEFVAL) \
 template<> \
-inline VALUE octave_value_extract<VALUE> (const octave_value& v) \
+inline VALUE octave_value_extract<VALUE> (const octave_value&) \
   { assert (false); return DEFVAL; }
 
 DEF_DUMMY_VALUE_EXTRACTOR (char, 0)
 DEF_DUMMY_VALUE_EXTRACTOR (octave_value, octave_value ())
 #undef DEF_DUMMY_VALUE_EXTRACTOR
 
 #endif
