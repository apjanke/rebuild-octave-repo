# HG changeset patch
# User jwe
# Date 1099363345 0
#      Tue Nov 02 02:42:25 2004 +0000
# Node ID 38dd53c8935e2a4765d481961c438540967a4cf7
# Parent  11bea7392e69bcbc1beff9891cee07f62b1376e9
[project @ 2004-11-02 02:42:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2004-11-01  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/filter.cc (filter (MArray<T>&, MArray<T>&,
+	MArrayN<T>&, MArrayN<T>&, int)): The variable si is now at least 2-D.
+	(Ffilter): Force si to be 2-D, while allowing arbitrary vector
+	orientation.
+
 2004-11-01  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (INSTANTIATE_EYE): New macro.  Use it to instantiate
 	identity matrix functions for various matrix types.
 
 	* variables.cc (do_who): Fix typo in for loop.
 
 2004-10-28  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -72,55 +72,43 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 
   dim_vector x_dims = x.dims ();
   if (dim < 0 || dim > x_dims.length ())
     {
       error ("filter: filtering over invalid dimension");
       return y;
     }
 
-  int x_len = x_dims (dim);
+  int x_len = x_dims(dim);
 
   dim_vector si_dims = si.dims ();
-  int si_len = si_dims (0);
+  int si_len = si_dims(0);
 
   if (si_len != ab_len - 1)
     {
       error ("filter: first dimension of si must be of length max (length (a), length (b)) - 1");
       return y;
     }
 
-  if (si_dims.length () == 1)
-    {
-      // Special case as x_dims.length () might be 2, but be a vector.
-      if (x_dims.length () > 2
-	  || (x_dims.length () == 2
-	      && (x_dims(0) != 1 || x_dims(1) != si_dims(0))
-	      && (x_dims(1) != 1 || x_dims(0) != si_dims(0))))
-	{
-	  error ("filter: dimensionality of si and x must agree");
-	  return y;
-	}
-    }
-  else if (si_dims.length () != x_dims.length ())
+  if (si_dims.length () != x_dims.length ())
     {
       error ("filter: dimensionality of si and x must agree");
       return y;
     }
 
   int si_dim = 0;
   for (int i = 0; i < x_dims.length (); i++)
     {
       if (i == dim)
 	continue;
      
       if (x_dims(i) == 1)
 	continue;
  
-      if (si_dims (++si_dim) != x_dims (i))
+      if (si_dims(++si_dim) != x_dims(i))
 	{
 	  error ("filter: dimensionality of si and x must agree");
 	  return y;
 	}
     }
 
   if (norm != 1.0)
     {
@@ -218,22 +206,22 @@ extern MArrayN<Complex>
 filter (MArray<Complex>&, MArray<Complex>&, MArrayN<Complex>&,
 	MArrayN<Complex>&, int dim);
 #endif
 
 template <class T>
 MArrayN<T>
 filter (MArray<T>& b, MArray<T>& a, MArrayN<T>& x, int dim = -1)
 {
-  dim_vector x_dims = x.dims ();
+  dim_vector x_dims = x.dims();
 
   if (dim < 0)
     {
       // Find first non-singleton dimension
-      while (dim < x_dims.length () && x_dims (dim) <= 1)
+      while (dim < x_dims.length () && x_dims(dim) <= 1)
 	dim++;
   
       // All dimensions singleton, pick first dimension
       if (dim == x_dims.length ())
 	dim = 0;
     }
   else
     if (dim < 0 || dim > x_dims.length ())
@@ -243,18 +231,18 @@ filter (MArray<T>& b, MArray<T>& a, MArr
       }
 
   int a_len = a.length ();
   int b_len = b.length ();
 
   int si_len = (a_len > b_len ? a_len : b_len) - 1;
   dim_vector si_dims = x.dims ();
   for (int i = dim; i > 0; i--)
-    si_dims (i) = si_dims (i-1);
-  si_dims (0) = si_len;
+    si_dims(i) = si_dims(i-1);
+  si_dims(0) = si_len;
   
   MArrayN<T> si (si_dims, T (0.0));
 
   return filter (b, a, x, si, dim);
 }
 
 DEFUN_DLD (filter, args, nargout,
   "-*- texinfo -*-\n\
@@ -376,17 +364,17 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	  error ("filter: filtering over invalid dimension");
 	  return retval;
 	}
     }
   else
     {
       // Find first non-singleton dimension
       dim = 0;
-      while (dim < x_dims.length () && x_dims (dim) <= 1)
+      while (dim < x_dims.length () && x_dims(dim) <= 1)
 	dim++;
   
       // All dimensions singleton, pick first dimension
       if (dim == x_dims.length ())
 	dim = 0;
     }
 
   if (args(0).is_complex_type ()
@@ -407,37 +395,36 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	    {
 	      int a_len = a.length ();
 	      int b_len = b.length ();
 
 	      int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
 	      dim_vector si_dims = x.dims ();
 	      for (int i = dim; i > 0; i--)
-		si_dims (i) = si_dims (i-1);
-	      si_dims (0) = si_len;
+		si_dims(i) = si_dims(i-1);
+	      si_dims(0) = si_len;
 
 	      si.resize (si_dims, 0.0);
 	    }
 	  else
 	    {
 	      dim_vector si_dims = args (3).dims ();
 	      bool si_is_vector = true;
-	      for (int i=0; i < si_dims.length (); i++)
-		if (si_dims (i) != 1 && si_dims (i) < si_dims.numel ())
+	      for (int i = 0; i < si_dims.length (); i++)
+		if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
 		  {
 		    si_is_vector = false;
 		    break;
 		  }
 
+	      si = args(3).complex_array_value ();
+
 	      if (si_is_vector)
-		// XXX FIXME XXX -- there must be a better way...
-		si = ComplexNDArray (MArrayN<Complex> (ArrayN<Complex> (args(3).complex_vector_value ())));
-	      else
-		si = args(3).complex_array_value ();
+		si = si.reshape (dim_vector (si.numel (), 1));
 	    }
 
 	  if (! error_state)
 	    {
 	      ComplexNDArray y (filter (b, a, x, si, dim));
 
 	      if (nargout == 2)
 		retval(1) = si;
@@ -465,37 +452,36 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	    {
 	      int a_len = a.length ();
 	      int b_len = b.length ();
 
 	      int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
 	      dim_vector si_dims = x.dims ();
 	      for (int i = dim; i > 0; i--)
-		si_dims (i) = si_dims (i-1);
-	      si_dims (0) = si_len;
+		si_dims(i) = si_dims(i-1);
+	      si_dims(0) = si_len;
 
 	      si.resize (si_dims, 0.0);
 	    }
 	  else
 	    {
 	      dim_vector si_dims = args (3).dims ();
 	      bool si_is_vector = true;
-	      for (int i=0; i < si_dims.length (); i++)
-		if (si_dims (i) != 1 && si_dims (i) < si_dims.numel ())
+	      for (int i = 0; i < si_dims.length (); i++)
+		if (si_dims(i) != 1 && si_dims(i) < si_dims.numel ())
 		  {
 		    si_is_vector = false;
 		    break;
 		  }
 
+	      si = args(3).array_value ();
+
 	      if (si_is_vector)
-		// XXX FIXME XXX -- there must be a better way...
-		si = NDArray (MArrayN<double> (ArrayN<double> (args(3).vector_value ())));
-	      else
-		si = args(3).array_value ();
+		si = si.reshape (dim_vector (si.numel (), 1));
 	    }
 
 	  if (! error_state)
 	    {
 	      NDArray y (filter (b, a, x, si, dim));
 
 	      if (nargout == 2)
 		retval(1) = si;
