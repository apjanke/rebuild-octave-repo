# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1534922084 -7200
#      Wed Aug 22 09:14:44 2018 +0200
# Node ID ae9d6a491c0614125c1c880d795a1729fde1aa24
# Parent  14e844f1459a575537b953c024ab600765337dc7
Refactor graphics event handling and fix interruption of callbacks (bug #54340)

* graphics.in.h (base_graphics_event::m_busyaction,
  base_graphics_event::get_busyaction): New data member and accessor method.
  (base_graphics_event::priority) New enum for allowed values of m_busyaction,
  INTERRUPT, QUEUE, CANCEL.
  (graphics_event::create_callback_event): Add new busyaction argument that
  defaults to base_graphics_event::QUEUE.
  (graphics_event::get_busyaction): Accessor for base_graphics_event::busyaction.

* graphics.cc (gh_manager::do_post_callback): Post all events tagged according
  to the "busyaction" of the callback object and the name of the callback.
  (gh_manager::do_process_events): Triage callback execution here only.
  (Fdrawnow): First call process_events and then redraw. Allow drawnow to be
  called recursivelly.
  (figure::properties::set_position): Use gh_manager::post_callback to schedule
  the execution of the resizefcn.
  (F__go_post_callback__): New internal interpreter function for testing purpose.
  Add BIST that test busyaction,interruptible and resizefcn properties.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4118,17 +4118,17 @@ figure::properties::set_position (const 
   old_bb = get_boundingbox (true);
   modified = position.set (v, false, do_notify_toolkit);
   new_bb = get_boundingbox (true);
 
   if (old_bb != new_bb)
     {
       if (old_bb(2) != new_bb(2) || old_bb(3) != new_bb(3))
         {
-          execute_resizefcn ();
+          gh_manager::post_callback (__myhandle__, "resizefcn");
           update_boundingbox ();
         }
     }
 
   if (modified)
     {
       position.run_listeners (POSTSET);
       mark_modified ();
@@ -10686,23 +10686,25 @@ gh_manager::do_pop_figure (const graphic
     }
 }
 
 class
 callback_event : public base_graphics_event
 {
 public:
   callback_event (const graphics_handle& h, const std::string& name,
-                  const octave_value& data = Matrix ())
-    : base_graphics_event (), handle (h), callback_name (name),
+                  const octave_value& data = Matrix (),
+                  int busyaction = base_graphics_event::QUEUE)
+    : base_graphics_event (busyaction), handle (h), callback_name (name),
       callback (), callback_data (data) { }
 
   callback_event (const graphics_handle& h, const octave_value& cb,
-                  const octave_value& data = Matrix ())
-    : base_graphics_event (), handle (h), callback_name (),
+                  const octave_value& data = Matrix (),
+                  int busyaction = base_graphics_event::QUEUE)
+    : base_graphics_event (busyaction), handle (h), callback_name (),
       callback (cb), callback_data (data) { }
 
   void execute (void)
   {
     if (callback.is_defined ())
       gh_manager::execute_callback (handle, callback, callback_data);
     else
       gh_manager::execute_callback (handle, callback_name, callback_data);
@@ -10785,27 +10787,29 @@ private:
   std::string property_name;
   octave_value property_value;
   bool notify_toolkit;
 };
 
 graphics_event
 graphics_event::create_callback_event (const graphics_handle& h,
                                        const std::string& name,
-                                       const octave_value& data)
-{
-  return graphics_event (new callback_event (h, name, data));
+                                       const octave_value& data,
+                                       int busyaction)
+{
+  return graphics_event (new callback_event (h, name, data, busyaction));
 }
 
 graphics_event
 graphics_event::create_callback_event (const graphics_handle& h,
                                        const octave_value& cb,
-                                       const octave_value& data)
-{
-  return graphics_event (new callback_event (h, cb, data));
+                                       const octave_value& data,
+                                       int busyaction)
+{
+  return graphics_event (new callback_event (h, cb, data, busyaction));
 }
 
 graphics_event
 graphics_event::create_function_event (graphics_event::event_fcn fcn,
                                        void *data)
 {
   return graphics_event (new function_event (fcn, data));
 }
@@ -10971,46 +10975,31 @@ gh_manager::do_post_callback (const grap
                               const octave_value& data)
 {
   gh_manager::auto_lock guard;
 
   graphics_object go = get_object (h);
 
   if (go.valid_object ())
     {
-      if (callback_objects.empty ())
-        do_post_event (graphics_event::create_callback_event (h, name, data));
-      else
-        {
-          const graphics_object& current = callback_objects.front ();
-
-          if (current.get_properties ().is_interruptible ())
-            do_post_event (graphics_event::create_callback_event (h, name,
-                                                                  data));
-          else
-            {
-              std::string busy_action (go.get_properties ().get_busyaction ());
-
-              if (busy_action == "queue")
-                do_post_event (graphics_event::create_callback_event (h, name,
-                                                                      data));
-              else
-                {
-                  caseless_str cname (name);
-
-                  if (cname.compare ("deletefcn")
-                      || cname.compare ("createfcn")
-                      || (go.isa ("figure")
-                          && (cname.compare ("closerequestfcn")
-                              || cname.compare ("resizefcn"))))
-                    do_post_event (
-                      graphics_event::create_callback_event (h, name, data));
-                }
-            }
-        }
+      caseless_str cname (name);
+      int busyaction = base_graphics_event::QUEUE;
+
+      if (cname.compare ("deletefcn")
+          || cname.compare ("createfcn")
+          || (go.isa ("figure")
+              && (cname.compare ("closerequestfcn")
+                  || cname.compare ("resizefcn"))))
+        busyaction = base_graphics_event::INTERRUPT;
+      else if (go.get_properties ().get_busyaction () == "cancel")
+        busyaction = base_graphics_event::CANCEL;
+
+
+      do_post_event (graphics_event::create_callback_event (h, name, data,
+                                                            busyaction));
     }
 }
 
 void
 gh_manager::do_post_function (graphics_event::event_fcn fcn, void *fcn_data)
 {
   gh_manager::auto_lock guard;
 
@@ -11054,16 +11043,36 @@ gh_manager::do_process_events (bool forc
                 const graphics_object& go = callback_objects.front ();
 
                 if (go.get_properties ().is_interruptible ())
                   {
                     e = event_queue.front ();
 
                     event_queue.pop_front ();
                   }
+                else
+                  {
+                    std::list<graphics_event>::iterator p =
+                      event_queue.begin ();
+
+                    while (p != event_queue.end ())
+                      if (p->get_busyaction () == base_graphics_event::CANCEL)
+                        {
+                          p = event_queue.erase (p);
+                        }
+                      else if (p->get_busyaction ()
+                               == base_graphics_event::INTERRUPT)
+                        {
+                          e = (*p);
+                          event_queue.erase (p);
+                          break;
+                        }
+                      else
+                        p++;
+                  }
               }
           }
       }
 
       if (e.ok ())
         {
           e.execute ();
           events_executed = true;
@@ -11086,16 +11095,70 @@ gh_manager::do_process_events (bool forc
       Fdrawnow ();
 
       Vdrawnow_requested = false;
     }
 
   return 0;
 }
 
+
+/*
+## Test interruptible/busyaction properties
+%!function cb (h)
+%! setappdata (gcbf (), "cb_exec", [getappdata(gcbf (), "cb_exec") h]);
+%! drawnow ();
+%! setappdata (gcbf (), "cb_exec", [getappdata(gcbf (), "cb_exec") h]);
+%!endfunction
+%!
+%!test
+%! hf = figure ("visible", "off", "resizefcn", @cb);
+%! unwind_protect
+%!   ## Default
+%!   hui1 = uicontrol ("parent", hf, "interruptible", "on", "callback", @cb);
+%!   hui2 = uicontrol ("parent", hf, "busyaction", "queue", "callback", @cb);
+%!   hui3 = uicontrol ("parent", hf, "busyaction", "queue", "callback", @cb);
+%!   __go_post_callback__ (hui1, "callback");
+%!   __go_post_callback__ (hui2, "callback");
+%!   __go_post_callback__ (hui3, "callback");
+%!
+%!   assert (getappdata (hf, "cb_exec"), []);
+%!   drawnow ();
+%!   assert (getappdata (hf, "cb_exec"), [hui1 hui2 hui3 hui3 hui2 hui1]);
+%!
+%!   ## Interruptible off
+%!   setappdata (hf, "cb_exec", []);
+%!   set (hui1, "interruptible", "off");
+%!   __go_post_callback__ (hui1, "callback");
+%!   __go_post_callback__ (hui2, "callback");
+%!   __go_post_callback__ (hui3, "callback");
+%!   drawnow ();
+%!   assert (getappdata (hf, "cb_exec"), [hui1 hui1 hui2 hui3 hui3 hui2]);
+%!
+%!   ## "resizefcn" callback interrupts regardless of interruptible property
+%!   setappdata (hf, "cb_exec", []);
+%!   __go_post_callback__ (hui1, "callback");
+%!   __go_post_callback__ (hf, "resizefcn");
+%!   drawnow ();
+%!   assert (getappdata (hf, "cb_exec"), [hui1 hf hf hui1]);
+%!
+%!   ## test "busyaction" "cancel"
+%!   setappdata (hf, "cb_exec", []);
+%!   set (hui2, "busyaction", "cancel");
+%!   __go_post_callback__ (hui1, "callback");
+%!   __go_post_callback__ (hui2, "callback");
+%!   __go_post_callback__ (hui3, "callback");
+%!   __go_post_callback__ (hf, "resizefcn");
+%!   drawnow ();
+%!   assert (getappdata (hf, "cb_exec"), [hui1 hf hui3 hui3 hf hui1]);
+%! unwind_protect_cleanup
+%!   close (hf)
+%! end_unwind_protect
+*/
+
 void
 gh_manager::do_enable_event_processing (bool enable)
 {
   gh_manager::auto_lock guard;
 
   if (enable)
     {
       event_processing++;
@@ -12165,16 +12228,50 @@ Undocumented internal function.
         gh_manager::execute_callback (h, name);
       else
         gh_manager::execute_callback (h, name, args(2));
     }
 
   return ovl ();
 }
 
+DEFUN (__go_post_callback__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn  {} {} __go_post_callback__ (@var{h}, @var{name})
+@deftypefnx {} {} __go_post_callback__ (@var{h}, @var{name}, @var{param})
+Undocumented internal function.
+@end deftypefn */)
+{
+  int nargin = args.length ();
+
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+
+  const NDArray vals = args(0).xarray_value ("__go_post_callback__: invalid graphics object");
+
+  std::string name = args(1).xstring_value ("__go_post_callback__: invalid callback name");
+
+  for (octave_idx_type i = 0; i < vals.numel (); i++)
+    {
+      double val = vals(i);
+
+      graphics_handle h = gh_manager::lookup (val);
+
+      if (! h.ok ())
+        error ("__go_execute_callback__: invalid graphics object (= %g)", val);
+
+      if (nargin == 2)
+        gh_manager::post_callback (h, name);
+      else
+        gh_manager::post_callback (h, name, args(2));
+    }
+
+  return ovl ();
+}
+
 DEFUN (__image_pixel_size__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{sz} =} __image_pixel_size__ (@var{h})
 Internal function: returns the pixel size of the image in normalized units.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
@@ -12281,35 +12378,56 @@ The event queue is flushed and any callb
 With the optional argument @qcode{"expose"}, only graphic objects are
 updated and no other events or callbacks are processed.
 
 The third calling form of @code{drawnow} is for debugging and is
 undocumented.
 @seealso{refresh}
 @end deftypefn */)
 {
-  static int drawnow_executing = 0;
-
   if (args.length () > 3)
     print_usage ();
 
   octave::unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
-  frame.protect_var (drawnow_executing);
-
-  // Redraw, unless we are in the middle of an existing redraw or deletion.
-  if (++drawnow_executing <= 1 && ! delete_executing)
+
+  // Redraw unless we are in the middle of a deletion.
+  if (! delete_executing)
     {
       gh_manager::auto_lock guard;
 
-      if (args.length () == 0 || args.length () == 1)
-        {
+      if (args.length () <= 1)
+        {
+          // First process events so that the redraw happens when all
+          // objects are in their definite state.
+          bool do_events = true;
+
+          if (args.length () == 1)
+            {
+              caseless_str val (args(0).xstring_value ("drawnow: first argument must be a string"));
+
+              if (val.compare ("expose"))
+                do_events = false;
+              else
+                error ("drawnow: invalid argument, 'expose' is only valid option");
+            }
+
+          if (do_events)
+            {
+              gh_manager::unlock ();
+
+              gh_manager::process_events ();
+
+              gh_manager::lock ();
+            }
+
           Matrix hlist = gh_manager::figure_handle_list (true);
 
+          // Redraw modified figures
           for (int i = 0; i < hlist.numel (); i++)
             {
               graphics_handle h = gh_manager::lookup (hlist(i));
 
               if (h.ok () && h != 0)
                 {
                   graphics_object go = gh_manager::get_object (h);
                   figure::properties& fprops
@@ -12324,37 +12442,17 @@ undocumented.
                           fprops.get_toolkit ().redraw_figure (go);
 
                           gh_manager::lock ();
                         }
 
                       fprops.set_modified (false);
                     }
                 }
-            }
-
-          bool do_events = true;
-
-          if (args.length () == 1)
-            {
-              caseless_str val (args(0).xstring_value ("drawnow: first argument must be a string"));
-
-              if (val.compare ("expose"))
-                do_events = false;
-              else
-                error ("drawnow: invalid argument, 'expose' is only valid option");
-            }
-
-          if (do_events)
-            {
-              gh_manager::unlock ();
-
-              gh_manager::process_events ();
-
-              gh_manager::lock ();
+
             }
         }
       else if (args.length () >= 2 && args.length () <= 3)
         {
           std::string term, file, debug_file;
 
           term = args(0).xstring_value ("drawnow: TERM must be a string");
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -6018,24 +6018,36 @@ set_property_in_handle (double handle, c
 // ---------------------------------------------------------------------
 
 class graphics_event;
 
 class
 base_graphics_event
 {
 public:
+  enum priority { INTERRUPT, QUEUE, CANCEL };
 
   friend class graphics_event;
 
-  base_graphics_event (void) = default;
+  base_graphics_event (void)
+    : m_busyaction (QUEUE)
+  { };
+
+  base_graphics_event (int busyaction)
+    : m_busyaction (busyaction)
+  { };
 
   virtual ~base_graphics_event (void) = default;
 
+  int get_busyaction (void) { return m_busyaction; };
+
   virtual void execute (void) = 0;
+
+ private:
+  int m_busyaction;
 };
 
 class
 graphics_event
 {
 public:
 
   typedef void (*event_fcn) (void*);
@@ -6045,33 +6057,43 @@ public:
   graphics_event (base_graphics_event *new_rep) : rep (new_rep) { }
 
   graphics_event (const graphics_event&) = default;
 
   ~graphics_event (void) = default;
 
   graphics_event& operator = (const graphics_event&) = default;
 
+  int get_busyaction (void)
+  {
+    if (ok ())
+      return rep->get_busyaction ();
+    else
+      error ("graphics_event::busyaction: invalid graphics_event");
+  }
+
   void execute (void)
   {
     if (ok ())
       rep->execute ();
   }
 
   bool ok (void) const { return (rep != nullptr); }
 
   static graphics_event
   create_callback_event (const graphics_handle& h,
                          const std::string& name,
-                         const octave_value& data = Matrix ());
+                         const octave_value& data = Matrix (),
+                         int busyaction = base_graphics_event::QUEUE);
 
   static graphics_event
   create_callback_event (const graphics_handle& h,
                          const octave_value& cb,
-                         const octave_value& data = Matrix ());
+                         const octave_value& data = Matrix (),
+                         int busyaction = base_graphics_event::QUEUE);
 
   static graphics_event
   create_function_event (event_fcn fcn, void *data = nullptr);
 
   static graphics_event
   create_set_event (const graphics_handle& h, const std::string& name,
                     const octave_value& value,
                     bool notify_toolkit = true);
