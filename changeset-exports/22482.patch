# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473875625 25200
#      Wed Sep 14 10:53:45 2016 -0700
# Node ID ea8d53084b062d4f88e95447166443a87cb56750
# Parent  9263b2889003a90f0a5480053e0254d4d9ba2d51
external.txi: Fix typo 'useless' -> 'unless'.

* external.txi: Fix typo 'useless' -> 'unless'.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -610,18 +610,18 @@ returns the number of nonzero elements. 
 number of elements in the matrix, including the nonzero elements, they
 should use @code{numel} rather than @code{nelem}.  Note that for very
 large matrices, where the product of the two dimensions is larger than
 the representation of an unsigned int, then @code{numel} can overflow.
 An example is @code{speye (1e6)} which will create a matrix with a million
 rows and columns, but only a million nonzero elements.  Therefore the
 number of rows by the number of columns in this case is more than two
 hundred times the maximum value that can be represented by an unsigned int.
-The use of @code{numel} should therefore be avoided useless it is known
-it won't overflow.
+The use of @code{numel} should therefore be avoided unless it is known
+that it will not overflow.
 
 Extreme care must be take with the elem method and the @qcode{"()"} operator,
 which perform basically the same function.  The reason is that if a
 sparse object is non-const, then Octave will assume that a
 request for a zero element in a sparse matrix is in fact a request
 to create this element so it can be filled.  Therefore a piece of
 code like
 
