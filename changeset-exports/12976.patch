# HG changeset patch
# User Daniel Kraft <d@domob.eu>
# Date 1313685838 -7200
#      Thu Aug 18 18:43:58 2011 +0200
# Node ID 2e20c26b10075fe6521d5884a9fe27e01e6f1f91
# Parent  6590446c2498ab12e775bfeaa06d34d6cfccbd04
Document the profiler functions.

debug.txi: Document profile and profshow in the manual.

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -30,16 +30,17 @@ The normal command-line editing and hist
 debug mode.
 
 @menu
 * Entering Debug Mode::
 * Leaving Debug Mode::
 * Breakpoints::
 * Debug Mode::
 * Call Stack::
+* Profiling::
 @end menu
 
 @node Entering Debug Mode
 @section Entering Debug Mode
 
 There are two basic means of interrupting the execution of an Octave
 script.  These are breakpoints @pxref{Breakpoints}, discussed in the next
 section and interruption based on some condition.
@@ -177,8 +178,49 @@ the commands @code{dbstep}.
 @node Call Stack
 @section Call Stack
 
 @DOCSTRING(dbstack)
 
 @DOCSTRING(dbup)
 
 @DOCSTRING(dbdown)
+
+@node Profiling
+@section Profiling
+@cindex profiler
+@cindex code profiling
+
+Octave supports profiling of code-execution on a per-function level.  If
+profiling is enabled, each call to a function (supporting built-ins,
+operators, functions in oct- and mex- files, user-defined functions
+in Octave code and anonymous functions) is recorded while running
+Octave code.  After that, this data can aid in analyzing the code-behaviour,
+and is in particular helpful for finding ``hot spots'' in the code
+which use up a lot of computation time and are the best targets to spend
+optimization efforts on.
+
+The main command for profiling is @code{profile}, which can be used
+to start / stop the profiler and also to query collected data afterwards.
+The data is returned in an Octave data-structure which can then be
+examined or further processed by other routines or tools.
+
+@DOCSTRING(profile)
+
+An easy way to get an overview over the collected data is @code{profshow}.
+This function takes the profiler-data returned by @code{profile} as input
+and prints a flat profile, for instance:
+
+@example
+ Function Attr     Time (s)        Calls
+----------------------------------------
+   >myfib    R        2.195        13529
+binary <=             0.061        13529
+ binary -             0.050        13528
+ binary +             0.026         6764
+@end example
+
+This shows that most of the runtime was spent executing the function
+@samp{myfib}, and some minor proportion evaluating the listed binary operators.
+Furthermore, it is shown how often the function was called and the profiler
+also found out that it is recursive.
+
+@DOCSTRING(profshow)
