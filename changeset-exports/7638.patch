# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1206488841 14400
#      Tue Mar 25 19:47:21 2008 -0400
# Node ID 2df457529cfacdb4ffc2a030e54869ccef31253b
# Parent  2be056f037208d70eb7890a0c8995f4a42c07e83
implement expm1 and log1p functions

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-25  Jaroslav Hajek <highegg@gmail.com>
+
+	* configure.in: Check for expm1 and log1p functions.
+
 2008-03-25  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Check for trunc.
 
 2008-03-21  David Bateman  <dbateman@free.fr>
 
 	* configure.in (HAVE_AMD): Complete test for presence of amd.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -1308,25 +1308,26 @@ if test "$have_fnmatch_h" = yes && test 
     AC_MSG_ERROR([You are required to have fnmatch and glob])
   fi
 else
   AC_MSG_ERROR([You are required to have fnmatch.h and glob.h])
 fi
 
 ### Checks for functions and variables.
 
-AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name chmod \
-  dup2 endgrent endpwent execvp fcntl fork getcwd getegid geteuid \
-  getgid getgrent getgrgid getgrnam getpgrp getpid getppid getpwent \
-  getpwuid gettimeofday getuid getwd _kbhit kill lgamma lgamma_r link \
-  localtime_r lstat memmove mkdir mkfifo mkstemp on_exit pipe poll putenv \
-  raise readlink realpath rename resolvepath rindex rmdir round select \
-  setgrent setlocale setpwent setvbuf sigaction siglongjmp sigpending \
-  sigprocmask sigsuspend snprintf stat strcasecmp strdup strerror stricmp \
-  strncasecmp strnicmp strptime strsignal symlink tempnam tgamma trunc umask \
+AC_CHECK_FUNCS(atexit basename bcopy bzero canonicalize_file_name \
+  chmod dup2 endgrent endpwent execvp expm1 fcntl fork getcwd \
+  getegid geteuid getgid getgrent getgrgid getgrnam getpgrp getpid \
+  getppid getpwent getpwuid gettimeofday getuid getwd _kbhit kill \
+  lgamma lgamma_r link localtime_r log1p lstat memmove mkdir mkfifo \
+  mkstemp on_exit pipe poll putenv raise readlink realpath rename \
+  resolvepath rindex rmdir round select setgrent setlocale setpwent \
+  setvbuf sigaction siglongjmp sigpending sigprocmask sigsuspend \
+  snprintf stat strcasecmp strdup strerror stricmp strncasecmp \
+  strnicmp strptime strsignal symlink tempnam tgamma trunc umask \
   uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
   _chmod _snprintf x_utime _utime32)
 
 case "$canonical_host_type" in
   *-*-msdosmsvc)
     ## The %T format specifier for strftime is reportedly broken,
     ## so use our version.  We could use an actual configure test
     ## for this.
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -43,34 +43,40 @@ each element of the matrix.
 @DOCSTRING(ceil)
 
 @DOCSTRING(cplxpair)
 
 @DOCSTRING(del2)
 
 @DOCSTRING(exp)
 
+@DOCSTRING(expm1)
+
 @DOCSTRING(factor)
 
 @DOCSTRING(factorial)
 
 @DOCSTRING(fix)
 
 @DOCSTRING(floor)
 
 @DOCSTRING(fmod)
 
 @DOCSTRING(gcd)
 
 @DOCSTRING(gradient)
 
+@DOCSTRING(hypot)
+
 @DOCSTRING(lcm)
 
 @DOCSTRING(log)
 
+@DOCSTRING(log1p)
+
 @DOCSTRING(log10)
 
 @DOCSTRING(log2)
 
 @DOCSTRING(max)
 
 @DOCSTRING(min)
 
@@ -83,16 +89,18 @@ each element of the matrix.
 @DOCSTRING(pow2)
 
 @DOCSTRING(primes)
 
 @DOCSTRING(rem)
 
 @DOCSTRING(round)
 
+@DOCSTRING(roundb)
+
 @DOCSTRING(sign)
 
 @DOCSTRING(sqrt)
 
 @node Complex Arithmetic
 @section Complex Arithmetic
 
 The following functions are available for working with complex
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -659,16 +659,18 @@ After this the directory @samp{~/Octave}
 @DOCSTRING(pathdef)
 
 @DOCSTRING(pathsep)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
+@DOCSTRING(restoredefaultpath)
+
 @node Subfunctions
 @subsection Subfunctions
 
 A function file may contain secondary functions called
 @dfn{subfunctions}.  These secondary functions are only visible to the
 other functions in the same function file.  For example, a file
 @file{f.m} containing
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -117,22 +117,30 @@ flag a non-Hermitian matrix.
 @section Matrix Factorizations
 
 @DOCSTRING(chol)
 
 @DOCSTRING(cholinv)
 
 @DOCSTRING(chol2inv)
 
+@DOCSTRING(cholupdate)
+
 @DOCSTRING(hess)
 
 @DOCSTRING(lu)
 
 @DOCSTRING(qr)
 
+@DOCSTRING(qrupdate)
+
+@DOCSTRING(qrinsert)
+
+@DOCSTRING(qrdelete)
+
 @DOCSTRING(qz)
 
 @DOCSTRING(qzhess)
 
 @DOCSTRING(schur)
 
 @DOCSTRING(svd)
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -628,16 +628,18 @@ endfunction
 
 The following functions are available for determining the type of a
 variable.
 
 @DOCSTRING(isnumeric)
 
 @DOCSTRING(isreal)
 
+@DOCSTRING(isfloat)
+
 @DOCSTRING(iscomplex)
 
 @DOCSTRING(ismatrix)
 
 @DOCSTRING(isvector)
 
 @DOCSTRING(isscalar)
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -8,16 +8,19 @@ 2008-03-25  David Bateman  <dbateman@fre
 
 2008-03-25  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.cc (xtrunc): New function.
 	* lo-mappers.h: Provide decl.
 
 2008-03-25  Jaroslav Hajek  <highegg@gmail.com>
 
+	* lo-specfun.cc (expm1, log1p): New functions.
+	* lo-specfun.h: Provide decls.
+
 	* lo-mappers.cc (xroundb): New function.
 	* lo-mappers.h: Provide decl.
 
 2008-03-23  David Bateman  <dbateman@free.fr>
 
 	* mx-ops: Definite binary operators for mixed integer array +
 	array case, except for 64bit cases.
 	
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -219,16 +219,114 @@ xlgamma (const Complex& xc)
 #endif
 
   if (sgngam < 0)
     return result + Complex (0., M_PI);
   else
     return result;
 }
 
+#if !defined (HAVE_EXPM1)
+double
+expm1 (double x)
+{
+  double retval;
+
+  double ax = fabs (x);
+
+  if (ax < 0.1)
+    {
+      ax /= 16;
+
+      // use Taylor series to calculate exp(x)-1.
+      double t = ax;
+      double s = 0; 
+      for (int i = 2; i < 7; i++)
+        s += (t *= ax/i);
+      s += ax;
+
+      // use the identity (a+1)^2-1 = a*(a+2)
+      double e = s;
+      for (int i = 0; i < 4; i++)
+        {
+          s *= e + 2;
+          e *= e + 2;
+        }
+
+      retval = (x > 0) ? s : -s / (1+s);
+    }
+  else
+    retval = exp (x) - 1;
+
+  return retval;
+}
+#endif
+
+Complex 
+expm1(const Complex& x)
+{
+  Complex retval;
+
+  if (std:: abs (x) < 1)
+    {
+      double im = x.imag();
+      double u = expm1 (x.real ());
+      double v = sin (im/2);
+      v = -2*v*v;
+      retval = Complex (u*v + u + v, (u+1) * sin (im));
+    }
+  else
+    retval = std::exp (x) - Complex (1);
+
+  return retval;
+}
+
+#if !defined (HAVE_LOG1P)
+double
+log1p (double x)
+{
+  double retval;
+
+  double ax = fabs (x);
+
+  if (ax < 0.2)
+    {
+      // use approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
+      double u = x / (2 + x), t = 1, s = 0;
+      for (int i = 2; i < 12; i += 2)
+        s += (t *= u*u) / (i+1);
+
+      retval = 2 * (s + 1) * u;
+    }
+  else
+    retval = log (1 + x);
+
+  return retval;
+}
+#endif
+
+Complex 
+log1p (const Complex& x)
+{
+  Complex retval;
+
+  double r = x.real (), i = x.imag();
+
+  if (fabs (r) < 0.5 && fabs (i) < 0.5)
+    {
+      double u = 2*r + r*r + i*i;
+      retval = Complex (log1p (u / (1+sqrt (u+1))),
+			atan2 (1 + r, i));
+    }
+  else
+    retval = std::log (Complex(1) + x);
+
+  return retval;
+}
+
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesy (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesi (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -52,16 +52,26 @@ extern OCTAVE_API double atanh (double);
 #if !defined (HAVE_ERF)
 extern OCTAVE_API double erf (double);
 #endif
 
 #if !defined (HAVE_ERFC)
 extern OCTAVE_API double erfc (double);
 #endif
 
+#if !defined (HAVE_EXPM1)
+extern OCTAVE_API double expm1 (double x);
+#endif
+extern OCTAVE_API Complex expm1 (const Complex& x);
+
+#if !defined (HAVE_LOG1P)
+extern OCTAVE_API double log1p (double x);
+#endif
+extern OCTAVE_API Complex log1p (const Complex& x);
+
 extern OCTAVE_API double xgamma (double x);
 extern OCTAVE_API double xlgamma (double x);
 extern OCTAVE_API Complex xlgamma (const Complex& x);
 
 extern OCTAVE_API Complex
 besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,19 @@
 2008-03-25  Jaroslav Hajek  <highegg@gmail.com>
 
-	* mappers.cc (Froundb): New function.
+	* mappers.cc (Fexpm1, Flog1p): New functions.
+	* ov-base.cc, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h,
+	ov-bool.h, ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
+	ov-cx-sparse.cc, ov-cx-sparse.h, ov-range.h, ov-re-mat.cc,
+	ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h, ov-scalar.cc,
+	ov-scalar.h, ov.h:
+	Provide expm1 and log1p functions.
+
+	* mappers.cc (Froundb): New functions
 	* ov-base.cc, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h,
 	ov-bool.h, ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
 	ov-cx-sparse.cc, ov-cx-sparse.h, ov-intx.h, ov-range.h,
 	ov-re-mat.cc, ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h,
 	ov-scalar.cc, ov-scalar.h, ov.h:
  	Provide roundb mapper function.
 
 2008-03-25  Jaroslav Hajek <highegg@gmail.com>
@@ -730,17 +738,17 @@ 2008-01-31  David Bateman  <dbateman@fre
 	
 	* TEMPLATE-INST/Array-tc.cc: Instantiate the array sort methods.
 	* ov-streamoff.h (sort): Sort versions returning and error.
 	* oct-stream.cc, ov-typeinfo.cc, Array-os.cc: Null instantiation
 	of array sort methods.
 	
 	* Makefile.in (DLD_XSRC): Remove sort.cc
 	* DLD-FUNCTIONS/sort.cc: Remove
-	* data.cc (Fdata): New function using octave_value sort methods
+	* data.cc (Fsort): New function using octave_value sort methods
 	for the sorting. Add tests.
 
 2008-01-30  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* pager.cc (Fmore): Doc fix.
 
 2008-01-28  Michael Goffioul <michael.goffioul@gmail.com>
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -358,16 +358,31 @@ see @ref{Linear Algebra}.\n\
   if (args.length () == 1)
     retval = args(0).exp ();
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (expm1, args, ,
+    "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} expm1 (@var{x})\n\
+Compute exp (@var{x}) - 1 accurately in neighbourhood of zero.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  if (args.length () == 1)
+    retval = args(0).expm1 ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (finite, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} finite (@var{x})\n\
 Return 1 for elements of @var{x} that are finite values and zero\n\
 otherwise. For example,\n\
 \n\
 @example\n\
 @group\n\
@@ -766,16 +781,31 @@ Compute the base-10 logarithm for each e
   if (args.length () == 1)
     retval = args(0).log10 ();
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (log1p, args, ,
+    "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} log1p (@var{x})\n\
+Compute log (1 + @var{x}) accurately in neighbourhood of zero.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  if (args.length () == 1)
+    retval = args(0).log1p ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (real, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} real (@var{z})\n\
 Return the real part of @var{z}.\n\
 @seealso{imag, conj}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -922,27 +922,29 @@ UNDEFINED_MAPPER (atan)
 UNDEFINED_MAPPER (atanh)
 UNDEFINED_MAPPER (ceil)
 UNDEFINED_MAPPER (conj)
 UNDEFINED_MAPPER (cos)
 UNDEFINED_MAPPER (cosh)
 UNDEFINED_MAPPER (erf)
 UNDEFINED_MAPPER (erfc)
 UNDEFINED_MAPPER (exp)
+UNDEFINED_MAPPER (expm1)
 UNDEFINED_MAPPER (finite)
 UNDEFINED_MAPPER (fix)
 UNDEFINED_MAPPER (floor)
 UNDEFINED_MAPPER (gamma)
 UNDEFINED_MAPPER (imag)
 UNDEFINED_MAPPER (isinf)
 UNDEFINED_MAPPER (isna)
 UNDEFINED_MAPPER (isnan)
 UNDEFINED_MAPPER (lgamma)
 UNDEFINED_MAPPER (log)
 UNDEFINED_MAPPER (log10)
+UNDEFINED_MAPPER (log1p)
 UNDEFINED_MAPPER (real)
 UNDEFINED_MAPPER (round)
 UNDEFINED_MAPPER (roundb)
 UNDEFINED_MAPPER (signum)
 UNDEFINED_MAPPER (sin)
 UNDEFINED_MAPPER (sinh)
 UNDEFINED_MAPPER (sqrt)
 UNDEFINED_MAPPER (tan)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -483,27 +483,29 @@ public:
   virtual octave_value atanh (void) const;
   virtual octave_value ceil (void) const;
   virtual octave_value conj (void) const;
   virtual octave_value cos (void) const;
   virtual octave_value cosh (void) const;
   virtual octave_value erf (void) const;
   virtual octave_value erfc (void) const;
   virtual octave_value exp (void) const;
+  virtual octave_value expm1 (void) const;
   virtual octave_value finite (void) const;
   virtual octave_value fix (void) const;
   virtual octave_value floor (void) const;
   virtual octave_value gamma (void) const;
   virtual octave_value imag (void) const;
   virtual octave_value isinf (void) const;
   virtual octave_value isna (void) const;
   virtual octave_value isnan (void) const;
   virtual octave_value lgamma (void) const;
   virtual octave_value log (void) const;
   virtual octave_value log10 (void) const;
+  virtual octave_value log1p (void) const;
   virtual octave_value real (void) const;
   virtual octave_value round (void) const;
   virtual octave_value roundb (void) const;
   virtual octave_value signum (void) const;
   virtual octave_value sin (void) const;
   virtual octave_value sinh (void) const;
   virtual octave_value sqrt (void) const;
   virtual octave_value tan (void) const;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -203,27 +203,29 @@ public:
   BOOL_MAT_MAPPER (atanh)
   BOOL_MAT_MAPPER (ceil)
   BOOL_MAT_MAPPER (conj)
   BOOL_MAT_MAPPER (cos)
   BOOL_MAT_MAPPER (cosh)
   BOOL_MAT_MAPPER (erf)
   BOOL_MAT_MAPPER (erfc)
   BOOL_MAT_MAPPER (exp)
+  BOOL_MAT_MAPPER (expm1)
   BOOL_MAT_MAPPER (finite)
   BOOL_MAT_MAPPER (fix)
   BOOL_MAT_MAPPER (floor)
   BOOL_MAT_MAPPER (gamma)
   BOOL_MAT_MAPPER (imag)
   BOOL_MAT_MAPPER (isinf)
   BOOL_MAT_MAPPER (isna)
   BOOL_MAT_MAPPER (isnan)
   BOOL_MAT_MAPPER (lgamma)
   BOOL_MAT_MAPPER (log)
   BOOL_MAT_MAPPER (log10)
+  BOOL_MAT_MAPPER (log1p)
   BOOL_MAT_MAPPER (real)
   BOOL_MAT_MAPPER (round)
   BOOL_MAT_MAPPER (roundb)
   BOOL_MAT_MAPPER (signum)
   BOOL_MAT_MAPPER (sin)
   BOOL_MAT_MAPPER (sinh)
   BOOL_MAT_MAPPER (sqrt)
   BOOL_MAT_MAPPER (tan)
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -159,27 +159,29 @@ public:
   BOOL_SPARSE_MAPPER (atanh)
   BOOL_SPARSE_MAPPER (ceil)
   BOOL_SPARSE_MAPPER (conj)
   BOOL_SPARSE_MAPPER (cos)
   BOOL_SPARSE_MAPPER (cosh)
   BOOL_SPARSE_MAPPER (erf)
   BOOL_SPARSE_MAPPER (erfc)
   BOOL_SPARSE_MAPPER (exp)
+  BOOL_SPARSE_MAPPER (expm1)
   BOOL_SPARSE_MAPPER (finite)
   BOOL_SPARSE_MAPPER (fix)
   BOOL_SPARSE_MAPPER (floor)
   BOOL_SPARSE_MAPPER (gamma)
   BOOL_SPARSE_MAPPER (imag)
   BOOL_SPARSE_MAPPER (isinf)
   BOOL_SPARSE_MAPPER (isna)
   BOOL_SPARSE_MAPPER (isnan)
   BOOL_SPARSE_MAPPER (lgamma)
   BOOL_SPARSE_MAPPER (log)
   BOOL_SPARSE_MAPPER (log10)
+  BOOL_SPARSE_MAPPER (log1p)
   BOOL_SPARSE_MAPPER (real)
   BOOL_SPARSE_MAPPER (round)
   BOOL_SPARSE_MAPPER (roundb)
   BOOL_SPARSE_MAPPER (signum)
   BOOL_SPARSE_MAPPER (sin)
   BOOL_SPARSE_MAPPER (sinh)
   BOOL_SPARSE_MAPPER (sqrt)
   BOOL_SPARSE_MAPPER (tan)
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -211,27 +211,29 @@ public:
   BOOL_MAPPER (atanh)
   BOOL_MAPPER (ceil)
   BOOL_MAPPER (conj)
   BOOL_MAPPER (cos)
   BOOL_MAPPER (cosh)
   BOOL_MAPPER (erf)
   BOOL_MAPPER (erfc)
   BOOL_MAPPER (exp)
+  BOOL_MAPPER (expm1)
   BOOL_MAPPER (finite)
   BOOL_MAPPER (fix)
   BOOL_MAPPER (floor)
   BOOL_MAPPER (gamma)
   BOOL_MAPPER (imag)
   BOOL_MAPPER (isinf)
   BOOL_MAPPER (isna)
   BOOL_MAPPER (isnan)
   BOOL_MAPPER (lgamma)
   BOOL_MAPPER (log)
   BOOL_MAPPER (log10)
+  BOOL_MAPPER (log1p)
   BOOL_MAPPER (real)
   BOOL_MAPPER (round)
   BOOL_MAPPER (roundb)
   BOOL_MAPPER (signum)
   BOOL_MAPPER (sin)
   BOOL_MAPPER (sinh)
   BOOL_MAPPER (sqrt)
   BOOL_MAPPER (tan)
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -367,21 +367,23 @@ COMPLEX_MAPPER (asin, ::asin)
 COMPLEX_MAPPER (asinh, ::asinh)
 COMPLEX_MAPPER (atan, ::atan)
 COMPLEX_MAPPER (atanh, ::atanh)
 COMPLEX_MAPPER (ceil, ::ceil)
 COMPLEX_MAPPER (conj, std::conj)
 COMPLEX_MAPPER (cos, std::cos)
 COMPLEX_MAPPER (cosh, std::cosh)
 COMPLEX_MAPPER (exp, std::exp)
+COMPLEX_MAPPER (expm1, ::expm1)
 COMPLEX_MAPPER (fix, ::fix)
 COMPLEX_MAPPER (floor, ::floor)
 COMPLEX_MAPPER (imag, ximag)
 COMPLEX_MAPPER (log, std::log)
 COMPLEX_MAPPER (log10, std::log10)
+COMPLEX_MAPPER (log1p, ::log1p)
 COMPLEX_MAPPER (real, xreal)
 COMPLEX_MAPPER (round, xround)
 COMPLEX_MAPPER (roundb, xroundb)
 COMPLEX_MAPPER (signum, ::signum)
 COMPLEX_MAPPER (sin, std::sin)
 COMPLEX_MAPPER (sinh, std::sinh)
 COMPLEX_MAPPER (sqrt, std::sqrt)
 COMPLEX_MAPPER (tan, std::tan)
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -159,21 +159,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -687,21 +687,23 @@ ARRAY_MAPPER (asin, ComplexNDArray::cmap
 ARRAY_MAPPER (asinh, ComplexNDArray::cmapper, ::asinh)
 ARRAY_MAPPER (atan, ComplexNDArray::cmapper, ::atan)
 ARRAY_MAPPER (atanh, ComplexNDArray::cmapper, ::atanh)
 ARRAY_MAPPER (ceil, ComplexNDArray::cmapper, ::ceil)
 ARRAY_MAPPER (conj, ComplexNDArray::cmapper, std::conj)
 ARRAY_MAPPER (cos, ComplexNDArray::cmapper, std::cos)
 ARRAY_MAPPER (cosh, ComplexNDArray::cmapper, std::cosh)
 ARRAY_MAPPER (exp, ComplexNDArray::cmapper, std::exp)
+ARRAY_MAPPER (expm1, ComplexNDArray::cmapper, ::expm1)
 ARRAY_MAPPER (fix, ComplexNDArray::cmapper, ::fix)
 ARRAY_MAPPER (floor, ComplexNDArray::cmapper, ::floor)
 ARRAY_MAPPER (imag, ComplexNDArray::dmapper, ximag)
 ARRAY_MAPPER (log, ComplexNDArray::cmapper, std::log)
 ARRAY_MAPPER (log10, ComplexNDArray::cmapper, std::log10)
+ARRAY_MAPPER (log1p, ComplexNDArray::cmapper, ::log1p)
 ARRAY_MAPPER (real, ComplexNDArray::dmapper, xreal)
 ARRAY_MAPPER (round, ComplexNDArray::cmapper, xround)
 ARRAY_MAPPER (roundb, ComplexNDArray::cmapper, xroundb)
 ARRAY_MAPPER (signum, ComplexNDArray::cmapper, ::signum)
 ARRAY_MAPPER (sin, ComplexNDArray::cmapper, std::sin)
 ARRAY_MAPPER (sinh, ComplexNDArray::cmapper, std::sinh)
 ARRAY_MAPPER (sqrt, ComplexNDArray::cmapper, std::sqrt)
 ARRAY_MAPPER (tan, ComplexNDArray::cmapper, std::tan)
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -162,21 +162,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -856,21 +856,23 @@ SPARSE_MAPPER (asin, SparseComplexMatrix
 SPARSE_MAPPER (asinh, SparseComplexMatrix::cmapper, ::asinh)
 SPARSE_MAPPER (atan, SparseComplexMatrix::cmapper, ::atan)
 SPARSE_MAPPER (atanh, SparseComplexMatrix::cmapper, ::atanh)
 SPARSE_MAPPER (ceil, SparseComplexMatrix::cmapper, ::ceil)
 SPARSE_MAPPER (conj, SparseComplexMatrix::cmapper, std::conj)
 SPARSE_MAPPER (cos, SparseComplexMatrix::cmapper, std::cos)
 SPARSE_MAPPER (cosh, SparseComplexMatrix::cmapper, std::cosh)
 SPARSE_MAPPER (exp, SparseComplexMatrix::cmapper, std::exp)
+SPARSE_MAPPER (expm1, SparseComplexMatrix::cmapper, ::expm1)
 SPARSE_MAPPER (fix, SparseComplexMatrix::cmapper, ::fix)
 SPARSE_MAPPER (floor, SparseComplexMatrix::cmapper, ::floor)
 SPARSE_MAPPER (imag, SparseComplexMatrix::dmapper, ximag)
 SPARSE_MAPPER (log, SparseComplexMatrix::cmapper, std::log)
 SPARSE_MAPPER (log10, SparseComplexMatrix::cmapper, std::log10)
+SPARSE_MAPPER (log1p, SparseComplexMatrix::cmapper, ::log1p)
 SPARSE_MAPPER (real, SparseComplexMatrix::dmapper, xreal)
 SPARSE_MAPPER (round, SparseComplexMatrix::cmapper, xround)
 SPARSE_MAPPER (roundb, SparseComplexMatrix::cmapper, xroundb)
 SPARSE_MAPPER (signum, SparseComplexMatrix::cmapper, ::signum)
 SPARSE_MAPPER (sin, SparseComplexMatrix::cmapper, std::sin)
 SPARSE_MAPPER (sinh, SparseComplexMatrix::cmapper, std::sinh)
 SPARSE_MAPPER (sqrt, SparseComplexMatrix::cmapper, std::sqrt)
 SPARSE_MAPPER (tan, SparseComplexMatrix::cmapper, std::tan)
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -161,21 +161,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -286,27 +286,29 @@ public:
   RANGE_MAPPER (atanh)
   RANGE_MAPPER (ceil)
   RANGE_MAPPER (conj)
   RANGE_MAPPER (cos)
   RANGE_MAPPER (cosh)
   RANGE_MAPPER (erf)
   RANGE_MAPPER (erfc)
   RANGE_MAPPER (exp)
+  RANGE_MAPPER (expm1)
   RANGE_MAPPER (finite)
   RANGE_MAPPER (fix)
   RANGE_MAPPER (floor)
   RANGE_MAPPER (gamma)
   RANGE_MAPPER (imag)
   RANGE_MAPPER (isinf)
   RANGE_MAPPER (isna)
   RANGE_MAPPER (isnan)
   RANGE_MAPPER (lgamma)
   RANGE_MAPPER (log)
   RANGE_MAPPER (log10)
+  RANGE_MAPPER (log1p)
   RANGE_MAPPER (real)
   RANGE_MAPPER (round)
   RANGE_MAPPER (roundb)
   RANGE_MAPPER (signum)
   RANGE_MAPPER (sin)
   RANGE_MAPPER (sinh)
   RANGE_MAPPER (sqrt)
   RANGE_MAPPER (tan)
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -725,21 +725,23 @@ CD_ARRAY_MAPPER (asin, ::asin, ::asin, -
 ARRAY_MAPPER (asinh, NDArray::dmapper,::asinh)
 ARRAY_MAPPER (atan, NDArray::dmapper, ::atan)
 CD_ARRAY_MAPPER (atanh, ::atanh, ::atanh, -1.0, 1.0)
 ARRAY_MAPPER (ceil, NDArray::dmapper, ::ceil)
 ARRAY_MAPPER (conj, NDArray::dmapper, xconj)
 ARRAY_MAPPER (cos, NDArray::dmapper, ::cos)
 ARRAY_MAPPER (cosh, NDArray::dmapper, ::cosh)
 ARRAY_MAPPER (exp, NDArray::dmapper, ::exp)
+ARRAY_MAPPER (expm1, NDArray::dmapper, ::expm1)
 ARRAY_MAPPER (fix, NDArray::dmapper, ::fix)
 ARRAY_MAPPER (floor, NDArray::dmapper, ::floor)
 ARRAY_MAPPER (imag, NDArray::dmapper, ::imag)
 CD_ARRAY_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
+CD_ARRAY_MAPPER (log1p, ::log1p, ::log1p, -1.0, octave_Inf)
 ARRAY_MAPPER (real, NDArray::dmapper, ::real)
 ARRAY_MAPPER (round, NDArray::dmapper, xround)
 ARRAY_MAPPER (roundb, NDArray::dmapper, xroundb)
 ARRAY_MAPPER (signum, NDArray::dmapper, ::signum)
 ARRAY_MAPPER (sin, NDArray::dmapper, ::sin)
 ARRAY_MAPPER (sinh, NDArray::dmapper, ::sinh)
 CD_ARRAY_MAPPER (sqrt, ::sqrt, std::sqrt, 0.0, octave_Inf)
 ARRAY_MAPPER (tan, NDArray::dmapper, ::tan)
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -193,21 +193,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -915,21 +915,23 @@ CD_SPARSE_MAPPER (asin, ::asin, ::asin, 
 SPARSE_MAPPER (asinh, SparseMatrix::dmapper, ::asinh)
 SPARSE_MAPPER (atan, SparseMatrix::dmapper, ::atan)
 CD_SPARSE_MAPPER (atanh, ::atanh, ::atanh, -1.0, 1.0)
 SPARSE_MAPPER (ceil, SparseMatrix::dmapper, ::ceil)
 SPARSE_MAPPER (conj, SparseMatrix::dmapper, xconj)
 SPARSE_MAPPER (cos, SparseMatrix::dmapper, ::cos)
 SPARSE_MAPPER (cosh, SparseMatrix::dmapper, ::cosh)
 SPARSE_MAPPER (exp, SparseMatrix::dmapper, ::exp)
+SPARSE_MAPPER (expm1, SparseMatrix::dmapper, ::expm1)
 SPARSE_MAPPER (fix, SparseMatrix::dmapper, ::fix)
 SPARSE_MAPPER (floor, SparseMatrix::dmapper, ::floor)
 SPARSE_MAPPER (imag, SparseMatrix::dmapper, ::imag)
 CD_SPARSE_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
 CD_SPARSE_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
+CD_SPARSE_MAPPER (log1p, ::log1p, ::log1p, 0.0, octave_Inf)
 SPARSE_MAPPER (real, SparseMatrix::dmapper, ::real)
 SPARSE_MAPPER (round, SparseMatrix::dmapper, xround)
 SPARSE_MAPPER (roundb, SparseMatrix::dmapper, xroundb)
 SPARSE_MAPPER (signum, SparseMatrix::dmapper, ::signum)
 SPARSE_MAPPER (sin, SparseMatrix::dmapper, ::sin)
 SPARSE_MAPPER (sinh, SparseMatrix::dmapper, ::sinh)
 CD_SPARSE_MAPPER (sqrt, ::sqrt, std::sqrt, 0.0, octave_Inf)
 SPARSE_MAPPER (tan, SparseMatrix::dmapper, ::tan)
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -166,21 +166,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -320,21 +320,23 @@ CD_SCALAR_MAPPER (asin, ::asin, ::asin, 
 SCALAR_MAPPER (asinh, ::asinh)
 SCALAR_MAPPER (atan, ::atan)
 CD_SCALAR_MAPPER (atanh, ::atanh, ::atanh, -1.0, 1.0)
 SCALAR_MAPPER (ceil, ::ceil)
 SCALAR_MAPPER (conj, xconj)
 SCALAR_MAPPER (cos, ::cos)
 SCALAR_MAPPER (cosh, ::cosh)
 SCALAR_MAPPER (exp, ::exp)
+SCALAR_MAPPER (expm1, ::expm1)
 SCALAR_MAPPER (fix, ::fix)
 SCALAR_MAPPER (floor, ::floor)
 SCALAR_MAPPER (imag, ::imag)
 CD_SCALAR_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
 CD_SCALAR_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
+CD_SCALAR_MAPPER (log1p, ::log1p, ::log1p, -1.0, octave_Inf)
 SCALAR_MAPPER (real, ::real)
 SCALAR_MAPPER (round, xround)
 SCALAR_MAPPER (roundb, xroundb)
 SCALAR_MAPPER (signum, ::signum)
 SCALAR_MAPPER (sin, ::sin)
 SCALAR_MAPPER (sinh, ::sinh)
 CD_SCALAR_MAPPER (sqrt, ::sqrt, std::sqrt, 0.0, octave_Inf)
 SCALAR_MAPPER (tan, ::tan)
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -234,21 +234,23 @@ public:
   octave_value asinh (void) const;
   octave_value atan (void) const;
   octave_value atanh (void) const;
   octave_value ceil (void) const;
   octave_value conj (void) const;
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
+  octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
   octave_value log10 (void) const;
+  octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
   octave_value sqrt (void) const;
   octave_value tan (void) const;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -897,27 +897,29 @@ public:
   MAPPER_FORWARD (atanh)
   MAPPER_FORWARD (ceil)
   MAPPER_FORWARD (conj)
   MAPPER_FORWARD (cos)
   MAPPER_FORWARD (cosh)
   MAPPER_FORWARD (erf)
   MAPPER_FORWARD (erfc)
   MAPPER_FORWARD (exp)
+  MAPPER_FORWARD (expm1)
   MAPPER_FORWARD (finite)
   MAPPER_FORWARD (fix)
   MAPPER_FORWARD (floor)
   MAPPER_FORWARD (gamma)
   MAPPER_FORWARD (imag)
   MAPPER_FORWARD (isinf)
   MAPPER_FORWARD (isna)
   MAPPER_FORWARD (isnan)
   MAPPER_FORWARD (lgamma)
   MAPPER_FORWARD (log)
   MAPPER_FORWARD (log10)
+  MAPPER_FORWARD (log1p)
   MAPPER_FORWARD (real)
   MAPPER_FORWARD (round)
   MAPPER_FORWARD (roundb)
   MAPPER_FORWARD (signum)
   MAPPER_FORWARD (sin)
   MAPPER_FORWARD (sinh)
   MAPPER_FORWARD (sqrt)
   MAPPER_FORWARD (tan)
