# HG changeset patch
# User jwe
# Date 1037069571 0
#      Tue Nov 12 02:52:51 2002 +0000
# Node ID aae05d51353cb66a44ceac8d26af98501008ab8c
# Parent  1297e388830f3e116e37b1a9cc3354954cd283e2
[project @ 2002-11-12 02:52:50 by jwe]

diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -14,24 +14,25 @@ VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SUB_SOURCE := arith.txi audio.txi basics.txi bugs.txi \
-	container.txi control.txi cp-idx.txi data.txi diffeq.txi \
-	emacs.txi errors.txi eval.txi expr.txi finance.txi \
-	fn-idx.txi func.txi gpl.txi grammar.txi image.txi \
-	install.txi intro.txi io.txi linalg.txi matrix.txi \
-	nonlin.txi numbers.txi op-idx.txi optim.txi plot.txi \
-	poly.txi preface.txi quad.txi quaternion.txi set.txi \
-	signal.txi stats.txi stmt.txi stream.txi strings.txi \
-	struct.txi system.txi tips.txi var.txi vr-idx.txi
+	container.txi control.txi cp-idx.txi data.txi \
+	debug.txi diffeq.txi emacs.txi errors.txi eval.txi \
+	expr.txi finance.txi fn-idx.txi func.txi gpl.txi \
+	grammar.txi image.txi install.txi intro.txi io.txi \
+	linalg.txi matrix.txi nonlin.txi numbers.txi \
+	op-idx.txi optim.txi plot.txi poly.txi preface.txi \
+	quad.txi quaternion.txi set.txi signal.txi stats.txi \
+	stmt.txi stream.txi strings.txi struct.txi system.txi \
+	tips.txi var.txi vr-idx.txi
 
 SOURCES := $(SUB_SOURCE)
 
 MAIN_TEXINFO := $(srcdir)/octave.texi
 
 SUB_TEXINFO := $(SUB_SOURCE:.txi=.texi)
 
 TEXINFO := $(MAIN_TEXINFO) $(SUB_TEXINFO)
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Arithmetic, Linear Algebra, Matrix Manipulation, Top
+@node Arithmetic
 @chapter Arithmetic
 
 Unless otherwise noted, all of the functions described in this chapter
 will work for real and complex scalar or matrix arguments.
 
 @menu
 * Utility Functions::           
 * Complex Arithmetic::          
diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -1,14 +1,14 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/14
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Audio Processing, Quaternions, Image Processing, Top
+@node Audio Processing
 @chapter Audio Processing
 
 Octave provides a few functions for dealing with audio data.  An audio
 `sample' is a single output value from an A/D converter, i.e., a small
 integer number (usually 8 or 16 bits), and audio data is just a series
 of such samples.  It can be characterized by three parameters:  the
 sampling rate (measured in samples per second or Hz, e.g. 8000 or
 44100), the number of bits per sample (e.g. 8 or 16), and the number of
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Getting Started, Data Types, Introduction, Top
+@node Getting Started
 @chapter Getting Started
 
 This chapter explains some of Octave's basic features, including how to
 start an Octave session, get help at the command prompt, edit the
 command line, and write Octave programs that can be executed as commands
 from your shell.
 
 @menu
@@ -15,17 +15,17 @@ from your shell.
 * Quitting Octave::             
 * Getting Help::                
 * Command Line Editing::        
 * Errors::                      
 * Executable Octave Programs::  
 * Comments::                    
 @end menu
 
-@node Invoking Octave, Quitting Octave, Getting Started, Getting Started
+@node Invoking Octave
 @section Invoking Octave
 
 Normally, Octave is used interactively by running the program
 @samp{octave} without any arguments.  Once started, Octave reads
 commands from the terminal until you tell it to exit.
 
 You can also specify the name of a file on the command line, and Octave
 will read and execute the commands from the named file and then exit
@@ -37,17 +37,17 @@ of the options available.  Type @samp{oc
 available options and briefly describe their use (@samp{octave -h} is a
 shorter equivalent).
 
 @menu
 * Command Line Options::        
 * Startup Files::               
 @end menu
 
-@node Command Line Options, Startup Files, Invoking Octave, Invoking Octave
+@node Command Line Options
 @subsection Command Line Options
 @cindex Octave command options
 @cindex command options
 @cindex options, Octave command
 
 Here is a complete list of all the command line options that Octave
 accepts.
 
@@ -208,17 +208,17 @@ endfor
 printf ("\n");
 @end example
 
 @noindent
 @xref{Index Expressions}, for an explanation of how to properly index
 arrays of strings and substrings in Octave, and @xref{Defining Functions},
 for information about the variable @code{nargin}.
 
-@node Startup Files,  , Command Line Options, Invoking Octave
+@node Startup Files
 @subsection Startup Files
 @cindex initialization
 @cindex startup
 
 When Octave starts, it looks for commands to execute from the following
 files:
 
 @cindex startup files
@@ -260,26 +260,26 @@ If you start Octave in your home directo
 
 A message will be displayed as each of the startup files is read if you
 invoke Octave with the @code{--verbose} option but without the
 @code{--silent} option.
 
 Startup files may contain any valid Octave commands, including function
 definitions.
 
-@node Quitting Octave, Getting Help, Invoking Octave, Getting Started
+@node Quitting Octave
 @section Quitting Octave
 @cindex exiting octave
 @cindex quitting octave
 
 @DOCSTRING(quit)
 
 @DOCSTRING(atexit)
 
-@node Getting Help, Command Line Editing, Quitting Octave, Getting Started
+@node Getting Help
 @section Commands for Getting Help
 @cindex on-line help
 @cindex help, on-line
 
 The entire text of this manual is available from the Octave prompt
 via the command @kbd{help -i}.  In addition, the documentation for
 individual user-written functions and variables is also available via
 the @kbd{help} command.  This section describes the commands used for
@@ -296,17 +296,17 @@ for those, you must type @kbd{help comma
 @DOCSTRING(INFO_FILE)
 
 @DOCSTRING(INFO_PROGRAM)
 
 @DOCSTRING(MAKEINFO_PROGRAM)
 
 @DOCSTRING(suppress_verbose_help_message)
 
-@node Command Line Editing, Errors, Getting Help, Getting Started
+@node Command Line Editing
 @section Command Line Editing
 @cindex command-line editing
 @cindex editing the command line
 
 Octave uses the GNU readline library to provide an extensive set of
 command-line editing and history features.  Only the most common
 features are described in this manual.  Please see The GNU Readline
 Library manual for more information.
@@ -337,17 +337,17 @@ characters such as @kbd{Meta-u} are writ
 * Commands For Text::           
 * Commands For Completion::     
 * Commands For History::        
 * Customizing readline::        
 * Customizing the Prompt::      
 * Diary and Echo Commands::     
 @end menu
 
-@node Cursor Motion, Killing and Yanking, Command Line Editing, Command Line Editing
+@node Cursor Motion
 @subsection Cursor Motion
 
 The following commands allow you to position the cursor.
 
 @table @kbd
 @item C-b
 Move back one character.
 
@@ -396,17 +396,17 @@ operate on characters while meta keystro
 
 There is also a function available so that you can clear the screen from
 within Octave programs.
 
 @cindex clearing the screen
 
 @DOCSTRING(clc)
 
-@node Killing and Yanking, Commands For Text, Cursor Motion, Command Line Editing
+@node Killing and Yanking
 @subsection Killing and Yanking
 
 @dfn{Killing} text means to delete the text from the line, but to save
 it away for later use, usually by @dfn{yanking} it back into the line.
 If the description for a command says that it `kills' text, then you can
 be sure that you can get the text back in a different (or the same)
 place later.
 
@@ -443,17 +443,17 @@ the prior command is @kbd{C-y} or @kbd{M
 
 When you use a kill command, the text is saved in a @dfn{kill-ring}.
 Any number of consecutive kills save all of the killed text together, so
 that when you yank it back, you get it in one clean sweep.  The kill
 ring is not line specific; the text that you killed on a previously
 typed line is available to be yanked back later, when you are typing
 another line.
 
-@node Commands For Text, Commands For Completion, Killing and Yanking, Command Line Editing
+@node Commands For Text
 @subsection Commands For Changing Text
 
 The following commands can be used for entering characters that would
 otherwise have a special meaning (e.g., @kbd{TAB}, @kbd{C-q}, etc.), or
 for quickly correcting typing mistakes.
 
 @table @kbd
 @item C-q
@@ -482,17 +482,17 @@ Lowecase the characters following the cu
 (or following) word, moving the cursor to the end of the word.
 
 @item M-c
 Uppercase the character following the cursor (or the beginning of the
 next word if the cursor is between words), moving the cursor to the end
 of the word.
 @end table
 
-@node Commands For Completion, Commands For History, Commands For Text, Command Line Editing
+@node Commands For Completion
 @subsection Letting Readline Type For You
 @cindex command completion
 
 The following commands allow Octave to complete command and variable
 names for you.
 
 @table @kbd
 @item @key{TAB}
@@ -502,17 +502,17 @@ complete the names of commands and varia
 @item M-?
 List the possible completions of the text before the cursor.
 @end table
 
 @DOCSTRING(completion_append_char)
 
 @DOCSTRING(completion_matches)
 
-@node Commands For History, Customizing readline, Commands For Completion, Command Line Editing
+@node Commands For History
 @subsection Commands For Manipulating The History
 @cindex command history
 @cindex input history
 @cindex history of commands
 
 Octave normally keeps track of the commands you type so that you can
 recall previous commands to edit or execute them again.  When you exit
 Octave, the most recent commands you have typed, up to the number
@@ -567,24 +567,24 @@ re-running chunks of commands from the h
 @DOCSTRING(EDITOR)
 
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
 @DOCSTRING(saving_history)
 
-@node Customizing readline, Customizing the Prompt, Commands For History, Command Line Editing
+@node Customizing readline
 @subsection Customizing @code{readline}
 
 @c XXX FIXME XXX -- need a brief description of the ~/.inputrc file here.
 
 @DOCSTRING(read_readline_init_file)
 
-@node Customizing the Prompt, Diary and Echo Commands, Customizing readline, Command Line Editing
+@node Customizing the Prompt
 @subsection Customizing the Prompt
 @cindex prompt customization
 @cindex customizing the prompt
 
 The following variables are available for customizing the appearance of
 the command-line prompts.  Octave allows the prompt to be customized by
 inserting a number of backslash-escaped special characters that are
 decoded as follows:
@@ -636,17 +636,17 @@ A backslash.
 @end table
 
 @DOCSTRING(PS1)
 
 @DOCSTRING(PS2)
 
 @DOCSTRING(PS4)
 
-@node Diary and Echo Commands,  , Customizing the Prompt, Command Line Editing
+@node Diary and Echo Commands
 @subsection Diary and Echo Commands
 @cindex diary of commands and output
 @cindex command and ouput logs
 @cindex logging commands and output
 @cindex echoing executing commands
 @cindex command echoing
 
 Octave's diary feature allows you to keep a log of all or part of an
@@ -658,17 +658,17 @@ Octave produces in a separate file.
 Sometimes it is useful to see the commands in a function or script as
 they are being evaluated.  This can be especially helpful for debugging
 some kinds of problems.
 
 @DOCSTRING(echo)
 
 @DOCSTRING(echo_executing_commands)
 
-@node Errors, Executable Octave Programs, Command Line Editing, Getting Started
+@node Errors
 @section How Octave Reports Errors
 @cindex error messages
 @cindex messages, error
 
 Octave reports two kinds of errors for invalid programs.
 
 A @dfn{parse error} occurs if Octave cannot understand something you
 have typed.  For example, if you misspell a keyword,
@@ -741,17 +741,17 @@ line:
 @example
 error: called from `g'
 @end example
 
 These lists of function calls usually make it fairly easy to trace the
 path your program took before the error occurred, and to correct the
 error before trying again.
 
-@node Executable Octave Programs, Comments, Errors, Getting Started
+@node Executable Octave Programs
 @section Executable Octave Programs
 @cindex executable scripts
 @cindex scripts
 @cindex self contained programs
 @cindex program, self contained
 @cindex @samp{#!}
 
 Once you have learned Octave, you may want to write self-contained
@@ -817,17 +817,17 @@ reproduce the command line that is used 
 printf ("%s", program_name);
 for i = 1:nargin
   printf (" %s", argv@{i@});
 endfor
 printf ("\n");
 @end group
 @end example
 
-@node Comments,  , Executable Octave Programs, Getting Started
+@node Comments
 @section Comments in Octave Programs
 @cindex @samp{#}
 @cindex @samp{%}
 @cindex comments
 @cindex use of comments
 @cindex documenting Octave programs
 @cindex programs
 
diff --git a/doc/interpreter/bugs.txi b/doc/interpreter/bugs.txi
--- a/doc/interpreter/bugs.txi
+++ b/doc/interpreter/bugs.txi
@@ -1,31 +1,31 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @c The text of this file will eventually appear in the file BUGS
 @c in the Octave distribution, as well as in the Octave manual.
 
 @ifclear BUGSONLY
-@node Trouble, Installation, Tips, Top
+@node Trouble
 @appendix Known Causes of Trouble
 @end ifclear
 
 @ifset BUGSONLY
 @include conf.texi
 
 This file documents known bugs in Octave and describes where and how to
 report any bugs that you may find.
 
 Copyright (C) 1996, 1997 John W. Eaton.  You may copy, distribute, and
 modify it freely as long as you preserve this copyright notice and
 permission notice.
 
-@node Trouble,  , Trouble
+@node Trouble
 @chapter Known Causes of Trouble with Octave
 @end ifset
 
 @cindex bugs, known
 @cindex installation trouble
 @cindex known causes of trouble
 @cindex troubleshooting
 
@@ -42,17 +42,17 @@ where people's opinions differ as to wha
 * Reporting Bugs::              
 * Bug Criteria::                
 * Bug Lists::                   
 * Bug Reporting::               
 * Sending Patches::             
 * Service::                     
 @end menu
 
-@node Actual Bugs, Reporting Bugs, Trouble, Trouble
+@node Actual Bugs
 @appendixsec Actual Bugs We Haven't Fixed Yet
 
 @itemize @bullet
 @item
 Output that comes directly from Fortran functions is not sent through
 the pager and may appear out of sequence with other output that is sent
 through the pager.  One way to avoid this is to force pending output to
 be flushed before calling a function that will produce output from
@@ -127,17 +127,17 @@ Of course, this doesn't really fix the p
 much less likely that you will run into trouble unless you are putting
 a very large number of lines on a given plot.
 @end itemize
 
 A list of ideas for future enhancements is distributed with Octave.  See
 the file @file{PROJECTS} in the top level directory in the source
 distribution.
 
-@node Reporting Bugs, Bug Criteria, Actual Bugs, Trouble
+@node Reporting Bugs
 @appendixsec Reporting Bugs
 @cindex bugs
 @cindex reporting bugs
 
 Your bug reports play an essential role in making Octave reliable.
 
 When you encounter a problem, the first thing to do is to see if it is
 already known.  @xref{Trouble}.  If it isn't known, then you should
@@ -162,17 +162,17 @@ for you.
 
 @menu
 * Bug Criteria::                
 * Where: Bug Lists.             Where to send your bug report.
 * Reporting: Bug Reporting.     How to report a bug effectively.
 * Patches: Sending Patches.     How to send a patch for Octave.
 @end menu
 
-@node Bug Criteria, Bug Lists, Reporting Bugs, Trouble
+@node Bug Criteria
 @appendixsec Have You Found a Bug?
 @cindex bug criteria
 
 If you are not sure whether you have found a bug, here are some guidelines:
 
 @itemize @bullet
 @cindex fatal signal
 @cindex core dump
@@ -214,17 +214,17 @@ practice''.
 
 @cindex improving Octave
 @cindex suggestions
 @item
 If you are an experienced user of programs like Octave, your suggestions
 for improvement are welcome in any case.
 @end itemize
 
-@node Bug Lists, Bug Reporting, Bug Criteria, Trouble
+@node Bug Lists
 @appendixsec Where to Report Bugs
 @cindex bug report mailing lists
 @cindex reporting bugs
 @cindex bugs, reporting
 
 @findex bug_report
 
 If you have Octave working at all, the easiest way to prepare a complete
@@ -246,17 +246,17 @@ As a last resort, send bug reports on pa
 @example
 Octave Bugs c/o John W. Eaton
 University of Wisconsin-Madison
 Department of Chemical Engineering
 1415 Engineering Drive
 Madison, Wisconsin 53706  USA
 @end example
 
-@node Bug Reporting, Sending Patches, Bug Lists, Trouble
+@node Bug Reporting
 @appendixsec How to Report Bugs
 @cindex bugs, reporting
 
 Send bug reports for Octave to one of the addresses listed in
 @ref{Bug Lists}.
 
 The fundamental principle of reporting bugs usefully is this:
 @strong{report all the facts}.  If you are not sure whether to state a
@@ -383,17 +383,17 @@ However, simplification is not vital; if
 this, report the bug anyway and send the entire test case you
 used.
 
 @item
 A patch for the bug.  Patches can be helpful, but if you find a bug, you
 should report it, even if you cannot send a fix for the problem.
 @end itemize
 
-@node Sending Patches, Service, Bug Reporting, Trouble
+@node Sending Patches
 @appendixsec Sending Patches for Octave
 @cindex improving Octave
 @cindex diffs, submitting
 @cindex patches, submitting
 @cindex submitting diffs
 @cindex submitting patches
 
 If you would like to write bug fixes or improvements for Octave, that is
@@ -452,17 +452,17 @@ you need not explain its purpose. Thus, 
 you need to say about it is that it is new.  If you feel that the
 purpose needs explaining, it probably does---but the explanation will be
 much more useful if you put it in comments in the code.
 
 If you would like your name to appear in the header line for who made
 the change, send us the header line.
 @end itemize
 
-@node Service,  , Sending Patches, Trouble
+@node Service
 @appendixsec How To Get Help with Octave
 @cindex help, where to find
 
 The mailing list @email{help-octave@@bevo.che.wisc.edu} exists for the
 discussion of matters related to using and installing Octave.  If would
 like to join the discussion, please send a short note to
 @email{help-octave@strong{-request}@@bevo.che.wisc.edu}.
 
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -1,36 +1,36 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Containers, I/O Streams, Data Structures, Top
+@node Containers
 @chapter Containers
 @cindex containers
 
 @menu
 * Lists::                       
 * Cell Arrays::                 
 @end menu
 
-@node Lists, Cell Arrays, Containers, Containers
+@node Lists
 @section Lists
 @cindex lists
 
 @DOCSTRING(list)
 
 @DOCSTRING(nth)
 
 @DOCSTRING(append)
 
 @DOCSTRING(reverse)
 
 @DOCSTRING(splice)
 
 @DOCSTRING(islist)
 
-@node Cell Arrays,  , Lists, Containers
+@node Cell Arrays
 @section Cell Arrays
 @cindex cell arrays
 
 @DOCSTRING(cell)
 
 @DOCSTRING(iscell)
diff --git a/doc/interpreter/control.txi b/doc/interpreter/control.txi
--- a/doc/interpreter/control.txi
+++ b/doc/interpreter/control.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Control Theory, Signal Processing, Polynomial Manipulations, Top
+@node Control Theory
 @chapter Control Theory
 
 The Octave Control Systems Toolbox (OCST) was initially developed
 by Dr.@: A. Scottedward Hodel 
 @email{a.s.hodel@@eng.auburn.edu} with the assistance
 of his students
 @itemize @bullet
 @item R. Bruce Tenison @email{btenison@@dibbs.net}, 
@@ -33,17 +33,17 @@ beginning OCST users should start with t
 * numerical::                   
 * sysprop::                     
 * systime::                     
 * sysfreq::                     
 * cacsd::                       
 * misc::                        
 @end menu
 
-@node sysstruct, sysinterface, Control Theory, Control Theory
+@node sysstruct
 @section System Data Structure
 
 @menu
 * sysstructvars::               
 * sysstructtf::                 
 * sysstructzp::                 
 * sysstructss::                 
 @end menu
@@ -62,17 +62,17 @@ use of the data structure used in the OC
 the system structure access m-files be used (@pxref{sysinterface}).
 Some elements of the data structure are absent depending on the internal
 system representation(s) used.  More than one system representation
 can be used for SISO systems; the OCST m-files ensure that all representations
 used are consistent with one another.
 
 @DOCSTRING(sysrepdemo)
 
-@node sysstructvars, sysstructtf, sysstruct, sysstruct
+@node sysstructvars
 @subsection Variables common to all OCST system formats
 
 The data structure elements (and variable types) common to all  system
 representations are listed below; examples of the initialization
 and use of the system data structures are given in subsequent sections and
 in the online demo @code{DEMOcontrol}.
 @table @var
 @item n
@@ -121,44 +121,44 @@ changed when calls are made to the @code
  indicates which outputs are discrete time (i.e.,
     produced by D/A converters) and which are continuous time.
     yd(ii) = 0 if output ii is continuous, = 1 if discrete.
 @end table
 
 The remaining variables of the  system data structure are only present
 if the corresponding entry of the @code{sys} vector is true (=1).
 
-@node sysstructtf, sysstructzp, sysstructvars, sysstruct
+@node sysstructtf
 @subsection @code{tf} format variables
 
 @table @var
 @item num
  numerator coefficients   (vector)
 
 @item den
  denominator coefficients   (vector)
 
 @end table
 
-@node sysstructzp, sysstructss, sysstructtf, sysstruct
+@node sysstructzp
 @subsection @code{zp} format variables
 
 @table @var
 @item zer
  system zeros   (vector)
 
 @item pol
  system poles    (vector)
 
 @item k
  leading coefficient   (scalar)
 
 @end table
 
-@node sysstructss,  , sysstructzp, sysstruct
+@node sysstructss
 @subsection @code{ss} format variables
 
 @table @var
 @item a
 @itemx b
 @itemx c
 @itemx d
 The usual state-space matrices. If a system has both
@@ -168,17 +168,17 @@ The usual state-space matrices. If a sys
 @strong{Note} some functions (e.g., @code{bode}, @code{hinfsyn}) 
 will not accept systems with both discrete and continuous states/outputs
 
 @item stname
 names of system states   (list of strings)
 
 @end table
 
-@node sysinterface, sysdisp, sysstruct, Control Theory
+@node sysinterface
 @section System Construction and Interface Functions
 
 Construction and manipulations of the OCST system data structure
 (@pxref{sysstruct}) requires attention to many details in order
 to ensure that data structure contents remain consistent.  Users
 are strongly encouraged to use the system interface functions
 in this section.  Functions for the formatted display in of system
 data structures are given in @ref{sysdisp}.
@@ -187,45 +187,45 @@ data structures are given in @ref{sysdis
 * fir2sys::                     
 * ss2sys::                      
 * tf2sys::                      
 * zp2sys::                      
 * structaccess::                
 * structintern::                
 @end menu
 
-@node fir2sys, ss2sys, sysinterface, sysinterface
+@node fir2sys
 @subsection Finite impulse response system interface functions
 
 @DOCSTRING(fir2sys)
 
 @DOCSTRING(sys2fir)
 
-@node ss2sys, tf2sys, fir2sys, sysinterface
+@node ss2sys
 @subsection State space system interface functions
 
 @DOCSTRING(ss2sys)
 
 @DOCSTRING(sys2ss)
 
-@node tf2sys, zp2sys, ss2sys, sysinterface
+@node tf2sys
 @subsection Transfer function system interface functions
 
 @DOCSTRING(tf2sys)
 
 @DOCSTRING(sys2tf)
 
-@node zp2sys, structaccess, tf2sys, sysinterface
+@node zp2sys
 @subsection Zero-pole system interface functions
 
 @DOCSTRING(zp2sys)
 
 @DOCSTRING(sys2zp)
 
-@node structaccess, structintern, zp2sys, sysinterface
+@node structaccess
 @subsection Data structure access functions
 
 @DOCSTRING(syschnames)
 
 @DOCSTRING(syschtsam)
 
 @DOCSTRING(sysdimensions)
 
@@ -236,39 +236,39 @@ data structures are given in @ref{sysdis
 @DOCSTRING(syssetsignals)
 
 @DOCSTRING(sysupdate)
 
 @DOCSTRING(minfo)
 
 @DOCSTRING(sysgettsam)
 
-@node structintern,  , structaccess, sysinterface
+@node structintern
 @subsection Data structure internal functions
 
 @DOCSTRING(syschnamesl)
 
 @DOCSTRING(sysdefioname)
 
 @DOCSTRING(sysdefstname)
 
 @DOCSTRING(tf2sysl)
 
-@node sysdisp, blockdiag, sysinterface, Control Theory
+@node sysdisp
 @section System display functions
 
 @DOCSTRING(sysout)
 
 @DOCSTRING(tfout)
 
 @DOCSTRING(zpout)
 
 @DOCSTRING(outlist)
 
-@node blockdiag, numerical, sysdisp, Control Theory
+@node blockdiag
 @section Block Diagram Manipulations
 
 @xref{systime}.
 
 Unless otherwise noted, all parameters (input,output) are
 system data structures.
 
 @DOCSTRING(bddemo)
@@ -310,17 +310,17 @@ system data structures.
 @DOCSTRING(ugain)
 
 @DOCSTRING(wgt1o)
 
 @DOCSTRING(parallel)
 
 @DOCSTRING(sysmin)
 
-@node numerical, sysprop, blockdiag, Control Theory
+@node numerical
 @section Numerical Functions
 
 @DOCSTRING(are)
 
 @DOCSTRING(dare)
 
 @DOCSTRING(dre)
 
@@ -356,17 +356,17 @@ References:
 @table @strong
 @item  ZGEP
  Hodel, "Computation of Zeros with Balancing," 1992, Linear Algebra
  and its Applications
 @item @strong{Generalized CG}
  Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 @end table
 
-@node sysprop, systime, numerical, Control Theory
+@node sysprop
 @section System Analysis-Properties
 
 @DOCSTRING(analdemo)
 
 @DOCSTRING(abcddim)
 
 @DOCSTRING(abcddims)
 
@@ -397,17 +397,17 @@ References:
 @DOCSTRING(is_siso)
 
 @DOCSTRING(is_stabilizable)
 
 @DOCSTRING(is_signal_list)
 
 @DOCSTRING(is_stable)
 
-@node systime, sysfreq, sysprop, Control Theory
+@node systime
 @section System Analysis-Time Domain
 
 @DOCSTRING(c2d)
 
 @DOCSTRING(d2c)
 
 @DOCSTRING(dmr2d)
 
@@ -416,17 +416,17 @@ References:
 @DOCSTRING(dcgain)
 
 @DOCSTRING(impulse)
 
 @DOCSTRING(step)
 
 @DOCSTRING(stepimp)
 
-@node sysfreq, cacsd, systime, Control Theory
+@node sysfreq
 @section System Analysis-Frequency Domain
 
 @strong{Demonstration/tutorial script}
 @DOCSTRING(frdemo)
 
 @DOCSTRING(bode)
 
 @DOCSTRING(bode_bounds)
@@ -440,17 +440,17 @@ References:
 @DOCSTRING(ltifr)
 
 @DOCSTRING(nyquist)
 
 @DOCSTRING(tzero)
 
 @DOCSTRING(tzero2)
 
-@node cacsd, misc, sysfreq, Control Theory
+@node cacsd
 @section Controller Design
 
 @DOCSTRING(dgkfdemo)
 
 @DOCSTRING(hinfdemo)
 
 @DOCSTRING(dlqe)
 
@@ -473,17 +473,17 @@ References:
 @DOCSTRING(lqg)
 
 @DOCSTRING(lqr)
 
 @DOCSTRING(lsim)
 
 @DOCSTRING(place)
 
-@node misc,  , cacsd, Control Theory
+@node misc
 @section Miscellaneous Functions (Not yet properly filed/documented)
 
 @DOCSTRING(axis2dlim)
 
 @DOCSTRING(moddemo)
 
 @DOCSTRING(prompt)
 
diff --git a/doc/interpreter/cp-idx.txi b/doc/interpreter/cp-idx.txi
--- a/doc/interpreter/cp-idx.txi
+++ b/doc/interpreter/cp-idx.txi
@@ -1,8 +1,8 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Concept Index, Variable Index, Copying, Top
+@node Concept Index
 @unnumbered Concept Index
 
 @printindex cp
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Data Types, Numeric Data Types, Getting Started, Top
+@node Data Types
 @chapter Data Types
 @cindex data types
 
 All versions of Octave include a number of built-in data types,
 including real and complex scalars and matrices, character strings, and
 a data structure type.
 
 It is also possible to define new specialized data types by writing a
@@ -21,17 +21,17 @@ to define a new data type for Octave.
 @DOCSTRING(typeinfo)
 
 @menu
 * Built-in Data Types::         
 * User-defined Data Types::     
 * Object Sizes::                
 @end menu
 
-@node Built-in Data Types, User-defined Data Types, Data Types, Data Types
+@node Built-in Data Types
 @section Built-in Data Types
 @cindex data types, built-in
 @cindex built-in data types
 
 The standard built-in data types are real and complex scalars and
 matrices, ranges, character strings, and a data structure type.
 Additional built-in data types may be added in future versions.  If you
 need a specialized data type that is not currently provided as a
@@ -39,17 +39,17 @@ built-in type, you are encouraged to wri
 type and contribute it for distribution in a future release of Octave.
 
 @menu
 * Numeric Objects::             
 * String Objects::              
 * Data Structure Objects::      
 @end menu
 
-@node Numeric Objects, String Objects, Built-in Data Types, Built-in Data Types
+@node Numeric Objects
 @subsection Numeric Objects
 @cindex numeric constant
 @cindex numeric value
 
 Octave's built-in numeric objects include real and complex scalars and
 matrices.  All built-in numeric data is currently stored as double
 precision numbers.  On systems that use the IEEE floating point format,
 values in the range of approximately
@@ -74,54 +74,54 @@ The exact values are given by the variab
 @code{realmax}, and @code{eps}, respectively.
 
 Matrix objects can be of any size, and can be dynamically reshaped and
 resized.  It is easy to extract individual rows, columns, or submatrices
 using a variety of powerful indexing features.  @xref{Index Expressions}.
 
 @xref{Numeric Data Types}, for more information.
 
-@node String Objects, Data Structure Objects, Numeric Objects, Built-in Data Types
+@node String Objects
 @subsection String Objects
 @cindex strings
 @cindex character strings
 @opindex "
 @opindex '
 
 A character string in Octave consists of a sequence of characters
 enclosed in either double-quote or single-quote marks.  Internally,
 Octave currently stores strings as matrices of characters.  All the
 indexing operations that work for matrix objects also work for strings.
 
 @xref{Strings}, for more information.
 
-@node Data Structure Objects,  , String Objects, Built-in Data Types
+@node Data Structure Objects
 @subsection Data Structure Objects
 @cindex structures
 @cindex data structures
 
 Octave's data structure type can help you to organize related objects of
 different types.  The current implementation uses an associative array
 with indices limited to strings, but the syntax is more like C-style
 structures.
 
 @xref{Data Structures}, for more information.
 
-@node User-defined Data Types, Object Sizes, Built-in Data Types, Data Types
+@node User-defined Data Types
 @section User-defined Data Types
 @cindex user-defined data types
 @cindex data types, user-defined
 
 Someday I hope to expand this to include a complete description of
 Octave's mechanism for managing user-defined data types.  Until this
 feature is documented here, you will have to make do by reading the code
 in the @file{ov.h}, @file{ops.h}, and related files from Octave's
 @file{src} directory.
 
-@node Object Sizes,  , User-defined Data Types, Data Types
+@node Object Sizes
 @section Object Sizes
 
 The following functions allow you to determine the size of a variable or
 expression.  These functions are defined for all objects.  They return
 @minus{}1 when the operation doesn't make sense.  For example, Octave's
 data structure type doesn't have rows or columns, so the @code{rows} and
 @code{columns} functions return @minus{}1 for structure arguments.
 
diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -1,28 +1,28 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Differential Equations, Optimization, Quadrature, Top
+@node Differential Equations
 @chapter Differential Equations
 
 Octave has two built-in functions for solving differential equations.
 Both are based on reliable ODE solvers written in Fortran.
 
 @menu
 * Ordinary Differential Equations::  
 * Differential-Algebraic Equations::  
 @end menu
 
 @cindex Differential Equations
 @cindex ODE
 @cindex DAE
 
-@node Ordinary Differential Equations, Differential-Algebraic Equations, Differential Equations, Differential Equations
+@node Ordinary Differential Equations
 @section Ordinary Differential Equations
 
 The function @code{lsode} can be used to solve ODEs of the form
 @iftex
 @tex
 $$
  {dx\over dt} = f (x, t)
 $$
@@ -94,17 +94,17 @@ simultaneously with the solution of the 
 @DOCSTRING(odessa)
 
 @DOCSTRING(odessa_options)
 
 See Alan C. Hindmarsh, @cite{ODEPACK, A Systematized Collection of ODE
 Solvers}, in Scientific Computing, R. S. Stepleman, editor, (1983) for
 more information about the inner workings of @code{lsode}.
 
-@node Differential-Algebraic Equations,  , Ordinary Differential Equations, Differential Equations
+@node Differential-Algebraic Equations
 @section Differential-Algebraic Equations
 
 The function @code{daspk} can be used to solve DAEs of the form
 @iftex
 @tex
 $$
  0 = f (\dot{x}, x, t), \qquad x(t=0) = x_0, \dot{x}(t=0) = \dot{x}_0
 $$
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -1,15 +1,15 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/17.
 @c Last updated by KH on 1997/07/31.
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Emacs, Grammar, Installation, Top
+@node Emacs
 @appendix Emacs Octave Support
 
 The development of Octave code can greatly be facilitated using Emacs
 with Octave mode, a major mode for editing Octave files which can e.g.@:
 automatically indent the code, do some of the typing (with Abbrev mode)
 and show keywords, comments, strings, etc.@: in different faces (with
 Font-lock mode on devices that support it).
 
@@ -30,34 +30,34 @@ or suggestions on using EOS.
 
 @menu
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
 
-@node Installing EOS, Using Octave Mode, Emacs, Emacs
+@node Installing EOS
 @appendixsec Installing EOS
 
 The Emacs package EOS consists of the three files @file{octave-mod.el},
 @file{octave-inf.el}, and @file{octave-hlp.el}.  These files, or better
 yet their byte-compiled versions, should be somewhere in your Emacs
 load-path.
 
 If you have GNU Emacs with a version number at least as high as 19.35,
 you are all set up, because EOS is respectively will be part of GNU
 Emacs as of version 19.35.
 
 Otherwise, copy the three files from the @file{emacs} subdirectory of
 the Octave distribution to a place where Emacs can find them (this
 depends on how your Emacs was installed).  Byte-compile them for speed
 if you want.
 
-@node Using Octave Mode, Running Octave From Within Emacs, Installing EOS, Emacs
+@node Using Octave Mode
 @appendixsec Using Octave Mode
 
 If you are lucky, your sysadmins have already arranged everything so
 that Emacs automatically goes into Octave mode whenever you visit an
 Octave code file as characterized by its extension @file{.m}.  If not,
 proceed as follows.
 
 @enumerate
@@ -349,17 +349,17 @@ variable @code{octave-mode-hook}.  If th
 non-@code{nil}, turning on Octave mode calls its value.
 
 If you discover a problem with Octave mode, you can conveniently send a
 bug report using @kbd{C-c C-b} (@code{octave-submit-bug-report}).  This
 automatically sets up a mail buffer with version information already
 added.  You just need to add a description of the problem, including a
 reproducible test case and send the message.
 
-@node Running Octave From Within Emacs, Using the Emacs Info Reader for Octave, Using Octave Mode, Emacs
+@node Running Octave From Within Emacs
 @appendixsec Running Octave From Within Emacs
 
 The package @file{octave} provides commands for running an inferior
 Octave process in a special Emacs buffer.  Use 
 @lisp
 M-x run-octave
 @end lisp
 @noindent
@@ -460,17 +460,17 @@ this hook.
 @quotation
 @strong{Note:}
 If you set your Octave prompts to something different from the defaults,
 make sure that @code{inferior-octave-prompt} matches them.
 Otherwise, @emph{nothing} will work, because Emacs will have no idea
 when Octave is waiting for input, or done sending output.
 @end quotation
 
-@node Using the Emacs Info Reader for Octave,  , Running Octave From Within Emacs, Emacs
+@node Using the Emacs Info Reader for Octave
 @appendixsec Using the Emacs Info Reader for Octave
 
 You can also set up the Emacs Info reader for dealing with the results
 of Octave's @samp{help -i}.  For this, the package @file{gnuserv} needs
 to be installed, which unfortunately still does not come with GNU Emacs
 (it does with XEmacs).  It can be retrieved from any GNU Emacs Lisp Code
 Directory archive, e.g.@:
 @url{ftp://ftp.cis.ohio-state.edu/pub/gnu/emacs/elisp-archive},
diff --git a/doc/interpreter/eos.txi b/doc/interpreter/eos.txi
--- a/doc/interpreter/eos.txi
+++ b/doc/interpreter/eos.txi
@@ -3,17 +3,17 @@
 @c Last updated by KH on 1997/07/31.
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Emacs
 @chapter Emacs Octave Support
 
 The development of Octave code can greatly be facilitated using Emacs
-with Octave mode, a major mode for editing Octave files which can e.g.@:
+with Octave mode
 automatically indent the code, do some of the typing (with Abbrev mode)
 and show keywords, comments, strings, etc.@: in different faces (with
 Font-lock mode on devices that support it).
 
 It is also possible to run Octave from within Emacs, either by directly
 entering commands at the prompt in a buffer in Inferior Octave mode, or
 by interacting with Octave from within a file with Octave code.  This is
 useful in particular for debugging Octave code.
@@ -30,34 +30,34 @@ or suggestions on using EOS.
 
 @menu
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
 
-@node Installing EOS, Using Octave Mode, Emacs, Emacs
+@node Installing EOS
 @section Installing EOS
 
 The Emacs package EOS consists of the three files @file{octave-mod.el},
 @file{octave-inf.el}, and @file{octave-hlp.el}.  These files, or better
 yet their byte-compiled versions, should be somewhere in your Emacs
 load-path.
 
 If you have GNU Emacs with a version number at least as high as 19.35,
 you are all set up, because EOS is respectively will be part of GNU
 Emacs as of version 19.35.
 
 Otherwise, copy the three files from the @file{emacs} subdirectory of
 the Octave distribution to a place where Emacs can find them (this
 depends on how your Emacs was installed).  Byte-compile them for speed
 if you want.
 
-@node Using Octave Mode, Running Octave From Within Emacs, Installing EOS, Emacs
+@node Using Octave Mode
 @section Using Octave Mode
 
 If you are lucky, your sysadmins have already arranged everything so
 that Emacs automatically goes into Octave mode whenever you visit an
 Octave code file as characterized by its extension @file{.m}.  If not,
 proceed as follows.
 
 @enumerate
@@ -342,17 +342,17 @@ variable @code{octave-mode-hook}.  It th
 non-@code{nil}, turning on Octave mode calls its value.
 
 If you discover a problem with Octave mode, you can conveniently send a
 bug report using @kbd{C-c C-b} (@code{octave-submit-bug-report}).  This
 automatically sets up a mail buffer with version information already
 added.  You just need to add a description of the problem, including a
 reproducible test case and send the message.
 
-@node Running Octave From Within Emacs, Using the Emacs Info Reader for Octave, Using Octave Mode, Emacs
+@node Running Octave From Within Emacs
 @section Running Octave From Within Emacs
 
 The package @file{octave} provides commands for running an inferior
 Octave process in a special Emacs buffer.  Use 
 @lisp
 M-x run-octave
 @end lisp
 @noindent
@@ -453,17 +453,17 @@ this hook.
 @quotation
 @strong{Note:}
 If you set your Octave prompts to something different from the defaults,
 make sure that @code{inferior-octave-prompt} matches them.
 Otherwise, @emph{nothing} will work, because Emacs will have no idea
 when Octave is waiting for input, or done sending output.
 @end quotation
 
-@node Using the Emacs Info Reader for Octave,  , Running Octave From Within Emacs, Emacs
+@node Using the Emacs Info Reader for Octave
 @section Using the Emacs Info Reader for Octave
 
 You can also set up the Emacs Info reader for dealing with the results
 of Octave's @samp{help -i}.  For this, the package @file{gnuserv} needs
 to be installed, which unfortunately still does not come with GNU Emacs
 (it does with XEmacs).  It can be retrieved from any GNU Emacs Lisp Code
 Directory archive, e.g.@:
 @url{ftp://ftp.cis.ohio-state.edu/pub/gnu/emacs/elisp-archive},
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Error Handling, Input and Output, Functions and Scripts, Top
+@node Error Handling
 @chapter Error Handling
 
 Octave includes several functions for printing error and warning
 messages.  When you write functions that need to take special action
 when they encounter abnormal conditions, you should print the error
 messages using the functions described in this chapter.
 
 @DOCSTRING(error)
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Evaluation, Statements, Expressions, Top
+@node Evaluation
 @chapter Evaluation
 
 Normally, you evaluate expressions simply by typing them at the Octave
 prompt, or by asking Octave to interpret commands that you have saved in
 a file.
 
 Sometimes, you may find it necessary to evaluate an expression that has
 been computed and stored in a string, or use a string as the name of a
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Expressions, Evaluation, Variables, Top
+@node Expressions
 @chapter Expressions
 @cindex expressions
 
 Expressions are the basic building block of statements in Octave.  An
 expression evaluates to a value, which you can print, test, store in a
 variable, pass to a function, or assign a new value to a variable with
 an assignment operator.
 
@@ -23,17 +23,17 @@ combinations of these with various opera
 * Arithmetic Ops::              
 * Comparison Ops::              
 * Boolean Expressions::         
 * Assignment Ops::              
 * Increment Ops::               
 * Operator Precedence::         
 @end menu
 
-@node Index Expressions, Calling Functions, Expressions, Expressions
+@node Index Expressions
 @section Index Expressions
 
 @opindex (
 @opindex )
 
 An @dfn{index expression} allows you to reference or extract selected
 elements of a matrix or vector.
 
@@ -207,17 +207,17 @@ for i = 1:n-1
 endfor
 @end group
 @end example
 
 @noindent
 particularly for large matrices because Octave does not have to
 repeatedly resize the result.
 
-@node Calling Functions, Arithmetic Ops, Index Expressions, Expressions
+@node Calling Functions
 @section Calling Functions
 
 A @dfn{function} is a name for a particular calculation.  Because it has
 a name, you can ask for it by name at any point in the program.  For
 example, the function @code{sqrt} computes the square root of a number.
 
 A fixed set of functions are @dfn{built-in}, which means they are
 available in every Octave program.  The @code{sqrt} function is one of
@@ -275,17 +275,17 @@ The left side of a multiple assignment e
 expressions, and is allowed to be a list of variable names or index
 expressions.  See also @ref{Index Expressions}, and @ref{Assignment Ops}.
 
 @menu
 * Call by Value::               
 * Recursion::                   
 @end menu
 
-@node Call by Value, Recursion, Calling Functions, Calling Functions
+@node Call by Value
 @subsection Call by Value
 
 In Octave, unlike Fortran, function arguments are passed by value, which
 means that each argument in a function call is evaluated and assigned to
 a temporary location in memory before being passed to the function.
 There is currently no way to specify that a function parameter should be
 passed by reference instead of by value.  This means that it is
 impossible to directly alter the value of function parameter in the
@@ -339,17 +339,17 @@ f (x);
 @noindent
 does not actually force two 1000 by 1000 element matrices to exist
 @emph{unless} the function @code{f} modifies the value of its
 argument.  Then Octave must create a copy to avoid changing the
 value outside the scope of the function @code{f}, or attempting (and
 probably failing!) to modify the value of a constant or the value of a
 temporary result.
 
-@node Recursion,  , Call by Value, Calling Functions
+@node Recursion
 @subsection Recursion
 @cindex factorial function
 
 With some restrictions@footnote{Some of Octave's function are
 implemented in terms of functions that cannot be called recursively.
 For example, the ODE solver @code{lsode} is ultimately implemented in a
 Fortran subroutine that cannot be called recursively, so @code{lsode}
 should not be called either directly or indirectly from within the
@@ -379,17 +379,17 @@ argument that is one less than was used 
 argument is no longer greater than zero, it does not call itself, and
 the recursion ends.
 
 The built-in variable @code{max_recursion_depth} specifies a limit to
 the recursion depth and prevents Octave from recursing infinitely.
 
 @DOCSTRING(max_recursion_depth)
 
-@node Arithmetic Ops, Comparison Ops, Calling Functions, Expressions
+@node Arithmetic Ops
 @section Arithmetic Operators
 @cindex arithmetic operators
 @cindex operators, arithmetic
 @cindex addition
 @cindex subtraction
 @cindex multiplication
 @cindex matrix multiplication
 @cindex division
@@ -541,17 +541,17 @@ and not
 @noindent
 Although this is inconsistent with the normal behavior of Octave's
 lexer, which usually prefers to break the input into tokens by
 preferring the longest possible match at any given point, it is more
 useful in this case.
 
 @DOCSTRING(warn_divide_by_zero)
 
-@node Comparison Ops, Boolean Expressions, Arithmetic Ops, Expressions
+@node Comparison Ops
 @section Comparison Operators
 @cindex comparison expressions
 @cindex expressions, comparison
 @cindex relational operators
 @cindex operators, relational
 @cindex less than operator
 @cindex greater than operator
 @cindex equality operator
@@ -607,17 +607,17 @@ True if @var{x} is greater than @var{y}.
 @opindex <>
 True if @var{x} is not equal to @var{y}.
 @end table
 
 String comparisons may also be performed with the @code{strcmp}
 function, not with the comparison operators listed above.
 @xref{Strings}.
 
-@node Boolean Expressions, Assignment Ops, Comparison Ops, Expressions
+@node Boolean Expressions
 @section Boolean Expressions
 @cindex expressions, boolean
 @cindex boolean expressions
 @cindex expressions, logical
 @cindex logical expressions
 @cindex operators, boolean
 @cindex boolean operators
 @cindex logical operators
@@ -626,17 +626,17 @@ function, not with the comparison operat
 @cindex or operator
 @cindex not operator
 
 @menu
 * Element-by-element Boolean Operators::  
 * Short-circuit Boolean Operators::  
 @end menu
 
-@node Element-by-element Boolean Operators, Short-circuit Boolean Operators, Boolean Expressions, Boolean Expressions
+@node Element-by-element Boolean Operators
 @subsection Element-by-element Boolean Operators
 @cindex element-by-element evaluation
 
 An @dfn{element-by-element boolean expression} is a combination of
 comparison expressions using the boolean
 operators ``or'' (@samp{|}), ``and'' (@samp{&}), and ``not'' (@samp{!}),
 along with parentheses to control nesting.  The truth of the boolean
 expression is computed by combining the truth values of the
@@ -701,17 +701,17 @@ a & b++
 
 @noindent
 the value of the variable @var{b} is incremented even if the variable
 @var{a} is zero.
 
 This behavior is necessary for the boolean operators to work as
 described for matrix-valued operands.
 
-@node Short-circuit Boolean Operators,  , Element-by-element Boolean Operators, Boolean Expressions
+@node Short-circuit Boolean Operators
 @subsection Short-circuit Boolean Operators
 @cindex short-circuit evaluation
 
 Combined with the implicit conversion to scalar values in @code{if} and
 @code{while} conditions, Octave's element-by-element boolean operators
 are often sufficient for performing most logical operations.  However,
 it is sometimes desirable to stop evaluating a boolean expression as
 soon as the overall truth value can be determined.  Octave's
@@ -786,17 +786,17 @@ function f (a, b, c)
 @end group
 @end example
 
 @noindent
 would result in an error if @code{f} were called with one or two
 arguments because Octave would be forced to try to evaluate both of the
 operands for the operator @samp{&}.
 
-@node Assignment Ops, Increment Ops, Boolean Expressions, Expressions
+@node Assignment Ops
 @section Assignment Expressions
 @cindex assignment expressions
 @cindex assignment operators
 @cindex operators, assignment
 @cindex expressions, assignment
 
 @opindex =
 
@@ -960,17 +960,17 @@ it to get rid of such nesting of assignm
 
 @DOCSTRING(print_rhs_assign_val)
 
 @cindex increment operator
 @cindex decrement operator
 @cindex operators, increment
 @cindex operators, decrement
 
-@node Increment Ops, Operator Precedence, Assignment Ops, Expressions
+@node Increment Ops
 @section Increment Operators
 
 @emph{Increment operators} increase or decrease the value of a variable
 by 1.  The operator to increment a variable is written as @samp{++}.  It
 may be used to increment a variable either before or after taking its
 value.
 
 For example, to pre-increment the variable @var{x}, you would write
@@ -1014,17 +1014,17 @@ value of the expression is the @emph{old
 @end table
 
 It is not currently possible to increment index expressions.  For
 example, you might expect that the expression @code{@var{v}(4)++} would
 increment the fourth element of the vector @var{v}, but instead it
 results in a parse error.  This problem may be fixed in a future
 release of Octave.
 
-@node Operator Precedence,  , Increment Ops, Expressions
+@node Operator Precedence
 @section Operator Precedence
 @cindex operator precedence
 
 @dfn{Operator precedence} determines how operators are grouped, when
 different operators appear close by in one expression.  For example,
 @samp{*} has higher precedence than @samp{+}.  Thus, the expression
 @code{a + b * c} means to multiply @code{b} and @code{c}, and then add
 @code{a} to the product (i.e., @code{a + (b * c)}).
diff --git a/doc/interpreter/finance.txi b/doc/interpreter/finance.txi
--- a/doc/interpreter/finance.txi
+++ b/doc/interpreter/finance.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Financial Functions, Sets, Statistics, Top
+@node Financial Functions
 @chapter Financial Functions
 @cindex financial functions
 @cindex money
 @cindex compounding, value of
 
 @DOCSTRING(fv)
 
 @DOCSTRING(fvl)
diff --git a/doc/interpreter/fn-idx.txi b/doc/interpreter/fn-idx.txi
--- a/doc/interpreter/fn-idx.txi
+++ b/doc/interpreter/fn-idx.txi
@@ -1,8 +1,8 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Function Index, Operator Index, Variable Index, Top
+@node Function Index
 @unnumbered Function Index
 
 @printindex fn
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Functions and Scripts, Error Handling, Statements, Top
+@node Functions and Scripts
 @chapter Functions and Script Files
 @cindex defining functions
 @cindex user-defined functions
 @cindex functions, user-defined
 @cindex script files
 
 Complicated Octave programs can often be simplified by defining
 functions.  Functions can be defined directly on the command line during
@@ -21,17 +21,17 @@ like built-in functions.
 * Variable-length Return Lists::  
 * Returning From a Function::   
 * Function Files::              
 * Script Files::                
 * Dynamically Linked Functions::  
 * Organization of Functions::   
 @end menu
 
-@node Defining Functions, Multiple Return Values, Functions and Scripts, Functions and Scripts
+@node Defining Functions
 @section Defining Functions
 @cindex @code{function} statement
 @cindex @code{endfunction} statement
 
 In its simplest form, the definition of a function named @var{name}
 looks like this:
 
 @example
@@ -226,17 +226,17 @@ initialized to the number of arguments p
 top level, @code{nargin} holds the number of command line arguments that
 were passed to Octave.
 @end defvr
 
 @DOCSTRING(silent_functions)
 
 @DOCSTRING(warn_missing_semicolon)
 
-@node Multiple Return Values, Variable-length Argument Lists, Defining Functions, Functions and Scripts
+@node Multiple Return Values
 @section Multiple Return Values
 
 Unlike many other computer languages, Octave allows you to define
 functions that return more than one value.  The syntax for defining
 functions that return multiple values is
 
 @example
 function [@var{ret-list}] = @var{name} (@var{arg-list})
@@ -346,17 +346,17 @@ At the top level, @code{nargout} is unde
 @end defvr
 
 @DOCSTRING(default_return_value)
 
 @DOCSTRING(define_all_return_values)
 
 @DOCSTRING(nargchk)
 
-@node Variable-length Argument Lists, Variable-length Return Lists, Multiple Return Values, Functions and Scripts
+@node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex Variable-length argument lists
 @cindex @code{...}
 
 Octave has a real mechanism for handling functions that take an
 unspecified number of arguments, so it is not necessary to place an
 upper bound on the number of optional arguments that a function can
 accept.
@@ -414,17 +414,17 @@ g (1, 2, 3)
 @defvr {Keyword} all_va_args
 This keyword stands for the entire list of optional argument, so it is
 possible to use it more than once within the same function without
 having to call @code{va_start}.  It can only be used within functions
 that take a variable number of arguments.  It is an error to use it in
 other contexts.
 @end defvr
 
-@node Variable-length Return Lists, Returning From a Function, Variable-length Argument Lists, Functions and Scripts
+@node Variable-length Return Lists
 @section Variable-length Return Lists
 @cindex Variable-length return lists
 @cindex @code{...}
 
 Octave also has a real mechanism for handling functions that return an
 unspecified number of values, so it is no longer necessary to place an
 upper bound on the number of outputs that a function can produce.
 
@@ -446,17 +446,17 @@ endfunction
 @end example
 
 As with variable argument lists, the ellipsis that marks the variable
 return list may only appear once and must be the last element in the
 list of returned values.
 
 @DOCSTRING(vr_val)
 
-@node Returning From a Function, Function Files, Variable-length Return Lists, Functions and Scripts
+@node Returning From a Function
 @section Returning From a Function
 
 The body of a user-defined function can contain a @code{return} statement.
 This statement returns control to the rest of the Octave program.  It
 looks like this:
 
 @example
 return
@@ -496,17 +496,17 @@ does contain a nonzero element.
 When Octave encounters the keyword @code{return} inside a function or
 script, it returns control to be caller immediately.  At the top level,
 the return statement is ignored.  A @code{return} statement is assumed
 at the end of every function definition.
 @end defvr
 
 @DOCSTRING(return_last_computed_value)
 
-@node Function Files, Script Files, Returning From a Function, Functions and Scripts
+@node Function Files
 @section Function Files
 @cindex function file
 
 Except for simple one-shot programs, it is not practical to have to
 define all the functions you need each time you need them.  Instead, you
 will normally want to save them in a file so that you can easily edit
 them, and save them for use at a later time.
 
@@ -565,17 +565,17 @@ else, Octave will check the time stamps 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(ignore_function_time_stamp)
 
 @DOCSTRING(warn_function_name_clash)
 
 @DOCSTRING(warn_future_time_stamp)
 
-@node Script Files, Dynamically Linked Functions, Function Files, Functions and Scripts
+@node Script Files
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
 sequence of commands that do not logically belong inside a function.
 
 Unlike a function file, a script file must @emph{not} begin with the
@@ -668,17 +668,17 @@ string might come from user input, or de
 known until the function is evaluated).
 
 Although Octave normally executes commands from script files that have
 the name @file{@var{file}.m}, you can use the function @code{source} to
 execute commands from any file.
 
 @DOCSTRING(source)
 
-@node Dynamically Linked Functions, Organization of Functions, Script Files, Functions and Scripts
+@node Dynamically Linked Functions
 @section Dynamically Linked Functions
 @cindex dynamic linking
 
 On some systems, Octave can dynamically load and execute functions
 written in C++.  Octave can only directly call functions written in C++,
 but you can also load functions written in other languages
 by calling them from a simple wrapper function written in C++.
 
@@ -888,17 +888,17 @@ These files use the macro @code{DEFUN_DL
 dynamically loaded if the operating system does not support dynamic
 linking.  To define your own dynamically linked functions you should use
 @code{DEFUN_DLD}.
 
 There is currently no detailed description of all the functions that you
 can call in a built-in function.  For the time being, you will have to
 read the source code for Octave.
 
-@node Organization of Functions,  , Dynamically Linked Functions, Functions and Scripts
+@node Organization of Functions
 @section Organization of Functions Distributed with Octave
 
 Many of Octave's standard functions are distributed as function files.
 They are loosely organized by topic, in subdirectories of
 @file{@var{octave-home}/lib/octave/@var{version}/m}, to make it easier
 to find them.
 
 The following is a list of all the function file subdirectories, and the
diff --git a/doc/interpreter/gpl.txi b/doc/interpreter/gpl.txi
--- a/doc/interpreter/gpl.txi
+++ b/doc/interpreter/gpl.txi
@@ -1,15 +1,15 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @cindex warranty
 @cindex copyright
-@node Copying, Concept Index, Grammar, Top
+@node Copying
 @appendix GNU GENERAL PUBLIC LICENSE
 @center Version 2, June 1991
 
 @display
 Copyright @copyright{} 1989, 1991 Free Software Foundation, Inc.
 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
 
 Everyone is permitted to copy and distribute verbatim copies
diff --git a/doc/interpreter/grammar.txi b/doc/interpreter/grammar.txi
--- a/doc/interpreter/grammar.txi
+++ b/doc/interpreter/grammar.txi
@@ -1,25 +1,25 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Grammar, Copying, Emacs, Top
+@node Grammar
 @appendix Grammar
 @cindex grammar rules
 @cindex language definition
 
 Someday I hope to expand this to include a semi-formal description of
 Octave's language.
 
 @menu
 * Keywords::                    
 @end menu
 
-@node Keywords,  , Grammar, Grammar
+@node Keywords
 @section Keywords
 @cindex keywords
 
 The following identifiers are keywords, and may not be used as variable
 or function names:
 
 @example
 @group
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Image Processing, Audio Processing, Signal Processing, Top
+@node Image Processing
 @chapter Image Processing
 
 Octave can display images with the X Window System using the
 @code{xloadimage} program.  You do not need to be running X in order to
 manipulate images, however, so some of these functions may be useful
 even if you are not able to view the results.
 
 Loading images only works with Octave's image format (a file with a
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -1,30 +1,30 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @c The text of this file will eventually appear in the file INSTALL
 @c in the Octave distribution, as well as in the Octave manual.
 
 @ifclear INSTALLONLY
-@node Installation, Emacs, Trouble, Top
+@node Installation
 @appendix Installing Octave
 @end ifclear
 
 @ifset INSTALLONLY
 @include conf.texi
 
 This file documents the installation of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation.
 
-@node Installation,  , Installation
+@node Installation
 @chapter Installing Octave
 @end ifset
 
 @cindex installing Octave
 
 Here is the procedure for installing Octave from scratch on a Unix
 system.
 
@@ -214,17 +214,17 @@ Object files that will be dynamically lo
 Image files that are distributed with Octave.
 @end table
 @end itemize
 
 @menu
 * Installation Problems::       
 @end menu
 
-@node Installation Problems, , Installation, Installation
+@node Installation Problems
 @appendixsec Installation Problems
 
 This section contains a list of problems (and some apparent problems
 that don't really mean anything is wrong) that may show up during
 installation of Octave.
 
 @itemize @bullet
 @item
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Introduction, Getting Started, Preface, Top
+@node Introduction
 @chapter A Brief Introduction to Octave
 @cindex introduction
 
 This manual documents how to run, install and port GNU Octave, and how
 to report bugs.
 
 GNU Octave is a high-level language, primarily intended for numerical
 computations.  It provides a convenient command line interface for
@@ -28,17 +28,17 @@ This document corresponds to Octave vers
 @c                  always use more funding.
 
 @menu
 * Running Octave::              
 * Simple Examples::             
 * Conventions::                 
 @end menu
 
-@node Running Octave, Simple Examples, Introduction, Introduction
+@node Running Octave
 @section Running Octave
 
 On most systems, the way to invoke Octave is with the shell command
 @samp{octave}.  Octave displays an initial message and then a prompt
 indicating it is ready to accept input.  You can begin typing Octave
 commands immediately afterward.
 
 If you get into trouble, you can usually interrupt Octave by typing
@@ -49,17 +49,17 @@ prompt.
 
 @cindex exiting octave
 @cindex quitting octave
 To exit Octave, type @kbd{quit}, or @kbd{exit} at the Octave prompt.
 
 On systems that support job control, you can suspend Octave by sending
 it a @code{SIGTSTP} signal, usually by typing @kbd{C-z}.
 
-@node Simple Examples, Conventions, Running Octave, Introduction
+@node Simple Examples
 @section Simple Examples
 
 The following chapters describe all of Octave's features in detail, but
 before doing that, it might be helpful to give a sampling of some of its
 capabilities.
 
 If you are new to Octave, I recommend that you try these examples to
 begin learning Octave by using it.  Lines marked with @samp{octave:13>}
@@ -338,44 +338,44 @@ pager like @code{less} or @code{more}.  
 line, a @key{SPC} to advance one page, and @key{q} to exit the pager.
 
 The part of Octave's help facility that allows you to read the complete
 text of the printed manual from within Octave normally uses a separate
 program called Info.  When you invoke Info you will be put into a menu
 driven program that contains the entire Octave manual.  Help for using
 Info is provided in this manual in @ref{Getting Help}.
 
-@node Conventions,  , Simple Examples, Introduction
+@node Conventions
 @section Conventions
 
 This section explains the notational conventions that are used in this
 manual.  You may want to skip this section and refer back to it later.
 
 @menu
 * Fonts::                       
 * Evaluation Notation::         
 * Printing Notation::           
 * Error Messages::              
 * Format of Descriptions::      
 @end menu
 
-@node Fonts, Evaluation Notation, Conventions, Conventions
+@node Fonts
 @subsection Fonts
 @cindex fonts
 
 Examples of Octave code appear in this font or form: @code{svd (a)}.
 Names that represent arguments or metasyntactic variables appear
 in this font or form: @var{first-number}.  Commands that you type at the
 shell prompt sometimes appear in this font or form:
 @samp{octave --no-init-file}.  Commands that you type at the Octave
 prompt sometimes appear in this font or form: @kbd{foo --bar --baz}.
 Specific keys on your keyboard appear in this font or form: @key{ANY}.
 @cindex any key
 
-@node Evaluation Notation, Printing Notation, Fonts, Conventions
+@node Evaluation Notation
 @subsection Evaluation Notation
 @cindex evaluation notation
 @cindex documentation notation
 
 In the examples in this manual, results from expressions that you
 evaluate are indicated with @samp{@result{}}.  For example,
 
 @example
@@ -422,17 +422,17 @@ expressions is indicated with @samp{@equ
 rot90 ([1, 2; 3, 4], -1)
 @equiv{}
 rot90 ([1, 2; 3, 4], 3)
 @equiv{}
 rot90 ([1, 2; 3, 4], 7)
 @end group
 @end example
 
-@node Printing Notation, Error Messages, Evaluation Notation, Conventions
+@node Printing Notation
 @subsection Printing Notation
 @cindex printing notation
 
 Many of the examples in this manual print text when they are
 evaluated.  Examples in this manual indicate printed text with
 @samp{@print{}}.  The value that is returned by evaluating the
 expression (here @code{1}) is displayed with @samp{@result{}} and
 follows on a separate line.
@@ -440,32 +440,32 @@ follows on a separate line.
 @example
 @group
 printf ("foo %s\n", "bar")
      @print{} foo bar
      @result{} 1
 @end group
 @end example
 
-@node Error Messages, Format of Descriptions, Printing Notation, Conventions
+@node Error Messages
 @subsection Error Messages
 @cindex error message notation
 
 Some examples signal errors.  This normally displays an error message
 on your terminal.  Error messages are shown on a line starting with
 @code{error:}.
 
 @example
 @group
 struct_elements ([1, 2; 3, 4])
 error: struct_elements: wrong type argument `matrix'
 @end group
 @end example
 
-@node Format of Descriptions,  , Error Messages, Conventions
+@node Format of Descriptions
 @subsection Format of Descriptions
 @cindex description format
 
 Functions, commands, and variables are described in this manual in a 
 uniform format.  The first line of a description contains the name of
 the item followed by its arguments, if any.
 @ifinfo
 The category---function, variable, or whatever---appears at the
@@ -478,17 +478,17 @@ right margin.
 The description follows on succeeding lines, sometimes with examples.
 
 @menu
 * A Sample Function Description::  
 * A Sample Command Description::  
 * A Sample Variable Description::  
 @end menu
 
-@node A Sample Function Description, A Sample Command Description, Format of Descriptions, Format of Descriptions
+@node A Sample Function Description
 @subsubsection A Sample Function Description
 @cindex function descriptions
 
 In a function description, the name of the function being described
 appears first.  It is followed on the same line by a list of parameters.
 The names used for the parameters are also used in the body of the
 description.
 
@@ -550,17 +550,17 @@ The function described is defined using 
 file.  @xref{Function Files}.
 
 @item Mapping Function
 @cindex mapping function
 The function described works element-by-element for matrix and vector
 arguments.
 @end table
 
-@node A Sample Command Description, A Sample Variable Description, A Sample Function Description, Format of Descriptions
+@node A Sample Command Description
 @subsubsection A Sample Command Description
 @cindex command descriptions
 
 Command descriptions have a format similar to function descriptions,
 except that the word `Function' is replaced by `Command.  Commands are
 functions that may called without surrounding their arguments in
 parentheses.  For example, here is the description for Octave's
 @code{cd} command:
@@ -568,17 +568,17 @@ parentheses.  For example, here is the d
 @deffn {Command} cd dir
 @deffnx {Command} chdir dir
 Change the current working directory to @var{dir}.  For example,
 @kbd{cd ~/octave} changes the current working directory to
 @file{~/octave}.  If the directory does not exist, an error message is
 printed and the working directory is not changed.
 @end deffn
 
-@node A Sample Variable Description,  , A Sample Command Description, Format of Descriptions
+@node A Sample Variable Description
 @subsubsection A Sample Variable Description
 @cindex variable descriptions
 
 A @dfn{variable} is a name that can hold a value.  Although any variable
 can be set by the user, @dfn{built-in variables} typically exist
 specifically so that users can change them to alter the way Octave
 behaves (built-in variables are also sometimes called @dfn{user
 options}).  Ordinary variables and built-in variables are described
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -48,26 +48,26 @@ variable @code{page_screen_output} to 0.
 @c warning: pending computations and output may be lost
 @c warning: broken pipe
 
 @menu
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 @end menu
 
-@node Basic Input and Output, C-Style I/O Functions, Input and Output, Input and Output
+@node Basic Input and Output
 @section Basic Input and Output
 
 @menu
 * Terminal Output::             
 * Terminal Input::              
 * Simple File I/O::             
 @end menu
 
-@node Terminal Output, Terminal Input, Basic Input and Output, Basic Input and Output
+@node Terminal Output
 @subsection Terminal Output
 
 Since Octave normally prints the value of an expression as soon as it
 has been evaluated, the simplest of all I/O functions is a simple
 expression.  For example, the following expression will display the
 value of pi
 
 @example
@@ -88,17 +88,17 @@ values with @code{disp} and through the 
 @DOCSTRING(fdisp)
 
 @DOCSTRING(disp)
 
 @DOCSTRING(format)
 
 @DOCSTRING(print_answer_id_name)
 
-@node Terminal Input, Simple File I/O, Terminal Output, Basic Input and Output
+@node Terminal Input
 @subsection Terminal Input
 
 Octave has three functions that make it easy to prompt users for
 input.  The @code{input} and @code{menu} functions are normally
 used for managing an interactive dialog with a user, and the
 @code{keyboard} function is normally used for doing simple debugging.
 
 @DOCSTRING(input)
@@ -111,17 +111,17 @@ For both @code{input} and @code{keyboard
 history and editing functions are available at the prompt.
 
 Octave also has a function that makes it possible to get a single
 character from the keyboard without requiring the user to type a
 carriage return.
 
 @DOCSTRING(kbhit)
 
-@node Simple File I/O,  , Terminal Input, Basic Input and Output
+@node Simple File I/O
 @subsection Simple File I/O
 
 The @code{save} and @code{load} commands allow data to be written to and
 read from disk files in various formats.  The default format of files
 written by the @code{save} command can be controlled using the built-in
 variables @code{default_save_format} and @code{save_precision}.
 
 Note that Octave can not yet save or load structure variables or any
@@ -137,17 +137,17 @@ that controls whether variables are save
 @DOCSTRING(default_save_format)
 
 @DOCSTRING(save_precision)
 
 @DOCSTRING(save_header_format_string)
 
 @DOCSTRING(load)
 
-@node C-Style I/O Functions,  , Basic Input and Output, Input and Output
+@node C-Style I/O Functions
 @section C-Style I/O Functions
 
 Octave's C-style input and output functions provide most of the
 functionality of the C programming language's standard I/O library.  The
 argument lists for some of the input functions are slightly different,
 however, because Octave has no way of passing arguments by reference.
 
 In the following, @var{file} refers to a file name and @code{fid} refers
@@ -181,38 +181,38 @@ make your programs easier to understand.
 * Numeric Input Conversions::   
 * String Input Conversions::    
 * Binary I/O::                  
 * Temporary Files::             
 * EOF and Errors::              
 * File Positioning::            
 @end menu
 
-@node Opening and Closing Files, Simple Output, C-Style I/O Functions, C-Style I/O Functions
+@node Opening and Closing Files
 @subsection Opening and Closing Files
 
 @DOCSTRING(fopen)
 
 @DOCSTRING(fclose)
 
-@node Simple Output, Line-Oriented Input, Opening and Closing Files, C-Style I/O Functions
+@node Simple Output
 @subsection Simple Output
 
 @DOCSTRING(fputs)
 
 @DOCSTRING(puts)
 
-@node Line-Oriented Input, Formatted Output, Simple Output, C-Style I/O Functions
+@node Line-Oriented Input
 @subsection Line-Oriented Input
 
 @DOCSTRING(fgetl)
 
 @DOCSTRING(fgets)
 
-@node Formatted Output, Output Conversion for Matrices, Line-Oriented Input, C-Style I/O Functions
+@node Formatted Output
 @subsection Formatted Output
 
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
 modelled after the C language functions of the same name, but they
 interpret the format template differently in order to improve the
 performance of printing vector and matrix values.
@@ -271,17 +271,17 @@ to apply.  These slightly alter the ordi
 For example, most conversion specifications permit you to specify a
 minimum field width and a flag indicating whether you want the result
 left- or right-justified within the field.
 
 The specific flags and modifiers that are permitted and their
 interpretation vary depending on the particular conversion.  They're all
 described in more detail in the following sections.
 
-@node Output Conversion for Matrices, Output Conversion Syntax, Formatted Output, C-Style I/O Functions
+@node Output Conversion for Matrices
 @subsection Output Conversion for Matrices
 
 When given a matrix value, Octave's formatted output functions cycle
 through the format template until all the values in the matrix have been
 printed.  For example,
 
 @example
 @group
@@ -305,17 +305,17 @@ printf ("%4.2f %10.2e %8.4g\n", [1, 2], 
 
      @print{} 1.00   2.00e+00        3
      @print{} 4.00
 @end group
 @end example
 
 If this is not what you want, use a series of calls instead of just one.
 
-@node Output Conversion Syntax, Table of Output Conversions, Output Conversion for Matrices, C-Style I/O Functions
+@node Output Conversion Syntax
 @subsection Output Conversion Syntax
 
 This section provides details about the precise syntax of conversion
 specifications that can appear in a @code{printf} template
 string.
 
 Characters in the template string that are not part of a
 conversion specification are printed as-is to the output stream.
@@ -380,17 +380,17 @@ compatibility with the C language @code{
 A character that specifies the conversion to be applied.
 @end itemize
 
 The exact options that are permitted and how they are interpreted vary 
 between the different conversion specifiers.  See the descriptions of the
 individual conversions for information about the particular options that
 they use.
 
-@node Table of Output Conversions, Integer Conversions, Output Conversion Syntax, C-Style I/O Functions
+@node Table of Output Conversions
 @subsection Table of Output Conversions
 @cindex output conversions, for @code{printf}
 
 Here is a table summarizing what all the different conversions do:
 
 @table @asis
 @item @samp{%d}, @samp{%i}
 Print an integer as a signed decimal number.  @xref{Integer
@@ -439,17 +439,17 @@ Print a literal @samp{%} character.  @xr
 If the syntax of a conversion specification is invalid, unpredictable
 things will happen, so don't do this.  If there aren't enough function
 arguments provided to supply values for all the conversion
 specifications in the template string, or if the arguments are not of
 the correct types, the results are unpredictable.  If you supply more
 arguments than conversion specifications, the extra argument values are
 simply ignored; this is sometimes useful.
 
-@node Integer Conversions, Floating-Point Conversions, Table of Output Conversions, C-Style I/O Functions
+@node Integer Conversions
 @subsection Integer Conversions
 
 This section describes the options for the @samp{%d}, @samp{%i},
 @samp{%o}, @samp{%u}, @samp{%x}, and @samp{%X} conversion
 specifications.  These conversions print integers in various formats.
 
 The @samp{%d} and @samp{%i} conversion specifications both print an
 numeric argument as a signed decimal number; while @samp{%o},
@@ -489,17 +489,17 @@ flag is also specified, or if a precisio
 @end table
 
 If a precision is supplied, it specifies the minimum number of digits to
 appear; leading zeros are produced if necessary.  If you don't specify a
 precision, the number is printed with as many digits as it needs.  If
 you convert a value of zero with an explicit precision of zero, then no
 characters at all are produced.
 
-@node Floating-Point Conversions, Other Output Conversions, Integer Conversions, C-Style I/O Functions
+@node Floating-Point Conversions
 @subsection Floating-Point Conversions
 
 This section discusses the conversion specifications for floating-point
 numbers: the @samp{%f}, @samp{%e}, @samp{%E}, @samp{%g}, and @samp{%G}
 conversions.
 
 The @samp{%f} conversion prints its argument in fixed-point notation,
 producing output of the form
@@ -557,17 +557,17 @@ is explicitly @code{0}, this suppresses 
 entirely.  For the @samp{%g} and @samp{%G} conversions, the precision
 specifies how many significant digits to print.  Significant digits are
 the first digit before the decimal point, and all the digits after it.
 If the precision is @code{0} or not specified for @samp{%g} or
 @samp{%G}, it is treated like a value of @code{1}.  If the value being
 printed cannot be expressed precisely in the specified number of digits,
 the value is rounded to the nearest number that fits.
 
-@node Other Output Conversions, Formatted Input, Floating-Point Conversions, C-Style I/O Functions
+@node Other Output Conversions
 @subsection Other Output Conversions
 
 This section describes miscellaneous conversions for @code{printf}.
 
 The @samp{%c} conversion prints a single character.  The @samp{-} 
 flag can be used to specify left-justification in the field, but no
 other flags are defined, and no precision or type modifier can be given.
 For example:
@@ -589,17 +589,17 @@ are defined for this conversion.  For ex
 
 @smallexample
 printf ("%3s%-6s", "no", "where");
 @end smallexample
 
 @noindent
 prints @samp{ nowhere } (note the leading and trailing spaces).
 
-@node Formatted Input, Input Conversion Syntax, Other Output Conversions, C-Style I/O Functions
+@node Formatted Input
 @subsection Formatted Input
 
 Octave provides the @code{scanf}, @code{fscanf}, and @code{sscanf}
 functions to read formatted input.  There are two forms of each of these
 functions.  One can be used to extract vectors of data from a file, and
 the other is more `C-like'.
 
 @DOCSTRING(fscanf)
@@ -626,17 +626,17 @@ read from the stream, and @code{scanf} r
 successfully converted.
 @cindex matching failure, in @code{scanf}
 
 The formatted input functions are not used as frequently as the
 formatted output functions.  Partly, this is because it takes some care
 to use them properly.  Another reason is that it is difficult to recover
 from a matching error.
 
-@node Input Conversion Syntax, Table of Input Conversions, Formatted Input, C-Style I/O Functions
+@node Input Conversion Syntax
 @subsection Input Conversion Syntax
 
 A @code{scanf} template string is a string that contains ordinary
 multibyte characters interspersed with conversion specifications that
 start with @samp{%}.
 
 Any whitespace character in the template causes any number of whitespace
 characters in the input stream to be read and discarded.  The whitespace
@@ -688,17 +688,17 @@ compatibility with the C language @code{
 A character that specifies the conversion to be applied.
 @end itemize
 
 The exact options that are permitted and how they are interpreted vary 
 between the different conversion specifiers.  See the descriptions of the
 individual conversions for information about the particular options that
 they allow.
 
-@node Table of Input Conversions, Numeric Input Conversions, Input Conversion Syntax, C-Style I/O Functions
+@node Table of Input Conversions
 @subsection Table of Input Conversions
 @cindex input conversions, for @code{scanf}
 
 Here is a table that summarizes the various conversion specifications:
 
 @table @asis
 @item @samp{%d}
 Matches an optionally signed integer written in decimal.  @xref{Numeric
@@ -741,17 +741,17 @@ corresponding argument is used.
 
 If the syntax of a conversion specification is invalid, the behavior is
 undefined.  If there aren't enough function arguments provided to supply
 addresses for all the conversion specifications in the template strings
 that perform assignments, or if the arguments are not of the correct
 types, the behavior is also undefined.  On the other hand, extra
 arguments are simply ignored.
 
-@node Numeric Input Conversions, String Input Conversions, Table of Input Conversions, C-Style I/O Functions
+@node Numeric Input Conversions
 @subsection Numeric Input Conversions
 
 This section describes the @code{scanf} conversions for reading numeric
 values.
 
 The @samp{%d} conversion matches an optionally signed integer in decimal
 radix.
 
@@ -767,17 +767,17 @@ The @samp{%o}, @samp{%u}, and @samp{%x} 
 integers in octal, decimal, and hexadecimal radices, respectively.
 
 The @samp{%X} conversion is identical to the @samp{%x} conversion.  They
 both permit either uppercase or lowercase letters to be used as digits.
 
 Unlike the C language @code{scanf}, Octave ignores the @samp{h},
 @samp{l}, and @samp{L} modifiers.
 
-@node String Input Conversions, Binary I/O, Numeric Input Conversions, C-Style I/O Functions
+@node String Input Conversions
 @subsection String Input Conversions
 
 This section describes the @code{scanf} input conversions for reading
 string and character values: @samp{%s} and @samp{%c}.  
 
 The @samp{%c} conversion is the simplest: it matches a fixed number of
 characters, always.  The maximum field with says how many characters to
 read; if you don't specify the maximum, the default is 1.  This
@@ -795,44 +795,44 @@ For example, reading the input:
  hello, world
 @end smallexample
 
 @noindent
 with the conversion @samp{%10c} produces @code{" hello, wo"}, but
 reading the same input with the conversion @samp{%10s} produces
 @code{"hello,"}.
 
-@node Binary I/O, Temporary Files, String Input Conversions, C-Style I/O Functions
+@node Binary I/O
 @subsection Binary I/O
 
 Octave can read and write binary data using the functions @code{fread}
 and @code{fwrite}, which are patterned after the standard C functions
 with the same names.  The are able to automatically swap the byte order
 of integer data and convert among ths supported floating point formats
 as the data are read.
 
 @DOCSTRING(fread)
 
 @DOCSTRING(fwrite)
 
-@node Temporary Files, EOF and Errors, Binary I/O, C-Style I/O Functions
+@node Temporary Files
 @subsection Temporary Files
 
 @DOCSTRING(tmpnam)
 
-@node EOF and Errors, File Positioning, Temporary Files, C-Style I/O Functions
+@node EOF and Errors
 @subsection End of File and Errors
 
 @DOCSTRING(feof)
 
 @DOCSTRING(ferror)
 
 @DOCSTRING(freport)
 
-@node File Positioning,  , EOF and Errors, C-Style I/O Functions
+@node File Positioning
 @subsection File Positioning
 
 Three functions are available for setting and determining the position of
 the file pointer for a given file.
 
 @DOCSTRING(ftell)
 
 @DOCSTRING(fseek)
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -1,27 +1,27 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Linear Algebra, Nonlinear Equations, Arithmetic, Top
+@node Linear Algebra
 @chapter Linear Algebra
 
 This chapter documents the linear algebra functions of Octave.
 Reference material for many of these functions may be found in
 Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
 1989, and in @cite{@sc{Lapack} Users' Guide}, SIAM, 1992.
 
 @menu
 * Basic Matrix Functions::      
 * Matrix Factorizations::       
 * Functions of a Matrix::       
 @end menu
 
-@node Basic Matrix Functions, Matrix Factorizations, Linear Algebra, Linear Algebra
+@node Basic Matrix Functions
 @section Basic Matrix Functions
 
 @DOCSTRING(balance)
 
 @DOCSTRING(cond)
 
 @DOCSTRING(det)
 
@@ -42,17 +42,17 @@ 1989, and in @cite{@sc{Lapack} Users' Gu
 @DOCSTRING(orth)
 
 @DOCSTRING(pinv)
 
 @DOCSTRING(rank)
 
 @DOCSTRING(trace)
 
-@node Matrix Factorizations, Functions of a Matrix, Basic Matrix Functions, Linear Algebra
+@node Matrix Factorizations
 @section Matrix Factorizations
 
 @DOCSTRING(chol)
 
 @DOCSTRING(hess)
 
 @DOCSTRING(lu)
 
@@ -67,17 +67,17 @@ 1989, and in @cite{@sc{Lapack} Users' Gu
 @DOCSTRING(svd)
 
 @c XXX FIXME XXX -- should there be a new section here?
 
 @DOCSTRING(housh)
 
 @DOCSTRING(krylov)
 
-@node Functions of a Matrix,  , Matrix Factorizations, Linear Algebra
+@node Functions of a Matrix
 @section Functions of a Matrix
 
 @DOCSTRING(expm)
 
 @DOCSTRING(logm)
 
 @DOCSTRING(sqrtm)
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -1,30 +1,30 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Matrix Manipulation, Arithmetic, Plotting, Top
+@node Matrix Manipulation
 @chapter Matrix Manipulation
 
 There are a number of functions available for checking to see if the
 elements of a matrix meet some condition, and for rearranging the
 elements of a matrix.  For example, Octave can easily tell you if all
 the elements of a matrix are finite, or are less than some specified
 value.  Octave can also rotate the elements, extract the upper- or
 lower-triangular parts, or sort the columns of a matrix.
 
 @menu
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
 * Special Utility Matrices::    
 * Famous Matrices::             
 @end menu
 
-@node Finding Elements and Checking Conditions, Rearranging Matrices, Matrix Manipulation, Matrix Manipulation
+@node Finding Elements and Checking Conditions
 @section Finding Elements and Checking Conditions
 
 The functions @code{any} and @code{all} are useful for determining
 whether any or all of the elements of a matrix satisfy some condition.
 The @code{find} function is also useful in determining which elements of
 a matrix meet a specified condition.
 
 @DOCSTRING(any)
@@ -61,17 +61,17 @@ Note that in conditional contexts (like 
 @DOCSTRING(isnan)
 
 @DOCSTRING(finite)
 
 @DOCSTRING(find)
         
 @DOCSTRING(common_size)
 
-@node Rearranging Matrices, Special Utility Matrices, Finding Elements and Checking Conditions, Matrix Manipulation
+@node Rearranging Matrices
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
 @DOCSTRING(rot90)
 
@@ -105,17 +105,17 @@ a (i, :)
 @DOCSTRING(tril)
 
 @DOCSTRING(vec)
 
 @DOCSTRING(vech)
 
 @DOCSTRING(prepad)
 
-@node Special Utility Matrices, Famous Matrices, Rearranging Matrices, Matrix Manipulation
+@node Special Utility Matrices
 @section Special Utility Matrices
 
 @DOCSTRING(eye)
 
 @DOCSTRING(ones)
 
 @DOCSTRING(zeros)
 
@@ -189,17 +189,17 @@ create vectors with evenly or logarithmi
 @DOCSTRING(linspace)
 
 @DOCSTRING(logspace)
 
 @DOCSTRING(treat_neg_dim_as_zero)
 
 @DOCSTRING(ok_to_lose_imaginary_part)
 
-@node Famous Matrices,  , Special Utility Matrices, Matrix Manipulation
+@node Famous Matrices
 @section Famous Matrices
 
 The following functions return famous matrix forms.
 
 @DOCSTRING(hankel)
 
 @DOCSTRING(hilb)
 
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Nonlinear Equations, Quadrature, Linear Algebra, Top
+@node Nonlinear Equations
 @chapter Nonlinear Equations
 @cindex nonlinear equations
 @cindex equations, nonlinear
 
 Octave can solve sets of nonlinear equations of the form
 @iftex
 @tex
 $$
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Numeric Data Types, Strings, Data Types, Top
+@node Numeric Data Types
 @chapter Numeric Data Types
 @cindex numeric constant
 @cindex numeric value
 
 A @dfn{numeric constant} may be a scalar, a vector, or a matrix, and it
 may contain complex values.
 
 The simplest form of a numeric constant, a scalar, is a single number
@@ -67,17 +67,17 @@ You may also use @samp{j}, @samp{I}, or 
 
 @menu
 * Matrices::                    
 * Ranges::                      
 * Logical Values::              
 * Predicates for Numeric Objects::  
 @end menu
 
-@node Matrices, Ranges, Numeric Data Types, Numeric Data Types
+@node Matrices
 @section Matrices
 @cindex matrices
 
 @opindex [
 @opindex ]
 @opindex ;
 @opindex ,
 
@@ -254,17 +254,17 @@ doing so is not recommended, because it 
 easily be misinterpreted.
 
 @DOCSTRING(fixed_point_format)
 
 @menu
 * Empty Matrices::              
 @end menu
 
-@node Empty Matrices,  , Matrices, Matrices
+@node Empty Matrices
 @subsection Empty Matrices
 
 A matrix may have one or both dimensions zero, and operations on empty
 matrices are handled as described by Carl de Boor in @cite{An Empty
 Exercise}, SIGNUM, Volume 25, pages 2--6, 1990 and C. N. Nett and W. M.
 Haddad, in @cite{A System-Theoretic Appropriate Realization of the Empty
 Matrix Concept}, IEEE Transactions on Automatic Control, Volume 38,
 Number 5, May 1993.
@@ -322,17 +322,17 @@ an error.
 @DOCSTRING(empty_list_elements_ok)
 
 When Octave parses a matrix expression, it examines the elements of the
 list to determine whether they are all constants.  If they are, it
 replaces the list with a single matrix constant.
 
 @DOCSTRING(propagate_empty_matrices)
 
-@node Ranges, Logical Values, Matrices, Numeric Data Types
+@node Ranges
 @section Ranges
 @cindex range expressions
 @cindex expression, range
 
 @opindex colon
 
 A @dfn{range} is a convenient way to write a row vector with evenly
 spaced elements.  A range expression is defined by the value of the first
@@ -369,24 +369,24 @@ Octave uses floating point arithmetic to
 range.  If it is important to include the endpoints of a range and the
 number of elements is known, you should use the @code{linspace} function
 instead (@pxref{Special Utility Matrices}).
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
-@node Logical Values, Predicates for Numeric Objects, Ranges, Numeric Data Types
+@node Logical Values
 @section Logical Values
 
 @DOCSTRING(true)
 
 @DOCSTRING(false)
 
-@node Predicates for Numeric Objects,  , Logical Values, Numeric Data Types
+@node Predicates for Numeric Objects
 @section Predicates for Numeric Objects
 
 @DOCSTRING(isnumeric)
 
 @DOCSTRING(isreal)
 
 @DOCSTRING(iscomplex)
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -102,17 +102,17 @@ Portions of this document have been adap
 @code{readline}, @code{gcc}, and C library manuals, published by the Free
 Software Foundation, 59 Temple Place---Suite 330, Boston, MA
 02111--1307, USA.
 @end titlepage
 
 @contents
 
 @ifinfo
-@node Top, Preface, (dir), (dir)
+@node Top
 @top
 
 This manual documents how to run, install and port GNU Octave, as well
 as its new features and incompatibilities, and how to report bugs.
 It corresponds to GNU Octave version @value{VERSION}.
 @end ifinfo
 
 @menu
@@ -490,16 +490,17 @@ Grammar
 @include container.texi
 @include stream.texi
 @include var.texi
 @include expr.texi
 @include eval.texi
 @include stmt.texi
 @include func.texi
 @include errors.texi
+@include debug.texi
 @include io.texi
 @include plot.texi
 @include matrix.texi
 @include arith.texi
 @include linalg.texi
 @include nonlin.texi
 @include quad.texi
 @include diffeq.texi
diff --git a/doc/interpreter/op-idx.txi b/doc/interpreter/op-idx.txi
--- a/doc/interpreter/op-idx.txi
+++ b/doc/interpreter/op-idx.txi
@@ -1,8 +1,8 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Operator Index, , Function Index, Top
+@node Operator Index
 @unnumbered Operator Index
 
 @printindex op
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -1,33 +1,33 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Optimization, Statistics, Differential Equations, Top
+@node Optimization
 @chapter Optimization
 
 @menu
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 @end menu
 
 @c @cindex linear programming
 @cindex quadratic programming
 @cindex nonlinear programming
 @cindex optimization
 @cindex LP
 @cindex QP
 @cindex NLP
 
-@node Quadratic Programming, Nonlinear Programming, Optimization, Optimization
+@node Quadratic Programming
 @section Quadratic Programming
 
-@node Nonlinear Programming, Linear Least Squares, Quadratic Programming, Optimization
+@node Nonlinear Programming
 @section Nonlinear Programming
 
-@node Linear Least Squares,  , Nonlinear Programming, Optimization
+@node Linear Least Squares
 @section Linear Least Squares
 
 @DOCSTRING(gls)
 
 @DOCSTRING(ols)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Plotting, Matrix Manipulation, Input and Output, Top
+@node Plotting
 @chapter Plotting
 
 All of Octave's plotting functions use @code{gnuplot} to handle the
 actual graphics.  There are two low-level functions, @code{gplot} and
 @code{gsplot}, that behave almost exactly like the corresponding
 @code{gnuplot} functions @code{plot} and @code{splot}.  A number of
 other higher level plotting functions, patterned after the graphics
 functions found in @sc{Matlab} version 3.5, are also available.
@@ -19,17 +19,17 @@ low-level plotting functions.
 * Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Interaction with gnuplot::    
 @end menu
 
-@node Two-Dimensional Plotting, Specialized Two-Dimensional Plots, Plotting, Plotting
+@node Two-Dimensional Plotting
 @section Two-Dimensional Plotting
 
 @deffn {Command} gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 2-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
 qualifiers may appear in any order after the expression.  You may plot
@@ -191,17 +191,17 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(shg)
 
 @DOCSTRING(closeplot)
 
 @DOCSTRING(purge_tmp_files)
 
 @DOCSTRING(axis)
 
-@node Specialized Two-Dimensional Plots, Three-Dimensional Plotting, Two-Dimensional Plotting, Plotting
+@node Specialized Two-Dimensional Plots
 @section Specialized Two-Dimensional Plots
 
 @DOCSTRING(bar)
 
 @DOCSTRING(contour)
 
 @DOCSTRING(hist)
 
@@ -210,17 +210,17 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(polar)
 
 @DOCSTRING(semilogx)
 
 @DOCSTRING(semilogy)
 
 @DOCSTRING(stairs)
 
-@node Three-Dimensional Plotting, Plot Annotations, Specialized Two-Dimensional Plots, Plotting
+@node Three-Dimensional Plotting
 @section Three-Dimensional Plotting
 
 @deffn {Command} gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 3-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
 qualifiers may appear in any order after the expression.  You may plot
@@ -293,28 +293,28 @@ but not @code{rand (5, 30)}.
 The @sc{Matlab}-style three-dimensional plotting commands are:
 
 @DOCSTRING(mesh)
 
 @DOCSTRING(meshgrid)
 
 @DOCSTRING(meshdom)
 
-@node Plot Annotations, Multiple Plots on One Page, Three-Dimensional Plotting, Plotting
+@node Plot Annotations
 @section Plot Annotations
 
 @DOCSTRING(grid)
 
 @DOCSTRING(title)
 
 @DOCSTRING(bottom_title)
 
 @DOCSTRING(xlabel)
 
-@node Multiple Plots on One Page, Multiple Plot Windows, Plot Annotations, Plotting
+@node Multiple Plots on One Page
 @section Multiple Plots on One Page
 
 The following functions all require a version of @code{gnuplot} that
 supports the multiplot feature.
 
 @DOCSTRING(mplot)
 
 @DOCSTRING(multiplot)
@@ -324,22 +324,22 @@ supports the multiplot feature.
 @DOCSTRING(plot_border)
 
 @DOCSTRING(subplot)
 
 @DOCSTRING(subwindow)
 
 @DOCSTRING(top_title)
 
-@node Multiple Plot Windows, Interaction with gnuplot, Multiple Plots on One Page, Plotting
+@node Multiple Plot Windows
 @section Multiple Plot Windows
 
 @DOCSTRING(figure)
 
-@node Interaction with gnuplot,  , Multiple Plot Windows, Plotting
+@node Interaction with gnuplot
 @section Interaction with @code{gnuplot}
 
 @DOCSTRING(gnuplot_binary)
 
 @DOCSTRING(gnuplot_has_frames)
 
 @DOCSTRING(gnuplot_has_multiplot)
 
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Polynomial Manipulations, Control Theory, Sets, Top
+@node Polynomial Manipulations
 @chapter Polynomial Manipulations
 
 In Octave, a polynomial is represented by its coefficients (arranged
 in descending order).  For example, a vector
 @iftex
 @end iftex
 @ifinfo
  $c$
diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Preface, Introduction, Top, Top
+@node Preface
 @unnumbered Preface
 @cindex contributors
 @cindex history
 
 Octave was originally intended to be companion software for an
 undergraduate-level textbook on chemical reactor design being written by
 James B. Rawlings of the University of Wisconsin-Madison and John
 G. Ekerdt of the University of Texas.
@@ -48,17 +48,17 @@ Octave more useful by writing and contri
 it, and by reporting any problems you may have.
 
 @menu
 * Acknowledgements::            
 * How You Can Contribute to Octave::  
 * Distribution::                
 @end menu
 
-@node Acknowledgements, How You Can Contribute to Octave, Preface, Preface
+@node Acknowledgements
 @unnumberedsec Acknowledgements
 @cindex acknowledgements
 
 Many people have already contributed to Octave's development.  In
 addition to John W. Eaton, the following people have helped write parts
 of Octave or helped out in various other ways.
 
 @c Once lp_solve has been added, don't forget to include the lp_solve
@@ -250,17 +250,17 @@ Department of Chemical Engineering.
 
 @item
 Richard Stallman, for writing GNU.
 @end itemize
 
 This project would not have been possible without the GNU software used
 in and used to produce Octave.
 
-@node How You Can Contribute to Octave, Distribution, Acknowledgements, Preface
+@node How You Can Contribute to Octave
 @unnumberedsec How You Can Contribute to Octave
 @cindex contributing to Octave
 @cindex funding Octave development
 
 There are a number of ways that you can contribute to help make Octave a
 better system.  Perhaps the most important way to contribute is to write
 high-quality code for solving new problems, and to make your code freely
 available for others to use.
@@ -270,17 +270,17 @@ continue its development.  Even a modest
 could make a significant difference in the amount of time that is
 available for development and support.
 
 If you cannot provide funding or contribute code, you can still help
 make Octave better and more reliable by reporting any bugs you find and
 by offering suggestions for ways to improve Octave.  @xref{Trouble}, for
 tips on how to write useful bug reports.
 
-@node Distribution,  , How You Can Contribute to Octave, Preface
+@node Distribution
 @unnumberedsec Distribution
 @cindex distribution of Octave
 
 Octave is @dfn{free} software.  This means that everyone is free to
 use it and free to redistribute it on certain conditions.  Octave is not
 in the public domain.  It is copyrighted and there are restrictions on
 its distribution, but the restrictions are designed to ensure that
 others will have the same freedom to use and redistribute Octave that
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -1,21 +1,21 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Quadrature, Differential Equations, Nonlinear Equations, Top
+@node Quadrature
 @chapter Quadrature
 
 @menu
 * Functions of One Variable::   
 * Orthogonal Collocation::      
 @end menu
 
-@node Functions of One Variable, Orthogonal Collocation, Quadrature, Quadrature
+@node Functions of One Variable
 @section Functions of One Variable
 
 @DOCSTRING(quad)
 
 @DOCSTRING(quad_options)
 
 Here is an example of using @code{quad} to integrate the function
 @iftex
@@ -65,17 +65,17 @@ Then we simply call quad:
      @result{} 1.1522e-07
 @end group
 @end example
 
 Although @code{quad} returns a nonzero value for @var{ier}, the result
 is reasonably accurate (to see why, examine what happens to the result
 if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).
 
-@node Orthogonal Collocation,  , Functions of One Variable, Quadrature
+@node Orthogonal Collocation
 @section Orthogonal Collocation
 
 @DOCSTRING(colloc)
 
 Here is an example of using @code{colloc} to generate weight matrices
 for solving the second order differential equation
 @iftex
 @tex
diff --git a/doc/interpreter/quaternion.txi b/doc/interpreter/quaternion.txi
--- a/doc/interpreter/quaternion.txi
+++ b/doc/interpreter/quaternion.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Quaternions, System Utilities, Audio Processing, Top
+@node Quaternions
 @chapter Quaternions
 
 Quaternions are hypercomplex numbers used to represent spatial
 rotations in three dimensions.  This set of routines provides a useful
 basis for working with quaternions in Octave.  A tutorial is in the
 Octave source, scripts/quaternion/quaternion.ps.
 
 These functions were written by A. S. Hodel, Associate Professor,
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Sets, Polynomial Manipulations, Financial Functions, Top
+@node Sets
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
 set is defined as a collection unique elements.
 
 @DOCSTRING(create_set)
 
 @DOCSTRING(union)
diff --git a/doc/interpreter/signal.txi b/doc/interpreter/signal.txi
--- a/doc/interpreter/signal.txi
+++ b/doc/interpreter/signal.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Signal Processing, Image Processing, Control Theory, Top
+@node Signal Processing
 @chapter Signal Processing
 
 I hope that someday Octave will include more signal processing
 functions.  If you would like to help improve Octave in this area,
 please contact @email{bug-octave@@bevo.che.wisc.edu}.
 
 @DOCSTRING(detrend)
 
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -1,27 +1,27 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Statistics, Financial Functions, Optimization, Top
+@node Statistics
 @chapter Statistics
 
 I hope that someday Octave will include more statistics functions.  If
 you would like to help improve Octave in this area, please contact
 @email{bug-octave@@bevo.che.wisc.edu}.
 
 @menu
 * Basic Statistical Functions::  
 * Tests::                       
 * Models::                      
 * Distributions::               
 @end menu
 
-@node Basic Statistical Functions, Tests, Statistics, Statistics
+@node Basic Statistical Functions
 @section Basic Statistical Functions
 
 @DOCSTRING(mean)
 
 @DOCSTRING(median)
 
 @DOCSTRING(std)
 
@@ -74,17 +74,17 @@ you would like to help improve Octave in
 @DOCSTRING(cut)
 
 @DOCSTRING(cor)
 
 @DOCSTRING(cloglog)
 
 @DOCSTRING(center)
 
-@node Tests, Models, Basic Statistical Functions, Statistics
+@node Tests
 @section Tests
 
 @DOCSTRING(anova)
 
 @DOCSTRING(bartlett_test)
 
 @DOCSTRING(chisquare_test_homogeneity)
 
@@ -127,22 +127,22 @@ you would like to help improve Octave in
 @DOCSTRING(welch_test)
 
 @DOCSTRING(wilcoxon_test)
 
 @DOCSTRING(z_test)
 
 @DOCSTRING(z_test_2)
 
-@node Models, Distributions, Tests, Statistics
+@node Models
 @section Models
 
 @DOCSTRING(logistic_regression)
 
-@node Distributions,  , Models, Statistics
+@node Distributions
 @section Distributions
 
 @DOCSTRING(beta_cdf)
 
 @DOCSTRING(beta_inv)
 
 @DOCSTRING(beta_pdf)
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Statements, Functions and Scripts, Evaluation, Top
+@node Statements
 @chapter Statements
 @cindex statements
 
 Statements may be a simple constant expression or a complicated list of
 nested loops and conditional statements.
 
 @dfn{Control statements} such as @code{if}, @code{while}, and so on
 control the flow of execution in Octave programs.  All the control
@@ -39,17 +39,17 @@ The list of statements contained between
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 @end menu
 
-@node The if Statement, The switch Statement, Statements, Statements
+@node The if Statement
 @section The @code{if} Statement
 @cindex @code{if} statement
 @cindex @code{else} statement
 @cindex @code{elseif} statement
 @cindex @code{endif} statement
 
 The @code{if} statement is Octave's decision-making statement.  There
 are three basic forms of an @code{if} statement.  In its simplest form,
@@ -190,17 +190,17 @@ else
 @end example
 
 @noindent
 using the indentation to show how Octave groups the statements.
 @xref{Functions and Scripts}.
 
 @DOCSTRING(warn_assign_as_truth_value)
 
-@node The switch Statement, The while Statement, The if Statement, Statements
+@node The switch Statement
 @section The @code{switch} Statement
 @cindex @code{switch} statement
 @cindex @code{case} statement
 @cindex @code{otherwise} statement
 @cindex @code{endswitch} statement
 
 The @code{switch} statement was introduced in Octave 2.0.5.  It should
 be considered experimental, and details of the implementation may change
@@ -289,17 +289,17 @@ The implementation is simple-minded and 
 performance improvement over an equivalent @code{if} block, even if all
 the labels are integer constants.  Perhaps a future variation on this
 could detect all constant integer labels and improve performance by
 using a jump table.
 @end itemize
 
 @DOCSTRING(warn_variable_switch_label)
 
-@node The while Statement, The do-until Statement, The switch Statement, Statements
+@node The while Statement
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
 be) executed two or more times in succession.
@@ -361,17 +361,17 @@ reaches 11.
 
 A newline is not required between the condition and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
 @xref{The if Statement}, for a description of the variable
 @code{warn_assign_as_truth_value}.
 
-@node The do-until Statement, The for Statement, The while Statement, Statements
+@node The do-until Statement
 @section The @code{do-until} Statement
 @cindex @code{do-until} statement
 
 The @code{do-until} statement is similar to the @code{while} statement,
 except that it repeatedly executes a statement until a condition becomes
 true, and the test of the condition is at the end of the loop, so the
 body of the loop is always executed at least once.  As with the
 condition in an @code{if} statement, the condition in a @code{do-until}
@@ -411,17 +411,17 @@ until (i == 10)
 
 A newline is not required between the @code{do} keyword and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
 @xref{The if Statement}, for a description of the variable
 @code{warn_assign_as_truth_value}.
 
-@node The for Statement, The break Statement, The do-until Statement, Statements
+@node The for Statement
 @section The @code{for} Statement
 @cindex @code{for} statement
 @cindex @code{endfor} statement
 
 The @code{for} statement makes it more convenient to count iterations of a
 loop.  The general form of the @code{for} statement looks like this:
 
 @example
@@ -476,17 +476,17 @@ loops, the Octave language has both stat
 Counting the number of iterations is very common in loops and it can be
 easier to think of this counting as part of looping rather than as
 something to do inside the loop.
 
 @menu
 * Looping Over Structure Elements::  
 @end menu
 
-@node Looping Over Structure Elements,  , The for Statement, The for Statement
+@node Looping Over Structure Elements
 @subsection Looping Over Structure Elements
 @cindex structure elements, looping over
 @cindex looping over structure elements
 
 A special form of the @code{for} statement allows you to loop over all
 the elements of a structure:
 
 @example
@@ -530,17 +530,17 @@ The elements are not accessed in any par
 cycle through the list in a particular way, you will have to use the
 function @code{struct_elements} and sort the list yourself.
 
 The @var{key} variable may also be omitted.  If it is, the brackets are
 also optional.  This is useful for cycling through the values of all the
 structure elements when the names of the elements do not need to be
 known.
 
-@node The break Statement, The continue Statement, The for Statement, Statements
+@node The break Statement
 @section The @code{break} Statement
 @cindex @code{break} statement
 
 The @code{break} statement jumps out of the innermost @code{for} or
 @code{while} loop that encloses it.  The @code{break} statement may only
 be used within the body of a loop.  The following example finds the
 smallest divisor of a given integer, and also identifies prime numbers:
 
@@ -585,17 +585,17 @@ while (1)
   if (div*div > num)
     printf ("%d is prime\n", num);
     break;
   endif
 endwhile
 @end group
 @end example
 
-@node The continue Statement, The unwind_protect Statement, The break Statement, Statements
+@node The continue Statement
 @section The @code{continue} Statement
 @cindex @code{continue} statement
 
 The @code{continue} statement, like @code{break}, is used only inside
 @code{for} or @code{while} loops.  It skips over the rest of the loop
 body, causing the next cycle around the loop to begin immediately.
 Contrast this with @code{break}, which jumps out of the loop altogether.
 Here is an example:
@@ -634,17 +634,17 @@ would probably write the loop like this:
 for x = vec
   if (rem (x, 2) == 0)
     printf ("%d\n", x);
   endif
 endfor
 @end group
 @end example
 
-@node The unwind_protect Statement, The try Statement, The continue Statement, Statements
+@node The unwind_protect Statement
 @section The @code{unwind_protect} Statement
 @cindex @code{unwind_protect} statement
 @cindex @code{unwind_protect_cleanup}
 @cindex @code{end_unwind_protect}
 
 Octave supports a limited form of exception handling modelled after the
 unwind-protect form of Lisp.  
 
@@ -682,17 +682,17 @@ end_unwind_protect
 @end group
 @end example
 
 Without @code{unwind_protect}, the value of @var{do_fortran_indexing}
 would not be restored if an error occurs while performing the indexing
 operation because evaluation would stop at the point of the error and
 the statement to restore the value would not be executed.
 
-@node The try Statement, Continuation Lines, The unwind_protect Statement, Statements
+@node The try Statement
 @section The @code{try} Statement
 @cindex @code{try} statement
 @cindex @code{catch}
 @cindex @code{end_try_catch}
 
 In addition to unwind_protect, Octave supports another limited form of
 exception handling.
 
@@ -727,17 +727,17 @@ condition-case form (limited because it 
 of errors separately).  Perhaps at some point Octave can have some sort
 of classification of errors and try-catch can be improved to be as
 powerful as condition-case in Lisp.
 
 @cindex continuation lines
 @cindex @code{...} continuation marker
 @cindex @code{\} continuation marker
 
-@node Continuation Lines,  , The try Statement, Statements
+@node Continuation Lines
 @section Continuation Lines
 
 In the Octave language, most statements end with a newline character and
 you must tell Octave to ignore the newline character in order to
 continue a statement from one line to the next.  Lines that end with the
 characters @code{...} or @code{\} are joined with the following line
 before they are divided into tokens by Octave's parser.  For example,
 the lines
diff --git a/doc/interpreter/stream.txi b/doc/interpreter/stream.txi
--- a/doc/interpreter/stream.txi
+++ b/doc/interpreter/stream.txi
@@ -1,8 +1,8 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node I/O Streams, Variables, Containers, Top
+@node I/O Streams
 @chapter I/O Streams
 
 @DOCSTRING(isstream)
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Strings, Data Structures, Numeric Data Types, Top
+@node Strings
 @chapter Strings
 @cindex strings
 @cindex character strings
 @opindex "
 @opindex '
 
 A @dfn{string constant} consists of a sequence of characters enclosed in
 either double-quote or single-quote marks.  For example, both of the
@@ -117,17 +117,17 @@ Data Types}, for more information about 
 
 @menu
 * Creating Strings::            
 * Searching and Replacing::     
 * String Conversions::          
 * Character Class Functions::   
 @end menu
 
-@node Creating Strings, Searching and Replacing, Strings, Strings
+@node Creating Strings
 @section Creating Strings
 
 @DOCSTRING(blanks)
 
 @DOCSTRING(int2str)
 
 @DOCSTRING(com2str)
 
@@ -136,17 +136,17 @@ Data Types}, for more information about 
 @DOCSTRING(strcat)
 
 @DOCSTRING(string_fill_char)
 
 @DOCSTRING(str2mat)
 
 @DOCSTRING(isstr)
 
-@node Searching and Replacing, String Conversions, Creating Strings, Strings
+@node Searching and Replacing
 @section Searching and Replacing
 
 @DOCSTRING(deblank)
 
 @DOCSTRING(findstr)
 
 @DOCSTRING(index)
 
@@ -155,17 +155,17 @@ Data Types}, for more information about 
 @DOCSTRING(split)
 
 @DOCSTRING(strcmp)
 
 @DOCSTRING(strrep)
 
 @DOCSTRING(substr)
 
-@node String Conversions, Character Class Functions, Searching and Replacing, Strings
+@node String Conversions
 @section String Conversions
 
 @DOCSTRING(bin2dec)
 
 @DOCSTRING(dec2bin)
 
 @DOCSTRING(dec2hex)
 
@@ -190,17 +190,17 @@ Data Types}, for more information about 
 @DOCSTRING(undo_string_escapes)
 
 @DOCSTRING(implicit_num_to_str_ok)
 
 @DOCSTRING(implicit_str_to_num_ok)
 
 @DOCSTRING(warn_single_quote_string)
 
-@node Character Class Functions,  , String Conversions, Strings
+@node Character Class Functions
 @section Character Class Functions
 
 Octave also provides the following character class test functions
 patterned after the functions in the standard C library.  They all
 operate on string arrays and return matrices of zeros and ones.
 Elements that are nonzero indicate that the condition was true for the
 corresponding character in the string array.  For example,
 
diff --git a/doc/interpreter/struct.txi b/doc/interpreter/struct.txi
--- a/doc/interpreter/struct.txi
+++ b/doc/interpreter/struct.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Data Structures, Containers, Strings, Top
+@node Data Structures
 @chapter Data Structures
 @cindex structures
 @cindex data structures
 
 Octave includes support for organizing data in structures.  The current
 implementation uses an associative array with indices limited to
 strings, but the syntax is more like C-style structures.  Here are some
 examples of using data structures in Octave.
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node System Utilities, Tips, Quaternions, Top
+@node System Utilities
 @chapter System Utilities
 
 This chapter describes the functions that are available to allow you to
 get information about what is happening outside of Octave, while it is
 still running, and use this information in your program.  For example,
 you can get information about environment variables, the current time,
 and even start other programs from the Octave prompt.
 
@@ -18,17 +18,17 @@ and even start other programs from the O
 * Process ID Information::      
 * Environment Variables::       
 * Current Working Directory::   
 * Password Database Functions::  
 * Group Database Functions::    
 * System Information::          
 @end menu
 
-@node Timing Utilities, Filesystem Utilities, System Utilities, System Utilities
+@node Timing Utilities
 @section Timing Utilities
 
 Octave's core set of functions for manipulating time values are
 patterned after the corresponding functions from the standard C library.
 Several of these functions use a data structure for time that includes
 the following elements:
 
 @table @code
@@ -103,17 +103,17 @@ useful.
 @DOCSTRING(tic)
 
 @DOCSTRING(pause)
 
 @DOCSTRING(sleep)
 
 @DOCSTRING(usleep)
 
-@node Filesystem Utilities, Controlling Subprocesses, Timing Utilities, System Utilities
+@node Filesystem Utilities
 @section Filesystem Utilities
 
 Octave includes the following functions for renaming and deleting files,
 creating, deleting, and reading directories, and for getting information
 about the status of files.
 
 @DOCSTRING(rename)
 
@@ -138,17 +138,17 @@ about the status of files.
 @DOCSTRING(glob)
 
 @DOCSTRING(fnmatch)
 
 @DOCSTRING(file_in_path)
 
 @DOCSTRING(tilde_expand)
 
-@node Controlling Subprocesses, Process ID Information, Filesystem Utilities, System Utilities
+@node Controlling Subprocesses
 @section Controlling Subprocesses
 
 Octave includes some high-level commands like @code{system} and
 @code{popen} for starting subprocesses.  If you want to run another
 program to perform some task and then look at its output, you will
 probably want to use these functions.
 
 Octave also provides several very low-level Unix-like functions which
@@ -177,50 +177,50 @@ they can be used, look at the definition
 @DOCSTRING(pipe)
 
 @DOCSTRING(dup2)
 
 @DOCSTRING(waitpid)
 
 @DOCSTRING(fcntl)
 
-@node Process ID Information, Environment Variables, Controlling Subprocesses, System Utilities
+@node Process ID Information
 @section Process, Group, and User IDs
 
 @DOCSTRING(getpgrp)
 
 @DOCSTRING(getpid)
 
 @DOCSTRING(getppid)
 
 @DOCSTRING(geteuid)
 
 @DOCSTRING(getuid)
 
 @DOCSTRING(getegid)
 
 @DOCSTRING(getgid)
 
-@node Environment Variables, Current Working Directory, Process ID Information, System Utilities
+@node Environment Variables
 @section Environment Variables
 
 @DOCSTRING(getenv)
 
 @DOCSTRING(putenv)
 
-@node Current Working Directory, Password Database Functions, Environment Variables, System Utilities
+@node Current Working Directory
 @section Current Working Directory
 
 @DOCSTRING(cd)
 
 @DOCSTRING(ls)
 
 @DOCSTRING(pwd)
 
-@node Password Database Functions, Group Database Functions, Current Working Directory, System Utilities
+@node Password Database Functions
 @section Password Database Functions
 
 Octave's password database functions return information in a structure
 with the following fields.
 
 @table @code
 @item name
 The user name.
@@ -252,17 +252,17 @@ referred to as a @var{pw_struct}.
 @DOCSTRING(getpwuid)
 
 @DOCSTRING(getpwnam)
 
 @DOCSTRING(setpwent)
 
 @DOCSTRING(endpwent)
 
-@node Group Database Functions, System Information, Password Database Functions, System Utilities
+@node Group Database Functions
 @section Group Database Functions
 
 Octave's group database functions return information in a structure
 with the following fields.
 
 @table @code
 @item name
 The user name.
@@ -285,17 +285,17 @@ referred to as a @var{grp_struct}.
 @DOCSTRING(getgrgid)
          
 @DOCSTRING(getgrnam)
 
 @DOCSTRING(setgrent)
 
 @DOCSTRING(endgrent)
 
-@node System Information,  , Group Database Functions, System Utilities
+@node System Information
 @section System Information
 
 @DOCSTRING(computer)
 
 @DOCSTRING(isieee)
 
 @DOCSTRING(OCTAVE_VERSION)
 
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Tips, Trouble, System Utilities, Top
+@node Tips
 @appendix Tips and Standards
 @cindex tips
 @cindex standards of coding style
 @cindex coding standards
 
 This chapter describes no additional features of Octave.  Instead it
 gives advice on making effective use of the features described in the
 previous chapters.
@@ -15,17 +15,17 @@ previous chapters.
 @menu
 * Style Tips::                  Writing clean and robust programs.
 * Coding Tips::                 Making code run faster.
 * Documentation Tips::          Writing readable documentation strings.
 * Comment Tips::                Conventions for writing comments.
 * Function Headers::            Standard headers for functions.
 @end menu
 
-@node Style Tips, Coding Tips, Tips, Tips
+@node Style Tips
 @section Writing Clean Octave Programs
 
 Here are some tips for avoiding common errors in writing Octave code
 intended for widespread use:
 
 @itemize @bullet
 @item
 Since all global variables share the same name space, and all functions
@@ -56,17 +56,17 @@ return.
 
 @item
 Please put a copyright notice on the file if you give copies to anyone.
 Use the same lines that appear at the top of the function files
 distributed with Octave.  If you have not signed papers to assign the
 copyright to anyone else, then place your name in the copyright notice.
 @end itemize
 
-@node Coding Tips, Documentation Tips, Style Tips, Tips
+@node Coding Tips
 @section Tips for Making Code Run Faster.
 @cindex execution speed
 @cindex speedups
 
 Here are some ways of improving the execution speed of Octave programs.
 
 @itemize @bullet
 @item
@@ -116,17 +116,17 @@ statement instead.  @xref{The try Statem
 @item
 If you are calling lots of functions but none of them will need to
 change during your run, set the variable
 @code{ignore_function_time_stamp} to @code{"all"} so that Octave doesn't
 waste a lot of time checking to see if you have updated your function
 files.
 @end itemize
 
-@node Documentation Tips, Comment Tips, Coding Tips, Tips
+@node Documentation Tips
 @section Tips for Documentation Strings
 
 Here are some tips for the writing of documentation strings.
 
 @itemize @bullet
 @item
 Every command, function, or variable intended for users to know about
 should have a documentation string.
@@ -194,17 +194,17 @@ a name for that value.  Thus, the docume
 @code{/} refers to its second argument as @samp{DIVISOR}, because the
 actual argument name is @code{divisor}.
 
 Also use all caps for meta-syntactic variables, such as when you show
 the decomposition of a list or vector into subunits, some of which may
 vary.
 @end itemize
 
-@node Comment Tips, Function Headers, Documentation Tips, Tips
+@node Comment Tips
 @section Tips on Writing Comments
 
 Here are the conventions to follow when writing comments.
 
 @table @samp
 @item #
 Comments that start with a single sharp-sign, @samp{#}, should all be
 aligned to the same column on the right of the source code.  Such
@@ -222,17 +222,17 @@ at that point.
 
 @noindent
 The indentation commands of the Octave mode in Emacs, such as @kbd{M-;}
 (@code{indent-for-comment}) and @kbd{TAB} (@code{octave-indent-line})
 automatically indent comments according to these conventions,
 depending on the number of semicolons.  @xref{Comments,,
 Manipulating Comments, emacs, The GNU Emacs Manual}.
 
-@node Function Headers,  , Comment Tips, Tips
+@node Function Headers
 @section Conventional Headers for Octave Functions
 @cindex header comments
 
 Octave has conventions for using special comments in function files
 to give information such as who wrote them.  This section explains these
 conventions.
 
 The top of the file should contain a copyright notice, followed by a
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Variables, Expressions, I/O Streams, Top
+@node Variables
 @chapter Variables
 @cindex variables, user-defined
 @cindex user-defined variables
 
 Variables let you give names to values and refer to them later.  You have
 already seen variables in many of the examples.  The name of a variable
 must be a sequence of letters, digits and underscores, but it may not begin
 with a digit.  Octave does not enforce a limit on the length of variable
@@ -55,17 +55,17 @@ before they have been given a value.  Do
 
 @menu
 * Global Variables::            
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 @end menu
 
-@node Global Variables, Status of Variables, Variables, Variables
+@node Global Variables
 @section Global Variables
 @cindex global variables
 @cindex @code{global} statement
 @cindex variables, global
 
 A variable that has been declared @dfn{global} may be accessed from
 within a function body without having to pass it as a formal parameter.
 
@@ -139,32 +139,32 @@ but the value of @code{x} at the top lev
 the function works with a @emph{copy} of its argument.
 
 @DOCSTRING(initialize_global_variables)
 
 @DOCSTRING(default_global_variable_value)
 
 @DOCSTRING(isglobal)
 
-@node Status of Variables, Summary of Built-in Variables, Global Variables, Variables
+@node Status of Variables
 @section Status of Variables
 
 @DOCSTRING(clear)
 
 @DOCSTRING(who)
 
 @DOCSTRING(exist)
 
 @DOCSTRING(document)
 
 @DOCSTRING(type)
 
 @DOCSTRING(which)
 
-@node Summary of Built-in Variables, Defaults from the Environment, Status of Variables, Variables
+@node Summary of Built-in Variables
 @section Summary of Built-in Variables
 
 Here is a summary of all of Octave's built-in variables along with
 cross references to additional information and their default values.  In
 the following table @var{octave-home} stands for the root directory
 where all of Octave is installed (the default is @file{@value{OCTAVEHOME}},
 @var{version} stands for the Octave version number (for example,
 @value{VERSION}) and @var{arch} stands for the type of system for which
@@ -428,17 +428,17 @@ Default value: 0.
 
 @item whitespace_in_literal_matrix
 @xref{Matrices}.
 
 Default value: @code{""}.
 @end vtable
 
 
-@node Defaults from the Environment,  , Summary of Built-in Variables, Variables
+@node Defaults from the Environment
 @section Defaults from the Environment
 
 Octave uses the values of the following environment variables to set the
 default values for the corresponding built-in variables.  In addition,
 the values from the environment may be overridden by command-line
 arguments.  @xref{Command Line Options}.
 
 @vtable @code
diff --git a/doc/interpreter/vr-idx.txi b/doc/interpreter/vr-idx.txi
--- a/doc/interpreter/vr-idx.txi
+++ b/doc/interpreter/vr-idx.txi
@@ -1,8 +1,8 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Variable Index, Function Index, Concept Index, Top
+@node Variable Index
 @unnumbered Variable Index
 
 @printindex vr
