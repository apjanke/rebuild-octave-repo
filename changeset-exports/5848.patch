# HG changeset patch
# User jwe
# Date 1149799049 0
#      Thu Jun 08 20:37:29 2006 +0000
# Node ID 415ae81d331be2ffb897cb87a8aa21fcc852aebb
# Parent  62e7b9307d00491b8d9429fbb7e706c77fed4bc6
[project @ 2006-06-08 20:37:29 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,48 @@
 2006-06-08  John W. Eaton  <jwe@octave.org>
 
+	* ov-usr-fcn.cc (function::do_multi_index_op): Append contents of
+	varargout to ret_list before calling convert_to_const_vector.
+
+	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector):
+	No need to handle all_va_args here.
+
+	* ov-va-args.h, ov-va-args.cc: Delete files.
+	* Makefile.in (OV_INCLUDES, OV_SRC): Delete from the lists.
+
+	* ov.cc (install_types): Don't register octave_all_va_args type.
+	* ov.h, ov.cc (octave_value::octave_value (octave_value::all_va_args)):
+	Delete.
+	* ov.h (octave_value::is_all_va_args): Delete.
+	(octave_value::enum all_va_args): Delete.
+
+	* pt-pr-code.cc	(tree_print_code::visit_octave_user_function_header):
+	Print "varargout" and "varargin" instead of "...".
+
+	* pt-misc.h, pt-misc.cc	(tree_parameter_list::convert_to_const_vector):
+	Arg is now const Cell& instead of tree_va_return_list*.
+
+	* ov-usr-fcn.h, ov-usr-fcn.cc (octave_user_function::vr_list,
+	octave_user_function::curr_va_arg_number):
+	Delete variables and all uses.
+	(octave_function::octave_va_start, octave_function::octave_va_arg,
+	octave_function::octave_vr_val,	octave_function::has_varargout):
+	Delete functions and all uses.
+
+	* ov-fcn.h (octave_function::octave_va_start,
+	octave_function::octave_va_arg, octave_function::octave_vr_val,
+	octave_function::has_varargout): Delete.
+
+	* ov-usr-fcn.cc (Fva_arg, Fva_start, Fvr_val): Delete.
+
+	* lex.l ({EL}): Don't handle "..." as varargin or varargout.
+	* octave.gperf (all_va_args, ALL_VA_ARGS, all_va_args_kw): Delete.
+	* parse.y (ALL_VA_ARGS): Delete token and all uses.
+
 	* defaults.h.in (OCTAVE_DATAROOTDIR): Substitute here.
 	* toplev.cc (octave_config_info): Add datarootdir to the struct.
 
 2006-06-07  John W. Eaton  <jwe@octave.org>
 
 	* ov-cell.cc (octave_cell::subsasgn): Handle c-s list object on
 	RHS if last index is '{'.
 	* pt-assign.cc (tree_multi_assignment::rvalue): Compute all LHS
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -71,17 +71,17 @@ else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
 OV_INTTYPE_INC := ov-base-int.h ov-int-traits.h ov-intx.h \
 	ov-int8.h ov-int16.h ov-int32.h ov-int64.h \
 	ov-uint8.h ov-uint16.h ov-uint32.h ov-uint64.h
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
-	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
+	ov-struct.h ov-scalar.h ov-range.h ov-complex.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-streamoff.h ov-str-mat.h ov-bool-mat.h ov-bool.h \
 	ov-cell.h ov.h ov-fcn.h ov-builtin.h ov-dld-fcn.h \
 	ov-mapper.h ov-usr-fcn.h ov-fcn-handle.h ov-fcn-inline.h \
 	ov-typeinfo.h ov-type-conv.h \
 	$(OV_INTTYPE_INC)
 
 OV_SPARSE_INCLUDES := \
@@ -143,17 +143,17 @@ OV_INTTYPE_SRC := \
 	ov-uint8.cc ov-uint16.cc ov-uint32.cc ov-uint64.cc
 
 OV_SPARSE_SRC := \
 	ov-base-sparse.cc ov-bool-sparse.cc ov-cx-sparse.cc ov-re-sparse.cc
 
 OV_SRC := ov-base.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
 	ov-range.cc ov-scalar.cc ov-complex.cc ov-str-mat.cc \
-	ov-streamoff.cc ov-struct.cc ov-va-args.cc \
+	ov-streamoff.cc ov-struct.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-fcn-handle.cc ov-fcn-inline.cc ov-typeinfo.cc \
 	$(OV_INTTYPE_SRC) \
 	$(OV_SPARSE_SRC)
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
 	pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc \
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -535,36 +535,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     if (yytext[0] == '\\')
       gripe_matlab_incompatible_continuation ();
     scan_for_comments (yytext);
     promptflag--;
     current_input_column = 1;
   }
 
 %{
-// An ellipsis not at the end of a line is not a continuation, but
-// does have another meaning.
-%}
-
-{EL} {
-    if (lexer_flags.looking_at_parameter_list)
-      {
-	warning ("`...' is deprecated; use varargin instead");
-	COUNT_TOK_AND_RETURN (VARARGIN);
-      }
-    else if (lexer_flags.looking_at_return_list)
-      {
-	warning ("`...' is deprecated; use varargout instead");
-	COUNT_TOK_AND_RETURN (VARARGOUT);
-      }
-    else
-      return LEXICAL_ERROR;
-  }
-
-%{
 // End of file.
 %}
 
 <<EOF>> {
     TOK_RETURN (END_OF_INPUT);
   }
 
 %{
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -36,17 +36,16 @@ enum octave_kw_id
   varargout_kw,
   while_kw
 };
 
 %}
 
 struct octave_kw { const char *name; int tok; octave_kw_id kw_id; };
 %%
-all_va_args, ALL_VA_ARGS, all_va_args_kw
 break, BREAK, break_kw
 case, CASE, case_kw
 catch, CATCH, catch_kw
 continue, CONTINUE, continue_kw
 do, DO, do_kw
 else, ELSE, else_kw
 elseif, ELSEIF, elseif_kw
 end, END, end_kw
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -71,29 +71,18 @@ public:
   virtual bool is_nested_function (void) const { return false; }
 
   virtual bool is_user_script (void) const { return false; }
 
   virtual bool is_user_function (void) const { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
 
-  virtual void octave_va_start (void) { }
-
-  virtual octave_value octave_va_arg (void) { return octave_value (); }
-
-  virtual octave_value_list octave_all_va_args (void)
-    { return octave_value_list (); }
-
   virtual bool takes_var_return (void) const { return false; }
 
-  virtual void octave_vr_val (const octave_value&) { }
-
-  virtual bool has_varargout (void) const { return false; }
-
   std::string name (void) const { return my_name; }
 
   void document (const std::string& ds) { doc = ds; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -73,46 +73,38 @@ octave_user_function::octave_user_functi
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     sym_tab (st), lead_comm (), trail_comm (), file_name (),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (0), nested_function (false),
-    args_passed (), num_args_passed (0),
-    curr_va_arg_number (0), vr_list (0), symtab_entry (0),
+    args_passed (), num_args_passed (0), symtab_entry (0),
     argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
   if (param_list)
-    {
-      num_named_args = param_list->length ();
-      curr_va_arg_number = num_named_args;
-    }
+    num_named_args = param_list->length ();
 }
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
   delete ret_list;
   delete sym_tab;
   delete cmd_list;
-  delete vr_list;
   delete lead_comm;
   delete trail_comm;
 }
 
 octave_user_function *
 octave_user_function::define_ret_list (tree_parameter_list *t)
 {
   ret_list = t;
 
-  if (ret_list && ret_list->takes_varargs ())
-    vr_list = new tree_va_return_list;
- 
   return this;
 }
 
 void
 octave_user_function::stash_fcn_file_name (const std::string& nm)
 {
   file_name = nm;
 }
@@ -141,28 +133,20 @@ octave_user_function::mark_as_system_fcn
 }
 
 bool
 octave_user_function::takes_varargs (void) const
 {
   return (param_list && param_list->takes_varargs ());
 }
 
-octave_value
-octave_user_function::octave_va_arg (void)
+bool
+octave_user_function::takes_var_return (void) const
 {
-  octave_value retval;
-
-  if (curr_va_arg_number < num_args_passed)
-    retval = args_passed (curr_va_arg_number++);
-  else
-    ::error ("va_arg: error getting arg number %d -- only %d provided",
-	     curr_va_arg_number + 1, num_args_passed);
-
-  return retval;
+  return (ret_list && ret_list->takes_varargs ());
 }
 
 octave_value_list
 octave_user_function::octave_all_va_args (void)
 {
   octave_value_list retval;
 
   int n = num_args_passed - num_named_args;
@@ -174,97 +158,26 @@ octave_user_function::octave_all_va_args
       int k = 0;
       for (int i = num_named_args; i < num_args_passed; i++)
 	retval(k++) = args_passed(i);
     }
 
   return retval;
 }
 
-bool
-octave_user_function::takes_var_return (void) const
-{
-  return (ret_list && ret_list->takes_varargs ());
-}
-
-void
-octave_user_function::octave_vr_val (const octave_value& val)
-{
-  // Use != here to avoid possible conversion to int of smaller type
-  // than the vr_list pointer.
-
-  assert (vr_list != 0);
-
-  vr_list->append (val);
-}
-
-void
-octave_user_function::varargout_to_vr_val (void)
-{
-  assert (vr_list && vr_list->empty ());
-
-  symbol_record *sr = sym_tab->lookup ("varargout");
-
-  if (sr && sr->is_variable ())
-    {
-      octave_value v = sr->def ();
-
-      Cell c = v.cell_value ();
-
-      if (! error_state)
-	{
-	  // FIXME -- should varargout be required to be a
-	  // cell array with a single row or column?  If not, should
-	  // we have a cleaner way of doing this operation?
-
-	  int n = c.length ();
-
-	  const octave_value *d = c.data ();
-
-	  for (int i = 0; i < n; i++)
-	    vr_list->append (d[i]);
-	}
-      else
-	error ("expecting varargout to be a cell array object");
-    }
-}
-
-bool
-octave_user_function::has_varargout (void) const
-{
-  bool retval = false;
-
-  if (takes_var_return ())
-    {
-      symbol_record *sr = sym_tab->lookup ("varargout");
-
-      retval = (sr && sr->is_variable ());
-    }
-
-  return retval;
-}
-
 // For unwind protect.
 
 static void
 pop_symbol_table_context (void *table)
 {
   symbol_table *tmp = static_cast<symbol_table *> (table);
   tmp->pop_context ();
 }
 
 static void
-delete_vr_list (void *list)
-{
-  tree_va_return_list *tmp = static_cast<tree_va_return_list *> (list);
-  tmp->clear ();
-  delete tmp;
-}
-
-static void
 clear_symbol_table (void *table)
 {
   symbol_table *tmp = static_cast<symbol_table *> (table);
   tmp->clear ();
 }
 
 static void
 clear_param_list (void *lst)
@@ -361,34 +274,18 @@ octave_user_function::do_multi_index_op 
       symtab_entry->protect ();
       unwind_protect::add (unprotect_function, symtab_entry);
     }
 
   if (call_depth > 1)
     {
       sym_tab->push_context ();
       unwind_protect::add (pop_symbol_table_context, sym_tab);
-
-      if (vr_list)
-	{
-	  // Push new vr_list.
-
-	  unwind_protect_ptr (vr_list);
-	  vr_list = new tree_va_return_list;
-
-	  // Clear and delete the new one before restoring the old
-	  // one.
-
-	  unwind_protect::add (delete_vr_list, vr_list);
-	}
     }
 
-  if (vr_list)
-    vr_list->clear ();
-
   install_automatic_vars ();
 
   // Force symbols to be undefined again when this function exits.
 
   unwind_protect::add (clear_symbol_table, sym_tab);
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
@@ -418,20 +315,16 @@ octave_user_function::do_multi_index_op 
 
   unwind_protect::add (::restore_args_passed, this);
 
   string_vector arg_names = args.name_tags ();
 
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
-  unwind_protect_int (curr_va_arg_number);
-
-  curr_va_arg_number = num_named_args;
-
   if (param_list && ! param_list->varargs_only ())
     {
       param_list->define_from_arg_vector (args);
       if (error_state)
 	goto abort;
     }
 
   // Force parameter list to be undefined when this function exits.
@@ -486,20 +379,32 @@ octave_user_function::do_multi_index_op 
       }
     
     // Copy return values out.
 
     if (ret_list)
       {
 	ret_list->initialize_undefined_elements (my_name, nargout, Matrix ());
 
-	if (has_varargout ())
-	  varargout_to_vr_val ();
+	Cell varargout;
+
+	symbol_record *sr = sym_tab->lookup ("varargout");
+
+	if (sr && sr->is_variable ())
+	  {
+	    octave_value v = sr->def ();
 
-	retval = ret_list->convert_to_const_vector (vr_list);
+	    varargout = v.cell_value ();
+
+	    if (error_state)
+	      error ("expecting varargout to be a cell array object");
+	  }
+
+	if (! error_state)
+	  retval = ret_list->convert_to_const_vector (varargout);
       }
   }
 
  abort:
   unwind_protect::run_frame ("user_func_eval");
 
   return retval;
 }
@@ -724,152 +629,16 @@ At the top level, @code{nargout} is unde
 	error ("nargout: invalid call at top level");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUNX ("va_arg", Fva_arg, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} va_arg ()\n\
-Return the value of the next available argument and move the internal\n\
-pointer to the next argument.  It is an error to call @code{va_arg}\n\
-when ther eare no more arguments available, or in a function that\n\
-has not been declared to take a variable number of parameters.\n\
-@end deftypefn")
-{
-  static bool warned = false;
-
-  if (! warned)
-    {
-      ::warning ("va_arg is deprecated; use varargin instead");
-      warned = true;
-    }
-
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 0)
-    {
-      octave_user_function *fcn = octave_call_stack::caller_user_function ();
-
-      if (fcn)
-	{
-	  if (fcn->takes_varargs ())
-	    retval = fcn->octave_va_arg ();
-	  else
-	    {
-	      ::error ("va_arg only valid within function taking variable");
-	      ::error ("number of arguments");
-	    }
-	}
-      else
-	::error ("va_arg only valid within function body");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (va_start, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} va_start ()\n\
-Position an internal pointer to the first unnamed argument in\n\
-functions that have been declared to accept a variable number of\n\
-arguments.  It is an error to call @code{va_start} in a function\n\
-that has not been declared to take a variable number of parameters.\n\
-@end deftypefn")
-{
-  static bool warned = false;
-
-  if (! warned)
-    {
-      ::warning ("va_start is deprecated; use varargin instead");
-      warned = true;
-    }
-
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 0)
-    {
-      octave_user_function *fcn = octave_call_stack::caller_user_function ();
-
-      if (fcn)
-	{
-	  if (fcn->takes_varargs ())
-	    fcn->octave_va_start ();
-	  else
-	    {
-	      ::error ("va_start only valid within function taking variable");
-	      ::error ("number of arguments");
-	    }
-	}
-      else
-	::error ("va_start only valid within function body");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
-DEFUN (vr_val, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} vr_val (@var{x})\n\
-Each time this function is called, it places the value of its argument\n\
-at the end of the list of values to return from the current\n\
-function.  Once @code{vr_val} has been called, there is no way to go\n\
-back to the beginning of the list and rewrite any of the return\n\
-values.  This function may only be called within functions that have\n\
-been declared to return an unspecified number of output arguments.\n\
-@end deftypefn")
-{
-  static bool warned = false;
-
-  if (! warned)
-    {
-      ::warning ("vr_val is deprecated; use varargout instead");
-      warned = true;
-    }
-
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1)
-    {
-      octave_user_function *fcn = octave_call_stack::caller_user_function ();
-
-      if (fcn)
-	{
-	  if (fcn->has_varargout ())
-	    ::error ("vr_val and varargout cannot both be used in the same function");
-	  else if (fcn->takes_var_return ())
-	    fcn->octave_vr_val (args(0));
-	  else
-	    {
-	      ::error ("vr_val only valid within function declared to");
-	      ::error ("produce a variable number of values");
-	    }
-	}
-      else
-	::error ("vr_val only valid within function body");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
 DEFUN (max_recursion_depth, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} max_recursion_depth ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} max_recursion_depth (@var{new_val})\n\
 Query or set the internal limit on the number of times a function may\n\
 be called recursively.  If the limit is exceeded, an error message is\n\
 printed and control returns to the top level.\n\
 @end deftypefn")
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -131,30 +131,20 @@ public:
   void mark_as_system_fcn_file (void);
 
   bool is_system_fcn_file (void) const { return system_fcn_file; }
 
   bool is_user_function (void) const { return true; }
 
   bool takes_varargs (void) const;
 
-  void octave_va_start (void) { curr_va_arg_number = num_named_args; }
-
-  octave_value octave_va_arg (void);
+  bool takes_var_return (void) const;
 
   octave_value_list octave_all_va_args (void);
 
-  bool takes_var_return (void) const;
-
-  void octave_vr_val (const octave_value& val);
-
-  void varargout_to_vr_val (void);
-
-  bool has_varargout (void) const;
-
   void stash_function_name (const std::string& s) { my_name = s; }
 
   void mark_as_nested_function (void) { nested_function = true; }
 
   bool is_nested_function (void) const { return nested_function; }
 
   void save_args_passed (const octave_value_list& args)
     {
@@ -254,23 +244,16 @@ private:
   octave_value_list args_passed;
 
   // A place to store the passed args for recursive calls.
   std::stack<octave_value_list> saved_args;
 
   // The number of arguments passed in.
   int num_args_passed;
 
-  // Used to keep track of the current offset into the list of va_args.
-  int curr_va_arg_number;
-
-  // The list of return values when an unspecified number can be
-  // returned.
-  tree_va_return_list *vr_list;
-
   // The symbol record for this function.
   symbol_record *symtab_entry;
 
   // The symbol record for argn in the local symbol table.
   symbol_record *argn_sr;
 
   // The symbol record for nargin in the local symbol table.
   symbol_record *nargin_sr;
@@ -285,17 +268,16 @@ private:
 
   void print_code_function_trailer (void);
 
   void install_automatic_vars (void);
 
   void bind_automatic_vars (const string_vector& arg_names, int nargin,
 			    int nargout, const octave_value_list& va_args);
 
-
   // No copying!
 
   octave_user_function (const octave_user_function& fn);
 
   octave_user_function& operator = (const octave_user_function& fn);
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-va-args.cc b/src/ov-va-args.cc
deleted file mode 100644
--- a/src/ov-va-args.cc
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301, USA.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include <iostream>
-
-#include "error.h"
-#include "pr-output.h"
-#include "oct-obj.h"
-#include "ov-va-args.h"
-
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_all_va_args, "va-arg", "va-arg");
-
-void
-octave_all_va_args::print (std::ostream& os, bool) const
-{
-  indent (os);
-  print (os);
-}
-
-void
-octave_all_va_args::print_raw (std::ostream& os, bool) const
-{
-  os << "all_va_args";
-}
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/ov-va-args.h b/src/ov-va-args.h
deleted file mode 100644
--- a/src/ov-va-args.h
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
-
-Copyright (C) 1996, 1997 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301, USA.
-
-*/
-
-#if !defined (octave_all_va_args_h)
-#define octave_all_va_args_h 1
-
-#include <cstdlib>
-
-#include <iostream>
-#include <string>
-
-#include "mx-base.h"
-#include "str-vec.h"
-
-#include "error.h"
-#include "ov-base.h"
-#include "ov-typeinfo.h"
-
-class Octave_map;
-class octave_value_list;
-
-class tree_walker;
-
-// A type to represent `all_va_args' as used in function calls.
-
-class
-octave_all_va_args : public octave_base_value
-{
-public:
-
-  octave_all_va_args (void)
-    : octave_base_value () { }
-
-  octave_all_va_args (const octave_all_va_args&)
-    : octave_base_value () { }
-
-  ~octave_all_va_args (void) { }
-
-  octave_base_value *clone (void) const { return new octave_all_va_args (*this); }
-  octave_base_value *empty_clone (void) const { return new octave_all_va_args (); }
-
-  bool is_defined (void) const { return true; }
-
-  bool is_all_va_args (void) const { return true; }
-
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
-
-private:
-
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
-};
-
-#endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -55,17 +55,16 @@ 02110-1301, USA.
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
 #include "ov-streamoff.h"
 #include "ov-list.h"
 #include "ov-cs-list.h"
 #include "ov-colon.h"
-#include "ov-va-args.h"
 #include "ov-builtin.h"
 #include "ov-mapper.h"
 #include "ov-dld-fcn.h"
 #include "ov-usr-fcn.h"
 #include "ov-fcn-handle.h"
 #include "ov-fcn-inline.h"
 #include "ov-typeinfo.h"
 
@@ -673,21 +672,16 @@ octave_value::octave_value (const octave
 {
 }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 {
 }
 
-octave_value::octave_value (octave_value::all_va_args)
-  : rep (new octave_all_va_args ())
-{
-}
-
 octave_value::octave_value (octave_base_value *new_rep)
   : rep (new_rep)
 {
 }
 
 octave_value::~octave_value (void)
 {
 #if defined (MDEBUG)
@@ -1837,17 +1831,16 @@ install_types (void)
   octave_uint32_matrix::register_type ();
   octave_uint64_matrix::register_type ();
   octave_sparse_bool_matrix::register_type ();
   octave_sparse_matrix::register_type ();
   octave_sparse_complex_matrix::register_type ();
   octave_struct::register_type ();
   octave_list::register_type ();
   octave_cs_list::register_type ();
-  octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
   octave_builtin::register_type ();
   octave_mapper::register_type ();
   octave_user_function::register_type ();
   octave_dld_function::register_type ();
   octave_fcn_handle::register_type ();
   octave_fcn_inline::register_type ();
   octave_streamoff::register_type ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -132,17 +132,16 @@ public:
   static std::string binary_op_as_string (binary_op);
 
   static std::string assign_op_as_string (assign_op);
 
   static octave_value empty_conv (const std::string& type,
 				  const octave_value& rhs = octave_value ());
 
   enum magic_colon { magic_colon_t };
-  enum all_va_args { all_va_args_t };
 
   octave_value (void);
   octave_value (short int i);
   octave_value (unsigned short int i);
   octave_value (int i);
   octave_value (unsigned int i);
   octave_value (long int i);
   octave_value (unsigned long int i);
@@ -212,17 +211,16 @@ public:
   octave_value (const uint32NDArray& inda);
   octave_value (const uint64NDArray& inda);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const streamoff_array& off);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
-  octave_value (octave_value::all_va_args);
 
   octave_value (octave_base_value *new_rep);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
     {
       rep = a.rep;
@@ -430,19 +428,16 @@ public:
     { return rep->is_cs_list (); }
 
   bool is_list (void) const
     { return rep->is_list (); }
 
   bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
-  bool is_all_va_args (void) const
-    { return rep->is_all_va_args (); }
-
   // Are any or all of the elements in this constant nonzero?
 
   octave_value all (int dim = 0) const
     { return rep->all (dim); }
 
   octave_value any (int dim = 0) const
     { return rep->any (dim); }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -389,17 +389,17 @@ set_stmt_print_flag (tree_statement_list
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL STATIC
 %token <tok_val> FCN_HANDLE
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
-%token FCN VARARGIN VARARGOUT ALL_VA_ARGS
+%token FCN VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
@@ -660,39 +660,26 @@ magic_colon	: ':'
 		    $$ = new tree_constant (tmp);
 		  }
 		;
 
 arg_list	: expression
 		  { $$ = new tree_argument_list ($1); }
 		| magic_colon
 		  { $$ = new tree_argument_list ($1); }
-		| ALL_VA_ARGS
-		  {
-		    octave_value tmp (octave_value::all_va_args_t);
-		    tree_constant *all_va_args = new tree_constant (tmp);
-		    $$ = new tree_argument_list (all_va_args);
-		  }
 		| arg_list ',' magic_colon
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		| arg_list ',' expression
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
-		| arg_list ',' ALL_VA_ARGS
-		  {
-		    octave_value tmp (octave_value::all_va_args_t);
-		    tree_constant *all_va_args = new tree_constant (tmp);
-		    $1->append (all_va_args);
-		    $$ = $1;
-		  }
 		;
 
 indirect_ref_op	: '.'
 		  { lexer_flags.looking_at_indirect_ref = true; }
 		;
 
 // Two more rules for lexical feedback.  To avoid reduce/reduce
 // conflicts, We use begin_obj_idx after every postfix_expr on the RHS
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -155,20 +155,16 @@ tree_argument_list::convert_to_const_vec
 
       unwind_protect_const_ptr (indexed_object);
 
       indexed_object = object;
     }
 
   int len = length ();
 
-  // FIXME -- would be nice to know in advance how largs args
-  // needs to be even when we have a list containing an all_va_args
-  // token.
-
   octave_value_list args;
   int args_len = len;
   args.resize (args_len);
 
   iterator p = begin ();
   int j = 0;
   for (int k = 0; k < len; k++)
     {
@@ -188,38 +184,17 @@ tree_argument_list::convert_to_const_vec
 	  if (error_state)
 	    {
 	      ::error ("evaluating argument list element number %d", k+1);
 	      args = octave_value_list ();
 	      break;
 	    }
 	  else
 	    {
-	      if (tmp.is_all_va_args ())
-		{
-		  octave_function *fcn = octave_call_stack::current ();
-
-		  if (fcn)
-		    {
-		      octave_value_list tva;
-		      tva = fcn->octave_all_va_args ();
-		      int n = tva.length ();
-		      args_len += n - 1;
-		      args.resize (args_len);
-		      for (int i = 0; i < n; i++)
-			args(j++) = tva(i);
-		    }
-		  else
-		    {
-		      ::error ("all_va_args is only valid inside functions");
-		      args = octave_value_list ();
-		      break;
-		    }
-		}
-	      else if (tmp.is_cs_list ())
+	      if (tmp.is_cs_list ())
 		{
 		  octave_value_list tl = tmp.list_value ();
 		  int n = tl.length ();
 		  args_len += n - 1;
 		  args.resize (args_len);
 		  for (int i = 0; i < n; i++)
 		    args(j++) = tl(i);
 		}
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -20,16 +20,18 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "Cell.h"
+
 #include "defun.h"
 #include "error.h"
 #include "ov.h"
 #include "oct-lvalue.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-misc.h"
 #include "pt-walk.h"
@@ -138,44 +140,35 @@ tree_parameter_list::undefine (void)
 
       octave_lvalue ref = elt->lvalue ();
 
       ref.assign (octave_value::op_asn_eq, octave_value ());
     }
 }
 
 octave_value_list
-tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
+tree_parameter_list::convert_to_const_vector (const Cell& varargout)
 {
-  int nout = length ();
+  octave_idx_type vlen = varargout.numel ();
 
-  if (vr_list)
-    nout += vr_list->length ();
+  int nout = length () + vlen;
 
-  octave_value_list retval;
-  retval.resize (nout);
+  octave_value_list retval (nout, octave_value ());
 
   int i = 0;
 
   for (iterator p = begin (); p != end (); p++)
     {
       tree_identifier *elt = *p;
 
       retval(i++) = elt->is_defined () ? elt->rvalue () : octave_value ();
     }
 
-  if (vr_list)
-    {
-      for (tree_va_return_list::iterator p = vr_list->begin ();
-	   p != vr_list->end ();
-	   p++)
-	{
-	  retval(i++) = *p;
-	}
-    }
+  for (octave_idx_type j = 0; j < vlen; j++)
+    retval(i++) = varargout(j);
 
   return retval;
 }
 
 bool
 tree_parameter_list::is_defined (void)
 {
   bool status = true;
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 #if !defined (octave_tree_misc_h)
 #define octave_tree_misc_h 1
 
+class Cell;
+
 class octave_value;
 class octave_value_list;
 
 class tree_identifier;
 class tree_index_expression;
 class tree_va_return_list;
 
 class tree_walker;
@@ -66,17 +68,17 @@ public:
 				      int nargout, const octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
   void undefine (void);
 
   bool is_defined (void);
 
-  octave_value_list convert_to_const_vector (tree_va_return_list *vr_list);
+  octave_value_list convert_to_const_vector (const Cell& varargout);
 
   void accept (tree_walker& tw);
 
 private:
 
   int marked_for_varargs;
 
   // No copying!
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -311,17 +311,17 @@ tree_print_code::visit_octave_user_funct
 
       ret_list->accept (*this);
 
       if (takes_var_return)
 	{
 	  if (len > 0)
 	    os << ", ";
 
-	  os << "...";
+	  os << "varargout";
 	}
 
       if (len > 1 || takes_var_return)
 	{
 	  nesting.pop ();
 	  os << "]";
 	}
 
@@ -348,17 +348,17 @@ tree_print_code::visit_octave_user_funct
 
       param_list->accept (*this);
 
       if (takes_varargs)
 	{
 	  if (len > 0)
 	    os << ", ";
 
-	  os << "...";
+	  os << "varargin";
 	}
 
       if (len > 0 || takes_varargs)
 	{
 	  nesting.pop ();
 	  os << ")";
 	  newline ();
 	}
