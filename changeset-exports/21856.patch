# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1465603576 25200
#      Fri Jun 10 17:06:16 2016 -0700
# Node ID c9c5340d4758799437c6e49da63e6060b0d54341
# Parent  bfc662ee0340d67b5cca5615a69c862afd6ddd61
lasterror: Allow setting error state with an empty stack

* error.cc (Flasterror): Reset Vlast_error_stack to empty if the given
error structure has an empty stack.  Add BIST tests.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1870,16 +1870,17 @@ fields are set to their default values.\
           octave_scalar_map new_err = args(0).scalar_map_value ();
           octave_scalar_map new_err_stack;
           std::string new_error_message;
           std::string new_error_id;
           std::string new_error_file;
           std::string new_error_name;
           int new_error_line = -1;
           int new_error_column = -1;
+          bool initialize_stack = false;
 
           if (new_err.contains ("message"))
             {
               const std::string tmp =
                 new_err.getfield ("message").string_value ();
               new_error_message = tmp;
             }
 
@@ -1887,52 +1888,59 @@ fields are set to their default values.\
             {
               const std::string tmp =
                 new_err.getfield ("identifier").string_value ();
               new_error_id = tmp;
             }
 
           if (new_err.contains ("stack"))
             {
-              new_err_stack =
-                new_err.getfield ("stack").scalar_map_value ();
-
-              if (new_err_stack.contains ("file"))
-                {
-                  const std::string tmp =
-                    new_err_stack.getfield ("file").string_value ();
-                  new_error_file = tmp;
-                }
-
-              if (new_err_stack.contains ("name"))
+              if (new_err.getfield ("stack").numel () == 0)
+                initialize_stack = true;
+              else
                 {
-                  const std::string tmp =
-                    new_err_stack.getfield ("name").string_value ();
-                  new_error_name = tmp;
-                }
+                  new_err_stack =
+                    new_err.getfield ("stack").scalar_map_value ();
+
+                  if (new_err_stack.contains ("file"))
+                    {
+                      const std::string tmp =
+                        new_err_stack.getfield ("file").string_value ();
+                      new_error_file = tmp;
+                    }
 
-              if (new_err_stack.contains ("line"))
-                {
-                  const int tmp =
-                    new_err_stack.getfield ("line").nint_value ();
-                  new_error_line = tmp;
-                }
+                  if (new_err_stack.contains ("name"))
+                    {
+                      const std::string tmp =
+                        new_err_stack.getfield ("name").string_value ();
+                      new_error_name = tmp;
+                    }
 
-              if (new_err_stack.contains ("column"))
-                {
-                  const int tmp =
-                    new_err_stack.getfield ("column").nint_value ();
-                  new_error_column = tmp;
+                  if (new_err_stack.contains ("line"))
+                    {
+                      const int tmp =
+                        new_err_stack.getfield ("line").nint_value ();
+                      new_error_line = tmp;
+                    }
+
+                  if (new_err_stack.contains ("column"))
+                    {
+                      const int tmp =
+                        new_err_stack.getfield ("column").nint_value ();
+                      new_error_column = tmp;
+                    }
                 }
             }
 
           Vlast_error_message = new_error_message;
           Vlast_error_id = new_error_id;
 
-          if (new_err.contains ("stack"))
+          if (initialize_stack)
+            Vlast_error_stack = initialize_last_error_stack ();
+          else if (new_err.contains ("stack"))
             {
               new_err_stack.setfield ("file", new_error_file);
               new_err_stack.setfield ("name", new_error_name);
               new_err_stack.setfield ("line", new_error_line);
               new_err_stack.setfield ("column", new_error_column);
               Vlast_error_stack = new_err_stack;
             }
           else
@@ -1946,16 +1954,29 @@ fields are set to their default values.\
         }
       else
         error ("lasterror: argument must be a structure or a string");
     }
 
   return ovl (err);
 }
 
+/*
+## Test lasterror with empty error state
+%!test
+%! lasterror ("reset");
+%! x = lasterror ();
+%! assert (x.identifier, "")
+%! assert (x.message, "")
+%! assert (isempty (x.stack))
+%! lasterror (x);
+%! y = lasterror ();
+%! assert (y, x);
+*/
+
 DEFUN (lasterr, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{msg}, @var{msgid}] =} lasterr ()\n\
 @deftypefnx {} {} lasterr (@var{msg})\n\
 @deftypefnx {} {} lasterr (@var{msg}, @var{msgid})\n\
 Query or set the last error message.\n\
 \n\
 When called without input arguments, return the last error message and\n\
