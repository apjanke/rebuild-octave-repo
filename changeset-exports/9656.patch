# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253351668 -7200
#      Sat Sep 19 11:14:28 2009 +0200
# Node ID b29504415a2e471c2645a9190c6ea5bee81981a1
# Parent  17971b0f18b1af88a929f573783bc0db9512b3c6
provide NDArray->Matrix->Vector typedef mappers

diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -34,16 +34,19 @@ along with Octave; see the file COPYING.
 #include "DET.h"
 
 class
 OCTAVE_API
 ComplexMatrix : public MArray2<Complex>
 {
 public:
  
+  typedef ComplexColumnVector column_vector_type;
+  typedef ComplexRowVector row_vector_type;
+
   typedef void (*solve_singularity_handler) (double rcon);
 
   ComplexMatrix (void) : MArray2<Complex> () { }
 
   ComplexMatrix (octave_idx_type r, octave_idx_type c) : MArray2<Complex> (r, c) { }
 
   ComplexMatrix (octave_idx_type r, octave_idx_type c, const Complex& val)
     : MArray2<Complex> (r, c, val) { }
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -30,16 +30,18 @@ along with Octave; see the file COPYING.
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 ComplexNDArray : public MArrayN<Complex>
 {
 public:
 
+  typedef ComplexMatrix matrix_type;
+
   ComplexNDArray (void) : MArrayN<Complex> () { }
 
   ComplexNDArray (const dim_vector& dv) : MArrayN<Complex> (dv) { }
 
   ComplexNDArray (const dim_vector& dv, const Complex& val)
     : MArrayN<Complex> (dv, val) { }
   
   ComplexNDArray (const ComplexNDArray& a) : MArrayN<Complex> (a) { }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2009-09-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dNDArray.h (NDArray::matrix_type): New typedef.
+	* fNDArray.h (FloatNDArray::matrix_type): New typedef.
+	* CNDArray.h (ComplexNDArray::matrix_type): New typedef.
+	* fCNDArray.h (FloatComplexNDArray::matrix_type): New typedef.
+	* boolNDArray.h (boolNDArray::matrix_type): New typedef.
+	* charNDArray.h (charNDArray::matrix_type): New typedef.
+
+	* dMatrix.h (Matrix::column_vector_type, 
+	Matrix::row_vector_type): New typedefs.
+	* fMatrix.h (FloatMatrix::column_vector_type,
+	FloatMatrix::row_vector_type): New typedefs.
+	* CMatrix.h (ComplexMatrix::column_vector_type,
+	ComplexMatrix::row_vector_type): New typedefs.
+	* fCMatrix.h (FloatComplexMatrix::column_vector_type,
+	FloatComplexMatrix::row_vector_type): New typedefs.
+
 2009-09-18  John W. Eaton  <jwe@octave.org>
 
 	* mach-info.cc: Don't include oct-types.h.
 
 2009-09-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (NoAlias): New template class.
 	* dRowVector.cc (linspace): Rewrite.
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -31,16 +31,18 @@ along with Octave; see the file COPYING.
 #include "boolMatrix.h"
 
 class
 OCTAVE_API
 boolNDArray : public ArrayN<bool>
 {
 public:
 
+  typedef boolMatrix matrix_type;
+
   boolNDArray (void) : ArrayN<bool> () { }
 
   boolNDArray (const dim_vector& dv) : ArrayN<bool> (dv) { }
 
   boolNDArray (const dim_vector& dv, const bool& val)
     : ArrayN<bool> (dv, val) { }
   
   boolNDArray (const boolNDArray& a) : ArrayN<bool> (a) { }
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -30,16 +30,18 @@ along with Octave; see the file COPYING.
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 charNDArray : public MArrayN<char>
 {
 public:
 
+  typedef charMatrix matrix_type;
+
   charNDArray (void) : MArrayN<char> () { }
 
   charNDArray (const dim_vector& dv) : MArrayN<char> (dv) { }
 
   charNDArray (const dim_vector& dv, char val) : MArrayN<char> (dv, val) { }
   
   charNDArray (const charNDArray& a) : MArrayN<char> (a) { }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -33,16 +33,19 @@ along with Octave; see the file COPYING.
 #include "DET.h"
 
 class
 OCTAVE_API
 Matrix : public MArray2<double>
 {
 public:
 
+  typedef ColumnVector column_vector_type;
+  typedef RowVector row_vector_type;
+
   typedef void (*solve_singularity_handler) (double rcon);
 
   Matrix (void) : MArray2<double> () { }
 
   Matrix (octave_idx_type r, octave_idx_type c) : MArray2<double> (r, c) { }
 
   Matrix (octave_idx_type r, octave_idx_type c, double val) : MArray2<double> (r, c, val) { }
 
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 NDArray : public MArrayN<double>
 {
 public:
 
+  typedef Matrix matrix_type;
+
   NDArray (void) : MArrayN<double> () { }
 
   NDArray (const dim_vector& dv) : MArrayN<double> (dv) { }
 
   NDArray (const dim_vector& dv, double val)
     : MArrayN<double> (dv, val) { }
   
   NDArray (const NDArray& a) : MArrayN<double> (a) { }
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -34,16 +34,19 @@ along with Octave; see the file COPYING.
 #include "DET.h"
 
 class
 OCTAVE_API
 FloatComplexMatrix : public MArray2<FloatComplex>
 {
 public:
  
+  typedef FloatComplexColumnVector column_vector_type;
+  typedef FloatComplexRowVector row_vector_type;
+
   typedef void (*solve_singularity_handler) (float rcon);
 
   FloatComplexMatrix (void) : MArray2<FloatComplex> () { }
 
   FloatComplexMatrix (octave_idx_type r, octave_idx_type c) : MArray2<FloatComplex> (r, c) { }
 
   FloatComplexMatrix (octave_idx_type r, octave_idx_type c, const FloatComplex& val)
     : MArray2<FloatComplex> (r, c, val) { }
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -30,16 +30,18 @@ along with Octave; see the file COPYING.
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 FloatComplexNDArray : public MArrayN<FloatComplex>
 {
 public:
 
+  typedef FloatComplexMatrix matrix_type;
+
   FloatComplexNDArray (void) : MArrayN<FloatComplex> () { }
 
   FloatComplexNDArray (const dim_vector& dv) : MArrayN<FloatComplex> (dv) { }
 
   FloatComplexNDArray (const dim_vector& dv, const FloatComplex& val)
     : MArrayN<FloatComplex> (dv, val) { }
   
   FloatComplexNDArray (const FloatComplexNDArray& a) : MArrayN<FloatComplex> (a) { }
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -33,16 +33,19 @@ along with Octave; see the file COPYING.
 #include "DET.h"
 
 class
 OCTAVE_API
 FloatMatrix : public MArray2<float>
 {
 public:
 
+  typedef FloatColumnVector column_vector_type;
+  typedef FloatRowVector row_vector_type;
+
   typedef void (*solve_singularity_handler) (float rcon);
 
   FloatMatrix (void) : MArray2<float> () { }
 
   FloatMatrix (octave_idx_type r, octave_idx_type c) : MArray2<float> (r, c) { }
 
   FloatMatrix (octave_idx_type r, octave_idx_type c, float val) : MArray2<float> (r, c, val) { }
 
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 FloatNDArray : public MArrayN<float>
 {
 public:
 
+  typedef FloatMatrix matrix_type;
+
   FloatNDArray (void) : MArrayN<float> () { }
 
   FloatNDArray (const dim_vector& dv) : MArrayN<float> (dv) { }
 
   FloatNDArray (const dim_vector& dv, float val)
     : MArrayN<float> (dv, val) { }
   
   FloatNDArray (const FloatNDArray& a) : MArrayN<float> (a) { }
