# HG changeset patch
# User jwe
# Date 1094260588 0
#      Sat Sep 04 01:16:28 2004 +0000
# Node ID 269c3d6c0569f4e1ad9903a9adf903c93efd92d7
# Parent  573d23f9c9cf20b774168c4b13f5e6facb71a423
[project @ 2004-09-04 01:16:28 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,25 @@
+2004-09-03  David Bateman  <dbateman@free.fr>
+
+	* boolNDArray.cc (boolNDArray::concat, boolNDArray::insert):
+	New functions for boolean matrix concatenation.
+	* boolNDArray.h: Provide decls.
+
 2004-09-03  John W. Eaton  <jwe@octave.org>
 
+	* oct-inttpes.h (OCTAVE_INT_CMP_OP): Convert operarands to double
+	to avoid signed/unsigned int comparison problems.
+
+	* mx-ops: Generate CMP and BOOL ops for mixed integer types and
+	for mixed integer and double types.
+
+	* mk-ops.awk: Output BIN_OP_DECLS, CMP_OP_DECLS, and BOOL_OP_DECLS
+	separately, and only if needed.
+
 	* oct-inttypes.h (octave_fit_to_range): Use constructor instead of
 	static_cast for type conversion.
 
 2004-09-01  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (pow, operator +, operator -, operator *,
 	operator /): Handle mixed integer/double ops.  If op generates a
 	NaN, set result to 0.
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -56,16 +56,41 @@ boolNDArray::all (int dim) const
 }
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
+boolNDArray
+concat (const boolNDArray& ra, const boolNDArray& rb, const Array<int>& ra_idx)
+{
+  boolNDArray retval (ra);
+  if (rb.numel () > 0)
+    retval.insert (rb, ra_idx);
+  return retval;
+}
+
+boolNDArray&
+boolNDArray::insert (const boolNDArray& a, int r, int c)
+{
+  Array<bool>::insert (a, r, c);
+  return *this;
+}
+
+boolNDArray&
+boolNDArray::insert (const boolNDArray& a, const Array<int>& ra_idx)
+{
+  Array<bool>::insert (a, ra_idx);
+  return *this;
+}
+
+
+
 boolMatrix
 boolNDArray::matrix_value (void) const
 {
   boolMatrix retval;
 
   int nd = ndims ();
 
   switch (nd)
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -65,16 +65,22 @@ public:
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
+  friend boolNDArray concat (const boolNDArray& ra, const boolNDArray& rb, 
+			     const Array<int>& ra_idx);
+
+  boolNDArray& insert (const boolNDArray& a, int r, int c);
+  boolNDArray& insert (const boolNDArray& a, const Array<int>& ra_idx);
+
   boolMatrix matrix_value (void) const;
 
   boolNDArray squeeze (void) const { return ArrayN<bool>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
diff --git a/liboctave/mk-ops.awk b/liboctave/mk-ops.awk
--- a/liboctave/mk-ops.awk
+++ b/liboctave/mk-ops.awk
@@ -132,18 +132,28 @@ BEGIN {
 	      if (result_fwd_decl_ok)
 	        printf ("class %s\n", rhs_type) >> h_file;
 	      else
 	        printf ("#include \"%s\"\n", rhs_header) >> h_file;
 	    }
 
           printf ("#include \"mx-op-defs.h\"\n") >> h_file;
 
-          printf ("%s%s_OP_DECLS (%s, %s, %s)\n", lhs_class,
-		  rhs_class, result_type, lhs_type, rhs_type) >> h_file
+          if (bin_ops)
+            printf ("%s%s_BIN_OP_DECLS (%s, %s, %s)\n", lhs_class,
+		    rhs_class, result_type, lhs_type, rhs_type) >> h_file
+
+          if (cmp_ops)
+            printf ("%s%s_CMP_OP_DECLS (%s, %s)\n", lhs_class,
+		    rhs_class, lhs_type, rhs_type) >> h_file
+
+          if (bool_ops)
+            printf ("%s%s_BOOL_OP_DECLS (%s, %s)\n", lhs_class,
+		    rhs_class, lhs_type, rhs_type) >> h_file
+
 
           print "#endif" >> h_file;
 
 	  close (h_file);
 
 
 	  print "// DO NOT EDIT -- generated by mk-ops" > cc_file;
 
diff --git a/liboctave/mx-ops b/liboctave/mx-ops
--- a/liboctave/mx-ops
+++ b/liboctave/mx-ops
@@ -4,16 +4,17 @@
 #
 # object-type is one of
 #
 #   S:  scalar
 #   M:  matrix
 #   DM: diagonal matrix
 #   ND: N-d array
 #
+x NONE NONE NONE NO
 b bool S NONE NO
 bm boolMatrix ND boolMatrix.h YES
 bnda boolNDArray ND boolNDArray.h YES
 cdm ComplexDiagMatrix DM CDiagMatrix.h YES
 cm ComplexMatrix M CMatrix.h YES
 cnda ComplexNDArray ND CNDArray.h YES
 cs Complex S oct-cmplx.h NO
 dm DiagMatrix DM dDiagMatrix.h YES
@@ -21,22 +22,26 @@ m Matrix M dMatrix.h YES
 nda NDArray ND dNDArray.h YES
 s double S NONE NO
 i8 octave_int8 S oct-inttypes.h YES
 ui8 octave_uint8 S oct-inttypes.h YES
 i16 octave_int16 S oct-inttypes.h YES
 ui16 octave_uint16 S oct-inttypes.h YES
 i32 octave_int32 S oct-inttypes.h YES
 ui32 octave_uint32 S oct-inttypes.h YES
+i64 octave_int64 S oct-inttypes.h YES
+ui64 octave_uint64 S oct-inttypes.h YES
 i8nda int8NDArray ND int8NDArray.h YES
 ui8nda uint8NDArray ND uint8NDArray.h YES
 i16nda int16NDArray ND int16NDArray.h YES
 ui16nda uint16NDArray ND uint16NDArray.h YES
 i32nda int32NDArray ND int32NDArray.h YES
 ui32nda uint32NDArray ND uint32NDArray.h YES
+i64nda int64NDArray ND int64NDArray.h YES
+ui64nda uint64NDArray ND uint64NDArray.h YES
 # ops
 # result_t lhs_t rhs_t op-type lhs_conv rhs_conv zero_val headers ...
 #
 # op-type is one of
 #
 #  B: binary ops, + - * /
 #  C: comparison ops, < <= == != >= >
 #  L: logical ops, & |
@@ -66,20 +71,251 @@ cm m cm BCL NONE real 0.0 boolMatrix.h
 cnda nda cnda BCL NONE real 0.0 boolMatrix.h boolNDArray.h
 cm s cdm B
 cm s cm BCL NONE real 0.0 boolMatrix.h
 cnda s cnda BCL NONE real 0.0 boolMatrix.h boolNDArray.h
 m dm m B 0.0
 m dm s B
 m m dm B 0.0
 m s dm B
+#
 i8nda s i8nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 i8nda i8nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui8nda s ui8nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui8nda ui8nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 i16nda s i16nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 i16nda i16nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui16nda s ui16nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui16nda ui16nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 i32nda s i32nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 i32nda i32nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui32nda s ui32nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
 ui32nda ui32nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
+i64nda s i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+i64nda i64nda s CL NONE NONE 0 boolMatrix.h boolNDArray.h
+ui64nda s ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+ui64nda ui64nda s CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i8nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i16nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i32nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i64nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui8nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui16nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui32nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui64nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i8 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i16 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i32 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i64 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui8 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui16 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui32 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui64 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i8nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i16nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i32nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x i64nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui8nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui16nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui32nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+#
+x ui64nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -499,23 +499,28 @@ bitshift (const octave_int<T>& a, int n,
   if (n > 0)
     return (a << n) & mask;
   else if (n < 0)
     return (a >> -n) & mask;
   else
     return a;
 }
 
+// XXX FIXME XXX -- need partial specializations for int64 and uint64
+// types.
+
 #define OCTAVE_INT_CMP_OP(OP) \
  \
   template <class T1, class T2> \
   bool \
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
-    return x.value () OP y.value (); \
+    double tx = static_cast<double> (x.value ()); \
+    double ty = static_cast<double> (y.value ()); \
+    return tx OP ty; \
   }
 
 OCTAVE_INT_CMP_OP (<)
 OCTAVE_INT_CMP_OP (<=)
 OCTAVE_INT_CMP_OP (>=)
 OCTAVE_INT_CMP_OP (>)
 OCTAVE_INT_CMP_OP (==)
 OCTAVE_INT_CMP_OP (!=)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-09-03  David Bateman  <dbateman@free.fr>
+
+	* general/repmat.m: Fix to allow logical classes.
+
 2004-08-31  John W. Eaton  <jwe@octave.org>
 
 	* general/isa.m: New function, from Octave-forge.
 
 2004-08-31  David Bateman  <dbateman@free.fr>
 
 	* general/bitcmp.m, general/bitget.m, general/bitset.m: Remove 
 	limitation on the use of int64 and uint64 types, and the use
diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -50,17 +50,26 @@ function x = repmat (a, m, n)
       error ("repmat: invalid dimensional argument");
     endif
   endif
 
   if (numel (a) == 1)
     if (isstr (a))
       x = setstr (toascii (a) * ones (idx));
     else
-      x = a * ones(idx, class(a));
+      if (strcmp (class (a), "double"))
+	## This is faster with octave for double/Complex
+	x = a * ones(idx, class(a));
+      else
+	cidx = cell (1, length (idx));
+	for i=1:length(idx)
+	  cidx{i} = ones (1,idx(i));
+	endfor
+	x = a (cidx{:});
+      endif
     endif
   elseif (ndims (a) == 2 && length (idx) < 3)
     if (isstr (a))
       x = setstr (kron (ones (idx), toascii (a)));
     elseif (strcmp (class(a), "double")) 
       x = kron (ones (idx), a);
     else
       aidx = size(a);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,57 @@
 2004-09-03  John W. Eaton  <jwe@octave.org>
 
+	* OPERATORS/op-b-bm.cc (DEFCONV): Define bool scalar to bool
+	matrix conversion.
+	(install_b_bm_ops): Install it.
+	Install conversion for assignment of bool matrix to indexed bool.
+	* OPERATORS/op-b-b.cc (install_b_b_ops): Install conversion for
+	assignment of bool to indexed bool.
+
+2004-09-03  David Bateman  <dbateman@free.fr>
+
+	* OPERATORS/op-b-b.cc, OPERATORS/op-b-bm.cc, OPERATORS/op-bm-b.cc,
+	OPERATORS/op-bm-bm.cc: Modify concatenation between boolean types
+	so that it returns a boolean.
+
+	* ov-bool.cc (octave_bool::do_index_op): Return boolean matrix.
+
+	* ov-intx.h (do_index_op (const octave_value_list&, int)):
+	New function for indexed subsref of int types.
+
+2004-09-03  John W. Eaton  <jwe@octave.org>
+
+	* OPERATORS/op-int.h (OCTAVE_SM_INT_OPS): Define int by double
+	mixed comparison and bool ops.
+	(OCTAVE_INSTALL_SM_INT_OPS): Install them.
+	(OCTAVE_MS_INT_OPS): Define double by int mixed comparison and
+	bool ops.
+	(OCTAVE_INSTALL_MS_INT_OPS): Install them
+
+	* OPERATORS/op-i8-i8.cc, OPERATORS/op-i16-i16.cc,
+	OPERATORS/op-i32-i32.cc, OPERATORS/op-i64-i64.cc,
+	OPERATORS/op-ui8-ui8.cc, OPERATORS/op-ui16-ui16.cc,
+	OPERATORS/op-ui32-ui32.cc, OPERATORS/op-ui64-ui64.cc:
+	Define and install various mixed-type operators.
+
+	* OPERATORS/op-int.h (OCTAVE_MM_INT_OPS): Also define mixed int
+	and double matrix comparison and bool ops.
+	(OCTAVE_INSTALL_MM_INT_OPS): Install them.
+	(OCTAVE_SS_INT_BOOL_OPS, OCTAVE_SM_INT_BOOL_OPS,
+	OCTAVE_MS_INT_BOOL_OPS, OCTAVE_MM_INT_BOOL_OPS):
+	Define logical AND and OR ops.
+	(OCTAVE_INSTALL_SS_INT_BOOL_OPS, OCTAVE_INSTALL_SM_INT_BOOL_OPS,
+	OCTAVE_INSTALL_MS_INT_BOOL_OPS, OCTAVE_INSTALL_MM_INT_BOOL_OPS):
+	Install them.
+	(OCTAVE_MM_INT_CMP_OPS, OCTAVE_MM_INT_BOOL_OPS): Accept prefix arg.
+	(OCTAVE_MM_CONV): New macro.
+	(OCTAVE_MM_INT_OPS): Use it to define complex matrix conversion.
+	(OCTAVE_MIXED_INT_CMP_OPS, OCTAVE_MIXED_INT_BOOL_OPS): New macros.
+
 	* OPERATORS/op-int.h (OCTAVE_MS_INT_OPS): Don't define indexed int
 	matrix = complex scalar assignment ops.
 	(OCTAVE_MS_INT_OPS): Don't define indexed int matrix = complex
 	matrix assignment ops.
 	(OCTAVE_SM_CONV): New macro.
 	(OCTAVE_SM_INT_OPS): Use it to define int scalar -> (int|complex)
 	matrix widening ops.
 	(OCTAVE_RE_INT_ASSIGN_OPS, OCTAVE_CX_INT_ASSIGN_OPS): New macros.
diff --git a/src/OPERATORS/op-b-b.cc b/src/OPERATORS/op-b-b.cc
--- a/src/OPERATORS/op-b-b.cc
+++ b/src/OPERATORS/op-b-b.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-bool.h"
+#include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool unary ops.
@@ -49,17 +50,17 @@ DEFUNOP_OP (hermitian, bool, /* no-op */
 
 // bool by bool ops.
 
 DEFBINOP_OP (eq, bool, bool, ==)
 DEFBINOP_OP (ne, bool, bool, !=)
 DEFBINOP_OP (el_and, bool, bool, &&)
 DEFBINOP_OP (el_or, bool, bool, ||)
 
-DEFNDCATOP_FN (b_b, bool, bool, array, array, concat)
+DEFNDCATOP_FN (b_b, bool, bool, bool_array, bool_array, concat)
 DEFNDCATOP_FN (b_s, bool, scalar, array, array, concat)
 DEFNDCATOP_FN (s_b, scalar, bool, array, array, concat)
 
 void
 install_b_b_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool, not);
   INSTALL_UNOP (op_transpose, octave_bool, transpose);
@@ -68,15 +69,17 @@ install_b_b_ops (void)
   INSTALL_BINOP (op_eq, octave_bool, octave_bool, eq);
   INSTALL_BINOP (op_ne, octave_bool, octave_bool, ne);
   INSTALL_BINOP (op_el_and, octave_bool, octave_bool, el_and);
   INSTALL_BINOP (op_el_or, octave_bool, octave_bool, el_or);
 
   INSTALL_CATOP (octave_bool, octave_bool, b_b);
   INSTALL_CATOP (octave_bool, octave_scalar, b_s);
   INSTALL_CATOP (octave_scalar, octave_bool, s_b);
+
+  INSTALL_ASSIGNCONV (octave_bool, octave_bool, octave_bool_matrix);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-b-bm.cc b/src/OPERATORS/op-b-bm.cc
--- a/src/OPERATORS/op-b-bm.cc
+++ b/src/OPERATORS/op-b-bm.cc
@@ -40,28 +40,39 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool matrix by bool ops.
 
 DEFNDBINOP_FN (el_and, bool, bool_matrix, bool, bool_array, mx_el_and)
 DEFNDBINOP_FN (el_or, bool, bool_matrix, bool, bool_array, mx_el_or)
 
-DEFNDCATOP_FN (b_bm, bool, bool_matrix, array, array, concat)
+DEFNDCATOP_FN (b_bm, bool, bool_matrix, bool_array, bool_array, concat)
 DEFNDCATOP_FN (b_m, bool, matrix, array, array, concat)
 DEFNDCATOP_FN (s_bm, scalar, bool_matrix, array, array, concat)
 
+DEFCONV (bool_matrix_conv, bool, bool_matrix)
+{
+  CAST_CONV_ARG (const octave_bool&);
+
+  return new octave_bool_matrix (v.bool_matrix_value ());
+}
+
 void
 install_b_bm_ops (void)
 {
   INSTALL_BINOP (op_el_and, octave_bool, octave_bool_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_bool, octave_bool_matrix, el_or);
 
   INSTALL_CATOP (octave_bool, octave_bool_matrix, b_bm);
   INSTALL_CATOP (octave_bool, octave_matrix, b_m);
   INSTALL_CATOP (octave_scalar, octave_bool_matrix, s_bm);
+
+  INSTALL_ASSIGNCONV (octave_bool, octave_bool_matrix, octave_bool_matrix);
+
+  INSTALL_WIDENOP (octave_bool, octave_bool_matrix, bool_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-bm-b.cc b/src/OPERATORS/op-bm-b.cc
--- a/src/OPERATORS/op-bm-b.cc
+++ b/src/OPERATORS/op-bm-b.cc
@@ -40,17 +40,17 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool matrix by bool ops.
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool, bool_array, bool, mx_el_and)
 DEFNDBINOP_FN (el_or, bool_matrix, bool, bool_array, bool, mx_el_or)
 
-DEFNDCATOP_FN (bm_b, bool_matrix, bool, array, array, concat)
+DEFNDCATOP_FN (bm_b, bool_matrix, bool, bool_array, bool_array, concat)
 DEFNDCATOP_FN (bm_s, bool_matrix, scalar, array, array, concat)
 DEFNDCATOP_FN (m_b, matrix, bool, array, array, concat)
 
 DEFNDASSIGNOP_FN (assign, bool_matrix, bool, bool_array, assign)
 
 void
 install_bm_b_ops (void)
 {
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -61,17 +61,17 @@ DEFNDBINOP_FN (eq, bool_matrix, bool_mat
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool_matrix, bool_array, bool_array,
 	       mx_el_and)
 
 DEFNDBINOP_FN (el_or,  bool_matrix, bool_matrix, bool_array, bool_array,
 	       mx_el_or)
 
-DEFNDCATOP_FN (bm_bm, bool_matrix, bool_matrix, array, array, concat)
+DEFNDCATOP_FN (bm_bm, bool_matrix, bool_matrix, bool_array, bool_array, concat)
 DEFNDCATOP_FN (bm_m, bool_matrix, matrix, array, array, concat)
 DEFNDCATOP_FN (m_bm, matrix, bool_matrix, array, array, concat)
 
 DEFNDASSIGNOP_FN (assign, bool_matrix, bool_matrix, bool_array, assign)
 
 void
 install_bm_bm_ops (void)
 {
diff --git a/src/OPERATORS/op-i16-i16.cc b/src/OPERATORS/op-i16-i16.cc
--- a/src/OPERATORS/op-i16-i16.cc
+++ b/src/OPERATORS/op-i16-i16.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-i16nda-i8.h"
+#include "mx-i16nda-ui8.h"
+#include "mx-i16nda-ui16.h"
+#include "mx-i16nda-i32.h"
+#include "mx-i16nda-ui32.h"
+#include "mx-i16nda-i64.h"
+#include "mx-i16nda-ui64.h"
+
+#include "mx-i16nda-i8nda.h"
+#include "mx-i16nda-ui8nda.h"
+#include "mx-i16nda-ui16nda.h"
+#include "mx-i16nda-i32nda.h"
+#include "mx-i16nda-ui32nda.h"
+#include "mx-i16nda-i64nda.h"
+#include "mx-i16nda-ui64nda.h"
+
+#include "mx-i16-i8nda.h"
+#include "mx-i16-ui8nda.h"
+#include "mx-i16-ui16nda.h"
+#include "mx-i16-i32nda.h"
+#include "mx-i16-ui32nda.h"
+#include "mx-i16-i64nda.h"
+#include "mx-i16-ui64nda.h"
+
+#include "mx-i16nda-s.h"
+#include "mx-s-i16nda.h"
+
+#include "mx-i16nda-nda.h"
+#include "mx-nda-i16nda.h"
+
+#include "mx-i16-nda.h"
+#include "mx-nda-i16.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, int16_,
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, int16_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, int16_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, int16_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, int16_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, int16_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, int16_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, int16_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (int16, int8)
+OCTAVE_MIXED_INT_CMP_OPS (int16, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (int16, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (int16, int32)
+OCTAVE_MIXED_INT_CMP_OPS (int16, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (int16, int64)
+OCTAVE_MIXED_INT_CMP_OPS (int16, uint64)
+
 void
 install_i16_i16_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (int16);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, int16_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, int16_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui16, int16_, uint16_);
@@ -91,15 +132,23 @@ install_i16_i16_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int16, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int16, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-i32-i32.cc b/src/OPERATORS/op-i32-i32.cc
--- a/src/OPERATORS/op-i32-i32.cc
+++ b/src/OPERATORS/op-i32-i32.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-i32nda-i8.h"
+#include "mx-i32nda-ui8.h"
+#include "mx-i32nda-i16.h"
+#include "mx-i32nda-ui16.h"
+#include "mx-i32nda-ui32.h"
+#include "mx-i32nda-i64.h"
+#include "mx-i32nda-ui64.h"
+
+#include "mx-i32nda-i8nda.h"
+#include "mx-i32nda-ui8nda.h"
+#include "mx-i32nda-i16nda.h"
+#include "mx-i32nda-ui16nda.h"
+#include "mx-i32nda-ui32nda.h"
+#include "mx-i32nda-i64nda.h"
+#include "mx-i32nda-ui64nda.h"
+
+#include "mx-i32-i8nda.h"
+#include "mx-i32-ui8nda.h"
+#include "mx-i32-i16nda.h"
+#include "mx-i32-ui16nda.h"
+#include "mx-i32-ui32nda.h"
+#include "mx-i32-i64nda.h"
+#include "mx-i32-ui64nda.h"
+
+#include "mx-i32nda-s.h"
+#include "mx-s-i32nda.h"
+
+#include "mx-i32nda-nda.h"
+#include "mx-nda-i32nda.h"
+
+#include "mx-i32-nda.h"
+#include "mx-nda-i32.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, int32_,
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, int32_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, int32_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, int32_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, int32_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, int32_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, int32_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, int32_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (int32, int8)
+OCTAVE_MIXED_INT_CMP_OPS (int32, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (int32, int16)
+OCTAVE_MIXED_INT_CMP_OPS (int32, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (int32, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (int32, int64)
+OCTAVE_MIXED_INT_CMP_OPS (int32, uint64)
+
 void
 install_i32_i32_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (int32);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, int32_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, int32_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, int32_, int16_);
@@ -91,15 +132,23 @@ install_i32_i32_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int32, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int32, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-i64-i64.cc b/src/OPERATORS/op-i64-i64.cc
--- a/src/OPERATORS/op-i64-i64.cc
+++ b/src/OPERATORS/op-i64-i64.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-i64nda-i8.h"
+#include "mx-i64nda-ui8.h"
+#include "mx-i64nda-i16.h"
+#include "mx-i64nda-ui16.h"
+#include "mx-i64nda-i32.h"
+#include "mx-i64nda-ui32.h"
+#include "mx-i64nda-ui64.h"
+
+#include "mx-i64nda-i8nda.h"
+#include "mx-i64nda-ui8nda.h"
+#include "mx-i64nda-i16nda.h"
+#include "mx-i64nda-ui16nda.h"
+#include "mx-i64nda-i32nda.h"
+#include "mx-i64nda-ui32nda.h"
+#include "mx-i64nda-ui64nda.h"
+
+#include "mx-i64-i8nda.h"
+#include "mx-i64-ui8nda.h"
+#include "mx-i64-i16nda.h"
+#include "mx-i64-ui16nda.h"
+#include "mx-i64-i32nda.h"
+#include "mx-i64-ui32nda.h"
+#include "mx-i64-ui64nda.h"
+
+#include "mx-i64nda-s.h"
+#include "mx-s-i64nda.h"
+
+#include "mx-i64nda-nda.h"
+#include "mx-nda-i64nda.h"
+
+#include "mx-i64-nda.h"
+#include "mx-nda-i64.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -59,18 +92,18 @@ OCTAVE_SM_INT_BOOL_OPS (sm, int64_, int6
 
 OCTAVE_MS_INT_CMP_OPS (ms, int64_, int64_)
 OCTAVE_MS_INT_BOOL_OPS (ms, int64_, int64_)
 OCTAVE_MS_INT_ASSIGN_OPS (ms, int64_, int64_, int64_)
 OCTAVE_MS_INT_ASSIGN_OPS (mx, int64_, , )
 OCTAVE_MS_INT_ASSIGN_OPS (mc, int64_, complex_, )
 
 OCTAVE_M_INT_UNOPS (int64)
-OCTAVE_MM_INT_CMP_OPS (int64, int64)
-OCTAVE_MM_INT_BOOL_OPS (int64, int64)
+OCTAVE_MM_INT_CMP_OPS (mm, int64_, int64_)
+OCTAVE_MM_INT_BOOL_OPS (mm, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mm, int64_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmx, int64_, , )
 OCTAVE_MM_INT_ASSIGN_OPS (mmc, int64_, complex_, )
 
 OCTAVE_MS_INT_ASSIGN_OPS (mi8, int64_, int8_, int8_)
 OCTAVE_MS_INT_ASSIGN_OPS (mui8, int64_, uint8_, uint8_)
 OCTAVE_MS_INT_ASSIGN_OPS (mi16, int64_, int16_, int16_)
 OCTAVE_MS_INT_ASSIGN_OPS (mui16, int64_, uint16_, uint16_)
@@ -81,16 +114,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, int64_,
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, int64_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, int64_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, int64_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, int64_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, int64_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, int64_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, int64_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (int64, int8)
+OCTAVE_MIXED_INT_CMP_OPS (int64, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (int64, int16)
+OCTAVE_MIXED_INT_CMP_OPS (int64, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (int64, int32)
+OCTAVE_MIXED_INT_CMP_OPS (int64, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (int64, uint64)
+
 void
 install_i64_i64_ops (void)
 {
   OCTAVE_INSTALL_S_INT_UNOPS (int64);
   OCTAVE_INSTALL_SS_INT_CMP_OPS (ss, int64_, int64_);
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (ss, int64_, int64_);
 
   OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, int64_, int64_);
@@ -98,18 +139,18 @@ install_i64_i64_ops (void)
 
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, int64_, int64_);
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, int64_, int64_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (ms, int64_, int64_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mx, int64_, );
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mc, int64_, complex_);
 
   OCTAVE_INSTALL_M_INT_UNOPS (int64);
-  OCTAVE_INSTALL_MM_INT_CMP_OPS (int64, int64);
-  OCTAVE_INSTALL_MM_INT_BOOL_OPS (int64, int64);
+  OCTAVE_INSTALL_MM_INT_CMP_OPS (mm, int64_, int64_);
+  OCTAVE_INSTALL_MM_INT_BOOL_OPS (mm, int64_, int64_);
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mm, int64_, int64_);
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmx, int64_, );
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmc, int64_, complex_);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, int64_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, int64_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, int64_, int16_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui16, int64_, uint16_);
@@ -127,15 +168,23 @@ install_i64_i64_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int64, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int64, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-i8-i8.cc b/src/OPERATORS/op-i8-i8.cc
--- a/src/OPERATORS/op-i8-i8.cc
+++ b/src/OPERATORS/op-i8-i8.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-i8nda-ui8.h"
+#include "mx-i8nda-i16.h"
+#include "mx-i8nda-ui16.h"
+#include "mx-i8nda-i32.h"
+#include "mx-i8nda-ui32.h"
+#include "mx-i8nda-i64.h"
+#include "mx-i8nda-ui64.h"
+
+#include "mx-i8nda-ui8nda.h"
+#include "mx-i8nda-i16nda.h"
+#include "mx-i8nda-ui16nda.h"
+#include "mx-i8nda-i32nda.h"
+#include "mx-i8nda-ui32nda.h"
+#include "mx-i8nda-i64nda.h"
+#include "mx-i8nda-ui64nda.h"
+
+#include "mx-i8-ui8nda.h"
+#include "mx-i8-i16nda.h"
+#include "mx-i8-ui16nda.h"
+#include "mx-i8-i32nda.h"
+#include "mx-i8-ui32nda.h"
+#include "mx-i8-i64nda.h"
+#include "mx-i8-ui64nda.h"
+
+#include "mx-i8nda-s.h"
+#include "mx-s-i8nda.h"
+
+#include "mx-i8nda-nda.h"
+#include "mx-nda-i8nda.h"
+
+#include "mx-i8-nda.h"
+#include "mx-nda-i8.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, int8_, 
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, int8_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, int8_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, int8_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, int8_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, int8_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, int8_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, int8_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (int8, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (int8, int16)
+OCTAVE_MIXED_INT_CMP_OPS (int8, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (int8, int32)
+OCTAVE_MIXED_INT_CMP_OPS (int8, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (int8, int64)
+OCTAVE_MIXED_INT_CMP_OPS (int8, uint64)
+
 void
 install_i8_i8_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (int8);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, int8_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, int8_, int16_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui16, int8_, uint16_);
@@ -91,15 +132,23 @@ install_i8_i8_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (int8, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (int8, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -94,18 +94,29 @@ Software Foundation, 59 Temple Place - S
  \
     if (! v1.T1 ## scalar_value ()) \
       gripe_divide_by_zero (); \
  \
     return octave_value (v2.T2 ## scalar_value () / v1.T1 ## scalar_value ()); \
   } \
 
 #define OCTAVE_SS_INT_BOOL_OPS(PFX, T1, T2) \
-  /* DEFBINOP_OP (PFX ## _el_and, T1 ## scalar, T2 ## scalar, &&) */ \
-  /* DEFBINOP_OP (PFX ## _el_or, T1 ## scalar, T2 ## scalar, ||) */
+  DEFBINOP (PFX ## _el_and, T2, T2) \
+  { \
+    CAST_BINOP_ARGS (const octave_ ## T1 ## scalar&, const octave_ ## T2 ## scalar&); \
+ \
+    return v1.T1 ## scalar_value () != 0 && v2.T2 ## scalar_value () != 0; \
+  } \
+ \
+  DEFBINOP (PFX ## _el_or, T1, T2) \
+  { \
+    CAST_BINOP_ARGS (const octave_ ## T1 ## scalar&, const octave_ ## T2 ## scalar&); \
+ \
+    return v1.T1 ## scalar_value () != 0 || v2.T2 ## scalar_value () != 0; \
+  }
 
 #define OCTAVE_SS_INT_CMP_OPS(PFX, T1, T2) \
   DEFBINOP_OP (PFX ## _lt, T1 ## scalar, T2 ## scalar, <) \
   DEFBINOP_OP (PFX ## _le, T1 ## scalar, T2 ## scalar, <=) \
   DEFBINOP_OP (PFX ## _eq, T1 ## scalar, T2 ## scalar, ==) \
   DEFBINOP_OP (PFX ## _ge, T1 ## scalar, T2 ## scalar, >=) \
   DEFBINOP_OP (PFX ## _gt, T1 ## scalar, T2 ## scalar, >) \
   DEFBINOP_OP (PFX ## _ne, T1 ## scalar, T2 ## scalar, !=)
@@ -194,18 +205,18 @@ Software Foundation, 59 Temple Place - S
   DEFNDBINOP_FN (PFX ## _lt, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_lt) \
   DEFNDBINOP_FN (PFX ## _le, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_le) \
   DEFNDBINOP_FN (PFX ## _eq, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_eq) \
   DEFNDBINOP_FN (PFX ## _ge, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_ge) \
   DEFNDBINOP_FN (PFX ## _gt, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_gt) \
   DEFNDBINOP_FN (PFX ## _ne, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_ne)
 
 #define OCTAVE_SM_INT_BOOL_OPS(PFX, TS, TM) \
-  /* DEFNDBINOP_FN (PFX ## _el_and, TS ## scalar, TYPE ## matrix, TS ## scalar, TYPE ## array, mx_el_and) */ \
-  /* DEFNDBINOP_FN (PFX ## _el_or,  TS ## scalar, TYPE ## matrix, TS ## scalar, TYPE ## array, mx_el_or) */
+  DEFNDBINOP_FN (PFX ## _el_and, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_and) \
+  DEFNDBINOP_FN (PFX ## _el_or,  TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, mx_el_or)
 
 #define OCTAVE_SM_POW_OPS(T1, T2) \
   octave_value \
   elem_xpow (const octave_ ## T1& a, const T2 ## NDArray& b) \
   { \
     T2 ## NDArray result (b.dims ()); \
     for (int i = 0; i < b.length (); i++) \
       { \
@@ -224,18 +235,20 @@ Software Foundation, 59 Temple Place - S
   }
 
 #define OCTAVE_SM_INT_OPS(TYPE) \
   OCTAVE_SM_POW_OPS (TYPE, TYPE) \
   OCTAVE_SM_INT_ARITH_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_SM_INT_ARITH_OPS (xm, , TYPE ## _) \
   OCTAVE_SM_INT_CMP_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_SM_INT_CMP_OPS (xm, , TYPE ## _) \
+  OCTAVE_SM_INT_CMP_OPS (smx, TYPE ## _, ) \
   OCTAVE_SM_INT_BOOL_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_SM_INT_BOOL_OPS (xm, , TYPE ## _) \
+  OCTAVE_SM_INT_BOOL_OPS (smx, TYPE ## _, ) \
   OCTAVE_SM_CONV (TYPE ## _, TYPE ## _) \
   OCTAVE_SM_CONV (TYPE ## _, complex_)
 
 #define OCTAVE_SM_INT_OPS2(TS, TM) \
   OCTAVE_SM_INT_ARITH_OPS (sm, TS, TM) \
   OCTAVE_SM_INT_CMP_OPS (sm, TS, TM) \
   OCTAVE_SM_INT_BOOL_OPS (sm, TS, TM)
 
@@ -290,22 +303,21 @@ Software Foundation, 59 Temple Place - S
   /* } */
 
 #define OCTAVE_MS_INT_CMP_OPS(PFX, TM, TS) \
   DEFNDBINOP_FN (PFX ## _lt, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_lt) \
   DEFNDBINOP_FN (PFX ## _le, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_le) \
   DEFNDBINOP_FN (PFX ## _eq, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_eq) \
   DEFNDBINOP_FN (PFX ## _ge, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_ge) \
   DEFNDBINOP_FN (PFX ## _gt, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_gt) \
-  DEFNDBINOP_FN (PFX ## _ne, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_ne) \
+  DEFNDBINOP_FN (PFX ## _ne, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_ne)
 
 #define OCTAVE_MS_INT_BOOL_OPS(PFX, TM, TS) \
-  /* DEFNDBINOP_FN (PFX ## _el_and, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_and) */ \
-  /* DEFNDBINOP_FN (PFX ## _el_or, TM ## matrix, TS ## scalar, TM
-     ## array, TS ## scalar, mx_el_or) */
+  DEFNDBINOP_FN (PFX ## _el_and, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_and) \
+  DEFNDBINOP_FN (PFX ## _el_or, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_or)
 
 #define OCTAVE_MS_INT_ASSIGN_OPS(PFX, TM, TS, TE) \
   DEFNDASSIGNOP_FN (PFX ## _assign, TM ## matrix, TS ## scalar, TE ## array, assign)
 
 #define OCTAVE_MS_POW_OPS(T1, T2) \
 octave_value elem_xpow (T1 ## NDArray a, octave_ ## T2  b) \
 { \
   T1 ## NDArray result (a.dims ()); \
@@ -318,18 +330,20 @@ octave_value elem_xpow (T1 ## NDArray a,
 }
 
 #define OCTAVE_MS_INT_OPS(TYPE) \
   OCTAVE_MS_POW_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_ARITH_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_MS_INT_ARITH_OPS (mx, TYPE ## _, ) \
   OCTAVE_MS_INT_CMP_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_MS_INT_CMP_OPS (mx, TYPE ## _, ) \
+  OCTAVE_MS_INT_CMP_OPS (mxs, , TYPE ## _) \
   OCTAVE_MS_INT_BOOL_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_MS_INT_BOOL_OPS (mx, TYPE ## _, ) \
+  OCTAVE_MS_INT_BOOL_OPS (mxs, , TYPE ## _) \
   OCTAVE_MS_INT_ASSIGN_OPS (ms, TYPE ## _, TYPE ## _, TYPE ## _) \
   OCTAVE_MS_INT_ASSIGN_OPS (mx, TYPE ## _, , )
 
 #define OCTAVE_M_INT_UNOPS(TYPE) \
   /* matrix unary ops. */ \
  \
   DEFNDUNOP_OP (m_not, TYPE ## _matrix, TYPE ## _array, !) \
   DEFNDUNOP_OP (m_uminus, TYPE ## _matrix, TYPE ## _array, -) \
@@ -375,27 +389,27 @@ octave_value elem_xpow (T1 ## NDArray a,
  \
   /* DEFBINOP (mm_el_ldiv, T1 ## _matrix, T2 ## _matrix) */ \
   /* { */ \
   /* CAST_BINOP_ARGS (const octavematrix&, const octavematrix&); */ \
   /* */ \
   /* return octave_value (quotient (v2.array_value (), v1.array_value ())); */ \
   /* } */
 
-#define OCTAVE_MM_INT_CMP_OPS(T1, T2) \
-  DEFNDBINOP_FN (mm_lt, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_lt) \
-  DEFNDBINOP_FN (mm_le, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_le) \
-  DEFNDBINOP_FN (mm_eq, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_eq) \
-  DEFNDBINOP_FN (mm_ge, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_ge) \
-  DEFNDBINOP_FN (mm_gt, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_gt) \
-  DEFNDBINOP_FN (mm_ne, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_ne)
+#define OCTAVE_MM_INT_CMP_OPS(PFX, T1, T2) \
+  DEFNDBINOP_FN (PFX ## _lt, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_lt) \
+  DEFNDBINOP_FN (PFX ## _le, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_le) \
+  DEFNDBINOP_FN (PFX ## _eq, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_eq) \
+  DEFNDBINOP_FN (PFX ## _ge, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_ge) \
+  DEFNDBINOP_FN (PFX ## _gt, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_gt) \
+  DEFNDBINOP_FN (PFX ## _ne, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_ne)
 
-#define OCTAVE_MM_INT_BOOL_OPS(T1, T2) \
-  DEFNDBINOP_FN (mm_el_and, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_and) \
-  DEFNDBINOP_FN (mm_el_or,  T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_or)
+#define OCTAVE_MM_INT_BOOL_OPS(PFX, T1, T2) \
+  DEFNDBINOP_FN (PFX ## _el_and, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_and) \
+  DEFNDBINOP_FN (PFX ## _el_or,  T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_or)
 
 #define OCTAVE_MM_INT_ASSIGN_OPS(PFX, TLHS, TRHS, TE) \
   DEFNDASSIGNOP_FN (PFX ## _assign, TLHS ## matrix, TRHS ## matrix, TE ## array, assign)
 
 #define OCTAVE_MM_POW_OPS(T1, T2) \
   octave_value \
   elem_xpow (const T1 ## NDArray& a, const T2 ## NDArray& b) \
   { \
@@ -410,24 +424,35 @@ octave_value elem_xpow (T1 ## NDArray a,
     for (int i = 0; i < a.length (); i++) \
       { \
 	OCTAVE_QUIT; \
 	result (i) = pow (a(i), b(i)); \
       } \
     return octave_value (result); \
   }
 
+#define OCTAVE_MM_CONV(T1, T2) \
+  DEFCONV (T1 ## m_ ## T2 ## m_conv, T1 ## matrix, T2 ## matrix) \
+  { \
+    CAST_CONV_ARG (const octave_ ## T1 ## matrix&); \
+ \
+    return new octave_ ## T2 ## matrix (v.T2 ## array_value ()); \
+  }
+
 #define OCTAVE_MM_INT_OPS(TYPE) \
   OCTAVE_M_INT_UNOPS (TYPE) \
   OCTAVE_MM_POW_OPS (TYPE, TYPE) \
   OCTAVE_MM_INT_ARITH_OPS (TYPE, TYPE) \
-  OCTAVE_MM_INT_CMP_OPS (TYPE, TYPE) \
-  OCTAVE_MM_INT_BOOL_OPS (TYPE, TYPE) \
+  OCTAVE_MM_INT_CMP_OPS (mm, TYPE ## _, TYPE ## _) \
+  OCTAVE_MM_INT_CMP_OPS (mmx, TYPE ## _, ) \
+  OCTAVE_MM_INT_BOOL_OPS (mm, TYPE ## _, TYPE ## _) \
+  OCTAVE_MM_INT_BOOL_OPS (mmx, TYPE ## _, ) \
   OCTAVE_MM_INT_ASSIGN_OPS (mm, TYPE ## _, TYPE ## _, TYPE ## _) \
-  OCTAVE_MM_INT_ASSIGN_OPS (mmx, TYPE ## _, , )
+  OCTAVE_MM_INT_ASSIGN_OPS (mmx, TYPE ## _, , ) \
+  OCTAVE_MM_CONV(TYPE ## _, complex_)
 
 #define OCTAVE_MM_INT_OPS2(T1, T2) \
   OCTAVE_MM_INT_ARITH_OPS (mm, T1, T2) \
   OCTAVE_MM_INT_CMP_OPS (mm, T1, T2) \
   OCTAVE_MM_INT_BOOL_OPS (mm, T1, T2)
 
 #define OCTAVE_RE_INT_ASSIGN_OPS(TYPE) \
   DEFNDASSIGNOP_FN (TYPE ## ms_assign, matrix, TYPE ## _scalar, array, assign) \
@@ -471,18 +496,18 @@ octave_value elem_xpow (T1 ## NDArray a,
   INSTALL_BINOP (op_lt, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _lt); \
   INSTALL_BINOP (op_le, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _le); \
   INSTALL_BINOP (op_eq, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _eq); \
   INSTALL_BINOP (op_ge, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _ge); \
   INSTALL_BINOP (op_gt, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _gt); \
   INSTALL_BINOP (op_ne, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _ne);
 
 #define OCTAVE_INSTALL_SS_INT_BOOL_OPS(PFX, T1, T2) \
-  /* INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_and); */ \
-  /* INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_or); */
+  INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_and); \
+  INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_or);
 
 #define OCTAVE_INSTALL_SS_INT_OPS(TYPE) \
   OCTAVE_INSTALL_S_INT_UNOPS (TYPE) \
   OCTAVE_INSTALL_SS_INT_ARITH_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_ARITH_OPS (sx, TYPE ## _, ) \
   OCTAVE_INSTALL_SS_INT_ARITH_OPS (xs, , TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (sx, TYPE ## _, ) \
@@ -515,28 +540,30 @@ octave_value elem_xpow (T1 ## NDArray a,
   INSTALL_BINOP (op_lt, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _lt); \
   INSTALL_BINOP (op_le, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _le); \
   INSTALL_BINOP (op_eq, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _eq); \
   INSTALL_BINOP (op_ge, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _ge); \
   INSTALL_BINOP (op_gt, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _gt); \
   INSTALL_BINOP (op_ne, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _ne);
 
 #define OCTAVE_INSTALL_SM_INT_BOOL_OPS(PFX, T1, T2) \
-  /* INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_and); */ \
-  /* INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_or); */
+  INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_and); \
+  INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_or);
 
 #define OCTAVE_INSTALL_SM_INT_OPS(TYPE) \
   OCTAVE_INSTALL_SM_INT_ARITH_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_ARITH_OPS (xm, , TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (xm, , TYPE ## _) \
+  OCTAVE_INSTALL_SM_INT_CMP_OPS (smx, TYPE ## _, ) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (xm, , TYPE ## _) \
-  INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, TYPE ## _matrix_conv) \
-  INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_complex_matrix, complex_matrix_conv) \
+  OCTAVE_INSTALL_SM_INT_BOOL_OPS (smx, TYPE ## _, ) \
+  INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, TYPE ## _s_ ## TYPE ## _m_conv) \
+  INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_complex_matrix, TYPE ## _s_complex_m_conv) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_matrix, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_complex_matrix, octave_complex_matrix)
 
 #define OCTAVE_INSTALL_SM_INT_OPS2(T1, T2) \
   OCTAVE_INSTALL_SM_INT_ARITH_OPS (sm, T1, T2) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, T1, T2) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (sm, T1, T2)
@@ -558,29 +585,31 @@ octave_value elem_xpow (T1 ## NDArray a,
   INSTALL_BINOP (op_lt, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _lt); \
   INSTALL_BINOP (op_le, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _le); \
   INSTALL_BINOP (op_eq, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _eq); \
   INSTALL_BINOP (op_ge, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _ge); \
   INSTALL_BINOP (op_gt, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _gt); \
   INSTALL_BINOP (op_ne, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _ne);
 
 #define OCTAVE_INSTALL_MS_INT_BOOL_OPS(PFX, T1, T2) \
-  /* INSTALL_BINOP (op_el_and, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _el_and); */ \
-  /* INSTALL_BINOP (op_el_or, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _el_or); */
+  INSTALL_BINOP (op_el_and, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _el_and); \
+  INSTALL_BINOP (op_el_or, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _el_or);
 
 #define OCTAVE_INSTALL_MS_INT_ASSIGN_OPS(PFX, TLHS, TRHS) \
   INSTALL_ASSIGNOP (op_asn_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## scalar, PFX ## _assign)
 
 #define OCTAVE_INSTALL_MS_INT_OPS(TYPE) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (mx, TYPE ## _, ) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mx, TYPE ## _, ) \
+  OCTAVE_INSTALL_MS_INT_CMP_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (mx, TYPE ## _, ) \
+  OCTAVE_INSTALL_MS_INT_BOOL_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mx, TYPE ## _, ) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _matrix, octave_complex_scalar, octave_complex_matrix)
 
 #define OCTAVE_INSTALL_MS_INT_OPS2(T1, T2) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (ms, T1, T2) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, T1, T2) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, T1, T2)
@@ -601,39 +630,41 @@ octave_value elem_xpow (T1 ## NDArray a,
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_div); */ \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_pow); \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ldiv); */ \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_mul); \
   INSTALL_BINOP (op_el_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_div); \
   INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_pow); \
   /* INSTALL_BINOP (op_el_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_ldiv); */
 
-#define OCTAVE_INSTALL_MM_INT_CMP_OPS(T1, T2) \
-  INSTALL_BINOP (op_lt, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_lt); \
-  INSTALL_BINOP (op_le, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_le); \
-  INSTALL_BINOP (op_eq, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_eq); \
-  INSTALL_BINOP (op_ge, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ge); \
-  INSTALL_BINOP (op_gt, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_gt); \
-  INSTALL_BINOP (op_ne, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ne);
+#define OCTAVE_INSTALL_MM_INT_CMP_OPS(PFX, T1, T2) \
+  INSTALL_BINOP (op_lt, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _lt); \
+  INSTALL_BINOP (op_le, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _le); \
+  INSTALL_BINOP (op_eq, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _eq); \
+  INSTALL_BINOP (op_ge, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _ge); \
+  INSTALL_BINOP (op_gt, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _gt); \
+  INSTALL_BINOP (op_ne, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _ne);
 
-#define OCTAVE_INSTALL_MM_INT_BOOL_OPS(T1, T2) \
-  INSTALL_BINOP (op_el_and, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_and); \
-  INSTALL_BINOP (op_el_or, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_or);
+#define OCTAVE_INSTALL_MM_INT_BOOL_OPS(PFX, T1, T2) \
+  INSTALL_BINOP (op_el_and, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _el_and); \
+  INSTALL_BINOP (op_el_or, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _el_or);
 
 #define OCTAVE_INSTALL_MM_INT_ASSIGN_OPS(PFX, TLHS, TRHS) \
   INSTALL_ASSIGNOP (op_asn_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## matrix, PFX ## _assign)
 
 #define OCTAVE_INSTALL_MM_INT_OPS(TYPE) \
   OCTAVE_INSTALL_M_INT_UNOPS (TYPE) \
   OCTAVE_INSTALL_MM_INT_ARITH_OPS (TYPE, TYPE) \
-  OCTAVE_INSTALL_MM_INT_CMP_OPS (TYPE, TYPE) \
-  OCTAVE_INSTALL_MM_INT_BOOL_OPS (TYPE, TYPE) \
+  OCTAVE_INSTALL_MM_INT_CMP_OPS (mm, TYPE ## _, TYPE ## _) \
+  OCTAVE_INSTALL_MM_INT_CMP_OPS (mmx, TYPE ## _, ) \
+  OCTAVE_INSTALL_MM_INT_BOOL_OPS (mm, TYPE ## _, TYPE ## _) \
+  OCTAVE_INSTALL_MM_INT_BOOL_OPS (mmx, TYPE ## _, ) \
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmx, TYPE ## _, ) \
-  INSTALL_WIDENOP (octave_ ## TYPE ## _matrix, octave_complex_matrix, complex_matrix_conv) \
+  INSTALL_WIDENOP (octave_ ## TYPE ## _matrix, octave_complex_matrix, TYPE ## _m_complex_m_conv) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _matrix, octave_complex_matrix, octave_complex_matrix)
 
 #define OCTAVE_INSTALL_MM_INT_OPS2(T1, T2) \
   OCTAVE_INSTALL_MM_INT_ARITH_OPS (T1, T2) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (T1, T2) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (T1, T2)
 
 #define OCTAVE_INSTALL_RE_INT_ASSIGN_OPS(TYPE) \
@@ -656,13 +687,25 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_INSTALL_CONCAT_FN (TYPE) \
   OCTAVE_INSTALL_RE_INT_ASSIGN_OPS (TYPE) \
   OCTAVE_INSTALL_CX_INT_ASSIGN_OPS (TYPE)
 
 #define OCTAVE_INSTALL_SM_INT_ASSIGNCONV(TLHS, TRHS) \
   INSTALL_ASSIGNCONV (octave_ ## TLHS ## _scalar, octave_ ## TRHS ## _scalar, octave_ ## TLHS ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TLHS ## _scalar, octave_ ## TRHS ## _matrix, octave_ ## TLHS ## _matrix)
 
+#define OCTAVE_MIXED_INT_CMP_OPS(T1, T2) \
+  OCTAVE_SS_INT_CMP_OPS (T1 ## _ ## T2 ## _ss, T1 ## _, T2 ## _) \
+  OCTAVE_SM_INT_CMP_OPS (T1 ## _ ## T2 ## _sm, T1 ## _, T2 ## _) \
+  OCTAVE_MS_INT_CMP_OPS (T1 ## _ ## T2 ## _ms, T1 ## _, T2 ## _) \
+  OCTAVE_MM_INT_CMP_OPS (T1 ## _ ## T2 ## _mm, T1 ## _, T2 ## _)
+
+#define OCTAVE_INSTALL_MIXED_INT_CMP_OPS(T1, T2) \
+  OCTAVE_INSTALL_SS_INT_CMP_OPS (T1 ## _ ## T2 ## _ss, T1 ## _, T2 ## _) \
+  OCTAVE_INSTALL_SM_INT_CMP_OPS (T1 ## _ ## T2 ## _sm, T1 ## _, T2 ## _) \
+  OCTAVE_INSTALL_MS_INT_CMP_OPS (T1 ## _ ## T2 ## _ms, T1 ## _, T2 ## _) \
+  OCTAVE_INSTALL_MM_INT_CMP_OPS (T1 ## _ ## T2 ## _mm, T1 ## _, T2 ## _)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-ui16-ui16.cc b/src/OPERATORS/op-ui16-ui16.cc
--- a/src/OPERATORS/op-ui16-ui16.cc
+++ b/src/OPERATORS/op-ui16-ui16.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-ui16nda-i8.h"
+#include "mx-ui16nda-ui8.h"
+#include "mx-ui16nda-i16.h"
+#include "mx-ui16nda-i32.h"
+#include "mx-ui16nda-ui32.h"
+#include "mx-ui16nda-i64.h"
+#include "mx-ui16nda-ui64.h"
+
+#include "mx-ui16nda-i8nda.h"
+#include "mx-ui16nda-ui8nda.h"
+#include "mx-ui16nda-i16nda.h"
+#include "mx-ui16nda-i32nda.h"
+#include "mx-ui16nda-ui32nda.h"
+#include "mx-ui16nda-i64nda.h"
+#include "mx-ui16nda-ui64nda.h"
+
+#include "mx-ui16-i8nda.h"
+#include "mx-ui16-ui8nda.h"
+#include "mx-ui16-i16nda.h"
+#include "mx-ui16-i32nda.h"
+#include "mx-ui16-ui32nda.h"
+#include "mx-ui16-i64nda.h"
+#include "mx-ui16-ui64nda.h"
+
+#include "mx-ui16nda-s.h"
+#include "mx-s-ui16nda.h"
+
+#include "mx-ui16nda-nda.h"
+#include "mx-nda-ui16nda.h"
+
+#include "mx-ui16-nda.h"
+#include "mx-nda-ui16.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, uint16_
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, uint16_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, uint16_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, uint16_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, uint16_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, uint16_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, uint16_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, uint16_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (uint16, int8)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, int16)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, int32)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, int64)
+OCTAVE_MIXED_INT_CMP_OPS (uint16, uint64)
+
 void
 install_ui16_ui16_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (uint16);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, uint16_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, uint16_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, uint16_, int16_);
@@ -91,15 +132,23 @@ install_ui16_ui16_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint16, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint16, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-ui32-ui32.cc b/src/OPERATORS/op-ui32-ui32.cc
--- a/src/OPERATORS/op-ui32-ui32.cc
+++ b/src/OPERATORS/op-ui32-ui32.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-ui32nda-i8.h"
+#include "mx-ui32nda-ui8.h"
+#include "mx-ui32nda-i16.h"
+#include "mx-ui32nda-ui16.h"
+#include "mx-ui32nda-i32.h"
+#include "mx-ui32nda-i64.h"
+#include "mx-ui32nda-ui64.h"
+
+#include "mx-ui32nda-i8nda.h"
+#include "mx-ui32nda-ui8nda.h"
+#include "mx-ui32nda-i16nda.h"
+#include "mx-ui32nda-ui16nda.h"
+#include "mx-ui32nda-i32nda.h"
+#include "mx-ui32nda-i64nda.h"
+#include "mx-ui32nda-ui64nda.h"
+
+#include "mx-ui32-i8nda.h"
+#include "mx-ui32-ui8nda.h"
+#include "mx-ui32-i16nda.h"
+#include "mx-ui32-ui16nda.h"
+#include "mx-ui32-i32nda.h"
+#include "mx-ui32-i64nda.h"
+#include "mx-ui32-ui64nda.h"
+
+#include "mx-ui32nda-s.h"
+#include "mx-s-ui32nda.h"
+
+#include "mx-ui32nda-nda.h"
+#include "mx-nda-ui32nda.h"
+
+#include "mx-ui32-nda.h"
+#include "mx-nda-ui32.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,23 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, uint32_
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, uint32_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, uint32_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, uint32_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, uint32_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, uint32_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, uint32_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, uint32_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (uint32, int8)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, int16)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, int32)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, int64)
+OCTAVE_MIXED_INT_CMP_OPS (uint32, uint64)
 void
 install_ui32_ui32_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (uint32);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, uint32_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, uint32_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, uint32_, int16_);
@@ -91,15 +131,23 @@ install_ui32_ui32_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint32, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint32, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-ui64-ui64.cc b/src/OPERATORS/op-ui64-ui64.cc
--- a/src/OPERATORS/op-ui64-ui64.cc
+++ b/src/OPERATORS/op-ui64-ui64.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-ui64nda-i8.h"
+#include "mx-ui64nda-ui8.h"
+#include "mx-ui64nda-i16.h"
+#include "mx-ui64nda-ui16.h"
+#include "mx-ui64nda-i32.h"
+#include "mx-ui64nda-ui32.h"
+#include "mx-ui64nda-i64.h"
+
+#include "mx-ui64nda-i8nda.h"
+#include "mx-ui64nda-ui8nda.h"
+#include "mx-ui64nda-i16nda.h"
+#include "mx-ui64nda-ui16nda.h"
+#include "mx-ui64nda-i32nda.h"
+#include "mx-ui64nda-ui32nda.h"
+#include "mx-ui64nda-i64nda.h"
+
+#include "mx-ui64-i8nda.h"
+#include "mx-ui64-ui8nda.h"
+#include "mx-ui64-i16nda.h"
+#include "mx-ui64-ui16nda.h"
+#include "mx-ui64-i32nda.h"
+#include "mx-ui64-ui32nda.h"
+#include "mx-ui64-i64nda.h"
+
+#include "mx-ui64nda-s.h"
+#include "mx-s-ui64nda.h"
+
+#include "mx-ui64nda-nda.h"
+#include "mx-nda-ui64nda.h"
+
+#include "mx-ui64-nda.h"
+#include "mx-nda-ui64.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -59,18 +92,18 @@ OCTAVE_SM_INT_BOOL_OPS (sm, uint64_, uin
 
 OCTAVE_MS_INT_CMP_OPS (ms, uint64_, uint64_)
 OCTAVE_MS_INT_BOOL_OPS (ms, uint64_, uint64_)
 OCTAVE_MS_INT_ASSIGN_OPS (ms, uint64_, uint64_, uint64_)
 OCTAVE_MS_INT_ASSIGN_OPS (mx, uint64_, , )
 OCTAVE_MS_INT_ASSIGN_OPS (mc, uint64_, complex_, )
 
 OCTAVE_M_INT_UNOPS (uint64)
-OCTAVE_MM_INT_CMP_OPS (uint64, uint64)
-OCTAVE_MM_INT_BOOL_OPS (uint64, uint64)
+OCTAVE_MM_INT_CMP_OPS (mm, uint64_, uint64_)
+OCTAVE_MM_INT_BOOL_OPS (mm, uint64_, uint64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mm, uint64_, uint64_, uint64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmx, uint64_, , )
 OCTAVE_MM_INT_ASSIGN_OPS (mmc, uint64_, complex_, )
 
 OCTAVE_MS_INT_ASSIGN_OPS (mi8, uint64_, int8_, int8_)
 OCTAVE_MS_INT_ASSIGN_OPS (mui8, uint64_, uint8_, uint8_)
 OCTAVE_MS_INT_ASSIGN_OPS (mi16, uint64_, int16_, int16_)
 OCTAVE_MS_INT_ASSIGN_OPS (mui16, uint64_, uint16_, uint16_)
@@ -81,16 +114,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mi64, uint64_,
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, uint64_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui8, uint64_, uint8_, uint8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, uint64_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, uint64_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, uint64_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, uint64_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, uint64_, int64_, int64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (uint64, int8)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, uint8)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, int16)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, int32)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (uint64, int64)
+
 void
 install_ui64_ui64_ops (void)
 {
   OCTAVE_INSTALL_S_INT_UNOPS (uint64);
   OCTAVE_INSTALL_SS_INT_CMP_OPS (ss, uint64_, uint64_);
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (ss, uint64_, uint64_);
 
   OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, uint64_, uint64_);
@@ -98,18 +139,18 @@ install_ui64_ui64_ops (void)
 
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, uint64_, uint64_);
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, uint64_, uint64_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (ms, uint64_, uint64_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mx, uint64_, );
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mc, uint64_, complex_);
 
   OCTAVE_INSTALL_M_INT_UNOPS (uint64);
-  OCTAVE_INSTALL_MM_INT_CMP_OPS (uint64, uint64);
-  OCTAVE_INSTALL_MM_INT_BOOL_OPS (uint64, uint64);
+  OCTAVE_INSTALL_MM_INT_CMP_OPS (mm, uint64_, uint64_);
+  OCTAVE_INSTALL_MM_INT_BOOL_OPS (mm, uint64_, uint64_);
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mm, uint64_, uint64_);
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmx, uint64_, );
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmc, uint64_, complex_);
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, uint64_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui8, uint64_, uint8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, uint64_, int16_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui16, uint64_, uint16_);
@@ -127,15 +168,23 @@ install_ui64_ui64_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, uint8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint64, int64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, uint8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint64, int64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/OPERATORS/op-ui8-ui8.cc b/src/OPERATORS/op-ui8-ui8.cc
--- a/src/OPERATORS/op-ui8-ui8.cc
+++ b/src/OPERATORS/op-ui8-ui8.cc
@@ -23,16 +23,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "mx-ui8nda-i8.h"
+#include "mx-ui8nda-i16.h"
+#include "mx-ui8nda-ui16.h"
+#include "mx-ui8nda-i32.h"
+#include "mx-ui8nda-ui32.h"
+#include "mx-ui8nda-i64.h"
+#include "mx-ui8nda-ui64.h"
+
+#include "mx-ui8nda-i8nda.h"
+#include "mx-ui8nda-i16nda.h"
+#include "mx-ui8nda-ui16nda.h"
+#include "mx-ui8nda-i32nda.h"
+#include "mx-ui8nda-ui32nda.h"
+#include "mx-ui8nda-i64nda.h"
+#include "mx-ui8nda-ui64nda.h"
+
+#include "mx-ui8-i8nda.h"
+#include "mx-ui8-i16nda.h"
+#include "mx-ui8-ui16nda.h"
+#include "mx-ui8-i32nda.h"
+#include "mx-ui8-ui32nda.h"
+#include "mx-ui8-i64nda.h"
+#include "mx-ui8-ui64nda.h"
+
+#include "mx-ui8nda-s.h"
+#include "mx-s-ui8nda.h"
+
+#include "mx-ui8nda-nda.h"
+#include "mx-nda-ui8nda.h"
+
+#include "mx-ui8-nda.h"
+#include "mx-nda-ui8.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-int8.h"
 #include "ov-uint16.h"
@@ -63,16 +96,24 @@ OCTAVE_MS_INT_ASSIGN_OPS (mui64, uint8_,
 OCTAVE_MM_INT_ASSIGN_OPS (mmi8, uint8_, int8_, int8_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi16, uint8_, int16_, int16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui16, uint8_, uint16_, uint16_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi32, uint8_, int32_, int32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui32, uint8_, uint32_, uint32_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmi64, uint8_, int64_, int64_)
 OCTAVE_MM_INT_ASSIGN_OPS (mmui64, uint8_, uint64_, uint64_)
 
+OCTAVE_MIXED_INT_CMP_OPS (uint8, int8)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, int16)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, uint16)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, int32)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, uint32)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, int64)
+OCTAVE_MIXED_INT_CMP_OPS (uint8, uint64)
+
 void
 install_ui8_ui8_ops (void)
 {
   OCTAVE_INSTALL_INT_OPS (uint8)
 
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi8, uint8_, int8_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mi16, uint8_, int16_);
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mui16, uint8_, uint16_);
@@ -91,15 +132,23 @@ install_ui8_ui8_ops (void)
 
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, int8);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, int16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, uint16);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, int32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, uint32);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, int64);
   OCTAVE_INSTALL_SM_INT_ASSIGNCONV (uint8, uint64);
+
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, int8);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, int16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, uint16);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, int32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, uint32);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, int64);
+  OCTAVE_INSTALL_MIXED_INT_CMP_OPS (uint8, uint64);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-bool.h"
+#include "ov-bool-mat.h"
 #include "ov-base.h"
 #include "ov-base-scalar.h"
 #include "ov-base-scalar.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 #include "ls-oct-ascii.h"
@@ -92,17 +93,17 @@ octave_bool::do_index_op (const octave_v
       //   a = 1; a([1,1], [1,1], [1,1])
       //
       // and similar constructions.  Hmm...
 
       // XXX FIXME XXX -- using this constructor avoids narrowing the
       // 1x1 matrix back to a scalar value.  Need a better solution
       // to this problem.
 
-      octave_value tmp (new octave_matrix (matrix_value ()));
+      octave_value tmp (new octave_bool_matrix (bool_matrix_value ()));
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 octave_value
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -113,16 +113,42 @@ public:
   octave_value *
   clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (*this); }
 
   octave_value *
   empty_clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (); }
 
+  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+  {
+    octave_value retval;
+
+    if (idx.valid_scalar_indices ())
+      retval = scalar;
+    else
+      {
+	// XXX FIXME XXX -- this doesn't solve the problem of
+	//
+	//   a = 1; a([1,1], [1,1], [1,1])
+	//
+	// and similar constructions.  Hmm...
+
+	// XXX FIXME XXX -- using this constructor avoids narrowing the
+	// 1x1 matrix back to a scalar value.  Need a better solution
+	// to this problem.
+
+	octave_value tmp (new OCTAVE_VALUE_INT_MATRIX_T (
+			     OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION ())); 
+	retval = tmp.do_index_op (idx, resize_ok);
+      }
+
+    return retval;
+  }
+
   OCTAVE_INT_T
   OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION (void) const
     { return scalar; }
 
   OCTAVE_INT_NDARRAY_T
   OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (void) const
     { return OCTAVE_INT_NDARRAY_T (dim_vector (1, 1), scalar); }
 
