# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1434404564 14400
#      Mon Jun 15 17:42:44 2015 -0400
# Node ID bfe66db8addb63e53b460bc95d0cf91428caa5c6
# Parent  5c088348fddbbf433c93c370962a075ccb03e9eb
don't include hdf5.h or use HDF5 typedefs in public header files (bug #43180)

* oct-hdf5-types.h: Rename from oct-hdf5-id.h.
* oct-hdf5-types.cc: Rename from oct-hdf5-id.cc.
* libinterp/corefcn/module.mk: Update.

* oct-hdf5-types.h (octave_hdf5_err): New typedef.
* oct-hdf5-types.h, oct-hdf5-types.cc (check_hdf5_types): Rename from
check_hdf5_id_type.  Also check size of herr_t.

* load-save.cc: Include oct-hdf5.h.
* ls-hdf5.cc: Include oct-hdf5.h instead of oct-hdf5-id.h.
Define hdf5_fstreambase functions that require HDF5 types here instead
of in ls-hdf5.h.
* ls-hdf5.h, ls-hdf5.cc: Use octave types in public interfaces.
* ls-hdf5.h, ov-base.h: Include oct-hdf5-types.h instead of oct-hdf5.h.
* oct-hdf5.h: Include oct-hdf5-types.h.  Define H5T_NATIVE_IDX here.
* ls-hdf5.h: Not here.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -54,16 +54,17 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-path.h"
 #include "load-save.h"
+#include "oct-hdf5.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "pt-exp.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -50,33 +50,84 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 #include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
-#include "oct-hdf5-id.h"
+#include "oct-hdf5.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "pt-exp.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 #include "ov-lazy-idx.h"
 
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+hdf5_fstreambase::hdf5_fstreambase (const char *name, int mode, int /* prot */)
+  : file_id (-1), current_item (-1)
+{
+  if (mode & std::ios::in)
+    file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
+  else if (mode & std::ios::out)
+    {
+      if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
+        file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
+      else
+        file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT,
+                             H5P_DEFAULT);
+    }
+  if (file_id < 0)
+    std::ios::setstate (std::ios::badbit);
+
+  current_item = 0;
+}
+
+void
+hdf5_fstreambase::close (void)
+{
+  if (file_id >= 0)
+    {
+      if (H5Fclose (file_id) < 0)
+        std::ios::setstate (std::ios::badbit);
+      file_id = -1;
+    }
+}
+
+void
+hdf5_fstreambase::open (const char *name, int mode, int)
+{
+  clear ();
+
+  if (mode & std::ios::in)
+    file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
+  else if (mode & std::ios::out)
+    {
+      if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
+        file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
+      else
+        file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT,
+                             H5P_DEFAULT);
+    }
+  if (file_id < 0)
+    std::ios::setstate (std::ios::badbit);
+
+  current_item = 0;
+}
+
 static std::string
 make_valid_identifier (const std::string& nm)
 {
   std::string retval;
 
   size_t nm_len = nm.length ();
 
   if (nm_len > 0)
@@ -99,17 +150,17 @@ make_valid_identifier (const std::string
 #define HAVE_HDF5_INT2FLOAT_CONVERSIONS 0
 
 // Given two compound types t1 and t2, determine whether they
 // are compatible for reading/writing.  This function only
 // works for non-nested types composed of simple elements (ints, floats...),
 // which is all we need it for
 
 bool
-hdf5_types_compatible (hid_t t1, hid_t t2)
+hdf5_types_compatible (octave_hdf5_id t1, octave_hdf5_id t2)
 {
   int n;
   if ((n = H5Tget_nmembers (t1)) != H5Tget_nmembers (t2))
     return false;
 
   for (int i = 0; i < n; ++i)
     {
       hid_t mt1 = H5Tget_member_type (t1, i);
@@ -124,17 +175,17 @@ hdf5_types_compatible (hid_t t1, hid_t t
 
   return true;
 }
 
 // Return true if loc_id has the attribute named attr_name, and false
 // otherwise.
 
 bool
-hdf5_check_attr (hid_t loc_id, const char *attr_name)
+hdf5_check_attr (octave_hdf5_id loc_id, const char *attr_name)
 {
   bool retval = false;
 
   // we have to pull some shenanigans here to make sure
   // HDF5 doesn't print out all sorts of error messages if we
   // call H5Aopen for a non-existing attribute
 
   H5E_auto_t err_func;
@@ -165,17 +216,17 @@ hdf5_check_attr (hid_t loc_id, const cha
   H5Eset_auto (H5E_DEFAULT, err_func, err_func_data);
 #else
   H5Eset_auto (err_func, err_func_data);
 #endif
   return retval;
 }
 
 bool
-hdf5_get_scalar_attr (hid_t loc_id, hid_t type_id,
+hdf5_get_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf)
 {
   bool retval = false;
 
   // we have to pull some shenanigans here to make sure
   // HDF5 doesn't print out all sorts of error messages if we
   // call H5Aopen for a non-existing attribute
 
@@ -219,18 +270,18 @@ hdf5_get_scalar_attr (hid_t loc_id, hid_
 
 
 // The following subroutines creates an HDF5 representations of the way
 // we will store Octave complex types (pairs of floating-point numbers).
 // NUM_TYPE is the HDF5 numeric type to use for storage (e.g.
 // H5T_NATIVE_DOUBLE to save as 'double'). Note that any necessary
 // conversions are handled automatically by HDF5.
 
-hid_t
-hdf5_make_complex_type (hid_t num_type)
+octave_hdf5_id
+hdf5_make_complex_type (octave_hdf5_id num_type)
 {
   hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 2);
 
   H5Tinsert (type_id, "real", 0 * sizeof (double), num_type);
   H5Tinsert (type_id, "imag", 1 * sizeof (double), num_type);
 
   return type_id;
 }
@@ -240,18 +291,18 @@ hdf5_make_complex_type (hid_t num_type)
 // the group GROUP_ID, this function sets dv->tc to an Octave representation
 // of that item.  (dv must be a pointer to hdf5_callback_data.)  (It also
 // sets the other fields of dv).
 //
 // It returns 1 on success (in which case H5Giterate stops and returns),
 // -1 on error, and 0 to tell H5Giterate to continue on to the next item
 // (e.g. if NAME was a data type we don't recognize).
 
-herr_t
-hdf5_read_next_data (hid_t group_id, const char *name, void *dv)
+octave_hdf5_err
+hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv)
 {
   hdf5_callback_data *d = static_cast<hdf5_callback_data *> (dv);
   hid_t type_id = -1;
   hid_t type_class_id = -1;
   hid_t data_id = -1;
   hid_t subgroup_id = -1;
   hid_t space_id = -1;;
 
@@ -583,17 +634,17 @@ done:
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.
 std::string
 read_hdf5_data (std::istream& is, const std::string& /* filename */,
                 bool& global, octave_value& tc, std::string& doc,
                 const string_vector& argv, int argv_idx, int argc)
 {
-  check_hdf5_id_type ();
+  check_hdf5_types ();
 
   std::string retval;
 
   doc.resize (0);
 
   hdf5_ifstream& hs = dynamic_cast<hdf5_ifstream&> (is);
   hdf5_callback_data d;
 
@@ -658,18 +709,18 @@ read_hdf5_data (std::istream& is, const 
   if (! d.name.empty ())
     retval = d.name;
 
   return retval;
 }
 
 // Add an attribute named attr_name to loc_id (a simple scalar
 // attribute with value 1).  Return value is >= 0 on success.
-herr_t
-hdf5_add_attr (hid_t loc_id, const char *attr_name)
+octave_hdf5_err
+hdf5_add_attr (octave_hdf5_id loc_id, const char *attr_name)
 {
   herr_t retval = 0;
 
   hid_t as_id = H5Screate (H5S_SCALAR);
 
   if (as_id >= 0)
     {
 #if HAVE_HDF5_18
@@ -693,18 +744,18 @@ hdf5_add_attr (hid_t loc_id, const char 
       H5Sclose (as_id);
     }
   else
     retval = as_id;
 
   return retval;
 }
 
-herr_t
-hdf5_add_scalar_attr (hid_t loc_id, hid_t type_id,
+octave_hdf5_err
+hdf5_add_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf)
 {
   herr_t retval = 0;
 
   hid_t as_id = H5Screate (H5S_SCALAR);
 
   if (as_id >= 0)
     {
@@ -732,17 +783,17 @@ hdf5_add_scalar_attr (hid_t loc_id, hid_
   return retval;
 }
 
 // Save an empty matrix, if needed. Returns
 //    > 0  Saved empty matrix
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
-save_hdf5_empty (hid_t loc_id, const char *name, const dim_vector d)
+save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d)
 {
   hsize_t sz = d.length ();
   OCTAVE_LOCAL_BUFFER (octave_idx_type, dims, sz);
   bool empty = false;
   hid_t space_hid = -1;
   hid_t data_hid = -1;
   int retval;
   for (hsize_t i = 0; i < sz; i++)
@@ -782,17 +833,17 @@ save_hdf5_empty (hid_t loc_id, const cha
   return (retval == 0 ? 1 : retval);
 }
 
 // Load an empty matrix, if needed. Returns
 //    > 0  loaded empty matrix, dimensions returned
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
-load_hdf5_empty (hid_t loc_id, const char *name, dim_vector &d)
+load_hdf5_empty (octave_hdf5_id loc_id, const char *name, dim_vector &d)
 {
   if (! hdf5_check_attr (loc_id, "OCTAVE_EMPTY_MATRIX"))
     return 0;
 
   hsize_t hdims, maxdims;
 #if HAVE_HDF5_18
   hid_t data_hid = H5Dopen (loc_id, name, H5P_DEFAULT);
 #else
@@ -821,17 +872,17 @@ load_hdf5_empty (hid_t loc_id, const cha
 
 // save_type_to_hdf5 is not currently used, since hdf5 doesn't yet support
 // automatic float<->integer conversions:
 
 #if HAVE_HDF5_INT2FLOAT_CONVERSIONS
 
 // return the HDF5 type id corresponding to the Octave save_type
 
-hid_t
+octave_hdf5_id
 save_type_to_hdf5 (save_type st)
 {
   switch (st)
     {
     case LS_U_CHAR:
       return H5T_NATIVE_UCHAR;
 
     case LS_U_SHORT:
@@ -860,17 +911,17 @@ save_type_to_hdf5 (save_type st)
 #endif /* HAVE_HDF5_INT2FLOAT_CONVERSIONS */
 
 // Add the data from TC to the HDF5 location loc_id, which could
 // be either a file or a group within a file.  Return true if
 // successful.  This function calls itself recursively for lists
 // (stored as HDF5 groups).
 
 bool
-add_hdf5_data (hid_t loc_id, const octave_value& tc,
+add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
                bool mark_as_global, bool save_as_floats)
 {
   hsize_t dims[3];
   hid_t type_id, space_id, data_id, data_type_id;
   type_id = space_id = data_id = data_type_id = -1;
 
   bool retval = false;
@@ -950,17 +1001,17 @@ error_cleanup:
 // Write data from TC in HDF5 (binary) format to the stream OS,
 // which must be an hdf5_ofstream, returning true on success.
 
 bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
                 bool mark_as_global, bool save_as_floats)
 {
-  check_hdf5_id_type ();
+  check_hdf5_types ();
 
   hdf5_ofstream& hs = dynamic_cast<hdf5_ofstream&> (os);
 
   return add_hdf5_data (hs.file_id, tc, name, doc,
                         mark_as_global, save_as_floats);
 }
 
 #endif
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -20,86 +20,43 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_ls_hdf5_h)
 #define octave_ls_hdf5_h 1
 
 #if defined (HAVE_HDF5)
 
-#include "oct-hdf5.h"
+#include "oct-hdf5-types.h"
 
 // first, we need to define our own dummy stream subclass, since
 // HDF5 needs to do its own file i/o
 
 // hdf5_fstreambase is used for both input and output streams, modeled
 // on the fstreambase class in <fstream.h>
 
 class hdf5_fstreambase : virtual public std::ios
 {
 public:
 
   // HDF5 uses an "id" to refer to an open file
-  hid_t file_id;
+  octave_hdf5_id file_id;
 
   // keep track of current item index in the file
   int current_item;
 
   hdf5_fstreambase () : file_id (-1), current_item () { }
 
   ~hdf5_fstreambase () { close (); }
 
-  hdf5_fstreambase (const char *name, int mode, int /* prot */ = 0)
-    : file_id (-1), current_item (-1)
-  {
-    if (mode & std::ios::in)
-      file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
-    else if (mode & std::ios::out)
-      {
-        if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
-          file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
-        else
-          file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT,
-                               H5P_DEFAULT);
-      }
-    if (file_id < 0)
-      std::ios::setstate (std::ios::badbit);
-
-    current_item = 0;
-  }
+  hdf5_fstreambase (const char *name, int mode, int /* prot */ = 0);
 
-  void close ()
-  {
-    if (file_id >= 0)
-      {
-        if (H5Fclose (file_id) < 0)
-          std::ios::setstate (std::ios::badbit);
-        file_id = -1;
-      }
-  }
-
-  void open (const char *name, int mode, int)
-  {
-    clear ();
+  void close (void);
 
-    if (mode & std::ios::in)
-      file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
-    else if (mode & std::ios::out)
-      {
-        if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
-          file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
-        else
-          file_id = H5Fcreate (name, H5F_ACC_TRUNC, H5P_DEFAULT,
-                               H5P_DEFAULT);
-      }
-    if (file_id < 0)
-      std::ios::setstate (std::ios::badbit);
-
-    current_item = 0;
-  }
+  void open (const char *name, int mode, int);
 };
 
 // input and output streams, subclassing istream and ostream
 // so that we can pass them for stream parameters in the functions below.
 
 class hdf5_ifstream : public hdf5_fstreambase, public std::istream
 {
 public:
@@ -149,66 +106,60 @@ hdf5_callback_data
   // the value of the variable, in Octave form
   octave_value tc;
 
   // a documentation string (NULL if none)
   std::string doc;
 };
 
 #if HAVE_HDF5_INT2FLOAT_CONVERSIONS
-extern OCTINTERP_API hid_t
+extern OCTINTERP_API octave_hdf5_id
 save_type_to_hdf5 (save_type st)
 #endif
 
-extern OCTINTERP_API hid_t
-hdf5_make_complex_type (hid_t num_type);
+extern OCTINTERP_API octave_hdf5_id
+hdf5_make_complex_type (octave_hdf5_id num_type);
 
 extern OCTINTERP_API bool
-hdf5_types_compatible (hid_t t1, hid_t t2);
+hdf5_types_compatible (octave_hdf5_id t1, octave_hdf5_id t2);
 
-extern OCTINTERP_API herr_t
-hdf5_read_next_data (hid_t group_id, const char *name, void *dv);
+extern OCTINTERP_API octave_hdf5_err
+hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv);
 
 extern OCTINTERP_API bool
-add_hdf5_data (hid_t loc_id, const octave_value& tc,
+add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
                bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API int
-save_hdf5_empty (hid_t loc_id, const char *name, const dim_vector d);
+save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d);
 
 extern OCTINTERP_API int
-load_hdf5_empty (hid_t loc_id, const char *name, dim_vector &d);
+load_hdf5_empty (octave_hdf5_id loc_id, const char *name, dim_vector &d);
 
 extern OCTINTERP_API std::string
 read_hdf5_data (std::istream& is,  const std::string& filename, bool& global,
                 octave_value& tc, std::string& doc,
                 const string_vector& argv, int argv_idx, int argc);
 
 extern OCTINTERP_API bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
                 bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API bool
-hdf5_check_attr (hid_t loc_id, const char *attr_name);
+hdf5_check_attr (octave_hdf5_id loc_id, const char *attr_name);
 
 extern OCTINTERP_API bool
-hdf5_get_scalar_attr (hid_t loc_id, hid_t type_id, const char *attr_name,
-                      void *buf);
+hdf5_get_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
+                      const char *attr_name, void *buf);
 
-extern OCTINTERP_API herr_t
-hdf5_add_attr (hid_t loc_id, const char *attr_name);
+extern OCTINTERP_API octave_hdf5_err
+hdf5_add_attr (octave_hdf5_id loc_id, const char *attr_name);
 
 
-extern OCTINTERP_API herr_t
-hdf5_add_scalar_attr (hid_t loc_id, hid_t type_id,
+extern OCTINTERP_API octave_hdf5_err
+hdf5_add_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf);
 
-#ifdef USE_64_BIT_IDX_T
-#define H5T_NATIVE_IDX H5T_NATIVE_INT64
-#else
-#define H5T_NATIVE_IDX H5T_NATIVE_INT
-#endif
-
 #endif
 
 #endif
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -77,17 +77,17 @@ COREFCN_INC = \
   corefcn/ls-oct-binary.h \
   corefcn/ls-utils.h \
   corefcn/mex.h \
   corefcn/mexproto.h \
   corefcn/oct-errno.h \
   corefcn/oct-fstrm.h \
   corefcn/oct-handle.h \
   corefcn/oct-hdf5.h \
-  corefcn/oct-hdf5-id.h \
+  corefcn/oct-hdf5-types.h \
   corefcn/oct-hist.h \
   corefcn/oct-iostrm.h \
   corefcn/oct-lvalue.h \
   corefcn/oct-map.h \
   corefcn/oct-obj.h \
   corefcn/oct-prcstrm.h \
   corefcn/oct-procbuf.h \
   corefcn/oct-stdstrm.h \
@@ -211,17 +211,17 @@ COREFCN_SRC = \
   corefcn/mappers.cc \
   corefcn/matrix_type.cc \
   corefcn/max.cc \
   corefcn/md5sum.cc \
   corefcn/mex.cc \
   corefcn/mgorth.cc \
   corefcn/nproc.cc \
   corefcn/oct-fstrm.cc \
-  corefcn/oct-hdf5-id.cc \
+  corefcn/oct-hdf5-types.cc \
   corefcn/oct-hist.cc \
   corefcn/oct-iostrm.cc \
   corefcn/oct-lvalue.cc \
   corefcn/oct-map.cc \
   corefcn/oct-obj.cc \
   corefcn/oct-prcstrm.cc \
   corefcn/oct-procbuf.cc \
   corefcn/oct-stream.cc \
diff --git a/libinterp/corefcn/oct-hdf5-id.cc b/libinterp/corefcn/oct-hdf5-types.cc
rename from libinterp/corefcn/oct-hdf5-id.cc
rename to libinterp/corefcn/oct-hdf5-types.cc
--- a/libinterp/corefcn/oct-hdf5-id.cc
+++ b/libinterp/corefcn/oct-hdf5-types.cc
@@ -21,33 +21,40 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-hdf5.h"
-#include "oct-hdf5-id.h"
+#include "oct-hdf5-types.h"
 
 bool
-check_hdf5_id_type (bool warn)
+check_hdf5_types (bool warn)
 {
   static bool checked = false;
   static bool ok = false;
 
   if (! checked)
     {
 #if defined (HAVE_HDF5)
       ok = sizeof (octave_hdf5_id) >= sizeof (hid_t);
 
       if (warn && ! ok)
         warning_with_id
           ("Octave:internal",
            "the size of octave_hdf5_id is smaller than the size of HDF5 hid_t");
+
+      ok = sizeof (octave_hdf5_err) >= sizeof (herr_t);
+
+      if (warn && ! ok)
+        warning_with_id
+          ("Octave:internal",
+           "the size of octave_hdf5_err is smaller than the size of HDF5 herr_t");
 #else
       warning_with_id
         ("Octave:internal",
          "check_hdf5_id_type called but Octave was not compiled with support for HDF5");
 #endif
 
       checked = true;
     }
diff --git a/libinterp/corefcn/oct-hdf5-id.h b/libinterp/corefcn/oct-hdf5-types.h
rename from libinterp/corefcn/oct-hdf5-id.h
rename to libinterp/corefcn/oct-hdf5-types.h
--- a/libinterp/corefcn/oct-hdf5-id.h
+++ b/libinterp/corefcn/oct-hdf5-types.h
@@ -15,16 +15,17 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if !defined (octave_oct_hdf5_id_h)
-#define octave_oct_hdf5_id_h 1
+#if !defined (octave_oct_hdf5_types_h)
+#define octave_oct_hdf5_types_h 1
 
 typedef int octave_hdf5_id;
+typedef int octave_hdf5_err;
 
-extern bool check_hdf5_id_type (bool warn = true);
+extern bool check_hdf5_types (bool warn = true);
 
 #endif
diff --git a/libinterp/corefcn/oct-hdf5.h b/libinterp/corefcn/oct-hdf5.h
--- a/libinterp/corefcn/oct-hdf5.h
+++ b/libinterp/corefcn/oct-hdf5.h
@@ -22,13 +22,21 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_oct_hdf5_h)
 #define octave_hdf5_h 1
 
 #if defined (HAVE_HDF5_H)
 
 #include <hdf5.h>
 
+#include "oct-hdf5-types.h"
+
 #define HDF5_SAVE_TYPE H5T_NATIVE_UINT8
 
+#ifdef USE_64_BIT_IDX_T
+#define H5T_NATIVE_IDX H5T_NATIVE_INT64
+#else
+#define H5T_NATIVE_IDX H5T_NATIVE_INT
+#endif
+
 #endif
 
 #endif
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "Range.h"
 #include "data-conv.h"
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "oct-hdf5-id.h"
+#include "oct-hdf5-types.h"
 
 class Cell;
 class mxArray;
 class octave_map;
 class octave_scalar_map;
 class octave_value;
 class octave_value_list;
 class octave_stream;
