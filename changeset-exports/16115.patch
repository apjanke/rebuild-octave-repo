# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361894313 18000
#      Tue Feb 26 10:58:33 2013 -0500
# Node ID 4f6c37cfbdcee1da9715575fbd546556cc06697b
# Parent  73a21ade0b6b7d6e45c973dfd4c745261d3a3a96
cleanup lexical_feedback objects

* lex.h (lexical_feedback::cleanup): New static member function.
* oct-parse.yy (eval_string, parse_fcn_file): Put new clenup function
on unwind-protect stack to delete lexer object.
* input.cc (get_debug_input): Likewise.
* toplev.cc (main_loop): Likewise.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -675,16 +675,17 @@ get_debug_input (const std::string& prom
       frame.add_fcn (switch_to_buffer, old_buf);
       frame.add_fcn (delete_buffer, new_buf);
 
       switch_to_buffer (new_buf);
     }
 
   frame.protect_var (curr_lexer);
   curr_lexer = new lexical_feedback ();
+  frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
   while (Vdebugging)
     {
       reset_error_handler ();
 
       reset_parser ();
 
       // Save current value of global_command.
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -556,16 +556,17 @@ main_loop (void)
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   unwind_protect frame;
 
   frame.protect_var (curr_lexer);
   curr_lexer = new lexical_feedback ();
+  frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
   // The big loop.
 
   int retval = 0;
   do
     {
       try
         {
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -372,16 +372,19 @@ public:
   // a paren?
   bbp_nesting_level nesting_level;
 
   // Stack to hold tokens so that we can delete them when the parser is
   // reset and avoid growing forever just because we are stashing some
   // information.
   std::stack <token*> token_stack;
 
+  // For unwind protect.
+  static void cleanup (lexical_feedback *lexer) { delete lexer; }
+
 private:
 
   // No copying!
 
   lexical_feedback (const lexical_feedback&);
 
   lexical_feedback& operator = (const lexical_feedback&);
 };
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3495,18 +3495,18 @@ parse_fcn_file (const std::string& ff, c
 
   frame.add_fcn (safe_fclose, ffile);
 
   if (ffile)
     {
       bool eof;
 
       frame.protect_var (curr_lexer);
-
       curr_lexer = new lexical_feedback ();
+      frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
       reset_parser ();
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
@@ -4301,31 +4301,31 @@ another function for the given type sign
 octave_value_list
 eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   frame.protect_var (curr_lexer);
+  curr_lexer = new lexical_feedback ();
+  frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
   frame.protect_var (get_input_from_eval_string);
   frame.protect_var (line_editing);
   frame.protect_var (current_eval_string);
   frame.protect_var (current_function_depth);
   frame.protect_var (function_scopes);
   frame.protect_var (max_function_depth);
   frame.protect_var (parsing_subfunctions);
   frame.protect_var (endfunction_found);
   frame.protect_var (reading_fcn_file);
   frame.protect_var (reading_script_file);
   frame.protect_var (reading_classdef_file);
 
-  curr_lexer = new lexical_feedback ();
-
   get_input_from_eval_string = true;
   line_editing = false;
   current_function_depth = 0;
   function_scopes.clear ();
   max_function_depth = 0;
   parsing_subfunctions = false;
   endfunction_found = false;
   reading_fcn_file = false;
