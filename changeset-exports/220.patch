# HG changeset patch
# User jwe
# Date 753235829 0
#      Sun Nov 14 00:10:29 1993 +0000
# Node ID f736a3ec137ef0991e9c0314e98baa53882262ad
# Parent  e3b1b79cc604007bced490812c818f13f7f14881
[project @ 1993-11-14 00:10:26 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -623,16 +623,43 @@ symbol_record::next (void) const
 }
 
 void
 symbol_record::chain (symbol_record *s)
 {
   next_elem = s;
 }
 
+void
+symbol_record::push_context (void)
+{
+  context.push (definition);
+  definition = (symbol_def *) NULL;
+}
+
+void
+symbol_record::pop_context (void)
+{
+  assert (! context.empty ());
+
+  if (is_variable ())
+    {
+      symbol_def *old_def = pop_def ();
+      maybe_delete (old_def);
+    }
+
+  if (is_function ())
+    {
+      symbol_def *old_def = pop_def ();
+      maybe_delete (old_def);
+    }
+
+  definition = context.pop ();
+}
+
 int
 symbol_record::read_only_error (void)
 {
   if (is_read_only ())
     {
       char *tag = "symbol";
       if (is_variable ())
 	tag = "variable";
@@ -1065,16 +1092,46 @@ symbol_table::list (int& count, int sort
 
   if (sort && symbols != (char **) NULL)
     qsort ((void **) symbols, count, sizeof (char *),
 	   (int (*)(void*, void*)) pstrcmp);
 
   return symbols;
 }
 
+void
+symbol_table::push_context (void)
+{
+  for (int i = 0; i < HASH_TABLE_SIZE; i++)
+    {
+      symbol_record *ptr = table[i].next ();
+
+      while (ptr != (symbol_record *) NULL)
+	{
+	  ptr->push_context ();
+	  ptr = ptr->next ();
+	}
+    }
+}
+
+void
+symbol_table::pop_context (void)
+{
+  for (int i = 0; i < HASH_TABLE_SIZE; i++)
+    {
+      symbol_record *ptr = table[i].next ();
+
+      while (ptr != (symbol_record *) NULL)
+	{
+	  ptr->pop_context ();
+	  ptr = ptr->next ();
+	}
+    }
+}
+
 // Chris Torek's fave hash function.
 
 unsigned int
 symbol_table::hash (const char *str)
 {
   unsigned h = 0;
   while (*str)
     h = h * 33 + *str++;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -28,16 +28,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #pragma interface
 #endif
 
 #include <stdlib.h>
 #include <string.h>
 #include <iostream.h>
 #include <assert.h>
 
+#include "SLStack.h"
+
 #ifndef SV_FUNCTION_TYPEDEFS
 #define SV_FUNCTION_TYPEDEFS 1
 
 typedef int (*sv_Function)(void);
 
 #endif
 
 #define HASH_TABLE_SIZE 1024             /* Must be multiple of 2 */
@@ -177,25 +179,29 @@ public:
 
   void mark_as_linked_to_global (void);
   int is_linked_to_global (void) const;
 
   symbol_record *next (void) const;
 
   void chain (symbol_record *s);
 
+  void push_context (void);
+  void pop_context (void);
+
 private:
 
   unsigned formal_param : 1;
   unsigned linked_to_global : 1;
 
   char *nm;
   sv_Function sv_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
+  SLStack <symbol_def *> context;
 
   void init_state (void);
 
   int read_only_error (void);
 
   void push_def (symbol_def *sd);
   symbol_def *pop_def (void);
 
@@ -299,16 +305,19 @@ public:
   symbol_record_info *long_list (int& count, int sort = 0,
 				 unsigned type = SYMTAB_ALL_TYPES,
 				 unsigned scope = SYMTAB_ALL_SCOPES) const;
 
   char **list (int& count, int sort = 0,
 	       unsigned type = SYMTAB_ALL_TYPES,
 	       unsigned scope = SYMTAB_ALL_SCOPES) const;  
 
+  void push_context (void);
+  void pop_context (void);
+
 private:
 
   unsigned int hash (const char *s);
 
   symbol_record table[HASH_TABLE_SIZE];
 };
 
 #endif
