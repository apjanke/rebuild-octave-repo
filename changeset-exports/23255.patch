# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489014035 28800
#      Wed Mar 08 15:00:35 2017 -0800
# Node ID aaf91b4f48e497da20917226e138c91658e7c500
# Parent  7eeb2c561a1a7c4de4b6509a6eef5f22d3eabd08
hgtransform.m: New function (bug #50466).

* NEWS: Announce new function.

* scripts/plot/util/hgtransform.m: New function.

* scripts/plot/util/module.mk: Add to build system.

* plot.txi: Add new section "Transform Groups" to Advanced
Plotting to contain docstring.

* octave.texi: Add new section "Transform Groups" to
Table of Contents.

* __unimplemented__.m: Remove from unimplemented list.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -16,16 +16,17 @@ Summary of important user-visible change
 
  ** The "names" option used in regular expressions now returns a struct
     array, rather than a struct with a cell array for each field.  This
     change was made for Matlab compatibility.
 
  ** Other new functions added in 4.4:
 
       gsvd
+      hgtransform
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.4 and will
     be removed from Octave 4.8 (or whatever version is the second major
     release after 4.4):
 
       Function             | Replacement
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -574,16 +574,17 @@ Graphics Object Properties
 Advanced Plotting
 
 * Colors::
 * Line Styles::
 * Marker Styles::
 * Callbacks::
 * Application-defined Data::
 * Object Groups::
+* Transform Groups::
 * Graphics Toolkits::
 
 Object Groups
 
 * Data Sources in Object Groups::
 * Area Series::
 * Bar Series::
 * Contour Groups::
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1700,16 +1700,17 @@ returns a list of factory defaults.
 
 @menu
 * Colors::
 * Line Styles::
 * Marker Styles::
 * Callbacks::
 * Application-defined Data::
 * Object Groups::
+* Transform Groups::
 * Graphics Toolkits::
 @end menu
 
 
 @node Colors
 @subsection Colors
 @cindex graphics colors
 @cindex colors, graphics
@@ -2520,16 +2521,26 @@ The original x, y, z and c data.
 
 @item  xdatasource
 @itemx ydatasource
 @itemx zdatasource
 @itemx cdatasource
 Data source variables.
 @end table
 
+@node Transform Groups
+@subsection Transform Groups
+@cindex transform groups
+
+@c FIXME: Need to add documentation on transforms.
+
+@DOCSTRING(hgtransform)
+
+@c @DOCSTRING(makehgtform)
+
 @node Graphics Toolkits
 @subsection Graphics Toolkits
 @cindex graphics toolkits
 @cindex toolkits, graphics
 
 @DOCSTRING(graphics_toolkit)
 
 @DOCSTRING(available_graphics_toolkits)
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -675,17 +675,16 @@ function list = missing_functions ()
   "h5write",
   "h5writeatt",
   "handle",
   "hdfinfo",
   "hdfread",
   "height",
   "hgexport",
   "hgsetget",
-  "hgtransform",
   "histcounts",
   "histcounts2",
   "histogram",
   "histogram2",
   "im2java",
   "import",
   "inmem",
   "innerjoin",
diff --git a/scripts/plot/util/hgtransform.m b/scripts/plot/util/hgtransform.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/util/hgtransform.m
@@ -0,0 +1,174 @@
+## Copyright (C) 2017 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {@var{h} =} {} hgtransform ()
+## @deftypefnx {@var{h} =} {} hgtransform (@var{property}, @var{value}, @dots{})
+## @deftypefnx {@var{h} =} {} hgtransform (@var{hax}, @dots{})
+##
+## Create a graphics transform object.
+##
+## FIXME: Need to write documentation. 
+## FIXME: Add 'makehgtform' to seealso list when it is implemented.
+## @seealso{hggroup}
+## @end deftypefn
+
+
+## FIXME: hgtransform should be a C++ graphics object, not an m-file.
+##        For the moment (3/7/17), it is quicker to implement something in
+##        an m-file.  But, this approach requires double the memory (original
+##        and transformed data), and a system of listeners and callbacks.
+##        In OpenGL toolkits it should be possible to simply insert a transform
+##        somewhere in gl-render.cc to have this done on the fly.
+
+function h = hgtransform (varargin)
+
+  [hax, varargin] = __plt_get_axis_arg__ ("hgtransform", varargin{:});
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  htmp = hggroup (hax);
+
+  addproperty ("matrix", htmp, "data", eye (4));
+  addproperty ("__orig_data__", htmp, "any", struct ("h", {}));
+  if (! isempty (varargin))
+    set (htmp, varargin{:});
+  endif
+  addlistener (htmp, "matrix", @matrix_cb);
+  addlistener (htmp, "children", @children_cb);
+
+  if (nargout > 0)
+    h = htmp;
+  endif
+
+endfunction
+
+function matrix_cb (hgt, ~)
+
+  M = get (hgt, "matrix");
+  ## FIXME: Need better input validation on transform matrix M.
+  ##        Disallow shear, perspective transforms.
+  if (! isreal (M) || ! ismatrix (M) || rows (M) != 4 || columns (M) != 4)
+    error ("hgtransform: transform must be 4x4 real matrix");
+  endif
+
+  hkids = get (hgt, "children");
+  xform_data (hgt, hkids);
+
+endfunction
+
+function xform_data (hgt, hlist)
+
+  M = get (hgt, "matrix");
+  orig_data = get (hgt, "__orig_data__");
+
+  for hk = hlist.'
+
+    idx = find (hk == [orig_data.h]);
+    if (! idx)
+      warning ("hgtransform: original data not found for %f", hk);
+      continue;
+    endif
+
+    xd = double (orig_data(idx).xdata);
+    xsz = size (xd);
+
+    yd = double (orig_data(idx).ydata);
+    ysz = size (yd);
+
+    zd = double (orig_data(idx).zdata);
+    zsz = size (zd);
+    z_empty = isempty (zd);
+
+    if (isempty (zd))
+      ## Common case of 2-D data.
+      zd = zeros (1, numel (xd));
+    elseif (isvector (xd) && isvector (yd))
+      ## Handle surface data which may be a vector/matrix combination
+      if (isvector (zd))
+        ## Do nothing.  All data will be forced to row vectors below
+      elseif (length (xd) == rows (zd) && length (yd) == columns (zd))
+        [xd, yd] = meshgrid (xd, yd);
+        xsz = size (xd);
+        ysz = size (yd);
+      endif
+    endif
+
+    ## Force row vectors for later concatenation
+    xd = xd(:).';
+    yd = yd(:).';
+    zd = zd(:).';
+
+    ## FIXME: To minimize memory, better to construct data matrix in-place?
+    data = [xd; yd; zd; ones(1, columns(xd))];
+    tol = 2 * max (eps (data(1:3,:)));
+    data = M * data;
+    ## Need to trim or rotations which produce values near 0 will be strange.
+    data(abs (data) < tol) = 0;
+
+    set (hk, "xdata", reshape (data(1,:), xsz));
+    set (hk, "ydata", reshape (data(2,:), ysz));
+    if (! z_empty)
+      set (hk, "zdata", reshape (data(3,:), zsz));
+    endif
+  endfor
+
+endfunction
+
+function children_cb (hgt, ~)
+
+  hkids = get (hgt, "children");
+  orig_data = get (hgt, "__orig_data__");
+  hlist = [orig_data.h];
+
+  ## Delete any children that have been removed
+  hdel = setdiff (hlist, hkids);
+  if (! isempty (hdel))
+    for hk = hdel.'
+      idx = find (hk == hlist); 
+      if (ishghandle (hk))
+        ## child was re-parented to something else, restore data
+        set (hk, "xdata", orig_data(idx).xdata);
+        set (hk, "ydata", orig_data(idx).ydata);
+        set (hk, "zdata", orig_data(idx).zdata);
+      endif
+    endfor
+    orig_data = orig_data(hlist != hdel);
+    hlist = hlist(hlist != hdel);
+  endif
+
+  ## Add new children
+  hnew = setdiff (hkids, hlist);
+  for hk = hnew.'
+    orig_data(end+1).h = hk;
+    orig_data(end).xdata = get (hk, "xdata");
+    orig_data(end).ydata = get (hk, "ydata");
+    orig_data(end).zdata = get (hk, "zdata");
+  endfor
+  
+  set (hgt, "__orig_data__", orig_data);
+
+  ## Update data of new children only
+  xform_data (hgt, hnew);
+
+endfunction
+
+
+## Need BIST tests here
diff --git a/scripts/plot/util/module.mk b/scripts/plot/util/module.mk
--- a/scripts/plot/util/module.mk
+++ b/scripts/plot/util/module.mk
@@ -50,16 +50,17 @@ scripts_plot_util_FCN_FILES = \
   scripts/plot/util/gcf.m \
   scripts/plot/util/gco.m \
   scripts/plot/util/ginput.m \
   scripts/plot/util/graphics_toolkit.m \
   scripts/plot/util/hdl2struct.m \
   scripts/plot/util/hggroup.m \
   scripts/plot/util/hgload.m \
   scripts/plot/util/hgsave.m \
+  scripts/plot/util/hgtransform.m \
   scripts/plot/util/hold.m \
   scripts/plot/util/isaxes.m \
   scripts/plot/util/isfigure.m \
   scripts/plot/util/ishghandle.m \
   scripts/plot/util/ishold.m \
   scripts/plot/util/isprop.m \
   scripts/plot/util/linkaxes.m \
   scripts/plot/util/linkprop.m \
