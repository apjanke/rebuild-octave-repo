# HG changeset patch
# User jwe
# Date 811160554 0
#      Fri Sep 15 10:22:34 1995 +0000
# Node ID 8b976f7c0aa8d411fd5a2a08ee05e8b25aa69430
# Parent  f18474c64e729f40dbf47245739a57fb7a08a906
[project @ 1995-09-15 10:17:34 by jwe]

diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -83,16 +83,22 @@ gripe_user_returned_invalid (const char 
 
 void
 gripe_invalid_conversion (const char *from, const char *to)
 {
   error ("invalid conversion from %s to %s", from, to);
 }
 
 void
+gripe_invalid_value_specified (const char *name)
+{
+  warning ("invalid value specified for `%s'", name);
+}
+
+void
 gripe_2_or_3_dim_plot (void)
 {
   error ("plot: can only plot in 2 or 3 dimensions");
 }
 
 void
 gripe_unrecognized_float_fmt (void)
 {
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -30,16 +30,17 @@ extern void gripe_string_invalid (void);
 extern void gripe_range_invalid (void);
 extern void gripe_nonconformant (void);
 extern void gripe_nonconformant (int r1, int c1, int r2, int c2);
 extern void gripe_empty_arg (const char *name, int is_error);
 extern void gripe_square_matrix_required (const char *name);
 extern void gripe_user_supplied_eval (const char *name);
 extern void gripe_user_returned_invalid (const char *name);
 extern void gripe_invalid_conversion (const char *from, const char *to);
+extern void gripe_invalid_value_specified (const char *name);
 extern void gripe_2_or_3_dim_plot (void);
 extern void gripe_unrecognized_float_fmt (void);
 extern void gripe_unrecognized_data_fmt (const char *warn_for);
 extern void gripe_data_conversion (const char *from, const char *to);
 extern void gripe_wrong_type_arg (const char *name, const tree_constant& tc);
 extern void gripe_wrong_type_arg_for_unary_op (const tree_constant& op);
 extern void gripe_wrong_type_arg_for_binary_op (const tree_constant& op);
 
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -23,16 +23,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstring>
 
 #include "error.h"
+#include "gripes.h"
 #include "mappers.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // The list of user preferences.  Values change when global variables
 // change, so we don't have to do a variable look up every time we
 // need to check a preference.
@@ -88,16 +89,19 @@ init_user_prefs (void)
 
 // Check the value of a string variable to see if it it's ok to do
 // something.
 //
 //   return of  1 => always ok.
 //   return of  0 => never ok.
 //   return of -1 => ok, but give me warning (default).
 
+// XXX FIXME XXX -- should also allow zero to mean "false" and nonzero
+// to mean "true".
+
 static int
 check_str_pref (char *var)
 {
   char *val = builtin_string_variable (var);
   int pref = -1;
   if (val)
     {
       if (strncmp (val, "yes", 3) == 0
@@ -388,17 +392,17 @@ struct_levels_to_print (void)
 	  return status;
 	}
     }
 
   if (kludge == 0)
     kludge++;
   else
     {
-      warning ("invalid value specified for struct_levels_to_print");
+      gripe_invalid_value_specified ("struct_levels_to_print");
       status = -1;
     }
 
   return status;
 }
 
 
 // Suppress printing of additional help message in help and usage
@@ -560,17 +564,17 @@ set_output_max_field_width (void)
 	  return status;
 	}
     }
 
   if (kludge == 0)
     kludge++;
   else
     {
-      warning ("invalid value specified for output_max_field_width");
+      gripe_invalid_value_specified ("output_max_field_width");
       status = -1;
     }
 
   return status;
 }
 
 int
 set_output_precision (void)
@@ -590,17 +594,17 @@ set_output_precision (void)
 	  return status;
 	}
     }
 
   if (kludge == 0)
     kludge++;
   else
     {
-      warning ("invalid value specified for output_precision");
+      gripe_invalid_value_specified ("output_precision");
       status = -1;
     }
 
   return status;
 }
 
 int
 set_save_precision (void)
@@ -620,17 +624,17 @@ set_save_precision (void)
 	  return status;
 	}
     }
 
   if (kludge == 0)
     kludge++;
   else
     {
-      warning ("invalid value specified for save_precision");
+      gripe_invalid_value_specified ("save_precision");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_editor (void)
@@ -640,17 +644,17 @@ sv_editor (void)
   char *s = builtin_string_variable ("EDITOR");
   if (s)
     {
       delete [] user_pref.editor;
       user_pref.editor = s;
     }
   else
     {
-      warning ("invalid value specified for EDITOR");
+      gripe_invalid_value_specified ("EDITOR");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_default_save_format (void)
@@ -660,17 +664,17 @@ sv_default_save_format (void)
   char *s = builtin_string_variable ("default_save_format");
   if (s)
     {
       delete [] user_pref.default_save_format;
       user_pref.default_save_format = s;
     }
   else
     {
-      warning ("invalid value specified for default_save_format");
+      gripe_invalid_value_specified ("default_save_format");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_gnuplot_binary (void)
@@ -680,17 +684,17 @@ sv_gnuplot_binary (void)
   char *s = builtin_string_variable ("gnuplot_binary");
   if (s)
     {
       delete [] user_pref.gnuplot_binary;
       user_pref.gnuplot_binary = s;
     }
   else
     {
-      warning ("invalid value specified for gnuplot_binary");
+      gripe_invalid_value_specified ("gnuplot_binary");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_imagepath (void)
@@ -700,17 +704,17 @@ sv_imagepath (void)
   char *s = builtin_string_variable ("IMAGEPATH");
   if (s)
     {
       delete [] user_pref.imagepath;
       user_pref.imagepath = s;
     }
   else
     {
-      warning ("invalid value specified for IMAGEPATH");
+      gripe_invalid_value_specified ("IMAGEPATH");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_info_file (void)
@@ -720,17 +724,17 @@ sv_info_file (void)
   char *s = builtin_string_variable ("INFO_FILE");
   if (s)
     {
       delete [] user_pref.info_file;
       user_pref.info_file = s;
     }
   else
     {
-      warning ("invalid value specified for INFO_FILE");
+      gripe_invalid_value_specified ("INFO_FILE");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_loadpath (void)
@@ -740,17 +744,17 @@ sv_loadpath (void)
   char *s = builtin_string_variable ("LOADPATH");
   if (s)
     {
       delete [] user_pref.loadpath;
       user_pref.loadpath = maybe_add_default_load_path (s);
     }
   else
     {
-      warning ("invalid value specified for LOADPATH");
+      gripe_invalid_value_specified ("LOADPATH");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_pager_binary (void)
@@ -760,17 +764,17 @@ sv_pager_binary (void)
   char *s = builtin_string_variable ("PAGER");
   if (s)
     {
       delete [] user_pref.pager_binary;
       user_pref.pager_binary = s;
     }
   else
     {
-      warning ("invalid value specified for PAGER");
+      gripe_invalid_value_specified ("PAGER");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_ps1 (void)
@@ -780,17 +784,17 @@ sv_ps1 (void)
   char *s = builtin_string_variable ("PS1");
   if (s)
     {
       delete [] user_pref.ps1;
       user_pref.ps1 = s;
     }
   else
     {
-      warning ("invalid value specified for PS1");
+      gripe_invalid_value_specified ("PS1");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_ps2 (void)
@@ -800,17 +804,17 @@ sv_ps2 (void)
   char *s = builtin_string_variable ("PS2");
   if (s)
     {
       delete [] user_pref.ps2;
       user_pref.ps2 = s;
     }
   else
     {
-      warning ("invalid value specified for PS2");
+      gripe_invalid_value_specified ("PS2");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_ps4 (void)
@@ -820,17 +824,17 @@ sv_ps4 (void)
   char *s = builtin_string_variable ("PS4");
   if (s)
     {
       delete [] user_pref.ps4;
       user_pref.ps4 = s;
     }
   else
     {
-      warning ("invalid value specified for PS4");
+      gripe_invalid_value_specified ("PS4");
       status = -1;
     }
 
   return status;
 }
 
 int
 sv_pwd (void)
@@ -840,17 +844,17 @@ sv_pwd (void)
   char *s = builtin_string_variable ("PWD");
   if (s)
     {
       delete [] user_pref.pwd;
       user_pref.pwd = s;
     }
   else
     {
-      warning ("invalid value specified for PWD");
+      gripe_invalid_value_specified ("PWD");
       status = -1;
     }
 
   return status;
 }
 
 /*
 ;;; Local Variables: ***
