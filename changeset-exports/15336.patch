# HG changeset patch
# User Rik <rik@octave.org>
# Date 1347155249 25200
#      Sat Sep 08 18:47:29 2012 -0700
# Node ID 5fff79162342c74688df37525a137173fbbd68b1
# Parent  5187c3ea5a687ef4cf5c016b7ba1e8977c86c6c6
acinclude.m4: Put temporary shell variables in macros into ac_octave namespace.
* acinclude.m4: Put temporary shell variables in macros into ac_octave
namespace.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -69,22 +69,22 @@ dnl Check if C compiler handles FLAG com
 dnl arguments are specified, execute the second arg as shell commands.
 dnl Otherwise, add FLAG to CFLAGS if the compiler accepts the flag.
 dnl
 AC_DEFUN([OCTAVE_CC_FLAG], [
   ac_safe=`echo "$1" | sed 'y% ./+-:=%___p___%'`
   AC_MSG_CHECKING([whether ${CC-cc} accepts $1])
   AC_CACHE_VAL([octave_cv_cc_flag_$ac_safe],
     [AC_LANG_PUSH(C)
-    XCFLAGS="$CFLAGS"
+    ac_octave_save_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       [eval "octave_cv_cc_flag_$ac_safe=yes"],
       [eval "octave_cv_cc_flag_$ac_safe=no"])
-    CFLAGS="$XCFLAGS"
+    CFLAGS="$ac_octave_save_CFLAGS"
     AC_LANG_POP(C)
   ])
   if eval "test \"`echo '$octave_cv_cc_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT([yes])
     ifelse([$2], , 
       [CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
@@ -147,31 +147,31 @@ dnl Check whether Qscintilla FindFirst f
 dnl new (17 inputs).
 dnl FIXME: This test uses a version number.  It potentially could
 dnl        be re-written to actually call the function, but is it worth it?
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_FINDFIRST_MODERN], [
   AC_CACHE_CHECK([whether Qscintilla FindFirst uses 17 input arguments],
     [octave_cv_func_findfirst_modern],
     [AC_LANG_PUSH(C++)
-    save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="-I$QT_INCDIR -I$QT_INCDIR/Qt $CPPFLAGS"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <Qsci/qsciglobal.h>
         ]], [[
         #if QSCINTILLA_VERSION < 0x020600
         #error Old FindFirst function found.
         #endif
         ]])],
       octave_cv_func_findfirst_modern=yes,
       octave_cv_func_findfirst_modern=no)
-    CPPFLAGS="$save_CPPFLAGS"
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
   ])
-  if test $octave_cv_func_findfirst_modern = "yes"; then
+  if test $octave_cv_func_findfirst_modern = yes; then
     AC_DEFINE(HAVE_FINDFIRST_MODERN, 1, 
       [Define to 1 if Qscintilla FindFirst uses modern form with 17 inputs.])
   fi
 ])
 dnl
 dnl Check if Fortran compiler has the intrinsic function ISNAN.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_FORTRAN_ISNAN], [
@@ -211,45 +211,45 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_GLUTESSCALLB
         ]], [[
         GLvoid (*func)(...);
         gluTessCallback(0, 0, func);
         ]])],
       octave_cv_func_glutesscallback_threedots=yes,
       octave_cv_func_glutesscallback_threedots=no)
     AC_LANG_POP(C++)
   ])
-  if test $octave_cv_func_glutesscallback_threedots = "yes"; then
+  if test $octave_cv_func_glutesscallback_threedots = yes; then
     AC_DEFINE(HAVE_GLUTESSCALLBACK_THREEDOTS, 1, 
       [Define to 1 if gluTessCallback is called with (...).])
   fi
 ])
 dnl
 dnl Check whether Qscintilla SetPlaceholderText function exists.
 dnl FIXME: This test uses a version number.  It potentially could
 dnl        be re-written to actually call the function, but is it worth it?
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT], [
   AC_CACHE_CHECK([whether Qt has SetPlaceholderText function],
     [octave_cv_func_setplaceholdertext],
     [AC_LANG_PUSH(C++)
-    save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="-I$QT_INCDIR $CPPFLAGS"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <Qt/qglobal.h>
         ]], [[
         #if QT_VERSION < 0x040700
         #error No SetPlacholderText function available.
         #endif
         ]])],
       octave_cv_func_setplaceholdertext=yes,
       octave_cv_func_setplaceholdertext=no)
-    CPPFLAGS="$save_CPPFLAGS"
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
   ])
-  if test $octave_cv_func_setplaceholdertext = "yes"; then
+  if test $octave_cv_func_setplaceholdertext = yes; then
     AC_DEFINE(HAVE_SETPLACEHOLDERTEXT, 1, 
       [Define to 1 if you have the Qt SetPlaceholderText function.])
   fi
 ])
 dnl
 dnl Check whether HDF5 library has version 1.6 API functions.
 dnl
 AC_DEFUN([OCTAVE_CHECK_HDF5_HAS_VER_16_API], [
@@ -258,17 +258,17 @@ AC_DEFUN([OCTAVE_CHECK_HDF5_HAS_VER_16_A
     [AC_LINK_IFELSE([AC_LANG_PROGRAM([[
       #include <hdf5.h>
       ]], [[
       H5Eset_auto (0, 0);
       ]])],
       octave_cv_hdf5_has_ver_16_api=yes,
       octave_cv_hdf5_has_ver_16_api=no)
   ])
-  if test "$octave_cv_hdf5_has_ver_16_api" != "yes"; then
+  if test $octave_cv_hdf5_has_ver_16_api != yes; then
     AC_DEFINE(HAVE_HDF5_18, 1, [Define to 1 if >=HDF5-1.8 is available.])
   fi
 ])
 dnl
 dnl Usage:
 dnl OCTAVE_CHECK_LIB(LIBRARY, DOC-NAME, WARN-MSG, HEADER, FUNC,
 dnl                  LANG, DOC-STRING, EXTRA-CHECK)
 dnl
@@ -307,44 +307,44 @@ AC_DEFUN([OCTAVE_CHECK_LIB], [
     ;;
   esac
 
   [TEXINFO_]m4_toupper([$1])=
   warn_$1="$3"
   m4_set_add([summary_warning_list], [warn_$1])
 
   if test -n "$m4_toupper([$1])_LIBS"; then
-    octave_check_lib_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$m4_toupper([$1])_CPPFLAGS $CPPFLAGS"
     m4_ifnblank([$6], [AC_LANG_PUSH($6)])
     octave_$1_check_for_lib=false
     m4_ifblank([$4], [octave_$1_check_for_lib=true],
                [AC_CHECK_HEADERS([$4], [octave_$1_check_for_lib=true; break])])
     if $octave_$1_check_for_lib; then
-      octave_check_lib_save_LDFLAGS="$LDFLAGS"
+      ac_octave_save_LDFLAGS="$LDFLAGS"
       LDFLAGS="$m4_toupper([$1])_LDFLAGS $LDFLAGS"
-      octave_check_lib_save_LIBS="$LIBS"
+      ac_octave_save_LIBS="$LIBS"
       LIBS="$m4_toupper([$1])_LIBS $LIBS"
       octave_$1_ok=no
       AC_MSG_CHECKING([for $5 in $m4_toupper([$1])_LIBS])
       AC_LINK_IFELSE([AC_LANG_CALL([], [$5])],
         [octave_$1_ok=yes])
       AC_MSG_RESULT([$octave_$1_ok])
       if test $octave_$1_ok = yes; then
         m4_ifblank([$8], [
           warn_$1=
           AC_DEFINE([HAVE_]m4_toupper([$1]), 1,
             [Define to 1 if $2 is available.])
           [TEXINFO_]m4_toupper([$1])="@set [HAVE_]m4_toupper([$1])"], [$8])
       fi
-      LIBS="$octave_check_lib_save_LIBS"
-      LDFLAGS="$octave_check_lib_save_LDFLAGS"
+      LIBS="$ac_octave_save_LIBS"
+      LDFLAGS="$ac_octave_save_LDFLAGS"
     fi
     m4_ifnblank([$6], [AC_LANG_POP($6)])
-    CPPFLAGS="$octave_check_lib_save_CPPFLAGS"
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
   fi
   AC_SUBST(m4_toupper([$1])_LIBS)
   AC_SUBST([TEXINFO_]m4_toupper([$1]))
   if test -n "$warn_$1"; then
     AC_MSG_WARN([$warn_$1])
     m4_toupper([$1])_LIBS=
   fi
 ])
@@ -490,20 +490,22 @@ doit (void)
   for (int i = 0; i < 10; i++)
     doit ();
     ]])],
     octave_cv_lib_arpack_ok=yes,
     octave_cv_lib_arpack_ok=no,
     octave_cv_lib_arpack_ok=yes)
     AC_LANG_POP(C++)
   ])
-  if test "$octave_cv_lib_arpack_ok" = "yes"; then
+  if test $octave_cv_lib_arpack_ok = yes; then
     $1
+    :
   else
     $2
+    :
   fi
 ])
 dnl
 dnl Check whether using HDF5 DLL under Windows.  This is done by
 dnl testing for a data symbol in the HDF5 library, which would
 dnl require the definition of _HDF5USEDL_ under MSVC compiler.
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_HDF5_DLL], [
@@ -527,17 +529,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_HDF5_DLL], [
           return x
         ]])],
         octave_cv_lib_hdf5_dll=yes,
         octave_cv_lib_hdf5_dll=no)
       CFLAGS="$save_CFLAGS"
       LIBS="$save_LIBS"
     ])
   ])
-  if test "$octave_cv_lib_hdf5_dll" = yes; then
+  if test $octave_cv_lib_hdf5_dll = yes; then
     AC_DEFINE(_HDF5USEDLL_, 1, [Define to 1 if using HDF5 dll (Win32).])
   fi
 ])
 dnl
 dnl Check for OpenGL.  If found, define OPENGL_LIBS.
 dnl
 dnl FIXME: The following tests should probably check for the
 dnl libraries separately.
@@ -552,17 +554,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
   OCTAVE_HAVE_FRAMEWORK(OpenGL, [[
     #include <OpenGL/gl.h>
     #include <OpenGL/glu.h>
     ]], [[
     GLint par; glGetIntegerv (GL_VIEWPORT, &par);
     ]],
     have_framework_opengl=yes, have_framework_opengl=no)
 
-  if test $have_framework_opengl = "yes"; then
+  if test $have_framework_opengl = yes; then
     AC_DEFINE(HAVE_FRAMEWORK_OPENGL, 1,
       [Define to 1 if framework OPENGL is available.])
     OPENGL_LIBS="-Wl,-framework -Wl,OpenGL"
     AC_MSG_NOTICE([adding -Wl,-framework -Wl,OpenGL to OPENGL_LIBS])
     OCTAVE_CHECK_FUNC_GLUTESSCALLBACK_THREEDOTS
   else
     case $canonical_host_type in
       *-*-mingw32* | *-*-msdosmsvc)
@@ -579,17 +581,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
       ])
       break
       ], [], [
 #ifdef HAVE_WINDOWS_H
 # include <windows.h>
 #endif
     ])
 
-    if test "$have_opengl_incs" = "yes"; then
+    if test "$have_opengl_incs" = yes; then
       case $canonical_host_type in
         *-*-mingw32* | *-*-msdosmsvc)
           save_LIBS="$LIBS"
           LIBS="$LIBS -lopengl32"
           AC_MSG_CHECKING([for glEnable in -lopengl32])
           AC_LINK_IFELSE([AC_LANG_PROGRAM([[
             #if HAVE_WINDOWS_H
             # include <windows.h>
@@ -663,70 +665,72 @@ AC_DEFUN([OCTAVE_CHECK_LIB_QHULL_OK], [
         coordT points[8] = { -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5 };
         boolT ismalloc = 0;
         return qh_new_qhull (dim, n, points, ismalloc, "qhull ", 0, stderr); 
       ]])],
       octave_cv_lib_qhull_ok=yes,
       octave_cv_lib_qhull_ok=no,
       octave_cv_lib_qhull_ok=yes)
   ])
-  if test "$octave_cv_lib_qhull_ok" = "yes"; then
+  if test $octave_cv_lib_qhull_ok = yes; then
     $1
+    :
   else
     $2
+    :
   fi
 ])
 dnl
 dnl Find a suitable termlib to use.
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_TERMLIB], [
   TERM_LIBS=
-  octave_found_termlib=no
+  ac_octave_found_termlib=no
   for termlib in ncurses curses termcap terminfo termlib; do
     AC_CHECK_LIB([${termlib}], [tputs], [
       TERM_LIBS="-l${termlib}"
-      octave_found_termlib=yes
+      ac_octave_found_termlib=yes
       break])
   done
 
-  if test "$octave_found_termlib" = no; then
+  if test $ac_octave_found_termlib = no; then
     warn_termlibs="I couldn't find -ltermcap, -lterminfo, -lncurses, -lcurses, or -ltermlib!"
     AC_MSG_WARN([$warn_termlibs])
   fi
   AC_SUBST(TERM_LIBS)
 ])
 dnl
 dnl Check for support of OpenMP with a given compiler flag.
 dnl If found define HAVE_OPENMP and add the compile flag
 dnl to CFLAGS and CXXFLAGS.
 dnl
 AC_DEFUN([OCTAVE_CHECK_OPENMP], [
   AC_MSG_CHECKING([for support of OpenMP])
-  XCFLAGS="$CFLAGS"
+  ac_octave_save_CFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS $1"
   AC_CACHE_VAL([octave_cv_check_openmp],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <omp.h>
         #include <stdio.h>
         ]], [[
         int main(int argc, char* argv[])
         {
           _Pragma("omp parallel")  
           printf("Hello, world.\n");
           return 0;
         }
       ]])],
       octave_cv_openmp=yes, octave_cv_openmmp=no, octave_cv_openmp=no)
   ])
   AC_MSG_RESULT([$octave_cv_openmp])
-  if test "$octave_cv_openmp" = yes; then
+  if test $octave_cv_openmp = yes; then
     AC_DEFINE(HAVE_OPENMP, 1, [Define to 1 if compiler supports OpenMP.])
     CXXFLAGS="$CXXFLAGS $1"
   else
-    CFLAGS="$XCFLAGS"
+    CFLAGS="$ac_octave_save_CFLAGS"
   fi
 ])
 dnl
 dnl Check for the Qhull version.
 dnl
 AC_DEFUN([OCTAVE_CHECK_QHULL_VERSION], [
   AC_CACHE_CHECK([for qh_version in $QHULL_LIBS],
     [octave_cv_lib_qhull_version],
@@ -759,42 +763,42 @@ AC_DEFUN([OCTAVE_CHECK_QHULL_VERSION], [
         # include <poly.h>
         # include <io.h>
         #endif
         ]], [[
         const char *tmp = qh_version;
       ]])], 
       octave_cv_lib_qhull_version=yes, octave_cv_lib_qhull_version=no)
   ])
-  if test "$octave_cv_lib_qhull_version" = no; then
+  if test $octave_cv_lib_qhull_version = no; then
     AC_DEFINE(NEED_QHULL_VERSION, 1,
       [Define to 1 if the Qhull library needs a qh_version variable defined.])
   fi
 ])
 dnl
 dnl Check if the default Fortran INTEGER is 64 bits wide.
 dnl
 AC_DEFUN([OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER], [
   AC_CACHE_CHECK([whether $F77 generates correct size integers],
     [octave_cv_sizeof_fortran_integer],
-    [octave_fintsize_save_FFLAGS="$FFLAGS"
+    [ac_octave_save_FFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
     AC_LANG_PUSH(Fortran 77)
     AC_COMPILE_IFELSE(
 [[      subroutine foo(n, in, out)
       integer n, in(n), out(n)
       integer i
       do 10 i = 1, n
         out(i) = in(i)
    10 continue
       return
       end
 ]],
       [mv conftest.$ac_objext fintsize.$ac_objext
-      octave_fintsize_save_LIBS="$LIBS"
+      ac_octave_save_LIBS="$LIBS"
       LIBS="fintsize.$ac_objext $[]_AC_LANG_PREFIX[]LIBS"
       AC_LANG_PUSH(C)
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
           #include <assert.h> ]], [[
           #ifdef USE_64_BIT_IDX_T
           #if IDX_TYPE_LONG
             typedef long octave_idx_type;
           #else
@@ -810,23 +814,23 @@ AC_DEFUN([OCTAVE_CHECK_SIZEOF_FORTRAN_IN
           in[0] = 42;
           F77_FUNC(foo,FOO) (&n, &in, &out);
           assert (in[0] == out[0] && in[1] == out[1]);
         ]])],
         octave_cv_sizeof_fortran_integer=yes,
         octave_cv_sizeof_fortran_integer=no,
         octave_cv_sizeof_fortran_integer=yes)
       AC_LANG_POP(C)
-      LIBS="$octave_fintsize_save_LIBS"
+      LIBS="$ac_octave_save_LIBS"
       rm -f conftest.$ac_objext fintsize.$ac_objext],
       [rm -f conftest.$ac_objext
       AC_MSG_FAILURE([cannot compile a simple Fortran program])
       octave_cv_sizeof_fortran_integer=no])
     AC_LANG_POP(Fortran 77)
-    FFLAGS="$octave_fintsize_save_FFLAGS"
+    FFLAGS="$ac_octave_save_FFLAGS"
   ])
 ])
 dnl
 dnl Add warning to final summary.
 dnl
 AC_DEFUN([OCTAVE_CONFIGURE_WARNING], [
   AC_MSG_WARN([$][$1])
   m4_set_add([summary_warning_list], [$1])
@@ -881,17 +885,17 @@ AC_DEFUN([OCTAVE_CXX_BROKEN_REINTERPRET_
         fptr psin = sin;
         void *vptr = reinterpret_cast<void *> (psin);
         psin = reinterpret_cast<fptr> (vptr);
       ]])],
       octave_cv_cxx_broken_reinterpret_cast=no,
       octave_cv_cxx_broken_reinterpret_cast=yes)
     AC_LANG_POP(C++)
   ])
-  if test $octave_cv_cxx_broken_reinterpret_cast = yes ; then
+  if test $octave_cv_cxx_broken_reinterpret_cast = yes; then
     AC_DEFINE(CXX_BROKEN_REINTERPRET_CAST, 1,
       [Define to 1 if C++ reinterpret_cast fails for function pointers.])
   fi
 ])
 dnl
 dnl Check if the C++ library has functions to access real and imaginary
 dnl parts of complex numbers independently via references.
 dnl
@@ -965,22 +969,22 @@ dnl Check if C++ compiler handles FLAG c
 dnl arguments are specified, execute the second arg as shell commands.
 dnl Otherwise, add FLAG to CXXFLAGS if the compiler accepts the flag.
 dnl
 AC_DEFUN([OCTAVE_CXX_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
   AC_MSG_CHECKING([whether ${CXX-g++} accepts $1])
   AC_CACHE_VAL([octave_cv_cxx_flag_$ac_safe],
     [AC_LANG_PUSH(C++)
-    XCXXFLAGS="$CXXFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
     CXXFLAGS="$CXXFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_cxx_flag_$ac_safe=yes",
       eval "octave_cv_cxx_flag_$ac_safe=no")
-    CXXFLAGS="$XCXXFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
     AC_LANG_POP(C++)
   ])
   if eval "test \"`echo '$octave_cv_cxx_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT([yes])
     ifelse([$2], ,
       [CXXFLAGS="$CXXFLAGS $1"
       AC_MSG_RESULT([adding $1 to CXXFLAGS])], [$2])
   else
@@ -1098,46 +1102,46 @@ AC_DEFUN([OCTAVE_ENABLE_READLINE], [
       [use readline library])],
     [if test "$enableval" = no; then
        USE_READLINE=false
        warn_readline="command editing and history features require GNU Readline"
      fi])
   if $USE_READLINE; then
     dnl RHEL 5 and older systems require termlib set before enabling readline
     AC_REQUIRE([OCTAVE_CHECK_LIB_TERMLIB])
-    save_LIBS="$LIBS"
+    ac_octave_save_LIBS="$LIBS"
     LIBS="$TERM_LIBS"
     AC_CHECK_LIB([readline], [rl_set_keyboard_input_timeout],
       [READLINE_LIBS="-lreadline"
       AC_DEFINE(USE_READLINE, 1, [Define to 1 to use the readline library.])
       ],
       [AC_MSG_WARN([I need GNU Readline 4.2 or later])
       AC_MSG_ERROR([this is fatal unless you specify --disable-readline])
     ])
-    LIBS="$save_LIBS"
+    LIBS="$ac_octave_save_LIBS"
   fi
   AC_SUBST(READLINE_LIBS)
 ])
 dnl
 dnl Check if Fortran compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to FFLAGS if the compiler accepts
 dnl the flag.
 dnl
 AC_DEFUN([OCTAVE_F77_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
   AC_MSG_CHECKING([whether ${F77-g77} accepts $1])
   AC_CACHE_VAL([octave_cv_f77_flag_$ac_safe], [
     AC_LANG_PUSH(Fortran 77)
-    XFFLAGS="$FFLAGS"
+    ac_octave_save_FFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_f77_flag_$ac_safe=yes",
       eval "octave_cv_f77_flag_$ac_safe=no")
-    FFLAGS="$XFFLAGS"
+    FFLAGS="$ac_octave_save_FFLAGS"
     AC_LANG_POP(Fortran 77)
   ])
   if eval "test \"`echo '$octave_cv_f77_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT([yes])
     ifelse([$2], ,
       [FFLAGS="$FFLAGS $1"
       AC_MSG_RESULT([adding $1 to FFLAGS])], [$2])
   else
@@ -1224,33 +1228,34 @@ dnl "-framework $1" for the given prolog
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
 dnl "--without-framework-$1".  If this test is successful then perform
 dnl $4, otherwise do $5.
 dnl
 AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
   AC_MSG_CHECKING([whether ${LD-ld} accepts -framework $1])
   AC_CACHE_VAL([octave_cv_framework_$1],
-    [XLDFLAGS="$LDFLAGS"
+    [ac_octave_save_LDFLAGS="$LDFLAGS"
     LDFLAGS="$LDFLAGS -framework $1"
     AC_LANG_PUSH(C++)
     AC_LINK_IFELSE([AC_LANG_PROGRAM([$2], [$3])],
       eval "octave_cv_framework_$1=yes",
       eval "octave_cv_framework_$1=no")
     AC_LANG_POP(C++)
-    LDFLAGS="$XLDFLAGS"
+    LDFLAGS="$ac_octave_save_LDFLAGS"
   ])
-  if test "$octave_cv_framework_$1" = "yes"; then
+  if test "$octave_cv_framework_$1" = yes; then
     AC_MSG_RESULT([yes])
     AC_ARG_WITH(framework-m4_tolower($1),
       [AS_HELP_STRING([--without-framework-m4_tolower($1)], 
         [don't use framework $1])],
          with_have_framework=$withval, with_have_framework=yes)
-    if test "$with_have_framework" = "yes"; then
+    if test "$with_have_framework" = yes; then
       [$4]
+      :
     else
       AC_MSG_NOTICE([framework rejected by --without-framework-m4_tolower($1)])
       [$5]
     fi
   else
     AC_MSG_RESULT([no])
     [$5]
   fi
@@ -1294,17 +1299,17 @@ AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
       octave_cv_ieee754_data_format=no,
       octave_cv_ieee754_data_format=yes)
   ])
   if test "$cross_compiling" = yes; then
     AC_MSG_RESULT([$octave_cv_ieee754_data_format assumed for cross compilation])
   else
     AC_MSG_RESULT([$octave_cv_ieee754_data_format])
   fi
-  if test "$octave_cv_ieee754_data_format" = yes; then
+  if test $octave_cv_ieee754_data_format = yes; then
     AC_DEFINE(HAVE_IEEE754_DATA_FORMAT, 1,
       [Define to 1 if your system uses IEEE 754 data format.])
   else
     ## If the format is unknown, then you will probably not have a
     ## useful system, so we will abort here.  Anyone wishing to
     ## experiment with building Octave on a system without IEEE
     ## floating point should be capable of removing this check and
     ## the one in the octave_ieee_init function in liboctave/lo-ieee.cc.
@@ -1350,17 +1355,17 @@ dnl Find desktop-file-install program.
 dnl
 AC_DEFUN([OCTAVE_PROG_DESKTOP_FILE_INSTALL], [
   AC_CHECK_PROG(DESKTOP_FILE_INSTALL, desktop-file-install, desktop-file-install, [])
   AC_SUBST(DESKTOP_FILE_INSTALL)
 ])
 dnl
 dnl Find find program.
 dnl
-# Prefer GNU find if found.
+## Prefer GNU find if found.
 AN_MAKEVAR([FIND],  [OCTAVE_PROG_FIND])
 AN_PROGRAM([gfind], [OCTAVE_PROG_FIND])
 AN_PROGRAM([find],  [OCTAVE_PROG_FIND])
 AC_DEFUN([OCTAVE_PROG_FIND], [
   AC_CHECK_PROGS(FIND, [gfind find])
 ])
 dnl
 dnl Check for flex.
@@ -1391,46 +1396,46 @@ lex.cc, which is the case if you're buil
   AC_SUBST(LFLAGS)
 ])
 dnl
 dnl Check for ghostscript.
 dnl
 AC_DEFUN([OCTAVE_PROG_GHOSTSCRIPT], [
   case "$canonical_host_type" in
     *-*-mingw* | *-*-msdosmsvc)
-      gs_names="gswin32c gs mgs"
+      ac_octave_gs_names="gswin32c gs mgs"
     ;;
     *)
-      gs_names="gs"
+      ac_octave_gs_names="gs"
     ;;
   esac
-  AC_CHECK_PROGS(GHOSTSCRIPT, [$gs_names])
+  AC_CHECK_PROGS(GHOSTSCRIPT, [$ac_octave_gs_names])
   if test -z "$GHOSTSCRIPT"; then
     GHOSTSCRIPT='$(top_srcdir)/build-aux/missing gs'
     warn_ghostscript="
 
 I didn't find ghostscript, so reconstructing figures for the manual
 will fail, and saving graphics in some output formats will fail when
 using Octave
 "
     OCTAVE_CONFIGURE_WARNING([warn_ghostscript])
   fi
   AC_SUBST(GHOSTSCRIPT)
 ])
 dnl
 dnl Check for gnuplot.
 dnl
 AC_DEFUN([OCTAVE_PROG_GNUPLOT], [
-  gp_names="gnuplot"
-  gp_default="gnuplot"
+  ac_octave_gp_names="gnuplot"
+  ac_octave_gp_default="gnuplot"
   if test "$cross_compiling" = yes; then
-    GNUPLOT="$gp_default"
+    GNUPLOT="$ac_octave_gp_default"
     AC_MSG_RESULT([assuming $GNUPLOT exists on $canonical_host_type host])
   else
-    AC_CHECK_PROGS(GNUPLOT, [$gp_names])
+    AC_CHECK_PROGS(GNUPLOT, [$ac_octave_gp_names])
     if test -z "$GNUPLOT"; then
       GNUPLOT="$gp_default"
       warn_gnuplot="
 
 gnuplot not found.  It isn't necessary to have gnuplot installed, but
 without native graphics or gnuplot you won't be able to use any of
 Octave's plotting commands.
 "
@@ -1471,24 +1476,24 @@ dnl
 dnl What pager should we use?
 dnl
 AC_DEFUN([OCTAVE_PROG_PAGER], [
   if test "$cross_compiling" = yes; then
     DEFAULT_PAGER=less
     AC_MSG_RESULT([assuming $DEFAULT_PAGER exists on $canonical_host_type host])
     AC_SUBST(DEFAULT_PAGER)
   else
-    octave_possible_pagers="less more page pg"
+    ac_octave_possible_pagers="less more page pg"
     case "$canonical_host_type" in
       *-*-cygwin* | *-*-mingw32* | *-*-msdosmsvc)
-        octave_possible_pagers="$octave_possible_pagers more.com"
+        ac_octave_possible_pagers="$ac_octave_possible_pagers more.com"
       ;;
     esac
 
-    AC_CHECK_PROGS(DEFAULT_PAGER, [$octave_possible_pagers], [])
+    AC_CHECK_PROGS(DEFAULT_PAGER, [$ac_octave_possible_pagers], [])
     if test -z "$DEFAULT_PAGER"; then
       warn_less="I couldn't find \`less', \`more', \`page', or \`pg'"
       OCTAVE_CONFIGURE_WARNING([warn_less])
     fi
   fi
 ])
 dnl
 dnl Find Perl program.
@@ -1589,25 +1594,25 @@ reconstruct the DVI version of the manua
 ])
 dnl
 dnl Check for texi2pdf.
 dnl
 AC_DEFUN([OCTAVE_PROG_TEXI2PDF], [
   AC_REQUIRE([OCTAVE_PROG_TEXI2DVI])
   AC_CHECK_PROG(TEXI2PDF, texi2pdf, texi2pdf, [])
   if test -z "$TEXI2PDF"; then
-    missing=true;
+    ac_octave_missing=true;
     if test -n "$TEXI2DVI"; then
       TEXI2PDF="$TEXI2DVI --pdf"
-      missing=false;
+      ac_octave_missing=false;
     fi
   else
-    missing=false;
+    ac_octave_missing=false;
   fi
-  if $missing; then
+  if $ac_octave_missing; then
     TEXI2PDF='$(top_srcdir)/build-aux/missing texi2pdf'
     warn_texi2pdf="
 
 I didn't find texi2pdf, but it's only a problem if you need to
 reconstruct the PDF version of the manual
 "
     OCTAVE_CONFIGURE_WARNING([warn_texi2pdf])
   fi
@@ -1701,49 +1706,49 @@ AC_DEFUN([OCTAVE_UMFPACK_SEPARATE_SPLIT]
       octave_cv_umfpack_separate_split=no,
       octave_cv_umfpack_separate_split=yes)
   ])
   if test "$cross_compiling" = yes; then
     AC_MSG_RESULT([$octave_cv_umfpack_separate_split assumed for cross compilation])
   else
     AC_MSG_RESULT([$octave_cv_umfpack_separate_split])
   fi
-  if test "$octave_cv_umfpack_separate_split" = yes; then
+  if test $octave_cv_umfpack_separate_split = yes; then
     AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, 
       [Define to 1 if the UMFPACK Complex solver allows matrix and RHS to be split independently.])
   fi
 ])
 dnl
 dnl Check for unordered map headers and whether tr1 namespace is
 dnl required.
 dnl
 AC_DEFUN([OCTAVE_UNORDERED_MAP_HEADERS], [
   AC_CHECK_HEADERS([unordered_map], [],
     [AC_CHECK_HEADERS([tr1/unordered_map])])
   AC_CACHE_CHECK([whether unordered_map requires tr1 namespace], 
     [octave_cv_header_require_tr1_namespace],
     [AC_LANG_PUSH(C++)
     octave_cv_header_require_tr1_namespace=no
-    if test "$ac_cv_header_unordered_map" = "yes"; then
+    if test $ac_cv_header_unordered_map = yes; then
       ## Have <unordered_map>, but still have to check whether
       ## tr1 namespace is required (like MSVC, for instance).
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
           #include <unordered_map>
           ]], [[
           std::unordered_map<int,int> m;
         ]])],
         octave_cv_header_require_tr1_namespace=no, 
         octave_cv_header_require_tr1_namespace=yes)
-    elif test "$ac_cv_header_tr1_unordered_map" = "yes"; then
+    elif test $ac_cv_header_tr1_unordered_map = yes; then
       octave_cv_header_require_tr1_namespace=yes
     fi
     AC_LANG_POP(C++)
   ])
-  if test "$octave_cv_header_require_tr1_namespace" = "yes"; then
+  if test $octave_cv_header_require_tr1_namespace = yes; then
     AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1, 
       [Define to 1 if unordered_map requires the use of tr1 namespace.])
   fi
 ])
 
 dnl         End of macros written by Octave developers
 dnl ------------------------------------------------------------
 dnl
