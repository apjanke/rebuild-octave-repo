# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518668920 18000
#      Wed Feb 14 23:28:40 2018 -0500
# Node ID b784d68f7c44a1483fb33640aeca9a7a1e2eb68a
# Parent  6fe8e8a2a8e8f0d7aedab55b18a43fe79087ff5b
fix printing of logical values (bug #53160)

* pr-output.h, pr-output.cc (make_format): Provide specialization for
boolNDArray objects.
(octave_print_internal): Define more consistently.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1642,16 +1642,23 @@ float_display_format
 make_format (const FloatComplexNDArray& nda)
 {
   int r_fw = 0;
   int i_fw = 0;
   double scale = 0;
   return make_format (FloatComplexMatrix (nda), r_fw, i_fw, scale);
 }
 
+template <>
+float_display_format
+make_format (const boolNDArray&)
+{
+  return float_display_format (float_format (1, 1));
+}
+
 // FIXME: all this mess with abs is an attempt to avoid seeing
 //
 //   warning: comparison of unsigned expression < 0 is always false
 //
 // from GCC.  Isn't there a better way?
 
 template <typename T>
 /* static */ inline T
@@ -1770,27 +1777,33 @@ MAKE_INT_SCALAR_FORMAT (uint8_t)
 MAKE_INT_SCALAR_FORMAT (int16_t)
 MAKE_INT_SCALAR_FORMAT (uint16_t)
 MAKE_INT_SCALAR_FORMAT (int32_t)
 MAKE_INT_SCALAR_FORMAT (uint32_t)
 MAKE_INT_SCALAR_FORMAT (int64_t)
 MAKE_INT_SCALAR_FORMAT (uint64_t)
 
 void
-octave_print_internal (std::ostream&, char, bool)
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       bool d, bool pr_as_read_syntax)
 {
-  panic_impossible ();
+  octave_print_internal (os, fmt, octave_uint8 (d), pr_as_read_syntax);
 }
 
 void
-octave_print_internal (std::ostream& os, double d,
-                       bool pr_as_read_syntax)
+octave_print_internal (std::ostream& os, bool d, bool pr_as_read_syntax)
 {
-  set_format (d);
-  octave_print_internal (os, curr_float_display_fmt, d, pr_as_read_syntax);
+  octave_print_internal (os, octave_uint8 (d), pr_as_read_syntax);
+}
+
+void
+octave_print_internal (std::ostream&, const float_display_format&,
+                       char, bool)
+{
+  panic_impossible ();
 }
 
 void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        double d, bool pr_as_read_syntax)
 {
   if (pr_as_read_syntax)
     os << d;
@@ -2197,24 +2210,16 @@ pr_plus_format<> (std::ostream& os, cons
         os << 'i';
     }
   else if (ip == 0.0)
     pr_plus_format (os, rp);
   else
     os << 'c';
 }
 
-void
-octave_print_internal (std::ostream& os, const Complex& c,
-                       bool pr_as_read_syntax)
-{
-  set_format (c);
-  octave_print_internal (os, curr_float_display_fmt, c, pr_as_read_syntax);
-}
-
 extern void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        const Complex& c, bool pr_as_read_syntax)
 {
   if (pr_as_read_syntax)
     os << c;
   else if (plus_format)
     pr_plus_format (os, c);
@@ -2661,31 +2666,19 @@ octave_print_internal (std::ostream& os,
 
     default:
       print_nd_array <ComplexNDArray, Complex, ComplexMatrix>
                      (os, nda, pr_as_read_syntax);
       break;
     }
 }
 
-void
-octave_print_internal (std::ostream& os, bool d, bool pr_as_read_syntax)
-{
-  octave_print_internal (os, octave_uint8 (d), pr_as_read_syntax);
-}
-
 // FIXME: write single precision versions of the printing functions.
 
 void
-octave_print_internal (std::ostream& os, float d, bool pr_as_read_syntax)
-{
-  octave_print_internal (os, double (d), pr_as_read_syntax);
-}
-
-void
 octave_print_internal (std::ostream& os, const FloatMatrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_print_internal (os, Matrix (m), pr_as_read_syntax, extra_indent);
 }
 
 void
 octave_print_internal (std::ostream& os, const FloatDiagMatrix& m,
@@ -2697,23 +2690,16 @@ octave_print_internal (std::ostream& os,
 void
 octave_print_internal (std::ostream& os, const FloatNDArray& nda,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_print_internal (os, NDArray (nda), pr_as_read_syntax, extra_indent);
 }
 
 void
-octave_print_internal (std::ostream& os, const FloatComplex& c,
-                       bool pr_as_read_syntax)
-{
-  octave_print_internal (os, Complex (c), pr_as_read_syntax);
-}
-
-void
 octave_print_internal (std::ostream& os, const FloatComplexMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_print_internal (os, ComplexMatrix (cm), pr_as_read_syntax,
                          extra_indent);
 }
 
 void
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -51,57 +51,187 @@ class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
+extern float_display_format
+make_format (double d, int& fw);
+
+extern float_display_format
+make_format (const Matrix& m, int& fw, double& scale);
+
+extern float_display_format
+make_format (const Complex& c, int& r_fw, int& i_fw);
+
+extern float_display_format
+make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
+
+extern float_display_format
+make_format (const Range& r, int& fw, double& scale);
+
+template <typename MT>
+float_display_format
+make_format (const MT&)
+{
+  return float_display_format ();
+}
+
+template <>
+float_display_format
+make_format (const Range& r);
+
+template <>
+float_display_format
+make_format (const NDArray& nda);
+
+template <>
+float_display_format
+make_format (const FloatNDArray& nda);
+
+template <>
+float_display_format
+make_format (const ComplexNDArray& nda);
+
+template <>
+float_display_format
+make_format (const FloatComplexNDArray& nda);
+
+template <>
+float_display_format
+make_format (const boolNDArray& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int8>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int16>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int32>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int64>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint8>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint16>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint32>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint64>& nda);
+
+template <>
+float_display_format
+make_format (const double& d);
+
+template <>
+float_display_format
+make_format (const float& f);
+
+template <>
+float_display_format
+make_format (const Complex& c);
+
+template <>
+float_display_format
+make_format (const FloatComplex& c);
+
+template <>
+float_display_format
+make_format (const octave_int8& nda);
+
+template <>
+float_display_format
+make_format (const octave_int16& nda);
+
+template <>
+float_display_format
+make_format (const octave_int32& nda);
+
+template <>
+float_display_format
+make_format (const octave_int64& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint8& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint16& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint32& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint64& nda);
+
 // FIXME: templates plus specializations might help here.
 
 extern OCTINTERP_API void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       bool d, bool pr_as_read_syntax = false);
+
+extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, bool d,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       bool d, bool pr_as_read_syntax = false)
-{
-  octave_print_internal (os, d, pr_as_read_syntax);
-}
-
 extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, char c,
-                       bool pr_as_read_syntax = false);
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       char c, bool pr_as_read_syntax = false);
 
 inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       char c, bool pr_as_read_syntax = false)
+octave_print_internal (std::ostream& os, char c,
+                       bool pr_as_read_syntax = false)
 {
+  float_display_format fmt (float_format (0, 0));
   octave_print_internal (os, c, pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, double d,
-                       bool pr_as_read_syntax = false);
-
-extern void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        double d, bool pr_as_read_syntax = false);
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, float d,
-                       bool pr_as_read_syntax = false);
+inline void
+octave_print_internal (std::ostream& os, double d,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, make_format (d), d, pr_as_read_syntax);
+}
 
 inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        float d, bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, d, pr_as_read_syntax);
+  octave_print_internal (os, fmt, double (d), pr_as_read_syntax);
+}
+
+inline void
+octave_print_internal (std::ostream& os, float d,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, double (d), pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
@@ -125,32 +255,38 @@ octave_print_internal (std::ostream& os,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const FloatNDArray& nda,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const Complex& c,
-                       bool pr_as_read_syntax = false);
-
-extern void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        const Complex& c, bool pr_as_read_syntax = false);
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const FloatComplex& c,
-                       bool pr_as_read_syntax = false);
+inline void
+octave_print_internal (std::ostream& os, const Complex& c,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, make_format (c), c, pr_as_read_syntax);
+}
 
 inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
                        const FloatComplex& c, bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, c, pr_as_read_syntax);
+  octave_print_internal (os, fmt, Complex (c), pr_as_read_syntax);
+}
+
+inline void
+octave_print_internal (std::ostream& os, const FloatComplex& c,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, Complex (c), pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
@@ -259,105 +395,114 @@ extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const intNDArray<octave_uint64>& sa,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int8_t>& sa,
                        bool pr_as_read_syntax = false);
+
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int8_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<uint8_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint8_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int16_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int16_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<uint16_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint16_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int32_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int32_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<uint32_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint32_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int64_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int64_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<uint64_t>& sa,
                        bool pr_as_read_syntax = false);
 
 inline OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint64_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
+  float_display_format fmt (float_format (0, 0));
+  octave_print_internal (os, fmt, sa, pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Cell& cell,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
@@ -369,138 +514,16 @@ octave_print_internal (std::ostream& os,
   octave_print_internal (os, cell, pr_as_read_syntax, extra_indent,
                          pr_as_string);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_value& ov,
                        bool pr_as_read_syntax = false);
 
-extern float_display_format
-make_format (double d, int& fw);
-
-extern float_display_format
-make_format (const Matrix& m, int& fw, double& scale);
-
-extern float_display_format
-make_format (const Complex& c, int& r_fw, int& i_fw);
-
-extern float_display_format
-make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
-
-extern float_display_format
-make_format (const Range& r, int& fw, double& scale);
-
-template <typename MT>
-float_display_format
-make_format (const MT&)
-{
-  return float_display_format ();
-}
-
-template <>
-float_display_format
-make_format (const Range& r);
-
-template <>
-float_display_format
-make_format (const NDArray& nda);
-
-template <>
-float_display_format
-make_format (const FloatNDArray& nda);
-
-template <>
-float_display_format
-make_format (const ComplexNDArray& nda);
-
-template <>
-float_display_format
-make_format (const FloatComplexNDArray& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_int8>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_int16>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_int32>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_int64>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_uint8>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_uint16>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_uint32>& nda);
-
-template <>
-float_display_format
-make_format (const intNDArray<octave_uint64>& nda);
-
-template <>
-float_display_format
-make_format (const double& d);
-
-template <>
-float_display_format
-make_format (const float& f);
-
-template <>
-float_display_format
-make_format (const Complex& c);
-
-template <>
-float_display_format
-make_format (const FloatComplex& c);
-
-template <>
-float_display_format
-make_format (const octave_int8& nda);
-
-template <>
-float_display_format
-make_format (const octave_int16& nda);
-
-template <>
-float_display_format
-make_format (const octave_int32& nda);
-
-template <>
-float_display_format
-make_format (const octave_int64& nda);
-
-template <>
-float_display_format
-make_format (const octave_uint8& nda);
-
-template <>
-float_display_format
-make_format (const octave_uint16& nda);
-
-template <>
-float_display_format
-make_format (const octave_uint32& nda);
-
-template <>
-float_display_format
-make_format (const octave_uint64& nda);
-
 class
 pr_engineering_float
 {
 public:
 
   const float_format m_ff;
 
   double m_val;
