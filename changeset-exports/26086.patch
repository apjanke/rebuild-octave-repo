# HG changeset patch
# User Rik <rik@octave.org>
# Date 1542347823 28800
#      Thu Nov 15 21:57:03 2018 -0800
# Node ID 9a58d7e0554ea6cc4cd3c74ed9c4a1d62cc01747
# Parent  6a1e2b30020d2ff2700d46833b4da295c270e964
axes.m: Allow a parent handle as first argument (bug #53955).

* axes.m: Add new calling form to docstring.  Document that first argument may
be a parent graphics handle for the newly constructed axes.  Redo input
validation to detect a figure, uipanel, or uitab as first argument.  Add BIST
tests for input validation.

diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -14,94 +14,112 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} axes ()
 ## @deftypefnx {} {} axes (@var{property}, @var{value}, @dots{})
+## @deftypefnx {} {} axes (@var{hpar}, @var{property}, @var{value}, @dots{})
 ## @deftypefnx {} {} axes (@var{hax})
 ## @deftypefnx {} {@var{h} =} axes (@dots{})
 ## Create a Cartesian axes object and return a handle to it, or set the current
 ## axes to @var{hax}.
 ##
 ## Called without any arguments, or with @var{property}/@var{value} pairs,
-## construct a new axes.
+## construct a new axes.  The optional argument @var{hpar} is a graphics handle
+## specifying the parent for the new axes and may be a figure, uipanel, or
+## uitab.
 ##
 ## Called with a single axes handle argument @var{hax}, the function makes
 ## @var{hax} the current axes (as returned by @code{gca}).  It also makes
 ## the figure which contains @var{hax} the current figure (as returned by
 ## @code{gcf}).  Finally, it restacks the parent object's @code{children}
 ## property so that the axes @var{hax} appears before all other axes handles
 ## in the list.  This causes @var{hax} to be displayed on top of any other axes
 ## objects (Z-order stacking).  In addition it restacks any legend or colorbar
 ## objects associated with @var{hax} so that they are also visible.
 ##
 ## Programming Note: The full list of properties is documented at
 ## @ref{Axes Properties,,Axes Properties}.
 ## @seealso{gca, set, get}
 ## @end deftypefn
 
-## Author: jwe
-
 function h = axes (varargin)
 
-  if (nargin == 0 || nargin > 1)
-    ## Parent handle
+  htmp = hpar = [];
+  if (nargin > 0)
+    if (ishghandle (varargin{1}(1)))
+      htmp = varargin{1};
+      if (! isscalar (htmp))
+        error ("axes: H must be a scalar handle");
+      endif
+      typ = get (htmp, "type");
+      if (strcmp (typ, "axes") && nargin == 1)
+        cf = ancestor (htmp, "figure");
+        if (__is_handle_visible__ (htmp))
+          set (0, "currentfigure", cf);
+          set (cf, "currentaxes", htmp);
+        endif
+        restack_axes (htmp, get (htmp, "parent"));
+
+        if (nargout > 0)
+          h = htmp;
+        endif
+        return;
+
+      elseif (any (strcmp (typ, {"figure", "uipanel", "uitab"})))
+        hpar = htmp;
+        htmp = [];
+        varargin(1) = [];
+
+      else
+        error ("axes: H must be a handle to an axes or container");
+      endif
+    endif
+  endif
+
+  if (isempty (hpar))
+    ## Find a parent if not given as first argument.
     idx = find (strcmpi (varargin(1:2:end), "parent"), 1, "first");
     if (! isempty (idx) && numel (varargin) >= 2*idx)
       hpar = varargin{2*idx};
       varargin([2*idx-1, 2*idx]) = [];
     else
       hpar = gcf ();
     endif
+  endif
 
-    ## If there is an annotation axes currently on top of the children stack,
-    ## then it must be placed back on top.
-    ## FIXME: It may be necessary to keep uiXXX objects above all axes objects
-    ##        including even the transparent scribe axes layer.
-    ch = allchild (hpar);
-    h_annotation = ch(strcmp (get (ch, "tag"), "scribeoverlay"));
-
-    ## Create an axes object.
-    htmp = __go_axes__ (hpar, varargin{:});
-    if (__is_handle_visible__ (htmp))
-      set (ancestor (hpar, "figure"), "currentaxes", htmp);
-    endif
+  ## If there is an annotation axes currently on top of the children stack,
+  ## then it must be placed back on top.
+  ## FIXME: It may be necessary to keep uiXXX objects above all axes objects
+  ##        including even the transparent scribe axes layer.
+  ch = allchild (hpar);
+  h_annotation = ch(strcmp (get (ch, "tag"), "scribeoverlay"));
 
-    ## Restack annotation object if necessary
-    if (! isempty (h_annotation))
-      ## FIXME: This will put annotation layer first, above even uicontrol
-      ## objects.  May need to keep annotation layer above all axes only.
-      shh = get (0, "ShowHiddenHandles");
-      unwind_protect
-        set (0, "ShowHiddenHandles", "on");
-        ch(ch == h_annotation) = htmp;
-        ch = [h_annotation; ch];
-        set (hpar, "children", ch);
-      unwind_protect_cleanup
-        set (0, "ShowHiddenHandles", shh);
-      end_unwind_protect
-    endif
+  ## Create an axes object.
+  htmp = __go_axes__ (hpar, varargin{:});
+  if (__is_handle_visible__ (htmp))
+    set (ancestor (hpar, "figure"), "currentaxes", htmp);
+  endif
 
-  else
-    ## ARG is axes handle.
-    htmp = varargin{1};
-    if (! isscalar (htmp) || ! isaxes (htmp))
-      error ("axes: H must be a scalar axes handle");
-    endif
-
-    cf = ancestor (htmp, "figure");
-    if (__is_handle_visible__ (htmp))
-      set (0, "currentfigure", cf);
-      set (cf, "currentaxes", htmp);
-    endif
-
-    restack_axes (htmp, get (htmp, "parent"));
+  ## Restack annotation object if necessary
+  if (! isempty (h_annotation))
+    ## FIXME: This will put annotation layer first, above even uicontrol
+    ## objects.  May need to keep annotation layer above all axes only.
+    shh = get (0, "ShowHiddenHandles");
+    unwind_protect
+      set (0, "ShowHiddenHandles", "on");
+      ch(ch == h_annotation) = htmp;
+      ch = [h_annotation; ch];
+      set (hpar, "children", ch);
+    unwind_protect_cleanup
+      set (0, "ShowHiddenHandles", shh);
+    end_unwind_protect
   endif
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
@@ -287,8 +305,11 @@ endfunction
 %!                [hax1pos, hax2pos, hleg1pos, hleg2pos, hcb1pos, hcb2pos]));
 %!   assert (hax2pos < hax1pos);
 %!   assert (hleg2pos < hcb2pos && hcb2pos < hax2pos);
 %!   assert (hcb1pos < hleg1pos && hleg1pos < hax1pos);
 %!
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
+
+%!error <H must be a scalar handle> axes ([0, 0])
+%!error <H must be a handle to an axes or container> axes (0)
