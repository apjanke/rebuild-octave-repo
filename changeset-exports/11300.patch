# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1290758296 18000
#      Fri Nov 26 02:58:16 2010 -0500
# Node ID 4ecc7bc5bc8306931fa9c96e13e85af06599df7d
# Parent  6e8393b09d03f1c117f9626757008d7e4df6679a
search PATH from environment for programs, not EXEC_PATH

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2010-11-26  John W. Eaton  <jwe@octave.org>
+
+	* pkg/pkg.m: Append directories to EXEC_PATH instead of
+	prepending them.  Use pathsep instead of ":".
+
+	* miscellaneous/copyfile.m, miscellaneous/movefile.m,
+	miscellaneous/ls_command.m, plot/__print_parse_opts__.m:
+	Search PATH for programs, not EXEC_PATH.
+
+	* plot/print.m: Refer to PATH, not EXEC_PATH in error messages.
+	* plot/__print_parse_opts__.m: Likewise.
+
 2010-11-25  Kai Habel  <kai.habel@gmx.de>
 
 	* (plot/uimenu.m): Simplify code, add further check.
 	* (plot/uigetdir.m, plot/uigetfile.m, plot/uiputfile.m): Fix error messages.
 
 2010-11-25  John W. Eaton  <jwe@octave.org>
 
 	* time/datetick.m: Add missing semicolon.
diff --git a/scripts/miscellaneous/copyfile.m b/scripts/miscellaneous/copyfile.m
--- a/scripts/miscellaneous/copyfile.m
+++ b/scripts/miscellaneous/copyfile.m
@@ -35,17 +35,18 @@ function [status, msg, msgid] = copyfile
   max_cmd_line = 1024;
   status = true;
   msg = "";
   msgid = "";
 
   ## FIXME -- maybe use the same method as in ls to allow users control
   ## over the command that is executed.
 
-  if (ispc () && ! isunix () && isempty (file_in_path (EXEC_PATH, "cp.exe")))
+  if (ispc () && ! isunix ()
+      && isempty (file_in_path (getenv ("PATH"), "cp.exe")))
     ## Windows.
     cmd = "cmd /C xcopy /E";
     cmd_force_flag = "/Y";
   else
     cmd = "cp -r";
     cmd_force_flag = "-f";
   endif
 
@@ -88,31 +89,33 @@ function [status, msg, msgid] = copyfile
         p1 = sprintf ("\"%s\" ", f1{1});
         f1(1) = [];
         while (!isempty (f1) && (length(p1) + length(f1{1}) + l2 < 
                                  max_cmd_line))
           p1 = sprintf ("%s\"%s\" ", p1, f1{1});
           f1(1) = [];
         endwhile 
 
-        if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
+        if (ispc () && ! isunix ()
+            && ! isempty (file_in_path (getenv ("PATH"), "cp.exe")))
           p1 = strrep (p1, "\\", "/");
           p2 = strrep (p2, "\\", "/");
         endif
 
         ## Copy the files.
         [err, msg] = system (sprintf ("%s %s\"%s\"", cmd, p1, p2));
         if (err < 0)
           status = false;
           msgid = "copyfile";
           break;
         endif
       endwhile
     else
-      if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
+      if (ispc () && ! isunix ()
+          && ! isempty (file_in_path (getenv ("PATH"), "cp.exe")))
         p1 = strrep (p1, "\\", "/");
         p2 = strrep (p2, "\\", "/");
       endif
 
       ## Copy the files.
       [err, msg] = system (sprintf ("%s %s\"%s\"", cmd, p1, p2));
       if (err < 0)
         status = false;
diff --git a/scripts/miscellaneous/ls_command.m b/scripts/miscellaneous/ls_command.m
--- a/scripts/miscellaneous/ls_command.m
+++ b/scripts/miscellaneous/ls_command.m
@@ -27,17 +27,18 @@
 ## Author: jwe
 
 function old_cmd = ls_command (cmd)
 
   global __ls_command__;
 
   if (isempty (__ls_command__))
     ## FIXME -- ispc and isunix both return true for Cygwin.  Should they?
-    if (ispc () && ! isunix () && isempty (file_in_path (EXEC_PATH, "ls")))
+    if (ispc () && ! isunix ()
+        && isempty (file_in_path (getenv ("PATH"), "ls")))
       __ls_command__ = "cmd /C dir /D";
     else
       __ls_command__ = "ls -C";
     endif
   endif
 
   if (nargin == 0 || nargin == 1)
 
diff --git a/scripts/miscellaneous/movefile.m b/scripts/miscellaneous/movefile.m
--- a/scripts/miscellaneous/movefile.m
+++ b/scripts/miscellaneous/movefile.m
@@ -34,17 +34,18 @@ function [status, msg, msgid] = movefile
   max_cmd_line = 1024;
   status = true;
   msg = "";
   msgid = "";
 
   ## FIXME -- maybe use the same method as in ls to allow users control
   ## over the command that is executed.
 
-  if (ispc () && ! isunix () && isempty (file_in_path (EXEC_PATH, "mv.exe")))
+  if (ispc () && ! isunix ()
+      && isempty (file_in_path (getenv ("PATH"), "mv.exe")))
     ## Windows.
     cmd = "cmd /C move";
     cmd_force_flag = "/Y";
   else
     cmd = "mv";
     cmd_force_flag = "-f";
   endif
 
@@ -87,30 +88,32 @@ function [status, msg, msgid] = movefile
         p1 = sprintf ("\"%s\" ", f1{1});
         f1(1) = [];
         while (!isempty (f1) && (length(p1) + length(f1{1}) + l2 < 
                                  max_cmd_line))
           p1 = sprintf ("%s\"%s\" ", p1, f1{1});
           f1(1) = [];
         endwhile 
 
-        if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
+        if (ispc () && ! isunix ()
+            && ! isempty (file_in_path (getenv ("PATH"), "cp.exe")))
           p1 = strrep (p1, "\\", "/");
           p2 = strrep (p2, "\\", "/");
         endif
 
         ## Move the file(s).
         [err, msg] = system (sprintf ("%s %s \"%s\"", cmd, p1, p2));
         if (err < 0)
           status = false;
           msgid = "movefile";
         endif
       endwhile
     else
-      if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
+      if (ispc () && ! isunix ()
+          && ! isempty (file_in_path (getenv_path ("PATH"), "cp.exe")))
         p1 = strrep (p1, "\\", "/");
         p2 = strrep (p2, "\\", "/");
       endif
 
       ## Move the file(s).
       [err, msg] = system (sprintf ("%s %s \"%s\"", cmd, p1, p2));
       if (err < 0)
         status = false;
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -2290,23 +2290,23 @@ function load_packages_and_dependencies 
                                          global_install)
   idx = load_package_dirs (idx, [], handle_deps, installed_pkgs_lst);
   dirs = {};
   execpath = EXEC_PATH ();
   for i = idx;
     ndir = installed_pkgs_lst{i}.dir;
     dirs{end+1} = ndir;
     if (exist (fullfile (dirs{end}, "bin"), "dir"))
-      execpath = cstrcat (fullfile (dirs{end}, "bin"), ":", execpath);
+      execpath = cstrcat (execpath, pathsep (), fullfile (dirs{end}, "bin"));
     endif
     tmpdir = getarchdir (installed_pkgs_lst{i});
     if (exist (tmpdir, "dir"))
       dirs{end + 1} = tmpdir;
       if (exist (fullfile (dirs{end}, "bin"), "dir"))
-        execpath = cstrcat (fullfile (dirs{end}, "bin"), ":", execpath);
+        execpath = cstrcat (execpath, pathsep (), fullfile (dirs{end}, "bin"));
       endif
     endif
   endfor
 
   ## Load the packages.
   if (length (dirs) > 0)
     addpath (dirs{:});
   endif
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -115,17 +115,17 @@ function arg_st = __print_parse_opts__ (
         arg_st.printer = arg;
       elseif (strncmp (arg, "-EPSTOOL:", 9))
         arg_st.epstool_binary = arg{10:end};
       elseif (strncmp (arg, "-FIG2DEV:", 9))
         arg_st.fig2dev_binary = arg{10:end};
       elseif (strncmp (arg, "-PSTOEDIT:", 9))
         arg_st.pstoedit_binary = arg{10:end};
       elseif ((length (arg) > 2) && arg(1:2) == "-G")
-        arg_st.ghostscript.binary = file_in_path (EXEC_PATH, arg(3:end));
+        arg_st.ghostscript.binary = file_in_path (getenv ("PATH"), arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
           error ("print: Ghostscript binary ""%s"" could not be located",
                  arg(3:end))
         else
           arg_st.ghostscript_binary = __quote_path__ (arg_st.ghostscript_binary);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-F")
         idx = rindex (arg, ":");
@@ -256,17 +256,17 @@ function arg_st = __print_parse_opts__ (
       if (have_ghostscript)
         file_exists = ((numel (dir (arg_st.name)) == 1) 
                        && (! isdir (arg_st.name)));
         if (! file_exists)
           arg_st.append_to_file = false;
         endif
       else
         arg_st.append_to_file = false;
-        warning ("print.m: appended output requires ghostscript to be installed.")
+        warning ("print.m: appended output requires ghostscript to be installed")
       endif
     else
       warning ("print.m: appended output is not supported for device '%s'",
                arg_st.devopt)
       arg_st.append_to_file = false;
     endif
   endif
 
@@ -339,26 +339,26 @@ function arg_st = __print_parse_opts__ (
     arg_st.ghostscript.resolution = [];
   else
     arg_st.ghostscript.papersize = "";
     arg_st.ghostscript.pageoffset = [0, 0];
   endif
 
   if (warn_on_missing_binary)
     if (isempty (arg_st.ghostscript.binary))
-      warning ("print:missinggs", "print.m: Ghostscript binary is not available.")
+      warning ("print:missinggs", "print.m: Ghostscript binary is not available")
     endif
     if (isempty (arg_st.epstool_binary))
-      warning ("print:missinggs", "print.m: epstool binary is not available.")
+      warning ("print:missinggs", "print.m: epstool binary is not available")
     endif
     if (isempty (arg_st.fig2dev_binary))
-      warning ("print:missinggs", "print.m: fig2dev binary is not available.")
+      warning ("print:missinggs", "print.m: fig2dev binary is not available")
     endif
     if (isempty (arg_st.pstoedit_binary))
-      warning ("print:missinggs", "print.m: pstoedit binary is not available.")
+      warning ("print:missinggs", "print.m: pstoedit binary is not available")
     endif
     warn_on_missing_binary = false;
   endif
 
 endfunction
 
 %!test
 %! opts = __print_parse_opts__ ();
@@ -426,41 +426,42 @@ endfunction
 function gs = __ghostscript_binary__ ()
 
   persistent ghostscript_binary = ""
   persistent warn_on_no_ghostscript = true
   persistent warn_on_bad_gsc = true
 
   if (isempty (ghostscript_binary))
     GSC = getenv ("GSC");
-    if (exist (GSC, "file") || (! isempty (GSC) && file_in_path (EXEC_PATH, GSC)))
+    if (exist (GSC, "file")
+        || (! isempty (GSC) && file_in_path (getenv ("PATH"), GSC)))
       gs_binaries = {GSC};
     elseif (! isempty (GSC) && warn_on_bad_gsc)
       warning ("print:badgscenv",
-               "print.m: GSC environment variable not set properly.")
+               "print.m: GSC environment variable not set properly")
       warn_on_bad_gsc = false;
       gs_binaries = {};
     else
       gs_binaries = {};
     endif
     if (isunix ())
       ## Unix - Includes Mac OSX and Cygwin.
       gs_binaries = horzcat (gs_binaries, {"gs", "gs.exe"});
     else
       ## pc - Includes Win32 and mingw.
       gs_binaries = horzcat (gs_binaries, {"gs.exe", "gswin32c.exe"});
     endif
     n = 0;
     while (n < numel (gs_binaries) && isempty (ghostscript_binary))
       n = n + 1;
-      ghostscript_binary = file_in_path (EXEC_PATH, gs_binaries{n});
+      ghostscript_binary = file_in_path (getenv ("PATH"), gs_binaries{n});
     endwhile
     if (warn_on_no_ghostscript && isempty (ghostscript_binary))
       warning ("print:noghostscript",
-               "print.m: ghostscript not found in EXEC_PATH.")
+               "print.m: ghostscript not found in PATH")
       warn_on_no_ghostscript = false;
     endif
   endif
 
   gs = ghostscript_binary;
 
 endfunction
 
@@ -480,21 +481,21 @@ function bin = __find_binary__ (binary)
       binaries = strcat (binary, {"", ".exe"});
     else
       ## pc - Includes Win32 and mingw.
       binaries = strcat (binary, {".exe"});
     endif
     n = 0;
     while (n < numel (binaries) && isempty (data.(binary).bin))
       n = n + 1;
-      data.(binary).bin = file_in_path (EXEC_PATH, binaries{n});
+      data.(binary).bin = file_in_path (getenv ("PATH"), binaries{n});
     endwhile
     if (isempty (data.(binary).bin) && data.(binary).warn_on_absence)
       warning (sprintf ("print:no%s", binary),
-               "print.m: '%s' not found in EXEC_PATH", binary)
+               "print.m: '%s' not found in PATH", binary)
       data.(binary).warn_on_absence = false;
     endif
   endif
 
   bin = data.(binary).bin;
 
 endfunction
 
@@ -565,17 +566,17 @@ endfunction
 function value = convert2points (value, units)
     switch (units)
     case "inches"
       value = value * 72;
     case "centimeters"
       value = value * 72 / 25.4;
     case "normalized"
       error ("print:customnormalized",
-             "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined.")
+             "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined")
     endswitch
 endfunction
 
 function device_list = gs_device_list ();
   ## Graphics formats/languages, not priners.
   device_list = {"bmp16"; "bmp16m"; "bmp256"; "bmp32b"; "bmpgray"; ...
                  "epswrite"; "jpeg"; "jpegcymk"; "jpeggray"; "pbm"; ...
                  "pbmraw"; "pcx16"; "pcx24b"; "pcx256"; "pcx2up"; ...
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -257,17 +257,17 @@ function print (varargin)
 
   opts.pstoedit_cmd = @pstoedit;
   opts.fig2dev_cmd = @fig2dev;
   opts.latex_standalone = @latex_standalone;
   opts.lpr_cmd = @lpr;
   opts.epstool_cmd = @epstool;
 
   if (! isfigure (opts.figure))
-    error ("print: no figure to print.")
+    error ("print: no figure to print")
   endif
 
   orig_figure = get (0, "currentfigure");
   figure (opts.figure)
 
   if (opts.append_to_file)
     [~, ~, ext] = fileparts (opts.ghostscript.output);
     opts.ghostscript.prepend = strcat (tmpnam (), ext);
@@ -377,17 +377,17 @@ function print (varargin)
         set (props(n).h, props(n).name, props(n).value{1})
       endfor
     endif
 
     ## Unlink temporary files
     for n = 1:numel(opts.unlink)
       [status, output] = unlink (opts.unlink{n});
       if (status != 0)
-        warning ("print.m: %s, '%s'.", output, opts.unlink{n})
+        warning ("print.m: %s, '%s'", output, opts.unlink{n})
       endif
     endfor
   end_unwind_protect
 
   if (isfigure (orig_figure))
     figure (orig_figure);
   endif
 
@@ -435,17 +435,17 @@ function cmd = epstool (opts, filein, fi
     endif
   else
     pipeout = false;
     fileout = strcat ("'", strtrim (fileout), "'");
   endif
 
   if (! isempty (opts.preview) && opts.tight_flag)
     warning ("print:previewandtight",
-             "print.m: eps preview may not be combined with -tight.")
+             "print.m: eps preview may not be combined with -tight")
   endif
   if (! isempty (opts.preview) || opts.tight_flag)
     if (! isempty (opts.epstool_binary))
       if (opts.tight_flag)
         cmd = "--copy --bbox";
       elseif (! isempty (opts.preview))
         switch opts.preview
         case "tiff"
@@ -483,25 +483,25 @@ function cmd = epstool (opts, filein, fi
           cmd = sprintf ("%s & type %s", cmd, fileout);
         else
           cmd = sprintf ("%s ; cat %s", cmd, fileout);
         endif
       endif
       if (! isempty (cleanup))
         if (pipeout && dos_shell)
           error ("print:epstoolpipe",
-                 "print.m: cannot pipe output of 'epstool' for DOS shell.")
+                 "print.m: cannot pipe output of 'epstool' for DOS shell")
         elseif (pipeout)
           cmd = sprintf ("( %s %s )", cmd, cleanup);
         else
           cmd = sprintf ("%s %s", cmd, cleanup);
         endif
       endif
     elseif (isempty (opts.epstool_binary))
-      error ("print:noepstool", "print.m: 'epstool' not found in EXEC_PATH.")
+      error ("print:noepstool", "print.m: 'epstool' not found in PATH")
     endif
   else
     if (pipein && pipeout)
       if (dos_shell)
         cmd = sprintf ("copy con %s & type %s", filein, fileout);
       else
         cmd = " cat ";
       endif
@@ -538,17 +538,17 @@ function cmd = fig2dev (opts, devopt)
   if (! isempty (opts.fig2dev_binary))
     if (dos_shell)
       ## FIXME - is this the right thing to do for DOS?
       cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
     else
       cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
     endif
   elseif (isempty (opts.fig2dev_binary))
-    error ("print:nofig2dev", "print.m: 'fig2dev' not found in EXEC_PATH.")
+    error ("print:nofig2dev", "print.m: 'fig2dev' not found in PATH")
   endif
   if (opts.debug)
     fprintf ("fig2dev command: '%s'\n", cmd)
   endif
 endfunction
 
 function latex_standalone (latexfile)
   prepend = {"\\documentclass{minimal}";
@@ -592,17 +592,17 @@ function cmd = lpr (opts)
     cmd = opts.lpr_binary;
     if (! isempty (opts.lpr_options))
       cmd = sprintf ("%s %s", cmd, opts.lpr_options);
     endif
     if (! isempty (opts.printer))
       cmd = sprintf ("%s -P %s", cmd, opts.printer);
     endif
   elseif (isempty (opts.lpr_binary))
-    error ("print:nolpr", "print.m: 'lpr' not found in EXEC_PATH.")
+    error ("print:nolpr", "print.m: 'lpr' not found in PATH")
   endif
   if (opts.debug)
     fprintf ("lpr command: '%s'\n", cmd)
   endif
 endfunction
 
 function cmd = pstoedit (opts, devopt)
   if (nargin < 2)
@@ -612,16 +612,16 @@ function cmd = pstoedit (opts, devopt)
   if (! isempty (opts.pstoedit_binary))
     if (dos_shell)
       cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
     else
       ## FIXME - is this the right thing to do for DOS?
       cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
     endif
   elseif (isempty (opts.pstoedit_binary))
-    error ("print:nopstoedit", "print.m: 'pstoedit' not found in EXEC_PATH.")
+    error ("print:nopstoedit", "print.m: 'pstoedit' not found in PATH")
   endif
   if (opts.debug)
     fprintf ("pstoedit command: '%s'\n", cmd)
   endif
 endfunction
 
 
