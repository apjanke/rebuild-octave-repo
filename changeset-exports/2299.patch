# HG changeset patch
# User jwe
# Date 835501544 0
#      Sun Jun 23 03:45:44 1996 +0000
# Node ID f296bbc757a142d7f46cbb12d496bd4715060d72
# Parent  8fa2c46fca3e0174d8edbe6aaee767a8383120ae
[project @ 1996-06-23 03:45:44 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -120,16 +120,19 @@ int interactive = 0;
 int forced_interactive = 0;
 
 // Should we issue a prompt?
 int promptflag = 1;
 
 // The current line of input, from wherever.
 string current_input_line;
 
+// TRUE after a call to completion_matches().
+bool octave_completion_matches_called = false;
+
 // Return the octal number parsed from STRING, or -1 to indicate that
 // the string contained a bad number.
 
 static int
 read_octal (const string& s)
 {
   int result = 0;
   int digits = 0;
@@ -1169,17 +1172,22 @@ Without any arguments, toggle the curren
       print_usage ("echo");
       break;
     }
 
   return retval;
 }
 
 DEFUN (completion_matches, args, nargout,
-  "completion_matches (HINT): generate possible completions given HINT")
+  "completion_matches (HINT): generate possible completions given HINT\n\
+\n\
+This function is provided for the benefit of programs like Emacs which\n\
+might be controlling Octave and handling user input.  The current command\n\
+number is not incremented when this function is called.  This is a feature,\n\
+not a bug.")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       string hint_string = args(0).string_value ();
@@ -1231,16 +1239,18 @@ DEFUN (completion_matches, args, nargout
 	      // because it will be easier for Emacs if the names
 	      // appear in a single column.
 
 	      int len = list.length ();
 
 	      for (int i = 0; i < len; i++)
 		octave_stdout << list[i] << "\n";
 	    }
+
+	  octave_completion_matches_called = true;
 	}
     }
   else
     print_usage ("completion_matches");
 
   return retval;
 }
 
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -62,16 +62,19 @@ extern int interactive;
 extern int forced_interactive;
 
 // Should we issue a prompt?
 extern int promptflag;
 
 // A line of input.
 extern string current_input_line;
 
+// TRUE after a call to completion_matches().
+extern bool octave_completion_matches_called;
+
 char *gnu_readline (const char *s, bool force_readline = false);
 
 extern string Vps4;
 
 extern void symbols_of_input (void);
 
 #endif
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -230,18 +230,23 @@ main_loop (void)
 
       reset_parser ();
 
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
 	  global_command->eval (1);
+
 	  delete global_command;
-	  current_command_number++;
+
+	  if (octave_completion_matches_called)
+	    octave_completion_matches_called = false;	    
+	  else
+	    current_command_number++;
 	}
     }
   while (retval == 0);
 
   return retval;
 }
 
 DEFUN (source, args, ,
