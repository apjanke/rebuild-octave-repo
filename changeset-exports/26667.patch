# HG changeset patch
# User Rik <rik@octave.org>
# Date 1549160083 28800
#      Sat Feb 02 18:14:43 2019 -0800
# Node ID 3c4ba50b20244bc1d34eb5b100ffab84ad815c77
# Parent  5c46c13b43ad39d2f4d42425f9f2e773a9266b4f
comet.m: Use constant speed regardless of size of data input.

* comet.m: Change default time to display each data point to "5 / numel (z)"
so that it scales with input.  Update documentation to reflect this.
Use more accurate timing mechanism borrowed from movie.m.

diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -23,17 +23,17 @@
 ## @deftypefnx {} {} comet (@var{hax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by
 ## the input coordinate vectors (@var{x}, @var{y}).
 ##
 ## If @var{x} is not specified it defaults to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
-## @var{p} is 0.1 seconds.
+## @var{p} is @code{5 / numel (@var{y})}.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet3}
 ## @end deftypefn
 
 ## Author: Ben Abbott bpabbott@mac.com
 ## Created: 2008-09-21
@@ -42,21 +42,21 @@ function comet (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("comet", varargin{:});
 
   if (nargin == 0)
     print_usage ();
   elseif (nargin == 1)
     y = varargin{1};
     x = 1:numel (y);
-    p = 0.1;
+    p = 5 / numel (y);
   elseif (nargin == 2)
     x = varargin{1};
     y = varargin{2};
-    p = 0.1;
+    p = 5 / numel (y);
   elseif (nargin == 3)
     x = varargin{1};
     y = varargin{2};
     p = varargin{3};
   endif
 
   oldfig = [];
   if (! isempty (hax))
@@ -68,25 +68,30 @@ function comet (varargin)
     num = numel (y);
     dn = round (num/10);
 
     hl = plot (x(1), y(1), "color", "r", "marker", "none",
                x(1), y(1), "color", "g", "marker", "none",
                x(1), y(1), "color", "b", "marker", "o");
     axis (limits);  # set manual limits to speed up plotting
 
+    ## Initialize the timer
+    t = p;
+    timerid = tic ();
+
     for n = 2:(num+dn)
       m = n - dn;
       m = max ([m, 1]);
       k = min ([n, num]);
       set (hl(1), "xdata", x(1:m), "ydata", y(1:m));
       set (hl(2), "xdata", x(m:k), "ydata", y(m:k));
       set (hl(3), "xdata", x(k),   "ydata", y(k));
-      drawnow ();
-      pause (p);
+
+      pause (t - toc (timerid));
+      t += p;
     endfor
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
@@ -95,10 +100,10 @@ endfunction
 
 %!demo
 %! clf;
 %! title ("comet() animation");
 %! hold on;
 %! t = 0:.1:2*pi;
 %! x = cos (2*t) .* (cos (t).^2);
 %! y = sin (2*t) .* (sin (t).^2);
-%! comet (x, y, 0.05);
+%! comet (x, y, .05);
 %! hold off;
