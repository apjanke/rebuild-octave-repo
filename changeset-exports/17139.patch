# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1375380219 -3600
#      Thu Aug 01 19:03:39 2013 +0100
# Node ID dcac71776ae81cd16ada67647a037c84b973f75d
# Parent  96526baf7423bbd7c85fc20de0ff62d0d3c26d5a
Invert alpha channel after reading from GraphicsMagick (bug #32896).

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -218,20 +218,20 @@ read_images (std::vector<Magick::Image>&
   // a floating point image. In this case, the values need to be rescaled
   // for the range [0 1] (this is what Matlab has documented on the page
   // about image types but in some cases seems to be doing something else.
   // See bug #39249).
   // Finally, we must do the division ourselves (set a divisor) instead of
   // using quantumOperator for the cases where we will be returning floating
   // point and want things in the range [0 1]. This is the same reason why
   // the divisor is of type double.
-  const double divisor = (imvec[0].depth () == 32) ?
-                         std::numeric_limits<uint32_t>::max () :
-                         ((uint64_t (1) << QuantumDepth) - 1) / 
-                         ((uint64_t (1) << imvec[0].depth ()) - 1);
+  const bool   float_out = imvec[0].depth () == 32;
+  const double type_max  = float_out ? 1 : ((uint64_t (1) << QuantumDepth) - 1);
+  const double divisor   = float_out ? std::numeric_limits<uint32_t>::max () :
+                           type_max / ((uint64_t (1) << imvec[0].depth ()) - 1);
 
   // FIXME: this workaround should probably be fixed in GM by creating a
   //        new ImageType BilevelMatteType
   // Despite what GM documentation claims, opacity is not only on the types
   // with Matte on the name. It is possible that an image is completely
   // black (1 color), and have a second channel set for transparency (2nd
   // color). Its type will be bilevel since there is no BilevelMatte. The
   // only way to check for this seems to be by checking matte ().
@@ -317,17 +317,17 @@ read_images (std::vector<Magick::Image>&
               = imvec[frameidx(frame)].getConstPixels (col_start, row_start,
                                                        col_cache, row_cache);
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     img_fvec[idx] = pix->red / divisor;
-                    a_fvec[idx]   = pix->opacity / divisor;
+                    a_fvec[idx]   = abs ((pix->opacity / divisor) - type_max);
                     pix += row_shift;
                     idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
         break;
@@ -392,17 +392,17 @@ read_images (std::vector<Magick::Image>&
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     rbuf[idx]     = pix->red     / divisor;
                     gbuf[idx]     = pix->green   / divisor;
                     bbuf[idx]     = pix->blue    / divisor;
-                    a_fvec[a_idx] = pix->opacity / divisor;
+                    a_fvec[idx]   = abs ((pix->opacity / divisor) - type_max);
                     pix += row_shift;
                     idx++;
                     a_idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
@@ -475,17 +475,17 @@ read_images (std::vector<Magick::Image>&
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     cbuf[idx]     = pix->red     / divisor;
                     mbuf[idx]     = pix->green   / divisor;
                     ybuf[idx]     = pix->blue    / divisor;
                     kbuf[idx]     = pix->opacity / divisor;
-                    a_fvec[a_idx] = *apix / divisor;
+                    a_fvec[idx]   = abs ((*apix / divisor) - type_max);
                     pix += row_shift;
                     idx++;
                     a_idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
