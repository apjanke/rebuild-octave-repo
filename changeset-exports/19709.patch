# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1423863981 18000
#      Fri Feb 13 16:46:21 2015 -0500
# Node ID 5cfb3ccbf24a3dedc1876f1ad9966e414a0e15bb
# Parent  1170c849952b479bfbdafbcb2d1d00aef46cb2b6
style fixes for resource management

* __osmesa_print__.cc (close_fcn): New function.
(F__osmesa_print__): Manage FILE pointer with unwind_protect.
Allocate local buffer with OCTAVE_LOCAL_BUFFER.
* gl2ps-renderer.cc (gl2ps_print): Check for valid FILE pointer from
octave_popen.
* oct-parse.in.yy (parse_fcn_file): Check for valid FILE pointer from
fopen.

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -295,24 +295,29 @@ safe_pclose (FILE *f)
 #endif
 
 void
 gl2ps_print (const graphics_object& fig, const std::string& cmd,
              const std::string& term)
 {
 #ifdef HAVE_GL2PS_H
 
-  unwind_protect frame;
-
   FILE *fp = octave_popen (cmd.c_str (), "w");
 
-  frame.add_fcn (safe_pclose, fp);
+  if (fp)
+    {
+      unwind_protect frame;
+
+      frame.add_fcn (safe_pclose, fp);
 
-  glps_renderer rend (fp, term);
+      glps_renderer rend (fp, term);
 
-  rend.draw (fig, cmd);
+      rend.draw (fig, cmd);
+    }
+  else
+    error ("print: failed to open pipe for gl2ps renderer");
 
 #else
 
   error ("print: printing not available without gl2ps library");
 
 #endif
 }
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -22,25 +22,33 @@ This code is based on Brian Pauls' src/o
 from git://anongit.freedesktop.org/mesa/demos
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "oct-locbuf.h"
+#include "unwind-prot.h"
+
 #include "defun-dld.h"
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
-
 #include "gripes.h"
 
 #ifdef HAVE_OSMESA
 #include "GL/osmesa.h"
+
+static void
+close_fcn (FILE *f)
+{
+  gnulib::fclose (f);
+}
 #endif
 
 DEFUN_DLD(__osmesa_print__, args, ,
           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function}  __osmesa_print__ (@var{h}, @var{file}, @var{term})\n\
 @deftypefnx {Loadable Function} {@var{img}  =} __osmesa_print__ (@var{h})\n\
 Print figure @var{h} using OSMesa and gl2ps for vector formats.\n\
 \n\
@@ -115,22 +123,17 @@ The second method doesn't use gl2ps and 
   ctx = OSMesaCreateContextExt (OSMESA_RGBA, 16, 0, 0, NULL);
   if (! ctx)
     {
       error ("__osmesa_print__: OSMesaCreateContext failed!\n");
       return retval;
     }
 
   // Allocate the image buffer
-  buffer = malloc (Width * Height * 4 * sizeof (GLubyte));
-  if (! buffer)
-    {
-      error ("__osmesa_print__: Alloc image buffer failed!\n");
-      return retval;
-    }
+  OCTAVE_LOCAL_BUFFER (GLubyte, 4 * Width * Height, buffer);
 
   // Bind the buffer to the context and make it current
   if (! OSMesaMakeCurrent (ctx, buffer, GL_UNSIGNED_BYTE, Width, Height))
     {
       error ("__osmesa_print__: OSMesaMakeCurrent failed!\n");
       return retval;
     }
 
@@ -163,26 +166,29 @@ The second method doesn't use gl2ps and 
             {
               // create process and pipe gl2ps output to it
               std::string cmd = file.substr (pos);
               gl2ps_print (fobj, cmd, term);
             }
           else
             {
               // write gl2ps output directly to file
-              FILE *filep;
-              filep = fopen (file.c_str (), "w");
+              FILE *filep = fopen (file.c_str (), "w");
+
               if (filep)
                 {
+                  unwind_protect frame;
+
+                  frame.add_fcn (close_fcn, filep);
+
                   glps_renderer rend (filep, term);
                   rend.draw (fobj, "");
 
                   // Make sure buffered commands are finished!!!
                   glFinish ();
-                  fclose (filep);
                 }
               else
                 error ("__osmesa_print__: Couldn't create file \"%s\"", file.c_str ());
             }
         }
     }
   else
     {
@@ -217,17 +223,16 @@ The second method doesn't use gl2ps and 
       idx(2) = idx_vector (0, 3);
       retval = octave_value (img.permute (perm). index(idx));
     }
 
   // restore visibility if necessary
   if (v)
     fp.set_visible ("on");
 
-  free (buffer);
   OSMesaDestroyContext (ctx);
 
 #endif
   return retval;
 }
 
 /*
 %!testif HAVE_OSMESA
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3864,20 +3864,20 @@ parse_fcn_file (const std::string& full_
 
   command_history::ignore_entries ();
 
   FILE *ffile = 0;
 
   if (! full_file.empty ())
     ffile = gnulib::fopen (full_file.c_str (), "rb");
 
-  frame.add_fcn (safe_fclose, ffile);
-
   if (ffile)
     {
+      frame.add_fcn (safe_fclose, ffile);
+
       // octave_base_parser constructor sets this for us.
       frame.protect_var (LEXER);
 
       octave_parser parser (ffile);
 
       parser.curr_class_name = dispatch_type;
       parser.curr_package_name = package_name;
       parser.autoloading = autoload;
