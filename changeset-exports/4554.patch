# HG changeset patch
# User jwe
# Date 1067292109 0
#      Mon Oct 27 22:01:49 2003 +0000
# Node ID 78e34346f6fd0f45c9efc752ceaa015e0bd6abca
# Parent  c7eb767505e96c0e53c8bf4abbc0984c959cfc7f
[project @ 2003-10-27 22:01:49 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* ov.h (octave_value::ndims): New function.
+	* ov-base.h (octave_base_value::ndims): Likewise.
+	* ov-base-scalar.h (octave_base_scalar<T>::ndims): Likewise.
+	* ov-base-mat.cc (octave_base_matrix<MT>::ndims): New function.
+	(octave_base_matrix<MT>::length): Move here from ov-base-mat.h.
+	Make it work for N-d arrays.
+	* ov-base-mat.h (octave_base_matrix<MT>::ndims): Provide decl.
+	* data.cc (Fndims): New built-in function.
+
 2003-10-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/balance.cc, DLD-FUNCTIONS/qz.cc:
 	Use new F77 arg macros in declarations of external Fortran
 	subroutines and for calling them.
 
 	* ops.h (DEFNDUNOP_OP, DEFNDUNOP_FN): New arg e, to name value
 	extractor function prefix.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -683,16 +683,39 @@ odd definition is used for compatibility
 	retval = len;
     }
   else
     print_usage ("length");
 
   return retval;
 }
 
+DEFUN (ndims, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} ndims (@var{a})\n\
+Returns the number of dimensions of array @var{a}.\n\
+For any array, the result will always be larger than or equal to 2.\n\
+Trailing singleton dimensions are not counted.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      int n_dims = args(0).ndims ();
+
+      if (! error_state)
+	retval = n_dims;
+    }
+  else
+    print_usage ("ndims");
+
+  return retval;
+}
+
 DEFUN (size, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} size (@var{a}, @var{n})\n\
 Return the number rows and columns of @var{a}.\n\
 \n\
 With one input argument and one output argument, the result is returned\n\
 in a 2 element row vector.  If there are two output arguments, the\n\
 number of rows is assigned to the first, and the number of columns to\n\
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -182,16 +182,55 @@ octave_base_matrix<MT>::is_true (void) c
 
       retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
     }
 
   return retval;
 }
 
 template <class MT>
+int
+octave_base_matrix<MT>::length (void) const
+{
+  int retval = 0;
+
+  dim_vector dv = dims();
+      
+  for (int i = 0; i < dv.length (); i++)
+    if (dv(i) > retval)
+      retval = dv(i);
+
+  return retval;
+}
+
+template <class MT>
+int
+octave_base_matrix<MT>::ndims (void) const
+{
+  dim_vector dv = dims ();
+
+  int n_dims = dv.length ();
+     
+   // Remove trailing singleton dimensions
+   for (int i = n_dims; i > 2; i--)
+     {
+       if (dv(i-1) == 1)
+	 n_dims--;
+       else
+	 break;
+     }
+   
+   // The result is always >= 2
+   if (n_dims < 2)
+     n_dims = 2;
+
+   return n_dims;
+}
+
+template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
 {
   int nr = rows ();
   int nc = columns ();
 
   return (nr == 1 && nc == 1 || (nr == 0 || nc == 0));
 }
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -90,28 +90,22 @@ public:
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   dim_vector dims (void) const { return matrix.dims (); }
 
-  // XXX FIXME XXX 
-  int length (void) const
-    {
-      int r = rows ();
-      int c = columns ();
-
-      return (r == 0 || c == 0) ? 0 : ((r > c) ? r : c);
-    }
-
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
+  int length (void) const;
+  int ndims (void) const;
+
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -75,16 +75,18 @@ public:
 			 const octave_value& rhs);
 
   int rows (void) const { return 1; }
 
   int columns (void) const { return 1; }
 
   int length (void) const { return 1; }
 
+  int ndims (void) const { return 2; }
+
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   octave_value all (int = 0) const { return (scalar != 0.0); }
 
   octave_value any (int = 0) const { return (scalar != 0.0); }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -97,16 +97,18 @@ public:
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
   dim_vector dims (void) const { return dim_vector (rows (), columns ()); }
 
   int length (void) const { return -1; }
 
+  int ndims (void) const { return -1; }
+
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -323,16 +323,19 @@ public:
     { return rep->columns (); }
 
   virtual dim_vector dims (void) const
     { return rep->dims (); }
 
   virtual int length (void) const
     { return rep->length (); }
 
+  virtual int ndims (void) const
+    { return rep->ndims (); }
+
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
