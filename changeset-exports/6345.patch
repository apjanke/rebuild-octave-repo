# HG changeset patch
# User jwe
# Date 1172182974 0
#      Thu Feb 22 22:22:54 2007 +0000
# Node ID 9e058e5fa8a7c50eb3ac47befa9aa269b46b5bef
# Parent  8606828635726187f0dc77270221568bb9353a02
[project @ 2007-02-22 22:22:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2007-02-22  John W. Eaton  <jwe@octave.org>
+
+	* src/oct-stream.cc (octave_stream::do_gets): If no limit or not
+	at limit, read ahead one character at end of line for compatibility.
+	(octave_stream::gets, octave_stream::getl): Set max_len to -1 if
+	tc_max_len is not defined.
+	* file-io.cc (Ffgets, Ffgetl): If no limit specified, pass
+	undefined octave_value object as max_len in call to
+	octave_stream::gets.
+
 2007-02-21  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mexErrMsgIdAndTxt, mexWarnMsgIdAndTxt): Handle second
 	arg as format and accept variable number of arguments.
 	* mexproto.h: Fix decls.
 
 	* error.h, error.cc (vmessage, vusage, vwarning, verror,
 	vparse_error, vmessage_with_id, vusage_with_id, vwarning_with_id,
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -303,18 +303,17 @@ If there are no more characters to read,
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       octave_stream os = octave_stream_list::lookup (args(0), who);
 
       if (! error_state)
 	{
-	  octave_value len_arg = (nargin == 2)
-	    ? args(1) : octave_value (INT_MAX);
+	  octave_value len_arg = (nargin == 2) ? args(1) : octave_value ();
 
 	  bool err = false;
 
 	  std::string tmp = os.getl (len_arg, err, who);
 
 	  if (! err)
 	    {
 	      retval(1) = tmp.length ();
@@ -352,18 +351,17 @@ If there are no more characters to read,
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       octave_stream os = octave_stream_list::lookup (args(0), who);
 
       if (! error_state)
 	{
-	  octave_value len_arg = (nargin == 2)
-	    ? args(1) : octave_value (INT_MAX);
+	  octave_value len_arg = (nargin == 2) ? args(1) : octave_value ();
 
 	  bool err = false;
 
 	  std::string tmp = os.gets (len_arg, err, who);
 
 	  if (! err)
 	    {
 	      retval(1) = tmp.length ();
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -971,36 +971,46 @@ octave_base_stream::do_gets (octave_idx_
   if (isp)
     {
       std::istream& is = *isp;
 
       std::ostringstream buf;
 
       int c = 0;
       int char_count = 0;
-      int newline_stripped = 0;
-
-      while (is && (c = is.get ()) != EOF)
+
+      if (max_len != 0)
 	{
-	  char_count++;
-
-	  if (c == '\n')
+	  while (is && (c = is.get ()) != EOF)
 	    {
-	      if (! strip_newline)
+	      char_count++;
+
+	      if (c == '\n')
+		{
+		  if (! strip_newline)
+		    buf << static_cast<char> (c);
+
+		  break;
+		}
+	      else
 		buf << static_cast<char> (c);
-	      else
-		newline_stripped = 1;
-
-	      break;
+
+	      if (max_len > 0 && char_count == max_len)
+		break;
 	    }
-	  else
-	    buf << static_cast<char> (c);
-
-	  if (max_len > 0 && char_count == max_len)
-	    break;
+	}
+
+      if (! is.eof () && char_count > 0)
+	{
+	  // GAGME.  Matlab seems to check for EOF even if the last
+	  // character in a file is a newline character.  This is NOT
+	  // what the corresponding C-library functions do.
+	  int disgusting_compatibility_hack = is.get ();
+	  if (! is.eof ())
+	    is.putback (disgusting_compatibility_hack);
 	}
 
       if (is.good () || (is.eof () && char_count > 0))
 	retval = buf.str ();
       else
 	{
 	  err = true;
 
@@ -2796,24 +2806,30 @@ octave_stream::getl (const octave_value&
 		     const std::string& who)
 {
   std::string retval;
 
   err = false;
 
   int conv_err = 0;
 
-  int max_len = convert_to_valid_int (tc_max_len, conv_err);
-
-  if (conv_err || max_len < 0)
+  int max_len = -1;
+
+  if (tc_max_len.is_defined ())
     {
-      err = true;
-      ::error ("%s: invalid maximum length specified", who.c_str ());
+      max_len = convert_to_valid_int (tc_max_len, conv_err);
+
+      if (conv_err || max_len < 0)
+	{
+	  err = true;
+	  ::error ("%s: invalid maximum length specified", who.c_str ());
+	}
     }
-  else
+
+  if (! error_state)
     retval = getl (max_len, err, who);
 
   return retval;
 }
 
 std::string
 octave_stream::gets (octave_idx_type max_len, bool& err, const std::string& who)
 {
@@ -2830,24 +2846,30 @@ octave_stream::gets (const octave_value&
 		     const std::string& who)
 {
   std::string retval;
 
   err = false;
 
   int conv_err = 0;
 
-  int max_len = convert_to_valid_int (tc_max_len, conv_err);
-
-  if (conv_err || max_len < 0)
+  int max_len = -1;
+
+  if (tc_max_len.is_defined ())
     {
-      err = true;
-      ::error ("%s: invalid maximum length specified", who.c_str ());
+      max_len = convert_to_valid_int (tc_max_len, conv_err);
+
+      if (conv_err || max_len < 0)
+	{
+	  err = true;
+	  ::error ("%s: invalid maximum length specified", who.c_str ());
+	}
     }
-  else
+
+  if (! error_state)
     retval = gets (max_len, err, who);
 
   return retval;
 }
 
 int
 octave_stream::seek (long offset, int origin)
 {
