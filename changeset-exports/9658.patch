# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253391432 -7200
#      Sat Sep 19 22:17:12 2009 +0200
# Node ID 3429c956de6fc8202a5aad4af957a234dbd53b87
# Parent  3c1c3a38ec7b7c03ada9f4a3d6e64ceb8dd5245f
extend linspace & fix up liboctave rewrite

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -4080,23 +4080,23 @@ ComplexMatrix linspace (const ComplexCol
 
   NoAlias<ComplexMatrix> retval;
 
   retval.clear (m, n);
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, 0) = x1(i);
 
   // The last column is not needed while using delta.
-  Complex *delta = &retval(0, 1); 
+  Complex *delta = &retval(0, n-1); 
   for (octave_idx_type i = 0; i < m; i++)
     delta[i] = (x2(i) - x1(i)) / (n - 1.0);
 
   for (octave_idx_type j = 1; j < n-1; j++)
     for (octave_idx_type i = 0; i < m; i++)
-      retval(i, j) = retval(i, j-1) + delta[i];
+      retval(i, j) = x1(i) + static_cast<double> (j)*delta[i];
 
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, n-1) = x2(i);
 
   return retval;
 }
 
 MS_CMP_OPS (ComplexMatrix, Complex)
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -482,19 +482,19 @@ operator * (const ComplexRowVector& v, c
 ComplexRowVector
 linspace (const Complex& x1, const Complex& x2, octave_idx_type n)
 {
   if (n < 1) n = 1;
 
   NoAlias<ComplexRowVector> retval (n);
 
   Complex delta = (x2 - x1) / (n - 1.0);
-  Complex y = retval(0) = x1;
+  retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
-    retval(i) = y += delta;
+    retval(i) = x1 + static_cast<double> (i)*delta;
   retval(n-1) = x2;
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3409,23 +3409,23 @@ Matrix linspace (const ColumnVector& x1,
 
   NoAlias<Matrix> retval;
 
   retval.clear (m, n);
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, 0) = x1(i);
 
   // The last column is not needed while using delta.
-  double *delta = &retval(0, 1); 
+  double *delta = &retval(0, n-1); 
   for (octave_idx_type i = 0; i < m; i++)
     delta[i] = (x2(i) - x1(i)) / (n - 1);
 
   for (octave_idx_type j = 1; j < n-1; j++)
     for (octave_idx_type i = 0; i < m; i++)
-      retval(i, j) = retval(i, j-1) + delta[i];
+      retval(i, j) = x1(i) + j*delta[i];
 
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, n-1) = x2(i);
 
   return retval;
 }
 
 MS_CMP_OPS (Matrix, double)
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -311,19 +311,19 @@ operator >> (std::istream& is, RowVector
 RowVector
 linspace (double x1, double x2, octave_idx_type n)
 {
   if (n < 1) n = 1;
 
   NoAlias<RowVector> retval (n);
 
   double delta = (x2 - x1) / (n - 1);
-  double y = retval(0) = x1;
+  retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
-    retval(i) = y += delta;
+    retval(i) = x1 + i*delta;
   retval(n-1) = x2;
 
   return retval;
 }
 
 // row vector by column vector -> scalar
 
 double
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -4073,23 +4073,23 @@ FloatComplexMatrix linspace (const Float
 
   NoAlias<FloatComplexMatrix> retval;
 
   retval.clear (m, n);
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, 0) = x1(i);
 
   // The last column is not needed while using delta.
-  FloatComplex *delta = &retval(0, 1); 
+  FloatComplex *delta = &retval(0, n-1); 
   for (octave_idx_type i = 0; i < m; i++)
     delta[i] = (x2(i) - x1(i)) / (n - 1.0f);
 
   for (octave_idx_type j = 1; j < n-1; j++)
     for (octave_idx_type i = 0; i < m; i++)
-      retval(i, j) = retval(i, j-1) + delta[i];
+      retval(i, j) = x1(i) + static_cast<float> (j)*delta[i];
 
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, n-1) = x2(i);
 
   return retval;
 }
 
 MS_CMP_OPS (FloatComplexMatrix, FloatComplex)
diff --git a/liboctave/fCRowVector.cc b/liboctave/fCRowVector.cc
--- a/liboctave/fCRowVector.cc
+++ b/liboctave/fCRowVector.cc
@@ -482,19 +482,19 @@ operator * (const FloatComplexRowVector&
 FloatComplexRowVector
 linspace (const FloatComplex& x1, const FloatComplex& x2, octave_idx_type n)
 {
   if (n < 1) n = 1;
 
   NoAlias<FloatComplexRowVector> retval (n);
 
   FloatComplex delta = (x2 - x1) / (n - 1.0f);
-  FloatComplex y = retval(0) = x1;
+  retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
-    retval(i) = y += delta;
+    retval(i) = x1 + static_cast<float> (i)*delta;
   retval(n-1) = x2;
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3408,23 +3408,23 @@ FloatMatrix linspace (const FloatColumnV
 
   NoAlias<FloatMatrix> retval;
 
   retval.clear (m, n);
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, 0) = x1(i);
 
   // The last column is not needed while using delta.
-  float *delta = &retval(0, 1); 
+  float *delta = &retval(0, n-1); 
   for (octave_idx_type i = 0; i < m; i++)
     delta[i] = (x2(i) - x1(i)) / (n - 1);
 
   for (octave_idx_type j = 1; j < n-1; j++)
     for (octave_idx_type i = 0; i < m; i++)
-      retval(i, j) = retval(i, j-1) + delta[i];
+      retval(i, j) = x1(i) + j*delta[i];
 
   for (octave_idx_type i = 0; i < m; i++)
     retval(i, n-1) = x2(i);
 
   return retval;
 }
 
 MS_CMP_OPS (FloatMatrix, float)
diff --git a/liboctave/fRowVector.cc b/liboctave/fRowVector.cc
--- a/liboctave/fRowVector.cc
+++ b/liboctave/fRowVector.cc
@@ -311,19 +311,19 @@ operator >> (std::istream& is, FloatRowV
 FloatRowVector
 linspace (float x1, float x2, octave_idx_type n)
 {
   if (n < 1) n = 1;
 
   NoAlias<FloatRowVector> retval (n);
 
   float delta = (x2 - x1) / (n - 1);
-  float y = retval(0) = x1;
+  retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
-    retval(i) = y += delta;
+    retval(i) = x1 + i*delta;
   retval(n-1) = x2;
 
   return retval;
 }
 
 // row vector by column vector -> scalar
 
 float
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,13 @@
 2009-09-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value_extract): New template function.
+	* data.cc (do_linspace): New static template function.
+	(Flinspace): Rewrite.
 
 2009-09-18  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (fltk_backend::redraw_figure):
 	Call __fltk_redraw__ after marking figure as modified.
 
 2009-09-18  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include <cfloat>
 
 #include <string>
 
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "str-vec.h"
 #include "quit.h"
+#include "mx-base.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "ov.h"
@@ -4377,27 +4378,73 @@ with @sc{matlab}.\n\
 
 %!assert (eye(3,'int8'), int8([1, 0, 0; 0, 1, 0; 0, 0, 1]));
 %!assert (eye(2, 3,'int8'), int8([1, 0, 0; 0, 1, 0]));
 
 %!error <Invalid call to eye.*> eye (1, 2, 3);
 
  */
 
+template <class MT>
+static octave_value 
+do_linspace (const octave_value& base, const octave_value& limit,
+             octave_idx_type n)
+{
+  typedef typename MT::column_vector_type CVT;
+  typedef typename MT::element_type T;
+
+  octave_value retval;
+
+  if (base.is_scalar_type ())
+    {
+      T bs = octave_value_extract<T> (base);
+      if (limit.is_scalar_type ())
+        {
+          T ls = octave_value_extract<T> (limit);
+          retval = linspace (bs, ls, n);
+        }
+      else
+        {
+          CVT lv = octave_value_extract<CVT> (limit);
+          CVT bv (lv.length (), bs);
+          retval = linspace (bv, lv, n);
+        }
+    }
+  else
+    {
+      CVT bv = octave_value_extract<CVT> (base);
+      if (limit.is_scalar_type ())
+        {
+          T ls = octave_value_extract<T> (limit);
+          CVT lv (bv.length (), ls);
+          retval = linspace (bv, lv, n);
+        }
+      else
+        {
+          CVT lv = octave_value_extract<CVT> (limit);
+          retval = linspace (bv, lv, n);
+        }
+    }
+
+  return retval;
+}
+
 DEFUN (linspace, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} linspace (@var{base}, @var{limit}, @var{n})\n\
 Return a row vector with @var{n} linearly spaced elements between\n\
 @var{base} and @var{limit}.  If the number of elements is greater than one,\n\
 then the @var{base} and @var{limit} are always included in\n\
 the range.  If @var{base} is greater than @var{limit}, the elements are\n\
 stored in decreasing order.  If the number of points is not specified, a\n\
 value of 100 is used.\n\
 \n\
-The @code{linspace} function always returns a row vector.\n\
+The @code{linspace} function always returns a row vector if both\n\
+@var{base} and @var{limit} are scalars. If one of them or both are column\n\
+vectors, @code{linspace} returns a matrix.\n\
 \n\
 For compatibility with @sc{matlab}, return the second argument if\n\
 fewer than two values are requested.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
@@ -4416,70 +4463,27 @@ fewer than two values are requested.\n\
   if (! error_state)
     {
       octave_value arg_1 = args(0);
       octave_value arg_2 = args(1);
 
       if (arg_1.is_single_type () || arg_2.is_single_type ())
 	{
 	  if (arg_1.is_complex_type () || arg_2.is_complex_type ())
-	    {
-	      FloatComplex x1 = arg_1.float_complex_value ();
-	      FloatComplex x2 = arg_2.float_complex_value ();
-
-	      if (! error_state)
-		{
-		  FloatComplexRowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval = rv;
-		}
-	    }
+            retval = do_linspace<FloatComplexMatrix> (arg_1, arg_2, npoints);
 	  else
-	    {
-	      float x1 = arg_1.float_value ();
-	      float x2 = arg_2.float_value ();
-
-	      if (! error_state)
-		{
-		  FloatRowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval = rv;
-		}
-	    }
+            retval = do_linspace<FloatMatrix> (arg_1, arg_2, npoints);
+	    
 	}
       else
 	{
 	  if (arg_1.is_complex_type () || arg_2.is_complex_type ())
-	    {
-	      Complex x1 = arg_1.complex_value ();
-	      Complex x2 = arg_2.complex_value ();
-
-	      if (! error_state)
-		{
-		  ComplexRowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval = rv;
-		}
-	    }
+            retval = do_linspace<ComplexMatrix> (arg_1, arg_2, npoints);
 	  else
-	    {
-	      double x1 = arg_1.double_value ();
-	      double x2 = arg_2.double_value ();
-
-	      if (! error_state)
-		{
-		  RowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval = rv;
-		}
-	    }
+            retval = do_linspace<Matrix> (arg_1, arg_2, npoints);
 	}
     }
   else
     error ("linspace: expecting third argument to be an integer");
 
   return retval;
 }
 
