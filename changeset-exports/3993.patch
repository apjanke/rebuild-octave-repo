# HG changeset patch
# User jwe
# Date 1026850737 0
#      Tue Jul 16 20:18:57 2002 +0000
# Node ID f23bc69132cc83fa0a4a35c360564272bd21cf7a
# Parent  53b4eab68976aa6553c9aa787248d482ee8af243
[project @ 2002-07-16 20:18:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,13 @@
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASRT.h (DASRT::set_ng, DASRT::get_ng): Delete
 	* DASRT.cc (DASRT::DASRT): Set ng here.
+	(DASRT::integrate): Don't forget to set nn.
 
 	* DAEFunc.h (DAEFunc): Jacobian function now follows format of DASSL.
 	* DASSL.cc (ddassl_j): Make it work.
 	* DASPK.cc (ddaspk_j): Likewise.
 
 	* DAE.cc: Delete.
 
 	* DAERT.h, DAERTFunc.h, DASRT.h, DASRT.cc: New files for DAE
diff --git a/liboctave/DAERTFunc.h b/liboctave/DAERTFunc.h
--- a/liboctave/DAERTFunc.h
+++ b/liboctave/DAERTFunc.h
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_DAERTFunc_h)
 #define octave_DAERTFunc_h 1
 
 #include "dMatrix.h"
 
 class
-DAERTFunc : DAEFunc
+DAERTFunc : public DAEFunc
 {
 public:
 
   typedef ColumnVector (*DAERTConstrFunc) (const ColumnVector& x, double t);
 
   DAERTFunc (void)
     : DAEFunc (), constr (0) { }
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -68,16 +68,17 @@ int F77_FUNC (ddasrt, DASRT) (dasrt_fcn_
 			      double*, double*, int&, double*,
 			      const int&, int*, const int&, double*,
 			      int*, dasrt_jac_ptr, dasrt_constr_ptr,
 			      const int&, int*);
 
 static DAEFunc::DAERHSFunc user_fsub;
 static DAEFunc::DAEJacFunc user_jsub;
 static DAERTFunc::DAERTConstrFunc user_csub;
+
 static int nn;
 
 static int
 ddasrt_f (const double& t, const double *state, const double *deriv,
 	  double *delta, int& ires, double *rpar, int *ipar)
 {
   ColumnVector tmp_state (nn);
   for (int i = 0; i < nn; i++)
@@ -298,16 +299,18 @@ DASRT::integrate (double tout)
       for (int i = 0; i < n; i++)
 	{
 	  y(i,0) = x(i);
 	  ydot(i,0) = xdot(i);
 	}
 
       integration_error = false;
 
+      nn = n;
+
       user_fsub = DAEFunc::function ();
       user_jsub = DAEFunc::jacobian_function ();
       user_csub = DAERTFunc::constraint_function ();
 
       if (user_jsub)
 	info(4) = 1;
       else
 	info(4) = 0;
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -46,16 +46,17 @@ int F77_FUNC (ddassl, DDASSL) (dassl_fcn
 			       double*, double*, double&, const int*,
 			       const double&, const double&, int&,
 			       double*, const int&, int*, const int&,
 			       const double*, const int*,
 			       dassl_jac_ptr);
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
+
 static int nn;
 
 DASSL::DASSL (void) : DAE ()
 {
   stop_time_set = 0;
   stop_time = 0.0;
 
   liw = 0;
@@ -210,16 +211,17 @@ DASSL::do_integrate (double tout)
     info.elem (4) = 1;
   else
     info.elem (4) = 0;
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
+
   user_fun = DAEFunc::fun;
   user_jac = DAEFunc::jac;
 
   if (! sanity_checked)
     {
       int ires = 0;
 
       ColumnVector res = (*user_fun) (x, xdot, t, ires);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,13 @@
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/dasrt.cc (Fdasrt): No need to find ng here.
+	(dasrt_user_j): New function.
+	(Fdasrt): Handle Jacobian function.
 
 	* DLD-FUNCTIONS/dassl.cc (dassl_user_jacobian): New function.
 	(Fdassl): Handle Jacobian function.
 
 	* DLD-FUNCTIONS/dasrt.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2002-07-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -49,42 +49,42 @@ static octave_function *dasrt_cf;
 
 static DASRT_options dasrt_opts;
 
 // Is this a recursive call?
 static int call_depth = 0;
 
 static ColumnVector
 dasrt_user_f (const ColumnVector& x, const ColumnVector& xprime,
-	       double t, int& ires)
+	      double t, int& ires)
 {
   ColumnVector retval;
 
   octave_value_list args;
 
   int n = x.length ();
 
+  args(2) = t;
+
   if (n > 1)
     {
+      args(1) = xprime;
       args(0) = x;
-      args(1) = xprime;
     }
   else if (n == 1)
     {
+      args(1) = xprime(0);
       args(0) = x(0);
-      args(1) = xprime(0);
     }
   else
     {
+      args(1) = Matrix ();
       args(0) = Matrix ();
-      args(1) = Matrix ();
     }
 
-  args(2) = t;
-
   if (dasrt_f)
     {
       octave_value_list tmp = dasrt_f->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
 	  return retval;
@@ -141,86 +141,80 @@ dasrt_user_cf (const ColumnVector& x, do
 	}
       else
 	gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
 
-static ColumnVector
-dasrt_dumb_cf (const ColumnVector& x, double t)
-{
-  ColumnVector retval (1, 1.0);
-  return retval;
-}
-
-#if 0
 static Matrix
-dasrt_user_mf (double t, const ColumnVector& x, const ColumnVector& xprime,
-		const double& cj, octave_function *mf)
+dasrt_user_j (const ColumnVector& x, const ColumnVector& xdot,
+	      double t, double cj)
 {
   Matrix retval;
 
-  if (mf)
-    {
-      octave_value_list args;
+  int nstates = x.capacity ();
+
+  assert (nstates == xdot.capacity ());
 
-      int n = x.length ();
+  octave_value_list args;
+
+  args(3) = cj;
+  args(2) = t;
 
-      if (n > 1)
-        {
-	  args(0) = x;
-	  args(1) = xprime;
-	  args(3) = cj;
-        }
-      else if (n == 1)
-        {
-	  args(0) = x(0);
-	  args(1) = xprime(0);
-	  args(3) = cj;
-        }
-      else
-        {
-	  args(0) = Matrix ();
-	  args(1) = Matrix ();
-	  args(3) = Matrix ();
-        }
+  if (nstates > 1)
+    {
+      Matrix m1 (nstates, 1);
+      Matrix m2 (nstates, 1);
+      for (int i = 0; i < nstates; i++)
+	{
+	  m1 (i, 0) = x (i);
+	  m2 (i, 0) = xdot (i);
+	}
+      octave_value state (m1);
+      octave_value deriv (m2);
+      args(1) = deriv;
+      args(0) = state;
+    }
+  else
+    {
+      double d1 = x (0);
+      double d2 = xdot (0);
+      octave_value state (d1);
+      octave_value deriv (d2);
+      args(1) = deriv;
+      args(0) = state;
+    }
 
-      args(2) = t;
-
-      octave_value_list tmp = mf->do_multi_index_op (1, args);
+  if (dasrt_j)
+    {
+      octave_value_list tmp = dasrt_j->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
 	  return retval;
 	}
 
-      if (tmp.length () > 0 && tmp(0).is_defined ())
+      int tlen = tmp.length ();
+      if (tlen > 0 && tmp(0).is_defined ())
 	{
 	  retval = tmp(0).matrix_value ();
 
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dasrt");
 	}
       else
 	gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
 
-static Matrix
-dasrt_user_j (const ColumnVector& x, const ColumnVector& xprime, double t)
-{
-  return dasrt_user_mf (t, x, xprime, dasrt_j);
-}
-#endif
-
 #define DASRT_ABORT \
   do \
     { \
       unwind_protect::run_frame ("Fdasrt"); \
       return retval; \
     } \
   while (0)
 
@@ -441,20 +435,18 @@ parameters for @code{dasrt}.\n\
 
       if (error_state)
 	DASRT_ABORT2
 	  ("expecting critical time vector as argument %d", argp);
 
       crit_times_set = true;
     }
 
-#if 0
   if (dasrt_j)
     func.set_jacobian_function (dasrt_user_j);
-#endif
 
   DASRT_result output;
 
   DASRT dae = DASRT (state, stateprime, tzero, func);
 
   dae.copy (dasrt_opts);
 
   if (error_state)
