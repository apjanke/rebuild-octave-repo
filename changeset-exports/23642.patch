# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497848112 25200
#      Sun Jun 18 21:55:12 2017 -0700
# Node ID 18ae8d3c745b1b607c386896b05067bee343d21a
# Parent  be69ea3de7a3a0e0ea70e949b83b7ca37af52281
Use log1p, log1pf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for log1p, log1pf.

* lo-specfun.cc: Delegate to std::log1p or std::log1pf.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2404,17 +2404,16 @@ dnl These checks define/undefine HAVE_FU
 dnl Code tests HAVE_FUNCNAME and either uses function or provides workaround.
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
 AC_CHECK_FUNCS([ctermid dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
-AC_CHECK_FUNCS([log1p log1pf])
 AC_CHECK_FUNCS([realpath resolvepath roundl])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr tgammaf toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([sqrt sqrtf], [],
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -418,41 +418,17 @@ namespace octave
           retval = FloatComplex (u*v + u + v, (u+1) * sin (im));
         }
       else
         retval = std::exp (x) - FloatComplex (1);
 
       return retval;
     }
 
-    double
-    log1p (double x)
-    {
-#if defined (HAVE_LOG1P)
-      return ::log1p (x);
-#else
-      double retval;
-
-      double ax = fabs (x);
-
-      if (ax < 0.2)
-        {
-          // approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
-          double u = x / (2 + x), t = 1, s = 0;
-          for (int i = 2; i < 12; i += 2)
-            s += (t *= u*u) / (i+1);
-
-          retval = 2 * (s + 1) * u;
-        }
-      else
-        retval = std::log (1 + x);
-
-      return retval;
-#endif
-    }
+    double log1p (double x) { return std::log1p (x); }
 
     Complex
     log1p (const Complex& x)
     {
       Complex retval;
 
       double r = x.real (), i = x.imag ();
 
@@ -465,41 +441,17 @@ namespace octave
       else
         retval = std::log (Complex (1) + x);
 
       return retval;
     }
 
     double cbrt (double x) { return std::cbrt (x); }
 
-    float
-    log1p (float x)
-    {
-#if defined (HAVE_LOG1PF)
-      return log1pf (x);
-#else
-      float retval;
-
-      float ax = fabs (x);
-
-      if (ax < 0.2)
-        {
-          // approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
-          float u = x / (2 + x), t = 1.0f, s = 0;
-          for (int i = 2; i < 12; i += 2)
-            s += (t *= u*u) / (i+1);
-
-          retval = 2 * (s + 1.0f) * u;
-        }
-      else
-        retval = std::log (1.0f + x);
-
-      return retval;
-#endif
-    }
+    float log1p (float x) { return std::log1pf (x); }
 
     FloatComplex
     log1p (const FloatComplex& x)
     {
       FloatComplex retval;
 
       float r = x.real (), i = x.imag ();
 
