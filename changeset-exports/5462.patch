# HG changeset patch
# User jwe
# Date 1127414183 0
#      Thu Sep 22 18:36:23 2005 +0000
# Node ID 74804828df1a2013f88da7d528de166056e08f3e
# Parent  8d8fc8eff9e61a27c853d6bdcd1b0e0b83021b9f
[project @ 2005-09-22 18:36:22 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2005-09-22  Bill Denney  <denney@seas.upenn.edu>
+
+	* strings/deblank.m: Handle cell arrays.
+	* strings/split.m: New argument, N, to limit number of splits.
+
+2005-09-22  Miroslaw Kwasniak  <mirek@zind.ikem.pwr.wroc.pl>
+
+	* plot/__pltopt1__.m: Handle plot colors "w" and "k" separately.
+
 2005-09-20  "Orestes Mas"  <orestes@tsc.upc.edu>
 
 	* control/base/rlocus.m: Doc fix.
 
 2005-09-20  John W. Eaton  <jwe@octave.org>
 
 	* general/isvector.m: Improve compatibility.
 
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -119,32 +119,35 @@ function fmt = __pltopt1__ (caller, opt)
       if (set_color)
         set_points = 1;
         symbol = char;
         set_symbol = 1;
       else
         color = char;
         set_color = 1;
       endif
+    elseif (strcmp (char, "k"))
+      set_color = 1;
+      color = "-1";
     elseif (strcmp (char, "r"))
       set_color = 1;
       color = "1";
     elseif (strcmp (char, "g"))
       set_color = 1;
       color = "2";
     elseif (strcmp (char, "b"))
       set_color = 1;
       color = "3";
     elseif (strcmp (char, "m"))
       set_color = 1;
       color = "4";
     elseif (strcmp (char, "c"))
       set_color = 1;
       color = "5";
-    elseif (strcmp (char, "w") || strcmp (char, "k"))
+    elseif (strcmp (char, "w"))
       set_color = 1;
       color = "6";
     elseif (strcmp (char, "*"))
       set_points = 1;
       set_symbol = 1;
       symbol = "6";
     elseif (strcmp (char, "+"))
       set_points = 1;
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -99,19 +99,19 @@
 ## 6.
 ##
 ## @item @var{nm}
 ## If @var{nm} is a two digit integer and @var{m} is an integer in the
 ## range 1 to 6, @var{m} is interpreted as the point style.  This is only
 ## valid in combination with the @code{@@} or @code{-@@} specifiers.
 ##
 ## @item @var{c}
-## If @var{c} is one of @code{"r"}, @code{"g"}, @code{"b"}, @code{"m"},
-## @code{"c"}, or @code{"w"}, it is interpreted as the plot color (red,
-## green, blue, magenta, cyan, or white).
+## If @var{c} is one of @code{"k"}, @code{"r"}, @code{"g"}, @code{"b"},
+## @code{"m"}, @code{"c"}, or @code{"w"}, it is interpreted as the plot
+## color (black, red, green, blue, magenta, cyan, or white).
 ##
 ## @item ";title;"
 ## Here @code{"title"} is the label for the key.
 ##
 ## @item +
 ## @itemx *
 ## @itemx o
 ## @itemx x
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -14,36 +14,43 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} deblank (@var{s})
-## Removes the trailing blanks and nulls from the string @var{s}.
-## If @var{s} is a matrix, @var{deblank} trims each row to the 
-## length of longest string.
+## Remove trailing blanks and nulls from @var{s}.  If @var{s}
+## is a matrix, @var{deblank} trims each row to the length of longest
+## string.  If @var{s} is a cell array, operate recursively on each
+## element of the cell array.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
-function t = deblank (s)
+function s = deblank (s)
 
   if (nargin != 1)
     usage ("deblank (s)");
   endif
 
   if (ischar (s))
 
     k = find (! isspace (s) & s != "\0");
     if (isempty (s) || isempty (k))
-      t = "";
+      s = "";
     else
-      t = s(:,1:ceil (max (k) / rows (s)));
+      s = s(:,1:ceil (max (k) / rows (s)));
     endif
 
+  elseif (iscell(s))
+
+    for i = 1:numel (s)
+      s{i} = deblank (s{i});
+    endfor
+
   else
     error ("deblank: expecting string argument");
   endif
 
 endfunction
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -13,35 +13,48 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} split (@var{s}, @var{t})
+## @deftypefn {Function File} {} split (@var{s}, @var{t}, @var{n})
 ## Divides the string @var{s} into pieces separated by @var{t}, returning
 ## the result in a string array (padded with blanks to form a valid
-## matrix).  For example,
+## matrix).  If the optional input @var{n} is supplied, split @var{s}
+## into at most @var{n} different pieces.
+##
+## For example,
 ##
 ## @example
 ## split ("Test string", "t")
 ##      @result{} "Tes "
 ##         " s  "
 ##         "ring"
 ## @end example
+##
+## @example
+## split ("Test string", "t", 2)
+##      @result{} "Tes    "
+##         " string"
+## @end example
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
-function m = split (s, t)
+function m = split (s, t, n)
 
-  if (nargin == 2)
+  if (nargin == 2 || nargin == 3)
+    if (nargin == 2)
+      n = length (s);
+    endif
+
     if (ischar (s) && ischar (t))
 
       l_s = length (s);
       l_t = length (t);
 
       if (l_s == 0)
 	m = "";
 	return;
@@ -55,16 +68,18 @@ function m = split (s, t)
       if (min (size (s)) != 1 || min (size (t)) != 1)
 	error("split: multi-line strings are not supported");
       endif
 
       ind = findstr (s, t, 0);
       if (length (ind) == 0)
 	m = s;
 	return;
+      elseif (n - 1 < length(ind))
+	ind = ind(1:n-1)
       endif
       ind2 = [1, ind+l_t];
       ind  = [ind, l_s+1];
 
       ind_diff = ind-ind2;
 
       ## Create a matrix of the correct size that's filled with spaces.
       m_rows = length (ind);
@@ -75,12 +90,12 @@ function m = split (s, t)
       for i = 1:length (ind)
 	tmp = ind2(i):(ind(i)-1);
 	m(i,1:length(tmp)) = s(tmp);
       endfor
     else
       error ("split: both s and t must be strings");
     endif
   else
-    usage ("split (s, t)");
+    usage ("split (s, t, n)");
   endif
 
 endfunction
