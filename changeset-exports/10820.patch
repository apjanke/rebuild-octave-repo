# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1280144483 14400
#      Mon Jul 26 07:41:23 2010 -0400
# Node ID c44c786f87ba964972eb04f0671244ce9489d981
# Parent  f3c984d45dcb1cad2a77f38f3da44f07e16ba1a9
interp1.m: When absent set X equal to the inices of Y.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,11 @@
 2010-07-26  Ben Abbott <bpabbott@mac.com>
 
+	* general/interp1.m: When absent set X equal to the inices of Y.
 	* general/interpn.m: Convert interpolation vectors of non-equal
 	length to nd-arrays.
 
 2010-07-26  Soren Hauberg <hauberg@gmail.com>
 
 	* image/image.m: Replace parenthesis with curly bracket in Texinfo.
 
 2010-07-25  Rik <octave@nomad.inbox5.com>
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -13,35 +13,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{yi} =} interp1 (@var{x}, @var{y}, @var{xi})
+## @deftypefn {Function File} {@var{yi} =} interp1 (@var{x}, @var{y}, @var{xi})
+## @deftypefnx {Function File} {@var{yi} =} interp1 (@var{y}, @var{xi})
 ## @deftypefnx {Function File} {@var{yi} =} interp1 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{yi} =} interp1 (@dots{}, @var{extrap})
 ## @deftypefnx {Function File} {@var{pp} =} interp1 (@dots{}, 'pp')
 ##
 ## One-dimensional interpolation.  Interpolate @var{y}, defined at the
 ## points @var{x}, at the points @var{xi}.  The sample points @var{x} 
-## must be monotonic.  If @var{y} is an array, treat the columns
+## must be monotonic. If not specified, @var{x} is taken to be the
+## indices of @var{y}. If @var{y} is an array, treat the columns
 ## of @var{y} separately.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors
 ## @item 'pchip'
-## Piece-wise cubic Hermite interpolating polynomial
+## Piece-wise cubic hermite interpolating polynomial
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve
 ## @end table
 ##
 ## Appending '*' to the start of the above method forces @code{interp1}
@@ -94,17 +96,17 @@
 ## 2000-07-17 Paul Kienzle
 ##    added '*' methods and matrix y
 ##    check for proper table lengths
 ## 2002-01-23 Paul Kienzle
 ##    fixed extrapolation
 
 function yi = interp1 (x, y, varargin)
 
-  if (nargin < 3 || nargin > 6)
+  if (nargin < 2 || nargin > 6)
     print_usage ();
   endif
 
   method = "linear";
   extrap = NA;
   xi = [];
   pp = false;
   firstnumeric = true;
@@ -127,16 +129,22 @@ function yi = interp1 (x, y, varargin)
           firstnumeric = false;
         else
           extrap = arg;
         endif
       endif
     endfor
   endif
 
+  if (isempty (xi) && firstnumeric && ! pp)
+    xi = y;
+    y = x;
+    x = 1:numel(y);
+  endif
+
   ## reshape matrices for convenience
   x = x(:);
   nx = rows (x);
   szx = size (xi);
   if (isvector (y))
     y = y(:);
   elseif (isvector (xi))
     szx = length (xi);    
@@ -596,8 +604,9 @@ endfunction
 %!assert (interp1(1:2:8,1:2:8,1.4,"*cubic"),1.4);
 %!error interp1(1:2,1:2,1, "*spline");
 %!assert (interp1(1:2:6,1:2:6,1.4,"*spline"),1.4);
 
 %!assert (interp1([3,2,1],[3,2,2],2.5),2.5)
 
 %!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap"), [-2,0.5,4,3,1.5])
 %!assert (interp1 ([4,4,3,2,0],[0,1,4,2,1],[1.5,4,4.5], "linear"), [0,1,NA])
+%!assert (interp1 (0:4, 2.5), 1.5)
