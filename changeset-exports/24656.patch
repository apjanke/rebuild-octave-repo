# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1517359133 -3600
#      Wed Jan 31 01:38:53 2018 +0100
# Node ID cd79f32fba85e54aa4b6e6f87a0f94f7edbb322b
# Parent  3ceee1910e1a93533cbe437c8eac40d145cc5863
Fix errors in changeset f0de21a6a426 (bug #50463).

diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -177,17 +177,20 @@ namespace octave
 
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = nullptr);
 
     // FIXME: this is possibly redundant because failure to open a library will
     // normally throw an exception, avoiding the construction of an invalid
     // library.  Leave it here for possible future use.
 
-    bool is_open (void) const { return (library != nullptr); }
+    bool is_open (void) const
+    {
+      return (search_all_loaded || library != nullptr);
+    }
 
   private:
 
     void *library;
 
     bool search_all_loaded;
   };
 
@@ -239,17 +242,17 @@ namespace octave
   }
 
   void *
   octave_dlopen_shlib::search (const std::string& name,
                                dynamic_library::name_mangler mangler)
   {
     void *function = nullptr;
 
-    if (! search_all_loaded && ! is_open ())
+    if (! is_open ())
       (*current_liboctave_error_handler)
         ("shared library %s is not open", file.c_str ());
 
     std::string sym_name = name;
 
     if (mangler)
       sym_name = mangler (name);
 
@@ -276,17 +279,17 @@ namespace octave
 
     octave_shl_load_shlib& operator = (const octave_shl_load_shlib&) = delete;
 
     ~octave_shl_load_shlib (void);
 
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = 0);
 
-    bool is_open (void) const { return (library != 0); }
+    bool is_open (void) const { return (search_all_loaded || library != 0); }
 
   private:
 
     shl_t library;
 
     bool search_all_loaded;
   };
 
@@ -317,17 +320,17 @@ namespace octave
   }
 
   void *
   octave_shl_load_shlib::search (const std::string& name,
                                  dynamic_library::name_mangler mangler)
   {
     void *function = nullptr;
 
-    if (! search_all_loaded && ! is_open ())
+    if (! is_open ())
       (*current_liboctave_error_handler)
         ("shared library %s is not open", file.c_str ());
 
     std::string sym_name = name;
 
     if (mangler)
       sym_name = mangler (name);
 
@@ -358,17 +361,17 @@ namespace octave
 
     ~octave_w32_shlib (void);
 
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = 0);
 
     void * global_search (const std::string& sym_name);
 
-    bool is_open (void) const { return (handle != 0); }
+    bool is_open (void) const { return (search_all_loaded || handle != 0); }
 
   private:
 
     HINSTANCE handle;
 
     bool search_all_loaded;
   };
 
@@ -479,17 +482,17 @@ namespace octave
   }
 
   void *
   octave_w32_shlib::search (const std::string& name,
                             dynamic_library::name_mangler mangler)
   {
     void *function = nullptr;
 
-    if (! search_all_loaded && ! is_open ())
+    if (! is_open ())
       (*current_liboctave_error_handler)
         ("shared library %s is not open", file.c_str ());
 
     std::string sym_name = name;
 
     if (mangler)
       sym_name = mangler (name);
 
@@ -521,30 +524,30 @@ namespace octave
 
     void open (const std::string& f);
 
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = nullptr);
 
     void close (void);
 
-    bool is_open (void) const {return (handle != 0); }
+    bool is_open (void) const { return (search_all_loaded || handle != 0); }
 
   private:
 
     NSObjectFileImage img;
     NSModule handle;
 
     bool search_all_loaded;
   };
 
   octave_dyld_shlib::octave_dyld_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), handle (0)
   {
-    if (f.empty())
+    if (f.empty ())
       (*current_liboctave_error_handler)
         ("global search is not implemented for DYLD_API");
 
     int returnCode = NSCreateObjectFileImageFromFile (file.c_str (), &img);
 
     if (NSObjectFileImageSuccess != returnCode)
       {
         (*current_liboctave_error_handler)
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -118,30 +118,31 @@ namespace octave
 
     dynamic_library (void) : rep (&nil_rep) { rep->count++; }
 
     dynamic_library (const std::string& f, bool fake = true)
       : rep (dynlib_rep::get_instance (f, fake)) { }
 
     ~dynamic_library (void)
     {
-      rep->count--;
+      if (--rep->count == 0 && ! file_name ().empty ())
+        delete rep;
     }
 
     dynamic_library (const dynamic_library& sl)
       : rep (sl.rep)
     {
       rep->count++;
     }
 
     dynamic_library& operator = (const dynamic_library& sl)
     {
       if (rep != sl.rep)
         {
-          if (--rep->count == 0)
+          if (--rep->count == 0 && ! file_name ().empty ())
             delete rep;
 
           rep = sl.rep;
           rep->count++;
         }
 
       return *this;
     }
