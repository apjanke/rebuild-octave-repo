# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254754993 -7200
#      Mon Oct 05 17:03:13 2009 +0200
# Node ID 9fba7e1da785baa3ec1eea0b14668d5184308736
# Parent  50db3c5175b567e783d580374962a91be6d4fdc8
correct algorithm for perm matrix det (sign)

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* PermMatrix.cc (PermMatrix::determinant): Implement a (hopefully)
+	working algorithm.
+
 2009-10-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (operator ==): Include fast case.
 	* base-lu.cc (base_lu::packed, base_lu::unpack): New methods.
 	(base_lu::L, base_lu::U, base_lu::Y, base_lu::getp): Distinguish
 	packed vs. unpacked case.
 	* base-lu.h: Update decls.
 	(base_lu::l_fact): New member field.
diff --git a/liboctave/PermMatrix.cc b/liboctave/PermMatrix.cc
--- a/liboctave/PermMatrix.cc
+++ b/liboctave/PermMatrix.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "PermMatrix.h"
 #include "idx-vector.h"
 #include "error.h"
 #include "Array-util.h"
+#include "oct-locbuf.h"
 
 static void
 gripe_invalid_permutation (void)
 {
   (*current_liboctave_error_handler)
     ("PermMatrix: invalid permutation vector");
 }
 
@@ -95,26 +96,40 @@ PermMatrix
 PermMatrix::inverse (void) const
 {
   return transpose ();
 }
 
 octave_idx_type 
 PermMatrix::determinant (void) const
 {
-  Array<octave_idx_type> pa = *this;
-  octave_idx_type len = pa.length (), *p = pa.fortran_vec ();
-  bool neg = false;
+  // Determine the sign of a permutation in linear time.
+  // Is this widely known?
+
+  octave_idx_type len = perm_length ();
+  const octave_idx_type *pa = data ();
+
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, p, len);
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, q, len);
+
   for (octave_idx_type i = 0; i < len; i++)
     {
-      octave_idx_type j = p[i];
+      p[i] = pa[i];
+      q[p[i]] = i;
+    }
+
+  bool neg = false;
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      octave_idx_type j = p[i], k = q[i];
       if (j != i)
         {
-          p[i] = p[j];
-          p[j] = j;
+          p[k] = p[i];
+          q[j] = q[i];
           neg = ! neg;
         }
     }
   
   return neg ? -1 : 1;
 }
 
 PermMatrix 
