# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1425219028 -3600
#      Sun Mar 01 15:10:28 2015 +0100
# Node ID f25fe53690225633417c783208dbfd1673d93379
# Parent  2350fc8ba960eebf7aeffbc37ddb275a5e64058e
Don't assume axes parent is a figure (bug #44394)

* axis.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"
* legend.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"
* colorbar.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"
* copyobj.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"
* hold.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"
* ishold.m: use "ancestor (ca, "figure")" in place of "get (ca, "parent")"

diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -188,17 +188,17 @@ function limits = __axis__ (ca, ax, vara
     elseif (strcmpi (ax, "image"))
       __axis__ (ca, "equal");
       set (ca, "plotboxaspectratiomode", "auto");
       __do_tight_option__ (ca);
     elseif (strcmpi (ax, "square"))
       set (ca, "dataaspectratiomode", "auto",
                "plotboxaspectratio", [1, 1, 1]);
     elseif (strcmp (ax, "equal"))
-      if (strcmp (get (get (ca, "parent"), "__graphics_toolkit__"), "gnuplot"))
+      if (strcmp (get (ancestor (ca, "figure"), "__graphics_toolkit__"), "gnuplot"))
         ## FIXME: gnuplot applies the aspect ratio activepostionproperty.
         set (ca, "activepositionproperty", "position");
         ## The following line is a trick used to trigger the recalculation of
         ## aspect related magnitudes even if the aspect ratio is the same
         ## (useful with the x11 gnuplot terminal after a window resize)
         set (ca, "dataaspectratiomode", "auto");
       endif
       set (ca, "dataaspectratio", [1, 1, 1], "plotboxaspectratio", [5 4 4]);
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -120,17 +120,17 @@ function [hleg, hleg_obj, hplot, labels]
   if (nargin > 0
       && (! ishandle (varargin{1})
           || (strcmp (get (varargin{1}, "type"), "axes")
               && ! strcmp (get (varargin{1}, "tag"), "legend"))))
     [ca, varargin, nargin] = __plt_get_axis_arg__ ("legend", varargin{:});
     if (isempty (ca))
       ca = gca ();
     endif
-    fig = get (ca, "parent");
+    fig = ancestor (ca, "figure");
   else
     fig = get (0, "currentfigure");
     if (isempty (fig))
       fig = gcf ();
     endif
     ca = gca ();
   endif
 
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -144,49 +144,49 @@ function h = colorbar (varargin)
       ##        colorbar whenever an option changes.
       ##        re-instate this code if listener is developed.
       ## if (! isempty (loc))
       ##   set (hcb, "location", loc);
       ## endif
       ## if (! isempty (args))
       ##   set (hcb, args{:});
       ## endif
-      ax = get (get (hcb, "parent"), "currrentaxes");
+      ax = get (ancestor (hcb, "figure"), "currrentaxes");
     endif
   endif
 
   if (isempty (loc))
     loc = "eastoutside";
   endif
   if (isempty (ax))
     ax = gca ();
   endif
 
   showhiddenhandles = get (0, "showhiddenhandles");
   unwind_protect
     set (0, "showhiddenhandles", "on");
-    cax = findobj (get (ax, "parent"),
+    cax = findobj (ancestor (ax, "figure"),
                    "tag", "colorbar", "type", "axes", "axes", ax);
     if (! isempty (cax))
       delete (cax);
     endif
   unwind_protect_cleanup
     set (0, "showhiddenhandles", showhiddenhandles);
   end_unwind_protect
 
   if (! deleting)
     ## FIXME: Matlab does not require the "position" property to be active.
     ##        Is there a way to determine the plotbox position for the
     ##        gnuplot graphics toolkit with the outerposition is active?
     set (ax, "activepositionproperty", "position");
     obj = get (ax);
     obj.__cbar_hax__ = ax;
     position = obj.position;
-    ## FIXME: Should this be ancestor to accommodate hggroups?
-    hpar = get (ax, "parent");
+    
+    hpar = ancestor (ax, "figure");
     clen = rows (get (hpar, "colormap"));
     cext = get (ax, "clim");
     cdiff = (cext(2) - cext(1)) / clen / 2;
     cmin = cext(1) + cdiff;
     cmax = cext(2) - cdiff;
 
     [pos, cpos, vertical, mirror] = ...
        __position_colorbox__ (loc, obj, ancestor (ax, "figure"));
@@ -272,17 +272,17 @@ function deletecolorbar (h, d, hc, orig_
       set (ax, "units", units);
     endif
   endif
 endfunction
 
 function resetaxis (cax, d, ax, orig_props)
   if (isaxes (ax))
     ## FIXME: Probably don't want to delete everyone's listeners on colormap.
-    dellistener (get (ax, "parent"), "colormap");
+    dellistener (ancestor (ax, "figure"), "colormap");
     dellistener (ax, "clim");
     dellistener (ax, "dataaspectratio");
     dellistener (ax, "dataaspectratiomode");
     dellistener (ax, "plotboxaspectratio");
     dellistener (ax, "plotboxaspectratiomode");
     dellistener (ax, "position");
 
     units = get (ax, "units");
@@ -292,17 +292,17 @@ function resetaxis (cax, d, ax, orig_pro
              "activepositionproperty", orig_props.activepositionproperty);
     set (ax, "units", units);
   endif
 endfunction
 
 function update_colorbar_clim (hax, d, hi, vert)
   if (isaxes (hax)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off")))
-    clen = rows (get (get (hax, "parent"), "colormap"));
+    clen = rows (get (ancestor (hax, "figure"), "colormap"));
     cext = get (hax, "clim");
     cdiff = (cext(2) - cext(1)) / clen / 2;
     cmin = cext(1) + cdiff;
     cmax = cext(2) - cdiff;
 
     hiax = get (hi, "parent");
     if (vert)
       set (hi, "ydata", [cmin, cmax]);
diff --git a/scripts/plot/util/copyobj.m b/scripts/plot/util/copyobj.m
--- a/scripts/plot/util/copyobj.m
+++ b/scripts/plot/util/copyobj.m
@@ -60,17 +60,17 @@ function hnew = copyobj (horig, hparent 
     hnew = struct2hdl (str);
   else
     str = hdl2struct (horig);
     hnew = struct2hdl (str, hparent);
   endif
 
   ## reset current figure (and eventually axes) to original
   set (0, "currentfigure", cf);
-  if (get (hnew, "parent") == cf && ! isempty (ca))
+  if (ancestor (hnew, "figure") == cf && ! isempty (ca))
     set (cf, "currentaxes", ca)
   endif
 
 endfunction
 
 
 ## Absurd number of drawnow() function calls in demos is due to problem
 ## with FLTK backend which is not respecting the set ('position') call.
diff --git a/scripts/plot/util/hold.m b/scripts/plot/util/hold.m
--- a/scripts/plot/util/hold.m
+++ b/scripts/plot/util/hold.m
@@ -51,19 +51,18 @@
 ## @seealso{ishold, cla, clf, newplot}
 ## @end deftypefn
 
 function hold (varargin)
 
   if (nargin > 0 && isscalar (varargin{1}) && isaxes (varargin{1}))
     hax = varargin{1};
     varargin(1) = [];
-    nargs = numel (varargin);
-    ## FIXME: Should this be ancestor (hax, "parent")?
-    hfig = get (hax, "parent");
+    nargs = numel (varargin);    
+    hfig = ancestor (hax, "figure");
   elseif (nargin > 0 && numel (varargin{1}) > 1 && ishandle (varargin{1}))
     print_usage ();
   else
     hax = gca ();
     hfig = gcf ();
     nargs = numel (varargin);
   endif
 
diff --git a/scripts/plot/util/ishold.m b/scripts/plot/util/ishold.m
--- a/scripts/plot/util/ishold.m
+++ b/scripts/plot/util/ishold.m
@@ -39,17 +39,17 @@ function retval = ishold (h)
     ax = get (fig, "currentaxes");
   else
     if (ishandle (h))
       if (strcmp (get (h, "type"), "figure"))
         fig = h;
         ax = get (fig, "currentaxes");
       elseif (strcmp (get (h, "type"), "axes"))
         ax = h;
-        fig = get (ax, "parent");
+        fig = ancestor (ax, "figure");
       else
         error ("ishold: H must be an axes or figure graphics handle");
       endif
     else
       error ("ishold: H must be an axes or figure graphics handle");
     endif
   endif
 
