# HG changeset patch
# User jwe
# Date 832355548 0
#      Fri May 17 17:52:28 1996 +0000
# Node ID a174011c96f24b0c2a1baca27c336c831b60ebd7
# Parent  0da2c91573d9245ffd23229e3b6729da1ef66e7b
[project @ 1996-05-17 17:51:20 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1191,16 +1191,75 @@ Without any arguments, toggle the curren
     default:
       print_usage ("echo");
       break;
     }
 
   return retval;
 }
 
+DEFUN (completion_matches, args, nargout,
+  "completion_matches (HINT): generate possible completions given HINT")
+{
+  string_vector retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      string hint_string = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  int n = 32;
+
+	  string_vector list (n);
+
+	  const char *hint = hint_string.c_str ();
+
+	  int k = 0;
+
+	  for (;;)
+	    {
+	      const char *cmd = command_generator (hint, k);
+
+	      if (cmd)
+		{
+		  if (k > n)
+		    {
+		      n *= 2;
+		      list.resize (n);
+		    }
+
+		  list[k++] = cmd;
+		}
+	      else
+		{
+		  list.resize (k);
+		  break;
+		}
+	    }
+
+	  if (nargout > 0)
+	    retval = list;
+	  else
+	    {
+	      int len = list.length ();
+
+	      for (int i = 0; i < len; i++)
+		octave_stdout << list[i] << "\n";
+	    }
+	}
+    }
+  else
+    print_usage ("completion_matches");
+
+  return retval;
+}
+
 static int
 ps1 (void)
 {
   int status = 0;
 
   Vps1 = builtin_string_variable ("PS1");
 
   return status;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -203,16 +203,45 @@ keyword_almost_match (const char **std, 
  done:
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
+// Return non-zero if either NR or NC is zero.  Return -1 if this
+// should be considered fatal; return 1 if this is ok.
+
+int
+empty_arg (const char *name, int nr, int nc)
+{
+  int is_empty = 0;
+
+  if (nr == 0 || nc == 0)
+    {
+      int flag = Vpropagate_empty_matrices;
+
+      if (flag < 0)
+	{
+	  gripe_empty_arg (name, 0);
+	  is_empty = 1;
+	}
+      else if (flag == 0)
+	{
+	  gripe_empty_arg (name, 1);
+	  is_empty = -1;
+	}
+      else
+	is_empty = 1;
+    }
+
+  return is_empty;
+}
+
 // See if the given file is in the path.
 
 string
 search_path_for_file (const string& path, const string& name)
 {
   dir_path p (path);
 
   return make_absolute (p.find (name), Vcurrent_directory);
