# HG changeset patch
# User jwe
# Date 791148142 0
#      Thu Jan 26 19:22:22 1995 +0000
# Node ID 0cd3ba9c1f61b845eb215bbbbbd20ae1b9cf7741
# Parent  cd895d23db6c57cb3ed36a0c36ffa69664ee97c4
[project @ 1995-01-26 19:22:22 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -27,16 +27,17 @@ Software Foundation, 675 Mass Ave, Cambr
 %{
 #define SHORT_CIRCUIT_LOGICALS 1
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include <strstream.h>
+#include <ctype.h>
 #include <string.h>
 
 #include "input.h"
 #include "token.h"
 
 #include "SLStack.h"
 
 // Stack to hold tokens so that we can delete them when the parser is
@@ -1663,32 +1664,64 @@ handle_close_brace (int spc_gobbled)
     }
 
   quote_is_transpose = 1;
   cant_be_identifier = 0;
   convert_spaces_to_comma = 1;
   return ']';
 }
 
+static void
+maybe_unput_comma (int spc_gobbled)
+{
+  if (user_pref.whitespace_in_literal_matrix != 2
+      && ! nesting_level.empty ()
+      && nesting_level.top () == BRACE) 
+    {
+      int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
+
+      int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled,
+							  yytext);
+
+      int c1 = yyinput ();
+      int c2 = yyinput ();
+      unput (c2);
+      unput (c1);
+      int sep_op = match_any (c1, ",;\n]");
+      int dot_op = (c1 == '.'
+		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
+      int index_op = (c1 == '('
+		      && (user_pref.whitespace_in_literal_matrix == 0
+			  || ! spc_gobbled));
+
+      if (! (postfix_un_op || bin_op || sep_op || dot_op || index_op))
+	unput (',');
+    }
+}
+
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
 handle_identifier (char *tok, int spc_gobbled)
 {
 // It is almost always an error for an identifier to be followed
 // directly by another identifier.  Special cases are handled below.
 
   cant_be_identifier = 1;
 
 // If we are expecting a structure element, we just want to return
-// TEXT_ID, which is a string that is also a valid identifier.
+// TEXT_ID, which is a string that is also a valid identifier.  But
+// first, we have to decide whether to insert a comma.
 
   if (looking_at_indirect_ref)
-    TOK_PUSH_AND_RETURN (tok, TEXT_ID);
+    {
+      maybe_unput_comma (spc_gobbled);
+      TOK_PUSH_AND_RETURN (tok, TEXT_ID);
+    }
 
 // If we have a regular keyword, or a plot STYLE, return it.  Keywords
 // can be followed by identifiers (TOK_RETURN handles that).
 
   int kw_token = is_keyword (tok);
   if (kw_token)
     {
       if (kw_token == STYLE)
@@ -1779,37 +1812,17 @@ handle_identifier (char *tok, int spc_go
 // followed by `=' (if the next token is `=', there is no need to
 // check to see if we should insert a comma (invalid syntax), or allow
 // a following `'' to be treated as a transpose (the next token is
 // `=', so it can't be `''.
 
   quote_is_transpose = 1;
   do_comma_insert_check ();
 
-// Check to see if we should insert a comma.
-
-  if (user_pref.whitespace_in_literal_matrix != 2
-      && ! nesting_level.empty ()
-      && nesting_level.top () == BRACE) 
-    {
-      int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
-
-      int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled,
-							  yytext);
-
-      int c1 = yyinput ();
-      unput (c1);
-      int other_op = match_any (c1, ".,;\n]");
-      int index_op = (c1 == '('
-		      && (user_pref.whitespace_in_literal_matrix == 0
-			  || ! spc_gobbled));
-
-      if (! (postfix_un_op || bin_op || other_op || index_op))
-	unput (',');
-    }
+  maybe_unput_comma (spc_gobbled);
 
   current_input_column += yyleng;
   return NAME;
 }
 
 // Print a warning if a function file that defines a function has
 // anything other than comments and whitespace following the END token
 // that matches the FUNCTION statement.
