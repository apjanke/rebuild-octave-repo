# HG changeset patch
# User jwe
# Date 855445654 0
#      Sat Feb 08 23:47:34 1997 +0000
# Node ID 02f298ddf9f6d60396eaa416f5a8e0ed916fa385
# Parent  9ccca1037db3b02134bcefcd73042fa84392d348
[project @ 1997-02-08 23:47:34 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 Sat Feb  8 17:16:09 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-exp.cc (tree_simple_assignment_expression::eval): Return
+	value of RHS, but (if printing) print complete value of LHS.
+
 	* pr-output.cc (octave_print_internal): Print a new line for empty
 	string matrices.
 
 Wed Feb  5 14:30:44 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (scanf_format_list::process_conversion): Accept
 	but don't actually use h, l, and L modifiers.  Always insert l
 	modifier for floating point conversions.	
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -686,34 +686,35 @@ tree_simple_assignment_expression::left_
 }
 
 tree_identifier *
 tree_simple_assignment_expression::left_hand_side_id (void)
 {
   return lhs->ident ();
 }
 
-// ??? FIXME ??? -- should this return the value of the RHS instead?
-
 // ??? FIXME ??? -- should octave_variable_reference::assign return
 // the right thing for us to return?
 
 octave_value
 tree_simple_assignment_expression::eval (bool print)
 {
   assert (etype == tree_expression::assignment);
 
   octave_value retval;
 
+  octave_value lhs_val;
+
   if (error_state)
     return retval;
 
   if (rhs)
     {
       octave_value rhs_val = rhs->eval (false);
+
       if (error_state)
 	{
 	  eval_error ();
 	}
       else if (rhs_val.is_undefined ())
 	{
 	  error ("value on right hand side of assignment is undefined");
 	  eval_error ();
@@ -740,33 +741,44 @@ tree_simple_assignment_expression::eval 
 
 		      if (nargin > 0)
 			{
 			  ult.assign (args, rhs_val);
 
 			  if (error_state)
 			    eval_error ();
 			  else
-			    retval = ult.value ();
+			    {
+			      lhs_val = ult.value ();
+
+			      retval = rhs_val;
+			    }
 			}
 		      else
 			error ("??? invalid index list ???");
 		    }
 		}
 	      else
 		{
 		  ult.assign (rhs_val);
-		  retval = ult.value ();
+
+		  lhs_val = ult.value ();
+
+		  retval = rhs_val;
 		}
 	    }
 	}
     }
 
-  if (! error_state && print && retval.is_defined ())
-    retval.print_with_name (lhs->name ());
+  // Return value is RHS value, but the value we print is the complete
+  // LHS value so that expressions like x(2) = 2 (for x previously
+  // undefined) print b = [ 0; 2 ], which is more Matlab-like.
+
+  if (! error_state && print && lhs_val.is_defined ())
+    lhs_val.print_with_name (lhs->name ());
 
   return retval;
 }
 
 void
 tree_simple_assignment_expression::eval_error (void)
 {
   if (error_state > 0)
