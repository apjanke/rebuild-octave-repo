# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1456683667 0
#      Sun Feb 28 18:21:07 2016 +0000
# Node ID 2f402f7c1a0b781f1ce95e06c98666222a3b5a30
# Parent  00960129ebf4089fc5ef783173cb50035a31c980
accumarray: fix general case for empty list of subscripts (bug #47287)

* accumarray.m: when SUBS is an empty array, accumarray was working only
for the special cases of max, min, and sum.  Fix that.  Add tests.

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -331,24 +331,27 @@ function A = accumarray (subs, vals, sz 
       else
         vals = vals(:);
       endif
 
       ## Sort indices.
       [subs, idx] = sort (subs);
       ## Identify runs.
       jdx = find (subs(1:n-1) != subs(2:n));
-      jdx = [jdx; n];
+      if (n != 0) # bug #47287
+        jdx = [jdx; n];
+      endif
       vals = mat2cell (vals(idx), diff ([0; jdx]));
       ## Optimize the case when function is @(x) {x}, i.e. we just want
       ## to collect the values to cells.
       persistent simple_cell_str = func2str (@(x) {x});
       if (! strcmp (func2str (func), simple_cell_str))
         vals = cellfun (func, vals);
       endif
+
       subs = subs(jdx);
 
       if (isempty (sz))
         sz = max (subs);
         if (length (sz) == 1)
           sz(2) = 1;
         endif
       endif
@@ -422,8 +425,21 @@ endfunction
 %! subs = ceil (rand (2000, 3)*10);
 %! subsc = num2cell (subs, 1);
 %! vals = rand (2000, 1);
 %! assert (accumarray (subsc, vals, [], @max),
 %!         accumarray (subs, vals, [], @max));
 
 %!error (accumarray (1:5))
 %!error (accumarray ([1,2,3],1:2))
+
+## Handle empty arrays (bug #47287)
+%!test
+%! ## min, max, and sum are special cases within accumarray so test them.
+%! funcs = {@(x) length (x) > 1, @min, @max, @sum};
+%! for idx = 1:numel (funcs)
+%!   assert (accumarray (zeros (0, 1), [], [0 1] , funcs{idx}), zeros (0, 1))
+%!   assert (accumarray (zeros (0, 1), [], [1 0] , funcs{idx}), zeros (1, 0))
+%! endfor
+
+## Matlab returns an array of doubles even though FUNC returns cells.  In
+## Octave, we do not have that bug, at least for this case.
+%!assert (accumarray (zeros (0, 1), [], [0 1] , @(x) {x}), cell (0, 1))
