# HG changeset patch
# User jwe
# Date 746739837 0
#      Mon Aug 30 19:43:57 1993 +0000
# Node ID 04c30624aaf9b5359b1ba2af83c7620e1973f26d
# Parent  0fda6e1f90e04c610fa111312f351e0bea62c8a5
[project @ 1993-08-30 19:43:25 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -149,17 +149,17 @@ static builtin_text_functions text_funct
 {
   { "casesen", 2, builtin_casesen,
     "print warning if user tries to change case sensitivity\n", },
 
   { "cd", 2, builtin_cd,
     "change current working directory\n", },
 
   { "clear", -1, builtin_clear,
-    "clear symbol(s) from symbol table\n", },
+    "clear symbol(s) matching a list of regular expressions\n", },
 
   { "dir", -1, builtin_ls,
     "print a directory listing\n", },
 
   { "document", -1, builtin_document,
     "define help string for symbol\n", },
 
   { "edit_history", -1, builtin_edit_history,
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -45,16 +45,17 @@ Software Foundation, Inc.
 #include <strstream.h>
 #include <fstream.h>
 #include <stdio.h>
 #include <fcntl.h>
 #include <sys/file.h>
 #include <sys/stat.h>
 #include <time.h>
 #include <errno.h>
+#include <String.h>
 
 #include "procstream.h"
 
 #include "variables.h"
 #include "symtab.h"
 #include "error.h"
 #include "input.h"
 #include "pager.h"
@@ -201,36 +202,93 @@ builtin_cd (int argc, char **argv)
 
   char *directory = get_working_directory ("cd");
   tree_constant *dir = new tree_constant (directory);
   bind_protected_variable ("PWD", dir);
 
   return retval;
 }
 
+static int
+in_list (char *s, char **list)
+{
+  while (*list != (char *) NULL)
+    {
+      if (strcmp (s, *list) == 0)
+	return 1;
+      list++;
+    }
+
+  return 0;
+}
+
 /*
- * Wipe out user-defined variables and functions.
+ * Wipe out user-defined variables and functions given a list of
+ * regular expressions. 
  */
 tree_constant
 builtin_clear (int argc, char **argv)
 {
   tree_constant retval;
   if (argc == 1)
     {
       curr_sym_tab->clear ();
       global_sym_tab->clear ();
     }
   else
     {
+      int count;
+      char **names = curr_sym_tab->list (count);
+
+      int g_count;
+      char **g_names = global_sym_tab->list (g_count);
+
+      int num_cleared = 0;
+      char **locals_cleared = new char * [count+1];
+      locals_cleared[num_cleared] = (char *) NULL;
+
       while (--argc > 0)
 	{
 	  argv++;
-	  if (*argv != (char *) NULL && ! curr_sym_tab->clear (*argv))
-	    global_sym_tab->clear (*argv);
+	  if (*argv != (char *) NULL)
+	    {
+	      Regex rx (*argv);
+
+	      int i;
+	      for (i = 0; i < count; i++)
+		{
+		  String nm (names[i]);
+		  if (nm.matches (rx) && curr_sym_tab->clear (names[i]))
+		    {
+		      locals_cleared[num_cleared++] = strsave (names[i]);
+		      locals_cleared[num_cleared] = (char *) NULL;
+		    }
+		}
+
+	      for (i = 0; i < g_count; i++)
+		{
+		  String nm (g_names[i]);
+		  if (nm.matches (rx)
+		      && ! in_list (g_names[i], locals_cleared))
+		    {
+		      global_sym_tab->clear (g_names[i]);
+		    }
+		}
+	    }
 	}
+
+      int i = 0;
+      while (locals_cleared[i] != (char *) NULL)
+	delete [] locals_cleared[i++];
+      delete [] locals_cleared;
+
+      delete [] names;
+      delete [] g_names;
+      delete [] g_names;
+
     }
   return retval;
 }
 
 /*
  * Associate a cryptic message with a variable name.
  */
 tree_constant
