# HG changeset patch
# User Thorsten Liebig <Thorsten.Liebig@gmx.de>
# Date 1347369862 -7200
#      Tue Sep 11 15:24:22 2012 +0200
# Node ID 842ab161c10a3ebd6b2d662c0c90b1edd152256b
# Parent  a9fd6821eedff29229365986da28a68adf07fdb3
GUI: new setting to restore tabs from previous session; allow silent load file

* settings-dialog.ui: new settings check box for previous session restore
* settings-dialog.cc (settings_dialog::settings_dialog): load/write new settings
* file-editor.h (file-editor::request_open_file):  allow silent (no error msg) open file
* file_editor_interface.h (file_editor_interface::request_open_file) allow silent
(no error msg) open file
* file-editor.cc (file_editor::~file_editor): store a list of open tabs in settings
(file_editor::request_open_file): allow a silent open file with no error message
if file doesn't exist; remove added tab and restore focus, if load fails.
(file_editor::contruct): read list of previous tabs from settings (if enabled)
* file-editor-tab.h (file-editor-tab:load_file): allow silent load file, return success
* file-editor-tab.cc (file-editor-tab:load_file): allow silent load file, return success

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -52,17 +52,17 @@ class file_editor_interface : public QDo
     virtual QToolBar *toolbar () = 0;
 
     virtual void handle_entered_debug_mode () = 0;
     virtual void handle_quit_debug_mode () = 0;
 
   public slots:
     virtual void request_new_file () = 0;
     virtual void request_open_file () = 0;
-    virtual void request_open_file (const QString& fileName) = 0;
+    virtual void request_open_file (const QString& fileName, bool silent = false) = 0;
 
   signals:
       void active_changed (bool active);
 
   protected:
     QTerminal* _terminal;
     main_window* _main_window;
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -622,44 +622,47 @@ file_editor_tab::open_file (const QStrin
       return true;
     }
   else
     {
       return false;
     }
 }
 
-void
-file_editor_tab::load_file (const QString& fileName)
+bool
+file_editor_tab::load_file(const QString& fileName, bool silent)
 {
   if (!_file_editor->isVisible ())
     {
       _file_editor->show ();
     }
 
   QFile file (fileName);
   if (!file.open (QFile::ReadOnly))
     {
-      QMessageBox::warning (this, tr ("Octave Editor"),
-                            tr ("Could not open file %1 for read:\n%2.").arg (fileName).
-                            arg (file.errorString ()));
-      return;
+      if (silent==false)
+        QMessageBox::warning (this, tr ("Octave Editor"),
+                              tr ("Could not open file %1 for read:\n%2.").arg (fileName).
+                              arg (file.errorString ()));
+      return false;
     }
 
   QTextStream in (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
   set_file_name (fileName);
   update_tracked_file ();
 
 
   update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
+
+  return true;
 }
 
 void
 file_editor_tab::new_file ()
 {
   if (!_file_editor->isVisible ())
     {
       _file_editor->show ();
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -60,17 +60,17 @@ public slots:
   void paste ();
   void undo ();
   void redo ();
   void set_debugger_position (int line);
 
   void set_modified (bool modified = true);
 
   bool open_file (const QString& dir = QString ());
-  void load_file (const QString& fileName);
+  bool load_file (const QString& fileName, bool silent = false);
   void new_file ();
   bool save_file ();
   bool save_file (const QString& saveFileName);
   bool save_file_as();
   void run_file ();
 
   void file_has_changed (const QString& fileName);
   QString get_file_name () const {return _file_name;} 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "file-editor.h"
+#include "resource-manager.h"
 #include <QVBoxLayout>
 #include <QApplication>
 #include <QFile>
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
@@ -41,16 +42,30 @@ file_editor::file_editor (QTerminal *ter
 
   _terminal = terminal;
   _main_window = m;
   setVisible (false);
 }
 
 file_editor::~file_editor ()
 {
+  QSettings *settings = resource_manager::get_settings ();
+  QStringList sessionFileNames;
+  if (settings->value ("editor/restoreSession",true).toBool ())
+  {
+    for (int n=0;n<_tab_widget->count();++n)
+      {
+        file_editor_tab* tab = dynamic_cast<file_editor_tab*> (_tab_widget->widget (n));
+        if (!tab)
+          continue;
+        sessionFileNames.append (tab->get_file_name ());
+      }
+  }
+  settings->setValue ("editor/savedSessionTabs", sessionFileNames);
+  settings->sync ();
 }
 
 QTerminal *
 file_editor::terminal ()
 {
   return _terminal;
 }
 
@@ -115,28 +130,35 @@ file_editor::request_open_file ()
           // restore focus to previous tab
           if (curr_tab_index>=0)
             _tab_widget->setCurrentIndex (curr_tab_index);
         }
     }
 }
 
 void
-file_editor::request_open_file (const QString& fileName)
+file_editor::request_open_file (const QString& fileName, bool silent)
 {
   if (!isVisible ())
     {
       show ();
     }
 
   file_editor_tab *fileEditorTab = new file_editor_tab (this);
+  int curr_tab_index = _tab_widget->currentIndex ();
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab);
-      fileEditorTab->load_file (fileName);
+      if (!fileEditorTab->load_file (fileName, silent))
+        {
+          // If no file was loaded, remove the tab again.
+          _tab_widget->removeTab (_tab_widget->indexOf (fileEditorTab));
+          // restore focus to previous tab
+          _tab_widget->setCurrentIndex (curr_tab_index);
+        }
     }
 }
 
 void
 file_editor::request_undo ()
 {
   file_editor_tab *_active_file_editor_tab = active_editor_tab ();
   if (_active_file_editor_tab)
@@ -549,16 +571,26 @@ file_editor::construct ()
            SIGNAL (tabCloseRequested (int)), this, SLOT (handle_tab_close_request (int)));
   connect (_tab_widget,
            SIGNAL (currentChanged(int)), this, SLOT (active_tab_changed (int)));
 
   resize (500, 400);
   setWindowIcon (QIcon::fromTheme ("accessories-text-editor",
                                    style->standardIcon (QStyle::SP_FileIcon)));
   setWindowTitle ("Octave Editor");
+
+  //restore previous session
+  QSettings *settings = resource_manager::get_settings ();
+  if (settings->value ("editor/restoreSession",true).toBool ())
+  {
+    QStringList sessionFileNames = settings->value("editor/savedSessionTabs", QStringList()).toStringList ();
+
+    for (int n=0;n<sessionFileNames.count();++n)
+      request_open_file(sessionFileNames.at(n), true);
+  }
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f)
 {
   _tab_widget->addTab (f, "");
   connect (f, SIGNAL (file_name_changed(QString)),
            this, SLOT(handle_file_name_changed(QString)));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -59,17 +59,17 @@ public:
   QToolBar *        toolbar ();
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
 
 public slots:
   void request_new_file ();
   void request_open_file ();
-  void request_open_file (const QString& fileName);
+  void request_open_file (const QString& fileName, bool silent = false);
 
   void request_undo ();
   void request_redo ();
   void request_copy ();
   void request_cut ();
   void request_paste ();
   void request_save_file ();
   void request_save_file_as ();
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -41,16 +41,17 @@ QDialog (parent), ui (new Ui::settings_d
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (settings->value ("editor/showLineNumbers",true).toBool () );
   ui->editor_highlightCurrentLine->setChecked (settings->value ("editor/highlightCurrentLine",true).toBool () );
   ui->editor_codeCompletion->setChecked (settings->value ("editor/codeCompletion",true).toBool () );
   ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier").toString()) );
   ui->editor_fontSize->setValue (settings->value ("editor/fontSize",10).toInt ());
   ui->editor_longWindowTitle->setChecked (settings->value ("editor/longWindowTitle",false).toBool ());
+  ui->editor_restoreSession->setChecked (settings->value ("editor/restoreSession",true).toBool ());
   ui->terminal_fontName->setCurrentFont (QFont (settings->value ("terminal/fontName","Courier").toString()) );
   ui->terminal_fontSize->setValue (settings->value ("terminal/fontSize",10).toInt ());
   ui->showFilenames->setChecked (settings->value ("showFilenames").toBool());
   ui->showFileSize->setChecked (settings->value ("showFileSize").toBool());
   ui->showFileType->setChecked (settings->value ("showFileType").toBool());
   ui->showLastModified->setChecked (settings->value ("showLastModified").toBool());
   ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles").toBool());
   ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors").toBool());
@@ -102,16 +103,17 @@ settings_dialog::write_changed_settings 
   settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
   settings->setValue ("customFileEditor", ui->customFileEditor->text ());
   settings->setValue ("editor/showLineNumbers", ui->editor_showLineNumbers->isChecked ());
   settings->setValue ("editor/highlightCurrentLine", ui->editor_highlightCurrentLine->isChecked ());
   settings->setValue ("editor/codeCompletion", ui->editor_codeCompletion->isChecked ());
   settings->setValue ("editor/fontName", ui->editor_fontName->currentFont().family());
   settings->setValue ("editor/fontSize", ui->editor_fontSize->value());
   settings->setValue ("editor/longWindowTitle", ui->editor_longWindowTitle->isChecked());
+  settings->setValue ("editor/restoreSession", ui->editor_restoreSession->isChecked ());
   settings->setValue ("terminal/fontSize", ui->terminal_fontSize->value());
   settings->setValue ("terminal/fontName", ui->terminal_fontName->currentFont().family());
   settings->setValue ("showFilenames", ui->showFilenames->isChecked ());
   settings->setValue ("showFileSize", ui->showFileSize->isChecked ());
   settings->setValue ("showFileType", ui->showFileType->isChecked ());
   settings->setValue ("showLastModified", ui->showLastModified->isChecked ());
   settings->setValue ("showHiddenFiles", ui->showHiddenFiles->isChecked ());
   settings->setValue ("useAlternatingRowColors", ui->useAlternatingRowColors->isChecked ());
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -136,16 +136,23 @@
          </item>
          <item>
           <widget class="QCheckBox" name="editor_longWindowTitle">
            <property name="text">
             <string>Show complete path in window title</string>
            </property>
           </widget>
          </item>
+         <item>
+          <widget class="QCheckBox" name="editor_restoreSession">
+           <property name="text">
+            <string>Restore tabs from previous session on startup</string>
+           </property>
+          </widget>
+         </item>
         </layout>
        </item>
        <item>
         <spacer name="verticalSpacer">
          <property name="orientation">
           <enum>Qt::Vertical</enum>
          </property>
          <property name="sizeHint" stdset="0">
