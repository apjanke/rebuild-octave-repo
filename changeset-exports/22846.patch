# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480433586 18000
#      Tue Nov 29 10:33:06 2016 -0500
# Node ID e827d2c089f4b1416dfc2e8ee6483712e06f727b
# Parent  7bb977866f55b9f2503f9ce32e29c0428a2c0185
use F77_INT instead of octave_idx_type for liboctave Quad and lu classes

* Quad.cc, lu.cc, lu.h: Use F77_INT instead of octave_idx_type for
interfacing with Fortran.

diff --git a/liboctave/numeric/Quad.cc b/liboctave/numeric/Quad.cc
--- a/liboctave/numeric/Quad.cc
+++ b/liboctave/numeric/Quad.cc
@@ -33,18 +33,18 @@ along with Octave; see the file COPYING.
 static integrand_fcn user_fcn;
 static float_integrand_fcn float_user_fcn;
 
 // FIXME: would be nice to not have to have this global variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
 int quad_integration_error = 0;
 
-typedef octave_idx_type (*quad_fcn_ptr) (double*, int&, double*);
-typedef octave_idx_type (*quad_float_fcn_ptr) (float*, int&, float*);
+typedef F77_INT (*quad_fcn_ptr) (double*, int&, double*);
+typedef F77_INT (*quad_float_fcn_ptr) (float*, int&, float*);
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dqagp, DQAGP) (quad_fcn_ptr, const F77_DBLE&, const F77_DBLE&,
                            const F77_INT&, const F77_DBLE*,
                            const F77_DBLE&, const F77_DBLE&, F77_DBLE&,
                            F77_DBLE&, F77_INT&, F77_INT&,
@@ -71,17 +71,17 @@ extern "C"
   F77_FUNC (qagi, QAGI) (quad_float_fcn_ptr, const F77_REAL&,
                          const F77_INT&, const F77_REAL&,
                          const F77_REAL&, F77_REAL&, F77_REAL&, F77_INT&,
                          F77_INT&, const F77_INT&,
                          const F77_INT&, F77_INT&,
                          F77_INT*, F77_REAL*);
 }
 
-static octave_idx_type
+static F77_INT
 user_function (double *x, int& ierr, double *result)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
 #if defined (__sparc) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
@@ -100,17 +100,17 @@ user_function (double *x, int& ierr, dou
   if (quad_integration_error)
     ierr = -1;
 
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
 }
 
-static octave_idx_type
+static F77_INT
 float_user_function (float *x, int& ierr, float *result)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   quad_integration_error = 0;
 
   *result = (*float_user_fcn) (*x);
 
@@ -121,66 +121,77 @@ float_user_function (float *x, int& ierr
 
   return 0;
 }
 
 double
 DefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr)
 {
-  octave_idx_type npts = singularities.numel () + 2;
+  F77_INT npts = to_f77_int (singularities.numel () + 2);
   double *points = singularities.fortran_vec ();
   double result = 0.0;
 
-  octave_idx_type leniw = 183*npts - 122;
-  Array<octave_idx_type> iwork (dim_vector (leniw, 1));
-  octave_idx_type *piwork = iwork.fortran_vec ();
+  F77_INT leniw = 183*npts - 122;
+  Array<F77_INT> iwork (dim_vector (leniw, 1));
+  F77_INT *piwork = iwork.fortran_vec ();
 
-  octave_idx_type lenw = 2*leniw - npts;
+  F77_INT lenw = 2*leniw - npts;
   Array<double> work (dim_vector (lenw, 1));
   double *pwork = work.fortran_vec ();
 
   user_fcn = f;
-  octave_idx_type last;
+  F77_INT last;
 
   double abs_tol = absolute_tolerance ();
   double rel_tol = relative_tolerance ();
 
+  // NEVAL and IER are output only parameters and F77_INT can not be a
+  // wider type than octave_idx_type so we can create local variables
+  // here that are the correct type for the Fortran subroutine and then
+  // copy them to the function parameters without needing to preserve
+  // and pass the values to the Fortran subroutine.
+
+  F77_INT xneval, xier;
+
   F77_XFCN (dqagp, DQAGP, (user_function, lower_limit, upper_limit,
                            npts, points, abs_tol, rel_tol, result,
-                           abserr, neval, ier, leniw, lenw, last,
+                           abserr, xneval, xier, leniw, lenw, last,
                            piwork, pwork));
 
+  neval = xneval;
+  ier = xier;
+
   return result;
 }
 
 float
 DefQuad::do_integrate (octave_idx_type&, octave_idx_type&, float&)
 {
   (*current_liboctave_error_handler) ("incorrect integration function called");
 }
 
 double
 IndefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                          double& abserr)
 {
   double result = 0.0;
 
-  octave_idx_type leniw = 128;
-  Array<octave_idx_type> iwork (dim_vector (leniw, 1));
-  octave_idx_type *piwork = iwork.fortran_vec ();
+  F77_INT leniw = 128;
+  Array<F77_INT> iwork (dim_vector (leniw, 1));
+  F77_INT *piwork = iwork.fortran_vec ();
 
-  octave_idx_type lenw = 8*leniw;
+  F77_INT lenw = 8*leniw;
   Array<double> work (dim_vector (lenw, 1));
   double *pwork = work.fortran_vec ();
 
   user_fcn = f;
-  octave_idx_type last;
+  F77_INT last;
 
-  octave_idx_type inf;
+  F77_INT inf;
   switch (type)
     {
     case bound_to_inf:
       inf = 1;
       break;
 
     case neg_inf_to_bound:
       inf = -1;
@@ -193,20 +204,31 @@ IndefQuad::do_integrate (octave_idx_type
     default:
       assert (0);
       break;
     }
 
   double abs_tol = absolute_tolerance ();
   double rel_tol = relative_tolerance ();
 
+  // NEVAL and IER are output only parameters and F77_INT can not be a
+  // wider type than octave_idx_type so we can create local variables
+  // here that are the correct type for the Fortran subroutine and then
+  // copy them to the function parameters without needing to preserve
+  // and pass the values to the Fortran subroutine.
+
+  F77_INT xneval, xier;
+
   F77_XFCN (dqagi, DQAGI, (user_function, bound, inf, abs_tol, rel_tol,
-                           result, abserr, neval, ier, leniw, lenw,
+                           result, abserr, xneval, xier, leniw, lenw,
                            last, piwork, pwork));
 
+  neval = xneval;
+  ier = xier;
+
   return result;
 }
 
 float
 IndefQuad::do_integrate (octave_idx_type&, octave_idx_type&, float&)
 {
   (*current_liboctave_error_handler) ("incorrect integration function called");
 }
@@ -216,66 +238,77 @@ FloatDefQuad::do_integrate (octave_idx_t
 {
   (*current_liboctave_error_handler) ("incorrect integration function called");
 }
 
 float
 FloatDefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                             float& abserr)
 {
-  octave_idx_type npts = singularities.numel () + 2;
+  F77_INT npts = to_f77_int (singularities.numel () + 2);
   float *points = singularities.fortran_vec ();
   float result = 0.0;
 
-  octave_idx_type leniw = 183*npts - 122;
-  Array<octave_idx_type> iwork (dim_vector (leniw, 1));
-  octave_idx_type *piwork = iwork.fortran_vec ();
+  F77_INT leniw = 183*npts - 122;
+  Array<F77_INT> iwork (dim_vector (leniw, 1));
+  F77_INT *piwork = iwork.fortran_vec ();
 
-  octave_idx_type lenw = 2*leniw - npts;
+  F77_INT lenw = 2*leniw - npts;
   Array<float> work (dim_vector (lenw, 1));
   float *pwork = work.fortran_vec ();
 
   float_user_fcn = ff;
-  octave_idx_type last;
+  F77_INT last;
 
   float abs_tol = single_precision_absolute_tolerance ();
   float rel_tol = single_precision_relative_tolerance ();
 
+  // NEVAL and IER are output only parameters and F77_INT can not be a
+  // wider type than octave_idx_type so we can create local variables
+  // here that are the correct type for the Fortran subroutine and then
+  // copy them to the function parameters without needing to preserve
+  // and pass the values to the Fortran subroutine.
+
+  F77_INT xneval, xier;
+
   F77_XFCN (qagp, QAGP, (float_user_function, lower_limit, upper_limit,
                          npts, points, abs_tol, rel_tol, result,
-                         abserr, neval, ier, leniw, lenw, last,
+                         abserr, xneval, xier, leniw, lenw, last,
                          piwork, pwork));
 
+  neval = xneval;
+  ier = xier;
+
   return result;
 }
 
 double
 FloatIndefQuad::do_integrate (octave_idx_type&, octave_idx_type&, double&)
 {
   (*current_liboctave_error_handler) ("incorrect integration function called");
 }
 
 float
 FloatIndefQuad::do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                               float& abserr)
 {
   float result = 0.0;
 
-  octave_idx_type leniw = 128;
-  Array<octave_idx_type> iwork (dim_vector (leniw, 1));
-  octave_idx_type *piwork = iwork.fortran_vec ();
+  F77_INT leniw = 128;
+  Array<F77_INT> iwork (dim_vector (leniw, 1));
+  F77_INT *piwork = iwork.fortran_vec ();
 
-  octave_idx_type lenw = 8*leniw;
+  F77_INT lenw = 8*leniw;
   Array<float> work (dim_vector (lenw, 1));
   float *pwork = work.fortran_vec ();
 
   float_user_fcn = ff;
-  octave_idx_type last;
+  F77_INT last;
 
-  octave_idx_type inf;
+  F77_INT inf;
   switch (type)
     {
     case bound_to_inf:
       inf = 1;
       break;
 
     case neg_inf_to_bound:
       inf = -1;
@@ -288,15 +321,26 @@ FloatIndefQuad::do_integrate (octave_idx
     default:
       assert (0);
       break;
     }
 
   float abs_tol = single_precision_absolute_tolerance ();
   float rel_tol = single_precision_relative_tolerance ();
 
+  // NEVAL and IER are output only parameters and F77_INT can not be a
+  // wider type than octave_idx_type so we can create local variables
+  // here that are the correct type for the Fortran subroutine and then
+  // copy them to the function parameters without needing to preserve
+  // and pass the values to the Fortran subroutine.
+
+  F77_INT xneval, xier;
+
   F77_XFCN (qagi, QAGI, (float_user_function, bound, inf, abs_tol, rel_tol,
-                         result, abserr, neval, ier, leniw, lenw,
+                         result, abserr, xneval, xier, leniw, lenw,
                          last, piwork, pwork));
 
+  neval = xneval;
+  ier = xier;
+
   return result;
 }
 
diff --git a/liboctave/numeric/lu.cc b/liboctave/numeric/lu.cc
--- a/liboctave/numeric/lu.cc
+++ b/liboctave/numeric/lu.cc
@@ -73,17 +73,17 @@ namespace octave
 
     template <typename T>
     T
     lu<T>::L (void) const
     {
       if (packed ())
         {
           octave_idx_type a_nr = a_fact.rows ();
-          octave_idx_type a_nc = a_fact.cols ();
+          octave_idx_type a_nc = a_fact.columns ();
           octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
 
           T l (a_nr, mn, ELT_T (0.0));
 
           for (octave_idx_type i = 0; i < a_nr; i++)
             {
               if (i < a_nc)
                 l.xelem (i, i) = 1.0;
@@ -100,17 +100,17 @@ namespace octave
 
     template <typename T>
     T
     lu<T>::U (void) const
     {
       if (packed ())
         {
           octave_idx_type a_nr = a_fact.rows ();
-          octave_idx_type a_nc = a_fact.cols ();
+          octave_idx_type a_nc = a_fact.columns ();
           octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
 
           T u (mn, a_nc, ELT_T (0.0));
 
           for (octave_idx_type i = 0; i < mn; i++)
             {
               for (octave_idx_type j = i; j < a_nc; j++)
                 u.xelem (i, j) = a_fact.xelem (i, j);
@@ -247,51 +247,54 @@ namespace octave
 
 #endif
 
     // Specializations.
 
     template <>
     lu<Matrix>::lu (const Matrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
-      octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.columns ());
+      F77_INT mn = (a_nr < a_nc ? a_nr : a_nc);
 
       ipvt.resize (dim_vector (mn, 1));
-      octave_idx_type *pipvt = ipvt.fortran_vec ();
+      F77_INT *pipvt = ipvt.fortran_vec ();
 
       a_fact = a;
       double *tmp_data = a_fact.fortran_vec ();
 
-      octave_idx_type info = 0;
+      F77_INT info = 0;
 
       F77_XFCN (dgetrf, DGETRF, (a_nr, a_nc, tmp_data, a_nr, pipvt, info));
 
-      for (octave_idx_type i = 0; i < mn; i++)
+      for (F77_INT i = 0; i < mn; i++)
         pipvt[i] -= 1;
     }
 
 #if defined (HAVE_QRUPDATE_LUU)
 
     template <>
     void
     lu<Matrix>::update (const ColumnVector& u, const ColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       Matrix& l = l_fact;
       Matrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       ColumnVector utmp = u;
       ColumnVector vtmp = v;
       F77_XFCN (dlu1up, DLU1UP, (m, n, l.fortran_vec (), m, r.fortran_vec (), k,
                                  utmp.fortran_vec (), vtmp.fortran_vec ()));
     }
 
@@ -300,24 +303,30 @@ namespace octave
     lu<Matrix>::update (const Matrix& u, const Matrix& v)
     {
       if (packed ())
         unpack ();
 
       Matrix& l = l_fact;
       Matrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           ColumnVector utmp = u.column (i);
           ColumnVector vtmp = v.column (i);
           F77_XFCN (dlu1up, DLU1UP, (m, n, l.fortran_vec (),
                                      m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec ()));
         }
     }
@@ -327,105 +336,117 @@ namespace octave
     lu<Matrix>::update_piv (const ColumnVector& u, const ColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       Matrix& l = l_fact;
       Matrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       ColumnVector utmp = u;
       ColumnVector vtmp = v;
       OCTAVE_LOCAL_BUFFER (double, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
       F77_XFCN (dlup1up, DLUP1UP, (m, n, l.fortran_vec (),
                                    m, r.fortran_vec (), k,
                                    ipvt.fortran_vec (),
                                    utmp.data (), vtmp.data (), w));
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
     template <>
     void
     lu<Matrix>::update_piv (const Matrix& u, const Matrix& v)
     {
       if (packed ())
         unpack ();
 
       Matrix& l = l_fact;
       Matrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       OCTAVE_LOCAL_BUFFER (double, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           ColumnVector utmp = u.column (i);
           ColumnVector vtmp = v.column (i);
           F77_XFCN (dlup1up, DLUP1UP, (m, n, l.fortran_vec (),
                                        m, r.fortran_vec (), k,
                                        ipvt.fortran_vec (),
                                        utmp.data (), vtmp.data (), w));
         }
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
 #endif
 
     template <>
     lu<FloatMatrix>::lu (const FloatMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
-      octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.columns ());
+      F77_INT mn = (a_nr < a_nc ? a_nr : a_nc);
 
       ipvt.resize (dim_vector (mn, 1));
-      octave_idx_type *pipvt = ipvt.fortran_vec ();
+      F77_INT *pipvt = ipvt.fortran_vec ();
 
       a_fact = a;
       float *tmp_data = a_fact.fortran_vec ();
 
-      octave_idx_type info = 0;
+      F77_INT info = 0;
 
       F77_XFCN (sgetrf, SGETRF, (a_nr, a_nc, tmp_data, a_nr, pipvt, info));
 
-      for (octave_idx_type i = 0; i < mn; i++)
+      for (F77_INT i = 0; i < mn; i++)
         pipvt[i] -= 1;
     }
 
 #if defined (HAVE_QRUPDATE_LUU)
 
     template <>
     void
     lu<FloatMatrix>::update (const FloatColumnVector& u, const FloatColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       FloatMatrix& l = l_fact;
       FloatMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       FloatColumnVector utmp = u;
       FloatColumnVector vtmp = v;
       F77_XFCN (slu1up, SLU1UP, (m, n, l.fortran_vec (),
                                  m, r.fortran_vec (), k,
                                  utmp.fortran_vec (), vtmp.fortran_vec ()));
     }
@@ -435,24 +456,30 @@ namespace octave
     lu<FloatMatrix>::update (const FloatMatrix& u, const FloatMatrix& v)
     {
       if (packed ())
         unpack ();
 
       FloatMatrix& l = l_fact;
       FloatMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           FloatColumnVector utmp = u.column (i);
           FloatColumnVector vtmp = v.column (i);
           F77_XFCN (slu1up, SLU1UP, (m, n, l.fortran_vec (),
                                      m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec ()));
         }
     }
@@ -463,107 +490,119 @@ namespace octave
                                  const FloatColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       FloatMatrix& l = l_fact;
       FloatMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       FloatColumnVector utmp = u;
       FloatColumnVector vtmp = v;
       OCTAVE_LOCAL_BUFFER (float, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
       F77_XFCN (slup1up, SLUP1UP, (m, n, l.fortran_vec (),
                                    m, r.fortran_vec (), k,
                                    ipvt.fortran_vec (),
                                    utmp.data (), vtmp.data (), w));
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
     template <>
     void
     lu<FloatMatrix>::update_piv (const FloatMatrix& u, const FloatMatrix& v)
     {
       if (packed ())
         unpack ();
 
       FloatMatrix& l = l_fact;
       FloatMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       OCTAVE_LOCAL_BUFFER (float, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           FloatColumnVector utmp = u.column (i);
           FloatColumnVector vtmp = v.column (i);
           F77_XFCN (slup1up, SLUP1UP, (m, n, l.fortran_vec (),
                                        m, r.fortran_vec (), k,
                                        ipvt.fortran_vec (),
                                        utmp.data (), vtmp.data (), w));
         }
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
 #endif
 
     template <>
     lu<ComplexMatrix>::lu (const ComplexMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
-      octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.columns ());
+      F77_INT mn = (a_nr < a_nc ? a_nr : a_nc);
 
       ipvt.resize (dim_vector (mn, 1));
-      octave_idx_type *pipvt = ipvt.fortran_vec ();
+      F77_INT *pipvt = ipvt.fortran_vec ();
 
       a_fact = a;
       Complex *tmp_data = a_fact.fortran_vec ();
 
-      octave_idx_type info = 0;
+      F77_INT info = 0;
 
       F77_XFCN (zgetrf, ZGETRF, (a_nr, a_nc, F77_DBLE_CMPLX_ARG (tmp_data), a_nr,
                                  pipvt, info));
 
-      for (octave_idx_type i = 0; i < mn; i++)
+      for (F77_INT i = 0; i < mn; i++)
         pipvt[i] -= 1;
     }
 
 #if defined (HAVE_QRUPDATE_LUU)
 
     template <>
     void
     lu<ComplexMatrix>::update (const ComplexColumnVector& u,
                                const ComplexColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       ComplexMatrix& l = l_fact;
       ComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       ComplexColumnVector utmp = u;
       ComplexColumnVector vtmp = v;
       F77_XFCN (zlu1up, ZLU1UP, (m, n, F77_DBLE_CMPLX_ARG (l.fortran_vec ()), m,
                                  F77_DBLE_CMPLX_ARG (r.fortran_vec ()), k,
                                  F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()),
                                  F77_DBLE_CMPLX_ARG (vtmp.fortran_vec ())));
@@ -574,24 +613,30 @@ namespace octave
     lu<ComplexMatrix>::update (const ComplexMatrix& u, const ComplexMatrix& v)
     {
       if (packed ())
         unpack ();
 
       ComplexMatrix& l = l_fact;
       ComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           ComplexColumnVector utmp = u.column (i);
           ComplexColumnVector vtmp = v.column (i);
           F77_XFCN (zlu1up, ZLU1UP, (m, n, F77_DBLE_CMPLX_ARG (l.fortran_vec ()),
                                      m, F77_DBLE_CMPLX_ARG (r.fortran_vec ()), k,
                                      F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()),
                                      F77_DBLE_CMPLX_ARG (vtmp.fortran_vec ())));
         }
@@ -603,139 +648,155 @@ namespace octave
                                    const ComplexColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       ComplexMatrix& l = l_fact;
       ComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       ComplexColumnVector utmp = u;
       ComplexColumnVector vtmp = v;
       OCTAVE_LOCAL_BUFFER (Complex, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
       F77_XFCN (zlup1up, ZLUP1UP, (m, n, F77_DBLE_CMPLX_ARG (l.fortran_vec ()),
                                    m, F77_DBLE_CMPLX_ARG (r.fortran_vec ()), k,
                                    ipvt.fortran_vec (),
                                    F77_CONST_DBLE_CMPLX_ARG (utmp.data ()),
                                    F77_CONST_DBLE_CMPLX_ARG (vtmp.data ()), F77_DBLE_CMPLX_ARG (w)));
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
     template <>
     void
     lu<ComplexMatrix>::update_piv (const ComplexMatrix& u, const ComplexMatrix& v)
     {
       if (packed ())
         unpack ();
 
       ComplexMatrix& l = l_fact;
       ComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       OCTAVE_LOCAL_BUFFER (Complex, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           ComplexColumnVector utmp = u.column (i);
           ComplexColumnVector vtmp = v.column (i);
           F77_XFCN (zlup1up, ZLUP1UP, (m, n, F77_DBLE_CMPLX_ARG (l.fortran_vec ()),
                                        m, F77_DBLE_CMPLX_ARG (r.fortran_vec ()), k,
                                        ipvt.fortran_vec (),
                                        F77_CONST_DBLE_CMPLX_ARG (utmp.data ()),
                                        F77_CONST_DBLE_CMPLX_ARG (vtmp.data ()), F77_DBLE_CMPLX_ARG (w)));
         }
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
 #endif
 
     template <>
     lu<FloatComplexMatrix>::lu (const FloatComplexMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
-      octave_idx_type mn = (a_nr < a_nc ? a_nr : a_nc);
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.columns ());
+      F77_INT mn = (a_nr < a_nc ? a_nr : a_nc);
 
       ipvt.resize (dim_vector (mn, 1));
-      octave_idx_type *pipvt = ipvt.fortran_vec ();
+      F77_INT *pipvt = ipvt.fortran_vec ();
 
       a_fact = a;
       FloatComplex *tmp_data = a_fact.fortran_vec ();
 
-      octave_idx_type info = 0;
+      F77_INT info = 0;
 
       F77_XFCN (cgetrf, CGETRF, (a_nr, a_nc, F77_CMPLX_ARG (tmp_data), a_nr, pipvt,
                                  info));
 
-      for (octave_idx_type i = 0; i < mn; i++)
+      for (F77_INT i = 0; i < mn; i++)
         pipvt[i] -= 1;
     }
 
 #if defined (HAVE_QRUPDATE_LUU)
 
     template <>
     void
     lu<FloatComplexMatrix>::update (const FloatComplexColumnVector& u,
                                     const FloatComplexColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       FloatComplexMatrix& l = l_fact;
       FloatComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
+
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
 
-      if (u.numel () == m && v.numel () == n)
-        {
-          FloatComplexColumnVector utmp = u;
-          FloatComplexColumnVector vtmp = v;
-          F77_XFCN (clu1up, CLU1UP, (m, n, F77_CMPLX_ARG (l.fortran_vec ()), m,
-                                     F77_CMPLX_ARG (r.fortran_vec ()), k,
-                                     F77_CMPLX_ARG (utmp.fortran_vec ()), F77_CMPLX_ARG (vtmp.fortran_vec ())));
-        }
-      else
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
+
+      FloatComplexColumnVector utmp = u;
+      FloatComplexColumnVector vtmp = v;
+      F77_XFCN (clu1up, CLU1UP, (m, n, F77_CMPLX_ARG (l.fortran_vec ()), m,
+                                 F77_CMPLX_ARG (r.fortran_vec ()), k,
+                                 F77_CMPLX_ARG (utmp.fortran_vec ()), F77_CMPLX_ARG (vtmp.fortran_vec ())));
     }
 
     template <>
     void
     lu<FloatComplexMatrix>::update (const FloatComplexMatrix& u,
                                     const FloatComplexMatrix& v)
     {
       if (packed ())
         unpack ();
 
       FloatComplexMatrix& l = l_fact;
       FloatComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           FloatComplexColumnVector utmp = u.column (i);
           FloatComplexColumnVector vtmp = v.column (i);
           F77_XFCN (clu1up, CLU1UP, (m, n, F77_CMPLX_ARG (l.fortran_vec ()),
                                      m, F77_CMPLX_ARG (r.fortran_vec ()), k,
                                      F77_CMPLX_ARG (utmp.fortran_vec ()), F77_CMPLX_ARG (vtmp.fortran_vec ())));
         }
     }
@@ -746,66 +807,75 @@ namespace octave
                                         const FloatComplexColumnVector& v)
     {
       if (packed ())
         unpack ();
 
       FloatComplexMatrix& l = l_fact;
       FloatComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.numel () != m || v.numel () != n)
+      F77_INT u_nel = to_f77_int (u.numel ());
+      F77_INT v_nel = to_f77_int (v.numel ());
+
+      if (u_nel != m || v_nel != n)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       FloatComplexColumnVector utmp = u;
       FloatComplexColumnVector vtmp = v;
       OCTAVE_LOCAL_BUFFER (FloatComplex, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
       F77_XFCN (clup1up, CLUP1UP, (m, n, F77_CMPLX_ARG (l.fortran_vec ()),
                                    m, F77_CMPLX_ARG (r.fortran_vec ()), k,
                                    ipvt.fortran_vec (),
                                    F77_CONST_CMPLX_ARG (utmp.data ()), F77_CONST_CMPLX_ARG (vtmp.data ()),
                                    F77_CMPLX_ARG (w)));
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
     template <>
     void
     lu<FloatComplexMatrix>::update_piv (const FloatComplexMatrix& u,
                                         const FloatComplexMatrix& v)
     {
       if (packed ())
         unpack ();
 
       FloatComplexMatrix& l = l_fact;
       FloatComplexMatrix& r = a_fact;
 
-      octave_idx_type m = l.rows ();
-      octave_idx_type n = r.columns ();
-      octave_idx_type k = l.columns ();
+      F77_INT m = to_f77_int (l.rows ());
+      F77_INT n = to_f77_int (r.columns ());
+      F77_INT k = to_f77_int (l.columns ());
 
-      if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
+      F77_INT u_nr = to_f77_int (u.rows ());
+      F77_INT u_nc = to_f77_int (u.columns ());
+
+      F77_INT v_nr = to_f77_int (v.rows ());
+      F77_INT v_nc = to_f77_int (v.columns ());
+
+      if (u_nr != m || v_nr != n || u_nc != v_nc)
         (*current_liboctave_error_handler) ("luupdate: dimensions mismatch");
 
       OCTAVE_LOCAL_BUFFER (FloatComplex, w, m);
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) += 1; // increment
-      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
+      for (F77_INT i = 0; i < m; i++) ipvt(i) += 1; // increment
+      for (volatile F77_INT i = 0; i < u_nc; i++)
         {
           FloatComplexColumnVector utmp = u.column (i);
           FloatComplexColumnVector vtmp = v.column (i);
           F77_XFCN (clup1up, CLUP1UP, (m, n, F77_CMPLX_ARG (l.fortran_vec ()),
                                        m, F77_CMPLX_ARG (r.fortran_vec ()), k,
                                        ipvt.fortran_vec (),
                                        F77_CONST_CMPLX_ARG (utmp.data ()), F77_CONST_CMPLX_ARG (vtmp.data ()),
                                        F77_CMPLX_ARG (w)));
         }
-      for (octave_idx_type i = 0; i < m; i++) ipvt(i) -= 1; // decrement
+      for (F77_INT i = 0; i < m; i++) ipvt(i) -= 1; // decrement
     }
 
 #endif
 
     // Instantiations we need.
 
     template class lu<Matrix>;
 
diff --git a/liboctave/numeric/lu.h b/liboctave/numeric/lu.h
--- a/liboctave/numeric/lu.h
+++ b/liboctave/numeric/lu.h
@@ -86,20 +86,24 @@ namespace octave
       void update (const T& u, const T& v);
 
       void update_piv (const VT& u, const VT& v);
 
       void update_piv (const T& u, const T& v);
 
     protected:
 
+      // The result of getp is passed to other Octave Matrix
+      // fucntions, so we use octave_idx_type.
       Array<octave_idx_type> getp (void) const;
 
       T a_fact;
       T l_fact;
 
-      Array<octave_idx_type> ipvt;
+      // This is internal storage that is passed to Fortran, so we
+      // need a Fortran INTEGER.
+      Array<octave_f77_int_type> ipvt;
     };
   }
 }
 
 #endif
 
