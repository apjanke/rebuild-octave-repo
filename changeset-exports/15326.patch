# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1347056054 14400
#      Fri Sep 07 18:14:14 2012 -0400
# Node ID 81fe6665ed3c0819ce54fddb6084cdf0c8262706
# Parent  d9b955926a5008228cb21675b05bf777e4ed685f
Fix errors with string options passed to older libcurl (bug #36717)

* urlwrite.cc: Store persistent string options passed to libcurl in
curl_handle_rep.

diff --git a/libinterp/dldfcn/urlwrite.cc b/libinterp/dldfcn/urlwrite.cc
--- a/libinterp/dldfcn/urlwrite.cc
+++ b/libinterp/dldfcn/urlwrite.cc
@@ -139,16 +139,18 @@ private:
 
     bool is_binary (void) const
       {
         return !ascii;
       }
 
     octave_refcount<size_t> count;
     std::string host;
+    std::string url;
+    std::string userpwd;
     bool valid;
     bool ascii;
     mutable CURLcode errnum;
 
   private:
     CURL *curl;
 
     // No copying!
@@ -177,18 +179,18 @@ public:
 
   curl_handle (const std::string& _host, const std::string& user,
                const std::string& passwd) :
     rep (new curl_handle_rep ())
     {
       rep->host = _host;
       init (user, passwd, std::cin, octave_stdout);
 
-      std::string url = "ftp://" + _host;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + _host;
+      setopt (CURLOPT_URL, rep->url.c_str ());
 
       // Setup the link, with no transfer
       if (!error_state)
         perform ();
     }
 
   curl_handle (const std::string& url, const std::string& method,
                const Cell& param, std::ostream& os, bool& retval) :
@@ -353,71 +355,71 @@ public:
       if (! error_state)
         perform ();
       setopt (CURLOPT_POSTQUOTE, 0);
       curl_slist_free_all (slist);
     }
 
   void put (const std::string& file, std::istream& is) const
     {
-      std::string url = "ftp://" + rep->host + "/" + file;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host + "/" + file;
+      setopt (CURLOPT_URL, rep->url.c_str ());
       setopt (CURLOPT_UPLOAD, 1);
       setopt (CURLOPT_NOBODY, 0);
       set_istream (is);
       if (! error_state)
         perform ();
       set_istream (std::cin);
       setopt (CURLOPT_NOBODY, 1);
       setopt (CURLOPT_UPLOAD, 0);
-      url = "ftp://" + rep->host;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host;
+      setopt (CURLOPT_URL, rep->url.c_str ());
     }
 
   void get (const std::string& file, std::ostream& os) const
     {
-      std::string url = "ftp://" + rep->host + "/" + file;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host + "/" + file;
+      setopt (CURLOPT_URL, rep->url.c_str ());
       setopt (CURLOPT_NOBODY, 0);
       set_ostream (os);
       if (! error_state)
         perform ();
       set_ostream (octave_stdout);
       setopt (CURLOPT_NOBODY, 1);
-      url = "ftp://" + rep->host;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host;
+      setopt (CURLOPT_URL, rep->url.c_str ());
     }
 
   void dir (void) const
     {
-      std::string url = "ftp://" + rep->host + "/";
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host + "/";
+      setopt (CURLOPT_URL, rep->url.c_str ());
       setopt (CURLOPT_NOBODY, 0);
       if (! error_state)
         perform ();
       setopt (CURLOPT_NOBODY, 1);
-      url = "ftp://" + rep->host;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host;
+      setopt (CURLOPT_URL, rep->url.c_str ());
     }
 
   string_vector list (void) const
     {
       std::ostringstream buf;
-      std::string url = "ftp://" + rep->host + "/";
+      rep->url = "ftp://" + rep->host + "/";
       setopt (CURLOPT_WRITEDATA, static_cast<void*> (&buf));
-      setopt (CURLOPT_URL, url.c_str ());
+      setopt (CURLOPT_URL, rep->url.c_str ());
       setopt (CURLOPT_DIRLISTONLY, 1);
       setopt (CURLOPT_NOBODY, 0);
       if (! error_state)
         perform ();
       setopt (CURLOPT_NOBODY, 1);
-      url = "ftp://" + rep->host;
+      rep->url = "ftp://" + rep->host;
       setopt (CURLOPT_WRITEDATA, static_cast<void*> (&octave_stdout));
       setopt (CURLOPT_DIRLISTONLY, 0);
-      setopt (CURLOPT_URL, url.c_str ());
+      setopt (CURLOPT_URL, rep->url.c_str ());
 
       // Count number of directory entries
       std::string str = buf.str ();
       octave_idx_type n = 0;
       size_t pos = 0;
       while (true)
         {
           pos = str.find_first_of ('\n', pos);
@@ -440,18 +442,18 @@ public:
       return retval;
     }
 
   void get_fileinfo (const std::string& filename, double& filesize,
                      time_t& filetime, bool& fileisdir) const
     {
       std::string path = pwd ();
 
-      std::string url = "ftp://" + rep->host + "/" + path + "/" + filename;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host + "/" + path + "/" + filename;
+      setopt (CURLOPT_URL, rep->url.c_str ());
       setopt (CURLOPT_FILETIME, 1);
       setopt (CURLOPT_HEADERFUNCTION, throw_away);
       setopt (CURLOPT_WRITEFUNCTION, throw_away);
 
       // FIXME
       // The MDTM command fails for a directory on the servers I tested
       // so this is a means of testing for directories. It also means
       // I can't get the date of directories!
@@ -474,18 +476,18 @@ public:
                                  CURLINFO_CONTENT_LENGTH_DOWNLOAD, &fs);
               filesize = fs;
             }
         }
 
       setopt (CURLOPT_WRITEFUNCTION, write_data);
       setopt (CURLOPT_HEADERFUNCTION, 0);
       setopt (CURLOPT_FILETIME, 0);
-      url = "ftp://" + rep->host;
-      setopt (CURLOPT_URL, url.c_str ());
+      rep->url = "ftp://" + rep->host;
+      setopt (CURLOPT_URL, rep->url.c_str ());
 
       // The MDTM command seems to reset the path to the root with the
       // servers I tested with, so cd again into the correct path. Make
       // the path absolute so that this will work even with servers that
       // don't end up in the root after an MDTM command.
       cwd ("/" + path);
     }
 
@@ -557,21 +559,21 @@ private:
 
   void init (const std::string& user, const std::string& passwd,
              std::istream& is, std::ostream& os)
     {
       // No data transfer by default
       setopt (CURLOPT_NOBODY, 1);
 
       // Set the username and password
-      std::string userpwd = user;
+      rep->userpwd = user;
       if (! passwd.empty ())
-        userpwd += ":" + passwd;
-      if (! userpwd.empty ())
-        setopt (CURLOPT_USERPWD, userpwd.c_str ());
+        rep->userpwd += ":" + passwd;
+      if (! rep->userpwd.empty ())
+        setopt (CURLOPT_USERPWD, rep->userpwd.c_str ());
 
       // Define our callback to get called when there's data to be written.
       setopt (CURLOPT_WRITEFUNCTION, write_data);
 
       // Set a pointer to our struct to pass to the callback.
       setopt (CURLOPT_WRITEDATA, static_cast<void*> (&os));
 
       // Define our callback to get called when there's data to be read
