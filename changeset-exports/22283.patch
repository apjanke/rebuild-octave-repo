# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1471124958 14400
#      Sat Aug 13 17:49:18 2016 -0400
# Node ID 564203123065e8b1c585b1992910a8e31facf2e8
# Parent  cd2e24983670b329d353dba6b9a76cbe1024f26c
move single and double type conversion functions to ov.cc

* ov.h, ov.cc (octave_value::as_double, octave_value::as_double): New
functions.
(Fdouble): Move here from ov-re-mat.cc.
(Fsingle): Move here from ov-flt-re-mat.cc.

* ov-type-conv.h (octave_type_conv): New template function, replaces
OCTAVE_TYPE_CONV_BODY3 macro.  Change all uses.
(OCTAVE_TYPE_CONV_BODY): Simplify.

diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -54,17 +54,16 @@ along with Octave; see the file COPYING.
 #include "ov-float.h"
 #include "ov-flt-complex.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 #include "ops.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
@@ -805,79 +804,8 @@ octave_float_matrix::map (unary_mapper_t
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
 }
-
-DEFUN (single, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} single (@var{x})
-Convert @var{x} to single precision type.
-@seealso{double}
-@end deftypefn */)
-{
-  // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
-  // inside their own scopes, and we don't declare retval here to
-  // avoid a shadowed declaration warning.
-
-  if (args.length () != 1)
-    print_usage ();
-
-  if (args(0).is_diag_matrix ())
-    {
-      if (args(0).is_complex_type ())
-        {
-          OCTAVE_TYPE_CONV_BODY3 (single, octave_float_complex_diag_matrix,
-                                  octave_float_complex);
-        }
-      else
-        {
-          OCTAVE_TYPE_CONV_BODY3 (single, octave_float_diag_matrix,
-                                  octave_float_scalar);
-        }
-    }
-  else if (args(0).is_sparse_type ())
-    {
-      error ("single: sparse type does not support single precision");
-    }
-  else if (args(0).is_complex_type ())
-    {
-      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_complex_matrix,
-                              octave_float_complex);
-    }
-  else
-    {
-      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_matrix,
-                              octave_float_scalar);
-    }
-
-  return ovl ();
-}
-
-/*
-%!assert (class (single (1)), "single")
-%!assert (class (single (1 + i)), "single")
-%!assert (class (single (int8 (1))), "single")
-%!assert (class (single (uint8 (1))), "single")
-%!assert (class (single (int16 (1))), "single")
-%!assert (class (single (uint16 (1))), "single")
-%!assert (class (single (int32 (1))), "single")
-%!assert (class (single (uint32 (1))), "single")
-%!assert (class (single (int64 (1))), "single")
-%!assert (class (single (uint64 (1))), "single")
-%!assert (class (single (true)), "single")
-%!assert (class (single ("A")), "single")
-%!error (single (sparse (1)))
-%!test
-%! x = diag ([1 3 2]);
-%! y = single (x);
-%! assert (class (x), "double");
-%! assert (class (y), "single");
-%!test
-%! x = diag ([i 3 2]);
-%! y = single (x);
-%! assert (class (x), "double");
-%! assert (class (y), "single");
-*/
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -55,17 +55,16 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-lazy-idx.h"
 #include "ov-perm.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -930,96 +929,8 @@ octave_matrix::map (unary_mapper_t umap)
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
 }
-
-DEFUN (double, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} double (@var{x})
-Convert @var{x} to double precision type.
-@seealso{single}
-@end deftypefn */)
-{
-  // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
-  // inside their own scopes, and we don't declare retval here to
-  // avoid a shadowed declaration warning.
-
-  if (args.length () != 1)
-    print_usage ();
-
-  if (args(0).is_perm_matrix ())
-    {
-      OCTAVE_TYPE_CONV_BODY3 (double, octave_perm_matrix, octave_scalar);
-    }
-  else if (args(0).is_diag_matrix ())
-    {
-      if (args(0).is_complex_type ())
-        {
-          OCTAVE_TYPE_CONV_BODY3 (double, octave_complex_diag_matrix,
-                                  octave_complex);
-        }
-      else
-        {
-          OCTAVE_TYPE_CONV_BODY3 (double, octave_diag_matrix,
-                                  octave_scalar);
-        }
-    }
-  else if (args(0).is_sparse_type ())
-    {
-      if (args(0).is_complex_type ())
-        {
-          OCTAVE_TYPE_CONV_BODY3 (double, octave_sparse_complex_matrix,
-                                  octave_complex);
-        }
-      else
-        {
-          OCTAVE_TYPE_CONV_BODY3 (double, octave_sparse_matrix,
-                                  octave_scalar);
-        }
-    }
-  else if (args(0).is_complex_type ())
-    {
-      OCTAVE_TYPE_CONV_BODY3 (double, octave_complex_matrix,
-                              octave_complex);
-    }
-  else
-    {
-      OCTAVE_TYPE_CONV_BODY3 (double, octave_matrix, octave_scalar);
-    }
-
-  return ovl ();
-}
-
-/*
-%!assert (class (double (single (1))), "double")
-%!assert (class (double (single (1 + i))), "double")
-%!assert (class (double (int8 (1))), "double")
-%!assert (class (double (uint8 (1))), "double")
-%!assert (class (double (int16 (1))), "double")
-%!assert (class (double (uint16 (1))), "double")
-%!assert (class (double (int32 (1))), "double")
-%!assert (class (double (uint32 (1))), "double")
-%!assert (class (double (int64 (1))), "double")
-%!assert (class (double (uint64 (1))), "double")
-%!assert (class (double (true)), "double")
-%!assert (class (double ("A")), "double")
-%!test
-%! x = sparse (logical ([1 0; 0 1]));
-%! y = double (x);
-%! assert (class (x), "logical");
-%! assert (class (y), "double");
-%! assert (issparse (y));
-%!test
-%! x = diag (single ([1 3 2]));
-%! y = double (x);
-%! assert (class (x), "single");
-%! assert (class (y), "double");
-%!test
-%! x = diag (single ([i 3 2]));
-%! y = double (x);
-%! assert (class (x), "single");
-%! assert (class (y), "double");
-*/
diff --git a/libinterp/octave-value/ov-type-conv.h b/libinterp/octave-value/ov-type-conv.h
--- a/libinterp/octave-value/ov-type-conv.h
+++ b/libinterp/octave-value/ov-type-conv.h
@@ -70,38 +70,39 @@ octave_type_conv_body (const octave_valu
                 }
             }
         }
     }
 
   return retval;
 }
 
-#define OCTAVE_TYPE_CONV_BODY3(NAME, MATRIX_RESULT_T, SCALAR_RESULT_T)  \
-                                                                        \
+template <typename MATRIX_RESULT_T, typename SCALAR_RESULT_T>
+octave_value
+octave_type_conv (const octave_value& arg, const char *t_name)
+{
+  octave_value retval;
+
+  int t_result = MATRIX_RESULT_T::static_type_id ();
+
+  retval = octave_type_conv_body (arg, t_name, t_result);
+
+  if (retval.is_undefined ())
+    {
+      std::string arg_tname = arg.type_name ();
+
+      std::string result_tname = arg.numel () == 1
+        ? SCALAR_RESULT_T::static_type_name ()
+        : MATRIX_RESULT_T::static_type_name ();
+
+      err_invalid_conversion (arg_tname, result_tname);
+    }
+
+  return retval;
+}
+
+#define OCTAVE_TYPE_CONV_BODY(NAME)                                     \
   if (args.length () != 1)                                              \
     print_usage ();                                                     \
                                                                         \
-  octave_value retval;                                                  \
-                                                                        \
-  const octave_value arg = args(0);                                     \
-                                                                        \
-  int t_result = MATRIX_RESULT_T::static_type_id ();                    \
-                                                                        \
-  retval = octave_type_conv_body (arg, #NAME, t_result);                \
-  if (retval.is_undefined ())                                           \
-    {                                                                   \
-      std::string arg_tname = arg.type_name ();                         \
-                                                                        \
-      std::string result_tname = arg.numel () == 1                      \
-        ? SCALAR_RESULT_T::static_type_name ()                          \
-        : MATRIX_RESULT_T::static_type_name ();                         \
-                                                                        \
-      err_invalid_conversion (arg_tname, result_tname);                 \
-    }                                                                   \
-                                                                        \
-  return retval;
-
-#define OCTAVE_TYPE_CONV_BODY(NAME)                             \
-  OCTAVE_TYPE_CONV_BODY3 (NAME, octave_ ## NAME ## _matrix,     \
-                          octave_ ## NAME ## _scalar)
+  return octave_type_conv<octave_ ## NAME ## _matrix, octave_ ## NAME ## _scalar> (args(0), #NAME);
 
 #endif
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -69,16 +69,17 @@ along with Octave; see the file COPYING.
 #include "ov-oncleanup.h"
 #include "ov-cs-list.h"
 #include "ov-colon.h"
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "ov-usr-fcn.h"
 #include "ov-fcn-handle.h"
 #include "ov-fcn-inline.h"
+#include "ov-type-conv.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
 #include "ov-lazy-idx.h"
 #include "ov-java.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
@@ -1179,16 +1180,148 @@ octave_value::maybe_mutate (void)
       if (--rep->count == 0)
         delete rep;
 
       rep = tmp;
     }
 }
 
 octave_value
+octave_value::as_double (void) const
+{
+  if (is_perm_matrix ())
+    return octave_type_conv<octave_perm_matrix, octave_scalar> (*this, "double");
+  else if (is_diag_matrix ())
+    {
+      if (is_complex_type ())
+        return octave_type_conv<octave_complex_diag_matrix, octave_complex> (*this, "double");
+      else
+        return octave_type_conv<octave_diag_matrix, octave_scalar> (*this, "double");
+    }
+  else if (is_sparse_type ())
+    {
+      if (is_complex_type ())
+        return octave_type_conv<octave_sparse_complex_matrix, octave_complex> (*this, "double");
+      else
+        return octave_type_conv<octave_sparse_matrix, octave_scalar> (*this, "double");
+    }
+  else if (is_complex_type ())
+    return octave_type_conv<octave_complex_matrix, octave_complex> (*this, "double");
+  else
+    return octave_type_conv<octave_matrix, octave_scalar> (*this, "double");
+
+  return ovl ();
+}
+
+DEFUN (double, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} double (@var{x})
+Convert @var{x} to double precision type.
+@seealso{single}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return ovl (args(0).as_double ());
+}
+
+/*
+%!assert (class (double (single (1))), "double")
+%!assert (class (double (single (1 + i))), "double")
+%!assert (class (double (int8 (1))), "double")
+%!assert (class (double (uint8 (1))), "double")
+%!assert (class (double (int16 (1))), "double")
+%!assert (class (double (uint16 (1))), "double")
+%!assert (class (double (int32 (1))), "double")
+%!assert (class (double (uint32 (1))), "double")
+%!assert (class (double (int64 (1))), "double")
+%!assert (class (double (uint64 (1))), "double")
+%!assert (class (double (true)), "double")
+%!assert (class (double ("A")), "double")
+%!test
+%! x = sparse (logical ([1 0; 0 1]));
+%! y = double (x);
+%! assert (class (x), "logical");
+%! assert (class (y), "double");
+%! assert (issparse (y));
+%!test
+%! x = diag (single ([1 3 2]));
+%! y = double (x);
+%! assert (class (x), "single");
+%! assert (class (y), "double");
+%!test
+%! x = diag (single ([i 3 2]));
+%! y = double (x);
+%! assert (class (x), "single");
+%! assert (class (y), "double");
+*/
+
+octave_value
+octave_value::as_single (void) const
+{
+  if (is_diag_matrix ())
+    {
+      if (is_complex_type ())
+        return octave_type_conv<octave_float_complex_diag_matrix, octave_float_complex> (*this, "single");
+      else
+        return octave_type_conv<octave_float_diag_matrix, octave_float_scalar> (*this, "single");
+    }
+  else if (is_sparse_type ())
+    error ("single: sparse type does not support single precision");
+  else if (is_complex_type ())
+    return octave_type_conv<octave_float_complex_matrix, octave_float_complex> (*this, "single");
+  else
+    return octave_type_conv<octave_float_matrix, octave_float_scalar> (*this, "single");
+
+  return octave_value ();
+}
+
+DEFUN (single, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} single (@var{x})
+Convert @var{x} to single precision type.
+@seealso{double}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_single ();
+
+  return ovl ();
+}
+
+/*
+%!assert (class (single (1)), "single")
+%!assert (class (single (1 + i)), "single")
+%!assert (class (single (int8 (1))), "single")
+%!assert (class (single (uint8 (1))), "single")
+%!assert (class (single (int16 (1))), "single")
+%!assert (class (single (uint16 (1))), "single")
+%!assert (class (single (int32 (1))), "single")
+%!assert (class (single (uint32 (1))), "single")
+%!assert (class (single (int64 (1))), "single")
+%!assert (class (single (uint64 (1))), "single")
+%!assert (class (single (true)), "single")
+%!assert (class (single ("A")), "single")
+%!error (single (sparse (1)))
+%!test
+%! x = diag ([1 3 2]);
+%! y = single (x);
+%! assert (class (x), "double");
+%! assert (class (y), "single");
+%!test
+%! x = diag ([i 3 2]);
+%! y = single (x);
+%! assert (class (x), "double");
+%! assert (class (y), "single");
+*/
+
+ octave_value
 octave_value::single_subsref (const std::string& type,
                               const octave_value_list& idx)
 {
   std::list<octave_value_list> i;
 
   i.push_back (idx);
 
   return rep->subsref (type, i);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -381,16 +381,21 @@ public:
 
   octave_value squeeze (void) const
   { return rep->squeeze (); }
 
   // The result of full().
   octave_value full_value (void) const
   { return rep->full_value (); }
 
+  // Type conversions.
+
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   octave_base_value *try_narrowing_conversion (void)
   { return rep->try_narrowing_conversion (); }
 
   // Close to dims (), but can be overloaded for classes.
   Matrix size (void)
   { return rep->size (); }
 
   octave_idx_type numel (const octave_value_list& idx)
