# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1218048016 14400
#      Wed Aug 06 14:40:16 2008 -0400
# Node ID b3e667f1ab4ca5064c6a4bac2957f4ed0de0780b
# Parent  63dbb85452ccda8a032ba8548083545de03d8f4d
call backtrace_error_message in eval functions, not when popping stack

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2008-08-06  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op,
+	octave_user_script::do_multi_index_op):
+	Call octave_call_stack::backtrace_error_message.
+	* toplev.h (octave_call_stack::do_pop): Don't call
+	backtrace_error_message here.
+	* toplev.cc, toplev.h (octave_call_stack::do_backtrace_error_message):
+	Rename from octave_call_stack::backtrace_error_message.
+	* toplev.h (octave_call_stack::backtrace_error_message):
+	New public static function. 
+
 2008-08-05  John W. Eaton  <jwe@octave.org>
 
 	* gripes.cc (gripe_truncated_conversion,
 	gripe_logical_conversion): Don't declare as extern here.
 	* utils.cc (octave_format, octave_vformat): Likewise.
 	* pr-output.cc (octave_print_internal (std::ostream&, const Cell&,
 	bool, int, bool)): Likewise.
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -129,16 +129,19 @@ octave_user_script::do_multi_index_op (i
 
 		  cmd_list->eval ();
 
 		  if (tree_return_command::returning)
 		    tree_return_command::returning = 0;
 
 		  if (tree_break_command::breaking)
 		    tree_break_command::breaking--;
+
+		  if (error_state)
+		    octave_call_stack::backtrace_error_message ();
 		}
 	      else
 		::error ("max_recursion_limit exceeded");
     	    }
 	}
       else
 	error ("invalid call to script");
     }
@@ -439,17 +442,20 @@ octave_user_function::do_multi_index_op 
 
     if (tree_return_command::returning)
       tree_return_command::returning = 0;
 
     if (tree_break_command::breaking)
       tree_break_command::breaking--;
 
     if (error_state)
-      goto abort;
+      {
+	octave_call_stack::backtrace_error_message ();
+	goto abort;
+      }
     
     // Copy return values out.
 
     if (ret_list && ! is_inline_function ())
       {
 	ret_list->initialize_undefined_elements (my_name, nargout, Matrix ());
 
 	Cell varargout;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -468,17 +468,17 @@ octave_call_stack::do_goto_base_frame (v
   curr_frame = cs.size ();
 
   cs.push_back (tmp);
 
   symbol_table::set_scope_and_context (tmp.scope, tmp.context);
 }
 
 void
-octave_call_stack::backtrace_error_message (void) const
+octave_call_stack::do_backtrace_error_message (void) const
 {
   if (error_state > 0)
     {
       error_state = -1;
 
       error ("called from:");
     }
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -261,16 +261,22 @@ public:
   static void unwind_pop (void *) { pop (); }
 
   static void clear (void)
   {
     if (instance_ok ())
       instance->do_clear ();
   }
 
+  static void backtrace_error_message (void)
+  {
+    if (instance_ok ())
+      instance->do_backtrace_error_message ();
+  }
+
 private:
 
   // The current call stack.
   std::deque<call_stack_elt> cs;
 
   size_t curr_frame;
 
   static octave_call_stack *instance;
@@ -375,30 +381,27 @@ private:
   void do_goto_caller_frame (void);
 
   void do_goto_base_frame (void);
 
   void do_pop (void)
   {
     if (cs.size () > 1)
       {
-	if (error_state)
-	  backtrace_error_message ();
-
 	const call_stack_elt& elt = cs.back ();
 	curr_frame = elt.prev;
 	cs.pop_back ();
 	const call_stack_elt& new_elt = cs[curr_frame];
 	symbol_table::set_scope_and_context (new_elt.scope, new_elt.context);
       }
   }
 
   void do_clear (void) { cs.clear (); }
 
-  void backtrace_error_message (void) const;
+  void do_backtrace_error_message (void) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
