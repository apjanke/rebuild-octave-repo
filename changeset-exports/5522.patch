# HG changeset patch
# User jwe
# Date 1130700823 0
#      Sun Oct 30 19:33:43 2005 +0000
# Node ID 98691610b386a1ebb3ae94d6b0ce0f16e9a8f545
# Parent  9d45e5bfdaff408e6d98280bf90323f92fe37f9c
[project @ 2005-10-30 19:33:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2005-10-30  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/gplot.l (gnuplot::set_gnuplot_exe,
+	gnuplot::do_set_gnuplot_exe): New functions.
+	(gnuplot_binary): Call gnuplot::set_gnuplot_exe here.
+
+	* DLD-FUNCTIONS/gplot.l (gnuplot::set_gnuplot_use_title_option,
+	gnuplot::do_set_gnuplot_use_title_option): New functions.
+	(gnuplot_use_title_option):
+	Call gnuplot::set_gnuplot_use_title_option here.
+
 2005-10-27  James R. Van Zandt  <jrvz@comcast.net>
 
 	* mappers.cc: Doc fix for lgamma.
 	* DLD-FUNCTIONS/gammainc.cc (Fgammainc): Doc fix.
 
 2005-10-27  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Declare mrowsA volatile.
diff --git a/src/DLD-FUNCTIONS/gplot.l b/src/DLD-FUNCTIONS/gplot.l
--- a/src/DLD-FUNCTIONS/gplot.l
+++ b/src/DLD-FUNCTIONS/gplot.l
@@ -754,16 +754,28 @@ public:
   }
 
   static void show (const string_vector& argv)
   {
     if (ensure_plot_stream ())
       instance->do_show (argv);
   }
 
+  static void set_gnuplot_exe (const std::string& exe)
+  {
+    if (ensure_instance ())
+      instance->do_set_gnuplot_exe (exe);
+  }
+
+  static void set_gnuplot_use_title_option (bool opt)
+  {
+    if (ensure_instance ())
+      instance->do_set_gnuplot_use_title_option (opt);
+  }
+
   // XXX FIXME XXX -- should only remove tmp files associated with
   // gnuplot?
   static void cleanup_tmp_files (void) { ::cleanup_tmp_files (); }
 
   static void plot (const string_vector& argv)
   {
     if (ensure_plot_stream ())
       instance->do_plot (argv);
@@ -810,16 +822,20 @@ private:
   void do_send_raw (const std::string& cmd);
 
   void do_clear (void);
 
   void do_set (const string_vector& argv);
 
   void do_show (const string_vector& argv);
 
+  void do_set_gnuplot_exe (const std::string& exe) { gnuplot_exe = exe; }
+
+  void do_set_gnuplot_use_title_option (bool opt) { use_title_option = opt; }
+
   void do_plot (const string_vector& argv);
 
   void do_init (void);
 
   std::string
   makeplot (std::string caller, std::string args) throw (gpt_parse_error);
 
   std::string handle_title (int& lasttok);
@@ -1471,17 +1487,22 @@ set_string_var (std::string& var, const 
     var = s;
 
   return retval;
 }
 
 static int
 gnuplot_binary (void)
 {
-  return set_string_var (Vgnuplot_binary, "gnuplot_binary");
+  int status = set_string_var (Vgnuplot_binary, "gnuplot_binary");
+
+  if (status == 0)
+    gnuplot::set_gnuplot_exe (Vgnuplot_binary);
+
+  return status;
 }
 
 static int
 gnuplot_command_plot (void)
 {
   return set_string_var (Vgnuplot_command_plot, "gnuplot_command_plot");
 }
 
@@ -1527,16 +1548,18 @@ gnuplot_command_end (void)
   return set_string_var (Vgnuplot_command_end, "gnuplot_command_end");
 }
 
 static int
 gnuplot_use_title_option (void)
 {
   Vgnuplot_use_title_option = check_preference ("gnuplot_use_title_option");
 
+  gnuplot::set_gnuplot_use_title_option (Vgnuplot_use_title_option);
+
   return 0;
 }
 
 void
 gnuplot::do_init (void)
 {
   static bool gnuplot_initialized = false;
 
