# HG changeset patch
# User jwe
# Date 1069611612 0
#      Sun Nov 23 18:20:12 2003 +0000
# Node ID 6d26997e1fc351f6d39d22230263568eadbcaabf
# Parent  eff8f977508cd953fd33d154339d0752bf2f3ab7
[project @ 2003-11-23 18:18:58 by jwe]

diff --git a/liboctave/so-array.cc b/liboctave/so-array.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/so-array.cc
@@ -0,0 +1,148 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <iostream>
+
+#include "Array.h"
+#include "Array.cc"
+#include "ArrayN.h"
+#include "ArrayN.cc"
+// XXX FIXME XXX -- we are including the MArray{,2,N}.h files just for
+// their gripe_nonconformant function decls.
+#include "MArray.h"
+#include "MArray2.h"
+#include "MArrayN.h"
+#include "MArray-defs.h"
+#include "boolMatrix.h"
+#include "boolNDArray.h"
+#include "mx-op-defs.h"
+#include "so-array.h"
+
+INSTANTIATE_ARRAY_AND_ASSIGN (std::streamoff);
+
+template class ArrayN<std::streamoff>;
+
+boolNDArray
+streamoff_array::all (int dim) const
+{
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
+}
+
+boolNDArray
+streamoff_array::any (int dim) const
+{
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
+}
+
+streamoff_array&
+operator += (streamoff_array& a, const std::streamoff& s)
+{
+  DO_VS_OP2 (std::streamoff, a, +=, s)
+  return a;
+}
+
+streamoff_array&
+operator -= (streamoff_array& a, const std::streamoff& s)
+{
+  DO_VS_OP2 (std::streamoff, a, -=, s);
+  return a;
+}
+
+streamoff_array&
+operator += (streamoff_array& a, const streamoff_array& b)
+{
+  int l = a.length ();
+  if (l > 0)
+    {
+      int bl = b.length ();
+      if (l != bl)
+	gripe_nonconformant ("operator +=", l, bl);
+      else
+	DO_VV_OP2 (std::streamoff, a, +=, b);
+    }
+  return a;
+}
+
+streamoff_array&
+operator -= (streamoff_array& a, const streamoff_array& b)
+{
+  int l = a.length ();
+  if (l > 0)
+    {
+      int bl = b.length ();
+      if (l != bl)
+	gripe_nonconformant ("operator -=", l, bl);
+      else
+	DO_VV_OP2 (std::streamoff, a, -=, b);
+    }
+  return a;
+}
+
+int
+streamoff_array::compute_index (Array<int>& ra_idx,
+				const dim_vector& dimensions)
+{
+  return ::compute_index (ra_idx, dimensions);
+}
+
+SND_CMP_OP (mx_el_eq, ==, std::streamoff, , streamoff_array, , FBM)
+SND_CMP_OP (mx_el_ne, !=, std::streamoff, , streamoff_array, , TBM)
+
+NDS_CMP_OP (mx_el_eq, ==, streamoff_array, , std::streamoff, , FBM)
+NDS_CMP_OP (mx_el_ne, !=, streamoff_array, , std::streamoff, , TBM)
+
+NDND_CMP_OP (mx_el_eq, ==, streamoff_array, , streamoff_array, , FBM, TBM)
+NDND_CMP_OP (mx_el_ne, !=, streamoff_array, , streamoff_array, , TBM, FBM)
+
+NDND_BIN_OP (streamoff_array, operator +,
+	     streamoff_array, streamoff_array, mx_inline_add)
+
+NDND_BIN_OP (streamoff_array, operator -,
+	     streamoff_array, streamoff_array, mx_inline_subtract)
+
+
+NDS_BIN_OP (streamoff_array, operator +,
+	    streamoff_array, std::streamoff, mx_inline_add)
+
+NDS_BIN_OP (streamoff_array, operator -,
+	    streamoff_array, std::streamoff, mx_inline_subtract)
+
+
+SND_BIN_OP (streamoff_array, operator +,
+	    std::streamoff, streamoff_array, mx_inline_add)
+
+SND_BIN_OP (streamoff_array, operator -,
+	    std::streamoff, streamoff_array, mx_inline_subtract)
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/so-array.h b/liboctave/so-array.h
new file mode 100644
--- /dev/null
+++ b/liboctave/so-array.h
@@ -0,0 +1,107 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_streamoff_array_h)
+#define octave_streamoff_array_h 1
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma interface
+#endif
+
+#include <iostream>
+
+#include "ArrayN.h"
+#include "mx-op-defs.h"
+
+class boolNDArray;
+
+// Stream offsets.
+
+class streamoff_array : public ArrayN<std::streamoff>
+{
+public:
+
+  streamoff_array (void) : ArrayN<std::streamoff> () { }
+
+  streamoff_array (const dim_vector& dv,
+		   const std::streamoff& val = resize_fill_value ())
+    : ArrayN<std::streamoff> (dv, val) { }
+
+  streamoff_array (const ArrayN<std::streamoff>& sa)
+    : ArrayN<std::streamoff> (sa) { }
+
+  streamoff_array (const streamoff_array& sa)
+    : ArrayN<std::streamoff> (sa) { }
+
+  ~streamoff_array (void) { }
+
+  streamoff_array& operator = (const streamoff_array& a)
+    {
+      if (this != &a)
+	ArrayN<std::streamoff>::operator = (a);
+
+      return *this;
+    }
+
+  streamoff_array squeeze (void) const
+    { return ArrayN<std::streamoff>::squeeze (); }
+
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
+
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
+  static std::streamoff resize_fill_value (void) { return 0; }
+};
+
+streamoff_array& operator += (streamoff_array& l, const std::streamoff& r);
+streamoff_array& operator -= (streamoff_array& l, const std::streamoff& r);
+
+streamoff_array& operator += (streamoff_array& l, const streamoff_array& r);
+streamoff_array& operator -= (streamoff_array& l, const streamoff_array& r);
+
+NDCMP_OP_DECL (mx_el_eq, std::streamoff, streamoff_array);
+NDCMP_OP_DECL (mx_el_ne, std::streamoff, streamoff_array);
+
+NDCMP_OP_DECL (mx_el_eq, streamoff_array, std::streamoff);
+NDCMP_OP_DECL (mx_el_ne, streamoff_array, std::streamoff);
+
+NDCMP_OP_DECL (mx_el_eq, streamoff_array, streamoff_array);
+NDCMP_OP_DECL (mx_el_ne, streamoff_array, streamoff_array);
+
+BIN_OP_DECL (streamoff_array, operator +, streamoff_array, streamoff_array);
+BIN_OP_DECL (streamoff_array, operator -, streamoff_array, streamoff_array);
+
+BIN_OP_DECL (streamoff_array, operator +, streamoff_array, std::streamoff);
+BIN_OP_DECL (streamoff_array, operator -, streamoff_array, std::streamoff);
+
+BIN_OP_DECL (streamoff_array, operator +, std::streamoff, streamoff_array);
+BIN_OP_DECL (streamoff_array, operator -, std::streamoff, streamoff_array);
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,17 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-streamoff.cc: Install increment and decrement operators.
 	* ov-streamoff.h (octave_streamoff::increment,
 	octave_streamoff::decrement): New functions.
 
+	* ov-streamoff.h, ov-streamoff.cc: Move streamoff_array class to
+	liboctave/so-array.h and liboctave/so-array.cc.
+
 	* oct-stream.cc (octave_stream::seek): Extract std::streamoff from
 	tc_offset instead of int.
 
 	* ov-re-mat.cc (octave_matrix::double_value): Use numel, not length.
 
 	* ov-re-mat.cc (octave_matrix::streamoff_array_value): New function.
 	* ov-re-mat.h: Provide decl.
 
