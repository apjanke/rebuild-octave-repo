# HG changeset patch
# User jwe
# Date 1045284897 0
#      Sat Feb 15 04:54:57 2003 +0000
# Node ID f30803e587ac691ba45ffa88eaf550841a2cd4e7
# Parent  dcdca99fe2f010512af84580a520a01f89a441df
[project @ 2003-02-15 04:54:57 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -11,21 +11,16 @@ could help you; we'd also like to send y
 This list is not exclusive -- there are many other things that might
 be good projects, but it might instead be something we already have,
 so check with bug-octave@bevo.che.wisc.edu before you start.
 
 ---------
 Numerical:
 ---------
 
-  * Allow sum, prod, cumsum, and cumprod to take a second argument
-    that specifies the dimension over which to operate.
-
-  * Merge control stuff.
-
   * Improve logm, and sqrtm.
 
   * Improve complex mapper functions.  See W. Kahan, ``Branch Cuts for
     Complex Elementary Functions, or Much Ado About Nothing's Sign
     Bit'' (in The State of the Art in Numerical Analysis, eds. Iserles
     and Powell, Clarendon Press, Oxford, 1987) for explicit
     trigonometric formulae.
 
@@ -71,25 +66,18 @@ Numerical:
     upper limit on the number of arguments.
 
   * Check matrix classes for proper handling of empty matrices.
 
   * Make operations with empty matrices produce empty matrices, for
     compatibility with Matlab (but only if Matlab 5 still does things
     this way). For example:  [1, 2] * [] ==> [].
 
-  * Should any ([]) return [] or 0?  What about all ([])?
-
   * Improve design of ODE, DAE, classes.
 
-  * Make it possible to specify a time which dassl and lsode should
-    not integrate past.
-
-  * Add interface to daspk (new version of dassl).
-
   * Extend meaning of .* to include v .* M or M .* v (where v is a
     column vector with the same number of rows as M) to scale rows of
     M by elements of v.  Similarly, if w is a row vector with as many
     columns as M, then either w .* M or M .* w scales the columns of
     M.
 
   * Given two vectors x and y of length m and n, implement a function
     outer (x, y, f) that returns an m-by-n matrix with entries
@@ -140,18 +128,16 @@ Graphics:
 
   * Implement clf, gcf, get, set, orient, print, close, etc. in
     Matlab-compatible ways.
 
   * Make it possible to check the current graphics terminal type.
 
   * If possible, pass data to gnuplot without using temporary files.
 
-  * If using temporary files, delete them when gnuplot exits.
-
   * If possible, pass binary data to gnuplot to speed things up.
 
   * If using gnuplot, consider setting a smaller default for the
     `zero' value (e.g., set zero sqrt (realmin) or something).
 
 -------
 Strings:
 -------
@@ -228,28 +214,23 @@ Input/Output:
 
   * Make the cutoff point for changing to packed storage a
     user-preference variable with default value 8192.
 
   * Make it possible to load other image formats (ppm, pbm, etc. would
     probably be best since there are already filters to convert to
     these formats from others.)
 
-  * Make ascii load and save work for Inf and NaN.  (This is really a
-    problem with the functions for reading floats in the GNU iolib.)
-
   * Complain if there is not enough disk space available (I think
     there is simply not enough error checking in the code that handles
     writing data).
 
   * Make it possible to tie arbitrary input and output streams
     together, similar to the way iostreams can be tied together.
 
-  * Allow comments in number-only data files.
-
 -----------
 Interpreter:
 -----------
 
   * Allow customization of the debug prompt.
 
   * For the keyboard function, parse return (or quit) more
     intelligently so that something like
@@ -269,39 +250,23 @@ Interpreter:
     function is parsed.
 
   * Fix the parser so that
 
       if (expr) 'this is a string' end
 
     is parsed as IF expr STRING END.
 
-  * For indexing operations, allow `$' to indicate the last element.
-    For example, b = a (3:$, 1:$-1).  This means b is a, except for
-    its first 2 rows and last column.  Note that `$' must be able to
-    appear in arbitrarily complex expressions, so copying the the
-    current implementation of `:' won't work. 
-
-  * If foo.oct and foo.m both exist in the LOADPATH, Octave will
-    always find foo.oct, even if foo.m appears earlier in the list of
-    directories.  This should be fixed (in the kpathsearch library) to
-    find the first .oct or .m file in the path, and only prefer .oct
-    over .m if both files are in the same directory.
-
   * Consider grouping all preference variables in a structure instead
     of further polluting the namespace.  Maybe `Octave_options.xxx'?
 
   * Rewrite functions in input.cc to do the right thing in all cases
     of using readline, forced interactive behavior, echoing of input,
     etc.
 
-  * Make it possible to redefine built-in variables and functions.
-    (Fix whatever it is that is happening with clear for built-in
-    variables.)
-
   * Consider making linspace() and logspace() return the value
     corresponding to the first argument if the number of requested
     points is 1.
 
   * Consider allowing an arbitrary property list to be attached to any
     variable.  This could be a more general way to handle the help
     string that can currently be added with `document'.
 
@@ -312,40 +277,29 @@ Interpreter:
     exit.
 
   * Make the interpreter run faster.
 
   * Make it possible to disable or enable all warnings on an
     individual basis from the command line or via some built-in
     structure variable.
 
-  * Make warnings also give some indication about the location of the
-    code that triggers the warning.
-
   * Warn about complex comparisons?  Could just use double_value() or
     matrix_value() instead of explicit conversions to real types.  For
     this to really be useful, some additional information must be
     available to point to the location of the code that triggers the
     warning.
 
-  * Consider making it possible to have arrays of structures, and some
-    way of indexing them.
+  * Allow arbitrary lower bounds for array indexing.
 
-  * Allow arbitrary lower bounds for array indexing.  (Watch out for
-    the additional conflict with zero-one style indexing.)
-
-  * Recursive problems.
+  * Improve performance of recursive function calls.
 
   * Improve the way ignore_function_time_stamp works to allow
     selecting by individual directories or functions.
 
-  * Make it possible to ask exist() to only look for certain classes
-   of variables, functions, files, etc. rather than always looking for
-   everything.
-
   * Add a command-line option to tell Octave to just do syntax
     checking and not execute statements.
 
   * Is it necessary for do_binary_op and do_unary_op to be friends of
     the tree_constant class.
 
   * Clean up symtab and variable stuff.
 
@@ -403,43 +357,24 @@ Interpreter:
 
   * It would be nice if output from the Fortran routines could be
     passed through the pager.
 
   * Attempt to recognize common subexpressions in the parser.
 
   * Handle arrays with more than two dimensions.
 
-  * Consider making assignment statements like
-
-      M (i_idx, j_idx) = RHS
-
-    produce the value of RHS instead of the value of M.
-
   * Consider making it possible to specify an empty matrix with a
     syntax like [](e1, e2).  Of course at least one of the expressions
     must be zero...
 
-  * Eliminate force_numeric and make_numeric functions.
-
   * Is Matrix::fortran_vec() really necessary?
 
   * print_usage() should set error_state in most cases?
 
-  * Make statements like this
-
-      foo bar baz
-
-    turn into function calls like this:
-
-      foo ("bar", "baz")
-
-    This is pretty ugly and introduces some conflicts, so I don't
-    think it is a good idea.
-
   * Add a command that works like bash's `builtin' command.
 
   * Handle end-of-line comments correctly in parse trees for use with
     the type command.
 
   * Clean up eye, eval, feval, keyboard, input, ones, zeros.
 
   * It would be nice to have an interactive debugger.
@@ -449,17 +384,17 @@ Interpreter:
   * Rewrite whos and the symbol_record_info class.  Write a built-in
     function that gives all the basic information, then write who and
     whos as M-files.
 
   * Make whos work for structure elements:
 
       prot  type               rows   cols  name
       ====  ====               ====   ====  ====
-      wd   matrix                m      n  struct.x
+      wd   matrix                m      n   struct.field
 
   * Allow who to return information as a list of strings.
 
   * On systems that support matherr(), make it possible for users to
     enable the printing of warning messages.
 
   * Make it possible to mark variables and functions as read-only.
 
@@ -493,29 +428,19 @@ History:
 
   * Fix history problems -- core dump if multiple processes are
     writing to the same history file?
 
 ------------------------------
 Configuration and Installation:
 ------------------------------
 
-  * Make Octave as independent of the particular readline version as
-    possible.
-
   * Add an --enable-pathsearch option to configure to make it possible
     to configure and run without kpathsea. 
 
-  * Make configure take more defaults from the environment.  It should
-    definitely pay attention to CFLAGS, CXXFLAGS, FFLAGS, etc.
-
-  * Should --enable-lite-kernel imply --enable-shared?
-
-  * Should --enable-dl imply --enable-shared?
-
   * Makefile changes:
       -- eliminate for loops
       -- define shell commands or eliminate them
       -- verify distclean
       -- consolidate targets
 
   * Make it possible to configure so that installed binaries and
     shared libraries are stripped.
@@ -523,50 +448,39 @@ Configuration and Installation:
   * Create a docs-only distribution?
 
 ------------------------------
 Documentation and On-Line Help:
 ------------------------------
 
   * Document new features.
       -- history-search-{back,for}ward.
-      -- try/catch.
       -- Other stuff mentioned in the NEWS file.
 
   * Improve the Texinfo Documentation for the interpreter.  It would
     be useful to have lots more examples, to not have so many forward
     references, and to not have very many simple lists of functions.
 
   * The docs should mention something about efficiency and that using
     array operations is almost always a good idea for speed.
 
   * Texinfo documentation for the C++ classes.
 
   * Support multiple info files, perhaps allowing one or more in each
     directory in the LOADPATH, so that local collections of M-files
     could be documented with Info.
 
-  * Figure out a good way to have functions and variables documented
-    in only one place.
-
   * Improve help messages for operators and keywords in help.cc.
 
   * Make index entries more consistent to improve behavior of `help -i'.
 
   * Make `help -i' try to find a whole word match first.
 
   * Allow help for local additions to be accessible with help -i.
 
-  * Make the arrow keys work in the info reader.
-
-  * Update Info to be based on the current Texinfo release.
-
-  * Should info/terminal.c include definitions for PC, BC, UP, and
-    ospeed on all systems?
-
   * Clean up help stuff.
 
   * Demo files.
 
   * As the number of m-files with octave grows perhaps a 'Contents.m'
     file for each toolbox (directory) would be appropriate so one
     knows exactly what functions are in a toolbox with a quick look.
     It would be best to generate information for each function directly
@@ -612,23 +526,16 @@ Tests:
 	   o resizing
 
   * Tests for all internal functions.
 
 -----------
 Programming:
 -----------
 
-  * Move toward using more stuff from standard C++ library.
-
-  * More C++/Fortran cleanups.
-
-  * It is likely that there are still some memory leaks.  Hunt then down
-    and plug them. 
-
   * Better error messages for missing operators?
 
   * Eliminate duplicate enums in pt-exp.cc, pt-const.cc, and ov.cc.
 
   * Handle octave_print_internal() stuff at the liboctave level.  Then
     the octave_value classes could just call on the print() methods
     for the underlying classes.
 
@@ -645,25 +552,18 @@ Programming:
     -- Add a `Makefile' target to the Makefiles.
     -- Comments on #else and #endif preprocessor commands.
     -- Change error message format to match standards everywhere.
 
   * Use STL stuff instead of libg++ lists, maps, and stacks.
 
   * Eliminate more global variables.
 
-  * Encapsulate readline in a class.  Include interface to stuff like
-    blink_matching_paren. 
-
-  * Encapsulate resource stuff in a class.
-
   * Move procstream to liboctave.
 
-  * Replace more C-style vectors with Array<T> stuff.
-
   * Use references and classes in more places.
 
   * Share more code among the various *_options functions.
 
 -------------
 Miscellaneous:
 -------------
 
