# HG changeset patch
# User Daniel Kraft <dkraft@google.com>
# Date 1462439120 -7200
#      Thu May 05 11:05:20 2016 +0200
# Node ID d16d137eb48567f26b93449ba6acd415a668e1e8
# Parent  23a610a3f0012c2153afb6250125f873aed21681
[maint] Move profiler scripts to own directory.

* scripts/profiler: New directory for profiler-related m files.

* scripts/general/profile.m, profexplore.m, profshow.m:
Move to the new directory.

* scripts/general/module.mk: Remove moved m files.

* scripts/profiler/module.mk: New file to hook in to build system.

* scripts/module.mk: Add new directory.

diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -55,19 +55,16 @@ scripts_general_FCN_FILES = \
   scripts/general/nargoutchk.m \
   scripts/general/nextpow2.m \
   scripts/general/nthargout.m \
   scripts/general/num2str.m \
   scripts/general/pol2cart.m \
   scripts/general/polyarea.m \
   scripts/general/postpad.m \
   scripts/general/prepad.m \
-  scripts/general/profexplore.m \
-  scripts/general/profile.m \
-  scripts/general/profshow.m \
   scripts/general/quadgk.m \
   scripts/general/quadl.m \
   scripts/general/quadv.m \
   scripts/general/rad2deg.m \
   scripts/general/randi.m \
   scripts/general/rat.m \
   scripts/general/repmat.m \
   scripts/general/rot90.m \
diff --git a/scripts/general/profile.m b/scripts/general/profile.m
deleted file mode 100644
--- a/scripts/general/profile.m
+++ /dev/null
@@ -1,153 +0,0 @@
-## Copyright (C) 2012-2015 Daniel Kraft
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn  {} {} profile on
-## @deftypefnx {} {} profile off
-## @deftypefnx {} {} profile resume
-## @deftypefnx {} {} profile clear
-## @deftypefnx {} {@var{S} =} profile ("status")
-## @deftypefnx {} {@var{T} =} profile ("info")
-## Control the built-in profiler.
-##
-## @table @code
-## @item profile on
-## Start the profiler, clearing all previously collected data if there is any.
-##
-## @item profile off
-## Stop profiling.  The collected data can later be retrieved and examined
-## with @code{T = profile ("info")}.
-##
-## @item profile clear
-## Clear all collected profiler data.
-##
-## @item profile resume
-## Restart profiling without clearing the old data.  All newly collected
-## statistics are added to the existing ones.
-##
-## @item @var{S} = profile ("status")
-## Return a structure with information about the current status of the
-## profiler.  At the moment, the only field is @code{ProfilerStatus} which is
-## either @qcode{"on"} or @qcode{"off"}.
-##
-## @item @var{T} = profile ("info")
-## Return the collected profiling statistics in the structure @var{T}.  The
-## flat profile is returned in the field @code{FunctionTable} which is an
-## array of structures, each entry corresponding to a function which was called
-## and for which profiling statistics are present.  In addition, the field
-## @code{Hierarchical} contains the hierarchical call tree.  Each node has an
-## index into the @code{FunctionTable} identifying the function it corresponds
-## to as well as data fields for number of calls and time spent at this level
-## in the call tree.
-## @seealso{profshow, profexplore}
-## @end table
-## @end deftypefn
-
-## Built-in profiler.
-## Author: Daniel Kraft <d@domob.eu>
-
-function retval = profile (option)
-
-  if (nargin != 1)
-    print_usage ();
-  endif
-
-  switch (option)
-    case "on"
-      __profiler_reset__ ();
-      __profiler_enable__ (true);
-
-    case "off"
-      __profiler_enable__ (false);
-
-    case "clear"
-      __profiler_reset__ ();
-
-    case "resume"
-      __profiler_enable__ (true);
-
-    case "status"
-      enabled = __profiler_enable__ ();
-      if (enabled)
-        enabled = "on";
-      else
-        enabled = "off";
-      endif
-      retval = struct ("ProfilerStatus", enabled);
-
-    case "info"
-      [flat, tree] = __profiler_data__ ();
-      retval = struct ("FunctionTable", flat, "Hierarchical", tree);
-
-    otherwise
-      warning ("profile: Unrecognized option '%s'", option);
-      print_usage ();
-
-  endswitch
-
-endfunction
-
-
-%!demo
-%! profile on;
-%! A = rand (100);
-%! B = expm (A);
-%! profile off;
-%! profile resume;
-%! C = sqrtm (A);
-%! profile off;
-%! T = profile ("info");
-%! profshow (T);
-
-%!test
-%! on_struct.ProfilerStatus = "on";
-%! off_struct.ProfilerStatus = "off";
-%! profile ("on");
-%! result = logm (rand (200) + 10 * eye (200));
-%! assert (profile ("status"), on_struct);
-%! profile ("off");
-%! assert (profile ("status"), off_struct);
-%! profile ("resume");
-%! result = logm (rand (200) + 10 * eye (200));
-%! profile ("off");
-%! assert (profile ("status"), off_struct);
-%! info = profile ("info");
-%! assert (isstruct (info));
-%! assert (size (info), [1, 1]);
-%! assert (fieldnames (info), {"FunctionTable"; "Hierarchical"});
-%! ftbl = info.FunctionTable;
-%! assert (fieldnames (ftbl), {"FunctionName"; "TotalTime"; "NumCalls"; "IsRecursive"; "Parents"; "Children"});
-%! hier = info.Hierarchical;
-%! assert (fieldnames (hier), {"Index"; "SelfTime"; "TotalTime"; "NumCalls"; "Children"});
-%! profile ("clear");
-%! info = profile ("info");
-%! assert (isstruct (info));
-%! assert (size (info), [1, 1]);
-%! assert (fieldnames (info), {"FunctionTable"; "Hierarchical"});
-%! ftbl = info.FunctionTable;
-%! assert (size (ftbl), [0, 1]);
-%! assert (fieldnames (ftbl), {"FunctionName"; "TotalTime"; "NumCalls"; "IsRecursive"; "Parents"; "Children"});
-%! hier = info.Hierarchical;
-%! assert (size (hier), [0, 1]);
-%! assert (fieldnames (hier), {"Index"; "SelfTime"; "NumCalls"; "Children"});
-
-## Test input validation
-%!error profile ()
-%!error profile ("on", 2)
-%!error profile ("INVALID_OPTION")
-
diff --git a/scripts/general/profshow.m b/scripts/general/profshow.m
deleted file mode 100644
--- a/scripts/general/profshow.m
+++ /dev/null
@@ -1,115 +0,0 @@
-## Copyright (C) 2012-2014 Daniel Kraft
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn  {} {} profshow (@var{data})
-## @deftypefnx {} {} profshow (@var{data}, @var{n})
-## @deftypefnx {} {} profshow ()
-## @deftypefnx {} {} profshow (@var{n})
-## Display flat per-function profiler results.
-##
-## Print out profiler data (execution time, number of calls) for the most
-## critical @var{n} functions.  The results are sorted in descending order by
-## the total time spent in each function.  If @var{n} is unspecified it
-## defaults to 20.
-##
-## The input @var{data} is the structure returned by @code{profile ("info")}.
-## If unspecified, @code{profshow} will use the current profile dataset.
-##
-## The attribute column displays @samp{R} for recursive functions, and is blank
-## for all other function types.
-## @seealso{profexplore, profile}
-## @end deftypefn
-
-## Built-in profiler.
-## Author: Daniel Kraft <d@domob.eu>
-
-function profshow (data, n = 20)
-
-  if (nargin > 2)
-    print_usage ();
-  endif
-
-  if (nargin == 0)
-    data = profile ("info");
-  elseif (nargin == 1 && ! isstruct (data))
-    n = data;
-    data = profile ("info");
-  endif
-
-  n = fix (n);
-  if (! isscalar (n) || ! isreal (n) || ! (n > 0))
-    error ("profile: N must be a positive integer");
-  endif
-
-  m = length (data.FunctionTable);
-  n = min (n, m);
-
-  ## We want to sort by times in descending order.  For this, extract the
-  ## times to an array, then sort this, and use the resulting index permutation
-  ## to print out our table.
-  times = [ data.FunctionTable.TotalTime ];
-  totalTime = sum (times);
-
-  [~, p] = sort (times, "descend");
-
-  ## For printing the table, find out the maximum length of a function name
-  ## so that we can proportion the table accordingly.  Based on this,
-  ## we can build the format used for printing table rows.
-  nameLen = max (length ("Function"),
-                 columns (char (data.FunctionTable(p(1:n)).FunctionName)));
-  headerFormat = sprintf ("%%4s %%%ds %%4s %%12s %%10s %%12s\n", nameLen);
-  rowFormat = sprintf ("%%4d %%%ds %%4s %%12.3f %%10.2f %%12d\n", nameLen);
-
-  printf (headerFormat, ...
-          "#", "Function", "Attr", "Time (s)", "Time (%)", "Calls");
-  printf ("%s\n", repmat ("-", 1, nameLen + 2 * 5 + 11 + 2 * 13));
-
-  for i = 1 : n
-    row = data.FunctionTable(p(i));
-    timePercent = 100 * row.TotalTime / totalTime;
-    attr = "";
-    if (row.IsRecursive)
-      attr = "R";
-    endif
-    printf (rowFormat, p(i), row.FunctionName, attr,
-            row.TotalTime, timePercent, row.NumCalls);
-  endfor
-
-endfunction
-
-
-%!demo
-%! profile on;
-%! A = rand (100);
-%! B = expm (A);
-%! profile off;
-%! T = profile ("info");
-%! profshow (T, 10);
-
-%!demo
-%! profile on;
-%! expm (rand (500) + eye (500));
-%! profile off;
-%! profshow (profile ("info"), 5);
-
-%!error profshow (1, 2, 3)
-%!error <N must be a positive integer> profshow (struct (), ones (2))
-%!error <N must be a positive integer> profshow (struct (), 1+i)
-%!error <N must be a positive integer> profshow (struct (), -1)
-
diff --git a/scripts/module.mk b/scripts/module.mk
--- a/scripts/module.mk
+++ b/scripts/module.mk
@@ -20,16 +20,17 @@ include scripts/ode/module.mk
 include scripts/optimization/module.mk
 include scripts/path/module.mk
 include scripts/pkg/module.mk
 include scripts/plot/appearance/module.mk
 include scripts/plot/draw/module.mk
 include scripts/plot/util/module.mk
 include scripts/polynomial/module.mk
 include scripts/prefs/module.mk
+include scripts/profiler/module.mk
 include scripts/set/module.mk
 include scripts/signal/module.mk
 include scripts/sparse/module.mk
 include scripts/specfun/module.mk
 include scripts/special-matrix/module.mk
 include scripts/startup/module.mk
 include scripts/statistics/base/module.mk
 include scripts/statistics/distributions/module.mk
diff --git a/scripts/profiler/module.mk b/scripts/profiler/module.mk
new file mode 100644
--- /dev/null
+++ b/scripts/profiler/module.mk
@@ -0,0 +1,18 @@
+FCN_FILE_DIRS += \
+  scripts/profiler
+
+scripts_profiler_FCN_FILES = \
+  scripts/profiler/profexplore.m \
+  scripts/profiler/profile.m \
+  scripts/profiler/profshow.m
+
+scripts_profilerdir = $(fcnfiledir)/profiler
+
+scripts_profiler_DATA = $(scripts_profiler_FCN_FILES)
+
+FCN_FILES += \
+  $(scripts_profiler_FCN_FILES)
+
+PKG_ADD_FILES += scripts/profiler/PKG_ADD
+
+DIRSTAMP_FILES += scripts/profiler/$(octave_dirstamp)
diff --git a/scripts/general/profexplore.m b/scripts/profiler/profexplore.m
rename from scripts/general/profexplore.m
rename to scripts/profiler/profexplore.m
diff --git a/scripts/profiler/profile.m b/scripts/profiler/profile.m
new file mode 100644
--- /dev/null
+++ b/scripts/profiler/profile.m
@@ -0,0 +1,153 @@
+## Copyright (C) 2012-2015 Daniel Kraft
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {} profile on
+## @deftypefnx {} {} profile off
+## @deftypefnx {} {} profile resume
+## @deftypefnx {} {} profile clear
+## @deftypefnx {} {@var{S} =} profile ("status")
+## @deftypefnx {} {@var{T} =} profile ("info")
+## Control the built-in profiler.
+##
+## @table @code
+## @item profile on
+## Start the profiler, clearing all previously collected data if there is any.
+##
+## @item profile off
+## Stop profiling.  The collected data can later be retrieved and examined
+## with @code{T = profile ("info")}.
+##
+## @item profile clear
+## Clear all collected profiler data.
+##
+## @item profile resume
+## Restart profiling without clearing the old data.  All newly collected
+## statistics are added to the existing ones.
+##
+## @item @var{S} = profile ("status")
+## Return a structure with information about the current status of the
+## profiler.  At the moment, the only field is @code{ProfilerStatus} which is
+## either @qcode{"on"} or @qcode{"off"}.
+##
+## @item @var{T} = profile ("info")
+## Return the collected profiling statistics in the structure @var{T}.  The
+## flat profile is returned in the field @code{FunctionTable} which is an
+## array of structures, each entry corresponding to a function which was called
+## and for which profiling statistics are present.  In addition, the field
+## @code{Hierarchical} contains the hierarchical call tree.  Each node has an
+## index into the @code{FunctionTable} identifying the function it corresponds
+## to as well as data fields for number of calls and time spent at this level
+## in the call tree.
+## @seealso{profshow, profexplore}
+## @end table
+## @end deftypefn
+
+## Built-in profiler.
+## Author: Daniel Kraft <d@domob.eu>
+
+function retval = profile (option)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  switch (option)
+    case "on"
+      __profiler_reset__ ();
+      __profiler_enable__ (true);
+
+    case "off"
+      __profiler_enable__ (false);
+
+    case "clear"
+      __profiler_reset__ ();
+
+    case "resume"
+      __profiler_enable__ (true);
+
+    case "status"
+      enabled = __profiler_enable__ ();
+      if (enabled)
+        enabled = "on";
+      else
+        enabled = "off";
+      endif
+      retval = struct ("ProfilerStatus", enabled);
+
+    case "info"
+      [flat, tree] = __profiler_data__ ();
+      retval = struct ("FunctionTable", flat, "Hierarchical", tree);
+
+    otherwise
+      warning ("profile: Unrecognized option '%s'", option);
+      print_usage ();
+
+  endswitch
+
+endfunction
+
+
+%!demo
+%! profile on;
+%! A = rand (100);
+%! B = expm (A);
+%! profile off;
+%! profile resume;
+%! C = sqrtm (A);
+%! profile off;
+%! T = profile ("info");
+%! profshow (T);
+
+%!test
+%! on_struct.ProfilerStatus = "on";
+%! off_struct.ProfilerStatus = "off";
+%! profile ("on");
+%! result = logm (rand (200) + 10 * eye (200));
+%! assert (profile ("status"), on_struct);
+%! profile ("off");
+%! assert (profile ("status"), off_struct);
+%! profile ("resume");
+%! result = logm (rand (200) + 10 * eye (200));
+%! profile ("off");
+%! assert (profile ("status"), off_struct);
+%! info = profile ("info");
+%! assert (isstruct (info));
+%! assert (size (info), [1, 1]);
+%! assert (fieldnames (info), {"FunctionTable"; "Hierarchical"});
+%! ftbl = info.FunctionTable;
+%! assert (fieldnames (ftbl), {"FunctionName"; "TotalTime"; "NumCalls"; "IsRecursive"; "Parents"; "Children"});
+%! hier = info.Hierarchical;
+%! assert (fieldnames (hier), {"Index"; "SelfTime"; "TotalTime"; "NumCalls"; "Children"});
+%! profile ("clear");
+%! info = profile ("info");
+%! assert (isstruct (info));
+%! assert (size (info), [1, 1]);
+%! assert (fieldnames (info), {"FunctionTable"; "Hierarchical"});
+%! ftbl = info.FunctionTable;
+%! assert (size (ftbl), [0, 1]);
+%! assert (fieldnames (ftbl), {"FunctionName"; "TotalTime"; "NumCalls"; "IsRecursive"; "Parents"; "Children"});
+%! hier = info.Hierarchical;
+%! assert (size (hier), [0, 1]);
+%! assert (fieldnames (hier), {"Index"; "SelfTime"; "NumCalls"; "Children"});
+
+## Test input validation
+%!error profile ()
+%!error profile ("on", 2)
+%!error profile ("INVALID_OPTION")
+
diff --git a/scripts/profiler/profshow.m b/scripts/profiler/profshow.m
new file mode 100644
--- /dev/null
+++ b/scripts/profiler/profshow.m
@@ -0,0 +1,115 @@
+## Copyright (C) 2012-2014 Daniel Kraft
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {} profshow (@var{data})
+## @deftypefnx {} {} profshow (@var{data}, @var{n})
+## @deftypefnx {} {} profshow ()
+## @deftypefnx {} {} profshow (@var{n})
+## Display flat per-function profiler results.
+##
+## Print out profiler data (execution time, number of calls) for the most
+## critical @var{n} functions.  The results are sorted in descending order by
+## the total time spent in each function.  If @var{n} is unspecified it
+## defaults to 20.
+##
+## The input @var{data} is the structure returned by @code{profile ("info")}.
+## If unspecified, @code{profshow} will use the current profile dataset.
+##
+## The attribute column displays @samp{R} for recursive functions, and is blank
+## for all other function types.
+## @seealso{profexplore, profile}
+## @end deftypefn
+
+## Built-in profiler.
+## Author: Daniel Kraft <d@domob.eu>
+
+function profshow (data, n = 20)
+
+  if (nargin > 2)
+    print_usage ();
+  endif
+
+  if (nargin == 0)
+    data = profile ("info");
+  elseif (nargin == 1 && ! isstruct (data))
+    n = data;
+    data = profile ("info");
+  endif
+
+  n = fix (n);
+  if (! isscalar (n) || ! isreal (n) || ! (n > 0))
+    error ("profile: N must be a positive integer");
+  endif
+
+  m = length (data.FunctionTable);
+  n = min (n, m);
+
+  ## We want to sort by times in descending order.  For this, extract the
+  ## times to an array, then sort this, and use the resulting index permutation
+  ## to print out our table.
+  times = [ data.FunctionTable.TotalTime ];
+  totalTime = sum (times);
+
+  [~, p] = sort (times, "descend");
+
+  ## For printing the table, find out the maximum length of a function name
+  ## so that we can proportion the table accordingly.  Based on this,
+  ## we can build the format used for printing table rows.
+  nameLen = max (length ("Function"),
+                 columns (char (data.FunctionTable(p(1:n)).FunctionName)));
+  headerFormat = sprintf ("%%4s %%%ds %%4s %%12s %%10s %%12s\n", nameLen);
+  rowFormat = sprintf ("%%4d %%%ds %%4s %%12.3f %%10.2f %%12d\n", nameLen);
+
+  printf (headerFormat, ...
+          "#", "Function", "Attr", "Time (s)", "Time (%)", "Calls");
+  printf ("%s\n", repmat ("-", 1, nameLen + 2 * 5 + 11 + 2 * 13));
+
+  for i = 1 : n
+    row = data.FunctionTable(p(i));
+    timePercent = 100 * row.TotalTime / totalTime;
+    attr = "";
+    if (row.IsRecursive)
+      attr = "R";
+    endif
+    printf (rowFormat, p(i), row.FunctionName, attr,
+            row.TotalTime, timePercent, row.NumCalls);
+  endfor
+
+endfunction
+
+
+%!demo
+%! profile on;
+%! A = rand (100);
+%! B = expm (A);
+%! profile off;
+%! T = profile ("info");
+%! profshow (T, 10);
+
+%!demo
+%! profile on;
+%! expm (rand (500) + eye (500));
+%! profile off;
+%! profshow (profile ("info"), 5);
+
+%!error profshow (1, 2, 3)
+%!error <N must be a positive integer> profshow (struct (), ones (2))
+%!error <N must be a positive integer> profshow (struct (), 1+i)
+%!error <N must be a positive integer> profshow (struct (), -1)
+
