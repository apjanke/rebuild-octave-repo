# HG changeset patch
# User jwe
# Date 1068604195 0
#      Wed Nov 12 02:29:55 2003 +0000
# Node ID 3a284f89aa41f58cae2598a2bc12c39d15c4c2bc
# Parent  77566be8b9e95c0c55045939bb9bcf0c6538ba50
[project @ 2003-11-12 02:27:28 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -26,29 +26,22 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<Complex>;
+INSTANTIATE_ARRAY_AND_ASSIGN (Complex);
 
-template int assign (Array<Complex>&, const Array<Complex>&);
-template int assign (Array<Complex>&, const Array<double>&);
-template int assign (Array<Complex>&, const Array<int>&);
-template int assign (Array<Complex>&, const Array<short>&);
-template int assign (Array<Complex>&, const Array<char>&);
-
-template int assign (Array<Complex>&, const Array<Complex>&, const Complex&);
-template int assign (Array<Complex>&, const Array<double>&, const Complex&);
-template int assign (Array<Complex>&, const Array<int>&, const Complex&);
-template int assign (Array<Complex>&, const Array<short>&, const Complex&);
-template int assign (Array<Complex>&, const Array<char>&, const Complex&);
+INSTANTIATE_ARRAY_ASSIGN (Complex, double);
+INSTANTIATE_ARRAY_ASSIGN (Complex, int);
+INSTANTIATE_ARRAY_ASSIGN (Complex, short);
+INSTANTIATE_ARRAY_ASSIGN (Complex, char);
 
 #include "Array2.h"
 
 template class Array2<Complex>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -24,21 +24,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 // Instantiate Arrays of bool values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<bool>;
-
-template int assign (Array<bool>&, const Array<bool>&);
-
-template int assign (Array<bool>&, const Array<bool>&, const bool&);
+INSTANTIATE_ARRAY_AND_ASSIGN (bool);
 
 #include "Array2.h"
 
 template class Array2<bool>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -24,21 +24,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 // Instantiate Arrays of char values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<char>;
-
-template int assign (Array<char>&, const Array<char>&);
-
-template int assign (Array<char>&, const Array<char>&, const char&);
+INSTANTIATE_ARRAY_AND_ASSIGN (char);
 
 #include "Array2.h"
 
 template class Array2<char>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -24,27 +24,21 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<double>;
+INSTANTIATE_ARRAY_AND_ASSIGN (double);
 
-template int assign (Array<double>&, const Array<double>&);
-template int assign (Array<double>&, const Array<int>&);
-template int assign (Array<double>&, const Array<short>&);
-template int assign (Array<double>&, const Array<char>&);
-
-template int assign (Array<double>&, const Array<double>&, const double&);
-template int assign (Array<double>&, const Array<int>&, const double&);
-template int assign (Array<double>&, const Array<short>&, const double&);
-template int assign (Array<double>&, const Array<char>&, const double&);
+INSTANTIATE_ARRAY_ASSIGN (double, int);
+INSTANTIATE_ARRAY_ASSIGN (double, short);
+INSTANTIATE_ARRAY_ASSIGN (double, char);
 
 #include "Array2.h"
 
 template class Array2<double>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -24,25 +24,20 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 // Instantiate Arrays of integer values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<int>;
+INSTANTIATE_ARRAY_AND_ASSIGN (int);
 
-template int assign (Array<int>&, const Array<int>&);
-template int assign (Array<int>&, const Array<short>&);
-template int assign (Array<int>&, const Array<char>&);
-
-template int assign (Array<int>&, const Array<int>&, const int&);
-template int assign (Array<int>&, const Array<short>&, const int&);
-template int assign (Array<int>&, const Array<char>&, const int&);
+INSTANTIATE_ARRAY_ASSIGN (int, short);
+INSTANTIATE_ARRAY_ASSIGN (int, char);
 
 #include "Array2.h"
 
 template class Array2<int>;
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
diff --git a/liboctave/Array-idx-vec.cc b/liboctave/Array-idx-vec.cc
--- a/liboctave/Array-idx-vec.cc
+++ b/liboctave/Array-idx-vec.cc
@@ -26,15 +26,15 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of integer values.
 
 #include "idx-vector.h"
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<idx_vector>;
+INSTANTIATE_ARRAY (idx_vector);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -24,23 +24,19 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 // Instantiate Arrays of short int values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class Array<short>;
+INSTANTIATE_ARRAY_AND_ASSIGN (int);
 
-template int assign (Array<short>&, const Array<short>&);
-template int assign (Array<short>&, const Array<char>&);
-
-template int assign (Array<short>&, const Array<short>&, const short&);
-template int assign (Array<short>&, const Array<char>&, const short&);
+INSTANTIATE_ARRAY_ASSIGN (short, char);
 
 #include "Array2.h"
 
 template class Array2<short>;
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
diff --git a/liboctave/Array-str.cc b/liboctave/Array-str.cc
--- a/liboctave/Array-str.cc
+++ b/liboctave/Array-str.cc
@@ -26,15 +26,15 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of strings.
 
 #include "Array.h"
 #include "Array.cc"
 
 #include <string>
 
-template class Array<std::string>;
+INSTANTIATE_ARRAY (std::string);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -538,15 +538,30 @@ assignN (Array<LT>& lhs, const Array<RT>
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
   return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
+#define INSTANTIATE_ARRAY_ASSIGN(LT, RT) \
+  template int assign (Array<LT>&, const Array<RT>&, const LT&); \
+  template int assign1 (Array<LT>&, const Array<RT>&, const LT&); \
+  template int assign2 (Array<LT>&, const Array<RT>&, const LT&); \
+  template int assignN (Array<LT>&, const Array<RT>&, const LT&); \
+  template int assign (Array<LT>&, const Array<RT>&)
+
+#define INSTANTIATE_ARRAY(T) \
+  template class Array<T>; \
+  template T resize_fill_value (const T&)
+
+#define INSTANTIATE_ARRAY_AND_ASSIGN(T) \
+  INSTANTIATE_ARRAY (T); \
+  INSTANTIATE_ARRAY_ASSIGN (T, T)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array.h (INSTANTIATE_ARRAY_ASSIGN, INSTANTIATE_ARRAY_AND_ASSIGN,
+	INSTANTIATE_ARRAY): New macros.
+	* Array-C.cc, Array-b.cc, Array-ch.cc, Array-d.cc, Array-i.cc,
+	Array-idx-vec.cc, Array-s.cc, Array-str.cc, ODESSA.cc: Use them.
+
 	* Array.h (Array<T>::ipermute): New function.
 
 2003-11-11  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* Array.cc (Array<T>::permute): New function.
 	* Array.h: Provide decl.
 
 	* Array-util.cc (calc_permutated_idx): New function.
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -57,17 +57,17 @@ extern "C"
   F77_RET_T
   F77_FUNC (dodessa, DODESSA) (odessa_fcn_ptr, odessa_dfdp_ptr, int*,
 			       double*, double*, double&, double&,
 			       int&, double&, const double*, int&, 
 			       int&, int*, double*, int&, int*, int&,
 			       odessa_jac_ptr, int&);
 }
 
-template class Array<Matrix>;
+INSTANTIATE_ARRAY (Matrix);
 
 static ODESFunc::ODES_fsub user_fsub;
 static ODESFunc::ODES_bsub user_bsub;
 static ODESFunc::ODES_jsub user_jsub;
 
 
 static int
 odessa_f (int* neq, const double& t, double *state,
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* TEMPLATE-INST/Array-tc.cc, TEMPLATE-INST/Array-c.cc,
+	TEMPLATE-INST/Array-os.cc, TEMPLATE-INST/Array-sym.cc,
+	ov-typeinfo.cc: Use new INSTANTIATE_ARRAY macro.
+
 	* data.cc (do_permute): New function.
 	(Fpermute, Fipermute): Use it.
 
 	* ov-base.cc (octave_base_value::permute): New function.
 	* ov-base.h: Provide decl.
 
 	* ov.h (octave_value::ipermute): New function.
 
diff --git a/src/TEMPLATE-INST/Array-oc.cc b/src/TEMPLATE-INST/Array-oc.cc
--- a/src/TEMPLATE-INST/Array-oc.cc
+++ b/src/TEMPLATE-INST/Array-oc.cc
@@ -26,15 +26,15 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "sighandlers.h"
 
-template class Array<octave_child>;
+INSTANTIATE_ARRAY (octave_child);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Array-os.cc b/src/TEMPLATE-INST/Array-os.cc
--- a/src/TEMPLATE-INST/Array-os.cc
+++ b/src/TEMPLATE-INST/Array-os.cc
@@ -26,19 +26,19 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "oct-stream.h"
 
-template class Array<scanf_format_elt*>;
+INSTANTIATE_ARRAY (scanf_format_elt *);
 
-template class Array<printf_format_elt*>;
+INSTANTIATE_ARRAY (printf_format_elt *);
 
-template class Array<octave_stream>;
+INSTANTIATE_ARRAY (octave_stream);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Array-sym.cc b/src/TEMPLATE-INST/Array-sym.cc
--- a/src/TEMPLATE-INST/Array-sym.cc
+++ b/src/TEMPLATE-INST/Array-sym.cc
@@ -27,15 +27,15 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "oct-obj.h"
 #include "symtab.h"
 
-template class Array<symbol_record *>;
+INSTANTIATE_ARRAY (symbol_record *);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -42,24 +42,17 @@ Software Foundation, 59 Temple Place - S
 template<>
 octave_value
 resize_fill_value<octave_value> (const octave_value& x)
 {
   static octave_value retval = octave_value (Matrix ());
   return retval;
 }
 
-template class Array<octave_value>;
-
-
-template int assign (Array<octave_value>&, const Array<octave_value>&);
-
-template int assign (Array<octave_value>&,
-		     const Array<octave_value>&, const octave_value&);
-
+INSTANTIATE_ARRAY (octave_value);
 
 template class Array2<octave_value>;
 
 template class ArrayN<octave_value>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -165,19 +165,18 @@ Return true if @var{x} is a stream objec
     print_usage ("isstream");
 
   return retval;
 }
 
 DEFUN (fclose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fclose (@var{fid})\n\
-Closes the specified file.  If an error is encountered while trying to\n\
-close the file, an error message is printed and @code{fclose} returns\n\
-0.  Otherwise, it returns 1.\n\
+Closes the specified file.  If successful, @code{fclose} returns 0,\n\
+otherwise, it returns -1.\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     retval = octave_stream_list::remove (args(0), "fclose");
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -41,31 +41,31 @@ octave_value_typeinfo *
 octave_value_typeinfo::instance (0);
 
 #include <Array.h>
 #include <Array2.h>
 #include <Array3.h>
 
 #include <Array.cc>
 
-template class Array<unary_op_fcn>;
+INSTANTIATE_ARRAY (unary_op_fcn);
 template class Array2<unary_op_fcn>;
 
-template class Array<non_const_unary_op_fcn>;
+INSTANTIATE_ARRAY (non_const_unary_op_fcn);
 template class Array2<non_const_unary_op_fcn>;
 
-template class Array<binary_op_fcn>;
+INSTANTIATE_ARRAY (binary_op_fcn);
 template class Array2<binary_op_fcn>;
 template class Array3<binary_op_fcn>;
 
-template class Array<assign_op_fcn>;
+INSTANTIATE_ARRAY (assign_op_fcn);
 template class Array2<assign_op_fcn>;
 template class Array3<assign_op_fcn>;
 
-template class Array<type_conv_fcn>;
+INSTANTIATE_ARRAY (type_conv_fcn);
 template class Array2<type_conv_fcn>;
 
 bool
 octave_value_typeinfo::instance_ok (void)
 {
   bool retval = true;
   if (! instance)
     instance = new octave_value_typeinfo ();
