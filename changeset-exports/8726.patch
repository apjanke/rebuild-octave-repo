# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234425839 18000
#      Thu Feb 12 03:03:59 2009 -0500
# Node ID 0f6683a8150a2e586f306abdf3e62998fe137130
# Parent  d5af326a3ede175a37518ba14a8e8687bdcd3a5b
some comments for lo-traits.h

diff --git a/liboctave/lo-traits.h b/liboctave/lo-traits.h
--- a/liboctave/lo-traits.h
+++ b/liboctave/lo-traits.h
@@ -18,16 +18,22 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_liboctave_traits_h)
 #define octave_liboctave_traits_h 1
 
+// Ideas for these classes taken from C++ Templates, The Complete
+// Guide by David Vandevoorde and Nicolai M. Josuttis, Addison-Wesley
+// (2003).
+
+// Select a type based on the value of a constant expression.
+
 template <bool cond, typename T1, typename T2>
 class if_then_else;
 
 template<typename T1, typename T2>
 class if_then_else<true, T1, T2>
 {
 public:
 
@@ -37,16 +43,18 @@ public:
 template<typename T1, typename T2>
 class if_then_else<false, T1, T2>
 {
 public:
 
   typedef T2 result;
 };
 
+// Determine whether a template paramter is a class type.
+
 template<typename T1>
 class is_class_type
 {
 private:
 
   typedef char one;
   typedef struct { char c[2]; } two;
 
@@ -57,16 +65,19 @@ private:
   template<typename T2> static two is_class_type_test (...);
 
 public:
 
   enum { yes = sizeof (is_class_type_test<T1> (0)) == 1 };
   enum { no = ! yes };
 };
 
+// Define typename ref_param<T>::type as T const& if T is a class
+// type.  Otherwise, define it to be T.
+
 template<typename T>
 class ref_param
 {
 public:
 
   typedef typename if_then_else<is_class_type<T>::no, T, T const&>::result type;
 };
 
