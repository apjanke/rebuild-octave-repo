# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1310768130 25200
#      Fri Jul 15 15:15:30 2011 -0700
# Node ID 5fab4848ea1ec7d0b3487ab14b48d80b8aa40df0
# Parent  730d25ef02d10b6fa80a5a306724135c1c152e78
# Parent  4e70c4e61c24bf978b0f4853f9f5e2ff1e510b51
maint: Periodic merge of stable to default ahead of Code Sprint.

diff --git a/build-aux/bootstrap.conf b/build-aux/bootstrap.conf
--- a/build-aux/bootstrap.conf
+++ b/build-aux/bootstrap.conf
@@ -54,16 +54,17 @@ gnulib_modules="
   strftime
   strptime
   symlink
   sys_stat
   sys_time
   sys_times
   time
   times
+  tmpfile
   trunc
   truncf
   unistd
   unlink
   vsnprintf
 "
 
 # Additional xgettext options to use.  Use "\\\newline" to break lines.
diff --git a/etc/CHECKLIST b/etc/CHECKLIST
--- a/etc/CHECKLIST
+++ b/etc/CHECKLIST
@@ -1,18 +1,13 @@
 Things to do before making a release:
 
-  * Ask testers for the type(s) of machines they are using.
-
-  * Update the version number in src/version.h.
-
-  * Update the version number in doc/refcard/refcard.tex.
-
-  * Add a `Version M.N.P released.' line to the ChangeLog.
+  * Update the version number and release date in configure.ac.
 
   * Update the NEWS file.
 
-  * Check the README file.
+  * Update the NEWS-<VERSION>.html, index.in, news.in, and download.in
+    files for the web site.
 
-  * Run autoconf, autoheader, and configure before making tar files.
+  * Copy tarballs to ftp.gnu.org.
 
-  * Update the NEWS and README.octave files in the anonymous ftp
-    directory.
+  * Post a release announcement to the help@octave.org and
+    info-gnu@gnu.org lists.
diff --git a/src/DLD-FUNCTIONS/betainc.cc b/src/DLD-FUNCTIONS/betainc.cc
--- a/src/DLD-FUNCTIONS/betainc.cc
+++ b/src/DLD-FUNCTIONS/betainc.cc
@@ -52,17 +52,17 @@ Return the regularized incomplete Beta f
 betainc (x, a, b) = -----------    | t^(a-1) (1-t)^(b-1) dt.\n\
                      beta (a, b)    /\n\
                                  t=0\n\
 @end group\n\
 @end smallexample\n\
 \n\
 @end ifnottex\n\
 \n\
-If x has more than one component, both @var{a} and @var{b} must be\n\
+If @var{x} has more than one component, both @var{a} and @var{b} must be\n\
 scalars.  If @var{x} is a scalar, @var{a} and @var{b} must be of\n\
 compatible dimensions.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -45,17 +45,17 @@ along with Octave; see the file COPYING.
 // http://www-igm.univ-mlv.fr/~lecroq/string/node19.html
 static void
 qs_preprocess (const Array<char>& needle,
                octave_idx_type table[TABSIZE])
 {
   const char *x = needle.data ();
   octave_idx_type m = needle.numel ();
 
-   for (octave_idx_type i = 0; i < UCHAR_MAX; i++)
+   for (octave_idx_type i = 0; i < TABSIZE; i++)
       table[i] = m + 1;
    for (octave_idx_type i = 0; i < m; i++)
       table[ORD(x[i])] = m - i;
 }
 
 
 static Array<octave_idx_type>
 qs_search (const Array<char>& needle,
@@ -198,17 +198,17 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
     }
 
   if (nargin == 2)
     {
       octave_value argstr = args(0), argpat = args(1);
       if (argpat.is_string ())
         {
           Array<char> needle = argpat.char_array_value ();
-          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
+          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, TABSIZE);
           qs_preprocess (needle, table);
 
           if (argstr.is_string ())
             retval = octave_value (qs_search (needle, argstr.char_array_value (),
                                               table, overlaps),
                                    true, true);
           else if (argstr.is_cell ())
             {
@@ -362,17 +362,17 @@ done for each element and a cell array i
   if (nargin == 3)
     {
       octave_value argstr = args(0), argpat = args(1), argrep = args(2);
       if (argpat.is_string () && argrep.is_string ())
         {
           const Array<char> pat = argpat.char_array_value ();
           const Array<char> rep = argrep.char_array_value ();
 
-          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
+          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, TABSIZE);
           qs_preprocess (pat, table);
 
           if (argstr.is_string ())
             retval = qs_replace (argstr.char_array_value (), pat, rep, table, overlaps);
           else if (argstr.is_cell ())
             {
               const Cell argsc = argstr.cell_value ();
               Cell retc (argsc.dims ());
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -335,23 +335,23 @@ strftime (\"%r (%Z) %A %e %B %Y\", local
 \n\
 Octave's @code{strftime} function supports a superset of the ANSI C\n\
 field specifiers.\n\
 \n\
 @noindent\n\
 Literal character fields:\n\
 \n\
 @table @code\n\
-@item %\n\
+@item %%\n\
 % character.\n\
 \n\
-@item n\n\
+@item %n\n\
 Newline character.\n\
 \n\
-@item t\n\
+@item %t\n\
 Tab character.\n\
 @end table\n\
 \n\
 @noindent\n\
 Numeric modifiers (a nonstandard extension):\n\
 \n\
 @table @code\n\
 @item - (dash)\n\
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1917,17 +1917,17 @@ system-dependent error message.\n\
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      FILE *fid = tmpfile ();
+      FILE *fid = gnulib::tmpfile ();
 
       if (fid)
         {
           std::string nm;
 
           std::ios::openmode md = fopen_mode_to_ios_mode ("w+b");
 
           octave_stream s = octave_stdiostream::create (nm, fid, md);
