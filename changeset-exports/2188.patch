# HG changeset patch
# User jwe
# Date 832044061 0
#      Tue May 14 03:21:01 1996 +0000
# Node ID 64dbd9cb5e5a4a7acf31a8bdc0262907791342c2
# Parent  755b1cd2e9147a5665d3a1c53b1b86642f2b040a
[project @ 1996-05-14 03:21:01 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -53,16 +53,22 @@ Software Foundation, Inc.
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
 #ifndef ABS
 #define ABS(x) (((x) < 0) ? (-x) : (x))
 #endif
 
+// Should expressions like ones (-1, 5) result in an empty matrix or
+// an error?  A positive value means yes.  A negative value means
+// yes, but print a warning message.  Zero means it should be
+// considered an error.
+static int Vtreat_neg_dim_as_zero;
+
 DEFUN (all, args, ,
   "all (X): are all elements of X nonzero?")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
@@ -799,22 +805,22 @@ return nonzero if S is a structure with 
   return retval;
 }
 
 static void
 check_dimensions (int& nr, int& nc, const char *warnfor)
 {
   if (nr < 0 || nc < 0)
     {
-      if (user_pref.treat_neg_dim_as_zero)
+      if (Vtreat_neg_dim_as_zero)
 	{
 	  nr = (nr < 0) ? 0 : nr;
 	  nc = (nc < 0) ? 0 : nc;
 
-	  if (user_pref.treat_neg_dim_as_zero < 0)
+	  if (Vtreat_neg_dim_as_zero < 0)
 	    warning ("%s: converting negative dimension to zero",
 		     warnfor);
 	}
       else
 	error ("%s: can't create a matrix with negative dimensions",
 	       warnfor);
     }
 }
@@ -1089,16 +1095,24 @@ See also: logspace")
 	}
       else
 	error ("linspace: npoints must be greater than 2");
     }
 
   return retval;
 }
 
+static int
+treat_neg_dim_as_zero (void)
+{
+  Vtreat_neg_dim_as_zero = check_preference ("treat_neg_dim_as_zero");
+
+  return 0;
+}
+
 void
 symbols_of_data (void)
 {
   DEFCONST (I, Complex (0.0, 1.0), 0, 0,
     "sqrt (-1)");
 
   DEFCONST (Inf, octave_Inf, 0, 0,
     "infinity");
@@ -1142,15 +1156,18 @@ symbols_of_data (void)
   DEFCONST (pi, pi_val, 0, 0,
     "ratio of the circumference of a circle to its diameter");
 
   DEFCONST (realmax, DBL_MAX, 0, 0,
     "realmax (): return largest representable floating point number");
 
   DEFCONST (realmin, DBL_MIN, 0, 0,
     "realmin (): return smallest representable floating point number");
+
+  DEFVAR (treat_neg_dim_as_zero, 0.0, 0, treat_neg_dim_as_zero,
+    "convert negative dimensions to zero");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
