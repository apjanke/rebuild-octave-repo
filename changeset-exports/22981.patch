# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483040045 18000
#      Thu Dec 29 14:34:05 2016 -0500
# Node ID 4a53c121cdec0f043257b000b3e445dbec4674fb
# Parent  b4346e1b5b453dada6d0b3b80ff53d1045cccc27
fix a few mistakes in F77_INT changes

* __pchip_deriv__.cc, CMatrix.cc, CRowVector.cc, dRowVector.cc,
fCRowVector.cc, fRowVector.cc: Use F77_INT in a few more places.

* fCMatrix.cc (operator +=): Revert change from octave_idx_type to
F77_INT.

diff --git a/libinterp/corefcn/__pchip_deriv__.cc b/libinterp/corefcn/__pchip_deriv__.cc
--- a/libinterp/corefcn/__pchip_deriv__.cc
+++ b/libinterp/corefcn/__pchip_deriv__.cc
@@ -102,17 +102,17 @@ Undocumented internal function.
           octave_idx_type nyc = ymat.columns ();
 
           if (nx != (rows ? nyc : nyr))
             error ("__pchip_deriv__: X and Y dimension mismatch");
 
           Matrix dmat (nyr, nyc);
 
           F77_INT ierr;
-          const octave_idx_type incfd = rows ? nyr : 1;
+          const F77_INT incfd = rows ? to_f77_int (nyr) : 1;
           volatile const octave_idx_type inc = rows ? 1 : nyr;
           volatile octave_idx_type k = 0;
 
           for (volatile octave_idx_type i = (rows ? nyr : nyc); i > 0; i--)
             {
               F77_XFCN (dpchim, DPCHIM, (nx, xvec.data (),
                                          ymat.data () + k * inc,
                                          dmat.fortran_vec () + k * inc,
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2778,17 +2778,17 @@ ComplexMatrix
 operator * (const ComplexColumnVector& v, const ComplexRowVector& a)
 {
   ComplexMatrix retval;
 
   F77_INT len = to_f77_int (v.numel ());
 
   if (len != 0)
     {
-      F77_INT a_len = (a.numel ());
+      F77_INT a_len = to_f77_int (a.numel ());
 
       retval = ComplexMatrix (len, a_len);
       Complex *c = retval.fortran_vec ();
 
       F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
                                F77_CONST_CHAR_ARG2 ("N", 1),
                                len, a_len, 1, 1.0, F77_CONST_DBLE_CMPLX_ARG (v.data ()), len,
                                F77_CONST_DBLE_CMPLX_ARG (a.data ()), 1, 0.0, F77_DBLE_CMPLX_ARG (c), len
diff --git a/liboctave/array/CRowVector.cc b/liboctave/array/CRowVector.cc
--- a/liboctave/array/CRowVector.cc
+++ b/liboctave/array/CRowVector.cc
@@ -291,17 +291,17 @@ operator * (const ComplexRowVector& v, c
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
       // Transpose A to form A'*x == (x'*A)'
 
-      octave_idx_type ld = a_nr;
+      F77_INT ld = a_nr;
 
       retval.resize (a_nc);
       Complex *y = retval.fortran_vec ();
 
       F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("T", 1),
                                a_nr, a_nc, 1.0, F77_CONST_DBLE_CMPLX_ARG (a.data ()),
                                ld, F77_CONST_DBLE_CMPLX_ARG (v.data ()), 1, 0.0, F77_DBLE_CMPLX_ARG (y), 1
                                F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/array/dRowVector.cc b/liboctave/array/dRowVector.cc
--- a/liboctave/array/dRowVector.cc
+++ b/liboctave/array/dRowVector.cc
@@ -179,17 +179,17 @@ operator * (const RowVector& v, const Ma
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
       // Transpose A to form A'*x == (x'*A)'
 
-      octave_idx_type ld = a_nr;
+      F77_INT ld = a_nr;
 
       retval.resize (a_nc);
       double *y = retval.fortran_vec ();
 
       F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("T", 1),
                                a_nr, a_nc, 1.0, a.data (),
                                ld, v.data (), 1, 0.0, y, 1
                                F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2819,18 +2819,18 @@ operator * (const FloatComplexColumnVect
   return retval;
 }
 
 // matrix by diagonal matrix -> matrix operations
 
 FloatComplexMatrix&
 FloatComplexMatrix::operator += (const FloatDiagMatrix& a)
 {
-  F77_INT nr = rows ();
-  F77_INT nc = cols ();
+  octave_idx_type nr = rows ();
+  octave_idx_type nc = cols ();
 
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
diff --git a/liboctave/array/fCRowVector.cc b/liboctave/array/fCRowVector.cc
--- a/liboctave/array/fCRowVector.cc
+++ b/liboctave/array/fCRowVector.cc
@@ -292,17 +292,17 @@ operator * (const FloatComplexRowVector&
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
       // Transpose A to form A'*x == (x'*A)'
 
-      octave_idx_type ld = a_nr;
+      F77_INT ld = a_nr;
 
       retval.resize (a_nc);
       FloatComplex *y = retval.fortran_vec ();
 
       F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 ("T", 1),
                                a_nr, a_nc, 1.0, F77_CONST_CMPLX_ARG (a.data ()),
                                ld, F77_CONST_CMPLX_ARG (v.data ()), 1, 0.0, F77_CMPLX_ARG (y), 1
                                F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/array/fRowVector.cc b/liboctave/array/fRowVector.cc
--- a/liboctave/array/fRowVector.cc
+++ b/liboctave/array/fRowVector.cc
@@ -179,17 +179,17 @@ operator * (const FloatRowVector& v, con
     octave::err_nonconformant ("operator *", 1, len, a_nr, a_nc);
 
   if (len == 0)
     retval.resize (a_nc, 0.0);
   else
     {
       // Transpose A to form A'*x == (x'*A)'
 
-      octave_idx_type ld = a_nr;
+      F77_INT ld = a_nr;
 
       retval.resize (a_nc);
       float *y = retval.fortran_vec ();
 
       F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 ("T", 1),
                                a_nr, a_nc, 1.0, a.data (),
                                ld, v.data (), 1, 0.0, y, 1
                                F77_CHAR_ARG_LEN (1)));
