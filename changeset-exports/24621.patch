# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516359918 18000
#      Fri Jan 19 06:05:18 2018 -0500
# Node ID 2bb3f3de0b4e3dc47453f20ce1a8068d750d09d3
# Parent  f5ad5d6f16fd00844f6ffa9b4bffd36283152250
more style fixes for variable editor

* variable-editor-model.cc, variable-editor.cc: Various style fixes.
* variable-editor.h, variable-editor.cc, variable-editor-model.h,
variable-editor-model.cc: Match ordering of functions in header and
source files.  Use C++11 syntax to disable operator= and copy
constructor.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -208,17 +208,17 @@ struct variable_editor_model::impl
   bool m_validity;
 
   QString m_validtext;
 };
 
 variable_editor_model::variable_editor_model (const QString& expr,
                                               QLabel *label,
                                               QObject *parent)
-  : QAbstractTableModel (parent), m_p (parent), m_d (new impl (expr, label))
+  : QAbstractTableModel (parent), m_parent (parent), m_d (new impl (expr, label))
 {
   connect (this, SIGNAL (data_ready (int, int, const QString&,
                                      const QString&,
                                      int, int)),
            this, SLOT (received_data (int, int, const QString&,
                                       const QString&,
                                       int, int)));
 
@@ -232,58 +232,26 @@ variable_editor_model::variable_editor_m
            this, SLOT (received_user_error (const QString&, const QString&)));
 
   connect (this, SIGNAL (initialize_data (const QString&, const QString&,
                                           int, int)),
            this, SLOT (received_initialize_data (const QString&,
                                                  const QString&,
                                                  int, int)));
 
-  clear_data_cache ();  // initializes everything
+  // Initializes everything.
+
+  clear_data_cache ();
 }
 
 variable_editor_model::~variable_editor_model (void)
 {
   delete m_d;
 }
 
-void
-variable_editor_model::clear_data_cache (void)
-{
-  octave_link::post_event
-    (this, &variable_editor_model::init_from_oct, m_d->m_name);
-}
-
-bool
-variable_editor_model::requires_sub_editor (const QModelIndex& idx) const
-{
-  return m_d->requires_sub_editor (idx);
-}
-
-bool variable_editor_model::editor_type_matrix (const QModelIndex& idx) const
-{
-  return m_d->sub_editor_type (idx) == sub_matrix;
-}
-
-bool variable_editor_model::editor_type_string (const QModelIndex& idx) const
-{
-  return m_d->sub_editor_type (idx) == sub_string;
-}
-
-sub_editor_types variable_editor_model::editor_type (const QModelIndex& idx) const
-{
-  return m_d->sub_editor_type (idx);
-}
-
-QString
-variable_editor_model::parens (void) const
-{
-  return m_d->m_type == "{" ? "{%1, %2}" : "(%1, %2)";
-}
-
 int
 variable_editor_model::rowCount (const QModelIndex&) const
 {
   return m_d->m_validity ? m_d->rows () : 1;
 }
 
 int
 variable_editor_model::columnCount (const QModelIndex&) const
@@ -353,16 +321,36 @@ variable_editor_model::setData (const QM
          v.toString ().toStdString ());
 
       return true;
     }
   else
     return false;
 }
 
+Qt::ItemFlags
+variable_editor_model::flags (const QModelIndex& idx) const
+{
+  if (m_d->m_validity)
+    {
+      if (requires_sub_editor (idx))
+        {
+          if (editor_type (idx) != sub_string)
+            return QAbstractTableModel::flags (idx);
+        }
+
+      return QAbstractTableModel::flags (idx) | Qt::ItemIsEditable;
+
+      // FIXME: ???
+      // return requires_sub_editor(idx) ?  QAbstractTableModel::flags (idx) : QAbstractTableModel::flags (idx) | Qt::ItemIsEditable;
+    }
+
+  return Qt::NoItemFlags;
+}
+
 bool
 variable_editor_model::insertRows (int row, int count, const QModelIndex&)
 {
   // FIXME: cells?
   octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1 = [ %1(1:%2,:) ; zeros(%3, columns(%1)) ; %1(%2+%3:end,:) ]")
      .arg (QString::fromStdString (m_d->m_name))
@@ -424,34 +412,43 @@ variable_editor_model::removeColumns (in
      .arg (QString::fromStdString (m_d->m_name))
      .arg (col)
      .arg (col + count)
      .toStdString ());
 
   return true;
 }
 
-Qt::ItemFlags
-variable_editor_model::flags (const QModelIndex& idx) const
+void
+variable_editor_model::clear_data_cache (void)
+{
+  octave_link::post_event
+    (this, &variable_editor_model::init_from_oct, m_d->m_name);
+}
+
+bool
+variable_editor_model::requires_sub_editor (const QModelIndex& idx) const
 {
-  if (m_d->m_validity)
-    {
-      if (requires_sub_editor (idx))
-        {
-          if (editor_type (idx) != sub_string)
-            return QAbstractTableModel::flags (idx);
-        }
+  return m_d->requires_sub_editor (idx);
+}
+
+bool variable_editor_model::editor_type_matrix (const QModelIndex& idx) const
+{
+  return m_d->sub_editor_type (idx) == sub_matrix;
+}
 
-      return QAbstractTableModel::flags (idx) | Qt::ItemIsEditable;
+bool variable_editor_model::editor_type_string (const QModelIndex& idx) const
+{
+  return m_d->sub_editor_type (idx) == sub_string;
+}
 
-      // FIXME: ???
-      // return requires_sub_editor(idx) ?  QAbstractTableModel::flags (idx) : QAbstractTableModel::flags (idx) | Qt::ItemIsEditable;
-    }
-
-  return Qt::NoItemFlags;
+QString
+variable_editor_model::parens (void) const
+{
+  return m_d->m_type == "{" ? "{%1, %2}" : "(%1, %2)";
 }
 
 // Private slots.
 
 void
 variable_editor_model::received_data (int r, int c,
                                       const QString& dat,
                                       const QString& class_info,
@@ -570,19 +567,21 @@ variable_editor_model::received_initiali
 void
 variable_editor_model::get_data_oct (const int& row, const int& col,
                                      const std::string& x)
 {
   int parse_status = 0;
 
   octave_value v = retrieve_variable (x, parse_status);
 
-  // FIXME: ???
-  // eval_string (x, true, parse_status);//retrieve_variable(x, parse_status);
-  // symbol_exist(x,"var") > 0 ? eval_string (x, true, parse_status) : octave_value();
+  // FIXME: What was the intent here?
+  // eval_string (x, true, parse_status);
+  // retrieve_variable (x, parse_status);
+  // (symbol_exist (x, "var") > 0
+  //  ? eval_string (x, true, parse_status) : octave_value ());
 
   if (parse_status != 0 || ! v.is_defined ())
     {
       emit no_data (row, col);
       m_d->m_validity = false;
       return;
     }
   octave_value_list ovlidx = ovl (row + 1, col + 1);
@@ -591,16 +590,17 @@ variable_editor_model::get_data_oct (con
   if (elem.is_defined ())
     {
       std::stringstream ss;
       elem.print (ss, true);
       /*const*/ QString dat = QString::fromStdString (ss.str ()).trimmed ();
       const QString cname = QString::fromStdString (elem.class_name ());
 
       // FIXME: This should not be necessary.
+
       if (dat == QString ("inf"))
         dat = "Inf";
       if (dat == QString ("nan"))
         dat = "NaN";
 
       emit data_ready (row, col, dat, cname, elem.rows (), elem.columns ());
     }
   else
@@ -656,58 +656,39 @@ variable_editor_model::set_data_oct (con
   idxl.push_back (ovlidx);
   v.subsasgn (m_d->m_type, idxl, ret);
   emit unset_data (row, col);
   QModelIndex idx = QAbstractTableModel::index (row, col);
 
   emit dataChanged (idx, idx);
 }
 
-// If the variable exists, load it into the data model.  If it doesn't
-// exist, flag the data model as referring to a nonexistent variable.
-// This allows the variable to be opened before it is created.
-octave_value
-variable_editor_model::retrieve_variable (const std::string& x,
-                                          int& parse_status)
-{
-  std::string name = x;
-
-  if (x.back () == ')' || x.back () == '}')
-    name = x.substr (0, x.find (x.back () == ')' ? "(" : "{"));
-
-  if (symbol_exist (name, "var") > 0)
-    return octave::eval_string (x, true, parse_status);
-
-  parse_status = -1;
-
-  return octave_value ();
-}
-
-
 void
 variable_editor_model::init_from_oct (const std::string& x)
 {
   int parse_status = 0;
 
   const octave_value ov = retrieve_variable (x, parse_status);
 
-  // FIXME: ???
+  // FIXME: What was the intent here?
   // eval_string (x, true, parse_status);
 
   m_d->m_validity = true;
 
   if (parse_status != 0 || ! ov.is_defined ())
     {
       m_d->m_validity = false;
       display_invalid ();
       return;
     }
 
+  // FIXME: Cell arrays?
+
   const QString class_name = QString::fromStdString (ov.class_name ());
-  const QString paren = ov.iscell () ? "{" : "("; // FIXME: cells?
+  const QString paren = ov.iscell () ? "{" : "(";
   const octave_idx_type rows = ov.rows ();
   const octave_idx_type cols = ov.columns ();
 
   display_valid ();
 
   emit initialize_data (class_name, paren, rows, cols);
 }
 
@@ -721,31 +702,56 @@ variable_editor_model::eval_oct (const s
   if (parse_status != 0)
     emit user_error ("Evaluation failed",
                      QString ("Evaluation of `%s' failed")
                      .arg (QString::fromStdString (x)));
 
   init_from_oct (name);
 }
 
+// If the variable exists, load it into the data model.  If it doesn't
+// exist, flag the data model as referring to a nonexistent variable.
+// This allows the variable to be opened before it is created.
+octave_value
+variable_editor_model::retrieve_variable (const std::string& x,
+                                          int& parse_status)
+{
+  std::string name = x;
+
+  if (x.back () == ')' || x.back () == '}')
+    name = x.substr (0, x.find (x.back () == ')' ? "(" : "{"));
+
+  if (symbol_exist (name, "var") > 0)
+    return octave::eval_string (x, true, parse_status);
+
+  parse_status = -1;
+
+  return octave_value ();
+}
+
+sub_editor_types variable_editor_model::editor_type (const QModelIndex& idx) const
+{
+  return m_d->sub_editor_type (idx);
+}
+
 void
 variable_editor_model::display_invalid (void)
 {
   m_d->m_label->setTextFormat (Qt::PlainText);
 
   QString description = QString ("%1: [not found or out-of-scope]")
                         .arg (QString::fromStdString (m_d->m_name));
 
   m_d->m_label->setText (description);
 
-  dynamic_cast<QWidget *> (m_p)->setVisible (false);
+  dynamic_cast<QWidget *> (m_parent)->setVisible (false);
 }
 
 void
 variable_editor_model::display_valid (void)
 {
   m_d->m_label->setTextFormat (Qt::PlainText);
 
   m_d->m_label->setText (m_d->m_validtext);
 
-  dynamic_cast<QWidget *> (m_p)->setVisible (true);
+  dynamic_cast<QWidget *> (m_parent)->setVisible (true);
 }
 
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -46,16 +46,22 @@ variable_editor_model : public QAbstract
 
 public:
 
   variable_editor_model (const QString &expr, QLabel *label,
                          QObject *p = nullptr);
 
   ~variable_editor_model (void);
 
+  // No copying!
+
+  variable_editor_model (const variable_editor_model&) = delete;
+
+  variable_editor_model& operator = (const variable_editor_model&) = delete;
+
   int rowCount (const QModelIndex& = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& = QModelIndex ()) const;
 
   QVariant data (const QModelIndex& idx, int role = Qt::DisplayRole) const;
 
   bool setData (const QModelIndex& idx, const QVariant& v,
                 int role = Qt::EditRole);
@@ -130,24 +136,22 @@ private:
   void init_from_oct (const std::string& x);
 
   void eval_oct (const std::string& name, const std::string& expr);
 
   octave_value retrieve_variable (const std::string& x, int& parse_status);
 
   sub_editor_types editor_type (const QModelIndex& idx) const;
 
-  Q_DISABLE_COPY (variable_editor_model)
-
   // Change the display if the variable does not exist (Yet)
   void display_invalid (void);
 
   // Change the display now that the variable exists
   void display_valid (void);
 
-  QObject *m_p;
+  QObject *m_parent;
 
   struct impl;
 
   impl *m_d;
 };
 
 #endif
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -21,46 +21,41 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
 #endif
 
-#include <algorithm>
 #include <limits>
 
 #include <QApplication>
 #include <QClipboard>
-#include <QDebug>
 #include <QFileDialog>
 #include <QHeaderView>
 #include <QLabel>
 #include <QMainWindow>
 #include <QMenu>
 #include <QPalette>
 #include <QSignalMapper>
 #include <QTableView>
 #include <QTabWidget>
 #include <QToolBar>
 #include <QToolButton>
 #include <QVBoxLayout>
 
-#include "octave-qt-link.h"
 #include "resource-manager.h"
 #include "variable-editor.h"
 #include "variable-editor-model.h"
 
-#include "operators/ops.h"
-#include "ov.h"
-
 namespace
 {
   // Helper struct to store widget pointers in "data" Tab property.
+
   struct table_data
   {
     table_data (QTableView *t = nullptr)
       : m_table (t)
     { }
 
     QTableView *m_table;
   };
@@ -91,80 +86,78 @@ variable_editor::variable_editor (QWidge
     m_tool_bar (new QToolBar (m_main)),
     m_tab_widget (new QTabWidget (m_main)),
     m_default_width (20), m_default_height (100), m_add_font_height (0),
     m_autofit (false), m_autofit_max (false), m_use_terminal_font (true),
     m_alternate_rows (true), m_stylesheet (""), m_font (), m_sel_font (),
     m_table_colors ()
 {
   // Use a MainWindow.
+
   setObjectName ("variable_editor");
   set_title (tr ("Variable Editor"));
   setStatusTip (tr ("Edit variables."));
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   // Tool Bar.
+
   construct_tool_bar ();
   m_main->addToolBar (m_tool_bar);
 
   for (int i = 0; i < resource_manager::varedit_color_chars ().length (); i++)
     m_table_colors.append (QColor (Qt::white));
 
   // Tab Widget.
+
   m_tab_widget->setTabsClosable (true);
   m_tab_widget->setMovable (true);
   connect (m_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (closeTab (int)));
   m_main->setCentralWidget (m_tab_widget);
 
   // Main.
+
   m_main->setParent (this);
   setWidget (m_main);
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
 }
 
 variable_editor::~variable_editor (void)
 {
   // m_tool_bar and m_tab_widget are contained within m_main.
+
   delete m_main;
 }
 
-// Return the real variable name from the tab addressed by 'index',
-// cleaned of any '&' possibly inserted by KDE.
-
-QString
-variable_editor::real_var_name (int index)
-{
-  QString var_name = m_tab_widget->tabText (index);
-  var_name.remove (QChar ('&'));
-  return var_name;
-}
-
 void
 variable_editor::edit_variable (const QString& name)
 {
   if (m_stylesheet.isEmpty ())
     {
       QSettings *settings = resource_manager::get_settings ();
       notice_settings (settings);
     }
 
   const int tab_count = m_tab_widget->count ();
   for (int i = 0; i < tab_count; ++i)
     {
       if (real_var_name (i) == name)
         {
+          // Already open.
+
           m_tab_widget->setCurrentIndex (i);
-          return;  // Already open.
+          return;
         }
     }
 
-  QWidget *page = new QWidget;  // Do not set parent.
+  // Do not set parent.
+
+  QWidget *page = new QWidget;
 
   QVBoxLayout *vbox = new QVBoxLayout (page);
   page->setLayout (vbox);
 
   QLabel *label = new QLabel (page);
   label->setTextFormat (Qt::PlainText);
   label->setText (name);
   vbox->addWidget (label);
@@ -200,18 +193,20 @@ variable_editor::edit_variable (const QS
            this, SLOT (callUpdate (const QModelIndex&, const QModelIndex&)));
 
   vbox->addWidget (table);
 
   page->setProperty ("data", QVariant::fromValue (table_data (table)));
   int tab_idx = m_tab_widget->addTab (page, name);
   m_tab_widget->setCurrentIndex (tab_idx);
 
+  // Enable tool bar for when opening first tab.
+
   if (m_tab_widget->count () == 1)
-    m_tool_bar->setEnabled (true);  // This is the first tab -> enable tool bar.
+    m_tool_bar->setEnabled (true);
 
   if (m_autofit)
     {
       table->resizeColumnsToContents ();
 
       if (m_autofit_max)
         {
           int mx = 0;
@@ -250,17 +245,17 @@ variable_editor::clear_data_cache (void)
       qobject_cast<variable_editor_model *> (model)->clear_data_cache ();
     }
 }
 
 bool
 variable_editor::has_focus (void)
 {
   // FIXME: This only generates exceptions in certain circumstances.
-  //        Get a definitive list and eliminate the need to handle exceptions.
+  // Get a definitive list and eliminate the need to handle exceptions?
 
   if (m_tab_widget->currentIndex () == -1)
     return false;  // No tabs.
 
   try
     {
       QTableView *view = get_table_data (m_tab_widget).m_table;
 
@@ -327,23 +322,25 @@ variable_editor::callUpdate (const QMode
 
   emit updated ();
 }
 
 void
 variable_editor::notice_settings (const QSettings *settings)
 {
   // FIXME: Why use object->tostring->toint?  Why not just 100?
+
   m_default_width = settings->value ("variable_editor/column_width",
                                      QVariant ("100")).toString ().toInt ();
 
   m_autofit = settings->value ("variable_editor/autofit_column_width",
                                QVariant (false)).toBool ();
 
   // FIXME: Magic Number 1 here, why not use enum?
+
   if (m_autofit)
     {
       if (settings->value ("variable_editor/autofit_type", 0).toInt () == 1)
         m_autofit_max = true;
     }
 
   m_default_height = settings->value ("variable_editor/row_height",
                                       QVariant ("10")).toString ().toInt ();
@@ -391,21 +388,23 @@ variable_editor::notice_settings (const 
                                               default_var).value<QColor> ();
 
       m_table_colors.replace (i, setting_color);
     }
 
   update_colors ();
 
   // Icon size in the toolbar.
+
   int icon_size_settings = settings->value ("toolbar_icon_size", 0).toInt ();
   QStyle *st = style ();
   int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
 
   // FIXME: Magic numbers.  Use enum?
+
   if (icon_size_settings == 1)
     icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
   else if (icon_size_settings == -1)
     icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
 
   m_tool_bar->setIconSize (QSize (icon_size, icon_size));
 }
 
@@ -422,18 +421,20 @@ variable_editor::closeTab (int idx)
 {
   if (idx < 0 || idx > m_tab_widget->count ())
     return;
 
   QWidget *const wdgt = m_tab_widget->widget (idx);
   m_tab_widget->removeTab (idx);
   delete wdgt;
 
+  // Disable tool bar when closing last tab.
+
   if (m_tab_widget->count () == 0)
-    m_tool_bar->setEnabled (false);  // Last tab, disable tool bar.
+    m_tool_bar->setEnabled (false);
 }
 
 void
 variable_editor::contextmenu_requested (const QPoint& qpos)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QModelIndex index = view->indexAt (qpos);
 
@@ -445,34 +446,35 @@ variable_editor::contextmenu_requested (
                        tr ("Cut"), this, SLOT (cutClipboard ()));
 
       menu->addAction (resource_manager::icon ("edit-copy"),
                        tr ("Copy"), this, SLOT (copyClipboard ()));
 
       menu->addAction (resource_manager::icon ("edit-paste"),
                        tr ("Paste"), this, SLOT (pasteClipboard ()));
 
-      // FIXME: need different icon for paste table separate from paste?
+      // FIXME: Need different icon for paste table separate from paste?
+
       menu->addAction (resource_manager::icon ("edit-paste"),
                        tr ("Paste Table"), this,
                        SLOT (pasteTableClipboard ()));
 
       menu->addSeparator ();
 
       menu->addAction (resource_manager::icon ("edit-delete"),
                        tr ("Clear"), this, SLOT (clearContent ()));
 
       menu->addAction (resource_manager::icon ("document-new"),
                        tr ("Variable from Selection"), this,
                        SLOT (createVariable ()));
 
       // FIXME: addAction for sort?
-      menu->addAction ( //QIcon (), FIXME: Add icon for transpose
-                       tr ("Transpose"), this,
-                       SLOT (transposeContent ()));
+      // FIXME: Add icon for transpose.
+
+      menu->addAction (tr ("Transpose"), this, SLOT (transposeContent ()));
 
       QItemSelectionModel *sel = view->selectionModel ();
 
       QList<QModelIndex> indices = sel->selectedIndexes ();
 
       if (! indices.isEmpty ())
         {
           menu->addSeparator ();
@@ -517,18 +519,19 @@ variable_editor::contextmenu_requested (
 
 void
 variable_editor::columnmenu_requested (const QPoint& pt)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
 
   int index = view->horizontalHeader ()->logicalIndexAt (pt);
 
-  // FIXME: what was the intent here?
-  // emit command_requested (QString ("disp ('") + QString::number (index) + "');");
+  // FIXME: What was the intent here?
+  // emit command_requested (QString ("disp ('")
+  //                         + QString::number (index) + "');");
 
   if (index < 0 || index > view->model ()->columnCount ())
     return;
 
   QString selection = selected_to_octave ();
 
   QList<int> coords = octave_to_coords (selection);
 
@@ -565,17 +568,18 @@ variable_editor::columnmenu_requested (c
   menu->addAction (resource_manager::icon ("edit-copy"),
                    tr ("Copy") + column_string,
                    this, SLOT (copyClipboard ()));
 
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste"),
                    this, SLOT (pasteClipboard ()));
 
-  // FIXME: different icon for Paste Table?
+  // FIXME: Different icon for Paste Table?
+
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste Table"),
                    this, SLOT (pasteTableClipboard ()));
 
   menu->addSeparator ();
 
   menu->addAction (resource_manager::icon ("edit-delete"),
                    tr ("Clear") + column_string,
@@ -632,18 +636,19 @@ variable_editor::columnmenu_requested (c
 
 void
 variable_editor::rowmenu_requested (const QPoint& pt)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
 
   int index = view->verticalHeader ()->logicalIndexAt (pt);
 
-  // FIXME: what was the intent here?
-  //emit command_requested (QString ("disp ('") + QString::number (index) + "');");
+  // FIXME: What was the intent here?
+  // emit command_requested (QString ("disp ('")
+  //                         + QString::number (index) + "');");
 
   if (index < 0 || index > view->model ()->columnCount ())
     return;
 
   QString selection = selected_to_octave ();
 
   QList<int> coords = octave_to_coords (selection);
 
@@ -678,17 +683,18 @@ variable_editor::rowmenu_requested (cons
   menu->addAction (resource_manager::icon ("edit-copy"),
                    tr ("Copy") + row_string,
                    this, SLOT (copyClipboard ()));
 
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste"),
                    this, SLOT (pasteClipboard ()));
 
-  // FIXME: better icon for Paste Table?
+  // FIXME: Better icon for Paste Table?
+
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste Table"),
                    this, SLOT (pasteTableClipboard ()));
 
   menu->addSeparator ();
 
   menu->addAction (resource_manager::icon ("edit-delete"),
                    tr ("Clear") + row_string,
@@ -734,17 +740,19 @@ variable_editor::rowmenu_requested (cons
     (menu->addAction ("hist", plot_mapper, SLOT (map ())),
      "figure (); hist (%1);");
 
   connect (plot_mapper, SIGNAL (mapped (const QString&)),
            this, SLOT (relay_command (const QString&)));
 
   QPoint menupos = pt;
   menupos.setX (view->verticalHeader ()->width ());
-  //setY (view->verticalHeader ()->sectionPosition (index+1) +
+
+  // FIXME: What was the intent here?
+  // setY (view->verticalHeader ()->sectionPosition (index+1) +
   //             view->verticalHeader ()->sectionSize (index));
 
   menu->exec (view->mapToGlobal (menupos));
 }
 
 void
 variable_editor::double_click (const QModelIndex& idx)
 {
@@ -756,55 +764,59 @@ variable_editor::double_click (const QMo
     = qobject_cast<variable_editor_model *> (table->model ());
 
   if (model->requires_sub_editor (idx))
     {
       if (model ->editor_type_matrix (idx))
         edit_variable (name + model->parens () .arg (idx.row () + 1)
                        .arg (idx.column () + 1));
 
-      /*        emit command_requested ("openvar ('" + name +
-                model->parens ()
-                .arg (idx.row () + 1)
-                .arg (idx.column () + 1)
-                + "');");
-      */
+      // FIXME: What was the intent here?
+      // emit command_requested ("openvar ('" + name +
+      //                         model->parens ()
+      //                         .arg (idx.row () + 1)
+      //                         .arg (idx.column () + 1)
+      //                         + "');");
 
     }
 }
 
 void
 variable_editor::save (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
   QString file
     = QFileDialog::getSaveFileName (this,
                                     tr ("Save Variable %1 As").arg (name),
                                     ".", 0, 0,
                                     QFileDialog::DontUseNativeDialog);
 
   // FIXME: Type? binary, float-binary, ascii, text, hdf5, matlab format?
+  // FIXME: Call octave_value::save_* directly?
+
   if (! file.isEmpty ())
-    // FIXME: Call octave_value::save_* directly?
     emit command_requested (QString ("save (\"%1\", \"%2\");")
                             .arg (file)
                             .arg (name));
 }
 
 void
 variable_editor::clearContent (void)
 {
-  // FIXME: shift?
+  // FIXME: Shift?
+
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QAbstractItemModel *model = view->model ();
   QItemSelectionModel *sel = view->selectionModel ();
   QList<QModelIndex> indices = sel->selectedIndexes ();
 
+  // FIXME: Use [] for empty cells?
+
   for (const auto& idx : indices)
-    model->setData (idx, QVariant ("0"));  // FIXME: Use [] for empty cells
+    model->setData (idx, QVariant ("0"));
 }
 
 void
 variable_editor::cutClipboard (void)
 {
   if (! has_focus ())
     return;
 
@@ -824,16 +836,17 @@ variable_editor::copyClipboard (void)
   QItemSelectionModel *sel = view->selectionModel ();
   QList<QModelIndex> indices = sel->selectedIndexes ();
   qSort (indices);
   if (indices.isEmpty ())
     return;
 
   // Convert selected items into TSV format and copy that.
   // Spreadsheet tools should understand that.
+
   QModelIndex previous = indices.first ();
   QString copy = model->data (previous).toString ();
   indices.removeFirst ();
   foreach (QModelIndex idx, indices)
     {
       copy.push_back (previous.row () != idx.row () ? '\n' : '\t');
       copy.append (model->data (idx).toString ());
       previous = idx;
@@ -949,31 +962,36 @@ void variable_editor::pasteTableClipboar
             continue;
           if (colnum > end.y () - start.y () )
             continue;
 
           model->setData (model->index (rownum + start.x (),
                                         colnum + start.y ()),
                           QVariant (col));
 
-          // relay_command ("disp ('" + QString::number (colnum+start.y ()) + "," + QString::number (rownum+start.x ()) +"');");
+          // FIXME: What was the intent here?
+          // relay_command ("disp ('" + QString::number (colnum+start.y ())
+          //                + "," + QString::number (rownum+start.x ())
+          //                + "');");
+
           colnum++;
         }
 
       colnum = 0;
       rownum++;
     }
 
   emit updated ();
 }
 
 void
 variable_editor::createVariable (void)
 {
   // FIXME: Create unnamed1..n if exist ('unnamed', 'var') is true.
+
   relay_command ("unnamed = %1");
 }
 
 void
 variable_editor::transposeContent (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
 
@@ -982,23 +1000,25 @@ variable_editor::transposeContent (void)
   emit updated ();
 }
 
 void
 variable_editor::up (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
 
-  // FIXME: is there a better way?
+  // FIXME: Is there a better way?
+
   if (name.endsWith (')') || name.endsWith ('}'))
     {
-      qDebug () << "up";
       name.remove (QRegExp ("(\\(|\\{)[^({]*(\\)|\\})$"));
       edit_variable (name);
-      //emit command_requested (QString ("openvar ('%1');").arg (name));
+
+      // FIXME: What was the intent here?
+      // emit command_requested (QString ("openvar ('%1');").arg (name));
     }
 }
 
 void
 variable_editor::delete_selected (void)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QString selection = selected_to_octave ();
@@ -1015,16 +1035,17 @@ variable_editor::delete_selected (void)
 
   emit command_requested (QString ("disp ('")
                           + QString::number (coords[0]) + ","
                           + QString::number (coords[1]) + ","
                           + QString::number (coords[2]) + ","
                           + QString::number (coords[3]) + "');");
 
   // Must be deleting whole columns or whole rows, and not the whole thing.
+
   if (whole_columns_selected == whole_rows_selected)
     return;
 
   if (whole_rows_selected)
     view->model ()->removeRows (coords[0], coords[1] - coords[0]);
 
   if (whole_columns_selected)
     view->model ()->removeColumns (coords[2], coords[3] - coords[2]);
@@ -1037,36 +1058,41 @@ variable_editor::relay_command (const QS
 {
   emit command_requested (cmd.arg (selected_to_octave ()));
 }
 
 QList<int>
 variable_editor::octave_to_coords (QString& selection)
 {
   // FIXME: Is this necessary or would it be quicker to clone the function
-  //        that gives us the QString?
+  // that gives us the QString?
 
   // Sanity check.
+
   if (selection.count (",") != 1)
     return QList<int> ();
 
+  // FIXME: Why clear if object has just been created?
+
   QList<int> output;
-  output.clear ();  // FIXME: Why clear if object has just been created?
+  output.clear ();
 
   // Remove braces.
+
   int firstbracket = std::max (selection.indexOf ("("),
                                selection.indexOf ("{"));
 
   selection = selection.mid (firstbracket + 1,
                              selection.length () - (firstbracket + 2));
 
   QString rows = selection.left (selection.indexOf (","));
   if (! rows.contains (":"))
     {
       // Only one row.
+
       output.push_back (rows.toInt ());
       output.push_back (output.last ());
     }
   else
     {
       output.push_back (rows.left (rows.indexOf (":")).toInt ());
       output.push_back (rows.right (rows.length () - (rows.indexOf (":") + 1))
                         .toInt ());
@@ -1075,44 +1101,57 @@ variable_editor::octave_to_coords (QStri
   QString cols;
   cols = selection.right (selection.length () - (selection.indexOf (",") + 1));
   if (cols.left (1) == " ")
     cols = cols.right (cols.length () - 1);
 
   if (! cols.contains (":"))
     {
       // Only one row.
+
       output.push_back (cols.toInt ());
       output.push_back (output.last ());
     }
   else
     {
       output.push_back (cols.left (cols.indexOf (":")).toInt ());
       output.push_back (cols.right (cols.length () - (cols.indexOf (":") + 1))
                         .toInt ());
     }
 
   return output;
 }
 
+// Return the real variable name from the tab addressed by 'index',
+// cleaned of any '&' possibly inserted by KDE.
+
+QString
+variable_editor::real_var_name (int index)
+{
+  QString var_name = m_tab_widget->tabText (index);
+  var_name.remove (QChar ('&'));
+  return var_name;
+}
+
 QString
 variable_editor::selected_to_octave (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QItemSelectionModel *sel = view->selectionModel ();
 
+  // Return early if nothing selected.
+
   if (! sel->hasSelection ())
-    return name;  // Nothing selected
+    return name;
 
   QList<QModelIndex> indices = sel->selectedIndexes ();
 
   // FIXME: Shouldn't this be keyed to octave_idx_type?
-  // If octave_idx_type is 64-bit then one could have 2^64,1 vector which
-  // overflows int32_t type.
+
   int32_t from_row = std::numeric_limits<int32_t>::max ();
   int32_t to_row = 0;
   int32_t from_col = std::numeric_limits<int32_t>::max ();
   int32_t to_col = 0;
 
   for (const auto& idx : indices)
     {
       from_row = std::min (from_row, idx.row ());
@@ -1120,20 +1159,22 @@ variable_editor::selected_to_octave (voi
       from_col = std::min (from_col, idx.column ());
       to_col = std::max (to_col, idx.column ());
     }
 
   QString rows = idx_to_expr (from_row, to_row);
   QString cols = idx_to_expr (from_col, to_col);
 
   // FIXME: Does cell need separate handling?  Maybe use '{.,.}'?
+
   return QString ("%1(%2, %3)").arg (name).arg (rows).arg (cols);
 }
 
-/// Also updates the font.
+// Also updates the font.
+
 void variable_editor::update_colors (void)
 {
   m_stylesheet = "";
 
   m_stylesheet += "QTableView::item{ foreground-color: "
     + m_table_colors[0].name () +" }";
 
   m_stylesheet += "QTableView::item{ background-color: "
@@ -1186,25 +1227,26 @@ variable_editor::construct_tool_bar (voi
 
   m_tool_bar->addAction (resource_manager::icon ("edit-copy"),
                          tr ("Copy"), this, SLOT (copyClipboard ()));
 
   m_tool_bar->addAction (resource_manager::icon ("edit-paste"),
                          tr ("Paste"), this, SLOT (pasteClipboard ()));
 
   // FIXME: Different icon for Paste Table?
+
   m_tool_bar->addAction (resource_manager::icon ("edit-paste"),
                          tr ("Paste Table"),
                          this, SLOT (pasteTableClipboard ()));
 
   m_tool_bar->addSeparator ();
 
   // FIXME: Add a print item?
-  //QAction *print_action; /icons/fileprint.png
-  //m_tool_bar->addSeparator ();
+  // QAction *print_action; /icons/fileprint.png
+  // m_tool_bar->addSeparator ();
 
   QToolButton *plot_tool_button = new QToolButton (m_tool_bar);
   plot_tool_button->setText (tr ("Plot"));
   plot_tool_button->setIcon (resource_manager::icon ("plot-xy-curve"));
 
   plot_tool_button->setPopupMode (QToolButton::InstantPopup);
 
   QMenu *plot_menu = new QMenu (tr ("Plot"), plot_tool_button);
@@ -1249,10 +1291,11 @@ variable_editor::construct_tool_bar (voi
   m_tool_bar->addWidget (plot_tool_button);
 
   m_tool_bar->addSeparator ();
 
   m_tool_bar->addAction (QIcon (resource_manager::icon ("go-up")), tr ("Up"),
                          this, SLOT (up ()));
 
   // Disabled when no tab is present.
+
   m_tool_bar->setEnabled (false);
 }
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -41,16 +41,22 @@ class variable_editor : public octave_do
   Q_OBJECT
 
 public:
 
   variable_editor (QWidget *parent = nullptr);
 
   ~variable_editor (void);
 
+  // No copying!
+
+  variable_editor (const variable_editor&) = delete;
+
+  variable_editor& operator = (const variable_editor&) = delete;
+
   void edit_variable (const QString& name);
 
   // Clear all the models' data cache.
   void clear_data_cache (void);
 
   bool has_focus (void);
 
   static QList<QColor> default_colors (void);
