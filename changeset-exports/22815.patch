# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479923305 28800
#      Wed Nov 23 09:48:25 2016 -0800
# Node ID c49196c539fbd8a69d912805a071744dbfa60afe
# Parent  86b6f79d4de19998c555dfe4ce839fef51e26efc
# Parent  9ec894c880778f042cf3f57608cca769aeeef47b
maint: Merge stable to default.

diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -18,53 +18,37 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} axis ()
 ## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi}])
 ## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi}])
 ## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi} @var{z_lo} @var{z_hi}])
 ## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi} @var{z_lo} @var{z_hi} @var{c_lo} @var{c_hi}])
 ## @deftypefnx {} {} axis (@var{option})
-## @deftypefnx {} {} axis (@dots{}, @var{option})
+## @deftypefnx {} {} axis (@var{option1}, @var{option2}, @dots{})
 ## @deftypefnx {} {} axis (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{limits} =} axis ()
 ## Set axis limits and appearance.
 ##
 ## The argument @var{limits} should be a 2-, 4-, 6-, or 8-element vector.  The
 ## first and second elements specify the lower and upper limits for the
 ## x-axis.  The third and fourth specify the limits for the y-axis, the fifth
 ## and sixth specify the limits for the z-axis, and the seventh and eighth
 ## specify the limits for the color axis.  The special values -Inf and Inf may
-## be used to indicate that the limit should automatically be computed based
+## be used to indicate that the limit should be automatically computed based
 ## on the data in the axis.
 ##
 ## Without any arguments, @code{axis} turns autoscaling on.
 ##
 ## With one output argument, @code{@var{limits} = axis} returns the current
 ## axis limits.
 ##
 ## The vector argument specifying limits is optional, and additional string
-## arguments may be used to specify various axis properties.  For example,
-##
-## @example
-## axis ([1, 2, 3, 4], "square");
-## @end example
-##
-## @noindent
-## forces a square aspect ratio, and
+## arguments may be used to specify various axis properties.
 ##
-## @example
-## axis ("tic", "labely");
-## @end example
-##
-## @noindent
-## turns tick marks on for all axes and tick mark labels on for the y-axis
-## only.
-##
-## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @asis
 ## @item @qcode{"square"}
 ## Force a square axis aspect ratio.
 ##
 ## @item @qcode{"equal"}
 ## Force x-axis unit distance to equal y-axis (and z-axis) unit distance.
@@ -72,17 +56,18 @@
 ## @item @qcode{"normal"}
 ## Restore default aspect ratio.
 ## @end table
 ##
 ## @noindent
 ## The following options control the way axis limits are interpreted.
 ##
 ## @table @asis
-## @item @qcode{"auto[xyz]"}
+## @item  @qcode{"auto"}
+## @itemx @qcode{"auto[xyz]"}
 ## Set the specified axes to have nice limits around the data or all if no
 ## axes are specified.
 ##
 ## @item @qcode{"manual"}
 ## Fix the current axes limits.
 ##
 ## @item @qcode{"tight"}
 ## Fix axes to the limits of the data.
@@ -90,51 +75,69 @@
 ## @item @qcode{"image"}
 ## Equivalent to @qcode{"tight"} and @qcode{"equal"}.
 ## @end table
 ##
 ## @noindent
 ## The following options affect the appearance of tick marks.
 ##
 ## @table @asis
-## @item @qcode{"on"}
-## Turn tick marks and labels on for all axes.
-##
-## @item @qcode{"off"}
-## Turn tick marks off for all axes.
-##
 ## @item @qcode{"tic[xyz]"}
 ## Turn tick marks on for all axes, or turn them on for the specified axes and
 ## off for the remainder.
 ##
 ## @item @qcode{"label[xyz]"}
 ## Turn tick labels on for all axes, or turn them on for the specified axes
 ## and off for the remainder.
 ##
 ## @item @qcode{"nolabel"}
 ## Turn tick labels off for all axes.
 ## @end table
 ##
-## Note, if there are no tick marks for an axis, there can be no labels.
+## Note: If there are no tick marks for an axis then there can be no labels.
 ##
 ## @noindent
 ## The following options affect the direction of increasing values on the axes.
 ##
 ## @table @asis
+## @item @qcode{"xy"}
+## Default y-axis, larger values are near the top.
+##
 ## @item @qcode{"ij"}
-## Reverse y-axis, so lower values are nearer the top.
+## Reverse y-axis, smaller values are near the top.
+## @end table
 ##
-## @item @qcode{"xy"}
-## Restore y-axis, so higher values are nearer the top.
+## @noindent
+## The following options affects the visibility of the axes.
+##
+## @table @asis
+## @item @qcode{"on"}
+## Make the axes visible.
+##
+## @item @qcode{"off"}
+## Hide the axes.
 ## @end table
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on this
 ## axes rather than the current axes returned by @code{gca}.
 ##
-## @seealso{xlim, ylim, zlim, daspect, pbaspect, box, grid, caxis}
+## Example 1: set X/Y limits and force a square aspect ratio
+##
+## @example
+## axis ([1, 2, 3, 4], "square");
+## @end example
+##
+## Example 2: enable tick marks on all axes,
+##            enable tick mark labels only on the y-axis
+##
+## @example
+## axis ("tic", "labely");
+## @end example
+##
+## @seealso{xlim, ylim, zlim, caxis, daspect, pbaspect, box, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function limits = axis (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("axis", varargin{:});
 
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -28,22 +28,29 @@
 ## Called without arguments @code{xlim} returns the x-axis limits of the
 ## current plot.
 ##
 ## With the input query @qcode{"mode"}, return the current x-limit
 ## calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{x_lo} @var{x_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
+## The special values -Inf and Inf can be used to indicate that either
+## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
+##
+## Programming Note: The @code{xlim} function operates by modifying the
+## @qcode{"xlim"} and @qcode{"xlimmode"} properties of an axes object.  These
+## properties can be be directly inspected and altered with
+## @code{get}/@code{set}.
 ## @seealso{ylim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = xlim (varargin)
 
   ret = __axis_limits__ ("xlim", varargin{:});
 
   if (! isempty (ret))
@@ -57,17 +64,17 @@ endfunction
 %! clf;
 %! line ();
 %! xlim ([0.2, 0.8]);
 %! title ("xlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! line ();
-%! xlim ("auto");
+%! xlim auto;
 %! title ("xlim is auto");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! xlim ([0.2, 0.8]);
 %! title ("xlim is [0.2, 0.8]");
 
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -28,22 +28,29 @@
 ## Called without arguments @code{ylim} returns the y-axis limits of the
 ## current plot.
 ##
 ## With the input query @qcode{"mode"}, return the current
 ## y-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{y_lo} @var{y_hi}], the limits of the
 ## y-axis are set to these values and the mode is set to @qcode{"manual"}.
+## The special values -Inf and Inf can be used to indicate that either
+## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
+##
+## Programming Note: The @code{ylim} function operates by modifying the
+## @qcode{"ylim"} and @qcode{"ylimmode"} properties of an axes object.  These
+## properties can be be directly inspected and altered with
+## @code{get}/@code{set}.
 ## @seealso{xlim, zlim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = ylim (varargin)
 
   ret = __axis_limits__ ("ylim", varargin{:});
 
   if (! isempty (ret))
@@ -57,17 +64,17 @@ endfunction
 %! clf;
 %! line ();
 %! ylim ([0.2, 0.8]);
 %! title ("ylim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! line ();
-%! ylim ("auto");
+%! ylim auto;
 %! title ("ylim is auto");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! ylim ([0.2, 0.8]);
 %! title ("ylim is [0.2, 0.8]");
 
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -28,22 +28,29 @@
 ## Called without arguments @code{zlim} returns the z-axis limits of the
 ## current plot.
 ##
 ## With the input query @qcode{"mode"}, return the current
 ## z-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{z_lo} @var{z_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
+## The special values -Inf and Inf can be used to indicate that either
+## the lower axis limit or upper axis limit should be automatically calculated.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
 ## this axis rather than the current axes returned by @code{gca}.
+##
+## Programming Note: The @code{zlim} function operates by modifying the
+## @qcode{"zlim"} and @qcode{"zlimmode"} properties of an axes object.  These
+## properties can be be directly inspected and altered with
+## @code{get}/@code{set}.
 ## @seealso{xlim, ylim, axis, set, get, gca}
 ## @end deftypefn
 
 function retval = zlim (varargin)
 
   ret = __axis_limits__ ("zlim", varargin{:});
 
   if (! isempty (ret))
@@ -69,17 +76,17 @@ endfunction
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! zlim ([0.2, 0.8]);
 %! title ("zlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
-%! zlim ("auto");
+%! zlim auto;
 %! title ("zlim is auto");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   limz = [0, 1.1];
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   zlim (limz);
