# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1553130027 25200
#      Wed Mar 20 18:00:27 2019 -0700
# Node ID 0ffbc690b49360e5b3e8d9e1ff6633ce92696f22
# Parent  7f86c097f29e709fddc2fdb2a4aefd6270f75ec5
methods.m: always return String methods when passed a String (bug #48758)

* methods.m: When passed a Java object that happens to be a java.lang.String
or a subclass, don't pass it on as the name of a possible class, return the
methods of that object.  Add BIST test.

diff --git a/scripts/miscellaneous/methods.m b/scripts/miscellaneous/methods.m
--- a/scripts/miscellaneous/methods.m
+++ b/scripts/miscellaneous/methods.m
@@ -55,24 +55,25 @@ function mtds = methods (obj, opt)
     mtds_list = __methods__ (obj);
     if (isempty (mtds_list))
       mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
       mtds_list = ostrsplit (mtds_str, ';');
       mtds_list = mtds_list(:);  # return a column vector for compatibility
       havesigs = true;
     endif
   elseif (isjava (obj))
-    ## FIXME: Function prototype accepts java obj, but doesn't work if obj
-    ##        is e.g., java.lang.String.  Convert obj to classname then.
-    try
+    ## If obj is a String or a subclass of String, then get the methods of its
+    ## class name, not the methods of the class that may be named by the
+    ## content of the string.
+    if (isa (obj, "java.lang.String"))
+      klass = class (obj);
+      mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", klass);
+    else
       mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
-    catch
-      obj = class (obj);
-      mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
-    end_try_catch
+    endif
     mtds_list = strsplit (mtds_str, ';');
     mtds_list = mtds_list(:);  # return a column vector for compatibility
     havesigs = true;
   else
     error ("methods: invalid input argument");
   endif
 
   if (havesigs && ! showsigs)
@@ -113,14 +114,19 @@ endfunction
 %! assert (! isempty ([search{:}]));
 
 ## test Java classname
 %!testif HAVE_JAVA; usejava ("jvm")
 %! mtds = methods ("java.lang.Double");
 %! search = strfind (mtds, "valueOf");
 %! assert (! isempty ([search{:}]));
 
+## Test that methods does the right thing when passed a String object
+%!testif HAVE_JAVA; usejava ("jvm") <*48758>
+%! object = javaObject ("java.lang.String", "java.lang.Integer");
+%! assert (methods (object), methods ("java.lang.String"))
+
 ## classdef
 %!assert (methods ("inputParser"),
 %!        {"addOptional"; "addParamValue"; "addParameter";
 %!         "addRequired"; "addSwitch"; "add_missing"; "delete";
 %!         "disp"; "error"; "is_argname"; "parse"; "validate_arg";
 %!         "validate_name"});
