# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1379336365 -7200
#      Mon Sep 16 14:59:25 2013 +0200
# Node ID 7ad3b9ca66f5f04a786e95bef132773d21e5228f
# Parent  577a19afdaf532ed5aa38d201d915371a82049b3
fix behaviour of bicgstab for complex matrices (bug #40017)

* scripts/sparse/bicgstab.m: fix computation of complex scalar products.

diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -140,17 +140,17 @@ function [x, flag, relres, iter, resvec]
 
     ## Vector of the residual norms for each iteration.
     resvec = norm (res) / norm_b;
 
     ## Default behaviour we don't reach tolerance tol within maxit iterations.
     flag = 1;
 
     for iter = 1:maxit
-      rho_1 = res' * rr;
+      rho_1 = rr' * res;
 
       if (iter == 1)
         p = res;
       else
         beta = (rho_1 / rho_2) * (alpha / omega);
         p = res + beta * (p - omega * v);
       endif
 
@@ -158,17 +158,17 @@ function [x, flag, relres, iter, resvec]
 
       v = Ax (phat);
       alpha = rho_1 / (rr' * v);
       s = res - alpha * v;
 
       shat = precon (s);
 
       t = Ax (shat);
-      omega = (t' * s) / (t' * t);
+      omega = (s' * t) / (t' * t);
       x = x + alpha * phat + omega * shat;
       res = s - omega * t;
       rho_2 = rho_1;
 
       relres = norm (res) / norm_b;
       resvec = [resvec; relres];
 
       if (relres <= tol)
@@ -243,8 +243,13 @@ endfunction
 %! n = 100;
 %! tol = 1e-8;
 %! a = sprand (n, n, .1);
 %! A = a'*a + 100 * eye (n);
 %! b = sum (A, 2);
 %! [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, [], diag (diag (A)));
 %! assert (x, ones (size (b)), 1e-7);
 
+%!test
+%! A = [1 + 1i, 1 + 1i; 2 - 1i, 2 + 1i];
+%! b = A * [1; 1];
+%! [x, flag, relres, iter, resvec] = bicgstab (A, b);
+%! assert (x, [1; 1], 1e-6);
