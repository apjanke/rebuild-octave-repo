# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238912797 25200
#      Sat Apr 04 23:26:37 2009 -0700
# Node ID 0b08eaf77dd6b72708c1cbf652f5930e688595b8
# Parent  77e71f3da3d60d1361491f6d75da0999bb44e8db
Detailed review of intro.texi

Added new example section showing basic calculations
Added new example of solving systems of linear equations

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-27  Rik  <rdrider0-list@yahoo.com>
+
+	* interpreter/intro.txi: Add new sample section on elementary 
+	calculations.  Add new example of solving systems of equations
+
 2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/diagperm.txi: Mention mixing with sparse matrices.
 
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc (process_texi_input_file):
 	Copy leading comment with file name info to output.
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -15,42 +15,43 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Introduction
 @chapter A Brief Introduction to Octave
 @cindex introduction
 
-This manual documents how to install, run, and use GNU Octave, and how
-to report bugs.
+GNU Octave is a high-level language, primarily intended for numerical
+computations.  It provides a convenient interactive command line 
+interface for solving linear and nonlinear problems numerically, and 
+for performing other numerical experiments.  It may also be used as a 
+batch-oriented language for data processing.
 
-GNU Octave is a high-level language, primarily intended for numerical
-computations.  It provides a convenient command line interface for
-solving linear and nonlinear problems numerically, and for performing
-other numerical experiments.  It may also be used as a batch-oriented
-language.
+GNU Octave is freely redistributable software.  You may redistribute 
+it and/or modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation.  The GPL is included in 
+this manual in @ref{Copying}.
 
-GNU Octave is also freely redistributable software.  You may
-redistribute it and/or modify it under the terms of the GNU General
-Public License as published by the Free Software Foundation.  The GPL is
-included in this manual in @ref{Copying}.
+This manual provides comprehensive documentation on how to install, 
+run, use, and extend GNU Octave.  Additional chapters describe how 
+to report bugs and help contribute code.
 
 This document corresponds to Octave version @value{VERSION}.
 
 @menu
 * Running Octave::              
 * Simple Examples::             
 * Conventions::                 
 @end menu
 
 @node Running Octave
 @section Running Octave
 
-On most systems, the way to invoke Octave is with the shell command
+On most systems, Octave is started with the shell command 
 @samp{octave}.  Octave displays an initial message and then a prompt
 indicating it is ready to accept input.  You can begin typing Octave
 commands immediately afterward.
 
 If you get into trouble, you can usually interrupt Octave by typing
 @kbd{Control-C} (written @kbd{C-c} for short).  @kbd{C-c} gets
 its name from the fact that you type it by holding down @key{CTRL} and
 then pressing @key{c}.  Doing this will normally return you to Octave's
@@ -70,29 +71,65 @@ The following chapters describe all of O
 before doing that, it might be helpful to give a sampling of some of its
 capabilities.
 
 If you are new to Octave, I recommend that you try these examples to
 begin learning Octave by using it.  Lines marked with @samp{octave:13>}
 are lines you type, ending each with a carriage return.  Octave will
 respond with an answer, or by displaying a graph.
 
+@subsection Elementary Calculations
+
+Octave can easily be used for basic numerical calculations.  Octave 
+knows about arithmetic operations (+,-,*,/), exponentiation (^), 
+natural logarithms/exponents (log, exp), and the trigonometric 
+functions (sin, cos, @dots{}).  Moreover, Octave calculations work 
+on real or imaginary numbers (i,j).  In addition, some mathematical 
+constants such as the base of the natural logarithm (e) and the ratio 
+of a circle's circumference to its diameter (pi) are pre-defined.
+
+@noindent
+For example, to verify Euler's Identity,
+@iftex
+@tex
+$$e^{\imath\pi} = -1$$
+@end tex
+@end iftex
+@ifnottex
+@display
+
+ i*pi
+e     = -1
+@end display
+@end ifnottex
+
+@noindent
+type the following which will evaluate to @code{-1} within the
+tolerance of the calculation. 
+
+@example
+octave:1> exp(i*pi)
+@end example
+
 @subsection Creating a Matrix
 
+Vectors and matrices are the basic building blocks for numerical analysis.  
 To create a new matrix and store it in a variable so that you can
 refer to it later, type the command
 
 @example
 octave:1> A = [ 1, 1, 2; 3, 5, 8; 13, 21, 34 ]
 @end example
 
 @noindent
-Octave will respond by printing the matrix in neatly aligned columns.
+Octave will respond by printing the matrix in neatly aligned columns.  
+Octave uses a comma or space to separate entries in a row, and a 
+semicolon or carriage return to separate one row from the next.  
 Ending a command with a semicolon tells Octave not to print the result
-of the command.  For example
+of the command.  For example,
 
 @example
 octave:2> B = rand (3, 2);
 @end example
 
 @noindent
 will create a 3 row, 2 column matrix with each element set to a random
 value between zero and one.
@@ -133,23 +170,24 @@ and to form the matrix product
 @code{transpose (A) * A},
 @end ifnottex
 type the command
 
 @example
 octave:6> A' * A
 @end example
 
-@subsection Solving Linear Equations
+@subsection Solving Systems of Linear Equations
 
+Systems of linear equations are ubiquitous in numerical analysis.
 To solve the set of linear equations @code{A@var{x} = b},
 use the left division operator, @samp{\}:
 
 @example
-octave:7> A \ b
+@var{x} = A \ b
 @end example
 
 @noindent
 This is conceptually equivalent to
 @iftex
 @tex
 $@code{A}^{-1}@code{b}$,
 @end tex
@@ -157,16 +195,67 @@ This is conceptually equivalent to
 @ifnottex
 @code{inv (a) * b},
 @end ifnottex
 but avoids computing the inverse of a matrix directly.
 
 If the coefficient matrix is singular, Octave will print a warning
 message and compute a minimum norm solution.
 
+A simple example comes from chemistry and the need to obtain balanced 
+chemical equations.  Consider the burning of hydrogen and oxygen to 
+produce water.
+
+@iftex
+@tex
+$$ {\rm H_{2}} + {\rm O_{2}} \rightarrow {\rm H_{2}O} $$
+@end tex
+@end iftex
+@ifnottex
+@example
+H2 + O2 --> H2O
+@end example
+@end ifnottex
+
+@noindent
+The equation above is not accurate.  The Law of Conservation of Mass requires 
+that the number of molecules of each type balance on the left- and right-hand 
+sides of the equation.  Writing the variable overall reaction with 
+individual equations for hydrogen and oxygen one finds:
+
+@iftex
+@tex
+\vbox{
+$$ x_{1}{\rm H_{2}} + x_{2}{\rm O_{2}} \rightarrow {\rm H_{2}O} $$
+$$ {\rm H:}\quad 2x_{1} + 0x_{2} \rightarrow 2 $$
+$$ {\rm O:}\quad 0x_{1} + 2x_{2} \rightarrow 1 $$
+}
+@end tex
+@end iftex
+@ifnottex
+@example
+@group
+x1*H2 + x2*O2 --> H2O
+H: 2*x1 + 0*x2 --> 2
+O: 0*x1 + 2*x2 --> 1
+@end group
+@end example
+@end ifnottex
+
+@noindent
+The solution in Octave is found in just three steps.
+
+@example
+@group
+octave:1> A = [ 2, 0; 0, 2 ];
+octave:2> b = [ 2; 1 ];
+octave:3> x = A \ b
+@end group
+@end example
+
 @subsection Integrating Differential Equations
 
 Octave has built-in functions for solving nonlinear differential
 equations of the form
 @iftex
 @tex
 $$
  {dx \over dt} = f(x,t), \qquad x(t=t_0) = x_0
@@ -206,17 +295,17 @@ This is straightforward, and may be acco
 function body directly on the command line.  For example, the following
 commands define the right-hand side function for an interesting pair of
 nonlinear differential equations.  Note that while you are entering a
 function, Octave responds with a different prompt, to indicate that it
 is waiting for you to complete your input.
 
 @example
 @group
-octave:8> function xdot = f (x, t) 
+octave:1> function xdot = f (x, t) 
 >
 >  r = 0.25;
 >  k = 1.4;
 >  a = 1.5;
 >  b = 0.16;
 >  c = 0.9;
 >  d = 0.8;
 >
@@ -226,63 +315,63 @@ octave:8> function xdot = f (x, t)
 > endfunction
 @end group
 @end example
 
 @noindent
 Given the initial condition
 
 @example
-x0 = [1; 2];
+octave:2> x0 = [1; 2];
 @end example
 
 @noindent
 and the set of output times as a column vector (note that the first
 output time corresponds to the initial condition given above)
 
 @example
-t = linspace (0, 50, 200)';
+octave:3> t = linspace (0, 50, 200)';
 @end example
 
 @noindent
 it is easy to integrate the set of differential equations:
 
 @example
-x = lsode ("f", x0, t);
+octave:4> x = lsode ("f", x0, t);
 @end example
 
 @noindent
 The function @code{lsode} uses the Livermore Solver for Ordinary
 Differential Equations, described in A. C. Hindmarsh, @cite{ODEPACK, a
 Systematized Collection of ODE Solvers}, in: Scientific Computing, R. S.
 Stepleman et al. (Eds.), North-Holland, Amsterdam, 1983, pages 55--64.
 
 @subsection Producing Graphical Output
 
 To display the solution of the previous example graphically, use the
 command
 
 @example
-plot (t, x)
+octave:1> plot (t, x)
 @end example
 
 @noindent
 If you are using a graphical user interface, Octave will automatically create
 a separate window to display the plot.
 
 To save a plot once it has been displayed on the screen, use the print
 command.  For example,
 
 @example
 print -deps foo.eps
 @end example
 
 @noindent
 will create a file called @file{foo.eps} that contains a rendering of
-the current plot.  The command
+the current plot in Encapsulated PostScript format.  The command
 
 @example
 help print
 @end example
 
 @noindent
 explains more options for the @code{print} command and provides a list
 of additional output file formats.
@@ -348,26 +437,25 @@ manual.  You may want to skip this secti
 * Evaluation Notation::         
 * Printing Notation::           
 * Error Messages::              
 * Format of Descriptions::      
 @end menu
 
 @node Fonts
 @subsection Fonts
-@cindex fonts
+@cindex documentation fonts
 
 Examples of Octave code appear in this font or form: @code{svd (a)}.
-Names that represent arguments or metasyntactic variables appear
+Names that represent variables or function arguments appear
 in this font or form: @var{first-number}.  Commands that you type at the
-shell prompt sometimes appear in this font or form:
-@samp{octave --no-init-file}.  Commands that you type at the Octave
-prompt sometimes appear in this font or form: @kbd{foo --bar --baz}.
-Specific keys on your keyboard appear in this font or form: @key{ANY}.
-@cindex any key
+shell prompt appear in this font or form: @samp{octave --no-init-file}.  
+Commands that you type at the Octave prompt sometimes appear in this font 
+or form: @kbd{foo --bar --baz}.  Specific keys on your keyboard appear 
+in this font or form: @key{ANY}.
 
 @node Evaluation Notation
 @subsection Evaluation Notation
 @cindex evaluation notation
 @cindex documentation notation
 
 In the examples in this manual, results from expressions that you
 evaluate are indicated with @samp{@result{}}.  For example,
@@ -421,35 +509,35 @@ rot90 ([1, 2; 3, 4], 7)
 @end group
 @end example
 
 @node Printing Notation
 @subsection Printing Notation
 @cindex printing notation
 
 Many of the examples in this manual print text when they are
-evaluated.  Examples in this manual indicate printed text with
-@samp{@print{}}.  The value that is returned by evaluating the
-expression (here @code{1}) is displayed with @samp{@result{}} and
-follows on a separate line.
+evaluated.  In this manual the printed text resulting from an example 
+is indicated by @samp{@print{}}.  The value that is returned by 
+evaluating the expression is displayed with @samp{@result{}} 
+(@code{1} in the next example) and follows on a separate line.
 
 @example
 @group
 printf ("foo %s\n", "bar")
      @print{} foo bar
      @result{} 1
 @end group
 @end example
 
 @node Error Messages
 @subsection Error Messages
 @cindex error message notation
 
 Some examples signal errors.  This normally displays an error message
-on your terminal.  Error messages are shown on a line starting with
+on your terminal.  Error messages are shown on a line beginning with
 @code{error:}.
 
 @example
 @group
 fieldnames ([1, 2; 3, 4])
 error: fieldnames: wrong type argument `matrix'
 @end group
 @end example
