# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1470843716 14400
#      Wed Aug 10 11:41:56 2016 -0400
# Node ID 8e18e364a6867f812989f365fdaf12089d2a8aae
# Parent  daa81db564ac68941070ec43ff00174296c6dbd1
improve checks for Qt when Qt 5 is not installed

* acinclude.m4 (OCTAVE_CHECK_QT): Always perform checks.
(OCTAVE_CHECK_QT_VERSION): Use build_qt_gui variable instead of
check_qt to decide whether to continue checking for more features.
Initialize it at beggining of macro to yes.  Don't define HAVE_QT
unless everything checks out.  Invalidate cache variable
octave_cv_func_qabstractitemmodel_beginresetmodel if corresponding
function is not found.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1323,17 +1323,17 @@ dnl OCTAVE_CHECK_QT_VERSION(VERSION)
 dnl
 AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_MSG_CHECKING([Qt version $1])
   QT_CPPFLAGS=
   QT_LDFLAGS=
   QT_LIBS=
 
   qt_version="$1";
 
-  build_qt_gui=no
+  build_qt_gui=yes
   build_qt_graphics=no
   use_qscintilla=no
   win32_terminal=no
 
   warn_qt_libraries=""
   warn_qt_version=""
   warn_qt_tools=""
   warn_qt_setlocale=""
@@ -1355,20 +1355,20 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     ;;
     *)
       AC_MSG_ERROR([Unrecognized Qt version $qt_version])
     ;;
   esac
 
   PKG_CHECK_MODULES(QT, [$QT_MODULES],
     [],
-    [check_qt=no
+    [build_qt_gui=no
      warn_qt_libraries="Qt libraries not found; disabling Qt GUI"])
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     ## Retrieve Qt compilation and linker flags
     QT_CPPFLAGS="`$PKG_CONFIG --cflags-only-I $QT_MODULES`"
     QT_LDFLAGS="`$PKG_CONFIG --libs-only-L $QT_MODULES`"
     QT_LIBS="`$PKG_CONFIG --libs-only-l $QT_MODULES`"
 
     case $host_os in
       *darwin*)
         ## Qt might be installed in framework
@@ -1381,23 +1381,23 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
                          [test $link_all_deps = yes || test -n "$QT_LDFLAGS"])
         fi
       ;;
     esac
 
     if test $qt_version = 4; then
       ## Check for Qt4
       if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
-        check_qt=no
+        build_qt_gui=no
         warn_qt_version="Qt >= 4.0.0 not found; disabling Qt GUI"
       fi
     fi
   fi
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     AC_CHECK_TOOLS(MOC, [moc-qt$qt_version])
     AC_CHECK_TOOLS(UIC, [uic-qt$qt_version])
     AC_CHECK_TOOLS(RCC, [rcc-qt$qt_version])
     AC_CHECK_TOOLS(LRELEASE, [lrelease-qt$qt_version])
 
     if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE"; then
       AC_CHECK_TOOLS(QTCHOOSER, [qtchooser])
 
@@ -1422,65 +1422,69 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
       if test -z "$LRELEASE"; then
         AC_CHECK_TOOLS(LRELEASE, [lrelease])
         if test -n "$QTCHOOSER"; then
           LRELEASEFLAGS="-qt$qt_version"
         fi
       fi
     fi
 
-    if test -n "$MOC" && test -n "$UIC" && test -n "$RCC" && test -n "$LRELEASE"; then
-      AC_DEFINE(HAVE_QT, 1,
-        [Define to 1 if Qt is available (libraries, developer header files, utility programs (moc, uic, rcc, and lrelease))])
-    else
+    if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE"; then
       warn_qt_tools="one or more of the Qt utility programs moc, uic, rcc, and lrelease not found; disabling Qt GUI"
-      check_qt=no
+      build_qt_gui=no
     fi
   fi
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     AC_CHECK_FUNCS([setlocale], [],
-      [check_qt=no
+      [build_qt_gui=no
        warn_qt_setlocale="setlocale not found; disabling Qt GUI"])
   fi
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     case $host_os in
       mingw* | msdosmsvc*)
         AC_CHECK_FUNCS([setvbuf], [win32_terminal=yes],
-          [check_qt=no
+          [build_qt_gui=no
            warn_qt_setvbuf="setvbuf not found; disabling Qt GUI"])
       ;;
       *)
         AC_CHECK_HEADERS([pty.h libutil.h util.h])
         AC_SEARCH_LIBS([openpty], [util],
           [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
         AC_CHECK_FUNCS([chmod chown ftruncate mmap munmap], [],
-          [check_qt=no
+          [build_qt_gui=no
            warn_qt_lib_fcns="At least one of chmod, chown, ftruncate, mmap, and munmap not found; disabling Qt GUI"])
       ;;
     esac
   fi
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     OCTAVE_CHECK_FUNC_QABSTRACTITEMMODEL_BEGINRESETMODEL
 
     if test $octave_cv_func_qabstractitemmodel_beginresetmodel = no; then
-      check_qt=no
+      build_qt_gui=no
       warn_qt_abstract_item_model="QAbstractItemModel::beginResetModel not found; disabling Qt GUI"
+      ## Invalidate cache so that this test will be done again if we
+      ## perform the test with a different Qt version.
+      $as_unset octave_cv_func_qabstractitemmodel_beginresetmodel
     fi
   fi
 
-  if test $check_qt = yes; then
+  if test $build_qt_gui = yes; then
     ## We have what we need to build the Qt GUI.  The remaining
     ## checks below are for optional features related to the Qt GUI.
-    build_qt_gui=yes
-  fi
+
+    AC_DEFINE(HAVE_QT, 1,
+      [Define to 1 if Qt is available, with all required functions, libraries, developer header files, and utility programs (moc, uic, rcc, and lrelease).])
 
-  if test $check_qt = yes; then
+    ## We don't need to unset cache variables for any of the remaining
+    ## tests if they fail because we have already decided that the Qt
+    ## version that we are testing now will be the one used.
+
     OCTAVE_CHECK_QFONT_MONOSPACE
     OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
@@ -1548,60 +1552,58 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
   AC_SUBST(QT_LDFLAGS)
   AC_SUBST(QT_LIBS)
 ])
 dnl
 dnl OCTAVE_CHECK_QT
 dnl
 AC_DEFUN([OCTAVE_CHECK_QT], [
   octave_qt_versions="$1"
-  if test $check_qt = yes; then
-    for ver in $octave_qt_versions; do
-      OCTAVE_CHECK_QT_VERSION([$ver])
-      if test $build_qt_gui = yes; then
-        have_qt_version=$ver
-        break
-      fi
-    done
-
+  for ver in $octave_qt_versions; do
+    OCTAVE_CHECK_QT_VERSION([$ver])
     if test $build_qt_gui = yes; then
-      if test x"$have_qt_version" = x4; then
-        AC_DEFINE(HAVE_QT4, 1, [Define if you are using Qt version 4.])
-      fi
-      if test x"$have_qt_version" = x5; then
-        AC_DEFINE(HAVE_QT5, 1, [Define if you are using Qt version 5.])
-      fi
-    else
-      if test -n "$warn_qt_libraries"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
-      fi
-      if test -n "$warn_qt_version"; then
-          OCTAVE_CONFIGURE_WARNING([warn_qt_version])
-      fi
-      if test -n "$warn_qt_tools"; then
-          OCTAVE_CONFIGURE_WARNING([warn_qt_tools])
-      fi
-      if test -n "$warn_qt_setlocale"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_setlocale])
-      fi
-      if test -n "$warn_qt_setvbuf"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_setvbuf])
-      fi
-      if test -n "$warn_qt_lib_fcns"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_lib_fcns])
-      fi
-      if test -n "$warn_qt_abstract_item_model"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_abstract_item_model])
-      fi
-      if test -n "$warn_qt_opengl"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qt_opengl])
-      fi
-      if test -n "$warn_qscintilla"; then
-        OCTAVE_CONFIGURE_WARNING([warn_qscintilla])
-      fi
+      have_qt_version=$ver
+      break
+    fi
+  done
+
+  if test $build_qt_gui = yes; then
+    if test x"$have_qt_version" = x4; then
+      AC_DEFINE(HAVE_QT4, 1, [Define if you are using Qt version 4.])
+    fi
+    if test x"$have_qt_version" = x5; then
+      AC_DEFINE(HAVE_QT5, 1, [Define if you are using Qt version 5.])
+    fi
+  else
+    if test -n "$warn_qt_libraries"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
+    fi
+    if test -n "$warn_qt_version"; then
+        OCTAVE_CONFIGURE_WARNING([warn_qt_version])
+    fi
+    if test -n "$warn_qt_tools"; then
+        OCTAVE_CONFIGURE_WARNING([warn_qt_tools])
+    fi
+    if test -n "$warn_qt_setlocale"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_setlocale])
+    fi
+    if test -n "$warn_qt_setvbuf"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_setvbuf])
+    fi
+    if test -n "$warn_qt_lib_fcns"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_lib_fcns])
+    fi
+    if test -n "$warn_qt_abstract_item_model"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_abstract_item_model])
+    fi
+    if test -n "$warn_qt_opengl"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qt_opengl])
+    fi
+    if test -n "$warn_qscintilla"; then
+      OCTAVE_CONFIGURE_WARNING([warn_qscintilla])
     fi
   fi
 
   AM_CONDITIONAL([AMCOND_BUILD_QT_GUI], [test $build_qt_gui = yes])
   AM_CONDITIONAL([AMCOND_BUILD_QT_GRAPHICS], [test $build_qt_graphics = yes])
   AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA], [test $use_qscintilla = yes])
   AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
 ])
