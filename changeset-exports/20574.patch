# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1444331205 -3600
#      Thu Oct 08 20:06:45 2015 +0100
# Node ID 780431fc41374622c32df0fc1663be67990077ca
# Parent  32a0bf9906c13c67a679f461261f4ccacfe5d7f0
linspace: add tests for the use of vectors as base and limit.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5206,17 +5206,17 @@ each row is an independent sequence betw
 \n\
 For compatibility with @sc{matlab}, return the second argument (@var{limit})\n\
 if fewer than two values are requested.\n\
 @seealso{logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
+  octave_idx_type nargin = args.length ();
 
   octave_idx_type npoints = 100;
 
   if (nargin != 2 && nargin != 3)
     {
       print_usage ();
       return retval;
     }
@@ -5277,16 +5277,30 @@ if fewer than two values are requested.\
 %! assert (size (x3) == [1, 10] && x3(1) == 1 && x3(10) == -2);
 
 ## Test complex values
 %!test
 %! exp = [1+0i, 2-1.25i, 3-2.5i, 4-3.75i, 5-5i];
 %! obs = linspace (1, 5-5i, 5);
 %! assert (obs, exp);
 
+## Test support for vectors in BASE and LIMIT
+%!assert (linspace ([1 2 3], [7 8 9]),
+%!        [linspace(1, 7); linspace(2, 8); linspace(3, 9)])
+%!assert (linspace ([1 2 3]', [7 8 9]'),
+%!        [linspace(1, 7); linspace(2, 8); linspace(3, 9)])
+%!assert (linspace ([1 2 3], 9),
+%!        [linspace(1, 9); linspace(2, 9); linspace(3, 9)])
+%!assert (linspace ([1 2 3]', 9),
+%!        [linspace(1, 9); linspace(2, 9); linspace(3, 9)])
+%!assert (linspace (1, [7 8 9]),
+%!        [linspace(1, 7); linspace(1, 8); linspace(1, 9)])
+%!assert (linspace (1, [7 8 9]'),
+%!        [linspace(1, 7); linspace(1, 8); linspace(1, 9)])
+
 ## Test class of output
 %!assert (class (linspace (1, 2)), "double")
 %!assert (class (linspace (single (1), 2)), "single")
 %!assert (class (linspace (1, single (2))), "single")
 
 ## Test obscure Matlab compatibility options
 %!assert (linspace (0, 1, []), 1)
 %!assert (linspace (10, 20, 2), [10 20])
