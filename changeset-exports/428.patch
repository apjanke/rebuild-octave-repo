# HG changeset patch
# User jwe
# Date 769827988 0
#      Wed May 25 01:06:28 1994 +0000
# Node ID fa0453b254106a3a934515f1f94e361a6c6a5ecc
# Parent  a222980dfa552c130e560a8dfe55c309b79e45d1
[project @ 1994-05-25 01:06:28 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -24,16 +24,17 @@ Software Foundation, 675 Mass Ave, Cambr
 %x NEW_MATRIX
 %x HELP_FCN
 %s TEXT_FCN
 %s DQSTRING
 %s STRING
 %s MATRIX
 
 %{
+#define SHORT_CIRCUIT_LOGICALS 1
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "input.h"
 #include "token.h"
 
@@ -538,18 +539,30 @@ EXPON	([DdEe][+-]?{D}+)
 "++"		{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, 1); }
 "--"		{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, 1); }
 "<="		{ BIN_OP_RETURN (EXPR_LE, 0); }
 "=="		{ BIN_OP_RETURN (EXPR_EQ, 0); }
 "~="		{ BIN_OP_RETURN (EXPR_NE, 0); }
 "!="		{ BIN_OP_RETURN (EXPR_NE, 0); }
 "<>"		{ BIN_OP_RETURN (EXPR_NE, 0); }
 ">="		{ BIN_OP_RETURN (EXPR_GE, 0); }
-"||"		{ BIN_OP_RETURN (EXPR_OR, 0); }
-"&&"		{ BIN_OP_RETURN (EXPR_AND, 0); }
+"||"		{
+#ifdef SHORT_CIRCUIT_LOGICALS
+		  BIN_OP_RETURN (EXPR_OR_OR, 0);
+#else
+		  BIN_OP_RETURN (EXPR_OR, 0);
+#endif
+		}
+"&&"		{
+#ifdef SHORT_CIRCUIT_LOGICALS
+		  BIN_OP_RETURN (EXPR_AND_AND, 0);
+#else
+		  BIN_OP_RETURN (EXPR_AND, 0);
+#endif
+		}
 "|"		{ BIN_OP_RETURN (EXPR_OR, 0); }
 "&"		{ BIN_OP_RETURN (EXPR_AND, 0); }
 "!"		{
 		  if (plotting && ! in_plot_range)
 		    past_plot_range = 1;
 		  BIN_OP_RETURN (EXPR_NOT, 1);
 		}
 "~"		{
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -160,16 +160,17 @@ static void maybe_warn_assign_as_truth_v
   tree_plot_limits *tree_plot_limits_type;
   tree_plot_range *tree_plot_range_type;
   tree_subplot_using *tree_subplot_using_type;
   tree_subplot_style *tree_subplot_style_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
+%token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
@@ -205,16 +206,17 @@ static void maybe_warn_assign_as_truth_v
 %type <tree_plot_limits_type> ranges
 %type <tree_plot_range_type> ranges1 
 %type <tree_subplot_using_type> using using1 
 %type <tree_subplot_style_type> style
 
 // Precedence and associativity.
 %left ';' ',' '\n'
 %right '='
+%left EXPR_AND_AND EXPR_OR_OR
 %left EXPR_AND EXPR_OR
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left ':'
 %left '-' '+'
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
@@ -746,16 +748,22 @@ simple_expr	: simple_expr1
 		  { $$ = new tree_binary_expression
 		      ($1, $3, tree::cmp_ge, $2->line (), $2->column ()); }
 		| simple_expr EXPR_GT simple_expr
 		  { $$ = new tree_binary_expression
 		      ($1, $3, tree::cmp_gt, $2->line (), $2->column ()); }
 		| simple_expr EXPR_NE simple_expr
 		  { $$ = new tree_binary_expression
 		      ($1, $3, tree::cmp_ne, $2->line (), $2->column ()); }
+		| simple_expr EXPR_AND_AND simple_expr
+		  { $$ = new tree_binary_expression
+		      ($1, $3, tree::and_and, $2->line (), $2->column ()); }
+		| simple_expr EXPR_OR_OR simple_expr
+		  { $$ = new tree_binary_expression
+		      ($1, $3, tree::or_or, $2->line (), $2->column ()); }
 		| simple_expr EXPR_AND simple_expr
 		  { $$ = new tree_binary_expression
 		      ($1, $3, tree::and, $2->line (), $2->column ()); }
 		| simple_expr EXPR_OR simple_expr
 		  { $$ = new tree_binary_expression
 		      ($1, $3, tree::or, $2->line (), $2->column ()); }
 		;
 
diff --git a/src/pt-base.h b/src/pt-base.h
--- a/src/pt-base.h
+++ b/src/pt-base.h
@@ -72,16 +72,18 @@ public:
       power,
       elem_pow,
       cmp_lt,
       cmp_le,
       cmp_eq,
       cmp_ge,
       cmp_gt,
       cmp_ne,
+      and_and,
+      or_or,
       and,
       or,
       not,
       unot,
       uminus,
       hermitian,
       transpose,
       colon,
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -460,16 +460,18 @@ public:
   int columns (void) const;
 
   tree_constant all (void) const;
   tree_constant any (void) const;
   tree_constant isstr (void) const;
 
   tree_constant convert_to_str (void);
 
+  int is_true (void) const;
+
   tree_constant cumprod (void) const;
   tree_constant cumsum (void) const;
   tree_constant prod (void) const;
   tree_constant sum (void) const;
   tree_constant sumsq (void) const;
 
   tree_constant diag (void) const;
   tree_constant diag (const tree_constant& a) const;
@@ -716,16 +718,18 @@ public:
 
 
   tree_constant all (void) const { return rep->all (); }
   tree_constant any (void) const { return rep->any (); }
   tree_constant isstr (void) const { return rep->isstr (); }
 
   tree_constant convert_to_str (void) { return rep->convert_to_str (); }
 
+  int is_true (void) const { return rep->is_true (); }
+
   tree_constant cumprod (void) const { return rep->cumprod (); }
   tree_constant cumsum (void) const { return rep->cumsum (); }
   tree_constant prod (void) const { return rep->prod (); }
   tree_constant sum (void) const { return rep->sum (); }
   tree_constant sumsq (void) const { return rep->sumsq (); }
 
   tree_constant diag (void) const { return rep->diag (); }
   tree_constant diag (const tree_constant& a) const { return rep->diag (a); }
