# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458011453 14400
#      Mon Mar 14 23:10:53 2016 -0400
# Node ID ac1e50cfc9ed646ad6b0c136d2ad7f30f59d781f
# Parent  822dc5a202c93266049e8a12c5a8466bb8d9812f
avoid possible memory leak with fftw wisdom (bug #47372)

* libinterp/dldfcn/fftw.cc (Ffftw): Save fftw wisdom string in a
local std::string object before calling
fftw_import_wisdom_from_string.

diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -223,66 +223,62 @@ used per default.\n\
         {
           // Use STL function to convert to lower case
           std::transform (arg0.begin (), arg0.end (), arg0.begin (),
                           tolower);
 
           std::string arg1 = args(1).xstring_value ("fftw: WISDOM must be a string");
 
           char *str = fftw_export_wisdom_to_string ();
+          std::string wisdom_str (str);
+          free (str);
 
           if (arg1.length () < 1)
             fftw_forget_wisdom ();
           else if (! fftw_import_wisdom_from_string (arg1.c_str ()))
             error ("fftw: could not import supplied WISDOM");
 
-          retval = octave_value (std::string (str));
-
-          // FIXME: need to free string even if there is an exception.
-          free (str);
+          retval = octave_value (wisdom_str);
         }
       else //dwisdom getter
         {
           char *str = fftw_export_wisdom_to_string ();
-          retval = octave_value (std::string (str));
-
-          // FIXME: need to free string even if there is an exception.
+          std::string wisdom_str (str);
           free (str);
+          retval = octave_value (wisdom_str);
         }
     }
   else if (arg0 == "swisdom")
     {
       //swisdom uses fftwf_ functions (float), dwisdom fftw_ (real)
       if (nargin == 2)  //swisdom setter
         {
           // Use STL function to convert to lower case
           std::transform (arg0.begin (), arg0.end (), arg0.begin (),
                           tolower);
 
           std::string arg1 = args(1).xstring_value ("fftw: WISDOM must be a string");
 
           char *str = fftwf_export_wisdom_to_string ();
+          std::string wisdom_str (str);
+          free (str);
 
           if (arg1.length () < 1)
             fftwf_forget_wisdom ();
           else if (! fftwf_import_wisdom_from_string (arg1.c_str ()))
             error ("fftw: could not import supplied WISDOM");
 
-          retval = octave_value (std::string (str));
-
-          // FIXME: need to free string even if there is an exception.
-          free (str);
+          retval = octave_value (wisdom_str);
         }
       else //swisdom getter
         {
           char *str = fftwf_export_wisdom_to_string ();
-          retval = octave_value (std::string (str));
-
-          // FIXME: need to free string even if there is an exception.
+          std::string wisdom_str (str);
           free (str);
+          retval = octave_value (wisdom_str);
         }
     }
   else if (arg0 == "threads")
     {
       if (nargin == 2)  //threads setter
         {
           if (! args(1).is_real_scalar ())
             error ("fftw: setting threads needs one integer argument");
