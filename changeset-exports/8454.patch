# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231573583 -3600
#      Sat Jan 10 08:46:23 2009 +0100
# Node ID aaf2b6d6813c42145ba9c8fb6bd8da68507a17dd
# Parent  9e1973f7709d3ea437743c3dc5a951c0fa6061e5
fix behaviour of "full"

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/sparse.cc (Ffull): Convert diagonal & permutation
+	matrices, leave other classes untouched.
+
 2009-01-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-cdm-cdm.cc: Install missing widening op.
 	* OPERATORS/op-dm-dm.cc: Dtto.
 	* OPERATORS/op-fcdm-fcdm.cc: Dtto.
 	* OPERATORS/op-fdm-fdm.cc: Dtto.
 	* OPERATORS/op-pm-pm.cc: Dtto.
 	* OPERATORS/op-fpm-fpm.cc: Dtto.
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -347,17 +347,17 @@ to have a common size.\n\
      }
 
    return retval;
 }
 
 DEFUN_DLD (full, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{FM} =} full (@var{SM})\n\
- returns a full storage matrix from a sparse one\n\
+ returns a full storage matrix from a sparse, diagonal, permutation matrix or a range.\n\
 @seealso{sparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length() < 1)
     {
       print_usage ();
@@ -368,20 +368,26 @@ DEFUN_DLD (full, args, ,
     {
       if (args(0).type_name () == "sparse matrix") 
 	retval = args(0).matrix_value ();
       else if (args(0).type_name () == "sparse complex matrix")
 	retval = args(0).complex_matrix_value ();
       else if (args(0).type_name () == "sparse bool matrix")
 	retval = args(0).bool_matrix_value ();
     } 
-  else if (args(0).is_real_type())
-    retval = args(0).matrix_value();
-  else if (args(0).is_complex_type())
-    retval = args(0).complex_matrix_value();
+  else if (args(0).is_diag_matrix () || args(0).is_perm_matrix ())
+    {
+      octave_value_list idx;
+      idx(0) = idx(1) = ':';
+      retval = args(0).do_index_op (idx);
+    }
+  else if (args(0).is_range ())
+    retval = args(0).matrix_value ();
+  else if (args(0).is_matrix_type ())
+    retval = args(0);
   else
     gripe_wrong_type_arg ("full", args(0));
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
