# HG changeset patch
# User jwe
# Date 862369763 0
#      Wed Apr 30 03:09:23 1997 +0000
# Node ID 0d79a8c11a2bcd9cadad28e69d6f9cd9306052b9
# Parent  8303749672bea08be968aca78fb1cbfc977cc551
[project @ 1997-04-30 03:09:23 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -306,16 +306,17 @@ static void set_stmt_print_flag (tree_st
   subplot_using *subplot_using_type;
   subplot_style *subplot_style_type;
   octave_user_function *octave_user_function_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ EMUL_EQ EDIV_EQ AND_EQ OR_EQ
+%token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
 %token <tok_val> QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME
@@ -373,20 +374,21 @@ static void set_stmt_print_flag (tree_st
 %type <subplot_list_type> plot_command1
 %type <plot_limits_type> ranges
 %type <plot_range_type> ranges1 
 %type <subplot_using_type> using using1 
 %type <subplot_style_type> style
 
 // Precedence and associativity.
 %left ';' ',' '\n'
-%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ EMUL_EQ EDIV_EQ OR_EQ AND_EQ
+%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ EMUL_EQ EDIV_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
 %left EXPR_AND_AND EXPR_OR_OR
 %left EXPR_AND EXPR_OR
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
+%left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
 
 // Where to start.
@@ -809,16 +811,20 @@ simple_expr1	: NUM
 		| variable ADD_EQ simple_expr
 		  { $$ = make_assign_op (ADD_EQ, $1, $2, $3); }
 		| variable SUB_EQ simple_expr
 		  { $$ = make_assign_op (SUB_EQ, $1, $2, $3); }
 		| variable MUL_EQ simple_expr
 		  { $$ = make_assign_op (MUL_EQ, $1, $2, $3); }
 		| variable DIV_EQ simple_expr
 		  { $$ = make_assign_op (DIV_EQ, $1, $2, $3); }
+		| variable LSHIFT_EQ simple_expr
+		  { $$ = make_assign_op (LSHIFT_EQ, $1, $2, $3); }
+		| variable RSHIFT_EQ simple_expr
+		  { $$ = make_assign_op (RSHIFT_EQ, $1, $2, $3); }
 		| variable EMUL_EQ simple_expr
 		  { $$ = make_assign_op (EMUL_EQ, $1, $2, $3); }
 		| variable EDIV_EQ simple_expr
 		  { $$ = make_assign_op (EDIV_EQ, $1, $2, $3); }
 		| variable AND_EQ simple_expr
 		  { $$ = make_assign_op (AND_EQ, $1, $2, $3); }
 		| variable OR_EQ simple_expr
 		  { $$ = make_assign_op (OR_EQ, $1, $2, $3); }
@@ -854,16 +860,20 @@ simple_expr1	: NUM
 		| simple_expr EMUL simple_expr
 		  { $$ = make_binary_op (EMUL, $1, $2, $3); }
 		| simple_expr EDIV simple_expr
 		  { $$ = make_binary_op (EDIV, $1, $2, $3); }
 		| simple_expr LEFTDIV simple_expr
 		  { $$ = make_binary_op (LEFTDIV, $1, $2, $3); }
 		| simple_expr ELEFTDIV simple_expr
 		  { $$ = make_binary_op (ELEFTDIV, $1, $2, $3); }
+		| simple_expr LSHIFT simple_expr
+		  { $$ = make_binary_op (LSHIFT, $1, $2, $3); }
+		| simple_expr RSHIFT simple_expr
+		  { $$ = make_binary_op (RSHIFT, $1, $2, $3); }
 		| simple_expr EXPR_LT simple_expr
 		  { $$ = make_binary_op (EXPR_LT, $1, $2, $3); }
 		| simple_expr EXPR_LE simple_expr
 		  { $$ = make_binary_op (EXPR_LE, $1, $2, $3); }
 		| simple_expr EXPR_EQ simple_expr
 		  { $$ = make_binary_op (EXPR_EQ, $1, $2, $3); }
 		| simple_expr EXPR_GE simple_expr
 		  { $$ = make_binary_op (EXPR_GE, $1, $2, $3); }
@@ -1688,16 +1698,24 @@ make_binary_op (int op, tree_expression 
     case LEFTDIV:
       t = octave_value::ldiv;
       break;
 
     case ELEFTDIV:
       t = octave_value::el_ldiv;
       break;
 
+    case LSHIFT:
+      t = octave_value::lshift;
+      break;
+
+    case RSHIFT:
+      t = octave_value::rshift;
+      break;
+
     case EXPR_LT:
       t = octave_value::lt;
       break;
 
     case EXPR_LE:
       t = octave_value::le;
       break;
 
@@ -2122,16 +2140,24 @@ make_assign_op (int op, tree_index_expre
     case MUL_EQ:
       t = octave_value::mul_eq;
       break;
 
     case DIV_EQ:
       t = octave_value::div_eq;
       break;
 
+    case LSHIFT_EQ:
+      t = octave_value::lshift_eq;
+      break;
+
+    case RSHIFT_EQ:
+      t = octave_value::rshift_eq;
+      break;
+
     case EMUL_EQ:
       t = octave_value::el_mul_eq;
       break;
 
     case EDIV_EQ:
       t = octave_value::el_div_eq;
       break;
 
