# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1503469686 25200
#      Tue Aug 22 23:28:06 2017 -0700
# Node ID 20c83f6191028871b7ebd568cb93485cdee45244
# Parent  712736d43124183e64ef96c581b5e43dba0f2672
bump Java compatibility level to 1.6, minimum supported by Java 9 (bug #51803)

* scripts/java/module.mk (%.class): Compile Java with -source 1.6 -target 1.6.
* ov-java.cc (octave::JVMArgs::JVMArgs, initialize_jvm, thread_jni_env): Use
JNI_VERSION_1_6 to initialize the JVM.  Thanks to Ernst Reissner for the
suggestion.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -186,17 +186,17 @@ bool Vdebug_java = false;
 namespace octave
 {
   class JVMArgs
   {
   public:
 
     JVMArgs (void)
     {
-      vm_args.version = JNI_VERSION_1_2;
+      vm_args.version = JNI_VERSION_1_6;
       vm_args.nOptions = 0;
       vm_args.options = nullptr;
       vm_args.ignoreUnrecognized = false;
     }
 
     ~JVMArgs (void)
     {
       clean ();
@@ -586,22 +586,22 @@ initialize_jvm (void)
   if (JNI_GetCreatedJavaVMs (&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
 #endif
 
     {
       // At least one JVM exists, try to attach to it
 
       switch (jvm->GetEnv (reinterpret_cast<void **> (&current_env),
-                           JNI_VERSION_1_2))
+                           JNI_VERSION_1_6))
         {
         case JNI_EDETACHED:
           // Attach the current thread
           JavaVMAttachArgs vm_args;
-          vm_args.version = JNI_VERSION_1_2;
+          vm_args.version = JNI_VERSION_1_6;
           vm_args.name = const_cast<char *> ("octave");
           vm_args.group = nullptr;
           if (jvm->AttachCurrentThread (reinterpret_cast<void **> (&current_env),
                                         &vm_args) < 0)
             error ("JVM internal error, unable to attach octave to existing JVM");
           break;
 
         case JNI_EVERSION:
@@ -705,17 +705,17 @@ jstring_to_string (JNIEnv *jni_env, jobj
 }
 
 static inline JNIEnv *
 thread_jni_env (void)
 {
   JNIEnv *env = nullptr;
 
   if (jvm)
-    jvm->GetEnv (reinterpret_cast<void **> (&env), JNI_VERSION_1_2);
+    jvm->GetEnv (reinterpret_cast<void **> (&env), JNI_VERSION_1_6);
 
   return env;
 }
 
 #endif
 
 bool
 octave_java::is_java_string (void) const
diff --git a/scripts/java/module.mk b/scripts/java/module.mk
--- a/scripts/java/module.mk
+++ b/scripts/java/module.mk
@@ -31,17 +31,20 @@ endif
 JAVA_CLASSES = $(JAVA_SRC:.java=.class)
 
 %canon_reldir%_JAVA_SRC = $(addprefix %reldir%/, $(JAVA_SRC))
 
 %canon_reldir%_JAVA_CLASSES = $(addprefix %reldir%/, $(JAVA_CLASSES))
 
 $(%canon_reldir%_JAVA_CLASSES) : %.class : %.java | %reldir%/$(octave_dirstamp)
 	$(AM_V_GEN)$(MKDIR_P) %reldir%/$(org_octave_dir) && \
-		( cd $(srcdir)/scripts/java; "$(JAVAC)" -source 1.3 -target 1.3 -Xlint:-options -d $(abs_top_builddir)/scripts/java $(org_octave_dir)/$(<F) )
+	( cd $(srcdir)/scripts/java; \
+	  "$(JAVAC)" -source 1.6 -target 1.6 -Xlint:-options \
+	             -d $(abs_top_builddir)/scripts/java \
+	             $(org_octave_dir)/$(<F) )
 
 if AMCOND_HAVE_JAVA
 %reldir%/octave.jar: $(%canon_reldir%_JAVA_CLASSES)
 	$(AM_V_GEN)rm -f $@-t $@ && \
 	( cd scripts/java; \
 	  "$(JAR)" cf octave.jar-t $(JAVA_CLASSES) ) && \
 	mv $@-t $@
 endif
