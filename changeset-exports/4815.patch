# HG changeset patch
# User jwe
# Date 1078359284 0
#      Thu Mar 04 00:14:44 2004 +0000
# Node ID 2eb844b27953e294fa8176c7de3acd79c7bef0da
# Parent  495e9df7583693460ac1598e19e09d956f995232
[project @ 2004-03-04 00:14:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2004-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-bool.cc (octave_bool::load_hdf5, octave_bool::save_hdf5):
+	Avoid unnecessary casts.
+	* ov-bool-mat.cc (octave_bool_matrix::load_hdf5,
+	octave_bool_matrix::save_hdf5): Likewise.
+	* ov-cell.cc (octave_cell::load_hdf5, octave_cell::save_hdf5):
+	Likewise.
+	* ov-complex.cc (octave_complex::load_hdf5,
+	octave_complex::save_hdf5): Likewise.
+	* ov-cx-mat.cc (octave_complex_matrix::load_hdf5,
+	octave_complex_matrix::save_hdf5): Likewise.
+	* ov-range.cc (octave_range::load_hdf5, octave_range::save_hdf5):
+	Likewise.
+	* ov-re-mat.cc (octave_matrix::load_hdf5, octave_matrix::save_hdf5):
+	Likewise.
+	* ov-scalar.cc (octave_scalar::load_hdf5, octave_scalar::save_hdf5):
+	Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::load_hdf5,
+	octave_char_matrix_str::save_hdf5): Likewise.
+
 2004-03-03 David Bateman <dbateman@free.fr>
 
 	* ov-cell.cc (octave_cell::save_hdf5, octave_cell::load_hdf5):
 	Make N-d aware.
 
 2004-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y: Delete spaces surrounding = in %name-prefix directive.
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -354,17 +354,17 @@ octave_bool_matrix::save_hdf5 (hid_t loc
   boolNDArray m = bool_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
     hdims[i] = d (rank-i-1);
 
-  space_hid = H5Screate_simple (rank, hdims, (hsize_t*) 0);
+  space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0) return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_HBOOL, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return false;
@@ -373,17 +373,17 @@ octave_bool_matrix::save_hdf5 (hid_t loc
   int nel = m.nelem ();
   bool *mtmp = m.fortran_vec ();
   hbool_t htmp[nel];
   
   for (int i = 0; i < nel; i++)
     htmp[i] = mtmp[i];
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, (void*) htmp) >= 0;
+		     H5P_DEFAULT, htmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool
 octave_bool_matrix::load_hdf5 (hid_t loc_id, const char *name,
@@ -418,24 +418,24 @@ octave_bool_matrix::load_hdf5 (hid_t loc
     {
       dv.resize (2);
       dv(0) = 1;
       dv(1) = hdims[0];
     }
   else
     {
       dv.resize (rank);
-      for (int i = 0, j = rank - 1; i < (int)rank; i++, j--)
+      for (hsize_t i = 0, j = rank - 1; i < rank; i++, j--)
 	dv(j) = hdims[i];
     }
 
   int nel = dv.numel ();
   hbool_t htmp[nel];
   if (H5Dread (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, (void *) htmp) >= 0) 
+	       H5P_DEFAULT, htmp) >= 0) 
     {
       retval = true;
 
       boolNDArray btmp (dv);
       for (int i = 0; i < nel; i++)
 	  btmp.elem (i) = htmp[i];
 
       matrix = btmp;
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -165,30 +165,30 @@ octave_bool::load_binary (std::istream& 
 bool
 octave_bool::save_hdf5 (hid_t loc_id, const char *name,
 			bool /* save_as_floats */)
 {
   hsize_t dimens[3];
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
 
-  space_hid = H5Screate_simple (0, dimens, (hsize_t*) 0);
+  space_hid = H5Screate_simple (0, dimens, 0);
   if (space_hid < 0) return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_DOUBLE, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
 
   double tmp = double_value ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, (void*) &tmp) >= 0;
+		     H5P_DEFAULT, &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool
 octave_bool::load_hdf5 (hid_t loc_id, const char *name,
@@ -202,17 +202,17 @@ octave_bool::load_hdf5 (hid_t loc_id, co
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   double dtmp;
   if (H5Dread (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, (void *) &dtmp) < 0)
+	       H5P_DEFAULT, &dtmp) < 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   scalar = (dtmp != 0.);
   H5Dclose (data_hid);
   return true;
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -682,78 +682,86 @@ octave_cell::load_binary (std::istream& 
       error ("load: failed to load matrix constant");
       success = false;
     }
 
   return success;
 }
 
 #if defined (HAVE_HDF5)
+
 bool
 octave_cell::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
 {
   dim_vector dv = dims ();
-  hsize_t rank = dv.length(); 
+  hsize_t rank = dv.length (); 
   hid_t space_hid = -1, data_hid = -1, size_hid = -1;
 
   data_hid = H5Gcreate (loc_id, name, 0);
-  if (data_hid < 0) return false;
+
+  if (data_hid < 0)
+    return false;
 
   // Have to save cell array shape, since can't have a 
   // dataset of groups....
-  space_hid = H5Screate_simple (1, &rank, (hsize_t*) 0);
+
+  space_hid = H5Screate_simple (1, &rank, 0);
+
   if (space_hid < 0) 
     {
       H5Gclose (data_hid);
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (int, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
-  for (int i = 0; i < (int)rank; i++)
-    hdims[i] = dv (rank-i-1);
+  for (int i = 0; i < rank; i++)
+    hdims[i] = dv(rank-i-1);
 
   size_hid = H5Dcreate (data_hid, "dims", H5T_NATIVE_INT, space_hid, 
 			H5P_DEFAULT);
   if (size_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
 
   if (! H5Dwrite (size_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL,
-		  H5P_DEFAULT, (void*) hdims) < 0)
+		  H5P_DEFAULT, hdims) < 0)
     {
       H5Dclose (size_hid);
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
+
   H5Dclose (size_hid);
   H5Sclose (space_hid);
 
-  // recursively add each element of the cell to this group
+  // Recursively add each element of the cell to this group.
+
   Cell tmp = cell_value ();
   
   for (int i = 0; i < dv.numel (); i++)
     {
       char s[20];
       sprintf (s, "_%d", i);
 
       if (! add_hdf5_data(data_hid, tmp.elem (i), s, "", false,
 			  save_as_floats))
 	{
 	  H5Gclose (data_hid);
 	  return false;
 	}
     }
 
   H5Gclose (data_hid);
+
   return true;
 }
 
 bool
 octave_cell::load_hdf5 (hid_t loc_id, const char *name,
 			bool have_h5giterate_bug)
 {
   bool retval = false;
@@ -769,43 +777,50 @@ octave_cell::load_hdf5 (hid_t loc_id, co
     {
       H5Dclose(data_hid);
       H5Gclose(group_id);
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
   OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
+
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  // Octave uses column-major, while HDF5 uses row-major ordering
+  // Octave uses column-major, while HDF5 uses row-major ordering.
+
   dim_vector dv;
   dv.resize (hdims[0]);
+
   OCTAVE_LOCAL_BUFFER (int, tmp, hdims[0]);
   
   if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, (void *) tmp) < 0)
+	       H5P_DEFAULT, tmp) < 0)
     {
       H5Dclose(data_hid);
       H5Gclose(group_id);
       return false;
     }
+
   H5Dclose (data_hid);
   H5Gclose (group_id);
 
-  for (int i = 0, j = hdims[0] - 1; i < (int)hdims[0]; i++, j--)
+  for (hsize_t i = 0, j = hdims[0] - 1; i < hdims[0]; i++, j--)
     dv(j) = tmp[i];
 
   hdf5_callback_data dsub;
 
   herr_t retval2 = -1;
+
   Cell m (dv);
+
   int current_item = 0;
+
   if (have_h5giterate_bug)
-    current_item = 1;   // Skip dims items in group
+    current_item = 1;   // Skip dims items in group.
 
 #ifdef HAVE_H5GGET_NUM_OBJS
   hsize_t num_obj = 0;
   H5Gget_num_objs (loc_id, &num_obj);
 #endif
 
   for (int i = 0; i < dv.numel (); i++)
     {
@@ -820,28 +835,29 @@ octave_cell::load_hdf5 (hid_t loc_id, co
       
       if (retval2 <= 0)
 	break;
 
       octave_value ov = dsub.tc;
       m.elem (i) = ov;
 
       if (have_h5giterate_bug)
-	current_item++;  // H5Giterate returned the last index processed
+	current_item++;  // H5Giterate returned the last index processed.
 
     }
 
   if (retval2 >= 0)
     {
       matrix = m;
       retval = true;
     }
   
   return retval;
 }
+
 #endif
 
 DEFUN (iscell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscell (@var{x})\n\
 Return true if @var{x} is a cell array object.  Otherwise, return\n\
 false.\n\
 @end deftypefn")
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -239,17 +239,17 @@ octave_complex::load_binary (std::istrea
 bool
 octave_complex::save_hdf5 (hid_t loc_id, const char *name,
 			   bool /* save_as_floats */)
 {
   hsize_t dimens[3];
   hid_t space_hid = -1, type_hid = -1, data_hid = -1;
   bool retval = true;
 
-  space_hid = H5Screate_simple (0, dimens, (hsize_t*) 0);
+  space_hid = H5Screate_simple (0, dimens, 0);
   if (space_hid < 0) return false;
 
   type_hid = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
   if (type_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
@@ -259,17 +259,17 @@ octave_complex::save_hdf5 (hid_t loc_id,
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       return false;
     }
 
   Complex tmp = complex_value ();
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
-		     (void*) X_CAST (double*, &tmp)) >= 0;
+		     &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool
@@ -298,17 +298,17 @@ octave_complex::load_hdf5 (hid_t loc_id,
       H5Sclose (space_id);
       H5Dclose (data_hid);
       return false;
     }
 
   // complex scalar:
   Complex ctmp;
   if (H5Dread (data_hid, complex_type, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-	       (void *) X_CAST (double *, &ctmp)) >= 0)
+	       &ctmp) >= 0)
     {
       retval = true;
       scalar = ctmp;
     }
 
   H5Tclose(complex_type);
   H5Sclose (space_id);
   H5Dclose (data_hid);
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -456,17 +456,17 @@ octave_complex_matrix::save_hdf5 (hid_t 
   ComplexNDArray m = complex_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
     hdims[i] = d (rank-i-1);
  
-  space_hid = H5Screate_simple (rank, hdims, (hsize_t*) 0);
+  space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0) return false;
 
   hid_t save_type_hid = H5T_NATIVE_DOUBLE;
 
   if (save_as_floats)
     {
       if (m.too_large_for_float ())
 	{
@@ -505,17 +505,17 @@ octave_complex_matrix::save_hdf5 (hid_t 
 
   hid_t complex_type_hid = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
   if (complex_type_hid < 0) retval = false;
 
   if (retval)
     {
       Complex *mtmp = m.fortran_vec ();
       if (H5Dwrite (data_hid, complex_type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		    (void*) X_CAST (double *, mtmp)) < 0)
+		    mtmp) < 0)
 	{
 	  H5Tclose (complex_type_hid);
 	  retval = false;
 	}
     }
 
   H5Tclose (complex_type_hid);
   H5Dclose (data_hid);
@@ -570,24 +570,24 @@ octave_complex_matrix::load_hdf5 (hid_t 
     {
       dv.resize (2);
       dv(0) = 1;
       dv(1) = hdims[0];
     }
   else
     {
       dv.resize (rank);
-      for (int i = 0, j = rank - 1; i < (int)rank; i++, j--)
+      for (hsize_t i = 0, j = rank - 1; i < rank; i++, j--)
 	dv(j) = hdims[i];
     }
 
   ComplexNDArray m (dv);
   Complex *reim = m.fortran_vec ();
-  if (H5Dread (data_hid, complex_type, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
-	       (void *) X_CAST (double *, reim)) >= 0) 
+  if (H5Dread (data_hid, complex_type, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+	       reim) >= 0) 
     {
       retval = true;
       matrix = m;
     }
 
   H5Tclose(complex_type);
   H5Sclose (space_id);
   H5Dclose (data_hid);
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -378,17 +378,17 @@ hdf5_make_range_type (hid_t num_type)
 bool
 octave_range::save_hdf5 (hid_t loc_id, const char *name,
 			 bool /* save_as_floats */)
 {
   hsize_t dimens[3];
   hid_t space_hid = -1, type_hid = -1, data_hid = -1;
   bool retval = true;
 
-  space_hid = H5Screate_simple (0, dimens, (hsize_t*) 0);
+  space_hid = H5Screate_simple (0, dimens, 0);
   if (space_hid < 0) return false;
 
   type_hid = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
   if (type_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
@@ -403,17 +403,17 @@ octave_range::save_hdf5 (hid_t loc_id, c
   
   Range r = range_value ();
   double range_vals[3];
   range_vals[0] = r.base ();
   range_vals[1] = r.limit ();
   range_vals[2] = r.inc ();
 
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) range_vals) >= 0;
+		     range_vals) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool 
@@ -441,17 +441,17 @@ octave_range::load_hdf5 (hid_t loc_id, c
       H5Tclose(range_type);
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       return false;
     }
 
   double rangevals[3];
   if (H5Dread (data_hid, range_type, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
-	       (void *) rangevals) >= 0)
+	       rangevals) >= 0)
     {
       retval = true;
       Range r (rangevals[0], rangevals[1], rangevals[2]);
       range = r;
     }
 
   H5Tclose(range_type);
   H5Sclose (space_hid);
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -519,17 +519,17 @@ octave_matrix::save_hdf5 (hid_t loc_id, 
   NDArray m = array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
     hdims[i] = d (rank-i-1);
  
-  space_hid = H5Screate_simple (rank, hdims, (hsize_t *)0);
+  space_hid = H5Screate_simple (rank, hdims, 0);
 
   if (space_hid < 0) return false;
 
   hid_t save_type_hid = H5T_NATIVE_DOUBLE;
 
   if (save_as_floats)
     {
       if (m.too_large_for_float ())
@@ -557,17 +557,17 @@ octave_matrix::save_hdf5 (hid_t loc_id, 
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return false;
     }
 
   double *mtmp = m.fortran_vec ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, (void*) mtmp) >= 0;
+		     H5P_DEFAULT, mtmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool
 octave_matrix::load_hdf5 (hid_t loc_id, const char *name,
@@ -603,24 +603,24 @@ octave_matrix::load_hdf5 (hid_t loc_id, 
     {
       dv.resize (2);
       dv(0) = 1;
       dv(1) = hdims[0];
     }
   else
     {
       dv.resize (rank);
-      for (int i = 0, j = rank - 1; i < (int)rank; i++, j--)
+      for (hsize_t i = 0, j = rank - 1; i < rank; i++, j--)
 	dv(j) = hdims[i];
     }
 
   NDArray m (dv);
   double *re = m.fortran_vec ();
   if (H5Dread (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, (void *) re) >= 0) 
+	       H5P_DEFAULT, re) >= 0) 
     {
       retval = true;
       matrix = m;
     }
 
   H5Sclose (space_id);
   H5Dclose (data_hid);
   return retval;
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -187,17 +187,17 @@ octave_scalar::save_binary (std::ostream
   double dtmp = double_value ();
   os.write (X_CAST (char *, &dtmp), 8);
 
   return true;
 }
 
 bool 
 octave_scalar::load_binary (std::istream& is, bool swap,
-				 oct_mach_info::float_format fmt)
+			    oct_mach_info::float_format fmt)
 {
   char tmp;
   if (! is.read (X_CAST (char *, &tmp), 1))
     return false;
 
   double dtmp;
   read_doubles (is, &dtmp, X_CAST (save_type, tmp), 1, swap, fmt);
   if (error_state || ! is)
@@ -211,30 +211,30 @@ octave_scalar::load_binary (std::istream
 bool
 octave_scalar::save_hdf5 (hid_t loc_id, const char *name,
 			  bool /* save_as_floats */)
 {
   hsize_t dimens[3];
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
 
-  space_hid = H5Screate_simple (0, dimens, (hsize_t*) 0);
+  space_hid = H5Screate_simple (0, dimens, 0);
   if (space_hid < 0) return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_DOUBLE, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
 
   double tmp = double_value ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, (void*) &tmp) >= 0;
+		     H5P_DEFAULT, &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool
 octave_scalar::load_hdf5 (hid_t loc_id, const char *name,
@@ -248,17 +248,17 @@ octave_scalar::load_hdf5 (hid_t loc_id, 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   double dtmp;
   if (H5Dread (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, (void *) &dtmp) < 0)
+	       H5P_DEFAULT, &dtmp) < 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   scalar = dtmp;
   H5Dclose (data_hid);
   return true;
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -507,17 +507,17 @@ octave_char_matrix_str::save_hdf5 (hid_t
   charNDArray m = char_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
     hdims[i] = d (rank-i-1);
  
-  space_hid = H5Screate_simple (rank, hdims, (hsize_t *)0);
+  space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0)
     return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_CHAR, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
@@ -525,17 +525,17 @@ octave_char_matrix_str::save_hdf5 (hid_t
     }
 
   OCTAVE_LOCAL_BUFFER (char, s, d.numel ());
 
   for (int i = 0; i < d.numel(); ++i)
     s[i] = m(i);
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_CHAR, H5S_ALL, H5S_ALL, 
-		     H5P_DEFAULT, (void*) s) >= 0;
+		     H5P_DEFAULT, s) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   return retval;
 }
 
 bool 
 octave_char_matrix_str::load_hdf5 (hid_t loc_id, const char *name,
@@ -575,24 +575,24 @@ octave_char_matrix_str::load_hdf5 (hid_t
 	{
 	  dv.resize (2);
 	  dv(0) = 1;
 	  dv(1) = hdims[0];
 	}
       else
 	{
 	  dv.resize (rank);
-	  for (int i = 0, j = rank - 1; i < (int)rank; i++, j--)
+	  for (hsize_t i = 0, j = rank - 1; i < rank; i++, j--)
 	    dv(j) = hdims[i];
 	}
 
       charNDArray m (dv);
       char *str = m.fortran_vec ();
       if (H5Dread (data_hid, H5T_NATIVE_CHAR, H5S_ALL, H5S_ALL, 
-		   H5P_DEFAULT, (void *) str) >= 0) 
+		   H5P_DEFAULT, str) >= 0) 
 	{
 	  retval = true;
 	  matrix = m;
 	}
 
       H5Tclose (type_hid);
       H5Sclose (space_hid);
       H5Dclose (data_hid);
