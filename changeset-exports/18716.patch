# HG changeset patch
# User carandraug@octave.org
# Date 1399039029 -3600
#      Fri May 02 14:57:09 2014 +0100
# Node ID 89055521e04d7f22243c95f4ce7494c1766b1f50
# Parent  01e69fd38459827197c54665e65de7694a497fdf
ismember: ~10x performance increase (input dependent) when set is 1 row.

* ismember.m: broadcast @eq instead of using unique(), when comparing rows
and the set is a single row for some performance increase.

diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -113,24 +113,29 @@ function [tf, a_idx] = ismember (A, s, v
 
   else
 
     if (isempty (A) || isempty (s))
       tf = false (rows (A), 1);
       a_idx = zeros (rows (A), 1);
     else
 
-      ## FIXME: lookup does not support "rows", so we just use unique.
-      [xx, ii, jj] = unique ([A; s], "rows", "last");
-      na = rows (A);
-      jj = ii(jj(1:na));
-      tf = jj > na;
+      if (rows (s) == 1)
+        tf = all (bsxfun (@eq, A, s), 2);
+        a_idx = double (tf);
+      else
+        ## FIXME: lookup does not support "rows", so we just use unique.
+        [~, ii, jj] = unique ([A; s], "rows", "last");
+        na = rows (A);
+        jj = ii(jj(1:na));
+        tf = jj > na;
 
-      if (nargout > 1)
-        a_idx = max (0, jj - na);
+        if (nargout > 1)
+          a_idx = max (0, jj - na);
+        endif
       endif
 
     endif
   endif
 
 endfunction
 
 
@@ -209,8 +214,13 @@ endfunction
 %! assert (result, [true; false; true]);
 %! assert (a_idx, [2; 0; 5]);
 
 %!test
 %! [result, a_idx] = ismember ([1.1,1.2,1.3; 2.1,2.2,2.3; 10,11,12], [1.1,1.2,1.3; 10,11,12; 2.12,2.22,2.32], "rows");
 %! assert (result, [true; false; true]);
 %! assert (a_idx, [1; 0; 2]);
 
+%!test
+%! [result, a_idx] = ismember ([1:3; 5:7; 4:6; 0:2; 1:3; 2:4], [1:3], "rows");
+%! assert (result, logical ([1 0 0 0 1 0]'));
+%! assert (a_idx, [1 0 0 0 1 0]');
+
