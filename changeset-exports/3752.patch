# HG changeset patch
# User jwe
# Date 976734163 0
#      Wed Dec 13 19:02:43 2000 +0000
# Node ID 719a44ff67c930e66c5c9b3df1fd98103fe0cd15
# Parent  1ae5be669422510854b7d07d39926c260a3228c4
[project @ 2000-12-13 19:02:42 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1526,44 +1526,54 @@ ComplexMatrix::lssolve (const ComplexMat
       Complex *presult = result.fortran_vec ();
 
       int len_s = m < n ? m : n;
       Array<double> s (len_s);
       double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      int lwork;
-      if (m < n)
-	lwork = 2*m + (nrhs > n ? nrhs : n);
-      else
-	lwork = 2*n + (nrhs > m ? nrhs : m);
-
-      lwork *= 16;
-
-      Array<Complex> work (lwork);
-      Complex *pwork = work.fortran_vec ();
-
       int lrwork = (5 * (m < n ? m : n)) - 4;
       lrwork = lrwork > 1 ? lrwork : 1;
       Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
+      // Ask ZGELSS what the dimension of WORK should be.
+
+      int lwork = -1;
+
+      Array<Complex> work (1);
+
       F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
-				 nrr, ps, rcond, rank, pwork, lwork,
-				 prwork, info));
+				 nrr, ps, rcond, rank,
+				 work.fortran_vec (), lwork, prwork,
+				 info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  retval.resize (n, nrhs);
-	  for (int j = 0; j < nrhs; j++)
-	    for (int i = 0; i < n; i++)
-	      retval.elem (i, j) = result.elem (i, j);
+	  lwork = static_cast<int> (real (work(0)));
+	  work.resize (lwork);
+
+	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
+				     work.fortran_vec (), lwork,
+				     prwork, info));
+
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in zgelss");
+	  else
+	    {
+	      retval.resize (n, nrhs);
+	      for (int j = 0; j < nrhs; j++)
+		for (int i = 0; i < n; i++)
+		  retval.elem (i, j) = result.elem (i, j);
+	    }
 	}
     }
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::lssolve (const ColumnVector& b) const
@@ -1629,43 +1639,53 @@ ComplexMatrix::lssolve (const ComplexCol
       Complex *presult = result.fortran_vec ();
 
       int len_s = m < n ? m : n;
       Array<double> s (len_s);
       double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      int lwork;
-      if (m < n)
-	lwork = 2*m + (nrhs > n ? nrhs : n);
-      else
-	lwork = 2*n + (nrhs > m ? nrhs : m);
-
-      lwork *= 16;
-
-      Array<Complex> work (lwork);
-      Complex *pwork = work.fortran_vec ();
-
       int lrwork = (5 * (m < n ? m : n)) - 4;
       lrwork = lrwork > 1 ? lrwork : 1;
       Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
+      // Ask ZGELSS what the dimension of WORK should be.
+
+      int lwork = -1;
+
+      Array<Complex> work (1);
+
       F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
-				 nrr, ps, rcond, rank, pwork, lwork,
-				 prwork, info));
+				 nrr, ps, rcond, rank,
+				 work.fortran_vec (), lwork, prwork,
+				 info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
-	  retval.resize (n);
-	  for (int i = 0; i < n; i++)
-	    retval.elem (i) = result.elem (i);
+	  lwork = static_cast<int> (real (work(0)));
+	  work.resize (lwork);
+
+	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
+				     work.fortran_vec (), lwork,
+				     prwork, info));
+
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in zgelss");
+	  else
+	    {
+	      retval.resize (n);
+	      for (int i = 0; i < n; i++)
+		retval.elem (i) = result.elem (i);
+	    }
 	}
     }
 
   return retval;
 }
 
 // Constants for matrix exponential calculation.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-12-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (Matrix::lssolve): Ask DGELSS for size of work vector.
+	* CMatrix.cc (ComplexMatrix::lssolve): Likewise, for ZGELSS.
+
 2000-12-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Range.cc (Range::nelem_internal): Call round here, not tfloor.
 	Rename n_intervals to be n_elt.
 
 	* strptime.c: Surround everything after including config.h in
 	#ifndef HAVE_STRPTIME ... #endif.
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1195,42 +1195,47 @@ Matrix::lssolve (const Matrix& b, int& i
       double *presult = result.fortran_vec ();
 
       int len_s = m < n ? m : n;
       Array<double> s (len_s);
       double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      int lwork;
-      if (m < n)
-	lwork = 3*m + (2*m > nrhs
-		       ? (2*m > n ? 2*m : n)
-		       : (nrhs > n ? nrhs : n));
-      else
-	lwork = 3*n + (2*n > nrhs
-		       ? (2*n > m ? 2*n : m)
-		       : (nrhs > m ? nrhs : m));
-
-      lwork *= 16;
-
-      Array<double> work (lwork);
-      double *pwork = work.fortran_vec ();
+      // Ask DGELSS what the dimension of WORK should be.
+
+      int lwork = -1;
+
+      Array<double> work (1);
 
       F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr, ps,
-				 rcond, rank, pwork, lwork, info));
+				 rcond, rank, work.fortran_vec (),
+				 lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
       else
 	{
-	  retval.resize (n, nrhs);
-	  for (int j = 0; j < nrhs; j++)
-	    for (int i = 0; i < n; i++)
-	      retval.elem (i, j) = result.elem (i, j);
+	  lwork = static_cast<int> (work(0));
+	  work.resize (lwork);
+
+	  F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
+				     work.fortran_vec (), lwork, info));
+
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in dgelss");
+	  else
+	    {
+	      retval.resize (n, nrhs);
+	      for (int j = 0; j < nrhs; j++)
+		for (int i = 0; i < n; i++)
+		  retval.elem (i, j) = result.elem (i, j);
+	    }
 	}
     }
 
   return retval;
 }
 
 ComplexMatrix
 Matrix::lssolve (const ComplexMatrix& b) const
@@ -1298,41 +1303,46 @@ Matrix::lssolve (const ColumnVector& b, 
       double *presult = result.fortran_vec ();
 
       int len_s = m < n ? m : n;
       Array<double> s (len_s);
       double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      int lwork;
-      if (m < n)
-	lwork = 3*m + (2*m > nrhs
-		       ? (2*m > n ? 2*m : n)
-		       : (nrhs > n ? nrhs : n));
-      else
-	lwork = 3*n + (2*n > nrhs
-		       ? (2*n > m ? 2*n : m)
-		       : (nrhs > m ? nrhs : m));
-
-      lwork *= 16;
-
-      Array<double> work (lwork);
-      double *pwork = work.fortran_vec ();
-
-      F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr,
-				 ps, rcond, rank, pwork, lwork, info));
+      // Ask DGELSS what the dimension of WORK should be.
+
+      int lwork = -1;
+
+      Array<double> work (1);
+
+      F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr, ps,
+				 rcond, rank, work.fortran_vec (),
+				 lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
       else
 	{
-	  retval.resize (n);
-	  for (int i = 0; i < n; i++)
-	    retval.elem (i) = result.elem (i);
+	  lwork = static_cast<int> (work(0));
+	  work.resize (lwork);
+
+	  F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
+				     work.fortran_vec (), lwork, info));
+
+	  if (f77_exception_encountered)
+	    (*current_liboctave_error_handler)
+	      ("unrecoverable error in dgelss");
+	  else
+	    {
+	      retval.resize (n);
+	      for (int i = 0; i < n; i++)
+		retval.elem (i) = result.elem (i);
+	    }
 	}
     }
 
   return retval;
 }
 
 ComplexColumnVector
 Matrix::lssolve (const ComplexColumnVector& b) const
