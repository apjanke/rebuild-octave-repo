# HG changeset patch
# User hodelas
# Date 948225433 0
#      Tue Jan 18 19:57:13 2000 +0000
# Node ID f758be6e17301d7972ecf5a0975e034f82627d83
# Parent  d8b731d3f7a321a5841568d33fb19fa438d2c4a6
[project @ 2000-01-18 19:57:12 by hodelas]
frequency response and sysprune functions allow input of signal names or
signal indices.

diff --git a/scripts/control/base/__bodquist__.m b/scripts/control/base/__bodquist__.m
--- a/scripts/control/base/__bodquist__.m
+++ b/scripts/control/base/__bodquist__.m
@@ -12,50 +12,51 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{f}, @var{w}] =} __bodquist__ (@var{sys}, @var{w}, @var{out_idx}, @var{in_idx})
+## @deftypefn {Function File} {[@var{f}, @var{w}, @var{rsys} =} __bodquist__ (@var{sys}, @var{w}, @var{out_idx}, @var{in_idx})
 ## used internally by bode, nyquist; compute system frequency response.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## input system structure
 ## @item w
 ## range of frequencies; empty if user wants default
 ## @item out_idx
-## list of outputs; empty if user wants all
+## vector output indices or list of output signal names; empty if user wants all
 ## @item in_idx
-## list of inputs; empty if user wants all
+## vector of input indices of list of input signal names; empty if user wants all
 ## @item rname
-## name of routine that called __bodquist__ ("bode" or "nyquist")
+## name of routine that called __bodquist__ ("bode", "nyquist", or "nichols")
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item w
 ## list of frequencies
 ## @item f
 ## frequency response of sys; @math{f(ii) = f(omega(ii))}
+## @item rsys
+## system with selected inputs and outputs
 ## @end table
-## @strong{Note} __bodquist__ could easily be incorporated into a Nichols
-## plot function; this is in a "to do" list.
 ##
-## Both bode and nyquist share the same introduction, so the common parts are
+## @code{bode}, @code{nichols}, and @code{nyquist} share the same 
+## introduction, so the common parts are
 ## in __bodquist__.  It contains the part that finds the number of arguments,
 ## determines whether or not the system is SISO, and computes the frequency
 ## response.  Only the way the response is plotted is different between the
-## two functions.
+## these functions.
 ## @end deftypefn
 
-function [f, w] = __bodquist__ (sys, w, outputs, inputs, rname)
+function [f, w, rsys] = __bodquist__ (sys, w, outputs, inputs, rname)
 
   ## check number of input arguments given
   if (nargin != 5)
     usage ("[f, w] = __bodquist__ (sys, w, outputs, inputs, rname)");
   endif
 
   ## check each argument to see if it's in the correct form
   if (!is_struct(sys))
@@ -68,17 +69,22 @@ function [f, w] = __bodquist__ (sys, w, 
   ## get initial dimensions (revised below if sysprune is called)
   [nn,nz,mm,pp ] = sysdimensions(sys);
 
   ## check for an output vector and to see whether it`s correct
   if (!isempty(outputs))
     if (isempty(inputs))
       inputs = 1:mm;                    # use all inputs
       warning([rname,": outputs specified but not inputs"]);
+    elseif(is_signal_list(inputs) | isstr(inputs))
+      inputs = sysidx(sys,"in",inputs);
     endif
+    if(is_signal_list(outputs) | isstr(outputs))
+      outputs = sysidx(sys,"out",outputs);
+    end
     sys = sysprune(sys,outputs,inputs);
     [nn,nz,mm,pp ] = sysdimensions(sys);
   endif
 
   ## for speed in computation, convert local copy of
   ## SISO state space systems to zero-pole  form
   if( is_siso(sys) & strcmp( sysgettype(sys), "ss") )
     [zer,pol,k,tsam,inname,outname] = sys2zp(sys);
@@ -149,9 +155,12 @@ function [f, w] = __bodquist__ (sys, w, 
   f = f(idx);
 
   w_diff = diff(w);
   w_dup = find(w_diff == 0);
   w_idx = complement(w_dup,1:length(w));
   w = w(w_idx);
   f = f(w_idx);
 
+  ## set rsys to pruned system
+  rsys = sys;
+
 endfunction
diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996, 1998 Auburn University.  All rights reserved.
+## Copyright (C) 1996, 1998, 2000 Auburn University.  All rights reserved.
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by the
 ## Free Software Foundation; either version 2, or (at your option) any
 ## later version.
 ##
@@ -56,18 +56,23 @@
 ## @end iftex
 ## @item A "smoothing" routine is used to ensure that the plot phase does
 ## not change excessively from point to point and that singular
 ## points (e.g., crossovers from +/- 180) are accurately shown.
 ##
 ## @end enumerate
 ## @item out_idx
 ## @itemx in_idx
-## the indices of the output(s) and input(s) to be used in
-## the frequency response; see @code{sysprune}.
+##
+## The names or indices of outputs and inputs to be used in the frequency
+## response.  See @code{sysprune}.
+##
+## @example
+## bode(sys,[],"y_3",list("u_1","u_4");
+## @end example
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item mag
 ## @itemx phase
 ## the magnitude and phase of the frequency response @math{G(jw)} or
 ## @math{G(@code{exp}(jwT))} at the selected frequency values.
 ## @item w
@@ -121,17 +126,17 @@ function [mag_r, phase_r, w_r] = bode (s
   if (strcmp (plot_style, "dB"))
     do_db_plot = 1;
   elseif (strcmp (plot_style, "mag"))
     do_db_plot = 0;
   else
     error ("bode: invalid value of plot_style specified");
   endif
 
-  [f, w] = __bodquist__ (sys, w, outputs, inputs, "bode");
+  [f, w, sys] = __bodquist__ (sys, w, outputs, inputs, "bode");
 
   [stname,inname,outname] = sysgetsignals(sys);
   systsam = sysgettsam(sys);
 
   ## Get the magnitude and phase of f.
   mag = abs(f);
   phase = arg(f)*180.0/pi;
 
diff --git a/scripts/control/base/nichols.m b/scripts/control/base/nichols.m
--- a/scripts/control/base/nichols.m
+++ b/scripts/control/base/nichols.m
@@ -32,18 +32,18 @@
 ##          (1) via routine __bodquist__, isolate all poles and zeros away from
 ##              w=0 (jw=0 or exp(jwT)=1) and select the frequency
 ##             range based on the breakpoint locations of the frequencies.
 ##          (2) if sys is discrete time, the frequency range is limited
 ##              to jwT in [0,2p*pi]
 ##          (3) A "smoothing" routine is used to ensure that the plot phase does
 ##              not change excessively from point to point and that singular
 ##              points (e.g., crossovers from +/- 180) are accurately shown.
-##   outputs, inputs: the indices of the output(s) and input(s) to be used in
-##     the frequency response; see sysprune.
+##   outputs, inputs: the names or indices of the output(s) and input(s) 
+##     to be used in the frequency response; see sysprune.
 ## outputs:
 ##    mag, phase: the magnitude and phase of the frequency response
 ##       G(jw) or G(exp(jwT)) at the selected frequency values.
 ##    w: the vector of frequency values used
 ## If no output arguments are given, nichols plots the results to the screen.
 ## Descriptive labels are automatically placed.  See xlabel, ylable, title,
 ## and replot.
 ##
@@ -62,17 +62,17 @@ function [mag, phase, w] = nichols (sys,
   endif
   if(nargin < 3)
     outputs = [];
   endif
   if(nargin < 4)
     inputs = [];
   endif
 
-  [f, w] = __bodquist__ (sys, w, outputs, inputs, "nichols");
+  [f, w, sys] = __bodquist__ (sys, w, outputs, inputs, "nichols");
 
   [stname,inname,outname] = sysgetsignals(sys);
   systsam = sysgettsam(sys);
 
   ## Get the magnitude and phase of f.
   mag = abs(f);
   phase = arg(f)*180.0/pi;
 
diff --git a/scripts/control/base/nyquist.m b/scripts/control/base/nyquist.m
--- a/scripts/control/base/nyquist.m
+++ b/scripts/control/base/nyquist.m
@@ -114,17 +114,17 @@ function [realp, imagp, w] = nyquist (sy
   if(nargin < 5)
     atol = 0;
   elseif(!(is_sample(atol) | atol == 0))
     error("atol must be a nonnegative scalar.")
   endif
 
   ## signal to __bodquist__ who's calling
 
-  [f, w] = __bodquist__ (sys, w, outputs, inputs, "nyquist");
+  [f, w, sys] = __bodquist__ (sys, w, outputs, inputs, "nyquist");
 
   ## Get the real and imaginary part of f.
   realp = real(f);
   imagp = imag(f);
 
   ## No output arguments, then display plot, otherwise return data.
   if (nargout == 0)
     dnplot = 0;
diff --git a/scripts/control/system/sysprune.m b/scripts/control/system/sysprune.m
--- a/scripts/control/system/sysprune.m
+++ b/scripts/control/system/sysprune.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996, 1998 Auburn University.  All rights reserved.
+## Copyright (C) 1996, 1998, 2000 Auburn University.  All rights reserved.
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by the
 ## Free Software Foundation; either version 2, or (at your option) any
 ## later version.
 ##
@@ -21,19 +21,26 @@
 ## Extract specified inputs/outputs from a system
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item   Asys
 ## system data structure
 ## @item out_idx
 ## @itemx in_idx
-## list of connections indices; the new
-## system has outputs y(out_idx(ii)) and inputs u(in_idx(ii)).
+##
+## Indices or signal names of the outputs and inputs to be kept in the returned
+## system; remaining connections are "pruned" off.
 ## May select as [] (empty matrix) to specify all outputs/inputs.
+##
+## @example
+## retsys = sysprune(Asys,[1:3,4],"u_1");
+## retsys = sysprune(Asys,list("tx","ty","tz"), 4);
+## @end example
+##
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{retsys}: resulting system
 ## @example
 ## @group
 ##            ____________________
 ## u1 ------->|                  |----> y1
@@ -57,16 +64,24 @@ function sys = sysprune (sys, output_idx
   endif
 
   ## default: no action
   [nn,nz,mm,pp] = sysdimensions(sys);
   if(isempty(output_idx)) output_idx = 1:pp; endif
   if(isempty(input_idx)) input_idx = 1:mm; endif
   if(isempty(state_idx)) state_idx = 1:(nn+nz); endif
 
+  ## check for signal names
+  if(is_signal_list(output_idx) | isstr(output_idx))
+    output_idx = sysidx(sys,"out",output_idx);
+  endif
+  if(is_signal_list(input_idx) | isstr(input_idx))
+    input_idx = sysidx(sys,"in",input_idx);
+  endif
+
   ## check dimensions
   if( !(is_vector(output_idx) | isempty(output_idx) )  )
     if(!is_matrix(output_idx))
       error("sysprune: bad argument passed for output_idx");
     else
       error("sysprune: output_idx (%d x %d) must be a vector or empty", ...
         rows(output_idx),columns(output_idx));
     endif
