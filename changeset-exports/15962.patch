# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1358464308 18000
#      Thu Jan 17 18:11:48 2013 -0500
# Branch classdef
# Node ID a3d7b927ce471320a925df2748ed9647a5a59ef7
# Parent  3e782e337f8dfff7980828ad993dd8f8b4534b91
Add classdef tests for static methods and constant properties.

* test/classdef/foo_static_method_constant_property.m: New file.
* test/classdef/module.mk: Include new file.
* test/classdef/test_classdef.m: Add tests.

diff --git a/test/classdef/foo_static_method_constant_property.m b/test/classdef/foo_static_method_constant_property.m
new file mode 100644
--- /dev/null
+++ b/test/classdef/foo_static_method_constant_property.m
@@ -0,0 +1,30 @@
+classdef foo_static_method_constant_property
+  properties
+    frequency;
+  end
+  properties (Constant = true)
+    pie = pi;
+  end
+  methods
+    function obj = foo_static_method_constant_property (f)
+      if (nargin == 1)
+        obj.frequency = f;
+      elseif (nargin ~= 0)
+        error ('foo_static_method_constant_property:SyntaxError', ...
+               'foo_static_method_constant_property: Invalid syntax')
+      end
+    end
+    function res = cosine (obj, t)
+      res = cos (obj.radians_per_cycle () * obj.frequency * t);
+    end
+    function res = sine (obj, t)
+      res = sin (obj.radians_per_cycle () * obj.frequency * t);
+    end
+  end
+  methods (Static)
+    function res = radians_per_cycle ()
+      res = 2 * foo_static_method_constant_property.pie;
+    end
+  end
+end
+
diff --git a/test/classdef/module.mk b/test/classdef/module.mk
--- a/test/classdef/module.mk
+++ b/test/classdef/module.mk
@@ -1,5 +1,6 @@
 classdef_FCN_FILES = \
   classdef/foo_value_class.m \
+  classdef/foo_static_method_constant_property.m \
   classdef/test_classdef.m
 
 FCN_FILES += $(classdef_FCN_FILES)
diff --git a/test/classdef/test_classdef.m b/test/classdef/test_classdef.m
--- a/test/classdef/test_classdef.m
+++ b/test/classdef/test_classdef.m
@@ -50,8 +50,20 @@
 %!xtest
 %! assert (amount (p), amt, eps ())
 %!xtest
 %! assert (properties (p), {'rate'; 'term'; 'principle'})
 %!xtest
 %! assert (methods (p), {'amount'; 'foo_value_class'})
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
+
+%%  Static method and Constant Property
+%!assert (foo_static_method_constant_property.radians_per_cycle, 2*pi);
+%!assert (foo_static_method_constant_property().radians_per_cycle, 2*pi);
+%!assert (foo_static_method_constant_property().pie, pi);
+%!error <property `frequency' is not constant> foo_static_method_constant_property.frequency
+%!error <method `cosine' is not static> foo_static_method_constant_property.cosine
+%!test
+%! obj = foo_static_method_constant_property;
+%! obj.frequency = 10;
+%! assert (obj.cosine (0.1), cos (2 * pi * 10 * 0.1), eps ())
+%! assert (obj.sine (0.1), sin (2 * pi * 10 * 0.1), eps ())
