# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294909031 18000
#      Thu Jan 13 03:57:11 2011 -0500
# Node ID 9a308e96194ea02192fbf6fb46a2e081a9594748
# Parent  81ff63e43f54126b999753104024c077ab400603
more data member initialization fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* base-lu.h (base_lu::base_lu): Initialize all data members in
+	initialization lists.
+	* base-qr.h (base_qr::base_qr): Likewise.
+	* DET.h (base_det::base_det): Likewise.
+	* sparse-base-lu.h (sparse_base_lu::sparse_base_lu): Likewise.
+	* sparse-base-chol.h (sparse_base_chol::sparse_base_chol): Likewise.
+
+	* base-lu.h (base_lu::~base_lu): Explicitly define virtual destrutor.
+	* base-qr.h (base_qr::~base_qr): Likewise.
+	* base-aepbal.h (base_aepbal::~base_aepval): Likewise.
+	* sparse-base-lu.h (sparse_base_lu::~sparse_base_lu): Likewise.
+	* sparse-base-chol.h (sparse_base_chol::~sparse_base_chol): Likewise.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* DAE.h (DAE::~DAE): Now virtual.
 	* DAERT.h (DAERT::~DAERT): Likewise.
 	* ODE.h (ODE::~ODE): Likewise.
 	* DAEFunc.h (DAEFunc::~DAEFunc): Likewise.
 	* DAERTFunc.h (DAEFunc::~DAEFunc): Likewise.
 	* ODEFunc.h (ODE::~ODE): Likewise.
diff --git a/liboctave/DET.h b/liboctave/DET.h
--- a/liboctave/DET.h
+++ b/liboctave/DET.h
@@ -28,33 +28,35 @@ along with Octave; see the file COPYING.
 #include "lo-mappers.h"
 
 template <class T>
 class
 base_det
 {
 public:
 
-  base_det (T c = 1, int e = 0) 
+  base_det (T c = 1, int e = 0)
+    : c2 (), e2 ()
     { 
       c2 = xlog2 (c, e2); 
       e2 += e; 
     }
 
   base_det (T c, double e, double b) 
+    : c2 (), e2 ()
     { 
       e *= xlog2 (b);
       e2 = e;
       c *= xexp2 (e - e2);
       int f;
       c2 = xlog2 (c, f);
       e2 += f;
     }
 
-  base_det (const base_det& a) : c2(a.c2), e2(a.e2) { }
+  base_det (const base_det& a) : c2 (a.c2), e2 (a.e2) { }
 
   base_det& operator = (const base_det& a)
     {
       c2 = a.c2;
       e2 = a.e2;
       return *this;
     }
 
diff --git a/liboctave/base-aepbal.h b/liboctave/base-aepbal.h
--- a/liboctave/base-aepbal.h
+++ b/liboctave/base-aepbal.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 template <class MatrixT, class VectorT>
 class base_aepbal
 {
 protected:
   MatrixT balanced_mat;
   VectorT scale;
   octave_idx_type ilo, ihi;
   char job;
+
   base_aepbal (void) : balanced_mat (), scale (), ilo (), ihi (), job () { }
 
 public:
 
   base_aepbal (const base_aepbal& a) 
     : balanced_mat (a.balanced_mat), scale (a.scale), 
       ilo(a.ilo), ihi(a.ihi), job(a.job)
   { 
@@ -46,16 +47,18 @@ public:
       balanced_mat = a.balanced_mat;
       scale = a.scale;
       ilo = a.ilo;
       ihi = a.ihi;
       job = a.job;
       return *this;
     }
 
+  virtual ~base_aepbal (void) { }
+
   MatrixT balanced_matrix (void) const { return balanced_mat; }
 
   VectorT permuting_vector (void) const
     {
       octave_idx_type n = balanced_mat.rows ();
       VectorT pv (n);
       for (octave_idx_type i = 0; i < n; i++)
         pv(i) = i+1;
diff --git a/liboctave/base-lu.h b/liboctave/base-lu.h
--- a/liboctave/base-lu.h
+++ b/liboctave/base-lu.h
@@ -31,36 +31,37 @@ along with Octave; see the file COPYING.
 template <class lu_type>
 class
 base_lu
 {
 public:
 
   typedef typename lu_type::element_type lu_elt_type;
 
-  base_lu (void) { }
+  base_lu (void)
+    : a_fact (), l_fact (), ipvt () { }
 
-  base_lu (const base_lu& a) : 
-    a_fact (a.a_fact), l_fact (a.l_fact), ipvt (a.ipvt) { }
+  base_lu (const base_lu& a)
+    : a_fact (a.a_fact), l_fact (a.l_fact), ipvt (a.ipvt) { }
 
   base_lu (const lu_type& l, const lu_type& u, 
            const PermMatrix& p);
 
   base_lu& operator = (const base_lu& a)
     {
       if (this != &a)
         {
           a_fact = a.a_fact;
           l_fact = a.l_fact;
           ipvt = a.ipvt;
         }
       return *this;
     }
 
-  ~base_lu (void) { }
+  virtual ~base_lu (void) { }
 
   bool packed (void) const;
 
   void unpack (void);
 
   lu_type L (void) const;
 
   lu_type U (void) const;
@@ -71,13 +72,16 @@ public:
 
   ColumnVector P_vec (void) const;
 
   bool regular (void) const;
 
 protected:
 
   Array<octave_idx_type> getp (void) const;
-  lu_type a_fact, l_fact;
+
+  lu_type a_fact;
+  lu_type l_fact;
+
   Array<octave_idx_type> ipvt;
 };
 
 #endif
diff --git a/liboctave/base-qr.cc b/liboctave/base-qr.cc
--- a/liboctave/base-qr.cc
+++ b/liboctave/base-qr.cc
@@ -23,39 +23,43 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "base-qr.h"
 
 template <class qr_type>
 base_qr<qr_type>::base_qr (const qr_type& q_arg, const qr_type& r_arg)
+  : q (q_arg), r (r_arg)
 {
-  octave_idx_type qr = q_arg.rows (), qc = q_arg.columns ();
-  octave_idx_type rr = r_arg.rows (), rc = r_arg.columns ();
-  if (qc == rr && (qr == qc || (qr > qc && rr == rc)))
+  octave_idx_type q_nr = q.rows (), q_nc = q.columns ();
+  octave_idx_type r_nr = r.rows (), r_nc = r.columns ();
+
+  if (! (q_nc == r_nr && (q_nr == q_nc || (q_nr > q_nc && r_nr == r_nc))))
     {
-      q = q_arg;
-      r = r_arg;
+      q = qr_type ();
+      r = qr_type ();
+
+      (*current_liboctave_error_handler) ("QR dimensions mismatch");
     }
-  else
-    (*current_liboctave_error_handler) ("QR dimensions mismatch");
 }
 
 template <class qr_type>
 qr_type_t
 base_qr<qr_type>::get_type (void) const
 {
   qr_type_t retval;
+
   if (!q.is_empty () && q.is_square ())
     retval = qr_type_std;
   else if (q.rows () > q.columns () && r.is_square ())
     retval = qr_type_economy;
   else
     retval = qr_type_raw;
+
   return retval;
 }
 
 template <class qr_type>
 bool
 base_qr<qr_type>::regular (void) const
 {
   octave_idx_type k = std::min (r.rows (), r.columns ());
diff --git a/liboctave/base-qr.h b/liboctave/base-qr.h
--- a/liboctave/base-qr.h
+++ b/liboctave/base-qr.h
@@ -37,43 +37,45 @@ enum qr_type_t
 template <class qr_type>
 class
 base_qr
 {
 public:
 
   typedef typename qr_type::element_type qr_elt_type;
 
-  base_qr (void) { }
+  base_qr (void) : q (), r () { }
 
   base_qr (const qr_type& q, const qr_type& r);
 
-  base_qr (const base_qr& a) : 
-    q (a.q), r (a.r) { }
+  base_qr (const base_qr& a) : q (a.q), r (a.r) { }
 
   base_qr& operator = (const base_qr& a)
     {
       if (this != &a)
         {
           q = a.q;
           r = a.r;
         }
       return *this;
     }
 
+  virtual ~base_qr (void) { }
+
   qr_type Q (void) const { return q; }
 
   qr_type R (void) const { return r; }
 
   qr_type_t get_type (void) const;
 
   bool regular (void) const;
 
 protected:
 
-  qr_type q, r;
+  qr_type q;
+  qr_type r;
 };
 
 #ifndef HAVE_QRUPDATE
 void warn_qrupdate_once (void);
 #endif
 
 #endif
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -31,35 +31,49 @@ template <class chol_type, class chol_el
 class
 sparse_base_chol
 {
 protected:
 #ifdef HAVE_CHOLMOD
   class sparse_base_chol_rep
   {
   public:
-    sparse_base_chol_rep (void) : count (1), Lsparse (0), 
-                                  is_pd (false), minor_p (0) { }
+    sparse_base_chol_rep (void)
+      : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
+        perms (), cond (0)
+      { }
 
-    sparse_base_chol_rep (const chol_type& a, 
-                          const bool natural) : count (1)
-      { init (a, natural); }
+    sparse_base_chol_rep (const chol_type& a, const bool natural)
+      : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
+        perms (), cond (0)
+      {
+        init (a, natural);
+      }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info, 
-                          const bool natural) : count (1)
-      { info = init (a, natural); }
+                          const bool natural)
+      : count (1), Lsparse (0), Common (), is_pd (false), minor_p (0),
+        perms (), cond (0)
+      {
+        info = init (a, natural);
+      }
 
     ~sparse_base_chol_rep (void)
-      { if (is_pd) CHOLMOD_NAME(free_sparse) (&Lsparse, &Common); }
+      {
+        if (is_pd)
+          CHOLMOD_NAME (free_sparse) (&Lsparse, &Common);
+      }
 
     cholmod_sparse * L (void) const { return Lsparse; }
 
     octave_idx_type P (void) const 
-      { return (minor_p == static_cast<octave_idx_type>(Lsparse->ncol) ? 
-                0 : minor_p + 1); }
+      {
+        return (minor_p == static_cast<octave_idx_type>(Lsparse->ncol) ? 
+                0 : minor_p + 1);
+      }
 
     ColumnVector perm (void) const { return perms + 1; }
 
     p_type Q (void) const;
 
     bool is_positive_definite (void) const { return is_pd; }
 
     double rcond (void) const { return cond; }
@@ -85,24 +99,27 @@ protected:
 
     // No assignment
     sparse_base_chol_rep& operator = (const sparse_base_chol_rep& a);
   };
 #else
   class sparse_base_chol_rep
   {
   public:
-    sparse_base_chol_rep (void) : count (1), is_pd (false), minor_p (0) { }
+    sparse_base_chol_rep (void)
+      : count (1), is_pd (false), minor_p (0), perms (), cond (0) { }
 
     sparse_base_chol_rep (const chol_type& a, 
-                          const bool natural) : count (1)
+                          const bool natural)
+      : count (1), is_pd (false), minor_p (0), perms (), cond (0)
       { init (a, natural); }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info, 
-                          const bool natural) : count (1)
+                          const bool natural)
+      : count (1), is_pd (false), minor_p (0), perms (), cond (0)
       { info = init (a, natural); }
 
     ~sparse_base_chol_rep (void) { }
 
     octave_idx_type P (void) const { return 0; }
 
     ColumnVector perm (void) const { return perms + 1; }
 
@@ -130,31 +147,35 @@ protected:
   };
 #endif
 
  private:
   sparse_base_chol_rep *rep;
   
 public:
 
-  sparse_base_chol (void) : rep (new typename 
-    sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep ()) { }
+  sparse_base_chol (void)
+    : rep (new typename 
+           sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep ())
+    { }
 
-  sparse_base_chol (const chol_type& a, const bool n) : rep (new typename 
-    sparse_base_chol<chol_type, chol_elt, p_type>::
-        sparse_base_chol_rep (a, n)) { }
+  sparse_base_chol (const chol_type& a, const bool n)
+    : rep (new typename
+           sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, n))
+    { }
 
-  sparse_base_chol (const chol_type& a, octave_idx_type& info, const bool n) :
-    rep (new typename sparse_base_chol<chol_type, chol_elt, p_type>::
-        sparse_base_chol_rep (a, info, n)) { }
+  sparse_base_chol (const chol_type& a, octave_idx_type& info, const bool n)
+    : rep (new typename sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep (a, info, n))
+    { }
 
-  sparse_base_chol (const sparse_base_chol<chol_type, chol_elt, p_type>& a) : 
-    rep (a.rep) { rep->count++; }
+  sparse_base_chol (const sparse_base_chol<chol_type, chol_elt, p_type>& a)
+    : rep (a.rep)
+    { rep->count++; }
 
-  ~sparse_base_chol (void) 
+  virtual ~sparse_base_chol (void) 
     {
       if (--rep->count <= 0)
         delete rep;
     }
 
   sparse_base_chol& operator = (const sparse_base_chol& a)
     {
       if (this != &a)
diff --git a/liboctave/sparse-base-lu.h b/liboctave/sparse-base-lu.h
--- a/liboctave/sparse-base-lu.h
+++ b/liboctave/sparse-base-lu.h
@@ -29,35 +29,38 @@ along with Octave; see the file COPYING.
 #include "dSparse.h"
 
 template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 class
 sparse_base_lu
 {
 public:
 
-  sparse_base_lu (void) { }
+  sparse_base_lu (void)
+    : Lfact (), Ufact (), Rfact (), cond (0), P (), Q () { }
 
   sparse_base_lu (const sparse_base_lu& a) 
-    : Lfact (a.Lfact), Ufact (a.Ufact), cond (a.cond), P (a.P), Q (a.Q) { }
+    : Lfact (a.Lfact), Ufact (a.Ufact), Rfact (), cond (a.cond),
+    P (a.P), Q (a.Q)
+    { }
 
   sparse_base_lu& operator = (const sparse_base_lu& a)
     {
       if (this != &a)
         {
           Lfact = a.Lfact;
           Ufact = a.Ufact;
           cond = a.cond;
           P = a.P;
           Q = a.Q;
         }
       return *this;
     }
 
-  ~sparse_base_lu (void) { }
+  virtual ~sparse_base_lu (void) { }
 
   lu_type L (void) const { return Lfact; }
 
   lu_type U (void) const { return Ufact; }
 
   SparseMatrix R (void) const { return Rfact; }
 
   lu_type Y (void) const;
