# HG changeset patch
# User Rik <rik@octave.org>
# Date 1518373582 28800
#      Sun Feb 11 10:26:22 2018 -0800
# Node ID 5be92b26ef8f92374ea97e01caefcc4fcdee8938
# Parent  cd25b9c5f80848fe49c43616b9ab861b51c9a423
Fix alignment of numbers in fixed_point_format display (bug #53083).

* pr-output.cc (make_real_matrix_format): Increase fw (fixed width) by 1 to
accomodate minus sign.
* pr-output.cc (pr_scale_header): Don't add extra space between scale factor
and multiplication symbol '*'.
* pr-output.cc: Change "col +inc" to "col + inc" for clarity.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -580,17 +580,17 @@ make_real_matrix_format (int x_max, int 
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
-      fw = rd + 2;
+      fw = rd + 3;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
   else if (int_or_inf_or_nan)
     {
       int digits = (x_max > x_min ? x_max : x_min);
       fw = (digits <= 0 ? 2 : digits + 1);
       if (inf_or_nan && fw < 4)
@@ -1544,17 +1544,17 @@ pr_scale_header (std::ostream& os, doubl
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     {
       octave::preserve_stream_state stream_state (os);
 
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific | std::ios::left)
          << scale
-         << " *\n";
+         << "*\n";
 
       if (! Vcompact_format)
         os << "\n";
     }
 }
 
 static void
 pr_col_num_header (std::ostream& os, octave_idx_type total_width, int max_width,
@@ -1755,17 +1755,17 @@ octave_print_internal (std::ostream& os,
       else
         {
           octave::preserve_stream_state stream_state (os);
 
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               for (octave_idx_type i = 0; i < nr; i++)
                 {
                   os << std::setw (extra_indent) << "";
 
@@ -1850,17 +1850,17 @@ octave_print_internal (std::ostream& os,
 
       if (pr_as_read_syntax)
         {
           os << "diag (";
 
           octave_idx_type col = 0;
           while (col < nc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               for (octave_idx_type j = col; j < lim; j++)
                 {
                   octave_quit ();
 
                   if (j == 0)
                     os << "[ ";
                   else
@@ -1890,26 +1890,25 @@ octave_print_internal (std::ostream& os,
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
-
           {
             std::ostringstream tmp_oss;
             pr_float (tmp_oss, 0.0, fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               for (octave_idx_type i = 0; i < nr; i++)
                 {
                   os << std::setw (extra_indent) << "";
 
@@ -2139,17 +2138,17 @@ octave_print_internal (std::ostream& os,
 
       if (pr_as_read_syntax)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             {
               octave_idx_type col = 0;
               while (col < nc)
                 {
-                  octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+                  octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       if (i == 0 && j == 0)
                         os << "[ ";
                       else
@@ -2180,17 +2179,17 @@ octave_print_internal (std::ostream& os,
       else
         {
           octave::preserve_stream_state stream_state (os);
 
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               for (octave_idx_type i = 0; i < nr; i++)
                 {
                   os << std::setw (extra_indent) << "";
 
@@ -2277,17 +2276,17 @@ octave_print_internal (std::ostream& os,
 
       if (pr_as_read_syntax)
         {
           os << "diag (";
 
           octave_idx_type col = 0;
           while (col < nc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               for (octave_idx_type j = col; j < lim; j++)
                 {
                   octave_quit ();
 
                   if (j == 0)
                     os << "[ ";
                   else
@@ -2317,26 +2316,25 @@ octave_print_internal (std::ostream& os,
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
-
           {
             std::ostringstream tmp_oss;
             pr_complex (tmp_oss, Complex (0.0), r_fw, i_fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               for (octave_idx_type i = 0; i < nr; i++)
                 {
                   os << std::setw (extra_indent) << "";
 
@@ -2425,17 +2423,17 @@ octave_print_internal (std::ostream& os,
           Array<octave_idx_type> pvec = m.col_perm_vec ();
 
           os << "eye (";
           os << ":, ";
 
           octave_idx_type col = 0;
           while (col < nc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               for (octave_idx_type j = col; j < lim; j++)
                 {
                   octave_quit ();
 
                   if (j == 0)
                     os << "[ ";
                   else
@@ -2463,17 +2461,17 @@ octave_print_internal (std::ostream& os,
           octave::preserve_stream_state stream_state (os);
 
           os << "Permutation Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
-              octave_idx_type lim = (col +inc < nc ? col + inc : nc);
+              octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               for (octave_idx_type i = 0; i < nr; i++)
                 {
                   os << std::setw (extra_indent) << "";
 
@@ -2653,17 +2651,17 @@ octave_print_internal (std::ostream& os,
           if (max_width < 0)
             max_width = 0;
 
           pr_scale_header (os, scale);
 
           octave_idx_type col = 0;
           while (col < num_elem)
             {
-              octave_idx_type lim = (col +inc < num_elem ? col + inc : num_elem);
+              octave_idx_type lim = (col + inc < num_elem ? col + inc : num_elem);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
               os << std::setw (extra_indent) << "";
 
               for (octave_idx_type i = col; i < lim; i++)
                 {
@@ -3261,18 +3259,18 @@ octave_print_internal_template (std::ost
             {
               octave::preserve_stream_state stream_state (os);
 
               octave_idx_type n_rows = page.rows ();
               octave_idx_type n_cols = page.cols ();
 
               for (octave_idx_type col = 0; col < n_cols; col += inc)
                 {
-                  octave_idx_type lim = (col +inc < n_cols ? col + inc
-                                                           : n_cols);
+                  octave_idx_type lim = (col + inc < n_cols ? col + inc
+                                                            : n_cols);
 
                   pr_col_num_header (os, total_width, max_width, lim, col,
                                      extra_indent);
 
                   for (octave_idx_type ii = 0; ii < n_rows; ii++)
                     {
                       os << std::setw (extra_indent) << "";
 
