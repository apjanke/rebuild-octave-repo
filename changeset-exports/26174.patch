# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1544136123 18000
#      Thu Dec 06 17:42:03 2018 -0500
# Node ID 94fc8648f0fecc13558ef7f4d2cbbb5b8a2c82a7
# Parent  0a145a1600e340557a97ed002146bdb68d7dc900
eliminate some unused and unnecessary path expansion code

* pathsearch.h, pathsearch.cc (directory_path::directory_path):
Eliminate unused default directory argument.
(directory_path::m_default_path): Delete data member.
(directory_path::init): Don't call kpse_expand_default.

* kpse.h, kpse.cc (kpse_expand_default): Delete.
(kpse_expand_kpse_dot): Delete function.
(kpse_brace_expand): Don't call kpse_expand_kpse_dot.  We probably
won't miss prepending the contents of KPSE_DOT at the beginning of
relative path elements...

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -747,52 +747,16 @@ kpse_expand (const std::string& s)
 {
   std::string var_expansion = kpse_var_expand (s);
   return kpse_tilde_expand (var_expansion);
 }
 
 /* Forward declarations of functions from the original expand.c  */
 static std::list<std::string> brace_expand (const std::string&);
 
-/* If $KPSE_DOT is defined in the environment, prepend it to any relative
-   path components. */
-
-static std::string
-kpse_expand_kpse_dot (const std::string& path)
-{
-  std::string ret;
-  std::string kpse_dot = octave::sys::env::getenv ("KPSE_DOT");
-
-  if (kpse_dot.empty ())
-    return path;
-
-  for (kpse_path_iterator pi (path); pi != std::string::npos; pi++)
-    {
-      std::string elt = *pi;
-
-      /* Single "." get special treatment, as does "./" or its equivalent.  */
-
-      size_t elt_len = elt.length ();
-
-      if (kpse_absolute_p (elt, false))
-        ret += elt + ENV_SEP_STRING;
-      else if (elt_len == 1 && elt[0] == '.')
-        ret += kpse_dot + ENV_SEP_STRING;
-      else if (elt_len > 1 && elt[0] == '.' && IS_DIR_SEP (elt[1]))
-        ret += kpse_dot + elt.substr (1) + ENV_SEP_STRING;
-      else
-        ret += kpse_dot + DIR_SEP_STRING + elt + ENV_SEP_STRING;
-    }
-
-  if (! ret.empty ())
-    ret.pop_back ();
-
-  return ret;
-}
-
 /* Do brace expansion on ELT; then do variable and ~ expansion on each
    element of the result; then do brace expansion again, in case a
    variable definition contained braces (e.g., $TEXMF).  Return a
    string comprising all of the results separated by ENV_SEP_STRING.  */
 
 static std::string
 kpse_brace_expand_element (const std::string& elt)
 {
@@ -846,17 +810,17 @@ kpse_brace_expand (const std::string& pa
       /* Do brace expansion first, so tilde expansion happens in {~ka,~kb}.  */
       std::string expansion = kpse_brace_expand_element (elt);
       ret += expansion + ENV_SEP_STRING;
     }
 
   if (! ret.empty ())
     ret.pop_back ();
 
-  return kpse_expand_kpse_dot (ret);
+  return ret;
 }
 
 /* Expand all special constructs in a path, and include only the actually
    existing directories in the result. */
 
 /* Do brace expansion and call 'kpse_expand' on each argument of the
    result.  The final expansion (always in fresh memory) is a path of
    all the existing directories that match the pattern. */
@@ -1119,74 +1083,16 @@ brace_gobbler (const std::string& text, 
         level--;
     }
 
   indx = i;
   c = (c == satisfy) ? c : 0;
   return c;
 }
 
-/* Expand extra colons.  */
-
-/* Check for leading colon first, then trailing, then doubled, since
-   that is fastest.  Usually it will be leading or trailing.  */
-
-/* Replace a leading or trailing or doubled : in PATH with DFLT.  If
-   no extra colons, return PATH.  Only one extra colon is replaced.
-   DFLT may not be NULL.  */
-
-std::string
-kpse_expand_default (const std::string& path, const std::string& fallback)
-{
-  std::string expansion;
-
-  size_t path_len = path.length ();
-
-  if (path_len == 0)
-    expansion = fallback;
-
-  /* Solitary or leading :?  */
-  else if (IS_ENV_SEP (path[0]))
-    {
-      expansion = (path_len == 1 ? fallback : fallback + path);
-    }
-
-  /* Sorry about the assignment in the middle of the expression, but
-     conventions were made to be flouted and all that.  I don't see the
-     point of calling strlen twice or complicating the logic just to
-     avoid the assignment (especially now that I've pointed it out at
-     such great length).  */
-  else if (IS_ENV_SEP (path[path_len-1]))
-    expansion = path + fallback;
-
-  /* OK, not leading or trailing.  Check for doubled.  */
-  else
-    {
-      /* What we'll return if we find none.  */
-      expansion = path;
-
-      for (size_t i = 0; i < path_len; i++)
-        {
-          if (i + 1 < path_len
-              && IS_ENV_SEP (path[i]) && IS_ENV_SEP (path[i+1]))
-            {
-              /* We have a doubled colon.  */
-
-              /* Copy stuff up to and including the first colon.  */
-              /* Copy in FALLBACK, and then the rest of PATH.  */
-              expansion = path.substr (0, i+1) + fallback + path.substr (i+1);
-
-              break;
-            }
-        }
-    }
-
-  return expansion;
-}
-
 /* Return true if FN is a directory or a symlink to a directory,
    false if not. */
 
 static bool
 dir_p (const std::string& fn)
 {
   octave::sys::file_stat fs (fn);
 
diff --git a/liboctave/util/kpse.h b/liboctave/util/kpse.h
--- a/liboctave/util/kpse.h
+++ b/liboctave/util/kpse.h
@@ -77,19 +77,16 @@ kpse_all_path_find_first_of (const std::
 
 extern std::string
 kpse_element_dir (const std::string& elt);
 
 extern std::list<std::string>
 kpse_all_path_search (const std::string& path, const std::string& name);
 
 extern std::string
-kpse_expand_default (const std::string& path, const std::string& fallback);
-
-extern std::string
 kpse_path_expand (const std::string& path);
 
 extern std::string
 kpse_path_find_first_of (const std::string& path,
                          const std::list<std::string>& names);
 
 extern std::string
 kpse_path_search (const std::string& path, const std::string& name);
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -31,19 +31,19 @@ along with Octave; see the file COPYING.
 #include "kpse.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 
 namespace octave
 {
-  directory_path::directory_path (const std::string& s, const std::string& d)
-    : m_orig_path (s), m_default_path (d), m_initialized (false),
-      m_expanded_path (), m_path_elements ()
+  directory_path::directory_path (const std::string& s)
+    : m_orig_path (s), m_initialized (false), m_expanded_path (),
+      m_path_elements ()
   {
     if (! m_orig_path.empty ())
       init ();
   }
 
   std::list<std::string> directory_path::elements (void)
   {
     return m_initialized ? m_path_elements : std::list<std::string> ();
@@ -103,20 +103,17 @@ namespace octave
         std::string val = sys::env::getenv ("KPATHSEA_DEBUG");
 
         if (! val.empty ())
           kpse_debug |= atoi (val.c_str ());
 
         octave_kpse_initialized = true;
       }
 
-    m_expanded_path
-      = kpse_path_expand (m_default_path.empty ()
-                          ? m_orig_path
-                          : kpse_expand_default (m_orig_path, m_default_path));
+    m_expanded_path = kpse_path_expand (m_orig_path);
 
     for (kpse_path_iterator pi (m_expanded_path); pi != std::string::npos; pi++)
       m_path_elements.push_back (*pi);
 
     m_initialized = true;
   }
 
   char directory_path::path_sep_char (void)
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   class
   OCTAVE_API
   directory_path
   {
   public:
 
-    directory_path (const std::string& s = "", const std::string& d = "");
+    directory_path (const std::string& s = "");
 
     directory_path (const directory_path&) = default;
 
     directory_path& operator = (const directory_path&) = default;
 
     ~directory_path (void) = default;
 
     void set (const std::string& s)
@@ -80,20 +80,16 @@ namespace octave
 
     static bool is_path_sep (char c) { return c == path_sep_char (); }
 
   private:
 
     // The colon separated list that we were given.
     std::string m_orig_path;
 
-    // The default path.  If specified, replaces leading, trailing, or
-    // doubled colons in p_orig.
-    std::string m_default_path;
-
     // TRUE means we've unpacked the path p.
     bool m_initialized;
 
     // A version of the colon separate list on which we have performed
     // tilde, variable, and possibly default path expansion.
     std::string m_expanded_path;
 
     // The elements of the list.
