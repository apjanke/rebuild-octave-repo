# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1516778090 28800
#      Tue Jan 23 23:14:50 2018 -0800
# Branch stable
# Node ID 9da779d2f029db176492e6ff3eac78078d72ffb3
# Parent  08c871c4147b2dd9f86a348d4bff953fca5a0111
cosint improve signed zero imag input near branch cut

Stop special casing the origin, instead have log deal with signed
zeros (real and complex).  Ensure we approach the branch cut
(negative real axis) correctly based on signed 0 for imaginary
part.

cosint.m: handle complex signed zero, add and modify BIST.

diff --git a/scripts/specfun/cosint.m b/scripts/specfun/cosint.m
--- a/scripts/specfun/cosint.m
+++ b/scripts/specfun/cosint.m
@@ -72,28 +72,35 @@
 
 function [y] = cosint (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   sz = size (x);
-  x = x(:);
+  #x = reshape (x, numel (x), 1);
+  if (iscomplex (x))
+    ## workaround reshape narrowing to real (#52953)
+    x = complex (real (x)(:), imag (x)(:));
+  else
+    x = x(:);
+  end
+
   y = zeros (size (x), class (x));
   tol = eps (class (x));
 
   i_miss = true (length (x), 1);
 
   ## special values
-  y(x == 0) = - Inf;
   y(x == Inf) = 0;
-  y(x == - Inf) = 1i * pi;
+  y((x == -Inf) & !signbit (imag(x))) = 1i * pi;
+  y((x == -Inf) &  signbit (imag(x))) = -1i * pi;
 
-  i_miss = ((i_miss) & (x != 0) & (x != Inf) & (x != - Inf));
+  i_miss = ((i_miss) & (x != Inf) & (x != -Inf));
 
   ## For values large in modulus and not in (-oo,0), we use the relation
   ## with expint
 
   flag_large = (abs (x) > 2 & ((abs (imag (x)) > 1e-15) | real (x) > 0));
   xx = x(flag_large);
 
   ## Abramowitz, relation 5.2.20
@@ -103,20 +110,26 @@ function [y] = cosint (x)
   xx(ii_nw) *= -1;
   yy = -0.5 * (expint (1i * xx) + expint (-1i * xx));
   yy(ii_nw) += 1i * pi;
   yy(ii_sw) = conj (yy(ii_sw));
   y(i_miss & flag_large) = yy;
 
   ## For values small in modulus, use the series expansion (also near (-oo, 0])
   i_miss = ((i_miss) & (!flag_large));
-  xx = x(i_miss);
+  if (iscomplex (x))
+    ## indexing can lose imag part: if it was -0, we could end up on the
+    ## wrong right side of the branch cut along the negative real axis.
+    xx = complex (real (x)(i_miss), imag (x)(i_miss));
+  else
+    xx = x(i_miss);
+  end
   ssum = - xx .^ 2 / 4; # First term of the series expansion
   gma = 0.57721566490153286060651209008; # Euler gamma constant
-  yy = gma + log (xx) + ssum;
+  yy = gma + log (complex (xx)) + ssum; # log(complex(...) handles signed zero
   flag_sum = true (nnz (i_miss), 1);
   it = 1;
   maxit = 300;
   while ((any (flag_sum)) && (it < maxit));
     ssum .*= - xx .^ 2 * (2 * it) / ((2 * it + 2) ^ 2 * (2 * it + 1));
     yy(flag_sum) += ssum (flag_sum);
     flag_sum = (abs (ssum) >= tol);
     it++;
@@ -134,18 +147,22 @@ endfunction
 %!test
 %! x = [2, 3, pi; exp(1), 5, 6];
 %! A = cosint (x);
 %! B = [0.422980828774864996, 0.119629786008000328, 0.0736679120464254860; ...
 %!      0.213958001340379779, -0.190029749656643879, -0.0680572438932471262];
 %! assert (A, B, -5e-15);
 
 %!assert (cosint (0), - Inf)
+%!assert (cosint (-0), -inf + 1i*pi)
+%!assert (cosint (complex (-0, 0)), -inf + 1i*pi)
+%!assert (cosint (complex (-0, -0)), -inf - 1i*pi)
 %!assert (cosint (inf), 0)
 %!assert (cosint (-inf), 1i * pi)
+%!assert (cosint (complex (-inf, -0)), -1i * pi)
 %!assert (isnan (cosint (nan)))
 
 %!assert (class (cosint (single (1))), "single")
 
 ##tests against maple
 %!assert (cosint (1), 0.337403922900968135, -2*eps)
 %!assert (cosint (-1), 0.337403922900968135 + 3.14159265358979324*I, -2*eps)
 %!assert (cosint (pi), 0.0736679120464254860, -2*eps)
@@ -159,37 +176,43 @@ endfunction
 %! y_ex = [-Inf
 %!         0.337403922900968135
 %!         0.422980828774864996
 %!         0.119629786008000328
 %!         -0.140981697886930412];
 %! assert (cosint(x), y_ex, -3e-15);
 
 %!test
-%! x = -(0:4) ';
-%! y_ex = [-Inf
-%!         0.337403922900968135 + 3.14159265358979324*I
-%!         0.422980828774864996 + 3.14159265358979324*I
-%!         0.119629786008000328 + 3.14159265358979324*I
-%!         -0.140981697886930412 + 3.14159265358979324*I];
+%! x = -(1:4).';
+%! y_ex = [0.337403922900968135 + pi*1i
+%!         0.422980828774864996 + pi*1i
+%!         0.119629786008000328 + pi*1i
+%!         -0.140981697886930412 + pi*1i];
+%! assert (cosint (x), y_ex, -4*eps);
+
+%!test
+%! x = complex (-(1:4).', -0);
+%! y_ex = [0.337403922900968135 - pi*1i
+%!         0.422980828774864996 - pi*1i
+%!         0.119629786008000328 - pi*1i
+%!         -0.140981697886930412 - pi*1i];
 %! assert (cosint (x), y_ex, -4*eps);
 
 %!test
 %! x = 1i * (0:4).';
 %! y_ex = [-Inf
 %!         0.837866940980208241 + 1.57079632679489662*I
 %!         2.45266692264691452 + 1.57079632679489662*I
 %!         4.96039209476560976 + 1.57079632679489662*I
 %!         9.81354755882318556 + 1.57079632679489662*I];
 %! assert (cosint (x), y_ex, -4*eps);
 
 %!test
-%! x = - 1i * (0:4).';
-%! y_ex = [- Inf
-%!         0.837866940980208241 - 1.57079632679489662*I
+%! x = -1i * (1:4).';
+%! y_ex = [0.837866940980208241 - 1.57079632679489662*I
 %!         2.45266692264691452 - 1.57079632679489662*I
 %!         4.96039209476560976 - 1.57079632679489662*I
 %!         9.81354755882318556 - 1.57079632679489662*I];
 %! assert (cosint (x), y_ex, -4*eps);
 
 %!test
 %! x = [1+2i; -2+5i; 2-5i; 100; 10i; -1e-4 + 1e-6*1i; -20-1i];
 %! A = [ 2.03029639329172164 - 0.151907155175856884*I
