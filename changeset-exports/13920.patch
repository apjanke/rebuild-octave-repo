# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1322023328 28800
#      Tue Nov 22 20:42:08 2011 -0800
# Node ID 9cf8bd0e13d242f630a11dff1aaed03a5928172b
# Parent  8cb79741769d17e2bcee55d62d17ac0dabfec10e
doc: Document %!endfunction keyword

* testfun.txi: Document %!endfunction keyword

diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -162,19 +162,20 @@ You can share several variables at the s
 @example
    %!shared @var{a}, @var{b}
 @end example
 
 You can also share test functions:
 
 @example
 @group
-   %!function @var{a} = fn(@var{b})
+   %!function @var{a} = fn (@var{b})
    %!  @var{a} = 2*@var{b};
-   %!assert (@var{a}(2),4);
+   %!endfunction
+   %!assert (@var{fn}(2), 4);
 @end group
 @end example
 
 Note that all previous variables and values are lost when a new 
 shared block is declared.
 
 Error and warning blocks are like test blocks, but they only succeed 
 if the code generates an error.  You can check the text of the error
@@ -258,23 +259,26 @@ check for correct warning message
 
 @item %!demo
 demo only executes in interactive mode
 
 @item %!#
 comment: ignore everything within the block
 
 @item %!shared x,y,z
-declares variables for use in multiple tests
+declare variables for use in multiple tests
 
 @item %!function
-defines a function value for a shared variable
+define a function for use in multiple tests
+
+@item %!endfunction
+close a function definition
 
 @item %!assert (x, y, tol)
-shorthand for %!test assert (x, y, tol)
+shorthand for @code{%!test assert (x, y, tol)}
 @end table
 
 You can also create test scripts for builtins and your own C++
 functions.  Just put a file of the function name on your path without
 any extension and it will be picked up by the test procedure.  You
 can even embed tests directly in your C++ code:
 
 @example
