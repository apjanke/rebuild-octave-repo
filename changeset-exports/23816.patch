# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1501267665 18000
#      Fri Jul 28 13:47:45 2017 -0500
# Branch stable
# Node ID d396866fa7d88e0ee79ef5e50c1a84599e76e287
# Parent  fdce2b73f5cefc4fa1aafd0b3784b09d616b5e1e
Add documentation about PCRE library regexp stack overflow (bug #51589).

* regexp.cc: Place detailed note at end of help about stack overflow for high
  match count recursion in regexp() searches, an upstream issue for which no
  good solution was found.

diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -845,16 +845,28 @@ Zero-length matches are not returned.  (
 
 @item emptymatch
 Return zero-length matches.
 
 @code{regexp ('a', 'b*', 'emptymatch')} returns @code{[1 2]} because there
 are zero or more @qcode{'b'} characters at positions 1 and end-of-string.
 
 @end table
+Stack Limitation Note: Pattern searches are done with a recursive function
+which can overflow the program stack when there are a high number of matches.
+For example,
+
+@example
+@code{regexp (repmat ('a', 1, 1e5), '(a)+')}
+@end example
+
+may lead to a segfault.  As an alternative, consider constructing pattern
+searches that reduce the number of matches (e.g., by creatively using set
+complement), and then further processing the return variables (now reduced in
+size) with successive @code{regexp} searches.
 @seealso{regexpi, strfind, regexprep}
 @end deftypefn */)
 {
   if (args.length () < 2)
     print_usage ();
 
   octave_value_list retval;
 
