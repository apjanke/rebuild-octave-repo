# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1469024869 -7200
#      Wed Jul 20 16:27:49 2016 +0200
# Node ID ae89334cb53617648b4c97319b151ac115d579a5
# Parent  e505367348557f07a23b0265da64359a6abc3143
Support setting colormap min max with axis.m (bug #48566).

* axis.m: Support setting colormap min max. Replace "tic" with "tick" in
strings.

diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -13,31 +13,33 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} axis ()
-## @deftypefnx {} {} axis ([@var{x}_lo @var{x}_hi])
-## @deftypefnx {} {} axis ([@var{x}_lo @var{x}_hi @var{y}_lo @var{y}_hi])
-## @deftypefnx {} {} axis ([@var{x}_lo @var{x}_hi @var{y}_lo @var{y}_hi @var{z}_lo @var{z}_hi])
+## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi}])
+## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi}])
+## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi} @var{z_lo} @var{z_hi}])
+## @deftypefnx {} {} axis ([@var{x_lo} @var{x_hi} @var{y_lo} @var{y_hi} @var{z_lo} @var{z_hi} @var{c_lo} @var{c_hi}])
 ## @deftypefnx {} {} axis (@var{option})
 ## @deftypefnx {} {} axis (@dots{}, @var{option})
 ## @deftypefnx {} {} axis (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{limits} =} axis ()
 ## Set axis limits and appearance.
 ##
-## The argument @var{limits} should be a 2-, 4-, or 6-element vector.  The
+## The argument @var{limits} should be a 2-, 4-, 6-, or 8-element vector.  The
 ## first and second elements specify the lower and upper limits for the
-## x-axis.  The third and fourth specify the limits for the y-axis, and the
-## fifth and sixth specify the limits for the z-axis.  The special values
-## -Inf and Inf may be used to indicate that the limit should automatically be
-## computed based on the data in the axis.
+## x-axis.  The third and fourth specify the limits for the y-axis, the fifth
+## and sixth specify the limits for the z-axis, and the seventh and eighth
+## specify the limits for the color axis.  The special values -Inf and Inf may
+## be used to indicate that the limit should automatically be computed based
+## on the data in the axis.
 ##
 ## Without any arguments, @code{axis} turns autoscaling on.
 ##
 ## With one output argument, @code{@var{limits} = axis} returns the current
 ## axis limits.
 ##
 ## The vector argument specifying limits is optional, and additional string
 ## arguments may be used to specify various axis properties.  For example,
@@ -49,17 +51,17 @@
 ## @noindent
 ## forces a square aspect ratio, and
 ##
 ## @example
 ## axis ("tic", "labely");
 ## @end example
 ##
 ## @noindent
-## turns tic marks on for all axes and tic mark labels on for the y-axis only.
+## turns tick marks on for all axes and tick mark labels on for the y-axis only.
 ##
 ## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @asis
 ## @item @qcode{"square"}
 ## Force a square axis aspect ratio.
 ##
@@ -69,69 +71,69 @@
 ## @item @qcode{"normal"}
 ## Restore default aspect ratio.
 ## @end table
 ##
 ## @noindent
 ## The following options control the way axis limits are interpreted.
 ##
 ## @table @asis
-## @item @qcode{"auto"}
+## @item @qcode{"auto[xyz]"}
 ## Set the specified axes to have nice limits around the data or all if no
 ## axes are specified.
 ##
 ## @item @qcode{"manual"}
 ## Fix the current axes limits.
 ##
 ## @item @qcode{"tight"}
 ## Fix axes to the limits of the data.
 ##
 ## @item @qcode{"image"}
 ## Equivalent to @qcode{"tight"} and @qcode{"equal"}.
 ## @end table
 ##
 ## @noindent
-## The following options affect the appearance of tic marks.
+## The following options affect the appearance of tick marks.
 ##
 ## @table @asis
 ## @item @qcode{"on"}
-## Turn tic marks and labels on for all axes.
+## Turn tick marks and labels on for all axes.
 ##
 ## @item @qcode{"off"}
-## Turn tic marks off for all axes.
+## Turn tick marks off for all axes.
 ##
 ## @item @qcode{"tic[xyz]"}
-## Turn tic marks on for all axes, or turn them on for the specified axes and
+## Turn tick marks on for all axes, or turn them on for the specified axes and
 ## off for the remainder.
 ##
 ## @item @qcode{"label[xyz]"}
-## Turn tic labels on for all axes, or turn them on for the specified axes
+## Turn tick labels on for all axes, or turn them on for the specified axes
 ## and off for the remainder.
 ##
 ## @item @qcode{"nolabel"}
-## Turn tic labels off for all axes.
+## Turn tick labels off for all axes.
 ## @end table
 ##
-## Note, if there are no tic marks for an axis, there can be no labels.
+## Note, if there are no tick marks for an axis, there can be no labels.
 ##
 ## @noindent
 ## The following options affect the direction of increasing values on the axes.
 ##
 ## @table @asis
 ## @item @qcode{"ij"}
 ## Reverse y-axis, so lower values are nearer the top.
 ##
 ## @item @qcode{"xy"}
 ## Restore y-axis, so higher values are nearer the top.
 ## @end table
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on this
 ## axes rather than the current axes returned by @code{gca}.
 ##
-## @seealso{xlim, ylim, zlim, daspect, pbaspect, box, grid}
+## @seealso{xlim, ylim, zlim, daspect, pbaspect, box, grid, caxis}
 ## @end deftypefn
 
 ## Author: jwe
 
 function limits = axis (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("axis", varargin{:});
 
@@ -216,17 +218,17 @@ function limits = __axis__ (ca, ax, vara
         set (ca, "xlimmode", "auto", "ylimmode", "auto", "zlimmode", "auto");
       endif
     elseif (strcmpi (ax, "manual"))
       ## fixes the axis limits, like axis(axis) should;
       set (ca, "xlimmode", "manual", "ylimmode", "manual", "zlimmode", "manual");
     elseif (strcmpi (ax, "tight"))
       ## sets the axis limits to the min and max of all data.
       __do_tight_option__ (ca);
-      ## tic marks
+      ## tick marks
     elseif (strcmpi (ax, "on") || strcmpi (ax, "tic"))
       set (ca, "xtickmode", "auto", "ytickmode", "auto", "ztickmode", "auto");
       if (strcmpi (ax, "on"))
         set (ca, "xticklabelmode", "auto", "yticklabelmode", "auto",
            "zticklabelmode", "auto");
       endif
       set (ca, "visible", "on");
     elseif (strcmpi (ax, "off"))
@@ -269,22 +271,22 @@ function limits = __axis__ (ca, ax, vara
       else
         set (ca, "zticklabel", "");
       endif
 
     else
       warning ("axis: unknown option '%s'", ax);
     endif
 
-  elseif (isvector (ax))
+  elseif (isnumeric (ax) && isvector (ax))
 
     len = length (ax);
 
-    if (len != 2 && len != 4 && len != 6)
-      error ("axis: LIMITS vector must have 2, 4, or 6 elements");
+    if (len != 2 && len != 4 && len != 6 && len != 8)
+      error ("axis: LIMITS vector must have 2, 4, 6, or 8 elements");
     endif
 
     for i = 1:2:len
       if (ax(i) >= ax(i+1))
         error ("axis: LIMITS(%d) must be less than LIMITS(%d)", i, i+1);
       endif
     endfor
 
@@ -295,18 +297,22 @@ function limits = __axis__ (ca, ax, vara
     if (len > 3)
       ylim (ca, ax(3:4));
     endif
 
     if (len > 5)
       zlim (ca, ax(5:6));
     endif
 
+    if (len > 7)
+      clim (ca, ax(7:8));
+    endif
+
   else
-    error ("axis: expecting no args, or a vector with 2, 4, or 6 elements");
+    error ("axis: expecting no args, or a numeric vector with 2, 4, 6, or 8 elements");
   endif
 
   if (! isempty (varargin))
     __axis__ (ca, varargin{:});
   endif
 
 endfunction
 
@@ -432,57 +438,57 @@ endfunction
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (331);
 %!  plot (t, x);
-%!  title ('x tics and labels');
+%!  title ('x ticks and labels');
 %!  axis ('ticx');
 %!
 %! subplot (332);
 %!  plot (t, x);
-%!  title ('y tics and labels');
+%!  title ('y ticks and labels');
 %!  axis ('ticy');
 %!
 %! subplot (333);
 %!  plot (t, x);
 %!  title ('axis off');
 %!  axis ('off');
 %!
 %! subplot (334);
 %!  plot (t, x);
-%!  title ('x and y tics, x labels');
+%!  title ('x and y ticks, x labels');
 %!  axis ('labelx','tic');
 %!
 %! subplot (335);
 %!  plot (t, x);
-%!  title ('x and y tics, y labels');
+%!  title ('x and y ticks, y labels');
 %!  axis ('labely','tic');
 %!
 %! subplot (336);
 %!  plot (t, x);
-%!  title ('all tics but no labels');
+%!  title ('all ticks but no labels');
 %!  axis ('nolabel','tic');
 %!
 %! subplot (337);
 %!  plot (t, x);
-%!  title ('x tics, no labels');
+%!  title ('x ticks, no labels');
 %!  axis ('nolabel','ticx');
 %!
 %! subplot (338);
 %!  plot (t, x);
-%!  title ('y tics, no labels');
+%!  title ('y ticks, no labels');
 %!  axis ('nolabel','ticy');
 %!
 %! subplot (339);
 %!  plot (t, x);
-%!  title ('all tics and labels');
+%!  title ('all ticks and labels');
 %!  axis ('on');
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (321);
@@ -632,8 +638,10 @@ endfunction
 %!   Z = peaks (linspace (-3, 3, 49), linspace (-2, 2, 29));
 %!   surf (Z);
 %!   axis tight;
 %!   assert (axis (), [1 49 1 29 min(Z(:)) max(Z(:))]);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
+%!error<LIMITS vector must have .* elements> axis (1:5)
+%!error<expecting no args, or a numeric vector with .* elements> axis ({1,2})
