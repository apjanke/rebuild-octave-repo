# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235075959 18000
#      Thu Feb 19 15:39:19 2009 -0500
# Node ID 03b7f618ab3d1197c93416d93e7c1d5723f16df4
# Parent  a4a8f871be81e9910f242c1a0f32286b1d565309
include docstrings for new functions in the manual

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,23 @@
+2009-02-19  John W. Eaton  <jwe@octave.org>
+
+	* doc/interperter: Include @DOCSTRING commands for the following
+	functions: bicgstab, cgs, choldelete, cholinsert, cholshift,
+	clabel, comet, command_line_path, compass, contour3, ctranspose,
+	cylinder, dellistener, diffuse, edit, ellipsoid, fclear, feather,
+	fill, find_dir_in_path, finite, flag, info, is_absolute_filename,
+	is_rooted_relative_filename, isdebugmode, ishghandle, isnull,
+	issorted, make_absolute_filename, meshz, news,
+	octave_tmp_file_name, optimget, pareto, plotmatrix, plotyy,
+	qrshift, quiver3, re_read_readline_init_file, ribbon, rose,
+	rundemos, scatter, scatter3, slice, specular, sphere, spinmap,
+	stem3, strchr, strtrim, surfl, surfnorm, times, transpose,
+	treelayout, uminus, uplus, warranty, what, xlim, yes_or_no.
+
 2009-02-17  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* interpreter/install.txi: Add documentation for configure options
 	"--without-framework-carbon" and "--without-framework-opengl".
 
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/arith.txi: Add reference to "cummin" and "cummax".
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -327,16 +327,25 @@ functions and variables.  @xref{Function
 about how to document the functions you write.
 
 @DOCSTRING(help)
 
 @DOCSTRING(doc)
 
 @DOCSTRING(lookfor)
 
+To see what is new in the current release of Octave, use the @code{news}
+function.
+
+@DOCSTRING(news)
+
+@DOCSTRING(info)
+
+@DOCSTRING(warranty)
+
 The following function can be used to change which programs are used
 for displaying the documentation, and where the documentation can be
 found.
 
 @DOCSTRING(info_file)
 
 @DOCSTRING(info_program)
 
@@ -628,16 +637,18 @@ is saved.
 As mentioned earlier Octave uses the GNU readline library for
 command-line editing and history features. It is possible to
 customize how readline works through a configuration file.
 
 @c FIXME -- need a brief description of the ~/.inputrc file here.
 
 @DOCSTRING(read_readline_init_file)
 
+@DOCSTRING(re_read_readline_init_file)
+
 @node Customizing the Prompt
 @subsection Customizing the Prompt
 @cindex prompt customization
 @cindex customizing the prompt
 
 The following variables are available for customizing the appearance of
 the command-line prompts.  Octave allows the prompt to be customized by
 inserting a number of backslash-escaped special characters that are
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -186,13 +186,15 @@ data structure type doesn't have rows or
 @DOCSTRING(numel)
 
 @DOCSTRING(length)
 
 @DOCSTRING(size)
 
 @DOCSTRING(isempty)
 
+@DOCSTRING(isnull)
+
 @DOCSTRING(sizeof)
 
 @DOCSTRING(size_equal)
 
 @DOCSTRING(squeeze)
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -157,22 +157,24 @@ There are two additional support functio
 interrogate where in the execution of a script Octave entered the debug
 mode and to print the code in the script surrounding the point where
 Octave entered debug mode.
 
 @DOCSTRING(dbwhere)
 
 @DOCSTRING(dbtype)
 
+You may also use @code{isdebugmode} to determine whether the debugger is
+currently active.
+
+@DOCSTRING(isdebugmode)
+
 Debug mode equally allows single line stepping through a function using
 the commands @code{dbstep}.
 
-@c leave dbnext undocumented
-
-@anchor{doc-dbnext}
 @DOCSTRING(dbstep)
 
 @node Call Stack
 @section Call Stack
 
 @DOCSTRING(dbstack)
 
 @DOCSTRING(dbup)
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -610,19 +610,20 @@ ridx(0) = 0; ridx(1) = 0; ridx(2) = 1; r
 cidx(0) = 0; cidx(1) = 1; cidx(2) = 3; cidx(3) = 3;
 data(0) = 1; data(1) = 2; data(2) = 3; data(3) = 4;
 
 SparseMatrix sm (data, ridx, cidx, nr, nc);
 @end group
 @end example
 
 @noindent
-which creates the matrix given in section @ref{Storage}.  Note that
-the compressed matrix format is not used at the time of the creation
-of the matrix itself, however it is used internally.
+which creates the matrix given in section
+@ref{Storage of Sparse Matrices}.  Note that the compressed matrix
+format is not used at the time of the creation of the matrix itself,
+however it is used internally.
 
 As previously mentioned, the values of the sparse matrix are stored
 in increasing column-major ordering.  Although the data passed by the
 user does not need to respect this requirement, the pre-sorting the
 data significantly speeds up the creation of the sparse matrix.
 
 The disadvantage of this technique of creating a sparse matrix is
 that there is a brief time where two copies of the data exists.  Therefore
diff --git a/doc/interpreter/eos.txi b/doc/interpreter/eos.txi
--- a/doc/interpreter/eos.txi
+++ b/doc/interpreter/eos.txi
@@ -498,12 +498,8 @@ set the Octave variable @code{INFO_PROGR
 The latter is perhaps more attractive because it allows to look up keys
 in the indices of @emph{several} info files related to Octave (provided
 that the Emacs variable @code{octave-help-files} is set correctly).  In
 this case, set @code{INFO_PROGRAM} to @code{"info-emacs-octave-help"}.
 
 If you use Octave from within Emacs, these settings are best done in the
 @file{~/.emacs-octave} startup file (or the file pointed to by the Emacs
 variable @code{inferior-octave-startup-file}).
-
-@c Local Variables:
-@c TeX-command-default: "Texinfo"
-@c End:
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -612,16 +612,18 @@ function files that are distributed with
 If you know that your own function files will not change while you are
 running Octave, you can improve performance by calling
 @code{ignore_function_time_stamp ("all")}, so that Octave will
 ignore the time stamps for all function files.  Passing
 @code{"system"} to this function resets the default behavior.
 
 @c FIXME -- note about time stamps on files in NFS environments?
 
+@DOCSTRING(edit)
+
 @DOCSTRING(mfilename)
 
 @DOCSTRING(ignore_function_time_stamp)
 
 @menu
 * Manipulating the load path::
 * Subfunctions::
 * Private Functions::
@@ -666,16 +668,20 @@ After this the directory @samp{~/Octave}
 @DOCSTRING(pathsep)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(restoredefaultpath)
 
+@DOCSTRING(command_line_path)
+
+@DOCSTRING(find_dir_in_path)
+
 @node Subfunctions
 @subsection Subfunctions
 
 A function file may contain secondary functions called
 @dfn{subfunctions}.  These secondary functions are only visible to the
 other functions in the same function file.  For example, a file
 @file{f.m} containing
 
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -134,16 +134,18 @@ between 0 and 1.
 @DOCSTRING(autumn)
 
 @DOCSTRING(bone)
 
 @DOCSTRING(cool)
 
 @DOCSTRING(copper)
 
+@DOCSTRING(flag)
+
 @DOCSTRING(gray)
 
 @DOCSTRING(hot)
 
 @DOCSTRING(hsv)
 
 @DOCSTRING(jet)
 
@@ -169,16 +171,21 @@ An additional colormap is @code{gmap40}.
 colors with integer values of the red, green and blue components. This
 is a workaround for a limitation of gnuplot 4.0, that does not allow the color of
 line or patch objects to be set, and so @code{gmap40} is useful for
 gnuplot 4.0 users, and in particular in conjunction with the @var{bar},
 @var{barh} or @var{contour} functions.
 
 @DOCSTRING(gmap40)
 
+You may use the @code{spinmap} function to cycle through the colors in
+the current colormap, displaying the changes for the current figure.
+
+@DOCSTRING(spinmap)
+
 @node Plotting on top of Images
 @section Plotting on top of Images
 
 If gnuplot is being used to display images it is possible to plot on
 top of images. Since an image is a matrix it is indexed by row and
 column values. The plotting system is, however, based on the 
 traditional @math{(x, y)} system. To minimize the difference between
 the two systems Octave places the origin of the coordinate system in
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -120,16 +120,18 @@ Octave has three functions that make it 
 input.  The @code{input} and @code{menu} functions are normally
 used for managing an interactive dialog with a user, and the
 @code{keyboard} function is normally used for doing simple debugging.
 
 @DOCSTRING(input)
 
 @DOCSTRING(menu)
 
+@DOCSTRING(yes_or_no)
+
 For @code{input}, the normal command line history and editing functions
 are available at the prompt.
 
 Octave also has a function that makes it possible to get a single
 character from the keyboard without requiring the user to type a
 carriage return.
 
 @DOCSTRING(kbhit)
@@ -970,17 +972,19 @@ within Octave needs to access data.  Whe
 files will be deleted, so this step need not be executed manually.
 
 @DOCSTRING(mkstemp)
 
 @DOCSTRING(tmpfile)
 
 @DOCSTRING(tmpnam)
 
-@node EOF and Errors
+@DOCSTRING(octave_tmp_file_name)
+
+@node EOF and Errors, File Positioning, Temporary Files, C-Style I/O Functions
 @subsection End of File and Errors
 
 Once a file has been opened its status can be acquired.  As an example
 the @code{feof} functions determines if the end of the file has been
 reached.  This can be very useful when reading small parts of a file
 at a time.  The following example shows how to read one line at a time
 from a file until the end has been reached.
 
@@ -998,16 +1002,18 @@ Note that in some situations it is more 
 contents of a file and then process it, than it is to read it line by
 line.  This has the potential advantage of removing the loop in the
 above code.
 
 @DOCSTRING(feof)
 
 @DOCSTRING(ferror)
 
+@DOCSTRING(fclear)
+
 @DOCSTRING(freport)
 
 @node File Positioning
 @subsection File Positioning
 
 Three functions are available for setting and determining the position of
 the file pointer for a given file.
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -24,16 +24,17 @@ Reference material for many of these fun
 Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
 1989, and in the @cite{@sc{Lapack} Users' Guide}, SIAM, 1992.
 
 @menu
 * Techniques used for Linear Algebra::
 * Basic Matrix Functions::      
 * Matrix Factorizations::       
 * Functions of a Matrix::       
+* Specialized Solvers::
 @end menu
 
 @node Techniques used for Linear Algebra
 @section Techniques used for Linear Algebra
 
 Octave includes a polymorphic solver, that selects an appropriate
 matrix factorization depending on the properties of the matrix itself. 
 Generally, the cost of determining the matrix type is small relative to 
@@ -123,28 +124,36 @@ flag a non-Hermitian matrix.
 @DOCSTRING(chol)
 
 @DOCSTRING(cholinv)
 
 @DOCSTRING(chol2inv)
 
 @DOCSTRING(cholupdate)
 
+@DOCSTRING(cholinsert)
+
+@DOCSTRING(choldelete)
+
+@DOCSTRING(cholshift)
+
 @DOCSTRING(hess)
 
 @DOCSTRING(lu)
 
 @DOCSTRING(qr)
 
 @DOCSTRING(qrupdate)
 
 @DOCSTRING(qrinsert)
 
 @DOCSTRING(qrdelete)
 
+@DOCSTRING(qrshift)
+
 @DOCSTRING(qz)
 
 @DOCSTRING(qzhess)
 
 @DOCSTRING(schur)
 
 @DOCSTRING(subspace)
 
@@ -163,8 +172,15 @@ flag a non-Hermitian matrix.
 
 @DOCSTRING(logm)
 
 @DOCSTRING(sqrtm)
 
 @DOCSTRING(kron)
 
 @DOCSTRING(syl)
+
+@node Specialized Solvers
+@section Specialized Solvers
+
+@DOCSTRING(bicgstab)
+
+@DOCSTRING(cgs)
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -113,16 +113,18 @@ Note that in conditional contexts (like 
 @DOCSTRING(shiftdim)
 
 @DOCSTRING(shift)
 
 @DOCSTRING(sort)
 
 @DOCSTRING(sortrows)
 
+@DOCSTRING(issorted)
+
 Since the @code{sort} function does not allow sort keys to be specified,
 it can't be used to order the rows of a matrix according to the values
 of the elements in various columns@footnote{For example, to first sort
 based on the values in column 1, and then, for any values that are
 repeated in column 1, sort based on the values found in column 2, etc.}
 in a single call.  Using the second output, however, it is possible to
 sort all rows based on the values in a given column.  Here's an example
 that sorts the rows of a matrix based on the values in the second
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -188,16 +188,17 @@ It corresponds to GNU Octave version @va
 * Installation::                How to configure, compile and install Octave.
 * Emacs::                       
 @c * Grammar::                     
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
+@c FIXME -- is the detailed node listing up to date?
 @detailmenu
  --- The Detailed Node Listing ---
 
 Preface
 
 * Acknowledgements::            
 * How You Can Contribute to Octave::  
 * Distribution::                
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -135,8 +135,10 @@ the @code{gls} is needed.
 
 @DOCSTRING(ols)
 
 @DOCSTRING(gls)
 
 @DOCSTRING(lsqnonneg)
 
 @DOCSTRING(optimset)
+
+@DOCSTRING(optimget)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -65,16 +65,21 @@ command will open a separate plot window
 
 @float Figure,fig:plot
 @image{plot,8cm}
 @caption{Simple Two-Dimensional Plot.}
 @end float
 
 @DOCSTRING(plot)
 
+The @code{plotyy} function may be used to create a plot with two
+independent y axes.
+
+@DOCSTRING(plotyy)
+
 The functions @code{semilogx}, @code{semilogy}, and @code{loglog} are
 similar to the @code{plot} function, but produce plots in which one or
 both of the axes use log scales.
 
 @DOCSTRING(semilogx)
 
 @DOCSTRING(semilogy)
 
@@ -103,25 +108,39 @@ shown in @ref{fig:hist}.
 @DOCSTRING(barh)
 
 @DOCSTRING(hist)
 
 @DOCSTRING(stairs)
 
 @DOCSTRING(stem)
 
+@DOCSTRING(stem3)
+
+@DOCSTRING(scatter)
+
+@DOCSTRING(scatter3)
+
+@DOCSTRING(plotmatrix)
+
+@DOCSTRING(pareto)
+
+@DOCSTRING(rose)
+
 The @code{contour}, @code{contourf} and @code{contourc} functions
 produce two-dimensional contour plots from three dimensional data.
 
 @DOCSTRING(contour)
 
 @DOCSTRING(contourf)
 
 @DOCSTRING(contourc)
 
+@DOCSTRING(contour3)
+
 The @code{errorbar}, @code{semilogxerr}, @code{semilogyerr}, and
 @code{loglogerr} functions produce plots with error bar markers.  For
 example,
 
 @example
 x = 0:0.1:10;
 y = sin (x);
 yp =  0.1 .* randn (size (x));
@@ -162,31 +181,46 @@ produces the spiral plot shown in @ref{f
 @end float
 
 @DOCSTRING(polar)
 
 @DOCSTRING(pie)
 
 @DOCSTRING(quiver)
 
+@DOCSTRING(quiver3)
+
+@DOCSTRING(compass)
+
+@DOCSTRING(feather)
+
 @DOCSTRING(pcolor)
 
 @DOCSTRING(area)
 
+@DOCSTRING(comet)
+
 The axis function may be used to change the axis limits of an existing
 plot and various other axis properties, such as the aspect ratio and the
 appearance of tic marks.
 
 @DOCSTRING(axis)
 
 Similarly the axis limits of the colormap can be changed with the caxis
 function.
 
 @DOCSTRING(caxis)
 
+The @code{xlim}, @code{ylim}, and @code{zlim} functions may be used to
+get or set individual axis limits.  Each has the same form.
+
+@anchor{doc-ylim}
+@anchor{doc-zlim}
+@DOCSTRING(xlim)
+
 @menu
 * Two-dimensional Function Plotting::
 @end menu
 
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 
 Octave can plot a function from a function handle inline function or
@@ -271,49 +305,73 @@ displays the spiral in three dimensions 
 
 Finally, the @code{view} function changes the viewpoint for
 three-dimensional plots.
 
 @DOCSTRING(mesh)
 
 @DOCSTRING(meshc)
 
+@DOCSTRING(meshz)
+
 @DOCSTRING(hidden)
 
 @DOCSTRING(surf)
 
 @DOCSTRING(surfc)
 
+@DOCSTRING(surfl)
+
+@DOCSTRING(surfnorm)
+
+@DOCSTRING(diffuse)
+
+@DOCSTRING(specular)
+
 @DOCSTRING(meshgrid)
 
 @DOCSTRING(ndgrid)
 
 @DOCSTRING(plot3)
 
 @DOCSTRING(view)
 
+@DOCSTRING(slice)
+
+@DOCSTRING(ribbon)
+
 @DOCSTRING(shading)
 
 @menu
 * Three-dimensional Function Plotting::
+* Three-dimensional Geometric Shapes::
 @end menu
 
 @node Three-dimensional Function Plotting
 @subsubsection Three-dimensional Function Plotting
 
 @DOCSTRING(ezplot3)
 
 @DOCSTRING(ezmesh)
 
 @DOCSTRING(ezmeshc)
 
 @DOCSTRING(ezsurf)
 
 @DOCSTRING(ezsurfc)
 
+@node Three-dimensional Geometric Shapes
+@subsubsection Three-dimensional Geometric Shapes
+
+@DOCSTRING(cylinder)
+
+@DOCSTRING(sphere)
+
+@DOCSTRING(ellipsoid)
+
 @node Plot Annotations
 @subsection Plot Annotations
 
 You can add titles, axis labels, legends, and arbitrary text to an
 existing plot.  For example,
 
 @example
 @group
@@ -338,16 +396,18 @@ border lines are on.
 @DOCSTRING(text)
 
 See @ref{Text Properties} for the properties that you can set.
 
 @anchor{doc-ylabel}
 @anchor{doc-zlabel}
 @DOCSTRING(xlabel)
 
+@DOCSTRING(clabel)
+
 @DOCSTRING(box)
 
 @DOCSTRING(grid)
 
 @DOCSTRING(colorbar)
 
 @node Multiple Plots on One Page
 @subsection Multiple Plots on One Page
@@ -503,16 +563,18 @@ A filled polygon, currently limited to t
 A three-dimensional surface.
 @end table
 
 To determine whether an object is a graphics object index or a figure
 index, use the functions @code{ishandle} and @code{isfigure}.
 
 @DOCSTRING(ishandle)
 
+@DOCSTRING(ishghandle)
+
 @DOCSTRING(isfigure)
 
 The function @code{gcf} returns an index to the current figure object,
 or creates one if none exists.  Similarly, @code{gca} returns the
 current axes object, or creates one (and its parent figure object) if
 none exists.
 
 @DOCSTRING(gcf)
@@ -591,16 +653,18 @@ You can create axes, line, and patch obj
 become children of the current axes object.
 
 @DOCSTRING(axes)
 
 @DOCSTRING(line)
 
 @DOCSTRING(patch)
 
+@DOCSTRING(fill)
+
 @DOCSTRING(surface)
 
 By default, Octave refreshes the plot window when a prompt is printed,
 or when waiting for input.  To force an update at other times, call the
 @code{drawnow} function.
 
 @DOCSTRING(drawnow)
 
@@ -1503,16 +1567,18 @@ function.
 Once a property in added to an @code{hggroup}, it is not linked to any
 other property of either the children of the group, or any other
 graphics object. Add so to control the way in which this newly added
 property is used, the @code{addlistener} function is used to define a
 callback function that is executed when the property is altered.
 
 @DOCSTRING(addlistener)
 
+@DOCSTRING(dellistener)
+
 An example of the use of these two functions might be
 
 @example
 @group
 x = 0:0.1:10;
 hg = hggroup ();
 h = plot (x, sin (x), "color", [1, 0, 0], "parent", hg);
 addproperty ("linestyle", hg, "linelinestyle", get (h, "linestyle"));
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -22,23 +22,23 @@
 @iftex
 @set htmltex
 @end iftex
 
 @node Sparse Matrices 
 @chapter Sparse Matrices
 
 @menu
-* Basics:: The Creation and Manipulation of Sparse Matrices
-* Sparse Linear Algebra:: Linear Algebra on Sparse Matrices
-* Iterative Techniques:: Iterative Techniques applied to Sparse Matrices
-* Real Life Example:: Real Life Example of the use of Sparse Matrices
+* Basics::                      Creation and Manipulation of Sparse Matrices
+* Sparse Linear Algebra::       Linear Algebra on Sparse Matrices
+* Iterative Techniques::        Iterative Techniques
+* Real Life Example::           Using Sparse Matrices
 @end menu
 
-@node Basics, Sparse Linear Algebra, Sparse Matrices, Sparse Matrices
+@node Basics
 @section The Creation and Manipulation of Sparse Matrices
 
 The size of mathematical problems that can be treated at any particular
 time is generally limited by the available computing resources. Both,
 the speed of the computer and its available memory place limitation on
 the problem size. 
 
 There are many classes of mathematical problems which give rise to
@@ -51,23 +51,23 @@ take advantage of the a-priori knowledge
 non-zero elements to accelerate their calculations.
 
 A matrix type that stores only the non-zero elements is generally called
 sparse. It is the purpose of this document to discuss the basics of the
 storage and creation of sparse matrices and the fundamental operations
 on them.
 
 @menu
-* Storage:: Storage of Sparse Matrices
-* Creation:: Creating Sparse Matrices
-* Information:: Finding out Information about Sparse Matrices
-* Operators and Functions:: Basic Operators and Functions on Sparse Matrices
+* Storage of Sparse Matrices::
+* Creating Sparse Matrices::
+* Information::
+* Operators and Functions::
 @end menu
 
-@node Storage, Creation, Basics, Basics
+@node Storage of Sparse Matrices
 @subsection Storage of Sparse Matrices
 
 It is not strictly speaking necessary for the user to understand how
 sparse matrices are stored. However, such an understanding will help
 to get an understanding of the size of sparse matrices. Understanding
 the storage technique is also necessary for those users wishing to 
 create their own oct-files. 
 
@@ -161,17 +161,17 @@ this manner.
 A further constraint on the sparse matrix storage used by Octave is that 
 all elements in the rows are stored in increasing order of their row
 index, which makes certain operations faster. However, it imposes
 the need to sort the elements on the creation of sparse matrices. Having
 disordered elements is potentially an advantage in that it makes operations
 such as concatenating two sparse matrices together easier and faster, however
 it adds complexity and speed problems elsewhere.
 
-@node Creation, Information, Storage, Basics
+@node Creating Sparse Matrices
 @subsection Creating Sparse Matrices
 
 There are several means to create sparse matrix.
 
 @table @asis
 @item Returned from a function
 There are many functions that directly return sparse matrices. These include
 @dfn{speye}, @dfn{sprand}, @dfn{diag}, etc.
@@ -298,17 +298,17 @@ number of memory allocations.
 @DOCSTRING(spconvert)
 
 The above problem of memory reallocation can be avoided in
 oct-files. However, the construction of a sparse matrix from an oct-file
 is more complex than can be discussed in this brief introduction, and
 you are referred to chapter @ref{Dynamically Linked Functions}, to have
 a full description of the techniques involved.
 
-@node Information, Operators and Functions, Creation, Basics
+@node Information
 @subsection Finding out Information about Sparse Matrices
 
 There are a number of functions that allow information concerning
 sparse matrices to be obtained. The most basic of these is
 @dfn{issparse} that identifies whether a particular Octave object is
 in fact a sparse matrix.
 
 Another very basic function is @dfn{nnz} that returns the number of
@@ -416,26 +416,28 @@ symmetric or @code{treeplot(etree(A+A'))
 @DOCSTRING(etree)
 
 @DOCSTRING(etreeplot)
 
 @DOCSTRING(gplot)
 
 @DOCSTRING(treeplot)
 
-@node Operators and Functions, , Information, Basics
+@DOCSTRING(treelayout)
+
+@node Operators and Functions
 @subsection Basic Operators and Functions on Sparse Matrices
 
 @menu
-* Functions:: Sparse Functions
-* ReturnType:: The Return Types of Operators and Functions
-* MathConsiderations:: Mathematical Considerations
+* Sparse Functions::            
+* Return Types of Operators and Functions::  
+* Mathematical Considerations::  
 @end menu
 
-@node Functions, ReturnType, Operators and Functions, Operators and Functions
+@node Sparse Functions
 @subsubsection Sparse Functions
 
 An important consideration in the use of the sparse functions of
 Octave is that many of the internal functions of Octave, such as
 @dfn{diag}, cannot accept sparse matrices as an input. The sparse
 implementation in Octave therefore uses the @dfn{dispatch}
 function to overload the normal Octave functions with equivalent
 functions that work with sparse matrices. However, at any time the
@@ -486,17 +488,17 @@ used.
 @end table
 
 In addition all of the standard Octave mapper functions (ie. basic
 math functions that take a single argument) such as @dfn{abs}, etc
 can accept sparse matrices. The reader is referred to the documentation
 supplied with these functions within Octave itself for further
 details.
 
-@node ReturnType, MathConsiderations, Functions, Operators and Functions
+@node Return Types of Operators and Functions
 @subsubsection The Return Types of Operators and Functions
 
 The two basic reasons to use sparse matrices are to reduce the memory 
 usage and to not have to do calculations on zero elements. The two are
 closely related in that the computation time on a sparse matrix operator
 or function is roughly linear with the number of non-zero elements.
 
 Therefore, there is a certain density of non-zero elements of a matrix 
@@ -545,17 +547,17 @@ should return a sparse matrix. To ensure
 always returns a sparse matrix, even if the memory used will be larger 
 than its full representation.
 
 @DOCSTRING(sparse_auto_mutate)
 
 Note that the @code{sparse_auto_mutate} option is incompatible with
 @sc{Matlab}, and so it is off by default.
 
-@node MathConsiderations, , ReturnType, Operators and Functions
+@node Mathematical Considerations
 @subsubsection Mathematical Considerations
 
 The attempt has been made to make sparse matrices behave in exactly the
 same manner as there full counterparts. However, there are certain differences
 and especially differences with other products sparse implementations.
 
 Firstly, the "./" and ".^" operators must be used with care. Consider what
 the examples
@@ -717,17 +719,17 @@ reorder the matrix to maximize performan
 @DOCSTRING(csymamd)
 
 @DOCSTRING(dmperm)
 
 @DOCSTRING(symamd)
 
 @DOCSTRING(symrcm)
 
-@node Sparse Linear Algebra, Iterative Techniques, Basics, Sparse Matrices
+@node Sparse Linear Algebra
 @section Linear Algebra on Sparse Matrices
 
 Octave includes a polymorphic solver for sparse matrices, where 
 the exact solver used to factorize the matrix, depends on the properties
 of the sparse matrix itself. Generally, the cost of determining the matrix type
 is small relative to the cost of factorizing the matrix itself, but in any
 case the matrix type is cached once it is calculated, so that it is not
 re-determined each time it is used in a linear equation.
@@ -835,17 +837,17 @@ Finally, the function @code{eigs} can be
 number of eigenvalues and eigenvectors based on a selection criteria
 and likewise for @code{svds} which calculates a limited number of
 singular values and vectors.
 
 @DOCSTRING(eigs)
 
 @DOCSTRING(svds)
 
-@node Iterative Techniques, Real Life Example, Sparse Linear Algebra, Sparse Matrices
+@node Iterative Techniques
 @section Iterative Techniques applied to sparse matrices
 
 The left division @code{\} and right division @code{/} operators,
 discussed in the previous section, use direct solvers to resolve a
 linear equation of the form @code{@var{x} = @var{A} \ @var{b}} or
 @code{@var{x} = @var{b} / @var{A}}. Octave equally includes a number of
 functions to solve sparse linear equations using iterative techniques.
 
@@ -856,17 +858,17 @@ functions to solve sparse linear equatio
 The speed with which an iterative solver converges to a solution can be
 accelerated with the use of a pre-conditioning matrix @var{M}. In this
 case the linear equation @code{@var{M}^-1 * @var{x} = @var{M}^-1 *
 @var{A} \ @var{b}} is solved instead. Typical pre-conditioning matrices
 are partial factorizations of the original matrix.
 
 @DOCSTRING(luinc)
 
-@node Real Life Example, , Iterative Techniques, Sparse Matrices
+@node Real Life Example
 @section Real Life Example of the use of Sparse Matrices
 
 A common application for sparse matrices is in the solution of Finite
 Element Models. Finite element models allow numerical solution of
 partial differential equations that do not have closed form solutions,
 typically because of the complex shape of the domain.
 
 In order to motivate this application, we consider the boundary value
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -407,20 +407,24 @@ quote( quote == " " ) = "_"
     First_things_first,_but_not_necessarily_in_that_order
 @end example
 
 For more complex manipulations, such as searching, replacing, and
 general regular expressions, the following functions come with Octave.
 
 @DOCSTRING(deblank)
 
+@DOCSTRING(strtrim)
+
 @DOCSTRING(strtrunc)
 
 @DOCSTRING(findstr)
 
+@DOCSTRING(strchr)
+
 @DOCSTRING(index)
 
 @DOCSTRING(rindex)
 
 @DOCSTRING(strfind)
 
 @DOCSTRING(strmatch)
 
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -207,16 +207,22 @@ about the status of files.
 @DOCSTRING(fullfile)
 
 @DOCSTRING(tempdir)
 
 @DOCSTRING(tempname)
 
 @DOCSTRING(P_tmpdir)
 
+@DOCSTRING(is_absolute_filename)
+
+@DOCSTRING(is_rooted_relative_filename)
+
+@DOCSTRING(make_absolute_filename)
+
 @node File Archiving Utilities
 @section File Archiving Utilities
 
 @DOCSTRING(bunzip2)
 
 @DOCSTRING(gzip)
 
 @DOCSTRING(gunzip)
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -296,16 +296,13 @@ them in plain files with no extension ra
 
 @DOCSTRING(fail)
 
 @node Demonstration Functions
 @section Demonstration Functions
 
 @DOCSTRING(demo)
 
+@DOCSTRING(rundemos)
+
 @DOCSTRING(example)
 
 @DOCSTRING(speed)
-
-
-@c Local Variables: ***
-@c Mode: texinfo ***
-@c End: ***
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -363,8 +363,9 @@ function allows this.
 Information about a function or variable such as its location in the
 file system can also be acquired from within Octave. This is usually
 only useful during development of programs, and not within a program.
 
 @DOCSTRING(type)
 
 @DOCSTRING(which)
 
+@DOCSTRING(what)
diff --git a/scripts/plot/comet.m b/scripts/plot/comet.m
--- a/scripts/plot/comet.m
+++ b/scripts/plot/comet.m
@@ -24,18 +24,16 @@
 ## to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time which passes as the animation passes from one point to the next. The
 ## default for @var{p} is 0.1 seconds.
 ##
 ## If @var{ax} is specified the animition is produced in that axis rather than
 ## the @code{gca}.
-## 
-## @seealso{comet3}
 ## @end deftypefn
 
 ## Author: Ben Abbott bpabbott@mac.com
 ## Created: 2008-09-21
 
 function comet (varargin)
 
   if (nargin == 0)
