# HG changeset patch
# User jwe
# Date 845080168 0
#      Sat Oct 12 00:29:28 1996 +0000
# Node ID 67a18ae969d49727b60b91fdcfb9403e07a98d42
# Parent  d423dcc0ac321655214aa840d6aa661ad184a9ed
[project @ 1996-10-12 00:27:01 by jwe]

diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -72,19 +72,18 @@ Software Foundation, 59 Temple Place - S
   DEFVAR_INT (name, sname, defn, inst_as_fcn, 0, sv_fcn, doc); \
   DEFVAR_INT ("__" ## name ## "__", X ## sname, defn, 0, 1, sv_fcn, doc)
 
 // How builtin variables are actually installed.
 
 #define DEFVAR_INT(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
   do \
     { \
-      builtin_variable sname (name, new octave_value (defn), \
-			      inst_as_fcn, protect, (sv_fcn ? 1 : 0), \
-			      sv_fcn, doc); \
+      builtin_variable sname (name, octave_value (defn), inst_as_fcn, \
+			      protect, (sv_fcn ? 1 : 0), sv_fcn, doc); \
       install_builtin_variable (sname); \
     } \
   while (0)
 
 // Define a builtin function.
 //
 //   name is the name of the function, unqouted.
 //
@@ -148,17 +147,18 @@ Software Foundation, 59 Temple Place - S
       install_builtin_mapper (S ## name); \
     } \
   while (0)
 
 // Make alias another name for the existing function name.  This macro
 // must be used in the same file where name is defined, after the
 // definition for name.
 
-#define DEFALIAS(name, alias) DEFALIAS_INTERNAL (name, alias)
+#define DEFALIAS(name, alias) \
+  DEFALIAS_INTERNAL (name, alias)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "gripes.h"
-#include "pt-const.h"
+#include "ov.h"
 
 void
 gripe_not_supported (const char *fcn)
 {
   error ("%s: not supported on this system", fcn);
 }
 
 void
@@ -82,19 +82,19 @@ gripe_user_supplied_eval (const char *na
 
 void
 gripe_user_returned_invalid (const char *name)
 {
   error ("%s: user-supplied function returned invalid value", name);
 }
 
 void
-gripe_invalid_conversion (const char *from, const char *to)
+gripe_invalid_conversion (const string& from, const string& to)
 {
-  error ("invalid conversion from %s to %s", from, to);
+  error ("invalid conversion from %s to %s", from.c_str (), to.c_str ());
 }
 
 void
 gripe_invalid_value_specified (const char *name)
 {
   warning ("invalid value specified for `%s'", name);
 }
 
@@ -120,28 +120,44 @@ void
 gripe_data_conversion (const char *from, const char *to)
 {
   error ("unable to convert from %s to %s format", from, to);
 }
 
 void
 gripe_wrong_type_arg (const char *name, const octave_value& tc)
 {
-  error ("%s: wrong type argument `%s'", name, tc.type_as_string ());
+  string type = tc.type_name ();
+  error ("%s: wrong type argument `%s'", name, type.c_str ());
 }
 
 void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op)
 {
-  error ("invalid operand `%s' for unary operator", op.type_as_string ());
+  string type = op.type_name ();
+  error ("invalid operand `%s' for unary operator", type.c_str ());
 }
 
 void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op)
 {
-  error ("invalid operand `%s' for binary operator", op.type_as_string ());
+  string type = op.type_name ();
+  error ("invalid operand `%s' for binary operator", type.c_str ());
+}
+
+void
+gripe_implicit_conversion (const char *from, const char *to)
+{
+  warning ("implicit conversion from %s to %s", from, to);
+}
+
+void
+gripe_divide_by_zero (void)
+{
+  if (Vwarn_divide_by_zero)
+    warning ("division by zero");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -18,36 +18,40 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_gripes_h)
 #define octave_gripes_h 1
 
+#include <string>
+
 class octave_value;
 
 extern void gripe_not_supported (void);
 extern void gripe_string_invalid (void);
 extern void gripe_range_invalid (void);
 extern void gripe_nonconformant (void);
 extern void gripe_nonconformant (int r1, int c1, int r2, int c2);
 extern void gripe_empty_arg (const char *name, int is_error);
 extern void gripe_square_matrix_required (const char *name);
 extern void gripe_user_supplied_eval (const char *name);
 extern void gripe_user_returned_invalid (const char *name);
-extern void gripe_invalid_conversion (const char *from, const char *to);
+extern void gripe_invalid_conversion (const string& from, const string& to);
 extern void gripe_invalid_value_specified (const char *name);
 extern void gripe_2_or_3_dim_plot (void);
 extern void gripe_unrecognized_float_fmt (void);
 extern void gripe_unrecognized_data_fmt (const char *warn_for);
 extern void gripe_data_conversion (const char *from, const char *to);
 extern void gripe_wrong_type_arg (const char *name, const octave_value& tc);
 extern void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 extern void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
+extern void gripe_implicit_conversion (const char *from, const char *to);
+extern void gripe_divide_by_zero (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
