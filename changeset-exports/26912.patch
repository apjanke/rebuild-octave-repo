# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552582136 0
#      Thu Mar 14 16:48:56 2019 +0000
# Node ID b54d9581b1ac1ceb1d29afc8223f1de0fa5b2d92
# Parent  ae9f8906e2cb98616946e7e8421aa9652eec9156
avoid some overloaded virtual warnings (bug #55741)

* stack-frame.h (compiled_fcn_stack_frame, script_stack_frame,
base_value_stack_frame, user_fcn_stack_frame, scope_stack_frame):
Add using declarations for the base class virtual varval and varref
functions since we are only partially overloading them.

diff --git a/libinterp/corefcn/stack-frame.h b/libinterp/corefcn/stack-frame.h
--- a/libinterp/corefcn/stack-frame.h
+++ b/libinterp/corefcn/stack-frame.h
@@ -622,16 +622,22 @@ namespace octave
       m_static_link->set_auto_fcn_var (avt, val);
     }
 
     octave_value get_auto_fcn_var (auto_var_type avt) const
     {
       return m_static_link->get_auto_fcn_var (avt);
     }
 
+    // We only need to override one of each of these functions.  The
+    // using declaration will avoid warnings about partially-overloaded
+    // virtual functions.
+    using stack_frame::varval;
+    using stack_frame::varref;
+
     octave_value varval (const symbol_record& sym) const
     {
       // Look in closest stack frame that contains values (either the
       // top scope, or a user-defined function or script).
 
       return m_static_link->varval (sym);
     }
 
@@ -751,16 +757,22 @@ namespace octave
       m_access_link->set_auto_fcn_var (avt, val);
     }
 
     octave_value get_auto_fcn_var (auto_var_type avt) const
     {
       return m_access_link->get_auto_fcn_var (avt);
     }
 
+    // We only need to override one of each of these functions.  The
+    // using declaration will avoid warnings about partially-overloaded
+    // virtual functions.
+    using stack_frame::varval;
+    using stack_frame::varref;
+
     octave_value varval (const symbol_record& sym) const;
 
     octave_value& varref (const symbol_record& sym);
 
     void mark_scope (const symbol_record& sym, scope_flags flag);
 
     void display (bool follow = true) const;
 
@@ -836,16 +848,22 @@ namespace octave
       return m_auto_vars.at (avt);
     }
 
     void set_auto_fcn_var (auto_var_type avt, const octave_value& val)
     {
       m_auto_vars.at (avt) = val;
     }
 
+    // We only need to override one of each of these functions.  The
+    // using declaration will avoid warnings about partially-overloaded
+    // virtual functions.
+    using stack_frame::varval;
+    using stack_frame::varref;
+
     octave_value varval (size_t data_offset) const
     {
       return m_values.at (data_offset);
     }
 
     octave_value& varref (size_t data_offset)
     {
       return m_values.at (data_offset);
@@ -934,16 +952,22 @@ namespace octave
     unwind_protect_frame (void) const { return m_unwind_protect_frame; }
 
     symbol_record lookup_symbol (const std::string& name) const;
 
     symbol_record insert_symbol (const std::string&);
 
     scope_flags scope_flag (const symbol_record& sym) const;
 
+    // We only need to override one of each of these functions.  The
+    // using declaration will avoid warnings about partially-overloaded
+    // virtual functions.
+    using base_value_stack_frame::varval;
+    using base_value_stack_frame::varref;
+
     octave_value varval (const symbol_record& sym) const;
 
     octave_value& varref (const symbol_record& sym);
 
     void mark_scope (const symbol_record& sym, scope_flags flag);
 
     void display (bool follow = true) const;
 
@@ -996,16 +1020,22 @@ namespace octave
     {
       return m_scope.lookup_symbol (name);
     }
 
     symbol_record insert_symbol (const std::string&);
 
     scope_flags scope_flag (const symbol_record& sym) const;
 
+    // We only need to override one of each of these functions.  The
+    // using declaration will avoid warnings about partially-overloaded
+    // virtual functions.
+    using base_value_stack_frame::varval;
+    using base_value_stack_frame::varref;
+
     octave_value varval (const symbol_record& sym) const;
 
     octave_value& varref (const symbol_record& sym);
 
     void mark_scope (const symbol_record& sym, scope_flags flag);
 
     void display (bool follow = true) const;
 
