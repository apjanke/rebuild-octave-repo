# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1376412050 -3600
#      Tue Aug 13 17:40:50 2013 +0100
# Node ID 96a1c132e3c6a9b0577acb1ef431fa426da8adc3
# Parent  0b8f78cdc5cde4c8a9018d8be176a6f5ce7f2cdd
__magick_read__.cc: follow coding guidelines.

* __magick_read__.cc: don;t make long ternary operators; don't use { }
  for single statements; no silly comments; less pass of arguments by
  value; no spaces when indexing; don't forget to return after error();
  no { } for short cases in switch blocks.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -74,17 +74,17 @@ calculate_region (const octave_scalar_ma
 
   return region;
 }
 
 template <class T>
 static octave_value_list
 read_indexed_images (std::vector<Magick::Image>& imvec,
                      const Array<octave_idx_type>& frameidx,
-                     const octave_idx_type nargout,
+                     const octave_idx_type& nargout,
                      const octave_scalar_map& options)
 {
   typedef typename T::element_type P;
 
   octave_value_list retval (3, Matrix ());
 
   std::map<std::string, octave_idx_type> region = calculate_region (options);
   const octave_idx_type nFrames = frameidx.length ();
@@ -184,17 +184,17 @@ read_indexed_images (std::vector<Magick:
 // This function is highly repetitive, a bunch of for loops that are
 // very similar to account for different image types. They are different
 // enough that trying to reduce the copy and paste would decrease its
 // readability too much.
 template <class T>
 octave_value_list
 read_images (std::vector<Magick::Image>& imvec,
              const Array<octave_idx_type>& frameidx,
-             const octave_idx_type nargout,
+             const octave_idx_type& nargout,
              const octave_scalar_map& options)
 {
   typedef typename T::element_type P;
 
   octave_value_list retval (3, Matrix ());
 
   std::map<std::string, octave_idx_type> region = calculate_region (options);
   const octave_idx_type nFrames = frameidx.length ();
@@ -222,32 +222,32 @@ read_images (std::vector<Magick::Image>&
   // Finally, we must do the division ourselves (set a divisor) instead of
   // using quantumOperator for the cases where we will be returning floating
   // point and want things in the range [0 1]. This is the same reason why
   // the divisor is of type double.
   // uint64_t is used in expression because default 32-bit value overflows
   // when depth() is 32.
   // TODO in the next release of GraphicsMagick, MaxRGB should be replaced
   //      with QuantumRange since MaxRGB is already deprecated in ImageMagick.
-  const double divisor   = imvec[0].depth () == 32 ?
-                           std::numeric_limits<uint32_t>::max () :
-                           MaxRGB / ((uint64_t (1) << imvec[0].depth ()) - 1);
+  double divisor;
+  if (imvec[0].depth () == 32)
+    divisor = std::numeric_limits<uint32_t>::max ();
+  else
+    divisor = MaxRGB / ((uint64_t (1) << imvec[0].depth ()) - 1);
 
   // FIXME: this workaround should probably be fixed in GM by creating a
   //        new ImageType BilevelMatteType
   // Despite what GM documentation claims, opacity is not only on the types
   // with Matte on the name. It is possible that an image is completely
   // black (1 color), and have a second channel set for transparency (2nd
   // color). Its type will be bilevel since there is no BilevelMatte. The
   // only way to check for this seems to be by checking matte ().
   Magick::ImageType type = imvec[0].type ();
   if (type == Magick::BilevelType && imvec[0].matte ())
-    {
-      type = Magick::GrayscaleMatteType;
-    }
+    type = Magick::GrayscaleMatteType;
 
   // FIXME: ImageType is the type being used to represent the image in memory
   // by GM. The real type may be different (see among others bug #36820). For
   // example, a png file where all channels are equal may report being
   // grayscale or even bilevel. But we must always return the real image in
   // file. In some cases, the original image attributes are stored in the
   // attributes but this is undocumented. This should be fixed in GM so that
   // a method such as original_type returns an actual Magick::ImageType
@@ -258,64 +258,51 @@ read_images (std::vector<Magick::Image>&
       //      Palette           = 2 + 1
       //      RGB               = 2
       //      RGB + Alpha       = 2 + 4
       //      Grayscale + Alpha = 4
       // We won't bother with case 3 (palette) since those should be
       // read by the function to read indexed images
       const std::string type_str = imvec[0].attribute ("PNG:IHDR.color-type-orig");
       if (type_str == "0")
-        {
-          type = Magick::GrayscaleType;
-        }
+        type = Magick::GrayscaleType;
       else if (type_str == "2")
-        {
-          type = Magick::TrueColorType;
-        }
+        type = Magick::TrueColorType;
       else if (type_str == "6")
-        {
-          type = Magick::TrueColorMatteType;
-        }
+        type = Magick::TrueColorMatteType;
       else if (type_str == "4")
-        {
-          type = Magick::GrayscaleMatteType;
-        }
+        type = Magick::GrayscaleMatteType;
     }
 
   // If the alpha channel was not requested, treat images as if
   // it doesn't exist.
   if (nargout < 3)
     {
       switch (type)
         {
         case Magick::GrayscaleMatteType:
-          {
-            type = Magick::GrayscaleType;
-            break;
-          }
+          type = Magick::GrayscaleType;
+          break;
+
         case Magick::PaletteMatteType:
-          {
-            type = Magick::PaletteType;
-            break;
-          }
+          type = Magick::PaletteType;
+          break;
+
         case Magick::TrueColorMatteType:
-          {
-            type = Magick::TrueColorType;
-            break;
-          }
+          type = Magick::TrueColorType;
+          break;
+
         case Magick::ColorSeparationMatteType:
-          {
-            type = Magick::ColorSeparationType;
-            break;
-          }
+          type = Magick::ColorSeparationType;
+          break;
+
         default:
-          {
-            // Do nothing other than silencing warnings about enumeration
-            // values not being handled in switch.
-          }
+          // Do nothing other than silencing warnings about enumeration
+          // values not being handled in switch.
+          ;
         }
     }
 
   switch (type)
     {
     case Magick::BilevelType:           // Monochrome bi-level image
     case Magick::GrayscaleType:         // Grayscale image
       {
@@ -533,22 +520,22 @@ read_images (std::vector<Magick::Image>&
       error ("__magick_read__: unknown Magick++ image type");
       return retval;
     }
 
   retval(0) = img;
   return retval;
 }
 
+// Read a file into vector of image objects.
 void static
-read_file (const std::string filename, std::vector<Magick::Image>& imvec)
+read_file (const std::string& filename, std::vector<Magick::Image>& imvec)
 {
   try
     {
-      // Read a file into vector of image objects
       Magick::readImages (&imvec, filename);
     }
   catch (Magick::Warning& w)
     {
       warning ("Magick++ warning: %s", w.what ());
     }
   catch (Magick::ErrorCoder& e)
     {
@@ -577,20 +564,19 @@ maybe_initialize_magick (void)
 
       const std::string program_name = octave_env::get_program_invocation_name ();
       Magick::InitializeMagick (program_name.c_str ());
 
       // Restore locale from before GraphicsMagick initialisation
       setlocale (LC_ALL, locale.c_str ());
 
       if (QuantumDepth < 32)
-        {
-          warning ("your version of %s limits images to %d bits per pixel",
-                   MagickPackageName, QuantumDepth);
-        }
+        warning ("your version of %s limits images to %d bits per pixel",
+                 MagickPackageName, QuantumDepth);
+
       initialized = true;
     }
 }
 #endif
 
 DEFUN_DLD (__magick_read__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{img}, @var{map}, @var{alpha}] =} __magick_read__ (@var{fname}, @var{options})\n\
@@ -615,43 +601,41 @@ use @code{imread}.\n\
       print_usage ();
       return output;
     }
 
   const octave_scalar_map options = args(1).scalar_map_value ();
   if (error_state)
     {
       error ("__magick_read__: OPTIONS must be a struct");
+      return output;
     }
 
   std::vector<Magick::Image> imvec;
   read_file (args(0).string_value (), imvec);
   if (error_state)
-    {
-      return output;
-    }
+    return output;
 
   // Prepare an Array with the indexes for the requested frames.
   const octave_idx_type nFrames = imvec.size ();
   Array<octave_idx_type> frameidx;
   const octave_value indexes = options.getfield ("index");
   if (indexes.is_string () && indexes.string_value () == "all")
     {
       frameidx.resize (dim_vector (1, nFrames));
       for (octave_idx_type i = 0; i < nFrames; i++)
-        {
-          frameidx(i) = i;
-        }
+        frameidx(i) = i;
     }
   else
     {
       frameidx = indexes.int_vector_value ();
       if (error_state)
         {
           error ("__magick_read__: invalid value for Index/Frame");
+          return output;
         }
       // Fix indexes from base 1 to base 0, and at the same time, make
       // sure none of the indexes is outside the range of image number.
       const octave_idx_type n = frameidx.nelem ();
       for (octave_idx_type i = 0; i < n; i++)
         {
           frameidx(i)--;
           if (frameidx(i) < 0 || frameidx(i) > nFrames - 1)
@@ -680,59 +664,41 @@ use @code{imread}.\n\
   //          https://sourceforge.net/mailarchive/message.php?msg_id=31180507
   //        A grayscale jpeg image reports being indexed even though the JPEG
   //        format has no support for indexed images. So we can skip at least
   //        for that.
 
   if (klass == Magick::PseudoClass && imvec[0].magick () != "JPEG")
     {
       if (depth <= 1)
-        {
-          output = read_indexed_images <boolNDArray>   (imvec, frameidx,
-                                                        nargout, options);
-        }
+        output = read_indexed_images<boolNDArray>   (imvec, frameidx,
+                                                     nargout, options);
       else if (depth <= 8)
-        {
-          output = read_indexed_images <uint8NDArray>  (imvec, frameidx,
-                                                        nargout, options);
-        }
+        output = read_indexed_images<uint8NDArray>  (imvec, frameidx,
+                                                     nargout, options);
       else if (depth <= 16)
-        {
-          output = read_indexed_images <uint16NDArray> (imvec, frameidx,
-                                                        nargout, options);
-        }
+        output = read_indexed_images<uint16NDArray> (imvec, frameidx,
+                                                     nargout, options);
       else
         {
           error ("imread: indexed images with depths greater than 16-bit are not supported");
           return output;
         }
     }
 
   else
     {
       if (depth <= 1)
-        {
-          output = read_images<boolNDArray>   (imvec, frameidx,
-                                               nargout, options);
-        }
+        output = read_images<boolNDArray>   (imvec, frameidx, nargout, options);
       else if (depth <= 8)
-        {
-          output = read_images<uint8NDArray>  (imvec, frameidx,
-                                               nargout, options);
-        }
+        output = read_images<uint8NDArray>  (imvec, frameidx, nargout, options);
       else if (depth <= 16)
-        {
-          output = read_images<uint16NDArray> (imvec, frameidx,
-                                               nargout, options);
-        }
+        output = read_images<uint16NDArray> (imvec, frameidx, nargout, options);
       else if (depth <= 32)
-        {
-          output = read_images<FloatNDArray>  (imvec, frameidx,
-                                               nargout, options);
-        }
+        output = read_images<FloatNDArray>  (imvec, frameidx, nargout, options);
       else
         {
           error ("imread: reading of images with %i-bit depth is not supported",
                  depth);
         }
     }
 
 #endif
@@ -754,27 +720,26 @@ img_float2uint (const T& img)
   uint32NDArray out (img.dims ());
 
   octave_uint32* out_fvec = out.fortran_vec ();
   const P*       img_fvec = img.fortran_vec ();
 
   const octave_uint32 max = octave_uint32::max ();
   const octave_idx_type numel = img.numel ();
   for (octave_idx_type idx = 0; idx < numel; idx++)
-    {
-      out_fvec[idx] = img_fvec[idx] * max;
-    }
+    out_fvec[idx] = img_fvec[idx] * max;
+
   return out;
 }
 
 template <class T>
 static void
 encode_indexed_images (std::vector<Magick::Image>& imvec,
                        const T& img,
-                       const Matrix cmap)
+                       const Matrix& cmap)
 {
   typedef typename T::element_type P;
   const octave_idx_type nFrames   = img.ndims () < 4 ? 1 : img.dims ()(3);
   const octave_idx_type nRows     = img.rows ();
   const octave_idx_type nCols     = img.columns ();
   const octave_idx_type cmap_size = cmap.rows ();
   const octave_idx_type bitdepth  =
     sizeof (P) * std::numeric_limits<unsigned char>::digits;
@@ -782,21 +747,19 @@ encode_indexed_images (std::vector<Magic
   // There is no colormap object, we need to build a new one for each frame,
   // even if it's always the same. We can least get a vector for the Colors.
   std::vector<Magick::ColorRGB> colormap;
   {
     const double* cmap_fvec = cmap.fortran_vec ();
     const octave_idx_type G_offset = cmap_size;
     const octave_idx_type B_offset = cmap_size * 2;
     for (octave_idx_type map_idx = 0; map_idx < cmap_size; map_idx++)
-      {
-        colormap.push_back (Magick::ColorRGB (cmap_fvec[map_idx],
-                                              cmap_fvec[map_idx + G_offset],
-                                              cmap_fvec[map_idx + B_offset]));
-      }
+      colormap.push_back (Magick::ColorRGB (cmap_fvec[map_idx],
+                                            cmap_fvec[map_idx + G_offset],
+                                            cmap_fvec[map_idx + B_offset]));
   }
 
   for (octave_idx_type frame = 0; frame < nFrames; frame++)
     {
       Magick::Image m_img (Magick::Geometry (nCols, nRows), "black");
 
       // Ensure that there are no other references to this image.
       m_img.modifyImage ();
@@ -805,31 +768,30 @@ encode_indexed_images (std::vector<Magic
       m_img.type (Magick::PaletteType);
       // FIXME: for some reason, setting bitdepth doesn't seem to work for
       //        indexed images.
       m_img.depth (bitdepth);
 
       // Insert colormap.
       m_img.colorMapSize (cmap_size);
       for (octave_idx_type map_idx = 0; map_idx < cmap_size; map_idx++)
-        {
-          m_img.colorMap (map_idx, colormap[map_idx]);
-        }
+        m_img.colorMap (map_idx, colormap[map_idx]);
+
       // Why are we also setting the pixel values instead of only the
       // index values? We don't know if a file format supports indexed
       // images. If we only set the indexes and then try to save the
       // image as JPEG for example, the indexed values get discarded,
       // there is no conversion from the indexes, it's the initial values
       // that get used. An alternative would be to only set the pixel
       // values (no indexes), then set the image as PseudoClass and GM
       // would create a colormap for us. However, we wouldn't have control
       // over the order of that colormap. And that's why we set both.
       Magick::PixelPacket* pix  = m_img.getPixels (0, 0, nCols, nRows);
       Magick::IndexPacket* ind  = m_img.getIndexes ();
-      const P* img_fvec = img.fortran_vec ();
+      const P* img_fvec         = img.fortran_vec ();
 
       octave_idx_type GM_idx = 0;
       for (octave_idx_type column = 0; column < nCols; column++)
         {
           for (octave_idx_type row = 0; row < nRows; row++)
             {
               ind[GM_idx] = double (*img_fvec);
               pix[GM_idx] = m_img.colorMap (double (*img_fvec));
@@ -1021,18 +983,18 @@ encode_uint_image (std::vector<Magick::I
           im.quantize ();
         }
 
       imvec.push_back (im);
     }
 }
 
 void static
-write_file (const std::string filename,
-            const std::string ext,
+write_file (const std::string& filename,
+            const std::string& ext,
             std::vector<Magick::Image>& imvec)
 {
   try
     {
       Magick::writeImages (imvec.begin (), imvec.end (), ext + ":" + filename);
     }
   catch (Magick::Warning& w)
     {
@@ -1087,115 +1049,94 @@ use @code{imwrite}.\n\
 
   const octave_value img  = args(2);
   const Matrix       cmap = args(3).matrix_value ();
   if (error_state)
     {
       error ("__magick_write__: invalid IMG or MAP");
       return retval;
     }
-  // Create vector for the images to be written.
+
   std::vector<Magick::Image> imvec;
 
   if (cmap.is_empty ())
     {
       if (img.is_bool_type ())
-        {
-          encode_bool_image (imvec, img);
-        }
+        encode_bool_image (imvec, img);
       else if (img.is_uint8_type ())
-        {
-          encode_uint_image<uint8NDArray> (imvec, img);
-        }
+        encode_uint_image<uint8NDArray> (imvec, img);
       else if (img.is_uint16_type ())
-        {
-          encode_uint_image<uint16NDArray> (imvec, img);
-        }
+        encode_uint_image<uint16NDArray> (imvec, img);
       else if (img.is_uint32_type ())
-        {
-          encode_uint_image<uint32NDArray> (imvec, img);
-        }
+        encode_uint_image<uint32NDArray> (imvec, img);
       else if (img.is_float_type ())
         {
           // For image formats that support floating point values, we write
           // the actual values. For those who don't, we only use the values
           // on the range [0 1] and save integer values.
           // But here, even for formats that would support floating point
           // values, GM seems unable to do that so we at least make them uint32.
           uint32NDArray clip_img;
           if (img.is_single_type ())
-            {
-              clip_img = img_float2uint<FloatNDArray> (img.float_array_value ());
-            }
+            clip_img = img_float2uint<FloatNDArray> (img.float_array_value ());
           else
-            {
-              clip_img = img_float2uint<NDArray> (img.array_value ());
-            }
+            clip_img = img_float2uint<NDArray> (img.array_value ());
+
           encode_uint_image<uint32NDArray> (imvec, octave_value (clip_img));
         }
       else
         {
           error ("__magick_write__: image type not supported");
           return retval;
         }
     }
   else
     {
       // We should not get floating point indexed images here because we
       // converted them in __imwrite__.m. We should probably do it here
       // but it would look much messier.
       if (img.is_uint8_type ())
-        {
-          encode_indexed_images<uint8NDArray> (imvec, img.uint8_array_value (), cmap);
-        }
+        encode_indexed_images<uint8NDArray>  (imvec, img.uint8_array_value (),
+                                              cmap);
       else if (img.is_uint16_type ())
-        {
-          encode_indexed_images<uint16NDArray> (imvec, img.uint16_array_value (), cmap);
-        }
+        encode_indexed_images<uint16NDArray> (imvec, img.uint16_array_value (),
+                                              cmap);
       else
         {
           error ("__magick_write__: indexed image must be uint8, uint16 or float.");
           return retval;
         }
     }
 
   const octave_idx_type nFrames = imvec.size ();
 
-  // Set quality.
   // FIXME What happens when we try to set with formats that do not support it?
   const octave_idx_type quality = options.getfield ("quality").int_value ();
   for (octave_idx_type i = 0; i < nFrames; i++)
-    {
-      imvec[i].quality (quality);
-    }
+    imvec[i].quality (quality);
 
   // If writemode is set to append, read the image and append to it. Even
   // if set to append, make sure that something was read at all.
   const std::string writemode = options.getfield ("writemode").string_value ();
   if (writemode == "append" && file_stat (filename).exists ())
     {
       std::vector<Magick::Image> ini_imvec;
       read_file (filename, ini_imvec);
       if (error_state)
-        {
           return retval;
-        }
       if (ini_imvec.size () > 0)
         {
           ini_imvec.insert (ini_imvec.end (), imvec.begin (), imvec.end ());
           ini_imvec.swap (imvec);
         }
     }
 
-  // Finally, save the damn thing.
   write_file (filename, ext, imvec);
   if (error_state)
-    {
-      return retval;
-    }
+    return retval;
 
 #endif
   return retval;
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
@@ -1293,23 +1234,23 @@ use @code{imfinfo}.\n\
   octave_value retval;
 
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imfinfo", "Image IO");
 #else
 
   maybe_initialize_magick ();
 
-  if (args.length () < 1 || ! args (0).is_string ())
+  if (args.length () < 1 || ! args(0).is_string ())
     {
       print_usage ();
       return retval;
     }
 
-  const std::string filename = args (0).string_value ();
+  const std::string filename = args(0).string_value ();
 
   try
     {
       // Read the file.
       std::vector<Magick::Image> imvec;
       Magick::readImages (&imvec, args(0).string_value ());
       int nframes = imvec.size ();
 
@@ -1432,17 +1373,17 @@ Fill formats info with GraphicsMagick Co
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
   octave_value retval;
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imformats", "Image IO");
 #else
-  if (args.length () != 1 || ! args (0).is_map ())
+  if (args.length () != 1 || ! args(0).is_map ())
     {
       print_usage ();
       return retval;
     }
   octave_map formats = args(0).map_value ();
 
   maybe_initialize_magick ();
   for (octave_idx_type idx = 0; idx < formats.numel (); idx++)
