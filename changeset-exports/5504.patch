# HG changeset patch
# User jwe
# Date 1129897517 0
#      Fri Oct 21 12:25:17 2005 +0000
# Node ID d0a24bfe4487df313613289d2bae166965261cc3
# Parent  08448daec2935651fd15d6b029ca51fe61ec8139
[project @ 2005-10-21 12:25:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2005-10-21  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/gplot.l (read_until): Special case STRING.
+	(handle_string): Restore function.
+	("'", "\""): Call handle string when matching these tokens..
+
 2005-10-20  John W. Eaton  <jwe@octave.org>
 
 	* pt-mat.cc (tm_row_const::all_real): New data member.
 	(tm_row_const::all_real_p): New function.
 	(tm_row_const::tm_row_const_rep::all_real): New data member.
 	(tm_row_const::tm_row_const_rep::all_real_p): New function.
 	(tm_row_const::tm_row_const_rep::init): Set all_real and all_cmplx
 	to true here.
diff --git a/src/DLD-FUNCTIONS/gplot.l b/src/DLD-FUNCTIONS/gplot.l
--- a/src/DLD-FUNCTIONS/gplot.l
+++ b/src/DLD-FUNCTIONS/gplot.l
@@ -116,16 +116,19 @@ static bool gpt_allow_plotkw;
 static int gpt_parens;
 static int gpt_brackets;
 static int gpt_braces;
 
 static bool can_be_plotkw (void);
 
 static int is_plot_keyword (const std::string& s);
 
+static int handle_string (char delim);
+static std::string strbuf;
+
 %}
 
 D	[0-9]
 S	[ \t]
 IDENT	([_a-zA-Z@][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 NOT	((\~)|(\!))
@@ -192,21 +195,24 @@ UNOP    ((\+\+)|(\-\-)|(\.'))
       {
         gpt_allow_plotkw = true;
         return QUOTE;
       }
     else
       {
         gpt_quote_is_transpose = true;
         gpt_allow_plotkw = true;
-        warning ("unknown token = \"%s\" in plot command", yytext);
-        return OTHER;
+        return handle_string ('\'');
       }
     }
 
+"\"" {
+    return handle_string ('"');
+    }
+
 {IDENT} {
     int itok = 0;
     if (can_be_plotkw () && (itok = is_plot_keyword (yytext)))
       {
         gpt_quote_is_transpose = false;
         gpt_allow_plotkw = true;
         return itok;
       }
@@ -303,16 +309,79 @@ is_plot_keyword (const std::string& s)
   else if (almost_match ("axes", s, 2) || almost_match ("axis", s, 2))
     return AXES;
   else if ("clear" == s)
     return CLEAR;
   else
     return 0;
 }
 
+// This is used to handle character strings.  Kludge alert.
+
+static int
+handle_string (char delim)
+{
+  int c;
+  bool escape_pending = false;
+
+  strbuf = std::string (1, delim);
+
+  while ((c = yyinput ()) != EOF)
+    {
+      if (c == '\\')
+	{
+	  if (escape_pending)
+	    {
+	      strbuf += static_cast<char> (c);
+	      escape_pending = false;
+	    }
+	  else
+	    {
+	      strbuf += static_cast<char> (c);
+	      escape_pending = true;
+	    }
+	  continue;
+	}
+      else if (c == '\n')
+	{
+	  error ("unterminated string constant");
+	  break;
+	}
+      else if (c == delim)
+	{
+	  if (escape_pending)
+	    strbuf += static_cast<char> (c);
+	  else
+	    {
+	      c = yyinput ();
+
+	      if (c == delim)
+		{
+		  strbuf += static_cast<char> (c);
+		  strbuf += static_cast<char> (c);
+		}
+	      else
+		{
+		  yyunput (c, yytext);
+		  strbuf += static_cast<char> (delim);
+		  return STRING;
+		}
+	    }
+	}
+      else
+	strbuf += static_cast<char> (c);
+
+      escape_pending = false;
+    }
+
+  throw gpt_parse_error ("unterminated string");
+
+  return 0;
+}
+
 // (Probably not necessesary, but current Matlab style plot functions
 // break without this (they emit too short gnuplot commands))
 
 static std::string
 plot_style_token (const std::string& s)
 {
   std::string retval;
 
@@ -441,17 +510,17 @@ read_until (pred test, int& lasttok) thr
 	case END_BRACE:
 	  braces--;
 	  break;
 
 	default:
 	  break;
         }
 
-      s += std::string (yytext) + " ";
+      s += (tok == STRING ? strbuf : std::string (yytext)) + " ";
 
       tok = gptlex ();
     }
 
   // Throw error only if we've reached the end token and the test
   // doesn't accept it.
 
   if (! test (tok) && ! tok)
