# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1339784148 18000
#      Fri Jun 15 13:15:48 2012 -0500
# Node ID 711e64a11d36db0006f561afd275eaa4a2ce5a88
# Parent  e3696f2c6da69d2d6e0eddfa98869dc787b0d623
Fix some segfaults

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -50,17 +50,16 @@ along with Octave; see the file COPYING.
 #include <llvm/Support/TargetSelect.h>
 #include <llvm/Support/raw_os_ostream.h>
 
 #include "octave.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-scalar.h"
 #include "pt-all.h"
-#include "xpow.h"
 
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 jit_typeinfo *jit_typeinfo::instance;
 
 // thrown when we should give up on JIT and interpret
@@ -201,25 +200,16 @@ octave_jit_gripe_nan_to_logical_conversi
       gripe_nan_to_logical_conversion ();
     }
   catch (const octave_execution_exception&)
     {
       gripe_library_execution_error ();
     }
 }
 
-extern "C" octave_base_value *
-octave_jit_xpow (double a, double b)
-{
-  octave_value ret = xpow (a, b);
-  octave_base_value *obv = ret.internal_rep ();
-  obv->grab ();
-  return obv;
-}
-
 extern "C" void
 octave_jit_ginvalid_index (void)
 {
   try
     {
       gripe_invalid_index ();      
     }
   catch (const octave_execution_exception&)
@@ -535,25 +525,16 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
   add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
   add_binary_fcmp (scalar, octave_value::op_eq, llvm::CmpInst::FCMP_UEQ);
   add_binary_fcmp (scalar, octave_value::op_ge, llvm::CmpInst::FCMP_UGE);
   add_binary_fcmp (scalar, octave_value::op_gt, llvm::CmpInst::FCMP_UGT);
   add_binary_fcmp (scalar, octave_value::op_ne, llvm::CmpInst::FCMP_UNE);
 
-  llvm::Function *jxpow = create_function ("octave_jit_xpow", any, scalar,
-                                           scalar);
-  engine->addGlobalMapping (jxpow, reinterpret_cast<void *> (&octave_jit_xpow));
-  {
-    jit_function::overload ol (jxpow, false, any, scalar, scalar);
-    binary_ops[octave_value::op_pow].add_overload (ol);
-    binary_ops[octave_value::op_el_pow].add_overload (ol);
-  }
-
   llvm::Function *gripe_div0 = create_function ("gripe_divide_by_zero", void_t);
   engine->addGlobalMapping (gripe_div0,
                             reinterpret_cast<void *> (&gripe_divide_by_zero));
 
   // divide is annoying because it might error
   fn = create_function ("octave_jit_div_scalar_scalar", scalar, scalar, scalar);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
@@ -1925,17 +1906,17 @@ jit_convert::visit_index_expression (tre
   if (! (type.size () == 1 && type[0] == '('))
     fail ("Unsupported index operation");
 
   std::list<tree_argument_list *> args = exp.arg_lists ();
   if (args.size () != 1)
     fail ("Bad number of arguments in tree_index_expression");
 
   tree_argument_list *arg_list = args.front ();
-  if (arg_list->size () != 1)
+  if (arg_list && arg_list->size () != 1)
     fail ("Bad number of arguments in arg_list");
 
   tree_expression *tree_object = exp.expression ();
   jit_value *object = visit (tree_object);
 
   tree_expression *arg0 = arg_list->front ();
   jit_value *index = visit (arg0);
 
@@ -2025,16 +2006,19 @@ void
 jit_convert::visit_return_list (tree_return_list&)
 {
   fail ();
 }
 
 void
 jit_convert::visit_simple_assignment (tree_simple_assignment& tsa)
 {
+  if (tsa.op_type () != octave_value::op_asn_eq)
+    fail ("Unsupported assign");
+
   // resolve rhs
   tree_expression *rhs = tsa.right_hand_side ();
   jit_value *rhsv = visit (rhs);
 
   // resolve lhs
   tree_expression *lhs = tsa.left_hand_side ();
   if (! lhs->is_identifier ())
     fail ();
