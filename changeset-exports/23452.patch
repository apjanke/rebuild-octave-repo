# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493402391 14400
#      Fri Apr 28 13:59:51 2017 -0400
# Node ID 0af6dbede266d1bc21a6e6ae9220c2c917ab61e0
# Parent  e4fca7cc471ca1fedb84371e58dcf6f9b7f22625
also use DEFUN macros for local function declarations

* defun-int.h (DECLARE_STATIC_FUN, DECLARE_STATIC_FUNX): New macros.
* graphics.cc (waitfor_listener, waitfor_del_listener):
Use DECLARE_STATIC_FUNX for definition.

diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -106,16 +106,23 @@ defun_isargout (int, int, bool *);
 
 #define DECLARE_FUNX(name, args_name, nargout_name)             \
   OCTAVE_EXPORT octave_value_list                               \
   name (const octave_value_list& args_name, int nargout_name)
 
 #define DECLARE_FUN(name, args_name, nargout_name)      \
   DECLARE_FUNX (F ## name, args_name, nargout_name)
 
+#define DECLARE_STATIC_FUNX(name, args_name, nargout_name)      \
+  static octave_value_list                                      \
+  name (const octave_value_list& args_name, int nargout_name)
+
+#define DECLARE_STATIC_FUN(name, args_name, nargout_name)       \
+  DECLARE_FUNX (F ## name, args_name, nargout_name)
+
 // Define the code that will be used to insert the new function into
 // the symbol table.  We look for this name instead of the actual
 // function so that we can easily install the doc std::string too.
 
 typedef bool (*octave_dld_fcn_installer) (const octave::dynamic_library&, bool relative);
 
 typedef octave_function *
   (*octave_dld_fcn_getter) (const octave::dynamic_library&, bool relative);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11740,18 +11740,17 @@ do_cleanup_waitfor_listener (const octav
 static void
 cleanup_waitfor_postset_listener (const octave_value& listener)
 { do_cleanup_waitfor_listener (listener, POSTSET); }
 
 static void
 cleanup_waitfor_predelete_listener (const octave_value& listener)
 { do_cleanup_waitfor_listener (listener, PREDELETE); }
 
-static octave_value_list
-waitfor_listener (const octave_value_list& args, int)
+DECLARE_STATIC_FUNX (waitfor_listener, args, )
 {
   if (args.length () > 3)
     {
       uint32_t id = args(2).uint32_scalar_value ().value ();
 
       if (args.length () > 5)
         {
           double h = args(0).double_value ();
@@ -11773,18 +11772,17 @@ waitfor_listener (const octave_value_lis
         }
       else
         waitfor_results[id] = true;
     }
 
   return ovl ();
 }
 
-static octave_value_list
-waitfor_del_listener (const octave_value_list& args, int)
+DECLARE_STATIC_FUNX (waitfor_del_listener, args, )
 {
   if (args.length () > 2)
     {
       uint32_t id = args(2).uint32_scalar_value ().value ();
 
       waitfor_results[id] = true;
     }
 
