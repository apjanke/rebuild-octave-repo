# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465792669 25200
#      Sun Jun 12 21:37:49 2016 -0700
# Node ID a6952c880ceca9278c84728f727afd04b6bc5aa9
# Parent  1315aa0ca46658e81a2679ad4a78f98f5ecd2d62
maint: Use 'auto' in graphics.cc, graphics.in.h files.

* graphics.cc, graphics.in.h: Use 'auto' keyword.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -77,28 +77,25 @@ err_set_invalid (const std::string& pnam
 static caseless_str
 validate_property_name (const std::string& who, const std::string& what,
                         const std::set<std::string>& pnames,
                         const caseless_str& pname)
 {
   size_t len = pname.length ();
   std::set<std::string> matches;
 
-  for (std::set<std::string>::const_iterator p = pnames.begin ();
-       p != pnames.end (); p++)
-    {
-      if (pname.compare (*p, len))
-        {
-          if (len == p->length ())
-            {
-              // Exact match.
-              return pname;
-            }
-
-          matches.insert (*p);
+  // Find exact or partial matches to property name
+  for (const auto& propnm : pnames)
+    {
+      if (pname.compare (propnm, len))
+        {
+          if (len == propnm.length ())
+            return pname;  // Exact match.
+
+          matches.insert (propnm);
         }
     }
 
   size_t num_matches = matches.size ();
 
   if (num_matches == 0)
     error ("%s: unknown %s property %s",
            who.c_str (), what.c_str (), pname.c_str ());
@@ -113,17 +110,16 @@ validate_property_name (const std::strin
       std::string match_list = os.str ();
 
       error ("%s: ambiguous %s property name %s; possible matches:\n\n%s",
              who.c_str (), what.c_str (), pname.c_str (), match_list.c_str ());
     }
   else if (num_matches == 1)
     {
       // Exact match was handled above.
-
       std::string possible_match = *(matches.begin ());
 
       warning_with_id ("Octave:abbreviated-property-match",
                        "%s: allowing %s to match %s property %s",
                        who.c_str (), pname.c_str (), what.c_str (),
                        possible_match.c_str ());
 
       return possible_match;
@@ -1428,18 +1424,19 @@ array_property::validate (const octave_v
         return true;
 
       dim_vector vdims = v.dims ();
       int vlen = vdims.ndims ();
 
       xok = false;
 
       // check dimensional size constraints until a match is found
-      for (std::list<dim_vector>::const_iterator it = size_constraints.begin ();
-           ! xok && it != size_constraints.end (); ++it)
+      for (auto it = size_constraints.cbegin ();
+           ! xok && it != size_constraints.cend ();
+           ++it)
         {
           dim_vector itdims = (*it);
 
           if (itdims.ndims () == vlen)
             {
               xok = true;
 
               for (int i = 0; xok && i < vlen; i++)
@@ -1598,52 +1595,49 @@ children_property::do_get_children (bool
 
   graphics_object go = gh_manager::get_object (0);
 
   root_figure::properties& props =
     dynamic_cast<root_figure::properties&> (go.get_properties ());
 
   if (! props.is_showhiddenhandles ())
     {
-      for (const_children_list_iterator p = children_list.begin ();
-           p != children_list.end (); p++)
-        {
-          graphics_handle kid = *p;
+      for (const auto& hchild : children_list)
+        {
+          graphics_handle kid = hchild;
 
           if (gh_manager::is_handle_visible (kid))
             {
               if (! return_hidden)
-                retval(k++) = *p;
+                retval(k++) = hchild;
             }
           else if (return_hidden)
-            retval(k++) = *p;
+            retval(k++) = hchild;
         }
 
       retval.resize (k, 1);
     }
   else
     {
-      for (const_children_list_iterator p = children_list.begin ();
-           p != children_list.end (); p++)
-        retval(k++) = *p;
+      for (const auto& hchild : children_list)
+        retval(k++) = hchild;
     }
 
   return retval;
 }
 
 void
 children_property::do_delete_children (bool clear)
 {
-  for (children_list_iterator p = children_list.begin ();
-       p != children_list.end (); p++)
-    {
-      graphics_object go = gh_manager::get_object (*p);
+  for (auto& hchild : children_list)
+    {
+      graphics_object go = gh_manager::get_object (hchild);
 
       if (go.valid_object ())
-        gh_manager::free (*p);
+        gh_manager::free (hchild);
     }
 
   if (clear)
     children_list.clear ();
 }
 
 bool
 callback_property::validate (const octave_value& v) const
@@ -2170,20 +2164,18 @@ property_list::as_struct (const std::str
   octave_scalar_map m;
 
   for (plist_map_const_iterator p = begin (); p != end (); p++)
     {
       std::string prefix = prefix_arg + p->first;
 
       const pval_map_type pval_map = p->second;
 
-      for (pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        m.assign (prefix + q->first, q->second);
+      for (const auto& prop_val_p : pval_map)
+        m.assign (prefix + prop_val_p.first, prop_val_p.second);
     }
 
   return m;
 }
 
 // Set properties given as a cs-list of name, value pairs.
 
 void
@@ -2552,22 +2544,21 @@ gh_manager::do_renumber_figure (const gr
   handle_map.erase (p);
 
   handle_map[new_gh] = go;
 
   if (old_gh.value () < 0)
     handle_free_list.insert (std::ceil (old_gh.value ())
                              - make_handle_fraction ());
 
-  for (figure_list_iterator q = figure_list.begin ();
-       q != figure_list.end (); q++)
-    {
-      if (*q == old_gh)
-        {
-          *q = new_gh;
+  for (auto& hfig : figure_list)
+    {
+      if (hfig == old_gh)
+        {
+          hfig = new_gh;
           break;
         }
     }
 }
 
 gh_manager *gh_manager::instance = 0;
 
 static void
@@ -2897,31 +2888,29 @@ xreset_default_properties (graphics_hand
 // ---------------------------------------------------------------------
 
 void
 base_properties::set_from_list (base_graphics_object& bgo,
                                 property_list& defaults)
 {
   std::string go_name = graphics_object_name ();
 
-  property_list::plist_map_const_iterator p = defaults.find (go_name);
-
-  if (p != defaults.end ())
-    {
-      const property_list::pval_map_type pval_map = p->second;
-
-      for (property_list::pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        {
-          std::string pname = q->first;
+  property_list::plist_map_const_iterator plist = defaults.find (go_name);
+
+  if (plist != defaults.end ())
+    {
+      const property_list::pval_map_type pval_map = plist->second;
+
+      for (const auto& prop_val_p : pval_map)
+        {
+          std::string pname = prop_val_p.first;
 
           try
             {
-              bgo.set (pname, q->second);
+              bgo.set (pname, prop_val_p.second);
             }
           catch (octave_execution_exception& e)
             {
               error (e, "error setting default property %s", pname.c_str ());
             }
         }
     }
 }
@@ -3241,28 +3230,28 @@ base_graphics_object::remove_all_listene
         }
     }
 }
 
 void
 base_graphics_object::build_user_defaults_map (property_list::pval_map_type &def, const std::string go_name) const
 {
   property_list local_defaults = get_defaults_list ();
+  const auto it = local_defaults.find (go_name);
   property_list::plist_map_const_iterator p =
     local_defaults.find (go_name);
 
-  if (p != local_defaults.end ())
-    {
-      property_list::pval_map_type pval = p->second;
-      for (property_list::pval_map_const_iterator q = pval.begin ();
-           q != pval.end (); q++)
-        {
-          std::string pname = q->first;
+  if (it != local_defaults.end ())
+    {
+      property_list::pval_map_type pval = it->second;
+      for (const auto& prop_val_p : pval)
+        {
+          std::string pname = prop_val_p.first;
           if (def.find (pname) == def.end ())
-            def[pname] = q->second;
+            def[pname] = prop_val_p.second;
         }
     }
 
   graphics_object parent_go = gh_manager::get_object (get_parent ());
 
   if (parent_go)
     parent_go.build_user_defaults_map (def, go_name);
 }
@@ -9290,23 +9279,21 @@ gh_manager::do_push_figure (const graphi
   do_pop_figure (h);
 
   figure_list.push_front (h);
 }
 
 void
 gh_manager::do_pop_figure (const graphics_handle& h)
 {
-  for (figure_list_iterator p = figure_list.begin ();
-       p != figure_list.end ();
-       p++)
-    {
-      if (*p == h)
-        {
-          figure_list.erase (p);
+  for (auto it = figure_list.begin (); it != figure_list.end (); it++)
+    {
+      if (*it == h)
+        {
+          figure_list.erase (it);
           break;
         }
     }
 }
 
 class
 callback_event : public base_graphics_event
 {
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -857,35 +857,32 @@ public:
   bool contains (const std::string& val, std::string& match)
   {
     size_t k = 0;
 
     size_t len = val.length ();
 
     std::string first_match;
 
-    for (std::set<caseless_str>::const_iterator p = possible_vals.begin ();
-         p != possible_vals.end (); p++)
+    for (const auto& possible_val : possible_vals)
       {
-        if (p->compare (val, len))
+        if (possible_val.compare (val, len))
           {
-            if (len == p->length ())
+            if (len == possible_val.length ())
               {
-                // We found a full match (consider the case of val ==
-                // "replace" with possible values "replace" and
-                // "replacechildren").  Any other matches are
-                // irrelevant, so set match and return now.
-
-                match = *p;
+                // We found a full match (consider the case of val == "replace"
+                // with possible values "replace" and "replacechildren").  Any
+                // other matches are irrelevant, so set match and return now.
+                match = possible_val;
                 return true;
               }
             else
               {
                 if (k == 0)
-                  first_match = *p;
+                  first_match = possible_val;
 
                 k++;
               }
           }
       }
 
     if (k == 1)
       {
@@ -1645,22 +1642,21 @@ public:
 
   void delete_children (bool clear = false)
   {
     do_delete_children (clear);
   }
 
   void renumber (graphics_handle old_gh, graphics_handle new_gh)
   {
-    for (children_list_iterator p = children_list.begin ();
-         p != children_list.end (); p++)
+    for (auto& hchild : children_list)
       {
-        if (*p == old_gh)
+        if (hchild == old_gh)
           {
-            *p = new_gh.value ();
+            hchild = new_gh.value ();
             return;
           }
       }
 
     error ("children_list::renumber: child not found!");
   }
 
 private:
@@ -1735,41 +1731,39 @@ private:
     children_list.clear ();
     for (octave_idx_type i = 0; i < val.numel (); i++)
       children_list.push_front (val.xelem (i));
   }
 
   void do_init_children (const std::list<double>& val)
   {
     children_list.clear ();
-    for (const_children_list_iterator p = val.begin (); p != val.end (); p++)
-      children_list.push_front (*p);
+    children_list = val;
   }
 
   Matrix do_get_children (bool return_hidden) const;
 
   Matrix do_get_all_children (void) const
   {
     Matrix retval (children_list.size (), 1);
     octave_idx_type i = 0;
 
-    for (const_children_list_iterator p = children_list.begin ();
-         p != children_list.end (); p++)
-      retval(i++) = *p;
+    for (const auto& hchild : children_list)
+      retval(i++) = hchild;
+
     return retval;
   }
 
   bool do_remove_child (double child)
   {
-    for (children_list_iterator p = children_list.begin ();
-         p != children_list.end (); p++)
+    for (auto it = children_list.begin (); it != children_list.end (); it++)
       {
-        if (*p == child)
+        if (*it == child)
           {
-            children_list.erase (p);
+            children_list.erase (it);
             return true;
           }
       }
     return false;
   }
 
   void do_adopt_child (double val)
   {
@@ -1953,19 +1947,19 @@ public:
 #endif
 
 private:
   base_property *rep;
 };
 
 // ---------------------------------------------------------------------
 
-typedef std::pair <std::string, octave_value> pval_pair;
-
-class pval_vector : public std::vector <pval_pair>
+typedef std::pair<std::string, octave_value> pval_pair;
+
+class pval_vector : public std::vector<pval_pair>
 {
 public:
   const_iterator find (const std::string pname) const
   {
     const_iterator it;
 
     for (it = (*this).begin (); it != (*this).end (); it++)
       if (pname == (*it).first)
@@ -2014,17 +2008,17 @@ public:
   {
     iterator it = find (pname);
     if (it != (*this).end ())
       erase (it);
   }
 
   void erase (iterator it)
   {
-    std::vector <pval_pair>::erase (it);
+    std::vector<pval_pair>::erase (it);
   }
 
 };
 
 class property_list
 {
 public:
   typedef pval_vector pval_map_type;
@@ -2377,50 +2371,47 @@ private:
     if (p != loaded_toolkits.end ())
       return p->second;
     else
       return graphics_toolkit ();
   }
 
   Cell do_available_toolkits_list (void) const
   {
-    Cell m (1 , available_toolkits.size ());
+    Cell m (1, available_toolkits.size ());
 
     octave_idx_type i = 0;
-    for (const_available_toolkits_iterator p = available_toolkits.begin ();
-         p != available_toolkits.end (); p++)
-      m(i++) = *p;
+    for (const auto& tkit : available_toolkits)
+      m(i++) = tkit;
 
     return m;
   }
 
   Cell do_loaded_toolkits_list (void) const
   {
-    Cell m (1 , loaded_toolkits.size ());
+    Cell m (1, loaded_toolkits.size ());
 
     octave_idx_type i = 0;
-    for (const_loaded_toolkits_iterator p = loaded_toolkits.begin ();
-         p != loaded_toolkits.end (); p++)
-      m(i++) = p->first;
+    for (const auto& nm_tkit_p : loaded_toolkits)
+      m(i++) = nm_tkit_p.first;
 
     return m;
   }
 
   void do_unload_all_toolkits (void)
   {
     while (! loaded_toolkits.empty ())
       {
         loaded_toolkits_iterator p = loaded_toolkits.begin ();
 
         std::string name = p->first;
 
         p->second.close ();
 
-        // The toolkit may have unloaded itself.  If not, we'll do
-        // it here.
+        // The toolkit may have unloaded itself.  If not, we'll do it here.
         if (loaded_toolkits.find (name) != loaded_toolkits.end ())
           unload_toolkit (name);
       }
   }
 
   std::string do_default_toolkit (void) { return dtk; }
 };
 
@@ -6317,17 +6308,18 @@ private:
 
   void do_free (const graphics_handle& h);
 
   void do_renumber_figure (const graphics_handle& old_gh,
                            const graphics_handle& new_gh);
 
   graphics_handle do_lookup (double val)
   {
-    iterator p = (octave::math::isnan (val) ? handle_map.end () : handle_map.find (val));
+    iterator p = (octave::math::isnan (val) ? handle_map.end ()
+                                            : handle_map.find (val));
 
     return (p != handle_map.end ()) ? p->first : graphics_handle ();
   }
 
   graphics_object do_get_object (const graphics_handle& h)
   {
     iterator p = (h.ok () ? handle_map.find (h) : handle_map.end ());
 
@@ -6342,65 +6334,57 @@ private:
 
   graphics_handle do_make_figure_handle (double val, bool do_notify_toolkit);
 
   Matrix do_handle_list (bool show_hidden)
   {
     Matrix retval (1, handle_map.size ());
 
     octave_idx_type i = 0;
-    for (const_iterator p = handle_map.begin (); p != handle_map.end (); p++)
+    for (const auto& h_iter : handle_map)
       {
-        graphics_handle h = p->first;
+        graphics_handle h = h_iter.first;
 
         if (show_hidden || is_handle_visible (h))
           retval(i++) = h.value ();
       }
 
     retval.resize (1, i);
 
     return retval;
   }
 
   Matrix do_figure_handle_list (bool show_hidden)
   {
     Matrix retval (1, figure_list.size ());
 
     octave_idx_type i = 0;
-    for (const_figure_list_iterator p = figure_list.begin ();
-         p != figure_list.end ();
-         p++)
+    for (const auto& hfig : figure_list)
       {
-        graphics_handle h = *p;
-
-        if (show_hidden || is_handle_visible (h))
-          retval(i++) = h.value ();
+        if (show_hidden || is_handle_visible (hfig))
+          retval(i++) = hfig.value ();
       }
 
     retval.resize (1, i);
 
     return retval;
   }
 
   void do_push_figure (const graphics_handle& h);
 
   void do_pop_figure (const graphics_handle& h);
 
   graphics_handle do_current_figure (void) const
   {
     graphics_handle retval;
 
-    for (const_figure_list_iterator p = figure_list.begin ();
-         p != figure_list.end ();
-         p++)
+    for (const auto& hfig : figure_list)
       {
-        graphics_handle h = *p;
-
-        if (is_handle_visible (h))
-          retval = h;
+        if (is_handle_visible (hfig))
+          retval = hfig;
       }
 
     return retval;
   }
 
   void do_lock (void) { graphics_lock.lock (); }
 
   bool do_try_lock (void) { return graphics_lock.try_lock (); }
