# HG changeset patch
# User jwe
# Date 1049749954 0
#      Mon Apr 07 21:12:34 2003 +0000
# Node ID 6e3ec3585cec1c0f3f417614afc36581a091cbe2
# Parent  51cd16a73307a6e1bbf335c983a40af293411e6b
[project @ 2003-04-07 21:12:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2003-04-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dbleSVD.h (SVD::SVD, SVD::operator =): Also copy type_computed.
+	* CmplxSVD.h (ComplexSVD::ComplexSVD, ComplexSVD::operator =):
+	Likewise.
+	From Quentin H. Spencer <qspencer@ieee.org>.
+
 2003-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-getopt.c: Include <kpathsea/getopt.h>, not "getopt.h".
 
 2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-alloc.h (DECLARE_OCTAVE_ALLOCATOR): Handle systems with or
 	without placement delete.
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -47,22 +47,24 @@ public:
 
   ComplexSVD (const ComplexMatrix& a, int& info,
 	      SVD::type svd_type = SVD::std)
     {
       info = init (a, svd_type);
     }
 
   ComplexSVD (const ComplexSVD& a)
-    : sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed),
+      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   ComplexSVD& operator = (const ComplexSVD& a)
     {
       if (this != &a)
 	{
+	  type_computed = a.type_computed;
 	  sigma = a.sigma;
 	  left_sm = a.left_sm;
 	  right_sm = a.right_sm;
 	}
       return *this;
     }
 
   ~ComplexSVD (void) { }
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -49,22 +49,24 @@ public:
   SVD (const Matrix& a, type svd_type = SVD::std) { init (a, svd_type); }
 
   SVD (const Matrix& a, int& info, type svd_type = SVD::std)
     {
       info = init (a, svd_type);
     }
 
   SVD (const SVD& a)
-    : sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed),
+      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   SVD& operator = (const SVD& a)
     {
       if (this != &a)
 	{
+	  type_computed = a.type_computed;
 	  sigma = a.sigma;
 	  left_sm = a.left_sm;
 	  right_sm = a.right_sm;
 	}
 
       return *this;
     }
 
