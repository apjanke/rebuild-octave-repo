# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484681151 18000
#      Tue Jan 17 14:25:51 2017 -0500
# Node ID baf03cdb28b5845af53dc0eb9471fff389f81662
# Parent  b98ebcd7f11cf892ef563dd02fd3a35e2ce86d7a
move pager and diary classes into octave namespace

* pager.h, pager.cc (pager_buf, pager_stream, diary_buf,
diary_stream): Move into octave namespace and rename without octave_
prefix.  Change all uses.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -149,17 +149,17 @@ static void
 verror (bool save_last_error, std::ostream& os,
         const char *name, const char *id, const char *fmt, va_list args,
         bool with_cfn = false)
 {
   if (discard_error_messages && ! Vdebug_on_caught)
     return;
 
   if (! buffer_error_messages || Vdebug_on_caught)
-    flush_octave_stdout ();
+    octave::flush_stdout ();
 
   // FIXME: we really want to capture the message before it has all the
   //        formatting goop attached to it.  We probably also want just the
   //        message, not the traceback information.
 
   std::ostringstream output_buf;
 
   octave_vformat (output_buf, fmt, args);
@@ -380,17 +380,17 @@ maybe_enter_debugger (octave::execution_
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *id, const char *fmt, va_list args)
 {
   if (discard_warning_messages)
     return;
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
   std::ostringstream output_buf;
 
   octave_vformat (output_buf, fmt, args);
 
   // FIXME: we really want to capture the message before it has all the
   //        formatting goop attached to it.  We probably also want just the
   //        message, not the traceback information.
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -292,17 +292,17 @@ always a good idea to flush the standard
 
   octave_value retval = -1;
 
   // FIXME: any way to avoid special case for stdout?
   int fid = octave::stream_list::get_file_number (args(0));
 
   if (fid == 1)
     {
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       retval = 0;
     }
   else
     {
       octave::stream os = octave::stream_list::lookup (fid, "fflush");
 
       retval = os.flush ();
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9921,17 +9921,17 @@ gh_manager::do_process_events (bool forc
   {
     gh_manager::auto_lock guard;
 
     if (event_queue.empty () && event_processing == 0)
       octave::command_editor::remove_event_hook (gh_manager::process_events);
   }
 
   if (events_executed)
-    flush_octave_stdout ();
+    octave::flush_stdout ();
 
   if (Vdrawnow_requested && ! old_Vdrawnow_requested)
     {
       Fdrawnow ();
 
       Vdrawnow_requested = false;
     }
 
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -212,17 +212,17 @@ interactive_input (const std::string& s,
 
           if (! stack_trace.empty ())
             std::cerr << stack_trace;
 
           if (octave::application::interactive ())
             recover_from_exception ();
         }
 
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       // We set Vdrawnow_requested to false even if there is an error in
       // drawnow so that the error doesn't reappear at every prompt.
 
       Vdrawnow_requested = false;
 
       if (eval_error)
         return "\n";
@@ -256,20 +256,20 @@ octave_base_reader::octave_gets (bool& e
   bool history_skip_auto_repeated_debugging_command = false;
 
   std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = octave::command_editor::decode_prompt_string (ps);
 
   octave::pipe_handler_error_count = 0;
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
-  octave_pager_stream::reset ();
-  octave_diary_stream::reset ();
+  octave::pager_stream::reset ();
+  octave::diary_stream::reset ();
 
   octave_diary << prompt;
 
   retval = interactive_input (prompt, eof);
 
   // There is no need to update the load_path cache if there is no
   // user input.
   if (retval != "\n"
@@ -781,20 +781,20 @@ get_user_input (const octave_value_list&
 
   int read_as_string = 0;
 
   if (args.length () == 2)
     read_as_string++;
 
   std::string prompt = args(0).xstring_value ("input: unrecognized argument");
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
-  octave_pager_stream::reset ();
-  octave_diary_stream::reset ();
+  octave::pager_stream::reset ();
+  octave::diary_stream::reset ();
 
   octave_diary << prompt;
 
   bool eof = false;
 
   std::string input_buf = interactive_input (prompt.c_str (), eof);
 
   if (input_buf.empty ())
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -988,17 +988,17 @@ namespace octave
         std::string fcn = octave_atexit_functions.front ();
 
         octave_atexit_functions.pop_front ();
 
         OCTAVE_SAFE_CALL (reset_error_handler, ());
 
         OCTAVE_SAFE_CALL (feval, (fcn, octave_value_list (), 0));
 
-        OCTAVE_SAFE_CALL (flush_octave_stdout, ());
+        OCTAVE_SAFE_CALL (octave::flush_stdout, ());
       }
 
     if (! deja_vu)
       {
         deja_vu = true;
 
         // Process pending events and disasble octave_link event
         // processing with this call.
@@ -1029,26 +1029,26 @@ namespace octave
         OCTAVE_SAFE_CALL (cleanup_tmp_files, ());
 
         OCTAVE_SAFE_CALL (symbol_table::cleanup, ());
 
         OCTAVE_SAFE_CALL (sysdep_cleanup, ());
 
         OCTAVE_SAFE_CALL (octave_finalize_hdf5, ());
 
-        OCTAVE_SAFE_CALL (flush_octave_stdout, ());
+        OCTAVE_SAFE_CALL (octave::flush_stdout, ());
 
         if (! m_quitting_gracefully && octave::application::interactive ())
           {
             octave_stdout << "\n";
 
             // Yes, we want this to be separate from the call to
-            // flush_octave_stdout above.
+            // octave::flush_stdout above.
 
-            OCTAVE_SAFE_CALL (flush_octave_stdout, ());
+            OCTAVE_SAFE_CALL (octave::flush_stdout, ());
           }
 
         // Don't call singleton_cleanup_list::cleanup until we have the
         // problems with registering/unregistering types worked out.  For
         // example, uncomment the following line, then use the make_int
         // function from the examples directory to create an integer
         // object and then exit Octave.  Octave should crash with a
         // segfault when cleaning up the typinfo singleton.  We need some
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -124,25 +124,25 @@ Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       std::string file = args(0).xstring_value ("first argument must be filename");
 
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       retval = octave_link::edit_file (file);
     }
   else if (args.length () == 2)
     {
       std::string file = args(0).xstring_value ("first argument must be filename");
 
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       retval = octave_link::prompt_new_edit_file (file);
     }
 
   return retval;
 }
 
 DEFUN (__octave_link_message_dialog__, args, ,
@@ -154,17 +154,17 @@ Undocumented internal function.
   octave_value retval;
 
   if (args.length () == 3)
     {
       std::string dlg = args(0).xstring_value ("invalid arguments");
       std::string msg = args(1).xstring_value ("invalid arguments");
       std::string title = args(2).xstring_value ("invalid arguments");
 
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       retval = octave_link::message_dialog (dlg, msg, title);
     }
 
   return retval;
 }
 
 DEFUN (__octave_link_question_dialog__, args, ,
@@ -179,17 +179,17 @@ Undocumented internal function.
     {
       std::string msg = args(0).xstring_value ("invalid arguments");
       std::string title = args(1).xstring_value ("invalid arguments");
       std::string btn1 = args(2).xstring_value ("invalid arguments");
       std::string btn2 = args(3).xstring_value ("invalid arguments");
       std::string btn3 = args(4).xstring_value ("invalid arguments");
       std::string btndef = args(5).xstring_value ("invalid arguments");
 
-      flush_octave_stdout ();
+      octave::flush_stdout ();
 
       retval = octave_link::question_dialog (msg, title, btn1, btn2, btn3,
                                              btndef);
     }
 
   return retval;
 }
 
@@ -214,17 +214,17 @@ Undocumented internal function.
   octave_idx_type nel;
   octave_link::filter_list filter_lst;
 
   for (octave_idx_type i = 0; i < flist.rows (); i++)
     filter_lst.push_back (std::make_pair (flist(i,0),
                                           (flist.columns () > 1
                                            ? flist(i,1) : "")));
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
   std::list<std::string> items_lst
     = octave_link::file_dialog (filter_lst, title, filename, pathname,
                                 multi_on);
 
   nel = items_lst.size ();
 
   // If 3, then retval is filename, directory, and selected index.
@@ -294,17 +294,17 @@ Undocumented internal function.
   const Array<std::string> plist = list.cellstr_value ();
   nel = plist.numel ();
   std::list<std::string> prompt_lst;
   for (octave_idx_type i = 0; i < nel; i++)
     prompt_lst.push_back (plist(i));
   std::string ok_string = args(6).string_value ();
   std::string cancel_string = args(7).string_value ();
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
   std::pair<std::list<int>, int> result
     = octave_link::list_dialog (list_lst, mode, width, height,
                                 initial_lst, name, prompt_lst,
                                 ok_string, cancel_string);
 
   std::list<int> items_lst = result.first;
   nel = items_lst.size ();
@@ -346,17 +346,17 @@ Undocumented internal function.
 
   Cell defaults = args(3).cell_value ();
   tmp = defaults.cellstr_value ();
   nel = tmp.numel ();
   std::list<std::string> defaults_lst;
   for (octave_idx_type i = 0; i < nel; i++)
     defaults_lst.push_back (tmp(i));
 
-  flush_octave_stdout ();
+  octave::flush_stdout ();
 
   std::list<std::string> items_lst
     = octave_link::input_dialog (prompt_lst, title, nr, nc,
                                  defaults_lst);
 
   nel = items_lst.size ();
   Cell items (dim_vector (nel, 1));
   octave_idx_type i = 0;
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -225,287 +225,290 @@ more_than_a_screenful (const char *s, in
 
       if (count > available_rows)
         return true;
     }
 
   return false;
 }
 
-int
-octave_pager_buf::sync (void)
-{
-  if (! octave::application::interactive ()
-      || octave::application::forced_interactive ()
-      || really_flush_to_pager
-      || (Vpage_screen_output && Vpage_output_immediately)
-      || ! Vpage_screen_output)
-    {
-      char *buf = eback ();
-
-      int len = pptr () - buf;
-
-      bool bypass_pager = (! octave::application::interactive ()
-                           || octave::application::forced_interactive ()
-                           || ! Vpage_screen_output
-                           || (really_flush_to_pager
-                               && Vpage_screen_output
-                               && ! Vpage_output_immediately
-                               && ! more_than_a_screenful (buf, len)));
-
-      if (len > 0)
-        {
-          do_sync (buf, len, bypass_pager);
-
-          flush_current_contents_to_diary ();
-
-          seekoff (0, std::ios::beg);
-        }
-    }
-
-  return 0;
-}
-
-void
-octave_pager_buf::flush_current_contents_to_diary (void)
-{
-  char *buf = eback () + diary_skip;
-
-  size_t len = pptr () - buf;
-
-  octave_diary.write (buf, len);
-
-  diary_skip = 0;
-}
-
-void
-octave_pager_buf::set_diary_skip (void)
-{
-  diary_skip = pptr () - eback ();
-}
-
-int
-octave_diary_buf::sync (void)
+namespace octave
 {
-  if (write_to_diary_file && external_diary_file)
-    {
-      char *buf = eback ();
-
-      int len = pptr () - buf;
+  int
+  pager_buf::sync (void)
+  {
+    if (! application::interactive ()
+        || application::forced_interactive ()
+        || really_flush_to_pager
+        || (Vpage_screen_output && Vpage_output_immediately)
+        || ! Vpage_screen_output)
+      {
+        char *buf = eback ();
 
-      if (len > 0)
-        external_diary_file.write (buf, len);
-    }
+        int len = pptr () - buf;
 
-  seekoff (0, std::ios::beg);
+        bool bypass_pager = (! application::interactive ()
+                             || application::forced_interactive ()
+                             || ! Vpage_screen_output
+                             || (really_flush_to_pager
+                                 && Vpage_screen_output
+                                 && ! Vpage_output_immediately
+                                 && ! more_than_a_screenful (buf, len)));
 
-  return 0;
-}
+        if (len > 0)
+          {
+            do_sync (buf, len, bypass_pager);
 
-octave_pager_stream *octave_pager_stream::instance = 0;
+            flush_current_contents_to_diary ();
+
+            seekoff (0, std::ios::beg);
+          }
+      }
+
+    return 0;
+  }
 
-octave_pager_stream::octave_pager_stream (void) : std::ostream (0), pb (0)
-{
-  pb = new octave_pager_buf ();
-  rdbuf (pb);
-  setf (unitbuf);
-}
+  void
+  pager_buf::flush_current_contents_to_diary (void)
+  {
+    char *buf = eback () + diary_skip;
+
+    size_t len = pptr () - buf;
+
+    octave_diary.write (buf, len);
 
-octave_pager_stream::~octave_pager_stream (void)
-{
-  flush ();
-  delete pb;
-}
+    diary_skip = 0;
+  }
+
+  void
+  pager_buf::set_diary_skip (void)
+  {
+    diary_skip = pptr () - eback ();
+  }
 
-std::ostream&
-octave_pager_stream::stream (void)
-{
-  return instance_ok () ? *instance : std::cout;
-}
+  int
+  diary_buf::sync (void)
+  {
+    if (write_to_diary_file && external_diary_file)
+      {
+        char *buf = eback ();
+
+        int len = pptr () - buf;
+
+        if (len > 0)
+          external_diary_file.write (buf, len);
+      }
 
-void
-octave_pager_stream::flush_current_contents_to_diary (void)
-{
-  if (instance_ok ())
-    instance->do_flush_current_contents_to_diary ();
-}
+    seekoff (0, std::ios::beg);
+
+    return 0;
+  }
+
+  pager_stream *pager_stream::instance = 0;
+
+  pager_stream::pager_stream (void) : std::ostream (0), pb (0)
+  {
+    pb = new pager_buf ();
+    rdbuf (pb);
+    setf (unitbuf);
+  }
 
-void
-octave_pager_stream::set_diary_skip (void)
-{
-  if (instance_ok ())
-    instance->do_set_diary_skip ();
-}
+  pager_stream::~pager_stream (void)
+  {
+    flush ();
+    delete pb;
+  }
+
+  std::ostream&
+  pager_stream::stream (void)
+  {
+    return instance_ok () ? *instance : std::cout;
+  }
+
+  void
+  pager_stream::flush_current_contents_to_diary (void)
+  {
+    if (instance_ok ())
+      instance->do_flush_current_contents_to_diary ();
+  }
 
-// Reinitialize the pager buffer to avoid hanging on to large internal
-// buffers when they might not be needed.  This function should only be
-// called when the pager is not in use.  For example, just before
-// getting command-line input.
+  void
+  pager_stream::set_diary_skip (void)
+  {
+    if (instance_ok ())
+      instance->do_set_diary_skip ();
+  }
 
-void
-octave_pager_stream::reset (void)
-{
-  if (instance_ok ())
-    instance->do_reset ();
-}
+  // Reinitialize the pager buffer to avoid hanging on to large internal
+  // buffers when they might not be needed.  This function should only be
+  // called when the pager is not in use.  For example, just before
+  // getting command-line input.
+
+  void
+  pager_stream::reset (void)
+  {
+    if (instance_ok ())
+      instance->do_reset ();
+  }
 
-void
-octave_pager_stream::do_flush_current_contents_to_diary (void)
-{
-  if (pb)
-    pb->flush_current_contents_to_diary ();
-}
+  void
+  pager_stream::do_flush_current_contents_to_diary (void)
+  {
+    if (pb)
+      pb->flush_current_contents_to_diary ();
+  }
 
-void
-octave_pager_stream::do_set_diary_skip (void)
-{
-  if (pb)
-    pb->set_diary_skip ();
-}
+  void
+  pager_stream::do_set_diary_skip (void)
+  {
+    if (pb)
+      pb->set_diary_skip ();
+  }
 
-void
-octave_pager_stream::do_reset (void)
-{
-  delete pb;
-  pb = new octave_pager_buf ();
-  rdbuf (pb);
-  setf (unitbuf);
-}
+  void
+  pager_stream::do_reset (void)
+  {
+    delete pb;
+    pb = new pager_buf ();
+    rdbuf (pb);
+    setf (unitbuf);
+  }
 
-bool
-octave_pager_stream::instance_ok (void)
-{
-  bool retval = true;
+  bool
+  pager_stream::instance_ok (void)
+  {
+    bool retval = true;
 
-  if (! instance)
-    {
-      instance = new octave_pager_stream ();
+    if (! instance)
+      {
+        instance = new pager_stream ();
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
+        if (instance)
+          singleton_cleanup_list::add (cleanup_instance);
+      }
 
-  if (! instance)
-    error ("unable to create pager_stream object!");
+    if (! instance)
+      error ("unable to create pager_stream object!");
 
-  return retval;
-}
+    return retval;
+  }
 
-octave_diary_stream *octave_diary_stream::instance = 0;
+  diary_stream *diary_stream::instance = 0;
 
-octave_diary_stream::octave_diary_stream (void) : std::ostream (0), db (0)
-{
-  db = new octave_diary_buf ();
-  rdbuf (db);
-  setf (unitbuf);
-}
+  diary_stream::diary_stream (void) : std::ostream (0), db (0)
+  {
+    db = new diary_buf ();
+    rdbuf (db);
+    setf (unitbuf);
+  }
 
-octave_diary_stream::~octave_diary_stream (void)
-{
-  flush ();
-  delete db;
-}
+  diary_stream::~diary_stream (void)
+  {
+    flush ();
+    delete db;
+  }
 
-std::ostream&
-octave_diary_stream::stream (void)
-{
-  return instance_ok () ? *instance : std::cout;
-}
+  std::ostream&
+  diary_stream::stream (void)
+  {
+    return instance_ok () ? *instance : std::cout;
+  }
 
-// Reinitialize the diary buffer to avoid hanging on to large internal
-// buffers when they might not be needed.  This function should only be
-// called when the pager is not in use.  For example, just before
-// getting command-line input.
+  // Reinitialize the diary buffer to avoid hanging on to large internal
+  // buffers when they might not be needed.  This function should only be
+  // called when the pager is not in use.  For example, just before
+  // getting command-line input.
 
-void
-octave_diary_stream::reset (void)
-{
-  if (instance_ok ())
-    instance->do_reset ();
-}
+  void
+  diary_stream::reset (void)
+  {
+    if (instance_ok ())
+      instance->do_reset ();
+  }
 
-void
-octave_diary_stream::do_reset (void)
-{
-  delete db;
-  db = new octave_diary_buf ();
-  rdbuf (db);
-  setf (unitbuf);
-}
+  void
+  diary_stream::do_reset (void)
+  {
+    delete db;
+    db = new diary_buf ();
+    rdbuf (db);
+    setf (unitbuf);
+  }
 
-bool
-octave_diary_stream::instance_ok (void)
-{
-  bool retval = true;
+  bool
+  diary_stream::instance_ok (void)
+  {
+    bool retval = true;
 
-  if (! instance)
-    {
-      instance = new octave_diary_stream ();
+    if (! instance)
+      {
+        instance = new diary_stream ();
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
+        if (instance)
+          singleton_cleanup_list::add (cleanup_instance);
+      }
 
-  if (! instance)
-    error ("unable to create diary_stream object!");
+    if (! instance)
+      error ("unable to create diary_stream object!");
 
-  return retval;
-}
+    return retval;
+  }
 
-void
-flush_octave_stdout (void)
-{
-  if (! flushing_output_to_pager)
-    {
-      octave::unwind_protect frame;
+  void
+  flush_stdout (void)
+  {
+    if (! flushing_output_to_pager)
+      {
+        unwind_protect frame;
 
-      frame.protect_var (really_flush_to_pager);
-      frame.protect_var (flushing_output_to_pager);
+        frame.protect_var (really_flush_to_pager);
+        frame.protect_var (flushing_output_to_pager);
+
+        really_flush_to_pager = true;
+        flushing_output_to_pager = true;
 
-      really_flush_to_pager = true;
-      flushing_output_to_pager = true;
+        octave_stdout.flush ();
 
-      octave_stdout.flush ();
-
-      clear_external_pager ();
-    }
+        clear_external_pager ();
+      }
+  }
 }
 
 static void
 close_diary_file (void)
 {
   // Try to flush the current buffer to the diary now, so that things
   // like
   //
   // function foo ()
   //   diary on;
   //   ...
   //   diary off;
   // endfunction
   //
   // will do the right thing.
 
-  octave_pager_stream::flush_current_contents_to_diary ();
+  octave::pager_stream::flush_current_contents_to_diary ();
 
   if (external_diary_file.is_open ())
     {
       octave_diary.flush ();
       external_diary_file.close ();
     }
 }
 
 static void
 open_diary_file (void)
 {
   close_diary_file ();
 
   // If there is pending output in the pager buf, it should not go
   // into the diary file.
 
-  octave_pager_stream::set_diary_skip ();
+  octave::pager_stream::set_diary_skip ();
 
   external_diary_file.open (diary_file.c_str (), std::ios::app);
 
   if (! external_diary_file)
     error ("diary: can't open diary file '%s'", diary_file.c_str ());
 }
 
 DEFUN (diary, args, nargout,
@@ -714,9 +717,8 @@ to the pager.
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
 @seealso{PAGER, more, page_screen_output, page_output_immediately}
 @end deftypefn */)
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER_FLAGS);
 }
-
diff --git a/libinterp/corefcn/pager.h b/libinterp/corefcn/pager.h
--- a/libinterp/corefcn/pager.h
+++ b/libinterp/corefcn/pager.h
@@ -26,128 +26,154 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <iosfwd>
 #include <sstream>
 #include <string>
 
 #include <sys/types.h>
 
-class
-OCTINTERP_API
-octave_pager_buf : public std::stringbuf
+namespace octave
 {
-public:
+  class
+  OCTINTERP_API
+  pager_buf : public std::stringbuf
+  {
+  public:
 
-  octave_pager_buf (void) : std::stringbuf (), diary_skip (0) { }
+    pager_buf (void) : std::stringbuf (), diary_skip (0) { }
 
-  void flush_current_contents_to_diary (void);
+    void flush_current_contents_to_diary (void);
 
-  void set_diary_skip (void);
+    void set_diary_skip (void);
 
-protected:
+  protected:
 
-  int sync (void);
+    int sync (void);
 
-private:
+  private:
 
-  size_t diary_skip;
-};
+    size_t diary_skip;
+  };
 
-class
-OCTINTERP_API
-octave_pager_stream : public std::ostream
-{
-protected:
+  class
+  OCTINTERP_API
+  pager_stream : public std::ostream
+  {
+  protected:
 
-  octave_pager_stream (void);
+    pager_stream (void);
+
+  public:
 
-public:
+    // No copying!
+
+    pager_stream (const pager_stream&) = delete;
 
-  // No copying!
+    pager_stream& operator = (const pager_stream&) = delete;
 
-  octave_pager_stream (const octave_pager_stream&) = delete;
+    ~pager_stream (void);
 
-  octave_pager_stream& operator = (const octave_pager_stream&) = delete;
+    static void flush_current_contents_to_diary (void);
 
-  ~octave_pager_stream (void);
+    static void set_diary_skip (void);
 
-  static void flush_current_contents_to_diary (void);
+    static std::ostream& stream (void);
 
-  static void set_diary_skip (void);
+    static void reset (void);
 
-  static std::ostream& stream (void);
+  private:
 
-  static void reset (void);
+    void do_flush_current_contents_to_diary (void);
 
-private:
+    void do_set_diary_skip (void);
 
-  void do_flush_current_contents_to_diary (void);
+    void do_reset (void);
 
-  void do_set_diary_skip (void);
+    static pager_stream *instance;
 
-  void do_reset (void);
+    static bool instance_ok (void);
 
-  static octave_pager_stream *instance;
+    static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  static bool instance_ok (void);
+    pager_buf *pb;
+  };
 
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-
-  octave_pager_buf *pb;
-};
+  class
+  OCTINTERP_API
+  diary_buf : public std::stringbuf
+  {
+  public:
 
-class
-OCTINTERP_API
-octave_diary_buf : public std::stringbuf
-{
-public:
+    diary_buf (void) : std::stringbuf () { }
 
-  octave_diary_buf (void) : std::stringbuf () { }
+  protected:
+
+    int sync (void);
+  };
 
-protected:
+  class
+  OCTINTERP_API
+  diary_stream : public std::ostream
+  {
+  protected:
 
-  int sync (void);
-};
+    diary_stream (void);
+
+  public:
 
-class
-OCTINTERP_API
-octave_diary_stream : public std::ostream
-{
-protected:
+    // No copying!
+
+    diary_stream (const diary_stream&) = delete;
+
+    diary_stream& operator = (const diary_stream&) = delete;
 
-  octave_diary_stream (void);
+    ~diary_stream (void);
 
-public:
+    static std::ostream& stream (void);
+
+    static void reset (void);
 
-  // No copying!
+  private:
+
+    void do_reset (void);
 
-  octave_diary_stream (const octave_diary_stream&) = delete;
+    static diary_stream *instance;
 
-  octave_diary_stream& operator = (const octave_diary_stream&) = delete;
+    static bool instance_ok (void);
 
-  ~octave_diary_stream (void);
+    static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  static std::ostream& stream (void);
+    diary_buf *db;
+  };
 
-  static void reset (void);
+  extern OCTAVE_API void flush_stdout (void);
+}
 
-private:
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-  void do_reset (void);
-
-  static octave_diary_stream *instance;
+OCTAVE_DEPRECATED ("use 'octave::diary_buf' instead")
+typedef octave::diary_buf octave_diary_buf;
 
-  static bool instance_ok (void);
+OCTAVE_DEPRECATED ("use 'octave::diary_stream' instead")
+typedef octave::diary_stream octave_diary_stream;
 
-  static void cleanup_instance (void) { delete instance; instance = 0; }
+OCTAVE_DEPRECATED ("use 'octave::pager_buf' instead")
+typedef octave::pager_buf octave_pager_buf;
 
-  octave_diary_buf *db;
-};
+OCTAVE_DEPRECATED ("use 'octave::pager_stream' instead")
+typedef octave::pager_stream octave_pager_stream;
 
-#define octave_stdout (octave_pager_stream::stream ())
-
-#define octave_diary (octave_diary_stream::stream ())
-
-extern OCTINTERP_API void flush_octave_stdout (void);
+OCTAVE_DEPRECATED ("use 'octave::flush_stdout' instead")
+static inline void
+flush_octave_stdout (void)
+{
+  return octave::flush_stdout ();
+}
 
 #endif
 
+#define octave_stdout (octave::pager_stream::stream ())
+
+#define octave_diary (octave::diary_stream::stream ())
+
+#endif
+
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -813,27 +813,27 @@ clc;
       if (octave::math::isnan (dval))
         warning ("pause: NaN is an invalid delay");
       else
         {
           Fdrawnow ();
 
           if (octave::math::isinf (dval))
             {
-              flush_octave_stdout ();
+              octave::flush_stdout ();
               octave_kbhit ();
             }
           else
             octave_sleep (dval);
         }
     }
   else
     {
       Fdrawnow ();
-      flush_octave_stdout ();
+      octave::flush_stdout ();
       octave_kbhit ();
     }
 
   return ovl ();
 }
 
 /*
 %!test
