# HG changeset patch
# User LYH <lyh.kernel@gmail.com>
# Date 1377228801 -28800
#      Fri Aug 23 11:33:21 2013 +0800
# Node ID 7e425ca58e9c521ad71e05a78bfba7a87ab41af5
# Parent  0122fad2743585ac98c4d6015ffc5a7fc8c42d43
jit compiler: Add fail reason to jit_fail_exceptions

* libinterp/corefcn/pt-jit.cc (jit_convert::visit_*): Add fail reason to all
functions that do not support jit compilation.

diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -227,23 +227,23 @@ jit_convert::jit_convert (octave_user_fu
     final_block->append (factory.create<jit_return> (return_value));
   else
     final_block->append (factory.create<jit_return> ());
 }
 
 void
 jit_convert::visit_anon_fcn_handle (tree_anon_fcn_handle&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_anon_fcn_handle implementation");
 }
 
 void
 jit_convert::visit_argument_list (tree_argument_list&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_argument_list implementation");
 }
 
 void
 jit_convert::visit_binary_expression (tree_binary_expression& be)
 {
   if (be.op_type () >= octave_value::num_binary_ops)
     {
       tree_boolean_expression *boole;
@@ -334,35 +334,35 @@ jit_convert::visit_continue_command (tre
 {
   continues.push_back (block);
   throw jit_break_exception ();
 }
 
 void
 jit_convert::visit_global_command (tree_global_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_global_command implemenation");
 }
 
 void
 jit_convert::visit_persistent_command (tree_persistent_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_persistent_command implementation");
 }
 
 void
 jit_convert::visit_decl_elt (tree_decl_elt&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_decl_elt implementation");
 }
 
 void
 jit_convert::visit_decl_init_list (tree_decl_init_list&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_decl_init_list implementation");
 }
 
 void
 jit_convert::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   // Note we do an initial check to see if the loop will run atleast once.
   // This allows us to get better type inference bounds on variables defined
   // and used only inside the for loop (e.g. the index variable)
@@ -461,47 +461,47 @@ jit_convert::visit_simple_for_command (t
   blocks.push_back (tail);
   finish_breaks (tail, breaks);
   block = tail;
 }
 
 void
 jit_convert::visit_complex_for_command (tree_complex_for_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_complex_for_command implementation");
 }
 
 void
 jit_convert::visit_octave_user_script (octave_user_script&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_octave_user_script implementation");
 }
 
 void
 jit_convert::visit_octave_user_function (octave_user_function&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_octave_user_function implementation");
 }
 
 void
 jit_convert::visit_octave_user_function_header (octave_user_function&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_octave_user_function_header implementation");
 }
 
 void
 jit_convert::visit_octave_user_function_trailer (octave_user_function&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_octave_user_function_trailer implementation");
 }
 
 void
 jit_convert::visit_function_def (tree_function_def&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_function_def implementation");
 }
 
 void
 jit_convert::visit_identifier (tree_identifier& ti)
 {
   if (ti.has_magic_end ())
     {
       if (!end_context.size ())
@@ -515,17 +515,17 @@ jit_convert::visit_identifier (tree_iden
       instr = factory.create<jit_call> (&jit_typeinfo::grab, var);
       result = block->append (instr);
     }
 }
 
 void
 jit_convert::visit_if_clause (tree_if_clause&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_if_clause implementation");
 }
 
 void
 jit_convert::visit_if_command (tree_if_command& cmd)
 {
   tree_if_command_list *lst = cmd.cmd_list ();
   assert (lst); // jwe: Can this be null?
   lst->accept (*this);
@@ -627,35 +627,35 @@ void
 jit_convert::visit_index_expression (tree_index_expression& exp)
 {
   result = resolve (exp);
 }
 
 void
 jit_convert::visit_matrix (tree_matrix&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_matrix implementation");
 }
 
 void
 jit_convert::visit_cell (tree_cell&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_cell implementation");
 }
 
 void
 jit_convert::visit_multi_assignment (tree_multi_assignment&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_multi_assignment implementation");
 }
 
 void
 jit_convert::visit_no_op_command (tree_no_op_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_no_op_command implementation");
 }
 
 void
 jit_convert::visit_constant (tree_constant& tc)
 {
   octave_value v = tc.rvalue1 ();
   jit_type *ty = jit_typeinfo::type_of (v);
 
@@ -676,29 +676,29 @@ jit_convert::visit_constant (tree_consta
     }
   else
     throw jit_fail_exception ("Unknown constant");
 }
 
 void
 jit_convert::visit_fcn_handle (tree_fcn_handle&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_fcn_handle implementation");
 }
 
 void
 jit_convert::visit_funcall (tree_funcall&)
 {
   throw jit_fail_exception ();
 }
 
 void
 jit_convert::visit_parameter_list (tree_parameter_list&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_parameter_list implementation");
 }
 
 void
 jit_convert::visit_postfix_expression (tree_postfix_expression& tpe)
 {
   octave_value::unary_op etype = tpe.op_type ();
   tree_expression *operand = tpe.operand ();
   jit_value *operandv = visit (operand);
@@ -724,23 +724,23 @@ jit_convert::visit_prefix_expression (tr
 
   if (etype == octave_value::op_incr || etype == octave_value::op_decr)
     do_assign (operand, result);
 }
 
 void
 jit_convert::visit_return_command (tree_return_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_return_command implementation");
 }
 
 void
 jit_convert::visit_return_list (tree_return_list&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_return_list implementation");
 }
 
 void
 jit_convert::visit_simple_assignment (tree_simple_assignment& tsa)
 {
   tree_expression *rhs = tsa.right_hand_side ();
   jit_value *rhsv = visit (rhs);
   octave_value::assign_op op = tsa.op_type ();
@@ -808,41 +808,41 @@ jit_convert::visit_statement_list (tree_
       assert (elt);
       elt->accept (*this);
     }
 }
 
 void
 jit_convert::visit_switch_case (tree_switch_case&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_switch_case implementation");
 }
 
 void
 jit_convert::visit_switch_case_list (tree_switch_case_list&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_switch_case_list implementation");
 }
 
 void
 jit_convert::visit_switch_command (tree_switch_command&)
 {
   throw jit_fail_exception ();
 }
 
 void
 jit_convert::visit_try_catch_command (tree_try_catch_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_try_catch_command implementation");
 }
 
 void
 jit_convert::visit_unwind_protect_command (tree_unwind_protect_command&)
 {
-  throw jit_fail_exception ();
+  throw jit_fail_exception ("No visit_unwind_protect_command implementation");
 }
 
 void
 jit_convert::visit_while_command (tree_while_command& wc)
 {
   unwind_protect prot;
   prot.protect_var (breaks);
   prot.protect_var (continues);
