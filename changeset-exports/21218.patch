# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454869144 18000
#      Sun Feb 07 13:19:04 2016 -0500
# Node ID 2bb4e5a6290db17e6d57a8c16f067dd7f1eccfe9
# Parent  2a81f4b7b254d0acf151ecc057953364f65f7a6d
don't include lo-math.h in header files unnecessarily

* DASPK.h, DASRT.h, DASSL.h, LSODE.h, Quad.h, oct-time.h: Don't
include lo-math.h.
* oct-time.cc (octave_time::octave_time (double)): Move definition
here, from oct-time.h.

diff --git a/liboctave/numeric/DASPK.h b/liboctave/numeric/DASPK.h
--- a/liboctave/numeric/DASPK.h
+++ b/liboctave/numeric/DASPK.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_DASPK_h)
 #define octave_DASPK_h 1
 
 #include <cfloat>
 
 #include "DASPK-opts.h"
-#include "lo-math.h"
 
 class
 OCTAVE_API
 DASPK : public DAE, public DASPK_options
 {
 public:
 
   DASPK (void)
diff --git a/liboctave/numeric/DASRT.h b/liboctave/numeric/DASRT.h
--- a/liboctave/numeric/DASRT.h
+++ b/liboctave/numeric/DASRT.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_DASRT_h)
 #define octave_DASRT_h 1
 
 #include <cfloat>
 
 #include "DASRT-opts.h"
-#include "lo-math.h"
 
 class
 DASRT_result
 {
 public:
 
   DASRT_result (void)
     : x (), xdot (), t () { }
diff --git a/liboctave/numeric/DASSL.h b/liboctave/numeric/DASSL.h
--- a/liboctave/numeric/DASSL.h
+++ b/liboctave/numeric/DASSL.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_DASSL_h)
 #define octave_DASSL_h 1
 
 #include <cfloat>
 
 #include "DASSL-opts.h"
-#include "lo-math.h"
 
 class
 OCTAVE_API
 DASSL : public DAE, public DASSL_options
 {
 public:
 
   DASSL (void)
diff --git a/liboctave/numeric/LSODE.h b/liboctave/numeric/LSODE.h
--- a/liboctave/numeric/LSODE.h
+++ b/liboctave/numeric/LSODE.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_LSODE_h)
 #define octave_LSODE_h 1
 
 #include <cfloat>
 
 #include "LSODE-opts.h"
-#include "lo-math.h"
 
 class
 OCTAVE_API
 LSODE : public ODE, public LSODE_options
 {
 public:
 
   LSODE (void)
diff --git a/liboctave/numeric/Quad.h b/liboctave/numeric/Quad.h
--- a/liboctave/numeric/Quad.h
+++ b/liboctave/numeric/Quad.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_Quad_h)
 #define octave_Quad_h 1
 
 #include <cfloat>
 
 #include "dColVector.h"
 #include "fColVector.h"
-#include "lo-math.h"
 
 typedef double (*integrand_fcn) (double x);
 typedef float (*float_integrand_fcn) (float x);
 
 // FIXME: would be nice to not have to have this global variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
 extern OCTAVE_API int quad_integration_error;
diff --git a/liboctave/system/oct-time.cc b/liboctave/system/oct-time.cc
--- a/liboctave/system/oct-time.cc
+++ b/liboctave/system/oct-time.cc
@@ -35,16 +35,23 @@ along with Octave; see the file COPYING.
 #include "strftime.h"
 
 #include "lo-error.h"
 #include "lo-math.h"
 #include "lo-utils.h"
 #include "oct-locbuf.h"
 #include "oct-time.h"
 
+octave_time::octave_time (double d)
+  : ot_unix_time (static_cast<time_t> (d)), ot_usec (0)
+{
+  double ip;
+  ot_usec = static_cast<int> (std::modf (d, &ip) * 1e6);
+}
+
 octave_time::octave_time (const octave_base_tm& tm)
   : ot_unix_time (), ot_usec ()
 {
   struct tm t;
 
   t.tm_sec = tm.sec ();
   t.tm_min = tm.min ();
   t.tm_hour = tm.hour ();
diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -21,18 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_oct_time_h)
 #define octave_oct_time_h 1
 
 #include <ctime>
 #include <string>
 
-#include "lo-math.h"
-
 class octave_base_tm;
 
 class
 OCTAVE_API
 octave_time
 {
 public:
 
@@ -59,22 +57,17 @@ public:
         extra = - (1 + (us - rem) / 1000000);
         rem = 1000000 - us % 1000000;
       }
 
     ot_usec = rem;
     ot_unix_time += extra;
   }
 
-  octave_time (double d)
-    : ot_unix_time (static_cast<time_t> (d)), ot_usec (0)
-  {
-    double ip;
-    ot_usec = static_cast<int> (std::modf (d, &ip) * 1e6);
-  }
+  octave_time (double d);
 
   octave_time (const octave_base_tm& tm);
 
   octave_time (const octave_time& ot)
     : ot_unix_time (ot.ot_unix_time), ot_usec (ot.ot_usec) { }
 
   octave_time& operator = (const octave_time& ot)
   {
