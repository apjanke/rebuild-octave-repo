# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1326950234 28800
#      Wed Jan 18 21:17:14 2012 -0800
# Node ID 190952239c2cf7e062a1b9ef68914f57aa09590d
# Parent  b03b15d507d4f0c0842e01b85c01791b7df7a847
Use '!' for not operation in preference to '~'.

* profexplore.m, inpolygon.m, __gnuplot_drawnow__.m, spline.m: Use '!' for not
operation in preference to '~'.

diff --git a/scripts/general/profexplore.m b/scripts/general/profexplore.m
--- a/scripts/general/profexplore.m
+++ b/scripts/general/profexplore.m
@@ -27,17 +27,17 @@
 ## @seealso{profile, profshow}
 ## @end deftypefn
 
 ## Built-in profiler.
 ## Author: Daniel Kraft <d@domob.eu>
 
 function profexplore (data)
 
-  if (nargin ~= 1)
+  if (nargin != 1)
     print_usage ();
   endif
 
   ## The actual work is done by a recursive worker function, since that
   ## is an easy way to traverse the tree datastructure.  Here, we just check
   ## the arguments (already done) and give over to it.
 
   __profexplore_worker (data.FunctionTable, data.Hierarchical, "Top\n", "  ");
@@ -82,17 +82,17 @@ function rv = __profexplore_worker (fcn_
       rv = 0;
       return;
     elseif (strcmp (cmd, "help"))
       printf ("\nCommands for profile explorer:\n\n");
       printf ("exit   Return to Octave prompt.\n");
       printf ("help   Display this help message.\n");
       printf ("up [N] Go up N levels, where N is an integer.  Default is 1.\n");
       printf ("N      Go down a level into option N.\n");
-    elseif (~isnan (option))
+    elseif (! isnan (option))
       if (option < 1 || option > length (tree))
         printf ("The chosen option is out of range!\n");
       else
         newParents = sprintf ("%s%s%s\n", parents, prefix, strings{option});
         newPrefix = sprintf ("%s  ", prefix);
 
         rv = __profexplore_worker (fcn_table, tree(option).Children, ...
                                    newParents, newPrefix);
@@ -110,17 +110,17 @@ function rv = __profexplore_worker (fcn_
     elseif (length (cmd) >= 2 && strcmp (substr (cmd, 1, 2), "up"))
       if (length (cmd) == 2)
         rv = 1;
         return;
       endif
 
       if (length (cmd) > 3 && cmd(3) == ' ')
         opt = fix (str2double (substr (cmd, 3)));
-        if (~isnan (opt) && opt > 0)
+        if (! isnan (opt) && opt > 0)
           rv = opt;
           return;
         endif
       endif
 
       printf ("Invalid 'up' command.  Type 'help' for further");
       printf (" information.\n");
     else
diff --git a/scripts/geometry/inpolygon.m b/scripts/geometry/inpolygon.m
--- a/scripts/geometry/inpolygon.m
+++ b/scripts/geometry/inpolygon.m
@@ -95,17 +95,17 @@ endfunction
 %! ya=[0:0.1:1.4];
 %! [x,y]=meshgrid(xa,ya);
 %! [in,on]=inpolygon(x,y,xv,yv);
 %!
 %! inside=in & !on;
 %! plot(xv,yv)
 %! hold on
 %! plot(x(inside),y(inside),"@g")
-%! plot(x(~in),y(~in),"@m")
+%! plot(x(!in),y(!in),"@m")
 %! plot(x(on),y(on),"@b")
 %! hold off
 %! disp("Green points are inside polygon, magenta are outside,");
 %! disp("and blue are on boundary.");
 
 %!demo
 %!  xv=[ 0.05840, 0.48375, 0.69356, 1.47478, 1.32158, \
 %!       1.94545, 2.16477, 1.87639, 1.18218, 0.27615, \
@@ -115,21 +115,21 @@ endfunction
 %!       0.18161, 0.78850, 1.13589, 1.33781, 1.04650, \
 %!       0.60628, 0.82096, 0.67155, 0.96114, 1.14833, \
 %!       0.82096, 0.60628];
 %! xa=[0:0.1:2.3];
 %! ya=[0:0.1:1.4];
 %! [x,y]=meshgrid(xa,ya);
 %! [in,on]=inpolygon(x,y,xv,yv);
 %!
-%! inside=in & ~ on;
+%! inside=in & !on;
 %! plot(xv,yv)
 %! hold on
 %! plot(x(inside),y(inside),"@g")
-%! plot(x(~in),y(~in),"@m")
+%! plot(x(!in),y(!in),"@m")
 %! plot(x(on),y(on),"@b")
 %! hold off
 %! disp("Green points are inside polygon, magenta are outside,");
 %! disp("and blue are on boundary.");
 
 %!error inpolygon ();
 %!error inpolygon (1, 2);
 %!error inpolygon (1, 2, 3);
diff --git a/scripts/plot/__gnuplot_drawnow__.m b/scripts/plot/__gnuplot_drawnow__.m
--- a/scripts/plot/__gnuplot_drawnow__.m
+++ b/scripts/plot/__gnuplot_drawnow__.m
@@ -142,17 +142,17 @@ function enhanced = gnuplot_set_term (pl
       enh_str = "enhanced";
     else
       enh_str = "";
     endif
 
     if (! isempty (h) && isfigure (h))
 
       ## Generate gnuplot title string for plot windows.
-      if (output_to_screen (term) && ~strcmp (term, "dumb"))
+      if (output_to_screen (term) && ! strcmp (term, "dumb"))
         fig.numbertitle = get (h, "numbertitle");
         fig.name = strrep (get (h, "name"), "\"", "\\\"");
         if (strcmpi (get (h, "numbertitle"), "on"))
           title_str = sprintf ("Figure %d", h);
         else
           title_str = "";
         endif
         if (! isempty (fig.name) && ! isempty (title_str))
@@ -205,17 +205,17 @@ function enhanced = gnuplot_set_term (pl
           endif
           switch (term)
           case terminals_with_size
             size_str = sprintf ("size %.12g,%.12g", gnuplot_size);
           case "tikz"
             size_str = sprintf ("size %gin,%gin", gnuplot_size);
           case "dumb"
             new_stream = 1;
-            if (~isempty (getenv ("COLUMNS")) && ~isempty (getenv ("LINES")))
+            if (! isempty (getenv ("COLUMNS")) && ! isempty (getenv ("LINES")))
               ## Let dumb use full text screen size (minus prompt lines).
               n = sprintf ("%i", -2 - length (find (sprintf ("%s", PS1) == "\n")));
               ## n = the number of times \n appears in PS1
               size_str = ["size ", getenv("COLUMNS"), ",", getenv("LINES"), n];
             else
               ## Use the gnuplot default.
               size_str = "";
             endif
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -102,17 +102,17 @@ function ret = spline (x, y, xi)
   complete = false;
   if (size (a, 1) == n + 2)
     complete = true;
     dfs = a(1,:);
     dfe = a(end,:);
     a = a(2:end-1,:);
   endif
 
-  if (~issorted (x))
+  if (! issorted (x))
     [x, idx] = sort(x);
     a = a(idx,:);
   endif
 
   b = c = zeros (size (a));
   h = diff (x);
   idx = ones (columns (a), 1);
 
