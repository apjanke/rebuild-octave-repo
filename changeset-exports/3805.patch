# HG changeset patch
# User jwe
# Date 983465673 0
#      Thu Mar 01 16:54:33 2001 +0000
# Node ID 44386b0e53da4931814ae9f4ebd45854afad264a
# Parent  4073be5aefa1299729e7f6ee0dcf8abd633d844a
[project @ 2001-03-01 16:54:31 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.341 $)
+AC_REVISION($Revision: 1.342 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -848,18 +848,27 @@ AC_SUBST(OCTAVE_LITE)
 ### special checks for odd OS specific things.
 ###
 ### I am told that on some SCO systems, the only place to find some
 ### functions like gethostname and gettimeofday is in libsocket.
 
 AC_ISC_POSIX
 AC_MINIX
 AC_AIX
-AC_CHECK_FUNC(getpwnam, , AC_CHECK_LIB(sun, getpwnam))
-AC_CHECK_FUNC(gethostname, , AC_CHECK_LIB(socket, gethostname))
+AC_CHECK_FUNCS(gethostname getpwnam)
+if test "$ac_cv_func_gethostname" = yes; then
+  true
+else
+  AC_CHECK_LIB(socket, gethostname)
+fi
+if test "$ac_cv_func_getpwnam" = yes; then
+  true
+else
+  AC_CHECK_LIB(sun, getpwnam)
+fi
 
 ### How big are ints and how are they oriented?  These could probably
 ### be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF(short, 2)
 AC_CHECK_SIZEOF(int, 4)
 AC_CHECK_SIZEOF(long, 4)
 AC_CHECK_SIZEOF(long long, 8)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,61 @@
 2001-02-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt.h (tree::break_statement): New static member.
+	(tree::break_function): Make const.
+	* pt.cc (tree::break_statement): Initialize here.
+	(tree::break_function): Make const.
+	* pb-bp.h (break_statement): Delete global varaible declaration.
+	* pt-bp.cc (break_statement): Delete global variable definition.
+
+	* pt-bp.h (tree_breakpoint::bp_list): Rename from lst.
+
+	* pt.h: Don't inlcude ov-usr-fcn.h.
+	Provide forward declaration of octave_user_function class.
+
+2001-02-28  Ben Sapp  <bsapp@lanl.gov>
+
+	* debug.cc (get_user_function): Simplify by using curr_function.
+	(Fdbg_where): New function.
+	(Fdbg_list): Now DLD_TEXT instead of DLD_FCN.
+	(Fdbg_set): Likewise.
+	(Fdbg_delete): Likewise. 
+
+	* pt-bp.h (break_statement): New global variable.
+	(MAYBE_DO_BREAKPOINT): Check for dbg_next and dbg_step.
+	Print line, column, and current statement.
+	* pt-bp.cc (break_statement): New global variable
+	(tree_breakpoint::visit_do_until_command): Return immediately if
+	we've already found the line.
+	(tree_breakpoint::visit_colon_expression): Set breakpoint info here.
+	(tree_breakpoint::visit_binary_expression): Recurse here when
+	checking for breakpoints.
+
+	* debug.cc: Move here from DLD-FUNCTIONS/debug.cc.
+	* Makefile.in (DIST_SRC): Add it to the list.
+	(DLD_XSRC): Delete it from the list.
+
+	* pt.h (tree::last_line, tree::break_function): New static members.
+	* pt.cc(tree::last_line, tree::break_function): Initialize them.
+
+	* pt-cell.h (tree_cell::tree_cell): Accept line and column info.
+	* pt-mat.h (tree_matrix::tree_matrix): Likewise.
+
+	* ov-usr-fcn.h (octave_user_function::sym_tab): Delete.
+
+	* input.cc (get_user_input): Handle dbg_next.
+	Set tree:break_function and tree::last_line when doing dbg_step.
+
+2001-02-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (handle_string): Save line and column information in token.
+	(is_keyword): Save line and column information for plot style and
+	axes tokens.
+
 	* toplev.cc (main_loop): Set retval to non-zero value if error
 	occurs when not interactive.
 
 2001-02-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (gobble_leading_white_space): Handle CRLF here too.
 	* lex.l (check_for_garbage_after_fcn_def): Likewise.
 
diff --git a/src/DLD-FUNCTIONS/debug.cc b/src/DLD-FUNCTIONS/debug.cc
deleted file mode 100644
--- a/src/DLD-FUNCTIONS/debug.cc
+++ /dev/null
@@ -1,331 +0,0 @@
-/*
-
-Copyright (C) 2001 Ben Sapp
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "error.h"
-#include "input.h"
-#include "pager.h"
-#include "oct-obj.h"
-#include "utils.h"
-#include "parse.h"
-#include "symtab.h"
-#include "gripes.h"
-#include "ov.h"
-#include "ov-usr-fcn.h"
-#include "ov-fcn.h"
-#include "pt-pr-code.h"
-#include "pt-stmt.h"
-#include "toplev.h"
-#include "unwind-prot.h"
-#include "variables.h"
-#include "defun-dld.h"
-#include "defun-int.h"
-
-octave_user_function *
-get_user_function (std::string str = "")
-{
-  octave_user_function *dbg_fcn = NULL;
-
-  if (curr_sym_tab != top_level_sym_tab)
-    {
-      Array<symbol_record *> srs =  
-	top_level_sym_tab->symbol_list ("*",
-					symbol_record::USER_FUNCTION,
-					SYMTAB_ALL_SCOPES);
-      int len = srs.length ();
-      
-      for (int i = 0; i < len ; i++)
-	{
-	  symbol_record *ptr = srs(i);
-	  
-	  if (ptr && ptr->is_user_function ())
-	    {
-	      octave_value tmp = ptr->def ();
-	      octave_user_function *tmp_fcn
-		= static_cast<octave_user_function *> (tmp.function_value ());
-	      symbol_table *st = tmp_fcn->sym_table ();
-
-	      if (st == curr_sym_tab)
-		{
-		  dbg_fcn = tmp_fcn;
-		  break;
-		}
-	    }
-	}
-
-    }
-  else if (str.compare (""))
-    {
-      symbol_record *ptr = curr_sym_tab->lookup (str);
-      
-      if (ptr && ptr->is_user_function ())
-	{
-	  octave_value tmp = ptr->def ();
-	  dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
-	}
-      else
-	{
-	  symbol_record *ptr = lookup_by_name (str, false);
-	  
-	  if (ptr && ptr->is_user_function ())
-	    {
-	      octave_value tmp = ptr->def ();
-	      dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
-	    }
-	}
-    }
-
-  return dbg_fcn;
-}
-
-DEFUN_DLD (dbg_set, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {rline =} dbg_set (func, line)\n\
-Set a breakpoint in a function\n\
-@table @code\n\
-@item func\n\
-String representing the function name.  When already in debug\n\
-mode this should be left out and only the line should be given.\n\
-@item line\n\
-Line you would like the breakpoint to be set on\n\
-@end table\n\
-\n\
-The rline returned is the real line that the breakpoint was set at.\n\
-\n\
-@end deftypefn\n\
-@seealso{dbg_delete, dbg_list, dbg_cont}")
-{
-  octave_value_list retval;
-  int result = -1;
-  int nargin = args.length ();
-
-  if (nargin == 2)
-    { 
-      if (!args(0).is_string ())
-	{
-	  gripe_wrong_type_arg ("dbg_set", args(0));
-	  return retval;
-	}
-
-      std::string symbol_name = args(0).string_value ();
-      
-      if (!args(1).is_real_scalar ())
-	{
-	  gripe_wrong_type_arg ("dbg_set", args(1));
-	  return retval;
-	}
-
-      int line = int(args(1).double_value ());
-      octave_user_function *dbg_fcn = get_user_function (symbol_name);
-
-      if (dbg_fcn)
-	{
-	  tree_statement_list *cmds = dbg_fcn->body ();
-	  result = cmds->set_breakpoint (line);
-	}
-      else
-	error ("unable to find the function requested\n");
-    }
-  else if (nargin == 1)
-    {
-      if (!args(0).is_real_scalar ())
-	{
-	  gripe_wrong_type_arg ("dbg_set", args(1));
-	  return retval;
-	}
-
-      int line = int(args(0).double_value ());
-      octave_user_function *dbg_fcn = get_user_function ();
-      
-      if (dbg_fcn)
-	{
-	  tree_statement_list *cmds = dbg_fcn->body ();
-	  result = cmds->set_breakpoint (line);
-	}
-      else
-	error ("unable to find the function requested\n");	 
-    }
-  else
-    error ("one argument when in a function and two when not.\n");
-
-  retval = double(result);
-  return retval;
-}
-
-DEFUN_DLD (dbg_delete, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbg_delete (func, line)\n\
-Delete a breakpoint in a function\n\
-@table @code\n\
-@item func\n\
-String representing the function name.  When already in debug\n\
-mode this should be left out and only the line should be given.\n\
-@item line\n\
-Line where you would like to remove the the breakpoint\n\
-@end table\n\
-No checking is done to make sure that the line you requested is really\n\
-a breakpoint.   If you get the wrong line nothing will happen.\n\
-@end deftypefn\n\
-@seealso{dbg_delete, dbg_list, dbg_cont}")
-{
-  octave_value_list retval;
-  int line = -1;
-  std::string symbol_name = "";
-  int nargin = args.length ();
-  
-  if ((nargin != 1) && (nargin != 2))
-    {
-      error ("need one or two arguements\n");
-      return retval;
-    }
-  
-  if (nargin == 2)
-    {
-      if (!args(0).is_string ())
-	{
-	  gripe_wrong_type_arg ("dbg_delete", args(0));
-	  return retval;
-	}
-
-      std::string symbol_name = args(0).string_value ();
-      
-      if (!args(1).is_real_scalar ())
-	{
-	  gripe_wrong_type_arg ("dbg_delete", args(1));
-	  return retval;
-	}
-
-      line = int(args(1).double_value ());
-    }
-  else if (nargin == 1)
-    {
-      if (!args(1).is_real_scalar ())
-	{
-	  gripe_wrong_type_arg ("dbg_delete", args(1));
-	  return retval;
-	}
-
-      line = int(args(1).double_value ());      
-    }
-  else
-    {
-      error ("need one or two arguements\n");
-      return retval;
-    }
-
-  octave_user_function *dbg_fcn = get_user_function (symbol_name);
-  
-  if (dbg_fcn)
-    {
-      tree_statement_list *cmds = dbg_fcn->body ();
-      cmds->delete_breakpoint (line);
-    }
-  else
-    error ("unable to find the function requested\n");
-  return retval;
-}
-
-DEFUN_DLD (dbg_list, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {lst =} dbg_list ([func])\n\
-Return a vector containing the lines on which a function has \n\
-breakpoints set.\n\
-@table @code\n\
-@item func\n\
-String representing the function name.  When already in debug\n\
-mode this should be left out.\n\
-@end table\n\
-@end deftypefn\n\
-@seealso{dbg_delete, dbg_set, dbg_cont}")
-{
-  octave_value_list retval;
-  octave_value_list lst;
-  RowVector vec;
-  int nargin = args.length ();
-
-  if ((nargin != 0) && (nargin != 1))
-    {
-      error ("only zero or one arguements accepted\n");
-      return retval;
-    }
-
-  std::string symbol_name = "";
-
-  if (nargin == 1)
-    {
-      if (args(0).is_string ())
-	symbol_name = args(0).string_value ();
-      else
-	gripe_wrong_type_arg ("dbg_list", args(0));
-    }
-
-  octave_user_function *dbg_fcn = get_user_function (symbol_name);
- 
-  if (dbg_fcn)
-    {
-      tree_statement_list *cmds = dbg_fcn->body ();
-      lst = cmds->list_breakpoints ();
-      vec = RowVector (lst.length (), 0.0);
-
-      for (int i = 0; i < lst.length (); i++)
-	{ 
-	  if(lst(i).is_real_scalar ())
-	    {
-	      double x = lst(i).double_value ();
-
-	      if (! error_state)
-		vec(i) = x;
-	      else
-		panic_impossible ();
-	    }
-	  else
-	    panic_impossible ();
-	}
-    }
-  else
-    error ("unable to find the function you requested");
-
-  return octave_value(vec);
-}
-
-
-DEFUN_DLD (dbg_where, , ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbg_where ()\n\
-Show where we are in the code\n\
-@end deftypefn\n")
-{
-  octave_value retval;
-
-  warning ("not implemented");
-
-  return retval;
-}
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -35,17 +35,17 @@ ifeq ($(OCTAVE_LITE), true)
 	  $(SH_LD) $(SH_LDFLAGS) -o $@ $<
   else
     %.oct : %.o
 	  $(SH_LD) $(SH_LDFLAGS) -o $@ $<
   endif
 endif
 
 DLD_XSRC := balance.cc besselj.cc betainc.cc chol.cc colloc.cc dassl.cc \
-	debug.cc det.cc eig.cc expm.cc fft.cc fft2.cc filter.cc find.cc \
+	det.cc eig.cc expm.cc fft.cc fft2.cc filter.cc find.cc \
 	fsolve.cc gammainc.cc getgrent.cc getpwent.cc getrusage.cc \
 	givens.cc hess.cc ifft.cc ifft2.cc inv.cc log.cc lpsolve.cc \
 	lsode.cc lu.cc minmax.cc pinv.cc qr.cc quad.cc qz.cc rand.cc \
 	schur.cc sort.cc svd.cc syl.cc time.cc
 
 DLD_SRC := $(addprefix DLD-FUNCTIONS/, $(DLD_XSRC))
 
 DLD_OBJ := $(patsubst %.cc, %.o, $(DLD_XSRC))
@@ -117,17 +117,17 @@ OV_SRC := ov-base.cc ov-base-mat.cc ov-b
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc pt-cell.cc \
 	pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc \
 	pt-except.cc pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
 	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
 	pt-select.cc pt-stmt.cc pt-unop.cc
 
 DIST_SRC := BaseSLList.cc Cell.cc DLList.cc Map.cc SLList.cc \
 	SLStack.cc Stack.cc c-file-ptr-stream.cc comment-list.cc \
-	cutils.c data.cc \
+	cutils.c data.cc debug.cc \
 	defaults.cc defun.cc dirfns.cc dynamic-ld.cc error.cc \
 	file-io.cc fn-cache.cc gripes.cc help.cc input.cc lex.l \
 	load-save.cc mappers.cc matherr.c oct-fstrm.cc oct-hist.cc \
 	oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	oct-lvalue.cc pager.cc parse.y pr-output.cc procstream.cc \
 	sighandlers.cc siglist.c strcasecmp.c strncase.c strfns.cc \
 	symtab.cc syscalls.cc sysdep.cc system.c token.cc toplev.cc \
diff --git a/src/debug.cc b/src/debug.cc
new file mode 100644
--- /dev/null
+++ b/src/debug.cc
@@ -0,0 +1,317 @@
+/*
+
+Copyright (C) 2001 Ben Sapp
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "defun.h"
+#include "error.h"
+#include "input.h"
+#include "pager.h"
+#include "oct-obj.h"
+#include "utils.h"
+#include "parse.h"
+#include "symtab.h"
+#include "gripes.h"
+#include "ov.h"
+#include "ov-usr-fcn.h"
+#include "ov-fcn.h"
+#include "pt-pr-code.h"
+#include "pt.h"
+#include "pt-bp.h"
+#include "pt-stmt.h"
+#include "toplev.h"
+#include "unwind-prot.h"
+#include "variables.h"
+
+octave_user_function *
+get_user_function (std::string str = "")
+{
+  octave_user_function *dbg_fcn = NULL;
+
+  if (curr_function)
+    {
+      dbg_fcn = curr_function;
+    }
+  else if (str.compare (""))
+    {
+      symbol_record *ptr = curr_sym_tab->lookup (str);
+      
+      if (ptr && ptr->is_user_function ())
+	{
+	  octave_value tmp = ptr->def ();
+	  dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
+	}
+      else
+	{
+	  symbol_record *ptr = lookup_by_name (str, false);
+	  
+	  if (ptr && ptr->is_user_function ())
+	    {
+	      octave_value tmp = ptr->def ();
+	      dbg_fcn = static_cast<octave_user_function *> (tmp.function_value ());
+	    }
+	}
+    }
+
+  return dbg_fcn;
+}
+
+DEFUN_TEXT (dbg_set, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {rline =} dbg_set (func, line)\n\
+Set a breakpoint in a function\n\
+@table @code\n\
+@item func\n\
+String representing the function name.  When already in debug\n\
+mode this should be left out and only the line should be given.\n\
+@item line\n\
+Line you would like the breakpoint to be set on\n\
+@end table\n\
+\n\
+The rline returned is the real line that the breakpoint was set at.\n\
+\n\
+@end deftypefn\n\
+@seealso{dbg_delete, dbg_list, dbg_where}")
+{
+  octave_value retval;
+
+  int result = -1;
+  int nargin = args.length ();
+  
+  string_vector argv = args.make_argv ("dbg_set");
+
+  if (error_state)
+    return retval;
+
+  if (nargin == 2)
+    { 
+      std::string symbol_name = argv[1];
+
+      std::string line_number = argv[2];
+
+      int line = atoi (line_number.c_str ());
+      
+      octave_user_function *dbg_fcn = get_user_function (symbol_name);
+
+      if (dbg_fcn)
+	{
+	  tree_statement_list *cmds = dbg_fcn->body ();
+	  result = cmds->set_breakpoint (line);
+	}
+      else
+	error ("unable to find the function requested\n");
+    }
+  else if (nargin == 1)
+    {
+      std::string line_number = argv[1];
+
+      int line = atoi (line_number.c_str ());
+
+      octave_user_function *dbg_fcn = get_user_function ();
+      
+      if (dbg_fcn)
+	{
+	  tree_statement_list *cmds = dbg_fcn->body ();
+	  result = cmds->set_breakpoint (line);
+	}
+      else
+	error ("unable to find the function requested\n");	 
+    }
+  else
+    error ("one argument when in a function and two when not\n");
+
+  retval = static_cast<double> (result);
+
+  return retval;
+}
+
+DEFUN_TEXT (dbg_delete, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} dbg_delete (func, line)\n\
+Delete a breakpoint in a function\n\
+@table @code\n\
+@item func\n\
+String representing the function name.  When already in debug\n\
+mode this should be left out and only the line should be given.\n\
+@item line\n\
+Line where you would like to remove the the breakpoint\n\
+@end table\n\
+No checking is done to make sure that the line you requested is really\n\
+a breakpoint.   If you get the wrong line nothing will happen.\n\
+@end deftypefn\n\
+@seealso{dbg_set, dbg_list, dbg_where}")
+{
+  octave_value retval;
+
+  std::string symbol_name = "";
+
+  int line = -1;
+  int nargin = args.length ();
+  
+  if (nargin != 1 && nargin != 2)
+    {
+      error ("need one or two arguements\n");
+      return retval;
+    }
+  
+  string_vector argv = args.make_argv ("dbg_delete");
+
+  if (error_state)
+    return retval;
+
+  if (nargin == 2)
+    {
+      octave_stdout << "2 input arguments\n";
+      symbol_name = argv[1];
+ 
+      octave_stdout << argv[1] << std::endl;
+      std::string line_number = argv[2];
+
+      line = atoi (line_number.c_str ());     
+    }
+  else if (nargin == 1)
+    {
+      octave_stdout << "1 input argument\n";
+      std::string line_number = argv[1];
+
+      line = atoi (line_number.c_str ());     
+    }
+  else
+    {
+      error ("need one or two arguements\n");
+      return retval;
+    }
+
+  octave_stdout << "symbol_name = " << symbol_name << std::endl;
+  octave_user_function *dbg_fcn = get_user_function (symbol_name);
+  
+  if (dbg_fcn)
+    {
+      tree_statement_list *cmds = dbg_fcn->body ();
+      cmds->delete_breakpoint (line);
+    }
+  else
+    error ("unable to find the function requested\n");
+
+  return retval;
+}
+
+DEFUN_TEXT (dbg_list, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {lst =} dbg_list ([func])\n\
+Return a vector containing the lines on which a function has \n\
+breakpoints set.\n\
+@table @code\n\
+@item func\n\
+String representing the function name.  When already in debug\n\
+mode this should be left out.\n\
+@end table\n\
+@end deftypefn\n\
+@seealso{dbg_delete, dbg_set, dbg_where}")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 0 && nargin != 1)
+    {
+      error ("only zero or one arguements accepted\n");
+      return retval;
+    }
+
+  std::string symbol_name = "";
+
+  if (nargin == 1)
+    {
+      if (args(0).is_string ())
+	symbol_name = args(0).string_value ();
+      else
+	gripe_wrong_type_arg ("dbg_list", args(0));
+    }
+
+  octave_user_function *dbg_fcn = get_user_function (symbol_name);
+ 
+  if (dbg_fcn)
+    {
+      tree_statement_list *cmds = dbg_fcn->body ();
+
+      octave_value_list lst = cmds->list_breakpoints ();
+
+      RowVector vec (lst.length (), 0.0);
+
+      for (int i = 0; i < lst.length (); i++)
+	{ 
+	  vec(i) = lst(i).double_value ();
+
+	  if (error_state)
+	    panic_impossible ();
+	}
+
+      retval = octave_value (vec);
+    }
+  else
+    error ("unable to find the function you requested\n");
+
+  return retval;
+}
+
+
+DEFUN_TEXT (dbg_where, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} dbg_where ()\n\
+Show where we are in the code\n\
+@end deftypefn\n\
+@seealso{dbg_delete, dbg_list, dbg_set}")
+{
+  octave_value retval;
+  
+  octave_user_function *dbg_fcn = curr_function;
+
+  if (dbg_fcn)
+    {
+      std::string name = dbg_fcn->function_name ();
+
+      octave_stdout << name << ":";
+
+      const tree *dbg_stmt = tree::break_statement;
+
+      if (dbg_stmt)
+	{
+	  octave_stdout << "line " << dbg_stmt->line () << ", "; 
+	  octave_stdout << "column " << dbg_stmt->column () << std::endl;
+	}
+      else
+	octave_stdout << "-1\n";
+    }
+  else
+    error ("must be inside of a user function to use dbg_where\n");
+
+  return retval;
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -55,16 +55,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-hist.h"
 #include "toplev.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathlen.h"
 #include "pt.h"
 #include "pt-const.h"
+#include "pt-stmt.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Primary prompt string.
@@ -548,16 +549,31 @@ get_user_input (const octave_value_list&
 	      || match_sans_spaces ("return", input_buf)
 	      || match_sans_spaces ("dbg_cont", input_buf))
 	    {
 	      return retval;
 	    }
 	  else if (match_sans_spaces ("dbg_step", input_buf))
 	    {
 	      tree::break_next = true;
+
+	      tree::last_line = 0;
+
+	      tree::break_function = curr_function;
+
+	      return retval;
+	    }
+	  else if (match_sans_spaces ("dbg_next", input_buf))
+	    {
+	      tree::break_next = true;
+
+	      tree::last_line = curr_statement->line ();
+
+	      tree::break_function = curr_function;
+
 	      return retval;
 	    }
 	}
 
       if (read_as_string)
 	{
 	  // XXX FIXME XXX -- fix gnu_readline and octave_gets instead!
 	  if (input_buf.length () == 1 && input_buf[0] == '\n')
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -985,47 +985,47 @@ is_plot_keyword (const std::string& s)
     }
 }
 
 // Handle keywords.
 
 static int
 is_keyword (const std::string& s)
 {
+  int l = input_line_number;
+  int c = current_input_column;
+
   if (lexer_flags.plotting)
     {
       if (lexer_flags.in_plot_style)
 	{
 	  std::string sty = plot_style_token (s);
 
 	  if (! sty.empty ())
 	    {
 	      lexer_flags.in_plot_style = false;
-	      yylval.tok_val = new token (sty);
+	      yylval.tok_val = new token (sty, l, c);
 	      token_stack.push (yylval.tok_val);
 	      return STYLE;
 	    }
 	}
       else if (lexer_flags.in_plot_axes)
 	{
 	  std::string axes = plot_axes_token (s);
 
 	  if (! axes.empty ())
 	    {
 	      lexer_flags.in_plot_axes = false;
-	      yylval.tok_val = new token (axes);
+	      yylval.tok_val = new token (axes, l, c);
 	      token_stack.push (yylval.tok_val);
 	      return AXES_TAG;
 	    }
 	}	
     }
 
-  int l = input_line_number;
-  int c = current_input_column;
-
   int len = s.length ();
 
   const octave_kw *kw = octave_kw_lookup (s.c_str (), len);
 
   if (kw)
     {
       yylval.tok_val = 0;
 
@@ -1880,16 +1880,19 @@ eat_continuation (void)
   return retval;
 }
 
 static int
 handle_string (char delim, int text_style)
 {
   std::ostrstream buf;
 
+  int bos_line = input_line_number;
+  int bos_col = current_input_column;
+
   int c;
   int escape_pending = 0;
 
   while ((c = yyinput ()) != EOF)
     {
       current_input_column++;
 
       if (c == '\\')
@@ -1944,17 +1947,17 @@ handle_string (char delim, int text_styl
 		    }
 		  else
 		    {
 		      lexer_flags.quote_is_transpose = true;
 		      lexer_flags.cant_be_identifier = true;
 		      lexer_flags.convert_spaces_to_comma = true;
 		    }
 
-		  yylval.tok_val = new token (s);
+		  yylval.tok_val = new token (s, bos_line, bos_col);
 		  token_stack.push (yylval.tok_val);
 
 		  if (delim == '\'')
 		    gripe_single_quote_string ();
 
 		  return TEXT;
 		}
 	    }
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -128,18 +128,16 @@ public:
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
-  symbol_table *sym_table (void) { return sym_tab; }
-
   void accept (tree_walker& tw);
 
 private:
 
   octave_user_function (void);
 
   octave_user_function (const octave_user_function& m);
 
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -46,17 +46,17 @@ tree_breakpoint::take_action (tree &tr)
     {
       tr.delete_breakpoint ();
       found = true;
     }
   else if (act == list)
     {
       if (tr.is_breakpoint ())
 	{
-	  lst.append (octave_value (static_cast<double> (tr.line ())));
+	  bp_list.append (octave_value (static_cast<double> (tr.line ())));
 	  line = tr.line () + 1;
 	}
     }
   else
     panic_impossible ();
 
   return;
 }
@@ -79,21 +79,24 @@ tree_breakpoint::visit_while_command (tr
 
   if (list)
     list->accept (*this);
 }
 
 void
 tree_breakpoint::visit_do_until_command (tree_do_until_command& cmd)
 {
-  tree_statement_list *lst = cmd.body ();
+  if (found)
+    return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 
+  tree_statement_list *lst = cmd.body ();
+
   if (lst)
     lst->accept (*this);
 
   if (found)
     return;
 
   tree_expression *expr = cmd.condition ();
 
@@ -121,23 +124,20 @@ tree_breakpoint::visit_binary_expression
 {
   if (found)
     return;
 
   tree_expression *lhs = expr.lhs ();
   tree_expression *rhs = expr.rhs ();
 
   if (lhs && lhs->line () >= line)
-    {
-      take_action (expr);
-      return;
-    }
+    lhs->accept (*this);
 
   if (rhs && rhs->line () >= line)
-    take_action (expr);  
+    rhs->accept (*this);  
 }
 
 void 
 tree_breakpoint::visit_break_command (tree_break_command& cmd)
 {
   if (found)
     return;
 
@@ -146,16 +146,19 @@ tree_breakpoint::visit_break_command (tr
 }
 
 void
 tree_breakpoint::visit_colon_expression (tree_colon_expression& expr)
 {
   if (found)
     return;
 
+  if (expr.line () >= line)
+    take_action (expr);
+
   tree_expression *base = expr.base (); 
 
   if (base)
     base->accept (*this);
 
   tree_expression *increment = expr.increment (); 
 
   if (increment)
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -23,29 +23,32 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_tree_bp_h)
 #define octave_tree_bp_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include "input.h"
+#include "ov-usr-fcn.h"
 #include "pt-walk.h"
+#include "pt-pr-code.h"
+#include "toplev.h"
 
 class tree;
 
 class
 tree_breakpoint : public tree_walker
 {
  public:
 
   enum action { set = 1, clear = 2, list = 3 };
 
   tree_breakpoint (int l, action a)
-    : line (l), act (a), found (false), lst () { }
+    : line (l), act (a), found (false), bp_list () { }
 
   ~tree_breakpoint (void) { }
 
   bool success (void) const { return found; }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
@@ -135,46 +138,68 @@ tree_breakpoint : public tree_walker
   void visit_switch_case_list (tree_switch_case_list&);
 
   void visit_switch_command (tree_switch_command&);
 
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
-  octave_value_list get_list (void) { return lst; }
+  octave_value_list get_list (void) { return bp_list; }
   
   int get_line (void) { return line; }
 
  private:
 
   void take_action (tree &tr);
 
+  // Statement line number we are looking for.
   int line;
 
+  // What to do.
   action act;
-  
+
+  // Have we already found the line?
   bool found;
 
-  octave_value_list lst;
+  // List of breakpoint line numbers.
+  octave_value_list bp_list;
 
   // No copying!
 
   tree_breakpoint (const tree_breakpoint&);
 
   tree_breakpoint& operator = (const tree_breakpoint&);
 };
 
 #define MAYBE_DO_BREAKPOINT \
   do \
     { \
-      if (tree::break_next || is_breakpoint ()) \
+      if ((tree::break_next && tree::last_line == 0) \
+	  || (tree::break_next \
+	      && curr_function == tree::break_function \
+	      && tree::last_line != line ()) \
+	  || is_breakpoint ()) \
         { \
           tree::break_next = false; \
-          octave_stdout << "line: " << line () << std::endl; \
+ \
+          if (curr_function) \
+            octave_stdout << curr_function->function_name () << ": ";  \
+ \
+          octave_stdout << "line " << line () << ", " \
+			<< "column " << column () \
+			<< std::endl; \
+ \
+          tree_print_code tpc (octave_stdout); \
+          this->accept (tpc); \
+ \
+          octave_stdout << std::endl; \
+ \
+          tree::break_statement = this; \
+ \
           do_keyboard (); \
         } \
     } \
   while (0)
 
 #endif
 
 /*
diff --git a/src/pt-cell.h b/src/pt-cell.h
--- a/src/pt-cell.h
+++ b/src/pt-cell.h
@@ -41,17 +41,17 @@ class tree_walker;
 
 // General cells.
 
 class
 tree_cell : public tree_matrix
 {
 public:
 
-  tree_cell (tree_argument_list *row = 0) : tree_matrix (row) { }
+  tree_cell (tree_argument_list *row = 0, int line = -1, int column = -1) : tree_matrix (row, line, column) { }
 
   ~tree_cell (void) { }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -42,18 +42,18 @@ class tree_walker;
 // General matrices.  This allows us to construct matrices from
 // other matrices, variables, and functions.
 
 class
 tree_matrix : public tree_expression, public SLList<tree_argument_list *>
 {
 public:
 
-  tree_matrix (tree_argument_list *row = 0)
-    : tree_expression (), SLList<tree_argument_list *> ()
+  tree_matrix (tree_argument_list *row = 0, int line = -1, int column = -1)
+    : tree_expression (line, column), SLList<tree_argument_list *> ()
   {
     if (row)
       append (row);
   }
 
   ~tree_matrix (void);
 
   bool all_elements_are_constant (void) const;
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -33,16 +33,25 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include "pt.h"
 #include "pt-pr-code.h"
 
 // If true, stop executing at the next possible point.
 bool tree::break_next = false;
 
+// The line where dbg_next was executed.
+int tree::last_line = 0;
+
+// The function where the last breakpoint occurred.
+const octave_user_function *tree::break_function = 0;
+
+// The statement where the last breakpoint occurred.
+const tree *break_statement = 0;
+
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
 std::string
 tree::str_print_code (void)
 {
   std::ostrstream buf;
 
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 #include <iostream>
 
+class octave_user_function;
 class tree_walker;
 
 // Base class for the parse tree.
 
 class
 tree
 {
 public:
@@ -64,16 +65,25 @@ public:
   virtual void delete_breakpoint (void)
     { break_point = false; }
 
   virtual bool is_breakpoint (void) const 
     { return break_point; }
 
   // If true, stop executing at the next possible point.
   static bool break_next;
+  
+  // The line where dbg_next was executed.
+  static int last_line; 
+
+  // The function where the last breakpoint occurred.
+  static const octave_user_function *break_function;
+
+  // The statement where the last breakpoint occurred.
+  static const tree *break_statement;
 
 private:
 
   // The input line and column where we found the text that was
   // eventually converted to this tree node.
   int line_num;
   int column_num;
 
