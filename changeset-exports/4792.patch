# HG changeset patch
# User jwe
# Date 1077302683 0
#      Fri Feb 20 18:44:43 2004 +0000
# Node ID d2038299c683f6cd50668706d6585e7007bcbe5b
# Parent  62f2fb59345542113368afbd50a675085ea822ec
[project @ 2004-02-20 18:44:43 by jwe]

diff --git a/src/DLD-FUNCTIONS/fftw_wisdom.cc b/src/DLD-FUNCTIONS/fftw_wisdom.cc
--- a/src/DLD-FUNCTIONS/fftw_wisdom.cc
+++ b/src/DLD-FUNCTIONS/fftw_wisdom.cc
@@ -81,26 +81,26 @@ the wisdom is lost.\n\
 Note that the program @code{fftw-wisdom} supplied with FFTW can equally\n\
 be used to create a file containing wisdom that can be imported into\n\
 Octave.\n\
 @end deftypefn\n\
 @seealso {fft, ifft, fft2, ifft2, fftn, ifftn}")
 {
   octave_value retval;
 
-#if defined (HAVE_FFTW3)
-
   int nargin = args.length();
 
   if (nargin < 1 || nargin > 2)
     {
       print_usage ("fftw_wisdom");
       return retval;
     }
 
+#if defined (HAVE_FFTW3)
+
   if (args(0).is_string ())
     {
       bool overwrite = false;
 
       if (nargin != 1)
 	{
 	  double dval = args (1).double_value ();
 	  if (NINT (dval) != 0)
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -81,17 +81,17 @@ public:
 
   virtual octave_value octave_va_arg (void) const { return octave_value (); }
 
   virtual octave_value_list octave_all_va_args (void)
     { return octave_value_list (); }
 
   virtual bool takes_var_return (void) const { return false; }
 
-  virtual void octave_vr_val (const octave_value& val) { }
+  virtual void octave_vr_val (const octave_value&) { }
 
   virtual bool has_varargout (void) const { return false; }
 
   std::string name (void) const { return my_name; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -374,21 +374,21 @@ hdf5_make_range_type (hid_t num_type)
 
   return type_id;
 }
 
 bool
 octave_range::save_hdf5 (hid_t loc_id, const char *name,
 			 bool /* save_as_floats */)
 {
-  hsize_t dims[3];
+  hsize_t dimens[3];
   hid_t space_hid = -1, type_hid = -1, data_hid = -1;
   bool retval = true;
 
-  space_hid = H5Screate_simple (0, dims, (hsize_t*) 0);
+  space_hid = H5Screate_simple (0, dimens, (hsize_t*) 0);
   if (space_hid < 0) return false;
 
   type_hid = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
   if (type_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -103,17 +103,17 @@ public:
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   dim_vector dims (void) const
     {
       int n = range.nelem ();
       return dim_vector (n > 0, n);
     }
 
-  size_t byte_size (void) const { 3 * sizeof (double); }
+  size_t byte_size (void) const { return 3 * sizeof (double); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return NDArray (matrix_value().reshape (new_dims)); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -868,17 +868,17 @@ octave_struct::save_hdf5 (hid_t loc_id, 
 bool 
 octave_struct::load_hdf5 (hid_t loc_id, const char *name,
 			  bool have_h5giterate_bug)
 {
   bool retval = false;
 
   hdf5_callback_data dsub;
 
-  herr_t retval2;
+  herr_t retval2 = 0;
   Octave_map m;
   int current_item = 0;
 #ifdef HAVE_H5GGET_NUM_OBJS
   hsize_t num_obj = 0;
   H5Gget_num_objs (loc_id, &num_obj);
 
   while (current_item < static_cast<int> (num_obj)
 	 && (retval2 = H5Giterate (loc_id, name, &current_item,
