# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1308590240 25200
#      Mon Jun 20 10:17:20 2011 -0700
# Branch stable
# Node ID 13bcd62824a74473cb77434cc81d9345335b696d
# Parent  e8fe03bfc051f2130b350052b4dba5e95e228dd9
doc: Add documentation for gmres, rectangle to manual

linear-algebra/module.mk: Add gmres.m to list of functions.
gmres.m: Correct spelling in @seealso reference.
octave.texi: Add reference to new menu for 2D Geometric Shapes.
plot.txi: Add new menu for 2D Geometric Shapes.  Add rectangle function.
rectangle.m: Improve DOCSTRING
aspell-octave.en.pws: Add spelling exception for PGMRES

diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -628,16 +628,17 @@ PCX
 pcx
 PDF
 pdf
 periodogram
 perp
 Petzold's
 PGF
 pgm
+PGMRES
 PHP
 pict
 pinv
 Pixmap
 png
 PNG
 pnm
 PointJet
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -518,16 +518,17 @@ High-Level Plotting
 * Printing and Saving Plots::              
 * Interacting with Plots::      
 * Test Plotting Functions::     
 
 Two-Dimensional Plots
 
 * Axis Configuration::  
 * Two-dimensional Function Plotting::  
+* Two-dimensional Geometric Shapes::  
 
 Three-Dimensional Plots
 
 * Aspect Ratio::  
 * Three-dimensional Function Plotting::  
 * Three-dimensional Geometric Shapes::  
 
 Graphics Data Structures
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -68,16 +68,17 @@ and @ref{Advanced Plotting}.
 @end menu
 
 @node Two-Dimensional Plots
 @subsection Two-Dimensional Plots
 
 @menu
 * Axis Configuration::  
 * Two-dimensional Function Plotting::  
+* Two-dimensional Geometric Shapes::  
 @end menu
 
 The @code{plot} function allows you to create simple x-y plots with
 linear axes.  For example,
 
 @example
 @group
 x = -10:0.1:10;
@@ -278,16 +279,21 @@ function include @code{ezplot}, @code{ez
 @DOCSTRING(ezplot)
 
 @DOCSTRING(ezcontour)
 
 @DOCSTRING(ezcontourf)
 
 @DOCSTRING(ezpolar)
 
+@node Two-dimensional Geometric Shapes
+@subsubsection Two-dimensional Geometric Shapes
+
+@DOCSTRING(rectangle)
+
 @node Three-Dimensional Plots
 @subsection Three-Dimensional Plots
 
 The function @code{mesh} produces mesh surface plots.  For example,
 
 @example
 @group
 tx = ty = linspace (-8, 8, 41)';
diff --git a/scripts/linear-algebra/gmres.m b/scripts/linear-algebra/gmres.m
--- a/scripts/linear-algebra/gmres.m
+++ b/scripts/linear-algebra/gmres.m
@@ -10,17 +10,17 @@
 ## Octave is distributed in the hope that it will be useful, but WITHOUT
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
-  
+
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} gmres (@dots{})
 ## Solve @code{A x = b} using the Preconditioned GMRES iterative method
 ## with restart, a.k.a. PGMRES(m).
 ##
 ## @itemize @minus
@@ -64,17 +64,17 @@
 ##
 ## @item @var{iter} is a vector containing the number of outer iterations and
 ## total iterations performed.
 ##
 ## @item @var{resvec} is a vector containing the relative residual at each
 ## iteration.
 ## @end itemize
 ##
-## @seealso{pcg, cgs, bigcstab}
+## @seealso{pcg, cgs, bicgstab}
 ## @end deftypefn
 
 function [x, flag, prec_res_norm, itcnt] = gmres (A, b, restart, rtol, maxit, M1, M2, x0)
 
   if (nargin < 2 || nargin > 8)
     print_usage ();    
   end
       
diff --git a/scripts/linear-algebra/module.mk b/scripts/linear-algebra/module.mk
--- a/scripts/linear-algebra/module.mk
+++ b/scripts/linear-algebra/module.mk
@@ -2,16 +2,17 @@ FCN_FILE_DIRS += linear-algebra
 
 linear_algebra_FCN_FILES = \
   linear-algebra/commutation_matrix.m \
   linear-algebra/cond.m \
   linear-algebra/condest.m \
   linear-algebra/cross.m \
   linear-algebra/duplication_matrix.m \
   linear-algebra/expm.m \
+  linear-algebra/gmres.m \
   linear-algebra/housh.m \
   linear-algebra/isdefinite.m \
   linear-algebra/ishermitian.m \
   linear-algebra/issymmetric.m \
   linear-algebra/krylov.m \
   linear-algebra/logm.m \
   linear-algebra/normest.m \
   linear-algebra/null.m \
diff --git a/scripts/plot/rectangle.m b/scripts/plot/rectangle.m
--- a/scripts/plot/rectangle.m
+++ b/scripts/plot/rectangle.m
@@ -21,24 +21,24 @@
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "Position", @var{pos})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "Curvature", @var{curv})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "EdgeColor", @var{ec})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "FaceColor", @var{fc})
 ## @deftypefnx {Function File} {@var{h} =} rectangle (@dots{})
 ##
 ## Draw rectangular patch defined by @var{pos} and @var{curv}.  The variable
 ## @code{@var{pos}(1 : 2)} defines the lower left-hand corner of the patch
-## and @code{@var{pos}(3 : 4)} its width and height.  By default the value of
-## @var{pos} is @var{[0, 0, 1, 1]}.
+## and @code{@var{pos}(3 : 4)} defines its width and height.  By default, the
+## value of @var{pos} is @code{[0, 0, 1, 1]}.
 ##
 ## The variable @var{curv} defines the curvature of the sides of the rectangle
-## and it can be a scalar or two-element vector with values between 0 and 1.
-## A value of 0 represents no curvature of the side, where as a value of 1
-## means that the rectangular side is entirely curved into an arc of a circle.
-## If curvature is a two-element vector, then the first element is the 
+## and may be a scalar or two-element vector with values between 0 and 1.
+## A value of 0 represents no curvature of the side, whereas a value of 1
+## means that the side is entirely curved into the arc of a circle.
+## If @var{curv} is a two-element vector, then the first element is the 
 ## curvature along the x-axis of the patch and the second along y-axis.
 ##
 ## If @var{curv} is a scalar, it represents the curvature of the shorter of the
 ## two sides of the rectangle and the curvature of the other side is defined
 ## by
 ##
 ## @example
 ## min (pos (1: 2)) / max (pos (1:2)) * curv
