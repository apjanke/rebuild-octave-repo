# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217952250 14400
#      Tue Aug 05 12:04:10 2008 -0400
# Node ID 4d13a7a2f6abb53bc3768d3ce2d2747a29692597
# Parent  a2ab20ba78f74bb0adddc7b9903e23be46e5df7e
dir_path: use singleton class for static data members

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-08-05  John W. Eaton  <jwe@octave.org>
+
+	* pathsearch.cc (dir_path::init): Move octave_kpathsea_initialized
+	here from file scope.
+	* pathsearch.h, pathsearch.cc (class dir_path::static_members):
+	New singleton class for static members of dir_path.
+
 2008-08-04  John W. Eaton  <jwe@octave.org>
 
 	* oct-env.cc (octave_env::do_set_program_name,
 	octave_env::do_base_pathname): Fix usage of
 	file_ops::dir_sep_chars.
 	(octave_env::do_make_absolute): Fix usage of
 	file_ops::dir_sep_chars and file_ops::dir_sep_str.
 	(octave_env::do_get_home_directory): Fix usage of
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -32,21 +32,39 @@ along with Octave; see the file COPYING.
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 #include "str-vec.h"
 
 #include "kpse.cc"
 
-char dir_path::path_sep_char = SEPCHAR;
+dir_path::static_members *dir_path::static_members::instance = 0;
+
+dir_path::static_members::static_members (void)
+  : xpath_sep_char (SEPCHAR), xpath_sep_str (SEPCHAR_STR) { }
+
+bool
+dir_path::static_members::instance_ok (void)
+{
+  bool retval = true;
 
-std::string dir_path::path_sep_str (SEPCHAR_STR);
+  if (! instance)
+    instance = new static_members ();
 
-static bool octave_kpathsea_initialized = false;
+  if (! instance)
+    {
+      (*current_liboctave_error_handler)
+	("unable to create dir_path::static_members object!");
+
+      retval = false;
+    }
+
+  return retval;
+}
 
 string_vector
 dir_path::elements (void)
 {
   return initialized ? pv : string_vector ();
 }
 
 string_vector
@@ -118,16 +136,18 @@ dir_path::find_all_first_of (const strin
 {
   return initialized
     ? kpse_all_path_find_first_of (p, names) : string_vector ();
 }
 
 void
 dir_path::init (void)
 {
+  static bool octave_kpathsea_initialized = false;
+
   if (! octave_kpathsea_initialized)
     {
       std::string val = octave_env::getenv ("KPATHSEA_DEBUG");
 
       if (! val.empty ())
 	kpathsea_debug |= atoi (val.c_str ());
 
       octave_kpathsea_initialized = true;
diff --git a/liboctave/pathsearch.h b/liboctave/pathsearch.h
--- a/liboctave/pathsearch.h
+++ b/liboctave/pathsearch.h
@@ -78,20 +78,68 @@ public:
   string_vector find_all_first_of (const string_vector& names);
 
   void rehash (void)
     {
       initialized = false;
       init ();
     }
 
-  static bool is_path_sep (char c) { return c == path_sep_char; }
+private:
+
+  // Use a singleton class for these data members instead of just
+  // making them static members of the dir_path class so that we can
+  // ensure proper initialization.
+
+  class static_members
+  {
+  public:
+
+    static_members (void);
+
+    static char path_sep_char (void)
+    {
+      return instance_ok () ? instance->xpath_sep_char : 0;
+    }
+
+    static std::string path_sep_str (void)
+    {
+      return instance_ok () ? instance->xpath_sep_str : std::string ();
+    }
+
+  private:
+
+    static static_members *instance;
 
-  static char path_sep_char;
-  static std::string path_sep_str;
+    static bool instance_ok (void);
+
+    // No copying!
+
+    static_members (const static_members&);
+
+    static_members& operator = (const static_members&);
+
+    char xpath_sep_char;
+
+    std::string xpath_sep_str;
+  };
+
+public:
+
+  static char path_sep_char (void)
+  {
+    return static_members::path_sep_char ();
+  }
+
+  static std::string path_sep_str (void)
+  {
+    return static_members::path_sep_str ();
+  }
+
+  static bool is_path_sep (char c) { return c == path_sep_char (); }
 
 private:
 
   // The colon separated list that we were given.
   std::string p_orig;
 
   // The default path.  If specified, replaces leading, trailing, or
   // doubled colons in p_orig.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2008-08-05  John W. Eaton  <jwe@octave.org>
+
+	* dirfns.cc (Fpathsep): Fix usage of dir_path::path_sep_str.
+	* defaults.cc (set_exec_path, set_image_path): Likewise.
+	* load-path.h (load_path::set_command_line_path): Likewise.
+	* load-path.cc (maybe_add_path_elts, load_path::do_initialize,
+	load_path::do_path, genpath, Fpath): Likewise.
+	(split_path): Fix usage of dir_path::path_sep_char.
+
 2008-08-04  John W. Eaton  <jwe@octave.org>
 
 	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find_autoload):
 	Fix usage of file_ops::dir_sep_chars.
 	* variables.cc (looks_like_struct):
 	Likewise.
 	* ov-fcn-handle.cc (octave_fcn_handle::set_fcn): Likewise.
 	* octave.cc (execute_command_line_file): Likewise.
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -228,58 +228,58 @@ static void
 set_default_bin_dir (void)
 {
   Vbin_dir = subst_octave_home (OCTAVE_BINDIR);
 }
 
 void
 set_exec_path (const std::string& path)
 {
-  VEXEC_PATH = Vlocal_ver_arch_lib_dir + dir_path::path_sep_str
-    + Vlocal_api_arch_lib_dir + dir_path::path_sep_str
-    + Vlocal_arch_lib_dir + dir_path::path_sep_str
-    + Varch_lib_dir + dir_path::path_sep_str
+  VEXEC_PATH = Vlocal_ver_arch_lib_dir + dir_path::path_sep_str ()
+    + Vlocal_api_arch_lib_dir + dir_path::path_sep_str ()
+    + Vlocal_arch_lib_dir + dir_path::path_sep_str ()
+    + Varch_lib_dir + dir_path::path_sep_str ()
     + Vbin_dir;
   
   // This is static so that even if set_exec_path is called more than
   // once, shell_path is the original PATH from the environment,
   // before we start modifying it.
   static std::string shell_path = octave_env::getenv ("PATH");
 
   if (! shell_path.empty ())
-    VEXEC_PATH += dir_path::path_sep_str + shell_path;
+    VEXEC_PATH += dir_path::path_sep_str () + shell_path;
 
   std::string tpath = path;
 
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_EXEC_PATH");
 
   if (! tpath.empty ())
-    VEXEC_PATH = tpath + dir_path::path_sep_str + VEXEC_PATH;
+    VEXEC_PATH = tpath + dir_path::path_sep_str () + VEXEC_PATH;
 
   octave_env::putenv ("PATH", VEXEC_PATH);
 }
 
 void
 set_image_path (const std::string& path)
 {
   VIMAGE_PATH = ".";
 
   std::string tpath = path;
 
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_IMAGE_PATH");
 
   if (! tpath.empty ())
-    VIMAGE_PATH += dir_path::path_sep_str + tpath;
+    VIMAGE_PATH += dir_path::path_sep_str () + tpath;
 
   tpath = genpath (Vimage_dir, "");
 
   if (! tpath.empty ())
-    VIMAGE_PATH += dir_path::path_sep_str + tpath;
+    VIMAGE_PATH += dir_path::path_sep_str () + tpath;
 }
 
 static void
 set_default_info_file (void)
 {
   std::string std_info_file = subst_octave_home (OCTAVE_INFOFILE);
 
   std::string oct_info_file = octave_env::getenv ("OCTAVE_INFO_FILE");
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -657,17 +657,17 @@ DEFUN (pathsep, args, ,
 Return the system-dependent character used to separate directories in\n\
 a path.\n\
 @seealso{filesep, dir, ls}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    retval = dir_path::path_sep_str;
+    retval = dir_path::path_sep_str ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (confirm_recursive_rmdir, args, nargout,
   "-*- texinfo -*-\n\
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -414,17 +414,17 @@ maybe_add_path_elts (std::string& path, 
 {
   std::string tpath = genpath (dir);
 
   if (! tpath.empty ())
     {
       if (path.empty ())
 	path = tpath;
       else
-	path += dir_path::path_sep_str + tpath;
+	path += dir_path::path_sep_str () + tpath;
     }
 }
 
 void
 load_path::do_initialize (bool set_initial_path)
 {
   sys_path = "";
 
@@ -443,20 +443,20 @@ load_path::do_initialize (bool set_initi
   std::string tpath = load_path::command_line_path;
 
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_LOADPATH");
 
   std::string xpath = ".";
 
   if (! tpath.empty ())
-    xpath += dir_path::path_sep_str + tpath;
+    xpath += dir_path::path_sep_str () + tpath;
 
   if (! sys_path.empty ())
-    xpath += dir_path::path_sep_str + sys_path;
+    xpath += dir_path::path_sep_str () + sys_path;
 
   do_set (xpath, false);
 }
 
 void
 load_path::do_clear (void)
 {
   dir_info_list.clear ();
@@ -468,33 +468,33 @@ load_path::do_clear (void)
 }
 
 static std::list<std::string>
 split_path (const std::string& p)
 {
   std::list<std::string> retval;
 
   size_t beg = 0;
-  size_t end = p.find (dir_path::path_sep_char);
+  size_t end = p.find (dir_path::path_sep_char ());
 
   size_t len = p.length ();
 
   while (end != NPOS)
     {
       std::string elt = p.substr (beg, end-beg);
 
       if (! elt.empty ())
 	retval.push_back (elt);
 
       beg = end + 1;
 
       if (beg == len)
 	break;
 
-      end = p.find (dir_path::path_sep_char, beg);
+      end = p.find (dir_path::path_sep_char (), beg);
     }
 
   std::string elt = p.substr (beg);
 
   if (! elt.empty ())
     retval.push_back (elt);
 
   return retval;
@@ -1241,17 +1241,17 @@ load_path::do_path (void) const
   string_vector xdirs = load_path::dirs ();
 
   octave_idx_type len = xdirs.length ();
 
   if (len > 0)
     xpath = xdirs[0];
 
   for (octave_idx_type i = 1; i < len; i++)
-    xpath += dir_path::path_sep_str + xdirs[i];
+    xpath += dir_path::path_sep_str () + xdirs[i];
 
   return xpath;
 }
 
 void
 print_types (std::ostream& os, int types)
 {
   bool printed_type = false;
@@ -1605,17 +1605,17 @@ genpath (const std::string& dirname, con
 
 	      if (! skip_p)
 		{
 		  std::string nm = file_ops::concat (dirname, elt);
 
 		  file_stat fs (nm);
 
 		  if (fs && fs.is_dir ())
-		    retval += dir_path::path_sep_str + genpath (nm);
+		    retval += dir_path::path_sep_str () + genpath (nm);
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
@@ -1749,17 +1749,17 @@ No checks are made for duplicate element
 
   if (! error_state)
     {
       if (argc > 1)
 	{
 	  std::string path = argv[1];
 
 	  for (int i = 2; i < argc; i++)
-	    path += dir_path::path_sep_str + argv[i];
+	    path += dir_path::path_sep_str () + argv[i];
 
 	  load_path::set (path, true);
 	}
 
       if (nargout > 0)
 	retval = load_path::path ();
       else if (argc == 1 && nargout == 0)
 	{
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -204,17 +204,17 @@ public:
 
   static void set_remove_hook (hook_fcn_ptr f) { remove_hook = f; }
 
   static void set_command_line_path (const std::string& p)
   {
     if (command_line_path.empty ())
       command_line_path = p;
     else
-      command_line_path += dir_path::path_sep_str + p;
+      command_line_path += dir_path::path_sep_str () + p;
   }
 
   static std::string system_path (void)
   {
     return instance_ok () ? instance->do_system_path () : std::string ();
   }
 
 private:
