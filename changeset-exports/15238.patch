# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1346012222 14400
#      Sun Aug 26 16:17:02 2012 -0400
# Node ID c4779a18013441ef37b7c196fa747d1ae7aa8045
# Parent  d65ef0fc5e05627016215c96843b012b5426ec36
avoid confusing --disable-foo (default is yes) configure help messages

* configure.ac, m4/acinclude.m4: If a feature FOO is enabled by
default, use --disable-FOO in the help message.  If it is disabled by
default, use --enable-FOO.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -127,55 +127,55 @@ AC_SUBST(config_opts)
 
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
 BOUNDS_CHECKING=false
 AC_ARG_ENABLE(bounds-check,
   [AS_HELP_STRING([--enable-bounds-check],
-    [bounds checking for indexing in internal array classes (default is no)])],
+    [enable bounds checking for indexing in internal array classes])],
   [if test "$enableval" = yes; then BOUNDS_CHECKING=true; fi], [])
 if $BOUNDS_CHECKING; then
   AC_DEFINE(BOUNDS_CHECKING, 1, [Define to 1 to use internal bounds checking.])
 fi
 
 ### Use Octave's built-in memory allocator rather than straightforward malloc.
 ### Disabled by default.
 
 USE_OCTAVE_ALLOCATOR=false
 AC_ARG_ENABLE(octave-allocator,
   [AS_HELP_STRING([--enable-octave-allocator],
-    [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.  (default is no)])],
+    [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.])],
   [if test "$enableval" = yes; then USE_OCTAVE_ALLOCATOR=true; fi], [])
 if $USE_OCTAVE_ALLOCATOR; then
   AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1,
     [Define to 1 to use octave_allocator class.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior but incurs a significant slowdown, and is thus
 ### disabled by default.
 
 USE_ATOMIC_REFCOUNT=false
 AC_ARG_ENABLE(atomic-refcount,
   [AS_HELP_STRING([--enable-atomic-refcount],
-    [use atomic operations for internal reference counting.  This is required for thread-safe behavior.  (default is no)])],
+    [use atomic operations for internal reference counting.  This is required for thread-safe behavior but does not by itself make Octave internals thread safe.])],
   [if test "$enableval" = yes; then USE_ATOMIC_REFCOUNT=true; fi], [])
 if $USE_ATOMIC_REFCOUNT; then
   AC_DEFINE(USE_ATOMIC_REFCOUNT, 1,
     [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
 DOCDIR=doc
 AC_ARG_ENABLE(docs,
-  [AS_HELP_STRING([--enable-docs], [build documentation (default is yes)])],
+  [AS_HELP_STRING([--disable-docs], [don't build documentation files])],
   [if test "$enableval" = no; then
      DOCDIR=
      warn_docs="building documentation disabled; make dist will fail"
      OCTAVE_CONFIGURE_WARNING([warn_docs])
    fi],
   [])
 AC_SUBST(DOCDIR)
 
@@ -1315,18 +1315,18 @@ LIBS="$save_LIBS"
 OCTAVE_ENABLE_READLINE
 
 ### Enable dynamic linking.  --enable-shared implies this, so
 ### --enable-dl is only need if you are only building static libraries
 ### and want to try dynamic linking too (works on some systems, for
 ### example, OS X and Windows).
 
 AC_ARG_ENABLE([dl],
-  [AS_HELP_STRING([--enable-dl],
-    [allow loading of dynamically linked modules (not all systems)])],
+  [AS_HELP_STRING([--disable-dl],
+    [disable loading of dynamically linked modules])],
   [case "${enableval}" in
      yes) ENABLE_DYNAMIC_LINKING=true ;;
      no) ENABLE_DYNAMIC_LINKING=false ;;
      *) AC_MSG_ERROR([bad value ${enableval} for --enable-dl]) ;;
    esac],
   [ENABLE_DYNAMIC_LINKING=true])
 
 if $STATIC_LIBS || $SHARED_LIBS; then
@@ -1617,18 +1617,18 @@ AC_SUBST(OCTAVE_DLL_DEFS)
 AC_SUBST(OCTINTERP_DLL_DEFS)
 AC_SUBST(OCTGRAPHICS_DLL_DEFS)
 AC_SUBST(library_path_var)
 AC_SUBST(ldpreloadsep)
 
 ### More configure argument checking related to linking
 
 AC_ARG_ENABLE([no-undefined],
-  [AS_HELP_STRING([--enable-no-undefined],
-    [pass -no-undefined to libtool when linking Octave and its shared libraries (on by default)])],
+  [AS_HELP_STRING([--disable-no-undefined],
+    [don't pass -no-undefined to libtool when linking Octave and its shared libraries])],
   [case "${enableval}" in
      yes) NO_UNDEFINED_LDFLAG="-no-undefined" ;;
      no)  NO_UNDEFINED_LDFLAG="" ;;
      *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
    esac],
   [NO_UNDEFINED_LDFLAG="-no-undefined"])
 AC_SUBST(NO_UNDEFINED_LDFLAG)
 
@@ -2121,18 +2121,18 @@ AC_SUBST(UGLY_DEFS)
 
 GCC_EXTRA_FLAGS="-Wall -W -Wshadow -Wformat -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings -Wcast-align -Wcast-qual"
 
 GXX_EXTRA_FLAGS="-Wall -W -Wshadow -Wold-style-cast -Wformat -Wpointer-arith -Wwrite-strings -Wcast-align -Wcast-qual"
 
 try_extra_warning_flags=true
 
 AC_ARG_ENABLE(extra-warning-flags,
-  [AS_HELP_STRING([--enable-extra-warning-flags],
-    [add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS  (on by default, but only if the compiler appears to accept them)])],
+  [AS_HELP_STRING([--disable-extra-warning-flags],
+    [don't add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = no; then
      try_extra_warning_flags=false
    fi],
   [])
 
 if $try_extra_warning_flags; then
   for flag in $GCC_EXTRA_FLAGS; do
     OCTAVE_CC_FLAG($flag, [
@@ -2149,17 +2149,17 @@ fi
 GCC_STRICT_FLAGS="-Wconversion"
 
 GXX_STRICT_FLAGS="-Wconversion -Weffc++"
 
 try_strict_warning_flags=false
 
 AC_ARG_ENABLE(strict-warning-flags,
   [AS_HELP_STRING([--enable-strict-warning-flags],
-    [add extra strict warning options to CFLAGS and CXXFLAGS (off by default)])],
+    [add extra strict warning options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = yes; then
      try_strict_warning_flags=true
    fi],
   [])
 
 if $try_strict_warning_flags; then
   for flag in $GCC_STRICT_FLAGS; do
     OCTAVE_CC_FLAG($flag, [
@@ -2179,17 +2179,17 @@ AC_SUBST(WARN_CXXFLAGS)
 ### GUI/Qt related tests.
 
 HAVE_QT=false
 QT_INCDIR=
 QT_LIBDIR=
 build_gui=yes
 win32_terminal=no
 AC_ARG_ENABLE(gui,
-  [AS_HELP_STRING([--disable-gui], [avoid building the GUI (default no)])],
+  [AS_HELP_STRING([--disable-gui], [don't build the GUI])],
   [if test "$enableval" = no; then build_gui=no; fi], [build_gui=yes])
 
 if test $build_gui = yes; then
   AC_CHECK_PROGS(QMAKE, [qmake qmake-qt4 qmake-qt5])
   if test -n "$QMAKE"; then
     QT_INCDIR=`$QMAKE -query | sed -n -e 's/^QT_INSTALL_HEADERS://p'`
     QT_LIBDIR=`$QMAKE -query | sed -n -e 's/^QT_INSTALL_LIBS://p'`
     AC_CHECK_PROGS(MOC, [moc moc-qt4 moc-qt5])
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1013,18 +1013,18 @@ AC_DEFUN([OCTAVE_CXX_PLACEMENT_DELETE], 
 dnl
 dnl Allow the user disable support for command line editing using GNU
 dnl readline.
 dnl
 AC_DEFUN([OCTAVE_ENABLE_READLINE], [
   USE_READLINE=true
   READLINE_LIBS=
   AC_ARG_ENABLE(readline,
-    [AS_HELP_STRING([--enable-readline],
-      [use readline library (default is yes)])],
+    [AS_HELP_STRING([--disable-readline],
+      [use readline library])],
     [if test "$enableval" = no; then
        USE_READLINE=false
        warn_readline="command editing and history features require GNU Readline"
      fi])
   if $USE_READLINE; then
     save_LIBS="$LIBS"
     LIBS="$TERM_LIBS"
     AC_CHECK_LIB(readline, rl_set_keyboard_input_timeout,
