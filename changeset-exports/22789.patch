# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1479425869 28800
#      Thu Nov 17 15:37:49 2016 -0800
# Branch stable
# Node ID bedfedcd878ef4525c83fe5d177a06f91f7e62a5
# Parent  056941d5cc7ae23c52c133bb9f0cff14862b3a49
norm: fix error in input argument validation leading to segfault (bug #49634)

* data.cc (Fnorm): Fix validation of number of input arguments.  Add input
validation %!error tests.
(F__accumarray_sum__, F__accumarray_min__, F__accumarray_max__,
F__accumdim_sum__): Fix validation of number of input arguments.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5670,17 +5670,17 @@ If @var{opt} is the value @qcode{"rows"}
 compute its norm.  The result is returned as a column vector.
 Similarly, if @var{opt} is @qcode{"columns"} or @qcode{"cols"} then
 compute the norms of each column and return a row vector.
 @seealso{cond, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 1 && nargin > 3)
+  if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value x_arg = args(0);
 
   if (x_arg.ndims () != 2)
     error ("norm: only valid for 2-D objects");
 
   enum { sfmatrix, sfcols, sfrows, sffrob, sfinf } strflag = sfmatrix;
@@ -5816,16 +5816,24 @@ compute the norms of each column and ret
 %!assert (norm (q, [], "rows"), norm (q, 2, "rows"))
 %!assert (norm (q, [], "cols"), norm (q, 2, "cols"))
 
 %!test <30631>
 %! ## Test for norm returning NaN on sparse matrix
 %! A = sparse (2,2);
 %! A(2,1) = 1;
 %! assert (norm (A), 1);
+
+## Test input validation
+%!error norm ()
+%!error norm (1,2,3,4)
+%!error <unrecognized option> norm (1, "invalid")
+%!error <unrecognized option> norm (1, "rows", "invalid")
+%!error <invalid combination of options> norm (1, "rows", "rows")
+%!error <invalid combination of options> norm (1, "invalid", "rows")
 */
 
 static octave_value
 unary_op_defun_body (octave_value::unary_op op,
                      const octave_value_list& args)
 {
   if (args.length () != 1)
     print_usage ();
@@ -7016,17 +7024,17 @@ do_accumarray_sum (const idx_vector& idx
 DEFUN (__accumarray_sum__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __accumarray_sum__ (@var{idx}, @var{vals}, @var{n})
 Undocumented internal function.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 2 && nargin > 3)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("__accumarray_sum__: first argument must be numeric");
 
   octave_value retval;
 
   try
@@ -7105,17 +7113,17 @@ do_accumarray_minmax (const idx_vector& 
 }
 
 static octave_value_list
 do_accumarray_minmax_fun (const octave_value_list& args,
                           bool ismin)
 {
   int nargin = args.length ();
 
-  if (nargin < 3 && nargin > 4)
+  if (nargin < 3 || nargin > 4)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("accumarray: first argument must be numeric");
 
   octave_value retval;
 
   try
@@ -7239,17 +7247,17 @@ do_accumdim_sum (const idx_vector& idx, 
 DEFUN (__accumdim_sum__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __accumdim_sum__ (@var{idx}, @var{vals}, @var{dim}, @var{n})
 Undocumented internal function.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 2 && nargin > 4)
+  if (nargin < 2 || nargin > 4)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("__accumdim_sum__: first argument must be numeric");
 
   octave_value retval;
 
   try
