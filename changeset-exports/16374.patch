# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364320323 14400
#      Tue Mar 26 13:52:03 2013 -0400
# Node ID 8b0a04cbdc9d0f372e2f440c153a65928cb8f312
# Parent  c97e82b2b5b9677bd74da4d4a2f4559e9608d749
provide hook function for dbstop events

* input.cc (dbstop_event_hook_fcn_map): New static variable.
(Fadd_dbstop_event_hook, Fremove_dbstop_event_hook): New functions.
(get_debug_input): Process dbstop_event_hook functions.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -291,16 +291,17 @@ hook_function::hook_function (const octa
     error ("invalid hook function");
 }
 
 typedef std::map<std::string, hook_function> hook_fcn_map_type;
 
 static hook_fcn_map_type pre_input_event_hook_fcn_map;
 static hook_fcn_map_type input_event_hook_fcn_map;
 static hook_fcn_map_type post_input_event_hook_fcn_map;
+static hook_fcn_map_type dbstop_event_hook_fcn_map;
 
 static void
 process_input_event_hook_functions
   (hook_fcn_map_type& hook_fcn_map,
    const octave_value_list& initial_args = octave_value_list ())
 {
   hook_fcn_map_type::iterator p = hook_fcn_map.begin ();
 
@@ -687,16 +688,26 @@ get_debug_input (const std::string& prom
 
           buf << "stopped in " << nm;
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
+              octave_scalar_map location_info_map;
+
+              location_info_map.setfield ("file", nm);
+              location_info_map.setfield ("line", curr_debug_line);
+
+              octave_value location_info (location_info_map);
+
+              process_input_event_hook_functions (dbstop_event_hook_fcn_map,
+                                                  location_info);
+
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
     }
@@ -1540,16 +1551,113 @@ interactive user input.\n\
         error ("remove_post_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (add_dbstop_event_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_dbstop_event_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_dbstop_event_hook (@var{fcn}, @var{data})\n\
+Add the named function or function handle @var{fcn} to the list of\n\
+functions to call when a debugger breakpoint is reached.  The function\n\
+should have the form\n\
+\n\
+@example\n\
+@var{fcn} (@var{location}, @var{data})\n\
+@end example\n\
+\n\
+in which @var{location} is a structure containing the following elements:\n\
+\n\
+@table @code\n\
+@item file\n\
+The name of the file where the breakpoint is located.\n\
+@item line\n\
+The line number corresponding to the breakpoint.\n\
+@end table\n\
+\n\
+If @var{data} is omitted when the hook function is added, the hook\n\
+function is called with a single argument.\n\
+\n\
+The returned identifier may be used to remove the function handle from\n\
+the list of input hook functions.\n\
+@seealso{remove_dbstop_event_hook}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_value user_data;
+
+      if (nargin == 2)
+        user_data = args(1);
+
+      hook_function hook_fcn (args(0), user_data);
+
+      if (! error_state)
+        {
+          dbstop_event_hook_fcn_map[hook_fcn.id ()] = hook_fcn;
+
+          retval = hook_fcn.id ();
+        }
+      else
+        error ("add_dbstop_event_hook: expecting string as first arg");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (remove_dbstop_event_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} remove_dbstop_event_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_dbstop_event_hook (@var{fcn_id})\n\
+Remove the named function or function handle with the given identifier\n\
+from the list of functions to call immediately after accepting\n\
+interactive user input.\n\
+@seealso{add_dbstop_event_hook}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string hook_fcn_id = args(0).string_value ();
+
+      bool warn = (nargin < 2);
+
+      if (! error_state)
+        {
+          hook_fcn_map_type::iterator p
+            = dbstop_event_hook_fcn_map.find (hook_fcn_id);
+
+          if (p != dbstop_event_hook_fcn_map.end ())
+            dbstop_event_hook_fcn_map.erase (p);
+          else if (warn)
+            warning ("remove_dbstop_event_hook: %s not found in list",
+                     hook_fcn_id.c_str ());
+        }
+      else
+        error ("remove_dbstop_event_hook: argument not valid as a hook function name or id");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (PS1, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS1 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS1 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS1 (@var{new_val}, \"local\")\n\
 Query or set the primary prompt string.  When executing interactively,\n\
 Octave displays the primary prompt when it is ready to read a command.\n\
 \n\
