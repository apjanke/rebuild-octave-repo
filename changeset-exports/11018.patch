# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1285389967 25200
#      Fri Sep 24 21:46:07 2010 -0700
# Node ID 43c1f914e293fa04ce8df3cdeabb3655a06979f8
# Parent  60141d49a38d549d0487535a7a88d82c61ed5c55
Update docstring for regexp, regexprep.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-24  Rik <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/regexp.cc (regexp, regexprep): Update docstring to 
+	discuss limits when not compiled with PCRE.
+
 2010-09-23  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (ALL_DEF_FILES): New variable.
 	(DEF_FILES): Don't include $(DLD_DYNAMIC_DEF_FILES) in the list.
 	(DEF_FILES DLD_DYNAMIC_DEF_FILES): Fix dependency info.
 	(doc-files): Depend on $(ALL_DEF_FILES), not $(DEF_FILES).
 
 2010-09-22  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -877,17 +877,16 @@ octcellregexp (const octave_value_list &
   return retval;
 
 }
 
 DEFUN_DLD (regexp, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexp (@var{str}, @var{pat})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} regexp (@var{str}, @var{pat}, @var{opts}, @dots{})\n\
-\n\
 Regular expression string matching.  Matches @var{pat} in @var{str} and\n\
 returns the position and matching substrings or empty values if there are\n\
 none.\n\
 \n\
 The matched pattern @var{pat} can include any of the standard regex\n\
 operators, including:\n\
 \n\
 @table @code\n\
@@ -1015,26 +1014,29 @@ Make the matching case sensitive.\n\
 @item ignorecase\n\
 Make the matching case insensitive.\n\
 \n\
 @item stringanchors\n\
 Match the anchor characters at the beginning and end of the string.\n\
 \n\
 @item lineanchors\n\
 Match the anchor characters at the beginning and end of the line.\n\
+Only available if Octave is compiled with Perl Compatible Regular Expressions.\n\
 \n\
 @item dotall\n\
 The character @code{.} matches the newline character.\n\
 \n\
 @item dotexceptnewline\n\
 The character @code{.} matches all but the newline character.\n\
+Only available if Octave is compiled with Perl Compatible Regular Expressions.\n\
 \n\
 @item freespacing\n\
 The pattern can include arbitrary whitespace and comments starting with\n\
 @code{#}.\n\
+Only available if Octave is compiled with Perl Compatible Regular Expressions.\n\
 \n\
 @item literalspacing\n\
 The pattern is taken literally.\n\
 @end table\n\
 @seealso{regexpi, regexprep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
@@ -1226,17 +1228,17 @@ The pattern is taken literally.\n\
 
 DEFUN_DLD (regexpi, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexpi (@var{str}, @var{pat})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} regexpi (@var{str}, @var{pat}, @var{opts}, @dots{})\n\
 \n\
 Case insensitive regular expression string matching.  Matches @var{pat} in\n\
 @var{str} and returns the position and matching substrings or empty values\n\
-if there are none.  @xref{doc-regexp,,regexp}, for more details\n\
+if there are none.  @xref{doc-regexp,,regexp}, for more details.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length();
 
   if (nargin < 2)
     print_usage ();
   else if (args(0).is_cell() || args(1).is_cell())
@@ -1571,28 +1573,23 @@ octregexprep (const octave_value_list &a
   
   retval = rep;
   return retval;
 }
 
 DEFUN_DLD (regexprep, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{string} =} regexprep (@var{string}, @var{pat}, @var{repstr}, @var{options})\n\
-Replace matches of @var{pat} in  @var{string} with @var{repstr}.\n\
-\n\
+Replace matches of @var{pat} in @var{string} with @var{repstr}.\n\
 \n\
 The replacement can contain @code{$i}, which substitutes\n\
 for the ith set of parentheses in the match string.  E.g.,\n\
 \n\
 @example\n\
-@group\n\
-\n\
    regexprep(\"Bill Dunn\",'(\\w+) (\\w+)','$2, $1')\n\
-\n\
-@end group\n\
 @end example\n\
 \n\
 @noindent\n\
 returns \"Dunn, Bill\"\n\
 \n\
 @var{options} may be zero or more of\n\
 @table @samp\n\
 \n\
@@ -1602,26 +1599,33 @@ Replace only the first occurrence of @va
 @item warnings\n\
 This option is present for compatibility but is ignored.\n\
 \n\
 @item ignorecase or matchcase\n\
 Ignore case for the pattern matching (see @code{regexpi}).\n\
 Alternatively, use (?i) or (?-i) in the pattern.\n\
 \n\
 @item lineanchors and stringanchors\n\
-Whether characters ^ and $ match the beginning and ending of lines.\n\
+Whether characters ^ and $ match the start/end of lines or of the entire\n\
+string.\n\
 Alternatively, use (?m) or (?-m) in the pattern.\n\
+'lineanchors' is only available when Octave is compiled with\n\
+Perl Compatible Regular Expressions.\n\
 \n\
 @item dotexceptnewline and dotall\n\
 Whether . matches newlines in the string.\n\
 Alternatively, use (?s) or (?-s) in the pattern.\n\
+'dotexceptnewline' is only available when Octave is compiled with\n\
+Perl Compatible Regular Expressions.\n\
 \n\
 @item freespacing or literalspacing\n\
 Whether whitespace and # comments can be used to make the regular expression\n\
 more readable.  Alternatively, use (?x) or (?-x) in the pattern.\n\
+'freespacing' is only available when Octave is compiled with\n\
+Perl Compatible Regular Expressions.\n\
 \n\
 @end table\n\
 @seealso{regexp,regexpi,strrep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length();
 
