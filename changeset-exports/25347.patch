# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1525377893 14400
#      Thu May 03 16:04:53 2018 -0400
# Node ID af3319d86a5f7fcceee40cd8a4dd1877076f07d2
# Parent  dd416c31761efd9076984b3fb5730a6988dfff6a
eliminate some global references to interpreter internals

* bp-table.h, bp-table.cc (bp_table::m_interpreter): New data member.
(get_user_code): Deprecate.

* interpreter.h, interpreter.cc (interpreter::get_user_code):
New function.  Change all uses of global get_uesr_code to use
interpreter::get_user_code instead.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -385,17 +385,17 @@ The @qcode{"warn"} field is set similarl
       fcn_list(0) = symbol_name;
       bp_list = bptab.get_breakpoint_list (fcn_list);
     }
   else
     {
 /*
       if (Vdebugging)
         {
-          octave_user_code *dbg_fcn = get_user_code ();
+          octave_user_code *dbg_fcn = interp.get_user_code ();
           if (dbg_fcn)
             {
               symbol_name = dbg_fcn->name ();
               fcn_list(0) = symbol_name;
             }
         }
 */
 
@@ -533,17 +533,17 @@ The @qcode{"warn"} field is set similarl
 DEFMETHOD (dbwhere, interp, , ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} dbwhere
 In debugging mode, report the current file and line number where execution
 is stopped.
 @seealso{dbstack, dblist, dbstatus, dbcont, dbstep, dbup, dbdown}
 @end deftypefn */)
 {
-  octave_user_code *dbg_fcn = octave::get_user_code ();
+  octave_user_code *dbg_fcn = interp.get_user_code ();
 
   if (! dbg_fcn)
     {
       octave_stdout << "stopped at top level" << std::endl;
       return ovl ();
     }
 
   octave_stdout << "stopped in " << dbg_fcn->name () << " at ";
@@ -602,18 +602,18 @@ do_dbtype (std::ostream& os, const std::
               line++;
             }
         }
     }
 
   os.flush ();
 }
 
-DEFUN (dbtype, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dbtype, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} dbtype
 @deftypefnx {} {} dbtype @var{lineno}
 @deftypefnx {} {} dbtype @var{startl:endl}
 @deftypefnx {} {} dbtype @var{startl:end}
 @deftypefnx {} {} dbtype @var{func}
 @deftypefnx {} {} dbtype @var{func} @var{lineno}
 @deftypefnx {} {} dbtype @var{func} @var{startl:endl}
 @deftypefnx {} {} dbtype @var{func} @var{startl:end}
@@ -633,17 +633,17 @@ numbers.
 {
   octave_user_code *dbg_fcn;
 
   string_vector argv = args.make_argv ("dbtype");
 
   switch (args.length ())
     {
     case 0:  // dbtype
-      dbg_fcn = octave::get_user_code ();
+      dbg_fcn = interp.get_user_code ();
 
       if (! dbg_fcn)
         error ("dbtype: must be inside a user function to give no arguments to dbtype\n");
 
       do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
                  0, std::numeric_limits<int>::max ());
 
       break;
@@ -651,17 +651,17 @@ numbers.
     case 1:  // (dbtype start:end) || (dbtype func) || (dbtype lineno)
       {
         std::string arg = argv[1];
 
         size_t ind = arg.find (':');
 
         if (ind != std::string::npos)  // (dbtype start:end)
           {
-            dbg_fcn = octave::get_user_code ();
+            dbg_fcn = interp.get_user_code ();
 
             if (dbg_fcn)
               {
                 std::string start_str = arg.substr (0, ind);
                 std::string end_str = arg.substr (ind + 1);
 
                 int start, end;
                 start = atoi (start_str.c_str ());
@@ -681,42 +681,42 @@ numbers.
               }
           }
         else  // (dbtype func) || (dbtype lineno)
           {
             int line = atoi (arg.c_str ());
 
             if (line == 0)  // (dbtype func)
               {
-                dbg_fcn = octave::get_user_code (arg);
+                dbg_fcn = interp.get_user_code (arg);
 
                 if (! dbg_fcn)
                   error ("dbtype: function <%s> not found\n", arg.c_str ());
 
                 do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
                            0, std::numeric_limits<int>::max ());
               }
             else  // (dbtype lineno)
               {
                 if (line <= 0)
                   error ("dbtype: start and end lines must be >= 1\n");
 
-                dbg_fcn = octave::get_user_code ();
+                dbg_fcn = interp.get_user_code ();
 
                 if (dbg_fcn)
                   do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
                              line, line);
               }
           }
       }
       break;
 
     case 2:  // (dbtype func start:end) || (dbtype func start)
       {
-        dbg_fcn = octave::get_user_code (argv[1]);
+        dbg_fcn = interp.get_user_code (argv[1]);
 
         if (! dbg_fcn)
           error ("dbtype: function <%s> not found\n", argv[1].c_str ());
 
         std::string arg = argv[2];
         int start, end;
         size_t ind = arg.find (':');
 
@@ -779,17 +779,17 @@ If unspecified @var{n} defaults to 10 (+
         }
       else
         n = args(0).int_value ();
 
       if (n < 0)
         error ("dblist: N must be a non-negative integer");
     }
 
-  octave_user_code *dbg_fcn = octave::get_user_code ();
+  octave_user_code *dbg_fcn = interp.get_user_code ();
 
   if (! dbg_fcn)
     error ("dblist: must be inside a user function to use dblist\n");
 
   bool have_file = true;
 
   std::string name = dbg_fcn->fcn_file_name ();
 
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -327,17 +327,17 @@ namespace octave
     : m_app_context (app_context),
       m_environment (),
       m_help_system (*this),
       m_dynamic_loader (*this),
       m_load_path (),
       m_type_info (),
       m_symbol_table (),
       m_evaluator (*this),
-      m_bp_table (),
+      m_bp_table (*this),
       m_stream_list (*this),
       m_child_list (),
       m_url_handle_manager (),
       m_cdef_manager (*this),
       m_gtk_manager (),
       m_interactive (false),
       m_read_site_files (true),
       m_read_init_files (m_app_context != nullptr),
@@ -1177,16 +1177,56 @@ namespace octave
     return m_evaluator.get_call_stack ();
   }
 
   profiler& interpreter::get_profiler (void)
   {
     return m_evaluator.get_profiler ();
   }
 
+  // Return a pointer to the user-defined function FNAME.  If FNAME is empty,
+  // search backward for the first user-defined function in the
+  // current call stack.
+
+  octave_user_code *
+  interpreter::get_user_code (const std::string& fname)
+  {
+    octave_user_code *user_code = nullptr;
+
+    if (fname.empty ())
+      {
+        call_stack& cs = get_call_stack ();
+
+        user_code = cs.debug_user_code ();
+      }
+    else
+      {
+        std::string name = fname;
+
+        if (sys::file_ops::dir_sep_char () != '/' && name[0] == '@')
+          {
+            auto beg = name.begin () + 2;  // never have @/method
+            auto end = name.end () - 1;    // never have trailing '/'
+            std::replace (beg, end, '/', sys::file_ops::dir_sep_char ());
+          }
+
+        size_t name_len = name.length ();
+
+        if (name_len > 2 && name.substr (name_len-2) == ".m")
+          name = name.substr (0, name_len-2);
+
+        octave_value fcn = m_symbol_table.find_function (name);
+
+        if (fcn.is_defined () && fcn.is_user_code ())
+          user_code = fcn.user_code_value ();
+      }
+
+    return user_code;
+  }
+
   void interpreter::mlock (void)
   {
     call_stack& cs = get_call_stack ();
 
     octave_function *fcn = cs.current ();
 
     if (! fcn)
       error ("mlock: invalid use outside a function");
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -48,16 +48,18 @@ extern OCTINTERP_API bool quit_allowed;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
+class octave_user_code;
+
 namespace octave
 {
   class profiler;
   class call_stack;
   class child_list;
   class tree_evaluator;
 
   // The application object contains a pointer to the current
@@ -204,16 +206,18 @@ namespace octave
       return m_cdef_manager;
     }
 
     gtk_manager& get_gtk_manager (void)
     {
       return m_gtk_manager;
     }
 
+    octave_user_code * get_user_code (const std::string& fname = "");
+
     void mlock (void);
 
     void munlock (const std::string& nm);
 
     bool mislocked (const std::string& nm);
 
     static void recover_from_exception (void);
 
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 
 #include "file-ops.h"
 
 #include "bp-table.h"
 #include "defun-int.h"
 #include "call-stack.h"
 #include "error.h"
+#include "interpreter.h"
 #include "interpreter-private.h"
 #include "oct-map.h"
 #include "octave-link.h"
 #include "ov-usr-fcn.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
 #include "parse.h"
@@ -335,17 +336,18 @@ namespace octave
             else if (seen_if)
               error ("%s: line number must come before 'if' clause\n");
             seen_at = true;
 
             if (! seen_in)
               {
                 // It was a line number.  Get function name from debugger.
                 if (Vdebugging)
-                  symbol_name = get_user_code ()->profiler_name ();
+                  symbol_name
+                    = m_interpreter.get_user_code ()->profiler_name ();
                 else
                   error ("%s: function name must come before line number "
                          "and 'if'", who);
                 seen_in = true;
               }
             else if (seen_if)
               error ("%s: line number must come before 'if' clause\n");
 
@@ -554,17 +556,17 @@ namespace octave
   }
 
   // Given file name fname, find the subfunction at line and create
   // a breakpoint there.  Put the system into debug_mode.
   bp_table::intmap bp_table::add_breakpoint (const std::string& fname,
                                              const bp_table::intmap& line,
                                              const std::string& condition)
   {
-    octave_user_code *main_fcn = get_user_code (fname);
+    octave_user_code *main_fcn = m_interpreter.get_user_code (fname);
 
     if (! main_fcn)
       error ("add_breakpoint: unable to find function '%s'\n", fname.c_str ());
 
     condition_valid (condition);  // Throw error if condition not valid.
 
     intmap retval;
 
@@ -652,17 +654,17 @@ namespace octave
 
     if (len == 0)
       {
         intmap results = remove_all_breakpoints_in_file (fname);
         retval = results.size ();
       }
     else
       {
-        octave_user_code *dbg_fcn = get_user_code (fname);
+        octave_user_code *dbg_fcn = m_interpreter.get_user_code (fname);
 
         if (! dbg_fcn)
           error ("remove_breakpoint: unable to find function %s\n",
                  fname.c_str ());
 
         retval = remove_breakpoint_1 (dbg_fcn, fname, line);
 
         // Search subfunctions in the order they appear in the file.
@@ -694,17 +696,17 @@ namespace octave
   // Remove all breakpoints from a file, including those in subfunctions.
 
   bp_table::intmap
   bp_table::remove_all_breakpoints_in_file (const std::string& fname,
                                             bool silent)
   {
     intmap retval;
 
-    octave_user_code *dbg_fcn = get_user_code (fname);
+    octave_user_code *dbg_fcn = m_interpreter.get_user_code (fname);
 
     if (dbg_fcn)
       {
         std::string file = dbg_fcn->fcn_file_name ();
 
         tree_statement_list *cmds = dbg_fcn->body ();
 
         if (cmds)
@@ -764,17 +766,17 @@ namespace octave
     // make copy since changes may invalidate iters of m_bp_set.
     std::set<std::string> tmp_bp_set = m_bp_set;
 
     for (auto& bp_fname : tmp_bp_set)
       {
         if (fname_list.empty ()
             || find_bkpt_list (fname_list, bp_fname) != "")
           {
-            octave_user_code *dbg_fcn = get_user_code (bp_fname);
+            octave_user_code *dbg_fcn = m_interpreter.get_user_code (bp_fname);
 
             if (dbg_fcn)
               {
                 tree_statement_list *cmds = dbg_fcn->body ();
 
                 // FIXME: move the operation on cmds to the
                 //        tree_statement_list class?
                 if (cmds)
@@ -924,50 +926,16 @@ namespace octave
           octave_stdout << "stop if interrupt\n";
         else
           retval.assign ("intr", octave_value ());
       }
 
     return retval;
   }
 
-  // Return a pointer to the user-defined function FNAME.  If FNAME is empty,
-  // search backward for the first user-defined function in the
-  // current call stack.
-
   octave_user_code *
   get_user_code (const std::string& fname)
   {
-    octave_user_code *dbg_fcn = nullptr;
-
-    if (fname.empty ())
-      {
-        call_stack& cs = __get_call_stack__ ("get_user_code");
-
-        dbg_fcn = cs.debug_user_code ();
-      }
-    else
-      {
-        std::string name = fname;
+    interpreter& interp = __get_interpreter__ ("get_user_code");
 
-        if (sys::file_ops::dir_sep_char () != '/' && name[0] == '@')
-          {
-            auto beg = name.begin () + 2;  // never have @/method
-            auto end = name.end () - 1;    // never have trailing '/'
-            std::replace (beg, end, '/', sys::file_ops::dir_sep_char ());
-          }
-
-        size_t name_len = name.length ();
-
-        if (name_len > 2 && name.substr (name_len-2) == ".m")
-          name = name.substr (0, name_len-2);
-
-        symbol_table& symtab = __get_symbol_table__ ("get_user_code");
-
-        octave_value fcn = symtab.find_function (name);
-
-        if (fcn.is_defined () && fcn.is_user_code ())
-          dbg_fcn = fcn.user_code_value ();
-      }
-
-    return dbg_fcn;
+    return interp.get_user_code (fname);
   }
 }
diff --git a/libinterp/parse-tree/bp-table.h b/libinterp/parse-tree/bp-table.h
--- a/libinterp/parse-tree/bp-table.h
+++ b/libinterp/parse-tree/bp-table.h
@@ -31,32 +31,34 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_map;
 class octave_user_code;
 class octave_value_list;
 
 namespace octave
 {
+  class interpreter;
+
   struct bp_type
   {
     int line;
     std::string cond;
 
     bp_type (int l, const std::string& c) : line (l), cond (c) { }
   };
 
   // Interface to breakpoints.
   class OCTINTERP_API bp_table
   {
   public:
 
-    bp_table (void)
-      : m_bp_set (), m_errors_that_stop (), m_caught_that_stop (),
-        m_warnings_that_stop ()
+    bp_table (interpreter& interp)
+      : m_interpreter (interp), m_bp_set (), m_errors_that_stop (),
+        m_caught_that_stop (), m_warnings_that_stop ()
     { }
 
     ~bp_table (void) = default;
 
     // mapping from (FIXME: arbitrary index??) to line number of breakpoint
     typedef std::map<int, int> intmap;
 
     typedef intmap::const_iterator const_intmap_iterator;
@@ -123,16 +125,18 @@ namespace octave
                                   std::string&, bp_table::intmap&,
                                   std::string&);
 
   private:
 
     typedef std::set<std::string>::const_iterator const_bp_set_iterator;
     typedef std::set<std::string>::iterator bp_set_iterator;
 
+    interpreter& m_interpreter;
+
     // Set of function (.m file) names containing at least one breakpoint.
     std::set<std::string> m_bp_set;
 
     // Set of error and warning message IDs that cause us to stop
     // *if* Vdebug_on_error / Vdebug_on_caught / Vdebug_on_warning is set.
     // Empty means stop on any error / caught error / warning.
     std::set<std::string> m_errors_that_stop;
     std::set<std::string> m_caught_that_stop;
@@ -144,12 +148,13 @@ namespace octave
 
     int remove_breakpoint_1 (octave_user_code *fcn, const std::string&,
                              const intmap& lines);
 
     intmap remove_all_breakpoints_in_file_1 (octave_user_code *fcn,
                                              const std::string& fname);
   };
 
+  OCTAVE_DEPRECATED (5, "use 'octave::get_user_code' instead")
   extern octave_user_code * get_user_code (const std::string& fname = "");
 }
 
 #endif
