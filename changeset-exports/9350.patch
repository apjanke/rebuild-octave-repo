# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245055210 -7200
#      Mon Jun 15 10:40:10 2009 +0200
# Node ID 16a5f9e1fdb3d82cb3cf8ea7f4df6792cb3d691d
# Parent  93664cbb732c45ff8ccbec97a1c2bb57df9110dd
cache idx_vector result in matrices once used for indexing

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2009-06-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-mat.h (octave_base_matrix::idx_cache): New member field.
+	(octave_base_matrix::typ): Turn to MatrixType *.
+	(octave_base_matrix::octave_base_matrix (...)): Update constructors.
+	(octave_base_matrix::clear_cached_info,
+	octave_base_matrix::set_idx_cache): New member functions.
+	* ov-base-mat.cc (octave_base_matrix::assign,
+	octave_base_matrix::delete_elements): Call clear_cached_info here.
+	* ov-re-mat.h (octave_matrix::index_vector): Use idx_cache.
+	* ov-flt-re-mat.h (octave_float_matrix::index_vector): Ditto.
+	* ov-bool-mat.h (octave_bool_matrix::index_vector): Ditto.
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::index_vector): Ditto.
+	* ov-range.h (octave_range::idx_cache): New member field.
+	(octave_range::octave_range (...)): Update constructors.
+	(octave_range::clear_cached_info,
+	octave_base_matrix::set_idx_cache): New member functions.
+	(octave_range::idx_vector): Use idx_cache.
+
 2009-06-14  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (axes::properties::xtick, axes::properties::ytick,
 	axes::properties::ztick, axes::properties::xticklabelmode,
 	axes::properties::yticklabelmode, axes::properties::zticklabelmode):
 	Add 'u' modifier to enable updaters.
 	(axes::properties::calc_ticklabels): New function to update tick
 	labels.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -268,18 +268,27 @@ octave_base_matrix<MT>::assign (const oc
           }
 
         if (! error_state)
           matrix.assign (idx_vec, rhs);
       }
       break;
     }
 
-  // Invalidate the matrix type
-  typ.invalidate_type ();
+  // Clear cache.
+  clear_cached_info ();
+}
+
+template <class MT>
+MatrixType 
+octave_base_matrix<MT>::matrix_type (const MatrixType& _typ) const
+{ 
+  delete typ; 
+  typ = new MatrixType (_typ);
+  return *typ;
 }
 
 template <class MT>
 void
 octave_base_matrix<MT>::assign (const octave_value_list& idx,
                                 typename MT::element_type rhs)
 {
   octave_idx_type n_idx = idx.length ();
@@ -363,35 +372,35 @@ octave_base_matrix<MT>::assign (const oc
               }
             else
               matrix.assign (idx_vec, mrhs);
           }
       }
       break;
     }
 
-  // Invalidate the matrix type
-  typ.invalidate_type ();
+  // Clear cache.
+  clear_cached_info ();
 }
 
 template <class MT>
 void
 octave_base_matrix<MT>::delete_elements (const octave_value_list& idx)
 {
   octave_idx_type len = idx.length ();
 
   Array<idx_vector> ra_idx (len);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx(i) = idx(i).index_vector ();
 
   matrix.delete_elements (ra_idx);
 
-  // Invalidate the matrix type
-  typ.invalidate_type ();
+  // Clear cache.
+  clear_cached_info ();
 }
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::resize (const dim_vector& dv, bool fill) const
 {
   MT retval (matrix); 
   if (fill)
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -46,29 +46,33 @@ class tree_walker;
 
 template <class MT>
 class
 octave_base_matrix : public octave_base_value
 {
 public:
 
   octave_base_matrix (void)
-    : octave_base_value (), typ (MatrixType ()) { }
+    : octave_base_value (), typ (), idx_cache () { }
 
   octave_base_matrix (const MT& m, const MatrixType& t = MatrixType ())
-    : octave_base_value (), matrix (m), typ (t)
+    : octave_base_value (), matrix (m), 
+      typ (t.is_known () ? new MatrixType(t) : 0), idx_cache ()
   {
     if (matrix.ndims () == 0)
       matrix.resize (dim_vector (0, 0));
   }
 
   octave_base_matrix (const octave_base_matrix& m)
-    : octave_base_value (), matrix (m.matrix), typ (m.typ) { }
+    : octave_base_value (), matrix (m.matrix), 
+      typ (m.typ ? new MatrixType (*m.typ) : 0), 
+      idx_cache (m.idx_cache ? new idx_vector (*m.idx_cache) : 0) 
+    { }
 
-  ~octave_base_matrix (void) { }
+  ~octave_base_matrix (void) { clear_cached_info (); }
 
   octave_base_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_matrix (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return MT (matrix.squeeze ()); }
 
@@ -108,19 +112,18 @@ public:
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return MT (matrix.permute (vec, inv)); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
-  MatrixType matrix_type (void) const { return typ; }
-  MatrixType matrix_type (const MatrixType& _typ) const
-    { MatrixType ret = typ; typ = _typ; return ret; }
+  MatrixType matrix_type (void) const { return typ ? *typ : MatrixType (); }
+  MatrixType matrix_type (const MatrixType& _typ) const;
 
   octave_value diag (octave_idx_type k = 0) const
     { return octave_value (matrix.diag (k)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
@@ -154,17 +157,31 @@ public:
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
 protected:
 
   MT matrix;
 
-  mutable MatrixType typ;
+  idx_vector set_idx_cache (const idx_vector& idx) const
+    {
+      delete idx_cache;
+      idx_cache = idx ? new idx_vector (idx) : 0;
+      return idx;
+    }
+
+  void clear_cached_info (void) const
+    {
+      delete typ; typ = 0;
+      delete idx_cache; idx_cache = 0;
+    } 
+
+  mutable MatrixType *typ;
+  mutable idx_vector *idx_cache;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -72,17 +72,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
-  idx_vector index_vector (void) const { return idx_vector (matrix); }
+  idx_vector index_vector (void) const 
+    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   int8NDArray
diff --git a/src/ov-flt-re-mat.h b/src/ov-flt-re-mat.h
--- a/src/ov-flt-re-mat.h
+++ b/src/ov-flt-re-mat.h
@@ -83,17 +83,18 @@ public:
 
   ~octave_float_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_float_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_float_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
-  idx_vector index_vector (void) const { return idx_vector (matrix); }
+  idx_vector index_vector (void) const 
+    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -311,17 +311,18 @@ public:
   void decrement (void)
    { 
      matrix -= OCTAVE_INT_T (1); 
      if (OCTAVE_INT_T::get_math_trunc_flag ())
        gripe_unop_integer_math_truncated ("--", type_name (). c_str ());
       OCTAVE_INT_T::clear_conv_flag ();
    }
 
-  idx_vector index_vector (void) const { return idx_vector (matrix); }
+  idx_vector index_vector (void) const 
+    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
   mxArray *as_mxArray (void) const
   {
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -51,36 +51,38 @@ class tree_walker;
 // Range values.
 
 class
 octave_range : public octave_base_value
 {
 public:
 
   octave_range (void)
-    : octave_base_value () { }
+    : octave_base_value (), idx_cache () { }
 
   octave_range (double base, double limit, double inc)
-    : octave_base_value (), range (base, limit, inc)
+    : octave_base_value (), range (base, limit, inc), idx_cache ()
       {
 	if (range.nelem () < 0)
 	  ::error ("invalid range");
       }
 
   octave_range (const Range& r)
-    : octave_base_value (), range (r)
+    : octave_base_value (), range (r), idx_cache ()
       {
 	if (range.nelem () < 0 && range.nelem () != -2)
 	  ::error ("invalid range");
       }
 
   octave_range (const octave_range& r)
-    : octave_base_value (), range (r.range) { }
+    : octave_base_value (), range (r.range), 
+      idx_cache (r.idx_cache ? new idx_vector (*r.idx_cache) : 0)
+    { }
 
-  ~octave_range (void) { }
+  ~octave_range (void) { clear_cached_info (); }
 
   octave_base_value *clone (void) const { return new octave_range (*this); }
 
   // A range is really just a special kind of real matrix object.  In
   // the places where we need to call empty_clone, it makes more sense
   // to create an empty matrix (0x0) instead of an empty range (1x0).
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
@@ -93,17 +95,18 @@ public:
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
-  idx_vector index_vector (void) const { return idx_vector (range); }
+  idx_vector index_vector (void) const 
+    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (range)); }
 
   dim_vector dims (void) const
     { 
       octave_idx_type n = range.nelem ();
       return dim_vector (n > 0, n);
     }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
@@ -330,16 +333,30 @@ public:
   RANGE_MAPPER (sqrt)
   RANGE_MAPPER (tan)
   RANGE_MAPPER (tanh)
 
 private:
 
   Range range;
 
+  idx_vector set_idx_cache (const idx_vector& idx) const
+    {
+      delete idx_cache;
+      idx_cache = idx ? new idx_vector (idx) : 0;
+      return idx;
+    }
+
+  void clear_cached_info (void) const
+    {
+      delete idx_cache; idx_cache = 0;
+    } 
+
+  mutable idx_vector *idx_cache;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -85,17 +85,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
-  idx_vector index_vector (void) const { return idx_vector (matrix); }
+  idx_vector index_vector (void) const
+    { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
