# HG changeset patch
# User Brian Gough <bjg@network-theory.co.uk>
# Date 1235146621 18000
#      Fri Feb 20 11:17:01 2009 -0500
# Node ID 8463d1a2e54495f840191db38582c48a1f32420f
# Parent  55d999c237287e0f0c91aaafe9e0ea31407a2e44
Doc fixes.

 * 2]$$. => 2].$$
 * @var{extrapval} => @var{extrapval}.
 * call helloworld.oct => called @file{helloworld.oct}
 * @itemize => @table @code
 * shows. => shows:
 * save => @code{save}
 * @ref{Breakpoints} => @pxref{Breakpoints}
 * add @noindent following example
 * which is computed => and compute it
 * clarify wording
 * remove comma
 * good => well
 * set => number
 * by writing => with the command
 * has the option of directly calling => can call
 * [-like-] {+of the right size,+}
 * solvers => routines
 * handle => test for
 * add introductory section
 * add following
 * {+the+} [0..bitmax] => [0,bitmax]
 * of the => with
 * number => value
 * add usual
 * Besides when doing comparisons, logical => Logical {+also+}
 * array comparison => array, comparisons
 * param => parameter
 * works very similar => is similar
 * strings, => strings
 * most simple => simplest
 * easier => more easily
 * like => as
 * called => called,
 * clarify wording
 * you should simply type => use
 * clarify wording
 * means => way
 * equally => also
 * [-way much-] {+way+}
 * add with mean value parameter given by the first argument, @var{l}
 * add Functions described as @dfn{mapping functions} apply the given
   operation to each element when given a matrix argument.
 * in this brief introduction => here
 * It is worth noticing => Note
 * add following
 * means => ways

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -15,17 +15,17 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Arithmetic
 @chapter Arithmetic
 
 Unless otherwise noted, all of the functions described in this chapter
-will work for real and complex scalar or matrix arguments.
+will work for real and complex scalar or matrix arguments. Functions described as @dfn{mapping functions} apply the given operation to each element when given a matrix argument.
 
 @menu
 * Utility Functions::           
 * Complex Arithmetic::          
 * Trigonometry::                
 * Sums and Products::           
 * Special Functions::           
 * Coordinate Transformations::
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -527,17 +527,17 @@ this can be performed by the @code{celld
 @node Creating Cell Arrays
 @subsection Creating Cell Array
 
 The introductory example showed how to create a cell array containing
 currently available variables. In many situations, however, it is useful
 to create a cell array and then fill it with data.
 
 The @code{cell} function returns a cell array of a given size, containing
-empty matrices. This function works very similar to the @code{zeros}
+empty matrices. This function is similar to the @code{zeros}
 function for creating new numerical arrays. The following example creates
 a 2-by-2 cell array containing empty matrices
 
 @example
 @group
 c = cell(2,2)
      @result{} c =
          
@@ -655,17 +655,17 @@ a = ["hello"; "world"];
 c = cellstr (a)
      @result{} c =
          @{
            [1,1] = hello
            [2,1] = world
          @}
 @end example
 
-One further advantage of using cell arrays to store multiple strings, is
+One further advantage of using cell arrays to store multiple strings is
 that most functions for string manipulations included with Octave
 support this representation. As an example, it is possible to compare
 one string with many others using the @code{strcmp} function. If one of
 the arguments to this function is a string and the other is a cell array
 of strings, each element of the cell array will be compared the string
 argument,
 
 @example
@@ -686,19 +686,19 @@ strings, @code{strcmp}, @code{strcmpi}, 
 @DOCSTRING(iscellstr)
 
 @DOCSTRING(cellidx)
 
 @node Processing Data in Cell Arrays
 @subsection Processing Data in Cell Arrays
 
 Data that is stored in a cell array can be processed in several ways
-depending on the actual data. The most simple way to process that data
+depending on the actual data. The simplest way to process that data
 is to iterate through it using one or more @code{for} loops. The same
-idea can be implemented easier through the use of the @code{cellfun}
+idea can be implemented more easily through the use of the @code{cellfun}
 function that calls a user-specified function on all elements of a cell
 array.
 
 @DOCSTRING(cellfun)
 
 An alternative is to convert the data to a different container, such as
 a matrix or a data structure.  Depending on the data this is possible
 using the @code{cell2mat} and @code{cell2struct} functions.
@@ -760,17 +760,17 @@ printf ("%s ", c@{1@}, c@{2@}, c@{3@}, c
      @print{} GNU Octave is Free Software 
 printf ("%s ", c@{:@});
      @print{} GNU Octave is Free Software 
 @end example
 
 Just like it is possible to create a numerical array from selected
 elements of a cell array, it is possible to create a new cell array
 containing the selected elements. By surrounding the list with 
-@samp{@{} and @samp{@}} a new cell array will be created, like the
+@samp{@{} and @samp{@}} a new cell array will be created, as the
 following example illustrates
 
 @example
 a = @{1, rand(2, 2), "three"@};
 b = @{ a@{ [1, 3] @} @}
      @result{} b =
          @{
            [1,1] =  1
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -36,33 +36,33 @@ debug mode.
 * Debug Mode::
 * Call Stack::
 @end menu
 
 @node Entering Debug Mode
 @section Entering Debug Mode
 
 There are two basic means of interrupting the execution of an Octave
-script. These are breakpoints @ref{Breakpoints}, discussed in the next
+script. These are breakpoints @pxref{Breakpoints}, discussed in the next
 section and interruption based on some condition.
 
 Octave supports three means to stop execution based on the values set in
 the functions @code{debug_on_interrupt}, @code{debug_on_warning} and
 @code{debug_on_error}.
 
 @DOCSTRING(debug_on_interrupt)
 
 @DOCSTRING(debug_on_warning)
 
 @DOCSTRING(debug_on_error)
 
 @node Leaving Debug Mode
 @section Leavinging Debug Mode
 
-To leave the debug mode, you should simply type either @code{dbcont} 
+To leave the debug mode, use either @code{dbcont} 
 or @code{return}.
 
 @DOCSTRING(dbcont)
 
 To quit debug mode and return directly to the prompt @code{dbquit}
 should be used instead
 
 @DOCSTRING(dbquit)
@@ -102,18 +102,17 @@ be queried with the @code{dbstatus} func
 
 @noindent
 Taking the above as an example, @code{dbstatus ("asind")} should return
 27. The breakpoints can then be cleared with the @code{dbclear} function
 
 @DOCSTRING(dbclear)
 
 @noindent
-To clear all of the breakpoints in a function the recommended means,
-following the above example, is then
+These functions can be used to clear all the breakpoints in a function.  For example,
 
 @example
 dbclear ("asind", dbstatus ("asind"));
 @end example
 
 A breakpoint can be set in a subfunction. For example if a file contains
 the functions
 
@@ -135,17 +134,17 @@ with
 dbstop (["func1", filemarker(), "func2"])
 @result{} 5
 @end group
 @end example
 
 Note that @code{filemarker} returns a character that marks the
 subfunctions from the file containing them.
 
-Another simple means of setting a breakpoint in an Octave script is the
+Another simple way of setting a breakpoint in an Octave script is the
 use of the @code{keyboard} function.
 
 @DOCSTRING(keyboard)
 
 @noindent
 The @code{keyboard} function is typically placed in a script at the
 point where the user desires that the execution is stopped. It
 automatically sets the running script into the debug mode.
@@ -162,17 +161,17 @@ Octave entered debug mode.
 
 @DOCSTRING(dbtype)
 
 You may also use @code{isdebugmode} to determine whether the debugger is
 currently active.
 
 @DOCSTRING(isdebugmode)
 
-Debug mode equally allows single line stepping through a function using
+Debug mode also allows single line stepping through a function using
 the commands @code{dbstep}.
 
 @DOCSTRING(dbstep)
 
 @node Call Stack
 @section Call Stack
 
 @DOCSTRING(dbstack)
diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -16,17 +16,17 @@
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Differential Equations
 @chapter Differential Equations
 
 Octave has built-in functions for solving ordinary differential equations,
 and differential-algebraic equations.
-All solvers are based on reliable ODE solvers written in Fortran.
+All solvers are based on reliable ODE routines written in Fortran.
 
 @menu
 * Ordinary Differential Equations::  
 * Differential-Algebraic Equations::  
 @end menu
 
 @cindex Differential Equations
 @cindex ODE
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -32,17 +32,17 @@
 @end macro
 
 @node Dynamically Linked Functions
 @appendix Dynamically Linked Functions
 @cindex dynamic-linking
 
 Octave has the possibility of including compiled code as dynamically
 linked extensions and then using these extensions as if they were part
-of Octave itself.  Octave has the option of directly calling C++ code
+of Octave itself.  Octave can call C++ code
 through its native oct-file interface or C code through its mex
 interface.  It can also indirectly call functions written in any other
 language through a simple wrapper.  The reasons to write code in a
 compiled language might be either to link to an existing piece of code
 and allow it to be used within Octave, or to allow improved performance
 for key pieces of code.
 
 Before going further, you should first determine if you really need to
@@ -53,17 +53,17 @@ address ask yourself
 @itemize @bullet
 @item
 Can I get the same functionality using the Octave scripting language only?
 @item
 Is it thoroughly optimized Octave code?  Vectorization of Octave code,
 doesn't just make it concise, it generally significantly improves its
 performance.  Above all, if loops must be used, make sure that the
 allocation of space for variables takes place outside the loops using an
-assignment to a like matrix or zeros.
+assignment to a matrix of the right size, or zeros.
 @item
 Does it make as much use as possible of existing built-in library
 routines?  These are highly optimized and many do not carry the overhead
 of being interpreted.
 @item
 Does writing a dynamically linked function represent useful investment
 of your time, relative to staying in Octave?
 @end itemize
@@ -142,17 +142,17 @@ it attempts to find the function in, the
 macro must match the filename of the oct-file.  Therefore, the above
 function should be in a file @file{helloworld.cc}, and it should be
 compiled to an oct-file using the command
 
 @example
 mkoctfile helloworld.cc
 @end example
 
-This will create a file call helloworld.oct, that is the compiled
+This will create a file called @file{helloworld.oct}, that is the compiled
 version of the function.  It should be noted that it is perfectly
 acceptable to have more than one @code{DEFUN_DLD} function in a source
 file.  However, there must either be a symbolic link to the oct-file for
 each of the functions defined in the source code with the @code{DEFUN_DLD}
 macro or the autoload (@ref{Function Files}) function should be used.
 
 The rest of this function then shows how to find the number of input
 arguments, how to print through the octave pager, and return from the
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -118,17 +118,17 @@ m-files.  For example,
 @example
 function create_data
   x = linspace (0, 10, 10);
   y = sin (x);
   save mydata x y
 endfunction
 @end example
 
-With @code{evalin}, you could write save as follows:
+With @code{evalin}, you could write @code{save} as follows:
 
 @example
 function save (file, name1, name2)
   f = open_save_file (file);
   save_var(f, name1, evalin ("caller", name1));
   save_var(f, name2, evalin ("caller", name2));
 endfunction
 @end example
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -630,17 +630,17 @@ ignore the time stamps for all function 
 * Overloading and Autoloading::
 * Function Locking::
 * Function Precedence::
 @end menu
 
 @node Manipulating the load path
 @subsection Manipulating the load path
 
-When a function is called Octave searches a list of directories for
+When a function is called, Octave searches a list of directories for
 a file that contains the function declaration. This list of directories
 is known as the load path. By default the load path contains
 a list of directories distributed with Octave plus the current
 working directory. To see your current load path call the @code{path}
 function without any input or output arguments.
 
 It is possible to add or remove directories to or from the load path
 using @code{addpath} and @code{rmpath}. As an example, the following
@@ -770,17 +770,17 @@ A single dynamically linked file might d
 functions. However, as Octave searches for functions based on the
 functions filename, Octave needs a manner in which to find each of the
 functions in the dynamically linked file. On operating systems that
 support symbolic links, it is possible to create a symbolic link to the
 original file for each of the functions which it contains.
 
 However, there is at least one well known operating system that doesn't
 support symbolic links. Making copies of the original file for each of
-the functions is also possible, but is undesirable as it multiples the
+the functions is undesirable as it increases the
 amount of disk space used by Octave. Instead Octave supplies the
 @code{autoload} function, that permits the user to define in which
 file a certain function will be found.
 
 @DOCSTRING(autoload)
 
 @node Function Locking
 @subsection Function Locking
@@ -810,17 +810,17 @@ mislocked ("my_function")
 @result{} ans = 1
 munlock ("my_function");
 mislocked ("my_function")
 @result{} ans = 0
 @end group
 @end example
 
 A common use of @code{mlock} is to prevent persistent variables from
-being removed from memory, as the following example shows.
+being removed from memory, as the following example shows:
 
 @example
 @group
 function count_calls()
   persistent calls = 0;
   printf ("'count_calls' has been called %d times\n",
           ++calls);
 endfunction
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -108,16 +108,17 @@ ti = t(1) + [0 : k-1]*dt*n/k;
 y = sin (4*t + 0.3) .* cos (3*t - 0.1);
 yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
 plot (ti, yp, 'g', ti, interp1(t, y, ti, 'spline'), 'b', ...
       ti, interpft (y, k), 'c', t, y, 'r+');
 legend ('sin(4t+0.3)cos(3t-0.1','spline','interpft','data');
 @end group
 @end example
 
+@noindent
 @ifinfo
 which demonstrates the poor behavior of Fourier interpolation for non-periodic functions.
 @end ifinfo
 @ifnotinfo
 which demonstrates the poor behavior of Fourier interpolation for non-periodic functions, as can be seen in @ref{fig:interpft}.
 
 @float Figure,fig:interpft
 @image{interpft,8cm}
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -15,17 +15,17 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Input and Output
 @chapter Input and Output
 
 Octave supports several ways of reading and writing data to or from the
-prompt or a file.  The most simple functions for data Input and Output
+prompt or a file.  The simplest functions for data Input and Output
 (I/O) are easy to use, but only provides limited control of how
 data is processed.  For more control, a set of functions modelled
 after the C standard library are also provided by Octave.
 
 @menu
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 @end menu
@@ -176,17 +176,17 @@ There are three functions that modify th
 @DOCSTRING(default_save_options)
 
 @DOCSTRING(save_precision)
 
 @DOCSTRING(save_header_format_string)
 
 @DOCSTRING(native_float_format)
 
-It is possible to write data to a file in a way much similar to the
+It is possible to write data to a file in a similar way to the
 @code{disp} function for writing data to the screen.  The @code{fdisp}
 works just like @code{disp} except its first argument is a file pointer
 as created by @code{fopen}.  As an example, the following code writes
 to data @samp{myfile.txt}.
 
 @example
 fid = fopen ("myfile.txt", "w");
 fdisp (fid, "3/8 is ");
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -123,30 +123,30 @@ analytically as
                {\partial f_2 \over \partial x_1} &
                {\partial f_2 \over \partial x_2} \cr}\right] =
 \left[\matrix{ 3 x_2 - 4 x_1                  &
                4 \cos(x_2) + 3 x_1            \cr
                -2 x_2^2 - 3 \sin(x_1) + 6 x_1 &
                -4 x_1 x_2                     \cr }\right]
 $$
 @end tex
-which is computed with the following Octave function
+and compute it with the following Octave function
 @end iftex
 
 @example
 function J = jacobian(x)
   J(1,1) =  3*x(2) - 4*x(1);
   J(1,2) =  4*cos(x(2)) + 3*x(1);
   J(2,1) = -2*x(2)^2 - 3*sin(x(1)) + 6*x(1);
   J(2,2) = -4*x(1)*x(2);
 endfunction
 @end example
 
 @noindent
-Using this Jacobian is done with the following code
+The Jacobian can then be used with the following call to @code{fsolve}:
 
 @example
 [x, fval, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
 @end example
 
 @noindent
 which gives the same solution as before.
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -509,17 +509,17 @@ on integers. The operators @code{+}, @co
 work on integers of the same type. So, it is possible to add two 32 bit
 integers, but not to add a 32 bit integer and a 16 bit integer.
 
 The arithmetic operations on integers are performed by casting the
 integer values to double precision values, performing the operation, and
 then re-casting the values back to the original integer type. As the
 double precision type of Octave is only capable of representing integers
 with up to 53 bits of precision, it is not possible to perform
-arithmetic of the 64 bit integer types.
+arithmetic with 64 bit integer types.
 
 When doing integer arithmetic one should consider the possibility of
 underflow and overflow. This happens when the result of the computation
 can't be represented using the chosen integer type. As an example it is
 not possible to represent the result of @math{10 - 20} when using
 unsigned integers. Octave makes sure that the result of integer
 computations is the integer that is closest to the true result. So, the
 result of @math{10 - 20} when using unsigned integers is zero.
@@ -561,17 +561,17 @@ bitget (100 * ones (1, 8), 8:-1:1)
 @end example
 
 It should be noted that all values passed to the bit manipulation
 functions of Octave are treated as integers. Therefore, even though the
 example for @code{bitset} above passes the floating point value
 @code{10}, it is treated as the bits @code{[1, 0, 1, 0]} rather than the
 bits of the native floating point format representation of @code{10}.
 
-As the maximum number that can be represented by a number is important
+As the maximum value that can be represented by a number is important
 for bit manipulation, particularly when forming masks, Octave supplies
 the function @code{bitmax}.
 
 @DOCSTRING(bitmax)
 
 This is the double precision version of the functions @code{intmax},
 previously discussed.
 
@@ -617,17 +617,17 @@ 1, 1, 1, 1, 1, 1]}.
 
 Octave has built-in support for logical values, i.e. variables that
 are either @code{true} or @code{false}. When comparing two variables,
 the result will be a logical value whose value depends on whether or
 not the comparison is true.
 
 The basic logical operations are @code{&}, @code{|}, and @code{!},
 which correspond to ``Logical And'', ``Logical Or'', and ``Logical
-Negation''. These operations all follow the rules of logic.
+Negation''. These operations all follow the usual rules of logic.
 
 It is also possible to use logical values as part of standard numerical
 calculations. In this case @code{true} is converted to @code{1}, and
 @code{false} to 0, both represented using double precision floating
 point numbers. So, the result of @code{true*22 - false/6} is @code{22}.
 
 Logical values can also be used to index matrices and cell arrays.
 When indexing with a logical array the result will be a vector containing
@@ -640,17 +640,17 @@ idx = (data <= 2);
 data(idx)
      @result{} ans = [ 1; 4 ]
 @end example
 
 @noindent
 Instead of creating the @code{idx} array it is possible to replace
 @code{data(idx)} with @code{data( data <= 2 )} in the above code.
 
-Besides when doing comparisons, logical values can be constructed by
+Logical values can also be constructed by
 casting numeric objects to logical values, or by using the @code{true}
 or @code{false} functions.
 
 @DOCSTRING(logical)
 
 @DOCSTRING(true)
 
 @DOCSTRING(false)
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -122,17 +122,17 @@ Octave can find the parameter @math{b} s
 @iftex
 @tex
 $y = xb$
 @end tex
 @end iftex
 @ifnottex
 @math{y = x*b}
 @end ifnottex
-fits data @math{(x,y)} as good as possible, assuming zero-mean
+fits data @math{(x,y)} as well as possible, assuming zero-mean
 Gaussian noise.  If the noise is assumed to be isotropic the problem
 can be solved using the @samp{\} or @samp{/} operators, or the @code{ols}
 function.  In the general case where the noise is assumed to be anisotropic
 the @code{gls} is needed.
 
 @DOCSTRING(ols)
 
 @DOCSTRING(gls)
diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -36,17 +36,17 @@ website for an updated reference.
 * Creating Packages::           
 @end menu
 
 @findex pkg
 @node Installing and Removing Packages
 @section Installing and Removing Packages
 
 Assuming a package is available in the file @code{image-1.0.0.tar.gz}
-it can be installed from the Octave prompt by writing
+it can be installed from the Octave prompt with the command
 
 @example
 pkg install image-1.0.0.tar.gz
 @end example
 
 @noindent
 If the package is installed successfully nothing will be printed on
 the prompt, but if an error occurred during installation it will be
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -46,17 +46,17 @@ p(x) = @var{c}(1) x^@var{N} + ... + @var
 * Polynomial Interpolation::
 * Miscellaneous Functions::
 @end menu
 
 @node Evaluating Polynomials
 @section Evaluating Polynomials
 
 The value of a polynomial represented by the vector @var{c} can be evaluated
-at the point @var{x} very easily, as the following example shows.
+at the point @var{x} very easily, as the following example shows:
 
 @example
 N = length(c)-1;
 val = dot( x.^(N:-1:0), c );
 @end example
 
 @noindent
 While the above example shows how easy it is to compute the value of a
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -14,17 +14,17 @@
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Sets
 @chapter Sets
 
-Octave has a limited set of functions for managing sets of data, where a
+Octave has a limited number of functions for managing sets of data, where a
 set is defined as a collection of unique elements.  In Octave a set is
 represented as a vector of numbers.
 
 @DOCSTRING(create_set)
 
 @DOCSTRING(unique)
 
 @menu
diff --git a/doc/interpreter/signal.txi b/doc/interpreter/signal.txi
--- a/doc/interpreter/signal.txi
+++ b/doc/interpreter/signal.txi
@@ -14,16 +14,24 @@
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Signal Processing
 @chapter Signal Processing
 
+
+This chapter describes the signal processing and fast fourier
+transform functions available in Octave.  Fast fourier transforms are
+computed with the @sc{fftw} or @sc{Fftpack} libraries depending on how
+Octave is built.
+ 
+
+
 @DOCSTRING(detrend)
 
 @DOCSTRING(fft)
 
 Octave uses the FFTW libraries to perform FFT computations. When Octave
 starts up and initializes the FFTW libraries, they read a system wide
 file (on a Unix system, it is typically @file{/etc/fftw/wisdom}) that
 contains information useful to speed up FFT computations.  This
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -294,17 +294,17 @@ number of memory allocations.
 @DOCSTRING(spalloc)
 
 @DOCSTRING(sparse)
 
 @DOCSTRING(spconvert)
 
 The above problem of memory reallocation can be avoided in
 oct-files. However, the construction of a sparse matrix from an oct-file
-is more complex than can be discussed in this brief introduction, and
+is more complex than can be discussed here, and
 you are referred to chapter @ref{Dynamically Linked Functions}, to have
 a full description of the techniques involved.
 
 @node Information
 @subsection Finding out Information about Sparse Matrices
 
 There are a number of functions that allow information concerning
 sparse matrices to be obtained. The most basic of these is
@@ -621,17 +621,17 @@ and @code{U} than the equivalent factori
 
 Several functions are available to reorder depending on the type of the
 matrix to be factorized. If the matrix is symmetric positive-definite,
 then @dfn{symamd} or @dfn{csymamd} should be used. Otherwise
 @dfn{amd}, @dfn{colamd} or @dfn{ccolamd} should be used. For completeness
 the reordering functions @dfn{colperm} and @dfn{randperm} are
 also available.
 
-@xref{fig:simplematrix}, for an example of the structure of a simple 
+@xref{fig:simplematrix} for an example of the structure of a simple 
 positive definite matrix.
 
 @float Figure,fig:simplematrix
 @image{spmatrix,8cm}
 @caption{Structure of simple sparse matrix.}
 @end float
 
 The standard Cholesky factorization of this matrix can be
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -34,17 +34,17 @@ a = [ 0.9, 0.7;
       0.5, 0.4 ];
 @end example
 
 @noindent
 contains three observations from a two-dimensional distribution.
 While this is the default data arrangement, most functions support
 different arrangements.
 
-It should be noted that the statistics functions don't handle data
+It should be noted that the statistics functions don't test for data
 containing NaN, NA, or Inf.  Such values need to be handled explicitly.
 
 @menu
 * Descriptive Statistics::
 * Basic Statistical Functions:: 
 * Statistical Plots:: 
 * Tests::                       
 * Models::                      
@@ -131,17 +131,17 @@ Octave also supports various helpful sta
 
 @c Should hist be moved to here, or perhaps the qqplot and ppplot
 @c functions should be moved to the Plotting Chapter?
 
 Octave can create Quantile Plots (QQ-Plots), and Probability Plots
 (PP-Plots).  These are simple graphical tests for determining if a
 data set comes from a certain distribution.
 
-It is worth noticing that Octave can also show histograms of data
+Note that Octave can also show histograms of data
 using the @code{hist} function as described in
 @ref{Two-Dimensional Plots}.
 
 @DOCSTRING(qqplot)
 
 @DOCSTRING(ppplot)
 
 @node Tests
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -360,18 +360,18 @@ data as strings is the @code{sprintf} fu
 
 @DOCSTRING(num2str)
 
 @DOCSTRING(int2str)
 
 @node Comparing Strings
 @section Comparing Strings
 
-Since a string is a character array comparison between strings works
-element by element as the following example shows.
+Since a string is a character array, comparisons between strings work
+element by element as the following example shows:
 
 @example
 GNU = "GNU's Not UNIX";
 spaces = (GNU == " ")
      @result{} spaces =
        0   0   0   0   0   1   0   0   0   1   0   0   0   0
 @end example
 
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -479,17 +479,17 @@ which produces
 @result{} 4
 @end group
 @end example
 
 The @code{@@group} block prevents the example from being split across a
 page boundary, while the @code{@@result@{@}} macro produces a right
 arrow signifying the result of a command. 
 
-In many cases a function has multiple means in which it can be called,
+In many cases a function has multiple ways in which it can be called,
 and the @code{@@deftypefnx} macro can be used to give alternatives. For
 example
 
 @example
 @group
 -*- texinfo -*-
 @@deftypefn@{Function File@} @{@@var@{a@} = @} fn (@@var@{x@}, @dots{})
 @@deftypefnx@{Function File@} @{@@var@{a@} = @} fn (@@var@{y@}, @dots{})
diff --git a/scripts/general/bicubic.m b/scripts/general/bicubic.m
--- a/scripts/general/bicubic.m
+++ b/scripts/general/bicubic.m
@@ -17,17 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{zi}=} bicubic (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi}, @var{extrapval})
 ##
 ## Return a matrix @var{zi} corresponding to the bicubic
 ## interpolations at @var{xi} and @var{yi} of the data supplied
 ## as @var{x}, @var{y} and @var{z}. Points outside the grid are set
-## to @var{extrapval}
+## to @var{extrapval}.
+
 ##
 ## See @url{http://wiki.woodpecker.org.cn/moin/Octave/Bicubic}
 ## for further information.
 ## @seealso{interp2}
 ## @end deftypefn
 
 ## Bicubic interpolation method.
 ## Author: Hoxide Ma <hoxide_dirac@yahoo.com.cn>
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -44,17 +44,17 @@
 ## 1:columns (@var{z})}
 ## 
 ## @item interp2 (@var{z}, @var{n}) 
 ## Interleaves the matrix @var{z} n-times. If @var{n} is omitted a value
 ## of @code{@var{n} = 1} is assumed.
 ## @end table
 ##
 ## The variable @var{method} defines the method to use for the
-## interpolation. It can take one of the values
+## interpolation. It can take one of the following values 
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors.
 ## @item 'pchip'
 ## Piece-wise cubic hermite interpolating polynomial (not implemented yet).
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -28,17 +28,17 @@
 ##
 ## @code{structfun} accepts an arbitrary function @var{func} in the form of 
 ## an inline function, function handle, or the name of a function (in a 
 ## character string). In the case of a character string argument, the 
 ## function must accept a single argument named @var{x}, and it must return 
 ## a string value. If the function returns more than one argument, they are
 ## returned as separate output variables.
 ##
-## If the param "UniformOutput" is set to true (the default), then the function
+## If the parameter "UniformOutput" is set to true (the default), then the function
 ## must return a single element which will be concatenated into the
 ## return value. If "UniformOutput" is false, the outputs placed in a structure
 ## with the same fieldnames as the input structure.
 ## 
 ## @example
 ## @group
 ## s.name1 = "John Smith"; 
 ## s.name2 = "Jill Jones"; 
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -45,17 +45,17 @@
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## @code{[@var{s1}, @var{s2}, @dots{}, @var{sk}, @var{n}]}
 ## @end ifnottex
 ## or
 ## @iftex
 ## @tex
-## $$[s_1, s_2, \cdots, s_k, n + 2]$$.
+## $$[s_1, s_2, \cdots, s_k, n + 2].$$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## @code{[@var{s1}, @var{s2}, @dots{}, @var{sk}, @var{n} + 2]}.
 ## @end ifnottex
 ## The array is then reshaped internally to a matrix where the leading
 ## dimension is given by 
 ## @iftex
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -86,17 +86,17 @@ can return one or more output arguments.
 cellfun (@@atan2, @{1, 0@}, @{0, 1@})\n\
 @result{}ans = [1.57080   0.00000]\n\
 @end group\n\
 @end example\n\
 \n\
 Note that the default output argument is an array of the same size as the\n\
 input arguments.\n\
 \n\
-If the param 'UniformOutput' is set to true (the default), then the function\n\
+If the parameter 'UniformOutput' is set to true (the default), then the function\n\
 must return a single element which will be concatenated into the\n\
 return value. If 'UniformOutput' is false, the outputs are concatenated in\n\
 a cell array. For example\n\
 \n\
 @example\n\
 @group\n\
 cellfun (\"tolower(x)\", @{\"Foo\", \"Bar\", \"FooBar\"@},\n\
          \"UniformOutput\",false)\n\
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -861,17 +861,17 @@ r = r / sum (r)\n\
 
 
 DEFUN_DLD (randp, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} randp (@var{l}, @var{x})\n\
 @deftypefnx {Loadable Function} {} randp (@var{l}, @var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} randp (\"state\", @var{x})\n\
 @deftypefnx {Loadable Function} {} randp (\"seed\", @var{x})\n\
-Return a matrix with Poisson distributed random elements. The arguments\n\
+Return a matrix with Poisson distributed random elements with mean value parameter given by the first argument, @var{l}. The arguments\n\
 are handled the same as the arguments for @code{rand}, except for the\n\
 argument @var{l}.\n\
 \n\
 Five different algorithms are used depending on the range of @var{l}\n\
 and whether or not @var{l} is a scalar or a matrix.\n\
 \n\
 @table @asis\n\
 @item For scalar @var{l} <= 12, use direct method.\n\
diff --git a/src/DLD-FUNCTIONS/spparms.cc b/src/DLD-FUNCTIONS/spparms.cc
--- a/src/DLD-FUNCTIONS/spparms.cc
+++ b/src/DLD-FUNCTIONS/spparms.cc
@@ -42,19 +42,19 @@ DEFUN_DLD (spparms, args, nargout,
 @deftypefnx {Loadable Function} { } spparms (@var{vals})\n\
 @deftypefnx {Loadable Function} { } spparms ('defaults')\n\
 @deftypefnx {Loadable Function} { } spparms ('tight')\n\
 @deftypefnx {Loadable Function} { } spparms (@var{key}, @var{val})\n\
 Sets or displays the parameters used by the sparse solvers and factorization\n\
 functions. The first four calls above get information about the current\n\
 settings, while the others change the current settings. The parameters are\n\
 stored as pairs of keys and values, where the values are all floats and the\n\
-keys are one of the strings\n\
+keys are one of the following strings:\n\
 \n\
-@itemize\n\
+@table @code\n\
 @item spumoni\n\
 Printing level of debugging information of the solvers (default 0)\n\
 @item ths_rel\n\
 Included for compatibility. Not used. (default 1)\n\
 @item ths_abs\n\
 Included for compatibility. Not used. (default 1)\n\
 @item exact_d\n\
 Included for compatibility. Not used. (default 0)\n\
@@ -75,17 +75,17 @@ The pivot tolerance of the UMFPACK solve
 @item sym_tol\n\
 The pivot tolerance of the UMFPACK symmetric solvers (default 0.001)\n\
 @item bandden\n\
 The density of non-zero elements in a banded matrix before it is treated\n\
 by the LAPACK banded solvers (default 0.5)\n\
 @item umfpack\n\
 Flag whether the UMFPACK or mmd solvers are used for the LU, '\\' and\n\
 '/' operations (default 1)\n\
-@end itemize\n\
+@end table\n\
 \n\
 The value of individual keys can be set with @code{spparms (@var{key},\n\
 @var{val})}. The default values can be restored with the special keyword\n\
 'defaults'. The special keyword 'tight' can be used to set the mmd solvers\n\
 to attempt for a sparser solution at the potential cost of longer running\n\
 time.\n\
 @end deftypefn")
 {
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -260,39 +260,39 @@ along with Octave; see the file COPYING.
     print_usage (); \
  \
   return retval
 
 DEFUN (bitand, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitand (@var{x}, @var{y})\n\
 Return the bitwise AND of nonnegative integers.\n\
-@var{x}, @var{y} must be in range [0..bitmax]\n\
+@var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   BITOP (&, "bitand");
 }
 
 DEFUN (bitor, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitor (@var{x}, @var{y})\n\
 Return the bitwise OR of nonnegative integers.\n\
-@var{x}, @var{y} must be in range [0..bitmax]\n\
+@var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   BITOP (|, "bitor");
 }
 
 DEFUN (bitxor, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitxor (@var{x}, @var{y})\n\
 Return the bitwise XOR of nonnegative integers.\n\
-@var{x}, @var{y} must be in range [0..bitmax]\n\
+@var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   BITOP (^, "bitxor");
 }
 
 static int64_t
 bitshift (double a, int n, int64_t mask)
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3952,17 +3952,17 @@ so any results remain available after @c
 The following example makes the variable @var{a} with the approximate\n\
 value 3.1416 available.\n\
 \n\
 @example\n\
 eval(\"a = acos(-1);\");\n\
 @end example\n\
 \n\
 If an error occurs during the evaluation of @var{try} the @var{catch}\n\
-string is evaluated, as the following example shows.\n\
+string is evaluated, as the following example shows:\n\
 \n\
 @example\n\
 eval ('error (\"This is a bad example\");',\n\
       'printf (\"This error occurred:\\n%s\\n\", lasterr ());');\n\
      @print{} This error occurred:\n\
         This is a bad example\n\
 @end example\n\
 @end deftypefn")
