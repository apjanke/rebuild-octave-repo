# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1536408216 14400
#      Sat Sep 08 08:03:36 2018 -0400
# Node ID 8a6bf76abf31694871d2d2e9fc7bc8926b8c1a3e
# Parent  e5a73a8c116cd76ec42bb64af10bc37bafeec982
eliminate some duplicate OpenGL drawing code

* gl-render.h, gl-render.cc (opengl_renderer::draw_zoom_box,
opengl_renderer::draw_zoom_rect): New functions.

* GLCanvas.h, GLCanvas.cc (GLCanvas::m_renderer): New data member.
(GLCanvas::draw, GLCanvas::do_getPixels): Use it instead of creating
renderer locally.
(GLCanvas::drawZoomRect): Delete.
(GLCanvas::drawZoomBox): Set up parameters and call
opengl_renderer::draw_zoom_box to eliminate code duplicated in
__init_fltk__.cc.

* __init_fltk__.cc (OpenGL_fltk::zoom_box_vertex): Delete.
(OpenGL_fltk::overlay): Set up parameters and call
opengl_renderer::draw_zoom_box to eliminate code duplicated in
GLCanvas.cc.

diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -44,17 +44,17 @@ namespace QtHandles
 #  else
 #    define OCTAVE_QT_OPENGL_WIDGET_FORMAT_ARGS \
   QGLFormat (QGL::SampleBuffers | QGL::AlphaChannel),
 #  endif
 #endif
 
   GLCanvas::GLCanvas (QWidget *xparent, const graphics_handle& gh)
     : OCTAVE_QT_OPENGL_WIDGET (OCTAVE_QT_OPENGL_WIDGET_FORMAT_ARGS xparent),
-      Canvas (gh), m_glfcns ()
+      Canvas (gh), m_glfcns (), m_renderer (m_glfcns)
   {
     setFocusPolicy (Qt::ClickFocus);
     setFocus ();
   }
 
   GLCanvas::~GLCanvas (void)
   { }
 
@@ -67,20 +67,18 @@ namespace QtHandles
   void
   GLCanvas::draw (const graphics_handle& gh)
   {
     gh_manager::auto_lock lock;
     graphics_object go = gh_manager::get_object (gh);
 
     if (go)
       {
-        octave::opengl_renderer r (m_glfcns);
-
-        r.set_viewport (width (), height ());
-        r.draw (go);
+        m_renderer.set_viewport (width (), height ());
+        m_renderer.draw (go);
       }
   }
 
   uint8NDArray
   GLCanvas::do_getPixels (const graphics_handle& gh)
   {
     uint8NDArray retval;
     graphics_object go = gh_manager::get_object (gh);
@@ -99,29 +97,27 @@ namespace QtHandles
         if (go.get ("visible").string_value () == "off"
             || go.get ("__printing__").string_value () == "on")
           {
             OCTAVE_QT_OPENGL_FBO
             fbo (pos(2), pos(3),OCTAVE_QT_OPENGL_FBO::Attachment::Depth);
 
             fbo.bind ();
 
-            octave::opengl_renderer r (m_glfcns);
-            r.set_viewport (pos(2), pos(3));
-            r.draw (go);
-            retval = r.get_pixels (pos(2), pos(3));
+            m_renderer.set_viewport (pos(2), pos(3));
+            m_renderer.draw (go);
+            retval = m_renderer.get_pixels (pos(2), pos(3));
 
             fbo.release ();
           }
         else
           {
-            octave::opengl_renderer r (m_glfcns);
-            r.set_viewport (pos(2), pos(3));
-            r.draw (go);
-            retval = r.get_pixels (pos(2), pos(3));
+            m_renderer.set_viewport (pos(2), pos(3));
+            m_renderer.draw (go);
+            retval = m_renderer.get_pixels (pos(2), pos(3));
           }
 
         end_rendering ();
       }
 
     return retval;
   }
 
@@ -183,58 +179,31 @@ namespace QtHandles
         return s.select (ax, pt.x (), height () - pt.y (),
                          octave::select_ignore_hittest);
       }
 
     return graphics_object ();
   }
 
   void
-  GLCanvas::drawZoomRect (const QPoint& p1, const QPoint& p2)
-  {
-    m_glfcns.glVertex2d (p1.x (), p1.y ());
-    m_glfcns.glVertex2d (p2.x (), p1.y ());
-    m_glfcns.glVertex2d (p2.x (), p2.y ());
-    m_glfcns.glVertex2d (p1.x (), p2.y ());
-    m_glfcns.glVertex2d (p1.x (), p1.y ());
-  }
-
-  void
   GLCanvas::drawZoomBox (const QPoint& p1, const QPoint& p2)
   {
-    m_glfcns.glMatrixMode (GL_MODELVIEW);
-    m_glfcns.glPushMatrix ();
-    m_glfcns.glLoadIdentity ();
-
-    m_glfcns.glMatrixMode (GL_PROJECTION);
-    m_glfcns.glPushMatrix ();
-    m_glfcns.glLoadIdentity ();
-    m_glfcns.glOrtho (0, width (), height (), 0, 1, -1);
-
-    m_glfcns.glPushAttrib (GL_DEPTH_BUFFER_BIT | GL_CURRENT_BIT);
-    m_glfcns.glDisable (GL_DEPTH_TEST);
+    Matrix overlaycolor (3, 1);
+    overlaycolor(0) = 0.45;
+    overlaycolor(1) = 0.62;
+    overlaycolor(2) = 0.81;
+    double overlayalpha = 0.1;
+    Matrix bordercolor = overlaycolor;
+    double borderalpha = 0.9;
+    double borderwidth = 1.5;
 
-    m_glfcns.glBegin (GL_POLYGON);
-    m_glfcns.glColor4f (0.45, 0.62, 0.81, 0.1);
-    drawZoomRect (p1, p2);
-    m_glfcns.glEnd ();
-
-    m_glfcns.glLineWidth (1.5);
-    m_glfcns.glBegin (GL_LINE_STRIP);
-    m_glfcns.glColor4f (0.45, 0.62, 0.81, 0.9);
-    drawZoomRect (p1, p2);
-    m_glfcns.glEnd ();
-
-    m_glfcns.glPopAttrib ();
-
-    m_glfcns.glMatrixMode (GL_MODELVIEW);
-    m_glfcns.glPopMatrix ();
-
-    m_glfcns.glMatrixMode (GL_PROJECTION);
-    m_glfcns.glPopMatrix ();
+    m_renderer.draw_zoom_box (width (), height (),
+                              p1.x (), p1.y (), p2.x (), p2.y (),
+                              overlaycolor, overlayalpha,
+                              bordercolor, borderalpha, borderwidth);
   }
 
   void
   GLCanvas::paintGL (void)
   {
     canvasPaintEvent ();
   }
 
diff --git a/libgui/graphics/GLCanvas.h b/libgui/graphics/GLCanvas.h
--- a/libgui/graphics/GLCanvas.h
+++ b/libgui/graphics/GLCanvas.h
@@ -38,16 +38,17 @@ along with Octave; see the file COPYING.
 #  include <QGLFramebufferObject>
 #  define OCTAVE_QT_OPENGL_FBO QGLFramebufferObject
 #else
 #  error "configuration error: must have <QOpenGLWidget> or <QGLWidget>."
 #endif
 
 #include "Canvas.h"
 
+#include "gl-render.h"
 #include "qopengl-functions.h"
 
 namespace QtHandles
 {
   class GLCanvas : public OCTAVE_QT_OPENGL_WIDGET, public Canvas
   {
   public:
     GLCanvas (QWidget *parent, const graphics_handle& handle);
@@ -57,17 +58,16 @@ namespace QtHandles
 
     void draw (const graphics_handle& handle);
     uint8NDArray  do_getPixels (const graphics_handle& handle);
     void do_print (const QString& file_cmd, const QString& term,
                    const graphics_handle& handle);
     void toggleAxes (const graphics_handle& handle);
     void toggleGrid (const graphics_handle& handle);
     void autoAxes (const graphics_handle& handle);
-    void drawZoomRect (const QPoint& p1, const QPoint& p2);
     void drawZoomBox (const QPoint& p1, const QPoint& p2);
     void resize (int /* x */, int /* y */,
                  int /* width */, int /* height */) { }
     graphics_object selectFromAxes (const graphics_object& ax,
                                     const QPoint& pt);
     QWidget * qWidget (void) { return this; }
 
   protected:
@@ -81,16 +81,17 @@ namespace QtHandles
     void keyReleaseEvent (QKeyEvent *event);
 
   private:
 
     bool begin_rendering (void);
     void end_rendering (void);
 
     octave::qopengl_functions m_glfcns;
+    octave::opengl_renderer m_renderer;
 
 #  if defined (HAVE_QT_OFFSCREEN)
     QOpenGLContext m_os_context;
     QOffscreenSurface m_os_surface;
 #  endif
   };
 
 }
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1044,16 +1044,107 @@ namespace octave
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
+  void
+  opengl_renderer::draw_zoom_rect (int x1, int y1, int x2, int y2)
+  {
+#if defined (HAVE_OPENGL)
+
+    m_glfcns.glVertex2d (x1, y1);
+    m_glfcns.glVertex2d (x2, y1);
+    m_glfcns.glVertex2d (x2, y2);
+    m_glfcns.glVertex2d (x1, y2);
+    m_glfcns.glVertex2d (x1, y1);
+
+#else
+
+    octave_unused_parameter (x1);
+    octave_unused_parameter (x2);
+    octave_unused_parameter (y1);
+    octave_unused_parameter (y2);
+
+    // This shouldn't happen because construction of opengl_renderer
+    // objects is supposed to be impossible if OpenGL is not available.
+
+    panic_impossible ();
+
+#endif
+  }
+
+  void
+  opengl_renderer::draw_zoom_box (int width, int height,
+                                  int x1, int y1, int x2, int y2,
+                                  const Matrix& overlaycolor,
+                                  double overlayalpha,
+                                  const Matrix& bordercolor,
+                                  double borderalpha, double borderwidth)
+  {
+#if defined (HAVE_OPENGL)
+
+    m_glfcns.glMatrixMode (GL_MODELVIEW);
+    m_glfcns.glPushMatrix ();
+    m_glfcns.glLoadIdentity ();
+
+    m_glfcns.glMatrixMode (GL_PROJECTION);
+    m_glfcns.glPushMatrix ();
+    m_glfcns.glLoadIdentity ();
+    m_glfcns.glOrtho (0, width, height, 0, 1, -1);
+
+    m_glfcns.glPushAttrib (GL_DEPTH_BUFFER_BIT | GL_CURRENT_BIT);
+    m_glfcns.glDisable (GL_DEPTH_TEST);
+
+    m_glfcns.glBegin (GL_POLYGON);
+    m_glfcns.glColor4f (overlaycolor(0), overlaycolor(1), overlaycolor(2),
+                        overlayalpha);
+    draw_zoom_rect (x1, y1, x2, y2);
+    m_glfcns.glEnd ();
+
+    m_glfcns.glLineWidth (borderwidth);
+    m_glfcns.glBegin (GL_LINE_STRIP);
+    m_glfcns.glColor4f (bordercolor(0), bordercolor(1), bordercolor(2),
+                        borderalpha);
+    draw_zoom_rect (x1, y1, x2, y2);
+    m_glfcns.glEnd ();
+
+    m_glfcns.glPopAttrib ();
+
+    m_glfcns.glMatrixMode (GL_MODELVIEW);
+    m_glfcns.glPopMatrix ();
+
+    m_glfcns.glMatrixMode (GL_PROJECTION);
+    m_glfcns.glPopMatrix ();
+
+#else
+
+    octave_unused_parameter (width);
+    octave_unused_parameter (height);
+    octave_unused_parameter (x1);
+    octave_unused_parameter (x2);
+    octave_unused_parameter (y1);
+    octave_unused_parameter (y2);
+    octave_unused_parameter (overlaycolor);
+    octave_unused_parameter (overlayalpha);
+    octave_unused_parameter (bordercolor);
+    octave_unused_parameter (borderalpha);
+    octave_unused_parameter (borderwidth);
+
+    // This shouldn't happen because construction of opengl_renderer
+    // objects is supposed to be impossible if OpenGL is not available.
+
+    panic_impossible ();
+
+#endif
+  }
+
   uint8NDArray
   opengl_renderer::get_pixels (int width, int height)
   {
 #if defined (HAVE_OPENGL)
 
     m_glfcns.glPixelStorei (GL_PACK_ALIGNMENT, 1);
     uint8NDArray pix(dim_vector (3, width, height), 0);
     m_glfcns.glReadPixels(0, 0, width, height, GL_RGB, GL_UNSIGNED_BYTE,
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -63,16 +63,23 @@ namespace octave
             draw (obj, toplevel);
         }
     }
 
     virtual void set_viewport (int w, int h);
     virtual graphics_xform get_transform (void) const { return xform; }
     virtual uint8NDArray get_pixels (int width, int height);
 
+    virtual void draw_zoom_box (int width, int height,
+                                int x1, int y1, int x2, int y2,
+                                const Matrix& overlaycolor,
+                                double overlayalpha,
+                                const Matrix& bordercolor,
+                                double borderalpha, double borderwidth);
+
     virtual void finish (void);
 
   protected:
     virtual void draw_figure (const figure::properties& props);
     virtual void draw_axes (const axes::properties& props);
     virtual void draw_line (const line::properties& props);
     virtual void draw_surface (const surface::properties& props);
     virtual void draw_patch (const patch::properties& props);
@@ -148,16 +155,18 @@ namespace octave
 
     virtual void render_ticktexts (const Matrix& ticks,
                                    const string_vector& ticklabels,
                                    double lim1, double lim2,
                                    double p1, double p2,
                                    int xyz, int ha, int va,
                                    int& wmax, int& hmax);
 
+    virtual void draw_zoom_rect (int x1, int y1, int x2, int y2);
+
   private:
 
     void init_maxlights (void);
 
     std::string get_string (GLenum id) const;
 
     bool is_nan_or_inf (double x, double y, double z) const
     {
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -218,73 +218,32 @@ private:
 #else
     // This shouldn't happen because construction of Opengl_fltk
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 #endif
   }
 
-  void zoom_box_vertex (void)
-  {
-#if defined (HAVE_OPENGL)
-
-    m_glfcns.glVertex2d (m_zoom_box(0), h () - m_zoom_box(1));
-    m_glfcns.glVertex2d (m_zoom_box(0), h () - m_zoom_box(3));
-    m_glfcns.glVertex2d (m_zoom_box(2), h () - m_zoom_box(3));
-    m_glfcns.glVertex2d (m_zoom_box(2), h () - m_zoom_box(1));
-    m_glfcns.glVertex2d (m_zoom_box(0), h () - m_zoom_box(1));
-
-#else
-    // This shouldn't happen because construction of Opengl_fltk
-    // objects is supposed to be impossible if OpenGL is not available.
-
-    panic_impossible ();
-#endif
-  }
-
   void overlay (void)
   {
-#if defined (HAVE_OPENGL)
-
-    m_glfcns.glMatrixMode (GL_MODELVIEW);
-    m_glfcns.glPushMatrix ();
-    m_glfcns.glLoadIdentity ();
-
-    m_glfcns.glMatrixMode (GL_PROJECTION);
-    m_glfcns.glPushMatrix ();
-    m_glfcns.glLoadIdentity ();
-    m_glfcns.glOrtho (0.0, w (), 0.0, h (), -1, 1);
-
-    m_glfcns.glPushAttrib (GL_DEPTH_BUFFER_BIT | GL_CURRENT_BIT);
-    m_glfcns.glDisable (GL_DEPTH_TEST);
-
-    m_glfcns.glBegin (GL_POLYGON);
-    m_glfcns.glColor4f (0.45, 0.62, 0.81, 0.1);
-    zoom_box_vertex ();
-    m_glfcns.glEnd ();
-
-    m_glfcns.glLineWidth (1.5);
-    m_glfcns.glBegin (GL_LINE_STRIP);
-    m_glfcns.glColor4f (0.45, 0.62, 0.81, 0.9);
-    zoom_box_vertex ();
-    m_glfcns.glEnd ();
-
-    m_glfcns.glPopAttrib ();
-    m_glfcns.glMatrixMode (GL_MODELVIEW);
-    m_glfcns.glPopMatrix ();
-    m_glfcns.glMatrixMode (GL_PROJECTION);
-    m_glfcns.glPopMatrix ();
-
-#else
-    // This shouldn't happen because construction of Opengl_fltk
-    // objects is supposed to be impossible if OpenGL is not available.
-
-    panic_impossible ();
-#endif
+    Matrix overlaycolor (3, 1);
+    overlaycolor(0) = 0.45;
+    overlaycolor(1) = 0.62;
+    overlaycolor(2) = 0.81;
+    double overlayalpha = 0.1;
+    Matrix bordercolor = overlaycolor;
+    double borderalpha = 0.9;
+    double borderwidth = 1.5;
+
+    m_renderer.draw_zoom_box (w (), h (),
+                              m_zoom_box(0), m_zoom_box(1),
+                              m_zoom_box(2), m_zoom_box(3),
+                              overlaycolor, overlayalpha,
+                              bordercolor, borderalpha, borderwidth);
   }
 
   int handle (int event)
   {
 #if defined (HAVE_OPENGL)
 
     switch (event)
       {
