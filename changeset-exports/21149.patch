# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454088189 18000
#      Fri Jan 29 12:23:09 2016 -0500
# Node ID 7962dbca527f91f48822976839b57a8c0cb0cb99
# Parent  e8c3590da9ff7f67726fccb300fbe26e7aead9b3
eliminate obsolete CXX_NEW_FRIEND_TEMPLATE_DECL macro

* acinclude.m4 (OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL):
Delete macro definition.
* configure.ac: Don't use it.
* filter.cc, eigs-base.cc, sparse-dmsolve.cc:
Eliminate use of CXX_NEW_FRIEND_TEMPLATE_DECL macro since this feature
should be present in all modern C++ compilers.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2210,19 +2210,16 @@ AC_CHECK_SIZEOF([long double])
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks,
                   struct stat.st_rdev])
 AC_CHECK_MEMBERS([struct group.gr_passwd])
 
 AC_STRUCT_TIMEZONE
 
 ### Check compiler characteristics.
 
-## Does compiler have support for new friend template declarations?
-OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
-
 ## Does reinterpret_cast fail for function pointers?
 OCTAVE_CXX_BROKEN_REINTERPRET_CAST
 
 ## Check if C++ compiler allows placement delete.
 OCTAVE_CXX_PLACEMENT_DELETE
 
 ## Check if C++ compiler can auto allocate variable sized arrays.
 OCTAVE_CXX_DYNAMIC_AUTO_ARRAYS
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -33,31 +33,16 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ovl.h"
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern MArray<double>
-filter (MArray<double>&, MArray<double>&, MArray<double>&, int dim);
-
-extern MArray<Complex>
-filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&, int dim);
-
-extern MArray<float>
-filter (MArray<float>&, MArray<float>&, MArray<float>&, int dim);
-
-extern MArray<FloatComplex>
-filter (MArray<FloatComplex>&, MArray<FloatComplex>&, MArray<FloatComplex>&,
-        int dim);
-#endif
-
 template <typename T>
 MArray<T>
 filter (MArray<T>& b, MArray<T>& a, MArray<T>& x, MArray<T>& si,
         int dim = 0)
 {
   MArray<T> y;
 
   octave_idx_type a_len  = a.numel ();
@@ -212,34 +197,16 @@ filter (MArray<T>& b, MArray<T>& a, MArr
                 }
             }
         }
     }
 
   return y;
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern MArray<double>
-filter (MArray<double>&, MArray<double>&, MArray<double>&,
-        MArray<double>&, int dim);
-
-extern MArray<Complex>
-filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&,
-        MArray<Complex>&, int dim);
-
-extern MArray<float>
-filter (MArray<float>&, MArray<float>&, MArray<float>&,
-        MArray<float>&, int dim);
-
-extern MArray<FloatComplex>
-filter (MArray<FloatComplex>&, MArray<FloatComplex>&, MArray<FloatComplex>&,
-        MArray<FloatComplex>&, int dim);
-#endif
-
 template <typename T>
 MArray<T>
 filter (MArray<T>& b, MArray<T>& a, MArray<T>& x, int dim = -1)
 {
   dim_vector x_dims = x.dims ();
 
   if (dim < 0)
     dim = x_dims.first_non_singleton ();
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -158,58 +158,16 @@ extern "C"
                            const Complex&, const Complex*,
                            const octave_idx_type&, const Complex*,
                            const octave_idx_type&, const Complex&, Complex*,
                            const octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL);
 
 }
 
-
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static octave_idx_type
-lusolve (const SparseMatrix&, const SparseMatrix&, Matrix&);
-
-static octave_idx_type
-lusolve (const SparseComplexMatrix&, const SparseComplexMatrix&,
-         ComplexMatrix&);
-
-static octave_idx_type
-lusolve (const Matrix&, const Matrix&, Matrix&);
-
-static octave_idx_type
-lusolve (const ComplexMatrix&, const ComplexMatrix&, ComplexMatrix&);
-
-static ComplexMatrix
-ltsolve (const SparseComplexMatrix&, const ColumnVector&,
-         const ComplexMatrix&);
-
-static Matrix
-ltsolve (const SparseMatrix&, const ColumnVector&, const Matrix&,);
-
-static ComplexMatrix
-ltsolve (const ComplexMatrix&, const ColumnVector&, const ComplexMatrix&);
-
-static Matrix
-ltsolve (const Matrix&, const ColumnVector&, const Matrix&,);
-
-static ComplexMatrix
-utsolve (const SparseComplexMatrix&, const ColumnVector&, const ComplexMatrix&);
-
-static Matrix
-utsolve (const SparseMatrix&, const ColumnVector&, const Matrix&);
-
-static ComplexMatrix
-utsolve (const ComplexMatrix&, const ColumnVector&, const ComplexMatrix&);
-
-static Matrix
-utsolve (const Matrix&, const ColumnVector&, const Matrix&);
-
-#endif
-
 static void
 warn_convergence (void)
 {
   (*current_liboctave_warning_with_id_handler)
     ("Octave:convergence",
      "eigs: 'A - sigma*B' is singular, indicating sigma is exactly "
      "an eigenvalue so convergence is not guaranteed");
 }
@@ -3292,198 +3250,16 @@ EigsComplexNonSymmetricFunc (EigsComplex
         }
     }
   else
     (*current_liboctave_error_handler) ("eigs: error %d in zneupd", info2);
 
   return ip(4);
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern octave_idx_type
-EigsRealSymmetricMatrix (const Matrix& m, const std::string typ,
-                         octave_idx_type k, octave_idx_type p,
-                         octave_idx_type &info, Matrix &eig_vec,
-                         ColumnVector &eig_val, const Matrix& b,
-                         ColumnVector &permB, ColumnVector &resid,
-                         std::ostream &os,
-                         double tol = std::numeric_limits<double>::epsilon (),
-                         bool rvec = false, bool cholB = 0, int disp = 0,
-                         int maxit = 300);
-
-extern octave_idx_type
-EigsRealSymmetricMatrix (const SparseMatrix& m, const std::string typ,
-                         octave_idx_type k, octave_idx_type p,
-                         octave_idx_type &info, Matrix &eig_vec,
-                         ColumnVector &eig_val, const SparseMatrix& b,
-                         ColumnVector &permB, ColumnVector &resid,
-                         std::ostream& os,
-                         double tol = std::numeric_limits<double>::epsilon (),
-                         bool rvec = false, bool cholB = 0, int disp = 0,
-                         int maxit = 300);
-
-extern octave_idx_type
-EigsRealSymmetricMatrixShift (const Matrix& m, double sigma,
-                              octave_idx_type k, octave_idx_type p,
-                              octave_idx_type &info, Matrix &eig_vec,
-                              ColumnVector &eig_val, const Matrix& b,
-                              ColumnVector &permB, ColumnVector &resid,
-                              std::ostream &os,
-                              double tol = std::numeric_limits<double>::epsilon (),
-                              bool rvec = false, bool cholB = 0, int disp = 0,
-                              int maxit = 300);
-
-extern octave_idx_type
-EigsRealSymmetricMatrixShift (const SparseMatrix& m, double sigma,
-                              octave_idx_type k, octave_idx_type p,
-                              octave_idx_type &info, Matrix &eig_vec,
-                              ColumnVector &eig_val, const SparseMatrix& b,
-                              ColumnVector &permB, ColumnVector &resid,
-                              std::ostream &os,
-                              double tol = std::numeric_limits<double>::epsilon (),
-                              bool rvec = false, bool cholB = 0, int disp = 0,
-                              int maxit = 300);
-
-extern octave_idx_type
-EigsRealSymmetricFunc (EigsFunc fun, octave_idx_type n,
-                       const std::string &typ, double sigma,
-                       octave_idx_type k, octave_idx_type p,
-                       octave_idx_type &info,
-                       Matrix &eig_vec, ColumnVector &eig_val,
-                       ColumnVector &resid, std::ostream &os,
-                       double tol = std::numeric_limits<double>::epsilon (),
-                       bool rvec = false, bool cholB = 0, int disp = 0,
-                       int maxit = 300);
-
-extern octave_idx_type
-EigsRealNonSymmetricMatrix (const Matrix& m, const std::string typ,
-                            octave_idx_type k, octave_idx_type p,
-                            octave_idx_type &info, ComplexMatrix &eig_vec,
-                            ComplexColumnVector &eig_val, const Matrix& b,
-                            ColumnVector &permB, ColumnVector &resid,
-                            std::ostream &os,
-                            double tol = std::numeric_limits<double>::epsilon (),
-                            bool rvec = false, bool cholB = 0, int disp = 0,
-                            int maxit = 300);
-
-extern octave_idx_type
-EigsRealNonSymmetricMatrix (const SparseMatrix& m, const std::string typ,
-                            octave_idx_type k, octave_idx_type p,
-                            octave_idx_type &info, ComplexMatrix &eig_vec,
-                            ComplexColumnVector &eig_val,
-                            const SparseMatrix& b,
-                            ColumnVector &permB, ColumnVector &resid,
-                            std::ostream &os,
-                            double tol = std::numeric_limits<double>::epsilon (),
-                            bool rvec = false, bool cholB = 0, int disp = 0,
-                            int maxit = 300);
-
-extern octave_idx_type
-EigsRealNonSymmetricMatrixShift (const Matrix& m, double sigma,
-                                 octave_idx_type k, octave_idx_type p,
-                                 octave_idx_type &info,
-                                 ComplexMatrix &eig_vec,
-                                 ComplexColumnVector &eig_val, const Matrix& b,
-                                 ColumnVector &permB, ColumnVector &resid,
-                                 std::ostream &os,
-                                 double tol = std::numeric_limits<double>::epsilon (),
-                                 bool rvec = false, bool cholB = 0,
-                                 int disp = 0, int maxit = 300);
-
-extern octave_idx_type
-EigsRealNonSymmetricMatrixShift (const SparseMatrix& m, double sigma,
-                                 octave_idx_type k, octave_idx_type p,
-                                 octave_idx_type &info,
-                                 ComplexMatrix &eig_vec,
-                                 ComplexColumnVector &eig_val,
-                                 const SparseMatrix& b,
-                                 ColumnVector &permB, ColumnVector &resid,
-                                 std::ostream &os,
-                                 double tol = std::numeric_limits<double>::epsilon (),
-                                 bool rvec = false, bool cholB = 0,
-                                 int disp = 0, int maxit = 300);
-
-extern octave_idx_type
-EigsRealNonSymmetricFunc (EigsFunc fun, octave_idx_type n,
-                          const std::string &_typ, double sigma,
-                          octave_idx_type k, octave_idx_type p,
-                          octave_idx_type &info, ComplexMatrix &eig_vec,
-                          ComplexColumnVector &eig_val,
-                          ColumnVector &resid, std::ostream& os,
-                          double tol = std::numeric_limits<double>::epsilon (),
-                          bool rvec = false, bool cholB = 0, int disp = 0,
-                          int maxit = 300);
-
-extern octave_idx_type
-EigsComplexNonSymmetricMatrix (const ComplexMatrix& m, const std::string typ,
-                               octave_idx_type k, octave_idx_type p,
-                               octave_idx_type &info, ComplexMatrix &eig_vec,
-                               ComplexColumnVector &eig_val,
-                               const ComplexMatrix& b, ColumnVector &permB,
-                               ComplexColumnVector &resid,
-                               std::ostream &os,
-                               double tol = std::numeric_limits<double>::epsilon (),
-                               bool rvec = false, bool cholB = 0, int disp = 0,
-                               int maxit = 300);
-
-extern octave_idx_type
-EigsComplexNonSymmetricMatrix (const SparseComplexMatrix& m,
-                               const std::string typ, octave_idx_type k,
-                               octave_idx_type p, octave_idx_type &info,
-                               ComplexMatrix &eig_vec,
-                               ComplexColumnVector &eig_val,
-                               const SparseComplexMatrix& b,
-                               ColumnVector &permB,
-                               ComplexColumnVector &resid,
-                               std::ostream &os,
-                               double tol = std::numeric_limits<double>::epsilon (),
-                               bool rvec = false, bool cholB = 0, int disp = 0,
-                               int maxit = 300);
-
-extern octave_idx_type
-EigsComplexNonSymmetricMatrixShift (const ComplexMatrix& m, Complex sigma,
-                                    octave_idx_type k, octave_idx_type p,
-                                    octave_idx_type &info,
-                                    ComplexMatrix &eig_vec,
-                                    ComplexColumnVector &eig_val,
-                                    const ComplexMatrix& b,
-                                    ColumnVector &permB,
-                                    ComplexColumnVector &resid,
-                                    std::ostream &os,
-                                    double tol = std::numeric_limits<double>::epsilon (),
-                                    bool rvec = false, bool cholB = 0,
-                                    int disp = 0, int maxit = 300);
-
-extern octave_idx_type
-EigsComplexNonSymmetricMatrixShift (const SparseComplexMatrix& m,
-                                    Complex sigma,
-                                    octave_idx_type k, octave_idx_type p,
-                                    octave_idx_type &info,
-                                    ComplexMatrix &eig_vec,
-                                    ComplexColumnVector &eig_val,
-                                    const SparseComplexMatrix& b,
-                                    ColumnVector &permB,
-                                    ComplexColumnVector &resid,
-                                    std::ostream &os,
-                                    double tol = std::numeric_limits<double>::epsilon (),
-                                    bool rvec = false, bool cholB = 0,
-                                    int disp = 0, int maxit = 300);
-
-extern octave_idx_type
-EigsComplexNonSymmetricFunc (EigsComplexFunc fun, octave_idx_type n,
-                             const std::string &_typ, Complex sigma,
-                             octave_idx_type k, octave_idx_type p,
-                             octave_idx_type &info, ComplexMatrix &eig_vec,
-                             ComplexColumnVector &eig_val,
-                             ComplexColumnVector &resid, std::ostream& os,
-                             double tol = std::numeric_limits<double>::epsilon (),
-                             bool rvec = false, bool cholB = 0,
-                             int disp = 0, int maxit = 300);
-#endif
-
 #ifndef _MSC_VER
 template octave_idx_type
 lusolve (const SparseMatrix&, const SparseMatrix&, Matrix&);
 
 template octave_idx_type
 lusolve (const SparseComplexMatrix&, const SparseComplexMatrix&,
          ComplexMatrix&);
 
diff --git a/liboctave/numeric/sparse-dmsolve.cc b/liboctave/numeric/sparse-dmsolve.cc
--- a/liboctave/numeric/sparse-dmsolve.cc
+++ b/liboctave/numeric/sparse-dmsolve.cc
@@ -104,32 +104,16 @@ dmsolve_extract (const MSparse<T> &A, co
             B.xdata (p) = X[B.xridx (p)];
         }
       B.xcidx (cend - cst) = nz ;
     }
 
   return B;
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static MSparse<double>
-dmsolve_extract (const MSparse<double> &A, const octave_idx_type *Pinv,
-                 const octave_idx_type *Q, octave_idx_type rst,
-                 octave_idx_type rend, octave_idx_type cst,
-                 octave_idx_type cend, octave_idx_type maxnz,
-                 bool lazy);
-
-static MSparse<Complex>
-dmsolve_extract (const MSparse<Complex> &A, const octave_idx_type *Pinv,
-                 const octave_idx_type *Q, octave_idx_type rst,
-                 octave_idx_type rend, octave_idx_type cst,
-                 octave_idx_type cend, octave_idx_type maxnz,
-                 bool lazy);
-#endif
-
 template <typename T>
 static MArray<T>
 dmsolve_extract (const MArray<T> &m, const octave_idx_type *,
                  const octave_idx_type *, octave_idx_type r1,
                  octave_idx_type r2, octave_idx_type c1,
                  octave_idx_type c2)
 {
   r2 -= 1;
@@ -144,30 +128,16 @@ dmsolve_extract (const MArray<T> &m, con
 
   for (octave_idx_type j = 0; j < new_c; j++)
     for (octave_idx_type i = 0; i < new_r; i++)
       result.xelem (i, j) = m.elem (r1+i, c1+j);
 
   return result;
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static MArray<double>
-dmsolve_extract (const MArray<double> &m, const octave_idx_type *,
-                 const octave_idx_type *, octave_idx_type r1,
-                 octave_idx_type r2, octave_idx_type c1,
-                 octave_idx_type c2)
-
-static MArray<Complex>
-dmsolve_extract (const MArray<Complex> &m, const octave_idx_type *,
-                 const octave_idx_type *, octave_idx_type r1,
-                 octave_idx_type r2, octave_idx_type c1,
-                 octave_idx_type c2)
-#endif
-
 template <typename T>
 static void
 dmsolve_insert (MArray<T> &a, const MArray<T> &b, const octave_idx_type *Q,
                 octave_idx_type r, octave_idx_type c)
 {
   T *ax = a.fortran_vec ();
   const T *bx = b.fortran_vec ();
   octave_idx_type anr = a.rows ();
@@ -180,26 +150,16 @@ dmsolve_insert (MArray<T> &a, const MArr
       for (octave_idx_type i = 0; i < nr; i++)
         {
           octave_quit ();
           ax[Q[r + i] + aoff] = bx[i + boff];
         }
     }
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static void
-dmsolve_insert (MArray<double> &a, const MArray<double> &b,
-                const octave_idx_type *Q, octave_idx_type r, octave_idx_type c);
-
-static void
-dmsolve_insert (MArray<Complex> &a, const MArray<Complex> &b,
-                const octave_idx_type *Q, octave_idx_type r, octave_idx_type c);
-#endif
-
 template <typename T>
 static void
 dmsolve_insert (MSparse<T> &a, const MSparse<T> &b, const octave_idx_type *Q,
                 octave_idx_type r, octave_idx_type c)
 {
   octave_idx_type b_rows = b.rows ();
   octave_idx_type b_cols = b.cols ();
   octave_idx_type nr = a.rows ();
@@ -267,26 +227,16 @@ dmsolve_insert (MSparse<T> &a, const MSp
         {
           a.xdata (ii) = tmp.xdata (j);
           a.xridx (ii++) = tmp.xridx (j);
         }
       a.xcidx (i+1) = ii;
     }
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static void
-dmsolve_insert (MSparse<double> &a, const SparseMatrix &b,
-                const octave_idx_type *Q, octave_idx_type r, octave_idx_type c);
-
-static void
-dmsolve_insert (MSparse<Complex> &a, const MSparse<Complex> &b,
-                const octave_idx_type *Q, octave_idx_type r, octave_idx_type c);
-#endif
-
 template <typename T, typename RT>
 static void
 dmsolve_permute (MArray<RT> &a, const MArray<T>& b, const octave_idx_type *p)
 {
   octave_idx_type b_nr = b.rows ();
   octave_idx_type b_nc = b.cols ();
   const T *Bx = b.fortran_vec ();
   a.resize (dim_vector (b_nr, b_nc));
@@ -297,30 +247,16 @@ dmsolve_permute (MArray<RT> &a, const MA
       for (octave_idx_type i = 0; i < b_nr; i++)
         {
           octave_quit ();
           Btx[p[i] + off] = Bx[ i + off];
         }
     }
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static void
-dmsolve_permute (MArray<double> &a, const MArray<double>& b,
-                 const octave_idx_type *p);
-
-static void
-dmsolve_permute (MArray<Complex> &a, const MArray<double>& b,
-                 const octave_idx_type *p);
-
-static void
-dmsolve_permute (MArray<Complex> &a, const MArray<Complex>& b,
-                 const octave_idx_type *p);
-#endif
-
 template <typename T, typename RT>
 static void
 dmsolve_permute (MSparse<RT> &a, const MSparse<T>& b, const octave_idx_type *p)
 {
   octave_idx_type b_nr = b.rows ();
   octave_idx_type b_nc = b.cols ();
   octave_idx_type b_nz = b.nnz ();
   octave_idx_type nz = 0;
@@ -343,30 +279,16 @@ dmsolve_permute (MSparse<RT> &a, const M
         {
           octave_quit ();
           a.xdata (i) = X[a.xridx (i)];
         }
       a.xcidx (j+1) = nz;
     }
 }
 
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-static void
-dmsolve_permute (MSparse<double> &a, const MSparse<double>& b,
-                 const octave_idx_type *p);
-
-static void
-dmsolve_permute (MSparse<Complex> &a, const MSparse<double>& b,
-                 const octave_idx_type *p);
-
-static void
-dmsolve_permute (MSparse<Complex> &a, const MSparse<Complex>& b,
-                 const octave_idx_type *p);
-#endif
-
 static void
 solve_singularity_warning (double)
 {
   // Dummy singularity handler so that LU solver doesn't flag
   // an error for numerically rank defficient matrices
 }
 
 template <typename RT, typename ST, typename T>
@@ -484,42 +406,8 @@ dmsolve (const ST &a, const T &b, octave
     }
   return retval;
 
 #else
   (*current_liboctave_error_handler)
     ("support for CXSparse was unavailable or disabled when liboctave was built");
 #endif
 }
-
-#if ! defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern Matrix
-dmsolve (const SparseMatrix &a, const Matrix &b,
-         octave_idx_type &info);
-
-extern ComplexMatrix
-dmsolve (const SparseMatrix &a, const ComplexMatrix &b,
-         octave_idx_type &info);
-
-extern ComplexMatrix
-dmsolve (const SparseComplexMatrix &a, const Matrix &b,
-         octave_idx_type &info);
-
-extern ComplexMatrix
-dmsolve (const SparseComplexMatrix &a, const ComplexMatrix &b,
-         octave_idx_type &info);
-
-extern SparseMatrix
-dmsolve (const SparseMatrix &a, const SparseMatrix &b,
-         octave_idx_type &info);
-
-extern SparseComplexMatrix
-dmsolve (const SparseMatrix &a, const SparseComplexMatrix &b,
-         octave_idx_type &info);
-
-extern SparseComplexMatrix
-dmsolve (const SparseComplexMatrix &a, const SparseMatrix &b,
-         octave_idx_type &info);
-
-extern SparseComplexMatrix
-dmsolve (const SparseComplexMatrix &a, const SparseComplexMatrix &b,
-         octave_idx_type &info);
-#endif
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1455,54 +1455,16 @@ AC_DEFUN([OCTAVE_CXX_ISO_COMPLIANT_LIBRA
   ])
   AC_MSG_RESULT([$octave_cv_cxx_iso_compliant_library])
   if test $octave_cv_cxx_iso_compliant_library = yes; then
     AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1,
       [Define to 1 if your C++ runtime library is ISO compliant.])
   fi
 ])
 dnl
-dnl Check if C++ compiler needs the new friend template declaration
-dnl syntax.
-dnl
-AC_DEFUN([OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL], [
-  AC_REQUIRE([AC_PROG_CXX])
-  AC_MSG_CHECKING([for C++ support for new friend template declaration])
-  AC_CACHE_VAL([octave_cv_cxx_new_friend_template_decl],
-    [AC_LANG_PUSH(C++)
-    rm -f conftest.h
-    cat > conftest.h <<EOB
-       struct A {
-         friend int operator== (const A&, const A&);
-         A (int) { }
-       };
-
-       template <class T> int
-       operator== (const T&, const T&)
-       {
-         return 0;
-       }
-EOB
-    AC_LINK_IFELSE([AC_LANG_PROGRAM([[
-        #include "conftest.h"
-        ]], [[
-        A a (1);
-        return a == A(1);
-      ]])],
-      octave_cv_cxx_new_friend_template_decl=no,
-      octave_cv_cxx_new_friend_template_decl=yes)
-    AC_LANG_POP(C++)
-  ])
-  AC_MSG_RESULT([$octave_cv_cxx_new_friend_template_decl])
-  if test $octave_cv_cxx_new_friend_template_decl = yes; then
-    AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL, 1,
-      [Define to 1 if your compiler supports `<>' stuff for template friends.])
-  fi
-])
-dnl
 dnl Check if the compiler supports placement delete.
 dnl
 AC_DEFUN([OCTAVE_CXX_PLACEMENT_DELETE], [
   AC_CACHE_CHECK([whether <new> defines placement delete operator],
     [octave_cv_cxx_placement_delete],
     [AC_LANG_PUSH(C++)
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <new>
