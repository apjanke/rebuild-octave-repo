# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511736620 28800
#      Sun Nov 26 14:50:20 2017 -0800
# Node ID 0643533930e7be9edea5cd6590052d2f7ed667d7
# Parent  4dce9d03b2ba1896b14f2912fa8835e02479b5c4
Return NaN arrays for left division operator when operands contain NaNs (bug #52516).

* CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc (norm1): Recode to shortircuit
on either NaN or Inf and return norm .
* CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc (lssolve): Check norm of matrix
and return NaN matrix for NaN norm and zeros matrix for Inf norm.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -709,28 +709,29 @@ ComplexMatrix::column (octave_idx_type i
   return index (idx_vector::colon, idx_vector (i));
 }
 
 // Local function to calculate the 1-norm.
 static
 double
 norm1 (const ComplexMatrix& a)
 {
+  double anorm = 0.0;
   ColumnVector colsum = a.abs ().sum ().row (0);
-  double anorm = -octave::numeric_limits<double>::Inf ();
 
   for (octave_idx_type i = 0; i < colsum.numel (); i++)
     {
-      if (octave::math::isnan (colsum.xelem (i)))
+      double sum = colsum.xelem (i);
+      if (octave::math::isinf (sum) || octave::math::isnan (sum))
         {
-          anorm = octave::numeric_limits<double>::NaN ();
+          anorm = sum;  // Pass Inf or NaN to output
           break;
         }
       else
-        anorm = std::max (anorm, colsum.xelem (i));
+        anorm = std::max (anorm, sum);
     }
 
   return anorm;
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
@@ -2569,21 +2570,27 @@ ComplexMatrix::lssolve (const ComplexMat
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (std::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
       anorm = norm1 (*this);
 
-      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+      if (octave::math::isinf (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, b_nc, 0.0);
+          retval = ComplexMatrix (n, b_nc, 0.0);
+        }
+      else if (octave::math::isnan (anorm))
+        {
+          rcon = octave::numeric_limits<double>::NaN ();
+          retval = ComplexMatrix (n, b_nc,
+                                  octave::numeric_limits<double>::NaN ());
         }
       else
         {
           F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, F77_DBLE_CMPLX_ARG (tmp_data),
                                      m, F77_DBLE_CMPLX_ARG (pretval),
                                      maxmn, ps, rcon, tmp_rank,
                                      F77_DBLE_CMPLX_ARG (work.fortran_vec ()),
                                      lwork, prwork, piwork, tmp_info));
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -423,28 +423,29 @@ Matrix::column (octave_idx_type i) const
   return index (idx_vector::colon, idx_vector (i));
 }
 
 // Local function to calculate the 1-norm.
 static
 double
 norm1 (const Matrix& a)
 {
+  double anorm = 0.0;
   ColumnVector colsum = a.abs ().sum ().row (0);
-  double anorm = -octave::numeric_limits<double>::Inf ();
 
   for (octave_idx_type i = 0; i < colsum.numel (); i++)
     {
-      if (octave::math::isnan (colsum.xelem (i)))
+      double sum = colsum.xelem (i);
+      if (octave::math::isinf (sum) || octave::math::isnan (sum))
         {
-          anorm = octave::numeric_limits<double>::NaN ();
+          anorm = sum;  // Pass Inf or NaN to output
           break;
         }
       else
-        anorm = std::max (anorm, colsum.xelem (i));
+        anorm = std::max (anorm, sum);
     }
 
   return anorm;
 }
 
 Matrix
 Matrix::inverse (void) const
 {
@@ -2221,22 +2222,27 @@ Matrix::lssolve (const Matrix& b, octave
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (work(0));
       work.resize (dim_vector (lwork, 1));
 
       anorm = norm1 (*this);
 
-      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+      if (octave::math::isinf (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, b_nc, 0.0);
         }
+      else if (octave::math::isnan (anorm))
+        {
+          rcon = octave::numeric_limits<double>::NaN ();
+          retval = Matrix (n, b_nc, octave::numeric_limits<double>::NaN ());
+        }
       else
         {
           F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                      maxmn, ps, rcon, tmp_rank,
                                      work.fortran_vec (), lwork,
                                      piwork, tmp_info));
 
           info = tmp_info;
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -712,28 +712,29 @@ FloatComplexMatrix::column (octave_idx_t
   return index (idx_vector::colon, idx_vector (i));
 }
 
 // Local function to calculate the 1-norm.
 static
 float
 norm1 (const FloatComplexMatrix& a)
 {
+  float anorm = 0.0;
   FloatColumnVector colsum = a.abs ().sum ().row (0);
-  float anorm = -octave::numeric_limits<float>::Inf ();
 
   for (octave_idx_type i = 0; i < colsum.numel (); i++)
     {
-      if (octave::math::isnan (colsum.xelem (i)))
+      float sum = colsum.xelem (i);
+      if (octave::math::isinf (sum) || octave::math::isnan (sum))
         {
-          anorm = octave::numeric_limits<float>::NaN ();
+          anorm = sum;  // Pass Inf or NaN to output
           break;
         }
       else
-        anorm = std::max (anorm, colsum.xelem (i));
+        anorm = std::max (anorm, sum);
     }
 
   return anorm;
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::inverse (void) const
 {
@@ -2590,21 +2591,27 @@ FloatComplexMatrix::lssolve (const Float
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (std::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
       anorm = norm1 (*this);
 
-      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+      if (octave::math::isinf (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, b_nc, 0.0);
+          retval = FloatComplexMatrix (n, b_nc, 0.0);
+        }
+      else if (octave::math::isnan (anorm))
+        {
+          rcon = octave::numeric_limits<float>::NaN ();
+          retval = FloatComplexMatrix (n, b_nc,
+                                       octave::numeric_limits<float>::NaN ());
         }
       else
         {
           F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, F77_CMPLX_ARG (tmp_data),
                                      m, F77_CMPLX_ARG (pretval),
                                      maxmn, ps, rcon, tmp_rank,
                                      F77_CMPLX_ARG (work.fortran_vec ()),
                                      lwork, prwork, piwork, tmp_info));
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -429,28 +429,29 @@ FloatMatrix::column (octave_idx_type i) 
   return index (idx_vector::colon, idx_vector (i));
 }
 
 // Local function to calculate the 1-norm.
 static
 float
 norm1 (const FloatMatrix& a)
 {
+  float anorm = 0.0;
   FloatColumnVector colsum = a.abs ().sum ().row (0);
-  float anorm = -octave::numeric_limits<float>::Inf ();
 
   for (octave_idx_type i = 0; i < colsum.numel (); i++)
     {
-      if (octave::math::isnan (colsum.xelem (i)))
+      float sum = colsum.xelem (i);
+      if (octave::math::isinf (sum) || octave::math::isnan (sum))
         {
-          anorm = octave::numeric_limits<float>::NaN ();
+          anorm = sum;  // Pass Inf or NaN to output
           break;
         }
       else
-        anorm = std::max (anorm, colsum.xelem (i));
+        anorm = std::max (anorm, sum);
     }
 
   return anorm;
 }
 
 FloatMatrix
 FloatMatrix::inverse (void) const
 {
@@ -2246,21 +2247,27 @@ FloatMatrix::lssolve (const FloatMatrix&
             work(0) = lworkaround;
         }
 
       lwork = static_cast<F77_INT> (work(0));
       work.resize (dim_vector (lwork, 1));
 
       anorm = norm1 (*this);
 
-      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+      if (octave::math::isinf (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, b_nc, 0.0);
+          retval = FloatMatrix (n, b_nc, 0.0);
+        }
+      else if (octave::math::isnan (anorm))
+        {
+          rcon = octave::numeric_limits<float>::NaN ();
+          retval = FloatMatrix (n, b_nc,
+                                octave::numeric_limits<float>::NaN ());
         }
       else
         {
           F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                      maxmn, ps, rcon, tmp_rank,
                                      work.fortran_vec (), lwork,
                                      piwork, tmp_info));
 
