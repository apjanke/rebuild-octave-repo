# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1340741915 14400
#      Tue Jun 26 16:18:35 2012 -0400
# Branch stable
# Node ID 980e2d5c83f75208d64f150b657ed32a3a5a807a
# Parent  f0552937a8eb9e17199b37c7b510ba2fcbef5db6
avoid calling putback more than once between reads

* liboctave/lo-utils.cc (octave_read_value<double>,
(octave_read_value<float>): Save stream position with tellg.  On
failure, restore stream position with seekg. Avoid calling putback
multiple times between stream reads.
(octave_read_inf_nan_na, octave_read_float_inf_nan_na): Don't call
putback.  Make it the caller's responsibility to reset stream
positioning on failed reads.

diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -190,68 +190,55 @@ octave_fgetl (FILE *f, bool& eof)
   size_t len = retval.length ();
 
   if (retval[len-1] == '\n')
     retval.resize (len-1);
 
   return retval;
 }
 
+// Note that the caller is responsible for repositioning the stream on
+// failure.
+
 static inline double
-read_inf_nan_na (std::istream& is, char c0, char sign = '+')
+read_inf_nan_na (std::istream& is, char c0)
 {
   double d = 0.0;
 
   switch (c0)
     {
     case 'i': case 'I':
       {
         char c1 = is.get ();
         if (c1 == 'n' || c1 == 'N')
           {
             char c2 = is.get ();
             if (c2 == 'f' || c2 == 'F')
-              d = sign == '-' ? -octave_Inf : octave_Inf;
+              d = octave_Inf;
             else
-              {
-                is.putback (c2);
-                is.putback (c1);
-                is.putback (c0);
-                is.setstate (std::ios::failbit);
-              }
+              is.setstate (std::ios::failbit);
           }
         else
-          {
-            is.putback (c1);
-            is.putback (c0);
-            is.setstate (std::ios::failbit);
-          }
+          is.setstate (std::ios::failbit);
       }
       break;
 
     case 'n': case 'N':
       {
         char c1 = is.get ();
         if (c1 == 'a' || c1 == 'A')
           {
             char c2 = is.get ();
             if (c2 == 'n' || c2 == 'N')
               d = octave_NaN;
             else
-              {
-                is.putback (c2);
-                d = octave_NA;
-              }
+              d = octave_NA;
           }
         else
-          {
-            is.putback (c1);
-            is.putback (c0);
-            is.setstate (std::ios::failbit);
-          }
+          is.setstate (std::ios::failbit);
       }
       break;
 
     default:
       abort ();
     }
 
   return d;
@@ -260,61 +247,67 @@ read_inf_nan_na (std::istream& is, char 
 // Read a double value.  Discard any sign on NaN and NA.
 
 template <>
 double
 octave_read_value (std::istream& is)
 {
   double d = 0.0;
 
+  // FIXME -- resetting stream position is likely to fail unless we are
+  // reading from a file.
+  std::ios::streampos pos = is.tellg ();
+
   char c1 = ' ';
 
   while (isspace (c1))
     c1 = is.get ();
 
+  bool neg = false;
+
   switch (c1)
     {
     case '-':
-      {
-        char c2 = 0;
-        c2 = is.get ();
-        if (c2 == 'i' || c2 == 'I' || c2 == 'n' || c2 == 'N')
-          d = read_inf_nan_na (is, c2, c1);
-        else
-          {
-            is.putback (c2);
-            is.putback (c1);
-            is >> d;
-          }
-      }
-      break;
+      neg = true;
+      // fall through...
 
     case '+':
       {
         char c2 = 0;
         c2 = is.get ();
         if (c2 == 'i' || c2 == 'I' || c2 == 'n' || c2 == 'N')
-          d = read_inf_nan_na (is, c2, c1);
+          d = read_inf_nan_na (is, c2);
         else
           {
             is.putback (c2);
-            is.putback (c1);
             is >> d;
           }
+
+        if (neg && ! is.fail ())
+          d = -d;
       }
       break;
 
     case 'i': case 'I':
     case 'n': case 'N':
       d = read_inf_nan_na (is, c1);
       break;
 
     default:
       is.putback (c1);
       is >> d;
+      break;
+    }
+
+  std::ios::iostate status = is.rdstate ();
+  if (status & std::ios::failbit)
+    {
+      is.clear ();
+      is.seekg (pos);
+      is.setstate (status);
     }
 
   return d;
 }
 
 template <>
 Complex
 octave_read_value (std::istream& is)
@@ -353,68 +346,55 @@ octave_read_value (std::istream& is)
       is.putback (ch);
       cx = octave_read_value<double> (is);
     }
 
   return cx;
 
 }
 
+// Note that the caller is responsible for repositioning the stream on
+// failure.
+
 static inline float
 read_float_inf_nan_na (std::istream& is, char c0, char sign = '+')
 {
   float d = 0.0;
 
   switch (c0)
     {
     case 'i': case 'I':
       {
         char c1 = is.get ();
         if (c1 == 'n' || c1 == 'N')
           {
             char c2 = is.get ();
             if (c2 == 'f' || c2 == 'F')
-              d = sign == '-' ? -octave_Float_Inf : octave_Float_Inf;
+              d = octave_Float_Inf;
             else
-              {
-                is.putback (c2);
-                is.putback (c1);
-                is.putback (c0);
-                is.setstate (std::ios::failbit);
-              }
+              is.setstate (std::ios::failbit);
           }
         else
-          {
-            is.putback (c1);
-            is.putback (c0);
-            is.setstate (std::ios::failbit);
-          }
+          is.setstate (std::ios::failbit);
       }
       break;
 
     case 'n': case 'N':
       {
         char c1 = is.get ();
         if (c1 == 'a' || c1 == 'A')
           {
             char c2 = is.get ();
             if (c2 == 'n' || c2 == 'N')
               d = octave_Float_NaN;
             else
-              {
-                is.putback (c2);
-                d = octave_Float_NA;
-              }
+              d = octave_Float_NA;
           }
         else
-          {
-            is.putback (c1);
-            is.putback (c0);
-            is.setstate (std::ios::failbit);
-          }
+          is.setstate (std::ios::failbit);
       }
       break;
 
     default:
       abort ();
     }
 
   return d;
@@ -423,61 +403,67 @@ read_float_inf_nan_na (std::istream& is,
 // Read a float value.  Discard any sign on NaN and NA.
 
 template <>
 float
 octave_read_value (std::istream& is)
 {
   float d = 0.0;
 
+  // FIXME -- resetting stream position is likely to fail unless we are
+  // reading from a file.
+  std::ios::streampos pos = is.tellg ();
+
   char c1 = ' ';
 
   while (isspace (c1))
     c1 = is.get ();
 
+  bool neg = false;
+
   switch (c1)
     {
     case '-':
-      {
-        char c2 = 0;
-        c2 = is.get ();
-        if (c2 == 'i' || c2 == 'I' || c2 == 'n' || c2 == 'N')
-          d = read_float_inf_nan_na (is, c2, c1);
-        else
-          {
-            is.putback (c2);
-            is.putback (c1);
-            is >> d;
-          }
-      }
-      break;
+      neg = true;
+      // fall through...
 
     case '+':
       {
         char c2 = 0;
         c2 = is.get ();
         if (c2 == 'i' || c2 == 'I' || c2 == 'n' || c2 == 'N')
-          d = read_float_inf_nan_na (is, c2, c1);
+          d = read_float_inf_nan_na (is, c2);
         else
           {
             is.putback (c2);
-            is.putback (c1);
             is >> d;
           }
+
+        if (neg && ! is.fail ())
+          d = -d;
       }
       break;
 
     case 'i': case 'I':
     case 'n': case 'N':
       d = read_float_inf_nan_na (is, c1);
       break;
 
     default:
       is.putback (c1);
       is >> d;
+      break;
+    }
+
+  std::ios::iostate status = is.rdstate ();
+  if (status & std::ios::failbit)
+    {
+      is.clear ();
+      is.seekg (pos);
+      is.setstate (status);
     }
 
   return d;
 }
 
 template <>
 FloatComplex
 octave_read_value (std::istream& is)
