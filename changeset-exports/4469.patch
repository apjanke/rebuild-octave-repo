# HG changeset patch
# User jwe
# Date 1059191111 0
#      Sat Jul 26 03:45:11 2003 +0000
# Node ID 53ee020af84770486de5c0e53d1d45c9c9b7cfa6
# Parent  efb6301dae80c65bcfc13b9fd4a6e0d8f78023c4
[project @ 2003-07-26 03:45:10 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Warn if --enable-dl but not --enable-shared.
+
 2003-07-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-mod.el (octave-variables): Delete
 	default_return_value and define_all_return_values from the list.
 	Add warn_undefined_return_values to the list.
 
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.430 $)
+AC_REVISION($Revision: 1.431 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1466,16 +1466,26 @@ Octave is now configured for $canonical_
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:   $USE_READLINE
 ])
 
 warn_msg_printed=false
 
+if $ENABLE_DYNAMIC_LINKING; then
+  if $SHARED_LIBS; then
+    true
+  else
+    AC_MSG_WARN([You used --enable-dl but not --enable-shared.])
+    AC_MSG_WARN([Are you sure that is what you want to do?])
+    warn_msg_printed=true
+  fi
+fi
+
 if test -n "$warn_f77_and_g77"; then
   AC_MSG_WARN($warn_f77_and_g77)
   warn_msg_printed=true
 fi
 
 if test -n "$warn_f2c_and_f77"; then
   AC_MSG_WARN($warn_f2c_and_f77)
   warn_msg_printed=true
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2751,48 +2751,60 @@ ComplexMatrix::row_min (Array<int>& inde
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
       index.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-	  int idx_j = 0;
-
-	  Complex tmp_min = elem (i, idx_j);
-
 	  bool real_only = row_is_real_only (i);
 
-	  double abs_min = real_only ? real (tmp_min) : ::abs (tmp_min);
-
-	  if (xisnan (tmp_min))
-	    idx_j = -1;
+	  int idx_j;
+
+	  Complex tmp_min;
+
+	  double abs_min = octave_NaN;
+
+	  for (idx_j = 0; idx_j < nc; idx_j++)
+	    {
+	      tmp_min = elem (i, idx_j);
+
+	      if (! octave_is_NaN_or_NA (tmp_min))
+		{
+		  abs_min = real_only ? real (tmp_min) : ::abs (tmp_min);
+		  break;
+		}
+	    }
+
+	  for (int j = idx_j+1; j < nc; j++)
+	    {
+	      Complex tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+
+	      double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
+
+	      if (abs_tmp < abs_min)
+		{
+		  idx_j = j;
+		  tmp_min = tmp;
+		  abs_min = abs_tmp;
+		}
+	    }
+
+	  if (octave_is_NaN_or_NA (tmp_min))
+	    {
+	      result.elem (i) = Complex_NaN_result;
+	      index.elem (i) = 0;
+	    }
 	  else
 	    {
-	      for (int j = 1; j < nc; j++)
-		{
-		  Complex tmp = elem (i, j);
-
-		  double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_j = -1;
-		      break;
-		    }
-		  else if (abs_tmp < abs_min)
-		    {
-		      idx_j = j;
-		      tmp_min = tmp;
-		      abs_min = abs_tmp;
-		    }
-		}
-
-	      result.elem (i) = (idx_j < 0) ? Complex_NaN_result : tmp_min;
+	      result.elem (i) = tmp_min;
 	      index.elem (i) = idx_j;
 	    }
         }
     }
 
   return result;
 }
 
@@ -2813,48 +2825,60 @@ ComplexMatrix::row_max (Array<int>& inde
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
       index.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-	  int idx_j = 0;
-
-	  Complex tmp_max = elem (i, idx_j);
-
 	  bool real_only = row_is_real_only (i);
 
-	  double abs_max = real_only ? real (tmp_max) : ::abs (tmp_max);
-
-	  if (xisnan (tmp_max))
-	    idx_j = -1;
+	  int idx_j;
+
+	  Complex tmp_max;
+
+	  double abs_max = octave_NaN;
+
+	  for (idx_j = 0; idx_j < nc; idx_j++)
+	    {
+	      tmp_max = elem (i, idx_j);
+
+	      if (! octave_is_NaN_or_NA (tmp_max))
+		{
+		  abs_max = real_only ? real (tmp_max) : ::abs (tmp_max);
+		  break;
+		}
+	    }
+
+	  for (int j = idx_j+1; j < nc; j++)
+	    {
+	      Complex tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+
+	      double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
+
+	      if (abs_tmp > abs_max)
+		{
+		  idx_j = j;
+		  tmp_max = tmp;
+		  abs_max = abs_tmp;
+		}
+	    }
+
+	  if (octave_is_NaN_or_NA (tmp_max))
+	    {
+	      result.elem (i) = Complex_NaN_result;
+	      index.elem (i) = 0;
+	    }
 	  else
 	    {
-	      for (int j = 1; j < nc; j++)
-		{
-		  Complex tmp = elem (i, j);
-
-		  double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_j = -1;
-		      break;
-		    }
-		  else if (abs_tmp > abs_max)
-		    {
-		      idx_j = j;
-		      tmp_max = tmp;
-		      abs_max = abs_tmp;
-		    }
-		}
-
-	      result.elem (i) = (idx_j < 0) ? Complex_NaN_result : tmp_max;
+	      result.elem (i) = tmp_max;
 	      index.elem (i) = idx_j;
 	    }
         }
     }
 
   return result;
 }
 
@@ -2875,48 +2899,60 @@ ComplexMatrix::column_min (Array<int>& i
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
       index.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-	  int idx_i = 0;
-
-	  Complex tmp_min = elem (idx_i, j);
-
 	  bool real_only = column_is_real_only (j);
 
-	  double abs_min = real_only ? real (tmp_min) : ::abs (tmp_min);
-
-	  if (xisnan (tmp_min))
-	    idx_i = -1;
+	  int idx_i;
+
+	  Complex tmp_min;
+
+	  double abs_min = octave_NaN;
+
+	  for (idx_i = 0; idx_i < nr; idx_i++)
+	    {
+	      tmp_min = elem (idx_i, j);
+
+	      if (! octave_is_NaN_or_NA (tmp_min))
+		{
+		  abs_min = real_only ? real (tmp_min) : ::abs (tmp_min);
+		  break;
+		}
+	    }
+
+	  for (int i = idx_i+1; i < nr; i++)
+	    {
+	      Complex tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+
+	      double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
+
+	      if (abs_tmp < abs_min)
+		{
+		  idx_i = i;
+		  tmp_min = tmp;
+		  abs_min = abs_tmp;
+		}
+	    }
+
+	  if (octave_is_NaN_or_NA (tmp_min))
+	    {
+	      result.elem (j) = Complex_NaN_result;
+	      index.elem (j) = 0;
+	    }
 	  else
 	    {
-	      for (int i = 1; i < nr; i++)
-		{
-		  Complex tmp = elem (i, j);
-
-		  double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_i = -1;
-		      break;
-		    }
-		  else if (abs_tmp < abs_min)
-		    {
-		      idx_i = i;
-		      tmp_min = tmp;
-		      abs_min = abs_tmp;
-		    }
-		}
-
-	      result.elem (j) = (idx_i < 0) ? Complex_NaN_result : tmp_min;
+	      result.elem (j) = tmp_min;
 	      index.elem (j) = idx_i;
 	    }
         }
     }
 
   return result;
 }
 
@@ -2937,48 +2973,60 @@ ComplexMatrix::column_max (Array<int>& i
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
       index.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-	  int idx_i = 0;
-
-	  Complex tmp_max = elem (idx_i, j);
-
 	  bool real_only = column_is_real_only (j);
 
-	  double abs_max = real_only ? real (tmp_max) : ::abs (tmp_max);
-
-	  if (xisnan (tmp_max))
-	    idx_i = -1;
+	  int idx_i;
+
+	  Complex tmp_max;
+
+	  double abs_max = octave_NaN;
+
+	  for (idx_i = 0; idx_i < nr; idx_i++)
+	    {
+	      tmp_max = elem (idx_i, j);
+
+	      if (! octave_is_NaN_or_NA (tmp_max))
+		{
+		  abs_max = real_only ? real (tmp_max) : ::abs (tmp_max);
+		  break;
+		}
+	    }
+
+	  for (int i = idx_i+1; i < nr; i++)
+	    {
+	      Complex tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+
+	      double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
+
+	      if (abs_tmp > abs_max)
+		{
+		  idx_i = i;
+		  tmp_max = tmp;
+		  abs_max = abs_tmp;
+		}
+	    }
+
+	  if (octave_is_NaN_or_NA (tmp_max))
+	    {
+	      result.elem (j) = Complex_NaN_result;
+	      index.elem (j) = 0;
+	    }
 	  else
 	    {
-	      for (int i = 1; i < nr; i++)
-		{
-		  Complex tmp = elem (i, j);
-
-		  double abs_tmp = real_only ? real (tmp) : ::abs (tmp);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_i = -1;
-		      break;
-		    }
-		  else if (abs_tmp > abs_max)
-		    {
-		      idx_i = i;
-		      tmp_max = tmp;
-		      abs_max = abs_tmp;
-		    }
-		}
-
-	      result.elem (j) = (idx_i < 0) ? Complex_NaN_result : tmp_max;
+	      result.elem (j) = tmp_max;
 	      index.elem (j) = idx_i;
 	    }
         }
     }
 
   return result;
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,24 @@
+2003-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-mappers.cc (xmin, xmax): Handle NaN in a Matlab-compatible
+	way.  Handle NA in an R-compatible way.
+
+	* lo-cieee.c (lo_ieee_is_NaN_or_NA): Also check for lo_ieee_is_NA.
+	(lo_ieee_is_NA): Don't call isnan unless HAVE_ISNAN is defined.
+
+	* lo-mappers.h (octave_is_NA (const Complex&)): Provide decl.
+	(octave_is_NaN_or_NA (const Complex&)): Likewise.
+
+	* dMatrix.cc (Matrix::row_min, Matrix::row_max,
+	Matrix::column_min, Matrix::column_max): Ignore NaNs.
+	* CMatrix.cc (ComplexMatrix::row_min, ComplexMatrix::row_max,
+	ComplexMatrix::column_min, ComplexMatrix::column_max): Likewise.
+
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (assign (Array2<LT>&, const Array2<RT>&, const LT&)):
 	Pass true for resize_ok arg to freeze.
 	* Array-idx.h (assign (Array<LT>&, const Array<RT>&, const LT&)): 
 	Likewise.
 
 	* idx-vector.cc (IDX_VEC_REP::freeze): New arg, warn_resize;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2230,43 +2230,43 @@ Matrix::row_min (Array<int>& index) cons
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
       index.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-	  int idx_j = 0;
-
-	  double tmp_min = elem (i, idx_j);
-
-	  if (xisnan (tmp_min))
-	    idx_j = -1;
-	  else
+	  int idx_j;
+
+	  double tmp_min = octave_NaN;
+
+	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
-	      for (int j = 1; j < nc; j++)
+	      tmp_min = elem (i, idx_j);
+
+	      if (! octave_is_NaN_or_NA (tmp_min))
+		break;
+	    }
+
+	  for (int j = idx_j+1; j < nc; j++)
+	    {
+	      double tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+	      else if (tmp < tmp_min)
 		{
-		  double tmp = elem (i, j);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_j = -1;
-		      break;
-		    }
-		  else if (tmp < tmp_min)
-		    {
-		      idx_j = j;
-		      tmp_min = tmp;
-		    }
+		  idx_j = j;
+		  tmp_min = tmp;
 		}
 	    }
 
-	  result.elem (i) = (idx_j < 0) ? octave_NaN : tmp_min;
-	  index.elem (i) = idx_j;
+	  result.elem (i) = tmp_min;
+	  index.elem (i) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
         }
     }
 
   return result;
 }
 
 ColumnVector
 Matrix::row_max (void) const
@@ -2285,43 +2285,43 @@ Matrix::row_max (Array<int>& index) cons
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
       index.resize (nr);
 
       for (int i = 0; i < nr; i++)
         {
-	  int idx_j = 0;
-
-	  double tmp_max = elem (i, idx_j);
-
-	  if (xisnan (tmp_max))
-	    idx_j = -1;
-	  else
+	  int idx_j;
+
+	  double tmp_max = octave_NaN;
+
+	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
-	      for (int j = 1; j < nc; j++)
+	      tmp_max = elem (i, idx_j);
+
+	      if (! octave_is_NaN_or_NA (tmp_max))
+		break;
+	    }
+
+	  for (int j = idx_j+1; j < nc; j++)
+	    {
+	      double tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+	      else if (tmp > tmp_max)
 		{
-		  double tmp = elem (i, j);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_j = -1;
-		      break;
-		    }
-		  else if (tmp > tmp_max)
-		    {
-		      idx_j = j;
-		      tmp_max = tmp;
-		    }
+		  idx_j = j;
+		  tmp_max = tmp;
 		}
 	    }
 
-	  result.elem (i) = (idx_j < 0) ? octave_NaN : tmp_max;
-	  index.elem (i) = idx_j;
+	  result.elem (i) = tmp_max;
+	  index.elem (i) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_j;
         }
     }
 
   return result;
 }
 
 RowVector
 Matrix::column_min (void) const
@@ -2340,43 +2340,43 @@ Matrix::column_min (Array<int>& index) c
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
       index.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-	  int idx_i = 0;
-
-	  double tmp_min = elem (idx_i, j);
-
-	  if (xisnan (tmp_min))
-	    idx_i = -1;
-	  else
+	  int idx_i;
+
+	  double tmp_min = octave_NaN;
+
+	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
-	      for (int i = 1; i < nr; i++)
+	      tmp_min = elem (idx_i, j);
+
+	      if (! octave_is_NaN_or_NA (tmp_min))
+		break;
+	    }
+
+	  for (int i = idx_i+1; i < nr; i++)
+	    {
+	      double tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+	      else if (tmp < tmp_min)
 		{
-		  double tmp = elem (i, j);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_i = -1;
-		      break;
-		    }
-		  else if (tmp < tmp_min)
-		    {
-		      idx_i = i;
-		      tmp_min = tmp;
-		    }
+		  idx_i = i;
+		  tmp_min = tmp;
 		}
 	    }
 
-	  result.elem (j) = (idx_i < 0) ? octave_NaN : tmp_min;
-	  index.elem (j) = idx_i;
+	  result.elem (j) = tmp_min;
+	  index.elem (j) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_i;
         }
     }
 
   return result;
 }
 
 RowVector
 Matrix::column_max (void) const
@@ -2395,43 +2395,43 @@ Matrix::column_max (Array<int>& index) c
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
       index.resize (nc);
 
       for (int j = 0; j < nc; j++)
         {
-	  int idx_i = 0;
-
-	  double tmp_max = elem (idx_i, j);
-
-	  if (xisnan (tmp_max))
-	    idx_i = -1;
-	  else
+	  int idx_i;
+
+	  double tmp_max = octave_NaN;
+
+	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
-	      for (int i = 1; i < nr; i++)
+	      tmp_max = elem (idx_i, j);
+
+	      if (! octave_is_NaN_or_NA (tmp_max))
+		break;
+	    }
+
+	  for (int i = idx_i+1; i < nr; i++)
+	    {
+	      double tmp = elem (i, j);
+
+	      if (octave_is_NaN_or_NA (tmp))
+		continue;
+	      else if (tmp > tmp_max)
 		{
-		  double tmp = elem (i, j);
-
-		  if (xisnan (tmp))
-		    {
-		      idx_i = -1;
-		      break;
-		    }
-		  else if (tmp > tmp_max)
-		    {
-		      idx_i = i;
-		      tmp_max = tmp;
-		    }
+		  idx_i = i;
+		  tmp_max = tmp;
 		}
 	    }
 
-	  result.elem (j) = (idx_i < 0) ? octave_NaN : tmp_max;
-	  index.elem (j) = idx_i;
+	  result.elem (j) = tmp_max;
+	  index.elem (j) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_i;
         }
     }
 
   return result;
 }
 
 std::ostream&
 operator << (std::ostream& os, const Matrix& a)
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -112,25 +112,32 @@ lo_ieee_isinf (double x)
 #else
   return 0;
 #endif
 }
 
 int
 lo_ieee_is_NA (double x)
 {
+#if defined HAVE_ISNAN
   lo_ieee_double t;
   t.value = x;
   return (isnan (x) && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
+#else
+  return 0;
+#endif
 }
 
 int
 lo_ieee_is_NaN_or_NA (double x)
 {
-  return lo_ieee_isnan (x);
+  // Although NA really is an IEEE NaN value, lo_ieee_isnan pretends
+  // it is not, so we much check both...
+
+  return lo_ieee_isnan (x) || lo_ieee_is_NA (x);
 }
 
 double
 lo_ieee_inf_value (void)
 {
   return octave_Inf;
 }
 
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -128,23 +128,49 @@ octave_is_NaN_or_NA (double x)
 
 // (double, double) -> double mappers.
 
 // XXX FIXME XXX -- need to handle NA too?
 
 double
 xmin (double x, double y)
 {
-  return x < y ? x : (xisnan (x) ? x : y);
+  if (x < y)
+    return x;
+
+  if (y <= x)
+    return y;
+
+  if (octave_is_NaN_or_NA (x) && ! octave_is_NaN_or_NA (y))
+    return y;
+  else if (octave_is_NaN_or_NA (y) && ! octave_is_NaN_or_NA (x))
+    return x;
+  else if (octave_is_NA (x) || octave_is_NA (y))
+    return octave_NA;
+  else
+    return octave_NaN;
 }
 
 double
 xmax (double x, double y)
 {
-  return x > y ? x : (xisnan (x) ? x : y);
+  if (x > y)
+    return x;
+
+  if (y >= x)
+    return y;
+
+  if (octave_is_NaN_or_NA (x) && ! octave_is_NaN_or_NA (y))
+    return y;
+  else if (octave_is_NaN_or_NA (y) && ! octave_is_NaN_or_NA (x))
+    return x;
+  else if (octave_is_NA (x) || octave_is_NA (y))
+    return octave_NA;
+  else
+    return octave_NaN;
 }
 
 // complex -> complex mappers.
 
 Complex
 acos (const Complex& x)
 {
   static Complex i (0, 1);
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -61,16 +61,19 @@ extern Complex fix (const Complex& x);
 extern Complex floor (const Complex& x);
 extern Complex round (const Complex& x);
 extern Complex signum (const Complex& x);
 
 extern bool xisnan (const Complex& x);
 extern bool xfinite (const Complex& x);
 extern bool xisinf (const Complex& x);
 
+extern bool octave_is_NA (const Complex& x);
+extern bool octave_is_NaN_or_NA (const Complex& x);
+
 extern Complex xmin (const Complex& x, const Complex& y);
 extern Complex xmax (const Complex& x, const Complex& y);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2003-07-25  Paul Kienzle <pkienzle@users.sf.net>
+
+	* signal/autocov.m: Transpose result of conj because diag returns
+	a column vector, not a row vector.
+
+	* audio/playaudio.m, audio/record.m, image/image.m,
+	miscellaneous/bug_report.m: Protect spaces in filenames
+	with quotes.
+
 2003-07-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* io/printf.m, io/puts.m: Delete.
 
 	* miscellaneous/dump_prefs.m: Delete define_all_return_values and
 	default_return_value from the list.
 	Add warn_undefined_return_values to the list.
 	
diff --git a/scripts/audio/playaudio.m b/scripts/audio/playaudio.m
--- a/scripts/audio/playaudio.m
+++ b/scripts/audio/playaudio.m
@@ -45,34 +45,34 @@ function playaudio (name, ext)
       endif
     endif
     X = name + 127;
     unwind_protect
       file = tmpnam ();
       num = fopen (file, "wb");
       c = fwrite (num, X, "uchar");
       fclose (num);
-      system (sprintf ("cat %s > /dev/dsp", file));
+      system (sprintf ("cat \"%s\" > /dev/dsp", file));
     unwind_protect_cleanup
       unlink (file);
     end_unwind_protect
   elseif (nargin >= 1 && isstr (name))
     ## play a file
     if (nargin == 1)
       name = [name, ".lin"];
     elseif (nargin == 2)
       name = [name, ".", ext];
     else
       usage (usage_msg);
     endif
     if (strcmp (ext, "lin") || strcmp (ext, "raw"))
-      system (sprintf ("cat %s > /dev/dsp", name));
+      system (sprintf ("cat \"%s\" > /dev/dsp", name));
     elseif (strcmp (ext, "mu") || strcmp (ext, "au")
 	    || strcmp (ext, "snd") || strcmp (ext, "ul"))
-      system (sprintf ("cat %s > /dev/audio", name));
+      system (sprintf ("cat \"%s\" > /dev/audio", name));
     else
       error ("playaudio does not support given extension");
     endif
   else
     usage (usage_msg);
   endif
 
 endfunction
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -39,17 +39,17 @@ function X = record (sec, sampling_rate)
   endif
 
   unwind_protect
 
     file = tmpnam ();
 
     input ("Please hit ENTER and speak afterwards!\n", 1);
 
-    cmd = sprintf ("dd if=/dev/dsp of=%s bs=%d count=%d",
+    cmd = sprintf ("dd if=/dev/dsp of=\"%s\" bs=%d count=%d",
                    file, sampling_rate, sec)
 
     system (cmd);
 
     num = fopen (file, "rb");
 
     [Y, c] = fread (num, sampling_rate * sec, "uchar");
 
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -68,24 +68,24 @@ function image (x, y, A, zoom)
     endif
   endif
   ppm_name = tmpnam ();
 
   saveimage (ppm_name, A, "ppm");
 
   ## Start the viewer.  Try display, xv, then xloadimage.
 
-  xv = sprintf ("xv -raw -expand %f %s", zoom, ppm_name);
+  xv = sprintf ("xv -raw -expand %f \"%s\"", zoom, ppm_name);
 
-  xloadimage = sprintf ("xloadimage -zoom %f %s", zoom*100, ppm_name);
+  xloadimage = sprintf ("xloadimage -zoom %f \"%s\"", zoom*100, ppm_name);
 
   ## ImageMagick:
-  im_display = sprintf ("display -geometry %f%% %s", zoom*100, ppm_name);
+  im_display = sprintf ("display -geometry %f%% \"%s\"", zoom*100, ppm_name);
   
-  rm = sprintf ("rm -f %s", ppm_name);
+  rm = sprintf ("rm -f \"%s\"", ppm_name);
 
   ## Need to let the shell clean up the tmp file because we are putting
   ## the viewer in the background.
 
   system (sprintf ("( %s || %s || %s && %s ) > /dev/null 2>&1 &",
                    im_display, xv, xloadimage, rm));
 
 endfunction
diff --git a/scripts/miscellaneous/bug_report.m b/scripts/miscellaneous/bug_report.m
--- a/scripts/miscellaneous/bug_report.m
+++ b/scripts/miscellaneous/bug_report.m
@@ -52,17 +52,17 @@ function bug_report ()
 
     cmd = strcat ("octave-bug-", OCTAVE_VERSION);
 
     if (length (subject) > 0)
       cmd = sprintf ("%s -s \"%s\"", cmd, subject);
     endif
 
     if (! isempty (prefs))
-      cmd = sprintf ("%s %s", cmd, prefs);
+      cmd = sprintf ("%s \"%s\"", cmd, prefs);
     endif
 
     system (cmd);
 
   unwind_protect_cleanup
 
     if (! isempty (prefs))
       unlink (prefs);
diff --git a/scripts/signal/autocov.m b/scripts/signal/autocov.m
--- a/scripts/signal/autocov.m
+++ b/scripts/signal/autocov.m
@@ -42,12 +42,12 @@ function retval = autocov (X, h)
 
   if (nargin == 1)
     h = n - 1;
   endif
 
   retval = zeros (h + 1, c);
 
   for i = 0 : h
-    retval(i+1, :) = diag (X(i+1:n, :).' * conj (X(1:n-i, :))) / n;
+    retval(i+1, :) = diag (X(i+1:n, :).' * conj (X(1:n-i, :))).' / n;
   endfor
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-07-25  Paul Kienzle <pkienzle@users.sf.net>
+
+	* help.cc (try_info, display_help_text):
+	Protect spaces in filenames with quotes.
+	* oct-hist.cc (do_edit_history): Likewise.
+	* pt-plot.cc (open_plot_stream): Likewise.
+
 2003-07-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (get_size, octave_base_stream::error,
 	octave_base_stream::do_gets, octave_base_stream::getl,
 	octave_base_stream::gets, octave_base_stream::do_scanf,
 	octave_base_stream::scanf, octave_base_stream::do_oscanf,
 	octave_base_stream::oscanf, do_printf_conv,
 	octave_base_stream::do_printf, octave_base_stream::printf,
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -503,25 +503,25 @@ simple_help (void)
 
 static int
 try_info (const std::string& nm)
 {
   int status = 0;
 
   OSSTREAM cmd_buf;
 
-  cmd_buf << Vinfo_prog << " --file " << Vinfo_file;
+  cmd_buf << "\"" << Vinfo_prog << "\" --file \"" << Vinfo_file << "\"";
 
   std::string directory_name = Vinfo_file;
   size_t pos = directory_name.rfind ('/');
 
   if (pos != NPOS)
     {
       directory_name.resize (pos + 1);
-      cmd_buf << " --directory " << directory_name;
+      cmd_buf << " --directory \"" << directory_name << "\"";
     }
 
   if (nm.length () > 0)
     cmd_buf << " --index-search " << nm;
 
   cmd_buf << OSSTREAM_ENDS;
 
   volatile octave_interrupt_handler old_interrupt_handler
@@ -608,17 +608,17 @@ display_help_text (std::ostream& os, con
 	cols -= 7;
 
       if (cols > 80)
 	cols = 72;
 
       OSSTREAM buf;
 
       buf << "sed -e 's/^[#%][#%]* *//' -e 's/^ *@/@/' | "
-	  << Vmakeinfo_prog
+	  << "\"" << Vmakeinfo_prog << "\""
 	  << " -D \"VERSION " << OCTAVE_VERSION << "\""
 	  << " -D \"OCTAVEHOME " << OCTAVE_PREFIX << "\""
 	  << " -D \"TARGETHOSTTYPE " << OCTAVE_CANONICAL_HOST_TYPE << "\""
 	  << " --fill-column " << cols
 	  << " --no-warn"
 	  << " --no-validate"
 	  << " --no-headers"
 	  << " --force"
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -435,18 +435,19 @@ do_edit_history (int argc, const string_
   std::string name = mk_tmp_hist_file (argc, argv, 0, "edit_history");
 
   if (name.empty ())
     return;
 
   // Call up our favorite editor on the file of commands.
 
   std::string cmd = Veditor;
-  cmd.append (" ");
+  cmd.append (" \"");
   cmd.append (name);
+  cmd.append ("\"");
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
   volatile octave_interrupt_handler old_interrupt_handler
     = octave_ignore_interrupts ();
 
   system (cmd.c_str ());
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -127,20 +127,22 @@ open_plot_stream (void)
     }
 
   if (! plot_stream)
     {
       initialized = false;
 
       plot_line_count = 0;
 
-      std::string plot_prog = Vgnuplot_binary;
+      std::string plot_prog;
 
-      if (plot_prog.empty ())
+      if (Vgnuplot_binary.empty ())
 	plot_prog = "gnuplot";
+      else
+        plot_prog = "\"" + Vgnuplot_binary + "\"";
 
       // XXX FIXME XXX -- I'm not sure this is the right thing to do,
       // but without it, C-c at the octave prompt will kill gnuplot...
 
 #if defined (HAVE_POSIX_SIGNALS)
       sigset_t set, oset;
       sigemptyset (&set);
       sigaddset (&set, SIGINT);
