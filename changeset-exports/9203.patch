# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1242401510 14400
#      Fri May 15 11:31:50 2009 -0400
# Node ID a542fc1581759f1893ce83b60fabd35756da49e2
# Parent  4b2147b25e8d2a0c7de6a6a9716e63258afb9be0
improve performance of saving large structs in MAT file format

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-05-15  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (save_mat5_binary_element): Avoid multiple calls to
+	contents method.  From David Bateman <dbateman@free.fr>.
+	(save_mat5_element_length): Use const Cell to avoid making copies
+	when indexing.
+
 2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-stream.cc: Don't instantiate Array2<read_fptr>.
 	(octave_stream::read): Make read_fptr_table a static 2d array.
 	(FILL_TABLE_ROW): Update.
 
 2009-05-12  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1833,19 +1833,19 @@ save_mat5_element_length (const octave_v
       ret += 16 + fieldcnt * (max_namelen + 1);
 
 
       for (int j = 0; j < nel; j++)
 	{
 
 	  for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
 	    {
-	      Cell elts = m.contents (i);
+	      const Cell elts = m.contents (i);
 
-	      ret += 8 + save_mat5_element_length (elts (j), "", 
+	      ret += 8 + save_mat5_element_length (elts(j), "", 
 					       save_as_floats, mat7_format);
 	    }
 	}
     }
   else
     ret = -1;
 
   return ret;
@@ -2213,27 +2213,31 @@ save_mat5_binary_element (std::ostream& 
 	    memset (buf, 0, max_namelen + 1);
 	    // only 31 or 63 char names permitted
 	    strncpy (buf, key.c_str (), max_namelen);
 	    os.write (buf, max_namelen + 1);
 	  }
 
 	int len = m.numel ();
 
+	// Create temporary copy of structure contents to avoid
+	// multiple calls of the contents method.
+	std::vector<const octave_value *> elts (nf);
+	for (octave_idx_type i = 0; i < nf; i++)
+	  elts[i] = m.contents (keys(i)).data ();
+
 	for (int j = 0; j < len; j++)
 	  {
 	    // write the data of each element
 
 	    // Iterating over the list of keys will preserve the order
 	    // of the fields.
 	    for (octave_idx_type i = 0; i < nf; i++)
 	      {
-		Cell elts = m.contents (keys(i));
-
-		bool retval2 = save_mat5_binary_element (os, elts(j), "",
+		bool retval2 = save_mat5_binary_element (os, elts[i][j], "",
 							 mark_as_global,
 							 false, 
 							 save_as_floats);
 		if (! retval2)
 		  goto error_cleanup;
 	      }
 	  }
       }
