# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546996400 28800
#      Tue Jan 08 17:13:20 2019 -0800
# Branch stable
# Node ID cfe28edab48b094099a56deafb0185c11bebf693
# Parent  d76f9e42290ad998673e29d6e58e0e787384cd3c
pr-output.cc: Fix static analyzer detected issues (bug #55347).

* pr-output.cc (make_real_format): Remove never executed code for inf_or_nan.
* pr-output.cc (make_real_matrix_format): Remove never executed code for
inf_or_nan.
* pr-output.cc (make_complex_format): Remove never executed code for
inf_or_nan.
* pr-output.cc (make_complex_matrix_format): Remove never executed code for
inf_or_nan.
* pr-output.cc (octave_print_matrix_internal): Remove useless test on
"j < lim".
* pr-output.cc (octave_print_diag_matrix_internal): Remove useless test on
"j < lim".
* pr-output.cc (print_nd_array): Remove useless test on "i < m".
* pr-output.cc (octave_print_internal): Remove useless test on "j < lim" and on
"i < m".

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -407,18 +407,16 @@ make_real_format (int digits, bool inf_o
         }
       else
         {
           ld = 1;
           rd = (prec > digits ? prec - digits : prec);
         }
 
       fw = 1 + ld + 1 + rd;
-      if (inf_or_nan && fw < 4)
-        fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e || print_g || print_eng
           || ld + rd > pr_output_traits<T>::digits10
           || fw > pr_output_traits<T>::max_field_width))
     {
       if (print_g)
@@ -509,18 +507,16 @@ make_real_matrix_format (int x_max, int 
     {
       fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
       int digits = (x_max > x_min ? x_max : x_min);
       fw = (digits <= 0 ? 5 : digits + 4);
-      if (inf_or_nan && fw < 5)
-        fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
       fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
@@ -682,18 +678,16 @@ make_complex_format (int x_max, int x_mi
       r_fw = 0;
       rd = 0;
     }
   else if (bank_format)
     {
       int digits = r_x;
       i_fw = 0;
       r_fw = (digits <= 0 ? 5 : digits + 4);
-      if (inf_or_nan && r_fw < 5)
-        r_fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (T);
       i_fw = 2 * sizeof (T);
       rd = 0;
     }
@@ -750,21 +744,16 @@ make_complex_format (int x_max, int x_mi
           x_min = -x_min + 1;
         }
 
       ld = (ld_max > ld_min ? ld_max : ld_min);
       rd = (rd_max > rd_min ? rd_max : rd_min);
 
       i_fw = ld + 1 + rd;
       r_fw = i_fw + 1;
-      if (inf_or_nan && i_fw < 3)
-        {
-          i_fw = 3;
-          r_fw = 4;
-        }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e || print_eng || print_g
           || ld + rd > pr_output_traits<T>::digits10
           || r_fw > pr_output_traits<T>::max_field_width
           || i_fw > pr_output_traits<T>::max_field_width))
     {
@@ -901,18 +890,16 @@ make_complex_matrix_format (int x_max, i
       r_fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
       int digits = (r_x_max > r_x_min ? r_x_max : r_x_min);
       i_fw = 0;
       r_fw = (digits <= 0 ? 5 : digits + 4);
-      if (inf_or_nan && r_fw < 5)
-        r_fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (T);
       i_fw = 2 * sizeof (T);
       rd = 0;
     }
@@ -1832,17 +1819,17 @@ octave_print_matrix_internal (std::ostre
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       if (i == 0 && j == 0)
                         os << "[ ";
                       else
                         {
-                          if (j > col && j < lim)
+                          if (j > col)
                             os << ", ";
                           else
                             os << "  ";
                         }
 
                       pr_float (os, fmt, m(i,j));
                     }
 
@@ -1948,17 +1935,17 @@ octave_print_diag_matrix_internal (std::
               for (octave_idx_type j = col; j < lim; j++)
                 {
                   octave_quit ();
 
                   if (j == 0)
                     os << "[ ";
                   else
                     {
-                      if (j > col && j < lim)
+                      if (j > col)
                         os << ", ";
                       else
                         os << "  ";
                     }
 
                   pr_float (os, fmt, m(j,j));
                 }
 
@@ -2086,18 +2073,17 @@ void print_nd_array (std::ostream& os, c
               page.print_with_name (os, nm);
             }
           else
             {
               page.print_name_tag (os, nm);
               page.print_raw (os);
             }
 
-          if (i < m)
-            NDA_T::increment_index (ra_idx, dims, 2);
+          NDA_T::increment_index (ra_idx, dims, 2);
         }
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const NDArray& nda,
                        bool pr_as_read_syntax, int extra_indent)
 {
@@ -2242,17 +2228,17 @@ octave_print_internal (std::ostream& os,
               for (octave_idx_type j = col; j < lim; j++)
                 {
                   octave_quit ();
 
                   if (j == 0)
                     os << "[ ";
                   else
                     {
-                      if (j > col && j < lim)
+                      if (j > col)
                         os << ", ";
                       else
                         os << "  ";
                     }
 
                   os << pvec (j);
                 }
 
@@ -2686,18 +2672,17 @@ octave_print_internal (std::ostream& os,
                 os << "  " << page(ii,jj);
 
               os << "\n";
             }
 
           if (i < m - 1)
             os << "\n";
 
-          if (i < m)
-            increment_index (ra_idx, dims, 2);
+          increment_index (ra_idx, dims, 2);
         }
     }
 }
 
 template <typename T>
 class
 octave_print_conv
 {
