# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1300598527 25200
#      Sat Mar 19 22:22:07 2011 -0700
# Node ID 1eb430d9a1b9d02c02e90db6601ff2884fd8ff77
# Parent  5b9b2645db2650a01d77acad740238729bb6b323
Add cellindexmat function to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-03-19  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/container.txi: Add cellindexmat function to documentation.
+
 2010-03-19  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/oop.txi: Add optimize_subsasgn_calls function to 
 	documentation.
 
 2010-03-19  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/stats.txi: Add runlength function to documentation.
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -774,16 +774,22 @@ x@{1, :@} = []
         [1,1] = [](0x0)
         [2,1] = 3
         [1,2] = [](0x0)
         [2,2] = 4
       @}
 @end group
 @end example
 
+The indexing operations operate on the the cell array and not on the objects
+within the cell array.  By contrast, @code{cellindexmat} applies matrix indexing
+to the objects within each cell array entry and returns the requested values.
+
+@DOCSTRING(cellindexmat)
+
 @node Cell Arrays of Strings
 @subsection Cell Arrays of Strings
 
 One common use of cell arrays is to store multiple strings in the same
 variable.  It is also possible to store multiple strings in a
 character matrix by letting each row be a string.  This, however,
 introduces the problem that all strings must be of equal length.
 Therefore, it is recommended to use cell arrays to store multiple
