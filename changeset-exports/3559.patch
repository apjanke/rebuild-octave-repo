# HG changeset patch
# User jwe
# Date 949555056 0
#      Thu Feb 03 05:17:36 2000 +0000
# Node ID 12d7ec415f35c0a813dfcc137a2147b216532b86
# Parent  d2d769ed9eaa3afaa078e013cd5420ab16a06c66
[project @ 2000-02-03 05:17:36 by jwe]

diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cstring>
 
 #include <iomanip>
 #include <strstream>
+#include <fstream>
 #include <string>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
 #include "error.h"
@@ -1003,17 +1004,17 @@ octave_base_stream::read (const Matrix& 
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
 template <class T>
 void
 do_scanf_conv (std::istream& is, const char *fmt, T valptr, Matrix& mval,
-	       double *data, int& idx, int& conv_count, int nr,
+	       double *data, int& idx, int& conversion_count, int nr,
 	       int max_size, bool discard) 
 {
   is.scan (fmt, valptr);
 
   if (is)
     {
       if (idx == max_size && ! discard)
 	{
@@ -1024,17 +1025,17 @@ do_scanf_conv (std::istream& is, const c
 	  else
 	    mval.resize (max_size, 1, 0.0);
 
 	  data = mval.fortran_vec ();
 	}
 
       if (! discard)
 	{
-	  conv_count++;
+	  conversion_count++;
 	  data[idx++] = *(valptr);
 	}
     }
 }
 
 template void
 do_scanf_conv (std::istream&, const char*, int*, Matrix&, double*, int&,
 	       int&, int, int, bool);
@@ -1547,21 +1548,21 @@ octave_base_stream::do_scanf (scanf_form
 	retval = retval.convert_to_str ();
     }
 
   return retval;
 }
 
 octave_value
 octave_base_stream::scanf (const std::string& fmt, const Matrix& size,
-			   int& count)
+			   int& conversion_count)
 {
   octave_value retval = Matrix ();
 
-  count = 0;
+  conversion_count = 0;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
       scanf_format_list fmt_list (fmt);
@@ -1613,17 +1614,18 @@ octave_base_stream::scanf (const std::st
 	    int nr = -1;
 	    int nc = -1;
 
 	    bool one_elt_size_spec;
 
 	    get_size (size, nr, nc, one_elt_size_spec, "fscanf");
 
 	    if (! error_state)
-	      retval = do_scanf (fmt_list, nr, nc, one_elt_size_spec, count);
+	      retval = do_scanf (fmt_list, nr, nc, one_elt_size_spec,
+				 conversion_count);
 	  }
 	  break;
 	}
     }
   else
     invalid_operation ("fscanf", "reading");
 
   return retval;
@@ -3103,21 +3105,21 @@ octave_stream_list::do_list_open_files (
 	  std::string mode = octave_stream::mode_as_string (os.mode ());
 
 	  std::string arch =
 	    oct_mach_info::float_format_as_string (os.float_format ());
 
 	  std::string name = os.name ();
 
 	  buf << "  "
-	      << setiosflags (std::ios::right)
-	      << setw (4) << i << "     "
-	      << setiosflags (std::ios::left)
-	      << setw (3) << mode.c_str () << "  "
-	      << setw (9) << arch.c_str () << "  "
+	      << std::setiosflags (std::ios::right)
+	      << std::setw (4) << i << "     "
+	      << std::setiosflags (std::ios::left)
+	      << std::setw (3) << mode.c_str () << "  "
+	      << std::setw (9) << arch.c_str () << "  "
 	      << name << "\n";
 	}
     }
 
   buf << "\n" << std::ends;
 
   char *tmp = buf.str ();
 
