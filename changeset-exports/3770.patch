# HG changeset patch
# User jwe
# Date 981080502 0
#      Fri Feb 02 02:21:42 2001 +0000
# Node ID bf6116ca10eb722d348df4e5476e61a5790792ca
# Parent  7c8e3c42ed04a411db1e85a209bc419ad8964b35
[project @ 2001-02-02 02:21:40 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,43 @@
+2001-02-01  Ben Sapp  <bsapp@lanl.gov>
+
+        * DLD-FUNCTIONS/debug.cc: New file.
+        * pt-bp.h, pt-bp.cc: New files, for breakpoints.
+	* Makefile.in: Add them to the appropriate lists.
+
+        * pt-stmt.cc (tree_statement_list::set_breakpoint,
+	tree_statement_list::delete_breakpoint,
+	tree_statement_list::list_breakpoints): New functions.
+
+	* pt.h (tree::break_point): New data member.
+	(tree::set_breakpoint, tree::delete_breakpoint, tree::is_breakpoint):
+	New virtual functions.
+
+	* pt-mat.cc (tree_matrix::rvalue): Check for breakpoint here.
+	* pt-unop.cc (tree_prefix_expression::rvalue): Likewise.
+	(tree_postfix_expression::rvalue): Likewise.
+	* pt-loop.cc (tree_do_until_command::eval): Likewise.
+	(DO_LOOP): Likewise.
+	(tree_simple_for_command::eval): Likewise.
+	(tree_complex_for_command::eval): Likewise.
+	* pt-assign.cc (tree_simple_assignment::rvalue): Likewise.
+	* pt-binop.cc (tree_binary_expression::rvalue): Likewise.
+	(tree_boolean_expression::rvalue): Likewise.
+	* pt-cell.cc (tree_cell::rvalue): Likewise.
+	* pt-colon.cc (tree_colon_expression::rvalue): Likewise.
+	* pt-except.cc (tree_try_catch_command::eval): Likewise.
+	(tree_unwind_protect_command::eval): Likewise.
+	* pt-id.cc (tree_identifier::rvalue): Likewise.
+	(tree_identifier::lvalue): Likewise.
+	* pt-indir.cc (tree_indirect_ref::rvalue): Likewise.
+	* pt-jump.cc (tree_break_command::eval): Likewise.
+	(tree_continue_command::eval): Likewise.
+	(tree_return_command::eval): Likewise.
+
 2001-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Map.h, Map.cc (CHMap<C>::operator = (const CHMap&)): New function.
 	(Map<C>::operator = (const Map&)): Likewise.
 	(Map<C> (const Map&)): Likewise.
 
 	* OPERATORS/op-cm-cs.cc, OPERATORS/op-cm-s.cc,
 	OPERATORS/op-m-cs.cc, OPERATORS/op-m-s.cc:
@@ -536,27 +571,27 @@ 2000-03-22  John W. Eaton  <jwe@bevo.che
 	* oct-lvalue.h (dummy_val): New static variable.
 	(octave_lvalue::octave_lvalue): Use it to initialize val.
 
 	* variables.cc (is_valid_function): Look in the global symbol
 	table for functions.
 
 2000-03-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* src/Makefile.in (LIBRARIES): Conditionally define.
+	* Makefile.in (LIBRARIES): Conditionally define.
 	(libraries): Depend on $(LIBRARIES).
 	(octave): Depend on $(LIBRARIES), not libraries.  Also depend on
 	stamp-prereq and stamp-oct-links.
 	(all): Don't depend on stamp-prereq or stamp-oct-links.
 	(liboctinterp.$(LIBEXT), liboctinterp.$(SHELXT)): Delete target
 	before rebuilding.
 
 2000-03-21  Ben Sapp <bsapp@nua.lampf.lanl.gov>:
 
-	* src/Makefile.in (libraries): Depend only on library targets, not
+	* Makefile.in (libraries): Depend only on library targets, not
 	archive members.
 
 2000-03-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (objects): New target
 
 	* c_file_ptr_stream.h, c_file_ptr_stream.cc: New files.
 	* oct-stdstrm.h, oct-stdstrm.cc, oct-prcstrm.cc:
@@ -1386,17 +1421,17 @@ 1999-10-29  John W. Eaton  <jwe@bevo.che
 	* ov-base.h (is_builtin_function, is_dld_function): Ditto.
 
 	* parse.y (Vwarn_reload_forces_clear): New static flag.
 	(warn_reload_forces_clear): New function.
 	(symbols_of_parse): DEFVAR warn_reload_forces_clear.
 
 	* variables.cc (Fclear): Look for dld functions too.
 
-	* ov-dld-fcn.cc, src/ov-dld-fcn.h: New files.
+	* ov-dld-fcn.cc, ov-dld-fcn.h: New files.
 	* Makefile.in (OV_INCLUDES, OV_SRC): Add them to the lists.
 
 	* Makefile.in (DEFVAR_PATTERN): Also match DEFCONSTX.
 
 1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLList.h, DLList.cc: New files.
 	* Makefile.in (INCLUDES, DIST_SRC): Add them to the lists.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -35,17 +35,17 @@ ifeq ($(OCTAVE_LITE), true)
 	  $(SH_LD) $(SH_LDFLAGS) -o $@ $<
   else
     %.oct : %.o
 	  $(SH_LD) $(SH_LDFLAGS) -o $@ $<
   endif
 endif
 
 DLD_XSRC := balance.cc besselj.cc betainc.cc chol.cc colloc.cc dassl.cc \
-	det.cc eig.cc expm.cc fft.cc fft2.cc filter.cc find.cc \
+	debug.cc det.cc eig.cc expm.cc fft.cc fft2.cc filter.cc find.cc \
 	fsolve.cc gammainc.cc getgrent.cc getpwent.cc getrusage.cc \
 	givens.cc hess.cc ifft.cc ifft2.cc inv.cc log.cc lpsolve.cc \
 	lsode.cc lu.cc minmax.cc pinv.cc qr.cc quad.cc qz.cc rand.cc \
 	schur.cc sort.cc svd.cc syl.cc time.cc
 
 DLD_SRC := $(addprefix DLD-FUNCTIONS/, $(DLD_XSRC))
 
 DLD_OBJ := $(patsubst %.cc, %.o, $(DLD_XSRC))
@@ -67,20 +67,20 @@ endif
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov-cell.h ov.h \
 	ov-fcn.h ov-builtin.h ov-dld-fcn.h ov-mapper.h ov-usr-fcn.h \
 	ov-base-nd-array.h ov-re-nd-array.h ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
-	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h pt-decl.h \
-	pt-except.h pt-exp.h pt-id.h pt-idx.h pt-indir.h \
+        pt-bp.h	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h \
+	pt-decl.h pt-except.h pt-exp.h pt-id.h pt-idx.h pt-indir.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h pt-plot.h \
-	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h
+	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h \
 
 INCLUDES := BaseSLList.h Cell.h DLList.h Map.h Pix.h SLList.h \
 	SLStack.h Stack.h c-file-ptr-stream.h comment-list.h defun-dld.h \
 	defun-int.h defun.h dirfns.h dynamic-ld.h error.h file-io.h \
 	fn-cache.h gripes.h help.h input.h lex.h load-save.h \
 	oct-fstrm.h oct-hist.h oct-iostrm.h oct-map.h oct-obj.h \
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h oct-stream.h \
 	oct-strstrm.h oct-lvalue.h oct.h ops.h pager.h parse.h \
@@ -109,17 +109,17 @@ OP_SRC := $(addprefix OPERATORS/, $(OP_X
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-list.cc ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-base-nd-array.cc ov-re-nd-array.cc \
 	ov-typeinfo.cc
 
-PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-binop.cc pt-cell.cc \
+PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc pt-cell.cc \
 	pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc \
 	pt-except.cc pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
 	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
 	pt-select.cc pt-stmt.cc pt-unop.cc
 
 DIST_SRC := BaseSLList.cc Cell.cc DLList.cc Map.cc SLList.cc \
 	SLStack.cc Stack.cc c-file-ptr-stream.cc comment-list.cc \
 	cutils.c data.cc \
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -25,19 +25,20 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_input_h)
 #define octave_input_h 1
 
 #include <cstdio>
 
 #include <string>
 
 #include "oct-time.h"
+#include "ov-list.h"
+#include "pager.h"
 
 class octave_value;
-class octave_value_list;
 
 extern int octave_read (char *buf, unsigned max_size);
 extern FILE *get_input_from_file (const std::string& name, int warn = 1);
 extern FILE *get_input_from_stdin (void);
 
 // Global pointer for eval().
 extern std::string current_eval_string;
 
@@ -73,17 +74,17 @@ extern std::string current_input_line;
 
 // TRUE after a call to completion_matches().
 extern bool octave_completion_matches_called;
 
 extern std::string gnu_readline (const std::string& s, bool force_readline = false);
 
 extern void initialize_command_input (void);
 
-extern octave_value do_keyboard (const octave_value_list& args);
+extern octave_value do_keyboard (const octave_value_list& args = octave_value_list ());
 
 extern std::string Vps4;
 
 enum echo_state
 {
   ECHO_OFF = 0,
   ECHO_SCRIPTS = 1,
   ECHO_FUNCTIONS = 2,
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -128,16 +128,18 @@ public:
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
+  symbol_table *sym_table (void) { return sym_tab; }
+
   void accept (tree_walker& tw);
 
 private:
 
   octave_user_function (void);
 
   octave_user_function (const octave_user_function& m);
 
diff --git a/src/pt-all.h b/src/pt-all.h
--- a/src/pt-all.h
+++ b/src/pt-all.h
@@ -21,16 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_tree_all_h)
 #define octave_tree_all_h 1
 
 #include "pt.h"
 #include "pt-arg-list.h"
 #include "pt-assign.h"
+#include "pt-bp.h"
 #include "pt-binop.h"
 #include "pt-check.h"
 #include "pt-cmd.h"
 #include "pt-colon.h"
 #include "pt-const.h"
 #include "pt-decl.h"
 #include "pt-except.h"
 #include "pt-exp.h"
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "pager.h"
 #include "ov.h"
 #include "pt-arg-list.h"
+#include "pt-bp.h"
 #include "pt-assign.h"
 #include "pt-walk.h"
 #include "utils.h"
 
 // TRUE means print the right hand side of an assignment instead of
 // the left.
 static bool Vprint_rhs_assign_val;
 
@@ -57,16 +58,18 @@ tree_simple_assignment::~tree_simple_ass
   delete rhs;
 }
 
 octave_value_list
 tree_simple_assignment::rvalue (int nargout)
 {
   octave_value_list retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (nargout > 1)
     error ("invalid number of output arguments for expression X = RHS");
   else
     retval = rvalue ();
 
   return retval;
 }
 
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "pt-binop.h"
+#include "pt-bp.h"
 #include "pt-walk.h"
 
 // Binary expressions.
  
 octave_value_list
 tree_binary_expression::rvalue (int nargout)
 {
   octave_value_list retval;
@@ -50,16 +51,18 @@ tree_binary_expression::rvalue (int narg
   return retval;
 }
 
 octave_value
 tree_binary_expression::rvalue (void)
 {
   octave_value retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (error_state)
     return retval;
 
   if (op_lhs)
     {
       octave_value a = op_lhs->rvalue ();
 
       if (error_state)
@@ -114,16 +117,18 @@ tree_binary_expression::accept (tree_wal
 
 // Boolean expressions.
  
 octave_value_list
 tree_boolean_expression::rvalue (int nargout)
 {
   octave_value_list retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (nargout > 1)
     error ("binary operator `%s': invalid number of output arguments",
 	   oper () . c_str ());
   else
     retval = rvalue ();
 
   return retval;
 }
diff --git a/src/pt-cell.cc b/src/pt-cell.cc
--- a/src/pt-cell.cc
+++ b/src/pt-cell.cc
@@ -31,28 +31,31 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 #include <strstream>
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "pt-arg-list.h"
+#include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-cell.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "ov.h"
 #include "variables.h"
 
 octave_value
 tree_cell::rvalue (void)
 {
   octave_value retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   int nr = length ();
   int nc = -1;
 
   for (Pix p = first (); p != 0; next (p))
     {
       tree_argument_list *elt = this->operator () (p);
 
       if (nc < 0)
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <string>
 
 class tree_walker;
 
 #include "pt.h"
+#include "pt-bp.h"
 
 // A base class for commands.
 
 class
 tree_command : public tree
 {
 public:
 
@@ -63,17 +64,17 @@ tree_no_op_command : public tree_command
 {
 public:
 
   tree_no_op_command (const std::string& cmd = "no_op", int l = -1, int c = -1)
     : tree_command (l, c), orig_cmd (cmd) { }
 
   ~tree_no_op_command (void) { }
 
-  void eval (void) { }
+  void eval (void) { MAYBE_DO_BREAKPOINT; }
 
   void accept (tree_walker& tw);
 
   std::string original_command (void) { return orig_cmd; }
 
 private:
 
   std::string orig_cmd;
diff --git a/src/pt-colon.cc b/src/pt-colon.cc
--- a/src/pt-colon.cc
+++ b/src/pt-colon.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "ov.h"
+#include "pt-bp.h"
 #include "pt-colon.h"
 #include "pt-walk.h"
 
 // Colon expressions.
 
 tree_colon_expression *
 tree_colon_expression::append (tree_expression *t)
 {
@@ -83,16 +84,18 @@ tree_colon_expression::rvalue (int nargo
   return retval;
 }
 
 octave_value
 tree_colon_expression::rvalue (void)
 {
   octave_value retval;
 
+  MAYBE_DO_BREAKPOINT;
+  
   if (error_state || ! op_base || ! op_limit)
     return retval;
 
   octave_value tmp = op_base->rvalue ();
 
   if (tmp.is_undefined ())
     {
       eval_error ("invalid null value in colon expression");
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <iostream>
 #include <string>
 
 #include "oct-alloc.h"
 
+#include "pt-bp.h"
 #include "pt-exp.h"
 
 class octave_value_list;
 
 class tree_walker;
 
 #include "ov.h"
 
@@ -72,17 +73,20 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false,
 		  bool pr_orig_txt = true);
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void)
-    { return val; }
+    {
+      MAYBE_DO_BREAKPOINT;
+      return val;
+    }
 
   octave_value_list rvalue (int nargout);
 
   void accept (tree_walker& tw);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
+#include "pt-bp.h"
 #include "pt-cmd.h"
 #include "pt-except.h"
 #include "pt-exp.h"
 #include "pt-jump.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
 #include "variables.h"
@@ -73,16 +74,18 @@ do_catch_code (void *ptr)
 
   unwind_protect::run_frame ("do_catch_code");
 }
 
 void
 tree_try_catch_command::eval (void)
 {
   unwind_protect::begin_frame ("tree_try_catch::eval");
+  
+  MAYBE_DO_BREAKPOINT;
 
   if (catch_code)
     {
       unwind_protect_bool (buffer_error_messages);
       buffer_error_messages = true;
     }
 
   unwind_protect::add (do_catch_code, catch_code);
@@ -203,16 +206,18 @@ do_unwind_protect_cleanup_code (void *pt
     unwind_protect::run ();
 }
 
 void
 tree_unwind_protect_command::eval (void)
 {
   unwind_protect::add (do_unwind_protect_cleanup_code, cleanup_code);
 
+  MAYBE_DO_BREAKPOINT;
+
   if (unwind_protect_code)
     unwind_protect_code->eval ();
 
   unwind_protect::run ();
 }
 
 void
 tree_unwind_protect_command::accept (tree_walker& tw)
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "pager.h"
+#include "pt-bp.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Symbols from the symbol table.
@@ -135,16 +136,18 @@ tree_identifier::mark_as_formal_paramete
     sym->mark_as_formal_parameter ();
 }
 
 octave_value_list
 tree_identifier::rvalue (int nargout)
 {
   octave_value_list retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (error_state)
     return retval;
 
   bool script_file_executed = false;
 
   octave_value val = do_lookup (script_file_executed);
 
   if (! script_file_executed)
@@ -194,16 +197,18 @@ tree_identifier::rvalue (void)
     retval = tmp(0);
 
   return retval;
 }
 
 octave_lvalue
 tree_identifier::lvalue (void)
 {
+  MAYBE_DO_BREAKPOINT;
+
   return sym->variable_reference ();
 }
 
 void
 tree_identifier::accept (tree_walker& tw)
 {
   tw.visit_identifier (*this);
 }
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pager.h"
+#include "pt-bp.h"
 #include "pt-indir.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
 // Indirect references to values (structure elements).
 
 tree_indirect_ref::~tree_indirect_ref (void)
@@ -55,16 +56,18 @@ tree_indirect_ref::name (void) const
   return (xname == "<unknown>") ? xname : xname + "." + nm;
 }
 
 octave_value_list
 tree_indirect_ref::rvalue (int nargout)
 {
   octave_value_list retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (nargout > 1)
     error ("invalid number of output arguments for structure reference");
   else
     {
       octave_value_list tmp = expr->rvalue (nargout);
 
       if (tmp.empty ())
 	eval_error ();
diff --git a/src/pt-jump.cc b/src/pt-jump.cc
--- a/src/pt-jump.cc
+++ b/src/pt-jump.cc
@@ -24,27 +24,34 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
+#include "oct-obj.h"
+#include "pt-bp.h"
 #include "pt-jump.h"
 #include "pt-walk.h"
 
+class octave_value_list;
+
 // Break.
 
 // Nonzero means we're breaking out of a loop or function body.
 int tree_break_command::breaking = 0;
 
 void
 tree_break_command::eval (void)
 {
+  // Even if we have an error we should still enter debug mode.
+  MAYBE_DO_BREAKPOINT;
+
   if (! error_state)
     breaking = 1;
 }
 
 void
 tree_break_command::accept (tree_walker& tw)
 {
   tw.visit_break_command (*this);
@@ -53,16 +60,18 @@ tree_break_command::accept (tree_walker&
 // Continue.
 
 // Nonzero means we're jumping to the end of a loop.
 int tree_continue_command::continuing = 0;
 
 void
 tree_continue_command::eval (void)
 {
+  MAYBE_DO_BREAKPOINT;
+
   if (! error_state)
     continuing = 1;
 }
 
 void
 tree_continue_command::accept (tree_walker& tw)
 {
   tw.visit_continue_command (*this);
@@ -72,16 +81,18 @@ tree_continue_command::accept (tree_walk
 
 // Nonzero means we're returning from a function.  Global because it
 // is also needed in tree-expr.cc.
 int tree_return_command::returning = 0;
 
 void
 tree_return_command::eval (void)
 {
+  MAYBE_DO_BREAKPOINT;
+
   if (! error_state)
     returning = 1;
 }
 
 void
 tree_return_command::accept (tree_walker& tw)
 {
   tw.visit_return_command (*this);
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pt-arg-list.h"
+#include "pt-bp.h"
 #include "pt-cmd.h"
 #include "pt-exp.h"
 #include "pt-jump.h"
 #include "pt-loop.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 
 // Decide if it's time to quit a for or while loop.
@@ -125,16 +126,18 @@ tree_do_until_command::eval (void)
   if (error_state)
     return;
 
   if (! expr)
     panic_impossible ();
 
   for (;;)
     {
+      MAYBE_DO_BREAKPOINT;
+
       if (list)
 	{
 	  list->eval ();
 
 	  if (error_state)
 	    {
 	      eval_error ();
 	      return;
@@ -195,16 +198,18 @@ tree_simple_for_command::do_for_loop_onc
   quit = quit_loop_now ();
 }
 
 #define DO_LOOP(arg) \
   do \
     { \
       for (int i = 0; i < steps; i++) \
 	{ \
+	  MAYBE_DO_BREAKPOINT; \
+ \
 	  octave_value val (arg); \
  \
 	  bool quit = false; \
  \
 	  do_for_loop_once (ult, val, quit); \
  \
 	  if (quit) \
 	    break; \
@@ -239,31 +244,35 @@ tree_simple_for_command::eval (void)
       Range rng = rhs.range_value ();
 
       int steps = rng.nelem ();
       double b = rng.base ();
       double increment = rng.inc ();
 
       for (int i = 0; i < steps; i++)
 	{
+	  MAYBE_DO_BREAKPOINT;
+
 	  double tmp_val = b + i * increment;
 
 	  octave_value val (tmp_val);
 
 	  bool quit = false;
 
 	  do_for_loop_once (ult, val, quit);
 
 	  if (quit)
 	    break;
 	}
     }
   else if (rhs.is_scalar_type ())
     {
       bool quit = false;
+      
+      MAYBE_DO_BREAKPOINT;
 
       do_for_loop_once (ult, rhs, quit);
     }
   else if (rhs.is_string ())
     {
       charMatrix chm_tmp = rhs.char_matrix_value ();
       int nr = chm_tmp.rows ();
       int steps = chm_tmp.columns ();
@@ -272,16 +281,18 @@ tree_simple_for_command::eval (void)
 	return;
 
       if (nr == 1)
 	DO_LOOP (chm_tmp (0, i));
       else
 	{
 	  for (int i = 0; i < steps; i++)
 	    {
+	      MAYBE_DO_BREAKPOINT;
+
 	      octave_value val (chm_tmp.extract (0, i, nr-1, i), true);
 
 	      bool quit = false;
 
 	      do_for_loop_once (ult, val, quit);
 
 	      if (quit)
 		break;
@@ -328,16 +339,18 @@ tree_simple_for_command::eval (void)
 	}
     }
   else if (rhs.is_map ())
     {
       Octave_map tmp_val (rhs.map_value ());
 
       for (Pix p = tmp_val.first (); p != 0; tmp_val.next (p))
 	{
+	  MAYBE_DO_BREAKPOINT;
+
 	  octave_value val = tmp_val.contents (p);
 
 	  bool quit = false;
 
 	  do_for_loop_once (ult, val, quit);
 
 	  if (quit)
 	    break;
@@ -430,16 +443,18 @@ tree_complex_for_command::eval (void)
 
       Octave_map tmp_val (rhs.map_value ());
 
       for (p = tmp_val.first (); p != 0; tmp_val.next (p))
 	{
 	  octave_value key = tmp_val.key (p);
 	  octave_value val = tmp_val.contents (p);
 
+	  MAYBE_DO_BREAKPOINT;
+
 	  bool quit = false;
 
 	  do_for_loop_once (key_ref, val_ref, key, val, quit);
 
 	  if (quit)
 	    break;
 	}
     }
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 #include <strstream>
 
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "pt-arg-list.h"
+#include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-mat.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "ov.h"
 #include "variables.h"
 
 // Are empty elements in a matrix list ok?  For example, is the empty
@@ -431,16 +432,18 @@ tree_matrix::all_elements_are_constant (
 // Less ugly than before, anyway.
 // Looking better all the time.
 
 octave_value_list
 tree_matrix::rvalue (int nargout)
 {
   octave_value_list retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (nargout > 1)
     error ("invalid number of output arguments for matrix list");
   else
     retval = rvalue ();
 
   return retval;
 }
 
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <SLList.h>
 
 #include "defun.h"
 #include "error.h"
 #include "ov.h"
 #include "oct-lvalue.h"
 #include "input.h"
 #include "pager.h"
+#include "pt-bp.h"
 #include "pt-cmd.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-jump.h"
 #include "pt-pr-code.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
@@ -179,16 +180,41 @@ tree_statement_list::eval (bool silent, 
 	error ("invalid statement found in statement list!");
 
 
     }
 
   return retval;
 }
 
+int
+tree_statement_list::set_breakpoint (int line)
+{
+  tree_breakpoint tbp (line, tree_breakpoint::set);
+  accept (tbp);
+  
+  return tbp.get_line ();
+}
+
+void
+tree_statement_list::delete_breakpoint (int line)
+{
+  tree_breakpoint tbp (line, tree_breakpoint::clear); 
+  accept(tbp);
+}
+
+octave_value_list
+tree_statement_list::list_breakpoints (void)
+{
+  tree_breakpoint tbp (0, tree_breakpoint::list);
+  accept (tbp);
+
+  return tbp.get_list ();
+}
+
 void
 tree_statement_list::accept (tree_walker& tw)
 {
   tw.visit_statement_list (*this);
 }
 
 static int
 silent_functions (void)
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -95,17 +95,16 @@ private:
 
   // Comment associated with this statement.
   octave_comment_list *comm;
 
   // Print result of eval for this command?
   bool print_flag;
 
   // No copying!
-
   tree_statement (const tree_statement&);
 
   tree_statement& operator = (const tree_statement&);
 };
 
 // A list of statements to evaluate.
 
 class
@@ -127,16 +126,22 @@ public:
 	  delete t;
 	}
     }
 
   void mark_as_function_body (void) { function_body = true; }
 
   octave_value_list eval (bool silent = false, int nargout = 0);
 
+  int set_breakpoint (int line);
+
+  void delete_breakpoint (int line);
+
+  octave_value_list list_breakpoints (void);
+
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
   bool function_body;
 
   // No copying!
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ov.h"
+#include "pt-bp.h"
 #include "pt-unop.h"
 #include "pt-walk.h"
 
 // Unary expressions.
 
 std::string
 tree_unary_expression::oper (void) const
 {
@@ -59,16 +60,18 @@ tree_prefix_expression::rvalue (int narg
   return retval;
 }
 
 octave_value
 tree_prefix_expression::rvalue (void)
 {
   octave_value retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
 	{
 	  octave_lvalue ref = op->lvalue ();
@@ -138,16 +141,18 @@ tree_postfix_expression::rvalue (int nar
   return retval;
 }
 
 octave_value
 tree_postfix_expression::rvalue (void)
 {
   octave_value retval;
 
+  MAYBE_DO_BREAKPOINT;
+
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
 	{
 	  octave_lvalue ref = op->lvalue ();
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -35,17 +35,17 @@ class tree_walker;
 
 // Base class for the parse tree.
 
 class
 tree
 {
 public:
 
-  tree (int l = -1, int c = -1)
+  tree (int l = -1, int c = -1) : break_point(false)
     {
       line_num = l;
       column_num = c;
     }
 
   virtual ~tree (void) { }
 
   virtual int line (void) const
@@ -53,23 +53,35 @@ public:
 
   virtual int column (void) const
     { return column_num; }
 
   virtual void accept (tree_walker& tw) = 0;
 
   std::string str_print_code (void);
 
+  virtual void set_breakpoint (void)
+    { break_point = true; }
+  
+  virtual void delete_breakpoint (void)
+    { break_point = false; }
+
+  virtual bool is_breakpoint (void) const 
+    { return break_point; }
+
 private:
 
   // The input line and column where we found the text that was
   // eventually converted to this tree node.
   int line_num;
   int column_num;
 
+  // Stop before executing this tree node
+  bool break_point;
+
   // No copying!
 
   tree (const tree&);
 
   tree& operator = (const tree&);
 };
 
 #endif
