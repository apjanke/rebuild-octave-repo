# HG changeset patch
# User jwe
# Date 1036171658 0
#      Fri Nov 01 17:27:38 2002 +0000
# Node ID 62afb31c1f852d04888d1ace698ac9b8d6282d0e
# Parent  0739d46e778cab56a7fcb5469851115b749a949f
[project @ 2002-11-01 17:27:38 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* cmd-edit.h (command_editor::filename_completion_desired): New
+	static function.
+	(command_editor::do_filename_completion_desired): New virtual function.
+	* oct-rl-edit.c (octave_rl_filename_completion_desired): New function.
+	* oct-rl-edit.h: Provide decl.
+
 	* Array2.cc (Array2<T>::get_size): #define MALLOC_OVERHEAD to
 	avoid OS X linker bug.
 	* ArrayN.cc (ArrayN<T>::get_size): Likewise.
 
 2002-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ODESFunc.h (ODESFunc::ODES_fsub, ODESFunc::ODES_bsub,
 	ODESFunc::ODES_jsub): Reorder args for consistency with other
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -116,16 +116,18 @@ public:
   void do_restore_startup_hook (void);
 
   void do_set_event_hook (event_hook_fcn f);
 
   void do_restore_event_hook (void);
 
   void do_read_init_file (const std::string& file);
 
+  bool do_filename_completion_desired (bool);
+
   static int operate_and_get_next (int, int);
 
   static int history_search_backward (int, int);
 
   static int history_search_forward (int, int);
 
 private:
 
@@ -365,16 +367,22 @@ gnu_readline::do_restore_event_hook (voi
 }
 
 void
 gnu_readline::do_read_init_file (const std::string& file)
 {
   ::octave_rl_read_init_file (file.c_str ());
 }
 
+bool
+gnu_readline::do_filename_completion_desired (bool arg)
+{
+  return ::octave_rl_filename_completion_desired (arg);
+}
+
 int
 gnu_readline::operate_and_get_next (int /* count */, int /* c */)
 {
   // Accept the current line.
 
   command_editor::newline ();
 
   // Find the current line, and find the next line to use.
@@ -759,16 +767,23 @@ command_editor::restore_event_hook (void
 
 void
 command_editor::read_init_file (const std::string& file)
 {
   if (instance_ok ())
     instance->do_read_init_file (file);
 }
 
+bool
+command_editor::filename_completion_desired (bool arg)
+{
+  return (instance_ok ())
+    ? instance->do_filename_completion_desired (arg) : false;
+}
+
 // Return a string which will be printed as a prompt.  The string may
 // contain special characters which are decoded as follows: 
 //   
 //	\t	the time
 //	\d	the date
 //	\n	CRLF
 //	\s	the name of the shell (program)
 //	\w	the current working directory
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -96,16 +96,18 @@ public:
   static void restore_startup_hook (void);
 
   static void set_event_hook (event_hook_fcn f);
 
   static void restore_event_hook (void);
 
   static void read_init_file (const std::string& file = std::string ());
 
+  static bool filename_completion_desired (bool);
+
   static int current_command_number (void);
 
   static void reset_current_command_number (int n);
 
   static void increment_current_command_number (void);
 
 private:
 
@@ -186,16 +188,18 @@ protected:
   virtual void do_restore_startup_hook (void) { }
 
   virtual void do_set_event_hook (event_hook_fcn) { }
 
   virtual void do_restore_event_hook (void) { }
 
   virtual void do_read_init_file (const std::string&) { }
 
+  virtual bool do_filename_completion_desired (bool) { return false; }
+
   int read_octal (const std::string& s);
 
   void error (int);
 
   void error (const std::string&);
 
   // The current command number.
   int command_number;
diff --git a/liboctave/oct-rl-edit.c b/liboctave/oct-rl-edit.c
--- a/liboctave/oct-rl-edit.c
+++ b/liboctave/oct-rl-edit.c
@@ -181,16 +181,24 @@ void
 octave_rl_read_init_file (const char *f)
 {
   if (f && *f)
     rl_read_init_file (f);
   else
     rl_re_read_init_file (0, 0);
 }
 
+int
+octave_rl_filename_completion_desired (int arg)
+{
+  int retval = rl_filename_completion_desired;
+  rl_filename_completion_desired = arg;
+  return retval;
+}
+
 void
 octave_rl_set_basic_word_break_characters (const char *s)
 {
   OCTAVE_RL_SAVE_STRING (ss, s);
 
   rl_basic_word_break_characters = ss;
 }
 
diff --git a/liboctave/oct-rl-edit.h b/liboctave/oct-rl-edit.h
--- a/liboctave/oct-rl-edit.h
+++ b/liboctave/oct-rl-edit.h
@@ -67,16 +67,18 @@ extern void octave_rl_set_input_stream (
 extern FILE *octave_rl_get_input_stream (void);
 
 extern void octave_rl_set_output_stream (FILE *);
 
 extern FILE *octave_rl_get_output_stream (void);
 
 extern void octave_rl_read_init_file (const char *);
 
+extern int octave_rl_filename_completion_desired (int);
+
 extern void octave_rl_set_basic_word_break_characters (const char *);
 
 extern void octave_rl_set_completer_word_break_characters (const char *);
 
 extern void octave_rl_set_basic_quote_characters (const char *);
 
 extern void octave_rl_set_completion_append_character (char);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* variables.cc (generate_struct_completions): Temporarily reset
+	discard_error_messages and error_state
+	(looks_like_struct): Temporarily reset Vwarning option,
+	error_state, and discard_error_messages.
+
+	* pt-idx.cc (tree_index_expression::eval_error): Now const.
+	(tree_index_expression::get_struct_index): Require valid identifier.
+	(tree_index_expression::make_arg_struct,
+	tree_index_expression::rvalue, tree_index_expression::lvalue):
+	Handle possible error from get_struct_index.
+
+	* utils.cc (valid_identifier): Move here from load-save.cc.
+	* utils.h: Provide decl.
+
+	* input.cc (generate_possible_completions): Call
+	command_editor::filename_completion_desired here.
+	(generate_possible_completions): Don't generate struct completions
+	if text contains directory separator or "..".
+
 2002-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/odessa.cc (odessa_user_f, odessa_user_j,
 	odessa_user_b): Reorder args for consistency with other solvers.
 	(Fodessa): Use extract_function to set args.
 	(odessa_user_j): Rename from odessa_user_mf.
 
 	* DLD-FUNCTIONS/fsolve.cc (fsolve_user_function, fsolve_user_jacobian):
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -376,19 +376,23 @@ get_input_from_stdin (void)
 // XXX FIXME XXX -- make this generate file names when appropriate.
 
 static string_vector
 generate_possible_completions (const std::string& text, std::string& prefix,
 			       std::string& hint)
 {
   string_vector names;
 
+  command_editor::filename_completion_desired (true);
+
   prefix = "";
 
-  if (! text.empty () && text != "." && text.rfind ('.') != NPOS)
+  if (! text.empty () && text != "." && text != ".."
+      && text.find_first_of (file_ops::dir_sep_chars) == NPOS
+      && text.rfind ('.') != NPOS)
     names = generate_struct_completions (text, prefix, hint);
   else
     names = make_name_list ();
 
   // Sort and remove duplicates.
 
   names.qsort (true);
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -135,37 +135,16 @@ enum mat5_data_type
     miDOUBLE,			// IEEE 754 double precision float
     miRESERVE2,
     miRESERVE3,
     miINT64,			// 64 bit signed
     miUINT64,			// 64 bit unsigned
     miMATRIX			// MATLAB array
   };
 
-// Return TRUE if S is a valid identifier.
-
-static bool
-valid_identifier (const char *s)
-{
-  if (! s || ! (isalnum (*s) || *s == '_'))
-     return false;
-
-  while (*++s != '\0')
-    if (! (isalnum (*s) || *s == '_'))
-      return false;
-
-  return true;
-}
-
-static bool
-valid_identifier (const std::string& s)
-{
-  return valid_identifier (s.c_str ());
-}
-
 #ifdef HAVE_HDF5
 // this is only used for HDF5 import
 // try to convert s into a valid identifier, replacing invalid chars with "_":
 static void
 make_valid_identifier (char *s)
 {
   if (s)
     {
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -179,17 +179,22 @@ tree_index_expression::get_struct_index 
     {
       tree_expression *df = dyn_field (p_dyn_field);
 
       if (df)
 	{
 	  octave_value t = df->rvalue ();
 
 	  if (! error_state)
-	    fn = t.string_value ();
+	    {
+	      fn = t.string_value ();
+
+	      if (! valid_identifier (fn))
+		::error ("invalid structure field name");
+	    }
 	}
       else
 	panic_impossible ();
     }
 
   return fn;
 }
 
@@ -215,17 +220,22 @@ tree_index_expression::make_arg_struct (
 	  subs_list(i) = make_subs_cell (args(p_args), arg_nm(p_arg_nm));
 	  break;
 
 	case '{':
 	  subs_list(i) = make_subs_cell (args(p_args), arg_nm(p_arg_nm));
 	  break;
 
 	case '.':
-	  subs_list(i) = get_struct_index (p_arg_nm, p_dyn_field);
+	  {
+	    subs_list(i) = get_struct_index (p_arg_nm, p_dyn_field);
+
+	    if (error_state)
+	      eval_error ();
+	  }
 	  break;
 
 	default:
 	  panic_impossible ();
 	}
 
       if (error_state)
 	return m;
@@ -269,17 +279,22 @@ tree_index_expression::rvalue (int nargo
 	      idx.append (make_value_list (args(p_args), arg_nm(p_arg_nm)));
 	      break;
 
 	    case '{':
 	      idx.append (make_value_list (args(p_args), arg_nm(p_arg_nm)));
 	      break;
 
 	    case '.':
-	      idx.append (get_struct_index (p_arg_nm, p_dyn_field));
+	      {
+		idx.append (get_struct_index (p_arg_nm, p_dyn_field));
+
+		if (error_state)
+		  eval_error ();
+	      }
 	      break;
 
 	    default:
 	      panic_impossible ();
 	    }
 
 	  if (error_state)
 	    break;
@@ -330,17 +345,22 @@ tree_index_expression::lvalue (void)
 	  idx.append (make_value_list (args(p_args), arg_nm(p_arg_nm)));
 	  break;
 
 	case '{':
 	  idx.append (make_value_list (args(p_args), arg_nm(p_arg_nm)));
 	  break;
 
 	case '.':
-	  idx.append (get_struct_index (p_arg_nm, p_dyn_field));
+	  {
+	    idx.append (get_struct_index (p_arg_nm, p_dyn_field));
+
+	    if (error_state)
+	      eval_error ();
+	  }
 	  break;
 
 	default:
 	  panic_impossible ();
 	}
 
       if (error_state)
 	break;
@@ -357,17 +377,17 @@ tree_index_expression::lvalue (void)
       if (! error_state)
 	retval.set_index (type, idx);
     }
 
   return retval;
 }
 
 void
-tree_index_expression::eval_error (void)
+tree_index_expression::eval_error (void) const
 {
   int l = line ();
   int c = column ();
 
   const char *type_str;
 
   if (type[0] == '.')
     type_str = "structure reference operator";
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -82,17 +82,17 @@ public:
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
 
-  void eval_error (void);
+  void eval_error (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The LHS of this index expression.
   tree_expression *expr;
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -74,16 +74,37 @@ Software Foundation, 59 Temple Place - S
 // an error?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
 static int Vtreat_neg_dim_as_zero;
 
 // Top level context (?)
 extern jmp_buf toplevel;
 
+// Return TRUE if S is a valid identifier.
+
+bool
+valid_identifier (const char *s)
+{
+  if (! s || ! (isalnum (*s) || *s == '_'))
+     return false;
+
+  while (*++s != '\0')
+    if (! (isalnum (*s) || *s == '_'))
+      return false;
+
+  return true;
+}
+
+bool
+valid_identifier (const std::string& s)
+{
+  return valid_identifier (s.c_str ());
+}
+
 // Return to the main command loop in octave.cc.
 
 void
 jump_to_top_level (void)
 {
   unwind_protect::run_all ();
 
   longjmp (toplevel, 1);
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -29,37 +29,40 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include "lo-utils.h"
 
 class octave_value;
 class octave_value_list;
 class string_vector;
 
-extern std::string search_path_for_file (const std::string&, const std::string&);
-extern std::string file_in_path (const std::string&, const std::string&);
-extern std::string fcn_file_in_path (const std::string&);
-extern std::string oct_file_in_path (const std::string&);
+extern bool valid_identifier (const char *s);
+extern bool valid_identifier (const std::string& s);
 
 extern void jump_to_top_level (void) GCC_ATTR_NORETURN;
 
 extern int almost_match (const std::string& std, const std::string& s,
 			 int min_match_len = 1, int case_sens = 1);
 
 extern int
 keyword_almost_match (const char * const *std, int *min_len,
 		      const std::string& s, int min_toks_to_match,
 		      int max_toks);
 
 extern int empty_arg (const char *name, int nr, int nc);
 
-extern const char *undo_string_escape (char c);
+extern std::string search_path_for_file (const std::string&, const std::string&);
+extern std::string file_in_path (const std::string&, const std::string&);
+extern std::string fcn_file_in_path (const std::string&);
+extern std::string oct_file_in_path (const std::string&);
 
 extern std::string do_string_escapes (const std::string& s);
 
+extern const char *undo_string_escape (char c);
+
 extern std::string undo_string_escapes (const std::string& s);
 
 extern int check_preference (const std::string& var);
 
 extern void
 get_dimensions (const octave_value& a, const octave_value& b,
 		const char *warn_for, int& nr, int& nc);
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -286,23 +286,28 @@ generate_struct_completions (const std::
       else
 	hint = text.substr (pos+1);
 
       prefix = text.substr (0, pos);
     }
 
   int parse_status;
 
+  unwind_protect::begin_frame ("generate_struct_completions");
+
   unwind_protect_str (Vwarning_option);
+  unwind_protect_bool (discard_error_messages);
+  unwind_protect_int (error_state);
 
   Vwarning_option = "off";
+  discard_error_messages = true;
 
   octave_value tmp = eval_string (prefix, true, parse_status);
 
-  unwind_protect::run ();
+  unwind_protect::run_frame ("generate_struct_completions");
 
   if (tmp.is_defined () && tmp.is_map ())
     names = tmp.map_keys ();
 
   return names;
 }
 
 bool
@@ -311,18 +316,29 @@ looks_like_struct (const std::string& te
   bool retval = false;
 
   symbol_record *sr = curr_sym_tab->lookup (text);
 
   if (sr && ! sr->is_function ())
     {
       int parse_status;
 
+      unwind_protect::begin_frame ("looks_like_struct");
+
+      unwind_protect_str (Vwarning_option);
+      unwind_protect_bool (discard_error_messages);
+      unwind_protect_int (error_state);
+
+      Vwarning_option = "off";
+      discard_error_messages = true;
+
       octave_value tmp = eval_string (text, true, parse_status);
 
+      unwind_protect::run_frame ("looks_like_struct");
+
       retval = (tmp.is_defined () && tmp.is_map ());
     }
 
   return retval;
 }
 
 DEFUN (isglobal, args, ,
   "-*- texinfo -*-\n\
