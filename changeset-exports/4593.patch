# HG changeset patch
# User jwe
# Date 1068571542 0
#      Tue Nov 11 17:25:42 2003 +0000
# Node ID 77566be8b9e95c0c55045939bb9bcf0c6538ba50
# Parent  a97b498e1b321d37613e3e48b54a7d275693ed1b
[project @ 2003-11-11 17:25:42 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -505,13 +505,32 @@ short_freeze (Array<idx_vector>& ra_idx,
                 }
 	    }
 	}
     }
 
   return retval;
 }
 
+Array<int>
+calc_permutated_idx (const Array<int>& old_idx, 
+		     const Array<int>& perm_vec, bool inv)
+{
+  int n_el = old_idx.length ();
+
+  Array<int> retval (n_el);
+
+  for (int i = 0; i < n_el; i++)
+    {
+      if (inv)
+	retval(perm_vec(i)-1) = old_idx(i);
+      else
+	retval(i) = old_idx(perm_vec(i)-1);
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -82,15 +82,17 @@ extern Array<int> get_elt_idx (const Arr
 extern int number_of_elements (const dim_vector ra_idx);
 
 extern Array<int> get_ra_idx (int idx, const dim_vector& dims);
 
 extern dim_vector short_freeze (Array<idx_vector>& ra_idx,
 				const dim_vector& dimensions,
 				int resize_ok);
 
+extern Array<int> calc_permutated_idx (const Array<int>& old_idx, 
+				       const Array<int>& perm_vec, bool inv);
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -351,16 +351,81 @@ Array<T>::reshape (const dim_vector& new
       else
 	(*current_liboctave_error_handler) ("reshape: size mismatch");
     }
 
   return retval;
 }
 
 template <class T>
+Array<T>
+Array<T>::permute (const Array<int>& perm_vec, bool inv) const
+{
+  Array<T> retval;
+
+  dim_vector dv = dims ();
+  dim_vector dv_new;
+
+  int nd = dv.length ();
+
+  dv_new.resize (nd);
+
+  // Need this array to check for identical elements in permutation array.
+  Array<bool> checked (nd, false);
+
+  // Find dimension vector of permuted array.
+  for (int i = 0; i < nd; i++)
+    {
+      int perm_el = perm_vec.elem (i);
+
+      if (perm_el > dv.length () || perm_el < 1)
+	{
+	  (*current_liboctave_error_handler)
+	    ("permutation vector contains an invalid element");
+
+	  return retval;
+	}
+
+      if (checked.elem(perm_el - 1))
+	{
+	  (*current_liboctave_error_handler)
+	    ("PERM cannot contain identical elements");
+
+	  return retval;
+	}
+      else
+	checked.elem(perm_el - 1) = true;
+
+      dv_new (i) = dv (perm_el - 1);
+    }
+
+  retval.resize (dv_new);
+
+  // Index array to the original array.
+  Array<int> old_idx (nd, 0);
+
+  // Number of elements in Array (should be the same for
+  // both the permuted array and original array).
+  int n = retval.length ();
+
+  // Permute array.
+  for (int i = 0; i < n; i++)
+    {
+      // Get the idx of permuted array.
+      Array<int> new_idx = calc_permutated_idx (old_idx, perm_vec, inv);
+
+      retval.elem (new_idx) = elem (old_idx);
+
+      increment_index (old_idx, dv);
+    }
+
+  return retval;
+}
+
+template <class T>
 void
 Array<T>::resize_no_fill (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -402,16 +402,20 @@ public:
   T operator () (int n) const { return elem (n); }
   T operator () (int i, int j) const { return elem (i, j); }
   T operator () (int i, int j, int k) const { return elem (i, j, k); }
   T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
 #endif
 
   Array<T> reshape (const dim_vector& new_dims) const;
 
+  Array<T> permute (const Array<int>& vec, bool inv = false) const;
+  Array<T> ipermute (const Array<int>& vec) const
+    { return permute (vec, true); }
+
   void resize_no_fill (int n);
   void resize_and_fill (int n, const T& val);
 
   // !!! WARNING !!! -- the following resize_no_fill and
   // resize_and_fill functions are public because template friends
   // don't work properly with versions of gcc earlier than 3.3.  You
   // should use these functions only in classes that are derived
   // from Array<T>.
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2215,42 +2215,42 @@ ComplexMatrix::expm (void) const
   // inverse scaling (diagonal transformation)
   for (int i = 0; i < nc; i++)
     for (int j = 0; j < nc; j++)
        retval(i,j) *= dscale(i) / dscale(j);
 
   OCTAVE_QUIT;
 
   // construct balancing permutation vector
-  Array<int> ipermute (nc);
+  Array<int> iperm (nc);
   for (int i = 0; i < nc; i++)
-    ipermute(i) = i;  // initialize to identity permutation
+    iperm(i) = i;  // initialize to identity permutation
 
   // leading permutations in forward order
   for (int i = 0; i < (ilo-1); i++)
     {
       int swapidx = static_cast<int> (dpermute(i)) - 1;
-      int tmp = ipermute(i);
-      ipermute(i) = ipermute(swapidx);
-      ipermute(swapidx) = tmp;
+      int tmp = iperm(i);
+      iperm(i) = iperm(swapidx);
+      iperm(swapidx) = tmp;
     }
 
   // trailing permutations must be done in reverse order
   for (int i = nc - 1; i >= ihi; i--)
     {
       int swapidx = static_cast<int> (dpermute(i)) - 1;
-      int tmp = ipermute(i);
-      ipermute(i) = ipermute(swapidx);
-      ipermute(swapidx) = tmp;
+      int tmp = iperm(i);
+      iperm(i) = iperm(swapidx);
+      iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
   Array<int> invpvec (nc);
   for (int i = 0; i < nc; i++)
-    invpvec(ipermute(i)) = i;     // Thanks to R. A. Lippert for this method
+    invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
 
   ComplexMatrix tmpMat = retval;
   for (int i = 0; i < nc; i++)
     for (int j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.h (Array<T>::ipermute): New function.
+
+2003-11-11  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* Array.cc (Array<T>::permute): New function.
+	* Array.h: Provide decl.
+
+	* Array-util.cc (calc_permutated_idx): New function.
+	* Array-util.h: Provide decl.
+
 2003-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::index2): Return value has orientation of
 	indexed value if indexing a vector with a bool matrix.
 
 	* ArrayN.h (ArrayN<T>::get_size): Delete.
 
 	* Array.cc, ArrayN.cc, dNDArray.cc, CNDArray.cc, boolNDArray.cc,
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1858,42 +1858,42 @@ Matrix::expm (void) const
   // apply inverse scaling to computed exponential
   for (int i = 0; i < nc; i++)
     for (int j = 0; j < nc; j++)
        retval(i,j) *= dscale(i) / dscale(j);
 
   OCTAVE_QUIT;
 
   // construct balancing permutation vector
-  Array<int> ipermute (nc);
+  Array<int> iperm (nc);
   for (int i = 0; i < nc; i++)
-    ipermute(i) = i;  // identity permutation
+    iperm(i) = i;  // identity permutation
 
   // leading permutations in forward order
   for (int i = 0; i < (ilo-1); i++)
     {
       int swapidx = static_cast<int> (dpermute(i)) - 1;
-      int tmp = ipermute(i);
-      ipermute(i) = ipermute (swapidx);
-      ipermute(swapidx) = tmp;
+      int tmp = iperm(i);
+      iperm(i) = iperm (swapidx);
+      iperm(swapidx) = tmp;
     }
 
   // trailing permutations must be done in reverse order
   for (int i = nc - 1; i >= ihi; i--)
     {
       int swapidx = static_cast<int> (dpermute(i)) - 1;
-      int tmp = ipermute(i);
-      ipermute(i) = ipermute(swapidx);
-      ipermute(swapidx) = tmp;
+      int tmp = iperm(i);
+      iperm(i) = iperm(swapidx);
+      iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
   Array<int> invpvec (nc);
   for (int i = 0; i < nc; i++)
-    invpvec(ipermute(i)) = i;     // Thanks to R. A. Lippert for this method
+    invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
  
   Matrix tmpMat = retval;
   for (int i = 0; i < nc; i++)
     for (int j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (do_permute): New function.
+	(Fpermute, Fipermute): Use it.
+
+	* ov-base.cc (octave_base_value::permute): New function.
+	* ov-base.h: Provide decl.
+
+	* ov.h (octave_value::ipermute): New function.
+
+2003-11-11  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* data.cc (Fpermute, Fipermute): New functions.
+	* ov.h (octave_value::permute): New function.
+	* ov-base-mat.h (octave_base_matrix::permute): New function.
+
 2003-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-obj.h (octave_value_list): Internal representation is now
 	std::vector instead of Array.
 
 	* ov-list.h, ov-list.cc: Internal representation is now Cell, not
 	octave_value_list.
 	(Flist): Print one-time warning.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -660,16 +660,65 @@ DEFUN (prod, args, ,
 @deftypefn {Built-in Function} {} prod (@var{x}, @var{dim})\n\
 Product of elements along dimension @var{dim}.  If @var{dim} is\n\
 omitted, it defaults to 1 (column-wise products).\n\
 @end deftypefn")
 {
   DATA_REDUCTION (prod);
 }
 
+static octave_value
+do_permute (const octave_value_list& args, bool inv, const std::string& fname)
+{
+  octave_value retval;
+
+  if (args.length () == 2 && args(1).length () == args(0).dims ().length ())
+    {
+      Array<int> vec = args(1).int_vector_value ();
+
+      octave_value ret = args(0).permute (vec, inv);
+
+      if (! error_state)
+	retval = ret;
+    }
+  else
+    print_usage (fname);
+
+  return retval;
+}
+
+DEFUN (permute, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} permute (@var{a}, @var{perm})\n\
+Return the generalized transpose for an N-d array object @var{a}.\n\
+The permutation vector @var{perm} must contain the elements\n\
+@code{1:ndims(a)} (in any order, but each element must appear just once).\n\
+\n\
+@end deftypefn\n\
+@seealso{ipermute}")
+{
+  return do_permute (args, false, "permute");
+}
+
+DEFUN (ipermute, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} ipermute (@var{a}, @var{iperm})\n\
+The inverse of the @code{permute} function.  The expression\n\
+\n\
+@example\n\
+ipermute (permute (a, perm), perm)\n\
+@end example\n\
+returns the original array @var{a}.\n\
+\n\
+@end deftypefn\n\
+@seealso{permute}")
+{
+  return do_permute (args, true, "ipermute");
+}
+
 DEFUN (length, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} length (@var{a})\n\
 Return the `length' of the object @var{a}.  For matrix objects, the\n\
 length is the number of rows or columns, whichever is greater (this\n\
 odd definition is used for compatibility with Matlab).\n\
 @end deftypefn")
 {
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -90,16 +90,19 @@ public:
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return MT (matrix.reshape (new_dims)); }
 
+  octave_value permute (const Array<int>& vec, bool inv = false) const
+    { return MT (matrix.permute (vec, inv)); }
+
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -176,16 +176,23 @@ octave_base_value::subsasgn (const std::
 octave_value
 octave_base_value::reshape (const dim_vector&) const
 {
   gripe_wrong_type_arg ("octave_base_value::reshape ()", type_name ());
   return octave_value ();
 }
 
 octave_value
+octave_base_value::permute (const Array<int>&, bool) const
+{
+  gripe_wrong_type_arg ("octave_base_value::permute ()", type_name ());
+  return octave_value ();
+}
+
+octave_value
 octave_base_value::convert_to_str_internal (bool, bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::convert_to_str_internal ()",
 			type_name ());
   return octave_value ();
 }
 
 void
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -93,16 +93,18 @@ public:
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   dim_vector dims (void) const { return dim_vector (-1, -1); }
 
   octave_value reshape (const dim_vector&) const;
 
+  octave_value permute (const Array<int>& vec, bool = false) const;
+
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -327,16 +327,22 @@ public:
 
   int ndims (void) const;
 
   int numel (void) const;
 
   virtual octave_value reshape (const dim_vector& dv) const
     { return rep->reshape (dv); }
 
+  virtual octave_value permute (const Array<int>& vec, bool inv = false) const
+    { return rep->permute (vec, inv); }
+
+  octave_value ipermute (const Array<int>& vec) const
+    { return rep->permute (vec, true); }
+
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
