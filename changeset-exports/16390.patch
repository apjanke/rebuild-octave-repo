# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1364551869 -3600
#      Fri Mar 29 11:11:09 2013 +0100
# Node ID 1834b91292ab25cf08ee1a2b512a9c83f2d8affa
# Parent  f5204f486a298933f7d59a196239e7cdd24aa80c
doc: removed unneeded Matlab references in java.texi

diff --git a/doc/interpreter/java.txi b/doc/interpreter/java.txi
--- a/doc/interpreter/java.txi
+++ b/doc/interpreter/java.txi
@@ -294,31 +294,22 @@ javaaddpath('~/octave/myclasses.jar');
 @c ------------------------------------------------------------------------
 @node How to create an instance of a Java class?
 @subsection How to create an instance of a Java class?
 @c - index -
 @cindex object, how to create
 @cindex instance, how to create
 @c - index -
 
-If your code shall work under Octave as well as @sc{matlab} you should use the
-function @code{javaObject} to create Java objects.  The function
-@code{java_new} is Octave specific and does not exist in the @sc{matlab}
-environment.
+The function @code{javaObject} can be used to create Java objects..
 
-Example 1, suitable for Octave but not for @sc{matlab}: 
+Example: 
 
 @example
-   Passenger = java_new('package.FirstClass', row, seat);
-@end example
-
-Example 2, which works in Octave as well as in @sc{matlab}: 
-
-@example
-   Passenger = javaObject('package.FirstClass', row, seat);
+   Passenger = javaObject ('package.FirstClass', row, seat);
 @end example
 
 @c ------------------------------------------------------------------------
 @node How can I handle memory limitations?
 @subsection How can I handle memory limitations?
 @cindex memory, limitations
 
 In order to execute Java code Octave creates a Java Virtual Machine (JVM). 
@@ -326,36 +317,29 @@ Such a JVM allocates a fixed amount of i
 up to a fixed maximum memory limit.  The default values depend on the Java
 version (see @ref{doc-javamem,,javamem}).  The memory pool is shared by all Java
 objects running in the JVM@.  This strict memory limit is intended mainly to
 avoid that runaway applications inside web browsers or in enterprise servers
 can consume all memory and crash the system.  When the maximum memory limit is
 hit, Java code will throw exceptions so that applications will fail or behave
 unexpectedly.
 
-In Octave as well as in @sc{matlab}, you can specify options for the creation
-of the JVM inside a file named @file{java.opts}.  This is a text file where you
-can enter lines containing @option{-X} and @option{-D} options handed to the
-JVM during initialization. 
+You can specify options for the creation of the JVM inside a file named 
+@file{java.opts}.  This is a text file where you can enter lines containing 
+@option{-X} and @option{-D} options handed to the JVM during initialization. 
 
-In Octave, the Java options file must be located in the directory where
-@file{javaclasspath.m} resides, i.e., the package installation directory,
-usually something like @file{@dots{}\share\Octave\packages\java-1.2.8}.  You can
-find this directory by executing 
+The Java options file must be located in the directory where 
+@file{javaclasspath.m} resides, usually something like
+ @file{@dots{}/share/Octave/<version>/m/java}. You can find this directory 
+by executing 
 
 @example
-pkg list
+which javaclasspath
 @end example
 
-In @sc{matlab}, the options file goes into the @file{MATLABROOT/bin/ARCH}
-directory or in your personal @sc{matlab} startup directory (can be determined
-by a @samp{pwd} command).  @var{MATLABROOT} is the @sc{matlab} root directory
-and @var{ARCH} is your system architecture, which you find by issuing the
-commands @samp{matlabroot} respectively @samp{computer('arch')}.
-
 The @option{-X} options allow you to increase the maximum amount of memory
 available to the JVM to 256 Megabytes by adding the following line to the
 @file{java.opts} file: 
 
 @example
 -Xmx256m 
 @end example
 
@@ -387,17 +371,17 @@ the string @code{12.34}.
 -DMyProperty=12.34
 @end example
 
 The value of this property can then be retrieved as a string by a Java object
 or in Octave: 
 
 @example
 @group
-octave> javaMethod('java.lang.System', 'getProperty', 'MyProperty');
+octave> javaMethod('getProperty', 'java.lang.System', 'MyProperty');
 ans = 12.34
 @end group
 @end example
 
 @seealso{javamem}
 
 @c ------------------------------------------------------------------------
 @node Which @TeX{} symbols are implemented in the dialog functions?
