# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1314926841 18000
#      Thu Sep 01 20:27:21 2011 -0500
# Node ID 8afb81b3274833cd98034797e6074df06d4611e9
# Parent  7d4429c8221255c4269c51154bbc7d63710a0cc6
Initialise vecout variable and return permutation matrices instead of sparse matrices (bug #34185)

diff --git a/src/DLD-FUNCTIONS/luinc.cc b/src/DLD-FUNCTIONS/luinc.cc
--- a/src/DLD-FUNCTIONS/luinc.cc
+++ b/src/DLD-FUNCTIONS/luinc.cc
@@ -105,17 +105,17 @@ Given the string argument 'vector', @cod
     error ("luinc: incorrect number of arguments");
   else
     {
       bool zero_level = false;
       bool milu = false;
       bool udiag = false;
       Matrix thresh;
       double droptol = -1.;
-      bool vecout;
+      bool vecout = false;
 
       if (args(1).is_string ())
         {
           if (args(1).string_value () == "0")
             zero_level = true;
           else
             error ("luinc: unrecognized string argument");
         }
@@ -231,17 +231,17 @@ Given the string argument 'vector', @cod
                         SparseLU fact (sm, Qinit, thresh, false, true, droptol,
                                        milu, udiag);
 
                         if (! error_state)
                           {
                             if (vecout)
                               retval(2) = fact.Pr_vec ();
                             else
-                              retval(2) = fact.Pr ();
+                              retval(2) = fact.Pr_mat ();
                             retval(1) = octave_value (fact.U (),
                                                       MatrixType (MatrixType::Upper));
                             retval(0) = octave_value (fact.L (),
                                                       MatrixType (MatrixType::Lower));
                           }
                       }
                       break;
 
@@ -255,18 +255,18 @@ Given the string argument 'vector', @cod
                           {
                             if (vecout)
                               {
                                 retval(3) = fact.Pc_vec ();
                                 retval(2) = fact.Pr_vec ();
                               }
                             else
                               {
-                                retval(3) = fact.Pc ();
-                                retval(2) = fact.Pr ();
+                                retval(3) = fact.Pc_mat ();
+                                retval(2) = fact.Pr_mat ();
                               }
                             retval(1) = octave_value (fact.U (),
                                                       MatrixType (MatrixType::Upper));
                             retval(0) = octave_value (fact.L (),
                                                       MatrixType (MatrixType::Lower));
                           }
                       }
                       break;
@@ -314,17 +314,17 @@ Given the string argument 'vector', @cod
                         SparseComplexLU fact (sm, Qinit, thresh, false, true,
                                               droptol, milu, udiag);
 
                         if (! error_state)
                           {
                             if (vecout)
                               retval(2) = fact.Pr_vec ();
                             else
-                              retval(2) = fact.Pr ();
+                              retval(2) = fact.Pr_mat ();
                             retval(1) = octave_value (fact.U (),
                                                       MatrixType (MatrixType::Upper));
                             retval(0) = octave_value (fact.L (),
                                                       MatrixType (MatrixType::Lower));
                           }
                       }
                       break;
 
@@ -338,18 +338,18 @@ Given the string argument 'vector', @cod
                           {
                             if (vecout)
                               {
                                 retval(3) = fact.Pc_vec ();
                                 retval(2) = fact.Pr_vec ();
                               }
                             else
                               {
-                                retval(3) = fact.Pc ();
-                                retval(2) = fact.Pr ();
+                                retval(3) = fact.Pc_mat ();
+                                retval(2) = fact.Pr_mat ();
                               }
                             retval(1) = octave_value (fact.U (),
                                                       MatrixType (MatrixType::Upper));
                             retval(0) = octave_value (fact.L (),
                                                       MatrixType (MatrixType::Lower));
                           }
                       }
                       break;
