# HG changeset patch
# User Felipe G. Nievinski <fgnievinski@gmail.com>
# Date 1388111166 7200
#      Fri Dec 27 00:26:06 2013 -0200
# Node ID f09abe022c960cd9e088173925e1ce87f9e6dbc6
# Parent  6e0686858b6ada579e0b1afa2a40ff9f89c8c109
cell2mat.m: Accept empty non-cell input for compatibility (bug #41010)

* cell2mat.m: Accept empty non-cell input for compatibility (bug #41010)

diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -27,25 +27,24 @@
 ## @end deftypefn
 
 function m = cell2mat (c)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! iscell (c))
-    error ("cell2mat: C is not a cell array");
-  endif
-
   nb = numel (c);
 
   if (nb == 0)
     m = [];
   else
+    if (! iscell (c))
+      error ("cell2mat: C is not a cell array");
+    endif
 
     ## Check first for valid matrix types
     valid = cellfun ("isnumeric", c);
     valid = cellfun ("islogical", c(! valid));
     valid = cellfun ("isclass", c(! valid), "char");
     if (! all (valid(:)))
       valid = cellfun ("isclass", c, "cell");
       if (! all (valid(:)))
@@ -89,16 +88,17 @@ function m = cell2mat (c)
 endfunction
 
 
 %!demo
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! cell2mat (C)
 
 %!assert (cell2mat ({}), []);
+%!assert (cell2mat ([]), []);
 %!test
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! D = C; D(:,:,2) = C;
 %! E = [1 2 3 4; 5 6 7 8; 9 10 11 12];
 %! F = E; F(:,:,2) = E;
 %! assert (cell2mat (C), E);
 %! assert (cell2mat (D), F);
 %!test
