# HG changeset patch
# User jwe
# Date 1046722268 0
#      Mon Mar 03 20:11:08 2003 +0000
# Node ID 0c69a845ef1a39cbe7b36a72e5182e7ab521df3e
# Parent  34014c0fb2ce5bc27dd15ed173b9f69f26b2d8e0
[project @ 2003-03-03 20:11:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
+2003-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (read_mat5_binary_element): Handle structure arrays.
+	(save_mat5_binary_element): Likewise.
+
 2003-03-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-cell.cc (octave_cell::subsasgn): Use make_unique in
+	appropriate places to preserve copy on write semantics.
+
 	* oct-conf.h.in: Substitute OCTAVE_CONF_KPATHSEA_INCFLAGS.
 
 	* oct-stdstrm.h (octave_stdiostream::output_stream): Return stream
 	if mode is out, not in.
 
 2003-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* strfns.cc (Fchar): New function.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2741,27 +2741,49 @@ read_mat5_binary_element (std::istream& 
 	// field name subelement.  The length of this subelement tells
 	// us how many fields there are.
 	if (read_mat5_tag (is, swap, type, len) || type != miINT8)
 	  {
 	    error ("load: invalid field name subelement");
 	    goto data_read_error;
 	  }
 
+	int n_fields = len/field_name_length;
+
+	len = PAD (len);
+
 	OCTAVE_LOCAL_BUFFER (char, elname, len);
 
 	if (! is.read (elname, len))
 	  goto data_read_error;
 
-	// fields subelements
-	for (i = 0; i < len/field_name_length; i++)
+	int n;
+	if (nr == 1)
+	  n = nc;
+	else if (nc == 1)
+	  n = nr;
+	else
 	  {
-	    octave_value fieldtc;
-	    read_mat5_binary_element (is, filename, swap, global, fieldtc);
-	    m[elname + i*field_name_length] = fieldtc;
+	    error ("load: can only handle one-dimensional structure arrays");
+	    goto data_read_error;
+	  }
+
+	octave_value_list field_elts (n, Matrix ());
+
+	// fields subelements
+	for (i = 0; i < n_fields; i++)
+	  {
+	    for (int j = 0; j < n; j++)
+	      {
+		octave_value fieldtc;
+		read_mat5_binary_element (is, filename, swap, global, fieldtc);
+		field_elts(j) = fieldtc;
+	      }
+
+	    m.assign (elname + i*field_name_length, field_elts);
 	  }
 
 	tc = m;
       }
       break;
 
     case mxCHAR_CLASS:
       // handle as a numerical array to start with
@@ -2833,16 +2855,19 @@ read_mat5_binary_element (std::istream& 
 	tc = re;
 
       if (arrayclass == mxCHAR_CLASS)
 	tc = tc.convert_to_str ();
     }
 
   is.seekg (pos + static_cast<std::streamoff> (element_length));
 
+  if (is.eof ())
+    is.clear ();
+
   return retval;
 
  data_read_error:
  early_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
   return std::string ();
 
  skip_ahead:
@@ -4233,25 +4258,18 @@ save_mat5_binary_element (std::ostream& 
       gripe_wrong_type_arg ("save", tc, false);
       goto error_cleanup;
     }
 
   os.write ((char *)&flags, 4);
   os.write ((char *)&junk, 4);
   
   // dimensions array subelement
-  if (tc.is_map ())
-    {
-      nr = nc = 1;
-    }
-  else
-    {
-      nr = tc.rows ();
-      nc = tc.columns ();
-    }
+  nr = tc.rows ();
+  nc = tc.columns ();
 
   write_mat5_tag (os, miINT32, 8);
   os.write ((char *)&nr, 4);
   os.write ((char *)&nc, 4);
 
   // array name subelement
   {
     int namelen = name.length ();
@@ -4339,27 +4357,31 @@ save_mat5_binary_element (std::ostream& 
 	  {
 	    // write the name of each element
 	    std::string tstr = m.key (i);
 	    memset (buf, 0, 32);
 	    strncpy (buf, tstr.c_str (), 31); // only 31 char names permitted
 	    os.write (buf, 32);
 	  }
 
+	int len = m.array_length ();
+
 	for (Octave_map::iterator i = m.begin (); i != m.end (); i++)
 	  {
 	    // write the data of each element
-	    // XXX FIXME XXX -- if the length of the structure array is
-	    // 1, should we really create a list object?
-	    bool retval2
-	      = save_mat5_binary_element (os, octave_value (m.contents (i)),
-					  "", mark_as_global, save_as_floats);
-
-	    if (! retval2)
-	      goto error_cleanup;
+	    octave_value_list elts = m.contents (i);
+
+	    for (int j = 0; j < len; j++)
+	      {
+		bool retval2 = save_mat5_binary_element (os, elts(j), "",
+							 mark_as_global,
+							 save_as_floats);
+		if (! retval2)
+		  goto error_cleanup;
+	      }
 	  }
       }
     }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   contin = os.tellp ();
   os.seekp (fixup);
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -125,39 +125,46 @@ octave_cell::subsasgn (const std::string
 	      tmp = octave_value::empty_conv (type.substr (1), rhs);
 
 	    if (! error_state)
 	      {
 		std::list<octave_value_list> next_idx (idx);
 
 		next_idx.erase (next_idx.begin ());
 
+		tmp.make_unique ();
+
 		t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
 	      }
 	  }
 	  break;
 
 	case '{':
 	  {
 	    octave_value tmp = do_index_op (idx.front (), true);
 
 	    if (! tmp.is_defined ())
 	      tmp = octave_value::empty_conv (type.substr (1), rhs);
 
-	    Cell tcell = tmp.cell_value ();
+	    if (! error_state)
+	      {
+		Cell tcell = tmp.cell_value ();
 
-	    if (! error_state && tcell.length () == 1)
-	      {
-		tmp = tcell(0,0);
+		if (! error_state && tcell.length () == 1)
+		  {
+		    tmp = tcell(0,0);
 
-		std::list<octave_value_list> next_idx (idx);
+		    std::list<octave_value_list> next_idx (idx);
+
+		    next_idx.erase (next_idx.begin ());
 
-		next_idx.erase (next_idx.begin ());
+		    tmp.make_unique ();
 
-		t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
+		    t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
+		  }
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
 	    std::string nm = type_name ();
 	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
