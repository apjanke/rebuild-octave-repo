# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1339197051 -7200
#      Sat Jun 09 01:10:51 2012 +0200
# Branch gui
# Node ID 564cc673bcc5efd8160ff04b007a4a45e3e8c9ee
# Parent  c6135951bc1867106fd6f5c8300346a40e7a3905
Added menu for debugging. Now sending debug control events, but these seem to not work flawlessly

* main-window.cc: Added connects and menus/actions.
* main-window.h: Added new slots, made debug menu a member variable.
* octave-event.h: Removed magic readline code.

diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -203,22 +203,59 @@ main_window::current_working_directory_u
   _terminal->setFocus ();
 }
 
 
 void
 main_window::handle_entered_debug_mode ()
 {
   setWindowTitle ("Octave (Debugging)");
+  _debug_menu->setEnabled (true);
 }
 
 void
 main_window::handle_quit_debug_mode ()
 {
   setWindowTitle ("Octave");
+  _debug_menu->setEnabled (false);
+}
+
+void
+main_window::debug_continue ()
+{
+  octave_link::instance ()
+      ->post_event (new octave_debug_continue_event (*this));
+}
+
+void
+main_window::debug_step_into ()
+{
+  octave_link::instance ()
+      ->post_event (new octave_debug_step_into_event (*this));
+}
+
+void
+main_window::debug_step_over ()
+{
+  octave_link::instance ()
+      ->post_event (new octave_debug_step_over_event (*this));
+}
+
+void
+main_window::debug_step_out ()
+{
+  octave_link::instance ()
+      ->post_event (new octave_debug_step_out_event (*this));
+}
+
+void
+main_window::debug_quit ()
+{
+  octave_link::instance ()
+      ->post_event (new octave_debug_quit_event (*this));
 }
 
 void
 main_window::show_about_octave ()
 {
   QString message =
       "GNU Octave\n"
       "Copyright (C) 2009 John W. Eaton and others.\n"
@@ -264,18 +301,16 @@ main_window::write_settings ()
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->setValue ("MainWindow/windowState", saveState ());
   settings->sync ();
 }
 
 void
 main_window::construct ()
 {
-  QStyle *style = QApplication::style ();
-  // TODO: Check this.
   _closing = false;   // flag for editor files when closed
   setWindowIcon (resource_manager::instance ()->get_icon (resource_manager::octave));
 
   // Setup dockable widgets and the status bar.
   _workspace_view           = new workspace_view (this);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
   _history_dock_widget      = new history_dock_widget (this);
   _history_dock_widget->setStatusTip (tr ("Browse and search the command history."));
@@ -337,17 +372,31 @@ main_window::construct ()
   QAction *undo_action
       = edit_menu->addAction (QIcon(":/actions/icons/undo.png"), tr ("Undo"));
   undo_action->setShortcut (QKeySequence::Undo);
 
   QAction *redo_action
       = edit_menu->addAction (QIcon(":/actions/icons/redo.png"), tr ("Redo"));
   redo_action->setShortcut (QKeySequence::Redo);
 
-  //QMenu *debugMenu = menuBar ()->addMenu (tr ("De&bug"));
+  _debug_menu = menuBar ()->addMenu (tr ("De&bug"));
+  QAction * debug_continue = _debug_menu->addAction (tr ("Continue"));
+  debug_continue->setShortcut (Qt::Key_F5);
+  QAction * debug_step_into = _debug_menu->addAction (tr ("Step into"));
+  debug_step_into->setShortcut (Qt::Key_F9);
+  QAction * debug_step_over = _debug_menu->addAction (tr ("Next"));
+  debug_step_over->setShortcut (Qt::Key_F10);
+  QAction * debug_step_out = _debug_menu->addAction (tr ("Step out"));
+  debug_step_out->setShortcut (Qt::Key_F11);
+  _debug_menu->addSeparator ();
+  QAction * debug_quit = _debug_menu->addAction (tr ("Quit"));
+  debug_quit->setShortcut (Qt::Key_Escape);
+  _debug_menu->setEnabled (false);
+
+
   //QMenu *parallelMenu = menuBar ()->addMenu (tr ("&Parallel"));
 
   QMenu *   desktop_menu = menuBar ()->addMenu (tr ("&Desktop"));
   QAction * load_workspace_action       = desktop_menu->addAction (tr ("Load workspace"));
   QAction * save_workspace_action       = desktop_menu->addAction (tr ("Save workspace"));
   QAction * clear_workspace_action      = desktop_menu->addAction (tr ("Clear workspace"));
 
   // Window menu
@@ -450,16 +499,26 @@ main_window::construct ()
   connect (_current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (current_working_directory_up()));
   connect (copy_action,                 SIGNAL (triggered()),
            _terminal,                   SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
            _terminal,                   SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (change_current_working_directory (QString)));
+  connect (debug_continue,              SIGNAL (triggered ()),
+           this,                        SLOT (debug_continue ()));
+  connect (debug_step_into,             SIGNAL (triggered ()),
+           this,                        SLOT (debug_step_into ()));
+  connect (debug_step_over,             SIGNAL (triggered ()),
+           this,                        SLOT (debug_step_over ()));
+  connect (debug_step_out,              SIGNAL (triggered ()),
+           this,                        SLOT (debug_step_out ()));
+  connect (debug_quit,                  SIGNAL (triggered ()),
+           this,                        SLOT (debug_quit ()));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
   addDockWidget (Qt::BottomDockWidgetArea, _terminal_dock_widget);
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -88,38 +88,43 @@ public slots:
   void reset_windows ();
   void update_current_working_directory (QString directory);
   void change_current_working_directory ();
   void change_current_working_directory (QString directory);
   void current_working_directory_up ();
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
+  void debug_continue ();
+  void debug_step_into ();
+  void debug_step_over ();
+  void debug_step_out ();
+  void debug_quit ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
   void read_settings ();
   void write_settings ();
 
 private:
   void construct ();
   void establish_octave_link ();
 
   QTerminal *               _terminal;
   file_editor_interface *   _file_editor;
+  QMenu *                   _debug_menu;
 
   // Dock widgets.
   workspace_view *          _workspace_view;
   history_dock_widget *     _history_dock_widget;
   files_dock_widget *       _files_dock_widget;
   terminal_dock_widget *    _terminal_dock_widget;
 
   // Toolbars.
   QStatusBar *              _status_bar;
-
   QComboBox *               _current_directory_combo_box;
   QToolButton *             _current_directory_tool_button;
   QToolButton *             _current_directory_up_tool_button;
 
   octave_qt_event_listener *_octave_qt_event_listener;
 
   // Flag for closing whole application
   bool                      _closing;
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -130,89 +130,69 @@ class octave_debug_step_into_event : pub
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform () const
     {
       tree_evaluator::dbstep_flag = -1;
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      rl_forced_update_display ();
       return true;
     }
 };
 
 class octave_debug_step_over_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_over_event. */
     octave_debug_step_over_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform () const
     {
       tree_evaluator::dbstep_flag = 1;
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      rl_forced_update_display ();
       return true;
     }
 };
 
 class octave_debug_step_out_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_step_out_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform () const
     {
       tree_evaluator::dbstep_flag = -2;
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      rl_forced_update_display ();
       return true;
     }
 };
 
-class octave_debug_step_continue_event : public octave_event
+class octave_debug_continue_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
-    octave_debug_step_continue_event (octave_event_observer& o)
+    octave_debug_continue_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform () const
     {
       tree_evaluator::dbstep_flag = 0;
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      rl_forced_update_display ();
       return true;
     }
 };
 
-class octave_debug_step_break_event : public octave_event
+class octave_debug_quit_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
-    octave_debug_step_break_event (octave_event_observer& o)
+    octave_debug_quit_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform () const
     {
       tree_evaluator::dbstep_flag = 0;
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      rl_forced_update_display ();
       return true;
     }
 };
 
 #endif // OCTAVEEVENT_H
