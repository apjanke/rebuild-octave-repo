# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533335025 25200
#      Fri Aug 03 15:23:45 2018 -0700
# Node ID b1e0e58971f90ac92db7e5fe33cdd91c4734341d
# Parent  8eec0403a370318144c2a1bc3f0cc3fea9cbec19
fminbnd.m: Update solver options to be Matlab compatible.

* NEWS: Announce changes in solver options for fminbnd.

* fminbnd.m: Add additional calling forms to docstring.  Rewrite docstring to
alphabetize options structure.  Add information about values of default
options for fminbnd.  Change default TolX to 1e-4, and MaxIter, MaxFunEvals to
500.  Add field "algorithm" to output struct with same value as Matlab.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -27,19 +27,29 @@ Summary of important user-visible change
           Option     |  New Default   |  Old Default
       ------------------------------------------------
         FinDiffType  |   "forward"    |   "central"
         MaxFunEvals  | 100*length(x0) |     Inf
         TolFun       |     1e-6       |     1e-7
         TolX         |     1e-6       |     1e-7
         Updating     |     "off"      |     "on"
 
- ** The fminsearch function has changed default TolFun accuracy to 1e-4
-    from 1e-7.  This change was made for Matlab compatibility, but may
-    result in different results from existing code.
+ ** The fminsearch function has changed default solver options for
+    Matlab compatibility.  The accuracy option TolFun is now 1e-4 rather
+    than 1e-7.  This *may* result in existing code producing different
+    results.
+
+ ** The fminbnd function has changed defaults for Matlab compatibility.
+    This *may* result in existing code producing different results.
+
+          Option     |  New Default   |  Old Default
+      ------------------------------------------------
+        MaxFunEvals  |      500       |     Inf
+        MaxIter      |      500       |     Inf
+        TolX         |     1e-4       |     1e-8
 
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
  ** Printing using the -dtiff output device will now create compressed
     images using lzw compression.  This change was made for Matlab
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -14,63 +14,85 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 ##
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
-## @deftypefn {} {[@var{x}, @var{fval}, @var{info}, @var{output}] =} fminbnd (@var{fun}, @var{a}, @var{b}, @var{options})
+## @deftypefn  {} {@var{x} =} fminbnd (@var{fun}, @var{a}, @var{b})
+## @deftypefnx {} {@var{x} =} fminbnd (@var{fun}, @var{a}, @var{b}, @var{options})
+## @deftypefnx {} {[@var{x}, @var{fval}, @var{info}, @var{output}] =} fminbnd (@dots{})
 ## Find a minimum point of a univariate function.
 ##
-## @var{fun} should be a function handle or name.  @var{a}, @var{b} specify a
-## starting interval.  @var{options} is a structure specifying additional
-## options.  Currently, @code{fminbnd} recognizes these options:
-## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
-## @qcode{"MaxIter"}, @qcode{"MaxFunEvals"}.  For a description of these
-## options, see @ref{XREFoptimset,,optimset}.
+## @var{fun} must be a function handle or name.
+##
+## The starting interval is specified by @var{a} (left boundary) and @var{b}
+## (right boundary).  The endpoints must be finite.
+##
+## @var{options} is a structure specifying additional parameters which
+## control the algorithm.  Currently, @code{fminbnd} recognizes these options:
+## @qcode{"Display"}, @qcode{"FunValCheck"}, @qcode{"MaxFunEvals"},
+## @qcode{"MaxIter"}, @qcode{"OutputFcn"}, @qcode{"TolX"}.
+##
+## @qcode{"MaxFunEvals"} proscribes the maximum number of function evaluations
+## before optimization is halted.  The default value is 500.
+## The value must be a positive integer.
 ##
-## On exit, the function returns @var{x}, the approximate minimum point and
-## @var{fval}, the function value thereof.
+## @qcode{"MaxIter"} proscribes the maximum number of algorithm iterations
+## before optimization is halted.  The default value is 500.
+## The value must be a positive integer.
+##
+## @qcode{"TolX"} specifies the termination tolerance for the solution @var{x}.
+## The default is @code{1e-4}.
 ##
-## @var{info} is an exit flag that can have these values:
+## For a description of the other options, see @ref{XREFoptimset,,optimset}.
+## To initialize an options structure with default values for @code{fminbnd}
+## use @code{options = optimset ("fminbnd")}.
+##
+## On exit, the function returns @var{x}, the approximate minimum point, and
+## @var{fval}, the function evaluated @var{x}.
+##
+## The third output @var{info} reports whether the algorithm succeeded and may
+## take one of the following values:
 ##
 ## @itemize
 ## @item 1
 ## The algorithm converged to a solution.
 ##
 ## @item 0
-## Maximum number of iterations or function evaluations has been exhausted.
+## Iteration limit (either @code{MaxIter} or @code{MaxFunEvals}) exceeded.
 ##
 ## @item -1
-## The algorithm has been terminated from user output function.
+## The algorithm was terminated by a user @code{OutputFcn}.
 ## @end itemize
 ##
-## Notes: The search for a minimum is restricted to be in the interval bound by
-## @var{a} and @var{b}.  If you only have an initial point to begin searching
-## from you will need to use an unconstrained minimization algorithm such as
-## @code{fminunc} or @code{fminsearch}.  @code{fminbnd} internally uses a
-## Golden Section search strategy.
+## Programming Notes: The search for a minimum is restricted to be in the
+## finite interval bound by @var{a} and @var{b}.  If you have only one initial
+## point to begin searching from then you will need to use an unconstrained
+## minimization algorithm such as @code{fminunc} or @code{fminsearch}.
+## @code{fminbnd} internally uses a Golden Section search strategy.
 ## @seealso{fzero, fminunc, fminsearch, optimset}
 ## @end deftypefn
 
 ## This is patterned after opt/fmin.f from Netlib, which in turn is taken from
 ## Richard Brent: Algorithms For Minimization Without Derivatives,
 ## Prentice-Hall (1973)
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminbnd");
 
 function [x, fval, info, output] = fminbnd (fun, a, b, options = struct ())
 
   ## Get default options if requested.
-  if (nargin == 1 && ischar (fun) && strcmp (fun, 'defaults'))
-    x = optimset ("MaxIter", Inf, "MaxFunEvals", Inf, "TolX", 1e-8,
-                  "OutputFcn", [], "FunValCheck", "off");
+  if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
+    x = optimset ("Display", "notify", "FunValCheck", "off",
+                  "MaxFunEvals", 500, "MaxIter", 500,
+                  "OutputFcn", [], "TolX", 1e-4);
     return;
   endif
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (a > b)
@@ -80,19 +102,19 @@ function [x, fval, info, output] = fminb
 
   if (ischar (fun))
     fun = str2func (fun, "global");
   endif
 
   displ = optimget (options, "Display", "notify");
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
   outfcn = optimget (options, "OutputFcn");
-  tolx = optimget (options, "TolX", 1e-8);
-  maxiter = optimget (options, "MaxIter", Inf);
-  maxfev = optimget (options, "MaxFunEvals", Inf);
+  tolx = optimget (options, "TolX", 1e-4);
+  maxiter = optimget (options, "MaxIter", 500);
+  maxfev = optimget (options, "MaxFunEvals", 500);
 
   if (funvalchk)
     ## Replace fun with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
   ## The default exit flag if exceeded number of iterations.
   info = 0;
@@ -155,19 +177,18 @@ function [x, fval, info, output] = fminb
         dogs = true;
       endif
     else
       dogs = true;
     endif
     if (dogs)
       ## Default to golden section step.
 
-      ## WARNING: This is also the "initial" procedure following
-      ## MATLAB nomenclature.  After the loop we'll fix the string
-      ## for the first step.
+      ## WARNING: This is also the "initial" procedure following MATLAB
+      ## nomenclature.  After the loop we'll fix the string for the first step.
       iter(niter+1).procedure = "golden";
 
       e = ifelse (x >= xm, a - x, b - x);
       d = c * e;
     endif
 
     ## f must not be evaluated too close to x.
     u = x + max (abs (d), tol) * (sign (d) + (d == 0));
@@ -220,31 +241,32 @@ function [x, fval, info, output] = fminb
 
   ## Fix the first step procedure.
   iter(1).procedure = "initial";
 
   ## Handle the "Display" option
   switch (displ)
     case "iter"
       print_formatted_table (iter);
-      print_exit_msg (info, struct("TolX", tolx, "fx", fval));
+      print_exit_msg (info, struct ("TolX", tolx, "fx", fval));
     case "notify"
       if (info == 0)
-        print_exit_msg (info, struct("fx",fval));
+        print_exit_msg (info, struct ("fx",fval));
       endif
     case "final"
-      print_exit_msg (info, struct("TolX", tolx, "fx", fval));
+      print_exit_msg (info, struct ("TolX", tolx, "fx", fval));
     case "off"
       "skip";
     otherwise
       warning ("fminbnd: unknown option for Display: '%s'", displ);
   endswitch
 
   output.iterations = niter;
   output.funcCount = nfev;
+  output.algorithm = "golden section search, parabolic interpolation";
   output.bracket = [a, b];
   ## FIXME: bracketf possibly unavailable.
 
 endfunction
 
 ## A helper function that evaluates a function and checks for bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
