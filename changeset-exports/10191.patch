# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264196641 18000
#      Fri Jan 22 16:44:01 2010 -0500
# Node ID a552859b009af9df1807c090362638b9ada9253e
# Parent  30aeda033364fef4405d01d55cc9a01ecbbefc47
rename member functions in prog_args class to avoid conflicts with gnulib definitions

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-22  John W. Eaton  <jwe@octave.org>
+
+	* prog-args.h (prog_args::get_option): Rename from getopt. Now const.
+	(prog_args::option_argument): Rename from optarg.  Now const.
+	(prog_args::option_index): Rename from optind.  Now const.
+
 2010-01-22  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.cc: Don't include statdefs.h.
 
 2010-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleSVD.cc (SVD::init): Ensure LD* arguments >= 1.
 	* floatSVD.cc (FloatSVD::init): Likewise.
diff --git a/liboctave/prog-args.cc b/liboctave/prog-args.cc
--- a/liboctave/prog-args.cc
+++ b/liboctave/prog-args.cc
@@ -24,34 +24,34 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "oct-getopt.h"
 
 #include "prog-args.h"
 
 int
-prog_args::getopt (void)
+prog_args::get_option (void) const
 {
   if (long_opts)
     return ::octave_getopt_long
       (xargc, xargv, short_opts,
        reinterpret_cast<const struct option *> (long_opts), 0);
   else
     return ::octave_getopt (xargc, xargv, short_opts);
 }
 
 const char *
-prog_args::optarg (void)
+prog_args::option_argument (void) const
 {
   return ::optarg;
 }
 
 int
-prog_args::optind (void)
+prog_args::option_index (void) const
 {
   return ::optind;
 }
 
 // This is intended to communicate to getopt that it is supposed to
 // start over on the next call, but it may not be portable.  See the
 // comments in getopt.c for more information.
 
diff --git a/liboctave/prog-args.h b/liboctave/prog-args.h
--- a/liboctave/prog-args.h
+++ b/liboctave/prog-args.h
@@ -50,21 +50,21 @@ public:
 	     long_options* l_opts = 0)
     : xargc (argc), xargv (argv), short_opts (s_opts), long_opts (l_opts)
       {
 	init ();
       }
 
   ~prog_args (void) { }
 
-  int getopt (void);
+  int get_option (void) const;
 
-  const char *optarg (void);
+  const char *option_argument (void) const;
 
-  int optind (void);
+  int option_index (void) const;
 
 private:
 
   // Number of args.
   int xargc;
 
   // Program args.
   char *const *xargv;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-22  John W. Eaton  <jwe@octave.org>
+
+	* octave.cc (octave_main): Use new names for prog_args member
+	functions.
+
 2010-01-22  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc: Don't include sys/types.h, unistd.h, or fstream.
 
 2010-01-22  John W. Eaton  <jwe@octave.org>
 
 	* oct-parse.yy (make_break_command, make_continue_command,
 	make_return_command): Don't examine evaluator state here.
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -30,17 +30,39 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "ov-struct.h"
 
 #ifdef HAVE_MAGICK
 
 #include <Magick++.h>
 
-unsigned int
+template <class P, unsigned int depth, unsigned int quantumdepth>
+inline P
+scale_quantum_to_depth (const Magick::Quantum& quantum)
+{
+  return (static_cast<P> (static_cast<double> (quantum)
+                                     / MaxRGB * ((1 << depth) - 1)));
+}
+
+template <>
+inline octave_uint8
+scale_quantum_to_depth<octave_uint8, 8, 8> (const Magick::Quantum& quantum)
+{
+  return static_cast<octave_uint8> (quantum);
+}
+
+template <>
+inline octave_uint16
+scale_quantum_to_depth<octave_uint16, 16, 16> (const Magick::Quantum& quantum)
+{
+  return static_cast<octave_uint16> (quantum);
+}
+
+inline unsigned int
 scale_quantum_to_depth (const Magick::Quantum& quantum, unsigned int depth)
 {
   return (static_cast<unsigned int> (static_cast<double> (quantum)
                                      / MaxRGB * ((1 << depth) - 1)));
 }
 
 octave_value_list
 read_indexed_images (std::vector<Magick::Image>& imvec,
@@ -185,17 +207,17 @@ read_indexed_images (std::vector<Magick:
   if (wantalpha)
     output(2) = alpha;
 
   output(1) = map;
 
   return output;
 }
 
-template <class T>
+template <class T, class P, unsigned int D>
 octave_value_list
 read_images (const std::vector<Magick::Image>& imvec,
              const Array<int>& frameidx, unsigned int depth)
 {
   octave_value_list retval (3, Matrix ());
 
   T im;
 
@@ -264,41 +286,51 @@ read_images (const std::vector<Magick::I
                   i++;
                 }
             }
         }
       break;
 
     case Magick::PaletteType:
     case Magick::TrueColorType:
-      idim(2) = 3;
-      im = T (idim);
-      for (int frame = 0; frame < nframes; frame++)
-        {
-          const Magick::PixelPacket *pix
-            = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+      {
+        idim(2) = 3;
+        im = T (idim);
+        P *vec = reinterpret_cast<P *> (im.fortran_vec ());
 
-          int i = 0;
-          idx(3) = frame;
+        for (int frame = 0; frame < nframes; frame++)
+          {
+            const Magick::PixelPacket *pix
+              = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-          for (int y = 0; y < rows; y++)
-            {
-              idx(0) = y;
-              for (int x = 0; x < columns; x++)
-                {
-                  idx(1) = x;
-                  idx(2) = 0;
-                  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
-                  idx(2) = 1;
-                  im(idx) = scale_quantum_to_depth (pix[i].green, depth);
-                  idx(2) = 2;
-                  im(idx) = scale_quantum_to_depth (pix[i].blue, depth);
-                  i++;
-                }
-            }
+            int i = 0;
+            P *rbuf, *gbuf, *bbuf;
+            rbuf = vec;
+            gbuf = vec + rows * columns;
+            bbuf = vec + rows * columns * 2;
+            for (int y = 0; y < rows; y++)
+              {
+                for (int x = 0; x < columns; x++)
+                  {
+                    *rbuf = scale_quantum_to_depth<P, D, QuantumDepth> (pix[i].red);
+                    *gbuf = scale_quantum_to_depth<P, D, QuantumDepth> (pix[i].green);
+                    *bbuf = scale_quantum_to_depth<P, D, QuantumDepth> (pix[i].blue);
+                    i++;
+                    rbuf += rows;
+                    gbuf += rows;
+                    bbuf += rows;
+                  }
+                rbuf -= rows * columns - 1;
+                gbuf -= rows * columns - 1;
+                bbuf -= rows * columns - 1;
+              }
+
+            // Next frame.
+            vec += rows * columns * 3;
+          }
         }
       break;
 
     case Magick::PaletteMatteType:
     case Magick::TrueColorMatteType:
     case Magick::ColorSeparationType:
       idim(2) = 4;
       im = T (idim);
@@ -421,27 +453,33 @@ Instead you should use @code{imread}.\n\
           while (depth >>= 1)
             i++;
           depth = 1 << i;
         }
       
       switch (depth)
         {
         case 1:
-          output = read_images<boolNDArray> (imvec, frameidx, depth);
+          output = read_images<boolNDArray, bool, 1> (imvec, frameidx, depth);
           break;
 
         case 2:
+          output = read_images<uint8NDArray, octave_uint8, 2> (imvec, frameidx, depth) ;
+          break;
+
         case 4:
+          output = read_images<uint8NDArray, octave_uint8, 4> (imvec, frameidx, depth) ;
+          break;
+
         case 8:
-          output = read_images<uint8NDArray> (imvec, frameidx, depth) ;
+          output = read_images<uint8NDArray, octave_uint8, 8> (imvec, frameidx, depth) ;
           break;
 
         case 16:
-          output = read_images<uint16NDArray> (imvec, frameidx, depth);
+          output = read_images<uint16NDArray, octave_uint16, 16> (imvec, frameidx, depth);
           break;
 
         case 32:
         case 64:
         default:
           error ("__magick_read__: image depths bigger than 16-bit not supported");
         }
     }
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -629,17 +629,17 @@ octave_main (int argc, char **argv, int 
 
   prog_args args (argc, argv, short_opts, long_opts);
 
   bool forced_line_editing = false;
 
   bool read_history_file = true;
 
   int optc;
-  while ((optc = args.getopt ()) != EOF)
+  while ((optc = args.get_option ()) != EOF)
     {
       switch (optc)
 	{
 	case 'H':
 	  read_history_file = false;
 	  bind_internal_variable ("saving_history", false);
 	  break;
 
@@ -662,18 +662,18 @@ octave_main (int argc, char **argv, int 
 	  verbose_usage ();
 	  break;
 
 	case 'i':
 	  forced_interactive = true;
 	  break;
 
 	case 'p':
-	  if (args.optarg ())
-	    load_path::set_command_line_path (args.optarg ());
+	  if (args.option_argument ())
+	    load_path::set_command_line_path (args.option_argument ());
 	  break;
 
 	case 'q':
 	  inhibit_startup_message = true;
 	  break;
 
 	case 'x':
 	  {
@@ -682,48 +682,48 @@ octave_main (int argc, char **argv, int 
 	  }
 	  break;
 
 	case 'v':
 	  print_version_and_exit ();
 	  break;
 
 	case DOC_CACHE_FILE_OPTION:
-	  if (args.optarg ())
-	    bind_internal_variable ("doc_cache_file", args.optarg ());
+	  if (args.option_argument ())
+	    bind_internal_variable ("doc_cache_file", args.option_argument ());
 	  break;
 
 	case EVAL_OPTION:
-	  if (args.optarg ())
+	  if (args.option_argument ())
 	    {
 	      if (code_to_eval.empty ())
-		code_to_eval = args.optarg ();
+		code_to_eval = args.option_argument ();
 	      else
-		code_to_eval += std::string (" ") + args.optarg ();
+		code_to_eval += std::string (" ") + args.option_argument ();
 	    }
 	  break;
 
 	case EXEC_PATH_OPTION:
-	  if (args.optarg ())
-	    set_exec_path (args.optarg ());
+	  if (args.option_argument ())
+	    set_exec_path (args.option_argument ());
 	  break;
 
 	case IMAGE_PATH_OPTION:
-	  if (args.optarg ())
-	    set_image_path (args.optarg ());
+	  if (args.option_argument ())
+	    set_image_path (args.option_argument ());
 	  break;
 
 	case INFO_FILE_OPTION:
-	  if (args.optarg ())
-	    bind_internal_variable ("info_file", args.optarg ());
+	  if (args.option_argument ())
+	    bind_internal_variable ("info_file", args.option_argument ());
 	  break;
 
 	case INFO_PROG_OPTION:
-	  if (args.optarg ())
-	    bind_internal_variable ("info_program", args.optarg ());
+	  if (args.option_argument ())
+	    bind_internal_variable ("info_program", args.option_argument ());
 	  break;
 
 	case LINE_EDITING_OPTION:
 	  forced_line_editing = true;
 	  break;
 
 	case NO_INIT_FILE_OPTION:
 	  read_init_files = false;
@@ -812,17 +812,17 @@ octave_main (int argc, char **argv, int 
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
-  int last_arg_idx = args.optind ();
+  int last_arg_idx = args.option_index ();
 
   int remaining_args = argc - last_arg_idx;
 
   if (! code_to_eval.empty ())
     {
       int parse_status = execute_eval_option_code (code_to_eval);
 
       if (! (persist || remaining_args > 0))
