# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1389729417 -3600
#      Tue Jan 14 20:56:57 2014 +0100
# Branch gui-release
# Node ID 3a26bb54655ee0e40927b8f60d0941f4ba191ccf
# Parent  8449cc186059eed591f05a7f911f46ea775073b3
warn when saving or executing a file with spaces in its name (bug #41136)

* main-window.cc (run_file_in_terminal): check for spaces in the name,
  show a warning message and execute 'run file' if desired

* file-editor-tab.cc (save_file_check_spaces): new function that checks for
  spaces in a file name and asks if the user wants to chose another file name;
  (handle_save_file_as_answer_close): use the new function;
  (handle_save_file_as_answer): use the new function;

* file-editor-tab.h: new function save_file_check_spaces

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1163,39 +1163,65 @@ file_editor_tab::save_file_as (bool remo
     {
       connect (fileDialog, SIGNAL (fileSelected (const QString&)),
                this, SLOT (handle_save_file_as_answer (const QString&)));
     }
 
   show_dialog (fileDialog);
 }
 
+bool
+file_editor_tab::save_file_check_spaces (QString file_name)
+{
+  QFileInfo file = QFileInfo(file_name);
+
+  if (file.suffix () == "m" && file.baseName ().contains (' '))
+    {
+      int ans = QMessageBox::question (0, tr ("Octave Editor"),
+         tr ("It is not advisable to save an Octave script\n"
+              "in a file with a name containing spaces.\n\n"
+              "Do you wnat to chose another name?"),
+          QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
+
+      if (ans == QMessageBox::Yes)
+        return true;
+    }
+
+  return false;
+}
+
 void
 file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
 {
   if (saveFileName == _file_name)
     {
       // same name as actual file, save it as "save" would do
       save_file (saveFileName);
     }
   else
     {
       // Have editor check for conflict, do not delete tab after save.
-      emit editor_check_conflict_save (saveFileName, false);
+      if (save_file_check_spaces (saveFileName))
+        save_file_as (false);
+      else
+        emit editor_check_conflict_save (saveFileName, false);
     }
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_close (const QString& saveFileName)
 {
   // saveFileName == _file_name can not happen, because we only can get here
   // when we close a tab and _file_name is not a valid file name yet
 
   // Have editor check for conflict, delete tab after save.
-  emit editor_check_conflict_save (saveFileName, true);
+  if (save_file_check_spaces (saveFileName))
+    save_file_as (true);
+  else
+    emit editor_check_conflict_save (saveFileName, true);
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_cancel ()
 {
   // User canceled, allow editing again.
   _edit_area->setReadOnly (false);
 }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -171,16 +171,17 @@ private:
     std::string file;
     std::string dir;
     std::string function_name;
   };
 
   bool valid_file_name (const QString& file=QString ());
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
+  bool save_file_check_spaces (QString file_name);
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void show_dialog (QDialog *dlg);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -257,16 +257,38 @@ main_window::execute_command_in_terminal
   queue_command (command);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_in_terminal (const QFileInfo& info)
 {
+  QString file_name = info.canonicalFilePath ();
+  QString command = "run \""+file_name+"\"";
+
+  QString function_name = info.fileName ();
+  function_name.chop (info.suffix ().length () + 1);
+
+  if (function_name.contains (' '))
+    {
+      int ans = QMessageBox::question (0, tr ("Octave"),
+         tr ("The file %1\n"
+             "contains spaces and can not be executed.\n\n"
+             "Do you want to execute\n%2\n"
+             "instead?").
+          arg (file_name).arg (command),
+          QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
+
+      if (ans == QMessageBox::Yes)
+        execute_command_in_terminal (command);
+
+      return;
+    }
+
   octave_link::post_event (this, &main_window::run_file_callback, info);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_callback (const QFileInfo& info)
 {
