# HG changeset patch
# User jwe
# Date 1161363270 0
#      Fri Oct 20 16:54:30 2006 +0000
# Node ID c9f0839c583f86816e540888edb288e0f4afbcea
# Parent  b83e4f9540a0611d176bb6a8e7f3c40d55613d04
[project @ 2006-10-20 16:54:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,37 @@
+2006-10-20  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* ov-mex-fcn.h (octave_mex_function::atexit): New function.
+	(octave_mex_function::exit_fcn_ptr): New data member.
+	* ov-mex-fcn.cc (octave_mex_function::exit_fcn_ptr): New data member.
+	(octave_mex_function::octave_mex_function): Initialize it.
+	(octave_mex_function::~octave_mex_function):
+	If we have an exit function, call it.
+
+2006-10-20  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (delete_symbol_tables): New function.
+	* variables.h: Provide decl.
+	* toplev.cc (do_octave_atexit): Call it.
+
+	* mex.cc (mex::mex): New arg, a pointer to the current mex function.
+	(mex::curr_mex_fcn): New data member.
+	(mex::current_mex_function): New function.
+	(mexAtExit): Set exit function pointer in current mex file object.
+
+2006-10-20  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* mex.cc (enum callstyle): Delete enum definition.
+	(Fortran_mex, C_mex): Delete functions.
+	(call_mex): First arg is now bool.
+	* ov-mex-fcn.cc (call_mex): Fix decl to match new definition.
+	(Fortran_mex, C_mex): Delete decls.
+	(octave_mex_function::do_multi_index_op): Simplify call to call_mex.
+
 2006-10-20  John W. Eaton  <jwe@octave.org>
 
 	* lex.l (handle_identifier): If a command name is found, skip
 	starting command mode if parsing an object index.
 
 2006-10-20  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTION/spqr.cc (dmperm_internal): New function with core
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -14,16 +14,17 @@
 
 // mxArray must be declared as a class before including mexproto.h.
 class mxArray;
 #include "Cell.h"
 #include "mexproto.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "ov.h"
+#include "ov-mex-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -1899,17 +1900,18 @@ mxArray::maybe_mutate (void) const
 
 // A clas to manage calls to MEX functions.  Mostly deals with memory
 // management.
 
 class mex
 {
 public:
 
-  mex (void) : memlist (), arraylist (), fname (0) { }
+  mex (octave_mex_function *f)
+    : curr_mex_fcn (f), memlist (), arraylist (), fname (0) { }
 
   ~mex (void)
   {
     if (! memlist.empty ())
       error ("mex: %s: cleanup failed", function_name ());
 
     mxFree (fname);
   }
@@ -2093,27 +2095,35 @@ public:
   void persistent (mxArray *ptr)
   {
     std::set<mxArray *>::iterator p = arraylist.find (ptr);
 
     if (p != arraylist.end ())
       arraylist.erase (p);
   }
 
+  octave_mex_function *current_mex_function (void) const
+  {
+    return curr_mex_fcn;
+  }
+
   // 1 if error should be returned to MEX file, 0 if abort.
   int trap_feval_error;
 
   // longjmp return point if mexErrMsgTxt or error.
   jmp_buf jump;
 
   // Trigger a long jump back to the mex calling function.
   void abort (void) { longjmp (jump, 1); }
 
 private:
 
+  // Pointer to the mex function that corresponds to this mex context.
+  octave_mex_function *curr_mex_fcn;
+
   // List of memory resources that need to be freed upon exit.
   std::set<void *> memlist;
 
   std::set<mxArray *> arraylist;
 
   // The name of the currently executing function.
   mutable char *fname;
 
@@ -2786,36 +2796,20 @@ mxGetElementSize (const mxArray *ptr)
   return ptr->get_element_size ();
 }
 
 // ------------------------------------------------------------------
 
 typedef void (*cmex_fptr) (int nlhs, mxArray **plhs, int nrhs, mxArray **prhs);
 typedef F77_RET_T (*fmex_fptr) (int& nlhs, mxArray **plhs, int& nrhs, mxArray **prhs);
 
-enum callstyle { use_fortran, use_C };
-
 octave_value_list
-call_mex (callstyle cs, void *f, const octave_value_list& args, int nargout)
+call_mex (bool have_fmex, void *f, const octave_value_list& args,
+	  int nargout, octave_mex_function *curr_mex_fcn)
 {
-#if 0
-  // Don't bother trapping stop/exit
-  // FIXME -- should really push "mex_exit" onto the octave
-  // atexit stack before we start and pop it when we are through, but
-  // the stack handle isn't exported from toplev.cc, so we can't.  mex_exit
-  // would have to be declared as DEFUN(mex_exit,,,"") of course.
-  static bool unregistered = true;
-
-  if (unregistered)
-    {
-      atexit (mex_exit);
-      unregistered = false;
-    }
-#endif
-
   // Use at least 1 for nargout since even for zero specified args,
   // still want to be able to return an ans.
 
   int nargin = args.length ();
   OCTAVE_LOCAL_BUFFER (mxArray *, argin, nargin);
   for (int i = 0; i < nargin; i++)
     argin[i] = 0;
 
@@ -2824,28 +2818,28 @@ call_mex (callstyle cs, void *f, const o
   for (int i = 0; i < nout; i++)
     argout[i] = 0;
 
   unwind_protect::begin_frame ("call_mex");
 
   // Save old mex pointer.
   unwind_protect_ptr (mex_context);
 
-  mex context;
+  mex context (curr_mex_fcn);
 
   unwind_protect::add (mex::cleanup, static_cast<void *> (&context));
 
   for (int i = 0; i < nargin; i++)
     argin[i] = context.make_value (args(i));
 
   if (setjmp (context.jump) == 0)
     {
       mex_context = &context;
 
-      if (cs == use_fortran)
+      if (have_fmex)
 	{
 	  fmex_fptr fcn = FCN_PTR_CAST (fmex_fptr, f);
 
 	  int tmp_nargout = nargout;
 	  int tmp_nargin = nargin;
 
 	  fcn (tmp_nargout, argout, tmp_nargin, argin);
 	}
@@ -2876,28 +2870,16 @@ call_mex (callstyle cs, void *f, const o
     }
 
   // Clean up mex resources.
   unwind_protect::run_frame ("call_mex");
 
   return retval;
 }
 
-octave_value_list
-Fortran_mex (void *f, const octave_value_list& args, int nargout)
-{
-  return call_mex (use_fortran, f, args, nargout);
-}
-
-octave_value_list
-C_mex (void *f, const octave_value_list& args, int nargout)
-{
-  return call_mex (use_C, f, args, nargout);
-}
-
 // C interface to mex functions:
 
 const char *
 mexFunctionName (void)
 {
   return mex_context ? mex_context->function_name () : "unknown";
 }
 
@@ -3123,20 +3105,27 @@ mexMakeArrayPersistent (mxArray *ptr)
 void
 mexMakeMemoryPersistent (void *ptr)
 {
   if (mex_context)
     mex_context->persistent (ptr);
 }
 
 int
-mexAtExit (void (*/*f*/) (void))
+mexAtExit (void (*f) (void))
 {
-  // FIXME
-  error ("mexAtExit: not implemented");
+  if (mex_context)
+    {
+      octave_mex_function *curr_mex_fcn = mex_context->current_mex_function ();
+
+      assert (curr_mex_fcn);
+
+      curr_mex_fcn->atexit (f);
+    }
+
   return 0;
 }
 
 const mxArray *
 mexGet (double /*handle*/, const char */*property*/)
 {
   // FIXME
   error ("mexGet: not implemented");
diff --git a/src/ov-mex-fcn.cc b/src/ov-mex-fcn.cc
--- a/src/ov-mex-fcn.cc
+++ b/src/ov-mex-fcn.cc
@@ -39,29 +39,33 @@ 02110-1301, USA.
 DEFINE_OCTAVE_ALLOCATOR (octave_mex_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_mex_function,
 				     "mex function", "mex function");
 
 octave_mex_function::octave_mex_function
   (void *fptr, bool fmex, const octave_shlib& shl,
    const std::string& nm)
-  : octave_function (nm), mex_fcn_ptr (fptr), have_fmex (fmex), sh_lib (shl)
+  : octave_function (nm), mex_fcn_ptr (fptr), exit_fcn_ptr (0),
+    have_fmex (fmex), sh_lib (shl)
 {
   mark_fcn_file_up_to_date (time_parsed ());
 
   std::string file_name = fcn_file_name ();
 
   system_fcn_file
     = (! file_name.empty ()
        && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
 }
 
 octave_mex_function::~octave_mex_function (void)
 {
+  if (exit_fcn_ptr)
+    (*exit_fcn_ptr) ();
+
   octave_dynamic_loader::remove (my_name, sh_lib);
 }
 
 std::string
 octave_mex_function::fcn_file_name (void) const
 {
   return sh_lib.file_name ();
 }
@@ -113,20 +117,18 @@ octave_mex_function::subsref (const std:
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 extern octave_value_list
-C_mex (void *f, const octave_value_list& args, int nargout);
-
-extern octave_value_list
-Fortran_mex (void *f, const octave_value_list& args, int nargout);
+call_mex (bool have_fmex, void *f, const octave_value_list& args,
+	  int nargout, octave_mex_function *curr_mex_fcn);
 
 octave_value_list
 octave_mex_function::do_multi_index_op (int nargout,
 					const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state)
@@ -137,19 +139,17 @@ octave_mex_function::do_multi_index_op (
   else
     {
       unwind_protect::begin_frame ("mex_func_eval");
 
       octave_call_stack::push (this);
 
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
-      retval = have_fmex
-	? Fortran_mex (mex_fcn_ptr, args, nargout)
-	: C_mex (mex_fcn_ptr, args, nargout);
+      retval = call_mex (have_fmex, mex_fcn_ptr, args, nargout, this);
 
       unwind_protect::run_frame ("mex_func_eval");
     }
 
   return retval;
 }
 
 /*
diff --git a/src/ov-mex-fcn.h b/src/ov-mex-fcn.h
--- a/src/ov-mex-fcn.h
+++ b/src/ov-mex-fcn.h
@@ -76,20 +76,24 @@ public:
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_mex_function (void) const { return true; }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
+  void atexit (void (*fcn) (void)) { exit_fcn_ptr = fcn; }
+
 private:
 
   void *mex_fcn_ptr;
 
+  void (*exit_fcn_ptr) (void);
+
   bool have_fmex;
 
   octave_shlib sh_lib;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   mutable octave_time t_checked;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -612,16 +612,21 @@ do_octave_atexit (void)
 
       flush_octave_stdout ();
     }
 
   if (! deja_vu)
     {
       deja_vu = true;
 
+      // Do this explicitly so that destructors for mex file objects
+      // are called, so that functions registered with mexAtExit are
+      // called.
+      delete_symbol_tables ();
+
       command_editor::restore_terminal_state ();
 
       // FIXME -- is this needed?  Can it cause any trouble?
       raw_mode (0);
 
       octave_history_write_timestamp ();
 
       command_history::clean_up_and_save ();
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -99,16 +99,24 @@ initialize_symbol_tables (void)
     global_sym_tab = new symbol_table (2048, "GLOBAL");
 
   if (! top_level_sym_tab)
     top_level_sym_tab = new symbol_table (4096, "TOP");
 
   curr_caller_sym_tab = curr_sym_tab = top_level_sym_tab;
 }
 
+void
+delete_symbol_tables (void)
+{
+  delete fbi_sym_tab;
+  delete global_sym_tab;
+  delete top_level_sym_tab;
+}
+
 // Attributes of variables and functions.
 
 // Is this a command-style function?
 
 static std::set <std::string> command_set;
 
 static inline bool
 is_marked_as_command (const std::string& s)
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -43,16 +43,17 @@ class string_vector;
 
 #include "ov.h"
 #include "ov-builtin.h"
 #include "symtab.h"
 
 extern bool at_top_level (void);
 
 extern void initialize_symbol_tables (void);
+extern void delete_symbol_tables (void);
 
 extern bool is_command_name (const std::string&);
 
 // The next three are here temporarily...
 extern bool is_marked_as_rawcommand (const std::string& s);
 extern void mark_as_rawcommand (const std::string& s);
 extern void unmark_rawcommand (const std::string& s);
 
