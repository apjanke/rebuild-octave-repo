# HG changeset patch
# User Stefan Mahr <dac922@gmx.de>
# Date 1376903981 -7200
#      Mon Aug 19 11:19:41 2013 +0200
# Node ID 79d4b60899680a75ffc68440598f33e31a99f157
# Parent  eb8bf49780fb6e1e301d50f6f46237de0681468f
Fix isequal for sparse matrix (bug #37321)

* Sparse-op-defs.h (SPARSE_BASE_REDUCTION_OP): Fix typo in indexing
* __isequal__.m: Always return logical
* isequal.m, Sparse.cc: Add tests

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2788,16 +2788,29 @@ bug #35570:
 %! s(:,2:4) = [];
 %! assert (s, sparse (magic (5)(:, [1,5])));
 
 %!test
 %! s = sparse ([], [], [], 1, 1);
 %! s(1,:) = [];
 %! assert (s, sparse ([], [], [], 0, 1));
 
+## Test (bug #37321)
+
+%!test a=sparse (0,0); assert (all (a)==sparse ([1]))
+%!test a=sparse (0,1); assert (all (a)==sparse ([1]))
+%!test a=sparse (1,0); assert (all (a)==sparse ([1]))
+%!test a=sparse (1,0); assert (all (a,2)==sparse ([1]))
+%!test a=sparse (1,0); assert (isequal (size (all (a,1)),[1 0]))
+%!test a=sparse (1,1); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
+%!test a=sparse (2,1); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
+%!test a=sparse (1,2); assert (all (a)==sparse ([0])), assert (isequal (size (all (a)),[1 1]))
+%!test a=sparse (2,2); assert (isequal(all (a),sparse ([0 0])))
+
+
 */
 
 template <class T>
 void
 Sparse<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->nzmx:   " << rep->nzmx  << "\n"
diff --git a/liboctave/operators/Sparse-op-defs.h b/liboctave/operators/Sparse-op-defs.h
--- a/liboctave/operators/Sparse-op-defs.h
+++ b/liboctave/operators/Sparse-op-defs.h
@@ -1761,17 +1761,17 @@ along with Octave; see the file COPYING.
     { \
       if (MT_RESULT) \
         { \
           retval = RET_TYPE (static_cast<octave_idx_type> (1), nc, nc); \
           retval.cidx (0) = 0; \
           for (octave_idx_type i = 0; i < nc ; i++) \
             { \
               retval.ridx (i) = 0; \
-              retval.cidx (i+1) = i; \
+              retval.cidx (i+1) = i+1; \
               retval.data (i) = MT_RESULT; \
             } \
         } \
       else \
         retval = RET_TYPE (static_cast<octave_idx_type> (1), nc, \
                            static_cast<octave_idx_type> (0)); \
     } \
   else if (nc == 0 && dim == 1) \
diff --git a/scripts/general/isequal.m b/scripts/general/isequal.m
--- a/scripts/general/isequal.m
+++ b/scripts/general/isequal.m
@@ -69,12 +69,17 @@ endfunction
 %!assert (isequal ({'a','b','c','d'},{'a';'b';'c';'d'}), false)
 ## test for equality (struct)
 %!assert (isequal (struct ('a',1,'b',2),struct ('a',1,'b',2)), true)
 %!assert (isequal (struct ('a',1,'b',2),struct ('a',1,'b',2),struct ('a',1,'b',2)), true)
 %!assert (isequal (struct ('a',"abc",'b',2),struct ('a',"abc",'b',2)), true)
 ## test for inequality (struct)
 %!assert (isequal (struct ('a',NaN,'b',2),struct ('a',NaN,'b',2),struct ('a',NaN,'b',2)), false)
 
+## test for sparse matrices
+%!assert (isequal (sparse (0,1), sparse (0,1)), true)
+%!assert (isequal (sparse (0,1), sparse (1,0)), false)
+%!assert (isequal (sparse (2, 2), sparse (2, 2)), true)
+
 ## Input validation
 %!error isequal ()
 %!error isequal (1)
 
diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -151,28 +151,34 @@ function t = __isequal__ (nans_compare_e
       l_f_x = length (f_x);
       x = x(f_x);
       for argn = 1:l_v
         y = varargin{argn};
         f_y = find (y);
 
         t = (l_f_x == length (f_y)) && all (f_x == f_y);
         if (!t)
-          return;
+          break;
         endif
 
         y = y(f_y);
         m = (x == y);
         t = all (m);
 
         if (!t && nans_compare_equal)
           t = isnan (x(!m)) && isnan (y(!m));
         endif
 
         if (!t)
-          return;
+          break;
         endif
       endfor
 
     endif
   endif
 
+  if (!t)
+    t=logical(0);
+  else
+    t=logical(1);
+  endif
+
 endfunction
