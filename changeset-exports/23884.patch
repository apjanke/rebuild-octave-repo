# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1502234744 25200
#      Tue Aug 08 16:25:44 2017 -0700
# Node ID bd9e719f04ccc285487282a69a88f06ed96c28f2
# Parent  b3b136bc7ce2e188ce64b237c4fdadc0e2429bd7
new mxGetProperty function for MEX API

* mexproto.h, mex.cc (mxGetProperty): New function.

* mxarray.in.h (mxArray::get_property): New function.
(mxArray_base::get_property): New virtual function.

* mex.cc (mxArray_octave_value::get_property): New function.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -372,16 +372,41 @@ public:
       }
 
     return class_name;
   }
 
   // Not allowed.
   void set_class_name (const char * /*name_arg*/) { request_mutation (); }
 
+  mxArray * get_property (mwIndex idx, const char *name) const
+  {
+    mxArray *retval = nullptr;
+
+    if (val.is_classdef_object ())
+      {
+        octave_classdef *ov_cdef = val.classdef_object_value ();
+
+        if (ov_cdef)
+          {
+            cdef_object& cdef = ov_cdef->get_object_ref ();
+
+            if (cdef.is_array ())
+              cdef = cdef.array_value ().elem (idx);
+
+            octave_value prop_val = cdef.get (name);
+
+            if (prop_val.is_defined())
+              retval = new mxArray (prop_val);
+          }
+      }
+
+    return retval;
+  }
+
   mxArray * get_cell (mwIndex /*idx*/) const
   {
     request_mutation ();
     return nullptr;
   }
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
@@ -2945,16 +2970,21 @@ mxGetClassName (const mxArray *ptr)
 }
 
 void
 mxSetClassName (mxArray *ptr, const char *name)
 {
   ptr->set_class_name (name);
 }
 
+mxArray *mxGetProperty (const mxArray *ptr, mwIndex idx, const char *propertyName)
+{
+  return ptr->get_property (idx, propertyName);
+}
+
 // Cell support.
 mxArray *
 mxGetCell (const mxArray *ptr, mwIndex idx)
 {
   return ptr->get_cell (idx);
 }
 
 void
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -237,18 +237,19 @@ extern OCTINTERP_API void * mxGetImagDat
 extern OCTINTERP_API void mxSetPr (mxArray *ptr, double *pr);
 extern OCTINTERP_API void mxSetPi (mxArray *ptr, double *pi);
 extern OCTINTERP_API void mxSetData (mxArray *ptr, void *data);
 extern OCTINTERP_API void mxSetImagData (mxArray *ptr, void *pi);
 
 /* Classes.  */
 extern OCTINTERP_API mxClassID mxGetClassID (const mxArray *ptr);
 extern OCTINTERP_API const char * mxGetClassName (const mxArray *ptr);
-
 extern OCTINTERP_API void mxSetClassName (mxArray *ptr, const char *name);
+extern OCTINTERP_API mxArray * mxGetProperty(const mxArray *ptr, mwIndex idx,
+                                             const char *propertName);
 
 /* Cell support.  */
 extern OCTINTERP_API mxArray * mxGetCell (const mxArray *ptr, mwIndex idx);
 
 extern OCTINTERP_API void mxSetCell (mxArray *ptr, mwIndex idx, mxArray *val);
 
 /* Sparse support.  */
 extern OCTINTERP_API mwIndex * mxGetIr (const mxArray *ptr);
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -219,16 +219,21 @@ public:
   virtual bool is_scalar (void) const = 0;
 
   virtual mxClassID get_class_id (void) const = 0;
 
   virtual const char * get_class_name (void) const = 0;
 
   virtual void set_class_name (const char *name_arg) = 0;
 
+  virtual mxArray * get_property (mwIndex /*idx*/, const char */*name*/) const
+  {
+    return nullptr;
+  }
+
   // FIXME: Why not just have this '= 0' as the others?
   // Could then eliminate err_invalid_type function and #include "error.h".
   virtual mxArray * get_cell (mwIndex /*idx*/) const
   {
     err_invalid_type ();
   }
 
   virtual void set_cell (mwIndex idx, mxArray *val) = 0;
@@ -435,16 +440,19 @@ public:
 
   const char * get_name (void) const { return name; }
 
   void set_name (const char *name_arg);
 
   mxClassID get_class_id (void) const { return rep->get_class_id (); }
 
   const char * get_class_name (void) const { return rep->get_class_name (); }
+  
+  mxArray * get_property (mwIndex idx, const char * propNm) const
+  { return rep->get_property (idx, propNm); }
 
   void set_class_name (const char *name_arg)
   { DO_VOID_MUTABLE_METHOD (set_class_name (name_arg)); }
 
   mxArray * get_cell (mwIndex idx) const
   { DO_MUTABLE_METHOD (mxArray *, get_cell (idx)); }
 
   void set_cell (mwIndex idx, mxArray *val)
