# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466261749 14400
#      Sat Jun 18 10:55:49 2016 -0400
# Node ID baeffde5c87d5bb35f490e5662542c824a400a32
# Parent  241d39c66e8fd92985ba6f3efb585baca43602ac
fix build for Windows systems

* file-stat.cc, oct-syscalls.cc, syscalls.cc: Include <ctime>.

* sysdep.cc: Include <shellapi.h> for Windows.

* lo-sysdep.cc: Include <fcntl.h> and <io.h> for Windows.

* wait-wrappers.c (WIFCONTINUED): Define if sys/wait.h does not.

* signal-wrappers.c (octave_kill_wrapper): Return -1 if kill is missing.

* main.in.cc (prepare_spawn): Move to unistd-wrappers.c.
(octave_exec): Eliminate special case for Windows.
(main): Display message if exec fails.

* unistd-wrappers.h, fcntl-wrappers.h, lo-sysdep.h:
Include <sys/types.h>

* unistd-wrappers.c (octave_execv_wrapper): Handle Windows
implementation here.  Free sanitized command vector if spawnv fails.
(octave_getegid_wrapper): Return -1 if getegid is missing.
(octave_geteuid_wrapper): Return -1 if geteuid is missing.
(octave_getgid_wrapper): Return -1 if getgid is missing.
(octave_getpgrp_wrapper): Return -1 if getpgrp is missing.
(octave_getpid_wrapper): Return -1 if getpid is missing.
(octave_getppid_wrapper): Return -1 if getppid is missing.
(octave_getuid_wrapper): Return -1 if getuid is missing.
(octave_setsid_wrapper): Return -1 if setsid is missing.

* configure.ac: Check for setsid.

* lo-sysdep.cc (win_popen2): Move to octave-popen2.c.
* lo-sysdep.h (win_popen2): Delete decl.
(octave_popen2): Delete deprecated function pointer.

* octave-popen2, octave-popen2.c (octave_popen2): New arg, ERRMSG.
Handle Windows implemenation here.
(make_command_string): New static function.

* oct-syscalls.cc (octave::sys::popen2): Eliminate special case for
Windows.  Defined deprecated inline functions for old octave_popen2
interface.

* quit.h: Don't include <windows.h>.
(w32_sigint_init, w32_raise_final, w32_raise, w32_in_main_thread):
Delete decls of undefined and unused functions.

* toplev.cc: Include <windows.h>.

* sysdep.cc: Include <windows.h> before <tlhelp32.h> and <shellapi.h>.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2521,17 +2521,17 @@ dnl Use multiple AC_CHECKs to avoid line
 AC_CHECK_FUNCS([ctermid dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp expm1 expm1f fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([log1p log1pf])
 AC_CHECK_FUNCS([realpath resolvepath roundl])
-AC_CHECK_FUNCS([select setgrent setpwent siglongjmp strsignal])
+AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr tgammaf toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([modf pow sqrt sqrtf], [],
                [AC_MSG_ERROR([Missing function required to build Octave])])
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 // the following functions:
 //
 //   mkfifo  unlink  waitpid
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <ctime>
 #include <cstdio>
 #include <cstring>
 
 #include "cmd-hist.h"
 #include "fcntl-wrappers.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -104,18 +104,19 @@ BSD_init (void)
   fpsetmask (~(FP_X_OFL|FP_X_INV|FP_X_DZ|FP_X_DNML|FP_X_UFL|FP_X_IMP));
 #  endif
 }
 #endif
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #define WIN32_LEAN_AND_MEAN
+#include <windows.h>
 #include <tlhelp32.h>
-#include <windows.h>
+#include <shellapi.h>
 
 static void
 w32_set_octave_home (void)
 {
   std::string bin_dir;
 
   HANDLE h = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE
 #if defined (TH32CS_SNAPMODULE32)
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -30,16 +30,21 @@ along with Octave; see the file COPYING.
 #include <cstring>
 #include <new>
 
 #include <fstream>
 #include <iostream>
 #include <sstream>
 #include <string>
 
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#  define WIN32_LEAN_AND_MEAN 1
+#  include <windows.h>
+#endif
+
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -31,28 +31,16 @@ along with Octave; see the file COPYING.
 #if defined (__cplusplus)
 #  include <csignal>
 #  include <string>
 extern "C" {
 #else
 #  include <signal.h>
 #endif
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
-
-#define WIN32_LEAN_AND_MEAN 1
-#include <windows.h>
-
-OCTAVE_API extern void w32_sigint_init (void);   /* setup */
-OCTAVE_API extern void w32_raise_final (void);   /* tear down */
-OCTAVE_API extern void w32_raise (int sig);      /* raise signal in main thread */
-OCTAVE_API extern int w32_in_main_thread (void); /* return true if in main thread */
-
-#endif
-
 #if defined (OCTAVE_HAVE_SIG_JUMP)
 
 typedef sigjmp_buf octave_jmp_buf;
 
 #define octave_set_current_context sigsetjmp (current_context, 1)
 
 #else
 
diff --git a/liboctave/system/file-stat.cc b/liboctave/system/file-stat.cc
--- a/liboctave/system/file-stat.cc
+++ b/liboctave/system/file-stat.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <ctime>
 #include <cerrno>
 #include <cstring>
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "stat-wrappers.h"
 #include "strmode-wrapper.h"
 
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -19,30 +19,21 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <iostream>
 #include <string>
-#include <vector>
-
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-#  define WIN32_LEAN_AND_MEAN 1
-#  include <windows.h>
-#endif
 
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
-#include "oct-locbuf.h"
-#include "str-vec.h"
 #include "unistd-wrappers.h"
 
 namespace octave
 {
   namespace sys
   {
     std::string
     getcwd (void)
@@ -71,84 +62,10 @@ namespace octave
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
       if (path.length () == 2 && path[1] == ':')
         path += "\\";
 #endif
 
       return octave_chdir_wrapper (path.c_str ());
     }
-
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-
-    // FIXME: this function could be combined with octave_popen2 in
-    // liboctave/wrappers/octave-popen2.c.
-
-    pid_t
-    win_popen2 (const std::string& cmd, const string_vector& args,
-                bool sync_mode, int *fildes, std::string& msg)
-    {
-      pid_t pid;
-      PROCESS_INFORMATION pi;
-      STARTUPINFO si;
-      std::string command = "\"" + cmd + "\"";
-      HANDLE hProcess = GetCurrentProcess ();
-      HANDLE childRead, childWrite, parentRead, parentWrite;
-      DWORD pipeMode;
-
-      ZeroMemory (&pi, sizeof (pi));
-      ZeroMemory (&si, sizeof (si));
-      si.cb = sizeof (si);
-
-      if (! CreatePipe (&childRead, &parentWrite, 0, 0)
-          || ! DuplicateHandle (hProcess, childRead, hProcess, &childRead,
-                                0, TRUE,
-                                DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
-        {
-          msg = "popen2: pipe creation failed";
-          return -1;
-        }
-      if (! CreatePipe (&parentRead, &childWrite, 0, 0)
-          || ! DuplicateHandle (hProcess, childWrite, hProcess, &childWrite,
-                                0, TRUE,
-                                DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
-        {
-          msg = "popen2: pipe creation failed";
-          return -1;
-        }
-      if (! sync_mode)
-        {
-          pipeMode = PIPE_NOWAIT;
-          SetNamedPipeHandleState (parentRead, &pipeMode, 0, 0);
-        }
-      fildes[1] = _open_osfhandle (reinterpret_cast<intptr_t> (parentRead),
-                                   _O_RDONLY | _O_BINARY);
-      fildes[0] = _open_osfhandle (reinterpret_cast<intptr_t> (parentWrite),
-                                   _O_WRONLY | _O_BINARY);
-      si.dwFlags |= STARTF_USESTDHANDLES;
-      si.hStdInput = childRead;
-      si.hStdOutput = childWrite;
-      si.hStdError = GetStdHandle (STD_ERROR_HANDLE);
-
-      // Ignore first arg as it is the command
-      for (int k=1; k<args.numel (); k++)
-        command += " \"" + args[k] + "\"";
-      OCTAVE_LOCAL_BUFFER (char, c_command, command.length () + 1);
-      strcpy (c_command, command.c_str ());
-      if (! CreateProcess (0, c_command, 0, 0, TRUE, 0, 0, 0, &si, &pi))
-        {
-          msg = "popen2: process creation failed";
-          return -1;
-        }
-      pid = pi.dwProcessId;
-
-      CloseHandle (childRead);
-      CloseHandle (childWrite);
-      CloseHandle (pi.hProcess);
-      CloseHandle (pi.hThread);
-
-      return pid;
-    }
-
-#endif
-
   }
 }
diff --git a/liboctave/system/lo-sysdep.h b/liboctave/system/lo-sysdep.h
--- a/liboctave/system/lo-sysdep.h
+++ b/liboctave/system/lo-sysdep.h
@@ -22,43 +22,35 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_lo_sysdep_h)
 #define octave_lo_sysdep_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
+#include <sys/types.h>
+
 #include "lo-ieee.h"
 
 class string_vector;
 
 namespace octave
 {
   namespace sys
   {
     extern std::string getcwd (void);
 
     extern int chdir (const std::string&);
-
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-    extern pid_t win_popen2 (const std::string&, const string_vector&,
-                             bool, int *, std::string&);
-#endif
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::sys::getcwd' instead")
 const auto octave_getcwd = octave::sys::getcwd;
 
 OCTAVE_DEPRECATED ("use 'octave::sys::chdir' instead")
 const auto octave_chdir = octave::sys::chdir;
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
-const auto octave_popen2 = octave::sys::win_popen2;
 #endif
 
 #endif
-
-#endif
diff --git a/liboctave/system/oct-syscalls.cc b/liboctave/system/oct-syscalls.cc
--- a/liboctave/system/oct-syscalls.cc
+++ b/liboctave/system/oct-syscalls.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <ctime>
 #include <cerrno>
 #include <cstdlib>
 #include <cstring>
 
 #include "fcntl-wrappers.h"
 #include "lo-utils.h"
 #include "lo-sysdep.h"
 #include "oct-syscalls.h"
@@ -334,33 +335,28 @@ namespace octave
                                        interactive);
     }
 
     pid_t
     popen2 (const std::string& cmd, const string_vector& args,
             bool sync_mode, int *fildes, std::string& msg,
             bool & /* interactive */)
     {
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-      // FIXME: this function could be combined with octave_popen2 in
-      // liboctave/wrappers/octave-popen2.c.
+      char **argv = args.c_str_vec ();
+      const char *errmsg;
 
-      return octave::sys::win_popen2 (cmd, args, sync_mode, fildes, msg);
-#else
-      char **argv = args.c_str_vec ();
-
-      pid_t pid = octave_popen2 (cmd.c_str (), argv, sync_mode, fildes);
+      pid_t pid = octave_popen2 (cmd.c_str (), argv, sync_mode, fildes,
+                                 &errmsg);
 
       string_vector::delete_c_str_vec (argv);
 
       if (pid < 0)
-        msg = std::strerror (errno);
+        msg = errmsg;
 
       return pid;
-#endif
     }
 
     int
     fcntl (int fd, int cmd, long arg)
     {
       std::string msg;
       return octave::sys::fcntl (fd, cmd, arg, msg);
     }
diff --git a/liboctave/system/oct-syscalls.h b/liboctave/system/oct-syscalls.h
--- a/liboctave/system/oct-syscalls.h
+++ b/liboctave/system/oct-syscalls.h
@@ -102,10 +102,38 @@ namespace octave
     popen2 (const std::string&, const string_vector&, bool, int *,
             std::string&, bool &interactive);
 
     extern OCTAVE_API int fcntl (int, int, long);
     extern OCTAVE_API int fcntl (int, int, long, std::string&);
   }
 }
 
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+inline pid_t
+octave_popen2 (const std::string& cmd, const string_vector& args,
+               bool sync_mode, int *filedes)
+{
+  return octave::sys::popen2 (cmd, args, sync_mode, filedes);
+}
+
+OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+inline pid_t
+popen2 (const std::string& cmd, const string_vector& args,
+        bool sync_mode, int *filedes, std::string& msg)
+{
+  return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg);
+}
+
+OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+inline pid_t
+popen2 (const std::string& cmd, const string_vector& args,
+        bool sync_mode, int *filedes, std::string& msg, bool &interactive)
+{
+  return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg, interactive);
+}
+
 #endif
 
+#endif
+
diff --git a/liboctave/wrappers/fcntl-wrappers.h b/liboctave/wrappers/fcntl-wrappers.h
--- a/liboctave/wrappers/fcntl-wrappers.h
+++ b/liboctave/wrappers/fcntl-wrappers.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if ! defined (octave_fcntl_wrappers_h)
 #define octave_fcntl_wrappers_h 1
 
+#include <sys/types.h>
+
 #if defined __cplusplus
 extern "C" {
 #endif
 
 extern int octave_fcntl_wrapper (int fd, int cmd, int arg);
 
 extern int octave_open_wrapper (const char *nm, int flags, mode_t mode);
 
diff --git a/liboctave/wrappers/octave-popen2.c b/liboctave/wrappers/octave-popen2.c
--- a/liboctave/wrappers/octave-popen2.c
+++ b/liboctave/wrappers/octave-popen2.c
@@ -29,39 +29,159 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
-
-#include <fcntl.h>
+#include <string.h>
 
-#include <sys/types.h>
-#include <unistd.h>
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#  include <fcntl.h>
+#  include <io.h>
+#  define WIN32_LEAN_AND_MEAN 1
+#  include <windows.h>
+#else
+#  include <errno.h>
+#  include <fcntl.h>
+#  include <sys/types.h>
+#  include <unistd.h>
+#endif
 
 #include "octave-popen2.h"
 
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+
+static char *
+make_command_string (const char *cmd, char *const *args)
+{
+  char *const *argp;
+  size_t cmd_len;
+  char *command;
+
+  // Count Command length, quotes, and terminating NUL character.
+  cmd_len = strlen (cmd) + 3;
+
+  // Count argument length, space, and quotes.
+  // Ignore first arg as it is the command.
+  argp = args;
+  while (*++argp)
+    cmd_len += strlen (*argp) + 3;
+
+  command = (char *) malloc (cmd_len);
+
+  sprintf (command, "\"%s\"", cmd);
+
+  argp = args;
+  while (*++argp)
+    sprintf (command, "%s \"%s\"", command, *argp);
+
+  return command;
+}
+
 pid_t
-octave_popen2 (const char *cmd, char *const *args, bool sync_mode, int *fildes)
+octave_popen2 (const char *cmd, char *const *args, bool sync_mode,
+               int *fildes, const char **errmsg)
+{
+  pid_t pid;
+
+  char *command;
+  bool status;
+
+  PROCESS_INFORMATION pi;
+  STARTUPINFO si;
+
+  HANDLE hProcess = GetCurrentProcess ();
+  HANDLE childRead, childWrite, parentRead, parentWrite;
+  DWORD pipeMode;
+
+  ZeroMemory (&pi, sizeof (pi));
+  ZeroMemory (&si, sizeof (si));
+  si.cb = sizeof (si);
+
+  if (! CreatePipe (&childRead, &parentWrite, 0, 0)
+      || ! DuplicateHandle (hProcess, childRead, hProcess, &childRead,
+                            0, TRUE,
+                            DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
+    {
+      *errmsg = "popen2: pipe creation failed";
+      return -1;
+    }
+
+  if (! CreatePipe (&parentRead, &childWrite, 0, 0)
+      || ! DuplicateHandle (hProcess, childWrite, hProcess, &childWrite,
+                            0, TRUE,
+                            DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
+    {
+      *errmsg = "popen2: pipe creation failed";
+      return -1;
+    }
+
+  if (! sync_mode)
+    {
+      pipeMode = PIPE_NOWAIT;
+      SetNamedPipeHandleState (parentRead, &pipeMode, 0, 0);
+    }
+
+  fildes[1] = _open_osfhandle ((intptr_t) parentRead, _O_RDONLY | _O_BINARY);
+  fildes[0] = _open_osfhandle ((intptr_t) parentWrite, _O_WRONLY | _O_BINARY);
+
+  si.dwFlags |= STARTF_USESTDHANDLES;
+
+  si.hStdInput = childRead;
+  si.hStdOutput = childWrite;
+  si.hStdError = GetStdHandle (STD_ERROR_HANDLE);
+
+  command = make_command_string (cmd, args);
+
+  status = CreateProcess (0, command, 0, 0, TRUE, 0, 0, 0, &si, &pi);
+
+  free (command);
+
+  if (! status)
+    {
+      *errmsg = "popen2: process creation failed";
+      return -1;
+    }
+
+  pid = pi.dwProcessId;
+
+  CloseHandle (childRead);
+  CloseHandle (childWrite);
+
+  CloseHandle (pi.hProcess);
+  CloseHandle (pi.hThread);
+
+  return pid;
+}
+
+#else
+
+pid_t
+octave_popen2 (const char *cmd, char *const *args, bool sync_mode,
+               int *fildes, const char **errmsg)
 {
   pid_t pid;
 
   int child_stdin[2], child_stdout[2];
 
   if (pipe (child_stdin) < 0)
-    return -1;
+    {
+      *errmsg = strerror (errno);
+      return -1;
+    }
 
   if (pipe (child_stdout) < 0)
     {
       close (child_stdin[0]);
       close (child_stdin[1]);
 
+      *errmsg = strerror (errno);
       return -1;
     }
 
   pid = fork ();
 
   if (pid == 0)
     {
       // Child process
@@ -92,21 +212,28 @@ octave_popen2 (const char *cmd, char *co
     {
       // Parent process
 
       close (child_stdin[0]);
       close (child_stdout[1]);
 
 #if defined (F_SETFL) && defined (O_NONBLOCK)
       if (! sync_mode && fcntl (child_stdout[0], F_SETFL, O_NONBLOCK) < 0)
-        return -1;
+        {
+          *errmsg = strerror (errno);
+          return -1;
+        }
       else
 #endif
         {
           fildes[0] = child_stdin[1];
           fildes[1] = child_stdout[0];
 
           return pid;
         }
     }
 
+  *errmsg = "foobar!";
+  *errmsg = strerror (errno);
   return pid;
 }
+
+#endif
diff --git a/liboctave/wrappers/octave-popen2.h b/liboctave/wrappers/octave-popen2.h
--- a/liboctave/wrappers/octave-popen2.h
+++ b/liboctave/wrappers/octave-popen2.h
@@ -24,15 +24,15 @@ along with Octave; see the file COPYING.
 #define octave_octave_popen2_h 1
 
 #if defined __cplusplus
 extern "C" {
 #endif
 
 extern pid_t
 octave_popen2 (const char *cmd, char *const *args, bool sync_mode,
-               int *fildes);
+               int *fildes, const char **errmsg);
 
 #if defined __cplusplus
 }
 #endif
 
 #endif
diff --git a/liboctave/wrappers/signal-wrappers.c b/liboctave/wrappers/signal-wrappers.c
--- a/liboctave/wrappers/signal-wrappers.c
+++ b/liboctave/wrappers/signal-wrappers.c
@@ -40,17 +40,21 @@ along with Octave; see the file COPYING.
 #  include <pthread.h>
 #endif
 
 #include "signal-wrappers.h"
 
 int
 octave_kill_wrapper (pid_t pid, int signum)
 {
+#if defined (HAVE_KILL)
   return kill (pid, signum);
+#else
+  return -1;
+#endif
 }
 
 char *
 octave_strsignal_wrapper (int signum)
 {
   return strsignal (signum);
 }
 
diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -31,16 +31,20 @@ along with Octave; see the file COPYING.
 
 #include <stdio.h>
 
 #include <stdio.h>
 
 #include <sys/types.h>
 #include <unistd.h>
 
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#  include <process.h>
+#endif
+
 #include "unistd-wrappers.h"
 
 int
 octave_access_f_ok (void)
 {
   return F_OK;
 }
 
@@ -91,20 +95,170 @@ octave_ctermid_wrapper (void)
 }
 
 int
 octave_dup2_wrapper (int fd1, int fd2)
 {
   return dup2 (fd1, fd2);
 }
 
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+
+// Adapted from libtool wrapper.
+
+/* Prepares an argument vector before calling spawn().
+
+   Note that spawn() does not by itself call the command interpreter
+     (getenv ("COMSPEC") != NULL ? getenv ("COMSPEC") :
+      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
+         GetVersionEx(&v);
+         v.dwPlatformId == VER_PLATFORM_WIN32_NT;
+      }) ? "cmd.exe" : "command.com").
+
+   Instead it simply concatenates the arguments, separated by ' ', and calls
+   CreateProcess().  We must quote the arguments since Win32 CreateProcess()
+   interprets characters like ' ', '\t', '\\', '"' (but not '<' and '>') in a
+   special way:
+
+   - Space and tab are interpreted as delimiters. They are not treated as
+     delimiters if they are surrounded by double quotes: "...".
+
+   - Unescaped double quotes are removed from the input. Their only effect is
+     that within double quotes, space and tab are treated like normal
+     characters.
+
+   - Backslashes not followed by double quotes are not special.
+
+   - But 2*n+1 backslashes followed by a double quote become
+     n backslashes followed by a double quote (n >= 0):
+       \" -> "
+       \\\" -> \"
+       \\\\\" -> \\"
+ */
+
+#define SHELL_SPECIAL_CHARS \
+  "\"\\ \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
+
+#define SHELL_SPACE_CHARS \
+  " \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
+
+static char **
+prepare_spawn (char **argv)
+{
+  size_t argc;
+  char **new_argv;
+  size_t i;
+
+  /* Count number of arguments.  */
+  for (argc = 0; argv[argc] != NULL; argc++)
+    ;
+
+  /* Allocate new argument vector.  */
+  new_argv = (char **) malloc (argc + 1);
+
+  /* Put quoted arguments into the new argument vector.  */
+  for (i = 0; i < argc; i++)
+    {
+      const char *string = argv[i];
+
+      if (string[0] == '\0')
+        new_argv[i] = strdup ("\"\"");
+      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)
+        {
+          int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);
+          size_t length;
+          unsigned int backslashes;
+          const char *s;
+          char *quoted_string;
+          char *p;
+
+          length = 0;
+          backslashes = 0;
+          if (quote_around)
+            length++;
+          for (s = string; *s != '\0'; s++)
+            {
+              char c = *s;
+              if (c == '"')
+                length += backslashes + 1;
+              length++;
+              if (c == '\\')
+                backslashes++;
+              else
+                backslashes = 0;
+            }
+          if (quote_around)
+            length += backslashes + 1;
+
+          quoted_string = (char *) malloc (length + 1);
+
+          p = quoted_string;
+          backslashes = 0;
+          if (quote_around)
+            *p++ = '"';
+          for (s = string; *s != '\0'; s++)
+            {
+              char c = *s;
+              if (c == '"')
+                {
+                  unsigned int j;
+                  for (j = backslashes + 1; j > 0; j--)
+                    *p++ = '\\';
+                }
+              *p++ = c;
+              if (c == '\\')
+                backslashes++;
+              else
+                backslashes = 0;
+            }
+          if (quote_around)
+            {
+              unsigned int j;
+              for (j = backslashes; j > 0; j--)
+                *p++ = '\\';
+              *p++ = '"';
+            }
+          *p = '\0';
+
+          new_argv[i] = quoted_string;
+        }
+      else
+        new_argv[i] = strdup (string);
+    }
+
+  new_argv[argc] = NULL;
+
+  return new_argv;
+}
+
+#endif
+
 int
 octave_execv_wrapper (const char *file, char *const *argv)
 {
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+
+  char **sanitized_argv = prepare_spawn (argv);
+
+  int status = spawnv (P_OVERLAY, file, sanitized_argv);
+
+  // This only happens if spawnv fails.
+
+  char **p = sanitized_argv;
+  while (*p)
+    free (*p++);
+  free (sanitized_argv);
+
+  return status;
+
+#else
+
   return execv (file, argv);
+
+#endif
 }
 
 int
 octave_execvp_wrapper (const char *file, char *const *argv)
 {
   return execvp (file, argv);
 }
 
@@ -128,59 +282,87 @@ char *
 octave_getcwd_wrapper (char *nm, size_t len)
 {
   return getcwd (nm, len);
 }
 
 gid_t
 octave_getegid_wrapper (void)
 {
+#if defined (HAVE_GETEGID)
   return getegid ();
+#else
+  return -1;
+#endif
 }
 
 uid_t
 octave_geteuid_wrapper (void)
 {
+#if defined (HAVE_GETEUID)
   return geteuid ();
+#else
+  return -1;
+#endif
 }
 
 gid_t
 octave_getgid_wrapper (void)
 {
+#if defined (HAVE_GETGID)
   return getgid ();
+#else
+  return -1;
+#endif
 }
 
 int
 octave_gethostname_wrapper (char *nm, size_t len)
 {
   return gethostname (nm, len);
 }
 
 pid_t
 octave_getpgrp_wrapper (void)
 {
+#if defined (HAVE_GETPGRP)
   return getpgrp ();
+#else
+  return -1;
+#endif
 }
 
 pid_t
 octave_getpid_wrapper (void)
 {
+#if defined (HAVE_GETPID)
   return getpid ();
+#else
+  return -1;
+#endif
 }
 
 pid_t
 octave_getppid_wrapper (void)
 {
+#if defined (HAVE_GETPPID)
   return getppid ();
+#else
+  return -1;
+#endif
 }
 
 uid_t
 octave_getuid_wrapper (void)
 {
+#if defined (HAVE_GETUID)
   return getuid ();
+#else
+  return -1;
+#endif
 }
 
 int
 octave_isatty_wrapper (int fd)
 {
   return isatty (fd);
 }
 
@@ -200,17 +382,21 @@ int
 octave_rmdir_wrapper (const char *nm)
 {
   return rmdir (nm);
 }
 
 pid_t
 octave_setsid_wrapper (void)
 {
+#if defined (HAVE_SETSID)
   return setsid ();
+#else
+  return -1;
+#endif
 }
 
 int
 octave_stdin_fileno (void)
 {
   return STDIN_FILENO;
 }
 
diff --git a/liboctave/wrappers/unistd-wrappers.h b/liboctave/wrappers/unistd-wrappers.h
--- a/liboctave/wrappers/unistd-wrappers.h
+++ b/liboctave/wrappers/unistd-wrappers.h
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_unistd_wrappers_h)
 #define octave_unistd_wrappers_h 1
 
 #if ! defined (__cplusplus)
 #  include <stdbool.h>
 #endif
 
+#include <sys/types.h>
+
 #if defined __cplusplus
 extern "C" {
 #endif
 
 extern int octave_access_f_ok (void);
 
 extern int octave_access_r_ok (void);
 
diff --git a/liboctave/wrappers/wait-wrappers.c b/liboctave/wrappers/wait-wrappers.c
--- a/liboctave/wrappers/wait-wrappers.c
+++ b/liboctave/wrappers/wait-wrappers.c
@@ -59,16 +59,20 @@ octave_wcontinue_wrapper (void)
 }
 
 int
 octave_wcoredump_wrapper (int status)
 {
   return WCOREDUMP (status);
 }
 
+#if ! defined (WIFCONTINUED)
+#  define WIFCONTINUED(x) false
+#endif
+
 bool
 octave_wifcontinued_wrapper (int status)
 {
   return WIFCONTINUED (status);
 }
 
 bool
 octave_wifexited_wrapper (int status)
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -184,147 +184,24 @@ get_octave_archlibdir (void)
   // the one originally configured.
 
   std::string dir = octave_getenv ("OCTAVE_ARCHLIBDIR");
 
   return dir.empty () ? subst_octave_home (std::string (OCTAVE_ARCHLIBDIR))
                       : dir;
 }
 
-// Adapted from libtool wrapper.
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-
-/* Prepares an argument vector before calling spawn().
-   Note that spawn() does not by itself call the command interpreter
-     (getenv ("COMSPEC") != NULL ? getenv ("COMSPEC") :
-      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
-         GetVersionEx(&v);
-         v.dwPlatformId == VER_PLATFORM_WIN32_NT;
-      }) ? "cmd.exe" : "command.com").
-   Instead it simply concatenates the arguments, separated by ' ', and calls
-   CreateProcess().  We must quote the arguments since Win32 CreateProcess()
-   interprets characters like ' ', '\t', '\\', '"' (but not '<' and '>') in a
-   special way:
-   - Space and tab are interpreted as delimiters. They are not treated as
-     delimiters if they are surrounded by double quotes: "...".
-   - Unescaped double quotes are removed from the input. Their only effect is
-     that within double quotes, space and tab are treated like normal
-     characters.
-   - Backslashes not followed by double quotes are not special.
-   - But 2*n+1 backslashes followed by a double quote become
-     n backslashes followed by a double quote (n >= 0):
-       \" -> "
-       \\\" -> \"
-       \\\\\" -> \\"
- */
-#define SHELL_SPECIAL_CHARS "\"\\ \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
-#define SHELL_SPACE_CHARS " \001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037"
-char **
-prepare_spawn (char **argv)
-{
-  size_t argc;
-  char **new_argv;
-  size_t i;
-
-  /* Count number of arguments.  */
-  for (argc = 0; argv[argc] != NULL; argc++)
-    ;
-
-  /* Allocate new argument vector.  */
-  new_argv = new char* [argc + 1];
-
-  /* Put quoted arguments into the new argument vector.  */
-  for (i = 0; i < argc; i++)
-    {
-      const char *string = argv[i];
-
-      if (string[0] == '\0')
-        new_argv[i] = octave_strdup_wrapper ("\"\"");
-      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)
-        {
-          int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);
-          size_t length;
-          unsigned int backslashes;
-          const char *s;
-          char *quoted_string;
-          char *p;
-
-          length = 0;
-          backslashes = 0;
-          if (quote_around)
-            length++;
-          for (s = string; *s != '\0'; s++)
-            {
-              char c = *s;
-              if (c == '"')
-                length += backslashes + 1;
-              length++;
-              if (c == '\\')
-                backslashes++;
-              else
-                backslashes = 0;
-            }
-          if (quote_around)
-            length += backslashes + 1;
-
-          quoted_string = new char [length + 1];
-
-          p = quoted_string;
-          backslashes = 0;
-          if (quote_around)
-            *p++ = '"';
-          for (s = string; *s != '\0'; s++)
-            {
-              char c = *s;
-              if (c == '"')
-                {
-                  unsigned int j;
-                  for (j = backslashes + 1; j > 0; j--)
-                    *p++ = '\\';
-                }
-              *p++ = c;
-              if (c == '\\')
-                backslashes++;
-              else
-                backslashes = 0;
-            }
-          if (quote_around)
-            {
-              unsigned int j;
-              for (j = backslashes; j > 0; j--)
-                *p++ = '\\';
-              *p++ = '"';
-            }
-          *p = '\0';
-
-          new_argv[i] = quoted_string;
-        }
-      else
-        new_argv[i] = (char *) string;
-    }
-  new_argv[argc] = NULL;
-
-  return new_argv;
-}
-
-#endif
-
 static int
 octave_exec (const std::string& file, char **argv)
 {
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-  argv = prepare_spawn (argv);
-  return _spawnv (_P_WAIT, file.c_str (), argv);
-#else
-  octave_execv_wrapper (file.c_str (), argv);
+  int status = octave_execv_wrapper (file.c_str (), argv);
 
-  std::cerr << "octave: failed to exec '" << file << "'" << std::endl;
+  std::cerr << argv[0] << ": failed to exec '" << file << "'" << std::endl;
 
-  return 1;
-#endif
+  return status;
 }
 
 static char *
 strsave (const char *s)
 {
   if (! s)
     return 0;
 
@@ -503,22 +380,30 @@ main (int argc, char **argv)
                   std::cerr << "octave exited with signal "
                             << octave_wtermsig_wrapper (status) << std::endl;
                   break;
                 }
             }
         }
     }
   else
-    retval = octave_exec (file, new_argv);
+    {
+      retval = octave_exec (file, new_argv);
+
+      if (retval < 0)
+        std::cerr << argv[0] << ": " << std::strerror (errno) << std::endl;
+    }
 
 #else
 
   retval = octave_exec (file, new_argv);
 
+  if (retval < 0)
+    std::cerr << argv[0] << ": " << std::strerror (errno) << std::endl;
+
 #endif
 
   return retval;
 }
 
 /*!
 @mainpage Source code documentation for GNU Octave
 
