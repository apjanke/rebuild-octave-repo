# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1301628246 25200
#      Thu Mar 31 20:24:06 2011 -0700
# Node ID d6ad4ed57dda75604b46efd868ba39516d385b96
# Parent  a12d7f53c2ab32cf436e4e8f0a2584c67e0a0ab5
Add onCleanup function to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-03-31  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/errors.txi, interpreter/octave.texi: Add onCleanup
+	function to documentation.
+
 2011-03-31  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/contrib.txi: Add recommended format for commit messages
 	which reference the bug tracker.
 
 2011-03-28  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/expr.txi: Eliminate space between variable and
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -44,16 +44,17 @@ input arguments.
 Since an error can occur during the evaluation of a program, it is
 very convenient to be able to detect that an error occurred, so that
 the error can be fixed.  This is possible with the @code{try} statement
 described in @ref{The @code{try} Statement}.
 
 @menu
 * Raising Errors::
 * Catching Errors::
+* Recovering From Errors::
 @end menu
 
 @node Raising Errors
 @subsection Raising Errors
 
 The most common use of errors is for checking input arguments to
 functions.  The following example calls the @code{error} function if
 the function @code{f} is called without any input arguments.
@@ -207,16 +208,48 @@ endfor
 @DOCSTRING(rethrow)
 
 @c FIXME: I have no idea what the rest of the functions are used for...
 
 @DOCSTRING(errno)
 
 @DOCSTRING(errno_list)
 
+@node Recovering From Errors
+@subsection Recovering From Errors
+
+Octave provides several ways of recovering from errors.  There are
+@code{try}/@code{catch} blocks, 
+@code{unwind_protect}/@code{unwind_protect_cleanup} blocks, 
+and finally the @code{onCleanup} command.
+
+The @code{onCleanup} command associates an ordinary Octave variable (the
+trigger) with an arbitrary function (the action).  Whenever the Octave variable
+ceases to exist---whether due to a function return, an error, or simply because
+the variable has been removed with @code{clear}---then the assigned function
+is executed.
+
+The function can do anything necessary for cleanup such as closing open file
+handles, printing an error message, or restoring global variables to their
+initial values.  The last example is a very convenient idiom for Octave code.
+For example:
+
+@example
+@group
+function rand42
+  old_state = rand ('state');
+  restore_state = onCleanup (@@() rand ('state', old_state);
+  rand ('state', 42);
+  @dots{}
+endfunction  # rand generator state restored by onCleanup
+@end group
+@end example
+
+@DOCSTRING(onCleanup)
+
 @node Handling Warnings
 @section Handling Warnings
 
 Like an error, a warning is issued when something unexpected happens.
 Unlike an error, a warning doesn't abort the currently running program.
 A simple example of a warning is when a number is divided by zero.  In
 this case Octave will issue a warning and assign the value @code{Inf}
 to the result.
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -438,16 +438,17 @@ Errors and Warnings
 
 * Handling Errors::
 * Handling Warnings::
 
 Handling Errors
 
 * Raising Errors::
 * Catching Errors::
+* Recovering From Errors::
 
 Handling Warnings
 
 * Issuing Warnings::
 * Enabling and Disabling Warnings::
 
 Debugging
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-03-31  Rik  <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/onCleanup.cc: Remove non-existent @seealso link in
+	docstring.
+
 2011-03-31  Rik  <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/quadcc.cc: Add reference to original paper in docstring.
 
 2011-03-30  Jordi Guti√©rrez Hermoso  <jordigh@gmail.com>
 
 	* file-io.cc: Document the "all" parameter to fclose.
 
diff --git a/src/DLD-FUNCTIONS/onCleanup.cc b/src/DLD-FUNCTIONS/onCleanup.cc
--- a/src/DLD-FUNCTIONS/onCleanup.cc
+++ b/src/DLD-FUNCTIONS/onCleanup.cc
@@ -252,17 +252,17 @@ octave_oncleanup::print_raw (std::ostrea
 DEFUN_DLD (onCleanup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{c} =} onCleanup (@var{action})\n\
 Create a special object that executes a given function upon destruction.\n\
 If the object is copied to multiple variables (or cell or struct array\n\
 elements) or returned from a function, @var{action} will be executed after\n\
 clearing the last copy of the object.  Note that if multiple local onCleanup\n\
 variables are created, the order in which they are called is unspecified.\n\
-@seealso{unwind_protect}\n\
+For similar functionality @xref{The @code{unwind_protect} Statement}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       if (octave_oncleanup::static_type_id () < 0)
         octave_oncleanup::register_type ();
