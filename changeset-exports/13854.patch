# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1320911140 18000
#      Thu Nov 10 02:45:40 2011 -0500
# Node ID a09958da79b83ec52d68e86e15e6c6bb7fd7cf79
# Parent  ef7bf5af9faf00fba90dad4f11bfb6bb1d85f460
* narginchk.m: Style and doc fixes.

diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -13,51 +13,44 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} narginchk (@var{minargs}, @var{maxargs})
-## Check for correct number of arguments.
-##
-## This function returns an error unless the number of arguments in its caller
-## is between the values of @var{minargs} and @var{maxargs}. It does nothing
-## otherwise.
+## Check for correct number of arguments or generate an error message if
+## the number of arguments in the calling function is outside the range
+## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
 ##
-## Both @var{minargs} and @var{maxargs} need to be a numeric scalar. Zero, Inf
-## and negative are all valid, and they can have the same value.
+## Both @var{minargs} and @var{maxargs} need to be scalar numeric
+## values.  Zero, Inf and negative values are all allowed, and
+## @var{minargs} and @var{maxargs} may be equal.
 ##
-## Note that this function evaluates the value of @code{nargin} on the caller so
-## its value must have not been tampered with.
+## Note that this function evaluates @code{nargin} on the caller.
 ##
 ## @seealso{nargchk, nargoutchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: CarnÃ« Draug <carandraug+dev@gmail.com>
 
 function narginchk (minargs, maxargs)
 
-  ## it requires always two arguments (can't specify only min)
-  ## zero, negative and inf are all valid arguments and they can be equal
-  ## thanks to Oldak in ##matlab for the help in checking these corner cases
-  ## tested compatibility in version 2011b
-
   if (nargin != 2)
     print_usage;
   elseif (!isnumeric (minargs) || !isscalar (minargs))
     error ("minargs must be a numeric scalar");
   elseif (!isnumeric (maxargs) || !isscalar (maxargs))
     error ("maxargs must be a numeric scalar");
   elseif (minargs > maxargs)
     error ("minargs cannot be larger than maxargs")
   endif
 
   args = evalin ("caller", "nargin;");
 
   if (args < minargs)
-    error ("Not enough input arguments.");
+    error ("not enough input arguments");
   elseif (args > maxargs)
-    error ("Too many input arguments.");
+    error ("too many input arguments");
   endif
 
 endfunction
