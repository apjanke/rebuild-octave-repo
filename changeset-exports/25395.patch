# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526686284 14400
#      Fri May 18 19:31:24 2018 -0400
# Node ID a656665b671dee200641a91ee9fe106c58c8f728
# Parent  b860a7e526cf9fe7ddcfa53c868cf7b494650527
# Parent  9e39a53b4e007d3f79f88b711ab9fa5f2f24fbc9
maint: Merge stable to default.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -482,26 +482,29 @@ namespace octave
   string_vector help_system::local_functions (void) const
   {
     string_vector retval;
 
     call_stack& cs = m_interpreter.get_call_stack ();
 
     octave_user_code *curr_fcn = cs.caller_user_code ();
 
+    if (! curr_fcn)
+      return retval;
+
     // All subfunctions are listed in the top-level function of this file.
-    while (curr_fcn && curr_fcn->is_subfunction ())
+    // If curr_fcn is a subfunction, then there must be a parent and
+    // curr_fcn will always be valid in and after executing this loop.
+
+    while (curr_fcn->is_subfunction ())
       {
         symbol_scope pscope = curr_fcn->parent_fcn_scope ();
         curr_fcn = pscope.function ();
       }
 
-    if (! curr_fcn)
-      return retval;
-
     // Get subfunctions.
     const std::list<std::string> names = curr_fcn->subfunction_names ();
 
     size_t sz = names.size ();
     retval.resize (sz);
 
     // Loop over them.
     size_t i = 0;
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -262,16 +262,21 @@ public:
   void stash_leading_comment (octave::comment_list *lc) { lead_comm = lc; }
 
   void stash_trailing_comment (octave::comment_list *tc) { trail_comm = tc; }
 
   std::string profiler_name (void) const;
 
   std::string parent_fcn_name (void) const { return parent_name; }
 
+  octave::symbol_scope parent_fcn_scope (void) const
+  {
+    return m_scope.parent_scope ();
+  }
+
   void mark_as_system_fcn_file (void);
 
   bool is_system_fcn_file (void) const { return system_fcn_file; }
 
   bool is_user_function (void) const { return true; }
 
   void erase_subfunctions (void);
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3394,26 +3394,16 @@ namespace octave
         fcn->stash_fcn_file_time (now);
         fcn->stash_dir_name (m_lexer.m_dir_name);
         fcn->stash_package_name (m_lexer.m_package_name);
         fcn->mark_as_system_fcn_file ();
 
         if (m_fcn_file_from_relative_lookup)
           fcn->mark_relative ();
 
-        if (m_curr_fcn_depth > 1 || m_parsing_subfunctions)
-          {
-            fcn->stash_parent_fcn_name (m_lexer.m_fcn_file_name);
-
-            if (m_curr_fcn_depth > 1)
-              fcn->stash_parent_fcn_scope (m_function_scopes.parent_scope ());
-            else
-              fcn->stash_parent_fcn_scope (m_primary_fcn_scope);
-          }
-
         if (m_lexer.m_parsing_class_method)
           {
             if (m_curr_class_name == id_name)
               fcn->mark_as_class_constructor ();
             else
               fcn->mark_as_class_method ();
 
             fcn->stash_dispatch_class (m_curr_class_name);
@@ -3489,16 +3479,17 @@ namespace octave
         if (lc)
           fcn->stash_leading_comment (lc);
 
         fcn->define_ret_list (ret_list);
 
         if (m_curr_fcn_depth > 1 || m_parsing_subfunctions)
           {
             fcn->stash_fcn_location (l, c);
+            fcn->stash_parent_fcn_name (m_lexer.m_fcn_file_name);
 
             octave_value ov_fcn (fcn);
 
             if (m_endfunction_found && m_function_scopes.size () > 1)
               {
                 fcn->mark_as_nested_function ();
                 fcn_scope.mark_nested ();
 
