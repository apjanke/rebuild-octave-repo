# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1371906833 -7200
#      Sat Jun 22 15:13:53 2013 +0200
# Node ID 617a6e5a974ab8158e4cc411495b1fd6babddb93
# Parent  f4eef73b6e90a2fb021def3d27cbd6762a9ebdc5
Partially undo the changeset 8fce0ed4894a as sparse specialized version of is_empty can be used in all cases.

diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -273,25 +273,16 @@ octave_base_sparse<T>::is_true (void) co
       retval = t2(0);
     }
 
   return retval;
 }
 
 template <class T>
 bool
-octave_base_sparse<T>::is_empty (void) const
-{
-  dim_vector dv = dims ();
-
-  return (dv.any_zero ());
-}
-
-template <class T>
-bool
 octave_base_sparse<T>::print_as_scalar (void) const
 {
   dim_vector dv = dims ();
 
   return (dv.all_ones () || dv.any_zero ());
 }
 
 template <class T>
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -134,18 +134,16 @@ octave_base_sparse : public octave_base_
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_sparse_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
-  bool is_empty (void) const;
-
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
   octave_idx_type capacity (void) const { return matrix.capacity (); }
 
   bool print_as_scalar (void) const;
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -326,17 +326,17 @@ public:
   virtual octave_value resize (const dim_vector&, bool fill = false) const;
 
   virtual MatrixType matrix_type (void) const;
 
   virtual MatrixType matrix_type (const MatrixType& typ) const;
 
   virtual bool is_defined (void) const { return false; }
 
-  virtual bool is_empty (void) const { return numel () == 0; }
+  bool is_empty (void) const { return (dims ().any_zero ()); }
 
   virtual bool is_cell (void) const { return false; }
 
   virtual bool is_cellstr (void) const { return false; }
 
   virtual bool is_real_scalar (void) const { return false; }
 
   virtual bool is_real_matrix (void) const { return false; }
