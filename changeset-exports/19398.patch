# HG changeset patch
# User Rik <rik@octave.org>
# Date 1418524863 28800
#      Sat Dec 13 18:41:03 2014 -0800
# Node ID 9e5b64b3c1fe59eb05d5717209b570070b7dc6af
# Parent  50d4fd16fb3a1f0ef7205303cfe344d81fcbd4d2
Fix up documentation for new disable_[range,diagonal_matrix,permutation_matrix] fcns.

* NEWS: Announce new functions disable_range, disable_diagonal_matrix,
disable_permutation_matrix.

* diagperm.txi: Add example showing space savings from using
disable_diagonal_matrix.

* ov.cc(Fdisable_range): Correct docstring which had cut-and-paste error
documenting disable_permutation_matrix instead.  Add seealso links to
other disable_xxx functions.
* ov.cc(Fdisable_diagonal_matrix, Fdisable_permutation_matrix): Add seealso
links to other disable_xxx functions.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -12,16 +12,29 @@ Summary of important user-visible change
       events        endevents
       methods       endmethods
       properties    endproperties
 
  ** New classes in Octave 4.2:
 
       inputParser
 
+ ** Optional stricter Matlab compatibility for ranges, diagonal matrices,
+    and permutation matrices.
+
+    Octave has internal optimizations which use space-efficient storage
+    for the three data types above.  Three new functions have been added
+    which control whether the optimizations are used (default), or whether
+    the data types are stored as full matrices.
+
+    disable_range   disable_diagonal_matrix   disable_permutation_matrix
+
+    All three optimizations are disabled if Octave is started with the
+    --braindead command line option.
+
  ** Interpolation function changes for Matlab compatibility
 
     The interpolation method 'cubic' is now equivalent to 'pchip'
     for interp1, interp2, and interp3.  Previously, 'cubic' was equivalent
     to 'spline' for interp2.  This may produce different results as 'spline'
     has continuous 1st and 2nd derivatives while 'pchip' only has a continuous
     1st derivative.  The methods 'next' and 'previous' have been added to
     interp1 for compatibility.
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -54,23 +54,36 @@ is, there exists a permutation (vector)
 @ifnottex
 @code{p} such that @code{P(i,j) == 1} if @code{j == p(i)} and 
 @code{P(i,j) == 0} otherwise.  
 @end ifnottex
 
 Octave provides special treatment of real and complex rectangular diagonal
 matrices, as well as permutation matrices.  They are stored as special objects,
 using efficient storage and algorithms, facilitating writing both readable and
-efficient matrix algebra expressions in the Octave language.  The
-special treatment may be disabled by using the functions
-@dfn{disable_permutation_matrix} and @dfn{disable_diagonal_matrix}
+efficient matrix algebra expressions in the Octave language.  The special
+treatment may be disabled by using the functions @dfn{disable_diagonal_matrix}
+and @dfn{disable_permutation_matrix}.
+
+@DOCSTRING(disable_diagonal_matrix)
 
 @DOCSTRING(disable_permutation_matrix)
 
-@DOCSTRING(disable_diagonal_matrix)
+The space savings are significant as demonstrated by the following code.
+
+@example
+@group
+x = diag (rand (10, 1));
+xf = full (x);
+sizeof (x)
+@result{} 80
+sizeof (xf)
+@result{} 800
+@end group
+@end example
 
 @menu
 * Creating Diagonal Matrices::
 * Creating Permutation Matrices::
 * Explicit and Implicit Conversions::
 @end menu
 
 @node Creating Diagonal Matrices
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -3189,16 +3189,17 @@ DEFUN (disable_permutation_matrix, args,
 Query or set the internal variable that controls whether permutation\n\
 matrices are stored in a special space-efficient format.  The default\n\
 value is true.  If this option is disabled Octave will store permutation\n\
 matrices as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
+@seealso{disable_range, disable_diagonal_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_permutation_matrix);
 }
 
 /*
 %!function p = __test_dpm__ (dpm)
 %!  disable_permutation_matrix (dpm, "local");
@@ -3217,16 +3218,17 @@ DEFUN (disable_diagonal_matrix, args, na
 Query or set the internal variable that controls whether diagonal\n\
 matrices are stored in a special space-efficient format.  The default\n\
 value is true.  If this option is disabled Octave will store diagonal\n\
 matrices as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
+@seealso{disable_range, disable_permutation_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_diagonal_matrix);
 }
 
 /*
 %!function [x, xi, fx, fxi] = __test_ddm__ (ddm)
 %!  disable_diagonal_matrix (ddm, "local");
@@ -3251,24 +3253,24 @@ The original variable value is restored 
 %!assert (typeinfo (fxi), "float complex matrix");
 */
 
 DEFUN (disable_range, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} disable_range ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} disable_range (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} disable_range (@var{new_val}, \"local\")\n\
-Query or set the internal variable that controls whether permutation\n\
-matrices are stored in a special space-efficient format.  The default\n\
-value is true.  If this option is disabled Octave will store permutation\n\
-matrices as full matrices.\n\
+Query or set the internal variable that controls whether ranges are stored\n\
+in a special space-efficient format.  The default value is true.  If this\n\
+option is disabled Octave will store ranges as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
+@seealso{disable_diagonal_matrix, disable_permutation_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_range);
 }
 
 /*
 %!function r = __test_dr__ (dr)
 %!  disable_range (dr, "local");
