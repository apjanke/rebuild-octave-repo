# HG changeset patch
# User jwe
# Date 879978903 0
#      Wed Nov 19 22:35:03 1997 +0000
# Node ID a8dcfbf87ea342631d2b2dfcc40bb821b75fcea6
# Parent  21208b7973327e7caf8809b257bb62019b739344
[project @ 1997-11-19 22:34:59 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,30 @@
+Wed Nov 19 01:54:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL): Don't forget
+	to call AC_LANG_RESTORE.
+
+	* acconfig.h: Add undefs for NO_EXTERN_TEMPLATE_DECLS and
+	NEED_TEMPLATE_FCN_SPECS.
+
+	* configure.in (CXX_VERSION): Require 2.7.2 or later.
+	Define NO_EXTERN_TEMPLATE_DECLS and NEED_TEMPLATE_FCN_SPECS if
+	using egcs or 2.8.x or later.
+
+Wed Nov 19 01:38:58 1997  Mumit Khan  <khan@dhaka.xraylith.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL): New macro
+	check for new friend template declaration syntax (guiding
+	declarations in DWP).
+	* configure.in: Use it.
+	* config.h.in: Add undef for CXX_NEW_FRIEND_TEMPLATE_DECL.
+
+	* configure.in (CC_VERSION, CXX_VERISON): Check for egcs snapshots.
+
 Mon Oct 20 01:31:45 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Reprint important warning messages at the end of
 	the run.
 
 Fri Oct 17 04:43:27 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Include the following change from RMS for octave-mode.el:
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -143,16 +143,29 @@ Summary of changes for version 2.1.x:
     following form:
 
       JAC = f (X, T)
 
     where JAC is the Jacobian matrix of partial derivatives of the
     right-hand-side functions that define the set of differential
     equations with respect to the state vector X.
 
+  * Global variables are now initialized to the empty matrix, for
+    compatibility with Matlab.
+
+  * Explicit initialization of global variables only happens once.
+    For example, after the following statements are evaluated, g still
+    has the value 1.
+
+      global g = 1
+      global g = 2
+
+    This is useful for initializing global variables that are used to
+    maintain state information that is shared among several functions.
+
   * Structure elements completion on the command line actually works
     now.
 
   * The new built-in variable `fixed_point_format' controls whether
     Octave uses a scaled fixed-point format for displaying matrices.
     The default value is 0 unless you use --traditional.
 
   * The function sumsq now computes sum (x .* conj (x)) for complex values.
diff --git a/acconfig.h b/acconfig.h
--- a/acconfig.h
+++ b/acconfig.h
@@ -5,16 +5,19 @@
 
    Leave the following blank line there!!  Autoheader needs it.  */
 
 
 /* Define if you want bounds checking on element references for
    internal array and matrix classes. */
 #undef BOUNDS_CHECKING
 
+/* Define if your compiler supports `<>' stuff for template friends. */
+#undef CXX_NEW_FRIEND_TEMPLATE_DECL
+
 /* Define if your math.h declares struct exception for matherr() */
 #undef EXCEPTION_IN_MATH
 
 /* Define if your Fortran compiler appends an underscore to external
    names. */ 
 #undef F77_APPEND_UNDERSCORE
 
 /* Define if your Fortran compiler converts external names to
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -560,8 +560,47 @@ AC_CACHE_VAL(octave_cv_type_$1,
 AC_MSG_RESULT($octave_cv_type_$1)
 ifelse($#, 4, [if test $octave_cv_type_$1 = yes; then
 	AC_DEFINE($4)
 	fi])
 if test $octave_cv_type_$1 = no; then
   AC_DEFINE($1, $3)
 fi
 ])
+dnl
+dnl Check to see if C++ compiler needs the new friend template declaration 
+dnl syntax. 
+dnl
+dnl OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
+AC_DEFUN(OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL, [
+  AC_REQUIRE([AC_PROG_CXX])
+  AC_MSG_CHECKING([for C++ support for new friend template declaration])
+  AC_CACHE_VAL(octave_cv_cxx_new_friend_template_decl, [
+    AC_LANG_SAVE
+    AC_LANG_CPLUSPLUS
+    rm -f conftest.h
+    cat > conftest.h <<EOB
+       struct A {
+	 friend int operator== (const A&, const A&);
+	 A (int) { }
+       };
+
+       template <class T> int
+       operator== (const T&, const T&)
+       {
+	 return 0;
+       }
+EOB
+    AC_TRY_LINK([#include "conftest.h"], [
+        A a (1);
+        return a == A(1);
+      ], 
+      octave_cv_cxx_new_friend_template_decl=no,
+      octave_cv_cxx_new_friend_template_decl=yes,
+      octave_cv_cxx_new_friend_template_decl=yes
+    )
+    AC_LANG_RESTORE
+  ])
+  AC_MSG_RESULT($octave_cv_cxx_new_friend_template_decl)
+  if test $octave_cv_cxx_new_friend_template_decl = yes; then
+    AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL)
+  fi
+])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.286 $)
+AC_REVISION($Revision: 1.287 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -178,73 +178,72 @@ EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_PROG_CXX
 AC_PROG_CXXCPP
 
 ### Do special things for g++.
 
 ADD_CXX_WALL=false
 NO_IMPLICIT_TEMPLATES=
+
 gxx_version=`$CXX -v 2>&1 | grep "^.*g.. version" | \
-  sed -e 's/^.*g.. version *//' -e 's/cygnus-//'`
+  sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//'`
+
 case "$gxx_version" in
 changequote(,)dnl
-  2.[6789].* | 2.[123456789][0123456789].*)
+  1.* | 2.[0123456].* | 2.7.[01]*)
 changequote([,])dnl
+    AC_MSG_ERROR([g++ version $gxx_version will not work to compile Octave])
+  ;;
+  2.7.[23456789]* | 2.7.[123456789][0123456789]*)
     if test -z "$EXTERN_CXXFLAGS"; then
       ADD_CXX_WALL=true
     fi
     NO_IMPLICIT_TEMPLATES="-fno-implicit-templates"
     AC_MSG_RESULT([defining NO_IMPLICIT_TEMPLATES to be $NO_IMPLICIT_TEMPLATES])
   ;;
 changequote(,)dnl
-  1.* | 2.[012345].*)
+  2.[89].* | 2.[123456789][0123456789].*)
 changequote([,])dnl
-    AC_MSG_ERROR([g++ version $gxx_version will not work to compile Octave])
+    if test -z "$EXTERN_CXXFLAGS"; then
+      ADD_CXX_WALL=true
+    fi
+    NO_IMPLICIT_TEMPLATES="-fno-implicit-templates"
+    AC_MSG_RESULT([defining NO_IMPLICIT_TEMPLATES to be $NO_IMPLICIT_TEMPLATES])
   ;;
   *)
     warn_gxx_only="Octave has only been tested with g++, and I can't find it"
     AC_MSG_WARN($warn_gxx_only)
   ;;
 esac
 
-HOST_CXXFLAGS=
-case "$gxx_version" in
-  2.6.*)
-    case "$canonical_host_type" in
-      rs6000-ibm-aix* | powerpc-ibm-aix*)
-        HOST_CXXFLAGS="-Wa,-u"
-        AC_MSG_RESULT([defining HOST_CXXFLAGS to be $HOST_CXXFLAGS])
-      ;;
-    esac
-  ;;
-esac
-
 CXX_VERSION=
 if test -n "$gxx_version"; then
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
 
 AC_SUBST(HOST_CXXFLAGS)
 AC_SUBST(NO_IMPLICIT_TEMPLATES)
 
+OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
+
 ### See which C compiler to use (we expect to find gcc).
 
 EXTERN_CFLAGS="$CFLAGS"
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
 
 ### Do special things for gcc.
 
 ADD_CC_WALL=false
 gcc_version=`$CC -v 2>&1 | grep "^.*gcc version" | \
-  sed -e 's/^.*g.. version *//' -e 's/cygnus-//'`
+  sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//'`
 case "$gcc_version" in
   2.*)
     if test -z "$EXTERN_CFLAGS"; then
       ADD_CC_WALL=true
     fi
     if test -z "$LDFLAGS"; then
       LDFLAGS="-g"
       AC_MSG_RESULT([defining LDFLAGS to be $LDFLAGS])
diff --git a/dlfcn/Makefile.orig b/dlfcn/Makefile.orig
deleted file mode 100644
--- a/dlfcn/Makefile.orig
+++ /dev/null
@@ -1,44 +0,0 @@
-# %W% revision of %E%  %U%
-# This is an unpublished work copyright (c) 1992 HELIOS Software GmbH
-# 30159 Hannover, Germany
-
-# Do not edit at HELIOS, edit GNUmakefile instead!
-
-SHELL=/bin/sh
-IPATH=
-DEFS=
-DEBUGFLAGS=-g -DDEBUG
-NODEBUGFLAGS=-O
-CFLAGS=$(IPATH) $(DEFS) $(NODEBUGFLAGS)
-TARGET=libdl.a
-DEST=/usr/local/lib
-HDRS=dlfcn.h
-SRCS=dlfcn.c
-NOSTART=-e _nostart	# for AIX 3
-#NOSTART=-bnoentry	# for AIX 4
-OBJS=$(SRCS:%.c=%.o)
-
-all:		$(TARGET) dlfcn.c
-
-dlfcn.o:	dlfcn.h
-
-$(TARGET):	$(OBJS) dl.exp
-		$(CC) $(CFLAGS) -o $@ $(OBJS) -bE:dl.exp -bM:SRE $(NOSTART) -lld
-
-lint:
-		lint $(IPATH) $(DEFS) $(SRCS) >lintout
-
-info:
-		sccs info
-
-clean:
-		rm -f lintout a.out core *.o *-lg *% *~ tags deps%
-
-clobber:	clean
-		rm -f $(TARGET) deps
-
-install:	all
-		cp $(TARGETS) $(DEST)
-
-shar:
-		shar README Makefile dlfcn.h dlfcn.c dl.exp >dlfcn.shar
diff --git a/libcruft/Makefile.in b/libcruft/Makefile.in
--- a/libcruft/Makefile.in
+++ b/libcruft/Makefile.in
@@ -25,18 +25,17 @@ INSTALL_DATA = @INSTALL_DATA@
 # configure.in and run autoconf).
 
 CRUFT_DIRS = balgen blas dassl eispack fftpack lapack linpack \
 	minpack misc odepack quadpack ranlib slatec-fn \
 	villad
 
 SUBDIRS = $(CRUFT_DIRS)
 
-DISTFILES = Makefile.in ChangeLog Makerules.in configure.in \
-	$(SOURCES) STOP.patch
+DISTFILES = Makefile.in ChangeLog Makerules.in $(SOURCES) STOP.patch
 
 ifeq ($(SHARED_LIBS), true)
   BINDISTFILES = libcruft.$(SHLEXT_VER)
   BINDISTLIBS = libcruft/libcruft.$(SHLEXT_VER)
 endif
 
 all: $(SUBDIRS) shared-lib
 .PHONY: all
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+Wed Nov 19 02:30:04 1997  Mumit Khan <khan@dhaka.xraylith.wisc.edu>
+
+	Changes to make support egcs snapshots that implement explicit
+	specification of template functions according to CD2.
+
+	* MArray.h: If NEED_TEMPLATE_FCN_SPECS is defined, add explicit
+	template function specs for template friends.
+	* MArray2.h: Likewise.
+	* MDiagArray2.h: Likewise.
+
 Thu Nov 13 21:57:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc (sumsq): Compute equivalent of sum (x .* conj (x))
 
 Thu Oct  2 17:13:02 1997  Mumit Khan  <khan@dhaka.xraylith.wisc.edu>
 
 	* CRowVector.cc (linspace): Removed attempt for implicit conversion 
 	to complex<double>(int) instead of complex<double>(double).
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -25,16 +25,81 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #if !defined (octave_MArray_h)
 #define octave_MArray_h 1
 
 #include "Array.h"
 
+#if defined (LTGT)
+#undef LTGT
+#endif
+
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+#define LTGT
+#else
+
+#define LTGT <>
+
+template <class T> 
+class MArray;
+
+template <typename T> MArray<T>& 
+operator += (MArray<T>& a, const T& s);
+
+template <typename T> MArray<T>& 
+operator -= (MArray<T>& a, const T& s);
+
+template <typename T> MArray<T>& 
+operator += (MArray<T>& a, const MArray<T>& b);
+
+template <typename T> MArray<T>& 
+operator -= (MArray<T>& a, const MArray<T>& b);
+
+template <typename T> MArray<T> 
+operator + (const MArray<T>& a, const T& s);
+
+template <typename T> MArray<T> 
+operator - (const MArray<T>& a, const T& s);
+
+template <typename T> MArray<T> 
+operator * (const MArray<T>& a, const T& s);
+
+template <typename T> MArray<T> 
+operator / (const MArray<T>& a, const T& s);
+
+template <typename T> MArray<T> 
+operator + (const T& s, const MArray<T>& a);
+
+template <typename T> MArray<T> 
+operator - (const T& s, const MArray<T>& a);
+
+template <typename T> MArray<T> 
+operator * (const T& s, const MArray<T>& a);
+
+template <typename T> MArray<T> 
+operator / (const T& s, const MArray<T>& a);
+
+template <typename T> MArray<T> 
+operator + (const MArray<T>& a, const MArray<T>& b);
+
+template <typename T> MArray<T> 
+operator - (const MArray<T>& a, const MArray<T>& b);
+
+template <class T> MArray<T> 
+product (const MArray<T>& a, const MArray<T>& b);
+
+template <typename T> MArray<T> 
+quotient (const MArray<T>& a, const MArray<T>& b);
+
+template <typename T> MArray<T> 
+operator - (const MArray<T>& a);
+#endif
+
 // One dimensional array with math ops.
 
 template <class T>
 class MArray : public Array<T>
 {
 protected:
 
   MArray (T *d, int l) : Array<T> (d, l) { }
@@ -52,54 +117,55 @@ public:
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
   // element by element MArray by scalar ops
 
-  friend MArray<T>& operator += (MArray<T>& a, const T& s);
-  friend MArray<T>& operator -= (MArray<T>& a, const T& s);
+  friend MArray<T>& operator += LTGT (MArray<T>& a, const T& s);
+  friend MArray<T>& operator -= LTGT (MArray<T>& a, const T& s);
 
   // element by element MArray by MArray ops
 
-  friend MArray<T>& operator += (MArray<T>& a, const MArray<T>& b);
-  friend MArray<T>& operator -= (MArray<T>& a, const MArray<T>& b);
+  friend MArray<T>& operator += LTGT (MArray<T>& a, const MArray<T>& b);
+  friend MArray<T>& operator -= LTGT (MArray<T>& a, const MArray<T>& b);
 
   // element by element MArray by scalar ops
 
-  friend MArray<T> operator + (const MArray<T>& a, const T& s);
-  friend MArray<T> operator - (const MArray<T>& a, const T& s);
-  friend MArray<T> operator * (const MArray<T>& a, const T& s);
-  friend MArray<T> operator / (const MArray<T>& a, const T& s);
+  friend MArray<T> operator + LTGT (const MArray<T>& a, const T& s);
+  friend MArray<T> operator - LTGT (const MArray<T>& a, const T& s);
+  friend MArray<T> operator * LTGT (const MArray<T>& a, const T& s);
+  friend MArray<T> operator / LTGT (const MArray<T>& a, const T& s);
 
   // element by element scalar by MArray ops
 
-  friend MArray<T> operator + (const T& s, const MArray<T>& a);
-  friend MArray<T> operator - (const T& s, const MArray<T>& a);
-  friend MArray<T> operator * (const T& s, const MArray<T>& a);
-  friend MArray<T> operator / (const T& s, const MArray<T>& a);
+  friend MArray<T> operator + LTGT (const T& s, const MArray<T>& a);
+  friend MArray<T> operator - LTGT (const T& s, const MArray<T>& a);
+  friend MArray<T> operator * LTGT (const T& s, const MArray<T>& a);
+  friend MArray<T> operator / LTGT (const T& s, const MArray<T>& a);
 
   // element by element MArray by MArray ops
 
-  friend MArray<T> operator + (const MArray<T>& a, const MArray<T>& b);
+  friend MArray<T> operator + LTGT (const MArray<T>& a, const MArray<T>& b);
 
-  friend MArray<T> operator - (const MArray<T>& a, const MArray<T>& b);
+  friend MArray<T> operator - LTGT (const MArray<T>& a, const MArray<T>& b);
 
-  friend MArray<T> product (const MArray<T>& a, const MArray<T>& b);
-  friend MArray<T> quotient (const MArray<T>& a, const MArray<T>& b);
+  friend MArray<T> product LTGT (const MArray<T>& a, const MArray<T>& b);
+  friend MArray<T> quotient LTGT (const MArray<T>& a, const MArray<T>& b);
 
-  friend MArray<T> operator - (const MArray<T>& a);
+  friend MArray<T> operator - LTGT (const MArray<T>& a);
 };
 
+#undef LTGT
+
 extern void
 gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
-
 #define INSTANTIATE_MARRAY_FRIENDS(T) \
   template MArray<T>& operator += (MArray<T>& a, const T& s); \
   template MArray<T>& operator -= (MArray<T>& a, const T& s); \
   template MArray<T>& operator += (MArray<T>& a, const MArray<T>& b); \
   template MArray<T>& operator -= (MArray<T>& a, const MArray<T>& b); \
   template MArray<T> operator + (const MArray<T>& a, const T& s); \
   template MArray<T> operator - (const MArray<T>& a, const T& s); \
   template MArray<T> operator * (const MArray<T>& a, const T& s); \
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -25,16 +25,81 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #if !defined (octave_MArray2_h)
 #define octave_MArray2_h 1
 
 #include "Array2.h"
 
+#if defined (LTGT)
+#undef LTGT
+#endif
+
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+#define LTGT
+#else
+
+#define LTGT <>
+
+template <class T>
+class MArray2;
+
+template <typename T> MArray2<T>& 
+operator += (MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T>& 
+operator -= (MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T>& 
+operator += (MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T>& 
+operator -= (MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T> 
+operator + (const MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T> 
+operator - (const MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T> 
+operator * (const MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T> 
+operator / (const MArray2<T>& a, const T& s);
+
+template <typename T> MArray2<T> 
+operator + (const T& s, const MArray2<T>& a);
+
+template <typename T> MArray2<T> 
+operator - (const T& s, const MArray2<T>& a);
+
+template <typename T> MArray2<T> 
+operator * (const T& s, const MArray2<T>& a);
+
+template <typename T> MArray2<T> 
+operator / (const T& s, const MArray2<T>& a);
+
+template <typename T> MArray2<T> 
+operator + (const MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T> 
+operator - (const MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T> 
+product (const MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T> 
+quotient (const MArray2<T>& a, const MArray2<T>& b);
+
+template <typename T> MArray2<T> 
+operator - (const MArray2<T>& a);
+#endif
+
 // Two dimensional array with math ops.
 
 template <class T>
 class MArray2 : public Array2<T>
 {
 protected:
 
   MArray2 (T *d, int n, int m) : Array2<T> (d, n, m) { }
@@ -52,49 +117,51 @@ public:
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
 
   // element by element MArray2 by scalar ops
 
-  friend MArray2<T>& operator += (MArray2<T>& a, const T& s);
-  friend MArray2<T>& operator -= (MArray2<T>& a, const T& s);
+  friend MArray2<T>& operator += LTGT (MArray2<T>& a, const T& s);
+  friend MArray2<T>& operator -= LTGT (MArray2<T>& a, const T& s);
 
   // element by element MArray2 by MArray2 ops
 
-  friend MArray2<T>& operator += (MArray2<T>& a, const MArray2<T>& b);
-  friend MArray2<T>& operator -= (MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T>& operator += LTGT (MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T>& operator -= LTGT (MArray2<T>& a, const MArray2<T>& b);
 
   // element by element MArray2 by scalar ops
 
-  friend MArray2<T> operator + (const MArray2<T>& a, const T& s);
-  friend MArray2<T> operator - (const MArray2<T>& a, const T& s);
-  friend MArray2<T> operator * (const MArray2<T>& a, const T& s);
-  friend MArray2<T> operator / (const MArray2<T>& a, const T& s);
+  friend MArray2<T> operator + LTGT (const MArray2<T>& a, const T& s);
+  friend MArray2<T> operator - LTGT (const MArray2<T>& a, const T& s);
+  friend MArray2<T> operator * LTGT (const MArray2<T>& a, const T& s);
+  friend MArray2<T> operator / LTGT (const MArray2<T>& a, const T& s);
 
   // element by element scalar by MArray2 ops
 
-  friend MArray2<T> operator + (const T& s, const MArray2<T>& a);
-  friend MArray2<T> operator - (const T& s, const MArray2<T>& a);
-  friend MArray2<T> operator * (const T& s, const MArray2<T>& a);
-  friend MArray2<T> operator / (const T& s, const MArray2<T>& a);
+  friend MArray2<T> operator + LTGT (const T& s, const MArray2<T>& a);
+  friend MArray2<T> operator - LTGT (const T& s, const MArray2<T>& a);
+  friend MArray2<T> operator * LTGT (const T& s, const MArray2<T>& a);
+  friend MArray2<T> operator / LTGT (const T& s, const MArray2<T>& a);
 
   // element by element MArray2 by MArray2 ops
 
-  friend MArray2<T> operator + (const MArray2<T>& a, const MArray2<T>& b);
-  friend MArray2<T> operator - (const MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T> operator + LTGT (const MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T> operator - LTGT (const MArray2<T>& a, const MArray2<T>& b);
 
-  friend MArray2<T> product (const MArray2<T>& a, const MArray2<T>& b);
-  friend MArray2<T> quotient (const MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T> product LTGT (const MArray2<T>& a, const MArray2<T>& b);
+  friend MArray2<T> quotient LTGT (const MArray2<T>& a, const MArray2<T>& b);
 
-  friend MArray2<T> operator - (const MArray2<T>& a);
+  friend MArray2<T> operator - LTGT (const MArray2<T>& a);
 };
 
+#undef LTGT
+
 extern void
 gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
 		     int op2_nr, int op2_nc);
 
 #define INSTANTIATE_MARRAY2_FRIENDS(T) \
   template MArray2<T>& operator += (MArray2<T>& a, const T& s); \
   template MArray2<T>& operator -= (MArray2<T>& a, const T& s); \
   template MArray2<T>& operator += (MArray2<T>& a, const MArray2<T>& b); \
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -26,16 +26,57 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #if !defined (octave_MDiagArray2_h)
 #define octave_MDiagArray2_h 1
 
 #include "DiagArray2.h"
 #include "MArray2.h"
 
+#if defined (LTGT)
+#undef LTGT
+#endif
+
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
+#define LTGT
+#else
+
+#define LTGT <>
+
+template <class T>
+class MDiagArray2;
+
+template <typename T> MDiagArray2<T>&
+operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b);
+
+template <typename T> MDiagArray2<T>&
+operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b);
+
+template <typename T> MDiagArray2<T> 
+operator * (const MDiagArray2<T>& a, const T& s);
+
+template <typename T> MDiagArray2<T> 
+operator / (const MDiagArray2<T>& a, const T& s);
+
+template <typename T> MDiagArray2<T> 
+operator * (const T& s, const MDiagArray2<T>& a);
+
+template <typename T> MDiagArray2<T>
+operator + (const MDiagArray2<T>& a, const MDiagArray2<T>& b); 
+
+template <typename T> MDiagArray2<T>
+operator - (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
+
+template <typename T> MDiagArray2<T>
+product (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
+
+template <typename T> MDiagArray2<T> 
+operator - (const MDiagArray2<T>& a);
+#endif
+
 // Two dimensional diagonal array with math ops.
 
 template <class T>
 class MDiagArray2 : public DiagArray2<T>
 {
 protected:
 
   MDiagArray2 (T *d, int r, int c) : DiagArray2<T> (d, r, c) { }
@@ -67,43 +108,45 @@ public:
 	retval.xelem (i, i) = xelem (i, i);
 
       return retval;
     }
 
   // element by element MDiagArray2 by MDiagArray2 ops
 
   friend MDiagArray2<T>&
-  operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b);
+  operator += LTGT (MDiagArray2<T>& a, const MDiagArray2<T>& b);
 
   friend MDiagArray2<T>&
-  operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b);
+  operator -= LTGT (MDiagArray2<T>& a, const MDiagArray2<T>& b);
 
   // element by element MDiagArray2 by scalar ops
 
-  friend MDiagArray2<T> operator * (const MDiagArray2<T>& a, const T& s);
-  friend MDiagArray2<T> operator / (const MDiagArray2<T>& a, const T& s);
+  friend MDiagArray2<T> operator * LTGT (const MDiagArray2<T>& a, const T& s);
+  friend MDiagArray2<T> operator / LTGT (const MDiagArray2<T>& a, const T& s);
 
   // element by element scalar by MDiagArray2 ops
 
-  friend MDiagArray2<T> operator * (const T& s, const MDiagArray2<T>& a);
+  friend MDiagArray2<T> operator * LTGT (const T& s, const MDiagArray2<T>& a);
 
   // element by element MDiagArray2 by MDiagArray2 ops
 
   friend MDiagArray2<T>
-  operator + (const MDiagArray2<T>& a, const MDiagArray2<T>& b); 
+  operator + LTGT (const MDiagArray2<T>& a, const MDiagArray2<T>& b); 
+
+  friend MDiagArray2<T>
+  operator - LTGT (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
 
   friend MDiagArray2<T>
-  operator - (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
+  product LTGT (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
 
-  friend MDiagArray2<T>
-  product (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
+  friend MDiagArray2<T> operator - LTGT (const MDiagArray2<T>& a);
+};
 
-  friend MDiagArray2<T> operator - (const MDiagArray2<T>& a);
-};
+#undef LTGT
 
 #define INSTANTIATE_MDIAGARRAY_FRIENDS(T) \
   template MDiagArray2<T>& operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T>& operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T> operator * (const MDiagArray2<T>& a, const T& s); \
   template MDiagArray2<T> operator / (const MDiagArray2<T>& a, const T& s); \
   template MDiagArray2<T> operator * (const T& s, const MDiagArray2<T>& a); \
   template MDiagArray2<T> operator + (const MDiagArray2<T>& a, const MDiagArray2<T>& b); \
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -218,18 +218,18 @@ OP_DUP_FCN (, dup, Complex, Complex)
 
 // These should really return a bool *.  Also, they should probably be
 // in with a collection of other element-by-element boolean ops.
 OP_DUP_FCN (0.0 ==, not, double, double)
 OP_DUP_FCN (0.0 ==, not, double, Complex)
 
 OP_DUP_FCN (, make_complex, Complex, double)
 
-OP_DUP_FCN (-, negate, double,  double)
-OP_DUP_FCN (-, negate, Complex, Complex)
+OP_DUP_FCN (-, change_sign, double,  double)
+OP_DUP_FCN (-, change_sign, Complex, Complex)
 
 OP_DUP_FCN (real, real_dup, double,  Complex)
 OP_DUP_FCN (imag, imag_dup, double,  Complex)
 OP_DUP_FCN (conj, conj_dup, Complex, Complex)
 
 #endif
 
 /*
diff --git a/octMakefile.in b/octMakefile.in
--- a/octMakefile.in
+++ b/octMakefile.in
@@ -21,17 +21,17 @@ INSTALL_DATA = @INSTALL_DATA@
 
 CONF_DISTFILES = Makefile Makefile.in octMakefile.in Makeconf.in configure \
 	configure.in config.guess config.sub aclocal.m4 config.h.in \
 	acconfig.h config.h.bot install-sh
 
 DISTFILES = $(CONF_DISTFILES) \
 	BUGS COPYING INSTALL INSTALL.OCTAVE NEWS NEWS.[0-9] PROJECTS \
 	README README.Linux README.Windows ROADMAP SENDING-PATCHES \
-	THANKS INFO.PATCH move-if-change octave-sh octave-bug.in \
+	THANKS move-if-change octave-sh octave-bug.in \
 	install-octave mkinstalldirs mkoctfile.in texi2dvi \
 	ChangeLog ChangeLog.[0-9]
 
 # Complete directory trees to distribute.
 DISTDIRS = glob kpathsea readline # plplot
 
 # Subdirectories in which to run `make all'.
 SUBDIRS = @PLPLOT_DIR@ @READLINE_DIR@ @DLFCN_DIR@ glob \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+Wed Nov 19 02:05:40 1997  Mumit Khan <khan@dhaka.xraylith.wisc.edu>
+
+	* DLD-FUNCTIONS/filter.cc: Don't include extern template decls if
+	NO_EXTERN_TEMPLATE_DECLS is defined.
+	* ov-cx-mat.cc: Likewise.
+	* ov-re-mat.cc: Likewise.
+	* ov-str-mat.cc: Likewise.
+
+	* ov-cx-mat.h (octave_complex_matrix::decrement,
+	octave_complex_matrix):	Use explicit Complex constructor.
+
+Wed Nov 19 00:08:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-decl.cc (tree_global_command::do_init): Initialize global
+	values to `[]'.  Only perform explicit initialization once.
+
 Tue Nov 18 04:27:55 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pr-output.cc (Vfixed_point_format): New variable.
 	(fixed_point_format): New fucntion.
 	(symbols_of_pr_output): Add DEFVAR for fixed_point_format.
 	(set_real_matrix_format): Handle fixed point format
 	(set_complex_matrix_format): Handle fixed point format
 	(set_format): New arg, scale in Matrix, ComplexMatrix, Range versions.
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -31,21 +31,23 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern MArray<double>
 filter (MArray<double>&, MArray<double>&, MArray<double>&);
 
 extern MArray<Complex>
 filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&);
+#endif
 
 template <class T>
 MArray<T>
 filter (MArray<T>& b, MArray<T>& a, MArray<T>& x, MArray<T>& si)
 {
   MArray<T> y;
 
   int a_len  = a.length ();
@@ -120,23 +122,25 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 	}
     }
   else
     y = b (0) * x;
 
   return y;
 }
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern MArray<double>
 filter (MArray<double>&, MArray<double>&, MArray<double>&,
 	MArray<double>&);
 
 extern MArray<Complex>
 filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&,
 	MArray<Complex>&);
+#endif
 
 template <class T>
 MArray<T>
 filter (MArray<T>& b, MArray<T>& a, MArray<T>& x)
 {
   int a_len = a.length ();
   int b_len = b.length ();
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -117,17 +117,19 @@ octave_complex_matrix::do_index_op (cons
     default:
       error ("invalid number of indices (%d) for complex matrix value", len);
       break;
     }
 
   return retval;
 }
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern void assign (Array2<Complex>&, const Array2<Complex>&);
+#endif
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const ComplexMatrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
@@ -156,17 +158,19 @@ octave_complex_matrix::assign (const oct
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
 }
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern void assign (Array2<Complex>&, const Array2<double>&);
+#endif
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -127,19 +127,19 @@ public:
   octave_value uminus (void) const { return octave_value (- matrix); }
 
   octave_value transpose (void) const
     { return octave_value (matrix.transpose ()); }
 
   octave_value hermitian (void) const
     { return octave_value (matrix.hermitian ()); }
 
-  void increment (void) { matrix += 1.0; }
+  void increment (void) { matrix += Complex (1.0); }
 
-  void decrement (void) { matrix -= 1.0; }
+  void decrement (void) { matrix -= Complex (1.0); }
 
   void print (ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (ostream& os, const string& name) const;
 
   int type_id (void) const { return t_id; }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -105,17 +105,19 @@ octave_matrix::do_index_op (const octave
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
 
   return retval;
 }
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern void assign (Array2<double>&, const Array2<double>&);
+#endif
 
 void
 octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -89,17 +89,19 @@ octave_char_matrix_str::do_index_op (con
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
 
   return retval;
 }
 
+#if !defined (NO_EXTERN_TEMPLATE_DECLS)
 extern void assign (Array2<char>&, const Array2<char>&);
+#endif
 
 void
 octave_char_matrix_str::assign (const octave_value_list& idx,
 				const charMatrix& rhs)
 {
   int len = idx.length ();
 
   // XXX FIXME XXX
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -90,23 +90,24 @@ void
 tree_global_command::do_init (tree_decl_elt& elt)
 {
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->link_to_global ();
 
-      tree_expression *expr = elt.expression ();
+      octave_lvalue ult = id->lvalue ();
 
-      if (expr)
+      if (ult.is_undefined ())
 	{
-	  octave_value init_val = expr->rvalue ();
+	  tree_expression *expr = elt.expression ();
 
-	  octave_lvalue ult = id->lvalue ();
+	  octave_value init_val = expr
+	    ? expr->rvalue () : octave_value (Matrix ());
 
 	  ult.assign (octave_value::asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_global_command::eval (void)
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.0"
+#define OCTAVE_VERSION "2.1.3"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "Octave, version " OCTAVE_VERSION " (" TARGET_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
