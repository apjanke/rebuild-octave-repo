# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1361418691 18000
#      Wed Feb 20 22:51:31 2013 -0500
# Node ID 9439f3b5c5fafe5580e70c48b578c139411f3b14
# Parent  39129305b914ef480e7908a861f66d8cb1b30cbf
Restore default floating point state after calling Java

* bootstrap.conf (gnulib_modules): Add fpucw gnulib module.
* configure.ac: Check for fpu_control.h.
* libinterp/octave-value/ov-java.cc (restore_fpu_state): New function.
(terminate_jvm, compute_array_dimensions, get_array_elements,
set_array_elements, get_invoke_list, convert_to_string, box_more,
java_event_hook, initialize_java, octave_java::do_javaMethod,
octave_java::do_javaObject, octave_java::do_java_get,
octave_java::do_java_set): Use it.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -31,16 +31,17 @@ gnulib_modules="
   fcntl
   fflush
   filemode
   float
   floor
   floorf
   fnmatch
   fopen
+  fpucw
   fseek
   ftell
   getcwd
   gethostname
   getopt-gnu
   gettimeofday
   glob
   isatty
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1892,18 +1892,18 @@ OCTAVE_CHECK_LIB_TERMLIB
 ### Checks for header files.
 
 AC_HEADER_DIRENT
 AC_HEADER_SYS_WAIT
 
 ## C headers
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_HEADERS([curses.h direct.h dlfcn.h floatingpoint.h grp.h])
-AC_CHECK_HEADERS([ieeefp.h inttypes.h locale.h memory.h ncurses.h])
+AC_CHECK_HEADERS([curses.h direct.h dlfcn.h floatingpoint.h fpu_control.h])
+AC_CHECK_HEADERS([grp.h ieeefp.h inttypes.h locale.h memory.h ncurses.h])
 AC_CHECK_HEADERS([poll.h pthread.h pwd.h sunmath.h sys/ioctl.h])
 AC_CHECK_HEADERS([sys/param.h sys/poll.h sys/resource.h ])
 AC_CHECK_HEADERS([sys/select.h sys/utsname.h termcap.h])
 
 ## C++ headers
 
 AC_LANG_PUSH(C++)
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -21,16 +21,21 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun.h"
 #include "error.h"
+#include "fpucw.h"
+
+#if HAVE_FPU_CONTROL_H
+#include <fpu_control.h>
+#endif
 
 #if defined HAVE_JAVA
 
 #if defined (HAVE_WINDOWS_H)
 #include <windows.h>
 #endif
 
 #include <algorithm>
@@ -387,16 +392,32 @@ initial_class_path (void)
         throw std::string ("octave.jar does not exist: ") + jar_file;
     }
   else
     throw std::string ("initial java dir is empty");
 
   return retval;
 }
 
+#ifndef _FPU_DEFAULT
+#if defined __i386__ || defined __x86_64__
+#define _FPU_DEFAULT 0x037f
+#else
+#define _FPU_DEFAULT 0
+#endif
+#endif
+
+static void
+restore_fpu_state (void)
+{
+  fpucw_t cw = GET_FPUCW ();
+  if (cw != _FPU_DEFAULT)
+    SET_FPUCW (_FPU_DEFAULT);
+}
+
 static void
 initialize_jvm (void)
 {
   // Most of the time JVM already exists and has been initialized.
   if (jvm)
     return;
 
   JNIEnv *current_env;
@@ -578,16 +599,18 @@ terminate_jvm (void)
       else
         jvm->DestroyJavaVM ();
 
       jvm = 0;
       jvm_attached = false;
 
       if (jvm_lib)
         jvm_lib.close ();
+
+      restore_fpu_state ();
     }
 }
 
 std::string
 jstring_to_string (JNIEnv* jni_env, jstring s)
 {
   std::string retval;
 
@@ -737,16 +760,18 @@ compute_array_dimensions (JNIEnv* jni_en
       if (idx >= dv.length ())
         dv.resize (idx+1);
       dv(idx) = len;
       jcls = reinterpret_cast<jclass> (jni_env->CallObjectMethod (jcls, getComponentType_ID));
       jobj = (len > 0 ? reinterpret_cast<jobjectArray> (jni_env->GetObjectArrayElement (jobj, 0)) : 0);
       idx++;
     }
 
+  restore_fpu_state ();
+
   return dv;
 }
 
 static jobject
 make_java_index (JNIEnv* jni_env, const octave_value_list& idx)
 {
   jclass_ref ocls (jni_env, jni_env->FindClass ("[I"));
   jobjectArray retval = jni_env->NewObjectArray (idx.length (), ocls, 0);
@@ -793,16 +818,18 @@ get_array_elements (JNIEnv* jni_env, job
       resObj = jni_env->CallStaticObjectMethod (helperClass, mID, jobj, jobject (java_idx));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
+  restore_fpu_state ();
+
   return retval;
 }
 
 static octave_value
 set_array_elements (JNIEnv* jni_env, jobject jobj,
                     const octave_value_list& idx, const octave_value& rhs)
 {
   octave_value retval;
@@ -821,16 +848,18 @@ set_array_elements (JNIEnv* jni_env, job
           jobj, jobject (java_idx), jobject (rhsObj));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
+  restore_fpu_state ();
+
   return retval;
 }
 
 static string_vector
 get_invoke_list (JNIEnv* jni_env, jobject jobj)
 {
   std::list<std::string> name_list;
 
@@ -857,16 +886,18 @@ get_invoke_list (JNIEnv* jni_env, jobjec
         }
 
       for (int i = 0; i < fLen; i++)
         {
           jobject_ref field (jni_env, jni_env->GetObjectArrayElement (fList, i));
           jstring_ref fieldName (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (field, f_getName_ID)));
           name_list.push_back (jstring_to_string (jni_env, fieldName));
         }
+
+      restore_fpu_state ();
     }
 
   string_vector v (name_list);
 
   return v.sort (true);
 }
 
 static octave_value
@@ -916,16 +947,18 @@ convert_to_string (JNIEnv *jni_env, jobj
               if (js)
                 retval = octave_value (jstring_to_string (jni_env, js), type);
               else
                 retval = check_exception (jni_env);
             }
         }
       else
         error ("unable to convert Java object to string");
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 #define TO_JAVA(obj) dynamic_cast<octave_java*> ((obj).internal_rep ())
 
 octave_value
@@ -1150,16 +1183,18 @@ box_more (JNIEnv* jni_env, jobject jobj,
               retval = m;
             }
         }
     }
 
   if (retval.is_undefined ())
     retval = octave_value (new octave_java (jobj, jcls));
 
+  restore_fpu_state ();
+
   return retval;
 }
 
 int
 unbox (JNIEnv* jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
   int found = 1;
@@ -1376,16 +1411,18 @@ java_event_hook (void)
 {
   JNIEnv *current_env = octave_java::thread_jni_env ();
 
   if (current_env)
     {
       jclass_ref cls (current_env, find_octave_class (current_env, "org/octave/Octave"));
       jmethodID mID = current_env->GetStaticMethodID (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);
+
+      restore_fpu_state ();
     }
 
   return 0;
 }
 
 static void
 initialize_java (void)
 {
@@ -1401,16 +1438,18 @@ initialize_java (void)
 
           octave_thread_ID = get_current_thread_ID (current_env);
           //printf ("octave thread ID=%ld\n", octave_thread_ID);
         }
       catch (std::string msg)
         {
           error (msg.c_str ());
         }
+
+      restore_fpu_state ();
     }
 }
 
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_call (JNIEnv *env, jclass, jstring funcName,
                              jobjectArray argin, jobjectArray argout)
 {
   std::string fname = jstring_to_string (env, funcName);
@@ -1733,16 +1772,18 @@ octave_java::do_javaMethod (JNIEnv* jni_
           jstring_ref methName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jobjectArray_ref resObj (jni_env, reinterpret_cast<jobjectArray> (jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                                                              to_java (), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types))));
           if (resObj)
             retval = box (jni_env, resObj);
           else
             retval = check_exception (jni_env);
         }
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java:: do_javaMethod (JNIEnv* jni_env,
                               const std::string& class_name,
@@ -1763,16 +1804,18 @@ octave_java:: do_javaMethod (JNIEnv* jni
           jstring_ref clsName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                         jstring (clsName), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types)));
           if (resObj)
             retval = box (jni_env, resObj);
           else
             retval = check_exception (jni_env);
         }
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java::do_javaObject (JNIEnv* jni_env, const std::string& name,
                              const octave_value_list& args)
@@ -1792,16 +1835,18 @@ octave_java::do_javaObject (JNIEnv* jni_
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                         jstring (clsName), jobjectArray (arg_objs), jobjectArray (arg_types)));
 
           if (resObj)
             retval = octave_value (new octave_java (resObj, 0));
           else
             check_exception (jni_env);
         }
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java::do_java_get (JNIEnv* jni_env, const std::string& name)
 {
@@ -1815,16 +1860,18 @@ octave_java::do_java_get (JNIEnv* jni_en
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           to_java (), jstring (fName)));
 
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java::do_java_get (JNIEnv* jni_env, const std::string& class_name,
                           const std::string& name)
@@ -1839,16 +1886,18 @@ octave_java::do_java_get (JNIEnv* jni_en
       jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           jstring (cName), jstring (fName)));
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java::do_java_set (JNIEnv* jni_env, const std::string& name,
                           const octave_value& val)
@@ -1864,16 +1913,18 @@ octave_java::do_java_set (JNIEnv* jni_en
         {
           jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setField",
                                                       "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, to_java (), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 octave_value
 octave_java::do_java_set (JNIEnv* jni_env, const std::string& class_name,
                           const std::string& name, const octave_value& val)
@@ -1890,16 +1941,18 @@ octave_java::do_java_set (JNIEnv* jni_en
           jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setStaticField",
                                                       "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
+
+      restore_fpu_state ();
     }
 
   return retval;
 }
 
 #endif  // endif on HAVE_JAVA
 
 // DEFUN blocks below must be outside of HAVE_JAVA block so that
