# HG changeset patch
# User jwe
# Date 949304461 0
#      Mon Jan 31 07:41:01 2000 +0000
# Node ID b5238ac1dca91c58bcc94ead0f15a29e4c50135b
# Parent  8b21bcbc1080c6d6e2a9c3d6e47bba8bddf68610
[project @ 2000-01-31 07:40:53 by jwe]

diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -29,17 +29,17 @@
 ## @item   w
 ## frequency values for evaluation.
 ##
 ## if @var{sys} is continuous, then bode evaluates @math{G(jw)} where
 ## @math{G(s)} is the system transfer function.
 ##
 ## if @var{sys} is discrete, then bode evaluates G(@code{exp}(jwT)), where
 ## @itemize @bullet
-## @item @var{T}=@code{sysgettsam(@var{sys})} (the system sampling time) and
+## @item @math{T} is the system sampling time
 ## @item @math{G(z)} is the system transfer function.
 ## @end itemize
 ##
 ## @strong{Default} the default frequency range is selected as follows: (These
 ## steps are NOT performed if @var{w} is specified)
 ## @enumerate
 ## @item via routine __bodquist__, isolate all poles and zeros away from
 ## @var{w}=0 (@var{jw}=0 or @math{@code{exp}(jwT)}=1) and select the frequency
diff --git a/scripts/control/base/ctrb.m b/scripts/control/base/ctrb.m
--- a/scripts/control/base/ctrb.m
+++ b/scripts/control/base/ctrb.m
@@ -13,24 +13,24 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ctrb (@var{sys}, @var{b})
-## @deftypefnx {Function File} {} ctrb (@var{A}, @var{B})
+## @deftypefnx {Function File} {} ctrb (@var{a}, @var{b})
 ## Build controllability matrix
 ## @example
 ##              2       n-1
 ## Qs = [ B AB A B ... A   B ]
 ## @end example
 ##
-## of a system data structure or the pair (@var{A}, @var{B}).
+## of a system data structure or the pair (@var{a}, @var{b}).
 ##
 ## @strong{Note} @code{ctrb} forms the controllability matrix.
 ## The numerical properties of @code{is_controllable}
 ## are much better for controllability tests.
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: November 4, 1997
diff --git a/scripts/control/base/damp.m b/scripts/control/base/damp.m
--- a/scripts/control/base/damp.m
+++ b/scripts/control/base/damp.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} damp (@var{p}, @var{tsam})
 ## Displays eigenvalues, natural frequencies and damping ratios
-## of the eigenvalues of a matrix @var{p} or the @var{A}-matrix of a
+## of the eigenvalues of a matrix @var{p} or the @math{A}-matrix of a
 ## system @var{p}, respectively.
 ## If @var{p} is a system, @var{tsam} must not be specified.
 ## If @var{p} is a matrix and @var{tsam} is specified, eigenvalues
 ## of @var{p} are assumed to be in @var{z}-domain.
 ## @end deftypefn
 ## @seealso{eig}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
diff --git a/scripts/control/base/dcgain.m b/scripts/control/base/dcgain.m
--- a/scripts/control/base/dcgain.m
+++ b/scripts/control/base/dcgain.m
@@ -12,21 +12,21 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} dcgain (@var{sys}, tol)
+## @deftypefn {Function File} {} dcgain (@var{sys}, @var{tol})
 ## Returns dc-gain matrix. If dc-gain is infinite
 ## an empty matrix is returned.
 ## The argument @var{tol} is an optional tolerance for the condition
-## number of @var{A}-Matrix in @var{sys} (default @var{tol} = 1.0e-10)
+## number of the @math{A}-Matrix in @var{sys} (default @var{tol} = 1.0e-10)
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 1, 1997
 
 function gm = dcgain (sys, tol)
 
   if((nargin < 1) || (nargin > 2) || (nargout > 1))
diff --git a/scripts/control/base/dlyap.m b/scripts/control/base/dlyap.m
--- a/scripts/control/base/dlyap.m
+++ b/scripts/control/base/dlyap.m
@@ -43,18 +43,17 @@
 ## a' x a - x + b' b = 0,
 ## @end example
 ## @noindent
 ## whichever is appropriate.
 ## @end itemize
 ##
 ## @strong{Method}
 ## Uses Schur decomposition method as in Kitagawa,
-## @cite{An Algorithm for Solving the Matrix Equation @var{X} =
-## @var{F}@var{X}@var{F}' + @var{S}},
+## @cite{An Algorithm for Solving the Matrix Equation @math{X = F X F' + S}},
 ## International Journal of Control, Volume 25, Number 5, pages 745--753
 ## (1977).
 ##
 ## Column-by-column solution method as suggested in
 ## Hammarling, @cite{Numerical Solution of the Stable, Non-Negative
 ## Definite Lyapunov Equation}, IMA Journal of Numerical Analysis, Volume
 ## 2, pages 303--323 (1982).
 ## @end deftypefn
diff --git a/scripts/control/base/dre.m b/scripts/control/base/dre.m
--- a/scripts/control/base/dre.m
+++ b/scripts/control/base/dre.m
@@ -12,17 +12,17 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{tvals}, @var{Plist}] =} dre (@var{sys}, @var{Q}, @var{R}, @var{Qf}, @var{t0}, @var{tf}[, @var{Ptol}, @var{maxits}]);
+## @deftypefn {Function File} {[@var{tvals}, @var{plist}] =} dre (@var{sys}, @var{q}, @var{r}, @var{qf}, @var{t0}, @var{tf}, @var{ptol}, @var{maxits});
 ## Solve the differential Riccati equation
 ## @ifinfo
 ## @example
 ##   -d P/dt = A'P + P A - P B inv(R) B' P + Q
 ##   P(tf) = Qf
 ## @end example
 ## @end ifinfo
 ## @iftex
@@ -53,37 +53,37 @@
 ## @tex
 ## $$ u = - R^{-1} B^T P(t) x $$
 ## @end tex
 ## @end iftex
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## continuous time system data structure
-## @item Q
+## @item q
 ## state integral penalty
-## @item R
+## @item r
 ## input integral penalty
-## @item Qf
+## @item qf
 ## state terminal penalty
 ## @item t0
 ## @itemx tf
 ## limits on the integral
-## @item Ptol
+## @item ptol
 ## tolerance (used to select time samples; see below); default = 0.1
 ## @item maxits
 ## number of refinement iterations (default=10)
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item tvals
-## time values at which @var{P}(@var{t}) is computed
-## @item Plist
-## list values of @var{P}(@var{t}); nth (@var{Plist}, @var{ii})
-## is @var{P}(@var{tvals}(@var{ii})).
+## time values at which @var{p}(@var{t}) is computed
+## @item plist
+## list values of @var{p}(@var{t}); nth (@var{plist}, @var{ii})
+## is @var{p}(@var{tvals}(@var{ii})).
 ##
 ## @item tvals
 ## @example
 ## is selected so that || nth(Plist,ii) - nth(Plist,ii-1) || < Ptol
 ## for ii=2:length(tvals)
 ## @end example
 ## @end table
 ## @end deftypefn
diff --git a/scripts/control/base/lqg.m b/scripts/control/base/lqg.m
--- a/scripts/control/base/lqg.m
+++ b/scripts/control/base/lqg.m
@@ -12,57 +12,57 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{K}, @var{Q}, @var{P}, @var{Ee}, @var{Er}] =} lqg (@var{sys}, @var{Sigw}, @var{Sigv}, @var{Q}, @var{R}, @var{in_idx})
+## @deftypefn {Function File} {[@var{k}, @var{q1}, @var{p1}, @var{ee}, @var{er}] =} lqg (@var{sys}, @var{sigw}, @var{sigv}, @var{q}, @var{r}, @var{in_idx})
 ## Design a linear-quadratic-gaussian optimal controller for the system
 ## @example
 ## dx/dt = A x + B u + G w       [w]=N(0,[Sigw 0    ])
 ##     y = C x + v               [v]  (    0   Sigv ])
 ## @end example
 ## or
 ## @example
 ## x(k+1) = A x(k) + B u(k) + G w(k)       [w]=N(0,[Sigw 0    ])
 ##   y(k) = C x(k) + v(k)                  [v]  (    0   Sigv ])
 ## @end example
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item  sys
 ## system data structure
-## @item  Sigw
-## @itemx  Sigv
+## @item  sigw
+## @itemx  sigv
 ## intensities of independent Gaussian noise processes (as above)
-## @item  Q
-## @itemx  R
+## @item  q
+## @itemx  r
 ## state, control weighting respectively.  Control ARE is
 ## @item  in_idx
 ## names or indices of controlled inputs (see @code{sysidx}, @code{listidx})
 ##
 ## default: last dim(R) inputs are assumed to be controlled inputs, all
 ## others are assumed to be noise inputs.
 ## @end table
 ## @strong{Outputs}
 ## @table @var
-## @item    K
+## @item    k
 ## system data structure format LQG optimal controller (Obtain A,B,C
 ## matrices with @code{sys2ss}, @code{sys2tf}, or @code{sys2zp} as
 ## appropriate)
-## @item    P
+## @item    p1
 ## Solution of control (state feedback) algebraic Riccati equation
-## @item    Q
+## @item    q1
 ## Solution of estimation algebraic Riccati equation
-## @item    Ee
+## @item    ee
 ## estimator poles
-## @item    Es
+## @item    es
 ## controller poles
 ## @end table
 ## @end deftypefn
 ## @seealso{h2syn, lqe, and lqr}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 ## revised for new system format August 1996
diff --git a/scripts/control/base/ltifr.m b/scripts/control/base/ltifr.m
--- a/scripts/control/base/ltifr.m
+++ b/scripts/control/base/ltifr.m
@@ -12,23 +12,23 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} ltifr (@var{A}, @var{B}, @var{w})
+## @deftypefn {Function File} {} ltifr (@var{a}, @var{b}, @var{w})
 ## @deftypefnx {Function File} {} ltifr (@var{sys}, @var{w})
 ## Linear time invariant frequency response of single input systems
 ## @strong{Inputs}
 ## @table @var
-## @item A
-## @itemx B
+## @item a
+## @itemx b
 ## coefficient matrices of @math{dx/dt = A x + B u}
 ## @item sys
 ## system data structure
 ## @item w
 ## vector of frequencies
 ## @end table
 ## @strong{Outputs}
 ## @var{out}
diff --git a/scripts/control/base/nyquist.m b/scripts/control/base/nyquist.m
--- a/scripts/control/base/nyquist.m
+++ b/scripts/control/base/nyquist.m
@@ -27,17 +27,17 @@
 ## @table @var
 ## @item sys
 ## system data structure (must be either purely continuous or discrete;
 ## see is_digital)
 ## @item w
 ## frequency values for evaluation.
 ## if sys is continuous, then bode evaluates @math{G(jw)}
 ## if sys is discrete, then bode evaluates @math{G(exp(jwT))}, where
-## @math{@var{T}=sysgettsam(@var{sys})} (the system sampling time)
+## @math{T} is the system sampling time.
 ## @item default
 ## the default frequency range is selected as follows: (These
 ## steps are NOT performed if @var{w} is specified)
 ## @end table
 ## @enumerate
 ## @item via routine __bodquist__, isolate all poles and zeros away from
 ## @var{w}=0 (@var{jw}=0 or @math{exp(@var{jwT})=1}) and select the frequency
 ## range based on the breakpoint locations of the frequencies.
diff --git a/scripts/control/base/place.m b/scripts/control/base/place.m
--- a/scripts/control/base/place.m
+++ b/scripts/control/base/place.m
@@ -12,20 +12,20 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} place (@var{sys}, @var{P})
+## @deftypefn {Function File} {} place (@var{sys}, @var{p})
 ## Computes the matrix  K such that if the state
 ## is feedback with gain K, then the eigenvalues  of the closed loop
-## system (i.e. A-BK) are those specified in the vector P.
+## system (i.e. A-BK) are those specified in the vector @var{p}.
 ##
 ## Version: Beta (May-1997): If you have any comments, please let me know.
 ## (see the file place.m for my address)
 ## @end deftypefn
 
 ## Author: Jose Daniel Munoz Frias
 
 ## Universidad Pontificia Comillas
diff --git a/scripts/control/hinf/h2syn.m b/scripts/control/hinf/h2syn.m
--- a/scripts/control/hinf/h2syn.m
+++ b/scripts/control/hinf/h2syn.m
@@ -12,53 +12,53 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[K}, @var{gain}, @var{Kc}, @var{Kf}, @var{Pc}, @var{Pf}] = h2syn (@var{Asys}, @var{nu}, @var{ny}, @var{tol})
+## @deftypefn {Function File} {[K}, @var{gain}, @var{kc}, @var{kf}, @var{pc}, @var{pf}] = h2syn (@var{asys}, @var{nu}, @var{ny}, @var{tol})
 ## Design H2 optimal controller per procedure in
 ## Doyle, Glover, Khargonekar, Francis, "State Space Solutions to Standard
 ## H2 and Hinf Control Problems", IEEE TAC August 1989
 ##
 ## Discrete time control per Zhou, Doyle, and Glover, ROBUST AND OPTIMAL
 ## CONTROL, Prentice-Hall, 1996
 ##
 ## @strong{Inputs} input system is passed as either
 ## @table @var
-## @item Asys
+## @item asys
 ## system data structure (see ss2sys, sys2ss)
 ## @itemize @bullet
 ## @item controller is implemented for continuous time systems
 ## @item controller is NOT implemented for discrete time systems
 ## @end itemize
 ## @item nu
 ## number of controlled inputs
 ## @item ny
 ## number of measured outputs
 ## @item tol
 ## threshhold for 0.  Default: 200*eps
 ## @end table
 ##
 ## @strong{Outputs}
 ## @table @var
-## @item    K
+## @item    k
 ## system controller
 ## @item    gain
 ## optimal closed loop gain
-## @item    Kc
+## @item    kc
 ## full information control (packed)
-## @item    Kf
+## @item    kf
 ## state estimator (packed)
-## @item    Pc
+## @item    pc
 ## ARE solution matrix for regulator subproblem
-## @item    Pf
+## @item    pf
 ## ARE solution matrix for filter subproblem
 ## @end table
 ## @end deftypefn
 
 ## Updated for System structure December 1996 by John Ingram
 
 function [K, gain, Kc, Kf, Pc, Pf] = h2syn (Asys, nu, ny, tol)
 
diff --git a/scripts/control/hinf/hinf_ctr.m b/scripts/control/hinf/hinf_ctr.m
--- a/scripts/control/hinf/hinf_ctr.m
+++ b/scripts/control/hinf/hinf_ctr.m
@@ -12,31 +12,31 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} hinf_ctr (@var{dgs}, @var{F}, @var{H}, @var{Z}, @var{g})
+## @deftypefn {Function File} {} hinf_ctr (@var{dgs}, @var{f}, @var{h}, @var{z}, @var{g})
 ## Called by @code{hinfsyn} to compute the H_inf optimal controller.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item dgs
 ## data structure returned by @code{is_dgkf}
-## @item F
-## @itemx H
+## @item f
+## @itemx h
 ## feedback and filter gain (not partitioned)
 ## @item g
 ## final gamma value
 ## @end table
 ## @strong{Outputs}
-## controller K (system data structure)
+## controller (system data structure)
 ##
 ## Do not attempt to use this at home; no argument checking performed.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 ## Revised by Kai P. Mueller April 1998 to solve the general H_infinity
 ## problem using unitary transformations Q (on w and z)
diff --git a/scripts/control/hinf/hinfsyn.m b/scripts/control/hinf/hinfsyn.m
--- a/scripts/control/hinf/hinfsyn.m
+++ b/scripts/control/hinf/hinfsyn.m
@@ -12,21 +12,21 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{K}, @var{g}, @var{GW}, @var{Xinf}, @var{Yinf}] =} hinfsyn (@var{Asys}, @var{nu}, @var{ny}, @var{gmin}, @var{gmax}, @var{gtol}, @var{ptol}, @var{tol})
+## @deftypefn {Function File} {[@var{k}, @var{g}, @var{gw}, @var{xinf}, @var{yinf}] =} hinfsyn (@var{asys}, @var{nu}, @var{ny}, @var{gmin}, @var{gmax}, @var{gtol}, @var{ptol}, @var{tol})
 ##
 ## @strong{Inputs} input system is passed as either
 ## @table @var
-## @item Asys
+## @item asys
 ## system data structure (see ss2sys, sys2ss)
 ## @itemize @bullet
 ## @item controller is implemented for continuous time systems
 ## @item controller is NOT implemented for discrete time systems  (see
 ## bilinear transforms in @code{c2d}, @code{d2c})
 ## @end itemize
 ## @item nu
 ## number of controlled inputs
@@ -44,25 +44,25 @@
 ## Default: 1e-9
 ## @item tol
 ## threshhold for 0.  Default: 200*eps
 ##
 ## @var{gmax}, @var{min}, @var{tol}, and @var{tol} must all be postive scalars.
 ## @end table
 ## @strong{Outputs}
 ## @table @var
-## @item K
+## @item k
 ## system controller
 ## @item g
 ## designed gain value
-## @item GW
+## @item gw
 ## closed loop system
-## @item Xinf
+## @item xinf
 ## ARE solution matrix for regulator subproblem
-## @item Yinf
+## @item yinf
 ## ARE solution matrix for filter subproblem
 ## @end table
 ##
 ## @enumerate
 ## @item Doyle, Glover, Khargonekar, Francis, "State Space Solutions
 ## to Standard H2 and Hinf Control Problems," IEEE TAC August 1989
 ##
 ## @item Maciejowksi, J.M., "Multivariable feedback design,"
diff --git a/scripts/control/hinf/hinfsyn_chk.m b/scripts/control/hinf/hinfsyn_chk.m
--- a/scripts/control/hinf/hinfsyn_chk.m
+++ b/scripts/control/hinf/hinfsyn_chk.m
@@ -12,17 +12,17 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{Pc}, @var{Pf}] =} hinfsyn_chk (@var{A}, @var{B1}, @var{B2}, @var{C1}, @var{C2}, @var{D12}, @var{D21}, @var{g}, @var{ptol})
+## @deftypefn {Function File} {[@var{retval}, @var{pc}, @var{pf}] =} hinfsyn_chk (@var{a}, @var{b1}, @var{b2}, @var{c1}, @var{c2}, @var{d12}, @var{d21}, @var{g}, @var{ptol})
 ## Called by @code{hinfsyn} to see if gain @var{g} satisfies conditions in
 ## Theorem 3 of
 ## Doyle, Glover, Khargonekar, Francis, "State Space Solutions to Standard
 ## H2 and Hinf Control Problems", IEEE TAC August 1989
 ##
 ## @strong{Warning} Do not attempt to use this at home; no argument
 ## checking performed.
 ##
@@ -33,19 +33,19 @@
 ## @item ptol
 ##  as in @code{hinfsyn}
 ## @end table
 ##
 ## @strong{Outputs}
 ## @table @var
 ## @item retval
 ##  1 if g exceeds optimal Hinf closed loop gain, else 0
-## @item Pc
+## @item pc
 ##  solution of "regulator" H-inf ARE
-## @item Pf
+## @item pf
 ##  solution of "filter" H-inf ARE
 ## @end table
 ## Do not attempt to use this at home; no argument checking performed.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 
diff --git a/scripts/control/hinf/hinfsyn_ric.m b/scripts/control/hinf/hinfsyn_ric.m
--- a/scripts/control/hinf/hinfsyn_ric.m
+++ b/scripts/control/hinf/hinfsyn_ric.m
@@ -12,40 +12,40 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{Xinf}, @var{x_ha_err}] =} hinfsyn_ric (@var{A}, @var{BB}, @var{C1}, @var{d1dot}, @var{R}, @var{ptol})
+## @deftypefn {Function File} {[@var{xinf}, @var{x_ha_err}] =} hinfsyn_ric (@var{a}, @var{bb}, @var{c1}, @var{d1dot}, @var{r}, @var{ptol})
 ## Forms
 ## @example
 ## xx = ([BB; -C1'*d1dot]/R) * [d1dot'*C1 BB'];
 ## Ha = [A 0*A; -C1'*C1 -A'] - xx;
 ## @end example
 ## and solves associated Riccati equation.
 ## The error code @var{x_ha_err} indicates one of the following
 ## conditions:
 ## @table @asis
 ## @item 0
 ## successful
 ## @item 1
-## Xinf has imaginary eigenvalues
+## @var{xinf} has imaginary eigenvalues
 ## @item 2
-## Hx not Hamiltonian
+## @var{hx} not Hamiltonian
 ## @item 3
-## Xinf has inf. eigenvalues (numerical overflow)
+## @var{xinf} has infinite eigenvalues (numerical overflow)
 ## @item 4
-## Xinf not symmetric
+## @var{xinf} not symmetric
 ## @item 5
-## Xinf not positive definite
+## @var{xinf} not positive definite
 ## @item 6
-## R is singular
+## @var{r} is singular
 ## @end table
 ## @end deftypefn
 
 function [Xinf, x_ha_err] = hinfsyn_ric (A, BB, C1, d1dot, R, ptol)
 
   x_ha_err = 0;        # assume success
   Xinf = [];                 # default return value
   n = is_square(A);
diff --git a/scripts/control/hinf/is_dgkf.m b/scripts/control/hinf/is_dgkf.m
--- a/scripts/control/hinf/is_dgkf.m
+++ b/scripts/control/hinf/is_dgkf.m
@@ -12,34 +12,34 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{dgkf_struct} ] =} is_dgkf (@var{Asys}, @var{nu}, @var{ny}, @var{tol} )
+## @deftypefn {Function File} {[@var{retval}, @var{dgkf_struct} ] =} is_dgkf (@var{asys}, @var{nu}, @var{ny}, @var{tol} )
 ## Determine whether a continuous time state space system meets
 ## assumptions of DGKF algorithm.
 ## Partitions system into:
 ## @example
 ## [dx/dt] = [A  | Bw  Bu  ][w]
 ## [ z   ]   [Cz | Dzw Dzu ][u]
 ## [ y   ]   [Cy | Dyw Dyu ]
 ## @end example
 ## or similar discrete-time system.
-## If necessary, orthogonal transformations @var{Qw}, @var{Qz} and nonsingular
-## transformations @var{Ru}, @var{Ry} are applied to respective vectors
+## If necessary, orthogonal transformations @var{qw}, @var{qz} and nonsingular
+## transformations @var{ru}, @var{ry} are applied to respective vectors
 ## @var{w}, @var{z}, @var{u}, @var{y} in order to satisfy DGKF assumptions.
-## Loop shifting is used if @var{Dyu} block is nonzero.
+## Loop shifting is used if @var{dyu} block is nonzero.
 ##
 ## @strong{Inputs}
 ## @table @var
-## @item         Asys
+## @item         asys
 ## system data structure
 ## @item           nu
 ## number of controlled inputs
 ## @item        ny
 ## number of measured outputs
 ## @item        tol
 ## threshhold for 0.  Default: 200@var{eps}
 ## @end table
@@ -48,42 +48,42 @@
 ## @item    retval
 ## true(1) if system passes check, false(0) otherwise
 ## @item    dgkf_struct
 ## data structure of @code{is_dgkf} results.  Entries:
 ## @table @var
 ## @item      nw
 ## @itemx     nz
 ## dimensions of @var{w}, @var{z}
-## @item      A
-## system @var{A} matrix
-## @item      Bw
-## (@var{n} x @var{nw}) @var{Qw}-transformed disturbance input matrix
-## @item      Bu
-## (@var{n} x @var{nu}) @var{Ru}-transformed controlled input matrix;
+## @item      a
+## system @math{A} matrix
+## @item      bw
+## (@var{n} x @var{nw}) @var{qw}-transformed disturbance input matrix
+## @item      bu
+## (@var{n} x @var{nu}) @var{ru}-transformed controlled input matrix;
 ##
 ## @strong{Note} @math{B = [Bw Bu]}
-## @item      Cz
+## @item      cz
 ## (@var{nz} x @var{n}) Qz-transformed error output matrix
-## @item      Cy
-## (@var{ny} x @var{n}) @var{Ry}-transformed measured output matrix
+## @item      cy
+## (@var{ny} x @var{n}) @var{ry}-transformed measured output matrix
 ##
 ## @strong{Note} @math{C = [Cz; Cy]}
-## @item      Dzu
-## @item      Dyw
-## off-diagonal blocks of transformed @var{D} matrix that enter
+## @item      dzu
+## @item      dyw
+## off-diagonal blocks of transformed system @math{D} matrix that enter
 ## @var{z}, @var{y} from @var{u}, @var{w} respectively
-## @item      Ru
+## @item      ru
 ## controlled input transformation matrix
-## @item      Ry
+## @item      ry
 ## observed output transformation matrix
-## @item      Dyu_nz
-## nonzero if the @var{Dyu} block is nonzero.
-## @item      Dyu
-## untransformed @var{Dyu} block
+## @item      dyu_nz
+## nonzero if the @var{dyu} block is nonzero.
+## @item      dyu
+## untransformed @var{dyu} block
 ## @item      dflg
 ## nonzero if the system is discrete-time
 ## @end table
 ## @end table
 ## @code{is_dgkf} exits with an error if the system is mixed
 ## discrete/continuous
 ##
 ## @strong{References}
diff --git a/scripts/control/obsolete/qzval.m b/scripts/control/obsolete/qzval.m
--- a/scripts/control/obsolete/qzval.m
+++ b/scripts/control/obsolete/qzval.m
@@ -12,30 +12,30 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} qzval (@var{A}, @var{B})
+## @deftypefn {Function File} {} qzval (@var{a}, @var{b})
 ## Compute generalized eigenvalues of the matrix pencil
 ## @ifinfo
 ## @example
 ## (A - lambda B).
 ## @end example
 ## @end ifinfo
 ## @iftex
 ## @tex
 ## $(A - \lambda B)$.
 ## @end tex
 ## @end iftex
 ##
-## @var{A} and @var{B} must be real matrices.
+## @var{a} and @var{b} must be real matrices.
 ##
 ## @strong{Note} @code{qzval} is obsolete; use @code{qz} instead.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1998
 
 function lam = qzval (A, B)
diff --git a/scripts/control/system/buildssic.m b/scripts/control/system/buildssic.m
--- a/scripts/control/system/buildssic.m
+++ b/scripts/control/system/buildssic.m
@@ -12,17 +12,17 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} buildssic (@var{Clst}, @var{Ulst}, @var{Olst}, @var{Ilst}, @var{s1}, @var{s2}, @var{s3}, @var{s4}, @var{s5}, @var{s6}, @var{s7}, @var{s8})
+## @deftypefn {Function File} {} buildssic (@var{clst}, @var{ulst}, @var{olst}, @var{ilst}, @var{s1}, @var{s2}, @var{s3}, @var{s4}, @var{s5}, @var{s6}, @var{s7}, @var{s8})
 ##
 ## Form an arbitrary complex (open or closed loop) system in
 ## state-space form from several systems. "@code{buildssic}" can
 ## easily (despite it's cryptic syntax) integrate transfer functions
 ## from a complex block diagram into a single system with one call.
 ## This function is especially useful for building open loop
 ## interconnections for H_infinity and H2 designs or for closing
 ## loops with these controllers.
@@ -31,40 +31,40 @@
 ## "@code{sysmult}", "@code{sysconnect}" and the like is recommended for
 ## standard operations since they can handle mixed discrete and continuous
 ## systems and also the names of inputs, outputs, and states.
 ##
 ## The parameters consist of 4 lists that describe the connections
 ## outputs and inputs and up to 8 systems s1-s8.
 ## Format of the lists:
 ## @table @var
-## @item      Clst
+## @item      clst
 ## connection list, describes the input signal of
 ## each system. The maximum number of rows of Clst is
 ## equal to the sum of all inputs of s1-s8.
 ##
 ## Example:
 ## @code{[1 2 -1; 2 1 0]} ==> new input 1 is old inpout 1
 ## + output 2 - output 1, new input 2 is old input 2
 ## + output 1. The order of rows is arbitrary.
 ##
-## @item     Ulst
+## @item     ulst
 ## if not empty the old inputs in vector Ulst will
 ## be appended to the outputs. You need this if you
 ## want to "pull out" the input of a system. Elements
 ## are input numbers of s1-s8.
 ##
-## @item     Olst
+## @item     olst
 ## output list, specifiy the outputs of the resulting
 ## systems. Elements are output numbers of s1-s8.
 ## The numbers are alowed to be negative and may
 ## appear in any order. An empty matrix means
 ## all outputs.
 ##
-## @item     Ilst
+## @item     ilst
 ## input list, specifiy the inputs of the resulting
 ## systems. Elements are input numbers of s1-s8.
 ## The numbers are alowed to be negative and may
 ## appear in any order. An empty matrix means
 ## all inputs.
 ## @end table
 ##
 ## Example:  Very simple closed loop system.
@@ -82,24 +82,24 @@
 ## @end group
 ## @end example
 ##
 ## The closed loop system GW can be optained by
 ## @example
 ## GW = buildssic([1 2; 2 -1], 2, [1 2 3], 2, G, K);
 ## @end example
 ## @table @var
-## @item Clst
+## @item clst
 ## (1. row) connect input 1 (G) with output 2 (K).
 ## (2. row) connect input 2 (K) with neg. output 1 (G).
-## @item Ulst
+## @item ulst
 ## append input of (2) K to the number of outputs.
-## @item Olst
+## @item olst
 ## Outputs are output of 1 (G), 2 (K) and appended output 3 (from Ulst).
-## @item Ilst
+## @item ilst
 ## the only input is 2 (K).
 ## @end table
 ##
 ## Here is a real example:
 ## @example
 ## @group
 ##                          +----+
 ##     -------------------->| W1 |---> v1
diff --git a/scripts/control/system/c2d.m b/scripts/control/system/c2d.m
--- a/scripts/control/system/c2d.m
+++ b/scripts/control/system/c2d.m
@@ -12,18 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} c2d (@var{sys}, @var{opt}, @var{T})
-## @deftypefnx {Function File} {} c2d (@var{sys}, @var{T})
+## @deftypefn {Function File} {} c2d (@var{sys}, @var{opt}, @var{t})
+## @deftypefnx {Function File} {} c2d (@var{sys}, @var{t})
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## system data structure (may have both continuous time and discrete
 ## time subsystems)
 ## @item opt
 ## string argument; conversion option (optional argument;
@@ -36,26 +36,26 @@
 ## @end table
 ## @example
 ##     2(z-1)
 ## s = -----
 ##     T(z+1)
 ## @end example
 ## FIXME: This option exits with an error if @var{sys} is not purely
 ## continuous. (The @code{ex} option can handle mixed systems.)
-## @item @var{T}
+## @item t
 ## sampling time; required if sys is purely continuous.
 ##
 ## @strong{Note} If the 2nd argument is not a string, @code{c2d} assumes that
-## the 2nd argument is @var{T} and performs appropriate argument checks.
+## the 2nd argument is @var{t} and performs appropriate argument checks.
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{dsys} discrete time equivalent via zero-order hold,
-## sample each @var{T} sec.
+## sample each @var{t} sec.
 ##
 ## converts the system data structure describing
 ## @example
 ## .
 ## x = Ac x + Bc u
 ## @end example
 ## into a discrete time equivalent model
 ## @example
diff --git a/scripts/control/system/d2c.m b/scripts/control/system/d2c.m
--- a/scripts/control/system/d2c.m
+++ b/scripts/control/system/d2c.m
@@ -31,24 +31,24 @@
 ## tolerance for convergence of default @code{"log"} option (see below)
 ## @item   opt
 ## conversion option.  Choose from:
 ## @table @code
 ## @item         "log"
 ## (default) Conversion is performed via a matrix logarithm.
 ## Due to some problems with this computation, it is
 ## followed by a steepest descent algorithm to identify continuous time
-## @var{A}, @var{B}, to get a better fit to the original data.
+## @var{a}, @var{b}, to get a better fit to the original data.
 ##
 ## If called as @code{d2c (@var{sys}, @var{tol})}, with @var{tol}
 ## positive scalar, the @code{"log"} option is used.  The default value
 ## for @var{tol} is @code{1e-8}.
 ## @item        "bi"
 ## Conversion is performed via bilinear transform
-## @math{z = (1 + s T / 2)/(1 - s T / 2)} where @var{T} is the
+## @math{z = (1 + s T / 2)/(1 - s T / 2)} where @math{T} is the
 ## system sampling time (see @code{sysgettsam}).
 ##
 ## FIXME: bilinear option exits with an error if @var{sys} is not purely
 ## discrete
 ## @end table
 ## @end table
 ## @strong{Outputs} @var{csys} continuous time system (same dimensions and
 ## signal names as in @var{sys}).
diff --git a/scripts/control/system/dmr2d.m b/scripts/control/system/dmr2d.m
--- a/scripts/control/system/dmr2d.m
+++ b/scripts/control/system/dmr2d.m
@@ -12,63 +12,63 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{dsys}, @var{fidx}] =} dmr2d (@var{sys}, @var{idx}, @var{sprefix}, @var{Ts2}, @var{cuflg})
+## @deftypefn {Function File} {[@var{dsys}, @var{fidx}] =} dmr2d (@var{sys}, @var{idx}, @var{sprefix}, @var{ts2}, @var{cuflg})
 ## convert a multirate digital system to a single rate digital system
-## states specified by @var{idx}, @var{sprefix} are sampled at @var{Ts2}, all
-## others are assumed sampled at @var{Ts1} = @code{sysgettsam(@var{sys})}.
+## states specified by @var{idx}, @var{sprefix} are sampled at @var{ts2}, all
+## others are assumed sampled at @var{ts1} = @code{sysgettsam (@var{sys})}.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item   sys
 ## discrete time system;
 ## @code{dmr2d} exits with an error if @var{sys} is not discrete
 ## @item   idx
 ## indices or names of states with sampling time 
 ## @code{sysgettsam(@var{sys})} (may be empty); see @code{listidx}
 ## @item   sprefix
 ## list of string prefixes of states with sampling time
 ## @code{sysgettsam(@var{sys})} (may be empty)
-## @item   Ts2
+## @item   ts2
 ## sampling time of states not specified by @var{idx}, @var{sprefix}
 ## must be an integer multiple of @code{sysgettsam(@var{sys})}
 ## @item   cuflg
 ## "constant u flag" if @var{cuflg} is nonzero then the system inputs are
-## assumed to be constant over the revised sampling interval @var{Ts2}.
+## assumed to be constant over the revised sampling interval @var{ts2}.
 ## Otherwise, since the inputs can change during the interval
-## @var{t} in @math{[k Ts2, (k+1) Ts2]}, an additional set of inputs is
+## @var{t} in @math{[k ts2, (k+1) ts2]}, an additional set of inputs is
 ## included in the revised B matrix so that these intersample inputs
 ## may be included in the single-rate system.
 ## default @var{cuflg} = 1.
 ## @end table
 ##
 ## @strong{Outputs}
 ## @table @var
 ## @item   dsys
-## equivalent discrete time system with sampling time @var{Ts2}.
+## equivalent discrete time system with sampling time @var{ts2}.
 ##
-## The sampling time of sys is updated to @var{Ts2}.
+## The sampling time of sys is updated to @var{ts2}.
 ##
 ## if @var{cuflg}=0 then a set of additional inputs is added to
 ## the system with suffixes _d1, ..., _dn to indicate their
-## delay from the starting time k @var{Ts2}, i.e.
+## delay from the starting time k @var{ts2}, i.e.
 ## u = [u_1; u_1_d1; ..., u_1_dn] where u_1_dk is the input
-## k*Ts1 units of time after u_1 is sampled. (Ts1 is
-## the original sampling time of discrete time sys and
-## @var{Ts2} = (n+1)*Ts1)
+## k*ts1 units of time after u_1 is sampled. (@var{ts1} is
+## the original sampling time of the discrete time system and
+## @var{ts2} = (n+1)*ts1)
 ##
 ## @item   fidx
 ## indices of "formerly fast" states specified by @var{idx} and @var{sprefix};
-## these states are updated to the new (slower) sampling interval @var{Ts2}.
+## these states are updated to the new (slower) sampling interval @var{ts2}.
 ## @end table
 ##
 ## @strong{WARNING} Not thoroughly tested yet; especially when
 ## @var{cuflg} == 0.
 ## @end deftypefn
 
 ## Adapted from c2d by a.s.hodel@eng.auburn.edu
 
diff --git a/scripts/control/system/is_controllable.m b/scripts/control/system/is_controllable.m
--- a/scripts/control/system/is_controllable.m
+++ b/scripts/control/system/is_controllable.m
@@ -12,18 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{U}] =} is_controllable (@var{sys}, @var{tol})
-## @deftypefnx {Function File} {[@var{retval}, @var{U}] =} is_controllable (@var{a}, @var{b}, @var{tol})
+## @deftypefn {Function File} {[@var{retval}, @var{u}] =} is_controllable (@var{sys}, @var{tol})
+## @deftypefnx {Function File} {[@var{retval}, @var{u}] =} is_controllable (@var{a}, @var{b}, @var{tol})
 ## Logical check for system controllability.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## system data structure
 ## @item a
 ## @itemx b
diff --git a/scripts/control/system/is_detectable.m b/scripts/control/system/is_detectable.m
--- a/scripts/control/system/is_detectable.m
+++ b/scripts/control/system/is_detectable.m
@@ -12,18 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{U}] =} is_detectable (@var{a}, @var{c}, @var{tol})
-## @deftypefnx {Function File} {[@var{retval}, @var{U}] =} is_detectable (@var{sys}, @var{tol})
+## @deftypefn {Function File} {[@var{retval}, @var{u}] =} is_detectable (@var{a}, @var{c}, @var{tol})
+## @deftypefnx {Function File} {[@var{retval}, @var{u}] =} is_detectable (@var{sys}, @var{tol})
 ## Test for detactability (observability of unstable modes) of
 ## (@var{a},@var{c}).
 ##
 ## Returns 1 if the system @var{a} or the pair (@var{a},@var{c})is
 ## detectable, 0 if not.
 ##
 ## @strong{See} @code{is_stabilizable} for detailed description of
 ## arguments and computational method.
diff --git a/scripts/control/system/is_observable.m b/scripts/control/system/is_observable.m
--- a/scripts/control/system/is_observable.m
+++ b/scripts/control/system/is_observable.m
@@ -12,18 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{U}] =} is_observable (@var{a}, @var{c}, @var{tol})
-## @deftypefnx {Function File} {[@var{retval}, @var{U}] =} is_observable (@var{sys}, @var{tol})
+## @deftypefn {Function File} {[@var{retval}, @var{u}] =} is_observable (@var{a}, @var{c}, @var{tol})
+## @deftypefnx {Function File} {[@var{retval}, @var{u}] =} is_observable (@var{sys}, @var{tol})
 ## Logical check for system observability.
 ##
 ## Default: tol = 10*norm(a,'fro')*eps
 ##
 ## Returns 1 if the system @var{sys} or the pair (@var{a},@var{c}) is
 ## observable, 0 if not.
 ##
 ## @strong{See} @code{is_controllable} for detailed description of arguments
diff --git a/scripts/control/system/is_sample.m b/scripts/control/system/is_sample.m
--- a/scripts/control/system/is_sample.m
+++ b/scripts/control/system/is_sample.m
@@ -12,18 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} is_sample (@var{Ts})
-## return true if @var{Ts} is a valid sampling time
+## @deftypefn {Function File} {} is_sample (@var{ts})
+## Return true if @var{ts} is a valid sampling time
 ## (real,scalar, > 0)
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1995
 
 function out = is_sample (Ts)
 
diff --git a/scripts/control/system/is_stabilizable.m b/scripts/control/system/is_stabilizable.m
--- a/scripts/control/system/is_stabilizable.m
+++ b/scripts/control/system/is_stabilizable.m
@@ -12,26 +12,26 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{U}] =} is_stabilizable (@var{sys}, @var{tol})
-## @deftypefnx {Function File} {[@var{retval}, @var{U}] =} is_stabilizable (@var{a}, @var{b}, @var{tol})
+## @deftypefn {Function File} {[@var{retval}, @var{u}] =} is_stabilizable (@var{sys}, @var{tol})
+## @deftypefnx {Function File} {[@var{retval}, @var{u}] =} is_stabilizable (@var{a}, @var{b}, @var{tol})
 ## Logical check for system stabilizability (i.e., all unstable modes are controllable).
 ##
 ## Test for stabilizability is performed via an ordered Schur decomposition
-## that reveals the unstable subspace of the system @var{A} matrix.
+## that reveals the unstable subspace of the system @var{a} matrix.
 ##
-## Returns @code{retval} = 1 if the system, @code{a}, is stabilizable,
-## if the pair  (@code{a}, @code{b}) is stabilizable, or 0 if not.
-## @code{U} = orthogonal basis of controllable subspace.
+## Returns @code{retval} = 1 if the system, @var{a}, is stabilizable,
+## if the pair  (@var{a}, @var{b}) is stabilizable, or 0 if not.
+## @var{u} = orthogonal basis of controllable subspace.
 ##
 ## Controllable subspace is determined by applying Arnoldi iteration with
 ## complete re-orthogonalization to obtain an orthogonal basis of the
 ## Krylov subspace.
 ## @example
 ##   span ([b,a*b,...,a^   b]).
 ## @end example
 ## tol is a roundoff paramter, set to 200*eps if omitted.
diff --git a/scripts/control/system/parallel.m b/scripts/control/system/parallel.m
--- a/scripts/control/system/parallel.m
+++ b/scripts/control/system/parallel.m
@@ -12,28 +12,28 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} parallel (@var{Asys}, @var{Bsys})
+## @deftypefn {Function File} {} parallel (@var{asys}, @var{bsys})
 ## Forms the parallel connection of two systems.
 ##
 ##              ____________________
 ##              |      ________    |
-##     u  ----->|----> | Asys |--->|----> y1
+##     u  ----->|----> | asys |--->|----> y1
 ##         |    |      --------    |
 ##         |    |      ________    |
-##         |--->|----> | Bsys |--->|----> y2
+##         |--->|----> | bsys |--->|----> y2
 ##              |      --------    |
 ##              --------------------
-##                   Ksys
+##                   ksys
 ## @end deftypefn
 
 ## Author: David Clem
 ## Created: August 15, 1994
 ## completely rewritten Oct 1996 a s hodel
 ## SYS_INTERNAL accesses members of system structure
 
 function sysp = parallel (Asys, Bsys)
diff --git a/scripts/control/system/ss2sys.m b/scripts/control/system/ss2sys.m
--- a/scripts/control/system/ss2sys.m
+++ b/scripts/control/system/ss2sys.m
@@ -170,17 +170,17 @@
 ##   1  0  0
 ##   0  1  0
 ##   0  0  1
 ## D matrix: 3 x 3
 ##   0  0
 ##   0  0
 ##   0  0
 ## @end example
-## Notice that the @var{D} matrix is constructed  by default to the
+## Notice that the @math{D} matrix is constructed  by default to the
 ## correct dimensions.  Default input and output signals names were assigned
 ## since none were given.
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 20, 1996
 
 function retsys = ss2sys (a, b, c, d, tsam, n, nz, stname, inname, outname, outlist)
diff --git a/scripts/control/system/sysadd.m b/scripts/control/system/sysadd.m
--- a/scripts/control/system/sysadd.m
+++ b/scripts/control/system/sysadd.m
@@ -12,33 +12,33 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {}  sysadd (@var{Gsys}, @var{Hsys})
-## returns @var{sys} = @var{Gsys} + @var{Hsys}.
+## @deftypefn {Function File} {}  sysadd (@var{gsys}, @var{hsys})
+## returns @var{sys} = @var{gsys} + @var{hsys}.
 ## @itemize @bullet
 ## @item Exits with
-## an error if @var{Gsys} and @var{Hsys} are not compatibly dimensioned.
+## an error if @var{gsys} and @var{hsys} are not compatibly dimensioned.
 ## @item Prints a warning message is system states have identical names;
 ## duplicate names are given a suffix to make them unique.
-## @item @var{sys} input/output names are taken from @var{Gsys}.
+## @item @var{sys} input/output names are taken from @var{gsys}.
 ## @end itemize
 ## @example
 ## @group
 ##           ________
-##      ----|  Gsys  |---
+##      ----|  gsys  |---
 ## u   |    ----------  +|
 ## -----                (_)----> y
 ##     |     ________   +|
-##      ----|  Hsys  |---
+##      ----|  hsys  |---
 ##           --------
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## Updated for variable number of arguments July 1999 A. S. Hodel
diff --git a/scripts/control/system/sysappend.m b/scripts/control/system/sysappend.m
--- a/scripts/control/system/sysappend.m
+++ b/scripts/control/system/sysappend.m
@@ -50,20 +50,20 @@
 ## @group
 ##    sys.b := [sys.b , b]
 ##    sys.c := [sys.c  ]
 ##             [ c     ]
 ##    sys.d := [sys.d | D12 ]
 ##             [D21   | D22 ]
 ## @end group
 ## @end example
-## where @var{D12}, @var{D21}, and @var{D22} are the appropriate dimensioned
+## where @math{D12}, @math{D21}, and @math{D22} are the appropriate dimensioned
 ## blocks of the input parameter @var{d}.
 ## @itemize @bullet
-## @item The leading block @var{D11} of @var{d} is ignored.
+## @item The leading block @math{D11} of @var{d} is ignored.
 ## @item If @var{inname} and @var{outname} are not given as arguments,
 ##      the new inputs and outputs are be assigned default names.
 ## @item @var{yd} is a binary vector of length rows(c) that indicates
 ##      continuous/sampled outputs.  Default value for @var{yd} is:
 ##
 ## @item @var{sys} = continuous or mixed
 ## @var{yd} = @code{zeros(1,rows(c))}
 ##
diff --git a/scripts/control/system/syscont.m b/scripts/control/system/syscont.m
--- a/scripts/control/system/syscont.m
+++ b/scripts/control/system/syscont.m
@@ -12,28 +12,28 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{csys}, @var{Acd}, @var{Ccd}] =} syscont (@var{sys})
+## @deftypefn {Function File} {[@var{csys}, @var{acd}, @var{ccd}] =} syscont (@var{sys})
 ## Extract the purely continuous subsystem of an input system.
 ##
 ## @strong{Inputs}
 ## @var{sys} is a system data structure
 ##
 ## @strong{Outputs}
 ## @table @var
 ## @item csys
 ## is the purely continuous input/output connections of @var{sys}
-## @item Acd
-## @itemx Ccd
+## @item acd
+## @itemx ccd
 ## connections from discrete states to continuous states,
 ## discrete states to continuous outputs, respectively.
 ##
 ## returns @var{csys} empty if no continuous/continous path exists
 ## @end table
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
diff --git a/scripts/control/system/sysdisc.m b/scripts/control/system/sysdisc.m
--- a/scripts/control/system/sysdisc.m
+++ b/scripts/control/system/sysdisc.m
@@ -12,28 +12,28 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{dsys}, @var{Adc}, @var{Cdc}] =} sysdisc (@var{sys})
+## @deftypefn {Function File} {[@var{dsys}, @var{adc}, @var{cdc}] =} sysdisc (@var{sys})
 ##
 ## @strong{Inputs}
 ## @var{sys} = system data structure
 ##
 ## @strong{Outputs}
 ## @table @var
 ## @item dsys
 ## purely discrete portion of sys (returned empty if there is
 ## no purely discrete path from inputs to outputs)
-## @item    Adc
-## @itemx   Cdc
+## @item    adc
+## @itemx   cdc
 ## connections from continuous states to discrete states and discrete
 ## outputs, respectively.
 ## @end table
 ## @end deftypefn
 
 function [dsys, Adc, Cdc] = sysdisc (sys)
 
   save_empty = empty_list_elements_ok;
diff --git a/scripts/control/system/sysdup.m b/scripts/control/system/sysdup.m
--- a/scripts/control/system/sysdup.m
+++ b/scripts/control/system/sysdup.m
@@ -12,22 +12,22 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} sysdup (@var{Asys}, @var{out_idx}, @var{in_idx})
+## @deftypefn {Function File} {} sysdup (@var{asys}, @var{out_idx}, @var{in_idx})
 ## Duplicate specified input/output connections of a system
 ##
 ## @strong{Inputs}
 ## @table @var
-## @item Asys
+## @item asys
 ## system data structure
 ## @item out_idx
 ## @itemx in_idx
 ## indices or names of desired signals (see @code{sigidx}).
 ## duplicates are made of @code{y(out_idx(ii))} and @code{u(in_idx(ii))}.
 ## @end table
 ##
 ## @strong{Outputs}
@@ -39,17 +39,17 @@
 ## @code{sysdup} creates copies of selected inputs and outputs as
 ## shown below.  u1/y1 is the set of original inputs/outputs, and
 ## u2,y2 is the set of duplicated inputs/outputs in the order specified
 ## in @var{in_idx}, @var{out_idx}, respectively
 ## @example
 ## @group
 ##           ____________________
 ## u1  ----->|                  |----> y1
-##           |       Asys       |
+##           |       asys       |
 ## u2 ------>|                  |----->y2
 ## (in_idx)  -------------------| (out_idx)
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
diff --git a/scripts/control/system/sysgroup.m b/scripts/control/system/sysgroup.m
--- a/scripts/control/system/sysgroup.m
+++ b/scripts/control/system/sysgroup.m
@@ -12,32 +12,32 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} sysgroup (@var{Asys}, @var{Bsys})
+## @deftypefn {Function File} {} sysgroup (@var{asys}, @var{bsys})
 ## Combines two systems into a single system
 ##
 ## @strong{Inputs}
-## @var{Asys}, @var{Bsys}: system data structures
+## @var{asys}, @var{bsys}: system data structures
 ##
 ## @strong{Outputs}
-## @math{sys = @r{block diag}(Asys,Bsys)}
+## @math{sys = @r{block diag}(asys,bsys)}
 ## @example
 ## @group
 ##          __________________
 ##          |    ________    |
-## u1 ----->|--> | Asys |--->|----> y1
+## u1 ----->|--> | asys |--->|----> y1
 ##          |    --------    |
 ##          |    ________    |
-## u2 ----->|--> | Bsys |--->|----> y2
+## u2 ----->|--> | bsys |--->|----> y2
 ##          |    --------    |
 ##          ------------------
 ##               Ksys
 ## @end group
 ## @end example
 ## The function also rearranges the internal state-space realization of @var{sys}
 ## so that the
 ## continuous states come first and the discrete states come last.
diff --git a/scripts/control/system/sysmult.m b/scripts/control/system/sysmult.m
--- a/scripts/control/system/sysmult.m
+++ b/scripts/control/system/sysmult.m
@@ -12,29 +12,29 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} sysmult (@var{Asys}, @var{Bsys})
+## @deftypefn {Function File} {} sysmult (@var{asys}, @var{bsys})
 ## Compute @math{sys = Asys*Bsys} (series connection):
 ## @example
 ## @group
 ## u   ----------     ----------
-## --->|  Bsys  |---->|  Asys  |--->
+## --->|  bsys  |---->|  asys  |--->
 ##     ----------     ----------
 ## @end group
 ## @end example
 ## A warning occurs if there is direct feed-through
-## from an input of Bsys or a continuous state of Bsys through a discrete
-## output of Bsys to a continuous state or output in Asys (system data
-## structure does not recognize discrete inputs).
+## from an input of Bsys or a continuous state of @var{bsys} through a
+## discrete output of Bsys to a continuous state or output in @var{asys}
+## (system data structure does not recognize discrete inputs).
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## updated for variable number of arguments by A. S. Hodel July 1999
 
 function sys = sysmult (...)
 
diff --git a/scripts/control/system/sysprune.m b/scripts/control/system/sysprune.m
--- a/scripts/control/system/sysprune.m
+++ b/scripts/control/system/sysprune.m
@@ -12,22 +12,22 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} sysprune (@var{Asys}, @var{out_idx}, @var{in_idx})
+## @deftypefn {Function File} {} sysprune (@var{asys}, @var{out_idx}, @var{in_idx})
 ## Extract specified inputs/outputs from a system
 ##
 ## @strong{Inputs}
 ## @table @var
-## @item   Asys
+## @item asys
 ## system data structure
 ## @item out_idx
 ## @itemx in_idx
 ##
 ## Indices or signal names of the outputs and inputs to be kept in the returned
 ## system; remaining connections are "pruned" off.
 ## May select as [] (empty matrix) to specify all outputs/inputs.
 ##
diff --git a/scripts/control/system/syssub.m b/scripts/control/system/syssub.m
--- a/scripts/control/system/syssub.m
+++ b/scripts/control/system/syssub.m
@@ -12,32 +12,32 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} syssub (@var{Gsys}, @var{Hsys})
-## returns @math{sys = Gsys - Hsys}
+## @deftypefn {Function File} {} syssub (@var{gsys}, @var{hsys})
+## Return @math{sys = Gsys - Hsys}.
 ##
-## Method: @var{Gsys} and @var{Hsys} are connected in parallel
+## Method: @var{gsys} and @var{hsys} are connected in parallel
 ## The input vector is connected to both systems; the outputs are
-## subtracted.  Returned system names are those of @var{Gsys}.
+## subtracted.  Returned system names are those of @var{gsys}.
 ## @example
 ## @group
 ##          +--------+
-##     +--->|  Gsys  |---+
+##     +--->|  gsys  |---+
 ##     |    +--------+   |
 ##     |                +|
 ## u --+                (_)--> y
 ##     |                -|
 ##     |    +--------+   |
-##     +--->|  Hsys  |---+
+##     +--->|  hsys  |---+
 ##          +--------+
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 1996
 ## updated for variable numbers of input arguments by July 1999 A. S. Hodel
diff --git a/scripts/control/system/zp2ss.m b/scripts/control/system/zp2ss.m
--- a/scripts/control/system/zp2ss.m
+++ b/scripts/control/system/zp2ss.m
@@ -12,30 +12,30 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{A}, @var{B}, @var{C}, @var{D}] =} zp2ss (@var{zer}, @var{pol}, @var{k})
+## @deftypefn {Function File} {[@var{a}, @var{b}, @var{c}, @var{d}] =} zp2ss (@var{zer}, @var{pol}, @var{k})
 ## Conversion from zero / pole to state space.
 ## @strong{Inputs}
 ## @table @var
 ## @item zer
 ## @itemx pol
 ## vectors of (possibly) complex poles and zeros of a transfer
 ## function.  Complex values must come in conjugate pairs
 ## (i.e., x+jy in zer means that x-jy is also in zer)
 ## @item k
 ## real scalar (leading coefficient)
 ## @end table
 ## @strong{Outputs}
-##  @var{A}, @var{B}, @var{C}, @var{D}
+##  @var{a}, @var{b}, @var{c}, @var{d}
 ## The state space system
 ## @example
 ## .
 ## x = Ax + Bu
 ## y = Cx + Du
 ## @end example
 ## is obtained from a vector of zeros and a vector of poles via the
 ## function call @code{[a,b,c,d] = zp2ss(zer,pol,k)}.
diff --git a/scripts/control/util/__zgpbal__.m b/scripts/control/util/__zgpbal__.m
--- a/scripts/control/util/__zgpbal__.m
+++ b/scripts/control/util/__zgpbal__.m
@@ -12,17 +12,17 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __zgpbal__ (@var{Asys})
+## @deftypefn {Function File} {} __zgpbal__ (@var{sys})
 ##
 ## used internally in @code{tzero}; minimal argument checking performed
 ##
 ## implementation of zero computation generalized eigenvalue problem
 ## balancing method (Hodel and Tiller, Allerton Conference, 1991)
 ## Based on Ward's balancing algorithm (SIAM J. Sci Stat. Comput., 1981)
 ##
 ## __zgpbal__ computes a state/input/output weighting that attempts to
diff --git a/scripts/control/util/zgfmul.m b/scripts/control/util/zgfmul.m
--- a/scripts/control/util/zgfmul.m
+++ b/scripts/control/util/zgfmul.m
@@ -13,18 +13,17 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} zgfmul (@var{a}, @var{b}, @var{c}, @var{d}, @var{x})
-##
-## Compute product of zgep incidence matrix @var{F} with vector @var{x}.
+## Compute product of zgep incidence matrix @math{F} with vector @var{x}.
 ## Used by zgepbal (in zgscal) as part of generalized conjugate gradient
 ## iteration.
 ## @end deftypefn
 
 ## References:
 ## ZGEP: Hodel, "Computation of Zeros with Balancing," 1992, submitted to  LAA
 ## Generalized CG: Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 
diff --git a/scripts/control/util/zgreduce.m b/scripts/control/util/zgreduce.m
--- a/scripts/control/util/zgreduce.m
+++ b/scripts/control/util/zgreduce.m
@@ -12,17 +12,17 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {retsys =} zgreduce (@var{Asys}, @var{meps})
+## @deftypefn {Function File} {} zgreduce (@var{sys}, @var{meps})
 ## Implementation of procedure REDUCE in (Emami-Naeini and Van Dooren,
 ## Automatica, # 1982).
 ## @end deftypefn
 
 function retsys = zgreduce (Asys, meps)
 
   ## SYS_INTERNAL accesses members of system data structure
 
