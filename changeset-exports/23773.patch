# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500496453 14400
#      Wed Jul 19 16:34:13 2017 -0400
# Node ID 5ff24576b78351b33538dcafbd593e4e9fb47a18
# Parent  b6949bdce34f8a271bdaae85fbf5e74d1630ac66
defer installing qt graphics toolkit until interpreter is ready

* octave.h, octave.cc (application::create_interpreter): Return
reference to new interpreter object.
(cli_application::execute): Get reference to interpreter from
application::create_interpreter.  Use it to initialize and execute
interpreter.

* main-window.cc (octave_interpreter::execute): Get reference to
interpreter from application::create_interpreter.  Use it to
initialize and execute interpreter.  Wait until after the interpreter
is initialized and ready to install the qt graphics toolkit.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -60,16 +60,17 @@ along with Octave; see the file COPYING.
 #include "url-transfer.h"
 
 #include "builtin-defun-decls.h"
 #include "defaults.h"
 #if defined (HAVE_QT_GRAPHICS)
 #  include "__init_qt__.h"
 #endif
 #include "interpreter-private.h"
+#include "interpreter.h"
 #include "oct-map.h"
 #include "octave.h"
 #include "symtab.h"
 #include "utils.h"
 #include "version.h"
 
 static file_editor_interface *
 create_default_editor (QWidget *p)
@@ -91,44 +92,44 @@ void
 octave_interpreter::execute (void)
 {
   thread_manager.register_current_thread ();
 
   octave_thread_manager::unblock_interrupt_signal ();
 
   // The application context owns the interpreter.
 
-  m_app_context->create_interpreter ();
-
-#if defined (HAVE_QT_GRAPHICS)
-  install___init_qt___functions ();
-
-  Fregister_graphics_toolkit (ovl ("qt"));
-#endif
+  octave::interpreter& interp = m_app_context->create_interpreter ();
 
   int exit_status = 0;
 
   try
     {
       // Final initialization including executing startup files.  If
       // initialization fails, return the last available status from
       // that process.
 
-      exit_status = m_app_context->initialize_interpreter ();
-
-      if (m_app_context->interpreter_initialized ())
+      exit_status = interp.initialize ();
+
+      if (interp.initialized ())
         {
           // The interpreter should be completely ready at this point so let
           // the GUI know.
 
           emit octave_ready_signal ();
 
           // Start executing commands in the command window.
 
-          exit_status = m_app_context->execute_interpreter ();
+#if defined (HAVE_QT_GRAPHICS)
+          install___init_qt___functions ();
+
+          Fregister_graphics_toolkit (ovl ("qt"));
+#endif
+
+          exit_status = interp.execute ();
         }
     }
   catch (const octave::exit_exception& ex)
     {
       exit_status = ex.exit_status ();
     }
 
   // Whether or not initialization succeeds we need to clean up the
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -310,20 +310,22 @@ namespace octave
     instance = 0;
   }
 
   bool application::interpreter_initialized (void)
   {
     return m_interpreter ? m_interpreter->initialized () : false;
   }
 
-  void application::create_interpreter (void)
+  interpreter& application::create_interpreter (void)
   {
     if (! m_interpreter)
       m_interpreter = new interpreter (this);
+
+    return *m_interpreter;
   }
 
   int application::initialize_interpreter (void)
   {
     return m_interpreter ? m_interpreter->initialize () : -1;
   }
 
   int application::execute_interpreter (void)
@@ -370,19 +372,19 @@ namespace octave
                            && ! m_options.traditional ());
 
     // This should probably happen early.
     sysdep_init ();
   }
 
   int cli_application::execute (void)
   {
-    create_interpreter ();
+    interpreter& interp = create_interpreter ();
 
-    int status = execute_interpreter ();
+    int status = interp.execute ();
 
     delete_interpreter ();
 
     return status;
   }
 }
 
 // embedded is int here because octave_main is extern "C".
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -254,17 +254,17 @@ namespace octave
     bool have_eval_option_code (void) const { return m_have_eval_option_code; }
 
     bool have_script_file (void) const { return m_have_script_file; }
 
     bool is_octave_program (void) const { return m_is_octave_program; }
 
     bool interpreter_initialized (void);
 
-    virtual void create_interpreter (void);
+    virtual interpreter& create_interpreter (void);
 
     virtual int initialize_interpreter (void);
 
     virtual int execute_interpreter (void);
 
     virtual void delete_interpreter (void);
 
     virtual int execute (void) = 0;
