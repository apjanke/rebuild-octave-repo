# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1541097430 14400
#      Thu Nov 01 14:37:10 2018 -0400
# Node ID c60a5493688aa619921bd00dd925db033bc8a104
# Parent  8c3e5b727e8f2446bd237cd4eaf4f3725107fe4e
avoid std::cout in JIT compiler code

* jit-typeinfo.cc, pt-jit.cc: Use octave_stdout instead of std::cout for
debugging messages.  Use error instead of writing to std::cerr.

diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -433,17 +433,17 @@ namespace octave
     if (rhs.imag () == 0)
       return octave_jit_pow_scalar_scalar (lhs, rhs.real ());
     return std::pow (lhs, rhs);
   }
 
   extern "C" void
   octave_jit_print_matrix (jit_matrix *m)
   {
-    std::cout << *m << std::endl;
+    octave_stdout << *m << std::endl;
   }
 
   OCTAVE_NORETURN static
   void
   err_bad_result (void)
   {
     error ("incorrect type information given to the JIT compiler");
   }
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include <sstream>
 #include <string>
 
 #include "bp-table.h"
 #include "defun.h"
 #include "errwarn.h"
 #include "ov.h"
+#include "pager.h"
 #include "pt-all.h"
 #include "pt-jit.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "variables.h"
 #include "interpreter-private.h"
 
 // Programming Note: As of hg id 2b2c8ac44cd2, this file builds with
@@ -2137,20 +2138,17 @@ namespace octave
       .setMCJITMemoryManager(llvm::make_unique<jit_memory_manager> ())
       .create ();
 
     // Note: in some versions of LLVM, we should call .setUseMCJIT (true)
     // before .create () ?
     // FIXME: autconf this
 
     if (e == nullptr)
-      {
-        std::cerr << "Failed to create JIT engine" << std::endl;
-        std::cerr << err << std::endl;
-      }
+      error ("failed to create JIT engine: %s", err.c_str ());
 
     return jit::EngineOwner (e);
   }
 
   void
   tree_jit::do_register_jit_module (jit_module* jm)
   {
     jm_list.push_back (jm);
@@ -2497,37 +2495,37 @@ namespace octave
         jit_infer infer (conv.get_factory (), conv.get_blocks (),
                          conv.get_variable_map ());
         infer.infer ();
 
         if (Vdebug_jit)
           {
             jit_block_list& blocks = infer.get_blocks ();
             blocks.label ();
-            std::cout << "-------------------- Compiling function ";
-            std::cout << "--------------------\n";
-
-            tree_print_code tpc (std::cout);
+            octave_stdout << "-------------------- Compiling function ";
+            octave_stdout << "--------------------\n";
+
+            tree_print_code tpc (octave_stdout);
             tpc.visit_octave_user_function_header (fcn);
             tpc.visit_statement_list (*fcn.body ());
             tpc.visit_octave_user_function_trailer (fcn);
-            blocks.print (std::cout, "octave jit ir");
+            blocks.print (octave_stdout, "octave jit ir");
           }
 
         jit_factory& factory = conv.get_factory ();
         jit_convert_llvm to_llvm;
         raw_fn = to_llvm.convert_function (*this, infer.get_blocks (),
                                            factory.constants (), fcn,
                                            m_argument_types);
 
         if (Vdebug_jit)
           {
-            std::cout << "-------------------- raw function ";
-            std::cout << "--------------------\n";
-            std::cout << *raw_fn.to_llvm () << std::endl;
+            octave_stdout << "-------------------- raw function ";
+            octave_stdout << "--------------------\n";
+            octave_stdout << *raw_fn.to_llvm () << std::endl;
             llvm::verifyFunction (*raw_fn.to_llvm ());
           }
 
         m_llvm_function_name = fcn.name () + "_wrapper";
         jit_type *any_t = jit_typeinfo::get_any ();
         std::vector<jit_type *> wrapper_args (1, jit_typeinfo::get_any_ptr ());
         wrapper = jit_function (this, jit_convention::internal,
                                 m_llvm_function_name, any_t, wrapper_args);
@@ -2569,19 +2567,19 @@ namespace octave
 
         wrapper.do_return (builder, result);
 
         llvm::Function *llvm_function = wrapper.to_llvm ();
         optimize (llvm_function);
 
         if (Vdebug_jit)
           {
-            std::cout << "-------------------- optimized and wrapped ";
-            std::cout << "--------------------\n";
-            std::cout << *llvm_function << std::endl;
+            octave_stdout << "-------------------- optimized and wrapped ";
+            octave_stdout << "--------------------\n";
+            octave_stdout << *llvm_function << std::endl;
             llvm::verifyFunction (*llvm_function);
           }
 
         finalizeObject ();
 
         uint64_t void_fn = getFunctionAddress (m_llvm_function_name);
 
         if (void_fn == 0)
@@ -2597,17 +2595,17 @@ namespace octave
       }
     catch (const jit_fail_exception& e)
       {
         m_argument_types.clear ();
 
         if (Vdebug_jit)
           {
             if (e.known ())
-              std::cout << "jit fail: " << e.what () << std::endl;
+              octave_stdout << "jit fail: " << e.what () << std::endl;
           }
 
         Vjit_failcnt++;
 
         wrapper.erase ();
         raw_fn.erase ();
       }
   }
@@ -2750,19 +2748,19 @@ namespace octave
                          conv.get_variable_map ());
 
         infer.infer ();
 
         if (Vdebug_jit)
           {
             jit_block_list& blocks = infer.get_blocks ();
             blocks.label ();
-            std::cout << "-------------------- Compiling tree --------------------\n";
-            std::cout << tee.str_print_code () << std::endl;
-            blocks.print (std::cout, "octave jit ir");
+            octave_stdout << "-------------------- Compiling tree --------------------\n";
+            octave_stdout << tee.str_print_code () << std::endl;
+            blocks.print (octave_stdout, "octave jit ir");
           }
 
         jit_factory& factory = conv.get_factory ();
         jit_convert_llvm to_llvm;
 
         llvm_function = to_llvm.convert_loop (*this, infer.get_blocks (),
                                               factory.constants (),
                                               m_llvm_function_name);
@@ -2771,39 +2769,39 @@ namespace octave
 
         m_bounds = conv.get_bounds ();
       }
     catch (const jit_fail_exception& e)
       {
         if (Vdebug_jit)
           {
             if (e.known ())
-              std::cout << "jit fail: " << e.what () << std::endl;
+              octave_stdout << "jit fail: " << e.what () << std::endl;
           }
 
         Vjit_failcnt++;
 
       }
 
     if (llvm_function)
       {
         if (Vdebug_jit)
           {
-            std::cout << "-------------------- llvm ir --------------------";
-            std::cout << *llvm_function << std::endl;
+            octave_stdout << "-------------------- llvm ir --------------------";
+            octave_stdout << *llvm_function << std::endl;
             llvm::verifyFunction (*llvm_function);
           }
 
         optimize (llvm_function);
 
         if (Vdebug_jit)
           {
-            std::cout << "-------------------- optimized llvm ir "
+            octave_stdout << "-------------------- optimized llvm ir "
                       << "--------------------\n";
-            std::cout << *llvm_function << std::endl;
+            octave_stdout << *llvm_function << std::endl;
           }
 
         finalizeObject ();
 
         uint64_t void_fn = getFunctionAddress (m_llvm_function_name);
 
         if (void_fn == 0)
           {
