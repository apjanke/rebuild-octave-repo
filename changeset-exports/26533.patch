# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1547391707 -3600
#      Sun Jan 13 16:01:47 2019 +0100
# Node ID 8c3e727c44b531c93924e79608d8a886f376e6fd
# Parent  cd73f8e9235fb0420f10918e86db3b66ce3e0c35
# Parent  4dae224112a155c03f6d7e0e6fd234471bd8582b
maint: Merge stable to default.

diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -303,17 +303,17 @@ namespace octave
                                                  ed_comment_str.def).toInt ();
 
     selected_uncomment_string = settings->value (ed_uncomment_str.key,
                                                  ed_uncomment_str.def).toInt ();
 
     for (int i = 0; i < ed_comment_strings_count; i++)
       {
         m_rb_comment_strings[i] = new QRadioButton ();
-        m_rb_uncomment_strings[i] = new QRadioButton ();
+        m_rb_uncomment_strings[i] = new QCheckBox ();
 
         connect (m_rb_comment_strings[i], SIGNAL (clicked (bool)),
                  m_rb_uncomment_strings[i], SLOT (setChecked (bool)));
         connect (m_rb_comment_strings[i], SIGNAL (toggled (bool)),
                  m_rb_uncomment_strings[i], SLOT (setDisabled (bool)));
 
         m_rb_comment_strings[i]->setText (ed_comment_strings.at(i));
         m_rb_comment_strings[i]->setChecked (i == selected_comment_string);
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -87,16 +87,16 @@ namespace octave
 
     color_picker *m_widget_title_bg_color;
     color_picker *m_widget_title_bg_color_active;
     color_picker *m_widget_title_fg_color;
     color_picker *m_widget_title_fg_color_active;
     color_picker *m_editor_current_line_color;
 
     QRadioButton *m_rb_comment_strings[ed_comment_strings_count];
-    QRadioButton *m_rb_uncomment_strings[ed_comment_strings_count];
+    QCheckBox *m_rb_uncomment_strings[ed_comment_strings_count];
 
     QCheckBox *m_ws_enable_colors;
     QCheckBox *m_ws_hide_tool_tips;
   };
 }
 
 #endif
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -7371,17 +7371,17 @@ axes::properties::update_looseinset (voi
       // FIXME: do we need to place limits on any of these?
 
       double outer_left = inner_left - left_margin;
       double outer_bottom = inner_bottom - bottom_margin;
       double outer_right = inner_right + right_margin;
       double outer_top = inner_top + top_margin;
 
       double outer_width = outer_right - outer_left;
-      double outer_height = outer_top = outer_bottom;
+      double outer_height = outer_top - outer_bottom;
 
       Matrix outerbox (1, 4);
 
       outerbox(0) = outer_left;
       outerbox(1) = outer_bottom;
       outerbox(2) = outer_width;
       outerbox(3) = outer_height;
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -624,17 +624,19 @@ initialize_jvm (void)
   // Most of the time JVM already exists and has been initialized.
   // Also it seems, as if jvm is set, the jvm is already attached.
   // This does not fit terminate_jvm.
   if (jvm)
     return;
 
   JNIEnv *current_env;
   const char *static_locale = setlocale (LC_ALL, nullptr);
-  const std::string locale (static_locale);
+  std::string locale;
+  if (static_locale)
+    locale = std::string (static_locale);
 
   octave::dynamic_library lib ("");
   std::string jvm_lib_path = "linked in or loaded libraries";
 
   // Check whether the Java VM library is already loaded or linked in.
   JNI_CreateJavaVM_t create_vm = reinterpret_cast<JNI_CreateJavaVM_t>
                                  (lib.search ("JNI_CreateJavaVM"));
   JNI_GetCreatedJavaVMs_t get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t>
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include "unistd-wrappers.h"
 #include "unsetenv-wrapper.h"
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 #  include <windows.h>
 #  include <wchar.h>
 
 #  include "lo-hash.h"
+#  include "unwind-prot.h"
 #endif
 
 namespace octave
 {
   namespace sys
   {
     std::string
     getcwd (void)
@@ -173,17 +174,18 @@ namespace octave
       if (new_item)
         sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
 
       // As far as I can see there's no way to distinguish between the
       // various errors; putenv doesn't have errno values.
 
 #if defined (OCTAVE_USE_WINDOWS_API)
       wchar_t *wnew_item = u8_to_wchar (new_item);
-      std::free (static_cast<void *> (new_item));
+      octave::unwind_protect frame;
+      frame.add_fcn (std::free, static_cast<void *> (new_item));
       if (_wputenv (wnew_item) < 0)
         (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 #else
       if (octave_putenv_wrapper (new_item) < 0)
         (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 #endif
     }
 
diff --git a/liboctave/util/oct-rl-hist.c b/liboctave/util/oct-rl-hist.c
--- a/liboctave/util/oct-rl-hist.c
+++ b/liboctave/util/oct-rl-hist.c
@@ -271,17 +271,17 @@ octave_history_list (int limit, int numb
 
       int beg = 0;
       int end = 0;
       while (hlist[end])
         end++;
 
       beg = (limit < 0 || end < limit) ? 0 : (end - limit);
 
-      retval = malloc ((size_t) (end - beg + 1) * sizeof (char **));
+      retval = malloc ((size_t) (end - beg + 1) * sizeof (char *));
       // FIXME: Should this call current_liboctave_error_handler instead?
       if (! retval)
         return retval;
       
       k = 0;
       for (i = beg; i < end; i++)
         {
           char *line = hlist[i]->line;
