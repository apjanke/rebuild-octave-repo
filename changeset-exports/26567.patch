# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1547713535 -3600
#      Thu Jan 17 09:25:35 2019 +0100
# Branch stable
# Node ID bf05a7c16e9e014ecf36878fe1c7019e60eae531
# Parent  f8d380d04b01e7db553b383dfede619f19e2b55a
Choose "painters" renderer when printing rotated text (bug #55485)

* __print_parse_opt__.m: Do not choose opengl renderer when some text objects
  have angles other that multiples of 90°.

* print.m: Document that the renderer options are only implemented for the qt
  toolkit.

diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -111,16 +111,17 @@
 ##
 ## @item  -opengl
 ## @itemx -painters
 ##   Specifies whether the opengl (pixel-based) or painters (vector-based)
 ## renderer is used.  This is equivalent to changing the figure's
 ## @qcode{"Renderer"} property.  When the figure @code{RendererMode} property
 ## is @qcode{"auto"} Octave will use the @qcode{"opengl"} renderer for raster
 ## formats (e.g., JPEG) and @qcode{"painters"} for vector formats (e.g., PDF).
+## Those options are only supported for the "qt" graphics tookit.
 ##
 ## @item -svgconvert
 ##   For OpenGL-based graphic toolkits, this enables a different backend
 ## toolchain with enhanced characteristics.  The toolchain adds support for
 ## printing arbitrary characters and fonts in PDF outputs; it avoids some
 ## anti-aliasing artifacts in the rendering of patch and surface objects
 ## (particularly for 2-D scenes); and it supports transparency of line, patch,
 ## and surface objects.
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -224,24 +224,38 @@ function arg_st = __print_parse_opts__ (
 
   if (strcmp (arg_st.renderer, "auto")
       && strcmp (get (arg_st.figure, "renderermode"), "manual"))
     arg_st.renderer = get (arg_st.figure, "renderer");
   endif
 
   if (strcmp (arg_st.renderer, "auto"))
     if (opengl_ok && strcmp (graphics_toolkit (arg_st.figure), "qt"))
-      arg_st.renderer = "opengl";
+      ## "opengl" renderer only does text rotations of 0°, 90°, 180°, 270°, ...
+      ht = findall (arg_st.figure, "type", "text");
+      angles = [get(ht, "rotation"){:}];
+      if (any (mod (angles, 90)))
+        arg_st.renderer = "painters";
+      else
+        arg_st.renderer = "opengl";
+      endif
     else
       arg_st.renderer = "painters";
     endif
   elseif (strcmp (arg_st.renderer, "opengl") && ! opengl_ok)
     arg_st.renderer = "painters";
-    warning (["print: unsupported output format \"%s\" for renderer ", ...
-              "\"opengl\"."], arg_st.devopt);
+    warning (['print: unsupported output format "%s" for renderer ', ...
+              '"opengl".'], arg_st.devopt);
+  elseif (! strcmp (graphics_toolkit (arg_st.figure), "qt")
+          && strcmp (arg_st.renderer, "opengl"))
+    ## The opengl renderer only works with the "qt" toolkit
+    arg_st.renderer = "painters";
+    warning ('Octave:print:unsupported-renderer',
+             'print: "opengl" renderer unsupported for "%s" toolkit',
+             graphics_toolkit (arg_st.figure));
   endif
 
   
   if (arg_st.use_color == 0)
     if (any (strcmp ({"ps", "ps2", "eps", "eps2"}, arg_st.devopt)))
       arg_st.use_color = -1;
     else
       arg_st.use_color = 1;
