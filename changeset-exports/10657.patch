# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274787982 -7200
#      Tue May 25 13:46:22 2010 +0200
# Node ID c6833d31f34eac6e786239812f2a79866a9c81a0
# Parent  ca836bcdf85ef103de064dce470135ab070de156
optimize primes and isprime

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* specfun/primes.m: Use logical masks rather than numeric.
+	* specfun/isprime.m: Rewrite using isprime.
+
 2010-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* miscellaneous/unimplemented.m: Don't mention onCleanup (supported).
 
 2010-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/base/median.m: Ensure NaNs where needed. Simplify first
 	non-singleton dimension computation.
diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -31,30 +31,28 @@
 ## factorization code.
 ##
 ## @seealso{primes, factor, gcd, lcm}
 ## @end deftypefn
 
 function t = isprime (n)
 
   if (nargin == 1)
-    if (! isscalar (n))
-      nel = numel (n);
-      t = zeros (size (n), "logical");
-      for i = 1:nel
-        t(i) = isprime (n(i));
-      endfor
-    elseif (n != fix (n) || n < 2)
-      t = logical (0);
-    elseif (n < 9)
-      t = all (n != [4, 6, 8]);
-    else
-      q = n./[2, 3:2:sqrt(n)];
-      t = all (q != fix (q));
-    endif
+    n = n(:);
+    idx = 1:numel (n);
+    for p = primes (sqrt (max (n(:))))
+      if (isempty (idx))
+        break;
+      endif
+      mask = rem (n, p) != 0;
+      n = n(mask);
+      idx = idx(mask);
+    endfor
+    t = false (size (n));
+    t(idx) = true;
   else
     print_usage ();
   endif
 
 endfunction
 
 %!assert (isprime (4), logical (0));
 %!assert (isprime (3), logical (1));
diff --git a/scripts/specfun/primes.m b/scripts/specfun/primes.m
--- a/scripts/specfun/primes.m
+++ b/scripts/specfun/primes.m
@@ -53,36 +53,36 @@ function x = primes (p)
   if (p > 100000)
     ## Optimization: 1/6 less memory, and much faster (asymptotically)
     ## 100000 happens to be the cross-over point for Paul's machine;
     ## below this the more direct code below is faster.  At the limit
     ## of memory in Paul's machine, this saves .7 seconds out of 7 for
     ## p = 3e6.  Hardly worthwhile, but Dirk reports better numbers.
     lenm = floor ((p+1)/6);       # length of the 6n-1 sieve
     lenp = floor ((p-1)/6);       # length of the 6n+1 sieve
-    sievem = ones (1, lenm);      # assume every number of form 6n-1 is prime
-    sievep = ones (1, lenp);      # assume every number of form 6n+1 is prime
+    sievem = true (1, lenm);      # assume every number of form 6n-1 is prime
+    sievep = true (1, lenp);      # assume every number of form 6n+1 is prime
 
     for i = 1:(sqrt(p)+1)/6       # check up to sqrt(p)
       if (sievem(i))              # if i is prime, eliminate multiples of i
-        sievem(7*i-1:6*i-1:lenm) = 0;
-        sievep(5*i-1:6*i-1:lenp) = 0;
+        sievem(7*i-1:6*i-1:lenm) = false;
+        sievep(5*i-1:6*i-1:lenp) = false;
       endif                       # if i is prime, eliminate multiples of i
       if (sievep(i))
-        sievep(7*i+1:6*i+1:lenp) = 0;
-        sievem(5*i+1:6*i+1:lenm) = 0;
+        sievep(7*i+1:6*i+1:lenp) = false;
+        sievem(5*i+1:6*i+1:lenm) = false;
       endif
     endfor
     x = sort([2, 3, 6*find(sievem)-1, 6*find(sievep)+1]);
   elseif (p > 352)                # nothing magical about 352; must be >2
     len = floor ((p-1)/2);        # length of the sieve
-    sieve = ones (1, len);        # assume every odd number is prime
+    sieve = true (1, len);        # assume every odd number is prime
     for i = 1:(sqrt(p)-1)/2       # check up to sqrt(p)
       if (sieve(i))               # if i is prime, eliminate multiples of i
-        sieve(3*i+1:2*i+1:len) = 0; # do it
+        sieve(3*i+1:2*i+1:len) = false; # do it
       endif
     endfor
     x = [2, 1+2*find(sieve)];     # primes remaining after sieve
   else
     a = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, ...
          53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, ...
          109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, ...
          173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, ...
