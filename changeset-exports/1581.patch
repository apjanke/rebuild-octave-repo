# HG changeset patch
# User jwe
# Date 814450173 0
#      Mon Oct 23 12:09:33 1995 +0000
# Node ID c02f877ca5253bf60f016fdae3a3c069b3f91da4
# Parent  0c49e5e8dd5b99822f30b0af475f281f1ed2e708
[project @ 1995-10-23 12:09:33 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1729,49 +1729,75 @@ TC_REP::convert_to_row_or_column_vector 
 	}
 
       delete complex_matrix;
       complex_matrix = cm;
     }
 }
 
 void
-TC_REP::convert_to_matrix_type (void)
+TC_REP::convert_to_matrix_type (int make_complex)
 {
   switch (type_tag)
     {
     case complex_scalar_constant:
       {
 	Complex *old_complex = complex_scalar;
 	complex_matrix = new ComplexMatrix (1, 1, *complex_scalar);
 	type_tag = complex_matrix_constant;
 	delete old_complex;
       }
       break;
 
     case scalar_constant:
       {
-	matrix = new Matrix (1, 1, scalar);
-	type_tag = matrix_constant;
+	if (make_complex)
+	  {
+	    complex_matrix = new ComplexMatrix (1, 1, scalar);
+	    type_tag = complex_matrix_constant;
+	  }
+	else
+	  {
+	    matrix = new Matrix (1, 1, scalar);
+	    type_tag = matrix_constant;
+	  }
       }
       break;
 
     case unknown_constant:
       {
-	matrix = new Matrix (0, 0);
-	type_tag = matrix_constant;
+	if (make_complex)
+	  {
+	    complex_matrix = new ComplexMatrix ();
+	    type_tag = complex_matrix_constant;
+	  }
+	else
+	  {
+	    matrix = new Matrix ();
+	    type_tag = matrix_constant;
+	  }
       }
       break;
 
     case range_constant:
       {
-	Matrix *tmp = new Matrix (range->matrix_value ());
-	delete range;
-	matrix = tmp;
-	type_tag = matrix_constant;
+	if (make_complex)
+	  {
+	    ComplexMatrix *tmp = new ComplexMatrix (range->matrix_value ());
+	    delete range;
+	    complex_matrix = tmp;
+	    type_tag = complex_matrix_constant;
+	  }
+	else
+	  {
+	    Matrix *tmp = new Matrix (range->matrix_value ());
+	    delete range;
+	    matrix = tmp;
+	    type_tag = matrix_constant;
+	  }
       }
       break;
 
     default:
       panic_impossible ();
       break;
     }
 }
@@ -2690,25 +2716,25 @@ TC_REP::set_index (char c)
 
     default:
       panic_impossible ();
       break;
     }
 }
 
 void
-TC_REP::set_index (const Octave_object& args)
+TC_REP::set_index (const Octave_object& args, int rhs_is_complex)
 {
   switch (type_tag)
     {
     case unknown_constant:
     case scalar_constant:
     case complex_scalar_constant:
     case range_constant:
-      convert_to_matrix_type ();
+      convert_to_matrix_type (rhs_is_complex);
       break;
 
     default:
       break;
     }
 
   int n = args.length ();
 
@@ -2914,17 +2940,17 @@ TC_REP::assign (tree_constant& rhs, cons
   if (is_defined () && ! (is_numeric_type () || is_string ()))
     force_numeric ();
 
   if (error_state)
     return;
 
   maybe_widen (rhs.const_type ());
 
-  set_index (args);
+  set_index (args, rhs.is_complex_type ());
 
   if (! error_state)
     {
       switch (type_tag)
 	{
 	case complex_matrix_constant:
 	  {
 	    switch (rhs.const_type ())
@@ -2965,17 +2991,17 @@ TC_REP::assign (tree_constant& rhs, cons
 		break;
 	      }
 	  }
 	  break;
 
 	case char_matrix_constant:
 	case char_matrix_constant_str:
 	  ::assign (*char_matrix, rhs.char_matrix_value ());
-      break;
+	  break;
 
 	default:
 	  panic_impossible ();
 	  break;
 	}
     }
 }
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -266,29 +266,29 @@ private:
 
 	// We want to get rid of these too:
 
 	void force_numeric (int frc_str_conv = 0);
 	tree_constant make_numeric (int frc_str_conv = 0) const;
 
 	// But not this.
 
-	void convert_to_matrix_type (void);
+	void convert_to_matrix_type (int make_complex);
 
 	// Indexing and assignment.
 
 	void clear_index (void);
 
 	// void set_index (double d);
 	void set_index (const Range& r);
 	void set_index (const ColumnVector& v);
 	void set_index (const Matrix& m);
 	void set_index (char c);
 
-	void set_index (const Octave_object& args);
+	void set_index (const Octave_object& args, int rhs_is_complex = 0);
 
 	tree_constant do_index (const Octave_object& args);
 
 	void maybe_widen (constant_type t);
 
 	void assign (tree_constant& rhs, const Octave_object& args);
 
 	// Data.
@@ -654,17 +654,18 @@ private:
 
   tree_constant_rep *make_unique_map (void);
 
   // We want to eliminate this, or at least make it private.
 
   tree_constant_rep::constant_type const_type (void) const
     { return rep->const_type (); }
 
-  void convert_to_matrix_type (void) { rep->convert_to_matrix_type (); }
+  void convert_to_matrix_type (int make_complex)
+    { rep->convert_to_matrix_type (make_complex); }
 
   // Can we make these go away?
 
   // These need better names, since a range really is a numeric type.
 
   void force_numeric (int frc_str_conv = 0)
     { rep->force_numeric (frc_str_conv); }
 
