# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1292607580 28800
#      Fri Dec 17 09:39:40 2010 -0800
# Node ID 567ca09a97aa6417590481ce7a43c13648e7471a
# Parent  572a318eb715ae50b7b34b8302cb905f8a91bc39
Remove obsolete documentation about 64-bit integer arithmetic.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-12-17  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/numbers.txi: Remove obsolete documentation about 64-bit
+	integer arithmetic.
+
 2010-12-16  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/doccheck/mk_undocumented_list: Update list of exception
 	functions not requiring documentation.
 
 2010-12-09  Doug Stewart <doug.dastew@gmail.com>
 
 	* interpreter/plot.txi: changed origial to origin in Quiver section
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -547,35 +547,28 @@ when converted.
 @subsection Integer Arithmetic
 
 While many numerical computations can't be carried out in integers,
 Octave does support basic operations like addition and multiplication
 on integers.  The operators @code{+}, @code{-}, @code{.*}, and @code{./}
 work on integers of the same type.  So, it is possible to add two 32 bit
 integers, but not to add a 32 bit integer and a 16 bit integer.
 
-The arithmetic operations on integers are performed by casting the
-integer values to double precision values, performing the operation, and
-then re-casting the values back to the original integer type.  As the
-double precision type of Octave is only capable of representing integers
-with up to 53 bits of precision, it is not possible to perform
-arithmetic with 64 bit integer types.
-
 When doing integer arithmetic one should consider the possibility of
 underflow and overflow.  This happens when the result of the computation
 can't be represented using the chosen integer type.  As an example it is
 not possible to represent the result of @math{10 - 20} when using
 unsigned integers.  Octave makes sure that the result of integer
 computations is the integer that is closest to the true result.  So, the
 result of @math{10 - 20} when using unsigned integers is zero.
 
 When doing integer division Octave will round the result to the nearest
 integer.  This is different from most programming languages, where the
 result is often floored to the nearest integer.  So, the result of
-@code{int32(5)./int32(8)} is @code{1}.
+@code{int32(5) ./ int32(8)} is @code{1}.
 
 @DOCSTRING(idivide)
 
 @node Bit Manipulations
 @section Bit Manipulations
 
 Octave provides a number of functions for the manipulation of numeric
 values on a bit by bit basis.  The basic functions to set and obtain the
@@ -684,17 +677,17 @@ data = [ 1, 2; 3, 4 ];
 idx = (data <= 2);
 data(idx)
      @result{} ans = [ 1; 2 ]
 @end group
 @end example
 
 @noindent
 Instead of creating the @code{idx} array it is possible to replace
-@code{data(idx)} with @code{data( data <= 2 )} in the above code.
+@code{data(idx)} with @w{@code{data( data <= 2 )}} in the above code.
 
 Logical values can also be constructed by
 casting numeric objects to logical values, or by using the @code{true}
 or @code{false} functions.
 
 @DOCSTRING(logical)
 
 @DOCSTRING(true)
