# HG changeset patch
# User dbateman
# Date 1179150994 0
#      Mon May 14 13:56:34 2007 +0000
# Node ID 66e30383481bf8d73215e8729ded9450dc224558
# Parent  687ae48b2253e178888826653d86fb26d6c64cc6
[project @ 2007-05-14 13:56:34 by dbateman]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-04-18  Søren Hauberg  <hauberg@gmail.com>
+
+	* interpreter/package.texi: Document "*" flag for loaded packages.
+
 2007-05-09  David Bateman  <dbateman@free.fr>
 
 	* faq/Octave-FAQ.texi: Update compatibility section.
 
 2007-04-27  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in (EXAMPLE_FILES_NODIR): Add mycell.c, myfeval.c,
 	myfunc.c, mypow2.c, mysparse.c, mystring.c, mystruct.c and
diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -44,25 +44,26 @@ upgrade and downgrade the version of a p
 impossible to have several versions of the same package installed at
 once.
 
 To see which packages are installed type
 
 @example
 @group
 pkg list
-     @print{} Package Name | Version | Installation directory
-     @print{} -------------+---------+-----------------------
-     @print{}        image |   1.0.0 | /home/jwe/octave/image-1.0.0
+     @print{} Package Name  | Version | Installation directory
+     @print{} --------------+---------+-----------------------
+     @print{}        image *|   1.0.0 | /home/jwe/octave/image-1.0.0
 @end group
 @end example
 
 @noindent
 In this case only version 1.0.0 of the @code{image} package is
-installed.
+installed. The '*' character next to the package name shows that the
+image package is loaded and ready for use.
 
 It is possible to remove a package from the system using the
 @code{pkg uninstall} command like this
 
 @example
 pkg uninstall image
 @end example
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-05-14  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m: Mark loaded packages with "*".
+
 2007-05-13  Søren Hauberg <soren@hauberg.org>
 
 	* miscellaneous/single.m: Doc fix.
 	Convert to double instead of returning argument unchanged.
 
 	* miscellaneous/doc.m: Doc fix.
 
 	* miscellaneous/ver.m: Doc fix.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -40,17 +40,17 @@
 ## If @var{option} is @code{-noauto} the package manager will not
 ## automatically load the installed package when starting Octave,
 ## even if the package requests that it is.
 ##
 ## If @var{option} is @code{-auto} the package manager will
 ## automatically load the installed package when starting Octave,
 ## even if the package requests that it isn't.
 ##
-## Final if @var{option} is @code{-verbose} the package manager will
+## Finally, if @var{option} is @code{-verbose} the package manager will
 ## print the output of all of the commands that are performed
 ## @item uninstall
 ## Uninstall named packages.  For example,
 ## @example
 ## pkg uninstall image
 ## @end example
 ## @noindent
 ## removes the @code{image} package from the system. If another installed
@@ -1233,16 +1233,26 @@ function [out1, out2] = installed_packag
 	dup = [dup, j];
       endif
     endfor
   endfor
   if (! isempty(dup))
     installed_packages(dup) = [];
   endif  
 
+  ## Now check if the package is loaded
+  tmppath = path();
+  for i = 1:length (installed_packages)
+    if (regexp (tmppath, installed_packages{i}.dir))
+      installed_packages{i}.loaded = true;
+    else
+      installed_packages{i}.loaded = false;
+    endif
+  endfor
+
   ## Should we return something?
   if (nargout == 2)
     out1 = local_packages;
     out2 = global_packages;
     return;
   elseif (nargout == 1)
     out1 = installed_packages;
     return;
@@ -1264,36 +1274,41 @@ function [out1, out2] = installed_packag
   names = cell (num_packages, 1); 
   for i = 1:num_packages
     max_name_length = max (max_name_length,
 			   length (installed_packages{i}.name));
     max_version_length = max (max_version_length,
 			      length (installed_packages{i}.version));
     names{i} = installed_packages{i}.name;
   endfor
-  h1 = postpad (h1, max_name_length, " ");
+  h1 = postpad (h1, max_name_length + 1, " ");
   h2 = postpad (h2, max_version_length, " ");;
 
   ## Print a header
   header = sprintf("%s | %s | %s\n", h1, h2, h3);
   printf (header);
   tmp = sprintf (repmat ("-", 1, length(header)-1));
   tmp(length(h1)+2) = "+";
   tmp(length(h1)+length(h2)+5) = "+";
   printf ("%s\n", tmp);
 
   ## Print the packages
-  format = sprintf ("%%%ds | %%%ds | %%s\n", max_name_length,
+  format = sprintf ("%%%ds %%1s| %%%ds | %%s\n", max_name_length,
 		    max_version_length);
   [dummy, idx] = sort (names);
   for i = 1:num_packages
     cur_name = installed_packages{idx(i)}.name;
     cur_version = installed_packages{idx(i)}.version;
     cur_dir = installed_packages{idx(i)}.dir;
-    printf (format, cur_name, cur_version, cur_dir);
+    if (installed_packages{idx(i)}.loaded)
+      cur_loaded = "*";
+    else
+      cur_loaded = " ";
+    endif
+    printf (format, cur_name, cur_loaded, cur_version, cur_dir);
   endfor
 endfunction
 
 function load_packages (files, handle_deps, local_list, global_list)
   installed_packages = installed_packages (local_list, global_list);
   num_packages = length (installed_packages);
 
   ## Read package names and installdirs into a more convenient format
