# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237745735 25200
#      Sun Mar 22 11:15:35 2009 -0700
# Node ID fca0dc2fb0420e214dbbfd836abf3daf4e9fc378
# Parent  4cb9f994dcecad437d4a978908b6bd9e976fe839
Cleanup documentation files stmt.texi and func.texi

Spellcheck
Style check (especially two spaces after period)
Info menu now uses @code macro when describing code statements such as while, for, if, etc.

diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -1080,17 +1080,17 @@ END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_COD
 @end example
 
 The disadvantage of this is that if the foreign code allocates any
 memory internally, then this memory might be lost during an interrupt,
 without being deallocated.  Therefore, ideally Octave itself should
 allocate any memory that is needed by the foreign code, with either the
 fortran_vec method or the @code{OCTAVE_LOCAL_BUFFER} macro.
 
-The Octave unwind_protect mechanism (@ref{The unwind_protect Statement})
+The Octave unwind_protect mechanism (@ref{The @code{unwind_protect} Statement})
 can also be used in oct-files.  In conjunction with the exception
 handling of Octave, it is important to enforce that certain code is run
 to allow variables, etc to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
 @longexamplefile{unwinddemo.cc}
 
 As can be seen in the example
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -39,17 +39,17 @@ An error is something that occurs when a
 it doesn't make sense to continue.  An example is when a function is
 called with too few input arguments.  In this situation the function
 should abort with an error message informing the user of the lacking
 input arguments.
 
 Since an error can occur during the evaluation of a program, it is
 very convenient to be able to detect that an error occurred, so that
 the error can be fixed.  This is possible with the @code{try} statement
-described in @ref{The try Statement}.
+described in @ref{The @code{try} Statement}.
 
 @menu
 * Raising Errors::
 * Catching Errors::
 @end menu
 
 @node Raising Errors
 @subsection Raising Errors
@@ -121,17 +121,17 @@ Invalid call to f.  Correct usage is:
 @DOCSTRING(beep)
 
 @DOCSTRING(beep_on_error)
 
 @node Catching Errors
 @subsection Catching Errors
 
 When an error occurs, it can be detected and handled using the
-@code{try} statement as described in @ref{The try Statement}.
+@code{try} statement as described in @ref{The @code{try} Statement}.
 As an example, the following piece of code counts the number of errors
 that occurs during a @code{for} loop.
 
 @example
 number_of_errors = 0;
 for n = 1:100
   try
     @dots{}
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -357,35 +357,35 @@ the @code{smallest} function is
 @example
 function val = smallest (arg1, arg2, arg3, arg4, arg5)
   @var{body}
 endfunction
 @end example
 
 @noindent
 and then use the value of @code{nargin} to determine which of the input
-arguments should be considered. The problem with this approach is
+arguments should be considered.  The problem with this approach is
 that it can only handle a limited number of input arguments.
 
 If the special parameter name @code{varargin} appears at the end of a
 function parameter list it indicates that the function takes a variable
 number of input arguments.  Using @code{varargin} the function
 looks like this
 
 @example
 function val = smallest (varargin)
   @var{body}
 endfunction
 @end example
 
 @noindent
 In the function body the input arguments can be accessed through the
-variable @code{varargin}. This variable is a cell array containing
-all the input arguments. @xref{Cell Arrays}, for details on working
-with cell arrays. The @code{smallest} function can now be defined
+variable @code{varargin}.  This variable is a cell array containing
+all the input arguments.  @xref{Cell Arrays}, for details on working
+with cell arrays.  The @code{smallest} function can now be defined
 like this
 
 @example
 function val = smallest (varargin)
   val = min ([varargin@{:@}]);
 endfunction
 @end example
 
@@ -499,27 +499,27 @@ endfunction
 
 Note that this function could not have been written using the
 @code{break} statement to exit the loop once a nonzero value is found
 without adding extra logic to avoid printing the message if the vector
 does contain a nonzero element.
 
 @deffn {Keyword} return
 When Octave encounters the keyword @code{return} inside a function or
-script, it returns control to the caller immediately. At the top level,
+script, it returns control to the caller immediately.  At the top level,
 the return statement is ignored.  A @code{return} statement is assumed
 at the end of every function definition.
 @end deffn
 
 @node Default Arguments
 @section Default Arguments
 @cindex default arguments
 
 Since Octave supports variable number of input arguments, it is very useful
-to assign default values to some input arguments. When an input argument
+to assign default values to some input arguments.  When an input argument
 is declared in the argument list it is possible to assign a default
 value to the argument like this
 
 @example
 function @var{name} (@var{arg1} = @var{val1}, @dots{})
   @var{body}
 endfunction
 @end example
@@ -631,24 +631,24 @@ ignore the time stamps for all function 
 * Function Locking::
 * Function Precedence::
 @end menu
 
 @node Manipulating the load path
 @subsection Manipulating the load path
 
 When a function is called, Octave searches a list of directories for
-a file that contains the function declaration. This list of directories
-is known as the load path. By default the load path contains
+a file that contains the function declaration.  This list of directories
+is known as the load path.  By default the load path contains
 a list of directories distributed with Octave plus the current
-working directory. To see your current load path call the @code{path}
+working directory.  To see your current load path call the @code{path}
 function without any input or output arguments.
 
 It is possible to add or remove directories to or from the load path
-using @code{addpath} and @code{rmpath}. As an example, the following
+using @code{addpath} and @code{rmpath}.  As an example, the following
 code adds @samp{~/Octave} to the load path.
 
 @example
 addpath("~/Octave")
 @end example
 
 @noindent
 After this the directory @samp{~/Octave} will be searched for functions.
@@ -707,24 +707,24 @@ subfunctions @code{g} and @code{h} may o
 function @code{f} or from the other subfunctions, but not from outside
 the file @file{f.m}.
 
 @node Private Functions
 @subsection Private Functions
 
 In many cases one function needs to access one or more helper
 functions.  If the helper function is limited to the scope of a single
-function, then subfunctions as discussed above might be used. However,
+function, then subfunctions as discussed above might be used.  However,
 if a single helper function is used by more than one function, then
 this is no longer possible.  In this case the helper functions might
 be placed in a subdirectory, called "private", of the directory in which
 the functions needing access to this helper function are found.
 
 As a simple example, consider a function @code{func1}, that calls a helper
-function @code{func2} to do much of the work. For example
+function @code{func2} to do much of the work.  For example
 
 @example
 @group
 function y = func1 (x)
   y = func2 (x);
 endfunction
 @end group
 @end example
@@ -734,19 +734,19 @@ Then if the path to @code{func1} is @cod
 @code{func2} is found in the directory @code{<directory>/private/func2.m}, 
 then @code{func2} is only available for use of the functions, like 
 @code{func1}, that are found in @code{<directory>}.
 
 @node Overloading and Autoloading
 @subsection Overloading and Autoloading
 
 The @code{dispatch} function can be used to alias one function name to
-another. It can be used to alias all calls to a particular function name
+another.  It can be used to alias all calls to a particular function name
 to another function, or the alias can be limited to only a particular
-variable type. Consider the example
+variable type.  Consider the example
 
 @example
 @group
 function y = spsin (x)
   printf ("Calling spsin\n");
   fflush(stdout);
   y = spfun ("sin", x);
 endfunction
@@ -754,44 +754,44 @@ endfunction
 dispatch ("sin", "spsin", "sparse matrix");
 y0 = sin(eye(3));
 y1 = sin(speye(3));
 @end group
 @end example
 
 @noindent
 which aliases the user-defined function @code{spsin} to @code{sin}, but only for real sparse
-matrices. Note that the builtin @code{sin} already  correctly treats
+matrices.  Note that the builtin @code{sin} already  correctly treats
 sparse matrices and so this example is only illustrative.
 
 @DOCSTRING(dispatch)
 
 @DOCSTRING(builtin)
 
 A single dynamically linked file might define several
-functions. However, as Octave searches for functions based on the
+functions.  However, as Octave searches for functions based on the
 functions filename, Octave needs a manner in which to find each of the
-functions in the dynamically linked file. On operating systems that
+functions in the dynamically linked file.  On operating systems that
 support symbolic links, it is possible to create a symbolic link to the
 original file for each of the functions which it contains.
 
 However, there is at least one well known operating system that doesn't
-support symbolic links. Making copies of the original file for each of
+support symbolic links.  Making copies of the original file for each of
 the functions is undesirable as it increases the
-amount of disk space used by Octave. Instead Octave supplies the
+amount of disk space used by Octave.  Instead Octave supplies the
 @code{autoload} function, that permits the user to define in which
 file a certain function will be found.
 
 @DOCSTRING(autoload)
 
 @node Function Locking
 @subsection Function Locking
 
 It is sometime desirable to lock a function into memory with the
-@code{mlock} function. This is typically used for dynamically linked
+@code{mlock} function.  This is typically used for dynamically linked
 functions in Oct-files or mex-files that contain some initialization,
 and it is desirable that calling @code{clear} does not remove this
 initialization.
 
 As an example,
 
 @example
 mlock ("my_function");
@@ -859,19 +859,19 @@ effect in Octave, though a similar effec
 
 @DOCSTRING(munlock)
 
 @DOCSTRING(mislocked)
 
 @node Function Precedence
 @subsection Function Precedence
 
-Given the numereous different ways that Octave can define a function, it
+Given the numerous different ways that Octave can define a function, it
 is possible and even likely that multiple versions of a function, might be
-defined within a particular scope. The precedence of which function will be
+defined within a particular scope.  The precedence of which function will be
 used within a particular scope is given by
 
 @enumerate 1
 @item Subfunction
 A subfunction with the required function name in the given scope.
 
 @item Private function
 A function defined within a private directory of the directory 
@@ -890,17 +890,17 @@ An overloaded function as defined by @xr
 
 @item Command-line Function
 A function that has been defined on the command-line.
 
 @item Autoload function
 A function that is marked as autoloaded with @xref{doc-autoload}.
 
 @item A Function on the Path
-A function that can be found on the users load-path. There can also be
+A function that can be found on the users load-path.  There can also be
 Oct-file, mex-file or m-file versions of this function and the precedence
 between these versions are in that order.
 
 @item Built-in function
 A function that is builtin to Octave itself such as @code{numel},
 @code{size}, etc.
 @end enumerate
 
@@ -934,17 +934,17 @@ effect, like this:
 # Prevent Octave from thinking that this
 # is a function file:
 
 1;
 
 # Define function one:
 
 function one ()
-  ...
+  @dots{}
 @end group
 @end example
 
 To have Octave read and compile these functions into an internal form,
 you need to make sure that the file is in Octave's load path
 (accessible through the @code{path} function), then simply type the
 base name of the file that contains the commands.  (Octave uses the
 same rules to search for script files as it does to search for
@@ -1010,19 +1010,19 @@ execute commands from any file.
 
 @node Function Handles Inline Functions and Anonymous Functions
 @section Function Handles, Inline Functions, and Anonymous Functions
 @cindex handle, function handles
 @cindex inline, inline functions
 @cindex anonymous functions
 
 It can be very convenient store a function in a variable so that it
-can be passed to a different function. For example, a function that
-performs numerical minimisation needs access to the function that 
-should be minimised.
+can be passed to a different function.  For example, a function that
+performs numerical minimization needs access to the function that 
+should be minimized.
 
 @menu
 * Function Handles::
 * Anonymous Functions::
 * Inline Functions::
 @end menu
 
 @node Function Handles
@@ -1121,17 +1121,17 @@ adapts a function with several parameter
 @code{quad}.  In this example, the values of @var{a} and @var{b} that
 are passed to @code{betainc} are inherited from the current
 environment.
 
 @node Inline Functions
 @subsection Inline Functions
 
 An inline function is created from a string containing the function
-body using the @code{inline} function. The following code defines the
+body using the @code{inline} function.  The following code defines the
 function @math{f(x) = x^2 + 2}.
 
 @example
 f = inline("x^2 + 2");
 @end example
 
 @noindent
 After this it is possible to evaluate @math{f} at any @math{x} by
@@ -1146,17 +1146,17 @@ writing @code{f(x)}.
 @DOCSTRING(vectorize)
 
 @DOCSTRING(symvar)
 
 @node Commands
 @section Commands
 
 Commands are a special class of functions that only accept string
-input arguments. A command can be called as an ordinary function, but
+input arguments.  A command can be called as an ordinary function, but
 it can also be called without the parentheses like the following example
 shows
 
 @example
 my_command hello world
 @end example
 
 @noindent
@@ -1186,19 +1186,19 @@ with the @code{mark_as_command} command 
 @example
 mark_as_command name
 @end example
 
 @noindent
 where @code{name} is the function to be marked as a command.
 
 One difficulty of commands occurs when one of the string input arguments
-are stored in a variable. Since Octave can't tell the difference between
+are stored in a variable.  Since Octave can't tell the difference between
 a variable name, and an ordinary string, it is not possible to pass a
-variable as input to a command. In such a situation a command must be
+variable as input to a command.  In such a situation a command must be
 called as a function.
 
 @DOCSTRING(mark_as_command)
 
 @DOCSTRING(unmark_command)
 
 @DOCSTRING(iscommand)
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -355,25 +355,25 @@ Boolean Expressions
 
 Evaluation
 
 * Calling a Function by its Name::
 * Evaluation in a Different Context::
 
 Statements
 
-* The if Statement::            
-* The switch Statement::        
-* The while Statement::         
-* The do-until Statement::      
-* The for Statement::           
-* The break Statement::         
-* The continue Statement::      
-* The unwind_protect Statement::  
-* The try Statement::           
+* The @code{if} Statement::            
+* The @code{switch} Statement::        
+* The @code{while} Statement::         
+* The @code{do-until} Statement::      
+* The @code{for} Statement::           
+* The @code{break} Statement::         
+* The @code{continue} Statement::      
+* The @code{unwind_protect} Statement::  
+* The @code{try} Statement::           
 * Continuation Lines::          
 
 The @code{switch} Statement
 
 * Notes for the C programmer::  
 
 The @code{for} Statement
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -42,29 +42,29 @@ but using the more specific keywords is 
 them, Octave is able to provide better diagnostics for mismatched or
 missing end tokens.
 
 The list of statements contained between keywords like @code{if} or
 @code{while} and the corresponding end statement is called the
 @dfn{body} of a control statement.
 
 @menu
-* The if Statement::            
-* The switch Statement::        
-* The while Statement::         
-* The do-until Statement::      
-* The for Statement::           
-* The break Statement::         
-* The continue Statement::      
-* The unwind_protect Statement::  
-* The try Statement::           
+* The @code{if} Statement::            
+* The @code{switch} Statement::        
+* The @code{while} Statement::         
+* The @code{do-until} Statement::      
+* The @code{for} Statement::           
+* The @code{break} Statement::         
+* The @code{continue} Statement::      
+* The @code{unwind_protect} Statement::  
+* The @code{try} Statement::           
 * Continuation Lines::          
 @end menu
 
-@node The if Statement
+@node The @code{if} Statement
 @section The @code{if} Statement
 @cindex @code{if} statement
 @cindex @code{else} statement
 @cindex @code{elseif} statement
 @cindex @code{endif} statement
 
 The @code{if} statement is Octave's decision-making statement.  There
 are three basic forms of an @code{if} statement.  In its simplest form,
@@ -203,56 +203,56 @@ else
   endif
 @end group
 @end example
 
 @noindent
 using the indentation to show how Octave groups the statements.
 @xref{Functions and Scripts}.
 
-@node The switch Statement
+@node The @code{switch} Statement
 @section The @code{switch} Statement
 @cindex @code{switch} statement
 @cindex @code{case} statement
 @cindex @code{otherwise} statement
 @cindex @code{endswitch} statement
 
 It is very common to take different actions depending on the value of
-one variable. This is possible using the @code{if} statement in the
+one variable.  This is possible using the @code{if} statement in the
 following way
 
 @example
 if (X == 1)
   do_something ();
 elseif (X == 2)
   do_something_else ();
 else
   do_something_completely_different ();
 endif
 @end example
 
 @noindent
 This kind of code can however be very cumbersome to both write and
-maintain. To overcome this problem Octave supports the @code{switch}
-statement. Using this statement, the above example becomes
+maintain.  To overcome this problem Octave supports the @code{switch}
+statement.  Using this statement, the above example becomes
 
 @example
 switch (X)
   case 1
     do_something ();
   case 2
     do_something_else ();
   otherwise
     do_something_completely_different ();
 endswitch
 @end example
 
 @noindent
 This code makes the repetitive structure of the problem more explicit,
-making the code easier to read, and hence maintain. Also, if the
+making the code easier to read, and hence maintain.  Also, if the
 variable @code{X} should change its name, only one line would need
 changing compared to one line per case when @code{if} statements are
 used.
 
 The general form of the @code{switch} statement is
 
 @example
 @group
@@ -265,26 +265,26 @@ switch @var{expression}
 
   otherwise
     @var{command_list}
 endswitch
 @end group
 @end example
 
 @noindent
-where @var{label} can be any expression. However, duplicate
+where @var{label} can be any expression.  However, duplicate
 @var{label} values are not detected, and only the @var{command_list}
-corresponding to the first match will be executed. For the
+corresponding to the first match will be executed.  For the
 @code{switch} statement to be meaningful at least one
 @code{case @var{label} @var{command_list}} clause must be present,
 while the @code{otherwise @var{command_list}} clause is optional.
 
 If @var{label} is a cell array the corresponding @var{command_list}
 is executed if @emph{any} of the elements of the cell array match
-@var{expression}. As an example, the following program will print
+@var{expression}.  As an example, the following program will print
 @samp{Variable is either 6 or 7}.
 
 @example
 A = 7;
 switch A
   case @{ 6, 7 @}
     printf ("variable is either 6 or 7\n");
   otherwise
@@ -294,17 +294,17 @@ endswitch
 
 As with all other specific @code{end} keywords, @code{endswitch} may be
 replaced by @code{end}, but you can get better diagnostics if you use
 the specific forms.
 
 @c Strings can be matched
 
 One advantage of using the @code{switch} statement compared to using
-@code{if} statements is that the @var{label}s can be strings. If an
+@code{if} statements is that the @var{label}s can be strings.  If an
 @code{if} statement is used it is @emph{not} possible to write
 
 @example
 if (X == "a string") # This is NOT valid
 @end example
 
 @noindent
 since a character-to-character comparison between @code{X} and the
@@ -323,17 +323,17 @@ endswitch
 @menu
 * Notes for the C programmer::  
 @end menu
 
 @node Notes for the C programmer
 @subsection Notes for the C programmer
 
 The @code{switch} statement is also available in the widely used C
-programming language. There are, however, some differences
+programming language.  There are, however, some differences
 between the statement in Octave and C
 
 @itemize @bullet
 @item
 Cases are exclusive, so they don't `fall through' as do the cases
 in the @code{switch} statement of the C language.
 
 @item
@@ -358,31 +358,31 @@ switch (foo)
   case (1)
   case (2)
     doit ();
   @dots{}
 @end group
 @end example
 
 @noindent
-particularly for C programmers. If @code{doit()} should be executed if
+particularly for C programmers.  If @code{doit()} should be executed if
 @var{foo} is either @code{1} or @code{2}, the above code should be
 written with a cell array like this
 
 @example
 @group
 switch (foo)
   case @{ 1, 2 @}
     doit ();
   @dots{}
 @end group
 @end example
 @end itemize
 
-@node The while Statement
+@node The @code{while} Statement
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
 be) executed two or more times in succession.
@@ -441,17 +441,17 @@ 10.  This is the case when @code{i} equa
 values in the sequence.  Then the @code{i++} increments the value of
 @code{i} and the loop repeats.  The loop terminates when @code{i}
 reaches 11.
 
 A newline is not required between the condition and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@node The do-until Statement
+@node The @code{do-until} Statement
 @section The @code{do-until} Statement
 @cindex @code{do-until} statement
 
 The @code{do-until} statement is similar to the @code{while} statement,
 except that it repeatedly executes a statement until a condition becomes
 true, and the test of the condition is at the end of the loop, so the
 body of the loop is always executed at least once.  As with the
 condition in an @code{if} statement, the condition in a @code{do-until}
@@ -488,17 +488,17 @@ do
 until (i == 10)
 @end group
 @end example
 
 A newline is not required between the @code{do} keyword and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@node The for Statement
+@node The @code{for} Statement
 @section The @code{for} Statement
 @cindex @code{for} statement
 @cindex @code{endfor} statement
 
 The @code{for} statement makes it more convenient to count iterations of a
 loop.  The general form of the @code{for} statement looks like this:
 
 @example
@@ -543,37 +543,37 @@ This code works by first evaluating the 
 produce a range of values from 3 to 10 inclusive.  Then the variable
 @code{i} is assigned the first element of the range and the body of the
 loop is executed once.  When the end of the loop body is reached, the
 next value in the range is assigned to the variable @code{i}, and the
 loop body is executed again.  This process continues until there are no
 more elements to assign.
 
 Within Octave is it also possible to iterate over matrices or cell arrays
-using the @code{for} statement. For example consider
+using the @code{for} statement.  For example consider
 
 @example
 @group
 disp("Loop over a matrix")
 for i = [1,3;2,4]
   i
 endfor
 disp("Loop over a cell array")
 for i = @{1,"two";"three",4@}
   i
 endfor
 @end group 
 @end example
 
 @noindent
 In this case the variable @code{i} takes on the value of the columns of
-the matrix or cell matrix. So the first loop iterates twice, producing
+the matrix or cell matrix.  So the first loop iterates twice, producing
 two column vectors @code{[1;2]}, followed by @code{[3;4]}, and likewise
-for the loop over the cell array. This can be extended to loops over
-multidimensional arrays. For example
+for the loop over the cell array.  This can be extended to loops over
+multidimensional arrays.  For example
 
 @example
 @group
 a = [1,3;2,4]; b = cat(3, a, 2*a);
 for i = c
   i
 endfor
 @end group 
@@ -611,17 +611,17 @@ for [ @var{val}, @var{key} ] = @var{expr
 endfor
 @end group
 @end example
 
 @noindent
 In this form of the @code{for} statement, the value of @var{expression}
 must be a structure.  If it is, @var{key} and @var{val} are set to the
 name of the element and the corresponding value in turn, until there are
-no more elements. For example,
+no more elements.  For example,
 
 @example
 @group
 x.a = 1
 x.b = [1, 2; 3, 4]
 x.c = "string"
 for [val, key] = x
   key
@@ -645,17 +645,17 @@ The elements are not accessed in any par
 cycle through the list in a particular way, you will have to use the
 function @code{fieldnames} and sort the list yourself.
 
 The @var{key} variable may also be omitted.  If it is, the brackets are
 also optional.  This is useful for cycling through the values of all the
 structure elements when the names of the elements do not need to be
 known.
 
-@node The break Statement
+@node The @code{break} Statement
 @section The @code{break} Statement
 @cindex @code{break} statement
 
 The @code{break} statement jumps out of the innermost @code{for} or
 @code{while} loop that encloses it.  The @code{break} statement may only
 be used within the body of a loop.  The following example finds the
 smallest divisor of a given integer, and also identifies prime numbers:
 
@@ -700,17 +700,17 @@ while (1)
   if (div*div > num)
     printf ("%d is prime\n", num);
     break;
   endif
 endwhile
 @end group
 @end example
 
-@node The continue Statement
+@node The @code{continue} Statement
 @section The @code{continue} Statement
 @cindex @code{continue} statement
 
 The @code{continue} statement, like @code{break}, is used only inside
 @code{for} or @code{while} loops.  It skips over the rest of the loop
 body, causing the next cycle around the loop to begin immediately.
 Contrast this with @code{break}, which jumps out of the loop altogether.
 Here is an example:
@@ -749,17 +749,17 @@ would probably write the loop like this:
 for x = vec
   if (rem (x, 2) == 0)
     printf ("%d\n", x);
   endif
 endfor
 @end group
 @end example
 
-@node The unwind_protect Statement
+@node The @code{unwind_protect} Statement
 @section The @code{unwind_protect} Statement
 @cindex @code{unwind_protect} statement
 @cindex @code{unwind_protect_cleanup}
 @cindex @code{end_unwind_protect}
 
 Octave supports a limited form of exception handling modelled after the
 unwind-protect form of Lisp.  
 
@@ -777,17 +777,17 @@ end_unwind_protect
 
 @noindent
 where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are 
 guaranteed to be executed regardless of how control exits @var{body}.
 
 This is useful to protect temporary changes to global variables from
 possible errors.  For example, the following code will always restore
-the original value of the global variable @code{frobnositcate}
+the original value of the global variable @code{frobnosticate}
 even if an error occurs in the first part of the @code{unwind_protect}
 block.
 
 @example
 @group
 save_frobnosticate = frobnosticate;
 unwind_protect
   frobnosticate = true;
@@ -800,17 +800,17 @@ end_unwind_protect
 
 @noindent
 Without @code{unwind_protect}, the value of @var{frobnosticate}
 would not be restored if an error occurs while evaluating the first part
 of the @code{unwind_protect} block because evaluation would stop at the
 point of the error and the statement to restore the value would not be
 executed.
 
-@node The try Statement
+@node The @code{try} Statement
 @section The @code{try} Statement
 @cindex @code{try} statement
 @cindex @code{catch}
 @cindex @code{end_try_catch}
 
 In addition to unwind_protect, Octave supports another limited form of
 exception handling.
 
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -121,17 +121,17 @@ endfor
 
 @item
 Avoid calling @code{eval} or @code{feval} whenever possible, because
 they require Octave to parse input or look up the name of a function in
 the symbol table.
 
 If you are using @code{eval} as an exception handling mechanism and not
 because you need to execute some arbitrary text, use the @code{try}
-statement instead.  @xref{The try Statement}.
+statement instead.  @xref{The @code{try} Statement}.
 
 @item
 If you are calling lots of functions but none of them will need to
 change during your run, set the variable
 @code{ignore_function_time_stamp} to @code{"all"} so that Octave doesn't
 waste a lot of time checking to see if you have updated your function
 files.
 @end itemize
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -27,49 +27,49 @@
 ## 
 ## @itemize @bullet
 ## @item
 ## If the function @var{name} is available in a file on your path and
 ## that file is modifiable, then it will be edited in place.  If it 
 ## is a system function, then it will first be copied to the directory
 ## @code{HOME} (see further down) and then edited.  
 ## If no file is found, then the m-file 
-## variant, ending with ".m", will be considered. If still no file
+## variant, ending with ".m", will be considered.  If still no file
 ## is found, then variants with a leading "@@" and then with both a
 ## leading "@@" and trailing ".m" will be considered.
 ##
 ## @item
 ## If @var{name} is the name of a function defined in the interpreter but 
 ## not in an m-file, then an m-file will be created in @code{HOME}
 ## to contain that function along with its current definition.  
 ##
 ## @item
 ## If @code{name.cc} is specified, then it will search for @code{name.cc}
 ## in the path and try to modify it, otherwise it will create a new
 ## @file{.cc} file in @code{HOME}.  If @var{name} happens to be an
 ## m-file or interpreter defined function, then the text of that
 ## function will be inserted into the .cc file as a comment.
 ##
 ## @item
-## If @var{name.ext} is on your path then it will be editted, otherwise
+## If @var{name.ext} is on your path then it will be edited, otherwise
 ## the editor will be started with @file{HOME/name.ext} as the
 ## filename.  If @file{name.ext} is not modifiable, it will be copied to
 ## @code{HOME} before editing.
 ##
 ## @strong{WARNING!} You may need to clear name before the new definition
 ## is available.  If you are editing a .cc file, you will need
 ## to mkoctfile @file{name.cc} before the definition will be available.
 ## @end itemize
 ##
 ## If @code{edit} is called with @var{field} and @var{value} variables,
 ## the value of the control field @var{field} will be @var{value}.
 ## If an output argument is requested and the first argument is @code{get}
 ## then @code{edit} will return the value of the control field @var{field}.
 ## If the control field does not exist, edit will return a structure 
-## containing all fields and values. Thus, @code{edit get all} returns
+## containing all fields and values.  Thus, @code{edit get all} returns
 ## a complete control structure.
 ## The following control fields are used:
 ##
 ## @table @samp
 ## @item editor
 ## This is the editor to use to modify the functions.  By default it uses
 ## Octave's @code{EDITOR} built-in function, which comes from 
 ## @code{getenv("EDITOR")} and defaults to @code{emacs}.  Use @code{%s}
@@ -80,25 +80,25 @@
 ## @item "xedit %s &"           
 ## pop up simple X11 editor in a separate window
 ## @item "gnudoit -q \"(find-file \\\"%s\\\")\""   
 ## Send it to current Emacs; must have @code{(gnuserv-start)} in @file{.emacs}.
 ## @end table
 ##
 ## See also field 'mode', which controls how the editor is run by Octave.
 ## 
-## On cygwin, you will need to convert the cygwin path to a windows
+## On Cygwin, you will need to convert the Cygwin path to a Windows
 ## path if you are using a native Windows editor.  For example
 ## @example
 ## '"C:/Program Files/Good Editor/Editor.exe" "$(cygpath -wa %s)"'
 ## @end example
 ##
 ## @item home
-## This is the location of user local m-files. Be be sure it is in your
-## path. The default is @file{~/octave}.
+## This is the location of user local m-files.  Be be sure it is in your
+## path.  The default is @file{~/octave}.
 ##
 ## @item author
 ## This is the name to put after the "## Author:" field of new functions.
 ## By default it guesses from the @code{gecos} field of password database.
 ## 
 ## @item email
 ## This is the e-mail address to list after the name in the author field.
 ## By default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
@@ -118,22 +118,22 @@
 ## @end table
 ## 
 ## Unless you specify @samp{pd}, edit will prepend the copyright statement 
 ## with "Copyright (C) yyyy Function Author".
 ## 
 ## @item mode
 ## This value determines whether the editor should be started in async mode
 ## (editor is started in the background and Octave continues) or sync mode
-## (Octave waits until the editor exits). Set it to "async" to start the editor
-## in async mode. The default is "sync" (see also "system").
+## (Octave waits until the editor exits).  Set it to "async" to start the editor
+## in async mode.  The default is "sync" (see also "system").
 ##
 ## @item editinplace
 ## Determines whether files should be edited in place, without regard to 
-## whether they are modifiable or not. The default is @code{false}.
+## whether they are modifiable or not.  The default is @code{false}.
 ## @end table
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
diff --git a/scripts/miscellaneous/symvar.m b/scripts/miscellaneous/symvar.m
--- a/scripts/miscellaneous/symvar.m
+++ b/scripts/miscellaneous/symvar.m
@@ -15,16 +15,16 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} symvar (@var{s})
 ## Identifies the argument names in the function defined by a string.
 ## Common constant names such as @code{pi}, @code{NaN}, @code{Inf},
-## @code{eps}, @code{i} or @code{j} are ignored. The arguments that are
-## found are returned in a cell array of strings. If no variables are
+## @code{eps}, @code{i} or @code{j} are ignored.  The arguments that are
+## found are returned in a cell array of strings.  If no variables are
 ## found then the returned cell array is empty.
 ## @end deftypefn
 
 function args = symvar (s)
   args = argnames (inline (s));
 endfunction
diff --git a/scripts/path/pathdef.m b/scripts/path/pathdef.m
--- a/scripts/path/pathdef.m
+++ b/scripts/path/pathdef.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{val} =} pathdef ()
 ## Return the default path for Octave.
 ## The path information is extracted from one of three sources.
 ## In order of preference, those are;
 ##
 ## @enumerate
 ## @item @file{~/.octaverc}
-## @item @file{<octave-home>/.../<version>/m/startup/octaverc}
+## @item @file{<octave-home>/@dots{}/<version>/m/startup/octaverc}
 ## @item Octave's path prior to changes by any octaverc.
 ## @end enumerate
 ## @seealso{path, addpath, rmpath, genpath, savepath, pathsep}
 ## @end deftypefn
 
 function val = pathdef ()
 
   ## Locate the site octaverc file.
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} savepath (@var{file})
-## Save the the portion of the current function search path, that is
+## Save the portion of the current function search path, that is
 ## not set during Octave's initialization process, to @var{file}.
 ## If @var{file} is omitted, @file{~/.octaverc} is used.  If successful,
 ## @code{savepath} returns 0.
 ## @seealso{path, addpath, rmpath, genpath, pathdef, pathsep}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@givebillmoney.com>
 
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -76,17 +76,17 @@ some other function for the given type s
 }
 
 DEFUN_DLD (dispatch, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dispatch (@var{f}, @var{r}, @var{type})\n\
 \n\
 Replace the function @var{f} with a dispatch so that function @var{r}\n\
 is called when @var{f} is called with the first argument of the named\n\
-@var{type}. If the type is @var{any} then call @var{r} if no other type\n\
+@var{type}.  If the type is @var{any} then call @var{r} if no other type\n\
 matches.  The original function @var{f} is accessible using\n\
 @code{builtin (@var{f}, @dots{})}.\n\
 \n\
 If @var{r} is omitted, clear dispatch function associated with @var{type}.\n\
 \n\
 If both @var{r} and @var{type} are omitted, list dispatch functions\n\
 for @var{f}.\n\
 @seealso{builtin}\n\
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -597,21 +597,21 @@ octave_fcn_inline::convert_to_str_intern
 
 DEFUNX ("inline", Finline, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} inline (@var{str})\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{arg1}, @dots{})\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{n})\n\
 Create an inline function from the character string @var{str}.\n\
 If called with a single argument, the arguments of the generated\n\
-function are extracted from the function itself. The generated\n\
-function arguments will then be in alphabetical order. It should\n\
+function are extracted from the function itself.  The generated\n\
+function arguments will then be in alphabetical order.  It should\n\
 be noted that i, and j are ignored as arguments due to the\n\
 ambiguity between their use as a variable or their use as an inbuilt\n\
-constant. All arguments followed by a parenthesis are considered\n\
+constant.  All arguments followed by a parenthesis are considered\n\
 to be functions.\n\
 \n\
 If the second and subsequent arguments are character strings,\n\
 they are the names of the arguments of the function.\n\
 \n\
 If the second argument is an integer @var{n}, the arguments are\n\
 @code{\"x\"}, @code{\"P1\"}, @dots{}, @code{\"P@var{N}\"}.\n\
 @seealso{argnames, formula, vectorize}\n\
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3451,29 +3451,29 @@ load_fcn_from_file (const std::string& f
 
 DEFUN (autoload, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} autoload (@var{function}, @var{file})\n\
 Define @var{function} to autoload from @var{file}.\n\
 \n\
 The second argument, @var{file}, should be an absolute file name or\n\
 a file name in the same directory as the function or script from which\n\
-the autoload command was run. @var{file} should not depend on the\n\
+the autoload command was run.  @var{file} should not depend on the\n\
 Octave load path.\n\
 \n\
 Normally, calls to @code{autoload} appear in PKG_ADD script files that\n\
 are evaluated when a directory is added to the Octave's load path.  To\n\
 avoid having to hardcode directory names in @var{file}, if @var{file}\n\
 is in the same directory as the PKG_ADD script then\n\
 \n\
 @example\n\
 autoload (\"foo\", \"bar.oct\");\n\
 @end example\n\
 \n\
-will load the function @code{foo} from the file @code{bar.oct}. The above\n\
+will load the function @code{foo} from the file @code{bar.oct}.  The above\n\
 when @code{bar.oct} is not in the same directory or uses like\n\
 \n\
 @example\n\
 autoload (\"foo\", file_in_loadpath (\"bar.oct\"))\n\
 @end example\n\
 \n\
 @noindent\n\
 are strongly discouraged, as their behavior might be unpredictable.\n\
