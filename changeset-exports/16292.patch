# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363155950 14400
#      Wed Mar 13 02:25:50 2013 -0400
# Node ID 6ce905b89cee5645a2dc4cd541509c59b6a58942
# Parent  c22a6cecaeddcdccede33876e6c6b1dfcf6841d6
delete unused obsolete code

* lex.h, lex.ll (stream_reader): Delete unused class declaration.
(cleanup_parser): Delete unused function and declaration.
(match_any): Delete unused static function.
* toplev.cc (do_octave_atexit): Don't call cleanup_parser.

diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -1053,18 +1053,16 @@ do_octave_atexit (void)
       OCTAVE_SAFE_CALL (gtk_manager::unload_all_toolkits, ());
 
       OCTAVE_SAFE_CALL (close_files, ());
 
       OCTAVE_SAFE_CALL (cleanup_tmp_files, ());
 
       OCTAVE_SAFE_CALL (symbol_table::cleanup, ());
 
-      OCTAVE_SAFE_CALL (cleanup_parser, ());
-
       OCTAVE_SAFE_CALL (sysdep_cleanup, ());
 
       OCTAVE_SAFE_CALL (flush_octave_stdout, ());
 
       if (! quitting_gracefully && (interactive || forced_interactive))
         {
           octave_stdout << "\n";
 
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -28,39 +28,19 @@ along with Octave; see the file COPYING.
 #include <list>
 #include <set>
 #include <stack>
 
 #include "comment-list.h"
 #include "input.h"
 #include "token.h"
 
-extern OCTINTERP_API void cleanup_parser (void);
-
 // Is the given string a keyword?
 extern bool is_keyword (const std::string& s);
 
-class
-stream_reader
-{
-public:
-  virtual int getc (void) = 0;
-  virtual int ungetc (int c) = 0;
-
-protected:
-  stream_reader (void) { }
-  ~stream_reader (void) { }
-
-private:
-
-  // No copying!
-  stream_reader (const stream_reader&);
-  stream_reader& operator = (const stream_reader&);
-};
-
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   // Track nesting of square brackets, curly braces, and parentheses.
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1286,36 +1286,16 @@ display_character (char c)
         break;
 
       case 127:
         std::cerr << "DEL";
         break;
       }
 }
 
-void
-cleanup_parser (void)
-{
-}
-
-// Return 1 if the given character matches any character in the given
-// string.
-
-static bool
-match_any (char c, const char *s)
-{
-  char tmp;
-  while ((tmp = *s++) != '\0')
-    {
-      if (c == tmp)
-        return true;
-    }
-  return false;
-}
-
 bool
 is_keyword (const std::string& s)
 {
   // Parsing function names like "set.property_name" inside
   // classdef-style class definitions is simplified by handling the
   // "set" and "get" portions of the names using the same mechanism as
   // is used for keywords.  However, they are not really keywords in
   // the language, so omit them from the list of possible keywords.
