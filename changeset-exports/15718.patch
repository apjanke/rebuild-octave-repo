# HG changeset patch
# User Rik <rik@octave.org>
# Date 1354551497 28800
#      Mon Dec 03 08:18:17 2012 -0800
# Node ID d1285ebe60caf4ab2e73697c7481f5e391770b75
# Parent  3d23579696277c99a6f38ffc012baf8f2da053d0
cmpermute.m: Expand to accept indexed image formats uint16 and single.

* cmpermute.m: Expand to accept indexed image formats uint16 and single.
Remove FIXME note.

diff --git a/scripts/image/cmpermute.m b/scripts/image/cmpermute.m
--- a/scripts/image/cmpermute.m
+++ b/scripts/image/cmpermute.m
@@ -20,18 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{Y}, @var{newmap}] =} cmpermute (@var{X}, @var{map})
 ## @deftypefnx {Function File} {[@var{Y}, @var{newmap}] =} cmpermute (@var{X}, @var{map}, @var{index})
 ## Reorder colors in a colormap.
 ##
 ## When called with only two arguments, @code{cmpermute} randomly rearranges
 ## the colormap @var{map} and returns a new colormap @var{newmap}.  It also
 ## returns the indexed image @var{Y} which is the equivalent of the original
-## input image @var{X} when displayed using @var{newmap}.  The input image
-## @var{X} must be an indexed image of class uint8 or double.
+## input image @var{X} when displayed using @var{newmap}.  
 ##
 ## When called with an optional third argument the order of colors in the
 ## new colormap is defined by @var{index}.
 ##
 ## @strong{Caution:} @code{index} should not have repeated elements or the
 ## function will fail.
 ##
 ## @end deftypefn
@@ -39,19 +38,19 @@
 ## Author:  Josep Mones i Teixidor <jmones@puntbarra.com>
 
 function [Y, newmap] = cmpermute (X, map, index)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  ## FIXME: Matlab only accepts 2 types.  Expand to uint16 & single??
-  if (! (isa (X, "uint8") || isa (X, "double")))
-    error ("cmpermute: X must be of class uint8 or double");
+  cls = class (X);
+  if (! any (strcmp (cls, {"uint8", "uint16", "single", "double"})))
+    error ("cmpermute: invalid data type '%s'", cls);
   endif
 
   if (! isreal (X) || issparse (X)
       || (isfloat (X) && (any (X(:) < 1 || any (X(:) != fix (X(:)))))))
     error ("cmpermute: X must be an indexed image");
   endif
 
   if (! iscolormap (map))
@@ -66,23 +65,27 @@ function [Y, newmap] = cmpermute (X, map
 
   ## new colormap
   newmap = map(index,:);
 
   ## build reverse index
   rindex = zeros (size (index));
   rindex(index) = 1:length (index);
  
-  ## adapt indices
-  if (isa (X, "uint8"))
-    rindex = uint8 (rindex-1);
+  ## preserve class of input image in output
+  if (strcmp (cls, "double")) 
+    Y = rindex(X);
+  elseif (strcmp (cls, "single")) 
+    rindex = single (rindex);
+    Y = rindex(X);
+  else
+    ## adapt indices
+    rindex = feval (cls, rindex - 1);
     ## 0-based indices
-    Y = rindex(double (X) + 1);
-  else
-    Y = rindex(X);
+    Y = rindex(single (X) + 1);
   endif
 
 endfunction
 
 
 %!demo
 %! [Y, newmap] = cmpermute ([1:4], hot (4), 4:-1:1)
 %! ## colormap will be arranged in reverse order (so will image)
@@ -121,17 +124,17 @@ endfunction
 %! ## we expect a reversed colormap
 %! assert (newmap (rows (newmap):-1:1,:), map);
 %! ## we expect reversed indices in image
 %! assert (X, max (Y(:)) + 1 - Y);
 
 ## Test input validation
 %!error cmpermute ()
 %!error cmpermute (1,2,3,4)
-%!error <X must be of class uint8> cmpermute (uint16 (magic (16)), jet (256))
+%!error <invalid data type 'uint32'> cmpermute (uint32 (magic (16)), jet (256))
 %!error <X must be an indexed image> cmpermute (1+i, jet (256))
 %!error <X must be an indexed image> cmpermute (sparse (1), jet (256))
 %!error <X must be an indexed image> cmpermute (0, jet (256))
 %!error <X must be an indexed image> cmpermute (1.5, jet (256))
 %!error <MAP must be a valid colormap> cmpermute (1, "a")
 %!error <MAP must be a valid colormap> cmpermute (1, i)
 %!error <MAP must be a valid colormap> cmpermute (1, ones (3,3,3))
 %!error <MAP must be a valid colormap> cmpermute (1, ones (3,2))
