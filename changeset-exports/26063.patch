# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1541983935 -3600
#      Mon Nov 12 01:52:15 2018 +0100
# Node ID 4407b315339d51840819115d5f4f76153b26e406
# Parent  41656e99ae6064c5f7c6ecf578a545d4d838b577
print.m: Fix localization of the default font file (bug #52193)

* print.m (svgconvert): First check if OCTAVE_FONTS_DIR is defined and fallback
  to "octfontsdir".

* octave-svg-convert (main): Don't load the default font when printing to svg.

diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -468,17 +468,17 @@ function rgbout = print (varargin)
       props(end).name = "units";
       props(end).value = {get(hax(n), "units")};
       set (hax(n), "units", "normalized");
       nfig += 1;
     endfor
 
     ## With the -painters (gl2ps) renderer, line transparency is only
     ## handled for svg and pdf outputs using svgconvert.
-    ## Otherwise, switch grid lines color to light gray so that the image 
+    ## Otherwise, switch grid lines color to light gray so that the image
     ## output approximately matches on-screen experience.
     hax = findall (opts.figure, "type", "axes");
     if (! strcmp (tk, "gnuplot") && ! strcmp (opts.renderer, "opengl")
         && ! (opts.svgconvert && strcmp (opts.devopt, "pdfwrite"))
         && ! strcmp (opts.devopt, "svg"))
       for n = 1:numel (hax)
         if (strcmp (get (hax(n), "gridcolormode"), "auto"))
           props(end+1).h = hax(n);
@@ -1008,19 +1008,24 @@ function cmd = svgconvert (opts, devopt)
     devopt = opts.devopt;
   endif
 
   if (isempty (opts.svgconvert_binary))
     warning ("octave:print:nosvgconvert", ...
              ["print.m: unale to find octave-svgconvert, ", ...
               "falling back to eps convertion"]);
   else
-    def_font = fullfile (__octave_config_info__ ("datadir"), "font", ...
-                         "FreeSans.otf");
+    fontdir = getenv ("OCTAVE_FONTS_DIR");
+
+    if (isempty (fontdir))
+      fontdir = __octave_config_info__ ("octfontsdir");
+    endif
+
     cmd = sprintf ("%s - %%s %3.2f %s %d %%s", opts.svgconvert_binary, ...
-                   get (0, "screenpixelsperinch"), def_font, 1);
+                   get (0, "screenpixelsperinch"), ...
+                   fullfile (fontdir, "FreeSans.otf"), 1);
 
     if (opts.debug)
       fprintf ("svgconvert command: '%s'\n", cmd);
     endif
   endif
 
 endfunction
diff --git a/src/octave-svgconvert.cc b/src/octave-svgconvert.cc
--- a/src/octave-svgconvert.cc
+++ b/src/octave-svgconvert.cc
@@ -788,29 +788,33 @@ read from stdin\n\
   double x0, y0, dx, dy;
   QString s = root.attribute ("viewBox");
   QTextStream (&s) >> x0 >> y0 >> dx >> dy;
   QRectF vp (x0, y0, dx, dy);
 
   // Setup application and add default FreeSans font if needed
   QApplication a (argc, argv);
 
-  QFont font ("FreeSans");
-  int id = 0;
-  if (! font.exactMatch ())
+  // When printing to PDF we may need the default FreeSans font
+  if (! strcmp (argv[2], "pdf"))
     {
-      QString fontname (argv[4]);
-      if (! fontname.isEmpty ())
+      QFont font ("FreeSans");
+      if (! font.exactMatch ())
         {
-          id = QFontDatabase::addApplicationFont (fontname);
-          if (id < 0)
-            std::cerr << "Unable to add default font to database\n";
+          QString fontpath (argv[4]);
+          if (! fontpath.isEmpty ())
+            {
+              int id = QFontDatabase::addApplicationFont (fontpath);
+              if (id < 0)
+                std::cerr << "warning: print: " 
+                  "Unable to add default font to database\n";
+            }
+          else
+            std::cerr << "warning: print: FreeSans font not found\n";
         }
-      else
-        std::cerr << "FreeSans font not found\n";
     }
 
   // First render in a temporary file
   QTemporaryFile fout;
   if (! fout.open ())
     {
       std::cerr << "Could not open temporary file\n";
       return -1;
