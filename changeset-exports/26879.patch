# HG changeset patch
# User Rik <rik@octave.org>
# Date 1552330164 25200
#      Mon Mar 11 11:49:24 2019 -0700
# Node ID 6e019db9c0a6105e900e55e63a11cd95d41491b7
# Parent  62c1443babd8d74e2a31b678c3f4d40aa7d63fac
# Parent  3c7c5b7c30444153d2b154c603d621363539c952
maint: merge stable to default.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -237,17 +237,17 @@ not rendered on screen.";
       ## Overridden shared properties
       case {"beingdeleted", "busyaction", "buttondownfcn", ...
             "clipping", "createfcn", "deletefcn", "handlevisibility", ...
             "hittest", "interruptible", "selected", ...
             "selectionhighlight", "uicontextmenu", "visible"}
         s.doc = doc_unused;
 
       case "parent"
-        s.doc = "Root figure has no parent graphics object.  __prop__ \
+        s.doc = "Root object has no parent graphics object.  __prop__ \
 is always empty.";
 
       case "hittest"
         s.doc = doc_unused;
 
       case "pickableparts"
         s.doc = doc_unused;
 
@@ -1904,18 +1904,25 @@ function def = getdefault (h, objname, f
 
 endfunction
 
 function str = printdoc (objname, obj)
   ## Sort fields so that they appear in alphabetic order in the manual
   fields = sort (fieldnames (obj));
   nf = numel (fields);
 
-  ## File header and begining of properties table
-  str = [warn_autogen() "\n\n@table @asis"];
+  ## File header and beginning of properties table
+  str = warn_autogen ();
+  if (strcmp (objname, "root"))
+    str = sprintf ("%s\n\nProperties of the root graphics object:", str);
+  else
+    str = sprintf ("%s\n\nProperties of @code{%s} objects (@pxref{XREF%s,,%s}):",
+                   str, objname, objname, objname);
+  endif
+  str = sprintf ("%s\n\n@table @asis", str);
 
   for ii = 1:nf
     field = fields{ii};
     str = sprintf ("%s\n\n", str);
 
     ## @anchor: cross reference using XREFobjnamefield label
     ## Concept index: call info from octave with 'doc ("objname field")'
     str = sprintf ("%s@anchor{XREF%s%s}\n@prindex %s %s\n",
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -557,17 +557,17 @@ Graphics Data Structures
 * Introduction to Graphics Structures::
 * Graphics Objects::
 * Graphics Object Properties::
 * Searching Properties::
 * Managing Default Properties::
 
 Graphics Object Properties
 
-* Root Figure Properties::
+* Root Properties::
 * Figure Properties::
 * Axes Properties::
 * Line Properties::
 * Text Properties::
 * Image Properties::
 * Patch Properties::
 * Surface Properties::
 * Light Properties::
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1257,19 +1257,19 @@ The hierarchy of graphics objects was ex
 @xref{Introduction to Graphics Structures}.  Here the
 specific objects are described, and the properties contained in
 these objects are discussed.  Keep in mind that
 graphics objects are always referenced by @dfn{handle}.
 
 @table @asis
 @c @group
 
-@item root figure
-@cindex root figure graphics object
-@cindex graphics object, root figure
+@item root
+@cindex root graphics object
+@cindex graphics object, root
 The top level of the hierarchy and the parent of all figure objects.
 Use @code{groot} to obtain the handle of the root graphics object.
 
 @item figure
 @cindex figure graphics object
 @cindex graphics object, figure
 A figure window.
 
@@ -1382,22 +1382,22 @@ get (groot)
          children = [](0x0)
          visible = on
          @dots{}
        @}
 @end group
 @end example
 
 @noindent
-returns a structure containing all the properties of the root figure.
+returns a structure containing all the properties of the root graphics object.
 As with all functions in Octave, the structure is returned by value, so
-modifying it will not modify the internal root figure plot object.  To
-do that, you must use the @code{set} function.  Also, note that in this
-case, the @code{currentfigure} property is empty, which indicates that
-there is no current figure window.
+modifying it will not modify the internal root object.  To do that, you must
+use the @code{set} function.  Also, note that in this case, the
+@code{currentfigure} property is empty, which indicates that there is no
+current figure window.
 
 The @code{get} function may also be used to find the value of a single
 property.  For example,
 
 @example
 @group
 get (gca (), "xlim")
     @result{} [ 0 1 ]
@@ -1468,17 +1468,17 @@ struct2hdl (fig_struct);
 
 @DOCSTRING(copyobj)
 
 @node Graphics Object Properties
 @subsection Graphics Object Properties
 @cindex graphics object properties
 
 @menu
-* Root Figure Properties::
+* Root Properties::
 * Figure Properties::
 * Axes Properties::
 * Line Properties::
 * Text Properties::
 * Image Properties::
 * Patch Properties::
 * Surface Properties::
 * Light Properties::
@@ -1488,179 +1488,142 @@ struct2hdl (fig_struct);
 * Uipanel Properties::
 * Uicontrol Properties::
 * Uitable Properties::
 * Uitoolbar Properties::
 * Uipushtool Properties::
 * Uitoggletool Properties::
 @end menu
 
-In this Section the graphics object properties are discussed in detail,
-starting with the root figure properties and continuing through the objects
-hierarchy.  The documentation about a specific graphics object can be
-displayed using @code{doc} function, e.g., @code{doc ("axes properties")} will
-show
+In this section the graphics object properties are discussed in detail,
+starting with the root properties and continuing through the object hierarchy.
+The documentation about a specific graphics object can be displayed using
+@code{doc} function, e.g., @code{doc ("axes properties")} will show
 @ref{Axes Properties}.
 
 The allowed values for radio (string) properties can be retrieved
-programmatically or displayed using the one or
-two arguments call to @code{set} function.  @xref{XREFset, , set}.
-
-In the following documentation, default values are enclosed in @{ @}.
-
-@node Root Figure Properties
-@subsubsection Root Figure Properties
-@prindex @sortas{@ Root Figure Properties} Root Figure Properties
-
-The @code{root figure} properties are:
+programmatically or displayed using the one or two argument calling form of the
+@code{set} function.  @xref{XREFset, , set}.
+
+In the following documentation default values are enclosed in @{ @}.
+
+@node Root Properties
+@subsubsection Root Properties
+@prindex @sortas{@ Root Properties} Root Properties
 
 @include plot-rootproperties.texi
 
 
 @node Figure Properties
 @subsubsection Figure Properties
 @prindex @sortas{@ Figure Properties} Figure Properties
 
-The @code{figure} properties are:
-
 @include plot-figureproperties.texi
 
 
 @node Axes Properties
 @subsubsection Axes Properties
 @prindex @sortas{@ Axes Properties} Axes Properties
 
-The @code{axes} properties are:
-
 @include plot-axesproperties.texi
 
 
 @node Line Properties
 @subsubsection Line Properties
 @prindex @sortas{@ Line Properties} Line Properties
 
-The @code{line} properties are:
-
 @include plot-lineproperties.texi
 
 
 @node Text Properties
 @subsubsection Text Properties
 @prindex @sortas{@ Text Properties} Text Properties
 
-The @code{text} properties are:
-
 @include plot-textproperties.texi
 
 
 @node Image Properties
 @subsubsection Image Properties
 @prindex @sortas{@ Image Properties} Image Properties
 
-The @code{image} properties are:
-
 @include plot-imageproperties.texi
 
 
 @node Patch Properties
 @subsubsection Patch Properties
 @prindex @sortas{@ Patch Properties} Patch Properties
 
-The @code{patch} properties are:
-
 @include plot-patchproperties.texi
 
 
 @node Surface Properties
 @subsubsection Surface Properties
 @prindex @sortas{@ Surface Properties} Surface Properties
 
-The @code{surface} properties are:
-
 @include plot-surfaceproperties.texi
 
 
 @node Light Properties
 @subsubsection Light Properties
 @prindex @sortas{@ Light Properties} Light Properties
 
-The @code{light} properties are:
-
 @include plot-lightproperties.texi
 
 @node Uimenu Properties
 @subsubsection Uimenu Properties
 @prindex @sortas{@ Uimenu Properties} Uimenu Properties
 
-The @code{uimenu} properties are:
-
 @include plot-uimenuproperties.texi
 
 @node Uibuttongroup Properties
 @subsubsection Uibuttongroup Properties
 @prindex @sortas{@ Uibuttongroup Properties} Uibuttongroup Properties
 
-The @code{uibuttongroup} properties are:
-
 @include plot-uibuttongroupproperties.texi
 
 @node Uicontextmenu Properties
 @subsubsection Uicontextmenu Properties
 @prindex @sortas{@ Uicontextmenu Properties} Uicontextmenu Properties
 
-The @code{uicontextmenu} properties are:
-
 @include plot-uicontextmenuproperties.texi
 
 @node Uipanel Properties
 @subsubsection Uipanel Properties
 @prindex @sortas{@ Uipanel Properties} Uipanel Properties
 
-The @code{uipanel} properties are:
-
 @include plot-uipanelproperties.texi
 
 @node Uicontrol Properties
 @subsubsection Uicontrol Properties
 @prindex @sortas{@ Uicontrol Properties} Uicontrol Properties
 
-The @code{uicontrol} properties are:
-
 @include plot-uicontrolproperties.texi
 
 @node Uitable Properties
 @subsubsection Uitable Properties
 @cindex uitable properties
 
-The @code{uitable} properties are:
-
 @include plot-uitableproperties.texi
 
 @node Uitoolbar Properties
 @subsubsection Uitoolbar Properties
 @prindex @sortas{@ Uitoolbar Properties} Uitoolbar Properties
 
-The @code{uitoolbar} properties are:
-
 @include plot-uitoolbarproperties.texi
 
 @node Uipushtool Properties
 @subsubsection Uipushtool Properties
 @prindex @sortas{@ Uipushtool Properties} Uipushtool Properties
 
-The @code{uipushtool} properties are:
-
 @include plot-uipushtoolproperties.texi
 
 @node Uitoggletool Properties
 @subsubsection Uitoggletool Properties
 @prindex @sortas{@ Uitoggletool Properties} Uitoggletool Properties
 
-The @code{uitoggletool} properties are:
-
 @include plot-uitoggletoolproperties.texi
 
 @node Searching Properties
 @subsection Searching Properties
 
 @DOCSTRING(findobj)
 
 @DOCSTRING(findall)
@@ -1691,21 +1654,21 @@ the property name to set a default value
 @example
 default + @var{object-type} + @var{property-name}
 @end example
 
 This rule can lead to some strange looking names, for example
 @code{defaultlinelinewidth"} specifies the default @code{linewidth}
 property for @code{line} objects.
 
-The example above used the root figure object so the default
-property value will apply to all line objects.  However, default values
-are hierarchical, so defaults set in a figure objects override those
-set in the root figure object.  Likewise, defaults set in axes objects
-override those set in figure or root figure objects.  For example,
+The example above used the root object so the default property value will apply
+to all line objects.  However, default values are hierarchical, so defaults set
+in a figure objects override those set in the root object.  Likewise, defaults
+set in an axes object override those set in figure or root objects.  For
+example,
 
 @example
 @group
 subplot (2, 1, 1);
 set (groot, "defaultlinecolor", "red");
 set (1, "defaultlinecolor", "green");
 set (gca (), "defaultlinecolor", "blue");
 line (1:10, rand (1, 10));
@@ -1717,17 +1680,17 @@ line (1:10, rand (1, 10));
 @end example
 
 @noindent
 produces two figures.  The line in first subplot window of the first
 figure is blue because it inherits its color from its parent axes
 object.  The line in the second subplot window of the first figure is
 green because it inherits its color from its parent figure object.  The
 line in the second figure window is red because it inherits its color
-from the global root figure parent object.
+from the global root object.
 
 To remove a user-defined default setting, set the default property to
 the value @qcode{"remove"}.  For example,
 
 @example
 set (gca (), "defaultlinecolor", "remove");
 @end example
 
@@ -1763,18 +1726,17 @@ user-defined defaults set for the object
 @example
 get (gca (), "default");
 @end example
 
 @noindent
 returns a list of user-defined default values for the current axes
 object.
 
-Factory default values are stored in the root figure object.  The
-command
+Factory default values are stored in the root object.  The command
 
 @example
 get (groot, "factory");
 @end example
 
 @noindent
 returns a list of factory defaults.
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1438,16 +1438,22 @@ user of an unusual condition, but only w
 go on.  For example:
 
 @example
 @group
 warning ("foo: maybe something wrong here");
 @end group
 @end example
 
+If the warning message does not end with a newline character, Octave will
+print a traceback of all the function calls leading to the warning.  If the
+warning message does end in a newline character, Octave will suppress the
+traceback messages as it returns control to the top level.  For more details
+and examples, see @ref{XREFerror,,error}.
+
 The optional warning identifier @var{id} allows users to enable or disable
 warnings tagged by this identifier.  A message identifier is a string of the
 form @qcode{"NAMESPACE:WARNING-NAME"}.  Octave's own warnings use the
 @qcode{"Octave"} namespace (@pxref{XREFwarning_ids,,warning_ids}).  For
 example:
 
 @example
 @group
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2746,17 +2746,17 @@ gh_manager::do_get_handle (bool integer_
 }
 
 void
 gh_manager::do_free (const graphics_handle& h)
 {
   if (h.ok ())
     {
       if (h.value () == 0)
-        error ("graphics_handle::free: can't delete root figure");
+        error ("graphics_handle::free: can't delete root object");
 
       auto p = handle_map.find (h);
 
       if (p == handle_map.end ())
         error ("graphics_handle::free: invalid object %g", h.value ());
 
       base_properties& bp = p->second.get_properties ();
 
@@ -12185,17 +12185,17 @@ each individual object will be reset.
 %!   assert (get (hax, "linewidth"), get (0, "defaultaxeslinewidth"), tol);
 %!   assert (get (hax, "position"), pos, tol);  # axes position is unchanged
 %!   assert (get (hax, "default"), struct ());  # no more axes' defaults
 %!   assert (get (get (hax, "title"), "string"), "");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!test  # root figure object
+%!test  # root object
 %! set (0, "defaultfigurevisible", "off");
 %! hf = figure ("visible", "off", "paperunits", "centimeters",
 %!              "papertype", "a4");
 %! unwind_protect
 %!   reset (hf);
 %!   assert (get (hf, "papertype"), get (0, "defaultfigurepapertype"));
 %!   assert (get (hf, "paperunits"), "centimeters");  # paperunits is unchanged
 %!   assert (get (hf, "visible"), get (0, "defaultfigurevisible"));
@@ -13660,17 +13660,17 @@ satisfied on the graphics handle @var{h}
 
 While the program is suspended graphics events are still processed normally,
 allowing callbacks to modify the state of graphics objects.  This function
 is reentrant and can be called from a callback, while another @code{waitfor}
 call is pending at the top-level.
 
 In the first form, program execution is suspended until the graphics object
 @var{h} is destroyed.  If the graphics handle is invalid or if @var{h} is
-the root figure handle and no property @var{prop} was provided, the function
+the root graphics handle and no property @var{prop} was provided, the function
 returns immediately.
 
 In the second form, execution is suspended until the graphics object is
 destroyed or the property named @var{prop} is modified.  If the graphics
 handle is invalid or the property does not exist, the function returns
 immediately.
 
 In the third form, execution is suspended until the graphics object is
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3228,17 +3228,17 @@ public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   { }
 
   ~figure (void) = default;
 
   void override_defaults (base_graphics_object& obj)
   {
-    // Allow parent (root figure) to override first (properties knows how
+    // Allow parent (root object) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
diff --git a/scripts/gui/uibuttongroup.m b/scripts/gui/uibuttongroup.m
--- a/scripts/gui/uibuttongroup.m
+++ b/scripts/gui/uibuttongroup.m
@@ -29,18 +29,17 @@
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{parent} is given then a uibuttongroup relative to @var{parent} is
 ## created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uibuttongroup object.
 ##
-## Properties of uibuttongroup objects are documented at
-## @ref{Uibuttongroup Properties}.
+## The full list of properties is documented at @ref{Uibuttongroup Properties}.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## ## Create figure and panel on it
 ## f = figure;
 ## ## Create a button group
diff --git a/scripts/gui/uicontextmenu.m b/scripts/gui/uicontextmenu.m
--- a/scripts/gui/uicontextmenu.m
+++ b/scripts/gui/uicontextmenu.m
@@ -25,17 +25,17 @@
 ## If @var{h} is omitted then a uicontextmenu for the current figure is
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{h} is given then a uicontextmenu relative to @var{h} is created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uicontextmenu object.
 ##
-## Uicontextmenu properties are documented at @ref{Uicontextmenu Properties}.
+## The full list of properties is documented at @ref{Uicontextmenu Properties}.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## ## create figure and uicontextmenu
 ## f = figure ();
 ## c = uicontextmenu (f);
diff --git a/scripts/gui/uicontrol.m b/scripts/gui/uicontrol.m
--- a/scripts/gui/uicontrol.m
+++ b/scripts/gui/uicontrol.m
@@ -30,18 +30,17 @@
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{parent} is given then a uicontrol relative to @var{parent} is
 ## created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uicontrol object.
 ##
-## Properties of uicontrol objects are documented at
-## @ref{Uicontrol Properties}.
+## The full list of properties is documented at @ref{Uicontrol Properties}.
 ##
 ## The type of uicontrol created is specified by the @var{style} property.  If
 ## no style property is provided, a push button will be created.
 ##
 ## Valid styles for uicontrol are:
 ##
 ## @table @asis
 ## @item @qcode{"checkbox"}
diff --git a/scripts/gui/uimenu.m b/scripts/gui/uimenu.m
--- a/scripts/gui/uimenu.m
+++ b/scripts/gui/uimenu.m
@@ -57,18 +57,17 @@
 ## lowest value is at the first position starting from left or top.
 ##
 ## @item @qcode{"separator"}
 ## Can be set @qcode{"on"} or @qcode{"off"}.  If enabled it draws a separator
 ## line above the current position.  It is ignored for top level entries.
 ##
 ## @end table
 ##
-## The full list of properties is documented at
-## @ref{Uimenu Properties,,Uimenu Properties}.
+## The full list of properties is documented at @ref{Uimenu Properties}.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## f = uimenu ("label", "&File", "accelerator", "f");
 ## e = uimenu ("label", "&Edit", "accelerator", "e");
 ## uimenu (f, "label", "Close", "accelerator", "q", ...
diff --git a/scripts/gui/uipanel.m b/scripts/gui/uipanel.m
--- a/scripts/gui/uipanel.m
+++ b/scripts/gui/uipanel.m
@@ -28,17 +28,17 @@
 ## If @var{parent} is omitted then a uipanel for the current figure is
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{parent} is given then a uipanel relative to @var{parent} is created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uipanel object.
 ##
-## Uipanel properties are documented at @ref{Uipanel Properties}.
+## The full list of properties is documented at @ref{Uipanel Properties}.
 ##
 ## The optional return value @var{hui} is a graphics handle to the created
 ## uipanel object.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
diff --git a/scripts/gui/uipushtool.m b/scripts/gui/uipushtool.m
--- a/scripts/gui/uipushtool.m
+++ b/scripts/gui/uipushtool.m
@@ -33,17 +33,17 @@
 ## created.
 ##
 ## If @var{parent} is given then a uipushtool is created on the @var{parent}
 ## uitoolbar.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uipushtool object.
 ##
-## Uipushtool properties are documented at @ref{Uipushtool Properties}.
+## The full list of properties is documented at @ref{Uipushtool Properties}.
 ##
 ## The optional return value @var{hui} is a graphics handle to the created
 ## uipushtool object.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
diff --git a/scripts/gui/uitable.m b/scripts/gui/uitable.m
--- a/scripts/gui/uitable.m
+++ b/scripts/gui/uitable.m
@@ -27,18 +27,17 @@
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{parent} is given then a uitable relative to @var{parent} is
 ## created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uitable object.
 ##
-## Properties of uitable objects are documented at
-## @ref{Uitable Properties}.
+## The full list of properties is documented at @ref{Uitable Properties}.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## ## Create figure and place a table on it
 ## f = figure ();
 ## m = magic (8);
diff --git a/scripts/gui/uitoggletool.m b/scripts/gui/uitoggletool.m
--- a/scripts/gui/uitoggletool.m
+++ b/scripts/gui/uitoggletool.m
@@ -33,17 +33,17 @@
 ## created.
 ##
 ## If @var{parent} is given then a uitoggletool is created on the
 ## @var{parent} uitoolbar.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uitoggletool object.
 ##
-## Uitoggletool properties are documented at @ref{Uitoggletool Properties}.
+## The full list of properties is documented at @ref{Uitoggletool Properties}.
 ##
 ## The optional return value @var{hui} is a graphics handle to the created
 ## uitoggletool object.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
diff --git a/scripts/gui/uitoolbar.m b/scripts/gui/uitoolbar.m
--- a/scripts/gui/uitoolbar.m
+++ b/scripts/gui/uitoolbar.m
@@ -28,17 +28,17 @@
 ## created.  If no figure is available, a new figure is created first.
 ##
 ## If @var{parent} is given then a uitoolbar relative to @var{parent} is
 ## created.
 ##
 ## Any provided property value pairs will override the default values of the
 ## created uitoolbar object.
 ##
-## Uitoolbar properties are documented at @ref{Uitoolbar Properties}.
+## The full list of properties is documented at @ref{Uitoolbar Properties}.
 ##
 ## The optional return value @var{hui} is a graphics handle to the created
 ## uitoolbar object.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/util/__plt_get_axis_arg__.m b/scripts/plot/util/__plt_get_axis_arg__.m
--- a/scripts/plot/util/__plt_get_axis_arg__.m
+++ b/scripts/plot/util/__plt_get_axis_arg__.m
@@ -23,17 +23,17 @@
 
 ## Author: jwe
 
 function [h, varargin, narg] = __plt_get_axis_arg__ (caller, varargin)
 
   h = [];
 
   ## Look for a scalar which is a graphics handle but not the
-  ## Root Figure (0) or an ordinary figure (integer).
+  ## root object (0) or an ordinary figure (integer).
   if (! isempty (varargin) && isscalar (varargin{1})
       && ishghandle (varargin{1}) && varargin{1} != 0
       && ! isfigure (varargin{1}))
     htmp = varargin{1};
     if (! isaxes (htmp))
       error ("%s: first argument must be axes handle", caller);
     endif
     if (! strcmp (get (htmp, "tag"), "legend"))
diff --git a/scripts/plot/util/close.m b/scripts/plot/util/close.m
--- a/scripts/plot/util/close.m
+++ b/scripts/plot/util/close.m
@@ -57,17 +57,17 @@ function retval = close (arg1, arg2)
   figs = [];
 
   if (nargin > 2)
     print_usage ();
   elseif (nargin == 0)
     ## Close current figure.
     ## Can't use gcf because it opens a new plot window if one does not exist.
     figs = get (0, "currentfigure");
-    if (figs == 0)  # don't close root figure
+    if (figs == 0)  # don't call close on root object
       figs = [];
     endif
   elseif (nargin == 1)
     if (ischar (arg1))
       if (strcmpi (arg1, "all"))
         figs = get (0, "children");
         figs = figs(isfigure (figs));
       else
diff --git a/scripts/plot/util/gcf.m b/scripts/plot/util/gcf.m
--- a/scripts/plot/util/gcf.m
+++ b/scripts/plot/util/gcf.m
@@ -53,18 +53,18 @@
 
 ## Author: jwe, Bill Denney
 
 function h = gcf ()
 
   if (nargin == 0)
     h = get (0, "currentfigure");
     if (isempty (h) || h == 0)
-      ## We only have a root figure object, so create a new figure
-      ## object and make it the current figure.
+      ## We only have a root object, so create a new figure object
+      ## and make it the current figure.
       h = figure ();
     endif
   else
     print_usage ();
   endif
 
 endfunction
 
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -23,17 +23,17 @@
 ## Construct a graphics handle object @var{h} from the structure @var{s}.
 ##
 ## The structure must contain the fields @qcode{"handle"}, @qcode{"type"},
 ## @qcode{"children"}, @qcode{"properties"}, and @qcode{"special"}.
 ##
 ## If the handle of an existing figure or axes is specified, @var{p}, the new
 ## object will be created as a child of that object.  If no parent handle is
 ## provided then a new figure and the necessary children will be constructed
-## using the default values from the root figure.
+## using the default values from the root object.
 ##
 ## A third boolean argument @var{hilev} can be passed to specify whether the
 ## function should preserve listeners/callbacks, e.g., for legends or
 ## hggroups.  The default is false.
 ## @seealso{hdl2struct, hgload, findobj}
 ## @end deftypefn
 
 ## Author: pdiribarne <pdiribarne@new-host.home>
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -76,30 +76,39 @@ function y = poly (x)
   for j = 1:n
     y(2:(j+1)) -= v(j) .* y(1:j);
   endfor
 
   ## Real, or complex conjugate inputs, should result in real output
   if (isreal (x))
     y = real (y);
   else
-    tmp = sort (v(imag (v) > 0)) == sort (conj (v(imag (v) < 0)));
-    if (! isempty (tmp) && all (tmp))
-      y = real (y);
+    pos_imag = sort (v(imag (v) > 0));
+    neg_imag = sort (conj (v(imag (v) < 0)));
+    if (size_equal (pos_imag, neg_imag))
+      is_equal = (pos_imag == neg_imag);
+      if (! isempty (is_equal) && all (is_equal))
+        y = real (y);
+      endif
     endif
   endif
 
 endfunction
 
 
 %!assert (poly ([]), 1)
 %!assert (poly ([1, 2, 3]), [1, -6, 11, -6])
 %!assert (poly ([1, 2; 3, 4]), [1, -5, -2], sqrt (eps))
 
 %!test <*53897>
 %! x = [1, sqrt(2)/2+sqrt(2)/2*i, 1i, -sqrt(2)/2+sqrt(2)/2*i, -1, ...
 %!      -sqrt(2)/2-sqrt(2)/2*i, -1i, sqrt(2)/2-sqrt(2)/2*i];
 %! y = poly (x);
 %! assert (isreal (y), true);
 
+%!test <53897>
+%! x = [1 + 1i, 1 + 2i, 3, 4];
+%! y = poly (x);
+%! assert (y, [1 + 0i, -9 - 3i, 25 + 24i, -17 - 57i, -12 + 36i]);
+
 %!error poly ()
 %!error poly (1,2)
 %!error poly ([1, 2, 3; 4, 5, 6])
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -554,37 +554,38 @@ is_true (const std::string& s)
   return (s == "yes" || s == "true");
 }
 
 static std::string
 get_temp_directory (void)
 {
   std::string tempd;
 
+  tempd = octave_getenv ("TMPDIR");
+
 #if defined (__MINGW32__) || defined (_MSC_VER)
 
-  tempd = octave_getenv ("TEMP");
+  if (tempd.empty ())
+    tempd = octave_getenv ("TEMP");
 
   if (tempd.empty ())
     tempd = octave_getenv ("TMP");
 
 #if defined (P_tmpdir)
   if (tempd.empty ())
     tempd = P_tmpdir;
 #endif
 
   // Some versions of MinGW and MSVC either don't define P_tmpdir, or
   // define it to a single backslash.  In such cases just use C:\temp.
   if (tempd.empty () || tempd == R"(\)")
     tempd = R"(c:\temp)";
 
 #else
 
-  tempd = octave_getenv ("TMP");
-
 #if defined (P_tmpdir)
   if (tempd.empty ())
     tempd = P_tmpdir;
 #else
   if (tempd.empty ())
     tempd = "/tmp";
 #endif
 
