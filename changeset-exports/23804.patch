# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501265976 25200
#      Fri Jul 28 11:19:36 2017 -0700
# Node ID 8057d3f0673de352f2431898012d3b122fd0ec26
# Parent  90689bdbe0483cc83d45899dd7eaabb013d13ccd
Use C++11 raw string literals to avoid escaping backslashes in strings.

* file-editor-tab.cc, octave-qscintilla.cc, graphics.cc, help.cc, input.cc,
oct-stream.cc, regexp.cc, sparse-xdiv.cc, sysdep.cc, utils.cc, xdiv.cc,
ov-java.cc, ov.cc, file-ops.cc, lo-sysdep.cc, oct-env.cc, mkoctfile.in.cc,
shared-fcns.h:
Replace regular strings containing "\\" patterns with R"(...\...)".

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -739,19 +739,19 @@ file_editor_tab::update_lexer_settings (
             }
           else
             {
 
               _prep_apis_file = prep_apis_path + lexer->lexer () + ".pap";
 
               for (i=1; i<=3; i++) // test the first 5 keyword sets
                 {
-                  keyword = QString (lexer->keywords (i));          // get list
-                  keyword_list = keyword.split (QRegExp ("\\s+"));  // split
-                  for (j = 0; j < keyword_list.size (); j++)        // add to API
+                  keyword = QString (lexer->keywords (i));           // get list
+                  keyword_list = keyword.split (QRegExp (R"(\s+)")); // split
+                  for (j = 0; j < keyword_list.size (); j++)         // add to API
                     _lexer_apis->add (keyword_list.at (j));
                 }
             }
 
           // disconnect slot for saving prepared info if already connected
           disconnect (_lexer_apis, SIGNAL (apiPreparationFinished ()), nullptr, nullptr);
           // check whether path for prepared info exists or can be created
           if (QDir ("/").mkpath (prep_apis_path))
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -492,17 +492,17 @@ octave_qscintilla::auto_close (int auto_
       while (linenr + offset < lines ()
              && next_start == std::string::npos);
       if (next_start == std::string::npos)
         next_start = 0;
       if (next_start > start)       // more indented => don't add "end"
         return;
       if (next_start == start)      // same => check if already is "end"
         {
-          QRegExp rx_start = QRegExp ("(\\w+)");
+          QRegExp rx_start = QRegExp (R"((\w+))");
           int tmp = rx_start.indexIn (next_line, start);
            if (tmp != -1 && is_end (rx_start.cap(1), first_word))
              return;
         }
     }
 
     // If all of the above, insert a new line, with matching indent
     // and either 'end' or 'end...', depending on a flag.
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2506,19 +2506,19 @@ graphics_object::set_value_or_default (c
         {
           default_val = get_factory_default (pname);
 
           rep->set (pname, default_val);
         }
       else
         {
           // Matlab specifically uses "\default" to escape string setting
-          if (sval == "\\default")
+          if (sval == R"(\default)")
             rep->set (pname, "default");
-          else if (sval == "\\factory")
+          else if (sval == R"(\factory)")
             rep->set (pname, "factory");
           else
             rep->set (pname, val);
         }
     }
   else
     rep->set (pname, val);
 }
@@ -11779,17 +11779,17 @@ In all cases, typing CTRL-C stops progra
     {
       pname = args(1).xstring_value ("waitfor: PROP must be a string");
 
       if (pname.empty ())
         error ("waitfor: PROP must be a non-empty string");
 
       if (pname != "timeout")
         {
-          if (pname.compare ("\\timeout"))
+          if (pname.compare (R"(\timeout)"))
             pname = "timeout";
 
           static octave_value wf_listener;
 
           if (! wf_listener.is_defined ())
             wf_listener =
               octave_value (new octave_builtin (waitfor_listener,
                                                 "waitfor_listener"));
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -100,18 +100,18 @@ const static char * const operators[] =
   "-",
   "--",
   ".'",
   ".*",
   ".**",
   ".^",
   "./",
   "/",
-  ".\\",
-  "\\",
+  R"(.\)",
+  R"(\)",
   ":",
   ";",
   "<",
   "<=",
   "=",
   "==",
   ">",
   ">=",
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -122,17 +122,17 @@ remove_input_event_hook_functions (void)
 }
 
 void
 set_default_prompts (void)
 {
   // Use literal "octave" instead of "\\s" to avoid setting the prompt
   // to "octave.exe" or "octave-gui", etc.
 
-  VPS1 = "octave:\\#> ";
+  VPS1 = R"(octave:\#> )";
   VPS2 = "> ";
   std::string VPS4 = "+ ";
 
   octave_link::set_default_prompts (VPS1, VPS2, VPS4);
 }
 
 static std::string
 gnu_readline (const std::string& s, bool& eof)
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3688,17 +3688,17 @@ namespace octave
         else if (param == "expchars")
           {
             exp_chars = args(i+1).xstring_value ("%s: ExpChars must be a character string", who.c_str ());
             default_exp = false;
           }
         else if (param == "endofline")
           {
             bool valid = true;
-            std::string s = args(i+1).xstring_value ("%s: EndOfLine must be at most one character or '\\r\\n'", who.c_str ());
+            std::string s = args(i+1).xstring_value (R"(%s: EndOfLine must be at most one character or '\r\n')", who.c_str ());
             if (args(i+1).is_sq_string ())
               s = do_string_escapes (s);
             int l = s.length ();
             if (l == 0)
               eol1 = eol2 = -2;
             else if (l == 1)
               eol1 = eol2 = s.c_str ()[0];
             else if (l == 2)
@@ -3707,17 +3707,17 @@ namespace octave
                 eol2 = s.c_str ()[1];
                 if (eol1 != '\r' || eol2 != '\n')    // Why limit it?
                   valid = false;
               }
             else
               valid = false;
 
             if (! valid)
-              error ("%s: EndOfLine must be at most one character or '\\r\\n'",
+              error (R"(%s: EndOfLine must be at most one character or '\r\n')",
                      who.c_str ());
           }
         else
           error ("%s: unrecognized option '%s'", who.c_str (), param.c_str ());
       }
 
     whitespace_table = std::string (256, '\0');
     for (unsigned int i = 0; i < whitespace.length (); i++)
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -104,17 +104,17 @@ do_regexp_ptn_string_escapes (const std:
                     break;
                   tmpi <<= 3;
                   tmpi += digit;
                 }
               if (bad_esc_seq || (brace && s[k++] != '}'))
                 {
                   bad_esc_seq = true;
                   tmpi = 0;
-                  warning ("malformed octal escape sequence '\\o' -- converting to '\\0'");
+                  warning (R"(malformed octal escape sequence '\o' -- converting to '\0')");
                 }
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
             default:  // pass escape sequence through
               retval[i] = '\\';
@@ -199,17 +199,17 @@ do_regexp_rep_string_escapes (const std:
                   int digit = s[k] - '0';
                   if (digit < 0 || digit > 7)
                     break;
                   tmpi <<= 3;
                   tmpi += digit;
                 }
               if (bad_esc_seq || (brace && s[k++] != '}'))
                 {
-                  warning ("malformed octal escape sequence '\\o' -- converting to '\\0'");
+                  warning (R"(malformed octal escape sequence '\o' -- converting to '\0')");
                   tmpi = 0;
                 }
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
             case 'x': // hex input
@@ -236,17 +236,17 @@ do_regexp_rep_string_escapes (const std:
                     tmpi += digit - 'a' + 10;
                   else if (digit >= 'A')
                     tmpi += digit - 'A' + 10;
                   else
                     tmpi += digit - '0';
                 }
               if (bad_esc_seq || (brace && s[k++] != '}'))
                 {
-                  warning ("malformed hex escape sequence '\\x' -- converting to '\\0'");
+                  warning (R"(malformed hex escape sequence '\x' -- converting to '\0')");
                   tmpi = 0;
                 }
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
             // Both dollar sign (for capture buffer) and backslash are
diff --git a/libinterp/corefcn/sparse-xdiv.cc b/libinterp/corefcn/sparse-xdiv.cc
--- a/libinterp/corefcn/sparse-xdiv.cc
+++ b/libinterp/corefcn/sparse-xdiv.cc
@@ -54,17 +54,17 @@ mx_leftdiv_conform (const T1& a, const T
   octave_idx_type a_nr = a.rows ();
   octave_idx_type b_nr = b.rows ();
 
   if (a_nr != b_nr)
     {
       octave_idx_type a_nc = a.cols ();
       octave_idx_type b_nc = b.cols ();
 
-      octave::err_nonconformant ("operator \\", a_nr, a_nc, b_nr, b_nc);
+      octave::err_nonconformant (R"(operator \)", a_nr, a_nc, b_nr, b_nc);
     }
 
   return true;
 }
 
 #define INSTANTIATE_MX_LEFTDIV_CONFORM(T1, T2)                  \
   template bool mx_leftdiv_conform (const T1&, const T2&)
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -144,17 +144,17 @@ w32_set_octave_home (void)
           while (Module32Next (h, &mod_info));
         }
 
       CloseHandle (h);
     }
 
   if (! bin_dir.empty ())
     {
-      size_t pos = bin_dir.rfind ("\\bin\\");
+      size_t pos = bin_dir.rfind (R"(\bin\)");
 
       if (pos != std::string::npos)
         octave::sys::env::putenv ("OCTAVE_HOME", bin_dir.substr (0, pos));
     }
 }
 
 static void
 w32_init (void)
@@ -579,25 +579,25 @@ get_P_tmpdir (void)
 #if defined (P_tmpdir)
   retval = P_tmpdir;
 #endif
 
   // Apparently some versions of MinGW and MSVC either don't define
   // P_tmpdir, or they define it to a single backslash, neither of which
   // is particularly helpful.
 
-  if (retval.empty () || retval == "\\")
+  if (retval.empty () || retval == '\\')
     {
       retval = octave::sys::env::getenv ("TEMP");
 
       if (retval.empty ())
         retval = octave::sys::env::getenv ("TMP");
 
       if (retval.empty ())
-        retval = "c:\\temp";
+        retval = R"(c:\temp)";
     }
 
   return retval;
 
 #elif defined (P_tmpdir)
 
   return P_tmpdir;
 
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -709,25 +709,25 @@ do_string_escapes (const std::string& s)
                     tmpi += digit - 'a' + 10;
                   else if (digit >= 'A')
                     tmpi += digit - 'A' + 10;
                   else
                     tmpi += digit - '0';
                 }
 
               if (k == j+1)
-                warning ("malformed hex escape sequence '\\x' -- converting to '\\0'");
+                warning (R"(malformed hex escape sequence '\x' -- converting to '\0')");
 
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
             default:
-              warning ("unrecognized escape sequence '\\%c' -- converting to '%c'", s[j], s[j]);
+              warning (R"(unrecognized escape sequence '\%c' -- converting to '%c')", s[j], s[j]);
               retval[i] = s[j];
               break;
             }
         }
       else
         retval[i] = s[j];
 
       i++;
diff --git a/libinterp/corefcn/xdiv.cc b/libinterp/corefcn/xdiv.cc
--- a/libinterp/corefcn/xdiv.cc
+++ b/libinterp/corefcn/xdiv.cc
@@ -62,17 +62,17 @@ mx_leftdiv_conform (const T1& a, const T
   octave_idx_type b_nr = b.rows ();
 
   if (a_nr != b_nr)
     {
       octave_idx_type a_nc = (blas_trans == blas_no_trans ? a.cols ()
                                                           : a.rows ());
       octave_idx_type b_nc = b.cols ();
 
-      octave::err_nonconformant ("operator \\", a_nr, a_nc, b_nr, b_nc);
+      octave::err_nonconformant (R"(operator \)", a_nr, a_nc, b_nr, b_nc);
     }
 
   return true;
 }
 
 #define INSTANTIATE_MX_LEFTDIV_CONFORM(T1, T2)                          \
   template bool mx_leftdiv_conform (const T1&, const T2&, blas_trans_type)
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -514,32 +514,32 @@ initialize_jvm (void)
         error ("unable to find Java Runtime Environment");
     }
   else
     {
       // In windows, find the location of the JRE from the registry
       // and load the symbol from the dll.
       std::string key, value;
 
-      key = "software\\javasoft\\java runtime environment";
+      key = R"(software\javasoft\java runtime environment)";
 
       value = octave::sys::env::getenv ("JAVA_VERSION");
       if (value.empty ())
         {
           value = "Currentversion";
           std::string regval = read_registry_string (key,value);
 
           if (regval.empty ())
             error ("unable to find Java Runtime Environment: %s::%s",
                    key.c_str (), value.c_str ());
 
           value = regval;
         }
 
-      key = key + "\\" + value;
+      key = key + '\\' + value;
       value = "RuntimeLib";
       jvm_lib_path = read_registry_string (key, value);
 
       if (jvm_lib_path.empty ())
         error ("unable to find Java Runtime Environment: %s::%s",
                key.c_str (), value.c_str ());
     }
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -188,17 +188,17 @@ octave_value::binary_op_as_string (binar
 
     case op_div:
       return "/";
 
     case op_pow:
       return "^";
 
     case op_ldiv:
-      return "\\";
+      return R"(\)";
 
     case op_lt:
       return "<";
 
     case op_le:
       return "<=";
 
     case op_eq:
@@ -218,17 +218,17 @@ octave_value::binary_op_as_string (binar
 
     case op_el_div:
       return "./";
 
     case op_el_pow:
       return ".^";
 
     case op_el_ldiv:
-      return ".\\";
+      return R"(.\)";
 
     case op_el_and:
       return "&";
 
     case op_el_or:
       return "|";
 
     case op_struct_ref:
@@ -359,29 +359,29 @@ octave_value::assign_op_as_string (assig
 
     case op_mul_eq:
       return "*=";
 
     case op_div_eq:
       return "/=";
 
     case op_ldiv_eq:
-      return "\\=";
+      return R"(\=)";
 
     case op_pow_eq:
       return "^=";
 
     case op_el_mul_eq:
       return ".*=";
 
     case op_el_div_eq:
       return "./=";
 
     case op_el_ldiv_eq:
-      return ".\\=";
+      return R"(.\=)";
 
     case op_el_pow_eq:
       return ".^=";
 
     case op_el_and_eq:
       return "&=";
 
     case op_el_or_eq:
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -229,26 +229,26 @@ namespace octave
 #else
         return '/';
 #endif
       }
 
       std::string dir_sep_str (void)
       {
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
-        return "\\";
+        return R"(\)";
 #else
         return "/";
 #endif
       }
 
       std::string dir_sep_chars (void)
       {
 #if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
-        return "/\\";
+        return R"(/\)";
 #else
         return dir_sep_str ();
 #endif
       }
 
       tilde_expansion_hook tilde_expansion_preexpansion_hook = nullptr;
 
       tilde_expansion_hook tilde_expansion_failure_hook = nullptr;
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -57,15 +57,15 @@ namespace octave
 
     int
     chdir (const std::string& path_arg)
     {
       std::string path = sys::file_ops::tilde_expand (path_arg);
 
 #if defined (OCTAVE_USE_WINDOWS_API)
       if (path.length () == 2 && path[1] == ':')
-        path += "\\";
+        path += '\\';
 #endif
 
       return octave_chdir_wrapper (path.c_str ());
     }
   }
 }
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -202,18 +202,18 @@ namespace octave
 
 #if defined (P_tmpdir)
       if (tempd.empty ())
         tempd = P_tmpdir;
 #endif
 
       // Some versions of MinGW and MSVC either don't define P_tmpdir, or
       // define it to a single backslash.  In such cases just use C:\temp.
-      if (tempd.empty () || tempd == "\\")
-        tempd = "c:\\temp";
+      if (tempd.empty () || tempd == '\\')
+        tempd = R"(c:\temp)";
 
 #else
 
       tempd = do_getenv ("TMP");
 
 #if defined (P_tmpdir)
       if (tempd.empty ())
         tempd = P_tmpdir;
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -146,17 +146,17 @@ initialize (void)
   vars["LIBDIR"]
     = get_variable ("LIBDIR", prepend_octave_exec_home (%OCTAVE_CONF_LIBDIR%));
 
   vars["OCTLIBDIR"]
     = get_variable ("OCTLIBDIR", prepend_octave_exec_home (%OCTAVE_CONF_OCTLIBDIR%));
 
 #if defined (OCTAVE_USE_WINDOWS_API)
   std::string DEFAULT_INCFLAGS
-    = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "\\..")
+    = "-I" + quote_path (vars["OCTINCLUDEDIR"] + R"(\..)")
       + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #else
   std::string DEFAULT_INCFLAGS
     = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "/..")
       + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #endif
 
   if (vars["INCLUDEDIR"] != "/usr/include")
diff --git a/src/shared-fcns.h b/src/shared-fcns.h
--- a/src/shared-fcns.h
+++ b/src/shared-fcns.h
@@ -47,25 +47,25 @@ w32_get_octave_home (void)
   std::string bin_dir;
 
   char namebuf[MAX_PATH+1];
   if (GetModuleFileName (GetModuleHandle (NULL), namebuf, MAX_PATH))
     {
       namebuf[MAX_PATH] = '\0';
 
       std::string exe_name = namebuf;
-      size_t pos = exe_name.rfind ("\\");
+      size_t pos = exe_name.rfind ('\\');
 
       if (pos != std::string::npos)
         bin_dir = exe_name.substr (0, pos + 1);
     }
 
   if (! bin_dir.empty ())
     {
-      size_t pos = bin_dir.rfind ("\\bin\\");
+      size_t pos = bin_dir.rfind (R"(\bin\)");
 
       if (pos != std::string::npos)
         retval = bin_dir.substr (0, pos);
     }
 
   return retval;
 }
 
@@ -77,17 +77,17 @@ w32_get_octave_home (void)
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)           \
      && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
 static const char dir_sep_char = '\\';
 #else
 static const char dir_sep_char = '/';
 #endif
 
 #if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
-static std::string dir_sep_chars = "/\\";
+static std::string dir_sep_chars = R"(/\)";
 #else
 static std::string dir_sep_chars = "/";
 #endif
 
 static std::string
 octave_getenv (const std::string& name)
 {
   char *value = ::getenv (name.c_str ());
