# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546476508 28800
#      Wed Jan 02 16:48:28 2019 -0800
# Node ID 0e6cd97c0f685d4024bd29e722dcb425808825e2
# Parent  fff643eb35144192d72b64db9fa332090735a1ed
# Parent  5455de7c8566b1a3b7aaf53653e553e26cc96d15
maint: merge stable to default.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -428,23 +428,25 @@ do_stream_open (const std::string& name,
 
   if (! fs.is_dir ())
     {
 #if defined (HAVE_ZLIB)
       if (use_zlib)
         {
           FILE *fptr = std::fopen (fname.c_str (), mode.c_str ());
 
-          int fd = fileno (fptr);
-
-          gzFile gzf = ::gzdopen (fd, mode.c_str ());
-
           if (fptr)
-            retval = octave_zstdiostream::create (fname, gzf, fd,
-                                                  md, flt_fmt);
+            {
+              int fd = fileno (fptr);
+
+              gzFile gzf = ::gzdopen (fd, mode.c_str ());
+
+              retval = octave_zstdiostream::create (fname, gzf, fd,
+                                                    md, flt_fmt);
+            }
           else
             retval.error (std::strerror (errno));
         }
       else
 #endif
         {
           FILE *fptr = std::fopen (fname.c_str (), mode.c_str ());
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -219,24 +219,27 @@ public:
   double unscale (double d) const
   { return rep->unscale (d); }
 
   bool is_linear (void) const
   { return rep->is_linear (); }
 
   scaler& operator = (const scaler& s)
   {
-    if (rep)
+    if (&s != this)
       {
-        delete rep;
-        rep = nullptr;
+        if (rep)
+          {
+            delete rep;
+            rep = nullptr;
+          }
+
+        rep = s.rep->clone ();
       }
 
-    rep = s.rep->clone ();
-
     return *this;
   }
 
   scaler& operator = (const std::string& s)
   {
     if (rep)
       {
         delete rep;
@@ -1816,32 +1819,28 @@ protected:
           add_hidden = false;
       }
     else
       is_ok = false;
 
     if (! is_ok)
       error ("set: new children must be a permutation of existing children");
 
-    if (is_ok)
-      {
-        Matrix tmp = new_kids_column;
-
-        if (add_hidden)
-          tmp.stack (get_hidden ());
-
-        children_list.clear ();
-
-        // Don't use do_init_children here, as that reverses the
-        // order of the list, and we don't want to do that if setting
-        // the child list directly.
-
-        for (octave_idx_type i = 0; i < tmp.numel (); i++)
-          children_list.push_back (tmp.xelem (i));
-      }
+    Matrix tmp = new_kids_column;
+
+    if (add_hidden)
+      tmp.stack (get_hidden ());
+
+    children_list.clear ();
+
+    // Don't use do_init_children here, as that reverses the
+    // order of the list, and we don't want to do that if setting
+    // the child list directly.
+    for (octave_idx_type i = 0; i < tmp.numel (); i++)
+      children_list.push_back (tmp.xelem (i));
 
     return is_ok;
   }
 
 private:
   void do_init_children (const Matrix& val)
   {
     children_list.clear ();
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -102,33 +102,33 @@ public:
   uint32_array_value (void) const { return uint32NDArray (matrix); }
 
   uint64NDArray
   uint64_array_value (void) const { return uint64NDArray (matrix); }
 
   double
   double_value (bool = false) const
   {
-    double retval = lo_ieee_nan_value ();
+    double retval;
 
     if (isempty ())
       err_invalid_conversion (type_name (), "real scalar");
 
     warn_implicit_conversion ("Octave:array-to-scalar",
                               type_name (), "real scalar");
 
     retval = matrix(0).double_value ();
 
     return retval;
   }
 
   float
   float_value (bool = false) const
   {
-    float retval = lo_ieee_float_nan_value ();
+    float retval;
 
     if (isempty ())
       err_invalid_conversion (type_name (), "real scalar");
 
     warn_implicit_conversion ("Octave:array-to-scalar",
                               type_name (), "real scalar");
 
     retval = matrix(0).float_value ();
diff --git a/liboctave/array/MSparse.cc b/liboctave/array/MSparse.cc
--- a/liboctave/array/MSparse.cc
+++ b/liboctave/array/MSparse.cc
@@ -60,17 +60,17 @@ plus_or_minus (MSparse<T>& a, const MSpa
             {
               r.ridx (jx) = a.ridx (ja);
               r.data (jx) = op (a.data (ja), 0.);
               jx++;
               ja++;
               ja_lt_max= ja < ja_max;
             }
           else if ((! ja_lt_max)
-                   || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
+                   || (b.ridx (jb) < a.ridx (ja)))
             {
               r.ridx (jx) = b.ridx (jb);
               r.data (jx) = op (0., b.data (jb));
               jx++;
               jb++;
               jb_lt_max= jb < jb_max;
             }
           else
@@ -326,17 +326,17 @@ plus_or_minus (const MSparse<T>& a, cons
                 {
                   r.ridx (jx) = a.ridx (ja);
                   r.data (jx) = op (a.data (ja), 0.);
                   jx++;
                   ja++;
                   ja_lt_max= ja < ja_max;
                 }
               else if ((! ja_lt_max)
-                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
+                       || (b.ridx (jb) < a.ridx (ja)))
                 {
                   r.ridx (jx) = b.ridx (jb);
                   r.data (jx) = op (0.,  b.data (jb));
                   jx++;
                   jb++;
                   jb_lt_max= jb < jb_max;
                 }
               else
@@ -443,17 +443,17 @@ product (const MSparse<T>& a, const MSpa
           while (ja_lt_max || jb_lt_max)
             {
               octave_quit ();
               if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
                 {
                   ja++; ja_lt_max= ja < ja_max;
                 }
               else if ((! ja_lt_max)
-                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
+                       || (b.ridx (jb) < a.ridx (ja)))
                 {
                   jb++; jb_lt_max= jb < jb_max;
                 }
               else
                 {
                   if ((a.data (ja) * b.data (jb)) != 0.)
                     {
                       r.data (jx) = a.data (ja) * b.data (jb);
@@ -562,17 +562,17 @@ quotient (const MSparse<T>& a, const MSp
             {
               octave_quit ();
               if ((! jb_lt_max) || (ja_lt_max && (a.ridx (ja) < b.ridx (jb))))
                 {
                   r.elem (a.ridx (ja),i) = a.data (ja) / Zero;
                   ja++; ja_lt_max= ja < ja_max;
                 }
               else if ((! ja_lt_max)
-                       || (jb_lt_max && (b.ridx (jb) < a.ridx (ja))))
+                       || (b.ridx (jb) < a.ridx (ja)))
                 {
                   r.elem (b.ridx (jb),i) = Zero / b.data (jb);
                   jb++; jb_lt_max= jb < jb_max;
                 }
               else
                 {
                   r.elem (a.ridx (ja),i) = a.data (ja) / b.data (jb);
                   ja++; ja_lt_max= ja < ja_max;
diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -52,98 +52,96 @@ chol2inv_internal (const Matrix& r, bool
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   F77_INT n = octave::to_f77_int (r_nc);
-  F77_INT info = 0;
+  F77_INT info;
 
   Matrix tmp = r;
   double *v = tmp.fortran_vec ();
 
-  if (info == 0)
+  if (is_upper)
+    F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+  else
+    F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+
+  // FIXME: Should we check info exit value and possible report an error?
+
+  // If someone thinks of a more graceful way of doing this
+  // (or faster for that matter :-)), please let me know!
+
+  if (n > 1)
     {
       if (is_upper)
-        F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (i, j) = tmp.xelem (j, i);
       else
-        F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
-
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (j, i) = tmp.xelem (i, j);
+    }
 
-      if (n > 1)
-        {
-          if (is_upper)
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (i, j) = tmp.xelem (j, i);
-          else
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (j, i) = tmp.xelem (i, j);
-        }
-
-      retval = tmp;
-    }
+  retval = tmp;
 
   return retval;
 }
 
 static FloatMatrix
 chol2inv_internal (const FloatMatrix& r, bool is_upper = true)
 {
   FloatMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   F77_INT n = octave::to_f77_int (r_nc);
-  F77_INT info = 0;
+  F77_INT info;
 
   FloatMatrix tmp = r;
   float *v = tmp.fortran_vec ();
 
-  if (info == 0)
+  if (is_upper)
+    F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+  else
+    F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+
+  // FIXME: Should we check info exit value and possible report an error?
+
+  // If someone thinks of a more graceful way of doing this (or
+  // faster for that matter :-)), please let me know!
+
+  if (n > 1)
     {
       if (is_upper)
-        F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (i, j) = tmp.xelem (j, i);
       else
-        F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
-
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (j, i) = tmp.xelem (i, j);
+    }
 
-      if (n > 1)
-        {
-          if (is_upper)
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (i, j) = tmp.xelem (j, i);
-          else
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (j, i) = tmp.xelem (i, j);
-        }
-
-      retval = tmp;
-    }
+  retval = tmp;
 
   return retval;
 }
 
 static ComplexMatrix
 chol2inv_internal (const ComplexMatrix& r, bool is_upper = true)
 {
   ComplexMatrix retval;
diff --git a/liboctave/wrappers/signal-wrappers.c b/liboctave/wrappers/signal-wrappers.c
--- a/liboctave/wrappers/signal-wrappers.c
+++ b/liboctave/wrappers/signal-wrappers.c
@@ -166,23 +166,16 @@ octave_get_sig_number (const char *signa
     }
   else if (! strcmp (signame, "SIGINFO"))
     {
 #if defined (SIGINFO)
       *signum = SIGINFO;
       return true;
 #endif
     }
-  else if (! strcmp (signame, "SIGINT"))
-    {
-#if defined (SIGINT)
-      *signum = SIGINT;
-      return true;
-#endif
-    }
   else if (! strcmp (signame, "SIGIOT"))
     {
 #if defined (SIGIOT)
       *signum = SIGIOT;
       return true;
 #endif
     }
   else if (! strcmp (signame, "SIGLOST"))
