# HG changeset patch
# User jwe
# Date 922556446 0
#      Sat Mar 27 17:40:46 1999 +0000
# Node ID d54ef0aa6e824af4daf81b87b4cf295df9b319c7
# Parent  041ea33fbbf48020d8662cef3ca3ed3a46a433c1
[project @ 1999-03-27 17:40:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+Sat Mar 27 11:07:51 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.h (octave_value::count): New function.
+	* symtab.cc (symbol_record::dump_symbol_info): New function.
+	* symtab.cc (symbol_record::symbol_def::dump_symbol_info): Ditto.
+	* variables.cc (F__dump_symbol_info__): Ditto.
+
+	* pt-misc.cc (tree_parameter_list::clear): New function.
+	* ov-usr-fcn.h (octave_user_function::clear_args_passed): Ditto.
+	* ov-usr-fcn.cc (clear_param_list): New function.
+	(clear_args_passed): New function.
+	(octave_user_function::do_index_op): Use them to decrement
+	reference counts on local variables.
+
 Fri Mar 26 00:51:53 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (libraries): Use the libfoo.a(objects) method of
 	creating static libs.
 
 	* defaults.cc (symbols_of_defaults): Initialize LOADPATH to
 	Vload_path, not ":".
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -221,16 +221,34 @@ delete_vr_list (void *list)
 static void
 clear_symbol_table (void *table)
 {
   symbol_table *tmp = static_cast<symbol_table *> (table);
   tmp->clear ();
 }
 
 static void
+clear_param_list (void *lst)
+{
+  tree_parameter_list *tmp = static_cast<tree_parameter_list *> (lst);
+
+  if (tmp)
+    tmp->clear ();
+}
+
+static void
+clear_args_passed (void *fcn)
+{
+  octave_user_function *tmp = static_cast<octave_user_function *> (fcn);
+
+  if (tmp)
+    tmp->clear_args_passed ();
+}
+
+static void
 unprotect_function (void *sr_arg)
 {
   symbol_record *sr = static_cast<symbol_record *> (sr_arg);
   sr->unprotect ();
 }
 
 octave_value_list
 octave_user_function::do_index_op (int nargout, const octave_value_list& args)
@@ -297,39 +315,57 @@ octave_user_function::do_index_op (int n
   unwind_protect_ptr (curr_function);
   curr_function = this;
 
   // XXX FIXME XXX -- ???
   // unwind_protect_ptr (args_passed);
 
   args_passed = args;
 
+  // Force cache of arguments to be undefined when this function exits.
+  // Doing so decrements the reference counts on the values of local
+  // variables that are also named function parameters.
+
+  unwind_protect::add (::clear_args_passed, this);
+
   string_vector arg_names = args.name_tags ();
 
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
   unwind_protect_int (num_named_args);
   unwind_protect_int (curr_va_arg_number);
 
   if (param_list && ! param_list->varargs_only ())
     {
       param_list->define_from_arg_vector (args);
       if (error_state)
 	goto abort;
     }
 
+  // Force parameter list to be undefined when this function exits.
+  // Doing so decrements the reference counts on the values of local
+  // variables that are also named function parameters.
+
+  unwind_protect::add (clear_param_list, param_list);
+
   if (ret_list && Vdefine_all_return_values)
     {
       octave_value tmp = builtin_any_variable ("default_return_value");
 
       if (tmp.is_defined ())
 	ret_list->initialize_undefined_elements (tmp);
     }
 
+  // Force return list to be undefined when this function exits.
+  // Doing so decrements the reference counts on the values of local
+  // variables that are also named values returned by this function.
+
+  unwind_protect::add (clear_param_list, ret_list);
+
   // The following code is in a separate scope to avoid warnings from
   // G++ about `goto abort' crossing the initialization of some
   // variables.
 
   {
     bind_automatic_vars (arg_names, nargin, nargout);
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -106,16 +106,19 @@ public:
 
   void octave_vr_val (const octave_value& val);
 
   void stash_function_name (const string& s);
 
   string function_name (void)
     { return fcn_name; }
 
+  void clear_args_passed (void)
+    { args_passed = octave_value_list (); }
+
   octave_value_list do_index_op (int nargout, const octave_value_list& args);
 
   void traceback_error (void);
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -217,16 +217,18 @@ public:
 
 	  rep = a.rep;
 	  rep->count++;
 	}
 
       return *this;
     }
 
+  int count (void) { return rep->count; }
+
   virtual type_conv_fcn numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -105,16 +105,35 @@ tree_parameter_list::define_from_arg_vec
 	}
       else
 	ref.assign (octave_value::asn_eq, octave_value ());
 
       next (p);
     }
 }
 
+void
+tree_parameter_list::clear (void)
+{
+  int len = length ();
+
+  Pix p = first ();
+
+  for (int i = 0; i < len; i++)
+    {
+      tree_identifier *elt = this->operator () (p);
+
+      octave_lvalue ref = elt->lvalue ();
+
+      ref.assign (octave_value::asn_eq, octave_value ());
+
+      next (p);
+    }
+}
+
 octave_value_list
 tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
 {
   int nout = length ();
 
   if (vr_list)
     nout += vr_list->length ();
 
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -68,16 +68,18 @@ public:
 
   bool varargs_only (void)
     { return (marked_for_varargs < 0); }
 
   void initialize_undefined_elements (octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
+  void clear (void);
+
   bool is_defined (void);
 
   octave_value_list convert_to_const_vector (tree_va_return_list *vr_list);
 
   void accept (tree_walker& tw);
 
 private:
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -43,16 +43,24 @@ Software Foundation, 59 Temple Place - S
 #include "pager.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 octave_allocator
 symbol_record::symbol_def::allocator (sizeof (symbol_record::symbol_def));
 
+void
+symbol_record::symbol_def::dump_symbol_info (void)
+{
+  octave_stdout << "symbol_def::count: " << count << "\n";
+  octave_stdout << "def.type_name():   " << definition.type_name () << "\n";
+  octave_stdout << "def.count():       " << definition.count () << "\n";
+}
+
 // Individual records in a symbol table.
 
 // XXX FIXME XXX -- there are lots of places below where we should
 // probably be temporarily ignoring interrupts.
 
 void
 symbol_record::rename (const string& new_name)
 {
@@ -299,16 +307,25 @@ symbol_record::print_symbol_info_line (o
   else
     os << setiosflags (ios::right) << setw (7) << nc;
 
   os << resetiosflags (ios::right);
 
   os << "  " << name () << "\n";
 }
 
+void
+symbol_record::dump_symbol_info (void)
+{
+  if (definition)
+    definition->dump_symbol_info ();
+  else
+    octave_stdout << "symbol " << name () << " is undefined\n";
+}
+
 bool
 symbol_record::read_only_error (const char *action)
 {
   if (is_read_only ())
     {
       if (is_variable ())
 	::error ("can't %s read-only constant `%s'", action, nm.c_str ());
       else if (is_function ())
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -172,16 +172,18 @@ private:
     // Pointer to next definition in chain.  This is used so that
     // variables can hide function definitions, and so that the function
     // definitions can reappear if the variable is cleared.
     symbol_def *next_elem;
 
     // Reference count.
     int count;
 
+    void dump_symbol_info (void);
+
     // No copying!
 
     symbol_def (const symbol_def& sd);
 
     symbol_def& operator = (const symbol_def& sd);
   };
 
 public:
@@ -290,16 +292,18 @@ public:
   void chain (symbol_record *s) { next_elem = s; }
 
   void push_context (void);
 
   void pop_context (void);
 
   void print_symbol_info_line (ostream& os);
 
+  void dump_symbol_info (void);
+
 private:
 
   unsigned int formal_param : 1;
   unsigned int linked_to_global : 1;
   unsigned int tagged_static : 1;
 
   string nm;
   change_function chg_fcn;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1143,16 +1143,46 @@ DEFUN (__dump_symtab_info__, args, ,
   else if (nargin == 0)
     curr_sym_tab->print_stats ();
   else
     print_usage ("__dump_symtab_info__");
 
   return retval;
 }
 
+DEFUN (__dump_symbol_info__, args, ,
+  "__dump_symbol_info__ (NAME)")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      string symbol_name = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  symbol_record *sr = curr_sym_tab->lookup (symbol_name);
+
+	  if (sr)
+	    sr->dump_symbol_info ();
+	  else
+	    error ("__dymp_symbol_info__: symbol %s not found",
+		   symbol_name.c_str ());
+	}
+      else
+	print_usage ("__dump_symbol_info__");
+    }
+  else
+    print_usage ("__dump_symbol_info__");
+
+  return retval;
+}
+
 // XXX FIXME XXX -- some of these should do their own checking to be
 // able to provide more meaningful warning or error messages.
 
 static int
 ignore_function_time_stamp (void)
 {
   int pref = 0;
 
