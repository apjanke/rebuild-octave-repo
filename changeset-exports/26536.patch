# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546118725 -3600
#      Sat Dec 29 22:25:25 2018 +0100
# Branch stable
# Node ID b3157525cebfe83bdd79f6948429eb1030217c98
# Parent  d68381feb6cbb3459f02ed0dbbb3b48b8f40e0b3
jit: configure: Check llvm::IRBuilder API

* m4/acinclude.m4: New macro to check if llvm::IRBuilder has two template
  arguments (or not, in which case it has three).
* configure.ac: Call the new macro.
* libinterp/parse-tree/jit-util.h: Adapt IRBuilderD typedef.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1414,37 +1414,40 @@ if test $ENABLE_JIT = yes; then
     AC_CHECK_HEADER([llvm/Support/TargetSelect.h], [warn_llvm=""])
 
     have_function_h=no
     AC_CHECK_HEADERS([llvm/IR/Function.h llvm/Function.h],
                      [have_function_h=yes; break])
     if test $have_function_h = no; then
       warn_llvm="Missing LLVM file Function.h.  JIT compiler is disabled."
     fi
+
     have_irbuilder_h=no
     AC_CHECK_HEADERS([llvm/Support/IRBuilder.h llvm/IR/IRBuilder.h \
                       llvm/IRBuilder.h], [have_irbuilder_h=yes; break])
     if test $have_irbuilder_h = no; then
       warn_llvm="Missing LLVM file IRBuilder.h.  JIT compiler is disabled."
     fi
+
     have_llvm_data_h=no
     AC_CHECK_HEADERS([llvm/Target/TargetData.h llvm/IR/DataLayout.h \
                       llvm/DataLayout.h], [have_llvm_data_h=yes; break])
     if test $have_llvm_data_h = no; then
       warn_llvm="Missing LLVM file TargetData.h.  JIT compiler is disabled."
     fi
 
     AC_CHECK_HEADERS([llvm/IR/Verifier.h])
     AC_CHECK_HEADERS([llvm/Analysis/BasicAliasAnalysis.h])
 
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     OCTAVE_LLVM_RAW_FD_OSTREAM_API
     OCTAVE_LLVM_LEGACY_PASSMANAGER_API
+    OCTAVE_LLVM_IRBUILDER_API
     AC_LANG_POP(C++)
     CPPFLAGS="$save_CPPFLAGS"
     LDFLAGS="$save_LDFLAGS"
   fi
 
   if test -z "$warn_llvm"; then
     AC_DEFINE(HAVE_LLVM, 1, [Define to 1 if LLVM is available.])
   else
diff --git a/libinterp/parse-tree/jit-util.h b/libinterp/parse-tree/jit-util.h
--- a/libinterp/parse-tree/jit-util.h
+++ b/libinterp/parse-tree/jit-util.h
@@ -65,24 +65,38 @@ namespace llvm
   class GlobalValue;
   class GlobalVariable;
   class TerminatorInst;
   class PHINode;
   class TargetMachine;
 
   class ConstantFolder;
 
+#if defined  LLVM_IRBUILDER_HAS_TWO_TEMPLATE_ARGS
+
+  class IRBuilderDefaultInserter;
+
+  template <typename T, typename Inserter>
+  class IRBuilder;
+
+  typedef IRBuilder<ConstantFolder, IRBuilderDefaultInserter>
+    IRBuilderD;
+
+#else
+
   template <bool preserveNames>
   class IRBuilderDefaultInserter;
 
   template <bool preserveNames, typename T, typename Inserter>
   class IRBuilder;
 
   typedef IRBuilder<true, ConstantFolder, IRBuilderDefaultInserter<true>>
     IRBuilderD;
+
+#endif
 }
 
 // some octave classes that are not (yet) in the octave namespace
 class octave_base_value;
 class octave_builtin;
 class octave_value;
 class tree;
 class tree_expression;
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2748,16 +2748,51 @@ AC_DEFUN([OCTAVE_LLVM_RAW_FD_OSTREAM_API
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_raw_fd_ostream_arg_is_llvm_sys_fs = yes; then
     AC_DEFINE(RAW_FD_OSTREAM_ARG_IS_LLVM_SYS_FS, 1,
       [Define to 1 if LLVM::raw_fd_ostream arg type is llvm::sys:fs.])
   fi
 ])
 dnl
+dnl Check llvm::IRBuilder API
+dnl
+AC_DEFUN([OCTAVE_LLVM_IRBUILDER_API], [
+  AC_CACHE_CHECK([check if llvm::IRBuilder has two template arguments],
+    [octave_cv_llvm_irbuilder_has_two_template_args],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+#if defined (HAVE_LLVM_IR_FUNCTION_H)
+          #include <llvm/IR/LLVMContext.h>
+#else
+          #include <llvm/LLVMContext.h>
+#endif
+#if defined (HAVE_LLVM_IR_IRBUILDER_H)
+          #include <llvm/IR/IRBuilder.h>
+#elif defined (HAVE_LLVM_SUPPORT_IRBUILDER_H)
+          #include <llvm/Support/IRBuilder.h>
+#else
+          #include <llvm/IRBuilder.h>
+#endif
+          using namespace llvm;
+          ]], [[
+          LLVMContext c;
+          IRBuilder<ConstantFolder,IRBuilderDefaultInserter>  irb (c);
+        ]])],
+        octave_cv_llvm_irbuilder_has_two_template_args=yes,
+        octave_cv_llvm_irbuilder_has_two_template_args=no)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_llvm_irbuilder_has_two_template_args = yes; then
+    AC_DEFINE(LLVM_IRBUILDER_HAS_TWO_TEMPLATE_ARGS, 1,
+      [Define to 1 if llvm::IRBuilder has two template arguments.])
+  fi
+])
+dnl
 dnl OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS
 dnl
 dnl Set variables related to Fortran symbol names (append underscore,
 dnl use uppercase names, etc.) and calling convention (mostly used for
 dnl determining how character strings are passed).
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS], [
   F77_TOLOWER=yes
