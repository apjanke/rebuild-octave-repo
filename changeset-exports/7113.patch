# HG changeset patch
# User dbateman
# Date 1194395281 0
#      Wed Nov 07 00:28:01 2007 +0000
# Node ID a018c140f8aa7114fff3c9e75e2804a07ada0525
# Parent  f90a8188c9c28de1aeee6788ed987442af786b66
[project @ 2007-11-07 00:28:01 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 2007-11-06  David Bateman  <dbateman@free.fr>
 
+	* intNDArray.cc (intNDArray<T> intNDArray<T>::sum (int) const):
+	New method.
+	* intNDarray.h (intNDArray sum (int) const): Declare it.
+	* boolNDArray.cc (boolNDArray boolNDArray::sum (int) const):
+	New method.
+	* boolNDarray.cc (boolNDArray sum (int) const): Declare it.
 	* MArray-def.h (MARRAY_NORM_BODY): Scale frobenius norm by infinity
 	norm to avoid issues of over- and underflow.  From Rolf Fabian
 	<Rolf.Fabian@gmx.de>.
 
 2007-10-30  David Bateman  <dbateman@free.fr>
 
 	* DASRT-opts.in, LSODE-opts.in: Doc fixes for small book format.
 
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -52,16 +52,22 @@ boolNDArray::all (int dim) const
 }
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
+boolNDArray 
+boolNDArray::sum (int dim) const
+{
+  MX_ND_REDUCTION (retval(result_idx) |= elem (iter_idx), true, boolNDArray);
+}
+
 boolNDArray
 boolNDArray::concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
 }
 
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -61,16 +61,18 @@ public:
 
   boolNDArray operator ! (void) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
+  boolNDArray sum (int dim = -1) const;
+
   boolNDArray concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   boolNDArray& insert (const boolNDArray& a, octave_idx_type r, octave_idx_type c);
   boolNDArray& insert (const boolNDArray& a, const Array<octave_idx_type>& ra_idx);
 
   boolMatrix matrix_value (void) const;
 
   boolNDArray squeeze (void) const { return ArrayN<bool>::squeeze (); }
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -217,13 +217,20 @@ operator >> (std::istream& is, intNDArra
 	}
     }
 
  done:
 
   return is;
 }
 
+template <class T>
+intNDArray<T>
+intNDArray<T>::sum (int dim) const
+{
+  MX_ND_REDUCTION (retval(result_idx) += intNDArray<T>::elem (iter_idx), 0, intNDArray<T>);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -68,16 +68,18 @@ public:
   intNDArray diag (void) const;
   intNDArray diag (octave_idx_type k) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
+  intNDArray sum (int dim) const;
+
   intNDArray squeeze (void) const
     { return intNDArray<T> (MArrayN<T>::squeeze ()); }
 
   intNDArray transpose (void) const
     { return intNDArray<T> (MArrayN<T>::transpose ()); }
 
   intNDArray concat (const intNDArray<T>& rb, const Array<octave_idx_type>& ra_idx);
 
