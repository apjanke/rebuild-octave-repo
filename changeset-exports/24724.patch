# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1518247997 -3600
#      Sat Feb 10 08:33:17 2018 +0100
# Node ID fa60be0abc21f5a4cbfda6ece7bed81de3e03cb2
# Parent  5bb3874549a286e3d95b836f8c7578a835d19bb6
add tab move and switch shortcuts to the doc browser

* webinfo.cc (webinfo): use new add_action for close actions, add actions
  for moving and switching tabs
  (add_action): new arg for different receiver;
  (notice_settings): get shortcuts for new actions

* webinfo.h: new actions, new add_action

* shortcut-manager.cc (do_init_data): reorder some shortcut entries;
  (do_fill_treewidget): move tab handling from editor to global

* tab-bar.cc/h (switch_left_tab, switch_right_tab, move_tab_left,
  move_tab_right, switch_tab): move from file editor to here

diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -85,56 +85,71 @@ namespace octave
                                            tr ("Type here and press \'Return\' to search"));
 #endif
     hbox_layout->addWidget (_search_line_edit);
 
     _search_check_box = new QCheckBox (tr ("Global search"));
     hbox_layout->addWidget (_search_check_box);
 
     _close_action = add_action (_tab_bar->get_context_menu (),
-                                resource_manager::icon ("window-close",false), tr ("&Close"),
-                                SLOT (request_close_tab (bool)));
+          resource_manager::icon ("window-close",false), tr ("&Close"),
+          this, SLOT (request_close_tab (bool)));
     _close_others_action = add_action (_tab_bar->get_context_menu (),
-                                       resource_manager::icon ("window-close",false), tr ("Close &Other Tabs"),
-                                       SLOT (request_close_other_tabs (bool)));
+          resource_manager::icon ("window-close",false), tr ("Close &Other Tabs"),
+          this, SLOT (request_close_other_tabs (bool)));
     _close_action->setEnabled (false);
     _close_others_action->setEnabled (false);
 
     connect (_tab_bar, SIGNAL (close_current_tab_signal (bool)),
              this, SLOT (request_close_tab (bool)));
     connect (_tab_bar, SIGNAL (tabCloseRequested (int)),
               this, SLOT (close_tab (int)));
     connect (_tab_bar, SIGNAL (currentChanged (int)), this,
              SLOT (current_tab_changed (int)));
     connect (_zoom_in_button, SIGNAL (clicked ()), this, SLOT (zoom_in ()));
     connect (_zoom_out_button, SIGNAL (clicked ()), this, SLOT (zoom_out ()));
     connect (_search_line_edit, SIGNAL (returnPressed ()), this, SLOT (search ()));
 
+    // Actions for tab navigation
+    m_switch_left_tab_action
+      = add_action (nullptr, QIcon (), "",
+                    _tab_bar, SLOT (switch_left_tab (void)));
+    m_switch_right_tab_action
+      = add_action (nullptr, QIcon (), "",
+                    _tab_bar, SLOT (switch_right_tab (void)));
+    m_move_tab_left_action
+      = add_action (nullptr, QIcon (), "",
+                    _tab_bar, SLOT (move_tab_left (void)));
+    m_move_tab_right_action
+      = add_action (nullptr, QIcon (), "",
+                    _tab_bar, SLOT (move_tab_right (void)));
+
     resize (500, 300);
   }
 
   // Add an action to a menu or the widget itself
-  QAction * webinfo::add_action (QMenu *menu, const QIcon& icon,
-                                 const QString& text, const char *member)
+  QAction* webinfo::add_action (QMenu *menu, const QIcon& icon,
+                                const QString& text,
+                                QWidget* receiver, const char *member)
   {
     QAction *a;
 
     if (menu)
-      a = menu->addAction (icon, text, this, member);
+      a = menu->addAction (icon, text, receiver, member);
     else
       {
         a = new QAction (this);
-        connect (a, SIGNAL (triggered ()), this, member);
+        connect (a, SIGNAL (triggered ()), receiver, member);
       }
 
-    addAction (a);  // important for shortcut context
-    a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
+      addAction (a);  // important for shortcut context
+      a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
 
-    return a;
-  }
+      return a;
+    }
 
   // Slot for the close tab action
   void webinfo::request_close_tab (bool)
   {
     close_tab (_tab_bar->currentIndex ());
   }
 
   // Slot for the close other tabs action
@@ -347,11 +362,15 @@ namespace octave
           _search_line_edit->insert (str);
       }
   }
 
   void webinfo::notice_settings (const QSettings *)
   {
     shortcut_manager::set_shortcut (_close_action, "editor_file:close");
     shortcut_manager::set_shortcut (_close_others_action, "editor_file:close_other");
+    shortcut_manager::set_shortcut (m_switch_left_tab_action, "editor_tabs:switch_left_tab");
+    shortcut_manager::set_shortcut (m_switch_right_tab_action, "editor_tabs:switch_right_tab");
+    shortcut_manager::set_shortcut (m_move_tab_left_action, "editor_tabs:move_tab_left");
+    shortcut_manager::set_shortcut (m_move_tab_right_action, "editor_tabs:move_tab_right");
   }
 }
 
diff --git a/libgui/src/qtinfo/webinfo.h b/libgui/src/qtinfo/webinfo.h
--- a/libgui/src/qtinfo/webinfo.h
+++ b/libgui/src/qtinfo/webinfo.h
@@ -73,31 +73,37 @@ namespace octave
     void pasteClipboard (void);
     void selectAll (void);
 
     void request_close_tab (bool);
     void request_close_other_tabs (bool);
 
   private:
 
-    QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
-                          const char *member);
-    void tab_state_changed (void);
+    QAction *_close_action;
+    QAction *_close_others_action;
+    QAction *m_switch_left_tab_action;
+    QAction *m_switch_right_tab_action;
+    QAction *m_move_tab_left_action;
+    QAction *m_move_tab_right_action;
 
     QTextBrowser *_text_browser;
     tab_bar *_tab_bar;
     QStackedWidget *_stacked_widget;
     QLineEdit *_search_line_edit;
     QCheckBox *_search_check_box;
     QToolButton *_zoom_in_button;
     QToolButton *_zoom_out_button;
 
     texinfo_parser _parser;
     QFont _font_web;
 
     QTextBrowser * addNewTab (const QString& name);
-    QAction *_close_action;
-    QAction *_close_others_action;
+
+    QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
+                          QWidget *receiver, const char *member);
+
+    void tab_state_changed (void);
 
   };
 }
 
 #endif
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -315,16 +315,24 @@ namespace octave
     init (tr ("Community News"), "main_news:community_news", QKeySequence ());
 
     // Tab handling
     // The following shortcuts are moved into a separate tab. The key names
     // are not change for preserving compatibility with older versions
     init (tr ("Close Tab"), "editor_file:close", QKeySequence::Close);
     init (tr ("Close All Tabs"), "editor_file:close_all", QKeySequence ());
     init (tr ("Close Other Tabs"), "editor_file:close_other", QKeySequence ());
+    init (tr ("Switch to Left Tab"), "editor_tabs:switch_left_tab",
+          QKeySequence (ctrl + Qt::Key_PageUp));
+    init (tr ("Switch to Right Tab"), "editor_tabs:switch_right_tab",
+          QKeySequence (ctrl + Qt::Key_PageDown));
+    init (tr ("Move Tab Left"), "editor_tabs:move_tab_left",
+          QKeySequence (Qt::AltModifier + Qt::Key_PageUp));
+    init (tr ("Move Tab Right"), "editor_tabs:move_tab_right",
+          QKeySequence (Qt::AltModifier + Qt::Key_PageDown));
 
     // actions of the editor
 
     // file
     init (tr ("Edit Function"), "editor_file:edit_function",
           QKeySequence (ctrl + Qt::Key_E));
     init (tr ("Save File"), "editor_file:save", QKeySequence::Save);
     init (tr ("Save File As"), "editor_file:save_as", QKeySequence::SaveAs);
@@ -454,26 +462,16 @@ namespace octave
           QKeySequence (prefix + Qt::Key_F9));
 
     // help
     init (tr ("Help on Keyword"), "editor_help:help_keyword",
           QKeySequence::HelpContents);
     init (tr ("Document on Keyword"), "editor_help:doc_keyword",
           QKeySequence (Qt::SHIFT + Qt::Key_F1));
 
-    // tab navigation
-    init (tr ("Switch to Left Tab"), "editor_tabs:switch_left_tab",
-          QKeySequence (ctrl + Qt::Key_PageUp));
-    init (tr ("Switch to Right Tab"), "editor_tabs:switch_right_tab",
-          QKeySequence (ctrl + Qt::Key_PageDown));
-    init (tr ("Move Tab Left"), "editor_tabs:move_tab_left",
-          QKeySequence (Qt::AltModifier + Qt::Key_PageUp));
-    init (tr ("Move Tab Right"), "editor_tabs:move_tab_right",
-          QKeySequence (Qt::AltModifier + Qt::Key_PageDown));
-
   }
 
   // write one or all actual shortcut set(s) into a settings file
   void shortcut_manager::do_write_shortcuts (QSettings *settings,
                                              bool closing)
   {
     bool sc_ctrld = false;
 
@@ -542,42 +540,40 @@ namespace octave
 
     m_level_hash["main_file"]   = main_file;
     m_level_hash["main_edit"]   = main_edit;
     m_level_hash["main_debug"]   = main_debug;
     m_level_hash["main_window"]   = main_window;
     m_level_hash["main_help"]   = main_help;
     m_level_hash["main_news"]   = main_news;
     m_level_hash["main_tabs"]   = main_tabs;
+    m_level_hash["editor_tabs"]   = main_tabs;
 
     QTreeWidgetItem *editor = new QTreeWidgetItem (tree_view);
     editor->setText (0, tr ("Editor"));
     editor->setExpanded (true);
     QTreeWidgetItem *editor_file = new QTreeWidgetItem (editor);
     editor_file->setText (0, tr ("File Menu"));
     QTreeWidgetItem *editor_edit = new QTreeWidgetItem (editor);
     editor_edit->setText (0, tr ("Edit Menu"));
     QTreeWidgetItem *editor_view = new QTreeWidgetItem (editor);
     editor_view->setText (0, tr ("View Menu"));
     QTreeWidgetItem *editor_debug = new QTreeWidgetItem (editor);
     editor_debug->setText (0, tr ("Debug Menu"));
     QTreeWidgetItem *editor_run = new QTreeWidgetItem (editor);
     editor_run->setText (0, tr ("Run Menu"));
     QTreeWidgetItem *editor_help = new QTreeWidgetItem (editor);
     editor_help->setText (0, tr ("Help Menu"));
-    QTreeWidgetItem *editor_tabs = new QTreeWidgetItem (editor);
-    editor_tabs->setText (0, tr ("Tab Handling"));
 
     m_level_hash["editor_file"] = editor_file;
     m_level_hash["editor_edit"] = editor_edit;
     m_level_hash["editor_view"] = editor_view;
     m_level_hash["editor_debug"] = editor_debug;
     m_level_hash["editor_run"] = editor_run;
     m_level_hash["editor_help"] = editor_help;
-    m_level_hash["editor_tabs"] = editor_tabs;
 
     connect (tree_view, SIGNAL (itemDoubleClicked (QTreeWidgetItem*, int)),
              this, SLOT (handle_double_clicked (QTreeWidgetItem*, int)));
 
     for (int i = 0; i < m_sc.count (); i++)
       {
         shortcut_t sc = m_sc.at (i);
 
diff --git a/libgui/src/tab-bar.cc b/libgui/src/tab-bar.cc
--- a/libgui/src/tab-bar.cc
+++ b/libgui/src/tab-bar.cc
@@ -18,29 +18,83 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <https://www.gnu.org/licenses/>.
 
 */
 
 // This file implements a tab bar derived from QTabBar with a contextmenu
 // and possibility to close a tab via double-left and middle mouse click.
 
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
 #include "tab-bar.h"
 
 namespace octave
 {
   tab_bar::tab_bar (QWidget *p)
     : QTabBar (p), m_context_menu (new QMenu (this))
   { }
 
   tab_bar::~tab_bar (void)
   {
     delete m_context_menu;
   }
 
+  // slots for tab navigation
+  void tab_bar::switch_left_tab (void)
+  {
+    switch_tab (-1);
+  }
+
+  void tab_bar::switch_right_tab (void)
+  {
+    switch_tab (1);
+  }
+
+  void tab_bar::move_tab_left (void)
+  {
+#if defined (HAVE_QTABWIDGET_SETMOVABLE)
+    switch_tab (-1, true);
+#endif
+  }
+
+  void tab_bar::move_tab_right (void)
+  {
+#if defined (HAVE_QTABWIDGET_SETMOVABLE)
+    switch_tab (1, true);
+#endif
+  }
+
+  void tab_bar::switch_tab (int direction, bool movetab)
+  {
+    int tabs = count ();
+
+    if (tabs < 2)
+      return;
+
+    int old_pos = currentIndex ();
+    int new_pos = currentIndex () + direction;
+
+    if (new_pos < 0 || new_pos >= tabs)
+      new_pos = new_pos - direction*tabs;
+
+    if (movetab)
+      {
+#if defined (HAVE_QTABWIDGET_SETMOVABLE)
+        moveTab (old_pos, new_pos);
+        setCurrentIndex (old_pos);
+        setCurrentIndex (new_pos);
+#endif
+      }
+    else
+      setCurrentIndex (new_pos);
+  }
+
   // Reimplement mouse event for filtering out the desired mouse clicks
   void tab_bar::mousePressEvent (QMouseEvent *me)
   {
     QPoint click_pos;
     int clicked_idx = -1;
 
     // detect the tab where the click occured
     for (int i = 0; i < count (); i++)
diff --git a/libgui/src/tab-bar.h b/libgui/src/tab-bar.h
--- a/libgui/src/tab-bar.h
+++ b/libgui/src/tab-bar.h
@@ -45,23 +45,32 @@ namespace octave
     ~tab_bar (void);
 
     QMenu *get_context_menu (void) { return m_context_menu; };
 
   signals:
 
     void close_current_tab_signal (bool);
 
+  public slots:
+
+    void switch_left_tab (void);
+    void switch_right_tab (void);
+    void move_tab_left (void);
+    void move_tab_right (void);
+
   protected:
 
     void mousePressEvent(QMouseEvent *event);
 
   private:
 
     QMenu *m_context_menu;
+
+    void switch_tab (int direction, bool movetab = false);
   };
 }
 
 // FIXME: This is temporary and should be removed when all classes that
 // use the tab_bar class are also inside the octave namespace.
 using octave::tab_bar;
 
 #endif
