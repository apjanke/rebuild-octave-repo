# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541975470 28800
#      Sun Nov 11 14:31:10 2018 -0800
# Node ID da2bbcf1fbcd7723f29d8d633eef2e92444efa97
# Parent  ecd86b8b8979462f3bc779364a1c6f7c6afd0a99
Deprecate C++ function is_keyword in favor of iskeyword for readability.

* token.h (iskeyword): New function with same code as is_keyword.
* token.h (is_keyword): Add OCTAVE_DEPRECATED decoration on function.
Change code to call iskeyword.

* NEWS: Announce deprecation.

* ls-mat-ascii.cc, utils.cc, variables.cc, lex.h, lex.ll, oct-parse.yy:
Replace instances of is_keyword with iskeyword.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -161,12 +161,14 @@ Summary of important user-visible change
 
       Object               | Property                | Value
       ---------------------|-------------------------|-------------------
       axes                 | xaxislocation           | "zero"
                            | yaxislocation           | "zero"
       patch                | normalmode              |
       surface              | normalmode              |
 
+ ** The C++ function is_keyword has been deprecated in favor of
+    iskeyword.  The old function will be removed two versions after 5.0.
 
 ---------------------------------------------------------
 
 See NEWS.4 for old news.
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -243,17 +243,17 @@ read_mat_ascii_data (std::istream& is, c
   size_t len = varname.length ();
   for (size_t i = 0; i < len; i++)
     {
       char c = varname[i];
       if (! (isalnum (c) || c == '_'))
         varname[i] = '_';
     }
 
-  if (octave::is_keyword (varname) || ! isalpha (varname[0]))
+  if (octave::iskeyword (varname) || ! isalpha (varname[0]))
     varname.insert (0, "X");
 
   if (! octave::valid_identifier (varname))
     error ("load: unable to convert filename '%s' to valid identifier",
            filename.c_str ());
 
   octave_idx_type nr = 0;
   octave_idx_type nc = 0;
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -102,17 +102,17 @@ Return true if @var{name} is a valid var
 
   octave_value retval = false;
 
   if (args(0).is_string ())
     {
       std::string varname = args(0).string_value ();
 
       retval = (octave::valid_identifier (varname)
-                && ! octave::is_keyword (varname));
+                && ! octave::iskeyword (varname));
     }
 
   return retval;
 }
 
 /*
 %!assert (isvarname ("foo"), true)
 %!assert (isvarname ("_foo"), true)
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -207,17 +207,17 @@ isglobal ("x")
 %!error isglobal ("a", "b")
 %!error isglobal (1)
 */
 
 static int
 symbol_exist (octave::interpreter& interp, const std::string& name,
               const std::string& type = "any")
 {
-  if (octave::is_keyword (name))
+  if (octave::iskeyword (name))
     return 0;
 
   bool search_any = type == "any";
   bool search_var = type == "var";
   bool search_dir = type == "dir";
   bool search_file = type == "file";
   bool search_builtin = type == "builtin";
   bool search_class = type == "class";
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 #include "symscope.h"
 #include "token.h"
 
 namespace octave
 {
   class interpreter;
 
   // Is the given string a keyword?
-  extern bool is_keyword (const std::string& s);
+  extern bool iskeyword (const std::string& s);
 
   // For communication between the lexer and parser.
 
   class
   lexical_feedback
   {
   public:
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1947,17 +1947,17 @@ display_character (char c)
         std::cerr << "DEL";
         break;
       }
 }
 
 namespace octave
 {
   bool
-  is_keyword (const std::string& s)
+  iskeyword (const std::string& s)
   {
     // Parsing function names like "set.property_name" inside
     // classdef-style class definitions is simplified by handling the
     // "set" and "get" portions of the names using the same mechanism
     // as is used for keywords.  However, they are not really keywords
     // in the language, so omit them from the list of possible
     // keywords.  Likewise for "enumeration", "events", "methods", and
     // "properties".
@@ -1984,17 +1984,17 @@ If @var{name} is omitted, return a list 
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   if (nargin == 0)
     {
       // Neither set nor get are keywords.  See the note in the
-      // is_keyword function for additional details.
+      // iskeyword function for additional details.
 
       string_vector lst (TOTAL_KEYWORDS);
 
       int j = 0;
 
       for (int i = 0; i < TOTAL_KEYWORDS; i++)
         {
           std::string kword = wordlist[i].name;
@@ -2005,17 +2005,17 @@ If @var{name} is omitted, return a list 
 
       lst.resize (j);
 
       retval = Cell (lst.sort ());
     }
   else
     {
       std::string name = args(0).xstring_value ("iskeyword: NAME must be a string");
-      retval = octave::is_keyword (name);
+      retval = octave::iskeyword (name);
     }
 
   return retval;
 }
 
 /*
 
 %!assert (iskeyword ("for"))
@@ -2189,17 +2189,17 @@ namespace octave
             || tok == MUL_EQ || tok == OR_EQ || tok == POW
             || tok == POW_EQ || tok == SUB_EQ);
   }
 
   bool
   lexical_feedback::previous_token_is_keyword (void) const
   {
     const token *tok = m_tokens.front ();
-    return tok ? tok->is_keyword () : false;
+    return tok ? tok->iskeyword () : false;
   }
 
   bool
   lexical_feedback::previous_token_may_be_command (void) const
   {
     const token *tok = m_tokens.front ();
     return tok ? tok->may_be_command () : false;
   }
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3210,17 +3210,17 @@ namespace octave
 
     if (lhs->is_simple_assign_lhs ())
       {
         // We are looking at a simple assignment statement like x = rhs;
 
         tree_expression *tmp = lhs->remove_front ();
 
         if ((tmp->is_identifier () || tmp->is_index_expression ())
-            && is_keyword (tmp->name ()))
+            && iskeyword (tmp->name ()))
           {
             std::string kw = tmp->name ();
 
             delete tmp;
             delete lhs;
             delete rhs;
 
             bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
@@ -3233,17 +3233,17 @@ namespace octave
         return new tree_simple_assignment (tmp, rhs, false, l, c, t);
       }
     else
       {
         std::list<std::string> names = lhs->variable_names ();
 
         for (const auto& kw : names)
           {
-            if (is_keyword (kw))
+            if (iskeyword (kw))
               {
                 delete lhs;
                 delete rhs;
 
                 bison_error ("invalid assignment to keyword \"" + kw + "\"",
                              l, c);
 
                 return nullptr;
@@ -5650,17 +5650,17 @@ may be either @qcode{"base"} or @qcode{"
   std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");
 
   if (octave::valid_identifier (nm))
     {
       // Put the check here so that we don't slow down assignments
       // generally.  Any that go through Octave's parser should have
       // already been checked.
 
-      if (octave::is_keyword (nm))
+      if (octave::iskeyword (nm))
         error ("assignin: invalid assignment to keyword '%s'", nm.c_str ());
 
       octave::symbol_scope scope = interp.get_current_scope ();
 
       if (scope)
         scope.assign (nm, args(2));
     }
   else
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -92,19 +92,25 @@ namespace octave
     bool space_follows_token (void) const { return m_tspc; }
 
     int token_value (void) const { return m_tok_val; }
     bool token_value_is (int tv) const { return tv == m_tok_val; }
 
     int line (void) const { return m_line_num; }
     int column (void) const { return m_column_num; }
 
+    bool iskeyword (void) const
+    {
+      return m_type_tag == keyword_token || m_type_tag == ettype_token;
+    }
+
+    OCTAVE_DEPRECATED (5, "use 'octave::iskeyword' instead")
     bool is_keyword (void) const
     {
-      return m_type_tag == keyword_token || m_type_tag == ettype_token;
+      return iskeyword ();
     }
 
     bool is_symbol (void) const
     {
       return m_type_tag == sym_rec_token;
     }
 
     std::string text (void) const;
