# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1252412855 -7200
#      Tue Sep 08 14:27:35 2009 +0200
# Node ID 73e6ad869f08ed777c8c98b1430eb4dd53666e6a
# Parent  5bcfa0b346e83b4d855355102570bb7f0be2ccf7
further correct initial TR step strategy

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Change initial TR step strategy.
+	* optimization/fminunc.m: Change initial TR step strategy.
+
 2009-09-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fminunc.m: Correct extra output params handling.
 
 2009-09-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Update initial factor.
 	* optimization/fminunc.m: Update initial factor.
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -184,17 +184,17 @@ function [x, fval, info, output, grad, h
     endif
 
     ## Second derivatives approximate the hessian.
     d2f = norm (hesr, 'columns').';
     if (niter == 1)
       dg = d2f;
       xn = norm (dg .* x);
       ## FIXME: something better?
-      delta = max (factor * xn, 1);
+      delta = factor * max (xn, 1);
     endif
 
     ## FIXME: maybe fixed lower and upper bounds?
     dg = max (0.1*dg, d2f);
 
     ## FIXME -- why tolf*n*xn? If abs (e) ~ abs(x) * eps is a vector
     ## of perturbations of x, then norm (hesr*e) <= eps*xn, i.e. by
     ## tolf ~ eps we demand as much accuracy as we can expect.
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -229,17 +229,17 @@ function [x, fvec, info, output, fjac] =
 
     ## Get column norms, use them as scaling factors.
     jcn = norm (fjac, 'columns').';
     if (niter == 1)
       dg = jcn;
       dg(dg == 0) = 1;
       xn = norm (dg .* x);
       ## FIXME: something better?
-      delta = max (factor * xn, 1);
+      delta = factor * max (xn, 1);
     endif
 
     ## Rescale adaptively.
     ## FIXME: the original minpack used the following rescaling strategy:
     ##   dg = max (dg, jcn);
     ## but it seems not good if we start with a bad guess yielding jacobian
     ## columns with large norms that later decrease, because the corresponding
     ## variable will still be overscaled. So instead, we only give the old
