# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449780570 28800
#      Thu Dec 10 12:49:30 2015 -0800
# Node ID c54ae1fb7e3b37bc6671a797d756800ff5361a01
# Parent  ce8c465aa6a4776f599ac9ff2cf4095b88fc2e03
maint: Fix typo in code comments.

* ls-oct-binary.cc, ls-oct-text.cc: Use correct spelling of compatibility.

diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -108,17 +108,17 @@ along with Octave; see the file COPYING.
 //   type_length          integer             4
 //
 //   type                 string    type_length
 //
 // The string "type" is then used with octave_value_typeinfo::lookup_type
 // to create an octave_value of the correct type. The specific load/save
 // function is then called.
 //
-// For backward compatiablity "data type" can also be a value between 1
+// For backward compatibility "data type" can also be a value between 1
 // and 7, where this defines a hardcoded octave_value of the type
 //
 //   data type                  octave_value
 //   ---------                  ------------
 //   1                          scalar
 //   2                          matrix
 //   3                          complex scalar
 //   4                          complex matrix
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -267,17 +267,17 @@ read_text_data (std::istream& is, const 
         {
           global = SUBSTRING_COMPARE_EQ (tag, 0, 6, "global");
 
           typ = global ? tag.substr (7) : tag;
         }
       else
         typ = tag;
 
-      // Special case for backward compatiablity. A small bit of cruft
+      // Special case for backward compatibility.  A small bit of cruft
       if (SUBSTRING_COMPARE_EQ (typ, 0, 12, "string array"))
         tc = charMatrix ();
       else
         tc = octave_value_typeinfo::lookup_type (typ);
 
       if (! tc.load_ascii (is))
         error ("load: trouble reading ascii file '%s'", filename.c_str ());
     }
