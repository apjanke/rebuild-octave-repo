# HG changeset patch
# User jwe
# Date 815308371 0
#      Thu Nov 02 10:32:51 1995 +0000
# Node ID 58347671243833a6001a6d6d0dc07c5085a5fb5c
# Parent  8dc3bdef46e27103475fd52cb0569f7c7fab17e6
[project @ 1995-11-02 10:30:06 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -608,17 +608,17 @@ octave_read (char *buf, int max_size)
 
   return status;
 }
 
 // Fix things up so that input can come from file `name', printing a
 // warning if the file doesn't exist.
 
 FILE *
-get_input_from_file (char *name, int warn)
+get_input_from_file (const char *name, int warn)
 {
   FILE *instream = 0;
 
   if (name && *name)
     instream = fopen (name, "r");
 
   if (! instream && warn)
     warning ("%s: no such file or directory", name);
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -24,17 +24,17 @@ Software Foundation, 59 Temple Place - S
 // Use the GNU readline library for command line editing and hisory.
 
 #if !defined (octave_input_h)
 #define octave_input_h 1
 
 #include <cstdio>
 
 extern int octave_read (char *buf, int max_size);
-extern FILE *get_input_from_file (char *name, int warn = 1);
+extern FILE *get_input_from_file (const char *name, int warn = 1);
 extern FILE *get_input_from_stdin (void);
 extern void initialize_readline (void);
 
 // Global pointer for eval().
 extern const char *current_eval_string;
 
 // Nonzero means get input from current_eval_string.
 extern int get_input_from_eval_string;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -347,17 +347,17 @@ parse_and_execute (FILE *f, int print)
 	}
     }
   while (retval == 0);
 
   run_unwind_frame ("parse_and_execute");
 }
 
 void
-parse_and_execute (char *s, int print, int verbose)
+parse_and_execute (const char *s, int print, int verbose)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
 
   reading_script_file = 1;
 
   FILE *f = get_input_from_file (s, 0);
@@ -382,16 +382,38 @@ parse_and_execute (char *s, int print, i
 
       if (verbose)
 	cout << "done." << endl;
     }
 
   run_unwind_frame ("parse_and_execute_2");
 }
 
+DEFUN ("source", Fsource, Ssource, 10,
+  "source (FILE)\n\
+\n\
+Parse and execute the contents of FILE.  Like executing commands in a\n\
+script file but without requiring the file to be named `FILE.m'.")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      const char *file = args(0).string_value ();
+
+      parse_and_execute (file, 1);
+    }
+  else
+    print_usage ("source");
+
+  return retval;
+}
+
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   begin_unwind_frame ("execute_startup_files");
 
   unwind_protect_int (user_pref.echo_executing_commands);
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -29,17 +29,19 @@ Software Foundation, 59 Temple Place - S
 class tree_constant;
 class tree_function;
 class tree_statement_list;
 class charMatrix;
 
 extern void clean_up_and_exit (int) NORETURN;
 
 extern void parse_and_execute (FILE *f, int print = 0);
-extern void parse_and_execute (char *s, int print = 0, int verbose = 0);
+
+extern void parse_and_execute (const char *s, int print = 0,
+			       int verbose = 0);
 
 extern tree_constant eval_string (const char *string, int print,
 				  int& parse_status);
 
 // argv[0] for this program.
 extern char *raw_prog_name;
 
 // Cleaned-up name of this program, not including path information.
