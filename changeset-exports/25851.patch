# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1535869000 -7200
#      Sun Sep 02 08:16:40 2018 +0200
# Node ID 507cee1b684ebcc4d9333419ed1850ccd1cf0c5c
# Parent  153495e05477d4a7b1c33f898e687eba7b6101c8
removed all initial preferences for file browser from pref file (bug #54606)

* default-qt-settings.in: removed all preferences for the file browser

* files-dock-widget.cc (files-dock-widget): use new constants for preferences
  keys and default values, define a list of defaults values in addition to the
  list of keys, restore last columns state only if the related entry in the
  pref file does exist, add configurations for moving and clicking the headers;
  (save_settings): use new constants for preferences keys and default values;
  (display_directory): use new const. for preferences keys and default values;
  (headercontextmenu_requested) use new const. for pref keys and default values;
  (notice_settings): use new const. for preferences keys and default values

* files-dock-widget.h: new class variable for list of default values

* gui-preferences.h: constant definitions of all preference keys and defaults
  values for the file

diff --git a/libgui/default-qt-settings.in b/libgui/default-qt-settings.in
--- a/libgui/default-qt-settings.in
+++ b/libgui/default-qt-settings.in
@@ -53,28 +53,16 @@ NewsDockWidgetVisible=true
 TerminalDockWidget=@ByteArray(\x1\xd9\xd0\xcb\0\x1\0\0\0\0\x1j\0\0\0 \0\0\x4\x3\0\0\x2\x9e\0\0\x1j\0\0\0 \0\0\x4\x3\0\0\x2\x9e\0\0\0\0\0\0)
 
 [workspaceview]
 local_collapsed=false
 global_collapsed=false
 persistent_collapsed=false
 column_state=@ByteArray(\0\0\0\xff\0\0\0\0\0\0\0\x1\0\0\0\x1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2\x12\0\0\0\x5\x1\0\0\x1\0\0\0\0\0\0\0\0\0\0\0\0\x64\xff\xff\xff\xff\0\0\0\x81\0\0\0\0\0\0\0\x2\0\0\x1\x90\0\0\0\x4\0\0\0\0\0\0\0\x82\0\0\0\x1\0\0\0\0)
 
-[filesdockwidget]
-sort_files_by_column=0
-sort_files_by_order=0
-column_state=@ByteArray(\0\0\0\xff\0\0\0\0\0\0\0\x1\0\0\0\0\0\0\0\0\x1\0\0\0\0\0\0\0\0\0\0\0\x4\xe\0\0\0\x3\0\0\0\x3\0\0\0\x64\0\0\0\x2\0\0\0\x64\0\0\0\x1\0\0\0\x64\0\0\x2\v\0\0\0\x4\x1\x1\0\x1\0\0\0\0\0\0\0\0\0\0\0\0\x64\xff\xff\xff\xff\0\0\0\x81\0\0\0\0\0\0\0\x2\0\0\x2\v\0\0\0\x1\0\0\0\0\0\0\0\0\0\0\0\x3\0\0\0\0)
-showFilenames=true
-showFileSize=false
-showFileType=false
-showLastModified=false
-showHiddenFiles=false
-sync_octave_directory=true
-useAlternatingRowColors=true
-
 [Scintilla]
 Octave\style0\color=0
 Octave\style0\eolfill=false
 Octave\style0\font=__default_font__, __default_font_size__, 0, 0, 0
 Octave\style0\paper=16777215
 Octave\style1\color=43520
 Octave\style1\eolfill=false
 Octave\style1\font=__default_font__, __default_font_size__, 0, 0, 0
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include "gui-preferences.h"
 #include "resource-manager.h"
 #include "files-dock-widget.h"
 
 #include <QApplication>
 #include <QClipboard>
 #include <QFileInfo>
 #include <QCompleter>
 #include <QProcess>
@@ -77,21 +78,28 @@ namespace octave
     m_columns_shown = QStringList ();
     m_columns_shown.append (tr ("File size"));
     m_columns_shown.append (tr ("File type"));
     m_columns_shown.append (tr ("Date modified"));
     m_columns_shown.append (tr ("Show hidden"));
     m_columns_shown.append (tr ("Alternating row colors"));
 
     m_columns_shown_keys = QStringList ();
-    m_columns_shown_keys.append ("filesdockwidget/showFileSize");
-    m_columns_shown_keys.append ("filesdockwidget/showFileType");
-    m_columns_shown_keys.append ("filesdockwidget/showLastModified");
-    m_columns_shown_keys.append ("filesdockwidget/showHiddenFiles");
-    m_columns_shown_keys.append ("filesdockwidget/useAlternatingRowColors");
+    m_columns_shown_keys.append (fb_show_size.key);
+    m_columns_shown_keys.append (fb_show_type.key);
+    m_columns_shown_keys.append (fb_show_date.key);
+    m_columns_shown_keys.append (fb_show_hidden.key);
+    m_columns_shown_keys.append (fb_show_altcol.key);
+
+    m_columns_shown_defs = QList <QVariant> ();
+    m_columns_shown_defs.append (fb_show_size.def);
+    m_columns_shown_defs.append (fb_show_type.def);
+    m_columns_shown_defs.append (fb_show_date.def);
+    m_columns_shown_defs.append (fb_show_hidden.def);
+    m_columns_shown_defs.append (fb_show_altcol.def);
 
     QWidget *container = new QWidget (this);
 
     setWidget (container);
 
     connect (this, SIGNAL (open_file (const QString&)),
              main_win (), SLOT (open_file (const QString&)));
 
@@ -174,29 +182,31 @@ namespace octave
              SLOT (do_sync_browser_directory ()));
 
     QSettings *settings = resource_manager::get_settings ();
     // FIXME: what should happen if settings is 0?
 
     // Create the QFileSystemModel starting in the desired directory
     QDir startup_dir;  // take current dir
 
-    if (settings->value ("filesdockwidget/restore_last_dir",false).toBool ())
+    if (settings->value (fb_restore_last_dir.key,
+                         fb_restore_last_dir.def).toBool ())
       {
         // restore last dir from previous session
         QStringList last_dirs
-          = settings->value ("filesdockwidget/mru_dir_list").toStringList ();
+          = settings->value (fb_mru_list.key).toStringList ();
         if (last_dirs.length () > 0)
           startup_dir = QDir (last_dirs.at (0));  // last dir in previous session
       }
-    else if (! settings->value ("filesdockwidget/startup_dir").toString ().isEmpty ())
+    else if (! settings->value (fb_startup_dir.key, fb_startup_dir.def)
+               .toString ().isEmpty ())
       {
         // do not restore but there is a startup dir configured
         startup_dir
-          = QDir (settings->value ("filesdockwidget/startup_dir").toString ());
+          = QDir (settings->value (fb_startup_dir.key).toString ());
       }
 
     if (! startup_dir.exists ())
       {
         // the configured startup dir does not exist, take actual one
         startup_dir = QDir ();
       }
 
@@ -212,26 +222,39 @@ namespace octave
     m_file_tree_view->setSortingEnabled (true);
     m_file_tree_view->setAlternatingRowColors (true);
     m_file_tree_view->setAnimated (true);
     m_file_tree_view->setToolTip (tr ("Double click to open file/folder, right click for alternatives"));
 
     // get sort column and order as well as cloumn state (order and width)
 
     m_file_tree_view->sortByColumn (
-                                    settings->value ("filesdockwidget/sort_files_by_column",0).toInt (),
-                                    static_cast<Qt::SortOrder>
-                                    (settings->value ("filesdockwidget/sort_files_by_order",
-                                                      Qt::AscendingOrder).toUInt ())
-                                    );
-    m_file_tree_view->header ()->restoreState (
-                                               settings->value ("filesdockwidget/column_state").toByteArray ());
+          settings->value (fb_sort_column.key, fb_sort_column.def).toInt (),
+          static_cast<Qt::SortOrder> (
+            settings->value (fb_sort_order.key, fb_sort_order.def).toUInt ()));
+
+    if (settings->contains (fb_column_state.key))
+      m_file_tree_view->header ()->restoreState (
+                          settings->value (fb_column_state.key).toByteArray ());
+
+    // Set header properties for sorting
+#if defined (HAVE_QHEADERVIEW_SETSECTIONSCLICKABLE)
+    m_file_tree_view->header ()->setSectionsClickable (true);
+#else
+    m_file_tree_view->header ()->setClickable (true);
+#endif
+#if defined (HAVE_QHEADERVIEW_SETSECTIONSMOVABLE)
+    m_file_tree_view->header ()->setSectionsMovable (true);
+#else
+    m_file_tree_view->header ()->setMovable (true);
+#endif
+    m_file_tree_view->header ()->setSortIndicatorShown (true);
 
     QStringList mru_dirs =
-      settings->value ("filesdockwidget/mru_dir_list").toStringList ();
+      settings->value (fb_mru_list.key).toStringList ();
     m_current_directory->addItems (mru_dirs);
 
     m_current_directory->setEditText (
                                       m_file_system_model->fileInfo (rootPathIndex).  absoluteFilePath ());
 
     connect (m_file_tree_view, SIGNAL (activated (const QModelIndex &)),
              this, SLOT (item_double_clicked (const QModelIndex &)));
 
@@ -280,27 +303,26 @@ namespace octave
   {
     QSettings *settings = resource_manager::get_settings ();
 
     if (! settings)
       return;
 
     int sort_column = m_file_tree_view->header ()->sortIndicatorSection ();
     Qt::SortOrder sort_order = m_file_tree_view->header ()->sortIndicatorOrder ();
-    settings->setValue ("filesdockwidget/sort_files_by_column", sort_column);
-    settings->setValue ("filesdockwidget/sort_files_by_order", sort_order);
-    settings->setValue ("filesdockwidget/column_state",
-                        m_file_tree_view->header ()->saveState ());
+    settings->setValue (fb_sort_column.key, sort_column);
+    settings->setValue (fb_sort_order.key, sort_order);
+    settings->setValue (fb_column_state.key, m_file_tree_view->header ()->saveState ());
 
     QStringList dirs;
     for (int i=0; i< m_current_directory->count (); i++)
       {
         dirs.append (m_current_directory->itemText (i));
       }
-    settings->setValue ("filesdockwidget/mru_dir_list", dirs);
+    settings->setValue (fb_mru_list.key, dirs);
 
     settings->sync ();
 
     octave_dock_widget::save_settings ();
 
     if (m_sig_mapper)
       delete m_sig_mapper;
   }
@@ -376,18 +398,18 @@ namespace octave
             m_current_directory->setCurrentIndex (0);
           }
         else
           {
             QString abs_fname = fileInfo.absoluteFilePath ();
 
             QString suffix = fileInfo.suffix ().toLower ();
             QSettings *settings = resource_manager::get_settings ();
-            QString ext = settings->value ("filesdockwidget/txt_file_extensions",
-                                           "m;c;cc;cpp;h;txt").toString ();
+            QString ext = settings->value (fb_txt_file_ext.key,
+                                           fb_txt_file_ext.def).toString ();
             QStringList extensions = ext.split (";", QString::SkipEmptyParts);
 
             if (QFile::exists (abs_fname))
               {
                 if (extensions.contains (suffix))
                   emit open_file (fileInfo.absoluteFilePath ());
                 else
                   emit open_any_signal (abs_fname);
@@ -442,18 +464,18 @@ namespace octave
     QSettings *settings = resource_manager::get_settings ();
 
     for (int i = 0; i < m_columns_shown.size (); i++)
       {
         QAction *action = menu.addAction (m_columns_shown.at (i),
                                           m_sig_mapper, SLOT (map ()));
         m_sig_mapper->setMapping (action, i);
         action->setCheckable (true);
-        action->setChecked (
-                            settings->value (m_columns_shown_keys.at (i),true).toBool ());
+        action->setChecked (settings->value (
+          m_columns_shown_keys.at (i), m_columns_shown_defs.at (i)).toBool ());
       }
 
     connect (m_sig_mapper, SIGNAL (mapped (int)),
              this, SLOT (toggle_header (int)));
 
     menu.exec (m_file_tree_view->mapToGlobal (mpos));
   }
 
@@ -802,17 +824,17 @@ namespace octave
 
     m_file_tree_view->setAlternatingRowColors (
                                                settings->value (m_columns_shown_keys.at (4),true).toBool ());
     m_file_tree_view->setModel (m_file_system_model);
 
     // enable the buttons to sync octave/browser dir
     // only if this is not done by default
     m_sync_octave_dir
-      = settings->value ("filesdockwidget/sync_octave_directory",true).toBool ();
+      = settings->value (fb_sync_octdir.key, fb_sync_octdir.def).toBool ();
     m_sync_octave_directory_action->setEnabled (! m_sync_octave_dir);
     m_sync_browser_directory_action->setEnabled (! m_sync_octave_dir);
 
     if (m_sync_octave_dir)
       display_directory (m_octave_dir);  // sync browser to octave dir
 
   }
 
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -201,13 +201,14 @@ namespace octave
     //! The actual Octave directory.
 
     QString m_octave_dir;
 
     enum { MaxMRUDirs = 10 };
 
     QStringList m_columns_shown;
     QStringList m_columns_shown_keys;
+    QList <QVariant> m_columns_shown_defs;
     QSignalMapper *m_sig_mapper;
   };
 }
 
 #endif
diff --git a/libgui/src/gui-preferences.h b/libgui/src/gui-preferences.h
--- a/libgui/src/gui-preferences.h
+++ b/libgui/src/gui-preferences.h
@@ -65,10 +65,27 @@ const gui_pref ed_session_lines ("editor
 const gui_pref ed_show_dbg_file ("editor/show_dbg_file", QVariant (true));
 #if defined (Q_OS_WIN32)
 const gui_pref ed_default_enc ("editor/default_encoding", QVariant ("SYSTEM"));
 #else
 const gui_pref ed_default_enc ("editor/default_encoding", QVariant ("UTF-8"));
 #endif
 
 
+// Files dock widget
+
+const gui_pref fb_column_state ("filesdockwidget/column_state", QVariant ());
+const gui_pref fb_show_ ("filesdockwidget/column_state", QVariant ());
+const gui_pref fb_mru_list ("filesdockwidget/mru_dir_list", QVariant (QStringList ()));
+const gui_pref fb_show_size ("filesdockwidget/showFileSize", QVariant (false));
+const gui_pref fb_show_type ("filesdockwidget/showFileType", QVariant (false));
+const gui_pref fb_show_date ("filesdockwidget/showLastModified", QVariant (false));
+const gui_pref fb_show_hidden ("filesdockwidget/showHiddenFiles", QVariant (false));
+const gui_pref fb_show_altcol ("filesdockwidget/useAlternatingRowColors", QVariant (true));
+const gui_pref fb_sort_column ("filesdockwidget/sort_files_by_column", QVariant (0));
+const gui_pref fb_sort_order ("filesdockwidget/sort_files_by_order", QVariant (Qt::AscendingOrder));
+const gui_pref fb_sync_octdir ("filesdockwidget/sync_octave_directory", QVariant (true));
+const gui_pref fb_restore_last_dir ("filesdockwidget/restore_last_dir", QVariant (false));
+const gui_pref fb_startup_dir ("filesdockwidget/startup_dir", QVariant (QString ()));
+const gui_pref fb_txt_file_ext ("filesdockwidget/txt_file_extensions",
+                                QVariant ("m;c;cc;cpp;h;txt"));
 
 #endif
