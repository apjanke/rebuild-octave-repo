# HG changeset patch
# User jwe
# Date 821432883 0
#      Fri Jan 12 07:48:03 1996 +0000
# Node ID d2ee993d40cddb52f988e63433ce00988fcfc4a0
# Parent  d0e2735fcaeccb984b174fd6b5a298fc3e8ff3f7
[project @ 1996-01-12 07:46:09 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -23,17 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of Complex values.
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "oct-cmplx.h"
 
-template class ArrayRep<Complex>;
 template class Array<Complex>;
 template class Array2<Complex>;
 template class DiagArray<Complex>;
 
 template void assign (Array<Complex>&, const Array<Complex>&);
 template void assign (Array<Complex>&, const Array<double>&);
 template void assign (Array<Complex>&, const Array<int>&);
 template void assign (Array<Complex>&, const Array<short>&);
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -23,17 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of char values.
 
 #define NO_DIAG_ARRAY 1
 
 #include "Array.h"
 #include "Array.cc"
 
-template class ArrayRep<char>;
 template class Array<char>;
 template class Array2<char>;
 
 #ifndef NO_DIAG_ARRAY
 template class DiagArray<char>;
 #endif
 
 template void assign (Array<char>&, const Array<char>&);
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -21,17 +21,16 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 
-template class ArrayRep<double>;
 template class Array<double>;
 template class Array2<double>;
 template class DiagArray<double>;
 
 template void assign (Array<double>&, const Array<double>&);
 template void assign (Array<double>&, const Array<int>&);
 template void assign (Array<double>&, const Array<short>&);
 template void assign (Array<double>&, const Array<char>&);
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -23,17 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of integer values.
 
 #define NO_DIAG_ARRAY 1
 
 #include "Array.h"
 #include "Array.cc"
 
-template class ArrayRep<int>;
 template class Array<int>;
 template class Array2<int>;
 
 #ifndef NO_DIAG_ARRAY
 template class DiagArray<int>;
 #endif
 
 template void assign (Array<int>&, const Array<int>&);
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -146,17 +146,17 @@ Array<T>::maybe_delete_elements (idx_vec
 		      new_data[ii] = elem (i);
 		      ii++;
 		    }
 		}
 
 	      if (--rep->count <= 0)
 		delete rep;
 
-	      rep = new ArrayRep<T> (new_data, new_len);
+	      rep = new ArrayRep (new_data, new_len);
 
 	      set_max_indices (1);
 	    }
 	  else
 	    (*current_liboctave_error_handler)
 	      ("A(idx) = []: index out of range");
 	}
     }
@@ -428,17 +428,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[nr*jj+i] = elem (i, j);
 			      jj++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new ArrayRep<T> (new_data, nr * new_nc);
+		      rep = new ArrayRep (new_data, nr * new_nc);
 
 		      d2 = new_nc;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
@@ -477,17 +477,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[new_nr*j+ii] = elem (i, j);
 			      ii++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new ArrayRep<T> (new_data, new_nr * nc);
+		      rep = new ArrayRep (new_data, new_nr * nc);
 
 		      d1 = new_nr;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -23,17 +23,16 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of short int values.
 
 #define NO_DIAG_ARRAY 1
 
 #include "Array.h"
 #include "Array.cc"
 
-template class ArrayRep<short>;
 template class Array<short>;
 template class Array2<short>;
 
 #ifndef NO_DIAG_ARRAY
 template class DiagArray<short>;
 #endif
 
 template void assign (Array<short>&, const Array<short>&);
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -37,64 +37,23 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (HEAVYWEIGHT_INDEXING)
 #include "idx-vector.h"
 #include "Array-idx.h"
 #endif
 
 #include "lo-error.h"
 
-// The real representation of all arrays.
-
-template <class T>
-ArrayRep<T>::ArrayRep (int n)
-{
-  len = n;
-  count = 1;
-  data = new T [len];
-}
-
-template <class T>
-ArrayRep<T>::ArrayRep (const ArrayRep<T>& a)
-{
-  len = a.len;
-  count = 1;
-
-  data = new T [len];
-  for (int i = 0; i < len; i++)
-    data[i] = a.data[i];
-}
-
-template <class T>
-ArrayRep<T>::~ArrayRep (void)
-{
-  delete [] data;
-}
-
-template <class T>
-T&
-ArrayRep<T>::elem (int n)
-{
-  return data[n];
-}
-
-template <class T>
-T
-ArrayRep<T>::elem (int n) const
-{
-  return data[n];
-}
-
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (int n, const T& val)
 {
-  rep = new ArrayRep<T> (n);
+  rep = new ArrayRep (n);
 
   for (int i = 0; i < n; i++)
     rep->data[i] = val;
 
 #ifdef HEAVYWEIGHT_INDEXING
   max_indices = 1;
   idx_count = 0;
   idx = 0;
@@ -183,21 +142,21 @@ Array<T>::resize (int n)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (n == length ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
-  rep = new ArrayRep<T> (n);
+  rep = new ArrayRep (n);
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < n ? old_len : n;
 
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -214,21 +173,21 @@ Array<T>::resize (int n, const T& val)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (n == length ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
-  rep = new ArrayRep<T> (n);
+  rep = new ArrayRep (n);
 
   int min_len = old_len < n ? old_len : n;
 
   if (old_data && old_len > 0)
     {
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
@@ -242,17 +201,17 @@ Array<T>::resize (int n, const T& val)
 
 template <class T>
 T *
 Array<T>::fortran_vec (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
-      rep = new ArrayRep<T> (*rep);
+      rep = new ArrayRep (*rep);
     }
   return rep->data;
 }
 
 // Two dimensional array class.
 
 template <class T>
 T&
@@ -310,24 +269,24 @@ Array2<T>::resize (int r, int c)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new ArrayRep<T> (r*c);
+  rep = new ArrayRep (r*c);
 
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
@@ -349,23 +308,23 @@ Array2<T>::resize (int r, int c, const T
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new ArrayRep<T> (r*c);
+  rep = new ArrayRep (r*c);
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
@@ -561,23 +520,23 @@ DiagArray<T>::resize (int r, int c)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new ArrayRep<T> (new_len);
+  rep = new ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
@@ -597,23 +556,23 @@ DiagArray<T>::resize (int r, int c, cons
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep<T> *old_rep = rep;
+  ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new ArrayRep<T> (new_len);
+  rep = new ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -33,114 +33,103 @@ Software Foundation, 59 Temple Place - S
 #include <cassert>
 
 #include "lo-error.h"
 
 class idx_vector;
 
 // Classes we declare.
 
-template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
 
 #ifndef NO_DIAG_ARRAY
 template <class T> class DiagArray;
 #endif
 
-// The real representation of all arrays.
-
-template <class T>
-class ArrayRep
-{
-  // Rethink resize()?
-
-  friend class Array<T>;
-  friend class Array2<T>;
-  friend class Array3<T>;
-
-#ifndef NO_DIAG_ARRAY
-  friend class DiagArray<T>;
-#endif
-
-private:
-
-  T *data;
-  int len;
-  int count;
-
-  ArrayRep<T>& operator = (const ArrayRep<T>& a);  
-
-protected:
-
-  ArrayRep (T *d, int l) : data (d), len (l), count (1) { }
-
-public:
-
-  ArrayRep (void) : data (0), len (0), count (1) { }
-
-  ArrayRep (int n);
-
-  ArrayRep (const ArrayRep<T>& a);
-
-  ~ArrayRep (void);
-
-  int length (void) const { return len; }
-
-  T& elem (int n);
-
-  T elem (int n) const;
-};
-
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 class Array
 {
 private:
 
+// The real representation of all arrays.
+
+  class ArrayRep
+  {
+  public:
+
+    T *data;
+    int len;
+    int count;
+
+    ArrayRep& operator = (const ArrayRep& a);
+
+    ArrayRep (T *d, int l) : data (d), len (l), count (1) { }
+
+    ArrayRep (void) : data (0), len (0), count (1) { }
+
+    ArrayRep (int n) : data (new T [n]), len (n), count (1) { }
+
+    ArrayRep (const ArrayRep& a)
+      : data (new T [a.len]), len (a.len), count (1)
+	{
+	  for (int i = 0; i < len; i++)
+	    data[i] = a.data[i];
+	}
+
+    ~ArrayRep (void) { delete [] data; }
+
+    int length (void) const { return len; }
+
+    T& elem (int n) { return data[n]; }
+
+    T elem (int n) const { return data[n]; }
+  };
+
 #ifdef HEAVYWEIGHT_INDEXING
   idx_vector *idx;
   int max_indices;
   int idx_count;
 #endif
 
 protected:
 
-  ArrayRep<T> *rep;
+  ArrayRep *rep;
 
   Array (T *d, int l)
     {
-      rep = new ArrayRep<T> (d, l);
+      rep = new ArrayRep (d, l);
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
 public:
 
   Array (void)
     {
-      rep = new ArrayRep<T> ();
+      rep = new ArrayRep ();
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
   Array (int n)
     {
-      rep = new ArrayRep<T> (n);
+      rep = new ArrayRep (n);
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
@@ -165,17 +154,17 @@ public:
   int capacity (void) const { return rep->length (); }
   int length (void) const { return rep->length (); }
 
   T& elem (int n)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
-	  rep = new ArrayRep<T> (*rep);
+	  rep = new ArrayRep (*rep);
 	}
       return rep->elem (n);
     }
 
   T& checkelem (int n);
   T& operator () (int n) { return checkelem (n); }
 
   // No checking.
