# HG changeset patch
# User Michael Goffioul
# Date 1219772364 14400
#      Tue Aug 26 13:39:24 2008 -0400
# Node ID 41bc700ff64233575cf3fda78452488732c61e21
# Parent  e04a4beeb28316f09a61953d329ddfc38dc82609
Trigger actions/listeners only for actual property change

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 2008-08-26  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* genprops.awk (emit_declarations): Call updaters/listeners only when
+	'set' method returned true.
+	* graphics.h.in (base_property::set, base_property::do_set):
+	Return bool value.
+	(property::set): Likewise.
+	(string_property::do_set): Check value change and return bool value.
+	(radio_property::do_set, double_property::do_set,
+	array_property::do_set): Likewise.
+	(color_property::do_set, double_radio_property::do_set,
+	row_vector_property::do_set, bool_property::do_set,
+	handle_property::do_set): Return bool value.
+	(any_property::do_set, callback_property::do_set): Return always true.
+	(color_values::operator==, color_values::operator!=): Add.
+	(array_property::is_equal): Add.
+	* graphics.cc (base_property::set): Executes listeners/notifiers only
+	when do_set returns true. Return bool value.
+	(color_property::do_set, double_radio_property::do_set): Check value
+	change and return bool value.
+	(array_property::is_equal): Add.
+
 	* genprops.awk (emit_declarations, emit_source): Change code emission
 	when emitting base_properties code (base is 1).
 	(BEGIN): Initialize pcount to 0.
 	(BEGIN_PROPERTIES): Initialize base to 0.
 	(BEGIN_BASE_PROPERTIES): New statement.
 	(main): Add support for 'f' modifier. Add support for non xxx_property
 	typed properties.
 	* graphics.h.in (base_properties::base_properties): Remove
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -327,27 +327,30 @@ function emit_declarations ()
 
       if (emit_set[i] == "definition")
       {
 	if (updaters[i] || limits[i] || mode[i])
 	  has_builtin_listeners = 1;
 	else
 	  has_builtin_listeners = 0;
 
-        printf ("\n  {\n    if (! error_state)\n      {\n        %s.set (val, %s);\n",
+        printf ("\n  {\n    if (! error_state)\n      {\n        if (%s.set (val, %s))\n          {\n",
           name[i], (has_builtin_listeners ? "false" : "true"));
         if (updater[i])
-          printf ("        update_%s ();\n", name[i]);
+          printf ("            update_%s ();\n", name[i]);
         if (limits[i])
-          printf ("        update_axis_limits (\"%s\");\n", name[i]);
+          printf ("            update_axis_limits (\"%s\");\n", name[i]);
         if (mode[i])
-          printf ("        set_%smode (\"manual\");\n", name[i]);
+          printf ("            set_%smode (\"manual\");\n", name[i]);
 	if (has_builtin_listeners)
-	  printf ("        %s.run_listeners (POSTSET);\n", name[i]);
-        printf ("        mark_modified ();\n");
+	  printf ("            %s.run_listeners (POSTSET);\n", name[i]);
+        printf ("            mark_modified ();\n");
+	printf ("          }\n");
+	if (mode[i])
+	  printf ("        else\n          set_%smode (\"manual\");\n", name[i]);
         printf ("      }\n  }\n\n");
       }
       else
         printf (";\n\n");
     }
 
     if (updater[i] == "extern")
     {
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -454,36 +454,42 @@ make_graphics_object_from_type (const ca
   else if (type.compare ("hggroup"))
     go = new hggroup (h, p);
 
   return go;
 }
 
 // ---------------------------------------------------------------------
 
-void
+bool
 base_property::set (const octave_value& v, bool do_run )
 {
-  do_set (v);
-
-  // notify backend
-  if (id >= 0)
+  if (do_set (v))
     {
-      graphics_object go = gh_manager::get_object (parent);
-      if (go)
+
+      // notify backend
+      if (id >= 0)
 	{
-	  graphics_backend backend = go.get_backend();
-	  if (backend)
-	    backend.property_changed (go, id);
+	  graphics_object go = gh_manager::get_object (parent);
+	  if (go)
+	    {
+	      graphics_backend backend = go.get_backend();
+	      if (backend)
+		backend.property_changed (go, id);
+	    }
 	}
+
+      // run listeners
+      if (do_run && ! error_state)
+	run_listeners (POSTSET);
+
+      return true;
     }
-  
-  // run listeners
-  if (do_run && ! error_state)
-    run_listeners (POSTSET);
+
+  return false;
 }
 
 
 void
 base_property::run_listeners (listener_mode mode)
 {
   const octave_value_list& l = listeners[mode];
 
@@ -563,93 +569,119 @@ color_values::str2rgb (std::string str)
     {
       for (int i = 0; i < 3; i++)
 	xrgb(i) = tmp_rgb[i];
     }
 
   return retval;
 }
 
-void
+bool
 color_property::do_set (const octave_value& val)
 {
   if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       if (! s.empty ())
 	{
 	  if (radio_val.contains (s))
 	    {
-	      current_val = s;
-	      current_type = radio_t;
+	      if (current_type != radio_t || current_val != s)
+		{
+		  current_val = s;
+		  current_type = radio_t;
+		  return true;
+		}
 	    }
           else
 	    {
 	      color_values col (s);
 	      if (! error_state)
 		{
-		  color_val = col;
-		  current_type = color_t;
+		  if (current_type != color_t || col != color_val)
+		    {
+		      color_val = col;
+		      current_type = color_t;
+		      return true;
+		    }
 		}
 	      else
 		error ("invalid value for color property \"%s\" (value = %s)",
-               get_name ().c_str (), s.c_str ());
+		       get_name ().c_str (), s.c_str ());
 	    }	
 	}
       else
 	error ("invalid value for color property \"%s\"",
            get_name ().c_str ());
     }
   else if (val.is_real_matrix ())
     {
       Matrix m = val.matrix_value ();
 
       if (m.numel () == 3)
 	{
 	  color_values col (m (0), m (1), m(2));
 	  if (! error_state)
 	    {
-	      color_val = col;
-	      current_type = color_t;
+	      if (current_type != color_t || col != color_val)
+		{
+		  color_val = col;
+		  current_type = color_t;
+		  return true;
+		}
 	    }
 	}
       else
 	error ("invalid value for color property \"%s\"",
            get_name ().c_str ());
     }
   else 
     error ("invalid value for color property \"%s\"",
            get_name ().c_str ());
+
+  return false;
 }
 
-void
+bool
 double_radio_property::do_set (const octave_value& val)
 {
   if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       if (! s.empty () && radio_val.contains (s))
 	{
-	  current_val = s;
-	  current_type = radio_t;
+	  if (current_type != radio_t || s != current_val)
+	    {
+	      current_val = s;
+	      current_type = radio_t;
+	      return true;
+	    }
 	}
       else
 	error ("invalid value for double_radio property \"%s\"",
 	       get_name ().c_str ());
     }
   else if (val.is_scalar_type () && val.is_real_type ())
     {
-      dval = val.double_value ();
-      current_type = double_t;
+      double new_dval = val.double_value ();
+
+      if (current_type != double_t || new_dval != dval)
+	{
+	  dval = new_dval;
+	  current_type = double_t;
+	  return true;
+	}
     }
   else 
     error ("invalid value for double_radio property \"%s\"",
 	   get_name ().c_str ());
+
+  return false;
 }
 
 bool
 array_property::validate (const octave_value& v)
 {
   bool xok = false;
 
   // FIXME: should we always support []?
@@ -692,16 +724,63 @@ array_property::validate (const octave_v
           }
       else
         return true;
     }
 
   return xok;
 }
 
+bool
+array_property::is_equal (const octave_value& v) const
+{
+  if (data.type_name () == v.type_name ())
+    {
+      if (data.dims () == v.dims ())
+	{
+#define CHECK_ARRAY_EQUAL(T,F) \
+	    { \
+	      const T* d1 = data.F ().data (); \
+	      const T* d2 = v.F ().data (); \
+	      \
+	      bool flag = true; \
+	      \
+	      for (int i = 0; flag && i < data.numel (); i++) \
+		if (d1[i] != d2[i]) \
+		  flag = false; \
+	      \
+	      return flag; \
+	    }
+
+	  if (data.is_double_type())
+	    CHECK_ARRAY_EQUAL (double, array_value)
+	  else if (data.is_single_type ())
+	    CHECK_ARRAY_EQUAL (float, float_array_value)
+	  else if (data.is_int8_type ())
+	    CHECK_ARRAY_EQUAL (octave_int8, int8_array_value)
+	  else if (data.is_int16_type ())
+	    CHECK_ARRAY_EQUAL (octave_int16, int16_array_value)
+	  else if (data.is_int32_type ())
+	    CHECK_ARRAY_EQUAL (octave_int32, int32_array_value)
+	  else if (data.is_int64_type ())
+	    CHECK_ARRAY_EQUAL (octave_int64, int64_array_value)
+	  else if (data.is_uint8_type ())
+	    CHECK_ARRAY_EQUAL (octave_uint8, uint8_array_value)
+	  else if (data.is_uint16_type ())
+	    CHECK_ARRAY_EQUAL (octave_uint16, uint16_array_value)
+	  else if (data.is_uint32_type ())
+	    CHECK_ARRAY_EQUAL (octave_uint32, uint32_array_value)
+	  else if (data.is_uint64_type ())
+	    CHECK_ARRAY_EQUAL (octave_uint64, uint64_array_value)
+	}
+    }
+
+  return false;
+}
+
 void
 array_property::get_data_limits (void)
 {
   xmin = xminp = octave_Inf;
   xmax = -octave_Inf;
 
   if (! data.is_empty ())
     {
@@ -724,34 +803,42 @@ array_property::get_data_limits (void)
 	  else if (data.is_uint64_type ())
 	    get_array_limits (data.uint64_array_value (), xmin, xmax, xminp);
 	}
       else
 	get_array_limits (data.array_value (), xmin, xmax, xminp);
     }
 }
 
-void
+bool
 handle_property::do_set (const octave_value& v)
 {
   double dv = v.double_value ();
 
   if (! error_state)
     {
       graphics_handle gh = gh_manager::lookup (dv);
 
       if (xisnan (gh.value ()) || gh.ok ())
-        current_val = gh;
+	{
+	  if (current_val != gh)
+	    {
+	      current_val = gh;
+	      return true;
+	    }
+	}
       else
         error ("set: invalid graphics handle (= %g) for property \"%s\"",
 	       dv, get_name ().c_str ());
     }
   else
     error ("set: invalid graphics handle for property \"%s\"",
 	   get_name ().c_str ());
+
+  return false;
 }
 
 bool
 callback_property::validate (const octave_value& v) const
 {
   // case 1: function handle
   // case 2: cell array with first element being a function handle
   // case 3: string corresponding to known function name
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -373,17 +373,17 @@ public:
   void set_hidden (bool flag) { hidden = flag; }
 
   int get_id (void) const { return id; }
 
   void set_id (int d) { id = d; }
 
   // Sets property value, notifies backend.
   // If do_run is true, runs associated listeners.
-  void set (const octave_value& v, bool do_run = true);
+  bool set (const octave_value& v, bool do_run = true);
   
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
     }
 
   base_property& operator = (const octave_value& val)
@@ -399,18 +399,21 @@ public:
     }
 
   OCTINTERP_API void run_listeners (listener_mode mode = POSTSET);
 
   virtual base_property* clone (void) const
     { return new base_property (*this); }
 
 protected:
-  virtual void do_set (const octave_value&)
-    { error ("set: invalid property \"%s\"", name.c_str ()); }
+  virtual bool do_set (const octave_value&)
+    {
+      error ("set: invalid property \"%s\"", name.c_str ());
+      return false;
+    }
 
 private:
   typedef std::map<listener_mode, octave_value_list> listener_map;
   typedef std::map<listener_mode, octave_value_list>::iterator listener_map_iterator;
   typedef std::map<listener_mode, octave_value_list>::const_iterator listener_map_const_iterator;
 
 private:
   int id;
@@ -442,23 +445,32 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new string_property (*this); }
 
 protected:
-  void do_set (const octave_value& val)
+  bool do_set (const octave_value& val)
     {
       if (val.is_string ())
-        str = val.string_value ();
+	{
+	  std::string new_str = val.string_value ();
+
+	  if (new_str != str)
+	    {
+	      str = new_str;
+	      return true;
+	    }
+	}
       else
         error ("set: invalid string property value for \"%s\"",
                get_name ().c_str ());
+      return false;
     }
 
 private:
   std::string str;
 };
 
 // ---------------------------------------------------------------------
 
@@ -539,30 +551,37 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new radio_property (*this); }
 
 protected:
-  void do_set (const octave_value& newval) 
+  bool do_set (const octave_value& newval) 
   {
     if (newval.is_string ())
       {
         std::string s = newval.string_value ();
         if (vals.validate (s))
-          current_val = s;
+	  {
+	    if (s != current_val)
+	      {
+		current_val = s;
+		return true;
+	      }
+	  }
         else
           error ("set: invalid value for radio property \"%s\" (value = %s)",
               get_name ().c_str (), s.c_str ());
       }
     else	
       error ("set: invalid value for radio property \"%s\"",
           get_name ().c_str ());
+    return false;
   }
 
 private:
   radio_values vals;
   std::string current_val;
 };
 
 // ---------------------------------------------------------------------
@@ -594,16 +613,26 @@ public:
   color_values& operator = (const color_values& c)
   {
     if (&c != this)
       xrgb = c.xrgb;
 
     return *this;
   }
 
+  bool operator == (const color_values& c) const
+    {
+      return (xrgb(0) == c.xrgb(0)
+	      && xrgb(1) == c.xrgb(1)
+	      && xrgb(2) == c.xrgb(2));
+    }
+
+  bool operator != (const color_values& c) const
+    { return ! (*this == c); }
+
   Matrix rgb (void) const { return xrgb; }
 
   operator octave_value (void) const { return xrgb; }
 
   void validate (void) const
   {
     for (int i = 0; i < 3; i++)
       {
@@ -701,17 +730,17 @@ public:
       return *this;
     }
 
   operator octave_value (void) const { return get (); }
 
   base_property* clone (void) const { return new color_property (*this); }
 
 protected:
-  OCTINTERP_API void do_set (const octave_value& newval);
+  OCTINTERP_API bool do_set (const octave_value& newval);
 
 private:
   enum current_enum { color_t, radio_t } current_type;
   color_values color_val;
   radio_values radio_val;
   std::string current_val;
 };
 
@@ -736,23 +765,32 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new double_property (*this); }
 
 protected:
-  void do_set (const octave_value& v)
+  bool do_set (const octave_value& v)
     {
       if (v.is_scalar_type () && v.is_real_type ())
-        current_val = v.double_value ();
+	{
+	  double new_val = v.double_value ();
+
+	  if (new_val != current_val)
+	    {
+	      current_val = new_val;
+	      return true;
+	    }
+	}
       else
         error ("set: invalid value for double property \"%s\"",
                get_name ().c_str ());
+      return false;
     }
 
 private:
   double current_val;
 };
 
 // ---------------------------------------------------------------------
 
@@ -822,17 +860,17 @@ public:
     }
 
   operator octave_value (void) const { return get (); }
 
   base_property* clone (void) const
     { return new double_radio_property (*this); }
 
 protected:
-  OCTINTERP_API void do_set (const octave_value& v);
+  OCTINTERP_API bool do_set (const octave_value& v);
 
 private:
   enum current_enum { double_t, radio_t } current_type;
   double dval;
   radio_values radio_val;
   std::string current_val;
 };
 
@@ -896,32 +934,42 @@ public:
 
       p->type_constraints = type_constraints;
       p->size_constraints = size_constraints;
       
       return p;
     }
 
 protected:
-  void do_set (const octave_value& v)
+  bool do_set (const octave_value& v)
     {
       if (validate (v))
 	{
-	  data = v;
-
-	  get_data_limits ();
+	  // FIXME: should we check for actual data change?
+	  if (! is_equal (v))
+	    {
+	      data = v;
+
+	      get_data_limits ();
+
+	      return true;
+	    }
 	}
       else
         error ("invalid value for array property \"%s\"",
                get_name ().c_str ());
+      
+      return false;
     }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 
+  OCTINTERP_API bool is_equal (const octave_value& v) const;
+
   OCTINTERP_API void get_data_limits (void);
 
 protected:
   octave_value data;
   double xmin;
   double xmax;
   double xminp;
   std::list<std::string> type_constraints;
@@ -977,33 +1025,37 @@ public:
 
       p->type_constraints = type_constraints;
       p->size_constraints = size_constraints;
 
       return p;
     }
 
 protected:
-  void do_set (const octave_value& v)
+  bool do_set (const octave_value& v)
   {
-    array_property::do_set (v);
+    bool retval = array_property::do_set (v);
 
     if (! error_state)
       {
 	dim_vector dv = data.dims ();
 
 	if (dv(0) > 1 && dv(1) == 1)
 	  {
 	    int tmp = dv(0);
 	    dv(0) = dv(1);
 	    dv(1) = tmp;
 
 	    data = data.reshape (dv);
 	  }
+
+	return retval;
       }
+
+    return false;
   }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 };
 
 // ---------------------------------------------------------------------
 
@@ -1029,22 +1081,22 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new bool_property (*this); }
 
 protected:
-  void do_set (const octave_value& val)
+  bool do_set (const octave_value& val)
     {
       if (val.is_bool_scalar ())
-        radio_property::do_set (val.bool_value () ? "on" : "off");
+        return radio_property::do_set (val.bool_value () ? "on" : "off");
       else
-        radio_property::do_set (val);
+        return radio_property::do_set (val);
     }
 };
 
 // ---------------------------------------------------------------------
 
 class handle_property : public base_property
 {
 public:
@@ -1070,17 +1122,17 @@ public:
     {
       set (octave_value (h.value ()));
       return *this;
     }
 
   base_property* clone (void) const { return new handle_property (*this); }
 
 protected:
-  OCTINTERP_API void do_set (const octave_value& v);
+  OCTINTERP_API bool do_set (const octave_value& v);
 
 private:
   graphics_handle current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class any_property : public base_property
@@ -1099,17 +1151,21 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new any_property (*this); }
 
 protected:
-  void do_set (const octave_value& v) { data = v; }
+  bool do_set (const octave_value& v)
+    {
+      data = v;
+      return true;
+    }
 
 private:
   octave_value data;
 };
 
 // ---------------------------------------------------------------------
 
 class callback_property : public base_property
@@ -1130,23 +1186,27 @@ public:
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new callback_property (*this); }
 
 protected:
-  void do_set (const octave_value& v)
+  bool do_set (const octave_value& v)
     {
       if (validate (v))
-        callback = v;
+	{
+	  callback = v;
+	  return true;
+	}
       else
         error ("invalid value for callback property \"%s\"",
                get_name ().c_str ());
+      return false;
     }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v) const;
 
 private:
   octave_value callback;
 };
@@ -1199,18 +1259,18 @@ public:
     { return rep->get_id (); }
 
   void set_id (int d)
     { rep->set_id (d); }
 
   octave_value get (void) const
     { return rep->get (); }
 
-  void set (const octave_value& val)
-    { rep->set (val); }
+  bool set (const octave_value& val)
+    { return rep->set (val); }
 
   property& operator = (const octave_value& val)
     {
       *rep = val;
       return *this;
     }
 
   property& operator = (const property& p)
