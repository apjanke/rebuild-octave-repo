# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1244796449 -7200
#      Fri Jun 12 10:47:29 2009 +0200
# Branch release-3-2-x
# Node ID 00c8df6335ffcc3729c533532b7ded93e4fcc736
# Parent  34f5a466e7cef8a89751e64c8958c7361a12bc1d
print.m: properly render mono figures, and favor cairo terminals.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2009-06-11  Ben Abbott <bpabbott@mac.com>
+
+	* plot/gnuplot_drawnow.m: Add support for pdfcairo and pngcairo
+	terminals. Minor code improvements.
+	* plot/print.m: Associate '-mono' with devices ps, ps2, eps, & eps2.
+	Have '-mono' render all objects in monochrome.
+	For pdf or png output, favor gnuplot's cairo terminals.
+
 2009-06-10  Marco Caliari <marco.caliari@univr.it>
 
 	* plot/hold.m: Add demo including a hggroup.
 	* plot/__go_draw_axes__.m: Fix order when pushing group children onto
 	the axes kid list.
 	* general/quadgk.m: Better waypoint transform.
 
 2009-06-09  David Bateman  <dbateman@free.fr>
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -318,32 +318,25 @@ function have_enhanced = gnuplot_is_enha
     ## should not be interpreted in that case.
     enhanced_terminals = {"aqua", "dumb", "png", "jpeg", "gif", "pm", ...
                           "windows", "wxt", "svg", "postscript", "x11", "pdf"};
   endif
   if (nargin < 1)
     ## Determine the default gnuplot terminal.
     term = gnuplot_default_term ();
   endif
-  have_enhanced = false;
-  for n = 1 : length (enhanced_terminals)
-    t = enhanced_terminals{n};
-    if (strncmp (term, t, min (length (term), length (t))))
-      have_enhanced = true;
-      break;
-    endif
-  endfor
+  have_enhanced = any (strncmp (enhanced_terminals, term, min (numel (term), 3)));
 endfunction
 
 function ret = output_to_screen (term)
   ret = any (strcmpi ({"aqua", "wxt", "x11", "windows", "pm"}, term));
 endfunction
 
 function ret = term_units_are_pixels (term)
-  ret = any (strcmpi ({"emf", "gif", "jpeg", "pbm", "png", "svg"}, term));
+  ret = any (strncmpi ({"emf", "gif", "jpeg", "pbm", "png", "svg"}, term, 3));
 endfunction
 
 function [fig_size, fig_pos] = get_figsize (h)
   ## Determine the size of the figure in pixels.
   position = get (h, "position");
   units = get (h, "units");
   t.inches      = 1;
   t.centimeters = 2.54;
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -343,18 +343,25 @@ function print (varargin)
       else
         if (dev(1) == "e")
 	  options = "eps ";
         else
 	  options = cstrcat (orientation, " ");
         endif
         termn = "postscript";
       endif
+
+      if (any (dev == "c") || use_color > 0
+          || (! isempty (strfind (dev, "tex")) && use_color == 0))
+	use_color = 1;
+      else
+	use_color = -1;
+      endif
       
-      if (any (dev == "c") || use_color > 0)
+      if (use_color > 0)
         if (force_solid < 0)
 	  options = cstrcat (options, "color dashed ");
         else
 	  options = cstrcat (options, "color solid ");
         endif
       else
         if (force_solid > 0)
 	  options = cstrcat (options, "mono solid ");
@@ -365,18 +372,16 @@ function print (varargin)
 
       if (! isempty (font))
         options = cstrcat (options, "\"", font, "\" ");
       endif
       if (! isempty (fontsize))
         options = cstrcat (options, " ", fontsize);
       endif
       
-      new_terminal = cstrcat (termn, " ", options);
-      
     elseif (strcmp (dev, "aifm") || strcmp (dev, "corel"))
       ## Adobe Illustrator, CorelDraw
       if (use_color >= 0)
         options = " color";
       else
         options = " mono";
       endif
       if (! isempty (font))
@@ -416,17 +421,18 @@ function print (varargin)
       if (! isempty (fontsize))
         options = cstrcat (options, " ", fontsize);
       endif
 
     elseif (any (strcmp (dev, bitmap_devices)))
 
       if (isempty (canvas_size) && isempty (resolution) 
 	  && any (strcmp (dev, {"pbm", "gif", "jpeg", "png"})))
-        options = "large";
+        ##options = "large";
+	options = "";
       elseif (strcmp (dev, "svg"))
 	## Referring to size, either "dynamic" or "fixed"
 	options = "fixed";
       else
 	options = "";
       end
       if (! isempty (canvas_size))
         options = cstrcat (options, " size ", canvas_size);
@@ -454,20 +460,31 @@ function print (varargin)
       endif
       if (! isempty (fontsize))
         options = cstrcat (options, " ", fontsize);
       endif
 
     endif
  
     if (__gnuplot_has_feature__ ("variable_GPVAL_TERMINALS"))
-        available_terminals = __gnuplot_get_var__ (gcf, "GPVAL_TERMINALS");
-        available_terminals = regexp (available_terminals, "\\b\\w+\\b", "match");
+      available_terminals = __gnuplot_get_var__ (gcf, "GPVAL_TERMINALS");
+      available_terminals = regexp (available_terminals, "\\b\\w+\\b", "match");
+      ## Favor the cairo terminals.
+      if (strcmp (termn, "pdf") 
+          && any (strcmp (available_terminals, "pdfcairo")))
+        termn = "pdfcairo";
+	gnuplot_supports_term = true;
+      elseif (strcmp (termn, "png")
+              && any (strcmp (available_terminals, "pngcairo")))
+        termn = "pngcairo";
+	gnuplot_supports_term = true;
+      else
         gnuplot_supports_term = any (strcmp (available_terminals, termn));
-    elseif (strcmp (termn, "pdf"))
+      endif
+    elseif (strcmp (termn, "pdf") && have_ghostscript)
       ## Some Linux variants do not include a "pdf" capable gnuplot.
       ## To be safe, use Ghostscript.
       if (have_ghostscript)
         gnuplot_supports_term = false;
         ghostscript_device = "pdfwrite";
       else
         gnuplot_supports_term = true;
       endif
@@ -484,26 +501,26 @@ function print (varargin)
 	else
 	  ghostscript_output = strcat (name, ".pdf");
 	endif
         name = cstrcat (tmpnam, ".ps");
         termn = "postscript";
 	options = cstrcat (options, " portrait");
 	## All "options" for pdf work for postscript as well.
       else
-        error ("print: the gnuplot terminal, \"%s\", is not available.", termn)
+        error ("print: the device, \"%s\", is not available.", dev)
       endif
     endif
 
     new_terminal = cstrcat (termn, " ", options);
 
     mono = use_color < 0;
 
     if (isempty (resolution))
-      if (any (strcmp (termn, {"emf", "svg"})))
+      if (any (strcmp (dev, {"emf", "svg"})))
         resolution = get (0, "screenpixelsperinch");
       else
         resolution = 150;
       endif
     else
       resolution = str2num (resolution);
       if (resolution == 0)
         resolution = get (0, "screenpixelsperinch");
@@ -512,17 +529,17 @@ function print (varargin)
     figure_properties = get (gcf);
     if (! isfield (figure_properties, "__pixels_per_inch__"))
       addproperty ("__pixels_per_inch__", gcf, "double", resolution);
     endif
     set (gcf, "__pixels_per_inch__", resolution)
 
     unwind_protect
       paper_position_mode = get (gcf, "paperpositionmode");
-      terminals_for_prn = {"postscript", "pdf"};
+      terminals_for_prn = {"postscript", "pdf", "pdfcairo"};
       restore_properties = false;
       is_eps_file = strncmp (dev, "eps", 3);
       output_for_printer = any (strncmp (termn, terminals_for_prn, numel(termn)));
       if ((! output_for_printer || is_eps_file) && ! doprint)
 	## If not PDF or PostScript, and the result is not being sent to a printer,
         ## render an image the size of the paperposition box.
         restore_properties = true;
         p.paperunits = get (gcf, "paperunits");
@@ -541,29 +558,35 @@ function print (varargin)
           paperposition_in_inches(1:2) = 0;
           papersize_in_inches = paperposition_in_inches(3:4);
         endif
         set (gcf, "papertype", "<custom>");
         set (gcf, "papersize", papersize_in_inches);
         set (gcf, "paperposition", paperposition_in_inches);
         set (gcf, "paperpositionmode", "manual");
       endif
+      if (use_color < 0)
+	[objs_with_color, color_of_objs] = convert_color2mono (gcf);
+      endif
       if (debug)
         drawnow (new_terminal, name, mono, debug_file);
       else
         drawnow (new_terminal, name, mono);
       endif
     unwind_protect_cleanup
       ## FIXME - it would be nice to delete "__pixels_per_inch__" property here.
       if (restore_properties)
         props = fieldnames (p);
         for n = 1:numel(props)
           set (gcf, props{n}, p.(props{n}))
         endfor
       endif
+      if (use_color < 0)
+	convert_mono_to_or_from_color (objs_with_color, color_of_objs, false);
+      endif
     end_unwind_protect
 
     if (! isempty (ghostscript_output))
       if (is_eps_file && tight_flag)
 	## If gnuplot's output is an eps-file then crop at the bounding box.
         fix_eps_bbox (name, ghostscript_binary);
       endif
       ghostscript_options = "-q -dBATCH -dSAFER -dNOPAUSE -dTextAlphaBits=4";
@@ -576,22 +599,25 @@ function print (varargin)
       endif
       ghostscript_options = sprintf ("%s -sDEVICE=%s", ghostscript_options,
                                      ghostscript_device);
       command = sprintf ("\"%s\" %s -sOutputFile=\"%s\" \"%s\" 2>&1", ghostscript_binary,
                           ghostscript_options, ghostscript_output, name);
       [errcode, output] = system (command);
       unlink (name);
       if (errcode)
-        error ("print: Conversion failed, %s -> %s.\nError was:\n%s\n", name, ghostscript_output, output);
+        error ("print: Conversion failed, %s -> %s.\nError was:\n%s\n",
+               name, ghostscript_output, output);
       endif
     elseif (is_eps_file && tight_flag && ! doprint)
       ## If the saved output file is an eps file, use ghostscript to set a tight bbox.
       ## This may result in a smaller or larger bbox geometry.
-      fix_eps_bbox (name, ghostscript_binary);
+      if (have_ghostscript)
+        fix_eps_bbox (name, ghostscript_binary);
+      endif
     endif
 
     if (doprint)
       if (isunix ())
 	prn_opt = "-l";
       elseif (ispc ())
 	prn_opt = "-o l";
       else
@@ -625,17 +651,18 @@ endfunction
 
 function bb = fix_eps_bbox (eps_file_name, ghostscript_binary)
 
   persistent warn_on_no_ghostscript = true
 
   box_string = "%%BoundingBox:";
 
   ghostscript_options = "-q -dBATCH -dSAFER -dNOPAUSE -dTextAlphaBits=4 -sDEVICE=bbox";
-  cmd = sprintf ("\"%s\" %s \"%s\" 2>&1", ghostscript_binary, ghostscript_options, eps_file_name);
+  cmd = sprintf ("\"%s\" %s \"%s\" 2>&1", ghostscript_binary,
+                 ghostscript_options, eps_file_name);
   [status, output] = system (cmd);
 
   if (status == 0)
 
     pattern = strcat (box_string, "[^%]*");
     pattern = pattern(1:find(double(pattern)>32, 1, "last"));
     bbox_line = regexp (output, pattern, "match");
     if (iscell (bbox_line))
@@ -672,13 +699,55 @@ function bb = fix_eps_bbox (eps_file_nam
           warning ("print.m: no bounding box found in '%s'.", eps_file_name)
         endif
       endwhile
     unwind_protect_cleanup
       fclose (fid);
     end_unwind_protect
   elseif (warn_on_no_ghostscript)
     warn_on_no_ghostscript = false;
-    warning ("print.m: Ghostscript could not be used to adjust bounding box.\nError was:\n%s\n", output)
+    warning ("print.m: Ghostscript failed to determine the bounding box.\nError was:\n%s\n", output)
   endif
 
 endfunction
 
+function [h, c] = convert_color2mono (hfig)
+  unwind_protect
+    showhiddenhandles = get (0, "showhiddenhandles");
+    set (0, "showhiddenhandles", "on");
+    h.color = findobj (hfig, "-property", "color");
+    h.facecolor = findobj (hfig, "-property", "facecolor");
+    h.edgecolor = findobj (hfig, "-property", "edgecolor");
+    h.backgroundcolor = findobj (hfig, "-property", "backgroundcolor");
+    h.colormap = findobj (hfig, "-property", "colormap");
+  unwind_protect_cleanup
+    set (0, "showhiddenhandles", showhiddenhandles);
+  end_unwind_protect
+  f = fieldnames (h);
+  for nf = 1:numel(f)
+    if (! isempty (h.(f{nf})))
+      v = get (h.(f{nf}), f{nf});
+      if (! iscell (v))
+        v = {v};
+      endif
+      c.(f{nf}) = v;
+    endif
+  endfor
+  convert_mono_to_or_from_color (h, c, true)
+endfunction
+
+function convert_mono_to_or_from_color (h, c, mono)
+  f = fieldnames (h);
+  for nf = 1:numel(f)
+    for nh = 1:numel (h.(f{nf}))
+      color = c.(f{nf}){nh};
+      ## Ignore color == {"none", "flat", ...}
+      if (isfloat (color))
+	if (mono)
+	  ## Same method as used by rgb2gray in the image pkg.
+	  color = rgb2ntsc (color)(:,1) * ones (1, 3);
+	endif
+        set (h.(f{nf})(nh), f{nf}, color);
+      endif
+    endfor
+  endfor
+endfunction
+
