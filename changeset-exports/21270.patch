# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455639235 18000
#      Tue Feb 16 11:13:55 2016 -0500
# Node ID 230e186e292da6171164ab680a47725683f716ac
# Parent  3c8a3d35661a6422812b35416970181128a5d12c
make building without qrupdate work again

* dMatrix.h (Matrix::hermitian): New function.
* fMatrix.h (FloatMatrix::hermitian): New function.
* liboctave/numeric/chol.cc: Fix function declarations, definition of
zero, and names of imag and conj functions.

diff --git a/liboctave/array/dMatrix.h b/liboctave/array/dMatrix.h
--- a/liboctave/array/dMatrix.h
+++ b/liboctave/array/dMatrix.h
@@ -117,16 +117,17 @@ public:
   Matrix stack (const ColumnVector& a) const;
   Matrix stack (const DiagMatrix& a) const;
 
   friend OCTAVE_API Matrix real (const ComplexMatrix& a);
   friend OCTAVE_API Matrix imag (const ComplexMatrix& a);
 
   friend class ComplexMatrix;
 
+  Matrix hermitian (void) const { return MArray<double>::transpose (); }
   Matrix transpose (void) const { return MArray<double>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   Matrix extract (octave_idx_type r1, octave_idx_type c1,
                   octave_idx_type r2, octave_idx_type c2) const;
 
   Matrix extract_n (octave_idx_type r1, octave_idx_type c1,
diff --git a/liboctave/array/fMatrix.h b/liboctave/array/fMatrix.h
--- a/liboctave/array/fMatrix.h
+++ b/liboctave/array/fMatrix.h
@@ -121,16 +121,17 @@ public:
   FloatMatrix stack (const FloatColumnVector& a) const;
   FloatMatrix stack (const FloatDiagMatrix& a) const;
 
   friend OCTAVE_API FloatMatrix real (const FloatComplexMatrix& a);
   friend OCTAVE_API FloatMatrix imag (const FloatComplexMatrix& a);
 
   friend class FloatComplexMatrix;
 
+  FloatMatrix hermitian (void) const { return MArray<float>::transpose (); }
   FloatMatrix transpose (void) const { return MArray<float>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   FloatMatrix extract (octave_idx_type r1, octave_idx_type c1,
                        octave_idx_type r2, octave_idx_type c2) const;
 
   FloatMatrix extract_n (octave_idx_type r1, octave_idx_type c1,
diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -22,27 +22,30 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
 #include <vector>
 
-
 #include "CColVector.h"
 #include "CMatrix.h"
+#include "CRowVector.h"
 #include "chol.h"
 #include "dColVector.h"
 #include "dMatrix.h"
+#include "dRowVector.h"
 #include "f77-fcn.h"
 #include "fCColVector.h"
 #include "fCMatrix.h"
+#include "fCRowVector.h"
 #include "fColVector.h"
 #include "fMatrix.h"
+#include "fRowVector.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
 
 #if ! defined (HAVE_QRUPDATE)
 #  include "CmplxQR.h"
 #  include "dbleQR.h"
 #  include "fCmplxQR.h"
@@ -444,42 +447,42 @@ chol<T>::set (const T& R)
 
   chol_mat = R;
 }
 
 #if ! defined (HAVE_QRUPDATE)
 
 template <typename T>
 void
-chol<T>::update (const T::VT& u)
+chol<T>::update (const VT& u)
 {
   warn_qrupdate_once ();
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () != n)
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
   init (chol_mat.hermitian () * chol_mat + T (u) * T (u).hermitian (),
         true, false);
 }
 
 template <typename T>
 static bool
 singular (const T& a)
 {
-  static typename T::element_type zero ();
+  static typename T::element_type zero (0);
   for (octave_idx_type i = 0; i < a.rows (); i++)
     if (a(i,i) == zero) return true;
   return false;
 }
 
 template <typename T>
 octave_idx_type
-chol<T>::downdate (const T::VT& u)
+chol<T>::downdate (const VT& u)
 {
   warn_qrupdate_once ();
 
   octave_idx_type info = -1;
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () != n)
@@ -494,46 +497,46 @@ chol<T>::downdate (const T::VT& u)
       if (info) info = 1;
     }
 
   return info;
 }
 
 template <typename T>
 octave_idx_type
-chol<T>::insert_sym (const T::VT& u, octave_idx_type j)
+chol<T>::insert_sym (const VT& u, octave_idx_type j)
 {
-  static typename T::element_type zero ();
+  static typename T::element_type zero (0);
 
   warn_qrupdate_once ();
 
   octave_idx_type info = -1;
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () != n + 1)
     (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
   if (j < 0 || j > n)
     (*current_liboctave_error_handler) ("cholinsert: index out of range");
 
   if (singular (chol_mat))
     info = 2;
-  else if (ximag (u(j)) != zero)
+  else if (imag (u(j)) != zero)
     info = 3;
   else
     {
       T a = chol_mat.hermitian () * chol_mat;
       T a1 (n+1, n+1);
       for (octave_idx_type k = 0; k < n+1; k++)
         for (octave_idx_type l = 0; l < n+1; l++)
           {
             if (l == j)
               a1(k, l) = u(k);
             else if (k == j)
-              a1(k, l) = xconj (u(l));
+              a1(k, l) = conj (u(l));
             else
               a1(k, l) = a(k < j ? k : k-1, l < j ? l : l-1);
           }
       info = init (a1, true, false);
       if (info) info = 1;
     }
 
   return info;
