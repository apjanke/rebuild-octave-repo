# HG changeset patch
# User jwe
# Date 987565471 0
#      Wed Apr 18 03:44:31 2001 +0000
# Node ID 855bf76e1fe16b38e3c373b0564ae2fe0ce72569
# Parent  f19f00339363f06f3164ba94fe345f802d2243f4
[project @ 2001-04-18 03:44:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2001-04-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* symtab.cc (define_builtin_const): Don't call replace_all_defs
+	here.
+
+	* error.cc (error_message_buffer): Now static.
+	* error.h (error_message_buffer): Delete extern declaration.
+
 2001-03-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/besselj.cc (besselh): Use K arg.
 	From: Thomas Stuart <tstuart@ing.sun.ac.za>.
 
 	* oct-stream.cc (get_size): Don't allow [Inf, N] as a size
 	specification for the read and scanf functions.
 	(get_size): SIZE is now an Array<double> instead of a Matrix object.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -63,18 +63,18 @@ int error_state = 0;
 // Current warning state.
 int warning_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 bool buffer_error_messages = false;
 
-// The message buffer
-std::ostrstream *error_message_buffer = 0;
+// The message buffer.
+static std::ostrstream *error_message_buffer = 0;
 
 // Warning messages are never buffered.
 // XXX FIXME XXX -- we should provide another way to turn them off...
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
@@ -530,35 +530,36 @@ void
 bind_global_error_variable (void)
 {
   if (error_message_buffer)
     {
       *error_message_buffer << std::ends;
 
       char *error_text = error_message_buffer->str ();
 
-      bind_builtin_constant ("__error_text__", error_text, true);
+      bind_builtin_variable ("__error_text__", error_text, true);
 
       delete [] error_text;
 
       delete error_message_buffer;
 
       error_message_buffer = 0;
     }
   else
-    bind_builtin_constant ("__error_text__", "", true);
+    bind_builtin_variable ("__error_text__", "", true);
 }
 
 void
 clear_global_error_variable (void *)
 {
   delete error_message_buffer;
+
   error_message_buffer = 0;
 
-  bind_builtin_constant ("__error_text__", "", true);
+  bind_builtin_variable ("__error_text__", "", true);
 }
 
 static int
 beep_on_error (void)
 {
   Vbeep_on_error = check_preference ("beep_on_error");
 
   return 0;
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -42,18 +42,15 @@ extern int error_state;
 // Current warning state.
 extern int warning_state;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 extern bool buffer_error_messages;
 
-// The message buffer
-extern std::ostrstream *error_message_buffer;
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -234,17 +234,17 @@ symbol_record::define_builtin_var (const
 
 bool
 symbol_record::define_builtin_const (const octave_value& v)
 {
   bool retval = false;
 
   if (! read_only_error ("redefine"))
     {
-      replace_all_defs (new symbol_def (v, symbol_record::BUILTIN_CONSTANT));
+      definition->define (v, symbol_record::BUILTIN_CONSTANT);
 
       retval = true;
     }
 
   return retval;
 }
 
 bool
