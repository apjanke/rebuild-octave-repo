# HG changeset patch
# User Rik <rik@octave.org>
# Date 1393793771 28800
#      Sun Mar 02 12:56:11 2014 -0800
# Node ID fcd87f68af4f225f911daf47e2642fc0f6f1d12a
# Parent  f958e8cd6348e2ed77f34b539d421b5986a71516
Deprecate nfields and replace with numfields.

* NEWS: Announce deprecation of nfields and addition of new function numfields.

* container.txi: Add numfields to the manual.

* oct-map.cc (octave_map::cat): Change %!tests to use numfields.

* ov-struct.cc (Fnumfields): Function renamed from nfields.

* scripts/deprecated/nfields.m: Add m-file which warns about nfields deprecation.
* scripts/deprecated/module.mk: Add nfields.m to build system.

* fieldnames.m: Change seealso link to point to numfields.

* __isequal__.m: Use numfields to simplify code.

* imwrite.m: Replace 'isempty (fieldnames (fmt))' with 'numfields (fmt) > 0'
for clarity.

* imageIO.m: Replace 'isempty (fieldnames (fmt))' with 'numfields (fmt) > 0'
for clarity.

* importdata.m: Use numfields to simplify code.

* assert.m: Use numfields to simplify code.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,37 +1,37 @@
 Summary of important user-visible changes for version 4.2:
 ---------------------------------------------------------
 
  ** Other new functions added in 4.2:
 
       dir_in_loadpath
+      numfields
 
  ** Deprecated functions.
 
+    The following functions have been deprecated in Octave 4.2 and will
+    be removed from Octave 4.6 (or whatever version is the second major
+    release after 4.2):
+
+      find_dir_in_path
+      nfields
+
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new            
       gen_doc_cache           java_set                   
       interp1q                java_unsigned_conversion
       isequalwithequalnans    javafields                
       java_convert_matrix     javamethods               
       java_debug              re_read_readline_init_file
       java_get                read_readline_init_file   
       java_invoke             saving_history            
 
-
-    The following functions have been deprecated in Octave 4.2 and will
-    be removed from Octave 4.6 (or whatever version is the second major
-    release after 4.2):
-
-      find_dir_in_path
-
-
     The following keywords were deprecated in Octave 3.8 and have been
     removed from Octave 4.2
 
       static
 
     The following configuration variables were deprecated in Octave 3.8
     and have been removed from Octave 4.2
 
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -502,17 +502,17 @@ structure or a structure array.
 
 @DOCSTRING(isstruct)
 
 @node Manipulating Structures
 @subsection Manipulating Structures
 
 Other functions that can manipulate the fields of a structure are given below.
 
-@DOCSTRING(nfields)
+@DOCSTRING(numfields)
 
 @DOCSTRING(fieldnames)
 
 @DOCSTRING(isfield)
 
 @DOCSTRING(setfield)
 
 @DOCSTRING(getfield)
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -806,19 +806,19 @@ octave_map::cat (int dim, octave_idx_typ
 %! y(1, 6).f = 11;  y(1, 6).a = "c";  y(1, 6).d = 33;
 %! assert (fieldnames ([x; y]), {"d"; "a"; "f"});
 
 %!test
 %! s = struct ();
 %! sr = [s,s];
 %! sc = [s;s];
 %! sm = [s,s;s,s];
-%! assert (nfields (sr), 0);
-%! assert (nfields (sc), 0);
-%! assert (nfields (sm), 0);
+%! assert (numfields (sr), 0);
+%! assert (numfields (sc), 0);
+%! assert (numfields (sm), 0);
 %! assert (size (sr), [1, 2]);
 %! assert (size (sc), [2, 1]);
 %! assert (size (sm), [2, 2]);
 */
 
 octave_map
 octave_map::index (const idx_vector& i, bool resize_ok) const
 {
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -2061,19 +2061,19 @@ equal dimension is returned.\n\
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (nfields, args, ,
+DEFUN (numfields, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} nfields (@var{s})\n\
+@deftypefn {Built-in Function} {} numfields (@var{s})\n\
 Return the number of fields of the structure @var{s}.\n\
 @seealso{fieldnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,11 +1,12 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/find_dir_in_path.m \
-  deprecated/isstr.m
+  deprecated/isstr.m \
+  deprecated/nfields.m
 
 FCN_FILES += $(deprecated_FCN_FILES)
 
 PKG_ADD_FILES += deprecated/PKG_ADD
 
 DIRSTAMP_FILES += deprecated/$(octave_dirstamp)
diff --git a/scripts/deprecated/nfields.m b/scripts/deprecated/nfields.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/nfields.m
@@ -0,0 +1,44 @@
+## Copyright (C) 2014 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} nfields (@var{s})
+## Return the number of fields of the structure @var{s}.
+##
+## @strong{Warning:} @code{nfields} is scheduled for removal in version 4.6.
+## Use @code{numfields} instead.
+## @seealso{numfields, fieldnames}
+## @end deftypefn
+
+function retval = nfields (varargin)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "nfields is obsolete and will be removed from a future version of Octave; please use numfields instead");
+  endif
+
+  if (nargin < 1)
+    print_usage ();
+  endif
+
+  retval = numfields (varargin{:});
+
+endfunction
+
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -28,17 +28,17 @@
 ## of the structure.
 ##
 ## When the input is an Octave object @var{obj}, the names are the public
 ## properties of the object.
 ##
 ## When the input is a Java object @var{javaobj} or Java classname
 ## @var{jclassname} the name are the public data elements of the object or
 ## class.
-## @seealso{nfields, isfield, orderfields, struct, methods}
+## @seealso{numfields, isfield, orderfields, struct, methods}
 ## @end deftypefn
 
 function names = fieldnames (obj)
   
   if (nargin != 1)
     print_usage ();
   endif
   
diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -90,19 +90,19 @@ function t = __isequal__ (nans_compare_e
     endfor
   endif
 
   if (t)
     ## Check individual classes.
     if (isstruct (x))
       ## Test the number of fields.
       fn_x = fieldnames (x);
-      l_fn_x = length (fn_x);
+      l_fn_x = numfields (x);
       fn_v = cellfun ("fieldnames", varargin, "uniformoutput", false);
-      t = all (l_fn_x == cellfun ("length", fn_v));
+      t = all (l_fn_x == cellfun ("numfields", varargin));
 
       ## Test that all the names are equal.
       idx = 0;
       s_fn_x = sort (fn_x);
       while (t && idx < l_v)
         idx++;
         ## We'll allow the fieldnames to be in a different order.
         t = all (strcmp (s_fn_x, sort (fn_v{idx})));
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -95,17 +95,17 @@ function imwrite (varargin)
   if (nargin < 2)
     print_usage ();
   endif
   [filename, ext] = imwrite_filename (varargin{2:end});
 
   fmt = imformats (ext);
   ## When there is no match, fmt will be a 1x1 structure with
   ## no fields, so we can't just use `isempty (fmt)'.
-  if (isempty (fieldnames (fmt)))
+  if (numfields (fmt) > 0)
     if (isempty (ext))
       error ("imwrite: no extension found for %s to identify the image format",
              filename);
     endif
     warning ("imwrite: unlisted image format %s (see imformats). Trying to save anyway.",
              ext);
     __imwrite__ (varargin{:});
   else
diff --git a/scripts/image/private/imageIO.m b/scripts/image/private/imageIO.m
--- a/scripts/image/private/imageIO.m
+++ b/scripts/image/private/imageIO.m
@@ -79,37 +79,37 @@ function varargout = imageIO (func, core
     ## argument is a format defined in imformats.  If so, we remove it
     ## from the rest of arguments before passing them on.  If not, we
     ## try to guess the format from the file extension.  Finally, if
     ## we still don't know the format, we use the Octave core functions
     ## which is the same for all formats.
     foo = []; # the function we will use
 
     ## We check if the call to imformats (ext) worked using
-    ## "isempty (fieldnames (fmt))" because when it fails, the returned
+    ## "numfields (fmt) > 0 because when it fails, the returned
     ## struct is not considered empty.
 
     ## try the second input argument
     if (! isempty (varargin) && ischar (varargin{1}))
       fmt = imformats (varargin{1});
-      if (! isempty (fieldnames (fmt)))
+      if (numfields (fmt) > 0)
         foo = fmt.(fieldname);
         varargin(1) = []; # remove format name from arguments
       endif
     endif
 
     ## try extension from file name
     if (isempty (foo))
       [~, ~, ext] = fileparts (fn);
       if (! isempty (ext))
         ## remove dot from extension
         ext = ext(2:end);
       endif
       fmt = imformats (ext);
-      if (! isempty (fieldnames (fmt)))
+      if (numfields (fmt) > 0)
         foo = fmt.(fieldname);
       endif
     endif
 
     ## use the core function
     if (isempty (foo))
       foo = core_func;
     endif
diff --git a/scripts/io/importdata.m b/scripts/io/importdata.m
--- a/scripts/io/importdata.m
+++ b/scripts/io/importdata.m
@@ -141,18 +141,17 @@ function [output, delimiter, header_rows
         output = rmfield (output, fields{i});
       endif
     endfor
 
     ## If only one field is left, replace the structure with the field,
     ## i.e., output = output.onlyFieldLeft
 
     ## Update the list of fields
-    fields = fieldnames (output);
-    if (numel (fields) == 1)
+    if (numfields (output) == 1)
       output = output.(fields{1});
     endif
   endif
 
 endfunction
 
 function [output, delimiter, header_rows] = importdata_ascii (fname, delimiter, num_header_rows)
 
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -143,17 +143,17 @@ function assert (cond, varargin)
     elseif (isstruct (expected))
       if (! isstruct (cond))
         err.index{end+1} = ".";
         err.observed{end+1} = "O";
         err.expected{end+1} = "E";
         err.reason{end+1} = ["Expected struct, but observed " class(cond)];
       elseif (ndims (cond) != ndims (expected)
               || any (size (cond) != size (expected))
-              || rows (fieldnames (cond)) != rows (fieldnames (expected)))
+              || numfields (cond) != numfields (expected))
 
         err.index{end+1} = ".";
         err.observed{end+1} = ["O(" sprintf("%dx", size(cond))(1:end-1) ")"];
         err.expected{end+1} = ["E(" sprintf("%dx", size(expected))(1:end-1) ")"];
         err.reason{end+1} = "Structure sizes don't match";
       else
         try
           empty = isempty (cond);
