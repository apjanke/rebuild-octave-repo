# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1550233511 -3600
#      Fri Feb 15 13:25:11 2019 +0100
# Node ID ea4a36fd48b697ccd88f314714f3b0acf7dae16b
# Parent  6236c790bd1b17989e9dcf7a61c7b584232b9fe2
Warn when image can't be rendered due to OpenGL library limitation (bug #54680)

* gl-render.cc (opengl_texture::create): Return empty texture if the width
  or height of the image is larger than the OpenGL implementation can handle.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -186,16 +186,35 @@ namespace octave
 
     // Expect RGB data
     if (dv.ndims () == 3 && dv(2) == 3)
       {
         // FIXME: dim_vectors hold octave_idx_type values.
         //        Should we check for dimensions larger than intmax?
         int h, w, tw, th;
         h = dv(0), w = dv(1);
+
+        // Return early if the image data are larger than the texture
+        // can hold
+        int max_size;
+        glGetIntegerv (GL_MAX_TEXTURE_SIZE, &max_size);
+        static bool warned = false;
+        if (h > max_size || w > max_size)
+          {
+            if (! warned)
+              {
+                warning ("opengl_texture::create: the opengl library in use "
+                         "doesn't support images with either dimension larger "
+                         "than %d. Not rendering.", max_size);
+                warned = true;
+              }
+            
+            return opengl_texture (glfcns);
+          }
+        
         GLuint id;
         bool ok = true;
 
         tw = next_power_of_2 (w);
         th = next_power_of_2 (h);
 
         glfcns.glGenTextures (1, &id);
         glfcns.glBindTexture (GL_TEXTURE_2D, id);
@@ -3889,44 +3908,44 @@ namespace octave
       dy = (y(1) - y(0)) / (h - 1);
 
     y0 = y(0)-dy/2;
     y1 = y(1)+dy/2;
 
     // Expect RGB data
     if (dv.ndims () == 3 && dv(2) == 3)
       {
-        opengl_texture tex (m_glfcns);
-        tex = opengl_texture::create (m_glfcns, cdata);
-        m_glfcns.glColor4d (1.0, 1.0, 1.0, 1.0);
-
-        m_glfcns.glEnable (GL_TEXTURE_2D);
-
-        m_glfcns.glBegin (GL_QUADS);
-
-        tex.tex_coord (0.0, 0.0);
-        m_glfcns.glVertex3d (x0, y0, 0.0);
-
-        tex.tex_coord (1.0, 0.0);
-        m_glfcns.glVertex3d (x1, y0, 0.0);
-
-        tex.tex_coord (1.0, 1.0);
-        m_glfcns.glVertex3d (x1, y1, 0.0);
-
-        tex.tex_coord (0.0, 1.0);
-        m_glfcns.glVertex3d (x0, y1, 0.0);
-
-        m_glfcns.glEnd ();
-        m_glfcns.glDisable (GL_TEXTURE_2D);
+        opengl_texture tex  = opengl_texture::create (m_glfcns, cdata);
+        if (tex.is_valid ())
+          {
+            m_glfcns.glColor4d (1.0, 1.0, 1.0, 1.0);
+
+            m_glfcns.glEnable (GL_TEXTURE_2D);
+
+            m_glfcns.glBegin (GL_QUADS);
+
+            tex.tex_coord (0.0, 0.0);
+            m_glfcns.glVertex3d (x0, y0, 0.0);
+
+            tex.tex_coord (1.0, 0.0);
+            m_glfcns.glVertex3d (x1, y0, 0.0);
+
+            tex.tex_coord (1.0, 1.0);
+            m_glfcns.glVertex3d (x1, y1, 0.0);
+
+            tex.tex_coord (0.0, 1.0);
+            m_glfcns.glVertex3d (x0, y1, 0.0);
+
+            m_glfcns.glEnd ();
+            m_glfcns.glDisable (GL_TEXTURE_2D);
+          }
       }
     else
       warning ("opengl_renderer: invalid image size (expected MxNx3 or MxN)");
 
-    m_glfcns.glPixelZoom (1, 1);
-
 #else
 
     octave_unused_parameter (props);
 
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
