# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458249345 14400
#      Thu Mar 17 17:15:45 2016 -0400
# Node ID bca9aaef907a0f5283f58eaf810e7a78d1adb44f
# Parent  6e5540ddb6392a746bfc04035908a73026740fad
* textscan.h, textscan.cc: Style fixes.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -14,38 +14,32 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-/** @file libinterp/corefcn/textscan
- *  Implement the 'textscan' octave command
- */
-
-//#ifdef HAVE_CONFIG_H
-#include <config.h>
-//#endif
-
-#include "list"
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <list>
 
 #include "Array.cc"
 
 #include "Cell.h"
-#include "textscan.h"
+#include "defun.h"
 #include "oct-stream.h"
+#include "ov.h"
 #include "ovl.h"
+#include "textscan.h"
 #include "utils.h"
-#include "defun.h"
-#include "ov-re-mat.h"
-
-// Note: this info string tries to start new sentences on new lines
-// to minimize the number of lines changed when making changes to it.
+
 DEFUN (textscan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{C} =} textscan (@var{fid}, @var{format})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{repeat})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{param}, @var{value}, @dots{})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{fid}, @var{format}, @var{repeat}, @var{param}, @var{value}, @dots{})\n\
 @deftypefnx {} {@var{C} =} textscan (@var{str}, @dots{})\n\
 @deftypefnx {} {[@var{C}, @var{position}] =} textscan (@dots{})\n\
@@ -387,36 +381,37 @@ from the beginning of the file or string
       os.input_stream ()->clear ();
       retval(1) = os.tell ();
       os.input_stream ()->setstate (state);
     }
 
   return retval;
 }
 
-/********************/
-/* Calculate x^n */
-/* Used for ...e+nn  so that, for example, 1e2 is exactly 100 and 5e-1 is 1/2 */
+
+// Calculate x^n.  Used for ...e+nn  so that, for example, 1e2 is
+// exactly 100 and 5e-1 is 1/2
+
 double pown (double x, unsigned int n)
 {
   double retval = 1;
 
   for (unsigned int d = n; d; d >>= 1)
     {
       if (d & 1)
         retval *= x;
       x *= x;
     }
 
   return retval;
 }
 
-/********************/
-/* Read a double considering the "precision" field of  fmt  and the */
-/* exp_chars  option of  options. */
+// Read a double considering the "precision" field of  fmt  and the
+// exp_chars  option of  options.
+
 double
 textscan::read_double (dstr& is, const textscan_format_elt& fmt) const
 {
   int    sign = 1;
   unsigned int    width_left = fmt.width;
   double retval  = 0;
   bool   valid = false;         // syntactically correct double?
 
@@ -479,17 +474,17 @@ textscan::read_double (dstr& is, const t
         retval += multiplier;
 
       if (i > 0)
         valid = true;           // valid if at least one digit after '.'
 
       // skip remainder after '.', to field width, to look for exponent
       if (i == precision)
         while (width_left-- && is && (ch = is.get ()) >= '0' && ch <= '9')
-          ;  /* discard */
+          ;  // discard
       width_left++;
     }
 
   // look for exponent part in, e.g.,  6.023E+23
   const char *ec = exp_chars.c_str ();
   bool used_exp = false;
   if (valid && width_left > 1 && strchr (ec, ch))
     {
@@ -570,21 +565,20 @@ textscan::read_double (dstr& is, const t
   if (!valid)
     is.setstate (std::ios::failbit);
   else
     is.setstate (is.rdstate () & ~std::ios::failbit);
 
   return retval * sign;
 }
 
-/********************/
-// Read a single number: real, complex, inf, NaN,
-// possibly with limited precision.
-// Calls to this should be preceded by skip_whitespace.
+// Read a single number: real, complex, inf, NaN, possibly with limited
+// precision.  Calls to this should be preceded by skip_whitespace.
 // Calling that inside scan_complex would violate its const declaration.
+
 void
 textscan::scan_complex (dstr& is, const textscan_format_elt& fmt,
                         Complex& val) const
 {
   double im = 0;
   double re = 0;
   bool as_empty = false;   // did we fail but match a "treat_as_empty" string?
   bool inf = false;
@@ -715,18 +709,18 @@ textscan::scan_complex (dstr& is, const 
         }
     }
   if (as_empty)
     val = empty_value.scalar_value ();
   else
     val = Complex (re, im);
 }
 
-/********************/
-// Return in  val  the run of characters from  is  NOT contained in  pattern.
+// Return in VAL the run of characters from IS NOT contained in PATTERN. 
+
 int
 textscan::scan_caret (dstr& is, const char *pattern, std::string& val)
           const
 {
   int c1 = EOF;
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && (c1 = (is && !is.eof ()) ? is.get_undelim () : EOF) != EOF
@@ -736,19 +730,19 @@ textscan::scan_caret (dstr& is, const ch
   val = obuf.str ();
 
   if (c1 != EOF)
     is.putback (c1);
 
   return c1;
 }
 
-/********************/
-// Read until one of the strings in  delimiters  is found.
-// For efficiency,  ends  is a list of the last character of each delimiter
+// Read until one of the strings in DELIMITERS is found.  For
+// efficiency, ENDS is a list of the last character of each delimiter.
+
 std::string
 textscan::read_until (dstr& is, const Cell& delimiters,
                      const std::string& ends) const
 {
   std::string retval ("");
   bool done = false;
   do
     {                               // find sequence ending with an ending char
@@ -777,22 +771,23 @@ textscan::read_until (dstr& is, const Ce
         }
     }
   while (!done && is && !is.eof ());
 
   return retval;
 }
 
 
-/********************/
-// Read stream until either fmt.width chars have been read, or options.delimiter
-// has been found
-// Does *not* rely on fmt being 's' -- used by formats like %6f to limit to 6
+// Read stream until either fmt.width chars have been read, or
+// options.delimiter has been found.  Does *not* rely on fmt being 's'.
+// Used by formats like %6f to limit to 6.
+
 void
-textscan::scan_string (dstr& is, const textscan_format_elt& fmt, std::string& val) const
+textscan::scan_string (dstr& is, const textscan_format_elt& fmt,
+                       std::string& val) const
 {
   if (delim_list.numel () == 0)
     {
       unsigned int i = 0;
       unsigned int width = fmt.width;
 
       for (i = 0; i < width; i++)
         {
@@ -816,38 +811,38 @@ textscan::scan_string (dstr& is, const t
         {
           std::string tmp = delim_list(i).string_value ();
           ends += tmp.substr (tmp.length () - 1);
         }
       val = textscan::read_until (is, delim_list, ends);
     }
 }
 
-/********************/
-// Return in  val  the run of characters from  is  contained in  pattern.
+// Return in VAL the run of characters from IS contained in PATTERN.
+
 int
 textscan::scan_bracket (dstr& is, const char *pattern, std::string& val)
           const
 {
   int c1 = EOF;
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && strchr (pattern, (c1 = is.get_undelim ())))
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
   if (c1 != EOF)
     is.putback (c1);
   return c1;
 }
 
-/********************/
-// Return in  val  a string, either delimited by whitespace/delimiters, or
-// enclosed in a pair of double quotes ("...").  Enclosing quotes are removed.
-// A consecutive pair "" is inserted into  val  as a single ".
+// Return in VAL a string, either delimited by whitespace/delimiters, or
+// enclosed in a pair of double quotes ("...").  Enclosing quotes are
+// removed.  A consecutive pair "" is inserted into VAL as a single ".
+
 void
 textscan::scan_qstring (dstr& is, const textscan_format_elt& fmt,
                         std::string& val)
 {
   skip_whitespace (is);
 
   if (is.peek () != '\"')
     scan_string (is, fmt, val);
@@ -863,19 +858,19 @@ textscan::scan_qstring (dstr& is, const 
           std::string val1;
           scan_caret (is, "\"", val1);
           val = val + "\"" + val1;
           is.get_undelim ();
         }
     }
 }
 
-/********************/
-// Read from  is  into  val  a string of the next  fmt.width  characters,
+// Read from IS into VAL a string of the next fmt.width characters,
 // including any whitespace or delimiters.
+
 void
 textscan::scan_cstring (dstr& is, const textscan_format_elt& fmt,
                         std::string& val) const
 {
   int ch;
   val.resize (fmt.width);
   for (unsigned int i = 0; is && i < fmt.width; i++)
     if ((ch = is.get_undelim ()) != EOF)
@@ -883,19 +878,18 @@ textscan::scan_cstring (dstr& is, const 
     else
       {
         val.resize (i);
         break;
       }
 }
 
 
-/**
- *  Read a single '%...' conversion and place it in position  row  of  ov.
- */
+//  Read a single '%...' conversion and place it in position ROW of OV.
+
 void
 textscan::scan_one (dstr& is, const textscan_format_elt& fmt,
                     octave_value& ov, Array<octave_idx_type> row)
 {
   skip_whitespace (is);
 
   is.clear ();
 
@@ -1053,20 +1047,19 @@ textscan::scan_one (dstr& is, const text
                                               Cell (octave_value (vv)));
         // FIXME -- why does failbit get set at EOF, instead of eofbit?
       if (vv.length () != 0)
         is.clear (is.rdstate () & ~std::ios_base::failbit);
     }
   is.field_done ();
 }
 
-/**
- *  Read data corresponding to the entire format string once,
- *  placing the values in row  row of retval.
- */
+// Read data corresponding to the entire format string once, placing the
+// values in row ROW of retval. 
+
 int
 textscan::read_format_once (dstr& is,
                             textscan_format_list& fmt_list,
                             std::list<octave_value> & retval,
                             Array<octave_idx_type> row, int& done_after)
 {
   const textscan_format_elt *elem = fmt_list.first ();
   std::list<octave_value>::iterator out=retval.begin ();
@@ -1158,17 +1151,16 @@ textscan::read_format_once (dstr& is,
     return (2 + no_conversions);
 
   if (conversion_failed)
     return (4 + no_conversions);
 
   return 0;
 }
 
-/********************/
 void
 textscan::parse_options (const octave_value_list& args, int first_param,
                          textscan_format_list& fmt_list)
 {
   int last = args.length ();
   int n = last - first_param;
 
   if (n & 1)
@@ -1394,19 +1386,19 @@ textscan::parse_options (const octave_va
         if (isspace (i))
           delim_table[i] = '1';
       }
   else
     for (unsigned int i = 0; i < delims.length (); i++)
       delim_table[delims[i]] = '1';
 }
 
-/********************/
-// skip comments, and characters specified by the "Whitespace" option
-// If EOLstop==true, doesn't skip end of line
+// Skip comments, and characters specified by the "Whitespace" option.
+// If EOLstop == true, don't skip end of line.
+
 int
 textscan::skip_whitespace (dstr& is, bool EOLstop)
 {
   int c1 = EOF;
   bool found_comment = false;
 
   do
     {
@@ -1476,20 +1468,20 @@ textscan::skip_whitespace (dstr& is, boo
     }
   while (found_comment);
 
   if (c1 != EOF)
     is.putback (c1);
   return c1;
 }
 
-/********************/
 // See if the next few characters match one of the strings in target.
-// For efficiency,  max_len  is the cached longest length of any target.
-// Returns -1 if none is found, or the inde of the match.
+// For efficiency, MAX_LEN is the cached longest length of any target.
+// Return -1 if none is found, or the index of the match.
+
 int
 textscan::lookahead (dstr& is, const Cell& targets, int max_len,
                      bool case_sensitive) const
 {
   // target strings may be different sizes.
   // Read ahead longest, put it all back, then re-read the string
   // that matches.
 
@@ -1519,18 +1511,17 @@ textscan::lookahead (dstr& is, const Cel
     }
 
   if (i == targets.numel ())
     i = -1;
 
   return i;
 }
 
-/********************/
-// Skip delimiters -- multiple if  MultipleDelimsAsOne specified.
+// Skip delimiters -- multiple if MultipleDelimsAsOne specified.
 int
 textscan::skip_delim (dstr& is)
 {
   int c1 = skip_whitespace (is, true);  // 'true': stop once EOL is read
   if (delim_list.numel () == 0)         // single character delimiter
     {
       if (is_delim (c1) || c1 == eol1 || c1 == eol2)
         {
@@ -1589,20 +1580,20 @@ textscan::skip_delim (dstr& is)
                 }
             }
         }
     }
 
   return c1;
 }
 
-/********************/
-// Read in as much of the input as coincides with the literal in
-// the format string.
-// Return "true" if the entire literal is matched, else false (and set failbit)
+// Read in as much of the input as coincides with the literal in the
+// format string.  Return "true" if the entire literal is matched, else
+// false (and set failbit).
+
 bool
 textscan::match_literal (dstr& is, const textscan_format_elt& fmt)
 {
      // "false" -> treat EOL as normal space
      // since a delimiter at the start of a line is a mismatch, not empty field
   skip_whitespace (is, false);
 
   for (unsigned int i = 0; i < fmt.width; i++)
@@ -1615,17 +1606,16 @@ textscan::match_literal (dstr& is, const
           is.setstate (std::ios::failbit);
           return false;
         }
     }
   return true;
 }
 
 
-/********************/
 textscan_format_list::textscan_format_list (const std::string& s)
   : set_from_first (false), has_string (false), nconv (0), curr_idx (0),
     list (dim_vector (16, 1)), buf (0)
 {
   octave_idx_type num_elts = 0;
 
   size_t n = s.length ();
 
@@ -1710,29 +1700,27 @@ textscan_format_list::textscan_format_li
   if (have_more)
     add_elt_to_list (width, prec, bitwidth, octave_value (), discard, type, num_elts);
 
   list.resize (dim_vector (num_elts, 1));
 
   delete buf;
 }
 
-/********************/
 textscan_format_list::~textscan_format_list (void)
 {
   octave_idx_type n = list.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     {
       textscan_format_elt *elt = list(i);
       delete elt;
     }
 }
 
-/********************/
 void
 textscan_format_list::add_elt_to_list (unsigned int width, int prec,
                                        int bitwidth, octave_value val_type,
                                        bool discard, char type,
                                        octave_idx_type& num_elts,
                                        const std::string& char_class)
 {
   if (buf)
@@ -1757,17 +1745,16 @@ textscan_format_list::add_elt_to_list (u
           list(num_elts++) = elt;
         }
 
       delete buf;
       buf = 0;
     }
 }
 
-/********************/
 void
 textscan_format_list::process_conversion (const std::string& s, size_t& i,
                                           size_t n, octave_idx_type& num_elts)
 {
   unsigned width = 0;
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
@@ -1941,27 +1928,28 @@ textscan_format_list::process_conversion
 
       if (nconv < 0)
         break;
     }
 
   nconv = -1;
 }
 
-/**
- * Parse [...] and [^...]
- * Matlab does not expand expressions like A-Z, but they are useful, and so
- * we parse them "carefully".  We treat '-' as a usual character unless
- * both start and end characters are from the same class (upper case, lower
- * case, numeric), or this is not the first '-' in the pattern.
- *
- * Keeps both a running list of characters and a mask of which chars have
- * occurred.  The first is efficient for patterns with few characters.  The
- * latter is efficient for [^...] patterns.
- */
+// Parse [...] and [^...]
+//
+// Matlab does not expand expressions like A-Z, but they are useful, and
+// so we parse them "carefully".  We treat '-' as a usual character
+// unless both start and end characters are from the same class (upper
+// case, lower case, numeric), or this is not the first '-' in the
+// pattern.
+//
+// Keep both a running list of characters and a mask of which chars have
+// occurred.  The first is efficient for patterns with few characters.
+// The latter is efficient for [^...] patterns.
+
 static std::string
 textscan_char_class (const std::string& pattern)
 {
   int len = pattern.length ();
   if (len == 0)
     return "";
 
   std::string retval (256, '\0');
@@ -2034,17 +2022,16 @@ textscan_char_class (const std::string& 
         if (!mask[i])
           retval[out++] = i;
     }
   retval.resize (out);
 
   return retval;
 }
 
-/********************/
 int
 textscan_format_list::finish_conversion (const std::string& s, size_t& i,
                                          size_t n, unsigned int& width,
                                          int& prec, int& bitwidth,
                                          octave_value& val_type, bool discard,
                                          char& type, octave_idx_type& num_elts)
 {
   int retval = 0;
@@ -2102,17 +2089,16 @@ textscan_format_list::finish_conversion 
 
       add_elt_to_list (width, prec, bitwidth, val_type, discard, type,
                        num_elts, char_class);
     }
 
   return retval;
 }
 
-/********************
 void
 textscan_format_list::printme (void) const
 {
   octave_idx_type n = list.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     {
       textscan_format_elt *elt = list(i);
@@ -2131,21 +2117,20 @@ textscan_format_list::printme (void) con
       else
         std::cerr << elt->type << "\n";
 
       std::cerr
         << "char_class: `" << undo_string_escapes (elt->char_class) << "'\n"
         << "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
-* */
-
-/********************/
-// If FORMAT is explicitly "", it is assumed to be "%f" repeated enough times
-// to read the first row of the file.  Set it now.
+
+// If FORMAT is explicitly "", it is assumed to be "%f" repeated enough
+// times to read the first row of the file.  Set it now.
+
 int
 textscan_format_list::read_first_row (dstr& is, textscan& ts)
 {
   // Read first line and strip end-of-line, which may be two characters
   std::string first_line (20, ' ');
   is.getline (first_line, static_cast<char> (ts.eol2));
   if (first_line.length () > 0
       && first_line[first_line.length () - 1] == ts.eol1)
@@ -2222,22 +2207,21 @@ textscan_format_list::read_first_row (ds
   //Create  fmt  now that the size is known
   list.resize (dim_vector (nconv, 1));
   for (octave_idx_type i = 1; i < nconv; i++)
     list(i) = new textscan_format_elt (*list(0));
 
   return retval;             // May have returned 4 above.
 }
 
-/**
- * Perform actual textscan: read data from stream, and create cell array
- */
+// Perform actual textscan: read data from stream, and create cell array.
+
 octave_value
 textscan::scan (std::istream *isp, textscan_format_list& fmt_list,
-             octave_idx_type ntimes)
+                octave_idx_type ntimes)
 {
   octave_value retval;
 
   if (!isp)
     error ("internal error: textscan called with invalid istream");
   if (fmt_list.num_conversions () == -1)
     error ("textscan: invalid format specified");
   if (fmt_list.num_conversions () == 0)
@@ -2418,22 +2402,20 @@ textscan::scan (std::istream *isp, texts
             }
         }
       ra_idx(1) = i;
       retval = do_cat_op (retval, octave_value (Cell (cur)), ra_idx);
     }
   return retval;
 }
 
-/********************/
-/**
- * Create a delimited stream, reading from is, with delimiters delims,
- * and allowing reading of up to tellg() + longest_lookeahead.
- * When is is at EOF, lookahead may be padded by ASCII nuls.
- */
+// Create a delimited stream, reading from is, with delimiters delims,
+// and allowing reading of up to tellg + longest_lookeahead.  When is
+// is at EOF, lookahead may be padded by ASCII nuls.
+
 dstr::dstr (std::istream& is, const std::string& delimiters,
             int longest_lookahead, octave_idx_type bsize)
     : bufsize (bsize), i_stream (is), longest (longest_lookahead),
       delims (delimiters),
       flags (std::ios::failbit & ~std::ios::failbit) // can't cast 0
 {
   buf = new char[bufsize];
   eob = buf + bufsize;
@@ -2464,19 +2446,19 @@ dstr::~dstr ()
       i_stream.clear ();
       i_stream.seekg (buf_in_file);
       i_stream.read (buf, idx - buf);
     }
 
   delete [] buf;
 }
 
-/** Read a character from the buffer, refilling the buffer from the
- * file if necessary.
- */
+// Read a character from the buffer, refilling the buffer from the file
+// if necessary.
+
 int
 dstr::get_undelim ()
 {
   int retval;
   if (eof ())
     {
       setstate (std::ios_base::failbit);
       return EOF;
@@ -2495,34 +2477,33 @@ dstr::get_undelim ()
       else
         retval = *idx++;
     }
   if (idx >= last)
     delimited = false;
   return retval;
 }
 
-/** Return the next character to be read without incrementing the pointer,
- * refilling the buffer from the file if necessary.
- */
+// Return the next character to be read without incrementing the
+// pointer, refilling the buffer from the file if necessary.
+
 int
 dstr::peek_undelim ()
 {
   int retval = get_undelim ();
   putback ();
 
   return retval;
 }
 
-/**
- * Copy remaining unprocessed data to the start of the buffer and load
- * new data to fill it.
- * Returns EOF if the file is at EOF before reading any data and all of the
- * data that has been read has been processed.
- */
+// Copy remaining unprocessed data to the start of the buffer and load
+// new data to fill it.  Return EOF if the file is at EOF before
+// reading any data and all of the data that has been read has been
+// processed.
+
 int
 dstr::refresh_buf (void)
 {
   if (eof ())
     return EOF;
 
   int retval;
   int old_remaining = eob - idx;
@@ -2577,22 +2558,22 @@ dstr::refresh_buf (void)
     }
 
   if (retval == EOF)  // Ensure fast peek doesn't give valid char
     *idx = '\0';      // FIXME - check that no TreatAsEmpty etc starts w. \0?
 
   return retval;
 }
 
-/** Return a pointer to a block of data of size size, assuming that a
- * sufficiently large buffer is available in buffer, if required.
- * If called when delimited==true, and size is no greater than
- * longest_lookahead then this will not call refresh_buf(), so seekg()
- * still works.  Otherwise, seekg may be invalidated.
- */
+// Return a pointer to a block of data of size size, assuming that a
+// sufficiently large buffer is available in buffer, if required.
+// If called when delimited == true, and size is no greater than
+// longest_lookahead then this will not call refresh_buf, so seekg
+// still works.  Otherwise, seekg may be invalidated.
+
 char *
 dstr::read (char *buffer, int size, char* &prior_tell)
 {
   char *retval;
   if (eob  - idx > size)
     {
       retval = idx;
       idx += size;
@@ -2643,20 +2624,19 @@ dstr::read (char *buffer, int size, char
               if (eof ())
                 memset (buffer, 0, size - i);
             }
         }
     }
   return retval;
 }
 
-/**
- * Return in out an entire line, terminated by delim.
- * On input, out must have length at least 1.
- */
+// Return in OUT an entire line, terminated by delim.  On input, OUT
+// must have length at least 1.
+
 int
 dstr::getline (std::string& out, char delim)
 {
   int len = out.length (), used = 0;
   int ch;
   while ((ch = get_undelim ()) != delim && ch != EOF)
     {
       out[used++] = ch;
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -14,38 +14,38 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-/** @file
- * Implementation of textscan, a versatile text parser.
- */
+// @file
+// Implementation of textscan, a versatile text parser.
 
-#if !defined (octave_textscan_h)
+#if ! defined (octave_textscan_h)
 #define octave_textscan_h 1
 
 // For Inf and NaN
 #include "lo-ieee.h"
 
-/** Delimited stream, optimised to read strings of characters separated
- * by single-character delimiters.
- *
- * The reason behind this class is that octstream doesn't provide seek/tell,
- * but the opportunity has been taken to optimise for the textscan workload.
- *
- * The function reads chunks into a 4kiB buffer, and marks where the last
- * delimiter occurs.  Reads up to this delimiter can be fast.  After that
- * last delimiter, the remaining text is moved to the front of the buffer
- * and the buffer is refilled.  This also allows cheap seek and tell
- * operations within a "fast read" block.
- */
+// Delimited stream, optimised to read strings of characters separated
+// by single-character delimiters.
+//
+// The reason behind this class is that octstream doesn't provide
+// seek/tell, but the opportunity has been taken to optimise for the
+// textscan workload.
+//
+// The function reads chunks into a 4kiB buffer, and marks where the
+// last delimiter occurs.  Reads up to this delimiter can be fast.
+// After that last delimiter, the remaining text is moved to the front
+// of the buffer and the buffer is refilled.  This also allows cheap
+// seek and tell operations within a "fast read" block.
+
 class
 dstr
 {
   int bufsize;         // number of characters to read from the file at once
   std::istream& i_stream;   // stream to read from
   char *buf;           // temporary storage for a "chunk" of data
   char *idx;           // Current read pointer
   char *last;          // location of last delimiter in the buffer at buf
@@ -205,19 +205,18 @@ public:
   bool discard;
 
   // TRUE if the type is 'd', 'u', 'f', 'n'
   bool numeric;
 };
 
 class textscan;
 
-/**
- * The (parsed) sequence of format specifiers.
- */
+// The (parsed) sequence of format specifiers.
+
 class
 OCTINTERP_API
 textscan_format_list
 {
 public:
 
   textscan_format_list (const std::string& fmt = std::string ());
 
@@ -301,24 +300,26 @@ private:
                          octave_idx_type& num_elts);
   // No copying!
 
   textscan_format_list (const textscan_format_list&);
 
   textscan_format_list& operator = (const textscan_format_list&);
 };
 
-/**
- * Main class to implement textscan.
- * Reads data and parses it according to a textscan_format_list.
- * The calling sequence is
- *   textscan ();
- *   parse_options (...);
- *   scan (...);
- */
+
+// Main class to implement textscan.  Read data and parse it
+// according to a textscan_format_list.
+//
+// The calling sequence is
+//
+//   textscan ();
+//   parse_options (...);
+//   scan (...);
+
 class
 textscan
 {
   friend class textscan_format_list;
 
   std::string buf;
   // Three cases for delim_table and delim_list
   // 1. delim_table empty, delim_list empty:  whitespace delimiters
