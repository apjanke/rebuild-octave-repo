# HG changeset patch
# User Rik <rik@octave.org>
# Date 1471547834 25200
#      Thu Aug 18 12:17:14 2016 -0700
# Node ID 609403f90bb7fd443bad892036b6766cdd419d60
# Parent  770fb2070e96658d82507c7f6951878c8f977e88
doc: Update Copyright and release date for manual.

* octave.texi: Update copyright and release date.
Update @detailmenu.

* basics.txi, bugs.txi, external.txi, func.txi:
Use capitalization in node names consistent with
the rest of manual.

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -493,19 +493,19 @@ with @kbd{ESC}.  Thus, to enter @kbd{M-u
 @key{ESC} @key{u}.  The @kbd{ESC} character sequences are also allowed on
 terminals with real Meta keys.  In the following sections, Meta
 characters such as @kbd{Meta-u} are written as @kbd{M-u}.
 
 
 @menu
 * Cursor Motion::
 * Killing and Yanking::
-* Commands For Text::
-* Commands For Completion::
-* Commands For History::
+* Commands for Text::
+* Commands for Completion::
+* Commands for History::
 * Customizing readline::
 * Customizing the Prompt::
 * Diary and Echo Commands::
 @end menu
 
 @node Cursor Motion
 @subsection Cursor Motion
 
@@ -609,18 +609,18 @@ the prior command is @kbd{C-y} or @kbd{M
 
 When you use a kill command, the text is saved in a @dfn{kill-ring}.
 Any number of consecutive kills save all of the killed text together, so
 that when you yank it back, you get it in one clean sweep.  The kill
 ring is not line specific; the text that you killed on a previously
 typed line is available to be yanked back later, when you are typing
 another line.
 
-@node Commands For Text
-@subsection Commands For Changing Text
+@node Commands for Text
+@subsection Commands for Changing Text
 
 The following commands can be used for entering characters that would
 otherwise have a special meaning (e.g., @key{TAB}, @kbd{C-q}, etc.), or
 for quickly correcting typing mistakes.
 
 @table @kbd
 @item  C-q
 @itemx C-v
@@ -648,18 +648,18 @@ Lowercase the characters following the c
 (or following) word, moving the cursor to the end of the word.
 
 @item M-c
 Uppercase the character following the cursor (or the beginning of the
 next word if the cursor is between words), moving the cursor to the end
 of the word.
 @end table
 
-@node Commands For Completion
-@subsection Letting Readline Type For You
+@node Commands for Completion
+@subsection Letting Readline Type for You
 @cindex command completion
 
 The following commands allow Octave to complete command and variable
 names for you.
 
 @table @kbd
 @item @key{TAB}
 Attempt to do completion on the text before the cursor.  Octave can
@@ -668,18 +668,18 @@ complete the names of commands and varia
 @item M-?
 List the possible completions of the text before the cursor.
 @end table
 
 @DOCSTRING(completion_append_char)
 
 @DOCSTRING(completion_matches)
 
-@node Commands For History
-@subsection Commands For Manipulating The History
+@node Commands for History
+@subsection Commands for Manipulating the History
 @cindex command history
 @cindex input history
 @cindex history of commands
 
 Octave normally keeps track of the commands you type so that you can
 recall previous commands to edit or execute them again.  When you exit
 Octave, the most recent commands you have typed, up to the number
 specified by the variable @code{history_size}, are saved in a file.
diff --git a/doc/interpreter/bugs.txi b/doc/interpreter/bugs.txi
--- a/doc/interpreter/bugs.txi
+++ b/doc/interpreter/bugs.txi
@@ -49,17 +49,17 @@ But the result for a user may be like th
 Some of these problems are due to bugs in other software, some are
 missing features that are too much work to add, and some are places
 where people's opinions differ as to what is best.
 
 @menu
 * Actual Bugs::                 Bugs we will fix later.
 * Reporting Bugs::
 * How To Get Help with Octave::
-* How to distinguish between Octave and Matlab::
+* How to Distinguish Between Octave and Matlab::
 @end menu
 
 @node Actual Bugs
 @appendixsec Actual Bugs We Haven't Fixed Yet
 
 @itemize @bullet
 @item
 Output that comes directly from Fortran functions is not sent through
@@ -396,18 +396,18 @@ mailing list, or other administrative tr
 
 If you think you have found a bug in Octave or in the installation
 procedure, however, you should submit a complete bug report to
 the Octave bug tracker at @url{http://bugs.octave.org}.
 But before you submit a bug report, please read
 @url{http://www.octave.org/bugs.html} to learn how to submit a useful
 bug report.
 
-@node How to distinguish between Octave and Matlab
-@appendixsec How to distinguish between Octave and Matlab
+@node How to Distinguish Between Octave and Matlab
+@appendixsec How to Distinguish Between Octave and Matlab
 @cindex Octave and @sc{matlab}, how to distinguish between
 
 Octave and @sc{matlab} are very similar, but handle Java slightly different.
 Therefore it may be necessary to detect the environment and use the appropriate
 functions.  The following function can be used to detect the environment.  Due
 to the persistent variable it can be called repeatedly without a heavy
 performance hit.
 
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1835,19 +1835,19 @@ 34.4952
 The Java Interface is designed for calling Java functions from within Octave.
 If you want to do the reverse, and call Octave from within Java, try
 a library like
 @code{javaOctave} (@url{https://kenai.com/projects/javaoctave/pages/Home}) or
 @code{joPas} (@url{http://jopas.sourceforge.net/}).
 
 @menu
 * Java Interface Functions::
-* Making Java classes available::
-* Creating an instance of a Java class::
-* Handling Java memory limitations::
+* Making Java Classes Available::
+* Creating an Instance of a Java Class::
+* Handling Java Memory Limitations::
 @end menu
 
 @node Java Interface Functions
 @subsection Java Interface Functions
 
 The following functions are the core of the Java Interface.  They provide
 a way to create a Java object, get and set its data fields, and call Java
 methods which return results to Octave.
@@ -1981,18 +1981,18 @@ between Octave and the Java Virtual Mach
 @DOCSTRING(javamem)
 
 @DOCSTRING(java_matrix_autoconversion)
 
 @DOCSTRING(java_unsigned_autoconversion)
 
 @DOCSTRING(debug_java)
 
-@node Making Java classes available
-@subsection Making Java classes available
+@node Making Java Classes Available
+@subsection Making Java Classes Available
 
 @c - index -
 @cindex classpath, setting
 @cindex classpath, difference between static and dynamic
 @cindex static classpath
 @cindex dynamic classpath
 @cindex @file{javaclasspath.txt}
 @cindex @file{classpath.txt}
@@ -2093,33 +2093,33 @@ to the Java search path.
 @group
 % contents of .octaverc:
 addpath ("~/octave");
 javaaddpath ("~/octave/myclasses.jar");
 @end group
 @end example
 
 @c ------------------------------------------------------------------------
-@node Creating an instance of a Java class
-@subsection Creating an instance of a Java class
+@node Creating an Instance of a Java Class
+@subsection Creating an Instance of a Java Class
 @c - index -
 @cindex object, how to create
 @cindex instance, how to create
 @c - index -
 
 The function @code{javaObject} can be used to create Java objects.
 
 Example:
 
 @example
 Passenger = javaObject ("package.FirstClass", row, seat);
 @end example
 
-@node Handling Java memory limitations
-@subsection Handling Java memory limitations
+@node Handling Java Memory Limitations
+@subsection Handling Java Memory Limitations
 @cindex memory, limitations
 
 In order to execute Java code Octave creates a Java Virtual Machine (JVM).
 Such a JVM allocates a fixed amount of initial memory and may expand this pool
 up to a fixed maximum memory limit.  The default values depend on the Java
 version (@pxref{XREFjavamem,,javamem}).  The memory pool is shared by all
 Java objects running in the JVM@.  This strict memory limit is intended mainly
 to avoid that runaway applications inside web browsers or in enterprise servers
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1261,22 +1261,22 @@ known until the function is evaluated).
 
 Although Octave normally executes commands from script files that have
 the name @file{@var{file}.m}, you can use the function @code{source} to
 execute commands from any file.
 
 @DOCSTRING(source)
 
 @menu
-* Publish Octave script files::
+* Publish Octave Script Files::
 * Publishing Markup::
 @end menu
 
-@node Publish Octave script files
-@subsection Publish Octave script files
+@node Publish Octave Script Files
+@subsection Publish Octave Script Files
 
 The function @code{publish} provides a dynamic possibility to document your
 script file.  Unlike static documentation, @code{publish} runs the script
 file, saves any figures and output while running the script, and presents them
 alongside static documentation in a desired output format.  The static
 documentation can make use of @ref{Publishing Markup} to enhance and
 customize the output.
 
@@ -1285,33 +1285,33 @@ customize the output.
 The counterpart to @code{publish} is @code{grabcode}:
 
 @DOCSTRING(grabcode)
 
 @node Publishing Markup
 @subsection Publishing Markup
 
 @menu
-* Using Publishing Markup in script files::
-* Text formatting::
+* Using Publishing Markup in Script Files::
+* Text Formatting::
 * Sections::
-* Preformatted code::
-* Preformatted text::
-* Bulleted lists::
-* Numbered lists::
-* Including file content::
-* Including graphics::
+* Preformatted Code::
+* Preformatted Text::
+* Bulleted Lists::
+* Numbered Lists::
+* Including File Content::
+* Including Graphics::
 * Including URLs::
-* Mathematical equations::
-* HTML markup::
-* LaTeX markup::
+* Mathematical Equations::
+* HTML Markup::
+* LaTeX Markup::
 @end menu
 
-@node Using Publishing Markup in script files
-@subsubsection Using Publishing Markup in script files
+@node Using Publishing Markup in Script Files
+@subsubsection Using Publishing Markup in Script Files
 
 To use Publishing Markup, start by typing @samp{##} or @samp{%%} at the
 beginning of a new line.  For @sc{matlab} compatibility @samp{%%} is treated
 the same way as @samp{##}.
 
 The lines following @samp{##} or @samp{%%} start with one of either
 @samp{#} or @samp{%} followed by at least one space.  These lines are
 interpreted as section.  A section ends at the first line not starting
@@ -1339,18 +1339,18 @@ sombrero ()
 # * Bulleted list item 1
 # * Bulleted list item 2
 #
 # # Numbered list item 1
 # # Numbered list item 2
 @end group
 @end example
 
-@node Text formatting
-@subsubsection Text formatting
+@node Text Formatting
+@subsubsection Text Formatting
 
 Basic text formatting is supported inside sections, see the example
 given below:
 
 @example
 @group
 ##
 # @b{*bold*}, @i{_italic_}, or |monospaced| Text
@@ -1392,18 +1392,18 @@ some_code ();
 some_code ();
 
 ### Section 3
 #
 #
 @end group
 @end example
 
-@node Preformatted code
-@subsubsection Preformatted code
+@node Preformatted Code
+@subsubsection Preformatted Code
 
 To write preformatted code inside a section, indent the code by three
 spaces after @samp{#} at the beginning of each line and leave the lines
 above and below the code blank, except for @samp{#} at the beginning of
 those lines.
 
 @example
 @group
@@ -1413,18 +1413,18 @@ those lines.
 #   for i = 1:5
 #     disp (i);
 #   endfor
 #
 # And more usual text.
 @end group
 @end example
 
-@node Preformatted text
-@subsubsection Preformatted text
+@node Preformatted Text
+@subsubsection Preformatted Text
 
 To write preformatted text inside a section, indent the code by two spaces
 after @samp{#} at the beginning of each line and leave the lines above and
 below the preformatted text blank, except for @samp{#} at the beginning of
 those lines.
 
 @example
 @group
@@ -1436,18 +1436,18 @@ those lines.
 #  The slings and arrows of outrageous fortune,
 #  Or to take arms against a sea of troubles,
 #  And by opposing end them?  To die: to sleep;"
 #
 #  --"Hamlet" by W. Shakespeare
 @end group
 @end example
 
-@node Bulleted lists
-@subsubsection Bulleted lists
+@node Bulleted Lists
+@subsubsection Bulleted Lists
 
 To create a bulleted list, type
 
 @example
 @group
 ##
 #
 # * Bulleted list item 1
@@ -1463,18 +1463,18 @@ to get output like
 @item Bulleted list item 1
 
 @item Bulleted list item 2
 @end itemize
 
 Notice the blank lines, except for the @samp{#} or @samp{%} before and
 after the bulleted list!
 
-@node Numbered lists
-@subsubsection Numbered lists
+@node Numbered Lists
+@subsubsection Numbered Lists
 
 To create a numbered list, type
 
 @example
 @group
 ##
 #
 # # Numbered list item 1
@@ -1490,18 +1490,18 @@ to get output like
 @item Numbered list item 1
 
 @item Numbered list item 2
 @end enumerate
 
 Notice the blank lines, except for the @samp{#} or @samp{%} before and
 after the numbered list!
 
-@node Including file content
-@subsubsection Including file content
+@node Including File Content
+@subsubsection Including File Content
 
 To include the content of an external file, e.g., a file called
 @samp{my_function.m} at the same location as the published Octave script,
 use the following syntax to include it with Octave syntax highlighting.
 
 Alternatively, you can write the full or relative path to the file.
 
 @example
@@ -1512,18 +1512,18 @@ Alternatively, you can write the full or
 #
 # <include>/full/path/to/my_function.m</include>
 #
 # <include>../relative/path/to/my_function.m</include>
 #
 @end group
 @end example
 
-@node Including graphics
-@subsubsection Including graphics
+@node Including Graphics
+@subsubsection Including Graphics
 
 To include external graphics, e.g., a graphic called @samp{my_graphic.png}
 at the same location as the published Octave script, use the following syntax.
 
 Alternatively, you can write the full path to the graphic.
 
 @example
 @group
@@ -1567,52 +1567,52 @@ GNU Octave documentations function index
 
 @example
 @group
 ##
 # <octave:DISP The display function>
 @end group
 @end example
 
-@node Mathematical equations
-@subsubsection Mathematical equations
+@node Mathematical Equations
+@subsubsection Mathematical Equations
 
 One can insert @LaTeX{} inline math, surrounded by single @samp{$} signs, or
 displayed math, surrounded by double @samp{$$} signs, directly inside
 sections.
 
 @example
 @group
 ##
 # Some shorter inline equation $e^@{ix@} = \cos x + i\sin x$.
 #
 # Or more complicated formulas as displayed math:
 # $$e^x = \lim_@{n\rightarrow\infty@}\left(1+\dfrac@{x@}@{n@}\right)^@{n@}.$$
 @end group
 @end example
 
-@node HTML markup
-@subsubsection HTML markup
+@node HTML Markup
+@subsubsection HTML Markup
 
 If the published output is a HTML report, you can insert HTML markup,
 that is only visible in this kind of output.
 
 @example
 @group
 ##
 # <html>
 # <table style="border:1px solid black;">
 # <tr><td>1</td><td>2</td></tr>
 # <tr><td>3</td><td>3</td></tr>
 # </html>
 @end group
 @end example
 
-@node LaTeX markup
-@subsubsection LaTeX markup
+@node LaTeX Markup
+@subsubsection LaTeX Markup
 
 If the published output is a @LaTeX{} or PDF report, you can insert @LaTeX{}
 markup, that is only visible in this kind of output.
 
 @example
 @group
 ##
 # <latex>
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -87,17 +87,17 @@ Permission is granted to copy and distri
 manual into another language, under the above conditions for
 modified versions.
 @end ifnottex
 
 @titlepage
 @title GNU Octave
 @subtitle A high-level interactive language for numerical computations
 @subtitle Edition 4 for Octave version @value{VERSION}
-@subtitle March 2015
+@subtitle September 2016
 @sp 2
 @multitable @columnfractions 0.4 0.025 0.65
 @item
 @flushright @image{octave_logo,2.1in}
 @end flushright
 @tab
 @c this is a spacer column
 @tab
@@ -106,17 +106,17 @@ modified versions.
 @end multitable
 @author John W. Eaton
 @author David Bateman
 @author S@o{}ren Hauberg
 @author Rik Wehbring
 @page
 @vskip 0pt plus 1filll
 Copyright @copyright{} 1996, 1997, 1999, 2000, 2001, 2002, 2005, 2006,
-2007, 2011, 2013, 2015 John W. Eaton.
+2007, 2011, 2013, 2015, 2016 John W. Eaton.
 
 This is the fourth edition of the Octave documentation, and is consistent
 with version @value{VERSION} of Octave.
 
 Permission is granted to make and distribute verbatim copies of
 this manual provided the copyright notice and this permission notice
 are preserved on all copies.
 
@@ -243,19 +243,19 @@ Invoking Octave from the Command Line
 
 * Command Line Options::
 * Startup Files::
 
 Command Line Editing
 
 * Cursor Motion::
 * Killing and Yanking::
-* Commands For Text::
-* Commands For Completion::
-* Commands For History::
+* Commands for Text::
+* Commands for Completion::
+* Commands for History::
 * Customizing readline::
 * Customizing the Prompt::
 * Diary and Echo Commands::
 
 Comments
 
 * Single Line Comments::
 * Block Comments::
@@ -414,16 +414,37 @@ Function Files
 * Manipulating the Load Path::
 * Subfunctions::
 * Private Functions::
 * Nested Functions::
 * Overloading and Autoloading::
 * Function Locking::
 * Function Precedence::
 
+Script Files
+
+* Publish Octave Script Files::
+* Publishing Markup::
+
+Publishing Markup
+
+* Using Publishing Markup in Script Files::
+* Text Formatting::
+* Sections::
+* Preformatted Code::
+* Preformatted Text::
+* Bulleted Lists::
+* Numbered Lists::
+* Including File Content::
+* Including Graphics::
+* Including URLs::
+* Mathematical Equations::
+* HTML Markup::
+* LaTeX Markup::
+
 Function Handles Anonymous Functions Inline Functions
 
 * Function Handles::
 * Anonymous Functions::
 * Inline Functions::
 
 Errors and Warnings
 
@@ -538,17 +559,19 @@ Graphics Object Properties
 * Root Figure Properties::
 * Figure Properties::
 * Axes Properties::
 * Line Properties::
 * Text Properties::
 * Image Properties::
 * Patch Properties::
 * Surface Properties::
+* Light Properties::
 * Uimenu Properties::
+* Uibuttongroup Properties::
 * Uicontextmenu Properties::
 * Uipanel Properties::
 * Uicontrol Properties::
 * Uitoolbar Properties::
 * Uipushtool Properties::
 * Uitoggletool Properties::
 
 Advanced Plotting
@@ -853,19 +876,19 @@ Mex-Files
 * Cell Arrays with Mex-Files::
 * Structures with Mex-Files::
 * Sparse Matrices with Mex-Files::
 * Calling Other Functions in Mex-Files::
 
 Java Interface
 
 * Java Interface Functions::
-* Making Java classes available::
-* Creating an instance of a Java class::
-* Handling Java memory limitations::
+* Making Java Classes Available::
+* Creating an Instance of a Java Class::
+* Handling Java Memory Limitations::
 
 Test and Demo Functions
 
 * Test Functions::
 * Demonstration Functions::
 
 Tips and Standards
 
@@ -884,17 +907,17 @@ Contributing Guidelines
 * C++ Sources::
 * Other Sources::
 
 Trouble
 
 * Actual Bugs::                 Bugs we will fix later.
 * Reporting Bugs::
 * How To Get Help with Octave::
-* How to distinguish between Octave and Matlab::
+* How to Distinguish Between Octave and Matlab::
 
 Reporting Bugs
 
 * Bug Criteria::
 * Bug Tracker::        Where to submit your bug report.
 * Bug Reporting::      How to report a bug effectively.
 * Sending Patches::    How to send a patch for Octave.
 
