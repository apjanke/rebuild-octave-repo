# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1271205041 -7200
#      Wed Apr 14 02:30:41 2010 +0200
# Node ID f6959aff84ca19e9d0c19bb0aea8cb4d2e258f06
# Parent  fcafe0e9bd586cd351d9d81be299dc73cc91cff3
Reimplement discrete_cdf using the lookup function

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-04-13  David Bateman  <dbateman@free.fr>
+
+	* statistics/discrete_cdf.m: Reimplement using lookup.
+
 2010-04-13  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* plot/__fltk_ginput__.m: New functions, implement ginput for
 	fltk backend.
 
 2010-04-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* sparse/spalloc.m: Remove.
diff --git a/scripts/statistics/distributions/discrete_cdf.m b/scripts/statistics/distributions/discrete_cdf.m
--- a/scripts/statistics/distributions/discrete_cdf.m
+++ b/scripts/statistics/distributions/discrete_cdf.m
@@ -1,10 +1,9 @@
-## Copyright (C) 1996, 1997, 1998, 2000, 2001, 2002, 2004, 2005, 2006,
-##               2007 Kurt Hornik
+## Copyright (C) 2010 David Bateman
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -19,19 +18,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_cdf (@var{x}, @var{v}, @var{p})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of a univariate discrete distribution which
 ## assumes the values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@wu-wien.ac.at>
-## Description: CDF of a discrete distribution
-
 function cdf = discrete_cdf (x, v, p)
 
   if (nargin != 3)
     print_usage ();
   endif
 
   sz = size (x);
 
@@ -52,12 +48,13 @@ function cdf = discrete_cdf (x, v, p)
   cdf = zeros (sz);
   k = find (isnan (x));
   if (any (k))
     cdf (k) = NaN;
   endif
   k = find (!isnan (x));
   if (any (k))
     n = length (k);
-    cdf (k) = ((x(k) * ones (1, m)) >= (ones (n, 1) * v)) * p;
+    [vs, vi] = sort (v);
+    cdf = [0 ; cumsum(p(vi))](lookup (vs, x(k)) + 1);
   endif
 
 endfunction
