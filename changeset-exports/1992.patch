# HG changeset patch
# User jwe
# Date 825813833 0
#      Sun Mar 03 00:43:53 1996 +0000
# Node ID 5668c00f9c7ac457e705a264c01c64d8db144f16
# Parent  413f6a81868f119647afabe81b841a45c7f61f4c
[project @ 1996-03-03 00:40:53 by jwe]

diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -29,16 +29,25 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "CmplxLU.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-inlines.cc"
 
+// Instantiate the base LU class for the types we need.
+
+#include <base-lu.h>
+#include <base-lu.cc>
+
+template class base_lu <ComplexMatrix, Matrix>;
+
+// Define the constructor for this particular derivation.
+
 extern "C"
 {
   int F77_FCN (zgesv, ZGESV) (const int&, const int&, Complex*,
 			      const int&, int*, Complex*, const int&,
 			      int&);
 }
 
 ComplexLU::ComplexLU (const ComplexMatrix& a)
@@ -49,68 +58,31 @@ ComplexLU::ComplexLU (const ComplexMatri
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("ComplexLU requires square matrix");
       return;
     }
 
   int n = a_nr;
 
-  Array<int> ipvt (n);
-
+  ipvt.resize (n);
   int *pipvt = ipvt.fortran_vec ();
 
-  ComplexMatrix A_fact = a;
-  Complex *tmp_data = A_fact.fortran_vec ();
+  a_fact = a;
+  Complex *tmp_data = a_fact.fortran_vec ();
 
   int info = 0;
   Complex *dummy = 0;
 
   F77_XFCN (zgesv, ZGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgesv");
   else
-    {
-      Array<int> pvt (n);
-
-      for (int i = 0; i < n; i++)
-	{
-	  ipvt.elem (i) -= 1;
-	  pvt.elem (i) = i;
-	}
-
-      for (int i = 0; i < n - 1; i++)
-	{
-	  int k = ipvt.elem (i);
-
-	  if (k != i)
-	    {
-	      int tmp = pvt.elem (k);
-	      pvt.elem (k) = pvt.elem (i);
-	      pvt.elem (i)= tmp;
-	    }
-	}
-
-      l.resize (n, n, 0.0);
-      u.resize (n, n, 0.0);
-      p.resize (n, n, 0.0);
-
-      for (int i = 0; i < n; i++)
-	{
-	  p.elem (i, pvt.elem (i)) = 1.0;
-
-	  l.elem (i, i) = 1.0;
-	  for (int j = 0; j < i; j++)
-	    l.elem (i, j) = A_fact.elem (i, j);
-
-	  for (int j = i; j < n; j++)
-	    u.elem (i, j) = A_fact.elem (i, j);
-	}
-    }
+    ipvt -= 1;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -23,57 +23,40 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_ComplexLU_h)
 #define octave_Complex_LU_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-class ostream;
-
+#include "base-lu.h"
 #include "dMatrix.h"
 #include "CMatrix.h"
 
 class
-ComplexLU
+ComplexLU : public base_lu <ComplexMatrix, Matrix>
 {
 public:
 
-  ComplexLU (void) : l (), u (), p () { }
+  ComplexLU (void) : base_lu <ComplexMatrix, Matrix> () { }
 
   ComplexLU (const ComplexMatrix& a);
 
-  ComplexLU (const ComplexLU& a) : l (a.l), u (a.u), p (a.p) { }
+  ComplexLU (const ComplexLU& a) : base_lu <ComplexMatrix, Matrix> (a) { }
 
   ComplexLU& operator = (const ComplexLU& a)
     {
       if (this != &a)
-	{
-	  l = a.l;
-	  u = a.u;
-	  p = a.p;
-	}
+	base_lu <ComplexMatrix, Matrix> :: operator = (a);
+
       return *this;
     }
 
   ~ComplexLU (void) { }
-
-  ComplexMatrix L (void) const { return l; }
-  ComplexMatrix U (void) const { return u; }
-
-  Matrix P (void) const { return p; }
-
-  friend ostream&  operator << (ostream& os, const ComplexLU& a);
-
-private:
-
-  ComplexMatrix l;
-  ComplexMatrix u;
-  Matrix p;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -87,16 +87,20 @@ public:
 
   friend MArray<T> product (const MArray<T>& a, const MArray<T>& b);
   friend MArray<T> quotient (const MArray<T>& a, const MArray<T>& b);
 
   friend MArray<T> operator - (const MArray<T>& a);
 };
 
 #define INSTANTIATE_MARRAY_FRIENDS(T) \
+  template MArray<T>& operator += (MArray<T>& a, const T& s); \
+  template MArray<T>& operator -= (MArray<T>& a, const T& s); \
+  template MArray<T>& operator += (MArray<T>& a, const MArray<T>& b); \
+  template MArray<T>& operator -= (MArray<T>& a, const MArray<T>& b); \
   template MArray<T> operator + (const MArray<T>& a, const T& s); \
   template MArray<T> operator - (const MArray<T>& a, const T& s); \
   template MArray<T> operator * (const MArray<T>& a, const T& s); \
   template MArray<T> operator / (const MArray<T>& a, const T& s); \
   template MArray<T> operator + (const T& s, const MArray<T>& a); \
   template MArray<T> operator - (const T& s, const MArray<T>& a); \
   template MArray<T> operator * (const T& s, const MArray<T>& a); \
   template MArray<T> operator / (const T& s, const MArray<T>& a); \
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -86,16 +86,20 @@ public:
 
   friend MArray2<T> product (const MArray2<T>& a, const MArray2<T>& b);
   friend MArray2<T> quotient (const MArray2<T>& a, const MArray2<T>& b);
 
   friend MArray2<T> operator - (const MArray2<T>& a);
 };
 
 #define INSTANTIATE_MARRAY2_FRIENDS(T) \
+  template MArray2<T>& operator += (MArray2<T>& a, const T& s); \
+  template MArray2<T>& operator -= (MArray2<T>& a, const T& s); \
+  template MArray2<T>& operator += (MArray2<T>& a, const MArray2<T>& b); \
+  template MArray2<T>& operator -= (MArray2<T>& a, const MArray2<T>& b); \
   template MArray2<T> operator + (const MArray2<T>& a, const T& s); \
   template MArray2<T> operator - (const MArray2<T>& a, const T& s); \
   template MArray2<T> operator * (const MArray2<T>& a, const T& s); \
   template MArray2<T> operator / (const MArray2<T>& a, const T& s); \
   template MArray2<T> operator + (const T& s, const MArray2<T>& a); \
   template MArray2<T> operator - (const T& s, const MArray2<T>& a); \
   template MArray2<T> operator * (const T& s, const MArray2<T>& a); \
   template MArray2<T> operator / (const T& s, const MArray2<T>& a); \
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -97,16 +97,18 @@ public:
 
   friend MDiagArray2<T>
   product (const MDiagArray2<T>& a, const MDiagArray2<T>& b);
 
   friend MDiagArray2<T> operator - (const MDiagArray2<T>& a);
 };
 
 #define INSTANTIATE_MDIAGARRAY_FRIENDS(T) \
+  template MDiagArray2<T>& operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b); \
+  template MDiagArray2<T>& operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T> operator * (const MDiagArray2<T>& a, const T& s); \
   template MDiagArray2<T> operator / (const MDiagArray2<T>& a, const T& s); \
   template MDiagArray2<T> operator * (const T& s, const MDiagArray2<T>& a); \
   template MDiagArray2<T> operator + (const MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T> operator - (const MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T> product (const MDiagArray2<T>& a, const MDiagArray2<T>& b); \
   template MDiagArray2<T> operator - (const MDiagArray2<T>& a);
 
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -29,16 +29,25 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "dbleLU.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mx-inlines.cc"
 
+// Instantiate the base LU class for the types we need.
+
+#include <base-lu.h>
+#include <base-lu.cc>
+
+template class base_lu <Matrix, Matrix>;
+
+// Define the constructor for this particular derivation.
+
 extern "C"
 {
   int F77_FCN (dgesv, DGESV) (const int&, const int&, double*,
 			      const int&, int*, double&, const int&,
 			      int&);
 }
 
 LU::LU (const Matrix& a)
@@ -49,66 +58,31 @@ LU::LU (const Matrix& a)
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("LU requires square matrix");
       return;
     }
 
   int n = a_nr;
 
-  Array<int> ipvt (n);
+  ipvt.resize (n);
   int *pipvt = ipvt.fortran_vec ();
 
-  Matrix A_fact = a;
-  double *tmp_data = A_fact.fortran_vec ();
+  a_fact = a;
+  double *tmp_data = a_fact.fortran_vec ();
 
   int info = 0;
   double dummy = 0;
 
   F77_XFCN (dgesv, DGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgesv");
   else
-    {
-      Array<int> pvt (n);
-
-      for (int i = 0; i < n; i++)
-	{
-	  ipvt.elem (i) -= 1;
-	  pvt.elem (i) = i;
-	}
-
-      for (int i = 0; i < n - 1; i++)
-	{
-	  int k = ipvt.elem (i);
-	  if (k != i)
-	    {
-	      int tmp = pvt.elem (k);
-	      pvt.elem (k) = pvt.elem (i);
-	      pvt.elem (i) = tmp;
-	    }
-	}
-
-      l.resize (n, n, 0.0);
-      u.resize (n, n, 0.0);
-      p.resize (n, n, 0.0);
-
-      for (int i = 0; i < n; i++)
-	{
-	  p.elem (i, pvt.elem (i)) = 1.0;
-
-	  l.elem (i, i) = 1.0;
-	  for (int j = 0; j < i; j++)
-	    l.elem (i, j) = A_fact.elem (i, j);
-
-	  for (int j = i; j < n; j++)
-	    u.elem (i, j) = A_fact.elem (i, j);
-	}
-    }
+    ipvt -= 1;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -23,56 +23,39 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_LU_h)
 #define octave_LU_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-class ostream;
-
+#include "base-lu.h"
 #include "dMatrix.h"
 
-class LU
+class
+LU : public base_lu <Matrix, Matrix>
 {
 public:
 
-  LU (void) : l (), u (), p () { }
+  LU (void) : base_lu <Matrix, Matrix> () { }
 
   LU (const Matrix& a);
 
-  LU (const LU& a) : l (a.l), u (a.u), p (a.p) { }
+  LU (const LU& a) : base_lu <Matrix, Matrix> (a) { }
 
   LU& operator = (const LU& a)
     {
       if (this != &a)
-	{
-	  l = a.l;
-	  u = a.u;
-	  p = a.p;
-	}
+	base_lu <Matrix, Matrix> :: operator = (a);
+
       return *this;
     }
 
   ~LU (void) { }
-
-  Matrix L (void) const { return l; }
-
-  Matrix U (void) const { return u; }
-
-  Matrix P (void) const { return p; }
-
-  friend ostream&  operator << (ostream& os, const LU& a);
-
-private:
-
-  Matrix l;
-  Matrix u;
-  Matrix p;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
