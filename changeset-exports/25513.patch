# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1530126118 -7200
#      Wed Jun 27 21:01:58 2018 +0200
# Node ID 7fb40efda31f345734a33300ad78522727d71581
# Parent  7335d44f34b456b88950d187f216724abd3c2cbb
Use wide character Windows API for operations on folders (bug #49118).

* stat-wrappers.c: Use wide character API for mkdir and stat.

* unistd-wrappers.c: Use wide character API for chdir, getcwd, and rmdir.

diff --git a/liboctave/wrappers/stat-wrappers.c b/liboctave/wrappers/stat-wrappers.c
--- a/liboctave/wrappers/stat-wrappers.c
+++ b/liboctave/wrappers/stat-wrappers.c
@@ -30,21 +30,35 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <time.h>
 
 #include <sys/types.h>
 #include <sys/stat.h>
 
 #include "stat-wrappers.h"
+#include "uniconv-wrappers.h"
+
+#if defined (OCTAVE_USE_WINDOWS_API)
+#  include <windows.h>
+#  include <wchar.h>
+#endif
 
 int
 octave_mkdir_wrapper (const char *name, mode_t mode)
 {
+#if defined (OCTAVE_USE_WINDOWS_API)
+  wchar_t *wname = u8_to_wchar (name);
+  int status = _wmkdir (wname);
+  free ((void *) wname);
+  octave_unused_parameter (mode);
+  return status;
+#else
   return mkdir (name, mode);
+#endif
 }
 
 int
 octave_mkfifo_wrapper (const char *name, mode_t mode)
 {
   return mkfifo (name, mode);
 }
 
@@ -95,34 +109,47 @@ int
 octave_stat_wrapper (const char *fname, mode_t *mode, ino_t *ino,
                      dev_t *dev, nlink_t *nlink, uid_t *uid,
                      gid_t *gid, off_t *size, time_t *atime,
                      time_t *mtime, time_t *ctime, dev_t *rdev,
                      long *blksize, long *blocks)
 {
   struct stat buf;
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+  wchar_t *wfname = u8_to_wchar (fname);
+  int status = _wstati64 (wfname, &buf);
+  free ((void *) wfname);
+#else
   int status = stat (fname, &buf);
+#endif
 
   assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
                       atime, mtime, ctime, rdev, blksize, blocks);
 
   return status;
 }
 
 int
 octave_lstat_wrapper (const char *lname, mode_t *mode, ino_t *ino,
                       dev_t *dev, nlink_t *nlink, uid_t *uid,
                       gid_t *gid, off_t *size, time_t *atime,
                       time_t *mtime, time_t *ctime, dev_t *rdev,
                       long *blksize, long *blocks)
 {
   struct stat buf;
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+  // Windows doesn't have an lstat. Use stat instead
+  wchar_t *wlname = u8_to_wchar (lname);
+  int status = _wstati64 (wlname, &buf);
+  free ((void *) wlname);
+#else
   int status = lstat (lname, &buf);
+#endif
 
   assign_stat_fields (&buf, mode, ino, dev, nlink, uid, gid, size,
                       atime, mtime, ctime, rdev, blksize, blocks);
 
   return status;
 }
 
 int
diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -26,25 +26,29 @@ along with Octave; see the file COPYING.
 // functions.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <stdio.h>
 
-#include <stdio.h>
-
 #include <sys/types.h>
 #include <unistd.h>
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #  include <process.h>
 #endif
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+#  include <windows.h>
+#  include <wchar.h>
+#endif
+
+#include "uniconv-wrappers.h"
 #include "unistd-wrappers.h"
 
 int
 octave_access_f_ok (void)
 {
   return F_OK;
 }
 
@@ -70,17 +74,24 @@ int
 octave_access_wrapper (const char *nm, int mode)
 {
   return access (nm, mode);
 }
 
 int
 octave_chdir_wrapper (const char *nm)
 {
+#if defined (OCTAVE_USE_WINDOWS_API)
+  wchar_t *wnm = u8_to_wchar (nm);
+  int status = _wchdir (wnm);
+  free ((void *) wnm);
+  return status;
+#else
   return chdir (nm);
+#endif
 }
 
 int
 octave_close_wrapper (int fd)
 {
   return close (fd);
 }
 
@@ -276,17 +287,38 @@ int
 octave_ftruncate_wrapper (int fd, off_t sz)
 {
   return ftruncate (fd, sz);
 }
 
 char *
 octave_getcwd_wrapper (char *nm, size_t len)
 {
+#if defined (OCTAVE_USE_WINDOWS_API)
+  wchar_t *tmp = _wgetcwd (NULL, 0);
+  char *retval = NULL;
+
+  if (! tmp)
+    return retval;
+
+  retval = u8_from_wchar (tmp);
+  if (! nm)
+    return retval;
+  else
+    {
+      if (strlen (retval) > len)
+        return NULL;
+      
+      memcpy (nm, retval, len);
+      free (retval);
+      return nm;
+    }
+#else
   return getcwd (nm, len);
+#endif
 }
 
 gid_t
 octave_getegid_wrapper (void)
 {
 #if defined (HAVE_GETEGID)
   return getegid ();
 #else
@@ -376,17 +408,24 @@ int
 octave_pipe_wrapper (int *fd)
 {
   return pipe (fd);
 }
 
 int
 octave_rmdir_wrapper (const char *nm)
 {
+#if defined (OCTAVE_USE_WINDOWS_API)
+  wchar_t *wnm = u8_to_wchar (nm);
+  int status = _wrmdir (wnm);
+  free ((void *) wnm);
+  return status;
+#else
   return rmdir (nm);
+#endif
 }
 
 pid_t
 octave_setsid_wrapper (void)
 {
 #if defined (HAVE_SETSID)
   return setsid ();
 #else
