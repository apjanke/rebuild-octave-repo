# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1468222030 -7200
#      Mon Jul 11 09:27:10 2016 +0200
# Node ID bf5fbf347aafd8e8f808e3ca819569daf357791f
# Parent  79ee6df71b51750382096ffec74f8af555e3d8a9
Avoid segfault with complex matrices using LAPACK (bug #46330).

* liboctave/array/CMatrix.cc: code refactoring.

* liboctave/array/fCMatrix.cc(FloatComplexMatrix::determinant,
FloatComplexMatrix::rcond): compare Matrix norm with Nan.

* liboctave/array/fCMatrix.cc(FloatComplexMatrix::finverse,
FloatComplexMatrix::fsolve): compare Matrix norm with Inf and Nan.

* test/module.mk: Add new test file.

* test/bug-46330.tst: Add regression test case from bug report.  For Windows
this test will be omitted (see bug #39000, Can't override BLAS XERBLA handler).

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -258,17 +258,18 @@ extern "C"
   F77_RET_T
   F77_FUNC (xzlange, XZLANGE) (F77_CONST_CHAR_ARG_DECL,
                                const octave_idx_type&, const octave_idx_type&,
                                const Complex*, const octave_idx_type&,
                                double*, double&
                                F77_CHAR_ARG_LEN_DECL);
 }
 
-static const Complex Complex_NaN_result (octave::numeric_limits<double>::NaN (), octave::numeric_limits<double>::NaN ());
+static const Complex Complex_NaN_result (octave::numeric_limits<double>::NaN (),
+                                         octave::numeric_limits<double>::NaN ());
 
 // Complex Matrix class
 
 ComplexMatrix::ComplexMatrix (const Matrix& a)
   : ComplexNDArray (a)
 {
 }
 
@@ -1038,20 +1039,19 @@ ComplexMatrix::finverse (MatrixType &mat
 
   lwork = static_cast<octave_idx_type> (std::real (z(0)));
   lwork = (lwork <  2 *nc ? 2*nc : lwork);
   z.resize (dim_vector (lwork, 1));
   Complex *pz = z.fortran_vec ();
 
   info = 0;
 
-  // Calculate the norm of the matrix, for later use.
-  double anorm;
-  //if (calc_cond)   // Must always calculate anorm for bug #45577
-  anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
+  double anorm =
+    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
 
   // Work around bug #45577, LAPACK crashes Octave if norm is NaN
   // and bug #46330, segfault with matrices containing Inf & NaN
   if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
     info = -1;
   else
     F77_XFCN (zgetrf, ZGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
@@ -1122,17 +1122,18 @@ ComplexMatrix::inverse (MatrixType &matt
           else
             mattype.mark_as_unsymmetric ();
         }
 
       if (! mattype.is_hermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
       if ((mattype.is_hermitian () || calc_cond) && rcon == 0.)
-        ret = ComplexMatrix (rows (), columns (), Complex (octave::numeric_limits<double>::Inf (), 0.));
+        ret = ComplexMatrix (rows (), columns (),
+                             Complex (octave::numeric_limits<double>::Inf (), 0.));
     }
 
   return ret;
 }
 
 ComplexMatrix
 ComplexMatrix::pseudo_inverse (double tol) const
 {
@@ -1606,20 +1607,18 @@ ComplexMatrix::determinant (MatrixType& 
       Array<octave_idx_type> ipvt (dim_vector (nr, 1));
       octave_idx_type *pipvt = ipvt.fortran_vec ();
 
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate the norm of the matrix, for later use.
-      double anorm = 0;
-      //if (calc_cond)   // Must always calculate anorm for bug #45577
-      anorm = xnorm (*this, 1);
+      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
+      double anorm = xnorm (*this, 1);
 
       // Work around bug #45577, LAPACK crashes Octave if norm is NaN
       if (octave::math::isnan (anorm))
         info = -1;
       else
         F77_XFCN (zgetrf, ZGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       // Throw-away extra info LAPACK gives so as to not change output.
@@ -2198,16 +2197,17 @@ ComplexMatrix::fsolve (MatrixType &matty
                                              nr, b_nc, tmp_data, nr,
                                              pipvt, result, b.rows (), info
                                              F77_CHAR_ARG_LEN (1)));
                 }
               else
                 mattype.mark_as_rectangular ();
             }
         }
+
       if (octave::math::isinf (anorm))
         {
           retval = ComplexMatrix (b.rows (), b.cols (), Complex (0, 0));
           mattype.mark_as_full ();
         }
     }
 
   return retval;
@@ -3728,31 +3728,17 @@ min (const Complex& c, const ComplexMatr
       }
 
   return result;
 }
 
 ComplexMatrix
 min (const ComplexMatrix& m, const Complex& c)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        octave_quit ();
-        result(i, j) = octave::math::min (m(i, j), c);
-      }
-
-  return result;
+  return min (c, m);
 }
 
 ComplexMatrix
 min (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.columns ();
 
@@ -3813,31 +3799,17 @@ max (const Complex& c, const ComplexMatr
       }
 
   return result;
 }
 
 ComplexMatrix
 max (const ComplexMatrix& m, const Complex& c)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (ComplexMatrix);
-
-  ComplexMatrix result (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        octave_quit ();
-        result(i, j) = octave::math::max (m(i, j), c);
-      }
-
-  return result;
+  return max (c, m);
 }
 
 ComplexMatrix
 max (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.columns ();
 
@@ -3857,16 +3829,17 @@ max (const ComplexMatrix& a, const Compl
           octave_quit ();
           if (std::imag (a(i, j)) != 0.0 || std::imag (b(i, j)) != 0.0)
             {
               columns_are_real_only = false;
               break;
             }
         }
 
+      // FIXME: is it so much faster?
       if (columns_are_real_only)
         {
           for (octave_idx_type i = 0; i < nr; i++)
             {
               octave_quit ();
               result(i, j) = octave::math::max (std::real (a(i, j)), std::real (b(i, j)));
             }
         }
@@ -3881,17 +3854,16 @@ max (const ComplexMatrix& a, const Compl
     }
 
   return result;
 }
 
 ComplexMatrix linspace (const ComplexColumnVector& x1,
                         const ComplexColumnVector& x2,
                         octave_idx_type n)
-
 {
   octave_idx_type m = x1.numel ();
 
   if (x2.numel () != m)
     (*current_liboctave_error_handler)
       ("linspace: vectors must be of equal length");
 
   NoAlias<ComplexMatrix> retval;
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1044,23 +1044,26 @@ FloatComplexMatrix::finverse (MatrixType
 
   lwork = static_cast<octave_idx_type> (std::real (z(0)));
   lwork = (lwork <  2 *nc ? 2*nc : lwork);
   z.resize (dim_vector (lwork, 1));
   FloatComplex *pz = z.fortran_vec ();
 
   info = 0;
 
-  // Calculate the norm of the matrix, for later use.
-  float anorm;
-  if (calc_cond)
-    anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
-            .max ();
-
-  F77_XFCN (cgetrf, CGETRF, (nc, nc, tmp_data, nr, pipvt, info));
+  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
+  float anorm =
+    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+
+  // Work around bug #45577, LAPACK crashes Octave if norm is NaN
+  // and bug #46330, segfault with matrices containing Inf & NaN
+  if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
+    info = -1;
+  else
+    F77_XFCN (cgetrf, CGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
     {
       // Now calculate the condition number for non-singular matrix.
@@ -1072,17 +1075,17 @@ FloatComplexMatrix::finverse (MatrixType
                                  nc, tmp_data, nr, anorm,
                                  rcon, pz, prz, zgecon_info
                                  F77_CHAR_ARG_LEN (1)));
 
       if (zgecon_info != 0)
         info = -1;
     }
 
-  if (info == -1 && ! force)
+  if ((info == -1 && ! force) || octave::math::isinf (anorm))
     retval = *this;  // Restore contents.
   else
     {
       octave_idx_type zgetri_info = 0;
 
       F77_XFCN (cgetri, CGETRI, (nc, tmp_data, nr, pipvt,
                                  pz, lwork, zgetri_info));
 
@@ -1606,21 +1609,24 @@ FloatComplexMatrix::determinant (MatrixT
       Array<octave_idx_type> ipvt (dim_vector (nr, 1));
       octave_idx_type *pipvt = ipvt.fortran_vec ();
 
       FloatComplexMatrix atmp = *this;
       FloatComplex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate the norm of the matrix, for later use.
-      float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
-
-      F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
+      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
+      float anorm = xnorm (*this, 1);
+
+      // Work around bug #45577, LAPACK crashes Octave if norm is NaN
+      if (octave::math::isnan (anorm))
+        info = -1;
+      else
+        F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       // Throw-away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
         {
           info = -1;
           retval = FloatComplexDET ();
         }
@@ -1800,17 +1806,21 @@ FloatComplexMatrix::rcond (MatrixType &m
                 anorm = atmp.abs ().sum ().
                         row(static_cast<octave_idx_type>(0)).max ();
 
               Array<FloatComplex> z (dim_vector (2 * nc, 1));
               FloatComplex *pz = z.fortran_vec ();
               Array<float> rz (dim_vector (2 * nc, 1));
               float *prz = rz.fortran_vec ();
 
-              F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
+              // Work around bug #45577, LAPACK crashes Octave if norm is NaN
+              if (octave::math::isnan (anorm))
+                info = -1;
+              else
+                F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
               if (info != 0)
                 {
                   rcon = 0.0;
                   mattype.mark_as_rectangular ();
                 }
               else
                 {
@@ -2132,17 +2142,22 @@ FloatComplexMatrix::fsolve (MatrixType &
           Array<float> rz (dim_vector (2 * nc, 1));
           float *prz = rz.fortran_vec ();
 
           // Calculate the norm of the matrix, for later use.
           if (anorm < 0.)
             anorm = atmp.abs ().sum ().row (static_cast<octave_idx_type>(0))
                     .max ();
 
-          F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
+          // Work around bug #45577, LAPACK crashes Octave if norm is NaN
+          // and bug #46330, segfault with matrices containing Inf & NaN
+          if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
+            info = -2;
+          else
+            F77_XFCN (cgetrf, CGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
           if (info != 0)
             {
               info = -2;
 
               if (sing_handler)
@@ -2192,16 +2207,23 @@ FloatComplexMatrix::fsolve (MatrixType &
                                              nr, b_nc, tmp_data, nr,
                                              pipvt, result, b.rows (), info
                                              F77_CHAR_ARG_LEN (1)));
                 }
               else
                 mattype.mark_as_rectangular ();
             }
         }
+
+      if (octave::math::isinf (anorm))
+        {
+          retval = FloatComplexMatrix (b.rows (), b.cols (),
+                                       FloatComplex (0, 0));
+          mattype.mark_as_full ();
+        }
     }
 
   return retval;
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::solve (MatrixType &typ, const FloatMatrix& b) const
 {
@@ -3737,31 +3759,17 @@ min (const FloatComplex& c, const FloatC
       }
 
   return result;
 }
 
 FloatComplexMatrix
 min (const FloatComplexMatrix& m, const FloatComplex& c)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (FloatComplexMatrix);
-
-  FloatComplexMatrix result (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        octave_quit ();
-        result(i, j) = octave::math::min (m(i, j), c);
-      }
-
-  return result;
+  return min (c, m);
 }
 
 FloatComplexMatrix
 min (const FloatComplexMatrix& a, const FloatComplexMatrix& b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.columns ();
 
@@ -3822,31 +3830,17 @@ max (const FloatComplex& c, const FloatC
       }
 
   return result;
 }
 
 FloatComplexMatrix
 max (const FloatComplexMatrix& m, const FloatComplex& c)
 {
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  EMPTY_RETURN_CHECK (FloatComplexMatrix);
-
-  FloatComplexMatrix result (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        octave_quit ();
-        result(i, j) = octave::math::max (m(i, j), c);
-      }
-
-  return result;
+  return max (c, m);
 }
 
 FloatComplexMatrix
 max (const FloatComplexMatrix& a, const FloatComplexMatrix& b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.columns ();
 
diff --git a/test/bug-46330.tst b/test/bug-46330.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-46330.tst
@@ -0,0 +1,25 @@
+## bug #46330: segfault with matrices containing Inf & NaN
+
+%!warning
+%! a = [-0.46E-01,            0.10681415316, 0.0,   -0.17121680433;
+%!      -0.1675901504661613, -0.515,         1.0,    0.6420630320636088E-02;
+%!       0.1543104215347786, -0.547945,     -0.906, -0.1521689385990753E-02;
+%!       0.0,                 0.0,           1.0,    0.0];
+%!
+%! b = [0.1602300107479095,      0.2111848453E-02;
+%!      0.8196877780963616E-02, -0.3025E-01;
+%!      0.9173594317692437E-01, -0.75283075;
+%!      0.0,                     0.0];
+%!
+%! c = [1.0, 0.0, 0.0, 0.0;
+%!      0.0, 0.0, 0.0, 1.0];
+%!
+%! ## This statement caused an error in LAPACK and eventually caused
+%! ## a segmentation fault.
+%! ## Triggers "warning: matrix singular to machine precision"
+%! ## FIXME: LAPACK errors become fatal crashes on Windows, don't test this
+%! if (ispc ())
+%!   warning ("unable to test for bug #46330 on Windows");
+%! else
+%!   assert (c / (i * Inf * eye (4) - a) * b, zeros (2, 2))
+%! endif
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -5,16 +5,17 @@ test_DISTCLEANFILES =
 test_MAINTAINERCLEANFILES =
 
 TEST_FILES += \
   test/fntests.m \
   test/args.tst \
   test/bug-31371.tst \
   test/bug-38565.tst \
   test/bug-38576.tst \
+  test/bug-46330.tst \
   test/colormaps.tst \
   test/command.tst \
   test/complex.tst \
   test/diag-perm.tst \
   test/error.tst \
   test/eval-catch.tst \
   test/for.tst \
   test/func.tst \
