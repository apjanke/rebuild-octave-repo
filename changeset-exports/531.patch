# HG changeset patch
# User jwe
# Date 774733647 0
#      Wed Jul 20 19:47:27 1994 +0000
# Node ID 1be78be437c79b82ec2a086a4d98fe2e72ab492b
# Parent  c3268005bf98e8439d46fc084d1d7c226f2b3537
[project @ 1994-07-20 19:44:13 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -993,16 +993,19 @@ typedef Array<double> array_type_double;
 typedef Array2<double> array2_type_double;
 typedef DiagArray<double> diag_array_type_double;
 
 #include <Complex.h>
 typedef Array<Complex> array_type_complex;
 typedef Array2<Complex> array2_type_complex;
 typedef DiagArray<Complex> diag_array_type_complex;
 
+#include "tree-const.h"
+typedef Array<tree_constant> array_type_tree_constant;
+
 #elif defined (USER_TYPEDEFS)
 
 // Users can generate their own .o files with their own types, as many
 // times as they like.  USER_TYPEDEFS should be defined to be the name
 // of an include file that contains typdefs for the desired types.
 //
 // For example, if my-types.h contains typedefs for the Array types
 // you are interested in, you might compile this file with the command
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -39,17 +39,17 @@ tree_constant::~tree_constant (void)
 #if defined (MDEBUG)
   cerr << "~tree_constant: rep: " << rep
        << " rep->count: " << rep->count << "\n";
 #endif
 
   if (--rep->count <= 0)
     {
       delete rep;
-      rep = (tree_constant_rep *) NULL;
+      rep = 0;
     }
 }
 
 #if defined (MDEBUG)
 void *
 tree_constant::operator new (size_t size)
 {
   tree_constant *p = ::new tree_constant;
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -216,18 +216,17 @@ tree_matrix::to_return_list (void)
 	{
 	  tree_identifier *id = (tree_identifier *) elem;
 	  if (list == this)
 	    retval = new tree_return_list (id);
 	  else
 	    retval = retval->chain (id);
 	}
       else if (elem->is_index_expression ())
-//	       && (((tree_index_expression *) elem) -> arg_list ()
-//		   == (tree_argument_list *) NULL))
+//	       && ! ((tree_index_expression *) elem) -> arg_list ())
 	{
 	  tree_index_expression *idx_expr = (tree_index_expression *) elem;
 	  if (list == this)
 	    retval = new tree_return_list (idx_expr);
 	  else
 	    retval = retval->chain (idx_expr);
 	}
       else
