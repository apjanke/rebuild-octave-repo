# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1426782328 14400
#      Thu Mar 19 12:25:28 2015 -0400
# Node ID 40b2c4323c1696c4fd4bb2881741cd7e682483d9
# Parent  d20dd211cc890526eeb112b6b6dbc7453bb0b92f
avoid some code duplication in complex comparison functions (bug #44206)

* Array-C.cc (nan_ascending_compare): Don't duplicate operator < here.
(nan_descending_compare): Likewise, for operator >.
* Array-fC.cc (nan_ascending_compare): Likewise.
(nan_descending_compare): Likewise.

diff --git a/liboctave/array/Array-C.cc b/liboctave/array/Array-C.cc
--- a/liboctave/array/Array-C.cc
+++ b/liboctave/array/Array-C.cc
@@ -41,59 +41,23 @@ sort_isnan<Complex> (const Complex& x)
   return xisnan (x);
 }
 
 // Sort Criteria: 1) isnan, 2) magnitude of z, 3) phase of z in range (-pi, pi]
 
 static bool
 nan_ascending_compare (const Complex& x, const Complex& y)
 {
-  if (xisnan (y))
-    return (! xisnan (x));
-
-  double xabs = std::abs (x);
-  double yabs = std::abs (y);
-
-  if (xabs < yabs)
-    return true;
-  else if (xabs == yabs)
-    {
-      double xarg = arg (x);
-      double yarg = arg (y);
-      xarg = (xarg == -M_PI) ? M_PI : xarg;
-      yarg = (yarg == -M_PI) ? M_PI : yarg;
-
-      return xarg < yarg;
-    }
-  else
-    return false;
+  return xisnan (y) ? ! xisnan (x) : x < y;
 }
 
 static bool
 nan_descending_compare (const Complex& x, const Complex& y)
 {
-  if (xisnan (x))
-    return (! xisnan (y));
-
-  double xabs = std::abs (x);
-  double yabs = std::abs (y);
-
-  if (xabs > yabs)
-    return true;
-  else if (xabs == yabs)
-    {
-      double xarg = arg (x);
-      double yarg = arg (y);
-      xarg = (xarg == -M_PI) ? M_PI : xarg;
-      yarg = (yarg == -M_PI) ? M_PI : yarg;
-
-      return xarg > yarg;
-    }
-  else
-    return false;
+  return xisnan (x) ? ! xisnan (y) : x > y;
 }
 
 Array<Complex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<Complex>& a , bool allow_chk)
 {
   Array<Complex>::compare_fcn_type result = 0;
 
   if (allow_chk)
diff --git a/liboctave/array/Array-fC.cc b/liboctave/array/Array-fC.cc
--- a/liboctave/array/Array-fC.cc
+++ b/liboctave/array/Array-fC.cc
@@ -41,61 +41,23 @@ sort_isnan<FloatComplex> (const FloatCom
   return xisnan (x);
 }
 
 // Sort Criteria: 1) isnan, 2) magnitude of z, 3) phase of z in range (-pi, pi]
 
 static bool
 nan_ascending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  if (xisnan (y))
-    return (! xisnan (x));
-
-  float xabs = std::abs (x);
-  float yabs = std::abs (y);
-
-  if (xabs < yabs)
-    return true;
-  else if (xabs == yabs)
-    {
-      float xarg = arg (x);
-      float yarg = arg (y);
-      xarg = (xarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
-                                                  : xarg;
-      yarg = (yarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
-                                                  : yarg;
-      return xarg < yarg;
-    }
-  else
-    return false;
+  return xisnan (y) ? ! xisnan (x) : x < y;
 }
 
 static bool
 nan_descending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  if (xisnan (x))
-    return (! xisnan (y));
-
-  float xabs = std::abs (x);
-  float yabs = std::abs (y);
-
-  if (xabs > yabs)
-    return true;
-  else if (xabs == yabs)
-    {
-      float xarg = arg (x);
-      float yarg = arg (y);
-      xarg = (xarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
-                                                  : xarg;
-      yarg = (yarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
-                                                  : yarg;
-      return xarg > yarg;
-    }
-  else
-    return false;
+  return xisnan (x) ? ! xisnan (y) : x > y;
 }
 
 Array<FloatComplex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<FloatComplex>& a, bool allow_chk)
 {
   Array<FloatComplex>::compare_fcn_type result = 0;
 
   if (allow_chk)
