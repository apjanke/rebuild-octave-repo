# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365306203 14400
#      Sat Apr 06 23:43:23 2013 -0400
# Node ID d4c3736e1e28c63b9df5fd93a80ecf688f15a9a8
# Parent  3207f1d62e742539411f6587aa148a6e68c3c930
dynamically allocate Qt widgets

* main-window.h, main-window.cc: Oops, I guess dynamically allocated
widgets is more consistent with the Qt way.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -51,26 +51,33 @@ along with Octave; see the file COPYING.
 #include "toplev.h"
 #include "version.h"
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "oct-env.h"
 
 main_window::main_window (QWidget *p)
-  : QMainWindow (p), _workspace_model (), status_bar (),
-    command_window (this), history_window (this),
+  : QMainWindow (p),
+    _workspace_model (new workspace_model ()),
+    status_bar (new QStatusBar ()),
+    command_window (new terminal_dock_widget (this)),
+    history_window (new history_dock_widget (this)),
     file_browser_window (new files_dock_widget (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window ()
 {
+  delete _workspace_model;
+  delete status_bar;
+  delete command_window;
+  delete history_window;
   delete file_browser_window;
 
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
   // attached to a non-existent parent.
 
   if (_octave_qt_event_listener)
     delete _octave_qt_event_listener;
@@ -87,17 +94,17 @@ main_window::~main_window ()
     delete _documentation_dock_widget;
 
   delete _workspace_view;
 }
 
 void
 main_window::focus_command_window (void)
 {
-  command_window.focus ();
+  command_window->focus ();
 }
 
 void
 main_window::new_file ()
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_new_file ();
 #endif
@@ -117,17 +124,17 @@ main_window::open_file (const QString& f
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_open_file (file_name);
 #endif
 }
 
 void
 main_window::report_status_message (const QString& statusMessage)
 {
-  status_bar.showMessage (statusMessage, 1000);
+  status_bar->showMessage (statusMessage, 1000);
 }
 
 void
 main_window::handle_save_workspace_request ()
 {
   QString selectedFile =
     QFileDialog::getSaveFileName (this, tr ("Save Workspace As"),
                                   resource_manager::get_home_path ());
@@ -159,17 +166,17 @@ main_window::handle_clear_history_reques
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
 main_window::handle_command_double_clicked (const QString& command)
 {
   emit relay_command_signal (command);
 
-  command_window.focus ();
+  command_window->focus ();
 }
 
 void
 main_window::open_online_documentation_page ()
 {
   QDesktopServices::openUrl (QUrl ("http://gnu.org/software/octave/doc/interpreter"));
 }
 
@@ -565,18 +572,18 @@ main_window::write_settings ()
 }
 
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed ()
 {
-  command_window.connect_visibility_changed ();
-  history_window.connect_visibility_changed ();
+  command_window->connect_visibility_changed ();
+  history_window->connect_visibility_changed ();
   file_browser_window->connect_visibility_changed ();
 
   connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_workspace_visible (bool)));
 
 #ifdef HAVE_QSCINTILLA
   connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_editor_visible (bool)));
@@ -592,20 +599,20 @@ void
 main_window::construct ()
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
 
   // Setup dockable widgets and the status bar.
   _workspace_view           = new workspace_view (this);
 
-  _workspace_view->setModel (&_workspace_model);
+  _workspace_view->setModel (_workspace_model);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
 
-  connect (&_workspace_model, SIGNAL (model_changed ()),
+  connect (_workspace_model, SIGNAL (model_changed ()),
            _workspace_view, SLOT (model_changed ()));
 
   _documentation_dock_widget= new documentation_dock_widget (this);
   _documentation_dock_widget->setStatusTip (tr ("See the documentation for help."));
 
   _current_directory_line_edit = new QLineEdit (this);
   _current_directory_combo_box = new QComboBox (this);
   _current_directory_combo_box->setFixedWidth (current_directory_width);
@@ -950,26 +957,26 @@ main_window::construct ()
            this,                        SLOT   (open_bug_tracker_page ()));
   connect (octave_forge_action,         SIGNAL (triggered ()),
            this,                        SLOT   (open_octave_forge_page ()));
   connect (agora_action,                SIGNAL (triggered ()),
            this,                        SLOT   (open_agora_page ()));
   connect (about_octave_action,         SIGNAL (triggered ()),
            this,                        SLOT   (show_about_octave ()));
   connect (show_command_window_action,  SIGNAL (toggled (bool)),
-           &command_window,             SLOT   (setVisible (bool)));
-  connect (&command_window,             SIGNAL (active_changed (bool)),
+           command_window,              SLOT   (setVisible (bool)));
+  connect (command_window,              SIGNAL (active_changed (bool)),
            show_command_window_action,  SLOT   (setChecked (bool)));
   connect (show_workspace_action,       SIGNAL (toggled (bool)),
            _workspace_view,             SLOT   (setVisible (bool)));
   connect (_workspace_view,             SIGNAL (active_changed (bool)),
            show_workspace_action,       SLOT   (setChecked (bool)));
   connect (show_history_action,         SIGNAL (toggled (bool)),
-           &history_window,             SLOT   (setVisible (bool)));
-  connect (&history_window,             SIGNAL (active_changed (bool)),
+           history_window,              SLOT   (setVisible (bool)));
+  connect (history_window,              SIGNAL (active_changed (bool)),
            show_history_action,         SLOT   (setChecked (bool)));
   connect (show_file_browser_action,    SIGNAL (toggled (bool)),
            file_browser_window,         SLOT   (setVisible (bool)));
   connect (file_browser_window,         SIGNAL (active_changed (bool)),
            show_file_browser_action,    SLOT   (setChecked (bool)));
 #ifdef HAVE_QSCINTILLA
   connect (show_editor_action,          SIGNAL (toggled (bool)),
            _file_editor,                SLOT   (setVisible (bool)));
@@ -977,63 +984,63 @@ main_window::construct ()
            show_editor_action,          SLOT   (setChecked (bool)));
 #endif
   connect (show_documentation_action,   SIGNAL (toggled (bool)),
            _documentation_dock_widget,  SLOT   (setVisible (bool)));
   connect (_documentation_dock_widget,  SIGNAL (active_changed (bool)),
            show_documentation_action,   SLOT   (setChecked (bool)));
 
   connect (command_window_action,       SIGNAL (triggered ()),
-           &command_window,             SLOT (focus ()));
+           command_window,              SLOT (focus ()));
 
   connect (workspace_action,            SIGNAL (triggered ()),
            this,                        SLOT (focus_workspace ()));
   connect (history_action,              SIGNAL (triggered ()),
-           &history_window,             SLOT (focus ()));
+           history_window,              SLOT (focus ()));
   connect (file_browser_action,         SIGNAL (triggered ()),
            file_browser_window,         SLOT (focus ()));
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
   connect (ondisk_documentation_action, SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            _file_editor,                SLOT   (notice_settings (const QSettings *)));
 #endif
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
-           &command_window,             SLOT   (notice_settings (const QSettings *)));
+           command_window,              SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            file_browser_window,         SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            this,                        SLOT   (notice_settings (const QSettings *)));
   connect (file_browser_window,         SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (file_browser_window,         SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (this,                        SIGNAL (relay_command_signal (const QString&)),
-           &command_window,             SLOT   (relay_command (const QString&)));
+           command_window,              SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
   connect (current_directory_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (browse_for_directory ()));
   connect (current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (change_directory_up ()));
   connect (copy_action,                 SIGNAL (triggered()),
-           &command_window,             SLOT   (copyClipboard ()));
+           command_window,              SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
-           &command_window,             SLOT   (pasteClipboard ()));
+           command_window,              SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (set_current_working_directory (QString)));
   connect (_current_directory_line_edit, SIGNAL (returnPressed ()),
            this,                        SLOT (accept_directory_line_edit ()));
   connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
   connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
@@ -1044,36 +1051,36 @@ main_window::construct ()
   connect (_debug_quit,                 SIGNAL (triggered ()),
            this,                        SLOT (debug_quit ()));
 
   connect (clear_command_history,       SIGNAL (triggered ()),
            this,                        SLOT (handle_clear_history_request ()));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
-  addDockWidget (Qt::RightDockWidgetArea, &command_window);
+  addDockWidget (Qt::RightDockWidgetArea, command_window);
   addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
-  tabifyDockWidget (&command_window, _documentation_dock_widget);
+  tabifyDockWidget (command_window, _documentation_dock_widget);
 #ifdef HAVE_QSCINTILLA
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
-  tabifyDockWidget (&command_window, _file_editor);
+  tabifyDockWidget (command_window, _file_editor);
 #endif
   addDockWidget (Qt::LeftDockWidgetArea, file_browser_window);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
-  addDockWidget (Qt::LeftDockWidgetArea, &history_window);
+  addDockWidget (Qt::LeftDockWidgetArea, history_window);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
   if (win_x > 960)
     win_x = 960;
   if (win_y > 720)
     win_y = 720;
   setGeometry (0,0,win_x,win_y);
 
-  setStatusBar (&status_bar);
+  setStatusBar (status_bar);
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_workspace_signal ()),
            this,
            SLOT (update_workspace ()));
 
@@ -1081,25 +1088,25 @@ main_window::construct ()
 
   _octave_qt_link = new octave_qt_link ();
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
            SIGNAL (set_history_signal (const QStringList&)),
-           &history_window, SLOT (set_history (const QStringList&)));
+           history_window, SLOT (set_history (const QStringList&)));
 
   connect (_octave_qt_link,
            SIGNAL (append_history_signal (const QString&)),
-           &history_window, SLOT (append_history (const QString&)));
+           history_window, SLOT (append_history (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (clear_history_signal (void)),
-           &history_window, SLOT (clear_history (void)));
+           history_window, SLOT (clear_history (void)));
 
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
   connect (_octave_qt_link,
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -147,24 +147,24 @@ private:
 
   void debug_step_out_callback (void);
 
   void debug_quit_callback (void);
 
   void exit_callback (void);
 
   // Data models.
-  workspace_model _workspace_model;
+  workspace_model *_workspace_model;
 
   // Toolbars.
-  QStatusBar status_bar;
+  QStatusBar *status_bar;
 
   // Subwindows.
-  terminal_dock_widget command_window;
-  history_dock_widget history_window;
+  terminal_dock_widget *command_window;
+  history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
 
 #ifdef HAVE_QSCINTILLA
   file_editor_interface *   _file_editor;
 #endif
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
