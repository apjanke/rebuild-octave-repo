# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361907094 18000
#      Tue Feb 26 14:31:34 2013 -0500
# Node ID 96a58f197f938f5eb683e055a8b7f2c99ddd4d2b
# Parent  3be725cd195b201af00c41724d557c370fe241e2
allow xunput to be called without buffer argument

* lex.h, lex.ll (lexical_feedback::xunput (char)): New function.
Forward to xunput (char, char*) with yytext as default buffer.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -211,16 +211,18 @@ public:
   int octave_read (char *buf, unsigned int max_size);
 
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
   void xunput (char c, char *buf);
 
+  void xunput (char c);
+
   void fixup_column_count (char *s);
 
   bool inside_any_object_index (void);
 
   int is_keyword_token (const std::string& s);
 
   bool is_variable (const std::string& name);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -251,25 +251,25 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 // Make script and function files start with a bogus token. This makes
 // the parser go down a special path.
 %}
 
 <SCRIPT_FILE_BEGIN>. {
     LEXER_DEBUG ("<SCRIPT_FILE_BEGIN>.");
 
     BEGIN (INITIAL);
-    curr_lexer->xunput (yytext[0], yytext);
+    curr_lexer->xunput (yytext[0]);
     COUNT_TOK_AND_RETURN (SCRIPT_FILE);
   }
 
 <FUNCTION_FILE_BEGIN>. {
     LEXER_DEBUG ("<FUNCTION_FILE_BEGIN>.");
 
     BEGIN (INITIAL);
-    curr_lexer->xunput (yytext[0], yytext);
+    curr_lexer->xunput (yytext[0]);
     COUNT_TOK_AND_RETURN (FUNCTION_FILE);
   }
 
 %{
 // Help and other command-style functions.
 %}
 
 <COMMAND_START>{NL} {
@@ -349,17 +349,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->at_beginning_of_statement = false;
 
     int c = yytext[yyleng-1];
     bool cont_is_spc = (curr_lexer->eat_continuation () != lexical_feedback::NO_WHITESPACE);
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = curr_lexer->handle_close_bracket (spc_gobbled, ']');
 
     if (spc_gobbled)
-      curr_lexer->xunput (' ', yytext);
+      curr_lexer->xunput (' ');
 
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
 
 %{
 // FIXME -- we need to handle block comments here.
 %}
 
@@ -375,17 +375,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->at_beginning_of_statement = false;
 
     int c = yytext[yyleng-1];
     bool cont_is_spc = (curr_lexer->eat_continuation () != lexical_feedback::NO_WHITESPACE);
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = curr_lexer->handle_close_bracket (spc_gobbled, '}');
 
     if (spc_gobbled)
-      curr_lexer->xunput (' ', yytext);
+      curr_lexer->xunput (' ');
 
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
 
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
@@ -404,17 +404,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->at_beginning_of_statement = false;
 
     if (! curr_lexer->looking_at_object_index.front ())
       {
         if ((tmp & lexical_feedback::NEWLINE) == lexical_feedback::NEWLINE)
           {
             curr_lexer->maybe_warn_separator_insert (';');
 
-            curr_lexer->xunput (';', yytext);
+            curr_lexer->xunput (';');
           }
       }
 
     COUNT_TOK_AND_RETURN (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
@@ -441,17 +441,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
         if (! (postfix_un_op || bin_op || sep_op)
             && curr_lexer->nesting_level.is_bracket_or_brace ()
             && curr_lexer->convert_spaces_to_comma)
           {
             if ((tmp & lexical_feedback::NEWLINE) == lexical_feedback::NEWLINE)
               {
                 curr_lexer->maybe_warn_separator_insert (';');
 
-                curr_lexer->xunput (';', yytext);
+                curr_lexer->xunput (';');
               }
 
             curr_lexer->quote_is_transpose = false;
             curr_lexer->convert_spaces_to_comma = true;
             curr_lexer->looking_for_object_index = false;
 
             curr_lexer->maybe_warn_separator_insert (',');
 
@@ -761,17 +761,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 // Gobble comments.
 %}
 
 {CCHAR} {
     LEXER_DEBUG ("{CCHAR}");
 
     curr_lexer->looking_for_object_index = false;
 
-    curr_lexer->xunput (yytext[0], yytext);
+    curr_lexer->xunput (yytext[0]);
 
     bool eof = false;
     int tok = curr_lexer->process_comment (false, eof);
 
     if (eof)
       TOK_RETURN (END_OF_INPUT);
     else if (tok > 0)
       COUNT_TOK_AND_RETURN (tok);
@@ -951,17 +951,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     LEXER_DEBUG (".");
 
-    curr_lexer->xunput (yytext[0], yytext);
+    curr_lexer->xunput (yytext[0]);
 
     int c = curr_lexer->text_yyinput ();
 
     if (c != EOF)
       {
         curr_lexer->current_input_column++;
 
         error ("invalid character '%s' (ASCII %d) near line %d, column %d",
@@ -1492,20 +1492,20 @@ lexical_feedback::octave_read (char *buf
 
 void
 lexical_feedback::do_comma_insert_check (void)
 {
   bool spc_gobbled = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
 
   int c = text_yyinput ();
 
-  xunput (c, yytext);
+  xunput (c);
 
   if (spc_gobbled)
-    xunput (' ', yytext);
+    xunput (' ');
 
   do_comma_insert = (! looking_at_object_index.front ()
                      && bracketflag && c == '[');
 }
 
 int
 lexical_feedback::text_yyinput (void)
 {
@@ -1528,17 +1528,17 @@ lexical_feedback::text_yyinput (void)
         {
           std::cerr << "I: ";
           display_character (c);
           std::cerr << std::endl;
         }
 
       if (c != '\n')
         {
-          xunput (c, yytext);
+          xunput (c);
           c = '\n';
         }
     }
 
   if (c == '\n')
     input_line_number++;
 
   return c;
@@ -1555,16 +1555,22 @@ lexical_feedback::xunput (char c, char *
     }
 
   if (c == '\n')
     input_line_number--;
 
   yyunput (c, buf);
 }
 
+void
+lexical_feedback::xunput (char c)
+{
+  xunput (c, yytext);
+}
+
 // If we read some newlines, we need figure out what column we're
 // really looking at.
 
 void
 lexical_feedback::fixup_column_count (char *s)
 {
   char c;
   while ((c = *s++) != '\0')
@@ -2123,17 +2129,17 @@ bool
 lexical_feedback::next_token_is_sep_op (void)
 {
   bool retval = false;
 
   int c = text_yyinput ();
 
   retval = match_any (c, ",;\n]");
 
-  xunput (c, yytext);
+  xunput (c);
 
   return retval;
 }
 
 // Try to determine if the next token should be treated as a postfix
 // unary operator.  This is ugly, but it seems to do the right thing.
 
 bool
@@ -2146,32 +2152,32 @@ lexical_feedback::next_token_is_postfix_
   if (c0 == '\'' && ! spc_prev)
     {
       un_op = true;
     }
   else if (c0 == '.')
     {
       int c1 = text_yyinput ();
       un_op = (c1 == '\'');
-      xunput (c1, yytext);
+      xunput (c1);
     }
   else if (c0 == '+')
     {
       int c1 = text_yyinput ();
       un_op = (c1 == '+');
-      xunput (c1, yytext);
+      xunput (c1);
     }
   else if (c0 == '-')
     {
       int c1 = text_yyinput ();
       un_op = (c1 == '-');
-      xunput (c1, yytext);
+      xunput (c1);
     }
 
-  xunput (c0, yytext);
+  xunput (c0);
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.
 //
 // This kluge exists because whitespace is not always ignored inside
@@ -2210,17 +2216,17 @@ lexical_feedback::next_token_is_bin_op (
             break;
 
           default:
             // Could be either, spacing matters.
             bin_op = looks_like_bin_op (spc_prev, c1);
             break;
           }
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     case ':':
     case '/':
     case '\\':
     case '^':
       // Always a binary op (may also include /=, \=, and ^=).
@@ -2234,17 +2240,17 @@ lexical_feedback::next_token_is_bin_op (
 
         if (match_any (c1, "+-/\\^*"))
           // Always a binary op (may also include .+=, .-=, ./=, ...).
           bin_op = true;
         else if (! isdigit (c1) && c1 != ' ' && c1 != '\t' && c1 != '.')
           // A structure element reference is a binary op.
           bin_op = true;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     // = == & && | || * **
     case '=':
     case '&':
     case '|':
     case '*':
@@ -2264,25 +2270,25 @@ lexical_feedback::next_token_is_bin_op (
     case '!':
       {
         int c1 = text_yyinput ();
 
         // ~ and ! can be unary ops, so require following =.
         if (c1 == '=')
           bin_op = true;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     default:
       break;
     }
 
-  xunput (c0, yytext);
+  xunput (c0);
 
   return bin_op;
 }
 
 // FIXME -- we need to handle block comments here.
 
 void
 lexical_feedback::scan_for_comments (const char *text)
@@ -2442,17 +2448,17 @@ lexical_feedback::eat_whitespace (void)
             goto done;
         }
     }
 
   if (! comment_buf.empty ())
     octave_comment_buffer::append (comment_buf);
 
  done:
-  xunput (c, yytext);
+  xunput (c);
   current_input_column--;
   return retval;
 }
 
 static inline bool
 looks_like_hex (const char *s, int len)
 {
   return (len > 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'));
@@ -2581,26 +2587,26 @@ lexical_feedback::have_continuation (boo
               beginning_of_comment = false;
             }
           else
             goto cleanup;
           break;
         }
     }
 
-  xunput (c, yytext);
+  xunput (c);
   return false;
 
 cleanup:
 
   std::string s = buf.str ();
 
   int len = s.length ();
   while (len--)
-    xunput (s[len], yytext);
+    xunput (s[len]);
 
   return false;
 }
 
 // We have seen a '.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
 // line character.
 
@@ -2610,22 +2616,22 @@ lexical_feedback::have_ellipsis_continua
   char c1 = text_yyinput ();
   if (c1 == '.')
     {
       char c2 = text_yyinput ();
       if (c2 == '.' && have_continuation (trailing_comments_ok))
         return true;
       else
         {
-          xunput (c2, yytext);
-          xunput (c1, yytext);
+          xunput (c2);
+          xunput (c1);
         }
     }
   else
-    xunput (c1, yytext);
+    xunput (c1);
 
   return false;
 }
 
 // See if we have a continuation line.  If so, eat it and the leading
 // whitespace on the next line.
 
 int
@@ -2634,17 +2640,17 @@ lexical_feedback::eat_continuation (void
   int retval = lexical_feedback::NO_WHITESPACE;
 
   int c = text_yyinput ();
 
   if ((c == '.' && have_ellipsis_continuation ())
       || (c == '\\' && have_continuation ()))
     retval = eat_whitespace ();
   else
-    xunput (c, yytext);
+    xunput (c);
 
   return retval;
 }
 
 int
 lexical_feedback::handle_string (char delim)
 {
   std::ostringstream buf;
@@ -2697,17 +2703,17 @@ lexical_feedback::handle_string (char de
               c = text_yyinput ();
               if (c == delim)
                 {
                   buf << static_cast<char> (c);
                 }
               else
                 {
                   std::string s;
-                  xunput (c, yytext);
+                  xunput (c);
 
                   if (delim == '\'')
                     s = buf.str ();
                   else
                     s = do_string_escapes (buf.str ());
 
                   quote_is_transpose = true;
                   convert_spaces_to_comma = true;
@@ -2745,93 +2751,93 @@ lexical_feedback::next_token_is_assign_o
 
   int c0 = text_yyinput ();
 
   switch (c0)
     {
     case '=':
       {
         int c1 = text_yyinput ();
-        xunput (c1, yytext);
+        xunput (c1);
         if (c1 != '=')
           retval = true;
       }
       break;
 
     case '+':
     case '-':
     case '*':
     case '/':
     case '\\':
     case '&':
     case '|':
       {
         int c1 = text_yyinput ();
-        xunput (c1, yytext);
+        xunput (c1);
         if (c1 == '=')
           retval = true;
       }
       break;
 
     case '.':
       {
         int c1 = text_yyinput ();
         if (match_any (c1, "+-*/\\"))
           {
             int c2 = text_yyinput ();
-            xunput (c2, yytext);
+            xunput (c2);
             if (c2 == '=')
               retval = true;
           }
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     case '>':
       {
         int c1 = text_yyinput ();
         if (c1 == '>')
           {
             int c2 = text_yyinput ();
-            xunput (c2, yytext);
+            xunput (c2);
             if (c2 == '=')
               retval = true;
           }
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     case '<':
       {
         int c1 = text_yyinput ();
         if (c1 == '<')
           {
             int c2 = text_yyinput ();
-            xunput (c2, yytext);
+            xunput (c2);
             if (c2 == '=')
               retval = true;
           }
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     default:
       break;
     }
 
-  xunput (c0, yytext);
+  xunput (c0);
 
   return retval;
 }
 
 bool
 lexical_feedback::next_token_is_index_op (void)
 {
   int c = text_yyinput ();
-  xunput (c, yytext);
+  xunput (c);
   return c == '(' || c == '{';
 }
 
 int
 lexical_feedback::handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
   int retval = bracket_type;
 
@@ -2879,17 +2885,17 @@ lexical_feedback::handle_close_bracket (
           bool postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
           bool sep_op = next_token_is_sep_op ();
 
           if (! (postfix_un_op || bin_op || sep_op))
             {
               maybe_warn_separator_insert (',');
 
-              xunput (',', yytext);
+              xunput (',');
               return retval;
             }
         }
     }
 
   quote_is_transpose = true;
   convert_spaces_to_comma = true;
 
@@ -2905,18 +2911,18 @@ lexical_feedback::maybe_unput_comma (int
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = text_yyinput ();
       int c2 = text_yyinput ();
 
-      xunput (c2, yytext);
-      xunput (c1, yytext);
+      xunput (c2);
+      xunput (c1);
 
       int sep_op = next_token_is_sep_op ();
 
       int dot_op = (c1 == '.'
                     && (isalpha (c2) || isspace (c2) || c2 == '_'));
 
       if (postfix_un_op || bin_op || sep_op || dot_op)
         return;
@@ -2926,17 +2932,17 @@ lexical_feedback::maybe_unput_comma (int
       // If there is no space before the indexing op, we don't insert
       // a comma.
 
       if (index_op && ! spc_gobbled)
         return;
 
       maybe_warn_separator_insert (',');
 
-      xunput (',', yytext);
+      xunput (',');
     }
 }
 
 bool
 lexical_feedback::next_token_can_follow_bin_op (void)
 {
   std::stack<char> buf;
 
@@ -2951,17 +2957,17 @@ lexical_feedback::next_token_can_follow_
 
       if (match_any (c, ",;\n") || (c != ' ' && c != '\t'))
         break;
     }
 
   // Restore input.
   while (! buf.empty ())
     {
-      xunput (buf.top (), yytext);
+      xunput (buf.top ());
 
       buf.pop ();
     }
 
   return (isalnum (c) || match_any (c, "!\"'(-[_{~"));
 }
 
 static bool
@@ -2994,22 +3000,22 @@ lexical_feedback::looks_like_command_arg
         if (c1 == '=')
           {
             int c2 = text_yyinput ();
 
             if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                 && next_token_can_follow_bin_op ())
               retval = false;
 
-            xunput (c2, yytext);
+            xunput (c2);
           }
         else
           retval = false;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     case '(':
     case '{':
       // Indexing.
       retval = false;
       break;
@@ -3049,37 +3055,37 @@ lexical_feedback::looks_like_command_arg
           case '=':
             {
               int c2 = text_yyinput ();
 
               if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                   && next_token_can_follow_bin_op ())
                 retval = false;
 
-              xunput (c2, yytext);
+              xunput (c2);
             }
             break;
           }
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     case ':':
     case '/':
     case '\\':
     case '^':
       {
         int c1 = text_yyinput ();
 
         if (! match_any (c1, ",;\n") && (c1 == ' ' || c1 == '\t')
             && next_token_can_follow_bin_op ())
           retval = false;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     // .+ .- ./ .\ .^ .* .**
     case '.':
       {
         int c1 = text_yyinput ();
 
@@ -3090,34 +3096,34 @@ lexical_feedback::looks_like_command_arg
             if (c2 == '=')
               {
                 int c3 = text_yyinput ();
 
                 if (! match_any (c3, ",;\n") && (c3 == ' ' || c3 == '\t')
                     && next_token_can_follow_bin_op ())
                   retval = false;
 
-                xunput (c3, yytext);
+                xunput (c3);
               }
             else if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                      && next_token_can_follow_bin_op ())
               retval = false;
 
-            xunput (c2, yytext);
+            xunput (c2);
           }
         else if (! match_any (c1, ",;\n")
                  && (! isdigit (c1) && c1 != ' ' && c1 != '\t'
                      && c1 != '.'))
           {
             // Structure reference.  FIXME -- is this a complete check?
 
             retval = false;
           }
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     // & && | || * **
     case '&':
     case '|':
     case '*':
       {
@@ -3126,23 +3132,23 @@ lexical_feedback::looks_like_command_arg
         if (c1 == c0)
           {
             int c2 = text_yyinput ();
 
             if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                 && next_token_can_follow_bin_op ())
               retval = false;
 
-            xunput (c2, yytext);
+            xunput (c2);
           }
         else if (! match_any (c1, ",;\n") && (c1 == ' ' || c1 == '\t')
                  && next_token_can_follow_bin_op ())
           retval = false;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     // < <= > >=
     case '<':
     case '>':
       {
         int c1 = text_yyinput ();
@@ -3150,23 +3156,23 @@ lexical_feedback::looks_like_command_arg
         if (c1 == '=')
           {
             int c2 = text_yyinput ();
 
             if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                 && next_token_can_follow_bin_op ())
               retval = false;
 
-            xunput (c2, yytext);
+            xunput (c2);
           }
         else if (! match_any (c1, ",;\n") && (c1 == ' ' || c1 == '\t')
                  && next_token_can_follow_bin_op ())
           retval = false;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     // ~= !=
     case '~':
     case '!':
       {
         int c1 = text_yyinput ();
@@ -3175,31 +3181,31 @@ lexical_feedback::looks_like_command_arg
         if (c1 == '=')
           {
             int c2 = text_yyinput ();
 
             if (! match_any (c2, ",;\n") && (c2 == ' ' || c2 == '\t')
                 && next_token_can_follow_bin_op ())
               retval = false;
 
-            xunput (c2, yytext);
+            xunput (c2);
           }
         else if (! match_any (c1, ",;\n") && (c1 == ' ' || c1 == '\t')
                  && next_token_can_follow_bin_op ())
           retval = false;
 
-        xunput (c1, yytext);
+        xunput (c1);
       }
       break;
 
     default:
       break;
     }
 
-  xunput (c0, yytext);
+  xunput (c0);
 
   return retval;
 }
 
 int
 lexical_feedback::handle_superclass_identifier (void)
 {
   eat_continuation ();
@@ -3373,23 +3379,23 @@ lexical_feedback::handle_identifier (voi
   // See if we have a plot keyword (title, using, with, or clear).
 
   int c1 = text_yyinput ();
 
   bool next_tok_is_eq = false;
   if (c1 == '=')
     {
       int c2 = text_yyinput ();
-      xunput (c2, yytext);
+      xunput (c2);
 
       if (c2 != '=')
         next_tok_is_eq = true;
     }
 
-  xunput (c1, yytext);
+  xunput (c1);
 
   // Kluge alert.
   //
   // If we are looking at a text style function, set up to gobble its
   // arguments.
   //
   // If the following token is '=', or if we are parsing a function
   // return list or function parameter list, or if we are looking at
