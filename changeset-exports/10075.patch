# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1262946308 -3600
#      Fri Jan 08 11:25:08 2010 +0100
# Node ID 84b0725f4b09ebd5976b8dd677246eab43b85bc0
# Parent  5e2b4b7967cc3334200ac4e2914081eb93ac79ed
return class types by reference in const Array element access functions

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -183,72 +183,46 @@ Array<T>::compute_index (const Array<oct
   else
     (*current_liboctave_error_handler)
       ("Array<T>::compute_index: invalid ra_idxing operation");
 
   return retval;
 }
 
 template <class T>
-T
+T&
 Array<T>::range_error (const char *fcn, octave_idx_type n) const
 {
   (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
-  return T ();
-}
-
-template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type n)
-{
-  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
   static T foo;
   return foo;
 }
 
 template <class T>
-T
+T&
 Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const
 {
   (*current_liboctave_error_handler)
     ("%s (%d, %d): range error", fcn, i, j);
-  return T ();
-}
-
-template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j)
-{
-  (*current_liboctave_error_handler)
-    ("%s (%d, %d): range error", fcn, i, j);
   static T foo;
   return foo;
 }
 
 template <class T>
-T
+T&
 Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const
 {
   (*current_liboctave_error_handler)
     ("%s (%d, %d, %d): range error", fcn, i, j, k);
-  return T ();
-}
-
-template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k)
-{
-  (*current_liboctave_error_handler)
-    ("%s (%d, %d, %d): range error", fcn, i, j, k);
   static T foo;
   return foo;
 }
 
 template <class T>
-T
+T&
 Array<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const
 {
   std::ostringstream buf;
 
   buf << fcn << " (";
 
   octave_idx_type n = ra_idx.length ();
 
@@ -259,41 +233,16 @@ Array<T>::range_error (const char *fcn, 
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
   std::string buf_str = buf.str ();
 
   (*current_liboctave_error_handler) (buf_str.c_str ());
 
-  return T ();
-}
-
-template <class T>
-T&
-Array<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx)
-{
-  std::ostringstream buf;
-
-  buf << fcn << " (";
-
-  octave_idx_type n = ra_idx.length ();
-
-  if (n > 0)
-    buf << ra_idx(0);
-
-  for (octave_idx_type i = 1; i < n; i++)
-    buf << ", " << ra_idx(i);
-
-  buf << "): range error";
-
-  std::string buf_str = buf.str ();
-
-  (*current_liboctave_error_handler) (buf_str.c_str ());
-
   static T foo;
   return foo;
 }
 
 
 template <class T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -106,16 +106,18 @@ public:
           --rep->count;
           rep = new ArrayRep (slice_data, slice_len, true);
           slice_data = rep->data;
         }
     }
 
   typedef T element_type;
 
+  typedef typename ref_param<T>::type crefT;
+
   typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
 				    typename ref_param<T>::type);
 
 protected:
 
   typename Array<T>::ArrayRep *rep;
 
   dim_vector dimensions;
@@ -298,43 +300,38 @@ public:
 
   Array<T> squeeze (void) const;
   
   void chop_trailing_singletons (void) 
   { dimensions.chop_trailing_singletons (); }
   
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
-  T range_error (const char *fcn, octave_idx_type n) const;
-  T& range_error (const char *fcn, octave_idx_type n);
-
-  T range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
-  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j);
-
-  T range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
-  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k);
-
-  T range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
-  T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx);
+  T& range_error (const char *fcn, octave_idx_type n) const;
+  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
+  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
+  T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
 
   // No checking, even for multiple references, ever.
 
   T& xelem (octave_idx_type n) { return slice_data [n]; }
-  T xelem (octave_idx_type n) const { return slice_data [n]; }
+  crefT xelem (octave_idx_type n) const { return slice_data [n]; }
 
   T& xelem (octave_idx_type i, octave_idx_type j) { return xelem (dim1()*j+i); }
-  T xelem (octave_idx_type i, octave_idx_type j) const { return xelem (dim1()*j+i); }
+  crefT xelem (octave_idx_type i, octave_idx_type j) const { return xelem (dim1()*j+i); }
 
-  T& xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return xelem (i, dim2()*k+j); }
-  T xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return xelem (i, dim2()*k+j); }
+  T& xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) 
+    { return xelem (i, dim2()*k+j); }
+  crefT xelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const 
+    { return xelem (i, dim2()*k+j); }
 
   T& xelem (const Array<octave_idx_type>& ra_idx)
     { return xelem (compute_index (ra_idx)); }
 
-  T xelem (const Array<octave_idx_type>& ra_idx) const
+  crefT xelem (const Array<octave_idx_type>& ra_idx) const
     { return xelem (compute_index (ra_idx)); }
 
   // FIXME -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
   T& checkelem (octave_idx_type n)
     {
@@ -393,69 +390,69 @@ public:
   T& operator () (const Array<octave_idx_type>& ra_idx) { return checkelem (ra_idx); }
 #else
   T& operator () (octave_idx_type n) { return elem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j) { return elem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return elem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx) { return elem (ra_idx); }
 #endif
 
-  T checkelem (octave_idx_type n) const
+  crefT checkelem (octave_idx_type n) const
     {
       if (n < 0 || n >= slice_len)
 	return range_error ("T Array<T>::checkelem", n);
       else
 	return xelem (n);
     }
 
-  T checkelem (octave_idx_type i, octave_idx_type j) const
+  crefT checkelem (octave_idx_type i, octave_idx_type j) const
     {
       if (i < 0 || j < 0 || i >= dim1 () || j >= dim2 ())
 	return range_error ("T Array<T>::checkelem", i, j);
       else
 	return elem (dim1()*j+i);
     }
 
-  T checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
+  crefT checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
     {
       if (i < 0 || j < 0 || k < 0 || i >= dim1 () || j >= dim2 () || k >= dim3 ())
 	return range_error ("T Array<T>::checkelem", i, j, k);
       else
 	return Array<T>::elem (i, Array<T>::dim1()*k+j);
     }
 
-  T checkelem (const Array<octave_idx_type>& ra_idx) const
+  crefT checkelem (const Array<octave_idx_type>& ra_idx) const
     {
       octave_idx_type i = compute_index (ra_idx);
 
       if (i < 0)
 	return range_error ("T Array<T>::checkelem", ra_idx);
       else
 	return Array<T>::elem (i);
     }
 
-  T elem (octave_idx_type n) const { return xelem (n); }
+  crefT elem (octave_idx_type n) const { return xelem (n); }
 
-  T elem (octave_idx_type i, octave_idx_type j) const { return elem (dim1()*j+i); }
+  crefT elem (octave_idx_type i, octave_idx_type j) const { return elem (dim1()*j+i); }
 
-  T elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, dim2()*k+j); }
+  crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, dim2()*k+j); }
 
-  T elem (const Array<octave_idx_type>& ra_idx) const
+  crefT elem (const Array<octave_idx_type>& ra_idx) const
     { return Array<T>::elem (compute_index (ra_idx)); }
 
 #if defined (BOUNDS_CHECKING)
-  T operator () (octave_idx_type n) const { return checkelem (n); }
-  T operator () (octave_idx_type i, octave_idx_type j) const { return checkelem (i, j); }
-  T operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return checkelem (i, j, k); }
-  T operator () (const Array<octave_idx_type>& ra_idx) const { return checkelem (ra_idx); }
+  crefT operator () (octave_idx_type n) const { return checkelem (n); }
+  crefT operator () (octave_idx_type i, octave_idx_type j) const { return checkelem (i, j); }
+  crefT operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return checkelem (i, j, k); }
+  crefT operator () (const Array<octave_idx_type>& ra_idx) const { return checkelem (ra_idx); }
 #else
-  T operator () (octave_idx_type n) const { return elem (n); }
-  T operator () (octave_idx_type i, octave_idx_type j) const { return elem (i, j); }
-  T operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, j, k); }
-  T operator () (const Array<octave_idx_type>& ra_idx) const { return elem (ra_idx); }
+  crefT operator () (octave_idx_type n) const { return elem (n); }
+  crefT operator () (octave_idx_type i, octave_idx_type j) const { return elem (i, j); }
+  crefT operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, j, k); }
+  crefT operator () (const Array<octave_idx_type>& ra_idx) const { return elem (ra_idx); }
 #endif
 
   // Fast extractors. All of these produce shallow copies.
   // Warning: none of these do check bounds, unless BOUNDS_CHECKING is on!
 
   // Extract column: A(:,k+1).
   Array<T> column (octave_idx_type k) const;
   // Extract page: A(:,:,k+1).
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-01-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array<T>::crefT): New helper typedef.
+	(Array<T>::elem const, Array<T>::xelem const, 
+	Array<T>::checkelem const, Array<T>::operator () const): Return crefT.
+	(Array<T>::range_error const): Remove overloads.
+	* Array.cc (Array<T>::range_error const): Remove overloads.
+
 2010-01-07  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.cc (octave_time::stamp): Assume gettimeofday is
 	available and that it takes two arguments.
 
 2010-01-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-utils.cc (octave_fgets (FILE *, bool&)): Add OCTAVE_QUIT at the
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2010-01-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-obj.h (octave_value_list::operator () const,
+	octave_value_list::elem const): Return const octave_value&.
+	* ov.cc (octave_value::function_value,
+	octave_value::user_function_value, octave_value::user_script_value,
+	octave_value::user_code_value, octave_value::fcn_handle_value,
+	octave_value::fcn_inline_value): Declare as const.
+	* ov.h: Likewise.
+	* ov-base.h (octave_value::function_value const): Remove overload.
+	* ov-usr-fcn.h (octave_user_function::function_value const): Likewise.
+	* ov-builtin.h (octave_builtin::function_value const): Likewise.
+	* ov-builtin.h (octave_builtin::function_value const): Likewise.
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Take a non-const copy prior to
+	calling non-const functions.
+
+
 2010-01-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/strfind.cc (qs_replace): New function.
 	(Fstrrep): Use it here. Allow S to be a cellstr.
 
 2010-01-07  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (cputime): Eliminate Windows-specific code.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -440,17 +440,20 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
           std::string type;
           std::list<octave_value_list> idx;
           decode_subscripts ("subsref", subs, type, idx);
 
           if (! error_state)
             {
               Cell result (f_args.dims ());
               for (octave_idx_type count = 0; count < k && ! error_state; count++)
-                result(count) = f_args.elem (count).subsref (type, idx);
+                {
+                  octave_value tmp = f_args.elem (count);
+                  result(count) = tmp.subsref (type, idx);
+                }
 
               retval(0) = result;
             }
         }
       else
         {
           if (! valid_identifier (name))
             {
@@ -1320,17 +1323,17 @@ mat2cell (reshape(1:16,4,4),[3,1],[3,1])
 		  
 		      octave_idx_type idx = ii / n;
 		      lst (j) = Range((idx == 0 ? 1. : dimargs(idx-1,j)+1.),
 				      dimargs(idx,j));
 		      ii = ii % n;
 		      if (j != 0)
 			n /= new_dv(j-1);
 		    }
-		  ret(i) = args(0).do_index_op(lst, 0);
+		  ret(i) = octave_value(args(0)).do_index_op(lst, 0);
 		  if (error_state)
 		    break;
 		}
 	  
 	      if (!error_state)
 		retval = ret;
 	    }
 	}
@@ -1369,17 +1372,17 @@ mat2cell (reshape(1:16,4,4),[3,1],[3,1])
 		lst (i) = Range (1., static_cast<double>(dv(i)));
 	      
 	      double idx = 0.;
 	      for (octave_idx_type i = 0; i <  new_dv(0); i++)
 		{
 		  OCTAVE_QUIT;
 
 		  lst(0) = Range(idx + 1., idx + d(i));
-		  ret(i) = args(0).do_index_op(lst, 0);
+		  ret(i) = octave_value(args(0)).do_index_op(lst, 0);
 		  idx += d(i);
 		  if (error_state)
 		    break;
 		}
 	  
 	      if (!error_state)
 		retval = ret;
 	    }
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -101,17 +101,17 @@ public:
   Array<octave_value> array_value (void) const { return data; }
 
   Cell cell_value (void) const { return array_value (); }
 
   // Assignment will resize on range errors.
 
   octave_value& operator () (octave_idx_type n) { return elem (n); }
 
-  octave_value operator () (octave_idx_type n) const { return elem (n); }
+  const octave_value& operator () (octave_idx_type n) const { return elem (n); }
 
   octave_idx_type length (void) const { return data.length (); }
 
   bool empty (void) const { return length () == 0; }
 
   void resize (octave_idx_type n) { data.resize (n); }
 
   void resize (octave_idx_type n, const octave_value& val)
@@ -160,17 +160,17 @@ private:
   octave_value& elem (octave_idx_type n)
     {
       if (n >= length ())
 	resize (n + 1);
 
       return data(n);
     }
 
-  octave_value elem (octave_idx_type n) const
+  const octave_value& elem (octave_idx_type n) const
     { return data(n); }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -923,27 +923,16 @@ octave_base_value::function_value (bool 
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
   return retval;
 }
 
-const octave_function *
-octave_base_value::function_value (bool silent) const
-{
-  const octave_function *retval = 0;
-
-  if (! silent)
-    gripe_wrong_type_arg ("octave_base_value::function_value()",
-			  type_name ());
-  return retval;
-}
-
 octave_user_function *
 octave_base_value::user_function_value (bool silent)
 {
   octave_user_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::user_function_value()",
 			  type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -537,18 +537,16 @@ public:
   virtual octave_base_value *find_parent_class (const std::string&)
     { return 0; }
 
   virtual octave_base_value *unique_parent_class (const std::string&)
     { return 0; }
 
   virtual octave_function *function_value (bool silent = false);
 
-  virtual const octave_function *function_value (bool silent = false) const;
-
   virtual octave_user_function *user_function_value (bool silent = false);
 
   virtual octave_user_script *user_script_value (bool silent = false);
 
   virtual octave_user_code *user_code_value (bool silent = false);
 
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -58,18 +58,16 @@ public:
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_function *function_value (bool = false) { return this; }
 
-  const octave_function *function_value (bool = false) const { return this; }
-
   bool is_builtin_function (void) const { return true; }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
 protected:
 
   // A pointer to the actual function.
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -89,19 +89,16 @@ public:
 
   bool is_overloaded (void) const { return disp.get () && ! disp->empty (); }
 
   dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
 
   octave_function *function_value (bool = false)
     { return fcn.function_value (); }
 
-  const octave_function *function_value (bool = false) const
-    { return fcn.function_value (); }
-
   octave_user_function *user_function_value (bool = false)
     { return fcn.user_function_value (); }
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
 
   octave_value fcn_val (void) const { return fcn; }
 
   std::string fcn_name (void) const { return nm; }
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -86,18 +86,16 @@ public:
 
   octave_user_script (const std::string& fnm, const std::string& nm,
 		      const std::string& ds = std::string ());
 
   ~octave_user_script (void);
 
   octave_function *function_value (bool = false) { return this; }
 
-  const octave_function *function_value (bool = false) const { return this; }
-
   octave_user_script *user_script_value (bool = false) { return this; }
 
   octave_user_code *user_code_value (bool = false) { return this; }
 
   // Scripts and user functions are both considered "scripts" because
   // they are written in Octave's scripting language.
 
   bool is_user_script (void) const { return true; }
@@ -176,18 +174,16 @@ public:
 			tree_parameter_list *pl = 0,
 			tree_parameter_list *rl = 0,
 			tree_statement_list *cl = 0);
 
   ~octave_user_function (void);
 
   octave_function *function_value (bool = false) { return this; }
 
-  const octave_function *function_value (bool = false) const { return this; }
-
   octave_user_function *user_function_value (bool = false) { return this; }
 
   octave_user_code *user_code_value (bool = false) { return this; }
 
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1419,53 +1419,47 @@ octave_value::idx_type_value (bool req_i
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
 octave_function *
-octave_value::function_value (bool silent)
-{
-  return rep->function_value (silent);
-}
-
-const octave_function *
 octave_value::function_value (bool silent) const
 {
   return rep->function_value (silent);
 }
 
 octave_user_function *
-octave_value::user_function_value (bool silent)
+octave_value::user_function_value (bool silent) const
 {
   return rep->user_function_value (silent);
 }
 
 octave_user_script *
-octave_value::user_script_value (bool silent)
+octave_value::user_script_value (bool silent) const
 {
   return rep->user_script_value (silent);
 }
 
 octave_user_code *
-octave_value::user_code_value (bool silent)
+octave_value::user_code_value (bool silent) const
 {
   return rep->user_code_value (silent);
 }
 
 octave_fcn_handle *
-octave_value::fcn_handle_value (bool silent)
+octave_value::fcn_handle_value (bool silent) const
 {
   return rep->fcn_handle_value (silent);
 }
 
 octave_fcn_inline *
-octave_value::fcn_inline_value (bool silent)
+octave_value::fcn_inline_value (bool silent) const
 {
   return rep->fcn_inline_value (silent);
 }
 
 octave_value_list
 octave_value::list_value (void) const
 {
   return rep->list_value ();
@@ -2740,17 +2734,20 @@ Note that this is the same as writing @c
   if (args.length () == 2)
     {
       std::string type;
       std::list<octave_value_list> idx;
 
       decode_subscripts ("subsref", args(1), type, idx);
 
       if (! error_state)
-	retval = args(0).subsref (type, idx, nargout);
+        {
+          octave_value tmp = args(0);
+          retval = tmp.subsref (type, idx, nargout);
+        }
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (subsasgn, args, ,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -855,29 +855,27 @@ public:
 
   string_vector parent_class_names (void) const
     { return rep->parent_class_names (); }
 
   octave_base_value *
   find_parent_class (const std::string& parent_class_name)
     { return rep->find_parent_class (parent_class_name); }
 
-  octave_function *function_value (bool silent = false);
+  octave_function *function_value (bool silent = false) const;
 
-  const octave_function *function_value (bool silent = false) const;
+  octave_user_function *user_function_value (bool silent = false) const;
 
-  octave_user_function *user_function_value (bool silent = false);
+  octave_user_script *user_script_value (bool silent = false) const;
 
-  octave_user_script *user_script_value (bool silent = false);
-
-  octave_user_code *user_code_value (bool silent = false);
+  octave_user_code *user_code_value (bool silent = false) const;
 
-  octave_fcn_handle *fcn_handle_value (bool silent = false);
+  octave_fcn_handle *fcn_handle_value (bool silent = false) const;
 
-  octave_fcn_inline *fcn_inline_value (bool silent = false);
+  octave_fcn_inline *fcn_inline_value (bool silent = false) const;
 
   octave_value_list list_value (void) const;
 
   ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
 
   ComplexColumnVector
   complex_column_vector_value (bool frc_str_conv = false,
