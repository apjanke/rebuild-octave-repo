# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1338848327 18000
#      Mon Jun 04 17:18:47 2012 -0500
# Node ID 32deb562ae77086ae6b4bc55c800fd69b5d36159
# Parent  5801e031a3b5eff3c1b8889e04269a224e3602a5
Allow for construction of ranges during jit

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -125,16 +125,23 @@ octave_jit_binary_any_any (octave_value:
   octave_value olhs (lhs);
   octave_value orhs (rhs);
   octave_value result = do_binary_op (op, olhs, orhs);
   octave_base_value *rep = result.internal_rep ();
   rep->grab ();
   return rep;
 }
 
+extern "C" octave_idx_type
+octave_jit_compute_nelem (double base, double limit, double inc)
+{
+  Range rng = Range (base, limit, inc);
+  return rng.nelem (); 
+}
+
 extern "C" void
 octave_jit_release_any (octave_base_value *obv)
 {
   obv->release ();
 }
 
 extern "C" octave_base_value *
 octave_jit_grab_any (octave_base_value *obv)
@@ -455,16 +462,47 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   fn = create_function ("octave_logically_true_bool", boolean, boolean);
   body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
   builder.CreateRet (fn->arg_begin ());
   llvm::verifyFunction (*fn);
   logically_true.add_overload (fn, false, false, boolean, boolean);
   logically_true.stash_name ("logically_true");
 
+  // make_range
+  // FIXME: May be benificial to implement all in LLVM
+  make_range_fn.stash_name ("make_range");
+  llvm::Function *compute_nelem
+    = create_function ("octave_jit_compute_nelem", index, scalar, scalar, scalar);
+  engine->addGlobalMapping (compute_nelem,
+                            reinterpret_cast<void*> (&octave_jit_compute_nelem));
+
+  fn = create_function ("octave_jit_make_range", range, scalar, scalar, scalar);
+  body = llvm::BasicBlock::Create (context, "body", fn);
+  builder.SetInsertPoint (body);
+  {
+    llvm::Function::arg_iterator args = fn->arg_begin ();
+    llvm::Value *base = args;
+    llvm::Value *limit = ++args;
+    llvm::Value *inc = ++args;
+    llvm::Value *nelem = builder.CreateCall3 (compute_nelem, base, limit, inc);
+
+    llvm::Value *dzero = llvm::ConstantFP::get (dbl, 0);
+    llvm::Value *izero = llvm::ConstantInt::get (index_t, 0);
+    llvm::Value *rng = llvm::ConstantStruct::get (range_t, dzero, dzero, dzero,
+                                                  izero, NULL);
+    rng = builder.CreateInsertValue (rng, base, 0);
+    rng = builder.CreateInsertValue (rng, limit, 1);
+    rng = builder.CreateInsertValue (rng, inc, 2);
+    rng = builder.CreateInsertValue (rng, nelem, 3);
+    builder.CreateRet (rng);
+  }
+  llvm::verifyFunction (*fn);
+  make_range_fn.add_overload (fn, false, false, range, scalar, scalar, scalar);
+
   casts[any->type_id ()].stash_name ("(any)");
   casts[scalar->type_id ()].stash_name ("(scalar)");
 
   // cast any <- scalar
   fn = create_function ("octave_jit_cast_any_scalar", any, scalar);
   engine->addGlobalMapping (fn, reinterpret_cast<void*> (&octave_jit_cast_any_scalar));
   casts[any->type_id ()].add_overload (fn, false, false, any, scalar);
 
@@ -1053,16 +1091,18 @@ jit_convert::jit_convert (llvm::Module *
        
     {
       jit_variable *var = iter->second;
       const std::string& name = var->name ();
       if (name.size () && name[0] != '#')
         final_block->append (create<jit_store_argument> (var));
     }
 
+  print_blocks ("octave jit ir");
+
   construct_ssa (final_block);
 
   // initialize the worklist to instructions derived from constants
   for (std::list<jit_value *>::iterator iter = constants.begin ();
        iter != constants.end (); ++iter)
     append_users (*iter);
 
   // FIXME: Describe algorithm here
@@ -1143,19 +1183,35 @@ jit_convert::visit_binary_expression (tr
 void
 jit_convert::visit_break_command (tree_break_command&)
 {
   breaks.push_back (block);
   breaking = true;
 }
 
 void
-jit_convert::visit_colon_expression (tree_colon_expression&)
+jit_convert::visit_colon_expression (tree_colon_expression& expr)
 {
-  fail ();
+  // in the futher we need to add support for classes and deal with rvalues
+  jit_instruction *base = visit (expr.base ());
+  jit_instruction *limit = visit (expr.limit ());
+  jit_instruction *increment;
+  tree_expression *tinc = expr.increment ();
+
+  if (tinc)
+    increment = visit (tinc);
+  else
+    {
+      increment = create<jit_const_scalar> (1);
+      block->append (increment);
+    }
+
+  result = block->append (create<jit_call> (jit_typeinfo::make_range, base,
+                                            limit, increment));
+                                            
 }
 
 void
 jit_convert::visit_continue_command (tree_continue_command&)
 {
   continues.push_back (block);
   breaking = true;
 }
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -90,18 +90,16 @@ namespace llvm
 class octave_base_value;
 class octave_value;
 class tree;
 
 // jit_range is compatable with the llvm range structure
 struct
 jit_range
 {
-  jit_range (void) {}
-
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
     inc (from.inc ()), nelem (from.nelem ())
     {}
 
   operator Range () const
   {
     return Range (base, limit, inc);
   }
@@ -177,16 +175,26 @@ public:
     overload (llvm::Function *f, bool e, bool s, jit_type *r, jit_type *arg0,
               jit_type *arg1) : function (f), can_error (e), side_effects (s),
                                 result (r), arguments (2)
     {
       arguments[0] = arg0;
       arguments[1] = arg1;
     }
 
+    overload (llvm::Function *f, bool e, bool s, jit_type *r, jit_type *arg0,
+              jit_type *arg1, jit_type *arg2) : function (f), can_error (e),
+                                                side_effects (s), result (r),
+                                                arguments (3)
+    {
+      arguments[0] = arg0;
+      arguments[1] = arg1;
+      arguments[2] = arg2;
+    }
+
     llvm::Function *function;
     bool can_error;
     bool side_effects;
     jit_type *result;
     std::vector<jit_type*> arguments;
   };
 
   void add_overload (const overload& func)
@@ -202,16 +210,23 @@ public:
 
   void add_overload (llvm::Function *f, bool e, bool s, jit_type *r, jit_type *arg0,
                      jit_type *arg1)
   {
     overload ol (f, e, s, r, arg0, arg1);
     add_overload (ol);
   }
 
+  void add_overload (llvm::Function *f, bool e, bool s, jit_type *r, jit_type *arg0,
+                     jit_type *arg1, jit_type *arg2)
+  {
+    overload ol (f, e, s, r, arg0, arg1, arg2);
+    add_overload (ol);
+  }
+
   void add_overload (const overload& func,
                      const std::vector<jit_type*>& args);
 
   const overload& get_overload (const std::vector<jit_type *>& types) const;
 
   const overload& get_overload (jit_type *arg0) const
   {
     std::vector<jit_type *> types (1);
@@ -315,16 +330,21 @@ public:
     return instance->for_check_fn;
   }
 
   static const jit_function& for_index (void)
   {
     return instance->for_index_fn;
   }
 
+  static const jit_function& make_range (void)
+  {
+    return instance->make_range_fn;
+  }
+
   static const jit_function& cast (jit_type *result)
   {
     return instance->do_cast (result);
   }
 
   static const jit_function::overload& cast (jit_type *to, jit_type *from)
   {
     return instance->do_cast (to, from);
@@ -479,16 +499,17 @@ private:
   std::vector<jit_function> binary_ops;
   jit_function grab_fn;
   jit_function release_fn;
   jit_function print_fn;
   jit_function for_init_fn;
   jit_function for_check_fn;
   jit_function for_index_fn;
   jit_function logically_true;
+  jit_function make_range_fn;
 
   // type id -> cast function TO that type
   std::vector<jit_function> casts;
 
   // type id -> identity function
   std::vector<llvm::Function *> identities;
 };
 
@@ -771,16 +792,27 @@ public:
     : already_infered (3, reinterpret_cast<jit_type *>(0)), arguments (3), 
       id (next_id ()), mparent (0)
   {
     stash_argument (0, arg0);
     stash_argument (1, arg1);
     stash_argument (2, arg2);
   }
 
+  jit_instruction (jit_value *arg0, jit_value *arg1, jit_value *arg2,
+                   jit_value *arg3)
+    : already_infered (3, reinterpret_cast<jit_type *>(0)), arguments (4), 
+      id (next_id ()), mparent (0)
+  {
+    stash_argument (0, arg0);
+    stash_argument (1, arg1);
+    stash_argument (2, arg2);
+    stash_argument (3, arg3);
+  }
+
   static void reset_ids (void)
   {
     next_id (true);
   }
 
   jit_value *argument (size_t i) const
   {
     return arguments[i].value ();
@@ -1436,16 +1468,25 @@ public:
   jit_call (const jit_function& afunction,
             jit_value *arg0, jit_value *arg1) : jit_instruction (arg0, arg1),
                                                 mfunction (afunction) {}
 
   jit_call (const jit_function& (*afunction) (void),
             jit_value *arg0, jit_value *arg1) : jit_instruction (arg0, arg1),
                                                 mfunction (afunction ()) {}
 
+  jit_call (const jit_function& (*afunction) (void),
+            jit_value *arg0, jit_value *arg1, jit_value *arg2)
+    : jit_instruction (arg0, arg1, arg2), mfunction (afunction ()) {}
+
+  jit_call (const jit_function& (*afunction) (void),
+            jit_value *arg0, jit_value *arg1, jit_value *arg2, jit_value *arg3)
+    : jit_instruction (arg0, arg1, arg2, arg3), mfunction (afunction ()) {}
+                                                
+
   const jit_function& function (void) const { return mfunction; }
 
   bool has_side_effects (void) const
   {
     return overload ().side_effects;
   }
 
   const jit_function::overload& overload (void) const
@@ -1717,16 +1758,26 @@ public:
 
   template <typename T, typename ARG0, typename ARG1, typename ARG2>
   T *create (const ARG0& arg0, const ARG1& arg1, const ARG2& arg2)
   {
     T *ret = new T(arg0, arg1, arg2);
     track_value (ret);
     return ret;
   }
+
+  template <typename T, typename ARG0, typename ARG1, typename ARG2,
+            typename ARG3>
+  T *create (const ARG0& arg0, const ARG1& arg1, const ARG2& arg2,
+             const ARG3& arg3)
+  {
+    T *ret = new T(arg0, arg1, arg2, arg3);
+    track_value (ret);
+    return ret;
+  }
 private:
   typedef std::list<jit_block *> block_list;
   typedef block_list::iterator block_iterator;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 
   // used instead of return values from visit_* functions
