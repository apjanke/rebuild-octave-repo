# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377128533 25200
#      Wed Aug 21 16:42:13 2013 -0700
# Node ID 09543e9c8f40e65cf828fec1ae3a4d9826e8d897
# Parent  ab71b9829752ebe9896b34ccd1cb3b46a6be1006
Use explicit form of end (endif, endfor, etc.) in core m-files.

* scripts/general/interp1.m, scripts/image/rgb2ind.m,
scripts/plot/__gnuplot_drawnow__.m, scripts/plot/private/__ezplot__.m,
scripts/plot/private/__go_draw_axes__.m, scripts/special-matrix/gallery.m,
scripts/strings/strjoin.m, scripts/testfun/assert.m, scripts/ui/questdlg.m:
Use explicit form of end (endif, endfor, etc.) in core m-files.

diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -182,25 +182,25 @@ function yi = interp1 (x, y, varargin)
   endif
 
   if (isempty (rightcontinuous))
     ## If not specified, set the continuity condition
     if (x(end) < x(1))
       rightcontinuous = false;
     else
       rightcontinuous = true;
-    end
+    endif
   endif
 
   if ((rightcontinuous && (x(end) < x(1)))
       || (~ rightcontinuous && (x(end) > x(1))))
     ## Switch between left-continuous and right-continuous
     x = flipud (x);
     y = flipud (y);
-  end
+  endif
 
   starmethod = method(1) == "*";
 
   if (starmethod)
     dx = x(2) - x(1);
   else
     jumps = x(1:end-1) == x(2:end);
     have_jumps = any (jumps);
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -140,17 +140,17 @@ function [x, map] = rgb2ind (varargin)
       optionstr = sprintf ("-map %s", fnmap);
       
     endif
   
     ## If image is an ND array, convert it to a tiled 2D image
     ## before processing it with Graphicsmagick
     if (numel (sz) > 3)
      rgb = reshape (rgb, [prod(sz(1:end-2)), sz(end-1), 3]);
-    end
+    endif
 
     ## Prepare the Graphicsmagick dithering option
     if (strcmp (dither_option, "nodither"))
       ditherstr = "+dither";
     elseif (strcmp (dither_option, "dither"))
       ditherstr = "-dither";
     endif
       
diff --git a/scripts/plot/__gnuplot_drawnow__.m b/scripts/plot/__gnuplot_drawnow__.m
--- a/scripts/plot/__gnuplot_drawnow__.m
+++ b/scripts/plot/__gnuplot_drawnow__.m
@@ -297,17 +297,17 @@ function enhanced = gnuplot_set_term (pl
       ## If "set termoption dashed" isn't available add "dashed" option
       ## to the "set terminal ..." command, if it is supported.
       if (any (strcmp (term, {"aqua", "cgm", "eepic", "emf", "epslatex", ...
                               "fig", "pcl5", "mp", "next", "openstep", "pdf", ...
                               "pdfcairo", "pngcairo", "postscript", ...
                               "pslatex", "pstext", "svg", "tgif", "x11"})))
         term_str = [term_str " dashed"];
       endif
-    end
+    endif
     if (any (strcmp (term, {"aqua", "wxt"})))
       term_str = [term_str, " ", "dashlength 1"];
     elseif (any (strcmp (term, {"epslatex", "postscript", "pslatex"})))
       term_str = [term_str, " ", "dashlength 2"];
     endif
 
     ## Work around the gnuplot feature of growing the x11 window and
     ## flickering window (x11, windows, & wxt) when the mouse and
diff --git a/scripts/plot/private/__ezplot__.m b/scripts/plot/private/__ezplot__.m
--- a/scripts/plot/private/__ezplot__.m
+++ b/scripts/plot/private/__ezplot__.m
@@ -415,17 +415,17 @@ function [h, needusage] = __ezplot__ (pl
             valid_domain = find_valid_domain (X, Y, Z);
             domain_ok = isequal (domain, valid_domain);
             domain = valid_domain;
             auto_domain_done = true;  # ensures only 1 round of do loop done
           else
             if (! auto_domain_done)
               domain = find_valid_domain (X, Y, Z);
             endif
-          end
+          endif
         endif
       endif
     endif
   until (domain_ok)
 
   ## Now, actually call the correct plot function with valid data and domain.
   oldfig = [];
   if (! isempty (hax))
diff --git a/scripts/plot/private/__go_draw_axes__.m b/scripts/plot/private/__go_draw_axes__.m
--- a/scripts/plot/private/__go_draw_axes__.m
+++ b/scripts/plot/private/__go_draw_axes__.m
@@ -437,23 +437,23 @@ function __go_draw_axes__ (h, plot_strea
   ximg_data_idx = 0;
 
   while (! isempty (kids))
 
     obj = get (kids(end));
 
     if (isfield (obj, "xdata"))
       obj.xdata = double (obj.xdata);
-    end
+    endif
     if (isfield (obj, "ydata"))
       obj.ydata = double (obj.ydata);
-    end
+    endif
     if (isfield (obj, "zdata"))
       obj.zdata = double (obj.zdata);
-    end
+    endif
 
     if (isfield (obj, "units"))
       units = obj.units;
       unwind_protect
         set (kids(end), "units", "data");
         obj = get (kids(end));
       unwind_protect_cleanup
         set (kids(end), "units", units);
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -1944,17 +1944,17 @@ function Q = orthog (n, k = 1)
       Q = exp (m'*m*2*pi* sqrt (-1) / n) / sqrt (n);
 
     case (4)
       ## Helmert matrix
       Q = tril (ones (n));
       Q(1,2:n) = ones (1, n-1);
       for i = 2:n
         Q(i,i) = -(i-1);
-      end
+      endfor
       Q = diag (sqrt ([n 1:n-1] .* [1:n])) \ Q;
 
     case (5)
       ## Hartley matrix
       m = (0:n-1)'*(0:n-1) * (2*pi/n);
       Q = (cos (m) + sin (m)) / sqrt (n);
 
     case (-1)
@@ -2212,18 +2212,18 @@ function A = randsvd (n, kappa = sqrt (1
   m = n(1);
   n = n(end);
   p = min ([m n]);
 
   ## If A will be a vector
   if (p == 1)
     A = randn (m, n);
     A = A / norm (A);
-    return
-  end
+    return;
+  endif
 
   ##  Set up vector sigma of singular values.
   switch (abs (mode))
     case (1)
       sigma = ones (p, 1) ./ kappa;
       sigma(1) = 1;
     case (2)
       sigma = ones (p, 1);
@@ -2239,31 +2239,31 @@ function A = randsvd (n, kappa = sqrt (1
       sigma = exp (-rand (p, 1) * log (kappa));
     otherwise
       error ("gallery: unknown MODE '%d' for randsvd matrix.", mode);
   endswitch
 
   ##  Convert to diagonal matrix of singular values.
   if (mode < 0)
     sigma = sigma (p:-1:1);
-  end
+  endif
   sigma = diag (sigma);
 
   if (posdef)
     ## handle case where KAPPA was negative
     Q = qmult (p);
     A = Q' * sigma * Q;
     A = (A + A') / 2;  # Ensure matrix is symmetric.
     return
   endif
 
   if (m != n)
     ## Expand to m-by-n diagonal matrix
     sigma(m, n) = 0;
-  end
+  endif
 
   if (kl == 0 && ku == 0)
     ## Diagonal matrix requested - nothing more to do.
     A = sigma;
   else
     ##  A = U*sigma*V, where U, V are random orthogonal matrices from the
     ##  Haar distribution.
     A = qmult (sigma');
diff --git a/scripts/strings/strjoin.m b/scripts/strings/strjoin.m
--- a/scripts/strings/strjoin.m
+++ b/scripts/strings/strjoin.m
@@ -59,17 +59,17 @@ function rval = strjoin (cstr, delimiter
   if (numel (cstr) == 1)
     rval = cstr{1};
     return
   endif
 
   if (ischar (delimiter))
     delimiter = do_string_escapes (delimiter);
     delimiter = {delimiter};
-  end
+  endif
  
   num = numel (cstr); 
   if (numel (delimiter) == 1 && num > 1)
     delimiter = repmat (delimiter, 1, num);
     delimiter(end) = {""};
   elseif (num > 0 && numel (delimiter) != num - 1)
     error ("strjoin:cellstring_delimiter_mismatch",
       "strjoin: the number of delimiters does not match the number of strings")
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -62,17 +62,17 @@ function assert (cond, varargin)
 
   persistent call_depth = -1;
   persistent errmsg;
 
   call_depth++;
 
   if (call_depth == 0)
     errmsg = "";
-  end
+  endif
 
   in = deblank (argn(1,:));
   for i = 2:rows (argn)
     in = [in "," deblank(argn(i,:))];
   endfor
   in = ["(" in ")"];
 
   if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
@@ -362,17 +362,17 @@ function assert (cond, varargin)
     endif
 
     ## Print any errors
     if (! isempty (err.index))
       if (! isempty (errmsg))
         errmsg = [errmsg "\n"];
       endif
       errmsg = [errmsg, pprint(in, err)];
-    end
+    endif
 
   endif
 
   call_depth--;
 
   if (call_depth == -1)
     ## Last time through.  If there were any errors on any pass, raise a flag.
     if (! isempty (errmsg))
diff --git a/scripts/ui/questdlg.m b/scripts/ui/questdlg.m
--- a/scripts/ui/questdlg.m
+++ b/scripts/ui/questdlg.m
@@ -77,37 +77,37 @@ function btn = questdlg (msg, title = "Q
     case 0
       ## use default default
 
     case 1
       ## default button string
       options{4} = varargin{1};  # default
       if (! any (strcmp (options{4}, options(1:3))))
         error (defbtn_error_msg);
-      end
+      endif
 
     case 3
       ## two buttons and default button string
       options{1} = varargin{1};  # button1
       options{2} = "";           # not used, no middle button
       options{3} = varargin{2};  # button3
       options{4} = varargin{3};  # default
       if (! any (strcmp (options{4}, options([1 3]))))
         error (defbtn_error_msg);
-      end
+      endif
 
     case 4
       ## three buttons and default button string
       options{1} = varargin{1};  # button1
       options{2} = varargin{2};  # button2
       options{3} = varargin{3};  # button3
       options{4} = varargin{4};  # default
       if (! any (strcmp (options{4}, options(1:3))))
         error (defbtn_error_msg);
-      end
+      endif
 
     otherwise
       print_usage ();
 
   endswitch
 
   if (__octave_link_enabled__ ())
     btn = __octave_link_question_dialog__ (msg, title, options{1}, options{2},
