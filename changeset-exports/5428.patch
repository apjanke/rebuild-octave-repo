# HG changeset patch
# User jwe
# Date 1124822308 0
#      Tue Aug 23 18:38:28 2005 +0000
# Node ID 2a16423e4aa042b7feb1f03328b9d3b58019ee28
# Parent  a92afe70fb8d3267f6e71e18cc3e270aa17fb0fa
[project @ 2005-08-23 18:38:27 by jwe]

diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -1,10 +1,10 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
-@c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/14
+@c Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/05/14
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Audio Processing
 @chapter Audio Processing
 
 Octave provides a few functions for dealing with audio data.  An audio
 `sample' is a single output value from an A/D converter, i.e., a small
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -1,10 +1,10 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
-@c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/17.
+@c Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/05/17.
 @c Last updated by KH on 1997/07/31.
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Emacs
 @appendix Emacs Octave Support
 
 The development of Octave code can greatly be facilitated using Emacs
@@ -20,17 +20,17 @@ useful in particular for debugging Octav
 
 Finally, you can convince Octave to use the Emacs info reader for
 @kbd{help -i}.
 
 All functionality is provided by the Emacs Lisp package EOS (for ``Emacs
 Octave Support'').  This chapter describes how to set up and use this
 package.
 
-Please contact <Kurt.Hornik@@ci.tuwien.ac.at> if you have any questions
+Please contact <Kurt.Hornik@@wu-wien.ac.at> if you have any questions
 or suggestions on using EOS.
 
 @menu
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
diff --git a/doc/interpreter/eos.txi b/doc/interpreter/eos.txi
--- a/doc/interpreter/eos.txi
+++ b/doc/interpreter/eos.txi
@@ -1,10 +1,10 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
-@c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/17.
+@c Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/05/17.
 @c Last updated by KH on 1997/07/31.
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Emacs
 @chapter Emacs Octave Support
 
 The development of Octave code can greatly be facilitated using Emacs
@@ -20,17 +20,17 @@ useful in particular for debugging Octav
 
 Finally, you can convince Octave to use the Emacs info reader for
 @kbd{help -i}.
 
 All functionality is provided by the Emacs Lisp package EOS (for ``Emacs
 Octave Support'').  This chapter describes how to set up and use this
 package.
 
-Please contact <Kurt.Hornik@@ci.tuwien.ac.at> if you have any questions
+Please contact <Kurt.Hornik@@wu-wien.ac.at> if you have any questions
 or suggestions on using EOS.
 
 @menu
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -114,17 +114,17 @@ Kai Habel @email{kai.habel@@gmx.de} impl
 coordinate transformations.
 
 @item
 A. Scottedward Hodel @email{A.S.Hodel@@eng.auburn.edu} contributed a number
 of functions including @code{expm}, @code{qzval}, @code{qzhess},
 @code{syl}, @code{lyap}, and @code{balance}.
 
 @item
-Kurt Hornik @email{Kurt.Hornik@@ci.tuwien.ac.at} provided the
+Kurt Hornik @email{Kurt.Hornik@@wu-wien.ac.at} provided the
 @code{corrcoef}, @code{cov}, @code{fftconv}, @code{fftfilt}, @code{gcd},
 @code{lcd}, @code{kurtosis}, @code{null}, @code{orth}, @code{poly},
 @code{polyfit}, @code{roots}, and @code{skewness} functions, supplied
 documentation for these and numerous other functions, rewrote the Emacs
 mode for editing Octave code and provided its documentation, and has
 helped tremendously with testing.  He has also been a constant source of
 new ideas for improving Octave.
 
diff --git a/emacs/octave-hlp.el b/emacs/octave-hlp.el
--- a/emacs/octave-hlp.el
+++ b/emacs/octave-hlp.el
@@ -1,15 +1,15 @@
 ;;; octave-hlp.el --- getting help on Octave symbols using info
 
 ;; Copyright (C) 1997 Free Software Foundation, Inc.
 
-;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
-;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Maintainer: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Keywords: languages
 
 ;; This file is part of GNU Emacs.
 
 ;; GNU Emacs is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
diff --git a/emacs/octave-inf.el b/emacs/octave-inf.el
--- a/emacs/octave-inf.el
+++ b/emacs/octave-inf.el
@@ -1,15 +1,15 @@
 ;;; octave-inf.el --- running Octave as an inferior Emacs process
 
 ;; Copyright (C) 1997 Free Software Foundation, Inc.
 
-;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
-;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Maintainer: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Keywords: languages
 
 ;; This file is part of GNU Emacs.
 
 ;; GNU Emacs is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -1,15 +1,15 @@
 ;;; octave-mod.el --- editing Octave source files under Emacs
 
 ;; Copyright (C) 1997, 2003 Free Software Foundation, Inc.
 
-;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
-;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+;; Maintainer: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ;; Keywords: languages
 
 ;; This file is part of GNU Emacs.
 
 ;; GNU Emacs is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
@@ -46,17 +46,17 @@
   "Major mode for editing Octave source files."
   :group 'languages)
 
 (defvar inferior-octave-output-list nil)
 (defvar inferior-octave-output-string nil)
 (defvar inferior-octave-receive-in-progress nil)
 
 (defconst octave-maintainer-address
-  "Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>, bug-gnu-emacs@gnu.org"
+  "Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>, bug-gnu-emacs@gnu.org"
   "Current maintainer of the Emacs Octave package.")
 
 (defvar octave-abbrev-table nil
   "Abbrev table for Octave's reserved words.
 Used in `octave-mode' and inferior-octave-mode buffers.
 All Octave abbrevs start with a grave accent (`).")
 (unless octave-abbrev-table
   (let ((ac abbrevs-changed))
diff --git a/examples/info-emacs-info b/examples/info-emacs-info
--- a/examples/info-emacs-info
+++ b/examples/info-emacs-info
@@ -1,11 +1,11 @@
 #!/bin/sh
 # info-emacs-info
-# Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/07/01
+# Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/07/01
 # Make Octave's `help -i' use Emacs info.
 # Requires a running Emacs and gnuserv.
 cmd="(Info-find-node \"$2\" \"Top\")"
 if [ $3 = "--directory" ];
 then
 	cmd="(add-to-list 'Info-directory-list \"$4\") $cmd"
 	shift 2
 fi
diff --git a/examples/info-emacs-octave-help b/examples/info-emacs-octave-help
--- a/examples/info-emacs-octave-help
+++ b/examples/info-emacs-octave-help
@@ -1,11 +1,11 @@
 #!/bin/sh
 # info-emacs-octave-help
-# Written by KH <Kurt.Hornik@ci.tuwien.ac.at> on 1996/07/01
+# Written by KH <Kurt.Hornik@wu-wien.ac.at> on 1996/07/01
 # Updated by KH on 1997/03/04
 # Make Octave's `help -i' use Emacs octave-help.
 # Requires a running Emacs and gnuserv.
 cmd="(require 'octave-hlp)"
 if [ $3 = "--directory" ];
 then
     cmd="$cmd (add-to-list 'Info-directory-list \"$4\")"
     shift 2
diff --git a/scripts/control/obsolete/dezero.m b/scripts/control/obsolete/dezero.m
--- a/scripts/control/obsolete/dezero.m
+++ b/scripts/control/obsolete/dezero.m
@@ -17,17 +17,17 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Functin File} {} dezero (@var{s})
 ## Remove trailing blank entries and all zero entries from the string s.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 ## Adapted from deblank by A. S. Hodel (a.s.hodel@eng.auburn.edu)
 ##      (the name dezero is a reference to the Fermilab D0 experiment,
 ##      where my sister did her PhD research)
 
 function t = dezero (s)
 
diff --git a/scripts/deprecated/beta_cdf.m b/scripts/deprecated/beta_cdf.m
--- a/scripts/deprecated/beta_cdf.m
+++ b/scripts/deprecated/beta_cdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} beta_cdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, returns the CDF at @var{x} of the beta
 ## distribution with parameters @var{a} and @var{b}, i.e.,
 ## PROB (beta (@var{a}, @var{b}) <= @var{x}).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Beta distribution
 
 function cdf = beta_cdf (varargin)
 
  cdf =  betacdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/beta_inv.m b/scripts/deprecated/beta_inv.m
--- a/scripts/deprecated/beta_inv.m
+++ b/scripts/deprecated/beta_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} beta_inv (@var{x}, @var{a}, @var{b})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Beta distribution with parameters @var{a}
 ## and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Beta distribution
 
 function inv = beta_inv (varargin)
 
  inv =  betainv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/beta_pdf.m b/scripts/deprecated/beta_pdf.m
--- a/scripts/deprecated/beta_pdf.m
+++ b/scripts/deprecated/beta_pdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} beta_pdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, returns the PDF at @var{x} of the beta
 ## distribution with parameters @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Beta distribution
 
 function pdf = beta_pdf (varargin)
 
  pdf =  betapdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/beta_rnd.m b/scripts/deprecated/beta_rnd.m
--- a/scripts/deprecated/beta_rnd.m
+++ b/scripts/deprecated/beta_rnd.m
@@ -24,16 +24,16 @@
 ## random samples from the Beta distribution with parameters @var{a} and
 ## @var{b}.  Both @var{a} and @var{b} must be scalar or of size @var{r}
 ##  by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Beta distribution
 
 function rnd = beta_rnd (varargin)
 
  rnd =  betarnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/binomial_cdf.m b/scripts/deprecated/binomial_cdf.m
--- a/scripts/deprecated/binomial_cdf.m
+++ b/scripts/deprecated/binomial_cdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binomial_cdf (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## binomial distribution with parameters @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the binomial distribution
 
 function cdf = binomial_cdf (varargin)
 
  cdf =  binocdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/binomial_inv.m b/scripts/deprecated/binomial_inv.m
--- a/scripts/deprecated/binomial_inv.m
+++ b/scripts/deprecated/binomial_inv.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binomial_inv (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## binomial distribution with parameters @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the binomial distribution
 
 function inv = binomial_inv (varargin)
 
  inv =  binoinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/binomial_pdf.m b/scripts/deprecated/binomial_pdf.m
--- a/scripts/deprecated/binomial_pdf.m
+++ b/scripts/deprecated/binomial_pdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binomial_pdf (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the binomial distribution with parameters @var{n}
 ## and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the binomial distribution
 
 function pdf = binomial_pdf (varargin)
 
  pdf =  binopdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/binomial_rnd.m b/scripts/deprecated/binomial_rnd.m
--- a/scripts/deprecated/binomial_rnd.m
+++ b/scripts/deprecated/binomial_rnd.m
@@ -24,16 +24,16 @@
 ## random samples from the binomial distribution with parameters @var{n}
 ## and @var{p}.  Both @var{n} and @var{p} must be scalar or of size
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the binomial distribution
 
 function rnd = binomial_rnd (varargin)
 
  rnd =  binornd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/chisquare_rnd.m b/scripts/deprecated/chisquare_rnd.m
--- a/scripts/deprecated/chisquare_rnd.m
+++ b/scripts/deprecated/chisquare_rnd.m
@@ -23,16 +23,16 @@
 ## Return an @var{r} by @var{c}  or a @code{size (@var{sz})} matrix of 
 ## random samples from the chisquare distribution with @var{n} degrees 
 ## of freedom.  @var{n} must be a scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the chi-square distribution
 
 function rnd = chisquare_rnd (varargin)
 
  rnd =  chi2rnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/exponential_cdf.m b/scripts/deprecated/exponential_cdf.m
--- a/scripts/deprecated/exponential_cdf.m
+++ b/scripts/deprecated/exponential_cdf.m
@@ -21,16 +21,16 @@
 ## @deftypefn {Function File} {} exponential_cdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the exponential distribution with
 ## parameter @var{lambda}.
 ##
 ## The arguments can be of common size or scalar.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the exponential distribution
 
 function cdf = exponential_cdf (varargin)
 
  cdf =  expcdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/exponential_inv.m b/scripts/deprecated/exponential_inv.m
--- a/scripts/deprecated/exponential_inv.m
+++ b/scripts/deprecated/exponential_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} exponential_inv (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the exponential distribution with parameter
 ## @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the exponential distribution
 
 function inv = exponential_inv (varargin)
 
  inv =  expinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/exponential_pdf.m b/scripts/deprecated/exponential_pdf.m
--- a/scripts/deprecated/exponential_pdf.m
+++ b/scripts/deprecated/exponential_pdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} exponential_pdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) of the exponential distribution with parameter @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the exponential distribution
 
 function pdf = exponential_pdf (varargin)
 
  pdf =  exppdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/exponential_rnd.m b/scripts/deprecated/exponential_rnd.m
--- a/scripts/deprecated/exponential_rnd.m
+++ b/scripts/deprecated/exponential_rnd.m
@@ -24,16 +24,16 @@
 ## exponential distribution with parameter @var{lambda}, which must be a
 ## scalar or of size @var{r} by @var{c}. Or if @var{sz} is a vector, 
 ## create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the exponential distribution
 
 function rnd = exponential_rnd (varargin)
 
  rnd =  exprnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/f_cdf.m b/scripts/deprecated/f_cdf.m
--- a/scripts/deprecated/f_cdf.m
+++ b/scripts/deprecated/f_cdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} f_cdf (@var{x}, @var{m}, @var{n})
 ## For each element of @var{x}, compute the CDF at @var{x} of the F
 ## distribution with @var{m} and @var{n} degrees of freedom, i.e.,
 ## PROB (F (@var{m}, @var{n}) <= @var{x}). 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the F distribution
 
 function cdf = f_cdf (varargin)
 
  cdf =  fcdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/f_inv.m b/scripts/deprecated/f_inv.m
--- a/scripts/deprecated/f_inv.m
+++ b/scripts/deprecated/f_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} f_inv (@var{x}, @var{m}, @var{n})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the F distribution with parameters @var{m} and
 ## @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the F distribution
 
 function inv = f_inv (varargin)
 
  inv =  finv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/f_pdf.m b/scripts/deprecated/f_pdf.m
--- a/scripts/deprecated/f_pdf.m
+++ b/scripts/deprecated/f_pdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} f_pdf (@var{x}, @var{m}, @var{n})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the F distribution with @var{m} and @var{n}
 ## degrees of freedom.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the F distribution
 
 function pdf = f_pdf (varargin)
 
  pdf =  fpdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/f_rnd.m b/scripts/deprecated/f_rnd.m
--- a/scripts/deprecated/f_rnd.m
+++ b/scripts/deprecated/f_rnd.m
@@ -25,16 +25,16 @@
 ## @var{m} and @var{n} must be scalar or of size @var{r} by @var{c}.
 ## If @var{sz} is a vector the random samples are in a matrix of 
 ## size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{m} and @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the F distribution
 
 function rnd = f_rnd (varargin)
 
  rnd =  frnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/gamma_inv.m b/scripts/deprecated/gamma_inv.m
--- a/scripts/deprecated/gamma_inv.m
+++ b/scripts/deprecated/gamma_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gamma_inv (@var{x}, @var{a}, @var{b})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Gamma distribution with parameters @var{a}
 ## and @var{b}. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Gamma distribution
 
 function inv = gamma_inv (varargin)
 
  inv =  gaminv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/gamma_rnd.m b/scripts/deprecated/gamma_rnd.m
--- a/scripts/deprecated/gamma_rnd.m
+++ b/scripts/deprecated/gamma_rnd.m
@@ -24,16 +24,16 @@
 ## random samples from the Gamma distribution with parameters @var{a}
 ## and @var{b}.  Both @var{a} and @var{b} must be scalar or of size 
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Gamma distribution
 
 function rnd = gamma_rnd (varargin)
 
  rnd =  gamrnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/geometric_cdf.m b/scripts/deprecated/geometric_cdf.m
--- a/scripts/deprecated/geometric_cdf.m
+++ b/scripts/deprecated/geometric_cdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geometric_cdf (@var{x}, @var{p})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the geometric distribution
 
 function cdf = geometric_cdf (varargin)
 
  cdf =  geocdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/geometric_inv.m b/scripts/deprecated/geometric_inv.m
--- a/scripts/deprecated/geometric_inv.m
+++ b/scripts/deprecated/geometric_inv.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geometric_inv (@var{x}, @var{p})
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the geometric distribution
 
 function inv = geometric_inv (varargin)
 
  inv =  geoinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/geometric_pdf.m b/scripts/deprecated/geometric_pdf.m
--- a/scripts/deprecated/geometric_pdf.m
+++ b/scripts/deprecated/geometric_pdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geometric_pdf (@var{x}, @var{p})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the geometric distribution
 
 function pdf = geometric_pdf (varargin)
 
  pdf =  geopdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/geometric_rnd.m b/scripts/deprecated/geometric_rnd.m
--- a/scripts/deprecated/geometric_rnd.m
+++ b/scripts/deprecated/geometric_rnd.m
@@ -24,16 +24,16 @@
 ## geometric distribution with parameter @var{p}, which must be a scalar
 ## or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are given create a matrix with @var{r} rows and
 ## @var{c} columns. Or if @var{sz} is a vector, create a matrix of size
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the geometric distribution
 
 function rnd = geometric_rnd (varargin)
 
  rnd =  geornd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/hypergeometric_cdf.m b/scripts/deprecated/hypergeometric_cdf.m
--- a/scripts/deprecated/hypergeometric_cdf.m
+++ b/scripts/deprecated/hypergeometric_cdf.m
@@ -25,17 +25,17 @@
 ## marked items when randomly drawing a sample of size @var{n} without
 ## replacement from a population of total size @var{t} containing
 ## @var{m} marked items.
 ##
 ## The parameters @var{m}, @var{t}, and @var{n} must positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the hypergeometric distribution
 
 function cdf = hypergeometric_cdf (varargin)
 
  cdf =  hygecdf (varargin{:});
 
 endfunction
 
diff --git a/scripts/deprecated/hypergeometric_inv.m b/scripts/deprecated/hypergeometric_inv.m
--- a/scripts/deprecated/hypergeometric_inv.m
+++ b/scripts/deprecated/hypergeometric_inv.m
@@ -22,16 +22,16 @@
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## hypergeometric distribution with parameters @var{m}, @var{t}, and
 ## @var{n}.
 ##
 ## The parameters @var{m}, @var{t}, and @var{n} must positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the hypergeometric distribution
 
 function inv = hypergeometric_inv (varargin)
 
  inv =  hygeinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/hypergeometric_pdf.m b/scripts/deprecated/hypergeometric_pdf.m
--- a/scripts/deprecated/hypergeometric_pdf.m
+++ b/scripts/deprecated/hypergeometric_pdf.m
@@ -23,16 +23,16 @@
 ## hypergeometric distribution with parameters @var{m}, @var{t}, and
 ## @var{n}. This is the probability of obtaining @var{x} marked items
 ## when randomly drawing a sample of size @var{n} without replacement
 ## from a population of total size @var{t} containing @var{m} marked items.
 ##
 ## The arguments must be of common size or scalar.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the hypergeometric distribution
 
 function pdf = hypergeometric_pdf (varargin)
 
  pdf =  hygepdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/lognormal_cdf.m b/scripts/deprecated/lognormal_cdf.m
--- a/scripts/deprecated/lognormal_cdf.m
+++ b/scripts/deprecated/lognormal_cdf.m
@@ -23,16 +23,16 @@
 ## function (CDF) at @var{x} of the lognormal distribution with
 ## parameters @var{a} and @var{v}.  If a random variable follows this
 ## distribution, its logarithm is normally distributed with mean
 ## @code{log (@var{a})} and variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the log normal distribution
 
 function cdf = lognormal_cdf (varargin)
 
  cdf =  logncdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/lognormal_inv.m b/scripts/deprecated/lognormal_inv.m
--- a/scripts/deprecated/lognormal_inv.m
+++ b/scripts/deprecated/lognormal_inv.m
@@ -23,16 +23,16 @@
 ## CDF) at @var{x} of the lognormal distribution with parameters @var{a}
 ## and @var{v}.  If a random variable follows this distribution, its
 ## logarithm is normally distributed with mean @code{log (@var{a})} and
 ## variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the log normal distribution
 
 function inv = lognormal_inv (varargin)
 
  inv =  logninv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/lognormal_pdf.m b/scripts/deprecated/lognormal_pdf.m
--- a/scripts/deprecated/lognormal_pdf.m
+++ b/scripts/deprecated/lognormal_pdf.m
@@ -23,16 +23,16 @@
 ## (PDF) at @var{x} of the lognormal distribution with parameters
 ## @var{a} and @var{v}.  If a random variable follows this distribution,
 ## its logarithm is normally distributed with mean @code{log (@var{a})}
 ## and variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the log normal distribution
 
 function pdf = lognormal_pdf (varargin)
 
  pdf =  lognpdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/lognormal_rnd.m b/scripts/deprecated/lognormal_rnd.m
--- a/scripts/deprecated/lognormal_rnd.m
+++ b/scripts/deprecated/lognormal_rnd.m
@@ -24,16 +24,16 @@
 ## lognormal distribution with parameters @var{a} and @var{v}. Both
 ## @var{a} and @var{v} must be scalar or of size @var{r} by @var{c}.
 ## Or if @var{sz} is a vector, create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{v}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the log normal distribution
 
 function rnd = lognormal_rnd (varargin)
 
  rnd =  lognrnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/normal_inv.m b/scripts/deprecated/normal_inv.m
--- a/scripts/deprecated/normal_inv.m
+++ b/scripts/deprecated/normal_inv.m
@@ -21,16 +21,16 @@
 ## @deftypefn {Function File} {} normal_inv (@var{x}, @var{m}, @var{v})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the normal distribution with mean @var{m} and
 ## variance @var{v}.
 ##
 ## Default values are @var{m} = 0, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the normal distribution
 
 function inv = normal_inv (varargin)
 
  inv =  norminv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/normal_rnd.m b/scripts/deprecated/normal_rnd.m
--- a/scripts/deprecated/normal_rnd.m
+++ b/scripts/deprecated/normal_rnd.m
@@ -24,16 +24,16 @@
 ## random samples from the normal distribution with parameters @var{m} 
 ## and @var{v}.  Both @var{m} and @var{v} must be scalar or of size 
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{m} and @var{v}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the normal distribution
 
 function rnd = normal_rnd (varargin)
 
  rnd =  normrnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/poisson_cdf.m b/scripts/deprecated/poisson_cdf.m
--- a/scripts/deprecated/poisson_cdf.m
+++ b/scripts/deprecated/poisson_cdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisson_cdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the Poisson distribution with parameter
 ## lambda.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Poisson distribution
 
 function cdf = poisson_cdf (varargin)
 
  cdf =  poisscdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/poisson_inv.m b/scripts/deprecated/poisson_inv.m
--- a/scripts/deprecated/poisson_inv.m
+++ b/scripts/deprecated/poisson_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisson_inv (@var{x}, @var{lambda})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Poisson distribution with parameter
 ## @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Poisson distribution
 
 function inv = poisson_inv (varargin)
 
  inv =  poissinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/poisson_pdf.m b/scripts/deprecated/poisson_pdf.m
--- a/scripts/deprecated/poisson_pdf.m
+++ b/scripts/deprecated/poisson_pdf.m
@@ -18,16 +18,16 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisson_pdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the poisson distribution with parameter @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Poisson distribution
 
 function pdf = poisson_pdf (varargin)
 
  pdf =  poisspdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/poisson_rnd.m b/scripts/deprecated/poisson_rnd.m
--- a/scripts/deprecated/poisson_rnd.m
+++ b/scripts/deprecated/poisson_rnd.m
@@ -22,16 +22,16 @@
 ## Return an @var{r} by @var{c} matrix of random samples from the
 ## Poisson distribution with parameter @var{lambda}, which must be a 
 ## scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Poisson distribution
 
 function rnd = poisson_rnd (varargin)
 
  rnd =  poissrnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/t_cdf.m b/scripts/deprecated/t_cdf.m
--- a/scripts/deprecated/t_cdf.m
+++ b/scripts/deprecated/t_cdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} t_cdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## t (Student) distribution with @var{n} degrees of freedom, i.e.,
 ## PROB (t(@var{n}) <= @var{x}).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the t distribution
 
 function cdf = t_cdf (varargin)
 
  cdf =  tcdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/t_inv.m b/scripts/deprecated/t_inv.m
--- a/scripts/deprecated/t_inv.m
+++ b/scripts/deprecated/t_inv.m
@@ -23,16 +23,16 @@
 ## the CDF) at @var{x} of the t (Student) distribution with parameter
 ## @var{n}.
 ## @end deftypefn
 
 ## For very large n, the "correct" formula does not really work well,
 ## and the quantiles of the standard normal distribution are used
 ## directly.
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the t distribution
 
 function inv = t_inv (varargin)
 
  inv =  tinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/t_pdf.m b/scripts/deprecated/t_pdf.m
--- a/scripts/deprecated/t_pdf.m
+++ b/scripts/deprecated/t_pdf.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} t_pdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the @var{t} (Student) distribution with @var{n}
 ## degrees of freedom. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the t distribution
 
 function pdf = t_pdf (varargin)
 
  pdf =  tpdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/t_rnd.m b/scripts/deprecated/t_rnd.m
--- a/scripts/deprecated/t_rnd.m
+++ b/scripts/deprecated/t_rnd.m
@@ -24,16 +24,16 @@
 ## (Student) distribution with @var{n} degrees of freedom.  @var{n} must
 ## be a scalar or of size @var{r} by @var{c}. Or if @var{sz} is a
 ## vector create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the t distribution
 
 function rnd = t_rnd (varargin)
 
  rnd =  t_rnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/uniform_cdf.m b/scripts/deprecated/uniform_cdf.m
--- a/scripts/deprecated/uniform_cdf.m
+++ b/scripts/deprecated/uniform_cdf.m
@@ -20,16 +20,16 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} uniform_cdf (@var{x}, @var{a}, @var{b})
 ## Return the CDF at @var{x} of the uniform distribution on [@var{a},
 ## @var{b}], i.e., PROB (uniform (@var{a}, @var{b}) <= x).
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the uniform distribution
 
 function cdf = uniform_cdf (varargin)
 
  cdf =  unifcdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/uniform_inv.m b/scripts/deprecated/uniform_inv.m
--- a/scripts/deprecated/uniform_inv.m
+++ b/scripts/deprecated/uniform_inv.m
@@ -20,16 +20,16 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} uniform_inv (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the uniform distribution on [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the uniform distribution
 
 function inv = uniform_inv (varargin)
 
  inv =  unifinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/uniform_pdf.m b/scripts/deprecated/uniform_pdf.m
--- a/scripts/deprecated/uniform_pdf.m
+++ b/scripts/deprecated/uniform_pdf.m
@@ -20,16 +20,16 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} uniform_pdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, compute the PDF at @var{x} of the uniform
 ## distribution on [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the uniform distribution
 
 function pdf = uniform_pdf (varargin)
 
  pdf =  unifpdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/uniform_rnd.m b/scripts/deprecated/uniform_rnd.m
--- a/scripts/deprecated/uniform_rnd.m
+++ b/scripts/deprecated/uniform_rnd.m
@@ -23,16 +23,16 @@
 ## Return an @var{r} by @var{c} or a @code{size (@var{sz})} matrix of 
 ## random samples from the uniform distribution on [@var{a}, @var{b}]. 
 ## Both @var{a} and @var{b} must be scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the uniform distribution
 
 function rnd = uniform_rnd (varargin)
 
  rnd =  unifrnd (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/weibull_cdf.m b/scripts/deprecated/weibull_cdf.m
--- a/scripts/deprecated/weibull_cdf.m
+++ b/scripts/deprecated/weibull_cdf.m
@@ -26,16 +26,16 @@
 ## @example
 ## 1 - exp(-(x/sigma)^alpha)
 ## @end example
 ##
 ## @noindent
 ## for @var{x} >= 0.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Weibull distribution
 
 function cdf = weibull_cdf (varargin)
 
  cdf =  weibcdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/weibull_inv.m b/scripts/deprecated/weibull_inv.m
--- a/scripts/deprecated/weibull_inv.m
+++ b/scripts/deprecated/weibull_inv.m
@@ -19,16 +19,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} weibull_inv (@var{x}, @var{lambda}, @var{alpha})
 ## Compute the quantile (the inverse of the CDF) at @var{x} of the
 ## Weibull distribution with shape parameter @var{alpha} and scale
 ## parameter @var{sigma}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Weibull distribution
 
 function inv = weibull_inv (varargin)
 
  inv =  weibinv (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/weibull_pdf.m b/scripts/deprecated/weibull_pdf.m
--- a/scripts/deprecated/weibull_pdf.m
+++ b/scripts/deprecated/weibull_pdf.m
@@ -26,16 +26,16 @@
 ## @example
 ##    alpha * sigma^(-alpha) * x^(alpha-1) * exp(-(x/sigma)^alpha)
 ## @end example
 ##
 ## @noindent
 ## for @var{x} > 0.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Weibull distribution
 
 function pdf = weibull_pdf (varargin)
 
  pdf =  weibpdf (varargin{:});
 
 endfunction
diff --git a/scripts/deprecated/weibull_rnd.m b/scripts/deprecated/weibull_rnd.m
--- a/scripts/deprecated/weibull_rnd.m
+++ b/scripts/deprecated/weibull_rnd.m
@@ -27,16 +27,16 @@
 ## Weibull distribution with parameters @var{alpha} and @var{sigma}
 ## which must be scalar or of size @var{r} by @var{c}. Or if @var{sz}
 ## is a vector return a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{alpha} and @var{sigma}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Weibull distribution
 
 function rnd = weibull_rnd (varargin)
 
   rnd = weibrnd(varargin{:});
 
 endfunction
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -33,17 +33,17 @@
 ## lcm ([a1, ..., ak]).
 ## @end example
 ##
 ## All elements must be the same size or scalar.
 ## @end deftypefn
 ##
 ## @seealso{gcd, min, max, ceil, and floor}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function l = lcm (varargin)
 
   if (nargin == 0)
     usage ("lcm (a, ...)");
   endif
diff --git a/scripts/finance/fv.m b/scripts/finance/fv.m
--- a/scripts/finance/fv.m
+++ b/scripts/finance/fv.m
@@ -29,17 +29,17 @@
 ## The optional argument @var{method} may be used ot specify whether the
 ## payments are made at the end (@code{"e"}, default) or at the
 ## beginning (@code{"b"}) of each period.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Future value of an investment
 
 function v = fv (r, n, p, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("fv (r, n, p, l, method)");
   endif
 
diff --git a/scripts/finance/fvl.m b/scripts/finance/fvl.m
--- a/scripts/finance/fvl.m
+++ b/scripts/finance/fvl.m
@@ -22,17 +22,17 @@
 ## Return the future value at the end of @var{n} periods of an initial
 ## lump sum investment @var{l}, given a per-period interest rate
 ## @var{r}.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Future value of an initial lump sum investment
 
 function v = fvl (r, n, l)
 
   if (nargin != 3)
     usage ("fvl (r, n, l)");
   endif
 
diff --git a/scripts/finance/irr.m b/scripts/finance/irr.m
--- a/scripts/finance/irr.m
+++ b/scripts/finance/irr.m
@@ -22,17 +22,17 @@
 ## Return the internal rate of return of a series of payments @var{p}
 ## from an initial investment @var{i} (i.e., the solution of
 ## @code{npv (r, p) = i}.  If the second argument is omitted, a value of
 ## 0 is used.
 ## @end deftypefn
 ##
 ## @seealso{npv, pv, and rate}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Internal rate of return of an investment
 
 function r = irr (p, i)
 
   if (nargin == 1)
     i = 0;
   elseif (! (nargin == 2))
     usage ("irr (p, i)");
diff --git a/scripts/finance/nper.m b/scripts/finance/nper.m
--- a/scripts/finance/nper.m
+++ b/scripts/finance/nper.m
@@ -30,17 +30,17 @@
 ## (@var{"b"}) of each period.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 ##
 ## @seealso{pv, pmt, rate, and npv}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Number of payments needed for amortizing a loan
 
 function n = nper (r, p, a, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("nper (r, p, a, l, method)");
   endif
 
diff --git a/scripts/finance/npv.m b/scripts/finance/npv.m
--- a/scripts/finance/npv.m
+++ b/scripts/finance/npv.m
@@ -29,17 +29,17 @@
 ## investment.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 ##
 ## @seealso{irr and pv}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Net present value of a series of payments
 
 function v = npv (r, p, i)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("npv (r, p, i");
   endif
 
diff --git a/scripts/finance/pmt.m b/scripts/finance/pmt.m
--- a/scripts/finance/pmt.m
+++ b/scripts/finance/pmt.m
@@ -27,17 +27,17 @@
 ##
 ## The optional argument @var{method} may be used to specify whether
 ## payments are made at the end (@var{"e"}, default) or at the beginning
 ## (@var{"b"}) of each period.
 ## @end deftypefn
 ##
 ## @seealso{pv, nper, and rate}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Amount of periodic payment needed to amortize a loan
 
 function p = pmt (r, n, a, l, m)
 
   if (nargin < 3 || nargin > 5)
     usage ("pmt (r, n, a, l, method)");
   endif
 
diff --git a/scripts/finance/pv.m b/scripts/finance/pv.m
--- a/scripts/finance/pv.m
+++ b/scripts/finance/pv.m
@@ -30,17 +30,17 @@
 ## beginning (@code{"b"}) of each period.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 ##
 ## @seealso{pmt, nper, rate, and npv}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Present value of an investment
 
 function v = pv (r, n, p, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("pv (r, n, p, l, method)");
   endif
 
diff --git a/scripts/finance/pvl.m b/scripts/finance/pvl.m
--- a/scripts/finance/pvl.m
+++ b/scripts/finance/pvl.m
@@ -22,17 +22,17 @@
 ## Return the present value of an investment that will pay off @var{p}
 ## in one lump sum at the end of @var{n} periods, given the interest
 ## rate @var{r}.
 ##
 ## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
 ## not 5 percent).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Present value of an investment that pays off at the end
 
 function v = pvl (r, n, p)
 
   if (nargin != 3)
     usage ("pvl (r, n, p)");
   endif
 
diff --git a/scripts/finance/rate.m b/scripts/finance/rate.m
--- a/scripts/finance/rate.m
+++ b/scripts/finance/rate.m
@@ -27,17 +27,17 @@
 ##
 ## The optional string argument @var{method} may be used to specify
 ## whether payments are made at the end (@code{"e"}, default) or at the
 ## beginning (@code{"b"}) of each period.
 ## @end deftypefn
 ##
 ## @seealso{pv, pmt, nper, and npv}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Rate of return of an investment
 
 function r = rate (n, p, v, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("rate (n, p, v, l, method)");
   endif
 
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -34,17 +34,17 @@
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## This is useful for implementing functions where arguments can either
 ## be scalars or of common size.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function [errorcode, varargout] = common_size (varargin)
 
   if (nargin < 2)
     error ("common_size: only makes sense if nargin >= 2");
   endif
diff --git a/scripts/general/diff.m b/scripts/general/diff.m
--- a/scripts/general/diff.m
+++ b/scripts/general/diff.m
@@ -42,17 +42,17 @@
 ##
 ## The dimension along which to take the difference can be explicitly
 ## stated with the optional variable @var{dim}. In this case the 
 ## @var{k}-th order differences are calculated along this dimension.
 ## In the case where @var{k} exceeds @code{size (@var{x}, @var{dim})}
 ## then an empty matrix is returned.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 2 February 1995
 ## Adapted-By: jwe
 
 function x = diff (x, k, dim)
 
   if (nargin < 1 || nargin > 3)
     usage ("diff (x, k");
   endif
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -29,17 +29,17 @@
 ##  2^n >= abs (x).
 ## @end ifinfo
 ##
 ## If @var{x} is a vector, return @code{nextpow2 (length (@var{x}))}.
 ## @end deftypefn
 ##
 ## @seealso{pow2}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 7 October 1994
 ## Adapted-By: jwe
 
 function n = nextpow2 (x)
 
   if (nargin != 1)
     usage ("nextpow2 (x)");
   endif
diff --git a/scripts/linear-algebra/commutation_matrix.m b/scripts/linear-algebra/commutation_matrix.m
--- a/scripts/linear-algebra/commutation_matrix.m
+++ b/scripts/linear-algebra/commutation_matrix.m
@@ -75,17 +75,17 @@
 ##  @math{K(m,m)}
 ## @end ifinfo
 ##  is returned.
 ##
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
 ## Adapted-By: jwe
 
 function k = commutation_matrix (m, n)
 
   if (nargin < 1 || nargin > 2)
     usage ("commutation_matrix (m, n)");
   else
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -30,17 +30,17 @@
 ## @end example
 ##
 ## If @var{x} and @var{y} are matrices, the cross product is applied 
 ## along the first dimension with 3 elements. The optional argument 
 ## @var{dim} is used to force the cross product to be calculated along
 ## the dimension defiend by @var{dim}.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function z = cross (x, y, dim)
 	
   if (nargin != 2 && nargin != 3)
     usage ("cross (x, y, dim)");
   endif
diff --git a/scripts/linear-algebra/dmult.m b/scripts/linear-algebra/dmult.m
--- a/scripts/linear-algebra/dmult.m
+++ b/scripts/linear-algebra/dmult.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dmult (@var{a}, @var{b})
 ## If @var{a} is a vector of length @code{rows (@var{b})}, return
 ## @code{diag (@var{a}) * @var{b}} (but computed much more efficiently).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Rescale the rows of a matrix
 
 function M = dmult (a, B)
 
   if (nargin != 2)
     usage ("dmult (a, B)");
   endif
  if (! isvector (a))
diff --git a/scripts/linear-algebra/duplication_matrix.m b/scripts/linear-algebra/duplication_matrix.m
--- a/scripts/linear-algebra/duplication_matrix.m
+++ b/scripts/linear-algebra/duplication_matrix.m
@@ -64,17 +64,17 @@
 ## @ifinfo
 ##  @math{A}.
 ## @end ifinfo
 ##
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
 ## Adapged-By: jwe
 
 function d = duplication_matrix (n)
 
   if (nargin != 1)
     usage ("duplication_matrix (n)");
   endif
diff --git a/scripts/linear-algebra/null.m b/scripts/linear-algebra/null.m
--- a/scripts/linear-algebra/null.m
+++ b/scripts/linear-algebra/null.m
@@ -25,17 +25,17 @@
 ## values of @var{a} not greater than @var{tol}.  If the argument @var{tol}
 ## is missing, it is computed as
 ##
 ## @example
 ## max (size (@var{a})) * max (svd (@var{a})) * eps
 ## @end example
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993.
 ## Adapted-By: jwe
 
 function retval = null (A, tol)
 
   if (isempty (A))
     retval = [];
   else
diff --git a/scripts/linear-algebra/orth.m b/scripts/linear-algebra/orth.m
--- a/scripts/linear-algebra/orth.m
+++ b/scripts/linear-algebra/orth.m
@@ -25,17 +25,17 @@
 ## values of @var{a} greater than @var{tol}.  If the argument @var{tol} is
 ## missing, it is computed as
 ##
 ## @example
 ## max (size (@var{a})) * max (svd (@var{a})) * eps
 ## @end example
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993.
 ## Adapted-By: jwe
 
 function retval = orth (A, tol)
 
   if (nargin == 1 || nargin == 2)
 
     [U, S, V] = svd (A);
diff --git a/scripts/linear-algebra/vec.m b/scripts/linear-algebra/vec.m
--- a/scripts/linear-algebra/vec.m
+++ b/scripts/linear-algebra/vec.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} vec (@var{x})
 ## Return the vector obtained by stacking the columns of the matrix @var{x}
 ## one above the other.
 ## @end deftypefn
 
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
 ## Adapted-By: jwe
 
 function v = vec (x)
 
   if (nargin != 1)
     usage ("vec (x)");
   endif
diff --git a/scripts/linear-algebra/vech.m b/scripts/linear-algebra/vech.m
--- a/scripts/linear-algebra/vech.m
+++ b/scripts/linear-algebra/vech.m
@@ -22,17 +22,17 @@
 ## Return the vector obtained by eliminating all supradiagonal elements of
 ## the square matrix @var{x} and stacking the result one column above the
 ## other.
 ## @end deftypefn
 
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 
-## Author KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
 ## Adapted-By: jwe
 
 function v = vech (x)
 
   if (nargin != 1)
     usage ("vech (x)");
   endif
diff --git a/scripts/miscellaneous/bincoeff.m b/scripts/miscellaneous/bincoeff.m
--- a/scripts/miscellaneous/bincoeff.m
+++ b/scripts/miscellaneous/bincoeff.m
@@ -45,17 +45,17 @@
 ## @example
 ## @group
 ## bincoeff (5, 2)
 ##      @result{} 10
 ## @end group
 ## @end example
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 October 1994
 ## Adapted-By: jwe
 
 function b = bincoeff (n, k)
 
   if (nargin != 2)
     usage ("bincoeff (n, k)");
   endif
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} xor (@var{x}, @var{y})
 ## Return the `exclusive or' of the entries of @var{x} and @var{y}.
 ## For boolean expressions @var{x} and @var{y},
 ## @code{xor (@var{x}, @var{y})} is true if and only if @var{x} or @var{y}
 ## is true, but not if both @var{x} and @var{y} are true.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function z = xor (x, y)
 
   if (nargin == 2)
     if (isscalar (x) || isscalar (y) || size (x) == size (y))
       z = logical ((x | y) - (x & y));
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} poly (@var{a})
 ## If @var{a} is a square @math{N}-by-@math{N} matrix, @code{poly (@var{a})}
 ## is the row vector of the coefficients of @code{det (z * eye (N) - a)},
 ## the characteristic polynomial of @var{a}.  If @var{x} is a vector,
 ## @code{poly (@var{x})} is a vector of coefficients of the polynomial
 ## whose roots are the elements of @var{x}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@neuro.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function y = poly (x)
 
   if (nargin != 1)
     usage ("poly (x)");
   endif
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -48,17 +48,17 @@
 ## The degrees of freedom.
 ## @item normr
 ## The norm of the residuals.
 ## @item yf
 ## The values of the polynomial for each value of @var{x}.
 ## @end table
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
 
 function [p, s, mu] = polyfit (x, y, n)
 
 
   if (nargin != 3)
     usage ("polyfit (x, y, n)");
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -32,17 +32,17 @@
 ## @ifinfo
 ##
 ## @example
 ## v(1) * z^(N-1) + ... + v(N-1) * z + v(N)
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function r = roots (v)
 
   if (min (size (v)) > 1 || nargin != 1)
     usage ("roots (v), where v is a vector");
   endif
diff --git a/scripts/signal/arch_fit.m b/scripts/signal/arch_fit.m
--- a/scripts/signal/arch_fit.m
+++ b/scripts/signal/arch_fit.m
@@ -41,17 +41,17 @@
 ## [1, y(t-1), ..., y(t-k)]
 ## @end example
 ##
 ## Optionally, one can specify the number of iterations @var{iter}, the
 ## updating factor @var{gamma}, and initial values @math{a0} and
 ## @math{b0} for the scoring algorithm.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Fit an ARCH regression model
 
 function [a, b] = arch_fit (y, X, p, ITER, gamma, a0, b0)
 
   if ((nargin < 3) || (nargin == 6) || (nargin > 7))
     usage ("arch_fit (y, X, p, ITER, gamma, a0, b0)");
   endif
 
diff --git a/scripts/signal/arch_rnd.m b/scripts/signal/arch_rnd.m
--- a/scripts/signal/arch_rnd.m
+++ b/scripts/signal/arch_rnd.m
@@ -31,17 +31,17 @@
 ## where @math{e(t)}, given @var{y} up to time @math{t-1}, is
 ## @math{N(0, h(t))}, with
 ##
 ## @example
 ## h(t) = a(1) + a(2) * e(t-1)^2 + @dots{} + a(la) * e(t-la+1)^2
 ## @end example
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Simulate an ARCH process
 
 function y = arch_rnd (a, b, T)
 
   if (nargin != 3)
     usage ("arch_rnd (a, b, T)");
   endif
 
diff --git a/scripts/signal/arch_test.m b/scripts/signal/arch_test.m
--- a/scripts/signal/arch_test.m
+++ b/scripts/signal/arch_test.m
@@ -58,17 +58,17 @@
 ##
 ## Under the null, LM approximately has a chisquare distribution with
 ## @var{p} degrees of freedom and @var{pval} is the @math{p}-value (1
 ## minus the CDF of this distribution at LM) of the test.
 ##
 ## If no output argument is given, the @math{p}-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test for conditional heteroscedascity
 
 function [pval, lm] = arch_test (y, X, p)
 
   if (nargin != 3)
     error ("arch_test needs 3 input arguments");
   endif
 
diff --git a/scripts/signal/autoreg_matrix.m b/scripts/signal/autoreg_matrix.m
--- a/scripts/signal/autoreg_matrix.m
+++ b/scripts/signal/autoreg_matrix.m
@@ -22,17 +22,17 @@
 ## Given a time series (vector) @var{y}, return a matrix with ones in the
 ## first column and the first @var{k} lagged values of @var{y} in the
 ## other columns.  I.e., for @var{t} > @var{k}, @code{[1,
 ## @var{y}(@var{t}-1), ..., @var{y}(@var{t}-@var{k})]} is the t-th row
 ## of the result.  The resulting matrix may be used as a regressor matrix
 ## in autoregressions.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Design matrix for autoregressions
 
 function X = autoreg_matrix (y, k)
 
   if (nargin != 2)
     usage ("autoreg_matrix (y, k)");
   endif
 
diff --git a/scripts/signal/detrend.m b/scripts/signal/detrend.m
--- a/scripts/signal/detrend.m
+++ b/scripts/signal/detrend.m
@@ -24,17 +24,17 @@
 ##
 ## If @var{x} is a matrix, @code{detrend (@var{x}, @var{p})} does the same
 ## for each column in @var{x}.
 ##
 ## The second argument is optional.  If it is not specified, a value of 1
 ## is assumed.  This corresponds to removing a linear trend.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 11 October 1994
 ## Adapted-By: jwe
 
 function y = detrend (x, p)
 
   if (nargin == 1)
     p = 1;
   elseif (nargin == 2)
diff --git a/scripts/signal/fftconv.m b/scripts/signal/fftconv.m
--- a/scripts/signal/fftconv.m
+++ b/scripts/signal/fftconv.m
@@ -23,17 +23,17 @@
 ## with length equal to the @code{length (a) + length (b) - 1}.  If @var{a}
 ## and @var{b} are the coefficient vectors of two polynomials, the returned
 ## value is the coefficient vector of the product polynomial.
 ##
 ## The computation uses the FFT by calling the function @code{fftfilt}.  If
 ## the optional argument @var{n} is specified, an N-point FFT is used.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 3 September 1994
 ## Adapted-By: jwe
 
 function c = fftconv (a, b, N)
 
   if (nargin < 2 || nargin > 3)
     usage ("fftconv (b, x, N)");
   endif
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -24,17 +24,17 @@
 ## @var{b} using the FFT.
 ##
 ## Given the optional third argument, @var{n}, @code{fftfilt} uses the
 ## overlap-add method to filter @var{x} with @var{b} using an N-point FFT.
 ##
 ## If @var{x} is a matrix, filter each column of the matrix.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 3 September 1994
 ## Adapted-By: jwe
 
 function y = fftfilt (b, x, N)
 
   ## If N is not specified explicitly, we do not use the overlap-add
   ## method at all because loops are really slow.  Otherwise, we only
   ## ensure that the number of points in the FFT is the smallest power
diff --git a/scripts/specfun/beta.m b/scripts/specfun/beta.m
--- a/scripts/specfun/beta.m
+++ b/scripts/specfun/beta.m
@@ -30,17 +30,17 @@
 ## @ifinfo
 ##
 ## @example
 ## beta (a, b) = gamma (a) * gamma (b) / gamma (a + b).
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 13 June 1993
 ## Adapted-By: jwe
 
 function retval = beta (a, b)
 
   if (nargin != 2)
     usage ("beta (a, b)");
   endif
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} erfinv (@var{z})
 ## Computes the inverse of the error function.
 ## @end deftypefn
 ##
 ## @seealso{erf and erfc}
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 27 September 1994
 ## Adapted-By: jwe
 
 function [y, iterations] = erfinv (x)
 
   if (nargin != 1)
     usage ("erfinv (x)");
   endif
diff --git a/scripts/statistics/base/center.m b/scripts/statistics/base/center.m
--- a/scripts/statistics/base/center.m
+++ b/scripts/statistics/base/center.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} center (@var{x})
 ## @deftypefnx {Function File} {} center (@var{x}, @var{dim})
 ## If @var{x} is a vector, subtract its mean.
 ## If @var{x} is a matrix, do the above for each column.
 ## If the optional argument @var{dim} is given, perform the above
 ## operation along this dimension
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Center by subtracting means
 
 function retval = center (x, varargin)
 
   if (nargin != 1 && nargin != 2)
     usage ("center (x)");
   endif
 
diff --git a/scripts/statistics/base/cloglog.m b/scripts/statistics/base/cloglog.m
--- a/scripts/statistics/base/cloglog.m
+++ b/scripts/statistics/base/cloglog.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} cloglog (@var{x})
 ## Return the complementary log-log function of @var{x}, defined as
 ##
 ## @example
 ## - log (- log (@var{x}))
 ## @end example
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Complementary log-log function
 
 function y = cloglog (x)
 
   if (nargin != 1)
     usage ("cloglog (x)");
   endif
 
diff --git a/scripts/statistics/base/cor.m b/scripts/statistics/base/cor.m
--- a/scripts/statistics/base/cor.m
+++ b/scripts/statistics/base/cor.m
@@ -24,17 +24,17 @@
 ## @var{j}-th variable in @var{y}.
 ##
 ## For matrices, each row is an observation and each column a variable;
 ## vectors are always observations and may be row or column vectors.
 ##
 ## @code{cor (@var{x})} is equivalent to @code{cor (@var{x}, @var{x})}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute correlations
 
 function retval = cor (x, y)
 
   if (nargin < 1 || nargin > 2)
     usage ("cor (x, y)");
   endif
 
diff --git a/scripts/statistics/base/corrcoef.m b/scripts/statistics/base/corrcoef.m
--- a/scripts/statistics/base/corrcoef.m
+++ b/scripts/statistics/base/corrcoef.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} corrcoef (@var{x}, @var{y})
 ## If each row of @var{x} and @var{y} is an observation and each column is
 ## a variable, the (@var{i}, @var{j})-th entry of
 ## @code{corrcoef (@var{x}, @var{y})} is the correlation between the
 ## @var{i}-th variable in @var{x} and the @var{j}-th variable in @var{y}.
 ## If called with one argument, compute @code{corrcoef (@var{x}, @var{x})}.
 ## @end deftypefn
 
-## Author: Kurt Hornik <hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <hornik@wu-wien.ac.at>
 ## Created: March 1993
 ## Adapted-By: jwe
 
 function retval = corrcoef (x, y)
 
   if (nargin < 1 || nargin > 2)
     usage ("corrcoef (x, y)");
   endif
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} cov (@var{x}, @var{y})
 ## If each row of @var{x} and @var{y} is an observation and each column is
 ## a variable, the (@var{i}, @var{j})-th entry of
 ## @code{cov (@var{x}, @var{y})} is the covariance between the @var{i}-th
 ## variable in @var{x} and the @var{j}-th variable in @var{y}.  If called
 ## with one argument, compute @code{cov (@var{x}, @var{x})}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute covariances
 
 function c = cov (x, y)
 
   if (nargin < 1 || nargin > 2)
     usage ("cov (x, y)");
   endif
 
diff --git a/scripts/statistics/base/cut.m b/scripts/statistics/base/cut.m
--- a/scripts/statistics/base/cut.m
+++ b/scripts/statistics/base/cut.m
@@ -27,17 +27,17 @@
 ## the category has @code{length (@var{breaks}) - 1} groups.
 ##
 ## The returned value is a vector of the same size as @var{x} telling
 ## which group each point in @var{x} belongs to.  Groups are labelled
 ## from 1 to the number of groups; points outside the range of
 ## @var{breaks} are labelled by @code{NaN}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Cut data into intervals
 
 function group = cut (X, BREAKS)
 
   if (nargin != 2)
     usage ("cut (X, BREAKS)");
   endif
 
diff --git a/scripts/statistics/base/iqr.m b/scripts/statistics/base/iqr.m
--- a/scripts/statistics/base/iqr.m
+++ b/scripts/statistics/base/iqr.m
@@ -22,17 +22,17 @@
 ## If @var{x} is a vector, return the interquartile range, i.e., the
 ## difference between the upper and lower quartile, of the input data.
 ##
 ## If @var{x} is a matrix, do the above for first non singleton
 ## dimension of @var{x}.. If the option @var{dim} argument is given,
 ## then operate along this dimension.
 ## @end deftypefn
 
-## Author KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Interquartile range
 
 function y = iqr (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("iqr (x, dim)");
   endif
 
diff --git a/scripts/statistics/base/kendall.m b/scripts/statistics/base/kendall.m
--- a/scripts/statistics/base/kendall.m
+++ b/scripts/statistics/base/kendall.m
@@ -59,17 +59,17 @@
 ##  are the ranks of
 ## @var{x} and @var{y}, respectively.
 ##
 ## If @var{x} and @var{y} are drawn from independent distributions,
 ## Kendall's @var{tau} is asymptotically normal with mean 0 and variance
 ## @code{(2 * (2@var{n}+5)) / (9 * @var{n} * (@var{n}-1))}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Kendall's rank correlation tau
 
 function tau = kendall (x, y)
 
   if ((nargin < 1) || (nargin > 2))
     usage ("kendall (x, y)");
   endif
 
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -36,17 +36,17 @@
 ##
 ## @noindent
 ## of @var{x}.  If @var{x} is a matrix, return the kurtosis over the
 ## first non-singleton dimension. The optional argument @var{dim}
 ## can be given to force the kurtosis to be given over that 
 ## dimension.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 29 July 1994
 ## Adapted-By: jwe
 
 function retval = kurtosis (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("kurtosis (x, dim)");
   endif
diff --git a/scripts/statistics/base/logit.m b/scripts/statistics/base/logit.m
--- a/scripts/statistics/base/logit.m
+++ b/scripts/statistics/base/logit.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logit (@var{p})
 ## For each component of @var{p}, return the logit @code{log (@var{p} /
 ## (1-@var{p}))} of @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Logit transformation
 
 function y = logit (p)
 
   if (nargin == 1)
     y = logistic_inv (p);
   else
     usage ("logit (p)");
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -50,17 +50,17 @@
 ##
 ## If the optional argument @var{dim} is supplied, work along dimension
 ## @var{dim}.
 ##
 ## Both @var{dim} and @var{opt} are optional.  If both are supplied,
 ## either may appear first.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute arithmetic, geometric, and harmonic mean
 
 function y = mean (x, opt1, opt2)
 
   need_dim = 0;
 
   if (nargin == 1)
     opt = "a";
diff --git a/scripts/statistics/base/meansq.m b/scripts/statistics/base/meansq.m
--- a/scripts/statistics/base/meansq.m
+++ b/scripts/statistics/base/meansq.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} meansq (@var{x})
 ## @deftypefnx {Function File} {} meansq (@var{x}, @var{dim})
 ## For vector arguments, return the mean square of the values.
 ## For matrix arguments, return a row vector contaning the mean square
 ## of each column. With the optional @var{dim} argument, returns the
 ## mean squared of the values along this dimension
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute mean square
 
 function y = meansq (x, varargin)
 
   if (nargin != 1 && nargin != 2)
     usage ("meansq (x)");
   endif
 
diff --git a/scripts/statistics/base/moment.m b/scripts/statistics/base/moment.m
--- a/scripts/statistics/base/moment.m
+++ b/scripts/statistics/base/moment.m
@@ -37,17 +37,17 @@
 ##
 ## If the optional argument @var{dim} is supplied, work along dimension
 ## @var{dim}.
 ## @end deftypefn
 
 ## Can easily be made to work for continuous distributions (using quad)
 ## as well, but how does the general case work?
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute moments
 
 function m = moment (x, p, opt1, opt2)
 
   if ((nargin < 2) || (nargin > 4))
     usage ("moment (x, p, type, dim)");
   endif
 
diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -35,17 +35,17 @@
 ##
 ## @example
 ## ppplot (x, "uniform", 2, 4)
 ## @end example
 ##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a PP-plot (probability plot)
 
 function [p, y] = ppplot (x, dist, varargin)
 
   if (nargin < 1)
     usage ("ppplot (x, dist, params)");
   endif
 
diff --git a/scripts/statistics/base/probit.m b/scripts/statistics/base/probit.m
--- a/scripts/statistics/base/probit.m
+++ b/scripts/statistics/base/probit.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} probit (@var{p})
 ## For each component of @var{p}, return the probit (the quantile of the
 ## standard normal distribution) of @var{p}.
 ## @end deftypefn
 
-## Written by KH <Kurt.Hornik@ci.tuwien.ac.at> on 1995/02/04
+## Written by KH <Kurt.Hornik@wu-wien.ac.at> on 1995/02/04
 ## Description: Probit transformation
 
 function y = probit (p)
 
   if (nargin == 1)
     y = stdnormal_inv (p);
   else
     usage ("probit (p)");
diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -37,17 +37,17 @@
 ##
 ## @example
 ## qqplot (x, "uniform", 2, 4)
 ## @end example
 ##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a QQ-plot (quantile plot)
 
 function [q, s] = qqplot (x, dist, varargin)
 
   if (nargin < 1)
     usage ("qqplot (x, dist, params)");
   endif
 
diff --git a/scripts/statistics/base/range.m b/scripts/statistics/base/range.m
--- a/scripts/statistics/base/range.m
+++ b/scripts/statistics/base/range.m
@@ -24,17 +24,17 @@
 ## between the maximum and the minimum, of the input data.
 ##
 ## If @var{x} is a matrix, do the above for each column of @var{x}.
 ##
 ## If the optional argument @var{dim} is supplied, work along dimension
 ## @var{dim}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute range
 
 function y = range (x, varargin)
 
   if (nargin != 1 && nargin != 2)
     usage ("range (x, dim)");
   endif
 
diff --git a/scripts/statistics/base/ranks.m b/scripts/statistics/base/ranks.m
--- a/scripts/statistics/base/ranks.m
+++ b/scripts/statistics/base/ranks.m
@@ -22,17 +22,17 @@
 ## If @var{x} is a vector, return the (column) vector of ranks of
 ## @var{x} adjusted for ties.
 ##
 ## If @var{x} is a matrix, do the above for along the first 
 ## non-singleton dimension. If the optional argument @var{dim} is
 ## given, operate along this dimension.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute ranks
 
 ## This code was rather ugly, since it didn't use sort due to the
 ## fact of how to deal with ties. Now it does use sort and its
 ## even uglier!!! At least it handles NDArrays..
 
 function y = ranks (x, dim)
 
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -35,17 +35,17 @@
 ## @end ifinfo
 ##
 ## @noindent
 ## of @var{x}.  If @var{x} is a matrix, return the skewness along the
 ## first non-singleton dimension of the matrix. If the optional
 ## @var{dim} argument is given, operate along this dimension.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 29 July 1994
 ## Adapted-By: jwe
 
 function retval = skewness (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("skewness (x, dim)");
   endif
diff --git a/scripts/statistics/base/spearman.m b/scripts/statistics/base/spearman.m
--- a/scripts/statistics/base/spearman.m
+++ b/scripts/statistics/base/spearman.m
@@ -31,17 +31,17 @@
 ## For two data vectors @var{x} and @var{y}, Spearman's @var{rho} is the
 ## correlation of the ranks of @var{x} and @var{y}.
 ##
 ## If @var{x} and @var{y} are drawn from independent distributions,
 ## @var{rho} has zero mean and variance @code{1 / (n - 1)}, and is
 ## asymptotically normally distributed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Spearman's rank correlation rho
 
 function rho = spearman (x, y)
 
   if ((nargin < 1) || (nargin > 2))
     usage ("spearman (x, y)");
   endif
 
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} statistics (@var{x})
 ## If @var{x} is a matrix, return a matrix with the minimum, first
 ## quartile, median, third quartile, maximum, mean, standard deviation,
 ## skewness and kurtosis of the columns of @var{x} as its rows.
 ##
 ## If @var{x} is a vector, treat it as a column vector.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute basic statistics
 
 function S = statistics (X, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("S = statistics (X, dim)");
   endif
 
diff --git a/scripts/statistics/base/studentize.m b/scripts/statistics/base/studentize.m
--- a/scripts/statistics/base/studentize.m
+++ b/scripts/statistics/base/studentize.m
@@ -22,17 +22,17 @@
 ## If @var{x} is a vector, subtract its mean and divide by its standard
 ## deviation.
 ##
 ## If @var{x} is a matrix, do the above along the first non-singleton
 ## dimension. If the optional argument @var{dim} is given then operate
 ## along this dimension.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Subtract mean and divide by standard deviation
 
 function t = studentize (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("studentize (x, dim)");
   endif
 
diff --git a/scripts/statistics/base/table.m b/scripts/statistics/base/table.m
--- a/scripts/statistics/base/table.m
+++ b/scripts/statistics/base/table.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {[@var{t}, @var{l_x}] =} table (@var{x})
 ## @deftypefnx {Function File} {[@var{t}, @var{l_x}, @var{l_y}] =} table (@var{x}, @var{y})
 ## Create a contingency table @var{t} from data vectors.  The @var{l}
 ## vectors are the corresponding levels.
 ##
 ## Currently, only 1- and 2-dimensional tables are supported.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Cross tabulation
 
 function [t, v, w] = table (x, y)
 
   if (nargin == 1)
     if (! (isvector (x)))
       error ("table: x must be a vector");
     endif
diff --git a/scripts/statistics/base/values.m b/scripts/statistics/base/values.m
--- a/scripts/statistics/base/values.m
+++ b/scripts/statistics/base/values.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} values (@var{x})
 ## Return the different values in a column vector, arranged in ascending
 ## order.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Extract unique elements
 
 function v = values (x)
 
   if (nargin != 1)
     usage ("values (x)");
   endif
 
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -34,17 +34,17 @@
 ##   normalizes with N, this provides the square root of the second moment
 ##   around the mean
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the 
 ## variance is calculated.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute variance
 
 function y = var (x, opt, dim)
 
   if (nargin < 1 || nargin > 3)
     usage ("var (x, opt, sim)");
   endif
   if (nargin < 3)
diff --git a/scripts/statistics/distributions/betacdf.m b/scripts/statistics/distributions/betacdf.m
--- a/scripts/statistics/distributions/betacdf.m
+++ b/scripts/statistics/distributions/betacdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} betacdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, returns the CDF at @var{x} of the beta
 ## distribution with parameters @var{a} and @var{b}, i.e.,
 ## PROB (beta (@var{a}, @var{b}) <= @var{x}).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Beta distribution
 
 function cdf = betacdf (x, a, b)
 
   if (nargin != 3)
     usage ("betacdf (a, b, x)");
   endif
 
diff --git a/scripts/statistics/distributions/betainv.m b/scripts/statistics/distributions/betainv.m
--- a/scripts/statistics/distributions/betainv.m
+++ b/scripts/statistics/distributions/betainv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} betainv (@var{x}, @var{a}, @var{b})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Beta distribution with parameters @var{a}
 ## and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Beta distribution
 
 function inv = betainv (x, a, b)
 
   if (nargin != 3)
     usage ("betainv (x, a, b)");
   endif
 
diff --git a/scripts/statistics/distributions/betapdf.m b/scripts/statistics/distributions/betapdf.m
--- a/scripts/statistics/distributions/betapdf.m
+++ b/scripts/statistics/distributions/betapdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} betapdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, returns the PDF at @var{x} of the beta
 ## distribution with parameters @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Beta distribution
 
 function pdf = betapdf (x, a, b)
 
   if (nargin != 3)
     usage ("betapdf (a, b, x)");
   endif
   
diff --git a/scripts/statistics/distributions/betarnd.m b/scripts/statistics/distributions/betarnd.m
--- a/scripts/statistics/distributions/betarnd.m
+++ b/scripts/statistics/distributions/betarnd.m
@@ -24,17 +24,17 @@
 ## random samples from the Beta distribution with parameters @var{a} and
 ## @var{b}.  Both @var{a} and @var{b} must be scalar or of size @var{r}
 ##  by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Beta distribution
 
 function rnd = betarnd (a, b, r, c)
 
   if (nargin > 1)
     if (!isscalar(a) || !isscalar(b)) 
       [retval, a, b] = common_size (a, b);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/binocdf.m b/scripts/statistics/distributions/binocdf.m
--- a/scripts/statistics/distributions/binocdf.m
+++ b/scripts/statistics/distributions/binocdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binocdf (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## binomial distribution with parameters @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the binomial distribution
 
 function cdf = binocdf (x, n, p)
 
   if (nargin != 3)
     usage ("binocdf (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/binoinv.m b/scripts/statistics/distributions/binoinv.m
--- a/scripts/statistics/distributions/binoinv.m
+++ b/scripts/statistics/distributions/binoinv.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binoinv (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## binomial distribution with parameters @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the binomial distribution
 
 function inv = binoinv (x, n, p)
 
   if (nargin != 3)
     usage ("binoinv (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/binopdf.m b/scripts/statistics/distributions/binopdf.m
--- a/scripts/statistics/distributions/binopdf.m
+++ b/scripts/statistics/distributions/binopdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binopdf (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the binomial distribution with parameters @var{n}
 ## and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the binomial distribution
 
 function pdf = binopdf (x, n, p)
 
   if (nargin != 3)
     usage ("binopdf (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/binornd.m b/scripts/statistics/distributions/binornd.m
--- a/scripts/statistics/distributions/binornd.m
+++ b/scripts/statistics/distributions/binornd.m
@@ -24,17 +24,17 @@
 ## random samples from the binomial distribution with parameters @var{n}
 ## and @var{p}.  Both @var{n} and @var{p} must be scalar or of size
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{n} and @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the binomial distribution
 
 function rnd = binornd (n, p, r, c)
 
   if (nargin > 1)
     if (!isscalar(n) || !isscalar(p)) 
       [retval, n, p] = common_size (n, p);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/cauchy_cdf.m b/scripts/statistics/distributions/cauchy_cdf.m
--- a/scripts/statistics/distributions/cauchy_cdf.m
+++ b/scripts/statistics/distributions/cauchy_cdf.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cauchy_cdf (@var{x}, @var{lambda}, @var{sigma})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the Cauchy distribution with location
 ## parameter @var{lambda} and scale parameter @var{sigma}.  Default
 ## values are @var{lambda} = 0, @var{sigma} = 1. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Cauchy distribution
 
 function cdf = cauchy_cdf (x, location, scale)
 
   if (! (nargin == 1 || nargin == 3))
     usage ("cauchy_cdf (x, lambda, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/cauchy_inv.m b/scripts/statistics/distributions/cauchy_inv.m
--- a/scripts/statistics/distributions/cauchy_inv.m
+++ b/scripts/statistics/distributions/cauchy_inv.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cauchy_inv (@var{x}, @var{lambda}, @var{sigma})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the Cauchy distribution with location parameter
 ## @var{lambda} and scale parameter @var{sigma}.  Default values are
 ## @var{lambda} = 0, @var{sigma} = 1. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Cauchy distribution
 
 function inv = cauchy_inv (x, location, scale)
 
   if (! (nargin == 1 || nargin == 3))
     usage ("cauchy_inv (x, lambda, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/cauchy_pdf.m b/scripts/statistics/distributions/cauchy_pdf.m
--- a/scripts/statistics/distributions/cauchy_pdf.m
+++ b/scripts/statistics/distributions/cauchy_pdf.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cauchy_pdf (@var{x}, @var{lambda}, @var{sigma})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the Cauchy distribution with location parameter
 ## @var{lambda} and scale parameter @var{sigma} > 0.  Default values are
 ## @var{lambda} = 0, @var{sigma} = 1. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Cauchy distribution
 
 function pdf = cauchy_pdf (x, location, scale)
 
   if (! (nargin == 1 || nargin == 3))
     usage ("cauchy_pdf (x, lambda, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/cauchy_rnd.m b/scripts/statistics/distributions/cauchy_rnd.m
--- a/scripts/statistics/distributions/cauchy_rnd.m
+++ b/scripts/statistics/distributions/cauchy_rnd.m
@@ -23,17 +23,17 @@
 ## Return an @var{r} by @var{c} or a @code{size (@var{sz})} matrix of 
 ## random samples from the Cauchy distribution with parameters @var{lambda} 
 ## and @var{sigma} which must both be scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{lambda} and @var{sigma}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Cauchy distribution
 
 function rnd = cauchy_rnd (l, scale, r, c)
 
   if (nargin > 1)
     if (!isscalar (l) || !isscalar (scale)) 
       [retval, l, scale] = common_size (l, scale);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/chi2rnd.m b/scripts/statistics/distributions/chi2rnd.m
--- a/scripts/statistics/distributions/chi2rnd.m
+++ b/scripts/statistics/distributions/chi2rnd.m
@@ -23,17 +23,17 @@
 ## Return an @var{r} by @var{c}  or a @code{size (@var{sz})} matrix of 
 ## random samples from the chisquare distribution with @var{n} degrees 
 ## of freedom.  @var{n} must be a scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the chi-square distribution
 
 function rnd = chi2rnd (n, r, c)
 
   if (nargin == 3)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("chi2rnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/discrete_cdf.m b/scripts/statistics/distributions/discrete_cdf.m
--- a/scripts/statistics/distributions/discrete_cdf.m
+++ b/scripts/statistics/distributions/discrete_cdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_cdf (@var{x}, @var{v}, @var{p})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of a univariate discrete distribution which
 ## assumes the values in v with probabilities @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of a discrete distribution
 
 function cdf = discrete_cdf (x, v, p)
 
   if (nargin != 3)
     usage ("discrete_cdf (x, v, p)");
   endif
 
diff --git a/scripts/statistics/distributions/discrete_inv.m b/scripts/statistics/distributions/discrete_inv.m
--- a/scripts/statistics/distributions/discrete_inv.m
+++ b/scripts/statistics/distributions/discrete_inv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_inv (@var{x}, @var{v}, @var{p})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the univariate distribution which assumes the
 ## values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of a discrete distribution
 
 function inv = discrete_inv (x, v, p)
 
   if (nargin != 3)
     usage ("discrete_inv (x, v, p)");
   endif
 
diff --git a/scripts/statistics/distributions/discrete_pdf.m b/scripts/statistics/distributions/discrete_pdf.m
--- a/scripts/statistics/distributions/discrete_pdf.m
+++ b/scripts/statistics/distributions/discrete_pdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_pdf (@var{x}, @var{v}, @var{p})
 ## For each element of @var{x}, compute the probability density function
 ## (pDF) at @var{x} of a univariate discrete distribution which assumes
 ## the values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: pDF of a discrete distribution
 
 function pdf = discrete_pdf (x, v, p)
 
   if (nargin != 3)
     usage ("discrete_pdf (x, v, p)");
   endif
 
diff --git a/scripts/statistics/distributions/discrete_rnd.m b/scripts/statistics/distributions/discrete_rnd.m
--- a/scripts/statistics/distributions/discrete_rnd.m
+++ b/scripts/statistics/distributions/discrete_rnd.m
@@ -25,17 +25,17 @@
 ## the univariate distribution which assumes the values in @var{v} with
 ## probabilities @var{p}. @var{n} must be a scalar.
 ##
 ## If @var{r} and @var{c} are given create a matrix with @var{r} rows and
 ## @var{c} columns. Or if @var{sz} is a vector, create a matrix of size
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from a discrete distribution
 
 function rnd = discrete_rnd (v, p, r, c)
 
   if (nargin == 4)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("discrete_rnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/empirical_cdf.m b/scripts/statistics/distributions/empirical_cdf.m
--- a/scripts/statistics/distributions/empirical_cdf.m
+++ b/scripts/statistics/distributions/empirical_cdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_cdf (@var{x}, @var{data})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the empirical distribution obtained from
 ## the univariate sample @var{data}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the empirical distribution
 
 function cdf = empirical_cdf (x, data)
 
   if (! isvector (data))
     error ("empirical_cdf: data must be a vector");
   endif
 
diff --git a/scripts/statistics/distributions/empirical_inv.m b/scripts/statistics/distributions/empirical_inv.m
--- a/scripts/statistics/distributions/empirical_inv.m
+++ b/scripts/statistics/distributions/empirical_inv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_inv (@var{x}, @var{data})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the empirical distribution obtained from the
 ## univariate sample @var{data}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the empirical distribution
 
 function inv = empirical_inv (x, data)
 
   if (! isvector (data))
     error ("empirical_inv: data must be a vector");
   endif
 
diff --git a/scripts/statistics/distributions/empirical_pdf.m b/scripts/statistics/distributions/empirical_pdf.m
--- a/scripts/statistics/distributions/empirical_pdf.m
+++ b/scripts/statistics/distributions/empirical_pdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_pdf (@var{x}, @var{data})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the empirical distribution obtained from the
 ## univariate sample @var{data}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the empirical distribution
 
 function pdf = empirical_pdf (x, data)
 
   if (! isvector (data))
     error ("empirical_pdf: data must be a vector");
   endif
 
diff --git a/scripts/statistics/distributions/empirical_rnd.m b/scripts/statistics/distributions/empirical_rnd.m
--- a/scripts/statistics/distributions/empirical_rnd.m
+++ b/scripts/statistics/distributions/empirical_rnd.m
@@ -24,17 +24,17 @@
 ## Generate a bootstrap sample of size @var{n} from the empirical
 ## distribution obtained from the univariate sample @var{data}.
 ##
 ## If @var{r} and @var{c} are given create a matrix with @var{r} rows and
 ## @var{c} columns. Or if @var{sz} is a vector, create a matrix of size
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Bootstrap samples from the empirical distribution
 
 function rnd = empirical_rnd (data, r, c)
 
   if (nargin == 2)
     if (isscalar(data))
       c = data;
       data = r;
diff --git a/scripts/statistics/distributions/expcdf.m b/scripts/statistics/distributions/expcdf.m
--- a/scripts/statistics/distributions/expcdf.m
+++ b/scripts/statistics/distributions/expcdf.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} expcdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the exponential distribution with
 ## parameter @var{lambda}.
 ##
 ## The arguments can be of common size or scalar.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the exponential distribution
 
 function cdf = expcdf (x, l)
 
   if (nargin != 2)
     usage ("expcdf (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/expinv.m b/scripts/statistics/distributions/expinv.m
--- a/scripts/statistics/distributions/expinv.m
+++ b/scripts/statistics/distributions/expinv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} expinv (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the exponential distribution with parameter
 ## @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the exponential distribution
 
 function inv = expinv (x, l)
 
   if (nargin != 2)
     usage ("expinv (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/exppdf.m b/scripts/statistics/distributions/exppdf.m
--- a/scripts/statistics/distributions/exppdf.m
+++ b/scripts/statistics/distributions/exppdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} exppdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) of the exponential distribution with parameter @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the exponential distribution
 
 function pdf = exppdf (x, l)
 
   if (nargin != 2)
     usage ("exppdf (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/exprnd.m b/scripts/statistics/distributions/exprnd.m
--- a/scripts/statistics/distributions/exprnd.m
+++ b/scripts/statistics/distributions/exprnd.m
@@ -24,17 +24,17 @@
 ## exponential distribution with parameter @var{lambda}, which must be a
 ## scalar or of size @var{r} by @var{c}. Or if @var{sz} is a vector, 
 ## create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the exponential distribution
 
 function rnd = exprnd (l, r, c)
 
   if (nargin == 3)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("exprnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/fcdf.m b/scripts/statistics/distributions/fcdf.m
--- a/scripts/statistics/distributions/fcdf.m
+++ b/scripts/statistics/distributions/fcdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fcdf (@var{x}, @var{m}, @var{n})
 ## For each element of @var{x}, compute the CDF at @var{x} of the F
 ## distribution with @var{m} and @var{n} degrees of freedom, i.e.,
 ## PROB (F (@var{m}, @var{n}) <= @var{x}). 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the F distribution
 
 function cdf = fcdf (x, m, n)
 
   if (nargin != 3)
     usage ("fcdf (x, m, n)");
   endif
 
diff --git a/scripts/statistics/distributions/finv.m b/scripts/statistics/distributions/finv.m
--- a/scripts/statistics/distributions/finv.m
+++ b/scripts/statistics/distributions/finv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} finv (@var{x}, @var{m}, @var{n})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the F distribution with parameters @var{m} and
 ## @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the F distribution
 
 function inv = finv (x, m, n)
 
   if (nargin != 3)
     usage ("finv (x, m, n)");
   endif
 
diff --git a/scripts/statistics/distributions/fpdf.m b/scripts/statistics/distributions/fpdf.m
--- a/scripts/statistics/distributions/fpdf.m
+++ b/scripts/statistics/distributions/fpdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fpdf (@var{x}, @var{m}, @var{n})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the F distribution with @var{m} and @var{n}
 ## degrees of freedom.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the F distribution
 
 function pdf = fpdf (x, m, n)
 
   if (nargin != 3)
     usage ("fpdf (x, m, n)");
   endif
 
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -25,17 +25,17 @@
 ## @var{m} and @var{n} must be scalar or of size @var{r} by @var{c}.
 ## If @var{sz} is a vector the random samples are in a matrix of 
 ## size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{m} and @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the F distribution
 
 function rnd = frnd (m, n, r, c)
 
   if (nargin > 1)
     if (!isscalar(m) || !isscalar(n)) 
       [retval, m, n] = common_size (m, n);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/gaminv.m b/scripts/statistics/distributions/gaminv.m
--- a/scripts/statistics/distributions/gaminv.m
+++ b/scripts/statistics/distributions/gaminv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gaminv (@var{x}, @var{a}, @var{b})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Gamma distribution with parameters @var{a}
 ## and @var{b}. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Gamma distribution
 
 function inv = gaminv (x, a, b)
 
   if (nargin != 3)
     usage ("gaminv (x, a, b)");
   endif
 
diff --git a/scripts/statistics/distributions/gamrnd.m b/scripts/statistics/distributions/gamrnd.m
--- a/scripts/statistics/distributions/gamrnd.m
+++ b/scripts/statistics/distributions/gamrnd.m
@@ -24,17 +24,17 @@
 ## random samples from the Gamma distribution with parameters @var{a}
 ## and @var{b}.  Both @var{a} and @var{b} must be scalar or of size 
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Gamma distribution
 
 function rnd = gamrnd (a, b, r, c)
 
   if (nargin > 1)
     if (!isscalar(a) || !isscalar(b)) 
       [retval, a, b] = common_size (a, b);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/geocdf.m b/scripts/statistics/distributions/geocdf.m
--- a/scripts/statistics/distributions/geocdf.m
+++ b/scripts/statistics/distributions/geocdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geocdf (@var{x}, @var{p})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the geometric distribution
 
 function cdf = geocdf (x, p)
 
   if (nargin != 2)
     usage ("geocdf (x, p)");
   endif
 
diff --git a/scripts/statistics/distributions/geoinv.m b/scripts/statistics/distributions/geoinv.m
--- a/scripts/statistics/distributions/geoinv.m
+++ b/scripts/statistics/distributions/geoinv.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geoinv (@var{x}, @var{p})
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the geometric distribution
 
 function inv = geoinv (x, p)
 
   if (nargin != 2)
     usage ("geoinv (x, p)");
   endif
 
diff --git a/scripts/statistics/distributions/geopdf.m b/scripts/statistics/distributions/geopdf.m
--- a/scripts/statistics/distributions/geopdf.m
+++ b/scripts/statistics/distributions/geopdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geopdf (@var{x}, @var{p})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the geometric distribution with parameter @var{p}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the geometric distribution
 
 function pdf = geopdf (x, p)
 
   if (nargin != 2)
     usage ("geopdf (x, p)");
   endif
 
diff --git a/scripts/statistics/distributions/geornd.m b/scripts/statistics/distributions/geornd.m
--- a/scripts/statistics/distributions/geornd.m
+++ b/scripts/statistics/distributions/geornd.m
@@ -24,17 +24,17 @@
 ## geometric distribution with parameter @var{p}, which must be a scalar
 ## or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are given create a matrix with @var{r} rows and
 ## @var{c} columns. Or if @var{sz} is a vector, create a matrix of size
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the geometric distribution
 
 function rnd = geornd (p, r, c)
 
   if (nargin == 3)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("geornd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/hygecdf.m b/scripts/statistics/distributions/hygecdf.m
--- a/scripts/statistics/distributions/hygecdf.m
+++ b/scripts/statistics/distributions/hygecdf.m
@@ -25,17 +25,17 @@
 ## marked items when randomly drawing a sample of size @var{n} without
 ## replacement from a population of total size @var{t} containing
 ## @var{m} marked items.
 ##
 ## The parameters @var{m}, @var{t}, and @var{n} must positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the hypergeometric distribution
 
 function cdf = hygecdf (x, m, t, n)
 
   if (nargin != 4)
     usage ("hygecdf (x, m, t, n)");
   endif
 
diff --git a/scripts/statistics/distributions/hygeinv.m b/scripts/statistics/distributions/hygeinv.m
--- a/scripts/statistics/distributions/hygeinv.m
+++ b/scripts/statistics/distributions/hygeinv.m
@@ -22,17 +22,17 @@
 ## For each element of @var{x}, compute the quantile at @var{x} of the
 ## hypergeometric distribution with parameters @var{m}, @var{t}, and
 ## @var{n}.
 ##
 ## The parameters @var{m}, @var{t}, and @var{n} must positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the hypergeometric distribution
 
 function inv = hygeinv (x, m, t, n)
 
   if (nargin != 4)
     usage ("hygeinv (x, m, t, n)");
   endif
 
diff --git a/scripts/statistics/distributions/hygepdf.m b/scripts/statistics/distributions/hygepdf.m
--- a/scripts/statistics/distributions/hygepdf.m
+++ b/scripts/statistics/distributions/hygepdf.m
@@ -23,17 +23,17 @@
 ## hypergeometric distribution with parameters @var{m}, @var{t}, and
 ## @var{n}. This is the probability of obtaining @var{x} marked items
 ## when randomly drawing a sample of size @var{n} without replacement
 ## from a population of total size @var{t} containing @var{m} marked items.
 ##
 ## The arguments must be of common size or scalar.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the hypergeometric distribution
 
 function pdf = hygepdf (x, m, t, n)
 
   if (nargin != 4)
     usage ("hygepdf (x, m, t, n)");
   endif
 
diff --git a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
--- a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
+++ b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
@@ -35,17 +35,17 @@
 ##
 ## @noindent
 ## for @var{x} > 0.
 ##
 ## The optional parameter @var{tol} specifies the precision up to which
 ## the series should be evaluated;  the default is @var{tol} = @code{eps}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Kolmogorov-Smirnov distribution
 
 function cdf = kolmogorov_smirnov_cdf (x, tol)
 
   if (nargin < 1 || nargin > 2)
     usage ("kolmogorov_smirnov_cdf (x, tol)");
   endif
 
diff --git a/scripts/statistics/distributions/laplace_cdf.m b/scripts/statistics/distributions/laplace_cdf.m
--- a/scripts/statistics/distributions/laplace_cdf.m
+++ b/scripts/statistics/distributions/laplace_cdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_cdf (@var{x})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Laplace distribution
 
 function cdf = laplace_cdf (x)
 
   if (nargin != 1)
     usage ("laplace_cdf (x)");
   endif
 
diff --git a/scripts/statistics/distributions/laplace_inv.m b/scripts/statistics/distributions/laplace_inv.m
--- a/scripts/statistics/distributions/laplace_inv.m
+++ b/scripts/statistics/distributions/laplace_inv.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_inv (@var{x})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Laplace distribution
 
 function inv = laplace_inv (x)
 
   if (nargin != 1)
     usage ("laplace_inv (x)");
   endif
 
diff --git a/scripts/statistics/distributions/laplace_pdf.m b/scripts/statistics/distributions/laplace_pdf.m
--- a/scripts/statistics/distributions/laplace_pdf.m
+++ b/scripts/statistics/distributions/laplace_pdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_pdf (@var{x})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Laplace distribution
 
 function pdf = laplace_pdf (x)
 
   if (nargin != 1)
     usage ("laplace_pdf (x)");
   endif
 
diff --git a/scripts/statistics/distributions/laplace_rnd.m b/scripts/statistics/distributions/laplace_rnd.m
--- a/scripts/statistics/distributions/laplace_rnd.m
+++ b/scripts/statistics/distributions/laplace_rnd.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_rnd (@var{r}, @var{c})
 ## @deftypefnx {Function File} {} laplace_rnd (@var{sz});
 ## Return an @var{r} by @var{c} matrix of random numbers from the
 ## Laplace distribution. Or is @var{sz} is a vector, create a matrix of
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Laplace distribution
 
 function rnd = laplace_rnd (r, c)
 
   if (nargin == 2)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("laplace_rnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/logistic_cdf.m b/scripts/statistics/distributions/logistic_cdf.m
--- a/scripts/statistics/distributions/logistic_cdf.m
+++ b/scripts/statistics/distributions/logistic_cdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logistic_cdf (@var{x})
 ## For each component of @var{x}, compute the CDF at @var{x} of the
 ## logistic distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the logistic distribution
 
 function cdf = logistic_cdf (x)
 
   if (nargin != 1)
     usage ("logistic_cdf (x)");
   endif
 
diff --git a/scripts/statistics/distributions/logistic_inv.m b/scripts/statistics/distributions/logistic_inv.m
--- a/scripts/statistics/distributions/logistic_inv.m
+++ b/scripts/statistics/distributions/logistic_inv.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logistic_inv (@var{x})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the logistic distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the logistic distribution
 
 function inv = logistic_inv (x)
 
   if (nargin != 1)
     usage ("logistic_inv (x)");
   endif
 
diff --git a/scripts/statistics/distributions/logistic_pdf.m b/scripts/statistics/distributions/logistic_pdf.m
--- a/scripts/statistics/distributions/logistic_pdf.m
+++ b/scripts/statistics/distributions/logistic_pdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logistic_pdf (@var{x})
 ## For each component of @var{x}, compute the PDF at @var{x} of the
 ## logistic distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the logistic distribution
 
 function pdf = logistic_pdf (x)
 
   if (nargin != 1)
     usage ("logistic_pdf (x)");
   endif
 
diff --git a/scripts/statistics/distributions/logistic_rnd.m b/scripts/statistics/distributions/logistic_rnd.m
--- a/scripts/statistics/distributions/logistic_rnd.m
+++ b/scripts/statistics/distributions/logistic_rnd.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logistic_rnd (@var{r}, @var{c})
 ## @deftypefnx {Function File} {} logistic_rnd (@var{sz})
 ## Return an @var{r} by @var{c} matrix of random numbers from the
 ## logistic distribution. Or is @var{sz} is a vector, create a matrix of
 ## @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the logistic distribution
 
 function rnd = logistic_rnd (r, c)
 
 
   if (nargin == 2)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("logistic_rnd: r must be a positive integer");
diff --git a/scripts/statistics/distributions/logncdf.m b/scripts/statistics/distributions/logncdf.m
--- a/scripts/statistics/distributions/logncdf.m
+++ b/scripts/statistics/distributions/logncdf.m
@@ -23,17 +23,17 @@
 ## function (CDF) at @var{x} of the lognormal distribution with
 ## parameters @var{a} and @var{v}.  If a random variable follows this
 ## distribution, its logarithm is normally distributed with mean
 ## @code{log (@var{a})} and variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the log normal distribution
 
 function cdf = logncdf (x, a, v)
 
   if (! ((nargin == 1) || (nargin == 3)))
     usage ("logncdf (x, a, v)");
   endif
 
diff --git a/scripts/statistics/distributions/logninv.m b/scripts/statistics/distributions/logninv.m
--- a/scripts/statistics/distributions/logninv.m
+++ b/scripts/statistics/distributions/logninv.m
@@ -23,17 +23,17 @@
 ## CDF) at @var{x} of the lognormal distribution with parameters @var{a}
 ## and @var{v}.  If a random variable follows this distribution, its
 ## logarithm is normally distributed with mean @code{log (@var{a})} and
 ## variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the log normal distribution
 
 function inv = logninv (x, a, v)
 
   if (! ((nargin == 1) || (nargin == 3)))
     usage ("logninv (x, a, v)");
   endif
 
diff --git a/scripts/statistics/distributions/lognpdf.m b/scripts/statistics/distributions/lognpdf.m
--- a/scripts/statistics/distributions/lognpdf.m
+++ b/scripts/statistics/distributions/lognpdf.m
@@ -23,17 +23,17 @@
 ## (PDF) at @var{x} of the lognormal distribution with parameters
 ## @var{a} and @var{v}.  If a random variable follows this distribution,
 ## its logarithm is normally distributed with mean @code{log (@var{a})}
 ## and variance @var{v}.
 ##
 ## Default values are @var{a} = 1, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the log normal distribution
 
 function pdf = lognpdf (x, a, v)
 
   if (! ((nargin == 1) || (nargin == 3)))
     usage ("lognpdf (x, a, v)");
   endif
 
diff --git a/scripts/statistics/distributions/lognrnd.m b/scripts/statistics/distributions/lognrnd.m
--- a/scripts/statistics/distributions/lognrnd.m
+++ b/scripts/statistics/distributions/lognrnd.m
@@ -24,17 +24,17 @@
 ## lognormal distribution with parameters @var{a} and @var{v}. Both
 ## @var{a} and @var{v} must be scalar or of size @var{r} by @var{c}.
 ## Or if @var{sz} is a vector, create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{v}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the log normal distribution
 
 function rnd = lognrnd (a, v, r, c)
 
   if (nargin > 1)
     if (!isscalar(a) || !isscalar(v)) 
       [retval, a, v] = common_size (a, v);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/norminv.m b/scripts/statistics/distributions/norminv.m
--- a/scripts/statistics/distributions/norminv.m
+++ b/scripts/statistics/distributions/norminv.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} norminv (@var{x}, @var{m}, @var{v})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the normal distribution with mean @var{m} and
 ## variance @var{v}.
 ##
 ## Default values are @var{m} = 0, @var{v} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the normal distribution
 
 function inv = norminv (x, m, v)
 
   if (nargin != 1 && nargin != 3)
     usage ("norminv (x, m, v)");
   endif
 
diff --git a/scripts/statistics/distributions/normrnd.m b/scripts/statistics/distributions/normrnd.m
--- a/scripts/statistics/distributions/normrnd.m
+++ b/scripts/statistics/distributions/normrnd.m
@@ -24,17 +24,17 @@
 ## random samples from the normal distribution with parameters @var{m} 
 ## and @var{v}.  Both @var{m} and @var{v} must be scalar or of size 
 ## @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{m} and @var{v}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the normal distribution
 
 function rnd = normrnd (m, v, r, c)
 
   if (nargin > 1)
     if (!isscalar(m) || !isscalar(v)) 
       [retval, m, v] = common_size (m, v);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/pascal_cdf.m b/scripts/statistics/distributions/pascal_cdf.m
--- a/scripts/statistics/distributions/pascal_cdf.m
+++ b/scripts/statistics/distributions/pascal_cdf.m
@@ -22,17 +22,17 @@
 ## For each element of @var{x}, compute the CDF at x of the Pascal
 ## (negative binomial) distribution with parameters @var{n} and @var{p}.
 ##
 ## The number of failures in a Bernoulli experiment with success
 ## probability @var{p} before the @var{n}-th success follows this
 ## distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Pascal (negative binomial) distribution
 
 function cdf = pascal_cdf (x, n, p)
 
   if (nargin != 3)
     usage ("pascal_cdf (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/pascal_inv.m b/scripts/statistics/distributions/pascal_inv.m
--- a/scripts/statistics/distributions/pascal_inv.m
+++ b/scripts/statistics/distributions/pascal_inv.m
@@ -23,17 +23,17 @@
 ## Pascal (negative binomial) distribution with parameters @var{n} and
 ## @var{p}.
 ##
 ## The number of failures in a Bernoulli experiment with success
 ## probability @var{p} before the @var{n}-th success follows this
 ## distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Pascal distribution
 
 function inv = pascal_inv (x, n, p)
 
   if (nargin != 3)
     usage ("pascal_inv (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/pascal_pdf.m b/scripts/statistics/distributions/pascal_pdf.m
--- a/scripts/statistics/distributions/pascal_pdf.m
+++ b/scripts/statistics/distributions/pascal_pdf.m
@@ -23,17 +23,17 @@
 ## (PDF) at @var{x} of the Pascal (negative binomial) distribution with
 ## parameters @var{n} and @var{p}.
 ##
 ## The number of failures in a Bernoulli experiment with success
 ## probability @var{p} before the @var{n}-th success follows this
 ## distribution. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Pascal (negative binomial) distribution
 
 function pdf = pascal_pdf (x, n, p)
 
   if (nargin != 3)
     usage ("pascal_pdf (x, n, p)");
   endif
 
diff --git a/scripts/statistics/distributions/pascal_rnd.m b/scripts/statistics/distributions/pascal_rnd.m
--- a/scripts/statistics/distributions/pascal_rnd.m
+++ b/scripts/statistics/distributions/pascal_rnd.m
@@ -24,17 +24,17 @@
 ## (negative binomial) distribution with parameters @var{n} and @var{p}.
 ## Both @var{n} and @var{p} must be scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{n} and @var{p}. Or if @var{sz} is a vector, 
 ## create a matrix of size @var{sz}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Pascal distribution
 
 function rnd = pascal_rnd (n, p, r, c)
 
   if (nargin > 1)
     if (!isscalar(n) || !isscalar(p)) 
       [retval, n, p] = common_size (n, p);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/poisscdf.m b/scripts/statistics/distributions/poisscdf.m
--- a/scripts/statistics/distributions/poisscdf.m
+++ b/scripts/statistics/distributions/poisscdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisscdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of the Poisson distribution with parameter
 ## lambda.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Poisson distribution
 
 function cdf = poisscdf (x, l)
 
   if (nargin != 2)
     usage ("poisscdf (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/poissinv.m b/scripts/statistics/distributions/poissinv.m
--- a/scripts/statistics/distributions/poissinv.m
+++ b/scripts/statistics/distributions/poissinv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poissinv (@var{x}, @var{lambda})
 ## For each component of @var{x}, compute the quantile (the inverse of
 ## the CDF) at @var{x} of the Poisson distribution with parameter
 ## @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Poisson distribution
 
 function inv = poissinv (x, l)
 
   if (nargin != 2)
     usage ("poissinv (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/poisspdf.m b/scripts/statistics/distributions/poisspdf.m
--- a/scripts/statistics/distributions/poisspdf.m
+++ b/scripts/statistics/distributions/poisspdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisspdf (@var{x}, @var{lambda})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the poisson distribution with parameter @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Poisson distribution
 
 function pdf = poisspdf (x, l)
 
   if (nargin != 2)
     usage ("poisspdf (x, lambda)");
   endif
 
diff --git a/scripts/statistics/distributions/poissrnd.m b/scripts/statistics/distributions/poissrnd.m
--- a/scripts/statistics/distributions/poissrnd.m
+++ b/scripts/statistics/distributions/poissrnd.m
@@ -22,17 +22,17 @@
 ## Return an @var{r} by @var{c} matrix of random samples from the
 ## Poisson distribution with parameter @var{lambda}, which must be a 
 ## scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{lambda}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Poisson distribution
 
 function rnd = poissrnd (l, r, c)
 
   if (nargin == 3)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("poissrnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/stdnormal_cdf.m b/scripts/statistics/distributions/stdnormal_cdf.m
--- a/scripts/statistics/distributions/stdnormal_cdf.m
+++ b/scripts/statistics/distributions/stdnormal_cdf.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stdnormal_cdf (@var{x})
 ## For each component of @var{x}, compute the CDF of the standard normal
 ## distribution at @var{x}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the standard normal distribution
 
 function cdf = stdnormal_cdf (x)
 
   if (nargin != 1)
     usage ("stdnormal_cdf (x)");
   endif
 
diff --git a/scripts/statistics/distributions/stdnormal_inv.m b/scripts/statistics/distributions/stdnormal_inv.m
--- a/scripts/statistics/distributions/stdnormal_inv.m
+++ b/scripts/statistics/distributions/stdnormal_inv.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stdnormal_inv (@var{x})
 ## For each component of @var{x}, compute compute the quantile (the
 ## inverse of the CDF) at @var{x} of the standard normal distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the standard normal distribution
 
 function inv = stdnormal_inv (x)
 
   if (nargin != 1)
     usage ("stdnormal_inv (x)");
   endif
 
diff --git a/scripts/statistics/distributions/stdnormal_rnd.m b/scripts/statistics/distributions/stdnormal_rnd.m
--- a/scripts/statistics/distributions/stdnormal_rnd.m
+++ b/scripts/statistics/distributions/stdnormal_rnd.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stdnormal_rnd (@var{r}, @var{c})
 ## @deftypefnx {Function File} {} stdnormal_rnd (@var{sz})
 ## Return an @var{r} by @var{c} or @code{size (@var{sz})} matrix of 
 ## random numbers from the standard normal distribution.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the standard normal distribution
 
 function rnd = stdnormal_rnd (r, c)
 
   if (nargin != 1 && nargin != 2)
     usage ("stdnormal_rnd (r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/tcdf.m b/scripts/statistics/distributions/tcdf.m
--- a/scripts/statistics/distributions/tcdf.m
+++ b/scripts/statistics/distributions/tcdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tcdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the CDF at @var{x} of the
 ## t (Student) distribution with @var{n} degrees of freedom, i.e.,
 ## PROB (t(@var{n}) <= @var{x}).
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the t distribution
 
 function cdf = tcdf (x, n)
 
   if (nargin != 2)
     usage ("tcdf (x, n)");
   endif
 
diff --git a/scripts/statistics/distributions/tinv.m b/scripts/statistics/distributions/tinv.m
--- a/scripts/statistics/distributions/tinv.m
+++ b/scripts/statistics/distributions/tinv.m
@@ -23,17 +23,17 @@
 ## the CDF) at @var{x} of the t (Student) distribution with parameter
 ## @var{n}.
 ## @end deftypefn
 
 ## For very large n, the "correct" formula does not really work well,
 ## and the quantiles of the standard normal distribution are used
 ## directly.
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the t distribution
 
 function inv = tinv (x, n)
 
   if (nargin != 2)
     usage ("tinv (x, n)");
   endif
 
diff --git a/scripts/statistics/distributions/tpdf.m b/scripts/statistics/distributions/tpdf.m
--- a/scripts/statistics/distributions/tpdf.m
+++ b/scripts/statistics/distributions/tpdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tpdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function
 ## (PDF) at @var{x} of the @var{t} (Student) distribution with @var{n}
 ## degrees of freedom. 
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the t distribution
 
 function pdf = tpdf (x, n)
 
   if (nargin != 2)
     usage ("tpdf (x, n)");
   endif
 
diff --git a/scripts/statistics/distributions/trnd.m b/scripts/statistics/distributions/trnd.m
--- a/scripts/statistics/distributions/trnd.m
+++ b/scripts/statistics/distributions/trnd.m
@@ -24,17 +24,17 @@
 ## (Student) distribution with @var{n} degrees of freedom.  @var{n} must
 ## be a scalar or of size @var{r} by @var{c}. Or if @var{sz} is a
 ## vector create a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the size of @var{n}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the t distribution
 
 function rnd = trnd (n, r, c)
 
   if (nargin == 3)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("trnd: r must be a positive integer");
     endif
diff --git a/scripts/statistics/distributions/unifcdf.m b/scripts/statistics/distributions/unifcdf.m
--- a/scripts/statistics/distributions/unifcdf.m
+++ b/scripts/statistics/distributions/unifcdf.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unifcdf (@var{x}, @var{a}, @var{b})
 ## Return the CDF at @var{x} of the uniform distribution on [@var{a},
 ## @var{b}], i.e., PROB (uniform (@var{a}, @var{b}) <= x).
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the uniform distribution
 
 function cdf = unifcdf (x, a, b)
 
   if (nargin != 1 && nargin != 3)
     usage ("unifcdf (x, a, b)");
   endif
 
diff --git a/scripts/statistics/distributions/unifinv.m b/scripts/statistics/distributions/unifinv.m
--- a/scripts/statistics/distributions/unifinv.m
+++ b/scripts/statistics/distributions/unifinv.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unifinv (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, compute the quantile (the inverse of the
 ## CDF) at @var{x} of the uniform distribution on [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the uniform distribution
 
 function inv = unifinv (x, a, b)
 
   if (nargin != 1 && nargin != 3)
     usage ("unifinv (x, a, b)");
   endif
 
diff --git a/scripts/statistics/distributions/unifpdf.m b/scripts/statistics/distributions/unifpdf.m
--- a/scripts/statistics/distributions/unifpdf.m
+++ b/scripts/statistics/distributions/unifpdf.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unifpdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, compute the PDF at @var{x} of the uniform
 ## distribution on [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the uniform distribution
 
 function pdf = unifpdf (x, a, b)
 
   if (nargin != 1 && nargin != 3)
     usage ("unifpdf (x, a, b)");
   endif
 
diff --git a/scripts/statistics/distributions/unifrnd.m b/scripts/statistics/distributions/unifrnd.m
--- a/scripts/statistics/distributions/unifrnd.m
+++ b/scripts/statistics/distributions/unifrnd.m
@@ -23,17 +23,17 @@
 ## Return an @var{r} by @var{c} or a @code{size (@var{sz})} matrix of 
 ## random samples from the uniform distribution on [@var{a}, @var{b}]. 
 ## Both @var{a} and @var{b} must be scalar or of size @var{r} by @var{c}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{a} and @var{b}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the uniform distribution
 
 function rnd = unifrnd (a, b, r, c)
 
   if (nargin > 1)
     if (!isscalar(a) || !isscalar(b)) 
       [retval, a, b] = common_size (a, b);
       if (retval > 0)
diff --git a/scripts/statistics/distributions/weibcdf.m b/scripts/statistics/distributions/weibcdf.m
--- a/scripts/statistics/distributions/weibcdf.m
+++ b/scripts/statistics/distributions/weibcdf.m
@@ -26,17 +26,17 @@
 ## @example
 ## 1 - exp(-(x/sigma)^alpha)
 ## @end example
 ##
 ## @noindent
 ## for @var{x} >= 0.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Weibull distribution
 
 function cdf = weibcdf (x, shape, scale)
 
   if (nargin != 3)
     usage ("weibcdf (x, alpha, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/weibinv.m b/scripts/statistics/distributions/weibinv.m
--- a/scripts/statistics/distributions/weibinv.m
+++ b/scripts/statistics/distributions/weibinv.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} weibinv (@var{x}, @var{lambda}, @var{alpha})
 ## Compute the quantile (the inverse of the CDF) at @var{x} of the
 ## Weibull distribution with shape parameter @var{alpha} and scale
 ## parameter @var{sigma}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Weibull distribution
 
 function inv = weibinv (x, shape, scale)
 
   if (nargin != 3)
     usage ("weibinv (x, alpha, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/weibpdf.m b/scripts/statistics/distributions/weibpdf.m
--- a/scripts/statistics/distributions/weibpdf.m
+++ b/scripts/statistics/distributions/weibpdf.m
@@ -26,17 +26,17 @@
 ## @example
 ##    alpha * sigma^(-alpha) * x^(alpha-1) * exp(-(x/sigma)^alpha)
 ## @end example
 ##
 ## @noindent
 ## for @var{x} > 0.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Weibull distribution
 
 function pdf = weibpdf (x, shape, scale)
 
   if (nargin != 3)
     usage ("weibpdf (x, alpha, sigma)");
   endif
 
diff --git a/scripts/statistics/distributions/weibrnd.m b/scripts/statistics/distributions/weibrnd.m
--- a/scripts/statistics/distributions/weibrnd.m
+++ b/scripts/statistics/distributions/weibrnd.m
@@ -24,17 +24,17 @@
 ## Weibull distribution with parameters @var{alpha} and @var{sigma}
 ## which must be scalar or of size @var{r} by @var{c}. Or if @var{sz}
 ## is a vector return a matrix of size @var{sz}.
 ##
 ## If @var{r} and @var{c} are omitted, the size of the result matrix is
 ## the common size of @var{alpha} and @var{sigma}.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the Weibull distribution
 
 function rnd = weibrnd (shape, scale, r, c)
 
   if (nargin > 1)
     if (!isscalar(shape) || !isscalar(scale)) 
       [retval, shape, scale] = common_size (shape, scale);
       if (retval > 0)
diff --git a/scripts/statistics/models/logistic_regression.m b/scripts/statistics/models/logistic_regression.m
--- a/scripts/statistics/models/logistic_regression.m
+++ b/scripts/statistics/models/logistic_regression.m
@@ -72,17 +72,17 @@
 ## given @var{x}.
 ## @end deftypefn
 
 ## Original for MATLAB written by Gordon K Smyth <gks@maths.uq.oz.au>,
 ## U of Queensland, Australia, on Nov 19, 1990.  Last revision Aug 3,
 ## 1992.
 
 ## Author: Gordon K Smyth <gks@maths.uq.oz.au>,
-## Adapted-By: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Ordinal logistic regression
 
 ## Uses the auxiliary functions logistic_regression_derivatives and
 ## logistic_regression_likelihood.
 
 function [theta, beta, dev, dl, d2l, p] ...
   = logistic_regression (y, x, print, theta, beta)
 
diff --git a/scripts/statistics/models/logistic_regression_derivatives.m b/scripts/statistics/models/logistic_regression_derivatives.m
--- a/scripts/statistics/models/logistic_regression_derivatives.m
+++ b/scripts/statistics/models/logistic_regression_derivatives.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{dl}, @var{d2l}] =} logistic_regression_derivatives (@var{x}, @var{z}, @var{z1}, @var{g}, @var{g1}, @var{p})
 ## Called by logistic_regression.  Calculates derivates of the
 ## log-likelihood for ordinal logistic regression model.
 ## @end deftypefn
 
 ## Author: Gordon K. Smyth <gks@maths.uq.oz.au>
-## Adapted-By: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Derivates of log-likelihood in logistic regression
 
 function [dl, d2l] = logistic_regression_derivatives (x, z, z1, g, g1, p)
 
   ## first derivative
   v = g .* (1 - g) ./ p; v1 = g1 .* (1 - g1) ./ p;
   dlogp = [(dmult (v, z) - dmult (v1, z1)), (dmult (v - v1, x))];
   dl = sum (dlogp)';
diff --git a/scripts/statistics/models/logistic_regression_likelihood.m b/scripts/statistics/models/logistic_regression_likelihood.m
--- a/scripts/statistics/models/logistic_regression_likelihood.m
+++ b/scripts/statistics/models/logistic_regression_likelihood.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{g}, @var{g1}, @var{p}, @var{dev}] =} logistic_regression_likelihood (@var{y}, @var{x}, @var{beta}, @var{z}, @var{z1})
 ## Calculates likelihood for the ordinal logistic regression model.
 ## Called by logistic_regression.
 ## @end deftypefn
 
 ## Author: Gordon K. Smyth <gks@maths.uq.oz.au>
-## Adapted-By: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Likelihood in logistic regression
 
 function [g, g1, p, dev] = logistic_regression_likelihood (y, x, beta, z, z1)
 
   e = exp ([z, x] * beta); e1 = exp ([z1, x] * beta);
   g = e ./ (1 + e); g1 = e1 ./ (1 + e1);
   g = max (y == max (y), g); g1 = min (y > min(y), g1);
 
diff --git a/scripts/statistics/tests/anova.m b/scripts/statistics/tests/anova.m
--- a/scripts/statistics/tests/anova.m
+++ b/scripts/statistics/tests/anova.m
@@ -37,17 +37,17 @@
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{f}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the standard one-way ANOVA table is
 ## printed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-way analysis of variance (ANOVA)
 
 function [pval, f, df_b, df_w] = anova (y, g)
 
   if ((nargin < 1) || (nargin > 2))
     usage ("anova (y, g)");
   elseif (nargin == 1)
     if (isvector (y))
diff --git a/scripts/statistics/tests/bartlett_test.m b/scripts/statistics/tests/bartlett_test.m
--- a/scripts/statistics/tests/bartlett_test.m
+++ b/scripts/statistics/tests/bartlett_test.m
@@ -27,17 +27,17 @@
 ## freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Bartlett test for homogeneity of variances
 
 function [pval, chisq, df] = bartlett_test (varargin)
 
   k = nargin;
   if (k < 2)
     usage ("[pval, chisq, df] = bartlett_test (x1, ...)");
   endif
diff --git a/scripts/statistics/tests/chisquare_test_homogeneity.m b/scripts/statistics/tests/chisquare_test_homogeneity.m
--- a/scripts/statistics/tests/chisquare_test_homogeneity.m
+++ b/scripts/statistics/tests/chisquare_test_homogeneity.m
@@ -29,17 +29,17 @@
 ## degrees of freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Chi-square test for homogeneity
 
 function [pval, chisq, df] = chisquare_test_homogeneity (x, y, c)
 
   if (nargin != 3)
     usage ("[pval, chisq, df] = chisquare_test_homogeneity (x, y, c)");
   endif
 
diff --git a/scripts/statistics/tests/chisquare_test_independence.m b/scripts/statistics/tests/chisquare_test_independence.m
--- a/scripts/statistics/tests/chisquare_test_independence.m
+++ b/scripts/statistics/tests/chisquare_test_independence.m
@@ -25,17 +25,17 @@
 ## @var{df} degrees of freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at chisq) of the
 ## test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Chi-square test for independence
 
 function [pval, chisq, df] = chisquare_test_independence (X)
 
   if (nargin != 1)
     usage ("chisquare_test_independence (X)");
   endif
 
diff --git a/scripts/statistics/tests/cor_test.m b/scripts/statistics/tests/cor_test.m
--- a/scripts/statistics/tests/cor_test.m
+++ b/scripts/statistics/tests/cor_test.m
@@ -53,17 +53,17 @@
 ## @item method
 ## The method used for testing.
 ## @end table
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
-## Adapted-by: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-by: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test for zero correlation
 
 function t = cor_test (X, Y, ALTERNATIVE, METHOD)
 
   if ((nargin < 2) || (nargin > 4))
     usage ("cor_test (X, Y, ALTERNATIVE, METHOD)")
   endif
 
diff --git a/scripts/statistics/tests/f_test_regression.m b/scripts/statistics/tests/f_test_regression.m
--- a/scripts/statistics/tests/f_test_regression.m
+++ b/scripts/statistics/tests/f_test_regression.m
@@ -28,17 +28,17 @@
 ## The p-value (1 minus the CDF of this distribution at @var{f}) is
 ## returned in @var{pval}.
 ##
 ## If not given explicitly, @var{r} = 0.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test linear hypotheses in linear regression model
 
 function [pval, f, df_num, df_den] = f_test_regression (y, X, R, r)
 
   if (nargin < 3 || nargin > 4)
     usage ("[pval, f, df_num, df_den] = f_test_regression (y, X, R, r)");
   endif
 
diff --git a/scripts/statistics/tests/hotelling_test.m b/scripts/statistics/tests/hotelling_test.m
--- a/scripts/statistics/tests/hotelling_test.m
+++ b/scripts/statistics/tests/hotelling_test.m
@@ -28,17 +28,17 @@
 ## @math{n-p} degrees of freedom, where @math{n} and @math{p} are the
 ## numbers of samples and variables, respectively.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test for mean of a multivariate normal
 
 function [pval, Tsq] = hotelling_test (x, m)
 
   if (nargin != 2)
     usage ("hotelling_test (x, m)");
   endif
 
diff --git a/scripts/statistics/tests/hotelling_test_2.m b/scripts/statistics/tests/hotelling_test_2.m
--- a/scripts/statistics/tests/hotelling_test_2.m
+++ b/scripts/statistics/tests/hotelling_test_2.m
@@ -35,17 +35,17 @@
 ## freedom, where @math{n_x} and @math{n_y} are the sample sizes and
 ## @math{p} is the number of variables.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compare means of two multivariate normals
 
 function [pval, Tsq] = hotelling_test_2 (x, y)
 
   if (nargin != 2)
     usage ("hotelling_test_2 (x, y)");
   endif
 
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test.m b/scripts/statistics/tests/kolmogorov_smirnov_test.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test.m
@@ -42,17 +42,17 @@
 ## test statistic @var{ks} has a one-sided Kolmogorov-Smirnov
 ## distribution.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-sample Kolmogorov-Smirnov test
 
 function [pval, ks] = kolmogorov_smirnov_test (x, dist, varargin)
 
   if (nargin < 2)
     usage ("[pval, ks] = kolmogorov_smirnov_test (x, dist,, params, alt)");
   endif
 
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
@@ -38,17 +38,17 @@
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## The third returned value, @var{d}, is the test statistic, the maximum
 ## vertical distance between the two cumulative distribution functions.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Two-sample Kolmogorov-Smirnov test
 
 function [pval, ks, d] = kolmogorov_smirnov_test_2 (x, y, alt)
 
   if (nargin < 2 || nargin > 3)
     usage ("[pval, ks] = kolmogorov_smirnov_test_2 (x, y, tol)");
   endif
 
diff --git a/scripts/statistics/tests/kruskal_wallis_test.m b/scripts/statistics/tests/kruskal_wallis_test.m
--- a/scripts/statistics/tests/kruskal_wallis_test.m
+++ b/scripts/statistics/tests/kruskal_wallis_test.m
@@ -30,17 +30,17 @@
 ## freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{k}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Kruskal-Wallis test
 
 function [pval, k, df] = kruskal_wallis_test (varargin)
 
   m = nargin;
   if (m < 2)
     usage ("[pval, k, df] = kruskal_wallis_test (x1, ...)");
   endif
diff --git a/scripts/statistics/tests/manova.m b/scripts/statistics/tests/manova.m
--- a/scripts/statistics/tests/manova.m
+++ b/scripts/statistics/tests/manova.m
@@ -33,17 +33,17 @@
 ## computed and displayed.
 ## @end deftypefn
 
 ## Three test statistics (Wilks, Hotelling-Lawley, and Pillai-Bartlett)
 ## and corresponding approximate p-values are calculated and displayed.
 ## (Currently NOT because the f_cdf respectively betai code is too bad.)
 
 ## Author: TF <Thomas.Fuereder@ci.tuwien.ac.at>
-## Adapted-By: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-way multivariate analysis of variance (MANOVA)
 
 function manova (Y, g)
 
   if (nargin != 2)
     usage ("manova (Y, g)");
   endif
 
diff --git a/scripts/statistics/tests/mcnemar_test.m b/scripts/statistics/tests/mcnemar_test.m
--- a/scripts/statistics/tests/mcnemar_test.m
+++ b/scripts/statistics/tests/mcnemar_test.m
@@ -27,17 +27,17 @@
 ## with @var{df} degrees of freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: McNemar's test for symmetry
 
 function [pval, chisq, df] = mcnemar_test (x)
 
   if (nargin != 1)
     usage ("mcnemar_test (x)");
   endif
 
diff --git a/scripts/statistics/tests/prop_test_2.m b/scripts/statistics/tests/prop_test_2.m
--- a/scripts/statistics/tests/prop_test_2.m
+++ b/scripts/statistics/tests/prop_test_2.m
@@ -33,17 +33,17 @@
 ## the one-sided alternative @var{p1} < @var{p2} is used.
 ## The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compare two proportions
 
 function [pval, z] = prop_test_2 (x1, n1, x2, n2, alt)
 
   if ((nargin < 4) || (nargin > 5))
         usage ("[pval, z] = prop_test_2 (x1, n1, x2, n2, alt)");
   endif
 
diff --git a/scripts/statistics/tests/sign_test.m b/scripts/statistics/tests/sign_test.m
--- a/scripts/statistics/tests/sign_test.m
+++ b/scripts/statistics/tests/sign_test.m
@@ -35,17 +35,17 @@
 ## ("x is stochastically less than y") is considered.  The default is
 ## the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Sign test
 
 function [pval, b, n] = sign_test (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, b, n] = sign_test (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/t_test.m b/scripts/statistics/tests/t_test.m
--- a/scripts/statistics/tests/t_test.m
+++ b/scripts/statistics/tests/t_test.m
@@ -34,17 +34,17 @@
 ## (@var{x}) < @var{m}} is considered,  The default is the two-sided
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Student's one-sample t test
 
 function [pval, t, df] = t_test (x, m, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, t, df] = t_test (x, m, alt)");
   endif
 
diff --git a/scripts/statistics/tests/t_test_2.m b/scripts/statistics/tests/t_test_2.m
--- a/scripts/statistics/tests/t_test_2.m
+++ b/scripts/statistics/tests/t_test_2.m
@@ -34,17 +34,17 @@
 ## (@var{x}) < mean (@var{y})} is used.  The default is the two-sided
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Student's two-sample t test
 
 function [pval, t, df] = t_test_2 (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
         usage ("[pval, t, df] = t_test_2 (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/t_test_regression.m b/scripts/statistics/tests/t_test_regression.m
--- a/scripts/statistics/tests/t_test_regression.m
+++ b/scripts/statistics/tests/t_test_regression.m
@@ -34,17 +34,17 @@
 ## Similarly for @var{"<"}, the one-sided alternative @code{@var{rr} *
 ## @var{b} < @var{r}} is used.  The default is the two-sided case. 
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test one linear hypothesis in linear regression model
 
 function [pval, t, df] = t_test_regression (y, X, R, r, alt)
 
   if (nargin == 3)
     r   = 0;
     alt = "!=";
   elseif (nargin == 4)
diff --git a/scripts/statistics/tests/u_test.m b/scripts/statistics/tests/u_test.m
--- a/scripts/statistics/tests/u_test.m
+++ b/scripts/statistics/tests/u_test.m
@@ -36,17 +36,17 @@
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## This implementation is still incomplete---for small sample sizes,
 ## the normal approximation is rather bad ...
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Mann-Whitney U-test
 
 function [pval, z] = u_test (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, z] = u_test (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/var_test.m b/scripts/statistics/tests/var_test.m
--- a/scripts/statistics/tests/var_test.m
+++ b/scripts/statistics/tests/var_test.m
@@ -33,17 +33,17 @@
 ## (@var{x}) > var (@var{y})} is used.  The default is the two-sided
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: F test to compare two variances
 
 function [pval, f, df_num, df_den] = var_test (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, f, df_num, df_den] = var_test (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/welch_test.m b/scripts/statistics/tests/welch_test.m
--- a/scripts/statistics/tests/welch_test.m
+++ b/scripts/statistics/tests/welch_test.m
@@ -33,17 +33,17 @@
 ## @code{"<"}, the one-sided alternative mean(x) < @var{m} is
 ## considered.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Welch two-sample t test
 
 function [pval, t, df] = welch_test (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, t, df] = welch_test (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/wilcoxon_test.m b/scripts/statistics/tests/wilcoxon_test.m
--- a/scripts/statistics/tests/wilcoxon_test.m
+++ b/scripts/statistics/tests/wilcoxon_test.m
@@ -32,17 +32,17 @@
 ## for @code{"<"}, the one-sided alternative PROB (@var{x} > @var{y}) <
 ## 1/2 is considered.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Wilcoxon signed-rank test
 
 function [pval, z] = wilcoxon_test (x, y, alt)
 
   if ((nargin < 2) || (nargin > 3))
     usage ("[pval, z] = wilcoxon_test (x, y, alt)");
   endif
 
diff --git a/scripts/statistics/tests/z_test.m b/scripts/statistics/tests/z_test.m
--- a/scripts/statistics/tests/z_test.m
+++ b/scripts/statistics/tests/z_test.m
@@ -34,17 +34,17 @@
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed
 ## along with some information.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test for mean of a normal sample with known variance
 
 function [pval, z] = z_test (x, m, v, alt)
 
   if ((nargin < 3) || (nargin > 4))
     usage ("[pval, z] = z_test (x, m, v, alt)");
   endif
 
diff --git a/scripts/statistics/tests/z_test_2.m b/scripts/statistics/tests/z_test_2.m
--- a/scripts/statistics/tests/z_test_2.m
+++ b/scripts/statistics/tests/z_test_2.m
@@ -34,17 +34,17 @@
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed
 ## along with some information.
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compare means of two normal samples with known variances
 
 function [pval, z] = z_test_2 (x, y, v_x, v_y, alt)
 
   if ((nargin < 4) || (nargin > 5))
     usage ("[pval, z] = z_test_2 (x, y, v_x, v_y, alt)");
   endif
 
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -17,17 +17,17 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} blanks (@var{n})
 ## Return a string of @var{n} blanks.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function s = blanks (n)
 
   if (nargin != 1)
     usage ("blanks (n)");
   endif
 
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} deblank (@var{s})
 ## Removes the trailing blanks and nulls from the string @var{s}.
 ## If @var{s} is a matrix, @var{deblank} trims each row to the 
 ## length of longest string.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function t = deblank (s)
 
   if (nargin != 1)
     usage ("deblank (s)");
   endif
 
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -30,17 +30,17 @@
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [ 1, 5 ]
 ## @end example
 ## @end deftypefn
 
 ## Note that this implementation swaps the strings if second one is longer
 ## than the first, so try to put the longer one first.
 ##
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function v = findstr (s, t, overlap)
 
   if (nargin < 2 || nargin > 3)
     usage ("findstr (s, t, overlap)");
   endif
 
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -25,17 +25,17 @@
 ## @example
 ## index ("Teststring", "t")
 ##      @result{} 4
 ## @end example
 ##
 ## @strong{Caution:}  This function does not work for arrays of strings.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function n = index (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   if (nargin != 2)
     usage ("index (s, t)");
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -25,17 +25,17 @@
 ## @example
 ## rindex ("Teststring", "t")
 ##      @result{} 6
 ## @end example
 ##
 ## @strong{Caution:}  This function does not work for arrays of strings.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function n = rindex (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   if (nargin != 2)
     usage ("rindex (s, t)");
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -26,17 +26,17 @@
 ## @example
 ## split ("Test string", "t")
 ##      @result{} "Tes "
 ##         " s  "
 ##         "ring"
 ## @end example
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function m = split (s, t)
 
   if (nargin == 2)
     if (isstr (s) && isstr (t))
 
       l_s = length (s);
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -23,17 +23,17 @@
 ## its rows.  Each string is padded with blanks in order to form a valid
 ## matrix.
 ##
 ## This function is modelled after @sc{Matlab}.  In Octave, you can create
 ## a matrix of strings by @code{[@var{s_1}; @dots{}; @var{s_n}]} even if
 ## the strings are not all the same length.
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function retval = str2mat (varargin)
 
   if (nargin == 0)
     usage ("str2mat (s1, ...)");
   endif
 
diff --git a/scripts/strings/strrep.m b/scripts/strings/strrep.m
--- a/scripts/strings/strrep.m
+++ b/scripts/strings/strrep.m
@@ -23,17 +23,17 @@
 ## with the string @var{y}.  For example,
 ##
 ## @example
 ## strrep ("This is a test string", "is", "&%$")
 ##      @result{} "Th&%$ &%$ a test string"
 ## @end example
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 11 November 1994
 ## Adapted-By: jwe
 
 function t = strrep (s, x, y)
 
   if (nargin != 3)
     usage ("strrep (s, x, y)");
   endif
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -34,17 +34,17 @@
 ## @end example
 ##
 ## @quotation
 ## This function is patterned after AWK.  You can get the same result by
 ## @code{@var{s} (@var{beg} : (@var{beg} + @var{len} - 1))}.
 ## @end quotation
 ## @end deftypefn
 
-## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function t = substr (s, offset, len)
 
   if (nargin < 2 || nargin > 3)
     usage ("substr (s, offset, len)");
   endif
 
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 // Based on Tony Richardson's filter.m.
 //
-// Originally translated to C++ by KH (Kurt.Hornik@ci.tuwien.ac.at)
+// Originally translated to C++ by KH (Kurt.Hornik@wu-wien.ac.at)
 // with help from Fritz Leisch and Andreas Weingessel on Oct 20, 1994.
 //
 // Rewritten to use templates to handle both real and complex cases by
 // jwe, Wed Nov  1 19:15:29 1995.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
