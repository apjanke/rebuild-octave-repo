# HG changeset patch
# User jwe
# Date 949559299 0
#      Thu Feb 03 06:28:19 2000 +0000
# Node ID 403039c85792a3cc328ee5135932defba8e7cb0c
# Parent  7031786b3f27af8239013f920e25ae2c904dbc52
[project @ 2000-02-03 06:23:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,22 @@
+2000-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mappers.cc (xconj, ximag, xreal): New functions.  Use them in
+	DEFUN_MAPPER calls.
+
+	* defun-int.h (DEFUN_MAPPER_INTERNAL): Cast function pointer args
+	to octave_mapper constructor.
+
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* procstream.cc (procstreambase::procstreambase,
+	procstreambase::open, procstreambase::close):
+	Call std::ios::setstate, not set.
+
 	* lex.l (plot_axes_token): Declare plot_axes as const char *.
 	Declare tmp const char **.
 
 	* oct-procbuf.h: Include fstream, not streambuf.h.
 
 	* load-save.cc (Fsave): Call pubseekoff instead of seekoff.	
 	* oct-strstrm.cc (octave_base_strstream::tell): Likewise.
 	(octave_base_strstream::seek): Likewise.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -167,23 +167,31 @@ typedef bool (*octave_dld_fcn_installer)
   INSTALL_CONST (UNDERSCORIFY (#name), XSBV_ ## name, defn, true, doc)
 
 #define DEFCONSTX_INTERNAL(name, sname, defn, doc) \
   INSTALL_CONST (name, sname, defn, false, doc); \
   INSTALL_CONST (UNDERSCORIFY (name), X ## sname, defn, true, doc)
 
 // How mapper functions are actually installed.
 
+// XXX FIXME XXX -- Really want to avoid the following casts, since
+// (as always with casts) it may mask some real errors...
+
 #define DEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 			      d_c_map, c_c_map, lo, hi, \
 			      can_ret_cmplx_for_real, doc) \
   install_builtin_mapper \
-    (new octave_mapper (ch_map, d_b_map, c_b_map, d_d_map, d_c_map, \
-			c_c_map, lo, hi, \
-			can_ret_cmplx_for_real, #name))
+    (new octave_mapper \
+     (X_CAST (octave_mapper::ch_mapper, ch_map), \
+      X_CAST (octave_mapper::d_b_mapper, d_b_map), \
+      X_CAST (octave_mapper::c_b_mapper, c_b_map), \
+      X_CAST (octave_mapper::d_d_mapper, d_d_map), \
+      X_CAST (octave_mapper::d_c_mapper, d_c_map), \
+      X_CAST (octave_mapper::c_c_mapper, c_c_map), \
+      lo, hi, can_ret_cmplx_for_real, #name))
 
 #endif /* ! MAKE_BUILTINS */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -123,16 +123,40 @@ xtolower (int c)
 }
 
 static int
 xtoupper (int c)
 {
   return toupper (c);
 }
 
+static Complex
+xconj (const Complex& x)
+{
+  return conj (x);
+}
+
+static double
+xconj (double x)
+{
+  return x;
+}
+
+static Complex
+ximag (const Complex& x)
+{
+  return Complex (0.0, x.imag ());
+}
+
+static Complex
+xreal (const Complex& x)
+{
+  return Complex (x.real (), 0.0);
+}
+
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, 0, 0, 0, fabs, abs, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
 Compute the magnitude of @var{z}, defined as\n\
 @iftex\n\
@@ -225,17 +249,17 @@ Compute the inverse hyperbolic tanget of
 
   DEFUN_MAPPER (ceil, 0, 0, 0, ceil, 0, ceil, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} ceil (@var{x})\n\
 Return the smallest integer not less than @var{x}.  If @var{x} is\n\
 complex, return @code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (conj, 0, 0, 0, conj, 0, conj, 0.0, 0.0, 0,
+  DEFUN_MAPPER (conj, 0, 0, 0, xconj, 0, xconj, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} conj (@var{z})\n\
 Return the complex conjugate of @var{z}, defined as\n\
 @iftex\n\
 @tex\n\
 $\\bar{z} = x - iy$.\n\
 @end tex\n\
 @end iftex\n\
@@ -352,17 +376,17 @@ gamma (z) = | t^(z-1) exp (-t) dt.\n\
             /\n\
          t=0\n\
 @end example\n\
 @end ifinfo\n\
 @end deftypefn\n\
 \n\
 @seealso{gammai and lgamma}");
 
-  DEFUN_MAPPER (imag, 0, 0, 0, imag, imag, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (imag, 0, 0, 0, imag, ximag, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} imag (@var{z})\n\
 Return the imaginary part of @var{z} as a real number.\n\
 @end deftypefn\n\
 \n\
 @seealso{real and conj}");
 
   DEFUN_MAPPER (isalnum, xisalnum, 0, 0, 0, 0, 0, 0.0, 0.0, 0,
@@ -486,17 +510,17 @@ matrix logarithm, see @ref{Linear Algebr
 
   DEFUN_MAPPER (log10, 0, 0, 0, log10, 0, log10, 0.0, DBL_MAX, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log10 (@var{x})\n\
 Compute the base-10 logarithm for each element of @var{x}.\n\
 @end deftypefn\n\
 @seealso{log, log2, logspace, and exp}");
 
-  DEFUN_MAPPER (real, 0, 0, 0, real, real, 0, 0.0, 0.0, 0,
+  DEFUN_MAPPER (real, 0, 0, 0, real, xreal, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} real (@var{z})\n\
 Return the real part of @var{z}.\n\
 @end deftypefn\n\
 @seealso{imag and conj}");
 
   DEFUN_MAPPER (round, 0, 0, 0, round, 0, round, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
