# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236598495 -3600
#      Mon Mar 09 12:34:55 2009 +0100
# Node ID cae073411b031d8a33a35d33587a694c21c22240
# Parent  c2099a4d12ead68ffdb19fb73061509008c4e25d
optimize histc implementation

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,13 @@
 2009-03-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Reorder tests. Call either "sparse" or
 	__accumarray_sum__ for the default summation case.
+	* statistics/base/histc.m: Reimplement using lookup & accumarray.
 
 2009-03-08  Søren Hauberg <hauberg@gmail.com>
 
 	* statistics/base/histc.m: New function.
 
 2009-03-06  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Preserve the order of axes' children
diff --git a/scripts/statistics/base/histc.m b/scripts/statistics/base/histc.m
--- a/scripts/statistics/base/histc.m
+++ b/scripts/statistics/base/histc.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2009, SÃ¸ren Hauberg
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -46,67 +47,114 @@ function [n, idx] = histc (data, edges, 
   ## Check input
   if (nargin < 2)
     print_usage ();
   endif
 
   sz = size (data);
   if (nargin < 3)
     dim = find (sz > 1, 1);
+    if (isempty (dim))
+      dim = 1;
+    endif
   endif
 
   if (!isreal (data))
     error ("histc: first argument must be real a vector");
   endif
   
   ## Make sure 'edges' is sorted
   num_edges = numel (edges);
+  if (num_edges == 0)
+    error ("histc: edges must not be empty")
+  endif
+
   if (isreal (edges))
     edges = edges (:);
-    tmp = sort (edges);
-    if (any (tmp != edges))
+    if (! issorted (edges) || edges(1) > edges(end))
       warning ("histc: edge values not sorted on input");
-      edges = tmp;
+      edges = sort (edges);
     endif
   else
     error ("histc: second argument must be a vector");
   endif
 
   ## Allocate the histogram
   nsz = sz;
   nsz (dim) = num_edges;
   n = zeros (nsz);
   
-  ## Allocate 'idx'
-  if (nargout > 1)
-    idx = zeros (sz);
-  endif
-  
-  ## Prepare indices
-  idx1 = cell (1, dim-1);
-  for k = 1:length (idx1)
-    idx1 {k} = 1:sz (k);
-  endfor
-  idx2 = cell (length (sz) - dim);
-  for k = 1:length (idx2)
-    idx2 {k} = 1:sz (k+dim);
-  endfor
-  
-  ## Compute the histograms
-  for k = 1:num_edges-1
-    b = (edges (k) <= data & data < edges (k+1));
-    n (idx1 {:}, k, idx2 {:}) = sum (b, dim);
+  ## the splitting point is 3 bins
+
+  if (num_edges <= 3)
+
+    ## This is the O(M*N) algorithm.
+
+    ## Allocate 'idx'
+    if (nargout > 1)
+      idx = zeros (sz);
+    endif
+    
+    ## Prepare indices
+    idx1 = cell (1, dim-1);
+    for k = 1:length (idx1)
+      idx1 {k} = 1:sz (k);
+    endfor
+    idx2 = cell (length (sz) - dim);
+    for k = 1:length (idx2)
+      idx2 {k} = 1:sz (k+dim);
+    endfor
+    
+    ## Compute the histograms
+    for k = 1:num_edges-1
+      b = (edges (k) <= data & data < edges (k+1));
+      n (idx1 {:}, k, idx2 {:}) = sum (b, dim);
+      if (nargout > 1)
+        idx (b) = k;
+      endif
+    endfor
+    b = (data == edges (end));
+    n (idx1 {:}, num_edges, idx2 {:}) = sum (b, dim);
     if (nargout > 1)
-      idx (b) = k;
+      idx (b) = num_edges;
     endif
-  endfor
-  b = (data == edges (end));
-  n (idx1 {:}, num_edges, idx2 {:}) = sum (b, dim);
-  if (nargout > 1)
-    idx (b) = num_edges;
+
+  else
+
+    ## This is the O(M*log(N) + N) algorithm.
+
+    ## Look-up indices.
+    idx = lookup (edges, data);
+    ## Zero invalid ones (including NaNs). data < edges(1) are already zero. 
+    idx(! (data <= edges(end))) = 0;
+
+    iidx = idx;
+
+    ## In case of matrix input, we adjust the indices.
+    if (! isvector (data))
+      nl = prod (sz(1:dim-1));
+      nn = sz(dim);
+      nu = prod (sz(dim+1:end));
+      if (nl != 1)
+        iidx = (iidx-1) * nl;
+        iidx += reshape (kron (ones (1, nn*nu), 1:nl), sz);
+      endif
+      if (nu != 1)
+        ne =length (edges);
+        iidx += reshape (kron (nl*ne*(0:nu-1), ones (1, nl*nn)), sz);
+      endif
+    endif
+
+    ## Select valid elements.
+    iidx = iidx(idx != 0);
+
+    ## Call accumarray to sum the indexed elements.
+    sz(dim) = length (edges);
+    n = accumarray (iidx(:), 1, sz);
+
   endif
 
 endfunction
 
 %!test
 %! data = linspace (0, 10, 1001);
 %! n = histc (data, 0:10);
 %! assert (n, [repmat(100, 1, 10), 1]);
