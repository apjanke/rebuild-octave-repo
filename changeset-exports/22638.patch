# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476738225 25200
#      Mon Oct 17 14:03:45 2016 -0700
# Branch stable
# Node ID 0128795eeac698a2f3503b87d0744749817c46d7
# Parent  c44d57c0a925b8ccf2ba9c8e95a9e153fb0b1e5f
odeplot.m: Recode for performance.

* odeplot.m: Rename output argument to "retval".  Rename Van der Pol
function to fvdp.  Remove unused varargin from function prototype.
Move most common case to be first in if/elseif tree.
Remove call to plot and instead just update the "xdata", "ydata"
properties of line objects.  Use a filled marker, '.', rather
than unfilled marker 'o'.  Clean up by setting variables to
empty matrix rather than using clear function.

diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Author: Thomas Treichl <treichl@users.sourceforge.net>
 
 ## -*- texinfo -*-
-## @deftypefn {} {@var{ret} =} odeplot (@var{t}, @var{y}, @var{flag})
+## @deftypefn {} {@var{retval} =} odeplot (@var{t}, @var{y}, @var{flag})
 ##
 ## Open a new figure window and plot input @var{y} over time during the
 ## solving of an ode problem.
 ##
 ## The input @var{y} is a column vector.  The types and values of the input
 ## parameter @var{t} and output parameter @var{ret} depend on the input
 ## @var{flag} that is of type string.  If @var{flag} is
 ##
@@ -49,60 +49,65 @@
 ## implemented in order to to achieve the highest performance.
 ##
 ## For example, solve an anonymous implementation of the
 ## @nospell{@qcode{"Van der Pol"}} equation and display the results while
 ## solving
 ##
 ## @example
 ## @group
-## fvdb = @@(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
+## fvdp = @@(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
 ##
 ## opt = odeset ("OutputFcn", @@odeplot, "RelTol", 1e-6);
-## sol = ode45 (fvdb, [0 20], [2 0], opt);
+## sol = ode45 (fvdp, [0 20], [2 0], opt);
 ## @end group
 ## @end example
 ##
 ## @seealso{odeset, odeget}
 ## @end deftypefn
 
-function ret = odeplot (t, y, flag, varargin)
+function retval = odeplot (t, y, flag)
 
-  ## No input argument check is done for a higher processing speed
-  persistent fig told yold counter;
+  ## No input argument checking is done for better performance
+  persistent hlines num_lines told yold;
+  persistent idx = 1;   # Don't remove.  Required for Octave parser.
 
-  if (strcmp (flag, "init"))
-    ## Nothing to return, t is either the time slot [tstart tstop]
-    ## or [t0, t1, ..., tn], y is the initial value vector "init"
-    counter = 1;
-    fig = figure ();
+  if (isempty (flag))
+    ## Default case, plot and return a value
+    ## FALSE for "not stopping the integration"
+    ## TRUE  for "stopping the integration"
+    idx += 1;
+    told(idx,1) = t(1,1);
+    yold(:,idx) = y(:,1);
+    for i = 1:num_lines
+      set (hlines(i), "xdata", told, "ydata", yold(i,:));
+    endfor
+    drawnow;
+
+    retval = false;
+
+  elseif (strcmp (flag, "init"))
+    ## Nothing to return
+    ## t is either the time slot [tstart tstop] or [t0, t1, ..., tn]
+    ## y is the initial value vector "init"
+    idx = 1;
     told = t(1,1);
     yold = y(:,1);
-
-  elseif (isempty (flag))
-    ## Return something, either false for "not stopping
-    ## the integration" or true for "stopping the integration"
-    counter += 1;
-    figure (fig);
-    told(counter,1) = t(1,1);
-    yold(:,counter) = y(:,1);
-    ## FIXME: Why not use '.' rather than 'o' and skip the markersize?
-    ## FIXME: Why not just update the xdata, ydata properties?
-    ##        Calling plot involves a lot of overhead.
-    plot (told, yold, "-o", "markersize", 1); drawnow;
-    ret = false;
+    figure ();
+    hlines = plot (told, yold, "-", "marker", ".", "markersize", 9);
+    num_lines = numel (hlines);
 
   elseif (strcmp (flag, "done"))
     ## Cleanup after ode solver has finished.
-    clear ("figure", "told", "yold", "counter");
+    hlines = num_lines = told = yold = idx = [];
 
   endif
 
 endfunction
 
 
 %!demo
-%! # Solve an anonymous implementation of the Van der Pol equation
-%! # and display the results while solving
-%! fvdb = @(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
+%! ## Solve an anonymous implementation of the Van der Pol equation
+%! ## and display the results while solving
+%! fvdp = @(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %! opt = odeset ("OutputFcn", @odeplot, "RelTol", 1e-6);
-%! sol = ode45 (fvdb, [0 20], [2 0], opt);
+%! sol = ode45 (fvdp, [0 20], [2 0], opt);
 
