# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1305481830 25200
#      Sun May 15 10:50:30 2011 -0700
# Node ID 2783fa95cab719bdda35c690ca67c12303c11752
# Parent  9493880928c8d4a881ec19ff67d4e37d32b10245
Use common code idiom for creating cell array for indexing ND-arrays

* int2str.m, interpft.m, num2str.m, postpad.m, prepad.m, shift.m, fftshift.m,
ifftshift.m, unwrap.m

diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -50,20 +50,17 @@
 function retval = int2str (n)
 
   if (nargin == 1)
     n = round (real(n));
     sz = size(n);
     nd = ndims (n);
     nc = columns (n);
     if (nc > 1)
-      idx = cell ();
-      for i = 1:nd
-        idx{i} = 1:sz(i);
-      endfor
+      idx = repmat ({':'}, nd, 1);
       idx(2) = 1;
       ifmt = get_fmt (n(idx{:}), 0);
       idx(2) = 2:sz(2);
       rfmt = get_fmt (n(idx{:}), 2);
       fmt = cstrcat (ifmt, repmat (rfmt, 1, nc-1), "\n");
     else
       fmt = cstrcat (get_fmt (n, 0), "\n");
     endif
diff --git a/scripts/general/interpft.m b/scripts/general/interpft.m
--- a/scripts/general/interpft.m
+++ b/scripts/general/interpft.m
@@ -71,20 +71,18 @@ function z = interpft (x, n, dim)
   inc = 1;
   while (inc*n < m)
     inc++;
   endwhile
   y = fft (x) / m;
   k = floor (m / 2);
   sz = size (x);
   sz(1) = n * inc - m;
-  idx = cell (nd, 1);
-  for i = 2:nd
-    idx{i} = 1:sz(i);
-  endfor
+
+  idx = repmat ({':'}, nd, 1);
   idx{1} = 1:k;
   z = cat (1, y(idx{:}), zeros (sz));
   idx{1} = k+1:m;
   z = cat (1, z, y(idx{:}));
   z = n * ifft (z);
 
   if (inc != 1)
     sz(1) = n;
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -106,20 +106,17 @@ function retval = num2str (x, arg)
 
     ## Manipulate the complex value to have real values in the odd
     ## columns and imaginary values in the even columns.
     sz = size (x);
     nc = sz(2);
     nd = ndims (x);
     perm = fix ([1:0.5:nc+0.5]);
     perm(2:2:2*nc) = perm(2:2:2*nc) + nc;
-    idx = cell ();
-    for i = 1:nd
-      idx{i} = 1:sz(i);
-    endfor
+    idx = repmat ({':'}, nd, 1);
     idx{2} = perm;
     x = horzcat (real (x), imag (x));
     x = x(idx{:});
 
     fmt = cstrcat (deblank (repmat (fmt, 1, nc)), "\n");
     tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
 
     ## Put the "i"'s where they are supposed to be.
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -68,20 +68,17 @@ function y = postpad (x, l, c, dim)
 
   if (dim > nd)
     sz(nd+1:dim) = 1;
   endif
 
   d = sz (dim);
 
   if (d >= l)
-    idx = cell ();
-    for i = 1:nd
-      idx{i} = 1:sz(i);
-    endfor
+    idx = repmat ({':'}, nd, 1);
     idx{dim} = 1:l;
     y = x(idx{:});
   else
     sz (dim) = l - d;
     y = cat (dim, x, c * ones (sz));
   endif
 
 endfunction
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -68,20 +68,17 @@ function y = prepad (x, l, c, dim)
 
   if (dim > nd)
     sz(nd+1:dim) = 1;
   endif
 
   d = sz (dim);
 
   if (d >= l)
-    idx = cell ();
-    for i = 1:nd
-      idx{i} = 1:sz(i);
-    endfor
+    idx = repmat ({':'}, nd, 1);
     idx{dim} = d-l+1:d;
     y = x(idx{:});
   else
     sz (dim) = l - d;
     y = cat (dim, c * ones (sz), x);
   endif
 
 endfunction
diff --git a/scripts/general/shift.m b/scripts/general/shift.m
--- a/scripts/general/shift.m
+++ b/scripts/general/shift.m
@@ -55,20 +55,17 @@ function y = shift (x, b, dim)
   endif
 
   if (numel (x) < 1)
     error ("shift: X must not be empty");
   endif
 
   d = sz (dim);
 
-  idx = cell ();
-  for i = 1:nd
-    idx{i} = 1:sz(i);
-  endfor
+  idx = repmat ({':'}, nd, 1);
   if (b >= 0)
     b = rem (b, d);
     idx{dim} = [d-b+1:d, 1:d-b];
   elseif (b < 0)
     b = rem (abs (b), d);
     idx{dim} = [b+1:d, 1:b];
   endif
   y = x(idx{:});
diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -53,19 +53,17 @@ function retval = fftshift (x, dim)
   if (nargin == 2)
     if (!isscalar (dim))
       error ("fftshift: dimension must be an integer scalar");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = ceil (sz(dim) / 2);
     idx = cell ();
-    for i = 1:nd
-      idx{i} = 1:sz(i);
-    endfor
+    idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = ceil (xl/2);
       retval = x([xx+1:xl, 1:xx]);
     elseif (ismatrix (x))
diff --git a/scripts/signal/ifftshift.m b/scripts/signal/ifftshift.m
--- a/scripts/signal/ifftshift.m
+++ b/scripts/signal/ifftshift.m
@@ -40,20 +40,17 @@ function retval = ifftshift (x, dim)
 
   if (nargin == 2)
     if (! isscalar (dim))
       error ("ifftshift: dimension must be an integer scalar");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = floor (sz(dim) / 2);
-    idx = cell ();
-    for i = 1:nd
-      idx{i} = 1:sz(i);
-    endfor
+    idx = repmat ({':'}, nd, 1);
     idx{dim} = [sz2+1:sz(dim), 1:sz2];
     retval = x(idx{:});
   else
     if (isvector (x))
       xl = length (x);
       xx = floor (xl/2);
       retval = x([xx+1:xl, 1:xx]);
     elseif (ismatrix (x))
diff --git a/scripts/signal/unwrap.m b/scripts/signal/unwrap.m
--- a/scripts/signal/unwrap.m
+++ b/scripts/signal/unwrap.m
@@ -66,20 +66,17 @@ function retval = unwrap (x, tol, dim)
   ## one sample in the specified dimension.
   if (m == 1)
     retval = x;
     return;
   endif
 
   ## Take first order difference to see so that wraps will show up
   ## as large values, and the sign will show direction.
-  idx = cell ();
-  for i = 1:nd
-    idx{i} = 1:sz(i);
-  endfor
+  idx = repmat ({':'}, nd, 1);
   idx{dim} = [1,1:m-1];
   d = x(idx{:}) - x;
 
   ## Find only the peaks, and multiply them by the range so that there
   ## are kronecker deltas at each wrap point multiplied by the range
   ## value.
   p =  rng * (((d > tol) > 0) - ((d < -tol) > 0));
 
