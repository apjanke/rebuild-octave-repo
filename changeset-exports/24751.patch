# HG changeset patch
# User Rik <rik@octave.org>
# Date 1518558695 28800
#      Tue Feb 13 13:51:35 2018 -0800
# Node ID 6e670c58c6f09762184b6dbe29fe93addb30dd16
# Parent  82c3ae6145b569f9fb69b94529ddd73c093b0d24
Expand octal sequences in regexprep replacement string for Matlab compatibility.

* regexp.cc (do_regexp_rep_string_escapes): Add code to expand octal escape
sequences.
* regexp.cc (Fregexp, Fregexprep): Add BIST tests and format tests to less
than 80 columns.

diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -176,16 +176,40 @@ do_regexp_rep_string_escapes (const std:
             case 't': // horizontal tab
               retval[i] = '\t';
               break;
 
             case 'v': // vertical tab
               retval[i] = '\v';
               break;
 
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7': // octal input
+            {
+              size_t k;
+              int tmpi = s[j] - '0';
+              for (k = j+1; k < std::min (j+3, len); k++)
+                {
+                  int digit = s[k] - '0';
+                  if (digit < 0 || digit > 7)
+                    break;
+                  tmpi <<= 3;
+                  tmpi += digit;
+                }
+              retval[i] = tmpi;
+              j = k - 1;
+              break;
+            }
+
             case 'o': // octal input
             {
               bool bad_esc_seq = (j+1 >= len);
 
               bool brace = false;
               if (! bad_esc_seq && s[++j] == '{')
                 {
                   brace = true;
@@ -1020,16 +1044,17 @@ size) with successive @code{regexp} sear
 %! ## Mix of named and unnamed tokens can cause segfault
 %! str = "abcde";
 %! ptn = '(?<T1>a)(\w+)(?<T2>d\w+)';
 %! tokens = regexp (str, ptn, "names");
 %! assert (isstruct (tokens) && numel (tokens) == 1);
 %! assert (tokens.T1, "a");
 %! assert (tokens.T2, "de");
 
+## Test options to regexp
 %!assert (regexp ("abc\nabc", '.'), [1:7])
 %!assert (regexp ("abc\nabc", '.', 'dotall'), [1:7])
 %!test
 %! assert (regexp ("abc\nabc", '(?s).'), [1:7]);
 %! assert (regexp ("abc\nabc", '.', 'dotexceptnewline'), [1,2,3,5,6,7]);
 %! assert (regexp ("abc\nabc", '(?-s).'), [1,2,3,5,6,7]);
 
 %!assert (regexp ("caseCaSe", 'case'), 1)
@@ -1088,19 +1113,16 @@ size) with successive @code{regexp} sear
 %! assert (s, [1 4 5 6 7]);
 %! assert (e, [3 3 5 5 6]);
 %! assert (te, { [1 3], [4 3], [5 5], [6 5], [7 6] });
 %! assert (m, { "OCT", "", "V", "", "" });
 %! assert (t, { {"OCT"}, {""}, {"V"}, {""}, {""} });
 %! assert (isempty (fieldnames (nm)));
 %! assert (sp, { "", "", "A", "", "E", "" });
 
-%!error regexp ('string', 'tri', 'BadArg')
-%!error regexp ('string')
-
 %!assert (regexp ({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'}, '-'), {6;[1,5,9];zeros(1,0)})
 %!assert (regexp ({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'}, {'-';'f';'q'}), {6;[3,7];[1,9]})
 %!assert (regexp ('Strings', {'t','s'}), {2, 7})
 
 ## Test case for lookaround operators
 %!test
 %! assert (regexp ('Iraq', 'q(?!u)'), 4);
 %! assert (regexp ('quit', 'q(?!u)'), zeros (1, 0));
@@ -1144,25 +1166,30 @@ size) with successive @code{regexp} sear
 %! [a, b] = regexp (str, "x", "match", "split");
 %! assert (a, cell (1, 0));
 %! assert (b, {"foo bar"});
 %!test
 %! [a, b] = regexp (str, "[o]+", "match", "split");
 %! assert (a, {"oo"});
 %! assert (b, {"f", " bar"});
 
+## Test escape sequences are expanded even in single-quoted strings
 %!assert (regexp ("\n", '\n'), 1)
 %!assert (regexp ("\n", "\n"), 1)
 
 # Test escape sequences are silently converted
 %!test <*45407>
 %! assert (regexprep ('s', 's', 'x\.y'), 'x.y');
 %! assert (regexprep ('s', '(s)', 'x\$1y'), 'x$1y');
 %! assert (regexprep ('s', '(s)', 'x\\$1y'), 'x\sy');
 
+## Test input validation
+%!error regexp ('string', 'tri', 'BadArg')
+%!error regexp ('string')
+
 */
 
 DEFUN (regexpi, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexpi (@var{str}, @var{pat})
 @deftypefnx {} {[@dots{}] =} regexpi (@var{str}, @var{pat}, "@var{opt1}", @dots{})
 
 Case insensitive regular expression string matching.
@@ -1487,49 +1514,60 @@ function.
 %! data = "Bob Smith\nDavid Hollerith\nSam Jenkins";
 %! result = "Smith, Bob\nHollerith, David\nJenkins, Sam";
 %! t = regexprep (data, '(?m)^(\w+)\s+(\w+)$', '$2, $1');
 %! assert (t, result);
 
 ## Return the original if no match
 %!assert (regexprep ('hello', 'world', 'earth'), 'hello')
 
-## Test emptymatch
+## Test emptymatch option
 %!assert (regexprep ('World', '^', 'Hello '), 'World')
 %!assert (regexprep ('World', '^', 'Hello ', 'emptymatch'), 'Hello World')
 
 ## Test a general replacement
 %!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Za-z0-9_]", "_"), "a_b_c_d_e_f_g")
 
-## Make sure it works at the beginning and end
+## Make sure replacements work at the beginning and end of string
 %!assert (regexprep ("a[b]c{d}e-f=g", "a", "_"), "_[b]c{d}e-f=g")
 %!assert (regexprep ("a[b]c{d}e-f=g", "g", "_"), "a[b]c{d}e-f=_")
 
-## Options
-%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Za-z0-9_]", "_", "once"), "a_b]c{d}e-f=g")
-%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Z0-9_]", "_", "ignorecase"), "a_b_c_d_e_f_g")
+## Test options "once" and "ignorecase"
+%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Za-z0-9_]", "_", "once"),
+%!        "a_b]c{d}e-f=g")
+%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Z0-9_]", "_", "ignorecase"),
+%!        "a_b_c_d_e_f_g")
 
 ## Option combinations
-%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Z0-9_]", "_", "once", "ignorecase"), "a_b]c{d}e-f=g")
+%!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Z0-9_]", "_", "once", "ignorecase"),
+%!        "a_b]c{d}e-f=g")
 
 ## End conditions on replacement
 %!assert (regexprep ("abc", "(b)", ".$1"), "a.bc")
 %!assert (regexprep ("abc", "(b)", "$1"), "abc")
 %!assert (regexprep ("abc", "(b)", "$1."), "ab.c")
 %!assert (regexprep ("abc", "(b)", "$1.."), "ab..c")
 
 ## Test cell array arguments
 %!assert (regexprep ("abc", {"b","a"}, "?"), "??c")
 %!assert (regexprep ({"abc","cba"}, "b", "?"), {"a?c","c?a"})
 %!assert (regexprep ({"abc","cba"}, {"b","a"}, {"?","!"}), {"!?c","c?!"})
 
-# Nasty lookbehind expression
+## Nasty lookbehind expression
 %!test
 %! warning ("off", "Octave:regexp-lookbehind-limit", "local");
-%! assert (regexprep ('x^(-1)+y(-1)+z(-1)=0', '(?<=[a-z]+)\(\-[1-9]*\)', '_minus1'),'x^(-1)+y_minus1+z_minus1=0');
+%! assert (regexprep ('x^(-1)+y(-1)+z(-1)=0', '(?<=[a-z]+)\(\-[1-9]*\)',
+%!         '_minus1'),'x^(-1)+y_minus1+z_minus1=0');
 
+## Verify escape sequences in pattern
 %!assert (regexprep ("\n", '\n', "X"), "X")
 %!assert (regexprep ("\n", "\n", "X"), "X")
 
+## Verify NULLs in pattern and replacement string
+%!assert (regexprep ("A\0A", "\0", ","), "A,A")
+%!assert (regexprep ("A\0A", '\0', ","), "A,A")
+%!assert (regexprep ("A,A", "A", "B\0B"), "B\0B,B\0B")
+%!assert (regexprep ("A,A", "A", 'B\0B'), "B\0B,B\0B")
+
 ## Empty matches were broken on ARM architecture
 %!test <*52810>
 %! assert (strcmp (regexprep ("\nabc", "^(\t*)(abc)$", "$1$2", "lineanchors"), "\nabc"))
 */
