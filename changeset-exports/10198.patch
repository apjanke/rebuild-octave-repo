# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264488579 18000
#      Tue Jan 26 01:49:39 2010 -0500
# Node ID 025564630c8da5beca3ea34d355a19943cc6bdb8
# Parent  4d433bd2d4dc24d836d75a5d3b49d873a98b6da6
file-ops.cc: don't tag functions with OCTAVE_API i source file

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2010-01-26  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.cc: Don't tag functions with OCTAVE_API in source file.
+
 2010-01-26  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c, lo-utils.h (octave_link, octave_symlink,
 	octave_readlink, octave_mkdir, octave_mkfifo, octave_rmdir,
 	octave_rename, octave_tempnam, octave_umask, octave_unlink):
 	Delete.
 	* file-io.h, file-io.cc (octave_mkdir,  octave_mkfifo,
 	octave_link, octave_symlink, octave_readlink, octave_rename,
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -480,24 +480,24 @@ extern int errno;
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return retval;
 }
 
-OCTAVE_API int
+int
 octave_mkdir (const std::string& nm, mode_t md)
 {
   std::string msg;
   return octave_mkdir (nm, md, msg);
 }
 
-OCTAVE_API int
+int
 octave_mkdir (const std::string& name, mode_t mode, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = mkdir (name.c_str (), mode);
 
@@ -505,24 +505,24 @@ octave_mkdir (const std::string& name, m
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_mkfifo (const std::string& nm, mode_t md)
 {
   std::string msg;
   return octave_mkfifo (nm, md, msg);
 }
 
-OCTAVE_API int
+int
 octave_mkfifo (const std::string& name, mode_t mode, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   // With gnulib we will always have mkfifo, but some systems like MinGW
   // don't have working mkfifo functions.  On those systems, mkfifo will
@@ -534,24 +534,24 @@ octave_mkfifo (const std::string& name, 
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_link (const std::string& old_name, const std::string& new_name)
 {
   std::string msg;
   return octave_link (old_name, new_name, msg);
 }
 
-OCTAVE_API int
+int
 octave_link (const std::string& old_name,
                 const std::string& new_name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = link (old_name.c_str (), new_name.c_str ());
@@ -560,24 +560,24 @@ octave_link (const std::string& old_name
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_symlink (const std::string& old_name, const std::string& new_name)
 {
   std::string msg;
   return octave_symlink (old_name, new_name, msg);
 }
 
-OCTAVE_API int
+int
 octave_symlink (const std::string& old_name,
                    const std::string& new_name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = symlink (old_name.c_str (), new_name.c_str ());
@@ -586,24 +586,24 @@ octave_symlink (const std::string& old_n
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_readlink (const std::string& path, std::string& result)
 {
   std::string msg;
   return octave_readlink (path, result, msg);
 }
 
-OCTAVE_API int
+int
 octave_readlink (const std::string& path, std::string& result,
                     std::string& msg)
 {
   int status = -1;
 
   msg = std::string ();
 
   char buf[MAXPATHLEN+1];
@@ -620,24 +620,24 @@ octave_readlink (const std::string& path
       buf[status] = '\0';
       result = std::string (buf);
       status = 0;
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_rename (const std::string& from, const std::string& to)
 {
   std::string msg;
   return octave_rename (from, to, msg);
 }
 
-OCTAVE_API int
+int
 octave_rename (const std::string& from, const std::string& to,
                   std::string& msg)
 {
   int status = -1;
 
   msg = std::string ();
 
   status = rename (from.c_str (), to.c_str ());
@@ -646,24 +646,24 @@ octave_rename (const std::string& from, 
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_rmdir (const std::string& name)
 {
   std::string msg;
   return octave_rmdir (name, msg);
 }
 
-OCTAVE_API int
+int
 octave_rmdir (const std::string& name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = rmdir (name.c_str ());
 
@@ -673,24 +673,24 @@ octave_rmdir (const std::string& name, s
       msg = strerror (errno);
     }
 
   return status;
 }
 
 // And a version that works recursively.
 
-OCTAVE_API int
+int
 octave_recursive_rmdir (const std::string& name)
 {
   std::string msg;
   return octave_recursive_rmdir (name, msg);
 }
 
-OCTAVE_API int
+int
 octave_recursive_rmdir (const std::string& name, std::string& msg)
 {
   msg = std::string ();
 
   int status = 0;
 
   dir_entry dir (name);
 
@@ -748,34 +748,34 @@ octave_recursive_rmdir (const std::strin
       status = -1;
 
       msg = dir.error ();
     }
 
   return status;
 }
 
-OCTAVE_API int
+int
 octave_umask (mode_t mode)
 {
 #if defined (HAVE_UMASK)
   return umask (mode);
 #else
   return 0;
 #endif
 }
 
-OCTAVE_API int
+int
 octave_unlink (const std::string& name)
 {
   std::string msg;
   return octave_unlink (name, msg);
 }
 
-OCTAVE_API int
+int
 octave_unlink (const std::string& name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = unlink (name.c_str ());
 
@@ -783,24 +783,24 @@ octave_unlink (const std::string& name, 
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return status;
 }
 
-OCTAVE_API std::string
+std::string
 octave_tempnam (const std::string& dir, const std::string& pfx)
 {
   std::string msg;
   return octave_tempnam (dir, pfx, msg);
 }
 
-OCTAVE_API std::string
+std::string
 octave_tempnam (const std::string& dir, const std::string& pfx,
                 std::string& msg)
 {
   msg = std::string ();
 
   std::string retval;
   
   const char *pdir = dir.empty () ? 0 : dir.c_str ();
