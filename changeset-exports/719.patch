# HG changeset patch
# User jwe
# Date 780159836 0
#      Wed Sep 21 15:03:56 1994 +0000
# Node ID 02814aea28c8f20ad9920d2be594c69316125d77
# Parent  e81d3a66725e6494391f5182ee0d975f968aebc8
[project @ 1994-09-21 15:01:30 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -112,17 +112,17 @@ static Matrix
 map (d_dd_fcn f, const Matrix& x, const Matrix& y)
 {
   int x_nr = x.rows ();
   int x_nc = x.columns ();
 
   int y_nr = y.rows ();
   int y_nc = y.columns ();
 
-  assert (x_nr == x_nc && y_nr == y_nc);
+  assert (x_nr == y_nr && x_nc == y_nc);
 
   Matrix retval (x_nr, x_nc);
 
   for (int j = 0; j < x_nc; j++)
     for (int i = 0; i < x_nr; i++)
       retval.elem (i, j) = f (x.elem (i, j), y.elem (i, j));
 
   return retval;
@@ -144,25 +144,21 @@ DEFUN ("atan2", Fatan2, Satan2, 2, 1,
       int y_nc = arg_y.columns ();
 
       int x_nr = arg_x.rows ();
       int x_nc = arg_x.columns ();
 
       int arg_y_empty = empty_arg ("atan2", y_nr, y_nc);
       int arg_x_empty = empty_arg ("atan2", x_nr, x_nc);
 
-      if (arg_y_empty < 0 || arg_x_empty < 0)
+      if (arg_y_empty > 0 && arg_x_empty > 0)
+	return Matrix ();
+      else if (arg_y_empty || arg_x_empty)
 	return retval;
 
-      if (arg_y_empty || arg_x_empty)
-	{
-	  retval = Matrix ();
-	  return retval;
-	}
-
       int y_is_scalar = (y_nr == 1 && y_nc == 1);
       int x_is_scalar = (x_nr == 1 && x_nc == 1);
 
       if (y_is_scalar && x_is_scalar)
 	{
 	  double y = arg_y.double_value ();
 
 	  if (! error_state)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -873,18 +873,17 @@ print_empty_matrix (ostream& os, int nr,
       os << "[]";
       if (user_pref.print_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
       os << "\n";
     }
 }
 
 void
-octave_print_internal (ostream& os, double d,
-		       int pr_as_read_syntax)
+octave_print_internal (ostream& os, double d, int pr_as_read_syntax)
 {
   if (plus_format)
     {
       if (d == 0.0)
 	os << " ";
       else
 	os << "+";
     }
@@ -897,18 +896,17 @@ octave_print_internal (ostream& os, doub
 	pr_float (os, d);
     }
 
   if (! pr_as_read_syntax)
     os << "\n";
 }
 
 void
-octave_print_internal (ostream& os, const Matrix& m,
-		       int pr_as_read_syntax)
+octave_print_internal (ostream& os, const Matrix& m, int pr_as_read_syntax)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -517,16 +517,19 @@ make_argv (const Octave_object& args, co
 	argv[i+1] = strsave (args(i).string_value ());
     }
   else
     error ("%s: expecting all arguments to be strings", fcn_name);
 
   return argv;
 }
 
+// Return non-zero if either NR or NC is zero.  Return -1 if this
+// should be considered fatal; return 1 if this is ok.
+
 int
 empty_arg (const char *name, int nr, int nc)
 {
   int is_empty = 0;
 
   if (nr == 0 || nc == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
@@ -536,16 +539,18 @@ empty_arg (const char *name, int nr, int
 	  gripe_empty_arg (name, 0);
 	  is_empty = 1;
 	}
       else if (flag == 0)
 	{
 	  gripe_empty_arg (name, 1);
 	  is_empty = -1;
 	}
+      else
+	is_empty = 1;
     }
 
   return is_empty;
 }
 
 // Format a list in neat columns.  Mostly stolen from GNU ls.  This
 // should maybe be in utils.cc.
 
