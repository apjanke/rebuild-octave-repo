# HG changeset patch
# User jwe
# Date 949443024 0
#      Tue Feb 01 22:10:24 2000 +0000
# Node ID d921340627837d7cd09368b7306eb746e2bf2d78
# Parent  81a6b40c07696cac9185de88020a7c3c40e64398
[project @ 2000-02-01 22:06:28 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,15 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Quad.h: Use do_integrate as name of pure virtual function.
+
 	* base-de.h: Use tt instead of t as arg names.
+	Add method with tcrit arg.
+
 	* DAE.h, DAE.cc: Likewise, also xx for x.
 
 	* DASSL.cc (dassl_fcn_ptr, dassl_jac_ptr): New typedefs.
 	* LSODE.cc: lsode_fcn_ptr, lsode_jac_ptr): Ditto.
 	* Quad.cc (quad_fcn_ptr): Ditto.
 	* NLEqn.cc (hybrd1_fcn_ptr, hybrj1_fcn_ptr): Ditto.
 
 	* oct-getopt.h, oct-getopt.c: New files for interface to getopt.
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -300,44 +300,16 @@ LSODE::do_integrate (double tout)
 	    ("unrecognized value of istate returned from lsode");
 	  break;
 	}
     }
 
   return retval;
 }
 
-#if 0
-void
-LSODE::integrate (int nsteps, double tstep, std::ostream& s)
-{
-  int time_to_quit = 0;
-  double tout = t;
-
-  s << t << " " << x << "\n";
-
-  for (int i = 0; i < nsteps; i++)
-    {
-      tout += tstep;
-      if (stop_time_set && tout > stop_time)
-	{
-	  tout = stop_time;
-	  time_to_quit = 1;
-	}
-
-      x = integrate (tout);
-
-      s << t << " " << x << "\n";
-
-      if (time_to_quit)
-	return;
-    }
-}
-#endif
-
 Matrix
 LSODE::do_integrate (const ColumnVector& tout)
 {
   Matrix retval;
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
@@ -357,17 +329,17 @@ LSODE::do_integrate (const ColumnVector&
 	    retval.elem (j, i) = x_next.elem (i);
 	}
     }
 
   return retval;
 }
 
 Matrix
-LSODE::integrate (const ColumnVector& tout, const ColumnVector& tcrit)
+LSODE::do_integrate (const ColumnVector& tout, const ColumnVector& tcrit)
 {
   Matrix retval;
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       retval.resize (n_out, n);
 
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -144,24 +144,17 @@ public:
 
   void set_stop_time (double t);
   void clear_stop_time (void);
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
-#if 0
-  void integrate (int nsteps, double tstep, std::ostream& s);
-#endif
-
-  Matrix integrate (const ColumnVector& tout)
-    { return do_integrate (tout); }
-
-  Matrix integrate (const ColumnVector& tout, const ColumnVector& tcrit);
+  Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
 private:
 
   double stop_time;
   int stop_time_set;
 
   int n;
   int integration_error;
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -77,17 +77,17 @@ user_function (double *x, int& ierr, dou
 
   if (quad_integration_error)
     ierr = -1;
 
   return 0;
 }
 
 double
-DefQuad::integrate (int& ier, int& neval, double& abserr)
+DefQuad::do_integrate (int& ier, int& neval, double& abserr)
 {
   int npts = singularities.capacity () + 2;
   double *points = singularities.fortran_vec ();
   double result = 0.0;
 
   int leniw = 183*npts - 122;
   Array<int> iwork (leniw);
   int *piwork = iwork.fortran_vec ();
@@ -109,17 +109,17 @@ DefQuad::integrate (int& ier, int& neval
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dqagp");
 
   return result;
 }
 
 double
-IndefQuad::integrate (int& ier, int& neval, double& abserr)
+IndefQuad::do_integrate (int& ier, int& neval, double& abserr)
 {
   double result = 0.0;
 
   int leniw = 128;
   Array<int> iwork (leniw);
   int *piwork = iwork.fortran_vec ();
 
   int lenw = 8*leniw;
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -111,33 +111,38 @@ Quad : public Quad_options
     : Quad_options (abs, rel), f (fcn) { }
 
   virtual ~Quad (void) { }
 
   virtual double integrate (void)
     {
       int ier, neval;
       double abserr;
-      return integrate (ier, neval, abserr);
+      return do_integrate (ier, neval, abserr);
     }
 
   virtual double integrate (int& ier)
     {
       int neval;
       double abserr;
-      return integrate (ier, neval, abserr);
+      return do_integrate (ier, neval, abserr);
     }
 
   virtual double integrate (int& ier, int& neval)
     {
       double abserr;
-      return integrate (ier, neval, abserr);
+      return do_integrate (ier, neval, abserr);
     }
 
-  virtual double integrate (int& ier, int& neval, double& abserr) = 0;
+  virtual double integrate (int& ier, int& neval, double& abserr)
+    {
+      return do_integrate (ier, neval, abserr);
+    }
+
+  virtual double do_integrate (int& ier, int& neval, double& abserr) = 0;
 
  protected:
 
   integrand_fcn f;
 };
 
 class
 DefQuad : public Quad
@@ -171,17 +176,17 @@ DefQuad : public Quad
 
   DefQuad (integrand_fcn fcn, double ll, double ul, const ColumnVector& sing,
 	   double abs, double rel)
     : Quad (fcn, abs, rel), lower_limit (ll), upper_limit (ul),
       singularities (sing) { }
 
   ~DefQuad (void) { }
 
-  double integrate (int& ier, int& neval, double& abserr);
+  double do_integrate (int& ier, int& neval, double& abserr);
 
  private:
 
   double lower_limit;
   double upper_limit;
 
   ColumnVector singularities;
 };
@@ -203,17 +208,17 @@ IndefQuad : public Quad
 	     double rel)
     : Quad (fcn, abs, rel), bound (b), type (t) { }
 
   IndefQuad (integrand_fcn fcn, double abs, double rel)
     : Quad (fcn, abs, rel), bound (0.0), type (bound_to_inf) { }
 
   ~IndefQuad (void) { }
 
-  double integrate (int& ier, int& neval, double& abserr);
+  double do_integrate (int& ier, int& neval, double& abserr);
 
  private:
 
   double bound;
   IntegralType type;
   int integration_error;
 };
 
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -55,16 +55,19 @@ public:
   // Return the vector of states at output time t.
   virtual ColumnVector do_integrate (double tt) = 0;
 
   // Return a matrix of states at each output time specified by t.
   // The rows of the result matrix should each correspond to a new
   // output time.
   virtual Matrix do_integrate (const ColumnVector& tt) = 0;
 
+  virtual Matrix do_integrate (const ColumnVector& tt,
+			       const ColumnVector& ttcrit) = 0;
+
   // There must also be a way for us to force the integration to
   // restart.
   virtual void force_restart (void) = 0;
 
   // Lots of ways to call the single function and optionally set and
   // get additional information.
 
   // Integrate to t from current point.
@@ -81,22 +84,38 @@ public:
   // Integrate from current point and return output at all points
   // specified by t.
   virtual Matrix integrate (const ColumnVector& tt)
     { return do_integrate (tt); }
 
   // Set new x0, t0 and integrate to return output at all points
   // specified by t.
   virtual Matrix integrate (const ColumnVector& x0, double t0,
-			    const ColumnVector tt)
+			    const ColumnVector& tt)
     {
       initialize (x0, t0);
       return do_integrate (tt);
     }
 
+  // Integrate from current point and return output at all points
+  // specified by t.
+  virtual Matrix integrate (const ColumnVector& tt,
+			    const ColumnVector& ttcrit)
+    { return do_integrate (tt, ttcrit); }
+
+  // Set new x0, t0 and integrate to return output at all points
+  // specified by t.
+  virtual Matrix integrate (const ColumnVector& x0, double t0,
+			    const ColumnVector& tt,
+			    const ColumnVector& ttcrit)
+    {
+      initialize (x0, t0);
+      return do_integrate (tt, ttcrit);
+    }
+
   virtual void initialize (const ColumnVector& x0, double t0)
     {
       x = x0;
       t = t0;
       force_restart ();
     }
 
   int size (void) const { return x.capacity (); }
