# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1452666522 -39600
#      Wed Jan 13 17:28:42 2016 +1100
# Node ID 759fcdf3666db41da1105127924dfe5e15121a60
# Parent  b0afe19932680040572f88f35bb7317977021658
Test GUI marker flags correctly, and omit unnecessary test finding next marker

* file-editor-tab.cc (handle_margin_clicked, toggle_bookmark): & not &&

* file-editor-tab.cc (next_bookmark, previous_bookmark, next_breakpoint,
  previous_breakpoint): Skip current line wether or not it has a marker.

* file-editor-tab.{cc,h} (message_cannot_breakpoint_changed_file): replace
  by unchanged_or_saved(), to save if necessary before breakpointing

* file-editor-tab.cc (handle_margin_clicked, toggle_bookmark): call
  unchanged_of_saved().

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -16,16 +16,21 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
+/**
+ @file A single GUI file tab.
+ This interfaces QSciScintilla with the rest of Octave.
+ */
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifdef HAVE_QSCINTILLA
 
 #if defined (HAVE_QSCI_QSCILEXEROCTAVE_H)
 #define HAVE_LEXER_OCTAVE
@@ -68,16 +73,22 @@ along with Octave; see the file COPYING.
 #include "octave-qt-link.h"
 #include "version.h"
 #include "utils.h"
 #include "defaults.h"
 #include <oct-map.h>
 
 bool file_editor_tab::_cancelled = false;
 
+/**
+ A file_editor_tab object consists of a text area and three left margins.
+ The first holds breakpoints, bookmarks, and the debug program counter.
+ The second holds line numbers.
+ The third holds "fold" marks, to hide sections of text.
+ */
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
 file_editor_tab::file_editor_tab (const QString& directory_arg)
 {
   _lexer_apis = 0;
   _is_octave_file = true;
   _lines_changed = false;
 
@@ -316,76 +327,85 @@ file_editor_tab::set_file_name (const QS
   _file_name = fileName;
 
   // update lexer after _file_name change
   update_lexer ();
 
   // update the file editor with current editing directory
   emit editor_state_changed (_copy_available, _is_octave_file);
 
-  // add the new file to the mru list
+  // add the new file to the most-recently-used list
   emit mru_add_file (_file_name, _encoding);
 }
 
-// valid_file_name (file): checks whether "file" names a file
-// by default, "file" is empty, then _file_name is checked
+// valid_file_name (file): checks whether "file" names a file.
+// By default, "file" is empty; then _file_name is checked
 bool
 file_editor_tab::valid_file_name (const QString& file)
 {
   if (file.isEmpty ())
     {
       if (_file_name.isEmpty ())
         return false;
       else
         return true;
     }
 
   return true;
 }
 
-void
-file_editor_tab::message_cannot_breakpoint_changed_file (void)
+// We cannot create a breakpoint when the file is modified
+// because the line number the editor is providing might
+// not match what Octave core is interpreting in the
+// file on disk.  This function gives the user the option
+// to save before creating the breakpoint.
+bool
+file_editor_tab::unchanged_or_saved (void)
 {
-  // Cannot create a breakpoint when the file is modified
-  // because the line number the editor is providing might
-  // not match what Octave core is interpretting in the
-  // file on disk.
-  QMessageBox* msgBox = new QMessageBox (QMessageBox::Critical,
-                                         tr ("Octave Editor"),
-                                         tr ("Cannot add breakpoint to modified file."),
-                                         QMessageBox::Ok, 0);
-  msgBox->setWindowModality (Qt::ApplicationModal);
-  msgBox->exec ();
-  delete msgBox;
+  bool retval = true;
+  if (_edit_area->isModified ())
+    {
+      int ans = QMessageBox::question (0, tr ("Octave Editor"),
+         tr ("Cannot add breakpoint to modified file.\n"
+             "Save and add breakpoint, or canel?"),
+          QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Save);
+
+      if (ans == QMessageBox::Save)
+        save_file (_file_name, false);
+      else
+        retval = false;
+    }
+
+  return retval;
 }
 
+// Toggle a breakpoint at the editor_linenr or, if this was called by
+// a click with CTRL pressed, toggle a bookmark at that point.
 void
 file_editor_tab::handle_margin_clicked (int margin, int editor_linenr,
                                         Qt::KeyboardModifiers state)
 {
   if (margin == 1)
     {
       unsigned int markers_mask = _edit_area->markersAtLine (editor_linenr);
 
       if (state & Qt::ControlModifier)
         {
-          if (markers_mask && (1 << marker::bookmark))
+          if (markers_mask & (1 << marker::bookmark))
             _edit_area->markerDelete (editor_linenr, marker::bookmark);
           else
             _edit_area->markerAdd (editor_linenr, marker::bookmark);
         }
       else
         {
-          if (markers_mask && (1 << marker::breakpoint))
+          if (markers_mask & (1 << marker::breakpoint))
             handle_request_remove_breakpoint (editor_linenr + 1);
           else
             {
-              if (_edit_area->isModified ())
-                message_cannot_breakpoint_changed_file ();
-              else
+              if (unchanged_or_saved ())
                 handle_request_add_breakpoint (editor_linenr + 1);
             }
         }
     }
 }
 
 void
 file_editor_tab::update_lexer ()
@@ -760,50 +780,52 @@ void
 file_editor_tab::toggle_bookmark (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur;
   _edit_area->getCursorPosition (&line, &cur);
 
-  if (_edit_area->markersAtLine (line) && (1 << marker::bookmark))
+  if (_edit_area->markersAtLine (line) & (1 << marker::bookmark))
     _edit_area->markerDelete (line, marker::bookmark);
   else
     _edit_area->markerAdd (line, marker::bookmark);
 }
 
+// Move the text cursor to the closest bookmark
+// after the current line.
 void
 file_editor_tab::next_bookmark (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur;
   _edit_area->getCursorPosition (&line, &cur);
 
-  if (_edit_area->markersAtLine (line) && (1 << marker::bookmark))
-    line++; // we have a breakpoint here, so start search from next line
+  line++; // Find bookmark strictly after the current line.
 
   int nextline = _edit_area->markerFindNext (line, (1 << marker::bookmark));
 
   _edit_area->setCursorPosition (nextline, 0);
 }
 
+// Move the text cursor to the closest bookmark
+// before the current line.
 void
 file_editor_tab::previous_bookmark (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur;
   _edit_area->getCursorPosition (&line, &cur);
 
-  if (_edit_area->markersAtLine (line) && (1 << marker::bookmark))
-    line--; // we have a breakpoint here, so start search from prev line
+  line--; // Find bookmark strictly before the current line.
 
   int prevline = _edit_area->markerFindPrevious (line, (1 << marker::bookmark));
 
   _edit_area->setCursorPosition (prevline, 0);
 }
 
 void
 file_editor_tab::remove_bookmark (const QWidget *ID)
@@ -893,55 +915,55 @@ void
 file_editor_tab::toggle_breakpoint (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int editor_linenr, cur;
   _edit_area->getCursorPosition (&editor_linenr, &cur);
 
-  if (_edit_area->markersAtLine (editor_linenr) && (1 << marker::breakpoint))
+  if (_edit_area->markersAtLine (editor_linenr) & (1 << marker::breakpoint))
     request_remove_breakpoint_via_editor_linenr (editor_linenr);
   else
     {
-      if (_edit_area->isModified ())
-        message_cannot_breakpoint_changed_file ();
-      else
+      if (unchanged_or_saved ())
         handle_request_add_breakpoint (editor_linenr + 1);
     }
 }
 
+// Move the text cursor to the closest breakpoint
+// after the current line.
 void
 file_editor_tab::next_breakpoint (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur;
   _edit_area->getCursorPosition (&line, &cur);
 
-  if (_edit_area->markersAtLine (line) && (1 << marker::breakpoint))
-    line++; // we have a breakpoint here, so start search from next line
+  line++; // Find breakpoint strictly after the current line.
 
   int nextline = _edit_area->markerFindNext (line, (1 << marker::breakpoint));
 
   _edit_area->setCursorPosition (nextline, 0);
 }
 
+// Move the text cursor to the closest breakpoint
+// before the current line.
 void
 file_editor_tab::previous_breakpoint (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur, prevline;
   _edit_area->getCursorPosition (&line, &cur);
 
-  if (_edit_area->markersAtLine (line) && (1 << marker::breakpoint))
-    line--; // we have a breakpoint here, so start search from prev line
+  line--; // Find breakpoint strictly before the current line.
 
   prevline = _edit_area->markerFindPrevious (line, (1 << marker::breakpoint));
 
   _edit_area->setCursorPosition (prevline, 0);
 }
 
 void
 file_editor_tab::remove_all_breakpoints (const QWidget *ID)
@@ -2181,17 +2203,17 @@ file_editor_tab::handle_file_resave_answ
 }
 
 void
 file_editor_tab::insert_debugger_pointer (const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
-  emit remove_all_positions ();  // remove all positions
+  emit remove_all_positions ();  // debugger_position, unsure_debugger_position
 
   if (line > 0)
     {
       marker *dp;
 
       if (_edit_area->isModified ())
         {
           // The best that can be done if the editor contents has been
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -224,17 +224,17 @@ private:
 
   bool valid_file_name (const QString& file=QString ());
   void save_file (const QString& saveFileName, bool remove_on_success = false,
                                                bool restore_breakpoints = true);
   void save_file_as (bool remove_on_success = false);
   bool check_valid_identifier (QString file_name);
   bool check_valid_codec (QTextCodec *codec);
 
-  void message_cannot_breakpoint_changed_file (void);
+  bool unchanged_or_saved (void);
 
   void update_lexer ();
 
   void show_dialog (QDialog *dlg, bool modal);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
   QString comment_string (const QString&);
   void do_indent_selected_text (bool indent);
