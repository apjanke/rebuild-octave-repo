# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1312469791 14400
#      Thu Aug 04 10:56:31 2011 -0400
# Node ID 61906c0d1e9bce0b98d3e05a571549598eaaf99e
# Parent  d6209c354667c755c1388262b9b79e969cee095c
# Parent  f3a8d1efe2c1e48800cbb8d83063cf12b24c8c0d
periodic merge of stable to default

diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -119,17 +119,17 @@ octave_fgets (FILE *f, bool& eof)
   int max_size = grow_size;
 
   char *buf = static_cast<char *> (gnulib::malloc (max_size));
   char *bufptr = buf;
   int len = 0;
 
   do
     {
-      if (fgets (bufptr, grow_size, f))
+      if (gnulib::fgets (bufptr, grow_size, f))
         {
           len = strlen (bufptr);
 
           if (len == grow_size - 1)
             {
               int tmp = bufptr - buf + grow_size - 1;
               grow_size *= 2;
               max_size += grow_size;
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -70,19 +70,19 @@ public:
 
   int flush (void);
 
   int buf_close (void);
 
   int file_number () const { return f ? fileno (f) : -1; }
 
   int seek (long offset, int origin)
-    { return f ? fseek (f, offset, origin) : -1; }
+    { return f ? gnulib::fseek (f, offset, origin) : -1; }
 
-  long tell (void) { return f ? ftell (f) : -1; }
+  long tell (void) { return f ? gnulib::ftell (f) : -1; }
 
   void clear (void) { if (f) clearerr (f); }
 
   static int file_close (FILE *f);
 
 protected:
 
   FILE *f;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1984,17 +1984,17 @@ error message.\n\
     {
       std::string tmpl8 = args(0).string_value ();
 
       if (! error_state)
         {
           OCTAVE_LOCAL_BUFFER (char, tmp, tmpl8.size () + 1);
           strcpy (tmp, tmpl8.c_str ());
 
-          int fd = mkstemp (tmp);
+          int fd = gnulib::mkstemp (tmp);
 
           if (fd < 0)
             {
               retval(2) = gnulib::strerror (errno);
               retval(0) = fd;
             }
           else
             {
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -3275,23 +3275,23 @@ looks_like_copyright (const std::string&
     }
 
   return retval;
 }
 
 static int
 text_getc (FILE *f)
 {
-  int c = getc (f);
+  int c = gnulib::getc (f);
 
   // Convert CRLF into just LF and single CR into LF.
 
   if (c == '\r')
     {
-      c = getc (f);
+      c = gnulib::getc (f);
 
       if (c != '\n')
         {
           ungetc (c, f);
           c = '\n';
         }
     }
 
@@ -3355,26 +3355,26 @@ skip_white_space (stream_reader& reader)
   return (c == EOF);
 }
 
 static bool
 looking_at_classdef_keyword (FILE *ffile)
 {
   bool status = false;
 
-  long pos = ftell (ffile);
+  long pos = gnulib::ftell (ffile);
 
   char buf [10];
-  fgets (buf, 10, ffile);
+  gnulib::fgets (buf, 10, ffile);
   size_t len = strlen (buf);
   if (len > 8 && strncmp (buf, "classdef", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = true;
 
-  fseek (ffile, pos, SEEK_SET);
+  gnulib::fseek (ffile, pos, SEEK_SET);
 
   return status;
  }
 
 static std::string
 gobble_leading_white_space (FILE *ffile, bool& eof)
 {
   std::string help_txt;
@@ -3415,26 +3415,26 @@ gobble_leading_white_space (FILE *ffile,
   return help_txt;
 }
 
 static bool
 looking_at_function_keyword (FILE *ffile)
 {
   bool status = false;
 
-  long pos = ftell (ffile);
+  long pos = gnulib::ftell (ffile);
 
   char buf [10];
-  fgets (buf, 10, ffile);
+  gnulib::fgets (buf, 10, ffile);
   size_t len = strlen (buf);
   if (len > 8 && strncmp (buf, "function", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = true;
 
-  fseek (ffile, pos, SEEK_SET);
+  gnulib::fseek (ffile, pos, SEEK_SET);
 
   return status;
 }
 
 static octave_function *
 parse_fcn_file (const std::string& ff, const std::string& dispatch_type,
                 bool force_script = false, bool require_file = true,
                 const std::string& warn_for = std::string ())
