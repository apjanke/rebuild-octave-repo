# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1212414609 14400
#      Mon Jun 02 09:50:09 2008 -0400
# Branch release-3-0-x
# Node ID c5d9aaeb306a23ceff77cdbb357d80f8989af4b8
# Parent  78d3faa70aaa88e3174ddb2ca327f02f8ef0fbdd
use ischar instead of isstr

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2008-06-02  John W. Eaton  <jwe@octave.org>
+
+	* linear-algebra/cond.m, miscellaneous/news.m,
+	miscellaneous/unpack.m, plot/__bar__.m, plot/__quiver__.m,
+	plot/__scatter__.m, plot/compass.m, plot/feather.m:
+	Call ischar instead of isstr.
+
 2008-05-22  David Bateman  <dbateman@free.fr>
 
 	* general/rem.m, general/mod.m: Treat integer types correctly.
 
 2008-04-29  David Bateman  <dbateman@free.fr>
 
 	pkg/pkg.m: Also set archprefix with the -local and -global options.
 
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -35,17 +35,17 @@ function retval = cond (a, p)
     if (ndims (a) > 2)
       error ("cond: only valid on 2-D objects")
     endif
 
     if (nargin <2)
       p = 2;
     endif
 
-    if (! isstr (p) && p == 2)
+    if (! ischar (p) && p == 2)
       [nr, nc] = size (a);
       if (nr == 0 || nc == 0)
         retval = 0.0;
       elseif (any (any (isinf (a) | isnan (a))))
         error ("cond: argument must not contain Inf or NaN values");
       else
         sigma   = svd (a);
         sigma_1 = sigma(1);
diff --git a/scripts/miscellaneous/news.m b/scripts/miscellaneous/news.m
--- a/scripts/miscellaneous/news.m
+++ b/scripts/miscellaneous/news.m
@@ -23,16 +23,16 @@
 
 function news ()
 
   datadir = octave_config_info ("datadir");
   newsfile = fullfile (datadir, "octave", version (), "NEWS");
 
   if (exist (newsfile, "file"))
     f = fopen (newsfile, "r");
-    while (isstr (line = fgets (f)))
+    while (ischar (line = fgets (f)))
       printf (line);
     endwhile
   else
     error ("news: unable to locate NEWS file");
   endif
 
 endfunction
diff --git a/scripts/plot/__bar__.m b/scripts/plot/__bar__.m
--- a/scripts/plot/__bar__.m
+++ b/scripts/plot/__bar__.m
@@ -62,38 +62,38 @@ function varargout = __bar__ (vertical, 
     endif
     x = [1:size(y,1)]';
     idx = 2;
   endif
       
   newargs = {};
   have_line_spec = false;
   while (idx <= nargin - 2)
-    if (isstr (varargin{idx}) && strcmp (varargin{idx}, "grouped"))
+    if (ischar (varargin{idx}) && strcmp (varargin{idx}, "grouped"))
       group = true;
       idx++;
-    elseif (isstr (varargin{idx}) && strcmp (varargin{idx}, "stacked"))
+    elseif (ischar (varargin{idx}) && strcmp (varargin{idx}, "stacked"))
       group = false;
       idx++;
     else
-      if ((isstr (varargin{idx}) || iscell (varargin{idx}))
+      if ((ischar (varargin{idx}) || iscell (varargin{idx}))
 	  && ! have_line_spec)
 	[linespec, valid] = __pltopt__ (func, varargin{idx}, false);
 	if (valid)
 	  have_line_spec = true;
 	  newargs = [{linespec.color}, newargs];
 	  idx++;
 	  continue;
 	endif
       endif
       if (isscalar(varargin{idx}))
 	width = varargin{idx++};
       elseif (idx == nargin - 2)
 	newargs = [newargs,varargin(idx++)];
-      elseif (isstr (varargin{idx}) && strcmp (tolower (varargin{idx}), "basevalue") &&
+      elseif (ischar (varargin{idx}) && strcmp (tolower (varargin{idx}), "basevalue") &&
           isscalar (varargin{idx+1}))
         bv = varargin{idx+1};
         idx += 2;
       else
 	newargs = [newargs,varargin(idx:idx+1)];
 	idx += 2;
       endif
     endif
diff --git a/scripts/plot/__quiver__.m b/scripts/plot/__quiver__.m
--- a/scripts/plot/__quiver__.m
+++ b/scripts/plot/__quiver__.m
@@ -74,17 +74,17 @@ function hlist = __quiver__ (varargin)
   endif
 
   have_filled = false;
   have_line_spec = false;
   while (ioff <= nargin)
     arg = varargin{ioff++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       have_filled = true;
-    elseif ((isstr (arg) || iscell (arg))
+    elseif ((ischar (arg) || iscell (arg))
 	    && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("quiver", arg, false);
       if (valid)
 	have_line_spec = true;
 	if (strncmp (linespec.linestyle, "none", 4))
 	  linespec.linestyle = "-";
 	endif
       else
diff --git a/scripts/plot/__scatter__.m b/scripts/plot/__scatter__.m
--- a/scripts/plot/__scatter__.m
+++ b/scripts/plot/__scatter__.m
@@ -74,17 +74,17 @@ function h = __scatter__ (varargin)
   filled = false;
   have_marker = false;
   marker = "o";
   iarg = firstnonnumeric;
   while (iarg <= nargin)
     arg = varargin{iarg++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       filled = true;
-    elseif ((isstr (arg) || iscell (arg)) && ! have_marker)
+    elseif ((ischar (arg) || iscell (arg)) && ! have_marker)
       [linespec, valid] = __pltopt__ ("scatter", arg, false);
       if (valid)
 	have_marker = true;
 	marker = linespec.marker;
 	if (strncmp (marker, "none", 4))
 	  marker = "o";
 	endif
       else
diff --git a/scripts/plot/compass.m b/scripts/plot/compass.m
--- a/scripts/plot/compass.m
+++ b/scripts/plot/compass.m
@@ -66,17 +66,17 @@ function retval = compass (varargin)
     ioff = 3;
     u = varargin {1} (:) .';
     v = varargin {2} (:) .';
   endif
 
   line_spec = "b-";
   while (ioff <= nargin)
     arg = varargin{ioff++};
-    if ((isstr (arg) || iscell (arg)) && ! have_line_spec)
+    if ((ischar (arg) || iscell (arg)) && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("compass", arg, false);
       if (valid)
 	line_spec = arg;
 	break;
       else
 	error ("compass: invalid linespec");
       endif
     else
diff --git a/scripts/plot/feather.m b/scripts/plot/feather.m
--- a/scripts/plot/feather.m
+++ b/scripts/plot/feather.m
@@ -66,17 +66,17 @@ function retval = feather (varargin)
     ioff = 3;
     u = varargin {1} (:) .';
     v = varargin {2} (:) .';
   endif
 
   line_spec = "b-";
   while (ioff <= nargin)
     arg = varargin{ioff++};
-    if ((isstr (arg) || iscell (arg)) && ! have_line_spec)
+    if ((ischar (arg) || iscell (arg)) && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("feather", arg, false);
       if (valid)
 	line_spec = arg;
 	break;
       else
 	error ("feather: invalid linespec");
       endif
     else
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,18 @@
+2008-06-02  John W. Eaton  <jwe@octave.org>
+
+	* test_io.m, test_system.m, octave.test/io/sprintf-1.m,
+	octave.test/io/sscanf-1.m, octave.test/io/tmpnam-1.m,
+	octave.test/system/computer-1.m,
+	octave.test/system/file_in_path-1.m, octave.test/system/lstat-1.m,
+	octave.test/system/pwd-1.m, octave.test/system/stat-1.m,
+	octave.test/system/strftime-1.m, octave.test/system/version-1.m:
+	Call ischar instead of isstr.
+
 2008-04-21  John W. Eaton  <jwe@octave.org>
 
 	Version 3.0.1 released.
 
 2008-04-09  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* test_string.m: Fix isprint test under Win32, where
 	isprint(setstr(9)) is true.
diff --git a/test/octave.test/io/sprintf-1.m b/test/octave.test/io/sprintf-1.m
--- a/test/octave.test/io/sprintf-1.m
+++ b/test/octave.test/io/sprintf-1.m
@@ -1,3 +1,3 @@
 [s, msg, status] = sprintf ("%s: %d\n", "test", 1);
 
-s == "test: 1\n" && isstr (msg) && status == 8
+s == "test: 1\n" && ischar (msg) && status == 8
diff --git a/test/octave.test/io/sscanf-1.m b/test/octave.test/io/sscanf-1.m
--- a/test/octave.test/io/sscanf-1.m
+++ b/test/octave.test/io/sscanf-1.m
@@ -1,7 +1,7 @@
 [a, b, c] = sscanf ("1.2 3 foo", "%f%d%s", "C");
 [v1, c1, m1] = sscanf ("1 2 3 4 5 6", "%d");
 [v2, c2, m2] = sscanf ("1 2 bar 3 4 5 6", "%d");
 
 (a == 1.2 && b == 3 && c == "foo"
- && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && isstr (m1)
- && v2 == [1; 2] && c2 == 2 && isstr (m2))
+ && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && ischar (m1)
+ && v2 == [1; 2] && c2 == 2 && ischar (m2))
diff --git a/test/octave.test/io/tmpnam-1.m b/test/octave.test/io/tmpnam-1.m
--- a/test/octave.test/io/tmpnam-1.m
+++ b/test/octave.test/io/tmpnam-1.m
@@ -1,1 +1,1 @@
-isstr (tmpnam ())
+ischar (tmpnam ())
diff --git a/test/octave.test/system/computer-1.m b/test/octave.test/system/computer-1.m
--- a/test/octave.test/system/computer-1.m
+++ b/test/octave.test/system/computer-1.m
@@ -1,2 +1,2 @@
-(isstr (computer ())
+(ischar (computer ())
  && computer () == octave_config_info ("canonical_host_type"))
diff --git a/test/octave.test/system/file_in_path-1.m b/test/octave.test/system/file_in_path-1.m
--- a/test/octave.test/system/file_in_path-1.m
+++ b/test/octave.test/system/file_in_path-1.m
@@ -1,1 +1,1 @@
-isstr (file_in_path (LOADPATH, "date.m"))
+ischar (file_in_path (LOADPATH, "date.m"))
diff --git a/test/octave.test/system/lstat-1.m b/test/octave.test/system/lstat-1.m
--- a/test/octave.test/system/lstat-1.m
+++ b/test/octave.test/system/lstat-1.m
@@ -6,9 +6,9 @@
  && struct_contains (s, "modestr")
  && struct_contains (s, "nlink")
  && struct_contains (s, "uid")
  && struct_contains (s, "gid")
  && struct_contains (s, "size")
  && struct_contains (s, "atime")
  && struct_contains (s, "mtime")
  && struct_contains (s, "ctime")
- && isstr (msg))
+ && ischar (msg))
diff --git a/test/octave.test/system/pwd-1.m b/test/octave.test/system/pwd-1.m
--- a/test/octave.test/system/pwd-1.m
+++ b/test/octave.test/system/pwd-1.m
@@ -1,1 +1,1 @@
-isstr (pwd ())
+ischar (pwd ())
diff --git a/test/octave.test/system/stat-1.m b/test/octave.test/system/stat-1.m
--- a/test/octave.test/system/stat-1.m
+++ b/test/octave.test/system/stat-1.m
@@ -6,9 +6,9 @@
  && struct_contains (s, "modestr")
  && struct_contains (s, "nlink")
  && struct_contains (s, "uid")
  && struct_contains (s, "gid")
  && struct_contains (s, "size")
  && struct_contains (s, "atime")
  && struct_contains (s, "mtime")
  && struct_contains (s, "ctime")
- && isstr (msg))
+ && ischar (msg))
diff --git a/test/octave.test/system/strftime-1.m b/test/octave.test/system/strftime-1.m
--- a/test/octave.test/system/strftime-1.m
+++ b/test/octave.test/system/strftime-1.m
@@ -1,5 +1,5 @@
-(isstr (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
- && isstr (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
- && isstr (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
- && isstr (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
- && isstr (strftime ("%m%U%w%W%x%y%Y", localtime (time ()))))
+(ischar (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
+ && ischar (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
+ && ischar (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
+ && ischar (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
+ && ischar (strftime ("%m%U%w%W%x%y%Y", localtime (time ()))))
diff --git a/test/octave.test/system/version-1.m b/test/octave.test/system/version-1.m
--- a/test/octave.test/system/version-1.m
+++ b/test/octave.test/system/version-1.m
@@ -1,1 +1,1 @@
-isstr (version ()) && strcmp (version (), OCTAVE_VERSION)
+ischar (version ()) && strcmp (version (), OCTAVE_VERSION)
diff --git a/test/test_io.m b/test/test_io.m
--- a/test/test_io.m
+++ b/test/test_io.m
@@ -205,18 +205,18 @@
 
 %% test/octave.test/io/sscanf-1.m
 %!test
 %! [a, b, c] = sscanf ("1.2 3 foo", "%f%d%s", "C");
 %! [v1, c1, m1] = sscanf ("1 2 3 4 5 6", "%d");
 %! [v2, c2, m2] = sscanf ("1 2 bar 3 4 5 6", "%d");
 %! 
 %! assert((a == 1.2 && b == 3 && c == "foo"
-%! && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && isstr (m1)
-%! && v2 == [1; 2] && c2 == 2 && isstr (m2)));
+%! && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && ischar (m1)
+%! && v2 == [1; 2] && c2 == 2 && ischar (m2)));
 
 %% test/octave.test/io/sscanf-2.m
 %!error <Invalid call to sscanf.*> sscanf ();
 
 %% test/octave.test/io/sscanf-3.m
 %!error sscanf (1, 2);
 
 %% test/octave.test/io/sscanf-4.m
@@ -246,17 +246,17 @@
 
 %% test/octave.test/io/printf-3.m
 %!error <Invalid call to printf.*> printf ();
 
 %% test/octave.test/io/sprintf-1.m
 %!test
 %! [s, msg, status] = sprintf ("%s: %d\n", "test", 1);
 %! 
-%! assert(s == "test: 1\n" && isstr (msg) && status == 8);
+%! assert(s == "test: 1\n" && ischar (msg) && status == 8);
 
 %% test/octave.test/io/sprintf-2.m
 %!error sprintf (1);
 
 %% test/octave.test/io/sprintf-3.m
 %!error <Invalid call to sprintf.*> sprintf ();
 
 %% test/octave.test/io/fopen-1.m
@@ -335,17 +335,17 @@
 
 %% test/octave.test/io/fclose-1.m
 %!error fclose (0);
 
 %% test/octave.test/io/fclose-2.m
 %!error <Invalid call to fclose.*> fclose (1, 2);
 
 %% test/octave.test/io/tmpnam-1.m
-%!assert(isstr (tmpnam ()));
+%!assert(ischar (tmpnam ()));
 
 %% test/octave.test/io/tmpnam-2.m
 %!warning tmpnam (1);
 
 %% test/octave.test/io/tmpnam-3.m
 %!warning tmpnam ("foo", 1);
 
 %% test/octave.test/io/tmpnam-4.m
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -92,21 +92,21 @@
 
 %% test/octave.test/system/asctime-2.m
 %!error asctime ();
 
 %% test/octave.test/system/asctime-3.m
 %!error asctime (1, 2);
 
 %% test/octave.test/system/strftime-1.m
-%!assert((isstr (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
-%! && isstr (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
-%! && isstr (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
-%! && isstr (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
-%! && isstr (strftime ("%m%U%w%W%x%y%Y", localtime (time ())))));
+%!assert((ischar (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
+%! && ischar (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
+%! && ischar (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
+%! && ischar (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
+%! && ischar (strftime ("%m%U%w%W%x%y%Y", localtime (time ())))));
 
 %% test/octave.test/system/strftime-2.m
 %!error <Invalid call to strftime.*> strftime ();
 
 %% test/octave.test/system/strftime-3.m
 %!error <Invalid call to strftime.*> strftime ("foo", localtime (time ()), 1);
 
 %% test/octave.test/system/clock-1.m
@@ -304,17 +304,17 @@
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
 %! && struct_contains (s, "size")
 %! && struct_contains (s, "atime")
 %! && struct_contains (s, "mtime")
 %! && struct_contains (s, "ctime")
-%! && isstr (msg)));
+%! && ischar (msg)));
 
 %% test/octave.test/system/stat-2.m
 %!error <Invalid call to stat.*> stat ();
 
 %% test/octave.test/system/stat-3.m
 %!error <Invalid call to stat.*> stat ("foo", 1);
 
 %% test/octave.test/system/lstat-1.m
@@ -327,17 +327,17 @@
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
 %! && struct_contains (s, "size")
 %! && struct_contains (s, "atime")
 %! && struct_contains (s, "mtime")
 %! && struct_contains (s, "ctime")
-%! && isstr (msg)));
+%! && ischar (msg)));
 
 %% test/octave.test/system/lstat-2.m
 %!error <Invalid call to lstat.*> lstat ();
 
 %% test/octave.test/system/lstat-3.m
 %!error <Invalid call to lstat.*> lstat ("foo", 1);
 
 %% test/octave.test/system/glob-1.m
@@ -360,17 +360,17 @@
 
 %% test/octave.test/system/fnmatch-2.m
 %!error <Invalid call to fnmatch.*> fnmatch ();
 
 %% test/octave.test/system/fnmatch-3.m
 %!error <Invalid call to fnmatch.*> fnmatch ("foo", "bar", 3);
 
 %% test/octave.test/system/file_in_path-1.m
-%!assert(isstr (file_in_path (path (), "date.m")));
+%!assert(ischar (file_in_path (path (), "date.m")));
 
 %% test/octave.test/system/file_in_path-2.m
 %!error <invalid option> file_in_path ("foo", "bar", 1);
 
 %% test/octave.test/system/file_in_path-3.m
 %!error <Invalid call to file_in_path.*> file_in_path ();
 
 %% test/octave.test/system/file_in_path-4.m
@@ -482,17 +482,17 @@
 %!   assert("/", d1);
 %! endif
 %! assert(pwd(), xdir);
 
 %% test/octave.test/system/cd-2.m
 %!error cd (1);
 
 %% test/octave.test/system/pwd-1.m
-%!assert(isstr (pwd ()));
+%!assert(ischar (pwd ()));
 
 %% test/octave.test/system/ls-1.m
 %!error ls (1);
 
 %% test/octave.test/system/getpwent-1.m
 %!testif HAVE_GETPWENT
 %! s = getpwent ();
 %! endpwent (); 
@@ -597,27 +597,27 @@
 
 %% test/octave.test/system/setgrent-2.m
 %!error <Invalid call to setgrent.*> setgrent (1);
 
 %% test/octave.test/system/endgrent-1.m
 %!error <Invalid call to endgrent.*> endgrent (1);
 
 %% test/octave.test/system/computer-1.m
-%!assert((isstr (computer ())
+%!assert((ischar (computer ())
 %! && computer () == octave_config_info ("canonical_host_type")));
 
 %% test/octave.test/system/computer-2.m
 %!warning a =computer(2);
 
 %% test/octave.test/system/isieee-1.m
 %!assert(isieee () == 1 || isieee () == 0);
 
 %% test/octave.test/system/version-1.m
-%!assert(isstr (version ()) && strcmp (version (), OCTAVE_VERSION));
+%!assert(ischar (version ()) && strcmp (version (), OCTAVE_VERSION));
 
 %% test/octave.test/system/version-2.m
 %!warning version (1);
 
 %% test/octave.test/system/octave_config_info-1.m
 %!assert(isstruct (octave_config_info ()));
 
 %% test/octave.test/system/getrusage-1.m
