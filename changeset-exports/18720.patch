# HG changeset patch
# User Rik <rik@octave.org>
# Date 1399052586 25200
#      Fri May 02 10:43:06 2014 -0700
# Node ID 04adeda9b83db5a82c80e1531bc5149eb41c5927
# Parent  b1f092e1a887d7a250978c34e9ced5c1310b4fc6
Revert ea22cf3e370b and 60df2fd04293 plotting grid/ticks over axes lines.
Need to implement a more robust solution which checks for box on / box off
and whether graph is 2D / 3D.
* gl-render.cc: Use '<=' rather than '<' to include all grid/ticks.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -646,17 +646,17 @@ opengl_renderer::render_grid (const std:
                               double p1, double p1N, double p2, double p2N,
                               int xyz, bool is_3D)
 {
   set_linestyle (gridstyle, true);
   glBegin (GL_LINES);
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
-      if (lim1 < val && val < lim2)
+      if (lim1 <= val && val <= lim2)
         {
           if (xyz == 0) // X
             {
               glVertex3d (val, p1N, p2);
               glVertex3d (val, p1, p2);
               if (is_3D)
                 {
                   glVertex3d (val, p1, p2N);
@@ -695,17 +695,17 @@ opengl_renderer::render_tickmarks (const
                                    int xyz, bool mirror)
 {
   glBegin (GL_LINES);
 
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
 
-      if (lim1 < val && val < lim2)
+      if (lim1 <= val && val <= lim2)
         {
           if (xyz == 0) // X
             {
               glVertex3d (val, p1, p2);
               glVertex3d (val, p1+dy, p2+dz);
               if (mirror)
                 {
                   glVertex3d (val, p1N, p2N);
