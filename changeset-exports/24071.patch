# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1506003173 -7200
#      Thu Sep 21 16:12:53 2017 +0200
# Node ID 3f036b46a1307d2bf23ee25966fcd720140b266e
# Parent  1091931bd63caa2c2eff57ffbe2b40a646dbf809
avoid heap-use-after-free in callback execution (bug #52024)

* graphics.in.h, graphics.cc (callback_property::executing): Delete.
(callback_props): New class.
(executing_callbacks): Rename from executing_callback and declare as
callback_props object.  Change all uses.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1761,38 +1761,69 @@ callback_property::validate (const octav
     return true;
   else if (v.iscell () && (v.rows () == 1 || v.columns () == 1)
            && v.cell_value ()(0).is_function_handle ())
     return true;
 
   return false;
 }
 
-// If TRUE, we are executing any callback function, or the functions it calls.
-// Used to determine handle visibility inside callback functions.
-static bool executing_callback = false;
+class callback_props
+{
+public:
+
+  callback_props (void) : m_set () { }
+
+  callback_props (const callback_props&) = delete;
+
+  callback_props& operator = (const callback_props&) = delete;
+
+  ~callback_props (void) = default;
+
+  bool empty (void) const { return m_set.empty (); }
+
+  void insert (const callback_property *ptr)
+  {
+    m_set.insert (reinterpret_cast<intptr_t> (ptr));
+  }
+
+  void erase (const callback_property *ptr)
+  {
+    m_set.erase (reinterpret_cast<intptr_t> (ptr));
+  }
+
+  bool contains (const callback_property *ptr) const
+  {
+    return m_set.find (reinterpret_cast<intptr_t> (ptr)) != m_set.end ();
+  }
+
+private:
+
+  std::set<intptr_t> m_set;
+};
+
+// Elements of this set are pointers to currently executing
+// callback_property objects.  Used to determine handle visibility
+// inside callback functions.
+
+static callback_props executing_callbacks;
 
 void
 callback_property::execute (const octave_value& data) const
 {
   octave::unwind_protect frame;
 
-  // We are executing the callback function associated with this
-  // callback property.  When set to true, we avoid recursive calls to
-  // callback routines.
-  frame.protect_var (executing);
-
   // We are executing a callback function, so allow handles that have
   // their handlevisibility property set to "callback" to be visible.
-  frame.protect_var (executing_callback);
-
-  if (! executing)
-    {
-      executing = true;
-      executing_callback = true;
+
+  frame.add_method (executing_callbacks, &callback_props::erase, this);
+
+  if (! executing_callbacks.contains (this))
+    {
+      executing_callbacks.insert (this);
 
       if (callback.is_defined () && ! callback.isempty ())
         gh_manager::execute_callback (get_parent (), callback, data);
     }
 }
 
 // Used to cache dummy graphics objects from which dynamic properties can be
 // cloned.
@@ -3212,17 +3243,17 @@ base_properties::update_uicontextmenu (v
       props.add_dependent_obj (__myhandle__);
     }
 }
 
 bool
 base_properties::is_handle_visible (void) const
 {
   return (handlevisibility.is ("on")
-          || (executing_callback && ! handlevisibility.is ("off")));
+          || (! executing_callbacks.empty () && ! handlevisibility.is ("off")));
 }
 
 graphics_toolkit
 base_properties::get_toolkit (void) const
 {
   graphics_object go = gh_manager::get_object (get_parent ());
 
   if (go)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1886,20 +1886,20 @@ private:
 
 // ---------------------------------------------------------------------
 
 class callback_property : public base_property
 {
 public:
   callback_property (const std::string& nm, const graphics_handle& h,
                      const octave_value& m)
-    : base_property (nm, h), callback (m), executing (false) { }
+    : base_property (nm, h), callback (m) { }
 
   callback_property (const callback_property& p)
-    : base_property (p), callback (p.callback), executing (false) { }
+    : base_property (p), callback (p.callback) { }
 
   octave_value get (void) const { return callback; }
 
   OCTINTERP_API void execute (const octave_value& data = octave_value ()) const;
 
   bool is_defined (void) const
   {
     return (callback.is_defined () && ! callback.isempty ());
@@ -1925,19 +1925,16 @@ protected:
     return false;
   }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v) const;
 
 private:
   octave_value callback;
-
-  // If TRUE, we are executing this callback.
-  mutable bool executing;
 };
 
 // ---------------------------------------------------------------------
 
 class property
 {
 public:
   property (void) : rep (new base_property ("", graphics_handle ()))
