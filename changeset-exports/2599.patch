# HG changeset patch
# User jwe
# Date 850970968 0
#      Thu Dec 19 04:49:28 1996 +0000
# Node ID 9705ea40f0a27afdaa5e6948008aeb0cd3a9bc47
# Parent  36a4daa9e3c7335abf5364777f14be4428533777
[project @ 1996-12-19 04:49:09 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 Wed Dec 18 16:18:58 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Range.cc (operator -): New function.
+
 	* lo-ieee.cc: Include <nan.h> on all systems that have it.
 
 Fri Dec 13 02:01:32 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (assign): Delay resizing left hand side until we
 	know if the assignment conforms.
 
 Tue Dec 10 01:43:09 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -145,16 +145,22 @@ operator >> (istream& is, Range& a)
 	  is >> a.rng_inc;
 	  a.rng_nelem = a.nelem_internal ();
 	}
     }
 
   return is;
 }
 
+Range
+operator - (const Range& r)
+{
+  return Range (-r.base (), -r.limit (), -r.inc ());
+}
+
 // C  See Knuth, Art Of Computer Programming, Vol. 1, Problem 1.2.4-5.
 // C
 // C===Tolerant FLOOR function.
 // C
 // C    X  -  is given as a Double Precision argument to be operated on.
 // C          It is assumed that X is represented with M mantissa bits.
 // C    CT -  is   given   as   a   Comparison   Tolerance   such   that
 // C          0.LT.CT.LE.3-SQRT(5)/2. If the relative difference between
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -80,15 +80,17 @@ Range
   double rng_limit;
   double rng_inc;
 
   int rng_nelem;
 
   int nelem_internal (void) const;
 };
 
+extern Range operator - (const Range& r);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 Wed Dec 18 20:17:23 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* file-io.cc (Ffgetl, Ffgets): Also return number of characters	read.
+
+	* ov-range.cc (octave_range::not): New function.
+	* ov-range.h (octave_range::uminus): New function.
+
 	* BaseSLList.cc: Include error.h.
 	(BaseSLList::error): Call ::error() to process error message.
 
 Fri Dec 13 02:38:19 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.cc (octave_value::convert_and_assign): Preserve lhs value if
 	assignment fails.
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -177,21 +177,24 @@ DEFUN (fflush, args, ,
     }
   else
     print_usage ("fflush");
 
   return retval;
 }
 
 DEFUN (fgetl, args, ,
-  "STRING = fgetl (FILENUM [, LENGTH])\n\
+  "[STRING, LENGTH] = fgetl (FILENUM [, LENGTH])\n\
 \n\
 read a string from a file")
 {
-  octave_value retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = 0.0;
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
@@ -199,33 +202,39 @@ read a string from a file")
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value ((double) INT_MAX);
 
 	  bool err = false;
 
 	  string tmp = os->getl (len_arg, err);
 
 	  if (! err)
-	    retval = tmp;
+	    {
+	      retval(1) = (double) tmp.length ();
+	      retval(0) = tmp;
+	    }
 	}
       else
 	gripe_invalid_file_id ("fgetl");
     }
   else
     print_usage ("fgetl");
 
   return retval;
 }
 
 DEFUN (fgets, args, ,
-  "STRING = fgets (FILENUM [, LENGTH])\n\
+  "[STRING, LENGTH] = fgets (FILENUM [, LENGTH])\n\
 \n\
 read a string from a file")
 {
-  octave_value retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = 0.0;
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
@@ -233,17 +242,20 @@ read a string from a file")
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value ((double) INT_MAX);
 
 	  bool err = false;
 
 	  string tmp = os->gets (len_arg, err);
 
 	  if (! err)
-	    retval = tmp;
+	    {
+	      retval(1) = (double) tmp.length ();
+	      retval(0) = tmp;
+	    }
 	}
       else
 	gripe_invalid_file_id ("fgets");
     }
   else
     print_usage ("fgets");
 
   return retval;
@@ -333,17 +345,19 @@ DEFUN (fopen, args, ,
   however, conversions are currently only supported for ieee-be, and\n\
   ieee-le formats.\n\
 \n\
 \n\
   FILENUM is a number that can be used to refer to the open file.\n\
   If fopen fails, FILENUM is set to -1 and ERRMSG contains a\n\
   system-dependent error message")
 {
-  octave_value_list retval = -1.0;
+  octave_value_list retval;
+
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (args(0).is_string () && args(0).string_value () == "all")
 	retval(0) = octave_stream_list::open_file_numbers ();
       else
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -169,16 +169,23 @@ octave_range::complex_value (bool) const
     retval = range.base ();
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
 }
 
 octave_value
+octave_range::not (void) const
+{
+  Matrix tmp (range.matrix_value ());
+  return (! tmp);
+}
+
+octave_value
 octave_range::transpose (void) const
 {
   Matrix tmp (range.matrix_value ());
   return tmp.transpose ();
 }
 
 octave_value
 octave_range::hermitian (void) const
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -132,16 +132,20 @@ public:
 
   Complex complex_value (bool) const;
 
   ComplexMatrix complex_matrix_value (bool) const
     { return range.matrix_value (); }
 
   Range range_value (void) const { return range; }
 
+  octave_value not (void) const;
+
+  octave_value uminus (void) const { return octave_value (- range); }
+
   octave_value transpose (void) const;
 
   octave_value hermitian (void) const;
 
   octave_value convert_to_str (void) const;
 
   void print (ostream& os, bool pr_as_read_syntax = false);
 
