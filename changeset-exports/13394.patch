# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302523906 -7200
#      Mon Apr 11 14:11:46 2011 +0200
# Node ID 7a5998cebef3bd3a8b076080bbee9bed05f5873b
# Parent  98ff5fbd93128fd60d950741f1bab94a05621677
Replaced pthread mutexes with QMutex.

diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -48,17 +48,17 @@ void MainWindow::constructWindow() {
 void MainWindow::establishOctaveLink() {
     //QMetaObject::invokeMethod(this, "setStatus", Q_ARG(QString, QString("Establishing Octave link..")));
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
 
     m_octaveCallbackThread = new OctaveCallbackThread(this, this);
     m_octaveCallbackThread->start();
 
-    command_editor::add_event_hook(server_rl_event_hook_function);
+    command_editor::add_event_hook(OctaveLink::readlineEventHook);
 
     int fdm, fds;
     if(openpty(&fdm, &fds, 0, 0, 0) < 0) {
         assert(0);
     }
     dup2 (fds, 0);
     dup2 (fds, 1);
     dup2 (fds, 2);
diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -77,16 +77,17 @@ 02110-1301, USA.
 #include "octave/utils.h"
 #include "octave/variables.h"
 
 #include <readline/readline.h>
 
 #include "OctaveLink.h"
 
 #include <QFileInfo>
+#include <QMutexLocker>
 
 OctaveLink OctaveLink::m_singleton;
 
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
 
@@ -99,286 +100,187 @@ get_user_code (const std::string& fname 
       if (fcn.is_defined () && fcn.is_user_code ())
 	dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
 }
 
 //*************************************************************************
-int server_rl_event_hook_function(void)
-{
-  static int rl_event_count = 0;
-  rl_event_count++;
-
-  //if (rl_event_count%10 == 0)
-  //  octave_stdout << "rl_event_count:" << rl_event_count << std::endl;
-
-
+int OctaveLink::readlineEventHook() {
   // TODO: No need to run too quickly.  The documentation says it will run
   // at most 10 times per second.  This may be too fast and we will need to
   // artificially slow it down somehow.  Not sure at this time how.
   OctaveLink::instance()->processOctaveServerData();
-
   return 0;
 }
 
-bool server_rl_is_processing(void)
-{
-  return OctaveLink::instance()->isProcessing();
-}
-
 //*************************************************************************
-OctaveLink::OctaveLink() {
-  pthread_mutex_init(&m_serverMutex,NULL);
-  pthread_mutex_init(&m_octaveLockMutex,NULL);
-  m_previousHistoryLength = 0;
-  m_isProcessingServerData = false;
+OctaveLink::OctaveLink()
+    : m_previousHistoryLength(0),
+      m_isProcessingServerData(false) {
 }
 
 OctaveLink::~OctaveLink() {
 }
 
 /*******************************************************************************
  *******************************************************************************
  * CLIENT SIDE FUNCTIONS
  *******************************************************************************
  *******************************************************************************/
 
 //*************************************************************************
 std::vector<OctaveLink::VariableMetaData> OctaveLink::variableInfoList(void) {
-    // Acquire the mutex
-    if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-        return std::vector<VariableMetaData>();
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
     // Copy the list of variable information
     std::vector<VariableMetaData> retval( m_variableSymbolTableList.size() );
     std::copy( m_variableSymbolTableList.begin(), m_variableSymbolTableList.end(), retval.begin() );
     m_variableSymbolTableList = std::vector<VariableMetaData>();
 
-    // Release the mutex
-    pthread_mutex_unlock( &m_serverMutex );
     return retval;
 }
 
 
 //*************************************************************************
 std::vector<OctaveLink::RequestedVariable> OctaveLink::requestedVariables(void)
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return std::vector<RequestedVariable>();
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  // Copy the list of requested variables
-  std::vector<RequestedVariable> retval( m_requestedVariables.size() );
-  std::copy( m_requestedVariables.begin(), m_requestedVariables.end(), retval.begin() );
-  m_requestedVariables = std::vector<RequestedVariable>();
-  
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
+    // Copy the list of requested variables
+    std::vector<RequestedVariable> retval( m_requestedVariables.size() );
+    std::copy( m_requestedVariables.begin(), m_requestedVariables.end(), retval.begin() );
+    m_requestedVariables = std::vector<RequestedVariable>();
 
-  return retval;
+    return retval;
 }
 
-
 //*************************************************************************
 int OctaveLink::setRequestedVariableNames( std::vector<std::string> variables_names )
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return -1;
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  // Set the list of requested variables
-  m_variablesRequestList = std::vector<std::string>( variables_names.size() );
-  std::copy( variables_names.begin(), variables_names.end(), m_variablesRequestList.begin() );
+    // Set the list of requested variables
+    m_variablesRequestList = std::vector<std::string>( variables_names.size() );
+    std::copy( variables_names.begin(), variables_names.end(), m_variablesRequestList.begin() );
 
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return 0;
+    return 0;
 }
 
-
 //*************************************************************************
 string_vector OctaveLink::getHistoryList(void)
 {
-  // Acquire mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return string_vector();
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  // Copy the list of command history items
-  string_vector retval( m_historyList );
-  m_historyList = string_vector();
+    // Copy the list of command history items
+    string_vector retval( m_historyList );
+    m_historyList = string_vector();
 
-  // Release mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return retval;
+    return retval;
 }
 
 std::vector<OctaveLink::BreakPoint> OctaveLink::breakPointList(int& status)
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-  {
-    status = -1;
-    return std::vector<BreakPoint>();
-  }
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  // Copy the list of variable information
-  std::vector<BreakPoint> retval (m_currentBreakpoints.size());
-  std::copy( m_currentBreakpoints.begin(), m_currentBreakpoints.end(), retval.begin() );
+    // Copy the list of variable information
+    std::vector<BreakPoint> retval (m_currentBreakpoints.size());
+    std::copy( m_currentBreakpoints.begin(), m_currentBreakpoints.end(), retval.begin() );
 
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  status = 0;
-  return retval;
+    status = 0;
+    return retval;
 }
 
 bool OctaveLink::isBreakpointReached (int& status)
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-  {
-    status = -1;
-    return false;
-  }
-
-  // Copy the list of variable information
-  bool retval = (m_reachedBreakpoints.size()>0);
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  //if (retval)
-  //  octave_stdout << "Breakpoint reached" << std::endl;
-
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  status = 0;
-  return retval;
+    // Copy the list of variable information
+    bool retval = (m_reachedBreakpoints.size()>0);
+    return retval;
 }
 
-
 std::vector<OctaveLink::BreakPoint> OctaveLink::reachedBreakpoint()
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return std::vector<BreakPoint>();
-
-  // Copy the list of variable information
-  std::vector<BreakPoint> retval (m_reachedBreakpoints.size());
-  std::copy (m_reachedBreakpoints.begin(), m_reachedBreakpoints.end(), retval.begin() );
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  //if (breakpoint_reached.size()>0)
-  //  octave_stdout << "Breakpoint reached" << std::endl;
+    // Copy the list of variable information
+    std::vector<BreakPoint> retval (m_reachedBreakpoints.size());
+    std::copy (m_reachedBreakpoints.begin(), m_reachedBreakpoints.end(), retval.begin() );
 
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return retval;
+    return retval;
 }
 
 int OctaveLink::addBreakpoint( BreakPoint bp_info )
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return -1;
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
 
-  // Copy the list of variable information
-  m_addedBreakpoints.push_back (bp_info);
+    // Copy the list of variable information
+    m_addedBreakpoints.push_back (bp_info);
 
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return 0;
+    return 0;
 }
 
 int OctaveLink::removeBreakpoint( BreakPoint bp_info )
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return -1;
-
-  // Copy the list of variable information
-  m_removedBreakpoints.push_back (bp_info);
-
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return 0;
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
+    // Copy the list of variable information
+    m_removedBreakpoints.push_back (bp_info);
+    return 0;
 }
 
-/*
-    status_t		   modify_breakpoint( bp_info_t old_bp_info, bp_info_t new_bp_info );
-*/
-
 int OctaveLink::setBreakpointAction (BreakPointAction action)
 {
-  // Acquire the mutex
-  if( pthread_mutex_trylock( &m_serverMutex ) != 0 )
-    return -1;
-
-  m_breakPointAction = action;
-  
-  // Release the mutex
-  pthread_mutex_unlock( &m_serverMutex );
-
-  return 0;
+    QMutexLocker mutexLocker(&m_internalAccessMutex);
+    m_breakPointAction = action;
+    return 0;
 }
 
-
 /*******************************************************************************
  *******************************************************************************
  * SERVER SIDE FUNCTIONS
  *******************************************************************************
  *******************************************************************************/
 
 //*************************************************************************
 int OctaveLink::processOctaveServerData(void)
 {
   struct timeval start, stop;
 #ifndef __WIN32__
   gettimeofday(&start, NULL);
 #endif
 
-  // Acquire mutex
-  if( pthread_mutex_lock( &m_serverMutex ) != 0 )
-  {
-    octave_stdout << "Error acquiring the octave_server data lock mutex" << std::endl;
-    return -1;
-  }
+  QMutexLocker mutexLocker(&m_internalAccessMutex);
+
   m_isProcessingServerData = true;
   
   process_breakpoint_action();
   processBreakpointAndRemoveModify();
   processRequestedVariables();
   setVariableInfoList();
   setHistoryList();
   setBreakPointList();
 
-  // Release mutex
-  pthread_mutex_unlock( &m_serverMutex );
   m_isProcessingServerData = false;
 
 #ifndef __WIN32__
   gettimeofday(&stop, NULL);
   double elapsed = stop.tv_sec - start.tv_sec + 1E-6 * (stop.tv_usec - start.tv_usec);
   //octave_stdout << "SERVER ELAPSED: " << elapsed << std::endl;
 #endif
   return 0;
 }
 
 
 //*************************************************************************
 int OctaveLink::setVariableInfoList( void )
 {
   static std::vector<VariableMetaData> lastVars;
   std::vector<VariableMetaData> currVars;
-
-
   std::list<symbol_table::symbol_record> lvars = symbol_table::all_variables();
   std::list<symbol_table::symbol_record>::iterator it;
 
   for ( it = lvars.begin() ; it != lvars.end() ; it++ )
   {
     octave_value varval( it->varval() );
     std::string nm = (*it).name();
 
@@ -398,18 +300,16 @@ int OctaveLink::setVariableInfoList( voi
   {
     lastVars = currVars;
     
     // Copy currVars into octave_server::variable_symtab_list
     m_variableSymbolTableList = std::vector<VariableMetaData>( currVars.size() );
 
     std::copy( currVars.begin(), currVars.end(), m_variableSymbolTableList.begin() );
   }
-
-  
   return 0;
 }
 
 
 //*************************************************************************
 int OctaveLink::processRequestedVariables( void )
 {
   /*
@@ -466,17 +366,16 @@ int OctaveLink::processRequestedVariable
   */
   return 0;
 }
 
 
 //*************************************************************************
 int OctaveLink::setHistoryList( void )
 {
-  
   // Build up the current list
   int currentLen = command_history::length();
   if ( currentLen != m_previousHistoryLength )
   {
     for( int i = m_previousHistoryLength ; i < currentLen ; i++ )
       m_historyList.append( command_history::get_entry(i) );
     m_previousHistoryLength = currentLen;
   }
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -33,25 +33,28 @@
 #include "octave/Range.h"
 #include "octave/ov.h"
 class octave_value;
 class octave_value_list;
 
 #include <cstdio>
 #include <string>
 #include <vector>
+#include <QMutex>
 
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
 class OctaveLink
 {
 public:
     static OctaveLink *instance() { return &m_singleton; }
+    static int readlineEventHook(void);
+
     /**
      * Enumeration used to identify breakpoint actions
      */
     enum BreakPointAction
     {
         None,
         StepInto,
         StepOver,
@@ -198,26 +201,17 @@ public:
     /** TODO: Describe. */
     int setHistoryList(void);
 
 private:
     OctaveLink();
     ~OctaveLink();
 
     /** Mutex variable used to protect access to internal class data. */
-    pthread_mutex_t m_serverMutex;
-
-    /**
-     * Mutex variable used to protect access to octave internals on asynchronous requests.
-     *
-     * Notes: This is necessary for asynchronous requests like detailed variable information
-     * in a debugger mouse-over, inspection of matrix variables by double-clicking in the
-     * main window, etc.
-     */
-    pthread_mutex_t m_octaveLockMutex;
+    QMutex m_internalAccessMutex;
 
     std::vector<BreakPoint> m_currentBreakpoints;
     std::vector<BreakPoint> m_reachedBreakpoints;
     std::vector<BreakPoint> m_addedBreakpoints;
     std::vector<BreakPoint> m_removedBreakpoints;
     std::vector<BreakPoint> m_modifiedBreakpointsOld;
     std::vector<BreakPoint> m_modifiedBreakpointsNew;
     BreakPointAction m_breakPointAction;
@@ -233,14 +227,10 @@ private:
 
     /** History related member variables. */
     string_vector m_historyList;
     int m_previousHistoryLength;
 
     bool m_isProcessingServerData;
     static OctaveLink m_singleton;
 };
-
-int server_rl_event_hook_function(void);
-bool server_rl_is_processing(void);
-
 #endif // OCTAVELINK_H
 
