# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1494539449 14400
#      Thu May 11 17:50:49 2017 -0400
# Node ID af2f1f3dbe06e67c7b04867483503965b49a94e7
# Parent  fec7e5b14fb240d0dfc203208c438b58dba83c9c
eliminate --enable-bounds-check configure option

* configure.ac (--enable-bounds-check): Warn that the option is
obsolete.  Don't define ENABLE_BOUNDS_CHECK.
* install.txi: Document --enable-address-sanitizer-flags.  Delete
documentation for --enable-bounds-check.
* toplev.cc (conf_info_struct): Don't include ENABLE_BOUNDS_CHECK in
the struct.

* oct-map.cc, oct-map.h, Array.cc, Array.h, DiagArray2.h,
PermMatrix.h, Range.cc, Range.h, Sparse.h, dim-vector.h, idx-vector.h:
Eliminate conditional code for bounds checking in operator ().

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -294,20 +294,21 @@ AM_CONDITIONAL([AMCOND_ENABLE_HG_ID], [t
 
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
 ENABLE_BOUNDS_CHECK=no
 AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
-    [enable bounds checking for indexing in internal array classes])],
+    [OBSOLETE: use --enable-address-sanitizer-flags instead])],
   [if test "$enableval" = yes; then ENABLE_BOUNDS_CHECK=yes; fi], [])
 if test $ENABLE_BOUNDS_CHECK = yes; then
-  AC_DEFINE(OCTAVE_ENABLE_BOUNDS_CHECK, 1, [Define to 1 to use internal bounds checking.])
+  warn_bounds_check="--enable-bounds-check is obsolete; use --enable-address-sanitizer-flags instead"
+  OCTAVE_CONFIGURE_WARNING([warn_bounds_check])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior (Qt Handles) but incurs a significant slowdown.
 ### Enabled by default until a higher performing solution can be found.
 
 ENABLE_ATOMIC_REFCOUNT=yes
 AC_ARG_ENABLE([atomic-refcount],
@@ -3355,17 +3356,16 @@ Octave is now configured for $canonical_
   Z libraries:                   $Z_LIBS
 
   Default pager:                 $DEFAULT_PAGER
   gnuplot:                       $GNUPLOT
 
   Build Octave Qt GUI:                  $build_qt_gui
   JIT compiler for loops:               $ENABLE_JIT
   Build Java interface:                 $build_java
-  Do internal array bounds checking:    $ENABLE_BOUNDS_CHECK
   Build static libraries:               $STATIC_LIBS
   Build shared libraries:               $SHARED_LIBS
   Dynamic Linking:                      $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:     $USE_READLINE
   64-bit array dims and indexing:       $ENABLE_64
   64-bit BLAS array dims and indexing:  $HAVE_64_BIT_BLAS
   OpenMP SMP multithreading:            $ENABLE_OPENMP
   Build cross tools:                    $cross_tools
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -379,21 +379,22 @@ maximum problem sizes are always limited
 @itemize @bullet
 @item @sc{glpk}
 @item Qhull
 @end itemize
 
 @xref{Compiling Octave with 64-bit Indexing}, for more details
 about building Octave with more complete support for large arrays.
 
-@item --enable-bounds-check
-Enable bounds checking for indexing operators in the internal array
-classes.  This option is primarily used for debugging Octave.  Building
-Octave with this option has a negative impact on performance and is not
-recommended for general use.
+@item --enable-address-sanitizer-flags
+Enable compiler options @code{-fsanitize=address} and
+@code{-fomit-frame-pointer} for memory access checking.  This option is
+primarily used for debugging Octave.  Building Octave with this option
+has a negative impact on performance and is not recommended for general
+use.  It may also interfere with proper functioning of the GUI.
 
 @item --disable-docs
 Disable building all forms of the documentation (Info, PDF, HTML).  The
 default is to build documentation, but your system will need functioning
 Texinfo and @TeX{} installs for this to succeed.
 
 @item --enable-float-truncate
 This option allows for truncation of intermediate floating point results
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -350,39 +350,39 @@ octave_map::extract_scalar (octave_scala
                             octave_idx_type idx) const
 {
   octave_idx_type nf = nfields ();
   for (octave_idx_type i = 0; i < nf; i++)
     dest.xvals[i] = xvals[i](idx);
 }
 
 octave_scalar_map
-octave_map::checkelem (octave_idx_type n) const
+octave_map::elem (octave_idx_type n) const
 {
   octave_scalar_map retval (xkeys);
 
   // Optimize this so that there is just one check.
   extract_scalar (retval, compute_index (n, dimensions));
 
   return retval;
 }
 
 octave_scalar_map
-octave_map::checkelem (octave_idx_type i, octave_idx_type j) const
+octave_map::elem (octave_idx_type i, octave_idx_type j) const
 {
   octave_scalar_map retval (xkeys);
 
   // Optimize this so that there is just one check.
   extract_scalar (retval, compute_index (i, j, dimensions));
 
   return retval;
 }
 
 octave_scalar_map
-octave_map::checkelem (const Array<octave_idx_type>& ra_idx) const
+octave_map::elem (const Array<octave_idx_type>& ra_idx) const
 {
   octave_scalar_map retval (xkeys);
 
   // Optimize this so that there is just one check.
   extract_scalar (retval, compute_index (ra_idx, dimensions));
 
   return retval;
 }
diff --git a/libinterp/corefcn/oct-map.h b/libinterp/corefcn/oct-map.h
--- a/libinterp/corefcn/oct-map.h
+++ b/libinterp/corefcn/oct-map.h
@@ -372,30 +372,43 @@ public:
   octave_idx_type length (void) const { return numel (); }
   bool is_empty (void) const { return dimensions.any_zero (); }
 
   octave_idx_type rows (void) const { return dimensions(0); }
   octave_idx_type cols (void) const { return dimensions(1); }
   octave_idx_type columns (void) const { return dimensions(1); }
 
   // Extract a scalar substructure.
-  octave_scalar_map checkelem (octave_idx_type n) const;
-  octave_scalar_map checkelem (octave_idx_type i, octave_idx_type j) const;
+  // FIXME: actually check something.
+  octave_scalar_map checkelem (octave_idx_type n) const
+  { return elem (n); }
+
+  // FIXME: actually check something.
+  octave_scalar_map checkelem (octave_idx_type i, octave_idx_type j) const
+  { return elem (i, j); }
 
-  octave_scalar_map
-  checkelem (const Array<octave_idx_type>& ra_idx) const;
+  // FIXME: actually check something.
+  octave_scalar_map checkelem (const Array<octave_idx_type>& ra_idx) const
+  { return elem (ra_idx); }
+
+  octave_scalar_map elem (octave_idx_type n) const;
+
+  octave_scalar_map elem (octave_idx_type i, octave_idx_type j) const;
+
+  octave_scalar_map elem (const Array<octave_idx_type>& ra_idx) const;
 
   octave_scalar_map operator () (octave_idx_type n) const
-  { return checkelem (n); }
+  { return elem (n); }
+
   octave_scalar_map operator () (octave_idx_type i, octave_idx_type j) const
-  { return checkelem (i, j); }
+  { return elem (i, j); }
 
   octave_scalar_map
   operator () (const Array<octave_idx_type>& ra_idx) const
-  { return checkelem (ra_idx); }
+  { return elem (ra_idx); }
 
   octave_map squeeze (void) const;
 
   octave_map permute (const Array<int>& vec, bool inv = false) const;
 
   dim_vector dims (void) const { return dimensions; }
 
   int ndims (void) const { return dimensions.ndims (); }
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -332,22 +332,16 @@ specified option.
 #endif
 
 #if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT)
     { "ENABLE_ATOMIC_REFCOUNT", true },
 #else
     { "ENABLE_ATOMIC_REFCOUNT", false },
 #endif
 
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    { "ENABLE_BOUNDS_CHECK", true },
-#else
-    { "ENABLE_BOUNDS_CHECK", false },
-#endif
-
 #if defined (ENABLE_DOCS)
     { "ENABLE_DOCS", true },
 #else
     { "ENABLE_DOCS", false },
 #endif
 
 #if defined (ENABLE_DYNAMIC_LINKING)
     { "ENABLE_DYNAMIC_LINKING", true },
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -255,50 +255,38 @@ Array<T>::checkelem (const Array<octave_
   return elem (compute_index (ra_idx));
 }
 
 template <typename T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  if (k < 0 || k > dimensions.numel (1))
-    octave::err_index_out_of_range (2, 2, k+1, dimensions.numel (1), dimensions);
-#endif
 
   return Array<T> (*this, dim_vector (r, 1), k*r, k*r + r);
 }
 
 template <typename T>
 Array<T>
 Array<T>::page (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
   octave_idx_type c = dimensions(1);
   octave_idx_type p = r*c;
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  if (k < 0 || k > dimensions.numel (2))
-    octave::err_index_out_of_range (3, 3, k+1, dimensions.numel (2), dimensions);
-#endif
 
   return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
 }
 
 template <typename T>
 Array<T>
 Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
 {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  if (lo < 0)
-    octave::err_index_out_of_range (1, 1, lo+1, numel (), dimensions);
-  if (up > numel ())
-    octave::err_index_out_of_range (1, 1, up, numel (), dimensions);
-#endif
-  if (up < lo) up = lo;
+  if (up < lo)
+    up = lo;
+
   return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
 class rec_permute_helper
 {
   // STRIDE occupies the last half of the space allocated for dim to
   // avoid a double allocation.
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -473,91 +473,74 @@ public:
 
   crefT xelem (const Array<octave_idx_type>& ra_idx) const
   { return xelem (compute_index_unchecked (ra_idx)); }
 
   // FIXME: would be nice to fix this so that we don't unnecessarily force
   //        a copy, but that is not so easy, and I see no clean way to do it.
 
   T& checkelem (octave_idx_type n);
+
   T& checkelem (octave_idx_type i, octave_idx_type j);
+
   T& checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k);
+
   T& checkelem (const Array<octave_idx_type>& ra_idx);
 
   T& elem (octave_idx_type n)
   {
     make_unique ();
     return xelem (n);
   }
 
   T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1 ()*j+i); }
 
   T& elem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return elem (i, dim2 ()*k+j); }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Array<T>::elem (compute_index_unchecked (ra_idx)); }
 
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  T& operator () (octave_idx_type n) { return checkelem (n); }
-  T& operator () (octave_idx_type i, octave_idx_type j)
-  { return checkelem (i, j); }
-  T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
-  { return checkelem (i, j, k); }
-  T& operator () (const Array<octave_idx_type>& ra_idx)
-  { return checkelem (ra_idx); }
-#else
   T& operator () (octave_idx_type n) { return elem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j) { return elem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return elem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx)
   { return elem (ra_idx); }
-#endif
 
   crefT checkelem (octave_idx_type n) const;
+
   crefT checkelem (octave_idx_type i, octave_idx_type j) const;
+
   crefT checkelem (octave_idx_type i, octave_idx_type j,
                    octave_idx_type k) const;
+
   crefT checkelem (const Array<octave_idx_type>& ra_idx) const;
 
   crefT elem (octave_idx_type n) const { return xelem (n); }
 
   crefT elem (octave_idx_type i, octave_idx_type j) const
   { return xelem (i, j); }
 
   crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
   { return xelem (i, j, k); }
 
   crefT elem (const Array<octave_idx_type>& ra_idx) const
   { return Array<T>::xelem (compute_index_unchecked (ra_idx)); }
 
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  crefT operator () (octave_idx_type n) const { return checkelem (n); }
-  crefT operator () (octave_idx_type i, octave_idx_type j) const
-  { return checkelem (i, j); }
-  crefT operator () (octave_idx_type i, octave_idx_type j,
-                     octave_idx_type k) const
-  { return checkelem (i, j, k); }
-  crefT operator () (const Array<octave_idx_type>& ra_idx) const
-  { return checkelem (ra_idx); }
-#else
   crefT operator () (octave_idx_type n) const { return elem (n); }
   crefT operator () (octave_idx_type i, octave_idx_type j) const
   { return elem (i, j); }
   crefT operator () (octave_idx_type i, octave_idx_type j,
                      octave_idx_type k) const
   { return elem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const
   { return elem (ra_idx); }
-#endif
 
   // Fast extractors.  All of these produce shallow copies.
-  // Warning: none of these do check bounds, unless
-  // OCTAVE_ENABLE_BOUNDS_CHECK is defined!
 
   //! Extract column: A(:,k+1).
   Array<T> column (octave_idx_type k) const;
   //! Extract page: A(:,:,k+1).
   Array<T> page (octave_idx_type k) const;
 
   //! Extract a slice from this array as a column vector: A(:)(lo+1:up).
   //! Must be 0 <= lo && up <= numel.  May be up < lo.
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -119,38 +119,28 @@ public:
 
   T dgelem (octave_idx_type i) const
   { return Array<T>::elem (i); }
 
   T& dgelem (octave_idx_type i)
   { return Array<T>::elem (i); }
 
   T checkelem (octave_idx_type r, octave_idx_type c) const
-  {
-    return check_idx (r, c) ? elem (r, c) : T (0);
-  }
+  { return check_idx (r, c) ? elem (r, c) : T (0); }
 
   T operator () (octave_idx_type r, octave_idx_type c) const
   {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    return checkelem (r, c);
-#else
     return elem (r, c);
-#endif
   }
 
   T& checkelem (octave_idx_type r, octave_idx_type c);
 
   T& operator () (octave_idx_type r, octave_idx_type c)
   {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    return checkelem (r, c);
-#else
     return elem (r, c);
-#endif
   }
 
   // No checking.
 
   T xelem (octave_idx_type r, octave_idx_type c) const
   {
     return (r == c) ? Array<T>::xelem (r) : T (0);
   }
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -86,21 +86,17 @@ public:
   }
 
   octave_idx_type
   checkelem (octave_idx_type i, octave_idx_type j) const;
 
   octave_idx_type
   operator () (octave_idx_type i, octave_idx_type j) const
   {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    return checkelem (i, j);
-#else
     return elem (i, j);
-#endif
   }
 
   // These are, in fact, super-fast.
   PermMatrix transpose (void) const;
   PermMatrix inverse (void) const;
 
   // Determinant, i.e., the sign of permutation.
   octave_idx_type determinant (void) const;
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -82,26 +82,22 @@ Range::checkelem (octave_idx_type i) con
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
 double
 Range::elem (octave_idx_type i) const
 {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  return checkelem (i);
-#else
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
-#endif
 }
 
 // Helper class used solely for idx_vector.loop () function call
 class __rangeidx_helper
 {
 public:
   __rangeidx_helper (double *a, double b, double i, double l, octave_idx_type n)
     : array (a), base (b), inc (i), limit (l), nmax (n-1) { }
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -106,16 +106,18 @@ public:
   sortmode is_sorted (sortmode mode = ASCENDING) const;
 
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
 
   double elem (octave_idx_type i) const;
 
+  double operator () (octave_idx_type i) const { return elem (i); }
+
   Array<double> index (const idx_vector& i) const;
 
   void set_base (double b);
 
   void set_limit (double l);
 
   void set_inc (double i);
 
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -368,50 +368,31 @@ public:
   {
     make_unique ();
     return xelem (i, j);
   }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  T& operator () (octave_idx_type n)
-  {
-    return checkelem (n);
-  }
-
-  T& operator () (octave_idx_type i, octave_idx_type j)
-  {
-    return checkelem (i, j);
-  }
-
-  T& operator () (const Array<octave_idx_type>& ra_idx)
-  {
-    return checkelem (ra_idx);
-  }
-
-#else
   T& operator () (octave_idx_type n)
   {
     return elem (n);
   }
 
   T& operator () (octave_idx_type i, octave_idx_type j)
   {
     return elem (i, j);
   }
 
   T& operator () (const Array<octave_idx_type>& ra_idx)
   {
     return elem (ra_idx);
   }
 
-#endif
-
   T checkelem (octave_idx_type n) const
   {
     if (n < 0 || n >= numel ())
       return range_error ("T Sparse<T>::checkelem", n);
     else
       return xelem (n);
   }
 
@@ -435,40 +416,27 @@ public:
 
   T elem (octave_idx_type n) const { return xelem (n); }
 
   T elem (octave_idx_type i, octave_idx_type j) const { return xelem (i, j); }
 
   T elem (const Array<octave_idx_type>& ra_idx) const
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-  T operator () (octave_idx_type n) const { return checkelem (n); }
-  T operator () (octave_idx_type i, octave_idx_type j) const
-  {
-    return checkelem (i, j);
-  }
+  T operator () (octave_idx_type n) const { return elem (n); }
 
-  T operator () (const Array<octave_idx_type>& ra_idx) const
-  {
-    return checkelem (ra_idx);
-  }
-
-#else
-  T operator () (octave_idx_type n) const { return elem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const
   {
     return elem (i, j);
   }
 
   T operator () (const Array<octave_idx_type>& ra_idx) const
   {
     return elem (ra_idx);
   }
-#endif
 
   Sparse<T> maybe_compress (bool remove_zeros = false)
   {
     if (remove_zeros)
       make_unique (); // Needs to unshare because elements are removed.
 
     rep->maybe_compress (remove_zeros);
     return (*this);
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -212,30 +212,21 @@ public:
   octave_idx_type& xelem (int i) { return rep[i]; }
 
   octave_idx_type xelem (int i) const { return rep[i]; }
 
   // Safe access to to elements
 
   octave_idx_type& elem (int i)
   {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    assert (i >= 0 && i < ndims ());
-#endif
     make_unique ();
     return xelem (i);
   }
 
-  octave_idx_type elem (int i) const
-  {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    assert (i >= 0 && i < ndims ());
-#endif
-    return xelem (i);
-  }
+  octave_idx_type elem (int i) const { return xelem (i); }
 
   void chop_trailing_singletons (void)
   {
     int nd = ndims ();
     if (nd > 2 && rep[nd-1] == 1)
       {
         make_unique ();
         do
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -82,16 +82,17 @@ private:
     idx_base_rep& operator = (const idx_base_rep&) = delete;
 
     virtual ~idx_base_rep (void) = default;
 
     // Non-range-checking element query.
     virtual octave_idx_type xelem (octave_idx_type i) const = 0;
 
     // Range-checking element query.
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     virtual octave_idx_type checkelem (octave_idx_type i) const = 0;
 
     // Length of the index vector.
     virtual octave_idx_type length (octave_idx_type n) const = 0;
 
     // The maximum index + 1.  The actual dimension is passed in.
     virtual octave_idx_type extent (octave_idx_type n) const = 0;
 
@@ -131,16 +132,17 @@ private:
     // No copying!
 
     idx_colon_rep (const idx_colon_rep& idx) = delete;
 
     idx_colon_rep& operator = (const idx_colon_rep& idx) = delete;
 
     octave_idx_type xelem (octave_idx_type i) const { return i; }
 
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type n) const { return n; }
 
     octave_idx_type extent (octave_idx_type n) const { return n; }
 
     idx_class_type idx_class (void) const { return class_colon; }
 
@@ -178,16 +180,17 @@ private:
 
     idx_range_rep (const idx_range_rep& idx) = delete;
 
     idx_range_rep& operator = (const idx_range_rep& idx) = delete;
 
     octave_idx_type xelem (octave_idx_type i) const
     { return start + i * step; }
 
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     {
       return len ? std::max (n, start + 1 + (step < 0 ? 0 : step * (len - 1)))
                  : n;
@@ -239,16 +242,17 @@ private:
     // Zero-based constructor.
     idx_scalar_rep (octave_idx_type i);
 
     template <typename T>
     idx_scalar_rep (T x);
 
     octave_idx_type xelem (octave_idx_type) const { return data; }
 
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return 1; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, data + 1); }
 
     idx_class_type idx_class (void) const { return class_scalar; }
@@ -312,16 +316,17 @@ private:
     idx_vector_rep (const idx_vector_rep& idx) = delete;
 
     idx_vector_rep& operator = (const idx_vector_rep& idx) = delete;
 
     ~idx_vector_rep (void);
 
     octave_idx_type xelem (octave_idx_type i) const { return data[i]; }
 
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, ext); }
 
     idx_class_type idx_class (void) const { return class_vector; }
@@ -381,16 +386,17 @@ private:
     idx_mask_rep (const idx_mask_rep& idx) = delete;
 
     idx_mask_rep& operator = (const idx_mask_rep& idx) = delete;
 
     ~idx_mask_rep (void);
 
     octave_idx_type xelem (octave_idx_type i) const;
 
+    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, ext); }
 
     idx_class_type idx_class (void) const { return class_mask; }
@@ -558,27 +564,22 @@ public:
   { return rep->length (n); }
 
   octave_idx_type extent (octave_idx_type n) const
   { return rep->extent (n); }
 
   octave_idx_type xelem (octave_idx_type n) const
   { return rep->xelem (n); }
 
+  OCTAVE_DEPRECATED ("use 'elem' instead")
   octave_idx_type checkelem (octave_idx_type n) const
-  { return rep->checkelem (n); }
+  { return rep->xelem (n); }
 
   octave_idx_type operator () (octave_idx_type n) const
-  {
-#if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
-    return rep->checkelem (n);
-#else
-    return rep->xelem (n);
-#endif
-  }
+  { return rep->xelem (n); }
 
   operator bool (void) const
   { return ! rep->err; }
 
   bool is_colon (void) const
   { return rep->idx_class () == class_colon; }
 
   bool is_scalar (void) const
