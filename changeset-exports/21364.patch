# HG changeset patch
# User Rik <rik@octave.org>
# Date 1456522804 28800
#      Fri Feb 26 13:40:04 2016 -0800
# Node ID 03ff9371596beb1f67e98d0ac617350201cb5b0b
# Parent  8cfd1b47d49fbf10a4056d3006dbb5c590c73471
mode.m: Allow operation over non-existent dimension (bug #33523).

* mode.m: Code special case to detect non-existent dimension and
return original matrix immediately.  Add input validation tests.

diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -47,22 +47,29 @@ function [m, f, c] = mode (x, dim)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 2)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("mode: DIM must be an integer and a valid dimension");
     endif
   endif
 
+  if (dim > nd)
+    ## Special case of mode over non-existent dimension 
+    m = x;
+    f = ones (size (x));
+    c = num2cell (x);    
+    return;
+  endif
+
   sz2 = sz;
   sz2(dim) = 1;
   sz3 = ones (1, nd);
   sz3(dim) = sz(dim);
 
   if (issparse (x))
     t2 = sparse (sz(1), sz(2));
   else
@@ -113,28 +120,35 @@ endfunction
 %! a = sprandn (32, 32, 0.05);
 %! sp0 = sparse (0);
 %! [m, f, c] = mode (a);
 %! [m2, f2, c2] = mode (full (a));
 %! assert (m, sparse (m2));
 %! assert (f, sparse (f2));
 %! c_exp(1:length (a)) = { sp0 };
 %! assert (c ,c_exp);
-%! assert (c2,c_exp );
+%! assert (c2,c_exp);
 
 %!assert (mode ([2,3,1,2,3,4],1),[2,3,1,2,3,4])
 %!assert (mode ([2,3,1,2,3,4],2),2)
 %!assert (mode ([2,3,1,2,3,4]),2)
 %!assert (mode (single ([2,3,1,2,3,4])), single (2))
 %!assert (mode (int8 ([2,3,1,2,3,4])), int8 (2))
 
 %!assert (mode ([2;3;1;2;3;4],1),2)
 %!assert (mode ([2;3;1;2;3;4],2),[2;3;1;2;3;4])
 %!assert (mode ([2;3;1;2;3;4]),2)
 
+%!test
+%! x = magic (3);
+%! [m, f, c] = mode (x, 3);
+%! assert (m, x);
+%! assert (f, ones (3,3));
+%! assert (c, num2cell (x));
+
 %!shared x
 %! x(:,:,1) = toeplitz (1:3);
 %! x(:,:,2) = circshift (toeplitz (1:3), 1);
 %! x(:,:,3) = circshift (toeplitz (1:3), 2);
 %!test
 %! [m, f, c] = mode (x, 1);
 %! assert (reshape (m, [3, 3]), [1 1 1; 2 2 2; 1 1 1]);
 %! assert (reshape (f, [3, 3]), [1 1 1; 2 2 2; 1 1 1]);
@@ -157,15 +171,13 @@ endfunction
 %! c = reshape (c, [3, 3]);
 %! assert (c{1}, [1; 2; 3]);
 %! assert (c{2}, [1; 2; 3]);
 %! assert (c{3}, [1; 2; 3]);
 
 ## Test input validation
 %!error mode ()
 %!error mode (1, 2, 3)
-%!error mode ({1 2 3})
-%!error mode (['A'; 'B'])
-%!error mode (1, ones (2,2))
-%!error mode (1, 1.5)
-%!error mode (1, 0)
-%!error mode (1, 3)
+%!error <X must be a numeric> mode ({1 2 3})
+%!error <DIM must be an integer> mode (1, ones (2,2))
+%!error <DIM must be an integer> mode (1, 1.5)
+%!error <DIM must be .* a valid dimension> mode (1, 0)
 
