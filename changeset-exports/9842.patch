# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258701582 -3600
#      Fri Nov 20 08:19:42 2009 +0100
# Node ID 10519b4d65073f6381b0b5e40298e33f4a2324d6
# Parent  6f1ea8241c9902039b29ab2d031e1164ea969213
fix indexed numel for non-numeric indices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* utils.cc (dims_to_numel): Fallback to index_vector query for
+	non-numeric types.
+
 2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-bool.h (octave_bool::is_numeric_type): New overload.
 	* ov-bool-mat.h (octave_bool-matrix::is_numeric_type): New overload.
 
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (unary_mapper_t): New member: umap_erfinv.
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1022,20 +1022,28 @@ dims_to_numel (const dim_vector& dims, c
   if (len == 0)
     retval = dims.numel ();
   else
     {
       const dim_vector dv = dims.redim (len);
       retval = 1;
       for (octave_idx_type i = 0; i < len; i++)
         {
-          if (idx(i).is_magic_colon ())
+          octave_value idxi = idx(i);
+          if (idxi.is_magic_colon ())
             retval *= dv(i);
+          else if (idxi.is_numeric_type ())
+            retval *= idxi.numel ();
           else
-            retval *= idx(i).numel ();
+            {
+              idx_vector jdx = idxi.index_vector ();
+              if (error_state)
+                break;
+              retval *= jdx.length (dv(i));
+            }
         }
     }
 
   return retval;
 }
 
 Matrix
 identity_matrix (octave_idx_type nr, octave_idx_type nc)
