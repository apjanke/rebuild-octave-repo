# HG changeset patch
# User jwe
# Date 1232089625 -3600
#      Fri Jan 16 08:07:05 2009 +0100
# Branch release-3-0-x
# Node ID 166a195399f7a9d51f33e390007ee502cabbe128
# Parent  7118a78a4378226e4564f2d2fa18d2123656db44
[project @ 2008-01-04 18:18:22 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-01-04  Soren Hauberg   <hauberg@gmail.com>
+
+	* set/create_set.m, set/union.m: Accept "rows" argument.
+
 2008-01-15  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/grid.m: Document handle argument.
 
 2008-12-24  Doug Stewart  <dastew@sympatico.ca>
 
 	* plot/grid.m: Handle "minor" option.
 
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1994, 1996, 1997, 1999, 2000, 2004, 2005, 2006, 2007
+## Copyright (C) 1994, 1996, 1997, 1999, 2000, 2004, 2005, 2006, 2007, 2008
 ##               John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
@@ -14,42 +14,49 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} create_set (@var{x})
+## @deftypefnx{Function File} {} create_set (@var{x}, "rows")
 ## Return a row vector containing the unique values in @var{x}, sorted in
 ## ascending order.  For example,
 ##
 ## @example
 ## @group
-## create_set ([ 1, 2; 3, 4; 4, 2 ])
+## create_set ([ 1, 2; 3, 4; 4, 2; 1, 2 ])
 ##      @result{} [ 1, 2, 3, 4 ]
 ## @end group
 ## @end example
-## @seealso{union, intersection, complement}
+##
+## If the optional second input argument is the string "rows" each row of
+## the matrix @var{x} will be considered an element of set.  For example,
+## @example
+## @group
+## create_set ([ 1, 2; 3, 4; 4, 2; 1, 2 ], "rows")
+##      @result{}  1   2
+##     3   4
+##     4   2
+## @end group
+## @end example
+## @seealso{union, intersection, complement, unique}
 ## @end deftypefn
 
 ## Author: jwe
 
-function y = create_set(x)
+function y = create_set (x, rows_opt)
 
-  if (nargin != 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
-
-  if (isempty(x))
-    y = [];
+  
+  if (nargin == 1)
+    y = unique (x).';
+  elseif (strcmpi (rows_opt, "rows"))
+    y = unique (x, "rows");
   else
-    nel = numel (x);
-    y = sort (reshape (x, 1, nel));
-    els = find (y(1:nel-1) != y(2:nel));
-    if (isempty (els));
-      y = y(1);
-    else
-      y = y([1, els+1]);
-    endif
+    error ("create_set: expecting \"rows\" as second argument");
   endif
 
 endfunction
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -1,10 +1,10 @@
 ## Copyright (C) 1994, 1996, 1997, 1999, 2000, 2003, 2004, 2005, 2006,
-##               2007 John W. Eaton
+##               2007, 2008 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -14,42 +14,63 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} union (@var{x}, @var{y})
+## @deftypefnx{Function File} {} union (@var{x}, @var{y}, "rows")
 ## Return the set of elements that are in either of the sets @var{x} and
 ## @var{y}.  For example,
 ##
 ## @example
 ## @group
-## union ([ 1, 2, 4 ], [ 2, 3, 5 ])
-##      @result{} [ 1, 2, 3, 4, 5 ]
+## union ([1, 2, 4], [2, 3, 5])
+##      @result{} [1, 2, 3, 4, 5]
+## @end group
+## @end example
+##
+## If the optional third input argument is the string "rows" each row of
+## the matrices @var{x} and @var{y} will be considered an element of sets.
+## For example,
+## @example
+## @group
+## union([1, 2; 2, 3], [1, 2; 3, 4], "rows")
+##      @result{}  1   2
+##     2   3
+##     3   4
 ## @end group
 ## @end example
 ## @seealso{create_set, intersection, complement}
 ## @end deftypefn
 
 ## Author: jwe
 
-function y = union(a,b)
+function y = union (a, b, varargin)
 
-  if (nargin != 2)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
+  if (nargin == 3 && ! strcmpi (varargin{1}, "rows"))
+    error ("union: if a third input argument is present, it must be the string 'rows'");
+  endif
+
   if (isempty (a))
-    y = create_set (b);
+    y = create_set (b, varargin{:});
   elseif (isempty (b))
-    y = create_set (a);
-  else
+    y = create_set (a, varargin{:});
+  elseif (nargin == 2)
     y = create_set ([a(:); b(:)]);
     if (size (a, 1) == 1 || size (b, 1) == 1)
       y = y(:).';
     else
       y = y(:);
     endif
+  elseif (ndims (a) == 2 && ndims (b) == 2 && columns (a) == columns (b))
+    y = create_set ([a; b], "rows");
+  else
+    error ("union: input arguments must contain the same number of columns when \"rows\" is specified");
   endif
 
 endfunction
