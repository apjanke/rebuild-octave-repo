# HG changeset patch
# User Michael D. Godfrey <michaeldgodfrey@gmail.com>
# Date 1436300731 -3600
#      Tue Jul 07 21:25:31 2015 +0100
# Node ID b9d4ccf4291cd93c8943e41e9fef89041a90926a
# Parent  9e361ecea8788263ff645209e1ec4cab685a862c
Use FLTK for creating plots for Manual.

* plot.txi: Add explanation of standalone printing modes to work around
lack of 'interpreter' property for OpenGL toolkits.

* plotimages.m: Rework example using text and 'interpreter' to use
standalone printing.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -200,16 +200,17 @@ produces the figure shown in @ref{fig:er
 @DOCSTRING(loglogerr)
 
 Finally, the @code{polar} function allows you to easily plot data in
 polar coordinates.  However, the display coordinates remain rectangular
 and linear.  For example,
 
 @example
 polar (0:0.1:10*pi, 0:0.1:10*pi);
+set (gca, "rtick", [0:10:40]);
 @end example
 
 @noindent
 produces the spiral plot shown in @ref{fig:polar}.
 
 @float Figure,fig:polar
 @center @image{polar,4in}
 @caption{Polar plot.}
@@ -909,41 +910,16 @@ width 0.6pt \tabskip=0pt\cr
 & $\backslash$deg        && $^\circ$
 &&    &&
 &&    &&       &\cr}
 \vskip12pt
 \hskip36pt Table 15.1: Available special characters in \TeX\ mode (cont.)
 @end tex
 @end float
 
-A complete example showing the capabilities of the extended text is
-
-@example
-@group
-x = 0:0.01:3;
-plot (x, erf (x));
-hold on;
-plot (x,x,"r");
-axis ([0, 3, 0, 1]);
-text (0.65, 0.6175, strcat ('\leftarrow x = @{2/\surd\pi',
-' @{\fontsize@{16@}\int_@{\fontsize@{8@}0@}^@{\fontsize@{8@}x@}@}',
-' e^@{-t^2@} dt@} = 0.6175'))
-@end group
-@end example
-
-@ifnotinfo
-@noindent
-The result of which can be seen in @ref{fig:extendedtext}
-
-@float Figure,fig:extendedtext
-@center @image{extended,4in}
-@caption{Example of inclusion of text with the @TeX{} interpreter}
-@end float
-@end ifnotinfo
-
 @node Printing and Saving Plots
 @subsection Printing and Saving Plots
 @cindex plotting, saving and printing plots
 @cindex printing plots
 @cindex saving plots
 
 The @code{print} command allows you to send plots to you printer and
 to save plots in a variety of formats.  For example,
@@ -958,22 +934,58 @@ prints the current figure to a color Pos
 @example
 print -deps foo.eps
 @end example
 
 @noindent
 saves the current figure to an encapsulated PostScript file called
 @file{foo.eps}.
 
-The different graphic toolkits have different print capabilities.  In
-particular, the OpenGL based toolkits such as @code{fltk} do not support
-the @qcode{"interpreter"} property of text objects.  This means special
-symbols drawn with the @qcode{"tex"} interpreter will appear correctly
-on-screen but will be rendered with interpreter @qcode{"none"} when printing.
-Switch graphics toolkits for printing if this is a concern.
+The current graphic toolkits have differing print capabilities.  In particular,
+the OpenGL based toolkits such as @code{fltk} and @code{qt} do not support the
+@qcode{"interpreter"} property of text objects.  This means that when using
+OpenGL toolkits special symbols drawn with the @qcode{"tex"} interpreter will
+appear correctly on-screen but will be rendered with interpreter @qcode{"none"}
+when printing unless one of the @qcode{standalone} (see below) modes is used.
+These modes provide access to the pdflatex processor and therefore allow full
+use of LaTeX commands.
+
+A complete example showing the capabilities of text printing using the
+@code{-dpdflatexstandalone} option is
+
+@example
+@group
+x = 0:0.01:3;
+hf = figure ();
+plot (x, erf (x));
+hold on;
+plot (x, x, "r");
+axis ([0, 3, 0, 1]);
+text (0.65, 0.6175, ['$\leftarrow x = @{2/\sqrt@{\pi@}' ...
+        '@{\int_@{0@}^@{x@}@}e^@{-t^2@} dt@} = 0.6175$']);
+xlabel ("x");
+ylabel ("erf (x)");
+title ("erf (x) with text annotation");
+set (hf, "visible", "off")
+print (hf, "plot15_7.pdf", "-dpdflatexstandalone")
+set (hf, "visible", "on")
+system ("pdflatex plot15_7");
+system ("acroread plot15_7.pdf &");
+@end group
+@end example
+
+@ifnotinfo
+@noindent
+The result of which can be seen in @ref{fig:extendedtext}
+
+@float Figure,fig:extendedtext
+@center @image{extended,4in}
+@caption{Example of inclusion of text with use of @code{-dpdflatexstandalone}}
+@end float
+@end ifnotinfo
 
 @DOCSTRING(print)
 
 @DOCSTRING(saveas)
 
 @DOCSTRING(orient)
 
 @code{print} and @code{saveas} are used when work on a plot has finished
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -12,31 +12,31 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (d, nm, typ)
-  graphics_toolkit ("gnuplot");
+  graphics_toolkit ("qt");
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, strcat (nm, ".", typ));
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d", typ];
   endif
 
   if (strcmp(typ , "txt"))
-    image_as_txt(d, nm);
+    image_as_txt (d, nm);
   elseif (strcmp (nm, "plot"))
     x = -10:0.1:10;
     plot (x, sin (x));
     xlabel ("x");
     ylabel ("sin (x)");
     title ("Simple 2-D Plot");
     print (outfile, d_typ);
   elseif (strcmp (nm, "hist"))
@@ -55,16 +55,17 @@ function plotimages (d, nm, typ)
     errorbar (x, sin (x), yl, yu);
     axis ([0, 10, -1.1, 1.1]);
     xlabel ("x");
     ylabel ("sin (x)");
     title ("Errorbar plot of sin (x)");
     print (outfile, d_typ);
   elseif (strcmp (nm, "polar"))
     polar (0:0.1:10*pi, 0:0.1:10*pi);
+    set (gca, "rtick", [0:10:40]);
     title ("Example polar plot from 0 to 10*pi");
     print (outfile, d_typ);
   elseif (strcmp (nm, "mesh"))
     tx = ty = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (tx, ty);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     tz = sin (r) ./ r;
     mesh (tx, ty, tz);
@@ -80,50 +81,61 @@ function plotimages (d, nm, typ)
     plot3 (r.*sin(t), r.*cos(t), z);
     xlabel ("r.*sin (t)");
     ylabel ("r.*cos (t)");
     zlabel ("z");
     title ("plot3 display of 3-D helix");
     print (outfile, d_typ);
   elseif (strcmp (nm, "extended"))
     x = 0:0.01:3;
-    plot (x,erf(x));
+    plot (x, erf (x));
     hold on;
-    plot (x,x,"r");
+    plot (x, x, "r");
     axis ([0, 3, 0, 1]);
-    text (0.65, 0.6175, ['\leftarrow x = {2/\surd\pi {\fontsize{16}' ...
-          '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175']);
+    if (strcmp (typ, "pdf"))
+      text (0.65, 0.6175, ['$\leftarrow x = {2/\sqrt{\pi}' ...
+            '{\int_{0}^{x}}e^{-t^2} dt} = 0.6175$']);
+    else
+      text (0.65, 0.6175, ['\leftarrow x = {2/\surd\pi {\fontsize{16}' ...
+            '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175']);
+    endif
     xlabel ("x");
     ylabel ("erf (x)");
     title ("erf (x) with text annotation");
-    print (outfile, d_typ);
+    if (strcmp (typ, "pdf"))
+      print ([nm ".pdf"], "-dpdflatexstandalone");
+      system (["pdflatex " nm]);
+      delete ([nm ".aux"], [nm "-inc.pdf"], [nm ".log"], [nm ".tex"]);
+    else
+      print ([nm "." typ], d_typ);
+    endif
   else
     error ("unrecognized plot requested");
   endif
   hide_output ();
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
 ## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
+## print since print() resets output to stdout (unfortunately, gnuplot
 ## can't pop output as it can the terminal type).
 function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
-function image_as_txt(d, nm)
+function image_as_txt (d, nm)
   fid = fopen (fullfile (d, strcat (nm, ".txt")), "wt");
   fputs (fid, "\n");
   fputs (fid, "+---------------------------------+\n");
   fputs (fid, "| Image unavailable in text mode. |\n");
   fputs (fid, "+---------------------------------+\n");
   fclose (fid);
 endfunction
