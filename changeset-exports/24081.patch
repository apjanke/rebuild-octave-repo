# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1505264002 18000
#      Tue Sep 12 19:53:22 2017 -0500
# Node ID ae8e3e81f372c6d4aee8cf0c23f5bbb5a3fc5f30
# Parent  35d13d84a71a3ee35a5fc59446ba76288367591d
Clarify assert() test with the amount by which the test fails (bug #52004).

* assert.m: For all the error messages indicating that the distance between two
  norms exceeds a tolerance, add a third variable indicating the amount by
  which the two numbers differ using only a single digit precision to limit
  message line length.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -328,64 +328,76 @@ function assert (cond, varargin)
           if (! isempty (erridx))
             err.index(end+1:end+length (erridx)) = ...
               ind2tuple (size (A), erridx);
             err.observed(end+1:end+length (erridx)) = ...
               strtrim (cellstr (num2str (A(erridx) (:))));
             err.expected(end+1:end+length (erridx)) = ...
               strtrim (cellstr (num2str (B(erridx) (:))));
             err.reason(end+1:end+length (erridx)) = ...
-              ostrsplit (deblank (sprintf ("Abs err %.5g exceeds tol %.5g\n",...
-              [abs(A_null(erridx) - B_null(erridx))(:) mtol(erridx)(:)]')), "\n");
+              ostrsplit (deblank (
+                         sprintf ("Abs err %.5g exceeds tol %.5g by %.1g\n",
+                [abs(A_null(erridx) - B_null(erridx))(:), mtol(erridx)(:), ...
+                 abs(A_null(erridx) - B_null(erridx))(:)-mtol(erridx)(:)].')),
+                         "\n");
           endif
 
           k = (mtol > 0);
           erridx = find ((abs (A_null - B_null) > mtol) & k);
           if (! isempty (erridx))
             err.index(end+1:end+length (erridx)) = ...
               ind2tuple (size (A), erridx);
             err.observed(end+1:end+length (erridx)) = ...
               strtrim (cellstr (num2str (A(erridx) (:))));
             err.expected(end+1:end+length (erridx)) = ...
               strtrim (cellstr (num2str (B(erridx) (:))));
             err.reason(end+1:end+length (erridx)) = ...
-              ostrsplit (deblank (sprintf ("Abs err %.5g exceeds tol %.5g\n",...
-              [abs(A_null(erridx) - B_null(erridx))(:) mtol(erridx)(:)]')), "\n");
+              ostrsplit (deblank (
+                         sprintf ("Abs err %.5g exceeds tol %.5g by %.1g\n",
+                [abs(A_null(erridx) - B_null(erridx))(:), mtol(erridx)(:), ...
+                 abs(A_null(erridx) - B_null(erridx))(:)-mtol(erridx)(:)].')),
+                         "\n");
           endif
 
           k = (mtol < 0);
           if (any (k(:)))
             ## Test for absolute error where relative error can't be calculated.
             erridx = find ((B_null == 0) & abs (A_null) > abs (mtol) & k);
             if (! isempty (erridx))
               err.index(end+1:end+length (erridx)) = ...
                 ind2tuple (size (A), erridx);
               err.observed(end+1:end+length (erridx)) = ...
                 strtrim (cellstr (num2str (A(erridx) (:))));
               err.expected(end+1:end+length (erridx)) = ...
                 strtrim (cellstr (num2str (B(erridx) (:))));
               err.reason(end+1:end+length (erridx)) = ...
-                ostrsplit (deblank (sprintf ("Abs err %.5g exceeds tol %.5g\n",
-                [abs(A_null(erridx) - B_null(erridx)) -mtol(erridx)]')), "\n");
+                ostrsplit (deblank (
+                           sprintf ("Abs err %.5g exceeds tol %.5g by %.1g\n",
+                      [abs(A_null(erridx) - B_null(erridx)), -mtol(erridx), ...
+                       abs(A_null(erridx) - B_null(erridx))+mtol(erridx)].')),
+                           "\n");
             endif
             ## Test for relative error
             Bdiv = Inf (size (B_null));
             Bdiv(k & (B_null != 0)) = B_null(k & (B_null != 0));
             relerr = abs ((A_null - B_null) ./ abs (Bdiv));
             erridx = find ((relerr > abs (mtol)) & k);
             if (! isempty (erridx))
               err.index(end+1:end+length (erridx)) = ...
                 ind2tuple (size (A), erridx);
               err.observed(end+1:end+length (erridx)) = ...
                 strtrim (cellstr (num2str (A(erridx) (:))));
               err.expected(end+1:end+length (erridx)) = ...
                 strtrim (cellstr (num2str (B(erridx) (:))));
               err.reason(end+1:end+length (erridx)) = ...
-                ostrsplit (deblank (sprintf ("Rel err %.5g exceeds tol %.5g\n",
-                [relerr(erridx)(:) -mtol(erridx)(:)]')), "\n");
+                ostrsplit (deblank (
+                           sprintf ("Rel err %.5g exceeds tol %.5g by %.1g\n",
+                                    [relerr(erridx)(:), -mtol(erridx)(:), ...
+                                     relerr(erridx)(:)+mtol(erridx)(:)].')),
+                           "\n");
             endif
           endif
         endif
 
       endif
 
       ## Print any errors
       if (! isempty (err.index))
