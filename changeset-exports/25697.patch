# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532729717 14400
#      Fri Jul 27 18:15:17 2018 -0400
# Node ID 91f0416c2ba7ccb0f15f446ab81a08ee595acc2e
# Parent  3b6691ff0f594104e12338b335f905caeb614d07
# Parent  cfc32b131755c3c3612922f06a97524774604d25
maint: Merge stable to default.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1194,17 +1194,16 @@ write_header (std::ostream& os, load_sav
         os.write (&tmp, 1);
       }
       break;
 
     case LS_MAT5_BINARY:
     case LS_MAT7_BINARY:
       {
         char const *versionmagic;
-        int16_t number = *(reinterpret_cast<const int16_t *>("\x00\x01"));
         char headertext[128];
         octave::sys::gmtime now;
 
         // ISO 8601 format date
         const char *matlab_format = "MATLAB 5.0 MAT-file, written by Octave "
             OCTAVE_VERSION ", %Y-%m-%d %T UTC";
         std::string comment_string = now.strftime (matlab_format);
 
@@ -1214,17 +1213,17 @@ write_header (std::ostream& os, load_sav
 
         // The first pair of bytes give the version of the MAT file
         // format.  The second pair of bytes form a magic number which
         // signals a MAT file.  MAT file data are always written in
         // native byte order.  The order of the bytes in the second
         // pair indicates whether the file was written by a big- or
         // little-endian machine.  However, the version number is
         // written in the *opposite* byte order from everything else!
-        if (number == 1)
+        if (octave::mach_info::words_big_endian ())
           versionmagic = "\x01\x00\x4d\x49"; // this machine is big endian
         else
           versionmagic = "\x00\x01\x49\x4d"; // this machine is little endian
 
         memcpy (headertext+124, versionmagic, 4);
         os.write (headertext, 128);
       }
 
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{c} =} setdiff (@var{a}, @var{b})
 ## @deftypefnx {} {@var{c} =} setdiff (@var{a}, @var{b}, "rows")
 ## @deftypefnx {} {[@var{c}, @var{ia}] =} setdiff (@dots{})
 ## Return the unique elements in @var{a} that are not in @var{b} sorted in
 ## ascending order.
 ##
-## If @var{a} is a row vector return a column vector; Otherwise, return a
+## If @var{a} is a row vector return a row vector; Otherwise, return a
 ## column vector.  The inputs may also be cell arrays of strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the rows in
 ## @var{a} that are not in @var{b}.  The inputs must be 2-D matrices to use
 ## this option.
 ##
 ## If requested, return the index vector @var{ia} such that
 ## @code{@var{c} = @var{a}(@var{ia})}.
