# HG changeset patch
# User Rik <rik@octave.org>
# Date 1505883380 25200
#      Tue Sep 19 21:56:20 2017 -0700
# Node ID f9e0f7f1e2679bd47f28e0e1b0826d59fc75b57c
# Parent  e18bf7459f79ef46e877f967ed816328c5781819
caxis.m: Overhaul function.

* caxis.m: Validate that 0, 1, or 2 inputs are given.  Remove unnecessary
subfunction __caxis__.  Print an error if mode is not "auto" or "manual".
Add BIST tests for function and for input validation.

diff --git a/scripts/plot/appearance/caxis.m b/scripts/plot/appearance/caxis.m
--- a/scripts/plot/appearance/caxis.m
+++ b/scripts/plot/appearance/caxis.m
@@ -47,56 +47,77 @@
 ## @qcode{"direct"} @code{cdatamapping} are not affected.
 ## @seealso{colormap, axis}
 ## @end deftypefn
 
 function limits = caxis (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("caxis", varargin{:});
 
+  if (nargin > 1)
+    print_usage ();
+  endif
+
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     if (isempty (hax))
       hax = gca ();
     endif
     if (nargin == 0)
-      limits = __caxis__ (hax);
+      limits = get (hax, "clim");
     else
-      __caxis__ (hax, varargin{:});
+      arg1 = varargin{1};
+      if (ischar (arg1))
+        if (strcmpi (arg1, "auto"))
+          set (hax, "climmode", "auto");
+        elseif (strcmpi (arg1, "manual"))
+          set (hax, "climmode", "manual");
+        else
+          error ("caxis: invalid mode '%s'", arg1);
+        endif
+      elseif (isvector (arg1))
+        if (numel (arg1) != 2 || ! isnumeric (arg1) || arg1(1) >= arg1(2))
+          error ("caxis: LIMITS must be a numeric 2-element vector where LIM1 < LIM2");
+        endif
+        set (hax, "clim", arg1);
+      else
+        print_usage ();
+      endif
     endif
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
 endfunction
 
-function limits = __caxis__ (ca, arg1, varargin)
 
-  if (nargin == 1)
-    limits = get (ca, "clim");
-  elseif (ischar (arg1))
-    if (strcmpi (arg1, "auto"))
-      set (ca, "climmode", "auto");
-    elseif (strcmpi (arg1, "manual"))
-      set (ca, "climmode", "manual");
-    endif
-  elseif (isvector (arg1))
-    if (numel (arg1) != 2 || ! isnumeric (arg1) || arg1(1) >= arg1(2))
-      error (["caxis: "
-              "LIMITS must be a numeric 2-element vector where LIM1 < LIM2"]);
-    endif
+%!test
+%! hf = figure ("visible", "off");
+%! hax = gca ();
+%! unwind_protect
+%!   caxis ([e, pi]);
+%!   assert (caxis (), [e, pi]);
+%!   caxis (hax, [-1, 1]);
+%!   assert (caxis (hax), [-1, 1]);
+%!   assert (get (hax, "climmode"), "manual");
+%!   caxis ("auto");
+%!   assert (get (hax, "climmode"), "auto");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
 
-    set (ca, "clim", arg1);
-  else
-    error ("caxis: expecting no args, a string, or a 2 element vector");
-  endif
-
-  ## FIXME: Why should it be possible to call __caxis__ recursively?
-  if (nargin > 2)
-    __caxis__ (ca, varargin{:})';
-  endif
-
-endfunction
+## Test input validation
+%!error caxis (1,2,3)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   fail ("caxis ('foo')", "invalid mode 'foo'");
+%!   fail ("caxis ([1 2 3])", "2-element vector");
+%!   fail ("caxis ({1 2 3})", "numeric 2-element vector");
+%!   fail ("caxis ([1 0])", "LIM1 < LIM2");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
