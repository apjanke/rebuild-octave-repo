# HG changeset patch
# User Avinoam Kalma <a.kalma@gmail.com>
# Date 1474635999 -7200
#      Fri Sep 23 15:06:39 2016 +0200
# Node ID db762b9b9b7238323a1051d0f38431e2e7079786
# Parent  640c1b4768606863e8b2b9c212332217df438b68
inputdlg.m: proper rowcols handling and accept options parameter (bug #49143)

* Accept 5th option parameter for Matlab compatibility, but ignore it giving
a warning.  Documentation extended.  Testcase adapted.
* Better handling of vectors describing the input field dimension.
* New demo testing the vector input.

Reviewed and pushed by Kai T. Ohlhus <k.ohlhus@gmail.com>.

diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{cstr} =} inputdlg (@var{prompt})
 ## @deftypefnx {} {@var{cstr} =} inputdlg (@var{prompt}, @var{title})
 ## @deftypefnx {} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols})
 ## @deftypefnx {} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols}, @var{defaults})
+## @deftypefnx {} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols}, @var{defaults}, @var{options})
 ## Return user input from a multi-textfield dialog box in a cell array of
 ## strings, or an empty cell array if the dialog is closed by the Cancel
 ## button.
 ##
 ## Inputs:
 ##
 ## @table @var
 ## @item prompt
@@ -44,16 +45,19 @@
 ## @item a vector which defines the individual number of rows used for each text field.
 ##
 ## @item a matrix which defines the individual number of rows and columns used for each text field.  In the matrix each row describes a single text field.  The first column specifies the number of input rows to use and the second column specifies the text field width.
 ## @end enumerate
 ##
 ## @item defaults
 ## A list of default values to place in each text fields.  It must be a cell
 ## array of strings with the same size as @var{prompt}.
+##
+## @item options
+## Not supported, only for @sc{matlab} compatibility.
 ## @end table
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## prompt = @{"Width", "Height", "Depth"@};
 ## defaults = @{"1.10", "2.20", "3.30"@};
@@ -62,17 +66,17 @@
 ## @end group
 ## @end example
 ##
 ## @seealso{errordlg, helpdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function cstr = inputdlg (prompt, varargin)
 
-  narginchk (1, 4);
+  narginchk (1, 5);
 
   if (iscell (prompt))
     ## Silently extract only char elements
     prompt = prompt(cellfun ("isclass", prompt, "char"));
   elseif (ischar (prompt))
     prompt = {prompt};
   else
     error ("inputdlg: PROMPT must be a character string or cellstr array");
@@ -90,17 +94,21 @@ function cstr = inputdlg (prompt, vararg
   if (nargin > 2)
     linespec = varargin{2};
   endif
 
   defaults = cellstr (cell (size (prompt)));
   if (nargin > 3)
     defaults = varargin{3};
   endif
-
+  
+  if (nargin > 4)
+    warning ("inputdlg: 5th 'options' argument ignored");
+  endif
+  
   ## specification of text field sizes as in Matlab
   ## Matlab requires a matrix for linespec, not a cell array...
   ## rc = [1,10; 2,20; 3,30];
   ##     c1  c2
   ## r1  1   10   first  text field is 1x10
   ## r2  2   20   second text field is 2x20
   ## r3  3   30   third  text field is 3x30
   if (! isnumeric (linespec))
@@ -108,30 +116,30 @@ function cstr = inputdlg (prompt, vararg
   endif
 
   if (isscalar (linespec))
     ## only scalar value in lineTo, copy from linespec and add defaults
     rowscols = zeros (numel (prompt), 2);
     ## cols
     rowscols(:,2) = 25;
     rowscols(:,1) = linespec;
-  elseif (isvector (linespec))
-    if (numel (linespec) == numel (prompt))
-      ## only one column in lineTo, copy from vector linespec and add defaults
-      rowscols = zeros (numel (prompt), 2);
-      ## rows from colum vector linespec, columns are set to default
-      rowscols(:,2) = 25;
-      rowscols(:,1) = linespec(:);
-    else
-      error ("inputdlg: ROWSCOLS vector does not match size of PROMPT");
-    endif
   elseif (ismatrix (linespec))
     if (rows (linespec) == columns (prompt) && columns (linespec) == 2)
       ## (rows x columns) match, copy array linespec
       rowscols = linespec;
+    elseif (isvector (linespec))
+      if (numel (linespec) == numel (prompt))
+        ## only one column in lineTo, copy from vector linespec and add defaults
+        rowscols = zeros (numel (prompt), 2);
+        ## rows from colum vector linespec, columns are set to default
+        rowscols(:,2) = 25;
+        rowscols(:,1) = linespec(:);
+      else
+        error ("inputdlg: ROWSCOLS vector does not match size of PROMPT");
+      endif
     else
       error ("inputdlg: ROWSCOLS matrix does not match size of PROMPT");
     endif
   else
     ## dunno
     error ("inputdlg: unknown form of ROWSCOLS argument");
   endif
   rowscols = ceil (rowscols);
@@ -209,15 +217,26 @@ endfunction
 %!   volume  = str2num (dims{1}) * str2num (dims{2}) * str2num (dims{3});
 %!   surface = 2 * (str2num (dims{1}) * str2num (dims{2}) + ...
 %!                  str2num (dims{2}) * str2num (dims{3}) + ...
 %!                  str2num (dims{1}) * str2num (dims{3}));
 %!   helpdlg (sprintf ('Results:\nVolume = %.3f\nSurface = %.3f', ...
 %!                     volume, surface), 'Box Dimensions');
 %! endif
 
-%!error inputdlg (1, 2, 3, 4, 5)
+%!demo
+%! disp ('- test inputdlg with vector for a single item.');
+%! prompt = {'enter x value'};
+%! default = {1};
+%! answer = inputdlg (prompt,'Enter value', [1 10], default);
+%! if (isempty (answer))
+%!   helpdlg ('Canceled by user', 'Information');
+%! else
+%!   helpdlg (sprintf ('answer = %d', str2num(answer{1})), 'answer');
+%! endif
+
+%!error inputdlg (1, 2, 3, 4, 5, 6)
 %!error <PROMPT must be a character string> inputdlg (1)
 %!error <TITLE must be a character string> inputdlg ("msg", 1)
 %!error <ROWSCOLS must be numeric> inputdlg ("msg", "title", "1")
 %!error <ROWSCOLS vector does not match size>
 %! inputdlg ({"a1", "a2"}, "title", [1, 2, 3]);
 
