# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501431718 25200
#      Sun Jul 30 09:21:58 2017 -0700
# Node ID 057a894914df2bf57272a5abfa7121f2b62ff179
# Parent  e8eb1b86e935a2af0cb64bc13c9f7dc2d9f6b81a
Use C++11 string fcns back() and pop_back() to simplify code.

* error.cc (maybe_extract_message): Use "back()" rather than "[length () -1]".

* input.cc (base_reader::octave_gets): Use "back()" rather than
"[length () -1]".

* ls-hdf5.cc (read_hdf5_data)): Use "clear()" rather than "resize (0)" to erase
string.

* ls-mat-ascii.cc (get_lines_and_columns): Reformat comment.

* ls-oct-binary.cc (read_binary_data): Use "clear()" rather than "resize (0)"
to erase string.

* oct-stream.cc (delimited_stream::getline): Declare and initialize only one
variable per line as per Octave coding convention.
* oct-stream.cc (textscan_format_list::read_first_row): Use back() and pop_back()
to potentially remove last character from string.

* strfns.cc (Fstrvcat): Use "empty()" rather than "length() > 0".

* sysdep.cc (w32_set_octav_home): Use back() and push_back() to potentially add
dir separator to string.

* gzip.cc (uchar_array): Space out code for readability.

* file-ops.cc (tilde_expand): Call string_vector constructor with size n rather
than resize.
* file-ops.cc (concat): Use "back()" rather than "[length () -1]".

* file-stat.cc (update_internal): Use "back()" rather than "[length () -1]".
Use pop_back() rather than resize() to remove last character.

* oct-env.cc (do_chdir): Use pop_back() rather than resize() to remove last
character.

* cmd-edit.cc (do_generate_filename_completions): Reformat comment.

* cmd-hist.cc (): Use back() and pop_back() to potentially remove "\n" from end
of string.

* data-conv.cc (strip_spaces): Initialize string with null character rather
than space.

* kpse.cc (kpse_tilde_expand): Use "back()" rather than "[length () -1]".
* kpse.cc (kpse_expand_kpse_dot, kpse_brace_expand, kpse_path_expand): Use
pop_back() to potentially remove last character.
* kpse.cc (kpse_brace_expand_element, kpse_element_dir): Use pop_back() to
remove last character.

* lo-utils.cc (octave_fgetl): Use "back()" rather than "[length () -1]".
Use pop_back() rather than resize() to remove last character.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1075,25 +1075,24 @@ maybe_extract_message_id (const std::str
   int nargin = args.length ();
 
   bool have_fmt = nargin > 1;
 
   if (nargin > 0)
     {
       std::string arg1 = args(0).string_value ();
 
-      // For compatibility with Matlab, an identifier must contain
-      // ':', but not at the beginning or the end, and it must not
-      // contain '%' (even if it is not a valid conversion
-      // operator) or whitespace.
+      // For compatibility with Matlab, an identifier must contain ':',
+      // but not at the beginning or the end, and it must not contain '%'
+      // (even if it is not a valid conversion operator) or whitespace.
 
       if (arg1.find_first_of ("% \f\n\r\t\v") == std::string::npos
           && arg1.find (':') != std::string::npos
           && arg1[0] != ':'
-          && arg1[arg1.length ()-1] != ':')
+          && arg1.back () != ':')
         {
           if (nargin > 1)
             {
               id = arg1;
 
               nargs.resize (nargin-1);
 
               for (int i = 1; i < nargin; i++)
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -255,17 +255,17 @@ namespace octave
         if (! history_skip_auto_repeated_debugging_command)
           {
             if (command_history::add (retval))
               octave_link::append_history (retval);
           }
 
         octave_diary << retval;
 
-        if (retval[retval.length () - 1] != '\n')
+        if (retval.back () != '\n')
           octave_diary << "\n";
       }
     else
       octave_diary << "\n";
 
     // Process post input event hook function after the internal history
     // list has been updated.
 
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -725,17 +725,17 @@ read_hdf5_data (std::istream& is, const 
                 const string_vector& argv, int argv_idx, int argc)
 {
 #if defined (HAVE_HDF5)
 
   check_hdf5_types ();
 
   std::string retval;
 
-  doc.resize (0);
+  doc.clear ();
 
   hdf5_ifstream& hs = dynamic_cast<hdf5_ifstream&> (is);
   hdf5_callback_data d;
 
   herr_t H5Giterate_retval = -1;
 
   hsize_t num_obj = 0;
 #if defined (HAVE_HDF5_18)
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -165,19 +165,18 @@ get_lines_and_columns (std::istream& is,
                     }
                 }
 
               beg = buf.find_first_not_of (", \t", end);
 
               if (beg == std::string::npos
                   || (buf[beg] == '\r' && beg == buf.length () - 1))
                 {
-                  // We had a line with trailing spaces and
-                  // ending with a CRLF, so this should look like EOL,
-                  // not a new colum.
+                  // We had a line with trailing spaces and ending with a CRLF,
+                  // so this should look like EOL, not a new column.
                   break;
                 }
             }
           else
             break;
         }
 
       if (tmp_nc > 0)
diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -124,17 +124,17 @@ read_binary_data (std::istream& is, bool
 {
   std::string retval;
 
   unsigned char tmp = 0;
 
   int32_t name_len = 0;
   int32_t doc_len = 0;
 
-  doc.resize (0);
+  doc.clear ();
 
   // We expect to fail here, at the beginning of a record, so not
   // being able to read another name should not result in an error.
 
   is.read (reinterpret_cast<char *> (&name_len), 4);
   if (! is)
     return retval;
   if (swap)
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1595,17 +1595,18 @@ namespace octave
   }
 
   // Return in OUT an entire line, terminated by delim.  On input, OUT
   // must have length at least 1.
 
   int
   delimited_stream::getline (std::string& out, char delim)
   {
-    int len = out.length (), used = 0;
+    int len = out.length ();
+    int used = 0;
     int ch;
     while ((ch = get_undelim ()) != delim
            && ch != std::istream::traits_type::eof ())
       {
         out[used++] = ch;
         if (used == len)
           {
             len <<= 1;
@@ -2468,19 +2469,18 @@ namespace octave
   int
   textscan_format_list::read_first_row (delimited_stream& is, textscan& ts)
   {
     // Read first line and strip end-of-line, which may be two characters
     std::string first_line (20, ' ');
 
     is.getline (first_line, static_cast<char> (ts.eol2));
 
-    if (! first_line.empty ()
-        && first_line[first_line.length () - 1] == ts.eol1)
-      first_line.resize (first_line.length () - 1);
+    if (! first_line.empty () && first_line.back () == ts.eol1)
+      first_line.pop_back ();
 
     std::istringstream strstr (first_line);
     delimited_stream ds (strstr, is);
 
     dim_vector dv (1,1);      // initial size of each output_container
     Complex val;
     octave_value val_type;
     nconv = 0;
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -216,17 +216,17 @@ strvcat ([97, 98, 99], "", @{"98", "99",
 
       size_t n = s.numel ();
 
       // do not count empty strings in calculation of number of elements
       if (n > 0)
         {
           for (size_t j = 0; j < n; j++)
             {
-              if (s[j].length () > 0)
+              if (! s[j].empty ())
                 n_elts++;
             }
         }
 
       size_t s_max_len = s.max_length ();
 
       if (s_max_len > max_len)
         max_len = s_max_len;
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -131,18 +131,18 @@ w32_set_octave_home (void)
         {
           do
             {
               std::string mod_name (mod_info.szModule);
 
               if (mod_name.find ("octinterp") != std::string::npos)
                 {
                   bin_dir = mod_info.szExePath;
-                  if (bin_dir[bin_dir.length () - 1] != '\\')
-                    bin_dir.append (1, '\\');
+                  if (! bin_dir.empty () && bin_dir.back () != '\\')
+                    bin_dir.push_back ('\\');
                   break;
                 }
             }
           while (Module32Next (h, &mod_info));
         }
 
       CloseHandle (h);
     }
diff --git a/libinterp/dldfcn/gzip.cc b/libinterp/dldfcn/gzip.cc
--- a/libinterp/dldfcn/gzip.cc
+++ b/libinterp/dldfcn/gzip.cc
@@ -261,17 +261,17 @@ namespace octave
 
       // Bytef is a typedef for unsigned char
       unsigned char *p;
 
       uchar_array (void) = delete;
 
       uchar_array (const std::string& str)
       {
-        p = new Bytef[str.length () +1];
+        p = new Bytef[str.length () + 1];
         std::strcpy (reinterpret_cast<char *> (p), str.c_str ());
       }
 
       uchar_array (const uchar_array&) = delete;
 
       uchar_array& operator = (const uchar_array&) = delete;
 
       ~uchar_array (void) { delete[] p; }
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -327,33 +327,31 @@ namespace octave
               }
 
             return result;
           }
       }
 
       string_vector tilde_expand (const string_vector& names)
       {
-        string_vector retval;
-
         int n = names.numel ();
 
-        retval.resize (n);
+        string_vector retval (n);
 
         for (int i = 0; i < n; i++)
           retval[i] = tilde_expand (names[i]);
 
         return retval;
       }
 
       std::string concat (const std::string& dir, const std::string& file)
       {
         return dir.empty ()
           ? file
-          : (is_dir_sep (dir[dir.length ()-1])
+          : (is_dir_sep (dir.back ())
              ? dir + file
              : dir + dir_sep_char () + file);
       }
 
       std::string dirname (const std::string& path)
       {
         size_t ipos = path.find_last_of (dir_sep_chars ());
 
diff --git a/liboctave/system/file-stat.cc b/liboctave/system/file-stat.cc
--- a/liboctave/system/file-stat.cc
+++ b/liboctave/system/file-stat.cc
@@ -183,20 +183,20 @@ namespace octave
         {
           initialized = false;
           fail = false;
 
           std::string full_file_name = sys::file_ops::tilde_expand (file_name);
 
 #if defined (__WIN32__)
           // Remove trailing slash.
-          if (sys::file_ops::is_dir_sep (full_file_name[full_file_name.length () - 1])
-              && full_file_name.length () != 1
+          if (full_file_name.length () > 1
+              && sys::file_ops::is_dir_sep (full_file_name.back ())
               && ! (full_file_name.length () == 3 && full_file_name[1] == ':'))
-            full_file_name.resize (full_file_name.length () - 1);
+            full_file_name.pop_back ();
 #endif
 
           const char *cname = full_file_name.c_str ();
 
           time_t sys_atime, sys_mtime, sys_ctime;
 
           int status
             = (follow_links
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -552,24 +552,18 @@ namespace octave
             do_getcwd ();
 
           if (current_directory.empty ())
             tmp = newdir;
           else
             tmp = do_make_absolute (newdir, current_directory);
 
           // Get rid of trailing directory separator.
-
-          size_t len = tmp.length ();
-
-          if (len > 1)
-            {
-              if (sys::file_ops::is_dir_sep (tmp[--len]))
-                tmp.resize (len);
-            }
+          if (tmp.length () > 1 && sys::file_ops::is_dir_sep (tmp.back ()))
+            tmp.pop_back ();
 
           if (! sys::chdir (tmp))
             {
               current_directory = tmp;
               retval = true;
             }
         }
       else
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -611,17 +611,16 @@ namespace octave
 
         if (fn)
           {
             if (count == n)
               {
                 // Famous last words:  Most large directories will not
                 // have more than a few hundred files, so we should not
                 // resize too many times even if the growth is linear...
-
                 n += 100;
                 retval.resize (n);
               }
 
             retval[count++] = fn;
 
             free (fn);
           }
diff --git a/liboctave/util/cmd-hist.cc b/liboctave/util/cmd-hist.cc
--- a/liboctave/util/cmd-hist.cc
+++ b/liboctave/util/cmd-hist.cc
@@ -191,19 +191,18 @@ namespace octave
     if (! do_ignoring_entries ())
       {
         if (s.empty ()
             || (s.length () == 1 && (s[0] == '\r' || s[0] == '\n')))
           return false;
 
         // Strip newline before adding to list
         std::string stmp = s;
-        int stmp_len = stmp.length ();
-        if (stmp[stmp_len - 1] == '\n')
-          stmp.resize (stmp_len - 1);
+        if (stmp.back () == '\n')
+          stmp.pop_back ();
 
         int added = ::octave_add_history (stmp.c_str (), history_control);
         lines_this_session += added;
         return (added > 0) ? true : false;
       }
     return false;
   }
 
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -130,17 +130,17 @@ init_sized_type_lookup_table (oct_data_c
 
 static std::string
 strip_spaces (const std::string& str)
 {
   size_t n = str.length ();
 
   size_t k = 0;
 
-  std::string s (n, ' ');
+  std::string s (n, '\0');
 
   for (size_t i = 0; i < n; i++)
     if (! isspace (str[i]))
       s[k++] = tolower (str[i]);
 
   s.resize (k);
 
   return s;
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -719,17 +719,17 @@ kpse_tilde_expand (const std::string& na
       if (home.empty ())
         home = ".";
 
       /* handle leading // */
       if (home.length () > 1 && IS_DIR_SEP (home[0]) && IS_DIR_SEP (home[1]))
         home = home.substr (1);
 
       /* If HOME ends in /, omit the / after ~user. */
-      if (name.length () > c && IS_DIR_SEP (home[home.length () - 1]))
+      if (name.length () > c && IS_DIR_SEP (home.back ()))
         c++;
 
       expansion = (name.length () > c ? home : home + name.substr (c));
     }
 #else /* not HAVE_PWD_H */
   expansion = name;
 #endif /* not HAVE_PWD_H */
 
@@ -777,19 +777,18 @@ kpse_expand_kpse_dot (const std::string&
       else if (elt_len == 1 && elt[0] == '.')
         ret += kpse_dot + ENV_SEP_STRING;
       else if (elt_len > 1 && elt[0] == '.' && IS_DIR_SEP (elt[1]))
         ret += kpse_dot + elt.substr (1) + ENV_SEP_STRING;
       else
         ret += kpse_dot + DIR_SEP_STRING + elt + ENV_SEP_STRING;
     }
 
-  int len = ret.length ();
-  if (len > 0)
-    ret.resize (len-1);
+  if (! ret.empty ())
+    ret.pop_back ();
 
   return ret;
 }
 
 /* Do brace expansion on ELT; then do variable and ~ expansion on each
    element of the result; then do brace expansion again, in case a
    variable definition contained braces (e.g., $TEXMF).  Return a
    string comprising all of the results separated by ENV_SEP_STRING.  */
@@ -813,17 +812,17 @@ kpse_brace_expand_element (const std::st
              must terminate.  (In practice, it's unlikely there will ever be
              more than one level of recursion.)  */
           x = kpse_brace_expand_element (x);
         }
 
       ret += x + ENV_SEP_STRING;
     }
 
-  ret.resize (ret.length () - 1);
+  ret.pop_back ();
 
   return ret;
 }
 
 /* Do brace expansion and call 'kpse_expand' on each element of the
    result; return the final expansion (always in fresh memory, even if
    no expansions were done).  */
 
@@ -844,19 +843,18 @@ kpse_brace_expand (const std::string& pa
     {
       std::string elt = *pi;
 
       /* Do brace expansion first, so tilde expansion happens in {~ka,~kb}.  */
       std::string expansion = kpse_brace_expand_element (elt);
       ret += expansion + ENV_SEP_STRING;
     }
 
-  size_t len = ret.length ();
-  if (len > 0)
-    ret.resize (len-1);
+  if (! ret.empty ())
+    ret.pop_back ();
 
   return kpse_expand_kpse_dot (ret);
 }
 
 /* Expand all special constructs in a path, and include only the actually
    existing directories in the result. */
 
 /* Do brace expansion and call 'kpse_expand' on each argument of the
@@ -919,18 +917,18 @@ kpse_path_expand (const std::string& pat
               ret += ENV_SEP_STRING;
               len++;
             }
 
           ret[len-1] = ENV_SEP;
         }
     }
 
-  if (len > 0)
-    ret.resize (len-1);
+  if (! ret.empty ())
+    ret.pop_back ();
 
   return ret;
 }
 
 /* braces.c -- code for doing word expansion in curly braces.  Taken from
    bash 1.14.5.  [And subsequently modified for kpatshea.]
 
    Copyright (C) 1987,1991 Free Software Foundation, Inc.  */
@@ -1209,17 +1207,17 @@ kpse_element_dir (const std::string& elt
   /* If given nothing, return nothing.  */
   if (elt.empty ())
     return ret;
 
   if (dir_p (elt))
     {
       ret = elt;
 
-      char last_char = ret[ret.length () - 1];
+      char last_char = ret.back ();
 
       if (! (IS_DIR_SEP (last_char) || IS_DEVICE_SEP (last_char)))
         ret += DIR_SEP_STRING;
     }
 
   return ret;
 }
 
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -188,20 +188,18 @@ octave_fgetl (FILE *f)
   return octave_fgetl (f, eof);
 }
 
 std::string
 octave_fgetl (FILE *f, bool& eof)
 {
   std::string retval = octave_fgets (f, eof);
 
-  size_t len = retval.length ();
-
-  if (retval[len-1] == '\n')
-    retval.resize (len-1);
+  if (! retval.empty () && retval.back () == '\n')
+    retval.pop_back ();
 
   return retval;
 }
 
 // Note that the caller is responsible for repositioning the stream on failure.
 
 template <typename T>
 T
