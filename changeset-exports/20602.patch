# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1444588751 -7200
#      Sun Oct 11 20:39:11 2015 +0200
# Node ID 756b052037fb9480866bcb1cb06a9fcf2ef863f8
# Parent  43822bda4f6539e0db0c6e7dee0180a1dc894865
avoid stepping beyond end of thspan in ode solvers

* scripts/ode/private/integrate_adaptive.m: make sure
  not to step beyound end of tspan.

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -61,60 +61,60 @@
 ## @seealso{integrate_const, integrate_n_steps}
 
 function solution = integrate_adaptive (stepper, order, func, tspan, x0, options)
 
   fixed_times = numel (tspan) > 2;
 
   t_new = t_old = t = tspan(1);
   x_new = x_old = x = x0(:);
-  
+
   ## get first initial timestep
   dt = starting_stepsize (order, func, t, x, options.AbsTol,
                           options.RelTol, options.vnormcontrol);
   dt = odeget (options, "InitialStep", dt, "fast_not_empty");
-  
+
   dir = odeget (options, "vdirection", [], "fast");
   dt = dir * min (abs (dt), options.MaxStep);
 
   options.comp = 0.0;
-  
+
   ## Factor multiplying the stepsize guess
   facmin = 0.8;
   facmax = 1.5;
   fac = 0.38^(1/(order+1));  # formula taken from Hairer
 
   ## Initialize the OutputFcn
   if (options.vhaveoutputfunction)
     if (options.vhaveoutputselection)
       solution.vretout = x(options.OutputSel,end);
-    else 
+    else
       solution.vretout = x;
     endif
     feval (options.OutputFcn, tspan, solution.vretout,
            "init", options.vfunarguments{:});
   endif
 
   ## Initialize the EventFcn
   if (options.vhaveeventfunction)
     odepkg_event_handle (options.Events, tspan(end), x,
                          "init", options.vfunarguments{:});
   endif
 
   if (options.vhavenonnegative)
     nn = options.NonNegative;
   endif
-  
+
   solution.vcntloop = 2;
   solution.vcntcycles = 1;
   solution.vcntsave = 2;
   solution.vunhandledtermination = true;
   ireject = 0;
 
-  k_vals = []; 
+  k_vals = [];
   iout = istep = 1;
   while (dir * t_old < dir * tspan(end))
 
     ## Compute integration step from t_old to t_new = t_old + dt
     [t_new, options.comp] = kahan (t_old, options.comp, dt);
     [t_new, x_new, x_est, new_k_vals] = ...
     stepper (func, t_old, x_old, dt, options, k_vals, t_new);
 
@@ -123,30 +123,30 @@ function solution = integrate_adaptive (
     if (options.vhavenonnegative)
       x(nn,end) = abs (x(nn,end));
       y(nn,end) = abs (y(nn,end));
       y_est(nn,end) = abs (y_est(nn,end));
     endif
 
     err = AbsRel_Norm (x_new, x_old, options.AbsTol, options.RelTol,
                        options.vnormcontrol, x_est);
-    
+
     ## Accepted solution only if err <= 1.0
     if (err <= 1)
 
       solution.vcntloop++;
       ireject = 0;
-            
+
       ## if output time steps are fixed
       if (fixed_times)
 
         t_caught = find ((tspan(iout:end) > t_old)
                          & (tspan(iout:end) <= t_new));
         t_caught = t_caught + iout - 1;
-        
+
         if (! isempty (t_caught))
           t(t_caught) = tspan(t_caught);
           iout = max (t_caught);
           x(:, t_caught) = ...
           ode_rk_interpolate (order, [t_old t_new], [x_old x_new],
                               tspan(t_caught), new_k_vals, dt,
                               options.vfunarguments{:});
 
@@ -163,17 +163,17 @@ function solution = integrate_adaptive (
               odepkg_event_handle (options.Events, t(id), x(:, id), [],
                                    options.vfunarguments{:});
               if (! isempty (solution.vevent{1})
                   && solution.vevent{1} == 1)
                 t(id) = solution.vevent{3}(end);
                 t = t(1:id);
                 x(:, id) = solution.vevent{4}(end, :).';
                 x = x(:,1:id);
-                solution.vunhandledtermination = false; 
+                solution.vunhandledtermination = false;
                 break_loop = true;
                 break;
               endif
             endfor
             if (break_loop)
               break;
             endif
           endif
@@ -193,34 +193,34 @@ function solution = integrate_adaptive (
                              vapproxvals, [], options.vfunarguments{:});
             if (vpltret)  # Leave main loop
               solution.vunhandledtermination = false;
               break;
             endif
           endif
 
         endif
-        
+
       else
 
         t(++istep)  = t_new;
         x(:, istep) = x_new;
         iout = istep;
 
         ## Call event handler on new timestep.
         ##  Stop integration if veventbreak is true
         if (options.vhaveeventfunction)
           solution.vevent = ...
           odepkg_event_handle (options.Events, t(istep), x(:, istep), [],
                                    options.vfunarguments{:});
               if (! isempty (solution.vevent{1})
                   && solution.vevent{1} == 1)
                 t(istep) = solution.vevent{3}(end);
                 x(:, istep) = solution.vevent{4}(end, :).';
-                solution.vunhandledtermination = false; 
+                solution.vunhandledtermination = false;
                 break;
               endif
         endif
 
         ## Call plot.  Stop integration if plot function
         ## returns true.
         if (options.vhaveoutputfunction)
           vcnt = options.Refine + 1;
@@ -243,17 +243,17 @@ function solution = integrate_adaptive (
 
       ## move to next time-step
       t_old = t_new;
       x_old = x_new;
       k_vals = new_k_vals;
 
       solution.vcntloop = solution.vcntloop + 1;
       vcntiter = 0;
-            
+
     else
 
       ireject++;
 
       ## Stop solving because in the last 5000 steps no successful valid
       ## value has been found
       if (ireject >= 5000)
         error (["integrate_adaptive: Solving has not been successful. ",
@@ -262,24 +262,28 @@ function solution = integrate_adaptive (
                 " This happened because the iterative integration loop",
                 " does not find a valid solution at this time",
                 " stamp.  Try to reduce the value of 'InitialStep' and/or",
                 " 'MaxStep' with the command 'odeset'.\n"],
                t_old, tspan(end));
       endif
 
     endif
-    
+
     ## Compute next timestep, formula taken from Hairer
     err += eps;    # avoid divisions by zero
     dt *= min (facmax, max (facmin, fac * (1 / err)^(1 / (order + 1))));
-    dt = dir * min (abs (dt), options.MaxStep);    
+    dt = dir * min (abs (dt), options.MaxStep);
+
+    ## make sure we don't go past tpan(end)
+    dt = dir * min (abs (dt), abs (tspan(end) - t_old));
 
   endwhile
-  
+
+
   ## Check if integration of the ode has been successful
   if (dir * t(end) < dir * tspan(end))
     if (solution.vunhandledtermination == true)
       error ("integrate_adaptive:unexpected_termination",
              [" Solving has not been successful.  The iterative",
               " integration loop exited at time t = %f",
               " before endpoint at tend = %f was reached.  This may",
               " happen if the stepsize grows too small. ",
@@ -295,11 +299,11 @@ function solution = integrate_adaptive (
                 " 'true'.\n"],
                t(end), tspan(end));
     endif
   endif
 
   ## Set up return structure
   solution.t = t(:);
   solution.x = x.';
-  
+
 endfunction
 
