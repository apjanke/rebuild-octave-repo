# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267182348 -3600
#      Fri Feb 26 12:05:48 2010 +0100
# Node ID 96ed7c629bbd50982141675fc6df837cfeb63506
# Parent  a0728e81ed25e5ad1878d11137b0ae4bd52926ce
remove dangerous pointer-acquiring Array ctors

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -56,21 +56,27 @@ protected:
   class ArrayRep
   {
   public:
 
     T *data;
     octave_idx_type len;
     int count;
 
-    ArrayRep (T *d, octave_idx_type l, bool copy = false) 
-      : data (copy ? no_ctor_new<T> (l) : d), len (l), count (1) 
+    ArrayRep (T *d, octave_idx_type l) 
+      : data (no_ctor_new<T> (l)), len (l), count (1) 
         { 
-          if (copy)
-            copy_or_memcpy (l, d, data);
+          copy_or_memcpy (l, d, data);
+        }
+
+    template <class U>
+    ArrayRep (U *d, octave_idx_type l) 
+      : data (no_ctor_new<T> (l)), len (l), count (1) 
+        { 
+          std::copy (d, d+l, data);
         }
 
     ArrayRep (void) : data (0), len (0), count (1) { }
 
     explicit ArrayRep (octave_idx_type n) : data (no_ctor_new<T> (n)), len (n), count (1) { }
 
     explicit ArrayRep (octave_idx_type n, const T& val)
       : data (no_ctor_new<T> (n)), len (n), count (1)
@@ -99,17 +105,17 @@ protected:
 
 public:
 
   void make_unique (void)
     {
       if (rep->count > 1)
         {
           --rep->count;
-          rep = new ArrayRep (slice_data, slice_len, true);
+          rep = new ArrayRep (slice_data, slice_len);
           slice_data = rep->data;
         }
     }
 
   typedef T element_type;
 
   typedef typename ref_param<T>::type crefT;
 
@@ -127,32 +133,16 @@ protected:
   // actual portion of the data referenced by this Array<T> object. This allows
   // to make shallow copies not only of a whole array, but also of contiguous
   // subranges. Every time rep is directly manipulated, slice_data and slice_len
   // need to be properly updated.
 
   T* slice_data;
   octave_idx_type slice_len;
 
-  Array (T *d, octave_idx_type m, octave_idx_type n)
-    : rep (new typename Array<T>::ArrayRep (d, m*n)), dimensions (m, n) 
-    { 
-      slice_data = rep->data;
-      slice_len = rep->len;
-    }
-
-  Array (T *d, const dim_vector& dv)
-    : rep (new typename Array<T>::ArrayRep (d, dv.numel ())),
-      dimensions (dv) 
-    { 
-      slice_data = rep->data;
-      slice_len = rep->len;
-      dimensions.chop_trailing_singletons ();
-    }
-
   // slice constructor
   Array (const Array<T>& a, const dim_vector& dv,
          octave_idx_type l, octave_idx_type u)
     : rep(a.rep), dimensions (dv)
     {
       rep->count++;
       slice_data = a.slice_data + l;
       slice_len = u - l;
@@ -164,28 +154,16 @@ private:
   typename Array<T>::ArrayRep *nil_rep (void) const
     {
       static typename Array<T>::ArrayRep *nr
         = new typename Array<T>::ArrayRep ();
 
       return nr;
     }
 
-  template <class U>
-  T *
-  coerce (const U *a, octave_idx_type len)
-  {
-    T *retval = no_ctor_new<T> (len);
-
-    for (octave_idx_type i = 0; i < len; i++)
-      retval[i] = T (a[i]);
-
-    return retval;
-  }
-
 public:
 
   // Empty ctor (0x0).
 
   Array (void)
     : rep (nil_rep ()), dimensions () 
     { 
       rep->count++; 
@@ -244,17 +222,17 @@ public:
   // Reshape constructor.
   Array (const Array<T>& a, const dim_vector& dv);
 
   Array (const Array<T>& a, octave_idx_type nr, octave_idx_type nc);
 
   // Type conversion case.
   template <class U>
   Array (const Array<U>& a)
-    : rep (new typename Array<T>::ArrayRep (coerce (a.data (), a.length ()), a.length ())),
+    : rep (new typename Array<T>::ArrayRep (a.data (), a.length ())),
       dimensions (a.dims ())
     {
       slice_data = rep->data;
       slice_len = rep->len;
     }
 
   // No type conversion case.
   Array (const Array<T>& a)
@@ -611,17 +589,17 @@ public:
 
   // This is just a special case for idx = [r c 0 ...]
   Array<T>& insert (const Array<T>& a, octave_idx_type r, octave_idx_type c);
 
   void maybe_economize (void)
     {
       if (rep->count == 1 && slice_len != rep->len)
         {
-          ArrayRep *new_rep = new ArrayRep (slice_data, slice_len, true);
+          ArrayRep *new_rep = new ArrayRep (slice_data, slice_len);
           delete rep;
           rep = new_rep;
           slice_data = rep->data;
         }
     }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -34,20 +34,16 @@ along with Octave; see the file COPYING.
 class idx_vector;
 
 // Three dimensional array class.
 
 template <class T>
 class
 Array3 : public Array<T>
 {
-protected:
-
-  Array3 (T *d, octave_idx_type r, octave_idx_type c, octave_idx_type p) : Array<T> (d, dim_vector (r, c, p)) { }
-
 public:
 
   Array3 (void) : Array<T> (dim_vector (0, 0, 0)) { }
 
   Array3 (octave_idx_type r, octave_idx_type c, octave_idx_type p) : Array<T> (dim_vector (r, c, p)) { }
 
   Array3 (octave_idx_type r, octave_idx_type c, octave_idx_type p, const T& val)
     : Array<T> (dim_vector (r, c, p), val) { }
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -129,16 +129,13 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, ComplexColumnVector& a);
 
   void resize (octave_idx_type n, const Complex& rfv = Array<Complex>::resize_fill_value ())
     { Array<Complex>::resize (n, 1, rfv); }
 
   void clear (octave_idx_type n)
     { Array<Complex>::clear (n, 1); }
 
-private:
-
-  ComplexColumnVector (Complex *d, octave_idx_type l) : MArray<Complex> (d, l, 1) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, ComplexColumnVector, Complex)
 
 #endif
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -126,20 +126,16 @@ public:
 
   ComplexDET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const ComplexDiagMatrix& a);
 
-private:
-
-  ComplexDiagMatrix (Complex *d, octave_idx_type nr, octave_idx_type nc)
-    : MDiagArray2<Complex> (d, nr, nc) { }
 };
 
 OCTAVE_API ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API ComplexDiagMatrix
 operator * (const ComplexDiagMatrix& a, const ComplexDiagMatrix& b);
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -368,19 +368,16 @@ public:
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ComplexMatrix& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, ComplexMatrix& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
-private:
-
-  ComplexMatrix (Complex *d, octave_idx_type r, octave_idx_type c) : MArray<Complex> (d, r, c) { }
 };
 
 extern OCTAVE_API ComplexMatrix conj (const ComplexMatrix& a);
 
 // column vector by row vector -> matrix operations
 
 extern OCTAVE_API ComplexMatrix
 operator * (const ColumnVector& a, const ComplexRowVector& b);
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -143,20 +143,16 @@ public:
   ComplexNDArray diag (octave_idx_type k = 0) const;
 
   ComplexNDArray& changesign (void) 
     { 
       MArray<Complex>::changesign (); 
       return *this; 
     }
 
-private:
-
-  ComplexNDArray (Complex *d, const dim_vector& dv)
-    : MArray<Complex> (d, dv) { }
 };
 
 extern OCTAVE_API ComplexNDArray conj (const ComplexNDArray& a);
 
 MINMAX_DECLS (ComplexNDArray, Complex, OCTAVE_API)
 
 NDS_CMP_OP_DECLS (ComplexNDArray, Complex, OCTAVE_API)
 NDS_BOOL_OP_DECLS (ComplexNDArray, Complex, OCTAVE_API)
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -109,19 +109,16 @@ public:
   friend std::istream& operator >> (std::istream& is, ComplexRowVector& a);
 
   void resize (octave_idx_type n, const Complex& rfv = Array<Complex>::resize_fill_value ())
     { Array<Complex>::resize (1, n, rfv); }
 
   void clear (octave_idx_type n)
     { Array<Complex>::clear (1, n); }
 
-private:
-
-  ComplexRowVector (Complex *d, octave_idx_type l) : MArray<Complex> (d, 1, l) { }
 };
 
 // row vector by column vector -> scalar
 
 Complex operator * (const ComplexRowVector& a, const ColumnVector& b);
 
 Complex operator * (const ComplexRowVector& a, const ComplexColumnVector& b);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,46 @@
+2010-02-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array<T>::ArrayRep): Simplify copy constructor. Add
+	conversion constructor.
+	(Array<T>): Remove pointer acquiring ctors.
+	(Array<T>::maybe_economize): Update.
+	(Array<T>::make_unique): Update.
+	* Array.cc (Array<T>::fill): Update.
+
+	* MArray.h (MArray<T>::MArray<T> (T *, ...)): Remove.
+	* DiagArray2.h (DiagArray2<T>::DiagArray2<T> (T *, ...)): Remove.
+	* MDiagArray2.h (MDiagArray2<T>::MDiagArray2<T> (T *, ...)): Remove.
+	* Array3.h (Array3<T>::Array3<T> (T *, ...)): Remove.
+
+	* dColVector.h (ColumnVector::ColumnVector (T *, ...)): Remove.
+	* fColVector.h (FloatColumnVector::FloatColumnVector (T *, ...)): Remove.
+	* CColVector.h (ComplexColumnVector::ComplexColumnVector (T *, ...)): Remove.
+	* fCColVector.h (FloatComplexColumnVector::FloatComplexColumnVector (T *, ...)): Remove.
+
+	* dRowVector.h (RowVector::RowVector (T *, ...)): Remove.
+	* fRowVector.h (FloatRowVector::FloatRowVector (T *, ...)): Remove.
+	* CRowVector.h (ComplexRowVector::ComplexRowVector (T *, ...)): Remove.
+	* fCRowVector.h (FloatComplexRowVector::FloatComplexRowVector (T *, ...)): Remove.
+
+	* dMatrix.h (Matrix::Matrix (T *, ...)): Remove.
+	* fMatrix.h (FloatMatrix::FloatMatrix (T *, ...)): Remove.
+	* CMatrix.h (ComplexMatrix::ComplexMatrix (T *, ...)): Remove.
+	* fCMatrix.h (FloatComplexMatrix::FloatComplexMatrix (T *, ...)): Remove.
+	* boolMatrix.h (boolMatrix::boolMatrix (T *, ...)): Remove.
+	* chMatrix.h (charMatrix::charMatrix (T *, ...)): Remove.
+
+	* dNDArray.h (NDArray::NDArray (T *, ...)): Remove.
+	* fNDArray.h (FloatNDArray::FloatNDArray (T *, ...)): Remove.
+	* CNDArray.h (ComplexNDArray::ComplexNDArray (T *, ...)): Remove.
+	* fCNDArray.h (FloatComplexNDArray::FloatComplexNDArray (T *, ...)): Remove.
+	* boolNDArray.h (boolNDArray::boolNDArray (T *, ...)): Remove.
+	* chNDArray.h (charNDArray::charNDArray (T *, ...)): Remove.
+
 2010-02-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DiagArray2.h (DiagArray2): Clean up ctors. Remove Proxy class.
 	Remove non-const two-index elem methods.
 	* DiagArray2.cc: Update.
 	* MDiagArray2.h: Update.
 
 	* dDiagArray2.h: Update.
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -36,19 +36,16 @@ along with Octave; see the file COPYING.
 
 template <class T>
 class
 DiagArray2 : protected Array<T>
 {
 protected:
   octave_idx_type d1, d2;
 
-  DiagArray2 (T *d, octave_idx_type r, octave_idx_type c) 
-    : Array<T> (d, std::min (r, c), 1), d1 (r), d2 (c) { }
-
 public:
 
   using Array<T>::element_type;
 
   DiagArray2 (void) 
     : Array<T> (), d1 (0), d2 (0) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c) 
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -34,21 +34,16 @@ along with Octave; see the file COPYING.
 #include "MArray-decl.h"
 
 MARRAY_OPS_FORWARD_DECLS (MArray, )
 
 template <class T>
 class
 MArray : public Array<T>
 {
-protected:
-
-  MArray (T *d, octave_idx_type m, octave_idx_type n) : Array<T> (d, m, n) { }
-  MArray (T *d, const dim_vector& dv) : Array<T> (d, dv) { }
-
 public:
   
   MArray (void) : Array<T> () {}
   
   explicit MArray (octave_idx_type m, octave_idx_type n) 
     : Array<T> (m, n) { }
 
   explicit MArray (octave_idx_type m, octave_idx_type n, const T& val) 
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -35,20 +35,16 @@ along with Octave; see the file COPYING.
 #include "MArray-decl.h"
 
 MDIAGARRAY2_OPS_FORWARD_DECLS (MDiagArray2, )
 
 template <class T>
 class
 MDiagArray2 : public DiagArray2<T>
 {
-protected:
-
-  MDiagArray2 (T *d, octave_idx_type r, octave_idx_type c) : DiagArray2<T> (d, r, c) { }
-
 public:
   
   MDiagArray2 (void) : DiagArray2<T> () { }
 
   MDiagArray2 (octave_idx_type r, octave_idx_type c) : DiagArray2<T> (r, c) { }
 
   MDiagArray2 (octave_idx_type r, octave_idx_type c, const T& val) : DiagArray2<T> (r, c, val) { }
 
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -73,19 +73,16 @@ public:
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
   static bool resize_fill_value (void) { return false; }
 
-private:
-
-  boolMatrix (bool *b, octave_idx_type r, octave_idx_type c) : Array<bool> (b, r, c) { }
 };
 
 MM_BOOL_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 MS_BOOL_OP_DECLS (boolMatrix, bool, OCTAVE_API)
 SM_BOOL_OP_DECLS (bool, boolMatrix, OCTAVE_API)
 MM_CMP_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 
 #endif
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -98,19 +98,16 @@ public:
 
   static bool resize_fill_value (void) { return false; }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
   boolNDArray diag (octave_idx_type k = 0) const;
 
-private:
-
-  boolNDArray (bool *d, dim_vector& dv) : Array<bool> (d, dv) { }
 };
 
 NDND_BOOL_OP_DECLS (boolNDArray, boolNDArray, OCTAVE_API)
 NDND_CMP_OP_DECLS (boolNDArray, boolNDArray, OCTAVE_API)
 
 NDS_BOOL_OP_DECLS (boolNDArray, bool, OCTAVE_API)
 NDS_CMP_OP_DECLS (boolNDArray, bool, OCTAVE_API)
 
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -83,19 +83,16 @@ public:
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
   static char resize_fill_value (void) { return '\0'; }
 
-private:
-
-  charMatrix (char *ch, octave_idx_type r, octave_idx_type c) : Array<char> (ch, r, c) { }
 };
 
 MS_CMP_OP_DECLS (charMatrix, char, OCTAVE_API)
 MS_BOOL_OP_DECLS (charMatrix, char, OCTAVE_API)
 
 SM_CMP_OP_DECLS (char, charMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (char, charMatrix, OCTAVE_API)
 
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -91,19 +91,16 @@ public:
 
   // friend std::ostream& operator << (std::ostream& os, const charNDArray& a);
   // friend std::istream& operator >> (std::istream& is, charNDArray& a);
 
   static char resize_fill_value (void) { return '\0'; }
 
   charNDArray diag (octave_idx_type k = 0) const;
 
-private:
-
-  charNDArray (char *d, dim_vector& dv) : Array<char> (d, dv) { }
 };
 
 NDS_CMP_OP_DECLS (charNDArray, char, OCTAVE_API)
 NDS_BOOL_OP_DECLS (charNDArray, char, OCTAVE_API)
 
 SND_CMP_OP_DECLS (char, charNDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (char, charNDArray, OCTAVE_API)
 
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -98,19 +98,16 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, ColumnVector& a);
 
   void resize (octave_idx_type n, const double& rfv = Array<double>::resize_fill_value ())
     { Array<double>::resize (n, 1, rfv); }
 
   void clear (octave_idx_type n)
     { Array<double>::clear (n, 1); }
 
-private:
-
-  ColumnVector (double *d, octave_idx_type l) : MArray<double> (d, l, 1) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API ColumnVector real (const ComplexColumnVector& a);
 extern OCTAVE_API ColumnVector imag (const ComplexColumnVector& a);
 
 MARRAY_FORWARD_DEFS (MArray, ColumnVector, double)
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -104,19 +104,16 @@ public:
 
   DET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
 
-private:
-
-  DiagMatrix (double *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<double> (d, nr, nc) { }
 };
 
 OCTAVE_API DiagMatrix real (const ComplexDiagMatrix& a);
 OCTAVE_API DiagMatrix imag (const ComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API DiagMatrix
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -321,19 +321,16 @@ public:
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, Matrix& a);
 
   static double resize_fill_value (void) { return 0; }
 
-private:
-
-  Matrix (double *d, octave_idx_type r, octave_idx_type c) : MArray<double> (d, r, c) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API Matrix real (const ComplexMatrix& a);
 extern OCTAVE_API Matrix imag (const ComplexMatrix& a);
 
 // column vector by row vector -> matrix operations
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -155,19 +155,16 @@ public:
   NDArray diag (octave_idx_type k = 0) const;
 
   NDArray& changesign (void) 
     { 
       MArray<double>::changesign (); 
       return *this; 
     }
 
-private:
-
-  NDArray (double *d, const dim_vector& dv) : MArray<double> (d, dv) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API NDArray real (const ComplexNDArray& a);
 extern OCTAVE_API NDArray imag (const ComplexNDArray& a);
 
 MINMAX_DECLS (NDArray, double, OCTAVE_API)
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -91,19 +91,16 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, RowVector& a);
 
   void resize (octave_idx_type n, const double& rfv = Array<double>::resize_fill_value ())
     { Array<double>::resize (1, n, rfv); }
 
   void clear (octave_idx_type n)
     { Array<double>::clear (1, n); }
 
-private:
-
-  RowVector (double *d, octave_idx_type l) : MArray<double> (d, 1, l) { }
 };
 
 // row vector by column vector -> scalar
 
 double OCTAVE_API operator * (const RowVector& a, const ColumnVector& b);
 
 Complex OCTAVE_API operator * (const RowVector& a, const ComplexColumnVector& b);
 
diff --git a/liboctave/fCColVector.h b/liboctave/fCColVector.h
--- a/liboctave/fCColVector.h
+++ b/liboctave/fCColVector.h
@@ -129,16 +129,13 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatComplexColumnVector& a);
 
   void resize (octave_idx_type n, const FloatComplex& rfv = Array<FloatComplex>::resize_fill_value ())
     { Array<FloatComplex>::resize (n, 1, rfv); }
 
   void clear (octave_idx_type n)
     { Array<FloatComplex>::clear (n, 1); }
 
-private:
-
-  FloatComplexColumnVector (FloatComplex *d, octave_idx_type l) : MArray<FloatComplex> (d, l, 1) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, FloatComplexColumnVector, FloatComplex)
 
 #endif
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -126,20 +126,16 @@ public:
 
   FloatComplexDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const FloatComplexDiagMatrix& a);
 
-private:
-
-  FloatComplexDiagMatrix (FloatComplex *d, octave_idx_type nr, octave_idx_type nc)
-    : MDiagArray2<FloatComplex> (d, nr, nc) { }
 };
 
 OCTAVE_API FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatComplexDiagMatrix& a, const FloatComplexDiagMatrix& b);
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -368,19 +368,16 @@ public:
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatComplexMatrix& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatComplexMatrix& a);
 
   static FloatComplex resize_fill_value (void) { return FloatComplex (0.0, 0.0); }
 
-private:
-
-  FloatComplexMatrix (FloatComplex *d, octave_idx_type r, octave_idx_type c) : MArray<FloatComplex> (d, r, c) { }
 };
 
 extern OCTAVE_API FloatComplexMatrix conj (const FloatComplexMatrix& a);
 
 // column vector by row vector -> matrix operations
 
 extern OCTAVE_API FloatComplexMatrix
 operator * (const FloatColumnVector& a, const FloatComplexRowVector& b);
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -143,20 +143,16 @@ public:
   FloatComplexNDArray diag (octave_idx_type k = 0) const;
 
   FloatComplexNDArray& changesign (void) 
     { 
       MArray<FloatComplex>::changesign (); 
       return *this; 
     }
 
-private:
-
-  FloatComplexNDArray (FloatComplex *d, const dim_vector& dv)
-    : MArray<FloatComplex> (d, dv) { }
 };
 
 extern OCTAVE_API FloatComplexNDArray conj (const FloatComplexNDArray& a);
 
 MINMAX_DECLS (FloatComplexNDArray, FloatComplex, OCTAVE_API)
 
 NDS_CMP_OP_DECLS (FloatComplexNDArray, FloatComplex, OCTAVE_API)
 NDS_BOOL_OP_DECLS (FloatComplexNDArray, FloatComplex, OCTAVE_API)
diff --git a/liboctave/fCRowVector.h b/liboctave/fCRowVector.h
--- a/liboctave/fCRowVector.h
+++ b/liboctave/fCRowVector.h
@@ -110,19 +110,16 @@ public:
   friend std::istream& operator >> (std::istream& is, FloatComplexRowVector& a);
 
   void resize (octave_idx_type n, const FloatComplex& rfv = Array<FloatComplex>::resize_fill_value ())
     { Array<FloatComplex>::resize (1, n, rfv); }
 
   void clear (octave_idx_type n)
     { Array<FloatComplex>::clear (1, n); }
 
-private:
-
-  FloatComplexRowVector (FloatComplex *d, octave_idx_type l) : MArray<FloatComplex> (d, 1, l) { }
 };
 
 // row vector by column vector -> scalar
 
 FloatComplex operator * (const FloatComplexRowVector& a, const ColumnVector& b);
 
 FloatComplex operator * (const FloatComplexRowVector& a, const FloatComplexColumnVector& b);
 
diff --git a/liboctave/fColVector.h b/liboctave/fColVector.h
--- a/liboctave/fColVector.h
+++ b/liboctave/fColVector.h
@@ -98,19 +98,16 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatColumnVector& a);
 
   void resize (octave_idx_type n, const float& rfv = Array<float>::resize_fill_value ())
     { Array<float>::resize (n, 1, rfv); }
 
   void clear (octave_idx_type n)
     { Array<float>::clear (n, 1); }
 
-private:
-
-  FloatColumnVector (float *d, octave_idx_type l) : MArray<float> (d, l, 1) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API FloatColumnVector real (const FloatComplexColumnVector& a);
 extern OCTAVE_API FloatColumnVector imag (const FloatComplexColumnVector& a);
 
 MARRAY_FORWARD_DEFS (MArray, FloatColumnVector, float)
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -104,19 +104,16 @@ public:
 
   FloatDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatDiagMatrix& a);
 
-private:
-
-  FloatDiagMatrix (float *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<float> (d, nr, nc) { }
 };
 
 OCTAVE_API FloatDiagMatrix real (const FloatComplexDiagMatrix& a);
 OCTAVE_API FloatDiagMatrix imag (const FloatComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API FloatDiagMatrix
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -321,19 +321,16 @@ public:
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatMatrix& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatMatrix& a);
 
   static float resize_fill_value (void) { return 0; }
 
-private:
-
-  FloatMatrix (float *d, octave_idx_type r, octave_idx_type c) : MArray<float> (d, r, c) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API FloatMatrix real (const FloatComplexMatrix& a);
 extern OCTAVE_API FloatMatrix imag (const FloatComplexMatrix& a);
 
 // column vector by row vector -> matrix operations
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -152,19 +152,16 @@ public:
   FloatNDArray diag (octave_idx_type k = 0) const;
 
   FloatNDArray& changesign (void) 
     { 
       MArray<float>::changesign (); 
       return *this; 
     }
 
-private:
-
-  FloatNDArray (float *d, const dim_vector& dv) : MArray<float> (d, dv) { }
 };
 
 // Publish externally used friend functions.
 
 extern OCTAVE_API FloatNDArray real (const FloatComplexNDArray& a);
 extern OCTAVE_API FloatNDArray imag (const FloatComplexNDArray& a);
 
 MINMAX_DECLS (FloatNDArray, float, OCTAVE_API)
diff --git a/liboctave/fRowVector.h b/liboctave/fRowVector.h
--- a/liboctave/fRowVector.h
+++ b/liboctave/fRowVector.h
@@ -91,19 +91,16 @@ public:
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatRowVector& a);
 
   void resize (octave_idx_type n, const float& rfv = Array<float>::resize_fill_value ())
     { Array<float>::resize (1, n, rfv); }
 
   void clear (octave_idx_type n)
     { Array<float>::clear (1, n); }
 
-private:
-
-  FloatRowVector (float *d, octave_idx_type l) : MArray<float> (d, 1, l) { }
 };
 
 // row vector by column vector -> scalar
 
 float OCTAVE_API operator * (const FloatRowVector& a, const FloatColumnVector& b);
 
 Complex OCTAVE_API operator * (const FloatRowVector& a, const ComplexColumnVector& b);
 
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -111,19 +111,16 @@ public:
                                const dim_vector& dimensions,
                                int start_dimension = 0);
 
   static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
                             const dim_vector& dimensions);
 
   static T resize_fill_value (void) { return 0; }
 
-protected:
-
-  intNDArray (T *d, dim_vector& dv) : MArray<T> (d, dv) { }
 };
 
 // i/o
 
 template <class T>
 std::ostream& operator << (std::ostream& os, const intNDArray<T>& a);
 
 template <class T>
