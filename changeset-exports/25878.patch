# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1536787180 -7200
#      Wed Sep 12 23:19:40 2018 +0200
# Node ID bb4af245dff79d6d52bafdf26578506158cae198
# Parent  eba6d823cf62b9d03398c5797d799eb8b74dcc32
Use uimenu objects for default menus in Qt toolkit

* Menu.cc (Menu::Menu): use QAction name to tag wether a menu is a builtin
  or a custom menu based on the uimenu "tag" property.

* Figure.cc (hasUiMenuChildren): Remove
  (Figure::editCopy,Figure::fileCloseFigure,Figure::fileSaveFigureAs,
   Figure::copy_figure_callback, Figure::save_figure_callback): Remove
  (Figure::createFigureToolBarAndMenuBar): Don't create menus not backed by
  uimenu objects
  (Figure::showMenuBar): Make use of the QAction name for menu triage. Use the
  difference between previous and current menubar height to adjust the figure
  position.

* __add_default_menu__.m: Create default menus for Qt aswell. Change actions
  in the "Edit" menu to "Tools" menu. Add a few actions in "Edit" menu. Rename
  uimenu handles to hui as is conventional in Octave code.

* clf.m: With "reset" option, don't unnecessarily delete/recreate default menus.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -77,35 +77,16 @@ namespace QtHandles
         if (go && (go.isa ("uicontrol") || go.isa ("uipanel")
                    || go.isa ("uibuttongroup")))
           return true;
       }
 
     return false;
   }
 
-  static bool
-  hasUiMenuChildren (const figure::properties& fp)
-  {
-    gh_manager::auto_lock lock;
-
-    Matrix kids = fp.get_all_children ();
-
-    for (int i = 0; i < kids.numel (); i++)
-      {
-        graphics_object go (gh_manager::get_object (kids(i)));
-
-        if (go && go.isa ("uimenu") &&
-            go.get ("visible").string_value () == "on")
-          return true;
-      }
-
-    return false;
-  }
-
   static QRect
   boundingBoxToRect (const Matrix& bb)
   {
     QRect r;
 
     if (bb.numel () == 4)
       {
         r = QRect (octave::math::round (bb(0)), octave::math::round (bb(1)),
@@ -149,19 +130,17 @@ namespace QtHandles
         boffset += m_statusBar->sizeHint ().height ();
       }
     else
       {
         m_figureToolBar->hide ();
         m_statusBar->hide ();
       }
 
-    if (fp.menubar_is ("figure") || hasUiMenuChildren (fp))
-      toffset += m_menuBar->sizeHint ().height ();
-    else
+    if (! fp.menubar_is ("figure"))
       m_menuBar->hide ();
 
     m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
     m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
 
     win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
 
     // Enable mouse tracking unconditionally
@@ -314,37 +293,16 @@ namespace QtHandles
              this, SLOT (toggleGrid (void)));
 
     QAction *auto_axes = m_figureToolBar->addAction (tr ("Autoscale"));
     connect (auto_axes, SIGNAL (triggered (void)),
              this, SLOT (autoAxes (void)));
 
     m_menuBar = new MenuBar (win);
     win->setMenuBar (m_menuBar);
-
-    QMenu *fileMenu = m_menuBar->addMenu (tr ("&File"));
-    fileMenu->menuAction ()->setObjectName ("builtinMenu");
-    fileMenu->addAction (tr ("&Save"), this, SLOT (fileSaveFigure (bool)));
-    fileMenu->addAction (tr ("Save &As"), this, SLOT (fileSaveFigureAs (void)));
-    fileMenu->addSeparator ();
-    fileMenu->addAction (tr ("&Close Figure"), this,
-                         SLOT (fileCloseFigure (void)), Qt::CTRL | Qt::Key_W);
-
-    QMenu *editMenu = m_menuBar->addMenu (tr ("&Edit"));
-    editMenu->menuAction ()->setObjectName ("builtinMenu");
-    editMenu->addAction (tr ("Cop&y"), this, SLOT (editCopy (bool)),
-                         Qt::CTRL | Qt::Key_C);
-    editMenu->addSeparator ();
-    editMenu->addActions (m_mouseModeGroup->actions ());
-
-    QMenu *helpMenu = m_menuBar->addMenu (tr ("&Help"));
-    helpMenu->menuAction ()->setObjectName ("builtinMenu");
-    helpMenu->addAction (tr ("About Octave"), this,
-                         SLOT (helpAboutOctave (void)));
-
     m_menuBar->addReceiver (this);
   }
 
   void
   Figure::updateFigureToolBarAndMenuBar (void)
   {
     if (m_mouseModeGroup)
       {
@@ -576,45 +534,46 @@ namespace QtHandles
         updateBoundingBox (false);
       }
   }
 
   void
   Figure::showMenuBar (bool visible, int h1)
   {
     // Get the height before and after toggling the visibility of builtin menus
-    if (h1 <= 0)
+    if (h1 < 0)
       h1 = m_menuBar->sizeHint ().height ();
 
+    // Keep the menubar visible if it contains custom menus
+    bool keep_visible = visible;
     foreach (QAction *a, m_menuBar->actions ())
       if (a->objectName () == "builtinMenu")
         a->setVisible (visible);
+      else if ((a->objectName () == "customMenu") && a->isVisible ())
+        keep_visible = true;
+    
+    visible = keep_visible;
 
     int h2 = m_menuBar->sizeHint ().height ();
-
-    // Keep the menubar visible if it contains custom menus
-    if (! visible)
-      visible = hasUiMenuChildren (properties<figure> ());
-
-    if ((m_menuBar->isVisible () && ! visible)
+    
+    if (h1 != h2 || (m_menuBar->isVisible () && ! visible)
         || (! m_menuBar->isVisible () && visible))
       {
-        int dy = qMax (h1, h2);
+        int dy = h2 - h1;
+
         QRect r = qWidget<QWidget> ()->geometry ();
 
-        if (! visible)
-          r.adjust (0, dy, 0, 0);
-        else
-          r.adjust (0, -dy, 0, 0);
+        r.adjust (0, -dy, 0, 0);
 
         m_blockUpdates = true;
         qWidget<QWidget> ()->setGeometry (r);
         m_menuBar->setVisible (visible);
         m_blockUpdates = false;
       }
+
     updateBoundingBox (false);
   }
 
   void
   Figure::updateMenuBar (int height)
   {
     gh_manager::auto_lock lock;
     graphics_object go = object ();
@@ -751,28 +710,20 @@ namespace QtHandles
         if (obj == m_container)
           {
             // Do nothing...
           }
         else if (obj == m_menuBar)
           {
             switch (xevent->type ())
               {
+              case QEvent::ActionAdded:
               case QEvent::ActionChanged:
-                m_previousHeight = m_menuBar->sizeHint ().height ();
-                break;
               case QEvent::ActionRemoved:
-                {
-                  QAction *a = dynamic_cast<QActionEvent *> (xevent)->action ();
-
-                  if (! a->isSeparator ()
-                      && a->objectName () != "builtinMenu")
-                    updateMenuBar ();
-                }
-                break;
+                m_previousHeight = m_menuBar->sizeHint ().height ();
 
               default:
                 break;
               }
           }
         else
           {
             switch (xevent->type ())
@@ -827,36 +778,27 @@ namespace QtHandles
               default:
                 break;
               }
           }
         else if (watched == m_menuBar)
           {
             switch (xevent->type ())
               {
+              case QEvent::ActionAdded:
               case QEvent::ActionChanged:
+              case QEvent::ActionRemoved:
                 // The menubar may have been resized if no action is visible
                 {
                   QAction *a = dynamic_cast<QActionEvent *> (xevent)->action ();
                   if (m_menuBar->sizeHint ().height () != m_previousHeight
-                      && a->objectName () != "builtinMenu"
                       && ! a->isSeparator ())
                     updateMenuBar (m_previousHeight);
                 }
                 break;
-              case QEvent::ActionAdded:
-                {
-                  QAction *a = dynamic_cast<QActionEvent *> (xevent)->action ();
-
-                  if (! a->isSeparator ()
-                      && a->objectName () != "builtinMenu"
-                      && a->isVisible ())
-                    updateMenuBar ();
-                }
-                break;
 
               default:
                 break;
               }
           }
         else
           {
             switch (xevent->type ())
@@ -873,26 +815,16 @@ namespace QtHandles
               default:
                 break;
               }
           }
       }
   }
 
   void
-  Figure::helpAboutOctave (void)
-  {
-    std::string message
-      = octave_name_version_copyright_copying_warranty_and_bugs (true);
-
-    QMessageBox::about (qWidget<QMainWindow> (), tr ("About Octave"),
-                        QString::fromStdString (message));
-  }
-
-  void
   Figure::setMouseMode (MouseMode mode)
   {
     if (m_blockUpdates)
       return;
 
     gh_manager::auto_lock lock;
 
     figure::properties& fp = properties<figure> ();
@@ -901,119 +833,16 @@ namespace QtHandles
 
     Canvas *canvas = m_container->canvas (m_handle);
 
     if (canvas)
       canvas->setCursor (mode);
   }
 
   void
-  Figure::fileSaveFigure (bool prompt)
-  {
-    QString file = fileName ();
-
-    if (file.isEmpty ())
-      {
-        prompt = true;
-
-        file = "untitled.ofig";
-      }
-
-    if (prompt || file.isEmpty ())
-      {
-        QFileInfo finfo (file);
-
-        file = QFileDialog::getSaveFileName (qWidget<FigureWindow> (),
-                                             tr ("Save Figure As"),
-                                             finfo.absoluteFilePath (),
-                                             tr ("Octave Figure File (*.ofig);;Vector Image Formats (*.eps *.epsc *.pdf *.svg *.ps *.tikz);;Bitmap Image Formats (*.gif *.jpg *.png *.tiff)"),
-                                             nullptr,
-                                             QFileDialog::DontUseNativeDialog);
-      }
-
-    if (! file.isEmpty ())
-      {
-        QFileInfo finfo (file);
-
-        setFileName (finfo.absoluteFilePath ());
-
-        octave_link::post_event (this, &Figure::save_figure_callback,
-                                 file.toStdString ());
-      }
-  }
-
-  void
-  Figure::save_figure_callback (const std::string& file)
-  {
-    figure::properties& fp = properties<figure> ();
-    octave_value fnum = fp.get___myhandle__ ().as_octave_value ();
-
-    size_t flen = file.length ();
-
-    if (flen > 5 && file.substr (flen-5) == ".ofig")
-      Ffeval (ovl ("hgsave", fnum, file));
-    else
-      Ffeval (ovl ("print", fnum, file));
-  }
-
-  void
-  Figure::copy_figure_callback (const std::string& format)
-  {
-    std::string msg;
-
-    std::string file = octave::sys::tempnam ("", "oct-", msg) + '.' + format;
-
-    if (file.empty ())
-      {
-        // Report error?
-        return;
-      }
-
-    save_figure_callback (file);
-
-    octave_link::copy_image_to_clipboard (file);
-  }
-
-  void
-  Figure::fileSaveFigureAs (void)
-  {
-    fileSaveFigure (true);
-  }
-
-  void
-  Figure::fileCloseFigure (void)
-  {
-    qWidget<QMainWindow> ()->close ();
-  }
-
-  void
-  Figure::editCopy (bool /* choose_format */)
-  {
-    QString format = "png";
-
-#if 0
-
-    // FIXME: allow choice of image formats.
-
-    if (choose_format)
-      {
-        QFileInfo finfo (file);
-
-        format = QFileDialog::getSaveFileName (qWidget<FigureWindow> (),
-                                               tr ("Save Figure As"),
-                                               finfo.absoluteFilePath (), 0, 0,
-                                               QFileDialog::DontUseNativeDialog);
-      }
-#endif
-
-    octave_link::post_event (this, &Figure::copy_figure_callback,
-                             format.toStdString ());
-  }
-
-  void
   Figure::addCustomToolBar (QToolBar *bar, bool visible)
   {
     QMainWindow *win = qWidget<QMainWindow> ();
 
     if (! visible)
       win->addToolBar (bar);
     else
       {
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -107,28 +107,21 @@ namespace QtHandles
     void addCustomToolBar (QToolBar *bar, bool visible);
     void showCustomToolBar (QToolBar *bar, bool visible);
 
     void updateFigureToolBarAndMenuBar (void);
 
     static void updateBoundingBoxHelper (void*);
 
     void close_figure_callback (void);
-    void copy_figure_callback (const std::string& format);
-    void save_figure_callback (const std::string& file);
 
     void enableMouseTracking (void);
 
   private slots:
     void setMouseMode (MouseMode mode);
-    void fileSaveFigure (bool prompt = false);
-    void fileSaveFigureAs (void);
-    void fileCloseFigure (void);
-    void editCopy (bool choose_format = false);
-    void helpAboutOctave (void);
     void updateMenuBar (int height = -1);
     void updateContainer (void);
     void toggleAxes (void);
     void toggleGrid (void);
     void autoAxes (void);
 
   public slots:
     uint8NDArray slotGetPixels (void);
diff --git a/libgui/graphics/Menu.cc b/libgui/graphics/Menu.cc
--- a/libgui/graphics/Menu.cc
+++ b/libgui/graphics/Menu.cc
@@ -75,16 +75,22 @@ namespace QtHandles
 
   Menu::Menu (const graphics_object& go, QAction *action, Object *xparent)
     : Object (go, action), m_parent (nullptr), m_separator (nullptr)
   {
     uimenu::properties& up = properties<uimenu> ();
 
     action->setText (Utils::fromStdString (up.get_label ()));
 
+    // Tag menus for further triage in Figure.cc
+    if (up.get_tag ().substr (0, 15) == "__default_menu_")
+      action->setObjectName ("builtinMenu");
+    else
+      action->setObjectName ("customMenu");
+
     if (up.is_checked ())
       {
         action->setCheckable (true);
         action->setChecked (up.is_checked ());
       }
 
     action->setEnabled (up.is_enable ());
     action->setShortcut (accelSequence (up));
diff --git a/scripts/plot/util/clf.m b/scripts/plot/util/clf.m
--- a/scripts/plot/util/clf.m
+++ b/scripts/plot/util/clf.m
@@ -65,20 +65,23 @@ function h = clf (varargin)
       hfig = varargin{1};
       do_reset = true;
     else
       print_usage ();
     endif
   endif
 
   if (do_reset)
-    ## Select all the children, including the one with hidden handles.
-    delete (allchild (hfig));
+    ## Delete all the children, including the ones with hidden handles,
+    ## except default menus.
+    kids = allchild (hfig);
+    ismenu = cellfun (@(s) strncmp (s, "__default_menu_", 15), ...
+                      get (kids, "tag")); 
+    delete (kids(! ismenu));
     reset (hfig);
-    __add_default_menu__ (hfig);
     __set_default_mouse_modes__ (hfig);
   else
     ## Select only the chilren with visible handles.
     delete (get (hfig, "children"));
 
     ## Also delete the annotation axes
     hover = findall (hfig, "-depth", 1, "tag", "scribeoverlay");
     delete (hover);
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -21,82 +21,118 @@
 ## Add default menu to figure.
 ##
 ## All uimenu handles have their @qcode{"HandleVisibility"} property set to
 ## @qcode{"off"}.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
-function __add_default_menu__ (fig)
-
-  ## Only FLTK toolkit currently provides menubar
-  if (! strcmp (get (fig, "__graphics_toolkit__"), "fltk"))
-    return;
-  endif
-
-  obj = findall (fig, "-depth", 1, "tag", "__default_menu__", "label", "&File");
-  if (isempty (obj))
-    __f = uimenu (fig, "label", "&File", "handlevisibility", "off",
-                       "tag", "__default_menu__");
-      uimenu (__f, "label", "&Save", "callback", @save_cb);
-      uimenu (__f, "label", "Save &As", "callback", @save_cb);
-      uimenu (__f, "label", "&Close", "callback", @close_cb);
+function __add_default_menu__ (hf)
 
-    __e = uimenu (fig, "label", "&Edit", "handlevisibility", "off",
-                       "tag", "__default_menu__");
-      uimenu (__e, "label", "Toggle &grid on all axes", "tag", "toggle", "callback", @grid_cb);
-      uimenu (__e, "label", "Show grid on all axes", "tag", "on", "callback", @grid_cb);
-      uimenu (__e, "label", "Hide grid on all axes", "tag", "off", "callback", @grid_cb);
-      uimenu (__e, "label", "Auto&scale all axes", "callback", @autoscale_cb);
-      gm = uimenu (__e, "label", "GUI &Mode (on all axes)");
-        uimenu (gm, "label", "Pan x and y", "tag", "pan_on", "callback", @guimode_cb);
-        uimenu (gm, "label", "Pan x only", "tag", "pan_xon", "callback", @guimode_cb);
-        uimenu (gm, "label", "Pan y only", "tag", "pan_yon", "callback", @guimode_cb);
-        uimenu (gm, "label", "Disable pan and rotate", "tag", "no_pan_rotate", "callback", @guimode_cb);
-        uimenu (gm, "label", "Rotate on", "tag", "rotate3d", "callback", @guimode_cb);
-        uimenu (gm, "label", "Enable mousezoom", "tag", "zoom_on", "callback", @guimode_cb);
-        uimenu (gm, "label", "Disable mousezoom", "tag", "zoom_off", "callback", @guimode_cb);
-
+  obj = findall (hf, "-depth", 1, "tag", "__default_menu__File", ...
+                 "label", "&File");
+  if (isempty (obj))
+    ## File menu
+    hui = uimenu (hf, "label", "&File", "handlevisibility", "off", ...
+                  "tag", "__default_menu__File");
+    uimenu (hui, "label", "&Open", "callback", @open_cb, ...
+            "accelerator", "o");
+    uimenu (hui, "label", "&Save", "callback", @save_cb, ...
+            "accelerator", "s");
+    uimenu (hui, "label", "Save &As", "callback", @save_cb, ...
+            "accelerator", "S");
+    uimenu (hui, "label", "&Close", "callback", @close_cb, ...
+           "accelerator", "w", "separator", "on");
+    
+    ## Edit menu
+    hui = uimenu (hf, "label", "&Edit", "handlevisibility", "off", ...
+                  "tag", "__default_menu__Edit");
+    uimenu (hui, "label", "&New Figure", "callback", "figure ();", ...
+            "accelerator", "n");
+    uimenu (hui, "label", "&Duplicate Figure",
+            "callback", "copyobj (gcbf (), groot ());", ...
+            "accelerator", "d");
+    uimenu (hui, "label", "Clea&r Figure",
+            "callback", "clf (gcbf ());");
+    uimenu (hui, "label", "Reset Figure",
+            "callback", "reset (gcbf ());");
+    
+    ## Tools menu
+    hui = uimenu (hf, "label", "&Tools", "handlevisibility", "off", ...
+                  "tag", "__default_menu__Tools");
+    uimenu (hui, "label", "Toggle &grid on all axes", "tag", "toggle", ...
+            "callback", @grid_cb);
+    uimenu (hui, "label", "Show grid on all axes", "tag", "on", ...
+            "callback", @grid_cb);
+    uimenu (hui, "label", "Hide grid on all axes", "tag", "off", ...
+            "callback", @grid_cb);
+    uimenu (hui, "label", "Auto&scale all axes", "callback", @autoscale_cb);
+    
+    hui2 = uimenu (hui, "label", "GUI &Mode (on all axes)");
+    uimenu (hui2, "label", "Pan x and y", "tag", "pan_on", ...
+            "callback", @guimode_cb);
+    uimenu (hui2, "label", "Pan x only", "tag", "pan_xon", ...
+            "callback", @guimode_cb);
+    uimenu (hui2, "label", "Pan y only", "tag", "pan_yon", ...
+            "callback", @guimode_cb);
+    uimenu (hui2, "label", "Disable pan and rotate", "tag", ...
+            "no_pan_rotate", "callback", @guimode_cb);
+    uimenu (hui2, "label", "Rotate on", "tag", "rotate3d", ...
+            "callback", @guimode_cb);
+    uimenu (hui2, "label", "Enable mousezoom", "tag", "zoom_on", ...
+            "callback", @guimode_cb);
+    uimenu (hui2, "label", "Disable mousezoom", "tag", "zoom_off", ...
+            "callback", @guimode_cb);
   endif
 
 endfunction
 
 
+function open_cb (h, e)
+  [filename, filedir] = uigetfile ({"*.ofig", "Octave Figure File"}, ...
+                                   "Open Figure");
+  if (filename != 0)
+    fname = fullfile (filedir, filename);
+    tmphf = hgload (fname);
+    set (tmphf, "filename", fname);
+  endif
+endfunction
+
 function save_cb (h, e)
   [hcbo, hfig] = gcbo ();
   lbl = get (hcbo, "label");
   if (strcmp (lbl, "&Save"))
     fname = get (hfig, "filename");
     if (isempty (fname))
       __save_as__ (hfig);
     else
       saveas (hfig, fname);
     endif
   elseif (strcmp (lbl, "Save &As"))
     __save_as__ (hfig);
   endif
 endfunction
 
 
-function __save_as__ (caller)
+function __save_as__ (hf)
   [filename, filedir] = uiputfile ...
     ({"*.ofig", "Octave Figure File";
       "*.eps;*.epsc;*.pdf;*.svg;*.ps;*.tikz", "Vector Image Formats";
       "*.gif;*.jpg;*.png;*.tiff", "Bitmap Image Formats"},
      "Save Figure", fullfile (pwd, "untitled.ofig"));
 
   if (filename != 0)
     fname = fullfile (filedir, filename);
     set (gcbf, "filename", fname);
     flen = numel (fname);
     if (flen > 5 && strcmp (fname(flen-4:end), ".ofig"))
-      hgsave (caller, fname);
+      hgsave (hf, fname);
     else
-      saveas (caller, fname);
+      saveas (hf, fname);
     endif
   endif
 endfunction
 
 
 function close_cb (h, e)
   close (gcbf);
 endfunction
