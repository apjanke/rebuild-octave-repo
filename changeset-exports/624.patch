# HG changeset patch
# User jwe
# Date 777140385 0
#      Wed Aug 17 16:19:45 1994 +0000
# Node ID 1a7dea6fa26b2497163770014fe01ae5ae4d0883
# Parent  7caf80625d0e6065081ad5834416cb3fcf2f69c2
[project @ 1994-08-17 16:19:40 by jwe]

diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -99,16 +99,36 @@ signum (double x)
   if (x < 0.0)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
   return tmp;
 }
 
 double
+xerf (double x)
+{
+#if defined (HAVE_ERF)
+  return erf (x);
+#else
+  error ("erf(x) not available on this system");
+#endif
+}
+
+double
+xerfc (double x)
+{
+#if defined (HAVE_ERFC)
+  return erfc (x);
+#else
+  error ("erfc(x) not available on this system");
+#endif
+}
+
+double
 xisnan (double x)
 {
 #if defined (HAVE_ISNAN)
   return (double) isnan (x);
 #else
   return 0;
 #endif
 }
@@ -121,27 +141,48 @@ xfinite (double x)
 #elif defined (HAVE_ISINF) && defined (HAVE_ISNAN)
   return (double) (! isinf (x) && ! isnan (x));
 #else
   return (double) (x > -DBL_MAX && x < DBL_MAX);
 #endif
 }
 
 double
+xgamma (double x)
+{
+#if defined (HAVE_LGAMMA)
+  double y = lgamma (x);
+  return signgam * exp (y);
+#else
+  error ("gamma(x) not available on this system");
+#endif
+}
+
+double
 xisinf (double x)
 {
 #if defined (HAVE_ISINF)
   return (double) isinf (x);
 #elif defined (HAVE_FINITE) && defined (HAVE_ISNAN)
   return (double) (! (finite (x) || isnan (x)));
 #else
   return (double) (x == DBL_MAX || x == -DBL_MAX);
 #endif
 }
 
+double
+xlgamma (double x)
+{
+#if defined (HAVE_LGAMMA)
+  return lgamma (x);
+#else
+  error ("lgamma (x) not available on this system");
+#endif
+}
+
 /*
  * Complex -> double mappers.
  */
 
 double
 xisnan (const Complex& x)
 {
 #if defined (HAVE_ISNAN)
@@ -312,38 +353,48 @@ install_mapper_functions (void)
     "conj (X): compute complex conjugate for each element of X");
 
   DEFUN_MAPPER ("cos", Scos, 0, 0.0, 0.0, cos, 0, cos,
     "cos (X): compute cos (X) for each element of X");
 
   DEFUN_MAPPER ("cosh", Scosh, 0, 0.0, 0.0, cosh, 0, cosh,
     "cosh (X): compute cosh (X) for each element of X");
 
+  DEFUN_MAPPER ("erf", Serf, 0, 0.0, 0.0, xerf, 0, 0,
+    "erf (X): compute erf (X) for each element of X");
+
+  DEFUN_MAPPER ("erfc", Serfc, 0, 0.0, 0.0, xerfc, 0, 0,
+    "erfc (X): compute erfc (X) for each element of X");
+
   DEFUN_MAPPER ("exp", Sexp, 0, 0.0, 0.0, exp, 0, exp,
     "exp (X): compute exp (X) for each element of X");
 
   DEFUN_MAPPER ("finite", Sfinite, 0, 0.0, 0.0, xfinite, xfinite, 0,
     "finite (X): return 1 for finite elements of X");
 
   DEFUN_MAPPER ("fix", Sfix, 0, 0.0, 0.0, fix, 0, fix,
     "fix (X): round elements of X toward zero");
 
   DEFUN_MAPPER ("floor", Sfloor, 0, 0.0, 0.0, floor, 0, floor,
     "floor (X): round elements of X toward -Inf");
 
+  DEFUN_MAPPER ("gamma", Sgamma, 0, 0.0, 0.0, xgamma, 0, 0,
+    "gamma (X): compute gamma (X) for each element of X");
+
   DEFUN_MAPPER ("isinf", Sisinf, 0, 0.0, 0.0, xisinf, xisinf, 0,
     "isinf (X): return 1 for elements of X infinite");
 
   DEFUN_MAPPER ("imag", Simag, 0, 0.0, 0.0, imag, imag, 0,
     "imag (X): return imaginary part for each elements of X");
 
-#ifdef HAVE_ISNAN
   DEFUN_MAPPER ("isnan", Sisnan, 0, 0.0, 0.0, xisnan, xisnan, 0,
     "isnan (X): return 1 where elements of X are NaNs");
-#endif
+
+  DEFUN_MAPPER ("lgamma", Slgamma, 0, 0.0, 0.0, xlgamma, 0, 0,
+    "lgamma (X): compute log gamma (X) for each element of X");
 
   DEFUN_MAPPER ("log", Slog, 1, 0.0, DBL_MAX, log, 0, log,
     "log (X): compute log (X) for each element of X");
 
   DEFUN_MAPPER ("log10", Slog10, 1, 0.0, DBL_MAX, log10, 0, log10,
     "log10 (X): compute log10 (X) for each element of X");
 
   DEFUN_MAPPER ("real", Sreal, 0, 0.0, 0.0, real, real, 0,
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -773,42 +773,52 @@ DEFUN ("eval", Feval, Seval, 2, 1,
 
 DEFUN ("shell_cmd", Fshell_cmd, Sshell_cmd, 2, 1,
   "shell_cmd (string [, return_output]): execute shell commands")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2 && args(1).is_string ())
+  if (nargin < 2 || nargin > 3)
     {
-      iprocstream cmd (args(1).string_value ());
+      print_usage ("shell_cmd");
+      return retval;
+    }
+
+  tree_constant tc_command = args(1);
+
+  if (tc_command.is_string ())
+    {
+      iprocstream cmd (tc_command.string_value ());
+
+      ostrstream output_buf;
+
       char ch;
-      ostrstream output_buf;
       while (cmd.get (ch))
 	output_buf.put (ch);
+
       output_buf << ends;
+
       int status = cmd.close ();
-      switch (nargout)
+
+      if (nargout > 0 || nargin > 2)
 	{
-	case 1:
-	  maybe_page_output (output_buf);
-	  retval.resize (1);
-	  retval(0) = tree_constant ((double) status);
-	  break;
-	case 2:
-	  retval.resize (2);
-	  retval(0) = tree_constant ((double) status);
-	  retval(1) = tree_constant (output_buf.str ());
-	  break;
-	  break;
+	  char *msg = output_buf.str ();
+
+	  retval(1) = (double) status;
+	  retval(0) = msg;
+
+	  delete [] msg;
 	}
+      else
+	maybe_page_output (output_buf);
     }
   else
-    print_usage ("shell_cmd");
+    error ("shell_cmd: expecting string as first argument");
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
