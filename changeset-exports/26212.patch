# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1495971722 -7200
#      Sun May 28 13:42:02 2017 +0200
# Node ID 2be1833a93a54d520eb3ff089a44dc8e8fb10179
# Parent  69bd0cfbd1239284abeebc97f173ea77b92b8435
movie.m: New function (patch #9363)

* NEWS: Announce new function.

* scripts/image/movie.m: New function file.

* scripts/image/module.mk: Add movie.m to build system.

* getframe.m: Add movie to seealso links.

* image.txi: Add movie DOCSTRING. Reorganize part of "Representing Images"
section.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -159,16 +159,17 @@ Summary of important user-visible change
  ** New functions added in 5.0:
 
       clearvars
       isfile
       isfolder
       matlab.lang.makeUniqueStrings
       matlab.lang.makeValidName
       movegui
+      movie
       openfig
       ordeig
       savefig
       uitable
 
  ** Legacy functions.
 
     The following functions have been declared legacy functions which
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -135,36 +135,50 @@ A pixel in a binary image is black if it
 if it is @code{true}.
 
 An indexed image consists of an M-by-N matrix of integers
 and a C-by-3 color map.  Each integer corresponds to an
 index in the color map, and each row in the color map corresponds to
 an RGB color.  The color map must be of class @code{double} with values
 between 0 and 1.
 
-@DOCSTRING(im2double)
+The following convenience functions are available for conversion between image 
+formats.
 
-@DOCSTRING(iscolormap)
+@DOCSTRING(im2double)
 
 @DOCSTRING(gray2ind)
 
 @DOCSTRING(ind2gray)
 
 @DOCSTRING(rgb2ind)
 
 @DOCSTRING(ind2rgb)
 
+Octave also provides tools to produce and work with movie frame structures. 
+Those structures encapsulate the image data (@qcode{"cdata"} field) together 
+with the corresponding colormap (@qcode{"colormap"} field).
+
 @DOCSTRING(getframe)
 
+@DOCSTRING(movie)
+
 @DOCSTRING(frame2im)
 
 @DOCSTRING(im2frame)
 
+The @code{colormap} function is used to change the colormap of the current axes or figure.
+
 @DOCSTRING(colormap)
 
+@DOCSTRING(iscolormap)
+
+The following functions return predefined colormaps, the same that can be 
+requested by name using the @code{colormap} function. 
+
 @DOCSTRING(rgbplot)
 
 @DOCSTRING(autumn)
 
 @DOCSTRING(bone)
 
 @DOCSTRING(colorcube)
 
diff --git a/scripts/image/getframe.m b/scripts/image/getframe.m
--- a/scripts/image/getframe.m
+++ b/scripts/image/getframe.m
@@ -36,17 +36,17 @@
 ## If the first argument @var{hfig} is a figure handle then the entire
 ## corresponding figure canvas is captured.
 ##
 ## Finally, if a second argument @var{rect} is provided it must be a
 ## four-element vector ([left bottom width height]) defining the region inside
 ## the figure to be captured.  Regardless of the figure @qcode{"units"}
 ## property, @var{rect} must be defined in @strong{pixels}.
 ##
-## @seealso{im2frame, frame2im}
+## @seealso{im2frame, frame2im, movie}
 ## @end deftypefn
 
 function frame = getframe (h = [], rect = [])
   hf = hax = [];
   if (isempty (h))
     hf = get (0, "currentfigure");
     if (isempty (hf))
       error ("getframe: no figure to capture");
diff --git a/scripts/image/module.mk b/scripts/image/module.mk
--- a/scripts/image/module.mk
+++ b/scripts/image/module.mk
@@ -41,16 +41,17 @@ FCN_FILE_DIRS += \
   %reldir%/imread.m \
   %reldir%/imshow.m \
   %reldir%/imwrite.m \
   %reldir%/ind2gray.m \
   %reldir%/ind2rgb.m \
   %reldir%/iscolormap.m \
   %reldir%/jet.m \
   %reldir%/lines.m \
+  %reldir%/movie.m \
   %reldir%/ocean.m \
   %reldir%/pink.m \
   %reldir%/prism.m \
   %reldir%/rainbow.m \
   %reldir%/rgb2gray.m \
   %reldir%/rgb2hsv.m \
   %reldir%/rgb2ind.m \
   %reldir%/rgbplot.m \
diff --git a/scripts/image/movie.m b/scripts/image/movie.m
new file mode 100644
--- /dev/null
+++ b/scripts/image/movie.m
@@ -0,0 +1,217 @@
+## Copyright (C) 2017 Pantxo Diribarne
+## 
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {} movie (@var{mov})
+## @deftypefnx {} {} movie (@var{mov}, @var{n})
+## @deftypefnx {} {} movie (@var{mov}, @var{n}, @var{fps})
+## @deftypefnx {} {} movie (@var{h}, @dots{})
+## Play a movie defined by an array of frame structures.
+##
+## The movie @var{mov} must be a struct array of frames with fields
+## @qcode{"cdata"} and @qcode{"colormap"}, as returned by the @code{getframe}
+## function.  By default all images are displayed once, at 12 fps, in the
+## current axes.
+##
+## The optional argument @var{n} is a scalar or vector of integers that
+## controls the number of times the movie is displayed and which particular
+## frames are shown:
+##
+## @table @asis
+## @item First element:
+##
+## @table @asis
+## @item @var{n}(1) > 0
+## Play the movie @var{n}(1) times.
+##
+## @item @var{n}(1) < 0
+## Play the movie @code{abs (@var{n}(1)} times alternatively in forward and
+## backward order.
+## @end table
+##
+## @item Other elements (if any):
+## Indices of the frames in @var{mov} that will be displayed.
+## @end table
+##
+## If the first argument is a handle to a figure or axes @var{h}, the movie is
+## played in that figure or axes instead of the current axes.
+##
+## @seealso{getframe, im2frame, frame2im}
+## @end deftypefn
+
+function movie (varargin)
+
+  if (nargin == 0)
+    print_usage ();
+  endif
+
+  ## Extract possible handle argument
+  hax = [];
+  if (isaxes (varargin{1}))
+    hax = varargin{1};
+    varargin(1) = [];
+  elseif (isfigure (varargin{1}))
+    hax = get (varargin{1}, "currentaxes");
+    if (isempty (hax))
+      hax = axes ("parent", varargin{1});
+    endif
+    varargin(1) = [];
+  endif
+
+  ## Extract other arguments
+  n = 1;
+  fps = 12;
+  idx = [];
+  nargs = numel (varargin);
+  if (nargs == 0)
+    print_usage ();
+  elseif (nargs >= 1)
+    mov = varargin{1};
+    if (! isfield (mov, "cdata") || ! isfield (mov, "colormap"))
+      error ("movie: MOV must be a frame struct array");
+    endif
+
+    if (nargs >= 2)
+      n = varargin{2};
+      if (! isindex (abs (n(1))))
+        error ("movie: N must be a non-zero integer");
+      elseif (! isscalar (n))
+        idx = n(2:end)(:)';
+        n = n(1);
+        if (! isindex (idx, numel (mov)))
+          error (["movie: All elements N(2:end) must be valid indices ", ...
+                  "into the MOV struct array"]);
+
+        endif
+      endif
+        
+      if (nargs >= 3)
+        fps = varargin{3};
+        if (! (isnumeric (fps) && isscalar (fps) && fps > 0))
+          error ("movie: FPS must be a numeric scalar > 0");
+        endif
+      endif
+    endif
+  endif
+
+  if (isempty (hax))
+    hax = gca ();
+  endif
+
+  ## Build the list of frames to be displayed
+  if (isempty (idx))
+    idx = (1:numel (mov));
+  endif
+
+  if (n > 0)
+    idx = repmat (idx, 1, n);
+  else
+    n = -n;
+    tmp = repmat ([idx fliplr(idx)], 1, fix (n/2));
+    if (fix (n/2) != n/2)
+      idx = [tmp, idx];
+    else
+      idx = tmp;
+    endif
+  endif
+
+  tau = 1/fps;
+  set (hax, "ydir", "reverse", "visible", "off");
+  tic ();
+  him = image ("parent", hax, "cdata", mov(1).cdata);
+  for ii = idx
+    pause (tau - toc ());
+    tic ();
+    if (! isempty (mov(ii).colormap))
+      set (hax, "colormap", mov(ii).colormap)
+    endif
+    set (him, "cdata", mov(ii).cdata);
+  endfor
+  
+endfunction
+
+
+%!demo
+%! nframes = 20;
+%! colors = jet (nframes);
+%! baseim = ones (20, 20, 3, "uint8");
+%! mov(nframes) = struct ("cdata", [], "colormap", []);
+%! for ii = 1:nframes
+%!   im = baseim * 255;
+%!   im(:,ii,1) = colors(ii,1) * 255;
+%!   im(:,ii,2) = colors(ii,2) * 255;
+%!   im(:,ii,3) = colors(ii,3) * 255;
+%!   mov(ii).cdata = im;
+%! endfor
+%! clf ();
+%! title "Play movie forward 2 times"
+%! movie (mov, 2);
+
+%!demo
+%! nframes = 20;
+%! colors = jet (nframes);
+%! baseim = ones (20, 20, 3, "uint8");
+%! mov(nframes) = struct ("cdata", [], "colormap", []);
+%! for ii = 1:nframes
+%!   im = baseim * 255;
+%!   im(:,ii,1) = colors(ii,1) * 255;
+%!   im(:,ii,2) = colors(ii,2) * 255;
+%!   im(:,ii,3) = colors(ii,3) * 255;
+%!   mov(ii).cdata = im;
+%! endfor
+%! clf ();
+%! title "Play movie forward and backward 5 times at 25 fps"
+%! movie (mov, -5, 25);
+
+%!demo
+%! nframes = 20;
+%! colors = jet (nframes);
+%! baseim = ones (20, 20, 3, "uint8");
+%! mov(nframes) = struct ("cdata", [], "colormap", []);
+%! for ii = 1:nframes
+%!   im = baseim * 255;
+%!   im(:,ii,1) = colors(ii,1) * 255;
+%!   im(:,ii,2) = colors(ii,2) * 255;
+%!   im(:,ii,3) = colors(ii,3) * 255;
+%!   mov(ii).cdata = im;
+%! endfor
+%! clf ();
+%! title "Play downsampled movie 5 times" 
+%! movie (mov, [5 1:3:nframes]);
+
+%!demo
+%! clf ();
+%! z = sombrero ();
+%! hs = surf (z);
+%! axis manual
+%! nframes = 50;
+%! mov(nframes) = struct ("cdata", [], "colormap", []);
+%! for ii = 1:nframes
+%!   set (hs, "zdata", z * sin (2*pi*ii/nframes));
+%!   mov(ii) = getframe ();
+%! endfor
+%! clf ();
+%! movie (mov, 5, 25);
+
+## Test input validation
+%!error movie ()
+%!error <MOV must be a frame struct array> movie ({2})
+%!error <N must be a non-zero integer>
+%! movie (struct ("cdata", [], "colormap", []), 2.3);
+%!error <N must be a non-zero integer>
+%! movie (struct ("cdata", [], "colormap", []), [2.3 -6]);
