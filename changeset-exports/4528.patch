# HG changeset patch
# User jwe
# Date 1065204957 0
#      Fri Oct 03 18:15:57 2003 +0000
# Node ID 7a85d54d0cbd335811c35b8a34c56009850e468f
# Parent  c0a23a13eea2ca11a61fb556feae53d2867e8980
[project @ 2003-10-03 18:15:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-10-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (make_valid_identifier): Return new string.
+	Arg is now string, not char *.
+	(ident_is_all_digits): New function.
+	(hdf5_read_next_data): Use it.
+
 2003-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (input_event_hook): Clear the event hook if hook_fcn
 	does not name a valid function.
 
 2003-10-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mappers.cc (xabs): New function.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -136,25 +136,55 @@ enum mat5_data_type
 static bool
 save_mat5_binary_element (std::ostream& os,
 			  const octave_value& tc, const std::string& name,
 			  bool mark_as_global, bool save_as_floats);
 
 #ifdef HAVE_HDF5
 // this is only used for HDF5 import
 // try to convert s into a valid identifier, replacing invalid chars with "_":
-static void
-make_valid_identifier (char *s)
+static std::string
+make_valid_identifier (const std::string& nm)
 {
-  if (s)
+  std::string retval;
+
+  size_t nm_len = nm.length ();
+
+  if (nm_len > 0)
     {
-      for (; *s; ++s)
-	if (! (isalnum (*s) || *s == '_'))
-	  *s = '_';
+      if (! isalpha (nm[0]))
+	retval += '_';
+
+      for (size_t i = 0; i < nm_len; i++)
+	{
+	  char c = nm[i];
+	  retval += (isalnum (c) || c == '_') ? c : '_';
+	}
     }
+
+  return retval;
+}
+
+static bool
+ident_is_all_digits (const std::string& id)
+{
+  bool retval = true;
+
+  size_t len = 0;
+
+  for (size_t i = 0; i < len; i++)
+    {
+      if (! isdigit (id[i]))
+	{
+	  retval = false;
+	  break;
+	}
+    }
+
+  return retval;
 }
 #endif /* HAVE_HDF5 */
 
 // XXX FIXME XXX -- shouldn't this be implemented in terms of other
 // functions that are already available?
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is TRUE, replace any existing definition
@@ -1401,24 +1431,25 @@ static herr_t
 hdf5_read_next_data (hid_t group_id, const char *name, void *dv)
 {
   hdf5_callback_data *d = static_cast <hdf5_callback_data *> (dv);
 
   H5G_stat_t info;
   herr_t retval = 0;
   bool ident_valid = valid_identifier (name);
 
-  OCTAVE_LOCAL_BUFFER (char, vname, strlen (name) + 1);
-
-  strcpy (vname, name);
-
-  if (! ident_valid && d->import)
+  std::string vname = name;
+
+  // Allow identifiers as all digits so we can load lists saved by
+  // earlier versions of Octave.
+
+  if (! ident_valid && (d->import || ident_is_all_digits (vname)))
     {
       // fix the identifier, replacing invalid chars with underscores
-      make_valid_identifier (vname);
+      vname = make_valid_identifier (vname);
 
       // check again (in case vname was null, empty, or some such thing):
       ident_valid = valid_identifier (vname); 
     }
 
   H5Gget_objinfo (group_id, name, 1, &info);
 
   if (info.type == H5G_DATASET && ident_valid)
@@ -1787,17 +1818,17 @@ hdf5_read_next_data (hid_t group_id, con
       int comment_length = H5Gget_comment (group_id, name, 0, 0);
 
       if (comment_length > 1)
 	{
 	  OCTAVE_LOCAL_BUFFER (char, tdoc, comment_length);
 	  H5Gget_comment (group_id, name, comment_length, tdoc);
 	  d->doc = tdoc;
 	}
-      else if (strcmp (name, vname) != 0)
+      else if (vname != name)
 	{
 	  // the name was changed by import; store the original name
 	  // as the documentation string:
 	  d->doc = name;
 	}
 
       // copy name (actually, vname):
       d->name = vname;
