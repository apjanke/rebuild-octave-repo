# HG changeset patch
# User jwe
# Date 1200301082 0
#      Mon Jan 14 08:58:02 2008 +0000
# Node ID 600808df131caff5a9d2644cdb22460cf749ca4a
# Parent  2a2115742cb5a7c7018bc8a84b24ea461f86a4cc
[project @ 2008-01-14 08:58:02 by jwe]

diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2106,21 +2106,21 @@ Matrix::lssolve (const Matrix& b, octave
       // FIXME: Can SMLSIZ be other than 25?
       octave_idx_type smlsiz = 25;
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
-      double tmp = log2 (dminmn) / dsmlsizp1 + 1;
+      double tmp = log2 (dminmn / dsmlsizp1);
 #else
-      double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
+      double tmp = log (dminmn / dsmlsizp1) / log (2.0);
 #endif
-      octave_idx_type nlvl = static_cast<int> (tmp);
+      octave_idx_type nlvl = static_cast<int> (tmp) + 1;
       if (nlvl < 0)
 	nlvl = 0;
 
       octave_idx_type liwork = 3 * minmn * nlvl + 11 * minmn;
       if (liwork < 1)
 	liwork = 1;
       Array<octave_idx_type> iwork (liwork);
       octave_idx_type* piwork = iwork.fortran_vec ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2008-01-14  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* genprops.awk (emit_get_callback): Pass user data to execute method.
+	* graphics.cc (execute_callback): New static function.
+	(callback_property::validate): Make it work.
+	(callback_property::execute): Make it work.
+	(gh_manager::do_free): Execute delete function here.
+	* graphics.h.in (callback_property::execute): Fix decl.
+	(base_properties::buttondownfcn, base_properties::createfcn,
+	base_properties::deletefcn, base_properties::userdata): Default
+	value is empty Matrix, not undefined octave_value object.
+	(base_properties::execute_createfcn): New function.
+	(base_properties::execute_deletefcn): New function.
+
 2007-12-13  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h.in, graphics.cc (class base_properties): New
 	properties: busyaction, buttondownfcn, clipping, createfcn,
 	deletefcn, handlevisibility, hittest, interruptible, selected,
 	selectionhighlight, uicontextmenu, userdata, visible.
 	(class figure): Delete visible property.
 
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -171,20 +171,20 @@ function emit_get_color (i)
 
   emit_get_accessor(i, "octave_value", "get");
 }
 
 ## callback_property
 
 function emit_get_callback (i)
 {
-  printf ("  void execute_%s (void)", name[i]);
+  printf ("  void execute_%s (const octave_value& data = octave_value ()) const", name[i]);
   
   if (emit_get[i] == "definition")
-    printf (" { %s.execute (); }\n", name[i]);
+    printf (" { %s.execute (data); }\n", name[i]);
   else
     printf (";\n");
 
   emit_get_accessor(i, "octave_value", "get");
 }
 
 ## data_property
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -132,16 +132,71 @@ default_data (void)
   Matrix retval (1, 2);
 
   retval(0) = 0;
   retval(1) = 1;
 
   return retval;
 }
 
+// NOTE: "cb" is passed by value, because "function_value" method
+//       is non-const; passing "cb" by const-reference is not
+//       possible
+
+static void
+execute_callback (octave_value cb, const graphics_handle& h,
+                  const octave_value& data)
+{
+  octave_value_list args;
+  octave_function *fcn = 0;
+
+  args(0) = h.as_octave_value ();
+  args(1) = data;
+
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
+  if (cb.is_function_handle ())
+    fcn = cb.function_value ();
+  else if (cb.is_string ())
+    {
+      std::string s = cb.string_value ();
+      octave_value f = symbol_table::find_function (s);
+      int status;
+
+      if (f.is_defined ())
+        fcn = f.function_value ();
+      else
+        {
+          eval_string (s, false, status);
+          return;
+        }
+    }
+  else if (cb.is_cell () && cb.length () > 0
+           && (cb.rows () == 1 || cb.columns () == 1)
+           && cb.cell_value ()(0).is_function_handle ())
+    {
+      Cell c = cb.cell_value ();
+
+      fcn = c(0).function_value ();
+      if (! error_state)
+        {
+          for (int i = 0; i < c.length () ; i++)
+            args(2+i) = c(i);
+        }
+    }
+  else
+    error ("trying to execute non-executable object (class = %s)",
+           cb.class_name ());
+
+  if (! error_state)
+    feval (fcn, args);
+  
+  END_INTERRUPT_WITH_EXCEPTIONS;
+}
+
 // ---------------------------------------------------------------------
 
 radio_values::radio_values (const std::string& opt_string)
 {
   size_t beg = 0;
   size_t len = opt_string.length ();
   bool done = len == 0;
 
@@ -330,26 +385,44 @@ handle_property::set (const octave_value
             dv, get_name ().c_str ());
     }
   else
     error ("set: invalid graphics handle for property \"%s\"",
         get_name ().c_str ());
 }
 
 bool
-callback_property::validate (const octave_value&) const
+callback_property::validate (const octave_value& v) const
 {
-  // FIXME: implement this
-  return true;
+  // case 1: function handle
+  // case 2: cell array with first element being a function handle
+  // case 3: string corresponding to known function name
+  // case 4: evaluatable string
+  // case 5: empty matrix
+
+  if (v.is_function_handle ())
+    return true;
+  else if (v.is_string ())
+    // complete validation will be done at execution-time
+    return true;
+  else if (v.is_cell () && v.length () > 0
+           && (v.rows() == 1 || v.columns () == 1)
+           && v.cell_value ()(0).is_function_handle ())
+    return true;
+  else if (v.is_empty ())
+    return true;
+
+  return false;
 }
 
 void
-callback_property::execute (void)
+callback_property::execute (const octave_value& data) const
 {
-  // FIXME: define correct signature and implement this
+  if (callback.is_defined () && ! callback.is_empty ())
+    execute_callback (callback, get_parent (), data);
 }
 
 // ---------------------------------------------------------------------
 
 void
 property_list::set (const caseless_str& name, const octave_value& val)
 {
   size_t offset = 0;
@@ -601,16 +674,18 @@ gh_manager::do_free (const graphics_hand
   if (h.ok ())
     {
       if (h.value () != 0)
 	{
 	  iterator p = handle_map.find (h);
 
 	  if (p != handle_map.end ())
 	    {
+              p->second.get_properties ().execute_deletefcn ();
+
 	      handle_map.erase (p);
 
 	      if (h.value () < 0)
 		handle_free_list.insert (h);
 	    }
 	  else
 	    error ("graphics_handle::free: invalid object %g", h.value ());
 	}
@@ -2060,19 +2135,23 @@ Undocumented internal function.\n\
 	  if (h.ok ())
 	    {
 	      graphics_object obj = gh_manager::get_object (h);
 
 	      graphics_handle parent_h = obj.get_parent ();
 
 	      graphics_object parent_obj = gh_manager::get_object (parent_h);
 
-	      parent_obj.remove_child (h);
+              // NOTE: free the handle before removing it from its parent's
+              //       children, such that the object's state is correct when
+              //       the deletefcn callback is executed
 
 	      gh_manager::free (h);
+
+	      parent_obj.remove_child (h);
 	    }
 	  else
 	    error ("delete: invalid graphics object (= %g)", val);
 	}
       else
 	error ("delete: invalid graphics object");
     }
   else
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -791,17 +791,17 @@ public:
     {
       if (validate (v))
         callback = v;
       else
         error ("invalid value for callback property \"%s\"",
                get_name ().c_str ());
     }
 
-  OCTINTERP_API void execute (void);
+  OCTINTERP_API void execute (const octave_value& data = octave_value ()) const;
 
   callback_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
 private:
@@ -962,27 +962,27 @@ public:
                    const graphics_handle& p = graphics_handle ())
     : tag ("tag", mh),
       type ("type", mh, ty),
       __modified__ ("__modified__", mh, true),
       __myhandle__ (mh),
       parent ("parent", mh, p), 
       children (),
       busyaction ("parent", mh, "{queue}|cancel"),
-      buttondownfcn ("buttondownfcn", mh, octave_value ()),
+      buttondownfcn ("buttondownfcn", mh, Matrix ()),
       clipping ("clipping", mh, true),
-      createfcn ("createfcn" , mh, octave_value ()),
-      deletefcn ("deletefcn", mh, octave_value ()),
+      createfcn ("createfcn" , mh, Matrix ()),
+      deletefcn ("deletefcn", mh, Matrix ()),
       handlevisibility ("handlevisibility", mh, "{on}|callback|off"),
       hittest ("hittest", mh, true),
       interruptible ("interruptible", mh, true),
       selected ("selected", mh, false),
       selectionhighlight ("selectionhighlight", mh, true),
       uicontextmenu ("uicontextmenu", mh, graphics_handle ()),
-      userdata ("userdata", mh, octave_value ()),
+      userdata ("userdata", mh, Matrix ()),
       visible ("visible", mh, true)
     { }
 
   virtual ~base_properties (void) { }
 
   virtual std::string graphics_object_name (void) const { return "unknonwn"; }
 
   void mark_modified (void);
@@ -1020,18 +1020,24 @@ public:
   graphics_handle get___myhandle__ (void) const { return __myhandle__; }
   
   std::string get_busyaction (void) const { return busyaction.current_value (); }
 
   octave_value get_buttondownfcn (void) const { return buttondownfcn.get (); }
 
   std::string get_clipping (void) const { return clipping.current_value (); }
 
+  void execute_createfcn (const octave_value& data = octave_value ()) const
+    { createfcn.execute (data); }
+
   octave_value get_createfcn (void) const { return createfcn.get (); }
 
+  void execute_deletefcn (const octave_value& data = octave_value ()) const
+    { deletefcn.execute (data); }
+
   octave_value get_deletefcn (void) const { return deletefcn.get (); }
 
   std::string get_handlevisibility (void) const { return handlevisibility.current_value (); }
 
   std::string get_hittest (void) const { return hittest.current_value (); }
 
   std::string get_interruptible (void) const { return interruptible.current_value (); }
 
@@ -1714,17 +1720,16 @@ public:
       color_property color , color_values (1, 1, 1)
     END_PROPERTIES
     
   protected:
     void init (void)
       {
         colormap.add_constraint (dim_vector (-1, 3));
       }
-
   };
 
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
