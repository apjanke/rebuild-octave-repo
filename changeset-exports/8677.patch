# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233819778 18000
#      Thu Feb 05 02:42:58 2009 -0500
# Node ID 095ae5e0a8313340f5ecb4de80e70d39abe91566
# Parent  22462fd58e660c76192e3565e29f87feb788e174
eliminte some compiler warnings

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -383,18 +383,18 @@ get_ra_idx (octave_idx_type idx, const d
       idx -= var * retval(i);
       var = dims(i);
     }
 #endif
 
   return retval;
 }
 
-dim_vector zero_dims_inquire (const Array<idx_vector>& ia,
-                              const dim_vector& rhdv)
+dim_vector
+zero_dims_inquire (const Array<idx_vector>& ia, const dim_vector& rhdv)
 {
   int ial = ia.length (), rhdvl = rhdv.length ();
   dim_vector rdv;
   rdv.resize (ial);
   bool *scalar = new bool[ial], *colon = new bool[ial];
   // Mark scalars and colons, count non-scalar indices.
   int nonsc = 0; 
   bool all_colons = true;
@@ -403,17 +403,16 @@ dim_vector zero_dims_inquire (const Arra
       // FIXME -- should we check for length() instead?
       scalar[i] = ia(i).is_scalar ();
       colon[i] = ia(i).is_colon ();
       if (! scalar[i]) nonsc++;
       if (! colon[i]) rdv(i) = ia(i).extent (0);
       all_colons = all_colons && colon[i];
     }
 
-  bool match = false;
   // If the number of nonscalar indices matches the dimensionality of
   // RHS, we try an exact match, inquiring even singleton dimensions.
   if (all_colons)
     {
       rdv = rhdv;
       rdv.resize(ial, 1);
     }
   else if (nonsc == rhdvl)
@@ -439,18 +438,19 @@ dim_vector zero_dims_inquire (const Arra
     }
 
   delete [] scalar;
   delete [] colon;
 
   return rdv;
 }
 
-dim_vector zero_dims_inquire (const idx_vector& i, const idx_vector& j,
-                              const dim_vector& rhdv)
+dim_vector
+zero_dims_inquire (const idx_vector& i, const idx_vector& j,
+		   const dim_vector& rhdv)
 {
   bool icol = i.is_colon (), jcol = j.is_colon ();
   dim_vector rdv;
   if (icol && jcol && rhdv.length () == 2)
     {
       rdv(0) = rhdv(0);
       rdv(1) = rhdv(1);
     }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2009-02-05  John W. Eaton  <jwe@octave.org>
+
+	* Array-util.cc (zero_dims_inquire): Eliminate unused variable MATCH.
+
+	* Sparse.cc (assign (Sparse<LT>& lhs, const Sparse<RT>& rhs)):
+	Eliminate unused variable N.
+
+	* MArray-f.cc (MArray<float>::norm (float p) const,
+	MArray<FloatComplex>::norm (float p) const): Pass P to xnorm.
+
+	* eigs-base.cc (EigsRealNonSymmetricFunc, EigsRealSymmetricFunc)
+	(EigsComplexNonSymmetricFunc): Avoid unused parameter warning.
+	* idx-vector.cc (idx_vector::freeze): Likewise.
+
 2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-locbuf.h: Specialize OCTAVE_LOCAL_BUFFER to use chunked
 	allocation for pointers and const pointers.
 
 2009-02-03  Benjamin Lindner  <lindnerben@gmx.net>
 	
 	* Makefile.in: Add missing library reference.
diff --git a/liboctave/MArray-f.cc b/liboctave/MArray-f.cc
--- a/liboctave/MArray-f.cc
+++ b/liboctave/MArray-f.cc
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 template <> OCTAVE_API float MArray<float>::norm (float p) const;
 #include "fColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API float
 MArray<float>::norm (float p) const
 {
-  return xnorm (FloatColumnVector (*this));
+  return xnorm (FloatColumnVector (*this), p);
 }
 
 template class OCTAVE_API MArray<float>;
 
 INSTANTIATE_MARRAY_FRIENDS (float, OCTAVE_API)
 
 #include "MArray2.h"
 #include "MArray2.cc"
diff --git a/liboctave/MArray-fC.cc b/liboctave/MArray-fC.cc
--- a/liboctave/MArray-fC.cc
+++ b/liboctave/MArray-fC.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 template <> OCTAVE_API float MArray<FloatComplex>::norm (float p) const;
 #include "fCColVector.h"
 #include "oct-norm.h"
 
 template <>
 OCTAVE_API float
 MArray<FloatComplex>::norm (float p) const
 {
-  return xnorm (FloatComplexColumnVector (*this));
+  return xnorm (FloatComplexColumnVector (*this), p);
 }
 
 template class OCTAVE_API MArray<FloatComplex>;
 
 INSTANTIATE_MARRAY_FRIENDS (FloatComplex, OCTAVE_API)
 
 #include "MArray2.h"
 #include "MArray2.cc"
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -3219,17 +3219,18 @@ assign (Sparse<LT>& lhs, const Sparse<RT
   else if (n_idx == 1)
     {
       int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
 
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  octave_idx_type lhs_len = lhs.length ();
 
-	  octave_idx_type n = idx_i.freeze (lhs_len, 0, true);
+	  // Called for side-effects on idx_i.
+	  idx_i.freeze (lhs_len, 0, true);
 
 	  if (idx_i)
             {
               if (lhs_is_empty
                   && idx_i.is_colon ()
                   && ! (rhs_nr == 1 || rhs_nc == 1))
                 {
                   (*current_liboctave_warning_with_id_handler)
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -1379,18 +1379,18 @@ EigsRealSymmetricMatrixShift (const M& m
 }
 
 octave_idx_type
 EigsRealSymmetricFunc (EigsFunc fun, octave_idx_type n,
 		       const std::string &_typ, double sigma,
 		       octave_idx_type k, octave_idx_type p, 
 		       octave_idx_type &info, Matrix &eig_vec, 
 		       ColumnVector &eig_val, ColumnVector &resid, 
-		       std::ostream& os, double tol, int rvec, bool cholB, 
-		       int disp, int maxit)
+		       std::ostream& os, double tol, int rvec,
+		       bool /* cholB */, int disp, int maxit)
 {
   std::string typ (_typ);
   bool have_sigma = (sigma ? true : false);
   char bmat = 'I';
   octave_idx_type mode = 1;
   int err = 0;
 
   if (resid.is_empty())
@@ -2357,18 +2357,18 @@ EigsRealNonSymmetricMatrixShift (const M
 }
 
 octave_idx_type
 EigsRealNonSymmetricFunc (EigsFunc fun, octave_idx_type n,
 			  const std::string &_typ, double sigmar,
 			  octave_idx_type k, octave_idx_type p, 
 			  octave_idx_type &info, ComplexMatrix &eig_vec, 
 			  ComplexColumnVector &eig_val, ColumnVector &resid, 
-			  std::ostream& os, double tol, int rvec, bool cholB, 
-			  int disp, int maxit)
+			  std::ostream& os, double tol, int rvec,
+			  bool /* cholB */, int disp, int maxit)
 {
   std::string typ (_typ);
   bool have_sigma = (sigmar ? true : false);
   char bmat = 'I';
   double sigmai = 0.;
   octave_idx_type mode = 1;
   int err = 0;
 
@@ -3297,18 +3297,18 @@ EigsComplexNonSymmetricMatrixShift (cons
 
 octave_idx_type
 EigsComplexNonSymmetricFunc (EigsComplexFunc fun, octave_idx_type n,
 			     const std::string &_typ, Complex sigma,
 			     octave_idx_type k, octave_idx_type p, 
 			     octave_idx_type &info, ComplexMatrix &eig_vec, 
 			     ComplexColumnVector &eig_val, 
 			     ComplexColumnVector &cresid, std::ostream& os, 
-			     double tol, int rvec, bool cholB, int disp, 
-			     int maxit)
+			     double tol, int rvec, bool /* cholB */,
+			     int disp, int maxit)
 {
   std::string typ (_typ);
   bool have_sigma = (std::abs(sigma) ? true : false);
   char bmat = 'I';
   octave_idx_type mode = 1;
   int err = 0;
 
   if (cresid.is_empty())
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -584,17 +584,17 @@ idx_vector::is_permutation (octave_idx_t
         }
 
     }
 
   return retval;
 }
 
 octave_idx_type 
-idx_vector::freeze (octave_idx_type z_len, const char *tag, bool resize_ok)
+idx_vector::freeze (octave_idx_type z_len, const char *, bool resize_ok)
 {
   if (! resize_ok && extent (z_len) > z_len)
     {
       (*current_liboctave_error_handler)
         ("invalid matrix index = %d", extent (z_len));
       rep->err = true;
       chkerr ();
     }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 2009-02-05  John W. Eaton  <jwe@octave.org>
 
+	* variables.cc (Vignore_function_time_stamp):
+	Eliminate unused static variable.
+
+	* debug.cc (get_file_line): Override default precedence in logical
+	expression.
+
+	* ov-null-mat.cc (default_null_str_numeric_conversion_function,
+	default_null_sq_str_numeric_conversion_function,
+	default_null_matrix_numeric_conversion_function):
+	Avoid unused variable warning.
+
+	* ov-flt-re-diag.cc (octave_float_diag_matrix::save_binary):
+	Avoid unused parameter warning.
+	* pt-eval.cc (tree_evaluator::visit_if_clause): Likewise.
+	* ov-typeinfo.cc (octave_value_typeinfo::do_register_type): Likewise.
+	* ov-base.cc (octave_base_value::subsref (const std::string&,
+	const std::list<octave_value_list>&, bool): Likewise.
+	* ov-flt-cx-diag.cc (octave_float_complex_diag_matrix::save_binary): 
+	Likewise.
+
 	* oct-hdf5.h: New file.
 	* ls-hdf5.cc, ov-base.h, ov.h: Include oct-hdf5.h instead of hdf5.h.
 	* ls-hdf5.h: Include oct-hdf5.h.
 	* load-save.cc: Include ls-hdf5.h instead of hdf5.h.
 	* ov-base-sparse.cc, load-save.cc:
 	Don't protect #include "ls-hdf5.h" with #ifdef.
 
 2009-02-04  Kai Habel  <kai.habel@gmx.de>
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -148,17 +148,17 @@ get_file_line (const std::string& fname,
   if (line > 0)
     line--;
 
   if (line < offsets.size () - 1)
     {
       size_t bol = offsets[line];
       size_t eol = offsets[line+1];
 
-      while (eol > 0 && buf[eol-1] == '\n' || buf[eol-1] == '\r')
+      while (eol > 0 && (buf[eol-1] == '\n' || buf[eol-1] == '\r'))
 	eol--;
 
       retval = buf.substr (bol, eol - bol);
     }
 
   return retval;
 }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -92,17 +92,17 @@ octave_base_value::subsref (const std::s
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value
 octave_base_value::subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
-                            bool auto_add)
+                            bool /* auto_add */)
 {
   // This way we may get a more meaningful error message.
   return subsref (type, idx);
 }
 
 octave_value
 octave_base_value::do_index_op (const octave_value_list&, bool)
 {
diff --git a/src/ov-flt-cx-diag.cc b/src/ov-flt-cx-diag.cc
--- a/src/ov-flt-cx-diag.cc
+++ b/src/ov-flt-cx-diag.cc
@@ -140,17 +140,17 @@ octave_float_complex_diag_matrix::conj (
 octave_value
 octave_float_complex_diag_matrix::imag (void) const
 {
   return ::imag (matrix);
 }
 
 bool 
 octave_float_complex_diag_matrix::save_binary (std::ostream& os, 
-                                               bool& save_as_floats)
+                                               bool& /* save_as_floats */)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
   FloatComplexMatrix m = FloatComplexMatrix (matrix.diag ());
   save_type st = LS_FLOAT;
diff --git a/src/ov-flt-re-diag.cc b/src/ov-flt-re-diag.cc
--- a/src/ov-flt-re-diag.cc
+++ b/src/ov-flt-re-diag.cc
@@ -110,17 +110,18 @@ octave_float_diag_matrix::conj (void) co
 
 octave_value
 octave_float_diag_matrix::imag (void) const
 {
   return DiagMatrix (matrix.rows (), matrix.cols (), 0.0f);
 }
 
 bool 
-octave_float_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
+octave_float_diag_matrix::save_binary (std::ostream& os,
+				       bool& /* save_as_floats*/)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
   FloatMatrix m = FloatMatrix (matrix.diag ());
   save_type st = LS_FLOAT;
diff --git a/src/ov-null-mat.cc b/src/ov-null-mat.cc
--- a/src/ov-null-mat.cc
+++ b/src/ov-null-mat.cc
@@ -30,17 +30,18 @@ along with Octave; see the file COPYING.
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_null_matrix, "null_matrix", "double");
 
 const octave_value octave_null_matrix::instance (new octave_null_matrix ());
 
 static octave_base_value *
 default_null_matrix_numeric_conversion_function (const octave_base_value& a)
 {
-  CAST_CONV_ARG (const octave_null_matrix&);
+  // The cast is not necessary?
+  // CAST_CONV_ARG (const octave_null_matrix&);
 
   return a.empty_clone ();
 }
 
 octave_base_value::type_conv_info
 octave_null_matrix::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_null_matrix_numeric_conversion_function, 
@@ -49,17 +50,18 @@ octave_null_matrix::numeric_conversion_f
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_null_str, "null_string", "char");
 
 const octave_value octave_null_str::instance (new octave_null_str ());
 
 static octave_base_value *
 default_null_str_numeric_conversion_function (const octave_base_value& a)
 {
-  CAST_CONV_ARG (const octave_null_str&);
+  // The cast is not necessary?
+  // CAST_CONV_ARG (const octave_null_str&);
 
   return a.empty_clone ();
 }
 
 octave_base_value::type_conv_info
 octave_null_str::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_null_str_numeric_conversion_function, 
@@ -68,17 +70,18 @@ octave_null_str::numeric_conversion_func
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_null_sq_str, "null_sq_string", "char");
 
 const octave_value octave_null_sq_str::instance (new octave_null_sq_str ());
 
 static octave_base_value *
 default_null_sq_str_numeric_conversion_function (const octave_base_value& a)
 {
-  CAST_CONV_ARG (const octave_null_sq_str&);
+  // The cast is not necessary?
+  // CAST_CONV_ARG (const octave_null_sq_str&);
 
   return a.empty_clone ();
 }
 
 octave_base_value::type_conv_info
 octave_null_sq_str::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_null_sq_str_numeric_conversion_function, 
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -206,17 +206,17 @@ octave_value_typeinfo::register_widening
     ? instance->do_register_widening_op (t, t_result, f) : false;
 }
 
 // FIXME -- we should also store all class names and provide a
 // way to list them (calling class with nargin == 0?).
 
 int
 octave_value_typeinfo::do_register_type (const std::string& t_name,
-					 const std::string& c_name,
+					 const std::string& /* c_name */,
 					 const octave_value& val)
 {
   int i = 0;
 
   for (i = 0; i < num_types; i++)
     if (t_name == types (i))
       return i;
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -505,17 +505,17 @@ tree_evaluator::visit_function_def (tree
 
 void
 tree_evaluator::visit_identifier (tree_identifier&)
 {
   panic_impossible ();
 }
 
 void
-tree_evaluator::visit_if_clause (tree_if_clause& tic)
+tree_evaluator::visit_if_clause (tree_if_clause&)
 {
   panic_impossible ();
 }
 
 void
 tree_evaluator::visit_if_command (tree_if_command& cmd)
 {
   tree_if_command_list *lst = cmd.cmd_list ();
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -56,20 +56,16 @@ along with Octave; see the file COPYING.
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// Should Octave always check to see if function files have changed
-// since they were last compiled?
-static int Vignore_function_time_stamp = 1;
-
 // Defines layout for the whos/who -long command
 static std::string Vwhos_line_format
   = "  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\n";
 
 void
 clear_mex_functions (void)
 {
   symbol_table::clear_mex_functions ();
