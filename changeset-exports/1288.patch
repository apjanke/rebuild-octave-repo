# HG changeset patch
# User jwe
# Date 799101073 0
#      Fri Apr 28 20:31:13 1995 +0000
# Node ID 4acabfbdd3812639078cbab144c6a03d03a073db
# Parent  3f49454bc68cad8e013b9cde0f82b2f1ed5def2e
[project @ 1995-04-28 20:23:04 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -768,27 +768,24 @@ display the definition of each NAME that
 	{
 	  argv++;
 
 	  if (! *argv || ! **argv)
 	    continue;
 
 	  char *id = strsave (*argv);
 	  char *elts = 0;
-	  char *ptr = strchr (id, '.');
-	  if (ptr)
+	  if (id[strlen (id) - 1] != '.')
 	    {
-	      *ptr = '\0';
-
-	      elts = ptr + 1;
-	      ptr = strrchr (elts, '.');
+	      char *ptr = strchr (id, '.');
 	      if (ptr)
-		*ptr = '\0';
-	      else
-		elts = 0;
+		{
+		  *ptr = '\0';
+		  elts = ptr + 1;
+		}
 	    }
 
 	  symbol_record *sym_rec = lookup_by_name (id, 0);
 
 	  if (sym_rec)
 	    {
 	      if (sym_rec->is_user_function ())
 		{
@@ -806,42 +803,53 @@ display the definition of each NAME that
 		output_buf << *argv << " is a builtin text-function\n";
 	      else if (sym_rec->is_builtin_function ())
 		output_buf << *argv << " is a builtin function\n";
 	      else if (sym_rec->is_user_variable ()
 		       || sym_rec->is_builtin_variable ())
 		{
 		  tree_fvc *defn = sym_rec->def ();
 
-		  assert (defn->is_constant ());
+		  assert (defn && defn->is_constant ());
 
 		  tree_constant *tmp = (tree_constant *) defn;
 
 		  int var_ok = 1;
 		  if (tmp && tmp->is_map ())
 		    {
 		      if (elts && *elts)
 			{
-			  tree_constant ult;
-			  ult = tmp->lookup_map_element (elts, 0, 1);
+			  tree_constant ult =
+			    tmp->lookup_map_element (elts, 0, 1);
 
 			  if (! ult.is_defined ())
 			    var_ok = 0;			    
 			}
 		    }
-		  
+
 		  if (nargout == 0 && ! quiet)
 		    {
-		      output_buf << *argv;
-		      if (sym_rec->is_user_variable ())
-			output_buf << " is a user-defined variable\n";
+		      if (var_ok)
+			{
+			  output_buf << *argv;
+			  if (sym_rec->is_user_variable ())
+			    output_buf << " is a user-defined variable\n";
+			  else
+			    output_buf << " is a built-in variable\n";
+			}
 		      else
-			output_buf << " is a built-in variable\n";
+			{
+			  if (elts && *elts)
+			    output_buf << "type: structure `" << id
+			      << "' has no member `" << elts << "'\n";
+			  else
+			    output_buf << "type: `" << id
+			      << "' has unknown type!";
+			}
 		    }
-
 		  if (! tmp->is_map ())
 		    {
 		      tmp->print_code (output_buf);
 
 		      if (nargout == 0)
 			output_buf << "\n";
 		    }
 		}
@@ -857,17 +865,17 @@ display the definition of each NAME that
       output_buf << ends;
 
       if (nargout == 0)
 	maybe_page_output (output_buf);
       else
 	{
 	  char *s = output_buf.str ();
 	  retval = s;
-	  delete s;
+	  delete [] s;
 	}
     }
   else
     print_usage ("type");
 
   DELETE_ARGV;
 
   return retval;
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -455,17 +455,16 @@ do_input_echo (const char *input_string)
 	  if (input_string[len-1] != '\n')
 	    buf << "\n";
 	}
 
       maybe_page_output (buf);
     }
 }
 
-
 // Use GNU readline to get an input line and store it in the history
 // list.
 
 static char *
 octave_gets (void)
 {
   if (octave_gets_line)
     {
@@ -633,31 +632,34 @@ get_input_from_stdin (void)
 }
 
 static char **
 generate_struct_completions (const char *text, char *& prefix,
 			     char *& hint)
 {
   char **names = 0;
 
+  assert (text);
+
   char *id = strsave (text);
   char *ptr = strchr (id, '.');
   *ptr = '\0';
 
   char *elts = ptr + 1;
   ptr = strrchr (elts, '.');
   if (ptr)
     *ptr = '\0';
   else
     elts = 0;
 
   prefix = strsave (text);
   ptr = strrchr (prefix, '.');
   *ptr = '\0';
 
+  delete [] hint;
   hint = strsave (ptr + 1);
 
   symbol_record *sr = curr_sym_tab->lookup (id, 0, 0);
   if (! sr)
     sr = global_sym_tab->lookup (id, 0, 0);
 
   if (sr && sr->is_defined ())
     {
@@ -698,35 +700,31 @@ generate_possible_completions (const cha
 {
   char **names = 0;
 
   prefix = 0;
 
   if (text && *text && *text != '.')
     {
       if (strrchr (text, '.'))
-	{
-	  names = generate_struct_completions (text, prefix, hint);
-	}
+	names = generate_struct_completions (text, prefix, hint);
       else
-	{
-	  hint = strsave (text);
-
-	  names = make_name_list ();
-	}
+	names = make_name_list ();
     }
 
   return names;
 }
 
 static int
 looks_like_struct (const char *nm)
 {
   int retval = 0;
 
+  assert (nm);
+
   char *id = strsave (nm);
   char *elts = 0;
   char *ptr = strchr (id, '.');
   if (ptr)
     {
       *ptr = '\0';
       elts = ptr + 1;
     }
@@ -790,27 +788,26 @@ command_generator (const char *text, int
 
 	  name_list = 0;
 	}
 
       delete [] prefix;
       prefix = 0;
 
       delete [] hint;
-      prefix = 0;
+      hint = strsave (text);
 
       name_list = generate_possible_completions (text, prefix, hint);
 
       prefix_len = 0;
       if (prefix)
-	prefix_len = strlen (prefix) + 1;
+	prefix_len = strlen (prefix);
 	
-      hint_len = 0;
-      if (hint)
-	hint_len = strlen (hint);
+      assert (hint);
+      hint_len = strlen (hint);
 
       matches = 0;
       if (name_list)
 	{
 	  int i = 0;
 	  while (name_list[i])
 	    if (strncmp (name_list[i++], hint, hint_len) == 0)
 	      matches++;
@@ -820,18 +817,18 @@ command_generator (const char *text, int
   if (name_list && matches)
     {
       char *name;
       while ((name = name_list[list_index]) != 0)
 	{
 	  list_index++;
 	  if (strncmp (name, hint, hint_len) == 0)
 	    {
-	      int len = 3 + prefix_len + strlen (name);
-	      char *buf = xmalloc (len);
+	      int len = 2 + prefix_len + strlen (name);
+	      char *buf = (char *) xmalloc (len);
 
 	      if (prefix)
 		{
 		  strcpy (buf, prefix);
 		  strcat (buf, ".");
 		  strcat (buf, name);
 		}
 	      else
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -181,19 +181,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 <TEXT_FCN>[\"\'] {
     current_input_column++;
     return handle_string (yytext[0], 1);
   }
 
 <HELP_FCN>[^ \t\n]*{S}*	|
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
-    static char *tok = 0;
-    delete [] tok;
-    tok = strip_trailing_whitespace (yytext);
+    char *tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, TEXT);
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
@@ -398,19 +396,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
-    static char *tok = 0;
-    delete [] tok;
-    tok = strip_trailing_whitespace (yytext);
+    char *tok = strip_trailing_whitespace (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     return handle_identifier (tok, spc_gobbled);
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -65,16 +65,17 @@ extern "C"
 #include "help.h"
 #include "octave.h"
 #include "parse.h"
 #include "defaults.h"
 #include "user-prefs.h"
 #include "procstream.h"
 #include "unwind-prot.h"
 #include "octave-hist.h"
+#include "pathsearch.h"
 #include "builtins.h"
 #include "version.h"
 #include "file-io.h"
 #include "sysdep.h"
 #include "defun.h"
 
 #if !defined (HAVE_ATEXIT) && defined (HAVE_ON_EXIT)
 extern "C" { int on_exit (); }
@@ -257,16 +258,18 @@ initialize_globals (char *name)
 	}
       else  
 	putenv (strsave ("TEXMF=" OCTAVE_DATADIR "/octave"));
     }
 
   raw_prog_name = strsave (name);
   prog_name = strsave ("octave");
 
+  kpse_set_progname (name);
+
   load_path = default_path ();
 
   info_file = default_info_file ();
 
   editor = default_editor ();
 }
 
 void
diff --git a/src/token.cc b/src/token.cc
--- a/src/token.cc
+++ b/src/token.cc
@@ -22,16 +22,17 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <assert.h>
 
+#include "error.h"
 #include "token.h"
 #include "utils.h"
 #include "symtab.h"
 
 token::token (int l, int c)
 {
   line_num = l;
   column_num = c;
@@ -49,17 +50,17 @@ token::token (char *s, int l, int c)
 }
 
 token::token (double d, char *s, int l, int c)
 {
   line_num = l;
   column_num = c;
   type_tag = double_token;
   num = d;
-  orig_text = strsave (s);
+  orig_text = 0; // strsave (s);
 }
 
 token::token (end_tok_type t, int l, int c)
 {
   line_num = l;
   column_num = c;
   type_tag = ettype_token;
   et = t;
@@ -139,14 +140,25 @@ token::sym_rec (void)
 }
 
 char *
 token::text_rep (void)
 {
   return orig_text;
 }
 
+token::token (const token& tok)
+{
+  panic_impossible ();
+}
+
+token&
+operator = (const token& tok)
+{
+  panic_impossible ();
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -73,16 +73,19 @@ public:
   double number (void);
   end_tok_type ettype (void);
   plot_tok_type pttype (void);
   symbol_record *sym_rec (void);
 
   char *text_rep (void);
 
 private:
+  token (const token& tok);
+  token& operator = (const token& tok);
+
   int line_num;
   int column_num;
   token_type type_tag;
   union
     {
       char *str;
       double num;
       end_tok_type et;
