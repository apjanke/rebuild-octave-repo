# HG changeset patch
# User jwe
# Date 1100025086 0
#      Tue Nov 09 18:31:26 2004 +0000
# Node ID e71be9c548f23c4ecf48550c8fad52d30412f3ac
# Parent  97b62f0c1beeb0f5a41aee85488810d5a9b2bf5a
[project @ 2004-11-09 18:31:25 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -649,37 +649,34 @@ ComplexNDArray::sumsq (int dim) const
 
 ComplexNDArray 
 ComplexNDArray::sum (int dim) const
 {
   MX_ND_COMPLEX_OP_REDUCTION (+= elem (iter_idx), Complex (0, 0));
 }
 
 ComplexNDArray
-concat (const ComplexNDArray& ra, const ComplexNDArray& rb, 
-	const Array<int>& ra_idx)
+ComplexNDArray::concat (const ComplexNDArray& rb, const Array<int>& ra_idx)
 {
-  ComplexNDArray retval (ra);
   if (rb.numel () > 0)
-    retval.insert (rb, ra_idx);
-  return retval;
+    insert (rb, ra_idx);
+  return *this;
 }
 
 ComplexNDArray
-concat (const ComplexNDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
+ComplexNDArray::concat (const NDArray& rb, const Array<int>& ra_idx)
 {
-  ComplexNDArray retval (ra);
   ComplexNDArray tmp (rb);
   if (rb.numel () > 0)
-    retval.insert (tmp, ra_idx);
-  return retval;
+    insert (tmp, ra_idx);
+  return *this;
 }
 
 ComplexNDArray
-concat (const NDArray& ra, const ComplexNDArray& rb, const Array<int>& ra_idx)
+concat (NDArray& ra, ComplexNDArray& rb, const Array<int>& ra_idx)
 {
   ComplexNDArray retval (ra);
   if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
 static const Complex Complex_NaN_result (octave_NaN, octave_NaN);
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -71,23 +71,18 @@ public:
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   ComplexNDArray cumprod (int dim = -1) const;
   ComplexNDArray cumsum (int dim = -1) const;
   ComplexNDArray prod (int dim = -1) const;
   ComplexNDArray sum (int dim = -1) const;
   ComplexNDArray sumsq (int dim = -1) const;
-  friend ComplexNDArray concat (const ComplexNDArray& ra, 
-				const ComplexNDArray& rb, 
-				const Array<int>& ra_idx);
-  friend ComplexNDArray concat (const ComplexNDArray& ra, const NDArray& rb,
-				const Array<int>& ra_idx);
-  friend ComplexNDArray concat (const NDArray& ra, const ComplexNDArray& rb,
-				const Array<int>& ra_idx);
+  ComplexNDArray concat (const ComplexNDArray& rb, const Array<int>& ra_idx);
+  ComplexNDArray concat (const NDArray& rb, const Array<int>& ra_idx);
 
   ComplexNDArray max (int dim = 0) const;
   ComplexNDArray max (ArrayN<int>& index, int dim = 0) const;
   ComplexNDArray min (int dim = 0) const;
   ComplexNDArray min (ArrayN<int>& index, int dim = 0) const;
 
   ComplexNDArray& insert (const NDArray& a, int r, int c);
   ComplexNDArray& insert (const ComplexNDArray& a, int r, int c);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,40 @@
+2004-11-09  David Bateman  <dbateman@free.fr>
+
+	* dNDArray.cc (concat): Delete.
+	(NDArray::concat): New methods.
+	* dNDArray.h: Provide decls.
+
+	* CNDArray.cc (concat): Delete.
+	(ComplexNDArray::concat): New methods.
+	* CNDArray.h: Provide decls.
+
+	* boolNDArray.cc (concat): Delete.
+	(boolNDArray::concat): New methods.
+	* boolNDArray.h: Provide decls.
+
+	* chNDArray.cc (concat): Delete.
+	(charNDArray::concat): New methods.
+	* chNDArray.h: Provide decls.
+
+	* oct-inttypes.h (OCTAVE_INT_CONCAT_FN, OCTAVE_INT_CONCAT_DECL):
+	Delete macros.
+
+	* int8NDArray.h, int16NDArray.h, int32NDArray.h, int64NDArray.h,
+	uint8NDArray.h, uint16NDArray.h, uint32NDArray.h, uint64NDArray.h
+	(OCTAVE_INT_CONCAT_DECL): Delete use of macro.
+
+	* int8NDArray.cc, int16NDArray.cc, int32NDArray.cc, int64NDArray.cc,
+	uint8NDArray.cc, uint16NDArray.cc, uint32NDArray.cc, uint64NDArray.cc
+	(OCTAVE_INT_CONCAT_FN): Delete use of macro.
+
+	* intNDArray.cc (intNDArray<T>::concat): New method.
+	* intNDArray.h: Provide decl.
+
 2004-11-08  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.cc: New file.
 	* Makefile.in (TI_SRC): Add it to the list.
 	* oct-inttypes.h (OCTAVE_US_TYPE1_CMP_OP, OCTAVE_US_TYPE1_CMP_OPS,
 	OCTAVE_SU_TYPE1_CMP_OP, OCTAVE_SU_TYPE1_CMP_OPS,
 	OCTAVE_TYPE1_CMP_OPS, OCTAVE_US_TYPE2_CMP_OP,
 	OCTAVE_US_TYPE2_CMP_OPS, OCTAVE_SU_TYPE2_CMP_OP,
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -57,22 +57,21 @@ boolNDArray::all (int dim) const
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
 boolNDArray
-concat (const boolNDArray& ra, const boolNDArray& rb, const Array<int>& ra_idx)
+boolNDArray::concat (const boolNDArray& rb, const Array<int>& ra_idx)
 {
-  boolNDArray retval (ra);
   if (rb.numel () > 0)
-    retval.insert (rb, ra_idx);
-  return retval;
+    insert (rb, ra_idx);
+  return *this;
 }
 
 boolNDArray&
 boolNDArray::insert (const boolNDArray& a, int r, int c)
 {
   Array<bool>::insert (a, r, c);
   return *this;
 }
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -65,18 +65,17 @@ public:
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
-  friend boolNDArray concat (const boolNDArray& ra, const boolNDArray& rb, 
-			     const Array<int>& ra_idx);
+  boolNDArray concat (const boolNDArray& rb, const Array<int>& ra_idx);
 
   boolNDArray& insert (const boolNDArray& a, int r, int c);
   boolNDArray& insert (const boolNDArray& a, const Array<int>& ra_idx);
 
   boolMatrix matrix_value (void) const;
 
   boolNDArray squeeze (void) const { return ArrayN<bool>::squeeze (); }
 
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -45,95 +45,57 @@ charNDArray::all (int dim) const
 
 boolNDArray
 charNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
 }
 
 charNDArray
-concat (const charNDArray& ra, const charNDArray& rb, const Array<int>& ra_idx)
+charNDArray::concat (const charNDArray& rb, const Array<int>& ra_idx)
 {
-  charNDArray retval (ra);
   if (rb.numel () > 0)
-    retval.insert (rb, ra_idx);
-  return retval;
+    insert (rb, ra_idx);
+  return *this;
 }
 
 charNDArray
-concat (const charNDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
+charNDArray::concat (const NDArray& rb, const Array<int>& ra_idx)
 {
-  charNDArray retval (ra);
   charNDArray tmp (rb.dims ());
   int nel = rb.numel ();
 
   if (rb.numel () == 0)
-    return retval;
+    return *this;
 
   for (int i = 0; i < nel; i++)
     {
       double d = rb.elem (i);
 
       if (xisnan (d))
 	{
 	  (*current_liboctave_error_handler)
 	    ("invalid conversion from NaN to character");
-	  return retval;
+	  return *this;
 	}
       else
 	{
 	  int ival = NINT (d);
 
 	  if (ival < 0 || ival > UCHAR_MAX)
 	    // XXX FIXME XXX -- is there something
 	    // better we could do? Should we warn the user?
 	    ival = 0;
 
 	  tmp.elem (i) = static_cast<char>(ival);
 	}
     }
 
-  retval.insert (tmp, ra_idx);
-  return retval;
-}
-
-charNDArray
-concat (const NDArray& ra, const charNDArray& rb, const Array<int>& ra_idx)
-{
-  charNDArray retval (ra.dims ());
-  int nel = ra.numel ();
-
-  for (int i = 0; i < nel; i++)
-    {
-      double d = ra.elem (i);
-
-      if (xisnan (d))
-	{
-	  (*current_liboctave_error_handler)
-	    ("invalid conversion from NaN to character");
-	  return retval;
-	}
-      else
-	{
-	  int ival = NINT (d);
-
-	  if (ival < 0 || ival > UCHAR_MAX)
-	    // XXX FIXME XXX -- is there something
-	    // better we could do? Should we warn the user?
-	    ival = 0;
-
-	  retval.elem (i) = static_cast<char>(ival);
-	}
-    }
-
-  if (rb.numel () == 0)
-    return retval;
-
-  retval.insert (rb, ra_idx);
-  return retval;
+  insert (tmp, ra_idx);
+  return *this;
 }
 
 charNDArray&
 charNDArray::insert (const charNDArray& a, int r, int c)
 {
   Array<char>::insert (a, r, c);
   return *this;
 }
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -63,22 +63,18 @@ public:
       MArrayN<char>::operator = (a);
       return *this;
     }
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
-  friend charNDArray concat (const charNDArray& ra, const charNDArray& rb, 
-			     const Array<int>& ra_idx);
-  friend charNDArray concat (const charNDArray& ra, const NDArray& rb,
-			     const Array<int>& ra_idx);
-  friend charNDArray concat (const NDArray& ra, const charNDArray& rb,
-			     const Array<int>& ra_idx);
+  charNDArray concat (const charNDArray& rb, const Array<int>& ra_idx);
+  charNDArray concat (const NDArray& rb, const Array<int>& ra_idx);
 
   charNDArray& insert (const charNDArray& a, int r, int c);
   charNDArray& insert (const charNDArray& a, const Array<int>& ra_idx);
   
   charMatrix matrix_value (void) const;
 
   charNDArray squeeze (void) const { return ArrayN<char>::squeeze (); }
 
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -788,24 +788,68 @@ NDArray::min (ArrayN<int>& idx_arg, int 
       result.elem (i) = tmp_min;
       idx_arg.elem (i) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
     }
 
   return result;
 }
 
 NDArray
-concat (const NDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
+NDArray::concat (const NDArray& rb, const Array<int>& ra_idx)
 {
-  NDArray retval (ra);
+  if (rb.numel () > 0)
+    insert (rb, ra_idx);
+  return *this;
+}
+
+ComplexNDArray
+NDArray::concat (const ComplexNDArray& rb, const Array<int>& ra_idx)
+{
+  ComplexNDArray retval (*this);
   if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
+charNDArray
+NDArray::concat (const charNDArray& rb, const Array<int>& ra_idx)
+{
+  charNDArray retval (dims ());
+  int nel = numel ();
+
+  for (int i = 0; i < nel; i++)
+    {
+      double d = elem (i);
+
+      if (xisnan (d))
+	{
+	  (*current_liboctave_error_handler)
+	    ("invalid conversion from NaN to character");
+	  return retval;
+	}
+      else
+	{
+	  int ival = NINT (d);
+
+	  if (ival < 0 || ival > UCHAR_MAX)
+	    // XXX FIXME XXX -- is there something
+	    // better we could do? Should we warn the user?
+	    ival = 0;
+
+	  retval.elem (i) = static_cast<char>(ival);
+	}
+    }
+
+  if (rb.numel () == 0)
+    return retval;
+
+  retval.insert (rb, ra_idx);
+  return retval;
+}
+
 NDArray
 real (const ComplexNDArray& a)
 {
   int a_len = a.length ();
   NDArray retval;
   if (a_len > 0)
     retval = NDArray (mx_inline_real_dup (a.data (), a_len), a.dims ());
   return retval;
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -76,18 +76,19 @@ public:
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   NDArray cumprod (int dim = -1) const;
   NDArray cumsum (int dim = -1) const;
   NDArray prod (int dim = -1) const;
   NDArray sum (int dim = -1) const;  
   NDArray sumsq (int dim = -1) const;
-  friend NDArray concat (const NDArray& ra, const NDArray& rb, 
-			 const Array<int>& ra_idx);
+  NDArray concat (const NDArray& rb, const Array<int>& ra_idx);
+  ComplexNDArray concat (const ComplexNDArray& rb, const Array<int>& ra_idx);
+  charNDArray concat (const charNDArray& rb, const Array<int>& ra_idx);
 
   NDArray max (int dim = 0) const;
   NDArray max (ArrayN<int>& index, int dim = 0) const;
   NDArray min (int dim = 0) const;
   NDArray min (ArrayN<int>& index, int dim = 0) const;
   
   NDArray& insert (const NDArray& a, int r, int c);
   NDArray& insert (const NDArray& a, const Array<int>& ra_idx);
diff --git a/liboctave/int16NDArray.cc b/liboctave/int16NDArray.cc
--- a/liboctave/int16NDArray.cc
+++ b/liboctave/int16NDArray.cc
@@ -40,18 +40,16 @@ template octave_int16 pow (const octave_
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int16>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_int16)
-
 NDS_CMP_OPS (int16NDArray, , octave_int16, )
 NDS_BOOL_OPS (int16NDArray, octave_int16, octave_int16 (0))
 
 SND_CMP_OPS (octave_int16, , int16NDArray, )
 SND_BOOL_OPS (octave_int16, int16NDArray, octave_int16 (0))
 
 NDND_CMP_OPS (int16NDArray, , int16NDArray, )
 NDND_BOOL_OPS (int16NDArray, int16NDArray, octave_int16 (0))
diff --git a/liboctave/int16NDArray.h b/liboctave/int16NDArray.h
--- a/liboctave/int16NDArray.h
+++ b/liboctave/int16NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_int16> int16NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_int16)
-
 NDS_CMP_OP_DECLS (int16NDArray, octave_int16)
 NDS_BOOL_OP_DECLS (int16NDArray, octave_int16)
 
 SND_CMP_OP_DECLS (octave_int16, int16NDArray)
 SND_BOOL_OP_DECLS (octave_int16, int16NDArray)
 
 NDND_CMP_OP_DECLS (int16NDArray, int16NDArray)
 NDND_BOOL_OP_DECLS (int16NDArray, int16NDArray)
diff --git a/liboctave/int32NDArray.cc b/liboctave/int32NDArray.cc
--- a/liboctave/int32NDArray.cc
+++ b/liboctave/int32NDArray.cc
@@ -40,18 +40,16 @@ template octave_int32 pow (const octave_
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int32>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_int32)
-
 NDS_CMP_OPS (int32NDArray, , octave_int32, )
 NDS_BOOL_OPS (int32NDArray, octave_int32, octave_int32 (0))
 
 SND_CMP_OPS (octave_int32, , int32NDArray, )
 SND_BOOL_OPS (octave_int32, int32NDArray, octave_int32 (0))
 
 NDND_CMP_OPS (int32NDArray, , int32NDArray, )
 NDND_BOOL_OPS (int32NDArray, int32NDArray, octave_int32 (0))
diff --git a/liboctave/int32NDArray.h b/liboctave/int32NDArray.h
--- a/liboctave/int32NDArray.h
+++ b/liboctave/int32NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_int32> int32NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_int32)
-
 NDS_CMP_OP_DECLS (int32NDArray, octave_int32)
 NDS_BOOL_OP_DECLS (int32NDArray, octave_int32)
 
 SND_CMP_OP_DECLS (octave_int32, int32NDArray)
 SND_BOOL_OP_DECLS (octave_int32, int32NDArray)
 
 NDND_CMP_OP_DECLS (int32NDArray, int32NDArray)
 NDND_BOOL_OP_DECLS (int32NDArray, int32NDArray)
diff --git a/liboctave/int64NDArray.cc b/liboctave/int64NDArray.cc
--- a/liboctave/int64NDArray.cc
+++ b/liboctave/int64NDArray.cc
@@ -38,18 +38,16 @@ template class intNDArray<octave_int64>;
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int64>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int64>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_int64)
-
 NDS_CMP_OPS (int64NDArray, , octave_int64, )
 NDS_BOOL_OPS (int64NDArray, octave_int64, octave_int64 (0))
 
 SND_CMP_OPS (octave_int64, , int64NDArray, )
 SND_BOOL_OPS (octave_int64, int64NDArray, octave_int64 (0))
 
 NDND_CMP_OPS (int64NDArray, , int64NDArray, )
 NDND_BOOL_OPS (int64NDArray, int64NDArray, octave_int64 (0))
diff --git a/liboctave/int64NDArray.h b/liboctave/int64NDArray.h
--- a/liboctave/int64NDArray.h
+++ b/liboctave/int64NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_int64> int64NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_int64)
-
 NDS_CMP_OP_DECLS (int64NDArray, octave_int64)
 NDS_BOOL_OP_DECLS (int64NDArray, octave_int64)
 
 SND_CMP_OP_DECLS (octave_int64, int64NDArray)
 SND_BOOL_OP_DECLS (octave_int64, int64NDArray)
 
 NDND_CMP_OP_DECLS (int64NDArray, int64NDArray)
 NDND_BOOL_OP_DECLS (int64NDArray, int64NDArray)
diff --git a/liboctave/int8NDArray.cc b/liboctave/int8NDArray.cc
--- a/liboctave/int8NDArray.cc
+++ b/liboctave/int8NDArray.cc
@@ -40,18 +40,16 @@ template octave_int8 pow (const octave_i
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int8>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_int8)
-
 NDS_CMP_OPS (int8NDArray, , octave_int8, )
 NDS_BOOL_OPS (int8NDArray, octave_int8, octave_int8 (0))
 
 SND_CMP_OPS (octave_int8, , int8NDArray, )
 SND_BOOL_OPS (octave_int8, int8NDArray, octave_int8 (0))
 
 NDND_CMP_OPS (int8NDArray, , int8NDArray, )
 NDND_BOOL_OPS (int8NDArray, int8NDArray, octave_int8 (0))
diff --git a/liboctave/int8NDArray.h b/liboctave/int8NDArray.h
--- a/liboctave/int8NDArray.h
+++ b/liboctave/int8NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_int8> int8NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_int8)
-
 NDS_CMP_OP_DECLS (int8NDArray, octave_int8)
 NDS_BOOL_OP_DECLS (int8NDArray, octave_int8)
 
 SND_CMP_OP_DECLS (octave_int8, int8NDArray)
 SND_BOOL_OP_DECLS (octave_int8, int8NDArray)
 
 NDND_CMP_OP_DECLS (int8NDArray, int8NDArray)
 NDND_BOOL_OP_DECLS (int8NDArray, int8NDArray)
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -76,16 +76,25 @@ template <class T>
 int 
 intNDArray<T>::compute_index (Array<int>& ra_idx,
 			      const dim_vector& dimensions)
 {
   return ::compute_index (ra_idx, dimensions);
 }
 
 template <class T>
+intNDArray<T>
+intNDArray<T>::concat (const intNDArray<T>& rb, const Array<int>& ra_idx)
+{
+  if (rb.numel () > 0);
+    insert (rb, ra_idx);
+  return *this;
+}
+
+template <class T>
 intNDArray<T>&
 intNDArray<T>::insert (const intNDArray<T>& a, int r, int c)
 {
   Array<T>::insert (a, r, c);
   return *this;
 }
 
 template <class T>
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -71,16 +71,18 @@ public:
   boolNDArray any (int dim = -1) const;
 
   intNDArray squeeze (void) const
     { return intNDArray<T> (MArrayN<T>::squeeze ()); }
 
   intNDArray transpose (void) const
     { return intNDArray<T> (MArrayN<T>::transpose ()); }
 
+  intNDArray concat (const intNDArray<T>& rb, const Array<int>& ra_idx);
+
   intNDArray& insert (const intNDArray<T>& a, int r, int c);
   intNDArray& insert (const intNDArray<T>& a, const Array<int>& ra_idx);
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
   static int compute_index (Array<int>& ra_idx,
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -615,31 +615,16 @@ OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint64
   OCTAVE_SU_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
 
 #define OCTAVE_TYPE2_CMP_OP_DECLS(UT, ST) \
   OCTAVE_US_TYPE2_CMP_OP_DECLS (UT, ST) \
   OCTAVE_SU_TYPE2_CMP_OP_DECLS (ST, UT)
 
 OCTAVE_TYPE2_CMP_OP_DECLS (octave_uint32_t, octave_int64_t)
 
-#define OCTAVE_INT_CONCAT_FN(TYPE) \
-intNDArray< TYPE > \
-concat (const intNDArray< TYPE >& ra, const intNDArray< TYPE >& rb, \
-	const Array<int>& ra_idx) \
-{ \
-  intNDArray< TYPE > retval (ra); \
-  retval.insert (rb, ra_idx); \
-  return retval; \
-}
-
-#define OCTAVE_INT_CONCAT_DECL(TYPE) \
-intNDArray< TYPE > \
-concat (const intNDArray< TYPE >& ra, const intNDArray< TYPE >& rb, \
-	const Array<int>& ra_idx);
-
 #undef OCTAVE_INT_BINOP_TRAIT
 #undef OCTAVE_US_S_FTR
 #undef OCTAVE_US_S_FTR_FCNS
 #undef OCTAVE_S_US_FTR
 #undef OCTAVE_S_US_FTR_FCNS
 #undef OCTAVE_INT_FIT_TO_RANGE
 #undef OCTAVE_INT_MIN_VAL2
 #undef OCTAVE_INT_MAX_VAL2
diff --git a/liboctave/uint16NDArray.cc b/liboctave/uint16NDArray.cc
--- a/liboctave/uint16NDArray.cc
+++ b/liboctave/uint16NDArray.cc
@@ -40,18 +40,16 @@ template octave_uint16 pow (const octave
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint16>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_uint16)
-
 NDS_CMP_OPS (uint16NDArray, , octave_uint16, )
 NDS_BOOL_OPS (uint16NDArray, octave_uint16, octave_uint16 (0))
 
 SND_CMP_OPS (octave_uint16, , uint16NDArray, )
 SND_BOOL_OPS (octave_uint16, uint16NDArray, octave_uint16 (0))
 
 NDND_CMP_OPS (uint16NDArray, , uint16NDArray, )
 NDND_BOOL_OPS (uint16NDArray, uint16NDArray, octave_uint16 (0))
diff --git a/liboctave/uint16NDArray.h b/liboctave/uint16NDArray.h
--- a/liboctave/uint16NDArray.h
+++ b/liboctave/uint16NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_uint16> uint16NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_uint16)
-
 NDS_CMP_OP_DECLS (uint16NDArray, octave_uint16)
 NDS_BOOL_OP_DECLS (uint16NDArray, octave_uint16)
 
 SND_CMP_OP_DECLS (octave_uint16, uint16NDArray)
 SND_BOOL_OP_DECLS (octave_uint16, uint16NDArray)
 
 NDND_CMP_OP_DECLS (uint16NDArray, uint16NDArray)
 NDND_BOOL_OP_DECLS (uint16NDArray, uint16NDArray)
diff --git a/liboctave/uint32NDArray.cc b/liboctave/uint32NDArray.cc
--- a/liboctave/uint32NDArray.cc
+++ b/liboctave/uint32NDArray.cc
@@ -40,18 +40,16 @@ template octave_uint32 pow (const octave
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint32>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_uint32)
-
 NDS_CMP_OPS (uint32NDArray, , octave_uint32, )
 NDS_BOOL_OPS (uint32NDArray, octave_uint32, octave_uint32 (0))
 
 SND_CMP_OPS (octave_uint32, , uint32NDArray, )
 SND_BOOL_OPS (octave_uint32, uint32NDArray, octave_uint32 (0))
 
 NDND_CMP_OPS (uint32NDArray, , uint32NDArray, )
 NDND_BOOL_OPS (uint32NDArray, uint32NDArray, octave_uint32 (0))
diff --git a/liboctave/uint32NDArray.h b/liboctave/uint32NDArray.h
--- a/liboctave/uint32NDArray.h
+++ b/liboctave/uint32NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_uint32> uint32NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_uint32)
-
 NDS_CMP_OP_DECLS (uint32NDArray, octave_uint32)
 NDS_BOOL_OP_DECLS (uint32NDArray, octave_uint32)
 
 SND_CMP_OP_DECLS (octave_uint32, uint32NDArray)
 SND_BOOL_OP_DECLS (octave_uint32, uint32NDArray)
 
 NDND_CMP_OP_DECLS (uint32NDArray, uint32NDArray)
 NDND_BOOL_OP_DECLS (uint32NDArray, uint32NDArray)
diff --git a/liboctave/uint64NDArray.cc b/liboctave/uint64NDArray.cc
--- a/liboctave/uint64NDArray.cc
+++ b/liboctave/uint64NDArray.cc
@@ -38,18 +38,16 @@ template class intNDArray<octave_uint64>
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint64>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint64>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_uint64)
-
 NDS_CMP_OPS (uint64NDArray, , octave_uint64, )
 NDS_BOOL_OPS (uint64NDArray, octave_uint64, octave_uint64 (0))
 
 SND_CMP_OPS (octave_uint64, , uint64NDArray, )
 SND_BOOL_OPS (octave_uint64, uint64NDArray, octave_uint64 (0))
 
 NDND_CMP_OPS (uint64NDArray, , uint64NDArray, )
 NDND_BOOL_OPS (uint64NDArray, uint64NDArray, octave_uint64 (0))
diff --git a/liboctave/uint64NDArray.h b/liboctave/uint64NDArray.h
--- a/liboctave/uint64NDArray.h
+++ b/liboctave/uint64NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_uint64> uint64NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_uint64)
-
 NDS_CMP_OP_DECLS (uint64NDArray, octave_uint64)
 NDS_BOOL_OP_DECLS (uint64NDArray, octave_uint64)
 
 SND_CMP_OP_DECLS (octave_uint64, uint64NDArray)
 SND_BOOL_OP_DECLS (octave_uint64, uint64NDArray)
 
 NDND_CMP_OP_DECLS (uint64NDArray, uint64NDArray)
 NDND_BOOL_OP_DECLS (uint64NDArray, uint64NDArray)
diff --git a/liboctave/uint8NDArray.cc b/liboctave/uint8NDArray.cc
--- a/liboctave/uint8NDArray.cc
+++ b/liboctave/uint8NDArray.cc
@@ -40,18 +40,16 @@ template octave_uint8 pow (const octave_
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint8>& a);
 
-OCTAVE_INT_CONCAT_FN (octave_uint8)
-
 NDS_CMP_OPS (uint8NDArray, , octave_uint8, )
 NDS_BOOL_OPS (uint8NDArray, octave_uint8, octave_uint8 (0))
 
 SND_CMP_OPS (octave_uint8, , uint8NDArray, )
 SND_BOOL_OPS (octave_uint8, uint8NDArray, octave_uint8 (0))
 
 NDND_CMP_OPS (uint8NDArray, , uint8NDArray, )
 NDND_BOOL_OPS (uint8NDArray, uint8NDArray, octave_uint8 (0))
diff --git a/liboctave/uint8NDArray.h b/liboctave/uint8NDArray.h
--- a/liboctave/uint8NDArray.h
+++ b/liboctave/uint8NDArray.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "intNDArray.h"
 #include "mx-op-defs.h"
 #include "oct-inttypes.h"
 
 typedef intNDArray<octave_uint8> uint8NDArray;
 
-OCTAVE_INT_CONCAT_DECL (octave_uint8)
-
 NDS_CMP_OP_DECLS (uint8NDArray, octave_uint8)
 NDS_BOOL_OP_DECLS (uint8NDArray, octave_uint8)
 
 SND_CMP_OP_DECLS (octave_uint8, uint8NDArray)
 SND_BOOL_OP_DECLS (octave_uint8, uint8NDArray)
 
 NDND_CMP_OP_DECLS (uint8NDArray, uint8NDArray)
 NDND_BOOL_OP_DECLS (uint8NDArray, uint8NDArray)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2004-11-09  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/fileparts.m: Allow filenames with no extension.
+	From Julius Smith <jos@ccrma.stanford.edu>.
+ 
 2004-11-08  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plt2vm__.m: Delete debugging statement.
 	From Dmitri A. Sergatskov <dmitri@unm.edu>.
 
 2004-11-04  John W. Eaton  <jwe@octave.org>
 
 	* plot/hist.m: Always return row vectors for vector args.
diff --git a/scripts/miscellaneous/fileparts.m b/scripts/miscellaneous/fileparts.m
--- a/scripts/miscellaneous/fileparts.m
+++ b/scripts/miscellaneous/fileparts.m
@@ -24,22 +24,27 @@
 ## @end deftypefn
 
 function [directory, name, extension, version] = fileparts (filename)
 
   if (nargin == 1)
     if (isstr (filename))
       ds = rindex (filename, filesep);
       es = rindex (filename, ".");
-      if (es < ds)
+      ## These can be the same if they are both 0 (no dir or ext).
+      if (es <= ds)
 	es = length(filename)+1;
       endif
       directory = filename(1:ds-1);
       name = filename(ds+1:es-1);
-      extension = filename(es:end);
+      if (es > 0)
+	extension = filename(es:end);
+      else
+	extension = "";
+      endif
       version = "";
     else
       error ("fileparts: expecting filename argument to be a string");
     endif
   else
     usage ("fileparts (filename)");
   endif
 
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -109,21 +109,19 @@ Cell::assign (const octave_value_list& i
     set_index (idx_arg(i).index_vector ());
 
   ::assign (*this, rhs, fill_val);
 
   return *this;
 }
 
 Cell
-concat (const Cell& ra, const Cell& rb, const Array<int>& ra_idx)
+Cell::concat (const Cell& rb, const Array<int>& ra_idx)
 {
-  Cell retval (ra);
-  retval.insert (rb, ra_idx);
-  return retval;
+  return insert (rb, ra_idx);
 }
 
 Cell&
 Cell::insert (const Cell& a, int r, int c)
 {
   Array<octave_value>::insert (a, r, c);
   return *this;
 }
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -94,17 +94,17 @@ public:
     { return ArrayN<octave_value>::reshape (new_dims); }
 
   // XXX FIXME XXX
   boolMatrix all (int /* dim */ = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
   boolMatrix any (int /* dim */ = 0) const { return boolMatrix (); }
 
-  friend Cell concat (const Cell& ra, const Cell& rb, const Array<int>& ra_idx);
+  Cell concat (const Cell& rb, const Array<int>& ra_idx);
 
   Cell& insert (const Cell& a, int r, int c);
   Cell& insert (const Cell& a, const Array<int>& ra_idx);
 
   // XXX FIXME XXX
   bool is_true (void) const { return false; }
 
   static octave_value resize_fill_value (void) { return Matrix (); }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2004-11-09  David Bateman  <dbateman@free.fr>
+
+	* Cell.cc (concat): Delete.
+	(Cell::concat): New method.
+	* Cell.h: Provide decls.
+	
+	* oct-map.cc (concat): Delete
+	(Octave_map::concat): New method.
+	* oct-map.h: Provide decls.
+	
+	* ov.h (typedef octave_value (*cat_op_fcn) (octave_value&, 
+	const octave_value&, const Array<int>&): Change definition of 
+	cat_op_fcn so first argument is not constant.
+
+	* ops.h (CATOPDECL): First arg is no longer constant.
+	(DEFCATOP_FN, DEFNDCATOP_FN): Change to use new concat methods.
+
+	* OPERATORS/op-chm.cc, OPERATORS/op-str-m.cc, OPERATORS/op-str-s.cc, 
+	OPERATORS/op-str-str.cc (DEFCATOP): Change explicit concat functions
+	to use new concatenation methods.
+
 2004-11-05  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.61.
 
 	* DLD-FUNCTIONS/det.cc (det): Always compute rcond so we can
 	detect numerically singular matrices.
 
 2004-11-04  John W. Eaton  <jwe@octave.org>
diff --git a/src/OPERATORS/op-chm.cc b/src/OPERATORS/op-chm.cc
--- a/src/OPERATORS/op-chm.cc
+++ b/src/OPERATORS/op-chm.cc
@@ -43,59 +43,60 @@ Software Foundation, 59 Temple Place - S
 
 DEFUNOP (transpose, char_matrix)
 {
   CAST_UNOP_ARG (const octave_char_matrix&);
 
   return octave_value (v.matrix_value().transpose ());
 }
 
-DEFNDCATOP_FN (chm_chm, char_matrix, char_matrix, char_array, char_array, concat)
+DEFNDCATOP_FN (chm_chm, char_matrix, char_matrix, char_array, char_array, 
+	       concat)
 
 DEFCATOP (chm_s, char_matrix, scalar)
 {
-  CAST_BINOP_ARGS (const octave_char_matrix&, const octave_scalar&);
+  CAST_BINOP_ARGS (octave_char_matrix&, const octave_scalar&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v2.type_name (), v1.type_name ());
 
-  return octave_value (concat (v1.char_array_value (), v2.array_value (),
+  return octave_value (v1.char_array_value (). concat(v2.array_value (),
 			       ra_idx));
 }
 
 DEFCATOP (chm_m, char_matrix, matrix)
 {
-  CAST_BINOP_ARGS (const octave_char_matrix&, const octave_matrix&);
+  CAST_BINOP_ARGS (octave_char_matrix&, const octave_matrix&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v2.type_name (), v1.type_name ());
 
-  return octave_value (concat (v1.char_array_value (), v2.array_value (),
+  return octave_value (v1.char_array_value (). concat (v2.array_value (),
 			       ra_idx));
 }
 
 DEFCATOP (s_chm, scalar, char_matrix)
 {
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_char_matrix&);
+  CAST_BINOP_ARGS (octave_scalar&, const octave_char_matrix&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v1.type_name (), v2.type_name ());
 
-  return octave_value (concat (v1.array_value (), v2.char_array_value (),
+  return octave_value (v1.array_value (). concat (v2.char_array_value (),
 			       ra_idx));
 }
 
 DEFCATOP (m_chm, matrix, char_matrix)
 {
-  CAST_BINOP_ARGS (const octave_matrix&, const octave_char_matrix&);
+  CAST_BINOP_ARGS (octave_matrix&, const octave_char_matrix&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v1.type_name (), v2.type_name ());
 
-  return octave_value (concat (v1.array_value (), v2.char_array_value (),
+  return octave_value (v1.array_value (). concat (v2.char_array_value (),
 			       ra_idx));
 }
 
 void
 install_chm_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_char_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_char_matrix, transpose);
diff --git a/src/OPERATORS/op-str-m.cc b/src/OPERATORS/op-str-m.cc
--- a/src/OPERATORS/op-str-m.cc
+++ b/src/OPERATORS/op-str-m.cc
@@ -45,35 +45,33 @@ DEFASSIGNOP (assign, char_matrix_str, oc
   if (! error_state)
     v1.assign (idx, tmp.char_matrix_value ());
 
   return octave_value ();
 }
 
 DEFCATOP (str_m, char_matrix_str, matrix)
 {
-  CAST_BINOP_ARGS (const octave_char_matrix_str&,
-		   const octave_matrix&);
+  CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_matrix&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v2.type_name (), v1.type_name ());
 
-  return octave_value (concat (v1.char_array_value (), v2.array_value (), 
+  return octave_value (v1.char_array_value (). concat (v2.array_value (), 
 			       ra_idx), true);
 }
 
 DEFCATOP (m_str, matrix, char_matrix_str)
 {
-  CAST_BINOP_ARGS (const octave_matrix&,
-		   const octave_char_matrix_str&);
+  CAST_BINOP_ARGS (octave_matrix&, const octave_char_matrix_str&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v1.type_name (), v2.type_name ());
 
-  return octave_value (concat (v1.array_value (), v2.char_array_value (), 
+  return octave_value (v1.array_value (). concat (v2.char_array_value (), 
 			       ra_idx), true);
 }
 
 void
 install_str_m_ops (void)
 {
   INSTALL_ASSIGNOP (op_asn_eq, octave_char_matrix_str, octave_matrix, assign);
 
diff --git a/src/OPERATORS/op-str-s.cc b/src/OPERATORS/op-str-s.cc
--- a/src/OPERATORS/op-str-s.cc
+++ b/src/OPERATORS/op-str-s.cc
@@ -45,35 +45,33 @@ DEFASSIGNOP (assign, char_matrix_str, oc
   if (! error_state)
     v1.assign (idx, tmp.char_matrix_value ());
 
   return octave_value ();
 }
 
 DEFCATOP (str_s, char_matrix_str, scalar)
 {
-  CAST_BINOP_ARGS (const octave_char_matrix_str&,
-		   const octave_scalar&);
+  CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_scalar&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v2.type_name (), v1.type_name ());
 
-  return octave_value (concat (v1.char_array_value (), v2.array_value (), 
+  return octave_value (v1.char_array_value (). concat (v2.array_value (), 
 			       ra_idx), true);
 }
 
 DEFCATOP (s_str, scalar, char_matrix_str)
 {
-  CAST_BINOP_ARGS (const octave_scalar&,
-		   const octave_char_matrix_str&);
+  CAST_BINOP_ARGS (octave_scalar&, const octave_char_matrix_str&);
 
   if (Vwarn_num_to_str)
     gripe_implicit_conversion (v1.type_name (), v2.type_name ());
 
-  return octave_value (concat (v1.array_value (), v2.char_array_value (), 
+  return octave_value (v1.array_value (). concat (v2.char_array_value (), 
 			       ra_idx), true);
 }
 
 void
 install_str_s_ops (void)
 {
   INSTALL_ASSIGNOP (op_asn_eq, octave_char_matrix_str, octave_scalar, assign);
 
diff --git a/src/OPERATORS/op-str-str.cc b/src/OPERATORS/op-str-str.cc
--- a/src/OPERATORS/op-str-str.cc
+++ b/src/OPERATORS/op-str-str.cc
@@ -114,19 +114,18 @@ DEFASSIGNOP (assign, char_matrix_str, ch
   CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_char_matrix_str&);
 
   v1.assign (idx, v2.char_matrix_value ());
   return octave_value ();
 }
 
 DEFCATOP (str_str, char_matrix_str, char_matrix_str)
 {
-  CAST_BINOP_ARGS (const octave_char_matrix_str&,
-		   const octave_char_matrix_str&);
-  return octave_value (concat (v1.char_array_value (), v2.char_array_value (), 
+  CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_char_matrix_str&);
+  return octave_value (v1.char_array_value (). concat (v2.char_array_value (), 
 			       ra_idx), true);
 }
 
 void
 install_str_str_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_char_matrix_str, transpose);
   INSTALL_UNOP (op_hermitian, octave_char_matrix_str, transpose);
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -109,34 +109,34 @@ Octave_map::resize (const dim_vector& dv
   else
     retval = *this;
 
 
   return retval;
 }
 
 Octave_map
-concat (const Octave_map& ra, const Octave_map& rb, const Array<int>& ra_idx)
+Octave_map::concat (const Octave_map& rb, const Array<int>& ra_idx)
 {
   Octave_map retval;
 
-  if (ra.length() == rb.length())
+  if (length() == rb.length())
     {
-      for (Octave_map::const_iterator pa = ra.begin (); pa != ra.end (); pa++)
+      for (Octave_map::const_iterator pa = begin (); pa != end (); pa++)
 	{
-	  Octave_map::const_iterator pb = rb.seek (ra.key(pa));
+	  Octave_map::const_iterator pb = rb.seek (key(pa));
 
 	  if (pb == rb.end ())
 	    {
 	      error ("field name mismatch in structure concatenation");
 	      break;
 	    }
 	
-	  retval.assign (ra.key(pa),
-			 ra.contents(pa).insert (rb.contents(pb), ra_idx));
+	  retval.assign (key(pa),
+			 contents(pa).insert (rb.contents(pb), ra_idx));
 	}
     }
   else
     error ("field name mismatch in structure concatenation");
 
   return retval;
 }
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -115,18 +115,17 @@ Octave_map
   dim_vector dims (void) const { return dimensions; }
 
   Octave_map reshape (const dim_vector& new_dims) const;
 
   Octave_map resize (const dim_vector& dv) const;
 
   int numel (void) const;
 
-  friend Octave_map concat (const Octave_map& ra, const Octave_map& rb, 
-			    const Array<int>& ra_idx);
+  Octave_map concat (const Octave_map& rb, const Array<int>& ra_idx);
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
 		      const Cell& rhs);
 
   Octave_map& assign (const std::string& k, const octave_value& rhs);
 
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -313,39 +313,39 @@ extern void install_ops (void);
 #define BINOP_NONCONFORMANT(msg) \
   gripe_nonconformant (msg, \
 		       a1.rows (), a1.columns (), \
 		       a2.rows (), a2.columns ()); \
   return octave_value ()
 
 #define CATOPDECL(name, a1, a2)	\
   static octave_value \
-  oct_catop_ ## name (const octave_value& a1, const octave_value& a2, \
+  oct_catop_ ## name (octave_value& a1, const octave_value& a2, \
 		      const Array<int>& ra_idx)
 
 #define DEFCATOPX(name, t1, t2)	\
   CATOPDECL (name, , )
 
 #define DEFCATOP(name, t1, t2)	\
   CATOPDECL (name, a1, a2)
 
 // XXX FIXME XXX -- in some cases, the constructor isn't necessary.
 
 #define DEFCATOP_FN(name, t1, t2, f) \
   CATOPDECL (name, a1, a2)	     \
   { \
-    CAST_BINOP_ARGS (const octave_ ## t1&, const octave_ ## t2&); \
-    return octave_value (f (v1.t1 ## _value (), v2.t2 ## _value (), ra_idx));	\
+    CAST_BINOP_ARGS (octave_ ## t1&, const octave_ ## t2&); \
+    return octave_value (v1.t1 ## _value (). f (v2.t2 ## _value (), ra_idx)); \
   }
 
 #define DEFNDCATOP_FN(name, t1, t2, e1, e2, f)	\
   CATOPDECL (name, a1, a2)			\
   { \
-    CAST_BINOP_ARGS (const octave_ ## t1&, const octave_ ## t2&); \
-    return octave_value (f (v1.e1 ## _value (), v2.e2 ## _value (), ra_idx));	\
+    CAST_BINOP_ARGS (octave_ ## t1&, const octave_ ## t2&); \
+    return octave_value (v1.e1 ## _value (). f (v2.e2 ## _value (), ra_idx)); \
   }
 
 #define CATOP_NONCONFORMANT(msg) \
   gripe_nonconformant (msg, \
 		       a1.rows (), a1.columns (), \
 		       a2.rows (), a2.columns ()); \
   return octave_value ()
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -80,17 +80,17 @@ typedef octave_value (*unary_op_fcn)
 
 typedef void (*non_const_unary_op_fcn)
   (octave_value&);
 
 typedef octave_value (*binary_op_fcn)
   (const octave_value&, const octave_value&);
 
 typedef octave_value (*cat_op_fcn)
-  (const octave_value&, const octave_value&, const Array<int>& ra_idx);
+  (octave_value&, const octave_value&, const Array<int>& ra_idx);
 
 typedef octave_value (*assign_op_fcn)
   (octave_value&, const octave_value_list&, const octave_value&);
 
 typedef octave_value * (*type_conv_fcn) (const octave_value&);
 
 class
 octave_value
