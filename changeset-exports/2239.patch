# HG changeset patch
# User jwe
# Date 832732696 0
#      Wed May 22 02:38:16 1996 +0000
# Node ID 4d12b52750cb52d142a19dac3f727c16646c00ef
# Parent  b750da9b0f80dbb2e623d1d32bf91b0658acfd4f
[project @ 1996-05-22 02:38:16 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -87,38 +87,42 @@ extern char *program_invocation_short_na
 #endif
 
 // This is from readline's paren.c:
 extern int rl_blink_matching_paren;
 
 // The command-line options.
 static string_vector octave_argv;
 
-// Nonzero means we read ~/.octaverc and ./.octaverc.
-// (--norc; --ignore-init-file; -f)
-static int read_init_files = 1;
+// TRUE means we read ~/.octaverc and ./.octaverc.
+// (--norc; --no-init-file; -f)
+static bool read_init_files = true;
+
+// TRUE means we read the site-wide octaverc files.
+// (--norc; --no-site-file; -f)
+bool bool read_site_files = true;
 
 // Nonzero means we don't print the usual startup message.
 // (--quiet; --silent; -q)
-static int inhibit_startup_message = 0;
+static bool inhibit_startup_message = false;
 
 // Nonzero means we turn on compatibility options.
 // (--traditional)
-static int traditional = 0;
+static bool traditional = false;
 
 // If nonzero, print verbose info in some cases.
 // (--verbose; -V)
-static int verbose_flag = 0;
+static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?Vdfhiqvx] [--debug] [--echo-commands] [--exec-path path]\n\
-       [--help] [--ignore-init-file] [--info-file file] [--info-program prog]\n\
-       [--interactive] [--no-line-editing] [-p path] [--path path] [--silent]\n\
-       [--traditional] [--verbose] [--version] [file]";
+       [--help] [--info-file file] [--info-program prog] [--interactive]\n\
+       [--no-init-file] [--no-line-editing] [--no-site-file] [-p path]\n\
+       [--path path] [--silent] [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?Vdfhip:qvx";
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
@@ -128,21 +132,22 @@ static const char *short_opts = "+?Vdfhi
 #define NO_LINE_EDITING_OPTION 4
 #define TRADITIONAL_OPTION 5
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
-    { "ignore-init-file", prog_args::no_arg,       0, 'f' },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
+    { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
+    { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
     { "quiet",            prog_args::no_arg,       0, 'q' },
     { "silent",           prog_args::no_arg,       0, 'q' },
     { "traditional",      prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "verbose",          prog_args::no_arg,       0, 'V' },
     { "version",          prog_args::no_arg,       0, 'v' },
     { 0,                  0,                 0, 0 }
@@ -243,50 +248,58 @@ execute_startup_files (void)
   // files.
 
   unwind_protect_int (input_from_startup_file);
 
   input_from_startup_file = 1;
 
   int verbose = (verbose_flag && ! inhibit_startup_message);
 
-  // Execute commands from the site-wide configuration file.  First
-  // from the file $(prefix)/lib/octave/site/m/octaverc (if it exists),
-  // then from the file $(prefix)/lib/octave/$(version)/m/octaverc (if
-  // it exists).
-
-  parse_and_execute (Vlocal_site_defaults_file, 0, verbose);
-
-  parse_and_execute (Vsite_defaults_file, 0, verbose);
-
-  // Try to execute commands from $HOME/.octaverc and ./.octaverc.
-
-  int home_rc_already_executed = 0;
-  string home_rc;
-  if (! Vhome_directory.empty ())
+  if (read_site_files)
     {
-      home_rc = Vhome_directory;
-      home_rc.append ("/.octaverc");
-      parse_and_execute (home_rc, 0, verbose);
-
-      // Names alone are not enough.
-
-      file_stat fs_home_rc (home_rc);
+      // Execute commands from the site-wide configuration file.
+      // First from the file $(prefix)/lib/octave/site/m/octaverc
+      // (if it exists), then from the file
+      // $(prefix)/lib/octave/$(version)/m/octaverc (if it exists).
 
-      if (fs_home_rc)
-	{
-	  file_stat fs_dot_rc ("./.octaverc");
+      parse_and_execute (Vlocal_site_defaults_file, 0, verbose);
 
-	  if (fs_dot_rc && fs_home_rc.ino () == fs_dot_rc.ino ())
-	    home_rc_already_executed = 1;
-	}
+      parse_and_execute (Vsite_defaults_file, 0, verbose);
     }
 
-  if (! home_rc_already_executed)
-    parse_and_execute ("./.octaverc", 0, verbose);
+  if (read_init_files)
+    {
+      // Try to execute commands from $HOME/.octaverc and
+      // ./.octaverc.
+
+      int home_rc_already_executed = 0;
+      string home_rc;
+
+      if (! Vhome_directory.empty ())
+	{
+	  home_rc = Vhome_directory;
+	  home_rc.append ("/.octaverc");
+	  parse_and_execute (home_rc, 0, verbose);
+
+	  // Names alone are not enough.
+
+	  file_stat fs_home_rc (home_rc);
+
+	  if (fs_home_rc)
+	    {
+	      file_stat fs_dot_rc ("./.octaverc");
+
+	      if (fs_dot_rc && fs_home_rc.ino () == fs_dot_rc.ino ())
+		home_rc_already_executed = 1;
+	    }
+	}
+
+      if (! home_rc_already_executed)
+	parse_and_execute ("./.octaverc", 0, verbose);
+    }
 
   run_unwind_frame ("execute_startup_files");
 }
 
 // Usage message with extra help.
 
 static void
 verbose_usage (void)
@@ -296,21 +309,23 @@ verbose_usage (void)
 Usage: octave [options]\n\
 \n\
 Options:\n\
 \n\
   -d, --debug             Enter parser debugging mode.\n\
   -x, --echo-commands     Echo commands as they are executed.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
   -h, -?, --help          Print short help message and exit.\n\
-  -f, --ignore-init-file  Don't read any initialization files.\n\
+  -f, --norc              Don't read any initialization files.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   -i, --interactive       Force interactive behavior.\n\
+  --no-init-file          Don't read the ~/.octaverc or .octaverc files\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
+  --no-site-file          Don't read the site-wide octaverc file\n\
   -p PATH, --path PATH    Set initial LOADPATH to PATH.\n\
   -q, --silent            Don't print message at startup.\n\
   --traditional           Set compatibility variables.\n\
   -V, --verbose           Enable verbose output in some cases.\n\
   -v, --version           Print version number and exit.\n\
 \n\
   FILE                    Execute commands from FILE.\n\
 \n";
@@ -394,25 +409,26 @@ main (int argc, char **argv)
   prog_args args (argc, argv, short_opts, long_opts);
 
   int optc;
   while ((optc = args.getopt ()) != EOF)
     {
       switch (optc)
 	{
 	case 'V':
-	  verbose_flag++;
+	  verbose_flag = true;
 	  break;
 
 	case 'd':
 	  yydebug++;
 	  break;
 
 	case 'f':
-	  read_init_files = 0;
+	  read_init_files = false;
+	  read_site_files = false;
 	  break;
 
 	case 'h':
 	case '?':
 	  verbose_usage ();
 	  break;
 
 	case 'i':
@@ -420,17 +436,17 @@ main (int argc, char **argv)
 	  break;
 
 	case 'p':
 	  if (args.optarg ())
 	    bind_builtin_variable ("LOADPATH", args.optarg ());
 	  break;
 
 	case 'q':
-	  inhibit_startup_message = 1;
+	  inhibit_startup_message = true;
 	  break;
 
 	case 'x':
 	  {
 	    double tmp = (ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE);
 	    bind_builtin_variable ("echo_executing_commands", tmp);
 	  }
 	  break;
@@ -449,22 +465,30 @@ main (int argc, char **argv)
 	    bind_builtin_variable ("INFO_FILE", args.optarg ());
 	  break;
 
 	case INFO_PROG_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("INFO_PROGRAM", args.optarg ());
 	  break;
 
+	case NO_INIT_FILE_OPTION:
+	  read_init_files = false;
+	  break;
+
 	case NO_LINE_EDITING_OPTION:
-	  using_readline = 0;
+	  using_readline = false;
+	  break;
+
+	case NO_SITE_FILE_OPTION:
+	  read_site_files = 0;
 	  break;
 
 	case TRADITIONAL_OPTION:
-	  traditional = 1;
+	  traditional = true;
 	  break;
 
 	default:
 	  usage ();
 	  break;
 	}
     }
 
@@ -486,18 +510,17 @@ main (int argc, char **argv)
   init_dynamic_linker ();
 
   if (! inhibit_startup_message)
     cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
 
   if (traditional)
     maximum_braindamage ();
 
-  if (read_init_files)
-    execute_startup_files ();
+  execute_startup_files ();
 
   octave_command_history.read ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     cout << endl;
 
   // Avoid counting commands executed from startup files.
 
