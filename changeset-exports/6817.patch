# HG changeset patch
# User dbateman
# Date 1187552200 0
#      Sun Aug 19 19:36:40 2007 +0000
# Node ID 2e7f62e52c136b1715df4938e164f2ae767d2ccf
# Parent  ec4c1dfb985a40d87397c134c3ea9a62eb2b6128
[project @ 2007-08-19 19:36:40 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2007-08-19  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (Sparse<T>::permute): Avoid shadowing warning.
+
 2007-08-14  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::permute): permutation vector is zero based.
 	Simplify.
 	(Sparse<T>::reshape): Warn about reshaping to N-d array.
 
 2007-08-10  Michael Goffioul <michael.goffioul@gmail.com>
 
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -782,35 +782,35 @@ Sparse<T>::reshape (const dim_vector& ne
 
 template <class T>
 Sparse<T>
 Sparse<T>::permute (const Array<octave_idx_type>& perm_vec, bool) const
 {
   // The only valid permutations of a sparse array are [1, 2] and [2, 1].
 
   bool fail = false;
-  bool transpose = false;
+  bool trans = false;
 
   if (perm_vec.length () == 2)
     {
       if (perm_vec(0) == 0 && perm_vec(1) == 1)
 	/* do nothing */;
       else if (perm_vec(0) == 1 && perm_vec(1) == 0)
-	transpose = true;
+	trans = true;
       else
 	fail = true;
     }
   else
     fail = true;
 
   if (fail)
     (*current_liboctave_error_handler)
       ("permutation vector contains an invalid element");
 
-  return transpose ? this->transpose () : *this;
+  return trans ? this->transpose () : *this;
 }
 
 template <class T>
 void
 Sparse<T>::resize_no_fill (const dim_vector& dv)
 {
   octave_idx_type n = dv.length ();
 
