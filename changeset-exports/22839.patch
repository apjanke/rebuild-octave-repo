# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480390596 18000
#      Mon Nov 28 22:36:36 2016 -0500
# Node ID b27125252bb05f578d3c174fac4b31cecc721418
# Parent  1444a65085caa662d1ac304923aa60738934149f
use Fortran data types for Fortran function pointer typedefs

* lo-lapack-proto.h: Use F77_INT, F77_DBLE, F77_DBLE_CMPLX, and
F77_CMPLX instead of C++ types for function pointer typedefs.
* shur.cc: Likewise, for functions passed to Fortran subroutines.

diff --git a/liboctave/numeric/lo-lapack-proto.h b/liboctave/numeric/lo-lapack-proto.h
--- a/liboctave/numeric/lo-lapack-proto.h
+++ b/liboctave/numeric/lo-lapack-proto.h
@@ -349,20 +349,20 @@ extern "C"
                              F77_DBLE*, F77_DBLE_CMPLX*, const F77_INT&,
                              F77_DBLE_CMPLX*, const F77_INT&, F77_DBLE_CMPLX*,
                              const F77_INT&, F77_DBLE*, F77_INT&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   // GEESX
 
-  typedef octave_idx_type (*double_selector) (const double&, const double&);
-  typedef octave_idx_type (*float_selector) (const float&, const float&);
-  typedef octave_idx_type (*complex_selector) (const Complex&);
-  typedef octave_idx_type (*float_complex_selector) (const FloatComplex&);
+  typedef F77_INT (*double_selector) (const F77_DBLE&, const F77_DBLE&);
+  typedef F77_INT (*float_selector) (const F77_REAL&, const F77_REAL&);
+  typedef F77_INT (*complex_selector) (const F77_DBLE_CMPLX&);
+  typedef F77_INT (*float_complex_selector) (const F77_CMPLX&);
 
   F77_RET_T
   F77_FUNC (cgeesx, CGEESX) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              float_complex_selector,
                              F77_CONST_CHAR_ARG_DECL,
                              const F77_INT&, F77_CMPLX*,
                              const F77_INT&, F77_INT&,
diff --git a/liboctave/numeric/schur.cc b/liboctave/numeric/schur.cc
--- a/liboctave/numeric/schur.cc
+++ b/liboctave/numeric/schur.cc
@@ -33,43 +33,67 @@ along with Octave; see the file COPYING.
 #include "schur.h"
 
 namespace octave
 {
   namespace math
   {
     // For real types.
 
-    template <typename T>
-    static octave_idx_type
-    select_ana (const T& a, const T&)
+    static F77_INT
+    select_ana (const double& a, const double&)
     {
       return (a < 0.0);
     }
 
-    template <typename T>
-    static octave_idx_type
-    select_dig (const T& a, const T& b)
+    static F77_INT
+    select_dig (const double& a, const double& b)
+    {
+      return (hypot (a, b) < 1.0);
+    }
+
+    static F77_INT
+    select_ana (const float& a, const float&)
+    {
+      return (a < 0.0);
+    }
+
+    static F77_INT
+    select_dig (const float& a, const float& b)
     {
       return (hypot (a, b) < 1.0);
     }
 
     // For complex types.
 
-    template <typename T>
-    static octave_idx_type
-    select_ana (const T& a)
+    static F77_INT
+    select_ana (const F77_DBLE_CMPLX& a_arg)
     {
+      const Complex a = reinterpret_cast<const Complex&> (a_arg);
       return a.real () < 0.0;
     }
 
-    template <typename T>
-    static octave_idx_type
-    select_dig (const T& a)
+    static F77_INT
+    select_dig (const F77_DBLE_CMPLX& a_arg)
     {
+      const Complex& a = reinterpret_cast<const Complex&> (a_arg);
+      return (abs (a) < 1.0);
+    }
+
+    static F77_INT
+    select_ana (const F77_CMPLX& a_arg)
+    {
+      const FloatComplex& a = reinterpret_cast<const FloatComplex&> (a_arg);
+      return a.real () < 0.0;
+    }
+
+    static F77_INT
+    select_dig (const F77_CMPLX& a_arg)
+    {
+      const FloatComplex& a = reinterpret_cast<const FloatComplex&> (a_arg);
       return (abs (a) < 1.0);
     }
 
     template <>
     octave_idx_type
     schur<Matrix>::init (const Matrix& a, const std::string& ord, bool calc_unitary)
     {
       octave_idx_type a_nr = a.rows ();
@@ -99,19 +123,19 @@ namespace octave
 
       char ord_char = ord.empty () ? 'U' : ord[0];
 
       if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
         sort = 'S';
 
       volatile double_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
-        selector = select_ana<double>;
+        selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
-        selector = select_dig<double>;
+        selector = select_dig;
 
       octave_idx_type n = a_nc;
       octave_idx_type lwork = 8 * n;
       octave_idx_type liwork = 1;
       octave_idx_type info;
       octave_idx_type sdim;
       double rconde;
       double rcondv;
@@ -186,19 +210,19 @@ namespace octave
 
       char ord_char = ord.empty () ? 'U' : ord[0];
 
       if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
         sort = 'S';
 
       volatile float_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
-        selector = select_ana<float>;
+        selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
-        selector = select_dig<float>;
+        selector = select_dig;
 
       octave_idx_type n = a_nc;
       octave_idx_type lwork = 8 * n;
       octave_idx_type liwork = 1;
       octave_idx_type info;
       octave_idx_type sdim;
       float rconde;
       float rcondv;
@@ -273,19 +297,19 @@ namespace octave
 
       char ord_char = ord.empty () ? 'U' : ord[0];
 
       if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
         sort = 'S';
 
       volatile complex_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
-        selector = select_ana<Complex>;
+        selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
-        selector = select_dig<Complex>;
+        selector = select_dig;
 
       octave_idx_type n = a_nc;
       octave_idx_type lwork = 8 * n;
       octave_idx_type info;
       octave_idx_type sdim;
       double rconde;
       double rcondv;
 
@@ -381,19 +405,19 @@ namespace octave
 
       char ord_char = ord.empty () ? 'U' : ord[0];
 
       if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
         sort = 'S';
 
       volatile float_complex_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
-        selector = select_ana<FloatComplex>;
+        selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
-        selector = select_dig<FloatComplex>;
+        selector = select_dig;
 
       octave_idx_type n = a_nc;
       octave_idx_type lwork = 8 * n;
       octave_idx_type info;
       octave_idx_type sdim;
       float rconde;
       float rcondv;
 
