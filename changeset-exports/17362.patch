# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1378247755 -3600
#      Tue Sep 03 23:35:55 2013 +0100
# Node ID 6e1a3b8fc3124fe82117b64833cbdafaf84839e6
# Parent  9258de031721f0e8b44560ae49b65f6e40ea7cc2
__magick_finfo__: remove recent Magick compression types (bug #39913)

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1476,24 +1476,31 @@ magick_to_octave_value (const Magick::Co
       case Magick::LZWCompression:
         return octave_value ("lzw");
       case Magick::RLECompression:
         // This is named "rle" for the HDF, but the same thing is named
         // "ccitt" and "PackBits" for binary and non-binary images in TIFF.
         return octave_value ("rle");
       case Magick::ZipCompression:
         return octave_value ("deflate");
-      case Magick::LZMACompression:
-        return octave_value ("lzma");
-      case Magick::JPEG2000Compression:
-        return octave_value ("jpeg2000");
-      case Magick::JBIG1Compression:
-        return octave_value ("jbig1");
-      case Magick::JBIG2Compression:
-        return octave_value ("jbig2");
+
+      // The following are present only in recent versions of GraphicsMagick.
+      // At the moment the only use of this would be to have imfinfo report
+      // the compression method. In the future, someone could implement
+      // the Compression option for imwrite in which case a macro in
+      // configure.ac will have to check for their presence of this.
+      // See bug #39913
+//      case Magick::LZMACompression:
+//        return octave_value ("lzma");
+//      case Magick::JPEG2000Compression:
+//        return octave_value ("jpeg2000");
+//      case Magick::JBIG1Compression:
+//        return octave_value ("jbig1");
+//      case Magick::JBIG2Compression:
+//        return octave_value ("jbig2");
       default:
         return octave_value ("undefined");
     }
 }
 
 static octave_value
 magick_to_octave_value (const Magick::EndianType& magick)
 {
