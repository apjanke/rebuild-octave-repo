# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273324522 -7200
#      Sat May 08 15:15:22 2010 +0200
# Node ID d1194069e58cdeafe34f152004164b33ac13a2dd
# Parent  e103fb2182cebbfe29b0da6a3c96566d571e76d9
optimize code handling ++,--

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-05-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::do_non_const_unary_op): Always return *this as
+	octave_value&. Remove unused overload.
+	* oct-lvalue.cc (octave_lvalue::do_unary_op): Simplify.
+	* pt-unop.cc (tree_prefix_expression::rvalue1,
+	tree_postfix_expression::rvalue1): Remove dummy rvalue1 calls.
+
 2010-05-07  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* ov-base.h (Vsparse_auto_mutate): Add OCTINTERP_API tag.
 
 2010-05-07  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (maximum_braindamage): Set value of internal
 	variable Vallow_noninteger_range_as_index to true instead of
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -55,22 +55,20 @@ octave_lvalue::set_index (const std::str
     error ("invalid index expression in assignment");
 }
 
 void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
 {
   if (val)
     {
-      octave_value tmp (idx.empty ()
-                        ? val->do_non_const_unary_op (op)
-                        : val->do_non_const_unary_op (op, type, idx));
-
-      if (! error_state)
-        *val = tmp;
+      if (idx.empty ())
+        val->do_non_const_unary_op (op);
+      else
+        val->do_non_const_unary_op (op, type, idx);
     }
   else
     error ("internal: invalid operation on ~");
 }
 
 octave_value
 octave_lvalue::value (void)
 {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -2323,21 +2323,32 @@ do_unary_op (octave_value::unary_op op, 
 static void
 gripe_unary_op_conversion_failed (const std::string& op,
                                   const std::string& tn)
 {
   error ("operator %s: type conversion for `%s' failed",
          op.c_str (), tn.c_str ());
 }
 
-const octave_value&
+octave_value&
 octave_value::do_non_const_unary_op (unary_op op)
 {
   if (op == op_incr || op == op_decr)
     {
+      // We want the gripe just here, because in the other branch this should
+      // not happen, and if it did anyway (internal error), the message would
+      // be confusing.
+      if (is_undefined ())
+        {
+          std::string op_str = unary_op_as_string (op);
+          error ("in x%s or %sx, x must be defined first", 
+                 op_str.c_str (), op_str.c_str ());
+          return *this;
+        }
+
       // Genuine.
       int t = type_id ();
 
       octave_value_typeinfo::non_const_unary_op_fcn f
         = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
 
       if (f)
         {
@@ -2429,56 +2440,34 @@ octave_value::do_non_const_unary_op (una
         }
       else
         *this = do_unary_op (op, *this);
     }
 
   return *this;
 }
 
-#if 0
-static void
-gripe_unary_op_failed_or_no_method (const std::string& on,
-                                    const std::string& tn) 
-{
-  error ("operator %s: no method, or unable to evaluate for %s operand",
-         on.c_str (), tn.c_str ());
-}
-#endif
-
-void
-octave_value::do_non_const_unary_op (unary_op, const octave_value_list&)
-{
-  abort ();
-}
-
-octave_value
+octave_value&
 octave_value::do_non_const_unary_op (unary_op op, const std::string& type,
                                      const std::list<octave_value_list>& idx)
 {
-  octave_value retval;
-
   if (idx.empty ())
-    {
-      do_non_const_unary_op (op);
-
-      retval = *this;
-    }
+    do_non_const_unary_op (op);
   else
     {
       // FIXME -- only do the following stuff if we can't find a
       // specific function to call to handle the op= operation for the
       // types we have.
 
       assign_op assop = unary_op_to_assign_op (op);
 
-      retval = assign (assop, type, idx, 1.0);
+      assign (assop, type, idx, 1.0);
     }
 
-  return retval;
+  return *this;
 }
 
 octave_value::assign_op
 octave_value::unary_op_to_assign_op (unary_op op)
 {
   assign_op binop = unknown_assign_op;
 
   switch (op)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -979,21 +979,19 @@ public:
 
   std::string class_name (void) const { return rep->class_name (); }
 
   // Unary and binary operations.
 
   friend OCTINTERP_API octave_value do_unary_op (unary_op op,
                                    const octave_value& a);
 
-  const octave_value& do_non_const_unary_op (unary_op op);
+  octave_value& do_non_const_unary_op (unary_op op);
 
-  void do_non_const_unary_op (unary_op op, const octave_value_list& idx);
-
-  octave_value do_non_const_unary_op (unary_op op, const std::string& type,
+  octave_value& do_non_const_unary_op (unary_op op, const std::string& type,
                                       const std::list<octave_value_list>& idx);
 
   friend OCTINTERP_API octave_value do_binary_op (binary_op op,
                                     const octave_value& a,
                                     const octave_value& b);
 
   friend OCTINTERP_API octave_value do_binary_op (compound_binary_op op,
                                                   const octave_value& a,
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -64,28 +64,24 @@ tree_prefix_expression::rvalue1 (int)
 
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
         {
-          op->rvalue1 ();
+          octave_lvalue ref = op->lvalue ();
 
           if (! error_state)
             {
-              octave_lvalue ref = op->lvalue ();
+              ref.do_unary_op (etype);
 
-              if (! error_state && ref.is_defined ())
-                {
-                  ref.do_unary_op (etype);
-
-                  retval = ref.value ();
-                }
+              if (! error_state)
+                retval = ref.value ();
             }
         }
       else
         {
           octave_value val = op->rvalue1 ();
 
           if (! error_state && val.is_defined ())
             {
@@ -147,28 +143,23 @@ tree_postfix_expression::rvalue1 (int)
 
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
         {
-          op->rvalue1 ();
+          octave_lvalue ref = op->lvalue ();
 
           if (! error_state)
             {
-              octave_lvalue ref = op->lvalue ();
+              retval = ref.value ();
 
-              if (! error_state && ref.is_defined ())
-                {
-                  retval = ref.value ();
-
-                  ref.do_unary_op (etype);
-                }
+              ref.do_unary_op (etype);
             }
         }
       else
         {
           octave_value val = op->rvalue1 ();
 
           if (! error_state && val.is_defined ())
             {
