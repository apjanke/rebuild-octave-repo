# HG changeset patch
# User Rik <rik@octave.org>
# Date 1426008485 25200
#      Tue Mar 10 10:28:05 2015 -0700
# Node ID 277b12eed117c042686c0b8c9f75945fa386035b
# Parent  31e3799b9e27cedf9399ab7f4616dfdc8405395e
oct-norm.cc: Use static_cast<R> (M_PI) for cases where R is not double.

* oct-norm.cc: Use static_cast<R> (M_PI) for cases where R is not double.

diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -326,17 +326,17 @@ template <class ColVectorT, class R>
 static void
 higham_subp (const ColVectorT& y, const ColVectorT& col,
              octave_idx_type nsamp, R p, R& lambda, R& mu)
 {
   R nrm = 0;
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
       octave_quit ();
-      R fi = i*M_PI/nsamp;
+      R fi = i * static_cast<R> (M_PI) / nsamp;
       R lambda1 = cos (fi);
       R mu1 = sin (fi);
       R lmnr = std::pow (std::pow (std::abs (lambda1), p) +
                          std::pow (std::abs (mu1), p), 1/p);
       lambda1 /= lmnr; mu1 /= lmnr;
       R nrm1 = vector_norm (lambda1 * y + mu1 * col, p);
       if (nrm1 > nrm)
         {
@@ -359,17 +359,17 @@ higham_subp (const ColVectorT& y, const 
   typedef std::complex<R> CR;
   R nrm = 0;
   lambda = 1.0;
   CR lamcu = lambda / std::abs (lambda);
   // Probe magnitudes
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
       octave_quit ();
-      R fi = i*M_PI/nsamp;
+      R fi = i * static_cast<R> (M_PI) / nsamp;
       R lambda1 = cos (fi);
       R mu1 = sin (fi);
       R lmnr = std::pow (std::pow (std::abs (lambda1), p) +
                          std::pow (std::abs (mu1), p), 1/p);
       lambda1 /= lmnr; mu1 /= lmnr;
       R nrm1 = vector_norm (lambda1 * lamcu * y + mu1 * col, p);
       if (nrm1 > nrm)
         {
@@ -378,17 +378,17 @@ higham_subp (const ColVectorT& y, const 
           nrm = nrm1;
         }
     }
   R lama = std::abs (lambda);
   // Probe orientation
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
       octave_quit ();
-      R fi = i*M_PI/nsamp;
+      R fi = i * static_cast<R> (M_PI) / nsamp;
       lamcu = CR (cos (fi), sin (fi));
       R nrm1 = vector_norm (lama * lamcu * y + mu * col, p);
       if (nrm1 > nrm)
         {
           lambda = lama * lamcu;
           nrm = nrm1;
         }
     }
