# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233645399 -3600
#      Tue Feb 03 08:16:39 2009 +0100
# Node ID ea8e65ca234f19e00cfc98cd1c28452c20126fe0
# Parent  a1ae2aae903e4bd246e6a3c45e54716bc6d41358
reduce memory usage in sorting

diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -55,57 +55,59 @@ template <>
 bool
 ascending_compare (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-ascending_compare (vec_index<double> *a, vec_index<double> *b)
+ascending_compare (const double *a, const double *b)
 {
-  return (xisnan (b->vec) || (a->vec < b->vec));
+  return (xisnan (*b) || (*a < *b));
 }
 
 template <>
 bool
 descending_compare (double a, double b)
 {
   return (xisnan (a) || (a > b));
 }
 
 template <>
 bool
-descending_compare (vec_index<double> *a, vec_index<double> *b)
+descending_compare (const double *a, const double *b)
 {
-  return (xisnan (b->vec) || (a->vec > b->vec));
+  return (xisnan (*b) || (*a > *b));
 }
 
 INSTANTIATE_ARRAY_SORT (uint64_t);
 
 template <>
 Array<double>
 Array<double>::sort (octave_idx_type dim, sortmode mode) const
 {
-  Array<double> m = *this;
+  Array<double> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return m;
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   double *v = m.fortran_vec ();
+  const double *ov = data ();
 
   uint64_t *p = reinterpret_cast<uint64_t *> (v);
+  const uint64_t *op = reinterpret_cast<const uint64_t *> (ov);
 
   octave_sort<uint64_t> lsort;
 
   if (mode == ASCENDING)
     lsort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (descending_compare);
   else
@@ -114,17 +116,17 @@ Array<double>::sort (octave_idx_type dim
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  // Flip the data in the vector so that int compares on
 	  // IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    p[i] = FloatFlip (p[i]);
+	    p[i] = FloatFlip (op[i]);
 	      
 	  lsort.sort (p, ns);
 
 	  // Flip the data out of the vector so that int compares
 	  // on IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    p[i] = IFloatFlip (p[i]);
@@ -156,16 +158,17 @@ Array<double>::sort (octave_idx_type dim
 		  for (octave_idx_type l = i; l >= 0; l--)
 		    vtmp[l-i+ns-1] = vtmp[l];
 		  for (octave_idx_type l = 0; l < ns - i - 1; l++)
 		    vtmp[l] = octave_NaN;
 		}
 	    }
 
 	  p += ns;
+          op += ns;
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (uint64_t, vi, ns);
 
       for (octave_idx_type j = 0; j < iter; j++)
 	{
@@ -177,17 +180,17 @@ Array<double>::sort (octave_idx_type dim
 	      offset2++;
 	    }
 	  offset += offset2 * stride * ns;
 
 	  // Flip the data in the vector so that int compares on
 	  // IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    vi[i] = FloatFlip (p[i*stride + offset]);
+	    vi[i] = FloatFlip (op[i*stride + offset]);
 
 	  lsort.sort (vi, ns);
 
 	  // Flip the data out of the vector so that int compares
 	  // on IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    p[i*stride + offset] = IFloatFlip (vi[i]);
@@ -226,51 +229,50 @@ Array<double>::sort (octave_idx_type dim
   return m;
 }
 
 template <>
 Array<double>
 Array<double>::sort (Array<octave_idx_type> &sidx, octave_idx_type dim, 
 		     sortmode mode) const
 {
-  Array<double> m = *this;
+  Array<double> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     {
       sidx = Array<octave_idx_type> (dv);
       return m;
     }
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   double *v = m.fortran_vec ();
+  const double *ov = data ();
 
   uint64_t *p = reinterpret_cast<uint64_t *> (v);
+  const uint64_t *op = reinterpret_cast<const uint64_t *> (ov);
 
-  octave_sort<vec_index<uint64_t> *> indexed_sort;
+  octave_sort<const uint64_t *> indexed_sort;
 
   if (mode == ASCENDING)
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (descending_compare);
   else
     abort ();
 
-  OCTAVE_LOCAL_BUFFER (vec_index<uint64_t> *, vi, ns);
-  OCTAVE_LOCAL_BUFFER (vec_index<uint64_t>, vix, ns);
+  OCTAVE_LOCAL_BUFFER (const uint64_t *, vi, ns);
+  OCTAVE_LOCAL_BUFFER (uint64_t, vix, ns);
   
-  for (octave_idx_type i = 0; i < ns; i++)
-    vi[i] = &vix[i];
-
   sidx = Array<octave_idx_type> (dv);
       
   for (octave_idx_type j = 0; j < iter; j++)
     {
       octave_idx_type offset = j;
       octave_idx_type offset2 = 0;
       while (offset >= stride)
 	{
@@ -279,29 +281,29 @@ Array<double>::sort (Array<octave_idx_ty
 	}
       offset += offset2 * stride * ns;
 
       // Flip the data in the vector so that int compares on
       // IEEE754 give the correct ordering.
 
       for (octave_idx_type i = 0; i < ns; i++)
 	{
-	  vi[i]->vec = FloatFlip (p[i*stride + offset]);
-	  vi[i]->indx = i;
+	  vix[i] = FloatFlip (op[i*stride + offset]);
+	  vi[i] = vix + i;
 	}
 
       indexed_sort.sort (vi, ns);
 
       // Flip the data out of the vector so that int compares on
       // IEEE754 give the correct ordering
 
       for (octave_idx_type i = 0; i < ns; i++)
 	{
-	  p[i*stride + offset] = IFloatFlip (vi[i]->vec);
-	  sidx(i*stride + offset) = vi[i]->indx;
+	  p[i*stride + offset] = IFloatFlip (*vi[i]);
+	  sidx(i*stride + offset) = vi[i] - vix;
 	}
 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
       if (lo_ieee_signbit (octave_NaN))
 	{
@@ -357,35 +359,35 @@ template <>
 bool
 ascending_compare (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-ascending_compare (vec_index<double> *a, 
-		   vec_index<double> *b)
+ascending_compare (const double *a, 
+		   const double *b)
 {
-  return (xisnan (b->vec) || (a->vec < b->vec));
+  return (xisnan (*b) || (*a < *b));
 }
 
 template <>
 bool
 descending_compare (double a, double b)
 {
   return (xisnan (a) || (a > b));
 }
 
 template <>
 bool
-descending_compare (vec_index<double> *a, 
-		    vec_index<double> *b)
+descending_compare (const double *a, 
+		    const double *b)
 {
-  return (xisnan (b->vec) || (a->vec > b->vec));
+  return (xisnan (*b) || (*a > *b));
 }
 
 INSTANTIATE_ARRAY_SORT (double);
 
 #endif
 
 INSTANTIATE_ARRAY_AND_ASSIGN (double, OCTAVE_API);
 
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -55,57 +55,59 @@ template <>
 bool
 ascending_compare (float a, float b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-ascending_compare (vec_index<float> *a, vec_index<float> *b)
+ascending_compare (const float *a, const float *b)
 {
-  return (xisnan (b->vec) || (a->vec < b->vec));
+  return (xisnan (*b) || (*a < *b));
 }
 
 template <>
 bool
 descending_compare (float a, float b)
 {
   return (xisnan (a) || (a > b));
 }
 
 template <>
 bool
-descending_compare (vec_index<float> *a, vec_index<float> *b)
+descending_compare (const float *a, const float *b)
 {
-  return (xisnan (b->vec) || (a->vec > b->vec));
+  return (xisnan (*b) || (*a > *b));
 }
 
 INSTANTIATE_ARRAY_SORT (uint32_t);
 
 template <>
 Array<float>
 Array<float>::sort (octave_idx_type dim, sortmode mode) const
 {
-  Array<float> m = *this;
+  Array<float> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return m;
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   float *v = m.fortran_vec ();
+  const float *ov = data ();
 
   uint32_t *p = reinterpret_cast<uint32_t *> (v);
+  const uint32_t *op = reinterpret_cast<const uint32_t *> (ov);
 
   octave_sort<uint32_t> lsort;
 
   if (mode == ASCENDING)
     lsort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (descending_compare);
   else
@@ -114,17 +116,17 @@ Array<float>::sort (octave_idx_type dim,
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  // Flip the data in the vector so that int compares on
 	  // IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    p[i] = FloatFlip (p[i]);
+	    p[i] = FloatFlip (op[i]);
 	      
 	  lsort.sort (p, ns);
 
 	  // Flip the data out of the vector so that int compares
 	  // on IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    p[i] = IFloatFlip (p[i]);
@@ -156,16 +158,17 @@ Array<float>::sort (octave_idx_type dim,
 		  for (octave_idx_type l = i; l >= 0; l--)
 		    vtmp[l-i+ns-1] = vtmp[l];
 		  for (octave_idx_type l = 0; l < ns - i - 1; l++)
 		    vtmp[l] = octave_Float_NaN;
 		}
 	    }
 
 	  p += ns;
+          op += ns;
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (uint32_t, vi, ns);
 
       for (octave_idx_type j = 0; j < iter; j++)
 	{
@@ -177,17 +180,17 @@ Array<float>::sort (octave_idx_type dim,
 	      offset2++;
 	    }
 	  offset += offset2 * stride * ns;
 
 	  // Flip the data in the vector so that int compares on
 	  // IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    vi[i] = FloatFlip (p[i*stride + offset]);
+	    vi[i] = FloatFlip (op[i*stride + offset]);
 
 	  lsort.sort (vi, ns);
 
 	  // Flip the data out of the vector so that int compares
 	  // on IEEE754 give the correct ordering.
 
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    p[i*stride + offset] = IFloatFlip (vi[i]);
@@ -226,51 +229,50 @@ Array<float>::sort (octave_idx_type dim,
   return m;
 }
 
 template <>
 Array<float>
 Array<float>::sort (Array<octave_idx_type> &sidx, octave_idx_type dim, 
 		     sortmode mode) const
 {
-  Array<float> m = *this;
+  Array<float> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     {
       sidx = Array<octave_idx_type> (dv);
       return m;
     }
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   float *v = m.fortran_vec ();
+  const float *ov = data ();
 
   uint32_t *p = reinterpret_cast<uint32_t *> (v);
+  const uint32_t *op = reinterpret_cast<const uint32_t *> (ov);
 
-  octave_sort<vec_index<uint32_t> *> indexed_sort;
+  octave_sort<const uint32_t *> indexed_sort;
 
   if (mode == ASCENDING)
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (descending_compare);
   else
     abort ();
 
-  OCTAVE_LOCAL_BUFFER (vec_index<uint32_t> *, vi, ns);
-  OCTAVE_LOCAL_BUFFER (vec_index<uint32_t>, vix, ns);
+  OCTAVE_LOCAL_BUFFER (const uint32_t *, vi, ns);
+  OCTAVE_LOCAL_BUFFER (uint32_t, vix, ns);
   
-  for (octave_idx_type i = 0; i < ns; i++)
-    vi[i] = &vix[i];
-
   sidx = Array<octave_idx_type> (dv);
       
   for (octave_idx_type j = 0; j < iter; j++)
     {
       octave_idx_type offset = j;
       octave_idx_type offset2 = 0;
       while (offset >= stride)
 	{
@@ -279,29 +281,29 @@ Array<float>::sort (Array<octave_idx_typ
 	}
       offset += offset2 * stride * ns;
 
       // Flip the data in the vector so that int compares on
       // IEEE754 give the correct ordering.
 
       for (octave_idx_type i = 0; i < ns; i++)
 	{
-	  vi[i]->vec = FloatFlip (p[i*stride + offset]);
-	  vi[i]->indx = i;
+	  vix[i] = FloatFlip (op[i*stride + offset]);
+	  vi[i] = vix + i;
 	}
 
       indexed_sort.sort (vi, ns);
 
       // Flip the data out of the vector so that int compares on
       // IEEE754 give the correct ordering
 
       for (octave_idx_type i = 0; i < ns; i++)
 	{
-	  p[i*stride + offset] = IFloatFlip (vi[i]->vec);
-	  sidx(i*stride + offset) = vi[i]->indx;
+	  p[i*stride + offset] = IFloatFlip (*vi[i]);
+	  sidx(i*stride + offset) = vi[i] - vix;
 	}
 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
       if (lo_ieee_signbit (octave_Float_NaN))
 	{
@@ -357,35 +359,35 @@ template <>
 bool
 ascending_compare (float a, float b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-ascending_compare (vec_index<float> *a, 
-		   vec_index<float> *b)
+ascending_compare (const float *a, 
+		   const float *b)
 {
-  return (xisnan (b->vec) || (a->vec < b->vec));
+  return (xisnan (*b) || (*a < *b));
 }
 
 template <>
 bool
 descending_compare (float a, float b)
 {
   return (xisnan (a) || (a > b));
 }
 
 template <>
 bool
-descending_compare (vec_index<float> *a, 
-		    vec_index<float> *b)
+descending_compare (const float *a, 
+		    const float *b)
 {
-  return (xisnan (b->vec) || (a->vec > b->vec));
+  return (xisnan (*b) || (*a > *b));
 }
 
 INSTANTIATE_ARRAY_SORT (float);
 
 #endif
 
 INSTANTIATE_ARRAY_AND_ASSIGN (float, OCTAVE_API);
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1986,62 +1986,66 @@ template <class T>
 bool 
 descending_compare (T a, T b)
 {
   return (a > b);
 }
 
 template <class T>
 bool 
-ascending_compare (vec_index<T> *a, vec_index<T> *b)
+ascending_compare (const T *a, const T *b)
 {
-  return (a->vec < b->vec);
+  return (*a < *b);
 }
 
 template <class T>
 bool 
-descending_compare (vec_index<T> *a, vec_index<T> *b)
+descending_compare (const T *a, const T *b)
 {
-  return (a->vec > b->vec);
+  return (*a > *b);
 }
 
 template <class T>
 Array<T>
 Array<T>::sort (octave_idx_type dim, sortmode mode) const
 {
-  Array<T> m = *this;
+  Array<T> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return m;
 
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
 
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
+  const T *ov = data ();
+
   octave_sort<T> lsort;
   
   if (mode == ASCENDING) 
     lsort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (descending_compare);
   else
     abort ();
 
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
+          std::copy (ov, ov + ns, v);
 	  lsort.sort (v, ns);
 	  v += ns;
+          ov += ns;
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (T, pvi, ns);
 
       for (octave_idx_type j = 0; j < iter; j++) 
 	{
@@ -2052,34 +2056,34 @@ Array<T>::sort (octave_idx_type dim, sor
 	    {
 	      offset -= stride;
 	      offset2++;
 	    }
 
 	  offset += offset2 * stride * ns;
 	  
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    pvi[i] = v[i*stride + offset];
+	    pvi[i] = ov[i*stride + offset];
 
 	  lsort.sort (pvi, ns);
 	      
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    v[i*stride + offset] = pvi[i];
 	}
     }
 
   return m;
 }
 
 template <class T>
 Array<T>
 Array<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type dim, 
 		sortmode mode) const
 {
-  Array<T> m = *this;
+  Array<T> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     {
       sidx = Array<octave_idx_type> (dv);
       return m;
     }
@@ -2087,99 +2091,97 @@ Array<T>::sort (Array<octave_idx_type> &
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
 
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
-  octave_sort<vec_index<T> *> indexed_sort;
+  const T *ov = data ();
+
+  octave_sort<const T *> indexed_sort;
 
   if (mode == ASCENDING) 
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (descending_compare);
   else
     abort ();
 
-  OCTAVE_LOCAL_BUFFER (vec_index<T> *, vi, ns);
-  OCTAVE_LOCAL_BUFFER (vec_index<T>, vix, ns);
-
-  for (octave_idx_type i = 0; i < ns; i++)
-    vi[i] = &vix[i];
+  OCTAVE_LOCAL_BUFFER (const T *, vi, ns);
 
   sidx = Array<octave_idx_type> (dv);
       
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	   octave_idx_type offset = j * ns;
 
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    {
-	      vi[i]->vec = v[i];
-	      vi[i]->indx = i;
-	    }
+            vi[i] = ov + i;
 
 	  indexed_sort.sort (vi, ns);
 
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    {
-	      v[i] = vi[i]->vec;
-	      sidx(i + offset) = vi[i]->indx;
+	      v[i] = *vi[i];
+	      sidx(i + offset) = vi[i] - ov;
 	    }
 	  v += ns;
+          ov += ns;
 	}
     }
   else
     {
+      OCTAVE_LOCAL_BUFFER (T, vix, ns);
+
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  octave_idx_type offset = j;
 	  octave_idx_type offset2 = 0;
 
 	  while (offset >= stride)
 	    {
 	      offset -= stride;
 	      offset2++;
 	    }
 
 	  offset += offset2 * stride * ns;
 	      
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    {
-	      vi[i]->vec = v[i*stride + offset];
-	      vi[i]->indx = i;
+	      vix[i] = ov[i*stride + offset];
+	      vi[i] = vix + i;
 	    }
 
 	  indexed_sort.sort (vi, ns);
 	      
 	  for (octave_idx_type i = 0; i < ns; i++)
 	    {
-	      v[i*stride+offset] = vi[i]->vec;
-	      sidx(i*stride+offset) = vi[i]->indx;
+	      v[i*stride+offset] = *vi[i];
+	      sidx(i*stride+offset) = vi[i] - vix;
 	    }
 	}
     }
 
   return m;
 }
 
 #if defined (HAVE_IEEE754_DATA_FORMAT)
 
 template <>
 bool ascending_compare (double, double);
 template <>
-bool ascending_compare (vec_index<double>*, vec_index<double>*);
+bool ascending_compare (const double*, const double*);
 template <>
 bool descending_compare (double, double);
 template <>
-bool descending_compare (vec_index<double>*, vec_index<double>*);
+bool descending_compare (const double*, const double*);
 
 template <>
 Array<double> Array<double>::sort (octave_idx_type dim, sortmode mode) const;
 template <>
 Array<double> Array<double>::sort (Array<octave_idx_type> &sidx,
 				   octave_idx_type dim, sortmode mode) const;
 
 #endif
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -589,26 +589,25 @@ public:
 #define INSTANTIATE_ARRAY_AND_ASSIGN(T, API) \
   INSTANTIATE_ARRAY(T, API)
 
 #define INSTANTIATE_ARRAY_ASSIGN(LT, RT, API)
   // do nothing
 
 #define INSTANTIATE_ARRAY_SORT(T) \
   template class octave_sort<T>; \
-  template class vec_index<T>; \
-  template class octave_sort<vec_index<T> *>;
+  template class octave_sort<const T*>;
 
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
   template class vec_index<T>; \
   template <> bool ascending_compare (T, T) { return true; } \
-  template <> bool ascending_compare (vec_index<T> *, vec_index<T> *) \
+  template <> bool ascending_compare (const T *, const T *) \
     { return true; } \
   template <> bool descending_compare (T, T) { return true; } \
-  template <> bool descending_compare (vec_index<T> *, vec_index<T> *) \
+  template <> bool descending_compare (const T *, const T *) \
     { return true; } \
   template <> Array<T> Array<T>::sort \
     (octave_idx_type, sortmode) const { return *this; } \
   template <> Array<T> Array<T>::sort (Array<octave_idx_type> &sidx, \
     octave_idx_type, sortmode) const \
     { sidx = Array<octave_idx_type> (); return *this; }
 
 #endif
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,25 @@
+2009-02-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::sort (octave_idx_type, sortmode)):
+	Copy array on-the-fly.
+	(Array<T>::sort (Array<octave_idx_type> &, octave_idx_type, sortmode)):
+	Copy array on-the-fly, use bare pointers rather than vec_index.
+
+	* Array-d.cc (Array<double>::sort (octave_idx_type, sortmode)):
+	Copy array on-the-fly.
+	(Array<double>::sort (Array<octave_idx_type> &, octave_idx_type, sortmode)):
+	Copy array on-the-fly, use bare pointers rather than vec_index.
+
+	* Array-f.cc (Array<float>::sort (octave_idx_type, sortmode)):
+	Copy array on-the-fly.
+	(Array<float>::sort (Array<octave_idx_type> &, octave_idx_type, sortmode)):
+	Copy array on-the-fly, use bare pointers rather than vec_index.
+
 2009-02-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (mx_inline_fabs_dup, mx_inline_cabs_dup): New funcs.
 
 	* dMatrix.cc (real, imag, Matrix::abs): Simplify.
 	* fMatrix.cc (real, imag, FloatMatrix::abs): Simplify.
 	* CMatrix.cc (ComplexMatrix::abs, ComplexMatrix::conj): Simplify.
 	* fCMatrix.cc (FloatComplexMatrix::abs, FloatComplexMatrix::conj): Simplify.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* TEMPLATE-INST/Array-tc.cc: Replace vec_index by pointers.
+
 2009-02-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.cc (octave_matrix::abs, octave_matrix::real,
 	octave_matrix::imag, octave_matrix::conj): Use special code.
 	* ov-flt-re-mat.cc (octave_float_matrix::abs, octave_float_matrix::real,
 	octave_float_matrix::imag, octave_float_matrix::conj): Use special code.
 	* ov-cx-mat.cc (octave_complex_matrix::abs, octave_complex_matrix::real,
 	octave_complex_matrix::imag, octave_complex_matrix::conj): Use special code.
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -48,33 +48,33 @@ template <>
 bool
 ascending_compare (octave_value a, octave_value b)
 {
   return (a.string_value () < b.string_value ());
 }
 
 template <>
 bool
-ascending_compare (vec_index<octave_value> *a, vec_index<octave_value> *b)
+ascending_compare (const octave_value *a, const octave_value *b)
 {
-  return (a->vec.string_value () < b->vec.string_value ());
+  return (a->string_value () < b->string_value ());
 }
 
 template <>
 bool
 descending_compare (octave_value a, octave_value b)
 {
   return (a.string_value () > b.string_value ());
 }
 
 template <>
 bool
-descending_compare (vec_index<octave_value> *a, vec_index<octave_value> *b)
+descending_compare (const octave_value *a, const octave_value *b)
 {
-  return (a->vec.string_value () > b->vec.string_value ());
+  return (a->string_value () > b->string_value ());
 }
 
 INSTANTIATE_ARRAY_SORT (octave_value);
 
 template class OCTINTERP_API Array<octave_value>;
 
 INSTANTIATE_ARRAY_ASSIGN (octave_value, octave_value, OCTINTERP_API);
 
