# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1234399583 18000
#      Wed Feb 11 19:46:23 2009 -0500
# Node ID a50228129dba4abe6e594a9831aebc542ffcb9ef
# Parent  0899370cce9f269fed48a180e48682a19fd7c09c
Introduce new macro OCTAVE_GLUTESSCALLBACK_THREEDOTS. Use definitions HAVE_FRAMEWORK_OPENGL and HAVE_GLUTESSCALLBACK_THREEDOTS for Mac's framework OpenGL implementation.

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-11 Thomas Treichl <Thomas.Treichl@gmx.net>
+
+	* aclocal.m4 (OCTAVE_GLUTESSCALLBACK_THREEDOTS): New macro.
+	(OCTAVE_OPENGL): Use it in OpenGL check.
+
 2009-02-11 Ben Abbott <bpabbott@mac.com>
 
 	* configure.in: Include FTGLTextureFont.h when FTGL_UPPER_CASE is
 	not defined.
 
 2009-02-11  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (octetcdir): New default value.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -1009,74 +1009,108 @@ if test "$octave_cv_lib_qhull_ok" = "yes
 else
   AC_MSG_RESULT(no)
   ifelse([$2], , , [$2])
 fi
 ])
 dnl
 dnl Check for OpenGL. If found, define OPENGL_LIBS
 dnl
-dnl FIXME -- add tests for apple
-dnl
 AC_DEFUN([OCTAVE_OPENGL], [
 OPENGL_LIBS=
-case $canonical_host_type in
-   *-*-mingw32* | *-*-msdosmsvc)
-    AC_CHECK_HEADERS(windows.h)
+
+### On MacOSX systems the OpenGL framework can be used
+OCTAVE_HAVE_FRAMEWORK(OpenGL, [
+#include <OpenGL/gl.h>
+#include <OpenGL/glu.h> ], [GLint par; glGetIntegerv (GL_VIEWPORT, &par);],
+  [have_framework_opengl="yes"], [have_framework_opengl="no"])
+
+if test $have_framework_opengl = "yes"; then
+  AC_DEFINE(HAVE_FRAMEWORK_OPENGL, 1, [Define if framework OPENGL is available.])
+  OPENGL_LIBS="-Wl,-framework -Wl,OpenGL"
+  AC_MSG_NOTICE([adding -Wl,-framework -Wl,OpenGL to OPENGL_LIBS])
+  OCTAVE_GLUTESSCALLBACK_THREEDOTS
+else
+  case $canonical_host_type in
+    *-*-mingw32* | *-*-msdosmsvc)
+      AC_CHECK_HEADERS(windows.h)
     ;;
-esac
-have_opengl_incs=no
-AC_CHECK_HEADERS([GL/gl.h OpenGL/gl.h], [
-  AC_CHECK_HEADERS([GL/glu.h OpenGL/glu.h], [
-    have_opengl_incs=yes; break], [], [
+  esac
+  have_opengl_incs=no
+  AC_CHECK_HEADERS([GL/gl.h OpenGL/gl.h], [
+    AC_CHECK_HEADERS([GL/glu.h OpenGL/glu.h], [
+      have_opengl_incs=yes; break], [], [
 #ifdef HAVE_WINDOWS_H
 #include <windows.h>
 #endif
-])
-break
-], [], [
+    ])
+    break
+    ], [], [
 #ifdef HAVE_WINDOWS_H
 #include <windows.h>
 #endif
-])
-if test "$have_opengl_incs" = "yes"; then
-  case $canonical_host_type in
-    *-*-mingw32* | *-*-msdosmsvc)
-      save_LIBS="$LIBS"
-      LIBS="$LIBS -lopengl32"
-      AC_MSG_CHECKING([for glEnable in -lopengl32])
-      AC_TRY_LINK([
+    ])
+
+  if test "$have_opengl_incs" = "yes"; then
+    case $canonical_host_type in
+      *-*-mingw32* | *-*-msdosmsvc)
+        save_LIBS="$LIBS"
+        LIBS="$LIBS -lopengl32"
+        AC_MSG_CHECKING([for glEnable in -lopengl32])
+        AC_TRY_LINK([
 #if HAVE_WINDOWS_H
 #include <windows.h>
 #endif
 #if defined (HAVE_GL_GL_H)
 #include <GL/gl.h>
 #elif defined (HAVE_OPENGL_GL_H)
 #include <OpenGL/gl.h>
 #endif
-], [
-glEnable(GL_SMOOTH);], OPENGL_LIBS="-lopengl32 -lglu32")
-      LIBS="$save_LIBS"
-      if test "x$OPENGL_LIBS" != "x"; then
-        AC_MSG_RESULT(yes)
-      else
-        AC_MSG_RESULT(no)
-      fi
-      ;;
-    *)
-      save_LDFLAGS="$LDFLAGS"
-      LDFLAGS="$LDFLAGS -L/usr/X11R6/lib"
-      AC_CHECK_LIB(GL, glEnable, OPENGL_LIBS="-L/usr/X11R6/lib -lGL -lGLU")
-      LDFLAGS="$save_LDFLAGS"
-      ;;
-  esac
+], [glEnable(GL_SMOOTH);], OPENGL_LIBS="-lopengl32 -lglu32")
+        LIBS="$save_LIBS"
+        if test "x$OPENGL_LIBS" != "x"; then
+          AC_MSG_RESULT(yes)
+        else
+          AC_MSG_RESULT(no)
+        fi
+        ;;
+      *)
+        save_LDFLAGS="$LDFLAGS"
+        LDFLAGS="$LDFLAGS -L/usr/X11R6/lib"
+        AC_CHECK_LIB(GL, glEnable, OPENGL_LIBS="-L/usr/X11R6/lib -lGL -lGLU")
+        LDFLAGS="$save_LDFLAGS"
+        ;;
+    esac
+  fi
 fi
 AC_SUBST(OPENGL_LIBS)
 ])
 dnl
+dnl See if function gluTessCallback is called with "(...)"
+dnl
+dnl OCTAVE_GLUTESSCALLBACK_THREEDOTS
+AC_DEFUN(OCTAVE_GLUTESSCALLBACK_THREEDOTS,
+[AC_CACHE_CHECK([whether gluTessCallback is called with "(...)"],
+octave_cv_glutesscallback_threedots,
+[AC_LANG_PUSH(C++)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#ifdef HAVE_GL_GLU_H
+#include <GL/glu.h>
+#elif defined HAVE_OPENGL_GLU_H || defined HAVE_FRAMEWORK_OPENGL
+#include <OpenGL/glu.h>
+#endif]],
+[[GLvoid (*func)(...); gluTessCallback(0, 0, func);]])],
+octave_cv_glutesscallback_threedots="yes", octave_cv_glutesscallback_threedots="no")])
+AC_LANG_POP(C++)
+if test $octave_cv_glutesscallback_threedots = "yes"; then
+  AC_DEFINE(HAVE_GLUTESSCALLBACK_THREEDOTS, 1, 
+    [Define if gluTessCallback is called with (...)])
+fi
+])
+dnl
 dnl Configure paths for FreeType2
 dnl Marcelo Magallon 2001-10-26, based on gtk.m4 by Owen Taylor
 dnl
 dnl Copyright 2001, 2003 by
 dnl David Turner, Robert Wilhelm, and Werner Lemberg.
 dnl
 dnl This file is part of the FreeType project, and may only be used, modified,
 dnl and distributed under the terms of the FreeType project license,
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-02-11  Thomas Treichl  <Thomas.Treichl@gmx.net>
+
+	* gl-render.h: Use HAVE_FRAMEWORK_OPENGL.
+	* gl-render.cc (opengl_tesselator, opengl_renderer::draw, 
+	opengl_renderer::init_marker): Use HAVE_FRAMEWORK_OPENGL.
+	
 2009-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::issorted, octave_value::sortrows_idx,
 	octave_value::issorted_rows): New methods.
 	* ov.cc (octave_base_value::issorted, octave_base_value::sortrows_idx,
 	octave_base_value::issorted_rows): New methods.
 	* ov.cc: Declare them.
 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -216,17 +216,21 @@ opengl_texture::create (const octave_val
 
   return retval;
 }
 
 class
 opengl_tesselator
 {
 public:
+#if defined (HAVE_FRAMEWORK_OPENGL) && defined (HAVE_GLUTESSCALLBACK_THREEDOTS)
+  typedef GLvoid (CALLBACK *fcn) (...);
+#else
   typedef void (CALLBACK *fcn) (void);
+#endif
 
 public:
 
   opengl_tesselator (void) : glu_tess (0) { init (); }
 
   virtual ~opengl_tesselator (void)
     { if (glu_tess) gluDeleteTess (glu_tess); }
 
@@ -586,17 +590,22 @@ opengl_renderer::draw (const axes::prope
 
   Matrix x_zlim = props.get_transform_zlim ();
   Matrix x_mat1 = props.get_opengl_matrix_1 ();
   Matrix x_mat2 = props.get_opengl_matrix_2 ();
   
   xZ1 = x_zlim(0)-(x_zlim(1)-x_zlim(0))/2;
   xZ2 = x_zlim(1)+(x_zlim(1)-x_zlim(0))/2;
 
+#if defined (HAVE_FRAMEWORK_OPENGL)
+  GLint vw[4];
+#else
   int vw[4];
+#endif
+
   glGetIntegerv (GL_VIEWPORT, vw);
 
   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity ();
   glScaled(1, 1, -1);
   glMultMatrixd (x_mat1.data ());
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
@@ -2667,17 +2676,21 @@ opengl_renderer::set_clipping (bool enab
         for (int i = 0; i < 6; i++)
           glDisable (GL_CLIP_PLANE0+i);
     }
 }
 
 void
 opengl_renderer::init_marker (const std::string& m, double size, float width)
 {
+#if defined (HAVE_FRAMEWORK_OPENGL)
+  GLint vw[4];
+#else
   int vw[4];
+#endif
 
   glGetIntegerv (GL_VIEWPORT, vw);
 
   glMatrixMode (GL_PROJECTION);
   glPushMatrix ();
   glLoadIdentity ();
   glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
   glMatrixMode (GL_MODELVIEW);
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -24,23 +24,23 @@ along with Octave; see the file COPYING.
 #define gl_render_h 1
 
 #ifdef HAVE_WINDOWS_H
 #include <windows.h>
 #endif
 
 #ifdef HAVE_GL_GL_H
 #include <GL/gl.h>
-#elif defined HAVE_OPENGL_GL_H
+#elif defined HAVE_OPENGL_GL_H || defined HAVE_FRAMEWORK_OPENGL
 #include <OpenGL/gl.h>
 #endif
 
 #ifdef HAVE_GL_GLU_H
 #include <GL/glu.h>
-#elif defined HAVE_OPENGL_GLU_H
+#elif defined HAVE_OPENGL_GLU_H || defined HAVE_FRAMEWORK_OPENGL
 #include <OpenGL/glu.h>
 #endif
 
 #include "graphics.h"
 
 class
 OCTINTERP_API
 opengl_renderer
