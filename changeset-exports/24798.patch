# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1519392835 -3600
#      Fri Feb 23 14:33:55 2018 +0100
# Node ID 45470049a43f0bbbbcbec2615b67916f4f3f36e4
# Parent  b901d3123745085cfe651b7e3fb0168945d5b268
Allow getframe and print to work without osmesa (bug #53186).

* NEWS: Announce support for printing invisible qt figures without osmesa.

* __opengl_print__.m: Allow invisible figures to be printed with qt if
  QOFFSCREENSURFACE is present.

* getframe.m: Allow using __get_frame__ on invisible qt figures  if
  QOFFSCREENSURFACE is present.

* Backenc.cc (Backend::get_pixels): Don't restrict to visible figures.

* Canvas.h/cc (Canvas::do_print): New pure virtual function
  (Canvas::print): Call do_print.

* GLCanvas.h/cc (GLCanvas::begin_rendering): New methods to make sure a valid
  OpenGL context is made current before rendering.
  (GLCanvas::end_rendering): Call doneCurrent.
  (GLCanvas::getPixels): Make use of begin/end_rendering.  If the figure is not
  visible or its size is frozen, draw on a framebuffer object of suitable size.
  (GLCanvas::do_print): Move code for OpenGL printing here.  Make use of
  begin/end_rendering.

* acinclude.m4: Add test for presence and usability of QOffscreenSurface.

* configure.ac: Allow building the manual with qt if QOffscreenSurface is OK.

* geometryimages.m, interpimages.m, plotimages.m, sparseimages.m,
  splineimages.m: Allow using qt toolkit to generate images for the manual when
  QOFFSCREENSURFACE is present.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -58,16 +58,19 @@ Summary of important user-visible change
     "Octave:quadcc:RelTol-conversion" and can be disabled with
 
       warning ("off", "Octave:quadcc:RelTol-conversion")
 
  ** The qr function now returns a standard factorization unless
     explicitly instructed to perform an economy factorization by using a
     final argument of 0.
 
+ ** The Qt graphics toolkit now supports offscreen printing without osmesa
+    if Octave was built with Qt >= 5.1.
+
  ** The FLTK toolkit is no longer prioritized for development.  The
     number of Octave Maintainers is too small to support three different
     graphic toolkits.  New development will target the Qt toolkit.
     While no longer prioritized, the FLTK toolkit is not deprecated and
     there is no schedule for its removal.
 
  ** The graphic object property "PickableParts" has been implemented
     which controls whether an object can accept mouse clicks.
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2786,17 +2786,17 @@ ENABLE_DOCS=yes
 AC_ARG_ENABLE([docs],
   [AS_HELP_STRING([--disable-docs], [don't build documentation files])],
   [if test "$enableval" = no; then
      ENABLE_DOCS=no
      warn_docs="building documentation disabled; make dist will fail."
      OCTAVE_CONFIGURE_WARNING([warn_docs])
    fi], [])
 if test $ENABLE_DOCS = yes; then
-  if test $opengl_graphics = no || test -n "$warn_OSMesa"; then
+  if test $opengl_graphics = no || test -n "$warn_OSMesa" || test -n "$have_qt_opengl_offscreen"; then
     if test -n "$warn_gnuplot"; then
       ENABLE_DOCS=no
       warn_docs_graphics="building documentation disabled because no suitable graphics toolkit is available; make dist will fail."
         OCTAVE_CONFIGURE_WARNING([warn_docs_graphics])
     fi
   fi
   if test -n "$warn_makeinfo"; then
     ENABLE_DOCS=no
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -137,16 +137,19 @@ endfunction
 
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
+  elseif (strcmp ("qt", graphics_toolkit ())
+          && __have_feature__ ("QOFFSCREENSURFACE"))
+    ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ()) ...
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -80,16 +80,19 @@ endfunction
 
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
+  elseif (strcmp ("qt", graphics_toolkit ())
+          && __have_feature__ ("QOFFSCREENSURFACE"))
+    ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -118,16 +118,19 @@ endfunction
 
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
+  elseif (strcmp ("qt", graphics_toolkit ())
+          && __have_feature__ ("QOFFSCREENSURFACE"))
+    ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ()) ...
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -239,16 +239,19 @@ endfunction
 
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
+  elseif (strcmp ("qt", graphics_toolkit ())
+          && __have_feature__ ("QOFFSCREENSURFACE"))
+    ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -170,16 +170,19 @@ endfunction
 
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
+  elseif (strcmp ("qt", graphics_toolkit ())
+          && __have_feature__ ("QOFFSCREENSURFACE"))
+    ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -192,17 +192,17 @@ namespace QtHandles
                     QString::fromStdString (term));
   }
 
   uint8NDArray
   Backend::get_pixels (const graphics_object& go) const
   {
     uint8NDArray retval;
 
-    if (go.get_properties ().is_visible () && go.isa ("figure"))
+    if (go.isa ("figure"))
       {
         ObjectProxy *proxy = toolkitObjectProxy (go);
 
         if (proxy)
           retval = proxy->get_pixels ();
       }
 
     return retval;
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -36,17 +36,16 @@ along with Octave; see the file COPYING.
 #include "Backend.h"
 #include "Canvas.h"
 #include "ContextMenu.h"
 #include "GLCanvas.h"
 #include "QtHandlesUtils.h"
 
 #include "annotation-dialog.h"
 
-#include "gl2ps-print.h"
 #include "oct-opengl.h"
 #include "octave-qt-link.h"
 
 #include "builtin-defun-decls.h"
 
 namespace QtHandles
 {
 
@@ -96,37 +95,16 @@ namespace QtHandles
 
           default:
             w->setCursor (origCursor);
             break;
           }
       }
   }
 
-  void
-  Canvas::print (const QString& file_cmd, const QString& term)
-  {
-    gh_manager::auto_lock lock;
-    graphics_object obj = gh_manager::get_object (m_handle);
-
-    if (obj.valid_object ())
-      {
-        graphics_object figObj (obj.get_ancestor ("figure"));
-        try
-          {
-            octave::gl2ps_print (figObj, file_cmd.toStdString (),
-                                 term.toStdString ());
-          }
-        catch (octave::execution_exception e)
-          {
-            octave_link::post_exception (std::current_exception ());
-          }
-      }
-  }
-
   /*
      Two updateCurrentPoint() routines are required:
      1) Used for QMouseEvents where cursor position data is in callback from Qt.
      2) Used for QKeyEvents where cursor position must be determined.
   */
   void
   Canvas::updateCurrentPoint (const graphics_object& fig,
                               const graphics_object& obj, QMouseEvent *event)
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -49,17 +49,20 @@ namespace QtHandles
     };
 
   public:
     virtual ~Canvas (void) = default;
 
     void redraw (bool sync = false);
     void blockRedraw (bool block = true);
 
-    void print (const QString& file_cmd, const QString& term);
+    void print (const QString& file_cmd, const QString& term)
+    {
+      do_print (file_cmd, term, m_handle);
+    }
 
     void addEventMask (int m) { m_eventMask |= m; }
     void clearEventMask (int m) { m_eventMask &= (~m); }
     void setEventMask (int m) { m_eventMask = m; }
 
     void setCursor (MouseMode mode);
 
     virtual QWidget * qWidget (void) = 0;
@@ -75,16 +78,18 @@ namespace QtHandles
 
   protected:
     virtual void draw (const graphics_handle& handle) = 0;
     virtual void drawZoomBox (const QPoint& p1, const QPoint& p2) = 0;
     virtual void resize (int x, int y, int width, int height) = 0;
     virtual graphics_object selectFromAxes (const graphics_object& ax,
                                             const QPoint& pt) = 0;
     virtual uint8NDArray do_getPixels (const graphics_handle& handle) = 0;
+    virtual void do_print (const QString& file_cmd, const QString& term,
+                           const graphics_handle& handle) = 0;
 
   protected:
     Canvas (const graphics_handle& handle)
       : m_handle (handle),
         m_redrawBlocked (false),
         m_mouseMode (NoMode),
         m_clickMode (false),
         m_eventMask (0),
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -20,17 +20,19 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "gl-render.h"
+#include "gl2ps-print.h"
 #include "graphics.h"
+#include "octave-link.h"
 
 #include "GLCanvas.h"
 #include "gl-select.h"
 
 namespace QtHandles
 {
 #if defined (HAVE_QOPENGLWIDGET)
 #  define OCTAVE_QT_OPENGL_WIDGET_FORMAT_ARGS
@@ -71,28 +73,83 @@ namespace QtHandles
       }
   }
 
   uint8NDArray
   GLCanvas::do_getPixels (const graphics_handle& gh)
   {
     uint8NDArray retval;
     graphics_object go = gh_manager::get_object (gh);
-
-    if (go)
+    
+    if (go && go.isa ("figure"))
       {
-        octave::opengl_renderer r;
+        Matrix pos = go.get ("position").matrix_value ();
+
+        // Make sure we have a valid current context
+        if (! begin_rendering ())
+          return retval;
 
-        r.set_viewport (width (), height ());
-        r.draw (go);
-        retval = r.get_pixels (width (), height ());
+        // When the figure is not visible or its size is frozen for printing,
+        // we use a framebuffer object to make sure we are rendering on a
+        // suitably large frame.
+        if (go.get ("visible").string_value () == "off"
+            || go.get ("__printing__").string_value () == "on")
+          {
+            OCTAVE_QT_OPENGL_FBO
+              fbo (pos(2), pos(3),OCTAVE_QT_OPENGL_FBO::Attachment::Depth);
+            
+            fbo.bind ();
+            
+            octave::opengl_renderer r;
+            r.set_viewport (pos(2), pos(3));
+            r.draw (go);
+            retval = r.get_pixels (pos(2), pos(3));
+            
+            fbo.release ();
+          }
+        else
+          {
+            octave::opengl_renderer r;
+            r.set_viewport (pos(2), pos(3));
+            r.draw (go);
+            retval = r.get_pixels (pos(2), pos(3));            
+          }
+
+        end_rendering ();
       }
 
     return retval;
   }
+  
+  void
+  GLCanvas::do_print (const QString& file_cmd, const QString& term,
+                      const graphics_handle& handle)
+  {
+    gh_manager::auto_lock lock;
+    graphics_object obj = gh_manager::get_object (handle);
+
+    if (obj.valid_object ())
+      {
+        graphics_object figObj (obj.get_ancestor ("figure"));
+        try
+          {
+            // Make sure we have a valid current context
+            if (! begin_rendering ())
+              error ("print: no valid OpenGL offscreen context");
+            
+            octave::gl2ps_print (figObj, file_cmd.toStdString (),
+                                 term.toStdString ());
+          }
+        catch (octave::execution_exception e)
+          {
+            octave_link::post_exception (std::current_exception ());
+            end_rendering ();
+          }
+      }
+  }
 
   void
   GLCanvas::toggleAxes (const graphics_handle& gh)
   {
     canvasToggleAxes (gh);
   }
 
   void
@@ -214,9 +271,45 @@ namespace QtHandles
 
   void
   GLCanvas::keyReleaseEvent (QKeyEvent *xevent)
   {
     if (! canvasKeyReleaseEvent (xevent))
       OCTAVE_QT_OPENGL_WIDGET::keyReleaseEvent (xevent);
   }
 
+  bool
+  GLCanvas::begin_rendering (void)
+  {
+    bool retval = true;
+    
+    if (! isValid ())
+      {
+#  if defined (HAVE_QOFFSCREENSURFACE)
+        static bool os_ctx_ok = true;
+        if (os_ctx_ok && ! m_os_context.isValid ())
+          {
+            // Try to initialize offscreen context
+            m_os_surface.create ();
+            if (! m_os_context.create ())
+              {
+                os_ctx_ok = false;
+                return false;
+              }
+          }
+       
+        retval = m_os_context.makeCurrent (&m_os_surface);
+#  else   
+        retval = false;
+#  endif
+      }
+    else
+      makeCurrent ();
+    
+    return retval;
+  }
+  
+  void
+  GLCanvas::end_rendering (void)
+  {        
+    doneCurrent ();
+  }
 }
diff --git a/libgui/graphics/GLCanvas.h b/libgui/graphics/GLCanvas.h
--- a/libgui/graphics/GLCanvas.h
+++ b/libgui/graphics/GLCanvas.h
@@ -21,35 +21,45 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_GLCanvas_h)
 #define octave_GLCanvas_h 1
 
 #if defined (HAVE_QOPENGLWIDGET)
 #  include <QOpenGLWidget>
 #  define OCTAVE_QT_OPENGL_WIDGET QOpenGLWidget
+#  include <QOpenGLFramebufferObject>
+#  define OCTAVE_QT_OPENGL_FBO QOpenGLFramebufferObject
+#  if defined (HAVE_QOFFSCREENSURFACE)
+#    include <QOpenGLContext>
+#    include <QOffscreenSurface>
+#  endif  
 #elif defined (HAVE_QGLWIDGET)
 #  include <QGLWidget>
 #  define OCTAVE_QT_OPENGL_WIDGET QGLWidget
+#  include <QGLFramebufferObject>
+#  define OCTAVE_QT_OPENGL_FBO QGLFramebufferObject
 #else
 #  error "configuration error: must have <QOpenGLWidget> or <QGLWidget>."
 #endif
 
 #include "Canvas.h"
 
 namespace QtHandles
 {
   class GLCanvas : public OCTAVE_QT_OPENGL_WIDGET, public Canvas
   {
   public:
     GLCanvas (QWidget *parent, const graphics_handle& handle);
     ~GLCanvas (void);
 
     void draw (const graphics_handle& handle);
     uint8NDArray  do_getPixels (const graphics_handle& handle);
+    void do_print (const QString& file_cmd, const QString& term,
+                   const graphics_handle& handle);
     void toggleAxes (const graphics_handle& handle);
     void toggleGrid (const graphics_handle& handle);
     void autoAxes (const graphics_handle& handle);
     void drawZoomBox (const QPoint& p1, const QPoint& p2);
     void resize (int /* x */, int /* y */,
                  int /* width */, int /* height */) { }
     graphics_object selectFromAxes (const graphics_object& ax,
                                     const QPoint& pt);
@@ -59,13 +69,23 @@ namespace QtHandles
     void paintGL (void);
     void mouseDoubleClickEvent (QMouseEvent *event);
     void mouseMoveEvent (QMouseEvent *event);
     void mousePressEvent (QMouseEvent *event);
     void mouseReleaseEvent (QMouseEvent *event);
     void wheelEvent (QWheelEvent *event);
     void keyPressEvent (QKeyEvent *event);
     void keyReleaseEvent (QKeyEvent *event);
+    
+  private:
+    
+    bool begin_rendering (void);
+    void end_rendering (void);
+
+# if defined (HAVE_QOFFSCREENSURFACE)
+    QOpenGLContext m_os_context;    
+    QOffscreenSurface m_os_surface;
+# endif
   };
 
 }
 
 #endif
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1465,16 +1465,70 @@ AC_DEFUN([OCTAVE_CHECK_QT], [
   fi
 
   AM_CONDITIONAL([AMCOND_BUILD_QT_GUI], [test $build_qt_gui = yes])
   AM_CONDITIONAL([AMCOND_BUILD_QT_GRAPHICS], [test $build_qt_graphics = yes])
   AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA], [test $use_qscintilla = yes])
   AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
 ])
 dnl
+dnl Check whether QOffscreenSurface is present.
+dnl
+AC_DEFUN([OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK], [
+  dnl Normally the language and compiler flags would be set and restored
+  dnl inside of the AC_CACHE_CHECK body.  Because we also need to check for
+  dnl Qt header files associated with the compilation test, set and restore
+  dnl these values outside of the AC_CACHE_CHECK for this macro only.
+  AC_LANG_PUSH(C++)
+  ac_octave_save_CPPFLAGS="$CPPFLAGS"
+  ac_octave_save_CXXFLAGS="$CXXFLAGS"
+  CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+  CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
+  AC_CHECK_HEADERS([QOffscreenSurface])
+  AC_CACHE_CHECK([whether Qt supports full offscreen OpenGL rendering],
+    [octave_cv_qt_opengl_os_ok],
+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+         #if HAVE_WINDOWS_H
+         #  include <windows.h>
+         #endif
+         #if defined (HAVE_GL_GL_H)
+         #  include <GL/gl.h>
+         #elif defined (HAVE_OPENGL_GL_H)
+         #  include <OpenGL/gl.h>
+         #endif
+         #if defined (HAVE_GL_GLU_H)
+         #  include <GL/glu.h>
+         #elif defined HAVE_OPENGL_GLU_H || defined HAVE_FRAMEWORK_OPENGL
+         #  include <OpenGL/glu.h>
+         #endif
+         #if defined (HAVE_QOPENGLWIDGET)
+         #  include <QOpenGLWidget>
+         #  include <QOpenGLContext>
+         #endif
+         #if defined (HAVE_QOFFSCREENSURFACE)
+         #  include <QOffscreenSurface>
+         #endif
+         QOpenGLContext ctx;    
+         QOffscreenSurface surf;
+       ]])],
+       octave_cv_qt_opengl_os_ok=yes,
+       octave_cv_qt_opengl_os_ok=no)
+  ])
+  CPPFLAGS="$ac_octave_save_CPPFLAGS"
+  CXXFLAGS="$ac_octave_save_CXXFLAGS"
+  AC_LANG_POP(C++)
+  if test $octave_cv_qt_opengl_os_ok = yes; then
+    $1
+    :
+  else
+    $2
+    :
+  fi
+])
+dnl
 dnl Check whether Qt works with full OpenGL support
 dnl
 AC_DEFUN([OCTAVE_CHECK_QT_OPENGL_OK], [
   dnl Normally the language and compiler flags would be set and restored
   dnl inside of the AC_CACHE_CHECK body.  Because we also need to check for
   dnl Qt header files associated with the compilation test, set and restore
   dnl these values outside of the AC_CACHE_CHECK for this macro only.
   AC_LANG_PUSH(C++)
@@ -1527,29 +1581,30 @@ AC_DEFUN([OCTAVE_CHECK_QT_OPENGL_OK], [
     :
   else
     $2
     :
   fi
 ])
 dnl
 dnl Check whether Qt VERSION is present, supports QtOpenGL and
-dnl QScintilla and will work for Octave.
+dnl QScintilla, and will work for Octave.
 dnl
 dnl OCTAVE_CHECK_QT_VERSION(VERSION)
 dnl
 AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_MSG_CHECKING([Qt version $1])
   QT_CPPFLAGS=
   QT_LDFLAGS=
   QT_LIBS=
 
   qt_version="$1";
 
   build_qt_gui=yes
   build_qt_graphics=no
+  have_qt_opengl_offscreen=no
   win32_terminal=no
 
   warn_qt_libraries=""
   warn_qt_version=""
   warn_qt_tools=""
   warn_qt_setlocale=""
   warn_qt_setvbuf=""
   warn_qt_lib_fcns=""
@@ -1720,16 +1775,17 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     OCTAVE_CHECK_MEMBER_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_MEMBER_QFONT_MONOSPACE
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
       if test $build_qt_graphics = yes; then
+        OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK([have_qt_opengl_offscreen=yes])
         AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
       fi
     fi
 
     OCTAVE_CHECK_QSCINTILLA([$qt_version])
 
   fi
   AC_SUBST(MOCFLAGS)
diff --git a/scripts/image/getframe.m b/scripts/image/getframe.m
--- a/scripts/image/getframe.m
+++ b/scripts/image/getframe.m
@@ -90,17 +90,20 @@ function frame = getframe (h = [], rect 
     y = [rect(2); rect(2); rect(2)+rect(4); rect(2)+rect(4)];
     in = inpolygon (x, y, xv, yv);
     if (! all (in))
       error ("getframe: RECT must define a region inside the figure");
     endif
     pos = rect;
   endif
 
-  if (strcmp (get (hf, "visible"), "on"))
+  if (strcmp (get (hf, "visible"), "on")
+      || (strcmp (get (hf, "__graphics_toolkit__"), "qt")
+          && (strcmp (get (hf, "__gl_window__"), "on")
+              || __have_feature__ ("QOFFSCREENSURFACE"))))
     cdata = __get_frame__ (hf);
   else
     ## Use OpenGL offscreen rendering with OSMesa for non-visible figures
     try
       cdata = __osmesa_print__ (hf);
     catch
       error ("getframe: couldn't render invisible figure. %s", lasterr ());
     end_try_catch
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -147,17 +147,18 @@ function opts = __opengl_print__ (opts)
 
   for n = 1:numel (pipeline)
     if (opts.debug)
       fprintf ("opengl-pipeline: '%s'\n", pipeline{n});
     endif
 
     if (strcmp (get (opts.figure, "visible"), "on")
         || (strcmp (get (opts.figure, "__graphics_toolkit__"), "qt")
-            && strcmp (get (opts.figure, "__gl_window__"), "on")))
+            && (strcmp (get (opts.figure, "__gl_window__"), "on")
+                || __have_feature__ ("QOFFSCREENSURFACE"))))
       ## Use toolkits "print_figure" method
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
     else
       ## Use OpenGL offscreen rendering with OSMesa
       __osmesa_print__ (opts.figure, ['|' pipeline{n}], gl2ps_device{n});
     endif
   endfor
 
