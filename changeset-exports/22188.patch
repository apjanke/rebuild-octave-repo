# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1469658331 14400
#      Wed Jul 27 18:25:31 2016 -0400
# Node ID 1344509a480c02f99fe0ef6d3449337aa5eaa059
# Parent  2aae8894885be42428ce5713e06c60a4d2aafad8
style fixes

* ButtonGroup.cc, marker.h, xzip.cc, randmtzig.cc: Don't comment
#else or #endif.  Prefer #if defined.

diff --git a/libgui/graphics/ButtonGroup.cc b/libgui/graphics/ButtonGroup.cc
--- a/libgui/graphics/ButtonGroup.cc
+++ b/libgui/graphics/ButtonGroup.cc
@@ -15,17 +15,17 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#ifdef HAVE_CONFIG_H
+#if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QAbstractButton>
 #include <QButtonGroup>
 #include <QEvent>
 #include <QFrame>
 #include <QLabel>
diff --git a/libgui/src/m-editor/marker.h b/libgui/src/m-editor/marker.h
--- a/libgui/src/m-editor/marker.h
+++ b/libgui/src/m-editor/marker.h
@@ -89,9 +89,10 @@ private:
 
   QsciScintilla *       _edit_area;
   int                   _original_linenr;
   editor_markers        _marker_type;
   int                   _mhandle;
   QString               _condition;
 };
 
-#endif // MARKER_H
+#endif
+
diff --git a/libinterp/dldfcn/xzip.cc b/libinterp/dldfcn/xzip.cc
--- a/libinterp/dldfcn/xzip.cc
+++ b/libinterp/dldfcn/xzip.cc
@@ -47,21 +47,21 @@
 
 #include <string>
 #include <list>
 #include <functional>
 #include <stdexcept>
 #include <iostream>
 #include <fstream>
 
-#ifdef HAVE_BZLIB_H
+#if defined (HAVE_BZLIB_H)
 #  include <bzlib.h>
 #endif
 
-#ifdef HAVE_ZLIB_H
+#if defined (HAVE_ZLIB_H)
 #  include <zlib.h>
 #endif
 
 #include "Array.h"
 #include "str-vec.h"
 #include "glob-match.h"
 #include "file-ops.h"
 #include "dir-ops.h"
@@ -102,17 +102,18 @@ public:
 
   ~CFile ()
   {
     if (fp)
       std::fclose (fp);
   }
 };
 
-#ifdef HAVE_BZ2
+#if defined (HAVE_BZ2)
+
 class bz2
 {
 private:
   class zipper
   {
   private:
     int status = BZ_OK;
     CFile source;
@@ -174,17 +175,18 @@ public:
   zip (const std::string& source_path, const std::string& dest_path)
   {
     bz2::zipper z (source_path, dest_path);
     z.deflate ();
     z.close ();
   }
 
 };
-#endif // HAVE_BZL2
+
+#endif
 
 // Note about zlib and gzip
 //
 // gzip is a format for compressed single files.  zlib is a format
 // designed for in-memory and communication channel applications.
 // gzip uses the same format internally for the compressed data but
 // has different headers and trailers.
 //
@@ -203,17 +205,18 @@ public:
 // Recent versions (on which we are already dependent) have deflateInit2()
 // to do it.  We still need to get the right metadata for the header
 // ourselves though.
 //
 // The header is defined in RFC #1952
 // GZIP file format specification version 4.3
 
 
-#ifdef HAVE_Z
+#if defined (HAVE_Z)
+
 class gz
 {
 private:
 
   // Util class to get a non-const char*
   class uchar_array
   {
   public:
@@ -288,20 +291,22 @@ private:
       //     13 - Acorn RISCOS
       //    255 - unknown
       //
       // The list is problematic because it mixes OS and filesystem.  It
       // also does not specify whether filesystem relates to source or
       // destination file.
 
 #if defined (__WIN32__)
-      os = 0; // or should it be 11?
+      // Or should it be 11?
+      os = 0;
 #elif defined (__APPLE__)
       os = 7;
-#else // unix by default?
+#else
+      // Unix by default?
       os = 3;
 #endif
     }
   };
 
   class zipper
   {
   private:
@@ -398,17 +403,18 @@ public:
   static void
   zip (const std::string& source_path, const std::string& dest_path)
   {
     gz::zipper z (source_path, dest_path);
     z.deflate ();
     z.close ();
   }
 };
-#endif // HAVE_Z
+
+#endif
 
 
 template<typename X>
 string_vector
 xzip (const Array<std::string>& source_patterns,
       const std::function<std::string(const std::string&)>& mk_dest_path)
 {
   std::list<std::string> dest_paths;
@@ -541,17 +547,17 @@ lead to files overwritting each other if
 same name.
 
 If @var{dir} does not exist it is created.
 
 The optional output @var{filelist} is a list of the compressed files.
 @seealso{gunzip, unpack, bzip2, zip, tar}
 @end deftypefn */)
 {
-#ifndef HAVE_Z
+#if ! defined (HAVE_Z)
   err_disabled_feature ("gzip", "gzip");
 #else
   return xzip<gz> ("gzip", args);
 #endif
 }
 
 /*
 %!error gzip ()
@@ -578,17 +584,17 @@ lead to files overwritting each other if
 same name.
 
 If @var{dir} does not exist it is created.
 
 The optional output @var{filelist} is a list of the compressed files.
 @seealso{bunzip2, unpack, gzip, zip, tar}
 @end deftypefn */)
 {
-#ifndef HAVE_BZ2
+#if ! defined (HAVE_BZ2)
   err_disabled_feature ("bzip2", "bzip2");
 #else
   return xzip<bz2> ("bzip2", args);
 #endif
 }
 
 // Tests for both gzip/bzip2 and gunzip/bunzip2
 /*
diff --git a/liboctave/numeric/randmtzig.cc b/liboctave/numeric/randmtzig.cc
--- a/liboctave/numeric/randmtzig.cc
+++ b/liboctave/numeric/randmtzig.cc
@@ -582,23 +582,23 @@ oct_randn (void)
       uint32_t *p = (uint32_t *)&rabs;
       lo = randi32 ();
       idx = lo & 0xFF;
       hi = randi32 ();
       si = hi & UMASK;
       p[0] = lo;
       p[1] = hi & 0x1FFFFF;
       x = ( si ? -rabs : rabs ) * wi[idx];
-# else /* ! HAVE_X86_32 */
+# else
       /* arbitrary mantissa (selected by NRANDI, with 1 bit for sign) */
       const uint64_t r = NRANDI;
       const int64_t rabs = r >> 1;
       const int idx = static_cast<int> (rabs & 0xFF);
       const double x = ( (r & 1) ? -rabs : rabs) * wi[idx];
-# endif /* ! HAVE_X86_32 */
+# endif
       if (rabs < static_cast<int64_t> (ki[idx]))
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the normal tail, the method of Marsaglia[5] provides:
            * generate x = -ln(U_1)/r, y = -ln(U_2), until y+y > x*x,
