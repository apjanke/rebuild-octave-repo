# HG changeset patch
# User jwe
# Date 781114955 0
#      Sun Oct 02 16:22:35 1994 +0000
# Node ID b284388e8999817faf7ccf085b0eb6c923d3dfbc
# Parent  3fc1ccd5a9db0dec9222e9a388b071bfe28947de
[project @ 1994-10-02 16:22:35 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -216,33 +216,77 @@ DEFUN ("atan2", Fatan2, Satan2, 2, 1,
 
 DEFUN ("cumprod", Fcumprod, Scumprod, 1, 1,
   "cumprod (X): cumulative products")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).cumprod ();
+  if (nargin == 1)
+    {
+      tree_constant arg = args(0);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.cumprod ();
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix tmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.cumprod ();
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("cumprod", arg);
+	  return retval;
+	}
+    }
   else
     print_usage ("cumprod");
 
   return retval;
 }
 
 DEFUN ("cumsum", Fcumsum, Scumsum, 1, 1,
   "cumsum (X): cumulative sums")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).cumsum ();
+  if (nargin == 1)
+    {
+      tree_constant arg = args(0);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.cumsum ();
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix tmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.cumsum ();
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("cumsum", arg);
+	  return retval;
+	}
+    }
   else
     print_usage ("cumsum");
 
   return retval;
 }
 
 DEFUN ("diag", Fdiag, Sdiag, 2, 1,
   "diag (X [,k]): form/extract diagonals")
@@ -278,18 +322,40 @@ DEFUN ("isstr", Fisstr, Sisstr, 1, 1,
 
 DEFUN ("prod", Fprod, Sprod, 1, 1,
   "prod (X): products")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).prod ();
+  if (nargin == 1)
+    {
+      tree_constant arg = args(0);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.prod ();
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix tmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.prod ();
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("prod", arg);
+	  return retval;
+	}
+    }
   else
     print_usage ("prod");
 
   return retval;
 }
 
 DEFUN ("setstr", Fsetstr, Ssetstr, 1, 1,
   "setstr (V): convert a vector to a string")
@@ -340,33 +406,77 @@ DEFUN ("size", Fsize, Ssize, 1, 1,
 
 DEFUN ("sum", Fsum, Ssum, 1, 1,
   "sum (X): sum of elements")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).sum ();
+  if (nargin == 1)
+    {
+      tree_constant arg = args(0);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.sum ();
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix tmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.sum ();
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("sum", arg);
+	  return retval;
+	}
+    }
   else
     print_usage ("sum");
 
   return retval;
 }
 
 DEFUN ("sumsq", Fsumsq, Ssumsq, 1, 1,
   "sumsq (X): sum of squares of elements")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).sumsq ();
+  if (nargin == 1)
+    {
+      tree_constant arg = args(0);
+
+      if (arg.is_real_type ())
+	{
+	  Matrix tmp = arg.matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.sumsq ();
+	}
+      else if (arg.is_complex_type ())
+	{
+	  ComplexMatrix tmp = arg.complex_matrix_value ();
+
+	  if (! error_state)
+	    retval(0) = tmp.sumsq ();
+	}
+      else
+	{
+	  gripe_wrong_type_arg ("sumsq", arg);
+	  return retval;
+	}
+    }
   else
     print_usage ("sumsq");
 
   return retval;
 }
 
 static void
 check_dimensions (int& nr, int& nc, const char *warnfor)
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -358,22 +358,16 @@ private:
   tree_constant_rep *make_unique_map (void);
 
 public:
 
 // -------------------------------------------------------------------
 
 // These may not need to be member functions.
 
-  tree_constant cumprod (void) const { return rep->cumprod (); }
-  tree_constant cumsum (void) const { return rep->cumsum (); }
-  tree_constant prod (void) const { return rep->prod (); }
-  tree_constant sum (void) const { return rep->sum (); }
-  tree_constant sumsq (void) const { return rep->sumsq (); }
-
   tree_constant diag (void) const { return rep->diag (); }
   tree_constant diag (const tree_constant& a) const { return rep->diag (a); }
 
   tree_constant mapper (Mapper_fcn& m_fcn, int print) const
     { return rep->mapper (m_fcn, print); }
 
 // -------------------------------------------------------------------
 
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -2119,249 +2119,16 @@ do_unary_op (tree_constant& a, tree_expr
     default:
       panic_impossible ();
       break;
     }
 
   return ans;
 }
 
-tree_constant
-TC_REP::cumprod (void) const
-{
-  if (type_tag == string_constant || type_tag == range_constant)
-    {
-      tree_constant tmp = make_numeric ();
-      return tmp.cumprod ();
-    }
-
-  tree_constant retval;
-
-  switch (type_tag)
-    {
-    case scalar_constant:
-      retval = tree_constant (scalar);
-      break;
-
-    case matrix_constant:
-      {
-	Matrix m = matrix->cumprod ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case complex_scalar_constant:
-      retval = tree_constant (*complex_scalar);
-      break;
-
-    case complex_matrix_constant:
-      {
-	ComplexMatrix m = complex_matrix->cumprod ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case string_constant:
-    case range_constant:
-    case magic_colon:
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
-tree_constant
-TC_REP::cumsum (void) const
-{
-  if (type_tag == string_constant || type_tag == range_constant)
-    {
-      tree_constant tmp = make_numeric ();
-      return tmp.cumsum ();
-    }
-
-  tree_constant retval;
-
-  switch (type_tag)
-    {
-    case scalar_constant:
-      retval = tree_constant (scalar);
-      break;
-
-    case matrix_constant:
-      {
-	Matrix m = matrix->cumsum ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case complex_scalar_constant:
-      retval = tree_constant (*complex_scalar);
-      break;
-
-    case complex_matrix_constant:
-      {
-	ComplexMatrix m = complex_matrix->cumsum ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case string_constant:
-    case range_constant:
-    case magic_colon:
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
-tree_constant
-TC_REP::prod (void) const
-{
-  if (type_tag == string_constant || type_tag == range_constant)
-    {
-      tree_constant tmp = make_numeric ();
-      return tmp.prod ();
-    }
-
-  tree_constant retval;
-
-  switch (type_tag)
-    {
-    case scalar_constant:
-      retval = tree_constant (scalar);
-      break;
-
-    case matrix_constant:
-      {
-	Matrix m = matrix->prod ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case complex_scalar_constant:
-      retval = tree_constant (*complex_scalar);
-      break;
-
-    case complex_matrix_constant:
-      {
-	ComplexMatrix m = complex_matrix->prod ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case string_constant:
-    case range_constant:
-    case magic_colon:
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
-tree_constant
-TC_REP::sum (void) const
-{
-  if (type_tag == string_constant || type_tag == range_constant)
-    {
-      tree_constant tmp = make_numeric ();
-      return tmp.sum ();
-    }
-
-  tree_constant retval;
-
-  switch (type_tag)
-    {
-    case scalar_constant:
-      retval = tree_constant (scalar);
-      break;
-
-    case matrix_constant:
-      {
-	Matrix m = matrix->sum ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case complex_scalar_constant:
-      retval = tree_constant (*complex_scalar);
-      break;
-
-    case complex_matrix_constant:
-      {
-	ComplexMatrix m = complex_matrix->sum ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case string_constant:
-    case range_constant:
-    case magic_colon:
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
-tree_constant
-TC_REP::sumsq (void) const
-{
-  if (type_tag == string_constant || type_tag == range_constant)
-    {
-      tree_constant tmp = make_numeric ();
-      return tmp.sumsq ();
-    }
-
-  tree_constant retval;
-
-  switch (type_tag)
-    {
-    case scalar_constant:
-      retval = tree_constant (scalar * scalar);
-      break;
-
-    case matrix_constant:
-      {
-	Matrix m = matrix->sumsq ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case complex_scalar_constant:
-      {
-	Complex c (*complex_scalar);
-	retval = tree_constant (c * c);
-      }
-      break;
-
-    case complex_matrix_constant:
-      {
-	ComplexMatrix m = complex_matrix->sumsq ();
-	retval = tree_constant (m);
-      }
-      break;
-
-    case string_constant:
-    case range_constant:
-    case magic_colon:
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  return retval;
-}
-
 static tree_constant
 make_diag (const Matrix& v, int k)
 {
   int nr = v.rows ();
   int nc = v.columns ();
   assert (nc == 1 || nr == 1);
 
   tree_constant retval;
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -218,22 +218,16 @@ private:
 
   friend tree_constant do_unary_op (tree_constant& a,
 				    tree_expression::type t);
 
 // -------------------------------------------------------------------
 
 // These may not need to be member functions.
 
-  tree_constant cumprod (void) const;
-  tree_constant cumsum (void) const;
-  tree_constant prod (void) const;
-  tree_constant sum (void) const;
-  tree_constant sumsq (void) const;
-
   tree_constant diag (void) const;
   tree_constant diag (const tree_constant& a) const;
 
   tree_constant mapper (Mapper_fcn& m_fcn, int print) const;
 
 // -------------------------------------------------------------------
 
 // We want to eliminate this.
