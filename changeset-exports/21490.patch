# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458344200 25200
#      Fri Mar 18 16:36:40 2016 -0700
# Node ID 243b04c97b56b49610134f048c9b62b71cfff6df
# Parent  ea81c2fdd5683dcb01473fa189d1a4ae25ee0dc0
textscan: Use references rather than pointers to stream objects

* textscan.cc, textscan.h (textscan::scan, textscan::do_scan): Accept
a reference to a std::istream rather than a pointer.  (Ftextscan): Pass
streams by reference.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -1232,17 +1232,17 @@ textscan::textscan (void)
     header_lines (0), treat_as_empty (), treat_as_empty_len (0),
     whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
     return_on_error (2), collect_output (false),
     multiple_delims_as_one (false), default_exp (true),
     numeric_delim (false), lines (0)
 { }
 
 octave_value
-textscan::scan (std::istream *isp, const octave_value_list& args)
+textscan::scan (std::istream& isp, const octave_value_list& args)
 {
   std::string format;
   int params = 0;
 
   if (args.length () == 0)
     format = "%f";      // ommited format = %f.  explicit "" = width from file
   else if (args(0).is_string ())
     {
@@ -1278,34 +1278,31 @@ textscan::scan (std::istream *isp, const
   textscan_format_list fmt_list (format);
 
   parse_options (tmp_args, fmt_list);
 
   return do_scan (isp, fmt_list, ntimes);
 }
 
 octave_value
-textscan::do_scan (std::istream *isp, textscan_format_list& fmt_list,
+textscan::do_scan (std::istream& isp, textscan_format_list& fmt_list,
                    octave_idx_type ntimes)
 {
   octave_value retval;
 
-  if (! isp)
-    error ("internal error: textscan called with invalid istream");
-
   if (fmt_list.num_conversions () == -1)
     error ("textscan: invalid format specified");
 
   if (fmt_list.num_conversions () == 0)
     error ("textscan: no valid format conversion specifiers\n");
 
   // skip the first  header_lines
   std::string dummy;
-  for (int i = 0; i < header_lines && *isp; i++)
-    getline (*isp, dummy, static_cast<char> (eol2));
+  for (int i = 0; i < header_lines && isp; i++)
+    getline (isp, dummy, static_cast<char> (eol2));
 
   // Create our own buffered stream, for fast get/putback/tell/seek.
 
   // First, see how far ahead it should let us look.
   int max_lookahead = std::max (std::max (comment_len, treat_as_empty_len),
                                 std::max (delim_len, 3)); // 3 for NaN and Inf
 
   // Next, choose a buffer size to avoid reading too much, or too often.
@@ -1314,17 +1311,17 @@ textscan::do_scan (std::istream *isp, te
     buf_size = buffer_size;
   else if (ntimes > 0)
     {
       // Avoid overflow of 80*ntimes...
       buf_size = std::min (buf_size, std::max (ntimes, 80 * ntimes));
       buf_size = std::max (buf_size, ntimes);
     }
   // Finally, create the stream.
-  delimited_stream is (*isp, whitespace + delims, max_lookahead, buf_size);
+  delimited_stream is (isp, whitespace + delims, max_lookahead, buf_size);
 
   // Grow retval dynamically.  "size" is half the initial size
   // (FIXME -- Should we start smaller if ntimes is large?)
   octave_idx_type size = ((ntimes < 8 && ntimes >= 0) ? ntimes : 1);
   Array<octave_idx_type> row_idx (dim_vector (1,2));
   row_idx(1) = 0;
 
   int err = 0;
@@ -1401,22 +1398,22 @@ textscan::do_scan (std::istream *isp, te
     }
 
   if ((err & 4) && ! return_on_error)
     error ("textscan: Read error in field %d of row %d",
            done_after + 1, row + 1);
 
   // If file does not end in EOL, do not pad columns with NaN.
   bool uneven_columns = false;
-  if (isp->eof () || (err & 4))
+  if (isp.eof () || (err & 4))
     {
-      isp->clear ();
-      isp->seekg (-1, std::ios_base::end);
-      int last_char = isp->get ();
-      isp->setstate (isp->eofbit);
+      isp.clear ();
+      isp.seekg (-1, std::ios_base::end);
+      int last_char = isp.get ();
+      isp.setstate (isp.eofbit);
       uneven_columns = (last_char != eol1 && last_char != eol2);
     }
 
   // convert return value to Cell array
   Array<octave_idx_type> ra_idx (dim_vector (1,2));
 
   // (err & 1) means "error, and no columns read this row
   // FIXME -- This may redundant now that done_after=0 says the same
@@ -3034,28 +3031,31 @@ from the beginning of the file or string
   octave_value_list tmp_args = args.splice (0, 1);
 
   textscan tscanner;
 
   if (args(0).is_string ())
     {
       std::istringstream is (args(0).string_value ());
 
-      retval(0) = tscanner.scan (&is, tmp_args);
+      retval(0) = tscanner.scan (is, tmp_args);
 
       std::ios::iostate state = is.rdstate ();
       is.clear ();
       retval(1) = octave_value (static_cast<long>(is.tellg ()));
       is.setstate (state);
     }
   else
     {
       octave_stream os = octave_stream_list::lookup (args(0), "textscan");
-
-      retval(0) = tscanner.scan (os.input_stream (), tmp_args);
+      std::istream *isp = os.input_stream ();
+      if (! isp)
+        error ("internal error: textscan called with invalid istream");
+
+      retval(0) = tscanner.scan (*isp, tmp_args);
 
       // FIXME -- warn if stream is not opened in binary mode?
       std::ios::iostate state = os.input_stream ()->rdstate ();
       os.input_stream ()->clear ();
       retval(1) = os.tell ();
       os.input_stream ()->setstate (state);
     }
 
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -56,17 +56,17 @@ OCTINTERP_API
 textscan
 {
 public:
 
   textscan (void);
 
   ~textscan (void) { }
 
-  octave_value scan (std::istream *isp, const octave_value_list& args);
+  octave_value scan (std::istream& isp, const octave_value_list& args);
 
 private:
 
   friend class textscan_format_list;
 
   std::string buf;
 
   // Three cases for delim_table and delim_list
@@ -119,17 +119,17 @@ private:
 
   bool collect_output;
   bool multiple_delims_as_one;
   bool default_exp;
   bool numeric_delim;
 
   octave_idx_type lines;
 
-  octave_value do_scan (std::istream *isp, textscan_format_list& fmt_list,
+  octave_value do_scan (std::istream& isp, textscan_format_list& fmt_list,
                         octave_idx_type ntimes);
 
   void parse_options (const octave_value_list& args,
                       textscan_format_list& fmt_list);
 
   int read_format_once (delimited_stream &isp, textscan_format_list& fmt_list,
                         std::list<octave_value> & retval,
                         Array<octave_idx_type> row, int& done_after);
