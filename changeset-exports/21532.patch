# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1458639556 -39600
#      Tue Mar 22 20:39:16 2016 +1100
# Node ID 936ab0fca2f72eb7659ea10b464514b93a5fb94b
# Parent  32101a071a9cb12e740f176aebd811a582bb8474
Textscan returns emptyVal for rows with literal but no conversion (bug #47458)

* oct-stream.cc (scan): only skip final line if nothing worked (err & 8)

* oct-stream.cc (read_format_once): Record whether anything worked.

* file-io.cc: Add built-in self test.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2118,16 +2118,21 @@ as the name of the function when reporti
 %! C = textscan ("+i +in +inf +infinity", "%f %f%s %f %f %s", "ExpChars", "eE");
 %! assert (C, {i, i, {"n"}, Inf, Inf, {"inity"}});
 
 %% Check single quoted format interprets control sequences
 %!test
 %! C = textscan ("1 2\t3 4", '%f %[^\t] %f %f');
 %! assert (C, {1, {"2"}, 3, 4});
 
+%% Check a non-empty line with no valid conversion registers empytValue
+%!test
+%! C = textscan ("Empty\n", "Empty%f %f");
+%! assert (C, { NaN, NaN })
+
 %% Check overflow and underflow of integer types
 %!test
 %! a = "-1e90 ";
 %! b = "1e90 ";
 %! fmt = "%d8 %d16 %d32 %d64 %u8 %u16 %u32 %u64 ";
 %! C = textscan ([a a a a a a a a b b b b b b b b], fmt);
 %! assert (C{1}, int8 ([-128; 127]));
 %! assert (C{2}, int16 ([-32768; 32767]));
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2694,17 +2694,18 @@ textscan::do_scan (std::istream& isp, te
   // convert return value to Cell array
   Array<octave_idx_type> ra_idx (dim_vector (1,2));
 
   // (err & 1) means "error, and no columns read this row
   // FIXME -- This may redundant now that done_after=0 says the same
   if (err & 1)
     done_after = out.size () + 1;
 
-  int valid_rows = (row == ntimes) ? ntimes : ((err & 1) ? row : row+1);
+  int valid_rows = (row == ntimes) ? ntimes
+                   : (((err & 1) && (err & 8)) ? row : row+1);
   dim_vector dv (valid_rows, 1);
 
   ra_idx(0) = 0;
   int i = 0;
   if (! collect_output)
     {
       retval = Cell (dim_vector (1, out.size ()));
       for (std::list<octave_value>::iterator col = out.begin ();
@@ -3453,16 +3454,17 @@ textscan::read_format_once (delimited_st
                             std::list<octave_value>& retval,
                             Array<octave_idx_type> row, int& done_after)
 {
   const textscan_format_elt *elem = fmt_list.first ();
   std::list<octave_value>::iterator out = retval.begin ();
   bool no_conversions = true;
   bool done = false;
   bool conversion_failed = false;       // Record for ReturnOnError
+  bool nothing_worked = true;
 
   octave_quit ();
 
   for (size_t i = 0; i < fmt_list.numel (); i++)
     {
       bool this_conversion_failed = false;
 
       // Clear fail of previous numeric conversions.
@@ -3517,48 +3519,46 @@ textscan::read_format_once (delimited_st
 
       // FIXME -- these conversions "ignore delimiters".  Should they include
       // delimiters at the start of the conversion, or can those be skipped?
       if (elem->type != textscan_format_elt::literal_conversion
           // && elem->type != '[' && elem->type != '^' && elem->type != 'c'
          )
         skip_delim (is);
 
+      if (is.eof ())
+        {
+          if (! done)
+            done_after = i+1;
+
+          // note EOF, but process others to get empty_val.
+          done = true;
+        }
+
       if (this_conversion_failed)
         {
           if (is.tellg () == pos && ! conversion_failed)
             {                 // done_after = first failure
               done_after = i; // note fail, but parse others to get empty_val
               conversion_failed = true;
             }
           else
             this_conversion_failed = false;
         }
-
-      if (is.eof ())
-        {
-          if (! done)
-            done_after = i+1;
-
-          // note EOF, but process others to get empty_val.
-          done = true;
-        }
+      else if (! done && !conversion_failed)
+        nothing_worked = false;
     }
 
   if (done)
     is.setstate (std::ios::eofbit);
 
-  // Returning -3 means "error, and no columns read this row".
-  if (is.eof ())
-    return (2 + no_conversions);
-
-  if (conversion_failed)
-    return (4 + no_conversions);
-
-  return 0;
+  return no_conversions + (is.eof () ? 2 : 0)
+                        + (conversion_failed ? 4 : 0)
+                        + (nothing_worked ? 8 : 0);
+
 }
 
 void
 textscan::parse_options (const octave_value_list& args,
                          textscan_format_list& fmt_list)
 {
   int last = args.length ();
   int n = last;
