# HG changeset patch
# User jwe
# Date 1043897186 0
#      Thu Jan 30 03:26:26 2003 +0000
# Node ID da7226ca8b9151ecdabd191f9ecc9efb2a839c66
# Parent  a9560cebae6ebc8d6b239c5e4fa94cb5efe79bbc
[project @ 2003-01-30 03:26:26 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2003-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* c-file-ptr-stream.cc (c_file_ptr_buf::underflow_common): New
+	function.
+	* c-file-ptr-stream.h (c_file_ptr_buf::underflow,
+	c_file_ptr_buf::uflow): Use it.
+	(c_file_ptr_buf): Derive from std::streambuf, not OCTAVE_STD_FILEBUF.
+	Don't cache file descriptor.
+
 2003-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/minmax.cc: Move min and max functions from here to
 	liboctave/dMatrix.cc and liboctave/CMatrix.cc.
 
 2003-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/rand.cc: Rewrite to use new octave_rand functions.
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -61,35 +61,41 @@ c_file_ptr_buf::overflow (int_type c)
   if (f)
     return (c != EOF) ? fputc (c, f) : flush ();
   else
     return EOF;
 #endif
 }
 
 c_file_ptr_buf::int_type
-c_file_ptr_buf::underflow (void)
+c_file_ptr_buf::underflow_common (bool bump)
 {
   if (f)
-    return fgetc (f);
+    {
+      int_type c = fgetc (f);
+
+      if (! bump
+#if defined (CXX_ISO_COMPLIANT_LIBRARY)
+	  && c != traits_type::eof ())
+#else
+	  && c != EOF)
+#endif
+	ungetc (c, f);
+
+      return c;
+    }
   else
 #if defined (CXX_ISO_COMPLIANT_LIBRARY)
     return traits_type::eof ();
 #else
     return EOF;
 #endif
 }
 
 c_file_ptr_buf::int_type
-c_file_ptr_buf::uflow (void)
-{
-  return underflow ();
-}
-
-c_file_ptr_buf::int_type
 c_file_ptr_buf::pbackfail (int_type c)
 {
 #if defined (CXX_ISO_COMPLIANT_LIBRARY)
   return (c != traits_type::eof () && f) ? ungetc (c, f) : 
     traits_type::not_eof (c);
 #else
   return (c != EOF && f) ? ungetc (c, f) : EOF;
 #endif
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -23,75 +23,44 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_c_file_ptr_stream_h)
 #define octave_c_file_ptr_stream_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
-#include <fstream>
 #include <cstdio>
 
-// The c_file_ptr_buf requires a std::filebuf that accepts an open
-// file descriptor. This feature, while not part of the ISO C++
-// standard, is supported by a variety of C++ compiler runtimes,
-// albeit in slightly different ways.
-//
-// The C++ runtime libraries shipped with GCC versions < 3.0, Sun Pro,
-// Sun Workshop/Forte 5/6, Compaq C++ all support a non-standard filebuf
-// constructor that takes an open file descriptor. The almost ISO compliant
-// GNU C++ runtime shipped with GCC 3.0.x supports a different non-standard
-// filebuf constructor that takes a FILE* instead; starting from GCC 3.1,
-// the GNU C++ runtime removes all non-standard std::filebuf constructors
-// and provides an extension template class __gnu_cxx::stdio_filebuf
-// that supports the the 3.0.x behavior.
-
-#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1) && ! (defined (__APPLE__) && defined (__MACH__))
-# include <ext/stdio_filebuf.h>
-# define OCTAVE_STD_FILEBUF __gnu_cxx::stdio_filebuf<char>
-#else
-# define OCTAVE_STD_FILEBUF std::filebuf
-#endif
-
 class
-c_file_ptr_buf : public OCTAVE_STD_FILEBUF
+c_file_ptr_buf : public std::streambuf
 {
 public:
 
 #if !defined (CXX_ISO_COMPLIANT_LIBRARY)
   typedef int int_type;
 #else
-  typedef std::filebuf::int_type int_type;
+  typedef std::streambuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
   FILE* stdiofile (void) const { return f; }
 
   c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = fclose)
-    : 
-#if defined __GNUC__ && __GNUC__ >= 3
-    OCTAVE_STD_FILEBUF (f_arg, std::ios::in | std::ios::out),
-#elif defined __INTEL_COMPILER
-    OCTAVE_STD_FILEBUF (f_arg),
-#else
-    OCTAVE_STD_FILEBUF (f_arg ? fileno (f_arg) : -1),
-#endif
-    f (f_arg), cf (cf_arg),
-    fd (f_arg ? fileno (f_arg) : -1)
+    : std::streambuf (), f (f_arg), cf (cf_arg)
     { }
 
   ~c_file_ptr_buf (void);
 
   int_type overflow (int_type);
 
-  int_type underflow (void);
+  int_type underflow (void) { return underflow_common (false); }
 
-  int_type uflow (void);
+  int_type uflow (void) { return underflow_common (true); }
 
   int_type pbackfail (int_type);
 
   std::streamsize xsputn (const char*, std::streamsize);
 
   std::streamsize xsgetn (char *, std::streamsize);
 
   std::streampos seekoff (std::streamoff, std::ios::seekdir,
@@ -101,33 +70,31 @@ public:
 			  std::ios::openmode = std::ios::in | std::ios::out);
 
   int sync (void);
 
   int flush (void);
 
   int close (void);
 
-  int file_number () const { return fd; }
+  int file_number () const { return f ? fileno (f) : -1; }
 
   static int fclose (FILE *f) { return ::fclose (f); }
 
 protected:
 
   FILE *f;
 
   close_fcn cf;
 
 private:
 
-  int fd;
+  int_type underflow_common (bool);
 };
 
-#undef OCTAVE_STD_FILEBUF
-
 class
 i_c_file_ptr_stream : public std::istream
 {
 public:
 
   i_c_file_ptr_stream (FILE* f,
 		       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
     : std::istream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
