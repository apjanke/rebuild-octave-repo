# HG changeset patch
# User jwe
# Date 949547131 0
#      Thu Feb 03 03:05:31 2000 +0000
# Node ID 41daa489833a1bde52579c9d12408dd0d1857169
# Parent  4833e231e05b2b9aec064cd9422782a5681f8c61
[project @ 2000-02-03 03:05:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,32 @@
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* TEMPLATE-INST/SLStack-sym.cc: Delete meaningless `extern
+	template' declarations.
+	* TEMPLATE-INST/Array-tc.cc: Ditto.
+
+	* TEMPLATE-INST/Map-fnc.cc: Don't try to instantiate goodCHptr or
+	CHptr_to_index here.
+	* TEMPLATE-INST/Map-tc.cc: Likewise.
+
+	* load-save.cc (read_binary_file_header): Declare magic_len `const'.
+
+	* token.h (token::token (const token&), token::operator=):
+	Delete unnecessary definitions.
+
+	* oct-stream.cc (octave_stream::mode_as_string): Use
+	std::ios::binary, not std::ios::bin.
+	* load-save.cc (Fsave, Fload, save_user_variables): Likewise.
+
 	* DLD-FUNCTIONS/qz.cc (Fqz): Use Array<int> class instead of
 	trying to create automatic int array with variable size.
 
 	* variables.cc (F__dump_symbol_info__): Fix continuation char.
+	* mappers.cc (Ftoupper): Likewise.
 	* DLD-FUNCTIONS/besselj.cc (Fairy, Fbesselj): Likewise.
 	* DLD-FUNCTIONS/chol.cc (Fchol): Likewise.
 	* DLD-FUNCTIONS/det.cc (Fdet): Likewise.
 	* DLD-FUNCTIONS/eig.cc (Feig): Likewise.
 	* DLD-FUNCTIONS/gammainc.cc (gammainc): Likewise.
 	* DLD-FUNCTIONS/givens.cc (givens): Likewise.
 	* DLD-FUNCTIONS/hess.cc (hess): Likewise.
 	* DLD-FUNCTIONS/inv.cc (inv): Likewise.
@@ -18,19 +36,22 @@ 2000-02-02  John W. Eaton  <jwe@bevo.che
 	* DLD-FUNCTIONS/schur.cc (schur): Likewise.
 	* DLD-FUNCTIONS/balance.cc (balance): Likewise.
 	* DLD-FUNCTIONS/svd.cc (svd): Likewise.
 	* DLD-FUNCTIONS/syl.cc (syl): Likewise.
 	* DLD-FUNCTIONS/expm.cc (Fexpm): Likewise.
 
 	* token.h (token::token_type, token::end_tok_type,
 	token::plot_tok_type): Delete extraneous comma from enum decls.
+	* load-save.cc (load_save_format): Likewise.
 
 	* pt-idx.cc (tree_index_expression::tree_index_expression):
 	Delete default arg values.
+	* oct-fstrm.cc (octave_fstream::octave_fstream): Likewise.
+	* oct-stream.cc (octave_stream::octave_stream): Likewise.
 
 	* siglist.h, siglist.c: New files.
 	* Makefile.in: Add them to the appropriate lists.
 	* siglist.c (sys_siglist): Move definition here from sighandlers.cc.
 	* siglist.h (sys_siglist): Move declaration here from sighandlers.h.
 
 	* ov.h, ov-bool.h, ov-bool-mat.h (bool_matrix_value):
 	Delete unnecessary arg.
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -32,28 +32,16 @@ Software Foundation, 59 Temple Place - S
 #include "Array2.h"
 #include "Array2.cc"
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "ov.h"
 
-extern template class Array<int>;
-extern template class Array2<int>;
-extern template class DiagArray2<int>;
-
-extern template class Array<double>;
-extern template class Array2<double>;
-extern template class DiagArray2<double>;
-
-extern template class Array<Complex>;
-extern template class Array2<Complex>;
-extern template class DiagArray2<Complex>;
-
 template class Array<octave_value>;
 template class Array2<octave_value>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Map-fnc.cc b/src/TEMPLATE-INST/Map-fnc.cc
--- a/src/TEMPLATE-INST/Map-fnc.cc
+++ b/src/TEMPLATE-INST/Map-fnc.cc
@@ -34,16 +34,13 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "fn-cache.h"
 
 template class Map<file_name_cache_elt>;
 template class CHNode<file_name_cache_elt>;
 template class CHMap<file_name_cache_elt>;
 
-template static int goodCHptr (CHNode<file_name_cache_elt> *t);
-template static unsigned int CHptr_to_index (CHNode<file_name_cache_elt> *t);
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/Map-tc.cc b/src/TEMPLATE-INST/Map-tc.cc
--- a/src/TEMPLATE-INST/Map-tc.cc
+++ b/src/TEMPLATE-INST/Map-tc.cc
@@ -30,16 +30,13 @@ Software Foundation, 59 Temple Place - S
 #include "Map.cc"
 
 #include "ov.h"
 
 template class Map<octave_value>;
 template class CHNode<octave_value>;
 template class CHMap<octave_value>;
 
-template static int goodCHptr (CHNode<octave_value> *t);
-template static unsigned int CHptr_to_index (CHNode<octave_value> *t);
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/TEMPLATE-INST/SLStack-sym.cc b/src/TEMPLATE-INST/SLStack-sym.cc
--- a/src/TEMPLATE-INST/SLStack-sym.cc
+++ b/src/TEMPLATE-INST/SLStack-sym.cc
@@ -32,23 +32,16 @@ Software Foundation, 59 Temple Place - S
 #include "Stack.h"
 #include "Stack.cc"
 
 #include "SLStack.h"
 #include "SLStack.cc"
 
 #include "symtab.h"
 
-extern template class SLNode<unsigned>;
-extern template class SLList<unsigned>;
-
-extern template class Stack<unsigned>;
-
-extern template class SLStack<unsigned>;
-
 template class SLNode<symbol_record::symbol_def *>;
 template class SLList<symbol_record::symbol_def *>;
 
 template class Stack<symbol_record::symbol_def *>;
 
 template class SLStack<symbol_record::symbol_def *>;
 
 /*
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -75,17 +75,17 @@ static int Vsave_precision;
 #endif
 
 enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_ASCII,
     LS_MAT_BINARY,
-    LS_UNKNOWN,
+    LS_UNKNOWN
   };
 
 // Return TRUE if S is a valid identifier.
 
 static bool
 valid_identifier (const char *s)
 {
   if (! s || ! (isalnum (*s) || *s == '_'))
@@ -983,17 +983,17 @@ get_mat_data_input_line (std::istream& i
   while (! (have_data || is.eof ()));
 
   return retval;
 }
 
 static void
 get_lines_and_columns (std::istream& is, const std::string& filename, int& nr, int& nc)
 {
-  streampos pos = is.tellg ();
+  std::streampos pos = is.tellg ();
 
   int file_line_number = 0;
 
   nr = 0;
   nc = 0;
 
   while (is && ! error_state)
     {
@@ -1459,18 +1459,18 @@ matches_patterns (const string_vector& p
   return false;
 }
 
 static int
 read_binary_file_header (std::istream& is, bool& swap,
 			 oct_mach_info::float_format& flt_fmt,
 			 bool quiet = false)
 {
-  int magic_len = 10;
-  char magic [magic_len+1];
+  const int magic_len = 10;
+  char magic[magic_len+1];
   is.read (magic, magic_len);
   magic[magic_len] = '\0';
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
     swap = oct_mach_info::words_big_endian ();
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
     swap = ! oct_mach_info::words_big_endian ();
   else
     {
@@ -1822,17 +1822,17 @@ Force Octave to assume the file is in @s
 	format = get_file_format (fname, orig_fname);
 
       if (format != LS_UNKNOWN)
 	{
 	  i++;
 
 	  unsigned mode = std::ios::in;
 	  if (format == LS_BINARY || format == LS_MAT_BINARY)
-	    mode |= std::ios::bin;
+	    mode |= std::ios::binary;
 
 	  std::ifstream file (fname.c_str (), mode);
 
 	  if (file)
 	    {
 	      if (format == LS_BINARY)
 		{
 		  if (read_binary_file_header (file, swap, flt_fmt) < 0)
@@ -2536,17 +2536,17 @@ save_user_variables (void)
       const char *fname = "octave-core";
 
       message (0, "attempting to save variables to `%s'...", fname);
 
       load_save_format format = get_default_save_format ();
 
       unsigned mode = std::ios::out|std::ios::trunc;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
-	mode |= std::ios::bin;
+	mode |= std::ios::binary;
 
       std::ofstream file (fname, mode);
 
       if (file)
 	{
 	  save_vars (string_vector (), 0, 0, file, false, format, false, true);
 	  message (0, "save to `%s' complete", fname);
 	}
@@ -2703,17 +2703,17 @@ the file @file{data} in Octave's binary 
   else
     {
       std::string fname = file_ops::tilde_expand (argv[i]);
 
       i++;
 
       unsigned mode = std::ios::out;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
-	mode |= std::ios::bin;
+	mode |= std::ios::binary;
 
       mode |= append ? std::ios::ate : std::ios::trunc;
 
       std::ofstream file (fname.c_str (), mode);
 
       if (file)
 	{
 	  bool write_header_info
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -592,17 +592,17 @@ tolower (\"MiXeD cAsE 123\")\n\
     "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} toupper (@var{s})\n\
 Return a copy of the string @var{s}, with each  lower-case character\n\
 replaced by the corresponding upper-case one; nonalphabetic characters\n\
 are left unchanged.  For example,\n\
 \n\
 @example\n\
 @group\n\
-toupper (\"MiXeD cAsE 123\")
+toupper (\"MiXeD cAsE 123\")\n\
      @result{} \"MIXED CASE 123\"\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFALIAS (gammaln, lgamma);
 
   DEFALIAS (isfinite, finite);
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -32,20 +32,19 @@ Software Foundation, 59 Temple Place - S
 
 octave_stream
 octave_fstream::create (const std::string& nm_arg, std::ios::openmode md,
 			oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_fstream (nm_arg, md, flt_fmt));
 }
 
-octave_fstream::octave_fstream
-  (const std::string& nm_arg,
-   std::ios::openmode md = std::ios::in|std::ios::out,
-   oct_mach_info::float_format flt_fmt)
+octave_fstream::octave_fstream (const std::string& nm_arg,
+				std::ios::openmode md,
+				oct_mach_info::float_format flt_fmt)
   : octave_base_stream (md, flt_fmt), nm (nm_arg)
 {
   // Override default protection of 0664 so that umask will appear to
   // do the right thing.
 
   fs.open (nm.c_str (), md, 0666);
 
   if (! fs)
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2389,17 +2389,17 @@ void
 octave_base_stream::invalid_operation (const char *op, const char *rw)
 {
   std::string msg = op;
   msg.append (": stream not open for ");
   msg.append (rw);
   error (msg);
 }
 
-octave_stream::octave_stream (octave_base_stream *bs = 0)
+octave_stream::octave_stream (octave_base_stream *bs)
   : rep (bs)
 {
   if (rep)
     rep->count = 1;
 }
 
 octave_stream::~octave_stream (void)
 {
@@ -2784,38 +2784,38 @@ octave_stream::mode_as_string (int mode)
     case std::ios::in | std::ios::out | std::ios::trunc:
       retval = "w+";
       break;
 
     case std::ios::in | std::ios::out | std::ios::app:
       retval = "a+";
       break;
 
-    case std::ios::in | std::ios::bin:
+    case std::ios::in | std::ios::binary:
       retval = "rb";
       break;
 
-    case std::ios::out | std::ios::bin:
-    case std::ios::out | std::ios::trunc | std::ios::bin:
+    case std::ios::out | std::ios::binary:
+    case std::ios::out | std::ios::trunc | std::ios::binary:
       retval = "wb";
       break;
 
-    case std::ios::out | std::ios::app | std::ios::bin:
+    case std::ios::out | std::ios::app | std::ios::binary:
       retval = "ab";
       break;
 
-    case std::ios::in | std::ios::out | std::ios::bin:
+    case std::ios::in | std::ios::out | std::ios::binary:
       retval = "r+b";
       break;
 
-    case std::ios::in | std::ios::out | std::ios::trunc | std::ios::bin:
+    case std::ios::in | std::ios::out | std::ios::trunc | std::ios::binary:
       retval = "w+b";
       break;
 
-    case std::ios::in | std::ios::out | std::ios::app | std::ios::bin:
+    case std::ios::in | std::ios::out | std::ios::app | std::ios::binary:
       retval = "a+b";
       break;
 
     default:
       break;
     }
 
   return retval;
diff --git a/src/token.cc b/src/token.cc
--- a/src/token.cc
+++ b/src/token.cc
@@ -126,24 +126,13 @@ token::sym_rec (void)
 }
 
 std::string
 token::text_rep (void)
 {
   return orig_text;
 }
 
-token::token (const token& /* tok */)
-{
-  panic_impossible ();
-}
-
-token&
-token::operator = (const token& /* tok */)
-{
-  panic_impossible ();
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -62,17 +62,18 @@ public:
     {
       replot = 1,
       two_dee = 2,
       three_dee = 3
     };
 
   token (int l = -1, int c = -1);
   token (const std::string& s, int l = -1, int c = -1);
-  token (double d, const std::string& s = std::string (), int l = -1, int c = -1);
+  token (double d, const std::string& s = std::string (),
+	 int l = -1, int c = -1);
   token (end_tok_type t, int l = -1, int c = -1);
   token (plot_tok_type t, int l = -1, int c = -1);
   token (symbol_record *s, int l = -1, int c = -1);
 
   ~token (void);
 
   int line (void) { return line_num; }
   int column (void) { return column_num; }
@@ -81,17 +82,21 @@ public:
   double number (void);
   end_tok_type ettype (void);
   plot_tok_type pttype (void);
   symbol_record *sym_rec (void);
 
   std::string text_rep (void);
 
 private:
+
+  // No copying!
+
   token (const token& tok);
+
   token& operator = (const token& tok);
 
   int line_num;
   int column_num;
   token_type type_tag;
   union
     {
       std::string *str;
