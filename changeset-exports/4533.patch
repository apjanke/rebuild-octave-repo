# HG changeset patch
# User jwe
# Date 1065752146 0
#      Fri Oct 10 02:15:46 2003 +0000
# Node ID ed2990fab58f193ba057395ef4d251a8718fad44
# Parent  01ee68d180694245a3df0c7babe810a1cbff99f6
[project @ 2003-10-10 02:13:33 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1945,17 +1945,17 @@ Array<T>::index (Array<idx_vector>& ra_i
 
 		  int numelem_elt = get_scalar_idx (elt_idx, this_dims);
 
 		  if (numelem_result > length () || numelem_result < 0 
 		      || numelem_elt > length () || numelem_elt < 0)
 		    (*current_liboctave_error_handler)
 		      ("attempt to grow array along ambiguous dimension");
 		  else
-		    retval.Array<T>::checkelem (numelem_result) = Array<T>::checkelem (numelem_elt);
+		    retval.checkelem (numelem_result) = checkelem (numelem_elt);
 		
 		  increment_index (result_idx, frozen_lengths);
 	
 		}
 	    }
 	}
     }
   else
@@ -2455,17 +2455,24 @@ assignN (Array<LT>& lhs, const Array<RT>
     {
       lhs.maybe_delete_elements (idx, rfv);
     }
   else if (rhs_is_scalar)
     {
       if (n_idx == 0)
 	(*current_liboctave_error_handler)
 	  ("number of indices is zero");
-
+      else if (n_idx == 1)
+	{
+	  Array<int> one_arg_temp (1, 0);
+
+	  RT scalar = rhs.elem (one_arg_temp);
+
+	  lhs.fill (scalar);
+	}
       else if (n_idx < lhs_dims.length ())
 	{
 	  // Number of indices is less than dimensions.
 
 	  if (any_ones (idx_is_colon)|| any_ones (idx_is_colon_equiv))
 	    {
 	      (*current_liboctave_error_handler)
 		("number of indices is less than number of dimensions, one or more indices are colons");
@@ -2514,17 +2521,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 	      Array<int> int_arr = conv_to_int_array (idx);
 
 	      int numelem = get_scalar_idx (int_arr, lhs_dims);
 
 	      if (numelem > lhs.length () || numelem < 0)
 		(*current_liboctave_error_handler)
 		  ("attempt to grow array along ambiguous dimension");
 	      else
-		lhs.Array<LT>::checkelem (numelem) = scalar;
+		lhs.checkelem (numelem) = scalar;
 	    }
 	}
       else
 	{
 	  // Scalar to matrix assignment with as many indices as lhs
 	  // dimensions.
 
 	  int n = Array<LT>::get_size (frozen_len);
@@ -2549,17 +2556,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 		lhs.checkelem (elt_idx) = scalar;
 	      else
 		lhs.checkelem (elt_idx) = rfv;
 
 	      increment_index (result_idx, frozen_len);
 	    }
 	}
     }
-  else if (rhs_dims.length () >= 2)
+  else if (rhs_dims.length () > 1)
     {
       // RHS is matrix or higher dimension.
 
       // Subtracting number of dimensions of length 1 will catch
       // cases where: A(2,1,2)=3  A(:,1,:)=[2,3;4,5]
 
       if (rhs_dims.length ()
 	  != num_ones (idx_is_colon_equiv) - num_ones (lhs_dims))
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2003-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array.cc (assignN): Allow lhs(:) = scalar.
+
 	* CNDArray.cc (ComplexNDArray::increment_index): New function.
 	* dNDArray.cc (NDArray::increment_index): Likewise.
 	* boolNDArray.cc (boolNDArray::increment_index): Likewise.
 	* chNDArray.cc (charNDArray::increment_index): Likewise.
 
 	* dim-vector.h (rows, cols): Delete unused data members.
 
 	* Array.cc (Array<T>::get_size): Fix thinko.
