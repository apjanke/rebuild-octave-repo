# HG changeset patch
# User dbateman
# Date 1191964977 0
#      Tue Oct 09 21:22:57 2007 +0000
# Node ID f20010b5dcf0dbc90008381e5e6f546dae157679
# Parent  9dc99ab00c86097e8f844bd83ebbbe2cbc3d5029
[project @ 2007-10-09 21:22:57 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-10-09  David Bateman  <dbateman@free.fr>
+
+	* input.cc (accept_line): Drop this function and remove automatic
+	insertion of closing quotes as the transpose operator confuses it.
+	(initialize_command_input): Remove accept_line from here as well.
+
+	
 2007-10-09  John W. Eaton  <jwe@octave.org>
 
 	* ov-mapper.cc (octave_mapper::apply): If possible, use
 	d_d_map_fcn to handle complex values which have imag(z) == 0.
 
 	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite, Furlread) [! HAVE_CURL]:
 	Throw error instead of returning empty string hiding error message
 	in third return value.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -530,41 +530,16 @@ static std::string
 quoting_filename (const std::string &text, int, char quote)
 {
   if (quote)
     return text;
   else
     return (std::string ("'") + text);
 }
 
-static void
-accept_line (const std::string &text)
-{
-  // Close open strings if needed
-  bool sq = false;
-  bool dq = false;
-  bool pass_next = false;
-
-  for (std::string::const_iterator it = text.begin(); it < text.end(); it++)
-    {
-      if (pass_next)
-	pass_next = false;
-      else if (*it == '\\')
-	pass_next = true;
-      else if (*it == '\'' && ! dq)
-	sq = !sq;
-      else if (*it == '"' && ! sq)
-	dq = !dq;
-    }
-  if (sq)
-    command_editor::insert_text("'");
-  if (dq)
-    command_editor::insert_text("\"");
-}
-
 void
 initialize_command_input (void)
 {
   // If we are using readline, this allows conditional parsing of the
   // .inputrc file.
 
   command_editor::set_name ("Octave");
 
@@ -580,18 +555,16 @@ initialize_command_input (void)
   command_editor::set_basic_quote_characters ("\"");
 
   command_editor::set_filename_quote_characters (" \t\n\\\"'@<>=;|&()#$`?*[!:{");
   command_editor::set_completer_quote_characters ("'\"");
 
   command_editor::set_completion_function (generate_completion);
 
   command_editor::set_quoting_function (quoting_filename);
-
-  command_editor::set_user_accept_line_function (accept_line);
 }
 
 static bool
 match_sans_spaces_semi (const std::string& standard, const std::string& test)
 {
   size_t beg = test.find_first_not_of (" \t");
 
   if (beg != NPOS)
