# HG changeset patch
# User jwe
# Date 1155936424 0
#      Fri Aug 18 21:27:04 2006 +0000
# Node ID c038c2947ee112038bc71ee3846a64bd9412bbb0
# Parent  a02a305e06ee8f5a308bdb9bb72700f934b3fafe
[project @ 2006-08-18 21:27:03 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
+	* dMatrix.cc (Matrix::any_element_not_one_or_zero): New function.
+	* dMatrix.h: Provide decl.
+	* dNDArray.cc (NDArray::any_element_not_one_or_zero): New function.
+	* dNDArray.h: Provide decl.
+	* intNDArray.cc (intNDArray<T>::any_element_not_one_or_zero):
+	New function.
+	* intNDArray.h: Provide decl.
+
 	* Array.cc (Array<T>::permute): Only rearrange values if array is
 	not empty.
 
 2006-07-26  John W. Eaton  <jwe@octave.org>
 
 	* dbleDET.cc (DET::initialize10, DET::value_will_underflow,
 	DET::value_will_overflow): Use xlog2 instead of log2.
 	(DET::initialize2, DET::initialize10): Use xround instead of round.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2427,16 +2427,31 @@ Matrix::any_element_is_inf_or_nan (void)
       if (xisinf (val) || xisnan (val))
 	return true;
     }
 
   return false;
 }
 
 bool
+Matrix::any_element_not_one_or_zero (void) const
+{
+  octave_idx_type nel = nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      double val = elem (i);
+      if (val != 0 && val != 1)
+	return true;
+    }
+
+  return false;
+}
+
+bool
 Matrix::all_elements_are_int_or_inf_or_nan (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
       if (xisnan (val) || D_NINT (val) == val)
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -237,16 +237,17 @@ public:
 
   Matrix map (d_d_Mapper f) const;
   boolMatrix map (b_d_Mapper f) const;
 
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_inf_or_nan (void) const;
+  bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
   Matrix cumprod (int dim = -1) const;
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -526,16 +526,31 @@ NDArray::any_element_is_inf_or_nan (void
       if (xisinf (val) || xisnan (val))
 	return true;
     }
 
   return false;
 }
 
 bool
+NDArray::any_element_not_one_or_zero (void) const
+{
+  octave_idx_type nel = nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      double val = elem (i);
+      if (val != 0 && val != 1)
+	return true;
+    }
+
+  return false;
+}
+
+bool
 NDArray::all_elements_are_int_or_inf_or_nan (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
       if (xisnan (val) || D_NINT (val) == val)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -59,16 +59,17 @@ public:
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_inf_or_nan (void) const;
+  bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -39,16 +39,33 @@ intNDArray<T>::operator ! (void) const
   boolNDArray b (this->dims ());
 
   for (octave_idx_type i = 0; i < this->length (); i++)
     b.elem (i) = ! this->elem (i);
 
   return b;
 }
 
+template <class T>
+bool
+intNDArray<T>::any_element_not_one_or_zero (void) const
+{
+  octave_idx_type nel = this->nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      T val = this->elem (i);
+
+      if (val != 0.0 && val != 1.0)
+	return true;
+    }
+
+  return false;
+}
+
 // FIXME -- this is not quite the right thing.
 
 template <class T>
 boolNDArray
 intNDArray<T>::all (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (this->elem (iter_idx) == T (0)), true);
 }
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -57,16 +57,18 @@ public:
   intNDArray& operator = (const intNDArray<T>& a)
     {
       MArrayN<T>::operator = (a);
       return *this;
     }
 
   boolNDArray operator ! (void) const;
 
+  bool any_element_not_one_or_zero (void) const;
+
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   intNDArray squeeze (void) const
     { return intNDArray<T> (MArrayN<T>::squeeze ()); }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2006-08-18  John W. Eaton  <jwe@octave.org>
+
+	* gripes.cc (gripe_logical_conversion): New function.
+	* gripes.h: Provide decl.
+	* ov.h (octave_value::bool_value, octave_value::bool_matrix_value,
+	octave_value::bool_array_value): New arg, warn.
+	* ov-base.cc, ov-base.h (octave_base_value::bool_value,
+	octave_base_value::bool_matrix_value, 
+	octave_base_value::bool_array_value): Likewise.
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::bool_array_value,
+	OCTAVE_VALUE_INT_SCALAR_T::bool_array_value): Likewise.
+	* ov-range.h (octave_range::bool_array_value): Likewise.
+	* ov-re-mat.cc, ov-re-mat.h (octave_matrix::bool_array_value):
+	Likewise.
+	* ov-re-sparse.cc, ov-re-sparse.h
+	(octave_sparse_matrix::bool_array_value): Likewise.
+	* ov-scalar.h (octave_scalar::bool_value,
+	octave_scalar::bool_array_value): Likewise.
+	* OPERATORS/op-bm-b.cc (oct_assignop_conv_and_assign):
+	Ask for warning from bool_array_value.
+	* OPERATORS/op-bm-bm.cc (oct_assignop_conv_and_assign): Likewise.
+
 2006-08-18  Benjamin Lindner  <lindnerben@gmx.net>
 
 	* ls-mat5.cc (read_mat5_tag): Declare type as int32_t, not int.
 	(read_mat5_binary_element): Likewise, for len and element_length.
 
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
 	* load-save.h (enum load_save_format): New element, LS_MAT_ASCII_LONG.
diff --git a/src/OPERATORS/op-bm-b.cc b/src/OPERATORS/op-bm-b.cc
--- a/src/OPERATORS/op-bm-b.cc
+++ b/src/OPERATORS/op-bm-b.cc
@@ -62,17 +62,17 @@ oct_assignop_conv_and_assign (octave_bas
 			      const octave_value_list& idx,
 			      const octave_base_value& a2)
 {
   octave_bool_matrix& v1 = dynamic_cast<octave_bool_matrix&> (a1);
 
   // FIXME -- perhaps add a warning for this conversion if the values
   // are not all 0 or 1?
 
-  boolNDArray v2 = a2.bool_array_value ();
+  boolNDArray v2 = a2.bool_array_value (true);
 
   if (! error_state)
     v1.assign (idx, v2);
 
   return octave_value ();
 }
 
 void
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -87,17 +87,17 @@ oct_assignop_conv_and_assign (octave_bas
 			      const octave_value_list& idx,
 			      const octave_base_value& a2)
 {
   octave_bool_matrix& v1 = dynamic_cast<octave_bool_matrix&> (a1);
 
   // FIXME -- perhaps add a warning for this conversion if the values
   // are not all 0 or 1?
 
-  boolNDArray v2 = a2.bool_array_value ();
+  boolNDArray v2 = a2.bool_array_value (true);
 
   if (! error_state)
     v1.assign (idx, v2);
 
   return octave_value ();
 }
 
 void
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -179,13 +179,20 @@ gripe_implicit_conversion (const std::st
 }
 
 void
 gripe_divide_by_zero (void)
 {
   warning_with_id ("Octave:divide-by-zero", "division by zero");
 }
 
+extern void
+gripe_logical_conversion (void)
+{
+  warning_with_id ("Octave:logical-conversion",
+		   "value not equal to 1 or 0 converted to logical 1");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -98,15 +98,18 @@ gripe_implicit_conversion (const char *i
 
 extern void
 gripe_implicit_conversion (const std::string& id, const std::string& from,
 			   const std::string& to);
 
 extern void
 gripe_divide_by_zero (void);
 
+extern void
+gripe_logical_conversion (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -475,34 +475,34 @@ octave_base_value::complex_array_value (
 {
   ComplexNDArray retval;
   gripe_wrong_type_arg ("octave_base_value::complex_array_value()",
 			type_name ());
   return retval;
 }
 
 bool
-octave_base_value::bool_value (void) const
+octave_base_value::bool_value (bool) const
 {
   bool retval = false;
   gripe_wrong_type_arg ("octave_base_value::bool_value()", type_name ());
   return retval;
 }
 
 boolMatrix
-octave_base_value::bool_matrix_value (void) const
+octave_base_value::bool_matrix_value (bool) const
 {
   boolMatrix retval;
   gripe_wrong_type_arg ("octave_base_value::bool_matrix_value()",
 			type_name ());
   return retval;
 }
 
 boolNDArray
-octave_base_value::bool_array_value (void) const
+octave_base_value::bool_array_value (bool) const
 {
   boolNDArray retval;
   gripe_wrong_type_arg ("octave_base_value::bool_array_value()",
 			type_name ());
   return retval;
 }
 
 charMatrix
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -314,21 +314,21 @@ public:
   virtual NDArray array_value (bool = false) const;
 
   virtual Complex complex_value (bool = false) const;
 
   virtual ComplexMatrix complex_matrix_value (bool = false) const;
 
   virtual ComplexNDArray complex_array_value (bool = false) const;
 
-  virtual bool bool_value (void) const;
+  virtual bool bool_value (bool = false) const;
 
-  virtual boolMatrix bool_matrix_value (void) const;
+  virtual boolMatrix bool_matrix_value (bool = false) const;
 
-  virtual boolNDArray bool_array_value (void) const;
+  virtual boolNDArray bool_array_value (bool = false) const;
 
   virtual charMatrix char_matrix_value (bool force = false) const;
 
   virtual charNDArray char_array_value (bool = false) const;
 
   virtual SparseMatrix sparse_matrix_value (bool = false) const;
 
   virtual SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -121,22 +121,25 @@ public:
       ComplexNDArray retval (matrix.dims ()); 
       int nel = matrix.numel ();
       for (int i = 0; i < nel; i++)
         retval(i) = Complex (double (matrix(i)));
       return retval;
     }
 
   boolNDArray
-  bool_array_value (void) const
+  bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dims ());
 
     octave_idx_type nel = numel ();
-  
+
+    if (warn && matrix.any_element_not_one_or_zero ())
+      gripe_logical_conversion ();
+
     for (octave_idx_type i = 0; i < nel; i++)
       retval(i) = static_cast<bool>(matrix(i));
 
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
@@ -326,20 +329,25 @@ public:
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (dim_vector (1, 1));
       retval(0) = Complex (double (scalar));
       return retval;
     }
 
   boolNDArray
-  bool_array_value (void) const
+  bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dim_vector (1, 1));
+
+    if (warn && scalar != 0.0 && scalar != 1.0)
+      gripe_logical_conversion ();
+
     retval(0) = static_cast<bool>(scalar);
+
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char>(scalar);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -155,18 +155,25 @@ public:
   Matrix matrix_value (bool = false) const
     { return range.matrix_value (); }
 
   NDArray array_value (bool = false) const
     { return range.matrix_value (); }
 
   Complex complex_value (bool = false) const;
 
-  boolNDArray bool_array_value (void) const
-    { return boolNDArray (range.matrix_value ()); }
+  boolNDArray bool_array_value (bool warn = false) const
+  {
+    Matrix m = range.matrix_value ();
+
+    if (warn && m.any_element_not_one_or_zero ())
+      gripe_logical_conversion ();
+
+    return boolNDArray (m);
+  }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
   ComplexNDArray complex_array_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
   Range range_value (void) const { return range; }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -141,18 +141,21 @@ octave_matrix::complex_matrix_value (boo
 
 ComplexNDArray
 octave_matrix::complex_array_value (bool) const
 {
   return ComplexNDArray (matrix);
 }
 
 boolNDArray
-octave_matrix::bool_array_value (void) const
+octave_matrix::bool_array_value (bool warn) const
 {
+  if (warn && matrix.any_element_not_one_or_zero ())
+    gripe_logical_conversion ();
+
   return boolNDArray (matrix);
 }
   
 charNDArray
 octave_matrix::char_array_value (bool) const
 {
   charNDArray retval (dims ());
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -130,17 +130,17 @@ public:
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
    
-  boolNDArray bool_array_value (void) const;
+  boolNDArray bool_array_value (bool warn = false) const;
 
   charNDArray char_array_value (bool = false) const;
   
   NDArray array_value (bool = false) const { return matrix; }
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -132,19 +132,24 @@ octave_sparse_matrix::complex_value (boo
 
 Matrix
 octave_sparse_matrix::matrix_value (bool) const
 {
   return matrix.matrix_value ();
 }
 
 boolNDArray
-octave_sparse_matrix::bool_array_value (void) const
+octave_sparse_matrix::bool_array_value (bool warn) const
 {
-  return boolNDArray (matrix.matrix_value ());
+  NDArray m = matrix.matrix_value ();
+
+  if (warn && m.any_element_not_one_or_zero ())
+    gripe_logical_conversion ();
+
+  return boolNDArray (m);
 }
 
 ComplexMatrix
 octave_sparse_matrix::complex_matrix_value (bool) const
 {
   return ComplexMatrix (matrix.matrix_value ());
 }
 
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -96,17 +96,17 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
-  boolNDArray bool_array_value (void) const;
+  boolNDArray bool_array_value (bool warn = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
    
   NDArray array_value (bool = false) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -31,16 +31,17 @@ 02110-1301, USA.
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
+#include "gripes.h"
 #include "ov-base.h"
 #include "ov-re-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
@@ -154,20 +155,31 @@ public:
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char> (scalar);
     return retval;
   }
 
-  bool bool_value (void) const { return scalar; }
+  bool bool_value (bool warn = false) const
+  {
+    if (warn && scalar != 0 && scalar != 1)
+      gripe_logical_conversion ();
+
+    return scalar;
+  }
 
-  boolNDArray bool_array_value (void) const
-    { return boolNDArray (dim_vector (1, 1), scalar); }
+  boolNDArray bool_array_value (bool warn = false) const
+  {
+    if (warn && scalar != 0 && scalar != 1)
+      gripe_logical_conversion ();
+
+    return boolNDArray (dim_vector (1, 1), scalar);
+  }
 
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void increment (void) { ++scalar; }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -586,24 +586,24 @@ public:
     { return rep->complex_value (frc_str_conv); }
 
   ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
   ComplexNDArray complex_array_value (bool frc_str_conv = false) const
     { return rep->complex_array_value (frc_str_conv); }
 
-  bool bool_value (void) const
-    { return rep->bool_value (); }
+  bool bool_value (bool warn = false) const
+    { return rep->bool_value (warn); }
 
-  boolMatrix bool_matrix_value (void) const
-    { return rep->bool_matrix_value (); }
+  boolMatrix bool_matrix_value (bool warn = false) const
+    { return rep->bool_matrix_value (warn); }
 
-  boolNDArray bool_array_value (void) const
-    { return rep->bool_array_value (); }
+  boolNDArray bool_array_value (bool warn = false) const
+    { return rep->bool_array_value (warn); }
 
   charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
   charNDArray char_array_value (bool frc_str_conv = false) const
     { return rep->char_array_value (frc_str_conv); }
 
   SparseMatrix sparse_matrix_value (bool frc_str_conv = false) const
