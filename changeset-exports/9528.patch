# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250403924 -7200
#      Sun Aug 16 08:25:24 2009 +0200
# Node ID ec066ba012c845b0a0ea6ca021ab14078618df83
# Parent  6a9fd5f653c99864b5931e5d447672b9a991a0d2
more fixes & tests for matrix multiply

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3750,17 +3750,21 @@ operator * (const Matrix& m, const Compl
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
 %! M = randn(10,10)+i*rand(10,10);
 %! cv = randn(10,1)+i*rand(10,1);
 %! rv = randn(1,10)+i*rand(1,10);
 %!assert([M*cv,M*cv],M*[cv,cv],1e-14)
+%!assert([M.'*cv,M.'*cv],M.'*[cv,cv],1e-14)
+%!assert([M'*cv,M'*cv],M'*[cv,cv],1e-14)
 %!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
+%!assert([rv*M.';rv*M.'],[rv;rv]*M.',1e-14)
+%!assert([rv*M';rv*M'],[rv;rv]*M',1e-14)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
 */
 
 static const char *
 get_blas_trans_arg (bool trans, bool conj)
 {
   static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
   return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
@@ -3848,17 +3852,17 @@ xgemm (bool transa, bool conja, const Co
           else if (b_nc == 1 && ! conjb)
             {
               const char *ctransa = get_blas_trans_arg (transa, conja);
               F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
-          else if (a_nr == 1 && ! conja)
+          else if (a_nr == 1 && ! conja && ! conjb)
             {
               const char *crevtransb = get_blas_trans_arg (! transb, conjb);
               F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-08-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc, fMatrix.cc, CMatrix.cc, fCMatrix.cc: Add more tests.
+	* CMatrix.cc (xgemm): Fix vector * matrix case.
+	* fCMatrix.cc (xgemm): Ditto.
+
 2009-08-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* fMatrix.cc, fCMatrix.cc: Make tests use single precision.
 
 2009-08-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* CMatrix.cc (xgemm): Fix typo. Add test.
 	* fCMatrix.cc (xgemm): Ditto.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3154,17 +3154,19 @@ Sylvester (const Matrix& a, const Matrix
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
 %! M = randn(10,10);
 %! cv = randn(10,1);
 %! rv = randn(1,10);
 %!assert([M*cv,M*cv],M*[cv,cv],1e-14)
+%!assert([M'*cv,M'*cv],M'*[cv,cv],1e-14)
 %!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
+%!assert([rv*M';rv*M'],[rv;rv]*M',1e-14)
 %!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
 */
 
 static const char *
 get_blas_trans_arg (bool trans)
 {
   static char blas_notrans = 'N', blas_trans = 'T';
   return (trans) ? &blas_trans : &blas_notrans;
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3739,22 +3739,26 @@ operator * (const FloatMatrix& m, const 
 %!assert(single([1+i 2+i 3+i]) * single([ 4+i ; 5+i ; 6+i]), single(29+21i), 5e-7)
 %!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i ; 6+i]), single([15 + 14i ; 37 + 18i]), 5e-7)
 %!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i 6+i ; 7+i 8+i]), single([17 + 15i 20 + 17i; 41 + 19i 48 + 21i]), 5e-7)
 %!assert(single([1 i])*single([i 0])', single(-i));
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
-%! M = randn(10,10)+i*rand(10,10);
-%! cv = randn(10,1)+i*rand(10,1);
-%! rv = randn(1,10)+i*rand(1,10);
-%!assert([M*cv,M*cv],M*[cv,cv],5e-7)
-%!assert([rv*M;rv*M],[rv;rv]*M,5e-7)
-%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-7)
+%! M = single(randn(10,10))+i*single(rand(10,10));
+%! cv = single(randn(10,1))+i*single(rand(10,1));
+%! rv = single(randn(1,10))+i*single(rand(1,10));
+%!assert([M*cv,M*cv],M*[cv,cv],5e-6)
+%!assert([M.'*cv,M.'*cv],M.'*[cv,cv],5e-6)
+%!assert([M'*cv,M'*cv],M'*[cv,cv],5e-6)
+%!assert([rv*M;rv*M],[rv;rv]*M,5e-6)
+%!assert([rv*M.';rv*M.'],[rv;rv]*M.',5e-6)
+%!assert([rv*M';rv*M'],[rv;rv]*M',5e-6)
+%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-6)
 */
 
 static const char *
 get_blas_trans_arg (bool trans, bool conj)
 {
   static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
   return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
 }
@@ -3841,17 +3845,17 @@ xgemm (bool transa, bool conja, const Fl
           else if (b_nc == 1 && ! conjb)
             {
               const char *ctransa = get_blas_trans_arg (transa, conja);
               F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
-          else if (a_nr == 1 && ! conja)
+          else if (a_nr == 1 && ! conja && ! conjb)
             {
               const char *crevtransb = get_blas_trans_arg (! transb, conjb);
               F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3152,19 +3152,21 @@ Sylvester (const FloatMatrix& a, const F
 %!assert(single([1 2 ; 3 4 ]) * single([5 6 ; 7 8]), single([19 22; 43 50]), 5e-7)
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
 %! M = single(randn(10,10));
 %! cv = single(randn(10,1));
 %! rv = single(randn(1,10));
-%!assert([M*cv,M*cv],M*[cv,cv],5e-7)
-%!assert([rv*M;rv*M],[rv;rv]*M,5e-7)
-%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-7)
+%!assert([M*cv,M*cv],M*[cv,cv],5e-6)
+%!assert([M'*cv,M'*cv],M'*[cv,cv],5e-6)
+%!assert([rv*M;rv*M],[rv;rv]*M,5e-6)
+%!assert([rv*M';rv*M'],[rv;rv]*M',5e-6)
+%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-6)
 */
 
 static const char *
 get_blas_trans_arg (bool trans)
 {
   static char blas_notrans = 'N', blas_trans = 'T';
   return (trans) ? &blas_trans : &blas_notrans;
 }
