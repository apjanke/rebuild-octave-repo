# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1525326027 14400
#      Thu May 03 01:40:27 2018 -0400
# Node ID 4d3ce214da32167619be637f238e40a2d91a639c
# Parent  4d7790d9793fca94d05cc67194ba357977c85cb1
use std::function object for load-path add/remove hook functions

* load-path.h, load-path.cc (load_path::add_hook,
load_path::remove_hook): Now std::function objects.
(load_path::load_path): Initialize them with lambda expressions.
(load_path::get_add_hook, load_path::get_remove_hook):
Return std::function objects.
(load_path::set_add_hook, load_path::set_remove_hook):
Accept std::function objects as parameters.
(load_path::hook_fcn_ptr): Delete typedef.

(execute_pkg_add_or_del): Now a load_path member function.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -143,33 +143,16 @@ find_private_file (const std::string& fn
           if (fs.exists () && fs.is_reg ())
             retval = pfname;
         }
     }
 
   return retval;
 }
 
-static void
-execute_pkg_add_or_del (const std::string& dir,
-                        const std::string& script_file)
-{
-  if (! octave_interpreter_ready)
-    return;
-
-  octave::unwind_protect frame;
-
-  std::string file = octave::sys::file_ops::concat (dir, script_file);
-
-  octave::sys::file_stat fs (file);
-
-  if (fs.exists ())
-    octave::source_file (file, "base");
-}
-
 // True if a path is contained in a path list separated by path_sep_char
 
 static bool
 in_path_list (const std::string& path_list, const std::string& path)
 {
   size_t ps = path.size ();
   size_t pls = path_list.size ();
   size_t pos = path_list.find (path);
@@ -200,16 +183,23 @@ rehash_internal (void)
   Vlast_prompt_time.stamp ();
 }
 
 namespace octave
 {
   std::string load_path::sys_path;
   load_path::abs_dir_cache_type load_path::abs_dir_cache;
 
+  load_path::load_path (void)
+    : package_map (), top_level_package (), dir_info_list (), init_dirs (),
+      m_command_line_path (),
+      add_hook ([this] (const std::string& dir) { this->execute_pkg_add (dir); }),
+      remove_hook ([this] (const std::string& dir) { this->execute_pkg_del (dir); })
+  { }
+
   void
   load_path::initialize (bool set_initial_path)
   {
     sys_path = "";
 
     if (set_initial_path)
       {
         maybe_add_path_elts (sys_path, config::local_ver_oct_file_dir ());
@@ -840,16 +830,32 @@ namespace octave
   }
 
   void
   load_path::execute_pkg_del (const std::string& dir)
   {
     execute_pkg_add_or_del (dir, "PKG_DEL");
   }
 
+  void load_path::execute_pkg_add_or_del (const std::string& dir,
+                                          const std::string& script_file)
+  {
+    if (! octave_interpreter_ready)
+      return;
+
+    octave::unwind_protect frame;
+
+    std::string file = octave::sys::file_ops::concat (dir, script_file);
+
+    octave::sys::file_stat fs (file);
+
+    if (fs.exists ())
+      octave::source_file (file, "base");
+  }
+
   // FIXME: maybe we should also maintain a map to speed up this method of access.
 
   load_path::const_dir_info_list_iterator
   load_path::find_dir_info (const std::string& dir_arg) const
   {
     std::string dir = sys::file_ops::tilde_expand (dir_arg);
 
     auto retval = dir_info_list.cbegin ();
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_load_path_h)
 #define octave_load_path_h 1
 
 #include "octave-config.h"
 
+#include <functional>
 #include <iosfwd>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 
 #include "oct-time.h"
 #include "pathsearch.h"
@@ -39,21 +40,17 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   class
   OCTINTERP_API
   load_path
   {
   public:
 
-    load_path (void)
-      : package_map (), top_level_package (), dir_info_list (), init_dirs (),
-        m_command_line_path (), add_hook (load_path::execute_pkg_add),
-        remove_hook (load_path::execute_pkg_del)
-    { }
+    load_path (void);
 
     typedef void (*hook_fcn_ptr) (const std::string& dir);
 
     load_path (const load_path&) = delete;
 
     load_path& operator = (const load_path&) = delete;
 
     ~load_path (void) = default;
@@ -164,24 +161,38 @@ namespace octave
     string_vector files (const std::string& dir, bool omit_exts = false) const;
 
     string_vector fcn_names (void) const;
 
     std::string path (void) const;
 
     void display (std::ostream& os) const;
 
-    hook_fcn_ptr get_add_hook (void) { return add_hook; }
-    hook_fcn_ptr get_remove_hook (void) { return remove_hook; }
+    std::function<void (const std::string&)> get_add_hook (void)
+    {
+      return add_hook;
+    }
+
+    std::function<void (const std::string&)> get_remove_hook (void)
+    {
+      return remove_hook;
+    }
 
-    void set_add_hook (hook_fcn_ptr f) { add_hook = f; }
-    void set_remove_hook (hook_fcn_ptr f) { remove_hook = f; }
+    void set_add_hook (const std::function<void (const std::string&)>& f)
+    {
+      add_hook = f;
+    }
 
-    static void execute_pkg_add (const std::string& dir);
-    static void execute_pkg_del (const std::string& dir);
+    void set_remove_hook (const std::function<void (const std::string&)>& f)
+    {
+      remove_hook = f;
+    }
+
+    void execute_pkg_add (const std::string& dir);
+    void execute_pkg_del (const std::string& dir);
 
     void set_command_line_path (const std::string& p)
     {
       if (m_command_line_path.empty ())
         m_command_line_path = p;
       else
         m_command_line_path += directory_path::path_sep_str () + p;
     }
@@ -505,19 +516,22 @@ namespace octave
     mutable std::set<std::string> init_dirs;
 
     std::string m_command_line_path;
 
     static std::string sys_path;
 
     static abs_dir_cache_type abs_dir_cache;
 
-    hook_fcn_ptr add_hook;
+    std::function<void (const std::string&)> add_hook;
 
-    hook_fcn_ptr remove_hook;
+    std::function<void (const std::string&)> remove_hook;
+
+    void execute_pkg_add_or_del (const std::string& dir,
+                                 const std::string& script_file);
 
     const_dir_info_list_iterator find_dir_info (const std::string& dir) const;
     dir_info_list_iterator find_dir_info (const std::string& dir);
 
     bool contains (const std::string& dir) const;
 
     void move (dir_info_list_iterator i, bool at_end);
 
