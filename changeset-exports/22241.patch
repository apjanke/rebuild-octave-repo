# HG changeset patch
# User Barbara Locsi <locsi.barbara@gmail.com>
# Date 1470505112 -7200
#      Sat Aug 06 19:38:32 2016 +0200
# Node ID 71d86e88589f72e7fc42388e1bc0fe02b13f1661
# Parent  669fc8cf1fdd03df21539050ed9b0523bbfa1e6f
chol2inv: fix support for sparse matrices by fixing MatrixType (bug #36437)

* liboctave/array/MatrixType.cc: a Banded matrix can also be Upper or Lower.
In such case, set type to Lower/Upper and not to Banded.  The check for
Banded matrix does not exist when input is non-sparse, which is why this
only affected sparse matrices.
* libinterp/dldfcn/chol.cc: add tests for sparse matrices.

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -565,16 +565,45 @@ diagonal elements.  @code{chol2inv (@var
           else
             err_wrong_type_arg ("chol2inv", arg);
         }
     }
 
   return retval;
 }
 
+/*
+
+## Test for bug #36437
+%!function sparse_chol2inv (T, tol)
+%!  iT = inv (T);
+%!  ciT = chol2inv (chol (T));
+%!  assert (ciT, iT, tol);
+%!  assert (chol2inv (chol ( full (T))), ciT, tol*2);
+%!endfunction
+
+%!test
+%! A = gallery ("poisson", 3);
+%! sparse_chol2inv (A, eps);
+
+%!test
+%! n = 10;
+%! B = spdiags (ones (n, 1) * [1 2 1], [-1 0 1], n, n);
+%! sparse_chol2inv (B, eps*100);
+
+%!test
+%! C = gallery("tridiag", 5);
+%! sparse_chol2inv (C, eps*10);
+
+%!test
+%! D = gallery("wathen", 1, 1);
+%! sparse_chol2inv (D, eps*10^4);
+
+*/
+
 DEFUN_DLD (cholupdate, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{R1}, @var{info}] =} cholupdate (@var{R}, @var{u}, @var{op})
 Update or downdate a Cholesky@tie{}factorization.
 
 Given an upper triangular matrix @var{R} and a column vector @var{u},
 attempt to determine another upper triangular matrix @var{R1} such that
 
diff --git a/liboctave/array/MatrixType.cc b/liboctave/array/MatrixType.cc
--- a/liboctave/array/MatrixType.cc
+++ b/liboctave/array/MatrixType.cc
@@ -346,17 +346,19 @@ MatrixType::MatrixType (const SparseMatr
                 (upper_band + lower_band + 1) * nrows -
                 (1 + upper_band) * upper_band / 2 -
                 (1 + lower_band) * lower_band / 2;
               if (nnz_in_band == nnz)
                 dense = true;
               else
                 dense = false;
             }
-          else if (upper_band == 0)
+
+          // If a matrix is Banded but also Upper/Lower, set to the latter.
+          if (upper_band == 0)
             typ = MatrixType::Lower;
           else if (lower_band == 0)
             typ = MatrixType::Upper;
 
           if (upper_band == lower_band && nrows == ncols)
             maybe_hermitian = true;
         }
 
@@ -663,17 +665,19 @@ MatrixType::MatrixType (const SparseComp
                 (upper_band + lower_band + 1) * nrows -
                 (1 + upper_band) * upper_band / 2 -
                 (1 + lower_band) * lower_band / 2;
               if (nnz_in_band == nnz)
                 dense = true;
               else
                 dense = false;
             }
-          else if (upper_band == 0)
+
+          // If a matrix is Banded but also Upper/Lower, set to the latter.
+          if (upper_band == 0)
             typ = MatrixType::Lower;
           else if (lower_band == 0)
             typ = MatrixType::Upper;
 
           if (upper_band == lower_band && nrows == ncols)
             maybe_hermitian = true;
         }
 
