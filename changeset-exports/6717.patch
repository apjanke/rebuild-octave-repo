# HG changeset patch
# User jwe
# Date 1181766353 0
#      Wed Jun 13 20:25:53 2007 +0000
# Node ID b319df52ba87295141fe19d5276cd4de7b7a642e
# Parent  3b4a5f838de7888fd09e0e1da18146fd0511ad86
[project @ 2007-06-13 20:25:53 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,29 +1,31 @@
-2007-06-12  David Bateman  <dbateman@free.fr>
-
-	* general/Makefile.in (SOURCES): Include __spline__.m, interp3.m
-	and interpn.m.
-
-2007-06-12  David Bateman  <dbateman@free.fr>
-
-	* pkg/pkg.m (pkg:load_package_dirs): Check for field "loaded" in
-	structure before using it.
+2007-06-13  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/mkoctfile.m: Quote args too.
 
 2007-06-13  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* miscellaneous/mkoctfile.m: Quote script name for call to system.
 
 2007-06-12  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* plot/__pltopt1__.m: Set linestyle to "none" instead of "".
 	Set have_linestyle to true if two character linestyle is found.
 
 2007-06-12  David Bateman  <dbateman@free.fr>
 
+	* general/Makefile.in (SOURCES): Include __spline__.m, interp3.m
+	and interpn.m.
+
+	* pkg/pkg.m (pkg:load_package_dirs): Check for field "loaded" in
+	structure before using it.
+
+2007-06-12  David Bateman  <dbateman@free.fr>
+
 	* general/interp1.m: Change examples to use new graphics interface.
 	* general/__splinen__.m: New support function for N-dimensional
 	spline interpolation.
 	* general/bicubic.m: Allow definition of extrapolation
 	value. Adapt tests to use new graphics interface
 	* general/interp2.m: Call __splinen__ for 2-D spline
 	interpolation. Make the lookup table code only be called for
 	linear and nearest methods.
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -123,17 +123,17 @@
 function mkoctfile (varargin)
 
   bindir = octave_config_info ("bindir");
 
   shell_script = fullfile (bindir, sprintf ("mkoctfile-%s", OCTAVE_VERSION));
 
   cmd = strcat ("\"", shell_script, "\"");
   for i = 1:nargin
-    cmd = strcat (cmd, " ", varargin{i});
+    cmd = strcat (cmd, " \"", varargin{i}, "\"");
   endfor
   
   status = system (cmd);
 
   if (status == 127)
     warning ("unable to find mkoctfile in expected location: `%s'",
 	     shell_script);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-06-13  John W. Eaton  <jwe@octave.org>
+
+	* ov-re-mat.cc (octave_matrix::load_ascii):
+	Do a better job of handling read errors and empty matrices.
+	* ov-cx-mat.cc (octave_complex_matrix::load_ascii): Likewise.
+	* ov-bool-mat.cc (octave_bool_matrix::load_ascii): Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::load_ascii): Likewise.
+
 2007-06-13  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/minmax.cc (MINMAX_BODY): Don't treat as single
 	argument if arg2 is empty and nargin=2.
 
 2007-06-13  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h, graphics.cc: Move class declarations to graphics.h.
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -199,60 +199,78 @@ octave_bool_matrix::load_ascii (std::ist
 	  if (mdims >= 0)
 	    {
 	      dim_vector dv;
 	      dv.resize (mdims);
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
-	      NDArray tmp(dv);
-	      is >> tmp;
+	      if (is)
+		{
+		  boolNDArray btmp (dv);
+
+		  if (btmp.is_empty ())
+		    matrix = btmp;
+		  else
+		    {
+		      NDArray tmp(dv);
+		      is >> tmp;
 
-	      if (!is)
+		      if (is)
+			{
+			  for (octave_idx_type i = 0; i < btmp.nelem (); i++)
+			    btmp.elem (i) = (tmp.elem (i) != 0.);
+
+			  matrix = btmp;
+			}
+		      else
+			{
+			  error ("load: failed to load matrix constant");
+			  success = false;
+			}
+		    }
+		}
+	      else
 		{
-		  error ("load: failed to load matrix constant");
+		  error ("load: failed to extract dimensions");
 		  success = false;
 		}
-
-	      boolNDArray btmp (dv);
-	      for (octave_idx_type i = 0; i < btmp.nelem (); i++)
-		btmp.elem (i) = (tmp.elem (i) != 0.);
-
-	      matrix = btmp;
 	    }
 	  else
 	    {
-	      error ("load: failed to extract number of rows and columns");
+	      error ("load: failed to extract number of dimensions");
 	      success = false;
 	    }
 	}
       else if (kw == "rows")
 	{
 	  octave_idx_type nr = val;
 	  octave_idx_type nc = 0;
 
 	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
 	    {
 	      if (nr > 0 && nc > 0)
 		{
 		  Matrix tmp (nr, nc);
 		  is >> tmp;
-		  if (!is) 
+		  if (is) 
+		    {
+		      boolMatrix btmp (nr, nc);
+		      for (octave_idx_type j = 0; j < nc; j++)
+			for (octave_idx_type i = 0; i < nr; i++)
+			  btmp.elem (i,j) = (tmp.elem (i, j) != 0.);
+
+		      matrix = btmp;
+		    }
+		  else
 		    {
 		      error ("load: failed to load matrix constant");
 		      success = false;
 		    }
-
-		  boolMatrix btmp (nr, nc);
-		  for (octave_idx_type j = 0; j < nc; j++)
-		    for (octave_idx_type i = 0; i < nr; i++)
-		      btmp.elem (i,j) = (tmp.elem (i, j) != 0.);
-
-		  matrix = btmp;
 		}
 	      else if (nr == 0 || nc == 0)
 		matrix = boolMatrix (nr, nc);
 	      else
 		panic_impossible ();
 	    }
 	  else
 	    {
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -256,49 +256,65 @@ octave_complex_matrix::load_ascii (std::
 	  if (mdims >= 0)
 	    {
 	      dim_vector dv;
 	      dv.resize (mdims);
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
-	      ComplexNDArray tmp(dv);
-	      is >> tmp;
+	      if (is)
+		{
+		  ComplexNDArray tmp(dv);
+
+		  if (tmp.is_empty ())
+		    matrix = tmp;
+		  else
+		    {
+		      is >> tmp;
 
-	      if (!is) 
+		      if (is)
+			matrix = tmp;
+		      else
+			{
+			  error ("load: failed to load matrix constant");
+			  success = false;
+			}
+		    }
+		}
+	      else
 		{
-		  error ("load: failed to load matrix constant");
+		  error ("load: failed to read dimensions");
 		  success = false;
 		}
-	      matrix = tmp;
 	    }
 	  else
 	    {
-	      error ("load: failed to extract number of rows and columns");
+	      error ("load: failed to extract number of dimensions");
 	      success = false;
 	    }
 	}
       else if (kw == "rows")
 	{
 	  octave_idx_type nr = val;
 	  octave_idx_type nc = 0;
 
 	  if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
 	    {
 	      if (nr > 0 && nc > 0)
 		{
 		  ComplexMatrix tmp (nr, nc);
 		  is >> tmp;
-		  if (!is)
+		  if (is)
+		    matrix = tmp;
+		  else
 		    {
 		      error ("load: failed to load matrix constant");
 		      success = false;
 		    }
-		  matrix = tmp;
 		}
 	      else if (nr == 0 || nc == 0)
 		matrix = ComplexMatrix (nr, nc);
 	      else
 		panic_impossible ();
 	    }
 	  else
 	    {
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -311,29 +311,44 @@ octave_matrix::load_ascii (std::istream&
 	  if (mdims >= 0)
 	    {
 	      dim_vector dv;
 	      dv.resize (mdims);
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
-	      NDArray tmp(dv);
-	      is >> tmp;
+	      if (is)
+		{
+		  NDArray tmp(dv);
+
+		  if (tmp.is_empty ())
+		    matrix = tmp;
+		  else
+		    {
+		      is >> tmp;
 
-	      if (!is) 
+		      if (is)
+			matrix = tmp;
+		      else
+			{
+			  error ("load: failed to load matrix constant");
+			  success = false;
+			}
+		    }
+		}
+	      else
 		{
-		  error ("load: failed to load matrix constant");
+		  error ("load: failed to read dimensions");
 		  success = false;
 		}
-	      matrix = tmp;
 	    }
 	  else
 	    {
-	      error ("load: failed to extract number of rows and columns");
+	      error ("load: failed to extract number of dimensions");
 	      success = false;
 	    }
 	}
       else if (kw == "rows")
 	{
 	  octave_idx_type nr = val;
 	  octave_idx_type nc = 0;
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -328,30 +328,44 @@ octave_char_matrix_str::load_ascii (std:
 	  if (mdims >= 0)
 	    {
 	      dim_vector dv;
 	      dv.resize (mdims);
 
 	      for (int i = 0; i < mdims; i++)
 		is >> dv(i);
 
-	      charNDArray tmp(dv);
-	      char *ftmp = tmp.fortran_vec ();
+	      if (is)
+		{
+		  charNDArray tmp(dv);
+
+		  if (tmp.is_empty ())
+		    matrix = tmp;
+		  else
+		    {
+		      char *ftmp = tmp.fortran_vec ();
 
-	      // Skip the return line
-	      if (! is.read (ftmp, 1))
-		return false;
+		      // Skip the return line
+		      if (! is.read (ftmp, 1))
+			return false;
 
-	      if (! is.read (ftmp, dv.numel ()) || !is)
+		      if (! is.read (ftmp, dv.numel ()) || !is)
+			{
+			  error ("load: failed to load string constant");
+			  success = false;
+			}
+		      else
+			matrix = tmp;
+		    }
+		}
+	      else
 		{
-		  error ("load: failed to load string constant");
+		  error ("load: failed to read dimensions");
 		  success = false;
 		}
-	      else
-		matrix = tmp;
 	    }
 	  else
 	    {
 	      error ("load: failed to extract matrix size");
 	      success = false;
 	    }
 	}
       else if (kw == "elements")
