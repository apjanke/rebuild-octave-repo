# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552503251 0
#      Wed Mar 13 18:54:11 2019 +0000
# Node ID 236d8f52cbb389267396377079824d0177a311e8
# Parent  d94876e7a0aa3770e1bfd3c691222eab036a3786
identify "x .foo@bar" or "x @foo" as command syntax (bug #55891)

* lex.ll ({FQIDENT}{S}*@{S}*{FQIDENT}): If we are at the beginning of
a statement and there is a space before the first "." or "@"
character, parse as a normal identifier, which will lead to parsing as
a command.  Also set m_beginning_of_statement to false if a superclass
identifier is found.

* debug.cc: Use command syntax for dbstop commands with @ftp/dir and
@audioplayer/set again as it provides a test for this form of command
syntax.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -524,18 +524,18 @@ The @qcode{"warn"} field is set similarl
 /*
 %!test
 %! if (isguirunning ())
 %!   orig_show_dbg = __octave_link_gui_preference__ ("editor/show_dbg_file",
 %!                                                   "0");
 %! endif
 %! unwind_protect
 %!   dbclear all;   # Clear out breakpoints before test
-%!   dbstop ("@ftp/dir");
-%!   dbstop ("@audioplayer/set", "70");
+%!   dbstop @ftp/dir;
+%!   dbstop @audioplayer/set 70;
 %!   dbstop quantile>__quantile__;
 %!   dbstop ls;
 %!   s = dbstatus;
 %!   dbclear all;
 %!   assert (s(1).name, "@audioplayer/set>setproperty");
 %!   assert (s(2).name, "@ftp/dir");
 %!   assert (s(3).name, "ls");
 %!   assert (s(4).name, "quantile>__quantile__");
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1264,21 +1264,40 @@ ANY_INCLUDING_NL (.|{NL})
 
     if (curr_lexer->previous_token_may_be_command ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
+        if (curr_lexer->m_at_beginning_of_statement)
+          {
+            std::string txt = yytext;
+
+            size_t at_or_dot_pos = txt.find_first_of ("@.");
+
+            if (at_or_dot_pos != std::string::npos)
+              {
+                size_t spc_pos = txt.find_first_of (" \t");
+
+                if (spc_pos != std::string::npos && spc_pos < at_or_dot_pos)
+                  {
+                    yyless (spc_pos);
+                    return curr_lexer->handle_identifier ();
+                  }
+              }
+          }
+
         int id_tok = curr_lexer->handle_superclass_identifier ();
 
         if (id_tok >= 0)
           {
             curr_lexer->m_looking_for_object_index = true;
+            curr_lexer->m_at_beginning_of_statement = false;
 
             return curr_lexer->count_token_internal (id_tok);
           }
       }
   }
 
 %{
 // Metaclass query
