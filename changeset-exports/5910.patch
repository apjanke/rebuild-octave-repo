# HG changeset patch
# User jwe
# Date 1154058022 0
#      Fri Jul 28 03:40:22 2006 +0000
# Node ID 101d966c8d6b76e86d589edaae6c2188d37d7f50
# Parent  a6a2423a9c2585e892091bb93917017b79cf0cd2
[project @ 2006-07-28 03:40:22 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-07-27  Jim Peterson  <jpeterson@annapmicro.com>
+
+	* plot/plot3.m: Accept one complex or one real and one complex
+	argument and plot real and imaginary components for y and z.
+
 2006-07-27  John W. Eaton  <jwe@octave.org>
 
 	* testfun/test.m: Call fflush after each block of calls to
 	fprintf, fputs, or fdisp.
 
 2006-07-26  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/mex.m: New function.
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -13,33 +13,51 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} plot (@var{args})
+## @deftypefn {Function File} {} plot3 (@var{args})
 ##
 ## This function produces three-dimensional plots.  Many different
 ## combinations of arguments are possible.  The simplest form is
 ##
 ## @example
 ## plot3 (@var{x}, @var{y}, @var{z})
 ## @end example
 ##
 ## @noindent
 ## where the arguments are taken to be the vertices of the points to be
 ## plotted in three dimensions. If all arguments are vectors of the same
 ## length, then a single continuous line is drawn. If all arguments are
 ## matrices, then each column of the matrices is treated as a seperate
 ## line. No attempt is made to transpose the arguments to make the
 ## number of rows match.
 ##
+## Additionally, only two arguments can be given as
+##
+## @example
+## plot3 (@var{x}, @var{c})
+## @end example
+##
+## where the real and imaginary parts of the second argument are used as
+## the @var{y} and @var{z} coordinates, respectively.
+##
+## If only one argument is given, as
+##
+## @example
+## plot3 (@var{c})
+## @end example
+##
+## the real and imaginary parts of the argument are used as the @var{y}
+## and @var{z} values, and they are plotted versus their index.
+##
 ## To save a plot, in one of several image formats such as PostScript
 ## or PNG, use the @code{print} command.
 ##
 ## An optional format argument can be given as
 ##
 ## @example
 ## plot3 (@var{x}, @var{y}, @var{y}, @var{fmt})
 ## @end example
@@ -113,25 +131,33 @@
 ##
 ## Arguments can also be given in groups of three as
 ##
 ## @example
 ## plot3 (@var{x1}, @var{y1}, @var{y1}, @var{x2}, @var{y2}, @var{y2}, @dots{})
 ## @end example
 ## 
 ## @noindent
-## where each set of three arguments are treated as seperate lines or
-## sets of lines in three dimensions.
+## where each set of three arguments is treated as a seperate line or
+## set of lines in three dimensions.
+##
+## To plot multiple one- or two-argument groups, separate each group with an
+## empty format string, as
+##
+## @example
+## plot3 (@var{x1}, @var{c1}, '', @var{c2}, '', @dots{})
+## @end example
 ##
 ## An example of the use of plot3 is
 ##
 ## @example
 ## @group
 ##    z = [0:0.05:5];
 ##    plot3(cos(2*pi*z), sin(2*pi*z), z, ";helix;");
+##    plot3(z, exp(2i*pi*z), ";complex sinusoid;");
 ## @end group
 ## @end example
 ##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, replot, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
@@ -148,52 +174,85 @@ function plot3 (varargin)
     z_set = 0;
     
     ## Gather arguments, decode format, and plot lines.
     for arg = 1:nargin
       new = varargin{arg};
       
       if (ischar (new))
 	if (! z_set)
-	  error ("plot3: needs x, y, z");
+	  if (! y_set)
+	    if (! x_set)
+	      error ("plot3: needs x, [ y, [ z ] ]");
+	    else
+	      z = imag (x);
+	      y = real (x);
+	      y_set = 1;
+	      z_set = 1;
+	      if (rows(x) > 1)
+	        x = repmat ((1:rows(x))', 1, columns(x));
+	      else
+	        x = 1:columns(x);
+	      endif
+	    endif
+	  else
+	    z = imag (y);
+	    y = real (y);
+	    z_set = 1;
+	  endif
 	endif
 	fmt = __pltopt__ ("plot3", new);
-	__plt3__(x, y, z, fmt);
-	hold on;
+	__plt3__ (x, y, z, fmt);
+	hold ("on");
 	x_set = 0;
 	y_set = 0;
 	z_set = 0;
       elseif (! x_set)
 	x = new;
 	x_set = 1;
       elseif (! y_set)
 	y = new;
 	y_set = 1;
       elseif (! z_set)
 	z = new;
 	z_set = 1;
       else
 	__plt3__ (x, y, z, "");
-	hold on;
+	hold ("on");
 	x = new;
 	y_set = 0;
 	z_set = 0;
       endif
        
     endfor
     
     ## Handle last plot.
     
-    if  (z_set)
+    if (x_set)
+      if (y_set)
+        if (! z_set)
+          z = imag (y);
+          y = real (y);
+          z_set = 1;
+        endif
+      else
+        z = imag (x);
+        y = real (x);
+        y_set = 1;
+        z_set = 1;
+        if (rows (x) > 1)
+          x = repmat ((1:rows (x))', 1, columns(x));
+        else
+          x = 1:columns(x);
+        endif
+      endif
       __plt3__ (x, y, z, "");
-    elseif (x_set)
-      error ("plot3: needs x, y, z");
     endif
     
   unwind_protect_cleanup
     
     if (! hold_state)
-      hold off;
+      hold ("off");
     endif
     
   end_unwind_protect
 
 endfunction
