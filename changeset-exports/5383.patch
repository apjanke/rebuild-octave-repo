# HG changeset patch
# User dbateman
# Date 1118346829 0
#      Thu Jun 09 19:53:49 2005 +0000
# Node ID ffea7e58bc004c64d2e9f146a33fdcb2da340623
# Parent  7012c2492c12737d707425ff8e5c2511574d934b
[project @ 2005-06-09 19:53:31 by dbateman]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -396,17 +396,17 @@ get_file_format (const std::string& fnam
 
   std::ifstream file (fname.c_str ());
   use_zlib = false;
       
   if (file)
     {
       retval = get_file_format (file);
       file.close ();
-#if HAVE_ZLIB
+#ifdef HAVE_ZLIB
       if (retval == LS_UNKNOWN && check_gzip_magic (fname))	
 	{
 	  gzifstream gzfile (fname.c_str ());
 	  use_zlib = true;
 
 	  if (gzfile)
 	    {
 	      retval = get_file_format (gzfile);
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -419,17 +419,17 @@ read_mat5_binary_element (std::istream& 
     flt_fmt = oct_mach_info::flt_fmt_ieee_big_endian;
   else
     flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
 
   // element type and length
   if (read_mat5_tag (is, swap, type, element_length))
     return retval;			// EOF
 
-#if HAVE_ZLIB
+#ifdef HAVE_ZLIB
   if (type == miCOMPRESSED)
     {
       // If C++ allowed us direct access to the file descriptor of an ifstream 
       // in a uniform way, the code below could be vastly simplified, and 
       // additional copies of the data in memory wouldn't be needed!!
 
       OCTAVE_LOCAL_BUFFER (char, inbuf, element_length);
       is.read (inbuf, element_length);
