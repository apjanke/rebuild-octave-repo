# HG changeset patch
# User jwe
# Date 949488996 0
#      Wed Feb 02 10:56:36 2000 +0000
# Node ID c7084a0fbddd6535d0f584f076280957d27b3e7f
# Parent  cc21933776a19b09ae8c47df5de8feaa02bb4895
[project @ 2000-02-02 10:56:36 by jwe]

diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -101,17 +101,17 @@ tree_simple_assignment::rvalue (void)
 	      if (error_state)
 		eval_error ();
 	      else
 		{
 		  ult.assign (etype, rhs_val);
 
 		  if (! error_state)
 		    {
-		      if (etype == octave_value::asn_eq)
+		      if (etype == octave_value::op_asn_eq)
 			retval = rhs_val;
 		      else
 			retval = ult.value ();
 
 		      if (print_result ())
 			{
 			  if (Vprint_rhs_assign_val)
 			    retval.print_with_name (octave_stdout,
@@ -238,17 +238,17 @@ tree_multi_assignment::rvalue (int)
 		      if (error_state)
 			eval_error ();
 		      else if (k < n)
 			{
 			  ult.assign (etype, rhs_val(k));
 
 			  if (! error_state)
 			    {
-			      if (etype == octave_value::asn_eq)
+			      if (etype == octave_value::op_asn_eq)
 				retval(k) = rhs_val(k);
 			      else
 				retval(k) = ult.value ();
 			    }
 			}
 		      else
 			error ("element number %d undefined in return list",
 			       k+1);
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -43,22 +43,22 @@ class octave_lvalue;
 // Simple assignment expressions.
 
 class
 tree_simple_assignment : public tree_expression
 {
 public:
 
   tree_simple_assignment (bool plhs = false, int l = -1, int c = -1,
-			  octave_value::assign_op t = octave_value::asn_eq)
+			  octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype (t) { }
 
   tree_simple_assignment (tree_expression *le, tree_expression *re,
 			  bool plhs = false, int l = -1, int c = -1,
-			  octave_value::assign_op t = octave_value::asn_eq)
+			  octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (le), rhs (re), preserve (plhs),
       etype (t) { }
 
   ~tree_simple_assignment (void);
 
   bool rvalue_ok (void) const
     { return true; }
 
@@ -111,22 +111,22 @@ private:
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
 
   tree_multi_assignment (bool plhs = false, int l = -1, int c = -1,
-			 octave_value::assign_op t = octave_value::asn_eq)
+			 octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype(t) { }
 
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
 			 bool plhs = false, int l = -1, int c = -1,
-			  octave_value::assign_op t = octave_value::asn_eq)
+			  octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs),
       etype (t) { }
 
   ~tree_multi_assignment (void);
 
   bool is_assignment_expression (void) const
     { return true; }
 
