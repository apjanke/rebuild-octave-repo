# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516052296 18000
#      Mon Jan 15 16:38:16 2018 -0500
# Node ID 6b3c78f84d3b30b34db3e464bb8c2db0ee5fceb5
# Parent  845ec6f4fb968dbc9f8aae7547a05bcd64783c06
allow octave_sleep to be interruptible (bug #52876)

* utils.cc (octave_sleep): Break sleep interval up into smaller
segments and check for interrupts between each segment.

diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1342,38 +1342,73 @@ octave_asprintf (const char *fmt, ...)
 
   retval = octave_vasprintf (fmt, args);
 
   va_end (args);
 
   return retval;
 }
 
+// FIXME: sleep is complicated because we want it to be interruptible.
+// With the way this program handles signals, the sleep system call
+// won't respond to SIGINT.  Maybe there is a better way than
+// breaking this up into multiple shorter intervals?
+
 void
 octave_sleep (double seconds)
 {
   if (seconds <= 0)
     return;
 
+  // Split delay into whole seconds and the remainder as a decimal
+  // fraction.
+
   double fraction = std::modf (seconds, &seconds);
-  fraction = std::floor (fraction * 1000000000); // nanoseconds
+
+  // Further split the fractional seconds into whole tenths and the
+  // nearest number of nanoseconds remaining.
+
+  double tenths = 0;
+  fraction = std::modf (fraction * 10, &tenths) / 10;
+  fraction = std::round (fraction * 1000000000);
+
+  // Sleep for the hundredths portion.
+
+  struct timespec hundredths_delay = { 0, static_cast<long> (fraction) };
+
+  nanosleep (&hundredths_delay, nullptr);
+
+  // Sleep for the whole tenths portion, allowing interrupts every
+  // tenth.
+
+  struct timespec one_tenth = { 0, 100000000 };
+
+  for (int i = 0; i < static_cast<int> (tenths); i++)
+    {
+      nanosleep (&one_tenth, nullptr);
+
+      octave_quit ();
+    }
+
+  // Sleep for the whole seconds portion, allowing interrupts every
+  // tenth.
 
   time_t sec = ((seconds > std::numeric_limits<time_t>::max ())
                 ? std::numeric_limits<time_t>::max ()
                 : static_cast<time_t> (seconds));
 
-  struct timespec delay = { sec, static_cast<long> (fraction) };
-  int status;
-
-  do
+  for (time_t s = 0; s < sec; s++)
     {
-      status = octave_nanosleep_wrapper (&delay, &delay);
-      octave_quit ();
+      for (int i = 0; i < 10; i++)
+        {
+          nanosleep (&one_tenth, nullptr);
+
+          octave_quit ();
+        }
     }
-  while (status == -1 && errno == EINTR);
 }
 
 DEFUN (isindex, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} isindex (@var{ind})
 @deftypefnx {} {} isindex (@var{ind}, @var{n})
 Return true if @var{ind} is a valid index.
 
