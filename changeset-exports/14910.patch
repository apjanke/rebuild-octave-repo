# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1337350143 21600
#      Fri May 18 08:09:03 2012 -0600
# Node ID a8f1e08de8fc4e2fb9e7aa5eda8a11be712e5123
# Parent  a1d2f6300391cad45f26115818a3199532c39a70
Simplified llvm::GenericValue creation

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -492,28 +492,28 @@ jit_typeinfo::to_generic (jit_type *type
 
 void
 jit_typeinfo::to_generic (jit_type *type, llvm::GenericValue& gv, octave_value ov)
 {
   if (type == any)
     {
       octave_base_value *obv = ov.internal_rep ();
       obv->grab ();
-      ov_out[ov_idx] = obv;
-      gv.PointerVal = &ov_out[ov_idx++];
+      ov_out.push_back (obv);
+      gv.PointerVal = &ov_out.back ();
     }
   else if (type == scalar)
     {
-      scalar_out[scalar_idx] = ov.double_value ();
-      gv.PointerVal = &scalar_out[scalar_idx++];
+      scalar_out.push_back (ov.double_value ());
+      gv.PointerVal = &scalar_out.back ();
     }
   else if (type == range)
     {
-      range_out[range_idx] = ov.range_value ();
-      gv.PointerVal = &range_out[range_idx++];
+      range_out.push_back (ov.range_value ());
+      gv.PointerVal = &range_out.back ();
     }
   else
     assert (false && "Type not supported yet");
 }
 
 octave_value
 jit_typeinfo::to_octave_value (jit_type *type, llvm::GenericValue& gv)
 {
@@ -533,30 +533,21 @@ jit_typeinfo::to_octave_value (jit_type 
       Range rng = *ptr;
       return octave_value (rng);
     }
   else
     assert (false && "Type not supported yet");
 }
 
 void
-jit_typeinfo::reset_generic (size_t nargs)
+jit_typeinfo::reset_generic (void)
 {
-  scalar_idx = 0;
-  ov_idx = 0;
-  range_idx = 0;
-
-  if (scalar_out.size () < nargs)
-    scalar_out.resize (nargs);
-
-  if (ov_out.size () < nargs)
-    ov_out.resize (nargs);
-
-  if (range_out.size () < nargs)
-    range_out.resize (nargs);
+  scalar_out.clear ();
+  ov_out.clear ();
+  range_out.clear ();
 }
 
 jit_type*
 jit_typeinfo::new_type (const std::string& name, bool force_init,
                         jit_type *parent, llvm::Type *llvm_type)
 {
   jit_type *ret = new jit_type (name, force_init, parent, llvm_type, next_id++);
   id_to_type.push_back (ret);
@@ -1640,18 +1631,16 @@ jit_info::jit_info (tree_jit& tjit, tree
 }
 
 bool
 jit_info::execute (const octave_value& bounds) const
 {
   if (! function)
     return false;
 
-  tinfo->reset_generic (types.size ());
-
   std::vector<llvm::GenericValue> args (types.size ());
   size_t idx;
   type_map::const_iterator iter;
   for (idx = 0, iter = types.begin (); iter != types.end (); ++iter, ++idx)
     {
       if (argin.count (iter->first))
         {
           octave_value ov;
@@ -1669,16 +1658,18 @@ jit_info::execute (const octave_value& b
   engine->runFunction (function, args);
 
   for (idx = 0, iter = types.begin (); iter != types.end (); ++iter, ++idx)
     {
       octave_value result = tinfo->to_octave_value (iter->second, args[idx]);
       symbol_table::varref (iter->first) = result;
     }
 
+  tinfo->reset_generic ();
+
   return true;
 }
 
 bool
 jit_info::match () const
 {
   for (std::set<std::string>::iterator iter = argin.begin ();
        iter != argin.end (); ++iter)
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -288,17 +288,17 @@ public:
   }
 
   // FIXME: generic creation should probably be handled seperatly
   void to_generic (jit_type *type, llvm::GenericValue& gv);
   void to_generic (jit_type *type, llvm::GenericValue& gv, octave_value ov);
 
   octave_value to_octave_value (jit_type *type, llvm::GenericValue& gv);
 
-  void reset_generic (size_t nargs);
+  void reset_generic (void);
 private:
   typedef std::map<std::string, jit_type *> type_map;
 
   jit_type *new_type (const std::string& name, bool force_init,
                       jit_type *parent, llvm::Type *llvm_type);
 
   void add_print (jit_type *ty, void *call);
 
@@ -319,24 +319,19 @@ private:
 
   std::vector<jit_function> binary_ops;
   jit_function assign_fn;
   jit_function print_fn;
   jit_function simple_for_check;
   jit_function simple_for_incr;
   jit_function simple_for_index;
 
-  size_t scalar_idx;
-  std::vector<double> scalar_out;
-
-  size_t ov_idx;
-  std::vector<octave_base_value*> ov_out;
-
-  size_t range_idx;
-  std::vector<jit_range> range_out;
+  std::list<double> scalar_out;
+  std::list<octave_base_value *> ov_out;
+  std::list<jit_range> range_out;
 };
 
 class
 jit_infer : public tree_walker
 {
   typedef std::map<std::string, jit_type *> type_map;
 public:
   jit_infer (jit_typeinfo *ti) : tinfo (ti), is_lvalue (false),
