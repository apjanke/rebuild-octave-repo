# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542398215 18000
#      Fri Nov 16 14:56:55 2018 -0500
# Node ID 0e207a5cc212c5cc86cecddb25ddf7dded3f8970
# Parent  8a15f3bace491ecbfdc7c90caf8d89ea8918ad1d
eliminate useless function

* symtab.h (symbol_table::find_symbol (const std::string&,
symbol_scope&)): Delete.  Fix all uses to call
symbol_scope::find_symbol directly instead.

diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -100,29 +100,24 @@ namespace octave
         error ("can't set scope to global");
 
       m_current_scope = sid;
 
       if (m_current_scope)
         m_current_scope.set_context (context);
     }
 
-    symbol_record find_symbol (const std::string& name, symbol_scope& sid)
-    {
-      return sid ? sid.find_symbol (name) : symbol_record ();
-    }
-
     symbol_record find_symbol (const std::string& name)
     {
-      return find_symbol (name, m_current_scope);
+      return m_current_scope.find_symbol (name);
     }
 
     symbol_record find_global_symbol (const std::string& name)
     {
-      symbol_record sym = find_symbol (name, m_global_scope);
+      symbol_record sym = m_global_scope.find_symbol (name);
 
       sym.mark_global ();
 
       return sym;
     }
 
     void
     inherit (symbol_scope& recipient_scope, const symbol_scope& donor_scope)
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -1142,17 +1142,17 @@ namespace octave
   jit_convert::get_variable (const std::string& vname)
   {
     jit_variable *ret = find_variable (vname);
     if (ret)
       return ret;
 
     symbol_table& symtab = __get_symbol_table__ ("jit_convert::find_variable");
 
-    symbol_record record = symtab.find_symbol (vname, m_scope);
+    symbol_record record = m_scope.find_symbol (vname);
     if (record.is_persistent () || record.is_global ())
       throw jit_fail_exception ("Persistent and global not yet supported");
 
     if (m_converting_function)
       return create_variable (vname, jit_typeinfo::get_any (), false);
     else
       {
         octave_value val = record.varval (m_scope.current_context ());
