# HG changeset patch
# User jwe
# Date 778999439 0
#      Thu Sep 08 04:43:59 1994 +0000
# Node ID 01da6806197be9ff073071a580320ca7b74c413e
# Parent  d31fde825c536708a276892b4f436b2e4464c25a
[project @ 1994-09-08 04:43:13 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1016,16 +1016,125 @@ ComplexMatrix::ifourier (void) const
   for (j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   delete [] wsave;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
 
+ComplexMatrix
+ComplexMatrix::fourier2d (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  int npts, nsamples;
+  if (nr == 1 || nc == 1)
+    {
+      npts = nr > nc ? nr : nc;
+      nsamples = 1;
+    }
+  else
+    {
+      npts = nr;
+      nsamples = nc;
+    }
+
+  int nn = 4*npts+15;
+  Complex *wsave = new Complex [nn];
+  Complex *tmp_data = dup (data (), length ());
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (int j = 0; j < nsamples; j++)
+    F77_FCN (cfftf) (&npts, &tmp_data[npts*j], wsave);
+
+  delete [] wsave;
+
+  npts = nc;
+  nsamples = nr;
+  nn = 4*npts+15;
+  wsave = new Complex [nn];
+  Complex *row = new Complex[npts];
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (j = 0; j < nsamples; j++)
+    {
+      for (int i = 0; i < npts; i++)
+	row[i] = tmp_data[i*nr + j];
+
+      F77_FCN (cfftf) (&npts, row, wsave);
+
+      for (i = 0; i < npts; i++)
+	tmp_data[i*nr + j] = row[i];
+    }
+
+  delete [] wsave;
+  delete [] row;
+
+  return ComplexMatrix (tmp_data, nr, nc);
+}
+
+ComplexMatrix
+ComplexMatrix::ifourier2d (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  int npts, nsamples;
+  if (nr == 1 || nc == 1)
+    {
+      npts = nr > nc ? nr : nc;
+      nsamples = 1;
+    }
+  else
+    {
+      npts = nr;
+      nsamples = nc;
+    }
+
+  int nn = 4*npts+15;
+  Complex *wsave = new Complex [nn];
+  Complex *tmp_data = dup (data (), length ());
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (int j = 0; j < nsamples; j++)
+    F77_FCN (cfftb) (&npts, &tmp_data[npts*j], wsave);
+
+  delete [] wsave;
+
+  for (j = 0; j < npts*nsamples; j++)
+    tmp_data[j] = tmp_data[j] / (double) npts;
+
+  npts = nc;
+  nsamples = nr;
+  nn = 4*npts+15;
+  wsave = new Complex [nn];
+  Complex *row = new Complex[npts];
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (j = 0; j < nsamples; j++)
+    {
+      for (int i = 0; i < npts; i++)
+	row[i] = tmp_data[i*nr + j];
+
+      F77_FCN (cfftb) (&npts, row, wsave);
+
+      for (i = 0; i < npts; i++)
+	tmp_data[i*nr + j] = row[i] / (double) npts;
+    }
+
+  delete [] wsave;
+  delete [] row;
+
+  return ComplexMatrix (tmp_data, nr, nc);
+}
+
 ComplexDET
 ComplexMatrix::determinant (void) const
 {
   int info;
   double rcond;
   return determinant (info, rcond);
 }
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -132,16 +132,19 @@ public:
 
   ComplexMatrix inverse (void) const;
   ComplexMatrix inverse (int& info) const;
   ComplexMatrix inverse (int& info, double& rcond) const;
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
+  ComplexMatrix fourier2d (void) const;
+  ComplexMatrix ifourier2d (void) const;
+
   ComplexDET determinant (void) const;
   ComplexDET determinant (int& info) const;
   ComplexDET determinant (int& info, double& rcond) const;
 
   ComplexMatrix solve (const Matrix& b) const;
   ComplexMatrix solve (const Matrix& b, int& info) const;
   ComplexMatrix solve (const Matrix& b, int& info, double& rcond) const;
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -665,16 +665,125 @@ Matrix::ifourier (void) const
   for (j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   delete [] wsave;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
 
+ComplexMatrix
+Matrix::fourier2d (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  int npts, nsamples;
+  if (nr == 1 || nc == 1)
+    {
+      npts = nr > nc ? nr : nc;
+      nsamples = 1;
+    }
+  else
+    {
+      npts = nr;
+      nsamples = nc;
+    }
+
+  int nn = 4*npts+15;
+  Complex *wsave = new Complex [nn];
+  Complex *tmp_data = make_complex (data (), length ());
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (int j = 0; j < nsamples; j++)
+    F77_FCN (cfftf) (&npts, &tmp_data[npts*j], wsave);
+
+  delete [] wsave;
+
+  npts = nc;
+  nsamples = nr;
+  nn = 4*npts+15;
+  wsave = new Complex [nn];
+  Complex *row = new Complex[npts];
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (j = 0; j < nsamples; j++)
+    {
+      for (int i = 0; i < npts; i++)
+	row[i] = tmp_data[i*nr + j];
+
+      F77_FCN (cfftf) (&npts, row, wsave);
+
+      for (i = 0; i < npts; i++)
+	tmp_data[i*nr + j] = row[i];
+    }
+
+  delete [] wsave;
+  delete [] row;
+
+  return ComplexMatrix (tmp_data, nr, nc);
+}
+
+ComplexMatrix
+Matrix::ifourier2d (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  int npts, nsamples;
+  if (nr == 1 || nc == 1)
+    {
+      npts = nr > nc ? nr : nc;
+      nsamples = 1;
+    }
+  else
+    {
+      npts = nr;
+      nsamples = nc;
+    }
+
+  int nn = 4*npts+15;
+  Complex *wsave = new Complex [nn];
+  Complex *tmp_data = make_complex (data (), length ());
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (int j = 0; j < nsamples; j++)
+    F77_FCN (cfftb) (&npts, &tmp_data[npts*j], wsave);
+
+  delete [] wsave;
+
+  for (j = 0; j < npts*nsamples; j++)
+    tmp_data[j] = tmp_data[j] / (double) npts;
+
+  npts = nc;
+  nsamples = nr;
+  nn = 4*npts+15;
+  wsave = new Complex [nn];
+  Complex *row = new Complex[npts];
+
+  F77_FCN (cffti) (&npts, wsave);
+
+  for (j = 0; j < nsamples; j++)
+    {
+      for (int i = 0; i < npts; i++)
+	row[i] = tmp_data[i*nr + j];
+
+      F77_FCN (cfftb) (&npts, row, wsave);
+
+      for (i = 0; i < npts; i++)
+	tmp_data[i*nr + j] = row[i] / (double) npts;
+    }
+
+  delete [] wsave;
+  delete [] row;
+
+  return ComplexMatrix (tmp_data, nr, nc);
+}
+
 DET
 Matrix::determinant (void) const
 {
   int info;
   double rcond;
   return determinant (info, rcond);
 }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -107,16 +107,19 @@ public:
 
   Matrix inverse (void) const;
   Matrix inverse (int& info) const;
   Matrix inverse (int& info, double& rcond) const;
 
   ComplexMatrix fourier (void) const;
   ComplexMatrix ifourier (void) const;
 
+  ComplexMatrix fourier2d (void) const;
+  ComplexMatrix ifourier2d (void) const;
+
   DET determinant (void) const;
   DET determinant (int& info) const;
   DET determinant (int& info, double& rcond) const;
 
   Matrix solve (const Matrix& b) const;
   Matrix solve (const Matrix& b, int& info) const;
   Matrix solve (const Matrix& b, int& info, double& rcond) const;
 
diff --git a/src/fft.cc b/src/fft.cc
--- a/src/fft.cc
+++ b/src/fft.cc
@@ -31,50 +31,71 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("fft", Ffft, Sfft, 2, 1,
-  "fft (X): fast fourier transform of a vector")
+// This function should be merged with Fifft.
+
+DEFUN_DLD ("fft", Ffft, Sfft, 3, 1,
+  "fft (X [, N]): fast fourier transform of a vector")
 {
   Octave_object retval;
 
-  if (args.length () != 2)
+  int nargin = args.length ();
+
+  if (nargin < 2 || nargin > 3)
     {
       print_usage ("fft");
       return retval;
     }
 
   tree_constant arg = args(1);
 
-  if (empty_arg ("fft", arg.rows (), arg.columns ()) < 0)
+  int n_points = arg.rows ();
+  if (nargin == 3)
+    n_points = NINT (args(2).double_value ());
+
+  if (error_state)
     return retval;
 
+  if (n_points < 0)
+    {
+      error ("fft: number of points must be greater than zero");
+      return retval;
+    }
+
+  int arg_is_empty = empty_arg ("fft", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
+    return retval;
+  else if (arg_is_empty || n_points == 0)
+    return Matrix ();
+
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
-	  ComplexMatrix mfft = m.fourier ();
-	  retval = mfft;
+	  m.resize (n_points, m.columns (), 0.0);
+	  retval = m.fourier ();
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
-	  ComplexMatrix mfft = m.fourier ();
-	  retval = mfft;
+	  m.resize (n_points, m.columns (), 0.0);
+	  retval = m.fourier ();
 	}
     }
   else
     {
       gripe_wrong_type_arg ("fft", arg);
     }
 
   return retval;
diff --git a/src/ifft.cc b/src/ifft.cc
--- a/src/ifft.cc
+++ b/src/ifft.cc
@@ -31,50 +31,71 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("ifft", Fifft, Sifft,2, 1,
-  "ifft (X): inverse fast fourier transform of a vector")
+// This function should be merged with Ffft.
+
+DEFUN_DLD ("ifft", Fifft, Sifft, 3, 1,
+  "ifft (X [, N]): inverse fast fourier transform of a vector")
 {
   Octave_object retval;
 
-  if (args.length () != 2)
+  int nargin = args.length ();
+
+  if (nargin < 2 || nargin > 3)
     {
       print_usage ("ifft");
       return retval;
     }
 
   tree_constant arg = args(1);
     
-  if (empty_arg ("ifft", arg.rows (), arg.columns ()) < 0)
+  int n_points = arg.rows ();
+  if (nargin == 3)
+    n_points = NINT (args(2).double_value ());
+
+  if (error_state)
     return retval;
 
+  if (n_points < 0)
+    {
+      error ("ifft: number of points must be greater than zero");
+      return retval;
+    }
+
+  int arg_is_empty = empty_arg ("ifft", arg.rows (), arg.columns ());
+
+  if (arg_is_empty < 0)
+    return retval;
+  else if (arg_is_empty || n_points == 0)
+    return Matrix ();
+
   if (arg.is_real_type ())
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
-	  ComplexMatrix mifft = m.ifourier ();
-	  retval = mifft;
+	  m.resize (n_points, m.columns (), 0.0);
+	  retval = m.ifourier ();
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
-	  ComplexMatrix mifft = m.ifourier ();
-	  retval = mifft;
+	  m.resize (n_points, m.columns (), 0.0);
+	  retval = m.ifourier ();
 	}
     }
   else
     {
       gripe_wrong_type_arg ("ifft", arg);
     }
 
   return retval;
