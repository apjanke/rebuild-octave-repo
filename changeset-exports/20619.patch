# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1444755346 25200
#      Tue Oct 13 09:55:46 2015 -0700
# Node ID 96163bdd2ea1522e1af1f166a3af79913a467d3c
# Parent  9cef0a1207e4a0d2fff2d7a54ff2b6baca20006e
Fix assigning into structs with trailing singleton dimensions (bug #35841)

* ov-struct.cc (subsasgn): If indexing results in empty matrix, substitute a
1x1 empty cell.  Change test so that if numel of indexing operation is '<= 1'
operation proceeds rather than '== 1'.

* struct.tst: Add BIST test for bug #35841.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -329,16 +329,20 @@ octave_struct::subsasgn (const std::stri
                 std::string next_type = type.substr (2);
 
                 Cell tmpc (1, 1);
                 octave_map::iterator pkey = map.seek (key);
                 if (pkey != map.end ())
                   {
                     map.contents (pkey).make_unique ();
                     tmpc = map.contents (pkey).index (idx.front (), true);
+                    // See bug #35841, assigning to struct with trailing
+                    // singleton dimensions.
+                    if (tmpc.is_empty ())
+                      tmpc = Cell (1,1);
                   }
 
                 // FIXME: better code reuse?
                 //        cf. octave_cell::subsasgn and the case below.
                 if (tmpc.numel () == 1)
                   {
                     octave_value& tmp = tmpc(0);
 
@@ -473,17 +477,17 @@ octave_struct::subsasgn (const std::stri
                       }
                     else
                       {
                         const octave_map& cmap =
                           const_cast<const octave_map &> (map);
                         // cast to const reference, avoid forced key insertion.
                         if (idxf.all_scalars ()
                             || cmap.contents (key).index (idxf, true).numel ()
-                               == 1)
+                               <= 1)
                           {
                             map.assign (idxf,
                                         key, Cell (t_rhs.storable_value ()));
                             if (! error_state)
                               {
                                 count++;
                                 retval = octave_value (this);
                               }
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -52,31 +52,24 @@
 %! fail ("isfield (s, 'a', 3);", "Invalid call to isfield");
 
 %!assert (isfield (1, "m") == 0);
 
 %!test
 %! s.a = 2;
 %! assert (isfield (s, 2) == 0);
 
-%!assert (!(isstruct (1)))
-
-%!assert (!(isstruct ([1, 2])))
-
-%!assert (!(isstruct ([])))
-
-%!assert (!(isstruct ([1, 2; 3, 4])))
-
-%!assert (!(isstruct ("t")))
-
-%!assert (!(isstruct ("test")))
-
-%!assert (!(isstruct (["test"; "ing"])))
-
-%!assert (!(isstruct ({1})))
+%!assert (isstruct (1), false)
+%!assert (isstruct ([1, 2]), false)
+%!assert (isstruct ([]), false)
+%!assert (isstruct ([1, 2; 3, 4]), false)
+%!assert (isstruct ("t"), false)
+%!assert (isstruct ("test"), false)
+%!assert (isstruct (["test"; "ing"]), false)
+%!assert (isstruct ({1}), false)
 
 %!test
 %! s.a = 1;
 %! assert (isstruct (s));
 
 %!test
 %! s.a.b = 1;
 %! assert (isstruct (s.a));
@@ -233,12 +226,20 @@
 %! assert (a.m.c.b.m.i.j.k.l, struct ("b", 1));
 
 ## test indexed assignment into empty struct array
 %!test
 %! s = resize (struct (), 3,2);
 %! s(3).foo = 42;
 %! assert (s(3), struct ("foo", 42));
 
+## test assigning to multi-dim struct with trailing singleton dimensions,
+## Bug #35841.
+%!test
+%! a(1,1,1).b(1) = 1;
+%! a(1,1,1).b(1) = 2;
+%! a(1,1,:).b(1) = 3;
+%! assert (a(1,1,1).b(1) == 3);
+
 %!error id=Octave:index-out-of-bounds
 %! s = resize (struct (),3,2);
 %! s(3).foo = 42;
 %! s(7);
