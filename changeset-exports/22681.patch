# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477608889 25200
#      Thu Oct 27 15:54:49 2016 -0700
# Node ID cef19bf07f26fb708251b7498abd3bce8368fa5f
# Parent  62702ba67a3889abf4a1965335dd5704b5b056de
gnuplot_binary.in.m: Overhaul function.

* gnuplot_binary.in.m: Document additional calling form.
Add semicolon to end of line for mlock() function call.
Set gnuplot_binary name when additional args are present (bug in existing
code).  Clear additional args field if a new binary is set without
other inputs.  Revise BIST tests for new behavior.

diff --git a/scripts/plot/util/gnuplot_binary.in.m b/scripts/plot/util/gnuplot_binary.in.m
--- a/scripts/plot/util/gnuplot_binary.in.m
+++ b/scripts/plot/util/gnuplot_binary.in.m
@@ -13,56 +13,61 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{prog}, @var{args}] =} gnuplot_binary ()
+## @deftypefnx {} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog})
 ## @deftypefnx {} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
 ## Query or set the name of the program invoked by the plot command when the
 ## graphics toolkit is set to @qcode{"gnuplot"}.
 ##
 ## Additional arguments to pass to the external plotting program may also be
 ## given.  The default value is @qcode{"gnuplot"} with no additional arguments.
 ## @xref{Installation}.
 ## @seealso{graphics_toolkit}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [prog, args] = gnuplot_binary (new_prog, varargin)
 
-  mlock ()
+  mlock ();
   persistent gp_binary = %OCTAVE_CONF_GNUPLOT%;
   persistent gp_args = {};
 
   if (nargout > 0 || nargin == 0)
     prog = gp_binary;
     args = gp_args;
   endif
 
-  if (nargin == 1)
+  if (nargin > 0)
     if (! ischar (new_prog) || isempty (new_prog))
       error ("gnuplot_binary: NEW_PROG must be a non-empty string");
     endif
     gp_binary = new_prog;
+    gp_args = {};
   endif
 
   if (nargin > 1)
     if (! iscellstr (varargin))
       error ("gnuplot_binary: arguments must be character strings");
     endif
     gp_args = varargin;
   endif
 
 endfunction
 
 
 %!test
-%! orig_val = gnuplot_binary ();
-%! old_val = gnuplot_binary ("__foobar__");
+%! [orig_val, orig_args] = gnuplot_binary ();
+%! [old_val, old_args] = gnuplot_binary ("__foobar__", "-opt1");
 %! assert (orig_val, old_val);
+%! assert (orig_args, old_args);
 %! assert (gnuplot_binary (), "__foobar__");
-%! gnuplot_binary (orig_val);
+%! [~, new_args] = gnuplot_binary ();
+%! assert (new_args, {"-opt1"});
+%! gnuplot_binary (orig_val, orig_args{:});
 %! assert (gnuplot_binary (), orig_val);
 
