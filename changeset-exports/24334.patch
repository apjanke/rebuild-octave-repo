# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511989736 28800
#      Wed Nov 29 13:08:56 2017 -0800
# Node ID d3d38a443df8652cb2ea97c686e3014c6f547319
# Parent  0c1417a8d9d0eb63a72e6f33c7901445a82de267
Add new warning ID "Octave:eigs:UnconvergedEigenvalues".

* __eigs__.cc (F__eigs__): Change function call warning() to warning_with_id().
Use new ID "Octave:eigs:UnconvergedEigenvalues".

* warning_ids.m: Add documentation describing warning.

* eigs.m: Change BIST tests to disable this warning ID temporarily when running
tests designed to produce unconverged eigenvalues.

diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -550,20 +550,22 @@ Undocumented internal function.
           if (nargout < 2)
             retval(0) = eig_val;
           else
             retval = ovl (eig_vec, ComplexDiagMatrix (eig_val), double (info));
         }
     }
 
   if (nconv <= 0)
-    warning ("eigs: None of the %d requested eigenvalues converged", k);
+    warning_with_id ("Octave:eigs:UnconvergedEigenvalues",
+                     "eigs: None of the %d requested eigenvalues converged", k);
   else if (nconv < k)
-    warning ("eigs: Only %d of the %d requested eigenvalues converged",
-             nconv, k);
+    warning_with_id ("Octave:eigs:UnconvergedEigenvalues",
+                     "eigs: Only %d of the %d requested eigenvalues converged",
+                     nconv, k);
 
   if (! fcn_name.empty ())
     {
       octave::symbol_table& symtab = interp.get_symbol_table ();
 
       symtab.clear_function (fcn_name);
     }
 
diff --git a/scripts/help/warning_ids.m b/scripts/help/warning_ids.m
--- a/scripts/help/warning_ids.m
+++ b/scripts/help/warning_ids.m
@@ -158,16 +158,23 @@
 ## is obsolete and scheduled for removal from Octave.
 ## By default, the @code{Octave:deprecated-property} warning is enabled.
 ##
 ## @item Octave:divide-by-zero
 ## If the @code{Octave:divide-by-zero} warning is enabled, a
 ## warning is issued when Octave encounters a division by zero.
 ## By default, the @code{Octave:divide-by-zero} warning is enabled.
 ##
+## @item Octave:eigs:UnconvergedEigenvalues
+## If the @code{Octave:eigs:UnconvergedEigenvalues} warning is enabled then
+## the eigs function will issue a warning if the number of calculated
+## eigenvalues is less than the number of requested eigenvalues.
+## By default, the @code{Octave:eigs:UnconvergedEigenvalues} warning is
+## enabled.
+##
 ## @item Octave:fopen-file-in-path
 ## By default, the @code{Octave:fopen-file-in-path} warning is enabled.
 ##
 ## @item Octave:function-name-clash
 ## If the @code{Octave:function-name-clash} warning is enabled, a
 ## warning is issued when Octave finds that the name of a function
 ## defined in a function file differs from the name of the file.  (If
 ## the names disagree, the name declared inside the file is ignored.)
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -1329,102 +1329,102 @@ endfunction
 %! A = rand (10);
 %! opts.v0 = ones (8, 1);
 %! eigs (A, 4, "sm", opts);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([-2, 1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 3;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "lm", opts);
-%! assert (d(2:4), [NaN; NaN; NaN])
+%! assert (d(2:4), [NaN; NaN; NaN]);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([-2, 1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "sm", opts);
-%! assert (d(4), NaN)
+%! assert (d(4), NaN);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([-2, 1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! Afun = @(x) A * x;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 3;
 %! opts.issym = true;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (Afun, 100, 4, "sm", opts);
-%! assert (d(2:4), [NaN; NaN; NaN])
+%! assert (d(2:4), [NaN; NaN; NaN]);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([-2, 1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! A(1, 2) = 10;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 5;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "lm", opts);
-%! assert (d(3:4), [NaN; NaN])
+%! assert (d(3:4), [NaN; NaN]);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 5;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "lm", opts);
-%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = magic (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "lm", opts);
-%! assert (d(4), NaN)
+%! assert (d(4), NaN);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
 %! A(1, 1) = 1;
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "sm", opts);
-%! assert (d(3:4), [NaN; NaN])
-%! assert (imag (d(3:4)), [0; 0])
+%! assert (d(3:4), [NaN; NaN]);
+%! assert (imag (d(3:4)), [0; 0]);
 %!testif HAVE_ARPACK
 %! A = magic (100) / 100 + eye (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "sm", opts);
-%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = toeplitz ([0, 1, zeros(1, 8)], [0, -1, zeros(1, 8)]);
 %! A = kron (A, eye (10)) + kron (eye (10), A);
 %! Afun = @(x) A * x;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 5;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (Afun, 100, 4, "lm", opts);
-%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN])
+%! assert (d(3:4), [NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "lm", opts);
-%! assert (d(4), NaN+1i*NaN)
+%! assert (d(4), NaN+1i*NaN);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100) / 100 + eye (100);
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (A, 4, "sm", opts);
-%! assert (d(2:4), [NaN+1i*NaN; NaN+1i*NaN; NaN+1i*NaN])
+%! assert (d(2:4), [NaN+1i*NaN; NaN+1i*NaN; NaN+1i*NaN]);
 %!testif HAVE_ARPACK
 %! A = 1i * magic (100);
 %! Afun = @(x) A * x;
 %! opts.v0 = (1:100)';
 %! opts.maxit = 1;
 %! opts.isreal = false;
-%! warning ("off", "all")
+%! warning ("off", "Octave:eigs:UnconvergedEigenvalues", "local");
 %! d = eigs (Afun, 100, 4, "lm", opts);
-%! assert (d(4), NaN+1i*NaN)
+%! assert (d(4), NaN+1i*NaN);
