# HG changeset patch
# User jwe
# Date 1140035140 0
#      Wed Feb 15 20:25:40 2006 +0000
# Node ID 3236b4d98fde9f74ba1d54b35cbab60ecc30279d
# Parent  f88f2e35ad6e0d8200848236c03e06b9dd6653b8
[project @ 2006-02-15 20:25:39 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-02-15  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (Fautoload): Return struct array of autoload info if
+	nargin == 0.
+
 2006-02-15  Keith Goodman  <kwgoodman@gmail.com>
 
 	* help.cc (keywords): Doc string fix.
 
 2006-02-15  John W. Eaton  <jwe@octave.org>
 
 	* oct-procbuf.cc (close): Use __CYGWIN__ instead of __CYGWIN32__.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -56,16 +56,17 @@ 02110-1301, USA.
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
+#include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-all.h"
 #include "symtab.h"
 #include "token.h"
@@ -3388,43 +3389,49 @@ parse_fcn_file (const std::string& ff, b
   unwind_protect::run_frame ("parse_fcn_file");
 
   return script_file_executed;
 }
 
 std::string
 lookup_autoload (const std::string& nm)
 {
-  return
-    octave_env::make_absolute (Vload_path_dir_path.find (autoload_map[nm]),
-			       octave_env::getcwd ());
+  std::string retval;
+
+  typedef std::map<std::string, std::string>::const_iterator am_iter;
+
+  am_iter p = autoload_map.find (nm);
+
+  if (p != autoload_map.end ())
+    retval = octave_env::make_absolute (Vload_path_dir_path.find (p->second),
+					octave_env::getcwd ());
+
+  return retval;
 }
 
 string_vector 
 autoloaded_functions (void)
 {
   string_vector names (autoload_map.size());
 
   octave_idx_type i = 0;
-  std::map<std::string, std::string>::const_iterator p;
-  for (p = std::map<std::string, std::string>::iterator (autoload_map.begin ()); 
-       p != std::map<std::string, std::string>::iterator (autoload_map.end ()); p++)
+  typedef std::map<std::string, std::string>::const_iterator am_iter;
+  for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
     names[i++] = p->first;
 
   return names;
 }
 
 string_vector
 reverse_lookup_autoload (const std::string& nm)
 {
   string_vector names;
 
-  std::map<std::string, std::string>::const_iterator p;
-  for (p = std::map<std::string, std::string>::iterator (autoload_map.begin ()); 
-       p != std::map<std::string, std::string>::iterator (autoload_map.end ()); p++)
+  typedef std::map<std::string, std::string>::const_iterator am_iter;
+  for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
     if (nm == p->second)
       names.append (p->first);
 
   return names;
 }
 
 bool
 load_fcn_from_file (const std::string& nm, bool exec_script)
@@ -3507,23 +3514,48 @@ load_fcn_from_file (symbol_record *sym_r
 {
   return load_fcn_from_file (sym_rec->name (), exec_script);
 }
 
 DEFCMD (autoload, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} autoload (@var{function}, @var{file})\n\
 Define @var{function} to autoload from @var{file}.\n\
+\n\
+With no arguments, return a structure with information about all\n\
+currently autoloaded functions.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2)
+  if (nargin == 0)
+    {
+      Cell func_names (dim_vector (autoload_map.size ()), 1);
+      Cell file_names (dim_vector (autoload_map.size ()), 1);
+
+      octave_idx_type i = 0;
+      typedef std::map<std::string, std::string>::const_iterator am_iter;
+      for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
+	{
+	  func_names(i) = p->first;
+	  file_names(i) = p->second;
+
+	  i++;
+	}
+
+      Octave_map m;
+
+      m.assign ("function", func_names);
+      m.assign ("file", file_names);
+
+      retval = m;
+    }
+  else if (nargin == 2)
     {
       string_vector argv = args.make_argv ("autoload");
 
       if (! error_state)
 	autoload_map[argv[1]] = argv[2];
     }
   else
     print_usage ("autoload");
