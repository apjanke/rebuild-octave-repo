# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1548515037 0
#      Sat Jan 26 15:03:57 2019 +0000
# Node ID cca0548f7b862e92919e8afb8092bb9174e7092b
# Parent  c549533423724b48be1a1451bdc4c834766b6290
refactor calling object destructor

* ov.h (octave_value::call_object_destructor): New function.
* ov-base.h (octave_base_value::call_object_destructor):
New virtual function.
* ov-oncleanup.h, ov-oncleanup.cc
(octave_oncleanup::call_object_destructor): New function.
(octave_oncleanup::~octave_oncleanup): Use it.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -714,16 +714,18 @@ public:
   virtual sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
   virtual bool islocked (void) const { return false; }
 
+  virtual void call_object_destructor (void) { }
+
   virtual octave_value dump (void) const;
 
   // Standard mappers.  Register new ones here.
   enum unary_mapper_t
   {
     umap_abs,
     umap_acos,
     umap_acosh,
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -59,59 +59,17 @@ octave_oncleanup::octave_oncleanup (cons
     {
       fcn = octave_value ();
       error ("onCleanup: argument must be a function handle");
     }
 }
 
 octave_oncleanup::~octave_oncleanup (void)
 {
-  if (fcn.is_undefined ())
-    return;
-
-  octave::unwind_protect frame;
-
-  // Clear interrupts.
-  frame.protect_var (octave_interrupt_state);
-  octave_interrupt_state = 0;
-
-  // Disallow quit().
-  frame.protect_var (quit_allowed);
-  quit_allowed = false;
-
-  interpreter_try (frame);
-
-  try
-    {
-      // Run the actual code.
-      octave::feval (fcn);
-    }
-  catch (const octave::interrupt_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-
-      warning ("onCleanup: interrupt occurred in cleanup action");
-    }
-  catch (const octave::execution_exception&)
-    {
-      std::string msg = last_error_message ();
-      warning ("onCleanup: error caught while executing cleanup function:\n%s\n",
-               msg.c_str ());
-
-    }
-  catch (const octave::exit_exception&)
-    {
-      // This shouldn't happen since we disabled quit above.
-      warning ("onCleanup: exit disabled while executing cleanup function");
-    }
-  catch (...) // Yes, the black hole.  We're in a d-tor.
-    {
-      // This shouldn't happen, in theory.
-      warning ("onCleanup: internal error: unhandled exception in cleanup action");
-    }
+  call_object_destructor ();
 }
 
 octave_scalar_map
 octave_oncleanup::scalar_map_value (void) const
 {
   octave_scalar_map retval;
   retval.setfield ("task", fcn);
   return retval;
@@ -178,16 +136,67 @@ void
 octave_oncleanup::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   os << "onCleanup (";
   if (fcn.is_defined ())
     fcn.print_raw (os, pr_as_read_syntax);
   os << ')';
 }
 
+void
+octave_oncleanup::call_object_destructor (void)
+{
+  if (fcn.is_undefined ())
+    return;
+
+  octave_value the_fcn = fcn;
+  fcn = octave_value ();
+
+  octave::unwind_protect frame;
+
+  // Clear interrupts.
+  frame.protect_var (octave_interrupt_state);
+  octave_interrupt_state = 0;
+
+  // Disallow quit().
+  frame.protect_var (quit_allowed);
+  quit_allowed = false;
+
+  interpreter_try (frame);
+
+  try
+    {
+      // Run the actual code.
+      octave::feval (the_fcn);
+    }
+  catch (const octave::interrupt_exception&)
+    {
+      octave::interpreter::recover_from_exception ();
+
+      warning ("onCleanup: interrupt occurred in cleanup action");
+    }
+  catch (const octave::execution_exception&)
+    {
+      std::string msg = last_error_message ();
+      warning ("onCleanup: error caught while executing cleanup function:\n%s\n",
+               msg.c_str ());
+
+    }
+  catch (const octave::exit_exception&)
+    {
+      // This shouldn't happen since we disabled quit above.
+      warning ("onCleanup: exit disabled while executing cleanup function");
+    }
+  catch (...) // Yes, the black hole.  We're in a d-tor.
+    {
+      // This shouldn't happen, in theory.
+      warning ("onCleanup: internal error: unhandled exception in cleanup action");
+    }
+}
+
 DEFUN (onCleanup, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{obj} =} onCleanup (@var{function})
 Create a special object that executes a given function upon destruction.
 
 If the object is copied to multiple variables (or cell or struct array
 elements) or returned from a function, @var{function} will be executed after
 clearing the last copy of the object.  Note that if multiple local onCleanup
diff --git a/libinterp/octave-value/ov-oncleanup.h b/libinterp/octave-value/ov-oncleanup.h
--- a/libinterp/octave-value/ov-oncleanup.h
+++ b/libinterp/octave-value/ov-oncleanup.h
@@ -30,17 +30,18 @@ along with Octave; see the file COPYING.
 #include "ov-base.h"
 #include "ov-struct.h"
 #include "ov.h"
 
 
 class octave_oncleanup : public octave_base_value
 {
 public:
-  octave_oncleanup (void) : fcn () { }
+
+  octave_oncleanup (void) = default;
 
   octave_oncleanup (const octave_value& fcn);
 
   octave_base_value * clone (void) const
   {
     if (fcn.is_defined ())
       error ("onCleanup: internal error: cloning nonempty object");
 
@@ -80,16 +81,18 @@ public:
   bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  void call_object_destructor (void);
+
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
 protected:
 
   octave_value fcn;
 };
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1321,16 +1321,18 @@ public:
   { return rep->is_sorted_rows (mode); }
 
   void lock (void) { rep->lock (); }
 
   void unlock (void) { rep->unlock (); }
 
   bool islocked (void) const { return rep->islocked (); }
 
+  void call_object_destructor (void) { return rep->call_object_destructor (); }
+
   octave_value dump (void) const { return rep->dump (); }
 
 #define MAPPER_FORWARD(F) \
   octave_value F (void) const                           \
   {                                                     \
     return rep->map (octave_base_value::umap_ ## F);    \
   }
 
