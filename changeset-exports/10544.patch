# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1272014623 -7200
#      Fri Apr 23 11:23:43 2010 +0200
# Node ID 9961fc022d9dab62bb1e5b48c00865abf53f6892
# Parent  f41c6634d5af73dfa40510a2c1e2f5064d6e4e63
fix assignment to non-existing variables and octave_value::assign

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2010-04-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-bool.h (octave_bool::empty_clone): Correctly return an empty
+	matrix.
+	* ov-float.h (octave_float::empty_clone): Ditto.
+	* ov-base-mat.h (octave_base_matrix::clone,
+	octave_base_matrix::empty_clone): Remove.
+	* ov-base-scalar.h (octave_base_scalar::clone,
+	octave_base_scalar::empty_clone): Remove.
+	* ov-base-sparse.h (octave_base_sparse::clone,
+	octave_base_sparse::empty_clone): Remove.
+	* ov-base.h (octave_base_value::empty_clone): Remove implementation.
+	* ov-base.cc (octave_base_value::empty_clone): Implement here.
+	Fall back to resize() for empty_clone().
+	* ov.cc (octave_value::assign): Correct behavior in the indexed OP= case.
+	Use better error messages. Always return non-const reference, like any
+	assignment.
+	* ov.h: Update decls.
+	* oct-lvalue.cc (octave_lvalue::assign): Simplify.
+
 2010-04-22  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/hess.cc.: return correct Hessenberg matrix when called 
    with only one output argument.
 
 2010-04-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (do_hypot): New helper function. Move bulk code from Fhypot
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -30,22 +30,20 @@ along with Octave; see the file COPYING.
 #include "oct-lvalue.h"
 #include "ov.h"
 
 void
 octave_lvalue::assign (octave_value::assign_op op, const octave_value& rhs)
 {
   if (val)
     {
-      octave_value tmp (idx.empty ()
-                        ? val->assign (op, rhs)
-                        : val->assign (op, type, idx, rhs));
-
-      if (! error_state)
-        *val = tmp;
+      if (idx.empty ())
+        val->assign (op, rhs);
+      else
+        val->assign (op, type, idx, rhs);
     }
 }
 
 void
 octave_lvalue::set_index (const std::string& t,
                           const std::list<octave_value_list>& i)
 {
   if (idx.empty ())
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -65,19 +65,16 @@ public:
   octave_base_matrix (const octave_base_matrix& m)
     : octave_base_value (), matrix (m.matrix), 
       typ (m.typ ? new MatrixType (*m.typ) : 0), 
       idx_cache (m.idx_cache ? new idx_vector (*m.idx_cache) : 0) 
     { }
 
   ~octave_base_matrix (void) { clear_cached_info (); }
 
-  octave_base_value *clone (void) const { return new octave_base_matrix (*this); }
-  octave_base_value *empty_clone (void) const { return new octave_base_matrix (); }
-
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return MT (matrix.squeeze ()); }
 
   octave_value full_value (void) const { return matrix; }
 
   void maybe_economize (void) { matrix.maybe_economize (); }
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -52,19 +52,16 @@ public:
   octave_base_scalar (const ST& s)
     : octave_base_value (), scalar (s) { }
 
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
 
-  octave_base_value *clone (void) const { return new octave_base_scalar (*this); }
-  octave_base_value *empty_clone (void) const { return new octave_base_scalar (); }
-
   octave_value squeeze (void) const { return scalar; }
 
   octave_value full_value (void) const { return scalar; }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -67,20 +67,16 @@ octave_base_sparse : public octave_base_
       matrix.resize (dim_vector (0, 0));
   }
 
   octave_base_sparse (const octave_base_sparse& a) : 
     octave_base_value (), matrix (a.matrix), typ (a.typ) { }
 
   ~octave_base_sparse (void) { }
 
-  octave_base_value *clone (void) const { return new octave_base_sparse (*this); }
-  octave_base_value *empty_clone (void) const 
-    { return new octave_base_sparse (); }
-
   octave_idx_type nnz (void) const { return matrix.nnz (); }
 
   octave_idx_type nzmax (void) const { return matrix.nzmax (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix.squeeze (); }
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -110,16 +110,22 @@ get_builtin_classes (void)
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value,
                                      "<unknown type>", "unknown");
 
 // TRUE means to perform automatic sparse to real mutation if there
 // is memory to be saved
 bool Vsparse_auto_mutate = false;
 
+octave_base_value *
+octave_base_value::empty_clone (void) const
+{
+  return resize (dim_vector ()).clone ();
+}
+
 octave_value
 octave_base_value::squeeze (void) const
 {
   std::string nm = type_name ();
   error ("squeeze: invalid operation for %s type", nm.c_str ());
   return octave_value ();
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -211,17 +211,17 @@ public:
   virtual ~octave_base_value (void) { }
 
   // Unconditional clone. Always clones.
   virtual octave_base_value *
   clone (void) const { return new octave_base_value (*this); }
 
   // Empty clone.
   virtual octave_base_value *
-  empty_clone (void) const { return new octave_base_value (); }
+  empty_clone (void) const;
 
   // Unique clone. Usually clones, but may be overriden to fake the
   // cloning when sharing copies is to be controlled from within an
   // instance (see octave_class).
   virtual octave_base_value *
   unique_clone (void) { return clone (); }
 
   virtual type_conv_info
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-scalar.h"
+#include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
@@ -60,17 +61,17 @@ public:
     : octave_base_scalar<bool> (b) { }
 
   octave_bool (const octave_bool& s)
     : octave_base_scalar<bool> (s) { }
 
   ~octave_bool (void) { }
 
   octave_base_value *clone (void) const { return new octave_bool (*this); }
-  octave_base_value *empty_clone (void) const { return new octave_bool (); }
+  octave_base_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
diff --git a/src/ov-float.h b/src/ov-float.h
--- a/src/ov-float.h
+++ b/src/ov-float.h
@@ -67,17 +67,17 @@ public:
 
   ~octave_float_scalar (void) { }
 
   octave_base_value *clone (void) const { return new octave_float_scalar (*this); }
 
   // We return an octave_matrix here instead of an octave_float_scalar so
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
-  octave_base_value *empty_clone (void) const { return new octave_matrix (); }
+  octave_base_value *empty_clone (void) const { return new octave_float_matrix (); }
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1266,65 +1266,70 @@ gripe_assign_failed_or_no_method (const 
 octave_value
 octave_value::subsasgn (const std::string& type,
                         const std::list<octave_value_list>& idx,
                         const octave_value& rhs)
 {
   return rep->subsasgn (type, idx, rhs);
 }
 
-octave_value
+octave_value&
 octave_value::assign (assign_op op, const std::string& type,
                       const std::list<octave_value_list>& idx,
                       const octave_value& rhs)
 {
   octave_value retval;
 
   make_unique ();
 
   octave_value t_rhs = rhs;
 
   if (op != op_asn_eq)
     {
-      octave_value t = subsref (type, idx);
-
-      if (! error_state)
+      if (is_defined ())
         {
-          binary_op binop = op_eq_to_binary_op (op);
+          octave_value t = subsref (type, idx);
 
           if (! error_state)
-            t_rhs = do_binary_op (binop, t, rhs);
+            {
+              binary_op binop = op_eq_to_binary_op (op);
+
+              if (! error_state)
+                t_rhs = do_binary_op (binop, t, rhs);
+            }
         }
+      else
+        error ("in computed assignment A(index) OP= X, A must be defined first");
     }
 
   if (! error_state)
     {
       if (type[0] == '.' && ! (is_map () || is_object ()))
         {
           octave_value tmp = Octave_map ();
-          retval = tmp.subsasgn (type, idx, t_rhs);
+          *this = tmp.subsasgn (type, idx, t_rhs);
         }
       else
-        retval = subsasgn (type, idx, t_rhs);
+        *this = subsasgn (type, idx, t_rhs);
 
       if (error_state)
         gripe_assign_failed_or_no_method (assign_op_as_string (op_asn_eq),
                                           type_name (), rhs.type_name ());
     }
 
-  return retval;
+  return *this;
 }
 
-const octave_value&
+octave_value&
 octave_value::assign (assign_op op, const octave_value& rhs)
 {
   if (op == op_asn_eq)
     // Regularize a null matrix if stored into a variable.
     operator = (rhs.storable_value ());
-  else
+  else if (is_defined ())
     {
       octave_value_typeinfo::assign_op_fcn f = 0;
       
       // Only attempt to operate in-place if this variable is unshared.
       if (rep->count == 1)
         {
           int tthis = this->type_id ();
           int trhs = rhs.type_id ();
@@ -1353,16 +1358,18 @@ octave_value::assign (assign_op op, cons
             {
               octave_value t = do_binary_op (binop, *this, rhs);
 
               if (! error_state)
                 operator = (t);
             }
         }
     }
+  else
+    error ("in computed assignment A OP= X, A must be defined first");
 
   return *this;
 }
 
 octave_idx_type
 octave_value::length (void) const
 {
   int retval = 0;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -406,21 +406,21 @@ public:
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
   octave_value subsasgn (const std::string& type,
                                  const std::list<octave_value_list>& idx,
                                  const octave_value& rhs);
 
-  octave_value assign (assign_op op, const std::string& type,
+  octave_value& assign (assign_op op, const std::string& type,
                        const std::list<octave_value_list>& idx,
                        const octave_value& rhs);
 
-  const octave_value& assign (assign_op, const octave_value& rhs);
+  octave_value& assign (assign_op, const octave_value& rhs);
 
   idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
   // Size.
 
   dim_vector dims (void) const
     { return rep->dims (); }
