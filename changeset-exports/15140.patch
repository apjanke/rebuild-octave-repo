# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1344619412 18000
#      Fri Aug 10 12:23:32 2012 -0500
# Node ID 6ea86e1d0f5fb1507ab69837fb7ed1756056bb12
# Parent  eeaaac7c86b61ccd3cef2c5b74b2e10d92c9bc38
Support +=, -=, *=, ect. in JIT

* pt-jit.cc (jit-convert::visit_simple_assignment): Support more assignment
operators.

* ov.cc (octave_value::assign_op_to_binary_op): New function.
* ov.h (octave_value::assign_op_to_binary_op): New declaration.

diff --git a/src/interp-core/pt-jit.cc b/src/interp-core/pt-jit.cc
--- a/src/interp-core/pt-jit.cc
+++ b/src/interp-core/pt-jit.cc
@@ -602,22 +602,30 @@ void
 jit_convert::visit_return_list (tree_return_list&)
 {
   throw jit_fail_exception ();
 }
 
 void
 jit_convert::visit_simple_assignment (tree_simple_assignment& tsa)
 {
-  if (tsa.op_type () != octave_value::op_asn_eq)
-    throw jit_fail_exception ("Unsupported assign");
-
-  // resolve rhs
   tree_expression *rhs = tsa.right_hand_side ();
   jit_value *rhsv = visit (rhs);
+  octave_value::assign_op op = tsa.op_type ();
+
+  if (op != octave_value::op_asn_eq)
+    {
+      // do the equivlent binary operation, then assign. This is always correct,
+      // but isn't always optimal.
+      tree_expression *lhs = tsa.left_hand_side ();
+      jit_value *lhsv = visit (lhs);
+      octave_value::binary_op bop = octave_value::assign_op_to_binary_op (op);
+      const jit_operation& fn = jit_typeinfo::binary_op (bop);
+      rhsv = create_checked (fn, lhsv, rhsv);
+    }
 
   result = do_assign (tsa.left_hand_side (), rhsv);
 }
 
 void
 jit_convert::visit_statement (tree_statement& stmt)
 {
   tree_command *cmd = stmt.command ();
@@ -1943,9 +1951,16 @@ Test some simple cases that compile.
 %!test
 %! m = [1 2 3];
 %! for i=1:1001
 %!   m = sin (m);
 %!   break;
 %! endfor
 %! assert (m == sin ([1  2 3]));
 
+%!test
+%! i = 0;
+%! while i < 10
+%!   i += 1;
+%! endwhile
+%! assert (i == 10);
+
 */
diff --git a/src/octave-value/ov.cc b/src/octave-value/ov.cc
--- a/src/octave-value/ov.cc
+++ b/src/octave-value/ov.cc
@@ -478,16 +478,55 @@ octave_value::assign_op_as_string (assig
 
     default:
       retval = "<unknown>";
     }
 
   return retval;
 }
 
+octave_value::binary_op
+octave_value::assign_op_to_binary_op (assign_op op)
+{
+  switch (op)
+    {
+    case op_add_eq:
+      return op_add;
+    case op_sub_eq:
+      return op_sub;
+    case op_mul_eq:
+      return op_mul;
+    case op_div_eq:
+      return op_div;
+    case op_ldiv_eq:
+      return op_ldiv;
+    case op_pow_eq:
+      return op_pow;
+    case op_lshift_eq:
+      return op_lshift;
+    case op_rshift_eq:
+      return op_rshift;
+    case op_el_mul_eq:
+      return op_el_mul;
+    case op_el_div_eq:
+      return op_el_div;
+    case op_el_ldiv_eq:
+      return op_el_ldiv;
+    case op_el_pow_eq:
+      return op_el_pow;
+    case op_el_and_eq:
+      return op_el_and;
+    case op_el_or_eq:
+      return op_el_or;
+    default:
+      return unknown_binary_op;
+    }
+
+}
+
 octave_value::assign_op
 octave_value::binary_op_to_assign_op (binary_op op)
 {
   assign_op retval;
 
   switch (op)
     {
     case op_add:
diff --git a/src/octave-value/ov.h b/src/octave-value/ov.h
--- a/src/octave-value/ov.h
+++ b/src/octave-value/ov.h
@@ -140,16 +140,18 @@ public:
     op_el_ldiv_eq,
     op_el_pow_eq,
     op_el_and_eq,
     op_el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
+  static binary_op assign_op_to_binary_op (assign_op);
+
   static assign_op binary_op_to_assign_op (binary_op);
 
   static std::string unary_op_as_string (unary_op);
   static std::string unary_op_fcn_name (unary_op);
 
   static std::string binary_op_as_string (binary_op);
   static std::string binary_op_fcn_name (binary_op);
 
