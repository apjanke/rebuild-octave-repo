# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365289694 14400
#      Sat Apr 06 19:08:14 2013 -0400
# Node ID 3207f1d62e742539411f6587aa148a6e68c3c930
# Parent  c129a8b73d25cdf3b2a99e374d2ee3751cf88c02
improve encapsulation of file browser window object

* files-dockwidget.h, files-dockwidget.cc
(files_dock_widget::files_dock_widget): Use new local variable
container for clarity.  Set status tip.
(files_dock_widget::connect_visibility_changed,
files_dock_widget::focus, files_dock_widget::handle_visibility):
New functions.

* main-window.h, main-window.cc (main_window::file_browser_window):
Rename from _files_dock_widget.  Change all uses.
(main_window::main_window): Initialize it here.
(main_window::focus_current_directory,
main_window::handle_current_directory_visible): Delete.
(main_window::connect_visibility_changed): Call
file_browser_window->connect_visibility_changed.
(main_window::construct): Don't create _files_dock_widget here.
Connect file_browser_action::triggered to
file_browser_window::focus instead of
main_window::focus_current_directory.

diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -36,20 +36,24 @@ along with Octave; see the file COPYING.
 #include <QHeaderView>
 
 files_dock_widget::files_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("FilesDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("File Browser"));
-  setWidget (new QWidget (this));
+  setStatusTip (tr ("Browse your files."));
+
+  QWidget *container = new QWidget (this);
+
+  setWidget (container);
 
   // Create a toolbar
-  _navigation_tool_bar = new QToolBar ("", widget ());
+  _navigation_tool_bar = new QToolBar ("", container);
   _navigation_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
   _navigation_tool_bar->setMovable (false);
   _navigation_tool_bar->setIconSize (QSize (20, 20));
 
   _directory_icon = QIcon(":/actions/icons/up.png");
   _directory_up_action = new QAction (_directory_icon, "", _navigation_tool_bar);
   _directory_up_action->setStatusTip (tr ("Move up one directory."));
 
@@ -66,17 +70,17 @@ files_dock_widget::files_dock_widget (QW
   // Create the QFileSystemModel starting in the home directory
   QString homePath = QDir::homePath ();
 
   _file_system_model = new QFileSystemModel (this);
   _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
   QModelIndex rootPathIndex = _file_system_model->setRootPath (homePath);
 
   // Attach the model to the QTreeView and set the root index
-  _file_tree_view = new QTreeView (widget ());
+  _file_tree_view = new QTreeView (container);
   _file_tree_view->setModel (_file_system_model);
   _file_tree_view->setRootIndex (rootPathIndex);
   _file_tree_view->setSortingEnabled (true);
   _file_tree_view->setAlternatingRowColors (true);
   _file_tree_view->setAnimated (true);
   _file_tree_view->setStatusTip (tr ("Doubleclick a file to open it."));
 
   // get sort column and order as well as cloumn state (order and width)
@@ -86,33 +90,34 @@ files_dock_widget::files_dock_widget (QW
               settings->value ("filesdockwidget/sort_files_by_column",0).toInt (),
               static_cast<Qt::SortOrder>(settings->value ("filesdockwidget/sort_files_by_order",Qt::AscendingOrder).toUInt ())
   );
   _file_tree_view->header ()->restoreState (settings->value ("filesdockwidget/column_state").toByteArray ());
   
   _current_directory->setText(_file_system_model->fileInfo (rootPathIndex).
                               absoluteFilePath ());
 
-  connect (_file_tree_view, SIGNAL (doubleClicked (const QModelIndex &)), this,
-           SLOT (item_double_clicked (const QModelIndex &)));
+  connect (_file_tree_view, SIGNAL (doubleClicked (const QModelIndex &)),
+           this, SLOT (item_double_clicked (const QModelIndex &)));
 
   // Layout the widgets vertically with the toolbar on top
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->setSpacing (0);
   vbox_layout->addWidget (_navigation_tool_bar);
   vbox_layout->addWidget (_file_tree_view);
   vbox_layout->setMargin (1);
-  widget ()->setLayout (vbox_layout);
+
+  container->setLayout (vbox_layout);
+
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
   connect (_current_directory, SIGNAL (returnPressed ()),
            this, SLOT (accept_directory_line_edit ()));
 
-  QCompleter *
-    completer = new QCompleter (_file_system_model, this);
+  QCompleter *completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
   setFocusProxy (_current_directory);
 }
 
 files_dock_widget::~files_dock_widget ()
 {
   QSettings *settings = resource_manager::get_settings ();
@@ -120,16 +125,23 @@ files_dock_widget::~files_dock_widget ()
   Qt::SortOrder sort_order = _file_tree_view->header ()->sortIndicatorOrder ();
   settings->setValue ("filesdockwidget/sort_files_by_column", sort_column);
   settings->setValue ("filesdockwidget/sort_files_by_order", sort_order);
   settings->setValue ("filesdockwidget/column_state", _file_tree_view->header ()->saveState ());
   settings->sync ();
 }
 
 void
+files_dock_widget::connect_visibility_changed (void)
+{
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility (bool)));
+}
+
+void
 files_dock_widget::item_double_clicked (const QModelIndex& index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
 
   set_current_directory (fileInfo.absoluteFilePath ());
 }
 
@@ -188,8 +200,27 @@ files_dock_widget::notice_settings (cons
   _file_tree_view->setColumnHidden (2, !settings->value ("showFileType",false).toBool ());
   _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified",false).toBool ());
   _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors",true).toBool ());
   if (settings->value ("showHiddenFiles",false).toBool ())
     {
       // TODO: React on option for hidden files.
     }
 }
+
+void
+files_dock_widget::focus (void)
+{
+  if (! isVisible ())
+    setVisible (true);
+
+  setFocus ();
+  activateWindow ();
+  raise ();
+}
+
+void
+files_dock_widget::handle_visibility (bool visible)
+{
+  if (visible && ! isFloating ())
+    focus ();
+}
+
diff --git a/libgui/src/files-dockwidget.h b/libgui/src/files-dockwidget.h
--- a/libgui/src/files-dockwidget.h
+++ b/libgui/src/files-dockwidget.h
@@ -41,21 +41,25 @@ along with Octave; see the file COPYING.
 
 /**
    \class files_dock_widget
    \brief Dock widget to display files in the current directory.
 */
 class files_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
-  public:
-  /** Constructs a new files_dock_widget. */
+
+public:
+
   files_dock_widget (QWidget *parent = 0);
+
   ~files_dock_widget ();
 
+  void connect_visibility_changed (void);
+
 public slots:
 
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void change_directory_up ();
 
@@ -65,16 +69,20 @@ public slots:
   /** Accepts user input a the line edit for the current directory. */
   void accept_directory_line_edit ();
 
   void display_directory (const QString& dir);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
+  void focus (void);
+
+  void handle_visibility (bool visible);
+
 signals:
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
 protected:
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -52,24 +52,27 @@ along with Octave; see the file COPYING.
 #include "version.h"
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "oct-env.h"
 
 main_window::main_window (QWidget *p)
   : QMainWindow (p), _workspace_model (), status_bar (),
-    command_window (this), history_window (this)
+    command_window (this), history_window (this),
+    file_browser_window (new files_dock_widget (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window ()
 {
+  delete file_browser_window;
+
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
   // attached to a non-existent parent.
 
   if (_octave_qt_event_listener)
     delete _octave_qt_event_listener;
 
   octave_link::connect_link (0);
@@ -78,19 +81,16 @@ main_window::~main_window ()
 #ifdef HAVE_QSCINTILLA
   if (_file_editor)
     delete _file_editor;
 #endif
 
   if (_documentation_dock_widget)
     delete _documentation_dock_widget;
 
-  if (_files_dock_widget)
-    delete _files_dock_widget;
-
   delete _workspace_view;
 }
 
 void
 main_window::focus_command_window (void)
 {
   command_window.focus ();
 }
@@ -285,17 +285,17 @@ main_window::change_directory (const QSt
   int index = _current_directory_combo_box->findText (dir);
 
   if (index >= 0)
     _current_directory_combo_box->removeItem (index);
 
   _current_directory_combo_box->insertItem (0, dir);
   _current_directory_combo_box->setCurrentIndex (0);
 
-  _files_dock_widget->display_directory (dir);
+  file_browser_window->display_directory (dir);
 }
 
 void
 main_window::browse_for_directory (void)
 {
   QString dir =
     QFileDialog::getExistingDirectory (this, tr ("Set working directory"));
 
@@ -342,29 +342,16 @@ main_window::accept_directory_line_edit 
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index < 0)
     set_current_working_directory (dir);
 }
 
 void
-main_window::focus_current_directory ()
-{
-  if (!_files_dock_widget->isVisible ())
-    {
-      _files_dock_widget->setVisible (true);
-    }
-
-  _files_dock_widget->setFocus ();
-  _files_dock_widget->activateWindow ();
-  _files_dock_widget->raise ();
-}
-
-void
 main_window::focus_workspace ()
 {
   if (!_workspace_view->isVisible ())
     {
       _workspace_view->setVisible (true);
     }
 
   _workspace_view->setFocus ();
@@ -391,24 +378,16 @@ main_window::focus_documentation ()
     }
 
   _documentation_dock_widget->setFocus ();
   _documentation_dock_widget->activateWindow ();
   _documentation_dock_widget->raise ();
 }
 
 void
-main_window::handle_current_directory_visible (bool visible)
-{
-  // if changed to visible and widget is not floating
-  if (visible && !_files_dock_widget->isFloating ())
-    focus_current_directory ();
-}
-
-void
 main_window::handle_workspace_visible (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && !_workspace_view->isFloating ())
     focus_workspace ();
 }
 
 void
@@ -588,25 +567,26 @@ main_window::write_settings ()
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed ()
 {
   command_window.connect_visibility_changed ();
   history_window.connect_visibility_changed ();
+  file_browser_window->connect_visibility_changed ();
 
   connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_workspace_visible (bool)));
-  connect (_files_dock_widget,    SIGNAL (visibilityChanged (bool)),
-           this,                  SLOT (handle_current_directory_visible (bool)));
+
 #ifdef HAVE_QSCINTILLA
   connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_editor_visible (bool)));
 #endif
+
   connect (_documentation_dock_widget,  SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_documentation_visible (bool)));
 }
 
 
 // Main subroutine of the constructor
 void
 main_window::construct ()
@@ -618,18 +598,16 @@ main_window::construct ()
   _workspace_view           = new workspace_view (this);
 
   _workspace_view->setModel (&_workspace_model);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
 
   connect (&_workspace_model, SIGNAL (model_changed ()),
            _workspace_view, SLOT (model_changed ()));
 
-  _files_dock_widget        = new files_dock_widget (this);
-  _files_dock_widget->setStatusTip (tr ("Browse your files."));
   _documentation_dock_widget= new documentation_dock_widget (this);
   _documentation_dock_widget->setStatusTip (tr ("See the documentation for help."));
 
   _current_directory_line_edit = new QLineEdit (this);
   _current_directory_combo_box = new QComboBox (this);
   _current_directory_combo_box->setFixedWidth (current_directory_width);
   _current_directory_combo_box->setEditable (true);
   // setLineEdit takes ownership -> no need to delete line_edit in ~main_window
@@ -984,18 +962,18 @@ main_window::construct ()
            _workspace_view,             SLOT   (setVisible (bool)));
   connect (_workspace_view,             SIGNAL (active_changed (bool)),
            show_workspace_action,       SLOT   (setChecked (bool)));
   connect (show_history_action,         SIGNAL (toggled (bool)),
            &history_window,             SLOT   (setVisible (bool)));
   connect (&history_window,             SIGNAL (active_changed (bool)),
            show_history_action,         SLOT   (setChecked (bool)));
   connect (show_file_browser_action,    SIGNAL (toggled (bool)),
-           _files_dock_widget,          SLOT   (setVisible (bool)));
-  connect (_files_dock_widget,          SIGNAL (active_changed (bool)),
+           file_browser_window,         SLOT   (setVisible (bool)));
+  connect (file_browser_window,         SIGNAL (active_changed (bool)),
            show_file_browser_action,    SLOT   (setChecked (bool)));
 #ifdef HAVE_QSCINTILLA
   connect (show_editor_action,          SIGNAL (toggled (bool)),
            _file_editor,                SLOT   (setVisible (bool)));
   connect (_file_editor,                SIGNAL (active_changed (bool)),
            show_editor_action,          SLOT   (setChecked (bool)));
 #endif
   connect (show_documentation_action,   SIGNAL (toggled (bool)),
@@ -1006,39 +984,39 @@ main_window::construct ()
   connect (command_window_action,       SIGNAL (triggered ()),
            &command_window,             SLOT (focus ()));
 
   connect (workspace_action,            SIGNAL (triggered ()),
            this,                        SLOT (focus_workspace ()));
   connect (history_action,              SIGNAL (triggered ()),
            &history_window,             SLOT (focus ()));
   connect (file_browser_action,         SIGNAL (triggered ()),
-           this,                        SLOT (focus_current_directory ()));
+           file_browser_window,         SLOT (focus ()));
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
   connect (ondisk_documentation_action, SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            _file_editor,                SLOT   (notice_settings (const QSettings *)));
 #endif
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            &command_window,             SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
-           _files_dock_widget,          SLOT   (notice_settings (const QSettings *)));
+           file_browser_window,         SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            this,                        SLOT   (notice_settings (const QSettings *)));
-  connect (_files_dock_widget,          SIGNAL (open_file (QString)),
+  connect (file_browser_window,         SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
-  connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
+  connect (file_browser_window,         SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (this,                        SIGNAL (relay_command_signal (const QString&)),
            &command_window,             SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
@@ -1073,17 +1051,17 @@ main_window::construct ()
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::RightDockWidgetArea, &command_window);
   addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
   tabifyDockWidget (&command_window, _documentation_dock_widget);
 #ifdef HAVE_QSCINTILLA
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
   tabifyDockWidget (&command_window, _file_editor);
 #endif
-  addDockWidget (Qt::LeftDockWidgetArea, _files_dock_widget);
+  addDockWidget (Qt::LeftDockWidgetArea, file_browser_window);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, &history_window);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
   if (win_x > 960)
     win_x = 960;
   if (win_y > 720)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -98,21 +98,19 @@ public slots:
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
-  void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
-  void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue ();
   void debug_step_into ();
@@ -157,31 +155,31 @@ private:
   workspace_model _workspace_model;
 
   // Toolbars.
   QStatusBar status_bar;
 
   // Subwindows.
   terminal_dock_widget command_window;
   history_dock_widget history_window;
+  files_dock_widget *file_browser_window;
 
 #ifdef HAVE_QSCINTILLA
   file_editor_interface *   _file_editor;
 #endif
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
   QAction *                 _debug_step_out;
   QAction *                 _debug_quit;
 
   // Dock widgets.
   workspace_view *          _workspace_view;
-  files_dock_widget *       _files_dock_widget;
   documentation_dock_widget*_documentation_dock_widget;
 
   // Toolbars.
   QComboBox *               _current_directory_combo_box;
   static const int        current_directory_width       = 300;
   static const int        current_directory_max_visible = 16;
   static const int        current_directory_max_count   = 16;
   QLineEdit *               _current_directory_line_edit;
