# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1314045127 -7200
#      Mon Aug 22 22:32:07 2011 +0200
# Node ID b643c51ca0f7981285bfd1de9227198fb8dec215
# Parent  c6574e6cc8a607d33fa1ebb965a23671682add98
Removed useless code.

diff --git a/gui/octave-gui.pro b/gui/octave-gui.pro
--- a/gui/octave-gui.pro
+++ b/gui/octave-gui.pro
@@ -81,17 +81,16 @@ SOURCES +=\
     src/backend/OctaveMainThread.cpp \
     src/qirc/IRCClientImpl.cpp
 
 HEADERS += \
         src/lexer/lexeroctavegui.h \
         src/terminal/Pty.h \
         src/terminal/kpty.h \
         src/terminal/kpty_p.h \
-		  src/terminal/kpty_export.h \
         src/terminal/kptyprocess.h \
         src/terminal/kprocess.h \
         src/terminal/kptydevice.h \
     	  src/MainWindow.h \
     	  src/OctaveTerminal.h \
     	  src/VariablesDockWidget.h \
     	  src/HistoryDockWidget.h \
     	  src/FilesDockWidget.h \
diff --git a/gui/src/terminal/Pty.cpp b/gui/src/terminal/Pty.cpp
--- a/gui/src/terminal/Pty.cpp
+++ b/gui/src/terminal/Pty.cpp
@@ -14,17 +14,16 @@
 
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
 // Own
-#include "kprocess_p.h"
 #include "kptyprocess.h"
 #include "Pty.h"
 
 // System
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 #include <errno.h>
@@ -32,171 +31,55 @@
 #include <signal.h>
 
 // Qt
 #include <QtCore/QStringList>
 
 #include "kpty.h"
 #include "kptydevice.h"
 
-
-void
-Pty::setWindowSize (int lines, int cols)
-{
-  _windowColumns = cols;
-  _windowLines = lines;
-
-  if (pty ()->masterFd () >= 0)
-    pty ()->setWinSize (lines, cols);
-}
-
-QSize
-Pty::windowSize () const
-{
-  return QSize (_windowColumns, _windowLines);
-}
-
-void
-Pty::setFlowControlEnabled (bool enable)
-{
-  _xonXoff = enable;
-
-  if (pty ()->masterFd () >= 0)
-    {
-      struct::termios ttmode;
-      pty ()->tcGetAttr (&ttmode);
-      if (!enable)
-	ttmode.c_iflag &= ~(IXOFF | IXON);
-      else
-	ttmode.c_iflag |= (IXOFF | IXON);
-      pty()->tcSetAttr(&ttmode);
-    }
-}
-
-bool
-Pty::flowControlEnabled () const
-{
-  if (pty ()->masterFd () >= 0)
-    {
-      struct::termios ttmode;
-      pty ()->tcGetAttr (&ttmode);
-      return ttmode.c_iflag & IXOFF && ttmode.c_iflag & IXON;
-    }
-  return false;
-}
-
-void
-Pty::setUtf8Mode (bool enable)
-{
-#ifdef IUTF8
-  _utf8 = enable;
-
-  if (pty ()->masterFd () >= 0)
-    {
-      struct::termios ttmode;
-      pty ()->tcGetAttr (&ttmode);
-      if (!enable)
-	ttmode.c_iflag &= ~IUTF8;
-      else
-	ttmode.c_iflag |= IUTF8;
-      pty()->tcSetAttr(&ttmode);
-    }
-#endif
-}
-
-void
-Pty::setErase (char erase)
-{
-  _eraseChar = erase;
-
-  if (pty ()->masterFd () >= 0)
-    {
-      struct::termios ttmode;
-      pty ()->tcGetAttr (&ttmode);
-      ttmode.c_cc[VERASE] = erase;
-      pty()->tcSetAttr(&ttmode);
-    }
-}
-
-char
-Pty::erase () const
-{
-  if (pty ()->masterFd () >= 0)
-    {
-      struct::termios ttyAttributes;
-      pty ()->tcGetAttr (&ttyAttributes);
-      return ttyAttributes.c_cc[VERASE];
-    }
-
-  return _eraseChar;
-}
-
 int
 Pty::start (const QString & program,
             const QStringList & programArguments)
 {
   clearProgram ();
   setProgram (program.toLatin1 (), programArguments.mid (1));
 
   struct::termios ttmode;
   pty ()->tcGetAttr (&ttmode);
   if (!_xonXoff)
     ttmode.c_iflag &= ~(IXOFF | IXON);
   else
     ttmode.c_iflag |= (IXOFF | IXON);
-#ifdef IUTF8			// XXX not a reasonable place to check it.
-  if (!_utf8)
-    ttmode.c_iflag &= ~IUTF8;
-  else
-    ttmode.c_iflag |= IUTF8;
-#endif
 
-  if (_eraseChar != 0)
-    ttmode.c_cc[VERASE] = _eraseChar;
 
   pty ()->tcSetAttr(&ttmode);
-  pty ()->setWinSize (_windowLines, _windowColumns);
 
   KProcess::start ();
 
   if (!waitForStarted ())
     return -1;
   return 0;
 }
 
-void
-Pty::setWriteable (bool writeable)
-{
-  struct stat sbuf;
-  ::stat (pty ()->ttyName (), &sbuf);
-  if (writeable)
-    chmod (pty ()->ttyName (), sbuf.st_mode | S_IWGRP);
-  else
-    chmod (pty ()->ttyName (), sbuf.st_mode & ~(S_IWGRP | S_IWOTH));
-}
-
 Pty::Pty (int masterFd, QObject * parent):
 KPtyProcess (masterFd, parent)
 {
   init ();
 }
 
 Pty::Pty (QObject * parent):KPtyProcess (parent)
 {
   init ();
 }
 
 void
 Pty::init ()
 {
-  _windowColumns = 0;
-  _windowLines = 0;
-  _eraseChar = 0;
   _xonXoff = true;
-  _utf8 = true;
 
   connect (pty (), SIGNAL (readyRead ()), this, SLOT (dataReceived ()));
   setPtyChannels (KPtyProcess::AllChannels);
 }
 
 Pty::~Pty ()
 {
 }
diff --git a/gui/src/terminal/Pty.h b/gui/src/terminal/Pty.h
--- a/gui/src/terminal/Pty.h
+++ b/gui/src/terminal/Pty.h
@@ -25,33 +25,31 @@
 
 // Qt
 #include <QtCore/QStringList>
 #include <QtCore/QVector>
 #include <QtCore/QList>
 #include <QtCore/QSize>
 
 // KDE
-#include "kprocess.h"
 #include "kptyprocess.h"
 
 /**
  * The Pty class is used to start the terminal process, 
  * send data to it, receive data from it and manipulate 
  * various properties of the pseudo-teletype interface
  * used to communicate with the process.
  *
  * To use this class, construct an instance and connect
  * to the sendData slot and receivedData signal to
  * send data to or receive data from the process.
  *
  * To start the terminal process, call the start() method
  * with the program name and appropriate arguments. 
  */
-//class KONSOLEPRIVATE_EXPORT Pty: public KPtyProcess
 class Pty:public KPtyProcess
 {
 Q_OBJECT public:
 
     /** 
      * Constructs a new Pty.
      * 
      * Connect to the sendData() slot and receivedData() signal to prepare
@@ -80,50 +78,17 @@ Q_OBJECT public:
      * @param arguments Arguments to pass to the program being started
      * @param environment A list of key=value pairs which will be added
      * to the environment for the new process.  At the very least this
      * should include an assignment for the TERM environment variable.
      */
   int start (const QString & program,
              const QStringList & arguments);
 
-    /** TODO: Document me */
-  void setWriteable (bool writeable);
-
-    /** 
-     * Enables or disables Xon/Xoff flow control.  The flow control setting
-     * may be changed later by a terminal application, so flowControlEnabled()
-     * may not equal the value of @p on in the previous call to setFlowControlEnabled()
-     */
-  void setFlowControlEnabled (bool on);
-
-    /** Queries the terminal state and returns true if Xon/Xoff flow control is enabled. */
-  bool flowControlEnabled () const;
-
-    /** 
-     * Sets the size of the window (in lines and columns of characters) 
-     * used by this teletype.
-     */
-  void setWindowSize (int lines, int cols);
-
-    /** Returns the size of the window used by this teletype.  See setWindowSize() */
-  QSize windowSize () const;
-
-    /** TODO Document me */
-  void setErase (char erase);
-
-    /** */
-  char erase () const;
-
   public slots:
-    /**
-     * Put the pty into UTF-8 mode on systems which support it.
-     */
-  void setUtf8Mode (bool on);
-
     /** 
      * Sends data to the process currently controlling the 
      * teletype ( whose id is returned by foregroundProcessGroup() )
      *
      */
   void sendData (const QByteArray& data);
 
     signals:
@@ -132,23 +97,18 @@ Q_OBJECT public:
      * the teletype.
      *
      */
   void receivedData (const QByteArray& data);
 
 protected:
   void setupChildProcess ();
 
-  private slots:
-    // called when data is received from the terminal process 
+private slots:
+  // called when data is received from the terminal process
   void dataReceived ();
 
 private:
   void init ();
-
-  int _windowColumns;
-  int _windowLines;
-  char _eraseChar;
   bool _xonXoff;
-  bool _utf8;
 };
 
 #endif // PTY_H
diff --git a/gui/src/terminal/kpty_export.h b/gui/src/terminal/kpty_export.h
deleted file mode 100644
--- a/gui/src/terminal/kpty_export.h
+++ /dev/null
@@ -1,46 +0,0 @@
-/*  This file is part of the KDE project
-    Copyright (C) 2007 David Faure <faure@kde.org>
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#ifndef KPTY_EXPORT_H
-#define KPTY_EXPORT_H
-
-/* needed for KDE_EXPORT and KDE_IMPORT macros */
-//#include <kdemacros.h>
-#include <QtCore/qglobal.h>
-#define KDE_EXPORT
-#define KDE_IMPORT
-
-#ifndef KPTY_EXPORT
-#if defined(KDELIBS_STATIC_LIBS)
-   /* No export/import for static libraries */
-#define KPTY_EXPORT
-#elif defined(MAKE_KDECORE_LIB)
-   /* We are building this library */
-#define KPTY_EXPORT KDE_EXPORT
-#else
-   /* We are using this library */
-#define KPTY_EXPORT KDE_IMPORT
-#endif
-#endif
-
-#ifndef KPTY_EXPORT_DEPRECATED
-#define KPTY_EXPORT_DEPRECATED KDE_DEPRECATED KPTY_EXPORT
-#endif
-
-#endif
diff --git a/gui/src/terminal/kptydevice.h b/gui/src/terminal/kptydevice.h
--- a/gui/src/terminal/kptydevice.h
+++ b/gui/src/terminal/kptydevice.h
@@ -33,17 +33,17 @@ struct KPtyDevicePrivate;
     inline Class##Private* d_func() { return reinterpret_cast<Class##Private *>(SuperClass::d_ptr); } \
     inline const Class##Private* d_func() const { return reinterpret_cast<const Class##Private *>(SuperClass::d_ptr); } \
     friend class Class##Private;
 
 /**
  * Encapsulates KPty into a QIODevice, so it can be used with Q*Stream, etc.
  */
 class KPtyDevice:public QIODevice, public KPty
-{				//krazy:exclude=dpointer (via macro)
+{
 Q_OBJECT Q_DECLARE_PRIVATE_MI (KPtyDevice, KPty) public:
 
     /**
      * Constructor
      */
   KPtyDevice (QObject * parent = 0);
 
     /**
diff --git a/gui/src/terminal/kptyprocess.h b/gui/src/terminal/kptyprocess.h
--- a/gui/src/terminal/kptyprocess.h
+++ b/gui/src/terminal/kptyprocess.h
@@ -18,17 +18,16 @@
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef KPTYPROCESS_H
 #define KPTYPROCESS_H
 
 #include "kprocess.h"
-#include "kprocess_p.h"
 #include "kptydevice.h"
 
 class KPtyDevice;
 class KPtyProcess;
 struct KPtyProcessPrivate;
 
 /**
  * This class extends KProcess by support for PTYs (pseudo TTYs).
