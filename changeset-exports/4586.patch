# HG changeset patch
# User jwe
# Date 1068273137 0
#      Sat Nov 08 06:32:17 2003 +0000
# Node ID 7e08de0d1a98a1157cf08aeb4e802821ad63d588
# Parent  a1ac9ab474a1a086512079ce27d59534c9988bfd
[project @ 2003-11-08 06:32:17 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1733,19 +1733,19 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
   idx_orig_dims.resize (idx_orig_dimsXXX.length ());
 
   for (int i = 0; i < idx_orig_dimsXXX.length (); i++)
     idx_orig_dims(i) = idx_orig_dimsXXX(i);
 
   if (ra_idx.is_colon ())
     {
-      dim_vector idx (orig_len);
-
-      retval = Array<T> (*this, idx);
+      dim_vector iidx (orig_len);
+
+      retval = Array<T> (*this, iidx);
     }
   else if (length () == 1)
     {
       // Only one element in array.
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       if (tmp.length () != 0)
@@ -1860,28 +1860,28 @@ Array<T>::indexN (idx_vector& ra_idx, in
       // i.e. A(8) for A(3x3x3)
 
       ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
         {
 	  int r_idx = ra_idx(0);
 
-          Array<int> idx = get_ra_idx (r_idx, dims ());
+          Array<int> iidx = get_ra_idx (r_idx, dims ());
 
           dim_vector new_dims (1);
 
 	  // This shouldn't be needed.
 
-	  Array<int> e (idx.length ());
-
-	  for (int i = 0; i < idx.length();i++)
-	    e(i) = idx(i);
-
-	  // Should be able to call elem (idx).
+	  Array<int> e (iidx.length ());
+
+	  for (int i = 0; i < iidx.length();i++)
+	    e(i) = iidx(i);
+
+	  // Should be able to call elem (iidx).
 
           retval = Array<T> (new_dims, elem (e));
 	}
     }
   else
     (*current_liboctave_error_handler)
       ("single index only valid for row or column vector. ra_idx.cap () = &d",
        ra_idx.capacity ());
