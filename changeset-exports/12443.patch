# HG changeset patch
# User Konstantinos Poulios <logari81@googlemail.com>
# Date 1297629438 -3600
#      Sun Feb 13 21:37:18 2011 +0100
# Node ID 24b38afd6a459b5ece2ba943e36cee741f7a7f37
# Parent  278902427e875ab3cae438262fc8e1aed16d5773
fix plotyy bugs #31800, #32211

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2011-02-13  Konstantinos Poulios  <logari81@googlemail.com>
+
+	Bugs #31800, #32211.
+
+	* gl-render.cc (opengl_renderer::draw_axes_boxes): Draw only one
+	y-axis line when plotyy tag is present.
+	(opengl_renderer::draw_text): Remove superfluous calls of set_font
+	and set_color.
+	* graphics.h.in (class text::properties): Tag color with "u"
+	qualifier.
+	(text::properties::update_color): New function.
+
 2011-02-13  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* graphics.h.in (axes::properties::update_boundingbox,
 	axes::properties::update_dataaspectratio,
 	axes::properties::update_dataaspectratiomode,
 	axes::properties::update_plotboxaspectratio,
 	axes::properties::update_plotboxaspectratiomode):
 	Replace update_transform hooks with sync_positions. 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -844,16 +844,18 @@ opengl_renderer::draw_axes_boxes (const 
   double zPlaneN = props.get_zPlaneN ();
   double xpTick = props.get_xpTick ();
   double ypTick = props.get_ypTick ();
   double zpTick = props.get_zpTick ();
   double xpTickN = props.get_xpTickN ();
   double ypTickN = props.get_ypTickN ();
   double zpTickN = props.get_zpTickN ();
 
+  bool plotyy = (props.get_tag () == "plotyy");
+
   // Axes box
 
   set_linestyle ("-", true);
   set_linewidth (props.get_linewidth ());
 
   if (props.is_visible ())
     {
       glBegin (GL_LINES);
@@ -873,17 +875,17 @@ opengl_renderer::draw_axes_boxes (const 
           glVertex3d (xPlane, ypTick, zpTickN);
         }
 
       // Y box
       set_color (props.get_ycolor_rgb ());
       glVertex3d (xpTick, yPlaneN, zpTick);
       glVertex3d (xpTick, yPlane, zpTick);
 
-      if (props.is_box ())
+      if (props.is_box () && ! plotyy)
         {
           glVertex3d (xpTickN, yPlaneN, zpTick);
           glVertex3d (xpTickN, yPlane, zpTick);
           glVertex3d (xpTickN, yPlaneN, zpTickN);
           glVertex3d (xpTickN, yPlane, zpTickN);
           glVertex3d (xpTick, yPlaneN, zpTickN);
           glVertex3d (xpTick, yPlane, zpTickN);
         }
@@ -2393,19 +2395,16 @@ opengl_renderer::draw_hggroup (const hgg
 }
 
 void
 opengl_renderer::draw_text (const text::properties& props)
 {
   if (props.get_string ().empty ())
     return;
 
-  set_font (props);
-  set_color (props.get_color_rgb ());
-
   const Matrix pos = xform.scale (props.get_data_position ());
   const Matrix bbox = props.get_extent_matrix ();
 
   // FIXME: handle margin and surrounding box
   bool blend = glIsEnabled (GL_BLEND);
 
   glEnable (GL_BLEND);
   glEnable (GL_ALPHA_TEST);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3639,17 +3639,17 @@ public:
     // properties declarations.
 
     BEGIN_PROPERTIES (text)
       string_property string u , ""
       radio_property units u , "{data}|pixels|normalized|inches|centimeters|points"
       array_property position mu , Matrix (1, 3, 0.0)
       double_property rotation mu , 0
       radio_property horizontalalignment mu , "{left}|center|right"
-      color_property color , color_values (0, 0, 0)
+      color_property color u , color_values (0, 0, 0)
       string_property fontname u , OCTAVE_DEFAULT_FONTNAME
       double_property fontsize u , 10
       radio_property fontangle u , "{normal}|italic|oblique"
       radio_property fontweight u , "light|{normal}|demi|bold"
       radio_property interpreter u , "{tex}|none|latex"
       color_property backgroundcolor , "{none}"
       string_property displayname , ""
       color_property edgecolor , "{none}"
@@ -3722,16 +3722,17 @@ public:
     void request_autopos (void);
     void update_positionmode (void) { request_autopos (); }
     void update_rotationmode (void) { request_autopos (); }
     void update_horizontalalignmentmode (void) { request_autopos (); }
     void update_verticalalignmentmode (void) { request_autopos (); }
 
     void update_string (void) { request_autopos (); update_text_extent (); }
     void update_rotation (void) { update_text_extent (); }
+    void update_color (void) { update_text_extent (); }
     void update_fontname (void) { update_text_extent (); }
     void update_fontsize (void) { update_text_extent (); }
     void update_fontangle (void) { update_text_extent (); }
     void update_fontweight (void) { update_text_extent (); }
     void update_interpreter (void) { update_text_extent (); }
     void update_horizontalalignment (void) { update_text_extent (); }
     void update_verticalalignment (void) { update_text_extent (); }
 
