# HG changeset patch
# User dbateman
# Date 1179781554 0
#      Mon May 21 21:05:54 2007 +0000
# Node ID 81eb28d50cee660e03279715f055638304c90bc3
# Parent  004561c38e8fe1a4334ed04c0f474d7db6eb1398
[project @ 2007-05-21 21:05:54 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,31 @@
+2007-05-21  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m: Add rebuild target, and -local, -global option to
+	force installation location.
+	(rebuild): New subfunction to rebuild package database from
+	installed packages. Also allows changing of autoload status
+	(install): Warn use if attempting to install from non existent
+	file. 
+	(issuperuser): Use 'geteuid() == 0' instead of 'strcmp (getenv(
+	"USER", "root"))' for root test.
+
+2007-05-21  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* miscellaneous/copyfile.m: check for cp.exe on Windows platforms
+	and replace "\" characters with "/".
+	* pkg/pkg.m: Use shell rather than system throughout. Replace "\" 
+	characters with "/" throughout.
+	(shell): New subfunction that wraps system and is careful with the
+	shell on windows platforms.
+	(configure_make): Explictly pass complier etc to configure
+	process.
+	(issuperuser): Force default to global install for Windows machines.
+	
 2007-05-19  Kristan Onu
 
 	* plot/Makefile.in (SOURCES): Remove hbar.m and add barh.m.
 
 2007-05-18  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (install): More verbosity. 
 	(configure_make): Ditto.
diff --git a/scripts/miscellaneous/copyfile.m b/scripts/miscellaneous/copyfile.m
--- a/scripts/miscellaneous/copyfile.m
+++ b/scripts/miscellaneous/copyfile.m
@@ -35,17 +35,17 @@ function [status, msg, msgid] = copyfile
 
   status = true;
   msg = "";
   msgid = "";
 
   ## FIXME -- maybe use the same method as in ls to allow users control
   ## over the command that is executed.
 
-  if (ispc () && ! isunix () && isempty (file_in_path (EXEC_PATH, "cp")))
+  if (ispc () && ! isunix () && isempty (file_in_path (EXEC_PATH, "cp.exe")))
     ## Windows.
     cmd = "cmd /C xcopy /E";
     cmd_force_flag = "/Y";
   else
     cmd = "cp -r";
     cmd_force_flag = "-f";
   endif
 
@@ -68,16 +68,21 @@ function [status, msg, msgid] = copyfile
       f1 = cellstr (f1);
     endif
     
     ## Protect the file name(s).
     f1 = glob (f1);
     f1 = sprintf ("\"%s\" ", f1{:});
 
     f2 = tilde_expand (f2);
+  
+    if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
+      f1 = strrep (f1, "\\", "/");
+      f2 = strrep (f2, "\\", "/");
+    endif
 
     ## Copy the files.
     [err, msg] = system (sprintf ("%s %s \"%s\"", cmd, f1, f2));
     if (err < 0)
       status = false;
       msgid = "copyfile";
     endif
   else
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -27,31 +27,45 @@
 ## @item install
 ## Install named packages.  For example,
 ## @example
 ## pkg install image-1.0.0.tar.gz
 ## @end example
 ## @noindent
 ## installs the package found in the file @code{image-1.0.0.tar.gz}.
 ##
-## If @var{option} is @code{-nodeps} the package manager will disable the
-## dependency checking. That way it is possible to install a package even
-## if it depends on another package that's not installed on the system.
-## @strong{Use this option with care.}
+## The @var{option} variable can contain options that affect the manner
+## in which a package is installed. These options can be one or more of
+##
+## @table @code
+## @item -nodeps
+## The package manager will disable the dependency checking. That way it 
+## is possible to install a package even if it depends on another package 
+## that's not installed on the system. @strong{Use this option with care.}
+##
+## @item -noauto
+## The package manager will not automatically load the installed package 
+## when starting Octave, even if the package requests that it is.
 ##
-## If @var{option} is @code{-noauto} the package manager will not
-## automatically load the installed package when starting Octave,
-## even if the package requests that it is.
+## @item -auto
+## The package manager will automatically load the installed package when 
+## starting Octave, even if the package requests that it isn't.
+##
+## @item -local
+## A local installation is forced, even if the user has system privileges.
 ##
-## If @var{option} is @code{-auto} the package manager will
-## automatically load the installed package when starting Octave,
-## even if the package requests that it isn't.
+## @item -global
+## A global installation is forced, even if the user doesn't normally have
+## system privileges
 ##
-## Finally, if @var{option} is @code{-verbose} the package manager will
-## print the output of all of the commands that are performed
+## @item -verbose
+## The package manager will print the output of all of the commands that are 
+## performed.
+## @end table
+##
 ## @item uninstall
 ## Uninstall named packages.  For example,
 ## @example
 ## pkg uninstall image
 ## @end example
 ## @noindent
 ## removes the @code{image} package from the system. If another installed
 ## package depends on the @code{image} package an error will be issued.
@@ -119,38 +133,51 @@
 ## typically available to all users. For example
 ## @example
 ## pkg global_list /usr/share/octave/octave_packages
 ## @end example
 ## It is possible to get the current value of global_list with the following
 ## @example
 ## pkg global_list
 ## @end example
+## @item rebuild
+## Rebuilds the package database from the installed directories. This can 
+## be used in cases where for some reason the package database is corrupted.
+## It can also take the @code{-auto} and @code{-noauto} options to allow the
+## autolaoding state of a package to be changed. For example
+##
+## @example
+## pkg rebuild -noauto image
+## @end example
+##
+## will remove the autoloading status of the image package.
 ## @end table
 ## @end deftypefn
 
 ## PKG_ADD: mark_as_command pkg
 ## PKG_ADD: pkg ("load", "auto");
 
 function [local_packages, global_packages] = pkg (varargin)
   ## Installation prefix (XXX: what should these be on windows?)
+  persistent user_prefix = false;
   persistent prefix = -1;
   persistent local_list = tilde_expand (fullfile("~", ".octave_packages"));
   persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave",
 				     "octave_packages");
   mlock ();
 
+  global_install = issuperuser ();
   if (prefix == -1)
-    if (issuperuser ())
+    if (global_install)
       prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
     else
       prefix = fullfile ("~", "octave");
     endif
+    prefix = tilde_expand (prefix);
   endif
-  prefix = tilde_expand (prefix);
 
   ## Handle input
   if (length (varargin) == 0 || ! iscellstr (varargin))
     print_usage ();
   endif
   files = {};
   deps = true;
   auto = 0;
@@ -161,18 +188,28 @@ function [local_packages, global_package
       case "-nodeps"
 	deps = false;
       case "-noauto"
 	auto = -1;
       case "-auto"
 	auto = 1;
       case "-verbose"
 	verbose = true;
+      case "-local"
+	global_install = false;
+	if (! user_prefix)
+	  prefix = fullfile ("~", "octave");
+	endif
+      case "-global"
+	global_install = true;
+	if (! user_prefix)
+	  prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
+	endif
       case {"list", "install", "uninstall", "load", "unload", ...
-	    "prefix", "local_list", "global_list"}
+	    "prefix", "local_list", "global_list", "rebuild"}
 	action = varargin{i};
       otherwise
 	files{end+1} = varargin{i};
     endswitch
   endfor
 
   ## Take action
   switch (action)
@@ -187,23 +224,25 @@ function [local_packages, global_package
       else
 	error ("too many output arguments requested");
       endif
 
     case "install"
       if (length (files) == 0)
 	error ("you must specify at least one filename when calling 'pkg install'");
       endif
-      install (files, deps, auto, prefix, verbose, local_list, global_list);
+      install (files, deps, auto, prefix, verbose, local_list, 
+	       global_list, global_install);
 
     case "uninstall"
       if (length (files) == 0)
 	error ("you must specify at least one package when calling 'pkg uninstall'");
       endif
-      uninstall (files, deps, verbose, local_list, global_list);
+      uninstall (files, deps, verbose, local_list, 
+		 global_list, global_install);
 
     case "load"
       if (length (files) == 0)
 	error ("you must specify at least one package, 'all' or 'auto' when calling 'pkg load'");
       endif
       load_packages (files, deps, local_list, global_list);
 
     case "unload"
@@ -217,16 +256,18 @@ function [local_packages, global_package
 	disp (prefix);
       elseif (length (files) == 0 && nargout == 1)
 	local_packages = prefix;
       elseif (length (files) == 1 && nargout == 0 && ischar (files{1}))
 	prefix = files{1};
 	## if (!strcmp(prefix(end), filesep))
 	##   prefix(end+1) = filesep;
 	## endif
+	prefix = tilde_expand (prefix);
+	user_prefix = true;
       else
 	error ("you must specify a prefix directory, or request an output argument");
       endif
 
     case "local_list"
       if (length (files) == 0 && nargout == 0)
 	disp (local_list);
       elseif (length (files) == 0 && nargout == 1)
@@ -242,37 +283,119 @@ function [local_packages, global_package
 	disp(global_list);
       elseif (length (files) == 0 && nargout == 1)
 	local_packages = global_list;
       elseif (length (files) == 1 && nargout == 0 && ischar (files{1}))
 	global_list = files{1};
       else
 	error ("you must specify a global_list file, or request an output argument");
       endif
+
+    case "rebuild"
+      if (global_install)
+	global_packages = rebuild (prefix, global_list, auto, verbose);
+	save (global_list, "global_packages");
+	local_packages = global_packages;
+      else
+	local_packages = rebuild (prefix, local_list, files, auto, verbose);
+	save (local_list, "local_packages");
+      endif
+
     otherwise
       error ("you must specify a valid action for 'pkg'. See 'help pkg' for details");
   endswitch
 endfunction
 
+function descriptions = rebuild (prefix, list, files, auto, verbose)
+  if (isempty (files))
+    [dirlist, err, msg] = readdir (prefix);
+    if (err)
+      error ("couldn't read directory %s: %s", prefix, msg);
+    endif
+    ## the two first entries of dirlist are "." and ".."
+    dirlist([1,2]) = [];
+  else
+    old_descriptions = installed_packages (list, list);
+    wd = pwd ();
+    cd (prefix);
+    dirlist = glob (cellfun(@(x) [x, '-*'], files, 'UniformOutput', 0))
+    cd (wd);
+  endif
+  descriptions = {};
+  for k = 1:length (dirlist)
+    descfile = fullfile (prefix, dirlist{k}, "packinfo", "DESCRIPTION");
+    if (verbose)
+      printf ("recreating package description from %s\n", dirlist{k});
+    endif
+    if (exist (descfile, "file"))
+      desc = get_description (descfile);
+      desc.dir = fullfile (prefix, dirlist{k});
+      if (auto != 0)
+	if (exist (fullfile (desc.dir, "packinfo", ".autoload"), "file"))
+	  unlink (fullfile (desc.dir, "packinfo", ".autoload"));
+	endif
+        if (auto < 0)
+	  desc.autoload = 0;
+	elseif (auto > 0)
+	  desc.autoload = 1;
+	  fclose (fopen (fullfile (desc.dir, "packinfo", ".autoload"), "wt"));
+	endif
+      else
+	if (exist (fullfile (desc.dir, "packinfo", ".autoload"), "file"))
+	  desc.autoload = 1;
+	else
+	  desc.autoload = 0;
+	endif
+      endif
+      descriptions{end + 1} = desc;
+    elseif (verbose)
+      warning ("directory %s is not a valid package", dirlist{k});
+    endif
+  endfor
+
+  if (isempty (files))
+    ## We are rebuilding for a particular package(s) so we should take
+    ## care to keep the other untouched packages in the descriptions
+    descriptions = {desriptions{:}, old_desriptions{:}};
+
+    dup = [];
+    for i = 1:length (descriptions)
+      if (find (dup, i))
+	continue;
+      endif
+      for j = (i+1):length (descriptions)
+	if (find (dup, j))
+	  continue;
+	endif
+	if (strcmp (descriptions{i}.name, descriptions{j}.name))
+	  dup = [dup, j];
+	endif
+      endfor
+    endfor
+    if (! isempty (dup))
+      descriptions (dup) = [];
+    endif  
+  endif
+endfunction
+
 function auto = isautoload (desc)
 auto = false;
 if (isfield (desc{1}, "autoload"))
   a = desc{1}.autoload;
   if ((isnumeric (a) && a > 0)
       || (ischar (a) && (strcmpi (a, "true")
 			 || strcmpi (a, "on")
 			 || strcmpi (a, "yes")
 			 || strcmpi (a, "1"))))
     auto = true;
   endif
 endif
 endfunction
 
-function install (files, handle_deps, autoload, prefix, verbose, local_list, global_list)
-  global_install = issuperuser ();
+function install (files, handle_deps, autoload, prefix, verbose, local_list, global_list, global_install)
 
   # Check that the directory in prefix exist. If it doesn't: create it!
   if (! exist (prefix, "dir"))
     warning ("creating installation directory %s", prefix);
     [status, msg] = mkdir (prefix);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
     endif
@@ -294,76 +417,80 @@ function install (files, handle_deps, au
   tmpdirs = packdirs = descriptions = {};
   try
     ## Unpack the package files and read the DESCRIPTION files
     files = glob (files);
     packages_to_uninstall = [];
     for i = 1:length (files)
       tgz = files{i};
 
-      ## Create a temporary directory 
-      tmpdir = tmpnam ();
-      tmpdirs{end+1} = tmpdir;
-      if (verbose)
-	printf ("mkdir (%s)\n", tmpdir);
-      endif
-      [status, msg] = mkdir (tmpdir);
-      if (status != 1)
-	error ("couldn't create temporary directory: %s", msg);
-      endif
-
-      ## Uncompress the package
-      if (verbose)
-	printf ("untar (%s, %s)\n", tgz, tmpdir);
-      endif
-      untar (tgz, tmpdir);
+      if (exist (tgz, "file"))
+	## Create a temporary directory 
+	tmpdir = tmpnam ();
+	tmpdirs{end+1} = tmpdir;
+        if (verbose)
+	  printf ("mkdir (%s)\n", tmpdir);
+	endif
+	[status, msg] = mkdir (tmpdir);
+	if (status != 1)
+	  error ("couldn't create temporary directory: %s", msg);
+	endif
 
-      ## Get the name of the directories produced by tar
-      [dirlist, err, msg] = readdir (tmpdir);
-      if (err)
-	error ("couldn't read directory produced by tar: %s", msg);
-      endif
-
-      if (length (dirlist) > 3)
-	error ("bundles of packages are not allowed")
-      endif
+	## Uncompress the package
+	if (verbose)
+	  printf ("untar (%s, %s)\n", tgz, tmpdir);
+	endif
+	untar (tgz, tmpdir);
 
-      ## the two first entries of dirlist are "." and ".."
-      for k = 3:length (dirlist)
-	packdir = fullfile (tmpdir, dirlist{k});
-	packdirs{end+1} = packdir;
-
-	## Make sure the package contains necessary files
-	verify_directory (packdir);
+	## Get the name of the directories produced by tar
+	[dirlist, err, msg] = readdir (tmpdir);
+	if (err)
+	  error ("couldn't read directory produced by tar: %s", msg);
+	endif
 
-	## Read the DESCRIPTION file
-	filename = fullfile (packdir, "DESCRIPTION");
-	desc = get_description (filename);
-
-	## Verify that package name corresponds with filename
-	[dummy, nm] = fileparts (tgz); 
-	if ((length (nm) >= length (desc.name))
-	    && ! strcmp (desc.name, nm(1:length(desc.name))))
-	  error ("package name '%s' doesn't correspond to its filename '%s'", desc.name, nm);
+	if (length (dirlist) > 3)
+	  error ("bundles of packages are not allowed")
 	endif
 
-	## Set default installation directory
-	desc.dir = fullfile (prefix, strcat (desc.name, "-", desc.version));
+	## the two first entries of dirlist are "." and ".."
+	for k = 3:length (dirlist)
+	  packdir = fullfile (tmpdir, dirlist{k});
+	  packdirs{end+1} = packdir;
 
-	## Save desc
-	descriptions{end+1} = desc;
+	  ## Make sure the package contains necessary files
+	  verify_directory (packdir);
+
+	  ## Read the DESCRIPTION file
+	  filename = fullfile (packdir, "DESCRIPTION");
+	  desc = get_description (filename);
 
-	## Are any of the new packages already installed?
-	## If so we'll remove the old version.
-	for j = 1:length (packages)
-	  if (strcmp (packages{j}.name, desc.name))
-	    packages_to_uninstall(end+1) = j;
+	  ## Verify that package name corresponds with filename
+	  [dummy, nm] = fileparts (tgz); 
+	  if ((length (nm) >= length (desc.name))
+	      && ! strcmp (desc.name, nm(1:length(desc.name))))
+	    error ("package name '%s' doesn't correspond to its filename '%s'", desc.name, nm);
 	  endif
-	endfor
-      endfor        
+
+	  ## Set default installation directory
+	  desc.dir = fullfile (prefix, strcat (desc.name, "-", desc.version));
+
+	  ## Save desc
+	  descriptions{end+1} = desc;
+
+	  ## Are any of the new packages already installed?
+	  ## If so we'll remove the old version.
+	  for j = 1:length (packages)
+	    if (strcmp (packages{j}.name, desc.name))
+	      packages_to_uninstall(end+1) = j;
+	    endif
+	  endfor
+	endfor        
+      else
+	warning ("file %s does not exist", tgz);
+      endif
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     error (lasterr()(8:end));
   end_try_catch
@@ -411,17 +538,17 @@ function install (files, handle_deps, au
     endfor
     error (lasterr()(8:end));
   end_try_catch
 
   ## Uninstall the packages that will be replaced
   try
     for i = packages_to_uninstall
       uninstall ({installed_packages{i}.name}, false, verbose, local_list, 
-		 global_list);
+		 global_list, global_install);
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     error (lasterr()(8:end));
   end_try_catch
@@ -509,38 +636,39 @@ function install (files, handle_deps, au
       if (exist (fullfile (descriptions{i}.dir, arch), "dir"))
 	dirs{end + 1} = fullfile (descriptions{i}.dir, arch);
       endif
     endfor
     addpath (dirs{:});
   endif
 endfunction
 
-function uninstall (pkgnames, handle_deps, verbose, local_list, global_list)
+function uninstall (pkgnames, handle_deps, verbose, local_list, 
+		    global_list, global_install)
   ## Get the list of installed packages
   [local_packages, global_packages] = installed_packages(local_list, 
 							 global_list);
-  if (issuperuser ())
+  if (global_install)
     installed_packages = {local_packages{:}, global_packages{:}};
   else
     installed_packages = local_packages;
   endif
 
   num_packages = length (installed_packages);
   delete_idx = [];
   for i = 1:num_packages
     cur_name = installed_packages{i}.name;
     if (any (strcmp (cur_name, pkgnames)))
       delete_idx(end+1) = i;
     endif
   endfor
 
   ## Are all the packages that should be uninstalled already installed?
   if (length (delete_idx) != length (pkgnames))
-    if (issuperuser ())
+    if (global_install)
       ## Try again for a locally installed package
       installed_packages = local_packages
 
       num_packages = length (installed_packages);
       delete_idx = [];
       for i = 1:num_packages
 	cur_name = installed_packages{i}.name;
 	if (any (strcmp (cur_name, pkgnames)))
@@ -605,17 +733,17 @@ function uninstall (pkgnames, handle_dep
 	error ("couldn't delete directory %s: %s", desc.dir, msg);
       endif
     else
       warning ("directory %s previously lost", desc.dir);
     endif
   endfor
 
   ## Write a new ~/.octave_packages
-  if (issuperuser ())
+  if (global_install)
     if (length (remaining_packages) == 0)
       unlink (global_list);
     else
       global_packages = remaining_packages;
       save (global_list, "global_packages");
     endif
   else
     if (length (remaining_packages) == 0)
@@ -660,31 +788,35 @@ function prepare_installation (desc, pac
 endfunction
 
 function configure_make (desc, packdir, verbose)   
   ## Perform ./configure, make, make install in "src"
   if (exist (fullfile (packdir, "src"), "dir"))
     src = fullfile (packdir, "src");
     ## configure
     if (exist (fullfile (src, "configure"), "file"))
-      [status, output] = system (strcat ("cd ", src, "; ./configure --prefix=",
-					 desc.dir));
+      [status, output] = shell (strcat ("cd ", src, "; ./configure --prefix=\"",
+					 desc.dir, "\"",
+					 " CC=", octave_config_info ("CC"),
+					 " CXX=", octave_config_info ("CXX"),
+					 " AR=", octave_config_info ("AR"),
+					 " RANLIB=", octave_config_info ("RANLIB")));
       if (verbose)
 	printf("%s", output);
       endif
       if (status != 0)
 	rm_rf (desc.dir);
 	error ("the configure script returned the following error: %s", output);
       endif
     endif
 
     ## make
     if (exist (fullfile (src, "Makefile"), "file"))
-      [status, output] = system (strcat ("export INSTALLDIR=", desc.dir,
-					 "; make -C ", src));
+      [status, output] = shell (strcat ("export INSTALLDIR=\"", desc.dir,
+					 "\"; make -C ", src));
       if (verbose)
 	printf("%s", output);
       endif
       if (status != 0)
 	rm_rf (desc.dir);
 	error ("'make' returned the following error: %s", output);
       endif
       %# make install
@@ -973,17 +1105,22 @@ function finish_installation (desc, pack
       rm_rf (desc.dir);
       error ("the post_install function returned the following error: %s",
 	     lasterr ());
     end_try_catch
   endif
 endfunction
 
 function out = issuperuser ()
-  out = strcmp (getenv("USER"), "root");
+  if (ispc () && ! isunix ())
+    out = 1;
+  else
+    ## Need to be a bit presistent in probing superuser
+    out = (geteuid() == 0);
+  endif
 endfunction
 
 ## This function makes sure the package contains the
 ## essential files.
 function verify_directory (dir)
   needed_files = {"COPYING", "DESCRIPTION"};
   for f = needed_files
     if (! exist (fullfile (dir, f{1}), "file"))
@@ -1270,19 +1407,19 @@ function [out1, out2] = installed_packag
       endif
     endfor
   endfor
   if (! isempty(dup))
     installed_packages(dup) = [];
   endif  
 
   ## Now check if the package is loaded
-  tmppath = path();
+  tmppath = strrep (path(), "\\", "/");
   for i = 1:length (installed_packages)
-    if (regexp (tmppath, installed_packages{i}.dir))
+    if (regexp (tmppath, strrep (installed_packages{i}.dir, "\\", "/")))
       installed_packages{i}.loaded = true;
     else
       installed_packages{i}.loaded = false;
     endif
   endfor
 
   ## Should we return something?
   if (nargout == 2)
@@ -1515,8 +1652,34 @@ function emp = dirempty (nm, ign)
   emp = true;
 endfunction
 
 function arch = getarch ()
   persistent _arch = [octave_config_info("canonical_host_type"), "-", ...
    octave_config_info("api_version")];
   arch = _arch;
 endfunction
+
+function [status, output] = shell (cmd)
+
+  persistent have_sh;
+
+  cmd = strrep (cmd, "\\", "/");
+  disp (cmd);
+  if (ispc () && ! isunix ())
+    if (isempty(have_sh))
+      if (system("sh.exe -c \"exit\""))
+        have_sh = false;
+      else
+        have_sh = true;
+      endif
+    endif
+    if (have_sh)
+      [status, output] = system (["sh.exe -c \"", cmd, "\""]);
+    else
+      error ("Can not find the command shell")
+    endif
+  else
+    [status, output] = system (cmd);
+  endif
+  disp(output);
+
+endfunction
