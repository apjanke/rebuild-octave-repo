# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512046840 18000
#      Thu Nov 30 08:00:40 2017 -0500
# Node ID bccb495737863f2e91a17fddf9f6b85c31ce3a23
# Parent  b991accccd4c7605d218a666fa85db252e7dd875
delete unused symbol_record_rep member variable

* symrec.h (symbol_record::symbol_record_rep::m_curr_fcn):
Delete unused member variable.
(symbol_record::symbol_record_rep::set_curr_fcn): Delete function and
all uses.

diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -75,17 +75,17 @@ namespace octave
   private:
 
     class symbol_record_rep
     {
     public:
 
       symbol_record_rep (symbol_scope *s, const std::string& nm,
                          const octave_value& v, unsigned int sc)
-        : m_decl_scope (s), m_curr_fcn (nullptr), m_name (nm),
+        : m_decl_scope (s), m_name (nm),
           m_fwd_rep (), m_value_stack (), m_storage_class (sc),
           m_valid (true)
       {
         m_value_stack.push_back (v);
       }
 
       // No copying!
 
@@ -552,27 +552,16 @@ namespace octave
       symbol_scope *decl_scope (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->decl_scope ();
 
         return m_decl_scope;
       }
 
-      void set_curr_fcn (octave_user_function *fcn)
-      {
-        if (auto t_fwd_rep = m_fwd_rep.lock ())
-          {
-            t_fwd_rep->set_curr_fcn (fcn);
-            return;
-          }
-
-        m_curr_fcn = fcn;
-      }
-
       // We don't forward more than once, so no need to forward the
       // next two.
 
       void bind_fwd_rep (const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
         m_fwd_rep = fwd_rep;
       }
 
@@ -585,18 +574,16 @@ namespace octave
       std::string name (void) const { return m_name; }
 
       void rename (const std::string& new_name) { m_name = new_name; }
 
     private:
 
       symbol_scope *m_decl_scope;
 
-      octave_user_function *m_curr_fcn;
-
       std::string m_name;
 
       std::weak_ptr<symbol_record_rep> m_fwd_rep;
 
       std::deque<octave_value> m_value_stack;
 
       unsigned int m_storage_class;
 
@@ -733,21 +720,16 @@ namespace octave
     void init_persistent (void) { m_rep->init_persistent (); }
 
     void invalidate (void) { m_rep->invalidate (); }
 
     symbol_scope *decl_scope (void) { return m_rep->decl_scope (); }
 
     unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
-    void set_curr_fcn (octave_user_function *fcn)
-    {
-      m_rep->set_curr_fcn (fcn);
-    }
-
     void bind_fwd_rep (const symbol_record& sr)
     {
       m_rep->bind_fwd_rep (sr.m_rep);
     }
 
     void unbind_fwd_rep (void) { m_rep->unbind_fwd_rep (); }
 
     octave_value dump (void) const { return m_rep->dump (); }
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -308,30 +308,25 @@ namespace octave
             symbol_record& ours = nm_sr.second;
 
             if (! ours.is_formal ()
                 && m_is_nested && m_parent->look_nonlocal (nm_sr.first, ours))
               {
                 if (ours.is_global () || ours.is_persistent ())
                   error ("global and persistent may only be used in the topmost level in which a nested variable is used");
               }
-            else
-              ours.set_curr_fcn (m_fcn);
           }
 
         // The scopes of nested functions are static.
         m_is_static = true;
       }
     else if (m_children.size ())
       {
         // Parents of nested functions have static scopes.
         m_is_static = true;
-
-        for (auto& nm_sr : m_symbols)
-          nm_sr.second.set_curr_fcn (m_fcn);
       }
 
     for (auto& symtab_p : m_children)
       symtab_p->update_nest ();
   }
 
   bool
   symbol_scope::look_nonlocal (const std::string& name, symbol_record& result)
