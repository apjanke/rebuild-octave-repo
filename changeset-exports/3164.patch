# HG changeset patch
# User jwe
# Date 892587413 0
#      Tue Apr 14 20:56:53 1998 +0000
# Node ID 45490c020e47401a5cee9ede0d7029bdb07ad23e
# Parent  7f7228c0e658248d7ca3690bdfc1088ea7546356
[project @ 1998-04-14 20:56:48 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+Tue Apr 14 15:33:20 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* install-octave.in: Improve error messages if version number or
+	host architecture can't be found.
+
+	* install-octave.in: Don't install info reader.
+
 Fri Mar 27 02:54:59 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_F2C_F77_COMPAT): Use a Fortran subroutine
 	instead of a function.
 
 Tue Mar 10 17:28:20 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (RLD_FLAG): Use $(octlibdir), not $(libdir).
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,14 @@
 Summary of changes for version 2.1.x:
 ------------------------------------
 
+  * For matrices, x(:) now works no matter what the value of
+    do_fortran_indexing is.
+
   * Octave's expression parser is more general and consistent.  It is
     now possible to access structure elements and index arbitrary
     values.  For example, expressions like
 
       my_home_dir = getpwuid (getuid ()) . dir;
 
     and
 
diff --git a/install-octave.in b/install-octave.in
--- a/install-octave.in
+++ b/install-octave.in
@@ -7,26 +7,38 @@
 # University of Wisconsin-Madison
 # Department of Chemical Engineering
 
 # get version
 version=`cat VERSION 2> /dev/null`
 
 if test -z "$version"
 then
-  echo "install-octave: no version number!"
+  cat <<EOF 
+install-octave: no version number!
+
+Are you sure you have a binary distribution of Octave?  If you are
+trying to install Octave from its sources, please read and follow
+the directions given in the file INSTALL.OCTAVE.
+EOF
   exit 1
 fi
 
 # get host type
 canonical_host_type=`cat ARCH 2> /dev/null`
 
 if test -z "$canonical_host_type"
 then
-  echo "install-octave: host archetecture not found!"
+  cat <<EOF 
+install-octave: host archetecture not found!
+
+Are you sure you have a binary distribution of Octave?  If you are
+trying to install Octave from its sources, please read and follow
+the directions given in the file INSTALL.OCTAVE.
+EOF
   exit 1
 fi
 
 have_find=true
 case "$canonical_host_type" in
   *-*-cygwin32)
     have_find=false
   ;;
@@ -219,20 +231,16 @@ else
   cp src/octave $bindir/octave.bin
   chmod 755 $bindir/octave.bin
 fi
 
 echo "installing octave-bug as $bindir/octave-bug"
 cp octave-bug $bindir/octave-bug
 chmod 755 $bindir/octave-bug
 
-echo "installing info as $archlibdir/info"
-cp info/info $archlibdir/info
-chmod 755 $archlibdir/info
-
 if test -f LIBRARIES; then
   echo "installing shared libraries in $octlibdir"
   for f in `cat LIBRARIES`
   do
     file=`basename $f`
     cp $f $octlibdir/$file
     chmod 644 $octlibdir/$file
   done
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+Tue Apr 14 14:01:22 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* slatec-fn/xdgamit.f (xdgamit): New file.
+
 Mon Apr  6 00:26:35 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* slatec-fn/xdgami.f (xdgami): Reorder args to match dgami.
 
 Thu Feb 19 21:00:00 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* specfun/ribesl.f, specfun/rjbesl.f: Compute NSIG correctly.
 	Add missing comma in declaration statement.
diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -28,32 +28,32 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-cmplx.h"
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<Complex>;
 
-template void assign (Array<Complex>&, const Array<Complex>&);
-template void assign (Array<Complex>&, const Array<double>&);
-template void assign (Array<Complex>&, const Array<int>&);
-template void assign (Array<Complex>&, const Array<short>&);
-template void assign (Array<Complex>&, const Array<char>&);
+template int assign (Array<Complex>&, const Array<Complex>&);
+template int assign (Array<Complex>&, const Array<double>&);
+template int assign (Array<Complex>&, const Array<int>&);
+template int assign (Array<Complex>&, const Array<short>&);
+template int assign (Array<Complex>&, const Array<char>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<Complex>;
 
-template void assign (Array2<Complex>&, const Array2<Complex>&);
-template void assign (Array2<Complex>&, const Array2<double>&);
-template void assign (Array2<Complex>&, const Array2<int>&);
-template void assign (Array2<Complex>&, const Array2<short>&);
-template void assign (Array2<Complex>&, const Array2<char>&);
+template int assign (Array2<Complex>&, const Array2<Complex>&);
+template int assign (Array2<Complex>&, const Array2<double>&);
+template int assign (Array2<Complex>&, const Array2<int>&);
+template int assign (Array2<Complex>&, const Array2<short>&);
+template int assign (Array2<Complex>&, const Array2<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<Complex>;
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -26,17 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of bool values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<bool>;
 
-template void assign (Array<bool>&, const Array<bool>&);
+template int assign (Array<bool>&, const Array<bool>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<bool>;
 
 template void assign (Array2<bool>&, const Array2<bool>&);
 
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -26,24 +26,24 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of char values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<char>;
 
-template void assign (Array<char>&, const Array<char>&);
+template int assign (Array<char>&, const Array<char>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<char>;
 
-template void assign (Array2<char>&, const Array2<char>&);
+template int assign (Array2<char>&, const Array2<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<char>;
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -26,30 +26,30 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<double>;
 
-template void assign (Array<double>&, const Array<double>&);
-template void assign (Array<double>&, const Array<int>&);
-template void assign (Array<double>&, const Array<short>&);
-template void assign (Array<double>&, const Array<char>&);
+template int assign (Array<double>&, const Array<double>&);
+template int assign (Array<double>&, const Array<int>&);
+template int assign (Array<double>&, const Array<short>&);
+template int assign (Array<double>&, const Array<char>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<double>;
 
-template void assign (Array2<double>&, const Array2<double>&);
-template void assign (Array2<double>&, const Array2<int>&);
-template void assign (Array2<double>&, const Array2<short>&);
-template void assign (Array2<double>&, const Array2<char>&);
+template int assign (Array2<double>&, const Array2<double>&);
+template int assign (Array2<double>&, const Array2<int>&);
+template int assign (Array2<double>&, const Array2<short>&);
+template int assign (Array2<double>&, const Array2<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<double>;
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -26,28 +26,28 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of integer values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<int>;
 
-template void assign (Array<int>&, const Array<int>&);
-template void assign (Array<int>&, const Array<short>&);
-template void assign (Array<int>&, const Array<char>&);
+template int assign (Array<int>&, const Array<int>&);
+template int assign (Array<int>&, const Array<short>&);
+template int assign (Array<int>&, const Array<char>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<int>;
 
-template void assign (Array2<int>&, const Array2<int>&);
-template void assign (Array2<int>&, const Array2<short>&);
-template void assign (Array2<int>&, const Array2<char>&);
+template int assign (Array2<int>&, const Array2<int>&);
+template int assign (Array2<int>&, const Array2<short>&);
+template int assign (Array2<int>&, const Array2<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<int>;
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -26,26 +26,26 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of short int values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<short>;
 
-template void assign (Array<short>&, const Array<short>&);
-template void assign (Array<short>&, const Array<char>&);
+template int assign (Array<short>&, const Array<short>&);
+template int assign (Array<short>&, const Array<char>&);
 
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<short>;
 
-template void assign (Array2<short>&, const Array2<short>&);
-template void assign (Array2<short>&, const Array2<char>&);
+template int assign (Array2<short>&, const Array2<short>&);
+template int assign (Array2<short>&, const Array2<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<short>;
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -98,17 +98,17 @@ Array2<T>::index (idx_vector& idx) const
       else
 	{
 	  if (result_is_column_vector)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
-  else if (liboctave_dfi_flag)
+  else if (liboctave_dfi_flag || idx.is_colon ())
     {
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
       idx.freeze (nr * nc, "matrix");
 
       if (idx)
 	{
@@ -168,25 +168,29 @@ Array2<T>::index (idx_vector& idx_i, idx
 	  retval.resize (n, m);
 	}
       else if (n == 0)
 	{
 	  if (m == 0)
 	    retval.resize (0, 0);
 	  else if (idx_j.is_colon_equiv (nc, 1))
 	    retval.resize (0, nc);
+	  else if (idx_i.is_colon_equiv (nr, 1))
+	    retval.resize (0, m);
 	  else
 	    (*current_liboctave_error_handler) ("invalid row index = 0");
 	}
       else if (m == 0)
 	{
 	  if (n == 0)
 	    retval.resize (0, 0);
 	  else if (idx_i.is_colon_equiv (nr, 1))
 	    retval.resize (nr, 0);
+	  else if (idx_j.is_colon_equiv (nc, 1))
+	    retval.resize (n, 0);
 	  else
 	    (*current_liboctave_error_handler) ("invalid column index = 0");
 	}
       else if (idx_i.is_colon_equiv (nr) && idx_j.is_colon_equiv (nc))
 	{
 	  retval = *this;
 	}
       else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,25 @@
+Tue Apr 14 14:41:30 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (index): Allow x(:) even when do_fortran_indexing
+	is not set.
+	(index): Allow x = zeros (2, 0); x(1,:) to work.
+
+	* lo-specfun.cc (gammainc): Use dgamit to compute
+	(\int_0^x exp(-t) t^(a-1) dt)/gamma(a), not just
+	\int_0^x exp(-t) t^(a-1) dt.
+
+Wed Apr  8 22:50:44 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array-C.cc, Array-b.cc, Array-ch.cc, Array-i.cc, Array-d.cc,
+	Array-s.cc: Change return types of all `assign' explicit
+	instantiations to be int, not void, to match the template decl in
+	Array.h.
+
 Mon Apr  6 00:27:06 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-specfun.cc (gammainc): Reorder args in call to xdgami.
 
 Thu Feb 19 01:16:38 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-specfun.cc (xgamma, xlgamma): Define here.
 	* lo-mappers.cc: Not here.
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -55,17 +55,17 @@ extern "C"
 
   int F77_FCN (xderfc, XDERFC) (const double&, double&);
 
   int F77_FCN (xdbetai, XDBETAI) (const double&, const double&,
 				  const double&, double&);
 
   int F77_FCN (xdgamma, XDGAMMA) (const double&, double&);
 
-  int F77_FCN (xdgami, XDGAMI) (const double&, const double&, double&);
+  int F77_FCN (xdgamit, XDGAMIT) (const double&, const double&, double&);
 
   int F77_FCN (dlgams, DLGAMS) (const double&, double&, double&);
 }
 
 #if !defined (HAVE_ACOSH)
 double
 acosh (double x)
 {
@@ -467,21 +467,30 @@ betainc (const Matrix& x, const Matrix& 
 	  retval(i,j) = betainc (x(i,j), a(i,j), b(i,j));
     }
   else
     gripe_betainc_nonconformant (nr, nc, a_nr, a_nc, b_nr, b_nc);
 
   return retval;
 }
 
+// XXX FIXME XXX -- there is still room for improvement here...
+
 double
 gammainc (double x, double a)
 {
   double retval;
-  F77_XFCN (xdgami, XDGAMI, (a, x, retval));
+
+  F77_XFCN (xdgamit, XDGAMIT, (a, x, retval));
+
+  if (x == 0.0)
+    retval = 0.0;
+  else if (x > 0.0)
+    retval = exp (a * log (x) + log (retval));
+
   return retval;
 }
 
 Matrix
 gammainc (double x, const Matrix& a)
 {
   int nr = a.rows ();
   int nc = a.cols ();
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+Fri Apr 10 10:46:21 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* miscellaneous/dump_prefs.m: Use string array for list of values.
+	Move functionality of dump_1_pref here, but use built-in function
+	type to extract value, and put it inside try/catch block.
+	* miscellaneous/dump_1_pref.m: Delete unused function.
+
 Wed Apr  8 13:17:58 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/__pltopt1.m__: New file.
 	* plot/__pltopt.m__: Handle opt as a string array by calling
 	__pltopt1__ multiple times and returning a string array with rows
 	corresponding to the rows of opt.
 	* plot/__plt2ss__.m, plot/__plt2vv__.m, plot/__plt2vm__.m,
 	plot/__plt2mv__.m, plot/__plt2mm__.m: Handle fmt as a string
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
+Fri Apr 10 11:01:27 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* help.cc (type): Also print values of variables.
+
 Wed Apr  8 01:00:58 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pr-output.cc (set_format): Set scale to 1.0 if all elements are
+	int or inf or nan.
+
 	* parse.y (Vwarn_future_time_stamp): New variable.
 	(symbols_of_parse): Add DEFVAR for it.
 	(warn_future_time_stamp): New function.
 	(frob_function_def): Maybe warn about files with future time stamps.
 
 Thu Apr  2 20:43:45 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector): In
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -917,20 +917,25 @@ display the definition of each NAME that
 				output_buf << "type: structure `" << id
 					   << "' has no member `" << elts
 					   << "'\n";
 			      else
 				output_buf << "type: `" << id
 					   << "' has unknown type!\n";
 			    }
 			}
+
+		      defn.print_raw (output_buf, true);
+
+		      if (nargout == 0)
+			output_buf << "\n";
 		    }
 		}
 	      else
-		output_buf << "type: `" << argv[i] << "' has unknown type!\n";
+		error ("type: `%s' has unknown type!", argv[i].c_str ());
 	    }
 	  else
 	    {
 	      string ff = fcn_file_in_path (argv[i]);
 
 	      if (! ff.empty ())
 		{
 		  ifstream fs (ff.c_str (), ios::in);
@@ -946,17 +951,17 @@ display the definition of each NAME that
 		      while (fs.get (ch))
 			output_buf << ch;
 		    }
 		  else
 		    output_buf << "unable to open `" << ff
 			       << "' for reading!\n";
 		}
 	      else
-		output_buf << "type: `" << argv[i] << "' undefined\n";
+		error ("type: `%s' undefined", argv[i].c_str ());
 	    }
 	}
 
       output_buf << ends;
 
       char *s = output_buf.str ();
 
       if (nargout == 0)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -395,17 +395,17 @@ set_format (const Matrix& m, int& fw, do
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = x_max == 0 ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : pow (10.0, x_max - 1);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
 			  int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
@@ -740,17 +740,17 @@ set_format (const ComplexMatrix& cm, int
     ? 0 : static_cast<int> (floor (log10 (i_max_abs) + 1.0));
 
   int i_x_min = i_min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (i_min_abs) + 1.0));
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
-  scale = x_max == 0 ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : pow (10.0, x_max - 1);
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
 			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
@@ -882,17 +882,17 @@ set_format (const Range& r, int& fw, dou
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = x_max == 0 ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || all_ints) ? 1.0 : pow (10.0, x_max - 1);
 
   set_range_format (sign, x_max, x_min, all_ints, fw);
 }
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
