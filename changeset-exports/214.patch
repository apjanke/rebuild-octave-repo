# HG changeset patch
# User jwe
# Date 753163627 0
#      Sat Nov 13 04:07:07 1993 +0000
# Node ID 1468a5e6a466f8005ac97aa7c52f0f6be032810b
# Parent  83f77b41ff2f0f9f17266af996599c2e6ded3827
[project @ 1993-11-13 04:04:32 by jwe]

diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -1670,18 +1670,20 @@ builtin_va_arg (const tree_constant *arg
       if (curr_function != (tree_function *) NULL)
 	{
 	  if (curr_function->takes_varargs ())
 	    {
 	      retval = new tree_constant [2];
 	      retval[0] = curr_function->va_arg ();
 	    }
 	  else
-	    error ("va_arg only valid within function taking\
- variable number of arguments");
+	    {
+	      error ("va_arg only valid within function taking variable");
+	      error ("number of arguments");
+	    }
 	}
       else
 	error ("va_arg only valid within function body");
     }
   else
     print_usage ("va_arg");
 
   return retval;
@@ -1693,18 +1695,20 @@ builtin_va_start (const tree_constant *a
   tree_constant *retval = NULL_TREE_CONST;
   if (nargin == 1)
     {
       if (curr_function != (tree_function *) NULL)
 	{
 	  if (curr_function->takes_varargs ())
 	    curr_function->va_start ();
 	  else
-	    error ("va_start only valid within function taking\
- variable number of arguments");
+	    {
+	      error ("va_start only valid within function taking variable");
+	      error ("number of arguments");
+	    }
 	}
       else
 	error ("va_start only valid within function body");
     }
   else
     print_usage ("va_start");
 
   return retval;
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -265,18 +265,18 @@ Handle all of the following:
     {
       ColumnVector lb = args[3].to_vector ();
       ColumnVector ub = args[4].to_vector ();
 
       int lb_len = lb.capacity ();
       int ub_len = ub.capacity ();
       if (lb_len != ub_len || lb_len != x.capacity ())
 	{
-	  error ("npsol: lower and upper bounds and decision variable\n\
-       vector must all have the same number of elements");
+	  error ("npsol: lower and upper bounds and decision variable vector");
+	  error ("must all have the same number of elements");
 	  return retval;
 	}
 
       bounds.resize (lb_len);
       bounds.set_lower_bounds (lb);
       bounds.set_upper_bounds (ub);
     }
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -752,18 +752,18 @@ tree_constant_rep::force_numeric (int fo
     case matrix_constant:
     case complex_scalar_constant:
     case complex_matrix_constant:
       break;
     case string_constant:
       {
 	if (! force_str_conv && ! user_pref.implicit_str_to_num_ok)
 	  {
-	    error ("failed to convert `%s' to a numeric type -- default\
- conversion turned off", string);
+	    error ("failed to convert `%s' to a numeric type --", string);
+	    error ("default conversion turned off");
 // Abort!
 	    jump_to_top_level ();
 	  }
 
 	int len = strlen (string);
 	if (len > 1)
 	  {
 	    type_tag = matrix_constant;
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -634,35 +634,35 @@ load_variable (char *nm, int force, istr
 {
   symbol_record *gsr = global_sym_tab->lookup (nm, 0, 0);
   symbol_record *lsr = curr_sym_tab->lookup (nm, 0, 0);
 
   if (! force
       && ((gsr != (symbol_record *) NULL && gsr->is_variable ())
 	  || lsr != (symbol_record *) NULL))
     {
-      warning ("load: variable name `%s' exists.  Use `load -force'\
- to overwrite", nm);
+      warning ("load: variable name `%s' exists.", nm);
+      warning ("Use `load -force' to overwrite");
       return -1;
     }
 
 // We found it.  Read data for this entry, and if that succeeds,
 // insert it into symbol table.
 
   tree_constant tc;
   int global = tc.load (is);
   if (tc.const_type () != tree_constant_rep::unknown_constant)
     {
       symbol_record *sr;
       if (global)
 	{
 	  if (lsr != (symbol_record *) NULL)
 	    {
-	      warning ("load: replacing local symbol `%s' with global\
- value from file", nm);
+	      warning ("load: replacing local symbol `%s' with", nm);
+	      warning ("global value from file");
 	      curr_sym_tab->clear (nm);
 	    }
 	  sr = global_sym_tab->lookup (nm, 1, 0);
 	}
       else
 	{
 	  if (gsr != (symbol_record *) NULL)
 	    {
@@ -736,18 +736,20 @@ builtin_load (int argc, char **argv)
   char nm [128]; // XXX FIXME XXX
   int count = 0;
   for (;;)
     {
 // Read name for this entry or break on EOF.
       if (extract_keyword (stream, "name", nm) == 0 || nm == (char *) NULL)
 	{
 	  if (count == 0)
-	    error ("load: no name keywords found in file.\
-  Are you sure this is an octave data file?");
+	    {
+	      error ("load: no name keywords found in file `%s'", *argv);
+	      error ("Are you sure this is an octave data file?");
+	    }
 	  break;
 	}
 
       if (*nm == '\0')
 	continue;
 
       if (! valid_identifier (nm))
 	{
diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -288,18 +288,18 @@ tree_constant_rep::fortran_style_matrix_
 	    if (error_state)
 	      return;
 	  }
 	else if (range_max_check (ii.max () - 1, len) < 0)
 	  return;
 
 	if (ii.capacity () != rhs_nr * rhs_nc)
 	  {
-	    error ("A(matrix) = X: X and matrix must have the same\
- number of elements"); 
+	    error ("A(matrix) = X: X and matrix must have the same number");
+	    error ("of elements"); 
 	    return;
 	  }
 	fortran_style_matrix_assignment (rhs, ii);
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
@@ -808,18 +808,18 @@ tree_constant_rep::do_matrix_assignment 
 	Matrix mj = tmp_j.matrix_value ();
 	idx_vector jv (mj, user_pref.do_fortran_indexing, "column",
 		       columns ());
 	if (! jv)
 	  return;
 
 	if (! indexed_assign_conforms (1, jv.capacity (), rhs_nr, rhs_nc))
 	  {
-	    error ("A(int,matrix) = X: X must be a row vector with the\
- same number of elements as matrix"); 
+	    error ("A(int,matrix) = X: X must be a row vector with the same");
+	    error ("number of elements as matrix"); 
 	    return;
 	  }
 	maybe_resize (i, jv.max ());
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, i, jv);
       }
@@ -827,18 +827,18 @@ tree_constant_rep::do_matrix_assignment 
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (! indexed_assign_conforms (1, rj.nelem (), rhs_nr, rhs_nc))
 	  {
-	    error ("A(int,range) = X: X must be a row vector with the\
- same number of elements as range"); 
+	    error ("A(int,range) = X: X must be a row vector with the same");
+	    error ("number of elements as range"); 
 	    return;
 	  }
 
 	int nc = columns ();
 	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, i, 1);
 	  }
@@ -889,18 +889,18 @@ tree_constant_rep::do_matrix_assignment 
 	    if (i < 0 || i >= nr)
 	      {
 		error ("A(int,:) = []: row index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(int,:) = X: X must be a row vector with the\
- same number of columns as A"); 
+	    error ("A(int,:) = X: X must be a row vector with the same");
+	    error ("number of columns as A"); 
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, i, magic_colon);
       }
       break;
     default:
       panic_impossible ();
@@ -924,18 +924,18 @@ tree_constant_rep::do_matrix_assignment 
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int j = tree_to_mat_idx (tmp_j.double_value ());
 	if (index_check (j, "column") < 0)
 	  return;
 	if (! indexed_assign_conforms (iv.capacity (), 1, rhs_nr, rhs_nc))
 	  {
-	    error ("A(matrix,int) = X: X must be a column vector with\
- the same number of elements as matrix");  
+	    error ("A(matrix,int) = X: X must be a column vector with the");
+	    error ("same number of elements as matrix");  
 	    return;
 	  }
 	maybe_resize (iv.max (), j);
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, iv, j);
       }
@@ -947,19 +947,19 @@ tree_constant_rep::do_matrix_assignment 
 	idx_vector jv (mj, user_pref.do_fortran_indexing, "column",
 		       columns ());
 	if (! jv)
 	  return;
 
 	if (! indexed_assign_conforms (iv.capacity (), jv.capacity (),
 				       rhs_nr, rhs_nc))
 	  {
-	    error ("A(r_matrix,c_matrix) = X: the number of rows in X\
- must match the number of elements in r_matrix and the number of\
- columns in X must match the number of elements in c_matrix");  
+	    error ("A(r_mat,c_mat) = X: the number of rows in X must match");
+	    error ("the number of elements in r_mat and the number of");
+	    error ("columns in X must match the number of elements in c_mat");
 	    return;
 	  }
 	maybe_resize (iv.max (), jv.max ());
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, iv, jv);
       }
@@ -968,19 +968,19 @@ tree_constant_rep::do_matrix_assignment 
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (! indexed_assign_conforms (iv.capacity (), rj.nelem (),
 				       rhs_nr, rhs_nc))
 	  {
-	    error ("A(matrix,range) = X: the number of rows in X must\
- match the number of elements in matrix and the number of columns in X\
- must match the number of elements in range");  
+	    error ("A(matrix,range) = X: the number of rows in X must match");
+	    error ("the number of elements in matrix and the number of");
+	    error ("columns in X must match the number of elements in range");
 	    return;
 	  }
 
 	int nc = columns ();
 	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, iv, 1);
 	  }
@@ -1019,19 +1019,19 @@ tree_constant_rep::do_matrix_assignment 
 	    if (iv.max () >= rows ())
 	      {
 		error ("A(matrix,:) = []: row index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(matrix,:) = X: the number of rows in X must\
- match the number of elements in matrix, and the number of columns in\
- X must match the number of columns in A");
+	    error ("A(matrix,:) = X: the number of rows in X must match the");
+	    error ("number of elements in matrix, and the number of columns");
+	    error ("in X must match the number of columns in A");
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, iv, magic_colon);
       }
       break;
     default:
       panic_impossible ();
@@ -1055,18 +1055,18 @@ tree_constant_rep::do_matrix_assignment 
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int j = tree_to_mat_idx (tmp_j.double_value ());
 	if (index_check (j, "column") < 0)
 	  return;
 	if (! indexed_assign_conforms (ri.nelem (), 1, rhs_nr, rhs_nc))
 	  {
-	    error ("A(range,int) = X: X must be a column vector with\
- the same number of elements as range");
+	    error ("A(range,int) = X: X must be a column vector with the");
+	    error ("same number of elements as range");
 	    return;
 	  }
 	maybe_resize (tree_to_mat_idx (ri.max ()), j);
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, ri, j);
       }
@@ -1078,19 +1078,19 @@ tree_constant_rep::do_matrix_assignment 
 	idx_vector jv (mj, user_pref.do_fortran_indexing, "column",
 		       columns ());
 	if (! jv)
 	  return;
 
 	if (! indexed_assign_conforms (ri.nelem (), jv.capacity (),
 				       rhs_nr, rhs_nc))
 	  {
-	    error ("A(range,matrix) = X: the number of rows in X must\
- match the number of elements in range and the number of columns in X\
- must match the number of elements in matrix");
+	    error ("A(range,matrix) = X: the number of rows in X must match");
+	    error ("the number of elements in range and the number of");
+	    error ("columns in X must match the number of elements in matrix");
 	    return;
 	  }
 	maybe_resize (tree_to_mat_idx (ri.max ()), jv.max ());
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, ri, jv);
       }
@@ -1099,19 +1099,20 @@ tree_constant_rep::do_matrix_assignment 
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (! indexed_assign_conforms (ri.nelem (), rj.nelem (),
 				       rhs_nr, rhs_nc))
 	  {
-	    error ("A(r_range,c_range) = X: the number of rows in X\
- must match the number of elements in r_range and the number of\
- columns in X must match the number of elements in c_range\n");
+	    error ("A(r_range,c_range) = X: the number of rows in X must");
+	    error ("match the number of elements in r_range and the number");
+	    error ("of columns in X must match the number of elements in");
+	    error ("c_range");
 	    return;
 	  }
 
 	int nc = columns ();
 	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, ri, 1);
 	  }
@@ -1154,19 +1155,19 @@ tree_constant_rep::do_matrix_assignment 
 	    if (b < 0 || l >= rows ())
 	      {
 		error ("A(range,:) = []: row index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(range,:) = X: the number of rows in X must match\
- the number of elements in range, and the number of columns in X must\
- match the number of columns in A");  
+	    error ("A(range,:) = X: the number of rows in X must match the");
+	    error ("number of elements in range, and the number of columns");
+	    error ("in X must match the number of columns in A");  
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, ri, magic_colon);
       }
       break;
     default:
       panic_impossible ();
@@ -1223,18 +1224,18 @@ tree_constant_rep::do_matrix_assignment 
 	    if (j < 0 || j >= nc)
 	      {
 		error ("A(:,int) = []: column index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(:,int) = X: X must be a column vector with the\
- same number of rows as A"); 
+	    error ("A(:,int) = X: X must be a column vector with the same");
+	    error ("number of rows as A"); 
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, magic_colon, j);
       }
       break;
     case complex_matrix_constant:
     case matrix_constant:
@@ -1262,19 +1263,19 @@ tree_constant_rep::do_matrix_assignment 
 	    if (jv.max () >= columns ())
 	      {
 		error ("A(:,matrix) = []: column index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(:,matrix) = X: the number of rows in X must\
- match the number of rows in A, and the number of columns in X must\
- match the number of elements in matrix");   
+	    error ("A(:,matrix) = X: the number of rows in X must match the");
+	    error ("number of rows in A, and the number of columns in X must");
+	    error ("match the number of elements in matrix");   
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, magic_colon, jv);
       }
       break;
     case string_constant:
       gripe_string_invalid ();
@@ -1314,19 +1315,19 @@ tree_constant_rep::do_matrix_assignment 
 	    if (b < 0 || l >= columns ())
 	      {
 		error ("A(:,range) = []: column index out of range");
 		return;
 	      }
 	  }
 	else
 	  {
-	    error ("A(:,range) = X: the number of rows in X must match\
- the number of rows in A, and the number of columns in X must match\
- the number of elements in range");
+	    error ("A(:,range) = X: the number of rows in X must match the");
+	    error ("number of rows in A, and the number of columns in X");
+	    error ("must match the number of elements in range");
 	    return;
 	  }
 
 	do_matrix_assignment (rhs, magic_colon, rj);
       }
       break;
     case magic_colon:
 // a(:,:) = foo is equivalent to a = foo.
