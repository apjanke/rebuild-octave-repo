# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1223445706 -7200
#      Wed Oct 08 08:01:46 2008 +0200
# Node ID 5fd507839b76cab52aaf9771f84e3cf9ec0ce440
# Parent  9a0a66f650b179c6af41998e18dd2362cc6bc419
remove the int->real conversion code vulnerability to compiler optimization

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-inttypes.h (octave_base_int<T>::compute_threshold): Return
+	exclusive bounds rather than inclusive, be resistant to compiler
+	optimizations.
+	(octave_base_int<T>::convert_real): Use exclusive bounds.
+
 2008-10-07  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h (OCTAVE_INT_DOUBLE_BIN_OP): Change octave_int64 to 
 	octave_uint64 where appropriate.
 
 2008-10-06  David Bateman  <dbateman@free.fr>
 	
 	* Sparse-op-defs.h (SPARSE_SMSM_CMP_OPS): Duplicate code for scalar
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -262,43 +262,44 @@ public:
 
 private:
 
   // Computes a real-valued threshold for a max/min check. 
   template <class S>
   static S 
   compute_threshold (S val, T orig_val)
     { 
-      if (static_cast <T> (val) != orig_val)
-        return val;
-      else
-        // Next number away from zero.
-        return val * (static_cast<S> (1.0) + std::numeric_limits<S>::epsilon ()); 
+      val = xround (val); // Fool optimizations (maybe redundant)
+      // If val is even, but orig_val is odd, we're one unit off.
+      if (orig_val % 2 && val / 2 == xround (val / 2))
+        // TODO: is this always correct?
+        val *= (static_cast<S>(1) - (std::numeric_limits<S>::epsilon () / 2)); 
+      return val;
     }
   
 public:
   // Convert a real number (check NaN and non-int).
   template <class S>
   static T 
   convert_real (const S& value)
     {
       // Compute proper thresholds.
       static const S thmin = compute_threshold (static_cast<S> (min_val ()), min_val ());
       static const S thmax = compute_threshold (static_cast<S> (max_val ()), max_val ());
       if (lo_ieee_isnan (value))
         {
           fnan = true;
           return static_cast<T> (0);
         }
-      else if (value <= thmin)
+      else if (value < thmin)
         {
-          octave_int_base<T>::ftrunc = true;
+          ftrunc = true;
           return min_val ();
         }
-      else if (value >= thmax)
+      else if (value > thmax)
         {
           ftrunc = true;
           return max_val ();
         }
       else
         {
           S rvalue = xround (value);
           if (rvalue != value) fnon_int = true;
