# HG changeset patch
# User jwe
# Date 1129790250 0
#      Thu Oct 20 06:37:30 2005 +0000
# Node ID dae5ba706ff2aa8e472903f5de22c72e2e7d079d
# Parent  f2b9aa13f2bff6ea777e503df1185a9d860ceb0f
[project @ 2005-10-20 06:37:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,32 @@
+2005-10-20  John W. Eaton  <jwe@octave.org>
+
+	* pt-mat.cc (tm_row_const::all_real): New data member.
+	(tm_row_const::all_real_p): New function.
+	(tm_row_const::tm_row_const_rep::all_real): New data member.
+	(tm_row_const::tm_row_const_rep::all_real_p): New function.
+	(tm_row_const::tm_row_const_rep::init): Set all_real and all_cmplx
+	to true here.
+	(tm_row_const::all_cmplx): Rename from is_cmplx.
+	(tm_row_const::all_complex_p): Rename from complex_p.
+	(tm_row_const::tm_row_const_rep::all_cmplx): Rename from is_cmplx.
+	(tm_row_const::tm_row_const_rep::all_complex_p): Rename from complex_p.
+	(tm_row_const::tm_row_const_rep::init): Set all_real and all_cmplx
+	to true here.
+	(SINGLE_TYPE_CONCAT): New macro.
+	(tree_matrix::rvalue): Use it for single type cases.
+
+	* pt-mat.cc: Sprinkle with OCTAVE_QUIT.
+
+2005-10-18  John W. Eaton  <jwe@octave.org>
+
+	* octave.cc (octave_main): If not embedded, call clean_up_and_exit
+	instead of return to exit function.
+
 2005-10-18  Arno J. Klaassen  <arno@heho.snv.jussieu.fr>
 
 	* DLD-FUNCTIONS/gplot.l (gnuplot::handle_title):
 	Omit class name from declaration.
 
 2005-10-17  Keith Goodman  <kwgoodman@gmail.com>
 
 	* DLD-FUNCTIONS/sort.cc: Doc string fix.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -640,30 +640,30 @@ octave_main (int argc, char **argv, int 
     {
       // We probably want all the args for an --eval option.
 
       intern_argv (argc, argv);
 
       int parse_status = execute_eval_option_code (code_to_eval);
 
       if (! (persist || remaining_args > 0))
-	return (parse_status || error_state ? 1 : 0);
+	clean_up_and_exit (parse_status || error_state ? 1 : 0);
     }
 
   if (remaining_args > 0)
     {
       // If we are running an executable script (#! /bin/octave) then
       // we should only see the args passed to the script.
 
       intern_argv (remaining_args, argv+last_arg_idx);
 
       execute_command_line_file (argv[last_arg_idx]);
 
       if (! persist)
-	return (error_state ? 1 : 0);
+	clean_up_and_exit (error_state ? 1 : 0);
     }
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // Now argv should have the full set of args.
   intern_argv (argc, argv);
@@ -679,17 +679,23 @@ octave_main (int argc, char **argv, int 
       command_editor::blink_matching_paren (false);
 
       // XXX FIXME XXX -- is this the right thing to do?
 
       bind_builtin_variable ("echo_executing_commands", ECHO_CMD_LINE);
     }
 
   if (embedded)
-    return 1;
+    {
+      // XXX FIXME XXX -- do we need to do any cleanup here before
+      // returning?  If we don't, what will happen to Octave functions
+      // that have been registered to execute with atexit, for example?
+
+      return 1;
+    }
 
   int retval = main_loop ();
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -22,16 +22,18 @@ 02110-1301, USA.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
+#include "quit.h"
+
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-mat.h"
 #include "pt-walk.h"
@@ -62,34 +64,37 @@ private:
   class
   tm_row_const_rep : public octave_base_list<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
       : count (1), dv (), all_str (false),
 	all_sq_str (false), all_dq_str (false),
-	some_str (false), is_cmplx (false), all_mt (true), ok (false) { }
+	some_str (false), all_real (false), all_cmplx (false),
+	all_mt (true), ok (false) { }
 
     tm_row_const_rep (const tree_argument_list& row)
       : count (1), dv (), all_str (false), all_sq_str (false),
-	some_str (false), is_cmplx (false), all_mt (true), ok (false)
+	some_str (false), all_real (false), all_cmplx (false),
+	all_mt (true), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     dim_vector dv;
 
     bool all_str;
     bool all_sq_str;
     bool all_dq_str;
     bool some_str;
-    bool is_cmplx;
+    bool all_real;
+    bool all_cmplx;
     bool all_mt;
 
     bool ok;
 
     bool do_init_element (tree_expression *, const octave_value&, bool&);
 
     void init (const tree_argument_list&);
 
@@ -152,17 +157,18 @@ public:
   { return (rep->dv.length () > 1 ? rep->dv(1) : 0); }
 
   dim_vector dims (void) { return rep->dv; }
 
   bool all_strings_p (void) const { return rep->all_str; }
   bool all_sq_strings_p (void) const { return rep->all_sq_str; }
   bool all_dq_strings_p (void) const { return rep->all_dq_str; }
   bool some_strings_p (void) const { return rep->some_str; }
-  bool complex_p (void) const { return rep->is_cmplx; }
+  bool all_real_p (void) const { return rep->all_real; }
+  bool all_complex_p (void) const { return rep->all_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
 
   operator bool () const { return (rep && rep->ok); }
 
   iterator begin (void) { return rep->begin (); }
   const_iterator begin (void) const { return rep->begin (); }
 
   iterator end (void) { return rep->end (); }
@@ -178,17 +184,17 @@ tm_row_const::tm_row_const_rep::do_init_
 						 const octave_value& val,
 						 bool& first_elem)
 {
   octave_idx_type this_elt_nr = val.rows ();
   octave_idx_type this_elt_nc = val.columns ();
 
   dim_vector this_elt_dv = val.dims ();
 
-  if (!this_elt_dv.all_zero ())
+  if (! this_elt_dv.all_zero ())
     {
       all_mt = false;
 
       if (first_elem)
 	{
 	  first_elem = false;
 
 	  dv.resize (this_elt_dv.length ());
@@ -251,49 +257,58 @@ tm_row_const::tm_row_const_rep::do_init_
     all_sq_str = false;
 
   if (all_dq_str && ! val.is_dq_string ())
     all_dq_str = false;
 
   if (! some_str && val.is_string ())
     some_str = true;
 
-  if (! is_cmplx && val.is_complex_type ())
-    is_cmplx = true;
+  if (all_real && ! val.is_real_type ())
+    all_real = false;
+
+  if (all_cmplx && ! (val.is_complex_type () || val.is_real_type ()))
+    all_cmplx = false;
 
   return true;
 }
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
 {
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
+  all_real = true;
+  all_cmplx = true;
 
   bool first_elem = true;
 
   for (tree_argument_list::const_iterator p = row.begin ();
        p != row.end ();
        p++)
     {
+      OCTAVE_QUIT;
+
       tree_expression *elt = *p;
 
       octave_value tmp = elt->rvalue ();
 
       if (error_state || tmp.is_undefined ())
 	break;
       else
 	{
 	  if (tmp.is_cs_list ())
 	    {
 	      octave_value_list tlst = tmp.list_value ();
 
 	      for (octave_idx_type i = 0; i < tlst.length (); i++)
 		{
+		  OCTAVE_QUIT;
+
 		  if (! do_init_element (elt, tlst(i), first_elem))
 		    goto done;
 		}
 	    }
 	  else
 	    {
 	      if (! do_init_element (elt, tmp, first_elem))
 		goto done;
@@ -338,44 +353,47 @@ tm_row_const::tm_row_const_rep::eval_war
 
 class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
     : dv (), all_str (false), all_sq_str (false), all_dq_str (false),
-      some_str (false), is_cmplx (false), all_mt (true), ok (false)
+      some_str (false), all_real (false), all_cmplx (false),
+      all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
   octave_idx_type rows (void) const { return (dv.length () > 0 ? dv.elem (0) : 0); }
   octave_idx_type cols (void) const { return (dv.length () > 1 ? dv.elem (1) : 0); }
 
   dim_vector dims (void) const { return dv; }
 
   bool all_strings_p (void) const { return all_str; }
   bool all_sq_strings_p (void) const { return all_sq_str; }
   bool all_dq_strings_p (void) const { return all_dq_str; }
   bool some_strings_p (void) const { return some_str; }
-  bool complex_p (void) const { return is_cmplx; }
+  bool all_real_p (void) const { return all_real; }
+  bool all_complex_p (void) const { return all_cmplx; }
   bool all_empty_p (void) const { return all_mt; }
 
   operator bool () const { return ok; }
 
 private:
 
   dim_vector dv;
 
   bool all_str;
   bool all_sq_str;
   bool all_dq_str;
   bool some_str;
-  bool is_cmplx;
+  bool all_real;
+  bool all_cmplx;
   bool all_mt;
 
   bool ok;
 
   tm_const (void);
 
   tm_const (const tm_const&);
 
@@ -385,26 +403,30 @@ private:
 };
 
 void
 tm_const::init (const tree_matrix& tm)
 {
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
+  all_real = true;
+  all_cmplx = true;
 
   bool first_elem = true;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
 
   for (tree_matrix::const_iterator p = tm.begin (); p != tm.end (); p++)
     {
+      OCTAVE_QUIT;
+
       tree_argument_list *elt = *p;
 
       tm_row_const tmp (*elt);
 
       if (tmp)
 	{
 	  if (all_str && ! tmp.all_strings_p ())
 	    all_str = false;
@@ -413,32 +435,37 @@ tm_const::init (const tree_matrix& tm)
 	    all_sq_str = false;
 
 	  if (all_dq_str && ! tmp.all_dq_strings_p ())
 	    all_dq_str = false;
 
 	  if (! some_str && tmp.some_strings_p ())
 	    some_str = true;
 
-	  if (! is_cmplx && tmp.complex_p ())
-	    is_cmplx = true;
+	  if (all_real && ! tmp.all_real_p ())
+	    all_real = false;
+
+	  if (all_cmplx && ! tmp.all_complex_p ())
+	    all_cmplx = false;
 
 	  if (all_mt && ! tmp.all_empty_p ())
 	    all_mt = false;
 
 	  append (tmp);
 	}
       else
 	break;
     }
 
   if (! error_state)
     {
       for (iterator p = begin (); p != end (); p++)
 	{
+	  OCTAVE_QUIT;
+
 	  tm_row_const elt = *p;
 
 	  octave_idx_type this_elt_nr = elt.rows ();
 	  octave_idx_type this_elt_nc = elt.cols ();
 
 	  dim_vector this_elt_dv = elt.dims ();
 
 	  if (!this_elt_dv.all_zero ())
@@ -526,30 +553,34 @@ tree_matrix::~tree_matrix (void)
     }
 }
 
 bool
 tree_matrix::has_magic_end (void) const
 {
   for (const_iterator p = begin (); p != end (); p++)
     {
+      OCTAVE_QUIT;
+
       tree_argument_list *elt = *p;
 
       if (elt && elt->has_magic_end ())
 	return true;
     }
 
   return false;
 }
 
 bool
 tree_matrix::all_elements_are_constant (void) const
 {
   for (const_iterator p = begin (); p != end (); p++)
     {
+      OCTAVE_QUIT;
+
       tree_argument_list *elt = *p;
 
       if (! elt->all_elements_are_constant ())
 	return false;
     }
 
   return true;
 }
@@ -571,122 +602,199 @@ tree_matrix::rvalue (int nargout)
 
 static void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   if (Vwarn_string_concat && ! (all_dq_strings_p || all_sq_strings_p))
     ::warning ("concatenation of different character string types may have unintended consequences");
 }
 
+#define SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
+  do \
+    { \
+      int dv_len = dv.length (); \
+      Array<octave_idx_type> ra_idx (dv_len > 1 ? dv_len : 2, 0); \
+ \
+      for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++) \
+	{ \
+          OCTAVE_QUIT; \
+ \
+	  tm_row_const row = *p; \
+ \
+	  for (tm_row_const::iterator q = row.begin (); \
+	       q != row.end (); \
+	       q++) \
+	    { \
+	      OCTAVE_QUIT; \
+ \
+	      TYPE ra = q->EXTRACTOR (); \
+ \
+	      if (! error_state) \
+		{ \
+		  result.insert (ra, ra_idx); \
+ \
+		  if (! error_state) \
+		    ra_idx(1) += ra.columns (); \
+		  else \
+		    goto done; \
+		} \
+	      else \
+		goto done; \
+	    } \
+ \
+	  ra_idx(0) += row.rows (); \
+	  ra_idx(1) = 0; \
+	} \
+    } \
+ while (0)
+
 octave_value
 tree_matrix::rvalue (void)
 {
   octave_value retval;
 
   bool all_strings_p = false;
   bool all_sq_strings_p = false;
   bool all_dq_strings_p = false;
   bool all_empty_p = false;
+  bool all_real_p = false;
+  bool all_complex_p = false;
   bool frc_str_conv = false;
 
   tm_const tmp (*this);
 
   if (tmp)
     {
       dim_vector dv = tmp.dims ();
       all_strings_p = tmp.all_strings_p ();
       all_sq_strings_p = tmp.all_sq_strings_p ();
       all_dq_strings_p = tmp.all_dq_strings_p ();
       all_empty_p = tmp.all_empty_p ();
+      all_real_p = tmp.all_real_p ();
+      all_complex_p = tmp.all_complex_p ();
       frc_str_conv = tmp.some_strings_p ();
 
-      // XXX FIXME XX
-      // The previous version of this code obtained the return type and 
-      // initialized an array of the correct type. However the return type
-      // is now built-up from the return types of do_cat_op. Should we special
-      // case the situation where there are only NDArray and ComplexNDArray
-      // elements, or things like boolMatrix that widen to them, and do the
-      // correct initialization? How to do this? Will it be faster? Check against
-      // version 2.1.57
-
+      // Try to speed up the common cases.
 
-      // The line below might seem crazy, since we take a copy
-      // of the first argument, resize it to be empty and then resize
-      // it to be full. This is done since it means that there is no
-      // recopying of data, as would happen if we used a single resize.
-      // It should be noted that resize operation is also significantly 
-      // slower than the do_cat_op function, so it makes sense to have an
-      // empty matrix and copy all data.
-      //
-      // We might also start with a empty octave_value using
-      //    ctmp = octave_value_typeinfo::lookup_type
-      //          (tmp.begin() -> begin() -> type_name());
-      // and then directly resize. However, for some types there might be
-      // some additional setup needed, and so this should be avoided.
-
-      octave_value ctmp;
       if (all_strings_p)
 	{
 	  char type = all_sq_strings_p ? '\'' : '"';
 
 	  maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
-	  if (all_empty_p)
-	    ctmp = octave_value (charNDArray (), true, type);
-	  else
-	    ctmp = octave_value (charNDArray (dv, Vstring_fill_char),
-				 true, type);
+	  charNDArray result (dv, Vstring_fill_char);
+
+	  SINGLE_TYPE_CONCAT (charNDArray, char_array_value);
+
+	  retval = octave_value (result, true, type);
+	}
+      else if (all_real_p)
+	{
+	  NDArray result (dv);
+
+	  SINGLE_TYPE_CONCAT (NDArray, array_value);
+
+	  retval = result;
+	}
+      else if (all_complex_p)
+	{
+	  ComplexNDArray result (dv);
+
+	  SINGLE_TYPE_CONCAT (ComplexNDArray, complex_array_value);
+
+	  retval = result;
 	}
       else
 	{
+	  // The line below might seem crazy, since we take a copy of
+	  // the first argument, resize it to be empty and then resize
+	  // it to be full. This is done since it means that there is
+	  // no recopying of data, as would happen if we used a single
+	  // resize.  It should be noted that resize operation is also
+	  // significantly slower than the do_cat_op function, so it
+	  // makes sense to have an empty matrix and copy all data.
+	  //
+	  // We might also start with a empty octave_value using
+	  //
+	  //    ctmp = octave_value_typeinfo::lookup_type
+	  //          (tmp.begin() -> begin() -> type_name());
+	  //
+	  // and then directly resize. However, for some types there
+	  // might be some additional setup needed, and so this should
+	  // be avoided.
+
+	  octave_value ctmp;
+
 	  // Find the first non-empty object
+
 	  for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
 	    {
+	      OCTAVE_QUIT;
+
 	      tm_row_const row = *p;
+
 	      for (tm_row_const::iterator q = row.begin (); 
 		   q != row.end (); q++)
 		{
+		  OCTAVE_QUIT;
+
 		  ctmp = *q;
+
 		  if (! ctmp.all_zero_dims ())
 		    goto found_non_empty;
 		}
 	    }
 
 	  ctmp = (*(tmp.begin() -> begin()));
 
 	found_non_empty:
+
 	  if (! all_empty_p)
 	    ctmp = ctmp.resize (dim_vector (0,0)).resize (dv);
-	}
 
-      if (error_state)
-	goto done;
-
-      // Now, extract the values from the individual elements and
-      // insert them in the result matrix.
-      int dv_len = dv.length ();
-      Array<int> ra_idx (dv_len > 1 ? dv_len : 2, 0);
-      for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
-	{
-	  tm_row_const row = *p;
-	  for (tm_row_const::iterator q = row.begin (); q != row.end (); q++)
+	  if (! error_state)
 	    {
-	      octave_value elt = *q;
+	      // Now, extract the values from the individual elements and
+	      // insert them in the result matrix.
+
+	      int dv_len = dv.length ();
+	      Array<int> ra_idx (dv_len > 1 ? dv_len : 2, 0);
+
+	      for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
+		{
+		  OCTAVE_QUIT;
+
+		  tm_row_const row = *p;
+
+		  for (tm_row_const::iterator q = row.begin ();
+		       q != row.end ();
+		       q++)
+		    {
+		      OCTAVE_QUIT;
 
-	      ctmp = do_cat_op (ctmp, elt, ra_idx);
-	      if (error_state)
-		goto done;
-	      ra_idx (1) += elt.columns ();
+		      octave_value elt = *q;
+
+		      ctmp = do_cat_op (ctmp, elt, ra_idx);
+
+		      if (error_state)
+			goto done;
+
+		      ra_idx (1) += elt.columns ();
+		    }
+
+		  ra_idx (0) += row.rows ();
+		  ra_idx (1) = 0;
+		}
+
+	      retval = ctmp;
+
+	      if (frc_str_conv && ! retval.is_string ())
+		retval = retval.convert_to_str ();
 	    }
-	  ra_idx (0) += row.rows ();
-	  ra_idx (1) = 0;
 	}
-      retval = ctmp;
-      if (frc_str_conv && ! retval.is_string ())
-	retval = retval.convert_to_str ();
     }
 
 done:
   return retval;
 }
 
 void
 tree_matrix::accept (tree_walker& tw)
