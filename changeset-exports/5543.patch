# HG changeset patch
# User jwe
# Date 1132589627 0
#      Mon Nov 21 16:13:47 2005 +0000
# Node ID 4d52e637a72aa08d668d6e5a7b9c63d82bb134d6
# Parent  b23c53f26aec2954b3cc7df0881c0a6a9b1b775d
[project @ 2005-11-21 16:13:47 by jwe]

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -33,34 +33,34 @@ 02110-1301, USA.
 #include "defun-dld.h"
 #include "parse.h"
 #include "variables.h"
 #include "ov-colon.h"
 
 DEFUN_DLD (cellfun, args, ,
   " -*- texinfo -*-\n\
 @deftypefn {Lodable Function} {} cellfun (@var{name}, @var{c})\n\
+@deftypefnx {Lodable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Lodable Function} {} cellfun (\"isclass\", @var{c}, @var{class})\n\
-@deftypefnx {Lodable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Lodable Function} {} cellfun (@var{func}, @var{c})\n\
 \n\
 Evaluate the function named @var{name} on the elements of the cell array\n\
-@var{c}.  Elements in cell_array are passed on to the named function\n\
+@var{c}.  Elements in @var{c} are passed on to the named function\n\
 individually.  The function @var{name} can be one of the functions\n\
 \n\
 @table @code\n\
 @item isempty\n\
-Return 1 when for non empty elements and 0 for others.\n\
+Return 1 for empty elements.\n\
 @item islogical\n\
 Return 1 for logical elements.\n\
 @item isreal\n\
 Return 1 for real elements.\n\
 @item length\n\
 Return a vector of the lengths of cell elements.\n\
-@item dims\n\
+@item ndims\n\
 Return the number of dimensions of each element.\n\
 @item prodofsize\n\
 Return the product of dimensions of each element.\n\
 @item size\n\
 Return the size along the @var{k}-th dimension.\n\
 @item isclass\n\
 Return 1 for elements of @var{class}.\n\
 @end table\n\
@@ -73,17 +73,18 @@ argument, the argument must be named @va
 \n\
 @example\n\
 @group\n\
 cellfun (\"tolower(x)\", @{\"Foo\", \"Bar\", \"FooBar\"@})\n\
 @result{} ans = @{\"foo\", \"bar\", \"foobar\"@}\n\
 @end group\n\
 @end example\n\
 \n\
-@end deftypefn")
+@end deftypefn\n\
+@seealso{isempty, islogical, isreal, length, ndims, numel, size, isclass}")
 {
   octave_value retval;
 
   std::string name = "function";
 
   octave_function *func = 0;
 
   int nargin = args.length ();
@@ -101,36 +102,36 @@ cellfun (\"tolower(x)\", @{\"Foo\", \"Ba
 
       if (error_state)
 	return retval;
     }
   else if (args(0).is_string ())
     name = args(0).string_value ();
   else
     {
-      error ("cellfun: first argument must be a string");
+      error ("cellfun: first argument must be a string or function handle");
       return retval;
     }	
 
   if (! args(1).is_cell ())
     {
-      error ("cellfun: second argument must be a cell");
+      error ("cellfun: second argument must be a cell array");
 
       return retval;
     }
   
   Cell f_args = args(1).cell_value ();
   
   int k = f_args.numel ();
 
   if (name == "isempty")
     {      
       boolNDArray result (f_args.dims ());
       for (int count = 0; count < k ; count++)
-        result(count) = f_args.elem(count).is_empty();
+        result(count) = f_args.elem(count).is_empty ();
       retval = result;
     }
   else if (name == "islogical")
     {
       boolNDArray result (f_args.dims ());
       for (int  count= 0; count < k ; count++)
         result(count) = f_args.elem(count).is_bool_type ();
       retval = result;
@@ -141,31 +142,31 @@ cellfun (\"tolower(x)\", @{\"Foo\", \"Ba
       for (int  count= 0; count < k ; count++)
         result(count) = f_args.elem(count).is_real_type ();
       retval = result;
     }
   else if (name == "length")
     {
       NDArray result (f_args.dims ());
       for (int  count= 0; count < k ; count++)
-        result(count) = double (f_args.elem(count).numel ());
+        result(count) = double (f_args.elem(count).length ());
       retval = result;
     }
   else if (name == "ndims")
     {
       NDArray result (f_args.dims ());
       for (int count = 0; count < k ; count++)
-        result(count) = double ((f_args.elem(count).dims ()).numel ());
+        result(count) = double (f_args.elem(count).ndims ());
       retval = result;
     }
   else if (name == "prodofsize")
     {
       NDArray result (f_args.dims ());
       for (int count = 0; count < k ; count++)
-        result(count) = double ((f_args.elem(count).dims ()).numel ());
+        result(count) = double (f_args.elem(count).numel ());
       retval = result;
     }
   else if (name == "size")
     {
       if (nargin == 3)
         {
           int d = args(2).nint_value () - 1;
 
@@ -182,31 +183,31 @@ cellfun (\"tolower(x)\", @{\"Foo\", \"Ba
 	            result(count) = double (dv(d));
                   else
 	            result(count) = 1.0;
                 }
               retval = result;
             }
         }
       else
-        error ("Not enough argument for size");
+        error ("not enough arguments for `size'");
     }
   else if (name == "isclass")
     {
       if (nargin == 3)
         {
           std::string class_name = args(2).string_value();
           boolNDArray result (f_args.dims ());
           for (int count = 0; count < k ; count++)
             result(count) = (f_args.elem(count).class_name() == class_name);
           
           retval = result;
         }
       else
-        error ("Not enough argument for isclass");
+        error ("not enough arguments for `isclass'");
     }
   else 
     {
       std::string fcn_name;
       
       if (! func)
 	{
 	  fcn_name = unique_symbol_name ("__cellfun_fcn_");
