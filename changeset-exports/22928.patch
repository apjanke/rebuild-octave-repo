# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482437882 18000
#      Thu Dec 22 15:18:02 2016 -0500
# Node ID dec22bceafa2d90f6235548ccd6fdbc3444b8aa5
# Parent  feaa4160a43b529b5fb1fbf968a7ce067d9509db
use testif HAVE_SUNDIALS for ode15 tests

* ode15i.m, ode15s.m: Use testif HAVE_SUNDIALS for tests that require
Sundials.

diff --git a/scripts/ode/ode15i.m b/scripts/ode/ode15i.m
--- a/scripts/ode/ode15i.m
+++ b/scripts/ode/ode15i.m
@@ -337,204 +337,272 @@ endfunction
 %!function [DFDY, DFDYP] = jacfunsparse(t, y, yp)
 %!  DFDY = sparse ([-0.04,           1e4*y(3),  1e4*y(2);
 %!                   0.04, -1e4*y(3)-6e7*y(2), -1e4*y(2);
 %!                      1,                  1,         1]);
 %!  DFDYP = sparse ([-1,  0, 0;
 %!                    0, -1, 0;
 %!                    0,  0, 0]);
 %!endfunction
+%!
 %!function [DFDY, DFDYP] = jacwrong(t, y, yp)
 %!  DFDY = [-0.04,           1e4*y(3);
 %!           0.04, -1e4*y(3)-6e7*y(2)];
 %!  DFDYP = [-1,  0;
 %!            0, -1];
 %!endfunction
+%!
 %!function [DFDY, DFDYP, A] = jacwrong2(t, y, yp)
 %!  DFDY = [-0.04,           1e4*y(3),  1e4*y(2);
 %!           0.04, -1e4*y(3)-6e7*y(2), -1e4*y(2);
 %!              1,                  1,         1];
 %!  DFDYP = [-1,  0, 0;
 %!            0, -1, 0;
 %!            0,  0, 0];
 %!  A = DFDY;
 %!endfunction
+%!
 %!function [val, isterminal, direction] = ff (t, y, yp)
 %!  isterminal = [0 1];
 %!  if (t < 1e1)
 %!    val = [-1, -2];
 %!  else
 %!    val = [1 3];
 %!  endif
 %!
 %!  direction = [1 0];
 %!endfunction
 
-%!test  # anonymous function instead of real function
+## anonymous function instead of real function
+%!testif HAVE_SUNDIALS
 %! ref = [0.049787079136413];
 %! ff = @(t, u, udot)  udot + 3 * u;
 %! [t, y] = ode15i (ff, 0:1, 1, -3);
 %! assert ([t(end), y(end)], [1, ref], 1e-3);
-%!test  # function passed as string
+
+## function passed as string
+%!testif HAVE_SUNDIALS
 %! [t, y] = ode15i ('rob',[0 100 200], [1;0;0], [-1e-4;1e-4;0]);
 %! assert ([t(2), y(2,:)], fref, 1e-3);
-%!test  #  solve in intermidiate step
+
+##  solve in intermidiate step
+%!testif HAVE_SUNDIALS
 %! [t, y] = ode15i (@rob,[0 100 200], [1;0;0], [-1e-4;1e-4;0]);
 %! assert ([t(2), y(2,:)], fref, 1e-3);
-%!test  # numel(trange) = 2 final value
+
+## numel(trange) = 2 final value
+%!testif HAVE_SUNDIALS
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! assert ([t(end), y(end,:)], fref, 1e-5);
-%!test  # With empty options
+
+## With empty options
+%!testif HAVE_SUNDIALS
 %! opt = odeset();
 %! [t, y] = ode15i (@rob,[0 1e6 2e6 3e6 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref2, 1e-3);
 %! opt = odeset();
-%!test  # Without options
+
+## Without options
+%!testif HAVE_SUNDIALS
 %! [t, y] = ode15i (@rob,[0 1e6 2e6 3e6 4e6], [1;0;0], [-1e-4;1e-4;0]);
 %! assert ([t(end), y(end,:)], fref2, 1e-3);
-%!test  # InitialStep option
+
+## InitialStep option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("InitialStep", 1e-8);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(2)-t(1)], [1e-8], 1e-9);
-%!test  # MaxStep option
+
+## MaxStep option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MaxStep", 1e-3);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! assert ([t(5)-t(4)], [1e-3], 1e-3);
-%!test  # AbsTol scalar option
+
+## AbsTol scalar option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", 1e-8);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # AbsTol scalar and RelTol option
+
+## AbsTol scalar and RelTol option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", 1e-8, "RelTol", 1e-6);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # AbsTol vector option
+
+## AbsTol vector option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", [1e-8, 1e-14,1e-6]);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # AbsTol vector and RelTol option
+
+## AbsTol vector and RelTol option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", [1e-8, 1e-14,1e-6], "RelTol", 1e-6);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # RelTol option
+
+## RelTol option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("RelTol", 1e-6);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # Jacobian fun dense
+
+## Jacobian fun dense
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Jacobian", @jacfundense);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # Jacobian fun dense as string
+
+## Jacobian fun dense as string
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Jacobian", 'jacfundense');
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # Jacobian fun sparse
+
+## Jacobian fun sparse
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Jacobian", @jacfunsparse, "AbsTol", 1e-7, "RelTol", 1e-7);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), y(end,:)], fref, 1e-3);
-%!test  # Solve in backward direction starting at t=100
+
+## Solve in backward direction starting at t=100
+%!testif HAVE_SUNDIALS
 %! YPref = [-0.001135972751027; -0.000000027483627; 0.001136000234654];
 %! Yref = [0.617234887614937, 0.000006153591397, 0.382758958793666];
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! [t2, y2] = ode15i (@rob,[100 0], Yref', YPref);
 %! assert ([t2(end), y2(end,:)], [0 1 0 0], 2e-2);
-#%!test  # Solve in backward direction with MaxStep option
+
+## Solve in backward direction with MaxStep option
+#%!testif HAVE_SUNDIALS
 %! YPref = [-0.001135972751027; -0.000000027483627; 0.001136000234654];
 %! Yref = [0.617234887614937, 0.000006153591397, 0.382758958793666];
 %! opt = odeset ('MaxStep', 1e-2);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! [t2, y2] = ode15i (@rob,[100 0], Yref', YPref, opt);
 %! assert ([t2(end), y2(end,:)], [0 1 0 0], 2e-2);
 %! assert ([t2(9)-t2(10)], [1e-2], 1e-2);
-#%!test  # Solve in backward direction starting  with intermidiate step
+
+## Solve in backward direction starting  with intermidiate step
+#%!testif HAVE_SUNDIALS
 %! YPref = [-0.001135972751027; -0.000000027483627; 0.001136000234654];
 %! Yref = [0.617234887614937, 0.000006153591397, 0.382758958793666];
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! [t2, y2] = ode15i (@rob,[100 5 0], Yref', YPref);
 %! assert ([t2(end), y2(end,:)], [0 1 0 0], 2e-2);
-%!test  # Refine
+
+## Refine
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Refine", 3);
 %! [t, y] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0]);
 %! [t2, y2] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([numel(t2)], numel(t)*3, 3);
-%!test  # Refine ignored if numel (trange) > 2
+
+## Refine ignored if numel (trange) > 2
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Refine", 3);
 %! [t, y] = ode15i (@rob,[0 10 100], [1;0;0], [-1e-4;1e-4;0]);
 %! [t2, y2] = ode15i (@rob,[0 10 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([numel(t2)], numel(t));
-%!test  # Events option add further elements in sol
+
+## Events option add further elements in sol
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @ff);
 %! sol = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert (isfield (sol, "ie"));
 %! assert (sol.ie, [0;1]);
 %! assert (isfield (sol, "xe"));
 %! assert (isfield (sol, "ye"));
 %! assert (sol.x(end), 10, 1);
-%!test  # Events option, five output arguments
+
+## Events option, five output arguments
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @ff);
 %! [t, y, te, ye, ie] = ode15i (@rob,[0 100], [1;0;0], [-1e-4;1e-4;0], opt);
 %! assert ([t(end), te', ie'], [10, 10, 10, 0, 1], [1, 0.2, 0.2, 0, 0]);
 
-%!error  # Jacobian fun wrong dimension
+## Jacobian fun wrong dimension
+%!error
 %! opt = odeset ("Jacobian", @jacwrong);
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian cell dense wrong dimension
+
+## Jacobian cell dense wrong dimension
+%!error
 %!  DFDY = [-0.04, 1;
 %!           0.04, 1];
 %!  DFDYP = [-1,  0, 0;
 %!            0, -1, 0;
 %!            0,  0, 0];
 %! opt = odeset ("Jacobian", {DFDY, DFDYP});
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian cell sparse wrong dimension
+
+## Jacobian cell sparse wrong dimension
+%!error
 %!  DFDY = sparse ([-0.04, 1;
 %!                   0.04, 1]);
 %!  DFDYP = sparse ([-1,  0, 0;
 %!                    0, -1, 0;
 %!                    0,  0, 0]);
 %! opt = odeset ("Jacobian", {DFDY, DFDYP});
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian cell wrong number of matrices
+
+## Jacobian cell wrong number of matrices
+%!error
 %! A = [1 2 3; 4 5 6; 7 8 9];
 %! opt = odeset ("Jacobian", {A,A,A});
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian single matrix
+
+## Jacobian single matrix
+%!error
 %! opt = odeset ("Jacobian", [1 2 3; 4 5 6; 7 8 9]);
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian single matrix wrong dimension
+
+## Jacobian single matrix wrong dimension
+%!error
 %! opt = odeset ("Jacobian", [1 2 3; 4 5 6]);
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
-%!error  # Jacobian strange field
+
+## Jacobian strange field
+%!error
 %! opt = odeset ("Jacobian", "foo");
 %! [t, y] = ode15i (@rob,[0 4e6], [1;0;0], [-1e-4;1e-4;0], opt);
 %!function ydot = fun (t, y, yp)
 %! ydot = [y - yp];
 %!endfunction
+
 %!error ode15i ();
 %!error ode15i (1);
 %!error ode15i (1, 1, 1);
 %!error ode15i (1, 1, 1);
 %!error ode15i (1, 1, 1, 1);
 %!error ode15i (1, 1, 1, 1, 1);
 %!error ode15i (1, 1, 1, 1, 1, 1);
 %!error ode15i (@fun, 1, 1, 1);
 %!error ode15i (@fun, [1, 1], 1, 1);
 %!error ode15i (@fun, [1, 2], [1], [1, 2]);
+
 %!error
 %!  opt = odeset ('RelTol', "foo");
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
+
 %!error
 %!  opt = odeset ('RelTol', [1, 2]);
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
+
 %!error
 %!  opt = odeset ('RelTol', -2);
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
+
 %!error
 %!  opt = odeset ('AbsTol', "foo");
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
+
 %!error
 %!  opt = odeset ('AbsTol', -1);
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
+
 %!error
 %!  opt = odeset ('AbsTol', [1, 1, 1]);
 %!  [t, y] = ode15i (@fun, [0 2], [2], [2], opt);
 
 
diff --git a/scripts/ode/ode15s.m b/scripts/ode/ode15s.m
--- a/scripts/ode/ode15s.m
+++ b/scripts/ode/ode15s.m
@@ -413,272 +413,332 @@ endfunction
 %! xlabel ('time');
 %! ylabel ('species concentration');
 %! title ('Robertson DAE problem with a Conservation Law');
 %! legend ('y1', 'y2', 'y3');
 
 %!function ydot = fpol (t, y)  # The Van der Pol
 %! ydot = [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %!endfunction
+%!
 %!function ref = fref ()       # The computed reference sol
 %! ref = [0.32331666704577, -1.83297456798624];
 %!endfunction
+%!
 %!function jac = fjac (t, y)  # its Jacobian
 %! jac = [0, 1; -1 - 2 * y(1) * y(2), 1 - y(1)^2];
 %!endfunction
+%!
 %!function jac = fjcc (t, y)  # sparse type
 %! jac = sparse ([0, 1; -1 - 2 * y(1) * y(2), 1 - y(1)^2]);
 %!endfunction
+%!
 %!function mas = fmas (t, y)
 %! mas = [1, 0; 0, 1];             # Dummy mass matrix for tests
 %!endfunction
+%!
 %!function mas = fmsa (t, y)
 %! mas = sparse ([1, 0; 0, 1]);    # A sparse dummy matrix
 %!endfunction
+%!
 %!function res = rob (t, y)
 %! res = [-0.04*y(1) + 1e4*y(2).*y(3);
 %!         0.04*y(1) - 1e4*y(2).*y(3) - 3e7*y(2).^2;
 %!         y(1) + y(2) + y(3) - 1 ];
 %!endfunction
 %!
 %!function refrob = frefrob()
 %! refrob = [100, 0.617234887614937, 0.000006153591397, 0.382758958793666];
 %!endfunction
+%!
 %!function [val, isterminal, direction] = feve (t, y)
 %!  isterminal = [0 1];
 %!  if (t < 1e1)
 %!    val = [-1, -2];
 %!  else
 %!    val = [1 3];
 %!  endif
 %!
 %!  direction = [1 0];
 %!endfunction
+%!
 %!function masrob = massdensefunstate (t, y)
 %! masrob = [1 0 0; 0 1 0; 0 0 0];
 %!endfunction
+%!
 %!function masrob = masssparsefunstate (t, y)
 %! masrob = sparse([1 0 0; 0 1 0; 0 0 0]);
 %!endfunction
+%!
 %!function masrob = massdensefuntime (t)
 %! masrob = [1 0 0; 0 1 0; 0 0 0];
 %!endfunction
+%!
 %!function masrob = masssparsefuntime (t)
 %! masrob = sparse([1 0 0; 0 1 0; 0 0 0]);
 %!endfunction
+%!
 %!function jac = jacfundense (t, y)
 %!  jac = [-0.04,           1e4*y(3),  1e4*y(2);
 %!           0.04, -1e4*y(3)-6e7*y(2), -1e4*y(2);
 %!              1,                  1,         1];
 %!endfunction
+%!
 %!function jac = jacfunsparse (t, y)
 %!  jac = sparse([-0.04,           1e4*y(3),  1e4*y(2);
 %!                 0.04, -1e4*y(3)-6e7*y(2), -1e4*y(2);
 %!                    1,                  1,         1]);
 %!endfunction
 
-
-
-%!test
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", [1 0 0; 0 1 0; 0 0 0]);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", sparse([1 0 0; 0 1 0; 0 0 0]));
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", @massdensefunstate);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", @masssparsefunstate);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", 'massdensefuntime');
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", [1 0 0; 0 1 0; 0 0 0],
 %!                "Jacobian", 'jacfundense');
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MStateDependence", "none",
 %!                "Mass", sparse([1 0 0; 0 1 0; 0 0 0]),
 %!                "Jacobian", @jacfundense);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! warning ("off", "ode15s:mass_state_dependent_provided", "local");
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @massdensefunstate,
 %!                "Jacobian", @jacfundense);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! warning ("off", "ode15s:mass_state_dependent_provided", "local");
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @masssparsefunstate,
 %!                "Jacobian", @jacfundense);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @massdensefuntime,
 %!                "Jacobian", @jacfundense);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", 'masssparsefuntime',
 %!                "Jacobian", 'jacfundense');
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", [1 0 0; 0 1 0; 0 0 0],
 %!                "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", sparse([1 0 0; 0 1 0; 0 0 0]),
 %!               "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! warning ("off", "ode15s:mass_state_dependent_provided", "local");
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @massdensefunstate,
 %!                "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %! warning ("off", "ode15s:mass_state_dependent_provided", "local");
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @masssparsefunstate,
 %!                "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @massdensefuntime,
 %!                "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test
+
+%!testif HAVE_SUNDIALS
 %!  opt = odeset ("MStateDependence", "none",
 %!                "Mass", @masssparsefuntime,
 %!                "Jacobian", @jacfunsparse);
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), y(end,:)], frefrob, 1e-3);
-%!test  # two output arguments
+
+## two output arguments
+%!testif HAVE_SUNDIALS
 %! [t, y] = ode15s (@fpol, [0 2], [2 0]);
 %! assert ([t(end), y(end,:)], [2, fref], 1e-2);
-%!test  # anonymous function instead of real function
+
+## anonymous function instead of real function
+%!testif HAVE_SUNDIALS
 %! fvdb = @(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %! [t, y] = ode15s (fvdb, [0 2], [2 0]);
 %! assert ([t(end), y(end,:)], [2, fref], 1e-2);
-%!test  # Solve another anonymous function below zero
+
+## Solve another anonymous function below zero
+%!testif HAVE_SUNDIALS
 %! ref = [0, 14.77810590694212];
 %! [t, y] = ode15s (@(t,y) y, [-2 0], 2);
 %! assert ([t(end), y(end,:)], ref, 5e-2);
-%!test  # InitialStep option
+
+## InitialStep option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("InitialStep", 1e-8);
 %! [t, y] = ode15s (@fpol, [0 0.2], [2 0], opt);
 %! assert ([t(2)-t(1)], [1e-8], 1e-9);
-%!test  # MaxStep option
+
+## MaxStep option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("MaxStep", 1e-3);
 %! sol = ode15s (@fpol, [0 0.2], [2 0], opt);
 %! assert ([sol.x(5)-sol.x(4)], [1e-3], 1e-3);
-%!test  # Solve in backward direction starting at t=0
+
+## Solve in backward direction starting at t=0
+%!testif HAVE_SUNDIALS
 %! ref = [-1.205364552835178, 0.951542399860817];
 %! sol = ode15s (@fpol, [0 -2], [2 0]);
 %! assert ([sol.x(end), sol.y(end,:)], [-2, ref], 5e-3);
-%!test  # Solve in backward direction starting at t=2
+
+## Solve in backward direction starting at t=2
+%!testif HAVE_SUNDIALS
 %! ref = [-1.205364552835178, 0.951542399860817];
 %! sol = ode15s (@fpol, [2 0 -2], fref);
 %! assert ([sol.x(end), sol.y(end,:)], [-2, ref], 3e-2);
-%!test  # Solve another anonymous function in backward direction
+
+## Solve another anonymous function in backward direction
+%!testif HAVE_SUNDIALS
 %! ref = [-1, 0.367879437558975];
 %! sol = ode15s (@(t,y) y, [0 -1], 1);
 %! assert ([sol.x(end), sol.y(end,:)], ref, 1e-2);
-%!test  # Solve another anonymous function below zero
+
+## Solve another anonymous function below zero
+%!testif HAVE_SUNDIALS
 %! ref = [0, 14.77810590694212];
 %! sol = ode15s (@(t,y) y, [-2 0], 2);
 %! assert ([sol.x(end), sol.y(end,:)], ref, 5e-2);
-%!test  # Solve in backward direction starting at t=0 with MaxStep option
+
+## Solve in backward direction starting at t=0 with MaxStep option
+%!testif HAVE_SUNDIALS
 %! ref = [-1.205364552835178, 0.951542399860817];
 %! opt = odeset ("MaxStep", 1e-3);
 %! sol = ode15s (@fpol, [0 -2], [2 0], opt);
 %! assert ([abs(sol.x(8)-sol.x(7))], [1e-3], 1e-3);
 %! assert ([sol.x(end), sol.y(end,:)], [-2, ref], 1e-3);
-%!test  # AbsTol option
+
+## AbsTol option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", 1e-5);
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 4e-3);
-%!test  # AbsTol and RelTol option
+
+## AbsTol and RelTol option
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", 1e-8, "RelTol", 1e-8);
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-3);
-%!test  # RelTol option -- higher accuracy
+
+## RelTol option -- higher accuracy
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("RelTol", 1e-8);
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 1e-4);
-%!test  # Mass option as function
+
+## Mass option as function
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Mass", @fmas, "MStateDependence", "none");
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 3e-3);
-%!test  # Mass option as matrix
+
+## Mass option as matrix
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Mass", eye (2,2), "MStateDependence", "none");
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 3e-3);
-%!test  # Mass option as sparse matrix
+
+## Mass option as sparse matrix
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Mass", sparse (eye (2,2)), "MStateDependence", "none");
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 3e-3);
-%!test  # Mass option as function and sparse matrix
+
+## Mass option as function and sparse matrix
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Mass", 'fmsa', "MStateDependence", "none");
 %! sol = ode15s (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end), sol.y(end,:)], [2, fref], 3e-3);
-%!test  # Refine
+
+## Refine
+%!testif HAVE_SUNDIALS
 %! opt2 = odeset ("Refine", 3, "Mass", @massdensefunstate,
 %!                "MStateDependence", "none");
 %! opt1 = odeset ("Mass", @massdensefunstate, "MStateDependence", "none");
 %! [t, y] = ode15s (@rob,[0 100], [1;0;0], opt1);
 %! [t2, y2] = ode15s (@rob,[0 100], [1;0;0], opt2);
 %! assert ([numel(t2)], numel(t)*3, 3);
-%!test  # Refine ignored if numel (trange) > 2
+
+## Refine ignored if numel (trange) > 2
+%!testif HAVE_SUNDIALS
 %! opt2 = odeset ("Refine", 3, "Mass", 'massdensefunstate',
 %!                "MStateDependence", "none");
 %! opt1 = odeset ("Mass", @massdensefunstate, "MStateDependence", "none");
 %! [t, y] = ode15s ('rob',[0 10 100], [1;0;0], opt1);
 %! [t2, y2] = ode15s ('rob',[0 10 100], [1;0;0], opt2);
 %! assert ([numel(t2)], numel(t));
-%!test  # Events option add further elements in sol
+
+## Events option add further elements in sol
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @feve, "Mass", @massdensefunstate,
 %!               "MStateDependence", "none");
 %! sol = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert (isfield (sol, "ie"));
 %! assert (sol.ie, [0;1]);
 %! assert (isfield (sol, "xe"));
 %! assert (isfield (sol, "ye"));
 %! assert (sol.x(end), 10, 1);
-%!test  # Events option, five output arguments
+
+## Events option, five output arguments
+%!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @feve, "Mass", @massdensefunstate,
 %!               "MStateDependence", "none");
 %! [t, y, te, ye, ie] = ode15s (@rob,[0 100], [1;0;0], opt);
 %! assert ([t(end), te', ie'], [10, 10, 10, 0, 1], [1, 0.5, 0.5, 0, 0]);
-
-
-
-
-
-
-
-
