# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302099377 -7200
#      Wed Apr 06 16:16:17 2011 +0200
# Node ID 0c9cf8be675e7bb2d6773bac784108b4bd534ff0
# Parent  642978643d3f66429d5f14ebd31029915ea6051b
Extended pending request skeleton to support other types of requests.

diff --git a/gui//client.h b/gui//client.h
--- a/gui//client.h
+++ b/gui//client.h
@@ -77,38 +77,38 @@ public:
         return content;
     }
 
     QString fetchError() {
         QString content = m_errorBuffer, m_errorBuffer = "";
         return content;
     }
 
-    void query(QString request) {
+    void query(QString request, QRegExp terminator = QRegExp("(\r\n | \n\r | \n)+")) {
+        m_terminator = terminator;
         QMetaObject::invokeMethod(m_client, "send", Q_ARG(QString, request));
     }
 
 signals:
-    void dataIncome();
+    void answered();
 
 private slots:
     void receiveData(QString data) {
-        QRegExp octavePrompt("octave:[0-9]+>");
         m_dataBuffer += data;
-        if(octavePrompt.indexIn(m_dataBuffer) != -1)
-            emit dataIncome();
+        if(m_terminator.indexIn(m_dataBuffer) != -1)
+            emit answered();
     }
 
     void receiveError(QString error) {
-        QRegExp octavePrompt("octave:[0-9]+>");
         m_errorBuffer += error;
-        if(octavePrompt.indexIn(m_dataBuffer) != -1)
-            emit dataIncome();
+        if(m_terminator.indexIn(m_dataBuffer) != -1)
+            emit answered();
     }
 
 private:
     Client *m_client;
     QString m_dataBuffer;
     QString m_errorBuffer;
     QString m_request;
+    QRegExp m_terminator;
 };
 
 #endif // CLIENT_H
diff --git a/gui//octaveterminal.cpp b/gui//octaveterminal.cpp
--- a/gui//octaveterminal.cpp
+++ b/gui//octaveterminal.cpp
@@ -61,30 +61,33 @@ void OctaveTerminal::blockUserInput() {
 void OctaveTerminal::allowUserInput() {
     m_commandLine->setEnabled(true);
     m_commandLine->setFocus();
 }
 
 void OctaveTerminal::assignClient(Client *client) {
     m_client = client;
     allowUserInput();
-    addRequest("info\n");
+
+    // Sends an empty command to make the welcome message show up.
+    addRequest("\n");
 }
 
 void OctaveTerminal::showEnvironment() {
     addRequest("who\n");
 }
 
+
+void OctaveTerminal::addRequest(QString command) {
+    blockUserInput();
+    m_pendingRequest = new PendingRequest(m_client);
+    connect(m_pendingRequest, SIGNAL(answered()), this, SLOT(handleAnsweredRequest()));
+    m_pendingRequest->query(command, QRegExp("octave:[0-9]+>"));
+}
+
 void OctaveTerminal::handleAnsweredRequest() {
     allowUserInput();
     QString data = m_pendingRequest->fetchData();
     QString error = m_pendingRequest->fetchError();
     m_octaveOutput->append(data);
     m_octaveOutput->append(error);
     delete m_pendingRequest;
 }
-
-void OctaveTerminal::addRequest(QString command) {
-    blockUserInput();
-    m_pendingRequest = new PendingRequest(m_client);
-    connect(m_pendingRequest, SIGNAL(dataIncome()), this, SLOT(handleAnsweredRequest()));
-    m_pendingRequest->query(command);
-}
