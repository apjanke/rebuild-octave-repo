# HG changeset patch
# User jwe
# Date 787247627 0
#      Mon Dec 12 15:53:47 1994 +0000
# Node ID 3e25eb05b6c69ec0d2994828d4736745d90acac8
# Parent  fe71abb4345784cc62d01eb9512ddd4e24e4dd7e
[project @ 1994-12-12 15:53:47 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -104,16 +104,17 @@ static int is_plot_keyword (char *s);
 static int is_keyword (char *s);
 static char *plot_style_token (char *s);
 static symbol_record *lookup_identifier (char *s);
 static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static char *strip_trailing_whitespace (char *s);
+static void handle_number (char *yytext);
 static int handle_close_brace (char *yytext);
 static int handle_identifier (char *s, int next_tok_is_eq);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	[\n]
@@ -399,52 +400,28 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       TOK_RETURN (']');
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
-    double value;
-    int nread = sscanf (yytext, "%lf", &value);
-    assert (nread == 1);
-    quote_is_transpose = 1;
-    cant_be_identifier = 1;
-    convert_spaces_to_comma = 1;
-    if (plotting && ! in_plot_range)
-      past_plot_range = 1;
-    yylval.tok_val = new token (value, yytext, input_line_number,
-				current_input_column);
-    token_stack.push (yylval.tok_val);
-    current_input_column += yyleng;
-    do_comma_insert_check ();
+    handle_number (yytext);
     return IMAG_NUM;
   }
 
 %{
 // Real numbers.  Don't grab the `.' part of a dot operator as part of
 // the constant.
 %}
 
 {D}+/\.[\*/\\^'] |
 {NUMBER} {
-    double value;
-    int nread = sscanf (yytext, "%lf", &value);
-    assert (nread == 1);
-    quote_is_transpose = 1;
-    cant_be_identifier = 1;
-    convert_spaces_to_comma = 1;
-    if (plotting && ! in_plot_range)
-      past_plot_range = 1;
-    yylval.tok_val = new token (value, yytext, input_line_number,
-				current_input_column);
-    token_stack.push (yylval.tok_val);
-    current_input_column += yyleng;
-    do_comma_insert_check ();
+    handle_number (yytext);
     return NUM;
   }
 
 %{
 // Eat whitespace.  Whitespace inside matrix constants is handled by
 // the <MATRIX> start state code above.
 %}
 
@@ -1408,16 +1385,41 @@ strip_trailing_whitespace (char *s)
 
   t = strchr (retval, '\t');
   if (t)
     *t = '\0';
 
   return retval;
 }
 
+static void
+handle_number (char *yytext)
+{
+  double value;
+  int nread = sscanf (yytext, "%lf", &value);
+
+  assert (nread == 1);
+
+  quote_is_transpose = 1;
+  cant_be_identifier = 1;
+  convert_spaces_to_comma = 1;
+
+  if (plotting && ! in_plot_range)
+    past_plot_range = 1;
+
+  yylval.tok_val = new token (value, yytext, input_line_number,
+			      current_input_column);
+
+  token_stack.push (yylval.tok_val);
+
+  current_input_column += yyleng;
+
+  do_comma_insert_check ();
+}
+
 static int
 handle_close_brace (char *yytext)
 {
   fixup_column_count (yytext);
 
   if (! in_brace_or_paren.empty ())
     {
       in_brace_or_paren.pop ();
