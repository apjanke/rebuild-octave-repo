# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285924564 14400
#      Fri Oct 01 05:16:04 2010 -0400
# Node ID 8a3b7e8fcbbcac05b4c1ce60a0359750179ca5b8
# Parent  a22f3a673f3334c530d0b7c173574d618e4fe331
graphics.cc, graphics.h.in, genprops.awk: use octave_map and octave_scalar_map instead of Octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2010-10-01  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (base_properties::get_dynamic): Create and return
+	octave_scalar_map object instead of Octave_map.
+	(base_graphics_object::remove_all_listeners): Use octave_map
+	instead of Octave_map.
+	(base_graphics_object::values_as_string): Likewise.
+
+	* graphics.h.in, graphics.cc (property_list::as_struct):
+	Return octave_scalar_map instead of Octave_map.
+	(base_graphics_object::values_as_struct): Likewise.
+	(graphics_object:values_as_struct): Likewise.
+	(graphics_object::set): Accept octave_map instead of Octave_map.
+
+	* genprops.awk: Use octave_map instead of Octave_map in
+	generated code.  Convert second arg to octave_value in call to
+	octave_map::assign.
+
 2010-10-01  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_struct::as_octave_value): Use octave_map
 	instead of Octave_map.
 
 2010-10-01  John W. Eaton  <jwe@octave.org>
 
 	* ov-base.h: Delete forward decl for Octave_map class.
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -461,31 +461,31 @@ function emit_source ()
     else
       printf ("  else\n    base_properties::set (pname, val);\n}\n\n");
 
     ## get "all" method
 
     if (base)
     {
       printf ("octave_value\nbase_properties::get (bool all) const\n{\n");
-      printf ("  Octave_map m = get_dynamic (all).map_value ();\n\n");
+      printf ("  octave_map m = get_dynamic (all).map_value ();\n\n");
     }
     else
     {
       printf ("octave_value\n%s::properties::get (bool all) const\n{\n", class_name);
-      printf ("  Octave_map m = base_properties::get (all).map_value ();\n\n");
+      printf ("  octave_map m = base_properties::get (all).map_value ();\n\n");
     }
 
     for (i = 1; i <= idx; i++)
     {
       if (hidden[i])
-        printf ("  if (all)\n    m.assign (\"%s\", get_%s ()%s);\n", name[i], name[i],
+        printf ("  if (all)\n    m.assign (\"%s\", octave_value (get_%s ()%s));\n", name[i], name[i],
                 (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : ""));
       else
-        printf ("  m.assign (\"%s\", get_%s ()%s);\n", name[i], name[i],
+        printf ("  m.assign (\"%s\", octave_value (get_%s ()%s));\n", name[i], name[i],
                 (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : ""));
     }
 
     printf ("\n  return m;\n}\n\n");
 
     ## get "one" method
 
     if (base)
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1543,20 +1543,20 @@ property_list::lookup (const caseless_st
                 retval = q->second;
             }
         }
     }
 
   return retval;
 }
 
-Octave_map
+octave_scalar_map
 property_list::as_struct (const std::string& prefix_arg) const
 {
-  Octave_map m;
+  octave_scalar_map m;
 
   for (plist_map_const_iterator p = begin (); p != end (); p++)
     {
       std::string prefix = prefix_arg + p->first;
 
       const pval_map_type pval_map = p->second;
 
       for (pval_map_const_iterator q = pval_map.begin ();
@@ -1679,19 +1679,19 @@ graphics_object::set (const Array<std::s
 %!error <set: number of names must match number of value columns>
 %!  set (gcf, "visible", "off");
 %!  h = plot (1:10, 10:-1:1, 1:10, 1:10);
 %!  set (h, {"linewidth"}, {10, "x"; 5, "o"});
 */
 
 // Set properties given in a struct array
 void
-graphics_object::set (const Octave_map& m)
-{
-  for (Octave_map::const_iterator p = m.begin ();
+graphics_object::set (const octave_map& m)
+{
+  for (octave_map::const_iterator p = m.begin ();
        p != m.end (); p++)
     {
       caseless_str name  = m.key (p);
 
       octave_value val = octave_value (m.contents (p).elem (m.numel () - 1));
 
       set_value_or_default (name, val);
 
@@ -2081,17 +2081,17 @@ base_properties::get_dynamic (const case
     error ("get: unknown property \"%s\"", name.c_str ());
 
   return retval;
 }
 
 octave_value
 base_properties::get_dynamic (bool all) const
 {
-  Octave_map m;
+  octave_scalar_map m;
 
   for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.begin ();
        it != all_props.end (); ++it)
     if (all || ! it->second.is_hidden ())
       m.assign (it->second.get_name (), it->second.get ());
 
   return m;
 }
@@ -2464,19 +2464,19 @@ base_graphics_object::update_axis_limits
     }
   else
     error ("base_graphics_object::update_axis_limits: invalid graphics object");
 }
 
 void
 base_graphics_object::remove_all_listeners (void)
 {
-  Octave_map m = get (true).map_value ();
-
-  for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+  octave_map m = get (true).map_value ();
+
+  for (octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
     {
       // FIXME -- there has to be a better way.  I think we want to
       // ask whether it is OK to delete the listener for the given
       // property.  How can we know in advance that it will be OK?
 
       unwind_protect frame;
 
       frame.protect_var (discard_error_messages);
@@ -2493,19 +2493,19 @@ base_graphics_object::remove_all_listene
 
 std::string
 base_graphics_object::values_as_string (void)
 {
   std::string retval;
 
   if (valid_object ())
     {
-      Octave_map m = get ().map_value ();
+      octave_map m = get ().map_value ();
   
-      for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+      for (octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
         {
           if (pa->first != "children")
             {
               property p = get_properties ().get_property (pa->first);
 
               if (p.ok () && ! p.is_hidden ())
                 {
                   retval += "\n\t" + std::string (pa->first) + ":  "; 
@@ -2518,38 +2518,38 @@ base_graphics_object::values_as_string (
         retval += "\n";
     }
   else
     error ("base_graphics_object::values_as_string: invalid graphics object");
 
   return retval;
 }
 
-Octave_map
+octave_scalar_map
 base_graphics_object::values_as_struct (void)
 {
-  Octave_map retval;
+  octave_scalar_map retval;
 
   if (valid_object ())
     {
-      Octave_map m = get ().map_value ();
+      octave_scalar_map m = get ().scalar_map_value ();
   
-      for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+      for (octave_scalar_map::const_iterator pa = m.begin ();
+           pa != m.end (); pa++)
         {
           if (pa->first != "children")
             {
               property p = get_properties ().get_property (pa->first);
 
               if (p.ok () && ! p.is_hidden ())
                 {
                   if (p.is_radio ())
-                    retval.assign (p.get_name (), 
-                                   octave_value (p.values_as_cell ()));
+                    retval.assign (p.get_name (), p.values_as_cell ());
                   else
-                    retval.assign (p.get_name (), octave_value (Cell ()));
+                    retval.assign (p.get_name (), Cell ());
                 }
             }
         }
     }
   else
     error ("base_graphics_object::values_as_struct: invalid graphics object");
 
   return retval;
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1614,17 +1614,17 @@ public:
     return plist_map.find (go_name);
   }
 
   plist_map_const_iterator find (const std::string& go_name) const
   {
     return plist_map.find (go_name);
   }
 
-  Octave_map as_struct (const std::string& prefix_arg) const;
+  octave_scalar_map as_struct (const std::string& prefix_arg) const;
 
 private:
   plist_map_type plist_map;
 };
 
 // ---------------------------------------------------------------------
 
 class graphics_backend;
@@ -2111,17 +2111,17 @@ public:
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
   virtual std::string values_as_string (void);
 
-  virtual Octave_map values_as_struct (void);
+  virtual octave_scalar_map values_as_struct (void);
 
   virtual graphics_handle get_parent (void) const
   {
     if (valid_object ())
       return get_properties ().get_parent ();
     else
       {
         error ("base_graphics_object::get_parent: invalid graphics object");
@@ -2297,17 +2297,17 @@ public:
     rep->set (name, val);
   }
 
   void set (const octave_value_list& args);
 
   void set (const Array<std::string>& names, const Cell& values,
             octave_idx_type row);
 
-  void set (const Octave_map& m);
+  void set (const octave_map& m);
 
   void set_value_or_default (const caseless_str& name,
                              const octave_value& val);
 
   void set_defaults (const std::string& mode) { rep->set_defaults (mode); }
 
   octave_value get (bool all = false) const { return rep->get (all); }
 
@@ -2343,17 +2343,17 @@ public:
 
   octave_value get_factory_defaults (void) const
   {
     return rep->get_factory_defaults ();
   }
 
   std::string values_as_string (void) { return rep->values_as_string (); }
 
-  Octave_map values_as_struct (void) { return rep->values_as_struct (); }
+  octave_map values_as_struct (void) { return rep->values_as_struct (); }
 
   graphics_handle get_parent (void) const { return rep->get_parent (); }
 
   graphics_handle get_handle (void) const { return rep->get_handle (); }
 
   void remove_child (const graphics_handle& h) { rep->remove_child (h); }
 
   void adopt (const graphics_handle& h) { rep->adopt (h); }
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -215,17 +215,17 @@ public:
     { return fieldnames (); }
 
   // get contents of a given field. empty value if not exist.
   octave_value getfield (const std::string& key) const;
 
   // set contents of a given field. add if not exist.
   void setfield (const std::string& key, const octave_value& val);
   void assign (const std::string& k, const octave_value& val)
-    { setfield (k, val); } 
+    { setfield (k, val); }
 
   // remove a given field. do nothing if not exist.
   void rmfield (const std::string& key);
   void del (const std::string& k) { rmfield (k); }
 
   // return a copy with fields ordered, optionally along with permutation.
   octave_scalar_map orderfields (void) const;
   octave_scalar_map orderfields (Array<octave_idx_type>& perm) const;
