# HG changeset patch
# User Rik <rik@octave.org>
# Date 1350008009 25200
#      Thu Oct 11 19:13:29 2012 -0700
# Node ID b9b9795a7cd99f2cbe96f559cfd9b2f34da0d5fb
# Parent  b3762b89c3c0756fb011b302ef8dcf70328b4b40
build: Build FLTK-associated DOCSTRINGS even when HAVE_FLTK is 0 (bug #37541).

* libinterp/dldfcn/__init_fltk__.cc(F__init_fltk__, F__fltk_redraw__,
F__fltk_maxtime__, F__have_fltk__): Define docstrings for these functions.
Use '#ifdef HAVE_FLTK' around function bodies.

* libinterp/dldfcn/__fltk_uigetfile__.cc(F__fltk_uigetfile__): Define
docstring for function.  Use '#ifdef HAVE_FLTK' around function body..

diff --git a/libinterp/dldfcn/__fltk_uigetfile__.cc b/libinterp/dldfcn/__fltk_uigetfile__.cc
--- a/libinterp/dldfcn/__fltk_uigetfile__.cc
+++ b/libinterp/dldfcn/__fltk_uigetfile__.cc
@@ -19,40 +19,43 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#if defined (HAVE_FLTK)
+#ifdef HAVE_FLTK
 
 #ifdef WIN32
 #define WIN32_LEAN_AND_MEAN
 #endif
 
 #include <FL/Fl.H>
 #include <FL/Fl_File_Chooser.H>
 
 // FLTK headers may include X11/X.h which defines Complex, and that
 // conflicts with Octave's Complex typedef.  We don't need the X11
 // Complex definition in this file, so remove it before including Octave
 // headers which may require Octave's Complex typedef.
 #undef Complex
 
+#endif
+
 #include "defun-dld.h"
 #include "file-ops.h"
 
 DEFUN_DLD (__fltk_uigetfile__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __fltk_uigetfile__ (@dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
+#ifdef HAVE_FLTK
   // Expected argument list:
   //
   //   args(0) ... FileFilter in fltk format
   //   args(1) ... Title
   //   args(2) ... Default Filename
   //   args(3) ... PostionValue [x,y]
   //   args(4) ... SelectValue "on"/"off"/"dir"/"create"
 
@@ -127,16 +130,19 @@ Undocumented internal function.\n\
           retval(2) = fc.filter_value () + 1;
         }
     }
 
   fc.hide ();
   Fl::flush ();
 
   return retval;
+#else
+  error ("__fltk_uigetfile__: not available without OpenGL and FLTK libraries");
+  return octave_value ();
+#endif
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
-#endif
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -33,17 +33,17 @@ To initialize:
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 
-#if defined (HAVE_FLTK)
+#ifdef HAVE_FLTK
 
 #include <map>
 #include <set>
 #include <sstream>
 #include <iostream>
 
 #ifdef WIN32
 #define WIN32_LEAN_AND_MEAN
@@ -1979,66 +1979,95 @@ public:
         feval ("remove_input_event_hook", args, 0);
 
         // FIXME ???
         Fl::wait (fltk_maxtime);
       }
   }
 };
 
+#endif
+
 // Initialize the fltk graphics toolkit.
 
-DEFUN_DLD (__init_fltk__, , , "")
+DEFUN_DLD (__init_fltk__, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __init_fltk__ ()\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
+#ifdef HAVE_FLTK
   if (! toolkit_loaded)
     {
       mlock ();
 
       graphics_toolkit tk (new fltk_graphics_toolkit ());
       gtk_manager::load_toolkit (tk);
       toolkit_loaded = true;
 
       octave_value_list args;
       args(0) = "__fltk_redraw__";
       feval ("add_input_event_hook", args, 0);
     }
-
-  octave_value retval;
-  return retval;
-}
-
-DEFUN_DLD (__fltk_redraw__, , , "")
-{
-  __fltk_redraw__ ();
+#else
+  error ("__init_fltk__: not available without OpenGL and FLTK libraries");
+#endif
 
   return octave_value ();
 }
 
-DEFUN_DLD (__fltk_maxtime__, args, ,"")
+DEFUN_DLD (__fltk_redraw__, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __fltk_redraw__ ()\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
+#ifdef HAVE_FLTK
+  __fltk_redraw__ ();
+#else
+  error ("__fltk_redraw__: not available without OpenGL and FLTK libraries");
+#endif
+
+  return octave_value ();
+}
+
+DEFUN_DLD (__fltk_maxtime__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {@var{maxtime} =} __fltk_maxtime__ ()\n\
+@deftypefnx {Loadable Function} {} __fltk_maxtime__ (@var{maxtime})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+#ifdef HAVE_FLTK
   octave_value retval = fltk_maxtime;
 
   if (args.length () == 1)
     {
       if (args(0).is_real_scalar ())
         fltk_maxtime = args(0).double_value ();
       else
         error ("argument must be a real scalar");
     }
 
   return retval;
+#else
+  error ("__fltk_maxtime__: not available without OpenGL and FLTK libraries");
+  return octave_value ();
+#endif
 }
 
-#endif
-
-DEFUN_DLD (__have_fltk__, , , "")
+DEFUN_DLD (__have_fltk__, , ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {@var{FLTK_available} =} __have_fltk__ ()\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 
-#if defined (HAVE_FLTK)
+#ifdef HAVE_FLTK
   retval = true;
 #else
   retval = false;
 #endif
 
   return retval;
 }
 
@@ -2054,17 +2083,17 @@ DEFUN_DLD (mouse_wheel_zoom, args, ,
 @deftypefn  {Built-in Function} {@var{speed} =} mouse_wheel_zoom ()\n\
 @deftypefnx {Built-in Function} {} mouse_wheel_zoom (@var{speed})\n\
 Query or set the mouse wheel zoom factor.\n\
 \n\
 This function is currently implemented only for the FLTK graphics toolkit.\n\
 @seealso{gui_mode}\n\
 @end deftypefn")
 {
-#if defined (HAVE_FLTK)
+#ifdef HAVE_FLTK
   octave_value retval = wheel_zoom_speed;
 
   if (args.length () == 1)
     {
       if (args(0).is_real_scalar ())
         wheel_zoom_speed = args(0).double_value ();
       else
         error ("mouse_wheel_zoom: SPEED must be a real scalar");
@@ -2094,17 +2123,17 @@ Allows rotating and zooming of current a
 @item 'none'\n\
 Mouse inputs have no effect.\n\
 @end table\n\
 \n\
 This function is currently implemented only for the FLTK graphics toolkit.\n\
 @seealso{mouse_wheel_zoom}\n\
 @end deftypefn")
 {
-#if defined (HAVE_FLTK)
+#ifdef HAVE_FLTK
   caseless_str mode_str;
 
   if (gui_mode == pan_zoom)
     mode_str = "2d";
   else if (gui_mode == rotate_zoom)
     mode_str = "3d";
   else
     mode_str = "none";
