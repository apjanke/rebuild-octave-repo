# HG changeset patch
# User jwe
# Date 1028877542 0
#      Fri Aug 09 07:19:02 2002 +0000
# Node ID ef75c970c8f56809e0a3b191b6d340f7ee847883
# Parent  af3a0264eefcb60e8cc9ec633ab5f93a9fe67e78
[project @ 2002-08-09 07:19:02 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,22 @@
 2002-08-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* deprecated/is_bool.m: New file.
+	* deprecated/is_complex.m: New file.
+	* deprecated/is_global.m: New file.
+	* deprecated/is_list.m: New file.
+	* deprecated/is_matrix.m: New file.
+	* deprecated/is_scalar.m: New file.
+	* deprecated/is_square.m: New file.
+	* deprecated/is_stream.m: New file.
+	* deprecated/is_struct.m: New file.
+	* deprecated/is_symmetric.m: New file.
+	* deprecated/is_vector.m: New file.
+
 	* general/isscalar.m: Rename from is_scalar.m.
 	* general/issquare.m: Rename from is_square.m.
 	* general/issymmetric.m: Rename from is_symmetric.m.
 	* general/isvector.m: Rename from is_vector.m.
 
 2002-08-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* statistics/base/mean.m: Allow empty matrices.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2002-08-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* variables.cc (Fisglobal): Rename from Fis_global.
+	* file-io.cc (Fisstream): Rename from Fis_stream.
+	* data.cc (Fisbool): Rename from Fis_bool.
+	(Fiscomplex): Rename from Fis_complex.
+	(Fislist): Rename from Fis_list.
+	(Fismatrix): Rename from Fis_matrix.
+	(Fisstruct): Rename from Fis_struct.
+
 	* parse.y (switch_case): Make list of command optional.
 
 2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pr-output.cc (pr_max_internal): Use octave_is_NaN_or_NA instead
 	of xisnan.
 	(pr_min_internal): Likewise.
 	(output_max_field_width): Likewise.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -695,46 +695,46 @@ This function is equivalent to computing
 sum (x .* conj (x), dim)\n\
 @end example\n\
 but it uses less memory and avoids calling conj if @var{x} is real.\n\
 @end deftypefn")
 {
   DATA_REDUCTION (sumsq);
 }
 
-DEFUN (is_bool, args, ,
+DEFUN (isbool, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Functio} {} is_bool (@var{x})\n\
+@deftypefn {Built-in Functio} {} isbool (@var{x})\n\
 Return true if @var{x} is a boolean object.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_bool_type ();
   else
-    print_usage ("is_bool");
+    print_usage ("isbool");
 
   return retval;
 }
 
-DEFALIAS (islogical, is_bool);
+DEFALIAS (islogical, isbool);
 
-DEFUN (is_complex, args, ,
+DEFUN (iscomplex, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_complex (@var{x})\n\
+@deftypefn {Built-in Function} {} iscomplex (@var{x})\n\
 Return true if @var{x} is a complex-valued numeric object.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_complex_type ();
   else
-    print_usage ("is_complex");
+    print_usage ("iscomplex");
 
   return retval;
 }
 
 DEFUN (isreal, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isreal (@var{x})\n\
 Return true if @var{x} is a real-valued numeric object.\n\
@@ -785,67 +785,67 @@ Return nonzero if @var{x} is a numeric o
   if (args.length () == 1)
     retval = args(0).is_numeric_type ();
   else
     print_usage ("isnumeric");
 
   return retval;
 }
 
-DEFUN (is_list, args, ,
+DEFUN (islist, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_list (@var{x})\n\
+@deftypefn {Built-in Function} {} islist (@var{x})\n\
 Return nonzero if @var{x} is a list.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_list ();
   else
-    print_usage ("is_list");
+    print_usage ("islist");
 
   return retval;
 }
 
-DEFUN (is_matrix, args, ,
+DEFUN (ismatrix, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_matrix (@var{a})\n\
+@deftypefn {Built-in Function} {} ismatrix (@var{a})\n\
 Return 1 if @var{a} is a matrix.  Otherwise, return 0.\n\
 @end deftypefn")
 {
   double retval = 0.0;
 
   if (args.length () == 1)
     {
       octave_value arg = args(0);
 
       if (arg.is_scalar_type () || arg.is_range ())
 	retval = 1.0;
       else if (arg.is_matrix_type ())
 	retval = static_cast<double> (arg.rows () >= 1 && arg.columns () >= 1);
     }
   else
-    print_usage ("is_matrix");
+    print_usage ("ismatrix");
 
   return retval;
 }
 
-DEFUN (is_struct, args, ,
+DEFUN (isstruct, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_struct (@var{expr})\n\
+@deftypefn {Built-in Function} {} isstruct (@var{expr})\n\
 Return 1 if the value of the expression @var{expr} is a structure.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_map ();
   else
-    print_usage ("is_struct");
+    print_usage ("isstruct");
 
   return retval;
 }
 
 DEFUN (struct_elements, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} struct_elements (@var{struct})\n\
 Return a list of strings naming the elements of the structure\n\
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -129,28 +129,28 @@ fopen_mode_to_ios_mode (const std::strin
 	retval = std::ios::in | std::ios::out | std::ios::app | std::ios::binary;
       else
 	::error ("invalid mode specified");
     }
 
   return retval;
 }
 
-DEFUN (is_stream, args, ,
+DEFUN (isstream, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_stream (@var{x})\n\
+@deftypefn {Built-in Function} {} isstream (@var{x})\n\
 Return true if @var{x} is a stream object.  Otherwise, return false.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_stream ();
   else
-    print_usage ("is_stream");
+    print_usage ("isstream");
 
   return retval;
 }
 
 DEFUN (fclose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fclose (@var{fid})\n\
 Closes the specified file.  If an error is encountered while trying to\n\
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -319,46 +319,46 @@ looks_like_struct (const std::string& te
       octave_value tmp = eval_string (text, true, parse_status);
 
       retval = (tmp.is_defined () && tmp.is_map ());
     }
 
   return retval;
 }
 
-DEFUN (is_global, args, ,
+DEFUN (isglobal, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} is_global (@var{name})\n\
+@deftypefn {Built-in Function} {} isglobal (@var{name})\n\
 Return 1 if @var{name} is globally visible.  Otherwise, return 0.  For\n\
 example,\n\
 \n\
 @example\n\
 @group\n\
 global x\n\
-is_global (\"x\")\n\
+isglobal (\"x\")\n\
      @result{} 1\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
-  octave_value_list retval = 0.0;
+  octave_value retval = 0.0;
 
   int nargin = args.length ();
 
   if (nargin != 1)
     {
-      print_usage ("is_global");
+      print_usage ("isglobal");
       return retval;
     }
 
   std::string name = args(0).string_value ();
 
   if (error_state)
     {
-      error ("is_global: expecting std::string argument");
+      error ("isglobal: expecting std::string argument");
       return retval;
     }
 
   symbol_record *sr = curr_sym_tab->lookup (name);
 
   retval = static_cast<double> (sr && sr->is_linked_to_global ());
 
   return retval;
