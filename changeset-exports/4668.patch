# HG changeset patch
# User jwe
# Date 1069820919 0
#      Wed Nov 26 04:28:39 2003 +0000
# Node ID 7849788ca4bd8a63a00a2829df33614bc0cb6096
# Parent  e6260247a166e4d5f9389da78c3dcbb5dc8df65e
[project @ 2003-11-26 04:28:39 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2003-11-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-str-mat.cc (CHAR_MATRIX_CONV): New macro.
+	* ov-str-mat.h (octave_char_matrix_str::double_value,
+	octave_char_matrix_str::matrix_value,
+	octave_char_matrix_str::array_value,
+	octave_char_matrix_str::complex_value,
+	octave_char_matrix_str::complex_matrix_value,
+	(octave_char_matrix_str::complex_array_value): Use it.
+
+	* ov-bool-mat.cc (default_numeric_conversion_function):
+	Convert to NDArray, not Matrix.
+	* ov-str-mat.cc (default_numeric_conversion_function): Likewise.
+
+	* ov-range.h (octave_range::array_value): New function.
+	(octave_range::complex_array_value): Likewise.
+	* ov-ch-mat.h (charNDArray::array_value): New function.
+	(charNDArray::complex_array_value): Likewise.
+	* ov-str-mat.h (octave_char_matrix_str::array_value): Likewise.
+	(octave_char_matrix_str::complex_value): Likewise.
+	(octave_char_matrix_str::complex_matrix_value): Likewise.
+	(octave_char_matrix_str::complex_array_value): Likewise.
+
+	* mappers.cc (acosh, log, log10, sqrt):
+	Use octave_Inf instead of DBL_MAX for range limit.
+
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.52.
 	(OCTAVE_API_VERSION): Now api-v3.
 
 	* DLD-FUNCTIONS/rand.cc (do_rand): Pass function name from arg
 	list in calls to error.
 
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -123,21 +123,21 @@ Software Foundation, 59 Temple Place - S
 //     arguments that are expected to create real results.
 //
 //   d_c_map is a pointer to a function that should be called for real
 //     arguments that are expected to create complex results.
 //
 //   c_c_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create complex results.
 //
-//   lo is the lower bound of the range for which real arguments can
-//     become complex.  (e.g., lo == -Inf for sqrt).
+//   lo is the lower bound of the range for which real arguments
+//     return real results (e.g., lo == 0 for sqrt).
 //
-//   hi is the upper bound of the range for which real arguments can
-//     become complex.  (e.g., hi == 0 for sqrt).
+//   hi is the upper bound of the range for which real arguments
+//     return real results (e.g., hi == Inf for sqrt).
 //
 //   ch_map_flag has the following meanings for the ch_map function:
 //
 //     0  =>  this function returns a matrix of ones and zeros
 //     1  =>  this function returns a numeric matrix (any values)
 //     2  =>  this function returns a std::string array
 //
 //   can_ret_cmplx_for_real is a flag that says whether this function
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -192,17 +192,17 @@ abs (3 + 4i)\n\
 @end deftypefn");
 
   DEFUN_MAPPER (acos, 0, 0, 0, acos, 0, acos, -1.0, 1.0, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acos (@var{x})\n\
 Compute the inverse cosine of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (acosh, 0, 0, 0, acosh, 0, acosh, 1.0, DBL_MAX, 0, 1,
+  DEFUN_MAPPER (acosh, 0, 0, 0, acosh, 0, acosh, 1.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acosh (@var{x})\n\
 Compute the inverse hyperbolic cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (angle, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
@@ -538,25 +538,25 @@ Return 1 for characters that are hexadec
   DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})\n\
 @deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})\n\
 Return the natural logarithm of the gamma function.\n\
 @end deftypefn\n\
 @seealso{gamma and gammai}");
 
-  DEFUN_MAPPER (log, 0, 0, 0, log, 0, log, 0.0, DBL_MAX, 0, 1,
+  DEFUN_MAPPER (log, 0, 0, 0, log, 0, log, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm for each element of @var{x}.  To compute the\n\
 matrix logarithm, see @ref{Linear Algebra}.\n\
 @end deftypefn\n\
 @seealso{log2, log10, logspace, and exp}");
 
-  DEFUN_MAPPER (log10, 0, 0, 0, log10, 0, log10, 0.0, DBL_MAX, 0, 1,
+  DEFUN_MAPPER (log10, 0, 0, 0, log10, 0, log10, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log10 (@var{x})\n\
 Compute the base-10 logarithm for each element of @var{x}.\n\
 @end deftypefn\n\
 @seealso{log, log2, logspace, and exp}");
 
   DEFUN_MAPPER (real, 0, 0, 0, real, xreal, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
@@ -603,17 +603,17 @@ Compute the sin of each element of @var{
 @end deftypefn");
 
   DEFUN_MAPPER (sinh, 0, 0, 0, sinh, 0, sinh, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sinh (@var{x})\n\
 Compute the inverse hyperbolic sin of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (sqrt, 0, 0, 0, sqrt, 0, sqrt, 0.0, DBL_MAX, 0, 1,
+  DEFUN_MAPPER (sqrt, 0, 0, 0, sqrt, 0, sqrt, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sqrt (@var{x})\n\
 Compute the square root of @var{x}.  If @var{x} is negative, a complex\n\
 result is returned.  To compute the matrix square root, see\n\
 @ref{Linear Algebra}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (tan, 0, 0, 0, tan, 0, tan, 0.0, 0.0, 0, 0,
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -51,17 +51,17 @@ DEFINE_OCTAVE_ALLOCATOR (octave_bool_mat
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool_matrix,
 				     "bool matrix", "logical");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_bool_matrix&);
 
-  return new octave_matrix (Matrix (v.bool_matrix_value ()));
+  return new octave_matrix (NDArray (v.bool_array_value ()));
 }
 
 type_conv_fcn
 octave_bool_matrix::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -93,21 +93,27 @@ public:
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (matrix.matrix_value ()); }
 
+  NDArray array_value (bool = false) const
+    { return NDArray (matrix); }
+
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix.matrix_value ()); }
 
+  ComplexNDArray complex_array_value (bool = false) const
+    { return ComplexNDArray (matrix); }
+
   charMatrix char_matrix_value (bool = false) const
     { return matrix.matrix_value (); }
 
   charNDArray char_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool, bool) const
     { return octave_value (matrix.matrix_value (), true); }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -145,21 +145,27 @@ public:
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return range.matrix_value (); }
 
+  NDArray array_value (bool = false) const
+    { return range.matrix_value (); }
+
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
+  ComplexNDArray complex_array_value (bool = false) const
+    { return ComplexMatrix (range.matrix_value ()); }
+
   Range range_value (void) const { return range; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -45,19 +45,19 @@ DEFINE_OCTAVE_ALLOCATOR (octave_char_mat
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string", "char");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
-  Matrix m = v.matrix_value (true);
+  NDArray nda = v.array_value (true);
 
-  return error_state ? 0 : new octave_matrix (m);
+  return error_state ? 0 : new octave_matrix (nda);
 }
 
 type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
@@ -126,50 +126,66 @@ octave_char_matrix_str::assign (const oc
 bool
 octave_char_matrix_str::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix_str::valid_as_scalar_index(): not implemented");
   return retval;
 }
 
+#define CHAR_MATRIX_CONV(T, INIT, TNAME, FCN) \
+  T retval INIT; \
+ \
+  if (! force_string_conv) \
+    gripe_invalid_conversion ("string", TNAME); \
+  else \
+    { \
+      if (Vwarn_str_to_num) \
+	gripe_implicit_conversion ("string", TNAME); \
+ \
+      retval = octave_char_matrix::FCN (); \
+    } \
+ \
+  return retval
+
 double
 octave_char_matrix_str::double_value (bool force_string_conv) const
 {
-  double retval = 0;
+  CHAR_MATRIX_CONV (double, = 0, "real scalar", double_value);
+}
 
-  if (! force_string_conv)
-    gripe_invalid_conversion ("string", "real scalar");
-  else
-    {
-      if (Vwarn_str_to_num)
-	gripe_implicit_conversion ("string", "real scalar");
-
-      retval = octave_char_matrix::double_value ();
-    }
-
-  return retval;
+Complex
+octave_char_matrix_str::complex_value (bool force_string_conv) const
+{
+  CHAR_MATRIX_CONV (Complex, = 0, "complex scalar", complex_value);
 }
 
 Matrix
 octave_char_matrix_str::matrix_value (bool force_string_conv) const
 {
-  Matrix retval;
+  CHAR_MATRIX_CONV (Matrix, , "real matrix", matrix_value);
+}
+
+ComplexMatrix
+octave_char_matrix_str::complex_matrix_value (bool force_string_conv) const
+{
+  CHAR_MATRIX_CONV (ComplexMatrix, , "complex matrix", complex_matrix_value);
+}
 
-  if (! force_string_conv)
-    gripe_invalid_conversion ("string", "real matrix");
-  else
-    {
-      if (Vwarn_str_to_num)
-	gripe_implicit_conversion ("string", "real matrix");
+NDArray
+octave_char_matrix_str::array_value (bool force_string_conv) const
+{
+  CHAR_MATRIX_CONV (NDArray, , "real N-d array", array_value);
+}
 
-      retval = octave_char_matrix::matrix_value ();
-    }
-
-  return retval;
+ComplexNDArray
+octave_char_matrix_str::complex_array_value (bool force_string_conv) const
+{
+  CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-d array",
+		    complex_array_value);
 }
 
 string_vector
 octave_char_matrix_str::all_strings (bool, bool) const
 {
   string_vector retval;
 
   if (matrix.ndims () == 2)
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -103,16 +103,24 @@ public:
   bool is_numeric_type (void) const { return false; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   Matrix matrix_value (bool = false) const;
 
+  NDArray array_value (bool = false) const;
+
+  Complex complex_value (bool = false) const;
+
+  ComplexMatrix complex_matrix_value (bool = false) const;
+
+  ComplexNDArray complex_array_value (bool = false) const;
+
   string_vector all_strings (bool pad = false, bool force = false) const;
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
