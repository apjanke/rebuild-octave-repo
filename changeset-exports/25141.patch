# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1523046843 25200
#      Fri Apr 06 13:34:03 2018 -0700
# Node ID c7de02b5b2275c9321c2d4319478791f16e0e2ee
# Parent  032eca5275b9d02711cb474f64f0f128ea2a7701
# Parent  ad6dce96cbca9a9c7e886971b50db557d063616d
maint: merge stable to default

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -15,17 +15,18 @@ dnl Copyright (C) 1993-2018 John W. Eato
 ### GNU General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, see
 ### <https://www.gnu.org/licenses/>.
 
 ### Initialize Autoconf
 AC_PREREQ([2.65])
-AC_INIT([GNU Octave], [4.5.0+], [https://octave.org/bugs.html], [octave])
+AC_INIT([GNU Octave], [4.5.0+], [https://octave.org/bugs.html], [octave],
+        [https://www.gnu.org/software/octave/])
 
 ### Declare version numbers
 
 dnl Note that the version number is duplicated here and in AC_INIT because
 dnl AC_INIT requires it to be static, not computed from shell variables.
 
 OCTAVE_MAJOR_VERSION=4
 OCTAVE_MINOR_VERSION=5
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -307,19 +307,19 @@ provide improved performance for the fun
 
 @item QScintilla
 Source code highlighter and manipulator; a Qt port of Scintilla
 (@url{http://www.riverbankcomputing.co.uk/software/qscintilla}).
 QScintilla is used for syntax highlighting and code completion in the
 GUI.
 
 @item Qt
-GUI and utility libraries (@url{}).  Qt is required for building the GUI.
-It is a large framework, but the only components required are the GUI,
-core, and network modules.
+GUI and utility libraries (@url{https://www.qt.io}).  Qt is required for
+building the GUI.  It is a large framework, but the only components
+required are the GUI, core, and network modules.
 
 @item SuiteSparse
 Sparse matrix factorization library
 (@url{http://www.cise.ufl.edu/research/sparse/SuiteSparse}).
 SuiteSparse is required to provide sparse matrix factorizations and
 solution of linear equations for sparse systems.
 
 @item SUNDIALS
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -542,43 +542,59 @@ initialize_jvm (void)
   JNI_CreateJavaVM_t create_vm = reinterpret_cast<JNI_CreateJavaVM_t>
                                  (lib.search ("JNI_CreateJavaVM"));
   JNI_GetCreatedJavaVMs_t get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t>
                                    (lib.search ("JNI_GetCreatedJavaVMs"));
 
   if (! create_vm || ! get_vm)
     {
 #if defined (OCTAVE_USE_WINDOWS_API)
-      // In windows, find the location of the JRE from the registry
+      // In Windows, find the location of the JRE from the registry
       // and load the symbol from the dll.
-      std::string key, value;
-
-      key = R"(software\javasoft\java runtime environment)";
-
-      value = octave::sys::env::getenv ("JAVA_VERSION");
+      std::string key, jversion, value;
+
+      // First search for JRE >= 9
+      key = R"(software\javasoft\jre)";
+
+      jversion = octave::sys::env::getenv ("JAVA_VERSION");
       octave_value regval;
       LONG retval;
-      if (value.empty ())
+      if (jversion.empty ())
         {
           value = "CurrentVersion";
           retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value, regval);
 
           if (retval != ERROR_SUCCESS)
+            {
+              // Search for JRE < 9
+              key = R"(software\javasoft\java runtime environment)";
+              retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value,
+                                         regval);
+            }
+
+          if (retval != ERROR_SUCCESS)
             error ("unable to find Java Runtime Environment: %s::%s",
                    key.c_str (), value.c_str ());
 
-          value = regval.xstring_value (
+          jversion = regval.xstring_value (
             "initialize_jvm: registry value \"%s\" at \"%s\" must be a string",
             value.c_str (), key.c_str ());
         }
 
-      key = key + '\\' + value;
+      key = key + '\\' + jversion;
       value = "RuntimeLib";
       retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value, regval);
       if (retval != ERROR_SUCCESS)
+        {
+          // Search for JRE < 9
+          key = R"(software\javasoft\java runtime environment\)" + jversion;
+          retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value, regval);
+        }
+
+      if (retval != ERROR_SUCCESS)
         error ("unable to find Java Runtime Environment: %s::%s",
                key.c_str (), value.c_str ());
 
       jvm_lib_path = regval.xstring_value (
             "initialize_jvm: registry value \"%s\" at \"%s\" must be a string",
             value.c_str (), key.c_str ());
 
       if (jvm_lib_path.empty ())
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -394,16 +394,17 @@ function [local_packages, global_package
       endif
 
     case "install"
       if (isempty (files))
         error ("pkg: install action requires at least one filename");
       endif
 
       local_files = {};
+      tmp_dir = tempname ();
       unwind_protect
 
         if (octave_forge)
           [urls, local_files] = cellfun ("get_forge_download", files,
                                          "uniformoutput", false);
           [files, succ] = cellfun ("urlwrite", urls, local_files,
                                    "uniformoutput", false);
           succ = [succ{:}];
@@ -412,17 +413,17 @@ function [local_packages, global_package
             error ("pkg: could not download file %s from url %s",
                    local_files{i}, urls{i});
           endif
         else
           ## If files do not exist, maybe they are not local files.
           ## Try to download them.
           external_files_mask = ! cellfun (@exist, files, {"file"});
           if (any (external_files_mask))
-            [success, msg] = mkdir (tmp_dir = tempname ());
+            [success, msg] = mkdir (tmp_dir);
             if (success != 1)
               error ("pkg: failed to create temporary directory: %s", msg);
             endif
 
             for file_idx = find (external_files_mask)
 
               [~, fname, fext] = fileparts (files{file_idx});
               local_files{end+1} = fullfile (tmp_dir, [fname fext]);
