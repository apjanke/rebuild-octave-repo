# HG changeset patch
# User jwe
# Date 845398245 0
#      Tue Oct 15 16:50:45 1996 +0000
# Node ID 31a279f310705cabaf0b888709a4cd86fa220ee4
# Parent  367485171742eff5e77eff15170f29ca9f76325e
[project @ 1996-10-15 16:50:45 by jwe]
ov-str-mat.h

diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -45,17 +45,17 @@ const string octave_char_matrix_str::t_n
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-octave_value::numeric_conv_fcn
+octave_value::type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
 octave_char_matrix_str::index (const octave_value_list& idx) const
 {
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -43,18 +43,18 @@ octave_value_typeinfo *octave_value_type
 
 template class Array<octave_value::binary_op_fcn>;
 template class Array2<octave_value::binary_op_fcn>;
 template class Array3<octave_value::binary_op_fcn>;
 
 template class Array<octave_value::assign_op_fcn>;
 template class Array2<octave_value::assign_op_fcn>;
 
-template class Array<octave_value::widening_op_fcn>;
-template class Array2<octave_value::widening_op_fcn>;
+template class Array<octave_value::type_conv_fcn>;
+template class Array2<octave_value::type_conv_fcn>;
 
 int
 octave_value_typeinfo::register_type (const string& name)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_type (name);
@@ -88,17 +88,17 @@ octave_value_typeinfo::register_pref_ass
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_pref_assign_conv (t_lhs, t_rhs, t_result);
 }
 
 bool
 octave_value_typeinfo::register_widening_op (int t, int t_result,
-					     octave_value::widening_op_fcn f)
+					     octave_value::type_conv_fcn f)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_widening_op (t, t_result, f);
 }
 
 int
@@ -120,17 +120,17 @@ octave_value_typeinfo::do_register_type 
 
       binary_ops.resize ((int) octave_value::num_binary_ops, len, len,
 			 (octave_value::binary_op_fcn) 0);
 
       assign_ops.resize (len, len, (octave_value::assign_op_fcn) 0);
 
       pref_assign_conv.resize (len, len, -1);
 
-      widening_ops.resize (len, len, (octave_value::widening_op_fcn) 0);
+      widening_ops.resize (len, len, (octave_value::type_conv_fcn) 0);
     }
 
   types (i) = name;
 
   num_types++;
 
   return i;
 }
@@ -160,17 +160,17 @@ octave_value_typeinfo::do_register_pref_
 {
   pref_assign_conv.checkelem (t_lhs, t_rhs) = t_result;
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_widening_op
-  (int t, int t_result, octave_value::widening_op_fcn f)
+  (int t, int t_result, octave_value::type_conv_fcn f)
 {
   widening_ops.checkelem (t, t_result) = f;
 
   return false;
 }
 
 #include <iostream.h>
 
@@ -188,17 +188,17 @@ octave_value_typeinfo::do_lookup_assign_
 }
 
 int
 octave_value_typeinfo::do_lookup_pref_assign_conv (int t_lhs, int t_rhs)
 {
   return pref_assign_conv.checkelem (t_lhs, t_rhs);
 }
 
-octave_value::widening_op_fcn
+octave_value::type_conv_fcn
 octave_value_typeinfo::do_lookup_widening_op (int t, int t_result)
 {
   return widening_ops.checkelem (t, t_result);
 }
 
 string_vector
 octave_value_typeinfo::do_installed_type_names (void)
 {
diff --git a/src/ov-typeinfo.h b/src/ov-typeinfo.h
--- a/src/ov-typeinfo.h
+++ b/src/ov-typeinfo.h
@@ -46,17 +46,17 @@ public:
 
   static bool register_binary_op (octave_value::binary_op, int, int,
 				  octave_value::binary_op_fcn);
 
   static bool register_assign_op (int, int, octave_value::assign_op_fcn);
 
   static bool register_pref_assign_conv (int, int, int);
 
-  static bool register_widening_op (int, int, octave_value::widening_op_fcn);
+  static bool register_widening_op (int, int, octave_value::type_conv_fcn);
 
   static octave_value::binary_op_fcn
   lookup_binary_op (octave_value::binary_op op, int t1, int t2)
   {
     return instance->do_lookup_binary_op (op, t1, t2);
   }
 
   static octave_value::assign_op_fcn
@@ -66,17 +66,17 @@ public:
   }
 
   static int
   lookup_pref_assign_conv (int t_lhs, int t_rhs)
   {
     return instance->do_lookup_pref_assign_conv (t_lhs, t_rhs);
   }
 
-  static octave_value::widening_op_fcn
+  static octave_value::type_conv_fcn
   lookup_widening_op (int t, int t_result)
   {
     return instance->do_lookup_widening_op (t, t_result);
   }
 
   static string_vector installed_type_names (void)
   {
     return instance->do_installed_type_names ();
@@ -85,53 +85,53 @@ public:
 protected:
 
   octave_value_typeinfo (void)
     : num_types (0), types (32, string ()),
       binary_ops (octave_value::num_binary_ops, 32, 32,
 		  (octave_value::binary_op_fcn) 0),
       assign_ops (32, 32, (octave_value::assign_op_fcn) 0),
       pref_assign_conv (32, 32, -1),
-      widening_ops (32, 32, (octave_value::widening_op_fcn) 0)  { }
+      widening_ops (32, 32, (octave_value::type_conv_fcn) 0)  { }
 
 private:
 
   static octave_value_typeinfo *instance;
 
   int num_types;
 
   Array<string> types;
 
   Array3<octave_value::binary_op_fcn> binary_ops;
 
   Array2<octave_value::assign_op_fcn> assign_ops;
 
   Array2<int> pref_assign_conv;
 
-  Array2<octave_value::widening_op_fcn> widening_ops;
+  Array2<octave_value::type_conv_fcn> widening_ops;
 
   int do_register_type (const string&);
 
   bool do_register_binary_op (octave_value::binary_op, int, int,
 			      octave_value::binary_op_fcn);
 
   bool do_register_assign_op (int, int, octave_value::assign_op_fcn);
 
   bool do_register_pref_assign_conv (int, int, int);
 
-  bool do_register_widening_op (int, int, octave_value::widening_op_fcn);
+  bool do_register_widening_op (int, int, octave_value::type_conv_fcn);
 
   octave_value::binary_op_fcn
   do_lookup_binary_op (octave_value::binary_op, int, int);
 
   octave_value::assign_op_fcn do_lookup_assign_op (int, int);
 
   int do_lookup_pref_assign_conv (int, int);
 
-  octave_value::widening_op_fcn do_lookup_widening_op (int, int);
+  octave_value::type_conv_fcn do_lookup_widening_op (int, int);
 
   string_vector do_installed_type_names (void);
 
   // No copying!
 
   octave_value_typeinfo (const octave_value_typeinfo&);
 
   octave_value_typeinfo& operator = (const octave_value_typeinfo&);
