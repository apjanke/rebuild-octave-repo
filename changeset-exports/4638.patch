# HG changeset patch
# User jwe
# Date 1069304121 0
#      Thu Nov 20 04:55:21 2003 +0000
# Node ID 9d8e84d710a59c2ef39287e109b39da6d1070285
# Parent  2b4e706ff011123df25d3bd071627b392c96f203
[project @ 2003-11-20 04:55:21 by jwe]

diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -218,17 +218,16 @@ read_mat5_binary_element (std::istream& 
   NDArray re;
   oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   int type = 0;
   bool imag;
   bool logicalvar;
   enum arrayclasstype arrayclass;
   FOUR_BYTE_INT junk;
   FOUR_BYTE_INT flags;
-  FOUR_BYTE_INT dimension_length;
   dim_vector dims;
   int len;
   int element_length;
   std::streampos pos;
   TWO_BYTE_INT number;
   number = *(TWO_BYTE_INT *)"\x00\x01";
 
   global = false;
@@ -268,34 +267,36 @@ read_mat5_binary_element (std::istream& 
   imag = (flags & 0x0800) != 0;	// has an imaginary part?
   global = (flags & 0x0400) != 0; // global variable?
   logicalvar = (flags & 0x0200) != 0; // we don't use this yet
   arrayclass = (arrayclasstype)(flags & 0xff);
   read_int (is, swap, junk);	// an "undefined" entry
   
   // dimensions array subelement
   {
-    if (read_mat5_tag (is, swap, type, dimension_length) || type != miINT32)
+    FOUR_BYTE_INT dim_len;
+
+    if (read_mat5_tag (is, swap, type, dim_len) || type != miINT32)
       {
 	error ("load: invalid dimensions array subelement");
 	goto early_read_error;
       }
 
-    int ndims = dimension_length / 4;
+    int ndims = dim_len / 4;
     dims.resize (ndims);
     for (int i = 0; i < ndims; i++)
       {
 	FOUR_BYTE_INT n;
 	read_int (is, swap, n);
 	dims(i) = n;
       }
     re.resize (dims);
 
     std::streampos tmp_pos = is.tellg ();
-    is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (dimension_length) - dimension_length));
+    is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (dim_len) - dim_len));
   }
 
   if (read_mat5_tag (is, swap, type, len) || type != miINT8)
     {
       error ("load: invalid array name subelement");
       goto early_read_error;
     }
 
@@ -763,24 +764,31 @@ save_mat5_binary_element (std::ostream& 
     }
 
   os.write ((char *)&flags, 4);
   os.write ((char *)&junk, 4);
 
   {
     dim_vector dv = tc.dims ();
     int nd = tc.ndims ();
+    int dim_len = 4*nd;
 
-    write_mat5_tag (os, miINT32, 8);
+    write_mat5_tag (os, miINT32, dim_len);
 
     for (int i = 0; i < nd; i++)
       {
-	int n = dv(i);
+	FOUR_BYTE_INT n = dv(i);
 	os.write ((char *)&n, 4);
       }
+
+    if (PAD (dim_len) > dim_len)
+      {
+	static char buf[9]="\x00\x00\x00\x00\x00\x00\x00\x00";
+	os.write (buf, PAD (dim_len) - dim_len);
+      }
   }
 
   // array name subelement
   {
     int namelen = name.length ();
 
     if (namelen > 31)
       namelen = 31; // only 31 char names permitted in mat file
