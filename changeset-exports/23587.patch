# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497378331 25200
#      Tue Jun 13 11:25:31 2017 -0700
# Node ID 0c468af9dc0009cc2324fcb3d941c5cff0ed893a
# Parent  f6c5db0a02e732ddee2b554f980ed4abad7478b8
maint: Deprecate is_object and replace with isobject.

* ov.h (is_object): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isobject): New function.

* bsxfun.cc, cellfun.cc, data.cc, ls-mat5.cc, oct-stream.cc, symtab.h,
variables.cc, ov-base.h, ov-class.cc, ov-class.h, ov-classdef.h,
ov-oncleanup.h, ov-struct.cc, ov.cc, ov.h, op-class.cc, pt-arg-list.cc,
pt-eval.cc, pt-tm-const.cc:
Replace instances of is_object with isobject.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -350,17 +350,17 @@ dimensionality as the other array.
     error ("bsxfun: F must be a string or function handle");
 
   octave_value_list retval;
 
   const octave_value A = args(1);
   const octave_value B = args(2);
 
   if (func.is_builtin_function ()
-      || (func.is_function_handle () && ! A.is_object () && ! B.is_object ()))
+      || (func.is_function_handle () && ! A.isobject () && ! B.isobject ()))
     {
       // This may break if the default behavior is overridden.  But if you
       // override arithmetic operators for builtin classes, you should expect
       // mayhem anyway (constant folding etc).  Querying is_overloaded() may
       // not be exactly what we need here.
       octave_function *fcn_val = func.function_value ();
       if (fcn_val)
         {
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1817,17 +1817,17 @@ num2cell ([1,2;3,4],1)
       else
         {
           if (array.is_single_type ())
             retval = do_num2cell (array.float_array_value (), dimv);
           else
             retval = do_num2cell (array.array_value (), dimv);
         }
     }
-  else if (array.is_object ())
+  else if (array.isobject ())
     retval = do_object2cell (array, dimv);
   else if (array.isstruct ())
     retval = do_num2cell (array.map_value (), dimv);
   else if (array.iscell ())
     retval = do_num2cell (array.cell_value (), dimv);
   else
     err_wrong_type_arg ("num2cell", array);
 
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1728,17 +1728,17 @@ do_class_concat (const octave_value_list
       for (octave_idx_type k = 0; k < len; k++)
         {
           octave_value elt = ovl(k);
 
           std::string t1_type = elt.class_name ();
 
           if (t1_type == dtype)
             tmp(j++) = elt;
-          else if (elt.is_object () || ! elt.isempty ())
+          else if (elt.isobject () || ! elt.isempty ())
             tmp(j++) = attempt_type_conversion (elt, dtype);
         }
 
       tmp.resize (j);
 
       octave_map m = do_single_type_concat_map (tmp, dim);
 
       std::string cname = tmp(0).class_name ();
@@ -1802,17 +1802,17 @@ do_cat (const octave_value_list& xargs, 
             all_real_p = false;
           if (all_cmplx_p && ! (args(i).iscomplex ()
                                 || args(i).isreal ()))
             all_cmplx_p = false;
           if (! any_sparse_p && args(i).issparse ())
             any_sparse_p = true;
           if (! any_cell_p && args(i).iscell ())
             any_cell_p = true;
-          if (! any_class_p && args(i).is_object ())
+          if (! any_class_p && args(i).isobject ())
             any_class_p = true;
         }
 
       if (any_cell_p && ! any_class_p && ! first_elem_is_struct)
         {
           int j = 0;
           for (int i = 0; i < n_args; i++)
             {
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -2161,26 +2161,26 @@ save_mat5_element_length (const octave_v
         }
       else
         {
           const ComplexNDArray m = tc.complex_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
     }
-  else if (tc.isstruct () || tc.is_inline_function () || tc.is_object ())
+  else if (tc.isstruct () || tc.is_inline_function () || tc.isobject ())
     {
       int fieldcnt = 0;
       const octave_map m = tc.map_value ();
       octave_idx_type nel = m.numel ();
 
       if (tc.is_inline_function ())
         // length of "inline" is 6
         ret += 8 + PAD (6 > max_namelen ? max_namelen : 6);
-      else if (tc.is_object ())
+      else if (tc.isobject ())
         {
           size_t classlen = tc.class_name ().length ();
 
           ret += 8 + PAD (classlen > max_namelen ? max_namelen : classlen);
         }
 
       for (octave_map::const_iterator i = m.begin (); i != m.end (); i++)
         fieldcnt++;
@@ -2373,17 +2373,17 @@ save_mat5_binary_element (std::ostream& 
         flags |= MAT_FILE_SINGLE_CLASS;
       else
         flags |= MAT_FILE_DOUBLE_CLASS;
     }
   else if (tc.isstruct ())
     flags |= MAT_FILE_STRUCT_CLASS;
   else if (tc.iscell ())
     flags |= MAT_FILE_CELL_CLASS;
-  else if (tc.is_inline_function () || tc.is_object ())
+  else if (tc.is_inline_function () || tc.isobject ())
     flags |= MAT_FILE_OBJECT_CLASS;
   else
     {
       // FIXME: Should this just error out rather than warn?
       warn_wrong_type_arg ("save", tc);
       error ("save: error while writing '%s' to MAT file", name.c_str ());
     }
 
@@ -2578,21 +2578,21 @@ save_mat5_binary_element (std::ostream& 
       else
         {
           ComplexNDArray m_cmplx = tc.complex_array_value ();
 
           write_mat5_array (os, ::real (m_cmplx), save_as_floats);
           write_mat5_array (os, ::imag (m_cmplx), save_as_floats);
         }
     }
-  else if (tc.isstruct () || tc.is_inline_function () || tc.is_object ())
+  else if (tc.isstruct () || tc.is_inline_function () || tc.isobject ())
     {
-      if (tc.is_inline_function () || tc.is_object ())
+      if (tc.is_inline_function () || tc.isobject ())
         {
-          std::string classname = (tc.is_object () ? tc.class_name () : "inline");
+          std::string classname = (tc.isobject () ? tc.class_name () : "inline");
           size_t namelen = classname.length ();
 
           if (namelen > max_namelen)
             namelen = max_namelen; // Truncate names if necessary
 
           int paddedlength = PAD (namelen);
 
           write_mat5_tag (os, miINT8, namelen);
@@ -2601,17 +2601,17 @@ save_mat5_binary_element (std::ostream& 
           strncpy (paddedname, classname.c_str (), namelen);
           os.write (paddedname, paddedlength);
         }
 
       octave_map m;
 
       octave::load_path& lp = octave::__get_load_path__ ("read_mat5_binary_element");
 
-      if (tc.is_object ()
+      if (tc.isobject ()
           && lp.find_method (tc.class_name (), "saveobj") != "")
         {
           try
             {
               octave_value_list tmp = octave::feval ("saveobj", tc, 1);
 
               m = tmp(0).map_value ();
             }
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -5295,17 +5295,17 @@ namespace octave
       : values (args), val_idx (0), elt_idx (0),
         n_vals (values.length ()), n_elts (0), have_data (false),
         curr_state (ok)
     {
       for (octave_idx_type i = 0; i < values.length (); i++)
         {
           octave_value val = values(i);
 
-          if (val.isstruct () || val.iscell () || val.is_object ())
+          if (val.isstruct () || val.iscell () || val.isobject ())
             err_wrong_type_arg (who, val);
         }
     }
 
     // No copying!
 
     printf_value_cache (const printf_value_cache&) = delete;
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -2639,17 +2639,17 @@ private:
   }
 
   void do_clear_objects (void)
   {
     for (auto& nm_sr : table)
       {
         symbol_record& sr = nm_sr.second;
         octave_value val = sr.varval ();
-        if (val.is_object ())
+        if (val.isobject ())
           nm_sr.second.clear (my_scope);
       }
   }
 
   void do_clear_global (const std::string& name)
   {
     table_iterator p = table.find (name);
 
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -395,17 +395,17 @@ symbol_exist (const std::string& name, c
   if (! (search_any || search_var || search_dir || search_file ||
          search_builtin || search_class))
     error ("exist: unrecognized type argument \"%s\"", type.c_str ());
 
   if (search_any || search_var)
     {
       octave_value val = symbol_table::varval (name);
 
-      if (val.is_constant () || val.is_object ()
+      if (val.is_constant () || val.isobject ()
           || val.is_function_handle ()
           || val.is_anonymous_function ()
           || val.is_inline_function ())
         return 1;
 
       if (search_var)
         return 0;
     }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -364,17 +364,17 @@ public:
   virtual bool is_string (void) const { return false; }
 
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
   virtual bool isstruct (void) const { return false; }
 
-  virtual bool is_object (void) const { return false; }
+  virtual bool isobject (void) const { return false; }
 
   virtual bool is_classdef_object (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -75,17 +75,17 @@ octave_class::octave_class (const octave
   : octave_base_value (), map (m), c_name (id), obsolete_copies (0)
 {
   octave_idx_type n = parents.length ();
 
   for (octave_idx_type idx = 0; idx < n; idx++)
     {
       octave_value parent = parents(idx);
 
-      if (! parent.is_object ())
+      if (! parent.isobject ())
         error ("parents must be objects");
 
       std::string pcnm = parent.class_name ();
 
       if (find_parent_class (pcnm))
         error ("duplicate class in parent tree");
 
       parent_list.push_back (pcnm);
@@ -724,17 +724,17 @@ octave_class::subsasgn_common (const oct
 
             map.assign (idx.front (), key, t_rhs);
 
             count++;
             retval = octave_value (this);
           }
         else
           {
-            if (t_rhs.is_object () || t_rhs.isstruct ())
+            if (t_rhs.isobject () || t_rhs.isstruct ())
               {
                 octave_map rhs_map = t_rhs.xmap_value ("invalid class assignment");
 
                 map.assign (idx.front (), rhs_map);
 
                 count++;
                 retval = octave_value (this);
               }
@@ -805,17 +805,17 @@ octave_class::index_vector (bool require
     error ("no subsindex method defined for class %s",
            class_name ().c_str ());
 
   octave_value_list args;
   args(0) = octave_value (new octave_class (map, c_name, parent_list));
 
   octave_value_list tmp = octave::feval (meth.function_value (), args, 1);
 
-  if (tmp(0).is_object ())
+  if (tmp(0).isobject ())
     error ("subsindex function must return a valid index vector");
 
   // Index vector returned by subsindex is zero based
   // (why this inconsistency Mathworks?), and so we must
   // add one to the value returned as the index_vector method
   // expects it to be one based.
   return do_binary_op (octave_value::op_add, tmp (0),
                        octave_value (1.0)).index_vector (require_integers);
@@ -1096,17 +1096,17 @@ octave_class::reconstruct_parents (void)
   bool might_have_inheritance = false;
   std::string dbgstr = "dork";
 
   // First, check to see if there might be an issue with inheritance.
   for (octave_map::const_iterator it = map.begin (); it != map.end (); it++)
     {
       std::string key = map.key (it);
       Cell        val = map.contents (it);
-      if (val(0).is_object ())
+      if (val(0).isobject ())
         {
           dbgstr = "blork";
           if (key == val(0).class_name ())
             {
               might_have_inheritance = true;
               dbgstr = "cork";
               break;
             }
@@ -1638,33 +1638,33 @@ octave_class::in_class_method (void)
               || fcn->is_anonymous_function_of_class ()
               || fcn->is_private_function_of_class (class_name ()))
           && find_parent_class (fcn->dispatch_class ()));
 }
 
 octave_class::exemplar_info::exemplar_info (const octave_value& obj)
   : field_names (), parent_class_names ()
 {
-  if (! obj.is_object ())
+  if (! obj.isobject ())
     error ("invalid call to exemplar_info constructor");
 
   octave_map m = obj.map_value ();
   field_names = m.keys ();
 
   parent_class_names = obj.parent_class_name_list ();
 }
 
 // A map from class names to lists of fields.
 std::map<std::string, octave_class::exemplar_info> octave_class::exemplar_map;
 
 bool
 octave_class::exemplar_info::compare (const octave_value& obj) const
 {
 
-  if (! obj.is_object ())
+  if (! obj.isobject ())
     error ("invalid comparison of class exemplar to non-class object");
 
   if (nfields () != obj.nfields ())
     error ("mismatch in number of fields");
 
   octave_map obj_map = obj.map_value ();
   string_vector obj_fnames = obj_map.keys ();
   string_vector fnames = fields ();
@@ -1885,33 +1885,33 @@ DEFUN (__parent_classes__, args, ,
 Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
-  if (arg.is_object ())
+  if (arg.isobject ())
     return ovl (Cell (arg.parent_class_names ()));
   else
     return ovl (Cell ());
 }
 
 DEFUN (isobject, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isobject (@var{x})
 Return true if @var{x} is a class object.
 @seealso{class, typeinfo, isa, ismethod, isprop}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_object ());
+  return ovl (args(0).isobject ());
 }
 
 DEFMETHOD (ismethod, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} ismethod (@var{obj}, @var{method})
 @deftypefnx {} {} ismethod (@var{clsname}, @var{method})
 Return true if the string @var{method} is a valid method of the object
 @var{obj} or of the class @var{clsname}.
@@ -1920,17 +1920,17 @@ Return true if the string @var{method} i
 {
   if (args.length () != 2)
     print_usage ();
 
   octave_value arg = args(0);
 
   std::string class_name;
 
-  if (arg.is_object ())
+  if (arg.isobject ())
     class_name = arg.class_name ();
   else if (arg.is_string ())
     class_name = arg.string_value ();
   else
     error ("ismethod: first argument must be object or class name");
 
   std::string method = args(1).string_value ();
 
@@ -1952,17 +1952,17 @@ Implements @code{methods} for Octave cla
 @seealso{methods}
 @end deftypefn */)
 {
   // Input validation has already been done in methods.m.
   octave_value arg = args(0);
 
   std::string class_name;
 
-  if (arg.is_object ())
+  if (arg.isobject ())
     class_name = arg.class_name ();
   else if (arg.is_string ())
     class_name = arg.string_value ();
 
   octave::load_path& lp = interp.get_load_path ();
 
   string_vector sv = lp.methods (class_name);
 
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -139,17 +139,17 @@ public:
     retval.map.resize (dv);
     return octave_value (new octave_class (retval));
   }
 
   bool is_defined (void) const { return true; }
 
   bool isstruct (void) const { return false; }
 
-  bool is_object (void) const { return true; }
+  bool isobject (void) const { return true; }
 
   bool is_true (void) const;
 
   octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const;
 
   std::list<std::string> parent_class_name_list (void) const
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1412,17 +1412,17 @@ public:
   cdef_object get_object (void) const { return object; }
 
   cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
 
   bool isstruct (void) const { return false; }
 
-  bool is_object (void) const { return true; }
+  bool isobject (void) const { return true; }
 
   bool is_classdef_object (void) const { return true; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
diff --git a/libinterp/octave-value/ov-oncleanup.h b/libinterp/octave-value/ov-oncleanup.h
--- a/libinterp/octave-value/ov-oncleanup.h
+++ b/libinterp/octave-value/ov-oncleanup.h
@@ -51,17 +51,17 @@ public:
   {
     return new octave_oncleanup ();
   }
 
   ~octave_oncleanup (void);
 
   bool is_defined (void) const { return true; }
 
-  bool is_object (void) const { return true; } // do we want this?
+  bool isobject (void) const { return true; } // do we want this?
 
   octave_map map_value (void) const { return scalar_map_value (); }
 
   octave_scalar_map scalar_map_value (void) const;
 
   dim_vector dims (void) const
   {
     static dim_vector dv (1, 1);
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -458,17 +458,17 @@ octave_struct::subsasgn (const std::stri
                     retval = octave_value (this);
                   }
                 else
                   err_nonbraced_cs_list_assignment ();
               }
           }
         else
           {
-            if (t_rhs.isstruct () || t_rhs.is_object ())
+            if (t_rhs.isstruct () || t_rhs.isobject ())
               {
                 octave_map rhs_map = t_rhs.xmap_value ("invalid structure assignment");
 
                 map.assign (idx.front (), rhs_map);
 
                 count++;
                 retval = octave_value (this);
               }
@@ -1699,17 +1699,17 @@ produces a struct @strong{array}.
   // dimensions as the empty matrix.
 
   // Note that struct () creates a 1x1 struct with no fields for
   // compatibility with Matlab.
 
   if (nargin == 1 && args(0).isstruct ())
     return ovl (args(0));
 
-  if (nargin == 1 && args(0).is_object ())
+  if (nargin == 1 && args(0).isobject ())
     return ovl (args(0).map_value ());
 
   if ((nargin == 1 || nargin == 2)
       && args(0).isempty () && args(0).is_real_matrix ())
     {
       if (nargin == 2)
         {
           Array<std::string> cstr = args(1).xcellstr_value ("struct: second argument should be a cell array of field names");
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -2481,23 +2481,23 @@ do_cat_op (const octave_value& v1, const
 }
 
 octave_value
 do_colon_op (const octave_value& base, const octave_value& increment,
              const octave_value& limit, bool is_for_cmd_expr)
 {
   octave_value retval;
 
-  if (base.is_object () || increment.is_object () || limit.is_object ())
+  if (base.isobject () || increment.isobject () || limit.isobject ())
     {
       std::string dispatch_type;
 
-      if (base.is_object ())
+      if (base.isobject ())
         dispatch_type = base.class_name ();
-      else if (increment.is_defined () && increment.is_object ())
+      else if (increment.is_defined () && increment.isobject ())
         dispatch_type = increment.class_name ();
       else
         dispatch_type = limit.class_name ();
 
       octave_value meth = symbol_table::find_method ("colon", dispatch_type);
 
       if (! meth.is_defined ())
         error ("colon method not defined for %s class", dispatch_type.c_str ());
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -587,22 +587,26 @@ public:
 
   bool isstruct (void) const
   { return rep->isstruct (); }
 
   OCTAVE_DEPRECATED ("use 'isstruct' instead")
   bool is_map (void) const
   { return isstruct (); }
 
-  bool is_object (void) const
-  { return rep->is_object (); }
-
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
+  bool isobject (void) const
+  { return rep->isobject (); }
+
+  OCTAVE_DEPRECATED ("use 'isobject' instead")
+  bool is_object (void) const
+  { return isobject (); }
+
   bool isjava (void) const
   { return rep->isjava (); }
 
   OCTAVE_DEPRECATED ("use 'isjava' instead")
   bool is_java (void) const
   { return isjava (); }
 
   bool is_cs_list (void) const
diff --git a/libinterp/operators/op-class.cc b/libinterp/operators/op-class.cc
--- a/libinterp/operators/op-class.cc
+++ b/libinterp/operators/op-class.cc
@@ -74,17 +74,17 @@ DEF_CLASS_UNOP (ctranspose)
 
 #define DEF_CLASS_BINOP(name) \
   static octave_value                                                   \
   oct_binop_ ## name (const octave_value& a1, const octave_value& a2)   \
   {                                                                     \
     octave_value retval;                                                \
                                                                         \
     std::string dispatch_type                                           \
-      = (a1.is_object () ? a1.class_name () : a2.class_name ());        \
+      = (a1.isobject () ? a1.class_name () : a2.class_name ());        \
                                                                         \
     octave_value meth = symbol_table::find_method (#name, dispatch_type); \
                                                                         \
     if (meth.is_undefined ())                                           \
       error ("%s method not defined for %s class", #name,               \
              dispatch_type.c_str ());                                   \
                                                                         \
     octave_value_list args;                                             \
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -150,17 +150,17 @@ Example:
 @seealso{for, parfor, if, do, while, function, switch, try, unwind_protect}
 @end deftypefn */)
 {
   octave_value retval;
 
   if (! indexed_object)
     error ("invalid use of end");
 
-  if (indexed_object->is_object ())
+  if (indexed_object->isobject ())
     {
       octave_value_list args;
 
       args(2) = num_indices;
       args(1) = index_position + 1;
       args(0) = *indexed_object;
 
       std::string class_name = indexed_object->class_name ();
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -337,17 +337,17 @@ namespace octave
       }
 
     octave_value ov_base = evaluate (op_base);
 
     octave_value ov_limit = evaluate (op_limit);
 
     tree_expression *op_increment = expr.increment ();
 
-    if (ov_base.is_object () || ov_limit.is_object ())
+    if (ov_base.isobject () || ov_limit.isobject ())
       {
         octave_value_list tmp1;
 
         if (op_increment)
           {
             octave_value ov_increment = evaluate (op_increment);
 
             tmp1(2) = ov_limit;
@@ -1249,17 +1249,17 @@ namespace octave
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
-    bool indexing_object = base_expr_val.is_object ();
+    bool indexing_object = base_expr_val.isobject ();
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
     for (int i = beg; i < n; i++)
       {
         if (i > beg)
@@ -1287,17 +1287,17 @@ namespace octave
                         if (partial_expr_val.is_cs_list ())
                           err_indexed_cs_list ();
 
                         retval = partial_expr_val;
 
                         beg = i;
                         idx.clear ();
 
-                        if (partial_expr_val.is_object ())
+                        if (partial_expr_val.isobject ())
                           {
                             // Found an object, so now we'll build up
                             // complete index list for one big subsref
                             // call from this point on.
 
                             indexing_object = true;
                           }
                       }
diff --git a/libinterp/parse-tree/pt-tm-const.cc b/libinterp/parse-tree/pt-tm-const.cc
--- a/libinterp/parse-tree/pt-tm-const.cc
+++ b/libinterp/parse-tree/pt-tm-const.cc
@@ -59,17 +59,17 @@ eval_error (const char *msg, const dim_v
 
 namespace octave
 {
   void
   tm_row_const::tm_row_const_rep::do_init_element (const octave_value& val,
                                                    bool& first_elem)
   {
     std::string this_elt_class_nm
-      = val.is_object () ? std::string ("class") : val.class_name ();
+      = val.isobject () ? std::string ("class") : val.class_name ();
 
     class_nm = get_concat_class (class_nm, this_elt_class_nm);
 
     dim_vector this_elt_dv = val.dims ();
 
     if (! this_elt_dv.zero_by_zero ())
       {
         all_mt = false;
@@ -106,17 +106,17 @@ namespace octave
       all_cmplx = false;
 
     if (! any_cell && val.iscell ())
       any_cell = true;
 
     if (! any_sparse && val.issparse ())
       any_sparse = true;
 
-    if (! any_class && val.is_object ())
+    if (! any_class && val.isobject ())
       any_class = true;
 
     // Special treatment of sparse matrices to avoid out-of-memory error
     all_1x1 = all_1x1 && ! val.issparse () && val.numel () == 1;
   }
 
   void
   tm_row_const::tm_row_const_rep::init (const tree_argument_list& row,
