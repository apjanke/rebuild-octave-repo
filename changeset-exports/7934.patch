# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216232778 14400
#      Wed Jul 16 14:26:18 2008 -0400
# Node ID 5a156ab94dd26489cb09aa0476f0b2c8ffa52893
# Parent  54e414cc106b044cd3b223fd4ff2f5b0c9bb8381
Add octave_mutex class

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2008-07-16  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* configure.in: Add check for pthread.h.
+
 2008-07-14  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (MAGICK_CONFIG): Substitute here.
 	(MAGICK_INCFLAGS, MAGICK_LIBS): Define using GraphicsMagick++
 	config script.
 	(do-subst-config-vals): Include MAGICK_LIBS and MAGICK_INCFLAGS in
 	list of substitutions.
 	* configure.in: Check for GraphicsMagick++ config script.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -1374,17 +1374,17 @@ AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
 ### C headers
 
 AC_CHECK_HEADERS(assert.h curses.h direct.h dlfcn.h fcntl.h float.h \
   floatingpoint.h grp.h ieeefp.h inttypes.h limits.h locale.h memory.h nan.h \
-  ncurses.h poll.h pwd.h stdint.h stdlib.h string.h sunmath.h sys/ioctl.h \
+  ncurses.h poll.h pthread.h pwd.h stdint.h stdlib.h string.h sunmath.h sys/ioctl.h \
   sys/param.h sys/poll.h sys/resource.h sys/select.h sys/stat.h \
   sys/time.h sys/times.h sys/types.h sys/utsname.h sys/utime.h termcap.h \
   unistd.h utime.h varargs.h)
 
 ### C++ headers
 
 AC_LANG_PUSH(C++)
 AC_CHECK_HEADERS(sstream)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-07-15  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* oct-mutex.h, oct-mutex.cc: New files.
+	* Makefile.in: Add them to appropriate lists.
+
 2008-07-15  John W. Eaton  <jwe@octave.org>
 
 	* oct-sort.cc, oct-sort.h (octave_sort<T>::count_run): Declare
 	descending arg as bool&.
 	(octave_sort<T>::sort): Pass bool to count_run for descending arg.
 
 2008-07-11  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -83,17 +83,17 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	NLFunc.h NLP.h ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	Objective.h QP.h Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h functor.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
 	lo-ieee.h lo-mappers.h lo-math.h lo-specfun.h \
 	lo-sysdep.h lo-utils.h mach-info.h md5.h oct-alloc.h oct-cmplx.h \
 	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-inttypes.h \
-	oct-lookup.h oct-md5.h oct-passwd.h oct-rand.h oct-rl-edit.h \
+	oct-lookup.h oct-md5.h oct-mutex.h oct-passwd.h oct-rand.h oct-rl-edit.h \
 	oct-rl-hist.h oct-shlib.h oct-sort.h oct-spparms.h oct-syscalls.h \
 	oct-sparse.h oct-time.h oct-uname.h \
 	pathlen.h pathsearch.h prog-args.h \
 	randgamma.h randmtzig.h randpoisson.h regex-match.h \
 	sparse-sort.h statdefs.h str-vec.h \
 	sparse-util.h sun-utils.h sysdir.h systime.h syswait.h \
 	$(MATRIX_INC)
 
@@ -143,17 +143,17 @@ VX_OP_SRC := $(shell $(AWK) -f $(srcdir)
 SPARSE_MX_OP_SRC := $(shell $(AWK) -f $(srcdir)/sparse-mk-ops.awk prefix=smx list_cc_files=1 $(srcdir)/sparse-mx-ops)
 
 LIBOCTAVE_CXX_SOURCES := Bounds.cc CollocWt.cc DASPK.cc DASRT.cc \
 	DASSL.cc FEGrid.cc LinConst.cc LSODE.cc NLEqn.cc ODES.cc \
 	Quad.cc Range.cc data-conv.cc dir-ops.cc \
 	file-ops.cc file-stat.cc glob-match.cc idx-vector.cc \
 	lo-ieee.cc lo-mappers.cc lo-specfun.cc lo-sysdep.cc \
 	lo-utils.cc mach-info.cc oct-alloc.cc oct-env.cc \
-	oct-fftw.cc oct-group.cc oct-md5.cc oct-passwd.cc oct-rand.cc \
+	oct-fftw.cc oct-group.cc oct-mutex.cc oct-md5.cc oct-passwd.cc oct-rand.cc \
 	oct-shlib.cc oct-spparms.cc oct-syscalls.cc oct-time.cc oct-uname.cc \
 	prog-args.cc regex-match.cc \
 	sparse-sort.cc sparse-util.cc str-vec.cc \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC)
 
 BUILT_LIBOCTAVE_CXX_SOURCES := \
diff --git a/liboctave/oct-mutex.cc b/liboctave/oct-mutex.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-mutex.cc
@@ -0,0 +1,131 @@
+/*
+
+Copyright (C) 2008 Michael Goffioul
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "oct-mutex.h"
+#include "error.h"
+
+#if defined (HAVE_PTHREAD_H)
+#include <pthread.h>
+#endif
+
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#include <windows.h>
+#endif
+
+class
+octave_default_mutex : public octave_mutex
+{
+public:
+    octave_default_mutex (void)
+	: octave_mutex (-1) { }
+
+    void lock (void)
+      { error ("mutex not supported on this platform"); }
+
+    void unlock(void)
+      { error ("mutex not supported on this platform"); }
+};
+
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+
+class
+octave_w32_mutex : public octave_mutex
+{
+public:
+    octave_w32_mutex (void)
+	: octave_mutex (-1)
+      {
+	InitializeCriticalSection (&cs);
+      }
+
+    ~octave_w32_mutex (void)
+      {
+	DeleteCriticalSection (&cs);
+      }
+
+    void lock (void)
+      {
+	EnterCriticalSection (&cs);
+      }
+
+    void unlock (void)
+      {
+	LeaveCriticalSection (&cs);
+      }
+
+private:
+    CRITICAL_SECTION cs;
+};
+
+#elif defined (HAVE_PTHREAD_H)
+
+class
+octave_pthread_mutex : public octave_mutex
+{
+public:
+    octave_pthread_mutex (void)
+	: octave_mutex (-1)
+      {
+	pthread_mutexattr_t attr;
+
+	pthread_mutexattr_init (&attr);
+	pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_RECURSIVE);
+	pthread_mutex_init (&pm, &attr);
+	pthread_mutexattr_destroy (&attr);
+      }
+
+    ~octave_pthread_mutex (void)
+      {
+	pthread_mutex_destroy (&pm);
+      }
+
+    void lock (void)
+      {
+	pthread_mutex_lock (&pm);
+      }
+
+    void unlock (void)
+      {
+	pthread_mutex_unlock (&pm);
+      }
+
+private:
+    pthread_mutex_t pm;
+};
+
+#endif
+
+octave_mutex::octave_mutex (void)
+{
+#if defined (__WIN32__) && ! defined (__CYGWIN__)
+  rep = new octave_w32_mutex ();
+#elif defined (HAVE_PTHREAD_H)
+  rep = new octave_pthread_mutex ();
+#else
+  rep = new octave_default_mutex ();
+#endif
+  rep->count++;
+}
diff --git a/liboctave/oct-mutex.h b/liboctave/oct-mutex.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-mutex.h
@@ -0,0 +1,104 @@
+/*
+
+Copyright (C) 2008 Michael Goffioul
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_octave_mutex_h)
+#define octave_octave_mutex_h 1
+
+class
+OCTAVE_API
+octave_mutex
+{
+public:
+    octave_mutex (void);
+
+    octave_mutex (const octave_mutex& m)
+      {
+	rep = m.rep;
+	rep->count++;
+      }
+
+    virtual ~octave_mutex (void)
+      {
+	if (rep && --rep->count == 0)
+	  {
+	    delete rep;
+	    rep = 0;
+	  }
+      }
+
+    octave_mutex& operator = (const octave_mutex& m)
+      {
+	if (rep != m.rep)
+	  {
+	    if (rep && --rep->count == 0)
+	      delete rep;
+
+	    rep = m.rep;
+	    rep->count++;
+	  }
+
+	return *this;
+      }
+
+    virtual void lock (void)
+      { rep->lock (); }
+
+    virtual void unlock (void)
+      { rep->unlock (); }
+
+protected:
+    explicit octave_mutex (int /* dummy */)
+	: count (0) { }
+
+protected:
+    union
+      {
+	octave_mutex *rep;
+	int count;
+      };
+};
+
+class
+octave_autolock
+{
+public:
+  octave_autolock (const octave_mutex& m)
+      : mutex (m)
+    {
+      mutex.lock ();
+    }
+
+  ~octave_autolock (void)
+    {
+      mutex.unlock ();
+    }
+
+private:
+  octave_autolock (void) { }
+  octave_autolock (const octave_autolock&) { }
+  octave_autolock& operator = (const octave_autolock&) { }
+
+private:
+  octave_mutex mutex;
+};
+
+#endif
