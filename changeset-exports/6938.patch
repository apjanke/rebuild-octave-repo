# HG changeset patch
# User dbateman
# Date 1191254513 0
#      Mon Oct 01 16:01:53 2007 +0000
# Node ID 688ef944002215d41f6e6a511d9b5d97ce6b98dd
# Parent  ee12d56c42000cf85234d0f9207c8dca3b4c3307
[project @ 2007-10-01 15:59:33 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,12 @@
 2007-10-01  David Bateman  <dbateman@free.fr>
 
+        * linear-algebra/norm.m: Inline the isvector(x) calculation for
+	speed with small vectors.
 	* pkg/pkg.m (archprefix): Set using octave_config_info("libexecdir") 
 	rather than OCTAVE_HOME().
 
 2007-09-30  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/findobj.m: New function.
 	* plot/Makefile.m (SOURCES): Add it to SOURCES.
 
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -73,17 +73,17 @@ function retval = norm (x, p)
   endif
 
   if (nargin == 1)
     p = 2;
   endif
 
   ## Do we have a vector or matrix as the first argument?
 
-  if (is_vector (x))
+  if (ndims(x) == 2 && (rows (x) == 1 || columns (x) == 1))
     if (isinteger (x) || issparse (x))
       if (ischar (p))
         if (strcmp (p, "fro"))
 	  retval = sqrt (sum (abs (x) .^ 2));
         elseif (strcmp (p, "inf"))
           retval = max (abs (x));
         else
           error ("norm: unrecognized norm");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2007-10-01  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* graphics.cc ((color_property::color_property (const
+	octave_value& val)): Undo change from 2007-09-26
+	(patch::properties::properties): use the "a" modifier to
+	face_color & edge_color properties
+	(patch::properties::set): Undo change from 2007-09-26
+	* graphics.h.in	(color_property::color_property
+	(const octave_value& val)): Undo change from 2007-09-26
+
+2007-10-01  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* octave.cc (octave_main): Add "--line-editing" option to force
+	readline line editing.
+
 2007-09-28  David Bateman  <dbateman@free.fr>
 
 	* ov-range.h (int8_array_value, int16_array_value, int32_array_value,
 	int64_array_value, uint8_array_value, uint16_array_value, 
 	int32_array_value, uint64_array_value): New methods
 
 2007-09-28  Kai Habel  <kai.habel@gmx.de>
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -117,40 +117,32 @@ color_values::str2rgb (std::string str)
     {
       for (int i = 0; i < 3; i++)
 	xrgb[i] = tmp_rgb[i];
     }
 
   return retval;
 }
 
-color_property::color_property (const octave_value& val, const radio_values &v)
-  : radio_val (v), current_val ()
+color_property::color_property (const octave_value& val)
+  : radio_val (), current_val ()
 {
   // FIXME -- need some error checking here.
 
   if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       if (! s.empty ())
 	{
-	  if (radio_val.contains (s))
-	    {
-	      current_val = s;
-	      current_type = radio_t;
-	    }
-          else
+	  color_values col (s);
+	  if (! error_state)
 	    {
-	      color_values col (s);
-	      if (! error_state)
-		{
-		  color_val = col;
-		  current_type = color_t;
-		}
+	      color_val = col;
+	      current_type = color_t;
 	    }
 	}
       else
 	error ("invalid color specification");	  
     }
   else if (val.is_real_matrix ())
     {
       Matrix m = val.matrix_value ();
@@ -2126,17 +2118,17 @@ patch::properties::set (const property_n
     set_cdata (val);
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
   else if (name.compare ("zdata"))
     set_zdata (val);
   else if (name.compare ("facecolor"))
-    set_facecolor (color_property (val, radio_values ("flat|none|interp")));
+    set_facecolor (val);
   else if (name.compare ("facealpha"))
     set_facealpha (val);
   else if (name.compare ("edgecolor"))
     set_edgecolor (val);
   else if (name.compare ("linestyle"))
     set_linestyle (val);
   else if (name.compare ("linewidth"))
     set_linewidth (val);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -201,18 +201,17 @@ public:
       current_val (v.default_value ())
   { }
 
   color_property (const radio_values& v, const std::string& initial_value)
     : current_type (radio_t), color_val (color_values ()), radio_val (v),
       current_val (initial_value)
   { }
 
-  color_property (const octave_value& val, 
-		  const radio_values &v = radio_values());
+  color_property (const octave_value& val);
 
   operator octave_value (void) const
   {
     if (current_type == color_t)
       {
 	Matrix retval (1, 3);
 	const double *xrgb = color_val.rgb ();
 
@@ -1595,19 +1594,19 @@ public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
       octave_value cdata
       octave_value xdata
       octave_value ydata
       octave_value zdata
-      color_property facecolor
+      color_property facecolor a
       octave_value facealpha
-      color_property edgecolor
+      color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
       octave_value markeredgecolor
       octave_value markerfacecolor
       octave_value markersize
     END_PROPERTIES
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -121,17 +121,17 @@ static bool traditional = false;
 // If TRUE, print verbose info in some cases.
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
        [--exec-path path] [--help] [--image-path path] [--info-file file]\n\
-       [--info-program prog] [--interactive] [--no-history] [--no-init-file]\n\
+       [--info-program prog] [--interactive] [--line-editing] [--no-history] [--no-init-file]\n\
        [--no-line-editing] [--no-site-file] [--no-init-path] [-p path]\n\
        [--path path] [--silent] [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?HVdfhip:qvx";
 
@@ -149,28 +149,30 @@ static bool persist = false;
 #define INFO_FILE_OPTION 4
 #define INFO_PROG_OPTION 5
 #define NO_INIT_FILE_OPTION 6
 #define NO_LINE_EDITING_OPTION 7
 #define NO_SITE_FILE_OPTION 8
 #define NO_INITIAL_PATH_OPTION 9
 #define PERSIST_OPTION 10
 #define TRADITIONAL_OPTION 11
+#define LINE_EDITING_OPTION 12
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "eval",             prog_args::required_arg, 0, EVAL_OPTION },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
     { "image-path",       prog_args::required_arg, 0, IMAGE_PATH_OPTION },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
+    { "line-editing",     prog_args::no_arg,       0, LINE_EDITING_OPTION },
     { "no-history",       prog_args::no_arg,       0, 'H' },
     { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
     { "no-initial-path",  prog_args::no_arg,       0, NO_INITIAL_PATH_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
     { "persist",          prog_args::no_arg,       0, PERSIST_OPTION },
@@ -443,16 +445,17 @@ Options:\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --eval CODE             Evaluate CODE.  Exit when done unless --persist.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
   --help, -h, -?          Print short help message and exit.\n\
   --image-path PATH       Set initial IMAGE_PATH to PATH.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   --interactive, -i       Force interactive behavior.\n\
+  --line-editing          Force readline use for command-line editing.\n\
   --no-history, -H        Don't save commands to the history list\n\
   --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
   --no-site-file          Don't read the site-wide octaverc file.\n\
   --norc, -f              Don't read any initialization files.\n\
   --path PATH, -p PATH    Set initial function search path to PATH.\n\
   --persist               Go interactive after --eval or reading from FILE.\n\
   --silent, -q            Don't print message at startup.\n\
@@ -566,16 +569,18 @@ octave_main (int argc, char **argv, int 
   install_types ();
 
   install_ops ();
 
   install_builtins ();
 
   prog_args args (argc, argv, short_opts, long_opts);
 
+  bool forced_line_editing = false;
+
   int optc;
   while ((optc = args.getopt ()) != EOF)
     {
       switch (optc)
 	{
 	case 'H':
 	  bind_internal_variable ("saving_history", false);
 	  break;
@@ -648,16 +653,20 @@ octave_main (int argc, char **argv, int 
 	    bind_internal_variable ("info_file", args.optarg ());
 	  break;
 
 	case INFO_PROG_OPTION:
 	  if (args.optarg ())
 	    bind_internal_variable ("info_program", args.optarg ());
 	  break;
 
+        case LINE_EDITING_OPTION:
+          forced_line_editing = true;
+          break;
+
 	case NO_INIT_FILE_OPTION:
 	  read_init_files = false;
 	  break;
 
 	case NO_LINE_EDITING_OPTION:
 	  line_editing = false;
 	  break;
 
@@ -716,17 +725,17 @@ octave_main (int argc, char **argv, int 
     std::cout << std::endl;
 
   // Is input coming from a terminal?  If so, we are probably
   // interactive.
 
   interactive = (! embedded
 		 && isatty (fileno (stdin)) && isatty (fileno (stdout)));
 
-  if (! interactive)
+  if (! interactive && ! forced_line_editing)
     line_editing = false;
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int last_arg_idx = args.optind ();
 
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2007-09-29  Kim Hansen  <kimhanse@gmail.com>
+
+	* test_range.m: Test range data
+
 2007-09-21  John W. Eaton  <jwe@octave.org>
 
 	* test_slice.m: Fix test for x = ones ([0, 2]); x(idx) = N case.
 	See change for liboctave/Array.cc.
 
 2007-06-15  John W. Eaton  <jwe@octave.org>
 
 	* fntests.m: Also report expected failures in summary.
diff --git a/test/test_range.m b/test/test_range.m
new file mode 100644
--- /dev/null
+++ b/test/test_range.m
@@ -0,0 +1,54 @@
+## Test values of range
+
+%!assert(full(1:9), [ 1 2 3 4 5 6 7 8 9 ])
+%!assert(full(1:0.4:3), [ 1.0 1.4 1.8 2.2 2.6 3.0 ])
+%!assert(full(9:1), zeros(1,0))
+%!assert(full(9:-1:1), [ 9 8 7 6 5 4 3 2 1 ])
+%!assert(full(1:-1:9), zeros(1,0))
+
+
+## Test mixing integer range with other types
+
+%!shared expect, r, z
+%! expect = [ 1 2 3 4 5 6 7 8 9
+%!            0 0 0 0 0 0 0 0 0 ];
+%! z = zeros(1,9);
+%! r = 1:9;
+
+%!assert([ r ; z                  ], expect)
+%!assert([ r ; logical(z)         ], expect)
+%!assert([ r ; sparse(z)          ], expect)
+%!assert([ r ; sparse(logical(z)) ], expect)
+
+%!assert([ r ; int8(z)            ], int8(expect))
+%!assert([ r ; int16(z)           ], int16(expect))
+%!assert([ r ; int32(z)           ], int32(expect))
+%!assert([ r ; int64(z)           ], int64(expect))
+%!assert([ r ; uint8(z)           ], uint8(expect))
+%!assert([ r ; uint16(z)          ], uint16(expect))
+%!assert([ r ; uint32(z)          ], uint32(expect))
+%!assert([ r ; uint64(z)          ], uint64(expect))
+
+
+## Test mixing non integer range with other types
+
+%!shared expect, r, z
+%! expect = [ 1.0 1.4 1.8 2.2 2.6 3.0
+%!            0   0   0   0   0   0   ];
+%! z = zeros(1,6);
+%! r = 1:0.4:3;
+
+%!assert([ r ; z                  ], expect)
+%!assert([ r ; logical(z)         ], expect)
+%!assert([ r ; sparse(z)          ], expect)
+%!assert([ r ; sparse(logical(z)) ], expect)
+
+%!assert([ r ; int8(z)            ], int8(expect))
+%!assert([ r ; int16(z)           ], int16(expect))
+%!assert([ r ; int32(z)           ], int32(expect))
+%!assert([ r ; int64(z)           ], int64(expect))
+%!assert([ r ; uint8(z)           ], uint8(expect))
+%!assert([ r ; uint16(z)          ], uint16(expect))
+%!assert([ r ; uint32(z)          ], uint32(expect))
+%!assert([ r ; uint64(z)          ], uint64(expect))
+
