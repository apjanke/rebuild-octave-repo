# HG changeset patch
# User Rik <rik@octave.org>
# Date 1430670980 25200
#      Sun May 03 09:36:20 2015 -0700
# Branch stable
# Node ID 7503499a252bfbb7d57bb416e150e7fb09a163cc
# Parent  3b3579ad7e46b269e99eff7ca9c9aa921b995e80
doc: Update docstrings to have one sentence summary as first line.
Update scripts in audio, elfun, general, geometry, and image directories.

* scripts/audio/@audioplayer/__get_properties__.m,
scripts/audio/@audioplayer/audioplayer.m, scripts/audio/@audioplayer/get.m,
scripts/audio/@audioplayer/isplaying.m, scripts/audio/@audioplayer/play.m,
scripts/audio/@audioplayer/playblocking.m, scripts/audio/@audioplayer/set.m,
scripts/audio/@audioplayer/subsasgn.m, scripts/audio/@audioplayer/subsref.m,
scripts/audio/@audiorecorder/audiorecorder.m,
scripts/audio/@audiorecorder/get.m,
scripts/audio/@audiorecorder/getaudiodata.m,
scripts/audio/@audiorecorder/getplayer.m,
scripts/audio/@audiorecorder/isrecording.m,
scripts/audio/@audiorecorder/play.m, scripts/audio/@audiorecorder/record.m,
scripts/audio/@audiorecorder/recordblocking.m,
scripts/audio/@audiorecorder/set.m, scripts/audio/@audiorecorder/stop.m,
scripts/audio/@audiorecorder/subsasgn.m,
scripts/audio/@audiorecorder/subsref.m, scripts/audio/lin2mu.m,
scripts/audio/mu2lin.m, scripts/audio/record.m, scripts/audio/sound.m,
scripts/audio/soundsc.m, scripts/audio/wavread.m, scripts/audio/wavwrite.m,
scripts/elfun/cosd.m, scripts/elfun/sind.m, scripts/elfun/tand.m,
scripts/general/accumarray.m, scripts/general/accumdim.m,
scripts/general/bitcmp.m, scripts/general/bitget.m, scripts/general/bitset.m,
scripts/general/blkdiag.m, scripts/general/cart2pol.m,
scripts/general/cart2sph.m, scripts/general/cell2mat.m,
scripts/general/celldisp.m, scripts/general/chop.m,
scripts/general/circshift.m, scripts/general/common_size.m,
scripts/general/cplxpair.m, scripts/general/cumtrapz.m,
scripts/general/dblquad.m, scripts/general/deal.m, scripts/general/del2.m,
scripts/general/display.m, scripts/general/divergence.m,
scripts/general/fieldnames.m, scripts/general/flip.m,
scripts/general/flipdim.m, scripts/general/fliplr.m, scripts/general/flipud.m,
scripts/general/gradient.m, scripts/general/interp3.m,
scripts/general/interpft.m, scripts/general/interpn.m,
scripts/general/loadobj.m, scripts/general/logspace.m,
scripts/general/methods.m, scripts/general/nargchk.m,
scripts/general/narginchk.m, scripts/general/nargoutchk.m,
scripts/general/nextpow2.m, scripts/general/nthargout.m,
scripts/general/num2str.m, scripts/general/pol2cart.m,
scripts/general/polyarea.m, scripts/general/postpad.m,
scripts/general/prepad.m, scripts/general/profile.m, scripts/general/quadgk.m,
scripts/general/quadl.m, scripts/general/quadv.m, scripts/general/randi.m,
scripts/general/rat.m, scripts/general/repmat.m, scripts/general/rot90.m,
scripts/general/rotdim.m, scripts/general/saveobj.m, scripts/general/shift.m,
scripts/general/shiftdim.m, scripts/general/sortrows.m,
scripts/general/sph2cart.m, scripts/general/structfun.m,
scripts/general/subsindex.m, scripts/general/trapz.m,
scripts/general/triplequad.m, scripts/geometry/delaunayn.m,
scripts/geometry/dsearch.m, scripts/geometry/dsearchn.m,
scripts/geometry/griddata.m, scripts/geometry/griddata3.m,
scripts/geometry/griddatan.m, scripts/geometry/inpolygon.m,
scripts/geometry/rectint.m, scripts/geometry/tsearchn.m,
scripts/geometry/voronoi.m, scripts/geometry/voronoin.m,
scripts/help/__unimplemented__.m, scripts/help/doc.m,
scripts/help/doc_cache_create.m, scripts/help/get_first_help_sentence.m,
scripts/help/help.m, scripts/help/lookfor.m, scripts/help/print_usage.m,
scripts/help/type.m, scripts/help/which.m, scripts/image/autumn.m,
scripts/image/bone.m, scripts/image/brighten.m, scripts/image/cmpermute.m,
scripts/image/colorcube.m, scripts/image/contrast.m, scripts/image/cool.m,
scripts/image/copper.m, scripts/image/cubehelix.m, scripts/image/flag.m,
scripts/image/gmap40.m, scripts/image/gray.m, scripts/image/gray2ind.m,
scripts/image/hot.m, scripts/image/hsv.m, scripts/image/image.m,
scripts/image/imagesc.m, scripts/image/imfinfo.m, scripts/image/imformats.m,
scripts/image/imread.m, scripts/image/imshow.m, scripts/image/imwrite.m,
scripts/image/iscolormap.m, scripts/image/jet.m, scripts/image/lines.m,
scripts/image/ntsc2rgb.m, scripts/image/ocean.m, scripts/image/pink.m,
scripts/image/prism.m, scripts/image/rainbow.m, scripts/image/rgb2ntsc.m,
scripts/image/spinmap.m, scripts/image/spring.m, scripts/image/summer.m,
scripts/image/white.m, scripts/image/winter.m:
Update docstrings to have one sentence summary as first line.
Re-structure to have line lengths <= 80 chars.

diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
-## Return a struct containing all named properties of the audioplayer
-## object @var{player}.
+## Return a struct containing all named properties of the audioplayer object
+## @var{player}.
 ## @end deftypefn
 
 function props = __get_properties__ (player)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -18,21 +18,22 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
 ## Create an audioplayer object that will play back data @var{y} at sample
-## rate @var{fs}.  The optional arguments @var{nbits}, and @var{id}
-## specify the bit depth and player device id, respectively.  Device IDs
-## may be found using the audiodevinfo function.
-## Given an audioplayer object, use the data from the object to
-## initialize the player.
+## rate @var{fs}.
+##
+## The optional arguments @var{nbits}, and @var{id} specify the bit depth and
+## player device id, respectively.  Device IDs may be found using the
+## audiodevinfo function.  Given an audioplayer object, use the data from the
+## object to initialize the player.
 ##
 ## The signal @var{y} can be a vector or a two-dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
 ## sample.
 ##
 ## @example
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{value} =} get (@var{player}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{player})
 ## Return the @var{value} of the property identified by @var{name}.
+##
 ## If @var{name} is a cell array return the values of the properties
-## identified by the elements of the cell array.  Given only the
-## player object, return a scalar structure with values of all
-## properties of @var{player}.  The field names of the structure
-## correspond to property names.
+## identified by the elements of the cell array.  Given only the player
+## object, return a scalar structure with values of all properties of
+## @var{player}.  The field names of the structure correspond to property
+## names.
 ## @end deftypefn
 
 function retval = get (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/isplaying.m b/scripts/audio/@audioplayer/isplaying.m
--- a/scripts/audio/@audioplayer/isplaying.m
+++ b/scripts/audio/@audioplayer/isplaying.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isplaying (@var{player})
-## Return 1 if the audioplayer object @var{player}is currently playing
-## back audio and 0 otherwise.
+## Return true if the audioplayer object @var{player} is currently playing back
+## audio and false otherwise.
 ## @end deftypefn
 
 function result = isplaying (player)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} play (@var{player})
 ## @deftypefnx {Function File} {} play (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} play (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} without blocking.
-## Given optional argument start, begin playing at @var{start} seconds
-## in the recording.  Given a two-element vector @var{limits}, begin and
-## end playing at the number of seconds specified by the elements of the
-## vector.
+##
+## Given optional argument start, begin playing at @var{start} seconds in the
+## recording.  Given a two-element vector @var{limits}, begin and end playing
+## at the number of seconds specified by the elements of the vector.
 ## @end deftypefn
 
 function play (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} playblocking (@var{player})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} with blocking.
-## Given optional argument start, begin playing at @var{start} seconds
-## in the recording.  Given a two-element vector @var{limits}, begin and
-## end playing at the number of seconds specified by the elements of the
-## vector.
+##
+## Given optional argument start, begin playing at @var{start} seconds in the
+## recording.  Given a two-element vector @var{limits}, begin and end playing
+## at the number of seconds specified by the elements of the vector.
 ## @end deftypefn
 
 function playblocking (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -16,21 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} set (@var{player}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{player}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{player})
 ## Set the value of property specified by @var{name} to a given @var{value}.
+##
 ## If @var{name} and @var{value} are cell arrays, set each property to the
-## corresponding value.  Given a structure of @var{properties} with
-## fields corresponding to property names, set the value of those
-## properties to the field values.  Given only the audioplayer object,
-## return a structure of settable properties.
+## corresponding value.  Given a structure of @var{properties} with fields
+## corresponding to property names, set the value of those properties to the
+## field values.  Given only the audioplayer object, return a structure of
+## settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/subsasgn.m b/scripts/audio/@audioplayer/subsasgn.m
--- a/scripts/audio/@audioplayer/subsasgn.m
+++ b/scripts/audio/@audioplayer/subsasgn.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{player}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio player object @var{player}.
+##
 ## Assign the value of @var{rhs} to the player property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (player, idx, rhs)
 
   if (isempty (idx))
     error ("audioplayer: missing index");
   endif
diff --git a/scripts/audio/@audioplayer/subsref.m b/scripts/audio/@audioplayer/subsref.m
--- a/scripts/audio/@audioplayer/subsref.m
+++ b/scripts/audio/@audioplayer/subsref.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{player}, @var{idx})
 ## Perform subscripted selection on the audio player object @var{player}.
+##
 ## Return the player property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (player, idx)
   if (nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -16,20 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{recorder} =} audiorecorder ()
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
-## sample rate.  The optional arguments @var{fs}, @var{nbits},
-## @var{channels}, and @var{id} specify the sample rate, bit depth,
-## number of channels and recording device id, respectively.  Device IDs
-## may be found using the audiodevinfo function.
+## sample rate.
+##
+## The optional arguments @var{fs}, @var{nbits}, @var{channels}, and @var{id}
+## specify the sample rate, bit depth, number of channels and recording
+## device id, respectively.  Device IDs may be found using the audiodevinfo
+## function.
 ## @end deftypefn
 
 ## FIXME: callbacks don't work properly, apparently because portaudio
 ## will execute the callbacks in a separate thread, and calling Octave
 ## functions in a separate thread which is likely to cause trouble with
 ## all of Octave's global data...
 ##
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{function}, @dots{})
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{value} =} get (@var{recorder}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{recorder})
 ## Return the @var{value} of the property identified by @var{name}.
+##
 ## If @var{name} is a cell array, return the values of the properties
-## corresponding to the elements of the cell array.  Given only the
-## recorder object, return a scalar structure with values of all
-## properties of @var{recorder}.  The field names of the structure
-## correspond to property names.
+## corresponding to the elements of the cell array.  Given only the recorder
+## object, return a scalar structure with values of all properties of
+## @var{recorder}.  The field names of the structure correspond to property
+## names.
 ## @end deftypefn
 
 function retval = get (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{data} =} getaudiodata (@var{recorder})
 ## @deftypefnx {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
 ## Return recorder audio data as a matrix with values between -1.0 and 1.0
 ## and with as many columns as there are channels in the recorder.
+##
 ## Given the optional argument @var{datatype}, convert the recorded data
 ## to the specified type, which may be one of @qcode{"double"},
 ## @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or @qcode{"uint8"}.
 ## @end deftypefn
 
 function data = getaudiodata (varargin)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} getplayer (@var{recorder})
-## Return an audioplayer object with data recorded by the audiorecorder
-## object @var{recorder}.
+## Return an audioplayer object with data recorded by the audiorecorder object
+## @var{recorder}.
 ## @end deftypefn
 
 function player = getplayer (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/isrecording.m b/scripts/audio/@audiorecorder/isrecording.m
--- a/scripts/audio/@audiorecorder/isrecording.m
+++ b/scripts/audio/@audiorecorder/isrecording.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isrecording (@var{recorder})
-## Return 1 if the audiorecorder object @var{recorder} is currently
-## recording audio and 0 otherwise.
+## Return true if the audiorecorder object @var{recorder} is currently recording
+## audio and false otherwise.
 ## @end deftypefn
 
 function result = isrecording (recorder)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -16,18 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{player} =} play (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, @var{start})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
 ## Play the audio recorded in @var{recorder} and return a corresponding
-## audioplayer object.  If the optional argument @var{start} is
-## provided, begin playing @var{start} seconds in to the recording.
+## audioplayer object.
+## 
+## If the optional argument @var{start} is provided, begin playing
+## @var{start} seconds in to the recording.
+## 
 ## If the optional argument @var{end} is provided, stop playing at
 ## @var{end} seconds in the recording.
 ## @end deftypefn
 
 function player = play (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} record (@var{recorder})
 ## @deftypefnx {Function File} {} record (@var{recorder}, @var{length})
 ## Record audio without blocking using the audiorecorder object
-## @var{recorder} until stopped or paused by the @var{stop} or
-## @var{pause} method.  Given the optional argument @var{length}, record
-## for @var{length} seconds.
+## @var{recorder} until stopped or paused by the @var{stop} or @var{pause}
+## method.
+##
+## Given the optional argument @var{length}, record for @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/recordblocking.m b/scripts/audio/@audiorecorder/recordblocking.m
--- a/scripts/audio/@audiorecorder/recordblocking.m
+++ b/scripts/audio/@audiorecorder/recordblocking.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} recordblocking (@var{recorder}, @var{length})
-## Record audio with blocking (synchronous I/O).  You must specify the
-## length of the recording in seconds.
+## Record audio with blocking (synchronous I/O).
+##
+## The length of the recording in seconds (@var{length}) must be specified.
 ## @end deftypefn
 
 function recordblocking (varargin)
 
   if (nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -16,22 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} set (@var{recorder}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{recorder}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{recorder})
 ## Set the value of property specified by @var{name} to a given @var{value}.
-## If @var{name} and @var{value} are cell arrays of the same size,
-## set each property to a corresponding value.
-## Given a structure with fields corresponding to property names, set
-## the value of those properties to the corresponding field values.
-## Given only the recorder object, return a structure of settable
-## properties.
+##
+## If @var{name} and @var{value} are cell arrays of the same size, set each
+## property to a corresponding value.  Given a structure with fields
+## corresponding to property names, set the value of those properties to the
+## corresponding field values.  Given only the recorder object, return a
+## structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/stop.m b/scripts/audio/@audiorecorder/stop.m
--- a/scripts/audio/@audiorecorder/stop.m
+++ b/scripts/audio/@audiorecorder/stop.m
@@ -13,18 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{recorder})
-## Stop the audiorecorder object @var{recorder} and clean up any audio
-## streams.
+## Stop the audiorecorder object @var{recorder} and clean up any audio streams.
 ## @end deftypefn
 
 function stop (recorder)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/subsasgn.m b/scripts/audio/@audiorecorder/subsasgn.m
--- a/scripts/audio/@audiorecorder/subsasgn.m
+++ b/scripts/audio/@audiorecorder/subsasgn.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{recorder}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio recorder object @var{recorder}.
+##
 ## Assign the value of @var{rhs} to the recorder property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (recorder, idx, rhs)
   if (nargin != 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/subsref.m b/scripts/audio/@audiorecorder/subsref.m
--- a/scripts/audio/@audiorecorder/subsref.m
+++ b/scripts/audio/@audiorecorder/subsref.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{recorder}, @var{idx})
 ## Perform subscripted selection on the audio recorder object @var{recorder}.
+##
 ## Return the recorder property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (recorder, idx)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/audio/lin2mu.m b/scripts/audio/lin2mu.m
--- a/scripts/audio/lin2mu.m
+++ b/scripts/audio/lin2mu.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lin2mu (@var{x}, @var{n})
-## Convert audio data from linear to mu-law.  Mu-law values use 8-bit
-## unsigned integers.  Linear values use @var{n}-bit signed integers or
-## floating point values in the range -1 @leq{} @var{x} @leq{} 1 if
-## @var{n} is 0.
+## Convert audio data from linear to mu-law.
+##
+## Mu-law values use 8-bit unsigned integers.  Linear values use @var{n}-bit
+## signed integers or floating point values in the range -1 @leq{} @var{x}
+## @leq{} 1 if @var{n} is 0.
 ##
 ## If @var{n} is not specified it defaults to 0, 8, or 16 depending on
 ## the range of values in @var{x}.
 ## @seealso{mu2lin}
 ## @end deftypefn
 
 
 ## Author: Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
diff --git a/scripts/audio/mu2lin.m b/scripts/audio/mu2lin.m
--- a/scripts/audio/mu2lin.m
+++ b/scripts/audio/mu2lin.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mu2lin (@var{x}, @var{n})
-## Convert audio data from mu-law to linear.  Mu-law values are 8-bit
-## unsigned integers.  Linear values use @var{n}-bit signed integers
-## or floating point values in the range -1@leq{}y@leq{}1 if @var{n}
-## is 0.
+## Convert audio data from mu-law to linear.
+##
+## Mu-law values are 8-bit unsigned integers.  Linear values use @var{n}-bit
+## signed integers or floating point values in the range -1@leq{}y@leq{}1 if
+## @var{n} is 0.
 ##
 ## If @var{n} is not specified it defaults to 0.
 ## @seealso{lin2mu}
 ## @end deftypefn
 
 ## Author:  Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 18 October 1994
 ## Adapted-By: jwe
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -16,20 +16,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} record (@var{sec})
 ## @deftypefnx {Function File} {} record (@var{sec}, @var{fs})
 ## Record @var{sec} seconds of audio from the system's default audio input at
-## a sampling rate of 8000 samples per second.  If the optional argument
-## @var{fs} is given, it specifies the sampling rate for recording.
+## a sampling rate of 8000 samples per second.
+##
+## If the optional argument @var{fs} is given, it specifies the sampling rate
+## for recording.
 ##
 ## For more control over audio recording, use the @code{audiorecorder} class.
+## @seealso{sound, soundsc}
 ## @end deftypefn
 
 function x = record (sec, fs)
 
   if (nargin == 1)
     fs = 8000;
   elseif (nargin != 2)
     print_usage ();
diff --git a/scripts/audio/sound.m b/scripts/audio/sound.m
--- a/scripts/audio/sound.m
+++ b/scripts/audio/sound.m
@@ -16,25 +16,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sound (@var{y})
 ## @deftypefnx {Function File} {} sound (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {} sound (@var{y}, @var{fs}, @var{nbits})
 ## Play audio data @var{y} at sample rate @var{fs} to the default audio
-## device.  If @var{fs} is not given, a default sample rate of 8000 samples
-## per second is used.  The optional argument @var{nbits} specifies the bit
-## depth to play to the audio device and defaults to 8 bits.
+## device.
 ##
 ## The audio signal @var{y} can be a vector or a two-column array, representing
 ## mono or stereo audio, respectively.
 ##
+## If @var{fs} is not given, a default sample rate of 8000 samples per second
+## is used.
+##
+## The optional argument @var{nbits} specifies the bit depth to play to the
+## audio device and defaults to 8 bits.
+##
 ## For more control over audio playback, use the @code{audioplayer} class.
-## @seealso{record, soundsc}
+## @seealso{soundsc, record}
 ## @end deftypefn
 
 function sound (y, fs, nbits)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/soundsc.m b/scripts/audio/soundsc.m
--- a/scripts/audio/soundsc.m
+++ b/scripts/audio/soundsc.m
@@ -17,30 +17,34 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} soundsc (@var{y})
 ## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {} soundsc (@dots{}, [@var{ymin}, @var{ymax}])
 ## Scale the audio data @var{y} and play it at sample rate @var{fs} to the
-## default audio device.  If @var{fs} is not given, a default sample rate of
-## 8000 samples per second is used.  The optional argument @var{nbits} specifies
-## the bit depth to play to the audio device and defaults to 8 bits.
+## default audio device.
+##
+## The audio signal @var{y} can be a vector or a two-column array, representing
+## mono or stereo audio, respectively.
+##
+## If @var{fs} is not given, a default sample rate of 8000 samples per second
+## is used.
+##
+## The optional argument @var{nbits} specifies the bit depth to play to the
+## audio device and defaults to 8 bits.
 ##
 ## By default, @var{y} is automatically normalized to the range [-1, 1].  If the
 ## range [@var{ymin}, @var{ymax}] is given, then elements of @var{y} that fall
 ## within the range @var{ymin} @leq{} @var{y} @leq{} @var{ymax} are scaled to
 ## the range [-1, 1] instead.
 ##
-## The audio signal @var{y} can be a vector or a two-column array, representing
-## mono or stereo audio, respectively.
-##
 ## For more control over audio playback, use the @code{audioplayer} class.
-## @seealso{record, sound}
+## @seealso{sound, record}
 ## @end deftypefn
 
 function soundsc (y, fs, nbits, yrange)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -19,34 +19,37 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@var{y}, @var{fs}, @var{nbits}] =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, [@var{n1} @var{n2}])
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@dots{}, @var{datatype})
 ## @deftypefnx {Function File} {@var{sz} =} wavread (@var{filename}, "size")
+## @deftypefnx {Function File} {[@var{n_samp}, @var{n_chan}] =} wavread (@var{filename}, "size")
 ## Read the audio signal @var{y} from the RIFF/WAVE sound file @var{filename}.
+##
 ## If the file contains multichannel data, then @var{y} is a matrix with the
 ## channels represented as columns.
 ##
-## The optional return value @var{fs} is the sample rate of the audio file in
-## Hz.  The optional return value @var{nbits} is the number of bits per sample
-## as encoded in the file.
-##
 ## If @var{n} is specified, only the first @var{n} samples of the file are
 ## returned.  If [@var{n1} @var{n2}] is specified, only the range of samples
 ## from @var{n1} to @var{n2} is returned.  A value of @code{Inf} can be used
 ## to represent the total number of samples in the file.
 ##
 ## If the option @qcode{"size"} is given, then the size of the audio signal
 ## is returned instead of the data.  The size is returned in a row vector of
 ## the form [@var{samples} @var{channels}].  If there are two output arguments,
 ## the number of samples is assigned to the first and the number of channels
 ## is assigned to the second.
+##
+## The optional return value @var{fs} is the sample rate of the audio file in
+## Hz.  The optional return value @var{nbits} is the number of bits per sample
+## as encoded in the file.
+##
 ## @seealso{audioread, audiowrite, wavwrite}
 ## @end deftypefn
 
 function [y, fs, nbits] = wavread (filename, varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
diff --git a/scripts/audio/wavwrite.m b/scripts/audio/wavwrite.m
--- a/scripts/audio/wavwrite.m
+++ b/scripts/audio/wavwrite.m
@@ -17,24 +17,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wavwrite (@var{y}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{fs}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{fs}, @var{nbits}, @var{filename})
 ## Write the audio signal @var{y} to the RIFF/WAVE sound file @var{filename}.
+##
 ## If @var{y} is a matrix, the columns represent multiple audio channels.
 ##
 ## The optional argument @var{fs} specifies the sample rate of the audio signal
-## in Hz.  The optional argument @var{nbits} specifies the number of bits per
-## sample to write to @var{filename}.  The default sample rate is 8000 Hz and
-## the default bit depth is 16 bits per sample.
+## in Hz.
+## 
+## The optional argument @var{nbits} specifies the number of bits per sample
+## to write to @var{filename}.
 ##
-## @seealso{audioread, audiowrite, wavread}
+## The default sample rate is 8000 Hz and the default bit depth is 16 bits
+## per sample.
+##
+## @seealso{audiowrite, audioread, wavread}
 ## @end deftypefn
 
 function wavwrite (y, varargin)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/elfun/cosd.m b/scripts/elfun/cosd.m
--- a/scripts/elfun/cosd.m
+++ b/scripts/elfun/cosd.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cosd (@var{x})
-## Compute the cosine for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{(@var{x}-90)/180} is an integer.
+## Compute the cosine for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{(@var{x}-90)/180} is an integer.
 ## @seealso{acosd, cos}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = cosd (x)
 
   if (nargin != 1)
diff --git a/scripts/elfun/sind.m b/scripts/elfun/sind.m
--- a/scripts/elfun/sind.m
+++ b/scripts/elfun/sind.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sind (@var{x})
-## Compute the sine for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{@var{x}/180} is an integer.
+## Compute the sine for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{@var{x}/180} is an integer.
 ## @seealso{asind, sin}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = sind (x)
 
   if (nargin != 1)
diff --git a/scripts/elfun/tand.m b/scripts/elfun/tand.m
--- a/scripts/elfun/tand.m
+++ b/scripts/elfun/tand.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tand (@var{x})
-## Compute the tangent for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{@var{x}/180} is an integer and @code{Inf} for
-## elements where @code{(@var{x}-90)/180} is an integer.
+## Compute the tangent for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{@var{x}/180} is an integer and
+## @code{Inf} for elements where @code{(@var{x}-90)/180} is an integer.
 ## @seealso{atand, tan}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = tand (x)
 
   if (nargin != 1)
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -17,22 +17,23 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} accumarray (@var{subs}, @var{vals}, @var{sz}, @var{func}, @var{fillval}, @var{issparse})
 ## @deftypefnx {Function File} {} accumarray (@var{subs}, @var{vals}, @dots{})
 ##
 ## Create an array by accumulating the elements of a vector into the
-## positions defined by their subscripts.  The subscripts are defined by
-## the rows of the matrix @var{subs} and the values by @var{vals}.  Each
-## row of @var{subs} corresponds to one of the values in @var{vals}.  If
-## @var{vals} is a scalar, it will be used for each of the row of
-## @var{subs}.  If @var{subs} is a cell array of vectors, all vectors
-## must be of the same length, and the subscripts in the @var{k}th
+## positions defined by their subscripts.
+##
+## The subscripts are defined by the rows of the matrix @var{subs} and the
+## values by @var{vals}.  Each row of @var{subs} corresponds to one of the
+## values in @var{vals}.  If @var{vals} is a scalar, it will be used for each
+## of the row of @var{subs}.  If @var{subs} is a cell array of vectors, all
+## vectors must be of the same length, and the subscripts in the @var{k}th
 ## vector must correspond to the @var{k}th dimension of the result.
 ##
 ## The size of the matrix will be determined by the subscripts
 ## themselves.  However, if @var{sz} is defined it determines the matrix
 ## size.  The length of @var{sz} must correspond to the number of columns
 ## in @var{subs}.  An exception is if @var{subs} has only one column, in
 ## which case @var{sz} may be the dimensions of a vector and the
 ## subscripts of @var{subs} are taken as the indices into it.
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} accumdim (@var{subs}, @var{vals}, @var{dim}, @var{n}, @var{func}, @var{fillval})
 ## Create an array by accumulating the slices of an array into the
 ## positions defined by their subscripts along a specified dimension.
+##
 ## The subscripts are defined by the index vector @var{subs}.
 ## The dimension is specified by @var{dim}.  If not given, it defaults
 ## to the first non-singleton dimension.  The length of @var{subs} must
 ## be equal to @code{size (@var{vals}, @var{dim})}.
 ##
 ## The extent of the result matrix in the working dimension will be
 ## determined by the subscripts themselves.  However, if @var{n} is
 ## defined it determines this extent.
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bitcmp (@var{A}, @var{k})
-## Return the @var{k}-bit complement of integers in @var{A}.  If
-## @var{k} is omitted @code{k = log2 (bitmax) + 1} is assumed.
+## Return the @var{k}-bit complement of integers in @var{A}.
+##
+## If @var{k} is omitted @code{k = log2 (bitmax) + 1} is assumed.
 ##
 ## @example
 ## @group
 ## bitcmp (7,4)
 ##   @result{} 8
 ## dec2bin (11)
 ##   @result{} 1011
 ## dec2bin (bitcmp (11, 6))
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{c} =} bitget (@var{A}, @var{n})
-## Return the status of bit(s) @var{n} of unsigned integers in @var{A}
-## the lowest significant bit is @var{n} = 1.
+## Return the status of bit(s) @var{n} of the unsigned integers in @var{A}.
+##
+## The least significant bit is @var{n} = 1.
 ##
 ## @example
 ## @group
 ## bitget (100, 8:-1:1)
 ## @result{} 0  1  1  0  0  1  0  0
 ## @end group
 ## @end example
 ## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, bitmax}
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{C} =} bitset (@var{A}, @var{n})
 ## @deftypefnx {Function File} {@var{C} =} bitset (@var{A}, @var{n}, @var{val})
-## Set or reset bit(s) @var{n} of unsigned integers in @var{A}.
+## Set or reset bit(s) @var{n} of the unsigned integers in @var{A}.
+##
 ## @var{val} = 0 resets and @var{val} = 1 sets the bits.
-## The lowest significant bit is: @var{n} = 1.  All variables must be the
-## same size or scalars.
+## The least significant bit is @var{n} = 1.  All variables must be the same
+## size or scalars.
 ##
 ## @example
 ## @group
 ## dec2bin (bitset (10, 1))
 ##   @result{} 1011
 ## @end group
 ## @end example
 ## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, bitmax}
diff --git a/scripts/general/blkdiag.m b/scripts/general/blkdiag.m
--- a/scripts/general/blkdiag.m
+++ b/scripts/general/blkdiag.m
@@ -14,19 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} blkdiag (@var{A}, @var{B}, @var{C}, @dots{})
 ## Build a block diagonal matrix from @var{A}, @var{B}, @var{C}, @dots{}
-## All the arguments must be numeric and are two-dimensional matrices or
-## scalars.  If any argument is of type sparse, the output will also be
-## sparse.
+##
+## All arguments must be numeric and either two-dimensional matrices or
+## scalars.  If any argument is of type sparse, the output will also be sparse.
 ## @seealso{diag, horzcat, vertcat, sparse}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo
 ## Modified by: William Poetra Yoga Hadisoeseno
 
 function retval = blkdiag (varargin)
 
diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -18,26 +18,28 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{theta}, @var{r}] =} cart2pol (@var{x}, @var{y})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}, @var{z}] =} cart2pol (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}] =} cart2pol (@var{C})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}, @var{z}] =} cart2pol (@var{C})
 ## @deftypefnx {Function File} {@var{P} =} cart2pol (@dots{})
 ##
-## Transform Cartesian to polar or cylindrical coordinates.
+## Transform Cartesian coordinates to polar or cylindrical coordinates.
+##
+## The inputs @var{x}, @var{y} (, and @var{z}) must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{C}
+## represents the Cartesian coordinate (@var{x}, @var{y} (, @var{z})).
 ##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{r} is the distance to the z-axis @w{(0, 0, z)}.
-## @var{x}, @var{y} (, and @var{z}) must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{C}
-## represents the Cartesian coordinate (@var{x}, @var{y} (, @var{z})).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{P} where each row represents one polar/(cylindrical) coordinate
+## If only a single return argument is requested then return a matrix @var{P}
+## where each row represents one polar/(cylindrical) coordinate
 ## (@var{theta}, @var{phi} (, @var{z})).
 ## @seealso{pol2cart, cart2sph, sph2cart}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [theta, r, z] = cart2pol (x, y, z = [])
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -15,27 +15,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{theta}, @var{phi}, @var{r}] =} cart2sph (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {[@var{theta}, @var{phi}, @var{r}] =} cart2sph (@var{C})
 ## @deftypefnx {Function File} {@var{S} =} cart2sph (@dots{})
-## Transform Cartesian to spherical coordinates.
+## Transform Cartesian coordinates to spherical coordinates.
 ##
+## The inputs @var{x}, @var{y}, and @var{z} must be the same shape, or scalar.
+## If called with a single matrix argument then each row of @var{C} represents
+## the Cartesian coordinate (@var{x}, @var{y}, @var{z}).
+## 
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{phi} is the angle relative to the xy-plane.
+##
 ## @var{r} is the distance to the origin @w{(0, 0, 0)}.
-## @var{x}, @var{y}, and @var{z} must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{C}
-## represents the Cartesian coordinate (@var{x}, @var{y}, @var{z}).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{S} where each row represents one spherical coordinate
+## If only a single return argument is requested then return a matrix @var{S}
+## where each row represents one spherical coordinate
 ## (@var{theta}, @var{phi}, @var{r}).
 ## @seealso{sph2cart, cart2pol, pol2cart}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [theta, phi, r] = cart2sph (x, y, z)
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -15,19 +15,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{m} =} cell2mat (@var{c})
 ## Convert the cell array @var{c} into a matrix by concatenating all
-## elements of @var{c} into a hyperrectangle.  Elements of @var{c} must
-## be numeric, logical, or char matrices; or cell arrays; or structs; and
-## @code{cat} must be able to concatenate them together.
+## elements of @var{c} into a hyperrectangle.
+##
+## Elements of @var{c} must be numeric, logical, or char matrices; or cell
+## arrays; or structs; and @code{cat} must be able to concatenate them together.
 ## @seealso{mat2cell, num2cell}
 ## @end deftypefn
 
 function m = cell2mat (c)
 
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/general/celldisp.m b/scripts/general/celldisp.m
--- a/scripts/general/celldisp.m
+++ b/scripts/general/celldisp.m
@@ -14,19 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} celldisp (@var{c})
 ## @deftypefnx {Function File} {} celldisp (@var{c}, @var{name})
-## Recursively display the contents of a cell array.  By default the values
-## are displayed with the name of the variable @var{c}.  However, this name
-## can be replaced with the variable @var{name}.  For example:
+## Recursively display the contents of a cell array.
+##
+## By default the values are displayed with the name of the variable @var{c}.
+## However, this name can be replaced with the variable @var{name}.  For
+## example:
 ##
 ## @example
 ## @group
 ## c = @{1, 2, @{31, 32@}@};
 ## celldisp (c, "b")
 ##    @result{}
 ##       b@{1@} =
 ##        1
diff --git a/scripts/general/chop.m b/scripts/general/chop.m
--- a/scripts/general/chop.m
+++ b/scripts/general/chop.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chop (@var{x}, @var{ndigits}, @var{base})
 ## Truncate elements of @var{x} to a length of @var{ndigits} such that the
-## resulting numbers are exactly divisible by @var{base}.  If @var{base} is not
-## specified it defaults to 10.
+## resulting numbers are exactly divisible by @var{base}.
+##
+## If @var{base} is not specified it defaults to 10.
 ##
 ## @example
 ## @group
 ## chop (-pi, 5, 10)
 ##    @result{} -3.14200000000000
 ## chop (-pi, 5, 5)
 ##    @result{} -3.14150000000000
 ## @end group
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -13,21 +13,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} circshift (@var{x}, @var{n})
-## Circularly shift the values of the array @var{x}.  @var{n} must be
-## a vector of integers no longer than the number of dimensions in
-## @var{x}.  The values of @var{n} can be either positive or negative,
-## which determines the direction in which the values or @var{x} are
-## shifted.  If an element of @var{n} is zero, then the corresponding
+## Circularly shift the values of the array @var{x}.
+##
+## @var{n} must be a vector of integers no longer than the number of
+## dimensions in @var{x}.  The values of @var{n} can be either positive or
+## negative, which determines the direction in which the values or @var{x}
+## are shifted.  If an element of @var{n} is zero, then the corresponding
 ## dimension of @var{x} will not be shifted.  For example:
 ##
 ## @example
 ## @group
 ## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
 ## circshift (x, 1)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -15,34 +15,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{err}, @var{y1}, @dots{}] =} common_size (@var{x1}, @dots{})
-## Determine if all input arguments are either scalar or of common
-## size.  If so, @var{err} is zero, and @var{yi} is a matrix of the
-## common size with all entries equal to @var{xi} if this is a scalar or
-## @var{xi} otherwise.  If the inputs cannot be brought to a common size,
-## @var{err} is 1, and @var{yi} is @var{xi}.  For example:
+## Determine if all input arguments are either scalar or of common size.
+##
+## If true, @var{err} is zero, and @var{yi} is a matrix of the common size
+## with all entries equal to @var{xi} if this is a scalar or @var{xi}
+## otherwise.  If the inputs cannot be brought to a common size, @var{err} is
+## 1, and @var{yi} is @var{xi}.  For example:
 ##
 ## @example
 ## @group
 ## [errorcode, a, b] = common_size ([1 2; 3 4], 5)
 ##      @result{} errorcode = 0
 ##      @result{} a = [ 1, 2; 3, 4 ]
 ##      @result{} b = [ 5, 5; 5, 5 ]
 ## @end group
 ## @end example
 ##
 ## @noindent
-## This is useful for implementing functions where arguments can either
-## be scalars or of common size.
+## This is useful for implementing functions where arguments can either be
+## scalars or of common size.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 ## Optimized-By: Jaroslav Hajek
 
 function [errorcode, varargout] = common_size (varargin)
diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -16,31 +16,33 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cplxpair (@var{z})
 ## @deftypefnx {Function File} {} cplxpair (@var{z}, @var{tol})
 ## @deftypefnx {Function File} {} cplxpair (@var{z}, @var{tol}, @var{dim})
 ## Sort the numbers @var{z} into complex conjugate pairs ordered by
-## increasing real part.  Place the negative imaginary complex number
-## first within each pair.  Place all the real numbers (those with
-## @code{abs (imag (@var{z}) / @var{z}) < @var{tol}}) after the
+## increasing real part.
+##
+## The negative imaginary complex numbers are placed first within each pair.
+## All real numbers (those with
+## @code{abs (imag (@var{z}) / @var{z}) < @var{tol}}) are placed after the
 ## complex pairs.
 ##
 ## If @var{tol} is unspecified the default value is 100*@code{eps}.
 ##
 ## By default the complex pairs are sorted along the first non-singleton
-## dimension of @var{z}.  If @var{dim} is specified, then the complex
-## pairs are sorted along this dimension.
+## dimension of @var{z}.  If @var{dim} is specified, then the complex pairs are
+## sorted along this dimension.
 ##
 ## Signal an error if some complex numbers could not be paired.  Signal an
-## error if all complex numbers are not exact conjugates (to within
-## @var{tol}).  Note that there is no defined order for pairs with identical
-## real parts but differing imaginary parts.
+## error if all complex numbers are not exact conjugates (to within @var{tol}).
+## Note that there is no defined order for pairs with identical real parts but
+## differing imaginary parts.
 ## @c Set example in small font to prevent overfull line
 ##
 ## @smallexample
 ## cplxpair (exp(2i*pi*[0:4]'/5)) == exp(2i*pi*[3; 2; 4; 1; 0]/5)
 ## @end smallexample
 ## @end deftypefn
 
 ## FIXME: subsort returned pairs by imaginary magnitude
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -15,32 +15,34 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} cumtrapz (@var{y})
 ## @deftypefnx {Function File} {@var{q} =} cumtrapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{q} =} cumtrapz (@dots{}, @var{dim})
-##
 ## Cumulative numerical integration of points @var{y} using the trapezoidal
 ## method.
+##
 ## @w{@code{cumtrapz (@var{y})}} computes the cumulative integral of @var{y}
-## along the first non-singleton dimension.  Where @code{trapz} reports
-## only the overall integral sum, @code{cumtrapz} reports the current partial
-## sum value at each point of @var{y}.  When the argument @var{x} is omitted
-## an equally spaced @var{x} vector with unit spacing (1) is assumed.
-## @code{cumtrapz (@var{x}, @var{y})} evaluates the integral with respect to
-## the spacing in @var{x} and the values in @var{y}.  This is useful if the
-## points in @var{y} have been sampled unevenly.  If the optional @var{dim}
-## argument is given, operate along this dimension.
+## along the first non-singleton dimension.  Where @code{trapz} reports only
+## the overall integral sum, @code{cumtrapz} reports the current partial sum
+## value at each point of @var{y}.
 ##
-## If @var{x} is not specified then unit spacing will be used.  To scale
-## the integral to the correct value you must multiply by the actual spacing
-## value (deltaX).
+## When the argument @var{x} is omitted an equally spaced @var{x} vector with
+## unit spacing (1) is assumed.  @code{cumtrapz (@var{x}, @var{y})} evaluates
+## the integral with respect to the spacing in @var{x} and the values in
+## @var{y}.  This is useful if the points in @var{y} have been sampled unevenly.
+##
+## If the optional @var{dim} argument is given, operate along this dimension.
+##
+## Application Note: If @var{x} is not specified then unit spacing will be
+## used.  To scale the integral to the correct value you must multiply by the
+## actual spacing value (deltaX).
 ## @seealso{trapz, cumsum}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ##
 ## also: June 2000 Paul Kienzle (fixes,suggestions)
 ## 2006-05-12 David Bateman - Modified for NDArrays
 
diff --git a/scripts/general/dblquad.m b/scripts/general/dblquad.m
--- a/scripts/general/dblquad.m
+++ b/scripts/general/dblquad.m
@@ -17,21 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol}, @var{quadf})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol}, @var{quadf}, @dots{})
 ## Numerically evaluate the double integral of @var{f}.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.  The function @var{f} must
-## have the form @math{z = f(x,y)} where @var{x} is a vector and @var{y} is a
-## scalar.  It should return a vector of the same length and orientation as
-## @var{x}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must have the form
+## @math{z = f(x,y)} where @var{x} is a vector and @var{y} is a scalar.  It
+## should return a vector of the same length and orientation as @var{x}.
 ##
 ## @var{xa}, @var{ya} and @var{xb}, @var{yb} are the lower and upper limits of
 ## integration for x and y respectively.  The underlying integrator determines
 ## whether infinite bounds are accepted.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to
 ## integrate each sub-integral.  The default value is @math{1e^{-6}}.
 ##
diff --git a/scripts/general/deal.m b/scripts/general/deal.m
--- a/scripts/general/deal.m
+++ b/scripts/general/deal.m
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{r1}, @var{r2}, @dots{}, @var{rn}] =} deal (@var{a})
 ## @deftypefnx {Function File} {[@var{r1}, @var{r2}, @dots{}, @var{rn}] =} deal (@var{a1}, @var{a2}, @dots{}, @var{an})
 ##
 ## Copy the input parameters into the corresponding output parameters.
-## If only one input parameter is supplied, its value is copied to each
+##
+## If only a single input parameter is supplied, its value is copied to each
 ## of the outputs.
 ##
 ## For example,
 ##
 ## @example
 ## [a, b, c] = deal (x, y, z);
 ## @end example
 ##
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -24,16 +24,17 @@
 ##
 ## Calculate the discrete Laplace
 ## @tex
 ## operator $( \nabla^2 )$.
 ## @end tex
 ## @ifnottex
 ## operator.
 ## @end ifnottex
+##
 ## For a 2-dimensional matrix @var{M} this is defined as
 ## @tex
 ## $$d = {1 \over 4} \left( {d^2 \over dx^2} M(x,y) + {d^2 \over dy^2} M(x,y) \right)$$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
diff --git a/scripts/general/display.m b/scripts/general/display.m
--- a/scripts/general/display.m
+++ b/scripts/general/display.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} display (@var{a})
-## Display the contents of an object.  If @var{a} is an object of the
-## class @qcode{"myclass"}, then @code{display} is called in a case like
+## Display the contents of an object.
+##
+## If @var{a} is an object of the class @qcode{"myclass"}, then @code{display}
+## is called in a case like
 ##
 ## @example
 ## myclass (@dots{})
 ## @end example
 ##
 ## @noindent
 ## where Octave is required to display the contents of a variable of the
 ## type @qcode{"myclass"}.
diff --git a/scripts/general/divergence.m b/scripts/general/divergence.m
--- a/scripts/general/divergence.m
+++ b/scripts/general/divergence.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{div} =} divergence (@var{x}, @var{y}, @var{z}, @var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{x}, @var{y}, @var{fx}, @var{fy})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{fx}, @var{fy})
 ## Calculate divergence of a vector field given by the arrays @var{fx},
 ## @var{fy}, and @var{fz} or @var{fx}, @var{fy} respectively.
+##
 ## @tex
 ## $$
 ## div F(x,y,z) = \partial_x{F} + \partial_y{F} + \partial_z{F}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{names} =} fieldnames (@var{struct})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{obj})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{javaobj})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames ("@var{jclassname}")
 ## Return a cell array of strings with the names of the fields in the
 ## specified input.
 ##
-## When the input is a structure @var{struct}, the names are the elements
-## of the structure.
+## When the input is a structure @var{struct}, the names are the elements of
+## the structure.
 ##
 ## When the input is an Octave object @var{obj}, the names are the public
 ## properties of the object.
 ##
 ## When the input is a Java object @var{javaobj} or Java classname
 ## @var{jclassname} the name are the public data elements of the object or
 ## class.
 ## @seealso{numfields, isfield, orderfields, struct, methods}
diff --git a/scripts/general/flip.m b/scripts/general/flip.m
--- a/scripts/general/flip.m
+++ b/scripts/general/flip.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flip (@var{x})
 ## @deftypefnx {Function File} {} flip (@var{x}, @var{dim})
-## Flip array across specific dimension.
+## Flip array across dimension @var{dim}.
 ##
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
 ## @var{dim} defaults to the first non-singleton dimension.
 ## For example:
 ##
 ## @example
 ## @group
 ## flip ([1  2  3  4])
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -15,21 +15,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flipdim (@var{x})
 ## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
-## Flip array across specific dimension.
+## Flip array across dimension @var{dim}.
 ##
-## This function is an alias for @code{flip} and exists for backwards
-## and @sc{matlab} compatibility.  See @code{flip} for complete usage
-## information.
+## This function is an alias for @code{flip} and exists for backwards and
+## @sc{matlab} compatibility.  See @code{flip} for complete usage information.
 ##
 ## @seealso{flip, fliplr, flipud, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
 function y = flipdim (varargin)
   y = flip (varargin{:});
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fliplr (@var{x})
 ## Flip array left to right.
 ##
-## Return a copy of @var{x} with the order of the columns reversed.  In
-## other words, @var{x} is flipped left-to-right about a vertical axis.  For
-## example:
+## Return a copy of @var{x} with the order of the columns reversed.  In other
+## words, @var{x} is flipped left-to-right about a vertical axis.  For example:
 ##
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} flipud (@var{x})
 ## Flip array upside down.
 ##
-## Return a copy of @var{x} with the order of the rows reversed.  In
-## other words, @var{x} is flipped upside-down about a horizontal axis.  For
-## example:
+## Return a copy of @var{x} with the order of the rows reversed.  In other
+## words, @var{x} is flipped upside-down about a horizontal axis.  For example:
 ##
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -20,49 +20,48 @@
 ## @deftypefn  {Function File} {@var{dx} =} gradient (@var{m})
 ## @deftypefnx {Function File} {[@var{dx}, @var{dy}, @var{dz}, @dots{}] =} gradient (@var{m})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{m}, @var{s})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{m}, @var{x}, @var{y}, @var{z}, @dots{})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0}, @var{s})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0}, @var{x}, @var{y}, @dots{})
 ##
-## Calculate the gradient of sampled data or a function.  If @var{m}
-## is a vector, calculate the one-dimensional gradient of @var{m}.  If
-## @var{m} is a matrix the gradient is calculated for each dimension.
+## Calculate the gradient of sampled data or a function.
 ##
-## @code{[@var{dx}, @var{dy}] = gradient (@var{m})} calculates the one
-## dimensional gradient for @var{x} and @var{y} direction if @var{m} is a
+## If @var{m} is a vector, calculate the one-dimensional gradient of @var{m}.
+## If @var{m} is a matrix the gradient is calculated for each dimension.
+##
+## @code{[@var{dx}, @var{dy}] = gradient (@var{m})} calculates the
+## one-dimensional gradient for @var{x} and @var{y} direction if @var{m} is a
 ## matrix.  Additional return arguments can be use for multi-dimensional
 ## matrices.
 ##
-## A constant spacing between two points can be provided by the
-## @var{s} parameter.  If @var{s} is a scalar, it is assumed to be the spacing
-## for all dimensions.
-## Otherwise, separate values of the spacing can be supplied by
+## A constant spacing between two points can be provided by the @var{s}
+## parameter.  If @var{s} is a scalar, it is assumed to be the spacing for all
+## dimensions.  Otherwise, separate values of the spacing can be supplied by
 ## the @var{x}, @dots{} arguments.  Scalar values specify an equidistant
-## spacing.
-## Vector values for the @var{x}, @dots{} arguments specify the coordinate for
-## that
-## dimension.  The length must match their respective dimension of @var{m}.
+## spacing.  Vector values for the @var{x}, @dots{} arguments specify the
+## coordinate for that dimension.  The length must match their respective
+## dimension of @var{m}.
 ##
 ## At boundary points a linear extrapolation is applied.  Interior points
 ## are calculated with the first approximation of the numerical gradient
 ##
 ## @example
 ## y'(i) = 1/(x(i+1)-x(i-1)) * (y(i-1)-y(i+1)).
 ## @end example
 ##
 ## If the first argument @var{f} is a function handle, the gradient of the
-## function at the points in @var{x0} is approximated using central
-## difference.  For example, @code{gradient (@@cos, 0)} approximates the
-## gradient of the cosine function in the point @math{x0 = 0}.  As with
-## sampled data, the spacing values between the points from which the
-## gradient is estimated can be set via the @var{s} or @var{dx},
-## @var{dy}, @dots{} arguments.  By default a spacing of 1 is used.
+## function at the points in @var{x0} is approximated using central difference.
+## For example, @code{gradient (@@cos, 0)} approximates the gradient of the
+## cosine function in the point @math{x0 = 0}.  As with sampled data, the
+## spacing values between the points from which the gradient is estimated can
+## be set via the @var{s} or @var{dx}, @var{dy}, @dots{} arguments.  By default
+## a spacing of 1 is used.
 ## @seealso{diff, del2}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Modified: David Bateman <dbateman@free.fr> Added NDArray support
 
 function varargout = gradient (m, varargin)
 
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -24,22 +24,21 @@
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Three-dimensional interpolation.
 ##
 ## Interpolate reference data @var{x}, @var{y}, @var{z}, @var{v} to determine
 ## @var{vi} at the coordinates @var{xi}, @var{yi}, @var{zi}.  The reference
 ## data @var{x}, @var{y}, @var{z} can be matrices, as returned by
-## @code{meshgrid}, in which case the sizes of
-## @var{x}, @var{y}, @var{z}, and @var{v} must be equal.  If @var{x}, @var{y},
-## @var{z} are vectors describing a cubic grid then
-## @code{length (@var{x}) == columns (@var{v})},
-## @code{length (@var{y}) == rows (@var{v})},
-## and @code{length (@var{z}) == size (@var{v}, 3)}.  In either case the input
+## @code{meshgrid}, in which case the sizes of @var{x}, @var{y}, @var{z}, and
+## @var{v} must be equal.  If @var{x}, @var{y}, @var{z} are vectors describing
+## a cubic grid then @code{length (@var{x}) == columns (@var{v})},
+## @code{length (@var{y}) == rows (@var{v})}, and
+## @code{length (@var{z}) == size (@var{v}, 3)}.  In either case the input
 ## data must be strictly monotonic.
 ##
 ## If called without @var{x}, @var{y}, @var{z}, and just a single reference
 ## data matrix @var{v}, the 3-D region
 ## @code{@var{x} = 1:columns (@var{v}), @var{y} = 1:rows (@var{v}),
 ## @var{z} = 1:size (@var{v}, 3)} is assumed.
 ## This saves memory if the grid is regular and the distance between points is
 ## not important.
diff --git a/scripts/general/interpft.m b/scripts/general/interpft.m
--- a/scripts/general/interpft.m
+++ b/scripts/general/interpft.m
@@ -15,25 +15,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} interpft (@var{x}, @var{n})
 ## @deftypefnx {Function File} {} interpft (@var{x}, @var{n}, @var{dim})
 ##
-## Fourier interpolation.  If @var{x} is a vector, then @var{x} is
-## resampled with @var{n} points.  The data in @var{x} is assumed to be
-## equispaced.  If @var{x} is a matrix or an N-dimensional array, the
-## interpolation is performed on each column of @var{x}.  If @var{dim} is
-## specified, then interpolate along the dimension @var{dim}.
+## Fourier interpolation.
 ##
-## @code{interpft} assumes that the interpolated function is periodic,
-## and so assumptions are made about the endpoints of the interpolation.
+## If @var{x} is a vector then @var{x} is resampled with @var{n} points.  The
+## data in @var{x} is assumed to be equispaced.  If @var{x} is a matrix or an
+## N-dimensional array, the interpolation is performed on each column of
+## @var{x}.
 ##
+## If @var{dim} is specified, then interpolate along the dimension @var{dim}.
+##
+## @code{interpft} assumes that the interpolated function is periodic, and so
+## assumptions are made about the endpoints of the interpolation.
 ## @seealso{interp1}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## 2001-02-11
 ##    * initial version
 ## 2002-03-17 aadler
 ##    * added code to work on matrices as well
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -20,16 +20,17 @@
 ## @deftypefn  {Function File} {@var{vi} =} interpn (@var{x1}, @var{x2}, @dots{}, @var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{m})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Perform @var{n}-dimensional interpolation, where @var{n} is at least two.
+##
 ## Each element of the @var{n}-dimensional array @var{v} represents a value
 ## at a location given by the parameters @var{x1}, @var{x2}, @dots{}, @var{xn}.
 ## The parameters @var{x1}, @var{x2}, @dots{}, @var{xn} are either
 ## @var{n}-dimensional arrays of the same size as the array @var{v} in
 ## the @qcode{"ndgrid"} format or vectors.  The parameters @var{y1}, etc.
 ## respect a similar format to @var{x1}, etc., and they represent the points
 ## at which the array @var{vi} is interpolated.
 ##
diff --git a/scripts/general/loadobj.m b/scripts/general/loadobj.m
--- a/scripts/general/loadobj.m
+++ b/scripts/general/loadobj.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} loadobj (@var{a})
 ## Method of a class to manipulate an object after loading it from a file.
+##
 ## The function @code{loadobj} is called when the object @var{a} is loaded
 ## using the @code{load} function.  An example of the use of @code{saveobj}
 ## might be to add fields to an object that don't make sense to be saved.
 ## For example:
 ##
 ## @example
 ## @group
 ## function b = loadobj (a)
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -22,16 +22,17 @@
 ## @deftypefnx {Function File} {} logspace (@var{a}, pi, @var{n})
 ## Return a row vector with @var{n} elements logarithmically spaced from
 ## @tex
 ## $10^{a}$ to $10^{b}$.
 ## @end tex
 ## @ifnottex
 ## 10^@var{a} to 10^@var{b}.
 ## @end ifnottex
+##
 ## If @var{n} is unspecified it defaults to 50.
 ##
 ## If @var{b} is equal to
 ## @tex
 ## $\pi$,
 ## @end tex
 ## @ifnottex
 ## pi,
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} methods (@var{obj})
 ## @deftypefnx {Function File} {} methods ("@var{classname}")
 ## @deftypefnx {Function File} {@var{mtds} =} methods (@dots{})
 ##
 ## Return a cell array containing the names of the methods for the
 ## object @var{obj} or the named class @var{classname}.
+##
 ## @var{obj} may be an Octave class object or a Java object.
 ##
 ## @seealso{fieldnames}
 ## @end deftypefn
 
 function mtds = methods (obj)
 
   if (nargin != 1)
diff --git a/scripts/general/nargchk.m b/scripts/general/nargchk.m
--- a/scripts/general/nargchk.m
+++ b/scripts/general/nargchk.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{msgstr} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs}, "string")
 ## @deftypefnx {Function File} {@var{msgstruct} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs}, "struct")
-## Return an appropriate error message string (or structure) if the
-## number of inputs requested is invalid.
+## Return an appropriate error message string (or structure) if the number of
+## inputs requested is invalid.
 ##
 ## This is useful for checking to see that the number of input arguments
 ## supplied to a function is within an acceptable range.
 ##
 ## @strong{Caution}: @code{nargchk} is scheduled for deprecation.  Use
 ## @code{narginchk} in all new code.
-## @seealso{nargoutchk, narginchk, error, nargin, nargout}
+## @seealso{narginchk, nargoutchk, error, nargin, nargout}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function msg = nargchk (minargs, maxargs, nargs, outtype = "string")
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -13,23 +13,24 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} narginchk (@var{minargs}, @var{maxargs})
-## Check for correct number of arguments or generate an error message if
-## the number of arguments in the calling function is outside the range
-## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
+## Check for correct number of input arguments.
 ##
-## Both @var{minargs} and @var{maxargs} need to be scalar numeric
-## values.  Zero, Inf and negative values are all allowed, and
-## @var{minargs} and @var{maxargs} may be equal.
+## Generate an error message if the number of arguments in the calling function
+## is outside the range @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
+##
+## Both @var{minargs} and @var{maxargs} must be scalar numeric values.  Zero,
+## Inf, and negative values are all allowed, and @var{minargs} and @var{maxargs}
+## may be equal.
 ##
 ## Note that this function evaluates @code{nargin} on the caller.
 ##
 ## @seealso{nargoutchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
diff --git a/scripts/general/nargoutchk.m b/scripts/general/nargoutchk.m
--- a/scripts/general/nargoutchk.m
+++ b/scripts/general/nargoutchk.m
@@ -19,30 +19,30 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} nargoutchk (@var{minargs}, @var{maxargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs}, "string")
 ## @deftypefnx {Function File} {@var{msgstruct} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs}, "struct")
 ## Check for correct number of output arguments.
 ##
-## On the first form, returns an error unless the number of arguments in its
-## caller is between the values of @var{minargs} and @var{maxargs}.  It does
-## nothing otherwise.  Note that this function evaluates the value of
-## @code{nargout} on the caller so its value must have not been tampered with.
+## In the first form, return an error if the number of arguments is not between
+## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.  Note that this
+## function evaluates the value of @code{nargout} on the caller so its value
+## must have not been tampered with.
 ##
-## Both @var{minargs} and @var{maxargs} need to be a numeric scalar.  Zero, Inf
+## Both @var{minargs} and @var{maxargs} must be numeric scalars.  Zero, Inf,
 ## and negative are all valid, and they can have the same value.
 ##
-## For backward compatibility reasons, the other forms return an appropriate
-## error message string (or structure) if the number of outputs requested is
+## For backwards compatibility, the other forms return an appropriate error
+## message string (or structure) if the number of outputs requested is
 ## invalid.
 ##
-## This is useful for checking to see that the number of output
-## arguments supplied to a function is within an acceptable range.
+## This is useful for checking to that the number of output arguments supplied
+## to a function is within an acceptable range.
 ## @seealso{narginchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function msg = nargoutchk (minargs, maxargs, nargs, outtype)
 
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nextpow2 (@var{x})
-## Compute exponent for smallest power of two larger than input.
+## Compute the exponent for the smallest power of two larger than the input.
 ##
-## For each element in the input array @var{x}, returns the first integer
+## For each element in the input array @var{x}, return the first integer
 ## @var{n} such that
 ## @tex
 ## $2^n \ge |x|$.
 ## @end tex
 ## @ifnottex
 ## 2^n @geq{} abs (x).
 ## @end ifnottex
 ##
diff --git a/scripts/general/nthargout.m b/scripts/general/nthargout.m
--- a/scripts/general/nthargout.m
+++ b/scripts/general/nthargout.m
@@ -14,27 +14,28 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} nthargout (@var{n}, @var{func}, @dots{})
 ## @deftypefnx {Function File} {} nthargout (@var{n}, @var{ntot}, @var{func}, @dots{})
-## Return the @var{n}th output argument of function given by the
-## function handle or string @var{func}.  Any arguments after @var{func}
-## are passed to @var{func}.  The total number of arguments to call
-## @var{func} with can be passed in @var{ntot}; by default @var{ntot}
-## is @var{n}.  The input @var{n} can also be a vector of indices of the
-## output, in which case the output will be a cell array of the
+## Return the @var{n}th output argument of the function specified by the
+## function handle or string @var{func}.
+##
+## Any additional arguments are passed directly to @var{func}.  The total
+## number of arguments to call @var{func} with can be passed in @var{ntot}; by
+## default @var{ntot} is @var{n}.  The input @var{n} can also be a vector of
+## indices of the output, in which case the output will be a cell array of the
 ## requested output arguments.
 ##
-## The intended use @code{nthargout} is to avoid intermediate variables.
-## For example, when finding the indices of the maximum entry of a
-## matrix, the following two compositions of nthargout
+## The intended use @code{nthargout} is to avoid intermediate variables.  For
+## example, when finding the indices of the maximum entry of a matrix, the
+## following two compositions of nthargout
 ##
 ## @example
 ## @group
 ## @var{m} = magic (5);
 ## cell2mat (nthargout ([1, 2], @@ind2sub, size (@var{m}),
 ##                      nthargout (2, @@max, @var{m}(:))))
 ## @result{} 5   3
 ## @end group
@@ -48,18 +49,18 @@
 ## @var{m} = magic (5);
 ## [~, idx] = max (@var{M}(:));
 ## [i, j] = ind2sub (size (@var{m}), idx);
 ## [i, j]
 ## @result{} 5   3
 ## @end group
 ## @end example
 ##
-## It can also be helpful to have all output arguments in a single cell
-## in the following manner:
+## It can also be helpful to have all output arguments in a single cell in the
+## following manner:
 ##
 ## @example
 ## @var{USV} = nthargout ([1:3], @@svd, hilb (5));
 ## @end example
 ##
 ## @seealso{nargin, nargout, varargin, varargout, isargout}
 ## @end deftypefn
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} num2str (@var{x})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{precision})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{format})
-## Convert a number (or array) to a string (or a character array).  The
-## optional second argument may either give the number of significant
-## digits (@var{precision}) to be used in the output or a format
-## template string (@var{format}) as in @code{sprintf} (@pxref{Formatted
-## Output}).  @code{num2str} can also handle complex numbers.
+## Convert a number (or array) to a string (or a character array).
+##
+## The optional second argument may either give the number of significant
+## digits (@var{precision}) to be used in the output or a format template
+## string (@var{format}) as in @code{sprintf} (@pxref{Formatted Output}).
+## @code{num2str} can also process complex numbers.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## num2str (123.456)
 ##      @result{} "123.46"
 ##
@@ -54,19 +55,19 @@
 ## Notes:
 ##
 ## For @sc{matlab} compatibility, leading spaces are stripped before returning
 ## the string.
 ##
 ## The @code{num2str} function is not very flexible.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ##
-## For complex @var{x}, the format string may only contain one
-## output conversion specification and nothing else.  Otherwise, results
-## will be unpredictable.
+## For complex @var{x}, the format string may only contain one output
+## conversion specification and nothing else.  Otherwise, results will be
+## unpredictable.
 ## @seealso{sprintf, int2str, mat2str}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -17,27 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{y}] =} pol2cart (@var{theta}, @var{r})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} pol2cart (@var{theta}, @var{r}, @var{z})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}] =} pol2cart (@var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} pol2cart (@var{P})
 ## @deftypefnx {Function File} {@var{C} =} pol2cart (@dots{})
-## Transform polar or cylindrical to Cartesian coordinates.
+## Transform polar or cylindrical coordinates to Cartesian coordinates.
 ##
-## @var{theta}, @var{r}, (and @var{z}) must be the same shape, or scalar.
+## The inputs @var{theta}, @var{r}, (and @var{z}) must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{P}
+## represents the polar/(cylindrical) coordinate (@var{theta}, @var{r}
+## (, @var{z})).
+##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{r} is the distance to the z-axis (0, 0, z).
-## If called with a single matrix argument then each row of @var{P}
-## represents the polar/(cylindrical) coordinate (@var{theta}, @var{r} (,
-## @var{z})).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{C} where each row represents one Cartesian coordinate
+## If only a single return argument is requested then return a matrix @var{C}
+## where each row represents one Cartesian coordinate
 ## (@var{x}, @var{y} (, @var{z})).
 ## @seealso{cart2pol, sph2cart, cart2sph}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [x, y, z] = pol2cart (theta, r, z = [])
diff --git a/scripts/general/polyarea.m b/scripts/general/polyarea.m
--- a/scripts/general/polyarea.m
+++ b/scripts/general/polyarea.m
@@ -15,24 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} polyarea (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} polyarea (@var{x}, @var{y}, @var{dim})
 ##
-## Determine area of a polygon by triangle method.  The variables
-## @var{x} and @var{y} define the vertex pairs, and must therefore have
-## the same shape.  They can be either vectors or arrays.  If they are
-## arrays then the columns of @var{x} and @var{y} are treated separately
-## and an area returned for each.
+## Determine area of a polygon by triangle method.
 ##
-## If the optional @var{dim} argument is given, then @code{polyarea}
-## works along this dimension of the arrays @var{x} and @var{y}.
+## The variables @var{x} and @var{y} define the vertex pairs, and must
+## therefore have the same shape.  They can be either vectors or arrays.  If
+## they are arrays then the columns of @var{x} and @var{y} are treated
+## separately and an area returned for each.
+##
+## If the optional @var{dim} argument is given, then @code{polyarea} works
+## along this dimension of the arrays @var{x} and @var{y}.
 ##
 ## @end deftypefn
 
 ## todo:  Add moments for centroid, etc.
 ##
 ## bugs and limitations:
 ##        Probably ought to be an optional check to make sure that
 ##        traversing the vertices doesn't make any sides cross
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -18,26 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} postpad (@var{x}, @var{l})
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c})
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c}, @var{dim})
 ## Append the scalar value @var{c} to the vector @var{x} until it is of length
 ## @var{l}.  If @var{c} is not given, a value of 0 is used.
 ##
-## If @code{length (@var{x}) > @var{l}}, elements from the end of
-## @var{x} are removed until a vector of length @var{l} is obtained.
+## If @code{length (@var{x}) > @var{l}}, elements from the end of @var{x} are
+## removed until a vector of length @var{l} is obtained.
 ##
 ## If @var{x} is a matrix, elements are appended or removed from each row.
 ##
-## If the optional argument @var{dim} is given, operate along this
-## dimension.
+## If the optional argument @var{dim} is given, operate along this dimension.
 ##
-## If @var{dim} is larger than the dimensions of @var{x}, the result will
-## have @var{dim} dimensions.
+## If @var{dim} is larger than the dimensions of @var{x}, the result will have
+## @var{dim} dimensions.
 ## @seealso{prepad, cat, resize}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = postpad (x, l, c, dim)
 
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -18,26 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} prepad (@var{x}, @var{l})
 ## @deftypefnx {Function File} {} prepad (@var{x}, @var{l}, @var{c})
 ## @deftypefnx {Function File} {} prepad (@var{x}, @var{l}, @var{c}, @var{dim})
 ## Prepend the scalar value @var{c} to the vector @var{x} until it is of length
 ## @var{l}.  If @var{c} is not given, a value of 0 is used.
 ##
-## If @code{length (@var{x}) > @var{l}}, elements from the beginning of
-## @var{x} are removed until a vector of length @var{l} is obtained.
+## If @code{length (@var{x}) > @var{l}}, elements from the beginning of @var{x}
+## are removed until a vector of length @var{l} is obtained.
 ##
 ## If @var{x} is a matrix, elements are prepended or removed from each row.
 ##
-## If the optional argument @var{dim} is given, operate along this
-## dimension.
+## If the optional argument @var{dim} is given, operate along this dimension.
 ##
-## If @var{dim} is larger than the dimensions of @var{x}, the result will
-## have @var{dim} dimensions.
+## If @var{dim} is larger than the dimensions of @var{x}, the result will have
+## @var{dim} dimensions.
 ## @seealso{postpad, cat, resize}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = prepad (x, l, c, dim)
 
diff --git a/scripts/general/profile.m b/scripts/general/profile.m
--- a/scripts/general/profile.m
+++ b/scripts/general/profile.m
@@ -22,44 +22,43 @@
 ## @deftypefnx {Command} {} profile resume
 ## @deftypefnx {Command} {} profile clear
 ## @deftypefnx {Function File} {@var{S} =} profile ("status")
 ## @deftypefnx {Function File} {@var{T} =} profile ("info")
 ## Control the built-in profiler.
 ##
 ## @table @code
 ## @item profile on
-## Start the profiler, clearing all previously collected data if there
-## is any.
+## Start the profiler, clearing all previously collected data if there is any.
 ##
 ## @item profile off
 ## Stop profiling.  The collected data can later be retrieved and examined
-## with calls like @code{S = profile ("info")}.
+## with @code{T = profile ("info")}.
 ##
 ## @item profile clear
 ## Clear all collected profiler data.
 ##
 ## @item profile resume
-## Restart profiling without cleaning up the old data and instead
-## all newly collected statistics are added to the already existing ones.
+## Restart profiling without clearing the old data.  All newly collected
+## statistics are added to the existing ones.
 ##
 ## @item @var{S} = profile ("status")
-## Return a structure filled with certain information about the current status
-## of the profiler.  At the moment, the only field is @code{ProfilerStatus}
-## which is either @qcode{"on"} or @qcode{"off"}.
+## Return a structure with information about the current status of the profiler.
+## At the moment, the only field is @code{ProfilerStatus} which is either
+## @qcode{"on"} or @qcode{"off"}.
 ##
 ## @item @var{T} = profile ("info")
-## Return the collected profiling statistics in the structure @var{T}.
-## The flat profile is returned in the field @code{FunctionTable} which is an
+## Return the collected profiling statistics in the structure @var{T}.  The
+## flat profile is returned in the field @code{FunctionTable} which is an
 ## array of structures, each entry corresponding to a function which was called
-## and for which profiling statistics are present.  Furthermore, the field
-## @code{Hierarchical} contains the hierarchical call-tree.  Each node
-## has an index into the @code{FunctionTable} identifying the function it
-## corresponds to as well as data fields for number of calls and time spent
-## at this level in the call-tree.
+## and for which profiling statistics are present.  In addition, the field
+## @code{Hierarchical} contains the hierarchical call tree.  Each node has an
+## index into the @code{FunctionTable} identifying the function it corresponds
+## to as well as data fields for number of calls and time spent at this level
+## in the call tree.
 ## @seealso{profshow, profexplore}
 ## @end table
 ## @end deftypefn
 
 ## Built-in profiler.
 ## Author: Daniel Kraft <d@domob.eu>
 
 function retval = profile (option)
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -20,112 +20,111 @@
 ## @deftypefn  {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{abstol})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{abstol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {[@var{q}, @var{err}] =} quadgk (@dots{})
 ##
 ## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
 ## using adaptive Gauss-Konrod quadrature.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## The formulation is based on a proposal by @nospell{L.F. Shampine},
-## @cite{"Vectorized adaptive quadrature in @sc{matlab}", Journal of
-## Computational and Applied Mathematics, pp131-140, Vol 211, Issue 2,
-## Feb 2008} where all function evaluations at an iteration are
-## calculated with a single call to @var{f}.  Therefore, the function
-## @var{f} must be vectorized and must accept a vector of input values @var{x}
-## and return an output vector representing the function evaluations at the
-## given values of @var{x}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must be vectorized and
+## return a vector of output values when given a vector of input values.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Either
-## or both limits may be infinite or contain weak end singularities.
-## Variable transformation will be used to treat any infinite intervals and
-## weaken the singularities.  For example:
+## or both limits may be infinite or contain weak end singularities.  Variable
+## transformation will be used to treat any infinite intervals and weaken the
+## singularities.  For example:
 ##
 ## @example
 ## quadgk (@@(x) 1 ./ (sqrt (x) .* (x + 1)), 0, Inf)
 ## @end example
 ##
 ## @noindent
-## Note that the formulation of the integrand uses the
-## element-by-element operator @code{./} and all user functions to
-## @code{quadgk} should do the same.
+## Note that the formulation of the integrand uses the element-by-element
+## operator @code{./} and all user functions to @code{quadgk} should do the
+## same.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to stop
-## the integration procedure.  The default value is @math{1e^{-10}}.
+## the integration procedure.  The default value is 1e-10.
 ##
-## The algorithm used by @code{quadgk} involves subdividing the
-## integration interval and evaluating each subinterval.
-## If @var{trace} is true then after computing each of these partial
-## integrals display: (1) the number of subintervals at this step,
-## (2) the current estimate of the error @var{err}, (3) the current estimate
-## for the integral @var{q}.
+## The algorithm used by @code{quadgk} involves subdividing the integration
+## interval and evaluating each subinterval.  If @var{trace} is true then after
+## computing each of these partial integrals display: (1) the number of
+## subintervals at this step, (2) the current estimate of the error @var{err},
+## (3) the current estimate for the integral @var{q}.
 ##
 ## Alternatively, properties of @code{quadgk} can be passed to the function as
 ## pairs @qcode{"@var{prop}", @var{val}}.  Valid properties are
 ##
 ## @table @code
 ## @item AbsTol
 ## Define the absolute error tolerance for the quadrature.  The default
 ## absolute tolerance is 1e-10.
 ##
 ## @item RelTol
 ## Define the relative error tolerance for the quadrature.  The default
 ## relative tolerance is 1e-5.
 ##
 ## @item MaxIntervalCount
-## @code{quadgk} initially subdivides the interval on which to perform
-## the quadrature into 10 intervals.  Subintervals that have an
-## unacceptable error are subdivided and re-evaluated.  If the number of
-## subintervals exceeds 650 subintervals at any point then a poor
-## convergence is signaled and the current estimate of the integral is
-## returned.  The property @qcode{"MaxIntervalCount"} can be used to alter the
-## number of subintervals that can exist before exiting.
+## @code{quadgk} initially subdivides the interval on which to perform the
+## quadrature into 10 intervals.  Subintervals that have an unacceptable error
+## are subdivided and re-evaluated.  If the number of subintervals exceeds 650
+## subintervals at any point then a poor convergence is signaled and the
+## current estimate of the integral is returned.  The property
+## @qcode{"MaxIntervalCount"} can be used to alter the number of subintervals
+## that can exist before exiting.
 ##
 ## @item WayPoints
 ## Discontinuities in the first derivative of the function to integrate can be
-## flagged with the @qcode{"WayPoints"} property.  This forces the ends of
-## a subinterval to fall on the breakpoints of the function and can result in
+## flagged with the @qcode{"WayPoints"} property.  This forces the ends of a
+## subinterval to fall on the breakpoints of the function and can result in
 ## significantly improved estimation of the error in the integral, faster
 ## computation, or both.  For example,
 ##
 ## @example
 ## quadgk (@@(x) abs (1 - x.^2), 0, 2, "Waypoints", 1)
 ## @end example
 ##
 ## @noindent
 ## signals the breakpoint in the integrand at @code{@var{x} = 1}.
 ##
 ## @item Trace
-## If logically true @code{quadgk} prints information on the
-## convergence of the quadrature at each iteration.
+## If logically true @code{quadgk} prints information on the convergence of the
+## quadrature at each iteration.
 ## @end table
 ##
 ## If any of @var{a}, @var{b}, or @var{waypoints} is complex then the
-## quadrature is treated as a contour integral along a piecewise
-## continuous path defined by the above.  In this case the integral is
-## assumed to have no edge singularities.  For example,
+## quadrature is treated as a contour integral along a piecewise continuous
+## path defined by the above.  In this case the integral is assumed to have no
+## edge singularities.  For example,
 ##
 ## @example
 ## @group
 ## quadgk (@@(z) log (z), 1+1i, 1+1i, "WayPoints",
 ##         [1-1i, -1,-1i, -1+1i])
 ## @end group
 ## @end example
 ##
 ## @noindent
-## integrates @code{log (z)} along the square defined by @code{[1+1i,
-##  1-1i, -1-1i, -1+1i]}
+## integrates @code{log (z)} along the square defined by
+## @code{[1+1i, 1-1i, -1-1i, -1+1i]}.
 ##
 ## The result of the integration is returned in @var{q}.
+##
 ## @var{err} is an approximate bound on the error in the integral
 ## @code{abs (@var{q} - @var{I})}, where @var{I} is the exact value of the
 ## integral.
 ##
+## Reference: @nospell{L.F. Shampine},
+## @cite{"Vectorized adaptive quadrature in @sc{matlab}"}, Journal of
+## Computational and Applied Mathematics, pp. 131--140, Vol 211, Issue 2,
+## Feb 2008.
+##
 ## @seealso{quad, quadv, quadl, quadcc, trapz, dblquad, triplequad}
 ## @end deftypefn
 
 function [q, err] = quadgk (f, a, b, varargin)
   if (nargin < 3)
     print_usage ();
   endif
 
diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -17,34 +17,33 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace}, @var{p1}, @var{p2}, @dots{})
 ##
-## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
-## using an adaptive Lobatto rule.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## The function @var{f} must be vectorized and return a vector of output values
-## if given a vector of input values.
+## Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using
+## an adaptive Lobatto rule.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must be vectorized and
+## return a vector of output values when given a vector of input values.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
 ## The optional argument @var{tol} defines the relative tolerance with which
 ## to perform the integration.  The default value is @code{eps}.
 ##
 ## The algorithm used by @code{quadl} involves recursively subdividing the
-## integration interval.
-## If @var{trace} is defined then for each subinterval display: (1) the left
-## end of the subinterval, (2) the length of the subinterval, (3) the
-## approximation of the integral over the subinterval.
+## integration interval.  If @var{trace} is defined then for each subinterval
+## display: (1) the left end of the subinterval, (2) the length of the
+## subinterval, (3) the approximation of the integral over the subinterval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to the function
 ## @var{f}.  To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices ([]).
 ##
 ## Reference: @nospell{W. Gander and W. Gautschi}, @cite{Adaptive Quadrature -
 ## Revisited}, BIT Vol. 40, No. 1, March 2000, pp. 84--101.
 ## @url{http://www.inf.ethz.ch/personal/gander/}
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -21,45 +21,46 @@
 ## @deftypefn  {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace}, @var{p1}, @var{p2}, @dots{})
 ## @deftypefnx {Function File} {[@var{q}, @var{nfun}] =} quadv (@dots{})
 ##
 ## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
 ## using an adaptive Simpson's rule.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## @code{quadv} is a vectorized version of @code{quad} and the function
-## defined by @var{f} must accept a scalar or vector as input and return a
-## scalar, vector, or array as output.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  @code{quadv} is a vectorized version of
+## @code{quad} and the function defined by @var{f} must accept a scalar or
+## vector as input and return a scalar, vector, or array as output.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
-## The optional argument @var{tol} defines the tolerance used to stop
-## the adaptation procedure.  The default value is @math{1e^{-6}}.
+## The optional argument @var{tol} defines the tolerance used to stop the
+## adaptation procedure.  The default value is 1e-6.
 ##
 ## The algorithm used by @code{quadv} involves recursively subdividing the
 ## integration interval and applying Simpson's rule on each subinterval.
 ## If @var{trace} is true then after computing each of these partial
 ## integrals display: (1) the total number of function evaluations,
 ## (2) the left end of the subinterval, (3) the length of the subinterval,
 ## (4) the approximation of the integral over the subinterval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to the function
 ## @var{f}.  To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices ([]).
 ##
-## The result of the integration is returned in @var{q}.  @var{nfun} indicates
-## the number of function evaluations that were made.
+## The result of the integration is returned in @var{q}
+##
+## @var{nfun} indicates the number of function evaluations that were made.
 ##
 ## Note: @code{quadv} is written in Octave's scripting language and can be
 ## used recursively in @code{dblquad} and @code{triplequad}, unlike the
-## similar @code{quad} function.
+## @code{quad} function.
 ## @seealso{quad, quadl, quadgk, quadcc, trapz, dblquad, triplequad}
 ## @end deftypefn
 
 function [q, nfun] = quadv (f, a, b, tol, trace, varargin)
   ## TODO: Make norm for convergence testing configurable
 
   if (nargin < 3)
     print_usage ();
diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -21,28 +21,28 @@
 ## @deftypefnx {Function File} {} randi (@var{imax}, @var{n})
 ## @deftypefnx {Function File} {} randi (@var{imax}, @var{m}, @var{n}, @dots{})
 ## @deftypefnx {Function File} {} randi ([@var{imin} @var{imax}], @dots{})
 ## @deftypefnx {Function File} {} randi (@dots{}, "@var{class}")
 ## Return random integers in the range 1:@var{imax}.
 ##
 ## Additional arguments determine the shape of the return matrix.  When no
 ## arguments are specified a single random integer is returned.  If one
-## argument @var{n} is specified then a square matrix @w{(@var{n} x @var{n})} is
-## returned.  Two or more arguments will return a multi-dimensional
-## matrix @w{(@var{m} x @var{n} x @dots{})}.
+## argument @var{n} is specified then a square matrix @w{(@var{n} x @var{n})}
+## is returned.  Two or more arguments will return a multi-dimensional matrix
+## @w{(@var{m} x @var{n} x @dots{})}.
 ##
-## The integer range may optionally be described by a two element matrix
-## with a lower and upper bound in which case the returned integers will be
-## on the interval @w{[@var{imin}, @var{imax}]}.
+## The integer range may optionally be described by a two element matrix with a
+## lower and upper bound in which case the returned integers will be on the
+## interval @w{[@var{imin}, @var{imax}]}.
 ##
 ## The optional argument @var{class} will return a matrix of the requested
 ## type.  The default is @qcode{"double"}.
 ##
-## The following example returns 150 integers in the range 1-10.
+## The following example returns 150 integers in the range 1--10.
 ##
 ## @example
 ## ri = randi (10, 150, 1)
 ## @end example
 ##
 ## Implementation Note: @code{randi} relies internally on @code{rand} which
 ## uses class @qcode{"double"} to represent numbers.  This limits the maximum
 ## integer (@var{imax}) and range (@var{imax} - @var{imin}) to the value
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -15,29 +15,31 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} rat (@var{x}, @var{tol})
 ## @deftypefnx {Function File} {[@var{n}, @var{d}] =} rat (@var{x}, @var{tol})
 ##
-## Find a rational approximation to @var{x} within the tolerance defined
-## by @var{tol} using a continued fraction expansion.  For example:
+## Find a rational approximation to @var{x} within the tolerance defined by
+## @var{tol} using a continued fraction expansion.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## rat (pi) = 3 + 1/(7 + 1/16) = 355/113
 ## rat (e) = 3 + 1/(-4 + 1/(2 + 1/(5 + 1/(-2 + 1/(-7)))))
 ##         = 1457/536
 ## @end group
 ## @end example
 ##
-## Called with two arguments returns the numerator and denominator separately
-## as two matrices.
+## When called with two output arguments return the numerator and denominator
+## separately as two matrices.
 ## @seealso{rats}
 ## @end deftypefn
 
 function [n,d] = rat (x,tol)
 
   if (nargin != [1,2] || nargout > 2)
     print_usage ();
   endif
diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -20,20 +20,22 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} repmat (@var{A}, @var{m})
 ## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n})
 ## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n}, @var{p} @dots{})
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n}])
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n} @var{p} @dots{}])
 ## Form a block matrix of size @var{m} by @var{n}, with a copy of matrix
-## @var{A} as each element.  If @var{n} is not specified, form an
-## @var{m} by @var{m} block matrix.  For copying along more than two
-## dimensions, specify the number of times to copy across each dimension
-## @var{m}, @var{n}, @var{p}, @dots{}, in a vector in the second argument.
+## @var{A} as each element.
+##
+## If @var{n} is not specified, form an @var{m} by @var{m} block matrix.  For
+## copying along more than two dimensions, specify the number of times to copy
+## across each dimension @var{m}, @var{n}, @var{p}, @dots{}, in a vector in the
+## second argument.
 ## @seealso{repelems}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Created: July 2000
 
 function x = repmat (A, m, varargin)
 
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -17,19 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rot90 (@var{A})
 ## @deftypefnx {Function File} {} rot90 (@var{A}, @var{k})
 ## Rotate array by 90 degree increments.
 ##
 ## Return a copy of @var{A} with the elements rotated counterclockwise in
-## 90-degree increments.  The second argument is optional, and specifies
-## how many 90-degree rotations are to be applied (the default value is 1).
-## Negative values of @var{k} rotate the matrix in a clockwise direction.
+## 90-degree increments.
+##
+## The second argument is optional, and specifies how many 90-degree rotations
+## are to be applied (the default value is 1).  Negative values of @var{k}
+## rotate the matrix in a clockwise direction.
 ## For example,
 ##
 ## @example
 ## @group
 ## rot90 ([1, 2; 3, 4], -1)
 ##     @result{}  3  1
 ##         4  2
 ## @end group
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -17,24 +17,26 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rotdim (@var{x})
 ## @deftypefnx {Function File} {} rotdim (@var{x}, @var{n})
 ## @deftypefnx {Function File} {} rotdim (@var{x}, @var{n}, @var{plane})
 ## Return a copy of @var{x} with the elements rotated counterclockwise in
 ## 90-degree increments.
+##
 ## The second argument @var{n} is optional, and specifies how many 90-degree
-## rotations are to be applied (the default value is 1).
-## The third argument is also optional and defines the plane of the
-## rotation.  If present, @var{plane} is a two element vector containing two
-## different valid dimensions of the matrix.  When @var{plane} is not given
-## the first two non-singleton dimensions are used.
+## rotations are to be applied (the default value is 1).  Negative values of
+## @var{n} rotate the matrix in a clockwise direction.
 ##
-## Negative values of @var{n} rotate the matrix in a clockwise direction.
+## The third argument is also optional and defines the plane of the rotation.
+## If present, @var{plane} is a two element vector containing two different
+## valid dimensions of the matrix.  When @var{plane} is not given the first two
+## non-singleton dimensions are used.
+##
 ## For example,
 ##
 ## @example
 ## @group
 ## rotdim ([1, 2; 3, 4], -1, [1, 2])
 ##      @result{}  3  1
 ##          4  2
 ## @end group
diff --git a/scripts/general/saveobj.m b/scripts/general/saveobj.m
--- a/scripts/general/saveobj.m
+++ b/scripts/general/saveobj.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} saveobj (@var{a})
 ## Method of a class to manipulate an object prior to saving it to a file.
+##
 ## The function @code{saveobj} is called when the object @var{a} is saved
 ## using the @code{save} function.  An example of the use of @code{saveobj}
 ## might be to remove fields of the object that don't make sense to be saved
 ## or it might be used to ensure that certain fields of the object are
 ## initialized before the object is saved.  For example:
 ##
 ## @example
 ## @group
diff --git a/scripts/general/shift.m b/scripts/general/shift.m
--- a/scripts/general/shift.m
+++ b/scripts/general/shift.m
@@ -18,18 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} shift (@var{x}, @var{b})
 ## @deftypefnx {Function File} {} shift (@var{x}, @var{b}, @var{dim})
 ## If @var{x} is a vector, perform a circular shift of length @var{b} of
 ## the elements of @var{x}.
 ##
 ## If @var{x} is a matrix, do the same for each column of @var{x}.
-## If the optional @var{dim} argument is given, operate along this
-## dimension.
+##
+## If the optional @var{dim} argument is given, operate along this dimension.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 14 September 1994
 ## Adapted-By: jwe
 
 function y = shift (x, b, dim)
 
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -15,25 +15,26 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} shiftdim (@var{x}, @var{n})
 ## @deftypefnx {Function File} {[@var{y}, @var{ns}] =} shiftdim (@var{x})
 ## Shift the dimensions of @var{x} by @var{n}, where @var{n} must be
-## an integer scalar.  When @var{n} is positive, the dimensions of
-## @var{x} are shifted to the left, with the leading dimensions
-## circulated to the end.  If @var{n} is negative, then the dimensions
-## of @var{x} are shifted to the right, with @var{n} leading singleton
-## dimensions added.
+## an integer scalar.
+##
+## When @var{n} is positive, the dimensions of @var{x} are shifted to the left,
+## with the leading dimensions circulated to the end.  If @var{n} is negative,
+## then the dimensions of @var{x} are shifted to the right, with @var{n}
+## leading singleton dimensions added.
 ##
 ## Called with a single argument, @code{shiftdim}, removes the leading
-## singleton dimensions, returning the number of dimensions removed
-## in the second output argument @var{ns}.
+## singleton dimensions, returning the number of dimensions removed in the
+## second output argument @var{ns}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## x = ones (1, 2, 3);
 ## size (shiftdim (x, -1))
 ##    @result{} [1, 1, 2, 3]
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{s}, @var{i}] =} sortrows (@var{A})
 ## @deftypefnx {Function File} {[@var{s}, @var{i}] =} sortrows (@var{A}, @var{c})
-## Sort the rows of the matrix @var{A} according to the order of the
-## columns specified in @var{c}.  If @var{c} is omitted, a
-## lexicographical sort is used.  By default ascending order is used
-## however if elements of @var{c} are negative then the corresponding
-## column is sorted in descending order.
+## Sort the rows of the matrix @var{A} according to the order of the columns
+## specified in @var{c}.
+##
+## If @var{c} is omitted, a lexicographical sort is used.  By default ascending
+## order is used however if elements of @var{c} are negative then the
+## corresponding column is sorted in descending order.
 ## @seealso{sort}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo, Paul Kienzle
 ## Adapted-by: jwe
 
 function [s, i] = sortrows (A, c)
 
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -15,27 +15,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{y}, @var{z}] =} sph2cart (@var{theta}, @var{phi}, @var{r})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} sph2cart (@var{S})
 ## @deftypefnx {Function File} {@var{C} =} sph2cart (@dots{})
-## Transform spherical to Cartesian coordinates.
+## Transform spherical coordinates to Cartesian coordinates.
+##
+## The inputs @var{theta}, @var{phi}, and @var{r} must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{S}
+## represents the spherical coordinate (@var{theta}, @var{phi}, @var{r}).
 ##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{phi} is the angle relative to the xy-plane.
+##
 ## @var{r} is the distance to the origin @w{(0, 0, 0)}.
-## @var{theta}, @var{phi}, and @var{r} must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{S}
-## represents the spherical coordinate (@var{theta}, @var{phi}, @var{r}).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{C} where each row represents one Cartesian coordinate
+## If only a single return argument is requested then return a matrix @var{C}
+## where each row represents one Cartesian coordinate
 ## (@var{x}, @var{y}, @var{z}).
 ## @seealso{cart2sph, pol2cart, cart2pol}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [x, y, z] = sph2cart (theta, phi, r)
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -22,46 +22,44 @@
 ## @deftypefnx {Function File} {[@var{A}, @dots{}] =} structfun (@dots{})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "ErrorHandler", @var{errfunc})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "UniformOutput", @var{val})
 ##
 ## Evaluate the function named @var{name} on the fields of the structure
 ## @var{S}.  The fields of @var{S} are passed to the function @var{func}
 ## individually.
 ##
-## @code{structfun} accepts an arbitrary function @var{func} in the form of
-## an inline function, function handle, or the name of a function (in a
-## character string).  In the case of a character string argument, the
-## function must accept a single argument named @var{x}, and it must return
-## a string value.  If the function returns more than one argument, they are
-## returned as separate output variables.
+## @code{structfun} accepts an arbitrary function @var{func} in the form of an
+## inline function, function handle, or the name of a function (in a character
+## string).  In the case of a character string argument, the function must
+## accept a single argument named @var{x}, and it must return a string value.
+## If the function returns more than one argument, they are returned as
+## separate output variables.
 ##
-## If the parameter @qcode{"UniformOutput"} is set to true (the default),
-## then the function must return a single element which will be concatenated
-## into the return value.  If @qcode{"UniformOutput"} is false, the outputs
-## are placed into a structure with the same fieldnames as the input
-## structure.
+## If the parameter @qcode{"UniformOutput"} is set to true (the default), then
+## the function must return a single element which will be concatenated into
+## the return value.  If @qcode{"UniformOutput"} is false, the outputs are
+## placed into a structure with the same fieldnames as the input structure.
 ##
 ## @example
 ## @group
 ## s.name1 = "John Smith";
 ## s.name2 = "Jill Jones";
 ## structfun (@@(x) regexp (x, '(\w+)$', "matches")@{1@}, s,
 ##            "UniformOutput", false)
 ## @result{}
 ##    @{
 ##      name1 = Smith
 ##      name2 = Jones
 ##    @}
 ## @end group
 ## @end example
 ##
-## Given the parameter @qcode{"ErrorHandler"}, @var{errfunc} defines a
-## function to call in case @var{func} generates an error.  The form of the
-## function is
+## Given the parameter @qcode{"ErrorHandler"}, @var{errfunc} defines a function
+## to call in case @var{func} generates an error.  The form of the function is
 ##
 ## @example
 ## function [@dots{}] = errfunc (@var{se}, @dots{})
 ## @end example
 ##
 ## @noindent
 ## where there is an additional input argument to @var{errfunc} relative to
 ## @var{func}, given by @nospell{@var{se}}.  This is a structure with the
diff --git a/scripts/general/subsindex.m b/scripts/general/subsindex.m
--- a/scripts/general/subsindex.m
+++ b/scripts/general/subsindex.m
@@ -13,22 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{idx} =} subsindex (@var{a})
-## Convert an object to an index vector.  When @var{a} is a class object
-## defined with a class constructor, then @code{subsindex} is the
-## overloading method that allows the conversion of this class object to
-## a valid indexing vector.  It is important to note that
-## @code{subsindex} must return a zero-based real integer vector of the
-## class @qcode{"double"}.  For example, if the class constructor
+## Convert an object to an index vector.
+##
+## When @var{a} is a class object defined with a class constructor, then
+## @code{subsindex} is the overloading method that allows the conversion of
+## this class object to a valid indexing vector.  It is important to note that
+## @code{subsindex} must return a zero-based real integer vector of the class
+## @qcode{"double"}.  For example, if the class constructor
 ##
 ## @example
 ## @group
 ## function b = myclass (a)
 ##   b = class (struct ("a", a), "myclass");
 ## endfunction
 ## @end group
 ## @end example
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -18,29 +18,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} trapz (@var{y})
 ## @deftypefnx {Function File} {@var{q} =} trapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{q} =} trapz (@dots{}, @var{dim})
 ##
 ## Numerically evaluate the integral of points @var{y} using the trapezoidal
 ## method.
+##
 ## @w{@code{trapz (@var{y})}} computes the integral of @var{y} along the first
-## non-singleton dimension.  When the argument @var{x} is omitted an
-## equally spaced @var{x} vector with unit spacing (1) is assumed.
-## @code{trapz (@var{x}, @var{y})} evaluates the integral with respect
-## to the spacing in @var{x} and the values in @var{y}.  This is useful if
-## the points in @var{y} have been sampled unevenly.
+## non-singleton dimension.  When the argument @var{x} is omitted an equally
+## spaced @var{x} vector with unit spacing (1) is assumed.
+## @code{trapz (@var{x}, @var{y})} evaluates the integral with respect to the
+## spacing in @var{x} and the values in @var{y}.  This is useful if the points
+## in @var{y} have been sampled unevenly.
+##
 ## If the optional @var{dim} argument is given, operate along this dimension.
 ##
-## If @var{x} is not specified then unit spacing will be used.  To scale
-## the integral to the correct value you must multiply by the actual spacing
-## value (deltaX).  As an example, the integral of @math{x^3} over the range
-## [0, 1] is @math{x^4/4} or 0.25.  The following code uses @code{trapz} to
-## calculate the integral in three different ways.
+## Application Note: If @var{x} is not specified then unit spacing will be
+## used.  To scale the integral to the correct value you must multiply by the
+## actual spacing value (deltaX).  As an example, the integral of @math{x^3}
+## over the range [0, 1] is @math{x^4/4} or 0.25.  The following code uses
+## @code{trapz} to calculate the integral in three different ways.
 ##
 ## @example
 ## @group
 ## x = 0:0.1:1;
 ## y = x.^3;
 ## q = trapz (y)
 ##   @result{} q = 2.525   # No scaling
 ## q * 0.1
diff --git a/scripts/general/triplequad.m b/scripts/general/triplequad.m
--- a/scripts/general/triplequad.m
+++ b/scripts/general/triplequad.m
@@ -17,28 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol}, @var{quadf})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol}, @var{quadf}, @dots{})
 ## Numerically evaluate the triple integral of @var{f}.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.  The function @var{f} must
-## have the form @math{w = f(x,y,z)} where either @var{x} or @var{y} is a
-## vector and the remaining inputs are scalars.  It should return a vector of
-## the same length and orientation as @var{x} or @var{y}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must have the form
+## @math{w = f(x,y,z)} where either @var{x} or @var{y} is a vector and the
+## remaining inputs are scalars.  It should return a vector of the same length
+## and orientation as @var{x} or @var{y}.
 ##
 ## @var{xa}, @var{ya}, @var{za} and @var{xb}, @var{yb}, @var{zb} are the lower
 ## and upper limits of integration for x, y, and z respectively.  The
 ## underlying integrator determines whether infinite bounds are accepted.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to
-## integrate each sub-integral.  The default value is @math{1e^{-6}}.
+## integrate each sub-integral.  The default value is 1e-6.
 ##
 ## The optional argument @var{quadf} specifies which underlying integrator
 ## function to use.  Any choice but @code{quad} is available and the default
 ## is @code{quadcc}.
 ##
 ## Additional arguments, are passed directly to @var{f}.  To use the default
 ## value for @var{tol} or @var{quadf} one may pass @qcode{':'} or an empty
 ## matrix ([]).
diff --git a/scripts/geometry/delaunayn.m b/scripts/geometry/delaunayn.m
--- a/scripts/geometry/delaunayn.m
+++ b/scripts/geometry/delaunayn.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{T} =} delaunayn (@var{pts})
 ## @deftypefnx {Function File} {@var{T} =} delaunayn (@var{pts}, @var{options})
 ## Compute the Delaunay triangulation for an N-dimensional set of points.
-## The Delaunay triangulation is a tessellation of the convex hull of a set
-## of points such that no N-sphere defined by the N-triangles contains
-## any other points from the set.
+##
+## The Delaunay triangulation is a tessellation of the convex hull of a set of
+## points such that no N-sphere defined by the N-triangles contains any other
+## points from the set.
 ##
 ## The input matrix @var{pts} of size [n, dim] contains n points in a space of
-## dimension dim.  The return matrix @var{T} has size [m, dim+1].  Each row
-## of @var{T} contains a set of indices back into the original set of points
+## dimension dim.  The return matrix @var{T} has size [m, dim+1].  Each row of
+## @var{T} contains a set of indices back into the original set of points
 ## @var{pts} which describes a simplex of dimension dim.  For example, a 2-D
 ## simplex is a triangle and 3-D simplex is a tetrahedron.
 ##
 ## An optional second argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ## The default options depend on the dimension of the input:
diff --git a/scripts/geometry/dsearch.m b/scripts/geometry/dsearch.m
--- a/scripts/geometry/dsearch.m
+++ b/scripts/geometry/dsearch.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi}, @var{s})
-## Return the index @var{idx} or the closest point in @code{@var{x}, @var{y}}
-## to the elements @code{[@var{xi}(:), @var{yi}(:)]}.  The variable @var{s} is
-## accepted for compatibility but is ignored.
+## Return the index @var{idx} of the closest point in @code{@var{x}, @var{y}}
+## to the elements @code{[@var{xi}(:), @var{yi}(:)]}.
+##
+## The variable @var{s} is accepted for compatibility but is ignored.
 ## @seealso{dsearchn, tsearch}
 ## @end deftypefn
 
 function idx = dsearch (x, y, tri, xi, yi, s)
   if (nargin < 5 || nargin > 6)
     print_usage ();
   endif
   idx = __dsearchn__ ([x(:), y(:)], [xi(:), yi(:)]);
diff --git a/scripts/geometry/dsearchn.m b/scripts/geometry/dsearchn.m
--- a/scripts/geometry/dsearchn.m
+++ b/scripts/geometry/dsearchn.m
@@ -16,21 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} dsearchn (@var{x}, @var{tri}, @var{xi})
 ## @deftypefnx {Function File} {@var{idx} =} dsearchn (@var{x}, @var{tri}, @var{xi}, @var{outval})
 ## @deftypefnx {Function File} {@var{idx} =} dsearchn (@var{x}, @var{xi})
 ## @deftypefnx {Function File} {[@var{idx}, @var{d}] =} dsearchn (@dots{})
-## Return the index @var{idx} or the closest point in @var{x} to the elements
-## @var{xi}.  If @var{outval} is supplied, then the values of @var{xi} that are
-## not contained within one of the simplices @var{tri} are set to
-## @var{outval}.  Generally, @var{tri} is returned from @code{delaunayn
-## (@var{x})}.
+## Return the index @var{idx} of the closest point in @var{x} to the elements
+## @var{xi}.
+##
+## If @var{outval} is supplied, then the values of @var{xi} that are not
+## contained within one of the simplices @var{tri} are set to @var{outval}.
+## Generally, @var{tri} is returned from @code{delaunayn (@var{x})}.
 ## @seealso{dsearch, tsearch}
 ## @end deftypefn
 
 function [idx, d] = dsearchn (x, tri, xi, outval)
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -17,22 +17,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{zi} =} griddata (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi} =} griddata (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi}, @var{method})
 ## @deftypefnx {Function File} {[@var{xi}, @var{yi}, @var{zi}] =} griddata (@dots{})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
-## The function is defined by @code{@var{z} = f (@var{x}, @var{y})}.
-## Inputs @code{@var{x}, @var{y}, @var{z}} are vectors of the same length
-## or @code{@var{x}, @var{y}} are vectors and @code{@var{z}} is matrix.
 ##
-## The interpolation points are all @code{(@var{xi}, @var{yi})}.  If
-## @var{xi}, @var{yi} are vectors then they are made into a 2-D mesh.
+## The function is defined by @code{@var{z} = f (@var{x}, @var{y})}.  Inputs
+## @code{@var{x}, @var{y}, @var{z}} are vectors of the same length or
+## @code{@var{x}, @var{y}} are vectors and @code{@var{z}} is matrix.
+##
+## The interpolation points are all @code{(@var{xi}, @var{yi})}.  If @var{xi},
+## @var{yi} are vectors then they are made into a 2-D mesh.
 ##
 ## The interpolation method can be @qcode{"nearest"}, @qcode{"cubic"} or
 ## @qcode{"linear"}.  If method is omitted it defaults to @qcode{"linear"}.
 ## @seealso{griddata3, griddatan, delaunay}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ## Adapted-by:  Alexander Barth <barth.alexander@gmail.com>
diff --git a/scripts/geometry/griddata3.m b/scripts/geometry/griddata3.m
--- a/scripts/geometry/griddata3.m
+++ b/scripts/geometry/griddata3.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi}, @var{method}, @var{options})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
+##
 ## The function is defined by @code{@var{v} = f (@var{x}, @var{y}, @var{z})}.
 ## The interpolation points are specified by @var{xi}, @var{yi}, @var{zi}.
 ##
 ## The interpolation method can be @qcode{"nearest"} or @qcode{"linear"}.
 ## If method is omitted it defaults to @qcode{"linear"}.
 ##
 ## The optional argument @var{options} is passed directly to Qhull when
 ## computing the Delaunay triangulation used for interpolation.  See
diff --git a/scripts/geometry/griddatan.m b/scripts/geometry/griddatan.m
--- a/scripts/geometry/griddatan.m
+++ b/scripts/geometry/griddatan.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi})
 ## @deftypefnx {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi}, @var{method})
 ## @deftypefnx {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi}, @var{method}, @var{options})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
+##
 ## The function is defined by @code{@var{y} = f (@var{x})}.
 ## The interpolation points are all @var{xi}.
 ##
 ## The interpolation method can be @qcode{"nearest"} or @qcode{"linear"}.
 ## If method is omitted it defaults to @qcode{"linear"}.
 ##
 ## The optional argument @var{options} is passed directly to Qhull when
 ## computing the Delaunay triangulation used for interpolation.  See
diff --git a/scripts/geometry/inpolygon.m b/scripts/geometry/inpolygon.m
--- a/scripts/geometry/inpolygon.m
+++ b/scripts/geometry/inpolygon.m
@@ -20,19 +20,20 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{in} =} inpolygon (@var{x}, @var{y}, @var{xv}, @var{yv})
 ## @deftypefnx {Function File} {[@var{in}, @var{on}] =} inpolygon (@var{x}, @var{y}, @var{xv}, @var{yv})
 ##
 ## For a polygon defined by vertex points @code{(@var{xv}, @var{yv})}, return
 ## true if the points @code{(@var{x}, @var{y})} are inside (or on the boundary)
 ## of the polygon; Otherwise, return false.
 ##
-## The variables @var{x}, @var{y}, must have the same dimension.  The optional
-## output @var{on} returns true if the points are exactly on the polygon
-## edge, and false otherwise.
+## The input variables @var{x} and @var{y}, must have the same dimension.
+##
+## The optional output @var{on} returns true if the points are exactly on the
+## polygon edge, and false otherwise.
 ## @seealso{delaunay}
 ## @end deftypefn
 
 ## Author: Frederick (Rick) A Niles <niles@rickniles.com>
 ## Created: 14 November 2006
 
 ## Vectorized by Søren Hauberg <soren@hauberg.org>
 
diff --git a/scripts/geometry/rectint.m b/scripts/geometry/rectint.m
--- a/scripts/geometry/rectint.m
+++ b/scripts/geometry/rectint.m
@@ -13,33 +13,32 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{area} =} rectint (@var{a}, @var{b})
-## Compute area or volume of intersection of rectangles or ND boxes.
+## Compute area or volume of intersection of rectangles or N-D boxes.
+##
+## Compute the area of intersection of rectangles in @var{a} and rectangles in
+## @var{b}.  N-dimensional boxes are supported in which case the volume, or
+## hypervolume is computed according to the number of dimensions.
 ##
-## Compute the area of intersection of rectangles in @var{a} and
-## rectangles in @var{b}.  N dimensional boxes are supported in which
-## case the volume, or hypervolume is computed according to the number
-## of dimensions.
-##
-## 2 dimensional rectangles are defined as @code{[xpos ypos width height]}
-## where xpos and ypos are the position of the bottom left corner.
-## Higher dimensions are supported where the coordinates for the minimum
-## value of each dimension follow the length of the box in that dimension,
-## e.g., @code{[xpos ypos zpos kpos @dots{} width height depth k_length @dots{}]}.
+## 2-dimensional rectangles are defined as @code{[xpos ypos width height]}
+## where xpos and ypos are the position of the bottom left corner.  Higher
+## dimensions are supported where the coordinates for the minimum value of each
+## dimension follow the length of the box in that dimension, e.g.,
+## @code{[xpos ypos zpos kpos @dots{} width height depth k_length @dots{}]}.
 ##
 ## Each row of @var{a} and @var{b} define a rectangle, and if both define
-## multiple rectangles, then the output, @var{area}, is a matrix where
-## the i-th row corresponds to the i-th row of a and the j-th column
-## corresponds to the j-th row of b.
+## multiple rectangles, then the output, @var{area}, is a matrix where the i-th
+## row corresponds to the i-th row of a and the j-th column corresponds to the
+## j-th row of b.
 ##
 ## @seealso{polyarea}
 ## @end deftypefn
 
 ## Author: 2015 Carnë Draug <carandraug@octave.org>
 
 function dists = rectint (a, b)
 
diff --git a/scripts/geometry/tsearchn.m b/scripts/geometry/tsearchn.m
--- a/scripts/geometry/tsearchn.m
+++ b/scripts/geometry/tsearchn.m
@@ -12,20 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{idx}, @var{p}] =} tsearchn (@var{x}, @var{t}, @var{xi})
-## Search for the enclosing Delaunay convex hull.  For @code{@var{t} =
-## delaunayn (@var{x})}, finds the index in @var{t} containing the
-## points @var{xi}.  For points outside the convex hull, @var{idx} is NaN.
+## @deftypefn  {Function File} {@var{idx} =} tsearchn (@var{x}, @var{t}, @var{xi})
+## @deftypefnx {Function File} {[@var{idx}, @var{p}] =} tsearchn (@var{x}, @var{t}, @var{xi})
+## Search for the enclosing Delaunay convex hull.
+##
+## For @code{@var{t} = delaunayn (@var{x})}, finds the index in @var{t}
+## containing the points @var{xi}.  For points outside the convex hull,
+## @var{idx} is NaN.
+##
 ## If requested @code{tsearchn} also returns the Barycentric coordinates @var{p}
 ## of the enclosing triangles.
 ## @seealso{delaunay, delaunayn}
 ## @end deftypefn
 
 function [idx, p] = tsearchn (x, t, xi)
   if (nargin != 3)
     print_usage ();
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -19,30 +19,33 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} voronoi (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} voronoi (@var{x}, @var{y}, @var{options})
 ## @deftypefnx {Function File} {} voronoi (@dots{}, "linespec")
 ## @deftypefnx {Function File} {} voronoi (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} voronoi (@dots{})
 ## @deftypefnx {Function File} {[@var{vx}, @var{vy}] =} voronoi (@dots{})
 ## Plot the Voronoi diagram of points @code{(@var{x}, @var{y})}.
+##
 ## The Voronoi facets with points at infinity are not drawn.
 ##
-## If @qcode{"linespec"} is given it is used to set the color and line style
-## of the plot.  If an axis graphics handle @var{hax} is supplied then the
-## Voronoi diagram is drawn on the specified axis rather than in a new
-## figure.
-##
 ## The @var{options} argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ##
+## If @qcode{"linespec"} is given it is used to set the color and line style of
+## the plot.
+##
+## If an axis graphics handle @var{hax} is supplied then the Voronoi diagram is
+## drawn on the specified axis rather than in a new figure.
+##
 ## If a single output argument is requested then the Voronoi diagram will be
 ## plotted and a graphics handle @var{h} to the plot is returned.
+##
 ## [@var{vx}, @var{vy}] = voronoi (@dots{}) returns the Voronoi vertices
 ## instead of plotting the diagram.
 ##
 ## @example
 ## @group
 ## x = rand (10, 1);
 ## y = rand (size (x));
 ## h = convhull (x, y);
diff --git a/scripts/geometry/voronoin.m b/scripts/geometry/voronoin.m
--- a/scripts/geometry/voronoin.m
+++ b/scripts/geometry/voronoin.m
@@ -14,18 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{C}, @var{F}] =} voronoin (@var{pts})
 ## @deftypefnx {Function File} {[@var{C}, @var{F}] =} voronoin (@var{pts}, @var{options})
-## Compute N-dimensional Voronoi facets.  The input matrix @var{pts}
-## of size [n, dim] contains n points in a space of dimension dim.
+## Compute N-dimensional Voronoi facets.
+##
+## The input matrix @var{pts} of size [n, dim] contains n points in a space of
+## dimension dim.
+##
 ## @var{C} contains the points of the Voronoi facets.  The list @var{F}
 ## contains, for each facet, the indices of the Voronoi points.
 ##
 ## An optional second argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ##
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -13,23 +13,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{txt} =} unimplemented (@var{fcn})
+## @deftypefn {Function File} {@var{txt} =} __unimplemented__ (@var{fcn})
 ## Return specific help text for the unimplemented function @var{fcn}.
+##
 ## This is usually a suggestion for an existing compatible function to use in
 ## place of @var{fcn}.
 ##
-## This function is not called by users, but by the Octave interpreter when
-## it fails to recognize an input string as a valid function name.  See
+## This function is not called by users, but by the Octave interpreter when it
+## fails to recognize an input string as a valid function name.  See
 ## @code{missing_function_hook} for using a different handler for this event.
 ## @seealso{missing_function_hook}
 ## @end deftypefn
 
 
 function txt = __unimplemented__ (fcn)
 
   if (nargin != 1)
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -12,27 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} {} doc @var{function_name}
-## Display documentation for the function @var{function_name}
-## directly from an online version of
-## the printed manual, using the GNU Info browser.  If invoked without
-## any arguments, the manual is shown from the beginning.
+## @deftypefn  {Command} {} doc @var{function_name}
+## @deftypefnx {Command} {} doc
+## Display documentation for the function @var{function_name} directly from an
+## online version of the printed manual, using the GNU Info browser.
 ##
-## For example, the command @kbd{doc rand} starts the GNU Info browser
-## at the @code{rand} node in the online version of the manual.
+## If invoked without an argument, the manual is shown from the beginning.
 ##
-## Once the GNU Info browser is running, help for using it is available
-## using the command @kbd{C-h}.
+## For example, the command @kbd{doc rand} starts the GNU Info browser at the
+## @code{rand} node in the online version of the manual.
+##
+## Once the GNU Info browser is running, help for using it is available using
+## the command @kbd{C-h}.
 ## @seealso{help}
 ## @end deftypefn
 
 ## Author: Soren Hauberg <soren@hauberg.org>
 ## Adapted-by: jwe
 
 function retval = doc (fname)
 
diff --git a/scripts/help/doc_cache_create.m b/scripts/help/doc_cache_create.m
--- a/scripts/help/doc_cache_create.m
+++ b/scripts/help/doc_cache_create.m
@@ -12,23 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} doc_cache_create (@var{out_file}, @var{directory})
-## Generate documentation caches for all functions in a given directory.
+## @deftypefn  {Function File} {} doc_cache_create (@var{out_file}, @var{directory})
+## @deftypefnx {Function File} {} doc_cache_create (@var{out_file})
+## @deftypefnx {Function File} {} doc_cache_create ()
+## Generate documentation cache for all functions in @var{directory}.
 ##
-## A documentation cache is generated for all functions in @var{directory}.
-## The
-## resulting cache is saved in the file @var{out_file}.
-## The cache is used to speed up @code{lookfor}.
+## A documentation cache is generated for all functions in @var{directory}
+## which may be a single string or a cell array of strings.  The cache is used
+## to speed up the function @code{lookfor}.
+##
+## The cache is saved in the file @var{out_file} which defaults to the value
+## @file{doc-cache} if not given.
 ##
 ## If no directory is given (or it is the empty matrix), a cache for built-in
 ## operators, etc. is generated.
 ##
 ## @seealso{doc_cache_file, lookfor, path}
 ## @end deftypefn
 
 function doc_cache_create (out_file = "doc-cache", directory = [])
diff --git a/scripts/help/get_first_help_sentence.m b/scripts/help/get_first_help_sentence.m
--- a/scripts/help/get_first_help_sentence.m
+++ b/scripts/help/get_first_help_sentence.m
@@ -12,24 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@var{name})
-## @deftypefnx {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@var{name}, @var{max_len})
+## @deftypefn  {Function File} {@var{text} =} get_first_help_sentence (@var{name})
+## @deftypefnx {Function File} {@var{text} =} get_first_help_sentence (@var{name}, @var{max_len})
+## @deftypefnx {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@dots{})
 ## Return the first sentence of a function's help text.
 ##
-## The first sentence is defined as the text after the function
-## declaration until either the first period (".") or the first appearance of
-## two consecutive newlines ("\n\n").  The text is truncated to a maximum
-## length of @var{max_len}, which defaults to 80.
+## The first sentence is defined as the text after the function declaration
+## until either the first period (".") or the first appearance of two
+## consecutive newlines ("\n\n").  The text is truncated to a maximum length of 
+## @var{max_len}, which defaults to 80.
 ##
 ## The optional output argument @var{status} returns the status reported by
 ## @code{makeinfo}.  If only one output argument is requested, and @var{status}
 ## is nonzero, a warning is displayed.
 ##
 ## As an example, the first sentence of this help text is
 ##
 ## @example
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -21,25 +21,25 @@
 ## @deftypefnx {Command} {} help @code{--list}
 ## @deftypefnx {Command} {} help @code{.}
 ## @deftypefnx {Command} {} help
 ## Display the help text for @var{name}.
 ##
 ## For example, the command @kbd{help help} prints a short message describing
 ## the @code{help} command.
 ##
-## Given the single argument @code{--list}, list all operators,
-## keywords, built-in functions, and loadable functions available
-## in the current session of Octave.
+## Given the single argument @code{--list}, list all operators, keywords,
+## built-in functions, and loadable functions available in the current session
+## of Octave.
 ##
-## Given the single argument @code{.}, list all operators available
-## in the current session of Octave.
+## Given the single argument @code{.}, list all operators available in the
+## current session of Octave.
 ##
-## If invoked without any arguments, @code{help} display instructions
-## on how to access help from the command line.
+## If invoked without any arguments, @code{help} display instructions on how to
+## access help from the command line.
 ##
 ## The help command can provide information about most operators, for example
 ## @code{help +}, but not the comma and semicolon characters which are used
 ## by the Octave interpreter as command separators.  For help on either of
 ## these type @kbd{help comma} or @kbd{help semicolon}.
 ## @seealso{doc, lookfor, which, info}
 ## @end deftypefn
 
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -16,36 +16,39 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} lookfor @var{str}
 ## @deftypefnx {Command} {} lookfor -all @var{str}
 ## @deftypefnx {Function File} {[@var{fcn}, @var{help1str}] =} lookfor (@var{str})
 ## @deftypefnx {Function File} {[@var{fcn}, @var{help1str}] =} lookfor ("-all", @var{str})
-## Search for the string @var{str} in all functions using the current function
-## search path.
+## Search for the string @var{str} in the documentation of all functions in the
+## current function search path.
 ##
-## By default, @code{lookfor} looks for @var{str} in the first sentence of the
-## help string for each function found.  The entire help text of each function
-## can be searched by using the @qcode{"-all"} argument.  All searches are case
-## insensitive.
+## By default, @code{lookfor} looks for @var{str} in just the first sentence of
+## the help string for each function found.  The entire help text of each
+## function can be searched by using the @qcode{"-all"} argument.  All searches 
+## are case insensitive.
 ##
 ## When called with no output arguments, @code{lookfor} prints the list of
 ## matching functions to the terminal.  Otherwise, the output argument
 ## @var{fcns} contains the function names and @var{help1str} contains the first
 ## sentence from the help string of each function.
 ##
 ## Programming Note: The ability of @code{lookfor} to correctly identify the
 ## first sentence of the help text is dependent on the format of the function's
 ## help.  All Octave core functions are correctly formatted, but the same can
 ## not be guaranteed for external packages and user-supplied functions.
 ## Therefore, the use of the @qcode{"-all"} argument may be necessary to find
 ## related functions that are not a part of Octave.
-## @seealso{help, doc, which}
+##
+## The speed of lookup is greatly enhanced by having a cached documentation
+## file.  See @code{doc_cache_create} for more information.
+## @seealso{help, doc, which, path, doc_cache_create}
 ## @end deftypefn
 
 function [fcn, help1str] = lookfor (str, arg2)
 
   if (strcmpi (str, "-all"))
     ## The difference between using '-all' and not is which part of the caches
     ## we search.  The cache is organized such that row
     ## 1) contains the function name
diff --git a/scripts/help/print_usage.m b/scripts/help/print_usage.m
--- a/scripts/help/print_usage.m
+++ b/scripts/help/print_usage.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} print_usage ()
 ## @deftypefnx {Function File} {} print_usage (@var{name})
-## Print the usage message for a function.  When called with no input arguments
-## the @code{print_usage} function displays the usage message of the currently
-## executing function.
+## Print the usage message for the function @var{name}.
+##
+## When called with no input arguments the @code{print_usage} function displays
+## the usage message of the currently executing function.
 ## @seealso{help}
 ## @end deftypefn
 
 function print_usage (name)
   x = dbstack ();
   ## Handle input
   if (nargin == 0)
     ## Determine the name of the calling function
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -18,19 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} type @var{name} @dots{}
 ## @deftypefnx {Command} {} type -q @var{name} @dots{}
 ## @deftypefnx {Function File} {text =} type ("@var{name}", @dots{})
 ## Display the contents of @var{name} which may be a file, function (m-file),
 ## variable, operator, or keyword.
 ##
-## @code{type} normally prepends a header line describing the category
-## of @var{name} such as function or variable; The @option{-q} option
-## suppresses this behavior.
+## @code{type} normally prepends a header line describing the category of
+## @var{name} such as function or variable; The @option{-q} option suppresses
+## this behavior.
 ##
 ## If no output variable is used the contents are displayed on screen.
 ## Otherwise, a cell array of strings is returned, where each element
 ## corresponds to the contents of each requested function.
 ## @end deftypefn
 
 function text = type (varargin)
 
diff --git a/scripts/help/which.m b/scripts/help/which.m
--- a/scripts/help/which.m
+++ b/scripts/help/which.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Command} {} which name @dots{}
-## Display the type of each @var{name}.  If @var{name} is defined from a
-## function file, the full name of the file is also displayed.
+## Display the type of each @var{name}.
+##
+## If @var{name} is defined from a function file, the full name of the file is
+## also displayed.
 ## @seealso{help, lookfor}
 ## @end deftypefn
 
 function varargout = which (varargin)
 
   if (nargin > 0 && iscellstr (varargin))
     m = __which__ (varargin{:});
 
diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} autumn ()
 ## @deftypefnx {Function File} {@var{map} =} autumn (@var{n})
-## Create color colormap.  This colormap ranges from red through orange
-## to yellow.
+## Create color colormap.
+## This colormap ranges from red through orange to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "autumn");
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} bone ()
 ## @deftypefnx {Function File} {@var{map} =} bone (@var{n})
 ## Create color colormap.  This colormap varies from black to white with
 ## gray-blue shades.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "bone");
diff --git a/scripts/image/brighten.m b/scripts/image/brighten.m
--- a/scripts/image/brighten.m
+++ b/scripts/image/brighten.m
@@ -12,26 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{map_out} =} brighten (@var{map}, @var{beta})
-## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{beta})
+## @deftypefn  {Function File} {@var{map_out} =} brighten (@var{beta})
+## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{map}, @var{beta})
 ## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{h}, @var{beta})
-## Brighten or darken a colormap.  If the @var{map} argument is omitted, the
-## function is applied to the current colormap.  The first argument can also be
-## a valid graphics handle @var{h}, in which case @code{brighten} is applied to
-## the colormap associated with this handle.
+## @deftypefnx {Function File} {} brighten (@dots{})
+## Brighten or darken a colormap.
+##
+## The argument @var{beta} must be a scalar between -1 and 1, where a negative
+## value darkens and a positive value brightens the colormap.
 ##
-## The argument @var{beta} must be a scalar between -1 and 1, where a
-## negative value darkens and a positive value brightens the colormap.
+## If the @var{map} argument is omitted, the function is applied to the current
+## colormap.
+##
+## The first argument can also be a valid graphics handle @var{h}, in which
+## case @code{brighten} is applied to the colormap associated with this handle.
 ##
 ## If no output is specified then the result is written to the current colormap.
 ## @seealso{colormap, contrast}
 ## @end deftypefn
 
 function rmap = brighten (arg1, beta)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/image/cmpermute.m b/scripts/image/cmpermute.m
--- a/scripts/image/cmpermute.m
+++ b/scripts/image/cmpermute.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {[@var{Y}, @var{newmap}] =} cmpermute (@var{X}, @var{map}, @var{index})
 ## Reorder colors in a colormap.
 ##
 ## When called with only two arguments, @code{cmpermute} randomly rearranges
 ## the colormap @var{map} and returns a new colormap @var{newmap}.  It also
 ## returns the indexed image @var{Y} which is the equivalent of the original
 ## input image @var{X} when displayed using @var{newmap}.
 ##
-## When called with an optional third argument the order of colors in the
-## new colormap is defined by @var{index}.
+## When called with an optional third argument the order of colors in the new
+## colormap is defined by @var{index}.
 ##
 ## @strong{Caution:} @code{index} should not have repeated elements or the
 ## function will fail.
 ##
 ## @end deftypefn
 
 ## Author:  Josep Mones i Teixidor <jmones@puntbarra.com>
 
diff --git a/scripts/image/colorcube.m b/scripts/image/colorcube.m
--- a/scripts/image/colorcube.m
+++ b/scripts/image/colorcube.m
@@ -15,20 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} colorcube ()
 ## @deftypefnx {Function File} {@var{map} =} colorcube (@var{n})
 ## Create color colormap.  This colormap is composed of as many equally
-## spaced colors (not grays) in the RGB color space as possible.  If there
-## are not a perfect number @var{n} of regularly spaced colors then the
+## spaced colors (not grays) in the RGB color space as possible.
+##
+## If there are not a perfect number @var{n} of regularly spaced colors then the
 ## remaining entries in the colormap are gradients of pure red, green, blue,
 ## and gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 function map = colorcube (n)
 
   if (nargin == 0)
diff --git a/scripts/image/contrast.m b/scripts/image/contrast.m
--- a/scripts/image/contrast.m
+++ b/scripts/image/contrast.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{cmap} =} contrast (@var{x})
 ## @deftypefnx {Function File} {@var{cmap} =} contrast (@var{x}, @var{n})
-## Return a gray colormap that maximizes the contrast in an image.  The
-## returned colormap will have @var{n} rows.  If @var{n} is not defined
+## Return a gray colormap that maximizes the contrast in an image.
+##
+## The returned colormap will have @var{n} rows.  If @var{n} is not defined
 ## then the size of the current colormap is used.
 ## @seealso{colormap, brighten}
 ## @end deftypefn
 
 function cmap = contrast (x, n)
 
   if (nargin == 1)
     n = rows (colormap ());
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} cool ()
 ## @deftypefnx {Function File} {@var{map} =} cool (@var{n})
 ## Create color colormap.  The colormap varies from cyan to magenta.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "cool");
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} copper ()
 ## @deftypefnx {Function File} {@var{map} =} copper (@var{n})
-## Create color colormap.  This colormap varies from black to
-## a light copper tone.
+## Create color colormap.  This colormap varies from black to a light copper
+## tone.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "copper");
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -26,22 +26,22 @@
 ## This is achieved by transversing a color cube from black to white through
 ## a helix, hence the name cubehelix, while taking into account the perceived
 ## brightness of each channel according to the NTSC specifications from 1953.
 ##
 ## @example
 ## rgbplot (cubehelix (256))
 ## @end example
 ##
-## The argument @var{n} must be a scalar and corresponds to the lenght of the
-## colormap.  Defaults to the length of the current colormap.
+## The argument @var{n} must be a scalar.
+## If unspecified, the length of the current colormap, or 64, is used.
 ##
-## Development of this colormap is described in @cite{Green, D. A., 2011,
-## "A @nospell{colour} scheme for the display of astronomical intensity images",
-## Bulletin of the Astronomical Society of India, 39, 289.}.
+## Reference: Green, D. A., 2011,
+## @cite{"A @nospell{colour} scheme for the display of astronomical intensity
+## images"}, Bulletin of the Astronomical Society of India, 39, 289.
 ##
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 ## PKG_ADD: colormap ("register", "cubehelix");
 ## PKG_DEL: colormap ("unregister", "cubehelix");
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} flag ()
 ## @deftypefnx {Function File} {@var{map} =} flag (@var{n})
-## Create color colormap.  This colormap cycles through red, white, blue,
-## and black with each index change.
+## Create color colormap.  This colormap cycles through red, white, blue, and
+## black with each index change.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "flag");
diff --git a/scripts/image/gmap40.m b/scripts/image/gmap40.m
--- a/scripts/image/gmap40.m
+++ b/scripts/image/gmap40.m
@@ -15,18 +15,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} gmap40 ()
 ## @deftypefnx {Function File} {@var{map} =} gmap40 (@var{n})
 ## Create color colormap.  The colormap consists of red, green, blue, yellow,
-## magenta and cyan.  This colormap is specifically designed for users of
-## gnuplot 4.0 where these 6 colors are the allowable ones for patch objects.
+## magenta and cyan.
+##
+## This colormap is specifically designed for users of gnuplot 4.0 where these
+## 6 colors are the allowable ones for patch objects.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, a length of 6 is assumed.  Larger values of @var{n} result
 ## in a repetition of the above colors.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "gmap40");
 ## PKG_DEL: colormap ("unregister", "gmap40");
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} gray ()
 ## @deftypefnx {Function File} {@var{map} =} gray (@var{n})
-## Create gray colormap.  This colormap varies from black to white with
-## shades of gray.
+## Create gray colormap.  This colormap varies from black to white with shades
+## of gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -20,21 +20,21 @@
 ## @deftypefn  {Function File} {@var{img} =} gray2ind (@var{I})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{I}, @var{n})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{BW})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{BW}, @var{n})
 ## @deftypefnx {Function File} {[@var{img}, @var{map}] =} gray2ind (@dots{})
 ## Convert a grayscale or binary intensity image to an indexed image.
 ##
 ## The indexed image will consist of @var{n} different intensity values.
-## If not given @var{n} defaults to 64 for grayscale images or 2 for
-## binary black and white images.
+## If not given @var{n} defaults to 64 for grayscale images or 2 for binary
+## black and white images.
 ##
-## The output @var{img} is of class uint8 if @var{n} is less than or
-## equal to 256; Otherwise the return class is uint16.
+## The output @var{img} is of class uint8 if @var{n} is less than or equal to
+## 256; Otherwise the return class is uint16.
 ## @seealso{ind2gray, rgb2ind}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [I, map] = gray2ind (I, n = 64)
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} hot ()
 ## @deftypefnx {Function File} {@var{map} =} hot (@var{n})
 ## Create color colormap.  This colormap ranges from black through dark red,
 ## red, orange, yellow, to white.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "hot");
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hsv (@var{n})
 ## Create color colormap.  This colormap begins with red, changes through
 ## yellow, green, cyan, blue, and magenta, before returning to red.
+##
 ## It is useful for displaying periodic functions.  The map is obtained by
 ## linearly varying the hue through all possible values while keeping constant
 ## maximum saturation and value.  The equivalent code is
 ## @code{hsv2rgb ([(0:N-1)'/N, ones(N,2)])}.
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -20,16 +20,17 @@
 ## @deftypefn  {Function File} {} image (@var{img})
 ## @deftypefnx {Function File} {} image (@var{x}, @var{y}, @var{img})
 ## @deftypefnx {Function File} {} image (@dots{}, "@var{prop}", @var{val}, @dots{})
 ## @deftypefnx {Function File} {} image ("@var{prop1}", @var{val1}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} image (@dots{})
 ## Display a matrix as an indexed color image.
 ##
 ## The elements of @var{img} are indices into the current colormap.
+##
 ## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
 ## which specify the range for the axis labels.  If a range is specified as
 ## @w{@code{[max, min]}} then the image will be reversed along that axis.  For
 ## convenience, @var{x} and @var{y} may be specified as N-element vectors
 ## matching the length of the data in @var{img}.  However, only the first and
 ## last elements will be used to determine the axis limits.
 ## @strong{Warning:} @var{x} and @var{y} are ignored when using gnuplot 4.0
 ## or earlier.
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -19,20 +19,21 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} imagesc (@var{img})
 ## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{img})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, @var{climits})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, "@var{prop}", @var{val}, @dots{})
 ## @deftypefnx {Function File} {} imagesc ("@var{prop1}", @var{val1}, @dots{})
 ## @deftypefnx {Function File} {} imagesc (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imagesc (@dots{})
-## Display a scaled version of the matrix @var{img} as a color image.  The
-## colormap is scaled so that the entries of the matrix occupy the entire
-## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then that
-## range is set to the @qcode{"clim"} of the current axes.
+## Display a scaled version of the matrix @var{img} as a color image.
+##
+## The colormap is scaled so that the entries of the matrix occupy the entire
+## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then
+## that range is set to the @qcode{"clim"} of the current axes.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
 ## values for the respective axes, or as values for each row and column
 ## of the matrix @var{img}.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -61,18 +61,18 @@
 ## @item YResolution
 ## Y resolution of the image.
 ##
 ## @item ResolutionUnit
 ## Units of image resolution.  Value is @qcode{"Inch"},
 ## @qcode{"Centimeter"}, or @qcode{"undefined"}.
 ##
 ## @item DelayTime
-## Time in 1/100ths of a second (0 to 65535) which must expire before displaying
-## the next image in an animated sequence.
+## Time in 1/100ths of a second (0 to 65535) which must expire before
+## displaying the next image in an animated sequence.
 ##
 ## @item LoopCount
 ## Number of iterations to loop an animation.
 ##
 ## @item ByteOrder
 ## Endian option for formats that support it.  Value is @qcode{"little-endian"},
 ## @qcode{"big-endian"}, or @qcode{"undefined"}.
 ##
@@ -115,18 +115,18 @@
 ## device used to generate the image.
 ##
 ## @item Make
 ## The manufacturer of the recording equipment.  This is the manufacture of the
 ## @nospell{DSC}, scanner, video digitizer or other equipment that generated
 ## the image.
 ##
 ## @item Model
-## The model name or model number of the recording equipment as mentioned
-## on the field @qcode{"Make"}.
+## The model name or model number of the recording equipment as mentioned on
+## the field @qcode{"Make"}.
 ##
 ## @item DateTime
 ## The date and time of image creation as defined by the Exif standard, i.e.,
 ## it is the date and time the file was changed.
 ##
 ## @item ImageDescription
 ## The title of the image as defined by the Exif standard.
 ##
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -52,19 +52,19 @@
 ##
 ## @item alpha
 ## Logical value if format supports alpha channel (transparency or matte).
 ##
 ## @item multipage
 ## Logical value if format supports multipage (multiple images per file).
 ## @end table
 ##
-## It is possible to change the way Octave manages file formats with the options
-## @qcode{"add"}, @qcode{"remove"}, and @qcode{"update"}, and supplying a
-## structure @var{format} with the required fields.  The option
+## It is possible to change the way Octave manages file formats with the
+## options @qcode{"add"}, @qcode{"remove"}, and @qcode{"update"}, and supplying
+## a structure @var{format} with the required fields.  The option
 ## @qcode{"factory"} resets the configuration to the default.
 ##
 ## This can be used by Octave packages to extend the image reading capabilities
 ## Octave, through use of the PKG_ADD and PKG_DEL commands.
 ##
 ## @seealso{imfinfo, imread, imwrite}
 ## @end deftypefn
 
diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -24,64 +24,62 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{img}, @var{map}, @var{alpha}] =} imread (@var{filename})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@var{url})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{ext})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{idx})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{param1}, @var{val1}, @dots{})
 ## Read images from various file formats.
 ##
-## Reads an image as a matrix from the file @var{filename}.  If there is
-## no file @var{filename}, and @var{ext} was specified, it will look for
-## a file with the extension @var{ext}.  Finally, it will attempt to download
-## and read an image from @var{url}.
+## Read an image as a matrix from the file @var{filename}.  If there is no file
+## @var{filename}, and @var{ext} was specified, it will look for a file with
+## the extension @var{ext}.  Finally, it will attempt to download and read an
+## image from @var{url}.
 ##
-## The size and class of the output depends on the
-## format of the image.  A color image is returned as an
-## @nospell{MxNx3} matrix.  Gray-level and black-and-white images are
-## of size @nospell{MxN}.  Multipage images will have an additional 4th
-## dimension.
+## The size and class of the output depends on the format of the image.  A
+## color image is returned as an @nospell{MxNx3} matrix.  Gray-level and
+## black-and-white images are of size @nospell{MxN}.  Multipage images will
+## have an additional 4th dimension.
 ##
-## The bit depth of the image determines the
-## class of the output: @qcode{"uint8"}, @qcode{"uint16"} or @qcode{"single"}
-## for gray and color, and @qcode{"logical"} for black and white.
-## Note that indexed images always return the indexes for a colormap,
-## independent if @var{map} is a requested output.  To obtain the actual
-## RGB image, use @code{ind2rgb}.  When more than one indexed image is being
-## read, @var{map} is obtained from the first.  In some rare cases this
-## may be incorrect and @code{imfinfo} can be used to obtain the colormap of
-## each image.
+## The bit depth of the image determines the class of the output:
+## @qcode{"uint8"}, @qcode{"uint16"} or @qcode{"single"} for gray and color,
+## and @qcode{"logical"} for black and white.  Note that indexed images always
+## return the indexes for a colormap, independent if @var{map} is a requested
+## output.  To obtain the actual RGB image, use @code{ind2rgb}.  When more
+## than one indexed image is being read, @var{map} is obtained from the
+## first.  In some rare cases this may be incorrect and @code{imfinfo} can be
+## used to obtain the colormap of each image.
 ##
 ## See the Octave manual for more information in representing images.
 ##
-## Some file formats, such as TIFF and GIF, are able to store multiple
-## images in a single file.  @var{idx} can be a scalar or vector
-## specifying the index of the images to read.  By default, Octave
-## will only read the first page.
+## Some file formats, such as TIFF and GIF, are able to store multiple images
+## in a single file.  @var{idx} can be a scalar or vector specifying the
+## index of the images to read.  By default, Octave will only read the first
+## page.
 ##
-## Depending on the file format, it is possible to configure the reading
-## of images with @var{param}, @var{val} pairs.  The following options
-## are supported:
+## Depending on the file format, it is possible to configure the reading of
+## images with @var{param}, @var{val} pairs.  The following options are
+## supported:
 ##
 ## @table @samp
 ## @item @qcode{"Frames"} or @qcode{"Index"}
 ## This is an alternative method to specify @var{idx}.  When specifying it
 ## in this way, its value can also be the string @qcode{"all"}.
 ##
 ## @item @qcode{"Info"}
 ## This option exists for @sc{matlab} compatibility and has no effect.  For
-## maximum performance while reading multiple images from a single file,
-## use the Index option.
+## maximum performance while reading multiple images from a single file, use
+## the Index option.
 ##
 ## @item @qcode{"PixelRegion"}
-## Controls the image region that is read.  Takes as value a cell array
-## with two arrays of 3 elements @code{@{@var{rows} @var{cols}@}}.  The
-## elements in the array are the start, increment and end pixel to be
-## read.  If the increment value is omitted, defaults to 1.  For example,
-## the following are all equivalent:
+## Controls the image region that is read.  Takes as value a cell array with
+## two arrays of 3 elements @code{@{@var{rows} @var{cols}@}}.  The elements
+## in the array are the start, increment and end pixel to be read.  If the
+## increment value is omitted, defaults to 1.  For example, the following are
+## all equivalent:
 ##
 ## @example
 ## @group
 ## imread (filename, "PixelRegion", @{[200 600] [300 700]@});
 ## imread (filename, "PixelRegion", @{[200 1 600] [300 1 700]@});
 ## imread (filename)(200:600, 300:700);
 ## @end group
 ## @end example
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -22,49 +22,45 @@
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{map})
 ## @deftypefnx {Function File} {} imshow (@var{rgb}, @dots{})
 ## @deftypefnx {Function File} {} imshow (@var{filename})
 ## @deftypefnx {Function File} {} imshow (@dots{}, @var{string_param1}, @var{value1}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imshow (@dots{})
 ## Display the image @var{im}, where @var{im} can be a 2-dimensional
 ## (grayscale image) or a 3-dimensional (RGB image) matrix.
 ##
-## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]},
-## the image is shown using a display range between @var{low} and
-## @var{high}.  If an empty matrix is passed for @var{limits}, the
-## display range is computed as the range between the minimal and the
-## maximal value in the image.
+## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]}, the
+## image is shown using a display range between @var{low} and @var{high}.  If
+## an empty matrix is passed for @var{limits}, the display range is computed
+## as the range between the minimal and the maximal value in the image.
 ##
 ## If @var{map} is a valid color map, the image will be shown as an indexed
 ## image using the supplied color map.
 ##
-## If a file name is given instead of an image, the file will be read and
-## shown.
+## If a file name is given instead of an image, the file will be read and shown.
 ##
-## If given, the parameter @var{string_param1} has value
-## @var{value1}.  @var{string_param1} can be any of the following:
+## If given, the parameter @var{string_param1} has value @var{value1}.  
+## @var{string_param1} can be any of the following:
 ##
 ## @table @asis
 ## @item @qcode{"displayrange"}
 ## @var{value1} is the display range as described above.
 ##
 ## @item @qcode{"colormap"}
 ## @var{value1} is the colormap to use when displaying an indexed image.
 ##
 ## @item @qcode{"xdata"}
 ## If @var{value1} is a two element vector, it must contain horizontal axis
-## limits in the form [xmin xmax]; Otherwise @var{value1} must be a
-## vector and only the first and last elements will be used for xmin and
-## xmax respectively.
+## limits in the form [xmin xmax]; Otherwise @var{value1} must be a vector and
+## only the first and last elements will be used for xmin and xmax respectively.
 ##
 ## @item @qcode{"ydata"}
 ## If @var{value1} is a two element vector, it must contain vertical axis
-## limits in the form [ymin ymax]; Otherwise @var{value1} must be a
-## vector and only the first and last elements will be used for ymin and
-## ymax respectively.
+## limits in the form [ymin ymax]; Otherwise @var{value1} must be a vector and
+## only the first and last elements will be used for ymin and ymax respectively.
 ##
 ## @end table
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
 ## Author: Stefan van der Walt  <stefan@sun.ac.za>
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -30,66 +30,65 @@
 ## reserved for color space, and multiple pages respectively.  If it's an
 ## indexed image, the colormap @var{map} must also be specified.
 ##
 ## If @var{ext} is not supplied, the file extension of @var{filename} is used
 ## to determine the format.  The actual supported formats are dependent on
 ## options made during the build of Octave.  Use @code{imformats} to check
 ## the support of the different image formats.
 ##
-## Depending on the file format, it is possible to configure the writing
-## of images with @var{param}, @var{val} pairs.  The following options
-## are supported:
+## Depending on the file format, it is possible to configure the writing of
+## images with @var{param}, @var{val} pairs.  The following options are
+## supported:
 ##
 ## @table @samp
 ## @item Alpha
 ## Alpha (transparency) channel for the image.  This must be a matrix with
 ## same class, and number of rows and columns of @var{img}.  In case of a
 ## multipage image, the size of the 4th dimension must also match and the third
-## dimension must be a singleton.  By default, image will be completely
-## opaque.
+## dimension must be a singleton.  By default, image will be completely opaque.
 ##
 ## @item DelayTime
 ## For formats that accept animations (such as GIF), controls for how long a
 ## frame is displayed until it moves to the next one.  The value must be scalar
 ## (which will applied to all frames in @var{img}), or a vector of length
 ## equal to the number of frames in @var{im}.  The value is in seconds, must
 ## be between 0 and 655.35, and defaults to 0.5.
 ##
 ## @item DisposalMethod
-## For formats that accept animations (such as GIF), controls what happens
-## to a frame before drawing the next one.  Its value can be one of the
+## For formats that accept animations (such as GIF), controls what happens to
+## a frame before drawing the next one.  Its value can be one of the
 ## following strings: "doNotSpecify" (default); "leaveInPlace"; "restoreBG";
 ## and "restorePrevious", or a cell array of those string with length equal
 ## to the number of frames in @var{img}.
 ##
 ## @item LoopCount
 ## For formats that accept animations (such as GIF), controls how many times
 ## the sequence is repeated.  A value of Inf means an infinite loop (default),
 ## a value of 0 or 1 that the sequence is played only once (loops zero times),
 ## while a value of 2 or above loops that number of times (looping twice means
 ## it plays the complete sequence 3 times).  This option is ignored when there
 ## is only a single image at the end of writing the file.
 ##
 ## @item Quality
-## Set the quality of the compression.  The value should be an
-## integer between 0 and 100, with larger values indicating higher visual
-## quality and lower compression.  Defaults to 75.
+## Set the quality of the compression.  The value should be an integer
+## between 0 and 100, with larger values indicating higher visual quality and
+## lower compression.  Defaults to 75.
 ##
 ## @item WriteMode
-## Some file formats, such as TIFF and GIF, are able to store multiple
-## images in a single file.  This option specifies if @var{img} should be
-## appended to the file (if it exists) or if a new file should be created
-## for it (possibly overwriting an existing file).  The value should be
-## the string @qcode{"Overwrite"} (default), or @qcode{"Append"}.
+## Some file formats, such as TIFF and GIF, are able to store multiple images
+## in a single file.  This option specifies if @var{img} should be appended
+## to the file (if it exists) or if a new file should be created for it
+## (possibly overwriting an existing file).  The value should be the string
+## @qcode{"Overwrite"} (default), or @qcode{"Append"}.
 ##
 ## Despite this option, the most efficient method of writing a multipage
-## image is to pass a 4 dimensional @var{img} to @code{imwrite}, the
-## same matrix that could be expected when using @code{imread} with the
-## option @qcode{"Index"} set to @qcode{"all"}.
+## image is to pass a 4 dimensional @var{img} to @code{imwrite}, the same
+## matrix that could be expected when using @code{imread} with the option
+## @qcode{"Index"} set to @qcode{"all"}.
 ##
 ## @end table
 ##
 ## @seealso{imread, imfinfo, imformats}
 ## @end deftypefn
 
 function imwrite (varargin)
   if (nargin < 2)
diff --git a/scripts/image/iscolormap.m b/scripts/image/iscolormap.m
--- a/scripts/image/iscolormap.m
+++ b/scripts/image/iscolormap.m
@@ -15,20 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} iscolormap (@var{cmap})
 ## Return true if @var{cmap} is a colormap.
 ##
-## A colormap is a real matrix with @var{n} rows and 3 columns.
-## Each row represents a single color.  The columns contain red, green,
-## and blue intensities respectively.  All entries must be between 0 and 1
-## inclusive.
+## A colormap is a real matrix with @var{n} rows and 3 columns.  Each row
+## represents a single color.  The columns contain red, green, and blue
+## intensities respectively.  All entries must be between 0 and 1 inclusive.
 ## @seealso{colormap, rgbplot}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function retval = iscolormap (cmap)
 
   if (nargin != 1)
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} jet ()
 ## @deftypefnx {Function File} {@var{map} =} jet (@var{n})
 ## Create color colormap.  This colormap ranges from dark blue through blue,
 ## cyan, green, yellow, red, to dark red.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "jet");
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} lines ()
 ## @deftypefnx {Function File} {@var{map} =} lines (@var{n})
 ## Create color colormap.  This colormap is composed of the list of colors
 ## in the current axes @qcode{"ColorOrder"} property.  The default is blue,
 ## green, red, cyan, pink, yellow, and gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "lines");
 ## PKG_DEL: colormap ("unregister", "lines");
 
diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -18,25 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{rgb_map} =} ntsc2rgb (@var{yiq_map})
 ## @deftypefnx {Function File} {@var{rgb_img} =} ntsc2rgb (@var{yiq_img})
 ## Transform a colormap or image from luminance-chrominance (NTSC) space to
 ## red-green-blue (RGB) color space.
 ##
 ## Implementation Note:
-## The conversion matrix is chosen to be the inverse of the
-## matrix used for rgb2ntsc such that
+## The conversion matrix is chosen to be the inverse of the matrix used for
+## rgb2ntsc such that
 ##
 ## @example
 ## x == ntsc2rgb (rgb2ntsc (x))
 ## @end example
 ##
-## @sc{matlab} uses a slightly different matrix where rounding
-## means the equality above does not hold.
+## @sc{matlab} uses a slightly different matrix where rounding means the
+## equality above does not hold.
 ## @seealso{rgb2ntsc, hsv2rgb, ind2rgb}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function rgb = ntsc2rgb (yiq)
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} ocean ()
 ## @deftypefnx {Function File} {@var{map} =} ocean (@var{n})
 ## Create color colormap.  This colormap varies from black to white with shades
 ## of blue.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -15,17 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} pink ()
 ## @deftypefnx {Function File} {@var{map} =} pink (@var{n})
 ## Create color colormap.  This colormap varies from black to white with
-## shades of gray-pink.  It gives a sepia tone when used on grayscale images.
+## shades of gray-pink.
+##
+## This colormap gives a sepia tone when used on grayscale images.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "pink");
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} prism ()
 ## @deftypefnx {Function File} {@var{map} =} prism (@var{n})
 ## Create color colormap.  This colormap cycles through red, orange, yellow,
 ## green, blue and violet with each index change.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "prism");
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} rainbow ()
 ## @deftypefnx {Function File} {@var{map} =} rainbow (@var{n})
 ## Create color colormap.  This colormap ranges from red through orange,
 ## yellow, green, blue, to violet.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## this colormap is not part of matlab, it is like the prism
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -31,18 +31,18 @@
 ## /Y\     0.299  0.587  0.114  /R\
 ## |I|  =  0.596 -0.274 -0.322  |G|
 ## \Q/     0.211 -0.523  0.312  \B/
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## as documented in @url{http://en.wikipedia.org/wiki/YIQ} and truncated to 3
-## significant figures.  Note: The FCC version of NTSC uses only 2
-## significant digits and is slightly different.
+## significant figures.  Note: The FCC version of NTSC uses only 2 significant
+## digits and is slightly different.
 ## @seealso{ntsc2rgb, rgb2hsv, rgb2ind}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function yiq = rgb2ntsc (rgb)
diff --git a/scripts/image/spinmap.m b/scripts/image/spinmap.m
--- a/scripts/image/spinmap.m
+++ b/scripts/image/spinmap.m
@@ -17,21 +17,22 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spinmap ()
 ## @deftypefnx {Function File} {} spinmap (@var{t})
 ## @deftypefnx {Function File} {} spinmap (@var{t}, @var{inc})
 ## @deftypefnx {Function File} {} spinmap ("inf")
 ## Cycle the colormap for @var{t} seconds with a color increment of @var{inc}.
+##
 ## Both parameters are optional.  The default cycle time is 5 seconds and the
 ## default increment is 2.  If the option @qcode{"inf"} is given then cycle
 ## continuously until @kbd{Control-C} is pressed.
 ##
-## When rotating the original color 1 becomes color 2, color 2 becomes
+## When rotating, the original color 1 becomes color 2, color 2 becomes
 ## color 3, etc.  A positive or negative increment is allowed and a higher
 ## value of @var{inc} will cause faster cycling through the colormap.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel at gmx.de>
 
 function spinmap (t = 5, inc = 2)
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} spring ()
 ## @deftypefnx {Function File} {@var{map} =} spring (@var{n})
 ## Create color colormap.  This colormap varies from magenta to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "spring");
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} summer ()
 ## @deftypefnx {Function File} {@var{map} =} summer (@var{n})
 ## Create color colormap.  This colormap varies from green to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date:  06/03/2000
 
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -15,18 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} white ()
 ## @deftypefnx {Function File} {@var{map} =} white (@var{n})
 ## Create color colormap.  This colormap is completely white.
-## The argument @var{n} should be a scalar.  If it
-## is omitted, the length of the current colormap or 64 is assumed.
+##
+## The argument @var{n} must be a scalar.
+## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "white");
 ## PKG_DEL: colormap ("unregister", "white");
 
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} winter ()
 ## @deftypefnx {Function File} {@var{map} =} winter (@var{n})
 ## Create color colormap.  This colormap varies from blue to green.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "winter");
