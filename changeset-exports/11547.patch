# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1295114670 28800
#      Sat Jan 15 10:04:30 2011 -0800
# Node ID e1851653d59c06515a909fabe08633fef1f415f7
# Parent  1b7bb90e670a5c1b4660372648e19ceefbc4b28a
Eliminate @deffn macros.

For consistency and easier maintenance, only use @deftypefn macro.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-15  Rik  <octave@nomad.inbox5.com>
+
+	* doc/interpreter/func.txi, doc/interpreter/intro.txi: Eliminate
+	@deffn macros.
+
 2011-01-15  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/doccheck/mk_undocumented_list: Update list of exceptions
 	not requiring documentation.
 
 2011-01-15  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/stats.txi: Add stdnormal_xxx functions to documentation.
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -535,22 +535,22 @@ endfunction
 @end group
 @end example
 
 Note that this function could not have been written using the
 @code{break} statement to exit the loop once a nonzero value is found
 without adding extra logic to avoid printing the message if the vector
 does contain a nonzero element.
 
-@deffn {Keyword} return
+@deftypefn {Keyword} {} return
 When Octave encounters the keyword @code{return} inside a function or
 script, it returns control to the caller immediately.  At the top level,
 the return statement is ignored.  A @code{return} statement is assumed
 at the end of every function definition.
-@end deffn
+@end deftypefn
 
 @node Default Arguments
 @section Default Arguments
 @cindex default arguments
 
 Since Octave supports variable number of input arguments, it is very useful
 to assign default values to some input arguments.  When an input argument
 is declared in the argument list it is possible to assign a default
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -628,23 +628,23 @@ arguments.
 @cindex command descriptions
 
 Command descriptions have a format similar to function descriptions,
 except that the word `Function' is replaced by `Command'.  Commands are
 functions that may be called without surrounding their arguments in
 parentheses.  For example, here is the description for Octave's
 @code{cd} command:
 
-@deffn {Command} cd dir
-@deffnx {Command} chdir dir
+@deftypefn {Command} {} cd dir
+@deftypefnx {Command} {} chdir dir
 Change the current working directory to @var{dir}.  For example,
 @kbd{cd ~/octave} changes the current working directory to
 @file{~/octave}.  If the directory does not exist, an error message is
 printed and the working directory is not changed.
-@end deffn
+@end deftypefn
 
 @node A Sample Variable Description
 @subsubsection A Sample Variable Description
 @cindex variable descriptions
 
 A @dfn{variable} is a name that can hold a value.  Although any variable
 can be set by the user, @dfn{built-in variables} typically exist
 specifically so that users can change them to alter the way Octave
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-15  Rik  <octave@nomad.inbox5.com>
+
+	* scripts/help/doc.m, scripts/help/which.m, 
+	scripts/miscellaneous/comma.m, scripts/miscellaneous/ls.m,
+	scripts/miscellaneous/paren.m, scripts/miscellaneous/semicolon.m,
+	scripts/pkg/pkg.m: Eliminate @deffn macros.
+
 2011-01-15  John W. Eaton  <jwe@octave.org>
 
 	* deprecated/krylovb: Move here from linear-algebra.
 	* deprecated/module.mk (deprecated_FCN_FILES):
 	Include krylovb.m in the list.
 	* linear-algebra/module.mk (linear_algebra_FCN_FILES):
 	Remove krylovb.m from the list.
 
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -12,29 +12,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn {Command} doc @var{function_name}
+## @deftypefn {Command} {} doc @var{function_name}
 ## Display documentation for the function @var{function_name}
 ## directly from an on-line version of
 ## the printed manual, using the GNU Info browser.  If invoked without
 ## any arguments, the manual is shown from the beginning.
 ##
 ## For example, the command @kbd{doc rand} starts the GNU Info browser
 ## at the @code{rand} node in the on-line version of the manual.
 ##
 ## Once the GNU Info browser is running, help for using it is available
 ## using the command @kbd{C-h}.
 ## @seealso{help}
-## @end deffn
+## @end deftypefn
 
 ## Author: Soren Hauberg <soren@hauberg.org>
 ## Adapted-by: jwe
 
 function retval = doc (fname)
 
   if (nargin == 0 || nargin == 1)
 
diff --git a/scripts/help/which.m b/scripts/help/which.m
--- a/scripts/help/which.m
+++ b/scripts/help/which.m
@@ -12,21 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn {Command} which name @dots{}
+## @deftypefn {Command} {} which name @dots{}
 ## Display the type of each @var{name}.  If @var{name} is defined from a
 ## function file, the full name of the file is also displayed.
 ## @seealso{help, lookfor}
-## @end deffn
+## @end deftypefn
 
 function varargout = which (varargin)
 
   if (nargin > 0 && iscellstr (varargin))
     m = __which__ (varargin{:});
 
     if (nargout == 0)
       for i = 1:nargin
diff --git a/scripts/miscellaneous/comma.m b/scripts/miscellaneous/comma.m
--- a/scripts/miscellaneous/comma.m
+++ b/scripts/miscellaneous/comma.m
@@ -12,12 +12,12 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn {Operator} ,
+## @deftypefn {Operator} {} ,
 ## Array index, function argument, or command separator.
 ## @seealso{semicolon}
-## @end deffn
+## @end deftypefn
diff --git a/scripts/miscellaneous/ls.m b/scripts/miscellaneous/ls.m
--- a/scripts/miscellaneous/ls.m
+++ b/scripts/miscellaneous/ls.m
@@ -12,33 +12,33 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn {Command} ls options
+## @deftypefn {Command} {} ls options
 ## List directory contents.  For example:
 ## 
 ## @example
 ## @group
 ## ls -l
 ##      @print{} total 12
 ##      @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m
 ##      @print{} -rw-r--r--   1 jwe  users  1315 Aug 17 23:14 bar.m
 ## @end group
 ## @end example
 ## 
 ## The @code{dir} and @code{ls} commands are implemented by calling your
 ## system's directory listing command, so the available options may vary
 ## from system to system.
 ## @seealso{dir, stat, readdir, glob, filesep, ls_command}
-## @end deffn
+## @end deftypefn
 
 ## Author: jwe
 
 function retval = ls (varargin)
 
   global __ls_command__;
 
   if (isempty (__ls_command__) || ! ischar (__ls_command__))
diff --git a/scripts/miscellaneous/paren.m b/scripts/miscellaneous/paren.m
--- a/scripts/miscellaneous/paren.m
+++ b/scripts/miscellaneous/paren.m
@@ -12,12 +12,12 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn  {Operator} (
-## @deffnx {Operator} )
+## @deftypefn  {Operator} {} (
+## @deftypefnx {Operator} {} )
 ## Array index or function argument delimeter.
-## @end deffn
+## @end deftypefn
diff --git a/scripts/miscellaneous/semicolon.m b/scripts/miscellaneous/semicolon.m
--- a/scripts/miscellaneous/semicolon.m
+++ b/scripts/miscellaneous/semicolon.m
@@ -12,12 +12,12 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn {Operator} ;
+## @deftypefn {Operator} {} ;
 ## Array row or command separator.
 ## @seealso{comma}
-## @end deffn
+## @end deftypefn
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -13,18 +13,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deffn  {Command} pkg @var{command} @var{pkg_name}
-## @deffnx {Command} pkg @var{command} @var{option} @var{pkg_name}
+## @deftypefn  {Command} {} pkg @var{command} @var{pkg_name}
+## @deftypefnx {Command} {} pkg @var{command} @var{option} @var{pkg_name}
 ## This command interacts with the package manager.  Different actions will
 ## be taken depending on the value of @var{command}.
 ##
 ## @table @samp
 ##
 ## @item install
 ## Install named packages.  For example,
 ##
@@ -226,17 +226,17 @@
 ## @end example
 ##
 ## @noindent
 ## where @code{builddir} is the name of a directory where the temporary
 ## installation will be produced and the binary packages will be found.
 ## The options @option{-verbose} and @option{-nodeps} are respected, while 
 ## the other options are ignored.
 ## @end table
-## @end deffn
+## @end deftypefn
 
 function [local_packages, global_packages] = pkg (varargin)
   ## Installation prefix (FIXME: what should these be on windows?)
   persistent user_prefix = false;
   persistent prefix = -1;
   persistent archprefix = -1;
   persistent local_list = tilde_expand (fullfile ("~", ".octave_packages"));
   persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave",
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-15  Rik  <octave@nomad.inbox5.com>
+
+	* src/dirfns.cc, src/help.cc, src/input.cc, src/load-save.cc,
+	src/oct-hist.cc, src/pager.cc, src/pr-output.cc, src/variables.cc:
+	Eliminate @deffn macros.
+
 2011-01-15  John W. Eaton  <jwe@octave.org>
 
 	* syscalls.cc (FWEXITSTATUS, FWIFEXITED): Missing semicolon.
 
 2011-01-15  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn-handle.cc: Use version instead of flops in test.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -84,32 +84,32 @@ octave_change_to_directory (const std::s
   else
     error ("%s: %s", newdir.c_str (), gnulib::strerror (errno));
 
   return cd_ok;
 }
 
 DEFUN (cd, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} cd dir\n\
-@deffnx {Command} chdir dir\n\
+@deftypefn {Command} {} cd dir\n\
+@deftypefnx {Command} {} chdir dir\n\
 Change the current working directory to @var{dir}.  If @var{dir} is\n\
 omitted, the current directory is changed to the user's home\n\
 directory.  For example,\n\
 \n\
 @example\n\
 cd ~/octave\n\
 @end example\n\
 \n\
 @noindent\n\
 changes the current working directory to @file{~/octave}.  If the\n\
 directory does not exist, an error message is printed and the working\n\
 directory is not changed.\n\
 @seealso{mkdir, rmdir, dir}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("cd");
 
   if (error_state)
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -227,229 +227,229 @@ transpose, *not* the complex conjugate t
   pair_type ("~=",
     "Logical not equals operator.  See also `!='."),
 };
 
 const static pair_type keywords[] =
 {
   pair_type ("break",
     "-*- texinfo -*-\n\
-@deffn Keyword break\n\
+@deftypefn {Keyword} {} break\n\
 Exit the innermost enclosing do, while or for loop.\n\
 @seealso{do, while, for, continue}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("case",
     "-*- texinfo -*-\n\
-@deffn Keyword case @{@var{value}@}\n\
+@deftypefn {Keyword} {} case @{@var{value}@}\n\
 A case statement in an switch.  Octave cases are exclusive and do not\n\
 fall-through as do C-language cases.  A switch statement must have at least\n\
 one case.  See @code{switch} for an example.\n\
 @seealso{switch}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("catch",
     "-*- texinfo -*-\n\
-@deffn Keyword catch\n\
+@deftypefn {Keyword} {} catch\n\
 Begin the cleanup part of a try-catch block.\n\
 @seealso{try}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("continue",
     "-*- texinfo -*-\n\
-@deffn Keyword continue\n\
+@deftypefn {Keyword} {} continue\n\
 Jump to the end of the innermost enclosing do, while or for loop.\n\
 @seealso{do, while, for, break}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("do",
     "-*- texinfo -*-\n\
-@deffn Keyword do\n\
+@deftypefn {Keyword} {} do\n\
 Begin a do-until loop.  This differs from a do-while loop in that the\n\
 body of the loop is executed at least once.\n\
 @seealso{while}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("else",
     "-*- texinfo -*-\n\
-@deffn Keyword else\n\
+@deftypefn {Keyword} {} else\n\
 Alternate action for an if block.  See @code{if} for an example.\n\
 @seealso{if}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("elseif",
     "-*- texinfo -*-\n\
-@deffn Keyword elseif (@var{condition})\n\
+@deftypefn {Keyword} {} elseif (@var{condition})\n\
 Alternate conditional test for an if block.  See @code{if} for an example.\n\
 @seealso{if}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("end",
     "-*- texinfo -*-\n\
-@deffn Keyword end\n\
+@deftypefn {Keyword} {} end\n\
 Mark the end of any @code{for}, @code{if}, @code{do}, @code{while}, or\n\
 @code{function} block.\n\
 @seealso{for, if, do, while, function}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("end_try_catch",
     "-*- texinfo -*-\n\
-@deffn Keyword end_try_catch\n\
+@deftypefn {Keyword} {} end_try_catch\n\
 Mark the end of an @code{try-catch} block.\n\
 @seealso{try, catch}\n\
-@end deffn"), 
+@end deftypefn"), 
 
   pair_type ("end_unwind_protect",
     "-*- texinfo -*-\n\
-@deffn Keyword end_unwind_protect\n\
+@deftypefn {Keyword} {} end_unwind_protect\n\
 Mark the end of an unwind_protect block.\n\
 @seealso{unwind_protect}\n\
-@end deffn"), 
+@end deftypefn"), 
 
   pair_type ("endfor",
     "-*- texinfo -*-\n\
-@deffn Keyword endfor\n\
+@deftypefn {Keyword} {} endfor\n\
 Mark the end of a for loop.  See @code{for} for an example.\n\
 @seealso{for}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("endfunction",
     "-*- texinfo -*-\n\
-@deffn Keyword endfunction\n\
+@deftypefn {Keyword} {} endfunction\n\
 Mark the end of a function.\n\
 @seealso{function}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("endif",
     "-*- texinfo -*-\n\
-@deffn Keyword endif\n\
+@deftypefn {Keyword} {} endif\n\
 Mark the end of an if block.  See @code{if} for an example.\n\
 @seealso{if}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("endswitch",
     "-*- texinfo -*-\n\
-@deffn Keyword endswitch\n\
+@deftypefn {Keyword} {} endswitch\n\
 Mark the end of a switch block.  See @code{switch} for an example.\n\
 @seealso{switch}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("endwhile",
     "-*- texinfo -*-\n\
-@deffn Keyword endwhile\n\
+@deftypefn {Keyword} {} endwhile\n\
 Mark the end of a while loop.  See @code{while} for an example.\n\
 @seealso{do, while}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("for",
     "-*- texinfo -*-\n\
-@deffn Keyword for @var{i} = @var{range}\n\
+@deftypefn {Keyword} {} for @var{i} = @var{range}\n\
 Begin a for loop.\n\
 \n\
 @example\n\
 @group\n\
 for i = 1:10\n\
   i\n\
 endfor\n\
 @end group\n\
 @end example\n\
 @seealso{do, while}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("function",
     "-*- texinfo -*-\n\
-@deffn Keyword function @var{outputs} = function (@var{input}, @dots{})\n\
-@deffnx Keyword function {} function (@var{input}, @dots{})\n\
-@deffnx Keyword function @var{outputs} = function\n\
+@deftypefn {Keyword} {} function @var{outputs} = function (@var{input}, @dots{})\n\
+@deftypefnx {Keyword} {} function {} function (@var{input}, @dots{})\n\
+@deftypefnx {Keyword} {} function @var{outputs} = function\n\
 Begin a function body with @var{outputs} as results and @var{inputs} as\n\
 parameters.\n\
 @seealso{return}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("global",
     "-*- texinfo -*-\n\
-@deffn Keyword global\n\
+@deftypefn {Keyword} {} global\n\
 Declare variables to have global scope.\n\
 \n\
 @example\n\
 @group\n\
 global @var{x};\n\
 if isempty (@var{x})\n\
   x = 1;\n\
 endif\n\
 @end group\n\
 @end example\n\
 @seealso{persistent}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("if",
     "-*- texinfo -*-\n\
-@deffn Keyword if (@var{cond}) @dots{} endif\n\
-@deffnx Keyword if (@var{cond}) @dots{} else @dots{} endif\n\
-@deffnx Keyword if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} endif\n\
-@deffnx Keyword if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} else @dots{} endif\n\
+@deftypefn {Keyword} {} if (@var{cond}) @dots{} endif\n\
+@deftypefnx {Keyword} {} if (@var{cond}) @dots{} else @dots{} endif\n\
+@deftypefnx {Keyword} {} if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} endif\n\
+@deftypefnx {Keyword} {} if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} else @dots{} endif\n\
 Begin an if block.\n\
 \n\
 @example\n\
 @group\n\
 x = 1;\n\
 if (x == 1)\n\
   disp (\"one\");\n\
 elseif (x == 2)\n\
   disp (\"two\");\n\
 else\n\
   disp (\"not one or two\");\n\
 endif\n\
 @end group\n\
 @end example\n\
 @seealso{switch}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("otherwise",
     "-*- texinfo -*-\n\
-@deffn Keyword otherwise\n\
+@deftypefn {Keyword} {} otherwise\n\
 The default statement in a switch block (similar to else in an if block).\n\
 @seealso{switch}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("persistent",
     "-*- texinfo -*-\n\
-@deffn Keyword persistent @var{var}\n\
+@deftypefn {Keyword} {} persistent @var{var}\n\
 Declare variables as persistent.  A variable that has been declared\n\
 persistent within a function will retain its contents in memory between\n\
 subsequent calls to the same function.  The difference between persistent\n\
 variables and global variables is that persistent variables are local in \n\
 scope to a particular function and are not visible elsewhere.\n\
 @seealso{global}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("replot",
     "-*- texinfo -*-\n\
-@deffn Keyword replot\n\
+@deftypefn {Keyword} {} replot\n\
 Replot a graphic.\n\
 @seealso{plot}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("return",
     "-*- texinfo -*-\n\
-@deffn Keyword return\n\
+@deftypefn {Keyword} {} return\n\
 Return from a function.\n\
 @seealso{function}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("static",
     "-*- texinfo -*-\n\
-@deffn Keyword static\n\
+@deftypefn {Keyword} {} static\n\
 This function has been deprecated in favor of persistent.\n\
 @seealso{persistent}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("switch",
     "-*- texinfo -*-\n\
-@deffn Keyword switch @var{statement}\n\
+@deftypefn {Keyword} {} switch @var{statement}\n\
 Begin a switch block.\n\
 \n\
 @example\n\
 @group\n\
 yesno = \"yes\"\n\
 \n\
 switch yesno\n\
   case @{\"Yes\" \"yes\" \"YES\" \"y\" \"Y\"@}\n\
@@ -457,78 +457,78 @@ switch yesno\n\
   case @{\"No\" \"no\" \"NO\" \"n\" \"N\"@}\n\
     value = 0;\n\
   otherwise\n\
     error (\"invalid value\");\n\
 endswitch\n\
 @end group\n\
 @end example\n\
 @seealso{if, case, otherwise}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("try",
     "-*- texinfo -*-\n\
-@deffn Keyword try\n\
+@deftypefn {Keyword} {} try\n\
 Begin a try-catch block.\n\
 \n\
 If an error occurs within a try block, then the catch code will be run and\n\
 execution will proceed after the catch block (though it is often\n\
 recommended to use the lasterr function to re-throw the error after cleanup\n\
 is completed).\n\
 @seealso{catch,unwind_protect}\n\
-@end deffn"), 
+@end deftypefn"), 
 
   pair_type ("until",
     "-*- texinfo -*-\n\
-@deffn Keyword until\n\
+@deftypefn {Keyword} {} until\n\
 End a do-until loop.\n\
 @seealso{do}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("unwind_protect",
     "-*- texinfo -*-\n\
-@deffn Keyword unwind_protect\n\
+@deftypefn {Keyword} {} unwind_protect\n\
 Begin an unwind_protect block.\n\
 \n\
 If an error occurs within the first part of an unwind_protect block\n\
 the commands within the unwind_protect_cleanup block are executed before\n\
 the error is thrown.  If an error is not thrown, then the\n\
 unwind_protect_cleanup block is still executed (in other words, the\n\
 unwind_protect_cleanup will be run with or without an error in the\n\
 unwind_protect block).\n\
 @seealso{unwind_protect_cleanup,try}\n\
-@end deffn"), 
+@end deftypefn"), 
 
   pair_type ("unwind_protect_cleanup",
     "-*- texinfo -*-\n\
-@deffn Keyword unwind_protect_cleanup\n\
+@deftypefn {Keyword} {} unwind_protect_cleanup\n\
 Begin the cleanup section of an unwind_protect block.\n\
 @seealso{unwind_protect}\n\
-@end deffn"), 
+@end deftypefn"), 
 
   pair_type ("varargin",
     "-*- texinfo -*-\n\
-@deffn Keyword varargin\n\
+@deftypefn {Keyword} {} varargin\n\
 Pass an arbitrary number of arguments into a function.\n\
 @seealso{varargout, nargin, nargout}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("varargout",
     "-*- texinfo -*-\n\
-@deffn Keyword varargout\n\
+@deftypefn {Keyword} {} varargout\n\
 Pass an arbitrary number of arguments out of a function.\n\
 @seealso{varargin, nargin, nargout}\n\
-@end deffn"),
+@end deftypefn"),
 
   pair_type ("while",
     "-*- texinfo -*-\n\
-@deffn Keyword while\n\
+@deftypefn {Keyword} {} while\n\
 Begin a while loop.\n\
 @seealso{do}\n\
-@end deffn"),
+@end deftypefn"),
 };
 
 // Return a copy of the operator or keyword names.
 static string_vector
 names (const map_type& lst)
 {
   string_vector retval (lst.size ());
   int j = 0;
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1028,17 +1028,17 @@ If @code{keyboard} is invoked without ar
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (echo, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} echo options\n\
+@deftypefn {Command} {} echo options\n\
 Control whether commands are displayed as they are executed.  Valid\n\
 options are:\n\
 \n\
 @table @code\n\
 @item on\n\
 Enable echoing of commands as they are executed in script files.\n\
 \n\
 @item off\n\
@@ -1050,17 +1050,17 @@ functions.\n\
 \n\
 @item off all\n\
 Disable echoing of commands as they are executed in script files and\n\
 functions.\n\
 @end table\n\
 \n\
 @noindent\n\
 With no arguments, @code{echo} toggles the current echo state.\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("echo");
 
   if (error_state)
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -549,20 +549,20 @@ find_file_to_load (const std::string& na
 #else /* ! HAVE_HDF5 */
 #define HAVE_HDF5_HELP_STRING "\n\
 HDF5 load and save are not available, as this Octave executable was\n\
 not linked with the HDF5 library."
 #endif /* ! HAVE HDF5 */
 
 DEFUN (load, args, nargout,
   "-*- texinfo -*-\n\
-@deffn  {Command} load file\n\
-@deffnx {Command} load options file\n\
-@deffnx {Command} load options file v1 v2 @dots{}\n\
-@deffnx {Command} S = load(\"options\", \"file\", \"v1\", \"v2\", @dots{})\n\
+@deftypefn {Command} {} load file\n\
+@deftypefnx {Command} {} load options file\n\
+@deftypefnx {Command} {} load options file v1 v2 @dots{}\n\
+@deftypefnx {Command} {} S = load(\"options\", \"file\", \"v1\", \"v2\", @dots{})\n\
 Load the named variables @var{v1}, @var{v2}, @dots{}, from the file\n\
 @var{file}.  If no variables are specified then all variables found in the\n\
 file will be loaded.  As with @code{save}, the list of variables to extract\n\
 can be full names or use a pattern syntax.  The format of the file is\n\
 automatically detected but may be overridden by supplying the appropriate\n\
 option.\n\
 \n\
 If load is invoked using the functional form\n\
@@ -641,17 +641,17 @@ format.\n\
 @itemx -V4\n\
 Force Octave to assume the file is in the binary format written by\n\
 @sc{matlab} version 4.\n\
 \n\
 @item -text\n\
 Force Octave to assume the file is in Octave's text format.\n\
 @end table\n\
 @seealso{save, dlmwrite, csvwrite, fwrite}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("load");
 
   if (error_state)
@@ -1445,20 +1445,20 @@ dump_octave_core (void)
 #else /* ! HAVE_ZLIB */
 #define HAVE_ZLIB_HELP_STRING "\n\
 This option is not available, as this Octave executable was not linked with\n\
 the zlib library."
 #endif /* ! HAVE ZLIB */
 
 DEFUN (save, args, ,
   "-*- texinfo -*-\n\
-@deffn  {Command} save file\n\
-@deffnx {Command} save options file\n\
-@deffnx {Command} save options file @var{v1} @var{v2} @dots{}\n\
-@deffnx {Command} save options file -struct @var{STRUCT} @var{f1} @var{f2} @dots{}\n\
+@deftypefn {Command} {} save file\n\
+@deftypefnx {Command} {} save options file\n\
+@deftypefnx {Command} {} save options file @var{v1} @var{v2} @dots{}\n\
+@deftypefnx {Command} {} save options file -struct @var{STRUCT} @var{f1} @var{f2} @dots{}\n\
 Save the named variables @var{v1}, @var{v2}, @dots{}, in the file\n\
 @var{file}.  The special filename @samp{-} may be used to write\n\
 output to the terminal.  If no variable names are listed, Octave saves\n\
 all the variables in the current scope.  Otherwise, full variable names or\n\
 pattern syntax can be used to specify the variables to save.\n\
 If the @option{-struct} modifier is used, fields @var{f1} @var{f2} @dots{}\n\
 of the scalar structure @var{STRUCT} are saved as if they were variables\n\
 with corresponding names.\n\
@@ -1567,17 +1567,17 @@ The command\n\
 @example\n\
 save -binary data a b*\n\
 @end example\n\
 \n\
 @noindent\n\
 saves the variable @samp{a} and all variables beginning with @samp{b} to\n\
 the file @file{data} in Octave's binary format.\n\
 @seealso{load, default_save_options, dlmread, csvread, fread}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length ();
 
   string_vector argv = args.make_argv ();
 
   if (error_state)
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -549,17 +549,17 @@ octave_history_write_timestamp (void)
   std::string timestamp = now.strftime (Vhistory_timestamp_format_string);
 
   if (! timestamp.empty ())
     command_history::add (timestamp);
 }
 
 DEFUN (edit_history, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} edit_history [@var{first}] [@var{last}]\n\
+@deftypefn {Command} {} edit_history [@var{first}] [@var{last}]\n\
 If invoked with no arguments, @code{edit_history} allows you to edit the\n\
 history list using the editor named by the variable @w{@env{EDITOR}}.  The\n\
 commands to be edited are first copied to a temporary file.  When you\n\
 exit the editor, Octave executes the commands that remain in the file.\n\
 It is often more convenient to use @code{edit_history} to define functions \n\
 rather than attempting to enter them directly on the command line.\n\
 By default, the block of commands is executed as soon as you exit the\n\
 editor.  To avoid executing any commands, simply delete all the lines\n\
@@ -582,17 +582,17 @@ edit_history 13 169\n\
 @end example\n\
 \n\
 @noindent\n\
 only extracts commands 13 through 169.  Specifying a larger number for\n\
 the first command than the last command reverses the list of commands\n\
 before placing them in the buffer to be edited.  If both arguments are\n\
 omitted, the previous command in the history list is used.\n\
 @seealso{run_history}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("edit_history");
 
   if (error_state)
@@ -600,17 +600,17 @@ omitted, the previous command in the his
 
   do_edit_history (argc, argv);
 
   return retval;
 }
 
 DEFUN (history, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} history options\n\
+@deftypefn {Command} {} history options\n\
 If invoked with no arguments, @code{history} displays a list of commands\n\
 that you have executed.  Valid options are:\n\
 \n\
 @table @code\n\
 @item -w @var{file}\n\
 Write the current history to the file @var{file}.  If the name is\n\
 omitted, use the default history file (normally @file{~/.octave_hist}).\n\
 \n\
@@ -625,17 +625,17 @@ Display only the most recent @var{n} lin
 @item -q\n\
 Don't number the displayed lines of history.  This is useful for cutting\n\
 and pasting commands using the X Window System.\n\
 @end table\n\
 \n\
 For example, to display the five most recent commands that you have\n\
 typed without displaying line numbers, use the command\n\
 @kbd{history -q 5}.\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("history");
 
   if (error_state)
@@ -643,21 +643,21 @@ typed without displaying line numbers, u
 
   do_history (argc, argv);
 
   return retval;
 }
 
 DEFUN (run_history, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} run_history [@var{first}] [@var{last}]\n\
+@deftypefn {Command} {} run_history [@var{first}] [@var{last}]\n\
 Similar to @code{edit_history}, except that the editor is not invoked,\n\
 and the commands are simply executed as they appear in the history list.\n\
 @seealso{edit_history}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("run_history");
 
   if (error_state)
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -413,34 +413,34 @@ open_diary_file (void)
   external_diary_file.open (diary_file.c_str (), std::ios::app);
 
   if (! external_diary_file)
     error ("diary: can't open diary file `%s'", diary_file.c_str ());
 }
 
 DEFUN (diary, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} diary options\n\
+@deftypefn {Command} {} diary options\n\
 Record a list of all commands @emph{and} the output they produce, mixed\n\
 together just as you see them on your terminal.  Valid options are:\n\
 \n\
 @table @code\n\
 @item on\n\
 Start recording your session in a file called @file{diary} in your\n\
 current working directory.\n\
 \n\
 @item off\n\
 Stop recording your session in the diary file.\n\
 \n\
 @item @var{file}\n\
 Record your session in the file named @var{file}.\n\
 @end table\n\
 \n\
 With no arguments, @code{diary} toggles the current diary state.\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("diary");
 
   if (error_state)
@@ -484,23 +484,23 @@ With no arguments, @code{diary} toggles 
       break;
     }
 
   return retval;
 }
 
 DEFUN (more, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} more\n\
-@deffnx {Command} more on\n\
-@deffnx {Command} more off\n\
+@deftypefn {Command} {} more\n\
+@deftypefnx {Command} {} more on\n\
+@deftypefnx {Command} {} more off\n\
 Turn output pagination on or off.  Without an argument, @code{more}\n\
 toggles the current state.\n\
 The current state can be determined via @code{page_screen_output}.\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("more");
 
   if (error_state)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -3727,18 +3727,18 @@ set_format_style (int argc, const string
     {
       init_format_state ();
       set_output_prec_and_fw (5, 10);
     }
 }
 
 DEFUN (format, args, ,
   "-*- texinfo -*-\n\
-@deffn  {Command} format\n\
-@deffnx {Command} format options\n\
+@deftypefn {Command} {} format\n\
+@deftypefnx {Command} {} format options\n\
 Reset or specify the format of the output produced by @code{disp} and\n\
 Octave's normal echoing mechanism.  This command only affects the display\n\
 of numbers but not how they are stored or computed.  To change the internal\n\
 representation from the default double use one of the conversion functions\n\
 such as @code{single}, @code{uint8}, @code{int64}, etc.\n\
 \n\
 By default, Octave displays 5 significant digits in a human readable form\n\
 (option @samp{short} paired with @samp{loose} format for matrices).\n\
@@ -3892,17 +3892,17 @@ The following two options affect the dis
 @item compact\n\
 Remove extra blank space around column number labels producing more compact\n\
 output with more data per page.\n\
 \n\
 @item loose\n\
 Insert blank lines above and below column number labels to produce a more\n\
 readable output with less data per page.  (default).\n\
 @end table\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("format");
 
   if (error_state)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -2235,17 +2235,17 @@ do_matlab_compatible_clear (const string
           print_usage (); \
           return retval; \
         } \
     } \
   while (0)
 
 DEFUN (clear, args, ,
   "-*- texinfo -*-\n\
-@deffn {Command} clear [options] pattern @dots{}\n\
+@deftypefn {Command} {} clear [options] pattern @dots{}\n\
 Delete the names matching the given patterns from the symbol table.  The\n\
 pattern may contain the following special characters:\n\
 \n\
 @table @code\n\
 @item ?\n\
 Match any single character.\n\
 \n\
 @item *\n\
@@ -2300,17 +2300,17 @@ Clears the local variable names.\n\
 Clears the class structure table and clears all objects.\n\
 \n\
 @item -regexp, -r\n\
 The arguments are treated as regular expressions as any variables that\n\
 match will be cleared.\n\
 @end table\n\
 With the exception of @code{exclusive}, all long options can be used \n\
 without the dash as well.\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
   if (! error_state)
