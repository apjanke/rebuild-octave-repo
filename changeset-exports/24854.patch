# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1520613777 18000
#      Fri Mar 09 11:42:57 2018 -0500
# Node ID 32671b14ed7b3e8cdb7c1b60cf4516c113974e68
# Parent  1e207bd05b5d35c64c96141c5809747aee6bbde5
use INTEGER*4 in ranlib functions (bug #51961)

Until now we have relied on proper compiler flag settings to compile
these files so that Fortran integer variables are 32-bits wide.
Instead, we now use the non-standard but almost universally available
INTEGER*4 declaration.

* advnst.f, genmn.f, genmul.f, genprm.f, getcgn.f, getsd.f, ignbin.f,
ignlgi.f, ignnbn.f, ignpoi.f, ignuin.f, initgn.f, inrgcm.f, lennob.f,
mltmod.f, phrtsd.f, ranf.f, setall.f, setant.f, setgmn.f, setsd.f,
sexpo.f, snorm.f: Declare all integer variables as INTEGER*4. This
makes the parameters match prototypes in lo-ranlib-proto.h and ensures
that the generators work as intended (no conversions between 8-bit and
4-bit integer values, for example).

* wrap.f: Provide types for external functions.

diff --git a/liboctave/external/ranlib/advnst.f b/liboctave/external/ranlib/advnst.f
--- a/liboctave/external/ranlib/advnst.f
+++ b/liboctave/external/ranlib/advnst.f
@@ -18,35 +18,35 @@ C
 C                              Arguments
 C
 C
 C     K -> The generator is advanced by2^K values
 C                                   INTEGER K
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER k
+      INTEGER*4 k
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g,i,ib1,ib2
+      INTEGER*4 g,i,ib1,ib2
 C     ..
 C     .. External Functions ..
-      INTEGER mltmod
+      INTEGER*4 mltmod
       LOGICAL qrgnin
       EXTERNAL mltmod,qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn,setsd
 C     ..
 C     .. Common blocks ..
       COMMON /globe/m1,m2,a1,a2,a1w,a2w,a1vw,a2vw,ig1,ig2,lg1,lg2,cg1,
diff --git a/liboctave/external/ranlib/genmn.f b/liboctave/external/ranlib/genmn.f
--- a/liboctave/external/ranlib/genmn.f
+++ b/liboctave/external/ranlib/genmn.f
@@ -34,17 +34,17 @@ C
 C     3) trans(A)E + MEANV ~ N(MEANV,COVM)
 C
 C**********************************************************************
 C     .. Array Arguments ..
       REAL parm(*),work(*),x(*)
 C     ..
 C     .. Local Scalars ..
       REAL ae
-      INTEGER i,icount,j,p
+      INTEGER*4 i,icount,j,p
 C     ..
 C     .. External Functions ..
       REAL snorm
       EXTERNAL snorm
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC int
 C     ..
diff --git a/liboctave/external/ranlib/genmul.f b/liboctave/external/ranlib/genmul.f
--- a/liboctave/external/ranlib/genmul.f
+++ b/liboctave/external/ranlib/genmul.f
@@ -34,28 +34,28 @@ C     Algorithm from page 559 of
 C
 C     Devroye, Luc
 C
 C     Non-Uniform Random Variate Generation.  Springer-Verlag,
 C     New York, 1986.
 C
 C**********************************************************************
 C     .. Scalar Arguments ..
-      INTEGER n,ncat
+      INTEGER*4 n,ncat
 C     ..
 C     .. Array Arguments ..
       REAL p(*)
-      INTEGER ix(*)
+      INTEGER*4 ix(*)
 C     ..
 C     .. Local Scalars ..
       REAL prob,ptot,sum
-      INTEGER i,icat,ntot
+      INTEGER*4 i,icat,ntot
 C     ..
 C     .. External Functions ..
-      INTEGER ignbin
+      INTEGER*4 ignbin
       EXTERNAL ignbin
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC abs
 C     ..
 C     .. Executable Statements ..
 
 C     Check Arguments
diff --git a/liboctave/external/ranlib/genprm.f b/liboctave/external/ranlib/genprm.f
--- a/liboctave/external/ranlib/genprm.f
+++ b/liboctave/external/ranlib/genprm.f
@@ -12,26 +12,26 @@ C     IARRAY <--> On output IARRAY is a 
 C                 value on input
 C                         INTEGER IARRAY( LARRAY )
 C
 C     LARRAY <--> Length of IARRAY
 C                         INTEGER LARRAY
 C
 C**********************************************************************
 C     .. Scalar Arguments ..
-      INTEGER larray
+      INTEGER*4 larray
 C     ..
 C     .. Array Arguments ..
-      INTEGER iarray(larray)
+      INTEGER*4 iarray(larray)
 C     ..
 C     .. Local Scalars ..
-      INTEGER i,itmp,iwhich
+      INTEGER*4 i,itmp,iwhich
 C     ..
 C     .. External Functions ..
-      INTEGER ignuin
+      INTEGER*4 ignuin
       EXTERNAL ignuin
 C     ..
 C     .. Executable Statements ..
       DO 10,i = 1,larray
           iwhich = ignuin(i,larray)
           itmp = iarray(iwhich)
           iarray(iwhich) = iarray(i)
           iarray(i) = itmp
diff --git a/liboctave/external/ranlib/getcgn.f b/liboctave/external/ranlib/getcgn.f
--- a/liboctave/external/ranlib/getcgn.f
+++ b/liboctave/external/ranlib/getcgn.f
@@ -1,27 +1,27 @@
       SUBROUTINE getcgn(g)
-      INTEGER g
+      INTEGER*4 g
 C**********************************************************************
 C
 C      SUBROUTINE GETCGN(G)
 C                         Get GeNerator
 C
 C     Returns in G the number of the current random number generator
 C
 C
 C                              Arguments
 C
 C
 C     G <-- Number of the current random number generator (1..32)
 C                    INTEGER G
 C
 C**********************************************************************
 C
-      INTEGER curntg,numg
+      INTEGER*4 curntg,numg
       SAVE curntg
       PARAMETER (numg=32)
       DATA curntg/1/
 C
       g = curntg
       RETURN
 
       ENTRY setcgn(g)
diff --git a/liboctave/external/ranlib/getsd.f b/liboctave/external/ranlib/getsd.f
--- a/liboctave/external/ranlib/getsd.f
+++ b/liboctave/external/ranlib/getsd.f
@@ -21,32 +21,32 @@ C
 C     ISEED1 <- First integer seed of generator G
 C                                   INTEGER ISEED1
 C
 C     ISEED2 <- Second integer seed of generator G
 C                                   INTEGER ISEED1
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER iseed1,iseed2
+      INTEGER*4 iseed1,iseed2
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g
+      INTEGER*4 g
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnin
       EXTERNAL qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn
 C     ..
diff --git a/liboctave/external/ranlib/ignbin.f b/liboctave/external/ranlib/ignbin.f
--- a/liboctave/external/ranlib/ignbin.f
+++ b/liboctave/external/ranlib/ignbin.f
@@ -1,12 +1,12 @@
-      INTEGER FUNCTION ignbin(n,pp)
+      INTEGER*4 FUNCTION ignbin(n,pp)
 C**********************************************************************
 C
-C     INTEGER FUNCTION IGNBIN( N, PP )
+C     INTEGER*4 FUNCTION IGNBIN( N, PP )
 C
 C                    GENerate BINomial random deviate
 C
 C
 C                              Function
 C
 C
 C     Generates a single random deviate from a binomial
@@ -146,22 +146,22 @@ C***************************************
 C
 C
 C
 C*****DETERMINE APPROPRIATE ALGORITHM AND WHETHER SETUP IS NECESSARY
 C
 C     ..
 C     .. Scalar Arguments ..
       REAL pp
-      INTEGER n
+      INTEGER*4 n
 C     ..
 C     .. Local Scalars ..
       REAL al,alv,amaxp,c,f,f1,f2,ffm,fm,g,p,p1,p2,p3,p4,psave,q,qn,r,u,
      +     v,w,w2,x,x1,x2,xl,xll,xlr,xm,xnp,xnpq,xr,ynorm,z,z2
-      INTEGER i,ix,ix1,k,m,mp,nsave
+      INTEGER*4 i,ix,ix1,k,m,mp,nsave
 C     ..
 C     .. External Functions ..
       REAL ranf
       EXTERNAL ranf
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC abs,alog,amin1,iabs,int,sqrt
 C     JJV ..
diff --git a/liboctave/external/ranlib/ignlgi.f b/liboctave/external/ranlib/ignlgi.f
--- a/liboctave/external/ranlib/ignlgi.f
+++ b/liboctave/external/ranlib/ignlgi.f
@@ -1,39 +1,39 @@
-      INTEGER FUNCTION ignlgi()
+      INTEGER*4 FUNCTION ignlgi()
 C**********************************************************************
 C
-C     INTEGER FUNCTION IGNLGI()
+C     INTEGER*4 FUNCTION IGNLGI()
 C               GeNerate LarGe Integer
 C
 C     Returns a random integer following a uniform distribution over
 C     (1, 2147483562) using the current generator.
 C
 C     This is a transcription from Pascal to Fortran of routine
 C     Random from the paper
 C
 C     L'Ecuyer, P. and Cote, S. "Implementing a Random Number Package
 C     with Splitting Facilities." ACM Transactions on Mathematical
 C     Software, 17:98-111 (1991)
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER curntg,k,s1,s2,z
+      INTEGER*4 curntg,k,s1,s2,z
       LOGICAL qqssd
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnin
       EXTERNAL qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn,inrgcm,rgnqsd,setall
diff --git a/liboctave/external/ranlib/ignnbn.f b/liboctave/external/ranlib/ignnbn.f
--- a/liboctave/external/ranlib/ignnbn.f
+++ b/liboctave/external/ranlib/ignnbn.f
@@ -1,12 +1,12 @@
-      INTEGER FUNCTION ignnbn(n,p)
+      INTEGER*4 FUNCTION ignnbn(n,p)
 C**********************************************************************
 C
-C     INTEGER FUNCTION IGNNBN( N, P )
+C     INTEGER*4 FUNCTION IGNNBN( N, P )
 C
 C                GENerate Negative BiNomial random deviate
 C
 C
 C                              Function
 C
 C
 C     Generates a single random deviate from a negative binomial
@@ -35,26 +35,26 @@ C     Devroye, Luc
 C
 C     Non-Uniform Random Variate Generation.  Springer-Verlag,
 C     New York, 1986.
 C
 C**********************************************************************
 C     ..
 C     .. Scalar Arguments ..
       REAL p
-      INTEGER n
+      INTEGER*4 n
 C     ..
 C     .. Local Scalars ..
       REAL y,a,r
 C     ..
 C     .. External Functions ..
 C     JJV changed to call SGAMMA directly
 C     REAL gengam
       REAL sgamma
-      INTEGER ignpoi
+      INTEGER*4 ignpoi
 C      EXTERNAL gengam,ignpoi
       EXTERNAL sgamma,ignpoi
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC real
 C     ..
 C     .. Executable Statements ..
 C     Check Arguments
diff --git a/liboctave/external/ranlib/ignpoi.f b/liboctave/external/ranlib/ignpoi.f
--- a/liboctave/external/ranlib/ignpoi.f
+++ b/liboctave/external/ranlib/ignpoi.f
@@ -1,12 +1,12 @@
-      INTEGER FUNCTION ignpoi(mu)
+      INTEGER*4 FUNCTION ignpoi(mu)
 C**********************************************************************
 C
-C     INTEGER FUNCTION IGNPOI( MU )
+C     INTEGER*4 FUNCTION IGNPOI( MU )
 C
 C                    GENerate POIsson random deviate
 C
 C
 C                              Function
 C
 C
 C     Generates a single random deviate from a Poisson
@@ -56,17 +56,17 @@ C               AHRENS, J.H. AND DIETER,
 C               COMPUTER GENERATION OF POISSON DEVIATES                C
 C               FROM MODIFIED NORMAL DISTRIBUTIONS.                    C
 C               ACM TRANS. MATH. SOFTWARE, 8,2 (JUNE 1982), 163 - 179. C
 C                                                                      C
 C     (SLIGHTLY MODIFIED VERSION OF THE PROGRAM IN THE ABOVE ARTICLE)  C
 C                                                                      C
 C**********************************************************************C
 C
-C      INTEGER FUNCTION IGNPOI(IR,MU)
+C      INTEGER*4 FUNCTION IGNPOI(IR,MU)
 C
 C     INPUT:  IR=CURRENT STATE OF BASIC RANDOM NUMBER GENERATOR
 C             MU=MEAN MU OF THE POISSON DISTRIBUTION
 C     OUTPUT: IGNPOI=SAMPLE FROM THE POISSON-(MU)-DISTRIBUTION
 C
 C
 C
 C     MUPREV=PREVIOUS MU, MUOLD=MU AT LAST EXECUTION OF STEP P OR CASE B
@@ -79,17 +79,17 @@ C     SEPARATION OF CASES A AND B
 C
 C     .. Scalar Arguments ..
       REAL mu
 C     ..
 C     .. Local Scalars ..
       REAL a0,a1,a2,a3,a4,a5,a6,a7,b1,b2,c,c0,c1,c2,c3,d,del,difmuk,e,
      +     fk,fx,fy,g,muold,muprev,omega,p,p0,px,py,q,s,t,u,v,x,xx
 C     JJV I added a variable 'll' here - it is the 'l' for CASE A
-      INTEGER j,k,kflag,l,ll,m
+      INTEGER*4 j,k,kflag,l,ll,m
 C     ..
 C     .. Local Arrays ..
       REAL fact(10),pp(35)
 C     ..
 C     .. External Functions ..
       REAL ranf,sexpo,snorm
       EXTERNAL ranf,sexpo,snorm
 C     ..
diff --git a/liboctave/external/ranlib/ignuin.f b/liboctave/external/ranlib/ignuin.f
--- a/liboctave/external/ranlib/ignuin.f
+++ b/liboctave/external/ranlib/ignuin.f
@@ -1,12 +1,12 @@
-      INTEGER FUNCTION ignuin(low,high)
+      INTEGER*4 FUNCTION ignuin(low,high)
 C**********************************************************************
 C
-C     INTEGER FUNCTION IGNUIN( LOW, HIGH )
+C     INTEGER*4 FUNCTION IGNUIN( LOW, HIGH )
 C
 C               GeNerate Uniform INteger
 C
 C
 C                              Function
 C
 C
 C     Generates an integer uniformly distributed between LOW and HIGH.
@@ -28,30 +28,30 @@ C
 C     If (HIGH-LOW) > 2,147,483,561 prints error message on * unit and
 C     stops the program.
 C
 C**********************************************************************
 
 C     IGNLGI generates integers between 1 and 2147483562
 C     MAXNUM is 1 less than maximum generable value
 C     .. Parameters ..
-      INTEGER maxnum
+      INTEGER*4 maxnum
       PARAMETER (maxnum=2147483561)
       CHARACTER*(*) err1,err2
       PARAMETER (err1='LOW > HIGH in IGNUIN',
      +          err2=' ( HIGH - LOW ) > 2,147,483,561 in IGNUIN')
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER high,low
+      INTEGER*4 high,low
 C     ..
 C     .. Local Scalars ..
-      INTEGER err,ign,maxnow,range,ranp1
+      INTEGER*4 err,ign,maxnow,range,ranp1
 C     ..
 C     .. External Functions ..
-      INTEGER ignlgi
+      INTEGER*4 ignlgi
       EXTERNAL ignlgi
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC mod
 C     ..
 C     .. Executable Statements ..
       IF (.NOT. (low.GT.high)) GO TO 10
       err = 1
diff --git a/liboctave/external/ranlib/initgn.f b/liboctave/external/ranlib/initgn.f
--- a/liboctave/external/ranlib/initgn.f
+++ b/liboctave/external/ranlib/initgn.f
@@ -24,36 +24,36 @@ C          ISDTYP =  0  => sets the seed
 C                          the current block
 C          ISDTYP =  1  => sets the seeds to the first value of
 C                          the next block
 C
 C                                   INTEGER ISDTYP
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER isdtyp
+      INTEGER*4 isdtyp
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g
+      INTEGER*4 g
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnin
-      INTEGER mltmod
+      INTEGER*4 mltmod
       EXTERNAL qrgnin,mltmod
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn
 C     ..
 C     .. Common blocks ..
       COMMON /globe/m1,m2,a1,a2,a1w,a2w,a1vw,a2vw,ig1,ig2,lg1,lg2,cg1,
      +       cg2,qanti
diff --git a/liboctave/external/ranlib/inrgcm.f b/liboctave/external/ranlib/inrgcm.f
--- a/liboctave/external/ranlib/inrgcm.f
+++ b/liboctave/external/ranlib/inrgcm.f
@@ -9,29 +9,29 @@ C                              Function
 C
 C
 C     Initializes common area  for random number  generator.  This saves
 C     the  nuisance  of  a  BLOCK DATA  routine  and the  difficulty  of
 C     assuring that the routine is loaded with the other routines.
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER i
+      INTEGER*4 i
       LOGICAL qdum
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnsn
       EXTERNAL qrgnsn
 C     ..
 C     .. Common blocks ..
       COMMON /globe/m1,m2,a1,a2,a1w,a2w,a1vw,a2vw,ig1,ig2,lg1,lg2,cg1,
diff --git a/liboctave/external/ranlib/lennob.f b/liboctave/external/ranlib/lennob.f
--- a/liboctave/external/ranlib/lennob.f
+++ b/liboctave/external/ranlib/lennob.f
@@ -1,13 +1,13 @@
-      INTEGER FUNCTION lennob(string)
-      IMPLICIT INTEGER (a-p,r-z),LOGICAL (q)
+      INTEGER*4 FUNCTION lennob(string)
+      IMPLICIT INTEGER*4 (a-p,r-z),LOGICAL (q)
 C**********************************************************************
 C
-C     INTEGER FUNCTION LENNOB( STRING )
+C     INTEGER*4 FUNCTION LENNOB( STRING )
 C                LENgth NOt counting trailing Blanks
 C
 C
 C                              Function
 C
 C
 C     Returns the length of STRING up to and including the last
 C     non-blank character.
diff --git a/liboctave/external/ranlib/mltmod.f b/liboctave/external/ranlib/mltmod.f
--- a/liboctave/external/ranlib/mltmod.f
+++ b/liboctave/external/ranlib/mltmod.f
@@ -1,12 +1,12 @@
-      INTEGER FUNCTION mltmod(a,s,m)
+      INTEGER*4 FUNCTION mltmod(a,s,m)
 C**********************************************************************
 C
-C     INTEGER FUNCTION MLTMOD(A,S,M)
+C     INTEGER*4 FUNCTION MLTMOD(A,S,M)
 C
 C                    Returns (A*S) MOD M
 C
 C     This is a transcription from Pascal to Fortran of routine
 C     MULtMod_Decompos from the paper
 C
 C     L'Ecuyer, P. and Cote, S. "Implementing a Random Number Package
 C     with Splitting Facilities." ACM Transactions on Mathematical
@@ -16,24 +16,24 @@ C
 C                              Arguments
 C
 C
 C     A, S, M  -->
 C                         INTEGER A,S,M
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER h
+      INTEGER*4 h
       PARAMETER (h=32768)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER a,m,s
+      INTEGER*4 a,m,s
 C     ..
 C     .. Local Scalars ..
-      INTEGER a0,a1,k,p,q,qh,rh
+      INTEGER*4 a0,a1,k,p,q,qh,rh
 C     ..
 C     .. Executable Statements ..
 C
 C     H = 2**((b-2)/2) where b = 32 because we are using a 32 bit
 C      machine. On a different machine recompute H
 C
       IF (.NOT. (a.LE.0.OR.a.GE.m.OR.s.LE.0.OR.s.GE.m)) GO TO 10
       WRITE (*,*) ' A, M, S out of order in MLTMOD - ABORT!'
diff --git a/liboctave/external/ranlib/phrtsd.f b/liboctave/external/ranlib/phrtsd.f
--- a/liboctave/external/ranlib/phrtsd.f
+++ b/liboctave/external/ranlib/phrtsd.f
@@ -34,33 +34,33 @@ C     Generated seed values will fall in
 C     (1..1,073,741,824)
 C
 C**********************************************************************
 C     .. Parameters ..
       CHARACTER*(*) table
       PARAMETER (table='abcdefghijklmnopqrstuvwxyz'//
      +          'ABCDEFGHIJKLMNOPQRSTUVWXYZ'//'0123456789'//
      +          '!@#$%^&*()_+[];:''"<>?,./')
-      INTEGER twop30
+      INTEGER*4 twop30
       PARAMETER (twop30=1073741824)
-      INTEGER sixty4
+      INTEGER*4 sixty4
       PARAMETER (sixty4=64)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER seed1,seed2
+      INTEGER*4 seed1,seed2
       CHARACTER phrase* (*)
 C     ..
 C     .. Local Scalars ..
-      INTEGER i,ichr,j,lphr,idxval
+      INTEGER*4 i,ichr,j,lphr,idxval
 C     ..
 C     .. Local Arrays ..
-      INTEGER shift(0:4),values(5)
+      INTEGER*4 shift(0:4),values(5)
 C     ..
 C     .. External Functions ..
-      INTEGER lennob
+      INTEGER*4 lennob
       EXTERNAL lennob
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC index,mod
 C     ..
 C     JJV added Save statement for variable in Data statement
 C     .. Save statements ..
       SAVE shift
diff --git a/liboctave/external/ranlib/ranf.f b/liboctave/external/ranlib/ranf.f
--- a/liboctave/external/ranlib/ranf.f
+++ b/liboctave/external/ranlib/ranf.f
@@ -12,17 +12,17 @@ C     This is a transcription from Pasca
 C     Uniform_01 from the paper
 C
 C     L'Ecuyer, P. and Cote, S. "Implementing a Random Number Package
 C     with Splitting Facilities." ACM Transactions on Mathematical
 C     Software, 17:98-111 (1991)
 C
 C**********************************************************************
 C     .. External Functions ..
-      INTEGER ignlgi
+      INTEGER*4 ignlgi
       EXTERNAL ignlgi
 C     ..
 C     .. Executable Statements ..
 C
 C     4.656613057E-10 is 1/M1  M1 is set in a data statement in IGNLGI
 C      and is currently 2147483563. If M1 changes, change this also.
 C
       ranf = ignlgi()*4.656613057E-10
diff --git a/liboctave/external/ranlib/setall.f b/liboctave/external/ranlib/setall.f
--- a/liboctave/external/ranlib/setall.f
+++ b/liboctave/external/ranlib/setall.f
@@ -22,37 +22,37 @@ C
 C     ISEED1 -> First of two integer seeds
 C                                   INTEGER ISEED1
 C
 C     ISEED2 -> Second of two integer seeds
 C                                   INTEGER ISEED1
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER iseed1,iseed2
+      INTEGER*4 iseed1,iseed2
       LOGICAL qssd
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g,ocgn
+      INTEGER*4 g,ocgn
       LOGICAL qqssd
 C     ..
 C     .. External Functions ..
-      INTEGER mltmod
+      INTEGER*4 mltmod
       LOGICAL qrgnin
       EXTERNAL mltmod,qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn,initgn,inrgcm,setcgn
 C     ..
 C     .. Common blocks ..
       COMMON /globe/m1,m2,a1,a2,a1w,a2w,a1vw,a2vw,ig1,ig2,lg1,lg2,cg1,
diff --git a/liboctave/external/ranlib/setant.f b/liboctave/external/ranlib/setant.f
--- a/liboctave/external/ranlib/setant.f
+++ b/liboctave/external/ranlib/setant.f
@@ -24,32 +24,32 @@ C                              Arguments
 C
 C
 C     QVALUE -> .TRUE. if generator G is to generating antithetic
 C                    values, otherwise .FALSE.
 C                                   LOGICAL QVALUE
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
       LOGICAL qvalue
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g
+      INTEGER*4 g
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnin
       EXTERNAL qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn
 C     ..
diff --git a/liboctave/external/ranlib/setgmn.f b/liboctave/external/ranlib/setgmn.f
--- a/liboctave/external/ranlib/setgmn.f
+++ b/liboctave/external/ranlib/setgmn.f
@@ -43,24 +43,24 @@ C                of COVM).
 C                1 : 1                - P
 C                2 : P + 1            - MEANV
 C                P+2 : P*(P+3)/2 + 1  - Cholesky decomposition of COVM
 C                                             REAL PARM(P*(P+3)/2 + 1)
 C
 C**********************************************************************
 C     .. Scalar Arguments ..
 C      INTEGER p
-      INTEGER p, ldcovm
+      INTEGER*4 p, ldcovm
 C     ..
 C     .. Array Arguments ..
 C      REAL covm(p,p),meanv(p),parm(p* (p+3)/2+1)
       REAL covm(ldcovm,p),meanv(p),parm(p* (p+3)/2+1)
 C     ..
 C     .. Local Scalars ..
-      INTEGER i,icount,info,j
+      INTEGER*4 i,icount,info,j
 C     ..
 C     .. External Subroutines ..
       EXTERNAL spotrf
 C     ..
 C     .. Executable Statements ..
 C
 C
 C     TEST THE INPUT
diff --git a/liboctave/external/ranlib/setsd.f b/liboctave/external/ranlib/setsd.f
--- a/liboctave/external/ranlib/setsd.f
+++ b/liboctave/external/ranlib/setsd.f
@@ -21,32 +21,32 @@ C
 C     ISEED1 -> First integer seed
 C                                   INTEGER ISEED1
 C
 C     ISEED2 -> Second integer seed
 C                                   INTEGER ISEED1
 C
 C**********************************************************************
 C     .. Parameters ..
-      INTEGER numg
+      INTEGER*4 numg
       PARAMETER (numg=32)
 C     ..
 C     .. Scalar Arguments ..
-      INTEGER iseed1,iseed2
+      INTEGER*4 iseed1,iseed2
 C     ..
 C     .. Scalars in Common ..
-      INTEGER a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
+      INTEGER*4 a1,a1vw,a1w,a2,a2vw,a2w,m1,m2
 C     ..
 C     .. Arrays in Common ..
-      INTEGER cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
+      INTEGER*4 cg1(numg),cg2(numg),ig1(numg),ig2(numg),lg1(numg),
      +        lg2(numg)
       LOGICAL qanti(numg)
 C     ..
 C     .. Local Scalars ..
-      INTEGER g
+      INTEGER*4 g
 C     ..
 C     .. External Functions ..
       LOGICAL qrgnin
       EXTERNAL qrgnin
 C     ..
 C     .. External Subroutines ..
       EXTERNAL getcgn,initgn
 C     ..
diff --git a/liboctave/external/ranlib/sexpo.f b/liboctave/external/ranlib/sexpo.f
--- a/liboctave/external/ranlib/sexpo.f
+++ b/liboctave/external/ranlib/sexpo.f
@@ -25,17 +25,17 @@ C***************************************
 C
 C
 C     Q(N) = SUM(ALOG(2.0)**K/K!)    K=1,..,N ,      THE HIGHEST N
 C     (HERE 8) IS DETERMINED BY Q(N)=1.0 WITHIN STANDARD PRECISION
 C
 C     JJV added a Save statement for q (in Data statement)
 C     .. Local Scalars ..
       REAL a,q1,u,umin,ustar
-      INTEGER i
+      INTEGER*4 i
 C     ..
 C     .. Local Arrays ..
       REAL q(8)
 C     ..
 C     .. External Functions ..
       REAL ranf
       EXTERNAL ranf
 C     ..
diff --git a/liboctave/external/ranlib/snorm.f b/liboctave/external/ranlib/snorm.f
--- a/liboctave/external/ranlib/snorm.f
+++ b/liboctave/external/ranlib/snorm.f
@@ -24,17 +24,17 @@ C                                       
 C**********************************************************************C
 C
 C
 C     THE DEFINITIONS OF THE CONSTANTS A(K), D(K), T(K) AND
 C     H(K) ARE ACCORDING TO THE ABOVEMENTIONED ARTICLE
 C
 C     .. Local Scalars ..
       REAL aa,s,tt,u,ustar,w,y
-      INTEGER i
+      INTEGER*4 i
 C     ..
 C     .. Local Arrays ..
       REAL a(32),d(31),h(31),t(31)
 C     ..
 C     .. External Functions ..
       REAL ranf
       EXTERNAL ranf
 C     ..
diff --git a/liboctave/external/ranlib/wrap.f b/liboctave/external/ranlib/wrap.f
--- a/liboctave/external/ranlib/wrap.f
+++ b/liboctave/external/ranlib/wrap.f
@@ -1,25 +1,35 @@
       subroutine dgennor (av, sd, result)
       double precision av, sd, result
+      real gennor
+      external gennor
       result = gennor (real (av), real (sd))
       return
       end
       subroutine dgenunf (low, high, result)
       double precision low, high, result
+      real genunf
+      external genunf
       result = genunf (real (low), real (high))
       return
       end
       subroutine dgenexp (av, result)
       double precision av, result
+      real genexp
+      external genexp
       result = genexp (real (av))
       return
       end
       subroutine dgengam (a, r, result)
       double precision a, r, result
+      real gengam
+      external gengam
       result = gengam (real (a), real (r))
       return
       end
       subroutine dignpoi (mu, result)
       double precision mu, result
+      integer*4 ignpoi
+      external ignpoi
       result = ignpoi (real (mu))
       return
       end
