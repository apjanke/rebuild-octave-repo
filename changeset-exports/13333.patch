# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302019397 -7200
#      Tue Apr 05 18:03:17 2011 +0200
# Node ID 5a6afd0e5213f74b9430a3fa5bee665b3e29c403
# Parent  ff3206f87e4d093d809f1e6f7a83ec786b45605a
Octaves output is being highlighted now.

diff --git a/gui//Quint.pro b/gui//Quint.pro
--- a/gui//Quint.pro
+++ b/gui//Quint.pro
@@ -9,14 +9,16 @@ QT       += core gui webkit
 TARGET = Quint
 TEMPLATE = app
 
 
 SOURCES += main.cpp\
         mainwindow.cpp \
     octaveterminal.cpp \
     clientmanager.cpp \
-    client.cpp
+    client.cpp \
+    terminalhighlighter.cpp
 
 HEADERS  += mainwindow.h \
     octaveterminal.h \
     clientmanager.h \
-    client.h
+    client.h \
+    terminalhighlighter.h
diff --git a/gui//mainwindow.cpp b/gui//mainwindow.cpp
--- a/gui//mainwindow.cpp
+++ b/gui//mainwindow.cpp
@@ -8,18 +8,16 @@
 
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent) {
     showMaximized();
     m_mdiArea = new QMdiArea();
     setCentralWidget(m_mdiArea);
 
     addOctaveTerminal();
-    addOctaveTerminal();
-    addOctaveTerminal();
     loadWebPage("Online Manual", "http://www.gnu.org/software/octave/doc/interpreter/");
     m_mdiArea->setViewMode(QMdiArea::TabbedView);
 }
 
 MainWindow::~MainWindow() {
 
 }
 
diff --git a/gui//octaveterminal.cpp b/gui//octaveterminal.cpp
--- a/gui//octaveterminal.cpp
+++ b/gui//octaveterminal.cpp
@@ -22,16 +22,18 @@ OctaveTerminal::OctaveTerminal(QWidget *
     m_mainToolBar->addWidget(showEnvironmentButton);
 
     m_octaveOutput->setFontFamily("Monospace");
     m_octaveOutput->setReadOnly(true);
 
     blockUserInput();
     connect(m_commandLine, SIGNAL(returnPressed()), this, SLOT(sendCommand()));
     connect(showEnvironmentButton, SIGNAL(clicked()), this, SLOT(showEnvironment()));
+
+    m_terminalHighlighter = new TerminalHighlighter(m_octaveOutput->document());
 }
 
 void OctaveTerminal::sendCommand() {
     QString command = m_commandLine->text();
     m_octaveOutput->setFontUnderline(true);
     m_octaveOutput->append(command);
     command.append("\n");
     m_client->send(command);
diff --git a/gui//octaveterminal.h b/gui//octaveterminal.h
--- a/gui//octaveterminal.h
+++ b/gui//octaveterminal.h
@@ -5,16 +5,17 @@
 #include <QLineEdit>
 #include <QTextBrowser>
 #include <QAction>
 #include <QMenuBar>
 #include <QMenu>
 #include <QToolBar>
 
 #include "client.h"
+#include "terminalhighlighter.h"
 
 class OctaveTerminal : public QMdiSubWindow {
     Q_OBJECT
 public:
     explicit OctaveTerminal(QWidget *parent = 0);
 
 signals:
 
@@ -30,11 +31,12 @@ protected slots:
     void fetchDataFromClient();
     void fetchErrorFromClient();
 
 private:
     QToolBar *m_mainToolBar;
     QTextBrowser *m_octaveOutput;
     QLineEdit *m_commandLine;
     Client *m_client;
+    TerminalHighlighter *m_terminalHighlighter;
 };
 
 #endif // OCTAVETERMINAL_H
diff --git a/gui//terminalhighlighter.cpp b/gui//terminalhighlighter.cpp
new file mode 100644
--- /dev/null
+++ b/gui//terminalhighlighter.cpp
@@ -0,0 +1,48 @@
+#include "terminalhighlighter.h"
+#include <QtGui>
+
+TerminalHighlighter::TerminalHighlighter(QTextDocument *parent)
+    : QSyntaxHighlighter(parent)
+{
+    HighlightingRule rule;
+
+    keywordFormat.setForeground(Qt::darkRed);
+    keywordFormat.setFontWeight(QFont::Bold);
+    QStringList keywordPatterns;
+    keywordPatterns << "\\bOctave\\b" << "\\bGNU\\b";
+
+    foreach (const QString &pattern, keywordPatterns) {
+        rule.pattern = QRegExp(pattern);
+        rule.format = keywordFormat;
+        highlightingRules.append(rule);
+    }
+
+    numberFormat.setForeground(Qt::darkGreen);
+    numberFormat.setFontWeight(QFont::Bold);
+    rule.pattern = QRegExp("\\b[0-9\\.]+\\b");
+    rule.format = numberFormat;
+    highlightingRules.append(rule);
+
+    urlFormat.setForeground(Qt::darkBlue);
+    rule.pattern = QRegExp("\\bhttp://[^\\s]+\\b");
+    rule.format = urlFormat;
+    highlightingRules.append(rule);
+
+    quotationFormat.setForeground(Qt::darkGreen);
+    rule.pattern = QRegExp("\".*\"");
+    rule.format = quotationFormat;
+    highlightingRules.append(rule);
+}
+
+void TerminalHighlighter::highlightBlock(const QString &text)
+{
+    foreach (const HighlightingRule &rule, highlightingRules) {
+        QRegExp expression(rule.pattern);
+        int index = expression.indexIn(text);
+        while (index >= 0) {
+            int length = expression.matchedLength();
+            setFormat(index, length, rule.format);
+            index = expression.indexIn(text, index + length);
+        }
+    }
+}
diff --git a/gui//terminalhighlighter.h b/gui//terminalhighlighter.h
new file mode 100644
--- /dev/null
+++ b/gui//terminalhighlighter.h
@@ -0,0 +1,28 @@
+#ifndef TERMINALHIGHLIGHTER_H
+#define TERMINALHIGHLIGHTER_H
+
+#include <QSyntaxHighlighter>
+class QTextDocument;
+class TerminalHighlighter : public QSyntaxHighlighter {
+    Q_OBJECT
+
+public:
+    TerminalHighlighter(QTextDocument *parent = 0);
+
+protected:
+    void highlightBlock(const QString &text);
+
+private:
+    struct HighlightingRule {
+        QRegExp pattern;
+        QTextCharFormat format;
+    };
+    QVector<HighlightingRule> highlightingRules;
+
+    QTextCharFormat keywordFormat;
+    QTextCharFormat quotationFormat;
+    QTextCharFormat numberFormat;
+    QTextCharFormat urlFormat;
+};
+
+#endif // TERMINALHIGHLIGHTER_H
