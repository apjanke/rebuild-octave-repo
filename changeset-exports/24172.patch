# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1508797272 14400
#      Mon Oct 23 18:21:12 2017 -0400
# Node ID 90903d9156258cfb0a290840fd69ed17e5957d23
# Parent  1680d425bb386ffcb4e0acd3f716c301b112ff22
improve handling of selection markers in editor

Clear selection markers if cursor moves away from the current
selection.  This also means that the selection markers will be cleared
if the user clicks the margin to set a breakpoint because that also
moves the cursor.

* marker.h (marker::selection): New value for editor_markers enum.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::_indicator_highlight_all,
file_editor_tab::_marker_highlight_all): Delete data members and all uses.
(file_editor_tab::update_lexer_settings): Call
octave_qscintilla::set_selection_marker_color.
(file_editor_tab::handle_double_click): Clear selection markers and
word selection here.  Call show_selection_markers for _edit_area to
show new selection.  Set word selection to new selected word.


* octave-qscintilla.h, octave-qscintilla.cc
(octave_qscintilla::m_selection, octave_qscintilla::m_selection_line,
octave_qscintilla::m_selection_col,
octave_qscintilla::m_indicator_id): New data members.
(octave_qscintilla::set_selection_marker_color): New function.
(octave_qscintilla::set_word_selection): New function.
(octave_qscintilla::show_selection_markers): New function.
(octave_qscintilla::cursor_position_changed): New slot.
(octave_qscintilla::octave_qscintilla): Initialize them.  Initialize
selection marker.  Connect cursor_position_changed to
cursorPositionChanged signal.
(octave_qscintalla::clear_selection_markers): Eliminate arguments.
Change all uses.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -230,28 +230,16 @@ file_editor_tab::file_editor_tab (const 
                                .toString ();
 #else
   _encoding = settings->value ("editor/default_encoding", "UTF-8")
                                .toString ();
 #endif
   _enc_indicator->setText (_encoding);
   // no changes in encoding yet
   _new_encoding = _encoding;
-
-  // indicators
-  _indicator_highlight_all
-        = _edit_area->indicatorDefine (QsciScintilla::StraightBoxIndicator);
-  if (_indicator_highlight_all == -1)
-    _indicator_highlight_all = 1;
-
-  _edit_area->setIndicatorDrawUnder (true, _indicator_highlight_all);
-
-  _marker_highlight_all = _edit_area->markerDefine (QsciScintilla::Minus);
-  if (_marker_highlight_all == -1)
-    _marker_highlight_all = 1;
 }
 
 file_editor_tab::~file_editor_tab (void)
 {
   // Tell all connected markers to self-destruct.
   emit remove_all_breakpoints ();
   emit remove_all_positions ();
 
@@ -798,22 +786,17 @@ file_editor_tab::update_lexer_settings (
   _edit_area->setMarkerForegroundColor (lexer->color (0));
   _edit_area->setMarginsForegroundColor (lexer->color (0));
   _edit_area->setMarginsBackgroundColor (bg);
   _edit_area->setFoldMarginColors (bg,fg);
 
   // color indicator for highlighting all occurrences:
   // applications highlight color with more transparency
   QColor hg = QApplication::palette ().color (QPalette::Highlight);
-  hg.setAlphaF (0.25);
-  _edit_area->setIndicatorForegroundColor (hg, _indicator_highlight_all);
-  _edit_area->setIndicatorOutlineColor (hg, _indicator_highlight_all);
-
-  _edit_area->setMarkerBackgroundColor (hg, _marker_highlight_all);
-  _edit_area->setMarkerForegroundColor (hg, _marker_highlight_all);
+  _edit_area->set_selection_marker_color (hg);
 
   // fix line number width with respect to the font size of the lexer and
   // set the line numbers font depending on the lexers font
   if (settings->value ("editor/showLineNumbers", true).toBool ())
     {
       // Line numbers width
       auto_margin_width ();
 
@@ -2851,21 +2834,23 @@ file_editor_tab::handle_char_added (int)
 // Slot handling a double click into the text area
 void
 file_editor_tab::handle_double_click (int, int, int modifier)
 {
   if (! modifier)
     {
       // double clicks without modifier
       // clear any existing indicators of this type
-      _edit_area->clear_indicator (_indicator_highlight_all,
-                                   _marker_highlight_all);
+      _edit_area->clear_selection_markers ();
 
       if (_highlight_all_occurrences)
         {
+          // Clear any previous selection.
+          _edit_area->set_word_selection ();
+
           // highlighting of all occurrences of the clicked word is enabled
 
           // get the resulting cursor position
           // (required if click was beyond a line ending)
           int line, col;
           _edit_area->getCursorPosition (&line, &col);
 
           // get the word at the cursor (if any)
@@ -2897,32 +2882,29 @@ file_editor_tab::handle_double_click (in
               // loop over all occurrences and set the related indicator
               int oline, ocol;
               int wlen = word.length ();
 
               while (find_result_available)
                 {
                   // get cursor position after having found an occurrence
                   _edit_area->getCursorPosition (&oline, &ocol);
-                  // set the indicator
-                  _edit_area->fillIndicatorRange (oline, ocol - wlen,
-                                                  oline, ocol,
-                                                  _indicator_highlight_all);
-
-                  _edit_area->markerAdd (oline, _marker_highlight_all);
+                  // mark the selection
+                  _edit_area->show_selection_markers (oline, ocol, wlen);
 
                   // find next occurrence
                   find_result_available = _edit_area->findNext ();
                 }
 
               // restore the visible area of the file, the cursor position,
               // and the selection
               _edit_area->setFirstVisibleLine (first_line);
               _edit_area->setCursorPosition (line, col);
               _edit_area->setSelection (line, col - wlen, line, col);
+              _edit_area->set_word_selection (word);
             }
         }
     }
 }
 
 
 QString
 file_editor_tab::get_function_name ()
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -301,15 +301,13 @@ private:
   static bool _cancelled;
 
   int _line_break;
   bool _line_break_comments;
   int _line;
   int _col;
   bool _lines_changed;
   bool _highlight_all_occurrences;
-  int _indicator_highlight_all;
-  int _marker_highlight_all;
   int m_bp_restore_count;
 
 };
 
 #endif
diff --git a/libgui/src/m-editor/marker.h b/libgui/src/m-editor/marker.h
--- a/libgui/src/m-editor/marker.h
+++ b/libgui/src/m-editor/marker.h
@@ -46,17 +46,18 @@ public:
   // is drawn at the back, so big ones should be first.
   enum editor_markers
   {
     breakpoint,
     cond_break,
     unsure_breakpoint,
     bookmark,
     debugger_position,
-    unsure_debugger_position
+    unsure_debugger_position,
+    selection
   };
 
   marker (QsciScintilla *edit_area, int original_linenr,
           editor_markers marker_type, const QString& condition = "");
 
   marker (QsciScintilla *edit_area, int original_linenr,
           editor_markers marker_type, int editor_linenr,
           const QString& condition = "");
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -39,18 +39,21 @@ along with Octave; see the file COPYING.
 #endif
 #include <Qsci/qscilexercpp.h>
 #include <Qsci/qscilexerbash.h>
 #include <Qsci/qscilexerperl.h>
 #include <Qsci/qscilexerbatch.h>
 #include <Qsci/qscilexerdiff.h>
 
 #include <Qsci/qscicommandset.h>
+
 #include <QShortcut>
-#include <QMessageBox>
+
+// FIXME: hardwired marker numbers?
+#include "marker.h"
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
 #include "shortcut-manager.h"
 #include "resource-manager.h"
 
 // Return true if CANDIDATE is a "closing" that matches OPENING,
 // such as "end" or "endif" for "if", or "catch" for "try".
@@ -89,20 +92,24 @@ is_end (const QString& candidate, const 
             retval = true;
         }
     }
 
   return retval;
 }
 
 octave_qscintilla::octave_qscintilla (QWidget *p)
-  : QsciScintilla (p)
+  : QsciScintilla (p), m_word_at_cursor (), m_selection (),
+    m_selection_line (-1), m_selection_col (-1), m_indicator_id (1)
 {
   connect (this, SIGNAL (textChanged (void)), this, SLOT (text_changed (void)));
 
+  connect (this, SIGNAL (cursorPositionChanged (int, int)),
+           this, SLOT (cursor_position_changed (int, int)));
+
   // clear scintilla edit shortcuts that are handled by the editor
   QsciCommandSet *cmd_set = standardCommands ();
 
 #if defined (HAVE_QSCI_VERSION_2_6_0)
   // find () was added in QScintilla 2.6
   cmd_set->find (QsciCommand::SelectionCopy)->setKey (0);
   cmd_set->find (QsciCommand::SelectionCut)->setKey (0);
   cmd_set->find (QsciCommand::Paste)->setKey (0);
@@ -181,20 +188,42 @@ octave_qscintilla::octave_qscintilla (QW
         key = (key ^ Qt::META) | Qt::CTRL;
       else if (static_cast<int> (key | Qt::CTRL) == key)
         key = (key ^ Qt::CTRL) | Qt::META;
 
       cmd_list_mac.at (i)->setAlternateKey (key);
     }
 #endif
 
+  // selection markers
+
+  m_indicator_id = indicatorDefine (QsciScintilla::StraightBoxIndicator);
+  if (m_indicator_id == -1)
+    m_indicator_id = 1;
+
+  setIndicatorDrawUnder (true, m_indicator_id);
+
+  markerDefine (QsciScintilla::Minus, marker::selection);
+
   // init state of undo/redo action for this tab
   emit status_update (isUndoAvailable (), isRedoAvailable ());
 }
 
+void
+octave_qscintilla::set_selection_marker_color (const QColor& c)
+{
+  QColor ic = c;
+  ic.setAlphaF (0.25);
+  setIndicatorForegroundColor (ic, m_indicator_id);
+  setIndicatorOutlineColor (ic, m_indicator_id);
+
+  setMarkerForegroundColor (c, marker::selection);
+  setMarkerBackgroundColor (c, marker::selection);
+}
+
 // context menu requested
 void
 octave_qscintilla::contextMenuEvent (QContextMenuEvent *e)
 {
 #if defined (HAVE_QSCI_VERSION_2_6_0)
   QPoint global_pos, local_pos;                         // the menu's position
   QMenu *context_menu = createStandardContextMenu ();  // standard menu
 
@@ -317,24 +346,24 @@ octave_qscintilla::get_actual_word (void
   m_word_at_cursor = wordAtPoint (local_pos);
   QString lexer_name = lexer ()->lexer ();
   return ((lexer_name == "octave" || lexer_name == "matlab")
           && ! m_word_at_cursor.isEmpty ());
 }
 
 // helper function for clearing all indicators of a specific style
 void
-octave_qscintilla::clear_indicator (int indicator_style, int marker_style)
+octave_qscintilla::clear_selection_markers (void)
 {
   int end_pos = text ().length ();
   int end_line, end_col;
   lineIndexFromPosition (end_pos, &end_line, &end_col);
-  clearIndicatorRange (0, 0, end_line, end_col, indicator_style);
+  clearIndicatorRange (0, 0, end_line, end_col, m_indicator_id);
 
-  markerDeleteAll (marker_style);
+  markerDeleteAll (marker::selection);
 }
 
 // Function returning the true cursor position where the tab length
 // is taken into account.
 void
 octave_qscintilla::get_current_position (int *pos, int *line, int *col)
 {
   *pos = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
@@ -523,16 +552,40 @@ octave_qscintilla::smart_indent (bool do
                                          indentation (line));
         }
       return;
     }
 
 }
 
 void
+octave_qscintilla::set_word_selection (const QString& word)
+{
+  m_selection = word;
+
+  if (word.isEmpty ())
+    {
+      m_selection_line = -1;
+      m_selection_col = -1;
+
+      clear_selection_markers ();
+    }
+  else
+    getCursorPosition (&m_selection_line, &m_selection_col);
+}
+
+void
+octave_qscintilla::show_selection_markers (int line, int col, int len)
+{
+  fillIndicatorRange (line, col - len, line, col, m_indicator_id);
+
+  markerAdd (line, marker::selection);
+}
+
+void
 octave_qscintilla::contextmenu_help (bool)
 {
   contextmenu_help_doc (false);
 }
 
 void
 octave_qscintilla::contextmenu_doc (bool)
 {
@@ -588,16 +641,29 @@ octave_qscintilla::contextmenu_break_onc
 }
 
 void
 octave_qscintilla::text_changed (void)
 {
   emit status_update (isUndoAvailable (), isRedoAvailable ());
 }
 
+void
+octave_qscintilla::cursor_position_changed (int line, int col)
+{
+  // Clear the selection if we move away from it.  We have to check the
+  // position, because we allow entering text at the point of the
+  // selection to trigger a search and replace that does not clear the
+  // selection until it is complete.
+
+  if (! m_selection.isEmpty ()
+      && (line != m_selection_line || col != m_selection_col))
+    set_word_selection ();
+}
+
 // when edit area gets focus update information on undo/redo actions
 void octave_qscintilla::focusInEvent (QFocusEvent *focusEvent)
 {
   emit status_update (isUndoAvailable (), isRedoAvailable ());
 
   QsciScintilla::focusInEvent (focusEvent);
 }
 
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 // Author: Torsten <ttl@justmail.de>
 
 #if ! defined (octave_octave_qscintilla_h)
 #define octave_octave_qscintilla_h 1
 
 #include <Qsci/qsciscintilla.h>
+
 #include <QMenu>
 #include <QContextMenuEvent>
 
 class octave_qscintilla : public QsciScintilla
 {
   Q_OBJECT
 
 public:
@@ -48,23 +49,29 @@ public:
 
   virtual void contextMenuEvent (QContextMenuEvent *e);
 
   void context_help_doc (bool);
   void context_edit (void);
   void context_run (void);
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word (void);
-  void clear_indicator (int indicator_style, int marker_style);
+  void clear_selection_markers (void);
   void get_current_position (int *pos, int *line, int *col);
   QString comment_string (void);
   int get_style (int pos = -1);
   int is_style_comment (int pos = -1);
   void smart_indent (bool do_smart_indent, int do_auto_close, int line);
 
+  void set_word_selection (const QString& word = QString ());
+
+  void show_selection_markers (int line, int col, int len);
+
+  void set_selection_marker_color (const QColor& c);
+
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
   void create_context_menu_signal (QMenu*);
   void context_menu_edit_signal (const QString&);
   void qsci_has_focus_signal (bool);
   void status_update (bool, bool);
   void show_doc_signal (const QString&);
@@ -78,22 +85,28 @@ private slots:
   void contextmenu_help_doc (bool);
   void contextmenu_edit (bool);
   void contextmenu_run (bool);
 
   void contextmenu_break_condition (bool);
   void contextmenu_break_once (const QPoint&);
 
   void text_changed (void);
+  void cursor_position_changed (int, int);
 
 protected:
 
   void focusInEvent (QFocusEvent *focusEvent);
 
 private:
 
   void auto_close (int auto_endif, int l,
                    const QString& line, QString& first_word);
 
   QString m_word_at_cursor;
+
+  QString m_selection;
+  int m_selection_line;
+  int m_selection_col;
+  int m_indicator_id;
 };
 
 #endif
