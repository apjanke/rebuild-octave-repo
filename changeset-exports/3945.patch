# HG changeset patch
# User jwe
# Date 1021923607 0
#      Mon May 20 19:40:07 2002 +0000
# Node ID b050da7f9994cfe05357b19bd3e1b9bd3c5c3d79
# Parent  818f5aec1db59aefeff5f6ad7c8dbdc62624a0bd
[project @ 2002-05-20 19:40:07 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2002-05-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DASSL.h (DASSL_options::init): Undo previous change.
+	(DASSL_options::set_absolute_tolerance): Likewise.
+	* LSODE.h (LSODE_options::init): Likewise.
+	(LSODE_options::set_absolute_tolerance): Likewise.
+
+	* DASPK.h (DASPK_options::init): Use default absolute tolerance of
+	sqrt(eps), not eps^2.
+	DASPK_options::set_absolute_tolerance): Likewise.
+
 2002-05-17  Mumit Khan <khan@nanotech.wisc.edu>
 
 	* Array.h (Array<T>::resize_fill_value): Return default initialized
 	object.
 
 2002-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-rl-edit.c (OCTAVE_RL_SAVE_STRING): New macro.
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -48,36 +48,37 @@ public:
 
       return *this;
     }
 
   ~DASPK_options (void) { }
 
   void init (void)
     {
-      x_absolute_tolerance = DBL_EPSILON * DBL_EPSILON;
+      double sqrt_eps = ::sqrt (DBL_EPSILON);
+      x_absolute_tolerance = sqrt_eps;
       x_initial_step_size = -1.0;
       x_maximum_step_size = -1.0;
       x_minimum_step_size = 0.0;
-      x_relative_tolerance = sqrt (DBL_EPSILON);
+      x_relative_tolerance = sqrt_eps;
     }
 
   void copy (const DASPK_options& opt)
     {
       x_absolute_tolerance = opt.x_absolute_tolerance;
       x_initial_step_size = opt.x_initial_step_size;
       x_maximum_step_size = opt.x_maximum_step_size;
       x_minimum_step_size = opt.x_minimum_step_size;
       x_relative_tolerance = opt.x_relative_tolerance;
     }
 
   void set_default_options (void) { init (); }
 
   void set_absolute_tolerance (double val)
-    { x_absolute_tolerance = (val > 0.0) ? val : DBL_EPSILON * DBL_EPSILON; }
+    { x_absolute_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
 
   void set_initial_step_size (double val)
     { x_initial_step_size = (val >= 0.0) ? val : -1.0; }
 
   void set_maximum_step_size (double val)
     { x_maximum_step_size = (val >= 0.0) ? val : -1.0; }
 
   void set_minimum_step_size (double val)
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -48,21 +48,22 @@ public:
 
       return *this;
     }
 
   ~DASSL_options (void) { }
 
   void init (void)
     {
-      x_absolute_tolerance = sqrt (DBL_EPSILON);
+      double sqrt_eps = ::sqrt (DBL_EPSILON);
+      x_absolute_tolerance = sqrt_eps;
       x_initial_step_size = -1.0;
       x_maximum_step_size = -1.0;
       x_minimum_step_size = 0.0;
-      x_relative_tolerance = sqrt (DBL_EPSILON);
+      x_relative_tolerance = sqrt_eps;
     }
 
   void copy (const DASSL_options& opt)
     {
       x_absolute_tolerance = opt.x_absolute_tolerance;
       x_initial_step_size = opt.x_initial_step_size;
       x_maximum_step_size = opt.x_maximum_step_size;
       x_minimum_step_size = opt.x_minimum_step_size;
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -48,21 +48,22 @@ public:
 
       return *this;
     }
 
   ~LSODE_options (void) { }
 
   void init (void)
     {
-      x_absolute_tolerance = DBL_EPSILON * DBL_EPSILON;
+      double sqrt_eps = ::sqrt (DBL_EPSILON);
+      x_absolute_tolerance = sqrt_eps;
       x_initial_step_size = -1.0;
       x_maximum_step_size = -1.0;
       x_minimum_step_size = 0.0;
-      x_relative_tolerance = ::sqrt (DBL_EPSILON);
+      x_relative_tolerance = sqrt_eps;
 
       // This is consistent with earlier versions of Octave, and is
       // much larger than the default of 500 specified in the LSODE
       // sources.
       x_step_limit = 100000;
     }
 
   void copy (const LSODE_options& opt)
@@ -74,17 +75,17 @@ public:
       x_relative_tolerance = opt.x_relative_tolerance;
 
       x_step_limit = opt.x_step_limit;
     }
 
   void set_default_options (void) { init (); }
 
   void set_absolute_tolerance (double val)
-    { x_absolute_tolerance = (val > 0.0) ? val : DBL_EPSILON * DBL_EPSILON; }
+    { x_absolute_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
 
   void set_initial_step_size (double val)
     { x_initial_step_size = (val >= 0.0) ? val : -1.0; }
 
   void set_maximum_step_size (double val)
     { x_maximum_step_size = (val >= 0.0) ? val : -1.0; }
 
   void set_minimum_step_size (double val)
