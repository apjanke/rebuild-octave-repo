# HG changeset patch
# User jwe
# Date 831883555 0
#      Sun May 12 06:45:55 1996 +0000
# Node ID bc6ecd8f117593d22133e533213585ec4cc12495
# Parent  6b3a4558a9358e3d8c32178910217cbe84ddb38c
[project @ 1996-05-12 06:45:55 by jwe]

diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -850,17 +850,17 @@ octave_base_stream::do_read (int nr, int
 	  mval.resize (nr, nc, 0.0);
 	  data = mval.fortran_vec ();
 	  max_size = nr * nc;
 	}
       else
 	{
 	  mval.resize (nr, 32, 0.0);
 	  data = mval.fortran_vec ();
-	  max_size = nr * nc;
+	  max_size = nr * 32;
 	}
     }
   else
     {
       mval.resize (32, 1, 0.0);
       data = mval.fortran_vec ();
       max_size = 32;
     }
@@ -995,17 +995,17 @@ octave_base_stream::do_read (int nr, int
 	      error ("fread: read error");
 	      break;
 	    }
 	}
     }
 
   if (ok ())
     {
-      mval.resize (final_nr, final_nc);
+      mval.resize (final_nr, final_nc, 0.0);
 
       retval = mval;
     }
 
   return retval;
 }
 
 octave_value
@@ -1043,33 +1043,35 @@ octave_base_stream::read (const Matrix& 
  \
       if (is) \
 	{ \
 	  if (idx == max_size && ! discard) \
 	    { \
 	      max_size *= 2; \
  \
 	      if (nr > 0) \
-		mval.resize (nr, max_size / 2, 0.0); \
+		mval.resize (nr, max_size / nr, 0.0); \
 	      else \
 		mval.resize (max_size, 1, 0.0); \
  \
 	      data = mval.fortran_vec (); \
 	    } \
  \
 	  if (! discard) \
 	    data[idx++] = *(valptr); \
 	} \
     } \
   while (0)
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count)
 {
+  count = 0;
+
   octave_value retval = Matrix ();
 
   istream *isp = input_stream ();
 
   bool all_char_conv = fmt_list.all_character_conversions ();
 
   Matrix mval;
   double *data = 0;
@@ -1085,17 +1087,17 @@ octave_base_stream::do_scanf (scanf_form
 	  mval.resize (nr, nc, 0.0);
 	  data = mval.fortran_vec ();
 	  max_size = nr * nc;
 	}
       else
 	{
 	  mval.resize (nr, 32, 0.0);
 	  data = mval.fortran_vec ();
-	  max_size = nr * nc;
+	  max_size = nr * 32;
 	}
     }
   else
     {
       mval.resize (32, 1, 0.0);
       data = mval.fortran_vec ();
       max_size = 32;
     }
@@ -1234,17 +1236,17 @@ octave_base_stream::do_scanf (scanf_form
 	    }
 
 	  elt = fmt_list.next ();
 	}
     }
 
   if (ok ())
     {
-      mval.resize (final_nr, final_nc);
+      mval.resize (final_nr, final_nc, 0.0);
 
       if (all_char_conv)
 	{
 	  if (nr < 0)
 	    mval = mval.transpose ();
 
 	  retval = mval;
 
