# HG changeset patch
# User jwe
# Date 948867404 0
#      Wed Jan 26 06:16:44 2000 +0000
# Node ID 45742a3b1f7cfff1621342b9b3b027e9cd36c3f5
# Parent  19e0f69da41e49b5d924d70fd48f25d60e35eed0
[project @ 2000-01-26 06:16:41 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -913,17 +913,17 @@ ComplexMatrix::inverse (int& info, doubl
   return retval;
 }
 
 ComplexMatrix
 ComplexMatrix::pseudo_inverse (double tol)
 {
   ComplexMatrix retval;
 
-  ComplexSVD result (*this);
+  ComplexSVD result (*this, SVD::economy);
 
   DiagMatrix S = result.singular_values ();
   ComplexMatrix U = result.left_singular_matrix ();
   ComplexMatrix V = result.right_singular_matrix ();
 
   ColumnVector sigma = S.diag ();
 
   int r = sigma.length () - 1;
@@ -1228,50 +1228,65 @@ ComplexMatrix::determinant (int& info, d
   return retval;
 }
 
 ComplexMatrix
 ComplexMatrix::solve (const Matrix& b) const
 {
   int info;
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
 
 ComplexMatrix
 ComplexMatrix::solve (const Matrix& b, int& info) const
 {
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
 
 ComplexMatrix
 ComplexMatrix::solve (const Matrix& b, int& info, double& rcond) const
 {
+  return solve (b, info, rcond, 0);
+}
+
+ComplexMatrix
+ComplexMatrix::solve (const Matrix& b, int& info, double& rcond,
+		      solve_singularity_handler sing_handler) const
+{
   ComplexMatrix tmp (b);
-  return solve (tmp, info, rcond);
+  return solve (tmp, info, rcond, sing_handler);
 }
 
 ComplexMatrix
 ComplexMatrix::solve (const ComplexMatrix& b) const
 {
   int info;
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
 
 ComplexMatrix
 ComplexMatrix::solve (const ComplexMatrix& b, int& info) const
 {
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
+
 ComplexMatrix
 ComplexMatrix::solve (const ComplexMatrix& b, int& info, double& rcond) const
 {
+  return solve (b, info, rcond, 0);
+}
+
+ComplexMatrix
+ComplexMatrix::solve (const ComplexMatrix& b, int& info, double& rcond,
+		      solve_singularity_handler sing_handler) const
+{
   ComplexMatrix retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0 || nr != nc || nr != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of linear equations");
@@ -1294,16 +1309,23 @@ ComplexMatrix::solve (const ComplexMatri
 	(*current_liboctave_error_handler) ("unrecoverable error in zgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
 	  if (rcond_plus_one == 1.0)
 	    {
 	      info = -2;
+
+	      if (sing_handler)
+		sing_handler (rcond);
+	      else
+		(*current_liboctave_error_handler)
+		  ("matrix singular to machine precision, rcond = %g",
+		   rcond);
 	    }
 	  else
 	    {
 	      retval = b;
 	      Complex *result = retval.fortran_vec ();
 
 	      int b_nc = b.cols ();
 
@@ -1327,30 +1349,38 @@ ComplexMatrix::solve (const ComplexMatri
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b) const
 {
   int info;
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
 
 ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info) const
 {
   double rcond;
-  return solve (b, info, rcond);
+  return solve (b, info, rcond, 0);
 }
 
 ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info,
 		      double& rcond) const
 {
+  return solve (b, info, rcond, 0);
+}
+
+ComplexColumnVector
+ComplexMatrix::solve (const ComplexColumnVector& b, int& info,
+		      double& rcond,
+		      solve_singularity_handler sing_handler) const
+{
   ComplexColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0 || nr != nc || nr != b.length ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of linear equations");
@@ -1374,16 +1404,23 @@ ComplexMatrix::solve (const ComplexColum
 	  ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
 	  if (rcond_plus_one == 1.0)
 	    {
 	      info = -2;
+
+	      if (sing_handler)
+		sing_handler (rcond);
+	      else
+		(*current_liboctave_error_handler)
+		  ("matrix singular to machine precision, rcond = %g",
+		   rcond);
 	    }
 	  else
 	    {
 	      retval = b;
 	      Complex *result = retval.fortran_vec ();
 
 	      F77_XFCN (zgesl, ZGESL, (tmp_data, nr, nr, pipvt, result, 0));
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -42,16 +42,18 @@ friend class ComplexHESS;
 friend class ComplexLU;
 friend class ComplexQR;
 friend class ComplexQRP;
 friend class ComplexSCHUR;
 friend class ComplexSVD;
 
 public:
  
+  typedef void (*solve_singularity_handler) (double rcond);
+
   ComplexMatrix (void) : MArray2<Complex> () { }
   ComplexMatrix (int r, int c) : MArray2<Complex> (r, c) { }
   ComplexMatrix (int r, int c, const Complex& val)
     : MArray2<Complex> (r, c, val) { }
   ComplexMatrix (const Matrix& a);
   ComplexMatrix (const MArray2<Complex>& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const RowVector& rv);
@@ -145,25 +147,32 @@ public:
 
   ComplexDET determinant (void) const;
   ComplexDET determinant (int& info) const;
   ComplexDET determinant (int& info, double& rcond) const;
 
   ComplexMatrix solve (const Matrix& b) const;
   ComplexMatrix solve (const Matrix& b, int& info) const;
   ComplexMatrix solve (const Matrix& b, int& info, double& rcond) const;
+  ComplexMatrix solve (const Matrix& b, int& info, double& rcond,
+		       solve_singularity_handler sing_handler) const;
 
   ComplexMatrix solve (const ComplexMatrix& b) const;
   ComplexMatrix solve (const ComplexMatrix& b, int& info) const;
   ComplexMatrix solve (const ComplexMatrix& b, int& info, double& rcond) const;
+  ComplexMatrix solve (const ComplexMatrix& b, int& info, double& rcond,
+		       solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (const ComplexColumnVector& b) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, int& info) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, int& info,
 			     double& rcond) const;
+  ComplexColumnVector solve (const ComplexColumnVector& b, int& info,
+			     double& rcond,
+			     solve_singularity_handler sing_handler) const;
 
   ComplexMatrix lssolve (const ComplexMatrix& b) const;
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info) const;
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info,
 			 int& rank) const;
 
   ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dMatrix.cc (Matrix::solve (...)): Add new variant with
+	function pointer as final arg.  Passed function (if any) will be
+	called for singularity errors.
+	* CMatrix.cc (ComplexMatrix::solve (...)): Likewise.
+
+	* dMatrix.cc (Matrix::pseudo_inverse): Use economy SVD.
+	* CMatrix.cc (ComplexMatrix::pseudo_inverse): Likewise.
+
 	* lo-ieee.cc (octave_ieee_init): Don't include sunmath.h.
 	No longer bother with infinity or quiet_nan.
 
 	* Array2.cc (Array2<T>::get_size): New function.
 	(Array2<T>::Array2, Array2<T>::resize): Use it.
 
 2000-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -607,17 +607,17 @@ Matrix::inverse (int& info, double& rcon
     }
 
   return retval;
 }
 
 Matrix
 Matrix::pseudo_inverse (double tol)
 {
-  SVD result (*this);
+  SVD result (*this, SVD::economy);
 
   DiagMatrix S = result.singular_values ();
   Matrix U = result.left_singular_matrix ();
   Matrix V = result.right_singular_matrix ();
 
   ColumnVector sigma = S.diag ();
 
   int r = sigma.length () - 1;
@@ -933,16 +933,23 @@ Matrix::solve (const Matrix& b, int& inf
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 Matrix
 Matrix::solve (const Matrix& b, int& info, double& rcond) const
 {
+  return solve (b, info, rcond, 0);
+}
+
+Matrix
+Matrix::solve (const Matrix& b, int& info, double& rcond,
+	       solve_singularity_handler sing_handler) const
+{
   Matrix retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0 || nr != nc || nr != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
@@ -965,16 +972,23 @@ Matrix::solve (const Matrix& b, int& inf
 	(*current_liboctave_error_handler) ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
 	  if (rcond_plus_one == 1.0)
 	    {
 	      info = -2;
+
+	      if (sing_handler)
+		sing_handler (rcond);
+	      else
+		(*current_liboctave_error_handler)
+		  ("matrix singular to machine precision, rcond = %g",
+		   rcond);
 	    }
 	  else
 	    {
 	      retval = b;
 	      double *result = retval.fortran_vec ();
 
 	      int b_nc = b.cols ();
 
@@ -1014,16 +1028,24 @@ Matrix::solve (const ComplexMatrix& b, i
 
 ComplexMatrix
 Matrix::solve (const ComplexMatrix& b, int& info, double& rcond) const
 {
   ComplexMatrix tmp (*this);
   return tmp.solve (b, info, rcond);
 }
 
+ComplexMatrix
+Matrix::solve (const ComplexMatrix& b, int& info, double& rcond,
+	       solve_singularity_handler sing_handler) const
+{
+  ComplexMatrix tmp (*this);
+  return tmp.solve (b, info, rcond, sing_handler);
+}
+
 ColumnVector
 Matrix::solve (const ColumnVector& b) const
 {
   int info; double rcond;
   return solve (b, info, rcond);
 }
 
 ColumnVector
@@ -1031,16 +1053,23 @@ Matrix::solve (const ColumnVector& b, in
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 ColumnVector
 Matrix::solve (const ColumnVector& b, int& info, double& rcond) const
 {
+  return solve (b, info, rcond, 0);
+}
+
+ColumnVector
+Matrix::solve (const ColumnVector& b, int& info, double& rcond,
+	       solve_singularity_handler sing_handler) const
+{
   ColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0 || nr != nc || nr != b.length ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
@@ -1064,16 +1093,23 @@ Matrix::solve (const ColumnVector& b, in
 	  ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
 	  if (rcond_plus_one == 1.0)
 	    {
 	      info = -2;
+
+	      if (sing_handler)
+		sing_handler (rcond);
+	      else
+		(*current_liboctave_error_handler)
+		  ("matrix singular to machine precision, rcond = %g",
+		   rcond);
 	    }
 	  else
 	    {
 	      retval = b;
 	      double *result = retval.fortran_vec ();
 
 	      F77_XFCN (dgesl, DGESL, (tmp_data, nr, nr, pipvt, result, 0));
 
@@ -1103,16 +1139,24 @@ Matrix::solve (const ComplexColumnVector
 
 ComplexColumnVector
 Matrix::solve (const ComplexColumnVector& b, int& info, double& rcond) const
 {
   ComplexMatrix tmp (*this);
   return tmp.solve (b, info, rcond);
 }
 
+ComplexColumnVector
+Matrix::solve (const ComplexColumnVector& b, int& info, double& rcond,
+	       solve_singularity_handler sing_handler) const
+{
+  ComplexMatrix tmp (*this);
+  return tmp.solve (b, info, rcond, sing_handler);
+}
+
 Matrix
 Matrix::lssolve (const Matrix& b) const
 {
   int info;
   int rank;
   return lssolve (b, info, rank);
 }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -46,16 +46,18 @@ friend class HESS;
 friend class LU;
 friend class QR;
 friend class QRP;
 friend class SCHUR;
 friend class SVD;
 
 public:
 
+  typedef void (*solve_singularity_handler) (double rcond);
+
   Matrix (void) : MArray2<double> () { }
   Matrix (int r, int c) : MArray2<double> (r, c) { }
   Matrix (int r, int c, double val) : MArray2<double> (r, c, val) { }
   Matrix (const MArray2<double>& a) : MArray2<double> (a) { }
   Matrix (const Matrix& a) : MArray2<double> (a) { }
   Matrix (const RowVector& rv);
   Matrix (const ColumnVector& cv);
   //  Matrix (const MDiagArray2<double>& a) : MArray2<double> (a) { }
@@ -126,29 +128,38 @@ public:
 
   DET determinant (void) const;
   DET determinant (int& info) const;
   DET determinant (int& info, double& rcond) const;
 
   Matrix solve (const Matrix& b) const;
   Matrix solve (const Matrix& b, int& info) const;
   Matrix solve (const Matrix& b, int& info, double& rcond) const;
+  Matrix solve (const Matrix& b, int& info, double& rcond,
+		solve_singularity_handler sing_handler) const;
 
   ComplexMatrix solve (const ComplexMatrix& b) const;
   ComplexMatrix solve (const ComplexMatrix& b, int& info) const;
   ComplexMatrix solve (const ComplexMatrix& b, int& info, double& rcond) const;
+  ComplexMatrix solve (const ComplexMatrix& b, int& info, double& rcond,
+		       solve_singularity_handler sing_handler) const;
 
   ColumnVector solve (const ColumnVector& b) const;
   ColumnVector solve (const ColumnVector& b, int& info) const;
   ColumnVector solve (const ColumnVector& b, int& info, double& rcond) const;
+  ColumnVector solve (const ColumnVector& b, int& info, double& rcond,
+		      solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (const ComplexColumnVector& b) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, int& info) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, int& info,
 			     double& rcond) const;
+  ComplexColumnVector solve (const ComplexColumnVector& b, int& info,
+			     double& rcond,
+			     solve_singularity_handler sing_handler) const;
 
   Matrix lssolve (const Matrix& b) const;
   Matrix lssolve (const Matrix& b, int& info) const;
   Matrix lssolve (const Matrix& b, int& info, int& rank) const;
 
   ComplexMatrix lssolve (const ComplexMatrix& b) const;
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info) const;
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info,
diff --git a/readline/rltty.c b/readline/rltty.c
--- a/readline/rltty.c
+++ b/readline/rltty.c
@@ -149,17 +149,21 @@ static int ksrflow;
    to get the tty settings. */
 static void
 set_winsize (tty)
      int tty;
 {
   struct winsize w;
 
   if (ioctl (tty, TIOCGWINSZ, &w) == 0)
+    {
+      fprintf (stderr, "setting window size: %d x %d\n", w.ws_row, w.ws_col);
+
       (void) ioctl (tty, TIOCSWINSZ, &w);
+    }
 }
 #else /* SHELL || !TIOCGWINSZ */
 #  define set_winsize(tty)
 #endif /* SHELL || !TIOCGWINSZ */
 
 #if defined (NEW_TTY_DRIVER)
 
 /* Values for the `flags' field of a struct bsdtty.  This tells which
@@ -528,16 +532,18 @@ rl_prep_terminal (meta_flag)
   if (terminal_prepped)
     return;
 
   /* Try to keep this function from being INTerrupted. */
   block_sigint ();
 
   tty = fileno (rl_instream);
 
+  fprintf (stderr, "rl_prep_terminal\n");
+
   if (get_tty_settings (tty, &tio) < 0)
     {
       release_sigint ();
       return;
     }
 
   otio = tio;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* xdiv.cc (result_ok): Just check value of info.
+	(solve_singularity_warning): New function.
+	(xleftdiv, xdiv): Pass pointer to solve_singularity_warning to
+	solve function.	
+
+	* lex.l (handle_identifier): Set next_tok_is_eq if we are looking
+	at `=', but not if we are looking at `=='.
+
 	* pt-pr-code.cc (tree_print_code::visit_unwind_protect_command): 
 	Print `unwind_protect_cleanup', not `cleanup_code'.
 
 	* pager.cc (octave_pager_buf::flush_current_contents_to_diary):
 	New function.
 	(octave_pager_stream::flush_current_contents_to_diary):
 	Ditto.
 	(close_diary_file): Use the new octave_pager_stream function to
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -2045,21 +2045,32 @@ handle_identifier (const string& tok, in
 
       if (nesting_level.none ())
 	plot_option_kw = is_plot_keyword (tok);
 
       if (lexer_flags.cant_be_identifier && plot_option_kw)
 	TOK_RETURN (plot_option_kw);
     }
 
-  int c = yyinput ();
-  unput (c);
-  bool next_tok_is_eq = (c == '=');
-  bool next_tok_is_dot = (c == '.');
-  bool next_tok_is_paren = (c == '(');
+  int c1 = yyinput ();
+
+  bool next_tok_is_dot = (c1 == '.');
+  bool next_tok_is_paren = (c1 == '(');
+
+  bool next_tok_is_eq = false;
+  if (c1 == '=')
+    {
+      int c2 = yyinput ();
+      unput (c2);
+
+      if (c2 != '=')
+	next_tok_is_eq = true;
+    }
+
+  unput (c1);
 
   // Make sure we put the return values of a function in the symbol
   // table that is local to the function.
 
   // If we are defining a function and we have not seen the function
   // name yet and the next token is `=', then this identifier must be
   // the only return value for the function and it belongs in the
   // local symbol table.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -368,16 +368,17 @@ main (int argc, char **argv)
   sysdep_init ();
 
   initialize_error_handlers ();
 
   install_defaults ();
 
   initialize_pathsearch ();
 
+  cerr << "installing octave signal handlers\n";
   install_signal_handlers ();
 
   initialize_file_io ();
 
   initialize_symbol_tables ();
 
   install_types ();
 
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -28,32 +28,28 @@ Software Foundation, 59 Temple Place - S
 
 #include "CMatrix.h"
 #include "dMatrix.h"
 #include "oct-cmplx.h"
 
 #include "error.h"
 #include "xdiv.h"
 
-static inline int
-result_ok (int info, double rcond, int warn = 1)
+static inline bool
+result_ok (int info)
 {
   assert (info != -1);
 
-  if (info == -2)
-    {
-      if (warn)
-	warning ("matrix singular to machine precision, rcond = %g", rcond);
-      else
-	error ("matrix singular to machine precision, rcond = %g", rcond);
+  return (info != -2);
+}
 
-      return 0;
-    }
-  else
-    return 1;
+static void
+solve_singularity_warning (double rcond)
+{
+  warning ("matrix singular to machine precision, rcond = %g", rcond);
 }
 
 template <class T1, class T2>
 bool
 mx_leftdiv_conform (const T1& a, const T2& b)
 {
   int a_nr = a.rows ();
   int b_nr = b.rows ();
@@ -123,18 +119,21 @@ xdiv (const Matrix& a, const Matrix& b)
 
   Matrix atmp = a.transpose ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
-      Matrix result = btmp.solve (atmp, info, rcond);
-      if (result_ok (info, rcond))
+
+      Matrix result
+	= btmp.solve (atmp, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return Matrix (result.transpose ());
     }
 
   int rank;
   Matrix result = btmp.lssolve (atmp, info, rank);
 
   return result.transpose ();
 }
@@ -148,18 +147,21 @@ xdiv (const Matrix& a, const ComplexMatr
 
   Matrix atmp = a.transpose ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = btmp.solve (atmp, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= btmp.solve (atmp, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
   return result.hermitian ();
 }
@@ -173,18 +175,21 @@ xdiv (const ComplexMatrix& a, const Matr
 
   ComplexMatrix atmp = a.hermitian ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = btmp.solve (atmp, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= btmp.solve (atmp, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
   return result.hermitian ();
 }
@@ -198,18 +203,21 @@ xdiv (const ComplexMatrix& a, const Comp
 
   ComplexMatrix atmp = a.hermitian ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = btmp.solve (atmp, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= btmp.solve (atmp, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
   return result.hermitian ();
 }
@@ -298,18 +306,21 @@ xleftdiv (const Matrix& a, const Matrix&
 {
   if (! mx_leftdiv_conform (a, b))
     return Matrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
-      Matrix result = a.solve (b, info, rcond);
-      if (result_ok (info, rcond))
+
+      Matrix result
+	= a.solve (b, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result;
     }
 
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 2 -*-
@@ -318,18 +329,21 @@ xleftdiv (const Matrix& a, const Complex
 {
   if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = a.solve (b, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= a.solve (b, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result;
     }
 
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 3 -*-
@@ -338,18 +352,21 @@ xleftdiv (const ComplexMatrix& a, const 
 {
   if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = a.solve (b, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= a.solve (b, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result;
     }
 
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 4 -*-
@@ -358,18 +375,21 @@ xleftdiv (const ComplexMatrix& a, const 
 {
   if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
-      ComplexMatrix result = a.solve (b, info, rcond);
-      if (result_ok (info, rcond))
+
+      ComplexMatrix result
+	= a.solve (b, info, rcond, solve_singularity_warning);
+
+      if (result_ok (info))
 	return result;
     }
 
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 /*
