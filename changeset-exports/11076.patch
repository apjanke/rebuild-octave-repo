# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1286220902 -7200
#      Mon Oct 04 21:35:02 2010 +0200
# Node ID b748b86cb8c1950e2adb8c9ef7eca5c7b2cc59e7
# Parent  4e31d44a9763a0967b05dc0214d868f5f59feeb0
fix images with width or height of 1

diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -114,42 +114,24 @@ function h = __img__ (x, y, img, varargi
 
   if (isempty (y))
     y = [1, rows(img)];
   endif
 
   xdata = [x(1), x(end)];
   ydata = [y(1), y(end)];
 
-  c = size (img, 2);
-  if (c > 1)
-    xlim = 0.5 * (diff (xdata) * c / (c - 1) * [-1, 1] + sum (xdata));
-  elseif (numel (unique (x)) > 1)
-    xlim = xdata;
-  elseif (x(1) !=  0)
-    xlim = [0, x];
-  else
-    xlim = [0, 1];
-  endif
-
-  r = size (img, 1);
-  if (r > 1)
-    ylim = 0.5 * (diff (ydata) * r / (r - 1) * [-1, 1] + sum (ydata));
-  elseif (numel (unique (y)) > 1)
-    ylim = ydata;
-  elseif (y(1) !=  0)
-    ylim = [0, y];
-  else
-    ylim = [0, 1];
-  endif
-
   ca = gca ();
 
   tmp = __go_image__ (ca, "cdata", img, "xdata", xdata, "ydata", ydata,
-                      "cdatamapping", "direct", varargin {:});
+                    "cdatamapping", "direct", varargin {:});
+
+  px = __image_pixel_size__ (tmp);
+  xlim = xdata + [-px(1), px(1)];
+  ylim = ydata + [-px(2), px(2)];
 
   ## FIXME -- how can we do this and also get the {x,y}limmode
   ## properties to remain "auto"?  I suppose this adjustment should
   ## happen automatically in axes::update_axis_limits instead of
   ## explicitly setting the values here.  But then what information is
   ## available to axes::update_axis_limits to determine that the
   ## adjustment is necessary?
   set (ca, "xlim", xlim, "ylim", ylim);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-10-04  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* graphics.h.in (axis::properties::pixel_size): New function.
+	(axis::properties::pixel_xsize,axis::properties::pixel_ysize):
+	New functions, use axis::properties::pixel_size
+	(axis::properties::update_ydata,axis::properties::update_xdata):
+	Use axis::properties::pixel_size functions
+
+	* graphics.cc (__image_pixel_size__): New function uses
+	axis::properties::pixel_size functions
+
 2010-10-01  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (class caseless_str): Move to
 	liboctave/caseless-string.h.
 
 2010-10-01  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (base_properties::get_dynamic): Create and return
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -6222,16 +6222,55 @@ Undocumented internal function.\n\
         error ("__go_execute_callback__: invalid graphics object");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (__image_pixel_size__, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{px},@var{py}} __image_pixel_size__ (@var{h})\n\
+Internal function: returns the pixel size of the image in normalized units.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      double h = args(0).double_value ();
+
+      if (! error_state)
+        {
+          graphics_object fobj = gh_manager::get_object (h);
+          if (fobj &&  fobj.isa ("image"))
+            {
+              image::properties& ip =
+                dynamic_cast<image::properties&> (fobj.get_properties ());
+              
+              Matrix dp =  Matrix (1, 2, 0);
+              dp(0, 0) = ip.pixel_xsize ();
+              dp(0, 1) = ip.pixel_ysize ();
+              retval = dp;
+            }
+          else
+            error ("__image_pixel_size__: object is not an image");
+        }
+      else
+        error ("__image_pixel_size__: argument is not a handle");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (available_backends, , ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} available_backends ()\n\
 Return a cell array of registered graphics backends.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3430,43 +3430,69 @@ public:
         cdata.add_constraint ("int16");
         cdata.add_constraint (dim_vector (-1, -1));
         cdata.add_constraint (dim_vector (-1, -1, 3));
       }
 
   private:
     void update_xdata (void)
     { 
-      octave_idx_type iw = (get_cdata ().dims ())(1) - 1;
       Matrix limits = xdata.get_limits ();
-      float dp = (limits(1) - limits(0))/(2*iw);
+      float dp = pixel_xsize ();
 
       limits(0) = limits(0) - dp;
       limits(1) = limits(1) + dp;
       set_xlim (limits); 
     }
 
     void update_ydata (void)
     {
-      octave_idx_type ih = (get_cdata().dims ())(0) - 1;
       Matrix limits = ydata.get_limits ();
-      float dp = (limits(1) - limits(0))/(2*ih);
+      float dp = pixel_ysize ();
 
       limits(0) = limits(0) - dp;
       limits(1) = limits(1) + dp;
       set_ylim (limits); 
     }
 
     void update_cdata (void)
       {
         if (cdatamapping_is ("scaled"))
           set_clim (cdata.get_limits ());
         else
           clim = cdata.get_limits ();
       }
+
+    float pixel_size (octave_idx_type dim, const Matrix limits)
+    {
+      octave_idx_type l = dim - 1;
+      float dp;
+
+      if (l > 0)
+        dp = (limits(1) - limits(0))/(2*l);
+      else
+        {
+          if (limits(1) == limits(2))
+            dp = 0.5;
+          else
+            dp = (limits(1) - limits(0))/2;
+        }
+      return dp;
+    }
+
+  public:
+    float  pixel_xsize (void)
+    {
+      return pixel_size ((get_cdata ().dims ())(1), xdata.get_limits ());
+    }
+
+    float pixel_ysize (void)
+    {
+      return pixel_size ((get_cdata ().dims ())(0), ydata.get_limits ());
+    }
   };
 
 private:
   properties xproperties;
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
