# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237056170 -3600
#      Sat Mar 14 19:42:50 2009 +0100
# Node ID ed5055b0a4763958b8d3e6269404a913e746ae75
# Parent  80d499b82ff3dc7825b3629c369cf1b62138f157
fix & simplify ndarray->matrix conversions

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -825,34 +825,21 @@ ComplexNDArray::insert (const ComplexNDA
   return *this;
 }
 
 ComplexMatrix
 ComplexNDArray::matrix_value (void) const
 {
   ComplexMatrix retval;
 
-  int nd = ndims ();
-
-  switch (nd)
-    {
-    case 1:
-      retval = ComplexMatrix (Array2<Complex> (*this, dimensions(0), 1));
-      break;
-
-    case 2:
-      retval = ComplexMatrix (Array2<Complex> (*this, dimensions(0),
-					       dimensions(1)));
-      break;
-
-    default:
-      (*current_liboctave_error_handler)
-	("invalid conversion of ComplexNDArray to ComplexMatrix");
-      break;
-    }
+  if (ndims () == 2)
+      retval = ComplexMatrix (Array2<Complex> (*this));
+  else
+    (*current_liboctave_error_handler)
+      ("invalid conversion of ComplexNDArray to ComplexMatrix");
 
   return retval;
 }
 
 void
 ComplexNDArray::increment_index (Array<octave_idx_type>& ra_idx,
 				 const dim_vector& dimensions,
 				 int start_dimension)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-03-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* fNDArray.h (FloatMatrix::matrix_value): Fix return type.
+	* dNDArray.cc (Matrix::matrix_value): Simplify.
+	* fNDArray.cc (FloatMatrix::matrix_value): Simplify.
+	* CNDArray.cc (ComplexMatrix::matrix_value): Simplify.
+	* fCNDArray.cc (FloatComplexMatrix::matrix_value): Simplify.
+
 2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Range.h (Range::Range (double, double, octave_idx_type)): Remove
 	constructor body.
 	* Range.cc: Move it here. Check for invalid range op results.
 	(all operators): Validate cache for invalid range op results.
 	* idx-vector.h (idx_vector::index): Optimize zero-step range case.
 	* idx-vector.cc (idx_vector::maybe_reduce): Always reduce colon in
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -874,33 +874,21 @@ NDArray::abs (void) const
                   dims ());
 }
 
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
-  int nd = ndims ();
-
-  switch (nd)
-    {
-    case 1:
-      retval = Matrix (Array2<double> (*this, dimensions(0), 1));
-      break;
-
-    case 2:
-      retval = Matrix (Array2<double> (*this, dimensions(0), dimensions(1)));
-      break;
-
-    default:
-      (*current_liboctave_error_handler)
-	("invalid conversion of NDArray to Matrix");
-      break;
-    }
+  if (ndims () == 2)
+      retval = Matrix (Array2<double> (*this));
+  else
+    (*current_liboctave_error_handler)
+      ("invalid conversion of NDArray to Matrix");
 
   return retval;
 }
 
 void
 NDArray::increment_index (Array<octave_idx_type>& ra_idx,
 			  const dim_vector& dimensions,
 			  int start_dimension)
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -820,34 +820,21 @@ FloatComplexNDArray::insert (const Float
   return *this;
 }
 
 FloatComplexMatrix
 FloatComplexNDArray::matrix_value (void) const
 {
   FloatComplexMatrix retval;
 
-  int nd = ndims ();
-
-  switch (nd)
-    {
-    case 1:
-      retval = FloatComplexMatrix (Array2<FloatComplex> (*this, dimensions(0), 1));
-      break;
-
-    case 2:
-      retval = FloatComplexMatrix (Array2<FloatComplex> (*this, dimensions(0),
-					       dimensions(1)));
-      break;
-
-    default:
-      (*current_liboctave_error_handler)
-	("invalid conversion of FloatComplexNDArray to FloatComplexMatrix");
-      break;
-    }
+  if (ndims () == 2)
+      retval = FloatComplexMatrix (Array2<FloatComplex> (*this));
+  else
+    (*current_liboctave_error_handler)
+      ("invalid conversion of FloatComplexNDArray to FloatComplexMatrix");
 
   return retval;
 }
 
 void
 FloatComplexNDArray::increment_index (Array<octave_idx_type>& ra_idx,
 				 const dim_vector& dimensions,
 				 int start_dimension)
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -824,38 +824,26 @@ FloatNDArray::insert (const FloatNDArray
 
 FloatNDArray
 FloatNDArray::abs (void) const
 {
   return FloatNDArray (mx_inline_fabs_dup (data (), length ()),
                        dims ());
 }
 
-Matrix
+FloatMatrix
 FloatNDArray::matrix_value (void) const
 {
-  Matrix retval;
-
-  int nd = ndims ();
-
-  switch (nd)
-    {
-    case 1:
-      retval = Matrix (Array2<float> (*this, dimensions(0), 1));
-      break;
+  FloatMatrix retval;
 
-    case 2:
-      retval = Matrix (Array2<float> (*this, dimensions(0), dimensions(1)));
-      break;
-
-    default:
-      (*current_liboctave_error_handler)
-	("invalid conversion of FloatNDArray to Matrix");
-      break;
-    }
+  if (ndims () == 2)
+      retval = FloatMatrix (Array2<float> (*this));
+  else
+    (*current_liboctave_error_handler)
+      ("invalid conversion of FloatNDArray to FloatMatrix");
 
   return retval;
 }
 
 void
 FloatNDArray::increment_index (Array<octave_idx_type>& ra_idx,
 			  const dim_vector& dimensions,
 			  int start_dimension)
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -116,17 +116,17 @@ public:
   FloatComplexNDArray fourierNd (void) const;
   FloatComplexNDArray ifourierNd (void) const;
 
   friend OCTAVE_API FloatNDArray real (const FloatComplexNDArray& a);
   friend OCTAVE_API FloatNDArray imag (const FloatComplexNDArray& a);
 
   friend class FloatComplexNDArray;
 
-  Matrix matrix_value (void) const;
+  FloatMatrix matrix_value (void) const;
 
   FloatNDArray squeeze (void) const { return MArrayN<float>::squeeze (); }
 
   static void increment_index (Array<octave_idx_type>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
   static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
