# HG changeset patch
# User Michael Leitner
# Date 1545199463 28800
#      Tue Dec 18 22:04:23 2018 -0800
# Node ID 25d3e8e49d5cebf269e10788ae252e010e896ead
# Parent  50a161ee72e146fa3cf3dd388ae4d8a6571719ce
randi.m: Implement rejection algorithm for unbiased results (bug #54619).

* NEWS: Announce change to randi algorithm.

* randi.m: Add input validation to expand 0, or 1, input arguments in to two
dimensions.  Implement rejection algorithm for random integers.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -3,16 +3,23 @@ Summary of important user-visible change
 
  ** The determination of an object's dimensions, size, and shape by the
     functions ndims, rows, columns, isscalar, isvector, isrow, iscolumn,
     ismatrix, and issquare now fully depends on the function size.
     Thus, any user-defined object can ensure correct treatment by the
     aforementioned functions by properly overloading the "size"
     function.
 
+ ** The function randi has been recoded to produce an unbiased (all
+    results are equally likely) sample of integers.  This may produce
+    different results in existing code.  If it is necessary to reproduce
+    the exact random integer sequence as in previous versions use
+    
+      ri = imin + floor ((imax - imin + 1) * rand ());
+
  ** A new core function movfun will apply a function to a sliding
     window of arbitrary size on a dataset and accumulate the results.
     Many common cases have been implemented using the naming
     scheme movXXX where "XXX" is the function that will be applied.
     For example, the moving average over a dataset is movmean.
     New moving window functions:
    
     movfun   movslice
diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -74,33 +74,54 @@ function ri = randi (bounds, varargin)
   else
     imin = bounds(1);
     imax = bounds(2);
     if (imax < imin)
       error ("randi: require IMIN <= IMAX");
     endif
   endif
 
-  if (nargin > 1 && ischar (varargin{end}))
-    rclass = varargin{end};
-    varargin(end) = [];
-  else
-    rclass = "double";
-  endif
-
   ## Limit set by use of class double in rand(): Any consecutive integer in the
   ## range [-flintmax(), flintmax()] can be represented by a double.
   if ((abs (imax) >= flintmax ()) || (abs (imin) >= flintmax ()))
     error ("randi: IMIN and IMAX must be smaller than flintmax()");
   endif
   if ((imax - imin) >= (flintmax () - 1))
     error ("randi: integer range must be smaller than flintmax()-1");
   endif
 
-  ri = imin + floor ((imax - imin + 1) * rand (varargin{:}));
+  if (nargin > 1 && ischar (varargin{end}))
+    rclass = varargin{end};
+    varargin(end) = [];
+    nargin = nargin - 1;
+  else
+    rclass = "double";
+  endif
+
+  ## Expand dimension argument to at least 2-D for reshape
+  if (nargin == 1)
+    varargin = {1, 1};
+  elseif (nargin == 2 && isscalar (varargin{1}))
+    varargin(2) = varargin(1);
+  endif
+    
+  ## Rejection Algorithm to guarantee unbiased results.  See bug #54619.
+  rng = (imax - imin) + 1;              # requested range
+  N = prod ([varargin{:}]);             # number of requested elements
+  K = floor ((flintmax () + 1) / rng);  # number of primary integers ...
+                                        # mapped to single output
+  p = (K*rng) / (flintmax () + 1);      # expected proportion of used primaries
+  
+  do  
+    M = ceil (N/p + 10*sqrt (N/p - N)); # number of requested primary integers
+    r_prim = floor (rand (M,1) * (flintmax () + 1));
+    r_prim = r_prim(r_prim < K*rng);
+  until (numel (r_prim) >= N)           # should practically always be true
+  
+  ri = imin + floor (reshape (r_prim(1:N), varargin{:}) / K);
 
   if (! strcmp (rclass, "double"))
     if (strfind (rclass, "int"))
       maxval = double (intmax (rclass));
       minval = double (intmin (rclass));
     elseif (strcmp (rclass, "single"))
       maxval = double (flintmax (rclass));
       minval = -maxval;
