# HG changeset patch
# User Rik <rik@octave.org>
# Date 1509766798 25200
#      Fri Nov 03 20:39:58 2017 -0700
# Node ID 2ac103974d00e4be2563a76fba1fb8244bf0d8c4
# Parent  11cdca79d3163257e13db9055c8d950931e26577
Remove extra space between scope operator '::' and function.

* find-files-model.cc, ov-java.cc, lo-specfun.cc, kpse.cc,
oct-inttypes.h: Whitespace change only.  Remove extra space between scope
operator '::' and function.

diff --git a/libgui/src/find-files-model.cc b/libgui/src/find-files-model.cc
--- a/libgui/src/find-files-model.cc
+++ b/libgui/src/find-files-model.cc
@@ -147,17 +147,17 @@ find_files_model::data (const QModelInde
             case 1:
               retval = QVariant (m_files[idx.row ()].absolutePath ());
               break;
 
             default:
               break;
             }
         }
-      else if (role == Qt:: DecorationRole)
+      else if (role == Qt::DecorationRole)
         {
           switch (idx.column ())
             {
             case 0:
               retval = fileIcon (idx);
 
             default:
               break;
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2425,20 +2425,20 @@ octave_java::do_javaMethod (const std::s
   // objects is supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 octave_value
-octave_java:: do_javaMethod (void *jni_env_arg,
-                             const std::string& class_name,
-                             const std::string& name,
-                             const octave_value_list& args)
+octave_java::do_javaMethod (void *jni_env_arg,
+                            const std::string& class_name,
+                            const std::string& name,
+                            const octave_value_list& args)
 {
 #if defined (HAVE_JAVA)
 
   octave_value retval;
 
   JNIEnv *jni_env = TO_JNIENV (jni_env_arg);
 
   if (jni_env)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -2745,17 +2745,17 @@ namespace octave
       return do_erfinv (x, false);
     }
 
     Complex
     expm1 (const Complex& x)
     {
       Complex retval;
 
-      if (std:: abs (x) < 1)
+      if (std::abs (x) < 1)
         {
           double im = x.imag ();
           double u = expm1 (x.real ());
           double v = sin (im/2);
           v = -2*v*v;
           retval = Complex (u*v + u + v, (u+1) * sin (im));
         }
       else
@@ -2764,17 +2764,17 @@ namespace octave
       return retval;
     }
 
     FloatComplex
     expm1 (const FloatComplex& x)
     {
       FloatComplex retval;
 
-      if (std:: abs (x) < 1)
+      if (std::abs (x) < 1)
         {
           float im = x.imag ();
           float u = expm1 (x.real ());
           float v = sin (im/2);
           v = -2*v*v;
           retval = FloatComplex (u*v + u + v, (u+1) * sin (im));
         }
       else
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -596,17 +596,17 @@ find_first_of (const std::string& path, 
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
         {
           std::cerr << "kdebug: find_first_of (";
 
           for (auto p = names.cbegin (); p != names.cend (); p++)
             {
               if (p == names.cbegin ())
-                std:: cerr << *p;
+                std::cerr << *p;
               else
                 std::cerr << ", " << *p;
             }
 
           std::cerr << ") =>";
         }
 
       log_search (ret_list);
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -287,18 +287,18 @@ public:
 };
 
 // Base integer class.  No data, just conversion methods and exception flags.
 template <typename T>
 class octave_int_base
 {
 public:
 
-  static T min_val () { return std::numeric_limits<T>:: min (); }
-  static T max_val () { return std::numeric_limits<T>:: max (); }
+  static T min_val () { return std::numeric_limits<T>::min (); }
+  static T max_val () { return std::numeric_limits<T>::max (); }
 
   // Convert integer value.
   template <typename S>
   static T
   truncate_int (const S& value)
   {
     // An exhaustive test whether the max and/or min check can be omitted.
     static const bool t_is_signed = std::numeric_limits<T>::is_signed;
