# HG changeset patch
# User Rik <rik@octave.org>
# Date 1500611106 25200
#      Thu Jul 20 21:25:06 2017 -0700
# Node ID cda0614beaecd5397c75966e362d34e7084b959b
# Parent  a0b7a29338d558154e4df4f51cfc8799843fbd38
Replace static instances of OCTAVE_LOCAL_BUFFER with local variables.

* load-save.cc (check_gzip_magic): Replace OCTAVE_LOCAL_BUFFER magic with
"unsigned char magic[2]".

* regexp.cc (octregexp): Replace OCTAVE_LOCAL_BUFFER_INIT arg_used with
"int arg_used[7] {}".  Aggregate initialization zero initializes ints.

* ccolamd.cc (Fccolamd, Fcsymand): Replace OCTAVE_LOCAL_BUFFER instances for
knobs and stats with 1) a local variable XXX_storage, and 2) a pointer to
the first element in XXX_storage.  Also use static_assert to guarantee
at compile time that the size of the local variable storage is not too large.

* colamd.cc (Fcolamd, Fsymand): Replace OCTAVE_LOCAL_BUFFER instances for
knobs and stats with 1) a local variable XXX_storage, and 2) a pointer to
the first element in XXX_storage.  Also use static_assert to guarantee
at compile time that the size of the local variable storage is not too large.

* Array.cc (hermitian): Remove comment about OCTAVE_LOCAL_BUFFER not being
appropriate.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -217,23 +217,24 @@ read_binary_file_header (std::istream& i
 
 #if defined (HAVE_ZLIB)
 static bool
 check_gzip_magic (const std::string& fname)
 {
   bool retval = false;
 
   std::ifstream file (fname.c_str (), std::ios::in | std::ios::binary);
-  OCTAVE_LOCAL_BUFFER (unsigned char, magic, 2);
 
-  if (file.read (reinterpret_cast<char *> (magic), 2) && magic[0] == 0x1f
-      && magic[1] == 0x8b)
+  unsigned char magic[2];
+  if (file.read (reinterpret_cast<char *> (&magic[0]), 2)
+      && magic[0] == 0x1f && magic[1] == 0x8b)
     retval = true;
 
   file.close ();
+
   return retval;
 }
 #endif
 
 static load_save_format
 get_file_format (std::istream& file, const std::string& filename)
 {
   load_save_format retval = LS_UNKNOWN;
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -450,17 +450,17 @@ octregexp (const octave_value_list& args
   // Alter the order of the output arguments
 
   if (extra_options)
     {
       int n = 0;
       octave_value_list new_retval;
       new_retval.resize (nargout);
 
-      OCTAVE_LOCAL_BUFFER_INIT (int, arg_used, 7, false);
+      int arg_used[7] {};
 
       for (int j = 2; j < nargin; j++)
         {
           int k = 0;
           std::string str = args(j).string_value ();
           std::transform (str.begin (), str.end (), str.begin (), tolower);
 
           if (str.find ("once", 0) == 0
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -139,17 +139,19 @@ ccolamd, csymamd, amd, colamd, symamd, a
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
-  OCTAVE_LOCAL_BUFFER (double, knobs, CCOLAMD_KNOBS);
+  static_assert (CCOLAMD_KNOBS <= 40, "ccolamd: # of CCOLAMD_KNOBS exceeded.  Please report this to bugs.octave.org");
+  double knob_storage[CCOLAMD_KNOBS];
+  double *knobs = &knob_storage[0];
   CCOLAMD_NAME (_set_defaults) (knobs);
 
   // Check for user-passed knobs
   if (nargin > 1)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
@@ -252,17 +254,19 @@ ccolamd, csymamd, amd, colamd, symamd, a
   for (octave_idx_type i = 0; i < n_col+1; i++)
     p[i] = cidx[i];
 
   octave_idx_type Alen = CCOLAMD_NAME (_recommended) (nnz, n_row, n_col);
   OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, A, Alen);
   for (octave_idx_type i = 0; i < nnz; i++)
     A[i] = ridx[i];
 
-  OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, stats, CCOLAMD_STATS);
+  static_assert (CCOLAMD_STATS <= 40, "ccolamd: # of CCOLAMD_STATS exceeded.  Please report this to bugs.octave.org");
+  octave::suitesparse_integer stats_storage[CCOLAMD_STATS];
+  octave::suitesparse_integer *stats = &stats_storage[0];
 
   if (nargin > 2)
     {
       NDArray in_cmember = args(2).array_value ();
       octave_idx_type cslen = in_cmember.numel ();
       OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, cmember, cslen);
       for (octave_idx_type i = 0; i < cslen; i++)
         // convert cmember from 1-based to 0-based
@@ -400,17 +404,19 @@ ccolamd, csymamd, amd, colamd, symamd, a
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
-  OCTAVE_LOCAL_BUFFER (double, knobs, CCOLAMD_KNOBS);
+  static_assert (CCOLAMD_KNOBS <= 40, "csymamd: # of CCOLAMD_KNOBS exceeded.  Please report this to bugs.octave.org");
+  double knob_storage[CCOLAMD_KNOBS];
+  double *knobs = &knob_storage[0];
   CCOLAMD_NAME (_set_defaults) (knobs);
 
   // Check for user-passed knobs
   if (nargin > 1)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
@@ -487,17 +493,19 @@ ccolamd, csymamd, amd, colamd, symamd, a
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
     err_square_matrix_required ("csymamd", "S");
 
   // Allocate workspace for symamd
   OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, perm, n_col+1);
-  OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, stats, CCOLAMD_STATS);
+  static_assert (CCOLAMD_STATS <= 40, "csymamd: # of CCOLAMD_STATS exceeded.  Please report this to bugs.octave.org");
+  octave::suitesparse_integer stats_storage[CCOLAMD_STATS];
+  octave::suitesparse_integer *stats = &stats_storage[0];
 
   if (nargin > 2)
     {
       NDArray in_cmember = args(2).array_value ();
       octave_idx_type cslen = in_cmember.numel ();
       OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, cmember, cslen);
       for (octave_idx_type i = 0; i < cslen; i++)
         // convert cmember from 1-based to 0-based
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -275,17 +275,19 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
-  OCTAVE_LOCAL_BUFFER (double, knobs, COLAMD_KNOBS);
+  static_assert (COLAMD_KNOBS <= 40, "colamd: # of COLAMD_KNOBS exceeded.  Please report this to bugs.octave.org");
+  double knob_storage[COLAMD_KNOBS];
+  double *knobs = &knob_storage[0];
   COLAMD_NAME (_set_defaults) (knobs);
 
   // Check for user-passed knobs
   if (nargin == 2)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
@@ -375,17 +377,19 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
     p[i] = cidx[i];
 
   octave_idx_type Alen = COLAMD_NAME (_recommended) (nnz, n_row, n_col);
   OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, A, Alen);
   for (octave_idx_type i = 0; i < nnz; i++)
     A[i] = ridx[i];
 
   // Order the columns (destroys A)
-  OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, stats, COLAMD_STATS);
+  static_assert (COLAMD_STATS <= 40, "colamd: # of COLAMD_STATS exceeded.  Please report this to bugs.octave.org");
+  octave::suitesparse_integer stats_storage[COLAMD_STATS];
+  octave::suitesparse_integer *stats = &stats_storage[0];
   if (! COLAMD_NAME () (n_row, n_col, Alen, A, p, knobs, stats))
     {
       COLAMD_NAME (_report)(stats);
 
       error ("colamd: internal error!");
     }
 
   // column elimination tree post-ordering (reuse variables)
@@ -513,17 +517,19 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (nargin == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
-  OCTAVE_LOCAL_BUFFER (double, knobs, COLAMD_KNOBS);
+  static_assert (COLAMD_KNOBS <= 40, "symamd: # of COLAMD_KNOBS exceeded.  Please report this to bugs.octave.org");
+  double knob_storage[COLAMD_KNOBS];
+  double *knobs = &knob_storage[0];
   COLAMD_NAME (_set_defaults) (knobs);
 
   // Check for user-passed knobs
   if (nargin == 2)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
@@ -575,17 +581,19 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
     err_square_matrix_required ("symamd", "S");
 
   // Allocate workspace for symamd
   OCTAVE_LOCAL_BUFFER (octave_idx_type, perm, n_col+1);
-  OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, stats, COLAMD_STATS);
+  static_assert (COLAMD_STATS <= 40, "symamd: # of COLAMD_STATS exceeded.  Please report this to bugs.octave.org");
+  octave::suitesparse_integer stats_storage[COLAMD_STATS];
+  octave::suitesparse_integer *stats = &stats_storage[0];
   if (! SYMAMD_NAME () (n_col, octave::to_suitesparse_intptr (ridx),
                         octave::to_suitesparse_intptr (cidx),
                         octave::to_suitesparse_intptr (perm),
                         knobs, stats, &calloc, &free))
     {
       SYMAMD_NAME (_report)(stats);
 
       error ("symamd: internal error!");
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -1649,21 +1649,20 @@ Array<T>::hermitian (T (*fcn) (const T&)
   octave_idx_type nc = dim2 ();
 
   if (nr >= 8 && nc >= 8)
     {
       Array<T> result (dim_vector (nc, nr));
 
       // Blocked transpose to attempt to avoid cache misses.
 
-      // Don't use OCTAVE_LOCAL_BUFFER here as it doesn't work with bool
-      // on some compilers.
       T buf[64];
 
-      octave_idx_type ii = 0, jj;
+      octave_idx_type ii = 0;
+      octave_idx_type jj;
       for (jj = 0; jj < (nc - 8 + 1); jj += 8)
         {
           for (ii = 0; ii < (nr - 8 + 1); ii += 8)
             {
               // Copy to buffer
               for (octave_idx_type j = jj, k = 0, idxj = jj * nr;
                    j < jj + 8; j++, idxj += nr)
                 for (octave_idx_type i = ii; i < ii + 8; i++)
