# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289291058 18000
#      Tue Nov 09 03:24:18 2010 -0500
# Node ID 2554b4a0806e7faac456e20f712aedf1c6b02fcc
# Parent  b79924abf776260b095d7941c7fee689f9f077d7
use templates for some lo-mappers functions

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2010-11-09  John W. Eaton  <jwe@octave.org>
+
+	* lo-mappers.cc, lo-mappers.h (xmod, xrem): Move definitions
+	from lo-mappers.cc to lo-mappers.h and convert to templates.
+	(xtrunc): Move definitions from lo-mappers.cc to lo-mappers.h.
+	* lo-mappers.cc (fix): Use xtrunc.
+	* lo-mappers.h (xfloor): New functions.
+	(X_NINT): New template function.
+	(D_NINT, F_NINT): Define in terms of X_NINT.
+	* lo-utils.h, lo-utils.cc (D_NINT, F_NINT): Delete.
+	* lo-mappers.h, lo-mappers.cc (NINTbig,	NINT): Move from
+	lo-utils.cc and lo-utils.h.
+
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array<T>::sort, Array<T>::is_sorted,
 	Array<T>::is_sorted_rows): Use comparisons to sortmode values
 	instead of testing mode directly.
 
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -50,17 +50,17 @@ double
 conj (double x)
 {
   return x;
 }
 
 double
 fix (double x)
 {
-  return gnulib::trunc (x);
+  return xtrunc (x);
 }
 
 double
 imag (double)
 {
   return 0.0;
 }
 
@@ -71,22 +71,16 @@ real (double x)
 }
 
 double
 xround (double x)
 {
   return gnulib::round (x);
 }
 
-double
-xtrunc (double x)
-{
-  return gnulib::trunc (x);
-}
-
 double 
 xroundb (double x)
 {
   double t = xround (x);
 
   if (fabs (x - t) == 0.5)
     t = 2 * xtrunc (0.5 * t);
 
@@ -102,98 +96,16 @@ signum (double x)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
   return xisnan (x) ? octave_NaN : tmp;
 }
 
 double
-xmod (double x, double y)
-{
-  double retval;
-
-  if (y == 0)
-    retval = x;
-  else
-    {
-      double q = x / y;
-
-      double n = floor (q);
-
-      if (D_NINT (y) != y)
-        {
-          if (D_NINT (q) == q)
-            n = q;
-          else
-            {
-              if (x >= -1 && x <= 1)
-                {
-                  if (std::abs (q - D_NINT (q)) < DBL_EPSILON)
-                    n = D_NINT (q);
-                }
-              else
-                {
-                  if (std::abs ((q - D_NINT (q))/ D_NINT (q)) < DBL_EPSILON)
-                    n = D_NINT (q);
-                }
-            }
-        }
-
-      retval = x - y * n;
-    }
-
-  if (x != y && y != 0)
-    retval = copysignf (retval, y);
-
-  return retval;
-}
-
-double
-xrem (double x, double y)
-{
-  double retval;
-
-  if (y == 0)
-    retval = x;
-  else
-    {
-      double q = x / y;
-
-      double n = trunc (q);
-
-      if (D_NINT (y) != y)
-        {
-          if (D_NINT (q) == q)
-            n = q;
-          else
-            {
-              if (x >= -1 && x <= 1)
-                {
-                  if (std::abs (q - D_NINT (q)) < DBL_EPSILON)
-                    n = D_NINT (q);
-                }
-              else
-                {
-                  if (std::abs ((q - D_NINT (q))/ D_NINT (q)) < DBL_EPSILON)
-                    n = D_NINT (q);
-                }
-            }
-        }
-
-      retval = x - y * n;
-    }
-
-  if (x != y && y != 0)
-    retval = copysignf (retval, x);
-
-  return retval;
-}
-
-double
 xlog2 (double x)
 {
 #if defined (HAVE_LOG2)
   return log2 (x);
 #else
 #if defined (M_LN2)
   static double ln2 = M_LN2;
 #else
@@ -411,17 +323,17 @@ float
 conj (float x)
 {
   return x;
 }
 
 float
 fix (float x)
 {
-  return gnulib::truncf (x);
+  return xtrunc (x);
 }
 
 float
 imag (float)
 {
   return 0.0;
 }
 
@@ -432,22 +344,16 @@ real (float x)
 }
 
 float
 xround (float x)
 {
   return gnulib::round (x);
 }
 
-float
-xtrunc (float x)
-{
-  return gnulib::truncf (x);
-}
-
 float 
 xroundb (float x)
 {
   float t = xround (x);
 
   if (fabs (x - t) == 0.5)
     t = 2 * xtrunc (0.5 * t);
 
@@ -463,98 +369,16 @@ signum (float x)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
   return xisnan (x) ? octave_Float_NaN : tmp;
 }
 
 float
-xmod (float x, float y)
-{
-  float retval;
-
-  if (y == 0)
-    retval = x;
-  else
-    {
-      float q = x / y;
-
-      float n = floor (q);
-
-      if (F_NINT (y) != y)
-        {
-          if (F_NINT (q) == q)
-            n = q;
-          else
-            {
-              if (x >= -1 && x <= 1)
-                {
-                  if (std::abs (q - F_NINT (q)) < FLT_EPSILON)
-                    n = F_NINT (q);
-                }
-              else
-                {
-                  if (std::abs ((q - F_NINT (q))/ F_NINT (q)) < FLT_EPSILON)
-                    n = F_NINT (q);
-                }
-            }
-        }
-
-      retval = x - y * n;
-    }
-
-  if (x != y && y != 0)
-    retval = copysignf (retval, y);
-
-  return retval;
-}
-
-float
-xrem (float x, float y)
-{
-  float retval;
-
-  if (y == 0)
-    retval = x;
-  else
-    {
-      float q = x / y;
-
-      float n = truncf (q);
-
-      if (F_NINT (y) != y)
-        {
-          if (F_NINT (q) == q)
-            n = q;
-          else
-            {
-              if (x >= -1 && x <= 1)
-                {
-                  if (std::abs (q - F_NINT (q)) < FLT_EPSILON)
-                    n = F_NINT (q);
-                }
-              else
-                {
-                  if (std::abs ((q - F_NINT (q))/ F_NINT (q)) < FLT_EPSILON)
-                    n = F_NINT (q);
-                }
-            }
-        }
-
-      retval = x - y * n;
-    }
-
-  if (x != y && y != 0)
-    retval = copysignf (retval, x);
-
-  return retval;
-}
-
-float
 xlog2 (float x)
 {
 #if defined (HAVE_LOG2)
   return log2 (x);
 #else
 #if defined (M_LN2)
   static float ln2 = M_LN2;
 #else
@@ -847,8 +671,57 @@ FloatComplex rc_sqrt (float x)
   return x < 0.0f ? FloatComplex (0.0f, sqrtf (-x)) : FloatComplex (sqrtf (x));
 }
 
 bool xnegative_sign (double x)
 { return __lo_ieee_signbit (x); }
 
 bool xnegative_sign (float x)
 { return __lo_ieee_float_signbit (x); }
+
+// Convert X to the nearest integer value.  Should not pass NaN to
+// this function.
+
+// Sometimes you need a large integer, but not always.
+
+octave_idx_type
+NINTbig (double x)
+{
+  if (x > std::numeric_limits<octave_idx_type>::max ())
+    return std::numeric_limits<octave_idx_type>::max ();
+  else if (x < std::numeric_limits<octave_idx_type>::min ())
+    return std::numeric_limits<octave_idx_type>::min ();
+  else
+    return static_cast<octave_idx_type> ((x > 0) ? (x + 0.5) : (x - 0.5));
+}
+
+octave_idx_type
+NINTbig (float x)
+{
+  if (x > std::numeric_limits<octave_idx_type>::max ())
+    return std::numeric_limits<octave_idx_type>::max ();
+  else if (x < std::numeric_limits<octave_idx_type>::min ())
+    return std::numeric_limits<octave_idx_type>::min ();
+  else
+    return static_cast<octave_idx_type> ((x > 0) ? (x + 0.5) : (x - 0.5));
+}
+
+int
+NINT (double x)
+{
+  if (x > std::numeric_limits<int>::max ())
+    return std::numeric_limits<int>::max ();
+  else if (x < std::numeric_limits<int>::min ())
+    return std::numeric_limits<int>::min ();
+  else
+    return static_cast<int> ((x > 0) ? (x + 0.5) : (x - 0.5));
+}
+
+int
+NINT (float x)
+{
+  if (x > std::numeric_limits<int>::max ())
+    return std::numeric_limits<int>::max ();
+  else if (x < std::numeric_limits<int>::min ())
+    return std::numeric_limits<int>::min ();
+  else
+    return static_cast<int> ((x > 0) ? (x + 0.5) : (x - 0.5));
+}
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -20,31 +20,34 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_liboctave_mappers_h)
 #define octave_liboctave_mappers_h 1
 
+#include <limits>
+
 #include "oct-cmplx.h"
 #include "lo-math.h"
 
 // Double Precision 
+inline double xtrunc (double x) { return gnulib::trunc (x); }
+inline double xcopysign (double x, double y) { return copysignf (x, y); }
+inline double xfloor (double x) { return floor (x); }
+
 extern OCTAVE_API double arg (double x);
 extern OCTAVE_API double conj (double x);
 extern OCTAVE_API double fix (double x);
 extern OCTAVE_API double imag (double x);
 extern OCTAVE_API double real (double x);
 extern OCTAVE_API double xround (double x);
 extern OCTAVE_API double xroundb (double x);
 extern OCTAVE_API double signum (double x);
-extern OCTAVE_API double xtrunc (double x);
-extern OCTAVE_API double xmod (double x, double y);
-extern OCTAVE_API double xrem (double x, double y);
 extern OCTAVE_API double xlog2 (double x); 
 extern OCTAVE_API Complex xlog2 (const Complex& x); 
 extern OCTAVE_API double xlog2 (double x, int& exp);
 extern OCTAVE_API Complex xlog2 (const Complex& x, int& exp);
 extern OCTAVE_API double xexp2 (double x);
 
 // These are used by the BOOL_OP macros in mx-op-defs.h.
 inline bool xisnan (bool) { return false; }
@@ -114,27 +117,28 @@ xisinf (const Complex& x)
 
 extern OCTAVE_API bool octave_is_NA (const Complex& x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (const Complex& x);
 
 extern OCTAVE_API Complex xmin (const Complex& x, const Complex& y);
 extern OCTAVE_API Complex xmax (const Complex& x, const Complex& y);
 
 // Single Precision 
+inline float xtrunc (float x) { return gnulib::truncf (x); }
+inline float xcopysign (float x, float y) { return copysignf (x, y); }
+inline float xfloor (float x) { return floorf (x); }
+
 extern OCTAVE_API float arg (float x);
 extern OCTAVE_API float conj (float x);
 extern OCTAVE_API float fix (float x);
 extern OCTAVE_API float imag (float x);
 extern OCTAVE_API float real (float x);
 extern OCTAVE_API float xround (float x);
 extern OCTAVE_API float xroundb (float x);
 extern OCTAVE_API float signum (float x);
-extern OCTAVE_API float xtrunc (float x);
-extern OCTAVE_API float xmod (float x, float y);
-extern OCTAVE_API float xrem (float x, float y);
 extern OCTAVE_API float xlog2 (float x); 
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x); 
 extern OCTAVE_API float xlog2 (float x, int& exp);
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x, int& exp);
 extern OCTAVE_API float xexp2 (float x);
 
 #if defined (HAVE_CMATH_ISNANF)
 inline bool xisnan (float x)
@@ -219,10 +223,118 @@ inline bool xisinteger (double x)
 { return xfinite (x) && x == xround (x); }
 inline bool xisinteger (float x)
 { return xfinite (x) && x == xround (x); }
 
 // Test for negative sign. 
 extern OCTAVE_API bool xnegative_sign (double x);
 extern OCTAVE_API bool xnegative_sign (float x);
 
+extern OCTAVE_API octave_idx_type NINTbig (double x);
+extern OCTAVE_API octave_idx_type NINTbig (float x);
+
+extern OCTAVE_API int NINT (double x);
+extern OCTAVE_API int NINT (float x);
+
+template <typename T>
+OCTAVE_API
+T
+X_NINT (T x)
+{
+  return (xisinf (x) || xisnan (x)) ? x : xfloor (x + 0.5);
+}
+
+inline OCTAVE_API double D_NINT (double x) { return X_NINT (x); }
+inline OCTAVE_API float F_NINT (float x) { return X_NINT (x); }
+
+// Template functions can have either float or double arguments.
+
+template <typename T>
+OCTAVE_API
+T
+xmod (T x, T y)
+{
+  T retval;
+
+  if (y == 0)
+    retval = x;
+  else
+    {
+      T q = x / y;
+
+      T n = floor (q);
+
+      if (X_NINT (y) != y)
+        {
+          if (X_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - X_NINT (q))
+                      < std::numeric_limits<T>::epsilon ())
+                    n = X_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - X_NINT (q))/ X_NINT (q))
+                      < std::numeric_limits<T>::epsilon ())
+                    n = D_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = xcopysign (retval, y);
+
+  return retval;
+}
+
+template <typename T>
+OCTAVE_API
+T
+xrem (T x, T y)
+{
+  T retval;
+
+  if (y == 0)
+    retval = x;
+  else
+    {
+      T q = x / y;
+
+      T n = xtrunc (q);
+
+      if (X_NINT (y) != y)
+        {
+          if (X_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - X_NINT (q))
+                      < std::numeric_limits<T>::epsilon ())
+                    n = X_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - X_NINT (q))/ X_NINT (q))
+                      < std::numeric_limits<T>::epsilon ())
+                    n = X_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = xcopysign (retval, x);
+
+  return retval;
+}
 
 #endif
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -40,83 +40,16 @@ along with Octave; see the file COPYING.
 
 #include "quit.h"
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
-// Convert X to the nearest integer value.  Should not pass NaN to
-// this function.
-
-// Sometimes you need a large integer, but not always.
-
-octave_idx_type
-NINTbig (double x)
-{
-  if (x > std::numeric_limits<octave_idx_type>::max ())
-    return std::numeric_limits<octave_idx_type>::max ();
-  else if (x < std::numeric_limits<octave_idx_type>::min ())
-    return std::numeric_limits<octave_idx_type>::min ();
-  else
-    return static_cast<octave_idx_type> ((x > 0) ? (x + 0.5) : (x - 0.5));
-}
-
-octave_idx_type
-NINTbig (float x)
-{
-  if (x > std::numeric_limits<octave_idx_type>::max ())
-    return std::numeric_limits<octave_idx_type>::max ();
-  else if (x < std::numeric_limits<octave_idx_type>::min ())
-    return std::numeric_limits<octave_idx_type>::min ();
-  else
-    return static_cast<octave_idx_type> ((x > 0) ? (x + 0.5) : (x - 0.5));
-}
-
-int
-NINT (double x)
-{
-  if (x > std::numeric_limits<int>::max ())
-    return std::numeric_limits<int>::max ();
-  else if (x < std::numeric_limits<int>::min ())
-    return std::numeric_limits<int>::min ();
-  else
-    return static_cast<int> ((x > 0) ? (x + 0.5) : (x - 0.5));
-}
-
-int
-NINT (float x)
-{
-  if (x > std::numeric_limits<int>::max ())
-    return std::numeric_limits<int>::max ();
-  else if (x < std::numeric_limits<int>::min ())
-    return std::numeric_limits<int>::min ();
-  else
-    return static_cast<int> ((x > 0) ? (x + 0.5) : (x - 0.5));
-}
-
-double
-D_NINT (double x)
-{
-  if (xisinf (x) || xisnan (x))
-    return x;
-  else
-    return floor (x + 0.5);
-}
-
-float
-F_NINT (float x)
-{
-  if (xisinf (x) || xisnan (x))
-    return x;
-  else
-    return floor (x + 0.5);
-}
-
 bool xis_int_or_inf_or_nan (double x)
 { return xisnan (x) || D_NINT (x) == x; }
 
 bool xis_one_or_zero (double x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (double x)
 { return x == 0; }
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -27,23 +27,16 @@ along with Octave; see the file COPYING.
 #include <cstdio>
 
 #include <iostream>
 #include <string>
 
 #include "oct-cmplx.h"
 #include "syswait.h"
 
-extern OCTAVE_API octave_idx_type NINTbig (double x);
-extern OCTAVE_API octave_idx_type NINTbig (float x);
-extern OCTAVE_API int NINT (double x);
-extern OCTAVE_API int NINT (float x);
-extern OCTAVE_API double D_NINT (double x);
-extern OCTAVE_API float F_NINT (float x);
-
 extern OCTAVE_API bool xis_int_or_inf_or_nan (double x);
 extern OCTAVE_API bool xis_one_or_zero (double x);
 extern OCTAVE_API bool xis_zero (double x);
 extern OCTAVE_API bool xtoo_large_for_float (double x);
 
 extern OCTAVE_API bool xis_int_or_inf_or_nan (float x);
 extern OCTAVE_API bool xis_one_or_zero (float x);
 extern OCTAVE_API bool xis_zero (float x);
