# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1505498613 14400
#      Fri Sep 15 14:03:33 2017 -0400
# Node ID a666e433aa21171836d3116981885ce725a43c2b
# Parent  76d90f0c81af299e2e6b6c87e0d3fbe3c0a2c265
avoid memory leak when parsing function and classdef files

* oct-parse.in.yy (file): Delete current scope before popping
unused symbol table context.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1459,16 +1459,17 @@ file            : begin_file opt_nl opt_
                       {
                         // Delete the dummy statement_list we created
                         // after parsing the function.  Any function
                         // definitions found in the file have already
                         // been stored in the symbol table or in
                         // base_parser::m_primary_fcn_ptr.
 
                         // Unused symbol table context.
+                        delete lexer.symtab_context.curr_scope ();
                         lexer.symtab_context.pop ();
 
                         delete $3;
                       }
                     else
                       {
                         octave::tree_statement *end_of_script
                           = parser.make_end ("endscript", true,
@@ -1482,16 +1483,17 @@ file            : begin_file opt_nl opt_
                   }
                 | begin_file opt_nl classdef parsing_local_fcns opt_sep opt_fcn_list END_OF_INPUT
                   {
                     YYUSE ($2);
                     YYUSE ($5);
                     YYUSE ($6);
 
                     // Unused symbol table context.
+                    delete lexer.symtab_context.curr_scope ();
                     lexer.symtab_context.pop ();
 
                     if (lexer.reading_classdef_file)
                       parser.m_classdef_object = $3;
 
                     $$ = nullptr;
                   }
                 ;
