# HG changeset patch
# User jwe
# Date 1022185736 0
#      Thu May 23 20:28:56 2002 +0000
# Node ID dc970f5941ee4001fe1f86240ea362d18e1cc4c7
# Parent  8194e0b10a9a316da19ffc4cabca55d5abb05e0c
[project @ 2002-05-23 20:28:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,13 @@
 2002-05-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* LSODE.cc (LSODE::do_integrate): Define method flag and iopt
-	here, not as class data members.	
+	* LSODE.cc (LSODE_options::x_integration_method): New data member.
+	(LSODE_options::set_integration_method,
+	LSODE_options::integration_method): New functions.
 
 	* LSODE.h (LSODE_options::x_absolute_tolerance): Now Array<double>.
 	Change all uses.
 	(LSODE_OPTIONS::absolute_tolerance): Return Array<double>, not double.
 	(LSODE_OPTIONS::set_absolute_tolerance (const Array<double>&)):
 	New function.
 
 	* Array.h (Array::fortran_vec): New const version.
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -32,16 +32,28 @@ Software Foundation, 59 Temple Place - S
 #include <cmath>
 
 #include <iostream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
+void
+LSODE_options::set_integration_method (const std::string& val)
+{
+  if (val == "stiff" || val == "bdf")
+    x_integration_method = "stiff";
+  else if (val == "non-stiff" || val == "adams")
+    x_integration_method = "non-stiff";
+  else
+    (*current_liboctave_error_handler)
+      ("lsode_options: method must be \"stiff\", \"bdf\", \"non-stiff\", or \"adams\"");
+}
+
 typedef int (*lsode_fcn_ptr) (const int&, const double&, double*,
 			      double*, int&);
 
 typedef int (*lsode_jac_ptr) (const int&, const double&, double*,
 			      const int&, const int&, double*, const
 			      int&);
 
 extern "C"
@@ -61,19 +73,17 @@ LSODE::LSODE (void) : ODE (), LSODE_opti
   stop_time_set = 0;
   stop_time = 0.0;
 
   integration_error = 0;
   restart = 1;
 
   istate = 1;
   itask = 1;
-
-  liw = 20 + n;
-  lrw = 22 + n * (9 + n);
+  iopt = 0;
 
   sanity_checked = 0;
 }
 
 LSODE::LSODE (const ColumnVector& state, double time, const ODEFunc& f)
   : ODE (state, time, f), LSODE_options ()
 {
   n = size ();
@@ -81,19 +91,17 @@ LSODE::LSODE (const ColumnVector& state,
   stop_time_set = 0;
   stop_time = 0.0;
 
   integration_error = 0;
   restart = 1;
 
   istate = 1;
   itask = 1;
-
-  liw = 20 + n;
-  lrw = 22 + n * (9 + n);
+  iopt = 0;
 
   sanity_checked = 0;
 }
 
 void
 LSODE::force_restart (void)
 {
   restart = 1;
@@ -160,35 +168,50 @@ LSODE::do_integrate (double tout)
   ColumnVector retval;
 
   if (restart)
     {
       restart = 0;
       istate = 1;
     }
 
+  if (integration_method () == "stiff")
+    {
+      if (jac)
+	method_flag = 21;
+      else
+	method_flag = 22;
+
+      liw = 20 + n;
+      lrw = 22 + n * (9 + n);
+    }
+  else
+    {
+      method_flag = 10;
+
+      liw = 20;
+      lrw = 22 + 16 * n;
+    }
+
   if (iwork.length () != liw)
     {
       iwork.resize (liw);
 
       for (int i = 4; i < 9; i++)
 	iwork.elem (i) = 0;
     }
 
   if (rwork.length () != lrw)
     {
       rwork.resize (lrw);
 
       for (int i = 4; i < 9; i++)
 	rwork.elem (i) = 0;
     }
 
-  int method_flag = jac ? 21 : 22;
-  int iopt = 0;
-
   integration_error = 0;
 
   double *xp = x.fortran_vec ();
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -52,34 +52,35 @@ public:
   ~LSODE_options (void) { }
 
   void init (void)
     {
       double sqrt_eps = ::sqrt (DBL_EPSILON);
       x_absolute_tolerance.resize (1);
       x_absolute_tolerance(0) = sqrt_eps;
       x_initial_step_size = -1.0;
+      x_integration_method = "stiff";
       x_maximum_step_size = -1.0;
       x_minimum_step_size = 0.0;
       x_relative_tolerance = sqrt_eps;
 
       // This is consistent with earlier versions of Octave, and is
       // much larger than the default of 500 specified in the LSODE
       // sources.
       x_step_limit = 100000;
     }
 
   void copy (const LSODE_options& opt)
     {
       x_absolute_tolerance = opt.x_absolute_tolerance;
       x_initial_step_size = opt.x_initial_step_size;
+      x_integration_method = opt.x_integration_method;
       x_maximum_step_size = opt.x_maximum_step_size;
       x_minimum_step_size = opt.x_minimum_step_size;
       x_relative_tolerance = opt.x_relative_tolerance;
-
       x_step_limit = opt.x_step_limit;
     }
 
   void set_default_options (void) { init (); }
 
   void set_absolute_tolerance (double val)
     {
       x_absolute_tolerance.resize (1);
@@ -87,16 +88,18 @@ public:
     }
 
   void set_absolute_tolerance (const Array<double>& val)
     { x_absolute_tolerance = val; }
 
   void set_initial_step_size (double val)
     { x_initial_step_size = (val >= 0.0) ? val : -1.0; }
 
+  void set_integration_method (const std::string& val);
+
   void set_maximum_step_size (double val)
     { x_maximum_step_size = (val >= 0.0) ? val : -1.0; }
 
   void set_minimum_step_size (double val)
     { x_minimum_step_size = (val >= 0.0) ? val : 0.0; }
 
   void set_relative_tolerance (double val)
     { x_relative_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
@@ -105,32 +108,36 @@ public:
     { x_step_limit = val; }
 
   Array<double> absolute_tolerance (void) const
     { return x_absolute_tolerance; }
 
   double initial_step_size (void) const
     { return x_initial_step_size; }
 
+  std::string integration_method (void) const
+    { return x_integration_method; }
+
   double maximum_step_size (void) const
     { return x_maximum_step_size; }
 
   double minimum_step_size (void) const
     { return x_minimum_step_size; }
 
   double relative_tolerance (void) const
     {  return x_relative_tolerance; }
 
   int step_limit (void) const
     { return x_step_limit; }
 
 private:
 
   Array<double> x_absolute_tolerance;
   double x_initial_step_size;
+  std::string x_integration_method;
   double x_maximum_step_size;
   double x_minimum_step_size;
   double x_relative_tolerance;
 
   int x_step_limit;
 };
 
 class
@@ -160,20 +167,22 @@ public:
 private:
 
   double stop_time;
   int stop_time_set;
 
   int n;
   int integration_error;
   int restart;
+  int method_flag;
   Array<int> iwork;
   Array<double> rwork;
   int istate;
   int itask;
+  int iopt;
   int liw;
   int lrw;
   int sanity_checked;
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
   friend int lsode_j (int *neq, double *t, double *y, int *ml, int *mu,
 		      double *pd, int *nrowpd);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -4,16 +4,25 @@ 2002-05-23  John W. Eaton  <jwe@bevo.che
 	LSODE_options::da_get_opt_mf): New typedefs.
 	(LSODE_OPTIONS::da_set_fcn, LSODE_OPTIONS::da_get_fcn): New fields.
 	(lsode_option_table): Fill them in.
 	(set_lsode_option (const Array<double>&)): New function.
 	(print_lsode_option_list): Handle vector options.
 	(show_lsode_option_list): Likewise.
 	(Flsode_options): Likewise.
 
+	* DLD-FUNCTIONS/lsode.cc (LSODE_options::s_set_opt_mf,
+	LSODE_options::s_get_opt_mf): New typedefs.
+	(LSODE_OPTIONS::s_set_fcn, LSODE_OPTIONS::s_get_fcn): New fields.
+	(lsode_option_table): Fill them in.
+	(set_lsode_option (const std::string&)): New function.
+	(print_lsode_option_list): Handle string options.
+	(show_lsode_option_list): Likewise.
+	(Flsode_options): Likewise.
+
 2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* c-file-ptr-stream.h (c_file_ptr_buf::fclose): New function.
 	(c_file_ptr_buf::c_file_ptr_buf): Use it as default argument
 	instead of extern "C" fclose function.
 	(i_c_file_ptr_stream::i_c_file_ptr_stream): Likewise.
 	(o_c_file_ptr_stream::o_c_file_ptr_stream): Likewise.
 	* oct-stdstrm.h (octave_istdiostream::octave_istdiostream): Likewise.
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -293,78 +293,90 @@ discontinuity in the derivative.\n\
   unwind_protect::run_frame ("Flsode");
 
   return retval;
 }
 
 typedef void (LSODE_options::*da_set_opt_mf) (const Array<double>&);
 typedef void (LSODE_options::*d_set_opt_mf) (double);
 typedef void (LSODE_options::*i_set_opt_mf) (int);
+typedef void (LSODE_options::*s_set_opt_mf) (const std::string&);
+
 typedef Array<double> (LSODE_options::*da_get_opt_mf) (void) const;
 typedef double (LSODE_options::*d_get_opt_mf) (void) const;
 typedef int (LSODE_options::*i_get_opt_mf) (void) const;
+typedef std::string (LSODE_options::*s_get_opt_mf) (void) const;
 
 #define MAX_TOKENS 3
 
 struct LSODE_OPTIONS
 {
   const char *keyword;
   const char *kw_tok[MAX_TOKENS + 1];
   int min_len[MAX_TOKENS + 1];
   int min_toks_to_match;
   da_set_opt_mf da_set_fcn;
   d_set_opt_mf d_set_fcn;
   i_set_opt_mf i_set_fcn;
+  s_set_opt_mf s_set_fcn;
   da_get_opt_mf da_get_fcn;
   d_get_opt_mf d_get_fcn;
   i_get_opt_mf i_get_fcn;
+  s_get_opt_mf s_get_fcn;
 };
 
 static LSODE_OPTIONS lsode_option_table [] =
 {
   { "absolute tolerance",
     { "absolute", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    &LSODE_options::set_absolute_tolerance, 0, 0,
-    &LSODE_options::absolute_tolerance, 0, 0, },
+    &LSODE_options::set_absolute_tolerance, 0, 0, 0,
+    &LSODE_options::absolute_tolerance, 0, 0, 0, },
 
   { "initial step size",
     { "initial", "step", "size", 0, },
-    { 1, 0, 0, 0, }, 1,
-    0, &LSODE_options::set_initial_step_size, 0,
-    0, &LSODE_options::initial_step_size, 0, },
+    { 3, 0, 0, 0, }, 1,
+    0, &LSODE_options::set_initial_step_size, 0, 0,
+    0, &LSODE_options::initial_step_size, 0, 0, },
+
+  { "integration method",
+    { "integration", "method", 0, 0, },
+    { 3, 0, 0, 0, }, 1,
+    0, 0, 0, &LSODE_options::set_integration_method,
+    0, 0, 0, &LSODE_options::integration_method, },
 
   { "maximum step size",
     { "maximum", "step", "size", 0, },
     { 2, 0, 0, 0, }, 1,
-    0, &LSODE_options::set_maximum_step_size, 0,
-    0, &LSODE_options::maximum_step_size, 0, },
+    0, &LSODE_options::set_maximum_step_size, 0, 0,
+    0, &LSODE_options::maximum_step_size, 0, 0, },
 
   { "minimum step size",
     { "minimum", "step", "size", 0, },
     { 2, 0, 0, 0, }, 1,
-    0, &LSODE_options::set_minimum_step_size, 0,
-    0, &LSODE_options::minimum_step_size, 0, },
+    0, &LSODE_options::set_minimum_step_size, 0, 0,
+    0, &LSODE_options::minimum_step_size, 0, 0, },
 
   { "relative tolerance",
     { "relative", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    0, &LSODE_options::set_relative_tolerance, 0,
-    0, &LSODE_options::relative_tolerance, 0, },
+    0, &LSODE_options::set_relative_tolerance, 0, 0,
+    0, &LSODE_options::relative_tolerance, 0, 0, },
 
   { "step limit",
     { "step", "limit", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    0, 0, &LSODE_options::set_step_limit,
-    0, 0, &LSODE_options::step_limit, },
+    0, 0, &LSODE_options::set_step_limit, 0,
+    0, 0, &LSODE_options::step_limit, 0, },
 
   { 0,
     { 0, 0, 0, 0, },
     { 0, 0, 0, 0, }, 0,
-    0, 0, 0, 0, 0, 0, },
+    0, 0, 0, 0,
+    0, 0, 0, 0, },
 };
 
 static void
 print_lsode_option_list (std::ostream& os)
 {
   print_usage ("lsode_options", 1);
 
   os << "\n"
@@ -405,24 +417,31 @@ print_lsode_option_list (std::ostream& o
       else if (list->d_get_fcn)
 	{
 	  double val = (lsode_opts.*list->d_get_fcn) ();
 	  if (val < 0.0)
 	    os << "computed automatically";
 	  else
 	    os << val;
 	}
-      else
+      else if (list->i_get_fcn)
 	{
 	  int val = (lsode_opts.*list->i_get_fcn) ();
 	  if (val < 0)
 	    os << "infinite";
 	  else
 	    os << val;
 	}
+      else if (list->s_get_fcn)
+	{
+	  os << (lsode_opts.*list->s_get_fcn) ();
+	}
+      else
+	panic_impossible ();
+
       os << "\n";
       list++;
     }
 
   os << "\n";
 }
 
 static void
@@ -473,16 +492,39 @@ set_lsode_option (const std::string& key
 	  return;
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword.c_str ());
 }
 
+static void
+set_lsode_option (const std::string& keyword, const std::string& val)
+{
+  LSODE_OPTIONS *list = lsode_option_table;
+
+  while (list->keyword != 0)
+    {
+      if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
+				list->min_toks_to_match, MAX_TOKENS))
+	{
+	  if (list->s_set_fcn)
+	    (lsode_opts.*list->s_set_fcn) (val);
+	  else
+	    error ("lsode_options: no function to handle string option");
+
+	  return;
+	}
+      list++;
+    }
+
+  warning ("lsode_options: no match for `%s'", keyword.c_str ());
+}
+
 static octave_value_list
 show_lsode_option (const std::string& keyword)
 {
   octave_value retval;
 
   LSODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
@@ -506,24 +548,30 @@ show_lsode_option (const std::string& ke
 	  else if (list->d_get_fcn)
 	    {
 	      double val = (lsode_opts.*list->d_get_fcn) ();
 	      if (val < 0.0)
 		retval = "computed automatically";
 	      else
 		retval = val;
 	    }
-	  else
+	  else if (list->i_get_fcn)
 	    {
 	      int val = (lsode_opts.*list->i_get_fcn) ();
 	      if (val < 0)
 		retval = "infinite";
 	      else
 		retval = static_cast<double> (val);
 	    }
+	  else if (list->s_get_fcn)
+	    {
+	      retval = (lsode_opts.*list->s_get_fcn) ();
+	    }
+	  else
+	    panic_impossible ();
 
 	  return retval;
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword.c_str ());
 
@@ -553,17 +601,24 @@ their current values are displayed.\n\
       std::string keyword = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (nargin == 1)
 	    retval = show_lsode_option (keyword);
 	  else
 	    {
-	      if (args(1).is_scalar_type ())
+	      if (args(1).is_string ())
+		{
+		  std::string val = args(1).string_value ();
+
+		  if (! error_state)
+		    set_lsode_option (keyword, val);
+		}
+	      else if (args(1).is_scalar_type ())
 		{
 		  double val = args(1).double_value ();
 
 		  if (! error_state)
 		    set_lsode_option (keyword, val);
 		}
 	      else
 		{
