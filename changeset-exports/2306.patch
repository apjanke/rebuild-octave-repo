# HG changeset patch
# User jwe
# Date 836931064 0
#      Tue Jul 09 16:51:04 1996 +0000
# Node ID 2fbf9bb1cd7ae3fd8f65087fbc86423c34b658e9
# Parent  5a3f1d00a474fde945a8d1d4f8742fdb6060df45
[project @ 1996-07-09 16:49:03 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -177,44 +177,44 @@ public:
 	return range_error ("T& Array<T>::checkelem", n);
       else
 	{
 	  make_unique ();
 	  return xelem (n);
 	}
     }
 
-#if defined (BOUNDS_CHECKING)
-  T& elem (int n) { return checkelem (n); }
-#else
   T& elem (int n)
     {
       make_unique ();
       return xelem (n);
     }
+
+#if defined (BOUNDS_CHECKING)
+  T& operator () (int n) { return checkelem (n); }
+#else
+  T& operator () (int n) { return elem (n); }
 #endif
 
-  T& operator () (int n) { return elem (n); }
-
   T Array<T>::checkelem (int n) const
     {
       if (n < 0 || n >= rep->length ())
 	return range_error ("T Array<T>::checkelem", n);
       else
 	return xelem (n);
     }
 
+  T Array<T>::elem (int n) const { return xelem (n); }
+
 #if defined (BOUNDS_CHECKING)
-  T Array<T>::elem (int n) const { return checkelem (n); }
+  T Array<T>::operator () (int n) const { return checkelem (n); }
 #else
-  T Array<T>::elem (int n) const { return xelem (n); }
+  T Array<T>::operator () (int n) const { return elem (n); }
 #endif
 
-  T Array<T>::operator () (int n) const { return elem (n); }
-
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
 
   Array<T>& qsort (int (*compare) (const void *, const void *))
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -115,63 +115,63 @@ public:
   int cols (void) const { return d2; }
   int columns (void) const { return d2; }
 
   // No checking of any kind, ever.
 
   T& xelem (int i, int j) { return Array<T>::xelem (d1*j+i); }
   T xelem (int i, int j) const { return Array<T>::xelem (d1*j+i); }
 
-  // Note that the following element references don't use
-  // Array2<T>::xelem() because they still need to make use of the
-  // code in Array<T> that checks the reference count.
+  // Note that the following element selection methods don't use
+  // xelem() because they need to make use of the code in
+  // Array<T>::elem() that checks the reference count.
 
   T& checkelem (int i, int j)
     {
       if (i < 0 || j < 0 || i >= d1 || j >= d2)
 	{
 	  (*current_liboctave_error_handler)
 	    ("T& Array2<T>::checkelem (%d, %d): range error", i, j);
 	  static T foo;
 	  return foo;
 	}
       else
 	return Array<T>::elem (d1*j+i);
     }
 
+  T& elem (int i, int j) { return Array<T>::elem (d1*j+i); }
+
 #if defined (BOUNDS_CHECKING)
-  T& elem (int i, int j) { return checkelem (i, j); }
+  T& operator () (int i, int j) { return checkelem (i, j); }
 #else
-  T& elem (int i, int j) { return Array<T>::elem (d1*j+i); }
+  T& operator () (int i, int j) { return elem (i, j); }
 #endif
 
-  T& operator () (int i, int j) { return elem (i, j); }
-
   T checkelem (int i, int j) const
     {
       if (i < 0 || j < 0 || i >= d1 || j >= d2)
 	{
 	  (*current_liboctave_error_handler)
 	    ("T Array2<T>::checkelem (%d, %d): range error", i, j);
 	  T foo;
 	  static T *bar = &foo;
 	  return foo;
 	}
       else
 	return Array<T>::elem (d1*j+i);
     }
 
+  T elem (int i, int j) const { return Array<T>::elem (d1*j+i); }
+
 #if defined (BOUNDS_CHECKING)
-  T elem (int i, int j) const { return checkelem (i, j); }
+  T operator () (int i, int j) const { return checkelem (i, j); }
 #else
-  T elem (int i, int j) const { return Array<T>::elem (d1*j+i); }
+  T operator () (int i, int j) const { return elem (i, j); }
 #endif
 
-  T operator () (int i, int j) const { return elem (i, j); }
-
   T range_error (const char *fcn, int i, int j) const;
   T& range_error (const char *fcn, int i, int j);
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
 
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -40,64 +40,16 @@ Software Foundation, 59 Temple Place - S
 #include "Array3-idx.h"
 #endif
 
 #include "lo-error.h"
 
 // Three dimensional array class.
 
 template <class T>
-T&
-Array3<T>::checkelem (int i, int j, int k)
-{
-  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      static T foo;
-      return foo;
-    }
-  return Array2<T>::elem (i, d2*k+j);
-}
-
-template <class T>
-T
-Array3<T>::elem (int i, int j, int k) const
-{
-  return Array2<T>::elem (i, d2*k+j);
-}
-
-template <class T>
-T
-Array3<T>::checkelem (int i, int j, int k) const
-{
-  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      T foo;
-      static T *bar = &foo;
-      return foo;
-    }
-  return Array2<T>::elem (i, d1*k+j);
-}
-
-template <class T>
-T
-Array3<T>::operator () (int i, int j, int k) const
-{
-  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      T foo;
-      static T *bar = &foo;
-      return foo;
-    }
-  return Array2<T>::elem (i, d2*k+j);
-}
-
-template <class T>
 void
 Array3<T>::resize (int n, int m, int k)
 {
   assert (0); // XXX FIXME XXX
 }
 
 template <class T>
 void
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -94,27 +94,63 @@ public:
 	  d3 = a.d3;
 	}
 
       return *this;
     }
 
   int dim3 (void) const { return d3; }
 
-  T& elem (int i, int j, int k) { return Array2<T>::elem (i, d2*k+j); }
-  T& checkelem (int i, int j, int k);
-  T& operator () (int i, int j, int k) { return checkelem (i, j, k); }
-
-  // No checking.
+  // No checking of any kind, ever.
 
   T& xelem (int i, int j, int k) { return Array2<T>::xelem (i, d2*k+j); }
+  T xelem (int i, int j, int k) const { return Array2<T>::xelem (i, d2*k+j); }
 
-  T elem (int i, int j, int k) const;
-  T checkelem (int i, int j, int k) const;
-  T operator () (int i, int j, int k) const;
+  // Note that the following element selection methods don't use
+  // xelem() because they need to make use of the code in
+  // Array<T>::elem() that checks the reference count.
+
+  T& checkelem (int i, int j, int k)
+    {
+      if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  static T foo;
+	  return foo;
+	}
+      return Array2<T>::elem (i, d2*k+j);
+    }
+
+  T& elem (int i, int j, int k) { return Array2<T>::elem (i, d2*k+j); }
+
+#if defined (BOUNDS_CHECKING)
+  T& operator () (int i, int j, int k) { return checkelem (i, j, k); }
+#else
+  T& operator () (int i, int j, int k) { return elem (i, j, k); }
+#endif
+
+  T checkelem (int i, int j, int k) const
+    {
+      if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  T foo;
+	  static T *bar = &foo;
+	  return foo;
+	}
+      return Array2<T>::elem (i, d1*k+j);
+    }
+
+  T elem (int i, int j, int k) const { return Array2<T>::elem (i, d2*k+j); }
+
+#if defined (BOUNDS_CHECKING)
+  T operator () (int i, int j, int k) const { return checkelem (i, j, k); }
+#else
+  T operator () (int i, int j, int k) const { return elem (i, j, k); }
+#endif
 
   void resize (int n, int m, int k);
   void resize (int n, int m, int k, const T& val);
 
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j, idx_vector& k);
 
   Array3<T> value (void);
