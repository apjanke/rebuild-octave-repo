# HG changeset patch
# User jwe
# Date 812726542 0
#      Tue Oct 03 13:22:22 1995 +0000
# Node ID 14d8c0a838c11b1c3535fd2bd18f223816c78be3
# Parent  d361954e95ae3316c23725fc3de33811e7b74a05
[project @ 1995-10-03 13:21:12 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -130,16 +130,20 @@ tree_statement_list *global_command = 0;
 tree_function *curr_function = 0;
 
 // Nonzero means input is coming from startup file.
 int input_from_startup_file = 0;
 
 // The command-line options.
 Octave_str_obj octave_argv;
 
+// Nonzero means that input is coming from a file that was named on
+// the command line.
+int input_from_command_line_file = 1;
+
 // Top level context (?)
 jmp_buf toplevel;
 
 // This is not really the right place to do this...
 typedef void (*one_arg_error_handler_t) (const char*);
 extern one_arg_error_handler_t set_Complex_error_handler
   (one_arg_error_handler_t f);
 
@@ -309,20 +313,22 @@ parse_and_execute (FILE *f, int print)
   add_unwind_protect (restore_input_buffer, (void *) old_buf);
   add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
   switch_to_buffer (new_buf);
 
   unwind_protect_int (echo_input);
   unwind_protect_int (using_readline);
   unwind_protect_int (saving_history);
+  unwind_protect_int (input_from_command_line_file);
 
   echo_input = 0;
   using_readline = 0;
   saving_history = 0;
+  input_from_command_line_file = 0;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
     {
       reset_parser ();
 
@@ -658,16 +664,18 @@ main (int argc, char **argv)
     {
       reading_script_file = 1;
       curr_fcn_file_name = argv[optind];
 
       FILE *infile = get_input_from_file (curr_fcn_file_name);
 
       if (infile)
 	{
+	  input_from_command_line_file = 1;
+
 	  bind_builtin_variable ("program_invocation_name",
 				 curr_fcn_file_name);
 
 	  char *tmp = strrchr (curr_fcn_file_name, '/');
 	  tmp = tmp ? tmp+1 : curr_fcn_file_name;
 
 	  bind_builtin_variable ("program_name", tmp);
 
@@ -891,20 +899,22 @@ evaluate NAME as a function, passing ARG
 
 static Octave_object
 eval_string (const char *string, int print, int& parse_status,
 	     int nargout) 
 {
   begin_unwind_frame ("eval_string");
 
   unwind_protect_int (get_input_from_eval_string);
+  unwind_protect_int (input_from_command_line_file);
   unwind_protect_ptr (global_command);
   unwind_protect_ptr (current_eval_string);
 
   get_input_from_eval_string = 1;
+  input_from_command_line_file = 0;
   current_eval_string = string;
 
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
   add_unwind_protect (restore_input_buffer, (void *) old_buf);
   add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -85,16 +85,20 @@ extern tree_statement_list *global_comma
 extern tree_function *curr_function;
 
 // Nonzero means input is coming from startup file.
 extern int input_from_startup_file;
 
 // The command-line options.
 extern Octave_str_obj octave_argv;
 
+// Nonzero means that input is coming from a file that was named on
+// the command line.
+extern int input_from_command_line_file;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -701,20 +701,22 @@ parse_fcn_file (int exec_script, char *f
 
       char *tmp_help_txt = gobble_leading_white_space (ffile, 0);
 
       if (is_function_file (ffile))
 	{
 	  unwind_protect_int (echo_input);
 	  unwind_protect_int (saving_history);
 	  unwind_protect_int (reading_fcn_file);
+	  unwind_protect_int (input_from_command_line_file);
 
 	  echo_input = 0;
 	  saving_history = 0;
 	  reading_fcn_file = 1;
+	  input_from_command_line_file = 0;
 
 	  YY_BUFFER_STATE old_buf = current_buffer ();
 	  YY_BUFFER_STATE new_buf = create_buffer (ffile);
 
 	  add_unwind_protect (restore_input_buffer, (void *) old_buf);
 	  add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
