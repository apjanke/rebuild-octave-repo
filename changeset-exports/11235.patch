# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289444965 18000
#      Wed Nov 10 22:09:25 2010 -0500
# Node ID 9900d375e5853b6984b3da91b0278f6ee408966a
# Parent  2718e1fdf82fd1284af5ec55f6cd5bdb6e6c7988
eliminate additional special cases for SCO systems

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* lo-cieee.c Eliminate special cases for SCO.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* lo-ieee.cc (octave_ieee_init): Don't initialize octave_Inf,
 	octave_NaN, and octave_NA to DBL_MAX.  Don't initialize
 	octave_Float_Inf, octave_Float_NaN, and octave_Float_NA to FLT_MAX.
 	(octave_ieee_init): Simplify using std::numeric_limits template.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -29,26 +29,16 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #if defined (HAVE_IEEEFP_H)
 #include <ieeefp.h>
 #endif
 
-#if defined (HAVE_NAN_H)
-#if defined (SCO)
-#define _IEEE 1
-#endif
-#include <nan.h>
-#if defined (SCO)
-#undef _IEEE
-#endif
-#endif
-
 #include "lo-ieee.h"
 #include "lo-math.h"
 
 #if ! defined (HAVE_ISNAN) && defined (HAVE__ISNAN)
 #define isnan _isnan
 #define HAVE_ISNAN 1
 #endif
 
@@ -77,44 +67,16 @@ float octave_Float_NA;
 
 /* Octave's idea of not a number.  */
 double octave_NaN;
 float octave_Float_NaN;
 
 int lo_ieee_hw;
 int lo_ieee_lw;
 
-#if defined (SCO)
-
-int
-__isnan (double x)
-{
-  return (IsNANorINF (x) && NaN (x) && ! IsINF (x)) ? 1 : 0;
-}
-
-int
-__isinf (double x)
-{
-  return (IsNANorINF (x) && IsINF (x)) ? 1 : 0;
-}
-
-int
-__isnanf (float x)
-{
-  return (IsNANorINF (x) && NaN (x) && ! IsINF (x)) ? 1 : 0;
-}
-
-int
-__isinff (float x)
-{
-  return (IsNANorINF (x) && IsINF (x)) ? 1 : 0;
-}
-
-#endif
-
 int
 __lo_ieee_isnan (double x)
 {
 #if defined (HAVE_ISNAN)
   return isnan (x);
 #else
   return 0;
 #endif
