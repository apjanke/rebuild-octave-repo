# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1327982580 18000
#      Mon Jan 30 23:03:00 2012 -0500
# Node ID d1810b2ca809970a2596d07d4e3bdefbfa0675e9
# Parent  2633baa831e2d31307b7841729dad3143fb861f2
iskeyword: don't consider get and set as keywords

* lex.ll (is_keyword): Don't recognize get and set as keywords.
(Fiskeyword): Don't include get and set in the list of keywords.
* grammar.txi: Remove get and set from the list of keywords.

diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -3446,17 +3446,24 @@ lexical_feedback::init (void)
 
   // Set of identifiers that might be local variable names is empty.
   pending_local_variables.clear ();
 }
 
 bool
 is_keyword (const std::string& s)
 {
-  return octave_kw_hash::in_word_set (s.c_str (), s.length ()) != 0;
+  // Parsing function names like "set.property_name" inside
+  // classdef-style class definitions is simplified by handling the
+  // "set" and "get" portions of the names using the same mechanism as
+  // is used for keywords.  However, they are not really keywords in
+  // the language, so omit them from the list of possible keywords.
+
+  return (octave_kw_hash::in_word_set (s.c_str (), s.length ()) != 0
+          && ! (s == "set" || s == "get"));
 }
 
 DEFUN (iskeyword, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} iskeyword ()\n\
 @deftypefnx {Built-in Function} {} iskeyword (@var{name})\n\
 Return true if @var{name} is an Octave keyword.  If @var{name}\n\
 is omitted, return a list of keywords.\n\
@@ -3469,20 +3476,32 @@ is omitted, return a list of keywords.\n
 
   string_vector argv = args.make_argv ("iskeyword");
 
   if (error_state)
     return retval;
 
   if (argc == 1)
     {
+      // Neither set and get are keywords.  See the note in the
+      // is_keyword function for additional details.
+
       string_vector lst (TOTAL_KEYWORDS);
 
+      int j = 0;
+
       for (int i = 0; i < TOTAL_KEYWORDS; i++)
-        lst[i] = wordlist[i].name;
+        {
+          std::string tmp = wordlist[i].name;
+
+          if (! (tmp == "set" || tmp == "get"))
+            lst[j++] = tmp;
+        }
+
+      lst.resize (j);
 
       retval = Cell (lst.sort ());
     }
   else if (argc == 2)
     {
       retval = is_keyword (argv[1]);
     }
   else
