# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258542187 -3600
#      Wed Nov 18 12:03:07 2009 +0100
# Node ID c15a5ed0da58c17fcbc362fa8d8d364e804b7dca
# Parent  b2a282c37217a7abfa7fbf534b9e51b97f75d3a9
optimize bsxfun (@power, ...)

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -1074,13 +1074,15 @@ ComplexNDArray& operator /= (ComplexNDAr
   else
     do_ms_inplace_op<ComplexNDArray, double> (a, s, mx_inline_div2);
   return a;
 }
 
 BSXFUN_STDOP_DEFS_MXLOOP (ComplexNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (ComplexNDArray)
 
+BSXFUN_OP_DEF_MXLOOP (pow, ComplexNDArray, mx_inline_pow)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -176,15 +176,17 @@ NDND_BOOL_OP_DECLS (ComplexNDArray, Comp
 MARRAY_FORWARD_DEFS (MArrayN, ComplexNDArray, Complex)
 
 extern OCTAVE_API ComplexNDArray& operator *= (ComplexNDArray& a, double s);
 extern OCTAVE_API ComplexNDArray& operator /= (ComplexNDArray& a, double s);
 
 BSXFUN_STDOP_DECLS (ComplexNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (ComplexNDArray, OCTAVE_API)
 
+BSXFUN_OP_DECL (pow, ComplexNDArray, OCTAVE_API)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,32 @@
+2009-11-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_any_negative, mx_inline_pow): New loops.
+	(DEFMXMAPPER2X): New macro.
+	* bsxfun-decl.h (BSXFUN_OP2_DECL): New macro.
+	* bsxfun-defs.cc (BSXFUN_OP2_DEF, BSXFUN_OP2_DEF_MXLOOP): New macros.
+	(do_bsxfun_op): Use OCTAVE_QUIT.
+	* dNDArray.cc (NDArray::all_integers (void)): New method.
+	(NDArray::any_element_is_negative): Use mx_inline_any_negative.
+	(bsxfun_pow (const NDArray&, const NDArray&),
+	bsxfun_pow (const ComplexNDArray&, const NDArray&)): New functions.
+	* dNDArray.h: Update.
+	* fNDArray.cc (FloatNDArray::all_integers (void)): New method.
+	(FloatNDArray::any_element_is_negative): Use mx_inline_any_negative.
+	(bsxfun_pow (const FloatNDArray&, const FloatNDArray&),
+	bsxfun_pow (const FloatComplexNDArray&, const FloatNDArray&)): New functions.
+	* fNDArray.h: Update.
+	* CNDArray.cc (bsxfun_pow (const ComplexNDArray&, const
+	ComplexNDArray&)): New function.
+	* CNDArray.h: Update.
+	* fCNDArray.cc (bsxfun_pow (const FloatComplexNDArray&, const
+	FloatComplexNDArray&)): New function.
+	* fCNDArray.h: Update.
+
 2009-11-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* CNDArray.cc (ComplexNDArray::all_elements_are_real): 
 	Use mx_inline_all_real.
 	* CMatrix.cc (ComplexMatrix::all_elements_are_real): Ditto.
 	* fCNDArray.cc (FloatComplexNDArray::all_elements_are_real): 
 	Use mx_inline_all_real.
 	* fCMatrix.cc (FloatComplexMatrix::all_elements_are_real): Ditto.
diff --git a/liboctave/bsxfun-decl.h b/liboctave/bsxfun-decl.h
--- a/liboctave/bsxfun-decl.h
+++ b/liboctave/bsxfun-decl.h
@@ -22,16 +22,19 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_bsxfun_decl_h)
 #define octave_bsxfun_decl_h 1
 
 #define BSXFUN_OP_DECL(OP, ARRAY, API) \
 extern API ARRAY bsxfun_ ## OP (const ARRAY&, const ARRAY&);
 
+#define BSXFUN_OP2_DECL(OP, ARRAY, ARRAY1, ARRAY2, API) \
+extern API ARRAY bsxfun_ ## OP (const ARRAY1&, const ARRAY2&);
+
 #define BSXFUN_REL_DECL(OP, ARRAY, API) \
 extern API boolNDArray bsxfun_ ## OP (const ARRAY&, const ARRAY&);
 
 #define BSXFUN_STDOP_DECLS(ARRAY, API) \
   BSXFUN_OP_DECL (add, ARRAY, API) \
   BSXFUN_OP_DECL (sub, ARRAY, API) \
   BSXFUN_OP_DECL (mul, ARRAY, API) \
   BSXFUN_OP_DECL (div, ARRAY, API) \
diff --git a/liboctave/bsxfun-defs.cc b/liboctave/bsxfun-defs.cc
--- a/liboctave/bsxfun-defs.cc
+++ b/liboctave/bsxfun-defs.cc
@@ -112,16 +112,18 @@ do_bsxfun_op (const XNDA& x, const YNDA&
             cdvy(i-1) = 0;
         }
 
       octave_idx_type niter = dvr.numel (start);
       // The index array.
       OCTAVE_LOCAL_BUFFER_INIT (octave_idx_type, idx, nd, 0);
       for (octave_idx_type iter = 0; iter < niter; iter++)
         {
+          OCTAVE_QUIT;
+
           // Compute indices. 
           // FIXME: performance impact noticeable?
           octave_idx_type xidx = cdvx.cum_compute_index (idx);
           octave_idx_type yidx = cdvy.cum_compute_index (idx);
           octave_idx_type ridx = dvr.compute_index (idx);
 
           // Apply the low-level loop.
           if (xsing)
@@ -136,23 +138,30 @@ do_bsxfun_op (const XNDA& x, const YNDA&
     }
 
   return retval;
 }
 
 #define BSXFUN_OP_DEF(OP, ARRAY) \
 ARRAY bsxfun_ ## OP (const ARRAY& x, const ARRAY& y)
 
+#define BSXFUN_OP2_DEF(OP, ARRAY, ARRAY1, ARRAY2) \
+ARRAY bsxfun_ ## OP (const ARRAY1& x, const ARRAY2& y)
+
 #define BSXFUN_REL_DEF(OP, ARRAY) \
 boolNDArray bsxfun_ ## OP (const ARRAY& x, const ARRAY& y)
 
 #define BSXFUN_OP_DEF_MXLOOP(OP, ARRAY, LOOP) \
   BSXFUN_OP_DEF(OP, ARRAY) \
   { return do_bsxfun_op<ARRAY, ARRAY, ARRAY> (x, y, LOOP, LOOP, LOOP); }
 
+#define BSXFUN_OP2_DEF_MXLOOP(OP, ARRAY, ARRAY1, ARRAY2, LOOP) \
+  BSXFUN_OP2_DEF(OP, ARRAY, ARRAY1, ARRAY2) \
+  { return do_bsxfun_op<ARRAY, ARRAY1, ARRAY2> (x, y, LOOP, LOOP, LOOP); }
+
 #define BSXFUN_REL_DEF_MXLOOP(OP, ARRAY, LOOP) \
   BSXFUN_REL_DEF(OP, ARRAY) \
   { return do_bsxfun_op<boolNDArray, ARRAY, ARRAY> (x, y, LOOP, LOOP, LOOP); }
 
 #define BSXFUN_STDOP_DEFS_MXLOOP(ARRAY) \
   BSXFUN_OP_DEF_MXLOOP (add, ARRAY, mx_inline_add) \
   BSXFUN_OP_DEF_MXLOOP (sub, ARRAY, mx_inline_sub) \
   BSXFUN_OP_DEF_MXLOOP (mul, ARRAY, mx_inline_mul) \
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -551,21 +551,17 @@ NDArray::any_element_is_negative (bool n
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
 	if (lo_ieee_signbit (elem (i)))
 	  return true;
     }
   else
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-	if (elem (i) < 0)
-	  return true;
-    }
+    return mx_inline_any_negative (numel (), data ());
 
   return false;
 }
 
 bool
 NDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
@@ -668,16 +664,32 @@ NDArray::all_integers (double& max_val, 
       if (D_NINT (val) != val)
 	return false;
     }
 
   return true;
 }
 
 bool
+NDArray::all_integers (void) const
+{
+  octave_idx_type nel = nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      double val = elem (i);
+
+      if (D_NINT (val) != val)
+	return false;
+    }
+
+  return true;
+}
+
+bool
 NDArray::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
 
@@ -1111,13 +1123,17 @@ SND_CMP_OPS (double, NDArray)
 SND_BOOL_OPS (double, NDArray)
 
 NDND_CMP_OPS (NDArray, NDArray)
 NDND_BOOL_OPS (NDArray, NDArray)
 
 BSXFUN_STDOP_DEFS_MXLOOP (NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (NDArray)
 
+BSXFUN_OP_DEF_MXLOOP (pow, NDArray, mx_inline_pow)
+BSXFUN_OP2_DEF_MXLOOP (pow, ComplexNDArray, ComplexNDArray, 
+                       NDArray, mx_inline_pow)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -77,16 +77,17 @@ public:
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
+  bool all_integers (void) const;
   bool too_large_for_float (void) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   NDArray cumprod (int dim = -1) const;
@@ -186,15 +187,19 @@ SND_BOOL_OP_DECLS (double, NDArray, OCTA
 NDND_CMP_OP_DECLS (NDArray, NDArray, OCTAVE_API)
 NDND_BOOL_OP_DECLS (NDArray, NDArray, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArrayN, NDArray, double)
 
 BSXFUN_STDOP_DECLS (NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (NDArray, OCTAVE_API)
 
+BSXFUN_OP_DECL (pow, NDArray, OCTAVE_API)
+BSXFUN_OP2_DECL (pow, ComplexNDArray, ComplexNDArray, 
+                 NDArray, OCTAVE_API)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -1069,13 +1069,15 @@ FloatComplexNDArray& operator /= (FloatC
   else
     do_ms_inplace_op<FloatComplexNDArray, float> (a, s, mx_inline_div2);
   return a;
 }
 
 BSXFUN_STDOP_DEFS_MXLOOP (FloatComplexNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (FloatComplexNDArray)
 
+BSXFUN_OP_DEF_MXLOOP (pow, FloatComplexNDArray, mx_inline_pow)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -176,15 +176,17 @@ NDND_BOOL_OP_DECLS (FloatComplexNDArray,
 MARRAY_FORWARD_DEFS (MArrayN, FloatComplexNDArray, FloatComplex)
 
 extern OCTAVE_API FloatComplexNDArray& operator *= (FloatComplexNDArray& a, float s);
 extern OCTAVE_API FloatComplexNDArray& operator /= (FloatComplexNDArray& a, float s);
 
 BSXFUN_STDOP_DECLS (FloatComplexNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (FloatComplexNDArray, OCTAVE_API)
 
+BSXFUN_OP_DECL (pow, FloatComplexNDArray, OCTAVE_API)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -509,21 +509,17 @@ FloatNDArray::any_element_is_negative (b
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
 	if (lo_ieee_signbit (elem (i)))
 	  return true;
     }
   else
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-	if (elem (i) < 0)
-	  return true;
-    }
+    return mx_inline_any_negative (numel (), data ());
 
   return false;
 }
 
 bool
 FloatNDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
@@ -626,16 +622,32 @@ FloatNDArray::all_integers (float& max_v
       if (D_NINT (val) != val)
 	return false;
     }
 
   return true;
 }
 
 bool
+FloatNDArray::all_integers (void) const
+{
+  octave_idx_type nel = nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      double val = elem (i);
+
+      if (D_NINT (val) != val)
+	return false;
+    }
+
+  return true;
+}
+
+bool
 FloatNDArray::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       float val = elem (i);
 
@@ -1069,13 +1081,17 @@ SND_CMP_OPS (float, FloatNDArray)
 SND_BOOL_OPS (float, FloatNDArray)
 
 NDND_CMP_OPS (FloatNDArray, FloatNDArray)
 NDND_BOOL_OPS (FloatNDArray, FloatNDArray)
 
 BSXFUN_STDOP_DEFS_MXLOOP (FloatNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (FloatNDArray)
 
+BSXFUN_OP_DEF_MXLOOP (pow, FloatNDArray, mx_inline_pow)
+BSXFUN_OP2_DEF_MXLOOP (pow, FloatComplexNDArray, FloatComplexNDArray, 
+                       FloatNDArray, mx_inline_pow)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -74,16 +74,17 @@ public:
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (float& max_val, float& min_val) const;
+  bool all_integers (void) const;
   bool too_large_for_float (void) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   FloatNDArray cumprod (int dim = -1) const;
@@ -183,15 +184,19 @@ SND_BOOL_OP_DECLS (float, FloatNDArray, 
 NDND_CMP_OP_DECLS (FloatNDArray, FloatNDArray, OCTAVE_API)
 NDND_BOOL_OP_DECLS (FloatNDArray, FloatNDArray, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArrayN, FloatNDArray, float)
 
 BSXFUN_STDOP_DECLS (FloatNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (FloatNDArray, OCTAVE_API)
 
+BSXFUN_OP_DECL (pow, FloatNDArray, OCTAVE_API)
+BSXFUN_OP2_DECL (pow, FloatComplexNDArray, FloatComplexNDArray, 
+                 FloatNDArray, OCTAVE_API)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -187,16 +187,29 @@ mx_inline_any_nan (size_t n, const T* x)
     {
       if (xisnan (x[i]))
         return true;
     }
 
   return false;
 }
 
+template <class T> 
+inline bool 
+mx_inline_any_negative (size_t n, const T* x) 
+{
+  for (size_t i = 0; i < n; i++)
+    {
+      if (x[i] < 0)
+        return true;
+    }
+
+  return false;
+}
+
 template<class T>
 inline bool 
 mx_inline_all_real (size_t n, const std::complex<T>* x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i].imag () != 0)
         return false;
@@ -227,16 +240,30 @@ inline void F (size_t n, T *r, const T *
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
 template <class T> \
 inline void F (size_t n, T *r, T x, const T *y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x, y[i]); }
 
 DEFMXMAPPER2 (mx_inline_xmin, xmin)
 DEFMXMAPPER2 (mx_inline_xmax, xmax)
 
+// Pairwise power
+#define DEFMXMAPPER2X(F, FUN) \
+template <class R, class X, class Y> \
+inline void F (size_t n, R *r, const X *x, const Y *y) \
+{ for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y[i]); } \
+template <class R, class X, class Y> \
+inline void F (size_t n, R *r, const X *x, Y y) \
+{ for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
+template <class R, class X, class Y> \
+inline void F (size_t n, R *r, X x, const Y *y) \
+{ for (size_t i = 0; i < n; i++) r[i] = FUN (x, y[i]); }
+
+DEFMXMAPPER2X (mx_inline_pow, std::pow)
+
 // Arbitrary function appliers. The function is a template parameter to enable
 // inlining.
 template <class R, class X, R fun (X x)>
 inline void mx_inline_map (size_t n, R *r, const X *x)
 { for (size_t i = 0; i < n; i++) r[i] = fun (x[i]); }
 
 template <class R, class X, R fun (const X& x)>
 inline void mx_inline_map (size_t n, R *r, const X *x)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-11-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/bsxfun.cc (bsxfun_builtin_op): New member:
+	bsxfun_builtin_power.
+	(bsxfun_builtin_names): Include "power".
+	(do_bsxfun_real_pow): New static function.
+	(maybe_fill_table): Register power handlers.
+
 2009-11-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-complex.cc (octave_complex::try_narrowing_conversion): Don't
 	check signbit.
 	* ov-flt-complex.cc (octave_float_complex::try_narrowing_conversion):
 	Ditto.
 	* ov-cx-mat.cc (octave_complex_matrix::try_narrowing_conversion):
 	Simplify. Don't check signbit.
diff --git a/src/DLD-FUNCTIONS/bsxfun.cc b/src/DLD-FUNCTIONS/bsxfun.cc
--- a/src/DLD-FUNCTIONS/bsxfun.cc
+++ b/src/DLD-FUNCTIONS/bsxfun.cc
@@ -51,16 +51,17 @@ enum bsxfun_builtin_op
   bsxfun_builtin_eq,
   bsxfun_builtin_ne,
   bsxfun_builtin_lt,
   bsxfun_builtin_le,
   bsxfun_builtin_gt,
   bsxfun_builtin_ge,
   bsxfun_builtin_and,
   bsxfun_builtin_or,
+  bsxfun_builtin_power,
   bsxfun_builtin_unknown,
   bsxfun_num_builtin_ops = bsxfun_builtin_unknown
 };
 
 const char *bsxfun_builtin_names[] = 
 {
   "plus",
   "minus",
@@ -70,17 +71,18 @@ const char *bsxfun_builtin_names[] =
   "min",
   "eq",
   "ne",
   "lt",
   "le",
   "gt",
   "ge",
   "and",
-  "or"
+  "or",
+  "power"
 };
 
 static bsxfun_builtin_op 
 bsxfun_builtin_lookup (const std::string& name)
 {
   for (int i = 0; i < bsxfun_num_builtin_ops; i++)
     if (name == bsxfun_builtin_names[i])
       return static_cast<bsxfun_builtin_op> (i);
@@ -105,16 +107,29 @@ template <class NDA, boolNDArray (bsxfun
 static octave_value 
 bsxfun_forward_rel (const octave_value& x, const octave_value& y)
 {
   NDA xa = octave_value_extract<NDA> (x);
   NDA ya = octave_value_extract<NDA> (y);
   return octave_value (bsxfun_rel (xa, ya));
 }
 
+// Pow needs a special handler for reals because of the potentially complex result.
+template <class NDA, class CNDA>
+static octave_value
+do_bsxfun_real_pow (const octave_value& x, const octave_value& y)
+{
+  NDA xa = octave_value_extract<NDA> (x);
+  NDA ya = octave_value_extract<NDA> (y);
+  if (! ya.all_integers () && xa.any_element_is_negative ())
+    return octave_value (bsxfun_pow (CNDA (xa), ya));
+  else
+    return octave_value (bsxfun_pow (xa, ya));
+}
+
 static void maybe_fill_table (void)
 {
   static bool filled = false;
   if (filled)
     return;
 
 #define REGISTER_OP_HANDLER(OP, BTYP, NDA, FUNOP) \
   bsxfun_handler_table[OP][BTYP] = bsxfun_forward_op<NDA, FUNOP>
@@ -146,16 +161,25 @@ static void maybe_fill_table (void)
   REGISTER_STD_HANDLERS (btyp_uint16, uint16NDArray);
   REGISTER_STD_HANDLERS (btyp_uint32, uint32NDArray);
   REGISTER_STD_HANDLERS (btyp_uint64, uint64NDArray);
 
   // For bools, we register and/or.
   REGISTER_OP_HANDLER (bsxfun_builtin_and, btyp_bool, boolNDArray, bsxfun_and);
   REGISTER_OP_HANDLER (bsxfun_builtin_or, btyp_bool, boolNDArray, bsxfun_or);
 
+  // Register power handlers.
+  bsxfun_handler_table[bsxfun_builtin_power][btyp_double] = 
+    do_bsxfun_real_pow<NDArray, ComplexNDArray>;
+  bsxfun_handler_table[bsxfun_builtin_power][btyp_float] = 
+    do_bsxfun_real_pow<FloatNDArray, FloatComplexNDArray>;
+
+  REGISTER_OP_HANDLER (bsxfun_builtin_power, btyp_complex, ComplexNDArray, bsxfun_pow);
+  REGISTER_OP_HANDLER (bsxfun_builtin_power, btyp_float_complex, FloatComplexNDArray, bsxfun_pow);
+
   filled = true;
 }
 
 static octave_value
 maybe_optimized_builtin (const std::string& name,
                          const octave_value& a, const octave_value& b)
 {
   octave_value retval;
