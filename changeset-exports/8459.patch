# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231765408 -3600
#      Mon Jan 12 14:03:28 2009 +0100
# Node ID d17874a6f161f8fba1e1121d144622ff952e84d6
# Parent  d254a21e0120367992e8357a0cf433a6c3f8af72
improve indexing of diagonal & permutation matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,17 +1,25 @@
+2009-01-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-perm.cc (octave_perm_matrix::do_index_op): Return shallow copy
+	when indexed by (:,:).
+	* ov-base-mat.cc (octave_base_diag::do_index_op): Return shallow copy
+	when indexed by (:,:). Optimize indexing equivalent to resizing.
+	* data.cc: Fix tests.
+	* mappers.cc: Fix tests.
+
 2009-01-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base-sparse.h,
 	ov-base.cc, ov-base.h, ov-perm.h, ov-range.h, ov.h: Add full_value
 	methods to octave_value, octave_base_value and its relevant
 	subclasses.
 	* data.cc (Ffull): New DEFUN.
 	* DLD-FUNCTIONS/sparse.cc (Ffull): move to data.cc.
-
 2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* ov.h (octave_value::is_copy_of): New method.
 	* ov-struct.cc (numeric_conv): Add output parameter orig.
 	(octave_struct::subsasgn): Temporarily erase duplicate lhs value prior
 	to assignment.
 
 2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1634,27 +1634,27 @@ Given a matrix argument, instead of a ve
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 
-%!assert(diag ([1; 2; 3])(:,:), [1, 0, 0; 0, 2, 0; 0, 0, 3]);
+%!assert(full (diag ([1; 2; 3])), [1, 0, 0; 0, 2, 0; 0, 0, 3]);
 %!assert(diag ([1; 2; 3], 1), [0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]);
 %!assert(diag ([1; 2; 3], 2), [0, 0, 1, 0, 0; 0, 0, 0, 2, 0; 0, 0, 0, 0, 3; 0, 0, 0, 0, 0; 0, 0, 0, 0, 0]);
 %!assert(diag ([1; 2; 3],-1), [0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]);
 %!assert(diag ([1; 2; 3],-2), [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]);
 
 %!assert(diag ([1, 0, 0; 0, 2, 0; 0, 0, 3]), [1; 2; 3]);
 %!assert(diag ([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0], 1), [1; 2; 3]);
 %!assert(diag ([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0], -1), [1; 2; 3]);
 
-%!assert(diag (single([1; 2; 3]))(:,:), single([1, 0, 0; 0, 2, 0; 0, 0, 3]));
+%!assert(full (diag (single([1; 2; 3]))), single([1, 0, 0; 0, 2, 0; 0, 0, 3]));
 %!assert(diag (single([1; 2; 3]), 1), single([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]));
 %!assert(diag (single([1; 2; 3]), 2), single([0, 0, 1, 0, 0; 0, 0, 0, 2, 0; 0, 0, 0, 0, 3; 0, 0, 0, 0, 0; 0, 0, 0, 0, 0]));
 %!assert(diag (single([1; 2; 3]),-1), single([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]));
 %!assert(diag (single([1; 2; 3]),-2), single([0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]));
 
 %!assert(diag (single([1, 0, 0; 0, 2, 0; 0, 0, 3])), single([1; 2; 3]));
 %!assert(diag (single([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]), 1), single([1; 2; 3]));
 %!assert(diag (single([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]), -1), single([1; 2; 3]));
@@ -4212,21 +4212,21 @@ with @sc{Matlab}.\n\
     }
 
   return retval;
 }
 
 
 /*
 
-%!assert (eye(3)(:,:), [1, 0, 0; 0, 1, 0; 0, 0, 1]);
-%!assert (eye(2, 3)(:,:), [1, 0, 0; 0, 1, 0]);
-
-%!assert (eye(3,'single')(:,:), single([1, 0, 0; 0, 1, 0; 0, 0, 1]));
-%!assert (eye(2, 3,'single')(:,:), single([1, 0, 0; 0, 1, 0]));
+%!assert (full (eye(3)), [1, 0, 0; 0, 1, 0; 0, 0, 1]);
+%!assert (full (eye(2, 3)), [1, 0, 0; 0, 1, 0]);
+
+%!assert (full (eye(3,'single')), single([1, 0, 0; 0, 1, 0; 0, 0, 1]));
+%!assert (full (eye(2, 3,'single')), single([1, 0, 0; 0, 1, 0]));
 
 %!assert (eye(3,'int8'), int8([1, 0, 0; 0, 1, 0; 0, 0, 1]));
 %!assert (eye(2, 3,'int8'), int8([1, 0, 0; 0, 1, 0]));
 
 %!error <Invalid call to eye.*> eye (1, 2, 3);
 
  */
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -802,22 +802,22 @@ Return the imaginary part of @var{z} as 
   return retval;
 }
 
 /*
 
 %!assert(imag (1), 0);
 %!assert(imag (i), 1);
 %!assert(imag (1+i), 1);
-%!assert(imag ([i, 1; 1, i]), eye (2)(:,:));
+%!assert(imag ([i, 1; 1, i]), full (eye (2)));
 
 %!assert(imag (single(1)), single(0));
 %!assert(imag (single(i)), single(1));
 %!assert(imag (single(1+i)), single(1));
-%!assert(imag (single([i, 1; 1, i])), eye (2,'single')(:,:));
+%!assert(imag (single([i, 1; 1, i])), full (eye (2,'single')));
 
 %!error imag ();
 %!error imag (1, 2);
 
  */
 
 DEFUNX ("isalnum", Fisalnum, args, ,
     "-*- texinfo -*-\n\
@@ -1249,22 +1249,22 @@ Return the real part of @var{z}.\n\
   return retval;
 }
 
 /*
 
 %!assert(real (1), 1);
 %!assert(real (i), 0);
 %!assert(real (1+i), 1);
-%!assert(real ([1, i; i, 1]), eye (2)(:,:));
+%!assert(real ([1, i; i, 1]), full (eye (2)));
 
 %!assert(real (single(1)), single(1));
 %!assert(real (single(i)), single(0));
 %!assert(real (single(1+i)), single(1));
-%!assert(real (single([1, i; i, 1])), eye (2,'single')(:,:));
+%!assert(real (single([1, i; i, 1])), full (eye (2,'single')));
 
 %!error real ();
 %!error real (1, 2);
 
 */
 
 DEFUN (round, args, ,
     "-*- texinfo -*-\n\
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -81,18 +81,16 @@ octave_base_diag<DMT, MT>::do_index_op (
     {
       idx0 = idx(0).index_vector ();
       idx1 = idx(1).index_vector ();
     }
 
   // This hack is to allow constructing permutation matrices using
   // eye(n)(p,:), eye(n)(:,q) && eye(n)(p,q) where p & q are permutation
   // vectors. 
-  // Note that, for better consistency, eye(n)(:,:) still converts to a full
-  // matrix.
   // FIXME: This check is probably unnecessary for complex matrices. 
   if (! error_state && nidx == 2 && matrix.is_multiple_of_identity (one))
     {
       
       bool left = idx0.is_permutation (matrix.rows ());
       bool right = idx1.is_permutation (matrix.cols ());
 
       if (left && right)
@@ -103,28 +101,47 @@ octave_base_diag<DMT, MT>::do_index_op (
               retval = octave_value (PermMatrix (idx0, false) * PermMatrix (idx1, true),
                                      is_single_type ());
           else if (left)
               retval = octave_value (PermMatrix (idx0, false),
                                      is_single_type ());
           else if (right)
               retval = octave_value (PermMatrix (idx1, true),
                                      is_single_type ());
+          else
+            {
+              retval = this;
+              this->count++;
+            }
         }
     }
 
   // if error_state is set, we've already griped.
   if (! error_state && ! retval.is_defined ())
     {
       if (nidx == 2 && ! resize_ok &&
           idx0.is_scalar () && idx1.is_scalar ())
         {
           // FIXME: the proxy mechanism of DiagArray2 causes problems here.
           retval = el_type (matrix.checkelem (idx0(0), idx1(0)));
         }
+      else if (nidx == 2 && ! resize_ok)
+        {
+          octave_idx_type m = idx0.length (matrix.rows ());
+          octave_idx_type n = idx1.length (matrix.columns ());
+          if (idx0.is_colon_equiv (m) && idx1.is_colon_equiv (n)
+              && m <= matrix.rows () && n <= matrix.rows ())
+            {
+              DMT rm (matrix);
+              rm.resize (m, n);
+              retval = rm;
+            }
+          else
+            retval = to_dense ().do_index_op (idx, resize_ok);
+        }
       else
         retval = to_dense ().do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 template <class DMT, class MT>
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -94,16 +94,21 @@ octave_perm_matrix::do_index_op (const o
             {
               PermMatrix p = matrix;
               if (left)
                 p = PermMatrix (idx0, false) * p;
               if (right)
                 p = p * PermMatrix (idx1, true);
               retval = octave_value (p, is_single_type ());
             }
+          else
+            {
+              retval = this;
+              this->count++;
+            }
         }
     }
 
   // if error_state is set, we've already griped.
   if (! error_state && ! retval.is_defined ())
     {
       if (nidx == 2 && ! resize_ok &&
           idx0.is_scalar () && idx1.is_scalar ())
