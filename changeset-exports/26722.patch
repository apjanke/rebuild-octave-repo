# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1549930560 28800
#      Mon Feb 11 16:16:00 2019 -0800
# Node ID f51e8a7c33f48147b10a69569280a4a0c9c48c96
# Parent  72b9040ab1965f5e87260dd4d2946987e740338a
run Matlab user files from interpreter, not startup scripts (bug #55681)

* interpreter.cc, interpreter.h (interpreter::execute_startup_files): Run
startup.m when reading Octave user init files.  Schedule finish.m to run on
exit when reading Octave user init files.

* __finish__.m: Check for finish.m to exist on the load path.
* version-rcfile: Delete code to run startup.m and finish.m.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -706,17 +706,17 @@ namespace octave
     if (m_interactive && ! inhibit_startup_message)
       std::cout << octave_startup_message () << "\n" << std::endl;
   }
 
   // Initialize by reading startup files.  Return non-zero if an exception
   // occurs when reading any of them, but don't exit early because of an
   // exception.
 
-  int interpreter::execute_startup_files (void) const
+  int interpreter::execute_startup_files (void)
   {
     bool read_site_files = m_read_site_files;
     bool read_init_files = m_read_init_files;
     bool verbose = m_verbose;
     bool inhibit_startup_message = m_inhibit_startup_message;
 
     if (m_app_context)
       {
@@ -753,16 +753,47 @@ namespace octave
                                    context, verbose, require_file);
 
         if (status)
           exit_status = status;
       }
 
     if (read_init_files)
       {
+        // Try to execute commands from the Matlab compatible startup.m file
+        // if it exists anywhere in the load path when starting Octave.
+        std::string ff_startup_m = file_in_path ("startup.m", "");
+
+        if (! ff_startup_m.empty ())
+          {
+            int parse_status = 0;
+
+            try
+              {
+                eval_string (std::string ("startup"), false, parse_status, 0);
+              }
+            catch (const interrupt_exception&)
+              {
+                recover_from_exception ();
+              }
+            catch (const execution_exception& e)
+              {
+                std::string stack_trace = e.info ();
+
+                if (! stack_trace.empty ())
+                  std::cerr << stack_trace;
+
+                recover_from_exception ();
+              }
+          }
+
+        // Schedule the Matlab compatible finish.m file to run if it exists
+        // anywhere in the load path when exiting Octave.
+        add_atexit_function ("__finish__");
+
         // Try to execute commands from $HOME/$OCTAVE_INITFILE and
         // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set,
         // .octaverc is assumed.
 
         bool home_rc_already_executed = false;
 
         std::string initfile = sys::env::getenv ("OCTAVE_INITFILE");
 
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -338,17 +338,17 @@ namespace octave
     // to allow experimenting with thread_local storage.
 
     OCTAVE_THREAD_LOCAL static interpreter *instance;
 
     static std::list<std::string> atexit_functions;
 
     void display_startup_message (void) const;
 
-    int execute_startup_files (void) const;
+    int execute_startup_files (void);
 
     int execute_eval_option_code (void);
 
     int execute_command_line_file (void);
 
     int main_loop (void);
 
     void cleanup (void);
diff --git a/scripts/startup/__finish__.m b/scripts/startup/__finish__.m
--- a/scripts/startup/__finish__.m
+++ b/scripts/startup/__finish__.m
@@ -24,17 +24,17 @@
 ## This function is intended to be executed upon a clean exit from Octave.
 ## This is accomplished in the system script @file{startup/octaverc} by use of
 ## the built-in function @code{atexit}.
 ## @seealso{atexit}
 ## @end deftypefn
 
 function __finish__ ()
 
-  if (exist ("finish", "file"))
+  if (exist ("finish.m", "file"))
     ## Must use evalin for access to base workspace and user variables.
     ## No argument list for finish because it might be a script, not function.
     evalin ("base", "finish;");
   endif
 
 endfunction
 
 
diff --git a/scripts/startup/version-rcfile b/scripts/startup/version-rcfile
--- a/scripts/startup/version-rcfile
+++ b/scripts/startup/version-rcfile
@@ -20,18 +20,8 @@ if (! isempty (inputrc))
   readline_read_init_file (inputrc);
 endif
 clear ("inputrc");
 
 ## Configure LESS pager if present
 if (strcmp (PAGER (), "less") && isempty (getenv ("LESS")))
   PAGER_FLAGS ('-e -X -P"-- less ?pB(%pB\\%):--. (f)orward, (b)ack, (q)uit$"');
 endif
-
-## Run Matlab-compatible personal rc files unless skipping user rc files.
-if (! any (strcmp ("--no-init-file", argv ())))
-  if (exist ("startup.m", "file") == 2)
-    startup;  # No arg list here since startup might be a script.
-  endif
-
-  ## Schedule finish.m to run when exiting Octave.
-  atexit ("__finish__");
-endif
