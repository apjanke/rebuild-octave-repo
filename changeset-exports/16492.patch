# HG changeset patch
# User Rik <rik@octave.org>
# Date 1365618211 25200
#      Wed Apr 10 11:23:31 2013 -0700
# Node ID 91c32a702284254b9758816ac8e3ad7a41b453fa
# Parent  b10a23fe80bb55570a9c0af98541590ae7ad8059
Correctly fill stack field in lasterror() when given as input.

* libinterp/interpfcn/error.cc(Flasterror): If stack field is
given, use it to fill out Vlast_error_stack.  Otherwise, do
the current behavior of filling it with backtrace info.

diff --git a/libinterp/interpfcn/error.cc b/libinterp/interpfcn/error.cc
--- a/libinterp/interpfcn/error.cc
+++ b/libinterp/interpfcn/error.cc
@@ -1698,16 +1698,17 @@ set to their default values.\n\
                   Vlast_error_stack = initialize_last_error_stack ();
                 }
               else
                 error ("lasterror: unrecognized string argument");
             }
           else if (args(0).is_map ())
             {
               octave_scalar_map new_err = args(0).scalar_map_value ();
+              octave_scalar_map new_err_stack;
               std::string new_error_message;
               std::string new_error_id;
               std::string new_error_file;
               std::string new_error_name;
               int new_error_line = -1;
               int new_error_column = -1;
 
               if (! error_state && new_err.contains ("message"))
@@ -1721,17 +1722,17 @@ set to their default values.\n\
                 {
                   const std::string tmp =
                     new_err.getfield ("identifier").string_value ();
                   new_error_id = tmp;
                 }
 
               if (! error_state && new_err.contains ("stack"))
                 {
-                  octave_scalar_map new_err_stack =
+                  new_err_stack = 
                     new_err.getfield ("stack").scalar_map_value ();
 
                   if (! error_state && new_err_stack.contains ("file"))
                     {
                       const std::string tmp =
                         new_err_stack.getfield ("file").string_value ();
                       new_error_file = tmp;
                     }
@@ -1758,20 +1759,32 @@ set to their default values.\n\
                     }
                 }
 
               if (! error_state)
                 {
                   Vlast_error_message = new_error_message;
                   Vlast_error_id = new_error_id;
 
-                  octave_idx_type curr_frame = -1;
+                  if (new_err.contains ("stack"))
+                    {
+                      new_err_stack.setfield ("file", new_error_file);
+                      new_err_stack.setfield ("name", new_error_name);
+                      new_err_stack.setfield ("line", new_error_line);
+                      new_err_stack.setfield ("column", new_error_column);
+                      Vlast_error_stack = new_err_stack;
+                    }
+                  else
+                    {
+                      // No stack field.  Fill it in with backtrace info.
+                      octave_idx_type curr_frame = -1;
 
-                  Vlast_error_stack
-                    = octave_call_stack::backtrace (0, curr_frame);
+                      Vlast_error_stack
+                        = octave_call_stack::backtrace (0, curr_frame);
+                    }
                 }
             }
           else
             error ("lasterror: argument must be a structure or a string");
         }
 
       if (! error_state)
         retval = err;
