# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1380824867 14400
#      Thu Oct 03 14:27:47 2013 -0400
# Node ID 2d01e20abd85929b31c98d69daf2357726175565
# Parent  d07d59cc8775821d01cf6c42f28837730aa48ff5
rework error handling for url_transfer class

* urlwrite.cc (base_url_transfer, curl_transfer, url_transer):
Avoid using error and error_state.  Manager error message and state
internally.  Change all uses.

:

diff --git a/libinterp/dldfcn/urlwrite.cc b/libinterp/dldfcn/urlwrite.cc
--- a/libinterp/dldfcn/urlwrite.cc
+++ b/libinterp/dldfcn/urlwrite.cc
@@ -66,37 +66,40 @@ private:
     curl_xfer->cwd ("..");
   }
 
 public:
 
   friend class url_transfer;
 
   base_url_transfer (void)
-    : count (1), host (), userpwd (), valid (false), ascii_mode (false) { }
+    : count (1), host (), userpwd (), valid (false), ascii_mode (false),
+      ok (true), errmsg () { }
 
   base_url_transfer (const std::string& host_arg,
                      const std::string& /* user_arg */,
                      const std::string& /* passwd */)
     : count (1), host (host_arg), userpwd (), valid (false),
-      ascii_mode (false) { }
+      ascii_mode (false), ok (true), errmsg () { }
 
   base_url_transfer (const std::string& /* url */,
                      const std::string& /* method */,
-                     const Cell& /* param */, std::ostream& /* os */,
-                     bool& /* retval */)
-    : count (1), host (), userpwd (), valid (false), ascii_mode (false) { }
+                     const Cell& /* param */, std::ostream& /* os */)
+    : count (1), host (), userpwd (), valid (false), ascii_mode (false),
+      ok (true), errmsg () { }
 
   virtual ~base_url_transfer (void) { }
 
   bool is_valid (void) const { return valid; }
 
-  virtual bool perform (bool /* silent */ = false) const { return false; }
+  bool good (void) const { return valid && ok; }
 
-  virtual std::string lasterror (void) const { return std::string (); }
+  virtual void perform (void) const { }
+
+  virtual std::string lasterror (void) const { return errmsg; }
 
   virtual void set_ostream (std::ostream& /* os */) const { }
 
   virtual void set_istream (std::istream& /* is */) const { }
 
   virtual void ascii (void) { }
 
   virtual void binary (void) { }
@@ -106,18 +109,17 @@ public:
   bool is_binary (void) const { return !ascii_mode; }
 
   virtual void cwd (const std::string& /* path */) const { } 
 
   virtual void del (const std::string& /* file */) const { }
 
   virtual void rmdir (const std::string& /* path */) const { }
 
-  virtual bool mkdir (const std::string& /* path */, bool /* silent */) const
-  { return false; }
+  virtual void mkdir (const std::string& /* path */) const { }
 
   virtual void rename (const std::string& /* oldname */,
                        const std::string& /* newname */) const { }
 
   virtual void put (const std::string& /* file */,
                     std::istream& /* is */) const { }
 
   virtual void get (const std::string& /* file */,
@@ -131,27 +133,26 @@ public:
 
     if (!fs || !fs.is_dir ())
       {
         std::string msg;
         int status = octave_mkdir (directory, 0777, msg);
 
         if (status < 0)
           {
-            error ("__ftp_mget__: can't create directory %s%s%s. %s",
-                   target.c_str (), sep.c_str (), directory.c_str (),
-                   msg.c_str ());
-
+            ok = false;
+            errmsg = "__ftp_mget__: can not create directory '"
+              + target + sep + directory + "': " + msg;
             return;
           }
       }
 
     cwd (directory);
 
-    if (! error_state)
+    if (good ())
       {
         unwind_protect_safe frame;
 
         frame.add_fcn (reset_path, this);
 
         string_vector sv = list ();
 
         for (octave_idx_type i = 0; i < sv.length (); i++)
@@ -168,56 +169,56 @@ public:
               {
                 std::string realfile = target + directory + sep + sv(i);
 
                 std::ofstream ofile (realfile.c_str (),
                                      std::ios::out | std::ios::binary);
 
                 if (! ofile.is_open ())
                   {
-                    error ("__ftp_mget__: unable to open file");
+                    ok = false;
+                    errmsg = "__ftp_mget__: unable to open file";
                     break;
                   }
 
                 unwind_protect_safe frame2;
 
                 frame2.add_fcn (delete_file, realfile);
 
                 get (sv(i), ofile);
 
                 ofile.close ();
 
-                if (!error_state)
+                if (good ())
                   frame2.discard ();
-                else
-                  frame2.run ();
               }
 
-            if (error_state)
+            if (! good ())
               break;
           }
       }
   }
 
   string_vector mput_directory (const std::string& base,
                                 const std::string& directory) const
   {
-    string_vector retval;
+    string_vector file_list;
 
     std::string realdir
       = (base.length () == 0
          ? directory : base + file_ops::dir_sep_str () + directory);
 
-    if (! mkdir (directory, false))
-      warning ("__ftp_mput__: can not create the remote directory ""%s""",
-               realdir.c_str ());
+    mkdir (directory);
+
+    if (! good ())
+      return file_list;
 
     cwd (directory);
 
-    if (! error_state)
+    if (good ())
       {
         unwind_protect_safe frame;
 
         frame.add_fcn (reset_path, this);
 
         dir_entry dirlist (realdir);
 
         if (dirlist)
@@ -231,58 +232,61 @@ public:
                 if (file == "." || file == "..")
                   continue;
 
                 std::string realfile = realdir + file_ops::dir_sep_str () + file;
                 file_stat fs (realfile);
 
                 if (! fs.exists ())
                   {
-                    error ("__ftp__mput: file ""%s"" does not exist",
-                           realfile.c_str ());
+                    ok = false;
+                    errmsg = "__ftp__mput: file '" + realfile
+                      + "' does not exist";
                     break;
                   }
 
                 if (fs.is_dir ())
                   {
-                    retval.append (mput_directory (realdir, file));
+                    file_list.append (mput_directory (realdir, file));
 
-                    if (error_state)
+                    if (! good ())
                       break;
                   }
                 else
                   {
                     // FIXME Does ascii mode need to be flagged here?
                     std::ifstream ifile (realfile.c_str (), std::ios::in |
                                          std::ios::binary);
 
                     if (! ifile.is_open ())
                       {
-                        error ("__ftp_mput__: unable to open file ""%s""",
-                               realfile.c_str ());
+                        ok = false;
+                        errmsg = "__ftp_mput__: unable to open file '"
+                          + realfile + "'";
                         break;
                       }
 
                     put (file, ifile);
 
                     ifile.close ();
 
-                    if (error_state)
+                    if (! good ())
                       break;
 
-                    retval.append (realfile);
+                    file_list.append (realfile);
                   }
               }
           }
         else
-          error ("__ftp_mput__: can not read the directory ""%s""",
-                 realdir.c_str ());
+          {
+            ok = false;
+            errmsg = "__ftp_mput__: can not read the directory '"
+              + realdir + "'";
+          }
       }
-
-    return retval;
   }
 
   virtual void dir (void) const { }
 
   virtual string_vector list (void) const { return string_vector (); }
 
   virtual void get_fileinfo (const std::string& /* filename */,
                              double& /* filesize */,
@@ -293,16 +297,18 @@ public:
 
 protected:
 
   octave_refcount<size_t> count;
   std::string host;
   std::string userpwd;
   bool valid;
   bool ascii_mode;
+  mutable bool ok;
+  mutable std::string errmsg;
 
 private:
 
   // No copying!
 
   base_url_transfer (const base_url_transfer&);
 
   base_url_transfer& operator = (const base_url_transfer&);
@@ -343,82 +349,82 @@ throw_away (void *, size_t size, size_t 
 // class, but you can't pass the va_list from the wrapper SETOPT to
 // the curl_easy_setopt function.
 #define SETOPT(option, parameter) \
   do \
     { \
       CURLcode res = curl_easy_setopt (curl, option, parameter); \
       if (res != CURLE_OK) \
         { \
-          error ("%s", curl_easy_strerror (res)); \
+          ok = false; \
+          errmsg = curl_easy_strerror (res); \
           return; \
         } \
     } \
   while (0)
 
-// Sames as above, but return retval.
+// Same as above but with a return value.
 #define SETOPTR(option, parameter) \
   do \
     { \
       CURLcode res = curl_easy_setopt (curl, option, parameter); \
       if (res != CURLE_OK) \
         { \
-          error ("%s", curl_easy_strerror (res)); \
+          ok = false; \
+          errmsg = curl_easy_strerror (res); \
           return retval; \
         } \
     } \
   while (0)
 
 class curl_transfer : public base_url_transfer
 {
 public:
 
   curl_transfer (void)
     : base_url_transfer (), curl (curl_easy_init ()), errnum ()
   {
     if (curl)
       valid = true;
     else
-      error ("can not create curl object");
+      errmsg = "can not create curl object";
   }
 
   curl_transfer (const std::string& host_arg, const std::string& user_arg,
                  const std::string& passwd)
     : base_url_transfer (host_arg, user_arg, passwd),
       curl (curl_easy_init ()), errnum ()
   {
     if (curl)
       valid = true;
     else
       {
-        error ("can not create curl object");
+        errmsg = "can not create curl object";
         return;
       }
 
     init (user_arg, passwd, std::cin, octave_stdout);
 
     std::string url ("ftp://" + host_arg);
     SETOPT (CURLOPT_URL, url.c_str ());
 
     // Setup the link, with no transfer.
     perform ();
   }
 
   curl_transfer (const std::string& url, const std::string& method,
-                 const Cell& param, std::ostream& os, bool& retval)
-    : base_url_transfer (url, method, param, os, retval),
+                 const Cell& param, std::ostream& os)
+    : base_url_transfer (url, method, param, os),
       curl (curl_easy_init ()), errnum ()
   {
-    retval = false;
-
     if (curl)
       valid = true;
     else
       {
-        error ("can not create curl object");
+        errmsg = "can not create curl object";
         return;
       }
 
     init ("", "", std::cin, os);
 
     SETOPT (CURLOPT_NOBODY, 0);
 
     // Restore the default HTTP request method to GET after setting
@@ -438,43 +444,38 @@ public:
     else if (method == "post")
       {
         SETOPT (CURLOPT_URL, url.c_str ());
         SETOPT (CURLOPT_POSTFIELDS, query_string.c_str ());
       }
     else
       SETOPT (CURLOPT_URL, url.c_str ());
 
-    retval = perform (true);
+    perform ();
   }
 
   ~curl_transfer (void)
   {
     if (curl)
       curl_easy_cleanup (curl);
   }
 
-  bool perform (bool silent = false) const
+  void perform (void) const
   {
-    bool retval = false;
-
     BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
     errnum = curl_easy_perform (curl);
+
     if (errnum != CURLE_OK)
       {
-        if (! silent)
-          error ("%s", curl_easy_strerror (errnum));
+        ok = false;
+        errmsg = curl_easy_strerror (errnum);
       }
-    else
-      retval = true;
 
     END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
-
-    return retval;
   }
 
   std::string lasterror (void) const
   {
     return std::string (curl_easy_strerror (errnum));
   }
 
   void set_ostream (std::ostream& os) const
@@ -484,134 +485,184 @@ public:
 
   void set_istream (std::istream& is) const
   {
     SETOPT (CURLOPT_READDATA, static_cast<void*> (&is));
   }
 
   void ascii (void)
   {
+    ascii_mode = true;
     SETOPT (CURLOPT_TRANSFERTEXT, 1);
-    ascii_mode = true;
   }
 
   void binary (void)
   {
+    ascii_mode = false;
     SETOPT (CURLOPT_TRANSFERTEXT, 0);
-    ascii_mode = false;
   }
 
   void cwd (const std::string& path) const
   {
     struct curl_slist *slist = 0;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
+
     std::string cmd = "cwd " + path;
     slist = curl_slist_append (slist, cmd.c_str ());
     SETOPT (CURLOPT_POSTQUOTE, slist);
+
     perform ();
+    if (! good ())
+      return;
+
     SETOPT (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
   }
 
   void del (const std::string& file) const
   {
     struct curl_slist *slist = 0;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
+
     std::string cmd = "dele " + file;
     slist = curl_slist_append (slist, cmd.c_str ());
     SETOPT (CURLOPT_POSTQUOTE, slist);
+
     perform ();
+    if (! good ())
+      return;
+
     SETOPT (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
   }
 
   void rmdir (const std::string& path) const
   {
     struct curl_slist *slist = 0;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
+
     std::string cmd = "rmd " + path;
     slist = curl_slist_append (slist, cmd.c_str ());
     SETOPT (CURLOPT_POSTQUOTE, slist);
+
     perform ();
+    if (! good ())
+      return;
+
     SETOPT (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
   }
 
-  bool mkdir (const std::string& path, bool silent) const
+  void mkdir (const std::string& path) const
   {
-    bool retval = false;
     struct curl_slist *slist = 0;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
+
     std::string cmd = "mkd " + path;
     slist = curl_slist_append (slist, cmd.c_str ());
-    SETOPTR (CURLOPT_POSTQUOTE, slist);
-    retval = perform (silent);
-    SETOPTR (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
-    return retval;
+    SETOPT (CURLOPT_POSTQUOTE, slist);
+
+    perform ();
+    if (! good ())
+      return;
+
+    SETOPT (CURLOPT_POSTQUOTE, 0);
   }
 
   void rename (const std::string& oldname, const std::string& newname) const
   {
     struct curl_slist *slist = 0;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
+
     std::string cmd = "rnfr " + oldname;
     slist = curl_slist_append (slist, cmd.c_str ());
     cmd = "rnto " + newname;
     slist = curl_slist_append (slist, cmd.c_str ());
     SETOPT (CURLOPT_POSTQUOTE, slist);
+
     perform ();
+    if (! good ())
+      return;
+
     SETOPT (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
   }
 
   void put (const std::string& file, std::istream& is) const
   {
     std::string url = "ftp://" + host + "/" + file;
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_UPLOAD, 1);
     SETOPT (CURLOPT_NOBODY, 0);
     set_istream (is);
+
     perform ();
+    if (! good ())
+      return;
+
     set_istream (std::cin);
     SETOPT (CURLOPT_NOBODY, 1);
     SETOPT (CURLOPT_UPLOAD, 0);
     url = "ftp://" + host;
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   void get (const std::string& file, std::ostream& os) const
   {
     std::string url = "ftp://" + host + "/" + file;
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_NOBODY, 0);
     set_ostream (os);
+
     perform ();
+    if (! good ())
+      return;
+
     set_ostream (octave_stdout);
     SETOPT (CURLOPT_NOBODY, 1);
     url = "ftp://" + host;
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   void dir (void) const
   {
     std::string url = "ftp://" + host + "/";
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_NOBODY, 0);
+
     perform ();
+    if (! good ())
+      return;
+
     SETOPT (CURLOPT_NOBODY, 1);
     url = "ftp://" + host;
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   string_vector list (void) const
   {
     string_vector retval;
+
     std::ostringstream buf;
     std::string url = "ftp://" + host + "/";
     SETOPTR (CURLOPT_WRITEDATA, static_cast<void*> (&buf));
     SETOPTR (CURLOPT_URL, url.c_str ());
     SETOPTR (CURLOPT_DIRLISTONLY, 1);
     SETOPTR (CURLOPT_NOBODY, 0);
+
     perform ();
+    if (! good ())
+      return retval;
+
     SETOPTR (CURLOPT_NOBODY, 1);
     url = "ftp://" + host;
     SETOPTR (CURLOPT_WRITEDATA, static_cast<void*> (&octave_stdout));
     SETOPTR (CURLOPT_DIRLISTONLY, 0);
     SETOPTR (CURLOPT_URL, url.c_str ());
 
     // Count number of directory entries
     std::string str = buf.str ();
@@ -631,16 +682,17 @@ public:
       {
         size_t newpos = str.find_first_of ('\n', pos);
         if (newpos == std::string::npos)
           break;
 
         retval(i) = str.substr(pos, newpos - pos);
         pos = newpos + 1;
       }
+
     return retval;
   }
 
   void get_fileinfo (const std::string& filename, double& filesize,
                      time_t& filetime, bool& fileisdir) const
   {
     std::string path = pwd ();
 
@@ -650,69 +702,77 @@ public:
     SETOPT (CURLOPT_HEADERFUNCTION, throw_away);
     SETOPT (CURLOPT_WRITEFUNCTION, throw_away);
 
     // FIXME
     // The MDTM command fails for a directory on the servers I tested
     // so this is a means of testing for directories. It also means
     // I can't get the date of directories!
 
-    if (! perform (true))
+    perform ();
+    if (! good ())
       {
         fileisdir = true;
         filetime = -1;
         filesize = 0;
+
+        return;
       }
-    else
-      {
-        fileisdir = false;
-        time_t ft;
-        curl_easy_getinfo (curl, CURLINFO_FILETIME, &ft);
-        filetime = ft;
-        double fs;
-        curl_easy_getinfo (curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &fs);
-        filesize = fs;
-      }
+
+    fileisdir = false;
+    time_t ft;
+    curl_easy_getinfo (curl, CURLINFO_FILETIME, &ft);
+    filetime = ft;
+    double fs;
+    curl_easy_getinfo (curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &fs);
+    filesize = fs;
 
     SETOPT (CURLOPT_WRITEFUNCTION, write_data);
     SETOPT (CURLOPT_HEADERFUNCTION, 0);
     SETOPT (CURLOPT_FILETIME, 0);
     url = "ftp://" + host;
     SETOPT (CURLOPT_URL, url.c_str ());
 
     // The MDTM command seems to reset the path to the root with the
     // servers I tested with, so cd again into the correct path. Make
     // the path absolute so that this will work even with servers that
     // don't end up in the root after an MDTM command.
     cwd ("/" + path);
   }
 
   std::string pwd (void) const
   {
+    std::string retval;
+
     struct curl_slist *slist = 0;
-    std::string retval;
-    std::ostringstream buf;
+
+    unwind_protect frame;
+    frame.add_fcn (curl_slist_free_all, slist);
 
     slist = curl_slist_append (slist, "pwd");
     SETOPTR (CURLOPT_POSTQUOTE, slist);
     SETOPTR (CURLOPT_HEADERFUNCTION, write_data);
+
+    std::ostringstream buf;
     SETOPTR (CURLOPT_WRITEHEADER, static_cast<void *>(&buf));
 
     perform ();
+    if (! good ())
+      return retval;
+
     retval = buf.str ();
 
     // Can I assume that the path is alway in "" on the last line
     size_t pos2 = retval.rfind ('"');
     size_t pos1 = retval.rfind ('"', pos2 - 1);
     retval = retval.substr (pos1 + 1, pos2 - pos1 - 1);
 
     SETOPTR (CURLOPT_HEADERFUNCTION, 0);
     SETOPTR (CURLOPT_WRITEHEADER, 0);
     SETOPTR (CURLOPT_POSTQUOTE, 0);
-    curl_slist_free_all (slist);
 
     return retval;
   }
 
 private:
 
   CURL *curl;
   mutable CURLcode errnum;
@@ -789,25 +849,26 @@ private:
 
     query.flush ();
 
     return query.str ();
   }
 };
 
 #undef SETOPT
-#undef SETOPTR
 
 #endif
 
+#if ! defined (HAVE_CURL)
 static void
 disabled_error (void)
 {
   error ("support for url transfers was disabled when Octave was built");
 }
+#endif
 
 class url_transfer
 {
 public:
 
 #if defined (HAVE_CURL)
 # define REP_CLASS curl_transfer
 #else
@@ -826,18 +887,18 @@ public:
     : rep (new REP_CLASS (host, user, passwd))
   {
 #if !defined (HAVE_CURL)
     disabled_error ();
 #endif
   }
 
   url_transfer (const std::string& url, const std::string& method,
-                const Cell& param, std::ostream& os, bool& retval)
-    : rep (new REP_CLASS (url, method, param, os, retval))
+                const Cell& param, std::ostream& os)
+    : rep (new REP_CLASS (url, method, param, os))
   {
 #if !defined (HAVE_CURL)
     disabled_error ();
 #endif
   }
 
 #undef REP_CLASS
 
@@ -863,16 +924,18 @@ public:
         rep->count++;
       }
 
     return *this;
   }
 
   bool is_valid (void) const { return rep->is_valid (); }
 
+  bool good (void) const { return rep->good (); }
+
   std::string lasterror (void) const { return rep->lasterror (); }
 
   void set_ostream (std::ostream& os) const { rep->set_ostream (os); }
 
   void set_istream (std::istream& is) const { rep->set_istream (is); }
 
   void ascii (void) const { rep->ascii (); }
 
@@ -883,20 +946,17 @@ public:
   bool is_binary (void) const { return rep->is_binary (); }
 
   void cwd (const std::string& path) const { rep->cwd (path); }
 
   void del (const std::string& file) const { rep->del (file); }
 
   void rmdir (const std::string& path) const { rep->rmdir (path); }
 
-  bool mkdir (const std::string& path, bool silent = false) const
-  {
-    return rep->mkdir (path, silent);
-  }
+  void mkdir (const std::string& path) const { rep->mkdir (path); }
 
   void rename (const std::string& oldname, const std::string& newname) const
   {
     rep->rename (oldname, newname);
   }
 
   void put (const std::string& file, std::istream& is) const
   {
@@ -906,23 +966,23 @@ public:
   void get (const std::string& file, std::ostream& os) const
   {
     rep->get (file, os);
   }
 
   void mget_directory (const std::string& directory,
                        const std::string& target) const
   {
-    return rep->mget_directory (directory, target);
+    rep->mget_directory (directory, target);
   }
 
   string_vector mput_directory (const std::string& base,
                                 const std::string& directory) const
   {
-    return mput_directory (base, directory);
+    return rep->mput_directory (base, directory);
   }
 
   void dir (void) const { rep->dir (); }
 
   string_vector list (void) const { return rep->list (); }
 
   void get_fileinfo (const std::string& filename, double& filesize,
                      time_t& filetime, bool& fileisdir) const
@@ -1282,44 +1342,41 @@ urlwrite (\"http://www.google.com/search
       error ("urlwrite: unable to open file");
       return retval;
     }
 
   unwind_protect_safe frame;
 
   frame.add_fcn (delete_file, filename);
 
-  bool ok;
-  url_transfer curl = url_transfer (url, method, param, ofile, ok);
+  url_transfer curl = url_transfer (url, method, param, ofile);
 
   ofile.close ();
 
-  if (! error_state)
+  if (curl.good ())
+    frame.discard ();
+
+  if (nargout > 0)
     {
-      frame.discard ();
-
-      if (nargout > 0)
+      if (curl.good ())
         {
-          if (ok)
-            {
-              retval(2) = std::string ();
-              retval(1) = true;
-              retval(0) = octave_env::make_absolute (filename);
-            }
-          else
-            {
-              retval(2) = curl.lasterror ();
-              retval(1) = false;
-              retval(0) = std::string ();
-            }
+          retval(2) = std::string ();
+          retval(1) = true;
+          retval(0) = octave_env::make_absolute (filename);
         }
+      else
+        {
+          retval(2) = curl.lasterror ();
+          retval(1) = false;
+          retval(0) = std::string ();
+        }
+    }
 
-      if (nargout < 2 && ! ok)
-        error ("urlwrite: curl: %s", curl.lasterror ().c_str ());
-    }
+  if (nargout < 2 && ! curl.good ())
+    error ("urlwrite: %s", curl.lasterror ().c_str ());
 
   return retval;
 }
 
 DEFUN_DLD (urlread, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
@@ -1410,32 +1467,31 @@ s = urlread (\"http://www.google.com/sea
         {
           error ("urlread: number of elements in PARAM must be even");
           return retval;
         }
     }
 
   std::ostringstream buf;
 
-  bool ok;
-  url_transfer curl = url_transfer (url, method, param, buf, ok);
+  url_transfer curl = url_transfer (url, method, param, buf);
 
-  if (! error_state)
+  if (curl.good ())
     {
       if (nargout > 0)
         {
           // Return empty string if no error occured.
-          retval(2) = ok ? "" : curl.lasterror ();
-          retval(1) = ok;
+          retval(2) = curl.good () ? "" : curl.lasterror ();
+          retval(1) = curl.good ();
           retval(0) = buf.str ();
         }
+    }
 
-      if (nargout < 2 && ! ok)
-        error ("urlread: curl: %s", curl.lasterror().c_str());
-    }
+  if (nargout < 2 && ! curl.good ())
+    error ("urlread: %s", curl.lasterror().c_str());
 
   return retval;
 }
 
 DEFUN_DLD (__ftp__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{handle} =} __ftp__ (@var{host})\n\
 @deftypefnx {Loadable Function} {@var{handle} =} __ftp__ (@var{host}, @var{username}, @var{password})\n\
@@ -1896,17 +1952,17 @@ Undocumented internal function\n\
         return retval;
 
       if (curl.is_valid ())
         {
           std::string pat = args(1).string_value ();
 
           if (! error_state)
             {
-              string_vector result;
+              string_vector file_list;
 
               glob_match pattern (file_ops::tilde_expand (pat));
               string_vector files = pattern.glob ();
 
               for (octave_idx_type i = 0; i < files.length (); i++)
                 {
                   std::string file = files (i);
 
@@ -1915,19 +1971,23 @@ Undocumented internal function\n\
                   if (! fs.exists ())
                     {
                       error ("__ftp__mput: file does not exist");
                       break;
                     }
 
                   if (fs.is_dir ())
                     {
-                      result.append (curl.mput_directory ("", file));
-                      if (error_state)
-                        break;
+                      file_list.append (curl.mput_directory ("", file));
+
+                      if (! curl.good ())
+                        {
+                          error ("__ftp_mput__: %s", curl.lasterror().c_str());
+                          break;
+                        }
                     }
                   else
                     {
                       // FIXME Does ascii mode need to be flagged here?
                       std::ifstream ifile (file.c_str (), std::ios::in |
                                            std::ios::binary);
 
                       if (! ifile.is_open ())
@@ -1935,25 +1995,28 @@ Undocumented internal function\n\
                           error ("__ftp_mput__: unable to open file");
                           break;
                         }
 
                       curl.put (file, ifile);
 
                       ifile.close ();
 
-                      if (error_state)
-                        break;
+                      if (! curl.good ())
+                        {
+                          error ("__ftp_mput__: %s", curl.lasterror().c_str());
+                          break;
+                        }
 
-                      result.append (file);
+                      file_list.append (file);
                     }
                 }
 
               if (nargout > 0)
-                retval = result;
+                retval = file_list;
             }
           else
             error ("__ftp_mput__: expecting file name patter as second argument");
         }
       else
         error ("__ftp_mput__: invalid ftp handle");
     }
 
@@ -1988,16 +2051,17 @@ Undocumented internal function\n\
             target = args(2).string_value () + file_ops::dir_sep_str ();
 
           if (! error_state)
             {
               string_vector sv = curl.list ();
               octave_idx_type n = 0;
               glob_match pattern (file);
 
+
               for (octave_idx_type i = 0; i < sv.length (); i++)
                 {
                   if (pattern.match (sv(i)))
                     {
                       n++;
 
                       time_t ftime;
                       bool fisdir;
@@ -2022,24 +2086,25 @@ Undocumented internal function\n\
                           unwind_protect_safe frame;
 
                           frame.add_fcn (delete_file, target + sv(i));
 
                           curl.get (sv(i), ofile);
 
                           ofile.close ();
 
-                          if (!error_state)
+                          if (curl.good ())
                             frame.discard ();
-                          else
-                            frame.run ();
                         }
 
-                      if (error_state)
-                        break;
+                      if (! curl.good ())
+                        {
+                          error ("__ftp_mget__: %s", curl.lasterror().c_str());
+                          break;
+                        }
                     }
                 }
               if (n == 0)
                 error ("__ftp_mget__: file not found");
             }
           else
             error ("__ftp_mget__: expecting file name and target as second and third arguments");
         }
