# HG changeset patch
# User Gabriele Pannocchia <g.pannocchia@ing.unipi.it>
# Date 1225211460 14400
#      Tue Oct 28 12:31:00 2008 -0400
# Node ID 5ee11a81688e3b55c92f0ba12c4ed8b1a46dd8ba
# Parent  b3734f1cb592559ab1c53d8e3b29f867185d38fd
qp.m: convert b <= x <= b and b <= A*x <= b to equality constraints

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-28  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
+
+	* optimization/qp.m: Convert bounds of the form b <= x <= b and
+	constraints of the form b <= A*x <= b to equality constraints.
+
 2008-10-27  Søren Hauberg  <hauberg@gmail.com>
 
 	* plot/ellipsoid.m: Check nargin == 6, not nargin == 5.
 
 2008-10-22  Ben Abbott <bpabbott@mac.com>
 
 	* plot/cla.m: Fix error when no children to clear.
 
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -126,54 +126,92 @@ function [x, obj, INFO, lambda] = qp (x0
     ## Bound constraints
     Ain = zeros (0, n);
     bin = zeros (0, 1);
     n_in = 0;
     if (nargin > 5)
       if (! isempty (lb))
 	if (length(lb) != n)
 	  error ("qp: lower bound has incorrect length");
-	else
+	elseif (isempty (ub))
 	  Ain = [Ain; eye(n)];
 	  bin = [bin; lb];
 	endif
       endif
 
       if (! isempty (ub))
 	if (length (ub) != n)
 	  error ("qp: upper bound has incorrect length");
-	else
+	elseif (isempty (lb))
 	  Ain = [Ain; -eye(n)];
 	  bin = [bin; -ub];
 	endif
       endif
+      
+      if (! isempty (lb) && ! isempty (ub))
+	rtol = sqrt (eps);
+	for i = 1:n
+	  if (abs(lb (i) - ub(i)) < rtol*(1 + max (abs (lb(i) + ub(i)))))
+            ## These are actually an equality constraint
+	    tmprow = zeros(1,n);
+	    tmprow(i) = 1;
+            A = [A;tmprow];
+            b = [b; 0.5*(lb(i) + ub(i))];
+	    n_eq = n_eq + 1;
+	  else
+	    tmprow = zeros(1,n);
+	    tmprow(i) = 1;
+	    Ain = [Ain; tmprow; -tmprow];
+	    bin = [bin; lb(i); -ub(i)];
+	    n_in = n_in + 2;
+	  endif
+	endfor
+      endif
     endif
 
     ## Inequality constraints
     if (nargin > 7)
       [dimA_in, n1] = size (A_in);
       if (n1 != n)
 	error ("qp: inequality constraint matrix has incorrect column dimension");
       else
 	if (! isempty (A_lb))
 	  if (length (A_lb) != dimA_in)
 	    error ("qp: inequality constraint matrix and lower bound vector inconsistent");
-	  else
+	  elseif (isempty (A_ub))
 	    Ain = [Ain; A_in];
 	    bin = [bin; A_lb];
 	  endif
 	endif
 	if (! isempty (A_ub))
 	  if (length (A_ub) != dimA_in)
 	    error ("qp: inequality constraint matrix and upper bound vector inconsistent");
-	  else
+	  elseif (isempty (A_lb))
 	    Ain = [Ain; -A_in];
 	    bin = [bin; -A_ub];
 	  endif
 	endif
+	
+	if (! isempty (A_lb) && ! isempty (A_ub))
+	  rtol = sqrt (eps);
+	  for i=1:dimA_in
+	    if (abs (A_lb(i) - A_ub(i)) < rtol*(1 + max (abs (A_lb(i) + A_ub(i)))))
+              ## These are actually an equality constraint
+	      tmprow = A_in(i,:);
+              A = [A;tmprow];
+              b = [b; 0.5*(A_lb(i) + A_ub(i))];
+	      n_eq = n_eq + 1;
+	    else
+	      tmprow = A_in(i,:);
+	      Ain = [Ain; tmprow; -tmprow];
+	      bin = [bin; A_lb(i); -A_ub(i)];
+	      n_in = n_in + 2;
+	    endif
+	  endfor
+	endif
       endif
     endif
 
     ## Now we should have the following QP:
     ##
     ##   min_x  0.5*x'*H*x + x'*q
     ##   s.t.   A*x = b
     ##          Ain*x >= bin
@@ -190,18 +228,18 @@ function [x, obj, INFO, lambda] = qp (x0
     ## Check if the initial guess is feasible.
     if (isa (x0, "single") || isa (H, "single") || isa (q, "single") || isa (A, "single")
 	|| isa (b, "single"))
       rtol = sqrt (eps ("single"));
     else
       rtol = sqrt (eps);
     endif
 
-    eq_infeasible = (n_eq > 0 && norm (A*x0-b) > rtol*(1+norm (b)));
-    in_infeasible = (n_in > 0 && any (Ain*x0-bin < -rtol*(1+norm (bin))));
+    eq_infeasible = (n_eq > 0 && norm (A*x0-b) > rtol*(1+abs (b)));
+    in_infeasible = (n_in > 0 && any (Ain*x0-bin < -rtol*(1+abs (bin))));
 
     info = 0;
     if (eq_infeasible || in_infeasible)
       ## The initial guess is not feasible.
       ## First define xbar that is feasible with respect to the equality
       ## constraints.
       if (eq_infeasible)
 	if (rank (A) < n_eq)
@@ -211,17 +249,17 @@ function [x, obj, INFO, lambda] = qp (x0
       else
 	xbar = x0;
       endif
 
       ## Check if xbar is feasible with respect to the inequality
       ## constraints also.
       if (n_in > 0)
 	res = Ain * xbar - bin;
-	if (any (res < -rtol * (1 + norm (bin))))
+	if (any (res < -rtol * (1 + abs (bin))))
 	  ## xbar is not feasible with respect to the inequality
 	  ## constraints.  Compute a step in the null space of the
 	  ## equality constraints, by solving a QP.  If the slack is
 	  ## small, we have a feasible initial guess.  Otherwise, the
 	  ## problem is infeasible.
 	  if (n_eq > 0)
 	    Z = null (A);
 	    if (isempty (Z))
