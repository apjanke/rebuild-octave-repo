# HG changeset patch
# User Rik <rik@octave.org>
# Date 1346957064 25200
#      Thu Sep 06 11:44:24 2012 -0700
# Node ID d7514add71e2d65d297e6a4c64ad4e597c0a3015
# Parent  ba243f0234b08be716bbf2bd2f1c000b99e88909
configure.ac: Use m4 quoting more consistently throughout file.

* configure.ac: Use m4 quoting more consistently throughout file.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -54,17 +54,17 @@ OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define to 1 if this is Octave.])
   
 AC_USE_SYSTEM_EXTENSIONS
 
 ### Path separator.
 
 sepchar=:
-AC_ARG_WITH(sepchar,
+AC_ARG_WITH([sepchar],
   [AS_HELP_STRING([--with-sepchar=<char>],
     [use <char> as the path separation character])])
 case $with_sepchar in
   yes | "")
     case "$canonical_host_type" in
       *-*-mingw* | *-*-msdosmsvc)
         sepchar=';'
         ;;
@@ -80,101 +80,101 @@ esac
 AC_SUBST(sepchar)
 AC_DEFINE_UNQUOTED(SEPCHAR, ['$sepchar'],
   [Define this to be the path separator for your system, as a character constant.])
 AC_DEFINE_UNQUOTED(SEPCHAR_STR, ["$sepchar"],
   [Define this to be the path separator for your system, as a string.])
 
 ### Set default file locations
 
-OCTAVE_SET_DEFAULT(man1dir, '$(mandir)/man1')
-OCTAVE_SET_DEFAULT(man1ext, '.1')
-OCTAVE_SET_DEFAULT(doc_cache_file, '$(octetcdir)/doc-cache')
-OCTAVE_SET_DEFAULT(texi_macros_file, '$(octetcdir)/macros.texi')
-OCTAVE_SET_DEFAULT(infofile, '$(infodir)/octave.info')
-OCTAVE_SET_DEFAULT(octincludedir, '$(includedir)/octave-$(version)/octave')
-OCTAVE_SET_DEFAULT(fcnfiledir, '$(datadir)/octave/$(version)/m')
-OCTAVE_SET_DEFAULT(localfcnfiledir, '$(datadir)/octave/site/m')
-OCTAVE_SET_DEFAULT(localapifcnfiledir,
+OCTAVE_SET_DEFAULT([man1dir], '$(mandir)/man1')
+OCTAVE_SET_DEFAULT([man1ext], '.1')
+OCTAVE_SET_DEFAULT([doc_cache_file], '$(octetcdir)/doc-cache')
+OCTAVE_SET_DEFAULT([texi_macros_file], '$(octetcdir)/macros.texi')
+OCTAVE_SET_DEFAULT([infofile], '$(infodir)/octave.info')
+OCTAVE_SET_DEFAULT([octincludedir], '$(includedir)/octave-$(version)/octave')
+OCTAVE_SET_DEFAULT([fcnfiledir], '$(datadir)/octave/$(version)/m')
+OCTAVE_SET_DEFAULT([localfcnfiledir], '$(datadir)/octave/site/m')
+OCTAVE_SET_DEFAULT([localapifcnfiledir],
   '$(datadir)/octave/site/$(api_version)/m')
-OCTAVE_SET_DEFAULT(localverfcnfiledir, '$(datadir)/octave/$(version)/site/m')
-OCTAVE_SET_DEFAULT(octetcdir, '$(datadir)/octave/$(version)/etc')
-OCTAVE_SET_DEFAULT(octlibdir, '$(libdir)/octave/$(version)')
-OCTAVE_SET_DEFAULT(archlibdir,
+OCTAVE_SET_DEFAULT([localverfcnfiledir], '$(datadir)/octave/$(version)/site/m')
+OCTAVE_SET_DEFAULT([octetcdir], '$(datadir)/octave/$(version)/etc')
+OCTAVE_SET_DEFAULT([octlibdir], '$(libdir)/octave/$(version)')
+OCTAVE_SET_DEFAULT([archlibdir],
   '$(libexecdir)/octave/$(version)/exec/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localarchlibdir,
+OCTAVE_SET_DEFAULT([localarchlibdir],
   '$(libexecdir)/octave/site/exec/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localapiarchlibdir,
+OCTAVE_SET_DEFAULT([localapiarchlibdir],
   '$(libexecdir)/octave/$(api_version)/site/exec/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localverarchlibdir,
+OCTAVE_SET_DEFAULT([localverarchlibdir],
   '$(libexecdir)/octave/$(version)/site/exec/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(octfiledir,
+OCTAVE_SET_DEFAULT([octfiledir],
   '$(libdir)/octave/$(version)/oct/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localoctfiledir,
+OCTAVE_SET_DEFAULT([localoctfiledir],
   '$(libdir)/octave/site/oct/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localapioctfiledir,
+OCTAVE_SET_DEFAULT([localapioctfiledir],
   '$(libdir)/octave/site/oct/$(api_version)/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(localveroctfiledir,
+OCTAVE_SET_DEFAULT([localveroctfiledir],
   '$(libdir)/octave/$(version)/site/oct/$(canonical_host_type)')
-OCTAVE_SET_DEFAULT(imagedir, '$(datadir)/octave/$(version)/imagelib')
+OCTAVE_SET_DEFAULT([imagedir], '$(datadir)/octave/$(version)/imagelib')
 
 ### Find pkg-config executable (sets $PKG_CONFIG)
 
 PKG_PROG_PKG_CONFIG
 
 ### Make configure args available for other uses.
 
 config_opts=$ac_configure_args
 AC_SUBST(config_opts)
 
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
 BOUNDS_CHECKING=false
-AC_ARG_ENABLE(bounds-check,
+AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
     [enable bounds checking for indexing in internal array classes])],
   [if test "$enableval" = yes; then BOUNDS_CHECKING=true; fi], [])
 if $BOUNDS_CHECKING; then
   AC_DEFINE(BOUNDS_CHECKING, 1, [Define to 1 to use internal bounds checking.])
 fi
 
 ### Use Octave's built-in memory allocator rather than straightforward malloc.
 ### Disabled by default.
 
 USE_OCTAVE_ALLOCATOR=false
-AC_ARG_ENABLE(octave-allocator,
+AC_ARG_ENABLE([octave-allocator],
   [AS_HELP_STRING([--enable-octave-allocator],
     [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.])],
   [if test "$enableval" = yes; then USE_OCTAVE_ALLOCATOR=true; fi], [])
 if $USE_OCTAVE_ALLOCATOR; then
   AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1,
     [Define to 1 to use octave_allocator class.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior but incurs a significant slowdown, and is thus
 ### disabled by default.
 
 USE_ATOMIC_REFCOUNT=false
-AC_ARG_ENABLE(atomic-refcount,
+AC_ARG_ENABLE([atomic-refcount],
   [AS_HELP_STRING([--enable-atomic-refcount],
     [use atomic operations for internal reference counting.  This is required for thread-safe behavior but does not by itself make Octave internals thread safe.])],
   [if test "$enableval" = yes; then USE_ATOMIC_REFCOUNT=true; fi], [])
 if $USE_ATOMIC_REFCOUNT; then
   AC_DEFINE(USE_ATOMIC_REFCOUNT, 1,
     [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
 DOCDIR=doc
-AC_ARG_ENABLE(docs,
+AC_ARG_ENABLE([docs],
   [AS_HELP_STRING([--disable-docs], [don't build documentation files])],
   [if test "$enableval" = no; then
      DOCDIR=
      warn_docs="building documentation disabled; make dist will fail"
      OCTAVE_CONFIGURE_WARNING([warn_docs])
    fi],
   [])
 AC_SUBST(DOCDIR)
@@ -183,19 +183,19 @@ AC_SUBST(DOCDIR)
 
 USE_64_BIT_IDX_T=false
 OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
   [if test "$enableval" = yes; then USE_64_BIT_IDX_T=true; fi], [])
 if $USE_64_BIT_IDX_T; then
-  AC_CHECK_SIZEOF(void *)
-  AC_CHECK_SIZEOF(int)
-  AC_CHECK_SIZEOF(long)
+  AC_CHECK_SIZEOF([void *])
+  AC_CHECK_SIZEOF([int])
+  AC_CHECK_SIZEOF([long])
   if test $ac_cv_sizeof_void_p -eq 8; then
     if test $ac_cv_sizeof_int -eq 8; then
       OCTAVE_IDX_TYPE=int
     elif test $ac_cv_sizeof_long -eq 8; then
       OCTAVE_IDX_TYPE=long
       AC_DEFINE(IDX_TYPE_LONG, 1, [Define to 1 if octave index type is long.])
     else
       warn_64_bit="no suitable type found for octave_idx_type so disabling 64-bit features"
@@ -204,17 +204,17 @@ if $USE_64_BIT_IDX_T; then
     fi
   else
     warn_64_bit="pointers are not 64-bits wide; disabling 64-bit features"
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     USE_64_BIT_IDX_T=false
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
-AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, $OCTAVE_IDX_TYPE,
+AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
 if $USE_64_BIT_IDX_T; then
   AC_DEFINE(USE_64_BIT_IDX_T, 1,
     [Define to 1 if using 64-bit integers for array dimensions and indexing.])
 fi
 AC_SUBST(USE_64_BIT_IDX_T)
 
 ### It seems that there are some broken inline assembly functions in
@@ -239,17 +239,17 @@ if test "$GXX" = yes; then
 
   AX_COMPARE_VERSION([$gxx_version], [lt], [3.5],
     [AC_MSG_ERROR([g++ version $gxx_version will probably fail to compile Octave])])
 
   GXX_VERSION="$gxx_version"
 fi
 AC_SUBST(GXX_VERSION)
 
-## FIXME: CXX_VERSION is deprecated and should be removed in version 3.12
+## FIXME: CXX_VERSION is deprecated and should be removed in Octave version 3.12
 CXX_VERSION="$gxx_version"
 AC_SUBST(CXX_VERSION)
 
 ### Determine which C compiler to use (we expect to find gcc).
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
@@ -287,17 +287,17 @@ if test "$GCC" = yes; then
   AX_COMPARE_VERSION([$gcc_version], [lt], [3],
     [warn_gcc_version="gcc version $gcc_version is likely to cause problems"
      OCTAVE_CONFIGURE_WARNING([warn_gcc_version])])
 
   GCC_VERSION="$gcc_version"
 fi
 AC_SUBST(CC_VERSION)
 
-## FIXME: CC_VERSION is deprecated and should be removed in version 3.12
+## FIXME: CC_VERSION is deprecated and should be removed in Octave version 3.12
 CC_VERSION="$gcc_version"
 AC_SUBST(GCC_VERSION)
 
 ### Determine the compiler flag necessary to create dependencies
 
 ## Assume GCC.
 INCLUDE_DEPS=true
 DEPEND_FLAGS="-M"
@@ -337,93 +337,93 @@ CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
 
 ### When compiling math for x87, problems may arise in some code comparing
 ### floating-point intermediate results.
 ### Generally, it helps to store the result in a local volatile variable,
 ### but it also degrades performance.
 ### Thus, we provide a FLOAT_TRUNCATE macro that may be defined to "volatile"
 ### when compiling for x87 target, or left empty for modern SSE math, that
 ### doesn't suffer from this problem at all.
-AC_ARG_ENABLE(float-truncate,
+AC_ARG_ENABLE([float-truncate],
   [AS_HELP_STRING([--enable-float-truncate],
     [enables truncating intermediate FP results.])],
   [if test "$enableval" = yes; then
      ac_float_truncate=volatile;
    else
      ac_float_truncate=;
    fi],
   [ac_float_truncate=])
 
-AC_DEFINE_UNQUOTED(FLOAT_TRUNCATE, $ac_float_truncate, 
+AC_DEFINE_UNQUOTED(FLOAT_TRUNCATE, [$ac_float_truncate], 
   [Define to volatile if you need to truncate intermediate FP results.])
 
 ### Determine extra CFLAGS that may be necessary for Octave.
 
 ## On Intel systems with gcc, we may need to compile with -mieee-fp
 ## to get full support for IEEE floating point.
 ##
 ## On Alpha/OSF systems, we need -mieee.
 
 ieee_fp_flag=
 case "$canonical_host_type" in
   i[[3456789]]86-*-*)
     if test "$GCC" = yes; then
-      OCTAVE_CC_FLAG(-mieee-fp, [
+      OCTAVE_CC_FLAG([-mieee-fp], [
         ieee_fp_flag=-mieee-fp
         XTRA_CFLAGS="$XTRA_CFLAGS -mieee-fp"
         AC_MSG_NOTICE([adding -mieee-fp to XTRA_CFLAGS])])
     fi
     if test "$GXX" = yes; then
-      OCTAVE_CXX_FLAG(-mieee-fp, [
+      OCTAVE_CXX_FLAG([-mieee-fp], [
         ieee_fp_flag=-mieee-fp
         XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-fp"
         AC_MSG_NOTICE([adding -mieee-fp to XTRA_CXXFLAGS])])
     fi
   ;;
   alpha*-*-*)
     if test "$GCC" = yes; then
-      OCTAVE_CC_FLAG(-mieee, [
+      OCTAVE_CC_FLAG([-mieee], [
         ieee_fp_flag=-mieee
         XTRA_CFLAGS="$XTRA_CFLAGS -mieee"
         AC_MSG_NOTICE([adding -mieee to XTRA_CFLAGS])])
     else
-      OCTAVE_CC_FLAG(-ieee, [
+      OCTAVE_CC_FLAG([-ieee], [
         ieee_fp_flag=-ieee
         XTRA_CFLAGS="$XTRA_CFLAGS -ieee"
         AC_MSG_NOTICE([adding -ieee to XTRA_CFLAGS])])
     fi
     if test "$GXX" = yes; then
-      OCTAVE_CXX_FLAG(-mieee, [
+      OCTAVE_CXX_FLAG([-mieee], [
         ieee_fp_flag=-mieee
         XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee"
         AC_MSG_NOTICE([adding -mieee to XTRA_CXXFLAGS])])
     else
-      OCTAVE_CXX_FLAG(-ieee, [
+      OCTAVE_CXX_FLAG([-ieee], [
         ieee_fp_flag=-ieee
         XTRA_CXXFLAGS="$XTRA_CXXFLAGS -ieee"
         AC_MSG_NOTICE([adding -ieee to XTRA_CXXFLAGS])])
     fi
   ;;
   *ibm-aix4*)
-    OCTAVE_CC_FLAG(-mminimal-toc, [
+    OCTAVE_CC_FLAG([-mminimal-toc], [
       XTRA_CFLAGS="$XTRA_CFLAGS -mminimal-toc"])
 
-    OCTAVE_CXX_FLAG(-mminimal-toc, [
+    OCTAVE_CXX_FLAG([-mminimal-toc], [
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mminimal-toc"])
   ;;
 esac
 
 AC_SUBST(XTRA_CFLAGS)
 AC_SUBST(XTRA_CXXFLAGS)
 
 ### Test whether the compiler supports OpenMP.  This is experimental so disable
 ### it by default.  Enable it with the flag --enable-openmp.
 
 USE_OPENMP=false
-AC_ARG_ENABLE(openmp,
+AC_ARG_ENABLE([openmp],
   [AS_HELP_STRING([--enable-openmp],
     [(EXPERIMENTAL) use OpenMP SMP multi-threading])],
   [if test "$enableval" = yes; then USE_OPENMP=true; fi], [])
 if $USE_OPENMP; then
   case "$canonical_host_type" in
     *-*-mingw* | *-*-cygwin* | *-*-gnu*)
       OCTAVE_CHECK_OPENMP(-fopenmp)
     ;;
@@ -463,27 +463,27 @@ else
   #      ## gendoc.cc unless we reduce the optimization level...
   #      ## BUILD_CXXFLAGS="-g -O1"
   #    fi
   #  ;;
   #esac
   BUILD_EXEEXT='$(EXEEXT)'
 fi
 
-AC_ARG_VAR(BUILD_CC,
+AC_ARG_VAR([BUILD_CC],
   [build system C compiler (used if cross compiling)])
-AC_ARG_VAR(BUILD_CFLAGS,
+AC_ARG_VAR([BUILD_CFLAGS],
   [build system C compiler flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_CXX,
+AC_ARG_VAR([BUILD_CXX],
   [build system C++ compiler (used if cross compiling)])
-AC_ARG_VAR(BUILD_CXXFLAGS,
+AC_ARG_VAR([BUILD_CXXFLAGS],
   [build system C++ compiler flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_LDFLAGS,
+AC_ARG_VAR([BUILD_LDFLAGS],
   [build system C++ compiler link flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_EXEEXT,
+AC_ARG_VAR([BUILD_EXEEXT],
   [build system executable extension (used if cross compiling)])
 
 dnl This is bogus.  We shouldn't have to explicitly add libc too!
 dnl Keep this check before the check for the Fortran compiler,
 dnl in case -lm is needed to compile Fortran programs.
 
 ### Look for math library.  If found, this will add -lm to LIBS.
 
@@ -595,16 +595,17 @@ if test "x$octave_cv_sizeof_fortran_inte
       AC_MSG_ERROR([in order to build Octave with 64-bit indexing support your Fortran compiler must have an option for setting the default integer size to 8 bytes.  See the file INSTALL for more information.])
     fi
   else
     AC_MSG_ERROR([your Fortran compiler must have an option to make integers the same size as octave_idx_type ($OCTAVE_IDX_TYPE).  See the file INSTALL for more information.])
   fi
 fi
 AC_SUBST(F77_INTEGER_8_FLAG)
 
+## FIXME: Is this really used?  Makefile seems to use $F77 for compiler
 FC=$F77
 AC_SUBST(FC)
 
 OCTAVE_F77_FLAG(-ffloat-store, [
   AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
   F77_FLOAT_STORE_FLAG=-ffloat-store
   AC_SUBST(F77_FLOAT_STORE_FLAG)
 ])
@@ -652,17 +653,17 @@ if test $ac_cv_pcre_h_macros_present = y
   if test $HAVE_PCRE_CONFIG = yes; then
     XTRA_CXXFLAGS="$XTRA_CXXFLAGS `pcre-config --cflags`"
     REGEX_LIBS="`pcre-config --libs`"
   else
     REGEX_LIBS="-lpcre"
   fi
   save_LIBS="$LIBS"
   LIBS="$REGEX_LIBS $LIBS"
-  AC_CHECK_FUNCS(pcre_compile,
+  AC_CHECK_FUNCS([pcre_compile],
     [AC_SUBST(REGEX_LIBS)],
     [AC_MSG_ERROR([$pcre_fail_msg])])
   LIBS="$save_LIBS"
 else
   AC_MSG_ERROR([$pcre_fail_msg])
 fi
 
 ### Check for ZLIB library.
@@ -685,48 +686,48 @@ AC_ARG_ENABLE([jit],
 LLVM_CXXFLAGS=
 LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
 LLVM_LIBS=
 
 if test $build_jit = true; then
 
   ## Find llvm-config program from environment variable or by searching
-  AC_ARG_VAR(LLVM_CONFIG, [path to llvm-config utility])
-  AC_CHECK_PROG(LLVM_CONFIG, llvm-config, llvm-config, [])
+  AC_ARG_VAR([LLVM_CONFIG], [path to llvm-config utility])
+  AC_CHECK_PROG([LLVM_CONFIG], llvm-config, llvm-config, [])
   
   AC_ARG_ENABLE([jit-debug],
     [AS_HELP_STRING([--enable-jit-debug], [enable debug printing of JIT IRs])])
 
   if test x$enable_jit_debug = "xyes"; then
     AC_DEFINE(OCTAVE_JIT_DEBUG, 1, [Define to 1 for JIT debug printing.])
   fi
 
   if test -z "$LLVM_CONFIG"; then
     warn_llvm="llvm-config utility not found.  JIT compiler is disabled."
   else
-    ## Preset warning message in case compile fails
+    dnl Preset warning message in case compile fails
     warn_llvm="LLVM was not found or is to old.  JIT compiler is disabled."
 
     save_CPPFLAGS="$CPPFLAGS"
     save_CXXFLAGS="$CXXFLAGS"
     save_LIBS="$LIBS"
     save_LDFLAGS="$LDFLAGS"
 
     ## Use -isystem if available because we don't want to see warnings in LLVM
     LLVM_INCLUDE_FLAG=-I
-    OCTAVE_CC_FLAG(-isystem ., [
+    OCTAVE_CC_FLAG([-isystem .], [
       LLVM_INCLUDE_FLAG=-isystem
       AC_MSG_NOTICE([using -isystem for LLVM headers])])
 
-    LLVM_LDFLAGS="-L`$LLVM_CONFIG --libdir`"
-    LLVM_LIBS=`$LLVM_CONFIG --libs`
     dnl Use -isystem so we don't get warnings from llvm headers
     LLVM_CPPFLAGS="$LLVM_INCLUDE_FLAG `$LLVM_CONFIG --includedir`"
     LLVM_CXXFLAGS=
+    LLVM_LDFLAGS="-L`$LLVM_CONFIG --libdir`"
+    LLVM_LIBS=`$LLVM_CONFIG --libs`
 
     dnl
     dnl Define some extra flags that LLVM requires in order to include headers.
     dnl Ideally we should get these from llvm-config, but llvm-config isn't
     dnl very helpful.
     dnl
     CPPFLAGS="-D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS $LLVM_CPPFLAGS $CPPFLAGS"
     CXXFLAGS="$LLVM_CXXFLAGS $CXXFLAGS"
@@ -776,18 +777,18 @@ fi
 AC_SUBST(LLVM_CPPFLAGS)
 AC_SUBST(LLVM_CXXFLAGS)
 AC_SUBST(LLVM_LDFLAGS)
 AC_SUBST(LLVM_LIBS)
 
 ### Check for HDF5 library.
 
 save_CPPFLAGS="$CPPFLAGS"
+save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
-save_LIBS="$LIBS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(hdf5, HDF5,
   [HDF5 library not found.  Octave will not be able to save or load HDF5 data files.],
   [hdf5.h], [H5Gget_num_objs], [], [],
   [warn_hdf5=
    OCTAVE_CHECK_HDF5_HAS_VER_16_API
    TEXINFO_HDF5="@set HAVE_HDF5"
    AC_DEFINE(HAVE_HDF5, 1,
@@ -815,30 +816,30 @@ AM_CONDITIONAL([AMCOND_HAVE_FFTW],
 
 ## Subdirectory of liboctave/cruft to build if FFTW is not found.
 FFT_DIR="fftpack"
 AC_SUBST(FFT_DIR)
 
 ### Check for GLPK library and header.
 
 save_CPPFLAGS="$CPPFLAGS"
+save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
-save_LIBS="$LIBS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(glpk, GLPK,
   [GLPK library not found.  The glpk function for solving linear programs will be disabled.],
   [glpk/glpk.h glpk.h], [_glp_lpx_simplex])
 LIBS="$save_LIBS"
 CPPFLAGS="$save_CPPFLAGS"
 
 ### Checks for cURL header and library.
 
 save_CPPFLAGS="$CPPFLAGS"
+save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
-save_LIBS="$LIBS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(curl, cURL,
   [cURL library not found.  The ftp objects, urlread and urlwrite functions will be disabled.],
   [curl/curl.h], [curl_easy_escape])
 LIBS="$save_LIBS"
 CPPFLAGS="$save_CPPFLAGS"
 
 ### Check for either of Graphics/ImageMagick++ libraries
@@ -874,19 +875,19 @@ PKG_CHECK_EXISTS([$magick++], [
     AC_CHECK_HEADER([Magick++.h], [
       AC_MSG_CHECKING([for Magick::ColorRGB in Magick++.h])
       AC_PREPROC_IFELSE(
         [AC_LANG_SOURCE([[
           #include <Magick++.h>
           ]], [[
           Magick::ColorRGB c;
           ]])],
-        [AC_MSG_RESULT(yes)
+        [AC_MSG_RESULT([yes])
          warn_magick=],
-        [AC_MSG_RESULT(no)]
+        [AC_MSG_RESULT([no])]
       )
     ])
   AC_LANG_POP(C++)
   CPPFLAGS="$save_CPPFLAGS"
   LIBS="$save_LIBS"
 ])
 
 if test -z "$warn_magick"; then
@@ -908,26 +909,26 @@ if test "$have_x" = "yes"; then
   AC_DEFINE(HAVE_X_WINDOWS, 1, [Define to 1 if you have X11.])
 
   if test "$x_includes" != "NONE"; then
     X11_INCFLAGS="$x_includes"
   fi
   AC_SUBST(X11_INCFLAGS)
 
   if test -z $x_libraries; then
-    AC_CHECK_LIB(X11, XrmInitialize, [X11_LIBS=-lX11], [X11_LIBS=])
+    AC_CHECK_LIB([X11], XrmInitialize, [X11_LIBS=-lX11], [X11_LIBS=])
   elif test $x_libraries != "NONE"; then
-    AC_CHECK_LIB(X11, XrmInitialize, 
+    AC_CHECK_LIB([X11], XrmInitialize, 
       [X11_LIBS="-L$x_libraries -lX11"], [X11_LIBS=], "-L$x_libraries")
   fi
   AC_SUBST(X11_LIBS)
 fi
 
 ### Check for the Carbon framework on MacOSX systems
-OCTAVE_HAVE_FRAMEWORK(Carbon,
+OCTAVE_HAVE_FRAMEWORK([Carbon],
   [[#include <Carbon/Carbon.h>]], [[CGMainDisplayID ()]],
   [have_framework_carbon="yes"], [have_framework_carbon="no"])
 if test $have_framework_carbon = "yes"; then
   AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1,
     [Define to 1 if framework CARBON is available.])
   CARBON_LIBS="-Wl,-framework -Wl,Carbon"
   AC_MSG_NOTICE([adding -Wl,-framework -Wl,Carbon to CARBON_LIBS])
   AC_SUBST(CARBON_LIBS)
@@ -1120,17 +1121,17 @@ save_FFLAGS="$FFLAGS"
 FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
 
 AX_BLAS_WITH_F77_FUNC([:], [:])
 AX_LAPACK([:], [:])
 
 ## Restore FFLAGS.
 FFLAGS="$save_FFLAGS"
 
-## Try again with -ff2c in FFLAGS
+## If necessary, try again with -ff2c in FFLAGS
 if test "x$ax_blas_f77_func_ok" = "xno"; then
   save_FFLAGS="$FFLAGS"
   FFLAGS="-ff2c $FFLAGS $F77_INTEGER_8_FLAG"
 
   AX_BLAS_WITH_F77_FUNC([:], [:])
   AX_LAPACK([:], [:])
 
   ## Restore FFLAGS, with -ff2c if that was helpful
@@ -1276,30 +1277,30 @@ OCTAVE_CHECK_LIB(cxsparse, CXSparse,
   [C++], [don't use CXSparse library, disable some sparse matrix functionality])
 
 ### Check for UMFPACK library.
 
 save_LIBS="$LIBS"
 save_CPPFLAGS="$CPPFLAGS"
 LIBS="$AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
 CPPFLAGS="$AMD_CPPFLAGS $CPPFLAGS"
-OCTAVE_CHECK_LIB(umfpack, UMFPACK,
+OCTAVE_CHECK_LIB([umfpack], UMFPACK,
   [UMFPACK not found.  This will result in some lack of functionality for sparse matrices.],
   [suitesparse/umfpack.h ufsparse/umfpack.h umfpack/umfpack.h umfpack.h],
   [umfpack_zi_get_determinant],
   [], [don't use UMFPACK, disable some sparse matrix functionality])
 CPPFLAGS="$save_CPPFLAGS"
 LIBS="$save_LIBS"
 
 if test -z "$UMFPACK_LIBS"; then
   ## Invalidate the cache and try again with -lcblas.
   $as_unset ac_cv_lib_umfpack_umfpack_zi_get_determinant
   save_LIBS="$LIBS"
   LIBS="-lcblas $AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
-  OCTAVE_CHECK_LIB(umfpack, UMFPACK,
+  OCTAVE_CHECK_LIB([umfpack], UMFPACK,
     [UMFPACK not found.  This will result in some lack of functionality for sparse matrices.],
     [suitesparse/umfpack.h ufsparse/umfpack.h umfpack/umfpack.h umfpack.h],
     [umfpack_zi_get_determinant],
     [], [don't use UMFPACK, disable some sparse matrix functionality])
   if test -n "$UMFPACK_LIBS"; then
     UMFPACK_LIBS="$UMFPACK_LIBS -lcblas"
   fi
   LIBS="$save_LIBS"
@@ -1311,17 +1312,17 @@ if test -n "$UMFPACK_LIBS"; then
   OCTAVE_UMFPACK_SEPARATE_SPLIT
   LIBS="$save_LIBS"
 fi
 
 ### Check for ARPACK library.
 
 save_LIBS="$LIBS"
 LIBS="$LAPACK_LIBS $BLAS_LIBS $FLIBS $LIBS"
-OCTAVE_CHECK_LIB(arpack, ARPACK,
+OCTAVE_CHECK_LIB([arpack], ARPACK,
   [ARPACK not found.  The eigs function will be disabled.],
   [],
   [dseupd],
   [Fortran 77], [don't use the ARPACK library, disable eigs function],
   [warn_arpack=
    OCTAVE_CHECK_LIB_ARPACK_OK(
      [AC_DEFINE(HAVE_ARPACK, 1, [Define to 1 if ARPACK is available.])],
      [warn_arpack="ARPACK library found, but does not seem to work properly -- disabling eigs function"])])
@@ -1643,17 +1644,17 @@ AC_SUBST(ldpreloadsep)
 ### More configure argument checking related to linking
 
 AC_ARG_ENABLE([no-undefined],
   [AS_HELP_STRING([--disable-no-undefined],
     [don't pass -no-undefined to libtool when linking Octave and its shared libraries])],
   [case "${enableval}" in
      yes) NO_UNDEFINED_LDFLAG="-no-undefined" ;;
      no)  NO_UNDEFINED_LDFLAG="" ;;
-     *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
+     *) AC_MSG_ERROR([bad value ${enableval} for --disable-no-undefined]) ;;
    esac],
   [NO_UNDEFINED_LDFLAG="-no-undefined"])
 AC_SUBST(NO_UNDEFINED_LDFLAG)
 
 AC_ARG_ENABLE([link-all-dependencies],
   [AS_HELP_STRING([--enable-link-all-dependencies],
     [link Octave and its shared libraries with all dependencies, not just those immediately referenced (should not be needed on most systems)])],
   [case "${enableval}" in
@@ -1681,17 +1682,17 @@ dyld_api=false
 if $SHARED_LIBS || $ENABLE_DYNAMIC_LINKING; then
 
   case "$lt_cv_dlopen" in
     dlopen)
       dlopen_api=true
       DL_API_MSG="(dlopen)"
       AC_DEFINE(HAVE_DLOPEN_API, 1,
         [Define to 1 if your system has dlopen, dlsym, dlerror, and dlclose for dynamic linking.])
-      OCTAVE_CXX_FLAG(-rdynamic, [RDYNAMIC_FLAG=-rdynamic])
+      OCTAVE_CXX_FLAG([-rdynamic], [RDYNAMIC_FLAG=-rdynamic])
     ;;
     shl_load)
       shl_load_api=true
       DL_API_MSG="(shl_load)"
       AC_DEFINE(HAVE_SHL_LOAD_API, 1,
         [Define to 1 if your system has shl_load and shl_findsym for dynamic linking.])
     ;;
     LoadLibrary)
@@ -1741,25 +1742,25 @@ AC_SUBST(LIBOCTINTERP)
 AC_SUBST(LIBOCTAVE)
 
 ### Check for existence of various libraries
 
 ## OS-specific test for dirent, opendir.
 case "$canonical_host_type" in
   *-*-mingw*)
     if test "$have_msvc" = "yes"; then
-      AC_CHECK_LIB(dirent, opendir)
+      AC_CHECK_LIB([dirent], [opendir])
       LIBS="$LIBS -ladvapi32 -lgdi32 -lws2_32 -luser32 -lkernel32"
     else
       LIBS="$LIBS -lgdi32 -lws2_32 -luser32 -lkernel32"
     fi
     LIBS="$LIBS -lgdi32 -lws2_32 -luser32 -lkernel32"
   ;;
   *-*-msdosmsvc*)
-    AC_CHECK_LIB(dirent, opendir)
+    AC_CHECK_LIB([dirent], [opendir])
     LIBS="$LIBS -ladvapi32 -lgdi32 -lws2_32 -luser32 -lkernel32"
   ;;
 esac
 
 ## Find a termlib to use.
 OCTAVE_CHECK_LIB_TERMLIB
 
 ### Checks for header files.
@@ -1780,38 +1781,40 @@ case "$canonical_host_type" in
 #include <process.h>
 EOF
     CPPFLAGS="-I. $CPPFLAGS"
     ;;
 esac
 
 ## C headers
 
-AC_CHECK_HEADERS(curses.h direct.h dlfcn.h floatingpoint.h grp.h \
-  ieeefp.h inttypes.h locale.h memory.h ncurses.h poll.h pthread.h \
-  pwd.h sunmath.h sys/ioctl.h sys/param.h sys/poll.h sys/resource.h \
-  sys/select.h sys/utsname.h termcap.h)
+dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
+AC_CHECK_HEADERS([curses.h direct.h dlfcn.h floatingpoint.h grp.h])
+AC_CHECK_HEADERS([ieeefp.h inttypes.h locale.h memory.h ncurses.h])
+AC_CHECK_HEADERS([poll.h pthread.h pwd.h sunmath.h sys/ioctl.h])
+AC_CHECK_HEADERS([sys/param.h sys/poll.h sys/resource.h ])
+AC_CHECK_HEADERS([sys/select.h sys/utsname.h termcap.h])
 
 ## C++ headers
 
 AC_LANG_PUSH(C++)
 
-AC_CHECK_HEADERS(sstream)
+AC_CHECK_HEADERS([sstream])
 OCTAVE_UNORDERED_MAP_HEADERS
 
 AC_LANG_POP(C++)
 
 ## Find a termio header to include.
 
 have_termios_h=no
-AC_CHECK_HEADERS(termios.h, have_termios_h=yes)
-AC_CHECK_HEADERS(termio.h, have_termio_h=yes, have_termio_h=no)
-AC_CHECK_HEADERS(sgtty.h, have_sgtty_h=yes, have_sgtty_h=no)
-AC_CHECK_HEADERS(fnmatch.h, have_fnmatch_h=yes, have_fnmatch_h=no)
-AC_CHECK_HEADERS(conio.h, have_conio_h=yes, have_conio_h=no)
+AC_CHECK_HEADERS([termios.h], have_termios_h=yes)
+AC_CHECK_HEADERS([termio.h], have_termio_h=yes, have_termio_h=no)
+AC_CHECK_HEADERS([sgtty.h], have_sgtty_h=yes, have_sgtty_h=no)
+AC_CHECK_HEADERS([fnmatch.h], have_fnmatch_h=yes, have_fnmatch_h=no)
+AC_CHECK_HEADERS([conio.h], have_conio_h=yes, have_conio_h=no)
 
 if test "$have_termios_h" = yes \
     || test "$have_termio_h" = yes \
     || test "$have_sgtty_h" = yes; then
   true
 else
   AC_MSG_WARN([I couldn't find termios.h, termio.h, or sgtty.h!])
 fi
@@ -1833,26 +1836,27 @@ AC_TYPE_UID_T
 AC_TYPE_UINT64_T
 AC_CHECK_TYPES([dev_t, ino_t])
 AC_CHECK_TYPES([long long int, unsigned long long int])
 AC_CHECK_TYPES([ptrdiff_t])
 
 ## How big are ints and how are they oriented?
 ## These could probably be eliminated in favor of run-time checks.
 
-AC_CHECK_SIZEOF(short)
-AC_CHECK_SIZEOF(int)
-AC_CHECK_SIZEOF(long)
-AC_CHECK_SIZEOF(long long)
+AC_CHECK_SIZEOF([short])
+AC_CHECK_SIZEOF([int])
+AC_CHECK_SIZEOF([long])
+AC_CHECK_SIZEOF([long long])
 ## Check for long double type (for 64-bit integers)
-AC_CHECK_SIZEOF(long double)
+AC_CHECK_SIZEOF([long double])
 
 ### Check structures and existence of necessary members
 
-AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
+AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks,
+                  struct stat.st_rdev])
 AC_CHECK_MEMBERS([struct group.gr_passwd])
 
 AC_STRUCT_TIMEZONE
 
 ### Check compiler characteristics.
 
 ## Does compiler have support for new friend template declarations?
 OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
@@ -1893,27 +1897,28 @@ AM_PROG_CC_C_O
 ### gnulib initialization: part 2
 ### After all include and path modifications have taken place
 ### and at the same priority level as function checks.
 
 gl_INIT
 
 ### Checks for functions and variables.
 
-AC_CHECK_FUNCS(basename canonicalize_file_name \
-  chmod dup2 endgrent endpwent execvp expm1 expm1f fork \
-  getegid geteuid getgid getgrent getgrgid getgrnam getpgrp getpid \
-  getppid getpwent getpwuid getuid getwd _kbhit kill \
-  lgamma lgammaf lgamma_r lgammaf_r localtime_r log1p log1pf \
-  mkstemp pipe putenv \
-  realpath resolvepath rindex roundl select setgrent setlocale \
-  setpwent setvbuf siglongjmp \
-  strsignal tempnam tgammaf umask \
-  uname utime waitpid \
-  _chmod x_utime _utime32)
+dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
+AC_CHECK_FUNCS([basename canonicalize_file_name chmod dup2])
+AC_CHECK_FUNCS([endgrent endpwent execvp expm1 expm1f fork])
+AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
+AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid getwd])
+AC_CHECK_FUNCS([kill lgamma lgammaf lgamma_r lgammaf_r])
+AC_CHECK_FUNCS([localtime_r log1p log1pf mkstemp pipe putenv])
+AC_CHECK_FUNCS([realpath resolvepath rindex roundl select setgrent])
+AC_CHECK_FUNCS([setlocale setpwent setvbuf siglongjmp])
+AC_CHECK_FUNCS([strsignal tempnam tgammaf umask])
+AC_CHECK_FUNCS([uname utime x_utime waitpid])
+AC_CHECK_FUNCS([_chmod _kbhit _utime32])
 
 ## exp2, round, tgamma function checks
 AC_LANG_PUSH(C++)
 AC_CHECK_DECLS([exp2, round, tgamma], [], [], [[#include <cmath>]])
 AC_CHECK_FUNCS([exp2 round tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
 extern "C" {
@@ -1936,63 +1941,64 @@ AC_LANG_POP(C++)
 ## Look in <cmath> for the IEEE functions isnan, isinf, isfinite that we need.
 
 OCTAVE_CHECK_FUNC_CMATH(isnan)
 OCTAVE_CHECK_FUNC_CMATH(isinf)
 OCTAVE_CHECK_FUNC_CMATH(isfinite)
 
 dnl Would like to get rid of this crap, and just have
 dnl
-dnl   AC_CHECK_FUNCS(finite isnan isinf)
+dnl   AC_CHECK_FUNCS([finite isnan isinf])
 dnl
 dnl instead, but that used to fail on some systems...
 dnl
 dnl Also just using AC_CHECK_FUNCS doesn't seem to work to find isinf
 dnl and isnan on Linux systems, so we use AC_CHECK_FUNC, and if that
 dnl fails, we try again by including math.h and invoking the function
 dnl with an argument. 
 
 ### I am told that Inf and NaN don't work on m68k HP sytems.
 
 case "$canonical_host_type" in
   m68k-hp-hpux*)
   ;;
   *)
-    AC_CHECK_FUNCS(finite isnan isinf signbit)
-    AC_CHECK_FUNCS(_finite _isnan)
-    AC_CHECK_DECLS(signbit, , , [#include <math.h>])
+    AC_CHECK_FUNCS([finite isnan isinf signbit])
+    AC_CHECK_FUNCS([_finite _isnan])
+    AC_CHECK_DECLS([signbit], , , [#include <math.h>])
   ;;
 esac
 
 ## Check for nonstandard, but common math functions, that we need.
 
-AC_CHECK_FUNCS(acosh acoshf asinh asinhf atanh atanhf cbrt cbrtf erf erff \
-  erfc erfcf exp2f hypotf _hypotf log2 log2f)
+dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
+AC_CHECK_FUNCS([acosh acoshf asinh asinhf atanh atanhf cbrt cbrtf])
+AC_CHECK_FUNCS([erf erff erfc erfcf exp2f hypotf _hypotf log2 log2f])
 
 ## MinGW exception for mkstemp
 case "$canonical_host_type" in
   *-*-mingw*)
     ## MinGW does not provide a mkstemp function.  However, it provides
     ## the mkstemps function in libiberty.
     AC_MSG_CHECKING([for mkstemps in libiberty])
     save_LIBS="$LIBS"
     LIBS="-liberty $LIBS"
     AC_LINK_IFELSE([
       AC_LANG_PROGRAM([[
         int mkstemps (char *pattern, int suffix_len);
         ]], [[
         mkstemps ("XXXXXX", 0);
         ]]
       )],
-    [AC_MSG_RESULT(yes)
+    [AC_MSG_RESULT([yes])
      HAVE_MKSTEMPS=yes
      AC_DEFINE(HAVE_MKSTEMPS, 1,
        [Define to 1 if mkstemps is available in libiberty.])
     ],
-    [AC_MSG_RESULT(no)
+    [AC_MSG_RESULT([no])
      HAVE_MKSTEMPS=no
      LIBS="$save_LIBS"
     ])
    ;;
 esac
 
 ## Windows-specific tests for extra #defines
 case "$canonical_host_type" in
@@ -2016,30 +2022,30 @@ case "$canonical_host_type" in
       [AC_MSG_RESULT([no])],
       [AC_DEFINE(_USE_MATH_DEFINES, 1,
         [Define to 1 if your system needs to define math constants like M_LN2.])
         AC_MSG_RESULT([yes])])
   ;;
 esac
 
 ## Cygwin kluge for getrusage.
-AC_CHECK_FUNCS(getrusage)
+AC_CHECK_FUNCS([getrusage])
 case "$canonical_host_type" in
   *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1,
       [Define to 1 if your struct rusage only has time information.])
   ;;
 esac
 
 ## Check for CGDisplayBitsPerPixel function on Mac OSX systems with Carbon
 if test $have_framework_carbon = "yes"; then
   OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL
 fi
 
-AC_CHECK_FUNCS(getpwnam, [], [AC_CHECK_LIB(sun, getpwnam)])
+AC_CHECK_FUNCS([getpwnam], [], [AC_CHECK_LIB([sun], [getpwnam])])
 
 AC_FUNC_CLOSEDIR_VOID
 
 ## Check return type of matherr() 
 AC_CACHE_CHECK([for struct exception in math.h],
   [octave_cv_func_matherr_type],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
       #include <math.h>
@@ -2125,80 +2131,80 @@ AC_SUBST(UGLY_DEFS)
 ### done feature testing. 
 
 GCC_EXTRA_FLAGS="-Wall -W -Wshadow -Wformat -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings -Wcast-align -Wcast-qual"
 
 GXX_EXTRA_FLAGS="-Wall -W -Wshadow -Wold-style-cast -Wformat -Wpointer-arith -Wwrite-strings -Wcast-align -Wcast-qual"
 
 try_extra_warning_flags=true
 
-AC_ARG_ENABLE(extra-warning-flags,
+AC_ARG_ENABLE([extra-warning-flags],
   [AS_HELP_STRING([--disable-extra-warning-flags],
     [don't add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = no; then
      try_extra_warning_flags=false
    fi],
   [])
 
 if $try_extra_warning_flags; then
   for flag in $GCC_EXTRA_FLAGS; do
-    OCTAVE_CC_FLAG($flag, [
+    OCTAVE_CC_FLAG([$flag], [
       WARN_CFLAGS="$WARN_CFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CFLAGS])])
   done
   for flag in $GXX_EXTRA_FLAGS; do
-    OCTAVE_CXX_FLAG($flag, [
+    OCTAVE_CXX_FLAG([$flag], [
       WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
   done
 fi
 
 GCC_STRICT_FLAGS="-Wconversion"
 
 GXX_STRICT_FLAGS="-Wconversion -Weffc++"
 
 try_strict_warning_flags=false
 
-AC_ARG_ENABLE(strict-warning-flags,
+AC_ARG_ENABLE([strict-warning-flags],
   [AS_HELP_STRING([--enable-strict-warning-flags],
     [add extra strict warning options to CFLAGS and CXXFLAGS])],
   [if test "$enableval" = yes; then
      try_strict_warning_flags=true
    fi],
   [])
 
 if $try_strict_warning_flags; then
   for flag in $GCC_STRICT_FLAGS; do
-    OCTAVE_CC_FLAG($flag, [
+    OCTAVE_CC_FLAG([$flag], [
       WARN_CFLAGS="$WARN_CFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CFLAGS])])
   done
   for flag in $GXX_STRICT_FLAGS; do
-    OCTAVE_CXX_FLAG($flag, [
+    OCTAVE_CXX_FLAG([$flag], [
       WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
   done
 fi
 
 AC_SUBST(WARN_CFLAGS)
 AC_SUBST(WARN_CXXFLAGS)
 
 ### GUI/Qt related tests.
 
 HAVE_QT=false
 QT_INCDIR=
 QT_LIBDIR=
 win32_terminal=no
 build_gui=true
 GUIDIR=libgui
-AC_ARG_ENABLE(gui,
+AC_ARG_ENABLE([gui],
   [AS_HELP_STRING([--disable-gui], [don't build the GUI])],
-  [if test "$enableval" = no; then build_gui=false; fi], [build_gui=true])
+  [if test "$enableval" = no; then build_gui=false; fi], [])
 
-if test $build_gui = true; then
+if test $build_gui; then
   ## Check for Qt libraries
   PKG_CHECK_MODULES(QT, [QtCore, QtGui, QtNetwork],
     [],
     [AC_MSG_ERROR([Qt libraries are required to build the GUI])])
 
   ## Check for Qt utility programs
   AC_CHECK_PROGS(QMAKE, [qmake-qt5 qmake-qt4 qmake])
   if test -z "$QMAKE"; then
@@ -2207,18 +2213,18 @@ if test $build_gui = true; then
 
   QT_INCDIR=`$QMAKE -query QT_INSTALL_HEADERS | sed -e 's,\\\\,/,g'`
   QT_LIBDIR=`$QMAKE -query QT_INSTALL_LIBS | sed -e 's,\\\\,/,g'`
 
   if test "$QT_INCDIR" = "**Unknown**"; then
     AC_MSG_ERROR([qmake >= Qt4 is required to build the GUI])
   fi
 
-  AC_CHECK_PROGS(MOC, [moc moc-qt4 moc-qt5])
-  AC_CHECK_PROGS(UIC, [uic uic-qt4 uic-qt5])
+  AC_CHECK_PROGS(MOC, [moc-qt5 moc-qt4 moc])
+  AC_CHECK_PROGS(UIC, [uic-qt5 uic-qt4 uic])
   AC_CHECK_PROGS(RCC, [rcc])
   if test -z "$MOC" || test -z "$UIC" || test -z "$RCC"; then
     AC_MSG_ERROR([Qt utility programs moc, uic, and rcc are required to build the GUI])
   fi 
 
   HAVE_QT=true
   AC_DEFINE(HAVE_QT, 1, 
     [Define to 1 if Qt is available (libraries, developer header files, utility programs (qmake, moc, uic, and rcc))])
@@ -2306,21 +2312,21 @@ AH_BOTTOM([
 #define X_CAST(T, E) (T) (E)
 
 #if defined (CXX_BROKEN_REINTERPRET_CAST)
 #define FCN_PTR_CAST(T, E) (T) (E)
 #else
 #define FCN_PTR_CAST(T, E) reinterpret_cast<T> (E)
 #endif
 
-#if !defined(HAVE_DEV_T)
+#if ! defined (HAVE_DEV_T)
 typedef short dev_t;
 #endif
 
-#if !defined(HAVE_INO_T)
+#if ! defined (HAVE_INO_T)
 typedef unsigned long ino_t;
 #endif
 
 #if defined (_MSC_VER)
 #define __WIN32__
 #define WIN32
 /* missing parameters in macros */
 #pragma warning (disable: 4003)
