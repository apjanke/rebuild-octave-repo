# HG changeset patch
# User jwe
# Date 990107142 0
#      Thu May 17 13:45:42 2001 +0000
# Node ID 414e694c9e6a46110ff9e24f323fb80bdc2bfd76
# Parent  f3278ec3ccb7c24457975459a7671f1b2a33c54a
[project @ 2001-05-17 13:45:41 by jwe]

diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -131,30 +131,39 @@ dir_path::find_all (const std::string& n
     }
 
   return retval;
 }
 
 void
 dir_path::set_program_name (const std::string& nm)
 {
+  std::string selfautodir = octave_env::getenv ("SELFAUTODIR");
+  std::string selfautoloc = octave_env::getenv ("SELFAUTOLOC");
+  std::string selfautoparent = octave_env::getenv ("SELFAUTOPARENT");
+
   ::octave_kpse_set_progname (nm.c_str ());
 
   // Calling kpse_set_progname has the unfortunate side-effect of
-  // exporting the following variables.  We make them empty here so
-  // that they will not interfere with TeX, if it is run as a
-  // subprocess of Octave.
+  // exporting the following variables.  If they were empty when we
+  // started, we make them empty again so that they will not interfere
+  // with TeX if it is run as a subprocess of Octave (if they were set
+  // before, we want to preserve their values).
   //
   // XXX FIXME XXX -- is there a reasonable way to actually remove
   // them from the environment?
 
-  octave_env::putenv ("SELFAUTOLOC", "");
-  octave_env::putenv ("SELFAUTODIR", "");
-  octave_env::putenv ("SELFAUTOPARENT", "");
-  octave_env::putenv ("TEXMFDBS", "");
+  if (selfautodir.empty ())
+    octave_env::putenv ("SELFAUTODIR", "");
+
+  if (selfautoloc.empty ())
+    octave_env::putenv ("SELFAUTOLOC", "");
+
+  if (selfautoparent.empty ())
+    octave_env::putenv ("SELFAUTOPARENT", "");
 }
 
 void
 dir_path::init (void)
 {
   if (! octave_kpathsea_initialized)
     {
       char *s = getenv ("KPATHSEA_DEBUG");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2001-05-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (initialize_pathsearch): Save initial value of the
+	TEXMFDBS environment variable here.
+	* toplev.cc (restore_texmfdbs_envvar): New function.
+	(Fsystem): Set TEXMFDBS back to original value before running
+	subprocesses.
+
 2001-05-02  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* Makefile.in (octave): Add $(FFTW_LIBS).
 
 2001-04-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/sort.cc (mx_sort): Check for NaNs in comparisons.
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -184,16 +184,18 @@ initialize_pathsearch (void)
   // For backward compatibility.
 
   if (odb.empty ())
     odb = octave_env::getenv ("OCTAVE_DB_DIR");
 
   if (odb.empty ())
     odb = Vdata_dir + std::string ("/octave:") + Vlibexec_dir + std::string ("/octave");
 
+  octave_original_texmfdbs = octave_env::getenv ("TEXMFDBS");
+
   octave_env::putenv ("TEXMFDBS", odb);
 }
 
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -83,16 +83,19 @@ Software Foundation, 59 Temple Place - S
 static bool quitting_gracefully = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 octave_user_function *curr_function = 0;
 
+// Original value of TEXMFDBS environment variable.
+std::string octave_original_texmfdbs;
+
 // Top level context (?)
 jmp_buf toplevel;
 
 int
 main_loop (void)
 {
   // Allow the user to interrupt us without exiting.
 
@@ -376,16 +379,24 @@ run_command_and_return_output (const std
       unwind_protect::run ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
   return retval;
 }
 
+static void
+restore_texmfdbs_envvar (void *ptr)
+{
+  std::string *s = static_cast<std::string *> (ptr);
+
+  octave_env::putenv ("TEXMFDBS", *s);
+}
+
 DEFUN (system, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})\n\
 Execute a shell command specified by @var{string}.  The second\n\
 argument is optional.  If @var{type} is @code{\"async\"}, the process\n\
 is started in the background and the process id of the child process\n\
 is returned immediately.  Otherwise, the process is started, and\n\
 Octave waits until it exits.  If @var{type} argument is omitted, a\n\
@@ -420,16 +431,18 @@ and the second is the output status of t
 \n\
 @noindent\n\
 will set the variable @code{output} to the string @samp{foo}, and the\n\
 variable @code{status} to the integer @samp{2}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  unwind_protect::begin_frame ("Fsystem");
+
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 4)
     {
       bool return_output = (nargout > 0 || nargin > 1);
 
       std::string cmd_str = args(0).string_value ();
 
@@ -456,16 +469,32 @@ variable @code{status} to the integer @s
 		error ("system: third argument must be a string");
 	    }
 	}
       else
 	error ("system: expecting std::string as first argument");
 
       if (! error_state)
 	{
+	  // The value of TEXMFDBS that Octave puts in the environment
+	  // will cause trouble if we are asked to run TeX, so we
+	  // should reset it to whatever it was before Octave started.
+	  //
+	  // XXX FIXME XXX -- it would be better to fix the
+	  // kpathsearch library to not always do TeX-specific
+	  // things...
+
+	  static string odb;
+
+	  odb = octave_env::getenv ("TEXMFDBS");
+
+	  unwind_protect::add (restore_texmfdbs_envvar, &odb);
+
+	  octave_env::putenv ("TEXMFDBS", octave_original_texmfdbs);
+
 	  if (type == async)
 	    {
 	      pid_t pid = fork ();
 
 	      if (pid < 0) 
 		error ("system: fork failed -- can't create child process");
 	      else if (pid == 0)
 		{
@@ -495,16 +524,18 @@ variable @code{status} to the integer @s
 
 	      retval = static_cast<double> (status);
 	    }
 	}
     }
   else
     print_usage ("system");
 
+  unwind_protect::run_frame ("Fsystem");
+
   return retval;
 }
 
 DEFALIAS (shell_cmd, system);
 
 // XXX FIXME XXX -- this should really be static, but that causes
 // problems on some systems.
 SLStack<std::string> octave_atexit_functions;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -43,15 +43,18 @@ extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern octave_user_function *curr_function;
 
+// Original value of TEXMFDBS environment variable.
+extern std::string octave_original_texmfdbs;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
