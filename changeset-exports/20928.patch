# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450371059 18000
#      Thu Dec 17 11:50:59 2015 -0500
# Node ID 2b8447888e0ae426193c2094172b21243339ab60
# Parent  1da6c81e6486d08213999491eb67e12f919fee1c
strip trailing whitespace from files

* md5sum.m, fileattrib.m, ode23.m, odeplot.m,
ode_struct_value_check.m, runge_kutta_23.m runge_kutta_interpolate.m:
Strip trailing whitespace.

diff --git a/scripts/deprecated/md5sum.m b/scripts/deprecated/md5sum.m
--- a/scripts/deprecated/md5sum.m
+++ b/scripts/deprecated/md5sum.m
@@ -30,17 +30,17 @@
 ##
 ## And calls like @code{md5sum (@var{str}, true)} with:
 ##
 ## @example
 ## hash (\"md5\", fileread (@var{str}))
 ## @end example
 ##
 ## Calculate the MD5 sum of the file @var{file}.
-## 
+##
 ## If the second parameter @var{opt} exists and is true, then calculate the MD5
 ## sum of the string @var{str}.
 ##
 ## @seealso{hash,fileread}
 ## @end deftypefn
 
 function r = md5sum (str, opt)
 
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -92,17 +92,17 @@ function [status, msg, msgid] = fileattr
     if (! err)
       r(i).Name = canonicalize_file_name (files{i});
 
       if (isunix ())
         r(i).archive = NaN;
         r(i).system = NaN;
         r(i).hidden = NaN;
       else
-        [~, attrib] = dos (sprintf ('attrib "%s"', r(i).Name));        
+        [~, attrib] = dos (sprintf ('attrib "%s"', r(i).Name));
         ## dos() never returns error status so have to check it indirectly
         if (length (attrib) < 12
             || ! strcmp (deblank (attrib(12:end)), r(i).Name))
           status = false;
           msgid = "fileattrib";
           break;
         endif
         attrib = attrib(1:11);
@@ -146,17 +146,17 @@ function [status, msg, msgid] = fileattr
       msg = r;
     endif
   endif
 
 endfunction
 
 
 %!test
-%! [status, attr] = fileattrib (P_tmpdir ()); 
+%! [status, attr] = fileattrib (P_tmpdir ());
 %! assert (status);
 %! assert (isstruct (attr));
 %! assert (numel (fieldnames (attr)), 14);
 %! assert (attr.Name, P_tmpdir ());
 %! assert (attr.directory);
 %! if (ispc ())
 %!   assert (! isnan (attr.archive));
 %! else
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -103,17 +103,17 @@
 function varargout = ode23 (fun, trange, init, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
   order = 3;
   solver = "ode23";
-  
+
   if (nargin >= 4)
     if (! isstruct (varargin{1}))
       ## varargin{1:len} are parameters for fun
       odeopts = odeset ();
       odeopts.funarguments = varargin;
     elseif (length (varargin) > 1)
       ## varargin{1} is an ODE options structure opt
       odeopts = ode_struct_value_check ("ode23", varargin{1}, "ode23");
@@ -217,32 +217,32 @@ function varargout = ode23 (fun, trange,
     if (isempty (odeopts.Mass))
       odeopts.havenonnegative = true;
     else
       odeopts.havenonnegative = false;
       warning ("Octave:invalid-input-arg",
                ["ode23: option \"NonNegative\" is ignored", ...
                 " when mass matrix is set\n"]);
     endif
-  else 
+  else
     odeopts.havenonnegative = false;
   endif
 
   if (isempty (odeopts.OutputFcn) && nargout == 0)
     odeopts.OutputFcn = @odeplot;
     odeopts.haveoutputfunction = true;
   else
     odeopts.haveoutputfunction = ! isempty (odeopts.OutputFcn);
   endif
 
   odeopts.haveoutputselection = ! isempty (odeopts.OutputSel);
 
   if (odeopts.Refine > 0)
     odeopts.haverefine = true;
-  else 
+  else
     odeopts.haverefine = false;
   endif
 
   if (isempty (odeopts.InitialStep) && strcmp (integrate_func, "adaptive"))
     odeopts.InitialStep = odeopts.direction * ...
                           starting_stepsize (order, fun, trange(1),
                                              init, odeopts.AbsTol,
                                              odeopts.RelTol,
@@ -308,17 +308,17 @@ function varargout = ode23 (fun, trange,
   endif
 
   if (! isempty (odeopts.BDF))
     warning ("Octave:invalid-input-arg",
              "ode23: option \"BDF\" is ignored by this solver\n");
   endif
 
   ## Starting the initialisation of the core solver ode23
-  
+
   if (havemasshandle)   # Handle only the dynamic mass matrix,
     if (massdependence) # constant mass matrices have already
       mass = @(t,x) odeopts.Mass (t, x, odeopts.funarguments{:});
       fun = @(t,x) mass (t, x, odeopts.funarguments{:}) ...
         \ fun (t, x, odeopts.funarguments{:});
     else                 # if (massdependence == false)
       mass = @(t) odeopts.Mass (t, odeopts.funarguments{:});
       fun = @(t,x) mass (t, odeopts.funarguments{:}) ...
diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -31,46 +31,46 @@
 %# then @var{t} must be a double scalar specifying the last time step and nothing is returned from this function.
 %# @end table
 %#
 %# This function is called by a ode solver function if it was specified in an options structure with the @command{odeset}. This function is an internal helper function therefore it should never be necessary that this function is called directly by a user. There is only little error detection implemented in this function file to achieve the highest performance.
 %#
 %# For example, solve an anonymous implementation of the "Van der Pol" equation and display the results while solving
 %# @example
 %# fvdb = @@(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
-%# 
+%#
 %# opt = odeset ("OutputFcn", @@odeplot, "RelTol", 1e-6);
 %# sol = ode45 (fvdb, [0 20], [2 0], opt);
 %# @end example
 %# @end deftypefn
 %#
 %# @seealso{odeset,odeget}
 
 function [varargout] = odeplot (t, y, flag, varargin)
 
   ## No input argument check is done for a higher processing speed
-  persistent fig; persistent told; 
+  persistent fig; persistent told;
   persistent yold; persistent counter;
 
-  if (strcmp (flag, "init")) 
+  if (strcmp (flag, "init"))
     ## Nothing to return, t is either the time slot [tstart tstop]
     ## or [t0, t1, ..., tn], y is the inital value vector "init"
     fig = figure; told = t(1,1); yold = y(:,1);
     counter = 1;
 
   elseif (isempty (flag))
     ## Return something in varargout{1}, either false for "not stopping
     ## the integration" or true for "stopping the integration"
     counter = counter + 1; figure (fig);
     told(counter,1) = t(1,1);
     yold(:,counter) = y(:,1);
     plot (told, yold, "-o", "markersize", 1); drawnow;
     varargout{1} = false;
 
-  elseif (strcmp (flag, "done")) 
+  elseif (strcmp (flag, "done"))
     ## Cleanup has to be done, clear the persistent variables because
     ## we don't need them anymore
     clear ("figure", "told", "yold", "counter");
 
   endif
 
 endfunction
 
diff --git a/scripts/ode/private/ode_struct_value_check.m b/scripts/ode/private/ode_struct_value_check.m
--- a/scripts/ode/private/ode_struct_value_check.m
+++ b/scripts/ode/private/ode_struct_value_check.m
@@ -253,17 +253,17 @@ function ode_struct = ode_struct_value_c
 
       case "TimeStepSize"
         if (! isempty (val))
          if (! isscalar (val))
               error ("Octave:invalid-input-arg",
                      [caller ": invalid value assigned to field '%s'"], opt);
          endif
         endif
-        
+
       case "TimeStepNumber"
         if (! isempty (val))
           if (! isscalar (val))
             error ("Octave:invalid-input-arg",
                    [caller ": invalid value assigned to field '%s'"], opt);
           endif
         endif
 
diff --git a/scripts/ode/private/runge_kutta_23.m b/scripts/ode/private/runge_kutta_23.m
--- a/scripts/ode/private/runge_kutta_23.m
+++ b/scripts/ode/private/runge_kutta_23.m
@@ -77,26 +77,26 @@ function [t_next, x_next, x_est, k] = ru
   aa = dt * a;
   k = zeros (rows (x), 4);
 
   if (! isempty (options))  # extra arguments for function evaluator
     args = options.funarguments;
   else
     args = {};
   endif
-  
+
   if (! isempty (k_vals))    # k values from previous step are passed
     k(:,1) = k_vals(:,end);  # FSAL property
   else
     k(:,1) = feval (f, t, x, args{:});
   endif
 
   k(:,2) = feval (f, s(2), x + k(:,1) * aa(2, 1).', args{:});
   k(:,3) = feval (f, s(3), x + k(:,2) * aa(3, 2).', args{:});
-  
+
   ## compute new time and new values for the unkwnowns
   ## t_next = t + dt;
   x_next = x + k(:,1:3) * cc(:); # 3rd order approximation
 
   ## if the estimation of the error is required
   if (nargout >= 3)
     ## new solution to be compared with the previous one
     k(:,4) = feval (f, t_next, x_next, args{:});
diff --git a/scripts/ode/private/runge_kutta_interpolate.m b/scripts/ode/private/runge_kutta_interpolate.m
--- a/scripts/ode/private/runge_kutta_interpolate.m
+++ b/scripts/ode/private/runge_kutta_interpolate.m
@@ -121,10 +121,10 @@ endfunction
 function x_out = hermite_cubic_interpolation (t, x, der, t_out)
 
   dt = (t(2) - t(1));
   s = (t_out - t(1)) / dt;
   x_out = ((1 + 2*s) .* (1-s).^2) .* x(:,1) + ...
           (s .* (1-s).^2 * dt   ) .* der(:,1) + ...
           ((3-2*s) .* s.^2      ) .* x(:,2) + ...
           ((s-1) .* s.^2   * dt ) .* der(:,2);
-  
+
 endfunction
