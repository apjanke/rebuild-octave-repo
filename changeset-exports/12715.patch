# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1307419004 25200
#      Mon Jun 06 20:56:44 2011 -0700
# Branch stable
# Node ID 25f8acbb6be2827456f9650cbe277bbacfbd2d50
# Parent  8176c16628c859cda9f8ea5a07bd4da8370c2203
doc: Add additional calling forms to cell()

ov-cell.cc (cell): Add additional calling forms to DOCSTRING so it resembles
zeros().

diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -1266,24 +1266,25 @@ Return true if @var{x} is a cell array o
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (cell, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} cell (@var{x})\n\
-@deftypefnx {Built-in Function} {} cell (@var{n}, @var{m})\n\
-Create a new cell array object.  If invoked with a single scalar\n\
-argument, @code{cell} returns a square cell array with the dimension\n\
-specified.  If you supply two scalar arguments, @code{cell} takes\n\
-them to be the number of rows and columns.  If given a vector with two\n\
-elements, @code{cell} uses the values of the elements as the number of\n\
-rows and columns, respectively.\n\
+@deftypefn  {Built-in Function} {} cell (@var{n})\n\
+@deftypefnx {Built-in Function} {} cell (@var{m}, @var{n})\n\
+@deftypefnx {Built-in Function} {} cell (@var{m}, @var{n}, @var{k}, @dots{})\n\
+@deftypefnx {Built-in Function} {} cell ([@var{m} @var{n} @dots{}])\n\
+Create a new cell array object.\n\
+If invoked with a single scalar integer argument, return a square\n\
+@nospell{NxN} cell array.  If invoked with two or more scalar\n\
+integer arguments, or a vector of integer values, return an array with\n\
+the given dimensions.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   dim_vector dims;
 
