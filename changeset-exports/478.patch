# HG changeset patch
# User jwe
# Date 772821581 0
#      Tue Jun 28 16:39:41 1994 +0000
# Node ID 90964309100be3d8185f4ea1749a64a51ad1c5a4
# Parent  94b7d47cd06455504fdaf1a43a2c9042efe15232
[project @ 1994-06-28 16:39:41 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -179,16 +179,20 @@ if no arguments are given, clear all use
 
   { "help", -1, builtin_help,
     "help [-i] [topic ...]\n\nprint cryptic yet witty messages", },
 
   { "history", -1, builtin_history,
     "history [N] [-w file] [-r file] [-q]\n\n\
 display, save, or load command history", },
 
+  { "hold", -1, builtin_hold,
+    "hold [on|off]\n\n\
+determine whether the plot window is cleared before the next line is drawn", },
+
   { "load", -1, builtin_load,
     "load [-force] file\n\nload variables from a file", },
 
   { "ls", -1, builtin_ls,
     "ls [options]\n\nprint a directory listing", },
 
   { "run_history", -1, builtin_run_history,
     "run_history [first] [last]\n\nrun commands from the history list", },
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -366,23 +366,35 @@ command		: plot_command
 		| func_def
 		  { $$ = $1; }
 		| global_decl
 		  { $$ = $1; }
 		;
 
 plot_command	: PLOT plot_command1
 		  {
-		    tree_subplot_list *tmp = $2->reverse ();
-		    $$ = new tree_plot_command (tmp, $1->pttype ());
-		    plotting = 0;
-		    past_plot_range = 0;
-		    in_plot_range = 0;
-		    in_plot_using = 0;
-		    in_plot_style = 0;
+		    tree_subplot_list *tmp = (tree_subplot_list *) NULL;
+		    if ($2 != (tree_subplot_list *) NULL)
+		      tmp = $2->reverse ();
+
+		    if (tmp == (tree_subplot_list *) NULL
+			&& $1->pttype () != token::replot)
+		      {
+			yyerror ("must have something to plot");
+			ABORT_PARSE;
+		      }
+		    else
+		      {
+			$$ = new tree_plot_command (tmp, $1->pttype ());
+			plotting = 0;
+			past_plot_range = 0;
+			in_plot_range = 0;
+			in_plot_using = 0;
+			in_plot_style = 0;
+		      }
 		  }
 		| PLOT ranges plot_command1
 		  {
 		    if ($1->pttype () == token::replot)
 		      {
 			yyerror ("cannot specify new ranges with replot");
 			ABORT_PARSE;
 		      }
@@ -414,17 +426,19 @@ ranges1		: OPEN_BRACE expression COLON e
 		| OPEN_BRACE expression COLON CLOSE_BRACE
 		  { $$ = new tree_plot_range ($2, NULL); }
 		| OPEN_BRACE COLON CLOSE_BRACE
 		  { $$ = new tree_plot_range (); }
 		| OPEN_BRACE CLOSE_BRACE
 		  { $$ = new tree_plot_range (); }
 		;
 
-plot_command1	: plot_command2
+plot_command1	: // empty
+		  { $$ = (tree_subplot_list *) NULL; }
+		| plot_command2
 		  { $$ = $1; }
 		| plot_command1 ',' plot_command2
 		  { $$ = $1->chain ($3); }
 		;
 
 plot_command2	: expression
 		  { $$ = new tree_subplot_list ($1); }
 		| expression plot_options
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -35,21 +35,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-plot.h"
 
 extern "C"
 {
   char *tilde_expand (char *s); /* From readline's tilde.c */
 }
 
 // The number of lines we\'ve plotted so far.
-static int plot_line_count;
+int plot_line_count;
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 int parametric_plot = 0;
 
+// Should the graph window be cleared before plotting the next line?
+int clear_before_plotting = 1;
+
 /*
  * Plotting, eh?
  */
 
 tree_plot_command::tree_plot_command (void)
 {
   range = (tree_plot_limits *) NULL;
   plot_list = (tree_subplot_list *) NULL;
@@ -85,36 +88,61 @@ tree_plot_command::eval (int print)
   if (error_state)
     return retval;
 
   ostrstream plot_buf;
 
   switch (ndim)
     {
     case 1:
-      plot_buf << "replot";
+      if (plot_line_count == 0)
+	{
+	  if (plot_list)
+	    plot_buf << "plot";
+	  else
+	    {
+	      ::error ("replot: must have something to plot");
+	      return retval;
+	    }
+	}
+      else
+	plot_buf << "replot";
       break;
     case 2:
-      plot_buf << "plot";
+      if (clear_before_plotting || plot_line_count == 0)
+	{
+	  plot_line_count = 0;
+	  plot_buf << "plot";
+	}
+      else
+	plot_buf << "replot";
       break;
     case 3:
-      plot_buf << "splot";
+      {
+	plot_line_count = 0;
+	plot_buf << "splot";
+      }
       break;
     default:
       panic_impossible ();
       break;
     }
 
   if (range != (tree_plot_limits *) NULL)
-    range->print (ndim, plot_buf);
+    {
+      if (plot_line_count == 0)
+	range->print (ndim, plot_buf);
+      else
+	warning ("can't specify new plot ranges with `replot' or while\
+ hold is on");
+    }
 
   if (error_state)
     return retval;
 
-  plot_line_count = 0;
   tree_subplot_list *ptr = plot_list;
   for ( ; ptr != NULL_TREE ; ptr = ptr->next_elem ())
     {
       plot_line_count++;
 
       if (ptr != plot_list)
 	plot_buf << ",\\\n  ";
 
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -98,16 +98,19 @@ extern "C"
   extern int do_info_index_search ();
   extern void finish_info_session ();
   extern char *replace_in_documentation ();
 }
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 extern int parametric_plot;
 
+// Should the graph window be cleared before plotting the next line?
+extern int clear_before_plotting;
+
 /*
  * Format a list in neat columns.  Mostly stolen from GNU ls.  This
  * should maybe be in utils.cc.
  */
 static ostrstream&
 list_in_columns (ostrstream& os, char **list)
 {
 // Compute the maximum name length.
@@ -625,16 +628,46 @@ builtin_history (int argc, char **argv)
 {
   tree_constant retval;
 
   do_history (argc, argv);
 
   return retval;
 }
 
+/*
+ * Change state flag that determines whether lines are added to plots
+ * or drawn on new plots.
+ */
+tree_constant
+builtin_hold (int argc, char **argv)
+{
+  tree_constant retval;
+  
+  switch (argc)
+    {
+    case 1:
+      clear_before_plotting = ! clear_before_plotting;
+      break;
+    case 2:
+      if (strcasecmp (argv[1], "on") == 0)
+	clear_before_plotting = 0;
+      else if (strcasecmp (argv[1], "off") == 0)
+	clear_before_plotting = 1;
+      else
+	print_usage ("hold");
+      break;
+    default:
+      print_usage ("hold");
+      break;
+    }
+
+  return retval;
+}
+
 static int
 load_variable (char *nm, int force, istream& is)
 {
 // Is there already a symbol by this name?  If so, what is it?
 
   symbol_record *lsr = curr_sym_tab->lookup (nm, 0, 0);
 
   int is_undefined = 1;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -124,16 +124,19 @@ char *tilde_expand (char *s); /* From re
 
 #ifndef STDIN_FILENO
 #define STDIN_FILENO 1
 #endif
 
 // Top level context (?)
 extern jmp_buf toplevel;
 
+// The number of lines we\'ve plotted so far.
+extern int plot_line_count;
+
 // Pipe to gnuplot.
 static oprocstream plot_stream;
 
 // Non-zero means follow symbolic links that point to directories just
 // as if they are real directories.
 static int follow_symbolic_links = 1;
 
 #ifndef MAXPATHLEN
@@ -541,17 +544,17 @@ default_info_file (void)
   static char *info_file_string = (char *) NULL;
   delete [] info_file_string;
   char *oct_info_file = getenv ("OCTAVE_INFO_FILE");
   if (oct_info_file != (char *) NULL)
     info_file_string = strsave (oct_info_file);
   else
     {
       char *infodir = octave_info_dir ();
-      info_file_string = strconcat (infodir, "octave.info");
+      info_file_string = strconcat (infodir, "/octave.info");
     }
   return info_file_string;
 }
 
 char *
 default_editor (void)
 {
   static char *editor_string = (char *) NULL;
@@ -1297,16 +1300,18 @@ send_to_plot_stream (const char *cmd)
 {
 // From sighandlers.cc:
   extern int pipe_handler_error_count;
 
   static int initialized = 0;
 
   if (! plot_stream.is_open ())
     {
+      plot_line_count = 0;
+
       char *plot_prog = user_pref.gnuplot_binary;
       if (plot_prog != (char *) NULL)
 	{
 	  plot_stream.open (plot_prog);
 	  if (! plot_stream.is_open ())
 	    {
 	      warning ("plot: unable to open pipe to `%s'",
 		       plot_prog);
@@ -1346,16 +1351,18 @@ send_to_plot_stream (const char *cmd)
   return 0;
 }
 
 void
 close_plot_stream (void)
 {
   if (plot_stream.is_open ())
     plot_stream.close ();
+
+  plot_line_count = 0;
 }
 
 int
 almost_match (const char *std, const char *s,
 	      int min_match_len = 1, int case_sens = 1)
 {
   int stdlen = strlen (std);
   int slen = strlen (s);
