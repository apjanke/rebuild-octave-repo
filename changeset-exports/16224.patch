# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362757573 18000
#      Fri Mar 08 10:46:13 2013 -0500
# Node ID 4a848eb52de2b3ec3dfcaf10aa8f81edc9a16913
# Parent  caf4f386aaab861931fcc617b26c3dfb18e9ffaa
use stack for tracking lexer start states

* lex.h (octave_lexer::start_state_stack): New member variable.
(octave_lexer::push_start_state, octave_lexer::pop_start_state,
octave_lexer::clear_start_state, octave_lexer::start_state,
octave_lexer::display_start_state): New functions.
* lex.ll (INPUT_FILE_START): Rename from INPUT_FILE_BEGIN.
Use push_start_state and pop_start_state instead of switching flex
start states directly with the flex BEGIN macro.
(octave_lexer::init, octave_lexer::reset): Clear start state stack.
(octave_lexer::prep_for_file, octave_lexer::process_comment,
octave_lexer::handle_close_bracket): Don't use OCTAVE_YYG macro.
(octave_lexer::display_start_state): Rename from display_state.
Eliminate argument.  Display current start state.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -519,21 +519,33 @@ public:
     return input_source () == "file";
   }
 
   bool input_from_eval_string (void) const
   {
     return input_source () == "eval_string";
   }
 
+  void push_start_state (int state);
+
+  void pop_start_state (void);
+
+  void clear_start_state (void);
+
+  int start_state (void) const { return start_state_stack.top (); }
+
+  void display_start_state (void) const;
+
   // For unwind protect.
   static void cleanup (octave_lexer *lexer) { delete lexer; }
 
 private:
 
+  std::stack<int> start_state_stack;
+
   // No copying!
 
   octave_lexer (const octave_lexer&);
 
   octave_lexer& operator = (const octave_lexer&);
 };
 
 #endif
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -41,17 +41,17 @@ object) relevant global values before an
 #include <config.h>
 #endif
 
 }
 
 %s COMMAND_START
 %s MATRIX_START
 
-%x INPUT_FILE_BEGIN
+%x INPUT_FILE_START
 
 %{
 
 #include <cctype>
 #include <cstring>
 
 #include <iostream>
 #include <set>
@@ -254,55 +254,57 @@ EXPON   ([DdEe][+-]?{D}+)
 NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 %{
 // Make script and function files start with a bogus token. This makes
 // the parser go down a special path.
 %}
 
-<INPUT_FILE_BEGIN>. {
-    LEXER_DEBUG ("<INPUT_FILE_BEGIN>.");
-
-    BEGIN (INITIAL);
+<INPUT_FILE_START>. {
+    LEXER_DEBUG ("<INPUT_FILE_START>.");
+
     curr_lexer->xunput (yytext[0]);
 
     // May be reset later if we see "function" or "classdef" appears
     // as the first token.
     curr_lexer->reading_script_file = true;
 
+    curr_lexer->pop_start_state ();
+
     DISPLAY_TOK_AND_RETURN (INPUT_FILE);
   }
 
 %{
 // Help and other command-style functions.
 %}
 
 <COMMAND_START>{NL} {
     LEXER_DEBUG ("<COMMAND_START>{NL}");
 
-    BEGIN (INITIAL);
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     curr_lexer->quote_is_transpose = false;
     curr_lexer->convert_spaces_to_comma = true;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = true;
 
+    curr_lexer->pop_start_state ();
+
     COUNT_TOK_AND_RETURN ('\n');
   }
 
 <COMMAND_START>[\;\,] {
     LEXER_DEBUG ("<COMMAND_START>[\\;\\,]");
 
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = true;
 
-    BEGIN (INITIAL);
+    curr_lexer->pop_start_state ();
 
     if (strcmp (yytext, ",") == 0)
       TOK_RETURN (',');
     else
       TOK_RETURN (';');
   }
 
 <COMMAND_START>[\"\'] {
@@ -537,17 +539,19 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
       curr_lexer->looking_at_return_list = true;
     else
       curr_lexer->looking_at_matrix_or_assign_lhs = true;
 
     curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->bracketflag++;
-    BEGIN (MATRIX_START);
+
+    curr_lexer->push_start_state (MATRIX_START);
+
     COUNT_TOK_AND_RETURN ('[');
   }
 
 \] {
     LEXER_DEBUG ("\\]");
 
     curr_lexer->nesting_level.remove ();
 
@@ -919,17 +923,19 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->convert_spaces_to_comma = true;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = false;
 
     curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->braceflag++;
-    BEGIN (MATRIX_START);
+
+    curr_lexer->push_start_state (MATRIX_START);
+
     COUNT_TOK_AND_RETURN ('{');
   }
 
 "}" {
     LEXER_DEBUG ("}");
 
     curr_lexer->looking_at_object_index.pop_front ();
 
@@ -1419,34 +1425,34 @@ octave_lexer::~octave_lexer (void)
 void
 octave_lexer::init (void)
 {
   yylex_init (&scanner);
 
   // Make octave_lexer object available through yyextra in
   // flex-generated lexer.
   yyset_extra (this, scanner);
+
+  clear_start_state ();
 }
 
 // Inside Flex-generated functions, yyg is the scanner cast to its real
-// type.  The BEGIN macro uses yyg and we want to use that in
-// octave_lexer member functions.  If we could set the start state
-// by calling a function instead of using the BEGIN macro, we could
-// eliminate the OCTAVE_YYG macro.
+// type.  Some flex macros that we use in octave_lexer member functions
+// (for example, BEGIN) use yyg.  If we could perform the actions of
+// these macros with functions instead, we could eliminate the
+// OCTAVE_YYG macro.
 
 #define OCTAVE_YYG \
   struct yyguts_t *yyg = static_cast<struct yyguts_t*> (scanner)
 
 void
 octave_lexer::reset (void)
 {
-  OCTAVE_YYG;
-
   // Start off on the right foot.
-  BEGIN (INITIAL);
+  clear_start_state ();
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag (1);
 
   // Only ask for input from stdin if we are expecting interactive
   // input.
@@ -1462,21 +1468,19 @@ octave_lexer::reset (void)
   input_reader.reset ();
 
   lexical_feedback::reset ();
 }
 
 void
 octave_lexer::prep_for_file (void)
 {
-  OCTAVE_YYG;
-
   reading_script_file = true;
 
-  BEGIN (INPUT_FILE_BEGIN);
+  push_start_state (INPUT_FILE_START);
 }
 
 int
 octave_lexer::read (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty ())
@@ -2152,18 +2156,16 @@ looks_like_copyright (const std::string&
     }
 
   return retval;
 }
 
 int
 octave_lexer::process_comment (bool start_in_block, bool& eof)
 {
-  OCTAVE_YYG;
-
   eof = false;
 
   char *yytxt = flex_yytext ();
   flex_stream_reader flex_reader (this, yytxt);
 
   // process_comment is only supposed to be called when we are not
   // initially looking at a block comment.
 
@@ -2180,18 +2182,18 @@ octave_lexer::process_comment (bool star
 
   octave_comment_buffer::append (txt);
 
   current_input_column = 1;
   quote_is_transpose = false;
   convert_spaces_to_comma = true;
   at_beginning_of_statement = true;
 
-  if (YY_START == COMMAND_START)
-    BEGIN (INITIAL);
+  if (start_state () == COMMAND_START)
+    pop_start_state ();
 
   if (nesting_level.none ())
     return '\n';
   else if (nesting_level.is_bracket_or_brace ())
     return ';';
   else
     return 0;
 }
@@ -2907,34 +2909,31 @@ octave_lexer::next_token_is_index_op (vo
   int c = text_yyinput ();
   xunput (c);
   return c == '(' || c == '{';
 }
 
 int
 octave_lexer::handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
-  OCTAVE_YYG;
-
   int retval = bracket_type;
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
 
       if (bracket_type == ']')
         bracketflag--;
       else if (bracket_type == '}')
         braceflag--;
       else
         panic_impossible ();
     }
 
-  if (bracketflag == 0 && braceflag == 0)
-    BEGIN (INITIAL);
+  pop_start_state ();
 
   if (bracket_type == ']'
       && next_token_is_assign_op ()
       && ! looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else if ((bracketflag || braceflag)
@@ -3472,17 +3471,17 @@ octave_lexer::handle_identifier (void)
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (! is_variable (tok))
     {
       if (at_bos && spc_gobbled && can_be_command (tok)
           && looks_like_command_arg ())
         {
-          BEGIN (COMMAND_START);
+          push_start_state (COMMAND_START);
         }
       else if (next_tok_is_eq
                || looking_at_decl_list
                || looking_at_return_list
                || (looking_at_parameter_list
                    && ! looking_at_initializer_expression))
         {
           symbol_table::force_variable (tok);
@@ -3739,59 +3738,86 @@ octave_lexer::display_token (int tok)
           std::cerr << static_cast<char> (tok) << "\n";
         else
           std::cerr << "UNKNOWN(" << tok << ")\n";
       }
       break;
     }
 }
 
-static void
-display_state (int state)
-{
-  std::cerr << "S: ";
-
-  switch (state)
-    {
-    case INITIAL:
-      std::cerr << "INITIAL" << std::endl;
-      break;
-
-    case COMMAND_START:
-      std::cerr << "COMMAND_START" << std::endl;
-      break;
-
-    case MATRIX_START:
-      std::cerr << "MATRIX_START" << std::endl;
-      break;
-
-    case INPUT_FILE_BEGIN:
-      std::cerr << "INPUT_FILE_BEGIN" << std::endl;
-      break;
-
-    default:
-      std::cerr << "UNKNOWN START STATE!" << std::endl;
-      break;
-    }
-}
-
 void
 octave_lexer::fatal_error (const char *msg)
 {
   error (msg);
 
   OCTAVE_QUIT;
 
   yy_fatal_error (msg, scanner);
 }
 
 void
 octave_lexer::lexer_debug (const char *pattern, const char *text)
 {
-  OCTAVE_YYG;
-
   std::cerr << std::endl;
 
-  display_state (YY_START);
+  display_start_state ();
 
   std::cerr << "P: " << pattern << std::endl;
   std::cerr << "T: " << text << std::endl;
 }
+
+void
+octave_lexer::push_start_state (int state)
+{
+  OCTAVE_YYG;
+
+  start_state_stack.push (state);
+
+  BEGIN (start_state ());
+}
+
+void
+octave_lexer::pop_start_state (void)
+{
+  OCTAVE_YYG;
+
+  start_state_stack.pop ();
+
+  BEGIN (start_state ());
+}
+
+void
+octave_lexer::clear_start_state (void)
+{
+  while (! start_state_stack.empty ())
+    start_state_stack.pop ();
+
+  push_start_state (INITIAL);
+}
+
+void
+octave_lexer::display_start_state (void) const
+{
+  std::cerr << "S: ";
+
+  switch (start_state ())
+    {
+    case INITIAL:
+      std::cerr << "INITIAL" << std::endl;
+      break;
+
+    case COMMAND_START:
+      std::cerr << "COMMAND_START" << std::endl;
+      break;
+
+    case MATRIX_START:
+      std::cerr << "MATRIX_START" << std::endl;
+      break;
+
+    case INPUT_FILE_START:
+      std::cerr << "INPUT_FILE_BEGIN" << std::endl;
+      break;
+
+    default:
+      std::cerr << "UNKNOWN START STATE!" << std::endl;
+      break;
+    }
+}
