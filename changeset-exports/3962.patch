# HG changeset patch
# User jwe
# Date 1025187249 0
#      Thu Jun 27 14:14:09 2002 +0000
# Node ID e39b0ee1da6cfa55d5d67533615ef423e28560e9
# Parent  635209a37bf4972668adaaae557f193c896271c6
[project @ 2002-06-27 14:14:08 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2002-06-27  Paul Kienzle <pkienzle@jazz.ncnr.nist.gov>
+
+	* statistics/distributions/gamma_pdf.m: Avoid overflow in more cases.
+
 2002-05-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* skip-autoheader: New file, for autogen.sh.
 	* Makefile.in (DISTFILES): Add it to the list.
 
 2002-04-29  Paul Kienzle <pkienzle@users.sf.net>
 
 	* general/repmat.m: New function.
diff --git a/scripts/statistics/distributions/gamma_pdf.m b/scripts/statistics/distributions/gamma_pdf.m
--- a/scripts/statistics/distributions/gamma_pdf.m
+++ b/scripts/statistics/distributions/gamma_pdf.m
@@ -45,17 +45,23 @@ function pdf = gamma_pdf (x, a, b)
   b   = reshape (b, s, 1);
   pdf = zeros (s, 1);
 
   k = find (!(a > 0) | !(b > 0) | isnan (x));
   if (any (k))
     pdf (k) = NaN * ones (length (k), 1);
   endif
 
-  k = find ((x > 0) & (a > 0) & (b > 0));
+  k = find ((x > 0) & (a > 0) & (a <= 1) & (b > 0));
   if (any (k))
     pdf(k) = ((b(k) .^ a(k)) .* (x(k) .^ (a(k) - 1))
 	      .* exp(-b(k) .* x(k)) ./ gamma (a(k)));
   endif
 
+  k = find ((x > 0) & (a > 1) & (b > 0));
+  if (any (k))
+    pdf(k) = exp (a(k) .* log (b(k)) + (a(k)-1) .* log (x(k))
+		  - b(k) .* x(k) - lgamma (a(k)));
+  endif
+
   pdf = reshape (pdf, r, c);
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2002-06-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-mapper.cc (MAPPER_LOOP, MAPPER_LOOP_1, MAPPER_LOOP_2): New	macros.
+	(octave_mapper::apply): Use them to inline the mapper loops.
+
+	* pt-unop.cc (tree_prefix_expression::rvalue): Ensure that the
+	operand is defined for op_incr and op_decr.
+	(tree_postfix_expression::rvalue): Likewise.
+	From Ben Sapp <bsapp@lanl.gov>.
+
+2002-06-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-mapper.cc (octave_mapper::apply): Exit loops on error.
+
+2002-06-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-struct.cc (octave_struct::print_raw): Print field names with
+	data types if Vstruct_levels_to_print is 0.
+	(octave_struct::print_name_tag): Don't emit newline if
+	Vstruct_levels_to_print is negative.
+	* ov.cc (struct_levels_to_print): Allow negative values too.
+
 2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/lsode.cc (Flsode): Also return istate and error
 	message.  Only generate error if user is not at least requesting
 	the istate output.
 
 	* load-save.cc (hdf5_import_multidim, hdf5_check_attr,
 	hdf5_callback_data, hdf5_read_next_data, read_hdf5_data,
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -62,16 +62,49 @@ any_element_greater_than (const Matrix& 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (a (i, j) > val)
 	return true;
 
   return false;
 }
 
+// In most cases, we could use the map member function from the Matrix
+// classes, but as currently implemented, they don't allow us to
+// detect errors and abort properly.  So use these macros to do the
+// looping here instead.
+
+#define MAPPER_LOOP_2(T, F, M, CONV, R) \
+  do \
+    { \
+      int nr = M.rows (); \
+      int nc = M.cols (); \
+ \
+      T result (nr, nc); \
+ \
+      for (int j = 0; j < nc; j++) \
+	{ \
+	   for (int i = 0; i < nr; i++) \
+	     { \
+		result (i, j) = CONV (F (M (i, j))); \
+ \
+		if (error_state) \
+		  return retval; \
+	     } \
+	} \
+      retval = R; \
+    } \
+  while (0)
+
+#define MAPPER_LOOP_1(T, F, M, CONV) \
+  MAPPER_LOOP_2 (T, F, M, CONV, result)
+
+#define MAPPER_LOOP(T, F, M) \
+  MAPPER_LOOP_1 (T, F, M, )
+
 octave_value
 octave_mapper::apply (const octave_value& arg) const
 {
   octave_value retval;
 
   if (ch_map_fcn)
     {
       // XXX FIXME XXX -- this could be done in a better way...
@@ -79,59 +112,29 @@ octave_mapper::apply (const octave_value
       octave_value tmp = arg.convert_to_str ();
 
       if (! error_state)
 	{
 	  charMatrix chm = tmp.char_matrix_value ();
 
 	  if (! error_state)
 	    {
-	      int nr = chm.rows ();
-	      int nc = chm.cols ();
-
 	      switch (flag)
 		{
 		case 0:
-		  {
-		    boolMatrix result (nr, nc);
-
-		    // islapha and friends can return any nonzero value
-		    // to mean true, but we want to return true or
-		    // false only.
-
-		    for (int j = 0; j < nc; j++)
-		      for (int i = 0; i < nr; i++)
-			result (i, j) = ch_map_fcn (chm (i, j)) ? true : false;
-
-		    retval = result;
-		  }
+		  MAPPER_LOOP_1 (boolMatrix, ch_map_fcn, chm, bool);
 		  break;
 
 		case 1:
-		  {
-		    Matrix result (nr, nc);
-
-		    for (int j = 0; j < nc; j++)
-		      for (int i = 0; i < nr; i++)
-			result (i, j) = ch_map_fcn (chm (i, j));
-
-		    retval = result;
-		  }
+		  MAPPER_LOOP (Matrix, ch_map_fcn, chm);
 		  break;
 
 		case 2:
-		  {
-		    charMatrix result (nr, nc);
-
-		    for (int j = 0; j < nc; j++)
-		      for (int i = 0; i < nr; i++)
-			result (i, j) = ch_map_fcn (chm (i, j));
-
-		    retval = octave_value (result, true);
-		  }
+		  MAPPER_LOOP_2 (charMatrix, ch_map_fcn, chm, ,
+				 octave_value (result, true));
 		  break;
 
 		default:
 		  panic_impossible ();
 		  break;
 		}
 	    }
 	}
@@ -167,28 +170,25 @@ octave_mapper::apply (const octave_value
 	      if (error_state)
 		return retval;
 
 	      if (flag
 		  && (any_element_less_than (m, lower_limit)
 		      || any_element_greater_than (m, upper_limit)))
 		{
 		  if (c_c_map_fcn)
-		    {
-		      ComplexMatrix cm (m);
-		      retval = cm.map (c_c_map_fcn);
-		    }
+		    MAPPER_LOOP (ComplexMatrix, c_c_map_fcn, m);
 		  else
 		    error ("%s: unable to handle real arguments",
 			   name().c_str ());
 		}
 	      else if (d_d_map_fcn)
-		retval = m.map (d_d_map_fcn);
+		MAPPER_LOOP (Matrix, d_d_map_fcn, m);
 	      else if (d_b_map_fcn)
-		retval = m.map (d_b_map_fcn);
+		MAPPER_LOOP (boolMatrix, d_b_map_fcn, m);
 	      else
 		error ("%s: unable to handle real arguments",
 		       name().c_str ());
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  if (arg.is_scalar_type ())
@@ -208,21 +208,21 @@ octave_mapper::apply (const octave_value
 	  else
 	    {
 	      ComplexMatrix cm = arg.complex_matrix_value ();
 
 	      if (error_state)
 		return retval;
 
 	      if (d_c_map_fcn)
-		retval = cm.map (d_c_map_fcn);
+		MAPPER_LOOP (Matrix, d_c_map_fcn, cm);
 	      else if (c_c_map_fcn)
-		retval = cm.map (c_c_map_fcn);
+		MAPPER_LOOP (ComplexMatrix, c_c_map_fcn, cm);
 	      else if (c_b_map_fcn)
-		retval = cm.map (c_b_map_fcn);
+		MAPPER_LOOP (boolMatrix, c_b_map_fcn, cm);
 	      else
 		error ("%s: unable to handle complex arguments",
 		       name().c_str ());
 	    }
 	}
       else
 	gripe_wrong_type_arg ("mapper", arg);
     }
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -69,36 +69,39 @@ tree_prefix_expression::rvalue (void)
 
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
 	{
-	  octave_lvalue ref = op->lvalue ();
+	  op->rvalue ();
+
+	  if (! error_state)
+	    {
+	      octave_lvalue ref = op->lvalue ();
 
-	  if (error_state)
-	    eval_error ();
-	  else if (ref.is_defined ())
-	    {
-	      ref.do_unary_op (etype);
+	      if (! error_state && ref.is_defined ())
+		{
+		  ref.do_unary_op (etype);
 
-	      retval = ref.value ();
+		  retval = ref.value ();
+		}
+	      else
+		eval_error ();
 	    }
 	  else
 	    eval_error ();
 	}
       else
 	{
 	  octave_value val = op->rvalue ();
 
-	  if (error_state)
-	    eval_error ();
-	  else if (val.is_defined ())
+	  if (! error_state && val.is_defined ())
 	    {
 	      retval = ::do_unary_op (etype, val);
 
 	      if (error_state)
 		{
 		  retval = octave_value ();
 		  eval_error ();
 		}
@@ -150,36 +153,39 @@ tree_postfix_expression::rvalue (void)
 
   if (error_state)
     return retval;
 
   if (op)
     {
       if (etype == octave_value::op_incr || etype == octave_value::op_decr)
 	{
-	  octave_lvalue ref = op->lvalue ();
+	  op->rvalue ();
+
+	  if (! error_state)
+	    {
+	      octave_lvalue ref = op->lvalue ();
 
-	  if (error_state)
-	    eval_error ();
-	  else if (ref.is_defined ())
-	    {
-	      retval = ref.value ();
+	      if (! error_state && ref.is_defined ())
+		{
+		  retval = ref.value ();
 
-	      ref.do_unary_op (etype);
+		  ref.do_unary_op (etype);
+		}
+	      else
+		eval_error ();
 	    }
 	  else
 	    eval_error ();
 	}
       else
 	{
 	  octave_value val = op->rvalue ();
 
-	  if (error_state)
-	    eval_error ();
-	  else if (val.is_defined ())
+	  if (! error_state && val.is_defined ())
 	    {
 	      retval = ::do_unary_op (etype, val);
 
 	      if (error_state)
 		{
 		  retval = octave_value ();
 		  eval_error ();
 		}
