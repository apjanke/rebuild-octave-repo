# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1446762136 18000
#      Thu Nov 05 17:22:16 2015 -0500
# Node ID b0b37f0d7e6d8bdc91d27e9c6f90c146145a221d
# Parent  8787e80a44b2e96d2397284333bfd1d77b45b69c
new cellstr_value function and elimination of error_state

* ov.h (octave_value::cellstr_value): New overloaded function with
extra error message.
* ov-base.h, ov-base.cc (octave_base_value::cellstr_value): Likewise.
* ov-cell.h, ov-cell.cc (octave_cell::cellstr_value): Likewise.
* ov-str-mat.h, ov-str-mat.cc (octave_str_mat::cellstr_value):
Likewise.

* graphics.cc, urlwrite.cc, ov-cell.cc, ov-class.cc, ov-struct.cc:
Use new cellstr_value function and eliminate use of error_state.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10019,60 +10019,50 @@ lists respectively.\n\
                       error ("get: vector of handles must all have same type");
                       break;
                     }
                 }
             }
 
           if (nargin > 1 && args(1).is_cellstr ())
             {
-              Array<std::string> plist = args(1).cellstr_value ();
-
-              if (! error_state)
+              Array<std::string> plist = args(1).cellstr_value ("get: expecting property name or cell array of property names as second argument");
+
+              octave_idx_type plen = plist.numel ();
+
+              use_cell_format = true;
+
+              vals.resize (dim_vector (len, plen));
+
+              for (octave_idx_type n = 0; n < len; n++)
                 {
-                  octave_idx_type plen = plist.numel ();
-
-                  use_cell_format = true;
-
-                  vals.resize (dim_vector (len, plen));
-
-                  for (octave_idx_type n = 0; n < len; n++)
+                  graphics_object go = gh_manager::get_object (hcv(n));
+
+                  if (go)
                     {
-                      graphics_object go = gh_manager::get_object (hcv(n));
-
-                      if (go)
+                      for (octave_idx_type m = 0; m < plen; m++)
                         {
-                          for (octave_idx_type m = 0; m < plen; m++)
-                            {
-                              caseless_str property = plist(m);
-
-                              vals(n, m) = go.get (property);
-                            }
-                        }
-                      else
-                        {
-                          error ("get: invalid handle (= %g)", hcv(n));
-                          break;
+                          caseless_str property = plist(m);
+
+                          vals(n, m) = go.get (property);
                         }
                     }
+                  else
+                    {
+                      error ("get: invalid handle (= %g)", hcv(n));
+                      break;
+                    }
                 }
-              else
-                error ("get: expecting property name or cell array of property names as second argument");
             }
           else
             {
               caseless_str property;
 
               if (nargin > 1)
-                {
-                  property = args(1).string_value ();
-
-                  if (error_state)
-                    error ("get: expecting property name or cell array of property names as second argument");
-                }
+                property = args(1).string_value ("get: expecting property name or cell array of property names as second argument");
 
               vals.resize (dim_vector (len, 1));
 
               for (octave_idx_type n = 0; n < len; n++)
                 {
                   graphics_object go = gh_manager::get_object (hcv(n));
 
                   if (go)
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -358,23 +358,17 @@ urlwrite (\"http://www.google.com/search
       method = args(2).string_value ("urlwrite: METHOD must be a string");
 
       if (method != "get" && method != "post")
         {
           error ("urlwrite: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
-      param = args(3).cellstr_value ();
-
-      if (error_state)
-        {
-          error ("urlwrite: parameters (PARAM) for get and post requests must be given as a cell array of strings");
-          return retval;
-        }
+      param = args(3).cellstr_value ("urlwrite: parameters (PARAM) for get and post requests must be given as a cell array of strings");
 
       if (param.numel () % 2 == 1)
         {
           error ("urlwrite: number of elements in PARAM must be even");
           return retval;
         }
     }
 
@@ -498,23 +492,17 @@ s = urlread (\"http://www.google.com/sea
       method = args(1).string_value ("urlread: METHOD must be a string");
 
       if (method != "get" && method != "post")
         {
           error ("urlread: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
-      param = args(2).cellstr_value ();
-
-      if (error_state)
-        {
-          error ("urlread: parameters (PARAM) for get and post requests must be given as a cell array of strings");
-          return retval;
-        }
+      param = args(2).cellstr_value ("urlread: parameters (PARAM) for get and post requests must be given as a cell array of strings");
 
       if (param.numel () % 2 == 1)
         {
           error ("urlread: number of elements in PARAM must be even");
           return retval;
         }
     }
 
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -51,16 +51,40 @@ along with Octave; see the file COPYING.
 #include "ov-str-mat.h"
 #include "ov-fcn-handle.h"
 #include "parse.h"
 #include "pr-output.h"
 #include "utils.h"
 #include "toplev.h"
 #include "variables.h"
 
+static void
+gripe_wrong_type_arg_with_msg (const char *name, const std::string& type,
+                               const char *fmt, va_list args)
+{
+  // Note that this method does not need to be particularly efficient
+  // since it is already an error to end up here.
+
+  // FIXME: do we want both the wrong-type-argument error and any custom
+  // error message, or just the custom error message, or should that
+  // behavior be optional in some way?
+
+  try
+    {
+      gripe_wrong_type_arg (name, type);
+    }
+  catch (const octave_execution_exception&)
+    {
+      if (fmt)
+        verror (fmt, args);
+
+      throw;
+    }
+}
+
 builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y)
 {
   builtin_type_t retval = btyp_unknown;
 
   if (x == btyp_bool)
     x = btyp_double;
   if (y == btyp_bool)
     y = btyp_double;
@@ -535,34 +559,17 @@ octave_base_value::cell_value () const
   Cell retval;
   gripe_wrong_type_arg ("octave_base_value::cell_value()", type_name ());
   return retval;
 }
 
 Cell
 octave_base_value::cell_value (const char *fmt, va_list args) const
 {
-  // Note that this method does not need to be particularly efficient
-  // since it is already an error to end up here.
-
-  // FIXME: do we want both the wrong-type-argument error and any custom
-  // error message, or just the custom error message, or should that
-  // behavior be optional in some way?
-
-  try
-    {
-      gripe_wrong_type_arg ("cell value", type_name ());
-    }
-  catch (const octave_execution_exception&)
-    {
-      if (fmt)
-        verror (fmt, args);
-
-      throw;
-    }
+  gripe_wrong_type_arg_with_msg ("cell value", type_name (), fmt, args);
 
   return Cell ();
 }
 
 Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
@@ -933,47 +940,38 @@ octave_base_value::string_value (bool fo
   retval = tmp.string_value ();
 
   return retval;
 }
 
 std::string
 octave_base_value::string_value (const char *fmt, va_list args) const
 {
-  // Note that this method does not need to be particularly efficient
-  // since it is already an error to end up here.
-
-  // FIXME: do we want both the wrong-type-argument error and any custom
-  // error message, or just the custom error message, or should that
-  // behavior be optional in some way?
-
-  try
-    {
-      gripe_wrong_type_arg ("string value", type_name ());
-    }
-  catch (const octave_execution_exception&)
-    {
-      if (fmt)
-        verror (fmt, args);
-
-      throw;
-    }
+  gripe_wrong_type_arg_with_msg ("string value", type_name (), fmt, args);
 
   return std::string ();
 }
 
 Array<std::string>
 octave_base_value::cellstr_value (void) const
 {
   Array<std::string> retval;
-  gripe_wrong_type_arg ("octave_base_value::cellstry_value()",
+  gripe_wrong_type_arg ("octave_base_value::cellstr_value()",
                         type_name ());
   return retval;
 }
 
+Array<std::string>
+octave_base_value::cellstr_value (const char *fmt, va_list args) const
+{
+  gripe_wrong_type_arg_with_msg ("cellstr value", type_name (), fmt, args);
+
+  return Array<std::string> ();
+}
+
 Range
 octave_base_value::range_value (void) const
 {
   Range retval;
   gripe_wrong_type_arg ("octave_base_value::range_value()", type_name ());
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -565,16 +565,19 @@ public:
   virtual string_vector all_strings (bool pad = false) const;
 
   virtual std::string string_value (bool force = false) const;
 
   virtual std::string string_value (const char *fmt, va_list args) const;
 
   virtual Array<std::string> cellstr_value (void) const;
 
+  virtual Array<std::string>
+  cellstr_value (const char *fmt, va_list args) const;
+
   virtual Range range_value (void) const;
 
   virtual octave_map map_value (void) const;
 
   virtual octave_scalar_map scalar_map_value (void) const;
 
   virtual string_vector map_keys (void) const;
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -475,100 +475,75 @@ octave_cell::byte_size (void) const
   return retval;
 }
 
 octave_value
 octave_cell::sort (octave_idx_type dim, sortmode mode) const
 {
   octave_value retval;
 
-  if (is_cellstr ())
-    {
-      Array<std::string> tmp = cellstr_value ();
-
-      tmp = tmp.sort (dim, mode);
+  Array<std::string> tmp = cellstr_value ("sort: only cell arrays of character strings may be sorted");
 
-      // We already have the cache.
-      retval = new octave_cell (tmp);
-    }
-  else
-    error ("sort: only cell arrays of character strings may be sorted");
+  tmp = tmp.sort (dim, mode);
+
+  // We already have the cache.
+  retval = new octave_cell (tmp);
 
   return retval;
 }
 
 octave_value
 octave_cell::sort (Array<octave_idx_type> &sidx, octave_idx_type dim,
                    sortmode mode) const
 {
   octave_value retval;
 
-  if (is_cellstr ())
-    {
-      Array<std::string> tmp = cellstr_value ();
-
-      tmp = tmp.sort (sidx, dim, mode);
+  Array<std::string> tmp = cellstr_value ("sort: only cell arrays of character strings may be sorted");
 
-      // We already have the cache.
-      retval = new octave_cell (tmp);
-    }
-  else
-    error ("sort: only cell arrays of character strings may be sorted");
+  tmp = tmp.sort (sidx, dim, mode);
+
+  // We already have the cache.
+  retval = new octave_cell (tmp);
 
   return retval;
 }
 
 sortmode
 octave_cell::is_sorted (sortmode mode) const
 {
   sortmode retval = UNSORTED;
 
-  if (is_cellstr ())
-    {
-      Array<std::string> tmp = cellstr_value ();
+  Array<std::string> tmp = cellstr_value ("issorted: A is not a cell array of strings");
 
-      retval = tmp.is_sorted (mode);
-    }
-  else
-    error ("issorted: A is not a cell array of strings");
+  retval = tmp.is_sorted (mode);
 
   return retval;
 }
 
 
 Array<octave_idx_type>
 octave_cell::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> retval;
 
-  if (is_cellstr ())
-    {
-      Array<std::string> tmp = cellstr_value ();
+  Array<std::string> tmp = cellstr_value ("sortrows: only cell arrays of character strings may be sorted");
 
-      retval = tmp.sort_rows_idx (mode);
-    }
-  else
-    error ("sortrows: only cell arrays of character strings may be sorted");
+  retval = tmp.sort_rows_idx (mode);
 
   return retval;
 }
 
 sortmode
 octave_cell::is_sorted_rows (sortmode mode) const
 {
   sortmode retval = UNSORTED;
 
-  if (is_cellstr ())
-    {
-      Array<std::string> tmp = cellstr_value ();
+  Array<std::string> tmp = cellstr_value ("issorted: A is not a cell array of strings");
 
-      retval = tmp.is_sorted_rows (mode);
-    }
-  else
-    error ("issorted: A is not a cell array of strings");
+  retval = tmp.is_sorted_rows (mode);
 
   return retval;
 }
 
 bool
 octave_cell::is_true (void) const
 {
   error ("invalid conversion from cell array to logical value");
@@ -656,16 +631,59 @@ octave_cell::cellstr_value (void) const
       return *cellstr_cache;
     }
   else
     error ("invalid conversion from cell array to array of strings");
 
   return retval;
 }
 
+Array<std::string>
+octave_cell::cellstr_value (const char *fmt, ...) const
+{
+  Array<std::string> retval;
+  va_list args;
+  retval = cellstr_value (fmt, args);
+  va_end (args);
+  return retval;
+}
+
+Array<std::string>
+octave_cell::cellstr_value (const char *fmt, va_list args) const
+{
+  Array<std::string> retval;
+
+  if (! fmt)
+    return cellstr_value ();
+
+  bool conversion_error = false;
+
+  if (is_cellstr ())
+    {
+      try
+        {
+          if (cellstr_cache->is_empty ())
+            *cellstr_cache = matrix.cellstr_value ();
+
+          retval = *cellstr_cache;
+        }
+      catch (const octave_execution_exception&)
+        {
+          conversion_error = true;
+        }
+    }
+  else
+    conversion_error = true;
+
+  if (conversion_error)
+    verror (fmt, args);
+
+  return retval;
+}
+
 bool
 octave_cell::print_as_scalar (void) const
 {
   return true;
 }
 
 void
 octave_cell::print (std::ostream& os, bool)
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -141,16 +141,20 @@ public:
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
   { return octave_value (all_strings (pad), type); }
 
   string_vector all_strings (bool pad = false) const;
 
   Array<std::string> cellstr_value (void) const;
 
+  Array<std::string> cellstr_value (const char *fmt, ...) const;
+
+  Array<std::string> cellstr_value (const char *fmt, va_list args) const;
+
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void short_disp (std::ostream& os) const;
 
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1912,22 +1912,17 @@ belongs to.\n\
   if (args.length () != 2)
     {
       print_usage ();
       return retval;
     }
 
   octave_value obj = args(0);  // not const because of find_parent_class ()
   std::string obj_cls = obj.class_name ();
-  Array<std::string> clsnames = args(1).cellstr_value ();
-  if (error_state)
-    {
-      error ("isa: CLASSNAME must be a string or cell array of strings");
-      return retval;
-    }
+  Array<std::string> clsnames = args(1).cellstr_value ("isa: CLASSNAME must be a string or cell array of strings");
 
   boolNDArray matches (clsnames.dims (), false);
   for (octave_idx_type idx = 0; idx < clsnames.numel (); idx++)
     {
       std::string cls = clsnames(idx);
       if (obj_cls == cls
           || (cls == "float"   && obj.is_float_type   ())
           || (cls == "integer" && obj.is_integer_type ())
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -298,16 +298,51 @@ octave_char_matrix_str::cellstr_value (v
         retval.xelem (i) = chm.row_as_string (i);
     }
   else
     error ("cellstr: cannot convert multidimensional arrays");
 
   return retval;
 }
 
+Array<std::string>
+octave_char_matrix_str::cellstr_value (const char *fmt, va_list args) const
+{
+  Array<std::string> retval;
+
+  if (! fmt)
+    return cellstr_value ();
+
+  bool conversion_error = false;
+
+  if (matrix.ndims () == 2)
+    {
+      const charMatrix chm (matrix);
+      octave_idx_type nr = chm.rows ();
+      retval.clear (nr, 1);
+
+      try
+        {
+          for (octave_idx_type i = 0; i < nr; i++)
+            retval.xelem (i) = chm.row_as_string (i);
+        }
+      catch (const octave_execution_exception&)
+        {
+          conversion_error = true;
+        }
+    }
+  else
+    conversion_error = true;
+
+  if (conversion_error)
+    verror (fmt, args);
+
+  return retval;
+}
+
 void
 octave_char_matrix_str::print_raw (std::ostream& os,
                                    bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
                          current_print_indent_level (), true);
 }
 
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -128,16 +128,18 @@ public:
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   std::string string_value (const char *fmt, va_list args) const;
 
   Array<std::string> cellstr_value (void) const;
 
+  Array<std::string> cellstr_value (const char *fmt, va_list args) const;
+
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode)); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1809,20 +1809,19 @@ produces a struct @strong{array}.\n\
 
   if ((nargin == 1 || nargin == 2)
       && args(0).is_empty () && args(0).is_real_matrix ())
     {
       Cell fields;
 
       if (nargin == 2)
         {
-          if (args(1).is_cellstr ())
-            retval = octave_map (args(0).dims (), args(1).cellstr_value ());
-          else
-            error ("struct: expecting cell array of field names as second argument");
+          Array<std::string> cstr = args(1).cellstr_value ("struct: expecting cell array of field names as second argument");
+
+          retval = octave_map (args(0).dims (), cstr);
         }
       else
         retval = octave_map (args(0).dims ());
 
       return retval;
     }
 
   // Check for "field", VALUE pairs.
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -907,16 +907,26 @@ public:
     retval = rep->string_value (fmt, args);
     va_end (args);
     return retval;
   }
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
+  Array<std::string> cellstr_value (const char *fmt, ...) const
+  {
+    Array<std::string> retval;
+    va_list args;
+    va_start (args,fmt);
+    retval = rep->cellstr_value (fmt, args);
+    va_end (args);
+    return retval;
+  }
+
   Range range_value (void) const
   { return rep->range_value (); }
 
   octave_map map_value (void) const;
 
   octave_scalar_map scalar_map_value (void) const;
 
   string_vector map_keys (void) const
