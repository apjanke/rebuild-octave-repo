# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1317056942 14400
#      Mon Sep 26 13:09:02 2011 -0400
# Node ID 20ed9548070f8aafd26235e7a903f8f37d54509f
# Parent  c73cc5b67febae212d56322c14a60b05bdc50f74
maint: style fixes for cellfun

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -107,68 +107,68 @@ try_cellfun_internal_ops (const octave_v
 
   const Cell f_args = args(1).cell_value ();
 
   octave_idx_type k = f_args.numel ();
 
   if (name == "isempty")
     {
       boolNDArray result (f_args.dims ());
-      for (octave_idx_type count = 0; count < k ; count++)
+      for (octave_idx_type count = 0; count < k; count++)
         result(count) = f_args.elem(count).is_empty ();
       retval(0) = result;
     }
   else if (name == "islogical")
     {
       boolNDArray result (f_args.dims ());
-      for (octave_idx_type  count= 0; count < k ; count++)
+      for (octave_idx_type  count= 0; count < k; count++)
         result(count) = f_args.elem(count).is_bool_type ();
       retval(0) = result;
     }
   else if (name == "isreal")
     {
       boolNDArray result (f_args.dims ());
-      for (octave_idx_type  count= 0; count < k ; count++)
+      for (octave_idx_type  count= 0; count < k; count++)
         result(count) = f_args.elem(count).is_real_type ();
       retval(0) = result;
     }
   else if (name == "length")
     {
       NDArray result (f_args.dims ());
-      for (octave_idx_type  count= 0; count < k ; count++)
+      for (octave_idx_type  count= 0; count < k; count++)
         result(count) = static_cast<double> (f_args.elem(count).length ());
       retval(0) = result;
     }
   else if (name == "ndims")
     {
       NDArray result (f_args.dims ());
-      for (octave_idx_type count = 0; count < k ; count++)
+      for (octave_idx_type count = 0; count < k; count++)
         result(count) = static_cast<double> (f_args.elem(count).ndims ());
       retval(0) = result;
     }
   else if (name == "prodofsize" || name == "numel")
     {
       NDArray result (f_args.dims ());
-      for (octave_idx_type count = 0; count < k ; count++)
+      for (octave_idx_type count = 0; count < k; count++)
         result(count) = static_cast<double> (f_args.elem(count).numel ());
       retval(0) = result;
     }
   else if (name == "size")
     {
       if (nargin == 3)
         {
           int d = args(2).nint_value () - 1;
 
           if (d < 0)
             error ("cellfun: K must be a positive integer");
 
           if (! error_state)
             {
               NDArray result (f_args.dims ());
-              for (octave_idx_type count = 0; count < k ; count++)
+              for (octave_idx_type count = 0; count < k; count++)
                 {
                   dim_vector dv = f_args.elem(count).dims ();
                   if (d < dv.length ())
                     result(count) = static_cast<double> (dv(d));
                   else
                     result(count) = 1.0;
                 }
               retval(0) = result;
@@ -178,17 +178,17 @@ try_cellfun_internal_ops (const octave_v
         error ("cellfun: not enough arguments for \"size\"");
     }
   else if (name == "isclass")
     {
       if (nargin == 3)
         {
           std::string class_name = args(2).string_value();
           boolNDArray result (f_args.dims ());
-          for (octave_idx_type count = 0; count < k ; count++)
+          for (octave_idx_type count = 0; count < k; count++)
             result(count) = (f_args.elem(count).class_name() == class_name);
 
           retval(0) = result;
         }
       else
         error ("cellfun: not enough arguments for \"isclass\"");
     }
 
@@ -518,17 +518,17 @@ cellfun (\"factorial\", @{-1,2@}, 'Error
       if (uniform_output)
         {
           std::list<octave_value_list> idx_list (1);
           idx_list.front ().resize (1);
           std::string idx_type = "(";
 
           OCTAVE_LOCAL_BUFFER (octave_value, retv, nargout1);
 
-          for (octave_idx_type count = 0; count < k ; count++)
+          for (octave_idx_type count = 0; count < k; count++)
             {
               for (int j = 0; j < nargin; j++)
                 {
                   if (mask[j])
                     inputlist.xelem (j) = cinputs[j](count);
                 }
 
               const octave_value_list tmp
