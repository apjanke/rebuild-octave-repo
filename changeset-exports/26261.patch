# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545172415 28800
#      Tue Dec 18 14:33:35 2018 -0800
# Node ID eb1903f8bf989c37c10e03a72bb21c94cdd4581b
# Parent  9d3c22f7fff12a9dfe189f17805c6eadaf07d3f9
movfun.m: Tweak documentation and remove spaces at EOL.

* movfun.m: Tweak documentation and remove spaces at EOL.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -17,36 +17,37 @@
 ## <https://www.gnu.org/licenses/>.
 
 ## Author: Juan Pablo Carbajal <ajuanpi+dev@gmail.com>
 ## Created: 2018-08-09
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{y} =} movfun (@var{fcn}, @var{x}, @var{wlen})
 ## @deftypefnx {} {@var{y} =} movfun (@var{fcn}, @var{x}, @var{[@var{nb}, @var{na}}])
-## @deftypefnx {} {@var{y} =} movfun (@dots{}, @var{property}, @var{value})
+## @deftypefnx {} {@var{y} =} movfun (@dots{}, "@var{property}", @var{value})
+##
 ## Apply function @var{fcn} to a moving window of length @var{wlen} on data
 ## @var{x}.
 ##
 ## If @var{wlen} is a scalar, the function @var{fcn} is applied to a moving
 ## window of length @var{wlen}.  When @var{wlen} is an odd number the window is
 ## symmetric and includes @w{@code{(@var{wlen} - 1) / 2}} elements on either
 ## side of the central element.  For example, when calculating the output at
 ## index 5 with a window length of 3, @code{movfun} uses data elements
 ## @w{@code{[4, 5, 6]}}.  If @var{wlen} is an even number, the window is
 ## asymmetric and has @w{@code{@var{wlen}/2}} elements to the left of the
-## central element
-## and @w{@code{@var{wlen}/2 - 1}} elements to the right of the central element.
-## For example, when calculating the output at index 5 with a window length of
-## 4, @code{movfun} uses data elements @w{@code{[3, 4, 5, 6]}}.
+## central element and @w{@code{@var{wlen}/2 - 1}} elements to the right of the
+## central element.  For example, when calculating the output at index 5 with a
+## window length of 4, @code{movfun} uses data elements
+## @w{@code{[3, 4, 5, 6]}}.
 ##
 ## If @var{wlen} is an array with two elements @w{@code{[@var{nb}, @var{na}]}},
 ## the function is applied to a moving window @code{-@var{nb}:@var{na}}.  This
-## window includes @var{nb} number of elements @strong{before} the current
-## element and @var{na} number of elements @strong{after} the current element.
+## window includes @var{nb} number of elements @emph{before} the current
+## element and @var{na} number of elements @emph{after} the current element.
 ## The current element is always included.  For example, given
 ## @w{@code{@var{wlen} = [3, 0]}}, the data used to calculate index 5 is
 ## @w{@code{[2, 3, 4, 5]}}.
 ##
 ## During calculations the data input @var{x} is reshaped into a 2-dimensional
 ## @var{wlen}-by-@var{N} matrix and @var{fcn} is called on this new matrix.
 ## Therefore, @var{fcn} must accept an array input argument and apply the
 ## computation along dimension 1, i.e., down the columns of the array.
@@ -126,17 +127,17 @@
 ##
 ## @end table
 ##
 ## Note that for some of these choices, the window size at the boundaries is
 ## not the same as for the central part, and @var{fcn} must work in these
 ## cases.
 ##
 ## @item @qcode{"nancond"}
-## Controls whether @code{NaN} or @code{NA} values should be included (value:
+## Controls whether @code{NaN} and @code{NA} values should be included (value:
 ## @qcode{"includenan"}), or excluded (value: @qcode{"omitnan"}), from the data
 ## passed to @var{fcn}.  The default is @qcode{"includenan"}.  Caution:
 ## The @qcode{"omitnan"} option is not yet implemented.
 ##
 ## @item @qcode{"outdim"}
 ## A row vector that selects which dimensions of the calculation will appear
 ## in the output @var{y}.  This is only useful when @var{fcn} returns an
 ## N-dimensional array in @w{Format 1}.  The default is to return all output
@@ -193,17 +194,17 @@ function y = movfun (fcn, x, wlen, varar
   ## End parse input arguments
 
   ## If dim was not provided find the first non-singleton dimension.
   szx = size (x);
   if (isempty (dim))
     (dim = find (szx > 1, 1)) || (dim = 1);
   endif
 
-  N = szx(dim);  
+  N = szx(dim);
 
   ## Calculate slicing indices.  This call also validates WLEN input.
   [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
 
   ## Use [nb, na] format which makes replaceval_bc() simpler.
   if (isscalar (wlen))
     wlen = [wlen, wlen];
   endif
@@ -309,17 +310,17 @@ function y = shrink_bc (fcn, x, idxp, wi
   N   = length (x);
   idx = idxp + win;
   tf  = (idx > 0) & (idx <= N);  # idx inside boundaries
 
   n   = length (idxp);
   y   = zeros (n, odim);
   ## FIXME: This nested for loop accounts for 70% of running time.
   ##        Given that "shrink" is the default Endpoint value this
-  ##        code needs to be reworked
+  ##        code needs to be reworked.
   for i = 1:n
     k      = idx(tf(:,i),i);
     y(i,:) = fcn (x(k));
   endfor
 endfunction
 
 ## Apply replacement value boundary conditions
 ## Window is padded at beginning and end with user-specified value.
