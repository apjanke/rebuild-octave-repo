# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1491391605 -7200
#      Wed Apr 05 13:26:45 2017 +0200
# Node ID 0b6810085ed3eeb0367b9b89a87a80dcde49a826
# Parent  7dc148266dca3e1f58ac73933d2bc109be1fd7f0
Altering class member of object array modifies other class members (bug #46660).

* libinterp/octave-value/ov-classdef.cc(cdef_object_array::subsasgn): avoid
the aforementioned problem.

* test/module.mk: Add test directory for bug #46660.
* test/bug-46660/module.mk: Add files for test for bug #46660.
* test/bug-46660/bug-46660.tst: New test script for bug #46660.
* test/bug-46660/class_bug46660.m: New test class for bug #46660.


Pushed by Kai T. Ohlhus <k.ohlhus@gmail.com>.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1606,22 +1606,29 @@ cdef_object_array::subsasgn (const std::
           if (array.numel () > n)
             fill_empty_values ();
 
           refcount++;
           retval = to_ov (cdef_object (this));
         }
       else
         {
-          const octave_value_list& ival = idx.front ();
+          const octave_value_list& ivl = idx.front ();
+
+          // Fill in trailing singleton dimensions so that
+          // array.index doesn't create a new blank entry (bug #46660).
+          const octave_idx_type one = static_cast<octave_idx_type> (1);
+          const octave_value_list& ival = ivl.length () >= 2
+                                            ? ivl : ((array.dims ()(0) == 1)
+                                                      ? ovl (one, ivl(0))
+                                                      : ovl (ivl(0), one));
 
           bool is_scalar = true;
 
-          Array<idx_vector> iv (dim_vector (1, std::max (ival.length (),
-            static_cast<octave_idx_type> (2))));
+          Array<idx_vector> iv (dim_vector (1, ival.length ()));
 
           for (int i = 0; i < ival.length (); i++)
             {
               try
                 {
                   iv(i) = ival(i).index_vector ();
                 }
               catch (octave::index_exception& e)
@@ -1634,21 +1641,16 @@ cdef_object_array::subsasgn (const std::
               is_scalar = is_scalar && iv(i).is_scalar ();
 
               if (! is_scalar)
                 error ("subsasgn: invalid indexing for object array assignment"
                        ", the index must reference a single object in the "
                        "array.");
             }
 
-          // Fill in trailing singleton dimensions so that
-          // array.index doesn't create a new blank entry (bug #46660).
-          for (int i = ival.length (); i < 2; i++)
-            iv(i) = static_cast<octave_idx_type> (1);
-
           Array<cdef_object> a = array.index (iv, true);
 
           if (a.numel () != 1)
             error ("subsasgn: invalid indexing for object array assignment");
 
           cdef_object obj = a(0);
 
           int ignore_copies = 0;
diff --git a/test/bug-46660/bug-46660.tst b/test/bug-46660/bug-46660.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-46660/bug-46660.tst
@@ -0,0 +1,29 @@
+## Copyright (C) 2017 Lachlan Andrew
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+%!test
+%! a(1) = class_bug46660 ();
+%! a(2) = class_bug46660 ();
+%! a(2).x = 123;
+%! assert (a(2).x, 123);
+%! assert (isempty (a(2).y));
+%!
+%! # writing into a(2).y may not alter a(2).x
+%! a(2).y = 321;
+%! assert (a(2).x, 123);
+%! assert (a(2).y, 321);
diff --git a/test/bug-46660/class_bug46660.m b/test/bug-46660/class_bug46660.m
new file mode 100644
--- /dev/null
+++ b/test/bug-46660/class_bug46660.m
@@ -0,0 +1,6 @@
+classdef class_bug46660
+  properties
+    x
+    y
+  endproperties
+endclassdef
diff --git a/test/bug-46660/module.mk b/test/bug-46660/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-46660/module.mk
@@ -0,0 +1,6 @@
+
+bug_46660_TEST_FILES = \
+  test/bug-46660/class_bug46660.m \
+  test/bug-46660/bug-46660.tst
+
+TEST_FILES += $(bug_46660_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -44,16 +44,17 @@ TEST_FILES += \
 
 DIRSTAMP_FILES += test/$(octave_dirstamp)
 
 include test/bug-35448/module.mk
 include test/bug-36025/module.mk
 include test/bug-38236/module.mk
 include test/bug-38691/module.mk
 include test/bug-44940/module.mk
+include test/bug-46660/module.mk
 include test/bug-50014/module.mk
 include test/bug-50035/module.mk
 include test/class-concat/module.mk
 include test/classdef/module.mk
 include test/classdef-multiple-inheritance/module.mk
 include test/classes/module.mk
 include test/ctor-vs-method/module.mk
 include test/fcn-handle-derived-resolution/module.mk
