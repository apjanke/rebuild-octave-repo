# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259063949 -3600
#      Tue Nov 24 12:59:09 2009 +0100
# Node ID 5919f2bd9a996089918429e28cde85004fa0e539
# Parent  47c5af1868dfc0c7ead15f5a8f4e0f168f44f5d4
small improvements in accumarray

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/accumarray.m: Use num2cell instead of mat2cell. Use repmat.
+
 2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* script/miscellaneous/getfield: Deblank field names, gripe on invalid
 	index.
 	* script/miscellaneous/setfield: Rewrite using subsasgn.
 
 2009-11-22  Michael Goffioul <michael.goffioul@gmail.com>
 
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -100,17 +100,17 @@ function A = accumarray (subs, val, sz, 
           sz = max (subs);
         elseif (ndims != length (sz))
           error ("accumarray: dimensions mismatch")
         elseif (any (max (subs) > sz))
           error ("accumarray: index out of range")
         endif
 
         ## Convert multidimensional subscripts.
-        subs = sub2ind (sz, mat2cell (subs, rows (subs), ones (1, ndims)){:});
+        subs = sub2ind (sz, num2cell (subs, 1){:});
       elseif (nargin < 3)
         ## In case of linear indexing, the fast built-in accumulator
         ## will determine the extent for us.
         sz = [];
       endif
 
       ## Call the built-in accumulator.
       if (isempty (sz))
@@ -140,17 +140,17 @@ function A = accumarray (subs, val, sz, 
   elseif (length (sz) != ndims
 	  && (ndims != 1 || length (sz) != 2 || sz(2) != 1))
     error ("accumarray: inconsistent dimensions");
   endif
   
   [subs, idx] = sortrows (subs);
 
   if (isscalar (val))
-    val = val * ones (size (idx));
+    val = repmat (size (idx));
   else
     val = val(idx);
   endif
   cidx = find ([true; (sum (abs (diff (subs)), 2) != 0)]);
   idx = cell (1, ndims);
   for i = 1:ndims
     idx{i} = subs (cidx, i);
   endfor
