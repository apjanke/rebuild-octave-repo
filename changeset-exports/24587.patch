# HG changeset patch
# User Stevie Schraudner <stevietodd@hotmail.com>
# Date 1515624613 18000
#      Wed Jan 10 17:50:13 2018 -0500
# Node ID 6ece7c7e4912211a9fe1846edd29fbd9520041fd
# Parent  c24b536df5d44da354e9406c1db3da0528d6ef43
tolower/toupper functions return complex numbers unchanged (bug #52380).

* mappers.cc (Ftolower, Ftoupper): Add BIST tests for new behavior.

* ov-complex.cc (octave_complex::map): Directly return input for cases of
umap_xtolower and umap_xtoupper.

* ov-cx-mat.cc (octave_complex_matrix::map): Directly return input for cases of
umap_xtolower and umap_xtoupper.

* ov-flt-complex.cc (octave_float_complex::map): Directly return input for
cases of umap_xtolower and umap_xtoupper.

* ov-flt-cx-mat.cc (octave_float_complex_matrix::map): Directly return input
for cases of umap_xtolower and umap_xtoupper.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -2171,16 +2171,21 @@ DEFALIAS (lower, tolower);
 /*
 %!assert (tolower ("OCTAVE"), "octave")
 %!assert (tolower ("123OCTave! _&"), "123octave! _&")
 %!assert (tolower ({"ABC", "DEF", {"GHI", {"JKL"}}}), {"abc", "def", {"ghi", {"jkl"}}})
 %!assert (tolower (["ABC"; "DEF"]), ["abc"; "def"])
 %!assert (tolower ({["ABC"; "DEF"]}), {["abc";"def"]})
 %!assert (tolower (68), 68)
 %!assert (tolower ({[68, 68; 68, 68]}), {[68, 68; 68, 68]})
+%!assert (tolower (68i), 68i)
+%!assert (tolower ({[68i, 68; 68, 68i]}), {[68i, 68; 68, 68i]})
+%!assert (tolower (single (68i)), single (68i))
+%!assert (tolower ({single([68i, 68; 68, 68i])}), {single([68i, 68; 68, 68i])})
+
 %!test
 %! classes = {@char, @double, @single, ...
 %!            @int8, @int16, @int32, @int64, ...
 %!            @uint8, @uint16, @uint32, @uint64};
 %! for i = 1:numel (classes)
 %!   cls = classes{i};
 %!   assert (class (tolower (cls (97))), class (cls (97)));
 %!   assert (class (tolower (cls ([98, 99]))), class (cls ([98, 99])));
@@ -2230,16 +2235,22 @@ DEFALIAS (upper, toupper);
 /*
 %!assert (toupper ("octave"), "OCTAVE")
 %!assert (toupper ("123OCTave! _&"), "123OCTAVE! _&")
 %!assert (toupper ({"abc", "def", {"ghi", {"jkl"}}}), {"ABC", "DEF", {"GHI", {"JKL"}}})
 %!assert (toupper (["abc"; "def"]), ["ABC"; "DEF"])
 %!assert (toupper ({["abc"; "def"]}), {["ABC";"DEF"]})
 %!assert (toupper (100), 100)
 %!assert (toupper ({[100, 100; 100, 100]}), {[100, 100; 100, 100]})
+%!assert (toupper (100i), 100i)
+%!assert (toupper ({[100i, 100; 100, 100i]}), {[100i, 100; 100, 100i]})
+%!assert (toupper (single (100i)), single (100i))
+%!assert (toupper ({single([100i, 100; 100, 100i])}),
+%!                 {single([100i, 100; 100, 100i])})
+
 %!test
 %! classes = {@char, @double, @single, ...
 %!            @int8, @int16, @int32, @int64, ...
 %!            @uint8, @uint16, @uint32, @uint64};
 %! for i = 1:numel (classes)
 %!   cls = classes{i};
 %!   assert (class (toupper (cls (97))), class (cls (97)));
 %!   assert (class (toupper (cls ([98, 99]))), class (cls ([98, 99])));
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -521,12 +521,17 @@ octave_complex::map (unary_mapper_t umap
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
+    // Special cases for Matlab compatibility.
+    case umap_xtolower:
+    case umap_xtoupper:
+      return scalar;
+
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -749,16 +749,21 @@ octave_complex_matrix::map (unary_mapper
     // Mappers handled specially.
     case umap_real:
       return ::real (matrix);
     case umap_imag:
       return ::imag (matrix);
     case umap_conj:
       return ::conj (matrix);
 
+    // Special cases for Matlab compatibility.
+    case umap_xtolower:
+    case umap_xtoupper:
+      return matrix;
+
 #define ARRAY_METHOD_MAPPER(UMAP, FCN)        \
     case umap_ ## UMAP:                       \
       return octave_value (matrix.FCN ())
 
     ARRAY_METHOD_MAPPER (abs, abs);
     ARRAY_METHOD_MAPPER (isnan, isnan);
     ARRAY_METHOD_MAPPER (isinf, isinf);
     ARRAY_METHOD_MAPPER (isfinite, isfinite);
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -469,12 +469,17 @@ octave_float_complex::map (unary_mapper_
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
     SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::isna);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
+    // Special cases for Matlab compatibility
+    case umap_xtolower:
+    case umap_xtoupper:
+      return scalar;
+
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -701,16 +701,21 @@ octave_float_complex_matrix::map (unary_
     // Mappers handled specially.
     case umap_real:
       return ::real (matrix);
     case umap_imag:
       return ::imag (matrix);
     case umap_conj:
       return ::conj (matrix);
 
+    // Special cases for Matlab compatibility.
+    case umap_xtolower:
+    case umap_xtoupper:
+      return matrix;
+               
 #define ARRAY_METHOD_MAPPER(UMAP, FCN)        \
     case umap_ ## UMAP:                       \
       return octave_value (matrix.FCN ())
 
     ARRAY_METHOD_MAPPER (abs, abs);
     ARRAY_METHOD_MAPPER (isnan, isnan);
     ARRAY_METHOD_MAPPER (isinf, isinf);
     ARRAY_METHOD_MAPPER (isfinite, isfinite);
