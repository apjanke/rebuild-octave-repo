# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526052421 14400
#      Fri May 11 11:27:01 2018 -0400
# Node ID 2dad85fe6b8bc79c9d66a31c106eb628004061de
# Parent  e875f4719718188b7af5021b53a77f801e62e017
avoid warning from gcc 8 (bug #53872)

* oct-sort.cc (roundupsize): Use size_t for computation and check that
result fits in octave_idx_type.

diff --git a/liboctave/util/oct-sort.cc b/liboctave/util/oct-sort.cc
--- a/liboctave/util/oct-sort.cc
+++ b/liboctave/util/oct-sort.cc
@@ -106,16 +106,17 @@ The Python license is
 // this file.
 
 #include <cassert>
 #include <algorithm>
 #include <functional>
 #include <cstring>
 #include <stack>
 
+#include "lo-error.h"
 #include "lo-mappers.h"
 #include "quit.h"
 #include "oct-sort.h"
 #include "oct-locbuf.h"
 
 template <typename T>
 octave_sort<T>::octave_sort (void) :
   compare (ascending_compare), ms (nullptr)
@@ -488,20 +489,20 @@ octave_sort<T>::gallop_right (T key, T *
       else
         lastofs = m+1;  /* a[m] <= key */
     }
 
   return ofs;
 }
 
 static inline octave_idx_type
-roundupsize (octave_idx_type n)
+roundupsize (size_t n)
 {
   unsigned int nbits = 3;
-  octave_idx_type n2 = static_cast<octave_idx_type> (n) >> 8;
+  size_t n2 = n >> 8;
 
   /* Round up:
    * If n <       256, to a multiple of        8.
    * If n <      2048, to a multiple of       64.
    * If n <     16384, to a multiple of      512.
    * If n <    131072, to a multiple of     4096.
    * If n <   1048576, to a multiple of    32768.
    * If n <   8388608, to a multiple of   262144.
@@ -521,17 +522,23 @@ roundupsize (octave_idx_type n)
    * provoke them than it used to).
    */
   while (n2)
     {
       n2 >>= 3;
       nbits += 3;
     }
 
-  return ((n >> nbits) + 1) << nbits;
+  size_t new_size = ((n >> nbits) + 1) << nbits;
+
+  if (new_size == 0 || new_size > std::numeric_limits<octave_idx_type>::max ())
+    (*current_liboctave_error_handler)
+      ("unable to allocate sufficient memory for sort");
+
+  return static_cast<octave_idx_type> (new_size);
 }
 
 /* Ensure enough temp memory for 'need' array slots is available.
  * Returns 0 on success and -1 if the memory can't be gotten.
  */
 template <typename T>
 void
 octave_sort<T>::MergeState::getmem (octave_idx_type need)
