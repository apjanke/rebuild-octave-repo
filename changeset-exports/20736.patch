# HG changeset patch
# User Carnë Draug <carandraug@octave.org>
# Date 1448292354 0
#      Mon Nov 23 15:25:54 2015 +0000
# Node ID 842765b159ed8498714d049f5595825380beb39c
# Parent  418ae0cb752f40522488282efcef4ec52e6d5d0b
New function im2double ported from the image package.

* scripts/image/im2double.m: new function that has been ported by
  merging bits from im2double and imcast from the Octave Forge
  image package.
* scripts/image/module.mk: add im2double.m to the build.
* NEWS: add im2double.m to new functions for 4.2.
* doc/interpreter/image.txi: mention im2double in the manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -55,21 +55,23 @@ Summary of important user-visible change
  ** The quadl function now uses an absolute, rather than relative, tolerance
     for Matlab compatibility.  The default tolerance is 1e-6 which may result
     in lower precision results than previous versions of Octave which used
     eps as the relative tolerance.  The quadl function has also been extended
     to return a second output with the total number of function evaluations.
 
  ** Other new functions added in 4.2:
 
-      psi         rad2deg
       deg2rad
+      im2double
+      psi
       odeset
       odeget
       ode45
+      rad2deg
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function             | Replacement
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -135,16 +135,18 @@ A pixel in a binary image is black if it
 if it is @code{true}.
 
 An indexed image consists of an M-by-N matrix of integers
 and a C-by-3 color map.  Each integer corresponds to an
 index in the color map, and each row in the color map corresponds to
 an RGB color.  The color map must be of class @code{double} with values
 between 0 and 1.
 
+@DOCSTRING(im2double)
+
 @DOCSTRING(iscolormap)
 
 @DOCSTRING(gray2ind)
 
 @DOCSTRING(ind2gray)
 
 @DOCSTRING(rgb2ind)
 
diff --git a/scripts/image/im2double.m b/scripts/image/im2double.m
new file mode 100644
--- /dev/null
+++ b/scripts/image/im2double.m
@@ -0,0 +1,121 @@
+## Copyright (C) 2007-2015 Søren Hauberg
+## Copyright (C) 2012-2015 Carnë Draug
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {} im2double (@var{img})
+## @deftypefnx {Function File} {} im2double (@var{img}, "indexed")
+## Convert image to double precision.
+##
+## The conversion of @var{img} to double precision, is dependent
+## on the type of input image.  The following input classes are
+## supported:
+##
+## @table @samp
+## @item uint8, uint16, and int16
+## The range of values from the class is scaled to the interval [0 1].
+##
+## @item logical
+## True and false values are assigned a value of 0 and 1 respectively.
+##
+## @item single
+## Values are cast to double.
+##
+## @item double
+## Returns the same image.
+##
+## @end table
+##
+## If the second argument is the string @qcode{"indexed"}, then values are
+## cast to double precision, and a +1 offset is applied if input is
+## an integer class.
+##
+## @seealso{double}
+## @end deftypefn
+
+## Author: Søren Hauberg <soren@hauberg.org>
+## Author: Carnë Draug <carandraug@octave.org>
+
+function img = im2double (img, im_type)
+  ## "normal" (non-indexed) images
+  if (nargin () == 1)
+    switch (class (img))
+      case "uint8",   img = double (img) / 255;
+      case "uint16",  img = double (img) / 65535;
+      case "int16",   img = (double (img) + 32768) / 65535;
+      case "single",  img = double (img);
+      case "logical", img = double (img);
+      case "double",  # do nothing
+      otherwise, error ("im2double: IMG is of unsupported class \"%s\"", class (img));
+    endswitch
+
+  ## indexed images
+  elseif (nargin () == 2)
+    if (! strcmpi (im_type, "indexed"))
+      error ("im2double: second input argument must be the string \"indexed\"");
+    elseif (any (isa (img, {"uint8", "uint16"})))
+      img = double (img) + 1;
+    elseif (isfloat (img) && isindex (img))
+      img = double (img);
+    else
+      error (["im2double: if IMG is indexed, then it must be positive " ...
+              "integer floating points or unsigned integer class"]);
+    endif
+
+  else
+    print_usage ();
+  endif
+endfunction
+
+%!assert (im2double ([1 2 3]), [1 2 3])
+%!assert (im2double (single ([1 2 3])), [1 2 3])
+%!assert (im2double (uint8 ([0 127 128 255])), [0 127/255 128/255 1])
+%!assert (im2double (uint16 ([0 127 128 65535])), [0 127/65535 128/65535 1])
+%!assert (im2double (int16 ([-32768 -32767 -32766 32767])),
+%!                   [0 1/65535 2/65535 1])
+
+%!assert (im2double (uint8 ([0 1 255]), "indexed"), [1 2 256])
+%!assert (im2double (uint16 ([0 1 2557]), "indexed"), [1 2 2558])
+%!assert (im2double ([3 25], "indexed"), [3 25])
+%!assert (im2double (single ([3 25]), "indexed"), [3 25])
+
+## Test for ND input
+%!function test_im2double_nd (cls, low, high)
+%!  in = rand (2, 4, 2, 3, 2);
+%!  in *= high - low;
+%!  in += low;
+%!  in = cast (in, cls);
+%!  out = zeros (size (in));
+%!  for n = 1:12
+%!    out(:,:,n) = im2double (in(:,:,n));
+%!  endfor
+%!  assert (im2double (in), out)
+%!endfunction
+
+%!test
+%! test_im2double_nd ("double", 0, 1);
+%! test_im2double_nd ("single", 0, 1);
+%! test_im2double_nd ("uint8", 0, 255);
+%! test_im2double_nd ("uint16", 0, 6535);
+%! test_im2double_nd ("int16", -32768, 32767);
+
+%!error <positive integer floating> im2double (single ([0 1 2]), "indexed");
+%!error <unsigned integer class> im2double (int16 ([17 8]), "indexed");
+%!error <unsigned integer class> im2double (int16 ([-7 8]), "indexed");
+%!error <unsigned integer class> im2double ([false true], "indexed");
+%!error <must be the string "indexed"> im2double ([1 2 3], "non-indexed");
diff --git a/scripts/image/module.mk b/scripts/image/module.mk
--- a/scripts/image/module.mk
+++ b/scripts/image/module.mk
@@ -26,16 +26,17 @@ scripts_image_FCN_FILES = \
   scripts/image/cubehelix.m \
   scripts/image/flag.m \
   scripts/image/gray.m \
   scripts/image/gray2ind.m \
   scripts/image/hot.m \
   scripts/image/hsv.m \
   scripts/image/hsv2rgb.m \
   scripts/image/iscolormap.m \
+  scripts/image/im2double.m \
   scripts/image/image.m \
   scripts/image/imagesc.m \
   scripts/image/imfinfo.m \
   scripts/image/imformats.m \
   scripts/image/imread.m \
   scripts/image/imshow.m \
   scripts/image/imwrite.m \
   scripts/image/ind2gray.m \
