# HG changeset patch
# User dbateman
# Date 1147155318 0
#      Tue May 09 06:15:18 2006 +0000
# Node ID 11fcab4c461db5bac9b8c28333ace57ff1a619f8
# Parent  20f4bd627a748b361cf31a630ad60af00a443d20
[project @ 2006-05-09 06:15:17 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2006-05-09  David Bateman  <dbateman@free.fr>
+
+	* sparse-dmsolve.cc: Remove reference to ov-re-sparse.h,
+	ov-cx-sparse. and error_state.
+	* SparseQR.cc, SparseCmplxQR.cc (qrsolve): Return info = -1 on error.
+	
 2006-05-08  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_SPARSE_MUL): Set column pointers in
 	first pass and use to determine which algorithm to use on a
 	column-by-column basis.
 
 2006-05-04  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -218,35 +218,32 @@ SparseComplexQR::SparseComplexQR_rep::C 
 #else
   return ComplexMatrix ();
 #endif
 }
 
 ComplexMatrix
 qrsolve(const SparseComplexMatrix&a, const Matrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   ComplexMatrix x;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       double _Complex *vec = reinterpret_cast<double _Complex *>
 	(x.fortran_vec());
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, b_nr);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
@@ -274,26 +271,24 @@ qrsolve(const SparseComplexMatrix&a, con
 	  CXSPARSE_ZNAME (_usolve) (q.N()->U, buf);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) (q.S()->q, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_ipvec) (nc, q.S()->Q, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       double _Complex *vec = reinterpret_cast<double _Complex *>
 	(x.fortran_vec());
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_C99_COMPLEX (buf, nbuf);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, b_nr);
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
@@ -327,47 +322,45 @@ qrsolve(const SparseComplexMatrix&a, con
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) (q.S()->pinv, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) (nc, q.S()->Pinv, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
 
   return x;
 #else
   return ComplexMatrix ();
 #endif
 }
 
 SparseComplexMatrix
 qrsolve(const SparseComplexMatrix&a, const SparseMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   SparseComplexMatrix x;
   volatile octave_idx_type ii, x_nz;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
@@ -417,26 +410,24 @@ qrsolve(const SparseComplexMatrix&a, con
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
@@ -491,49 +482,47 @@ qrsolve(const SparseComplexMatrix&a, con
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
 
 ComplexMatrix
 qrsolve(const SparseComplexMatrix&a, const ComplexMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   const double _Complex *bvec = 
     reinterpret_cast<const double _Complex *>(b.fortran_vec());
   ComplexMatrix x;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       double _Complex *vec = reinterpret_cast<double _Complex *>
 	(x.fortran_vec());
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0, bidx = 0; i < b_nc; 
 	   i++, idx+=nc, bidx+=b_nr)
 	{
 	  OCTAVE_QUIT;
@@ -557,26 +546,24 @@ qrsolve(const SparseComplexMatrix&a, con
 	  CXSPARSE_ZNAME (_usolve) (q.N()->U, buf);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_ipvec) (q.S()->q, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_ipvec) (nc, q.S()->Q, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       double _Complex *vec = reinterpret_cast<double _Complex *>
 	(x.fortran_vec());
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_C99_COMPLEX (buf, nbuf);
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	B[i] = conj (reinterpret_cast<Complex *>(q.N()->B) [i]);
@@ -605,47 +592,45 @@ qrsolve(const SparseComplexMatrix&a, con
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_ZNAME (_pvec) (q.S()->pinv, buf, vec + idx, nc);
 #else
 	  CXSPARSE_ZNAME (_pvec) (nc, q.S()->Pinv, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
 
   return x;
 #else
   return ComplexMatrix ();
 #endif
 }
 
 SparseComplexMatrix
 qrsolve(const SparseComplexMatrix&a, const SparseComplexMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   SparseComplexMatrix x;
   volatile octave_idx_type ii, x_nz;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
@@ -695,26 +680,24 @@ qrsolve(const SparseComplexMatrix&a, con
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
       OCTAVE_LOCAL_BUFFER (Complex, B, nr);
@@ -769,16 +752,17 @@ qrsolve(const SparseComplexMatrix&a, con
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -209,36 +209,33 @@ SparseQR::SparseQR_rep::C (const Matrix 
 #else
   return Matrix ();
 #endif
 }
 
 Matrix
 qrsolve(const SparseMatrix&a, const Matrix &b, octave_idx_type& info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   const double *bvec = b.fortran_vec();
   Matrix x;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ()) 
-	{
-	  info = -1;
-	  return Matrix();
-	}
+	return Matrix();
       x.resize(nc, b_nc);
       double *vec = x.fortran_vec();
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0, bidx = 0; i < b_nc; 
 	   i++, idx+=nc, bidx+=b_nr)
 	{
 	  OCTAVE_QUIT;
 	  for (octave_idx_type j = nr; j < q.S()->m2; j++)
@@ -261,26 +258,24 @@ qrsolve(const SparseMatrix&a, const Matr
 	  CXSPARSE_DNAME (_usolve) (q.N()->U, buf);
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_DNAME (_ipvec) (q.S()->q, buf, vec + idx, nc);
 #else
 	  CXSPARSE_DNAME (_ipvec) (nc, q.S()->Q, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return Matrix();
-	}
+	return Matrix();
       x.resize(nc, b_nc);
       double *vec = x.fortran_vec();
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
       for (volatile octave_idx_type i = 0, idx = 0, bidx = 0; i < b_nc; 
 	   i++, idx+=nc, bidx+=b_nr)
 	{
 	  OCTAVE_QUIT;
@@ -304,47 +299,45 @@ qrsolve(const SparseMatrix&a, const Matr
 	  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #if defined(CS_VER) && (CS_VER >= 2)
 	  CXSPARSE_DNAME (_pvec) (q.S()->pinv, buf, vec + idx, nc);
 #else
 	  CXSPARSE_DNAME (_pvec) (nc, q.S()->Pinv, buf, vec + idx);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	}
+      info = 0;
     }
 
   return x;
 #else
   return Matrix ();
 #endif
 }
 
 SparseMatrix
 qrsolve(const SparseMatrix&a, const SparseMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nr = b.rows();
   octave_idx_type b_nc = b.cols();
   SparseMatrix x;
   volatile octave_idx_type ii, x_nz;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ()) 
-	{
-	  info = -1;
-	  return SparseMatrix();
-	}
+	return SparseMatrix();
       x = SparseMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
@@ -390,26 +383,24 @@ qrsolve(const SparseMatrix&a, const Spar
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseMatrix();
-	}
+	return SparseMatrix();
       x = SparseMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
@@ -456,47 +447,45 @@ qrsolve(const SparseMatrix&a, const Spar
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseMatrix ();
 #endif
 }
 
 ComplexMatrix
 qrsolve(const SparseMatrix&a, const ComplexMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nc = b.cols();
   octave_idx_type b_nr = b.rows();
   ComplexMatrix x;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       Complex *vec = x.fortran_vec();
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
 	  OCTAVE_QUIT;
@@ -550,26 +539,24 @@ qrsolve(const SparseMatrix&a, const Comp
 	  CXSPARSE_DNAME (_ipvec) (q.S()->q, buf, Xz, nc);
 #else
 	  CXSPARSE_DNAME (_ipvec) (nc, q.S()->Q, buf, Xz);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    vec[j+idx] = Complex (Xx[j], Xz[j]);
 	}
+      info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return ComplexMatrix();
-	}
+	return ComplexMatrix();
       x.resize(nc, b_nc);
       Complex *vec = x.fortran_vec();
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
 	{
@@ -626,47 +613,45 @@ qrsolve(const SparseMatrix&a, const Comp
 	  CXSPARSE_DNAME (_pvec) (q.S()->pinv, buf, Xz, nc);
 #else
 	  CXSPARSE_DNAME (_pvec) (nc, q.S()->Pinv, buf, Xz);
 #endif
 	  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	  for (octave_idx_type j = 0; j < nc; j++)
 	    vec[j+idx] = Complex (Xx[j], Xz[j]);
 	}
+      info = 0;
     }
 
   return x;
 #else
   return ComplexMatrix ();
 #endif
 }
 
 SparseComplexMatrix
 qrsolve(const SparseMatrix&a, const SparseComplexMatrix &b, octave_idx_type &info)
 {
+  info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows();
   octave_idx_type nc = a.cols();
   octave_idx_type b_nr = b.rows();
   octave_idx_type b_nc = b.cols();
   SparseComplexMatrix x;
   volatile octave_idx_type ii, x_nz;
-  info = 0;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ()) 
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
@@ -741,26 +726,24 @@ qrsolve(const SparseMatrix&a, const Spar
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
-	{
-	  info = -1;
-	  return SparseComplexMatrix();
-	}
+	return SparseComplexMatrix();
       x = SparseComplexMatrix (nc, b_nc, b.nzmax());
       x.xcidx(0) = 0;
       x_nz = b.nzmax();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
@@ -836,16 +819,17 @@ qrsolve(const SparseMatrix&a, const Spar
 		      x_nz = sz;
 		    }
 		  x.xdata(ii) = tmp;
 		  x.xridx(ii++) = j;
 		}
 	    }
 	  x.xcidx(i+1) = ii;
 	}
+      info = 0;
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -18,20 +18,17 @@ Free Software Foundation, Inc., 51 Frank
 Boston, MA 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-
-// FIXME -- liboctave should not be including files from the src directory.
-#include "ov-re-sparse.h"
-#include "ov-cx-sparse.h"
+#include <vector>
 
 #include "MArray2.h"
 #include "MSparse.h"
 #include "SparseQR.h"
 #include "SparseCmplxQR.h"
 #include "MatrixType.h"
 #include "oct-sort.h"
 
@@ -410,31 +407,30 @@ dmsolve (const ST &a, const T &b, octave
 	{
 	  ST m = dmsolve_extract (a, pinv, q, dm->rr [2], nr, dm->cc [3], nc, 
 				  nnz_remaining, true);
 	  nnz_remaining -= m.nnz();
 	  RT mtmp = 
 	    qrsolve (m, dmsolve_extract (btmp, NULL, NULL, dm->rr[2], b_nr, 0,
 					 b_nc), info);
 	  dmsolve_insert (retval, mtmp, q, dm->cc [3], 0);
-	  if (dm->rr [2] > 0 && !info && !error_state)
+	  if (dm->rr [2] > 0 && !info)
 	    {
 	      m = dmsolve_extract (a, pinv, q, 0, dm->rr [2], 
 				   dm->cc [3], nc, nnz_remaining, true);
 	      nnz_remaining -= m.nnz();
 	      RT ctmp = dmsolve_extract (btmp, NULL, NULL, 0, 
 					 dm->rr[2], 0, b_nc);
 	      btmp.insert (ctmp - m * mtmp, 0, 0);
 	    }
 	}
       
       // Structurally non-singular blocks
       // FIXME Should use fine Dulmange-Mendelsohn decomposition here.
-      if (dm->rr [1] < dm->rr [2] && dm->cc [2] < dm->cc [3] && 
-	  !info && !error_state)
+      if (dm->rr [1] < dm->rr [2] && dm->cc [2] < dm->cc [3] && !info)
 	{
 	  ST m = dmsolve_extract (a, pinv, q, dm->rr [1], dm->rr [2], 
 				  dm->cc [2], dm->cc [3], nnz_remaining, false);
 	  nnz_remaining -= m.nnz();
 	  RT btmp2 = dmsolve_extract (btmp, NULL, NULL, dm->rr [1], dm->rr [2], 
 				      0, b_nc);
 	  double rcond = 0.0;
 	  MatrixType mtyp (MatrixType::Full);
@@ -442,29 +438,29 @@ dmsolve (const ST &a, const T &b, octave
 			     solve_singularity_warning, false);	
 	  if (info != 0)
 	    {
 	      info = 0;
 	      mtmp = qrsolve (m, btmp2, info);
 	    }
 
 	  dmsolve_insert (retval, mtmp, q, dm->cc [2], 0);
-	  if (dm->rr [1] > 0 && !info && !error_state)
+	  if (dm->rr [1] > 0 && !info)
 	    {
 	      m = dmsolve_extract (a, pinv, q, 0, dm->rr [1], dm->cc [2],
 				   dm->cc [3], nnz_remaining, true);
 	      nnz_remaining -= m.nnz();
 	      RT ctmp = dmsolve_extract (btmp, NULL, NULL, 0,
 					 dm->rr[1], 0, b_nc);
 	      btmp.insert (ctmp - m * mtmp, 0, 0);
 	    }
 	}
 
       // Trailing under-determined block
-      if (dm->rr [1] > 0 && dm->cc [2] > 0 && !info && !error_state)
+      if (dm->rr [1] > 0 && dm->cc [2] > 0 && !info)
 	{
 	  ST m = dmsolve_extract (a, pinv, q, 0, dm->rr [1], 0, 
 				  dm->cc [2], nnz_remaining, true);
 	  RT mtmp = 
 	    qrsolve (m, dmsolve_extract(btmp, NULL, NULL, 0, dm->rr [1] , 0, 
 					b_nc), info);
 	  dmsolve_insert (retval, mtmp, q, 0, 0);
 	}
