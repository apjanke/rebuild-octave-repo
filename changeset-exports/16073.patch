# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1361396222 18000
#      Wed Feb 20 16:37:02 2013 -0500
# Node ID 1c8234f0b6421404336a6ad0af20a23f131176a2
# Parent  ac672925fc9822ff44d0ac5cb98431eadb0bdf97
Fix bounds-checking in diagonal matrices (bug #38357)

* ov-base-diag.cc (octave_base_diag<DMT, MT>::do_index_op): Call
  checkelem instead of elem in the (scalar, scalar) indexing case.

* index.tst: Add tests.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -104,17 +104,17 @@ octave_base_diag<DMT, MT>::do_index_op (
 
   if (idx.length () == 2 && ! resize_ok)
     {
       idx_vector idx0 = idx(0).index_vector ();
       idx_vector idx1 = idx(1).index_vector ();
 
       if (idx0.is_scalar () && idx1.is_scalar ())
         {
-          retval = matrix.elem (idx0(0), idx1(0));
+          retval = matrix.checkelem (idx0(0), idx1(0));
         }
       else
         {
           octave_idx_type m = idx0.length (matrix.rows ());
           octave_idx_type n = idx1.length (matrix.columns ());
           if (idx0.is_colon_equiv (m) && idx1.is_colon_equiv (n)
               && m <= matrix.rows () && n <= matrix.rows ())
             {
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -205,8 +205,25 @@
 
 %!error (a(1:2,1:2) = 1:4)
 
 %!shared x
 %! x = 1:5;
 %!error <attempted to use a complex scalar as an index> x(i)
 %!error <attempted to use a complex scalar as an index> x(j)
 %!error <attempted to use a complex scalar as an index> x(1+i)
+
+## bug #38357
+%!shared d, dd
+%! d = diag ([1, 2, 3]);
+%! dd = diag ([1, 2, 3], 6, 3);
+%!assert (d(1), 1);
+%!assert (dd(1), 1);
+%!assert (d(3, 3), 3);
+%!assert (dd(3, 3), 3);
+%!assert (d(2), 0);
+%!assert (dd(2), 0);
+%!assert (dd(6,1), 0);
+%!error d(6,6);
+%!error dd(6,6);
+%!error d(3,6);
+%!error dd(3,6);
+
