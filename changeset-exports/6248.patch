# HG changeset patch
# User jwe
# Date 1169486993 0
#      Mon Jan 22 17:29:53 2007 +0000
# Node ID 7fad1fad19e103a49f69e57264dc09895ddbf319
# Parent  7b04118f04df3aa654014a616599aef17e5f942f
[project @ 2007-01-22 17:28:17 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-01-22  David Bateman  <dbateman@free.fr>
+
+	* polynomial/spline.m: Make DG a column instead of a row vector.
+
 2007-01-18  Søren Hauberg  <hauberg@gmail.com>
 
 	* image/ind2rgb.m: Better input checking.  Return 3-d array if
 	nargout is 1.  Handle colormaps that have too few colors.
 
 	* pkg/pkg.m (create_pkgadddel): Call fullfile with nm, not "nm".
 	(configure_make): Use fullfile instead of concatenating with "/".
 
diff --git a/scripts/audio/wavwrite.m b/scripts/audio/wavwrite.m
--- a/scripts/audio/wavwrite.m
+++ b/scripts/audio/wavwrite.m
@@ -13,25 +13,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} wavwrite(@var{filename}, @var{y})
+## @deftypefn {Function File} {} wavwrite (@var{filename}, @var{y})
 ## Write @var{y} to the canonical RIFF/WAVE sound file @var{filename}. A sample 
 ## rate of 8000 Hz and 16-bit samples are assumed. Each column of the data 
 ## represents a separate channel.
 ##
-## @deftypefnx {Function File} {} wavwrite(@var{filename}, @var{y}, @var{fs})
+## @deftypefnx {Function File} {} wavwrite (@var{filename}, @var{y}, @var{fs})
 ## Set the sample rate to @var{fs} Hz.
 ##
-## @deftypefnx {Function File} {} wavwrite(@var{filename}, @var{y}, @var{fs}, @var{bits})
+## @deftypefnx {Function File} {} wavwrite (@var{filename}, @var{y}, @var{fs}, @var{bits})
 ## Set the sample rate to @var{fs} Hz and resolution to @var{bits} bits.
 ## @seealso{wavread}
 ## @end deftypefn
 
 ## Author: Michael Zeising <michael.zeising@stud.uni-erlangen.de>
 ## Created: 06 December 2005
 
 function wavwrite (filename, y, samples_per_sec, bits_per_sample)
diff --git a/scripts/control/util/strappend.m b/scripts/control/util/strappend.m
--- a/scripts/control/util/strappend.m
+++ b/scripts/control/util/strappend.m
@@ -13,17 +13,17 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} strappend (@var{strlist}, @var{suffix})
+## @deftypefn {Function File} {} strappend (@var{strlist}, @var{suffix})
 ## Append string @var{suffix} to each string in the list @var{strlist}.
 ## @end deftypefn
 
 function retval = strappend (strlist, suffix);
 
   if (nargin != 2 || nargout > 1)
     print_usage ();
   elseif (! is_signal_list (strlist))
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {@var{zi}=} interp2 (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@var{Z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@var{Z}, @var{n})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{zi}=} interp2 (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Two-dimensional interpolation. @var{x}, @var{y} and @var{z} describe a
 ## surface function. If @var{x} and @var{y} are vectors their length
-## must correspondent to the size of @var{z}. @var{x} and @var{Yy must be
+## must correspondent to the size of @var{z}. @var{x} and @var{Yy} must be
 ## monotonic. If they are matrices they  must have the @code{meshgrid} 
 ## format. 
 ##
 ## @table @code
 ## @item interp2 (@var{x}, @var{y}, @var{Z}, @var{xi}, @var{yi}, @dots{}) 
 ## Returns a matrix corresponding to the points described by the
 ## matrices  @var{XI}, @var{YI}. 
 ##
diff --git a/scripts/miscellaneous/bunzip2.m b/scripts/miscellaneous/bunzip2.m
--- a/scripts/miscellaneous/bunzip2.m
+++ b/scripts/miscellaneous/bunzip2.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} bunzip2 (@var{bzfile}, @var{dir})
+## @deftypefn {Function File} {} bunzip2 (@var{bzfile}, @var{dir})
 ## Unpack the bzip2 archive @var{bzfile} to the directory @var{dir}. If
 ## @var{dir} is not specified, it defaults to the current directory.
 ## @seealso{unpack, bzip2, tar, untar, gzip, gunzip, zip, unzip}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
 
 function varargout = bunzip2 (files, outputdir)
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -10,17 +10,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; if not, write to the Free Software
 ## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 
 ## -*- texinfo -*-
-## @deftypefn {Command} compare_versions(@var{v1}, @var{v2}, @var{operator})
+## @deftypefn {Function File} {} compare_versions (@var{v1}, @var{v2}, @var{operator})
 ## Compares to version strings using the given @var{operator}.
 ##
 ## This function assumes that versions @var{v1} and @var{v2} are
 ## arbitrarily long strings made of numeric and period characters
 ## possibly followed by an arbitrary string (e.g. "1.2.3", "0.3",
 ## "0.1.2+", or "1.2.3.4-test1").
 ##
 ## The version is first split into the numeric and the character parts
diff --git a/scripts/miscellaneous/gunzip.m b/scripts/miscellaneous/gunzip.m
--- a/scripts/miscellaneous/gunzip.m
+++ b/scripts/miscellaneous/gunzip.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} gunzip (@var{gzfile}, @var{dir})
+## @deftypefn {Function File} {} gunzip (@var{gzfile}, @var{dir})
 ## Unpack the gzip archive @var{gzfile} to the directory @var{dir}. If
 ## @var{dir} is not specified, it defaults to the current directory. If
 ## the @var{gzfile} is a directory, all files in the directory will be
 ## recursively gunzipped.
 ## @seealso{unpack, bzip2, bunzip2, tar, untar, gzip, gunzip, zip, unzip}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
diff --git a/scripts/miscellaneous/list_primes.m b/scripts/miscellaneous/list_primes.m
--- a/scripts/miscellaneous/list_primes.m
+++ b/scripts/miscellaneous/list_primes.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} list_primes (@var{n})
 ## List the first @var{n} primes.  If @var{n} is unspecified, the first
 ## 30 primes are listed.
 ##
 ## The algorithm used is from page 218 of the
 ## @iftex
 ## @tex
-##  \TeXbook.
+##  {\TeX}book.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  TeXbook.
 ## @end ifinfo
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/miscellaneous/untar.m b/scripts/miscellaneous/untar.m
--- a/scripts/miscellaneous/untar.m
+++ b/scripts/miscellaneous/untar.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} untar (@var{tarfile}, @var{dir})
+## @deftypefn {Function File} {} untar (@var{tarfile}, @var{dir})
 ## Unpack the TAR archive @var{tarfile} to the directory @var{dir}.
 ## If @var{dir} is not specified, it defaults to the current directory.
 ## @seealso{unpack, bzip2, bunzip2, tar, gzip, gunzip, zip, unzip}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <hauberg@gmail.com>
 ## Adapted-By: jwe, Bill Denney
 
diff --git a/scripts/miscellaneous/unzip.m b/scripts/miscellaneous/unzip.m
--- a/scripts/miscellaneous/unzip.m
+++ b/scripts/miscellaneous/unzip.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} unzip (@var{zipfile}, @var{dir})
+## @deftypefn {Function File} {} unzip (@var{zipfile}, @var{dir})
 ## Unpack the ZIP archive @var{zipfile} to the directory @var{dir}.
 ## If @var{dir} is not specified, it defaults to the current directory.
 ## @seealso{unpack, bzip2, bunzip2, tar, untar, gzip, gunzip, zip}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <hauberg@gmail.com>
 ## Adapted-By: jwe, Bill Denney
 
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -224,17 +224,17 @@
 ## @item relax (@code{LPX_K_RELAX}, default: 0.07)
 ## Relaxation parameter used in the ratio test. If it is zero, the textbook
 ## ratio test is used. If it is non-zero (should be positive), Harris'
 ## two-pass ratio test is used. In the latter case on the first pass of the
 ## ratio test basic variables (in the case of primal simplex) or reduced
 ## costs of non-basic variables (in the case of dual simplex) are allowed
 ## to slightly violate their bounds, but not more than
 ## @code{relax*tolbnd} or @code{relax*toldj (thus, @code{relax} is a
-## percentage of @code{tolbnd} or @code{toldj}).
+## percentage of @code{tolbnd} or @code{toldj}}.
 ## 
 ## @item tolbnd (@code{LPX_K_TOLBND}, default: 10e-7)
 ## Relative tolerance used to check if the current basic solution is primal
 ## feasible.  It is not recommended that you change this parameter unless you
 ## have a detailed understanding of its purpose.
 ## 
 ## @item toldj (@code{LPX_K_TOLDJ}, default: 10e-7)
 ## Absolute tolerance used to check if the current basic solution is dual
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -30,17 +30,17 @@
 ##
 ## You can concatenate multiple polynomials of the same order over the 
 ## same set of intervals using @code{@var{p} = [ @var{p1}; @var{p2}; 
 ## @dots{}; @var{pd} ]}.  In this case, @code{rows (@var{p}) == @var{d} 
 ## * (length (@var{x}) - 1)}.
 ##
 ## @var{d} specifies the shape of the matrix @var{p} for all except the
 ## last dimension. If @var{d} is not specified it will be computed as
-## @code{round (rows (@var{p}) / (length (@var{x}) - 1)) instead.
+## @code{round (rows (@var{p}) / (length (@var{x}) - 1))} instead.
 ##
 ## @seealso{unmkpp, ppval, spline}
 ## @end deftypefn
 
 function pp = mkpp (x, P, d)
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -169,17 +169,17 @@ function ret = spline (x, y, xi)
       ldg = udg = h(2:n-2);
       udg(1) = udg(1) - h(1);
       ldg(n - 3) = ldg(n-3) - h(n-1);
       c(2:n-1,:) = spdiags ([[ldg(:); 0], dg, [0; udg(:)]],
 			      [-1, 0, 1], n-2, n-2) \ g;
 
     elseif (n == 4)
 
-      dg = [h(1) + 2 * h(2), 2 * h(2) + h(3)];
+      dg = [h(1) + 2 * h(2); 2 * h(2) + h(3)];
       ldg = h(2) - h(3);
       udg = h(2) - h(1);
       c(2:n-1,:) = spdiags ([[ldg(:);0], dg, [0; udg(:)]],
 			      [-1, 0, 1], n-2, n-2) \ g;
       
     else # n == 3
 	    
       dg = h(1) + 2 * h(2);
diff --git a/scripts/set/intersect.m b/scripts/set/intersect.m
--- a/scripts/set/intersect.m
+++ b/scripts/set/intersect.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} intersect(@var{a}, @var{b})
-## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] = } intersect (@var{a}, @var{b})
+## @deftypefn {Function File} {} intersect (@var{a}, @var{b})
+## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} intersect (@var{a}, @var{b})
 ##
 ## Return the elements in both @var{a} and @var{b}, sorted in ascending
 ## order. If @var{a} and @var{b} are both column vectors return a column
 ## vector, otherwise return a row vector.
 ##
 ## Return index vectors @var{ia} and @var{ib} such that @code{a(ia)==c} and
 ## @code{b(ib)==c}.
 ##
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} setdiff (@var{a}, @var{b})
-## @deftypefnx {Function File} {} setdiff(@var{a}, @var{b}, "rows")
+## @deftypefnx {Function File} {} setdiff (@var{a}, @var{b}, "rows")
 ## Return the elements in @var{a} that are not in @var{b}, sorted in
 ## ascending order.  If @var{a} and @var{b} are both column vectors
 ## return a column vector, otherwise return a row vector.
 ##
 ## Given the optional third argument @samp{"rows"}, return the rows in
 ## @var{a} that are not in @var{b}, sorted in ascending order by rows.
 ## @seealso{unique, union, intersect, setxor, ismember}
 ## @end deftypefn
diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {@var{p} =} factor (@var{q})
 ## @deftypefnx {Function File} {[@var{p}, @var{n}] =} factor (@var{q})
 ##
 ## Return prime factorization of @var{q}. That is @code{prod (@var{p})
 ## == @var{q}}. If @code{@var{q} == 1}, returns 1. 
 ##
 ## With two output arguments, returns the uniques primes @var{p} and
 ## their mulyiplicities. That is @code{prod (@var{p} .^ @var{n}) ==
-## @var{q}).
+## @var{q}}.
 ## 
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 
 ## 2002-01-28 Paul Kienzle
 ## * remove recursion; only check existing primes for multiplicity > 1
 ## * return multiplicity as suggested by Dirk Laurie
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -30,17 +30,17 @@
 ##
 ## Some of the properties of Hadamard matrices are:
 ##
 ## @itemize @bullet
 ## @item
 ## @code{kron (@var{Hm}, @var{Hn})} is a Hadamard matrix of size 
 ## @var{m}-by-@var{n}.
 ## @item
-## @code{Hn * Hn' == @var{n) * eye (@var{n})}.
+## @code{Hn * Hn' == @var{n} * eye (@var{n})}.
 ## @item
 ## The rows of @var{Hn} are orthogonal.
 ## @item
 ## @code{det (@var{A}) <= det (@var{Hn})} for all @var{A} with 
 ## @code{abs (@var{A} (@var{i}, @var{j})) <= 1}.
 ## @item
 ## Multiply any row or column by -1 and still have a Hadamard matrix.
 ## @end itemize
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -428,17 +428,17 @@ dispatch_record (const std::string &f, c
 DEFUN_DLD (dispatch, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dispatch (@var{f}, @var{r}, @var{type})\n\
 \n\
 Replace the function @var{f} with a dispatch so that function @var{r}\n\
 is called when @var{f} is called with the first argument of the named\n\
 @var{type}. If the type is @var{any} then call @var{r} if no other type\n\
 matches.  The original function @var{f} is accessible using\n\
-@code{builtin (@var{f}, @dots{}).\n\
+@code{builtin (@var{f}, @dots{})}.\n\
 \n\
 If @var{r} is omitted, clear dispatch function associated with @var{type}.\n\
 \n\
 If both @var{r} and @var{type} are omitted, list dispatch functions\n\
 for @var{f}.\n\
 @seealso{builtin}\n\
 @end deftypefn")
 {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1986,17 +1986,17 @@ of index values.\n\
 DEFUN (subsasgn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} subsasgn (@var{val}, @var{idx}, @var{rhs})\n\
 Perform the subscripted assignment operation according to\n\
 the subscript specified by @var{idx}.\n\
 \n\
 The subscript @var{idx} is expected to be a structure array with\n\
 fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
-are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
+are @samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.\n\
 The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
 of index values.\n\
 @seealso{subsref, substruct}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 3)
