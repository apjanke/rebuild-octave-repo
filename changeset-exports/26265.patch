# HG changeset patch
# User Guillaume Flandin <guillaume.offline@gmail.com>
# Date 1545200677 28800
#      Tue Dec 18 22:24:37 2018 -0800
# Node ID 01f1e70c80b603b3c7bc01387f5781f4e1918bd9
# Parent  25d3e8e49d5cebf269e10788ae252e010e896ead
sortrows.m: Allow sorting of mixed numeric/cellstr cell arrays (bug #42523).

* sortrows.m: If mixed numeric/cellstr cell array then use cell2mat before
calling sort.  Add BIST test for bug #42523.

diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -60,17 +60,17 @@ function [s, i] = sortrows (A, c)
     elseif (any (c == 0) || any (abs (c) > columns (A)))
       error ("sortrows: all elements of C must be in the range [1, columns (A)]");
     endif
   endif
 
   default_mode = "ascend";
   reverse_mode = "descend";
 
-  if (issparse (A))
+  if (issparse (A) || iscell (A))
     ## FIXME: Eliminate this case once __sort_rows_idx__ is fixed to
     ##        handle sparse matrices.
     if (nargin == 1)
       i = sort_rows_idx_generic (default_mode, reverse_mode, A);
     else
       i = sort_rows_idx_generic (default_mode, reverse_mode, A, c);
     endif
   elseif (nargin == 1)
@@ -92,17 +92,17 @@ function [s, i] = sortrows (A, c)
 endfunction
 
 function i = sort_rows_idx_generic (default_mode, reverse_mode, m, c)
 
   if (nargin == 3)
     indices = [1:columns(m)]';
     mode(1:columns(m)) = {default_mode};
   else
-    for j = 1:length (c);
+    for j = 1:length (c)
       if (c(j) < 0)
         mode{j} = reverse_mode;
       else
         mode{j} = default_mode;
       endif
     endfor
     indices = abs (c(:));
   endif
@@ -110,17 +110,21 @@ function i = sort_rows_idx_generic (defa
   ## Since sort is 'stable' the order of identical elements will be
   ## preserved, so by traversing the sort indices in reverse order we
   ## will make sure that identical elements in index i are subsorted by
   ## index j.
   indices = flipud (indices);
   mode = flipud (mode');
   i = [1:rows(m)]';
   for j = 1:length (indices);
-    [~, idx] = sort (m(i, indices(j)), mode{j});
+    M = m(i, indices(j));
+    if (iscell (M) && ! iscellstr (M))
+      M = cell2mat (M);
+    endif
+    [~, idx] = sort (M, mode{j});
     i = i(idx);
   endfor
 
 endfunction
 
 
 %!test
 %! m = [1, 1; 1, 2; 3, 6; 2, 7];
@@ -139,15 +143,22 @@ endfunction
 %! [x, idx] = sortrows (m, c);
 %! [sx, sidx] = sortrows (sparse (m), c);
 %! assert (x, m);
 %! assert (idx, 1);
 %! assert (issparse (sx));
 %! assert (x, full (sx));
 %! assert (idx, sidx);
 
+%!test <*42523>
+%! C = {1, 2, "filename1";
+%!      3, 4, "filename2";
+%!      5, 6, "filename3"};
+%! C2 = sortrows (C, -1);
+%! assert (C2, flipud (C));
+
 ## Test input validation
 %!error sortrows ()
 %!error sortrows (1, 2, 3)
 %!error sortrows (1, "ascend")
 %!error sortrows (1, ones (2,2))
 %!error sortrows (1, 0)
 %!error sortrows (1, 2)
