# HG changeset patch
# User jwe
# Date 1057980701 0
#      Sat Jul 12 03:31:41 2003 +0000
# Node ID 3e48e60a1f8ba0d5e78e41733472e6cb678afbcd
# Parent  af308ca1a354e3b95d283947471a61ecf90d8bf6
[project @ 2003-07-12 03:31:41 by jwe]

diff --git a/scripts/control/base/dgram.m b/scripts/control/base/dgram.m
--- a/scripts/control/base/dgram.m
+++ b/scripts/control/base/dgram.m
@@ -39,11 +39,12 @@
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1995
 
 function m = dgram (a, b)
 
   ## let dlyap do the error checking...
-  m = dlyap(a,b*b');
+
+  m = dlyap (a, b*b');
 
 endfunction
diff --git a/scripts/control/base/freqchkw.m b/scripts/control/base/freqchkw.m
--- a/scripts/control/base/freqchkw.m
+++ b/scripts/control/base/freqchkw.m
@@ -23,21 +23,21 @@
 ## Returns boolean value.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996
 
 function USEW = freqchkw (w)
 
-  if(isempty(w))
+  if (isempty (w))
     USEW = 0;
-  elseif(!isvector(w))
-    error(["w (",num2str(rows(w)),"x",num2str(columns(w)), ...
-      "): must be [], a vector or a scalar"]);
-  elseif( (max(abs(imag(w))) != 0) && (min(real(w)) <= 0) )
-    error("w must have real positive entries");
+  elseif (! isvector (w))
+    error ("w (%dx%d): must be [], a vector or a scalar",
+	   rows (w), columns (w));
+  elseif (max (abs (imag(w))) != 0 && min (real (w)) <= 0)
+    error ("w must have real positive entries");
   else
-    w = sort(w);
-    USEW = 1;   # vector provided (check values later)
+    w = sort (w);
+    USEW = 1;   ## vector provided (check values later)
   endif
 
 endfunction
diff --git a/scripts/control/base/gram.m b/scripts/control/base/gram.m
--- a/scripts/control/base/gram.m
+++ b/scripts/control/base/gram.m
@@ -23,12 +23,13 @@
 ##
 ## @var{m} satisfies @math{a m + m a' + b b' = 0}.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 function m = gram (a, b)
 
-  ## let lyap do the error checking...
-  m = lyap(a,b*b');
+  ## Let lyap do the error checking...
+
+  m = lyap (a, b*b');
 
 endfunction
diff --git a/scripts/control/system/__abcddims__.m b/scripts/control/system/__abcddims__.m
--- a/scripts/control/system/__abcddims__.m
+++ b/scripts/control/system/__abcddims__.m
@@ -25,14 +25,14 @@
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: February 1997
 
 function [y, my, ny] = __abcddims__ (x)
 
   y = x;
-  if(isempty(y))
+  if (isempty (y))
     y = [];
   endif
-  [my,ny] = size(y);
+  [my, ny] = size (y);
 
 endfunction
diff --git a/scripts/control/system/__sysdefstname__.m b/scripts/control/system/__sysdefstname__.m
--- a/scripts/control/system/__sysdefstname__.m
+++ b/scripts/control/system/__sysdefstname__.m
@@ -20,23 +20,23 @@
 ## @deftypefn {Function File} {} __sysdefstname__ (@var{n}, @var{nz})
 ## return default state names given @var{n}, @var{nz}
 ##
 ## used internally, minimal argument checking
 ## @end deftypefn
 
 function stname = __sysdefstname__ (n, nz)
 
-  stname = list();
-  if(n > 0)
+  stname = list ();
+  if (n > 0)
     for ii = 1:n
-      stname(ii) = sprintf("x_%d",ii);
+      stname(ii) = sprintf ("x_%d", ii);
     endfor
   endif
 
   ## Set default names for discrete states
-  if(nz > 0)
+  if (nz > 0)
     for ii = (n+1):(n+nz)
-      stname(ii) = sprintf("xd_%d",ii);
+      stname(ii) = sprintf ("xd_%d", ii);
     endfor
   endif
 
 endfunction
diff --git a/scripts/control/system/__tf2sysl__.m b/scripts/control/system/__tf2sysl__.m
--- a/scripts/control/system/__tf2sysl__.m
+++ b/scripts/control/system/__tf2sysl__.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __tf2sysl__ (@var{vec})
 ## used internally in tf2sys.
 ## strip leading zero coefficients to get the true polynomial length
 ## @end deftypefn
 
 function vec = __tf2sysl__ (vec)
 
-  while( (length(vec) > 1) & (vec(1) == 0) )
-    vec = vec(2:length(vec));
+  while (length (vec) > 1 && vec(1) == 0)
+    vec = vec (2:end);
   endwhile
 
-  if(vec(1) == 0)
-    warning("tf2sys: polynomial has no nonzero coefficients!")
+  if (vec(1) == 0)
+    warning ("tf2sys: polynomial has no nonzero coefficients!")
   endif
 
 endfunction
diff --git a/scripts/control/system/is_sample.m b/scripts/control/system/is_sample.m
--- a/scripts/control/system/is_sample.m
+++ b/scripts/control/system/is_sample.m
@@ -22,11 +22,11 @@
 ## (real,scalar, > 0)
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1995
 
 function out = is_sample (Ts)
 
-  out = (isscalar(Ts) && (Ts == abs(Ts)) && (Ts != 0) );
+  out = (isscalar (Ts) && (Ts == abs (Ts)) && (Ts != 0));
 
 endfunction
diff --git a/scripts/control/system/is_signal_list.m b/scripts/control/system/is_signal_list.m
--- a/scripts/control/system/is_signal_list.m
+++ b/scripts/control/system/is_signal_list.m
@@ -16,21 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_signal_list (@var{mylist})
 ## Return true if @var{mylist} is a list of individual strings.
 ## @end deftypefn
 
-function flg = is_signal_list(mylist)
+function flg = is_signal_list (mylist)
 
-  flg = islist(mylist);
+  flg = islist (mylist);
 
   if (flg)
     for ii = 1:length (mylist)
-      if (! (isstr (nth (mylist,ii)) & rows (nth (mylist,ii)) == 1))
+      if (! (isstr (nth (mylist, ii)) && rows (nth (mylist,ii)) == 1))
 	flg = 0;
       endif
     endfor
   endif
 
 endfunction
diff --git a/scripts/control/system/is_siso.m b/scripts/control/system/is_siso.m
--- a/scripts/control/system/is_siso.m
+++ b/scripts/control/system/is_siso.m
@@ -22,19 +22,19 @@
 ## @var{sys} is single-input, single-output.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996, 1998
 
 function  SISO = is_siso (sys)
 
-  if(nargin != 1)
-    usage("SISO = is_siso(sys)");
-  elseif( !isstruct(sys))
-    error("input must be a system structure (see ss2sys, tf2sys, zp2sys)");
+  if (nargin != 1)
+    usage ("SISO = is_siso (sys)");
+  elseif (! isstruct (sys))
+    error ("input must be a system structure (see ss2sys, tf2sys, zp2sys)");
   endif
 
-  [n,nz,m,p] = sysdimensions(sys);
+  [n, nz, m, p] = sysdimensions (sys);
 
-  SISO = (m == 1 & p == 1);
+  SISO = (m == 1 && p == 1);
 
 endfunction
diff --git a/scripts/control/system/sys2fir.m b/scripts/control/system/sys2fir.m
--- a/scripts/control/system/sys2fir.m
+++ b/scripts/control/system/sys2fir.m
@@ -26,27 +26,28 @@
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996
 
 function [c, tsam, inname, outname] = sys2fir (sys)
 
   ## let sys2tf do most of the work
 
-  [num,den,tsam,inname,outname] = sys2tf(sys);
+  [num, den, tsam, inname, outname] = sys2tf (sys);
 
   alph = den(1);                        # scale to get monic denominator
-  den = den/alph;
-  num = num/alph;
-  l = length(den);
-  m = length(num);
-  if( norm(den(2:l)) )
-    sysout(sys,"tf");
-    error("denominator has poles away from origin");
-  elseif( !is_digital(sys) )
-    error("system must be discrete-time to be FIR");
-  elseif(m != l)
-    warning(["sys2fir: deg(num) - deg(den) = ",num2str(m-l), ...
-        "; coefficients must be shifted"]);
+  den /= alph;
+  num /= alph;
+  l = length (den);
+  m = length (num);
+  if (norm (den(2:l)))
+    sysout (sys, "tf");
+    error ("denominator has poles away from origin");
+  elseif (! is_digital (sys))
+    error ("system must be discrete-time to be FIR");
+  elseif (m != l)
+    warning ("sys2fir: deg(num) - deg(den) = %d; coefficients must be shifted",
+	     m-l);
   endif
   c = num;
+
 endfunction
 
diff --git a/scripts/control/system/syschtsam.m b/scripts/control/system/syschtsam.m
--- a/scripts/control/system/syschtsam.m
+++ b/scripts/control/system/syschtsam.m
@@ -23,28 +23,28 @@
 ## @end deftypefn
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: August 1996
 
 function retsys = syschtsam (sys, tsam)
 
   if (nargin != 2)
-    usage("retsys = syschtsam(sys,tsam)");
-  elseif (!isstruct(sys))
-    error("sys must be in system data structure form");
-  elseif(!isscalar(tsam))
-    disp("syschtsam:")
+    usage ("retsys = syschtsam (sys, tsam)");
+  elseif (! isstruct (sys))
+    error ("sys must be in system data structure form");
+  elseif (! isscalar (tsam))
+    disp ("syschtsam:")
     tsam
-    error("tsam must be a scalar")
-  elseif ( ! (is_sample(tsam) | (tsam == 0) ) )
-    error("tsam must be real, scalar, and greater than zero");
-  elseif (sysgettsam(sys) == 0)
-    [nc,nz,mm,pp] = sysdimensions(sys);
-    warning("syschtsam: continuous system (nc=%d, nz=%d, mm=%d, pp=%d)", ...
-      nc,nz,mm,pp);
-    warning("syschtsam: The system is continuous, use c2d to make the system discrete");
+    error ("tsam must be a scalar")
+  elseif (! (is_sample (tsam) || tsam <= 0))
+    error ("tsam must be real, scalar, and greater than zero");
+  elseif (sysgettsam (sys) == 0)
+    [nc, nz, mm, pp] = sysdimensions (sys);
+    warning ("syschtsam: continuous system (nc=%d, nz=%d, mm=%d, pp=%d)",
+	     nc, nz, mm, pp);
+    warning ("syschtsam: The system is continuous, use c2d to make the system discrete");
   endif
 
   retsys = sys;
   retsys.tsam = tsam;
 
 endfunction
diff --git a/scripts/control/system/sysgettsam.m b/scripts/control/system/sysgettsam.m
--- a/scripts/control/system/sysgettsam.m
+++ b/scripts/control/system/sysgettsam.m
@@ -18,15 +18,15 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sysgettsam (@var{sys})
 ## Return the sampling time of the system @var{sys}.
 ## @end deftypefn
 
 function T = sysgettsam (sys)
 
-  if(!isstruct(sys))
-    usage("T = sysgettsam(sys)");
+  if (! isstruct (sys))
+    usage ("T = sysgettsam (sys)");
   endif
 
   T = sys.tsam;
 
 endfunction
diff --git a/scripts/control/system/sysgettype.m b/scripts/control/system/sysgettype.m
--- a/scripts/control/system/sysgettype.m
+++ b/scripts/control/system/sysgettype.m
@@ -28,15 +28,16 @@
 ## constructed:
 ## values: @code{"ss"}, @code{"zp"}, or @code{"tf"}
 ##
 ## @strong{Note} FIR initialized systems return @code{systype="tf"}.
 ## @end deftypefn
 
 function systype = sysgettype (sys)
 
-  if(!isstruct(sys))
-    error("sysgettype: input sys is not a structure");
+  if (! isstruct (sys))
+    error ("sysgettype: input sys is not a structure");
   endif
 
-  typestr = list("tf","zp","ss");
-  systype = nth(typestr,sys.sys(1) + 1);
+  typestr = list ("tf", "zp", "ss");
+  systype = nth (typestr, sys.sys(1) + 1);
+
 endfunction
diff --git a/scripts/control/system/tf2zp.m b/scripts/control/system/tf2zp.m
--- a/scripts/control/system/tf2zp.m
+++ b/scripts/control/system/tf2zp.m
@@ -23,20 +23,28 @@
 ## [zer,pol,k] = tf2zp(num,den) returns the zeros and poles of the SISO system
 ## defined by num/den.  K is a gain associated with the system zeros.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 function [zer, pol, k] = tf2zp (num, den)
 
-  if(nargin == 2)
-    if(length(den) > 1)          pol = roots(den);
-    else                         pol=[];                   endif
-    if(length(num) > 1)         zer = roots(num);
-    else                        zer=[];                    endif
-  else                    error("Incorrect number of input arguments");
+  if (nargin == 2)
+    if (length (den) > 1)
+      pol = roots (den);
+    else
+      pol = [];
+    endif
+
+    if (length (num) > 1)
+      zer = roots (num);
+    else
+      zer = [];
+    endif
+  else
+    error ("Incorrect number of input arguments");
   endif
 
-  [a,b,c,d] = tf2ss(num,den);
-  [dum,k] = tzero(a,b,c,d);
+  [a, b, c, d] = tf2ss (num, den);
+  [dum, k] = tzero (a, b, c, d);
 
 endfunction
diff --git a/scripts/control/system/ugain.m b/scripts/control/system/ugain.m
--- a/scripts/control/system/ugain.m
+++ b/scripts/control/system/ugain.m
@@ -26,14 +26,14 @@
 ## @end deftypefn
 ## @seealso{hinfdemo and jet707}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: April 1998
 
 function outsys = ugain (n)
 
-  if((nargin != 1) || (nargout > 1))
-    usage("outsys = ugain(n)")
+  if (nargin != 1 || nargout > 1)
+    usage ("outsys = ugain(n)");
   endif
-  outsys = ss2sys([],[],[],eye(n));
+  outsys = ss2sys ([], [], [], eye (n));
 
 endfunction
diff --git a/scripts/control/util/prompt.m b/scripts/control/util/prompt.m
--- a/scripts/control/util/prompt.m
+++ b/scripts/control/util/prompt.m
@@ -26,21 +26,21 @@
 ## @end deftypefn
 
 ## Author: David Clem
 ## Created: August 15, 1994
 ## Modified A. S. Hodel June 1995
 
 function prompt (str)
 
-  if(nargin > 1)
-    usage("prompt([str])");
-  elseif(nargin == 0)
+  if (nargin > 1)
+    usage ("prompt ([str])");
+  elseif (nargin == 0)
     str = "\n ---- Press a key to continue ---";
-  elseif ( !isstr(str) )
-    error("prompt: input must be a string");
+  elseif (! isstr (str) )
+    error ("prompt: input must be a string");
   endif
 
-  disp(str);
-  fflush(stdout);
-  kbhit;
+  disp (str);
+  fflush (stdout);
+  kbhit ();
 
 endfunction
diff --git a/scripts/control/util/run_cmd.m b/scripts/control/util/run_cmd.m
--- a/scripts/control/util/run_cmd.m
+++ b/scripts/control/util/run_cmd.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## run_cmd: short script used in demos
 ## prints string cmd to the screen, then executes after a pause
 
-disp(["Command: ",cmd])
-puts("Press a key to execute command");
-fflush(stdout);
-kbhit();
-disp("  executing");
-fflush(stdout);
-eval(cmd);
-disp("---")
-disp(" ")
+disp (["Command: ", cmd])
+puts ("Press a key to execute command");
+fflush (stdout);
+kbhit ();
+disp ("  executing");
+fflush (stdout);
+eval (cmd);
+disp ("---")
+disp (" ")
diff --git a/scripts/control/util/zgrownorm.m b/scripts/control/util/zgrownorm.m
--- a/scripts/control/util/zgrownorm.m
+++ b/scripts/control/util/zgrownorm.m
@@ -21,16 +21,16 @@
 ## Return @var{nonz} = number of rows of @var{mat} whose two norm
 ## exceeds @var{meps}, and @var{zer} = number of rows of mat whose two
 ## norm is less than @var{meps}.
 ## @end deftypefn
 
 function [sig, tau] = zgrownorm (mat, meps)
 
   rownorm = [];
-  for ii=1:rows(mat)
-    rownorm(ii) = norm(mat(ii,:));
+  for ii = 1:rows (mat)
+    rownorm(ii) = norm (mat(ii,:));
   endfor
-  sig = sum(rownorm > meps);
-  tau = sum(rownorm <= meps);
+  sig = sum (rownorm > meps);
+  tau = sum (rownorm <= meps);
 
 endfunction
 
diff --git a/scripts/control/util/zgshsr.m b/scripts/control/util/zgshsr.m
--- a/scripts/control/util/zgshsr.m
+++ b/scripts/control/util/zgshsr.m
@@ -24,22 +24,23 @@
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 24, 1992
 ## Conversion to Octave by R. Bruce Tenison July 3, 1994
 
 function x = zgshsr (y)
 
-  if(!isvector(y))
-    error(sprintf("y(%dx%d) must be a vector",rows(y),columns(y)));
+  if (! isvector (y))
+    error (sprintf ("y(%dx%d) must be a vector", rows (y), columns (y)));
   endif
-  x = vec(y);
-  m = length(x);
-  if (m>1)
-    beta = (1 + sqrt(m))*x(1) + sum(x(2:m));
-    beta = beta/(m+sqrt(m));
-    x(1) = x(1) - beta*(1.0d0+sqrt(m));
-    x(2:m) = x(2:m) - beta*ones(m-1,1);
+  x = vec (y);
+  m = length (x);
+  if (m > 1)
+    beta = (1 + sqrt (m)) * x(1) + sum (x(2:m));
+    beta /= (m + sqrt (m));
+    x(1) -= (beta * (1 + sqrt (m)));
+    x(2:m) -= (beta * ones (m-1,1));
   else
     x = -x;
   endif
+
 endfunction
