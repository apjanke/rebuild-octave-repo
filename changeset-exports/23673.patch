# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498069427 14400
#      Wed Jun 21 14:23:47 2017 -0400
# Node ID 1d1ce4df5255492061c63d573153861819ea1e2c
# Parent  3037e865dee1994b9fba57ecf046876be315f08f
refactor bison rules for parsing functions

* parse.h, oct-parse.in.yy: Expect 9 shift/reduce errors.
(base_parser::make_function): New function.
(function1, function1): Combine non-terminal rules with function rule.
(opt_param_list): New non-terminal.
(function): Combine rules as much as possible.  Move all processing to
make_function.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -106,20 +106,20 @@ static void yyerror (octave::base_parser
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wold-style-cast"
 #endif
 
 %}
 
 // Bison declarations.
 
-// The grammar currently has 8 shift/reduce conflicts.  Ensure that
+// The grammar currently has 9 shift/reduce conflicts.  Ensure that
 // we notice if that number changes.
 
-%expect 8
+%expect 9
 
 %API_PREFIX_DECL%
 
 // We are using the pure parser interface and the reentrant lexer
 // interface but the Octave parser and lexer are NOT properly
 // reentrant because both still use many global variables.  It should be
 // safe to create a parser object and call it while anotehr parser
 // object is active (to parse a callback function while the main
@@ -243,21 +243,21 @@ static void yyerror (octave::base_parser
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows
 %type <tree_cell_type> cell_rows
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr power_expr expr_no_assign
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier fcn_name magic_tilde
 %type <tree_funcall_type> superclass_identifier meta_identifier
-%type <octave_user_function_type> function1 function2
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
-%type <tree_parameter_list_type> param_list param_list1 param_list2
+%type <tree_parameter_list_type> opt_param_list param_list
+%type <tree_parameter_list_type> param_list1 param_list2
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
 %type <tree_command_type> jump_command except_command
 %type <tree_function_def_type> function
 %type <tree_classdef_type> classdef
 %type <tree_command_type> file
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
@@ -1315,16 +1315,22 @@ param_list_beg  : '('
 param_list_end  : ')'
                   {
                     $$ = 0;
                     lexer.looking_at_parameter_list = false;
                     lexer.looking_for_object_index = false;
                   }
                 ;
 
+opt_param_list  : // empty
+                  { $$ = 0; }
+                | param_list
+                  { $$ = $1; }
+                ;
+
 param_list      : param_list_beg param_list1 param_list_end
                   {
                     if ($2)
                       lexer.mark_as_variables ($2->variable_names ());
 
                     $$ = $2;
                   }
                 | param_list_beg error
@@ -1479,32 +1485,16 @@ function_beg    : push_fcn_symtab FCN
                   {
                     $$ = $2;
                     if (lexer.reading_classdef_file
                         || lexer.parsing_classdef)
                       lexer.maybe_classdef_get_set_method = true;
                   }
                 ;
 
-function        : function_beg stash_comment function1
-                  {
-                    $$ = parser.finish_function (0, $3, $2, $1->line (),
-                                                 $1->column ());
-                    parser.recover_from_parsing_function ();
-                  }
-                | function_beg stash_comment return_list '=' function1
-                  {
-                    YYUSE ($4);
-
-                    $$ = parser.finish_function ($3, $5, $2, $1->line (),
-                                                 $1->column ());
-                    parser.recover_from_parsing_function ();
-                  }
-                ;
-
 fcn_name        : identifier
                   {
                     std::string id = $1->name ();
 
                     if (! parser.function_scopes.name_current_scope (id))
                       {
                         parser.bison_error ("duplicate subfunction or nested function name",
                                             $1->line (), $1->column ());
@@ -1538,48 +1528,16 @@ fcn_name        : identifier
 
                     lexer.parsed_function_name.top () = true;
                     lexer.maybe_classdef_get_set_method = false;
                     lexer.parsing_classdef_set_method = true;
                     $$ = $3;
                   }
                 ;
 
-function1       : fcn_name function2
-                  {
-                    std::string fname = $1->name ();
-
-                    delete $1;
-
-                    if (lexer.parsing_classdef_get_method)
-                      fname.insert (0, "get.");
-                    else if (lexer.parsing_classdef_set_method)
-                      fname.insert (0, "set.");
-
-                    lexer.parsing_classdef_get_method = false;
-                    lexer.parsing_classdef_set_method = false;
-
-                    $$ = parser.frob_function (fname, $2);
-                  }
-                ;
-
-function2       : param_list opt_sep opt_list function_end
-                  {
-                    YYUSE ($2);
-
-                    $$ = parser.start_function ($1, $3, $4);
-                  }
-                | opt_sep opt_list function_end
-                  {
-                    YYUSE ($1);
-
-                    $$ = parser.start_function (0, $2, $3);
-                  }
-                ;
-
 function_end    : END
                   {
                     parser.endfunction_found = true;
 
                     if (parser.end_token_ok ($1, octave::token::function_end))
                       $$ = parser.make_end ("endfunction", false,
                                             $1->line (), $1->column ());
                     else
@@ -1619,16 +1577,33 @@ function_end    : END
                       }
 
                     $$ = parser.make_end ("endfunction", true,
                                           lexer.input_line_number,
                                           lexer.current_input_column);
                   }
                 ;
 
+function        : function_beg stash_comment fcn_name
+                  opt_param_list opt_sep opt_list function_end
+                  {
+                    YYUSE ($5);
+
+                    $$ = parser.make_function ($1, 0, $3, $4, $6, $7, $2);
+                  }
+                | function_beg stash_comment return_list '=' fcn_name
+                  opt_param_list opt_sep opt_list function_end
+                  {
+                    YYUSE ($4);
+                    YYUSE ($7);
+
+                    $$ = parser.make_function ($1, $3, $5, $6, $8, $9, $2);
+                  }
+                ;
+
 // ========
 // Classdef
 // ========
 
 classdef_beg    : CLASSDEF
                   {
                     if (! lexer.reading_classdef_file)
                       {
@@ -3241,25 +3216,68 @@ namespace octave
 
     octave::sys::time now;
 
     script->stash_fcn_file_time (now);
 
     primary_fcn_ptr = script;
   }
 
+  // Define a function.
+
+  // FIXME: combining start_function, finish_function, and
+  // recover_from_parsing_function should be possible, but it makes
+  // for a large mess.  Maybe this could be a bit better organized?
+
+  tree_function_def *
+  base_parser::make_function (token *fcn_tok,
+                              tree_parameter_list *ret_list,
+                              tree_identifier *id,
+                              tree_parameter_list *param_list,
+                              tree_statement_list *body,
+                              tree_statement *end_fcn_stmt,
+                              octave_comment_list *lc)
+  {
+    tree_function_def *retval = 0;
+
+    int l = fcn_tok->line ();
+    int c = fcn_tok->column ();
+
+    octave_user_function *tmp_fcn
+      = start_function (id, param_list, body, end_fcn_stmt);
+
+    retval = finish_function (ret_list, tmp_fcn, lc, l, c);
+
+    recover_from_parsing_function ();
+
+    return retval;
+  }
+
   // Begin defining a function.
 
   octave_user_function *
-  base_parser::start_function (tree_parameter_list *param_list,
+  base_parser::start_function (tree_identifier *id,
+                               tree_parameter_list *param_list,
                                tree_statement_list *body,
                                tree_statement *end_fcn_stmt)
   {
     // We'll fill in the return list later.
 
+    std::string id_name = id->name ();
+
+    delete id;
+
+    if (lexer.parsing_classdef_get_method)
+      id_name.insert (0, "get.");
+    else if (lexer.parsing_classdef_set_method)
+      id_name.insert (0, "set.");
+
+    lexer.parsing_classdef_get_method = false;
+    lexer.parsing_classdef_set_method = false;
+
     if (! body)
       body = new tree_statement_list ();
 
     body->append (end_fcn_stmt);
 
     octave_user_function *fcn
       = new octave_user_function (lexer.symtab_context.curr_scope (),
                                   param_list, 0, body);
@@ -3268,33 +3286,16 @@ namespace octave
       {
         octave_comment_list *tc = lexer.comment_buf.get_comment ();
 
         fcn->stash_trailing_comment (tc);
         fcn->stash_fcn_end_location (end_fcn_stmt->line (),
                                      end_fcn_stmt->column ());
       }
 
-    return fcn;
-  }
-
-  tree_statement *
-  base_parser::make_end (const std::string& type, bool eof, int l, int c)
-  {
-    return make_statement (new tree_no_op_command (type, eof, l, c));
-  }
-
-  // Do most of the work for defining a function.
-
-  octave_user_function *
-  base_parser::frob_function (const std::string& fname,
-                              octave_user_function *fcn)
-  {
-    std::string id_name = fname;
-
     // If input is coming from a file, issue a warning if the name of
     // the file does not match the name of the function stated in the
     // file.  Matlab doesn't provide a diagnostic (it ignores the stated
     // name).
     if (! autoloading && lexer.reading_fcn_file
         && curr_fcn_depth == 1 && ! parsing_subfunctions)
       {
         // FIXME: should lexer.fcn_file_name already be
@@ -3381,16 +3382,22 @@ namespace octave
 
     if (lexer.reading_fcn_file && curr_fcn_depth == 1
         && ! parsing_subfunctions)
       primary_fcn_ptr = fcn;
 
     return fcn;
   }
 
+  tree_statement *
+  base_parser::make_end (const std::string& type, bool eof, int l, int c)
+  {
+    return make_statement (new tree_no_op_command (type, eof, l, c));
+  }
+
   tree_function_def *
   base_parser::finish_function (tree_parameter_list *ret_list,
                                 octave_user_function *fcn,
                                 octave_comment_list *lc,
                                 int l, int c)
   {
     tree_function_def *retval = 0;
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -271,27 +271,34 @@ namespace octave
     // Build an assignment to a variable.
     tree_expression *
     make_assign_op (int op, tree_argument_list *lhs, token *eq_tok,
                     tree_expression *rhs);
 
     // Define a script.
     void make_script (tree_statement_list *cmds, tree_statement *end_script);
 
+    // Define a function.
+    tree_function_def *
+    make_function (token *fcn_tok, tree_parameter_list *ret_list,
+                   tree_identifier *id, tree_parameter_list *param_list,
+                   tree_statement_list *body, tree_statement *end_fcn_stmt,
+                   octave_comment_list *lc);
+
     // Begin defining a function.
     octave_user_function *
-    start_function (tree_parameter_list *param_list, tree_statement_list *body,
-                    tree_statement *end_function);
+    start_function (tree_identifier *id, tree_parameter_list *param_list,
+                    tree_statement_list *body, tree_statement *end_function);
 
     // Create a no-op statement for end_function.
     tree_statement * make_end (const std::string& type, bool eof, int l, int c);
 
     // Do most of the work for defining a function.
     octave_user_function *
-    frob_function (const std::string& fname, octave_user_function *fcn);
+    frob_function (tree_identifier *id, octave_user_function *fcn);
 
     // Finish defining a function.
     tree_function_def *
     finish_function (tree_parameter_list *ret_list,
                      octave_user_function *fcn, octave_comment_list *lc,
                      int l, int c);
 
     // Reset state after parsing function.
