# HG changeset patch
# User pantxo <pantxo.diribarne@gmail.com>
# Date 1392043198 -3600
#      Mon Feb 10 15:39:58 2014 +0100
# Node ID 650e5d50cd4787917cca0d7779772d1c0352a91a
# Parent  dc47c9e48801d71f367a11487bc2081b91bbd337
Report ARPACK error strings instead of error number (bug #41372).

* eigs-base.cc (arpack_errno2str): New function which converts errno to a
string.
* eigs-base.cc: Report error strings after every call to xxxupd.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -52,16 +52,170 @@ static void
 warn_convergence (void)
 {
   (*current_liboctave_warning_with_id_handler)
     ("Octave:convergence",
      "eigs: 'A - sigma*B' is singular, indicating sigma is exactly "
      "an eigenvalue so convergence is not guaranteed");
 }
 
+// Conversion from error number to strings
+std::string 
+arpack_errno2str (const octave_idx_type& errnum, const std::string& fcn_name)
+{
+  std::string msg;
+  std::string bug_msg = "\nThis should not happen.  Please, see https://www.gnu.org/software/octave/bugs.html, and file a bug report";
+
+  switch (errnum)
+    {
+    case -1:
+      msg = "N must be positive";
+      break;
+
+    case -2:
+      msg = "NEV must be positive";
+      break;
+
+    case -3:
+      msg = "NCV-NEV >= 2 and less than or equal to N";
+      break;
+
+    case -4:
+      msg = "The maximum number of Arnoldi update iterations allowed must be greater than zero";
+      break;
+
+    case -5:
+      msg = "WHICH must be one of 'LM', 'SM', 'LR', 'SR', 'LI', 'SI'";
+      break;
+
+    case -6:
+      msg = "BMAT must be one of 'I' or 'G'";
+      break;
+
+    case -7:
+      msg = "Length of private work WORKL array is insufficient";
+      break;
+
+    case -8:
+      msg = "Error return from LAPACK eigenvalue calculation";
+      break;
+
+    case -9:
+      if (fcn_name.compare ("zneupd") == 0)
+        msg = "Error return from calculation of eigenvectors.  Informational error from LAPACK routine ztrevc";
+      else if (fcn_name.compare ("dneupd") == 0)
+        msg = "Error return from calculation of eigenvectors.  Informational error from LAPACK routine dtrevc";
+      else
+        msg = "Starting vector is zero";
+
+      break;
+
+    case -10:
+      if (fcn_name.compare ("dneupd") == 0 ||
+          fcn_name.compare ("dnaupd") == 0)
+        msg = "IPARAM(7) must be 1,2,3,4";
+      else if (fcn_name.compare ("zneupd") == 0 ||
+               fcn_name.compare ("znaupd") == 0)
+        msg = "IPARAM(7) must be 1,2,3";
+      else
+        msg = "IPARAM(7) must be 1,2,3,4,5";
+
+      break;
+
+    case -11:
+      msg = "IPARAM(7) = 1 and BMAT = 'G' are incompatible";
+      break;
+
+    case -12:
+      if (fcn_name.compare ("dnaupd") == 0 || 
+          fcn_name.compare ("znaupd") == 0 ||
+          fcn_name.compare ("dsaupd") == 0)
+        msg = std::string ("IPARAM(1) must be equal to 0 or 1");
+      else if (fcn_name.compare ("dneupd") == 0 ||
+               fcn_name.compare ("zneupd") == 0)
+        msg = "HOWMNY = 'S' not yet implemented";
+      else
+        msg = "NEV and WHICH = 'BE' are incompatible";
+      
+      break;
+
+    case -13:
+      if (fcn_name.compare ("dneupd") == 0 || 
+          fcn_name.compare ("zneupd") == 0)
+        msg = "HOWMNY must be one of 'A' or 'P' if RVEC = .true.";
+      else if (fcn_name.compare ("dsaupd") == 0)
+        msg = "NEV and WHICH = 'BE' are incompatible";
+      
+      break;
+
+    case -14:
+      if (fcn_name.compare ("dneupd") == 0)
+        msg = "DNAUPD did not find any eigenvalues to sufficient accuracy.";
+      else if (fcn_name.compare ("zneupd") == 0)
+        msg = "ZNAUPD did not find any eigenvalues to sufficient accuracy.";
+      else if (fcn_name.compare ("dseupd") == 0)
+        msg = "DSAUPD did not find any eigenvalues to sufficient accuracy.";
+      
+      break;
+
+    case -15:
+      if (fcn_name.compare ("dseupd") == 0)
+        msg = "HOWMNY must be one of 'A' or 'S' if RVEC = .true.";
+      
+      break;
+
+    case -16:
+      if (fcn_name.compare ("dseupd") == 0)
+        msg = "HOWMNY = 'S' not yet implemented";
+      
+      break;
+
+    case -9999:
+      if (fcn_name.compare ("dnaupd") == 0)
+        msg = "Could not build an Arnoldi factorization.  IPARAM(5) returns the size of the current Arnoldi factorization";
+      
+      break;
+
+    case 1:
+      if (fcn_name.compare ("dneupd") == 0)
+        msg = "The Schur form computed by LAPACK routine dlahqr could not be reordered by LAPACK routine dtrsen.  Re-enter subroutine DNEUPD with IPARAM(5)=NCV and increase the size of the arrays DR and DI to have dimension at least dimension NCV and allocate at least NCV columns for Z.  NOTE: Not necessary if Z and V share the same space.  Please notify the authors if this error occurs.";
+      else if (fcn_name.compare ("dnaupd") == 0 || 
+               fcn_name.compare ("znaupd") == 0 ||
+               fcn_name.compare ("dsaupd") == 0)
+        msg = "Maximum number of iterations taken.  All possible eigenvalues of OP has been found.  IPARAM(5) returns the number of wanted converged Ritz values";
+      else if (fcn_name.compare ("znaupd") == 0)
+        msg = "The Schur form computed by LAPACK routine csheqr could not be reordered by LAPACK routine ztrsen.  Re-enter subroutine ZNEUPD with IPARAM(5)=NCV and increase the size of the array D to have dimension at least dimension NCV and allocate at least NCV columns for Z.  NOTE: Not necessary if Z and V share the same space.  Please notify the authors if this error occurs.";
+      
+      break;
+
+    case 2:
+      if (fcn_name.compare ("dnaupd") == 0 || 
+          fcn_name.compare ("znaupd") == 0 ||
+          fcn_name.compare ("dsaupd") == 0)
+        msg = "No longer an informational error.  Deprecated starting with release 2 of ARPACK.";
+      
+      break;
+
+    case 3:
+      if (fcn_name.compare ("dnaupd") == 0 || 
+          fcn_name.compare ("znaupd") == 0 ||
+          fcn_name.compare ("dsaupd") == 0)
+        msg = "No shifts could be applied during a cycle of the implicitly restarted Arnoldi iteration.  One possibility is to increase the size of NCV relative to NEV.";
+      
+      break;
+
+    }
+  
+  if ((errno != -9) & (errno != -14) & (errno != -9999))
+    // This is a bug in Octave interface to ARPACK
+    msg.append (bug_msg);
+
+  return msg;
+}
+
 template <typename M, typename SM>
 static octave_idx_type
 lusolve (const SM& L, const SM& U, M& m)
 {
   octave_idx_type err = 0;
   double rcond;
   MatrixType utyp (MatrixType::Upper);
 
@@ -404,17 +558,17 @@ LuAminusSigmaB (const Matrix& m, const M
 
           for (octave_idx_type i = 0; i < n; i++)
             p[i*(n+1)] -= sigma;
         }
     }
 
   octave::math::lu<Matrix> fact (AminusSigmaB);
 
-  L = fact. L ();
+  L = fact.L ();
   U = fact.U ();
   ColumnVector P2 = fact.P_vec();
 
   for (octave_idx_type j = 0; j < n; j++)
     {
       Q[j] = j;
       P[j] = P2(j) - 1;
       r(j) = 1.;
@@ -821,17 +975,18 @@ EigsRealSymmetricMatrix (const M& m, con
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dsaupd", info);
+              ("eigs: error in dsaupd: %s", 
+               arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -904,18 +1059,20 @@ EigsRealSymmetricMatrix (const M& m, con
                 }
             }
 
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dseupd", info2);
-
+    (*current_liboctave_error_handler)
+      ("eigs: error in dseupd: %s", 
+       arpack_errno2str (info2, "dseupd").c_str ());
+      
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealSymmetricMatrixShift (const M& m, double sigma,
                               octave_idx_type k_arg, octave_idx_type p_arg,
                               octave_idx_type& info, Matrix& eig_vec,
@@ -1130,17 +1287,18 @@ EigsRealSymmetricMatrixShift (const M& m
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dsaupd", info);
+              ("eigs: error in dsaupd: %s", 
+               arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -1204,17 +1362,19 @@ EigsRealSymmetricMatrixShift (const M& m
                 z[off1 + j] = z[off2 + j];
 
               for (F77_INT j = 0; j < n; j++)
                 z[off2 + j] = dtmp[j];
             }
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dseupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in dseupd: %s", 
+       arpack_errno2str (info2, "dseupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealSymmetricFunc (EigsFunc fun, octave_idx_type n_arg,
                        const std::string& _typ, double sigma,
@@ -1500,17 +1660,18 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dsaupd", info);
+              ("eigs: error in dsaupd: %s", 
+               arpack_errno2str (info, "dsaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -1582,17 +1743,19 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
                     z[off2 + j] = dtmp[j];
                 }
             }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
          }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dseupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in dseupd: %s", 
+       arpack_errno2str (info2, "dseupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricMatrix (const M& m, const std::string typ,
                             octave_idx_type k_arg, octave_idx_type p_arg,
@@ -1793,17 +1956,18 @@ EigsRealNonSymmetricMatrix (const M& m, 
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dnaupd", info);
+              ("eigs: error in dnaupd: %s", 
+               arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -1933,17 +2097,19 @@ EigsRealNonSymmetricMatrix (const M& m, 
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dneupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in dneupd: %s", 
+       arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricMatrixShift (const M& m, double sigmar,
                                  octave_idx_type k_arg, octave_idx_type p_arg,
@@ -2166,17 +2332,18 @@ EigsRealNonSymmetricMatrixShift (const M
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dnaupd", info);
+              ("eigs: error in dnaupd: %s", 
+               arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -2305,17 +2472,19 @@ EigsRealNonSymmetricMatrixShift (const M
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dneupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in dneupd: %s", 
+       arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsRealNonSymmetricFunc (EigsFunc fun, octave_idx_type n_arg,
                           const std::string& _typ, double sigmar,
@@ -2606,17 +2775,18 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in dnaupd", info);
+              ("eigs: error in dnaupd: %s", 
+               arpack_errno2str (info, "dnaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -2682,17 +2852,16 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
                             octave::numeric_limits<double>::NaN ());
         }
       else
         {
           for (F77_INT i = ip(4); i < k; i++)
             d[i] = Complex (octave::numeric_limits<double>::NaN (), 0.);
         }
 
-
       if (! rvec)
         {
           // ARPACK seems to give the eigenvalues in reversed order
           octave_idx_type k2 = ip(4) / 2;
           for (F77_INT i = 0; i < k2; i++)
             {
               Complex dtmp = d[i];
               d[i] = d[ip(4) - i - 1];
@@ -2748,17 +2917,19 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in dneupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in dneupd: %s", 
+       arpack_errno2str (info2, "dneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricMatrix (const M& m, const std::string typ,
                                octave_idx_type k_arg, octave_idx_type p_arg,
@@ -2960,17 +3131,18 @@ EigsComplexNonSymmetricMatrix (const M& 
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in znaupd", info);
+              ("eigs: error in znaupd: %s", 
+               arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -3048,17 +3220,19 @@ EigsComplexNonSymmetricMatrix (const M& 
                 z[off2 + j] = ctmp[j];
             }
 
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in zneupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in zneupd: %s", 
+       arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricMatrixShift (const M& m, Complex sigma,
                                     octave_idx_type k_arg, octave_idx_type p_arg,
@@ -3283,17 +3457,18 @@ EigsComplexNonSymmetricMatrixShift (cons
               for (F77_INT i = 0; i < n; i++)
                 ip2[Q[i]] = tmp(i,0);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in znaupd", info);
+              ("eigs: error in znaupd: %s", 
+               arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -3369,17 +3544,18 @@ EigsComplexNonSymmetricMatrixShift (cons
 
               for (F77_INT j = 0; j < n; j++)
                 z[off2 + j] = ctmp[j];
             }
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("eigs: error %d in zneupd", info2);
+      ("eigs: error in zneupd: %s", 
+       arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 template <typename M>
 octave_idx_type
 EigsComplexNonSymmetricFunc (EigsComplexFunc fun, octave_idx_type n_arg,
                              const std::string& _typ, Complex sigma,
@@ -3671,17 +3847,18 @@ EigsComplexNonSymmetricFunc (EigsComplex
               for (F77_INT i = 0; i < n; i++)
                 *ip2++ = y(i);
             }
         }
       else
         {
           if (info < 0)
             (*current_liboctave_error_handler)
-              ("eigs: error %d in znaupd", info);
+              ("eigs: error in znaupd: %s", 
+               arpack_errno2str (info, "znaupd").c_str ());
 
           break;
         }
     }
   while (1);
 
   F77_INT info2;
 
@@ -3758,17 +3935,19 @@ EigsComplexNonSymmetricFunc (EigsComplex
               for (F77_INT j = 0; j < n; j++)
                 z[off2 + j] = ctmp[j];
             }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
-    (*current_liboctave_error_handler) ("eigs: error %d in zneupd", info2);
+    (*current_liboctave_error_handler)
+      ("eigs: error in zneupd: %s", 
+       arpack_errno2str (info2, "zneupd").c_str ());
 
   return ip(4);
 }
 
 // Instantiations for the types we need.
 
 // Matrix
 
