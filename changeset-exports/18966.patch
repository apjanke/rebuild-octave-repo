# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1406580472 -7200
#      Mon Jul 28 22:47:52 2014 +0200
# Node ID b2db129c664d77c7a011c797d205935a76c845a5
# Parent  137d01e7c2d455b7865d954c3ade21d94eca42af
Fix FLTK event handling for shortcuts and mouse cursor change

* __init_fltk__.cc:
 Request FL_FOCUS: This should fix the problem that shortcuts
 "a", "g", "p", "r" aren't executed until first btn press.

 Proper signaling to FLTK if an event was processed or the current
 handle routine isn't interested in it.

 Use currentaxes as target for shortcuts and toolbar button events
 if no axes object was selected so far.

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -57,16 +57,17 @@ To initialize:
 #endif
 
 #include <FL/Fl.H>
 #include <FL/Fl_Box.H>
 #include <FL/Fl_Button.H>
 #include <FL/Fl_Choice.H>
 #include <FL/Fl_File_Chooser.H>
 #include <FL/Fl_Gl_Window.H>
+#include <FL/names.h>
 #include <FL/Fl_Menu_Bar.H>
 #include <FL/Fl_Menu_Button.H>
 #include <FL/Fl_Output.H>
 #include <FL/Fl_Window.H>
 #include <FL/fl_ask.H>
 #include <FL/fl_draw.H>
 #include <FL/gl.h>
 
@@ -218,30 +219,27 @@ private:
     glEnd ();
 
     glPopAttrib ();
     glPopMatrix ();
   }
 
   int handle (int event)
   {
-    int retval = Fl_Gl_Window::handle (event);
-
     switch (event)
       {
       case FL_ENTER:
-        window ()->cursor (FL_CURSOR_CROSS);
+        cursor (FL_CURSOR_CROSS);
         return 1;
 
       case FL_LEAVE:
-        window ()->cursor (FL_CURSOR_DEFAULT);
+        cursor (FL_CURSOR_DEFAULT);
         return 1;
       }
-
-    return retval;
+    return Fl_Gl_Window::handle (event);
   }
 };
 
 void script_cb (Fl_Widget*, void* data)
 {
   static_cast<uimenu::properties*> (data)->execute_callback ();
 }
 
@@ -664,16 +662,21 @@ public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
     : Fl_Window (xx, yy, ww, hh + menu_h + status_h + 2, "octave"),
       window_label (), shift (0), fp (xfp), canvas (0),
       autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0),
       status (0), resize_dummy (0), ax_obj (), pos_x (0), pos_y (0)
   {
     callback (window_close, static_cast<void*> (this));
 
+    // The size of the resize_dummy box also determines the minimum window size
+    resize_dummy = new Fl_Box(5 * status_h + 1, menu_h + 1, ww - 5 * status_h - 1, hh);
+    // read on http://fltk.org/articles.php?L415+I0+T+M1000+P1 how resizable works
+    resizable (resize_dummy);
+
     // FIXME: The function below is only available in FLTK >= 1.3
     // At some point support for FLTK 1.1 will be dropped in Octave.
     // At that point this function should be uncommented.
     // The current solution is to call xclass() before show() for each window.
     // Set WM_CLASS which allows window managers to properly group related
     // windows.  Otherwise, the class is just "FLTK"
     //default_xclass ("Octave");
 
@@ -707,21 +710,16 @@ public:
     rotate = new Fl_Button (3 * status_h, toolbar_y, status_h, status_h, "R");
     rotate->callback (button_callback, static_cast<void*> (this));
     rotate->tooltip ("Mouse Rotate");
 
     help = new Fl_Button (4 * status_h, toolbar_y, status_h, status_h, "?");
     help->callback (button_callback, static_cast<void*> (this));
     help->tooltip ("Help");
 
-    // The size of the resize_dummy box also determines the minimum window size
-    resize_dummy = new Fl_Box(5 * status_h + 1, menu_h + 1, ww - 5 * status_h - 1, hh);
-    // read on http://fltk.org/articles.php?L415+I0+T+M1000+P1 how resizable works
-    resizable (resize_dummy);
-
     end ();
 
     if (fp.is_visible ())
       {
         // FIXME: This code should be removed when Octave drops support
         // for FLTK 1.1.  Search for default_xclass in this file to find
         // code that should be uncommented to take its place.
         //
@@ -943,52 +941,48 @@ private:
   static void button_callback (Fl_Widget* ww, void* data)
   {
     static_cast<plot_window*> (data)->button_press (ww, data);
   }
 
   void button_press (Fl_Widget* widg, void*)
   {
     if (widg == autoscale)
-      axis_auto ();
-
-    if (widg == togglegrid)
+      {
+        set_on_ax_obj ("xlimmode", "auto");
+        set_on_ax_obj ("ylimmode", "auto");
+        set_on_ax_obj ("zlimmode", "auto");
+        mark_modified ();
+      }
+    else if (widg == togglegrid)
       toggle_grid ();
-
-    if (widg == panzoom)
+    else if (widg == panzoom)
       set_on_ax_obj ("pan", "on");
-
-    if (widg == rotate)
+    else if (widg == rotate)
       set_on_ax_obj ("rotate3d", "on");
-
-    if (widg == help)
+    else if (widg == help)
       fl_message ("%s", help_text);
   }
 
   void set_on_ax_obj (const std::string& name, const std::string& value)
   {
     // ax_obj is the last clicked axes object
     if (ax_obj && ax_obj.isa ("axes"))
       {
         axes::properties& ap = dynamic_cast<axes::properties&>(ax_obj.get_properties ());
         ap.set (name, value);
       }
-    else // no axes object clicked so far
+    else // no axes object clicked so far, take currentaxes
       {
-        // take the object in the center of the canvas
-        graphics_handle gh = pixel2axes_or_ca (canvas->w () / 2, canvas->h () / 2);
-
+        graphics_handle gh = fp.get_currentaxes ();
         if (gh.ok ())
           {
-            graphics_object tmp = gh_manager::get_object (gh);
-            if (tmp.isa ("axes"))
-              {
-                axes::properties& ap = dynamic_cast<axes::properties&>(tmp.get_properties ());
-                ap.set (name, value);
-              }
+            graphics_object go = gh_manager::get_object (gh);
+            axes::properties& ap = dynamic_cast<axes::properties&>(go.get_properties ());
+            ap.set (name, value);
           }
       }
   }
 
   fltk_uimenu* uimenu;
   OpenGL_fltk* canvas;
   Fl_Button* autoscale;
   Fl_Button* togglegrid;
@@ -996,25 +990,16 @@ private:
   Fl_Button* rotate;
   Fl_Button* help;
   Fl_Output* status;
   Fl_Box* resize_dummy;
   graphics_object ax_obj;
   int pos_x;
   int pos_y;
 
-  void axis_auto (void)
-  {
-    octave_value_list args;
-    args(0) = fp.get_currentaxes ().as_octave_value ();
-    args(1) = "auto";
-    feval ("axis", args);
-    mark_modified ();
-  }
-
   void toggle_grid (void)
   {
     octave_value_list args;
     if (fp.get_currentaxes ().ok ())
       args(0) = fp.get_currentaxes ().as_octave_value ();
 
     feval ("grid", args);
     mark_modified ();
@@ -1205,27 +1190,25 @@ private:
     pos(2) = canvas->w ();
     pos(3) = canvas->h ();
 
     fp.set_position (pos, false);
   }
 
   int handle (int event)
   {
-    graphics_handle gh;
+    if (event == FL_FOCUS)
+      return 1;
 
-    graphics_object fig = gh_manager::get_object (fp.get___myhandle__ ());
-    int retval = Fl_Window::handle (event);
-
-    // We only handle events which are in the canvas area.
-    if (!Fl::event_inside (canvas))
-      return retval;
+    Fl_Window::handle (event);
+    graphics_handle gh;
 
     if (!fp.is_beingdeleted ())
       {
+        //std::cout << "plot_window::handle event = " <<  fl_eventnames[event] << std::endl;
         switch (event)
           {
           case FL_KEYDOWN:
             {
               int key = Fl::event_key ();
 
               shift |= key2shift (key);
               int key_a = key2ascii (key);
@@ -1236,33 +1219,36 @@ private:
                   evt.assign ("Key", octave_value (std::tolower (key_a)));
                   evt.assign ("Modifier", octave_value (modifier2cell ()));
                   fp.execute_keypressfcn (evt);
                 }
               switch (key)
                 {
                 case 'a':
                 case 'A':
-                  axis_auto ();
-                  break;
+                  set_on_ax_obj ("xlimmode", "auto");
+                  set_on_ax_obj ("ylimmode", "auto");
+                  set_on_ax_obj ("zlimmode", "auto");
+                  mark_modified ();
+                  return 1;
 
                 case 'g':
                 case 'G':
                   toggle_grid ();
-                  break;
+                  return 1;
 
                 case 'p':
                 case 'P':
                   set_on_ax_obj ("pan", "on");
-                  break;
+                  return 1;
 
                 case 'r':
                 case 'R':
                   set_on_ax_obj ("rotate3d", "on");
-                  break;
+                  return 1;
                 }
             }
             break;
 
           case FL_KEYUP:
             {
               int key = Fl::event_key ();
 
@@ -1270,27 +1256,35 @@ private:
               int key_a = key2ascii (key);
               if (key_a && fp.get_keyreleasefcn ().is_defined ())
                 {
                   octave_scalar_map evt;
                   evt.assign ("Character", octave_value (key_a));
                   evt.assign ("Key", octave_value (std::tolower (key_a)));
                   evt.assign ("Modifier", octave_value (modifier2cell ()));
                   fp.execute_keyreleasefcn (evt);
+                  return 1;
                 }
             }
             break;
+          }
 
+      // Events we only handle if they are in the canvas area.
+      if (Fl::event_inside (canvas))
+        switch (event)
+          {
           case FL_MOVE:
             pixel2status (pixel2axes_or_ca (Fl::event_x (),
                                             Fl::event_y () - menu_dy ()),
                           Fl::event_x (), Fl::event_y () - menu_dy ());
-            break;
+            return 1;
 
           case FL_PUSH:
+            fp.execute_windowbuttondownfcn (Fl::event_button());
+
             pos_x = Fl::event_x ();
             pos_y = Fl::event_y () - menu_dy ();
 
             set_currentpoint (pos_x, pos_y);
 
             gh = pixel2axes_or_ca (pos_x, pos_y);
 
             if (gh.ok ())
@@ -1300,26 +1294,21 @@ private:
 
                 int ndim = calc_dimensions (ax_obj);
 
                 if (ndim == 3)
                   rotate->activate ();
                 else // ndim == 2
                   rotate->deactivate ();
 
-
                 fp.set_currentobject (ax_obj.get_handle ().value ());
 
+                return 1;
               }
 
-            fp.execute_windowbuttondownfcn (Fl::event_button());
-
-            if (Fl::event_button () == 1 || Fl::event_button () == 3)
-              return 1;
-
             break;
 
           case FL_DRAG:
             if (fp.get_windowbuttonmotionfcn ().is_defined ())
               {
                 set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonmotionfcn ();
               }
@@ -1385,16 +1374,17 @@ private:
                 Matrix zoom_box (1,4,0);
                 zoom_box (0) = pos_x;
                 zoom_box (1) = pos_y;
                 zoom_box (2) =  Fl::event_x ();
                 zoom_box (3) =  Fl::event_y () - menu_dy ();
                 canvas->set_zoom_box (zoom_box);
                 canvas->zoom (true);
                 mark_modified ();
+                return 1;
               }
 
             break;
 
           case FL_MOUSEWHEEL:
             {
               graphics_object ax =
                 gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (),
@@ -1415,41 +1405,33 @@ private:
 
                   // Get the point we're zooming about.
                   double x1, y1;
                   pixel2pos (ax, Fl::event_x (), Fl::event_y () - menu_dy (),
                              x1, y1);
 
                   ap.zoom_about_point (x1, y1, factor, false);
                   mark_modified ();
+                  return 1;
                 }
             }
-            return 1;
 
           case FL_RELEASE:
             if (fp.get_windowbuttonupfcn ().is_defined ())
               {
                 set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonupfcn ();
               }
 
-            if (Fl::event_button () == 1)
+            if ((Fl::event_button () == 1) && Fl::event_clicks ()) //double click
               {
-                if (Fl::event_clicks () == 1)
-                  {
-                    if (ax_obj && ax_obj.isa ("axes"))
-                      {
-                        axes::properties& ap = dynamic_cast<axes::properties&>
-                                               (ax_obj.get_properties ());
-                        ap.set_xlimmode ("auto");
-                        ap.set_ylimmode ("auto");
-                        ap.set_zlimmode ("auto");
-                        mark_modified ();
-                      }
-                  }
+                set_on_ax_obj ("xlimmode", "auto");
+                set_on_ax_obj ("ylimmode", "auto");
+                set_on_ax_obj ("zlimmode", "auto");
+                return 1;
               }
             if (Fl::event_button () == 3)
               {
                 // End of drag -- zoom.
                 if (canvas->zoom ())
                   {
                     canvas->zoom (false);
                     double x0,y0,x1,y1;
@@ -1486,24 +1468,25 @@ private:
                             else
                               {
                                 yl(0) = y1;
                                 yl(1) = y0;
                               }
                             ap.zoom (xl, yl);
                           }
                         mark_modified ();
+                        return 1;
                       }
                   }
               }
             break;
           }
       }
-
-    return retval;
+    //std::cout << "plot_window::handle wasn't interested in event " <<  fl_eventnames[event] << std::endl;
+    return Fl_Window::handle (event);
   }
 };
 
 class figure_manager
 {
 public:
 
   static bool instance_ok (void)
