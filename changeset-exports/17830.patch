# HG changeset patch
# User Rik <rik@octave.org>
# Date 1383428042 25200
#      Sat Nov 02 14:34:02 2013 -0700
# Node ID f22714d4a5da540aebfffc150d8a8107f052f377
# Parent  c2d9d42f4fe1e54290203e808a40858aa03e1bf9
build: Don't use JAVA_CPPFLAGS, FT2_CPPFLAGS everywhere when making .df files.
*.cc -> *.df rule now stops build when it fails (as it should have done before).

* libinterp/Makefile.am: Remove FONTCONFIG_CPPFLAGS, FT2_CPPFLAGS,
JAVA_CPPFLAGS from defaulte *.cc -> *.df rule.  Abort make if rule
errors out.

* libinterp/corefcn/module.mk: Add overriding *.cc -> *.df rule
for files which use (FONTCONFIG|FT2)_CPPFLAGS.

* libinterp/octave-value/module.mk: Add overriding *.cc -> *.df rule
for files which use JAVA_CPPFLAGS.

diff --git a/libinterp/Makefile.am b/libinterp/Makefile.am
--- a/libinterp/Makefile.am
+++ b/libinterp/Makefile.am
@@ -223,30 +223,25 @@ ALL_DEF_FILES = $(SRC_DEF_FILES) $(DLDFC
 $(DEF_FILES): $(OPT_HANDLERS) $(OPT_INC)
 
 ## FIXME: The following two variables are deprecated and should be removed
 ##        in Octave version 3.12.
 DLL_CDEFS = @OCTINTERP_DLL_DEFS@
 DLL_CXXDEFS = @OCTINTERP_DLL_DEFS@
 
 ## Rule to build a DEF file from a .cc file
-##
-## FIXME: This rule should be fixed to avoid using special
-## flags like JAVA_CPPFLAGS for every file.  How could it be written
-## so that it uses octave_value_liboctave_value_la_CPPFLAGS when
-## generating the octave-value/*.df files?
-## 
+## See also module.mk files for overrides when speciall CPPFLAGS are needed.
 ## FIXME: Shouldn't the build stop if CPP fails here?  Yes (10/31/2013)
 %.df: %.cc
 	$(CXXCPP) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
-	  $(AM_CPPFLAGS) $(FONTCONFIG_CPPFLAGS) $(FT2_CPPFLAGS) \
-		$(JAVA_CPPFLAGS) $(LLVM_CPPFLAGS) $(CPPFLAGS) \
+	  $(AM_CPPFLAGS) $(LLVM_CPPFLAGS) $(CPPFLAGS) \
 	  $(AM_CXXFLAGS) $(CXXFLAGS) \
-	  -DMAKE_BUILTINS $< | $(srcdir)/mkdefs $(srcdir) $< > $@-t
-	mv $@-t $@
+	  -DMAKE_BUILTINS $< > $@-t
+	$(srcdir)/mkdefs $(srcdir) $< < $@-t > $@
+	rm $@-t
 
 ## Rules to build test files
 
 TST_FILES_SRC := $(shell $(top_srcdir)/build-aux/find-files-with-tests.sh "$(srcdir)" $(ULT_DIST_SRC) $(DLDFCN_SRC))
 
 TST_FILES := $(addsuffix -tst,$(TST_FILES_SRC))
 
 libinterptestsdir := $(octtestsdir)/libinterp
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -256,22 +256,38 @@ COREFCN_SRC = \
   corefcn/variables.cc \
   corefcn/xdiv.cc \
   corefcn/xnorm.cc \
   corefcn/xpow.cc \
   corefcn/zfstream.cc \
   $(JIT_SRC) \
   $(C_COREFCN_SRC)
 
+COREFCN_FT2_DF = \
+  corefcn/graphics.df \
+  corefcn/gl-render.df \
+  corefcn/toplev.df \
+  corefcn/txt-eng-ft.df
+
 ## FIXME: Automake does not support per-object rules.
 ##        These rules could be emulated by creating a new convenience
 ##        library and using per-library rules.  Or we can just live
 ##        without the rule since there haven't been any problems. (09/18/2012)
 #display.df display.lo: CPPFLAGS += $(X11_FLAGS)
 
+## Special rules for FreeType .df files so that not all .df files are built
+## with FT2_CPPFLAGS, FONTCONFIG_CPPFLAGS
+$(COREFCN_FT2_DF) : corefcn/%.df : corefcn/%.cc
+	$(CXXCPP) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	  $(AM_CPPFLAGS) $(FONTCONFIG_CPPFLAGS) $(FT2_CPPFLAGS) $(CPPFLAGS) \
+	  $(AM_CXXFLAGS) $(CXXFLAGS) \
+	  -DMAKE_BUILTINS $< > $@-t
+	$(srcdir)/mkdefs $(srcdir) $< < $@-t > $@
+	rm $@-t
+
 ## Special rules for sources which must be built before rest of compilation.
 
 ## defaults.h and graphics.h must depend on Makefile.  Calling configure
 ## may change default/config values.  However, calling configure will also
 ## regenerate the Makefiles from Makefile.am and trigger the rules below.
 corefcn/defaults.h: corefcn/defaults.in.h Makefile
 	@$(do_subst_default_vals)
 
diff --git a/libinterp/octave-value/module.mk b/libinterp/octave-value/module.mk
--- a/libinterp/octave-value/module.mk
+++ b/libinterp/octave-value/module.mk
@@ -122,16 +122,32 @@ OCTAVE_VALUE_SRC = \
   octave-value/ov-str-mat.cc \
   octave-value/ov-struct.cc \
   octave-value/ov-typeinfo.cc \
   octave-value/ov-usr-fcn.cc \
   octave-value/ov.cc \
   $(OV_INTTYPE_SRC) \
   $(OV_SPARSE_SRC)
 
+OV_JAVA_DF = \
+  octave-value/ov.df \
+  octave-value/ov-class.df \
+  octave-value/ov-java.df \
+  octave-value/ov-typeinfo.df
+
+## Special rules for Java .df files so that not all .df files are built with
+## JAVA_CPPFLAGS
+$(OV_JAVA_DF) : octave-value/%.df : octave-value/%.cc
+	$(CXXCPP) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	  $(AM_CPPFLAGS) $(JAVA_CPPFLAGS) $(CPPFLAGS) \
+	  $(AM_CXXFLAGS) $(CXXFLAGS) \
+	  -DMAKE_BUILTINS $< > $@-t
+	$(srcdir)/mkdefs $(srcdir) $< < $@-t > $@
+	rm $@-t
+
 noinst_LTLIBRARIES += octave-value/liboctave-value.la
 
 octave_value_liboctave_value_la_SOURCES = $(OCTAVE_VALUE_SRC)
 
 ## FIXME -- maybe it would be better to limit the JAVA flags to
 ## the compile commands for ov-java.cc?  Does JAVA_LIBS need to be
 ## added to LIBOCTINTERP_LINK_DEPS (see libinterp/link-deps.mk)?
 ## Should we have a separate set of JAVA_LDFLAGS?
