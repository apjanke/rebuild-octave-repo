# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1273262331 14400
#      Fri May 07 15:58:51 2010 -0400
# Node ID e103fb2182cebbfe29b0da6a3c96566d571e76d9
# Parent  09e244649f508e68d6764635a9a46a00ebb9b4b7
use internal variable instead of warning state to control whether to allow non-integer ranges as indices

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-05-07  John W. Eaton  <jwe@octave.org>
+
+	* basics.txi: Update list of internal variables for --traditional.
+
 2010-05-02  Rik <octave@nomad.inbox5.com>
 
         * interpreter/contrib.txi, interpreter/install.txi, 
         interpreter/plot.txi, interpreter/sparse.txi,
         interpreter/octave.texi: Remove tabs causing problems with
         pdf formatting.
 
 2010-04-14  Shai Ayal  <shaiay@users.sourceforge.net>
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -204,34 +204,35 @@ Don't print the usual greeting and versi
 @itemx --braindead
 @cindex @code{--traditional}
 @cindex @code{--braindead}
 For compatibility with @sc{matlab}, set initial values for
 user preferences to the following values
 
 @example
 @group
-PS1                     = ">> "
-PS2                     = ""
-beep_on_error           = true
-confirm_recursive_rmdir = false
-crash_dumps_octave_core = false
-default_save_options    = "-mat-binary"
-fixed_point_format      = true
-history_timestamp_format_string
-                        = "%%-- %D %I:%M %p --%%"
-page_screen_output      = false
-print_empty_dimensions  = false
+PS1                             = ">> "
+PS2                             = ""
+allow_noninteger_range_as_index = true
+beep_on_error                   = true
+confirm_recursive_rmdir         = false
+crash_dumps_octave_core         = false
+default_save_options            = "-mat-binary"
+fixed_point_format              = true
+history_timestamp_format_string = "%%-- %D %I:%M %p --%%"
+page_screen_output              = false
+print_empty_dimensions          = false
 @end group
 @end example
 
 @noindent
 and disable the following warnings
 @example
 @group
+Octave:abbreviated-property-match
 Octave:fopen-file-in-path
 Octave:function-name-clash
 Octave:load-file-in-path
 @end group
 @end example
 
 @item  --verbose
 @itemx -V
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,28 @@
 2010-05-07  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* ov-base.h (Vsparse_auto_mutate): Add OCTINTERP_API tag.
 
+2010-05-07  John W. Eaton  <jwe@octave.org>
+
+	* octave.cc (maximum_braindamage): Set value of internal
+	variable Vallow_noninteger_range_as_index to true instead of
+	setting Octave:allow-noninteger-ranges-as-indices warning state.
+	* ov-range.cc (Fallow_noninteger_range_as_index): New function.
+	(Vallow_noninteger_range_as_index): New variable.
+	(octave_range::index_vector): Only allow non-integer range as
+	index if Vallow_noninteger_range_as_index is true.
+	(octave_range::bool_array_value): Move definition here from ov-range.h.
+	* ov-range.h (Vallow_noninteger_range_as_index): Provide decl.
+	* utils.cc (reset_warning_state): Delete.
+	(Fisindex): Temporarily set Vallow_noninteger_range_as_index
+	instead of changing warning state for
+	Octave:allow-noninteger-ranges-as-indices to "error".
+
 2010-05-06  John W. Eaton  <jwe@octave.org>
 
 	* xgl2ps.c: Don't compile gl2ps.c unless we have OpenGL.
 	From Petr Mikulik <mikulik>.
 
 2010-05-06  John W. Eaton  <jwe@octave.org>
 
 	* ov-range.cc (octave_range::index_vector):
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -54,22 +54,23 @@ along with Octave; see the file COPYING.
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "octave.h"
 #include "oct-hist.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "ops.h"
+#include "ov.h"
+#include "ov-range.h"
 #include "toplev.h"
 #include "parse.h"
 #include "procstream.h"
 #include "sighandlers.h"
 #include "sysdep.h"
-#include "ov.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include <version.h>
 
 // Kluge.
 extern "C" F77_RET_T
 F77_FUNC (xerbla, XERBLA) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&
@@ -558,28 +559,27 @@ initialize_error_handlers ()
 
 static void
 maximum_braindamage (void)
 {
   persist = true;
 
   bind_internal_variable ("PS1", ">> ");
   bind_internal_variable ("PS2", "");
+  bind_internal_variable ("allow_noninteger_range_as_index", true);
   bind_internal_variable ("beep_on_error", true);
   bind_internal_variable ("confirm_recursive_rmdir", false);
   bind_internal_variable ("crash_dumps_octave_core", false);
   bind_internal_variable ("default_save_options", "-mat-binary");
   bind_internal_variable ("fixed_point_format", true);
   bind_internal_variable ("history_timestamp_format_string",
                          "%%-- %D %I:%M %p --%%");
   bind_internal_variable ("page_screen_output", false);
   bind_internal_variable ("print_empty_dimensions", false);
 
-  set_warning_state ("Octave:allow-noninteger-ranges-as-indices", "on");
-
   disable_warning ("Octave:abbreviated-property-match");
   disable_warning ("Octave:fopen-file-in-path");
   disable_warning ("Octave:function-name-clash");
   disable_warning ("Octave:load-file-in-path");
 }
 
 // You guessed it.
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -40,16 +40,19 @@ along with Octave; see the file COPYING.
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
+// If TRUE, allow ranges with non-integer elements as array indices.
+bool Vallow_noninteger_range_as_index = false;
+
 DEFINE_OCTAVE_ALLOCATOR (octave_range);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_range, "range", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
@@ -146,21 +149,22 @@ octave_range::do_index_op (const octave_
 
 idx_vector
 octave_range::index_vector (void) const
 {
   if (idx_cache)
     return *idx_cache;
   else
     {
-      if (range.all_elements_are_ints ())
+      if (range.all_elements_are_ints ()
+          || ! Vallow_noninteger_range_as_index)
         return set_idx_cache (idx_vector (range));
       else
         {
-          warning_with_id ("Octave:allow-noninteger-ranges-as-indices",
+          warning_with_id ("Octave:noninteger-range-as-index",
                            "non-integer range used as index");
 
           return octave_value (matrix_value ()).round ().index_vector ();
         }
     }
 }
 
 double
@@ -302,22 +306,35 @@ octave_range::float_complex_value (bool)
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
 }
 
+boolNDArray
+octave_range::bool_array_value (bool warn) const
+{
+  Matrix m = range.matrix_value ();
+
+  if (m.any_element_is_nan ())
+    error ("invalid conversion from NaN to logical");
+  else if (warn && m.any_element_not_one_or_zero ())
+    gripe_logical_conversion ();
+
+  return boolNDArray (m);
+}
+
 octave_value 
 octave_range::resize (const dim_vector& dv, bool fill) const
 { 
   NDArray retval = array_value (); 
   if (fill)
-    retval.resize (dv, NDArray::resize_fill_value());
+    retval.resize (dv, NDArray::resize_fill_value ());
   else
     retval.resize (dv); 
   return retval; 
 }
 
 octave_value
 octave_range::convert_to_str_internal (bool pad, bool force, char type) const
 {
@@ -584,8 +601,21 @@ octave_range::as_mxArray (void) const
 
   const double *p = m.data ();
 
   for (mwSize i = 0; i < nel; i++)
     pr[i] = p[i];
 
   return retval;
 }
+
+DEFUN (allow_noninteger_range_as_index, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{val} =} allow_noninteger_range_as_index ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} allow_noninteger_range_as_index (@var{new_val})\n\
+Query or set the internal variable that controls whether non-integer\n\
+ranges are allowed as indices.  This might be useful for Matlab\n\
+compatibility; however, it is still not entirely compatible because\n\
+Matlab treats the range expression differently in different contexts.\n\
+@end deftypefn")
+{
+  return SET_INTERNAL_VARIABLE (allow_noninteger_range_as_index);
+}
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -226,27 +226,17 @@ public:
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
     { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   Complex complex_value (bool = false) const;
 
   FloatComplex float_complex_value (bool = false) const;
 
-  boolNDArray bool_array_value (bool warn = false) const
-  {
-    Matrix m = range.matrix_value ();
-
-    if (m.any_element_is_nan ())
-      error ("invalid conversion from NaN to logical");
-    else if (warn && m.any_element_not_one_or_zero ())
-      gripe_logical_conversion ();
-
-    return boolNDArray (m);
-  }
+  boolNDArray bool_array_value (bool warn = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const
     { return FloatComplexMatrix (range.matrix_value ()); }
 
   ComplexNDArray complex_array_value (bool = false) const
@@ -317,9 +307,12 @@ private:
 
   mutable idx_vector *idx_cache;
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
+// If TRUE, allow ranges with non-integer elements as array indices.
+extern bool Vallow_noninteger_range_as_index;
+
 #endif
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -54,16 +54,17 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "oct-errno.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
+#include "ov-range.h"
 #include "pager.h"
 #include "parse.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -1299,27 +1300,16 @@ octave_sleep (double seconds)
       // defined in cutils.c.
       octave_sleep (sec);
       octave_usleep (usec);
 
       octave_quit ();
     }
 }
 
-// FIXME -- is there some way to fix the declarations in unwind-prot.h
-// so that this function's argument can be declared as
-// "const octave_value_list&"?
-
-static void
-reset_warning_state (octave_value_list args)
-{
-  if (! args.empty ())
-    set_warning_state (args);
-}
-
 DEFUN (isindex, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isindex (@var{ind}, @var{n})\n\
 Returns true if @var{ind} is a valid index.  Valid indices can be\n\
 either positive integers (though possibly real data), or logical arrays.\n\
 If present, @var{n} specifies the extent of the dimension to be indexed.\n\
 Note that, if possible, the internal conversion result is cached so that\n\
 subsequent indexing will not perform the checking again.\n\
@@ -1333,21 +1323,18 @@ subsequent indexing will not perform the
     n = args(1).idx_type_value ();
   else if (nargin != 1)
     print_usage ();
 
   if (! error_state)
     {
       unwind_protect frame;
 
-      octave_value_list current_warning_state
-        = set_warning_state ("Octave:allow-noninteger-ranges-as-indices",
-                             "error");
-
-      frame.add_fcn (reset_warning_state, current_warning_state);
+      frame.protect_var (Vallow_noninteger_range_as_index);
+      Vallow_noninteger_range_as_index = false;
 
       frame.protect_var (error_state);
 
       frame.protect_var (discard_error_messages);
       discard_error_messages = true;
 
       try
         {
