# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448339037 18000
#      Mon Nov 23 23:23:57 2015 -0500
# Node ID b6408331bfa2131566cb2342c386e43989fe02f4
# Parent  5e2da9a66510b5347f119b7de8ecbb2a37950b7f
eliminate more uses of error_state

* graphics.cc, input.cc, max.cc, rand.cc, __eigs__.cc, ov-class.cc,
ov-classdef.cc, ov.cc, octave.cc: Eliminate more uses of error_state.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2854,22 +2854,23 @@ base_properties::set_from_list (base_gra
       const property_list::pval_map_type pval_map = p->second;
 
       for (property_list::pval_map_const_iterator q = pval_map.begin ();
            q != pval_map.end ();
            q++)
         {
           std::string pname = q->first;
 
-          bgo.set (pname, q->second);
-
-          if (error_state)
+          try
+            {
+              bgo.set (pname, q->second);
+            }
+          catch (const octave_execution_exception&)
             {
               error ("error setting default property %s", pname.c_str ());
-              break;
             }
         }
     }
 }
 
 /*
 ## test defaults are set in the order they were stored
 %!test
@@ -10177,36 +10178,39 @@ make_graphics_object (const std::string&
 
   if (xisnan (val))
     val = args(0).xdouble_value ("__go_%s__: invalid parent", go_name.c_str ());
 
   graphics_handle parent = gh_manager::lookup (val);
 
   if (parent.ok ())
     {
-      graphics_handle h
-        = gh_manager::make_graphics_handle (go_name, parent,
-                                            integer_figure_handle,
-                                            false, false);
-
-      if (! error_state)
-        {
-          adopt (parent, h);
-
-          xset (h, xargs);
-          xcreatefcn (h);
-          xinitialize (h);
-
-          retval = h.value ();
-
-          Vdrawnow_requested = true;
-        }
-      else
-        error ("__go%s__: unable to create graphics handle",
-               go_name.c_str ());
+      graphics_handle h;
+
+      try
+        {
+          h = gh_manager::make_graphics_handle (go_name, parent,
+                                                integer_figure_handle,
+                                                false, false);
+        }
+      catch (const octave_execution_exception&)
+        {
+          error ("__go%s__: unable to create graphics handle",
+                 go_name.c_str ());
+        }
+
+      adopt (parent, h);
+
+      xset (h, xargs);
+      xcreatefcn (h);
+      xinitialize (h);
+
+      retval = h.value ();
+
+      Vdrawnow_requested = true;
     }
   else
     error ("__go_%s__: invalid parent", go_name.c_str ());
 
   return retval;
 }
 
 DEFUN (__go_figure__, args, ,
@@ -10273,17 +10277,17 @@ Undocumented internal function.\n\
 
                   graphics_object go = gh_manager::get_object (h);
                   go.get_properties ().init_integerhandle ("off");
                 }
             }
           else if (val > 0 && D_NINT (val) == val)
             h = gh_manager::make_figure_handle (val, false);
 
-          if (! error_state && h.ok ())
+          if (h.ok ())
             {
               adopt (0, h);
 
               gh_manager::push_figure (h);
 
               xset (h, xargs);
               xcreatefcn (h);
               xinitialize (h);
@@ -10709,17 +10713,17 @@ gtk_manager::do_get_toolkit (void) const
           if (pa != available_toolkits.end ())
             {
               octave_value_list args;
               args(0) = dtk;
               feval ("graphics_toolkit", args);
 
               pl = loaded_toolkits.find (dtk);
 
-              if (error_state || pl == loaded_toolkits.end ())
+              if (pl == loaded_toolkits.end ())
                 error ("failed to load %s graphics toolkit", dtk.c_str ());
               else
                 retval = pl->second;
             }
           else
             error ("default graphics toolkit '%s' is not available!",
                    dtk.c_str ());
         }
@@ -11450,20 +11454,19 @@ In all cases, typing CTRL-C stops progra
 
       int max_arg_index = 0;
       int timeout_index = -1;
 
       int timeout = 0;
 
       if (args.length () > 1)
         {
-          pname = args(1).string_value ();
-
-          if (! error_state
-              && ! pname.empty () && ! pname.compare ("timeout"))
+          pname = args(1).xstring_value ("waitfor: PROP must be a string");
+
+          if (! pname.empty () && ! pname.compare ("timeout"))
             {
               if (pname.compare ("\\timeout"))
                 pname = "timeout";
 
               static octave_value wf_listener;
 
               if (! wf_listener.is_defined ())
                 wf_listener =
@@ -11547,33 +11550,28 @@ In all cases, typing CTRL-C stops progra
                           frame.add_fcn (cleanup_waitfor_predelete_listener,
                                          ov_del_listener);
                           go.add_property_listener (pname, ov_del_listener,
                                                     PREDELETE);
                         }
                     }
                 }
             }
-          else if (error_state || pname.empty ())
+          else if (pname.empty ())
             error ("waitfor: PROP must be a non-empty string");
         }
 
       if (timeout_index < 0 && args.length () > (max_arg_index + 1))
         {
-          caseless_str s = args(max_arg_index + 1).string_value ();
-
-          if (! error_state)
-            {
-              if (s.compare ("timeout"))
-                timeout_index = max_arg_index + 1;
-              else
-                error ("waitfor: invalid parameter '%s'", s.c_str ());
-            }
+          caseless_str s = args(max_arg_index + 1).xstring_value ("waitfor: invalid parameter, expected 'timeout'");
+
+          if (s.compare ("timeout"))
+            timeout_index = max_arg_index + 1;
           else
-            error ("waitfor: invalid parameter, expected 'timeout'");
+            error ("waitfor: invalid parameter '%s'", s.c_str ());
         }
 
       if (timeout_index >= 0)
         {
           if (args.length () > (timeout_index + 1))
             {
               timeout = static_cast<int>
                 (args(timeout_index + 1).xscalar_value ("waitfor: TIMEOUT must be a scalar >= 1"));
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -194,26 +194,43 @@ gnu_readline (const std::string& s, bool
 
 static inline std::string
 interactive_input (const std::string& s, bool& eof)
 {
   Vlast_prompt_time.stamp ();
 
   if (Vdrawnow_requested && interactive)
     {
-      feval ("drawnow");
+      bool eval_error = false;
+
+      try
+        {
+          feval ("drawnow");
+        }
+      catch (const octave_execution_exception& e)
+        {
+          eval_error = true;
+
+          std::string stack_trace = e.info ();
+
+          if (! stack_trace.empty ())
+            std::cerr << stack_trace;
+
+          if (interactive)
+            recover_from_exception ();
+        }
 
       flush_octave_stdout ();
 
-      // We set Vdrawnow_requested to false even if there is an error
-      // in drawnow so that the error doesn't reappear at every prompt.
+      // We set Vdrawnow_requested to false even if there is an error in
+      // drawnow so that the error doesn't reappear at every prompt.
 
       Vdrawnow_requested = false;
 
-      if (error_state)
+      if (eval_error)
         return "\n";
     }
 
   return gnu_readline (s, eof);
 }
 
 std::string
 octave_base_reader::octave_gets (bool& eof)
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -235,17 +235,18 @@ do_minmax_body (const octave_value_list&
 
   if (nargin == 3 || nargin == 1)
     {
       octave_value arg = args(0);
       int dim = -1;
       if (nargin == 3)
         {
           dim = args(2).int_value (true) - 1;
-          if (error_state || dim < 0)
+
+          if (dim < 0)
             {
               error ("%s: DIM must be a valid dimension", func);
               return retval;
             }
 
           if (! args(1).is_empty ())
             warning ("%s: second argument is ignored", func);
         }
@@ -896,17 +897,18 @@ do_cumminmax_body (const octave_value_li
 
   if (nargin == 1 || nargin == 2)
     {
       octave_value arg = args(0);
       int dim = -1;
       if (nargin == 2)
         {
           dim = args(1).int_value (true) - 1;
-          if (error_state || dim < 0)
+
+          if (dim < 0)
             {
               error ("%s: DIM must be a valid dimension", func);
               return retval;
             }
         }
 
       switch (arg.builtin_type ())
         {
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -203,36 +203,40 @@ do_rand (const octave_value_list& args, 
                 goto gen_matrix;
 
               }
             else
               error ("%s: all elements of range must be integers", fcn);
           }
         else if (tmp.is_matrix_type ())
           {
-            Array<int> iv = tmp.int_vector_value (true);
+            Array<int> iv;
 
-            if (! error_state)
+            try
               {
-                octave_idx_type len = iv.numel ();
-
-                dims.resize (len);
+                iv = tmp.int_vector_value (true);
+              }
+            catch (const octave_execution_exception&)
+              {
+                error ("%s: dimensions must be a scalar or array of integers", fcn);
+              }
 
-                for (octave_idx_type i = 0; i < len; i++)
-                  {
-                    // Negative dimensions are treated as zero for Matlab
-                    // compatibility
-                    octave_idx_type elt = iv(i);
-                    dims(i) = elt >=0 ? elt : 0;
-                  }
+            octave_idx_type len = iv.numel ();
+
+            dims.resize (len);
 
-                goto gen_matrix;
+            for (octave_idx_type i = 0; i < len; i++)
+              {
+                // Negative dimensions are treated as zero for Matlab
+                // compatibility
+                octave_idx_type elt = iv(i);
+                dims(i) = elt >=0 ? elt : 0;
               }
-            else
-              error ("%s: dimensions must be a scalar or array of integers", fcn);
+
+            goto gen_matrix;
           }
         else
           {
             gripe_wrong_type_arg ("rand", tmp);
             return retval;
           }
       }
       break;
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -51,40 +51,36 @@ ColumnVector
 eigs_func (const ColumnVector &x, int &eigs_error)
 {
   ColumnVector retval;
   octave_value_list args;
   args(0) = x;
 
   if (eigs_fcn)
     {
-      octave_value_list tmp = eigs_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
         {
-          eigs_error = 1;
+          tmp = eigs_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
           gripe_user_supplied_eval ("eigs");
-          return retval;
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
               warning ("eigs: ignoring imaginary part returned from user-supplied function");
               warned_imaginary = true;
             }
 
-          retval = ColumnVector (tmp(0).vector_value ());
-
-          if (error_state)
-            {
-              eigs_error = 1;
-              gripe_user_supplied_eval ("eigs");
-            }
+          retval = tmp(0).xvector_value ("eigs: evaluation of user-supplied function failed");
         }
       else
         {
           eigs_error = 1;
           gripe_user_supplied_eval ("eigs");
         }
     }
 
@@ -95,34 +91,30 @@ ComplexColumnVector
 eigs_complex_func (const ComplexColumnVector &x, int &eigs_error)
 {
   ComplexColumnVector retval;
   octave_value_list args;
   args(0) = x;
 
   if (eigs_fcn)
     {
-      octave_value_list tmp = eigs_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
         {
-          eigs_error = 1;
+          tmp = eigs_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
           gripe_user_supplied_eval ("eigs");
-          return retval;
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
-          retval = ComplexColumnVector (tmp(0).complex_vector_value ());
-
-          if (error_state)
-            {
-              eigs_error = 1;
-              gripe_user_supplied_eval ("eigs");
-            }
+          retval = tmp(0).complex_vector_value ("eigs: evaluation of user-supplied function failed");
         }
       else
         {
           eigs_error = 1;
           gripe_user_supplied_eval ("eigs");
         }
     }
 
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -608,23 +608,18 @@ octave_class::subsasgn_common (const oct
   octave_base_value *obvp = unique_parent_class (method_class);
   if (obvp != this)
     {
 
       if (obvp)
         {
           obvp->subsasgn (type, idx, rhs);
 
-          if (! error_state)
-            {
-              count++;
-              retval = octave_value (this);
-            }
-          else
-            gripe_failed_assignment ();
+          count++;
+          retval = octave_value (this);
         }
       else
         error ("malformed class");
 
       return retval;
     }
 
   // FIXME: this block of code is the same as the body of
@@ -729,131 +724,101 @@ octave_class::subsasgn_common (const oct
           gripe_invalid_index_type (type_name (), type[0]);
           break;
 
         default:
           panic_impossible ();
         }
     }
 
-  if (! error_state)
+  switch (type[0])
     {
-      switch (type[0])
-        {
-        case '(':
+    case '(':
+      {
+        if (n > 1 && type[1] == '.')
           {
-            if (n > 1 && type[1] == '.')
+            std::list<octave_value_list>::const_iterator p = idx.begin ();
+            octave_value_list key_idx = *++p;
+
+            assert (key_idx.length () == 1);
+
+            std::string key = key_idx(0).xstring_value ("assignment to class element failed");
+
+            map.assign (idx.front (), key, t_rhs);
+
+            count++;
+            retval = octave_value (this);
+          }
+        else
+          {
+            if (t_rhs.is_object () || t_rhs.is_map ())
               {
-                std::list<octave_value_list>::const_iterator p = idx.begin ();
-                octave_value_list key_idx = *++p;
+                octave_map rhs_map = t_rhs.xmap_value ("invalid class assignment");
 
-                assert (key_idx.length () == 1);
+                map.assign (idx.front (), rhs_map);
 
-                std::string key = key_idx(0).xstring_value ("assignment to class element failed");
+                count++;
+                retval = octave_value (this);
+              }
+            else
+              {
+                if (t_rhs.is_empty ())
+                  {
+                    map.delete_elements (idx.front ());
 
-                map.assign (idx.front (), key, t_rhs);
-
-                if (! error_state)
-                  {
                     count++;
                     retval = octave_value (this);
                   }
                 else
-                  gripe_failed_assignment ();
-              }
-            else
-              {
-                if (t_rhs.is_object () || t_rhs.is_map ())
-                  {
-                    octave_map rhs_map = t_rhs.map_value ();
-
-                    if (! error_state)
-                      {
-                        map.assign (idx.front (), rhs_map);
-
-                        if (! error_state)
-                          {
-                            count++;
-                            retval = octave_value (this);
-                          }
-                        else
-                          gripe_failed_assignment ();
-                      }
-                    else
-                      error ("invalid class assignment");
-                  }
-                else
-                  {
-                    if (t_rhs.is_empty ())
-                      {
-                        map.delete_elements (idx.front ());
-
-                        if (! error_state)
-                          {
-                            count++;
-                            retval = octave_value (this);
-                          }
-                        else
-                          gripe_failed_assignment ();
-                      }
-                    else
-                      error ("invalid class assignment");
-                  }
+                  error ("invalid class assignment");
               }
           }
-          break;
+      }
+      break;
 
-        case '.':
-          {
-            octave_value_list key_idx = idx.front ();
+    case '.':
+      {
+        octave_value_list key_idx = idx.front ();
 
-            assert (key_idx.length () == 1);
+        assert (key_idx.length () == 1);
 
-            std::string key = key_idx(0).string_value ();
+        std::string key = key_idx(0).string_value ();
 
-            if (t_rhs.is_cs_list ())
-              {
-                Cell tmp_cell = Cell (t_rhs.list_value ());
+        if (t_rhs.is_cs_list ())
+          {
+            Cell tmp_cell = Cell (t_rhs.list_value ());
 
-                // The shape of the RHS is irrelevant, we just want
-                // the number of elements to agree and to preserve the
-                // shape of the left hand side of the assignment.
+            // The shape of the RHS is irrelevant, we just want
+            // the number of elements to agree and to preserve the
+            // shape of the left hand side of the assignment.
 
-                if (numel () == tmp_cell.numel ())
-                  tmp_cell = tmp_cell.reshape (dims ());
+            if (numel () == tmp_cell.numel ())
+              tmp_cell = tmp_cell.reshape (dims ());
 
-                map.setfield (key, tmp_cell);
-              }
-            else
-              {
-                Cell tmp_cell(1, 1);
-                tmp_cell(0) = t_rhs.storable_value ();
-                map.setfield (key, tmp_cell);
-              }
+            map.setfield (key, tmp_cell);
+          }
+        else
+          {
+            Cell tmp_cell(1, 1);
+            tmp_cell(0) = t_rhs.storable_value ();
+            map.setfield (key, tmp_cell);
+          }
 
-            if (! error_state)
-              {
-                count++;
-                retval = octave_value (this);
-              }
-            else
-              gripe_failed_assignment ();
-          }
-          break;
+        count++;
+        retval = octave_value (this);
+      }
+      break;
 
-        case '{':
-          gripe_invalid_index_type (type_name (), type[0]);
-          break;
+    case '{':
+      gripe_invalid_index_type (type_name (), type[0]);
+      break;
 
-        default:
-          panic_impossible ();
-        }
+    default:
+      panic_impossible ();
     }
-  else
-    gripe_failed_assignment ();
 
   return retval;
 }
 
 idx_vector
 octave_class::index_vector (bool require_integers) const
 {
   idx_vector retval;
@@ -1824,44 +1789,39 @@ is derived.\n\
       octave_function *fcn = octave_call_stack::caller ();
 
       std::string id = args(1).xstring_value ("class: ID (class name) must be a string");
 
       if (fcn)
         {
           if (fcn->is_class_constructor (id) || fcn->is_class_method (id))
             {
-              octave_map m = args(0).map_value ();
+              octave_map m = args(0).xmap_value ("class: S must be a valid structure");
 
-              if (! error_state)
+              if (nargin == 2)
+                retval
+                  = octave_value (new octave_class
+                                  (m, id, std::list<std::string> ()));
+              else
                 {
-                  if (nargin == 2)
-                    retval
-                      = octave_value (new octave_class
-                                      (m, id, std::list<std::string> ()));
-                  else
-                    {
-                      octave_value_list parents = args.slice (2, nargin-2);
+                  octave_value_list parents = args.slice (2, nargin-2);
 
-                      retval
-                        = octave_value (new octave_class (m, id, parents));
-                    }
+                  retval
+                    = octave_value (new octave_class (m, id, parents));
+                }
 
-                  octave_class::exemplar_const_iterator it
-                    = octave_class::exemplar_map.find (id);
+              octave_class::exemplar_const_iterator it
+                = octave_class::exemplar_map.find (id);
 
-                  if (it == octave_class::exemplar_map.end ())
-                    octave_class::exemplar_map[id]
-                      = octave_class::exemplar_info (retval);
-                  else if (! it->second.compare (retval))
-                    error ("class: object of class '%s' does not match previously constructed objects",
-                           id.c_str ());
-                }
-              else
-                error ("class: S must be a valid structure");
+              if (it == octave_class::exemplar_map.end ())
+                octave_class::exemplar_map[id]
+                  = octave_class::exemplar_info (retval);
+              else if (! it->second.compare (retval))
+                error ("class: object of class '%s' does not match previously constructed objects",
+                       id.c_str ());
             }
           else
             error ("class: '%s' is invalid as a class name in this context",
                    id.c_str ());
         }
       else
         error ("class: invalid call from outside class constructor or method");
     }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -536,76 +536,66 @@ static octave_value_list
 class_fevalStatic (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   if (args.length () > 1 && args(0).type_name () == "object")
     {
       cdef_class cls (to_cdef (args(0)));
 
-      if (! error_state)
+      std::string meth_name = args(1).xstring_value ("fevalStatic: method name must be a string");
+
+      cdef_method meth = cls.find_method (meth_name);
+
+      if (meth.ok ())
         {
-          std::string meth_name = args(1).xstring_value ("fevalStatic: method name must be a string");
-
-          cdef_method meth = cls.find_method (meth_name);
-
-          if (meth.ok ())
-            {
-              if (meth.is_static ())
-                retval = meth.execute (args.splice (0, 2), nargout,
-                                       true, "fevalStatic");
-              else
-                error ("fevalStatic: method `%s' is not static",
-                       meth_name.c_str ());
-            }
+          if (meth.is_static ())
+            retval = meth.execute (args.splice (0, 2), nargout,
+                                   true, "fevalStatic");
           else
-            error ("fevalStatic: method not found: %s", meth_name.c_str ());
+            error ("fevalStatic: method `%s' is not static",
+                   meth_name.c_str ());
         }
       else
-        error ("fevalStatic: first argument must be a meta.class object");
+        error ("fevalStatic: method not found: %s", meth_name.c_str ());
     }
   else
-    error ("fevalStatic: invalid arguments");
+    error ("fevalStatic: first argument must be a meta.class object");
 
   return retval;
 }
 
 static octave_value_list
 class_getConstant (const octave_value_list& args, int /* nargout */)
 {
   octave_value_list retval;
 
   if (args.length () == 2 && args(0).type_name () == "object"
       && args(0).class_name () == "meta.class")
     {
       cdef_class cls = to_cdef (args(0));
 
-      if (! error_state)
+      std::string prop_name = args(1).xstring_value ("getConstant: property name must be a string");
+
+      cdef_property prop = cls.find_property (prop_name);
+
+      if (prop.ok ())
         {
-          std::string prop_name = args(1).xstring_value ("getConstant: property name must be a string");
-
-          cdef_property prop = cls.find_property (prop_name);
-
-          if (prop.ok ())
-            {
-              if (prop.is_constant ())
-                retval(0) = prop.get_value (true, "getConstant");
-              else
-                error ("getConstant: property `%s' is not constant",
-                       prop_name.c_str ());
-            }
+          if (prop.is_constant ())
+            retval(0) = prop.get_value (true, "getConstant");
           else
-            error ("getConstant: property not found: %s",
+            error ("getConstant: property `%s' is not constant",
                    prop_name.c_str ());
         }
       else
-        error ("getConstant: first argument must be a meta.class object");
+        error ("getConstant: property not found: %s",
+               prop_name.c_str ());
     }
   else
-    error ("getConstant: invalid arguments");
+    error ("getConstant: first argument must be a meta.class object");
 
   return retval;
 }
 
 #define META_CLASS_CMP(OP, CLSA, CLSB, FUN) \
 static octave_value_list \
 class_ ## OP (const octave_value_list& args, int /* nargout */) \
 { \
@@ -616,20 +606,17 @@ class_ ## OP (const octave_value_list& a
       && args(1).type_name () == "object" \
       && args(0).class_name () == "meta.class" \
       && args(1).class_name () == "meta.class") \
     { \
       cdef_class clsa = to_cdef (args(0)); \
 \
       cdef_class clsb = to_cdef (args(1)); \
 \
-      if (! error_state) \
-        retval(0) = FUN (CLSA, CLSB); \
-      else \
-        error (#OP ": arguments must be meta.class objects"); \
+      retval(0) = FUN (CLSA, CLSB); \
     } \
   else \
     error (#OP ": invalid arguments"); \
 \
   return retval; \
 }
 
 META_CLASS_CMP (lt, clsb, clsa, is_strict_superclass)
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1663,17 +1663,17 @@ convert_to_int_array (const Array<octave
 
   for (octave_idx_type i = 0; i < n; i++)
     retval.xelem (i) = octave_int<int> (A.xelem (i));
 
   return retval;
 }
 
 Array<int>
-octave_value::int_vector_value (bool force_string_conv, bool require_int,
+octave_value::int_vector_value (bool require_int, bool force_string_conv,
                                 bool force_vector_conversion) const
 {
   Array<int> retval;
 
   if (is_integer_type ())
     {
       if (is_int32_type ())
         retval = convert_to_int_array (int32_array_value ());
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -852,46 +852,64 @@ octave_execute_interpreter (void)
   execute_startup_files ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
   // Execute any code specified with --eval 'CODE'
   if (! code_to_eval.empty ())
     {
-      int parse_status = execute_eval_option_code (code_to_eval);
+      int parse_status = 0;
+
+      try
+        {
+          parse_status = execute_eval_option_code (code_to_eval);
+        }
+      catch (const octave_execution_exception&)
+        {
+          parse_status = 1;
+        }
 
       if (! persist)
         {
           quitting_gracefully = true;
 
-          clean_up_and_exit (parse_status || error_state ? 1 : 0);
+          clean_up_and_exit (parse_status);
         }
     }
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the script.
 
   int last_arg_idx = optind;
   int remaining_args = octave_cmdline_argc - last_arg_idx;
 
   if (remaining_args > 0)
     {
       // If we are running an executable script (#! /bin/octave) then
       // we should only see the args passed to the script.
 
-      intern_argv (remaining_args, octave_cmdline_argv+last_arg_idx);
+      int exit_status = 0;
+
+      try
+        {
+          intern_argv (remaining_args, octave_cmdline_argv+last_arg_idx);
 
-      execute_command_line_file (octave_cmdline_argv[last_arg_idx]);
+          execute_command_line_file (octave_cmdline_argv[last_arg_idx]);
+        }
+      catch (const octave_execution_exception&)
+        {
+          exit_status = 1;
+        }
 
       if (! persist)
         {
           quitting_gracefully = true;
 
-          clean_up_and_exit (error_state ? 1 : 0);
+          clean_up_and_exit (exit_status);
         }
     }
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // Now argv should have the full set of args.
