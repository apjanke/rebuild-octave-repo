# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1328560020 18000
#      Mon Feb 06 15:27:00 2012 -0500
# Branch stable
# Node ID 1ecfba4427ff208b4793a4ebd879e950ae581c70
# Parent  4d917a6a858bf6f657a3633c535d369e8ef777d6
workaround for apparent bug in GCC 4.1.2 (bug #30685)

* sighandlers.cc: Use GNULIB_NAMEPSACE:: instead of gnulib::.
Define away GNULIB_NAMESPACE if using GCC 4.1.2.

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -74,32 +74,44 @@ static bool Vsigterm_dumps_octave_core =
 // List of signals we have caught since last call to octave_signal_handler.
 static bool octave_signals_caught[NSIG];
 
 // Signal handler return type.
 #ifndef BADSIG
 #define BADSIG (void (*)(int))-1
 #endif
 
+// The following is a workaround for an apparent bug in GCC 4.1.2 and
+// possibly earlier versions.  See Octave bug report #30685 for details.
+#if defined (__GNUC__)
+# if ! (__GNUC__ > 4 \
+        || (__GNUC__ == 4 && (__GNUC_MINOR__ > 1 \
+                              || (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ > 2))))
+#  undef GNULIB_NAMESPACE
+#  define GNULIB_NAMESPACE
+#  warning "disabling GNULIB_NAMESPACE for signal functions -- consider upgrading to a current version of GCC"
+# endif
+#endif
+
 #define BLOCK_SIGNAL(sig, nvar, ovar) \
   do \
     { \
-      gnulib::sigemptyset (&nvar); \
-      gnulib::sigaddset (&nvar, sig); \
-      gnulib::sigemptyset (&ovar); \
-      gnulib::sigprocmask (SIG_BLOCK, &nvar, &ovar); \
+      GNULIB_NAMESPACE::sigemptyset (&nvar); \
+      GNULIB_NAMESPACE::sigaddset (&nvar, sig); \
+      GNULIB_NAMESPACE::sigemptyset (&ovar); \
+      GNULIB_NAMESPACE::sigprocmask (SIG_BLOCK, &nvar, &ovar); \
     } \
   while (0)
 
 #if !defined (SIGCHLD) && defined (SIGCLD)
 #define SIGCHLD SIGCLD
 #endif
 
 #define BLOCK_CHILD(nvar, ovar) BLOCK_SIGNAL (SIGCHLD, nvar, ovar)
-#define UNBLOCK_CHILD(ovar) gnulib::sigprocmask (SIG_SETMASK, &ovar, 0)
+#define UNBLOCK_CHILD(ovar) GNULIB_NAMESPACE::sigprocmask (SIG_SETMASK, &ovar, 0)
 
 // Called from octave_quit () to actually do something about the signals
 // we have caught.
 
 void
 octave_signal_handler (void)
 {
   // The list of signals is relatively short, so we will just go
@@ -180,17 +192,17 @@ my_friendly_exit (const char *sig_name, 
           MINGW_SIGNAL_CLEANUP ();
 
           exit (1);
         }
       else
         {
           octave_set_signal_handler (sig_number, SIG_DFL);
 
-          gnulib::raise (sig_number);
+          GNULIB_NAMESPACE::raise (sig_number);
         }
     }
 }
 
 sig_handler *
 octave_set_signal_handler (int sig, sig_handler *handler,
                            bool restart_syscalls)
 {
@@ -211,20 +223,20 @@ octave_set_signal_handler (int sig, sig_
 #if defined (SIGALRM)
   else
 #endif
   // FIXME -- Do we also need to explicitly disable SA_RESTART?
   if (restart_syscalls)
     act.sa_flags |= SA_RESTART;
 #endif
 
-  gnulib::sigemptyset (&act.sa_mask);
-  gnulib::sigemptyset (&oact.sa_mask);
+  GNULIB_NAMESPACE::sigemptyset (&act.sa_mask);
+  GNULIB_NAMESPACE::sigemptyset (&oact.sa_mask);
 
-  gnulib::sigaction (sig, &act, &oact);
+  GNULIB_NAMESPACE::sigaction (sig, &act, &oact);
 
   return oact.sa_handler;
 }
 
 static void
 generic_sig_handler (int sig)
 {
   my_friendly_exit (strsignal (sig), sig);
