# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1374589603 -7200
#      Tue Jul 23 16:26:43 2013 +0200
# Node ID 1118d566bcd4a897cfe6705b74fe0b7c62606067
# Parent  3e1b24a2454a8745a51b44497774f511880e9d73
surf.m, surfc.m, surfl.m, surfnorm.m: Update to use new __plt_get_axis_arg__.

* scripts/plot/surf.m, scripts/plot/surfl.m, scripts/plot/surfnorm.m:
Update to use new __plt_get_axis_arg__.  Rename h to hax.  Rename tmp to htmp.

* scripts/plot/surfc.m: Check __plt_get_axis_arg__ before calling newplot.
Remove obsolete code checking for input axis handle.  Use cellfun to eliminate
for loop.

diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -37,34 +37,36 @@
 ## surface object.
 ## @seealso{colormap, contour, meshgrid, mesh}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function retval = surf (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("surf", varargin{:});
+  [hax, varargin] = __plt_get_axis_arg__ ("surf", varargin{:});
 
-  oldh = gca ();
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
-    axes (h);
-    newplot ();
-    tmp = surface (varargin{:});
+    hax = newplot (hax);
+    
+    htmp = surface (varargin{:});
 
-    if (! ishold ())
-      set (h, "view", [-37.5, 30],
+    if (! ishold (hax))
+      set (hax, "view", [-37.5, 30],
            "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
   unwind_protect_cleanup
-    axes (oldh);
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
   end_unwind_protect
 
   if (nargout > 0)
-    retval = tmp;
+    retval = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ('default');
diff --git a/scripts/plot/surfc.m b/scripts/plot/surfc.m
--- a/scripts/plot/surfc.m
+++ b/scripts/plot/surfc.m
@@ -19,62 +19,68 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} surfc (@var{x}, @var{y}, @var{z})
 ## Plot a surface and contour given matrices @var{x}, and @var{y} from
 ## @code{meshgrid} and a matrix @var{z} corresponding to the @var{x} and
 ## @var{y} coordinates of the mesh.  If @var{x} and @var{y} are vectors,
 ## then a typical vertex is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus,
 ## columns of @var{z} correspond to different @var{x} values and rows of
 ## @var{z} correspond to different @var{y} values.
-## @seealso{meshgrid, surf, contour}
+## @seealso{ezsurfc, meshgrid, surf, contour}
 ## @end deftypefn
 
 function h = surfc (varargin)
 
-  newplot ();
-
-  tmp = surface (varargin{:});
-
-  ax = get (tmp, "parent");
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("surfc", varargin{:});
 
-  set (tmp, "facecolor", "flat");
-
-  if (! ishold ())
-    set (ax, "view", [-37.5, 30],
-         "xgrid", "on", "ygrid", "on", "zgrid", "on");
+  if (nargin < 1)
+    print_usage ();
   endif
 
-  drawnow ();
-  zmin = get (ax, "zlim")(1);
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
+  unwind_protect
+    hax = newplot (hax);
+    
+    htmp = surface (hax, varargin{:});
 
-  # don't pass axis handle and/or string arguments to __contour__()
-  stop_idx = nargin;
-  for i = 2 : nargin
-    if (ischar (varargin{i}))
-      stop_idx = i - 1;
-      break;
+    set (htmp, "facecolor", "flat");
+
+    if (! ishold ())
+      set (hax, "view", [-37.5, 30],
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
-  endfor
+
+    drawnow ();
 
-  start_idx = 1;
-  if (ishandle (varargin{1}))
-    start_idx = 2;
-  endif
+    # don't pass string arguments to __contour__()
+    stop_idx = find (cellfun ("isclass", varargin, "char"), 1);
+    if (isempty (stop_idx))
+      stop_idx = nargin;
+    else
+      stop_idx--;
+    endif
 
-  if (stop_idx - start_idx == 1 || stop_idx - start_idx == 3)
-    #don't pass a color matrix c to __contour__
-    stop_idx -= 1;
-  endif
+    if (stop_idx - 1 == 1 || stop_idx - 1 == 3)
+      ## Don't pass a color matrix c to __contour__
+      stop_idx -= 1;
+    endif
+
+    zmin = get (hax, "zlim")(1);
+    [~, htmp2] = __contour__ (hax, zmin, varargin{1:stop_idx});
 
-  [c, tmp2] = __contour__ (ax, zmin, varargin{start_idx:stop_idx});
+    htmp = [htmp; htmp2];
 
-  tmp = [tmp; tmp2];
+  unwind_protect_cleanup
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
+  end_unwind_protect
 
   if (nargout > 0)
-    h = tmp;
+    h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ('default');
diff --git a/scripts/plot/surfl.m b/scripts/plot/surfl.m
--- a/scripts/plot/surfl.m
+++ b/scripts/plot/surfl.m
@@ -64,22 +64,21 @@
 ## @end example
 ## @seealso{surf, diffuse, specular, surface}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function retval = surfl (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("surfl", varargin{:});
+  [hax, varargin] = __plt_get_axis_arg__ ("surfl", varargin{:});
 
-  oldh = gca ();
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
-    axes (h);
-    newplot ();
+    hax = newplot (hax);
 
     ## Check for lighting type.
     use_cdata = true;
     if (ischar (varargin{end}))
       lstr = tolower (varargin{end});
       if (strncmp (lstr, "light", 5))
         warning ("light method not supported (yet), using cdata method instead");
         ## This can be implemented when light objects are supported.
@@ -117,19 +116,19 @@ function retval = surfl (varargin)
         have_lv = true;
       elseif (len == 2)
         [lv(1), lv(2), lv(3)] = sph2cart ((lastarg(1) - 90) * pi/180, lastarg(2) * pi/180, 1.0);
         varargin(end) = [];
         have_lv = true;
       endif
     endif
 
-    htmp = surface (varargin{:});
-    if (! ishold ())
-      set (h, "view", [-37.5, 30],
+    htmp = surface ([varargin, "parent", hax]{:});
+    if (! ishold (hax))
+      set (hax, "view", [-37.5, 30],
            "xgrid", "on", "ygrid", "on", "zgrid", "on", "clim", [0 1]);
     endif
 
     ## Get view vector (vv).
     a = axis;
     [az, el] = view;
     vv = sph2cart ((az - 90) * pi/180.0, el * pi/180.0, 1.0);
 
@@ -138,34 +137,36 @@ function retval = surfl (varargin)
       Phi = 45.0 / 180.0 * pi;
       R = [cos(Phi), -sin(Phi), 0;
            sin(Phi),  cos(Phi), 0;
            0,          0,         1];
       lv = (R * vv.').';
     endif
 
     vn = get (htmp, "vertexnormals");
-    dar = get (h, "plotboxaspectratio");
+    dar = get (hax, "plotboxaspectratio");
     vn(:,:,1) *= dar(1);
     vn(:,:,2) *= dar(2);
     vn(:,:,3) *= dar(3);
 
     ## Normalize vn.
     vn = vn ./ repmat (sqrt (sumsq (vn, 3)), [1, 1, 3]);
     [nr, nc] = size (get (htmp, "zdata"));
 
     ## Ambient, diffuse, and specular term.
     cdata = (r(1) * ones (nr, nc)
              + r(2) * diffuse  (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv)
              + r(3) * specular (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv, vv, r(4)));
 
     set (htmp, "cdata", cdata ./ sum (r(1:3)));
 
   unwind_protect_cleanup
-    axes (oldh);
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
   end_unwind_protect
 
   if (nargout > 0)
     retval = htmp;
   endif
 
 endfunction
 
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -48,18 +48,17 @@
 ## @example
 ## surfnorm (peaks (25));
 ## @end example
 ## @seealso{surf, quiver3}
 ## @end deftypefn
 
 function [Nx, Ny, Nz] = surfnorm (varargin)
 
-  [h, varargin, nargin] = __plt_get_axis_arg__ ((nargout != 0), "surfnorm",
-                                                varargin{:});
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("surfnorm", varargin{:});
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
   endif
 
   if (nargin == 1)
     z = varargin{1};
     [x, y] = meshgrid (1:rows (z), 1:columns (z));
@@ -110,34 +109,37 @@ function [Nx, Ny, Nz] = surfnorm (vararg
 
   ## Normalize the normal vectors
   len = sqrt (nx.^2 + ny.^2 + nz.^2);
   nx = nx ./ len;
   ny = ny ./ len;
   nz = nz ./ len;
 
   if (nargout == 0)
-    oldh = gca ();
-    unwind_protect
-      axes (h);
-      newplot ();
-      surf (x, y, z, varargin{ioff:end});
-      old_hold_state = get (h, "nextplot");
-      unwind_protect
-        set (h, "nextplot", "add");
-        plot3 ([x(:)'; x(:).' + nx(:).' ; NaN(size(x(:).'))](:),
-               [y(:)'; y(:).' + ny(:).' ; NaN(size(y(:).'))](:),
-               [z(:)'; z(:).' + nz(:).' ; NaN(size(z(:).'))](:),
-               varargin{ioff:end});
-      unwind_protect_cleanup
-        set (h, "nextplot", old_hold_state);
-      end_unwind_protect
-    unwind_protect_cleanup
-      axes (oldh);
-    end_unwind_protect
+   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
+   unwind_protect
+     hax = newplot (hax);
+     
+     surf (hax, x, y, z, varargin{ioff:end});
+     old_hold_state = get (hax, "nextplot");
+     unwind_protect
+       set (hax, "nextplot", "add");
+       plot3 ([x(:)'; x(:).' + nx(:).' ; NaN(size(x(:).'))](:),
+              [y(:)'; y(:).' + ny(:).' ; NaN(size(y(:).'))](:),
+              [z(:)'; z(:).' + nz(:).' ; NaN(size(z(:).'))](:),
+              varargin{ioff:end});
+     unwind_protect_cleanup
+       set (hax, "nextplot", old_hold_state);
+     end_unwind_protect
+     
+   unwind_protect_cleanup
+     if (! isempty (oldfig))
+       set (0, "currentfigure", oldfig);
+     endif
+   end_unwind_protect
   else
     Nx = nx;
     Ny = ny;
     Nz = nz;
   endif
 
 endfunction
 
