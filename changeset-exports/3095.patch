# HG changeset patch
# User jwe
# Date 879479972 0
#      Fri Nov 14 03:59:32 1997 +0000
# Node ID 528f4270e904b880c1f31b4d9f8ab9b1ee7f1db2
# Parent  f8e971946a4f5699dee991d49bec8b9361d72b0d
[project @ 1997-11-14 03:58:45 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2361,39 +2361,39 @@ ComplexMatrix::sumsq (void) const
     {
       if (nr == 1)
 	{
 	  retval.resize (1, 1);
 	  retval.elem (0, 0) = 0.0;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      Complex d = elem (0, j);
-	      retval.elem (0, 0) += d * d;
+	      retval.elem (0, 0) += d * conj (d);
 	    }
 	}
       else if (nc == 1)
 	{
 	  retval.resize (1, 1);
 	  retval.elem (0, 0) = 0.0;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      Complex d = elem (i, 0);
-	      retval.elem (0, 0) += d * d;
+	      retval.elem (0, 0) += d * conj (d);
 	    }
 	}
       else
 	{
 	  retval.resize (1, nc);
 	  for (int j = 0; j < nc; j++)
 	    {
 	      retval.elem (0, j) = 0.0;
 	      for (int i = 0; i < nr; i++)
 		{
 		  Complex d = elem (i, j);
-		  retval.elem (0, j) += d * d;
+		  retval.elem (0, j) += d * conj (d);
 		}
 	    }
 	}
     }
   return retval;
 }
 
 ComplexColumnVector
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+Thu Nov 13 21:57:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CMatrix.cc (sumsq): Compute equivalent of sum (x .* conj (x))
+
 Thu Oct  2 17:13:02 1997  Mumit Khan  <khan@dhaka.xraylith.wisc.edu>
 
 	* CRowVector.cc (linspace): Removed attempt for implicit conversion 
 	to complex<double>(int) instead of complex<double>(double).
 
 	* lo-mappers.cc (atanh): Ditto.
 
 Thu Jul 31 22:13:54 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+Thu Nov 13 16:20:40 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (sumsq): Fix doc string.
+
+	* parse.y (Fsource): Call parse_fcn_file, not parse_and_execute.
+
 Tue Oct  7 16:51:01 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defun-int.h (DEFINE_FUN_INSTALLER_FUN): Set installed to true
 	after installing the function.
 
 Thu Sep 25 10:17:26 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/filter.cc (Ffilter): Return second output value
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -683,17 +683,23 @@ DEFUN (sum, args, ,
     }
   else
     print_usage ("sum");
 
   return retval;
 }
 
 DEFUN (sumsq, args, ,
-  "sumsq (X): sum of squares of elements")
+  "sumsq (X): sum of squares of elements.\n\
+\n\
+This function is equivalent to computing\n\
+\n\
+  sum (X .* conj (X))\n\
+\n\
+but it uses less memory and avoids calling conj if X is real.")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2868,17 +2868,17 @@ script file but without requiring the fi
   if (nargin == 1)
     {
       string file = args(0).string_value ();
 
       if (! error_state)
 	{
 	  file = file_ops::tilde_expand (file);
 
-	  parse_and_execute (file, false, "source");
+	  parse_fcn_file (true, file);
 
 	  if (error_state)
 	    error ("source: error sourcing file `%s'", file.c_str ());
 	}
       else
 	error ("source: expecting file name as argument");
     }
   else
