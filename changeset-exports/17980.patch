# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1385070730 18000
#      Thu Nov 21 16:52:10 2013 -0500
# Node ID 824c05a6d3ecb607ca64e90fccb82d2727ddce48
# Parent  a761ba02a52fde5c1b0ee974bb1c9db4ebb42695
avoid errors for int64 ops implemented with long double (bug #40607)

* libgu/src/module.mk (AM_CPPFLAGS): Add -I$(top_srcdir)/libgnu to the
list.
* oct-inttypes.h: Include <fpucw.h> from gnulib.
Save and restore floating point control word for long double ops.

diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -184,17 +184,17 @@ src_libgui_src_la_CPPFLAGS = \
   -I$(top_builddir)/liboctave/numeric -I$(top_srcdir)/liboctave/numeric \
   -I$(top_builddir)/liboctave/operators -I$(top_srcdir)/liboctave/operators \
   -I$(top_srcdir)/liboctave/system \
   -I$(top_srcdir)/liboctave/util \
   -I$(top_builddir)/libinterp -I$(top_srcdir)/libinterp \
   -I$(top_builddir)/libinterp/parse-tree -I$(top_srcdir)/libinterp/parse-tree \
   -I$(top_builddir)/libinterp/corefcn -I$(top_srcdir)/libinterp/corefcn \
   -I$(top_srcdir)/libinterp/octave-value \
-  -I$(top_builddir)/libgnu
+  -I$(top_builddir)/libgnu -I$(top_srcdir)/libgnu
 
 src_libgui_src_la_CFLAGS = $(AM_CFLAGS) $(WARN_CFLAGS)
 
 src_libgui_src_la_CXXFLAGS = $(AM_CXXFLAGS) $(WARN_CXXFLAGS)
 
 noinst_LTLIBRARIES += src/libgui-src.la
 
 CLEANFILES += \
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -24,16 +24,18 @@ along with Octave; see the file COPYING.
 #if !defined (octave_oct_inttypes_h)
 #define octave_oct_inttypes_h 1
 
 #include <cstdlib>
 
 #include <limits>
 #include <iosfwd>
 
+#include <fpucw.h>
+
 #include "lo-traits.h"
 #include "lo-math.h"
 #include "lo-mappers.h"
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 inline long double xround (long double x) { return roundl (x); }
 inline long double xisnan (long double x)
 { return xisnan (static_cast<double> (x)); }
@@ -178,18 +180,26 @@ public:
   // they lose precision.
   // If we have long doubles, use them...
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 #define DEFINE_LONG_DOUBLE_CMP_OP(T1, T2) \
   template <class xop> \
   static bool \
   mop (T1 x, T2 y) \
     { \
-      return xop::op (static_cast<long double> (x), \
-                      static_cast<long double> (y)); \
+      DECL_LONG_DOUBLE_ROUNDING \
+ \
+      BEGIN_LONG_DOUBLE_ROUNDING ();\
+ \
+      bool retval = xop::op (static_cast<long double> (x), \
+                             static_cast<long double> (y)); \
+ \
+      END_LONG_DOUBLE_ROUNDING (); \
+ \
+      return retval; \
     }
 #else
   // ... otherwise, use external handlers
 
   // FIXME: We could declare directly the mop methods as external,
   // but we can't do this because bugs in gcc (<= 4.3) prevent
   // explicit instantiations later in that case.
 #define DEFINE_LONG_DOUBLE_CMP_OP(T1, T2) \
@@ -406,23 +416,31 @@ public:
 };
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 // Handle 64-bit multiply using long double
 template <>
 inline uint64_t
 octave_int_arith_base<uint64_t, false>:: mul (uint64_t x, uint64_t y)
 {
+  uint64_t retval;
+  DECL_LONG_DOUBLE_ROUNDING
+
+  BEGIN_LONG_DOUBLE_ROUNDING ();
+
   long double p = static_cast<long double> (x) * static_cast<long double> (y);
+
   if (p > static_cast<long double> (octave_int_base<uint64_t>::max_val ()))
-    {
-      return octave_int_base<uint64_t>::max_val ();
-    }
+    retval = octave_int_base<uint64_t>::max_val ();
   else
-    return static_cast<uint64_t> (p);
+    retval = static_cast<uint64_t> (p);
+
+  END_LONG_DOUBLE_ROUNDING ();
+
+  return retval;
 }
 #else
 // Special handler for 64-bit integer multiply.
 template <>
 OCTAVE_API uint64_t
 octave_int_arith_base<uint64_t, false>::mul (uint64_t, uint64_t);
 #endif
 
@@ -694,30 +712,36 @@ public:
 };
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 // Handle 64-bit multiply using long double
 template <>
 inline int64_t
 octave_int_arith_base<int64_t, true>:: mul (int64_t x, int64_t y)
 {
+  uint64_t retval;
+  DECL_LONG_DOUBLE_ROUNDING
+
+  BEGIN_LONG_DOUBLE_ROUNDING ();
+
   long double p = static_cast<long double> (x) * static_cast<long double> (y);
+
   // NOTE: We could maybe do it with a single branch if HAVE_FAST_INT_OPS,
   // but it would require one more runtime conversion, so the question is
   // whether it would really be faster.
   if (p > static_cast<long double> (octave_int_base<int64_t>::max_val ()))
-    {
-      return octave_int_base<int64_t>::max_val ();
-    }
+    retval = octave_int_base<int64_t>::max_val ();
   else if (p < static_cast<long double> (octave_int_base<int64_t>::min_val ()))
-    {
-      return octave_int_base<int64_t>::min_val ();
-    }
+    retval = octave_int_base<int64_t>::min_val ();
   else
-    return static_cast<int64_t> (p);
+    retval = static_cast<int64_t> (p);
+
+  END_LONG_DOUBLE_ROUNDING ();
+
+  return retval;
 }
 #else
 // Special handler for 64-bit integer multiply.
 template <>
 OCTAVE_API int64_t
 octave_int_arith_base<int64_t, true>::mul (int64_t, int64_t);
 #endif
 
@@ -981,29 +1005,57 @@ typedef octave_int<uint64_t> octave_uint
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 // Handle mixed op using long double
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP) \
   OCTAVE_INT_DOUBLE_BIN_OP0(OP) \
   template <> \
   inline octave_int64 \
   operator OP (const double& x, const octave_int64& y) \
-  { return octave_int64 (x OP static_cast<long double> (y.value ())); } \
+  { \
+    octave_int64 retval; \
+    DECL_LONG_DOUBLE_ROUNDING \
+    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    retval = octave_int64 (x OP static_cast<long double> (y.value ())); \
+    END_LONG_DOUBLE_ROUNDING (); \
+    return retval; \
+  } \
   template <> \
   inline octave_uint64 \
   operator OP (const double& x, const octave_uint64& y) \
-  { return octave_uint64 (x OP static_cast<long double> (y.value ())); } \
+  { \
+    octave_uint64 retval; \
+    DECL_LONG_DOUBLE_ROUNDING \
+    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    retval = octave_uint64 (x OP static_cast<long double> (y.value ())); \
+    END_LONG_DOUBLE_ROUNDING (); \
+    return retval; \
+  } \
   template <> \
   inline octave_int64 \
   operator OP (const octave_int64& x, const double& y) \
-  { return octave_int64 (static_cast<long double> (x.value ()) OP y); } \
+  { \
+    octave_int64 retval; \
+    DECL_LONG_DOUBLE_ROUNDING \
+    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    retval = octave_int64 (static_cast<long double> (x.value ()) OP y);   \
+    END_LONG_DOUBLE_ROUNDING (); \
+    return retval; \
+  } \
   template <> \
   inline octave_uint64 \
   operator OP (const octave_uint64& x, const double& y) \
-  { return octave_uint64 (static_cast<long double> (x.value ()) OP y); }
+  { \
+    octave_uint64 retval; \
+    DECL_LONG_DOUBLE_ROUNDING \
+    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    retval = octave_uint64 (static_cast<long double> (x.value ()) OP y); \
+    END_LONG_DOUBLE_ROUNDING (); \
+    return retval; \
+  }
 
 #else
 // external handlers
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP) \
   OCTAVE_INT_DOUBLE_BIN_OP0(OP) \
   template <> \
   OCTAVE_API octave_int64 \
   operator OP (const double&, const octave_int64&); \
