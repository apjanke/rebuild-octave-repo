# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231845381 -3600
#      Tue Jan 13 12:16:21 2009 +0100
# Node ID 8ba2ee57c594488f06b5725dfcbce5ac53954f1e
# Parent  d437e8dc18fa52f1b0e23e4a1a0bceeacadd054c
remove qsort in favor of sort

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -86,21 +86,16 @@ protected:
 	for (octave_idx_type i = 0; i < len; i++)
 	  data[i] = val;
       }
 
     T& elem (octave_idx_type n) { return data[n]; }
 
     T elem (octave_idx_type n) const { return data[n]; }
 
-    void qsort (int (*compare) (const void *, const void *))
-      {
-	octave_qsort (data, static_cast<size_t> (len), sizeof (T), compare);
-      }
-
   private:
 
     // No assignment!
 
     ArrayRep& operator = (const ArrayRep& a);
   };
 
   //--------------------------------------------------------------------
@@ -413,25 +408,16 @@ public:
   Array<T> hermitian (T (*fcn) (const T&) = 0) const;
 
   const T *data (void) const { return rep->data; }
 
   const T *fortran_vec (void) const { return data (); }
 
   T *fortran_vec (void);
 
-  Array<T>& qsort (int (*compare) (const void *, const void *))
-    {
-      make_unique ();
-
-      rep->qsort (compare);
-
-      return *this;
-    }
-
   int ndims (void) const { return dimensions.length (); }
 
   void maybe_delete_dims (void);
 
   // Indexing without resizing.
 
   Array<T> index (const idx_vector& i) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-01-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array::ArrayRep::qsort): Remove.
+	(Array::qsort): Remove.
+	* glob-match.cc (glob_match::glob): qsort -> sort.
+	* str-vec.cc (string_vector::compare): Remove.
+	* str-vec.h (string_vector::compare): Remove decl.
+	(string_vector::qsort): Rename to sort, call Array::sort.
+
 2008-12-23  David Bateman  <dbateman@free.fr>
 
 	* eigs-base.cc: New file with template wrapper for ARPACK.
 	* Makefile.in (TEMPLATE_SRC): Add it here.
 
 2008-12-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (rec_permute_helper): New class.
diff --git a/liboctave/glob-match.cc b/liboctave/glob-match.cc
--- a/liboctave/glob-match.cc
+++ b/liboctave/glob-match.cc
@@ -120,17 +120,17 @@ glob_match::glob (void)
 		    retval[k++] = matches[j];
 		}
 
 	      globfree (&glob_info);
 	    }
 	}
     }
 
-  return retval.qsort ();
+  return retval.sort ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -78,25 +78,16 @@ string_vector::string_vector (const char
 
 string_vector::string_vector (const char * const *s, octave_idx_type n)
   : Array<std::string> (n)
 {
   for (octave_idx_type i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
-int
-string_vector::compare (const void *a_arg, const void *b_arg)
-{
-  const std::string *a = static_cast<const std::string *>  (a_arg);
-  const std::string *b = static_cast<const std::string *> (b_arg);
-
-  return a->compare (*b);
-}
-
 string_vector&
 string_vector::uniq (void)
 {
   octave_idx_type len = length ();
 
   if (len > 0)
     {
       octave_idx_type k = 0;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -79,21 +79,19 @@ public:
 
     return longest;
   }
 
   std::string& operator[] (octave_idx_type i) { return Array<std::string>::elem (i); }
 
   std::string operator[] (octave_idx_type i) const { return Array<std::string>::elem (i); }
 
-  static int compare (const void *a_arg, const void *b_arg);
-
-  string_vector& qsort (bool make_uniq = false)
+  string_vector& sort (bool make_uniq = false)
   {
-    Array<std::string>::qsort (compare);
+    Array<std::string>::sort ();
 
     if (make_uniq)
       uniq ();
 
     return *this;
   }
 
   string_vector& uniq (void);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-01-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dirfns.cc (Freadddir): qsort -> sort.
+	* graphics.cc (maybe_set_children): Dtto.
+	* help.cc (simple_help): Dtto.
+	* input.cc (generate_possible_completions): Dtto.
+	* oct_map.cc (keys_ok): Dtto.
+	* ov-fcn-inline.cc (Finline): Dtto.
+	* variables.cc (Fisrawcommand): Dtto.
+
 2009-01-12  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (maximum_braindamage): Set confirm_recursive_rmdir to
 	false.
 
 	* strfns.cc (Fstrcmp, Fstrncmp): Simplify by initializing all
 	elements of output to false with constructor argument.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -183,17 +183,17 @@ system-dependent error message.\n\
 	gripe_wrong_type_arg ("readdir", args(0));
       else
 	{
 	  dir_entry dir (dirname);
 
 	  if (dir)
 	    {
 	      string_vector dirlist = dir.read ();
-	      retval(0) = Cell (dirlist.qsort ());
+	      retval(0) = Cell (dirlist.sort ());
 	      retval(1) = 0.0;
 	    }
 	  else
 	    {
 	      retval(2) = dir.error ();
 	    }
 	}
     }
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1515,41 +1515,32 @@ void
 base_graphics_backend::object_destroyed (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   object_destroyed (go);
 }
 // ---------------------------------------------------------------------
 
-static int
-compare (const void *a_arg, const void *b_arg)
-{
-  double a = *(static_cast<const double *> (a_arg));
-  double b = *(static_cast<const double *> (b_arg));
-
-  return a > b ? 1 : (a < b) ? -1 : 0;
-}
-
 static Matrix
 maybe_set_children (const Matrix& kids, const octave_value& val)
 {
   const Matrix new_kids = val.matrix_value ();
 
   bool ok = true;
 
   if (! error_state)
     {
       if (kids.numel () == new_kids.numel ())
 	{
 	  Matrix t1 = kids;
 	  Matrix t2 = new_kids;
 
-	  t1.qsort (compare);
-	  t2.qsort (compare);
+	  t1.sort ();
+	  t2.sort ();
 
 	  if (t1 != t2)
 	    ok = false;
 	}
       else
 	ok = false;
 
       if (! ok)
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -641,17 +641,17 @@ display_names_from_help_list (std::ostre
 			      const char *desc)
 {
   string_vector symbols = names (list);
 
   if (! symbols.empty ())
     {
       os << "\n*** " << desc << ":\n\n";
 
-      symbols.qsort ();
+      symbols.sort ();
 
       symbols.list_in_columns (os);
     }
 }
 
 static void
 display_symtab_names (std::ostream& os, const std::list<std::string>& names,
 		      const std::string& desc)
@@ -688,17 +688,17 @@ simple_help (void)
   load_path::display (octave_stdout);
 
   string_vector autoloaded = autoloaded_functions ();
 
   if (! autoloaded.empty ())
     {
       octave_stdout << "\n*** autoloaded functions:\n\n";
 
-      autoloaded.qsort ();
+      autoloaded.sort ();
 
       autoloaded.list_in_columns (octave_stdout);
     }
 }
 
 static int
 try_info (const std::string& nm)
 {
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -442,17 +442,17 @@ generate_possible_completions (const std
 
   if (looks_like_struct (text))
     names = generate_struct_completions (text, prefix, hint);
   else
     names = make_name_list ();
 
   // Sort and remove duplicates.
 
-  names.qsort (true);
+  names.sort (true);
 
   return names;
 }
 
 static std::string
 generate_completion (const std::string& text, int state)
 {
   std::string retval;
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -250,18 +250,18 @@ keys_ok (const Octave_map& a, const Octa
 
   if (a.nfields () == 0)
     {
       keys = b.keys ();
       retval = true;
     }
   else
     {
-      string_vector a_keys = a.keys().qsort ();
-      string_vector b_keys = b.keys().qsort ();
+      string_vector a_keys = a.keys().sort ();
+      string_vector b_keys = b.keys().sort ();
 
       octave_idx_type a_len = a_keys.length ();
       octave_idx_type b_len = b_keys.length ();
 
       if (a_len == b_len)
 	{
 	  for (octave_idx_type i = 0; i < a_len; i++)
 	    {
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -706,17 +706,17 @@ If the second argument is an integer @va
 			fargs.append (tmp_arg);
 
 		      tmp_arg = std::string ();
 		      is_arg = false;
 		    }
 		}
 
 	      // Sort the arguments into ascii order.
-	      fargs.qsort ();
+	      fargs.sort ();
 	    }
 	  else if (nargin == 2 && args(1).is_numeric_type ())
 	    {
 	      int n = args(1).int_value ();
 
 	      if (! error_state)
 		{
 		  if (n >= 0)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -203,17 +203,17 @@ is omitted, return a list of identifiers
     {
       string_vector lst (command_set.size ());
 
       int i = 0;
       for (std::set<std::string>::const_iterator p = command_set.begin ();
 	   p != command_set.end (); p++)
 	lst[i++] = *p;
 
-      retval = Cell (lst.qsort ());
+      retval = Cell (lst.sort ());
     }
   else if (nargin == 1)
     {
       string_vector argv = args.make_argv ("iscommand");
 	  
       if (! error_state)
 	{
 	  std::string s = argv[1];
@@ -344,17 +344,17 @@ raw input commands with mark_as_rawcomma
       string_vector lst (rawcommand_set.size());
       
       int i = 0;
       for (std::set<std::string>::const_iterator p = rawcommand_set.begin ();
 	   p != rawcommand_set.end ();
 	   p++)
 	lst[i++] = *p;
 
-      retval = Cell (lst.qsort ());
+      retval = Cell (lst.sort ());
     }
   else if (nargin == 1)
     {
       string_vector argv = args.make_argv ("israwcommand");
 	  
       if (! error_state)
 	{
 	  std::string s = argv[1];
