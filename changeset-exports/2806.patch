# HG changeset patch
# User jwe
# Date 858057205 0
#      Tue Mar 11 05:13:25 1997 +0000
# Node ID 187d5321cfa3de4db5ec3534cca7812fc689e11b
# Parent  68e6d0c93fc8de97cf188a2fa13223929ee96fa5
[project @ 1997-03-11 05:13:15 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,21 +1,69 @@
+Mon Mar 10 22:38:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (clean): Delete .oct files too.
+
+	* toplev.cc (Vdefault_eval_print_flag): New static variable.
+	(eval_string): New arg, print.
+	(Feval): Pass Vdefault_eval_print_flag to eval_string.
+	(default_eval_print_flag): New function.
+	(symbols_of_toplev): New function.
+
+	* variables.cc (install_builtin_variables): Call it.
+
+	* pt-exp.h, pt-exp.cc (class tree_boolean_expression): Rename enum
+	fields `and' and `or' to `bool_and' and `bool_or'.
+	(tree_unary_expression): Rename enum field `not' to `unot'.
+	(class tree_binary_expression): Rename enum fields `and' and `or'
+	to `el_and' and `el_or'.
+	* parse.y: Change all uses.
+
+	* time.cc (extract_tm): Truncate field values instead of rounding.
+	(gmtime, localtime): Likewise, for timeval.
+
+	* ov.h (class octave_value): Delete unused variable freeptr.
+
+	* mappers.cc: Delete functions that are already in
+	liboctave/lo-mappers.cc.
+
+	* oct-strstrm.cc (octave_base_strstream::tell): Use const_cast,
+	not static_cast.
+
+	* help.cc (help_from_list): Add missing const qualifiers.
+	* help.h (struct help_list): Likewise.
+	* lex.l (match_any, plot_style_token): Likewise.
+	* load-save.cc (extract_keyword, ascii_save_type): Likewise.
+	* oct-hist.cc (mk_tmp_hist_file): Likewise.
+	* octave.cc (execute_startup_files): Likewise.
+	* octave.gperf (struct octave_kw): Likewise.
+	* pr-output.cc (pr_any_float): Likewise.
+	* pt-mvr.cc (tree_index_expression::eval_error): Likewise.
+	* pt-exp-base.h, pt-exp.h, pt-exp.cc: Likewise.
+	* parse.y: Likewise.
+
 Sun Mar  9 03:46:45 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	 * Map.cc, data.cc, dirfns.cc, dynamic-ld.cc, file-io.cc,
-	 fsolve.cc, getgrent.cc, getpwent.cc, getrusage.cc, help.cc,
-	 input.cc, load-save.cc, mappers.cc, minmax.cc, npsol.cc,
-	 oct-fstrm.cc, oct-procbuf.h, oct-stdstrm.cc, oct-stdstrm.h,
-	 oct-stream.cc, oct-stream.h, oct-strstrm.cc, octave.cc,
-	 ov-base.h, ov-range.cc, ov-typeinfo.cc, ov.cc, pr-output.cc,
-	 pt-cmd.cc, pt-exp.cc, pt-fcn.cc, pt-fvc.cc, pt-mat.cc,
-	 pt-misc.cc, pt-plot.cc, qpsol.cc, quad.cc, sort.cc, strfns.cc,
-	 symtab.cc, syscalls.cc, sysdep.cc, time.cc, toplev.cc,
-	 unwind-prot.cc, unwind-prot.h, variables.cc, xpow.cc:
-	 Use `static_cast<T> (val)' instead of old C-style `(T) val' casts.
+	* pt-exp-base.h (tree_expression): Delete extra comma at end of list.
+
+	* dirfns.cc error.cc file-io.cc fsolve.cc input.cc load-save.cc
+	npsol.cc pt-fcn.cc qpsol.cc quad.cc syscalls.cc toplev.cc
+	variables.cc: Eliminate embedded newlines in string constants.
+
+	* Map.cc, data.cc, dirfns.cc, dynamic-ld.cc, file-io.cc,
+	fsolve.cc, getgrent.cc, getpwent.cc, getrusage.cc, help.cc,
+	input.cc, load-save.cc, mappers.cc, minmax.cc, npsol.cc,
+	oct-fstrm.cc, oct-procbuf.h, oct-stdstrm.cc, oct-stdstrm.h,
+	oct-stream.cc, oct-stream.h, oct-strstrm.cc, octave.cc,
+	ov-base.h, ov-range.cc, ov-typeinfo.cc, ov.cc, pr-output.cc,
+	pt-cmd.cc, pt-exp.cc, pt-fcn.cc, pt-fvc.cc, pt-mat.cc,
+	pt-misc.cc, pt-plot.cc, qpsol.cc, quad.cc, sort.cc, strfns.cc,
+	symtab.cc, syscalls.cc, sysdep.cc, time.cc, toplev.cc,
+	unwind-prot.cc, unwind-prot.h, variables.cc, xpow.cc:
+	Use `static_cast<T> (val)' instead of old C-style `(T) val' casts.
 
 Sat Mar  8 02:35:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (save_ascii_data, save_three_d): Where appropriate,
 	use bool instead of int.
 	(save_binary_data, save_mat_binary_data, save_ascii_data):
 	Print warning instead of error for wrong type arg.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -313,17 +313,17 @@ uninstall:
 
 tags: $(SOURCES) $(DLD_SRC) $(TI_SRC)
 	ctags $(SOURCES) $(DLD_SRC) $(TI_SRC)
 
 TAGS: $(SOURCES) $(DLD_SRC) $(TI_SRC)
 	etags $(SOURCES) $(DLD_SRC) $(TI_SRC)
 
 clean:
-	rm -f *.a *.o *.d *.df pic/*.o builtins.cc defaults.h oct-conf.h
+	rm -f *.a *.o *.d *.df *.oct pic/*.o builtins.cc defaults.h oct-conf.h
 	if $(SHARED_LIBS); then rm -f *.$(SHLEXT); fi
 .PHONY: clean
 
 mostlyclean:
 	rm -f *.o pic/*.o
 .PHONY: mostlyclean
 
 distclean: clean
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -87,16 +87,19 @@ string Vprogram_name;
 string Vuser_name;
 
 // Name of the host we are running on.
 string Vhost_name;
 
 // User's home directory.
 string Vhome_directory;
 
+// Nonzero means we print 
+static bool Vdefault_eval_print_flag = true;
+
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're returning from a function.
 extern int returning;
 
 // Nonzero means we are using readline.
 // (--no-line-editing)
@@ -579,29 +582,28 @@ eval_string (const string& s, int print,
   octave_value_list tmp = eval_string (s, print, parse_status, 1);
 
   retval = tmp(0);
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const octave_value& arg, int& parse_status, int nargout)
+eval_string (const octave_value& arg, int print, int& parse_status,
+	     int nargout)
 {
   string s = arg.string_value ();
 
   if (error_state)
     {
       error ("eval: expecting string argument");
       return -1.0;
     }
 
-  // Yes Virginia, we always print here...
-
-  return eval_string (s, 1, parse_status, nargout);
+  return eval_string (s, print, parse_status, nargout);
 }
 
 DEFUN (eval, args, nargout,
   "eval (TRY, CATCH)\n\
 \n\
 Evaluate the string TRY as octave code.  If that fails, evaluate the\n\
 string CATCH.")
 {
@@ -616,30 +618,31 @@ string CATCH.")
       if (nargin > 1)
 	{
 	  unwind_protect_int (buffer_error_messages);
 	  buffer_error_messages = 1;
 	}
 
       int parse_status = 0;
 
-      retval = eval_string (args(0), parse_status, nargout);
+      retval = eval_string (args(0), 0, parse_status, nargout);
 
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
 
 	  // Set up for letting the user print any messages from
 	  // errors that occurred in the first part of this eval().
 
 	  buffer_error_messages = 0;
 	  bind_global_error_variable ();
 	  add_unwind_protect (clear_global_error_variable, 0);
 
-	  eval_string (args(1), parse_status, nargout);
+	  eval_string (args(1), Vdefault_eval_print_flag,
+		       parse_status, nargout);
 
 	  retval = octave_value_list ();
 	}
 
       run_unwind_frame ("Feval");
     }
   else
     print_usage ("eval");
@@ -924,16 +927,17 @@ information.")
     retval = octave_value (m);
   else
     print_usage ("octave_config_info");
 
   return retval;
 }
 
 #if defined (__GNUG__) && defined (DEBUG_NEW_DELETE)
+
 int debug_new_delete = 0;
 
 typedef void (*vfp)(void);
 extern vfp __new_handler;
 
 void *
 __builtin_new (size_t sz)
 {
@@ -959,15 +963,33 @@ void
 __builtin_delete (void *ptr)
 {
   if (debug_new_delete)
     cout << "__builtin_delete: " << ptr << endl;
 
   if (ptr)
     free (ptr);
 }
+
 #endif
 
+static int
+default_eval_print_flag (void)
+{
+  Vdefault_eval_print_flag = check_preference ("default_eval_print_flag");
+
+  return 0;
+}
+
+void
+symbols_of_toplev (void)
+{
+  DEFVAR (default_eval_print_flag, 1.0, 0, default_eval_print_flag,
+    "If the value of this variable is nonzero, Octave will print the\n\
+results of commands executed by eval() that do not end with semicolons.");
+
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -47,16 +47,19 @@ extern octave_value
 eval_string (const string&, int print, int& parse_status);
 
 extern int
 main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
+extern void
+symbols_of_toplev (void);
+
 // argv[0] for this program.
 extern string Vprogram_invocation_name;
 
 // Cleaned-up name of this program, not including path information.
 extern string Vprogram_name;
 
 // Login name for user running this program.
 extern string Vuser_name;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -96,17 +96,17 @@ int Vecho_executing_commands;
 // Where history is saved.
 static string Vhistory_file;
 
 // The number of lines to keep in the history file.
 static int Vhistory_size;
 
 // Should Octave always check to see if function files have changed
 // since they were last compiled?
-static bool Vignore_function_time_stamp;
+static int Vignore_function_time_stamp;
 
 // TRUE if we are saving history.
 static int Vsaving_history;
 
 // Symbol table for symbols at the top level.
 symbol_table *top_level_sym_tab = 0;
 
 // Symbol table for the current scope.
@@ -1662,16 +1662,17 @@ install_builtin_variables (void)
   symbols_of_load_save ();
   symbols_of_pager ();
   symbols_of_parse ();
   symbols_of_pr_output ();
   symbols_of_pt_fcn ();
   symbols_of_pt_mat ();
   symbols_of_pt_plot ();
   symbols_of_syscalls ();
+  symbols_of_toplev ();
   symbols_of_value ();
   symbols_of_variables ();
 }
 
 // Deleting names from the symbol tables.
 
 DEFUN_TEXT (clear, args, ,
   "clear [-x] [name ...]\n\
