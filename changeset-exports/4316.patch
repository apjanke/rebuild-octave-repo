# HG changeset patch
# User jwe
# Date 1044914235 0
#      Mon Feb 10 21:57:15 2003 +0000
# Node ID 236c10efcde2c61ff6565c8d9717e98547750c42
# Parent  0a056052bc9017014805a0629db972fe62cba3bf
[project @ 2003-02-10 21:57:15 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -73,96 +73,133 @@ ComplexColumnVector::operator != (const 
 }
 
 // destructive insert/delete/reorder operations
 
 ComplexColumnVector&
 ComplexColumnVector::insert (const ColumnVector& a, int r)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::insert (const ComplexColumnVector& a, int r)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::fill (double val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::fill (const Complex& val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
+
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::fill (double val, int r1, int r2)
 {
   int len = length ();
+
   if (r1 < 0 || r2 < 0 || r1 >= len || r2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
 
-  for (int i = r1; i <= r2; i++)
-    elem (i) = val;
+  if (r2 >= r1)
+    {
+      make_unique ();
+
+      for (int i = r1; i <= r2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::fill (const Complex& val, int r1, int r2)
 {
   int len = length ();
+
   if (r1 < 0 || r2 < 0 || r1 >= len || r2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
 
-  for (int i = r1; i <= r2; i++)
-    elem (i) = val;
+  if (r2 >= r1)
+    {
+      make_unique ();
+
+      for (int i = r1; i <= r2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 ComplexColumnVector
 ComplexColumnVector::stack (const ColumnVector& a) const
 {
   int len = length ();
@@ -219,16 +256,27 @@ ComplexColumnVector::extract (int r1, in
   ComplexColumnVector result (new_r);
 
   for (int i = 0; i < new_r; i++)
     result.elem (i) = elem (r1+i);
 
   return result;
 }
 
+ComplexColumnVector
+ComplexColumnVector::extract_n (int r1, int n) const
+{
+  ComplexColumnVector result (n);
+
+  for (int i = 0; i < n; i++)
+    result.elem (i) = elem (r1+i);
+
+  return result;
+}
+
 // column vector by column vector -> column vector operations
 
 ComplexColumnVector&
 ComplexColumnVector::operator += (const ColumnVector& a)
 {
   int len = length ();
 
   int a_len = a.length ();
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -78,16 +78,18 @@ public:
   ComplexRowVector transpose (void) const;
 
   friend ComplexColumnVector conj (const ComplexColumnVector& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexColumnVector extract (int r1, int r2) const;
 
+  ComplexColumnVector extract_n (int r1, int n) const;
+
   // column vector by column vector -> column vector operations
 
   ComplexColumnVector& operator += (const ColumnVector& a);
   ComplexColumnVector& operator -= (const ColumnVector& a);
 
   // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -235,51 +235,68 @@ ComplexMatrix::insert (const Matrix& a, 
   int a_nc = a.cols ();
 
   if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int j = 0; j < a_nc; j++)
-    for (int i = 0; i < a_nr; i++)
-      elem (r+i, c+j) = a.elem (i, j);
+  if (a_nr >0 && a_nc > 0)
+    {
+      make_unique ();
+
+      for (int j = 0; j < a_nc; j++)
+	for (int i = 0; i < a_nr; i++)
+	  xelem (r+i, c+j) = a.elem (i, j);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const RowVector& a, int r, int c)
 {
   int a_len = a.length ();
+
   if (r < 0 || r >= rows () || c < 0 || c + a_len > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r, c+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r, c+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ColumnVector& a, int r, int c)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > rows () || c < 0 || c >= cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i, c) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const DiagMatrix& a, int r, int c)
 {
   int a_nr = a.rows ();
@@ -288,18 +305,25 @@ ComplexMatrix::insert (const DiagMatrix&
   if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   fill (0.0, r, c, r + a_nr - 1, c + a_nc - 1);
 
-  for (int i = 0; i < a.length (); i++)
-    elem (r+i, c+i) = a.elem (i, i);
+  int a_len = a.length ();
+
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c+i) = a.elem (i, i);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexMatrix& a, int r, int c)
 {
   Array2<Complex>::insert (a, r, c);
@@ -321,24 +345,30 @@ ComplexMatrix::insert (const ComplexRowV
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexColumnVector& a, int r, int c)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > rows () || c < 0 || c >= cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i, c) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::insert (const ComplexDiagMatrix& a, int r, int c)
 {
   int a_nr = a.rows ();
@@ -347,88 +377,117 @@ ComplexMatrix::insert (const ComplexDiag
   if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   fill (0.0, r, c, r + a_nr - 1, c + a_nc - 1);
 
-  for (int i = 0; i < a.length (); i++)
-    elem (r+i, c+i) = a.elem (i, i);
+  int a_len = a.length ();
+
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c+i) = a.elem (i, i);
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (double val)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (nr > 0 && nc > 0)
-    for (int j = 0; j < nc; j++)
-      for (int i = 0; i < nr; i++)
-	elem (i, j) = val;
+    {
+      make_unique ();
+
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (const Complex& val)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (nr > 0 && nc > 0)
-    for (int j = 0; j < nc; j++)
-      for (int i = 0; i < nr; i++)
-	elem (i, j) = val;
+    {
+      make_unique ();
+
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (double val, int r1, int c1, int r2, int c2)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (r1 < 0 || r2 < 0 || c1 < 0 || c2 < 0
       || r1 >= nr || r2 >= nr || c1 >= nc || c2 >= nc)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int j = c1; j <= c2; j++)
-    for (int i = r1; i <= r2; i++)
-      elem (i, j) = val;
+  if (r2 >= r1 && c2 >= c1)
+    {
+      make_unique ();
+
+      for (int j = c1; j <= c2; j++)
+	for (int i = r1; i <= r2; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (const Complex& val, int r1, int c1, int r2, int c2)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (r1 < 0 || r2 < 0 || c1 < 0 || c2 < 0
       || r1 >= nr || r2 >= nr || c1 >= nc || c2 >= nc)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int j = c1; j <= c2; j++)
-    for (int i = r1; i <= r2; i++)
-      elem (i, j) = val;
+  if (r2 >= r1 && c2 >=c1)
+    {
+      make_unique ();
+
+      for (int j = c1; j <= c2; j++)
+	for (int i = r1; i <= r2; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 ComplexMatrix
 ComplexMatrix::append (const Matrix& a) const
 {
   int nr = rows ();
@@ -761,17 +820,29 @@ ComplexMatrix::extract (int r1, int c1, 
 
   int new_r = r2 - r1 + 1;
   int new_c = c2 - c1 + 1;
 
   ComplexMatrix result (new_r, new_c);
 
   for (int j = 0; j < new_c; j++)
     for (int i = 0; i < new_r; i++)
-      result.elem (i, j) = elem (r1+i, c1+j);
+      result.xelem (i, j) = elem (r1+i, c1+j);
+
+  return result;
+}
+
+ComplexMatrix
+ComplexMatrix::extract_n (int r1, int c1, int nr, int nc) const
+{
+  ComplexMatrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      result.xelem (i, j) = elem (r1+i, c1+j);
 
   return result;
 }
 
 // extract row or column i.
 
 ComplexRowVector
 ComplexMatrix::row (int i) const
@@ -780,17 +851,17 @@ ComplexMatrix::row (int i) const
   if (i < 0 || i >= rows ())
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return ComplexRowVector ();
     }
 
   ComplexRowVector retval (nc);
   for (int j = 0; j < cols (); j++)
-    retval.elem (j) = elem (i, j);
+    retval.xelem (j) = elem (i, j);
 
   return retval;
 }
 
 ComplexRowVector
 ComplexMatrix::row (char *s) const
 {
   if (! s)
@@ -818,17 +889,17 @@ ComplexMatrix::column (int i) const
   if (i < 0 || i >= cols ())
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ComplexColumnVector ();
     }
 
   ComplexColumnVector retval (nr);
   for (int j = 0; j < nr; j++)
-    retval.elem (j) = elem (j, i);
+    retval.xelem (j) = elem (j, i);
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::column (char *s) const
 {
   if (! s)
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -123,16 +123,18 @@ public:
     { return MArray2<Complex>::transpose (); }
 
   friend ComplexMatrix conj (const ComplexMatrix& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexMatrix extract (int r1, int c1, int r2, int c2) const;
 
+  ComplexMatrix extract_n (int r1, int c1, int nr, int nc) const;
+
   // extract row or column i.
 
   ComplexRowVector row (int i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (int i) const;
   ComplexColumnVector column (char *s) const;
 
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -73,96 +73,132 @@ ComplexRowVector::operator != (const Com
 }
 
 // destructive insert/delete/reorder operations
 
 ComplexRowVector&
 ComplexRowVector::insert (const RowVector& a, int c)
 {
   int a_len = a.length ();
+
   if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (c+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (c+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::insert (const ComplexRowVector& a, int c)
 {
   int a_len = a.length ();
+
   if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (c+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (c+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::fill (double val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::fill (const Complex& val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::fill (double val, int c1, int c2)
 {
   int len = length ();
+
   if (c1 < 0 || c2 < 0 || c1 >= len || c2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int i = c1; i <= c2; i++)
-    elem (i) = val;
+  if (c2 >= c1)
+    {
+      make_unique ();
+
+      for (int i = c1; i <= c2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::fill (const Complex& val, int c1, int c2)
 {
   int len = length ();
+
   if (c1 < 0 || c2 < 0 || c1 >= len || c2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int i = c1; i <= c2; i++)
-    elem (i) = val;
+  if (c2 >= c1)
+    {
+      make_unique ();
+
+      for (int i = c1; i <= c2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 ComplexRowVector
 ComplexRowVector::append (const RowVector& a) const
 {
   int len = length ();
@@ -219,16 +255,27 @@ ComplexRowVector::extract (int c1, int c
   ComplexRowVector result (new_c);
 
   for (int i = 0; i < new_c; i++)
     result.elem (i) = elem (c1+i);
 
   return result;
 }
 
+ComplexRowVector
+ComplexRowVector::extract_n (int r1, int n) const
+{
+  ComplexRowVector result (n);
+
+  for (int i = 0; i < n; i++)
+    result.elem (i) = elem (r1+i);
+
+  return result;
+}
+
 // row vector by row vector -> row vector operations
 
 ComplexRowVector&
 ComplexRowVector::operator += (const RowVector& a)
 {
   int len = length ();
 
   int a_len = a.length ();
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -76,16 +76,18 @@ public:
   ComplexColumnVector transpose (void) const;
 
   friend ComplexRowVector conj (const ComplexRowVector& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexRowVector extract (int c1, int c2) const;
 
+  ComplexRowVector extract_n (int c1, int n) const;
+
   // row vector by row vector -> row vector operations
 
   ComplexRowVector& operator += (const RowVector& a);
   ComplexRowVector& operator -= (const RowVector& a);
 
   // row vector by matrix -> row vector
 
   friend ComplexRowVector operator * (const ComplexRowVector& a,
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,28 @@
+2003-02-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CColVector.cc (ComplexColumnVector::extract_n): New function.
+	* CRowVector.cc (ComplexRowVector::extract_n): Likewise.
+	* CMatrix.cc (ComplexMatrix::extract_n): Likewise.
+	* dColVector.cc (ColumnVector::extract_n): Likewise.
+	* dRowVector.cc (RowVector::extract_n): Likewise.
+	* dMatrix.cc (Matrix::extract_n): Likewise.
+
+	* CColVector.cc (ComplexColumnVector::insert): Improve efficiency
+	with make_unique and xelem.
+	* CRowVector.cc (ComplexRowVector::insert): Likewise.
+	* CMatrix.cc (ComplexMatrix::insert, ComplexMatrix::fill,
+	ComplexMatrix::extract, ComplexMatrix::row,
+	ComplexMatrix::column): Likewise.
+	* dColVector.cc (ColumnVector::insert): Likewise.
+	* dRowVector.cc (RowVector::insert): Likewise.
+	* dMatrix.cc (Matrix::insert, Matrix::fill, Matrix::extract,
+	Matrix::row, Matrix::column): Likewise.
+
 2003-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (imag (double)): Return 0.0 for all args, even NaN.
 
 2003-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc, dMatrix.cc: Move min and max functions here, from
 	src/DLD-FUNCTIONS/minmax.cc, and make them extern.
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -64,52 +64,70 @@ ColumnVector::operator != (const ColumnV
 {
   return !(*this == a);
 }
 
 ColumnVector&
 ColumnVector::insert (const ColumnVector& a, int r)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 ColumnVector&
 ColumnVector::fill (double val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
   return *this;
 }
 
 ColumnVector&
 ColumnVector::fill (double val, int r1, int r2)
 {
   int len = length ();
+
   if (r1 < 0 || r2 < 0 || r1 >= len || r2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
 
-  for (int i = r1; i <= r2; i++)
-    elem (i) = val;
+  if (r2 >= r1)
+    {
+      make_unique ();
+
+      for (int i = r1; i <= r2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 ColumnVector
 ColumnVector::stack (const ColumnVector& a) const
 {
   int len = length ();
@@ -153,17 +171,28 @@ ColumnVector::extract (int r1, int r2) c
 {
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
 
   int new_r = r2 - r1 + 1;
 
   ColumnVector result (new_r);
 
   for (int i = 0; i < new_r; i++)
-    result.elem (i) = elem (r1+i);
+    result.xelem (i) = elem (r1+i);
+
+  return result;
+}
+
+ColumnVector
+ColumnVector::extract_n (int r1, int n) const
+{
+  ColumnVector result (n);
+
+  for (int i = 0; i < n; i++)
+    result.xelem (i) = elem (r1+i);
 
   return result;
 }
 
 // matrix by column vector -> column vector operations
 
 ColumnVector
 operator * (const Matrix& m, const ColumnVector& a)
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -68,16 +68,18 @@ public:
 
   friend ColumnVector real (const ComplexColumnVector& a);
   friend ColumnVector imag (const ComplexColumnVector& a);
 
   // resize is the destructive equivalent for this one
 
   ColumnVector extract (int r1, int r2) const;
 
+  ColumnVector extract_n (int r1, int n) const;
+
   // matrix by column vector -> column vector operations
 
   friend ColumnVector operator * (const Matrix& a, const ColumnVector& b);
 
   // diagonal matrix by column vector -> column vector operations
 
   friend ColumnVector operator * (const DiagMatrix& a, const ColumnVector& b);
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -194,40 +194,52 @@ Matrix::insert (const Matrix& a, int r, 
   Array2<double>::insert (a, r, c);
   return *this;
 }
 
 Matrix&
 Matrix::insert (const RowVector& a, int r, int c)
 {
   int a_len = a.length ();
+
   if (r < 0 || r >= rows () || c < 0 || c + a_len > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r, c+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r, c+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 Matrix&
 Matrix::insert (const ColumnVector& a, int r, int c)
 {
   int a_len = a.length ();
+
   if (r < 0 || r + a_len > rows () || c < 0 || c >= cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (r+i, c) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c) = a.elem (i);
+    }
 
   return *this;
 }
 
 Matrix&
 Matrix::insert (const DiagMatrix& a, int r, int c)
 {
   int a_nr = a.rows ();
@@ -236,53 +248,71 @@ Matrix::insert (const DiagMatrix& a, int
   if (r < 0 || r + a_nr > rows () || c < 0 || c + a_nc > cols ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
   fill (0.0, r, c, r + a_nr - 1, c + a_nc - 1);
 
-  for (int i = 0; i < a.length (); i++)
-    elem (r+i, c+i) = a.elem (i, i);
+  int a_len = a.length ();
+
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (r+i, c+i) = a.elem (i, i);
+    }
 
   return *this;
 }
 
 Matrix&
 Matrix::fill (double val)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (nr > 0 && nc > 0)
-    for (int j = 0; j < nc; j++)
-      for (int i = 0; i < nr; i++)
-	elem (i, j) = val;
+    {
+      make_unique ();
+
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 Matrix&
 Matrix::fill (double val, int r1, int c1, int r2, int c2)
 {
   int nr = rows ();
   int nc = cols ();
+
   if (r1 < 0 || r2 < 0 || c1 < 0 || c2 < 0
       || r1 >= nr || r2 >= nr || c1 >= nc || c2 >= nc)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int j = c1; j <= c2; j++)
-    for (int i = r1; i <= r2; i++)
-      elem (i, j) = val;
+  if (r2 >= r1 && c2 >= c1)
+    {
+      make_unique ();
+
+      for (int j = c1; j <= c2; j++)
+	for (int i = r1; i <= r2; i++)
+	  xelem (i, j) = val;
+    }
 
   return *this;
 }
 
 Matrix
 Matrix::append (const Matrix& a) const
 {
   int nr = rows ();
@@ -460,17 +490,29 @@ Matrix::extract (int r1, int c1, int r2,
 
   int new_r = r2 - r1 + 1;
   int new_c = c2 - c1 + 1;
 
   Matrix result (new_r, new_c);
 
   for (int j = 0; j < new_c; j++)
     for (int i = 0; i < new_r; i++)
-      result.elem (i, j) = elem (r1+i, c1+j);
+      result.xelem (i, j) = elem (r1+i, c1+j);
+
+  return result;
+}
+
+Matrix
+Matrix::extract_n (int r1, int c1, int nr, int nc) const
+{
+  Matrix result (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      result.xelem (i, j) = elem (r1+i, c1+j);
 
   return result;
 }
 
 // extract row or column i.
 
 RowVector
 Matrix::row (int i) const
@@ -479,17 +521,17 @@ Matrix::row (int i) const
   if (i < 0 || i >= rows ())
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return RowVector ();
     }
 
   RowVector retval (nc);
   for (int j = 0; j < nc; j++)
-    retval.elem (j) = elem (i, j);
+    retval.xelem (j) = elem (i, j);
 
   return retval;
 }
 
 RowVector
 Matrix::row (char *s) const
 {
   if (! s)
@@ -517,17 +559,17 @@ Matrix::column (int i) const
   if (i < 0 || i >= cols ())
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector ();
     }
 
   ColumnVector retval (nr);
   for (int j = 0; j < nr; j++)
-    retval.elem (j) = elem (j, i);
+    retval.xelem (j) = elem (j, i);
 
   return retval;
 }
 
 ColumnVector
 Matrix::column (char *s) const
 {
   if (! s)
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -98,16 +98,18 @@ public:
   friend Matrix imag (const ComplexMatrix& a);
 
   Matrix transpose (void) const { return MArray2<double>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   Matrix extract (int r1, int c1, int r2, int c2) const;
 
+  Matrix extract_n (int r1, int c1, int nr, int nc) const;
+
   // extract row or column i.
 
   RowVector row (int i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (int i) const;
   ColumnVector column (char *s) const;
 
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -67,52 +67,70 @@ RowVector::operator != (const RowVector&
 {
   return !(*this == a);
 }
 
 RowVector&
 RowVector::insert (const RowVector& a, int c)
 {
   int a_len = a.length ();
+
   if (c < 0 || c + a_len > length ())
     {
       (*current_liboctave_error_handler) ("range error for insert");
       return *this;
     }
 
-  for (int i = 0; i < a_len; i++)
-    elem (c+i) = a.elem (i);
+  if (a_len > 0)
+    {
+      make_unique ();
+
+      for (int i = 0; i < a_len; i++)
+	xelem (c+i) = a.elem (i);
+    }
 
   return *this;
 }
 
 RowVector&
 RowVector::fill (double val)
 {
   int len = length ();
+
   if (len > 0)
-    for (int i = 0; i < len; i++)
-      elem (i) = val;
+    {
+      make_unique ();
+
+      for (int i = 0; i < len; i++)
+	xelem (i) = val;
+    }
+
   return *this;
 }
 
 RowVector&
 RowVector::fill (double val, int c1, int c2)
 {
   int len = length ();
+
   if (c1 < 0 || c2 < 0 || c1 >= len || c2 >= len)
     {
       (*current_liboctave_error_handler) ("range error for fill");
       return *this;
     }
 
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
-  for (int i = c1; i <= c2; i++)
-    elem (i) = val;
+  if (c2 >= c1)
+    {
+      make_unique ();
+
+      for (int i = c1; i <= c2; i++)
+	xelem (i) = val;
+    }
 
   return *this;
 }
 
 RowVector
 RowVector::append (const RowVector& a) const
 {
   int len = length ();
@@ -154,17 +172,28 @@ RowVector::extract (int c1, int c2) cons
 {
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
   int new_c = c2 - c1 + 1;
 
   RowVector result (new_c);
 
   for (int i = 0; i < new_c; i++)
-    result.elem (i) = elem (c1+i);
+    result.xelem (i) = elem (c1+i);
+
+  return result;
+}
+
+RowVector
+RowVector::extract_n (int r1, int n) const
+{
+  RowVector result (n);
+
+  for (int i = 0; i < n; i++)
+    result.xelem (i) = elem (r1+i);
 
   return result;
 }
 
 // row vector by matrix -> row vector
 
 RowVector
 operator * (const RowVector& v, const Matrix& a)
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -68,16 +68,18 @@ public:
 
   friend RowVector real (const ComplexRowVector& a);
   friend RowVector imag (const ComplexRowVector& a);
 
   // resize is the destructive equivalent for this one
 
   RowVector extract (int c1, int c2) const;
 
+  RowVector extract_n (int c1, int n) const;
+
   // row vector by matrix -> row vector
 
   friend RowVector operator * (const RowVector& a, const Matrix& b);
 
   // other operations
 
   RowVector map (d_d_Mapper f) const;
 
