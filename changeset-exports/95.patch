# HG changeset patch
# User jwe
# Date 747888457 0
#      Mon Sep 13 02:47:37 1993 +0000
# Node ID e7c8e76a32246472247476c043a8b80b29e0f7f4
# Parent  c568ba9fc151820265ae11f90ab283f8c85795ab
[project @ 1993-09-13 02:47:37 by jwe]
(syl): Call vector_of_empties() instead of empty_tree().

diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -45,44 +45,16 @@ extern "C"
  
   int F77_FCN (ztrsyl) (const char*, const char*, const int*,
 			const int*, const int*, const Complex*,
 			const int*, const Complex*, const int*,
 			const Complex*, const int*, double*, int*,
 			long, long);
 }
 
-// Local function: construct return vector of empty matrices.  Return
-// empty matrices and/or gripe when appropriate.  Probably should make
-// this available elsewhere, since tc-xxx functions do this a lot.
-
-tree_constant *
-empty_tree (int nargout, char* fcn_name)
-{
-  tree_constant *retval = NULL_TREE_CONST;
-
-// Got an empty argument, check if should gripe/return empty values.
-
-  int flag = user_pref.propagate_empty_matrices;
-  if (flag != 0)
-    {
-      if (flag < 0)
-	gripe_empty_arg (fcn_name, 0);
-
-      Matrix m;
-      retval = new tree_constant [nargout+1];
-      for (int i = 0; i < nargout; i++)
-	retval[i] = tree_constant (m);
-    }
-  else
-    gripe_empty_arg (fcn_name, 1);
-
-  return retval;
-}
-
 // Return value of tree_constant argument as ComplexMatrix.
 
 ComplexMatrix
 ComplexMatrixLoad (tree_constant& arg)
 {
   ComplexMatrix retval;
 
 // Set argument size for scalar (for later).
@@ -129,17 +101,17 @@ syl (tree_constant *args, int nargin, in
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arga = args[1].make_numeric ();
   tree_constant argb = args[2].make_numeric ();
   tree_constant argc = args[3].make_numeric ();
 
   if (arga.is_empty () || argb.is_empty () || argc.is_empty ())
-    retval = empty_tree (nargout, "syl");
+    retval = vector_of_empties (nargout, "syl");
   else
     {
 
 // Arguments are not empty, so check for correct dimensions.
 
       int a_rows = arga.rows ();
       int a_cols = arga.columns ();
       int b_rows = argb.rows ();
