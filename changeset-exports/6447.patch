# HG changeset patch
# User jwe
# Date 1174694431 0
#      Sat Mar 24 00:00:31 2007 +0000
# Node ID 3f79532415b556a30ab75c43ce7a657e149fff3a
# Parent  f82f516c8a001932318fb687a047cbc7c0928c1b
[project @ 2007-03-24 00:00:31 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,11 +1,23 @@
 2007-03-23  John W. Eaton  <jwe@octave.org>
 
-	* sparse/spy.m: Update plotting code.
+	* control/base/bode.m, quaternion/demoquat.m,
+	quaternion/qcoordinate_plot.m, statistics/base/qqplot.m,
+	statistics/base/ppplot.m, sparse/spy.m:
+	Update plotting code.
+
+	* control/base/bode.m: Unwrap phase angle.
+
+	* miscellaneous/dump_prefs.m: Remove automatic_replot from the list.
+
+	* plot/axis.m: Don't check automatic_replot, or call replot.
+
+	* quaternion/demoquat.m: Delete comments with obsolete plotting
+	commands.
 
 	* plot/__pltopt1__.m: Handle "@" marker same as "+".
 	Handle numeric color specs.
 	* plot/plot.m: Remove "-@" and "@" from docstring.
 
 	* plot/orient.m: Fix tests to avoid creating a plot window.
 
 	* elfun/acosd.m, elfun/acotd.m, elfun/acscd.m, elfun/asecd.m,
diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -103,105 +103,107 @@
 ## Based on previous code by R. Bruce Tenison, July 13, 1994
 ## Modified by David Clem November 13, 1994
 ## again by A. S. Hodel July 1995 (smart plot range, etc.)
 ## Modified by Kai P. Mueller September 28, 1997 (multiplot mode)
 
 function [mag_r, phase_r, w_r] = bode (sys, w, outputs, inputs, plot_style)
 
   ## check number of input arguments given
-  if (nargin < 1 | nargin > 5)
+  if (nargin < 1 || nargin > 5)
     print_usage ();
   endif
-  if(nargin < 2)
+  if (nargin < 2)
     w = [];
   endif
-  if(nargin < 3)
+  if (nargin < 3)
     outputs = [];
   endif
-  if(nargin < 4)
+  if (nargin < 4)
     inputs = [];
   endif
-  if(nargin < 5)
+  if (nargin < 5)
     plot_style = "dB";
   endif
 
   if (strcmp (plot_style, "dB"))
     do_db_plot = 1;
   elseif (strcmp (plot_style, "mag"))
     do_db_plot = 0;
   else
     error ("bode: invalid value of plot_style specified");
   endif
 
   [f, w, sys] = __bodquist__ (sys, w, outputs, inputs, "bode");
-  bode_nin = sysdimensions(sys,"in");
-  bode_nout = sysdimensions(sys,"out");
+  bode_nin = sysdimensions (sys, "in");
+  bode_nout = sysdimensions (sys, "out");
 
-  [stname,inname,outname] = sysgetsignals(sys);
-  systsam = sysgettsam(sys);
+  [stname, inname, outname] = sysgetsignals (sys);
+  systsam = sysgettsam (sys);
 
   ## Get the magnitude and phase of f.
-  mag = abs(f);
-  phase = unwrap (arg(f)*180.0/pi);
+  mag = abs (f);
+  phase = unwrap (arg (f)) * 180.0 / pi;
 
   if (nargout < 1),
     ## Plot the information
-    save_automatic_replot = automatic_replot;
-    unwind_protect
-      automatic_replot(0);
-      if(is_digital(sys))
-	xlstr = ["Digital frequency w=rad/sec.  pi/T=",num2str(pi/systsam)];
-	tistr = "(exp(jwT)) ";
-      else
-	xlstr = "Frequency in rad/sec";
-	tistr = "(jw)";
-      endif
-      xlabel(xlstr);
-      if(is_siso(sys))
-	subplot(2,1,1);
-	title(["|[Y/U]",tistr,"|, u=", inname{1},", y=",outname{1}]);
-      else
-	title([ "||Y(", tistr, ")/U(", tistr, ")||"]);
-	disp("MIMO plot from")
-	disp(__outlist__(inname,"     "));
-	disp("to")
-	disp(__outlist__(outname,"    "));
-      endif
-      wv = [min(w), max(w)];
-      if(do_db_plot && max(mag) > 0)
-	ylabel("Gain in dB");
-	md = 20*log10(mag);
-	axvec = axis2dlim([vec(w),vec(md)]);
+    if (is_digital (sys))
+      xlstr = sprintf ("Digital frequency w=rad/sec.  pi/T=%g", pi/systsam);
+      tistr = "(exp(jwT)) ";
+    else
+      xlstr = "Frequency in rad/sec";
+      tistr = "(jw)";
+    endif
+
+    wv = [min(w), max(w)];
+
+    is_siso_sys = is_siso (sys);
+    max_mag_positive = max (mag) > 0;
+
+    if (is_siso_sys)
+      subplot (2, 1, 1);
+    endif
+
+    if (do_db_plot)
+      md = 20 * log10 (mag);
+      semilogx (w, md);
+      if (max_mag_positive)
+	ylabel ("Gain in dB");
+	axvec = axis2dlim ([w(:), md(:)]);
 	axvec(1:2) = wv;
-	axis(axvec);
-      else
-	ylabel("Gain |Y/U|")
-	md = mag;
-      endif
-
-      grid("on");
-      if (do_db_plot)
-	semilogx(w,md);
-      else
-	loglog(w,md);
+	axis (axvec);
       endif
-      if (is_siso(sys))
-	subplot(2,1,2);
-	axvec = axis2dlim([vec(w),vec(phase)]);
-	axvec(1:2) = wv;
-	axis(axvec);
-	xlabel(xlstr);
-	ylabel("Phase in deg");
-	title([ "phase([Y/U]", tistr, ...
-	   "), u=", inname{1},", y=",outname{1}]);
-	grid("on");
-	semilogx(w,phase);
-      endif
-    unwind_protect_cleanup
-      automatic_replot(save_automatic_replot);
-    end_unwind_protect
+    else
+      loglog (w, mag);
+      ylabel ("Gain |Y/U|")
+    endif
+    xlabel (xlstr);
+    grid ("on");
+
+    if (is_siso_sys)
+      title (sprintf ("|[Y/U]%s|, u=%s, y=%s", tistr, inname{1}, outname{1}));
+    else
+      title (sprintf ("||Y(%s)/U(%s)||", tistr, tistr));
+      disp ("MIMO plot from")
+      disp (__outlist__(inname,"     "));
+      disp ("to")
+      disp (__outlist__(outname,"    "));
+    endif
+
+    if (is_siso_sys)
+      subplot (2, 1, 2);
+      axvec = axis2dlim ([w(:), phase(:)]);
+      axvec(1:2) = wv;
+      semilogx (w, phase);
+      axis (axvec);
+      xlabel (xlstr);
+      ylabel ("Phase in deg");
+      title (sprintf ("phase([Y/U]%s), u=%s, y=%s",
+		      tistr, inname{1}, outname{1}));
+      grid ("on");
+    endif
   else
     mag_r = mag;
     phase_r = phase;
     w_r = w;
   endif
+
 endfunction
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -41,17 +41,16 @@ function dump_prefs (file)
 
   sym_list = ["EDITOR";
               "EXEC_PATH";
               "IMAGE_PATH";
               "PAGER";
               "PS1";
               "PS2";
               "PS4";
-              "automatic_replot";
               "beep_on_error";
               "completion_append_char";
               "crash_dumps_octave_core";
               "echo_executing_commands";
               "fixed_point_format";
               "gnuplot_binary";
               "gnuplot_command_end";
               "gnuplot_command_plot";
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -249,19 +249,18 @@ function curr_axis = axis (ax, varargin)
     endif
 
   else
     error ("axis: expecting no args, or a vector with 2, 4, or 6 elements");
   endif
 
   if (nargin > 1)
     axis (varargin{:});
-  elseif (automatic_replot)
-    replot ();
   endif
+
 endfunction
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(221);    title("normal plot");
 %! plot(t, x, ";;");
 %!
diff --git a/scripts/quaternion/demoquat.m b/scripts/quaternion/demoquat.m
--- a/scripts/quaternion/demoquat.m
+++ b/scripts/quaternion/demoquat.m
@@ -223,41 +223,35 @@ function opt = demoquat ()
       # inertial frame i, j, k axes.
       iif = iv; jf = qtrans(jv,iv); kf = qtrans(kv,iv);
 
       # rotation steps
       th = 0:5:20; ov = ones(size(th)); myth = [th,max(th)*ov ; 0*ov,th];
 
       # construct yaw-pitch-roll cartoon
       for kk=1:length(myth(1,:))
-	figure(kk)
 	thy = myth(1,kk);
 	thp = myth(2,kk);
 
 	qyaw = quaternion([0,0,1],thy*pi/180);
 	[jvy,th] = quaternion(qtrans(jf,qyaw));
 	qpitch = quaternion(jvy(1:3),thp*pi/180);
 	qb = qmult(qpitch, qyaw);
 	qi = quaternion([1, 0, 0],180*degrees);
 
 	printf("yaw=%8.4f, pitch=%8.4f, \n    qbi = (%8.4f)i + (%8.4e)j + (%8.4f)k + (%8.4f)\n",thy,thp, ...
 	  qb(1), qb(2), qb(3), qb(4));
 	[vv,th] = quaternion(qb);
 	printf("      = (vector) = [%8.4f %8.4f %8.4f], th=%5.2f deg\n", ...
 	  vv(1), vv(2), vv(3), th*180/pi);
-
+	fflush (stdout);
 	qb = qmult(qb,qi);
 	title(sprintf("yaw=%5.2f deg, pitch=%5.2f deg",thy,thp))
 	qcoordinate_plot(qi,qb,qview);
-	# uncomment the next four lines to get eps output
-	#__gnuplot_set__ terminal postscript eps 
-	#eval(sprintf("__gnuplot_set__ output 'fig%d.eps'",kk));
-	#replot
-	#__gnuplot_set__ terminal x11
-	#prompt
+	drawnow ();
       endfor
 
     case(quitopt)
       printf ("Exiting quaternion demo\n");
 
     otherwise
       error ("invalid option %f", opt);
 
diff --git a/scripts/quaternion/qcoordinate_plot.m b/scripts/quaternion/qcoordinate_plot.m
--- a/scripts/quaternion/qcoordinate_plot.m
+++ b/scripts/quaternion/qcoordinate_plot.m
@@ -105,18 +105,17 @@ function qcoordinate_plot (qf, qb, qv)
   jfv = jnk(:,2);
   kfv = jnk(:,3);
 
   jnk = qtransvmat (qb);
   ibv = jnk(:,1);
   jbv = jnk(:,2);
   kbv = jnk(:,3);
 
-  __gnuplot_set__ size square
-  axis ([-2, 2, -2, 2]);
+  axis ([-2, 2, -2, 2], "square");
 
   [vv, theta] = quaternion (qb);
 
   xlabel (sprintf ("rotate about eigenaxis %5.2f deg", th_eig/degrees));
 
   plot ([ibv(1), 0], [ibv(3), 0], "-@11;x (body);",
         [0, jbv(1)], [0, jbv(3)], "-@21;y (body);",
         [0, kbv(1)], [0, kbv(3)], "-@32;z (body);",
diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -63,14 +63,13 @@ function [p, y] = ppplot (x, dist, varar
   endif;
   if (nargin <= 2)
     y = feval (F, s);
   else
     y = feval (F, s, varargin{:});
   endif
 
   if (nargout == 0)
+    plot (p, y);
     axis ([0, 1, 0, 1]);
-    __gnuplot_set__ nokey;
-    plot (p, y);
   endif
 
 endfunction
diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -73,15 +73,14 @@ function [q, s] = qqplot (x, dist, varar
     else 
       tmp = "";
     endif
     q_label = sprintf ("%s with parameter(s) %g%s", func2str (f),
 		       varargin{1}, tmp);
   endif
 
   if (nargout == 0)
+    plot (q, s);
     xlabel (q_label);
     ylabel ("sample points");
-    __gnuplot_set__ nokey;
-    plot (q, s);
   endif
 
 endfunction
