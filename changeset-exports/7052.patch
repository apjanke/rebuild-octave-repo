# HG changeset patch
# User jwe
# Date 1193161608 0
#      Tue Oct 23 17:46:48 2007 +0000
# Node ID ee70ac66041f53bd4f2c9ba03841bd5f8844b246
# Parent  405001b6a514d2418af44ce60f3772616a8c3705
[project @ 2007-10-23 17:46:48 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl               2002, 2003, 2004, 2005
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.582 $)
+AC_REVISION($Revision: 1.583 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -848,16 +848,68 @@ AC_SUBST(F77_FLOAT_STORE_FLAG)
 
 sinclude(acx_blas.m4)
 sinclude(acx_lapack.m4)
 ACX_BLAS([], [BLAS_DIR="blas"])
 ACX_LAPACK([BLAS_LIBS="$LAPACK_LIBS $BLAS_LIBS"], [LAPACK_DIR="lapack"])
 AC_SUBST(BLAS_DIR)
 AC_SUBST(LAPACK_DIR)
 
+dnl I see no clean way to do the following check with autoconf macros,
+dnl hence the big mess.
+
+AC_MSG_CHECKING([BLAS library calling convention compatibility])
+cat << EOF > conftest.$ac_fc_srcext
+      program foo
+      double complex zdotu, tmp, zx(10), zy(10), retval
+      integer n, incx, incy
+      n = 10
+      incx = 1
+      incy = 1
+      do 10 i = 1, n
+        zx(i) = dcmplx (i, 0);
+        zy(i) = dcmplx (0, i);
+   10 continue
+      retval = zdotu (n, zx, incx, zy, incy)
+      if (retval .eq. dcmplx (0, 385)) then
+        print *, 'succeeded'
+      else
+        print *, 'failed'
+        print *, retval
+      endif
+      end
+EOF
+XLIBS="$LIBS"
+LIBS="$BLAS_LIBS $LIBS $FLIBS"
+if $have_fortran_compiler; then
+  AC_LANG_PUSH(Fortran 77)
+  $ac_compile
+  $ac_link
+  AC_LANG_POP(Fortran 77)
+elif $have_f2c; then
+  AC_LANG_PUSH(C)
+  $(F2C) $(F2CFLAGS) < conftest.$ac_fc_srcext > conftest.$ac_ext
+  $ac_compile
+  $ac_link
+  AC_LANG_POP(C)
+fi
+LIBS="$XLIBS"
+case "`conftest.$ac_exeext`" in
+  *success*)
+  AC_MSG_RESULT(yes)
+;;
+  *)
+  AC_MSG_RESULT(no)
+  AC_MSG_WARN([Your BLAS library was apparently compiled with a Fortran])
+  AC_MSG_WARN([compiler that uses a different calling convention from])
+  AC_MSG_WARN([the one used by the selected compiler, $F77.])
+  AC_MSG_ERROR([You must correct this problem before building Octave.])
+;;
+esac
+
 # Check for AMD library
 AMD_LIBS=
 AC_SUBST(AMD_LIBS)
 AC_CHECK_LIB(amd, amd_postorder, [AMD_LIBS="-lamd"; with_amd=yes],[with_amd=no])
 
 # Check for CAMD library
 CAMD_LIBS=
 AC_SUBST(CAMD_LIBS)
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -497,18 +497,16 @@ operator * (const ComplexRowVector& v, c
   octave_idx_type len = v.length ();
 
   octave_idx_type a_len = a.length ();
 
   if (len != a_len)
     gripe_nonconformant ("operator *", len, a_len);
   else if (len != 0)
     F77_FUNC (xzdotu, XZDOTU) (len, v.data (), 1, a.data (), 1, retval);
-  for (octave_idx_type i = 0; i < len; i++)
-    retval += v.elem (i) * a.elem (i);
 
   return retval;
 }
 
 // other operations
 
 ComplexRowVector
 linspace (const Complex& x1, const Complex& x2, octave_idx_type n)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-23  John W. Eaton  <jwe@octave.org>
+
+	* CRowVector.cc (operator * const ComplexRowVector&, const
+	ComplexColumnVector&)): Delete spurious code left from patch.
+
 2007-10-22  Kim Hansen  <kimhanse@gmail.com>
 
 	* chMatrix.cc, lo-utils.cc, oct-env.cc, oct-uname.cc,
 	sparse-sort.cc: Include <cstring>.
 
 2007-10-17  John W. Eaton  <jwe@octave.org>
 
 	* oct-sparse.h: Don't include metis.h.
