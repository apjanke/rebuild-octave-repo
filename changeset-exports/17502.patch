# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1380245666 14400
#      Thu Sep 26 21:34:26 2013 -0400
# Node ID 578805a293e5098913e39b866b893f981101477e
# Parent  55680de6a8976d167c9bb8a0a967e82468cabeae
ellipj: Move numerical code into liboctave

* lo-specfun.cc, lo-specfun.h (ellipj): New functions, adapted from
Fellipj.
* ellipj.cc (Fellipj): Call ellipj. (do_ellipj): Delete.

diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -21,124 +21,24 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun.h"
 #include "error.h"
-#include "lo-ieee.h"
+#include "lo-specfun.h"
 
 static void
 gripe_ellipj_arg (const char *arg)
 {
   error ("ellipj: expecting scalar or matrix as %s argument", arg);
 }
 
-static void
-do_ellipj (const double u, const double m, double& sn, double& cn, double& dn, double& err)
-{
-  static const int Nmax = 16;
-  double m1, t=0, si_u, co_u, se_u, ta_u, b, c[Nmax], a[Nmax], phi;
-  int n, Nn, ii;
-
-  if (m < 0 || m > 1)
-    {
-      warning ("ellipj: expecting 0 <= M <= 1"); // -lc-
-      sn = cn = dn = lo_ieee_nan_value ();
-      return;
-    }
-
-  double sqrt_eps = sqrt (std::numeric_limits<double>::epsilon ());
-  if (m < sqrt_eps)
-    {
-      // For small m, ( Abramowitz and Stegun, Section 16.13 ) 
-      si_u = sin (u);
-      co_u = cos (u);
-      t = 0.25*m*(u - si_u*co_u);
-      sn = si_u - t * co_u;
-      cn = co_u + t * si_u;
-      dn = 1 - 0.5*m*si_u*si_u;
-    }
-  else if ((1 - m) < sqrt_eps)
-    {
-      // For m1 = (1-m) small ( Abramowitz and Stegun, Section 16.15 )
-      m1 = 1 - m;
-      si_u = sinh (u);
-      co_u = cosh (u);
-      ta_u = tanh (u);
-      se_u = 1/co_u;
-      sn = ta_u + 0.25*m1*(si_u*co_u - u)*se_u*se_u;
-      cn = se_u - 0.25*m1*(si_u*co_u - u)*ta_u*se_u;
-      dn = se_u + 0.25*m1*(si_u*co_u + u)*ta_u*se_u;
-    }
-  else
-    {
-      /*
-      //  Arithmetic-Geometric Mean (AGM) algorithm
-      //    ( Abramowitz and Stegun, Section 16.4 )
-      */
-
-      a[0] = 1;
-      b    = sqrt (1 - m);
-      c[0] = sqrt (m);
-      for (n = 1; n < Nmax; ++n)
-        {
-          a[n] = (a[n - 1] + b)/2;
-          c[n] = (a[n - 1] - b)/2;
-          b = sqrt (a[n - 1]*b);
-          if (c[n]/a[n] < std::numeric_limits<double>::epsilon ()) break;
-        }
-      if (n >= Nmax - 1)
-        {
-          err = 1;
-          return;
-        }
-      Nn = n;
-      for (ii = 1; n > 0; ii = ii*2, --n) ; // ii = pow(2,Nn)
-      phi = ii*a[Nn]*u;
-      for (n = Nn; n > 0; --n)
-        {
-          t = phi;
-          phi = (asin ((c[n]/a[n])* sin (phi)) + phi)/2;
-        }
-      sn = sin (phi);
-      cn = cos (phi);
-      dn = cn/cos (t - phi);
-    }
-}
-
-static void
-do_ellipj (const Complex& u, const double m, Complex& sn, Complex& cn, Complex& dn,
-        double& err)
-{
-  double m1 = 1 - m, ss1, cc1, dd1;
-
-  do_ellipj (imag (u), m1, ss1, cc1, dd1, err);
-  if (real (u) == 0)
-    {
-      // u is pure imag: Jacoby imag. transf.
-      sn = Complex (0, ss1/cc1);
-      cn = 1/cc1;         //    cn.imag = 0;
-      dn = dd1/cc1;       //    dn.imag = 0;
-    }
-  else
-    {
-      // u is generic complex
-      double ss, cc, dd, ddd;
-
-      do_ellipj (real (u), m, ss, cc, dd, err);
-      ddd = cc1*cc1 + m*ss*ss*ss1*ss1;
-      sn = Complex (ss*dd1/ddd, cc*dd*ss1*cc1/ddd);
-      cn = Complex (cc*cc1/ddd, -ss*dd*ss1*dd1/ddd);
-      dn = Complex (dd*cc1*dd1/ddd, -m*ss*cc*ss1/ddd);
-    }
-}
-
 DEFUN (ellipj, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m})\n\
 @deftypefnx {Built-in Function} {[@var{sn}, @var{cn}, @var{dn}, @var{err}] =} ellipj (@var{u}, @var{m}, @var{tol})\n\
 Compute the Jacobi elliptic functions @var{sn}, @var{cn}, and @var{dn}\n\
 of complex argument @var{u} and real parameter @var{m}.\n\
 \n\
 If @var{m} is a scalar, the results are the same size as @var{u}.\n\
@@ -207,17 +107,17 @@ and 16.15), Dover, 1965.\n\
                 {
                   gripe_ellipj_arg ("first");
                   return retval;
                 }
 
               double sn, cn, dn;
               double err = 0;
 
-              do_ellipj (u, m, sn, cn, dn, err);
+              ellipj (u, m, sn, cn, dn, err);
 
               if (nargout > 3)
                 retval(3) = err;
               retval(2) = dn;
               retval(1) = cn;
               retval(0) = sn;
             }
           else
@@ -228,17 +128,17 @@ and 16.15), Dover, 1965.\n\
                 {
                   gripe_ellipj_arg ("first");
                   return retval;
                 }
 
               Complex sn, cn, dn;
               double err = 0;
 
-              do_ellipj (u, m, sn, cn, dn, err);
+              ellipj (u, m, sn, cn, dn, err);
 
               if (nargout > 3)
                 retval(3) = err;
               retval(2) = dn;
               retval(1) = cn;
               retval(0) = sn;
             }
         }
@@ -260,17 +160,17 @@ and 16.15), Dover, 1965.\n\
           const Complex *pu = u.data ();
           Complex *psn = sn.fortran_vec ();
           Complex *pcn = cn.fortran_vec ();
           Complex *pdn = dn.fortran_vec ();
           double *perr = err.fortran_vec ();
           octave_idx_type nel = u.numel ();
 
           for (octave_idx_type i = 0; i < nel; i++)
-            do_ellipj (pu[i], m, psn[i], pcn[i], pdn[i], perr[i]);
+            ellipj (pu[i], m, psn[i], pcn[i], pdn[i], perr[i]);
 
           if (nargout > 3)
             retval(3) = err;
           retval(2) = dn;
           retval(1) = cn;
           retval(0) = sn;
         }
     }
@@ -304,17 +204,17 @@ and 16.15), Dover, 1965.\n\
               const double *pm = m.data ();
               double *psn = sn.fortran_vec ();
               double *pcn = cn.fortran_vec ();
               double *pdn = dn.fortran_vec ();
               double *perr = err.fortran_vec ();
               octave_idx_type nel = m.numel ();
 
               for (octave_idx_type i = 0; i < nel; i++)
-                do_ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
+                ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
               if (nargout > 3)
                 retval(3) = err;
               retval(2) = dn;
               retval(1) = cn;
               retval(0) = sn;
             }
           else
@@ -333,17 +233,17 @@ and 16.15), Dover, 1965.\n\
               const double *pm = m.data ();
               Complex *psn = sn.fortran_vec ();
               Complex *pcn = cn.fortran_vec ();
               Complex *pdn = dn.fortran_vec ();
               double *perr = err.fortran_vec ();
               octave_idx_type nel = m.numel ();
 
               for (octave_idx_type i = 0; i < nel; i++)
-                do_ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
+                ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
               if (nargout > 3)
                 retval(3) = err;
               retval(2) = dn;
               retval(1) = cn;
               retval(0) = sn;
             }
         }
@@ -371,17 +271,17 @@ and 16.15), Dover, 1965.\n\
                   NDArray sn (sz_out), cn (sz_out), dn (sz_out);
                   NDArray err (sz_out);
 
                   const double *pu = u.data ();
                   const double *pm = m.data ();
 
                   for (octave_idx_type j = 0; j < mc; j++)
                     for (octave_idx_type i = 0; i < ur; i++)
-                      do_ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j), err(i,j));
+                      ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j), err(i,j));
 
                   if (nargout > 3)
                     retval(3) = err;
                   retval(2) = dn;
                   retval(1) = cn;
                   retval(0) = sn;
                 }
               else if (sz_m == sz_u)
@@ -393,17 +293,17 @@ and 16.15), Dover, 1965.\n\
                   const double *pm = m.data ();
                   double *psn = sn.fortran_vec ();
                   double *pcn = cn.fortran_vec ();
                   double *pdn = dn.fortran_vec ();
                   double *perr = err.fortran_vec ();
                   octave_idx_type nel = m.numel ();
 
                   for (octave_idx_type i = 0; i < nel; i++)
-                    do_ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
+                    ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
                   if (nargout > 3)
                     retval(3) = err;
                   retval(2) = dn;
                   retval(1) = cn;
                   retval(0) = sn;
                 }
               else
@@ -431,17 +331,17 @@ and 16.15), Dover, 1965.\n\
                   ComplexNDArray sn (sz_out), cn (sz_out), dn (sz_out);
                   NDArray err (sz_out);
 
                   const Complex *pu = u.data ();
                   const double  *pm = m.data ();
 
                   for (octave_idx_type j = 0; j < mc; j++)
                     for (octave_idx_type i = 0; i < ur; i++)
-                      do_ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j), err(i,j));
+                      ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j), err(i,j));
 
                   if (nargout > 3)
                     retval(3) = err;
                   retval(2) = dn;
                   retval(1) = cn;
                   retval(0) = sn;
                 }
               else if (sz_m == sz_u)
@@ -453,17 +353,17 @@ and 16.15), Dover, 1965.\n\
                   const double  *pm = m.data ();
                   Complex *psn = sn.fortran_vec ();
                   Complex *pcn = cn.fortran_vec ();
                   Complex *pdn = dn.fortran_vec ();
                   double *perr = err.fortran_vec ();
                   octave_idx_type nel = m.numel ();
 
                   for (octave_idx_type i = 0; i < nel; i++)
-                    do_ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
+                    ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
                   if (nargout > 3)
                     retval(3) = err;
                   retval(2) = dn;
                   retval(1) = cn;
                   retval(0) = sn;
                 }
               else
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3563,8 +3563,105 @@ betaincinv (const Array<double>& x, cons
       for (octave_idx_type i = 0; i < nel; i++)
         *pretval++ = betaincinv (x(i), a(i), b(i));
     }
   else
     gripe_betaincinv_nonconformant (dv, a.dims (), b.dims ());
 
   return retval;
 }
+
+void
+ellipj (double u, double m, double& sn, double& cn, double& dn, double& err)
+{
+  static const int Nmax = 16;
+  double m1, t=0, si_u, co_u, se_u, ta_u, b, c[Nmax], a[Nmax], phi;
+  int n, Nn, ii;
+
+  if (m < 0 || m > 1)
+    {
+      (*current_liboctave_warning_handler)
+        ("ellipj: expecting 0 <= M <= 1");
+      sn = cn = dn = lo_ieee_nan_value ();
+      return;
+    }
+
+  double sqrt_eps = sqrt (std::numeric_limits<double>::epsilon ());
+  if (m < sqrt_eps)
+    {
+      // For small m, ( Abramowitz and Stegun, Section 16.13 )
+      si_u = sin (u);
+      co_u = cos (u);
+      t = 0.25*m*(u - si_u*co_u);
+      sn = si_u - t * co_u;
+      cn = co_u + t * si_u;
+      dn = 1 - 0.5*m*si_u*si_u;
+    }
+  else if ((1 - m) < sqrt_eps)
+    {
+      // For m1 = (1-m) small ( Abramowitz and Stegun, Section 16.15 )
+      m1 = 1 - m;
+      si_u = sinh (u);
+      co_u = cosh (u);
+      ta_u = tanh (u);
+      se_u = 1/co_u;
+      sn = ta_u + 0.25*m1*(si_u*co_u - u)*se_u*se_u;
+      cn = se_u - 0.25*m1*(si_u*co_u - u)*ta_u*se_u;
+      dn = se_u + 0.25*m1*(si_u*co_u + u)*ta_u*se_u;
+    }
+  else
+    {
+      //  Arithmetic-Geometric Mean (AGM) algorithm
+      //    ( Abramowitz and Stegun, Section 16.4 )
+      a[0] = 1;
+      b    = sqrt (1 - m);
+      c[0] = sqrt (m);
+      for (n = 1; n < Nmax; ++n)
+        {
+          a[n] = (a[n - 1] + b)/2;
+          c[n] = (a[n - 1] - b)/2;
+          b = sqrt (a[n - 1]*b);
+          if (c[n]/a[n] < std::numeric_limits<double>::epsilon ()) break;
+        }
+      if (n >= Nmax - 1)
+        {
+          err = 1;
+          return;
+        }
+      Nn = n;
+      for (ii = 1; n > 0; ii = ii*2, --n) ; // ii = pow(2,Nn)
+      phi = ii*a[Nn]*u;
+      for (n = Nn; n > 0; --n)
+        {
+          t = phi;
+          phi = (asin ((c[n]/a[n])* sin (phi)) + phi)/2;
+        }
+      sn = sin (phi);
+      cn = cos (phi);
+      dn = cn/cos (t - phi);
+    }
+}
+
+void
+ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn, double& err)
+{
+  double m1 = 1 - m, ss1, cc1, dd1;
+
+  ellipj (imag (u), m1, ss1, cc1, dd1, err);
+  if (real (u) == 0)
+    {
+      // u is pure imag: Jacoby imag. transf.
+      sn = Complex (0, ss1/cc1);
+      cn = 1/cc1;         //    cn.imag = 0;
+      dn = dd1/cc1;       //    dn.imag = 0;
+    }
+  else
+    {
+      // u is generic complex
+      double ss, cc, dd, ddd;
+
+      ellipj (real (u), m, ss, cc, dd, err);
+      ddd = cc1*cc1 + m*ss*ss*ss1*ss1;
+      sn = Complex (ss*dd1/ddd, cc*dd*ss1*cc1/ddd);
+      cn = Complex (cc*cc1/ddd, -ss*dd*ss1*dd1/ddd);
+      dn = Complex (dd*cc1*dd1/ddd, -m*ss*cc*ss1/ddd);
+    }
+}
diff --git a/liboctave/numeric/lo-specfun.h b/liboctave/numeric/lo-specfun.h
--- a/liboctave/numeric/lo-specfun.h
+++ b/liboctave/numeric/lo-specfun.h
@@ -602,9 +602,12 @@ extern OCTAVE_API Array<double> betainci
 extern OCTAVE_API Array<double> betaincinv (double x, const Array<double>& a, double b);
 extern OCTAVE_API Array<double> betaincinv (double x, const Array<double>& a, const Array<double>& b);
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, double a, double b);
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, double a, double b);
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, double a, const Array<double>& b);
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, const Array<double>& a, double b);
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, const Array<double>& a, const Array<double>& b);
 
+extern OCTAVE_API void ellipj (double u, double m, double& sn, double& cn, double& dn, double& err);
+extern OCTAVE_API void ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn, double& err);
+
 #endif
