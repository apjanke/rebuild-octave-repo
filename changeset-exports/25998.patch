# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1519944112 -3600
#      Thu Mar 01 23:41:52 2018 +0100
# Node ID 8d2b3e3ff18230fd7f9908affbd15818974e94ff
# Parent  22f4f26fcaf2dcf10fa374df25ef55250e7e1e15
print.m: Implement "-opengl", "-painters" and "-RGBImage" options (bug #52866)

* __print_parse_opt__: add "rgb_ouput" and "renderer" fields to option
  structure. Handle "opengl" renderer and use it for all raster outputs
  supported by imwrite and for "-RGBImage" option.

* print.m (doc): Reorder options documentation and describe "-RGBImage".
  When the renderer is "opengl", change __device_pixel_ratio__ to draw
  the figure at the expected resolution and make use of getframe and eventually
  imwrite to produce an image file.

* genpropdoc.m: Document "renderer" and "renderermode" figure properties.

* NEWS: announce the addition of new option and the new behavior for raster
  formats.

* geometryimages.m, interpimages.m, splineimages.m: Use the same size for all
  images in the manual.

* graphics.cc (update_text_pos): Call axes::properties::sync_positions instead
  of individual label update methods.
  (axes::properties::get_extent): Scale the label extent in order to work with
  logical pixels.

* GLCanvas.cc (GLCanvas::do_getPixels): When using a framebuffer object, scale
  its size with the __device_pixel_ratio__ and set the renderer's
  device_pixel_ration accordingly.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -59,16 +59,24 @@ Summary of important user-visible change
     the property will return an empty matrix ([]).
 
  ** Patch and surface graphic objects now use the "FaceNormals" property
     for flat lighting.
 
  ** "FaceNormals" and "EdgeNormals" for patch and surface graphic
     objects are now calculated automatically if necessary.
 
+ ** Printing to raster formats now uses an opengl based method by default.
+    The print options "-opengl" and "-painters" have been added (for "qt"
+    toolkit only) and the corresponding figure properties "renderer" and 
+    "renderermode" are now also used when printing.
+
+ ** The print option "-RGBImage" has been added. It allows for retrieving
+    image pixels of a formated figure instead of printing to raster format.
+
  ** Printing using the -dtiff output device will now create compressed
     images using lzw compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
     device.
 
  ** The FFTW library is now required to perform FFT calculations.
     The FFTPACK sources have been removed from Octave.
 
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -511,20 +511,23 @@ units (ex: @code{\"inches\"}) and @code{
       case "position"
         s.doc = "Specify the position and size of the figure canvas.  \
 The four elements of the vector are the coordinates of the lower left corner \
 and width and height of the figure.  \
 @xref{XREFfigureunits, , @w{units property}}.";
         s.valid = valid_4elvec;
 
       case "renderer"
-        s.doc = doc_unused;
+        s.doc = "Renderering engine used for printing when @code{renderermode} \
+is \"manual\".  __modemsg__.";
 
       case "renderermode"
-        s.doc = doc_unused;
+        s.doc = "Control whether the renderering engine used for printing is \
+chosen automatically or specified by the @code{renderer} property.  \
+@xref{XREFprint, , @w{print function}}.";
 
       case "resize"
         s.doc = "Control whether the figure can be resized by dragging the \
 window borders and corners using a mouse.  When __prop__ is @qcode{\"off\"} \
 mouse interactions are disabled but the figure can still be resized by \
 changing its @qcode{\"position\"} property.";
 
       case "resizefcn"
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -151,17 +151,17 @@ function set_graphics_toolkit ()
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
-  image_size = [8.0, 6.0]; # in inches, 4:3 format
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (groot, "defaultfigurepapertype", "<custom>");
   set (groot, "defaultfigurepaperorientation", "landscape");
   set (groot, "defaultfigurepapersize", image_size + 2*border);
   set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
   set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -94,17 +94,17 @@ function set_graphics_toolkit ()
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
-  image_size = [8.0, 6.0]; # in inches, 4:3 format
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (groot, "defaultfigurepapertype", "<custom>");
   set (groot, "defaultfigurepaperorientation", "landscape");
   set (groot, "defaultfigurepapersize", image_size + 2*border);
   set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
   set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -184,17 +184,17 @@ function set_graphics_toolkit ()
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
-  image_size = [8.0, 6.0]; # in inches, 4:3 format
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (groot, "defaultfigurepapertype", "<custom>");
   set (groot, "defaultfigurepaperorientation", "landscape");
   set (groot, "defaultfigurepapersize", image_size + 2*border);
   set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
   set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -84,41 +84,47 @@ namespace QtHandles
   GLCanvas::do_getPixels (const graphics_handle& gh)
   {
     uint8NDArray retval;
     graphics_object go = gh_manager::get_object (gh);
 
     if (go && go.isa ("figure"))
       {
         Matrix pos = go.get ("position").matrix_value ();
+        double dpr = go.get ("__device_pixel_ratio__").double_value ();
+        pos(2) *= dpr;
+        pos(3) *= dpr;
 
         // Make sure we have a valid current context
         if (! begin_rendering ())
           return retval;
 
         // When the figure is not visible or its size is frozen for printing,
         // we use a framebuffer object to make sure we are rendering on a
         // suitably large frame.
         if (go.get ("visible").string_value () == "off"
             || go.get ("__printing__").string_value () == "on")
           {
             OCTAVE_QT_OPENGL_FBO
-            fbo (pos(2), pos(3),OCTAVE_QT_OPENGL_FBO::Attachment::Depth);
+            fbo (pos(2), pos(3),
+                 OCTAVE_QT_OPENGL_FBO::Attachment::Depth);
 
             fbo.bind ();
 
             m_renderer.set_viewport (pos(2), pos(3));
+            m_renderer.set_device_pixel_ratio (dpr);
             m_renderer.draw (go);
             retval = m_renderer.get_pixels (pos(2), pos(3));
 
             fbo.release ();
           }
         else
           {
             m_renderer.set_viewport (pos(2), pos(3));
+            m_renderer.set_device_pixel_ratio (dpr);
             m_renderer.draw (go);
             retval = m_renderer.get_pixels (pos(2), pos(3));
           }
 
         end_rendering ();
       }
 
     return retval;
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1142,18 +1142,19 @@ namespace octave
 
   uint8NDArray
   opengl_renderer::get_pixels (int width, int height)
   {
 #if defined (HAVE_OPENGL)
 
     m_glfcns.glPixelStorei (GL_PACK_ALIGNMENT, 1);
     uint8NDArray pix(dim_vector (3, width, height), 0);
+
     m_glfcns.glReadPixels(0, 0, width, height, GL_RGB, GL_UNSIGNED_BYTE,
-                 pix.fortran_vec ());
+                          pix.fortran_vec ());
 
     // Permute and flip data
     Array<octave_idx_type> perm (dim_vector (3, 1));
     perm(0) = 2;
     perm(1) = 1;
     perm(2) = 0;
 
     Array<idx_vector> idx (dim_vector (3, 1));
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2111,21 +2111,17 @@ update_text_pos (graphics_handle h)
       for (octave_idx_type ii = 0; ii < ch.numel (); ii++)
         update_text_pos (graphics_handle (ch(ii)));
 
       if (go.isa ("axes"))
         {
           axes::properties& ap
             = dynamic_cast<axes::properties&> (go.get_properties ());
           ap.update_font ();
-          ap.update_xlabel_position ();
-          ap.update_ylabel_position ();
-          ap.update_zlabel_position ();
-          ap.update_title_position ();
-          ap.update_axes_layout ();
+          ap.sync_positions ();
         }
     }
 }
 
 void
 figure::properties::update___device_pixel_ratio__ (void)
 {
   update_text_pos (get___myhandle__ ());
@@ -6809,16 +6805,23 @@ axes::properties::get_extent (bool with_
               ext(1) = std::min (ext(1), text_pos(1));
               ext(2) = std::max (ext(2), text_pos(0));
               ext(3) = std::max (ext(3), text_pos(1));
             }
           else
             {
               Matrix text_ext = text_props.get_extent_matrix ();
 
+              // The text extent is returned in device pixels. Unscale and
+              // work with logical pixels
+              double dpr = device_pixel_ratio (get___myhandle__ ());
+              if (dpr != 1.0)
+                for (int j = 0; j < 4; j++)
+                  text_ext(j) /= dpr;
+
               bool ignore_horizontal = false;
               bool ignore_vertical = false;
               if (only_text_height)
                 {
                   double text_rotation = text_props.get_rotation ();
                   if (text_rotation == 0. || text_rotation == 180.)
                     ignore_horizontal = true;
                   else if (text_rotation == 90. || text_rotation == 270.)
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -16,76 +16,175 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} print ()
 ## @deftypefnx {} {} print (@var{options})
 ## @deftypefnx {} {} print (@var{filename}, @var{options})
 ## @deftypefnx {} {} print (@var{h}, @var{filename}, @var{options})
-## Print a plot, or save it to a file.
-##
-## Both output formatted for printing (PDF and PostScript), and many bitmapped
-## and vector image formats are supported.
+## @deftypefnx {} {@var{rgb} = } print (@var{-RGBImage}, @dots{})
+## Format a figure and send it to a printer, save it to a file or
+## return an RGB image.
 ##
 ## @var{filename} defines the name of the output file.  If the filename has
 ## no suffix, one is inferred from the specified device and appended to the
-## filename.  If no filename is specified, the output is sent to the
-## printer.
+## filename.  In absence of a filename or "-RGBImage" option, the output is
+## sent to the printer.
+## The filename and options can be given in any order.
+##
+## Example: Print to a file using the pdf and jpeg formats.
 ##
-## @var{h} specifies the handle of the figure to print.  If no handle is
-## specified the current figure is used.
+## @example
+## @group
+## figure (1);
+## clf ();
+## surf (peaks);
+## print figure1.pdf   # The extension specifies the format
+## print -djpg figure1 # Will produce "figure1.jpg" file
+## @end group
+## @end example
 ##
-## For output to a printer, PostScript file, or PDF file, the paper size is
+## If the first argument @var{h} is a handle to a figure object, it specifies
+## the figure to print.  By default the current figure is printed.
+##
+## For outputs to paged formats, PostScript and PDF, the paper size is
 ## specified by the figure's @code{papersize} property.  The location and
 ## size of the image on the page are specified by the figure's
 ## @code{paperposition} property.  The orientation of the page is specified
 ## by the figure's @code{paperorientation} property.
 ##
 ## The width and height of images are specified by the figure's
 ## @code{paperposition(3:4)} property values.
 ##
 ## The @code{print} command supports many @var{options}:
 ##
 ## @table @code
 ## @item -f@var{h}
 ##   Specify the handle, @var{h}, of the figure to be printed.  The default
 ## is the current figure.
 ##
+## Example: Print figure 1.
+##
+## @example
+## @group
+## figure (1);
+## clf ();
+## surf (peaks);
+## figure (2);
+## print -f1 figure1.pdf
+## ## Equivalent functional form:
+## print (1, "figure1.pdf")
+## @end group
+## @end example
+##
 ## @item -P@var{printer}
 ##   Set the @var{printer} name to which the plot is sent if no
 ## @var{filename} is specified.
 ##
-## @item -G@var{ghostscript_command}
-##   Specify the command for calling Ghostscript.  For Unix and Windows the
-## defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
+## Example: Print to printer named PS_printer using ps format.
+##
+## @example
+## @group
+## clf ();
+## surf (peaks);
+## print -dpswrite -PPS_printer
+## @end group
+## @end example
 ##
-## @item  -color
-## @itemx -mono
-##   Color or monochrome output.
+## @item -RGBImage
+##   Return an M-by-N-by-3 RGB image of the figure. The size of the image
+## depends on the formating options.
+##
+## Example: Get the pixels of a figure image.
 ##
-## @item  -solid
-## @itemx -dashed
-##   Force all lines to be solid or dashed, respectively.
+## @example
+## @group
+## clf ();
+## surf (peaks);
+## rgb = print ("-RGBImage");
+## @end group
+## @end example
 ##
 ## @item  -portrait
 ## @itemx -landscape
 ##   Specify the orientation of the plot for printed output.
 ## For non-printed output the aspect ratio of the output corresponds to the
 ## plot area defined by the @qcode{"paperposition"} property in the
 ## orientation specified.  This option is equivalent to changing the figure's
 ## @qcode{"paperorientation"} property.
 ##
-## @item  -TextAlphaBits=@var{n}
-## @itemx -GraphicsAlphaBits=@var{n}
-##   Octave is able to produce output for various printers, bitmaps, and
-## vector formats by using Ghostscript.  For bitmap and printer output
-## anti-aliasing is applied using Ghostscript's TextAlphaBits and
-## GraphicsAlphaBits options.  The default number of bits are 4 and 1
-## respectively.  Allowed values for @var{N} are 1, 2, or 4.
+## @item -append
+##   Append PostScript or PDF output to a pre-existing file of the same type.
+##
+## @item -r@var{NUM}
+##   Resolution of bitmaps in pixels per inch.  For both metafiles and SVG
+## the default is the screen resolution; for other formats it is 150 dpi.  To
+## specify screen resolution, use @qcode{"-r0"}.
+##
+## Example: Get high resolution raster output.
+##
+## @example
+## @group
+## clf ();
+## surf (peaks (), "facelighting", "gouraud");
+## light ();
+## print ("-r600", "lit_peaks.png");
+## @end group
+## @end example
+##
+## @item -S@var{xsize},@var{ysize}
+##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.
+## For PS, EPS, PDF, and other vector formats the plot size is in points.
+## This option is equivalent to changing the size of the plot box associated
+## with the @qcode{"paperposition"} property.  When using the command form of
+## the print function you must quote the @var{xsize},@var{ysize} option.  For
+## example, by writing @w{"-S640,480"}.
+##
+## @item  -painters
+## @itemx -opengl
+##   For raster formats, specifies which of the opengl (pixel based) or painters
+## (vector based) renderers is used.  This is equivalent to changing the
+#  figure's "renderer" property.  By default the renderer is "opengl" for
+## raster formats and "painters" for vector formats.
+##
+## @item  -loose
+## @itemx -tight
+##   Force a tight or loose bounding box for eps files.  The default is loose.
+##
+## @item -@var{preview}
+##   Add a preview to eps files.  Supported formats are:
+##
+##   @table @code
+##   @item -interchange
+##     Provide an interchange preview.
+##
+##   @item -metafile
+##     Provide a metafile preview.
+##
+##   @item -pict
+##     Provide pict preview.
+##
+##   @item -tiff
+##     Provide a tiff preview.
+##   @end table
+##
+## @item  -F@var{fontname}
+## @itemx -F@var{fontname}:@var{size}
+## @itemx -F:@var{size}
+##   Use @var{fontname} and/or @var{fontsize} for all text.
+## @var{fontname} is ignored for some devices: dxf, fig, hpgl, etc.
+##
+## @item  -color
+## @itemx -mono
+##   Color or monochrome output.
+##
+## @item  -solid
+## @itemx -dashed
+##   Force all lines to be solid or dashed, respectively.
 ##
 ## @item -d@var{device}
 ##   The available output format is specified by the option @var{device}, and
 ## is one of:
 ##
 ##   @table @code
 ##   @item  ps
 ##   @itemx ps2
@@ -236,114 +335,52 @@
 ##   For a complete list, type @code{system ("gs -h")} to see what formats
 ## and devices are available.
 ##
 ##   When Ghostscript output is sent to a printer the size is determined by
 ## the figure's @qcode{"papersize"} property.  When the output is sent to a
 ## file the size is determined by the plot box defined by the figure's
 ## @qcode{"paperposition"} property.
 ##
-## @item -append
-##   Append PostScript or PDF output to a pre-existing file of the same type.
-##
-## @item -r@var{NUM}
-##   Resolution of bitmaps in pixels per inch.  For both metafiles and SVG
-## the default is the screen resolution; for other formats it is 150 dpi.  To
-## specify screen resolution, use @qcode{"-r0"}.
-##
-## @item  -loose
-## @itemx -tight
-##   Force a tight or loose bounding box for eps files.  The default is loose.
-##
-## @item -@var{preview}
-##   Add a preview to eps files.  Supported formats are:
-##
-##   @table @code
-##   @item -interchange
-##     Provide an interchange preview.
+## @item -G@var{ghostscript_command}
+##   Specify the command for calling Ghostscript.  For Unix and Windows the
+## defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
 ##
-##   @item -metafile
-##     Provide a metafile preview.
-##
-##   @item -pict
-##     Provide pict preview.
-##
-##   @item -tiff
-##     Provide a tiff preview.
-##   @end table
-##
-## @item -S@var{xsize},@var{ysize}
-##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.
-## For PS, EPS, PDF, and other vector formats the plot size is in points.
-## This option is equivalent to changing the size of the plot box associated
-## with the @qcode{"paperposition"} property.  When using the command form of
-## the print function you must quote the @var{xsize},@var{ysize} option.  For
-## example, by writing @w{"-S640,480"}.
-##
-## @item  -F@var{fontname}
-## @itemx -F@var{fontname}:@var{size}
-## @itemx -F:@var{size}
-##   Use @var{fontname} and/or @var{fontsize} for all text.
-## @var{fontname} is ignored for some devices: dxf, fig, hpgl, etc.
+## @item  -TextAlphaBits=@var{n}
+## @itemx -GraphicsAlphaBits=@var{n}
+##   Octave is able to produce output for various printers, bitmaps, and
+## vector formats by using Ghostscript.  For bitmap and printer output
+## anti-aliasing is applied using Ghostscript's TextAlphaBits and
+## GraphicsAlphaBits options.  The default number of bits are 4 and 1
+## respectively.  Allowed values for @var{N} are 1, 2, or 4.
 ## @end table
 ##
-## The filename and options can be given in any order.
-##
-## Example: Print to a file using the pdf device.
-##
-## @example
-## @group
-## figure (1);
-## clf ();
-## surf (peaks);
-## print figure1.pdf
-## @end group
-## @end example
-##
-## Example: Print to a file using jpg device.
-##
-## @example
-## @group
-## clf ();
-## surf (peaks);
-## print -djpg figure2.jpg
-## @end group
-## @end example
-##
-## Example: Print to printer named PS_printer using ps format.
-##
-## @example
-## @group
-## clf ();
-## surf (peaks);
-## print -dpswrite -PPS_printer
-## @end group
-## @end example
-##
-## @seealso{saveas, hgsave, orient, figure}
+## @seealso{saveas, hgsave, getframe, orient, figure}
 ## @end deftypefn
 
-function print (varargin)
+function rgbout = print (varargin)
 
   opts = __print_parse_opts__ (varargin{:});
 
-  folder = fileparts (opts.name);
-  if (! isempty (folder) && ! isfolder (folder))
-    error ("print: directory %s does not exist", folder);
-  endif
+  ## Check the requested file is writable
+  if (! opts.rgb_output)
+    folder = fileparts (opts.name);
+    if (! isempty (folder) && ! isfolder (folder))
+      error ("print: directory %s does not exist", folder);
+    endif
 
-  ## Check the requested file is writable
-  do_unlink = (exist (opts.name, "file") != 2);
-  fid = fopen (opts.name, "a");
-  if (fid == -1)
-    error ("print: cannot open file %s for writing", opts.name);
-  endif
-  fclose (fid);
-  if (do_unlink)
-    unlink (opts.name);
+    do_unlink = (exist (opts.name, "file") != 2);
+    fid = fopen (opts.name, "a");
+    if (fid == -1)
+      error ("print: cannot open file %s for writing", opts.name);
+    endif
+    fclose (fid);
+    if (do_unlink)
+      unlink (opts.name);
+    endif
   endif
 
   opts.pstoedit_cmd = @pstoedit;
   opts.fig2dev_cmd = @fig2dev;
   opts.latex_standalone = @latex_standalone;
   opts.lpr_cmd = @lpr;
   opts.epstool_cmd = @epstool;
 
@@ -381,18 +418,28 @@ function print (varargin)
     for n = 1:numel(hobj)
       props(n).h = hobj(n);
       props(n).name = "units";
       props(n).value = {get(hobj(n), "units")};
       set (hobj(n), "units", "data");
       nfig += 1;
     endfor
 
-    ## Don't account for the actual pixel density
-    if (strcmp (tk, "qt"))
+    if (strcmp (opts.renderer, "opengl"))
+      ## Scale the figure to reach the required resolution
+      scale = opts.ghostscript.resolution / 72;
+      if (scale != 1)
+        props(end+1).h = opts.figure;
+        props(end).name = "__device_pixel_ratio__";
+        props(end).value{1} = get (opts.figure, "__device_pixel_ratio__");
+        set (opts.figure, "__device_pixel_ratio__", scale);
+        nfig += 1;
+      endif
+    elseif (strcmp (tk, "qt"))
+      ## Don't account for the actual pixel density
       props(end+1).h = opts.figure;
       props(end).name = "__device_pixel_ratio__";
       props(end).value = {get(opts.figure, "__device_pixel_ratio__")};
       set (opts.figure, "__device_pixel_ratio__", 1);
       nfig += 1;
     endif
 
     ## print() requires axes units = "normalized"
@@ -405,17 +452,18 @@ function print (varargin)
       set (hax(n), "units", "normalized");
       nfig += 1;
     endfor
 
     ## FIXME: line transparency is only handled for svg output when
     ## using gl2ps. For other formats, switch grid lines to light gray
     ## so that the image output approximately matches on-screen experience.
     hax = findall (opts.figure, "type", "axes");
-    if (! strcmp (tk, "gnuplot") && ! strcmp (opts.devopt, "svg"))
+    if (! strcmp (tk, "gnuplot") && ! strcmp (opts.devopt, "svg")
+        && ! strcmp (opts.renderer, "opengl"))
       for n = 1:numel (hax)
         if (strcmp (get (hax(n), "gridcolormode"), "auto"))
           props(end+1).h = hax(n);
           props(end).name = "gridcolormode";
           props(end).value = {"auto"};
           props(end+1).h = hax(n);
           props(end).name = "gridcolor";
           props(end).value = {get(hax(n), "gridcolor")};
@@ -566,17 +614,34 @@ function print (varargin)
       endif
     endif
 
     ## call the graphics toolkit print script
     switch (tk)
       case "gnuplot"
         opts = __gnuplot_print__ (opts);
       otherwise
-        opts = __opengl_print__ (opts);
+        if (strcmp (opts.renderer, "opengl"))
+          if (opts.rgb_output)
+            rgbout = __get_frame__ (opts.figure);
+          else
+            compression = "none";
+
+            if (strcmp (opts.devopt, "tiff"))
+              compression = "lzw";
+            elseif (strcmp (opts.devopt, "tiffn"))
+              opts.devopt = "tiff";
+            endif
+
+            imwrite (__get_frame__ (opts.figure), opts.name, ...
+                     opts.devopt, "Compression", compression);
+          endif
+        else
+          opts = __opengl_print__ (opts);
+        endif
     endswitch
 
   unwind_protect_cleanup
     ## restore modified properties
     if (isstruct (props))
       ## Restore figure position and units first
       for n = nfig:-1:1
         if (ishghandle (props(n).h))
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -40,29 +40,31 @@ function arg_st = __print_parse_opts__ (
   arg_st.force_solid = 0; # 0=default, -1=dashed, +1=solid
   arg_st.formatted_for_printing = false;
   arg_st.ghostscript.binary = __quote_path__ (__ghostscript_binary__ ());
   arg_st.ghostscript.debug = false;
   arg_st.ghostscript.device = "";
   arg_st.ghostscript.epscrop = true;
   arg_st.ghostscript.level = 2;
   arg_st.ghostscript.output = "";
-  arg_st.ghostscript.papersize = "";
+  arg_st.ghostscript.papersize = "letter";
   arg_st.ghostscript.pageoffset = [];
   arg_st.ghostscript.resolution = 150;
   arg_st.ghostscript.antialiasing = false;
   arg_st.ghostscript.antialiasing_textalphabits = 4;
   arg_st.ghostscript.antialiasing_graphicsalphabits = 1;
   arg_st.loose = false;
   arg_st.lpr_binary = __quote_path__ (__find_binary__ ("lpr"));
   arg_st.name = "";
   arg_st.orientation = "";
   arg_st.pstoedit_binary = __quote_path__ (__find_binary__ ("pstoedit"));
   arg_st.preview = "";
   arg_st.printer = "";
+  arg_st.renderer = "auto";
+  arg_st.rgb_output = false;
   arg_st.send_to_printer = false;
   arg_st.special_flag = "textnormal";
   arg_st.tight_flag = false;
   arg_st.use_color = 0; # 0=default, -1=mono, +1=color
 
   if (isunix ())
     arg_st.lpr_options = "-l";
   elseif (ispc ())
@@ -85,16 +87,21 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-append"))
         arg_st.append_to_file = true;
       elseif (strcmp (arg, "-mono"))
         arg_st.use_color = -1;
       elseif (strcmp (arg, "-solid"))
         arg_st.force_solid = 1;
       elseif (strcmp (arg, "-dashed"))
         arg_st.force_solid = -1;
+      elseif (any (strcmp (arg, {"-opengl", "-painters"})))
+        arg_st.renderer = arg(2:end);
+      elseif (strcmp (arg, "-RGBImage"))
+        arg_st.rgb_output = true;
+        arg_st.renderer = "opengl";
       elseif (strncmp (arg, "-portrait", length (arg)))
         arg_st.orientation = "portrait";
       elseif (strncmp (arg, "-landscape", length (arg)))
         arg_st.orientation = "landscape";
       elseif (strcmp (arg, "-loose"))
         arg_st.loose = true;
         arg_st.tight_flag = false;
       elseif (strcmp (arg, "-tight"))
@@ -149,18 +156,16 @@ function arg_st = __print_parse_opts__ (
           arg_st.font = arg(3:end);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-S")
         arg_st.canvas_size = str2double (strsplit (arg(3:end), ","));
       elseif (length (arg) > 2 && arg(1:2) == "-r")
         arg_st.ghostscript.resolution = str2double (arg(3:end));
       elseif (length (arg) > 2 && arg(1:2) == "-f")
         arg_st.figure = str2double (arg(3:end));
-      elseif (any (strcmp (arg, {"-painters", "-opengl"})))
-        warning ("print: '%s' accepted for Matlab compatibility, but is ignored", arg);
       elseif (strcmp (arg, "-noui"))
         warning ("print: option '-noui' not yet implemented");
       elseif (length (arg) >= 1 && arg(1) == "-")
         error ("print: unknown option '%s'", arg);
       elseif (length (arg) > 0)
         arg_st.name = tilde_expand (arg);
       endif
     elseif (isfigure (arg))
@@ -181,23 +186,49 @@ function arg_st = __print_parse_opts__ (
     else
       ## Allows tests to be run without error.
       arg_st.orientation = "portrait";
     endif
   endif
 
   dot = rindex (arg_st.name, ".");
   if (isempty (arg_st.devopt))
-    if (dot == 0)
+    if (arg_st.rgb_output)
+      arg_st.devopt = "png";
+    elseif (dot == 0)
       arg_st.devopt = "psc";
     else
       arg_st.devopt = tolower (arg_st.name(dot+1:end));
     endif
   endif
 
+  ## The opengl renderer is only available for raster outputs
+  fmts = imformats ();
+  persistent gl_devlist = [fmts(! cellfun (@isempty, {fmts.write})).ext, ...
+                           "tiffn"];
+
+  opengl_ok = any (strcmp (gl_devlist, arg_st.devopt));
+
+  if (strcmp (arg_st.renderer, "auto")
+      && strcmp (get (arg_st.figure, "renderermode"), "manual"))
+    arg_st.renderer = get (arg_st.figure, "renderer");
+  endif
+
+  if (strcmp (arg_st.renderer, "auto"))
+    if (opengl_ok && strcmp (graphics_toolkit (arg_st.figure), "qt"))
+      arg_st.renderer = "opengl";
+    else
+      arg_st.renderer = "painters";
+    endif
+  elseif (strcmp (arg_st.renderer, "opengl") && ! opengl_ok)
+    arg_st.renderer = "painters";
+    warning (["print: unsupported output format \"%s\" for renderer ", ...
+              "\"opengl\"."], arg_st.devopt);
+  endif
+
   if (arg_st.use_color == 0)
     if (any (strcmp ({"ps", "ps2", "eps", "eps2"}, arg_st.devopt)))
       arg_st.use_color = -1;
     else
       arg_st.use_color = 1;
     endif
   endif
 
@@ -210,45 +241,45 @@ function arg_st = __print_parse_opts__ (
   elseif (strcmp (arg_st.devopt, "meta"))
     arg_st.devopt = "emf";
   elseif (strcmp (arg_st.devopt, "jpg"))
     arg_st.devopt = "jpeg";
   elseif (strcmp (arg_st.devopt, "tif"))
     arg_st.devopt = "tiff";
   endif
 
-  persistent dev_list = {"aifm", "corel", "fig", "png", "jpeg", ...
+  persistent dev_list = [{"aifm", "corel", "fig", "png", "jpeg", ...
               "gif", "pbm", "pbmraw", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps2", "psc", ...
               "psc2", "eps", "eps2", "epsc", "epsc2", ...
               "emf", "pdf", "pslatex", "epslatex", "epslatexstandalone", ...
               "pslatexstandalone", "pdflatexstandalone", ...
               "pstex", "tiff", "tiffn" "tikz", "pcxmono", ...
               "pcx24b", "pcx256", "pcx16", "pgm", "pgmraw", ...
               "ppm", "ppmraw", "pdflatex", "texdraw", ...
               "epscairo", "pdfcairo", "pngcairo", "cairolatex", ...
               "pdfcairolatex", "pdfcairolatexstandalone", ...
               "epscairolatex", "epscairolatexstandalone", "pstricks", ...
               "epswrite", "eps2write", "pswrite", "ps2write", "pdfwrite", ...
-              "canvas", "cgm", "latex", "eepic"};
+              "canvas", "cgm", "latex", "eepic"}, gl_devlist];
 
-  persistent suffixes = {"ai", "cdr", "fig", "png", "jpg", ...
+  persistent suffixes = [{"ai", "cdr", "fig", "png", "jpg", ...
               "gif", "pbm", "pbm", "dxf", "mf", ...
               "svg", "hpgl", "ps", "ps", "ps", ...
               "ps", "eps", "eps", "eps", "eps", ...
               "emf", "pdf", "tex", "tex", "tex", ...
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
               "eps", "pdf", "png", "tex", ...
               "tex", "tex", ...
               "tex", "tex", "tex", ...
               "eps", "eps", "ps", "ps", "pdf", ...
-              "js", "cgm", "tex", "tex"};
+              "js", "cgm", "tex", "tex"}, gl_devlist];
 
   if (isfigure (arg_st.figure))
     __graphics_toolkit__ = get (arg_st.figure, "__graphics_toolkit__");
   else
     ## Allow tests when no figures are present.
     __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
@@ -286,26 +317,33 @@ function arg_st = __print_parse_opts__ (
       endif
     else
       warning ("print.m: appended output is not supported for device '%s'",
                arg_st.devopt);
       arg_st.append_to_file = false;
     endif
   endif
 
-  if (! isempty (arg_st.printer) || isempty (arg_st.name))
+  if (arg_st.rgb_output)
+    if (! isempty (arg_st.printer) || ! isempty (arg_st.name))
+      warning ("octave:print:ignored_argument", ...
+               ["print: ignoring file name and printer argument when using", ...
+                "-RGBImage option"])
+    endif
+  elseif (! isempty (arg_st.printer) || isempty (arg_st.name))
     arg_st.send_to_printer = true;
   endif
 
   if (any (strcmp (arg_st.devopt, {"ps", "ps2", "psc", "psc2", "pdf"})))
     arg_st.formatted_for_printing = true;
   endif
 
   aliases = gs_aliases ();
-  if (any (strcmp (arg_st.devopt, fieldnames (aliases))))
+  if (any (strcmp (arg_st.devopt, fieldnames (aliases)))
+      && ! strcmp (arg_st.renderer, "opengl"))
     arg_st.devopt = aliases.(arg_st.devopt);
     unknown_device = false;
   endif
 
   if ((any (strcmp (arg_st.devopt, gs_device_list))
        && ! arg_st.formatted_for_printing)
       || any (strcmp (arg_st.devopt, {"pswrite", "ps2write", "pdfwrite"})))
     unknown_device = false;
@@ -338,17 +376,17 @@ function arg_st = __print_parse_opts__ (
       arg_st.name = "-";
     else
       error ("print: a filename may not specified when spooling to a printer");
     endif
     if (! any (strcmp (arg_st.devopt, gs_device_list)))
       ## Only supported ghostscript devices
       error ("print: format must be a valid Ghostscript format for spooling to a printer");
     endif
-  elseif (isempty (arg_st.name))
+  elseif (isempty (arg_st.name) && ! arg_st.rgb_output)
     error ("print: an output filename must be specified");
   endif
 
   if (isempty (arg_st.canvas_size))
     if (isfigure (arg_st.figure))
       [arg_st.ghostscript.papersize, paperposition] = ...
                            gs_papersize (arg_st.figure, arg_st.orientation);
     else
@@ -379,17 +417,18 @@ function arg_st = __print_parse_opts__ (
     arg_st.ghostscript.resolution = [];
   else
     arg_st.ghostscript.papersize = "";
     arg_st.ghostscript.pageoffset = [0, 0];
   endif
 
   if (warn_on_missing_ghostscript)
     if (isempty (arg_st.ghostscript.binary))
-      warning ("print:missing_gs", "print.m: Ghostscript binary is not available.  Only eps output is possible");
+      warning ("octave:print:missing_gs", ...
+               "print.m: Ghostscript binary is not available.  Only eps output is possible");
     endif
     warn_on_missing_ghostscript = false;
   endif
 
 endfunction
 
 
 ## Test blocks are not allowed (and not needed) for private functions
