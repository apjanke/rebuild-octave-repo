# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512494645 28800
#      Tue Dec 05 09:24:05 2017 -0800
# Branch stable
# Node ID 1da659b26bec9029fa1869d0af8c090e964d1b83
# Parent  3516d922b2bfb89cd7e7a465a1278de816840333
doc: grammarcheck of Object Oriented Programming chapter in manual.

* oop.txi: Backport grammarcheck changes to stable branch from cset
3a730821e4a2.  Also, remove @group around polynomial2.m function
which is too large to display on a single page without wrapping.

* examples/code/polynomial2.m: Add semicolon to properties definition.

diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -533,17 +533,17 @@ user class.
 @item @code{a != b} @tab @code{ne (a, b)} @tab Not equal to
 @item @code{a & b} @tab @code{and (a, b)} @tab Logical and
 @item @code{a | b} @tab @code{or (a, b)} @tab Logical or
 @item @code{!a} @tab @code{not (a)} @tab Logical not
 @item @code{a'} @tab @code{ctranspose (a)} @tab Complex conjugate transpose
 @item @code{a.'} @tab @code{transpose (a)} @tab Transpose
 @item @code{a:b} @tab @code{colon (a, b)} @tab Two element range
 @item @code{a:b:c} @tab @code{colon (a, b, c)} @tab Three element range
-@item @code{[a,  b]} @tab @code{horzcat (a, b)} @tab Horizontal concatenation
+@item @code{[a, b]} @tab @code{horzcat (a, b)} @tab Horizontal concatenation
 @item @code{[a; b]} @tab @code{vertcat (a, b)} @tab Vertical concatenation
 @item @code{a(s@math{_1},@dots{},s@math{_n})} @tab @code{subsref (a, s)} @tab Subscripted reference
 @item @code{a(s@math{_1},@dots{},s@math{_n}) = b} @tab @code{subsasgn (a, s, b)} @tab Subscripted assignment
 @item @code{b(a)} @tab @code{subsindex (a)} @tab Convert object to index
 @item @code{display} @tab @code{display (a)} @tab Object display
 @end multitable
 @caption{Available overloaded operators and their corresponding class method}
 @end float
@@ -762,17 +762,17 @@ contrast to the aforementioned classes, 
 section, @code{classdef} classes can be defined within a single m-file.  Other
 innovations of @code{classdef} classes are:
 
 @itemize @bullet
 @item
 @b{access rights} for properties and methods,
 
 @item
-@b{static methods}, i.e. methods that are independent of an object, and
+@b{static methods}, i.e., methods that are independent of an object, and
 
 @item
 the distinction between @b{value and handle classes}.
 @end itemize
 
 Several features have to be added in future versions of Octave to be fully
 compatible to @sc{matlab}.  An overview of what is missing can be found at
 @url{http://wiki.octave.org/Classdef}.
@@ -809,30 +809,30 @@ In contrast to old style classes, the @c
 block as well as the @code{methods}-@code{endmethods} block can be used to
 define properties and methods of the class.  Because both blocks are empty,
 they can be omitted in this particular case.
 
 For simplicity, a more advanced implementation of a @code{classdef} class is
 shown using the @code{polynomial} example again (@pxref{Creating a Class}):
 
 @example
-@group
 @EXAMPLEFILE(polynomial2.m)
-@end group
 @end example
 
 @noindent
 An object of class @code{polynomial2} is created by calling the class
 constructor:
 
 @example
+@group
 >> p = polynomial2 ([1, 0, 1])
 @result{} p =
 
  1 + X ^ 2
+@end group
 @end example
 
 @node Properties
 @subsection Properties
 
 All class properties must be defined within @code{properties} blocks.  The
 definition of a default value for a property is optional and can be omitted.
 The default initial value for each class property is @code{[]}.
@@ -888,21 +888,20 @@ By default, in the example @var{prop4}, 
 public read and write access.
 
 @node Methods
 @subsection Methods
 
 All class methods must be defined within @code{methods} blocks.  An exception
 to this rule is described at the end of this subsection.  Those @code{methods}
 blocks can have additional attributes specifying the access rights or whether
-the methods are static, i.e. methods that can be called without creating an
+the methods are static, i.e., methods that can be called without creating an
 object of that class.
 
 @example
-@group
 classdef some_class
   methods
     function obj = some_class ()
       disp ("New instance created.");
     endfunction
 
     function disp (obj)
       disp ("Here is some_class.");
@@ -916,37 +915,38 @@ classdef some_class
   endmethods
 
   methods (Static = true)
     function c = circumference (radius)
       c = 2 * pi () .* radius;
     endfunction
   endmethods
 endclassdef
-@end group
 @end example
 
 The constructor of the class is declared in the @code{methods} block and must
 have the same name as the class and exactly one output argument which is an
 object of its class.
 
 It is also possible to overload built-in or inherited methods, like the
 @code{disp} function in the example above to tell Octave how objects of
 @code{some_class} should be displayed (@pxref{Class Methods}).
 
 In general, the first argument in a method definition is always the object that
 it is called from.  Class methods can either be called by passing the object as
 the first argument to that method or by calling the object followed by a dot
 ("@code{.}") and the method's name with subsequent arguments:
 
 @example
+@group
 >> obj = some_class ();
 New instance created.
 >> disp (obj);   # both are
 >> obj.disp ();  # equal
+@end group
 @end example
 
 In @code{some_class}, the method @code{func} is defined within a @code{methods}
 block setting the @code{Access} attribute to @var{mode}, which is one of:
 
 @table @code
 @item public
 The methods can be accessed from everywhere.
diff --git a/examples/code/polynomial2.m b/examples/code/polynomial2.m
--- a/examples/code/polynomial2.m
+++ b/examples/code/polynomial2.m
@@ -1,11 +1,11 @@
 classdef polynomial2
   properties
-    poly = 0
+    poly = 0;
   endproperties
 
   methods
     function p = polynomial2 (a)
       if (nargin > 1)
         print_usage ();
       endif
 
