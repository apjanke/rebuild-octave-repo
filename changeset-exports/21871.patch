# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465685774 14400
#      Sat Jun 11 18:56:14 2016 -0400
# Node ID cab605836305ed51c12854bfb01f3068860bfd30
# Parent  841ce662c753ebf9f53aabca7858bb5f822c0486
use std::list instead of custom list type in pathsearch code

* kpse.cc, pathsearch.cc: Use std::list<std::string> instead of
custom list type.
(str_llist_elt): Delete struct type.
(str_llist_elt_type, str_llist_type): Delete typedefs.
(STR_LLIST, STR_LLIST_NEXT): Delete macros.
(str_llist_add): Delete functions.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -225,42 +225,19 @@ static unsigned int kpathsea_debug = 0;
 #define FATAL(str) \
   do \
     { \
       std::cerr << "pathsearch: fatal: " << str << "." << std::endl; \
       exit (1); \
     } \
   while (0)
 
-/* It's a little bizarre to be using the same type for the list and the
-   elements of the list, but no reason not to in this case, I think --
-   we never need a NULL string in the middle of the list, and an extra
-   NULL/NULL element always at the end is inconsequential.  */
-
-struct str_llist_elt
-{
-  str_llist_elt (void) : str (), next (0) { }
-
-  ~str_llist_elt (void) { }
-
-  std::string str;
-  struct str_llist_elt *next;
-};
-
-typedef str_llist_elt str_llist_elt_type;
-typedef str_llist_elt *str_llist_type;
-
-#define STR_LLIST(sl) ((sl).str)
-#define STR_LLIST_NEXT(sl) ((sl).next)
-
-static void str_llist_add (str_llist_type *l, const std::string& str);
-
 static std::string kpse_var_expand (const std::string& src);
 
-static str_llist_type *kpse_element_dirs (const std::string& elt);
+static std::list<std::string> kpse_element_dirs (const std::string& elt);
 
 static std::string kpse_expand (const std::string& s);
 
 static std::string kpse_expand_default (const std::string& path,
                                         const std::string& dflt);
 
 #include <ctime> /* for 'time' */
 
@@ -485,26 +462,23 @@ log_search (const std::list<std::string>
    none, return a list containing just NULL.
 
    We keep a single buffer for the potential filenames and reallocate
    only when necessary.  I'm not sure it's noticeably faster, but it
    does seem cleaner.  (We do waste a bit of space in the return
    value, though, since we don't shrink it to the final size returned.)  */
 
 static std::list<std::string>
-dir_list_search (str_llist_type *dirs, const std::string& name,
+dir_list_search (std::list<std::string>& dirs, const std::string& name,
                  bool search_all)
 {
-  str_llist_elt_type *elt;
   std::list<std::string> ret;
 
-  for (elt = *dirs; elt; elt = STR_LLIST_NEXT (*elt))
+  for (const auto &dir : dirs)
     {
-      const std::string dir = STR_LLIST (*elt);
-
       std::string potential = dir + name;
 
       std::string tmp = kpse_readable_file (potential);
 
       if (! tmp.empty ())
         {
           ret.push_back (potential);
 
@@ -571,19 +545,19 @@ path_search (const std::string& path, co
          (search), also tests first_search, and does the resetting.  */
       if (first_search)
         found = std::list<std::string> ();
 
       /* Search the filesystem.  */
 
       if (found.empty ())
         {
-          str_llist_type *dirs = kpse_element_dirs (elt);
+          std::list<std::string> dirs = kpse_element_dirs (elt);
 
-          if (dirs && *dirs)
+          if (! dirs.empty ())
             found = dir_list_search (dirs, name, all);
         }
 
       /* Did we find anything anywhere?  */
       if (! found.empty ())
         {
           if (all)
             ret_list.splice (ret_list.end (), found);
@@ -699,18 +673,17 @@ path_find_first_of (const std::string& p
 {
   std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
-      str_llist_type *dirs;
-      str_llist_elt_type *dirs_elt;
+      std::list<std::string> dirs;
       std::list<std::string> found;
 
       /* Do not touch the device if present */
 
       if (NAME_BEGINS_WITH_DEVICE (elt))
         {
           while (elt.length () > 3
                  && IS_DIR_SEP (elt[2]) && IS_DIR_SEP (elt[3]))
@@ -725,44 +698,35 @@ path_find_first_of (const std::string& p
           /* We never want to search the whole disk.  */
           while (elt.length () > 1
                  && IS_DIR_SEP (elt[0]) && IS_DIR_SEP (elt[1]))
             elt = elt.substr (1);
         }
 
       /* We have to search one directory at a time.  */
       dirs = kpse_element_dirs (elt);
-      for (dirs_elt = *dirs; dirs_elt; dirs_elt = STR_LLIST_NEXT (*dirs_elt))
+      for (const auto &dir : dirs)
         {
-          const std::string dir = STR_LLIST (*dirs_elt);
-
           for (auto it = names.cbegin (); it != names.cend () && ! done; it++)
             {
               std::string name = *it;
 
               /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
                  (find_first_of), also tests first_search, and does the
                  resetting.  */
               if (first_search)
                 found = std::list<std::string> ();
 
               /* Search the filesystem.  */
 
               if (found.empty ())
                 {
-                  static str_llist_type *tmp = 0;
+                  std::list<std::string> tmp;
 
-                  if (! tmp)
-                    {
-                      tmp = new str_llist_type;
-                      *tmp = 0;
-                      str_llist_add (tmp, "");
-                    }
-
-                  STR_LLIST (*(*tmp)) = dir;
+                  tmp.push_back (dir);
 
                   found = dir_list_search (tmp, name, all);
                 }
 
               /* Did we find anything anywhere?  */
               if (! found.empty ())
                 {
                   if (all)
@@ -1123,17 +1087,17 @@ kpse_path_expand (const std::string& pat
   /* Expand variables and braces first.  */
   std::string tmp = kpse_brace_expand (path);
 
   /* Now expand each of the path elements, printing the results */
   for (kpse_path_iterator pi (tmp); pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
-      str_llist_type *dirs;
+      std::list<std::string> dirs;
 
       /* Skip and ignore magic leading chars.  */
       if (elt.length () > 1 && elt[0] == '!' && elt[1] == '!')
         elt = elt.substr (2);
 
       /* Do not touch the device if present */
       if (NAME_BEGINS_WITH_DEVICE (elt))
         {
@@ -1152,32 +1116,29 @@ kpse_path_expand (const std::string& pat
                  && IS_DIR_SEP (elt[0]) && IS_DIR_SEP (elt[1]))
             elt = elt.substr (1);
         }
 
       /* Search the disk for all dirs in the component specified.
          Be faster to check the database, but this is more reliable.  */
       dirs = kpse_element_dirs (elt);
 
-      if (dirs && *dirs)
+      if (! dirs.empty ())
         {
-          str_llist_elt_type *dir;
+          for (const auto &dir : dirs)
+            {
+              size_t dirlen = dir.length ();
 
-          for (dir = *dirs; dir; dir = STR_LLIST_NEXT (*dir))
-            {
-              const std::string thedir = STR_LLIST (*dir);
-              unsigned dirlen = thedir.length ();
-
-              ret += thedir;
+              ret += dir;
               len += dirlen;
 
               /* Retain trailing slash if that's the root directory.  */
               if (dirlen == 1
-                  || (dirlen == 3 && NAME_BEGINS_WITH_DEVICE (thedir)
-                      && IS_DIR_SEP (thedir[2])))
+                  || (dirlen == 3 && NAME_BEGINS_WITH_DEVICE (dir)
+                      && IS_DIR_SEP (dir[2])))
                 {
                   ret += ENV_SEP_STRING;
                   len++;
                 }
 
               ret[len-1] = ENV_SEP;
             }
         }
@@ -1522,73 +1483,73 @@ kpse_expand_default (const std::string& 
 /* To avoid giving prototypes for all the routines and then their real
    definitions, we give all the subroutines first.  The entry point is
    the last routine in the file.  */
 
 /* Make a copy of DIR (unless it's null) and save it in L.  Ensure that
    DIR ends with a DIR_SEP for the benefit of later searches.  */
 
 static void
-dir_list_add (str_llist_type *l, const std::string& dir)
+dir_list_add (std::list<std::string>& lst, const std::string& dir)
 {
   char last_char = dir[dir.length () - 1];
 
   std::string saved_dir = dir;
 
   if (! (IS_DIR_SEP (last_char) || IS_DEVICE_SEP (last_char)))
     saved_dir += DIR_SEP_STRING;
 
-  str_llist_add (l, saved_dir);
+  lst.push_back (saved_dir);
 }
 
 /* Return true if FN is a directory or a symlink to a directory,
    false if not. */
 
 static bool
 dir_p (const std::string& fn)
 {
   octave::sys::file_stat fs (fn);
 
   return (fs && fs.is_dir ());
 }
 
 /* If DIR is a directory, add it to the list L.  */
 
 static void
-checked_dir_list_add (str_llist_type *l, const std::string& dir)
+checked_dir_list_add (std::list<std::string>& lst, const std::string& dir)
 {
   if (dir_p (dir))
-    dir_list_add (l, dir);
+    dir_list_add (lst, dir);
 }
 
 /* The cache.  Typically, several paths have the same element; for
    example, /usr/local/lib/texmf/fonts//.  We don't want to compute the
    expansion of such a thing more than once.  */
 
 struct cache_entry
 {
   cache_entry (void) : key (), value (0) { }
 
   ~cache_entry (void) { }
 
   std::string key;
-  str_llist_type *value;
+  std::list<std::string> value;
 };
 
 static cache_entry *the_cache = 0;
 static unsigned cache_length = 0;
 
 /* Associate KEY with VALUE.  We implement the cache as a simple linear
    list, since it's unlikely to ever be more than a dozen or so elements
    long.  We don't bother to check here if PATH has already been saved;
    we always add it to our list.  We copy KEY but not VALUE; not sure
    that's right, but it seems to be all that's needed.  */
 
 static void
-cache (const std::string key, str_llist_type *value)
+cache (const std::string key, std::list<std::string>& value)
 {
   cache_entry *new_cache = new cache_entry [cache_length+1];
 
   for (unsigned i = 0; i < cache_length; i++)
     {
       new_cache[i].key = the_cache[i].key;
       new_cache[i].value = the_cache[i].value;
     }
@@ -1600,28 +1561,31 @@ cache (const std::string key, str_llist_
   the_cache[cache_length].key = key;
   the_cache[cache_length].value = value;
 
   cache_length++;
 }
 
 /* To retrieve, just check the list in order.  */
 
-static str_llist_type *
+static std::list<std::string>
 cached (const std::string& key)
 {
-  unsigned p;
+  std::list<std::string> retval;
 
-  for (p = 0; p < cache_length; p++)
+  for (unsigned p = 0; p < cache_length; p++)
     {
       if (key == the_cache[p].key)
-        return the_cache[p].value;
+        {
+          retval = the_cache[p].value;
+          break;
+        }
     }
 
-  return 0;
+  return retval;
 }
 
 #if defined (WIN32)
 
 /* Shared across recursive calls, it acts like a stack. */
 static std::string dirname;
 
 #else /* WIN32 */
@@ -1634,82 +1598,53 @@ static std::string dirname;
    of the corresponding (existing) directory or directories, with
    trailing slashes, or NULL.  If ELT is the empty string, check the
    current working directory.
 
    It's up to the caller to expand ELT.  This is because this routine is
    most likely only useful to be called from 'kpse_path_search', which
    has already assumed expansion has been done.  */
 
-static str_llist_type *
+static std::list<std::string>
 kpse_element_dirs (const std::string& elt)
 {
-  str_llist_type *ret;
+  std::list<std::string> ret;
 
   /* If given nothing, return nothing.  */
   if (elt.empty ())
-    return 0;
+    return ret;
 
   /* If we've already cached the answer for ELT, return it.  */
   ret = cached (elt);
-  if (ret)
+  if (! ret.empty ())
     return ret;
 
-  /* We're going to have a real directory list to return.  */
-  ret = new str_llist_type;
-  *ret = 0;
-
   /* We handle the hard case in a subroutine.  */
   checked_dir_list_add (ret, elt);
 
   /* Remember the directory list we just found, in case future calls are
      made with the same ELT.  */
   cache (elt, ret);
 
 #if defined (KPSE_DEBUG)
   if (KPSE_DEBUG_P (KPSE_DEBUG_EXPAND))
     {
       std::cerr << "kdebug: path element " << elt << " =>";
-      if (ret)
+      if (! ret.empty  ())
         {
-          str_llist_elt_type *e;
-          for (e = *ret; e; e = STR_LLIST_NEXT (*e))
-            std::cerr << " " << STR_LLIST (*e);
+          for (const auto &ret_elt : ret)
+            std::cerr << " " << ret_elt;
         }
       std::cerr << std::endl;
     }
 #endif /* KPSE_DEBUG */
 
   return ret;
 }
 
-/* Implementation of a linked list of strings.  */
-
-/* Add the new string STR to the end of the list L.  */
-
-static void
-str_llist_add (str_llist_type *l, const std::string& str)
-{
-  str_llist_elt_type *e;
-  str_llist_elt_type *new_elt = new str_llist_elt_type;
-
-  /* The new element will be at the end of the list.  */
-  STR_LLIST (*new_elt) = str;
-  STR_LLIST_NEXT (*new_elt) = 0;
-
-  /* Find the current end of the list.  */
-  for (e = *l; e && STR_LLIST_NEXT (*e); e = STR_LLIST_NEXT (*e))
-    ;
-
-  if (! e)
-    *l = new_elt;
-  else
-    STR_LLIST_NEXT (*e) = new_elt;
-}
-
 /* Variable expansion.  */
 
 /* We have to keep track of variables being expanded, otherwise
    constructs like TEXINPUTS = $TEXINPUTS result in an infinite loop.
    (Or indirectly recursive variables, etc.)  Our simple solution is to
    add to a list each time an expansion is started, and check the list
    before expanding.  */
 
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -72,26 +72,22 @@ namespace octave
   directory_path::all_directories (void)
   {
     std::list<std::string> retval;
 
     if (m_initialized)
       {
         for (const auto& elt : m_path_elements)
           {
-            str_llist_type *elt_dirs = kpse_element_dirs (elt);
+            std::list<std::string> elt_dirs = kpse_element_dirs (elt);
 
-            if (elt_dirs)
+            if (! elt_dirs.empty ())
               {
-                str_llist_elt_type *dir;
-
-                for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
+                for (const auto &elt_dir : elt_dirs)
                   {
-                    const std::string elt_dir = STR_LLIST (*dir);
-
                     if (! elt_dir.empty ())
                       retval.push_back (elt_dir);
                   }
               }
           }
       }
 
     return retval;
