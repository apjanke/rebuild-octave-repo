# HG changeset patch
# User Rik <rik@octave.org>
# Date 1420250724 28800
#      Fri Jan 02 18:05:24 2015 -0800
# Node ID 18377fc879d0aaf289da9c9015e691177b93df3b
# Parent  ffc339cea115eb2f5e50b052f751a72b2a37f925
Make cmd-line options for --eval, script file, '< script' mutually exclusive (bug #35318).

* octave.cc (octave_process_command_line): Check for invalid pairs of mutually
exclusive command line options.  Re-format various comments to use up to 80 columns.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -91,18 +91,17 @@ extern void install_builtins (void);
 int octave_cmdline_argc;
 char **octave_cmdline_argv;
 int octave_embedded;
 
 // The command-line options.
 static string_vector octave_argv;
 
 // The name used to invoke Octave.
-static std::string
-octave_program_invocation_name;
+static std::string octave_program_invocation_name;
 
 // The last component of octave_program_invocation_name.
 static std::string octave_program_name;
 
 // TRUE means we are using readline.
 // (--no-line-editing)
 static bool line_editing = true;
 
@@ -153,26 +152,29 @@ static std::string exec_path;
 // The value for "IMAGE_PATH" specified on the command line.
 // (--image-path)
 static std::string image_path;
 
 // If TRUE, ignore the window system even if it is available.
 // (--no-window-system, -W)
 static bool no_window_system = false;
 
-// The code to evaluate at startup (--eval CODE)
+// The code to evaluate at startup
+// (--eval CODE)
 static std::string code_to_eval;
 
 // If TRUE, don't exit after evaluating code given by --eval option.
+// (--persist)
 static bool persist = false;
 
 // If TRUE, the GUI should be started.
 static bool start_gui = false;
 
-// If TRUE use traditional settings (--traditional)
+// If TRUE use traditional (maximally MATLAB compatible) settings
+// (--traditional)
 static bool traditional = false;
 
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
   assert (symbol_table::at_top_level ());
@@ -252,20 +254,20 @@ static void
 gripe_safe_source_exception (const std::string& file, const std::string& msg)
 {
   std::cerr << "error: " << msg << "\n"
             << "error: execution of " << file << " failed\n"
             << "error: trying to make my way to a command prompt"
             << std::endl;
 }
 
-// Execute commands from a file and catch potential exceptions in a
-// consistent way.  This function should be called anywhere we might
-// parse and execute commands from a file before before we have entered
-// the main loop in toplev.cc.
+// Execute commands from a file and catch potential exceptions in a consistent
+// way.  This function should be called anywhere we might parse and execute
+// commands from a file before before we have entered the main loop in
+// toplev.cc.
 
 static void
 safe_source_file (const std::string& file_name,
                   const std::string& context = std::string (),
                   bool verbose = false, bool require_file = true,
                   const std::string& warn_for = std::string ())
 {
   try
@@ -310,18 +312,18 @@ execute_startup_files (void)
                         require_file);
 
       safe_source_file (Vsite_defaults_file, context, verbose, require_file);
     }
 
   if (read_init_files)
     {
       // Try to execute commands from $HOME/$OCTAVE_INITFILE and
-      // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set, .octaverc
-      // is assumed.
+      // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set, 
+      // .octaverc is assumed.
 
       bool home_rc_already_executed = false;
 
       std::string initfile = octave_env::getenv ("OCTAVE_INITFILE");
 
       if (initfile.empty ())
         initfile = ".octaverc";
 
@@ -468,17 +470,17 @@ static void
 initialize_error_handlers ()
 {
   set_liboctave_error_handler (lo_error_handler);
   set_liboctave_error_with_id_handler (lo_error_with_id_handler);
   set_liboctave_warning_handler (warning);
   set_liboctave_warning_with_id_handler (warning_with_id);
 }
 
-// What happens on --traditional.
+// What internal options get configured by --traditional.
 
 static void
 maximum_braindamage (void)
 {
   persist = true;
 
   FPS1 (octave_value (">> "));
   FPS2 (octave_value (""));
@@ -532,19 +534,18 @@ octave_process_command_line (int argc, c
       int optc = getopt_long (argc, argv, short_opts, long_opts, &long_idx);
 
       if (optc < 0)
         break;
 
       switch (optc)
         {
         case '?':
-          // Unrecognized option.  getopt_long already printed a
-          // message about that, so we will just print the usage string
-          // and exit.
+          // Unrecognized option.  getopt_long already printed a message about
+          // it, so we will just print the usage string and exit.
           octave_print_terse_usage_and_exit ();
           break;
 
         case 'H':
           Fhistory_save (octave_value (false));
           read_history_file = false;
           break;
 
@@ -679,31 +680,58 @@ octave_process_command_line (int argc, c
             Ftexi_macros_file (octave_value (optarg));
           break;
 
         case TRADITIONAL_OPTION:
           traditional = true;
           break;
 
         default:
-          // getopt_long should print a message about unrecognized
-          // options and return '?', which is handled above.  So if we
-          // end up here, it is because there was an option but we
-          // forgot to handle it.  That should be fatal.
+          // getopt_long should print a message about unrecognized options and
+          // return '?', which is handled above.  If we end up here, it is
+          // because there was an option but we forgot to handle it.
+          // That should be fatal.
           panic_impossible ();
           break;
         }
     }
 
+  // Check for various incompatible argument pairs
   if (force_gui_option && no_gui_option)
     {
-      error ("error: only one of --force-gui and --no-gui may be used");
+      error ("only one of --force-gui and --no-gui may be used");
+
+      octave_print_terse_usage_and_exit ();
+    }
+
+  bool script_file = (argc - optind) > 0;
+
+  if (! code_to_eval.empty () && script_file)
+    {
+      error ("--eval \"CODE\" and script file are mutually exclusive options");
 
       octave_print_terse_usage_and_exit ();
     }
+
+  bool redir_input = ! gnulib::isatty (fileno (stdin));
+
+  if (! code_to_eval.empty () && redir_input)
+    {
+      error ("--eval \"CODE\" and '< script' are mutually exclusive options");
+
+      octave_print_terse_usage_and_exit ();
+    }
+ 
+  if (script_file && redir_input)
+    {
+      error ("script file and '< script' are mutually exclusive options");
+
+      octave_print_terse_usage_and_exit ();
+    }
+
 }
 
 // EMBEDDED is declared int instead of bool because this function is
 // declared extern "C".
 
 void
 octave_initialize_interpreter (int argc, char **argv, int embedded)
 {
@@ -717,32 +745,31 @@ octave_initialize_interpreter (int argc,
 
   octave_program_invocation_name = octave_env::get_program_invocation_name ();
   octave_program_name = octave_env::get_program_name ();
 
   octave_thread::init ();
 
   set_default_prompts ();
 
-  // Initialize default warning state before --traditional option may
-  // reset them.
+  // Initialize default warning state before --traditional option
+  // that may reset them.
 
   initialize_default_warning_state ();
 
   if (traditional)
     maximum_braindamage ();
 
   init_signals ();
 
   octave_ieee_init ();
 
-  // The idea here is to force xerbla to be referenced so that we will
-  // link to our own version instead of the one provided by the BLAS
-  // library.  But octave_NaN should never be -1, so we should never
-  // actually call xerbla.
+  // The idea here is to force xerbla to be referenced so that we will link to
+  // our own version instead of the one provided by the BLAS library.  But
+  // octave_NaN should never be -1, so we should never actually call xerbla.
 
   if (octave_NaN == -1)
     F77_FUNC (xerbla, XERBLA) ("octave", 13 F77_CHAR_ARG_LEN (6));
 
   initialize_error_handlers ();
 
   if (! embedded)
     install_signal_handlers ();
@@ -767,18 +794,17 @@ octave_initialize_interpreter (int argc,
     set_exec_path (exec_path);
 
   if (! image_path.empty ())
     set_image_path (image_path);
 
   if (no_window_system)
     display_info::no_window_system ();
 
-  // Is input coming from a terminal?  If so, we are probably
-  // interactive.
+  // Is input coming from a terminal?  If so, we are probably interactive.
 
   // If stdin is not a tty, then we are reading commands from a pipe or
   // a redirected file.
   bool stdin_is_tty = gnulib::isatty (fileno (stdin));
 
   interactive = (! embedded && stdin_is_tty
                  && gnulib::isatty (fileno (stdout)));
 
@@ -817,36 +843,35 @@ octave_execute_interpreter (void)
 
   octave_prepare_hdf5 ();
 
   execute_startup_files ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
-  // If there is an extra argument, see if it names a file to read.
-  // Additional arguments are taken as command line options for the
-  // script.
-
-  int last_arg_idx = optind;
-
-  int remaining_args = octave_cmdline_argc - last_arg_idx;
-
+  // Execute any code specified with --eval 'CODE'
   if (! code_to_eval.empty ())
     {
       int parse_status = execute_eval_option_code (code_to_eval);
 
-      if (! (persist || remaining_args > 0))
+      if (! persist)
         {
           quitting_gracefully = true;
 
           clean_up_and_exit (parse_status || error_state ? 1 : 0);
         }
     }
 
+  // If there is an extra argument, see if it names a file to read.
+  // Additional arguments are taken as command line options for the script.
+
+  int last_arg_idx = optind;
+  int remaining_args = octave_cmdline_argc - last_arg_idx;
+
   if (remaining_args > 0)
     {
       // If we are running an executable script (#! /bin/octave) then
       // we should only see the args passed to the script.
 
       intern_argv (remaining_args, octave_cmdline_argv+last_arg_idx);
 
       execute_command_line_file (octave_cmdline_argv[last_arg_idx]);
@@ -861,33 +886,32 @@ octave_execute_interpreter (void)
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // Now argv should have the full set of args.
   intern_argv (octave_cmdline_argc, octave_cmdline_argv);
 
-  // Force input to be echoed if not really interactive, but the user
-  // has forced interactive behavior.
+  // Force input to be echoed if not really interactive,
+  // but the user has forced interactive behavior.
 
   if (! interactive && forced_interactive)
     {
       command_editor::blink_matching_paren (false);
 
       // FIXME: is this the right thing to do?
-
       Fecho_executing_commands (octave_value (ECHO_CMD_LINE));
     }
 
   if (octave_embedded)
     {
-      // FIXME: do we need to do any cleanup here before
-      // returning?  If we don't, what will happen to Octave functions
-      // that have been registered to execute with atexit, for example?
+      // FIXME: Do we need to do any cleanup here before returning?
+      // If we don't, what will happen to Octave functions that have been
+      // registered to execute with atexit, for example?
 
       return 1;
     }
 
   int retval = main_loop ();
 
   quitting_gracefully = true;
 
@@ -915,39 +939,37 @@ check_starting_gui (void)
     return true;
 
   if (no_gui_option)
     return false;
 
   if (persist)
     return true;
 
-  // If stdin is not a tty, then assume we are reading commands from a
-  // pipe or a redirected file and the GUI should not start.  If this is
-  // not the case (for example, starting from a desktop "launcher" with
-  // no terminal) and you want to start the GUI, you may use the
-  // --force-gui option to start the GUI.
+  // If stdin is not a tty, then assume we are reading commands from a pipe or
+  // a redirected file and the GUI should not start.  If this is not the case
+  // (for example, starting from a desktop "launcher" with no terminal) and you
+  // want to start the GUI, you may use the --force-gui option to start the GUI.
 
   if (! gnulib::isatty (fileno (stdin)))
     return false;
 
-  // If we have code to eval or execute from a file, and we are going to
-  // exit immediately after executing it, don't start the gui.
+  // If we have code to eval or execute from a file, and we are going to exit
+  // immediately after executing it, don't start the gui.
 
   int last_arg_idx = optind;
   int remaining_args = octave_cmdline_argc - last_arg_idx;
 
   if (! code_to_eval.empty () || remaining_args > 0)
     return false;
 
   return true;
 }
 
-// Return int instead of bool because this function is declared
-// extern "C".
+// Return int instead of bool because this function is declared extern "C".
 
 int
 octave_starting_gui (void)
 {
   start_gui = check_starting_gui ();
   return start_gui;
 }
 
@@ -970,30 +992,31 @@ Return true if Octave is running in GUI 
 /*
 %!assert (islogical (isguirunning ()))
 %!error isguirunning (1)
 */
 
 DEFUN (argv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} argv ()\n\
-Return the command line arguments passed to Octave.  For example,\n\
-if you invoked Octave using the command\n\
+Return the command line arguments passed to Octave.\n\
+\n\
+For example, if you invoked Octave using the command\n\
 \n\
 @example\n\
 octave --no-line-editing --silent\n\
 @end example\n\
 \n\
 @noindent\n\
 @code{argv} would return a cell array of strings with the elements\n\
 @option{--no-line-editing} and @option{--silent}.\n\
 \n\
-If you write an executable Octave script, @code{argv} will return the\n\
-list of arguments passed to the script.  @xref{Executable Octave Programs},\n\
-for an example of how to create an executable Octave script.\n\
+If you write an executable Octave script, @code{argv} will return the list\n\
+of arguments passed to the script.  @xref{Executable Octave Programs}, for\n\
+an example of how to create an executable Octave script.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = Cell (octave_argv);
   else
     print_usage ();
