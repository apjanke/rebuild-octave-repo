# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510774711 18000
#      Wed Nov 15 14:38:31 2017 -0500
# Node ID cf15cb87bad99d7a596c3b8dacbcf1e42ab75417
# Parent  f8c263f961c1ad17d2114627964932695de9e6f2
use shared_ptr to manage thread_manager object

* thread_manager.h (octave_base_thread_manager::count): Delete data
member and all uses.
(class octave_base_thread_manager, class octave_thread_manager):
Use default constructor and destructor methods where possible.
(octave_thread_manager::m_rep): Manage with shared_ptr.

diff --git a/libgui/src/thread-manager.h b/libgui/src/thread-manager.h
--- a/libgui/src/thread-manager.h
+++ b/libgui/src/thread-manager.h
@@ -20,77 +20,55 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_thread_manager_h)
 #define octave_thread_manager_h 1
 
 #include "octave-config.h"
 
-#include "oct-refcount.h"
+#include <memory>
 
 class octave_base_thread_manager
 {
 public:
 
   friend class octave_thread_manager;
 
-  octave_base_thread_manager (void) : m_count (1) { }
+  octave_base_thread_manager (void) = default;
 
-  octave_base_thread_manager (const octave_base_thread_manager&)
-    : m_count (1)
-  { }
+  octave_base_thread_manager (const octave_base_thread_manager&) = default;
 
   virtual ~octave_base_thread_manager (void) = default;
 
   virtual void register_current_thread (void) = 0;
 
   virtual void interrupt (void) = 0;
-
-protected:
-
-  octave::refcount<int> m_count;
 };
 
 class octave_thread_manager
 {
 public:
 
   octave_thread_manager (void);
 
-  ~octave_thread_manager (void)
-  {
-    if (--m_rep->m_count == 0)
-      delete m_rep;
-  }
-
-  octave_thread_manager (const octave_thread_manager& tm) : m_rep (tm.m_rep) { }
+  ~octave_thread_manager (void) = default;
 
-  octave_thread_manager& operator = (const octave_thread_manager& tm)
-  {
-    if (m_rep != tm.m_rep)
-      {
-        if (--m_rep->m_count == 0)
-          delete m_rep;
+  octave_thread_manager (const octave_thread_manager& tm) = default;
 
-        m_rep = tm.m_rep;
-        m_rep->m_count++;
-      }
-
-    return *this;
-  }
+  octave_thread_manager& operator = (const octave_thread_manager& tm) = default;
 
   void register_current_thread (void) { m_rep->register_current_thread (); }
 
   void interrupt (void) { m_rep->interrupt (); }
 
   static void block_interrupt_signal (void);
 
   static void unblock_interrupt_signal (void);
 
 private:
 
-  octave_base_thread_manager *m_rep;
+  std::shared_ptr<octave_base_thread_manager> m_rep;
 
   static octave_base_thread_manager * create_rep (void);
 };
 
 #endif
