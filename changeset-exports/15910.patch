# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1357505128 18000
#      Sun Jan 06 15:45:28 2013 -0500
# Branch classdef
# Node ID dfd0dc594c4ffa1eff638b098a332c9cc2229b6e
# Parent  b8bff84022d6ae102ac60dfc262ccf9357f3bdfe
Add object counting to cdef_class.

* libinterp/octave-value/ov-classdef.h
(cdef_class::cdef_class_rep::object_count): New member.
(cdef_class::cdef_class_rep::cdef_class_rep): Initialize it.
(cdef_class::cdef_class_rep::register_object,
cdef_class::cdef_class_rep::unregister_object): New methods.
(cdef_class::register_object, cdef_class::unregister_object): Likewise.
(cdef_object_base::set_class, cdef_object_base::register_object,
cdef_object_base::unregister_object): Use them.

* libinterp/octave_value/ov-classdef.cc
(cdef_class::cdef_class_rep::cdef_class_rep (std::list<cdef_class>)):
Initialize object_count.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1209,17 +1209,17 @@ handle_cdef_object::~handle_cdef_object 
 
 value_cdef_object::~value_cdef_object (void)
 {
   gnulib::printf ("deleting %s object (value)\n",
                   get_class ().get_name ().c_str ());
 }
 
 cdef_class::cdef_class_rep::cdef_class_rep (const std::list<cdef_class>& superclasses)
-     : handle_cdef_object (), handle_class (false)
+     : handle_cdef_object (), handle_class (false), object_count (0)
 {
   put ("SuperClasses", to_ov (superclasses));
   implicit_ctor_list = superclasses;
 }
 
 cdef_method
 cdef_class::cdef_class_rep::find_method (const std::string& nm, bool local)
 {
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -400,17 +400,17 @@ cdef_class : public cdef_object
 {
 private:
 
   class
   cdef_class_rep : public handle_cdef_object
   {
   public:
     cdef_class_rep (void)
-	: handle_cdef_object (), handle_class (false) { }
+	: handle_cdef_object (), handle_class (false), object_count (0) { }
 
     cdef_class_rep (const std::list<cdef_class>& superclasses);
 
     bool is_class (void) const { return true; }
 
     std::string get_name (void) const
       { return get ("Name").string_value (); }
 
@@ -445,16 +445,20 @@ private:
     void initialize_object (cdef_object& obj);
 
     void run_constructor (cdef_object& obj, const octave_value_list& args);
 
     void mark_as_handle_class (void) { handle_class = true; }
 
     bool is_handle_class (void) const { return handle_class; }
 
+    void register_object (void) { object_count++; }
+
+    void unregister_object (void) { object_count--; }
+
   private:
     void load_all_methods (void);
 
     void find_names (std::set<std::string>& names, bool all);
     
     void find_properties (std::map<std::string,cdef_property>& props,
                           bool only_inherited);
 
@@ -482,16 +486,19 @@ private:
     // class when the abstract "handle" class is one of its superclasses.
     bool handle_class;
 
     // The list of super-class constructors that are called implicitly by the
     // the classdef engine when creating an object. These constructors are not
     // called explicitly by the class constructor.
     std::list<cdef_class> implicit_ctor_list;
 
+    // The number of objects of this class.
+    octave_refcount<octave_idx_type> object_count;
+
     // Utility iterator typedef's.
     typedef std::map<std::string,cdef_method>::iterator method_iterator;
     typedef std::map<std::string,cdef_method>::const_iterator method_const_iterator;
     typedef std::map<std::string,cdef_property>::iterator property_iterator;
     typedef std::map<std::string,cdef_property>::const_iterator property_const_iterator;
   };
 
 public:
@@ -592,16 +599,20 @@ public:
   bool is_handle_class (void) const
     { return get_rep ()->is_handle_class (); }
 
   static const cdef_class& meta_class (void) { return _meta_class; }
   static const cdef_class& meta_property (void) { return _meta_property; }
   static const cdef_class& meta_method (void) { return _meta_method; }
   static const cdef_class& meta_package (void) { return _meta_package; }
 
+  void register_object (void) { get_rep ()->register_object (); }
+
+  void unregister_object (void) { get_rep ()->unregister_object (); }
+
 private:
   cdef_class_rep* get_rep (void)
     { return dynamic_cast<cdef_class_rep *> (cdef_object::get_rep ()); }
   
   const cdef_class_rep* get_rep (void) const
     { return dynamic_cast<const cdef_class_rep *> (cdef_object::get_rep ()); }
 
   friend bool operator == (const cdef_class&, const cdef_class&);
@@ -830,29 +841,48 @@ cdef_object::get_class (void) const
 
 inline cdef_class
 cdef_object_base::get_class (void) const
 { return cdef_class (klass); }
 
 inline void
 cdef_object_base::set_class (const cdef_class& cls)
 {
-  klass = cls;
+  if ((klass.ok () && cls.ok () && cls != get_class ())
+      || (klass.ok () && ! cls.ok ())
+      || (! klass.ok () && cls.ok ()))
+    {
+      unregister_object ();
+      klass = cls;
+      register_object ();
+    }
 }
 
 inline void
 cdef_object_base::register_object (void)
 {
-  // FIXME: implement this
+  if (klass.ok ())
+    {
+      cdef_class cls (get_class ());
+
+      if (! error_state && cls.ok ())
+        cls.register_object ();
+    }
 }
 
 inline void
 cdef_object_base::unregister_object (void)
 {
-  // FIXME: implement this
+  if (klass.ok ())
+    {
+      cdef_class cls (get_class ());
+
+      if (! error_state && cls.ok ())
+        cls.unregister_object ();
+    }
 }
 
 inline cdef_method
 cdef_class::find_method (const std::string& nm, bool local)
 { return get_rep ()->find_method (nm, local); }
 
 inline cdef_property
 cdef_class::find_property (const std::string& nm)
