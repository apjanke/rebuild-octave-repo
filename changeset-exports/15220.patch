# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345738439 14400
#      Thu Aug 23 12:13:59 2012 -0400
# Node ID 61822c866ba1a01d5dd3ee62dd0c81389b729282
# Parent  aeba1adfd76b8bac513c98410c363bbc2309c318
use std::numeric_limits<T>::epsilon in C++ code

* __contourc__.cc, __qp__.cc, quadcc.cc, qz.cc, eigs.cc, mex.cc,
graphics.cc, CMatrix.cc, CollocWt.cc, DASPK-opts.in, DASRT-opts.in,
DASSL-opts.in, LSODE-opts.in, Quad-opts.in, Range.cc, dMatrix.cc,
eigs-base.cc, fCMatrix.cc, fMatrix.cc: Replace DBL_EPSILON and
FLT_EPSILON with std::numeric_limits<T>::epsilon.

diff --git a/libinterp/corefcn/__contourc__.cc b/libinterp/corefcn/__contourc__.cc
--- a/libinterp/corefcn/__contourc__.cc
+++ b/libinterp/corefcn/__contourc__.cc
@@ -224,18 +224,18 @@ mark_facets (const Matrix& Z, charMatrix
     for (unsigned int r = 0; r < nr; r++)
       {
         f[0] = Z(r, c) - lvl;
         f[1] = Z(r, c+1) - lvl;
         f[3] = Z(r+1, c) - lvl;
         f[2] = Z(r+1, c+1) - lvl;
 
         for (unsigned int i = 0; i < 4; i++)
-          if (fabs(f[i]) < DBL_EPSILON)
-            f[i] = DBL_EPSILON;
+          if (fabs(f[i]) < std::numeric_limits<double>::epsilon ())
+            f[i] = std::numeric_limits<double>::epsilon ();
 
         if (f[1] * f[2] < 0)
           mark(r, c) += 2;
 
         if (f[0] * f[3] < 0)
           mark(r, c) += 8;
       }
 
@@ -243,18 +243,18 @@ mark_facets (const Matrix& Z, charMatrix
     for (unsigned int c = 0; c < nc; c++)
       {
         f[0] = Z(r, c) - lvl;
         f[1] = Z(r, c+1) - lvl;
         f[3] = Z(r+1, c) - lvl;
         f[2] = Z(r+1, c+1) - lvl;
 
         for (unsigned int i = 0; i < 4; i++)
-          if (fabs(f[i]) < DBL_EPSILON)
-            f[i] = DBL_EPSILON;
+          if (fabs(f[i]) < std::numeric_limits<double>::epsilon ())
+            f[i] = std::numeric_limits<double>::epsilon ();
 
         if (f[0] * f[1] < 0)
           mark(r, c) += 1;
 
         if (f[2] * f[3] < 0)
           mark(r, c) += 4;
       }
 }
diff --git a/libinterp/corefcn/__qp__.cc b/libinterp/corefcn/__qp__.cc
--- a/libinterp/corefcn/__qp__.cc
+++ b/libinterp/corefcn/__qp__.cc
@@ -55,33 +55,33 @@ null (const Matrix& A, octave_idx_type& 
 
       Matrix V = A_svd.right_singular_matrix ();
 
       octave_idx_type A_nr = A.rows ();
       octave_idx_type A_nc = A.cols ();
 
       octave_idx_type tmp = A_nr > A_nc ? A_nr : A_nc;
 
-      double tol = tmp * s(0) * DBL_EPSILON;
+      double tol = tmp * s(0) * std::numeric_limits<double>::epsilon ();
 
       octave_idx_type n = s.length ();
 
       for (octave_idx_type i = 0; i < n; i++)
         {
           if (s(i) > tol)
             rank++;
         }
 
       if (rank < A_nc)
         retval = V.extract (0, rank, A_nc-1, A_nc-1);
       else
         retval.resize (A_nc, 0);
 
       for (octave_idx_type i = 0; i < retval.numel (); i++)
-        if (std::abs (retval(i)) < DBL_EPSILON)
+        if (std::abs (retval(i)) < std::numeric_limits<double>::epsilon ())
           retval(i) = 0;
     }
 
   return retval;
 }
 
 static int
 qp (const Matrix& H, const ColumnVector& q,
@@ -89,17 +89,17 @@ qp (const Matrix& H, const ColumnVector&
     const Matrix& Ain, const ColumnVector& bin,
     int maxit,
     ColumnVector& x, ColumnVector& lambda, int& iter)
 {
   int info = 0;
 
   iter = 0;
 
-  double rtol = sqrt (DBL_EPSILON);
+  double rtol = sqrt (std::numeric_limits<double>::epsilon ());
 
   // Problem dimension.
   octave_idx_type n = x.length ();
 
   // Dimension of constraints.
   octave_idx_type n_eq = beq.length ();
   octave_idx_type n_in = bin.length ();
 
@@ -204,17 +204,17 @@ qp (const Matrix& H, const ColumnVector&
           else
             {
               // Finding the negative curvature of H.
 
               p = eigenvecH.column (indminR);
 
               // Following the negative curvature of H.
 
-              if (p.transpose () * g > DBL_EPSILON)
+              if (p.transpose () * g > std::numeric_limits<double>::epsilon ())
                 p = -p;
 
               info = 1;
             }
 
           // Multipliers are zero.
           lambda_tmp.fill (0.0);
         }
@@ -302,17 +302,17 @@ qp (const Matrix& H, const ColumnVector&
                     }
                 }
 
               ColumnVector eVrH = eigenvecrH.column (indminR);
 
               // Computing the step pz.
               p = Z * eVrH;
 
-              if (p.transpose () * g > DBL_EPSILON)
+              if (p.transpose () * g > std::numeric_limits<double>::epsilon ())
                 p = -p;
             }
         }
 
       // Checking the step-size.
       ColumnVector abs_p (n);
       for (octave_idx_type i = 0; i < n; i++)
         abs_p(i) = std::abs (p(i));
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1880,17 +1880,17 @@ Mathematical Software, Vol. 37, Issue 3,
         {
           split = 1;
         }
 
 
       /* Should we drop this interval? */
       if ((m + h * xi[0]) >= (m + h * xi[1])
           || (m + h * xi[31]) >= (m + h * xi[32])
-          || iv->err < fabs (iv->igral) * DBL_EPSILON * 10)
+          || iv->err < fabs (iv->igral) * std::numeric_limits<double>::epsilon () * 10)
         {
 
 /*          printf
             ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
              heap[0], nivals, iv->a, iv->b, iv->igral, iv->err,
              iv->depth);
 */
           /* Keep this interval's contribution */
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -844,17 +844,17 @@ compatibility with @sc{matlab}.\n\
           octave_idx_type ndim, fail;
           double inf_norm;
 
           F77_XFCN (xdlange, XDLANGE,
                     (F77_CONST_CHAR_ARG2 ("I", 1),
                      nn, nn, aa.data (), nn, work.fortran_vec (), inf_norm
                      F77_CHAR_ARG_LEN (1)));
 
-          double eps = DBL_EPSILON * inf_norm * nn;
+          double eps = std::numeric_limits<double>::epsilon () * inf_norm * nn;
 
 #ifdef DEBUG_SORT
           std::cout << "qz: calling dsubsp: aa=" << std::endl;
           octave_print_internal (std::cout, aa, 0);
           std::cout << std::endl << "bb="  << std::endl;
           octave_print_internal (std::cout, bb, 0);
           if (compz == 'V')
             {
diff --git a/libinterp/dldfcn/eigs.cc b/libinterp/dldfcn/eigs.cc
--- a/libinterp/dldfcn/eigs.cc
+++ b/libinterp/dldfcn/eigs.cc
@@ -324,17 +324,17 @@ K. Maschhoff, D. Sorensen, and C. Yang. 
   bool a_is_complex = false;
   bool b_is_complex = false;
   bool symmetric = false;
   bool sym_tested = false;
   bool cholB = false;
   bool a_is_sparse = false;
   ColumnVector permB;
   int arg_offset = 0;
-  double tol = DBL_EPSILON;
+  double tol = std::numeric_limits<double>::epsilon ();
   int maxit = 300;
   int disp = 0;
   octave_idx_type p = -1;
   ColumnVector resid;
   ComplexColumnVector cresid;
   octave_idx_type info = 1;
 
   warned_imaginary = false;
diff --git a/libinterp/interp-core/mex.cc b/libinterp/interp-core/mex.cc
--- a/libinterp/interp-core/mex.cc
+++ b/libinterp/interp-core/mex.cc
@@ -2508,17 +2508,17 @@ int
 mxIsNaN (const double v)
 {
   return lo_ieee_isnan (v) != 0;
 }
 
 double
 mxGetEps (void)
 {
-  return DBL_EPSILON;
+  return std::numeric_limits<double>::epsilon ();
 }
 
 double
 mxGetInf (void)
 {
   return lo_ieee_inf_value ();
 }
 
diff --git a/libinterp/interpfcn/graphics.cc b/libinterp/interpfcn/graphics.cc
--- a/libinterp/interpfcn/graphics.cc
+++ b/libinterp/interpfcn/graphics.cc
@@ -5925,17 +5925,17 @@ axes::properties::get_axis_limits (doubl
               return retval;
             }
           if ((min_val <= 0 && max_val > 0))
             {
               warning ("axis: omitting non-positive data in log plot");
               min_val = min_pos;
             }
           // FIXME -- maybe this test should also be relative?
-          if (std::abs (min_val - max_val) < sqrt (DBL_EPSILON))
+          if (std::abs (min_val - max_val) < sqrt (std::numeric_limits<double>::epsilon ()))
             {
               // Widen range when too small
               if (min_val >= 0)
                 {
                   min_val *= 0.9;
                   max_val *= 1.1;
                 }
               else
@@ -5960,17 +5960,17 @@ axes::properties::get_axis_limits (doubl
       else
         {
           if (min_val == 0 && max_val == 0)
             {
               min_val = -1;
               max_val = 1;
             }
           // FIXME -- maybe this test should also be relative?
-          else if (std::abs (min_val - max_val) < sqrt (DBL_EPSILON))
+          else if (std::abs (min_val - max_val) < sqrt (std::numeric_limits<double>::epsilon ()))
             {
               min_val -= 0.1 * std::abs (min_val);
               max_val += 0.1 * std::abs (max_val);
             }
 
           double tick_sep = calc_tick_sep (min_val , max_val);
           double min_tick = gnulib::floor (min_val / tick_sep);
           double max_tick = std::ceil (max_val / tick_sep);
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1187,19 +1187,19 @@ ComplexMatrix::pseudo_inverse (double to
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * DBL_EPSILON;
+        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * DBL_EPSILON;
+        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     retval = ComplexMatrix (nc, nr, 0.0);
   else
diff --git a/liboctave/CollocWt.cc b/liboctave/CollocWt.cc
--- a/liboctave/CollocWt.cc
+++ b/liboctave/CollocWt.cc
@@ -225,22 +225,22 @@ jcobi (octave_idx_type n, octave_idx_typ
           x = x - z;
 
           // Famous last words:  100 iterations should be more than
           // enough in all cases.
 
           if (++k > 100 || xisnan (z))
             return false;
 
-          if (std::abs (z) <= 100 * DBL_EPSILON)
+          if (std::abs (z) <= 100 * std::numeric_limits<double>::epsilon ())
             done = true;
         }
 
       root[i] = x;
-      x = x + sqrt (DBL_EPSILON);
+      x = x + sqrt (std::numeric_limits<double>::epsilon ());
     }
 
   // Add interpolation points at x = 0 and/or x = 1.
 
   if (n0 != 0)
     {
       for (octave_idx_type i = n; i > 0; i--)
         root[i] = root[i-1];
diff --git a/liboctave/DASPK-opts.in b/liboctave/DASPK-opts.in
--- a/liboctave/DASPK-opts.in
+++ b/liboctave/DASPK-opts.in
@@ -27,23 +27,23 @@ Absolute tolerance.  May be either vecto
 must match the dimension of the state vector, and the relative
 tolerance must also be a vector of the same length.
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
@@ -63,23 +63,23 @@ The local error test applied at each int
 @end group
 @end example
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
@@ -167,17 +167,17 @@ time steps.  The default is @code{EPINIT
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (6, 1));
     $OPTVAR(0) = 5.0;
     $OPTVAR(1) = 6.0;
     $OPTVAR(2) = 5.0;
     $OPTVAR(3) = 0.0;
-    $OPTVAR(4) = ::pow (DBL_EPSILON, 2.0/3.0);
+    $OPTVAR(4) = ::pow (std::numeric_limits<double>::epsilon (), 2.0/3.0);
     $OPTVAR(5) = 0.01;
   END_INIT_BODY
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "print initial condition info"
   DOC_ITEM
diff --git a/liboctave/DASRT-opts.in b/liboctave/DASRT-opts.in
--- a/liboctave/DASRT-opts.in
+++ b/liboctave/DASRT-opts.in
@@ -27,23 +27,23 @@ Absolute tolerance.  May be either vecto
 must match the dimension of the state vector, and the relative
 tolerance must also be a vector of the same length.
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
@@ -63,23 +63,23 @@ The local error test applied at each int
 @end group
 @end example
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
diff --git a/liboctave/DASSL-opts.in b/liboctave/DASSL-opts.in
--- a/liboctave/DASSL-opts.in
+++ b/liboctave/DASSL-opts.in
@@ -27,23 +27,23 @@ Absolute tolerance.  May be either vecto
 must match the dimension of the state vector, and the relative
 tolerance must also be a vector of the same length.
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
@@ -63,23 +63,23 @@ The local error test applied at each int
 @end group
 @end example
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
diff --git a/liboctave/LSODE-opts.in b/liboctave/LSODE-opts.in
--- a/liboctave/LSODE-opts.in
+++ b/liboctave/LSODE-opts.in
@@ -26,23 +26,23 @@ OPTION
 Absolute tolerance.  May be either vector or scalar.  If a vector, it
 must match the dimension of the state vector.
 
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (dim_vector (1, 1));
-    $OPTVAR(0) = ::sqrt (DBL_EPSILON);
+    $OPTVAR(0) = ::sqrt (std::numeric_limits<double>::epsilon ());
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
       {
         $OPTVAR.resize (dim_vector (1, 1));
-        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (DBL_EPSILON);
+        $OPTVAR(0) = (val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ());
         reset = true;
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
@@ -58,18 +58,18 @@ The local error test applied at each int
 @group
   abs (local error in x(i)) <= ...
       rtol * abs (y(i)) + atol(i)
 @end group
 @end example
 
   END_DOC_ITEM
   TYPE = "double"
-  INIT_VALUE = "::sqrt (DBL_EPSILON)"
-  SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
+  INIT_VALUE = "::sqrt (std::numeric_limits<double>::epsilon ())"
+  SET_EXPR = "(val > 0.0) ? val : ::sqrt (std::numeric_limits<double>::epsilon ())"
 END_OPTION
 
 OPTION
   NAME = "integration method"
   DOC_ITEM
 A string specifying the method of integration to use to solve the ODE
 system.  Valid values are
 
diff --git a/liboctave/Quad-opts.in b/liboctave/Quad-opts.in
--- a/liboctave/Quad-opts.in
+++ b/liboctave/Quad-opts.in
@@ -20,48 +20,48 @@ CLASS = "Quad"
 
 OPTION
   NAME = "absolute tolerance"
   DOC_ITEM
 Absolute tolerance; may be zero for pure relative error test.
 
   END_DOC_ITEM
   TYPE = "double"
-  INIT_VALUE = "::sqrt (DBL_EPSILON)"
+  INIT_VALUE = "::sqrt (std::numeric_limits<double>::epsilon ())"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "relative tolerance"
   DOC_ITEM
 Non-negative relative tolerance.  If the absolute tolerance is zero,
 the relative tolerance must be greater than or equal to
 @w{@code{max (50*eps, 0.5e-28)}}.
 
   END_DOC_ITEM
   TYPE = "double"
-  INIT_VALUE = "::sqrt (DBL_EPSILON)"
+  INIT_VALUE = "::sqrt (std::numeric_limits<double>::epsilon ())"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "single precision absolute tolerance"
   DOC_ITEM
 Absolute tolerance for single precision; may be zero for pure relative
 error test.
 
   END_DOC_ITEM
   TYPE = "float"
-  INIT_VALUE = "::sqrt (FLT_EPSILON)"
+  INIT_VALUE = "::sqrt (std::numeric_limits<float>::epsilon ())"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "single precision relative tolerance"
   DOC_ITEM
 Non-negative relative tolerance for single precision.  If the absolute
 tolerance is zero, the relative tolerance must be greater than or equal to
 @w{@code{max (50*eps, 0.5e-28)}}.
   END_DOC_ITEM
   TYPE = "float"
-  INIT_VALUE = "::sqrt (FLT_EPSILON)"
+  INIT_VALUE = "::sqrt (std::numeric_limits<float>::epsilon ())"
   SET_EXPR = "val"
 END_OPTION
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -451,17 +451,17 @@ tfloor (double x, double ct)
 
 static inline double
 tceil (double x, double ct)
 {
   return -tfloor (-x, ct);
 }
 
 static inline bool
-teq (double u, double v, double ct = 3.0 * DBL_EPSILON)
+teq (double u, double v, double ct = 3.0 * std::numeric_limits<double>::epsilon ())
 {
   double tu = fabs (u);
   double tv = fabs (v);
 
   return fabs (u - v) < ((tu > tv ? tu : tv) * ct);
 }
 
 octave_idx_type
@@ -472,17 +472,17 @@ Range::nelem_internal (void) const
   if (rng_inc == 0
       || (rng_limit > rng_base && rng_inc < 0)
       || (rng_limit < rng_base && rng_inc > 0))
     {
       retval = 0;
     }
   else
     {
-      double ct = 3.0 * DBL_EPSILON;
+      double ct = 3.0 * std::numeric_limits<double>::epsilon ();
 
       double tmp = tfloor ((rng_limit - rng_base + rng_inc) / rng_inc, ct);
 
       octave_idx_type n_elt = (tmp > 0.0 ? static_cast<octave_idx_type> (tmp) : 0);
 
       // If the final element that we would compute for the range is
       // equal to the limit of the range, or is an adjacent floating
       // point number, accept it.  Otherwise, try a range with one
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -860,19 +860,19 @@ Matrix::pseudo_inverse (double tol) cons
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * DBL_EPSILON;
+        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * DBL_EPSILON;
+        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     return Matrix (nc, nr, 0.0);
   else
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -3667,174 +3667,189 @@ EigsComplexNonSymmetricFunc (EigsComplex
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern octave_idx_type
 EigsRealSymmetricMatrix (const Matrix& m, const std::string typ,
                          octave_idx_type k, octave_idx_type p,
                          octave_idx_type &info, Matrix &eig_vec,
                          ColumnVector &eig_val, const Matrix& b,
                          ColumnVector &permB, ColumnVector &resid,
-                         std::ostream &os, double tol = DBL_EPSILON,
+                         std::ostream &os,
+                         double tol = std::numeric_limits<double>::epsilon (),
                          bool rvec = false, bool cholB = 0, int disp = 0,
                          int maxit = 300);
 
 extern octave_idx_type
 EigsRealSymmetricMatrix (const SparseMatrix& m, const std::string typ,
                          octave_idx_type k, octave_idx_type p,
                          octave_idx_type &info, Matrix &eig_vec,
                          ColumnVector &eig_val, const SparseMatrix& b,
                          ColumnVector &permB, ColumnVector &resid,
-                         std::ostream& os, double tol = DBL_EPSILON,
+                         std::ostream& os,
+                         double tol = std::numeric_limits<double>::epsilon (),
                          bool rvec = false, bool cholB = 0, int disp = 0,
                          int maxit = 300);
 
 extern octave_idx_type
 EigsRealSymmetricMatrixShift (const Matrix& m, double sigma,
                               octave_idx_type k, octave_idx_type p,
                               octave_idx_type &info, Matrix &eig_vec,
                               ColumnVector &eig_val, const Matrix& b,
                               ColumnVector &permB, ColumnVector &resid,
-                              std::ostream &os, double tol = DBL_EPSILON,
+                              std::ostream &os,
+                              double tol = std::numeric_limits<double>::epsilon (),
                               bool rvec = false, bool cholB = 0, int disp = 0,
                               int maxit = 300);
 
 extern octave_idx_type
 EigsRealSymmetricMatrixShift (const SparseMatrix& m, double sigma,
                               octave_idx_type k, octave_idx_type p,
                               octave_idx_type &info, Matrix &eig_vec,
                               ColumnVector &eig_val, const SparseMatrix& b,
                               ColumnVector &permB, ColumnVector &resid,
-                              std::ostream &os, double tol = DBL_EPSILON,
+                              std::ostream &os,
+                              double tol = std::numeric_limits<double>::epsilon (),
                               bool rvec = false, bool cholB = 0, int disp = 0,
                               int maxit = 300);
 
 extern octave_idx_type
 EigsRealSymmetricFunc (EigsFunc fun, octave_idx_type n,
                        const std::string &typ, double sigma,
                        octave_idx_type k, octave_idx_type p,
                        octave_idx_type &info,
                        Matrix &eig_vec, ColumnVector &eig_val,
                        ColumnVector &resid, std::ostream &os,
-                       double tol = DBL_EPSILON, bool rvec = false,
-                       bool cholB = 0, int disp = 0, int maxit = 300);
+                       double tol = std::numeric_limits<double>::epsilon (),
+                       bool rvec = false, bool cholB = 0, int disp = 0,
+                       int maxit = 300);
 
 extern octave_idx_type
 EigsRealNonSymmetricMatrix (const Matrix& m, const std::string typ,
                             octave_idx_type k, octave_idx_type p,
                             octave_idx_type &info, ComplexMatrix &eig_vec,
                             ComplexColumnVector &eig_val, const Matrix& b,
                             ColumnVector &permB, ColumnVector &resid,
-                            std::ostream &os, double tol = DBL_EPSILON,
+                            std::ostream &os,
+                            double tol = std::numeric_limits<double>::epsilon (),
                             bool rvec = false, bool cholB = 0, int disp = 0,
                             int maxit = 300);
 
 extern octave_idx_type
 EigsRealNonSymmetricMatrix (const SparseMatrix& m, const std::string typ,
                             octave_idx_type k, octave_idx_type p,
                             octave_idx_type &info, ComplexMatrix &eig_vec,
                             ComplexColumnVector &eig_val,
                             const SparseMatrix& b,
                             ColumnVector &permB, ColumnVector &resid,
-                            std::ostream &os, double tol = DBL_EPSILON,
+                            std::ostream &os,
+                            double tol = std::numeric_limits<double>::epsilon (),
                             bool rvec = false, bool cholB = 0, int disp = 0,
                             int maxit = 300);
 
 extern octave_idx_type
 EigsRealNonSymmetricMatrixShift (const Matrix& m, double sigma,
                                  octave_idx_type k, octave_idx_type p,
                                  octave_idx_type &info,
                                  ComplexMatrix &eig_vec,
                                  ComplexColumnVector &eig_val, const Matrix& b,
                                  ColumnVector &permB, ColumnVector &resid,
-                                 std::ostream &os, double tol = DBL_EPSILON,
+                                 std::ostream &os,
+                                 double tol = std::numeric_limits<double>::epsilon (),
                                  bool rvec = false, bool cholB = 0,
                                  int disp = 0, int maxit = 300);
 
 extern octave_idx_type
 EigsRealNonSymmetricMatrixShift (const SparseMatrix& m, double sigma,
                                  octave_idx_type k, octave_idx_type p,
                                  octave_idx_type &info,
                                  ComplexMatrix &eig_vec,
                                  ComplexColumnVector &eig_val,
                                  const SparseMatrix& b,
                                  ColumnVector &permB, ColumnVector &resid,
-                                 std::ostream &os, double tol = DBL_EPSILON,
+                                 std::ostream &os,
+                                 double tol = std::numeric_limits<double>::epsilon (),
                                  bool rvec = false, bool cholB = 0,
                                  int disp = 0, int maxit = 300);
 
 extern octave_idx_type
 EigsRealNonSymmetricFunc (EigsFunc fun, octave_idx_type n,
                           const std::string &_typ, double sigma,
                           octave_idx_type k, octave_idx_type p,
                           octave_idx_type &info, ComplexMatrix &eig_vec,
                           ComplexColumnVector &eig_val,
                           ColumnVector &resid, std::ostream& os,
-                          double tol = DBL_EPSILON, bool rvec = false,
-                          bool cholB = 0, int disp = 0, int maxit = 300);
+                          double tol = std::numeric_limits<double>::epsilon (),
+                          bool rvec = false, bool cholB = 0, int disp = 0,
+                          int maxit = 300);
 
 extern octave_idx_type
 EigsComplexNonSymmetricMatrix (const ComplexMatrix& m, const std::string typ,
                                octave_idx_type k, octave_idx_type p,
                                octave_idx_type &info, ComplexMatrix &eig_vec,
                                ComplexColumnVector &eig_val,
                                const ComplexMatrix& b, ColumnVector &permB,
                                ComplexColumnVector &resid,
-                               std::ostream &os, double tol = DBL_EPSILON,
+                               std::ostream &os,
+                               double tol = std::numeric_limits<double>::epsilon (),
                                bool rvec = false, bool cholB = 0, int disp = 0,
                                int maxit = 300);
 
 extern octave_idx_type
 EigsComplexNonSymmetricMatrix (const SparseComplexMatrix& m,
                                const std::string typ, octave_idx_type k,
                                octave_idx_type p, octave_idx_type &info,
                                ComplexMatrix &eig_vec,
                                ComplexColumnVector &eig_val,
                                const SparseComplexMatrix& b,
                                ColumnVector &permB,
                                ComplexColumnVector &resid,
-                               std::ostream &os, double tol = DBL_EPSILON,
+                               std::ostream &os,
+                               double tol = std::numeric_limits<double>::epsilon (),
                                bool rvec = false, bool cholB = 0, int disp = 0,
                                int maxit = 300);
 
 extern octave_idx_type
 EigsComplexNonSymmetricMatrixShift (const ComplexMatrix& m, Complex sigma,
                                     octave_idx_type k, octave_idx_type p,
                                     octave_idx_type &info,
                                     ComplexMatrix &eig_vec,
                                     ComplexColumnVector &eig_val,
                                     const ComplexMatrix& b,
                                     ColumnVector &permB,
                                     ComplexColumnVector &resid,
-                                    std::ostream &os, double tol = DBL_EPSILON,
+                                    std::ostream &os,
+                                    double tol = std::numeric_limits<double>::epsilon (),
                                     bool rvec = false, bool cholB = 0,
                                     int disp = 0, int maxit = 300);
 
 extern octave_idx_type
 EigsComplexNonSymmetricMatrixShift (const SparseComplexMatrix& m,
                                     Complex sigma,
                                     octave_idx_type k, octave_idx_type p,
                                     octave_idx_type &info,
                                     ComplexMatrix &eig_vec,
                                     ComplexColumnVector &eig_val,
                                     const SparseComplexMatrix& b,
                                     ColumnVector &permB,
                                     ComplexColumnVector &resid,
-                                    std::ostream &os, double tol = DBL_EPSILON,
+                                    std::ostream &os,
+                                    double tol = std::numeric_limits<double>::epsilon (),
                                     bool rvec = false, bool cholB = 0,
                                     int disp = 0, int maxit = 300);
 
 extern octave_idx_type
 EigsComplexNonSymmetricFunc (EigsComplexFunc fun, octave_idx_type n,
                              const std::string &_typ, Complex sigma,
                              octave_idx_type k, octave_idx_type p,
                              octave_idx_type &info, ComplexMatrix &eig_vec,
                              ComplexColumnVector &eig_val,
                              ComplexColumnVector &resid, std::ostream& os,
-                             double tol = DBL_EPSILON, bool rvec = false,
-                             bool cholB = 0, int disp = 0, int maxit = 300);
+                             double tol = std::numeric_limits<double>::epsilon (),
+                             bool rvec = false, bool cholB = 0,
+                             int disp = 0, int maxit = 300);
 #endif
 
 #ifndef _MSC_VER
 template octave_idx_type
 lusolve (const SparseMatrix&, const SparseMatrix&, Matrix&);
 
 template octave_idx_type
 lusolve (const SparseComplexMatrix&, const SparseComplexMatrix&,
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1189,19 +1189,19 @@ FloatComplexMatrix::pseudo_inverse (floa
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * DBL_EPSILON;
+        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * DBL_EPSILON;
+        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     retval = FloatComplexMatrix (nc, nr, 0.0);
   else
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -860,19 +860,19 @@ FloatMatrix::pseudo_inverse (float tol) 
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
-        tol = nr * sigma.elem (0) * DBL_EPSILON;
+        tol = nr * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
       else
-        tol = nc * sigma.elem (0) * DBL_EPSILON;
+        tol = nc * sigma.elem (0) * std::numeric_limits<double>::epsilon ();
     }
 
   while (r >= 0 && sigma.elem (r) < tol)
     r--;
 
   if (r < 0)
     return FloatMatrix (nc, nr, 0.0);
   else
