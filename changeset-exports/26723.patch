# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549997077 0
#      Tue Feb 12 18:44:37 2019 +0000
# Node ID 259953dac9b846ea1860af491e76c9a021462a7f
# Parent  f51e8a7c33f48147b10a69569280a4a0c9c48c96
implement properties function (bug #53614)

* ov-classdef.cc (Fproperties): New function and test.
* op-kw-docs: Temporarily comment out doc string for classdef
properties block.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <algorithm>
 
 #include "call-stack.h"
 #include "defun.h"
+#include "errwarn.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-builtin.h"
 #include "ov-classdef.h"
 #include "ov-fcn-handle.h"
 #include "ov-typeinfo.h"
 #include "ov-usr-fcn.h"
@@ -3958,13 +3959,85 @@ Returns the meta.class object correspond
   if (args.length () != 1)
     print_usage ();
 
   cdef_object obj = to_cdef (args(0));
 
   return to_ov (obj.get_class ());
 }
 
+// FIXME: What about dynamic properties if obj is a scalar, or the
+// properties of the class of obj if obj is an array?  Probably there
+// should be a function to do this job so that the DEFUN is just a
+// simple wrapper.
+
+DEFUN (properties, args, nargout,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} properties (@var{class_name})
+@deftypefnx {} {} properties (@var{obj})
+@deftypefnx {} {@var{plist} =} properties (@dots{})
+List of properties for the named class @var{class_name}
+or classdef object @var{obj}.  If output value is requested, return list
+of property names in a cell array.
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  octave_value arg = args(0);
+
+  std::string class_name;
+
+  if (arg.isobject ())
+    class_name = arg.class_name ();
+  else if (arg.is_string ())
+    class_name = arg.string_value ();
+  else
+    err_wrong_type_arg ("properties", arg);
+
+  cdef_class cls;
+
+  cls = lookup_class (class_name, false, true);
+
+  if (! cls.ok ())
+    error ("invalid class: %s", class_name.c_str ());
+
+  std::map<std::string, cdef_property> property_map = cls.get_property_map ();
+
+  std::list<std::string> property_names;
+
+  for (const auto& pname_prop : property_map)
+    {
+      std::string nm = pname_prop.second.get_name ();
+
+      octave_value acc = pname_prop.second.get ("GetAccess");
+
+      if (! acc.is_string() || acc.string_value () != "public")
+        continue;
+
+      property_names.push_back (nm);
+    }
+
+  if (nargout > 0)
+    return octave_value (Cell (string_vector (property_names)));
+
+  octave_stdout << "properties for class " << class_name << ":\n\n";
+
+  for (const auto& nm : property_names)
+    octave_stdout << "  " << nm << "\n";
+
+  octave_stdout << std::endl;
+
+  return octave_value ();
+}
+
+/*
+%!assert (properties ("inputParser"),
+%!        {"CaseSensitive"; "FunctionName"; "KeepUnmatched";
+%!         "Parameters"; "PartialMatching"; "Results";
+%!         "StructExpand"; "Unmatched"; "UsingDefaults"});
+*/
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libinterp/op-kw-docs b/libinterp/op-kw-docs
--- a/libinterp/op-kw-docs
+++ b/libinterp/op-kw-docs
@@ -702,22 +702,24 @@ Declare variables as persistent.
 
 A variable that has been declared persistent within a function will retain its
 contents in memory between subsequent calls to the same function.  The
 difference between persistent variables and global variables is that persistent
 variables are local in scope to a particular function and are not visible
 elsewhere.
 @seealso{global}
 @end deftypefn
-properties
-@c libinterp/parse-tree/oct-parse.yy
--*- texinfo -*-
-@deftypefn {} {} properties
-Begin a properties block in a classdef definition.
-@end deftypefn
+@c ## FIXME: Can't have duplicate DOCSTRING entries.  The function properties
+@c ##        already has a docstring which overrides this keyword definition.
+@c properties
+@c  libinterp/parse-tree/oct-parse.yy
+@c -*- texinfo -*-
+@c @deftypefn {} {} properties
+@c Begin a properties block in a classdef definition.
+@c @end deftypefn
 return
 @c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} return
 Return from a function.
 @seealso{function}
 @end deftypefn
 switch
