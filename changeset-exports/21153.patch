# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454102874 18000
#      Fri Jan 29 16:27:54 2016 -0500
# Node ID 9c61ab1f758891248612b8c96ecf405f54a4c984
# Parent  8ad3907b8fad29630286e25357cd4a90d1c6a68e
eliminate unnecessary qrsolve functions

* SparseCmplxQR.cc, SparseCmplxQR.h, SparseQR.cc, SparseQR.h
(qrsolve): Eliminate versions that accept Matrix and ComplexMatrix
arguments in favor of MArray<double> and MArray<Complex>.

diff --git a/liboctave/numeric/SparseCmplxQR.cc b/liboctave/numeric/SparseCmplxQR.cc
--- a/liboctave/numeric/SparseCmplxQR.cc
+++ b/liboctave/numeric/SparseCmplxQR.cc
@@ -248,17 +248,18 @@ SparseComplexQR::SparseComplexQR_rep::Q 
     }
   return ret.hermitian ();
 #else
   return ComplexMatrix ();
 #endif
 }
 
 ComplexMatrix
-qrsolve (const SparseComplexMatrix&a, const Matrix &b, octave_idx_type &info)
+qrsolve (const SparseComplexMatrix& a, const MArray<double>& b,
+         octave_idx_type& info)
 {
   info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type b_nc = b.cols ();
   octave_idx_type b_nr = b.rows ();
   ComplexMatrix x;
@@ -491,18 +492,18 @@ qrsolve (const SparseComplexMatrix&a, co
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
 
 ComplexMatrix
-qrsolve (const SparseComplexMatrix&a, const ComplexMatrix &b,
-         octave_idx_type &info)
+qrsolve (const SparseComplexMatrix& a, const MArray<Complex>& b,
+         octave_idx_type& info)
 {
   info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type b_nc = b.cols ();
   octave_idx_type b_nr = b.rows ();
   const cs_complex_t *bvec =
@@ -728,22 +729,8 @@ qrsolve (const SparseComplexMatrix&a, co
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
-
-ComplexMatrix
-qrsolve (const SparseComplexMatrix &a, const MArray<double> &b,
-         octave_idx_type &info)
-{
-  return qrsolve (a, Matrix (b), info);
-}
-
-ComplexMatrix
-qrsolve (const SparseComplexMatrix &a, const MArray<Complex> &b,
-         octave_idx_type &info)
-{
-  return qrsolve (a, ComplexMatrix (b), info);
-}
diff --git a/liboctave/numeric/SparseCmplxQR.h b/liboctave/numeric/SparseCmplxQR.h
--- a/liboctave/numeric/SparseCmplxQR.h
+++ b/liboctave/numeric/SparseCmplxQR.h
@@ -123,25 +123,26 @@ public:
 
   SparseComplexMatrix R (const bool econ = false) const
   { return rep->R(econ); }
 
   ComplexMatrix C (const ComplexMatrix &b) const { return rep->C(b); }
 
   ComplexMatrix Q (void) const { return rep->Q (); }
 
-  friend ComplexMatrix qrsolve (const SparseComplexMatrix &a, const Matrix &b,
+  friend ComplexMatrix qrsolve (const SparseComplexMatrix &a,
+                                const MArray<double> &b,
                                 octave_idx_type &info);
 
   friend SparseComplexMatrix qrsolve (const SparseComplexMatrix &a,
                                       const SparseMatrix &b,
                                       octave_idx_type &info);
 
   friend ComplexMatrix qrsolve (const SparseComplexMatrix &a,
-                                const ComplexMatrix &b,
+                                const MArray<Complex> &b,
                                 octave_idx_type &info);
 
   friend SparseComplexMatrix qrsolve (const SparseComplexMatrix &a,
                                       const SparseComplexMatrix &b,
                                       octave_idx_type &info);
 
 protected:
 #ifdef HAVE_CXSPARSE
@@ -149,31 +150,24 @@ protected:
 
   CXSPARSE_ZNAME (n) * N (void) { return rep->N; }
 #endif
 };
 
 
 // Publish externally used friend functions.
 
-extern ComplexMatrix qrsolve (const SparseComplexMatrix &a, const Matrix &b,
-                              octave_idx_type &info);
-
 extern ComplexMatrix qrsolve (const SparseComplexMatrix &a,
                               const MArray<double> &b,
                               octave_idx_type &info);
 
 extern SparseComplexMatrix qrsolve (const SparseComplexMatrix &a,
                                     const SparseMatrix &b,
                                     octave_idx_type &info);
 
 extern ComplexMatrix qrsolve (const SparseComplexMatrix &a,
-                              const ComplexMatrix &b,
-                              octave_idx_type &info);
-
-extern ComplexMatrix qrsolve (const SparseComplexMatrix &a,
                               const MArray<Complex> &b,
                               octave_idx_type &info);
 
 extern SparseComplexMatrix qrsolve (const SparseComplexMatrix &a,
                                     const SparseComplexMatrix &b,
                                     octave_idx_type &info);
 #endif
diff --git a/liboctave/numeric/SparseQR.cc b/liboctave/numeric/SparseQR.cc
--- a/liboctave/numeric/SparseQR.cc
+++ b/liboctave/numeric/SparseQR.cc
@@ -250,17 +250,17 @@ SparseQR::SparseQR_rep::Q (void) const
     }
   return ret.transpose ();
 #else
   return Matrix ();
 #endif
 }
 
 Matrix
-qrsolve (const SparseMatrix&a, const Matrix &b, octave_idx_type& info)
+qrsolve (const SparseMatrix& a, const MArray<double>& b, octave_idx_type& info)
 {
   info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type b_nc = b.cols ();
   octave_idx_type b_nr = b.rows ();
   const double *bvec = b.fortran_vec ();
@@ -475,17 +475,17 @@ qrsolve (const SparseMatrix&a, const Spa
   x.maybe_compress ();
   return x;
 #else
   return SparseMatrix ();
 #endif
 }
 
 ComplexMatrix
-qrsolve (const SparseMatrix&a, const ComplexMatrix &b, octave_idx_type &info)
+qrsolve (const SparseMatrix& a, const MArray<Complex>& b, octave_idx_type& info)
 {
   info = -1;
 #ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type b_nc = b.cols ();
   octave_idx_type b_nr = b.rows ();
   ComplexMatrix x;
@@ -788,22 +788,8 @@ qrsolve (const SparseMatrix&a, const Spa
     }
 
   x.maybe_compress ();
   return x;
 #else
   return SparseComplexMatrix ();
 #endif
 }
-
-Matrix
-qrsolve (const SparseMatrix &a, const MArray<double> &b,
-         octave_idx_type &info)
-{
-  return qrsolve (a, Matrix (b), info);
-}
-
-ComplexMatrix
-qrsolve (const SparseMatrix &a, const MArray<Complex> &b,
-         octave_idx_type &info)
-{
-  return qrsolve (a, ComplexMatrix (b), info);
-}
diff --git a/liboctave/numeric/SparseQR.h b/liboctave/numeric/SparseQR.h
--- a/liboctave/numeric/SparseQR.h
+++ b/liboctave/numeric/SparseQR.h
@@ -124,23 +124,23 @@ public:
   ColumnVector P (void) const { return rep->P (); }
 
   SparseMatrix R (const bool econ = false) const { return rep->R(econ); }
 
   Matrix C (const Matrix &b) const { return rep->C(b); }
 
   Matrix Q (void) const { return rep->Q (); }
 
-  friend Matrix qrsolve (const SparseMatrix &a, const Matrix &b,
+  friend Matrix qrsolve (const SparseMatrix &a, const MArray<double> &b,
                          octave_idx_type &info);
 
   friend SparseMatrix qrsolve (const SparseMatrix &a, const SparseMatrix &b,
                                octave_idx_type &info);
 
-  friend ComplexMatrix qrsolve (const SparseMatrix &a, const ComplexMatrix &b,
+  friend ComplexMatrix qrsolve (const SparseMatrix &a, const MArray<Complex> &b,
                                 octave_idx_type &info);
 
   friend SparseComplexMatrix qrsolve (const SparseMatrix &a,
                                       const SparseComplexMatrix &b,
                                       octave_idx_type &info);
 
 protected:
 #ifdef HAVE_CXSPARSE
@@ -148,28 +148,22 @@ protected:
 
   CXSPARSE_DNAME (n) * N (void) { return rep->N; }
 #endif
 };
 
 
 // Publish externally used friend functions.
 
-extern Matrix qrsolve (const SparseMatrix &a, const Matrix &b,
-                       octave_idx_type &info);
-
 extern Matrix qrsolve (const SparseMatrix &a, const MArray<double> &b,
                        octave_idx_type &info);
 
 extern SparseMatrix qrsolve (const SparseMatrix &a, const SparseMatrix &b,
                              octave_idx_type &info);
 
-extern ComplexMatrix qrsolve (const SparseMatrix &a, const ComplexMatrix &b,
-                              octave_idx_type &info);
-
 extern ComplexMatrix qrsolve (const SparseMatrix &a, const MArray<Complex> &b,
                               octave_idx_type &info);
 
 extern SparseComplexMatrix qrsolve (const SparseMatrix &a,
                                     const SparseComplexMatrix &b,
                                     octave_idx_type &info);
 
 #endif
