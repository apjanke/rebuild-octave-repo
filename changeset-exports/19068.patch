# HG changeset patch
# User Rik <rik@octave.org>
# Date 1409594249 25200
#      Mon Sep 01 10:57:29 2014 -0700
# Node ID be8a12acb20acf547ac98b7101ebdbcf594a3b94
# Parent  4fd271cd9b378a1c4602e8a70dceb6825f7243a1
Deprecate nargchk in favor of narginchk.

* NEWS: Announce deprecation.

* func.txi: Remove reference to nargchk in manual.

* narginchk.m, nargoutchk.m: Remove seealso references to nargchk.

* __splinefit__.m: Replace nargchk with narginchk.

* scripts/deprecated/nargchk.m: Moved from scripts/general.

* scripts/deprecated/module.mk: Add nargchk to deprecated build system.

* scripts/general/module.mk: Remove nargchk from regular build system.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -75,16 +75,17 @@ Summary of important user-visible change
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       bicubic              syl
       find_dir_in_path
+      nargchk
       nfields
 
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new            
       gen_doc_cache           java_unsigned_conversion  
       interp1q                javafields                
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -390,20 +390,18 @@ endif
 @end example
 
 @noindent
 which stops the function execution and prints a message about the correct
 way to call the function whenever the number of inputs is wrong.
 
 @DOCSTRING(validateattributes)
 
-For compatibility with @sc{matlab}, @code{nargchk}, @code{narginchk} and
-@code{nargoutchk} are available which provide similar error checking.
-
-@DOCSTRING(nargchk)
+For compatibility with @sc{matlab}, @code{narginchk} and @code{nargoutchk} are
+available which provide similar error checking.
 
 @DOCSTRING(narginchk)
 
 @DOCSTRING(nargoutchk)
 
 There is also the class @code{inputParser} which can perform extremely
 complex input checking for functions.
 
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,14 +1,15 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/bicubic.m \
   deprecated/find_dir_in_path.m \
   deprecated/isstr.m \
+  deprecated/nargchk.m \
   deprecated/nfields.m \
   deprecated/strmatch.m \
   deprecated/syl.m
 
 FCN_FILES += $(deprecated_FCN_FILES)
 
 PKG_ADD_FILES += deprecated/PKG_ADD
 
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -41,17 +41,16 @@ general_FCN_FILES = \
   general/interpn.m \
   general/interpft.m \
   general/isdir.m \
   general/isequal.m \
   general/isequaln.m \
   general/loadobj.m \
   general/logspace.m \
   general/methods.m \
-  general/nargchk.m \
   general/narginchk.m \
   general/nargoutchk.m \
   general/nthargout.m \
   general/nextpow2.m \
   general/num2str.m \
   general/pol2cart.m \
   general/polyarea.m \
   general/postpad.m \
diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -23,17 +23,17 @@
 ## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
 ##
 ## Both @var{minargs} and @var{maxargs} need to be scalar numeric
 ## values.  Zero, Inf and negative values are all allowed, and
 ## @var{minargs} and @var{maxargs} may be equal.
 ##
 ## Note that this function evaluates @code{nargin} on the caller.
 ##
-## @seealso{nargchk, nargoutchk, error, nargout, nargin}
+## @seealso{nargoutchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function narginchk (minargs, maxargs)
 
   if (nargin != 2)
     print_usage;
diff --git a/scripts/general/nargoutchk.m b/scripts/general/nargoutchk.m
--- a/scripts/general/nargoutchk.m
+++ b/scripts/general/nargoutchk.m
@@ -33,17 +33,17 @@
 ## and negative are all valid, and they can have the same value.
 ##
 ## For backward compatibility reasons, the other forms return an appropriate
 ## error message string (or structure) if the number of outputs requested is
 ## invalid.
 ##
 ## This is useful for checking to see that the number of output
 ## arguments supplied to a function is within an acceptable range.
-## @seealso{nargchk, narginchk, error, nargout, nargin}
+## @seealso{narginchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function msg = nargoutchk (minargs, maxargs, nargs, outtype)
 
   ## before matlab's 2011b, nargoutchk would return an error message (just the
@@ -71,17 +71,17 @@ function msg = nargoutchk (minargs, maxa
     elseif (nargs > maxargs)
       msg.message = "too many output arguments";
       msg.identifier = "Octave:nargoutchk:too-many-outputs";
     endif
 
     if (strcmpi (outtype, "string"))
       msg = msg.message;
     elseif (isempty (msg.message))
-      ## Compatability: Matlab returns a 0x1 empty struct when nargchk passes
+      ## Compatibility: Matlab returns a 0x1 empty struct when nargoutchk passes
       msg = resize (msg, 0, 1);
     endif
 
   elseif (nargout == 0 && nargin == 2)
 
     if (!isnumeric (minargs) || !isscalar (minargs))
       error ("minargs must be a numeric scalar");
     elseif (!isnumeric (maxargs) || !isscalar (maxargs))
diff --git a/scripts/polynomial/private/__splinefit__.m b/scripts/polynomial/private/__splinefit__.m
--- a/scripts/polynomial/private/__splinefit__.m
+++ b/scripts/polynomial/private/__splinefit__.m
@@ -106,17 +106,17 @@ function pp = __splinefit__(varargin)
 
 %   2009-05-06  Original SPLINEFIT.
 %   2010-06-23  New version of SPLINEFIT based on B-splines.
 %   2010-09-01  Robust fitting scheme added.
 %   2010-09-01  Support for data containing NaNs.
 %   2011-07-01  Robust fitting parameter added.
 
 % Check number of arguments
-error(nargchk(3,7,nargin));
+narginchk(3,7);
 
 % Check arguments
 [x,y,dim,breaks,n,periodic,beta,constr] = arguments(varargin{:});
 
 % Evaluate B-splines
 base = splinebase(breaks,n);
 pieces = base.pieces;
 A = ppval(base,x);
