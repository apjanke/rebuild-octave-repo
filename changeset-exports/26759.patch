# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1550757210 -3600
#      Thu Feb 21 14:53:30 2019 +0100
# Branch stable
# Node ID ad71c8d87cffaacc5507ba64c1731e403d083a35
# Parent  17d806c3f7cd43314d895fe770226b8516954e9d
Overhaul classdef tests (bug #54783, bug #54966, bug #55223).

* test/classdef/classdef.tst: Make the test run under Matlab R2018b again.
New tests for bug #54783 and bug #55223.  New xtest for bug #54966.
Fix spelling "correctly".

* test/classdef/struct_wrapper.m: Convert unused function to constructor.
Otherwise this function does not make sense, maybe forgotten to rename properly.
* test/classdef/foo_subsref_subsasgn.m: New classdef test file .
* test/classdef/module.mk: Add new classdef test file to build system.

* test/bug-55223/*: Include tests to test/classdef.
* test/module.mk: Remove test/bug-55223 from build system.

diff --git a/test/bug-55223/bug-55223.tst b/test/bug-55223/bug-55223.tst
deleted file mode 100644
--- a/test/bug-55223/bug-55223.tst
+++ /dev/null
@@ -1,22 +0,0 @@
-## Copyright (C) 2018 SÃ©bastien Villemot <sebastien@debian.org>
-##
-## This file is part of Octave.
-##
-## Octave is free software: you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation, either version 3 of the License, or
-## (at your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <https://www.gnu.org/licenses/>.
-
-%!test <*55223>
-%! x = class_bug55223 ();
-%! x{2}(2) = 3;
-%! assert (x{2}(2), 3);
diff --git a/test/bug-55223/class_bug55223.m b/test/bug-55223/class_bug55223.m
deleted file mode 100644
--- a/test/bug-55223/class_bug55223.m
+++ /dev/null
@@ -1,23 +0,0 @@
-classdef class_bug55223<handle
-  properties
-    x
-  endproperties
-
-  methods
-    function obj = class_bug55223 ()
-      obj.x = eye (4);
-    endfunction
-
-    function val = subsref (obj, S)
-      if (length (S) == 2 && S(1).type == "{}" && S(2).type == "()")
-        val = obj.x(S(1).subs{1}, S(2).subs{1});
-      endif
-    endfunction
-
-    function obj = subsasgn (obj, S, val)
-      if (length (S) == 2 && S(1).type == "{}" && S(2).type == "()")
-        obj.x(S(1).subs{1}, S(2).subs{1}) = val;
-      endif
-    endfunction
-  endmethods
-endclassdef
diff --git a/test/bug-55223/module.mk b/test/bug-55223/module.mk
deleted file mode 100644
--- a/test/bug-55223/module.mk
+++ /dev/null
@@ -1,5 +0,0 @@
-bug_55223_TEST_FILES = \
-  %reldir%/bug-55223.tst \
-  %reldir%/class_bug55223.m
-
-TEST_FILES += $(bug_55223_TEST_FILES)
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -18,17 +18,17 @@
 
 %%  Test script for classdef OOP.
 %%  Requires the path to contain the test classes.
 %%
 %%  Note: This script and all classes are also intended to run
 %%        in MATLAB to test compatibility.  Don't break that!
 %%
 %%  To Do:  This script tests to ensure that things done correctly work
-%%          corrrectly.  It should also check that things done incorrectly
+%%          correctly.  It should also check that things done incorrectly
 %%          error properly.
 %%
 %%  The classes used for the tests reside in the test/classdef with others
 %%  in the test directory.
 %%
 %%  The classes provide the ability to test most of the major features
 %%  of the classdef OOP facilities.  There are a number of classes, mostly
 %%  kind of the same, that create a hierarchy.
@@ -37,63 +37,151 @@
 %!shared p, q, i, amt
 %! q = foo_value_class ();
 %! p = foo_value_class (4, 4*12, 50e3);
 %! i = p.rate / (12 * 100);
 %! amt = (p.principle * i) / (1 - (1 + i)^(-p.term));
 %!assert (isempty (q.rate))
 %!assert (isempty (q.principle))
 %!assert (isempty (q.term))
-%!assert (class (p), "foo_value_class")
-%!assert (p.term, 48)
-%!assert (p.rate, 4.0)
-%!assert (p.principle, 50e3)
+%!assert (strcmp (class (p), 'foo_value_class'))
+%!assert (p.term == 48)
+%!assert (p.rate == 4.0)
+%!assert (p.principle == 50e3)
 %!assert (p.amount, amt, eps ())
 %!assert (amount (p), amt, eps ())
 %!xtest <53614>
 %! assert (properties (p), {'rate'; 'term'; 'principle'});
-%!test <42510>
+%!xtest <42510>
 %! assert (methods (p), {'amount'; 'foo_value_class'});
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
 
 %%  Static method and Constant Property
-%!assert (foo_static_method_constant_property.radians_per_cycle, 2*pi)
-%!assert (foo_static_method_constant_property().radians_per_cycle, 2*pi)
-%!assert (foo_static_method_constant_property().pie, pi)
+%!assert (foo_static_method_constant_property.radians_per_cycle == 2*pi)
+%!assert (foo_static_method_constant_property().radians_per_cycle == 2*pi)
+%!assert (foo_static_method_constant_property().pie == pi)
 %!error <property `frequency' is not constant> foo_static_method_constant_property.frequency
 %!error <method `cosine' is not static> foo_static_method_constant_property.cosine
 %!test
 %! obj = foo_static_method_constant_property;
 %! obj.frequency = 10;
 %! assert (obj.cosine (0.1), cos (2 * pi * 10 * 0.1), eps ());
 %! assert (obj.sine (0.1), sin (2 * pi * 10 * 0.1), eps ());
 
 %!test
 %! obj = foo_method_changes_property_size (3);
 %! obj = obj.move_element_to_end (2);
-%! assert (obj.element, [1 3 2]);
+%! assert (isequal (obj.element, [1 3 2]));
 
 %!error <parse error> plist_t1
-%!assert (class (plist_t2), "plist_t2")
-%!assert (class (plist_t3), "plist_t3")
+%!assert (strcmp (class (plist_t2), 'plist_t2'))
+%!assert (strcmp (class (plist_t3), 'plist_t3'))
 
 %!test
 %! obj = struct_wrapper ();
 %! obj{'a'} = 1;
-%! assert (obj{'a'}, 1);
+%! assert (obj{'a'} == 1);
 %! obj{'bc'} = 2;
-%! assert (obj{'bc'}, 2);
-%! assert (obj{'a', 'bc'}, [ 1 2 ]);
+%! assert (obj{'bc'} == 2);
+%! assert (isequal (obj{'a', 'bc'}, [1 2]));
 
 %% Test for meta.class.fromName
 %!test <*51935>
 %! meta.class.fromName ("inputParser");
 
-## Do not change this to "containers.Map()".  This test is intended to
-## ensure that calling a function in a +package directory will work
-## properly.
+%% Do not change this to "containers.Map()".  This test is intended to
+%% ensure that calling a function in a +package directory will work
+%% properly.
 %!test <*51715>
 %! x = containers.Map;
 %! assert (isobject (x));
 
 %!assert <*52096> (isempty (meta.class.fromName ("__nonexi$tent_cl@$$__")))
 %!assert <*52096> (isempty (meta.package.fromName ("__nonexi$tent_p@ck@ge__")))
+
+%% Test overloaded subsref and subsasgn functions.
+%% (bug #54783, bug #54966, and bug #55223)
+%!test <*54783>
+%! obj = foo_subsref_subsasgn (1);
+%! obj(2) = 3;
+%! assert (obj(2) == 3)
+%! assert (obj{2} == 3)
+%! assert (isequal (obj.x, [1 3 3 4]))
+%! obj{2} = 4;
+%! assert (obj(2) == 4)
+%! assert (obj{2} == 4)
+%! assert (isequal (obj.x, [1 4 3 4]))
+%! obj(end) = 6;
+%! assert (obj(end) == 6)
+%! assert (obj{end} == 6)
+%! assert (isequal (obj.x, [1 4 3 6]))
+%! obj{end} = 8;
+%! assert (obj(end) == 8)
+%! assert (obj{end} == 8)
+%! assert (isequal (obj.x, [1 4 3 8]))
+%! obj.x = 1:4;
+%! assert (isequal (obj.x, 1:4))
+%! obj(1:3) = 7:9;
+%! assert (isequal (obj(1:3), 7:9))
+%! assert (isequal (obj.x, [7 8 9 4]))
+%! obj(2:end) = 5:7;
+%! assert (isequal (obj(2:end), 5:7))
+%! assert (isequal (obj.x, [7 5 6 7]))
+
+%!xtest <54966>
+%! obj = foo_subsref_subsasgn (1);
+%! obj{1:3} = 5:7;
+%! assert (isequal ([obj{1:3}], 5:7))
+%! assert (isequal (obj.x, [5 6 7 4]))
+%! obj{2:end} = 7:9;
+%! assert (isequal ([obj{2:end}], 7:9))
+%! assert (isequal (obj.x, [5 7 8 9]))
+
+%!test <*54783>
+%! obj = foo_subsref_subsasgn (1);
+%! obj.x(2) = 3;
+%! assert (obj.x(2) == 3)
+%! assert (obj.x{2} == 3)
+%! assert (isequal (obj.x, [1 3 3 4]))
+%! obj.x{2} = 4;
+%! assert (obj.x(2) == 4)
+%! assert (obj.x{2} == 4)
+%! assert (isequal (obj.x, [1 4 3 4]))
+%! obj.x(end) = 6;
+%! assert (obj.x(end) == 6)
+%! assert (obj.x{end} == 6)
+%! assert (isequal (obj.x, [1 4 3 6]))
+%! obj.x{end} = 8;
+%! assert (obj.x(end) == 8)
+%! assert (obj.x{end} == 8)
+%! assert (isequal (obj.x, [1 4 3 8]))
+%! obj.x = 1:4;
+%! assert (isequal (obj.x, 1:4))
+%! obj.x(1:3) = 7:9;
+%! assert (isequal (obj.x(1:3), 7:9))
+%! assert (isequal (obj.x, [7 8 9 4]))
+%! obj.x(2:end) = 5:7;
+%! assert (isequal (obj.x(2:end), 5:7))
+%! assert (isequal (obj.x, [7 5 6 7]))
+
+%!xtest <54966>
+%! obj = foo_subsref_subsasgn (1);
+%! obj.x{1:3} = 5:7;
+%! assert (isequal ([obj.x{1:3}], 5:7))
+%! assert (isequal (obj.x, [5 6 7 4]))
+%! obj.x{2:end} = 7:9;
+%! assert (isequal ([obj.x{2:end}], 7:9))
+%! assert (isequal (obj.x, [5 7 8 9]))
+
+%!test <*55223>
+%! obj = foo_subsref_subsasgn (2);
+%! obj{2}(2) = 3;
+%! assert (obj{2}(2) == 3);
+%! obj{2}{2} = 4;
+%! assert (obj{2}{2} == 4);
+
+%!xtest <54966>
+%! obj = foo_subsref_subsasgn (2);
+%! obj{1:2}(1:2) = ones (2);
+%! assert (isequal (obj{1:2}(1:2), ones (2)));
+%! obj{3:4}(3:4) = 4 * ones (2);
+%! assert (isequal (obj{3:4}(3:4), 4 * ones (2)));
diff --git a/test/classdef/foo_subsref_subsasgn.m b/test/classdef/foo_subsref_subsasgn.m
new file mode 100644
--- /dev/null
+++ b/test/classdef/foo_subsref_subsasgn.m
@@ -0,0 +1,88 @@
+classdef foo_subsref_subsasgn < handle
+  properties
+    x
+  end
+
+  methods
+    function obj = foo_subsref_subsasgn (dims)
+      switch (dims)
+        case 1
+          obj.x = 1:4;
+        case 2
+          obj.x = eye (4);
+        otherwise
+          error ('foo_subsref_subsasgn:SyntaxError', ...
+            'foo_subsref_subsasgn: Invalid syntax');
+      end
+    end
+
+    function ind = end (obj, k, n)
+      sz = size (obj.x);
+      if k < n
+        ind = sz(k);
+      else
+        ind = prod (sz(k:end));
+      end
+    end
+
+    function varargout = subsref (obj, S)
+      switch (length (S))
+        case 1
+          if (S(1).type == "()")
+            varargout = {obj.x(S(1).subs{1})};
+          elseif (S(1).type == "{}")
+            % Note in ML R2018b "x{1:3}" expects "nargout == 3".
+            varargout = num2cell (obj.x(S(1).subs{1}));
+          elseif (S(1).type == "." && S(1).subs == 'x')
+            varargout = {obj.x};
+          else
+            error ('foo_subsref_subsasgn:SyntaxError', ...
+              'foo_subsref_subsasgn: Invalid syntax');
+          end
+        case 2
+          % Note in ML R2018b "x(1)(1)" is not allowed.
+          if (S(1).type == "{}" && (S(2).type == "{}" || S(2).type == "()"))
+            varargout = {obj.x(S(1).subs{1}, S(2).subs{1})};
+          elseif (S(1).type == "." && S(1).subs == 'x' ...
+              && (S(2).type == "{}" || S(2).type == "()"))
+            varargout = {obj.x(S(2).subs{1})};
+          else
+            error ('foo_subsref_subsasgn:SyntaxError', ...
+              'foo_subsref_subsasgn: Invalid syntax');
+          end
+        otherwise
+          error ('foo_subsref_subsasgn:SyntaxError', ...
+            'foo_subsref_subsasgn: Invalid syntax');
+      end
+    end
+
+    function obj = subsasgn (obj, S, varargin)
+      switch (length (S))
+        case 1
+          if (S(1).type == "{}" || S(1).type == "()")
+            obj.x(S(1).subs{1}) = varargin{1};
+          elseif (S(1).type == "." && S(1).subs == 'x')
+            obj.x = varargin{1};
+          else
+            error ('foo_subsref_subsasgn:SyntaxError', ...
+              'foo_subsref_subsasgn: Invalid syntax');
+          end
+        case 2
+          % Note in ML R2018b "x(1)(1)" is not allowed.
+          if (S(1).type == "{}" && (S(2).type == "{}" || S(2).type == "()"))
+            obj.x(S(1).subs{1}, S(2).subs{1}) = varargin{1};
+          elseif (S(1).type == "." && S(1).subs == 'x' ...
+              && (S(2).type == "{}" || S(2).type == "()"))
+            obj.x(S(2).subs{1}) = varargin{1};
+          else
+            error ('foo_subsref_subsasgn:SyntaxError', ...
+              'foo_subsref_subsasgn: Invalid syntax');
+          end
+        otherwise
+          error ('foo_subsref_subsasgn:SyntaxError', ...
+            'foo_subsref_subsasgn: Invalid syntax');
+      end
+    end
+
+  end
+end
diff --git a/test/classdef/module.mk b/test/classdef/module.mk
--- a/test/classdef/module.mk
+++ b/test/classdef/module.mk
@@ -1,11 +1,12 @@
 classdef_TEST_FILES = \
   %reldir%/classdef.tst \
   %reldir%/foo_method_changes_property_size.m \
   %reldir%/foo_static_method_constant_property.m \
+  %reldir%/foo_subsref_subsasgn.m \
   %reldir%/foo_value_class.m \
   %reldir%/plist_t1.m \
   %reldir%/plist_t2.m \
   %reldir%/plist_t3.m \
   %reldir%/struct_wrapper.m
 
 TEST_FILES += $(classdef_TEST_FILES)
diff --git a/test/classdef/struct_wrapper.m b/test/classdef/struct_wrapper.m
--- a/test/classdef/struct_wrapper.m
+++ b/test/classdef/struct_wrapper.m
@@ -1,14 +1,14 @@
 classdef struct_wrapper
   properties
     s;
   end
   methods
-    function o = assigner ()
+    function o = struct_wrapper ()
       if (nargin == 0)
         o.s = struct ();
       else
         error ('struct_wrapper:SyntaxError', ...
                'struct_wrapper: Invalid syntax');
       end
     end
     function n = numel (o, varargin)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -72,17 +72,16 @@ include %reldir%/bug-51192/module.mk
 include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51534/module.mk
 include %reldir%/bug-51599/module.mk
 include %reldir%/bug-52075/module.mk
 include %reldir%/bug-52722/module.mk
 include %reldir%/bug-53027/module.mk
 include %reldir%/bug-53468/module.mk
 include %reldir%/bug-54995/module.mk
-include %reldir%/bug-55223/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/local-functions/module.mk
 include %reldir%/mex/module.mk
