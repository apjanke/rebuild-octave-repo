# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450473773 18000
#      Fri Dec 18 16:22:53 2015 -0500
# Node ID aac911d8847bc75b19abaf09028dd317ac37ba57
# Parent  3b2cc6ef0624f65bd1855290e0f3ca77177a86e1
choose correct error function in stream classes

* oct-fstrm.cc, oct-iostrm.cc, oct-stream.cc, oct-strstrm.cc:
Use error or ::error as appropriate.

diff --git a/libinterp/corefcn/oct-fstrm.cc b/libinterp/corefcn/oct-fstrm.cc
--- a/libinterp/corefcn/oct-fstrm.cc
+++ b/libinterp/corefcn/oct-fstrm.cc
@@ -51,37 +51,37 @@ octave_fstream::octave_fstream (const st
   // Override default protection of 0664 so that umask will appear to
   // do the right thing.
 
   fs.open (nm.c_str (), arg_md, 0666);
 
 #endif
 
   if (! fs)
-    // Note: error() is inherited from octave_base_stream, not ::error().
+    // Note: error is inherited from octave_base_stream, not ::error.
     error (gnulib::strerror (errno));
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
 octave_fstream::seek (off_t, int)
 {
-  // Note: error() is inherited from octave_base_stream, not ::error().
+  // Note: error is inherited from octave_base_stream, not ::error.
   // This error function does not halt execution so "return ..." must exist.
   error ("fseek: invalid_operation");
   return -1;
 }
 
 // Return current stream position.
 
 off_t
 octave_fstream::tell (void)
 {
-  // Note: error() is inherited from octave_base_stream, not ::error().
+  // Note: error is inherited from octave_base_stream, not ::error.
   // This error function does not halt execution so "return ..." must exist.
   error ("ftell: invalid_operation");
   return -1;
 }
 
 // Return nonzero if EOF has been reached on this stream.
 
 bool
diff --git a/libinterp/corefcn/oct-iostrm.cc b/libinterp/corefcn/oct-iostrm.cc
--- a/libinterp/corefcn/oct-iostrm.cc
+++ b/libinterp/corefcn/oct-iostrm.cc
@@ -52,17 +52,17 @@ octave_base_iostream::eof (void) const
 {
   invalid_operation ();
   return false;
 }
 
 void
 octave_base_iostream::invalid_operation (void) const
 {
-  // Note: use '::error()' to get error from error.h which halts operation.
+  // Note: use ::error to get error from error.h which halts operation.
   ::error ("%s: invalid operation", stream_type ());
 }
 
 // Return nonzero if EOF has been reached on this stream.
 
 bool
 octave_istream::eof (void) const
 {
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -48,26 +48,25 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "input.h"
 #include "oct-stdstrm.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "toplev.h"
 #include "utils.h"
 
-////////////////////////////////////////////////////////////////////////////////
-// Programming Note: There are two very different error() functions used
-// in the stream code.  When invoked with "error (...)" the member function
-// from octave_stream or octave_base_stream is called.  This function sets the
-// error state on the stream AND returns control to the caller.  The caller
-// must then return a value at the end of the function.  When invoked with
-// "::error (...)" the exception-based error function from error.h is used.
-// This function will throw an exception and not return control to the caller.
-// BE CAREFUL and invoke the correct error function!
-////////////////////////////////////////////////////////////////////////////////
+// Programming Note: There are two very different error functions used
+// in the stream code.  When invoked with "error (...)" the member
+// function from octave_stream or octave_base_stream is called.  This
+// function sets the error state on the stream AND returns control to
+// the caller.  The caller must then return a value at the end of the
+// function.  When invoked with "::error (...)" the exception-based
+// error function from error.h is used.  This function will throw an
+// exception and not return control to the caller.  BE CAREFUL and
+// invoke the correct error function!
 
 // Possible values for conv_err:
 //
 //   1 : not a real scalar
 //   2 : value is NaN
 //   3 : value is not an integer
 
 static int
@@ -2583,18 +2582,18 @@ octave_base_stream::do_numeric_printf_co
           {
             double dval = val.double_value (true);
 
             retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2, dval, who);
           }
           break;
 
         default:
-          // Note: error() is member fcn from octave_base_stream, not ::error().
-          // This error() does not halt execution so "return ..." must exist.
+          // Note: error is member fcn from octave_base_stream, not ::error.
+          // This error does not halt execution so "return ..." must exist.
           error ("%s: invalid format specifier", who.c_str ());
           return -1;
           break;
         }
     }
 
   return retval;
 }
@@ -2693,23 +2692,17 @@ octave_base_stream::do_printf (printf_fo
 
               if (! os)
                 {
                   error ("%s: write error", who.c_str ());
                   break;
                 }
             }
           else
-            {
-              // FIXME: should this be member fcn "error"?
-              //        Otherwise, retval and break are unnecessary.
-              ::error ("%s: internal error handling format", who.c_str ());
-              retval = -1;
-              break;
-            }
+            ::error ("%s: internal error handling format", who.c_str ());
 
           elt = fmt_list.next (nconv > 0 && ! val_cache.exhausted ());
 
           if (! elt || (val_cache.exhausted () && elt->args > 0))
             break;
         }
     }
 
@@ -2779,17 +2772,17 @@ octave_base_stream::error (bool clear_er
     clear ();
 
   return tmp;
 }
 
 void
 octave_base_stream::invalid_operation (const std::string& who, const char *rw)
 {
-  // Note: This calls the member fcn error(), not ::error() from error.h.
+  // Note: This calls the member fcn error, not ::error from error.h.
   error (who, std::string ("stream not open for ") + rw);
 }
 
 octave_stream::octave_stream (octave_base_stream *bs)
   : rep (bs)
 {
   if (rep)
     rep->count = 1;
@@ -3051,22 +3044,21 @@ octave_stream::seek (const octave_value&
         }
     }
 
   if (! conv_err)
     {
       retval = seek (xoffset, origin);
 
       if (retval != 0)
-        // FIXME: Should this be ::error()?
+        // Note: error is member fcn from octave_stream, not ::error.
         error ("fseek: failed to seek to requested position");
     }
   else
-    // FIXME: Should this be ::error()?
-    error ("fseek: invalid value for origin");
+    ::error ("fseek: invalid value for origin");
 
   return retval;
 }
 
 off_t
 octave_stream::tell (void)
 {
   off_t retval = -1;
@@ -3279,20 +3271,17 @@ octave_stream::finalize_read (std::list<
         conv_fptr fptr = conv_fptr_table[input_type][output_type];
 
         retval = fptr (input_buf_list, input_buf_elts, elts_read,
                        nr, nc, swap, do_float_fmt_conv, do_NA_conv, ffmt);
       }
       break;
 
     default:
-      retval = false;
-      // FIXME: Should this be ::error()?
-      error ("read: invalid type specification");
-      break;
+      ::error ("read: invalid type specification");
     }
 
   return retval;
 }
 
 octave_value
 octave_stream::read (const Array<double>& size, octave_idx_type block_size,
                      oct_data_conv::data_type input_type,
@@ -3644,20 +3633,17 @@ convert_data (const T *data, void *conv_
 
             if (do_float_conversion)
               do_double_format_conversion (&vt_data[i], 1, flt_fmt);
           }
       }
       break;
 
     default:
-      retval = false;
-      // FIXME: Should this be ::error()?
-      error ("write: invalid type specification");
-      break;
+      ::error ("write: invalid type specification");
     }
 
   return retval;
 }
 
 bool
 octave_stream::write_bytes (const void *data, size_t nbytes)
 {
@@ -3846,17 +3832,17 @@ octave_stream::scanf (const octave_value
 
       if (fmt.is_sq_string ())
         sfmt = do_string_escapes (sfmt);
 
       retval = scanf (sfmt, size, count, who);
     }
   else
     {
-      // Note: error() is member fcn from octave_stream, not ::error().
+      // Note: error is member fcn from octave_stream, not ::error.
       error (who + ": format must be a string");
     }
 
   return retval;
 }
 
 octave_value_list
 octave_stream::oscanf (const std::string& fmt, const std::string& who)
@@ -3880,17 +3866,17 @@ octave_stream::oscanf (const octave_valu
 
       if (fmt.is_sq_string ())
         sfmt = do_string_escapes (sfmt);
 
       retval = oscanf (sfmt, who);
     }
   else
     {
-      // Note: error() is member fcn from octave_stream, not ::error().
+      // Note: error is member fcn from octave_stream, not ::error.
       error (who + ": format must be a string");
     }
 
   return retval;
 }
 
 int
 octave_stream::printf (const std::string& fmt, const octave_value_list& args,
@@ -3916,17 +3902,17 @@ octave_stream::printf (const octave_valu
 
       if (fmt.is_sq_string ())
         sfmt = do_string_escapes (sfmt);
 
       retval = printf (sfmt, args, who);
     }
   else
     {
-      // Note: error() is member fcn from octave_stream, not ::error().
+      // Note: error is member fcn from octave_stream, not ::error.
       error (who + ": format must be a string");
     }
 
   return retval;
 }
 
 int
 octave_stream::puts (const std::string& s, const std::string& who)
@@ -3948,17 +3934,17 @@ octave_stream::puts (const octave_value&
 
   if (tc_s.is_string ())
     {
       std::string s = tc_s.string_value ();
       retval = puts (s, who);
     }
   else
     {
-      // Note: error() is member fcn from octave_stream, not ::error().
+      // Note: error is member fcn from octave_stream, not ::error.
       error (who + ": argument must be a string");
     }
 
   return retval;
 }
 
 bool
 octave_stream::eof (void) const
@@ -4163,21 +4149,17 @@ octave_stream_list::do_insert (octave_st
   // in an oct-file; then the kernel knows the fd is free, but Octave
   // does not know.  If it happens, it should not do harm here to simply
   // overwrite this entry, although the wrong entry might have done harm
   // before.
 
   if (list.size () < list.max_size ())
     list[stream_number] = os;
   else
-    {
-      stream_number = -1;
-      // FIXME: Should this be ::error()?
-      error ("could not create file id");
-    }
+    ::error ("could not create file id");
 
   return stream_number;
 
 }
 
 static void
 gripe_invalid_file_id (int fid, const std::string& who)
 {
diff --git a/libinterp/corefcn/oct-strstrm.cc b/libinterp/corefcn/oct-strstrm.cc
--- a/libinterp/corefcn/oct-strstrm.cc
+++ b/libinterp/corefcn/oct-strstrm.cc
@@ -26,28 +26,28 @@ along with Octave; see the file COPYING.
 
 #include "oct-strstrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
 octave_base_strstream::seek (off_t, int)
 {
-  // Note: error() is inherited from octave_base_stream, not ::error().
+  // Note: error is inherited from octave_base_stream, not ::error.
   // This error function does not halt execution so "return ..." must exist.
   error ("fseek: invalid operation");
   return -1;
 }
 
 // Return current stream position.
 
 off_t
 octave_base_strstream::tell (void)
 {
-  // Note: error() is inherited from octave_base_stream, not ::error().
+  // Note: error is inherited from octave_base_stream, not ::error.
   // This error function does not halt execution so "return ..." must exist.
   error ("ftell: invalid operation");
   return -1;
 }
 
 octave_stream
 octave_istrstream::create (const char *data, std::ios::openmode arg_md,
                            oct_mach_info::float_format flt_fmt)
