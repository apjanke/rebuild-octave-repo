# HG changeset patch
# User jwe
# Date 1185473046 0
#      Thu Jul 26 18:04:06 2007 +0000
# Node ID fe19c6cb5bc673ebbec7ed2e3db8f7057480ed5a
# Parent  3727149c8da160f01891a2b4e2e89319ac619e44
[project @ 2007-07-26 18:04:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,24 +1,29 @@
+2007-07-26  David Bateman  <dbateman@free.fr>
+
+	* pr-output.cc (Frats): Return character array with same number of
+	rows as original value.
+
 2007-07-26  John W. Eaton  <jwe@octave.org>
 
 	* pt-bp.h (MAYBE_DO_BREAKPOINT): Rename cur_fcn to xfcn.
 
 	* version.h (OCTAVE_VERSION): Now 2.9.13+.
 
 2007-07-25  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.13
 	(OCTAVE_API_VERSION): Now api-v25.
 	(OCTAVE_RELEASE_DATE): Now 2007-07-25.
 
 	* pt-bp.h (MAYBE_DO_BREAKPOINT): Rename fcn to curr_fcn.
 
 2007-07-25  David Bateman  <dbateman@free.fr>
-	
+
 	* Makefile.in: 	Adjust DISTFILES to allow out of tree "make dist" 
 	to work.
 
 2007-07-24  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.cc (color_property::operator = (const octave_value&)):
 	New method.
 	* graphics.h: Provide decl.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -50,16 +50,17 @@ 02110-1301, USA.
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "sysdep.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // TRUE means use a scaled fixed point format for `format long' and
 // `format short'.
 static bool Vfixed_point_format = false;
 
 // The maximum field width for a number printed by the default output
@@ -2746,38 +2747,76 @@ You can convert the string back into a m
 @end example\n\
 \n\
 The optional second argument defines the maximum length of the string\n\
 representing the elements of @var{x}. By default @var{len} is 9.\n\
 @seealso{format, rat}\n\
 @end deftypefn")
 {
   octave_value retval;
+
   int nargin = args.length ();
 
+  unwind_protect::begin_frame ("Frats");
+
+  unwind_protect_int (rat_string_len);
+
   rat_string_len = 9;
+
   if (nargin == 2)
     rat_string_len = args(1).nint_value ();
 
-  if (!error_state)
+  if (! error_state)
     {
       if (nargin < 3 && nargout < 2)
 	{
-	  bool save_rat_format = rat_format;
-	  rat_format = true;
-	  std::ostringstream buf;
-	  args(0).print (buf);
-	  retval = buf.str ();
-	  rat_format = save_rat_format;
+	  octave_value arg = args(0);
+
+	  if (arg.is_numeric_type ())
+	    {
+	      unwind_protect_bool (rat_format);
+
+	      rat_format = true;
+
+	      std::ostringstream buf;
+	      args(0).print (buf);
+	      std::string s = buf.str ();
+
+	      std::list<std::string> lst;
+
+	      size_t n = 0;
+	      size_t s_len = s.length ();
+
+	      while (n < s_len)
+		{
+		  size_t m = s.find ('\n',  n);
+
+		  if (m == NPOS)
+		    {
+		      lst.push_back (s.substr (n));
+		      break;
+		    }
+		  else
+		    {
+		      lst.push_back (s.substr (n, m - n));
+		      n = m + 1;
+		    }
+		}
+
+	      retval = string_vector (lst);
+	    }
+	  else
+	    error ("rats: expecting numeric input");
 	}
       else
 	print_usage ();
     }
 
-  rat_string_len = -1;
+  unwind_protect::run_frame ("Frats");
+
   return retval;
 }
 
 DEFUN (disp, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} disp (@var{x})\n\
 Display the value of @var{x}.  For example,\n\
 \n\
