# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232566241 18000
#      Wed Jan 21 14:30:41 2009 -0500
# Node ID ab82e19002c4f7127e805fcc7eb62006bc331259
# Parent  d81caf2e3a2887f5c209ad32c95a28267b20eed8
better compatibility for axis label properties

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,15 @@
 2009-01-21  John W. Eaton  <jwe@octave.org>
 
+	* plot/__axis_label__.m: Set properties in existing axis label
+	object instead of creating a new text object.
+	* plot/ylabel.m: Don't set rotation property here.
+	* plot/title.m: Don't set horizontalalignment property here.
+
 	* plot/ylabel.m: Insert rotation property in varargin before
 	passing it on to __axis_label__.
 	* plot/__axis_label__.m: Don't set rotation for ylabel here.
 
 	* plot/title.m: Insert horizontalalignment property in varargin
 	before passing it on to __axis_label__.
 
 2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/scripts/plot/__axis_label__.m b/scripts/plot/__axis_label__.m
--- a/scripts/plot/__axis_label__.m
+++ b/scripts/plot/__axis_label__.m
@@ -18,26 +18,28 @@
 
 ## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __axis_label__ (caller, txt, varargin)
 
   if (ischar (txt))
-    ## FIXME -- should be able to use text instead of __go_text__.
     ca = gca ();
 
-    h = __go_text__ (ca, "fontangle", get (ca, "fontangle"),
-                         "fontname", get (ca, "fontname"),
-                         "fontsize", get (ca, "fontsize"),
-                         "fontunits", get (ca, "fontunits"),
-                         "fontweight", get (ca, "fontweight"),
-                         "string", txt, varargin{:});
-    set (ca, caller, h);
+    h = get (gca (), caller);
+
+    set (h, "fontangle", get (ca, "fontangle"),
+         "fontname", get (ca, "fontname"),
+         "fontsize", get (ca, "fontsize"),
+         "fontunits", get (ca, "fontunits"),
+         "fontweight", get (ca, "fontweight"),
+         "string", txt,
+	 varargin{:});
+
     if (nargout > 0)
       retval = h;
     endif
   else
     error ("%s: expecting first argument to be character string", caller);
   endif
 
 endfunction
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -25,17 +25,16 @@
 
 ## PKG_ADD: mark_as_command title
 
 ## Author: jwe
 
 function h = title (s, varargin)
 
   if (rem (nargin, 2) == 1)
-    varargin = [{"horizontalalignment", "center"}, varargin];
     if (nargout > 0)
       h = __axis_label__ ("title", s, varargin{:});
     else
       __axis_label__ ("title", s, varargin{:});
     endif
   else
     print_usage ();
   endif
diff --git a/scripts/plot/ylabel.m b/scripts/plot/ylabel.m
--- a/scripts/plot/ylabel.m
+++ b/scripts/plot/ylabel.m
@@ -33,17 +33,16 @@ function retval = ylabel (varargin)
 
   if (rem (nargin, 2) != 1)
     print_usage ();
   endif
 
   oldh = gca ();
   unwind_protect
     axes (h);
-    varargin = {varargin{1}, "rotation", 90, varargin{2:end}};
     tmp = __axis_label__ ("ylabel", varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (nargout > 0)
     retval = tmp;
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-01-21  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (properties::init): Set default xlabel, ylabel,
+	zlabel, and title properties that differ from default text
+	properties.
+
 2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* OPERATORS/op-range.cc: Define & register range-scalar ops.
 
 2009-01-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::subsref (..., bool auto_add)): New method.
 	(octave_value::next_subsref (bool auto_add, ...)): New method.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2203,30 +2203,40 @@ axes::properties::init (void)
   upv(2) = 1.0;
   cameraupvector = upv;
   cameraupvector.add_constraint (dim_vector (1, 3));
   currentpoint.add_constraint (dim_vector (2, 3));
   ticklength.add_constraint (dim_vector (1, 2));
   tightinset.add_constraint (dim_vector (1, 4));
 
   x_zlim.resize (1, 2);
+
   sx = "linear";
   sy = "linear";
   sz = "linear";
 
   xset (xlabel.handle_value (), "handlevisibility", "off");
   xset (ylabel.handle_value (), "handlevisibility", "off");
   xset (zlabel.handle_value (), "handlevisibility", "off");
-
   xset (title.handle_value (), "handlevisibility", "off");
 
+  xset (xlabel.handle_value (), "horizontalalignment", "center");
+  xset (ylabel.handle_value (), "horizontalalignment", "center");
+  xset (zlabel.handle_value (), "horizontalalignment", "right");
+  xset (title.handle_value (), "horizontalalignment", "center");
+
+  xset (xlabel.handle_value (), "verticalalignment", "cap");
+  xset (ylabel.handle_value (), "verticalalignment", "bottom");
+  xset (title.handle_value (), "verticalalignment", "bottom");
+
+  xset (ylabel.handle_value (), "rotation", 90.0);
+
   adopt (xlabel.handle_value ());
   adopt (ylabel.handle_value ());
   adopt (zlabel.handle_value ());
-
   adopt (title.handle_value ());
 }
 
 void 
 axes::properties::sync_positions (void)
 {
 #if 0
   // FIXME -- this should take font metrics into consideration,
