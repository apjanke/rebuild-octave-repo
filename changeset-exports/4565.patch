# HG changeset patch
# User jwe
# Date 1067435371 0
#      Wed Oct 29 13:49:31 2003 +0000
# Node ID 1db951a4fcd527c8bb301d0ae2eaa176dc7cff01
# Parent  8a0a0eb77f0bfe42487a3204b7033be44fd2c73e
[project @ 2003-10-29 13:49:30 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dim-vector.h (dim_vector_rep::dim_vector_rep (int, const
+	dim_vector&)): Correctly handle case of n < dv->ndims.
+
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dim-vector.h (dim_vector::any_zero): New function.
 	(dim_vector::str): New default arg, sep.
 
 	* Array.h (Array<T>::numel): New function.
 
 2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -80,17 +80,19 @@ protected:
     dim_vector_rep (int n, const dim_vector_rep *dv)
       : dims ((dv && n > 0) ? new int [n] : 0),
 	ndims (n > 0 ? n : 0), count (1)
     {
       if (dims)
 	{
 	  int dv_ndims = dv ? dv->ndims : 0;
 
-	  for (int i = 0; i < dv_ndims; i++)
+	  int min_len = n < dv_ndims ? n : dv_ndims;
+
+	  for (int i = 0; i < min_len; i++)
 	    dims[i] = dv->dims[i];
 
 	  for (int i = dv_ndims; i < n; i++)
 	    dims[i] = 0;
 	}
     }
 
     ~dim_vector_rep (void) { delete [] dims; }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (fill_matrix): Remove trailing singletons before
+	allocating the result matrix.
+
+	* input.cc (get_user_input): Don't forget about the diary here.
+
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-list.h (octave_list::nelem): Delete.
 	(octave_list::dims): New function.
 	* ov-range.h (octave_list::dims): New function.
 	* ov-struct.h (octave_struct::dims): New function.
 	* ov-base-scalar.h (octave_base_scalar::dims): New function.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1022,16 +1022,26 @@ fill_matrix (const octave_value_list& ar
       }
       break;
     }
 
   if (! error_state)
     {
       ndim = dims.length ();
 
+      for (int i = ndim-1; i > 1; i--)
+	{
+	  if (dims(i) == 1)
+	    ndim--;
+	  else
+	    break;
+	}
+
+      dims.resize (ndim);
+
       check_dimensions (dims, fcn);
 
       if (! error_state)
 	{
 	  // Construct either scalar, matrix or N-d array.
 
 	  switch (ndim)
 	    {
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -543,25 +543,32 @@ get_user_input (const octave_value_list&
 	  return retval;
 	}
     }
 
  again:
 
   flush_octave_stdout ();
 
+  octave_diary << prompt;
+
   std::string input_buf = gnu_readline (prompt.c_str (), true);
 
   if (! input_buf.empty ())
     {
       if (! input_from_startup_file)
 	command_history::add (input_buf);
 
       size_t len = input_buf.length ();
 
+      octave_diary << input_buf;
+
+      if (input_buf[len - 1] != '\n')
+	octave_diary << "\n";
+
       if (len < 1)
 	{
 	  if (debug)
 	    goto again;
 	  else
 	    return read_as_string ? octave_value ("") : octave_value (Matrix ());
 	}
 
