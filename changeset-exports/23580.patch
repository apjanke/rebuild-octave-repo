# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497315208 25200
#      Mon Jun 12 17:53:28 2017 -0700
# Node ID 2230f9e10fb36acd1c21f9f7d864612b3563bbd2
# Parent  c20a0fa91c0cc826c48a1adaf8eaca3cdb0d6e5d
maint: Deprecate is_integer_type and replace with isinteger.

* ov.h (is_integer_type): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isinteger): New function.

* cellfun.cc, data.cc, find.cc, graphics.cc, oct-stream.cc, typecast.cc,
audioread.cc, qr.cc, ov-base.h, ov-class.cc, ov-intx.h, ov.cc:
Replace instances of is_integer_type with isinteger.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1783,17 +1783,17 @@ num2cell ([1,2;3,4],1)
     dimv = args(1).int_vector_value (true);
 
   if (array.islogical ())
     retval = do_num2cell (array.bool_array_value (), dimv);
   else if (array.is_char_matrix ())
     retval = do_num2cell (array.char_array_value (), dimv);
   else if (array.is_numeric_type ())
     {
-      if (array.is_integer_type ())
+      if (array.isinteger ())
         {
           if (array.is_int8_type ())
             retval = do_num2cell (array.int8_array_value (), dimv);
           else if (array.is_int16_type ())
             retval = do_num2cell (array.int16_array_value (), dimv);
           else if (array.is_int32_type ())
             retval = do_num2cell (array.int32_array_value (), dimv);
           else if (array.is_int64_type ())
@@ -2272,17 +2272,17 @@ slicing is done along the first non-sing
     {
       // specialize for some dense arrays.
       if (x.islogical ())
         retcell = do_cellslices_nda (x.bool_array_value (),
                                      lb, ub, dim);
       else if (x.is_char_matrix ())
         retcell = do_cellslices_nda (x.char_array_value (),
                                      lb, ub, dim);
-      else if (x.is_integer_type ())
+      else if (x.isinteger ())
         {
           if (x.is_int8_type ())
             retcell = do_cellslices_nda (x.int8_array_value (),
                                          lb, ub, dim);
           else if (x.is_int16_type ())
             retcell = do_cellslices_nda (x.int16_array_value (),
                                          lb, ub, dim);
           else if (x.is_int32_type ())
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -606,17 +606,17 @@ periodic, @code{mod} is a better choice.
     err_wrong_type_arg ("rem", args(0));
 
   if (! args(1).is_numeric_type ())
     err_wrong_type_arg ("rem", args(1));
 
   if (args(0).is_complex_type () || args(1).is_complex_type ())
     error ("rem: not defined for complex numbers");
 
-  if (args(0).is_integer_type () || args(1).is_integer_type ())
+  if (args(0).isinteger () || args(1).isinteger ())
     {
       builtin_type_t btyp0 = args(0).builtin_type ();
       builtin_type_t btyp1 = args(1).builtin_type ();
       if (btyp0 == btyp_double || btyp0 == btyp_float)
         btyp0 = btyp1;
       if (btyp1 == btyp_double || btyp1 == btyp_float)
         btyp1 = btyp0;
 
@@ -785,17 +785,17 @@ negative numbers or when the values are 
     err_wrong_type_arg ("mod", args(0));
 
   if (! args(1).is_numeric_type ())
     err_wrong_type_arg ("mod", args(1));
 
   if (args(0).is_complex_type () || args(1).is_complex_type ())
     error ("mod: not defined for complex numbers");
 
-  if (args(0).is_integer_type () || args(1).is_integer_type ())
+  if (args(0).isinteger () || args(1).isinteger ())
     {
       builtin_type_t btyp0 = args(0).builtin_type ();
       builtin_type_t btyp1 = args(1).builtin_type ();
       if (btyp0 == btyp_double || btyp0 == btyp_float)
         btyp0 = btyp1;
       if (btyp1 == btyp_double || btyp1 == btyp_float)
         btyp1 = btyp0;
 
@@ -3135,17 +3135,17 @@ Return true if @var{x} is an integer obj
 Note that @w{@code{isinteger (14)}} is false because numeric constants in
 Octave are double precision floating point values.
 @seealso{isfloat, ischar, islogical, isnumeric, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_integer_type ());
+  return ovl (args(0).isinteger ());
 }
 
 /*
 %!assert (isinteger (int8 (16)))
 %!assert (isinteger (int16 (16)))
 %!assert (isinteger (int32 (16)))
 %!assert (isinteger (int64 (16)))
 
@@ -7478,17 +7478,17 @@ do_diff (const octave_value& array, octa
                     }
                 }
             }
 
           return retval;
         }
     }
 
-  if (array.is_integer_type ())
+  if (array.isinteger ())
     {
       if (array.is_int8_type ())
         retval = array.int8_array_value ().diff (order, dim);
       else if (array.is_int16_type ())
         retval = array.int16_array_value ().diff (order, dim);
       else if (array.is_int32_type ())
         retval = array.int32_array_value ().diff (order, dim);
       else if (array.is_int64_type ())
@@ -7738,17 +7738,17 @@ Encode a double matrix or array @var{x} 
   if (! args(0).is_numeric_type ())
     error ("base64_encode: encoding is supported only for numeric arrays");
 
   if (args(0).is_complex_type () || args(0).is_sparse_type ())
     error ("base64_encode: encoding complex or sparse data is not supported");
 
   octave_value_list retval;
 
-  if (args(0).is_integer_type ())
+  if (args(0).isinteger ())
     {
 #define MAKE_INT_BRANCH(X)                                               \
       if (args(0).is_ ## X ## _type ())                                  \
         {                                                                \
           const X##NDArray in = args(0).  X## _array_value ();           \
           size_t inlen = in.numel () * sizeof (X## _t) / sizeof (char);  \
           const char *inc = reinterpret_cast<const char *> (in.data ()); \
           char *out;                                                     \
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -444,17 +444,17 @@ b = sparse (i, j, v, sz(1), sz(2));
         }
       else
         {
           boolNDArray v = arg.bool_array_value ();
 
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction);
         }
     }
-  else if (arg.is_integer_type ())
+  else if (arg.isinteger ())
     {
 #define DO_INT_BRANCH(INTT)                                             \
       else if (arg.is_ ## INTT ## _type ())                             \
         {                                                               \
           INTT ## NDArray v = arg.INTT ## _array_value ();              \
                                                                         \
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction); \
         }
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1572,17 +1572,17 @@ array_property::is_equal (const octave_v
 void
 array_property::get_data_limits (void)
 {
   xmin = xminp = octave::numeric_limits<double>::Inf ();
   xmax = xmaxp = -octave::numeric_limits<double>::Inf ();
 
   if (! data.isempty ())
     {
-      if (data.is_integer_type ())
+      if (data.isinteger ())
         {
           if (data.is_int8_type ())
             get_array_limits (data.int8_array_value (),
                               xmin, xmax, xminp, xmaxp);
           else if (data.is_uint8_type ())
             get_array_limits (data.uint8_array_value (),
                               xmin, xmax, xminp, xmaxp);
           else if (data.is_int16_type ())
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -5537,17 +5537,17 @@ is_nan_or_inf (const octave_value& val)
 
 static bool
 ok_for_signed_int_conv (const octave_value& val)
 {
   uint64_t limit = std::numeric_limits<int64_t>::max ();
 
   if (val.is_string ())
     return true;
-  else if (val.is_integer_type ())
+  else if (val.isinteger ())
     {
       if (val.is_uint64_type ())
         {
           octave_uint64 ival = val.uint64_scalar_value ();
 
           if (ival.value () <= limit)
             return true;
         }
@@ -5565,17 +5565,17 @@ ok_for_signed_int_conv (const octave_val
   return false;
 }
 
 static bool
 ok_for_unsigned_int_conv (const octave_value& val)
 {
   if (val.is_string ())
     return true;
-  else if (val.is_integer_type ())
+  else if (val.isinteger ())
     {
       // Easier than dispatching here...
 
       octave_value ov_is_ge_zero
         = do_binary_op (octave_value::op_ge, val, octave_value (0.0));
 
       return ov_is_ge_zero.is_true ();
     }
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -151,17 +151,17 @@ typecast (@var{x}, "uint8")
   octave_value array = args(0);
 
   if (array.islogical ())
     get_data_and_bytesize (array.bool_array_value (), data, byte_size,
                            old_dims, frame);
   else if (array.is_string ())
     get_data_and_bytesize (array.char_array_value (), data, byte_size,
                            old_dims, frame);
-  else if (array.is_integer_type ())
+  else if (array.isinteger ())
     {
       if (array.is_int8_type ())
         get_data_and_bytesize (array.int8_array_value (), data, byte_size,
                                old_dims, frame);
       else if (array.is_int16_type ())
         get_data_and_bytesize (array.int16_array_value (), data, byte_size,
                                old_dims, frame);
       else if (array.is_int32_type ())
@@ -492,17 +492,17 @@ column vector.
     error ("bitunpack: argument must be a number or a string");
 
   octave_value retval;
 
   octave_value array = args(0);
 
   if (array.is_string ())
     retval = do_bitunpack (array.char_array_value ());
-  else if (array.is_integer_type ())
+  else if (array.isinteger ())
     {
       if (array.is_int8_type ())
         retval = do_bitunpack (array.int8_array_value ());
       else if (array.is_int16_type ())
         retval = do_bitunpack (array.int16_array_value ());
       else if (array.is_int32_type ())
         retval = do_bitunpack (array.int32_array_value ());
       else if (array.is_int64_type ())
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -280,17 +280,17 @@ Comment.
   double scale = 1.0;
 
   if (args(1).is_uint8_type ())
     bias = scale = std::pow (2.0, 7);
   else if (args(1).is_int16_type ())
     scale = std::pow (2.0, 15);
   else if (args(1).is_int32_type ())
     scale = std::pow (2.0, 31);
-  else if (args(1).is_integer_type ())
+  else if (args(1).isinteger ())
     err_wrong_type_arg ("audiowrite", args(1));
 
   Matrix audio = args(1).matrix_value ();
 
   int samplerate = args(2).int_value ();
 
   std::string ext;
   size_t dotpos = filename.find_last_of (".");
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -871,17 +871,17 @@ bool check_qr_dims (const octave_value& 
   octave_idx_type n = r.columns ();
   return ((q.ndims () == 2 && r.ndims () == 2 && k == q.columns ())
           && (m == k || (allow_ecf && k == n && k < m)));
 }
 
 static
 bool check_index (const octave_value& i, bool vector_allowed = false)
 {
-  return ((i.is_real_type () || i.is_integer_type ())
+  return ((i.is_real_type () || i.isinteger ())
           && (i.is_scalar_type () || vector_allowed));
 }
 
 DEFUN_DLD (qrupdate, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{Q1}, @var{R1}] =} qrupdate (@var{Q}, @var{R}, @var{u}, @var{v})
 Given a QR@tie{}factorization of a real or complex matrix
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -406,17 +406,17 @@ public:
   virtual bool is_uint16_type (void) const { return false; }
 
   virtual bool is_uint32_type (void) const { return false; }
 
   virtual bool is_uint64_type (void) const { return false; }
 
   virtual bool islogical (void) const { return false; }
 
-  virtual bool is_integer_type (void) const { return false; }
+  virtual bool isinteger (void) const { return false; }
 
   virtual bool is_real_type (void) const { return false; }
 
   virtual bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
 
   virtual bool is_scalar_type (void) const { return false; }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1805,17 +1805,17 @@ belongs to.
 
   boolNDArray matches (clsnames.dims (), false);
 
   for (octave_idx_type idx = 0; idx < clsnames.numel (); idx++)
     {
       std::string cls = clsnames(idx);
       if (obj_cls == cls
           || (cls == "float"   && obj.is_float_type   ())
-          || (cls == "integer" && obj.is_integer_type ())
+          || (cls == "integer" && obj.isinteger ())
           || (cls == "numeric" && obj.is_numeric_type ())
           || obj.is_instance_of (cls))
         matches(idx) = true;
     }
 
   return ovl (matches);
 }
 
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -69,17 +69,17 @@ public:
   octave_base_value * clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_base_value * empty_clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
-  bool is_integer_type (void) const { return true; }
+  bool isinteger (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return OCTAVE_INT_BTYP; }
 
 public:
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
@@ -412,17 +412,17 @@ public:
     (new OCTAVE_VALUE_INT_MATRIX_T
      (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION ()));
 
     return tmp.do_index_op (idx, resize_ok);
   }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
-  bool is_integer_type (void) const { return true; }
+  bool isinteger (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return OCTAVE_INT_BTYP; }
 
 public:
 
   octave_int8
   int8_scalar_value (void) const { return octave_int8 (scalar); }
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1779,17 +1779,17 @@ convert_to_int_array (const Array<octave
 }
 
 Array<int>
 octave_value::int_vector_value (bool require_int, bool force_string_conv,
                                 bool force_vector_conversion) const
 {
   Array<int> retval;
 
-  if (is_integer_type ())
+  if (isinteger ())
     {
       if (is_int32_type ())
         retval = convert_to_int_array (int32_array_value ());
       else if (is_int64_type ())
         retval = convert_to_int_array (int64_array_value ());
       else if (is_int16_type ())
         retval = convert_to_int_array (int16_array_value ());
       else if (is_int8_type ())
@@ -1849,17 +1849,17 @@ convert_to_octave_idx_type_array (const 
 
 Array<octave_idx_type>
 octave_value::octave_idx_type_vector_value (bool require_int,
                                             bool force_string_conv,
                                             bool force_vector_conversion) const
 {
   Array<octave_idx_type> retval;
 
-  if (is_integer_type ())
+  if (isinteger ())
     {
       if (is_int32_type ())
         retval = convert_to_octave_idx_type_array (int32_array_value ());
       else if (is_int64_type ())
         retval = convert_to_octave_idx_type_array (int64_array_value ());
       else if (is_int16_type ())
         retval = convert_to_octave_idx_type_array (int16_array_value ());
       else if (is_int8_type ())
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -662,18 +662,22 @@ public:
 
   bool islogical (void) const
   { return rep->islogical (); }
 
   OCTAVE_DEPRECATED ("use 'islogical' instead")
   bool is_bool_type (void) const
   { return rep->islogical (); }
 
+  bool isinteger (void) const
+  { return rep->isinteger (); }
+
+  OCTAVE_DEPRECATED ("use 'isinteger' instead")
   bool is_integer_type (void) const
-  { return rep->is_integer_type (); }
+  { return rep->isinteger (); }
 
   bool is_real_type (void) const
   { return rep->is_real_type (); }
 
   bool is_complex_type (void) const
   { return rep->is_complex_type (); }
 
   bool is_scalar_type (void) const
