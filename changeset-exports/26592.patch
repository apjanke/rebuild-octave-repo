# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1548137197 -3600
#      Tue Jan 22 07:06:37 2019 +0100
# Node ID c0fa4a9eef9501366392edc8ae9ccf31e8a5d3fa
# Parent  26a3861a34b6e6689d93a9c63657e40368e885f5
Ensure boolean value when checking sparse matrices for symmetry/hermiticity.

* scripts/linear-algebra/ishermitian.m, cripts/linear-algebra/issymmetric.m:
In case of sparse matrix input, return a single 1 byte boolean value, not a
25 byte sparse matrix with exactly one entry.

diff --git a/scripts/linear-algebra/ishermitian.m b/scripts/linear-algebra/ishermitian.m
--- a/scripts/linear-algebra/ishermitian.m
+++ b/scripts/linear-algebra/ishermitian.m
@@ -77,29 +77,29 @@ function retval = ishermitian (A, skewop
   if (! (isnumeric (tol) && isscalar (tol) && tol >= 0))
     error ("ishermitian: TOL must be a scalar >= 0");
   endif
 
   ## Calculate Hermitian-ness
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
-      retval = ! any ((A != A')(:));
+      retval = full (! any ((A != A')(:)));
     else
       if (islogical (A))
         ## Hack to allow norm to work.  Choose single to minimize memory.
         A = single (A);
       endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A', Inf) / norm_x <= tol;
     endif
   else
     ## skew-Hermitian
     if (tol == 0)
-      retval = ! any ((A != -A')(:));
+      retval = full (! any ((A != -A')(:)));
     else
       if (islogical (A))
         ## Hack to allow norm to work.  Choose single to minimize memory.
         A = single (A);
       endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A', Inf) / norm_x <= tol;
     endif
@@ -109,17 +109,17 @@ endfunction
 
 
 %!assert (ishermitian (1))
 %!assert (! ishermitian ([1, 2]))
 %!assert (ishermitian ([]))
 %!assert (ishermitian ([1, 2; 2, 1]))
 %!assert (ishermitian ([1, 2.1; 2, 1.1], 0.2))
 %!assert (ishermitian ([1, -2i; 2i, 1]))
-%!assert (ishermitian (speye (100)))
+%!assert (ishermitian (speye (100)), true)  # Return full logical value.
 %!assert (ishermitian (logical (eye (2))))
 %!assert (! ishermitian (logical ([1 1; 0 1])))
 %!assert (ishermitian (logical ([1 1; 0 1]), 0.5))
 %!assert (ishermitian ([0, 2i; 2i, 0], "skew"))
 %!assert (! ishermitian ([0, 2; -2, eps], "skew"))
 %!assert (ishermitian ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (ishermitian ("test")))
diff --git a/scripts/linear-algebra/issymmetric.m b/scripts/linear-algebra/issymmetric.m
--- a/scripts/linear-algebra/issymmetric.m
+++ b/scripts/linear-algebra/issymmetric.m
@@ -76,29 +76,29 @@ function retval = issymmetric (A, skewop
   if (! (isnumeric (tol) && isscalar (tol) && tol >= 0))
     error ("issymmetric: TOL must be a scalar >= 0");
   endif
 
   ## Calculate symmetry
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
-      retval = ! any ((A != A.')(:));
+      retval = full (! any ((A != A.')(:)));
     else
       if (islogical (A))
         ## Hack to allow norm to work.  Choose single to minimize memory.
         A = single (A);
       endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A.', Inf) / norm_x <= tol;
     endif
   else
     ## skew symmetry
     if (tol == 0)
-      retval = ! any ((A != -A.')(:));
+      retval = full (! any ((A != -A.')(:)));
     else
       if (islogical (A))
         ## Hack to allow norm to work.  Choose single to minimize memory.
         A = single (A);
       endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A.', Inf) / norm_x <= tol;
     endif
@@ -108,17 +108,17 @@ endfunction
 
 
 %!assert (issymmetric (1))
 %!assert (! issymmetric ([1, 2]))
 %!assert (issymmetric ([]))
 %!assert (issymmetric ([1, 2; 2, 1]))
 %!assert (issymmetric ([1, 2.1; 2, 1.1], 0.2))
 %!assert (issymmetric ([1, 2i; 2i, 1]))
-%!assert (issymmetric (speye (100)))
+%!assert (issymmetric (speye (100)), true)  # Return full logical value.
 %!assert (issymmetric (logical (eye (2))))
 %!assert (! issymmetric (logical ([1 1; 0 1])))
 %!assert (issymmetric (logical ([1 1; 0 1]), 0.5))
 %!assert (issymmetric ([0, 2; -2, 0], "skew"))
 %!assert (! issymmetric ([0, 2; -2, eps], "skew"))
 %!assert (issymmetric ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (issymmetric ("test")))
