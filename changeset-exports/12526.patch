# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1300561977 25200
#      Sat Mar 19 12:12:57 2011 -0700
# Node ID f8ea3eabcb85fc015c56ea52c43217465cf723b9
# Parent  d36266a542024fb0f761088929563ce7f057fa18
Add daspect, pbaspect functions to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,9 +1,14 @@
-2010-03-18  Rik  <octave@nomad.inbox5.com>
+2010-03-19  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/octave.texi, interpreter/plot.txi: Add daspect, pbaspect
+	functions to documentation.
+
+2010-03-19  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/octave.texi, interpreter/plot.txi: Add getappdata,
 	setappdata, isappdata, rmappdata functions to documentation.
 
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/matrix.txi: Add nth_element function to documentation.
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -505,30 +505,32 @@ Plotting
 * Introduction to Plotting::    
 * High-Level Plotting::         
 * Graphics Data Structures::    
 * Advanced Plotting::           
 
 High-Level Plotting
 
 * Two-Dimensional Plots::       
-* Three-Dimensional Plotting::  
+* Three-Dimensional Plots::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Printing and Saving Plots::              
 * Interacting with Plots::      
 * Test Plotting Functions::     
 
 Two-Dimensional Plots
 
+* Axis Configuration::  
 * Two-dimensional Function Plotting::  
 
-Three-Dimensional Plotting
+Three-Dimensional Plots
 
+* Aspect Ratio::  
 * Three-dimensional Function Plotting::  
 * Three-dimensional Geometric Shapes::  
 
 Graphics Data Structures
 
 * Introduction to Graphics Structures::  
 * Graphics Objects::            
 * Graphics Object Properties::  
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -49,28 +49,33 @@ figure.  This is explained in @ref{Graph
 Octave provides simple means to create many different types of two- and
 three-dimensional plots using high-level functions.
 
 If you need more detailed control, see @ref{Graphics Data Structures}
 and @ref{Advanced Plotting}.
 
 @menu
 * Two-Dimensional Plots::       
-* Three-Dimensional Plotting::  
+* Three-Dimensional Plots::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Printing and Saving Plots::              
 * Interacting with Plots::      
 * Test Plotting Functions::     
 @end menu
 
 @node Two-Dimensional Plots
 @subsection Two-Dimensional Plots
 
+@menu
+* Axis Configuration::  
+* Two-dimensional Function Plotting::  
+@end menu
+
 The @code{plot} function allows you to create simple x-y plots with
 linear axes.  For example,
 
 @example
 @group
 x = -10:0.1:10;
 plot (x, sin (x));
 @end group
@@ -214,16 +219,19 @@ produces the spiral plot shown in @ref{f
 @DOCSTRING(pcolor)
 
 @DOCSTRING(area)
 
 @DOCSTRING(comet)
 
 @DOCSTRING(comet3)
 
+@node Axis Configuration
+@subsubsection Axis Configuration
+
 The axis function may be used to change the axis limits of an existing
 plot and various other axis properties, such as the aspect ratio and the
 appearance of tic marks.
 
 @DOCSTRING(axis)
 
 Similarly the axis limits of the colormap can be changed with the caxis
 function.
@@ -232,20 +240,16 @@ function.
 
 The @code{xlim}, @code{ylim}, and @code{zlim} functions may be used to
 get or set individual axis limits.  Each has the same form.
 
 @anchor{doc-ylim}
 @anchor{doc-zlim}
 @DOCSTRING(xlim)
 
-@menu
-* Two-dimensional Function Plotting::  
-@end menu
-
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 
 Octave can plot a function from a function handle inline function or
 string defining the function without the user needing to explicitly
 create the data to be plotted.  The function @code{fplot} also generates
 two-dimensional plots with linear axes using a function name and limits
 for the range of the x-coordinate instead of the x and y data.  For
@@ -270,18 +274,18 @@ function include @code{ezplot}, @code{ez
 @DOCSTRING(ezplot)
 
 @DOCSTRING(ezcontour)
 
 @DOCSTRING(ezcontourf)
 
 @DOCSTRING(ezpolar)
 
-@node Three-Dimensional Plotting
-@subsection Three-Dimensional Plotting
+@node Three-Dimensional Plots
+@subsection Three-Dimensional Plots
 
 The function @code{mesh} produces mesh surface plots.  For example,
 
 @example
 @group
 tx = ty = linspace (-8, 8, 41)';
 [xx, yy] = meshgrid (tx, ty);
 r = sqrt (xx .^ 2 + yy .^ 2) + eps;
@@ -359,20 +363,33 @@ three-dimensional plots.
 
 @DOCSTRING(ribbon)
 
 @DOCSTRING(shading)
 
 @DOCSTRING(scatter3)
 
 @menu
+* Aspect Ratio::
 * Three-dimensional Function Plotting::  
 * Three-dimensional Geometric Shapes::  
 @end menu
 
+@node Aspect Ratio
+@subsubsection Aspect Ratio
+
+For three-dimensional plots the aspect ratio can be set for data with
+@code{daspect} and for the plot box with @code{pbaspect}.  
+See @ref{Axis Configuration} for controlling the x-, y-, and z-limits for
+plotting.
+
+@DOCSTRING(daspect)
+
+@DOCSTRING(pbaspect)
+
 @node Three-dimensional Function Plotting
 @subsubsection Three-dimensional Function Plotting
 
 @DOCSTRING(ezplot3)
 
 @DOCSTRING(ezmesh)
 
 @DOCSTRING(ezmeshc)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-03-19  Rik  <octave@nomad.inbox5.com>
+
+	* plot/daspect.m, plot/pbaspect.m: Use newline between @deftypefnx
+	macros to get correct appearance.
+
 2011-03-19  Ben Abbott  <bpabbott@mac.com>
 
 	* geometry/trisurf.m: Set default edgecolor as Matlab does. Add demos.
 
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* plot/uigetdir.m, plot/uigetfile.m, plot/uimenu.m, plot/uiputfile.m:
 	Improve docstrings.  Check for error conditions (missing FLTK, wrong
diff --git a/scripts/plot/daspect.m b/scripts/plot/daspect.m
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -12,26 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} daspect (@var{data_aspect_ratio})
+## @deftypefn  {Function File} {} daspect (@var{data_aspect_ratio})
 ## Set the data aspect ratio of the current axes.  The aspect ratio is
 ## a normalized 3-element vector representing the span of the x, y, and
 ## z-axes limits.
+##
 ## @deftypefnx {Function File} {@var{data_aspect_ratio} =} daspect ( )
 ## Return the data aspect ratio of the current axes.
+##
 ## @deftypefnx {Function File} {} daspect (@var{mode})
 ## Set the data aspect ratio mode of the current axes.
+##
 ## @deftypefnx {Function File} {@var{data_aspect_ratio_mode} =} daspect ("mode")
 ## Return the data aspect ratio mode of the current axes.
+##
 ## @deftypefnx {Function File} {} daspect (@var{hax}, @dots{})
 ## Uses the axes, with handle @var{hax}, instead of the current axes.
 ##
 ## @seealso{axis, pbaspect, xlim, ylim, zlim}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-01-26
diff --git a/scripts/plot/pbaspect.m b/scripts/plot/pbaspect.m
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -16,22 +16,26 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pbaspect (@var{plot_box_aspect_ratio})
 ## Set the plot box aspect ratio of the current axes.  The aspect ratio
 ## is a normalized 3-element vector representing the rendered lengths of
 ## the x, y, and z-axes.
+##
 ## @deftypefnx {Function File} {@var{plot_box_aspect_ratio} =} pbaspect ( )
 ## Return the plot box aspect ratio of the current axes.
+##
 ## @deftypefnx {Function File} {} pbaspect (@var{mode})
 ## Set the plot box aspect ratio mode of the current axes.
+##
 ## @deftypefnx {Function File} {@var{plot_box_aspect_ratio_mode} =} pbaspect ("mode")
 ## Return the plot box aspect ratio mode of the current axes.
+##
 ## @deftypefnx {Function File} {} pbaspect (@var{hax}, @dots{})
 ## Uses the axes, with handle @var{hax}, instead of the current axes.
 ##
 ## @seealso{axis, daspect, xlim, ylim, zlim}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-01-26
