# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1366763167 14400
#      Tue Apr 23 20:26:07 2013 -0400
# Node ID d50bca1cdc22372e899143563dc8ebacb9130471
# Parent  ce65326ecd6c0dc435ef0218686ab28cef625bdb
Support escaped characters in sq_strings for strsplit.m.

* scripts/strings/strsplit.m: Remove private function regexp2simple() and
replace with regexprep(). Apply do_string_escapes() to sq_strings. Improve
doc-string. Add tests.

diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -76,17 +76,23 @@
 ## Supported @var{name}/@var{value} pair arguments are;
 ##
 ## @itemize
 ## @item @var{collapsedelimiters} may take the value of @var{true} or @var{false}
 ## with the default being @var{false}.
 ## @item @var{delimitertype} may take the value of @code{legacy},
 ## @code{simple} or @code{regularexpression}.
 ## If @var{delimitertype} is equal to @code{legacy}, each individual
-## character of @var{del} is used to split the input.
+## character of @var{del} is used to split the input.  For both @code{simple}
+## and @code{regularexpression}, the string is split at the boundaries of the
+## delimiter string.  If @var{delimiter} is a cell-string, then the string
+## is split at the boundaries of each of the cells' strings.  @var{simple}
+## delimiters may contain escaped characters, but are otherwise treated as
+## literal strings.
+##
 ## If the specified delimiters are single characters, the default is
 ## @var{delimitertype} is @code{legacy}.  Otherwise the default
 ## @var{delimitertype} is @code{simple}.
 ## @end itemize
 ## 
 ## Example:
 ##
 ## @example
@@ -195,45 +201,47 @@ function [result, matches] = strsplit (s
   elseif (! ischar (str) || (! ischar (del) && ! iscellstr (del)))
     error ("strsplit: S and DEL must be string values");
   elseif (! isscalar (args.collapsedelimiters))
     error ("strsplit: COLLAPSEDELIMITERS must be a scalar value");
   endif
 
   if (strncmpi (args.delimitertype, "simple", length_deltype))
     if (iscellstr (del))
-      del = cellfun (@(x) regexp2simple (x, false), del, "uniformoutput",
-        false);
+      del = cellfun (@do_string_escapes, del, "uniformoutput", false);
     else
-      del = regexp2simple (del, false);
+      del = do_string_escapes (del);
     endif
+    del = regexprep (del, '([^\w])', '\\$1');
   endif
 
   if (rows (str) > 1)
     tmp = char (del(1));
     str = [str, repmat(tmp,rows(str),1)];
     str = reshape (str.', 1, numel (str));
     str(end-numel(tmp)+1:end) = [];
   endif
 
   if (isempty (str))
     result = {str};
   elseif (strncmpi (args.delimitertype, "legacy", length_deltype))
-    ## Conventional splitting is preserved for its speed.  Its delimiter type
-    ##
+    ## Legacy splitting is fast
     if (! ischar (del))
       if (iscell (del) && all (cellfun (@numel, del) < 2))
         del = [del{:}];
       else
         error ("strsplit:legacy_delimiter_must_be_char",
           "%s %s", "strsplit: for DELIMITERTYPE = ""legacy"" ", 
            "DEL must be a string, or a cell array scalar character elements.")
       endif
     endif
-    ## Split s according to delimiter
+    if (strcmp (typeinfo (del), "sq_string"))
+      del = do_string_escapes (del);
+    endif
+    ## Split str at each character contained in del
     if (isscalar (del))
       ## Single separator
       idx = find (str == del);
     else
       ## Multiple separators
       idx = strchr (str, del);
     endif
 
@@ -271,41 +279,22 @@ function [result, matches] = strsplit (s
     if (iscellstr (del))
       del = sprintf ('%s|', del{:});
       del(end) = [];
     endif
     if (args.collapsedelimiters)
       del = ["(", del, ")+"];
     endif
     [result, ~, ~, ~, matches] = regexp (str, del, "split");
-    if (strncmpi (args.delimitertype, "simple", length_deltype))
-      matches = cellfun (@(x) regexp2simple (x, true), matches,
-        "uniformoutput", false);
-    endif
   else
     error ("strsplit:invalid_delimitertype", 
       sprintf ("strsplit: Invalid DELIMITERTYPE"))
   endif
 endfunction
 
-function str = regexp2simple (str, reverse = false)
-  rep = {'\', '[', ']', '{', '}', '$', '^', '(', ')', '*', '+', '.', '?', '|'};
-  if (reverse)
-    ## backslash must go last
-    for r = numel(rep):-1:1
-      str = strrep (str, [char(92), rep{r}], rep{r});
-    endfor
-  else
-    ## backslash must go first
-    for r = 1:numel(rep)
-      str = strrep (str, rep{r}, [char(92), rep{r}]);
-    endfor
-  endif
-endfunction
-
 % Mimic the old strsplit()
 %!assert (cellfun (@numel, strsplit (["a,b,c";"1,2   "], ",")), [1 1 2 1 4])
 
 %!shared str
 %! str = "The rain in Spain stays mainly in the plain.";
 % Split on all whitespace.
 %!assert (strsplit (str), {"The", "rain", "in", "Spain", "stays", ...
 %! "mainly", "in", "the", "plain."})
@@ -350,16 +339,20 @@ endfunction
 
 %!assert (strsplit ("road to hell", " ", false, "delimitertype", "l"), {"road", "to", "hell"})
 %!assert (strsplit ("road to^hell", " ^", false, "delimitertype", "l"), {"road", "to", "hell"})
 %!assert (strsplit ("road   to--hell", " -", true, "delimitertype", "l"), {"road", "to", "hell"})
 %!assert (strsplit (["a,bc";",de"], ",", false, "delimitertype", "l"), {"a", "bc", char(ones(1,0)), "de "})
 %!assert (strsplit (["a,bc";",de"], ",", true, "delimitertype", "l"), {"a", "bc", "de "})
 %!assert (strsplit (["a,bc";",de"], ", ", true, "delimitertype", "l"), {"a", "bc", "de"})
 
+%!assert (strsplit ("foo\tbar", '\t', "delimitertype", "l"), {"foo", "bar"})
+%!assert (strsplit ("foo\tbar", '\t', "delimitertype", "r"), {"foo", "bar"})
+%!assert (strsplit ("foo\tbar", '\t', "delimitertype", "s"), {"foo", "bar"})
+
 ## Test "match" for consecutive delmiters
 %!test
 %! [a, m] = strsplit ("a\t \nb", '\s', 'delimitertype', 'regularexpression',
 %!   'collapsedelimiters', false);
 %! assert (a, {"a", "", "", "b"})
 %! assert (m, {"\t", " ", "\n"})
 %!test
 %! [a, m] = strsplit ("a\t \nb", '\s', false, 'delimitertype', 'regularexpression');
