# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1488124125 28800
#      Sun Feb 26 07:48:45 2017 -0800
# Node ID 3de5efeffb8669984dfc4e9411e36fd51e2eab27
# Parent  904c8a356e765fc5a7e276bf941d92116e3b979f
Eliminate compilation warnings related to clean_up_and_exit fcn (bug #50265).

* quit.h (octave_throw_exit_exception): New prototype.

* quit.cc (octave_throw_exit_exception): New function
* quit.cc (octave_rethrow_exception): Call octave_throw_exit_exception rather
than deprecated clean_up_and_exit.

diff --git a/liboctave/cruft/misc/quit.cc b/liboctave/cruft/misc/quit.cc
--- a/liboctave/cruft/misc/quit.cc
+++ b/liboctave/cruft/misc/quit.cc
@@ -80,16 +80,24 @@ octave_throw_bad_alloc (void)
     octave_bad_alloc_hook ();
 
   octave_exception_state = octave_alloc_exception;
 
   throw std::bad_alloc ();
 }
 
 void
+octave_throw_exit_exception (int exit_status, int safe_to_return)
+{
+  octave_exception_state = octave_quit_exception;
+
+  throw octave_exit_exception (exit_status, safe_to_return);
+}
+
+void
 octave_rethrow_exception (void)
 {
   if (octave_interrupt_state)
     {
       octave_interrupt_state = -1;
       octave_throw_interrupt_exception ();
     }
   else
@@ -100,17 +108,17 @@ octave_rethrow_exception (void)
           octave_throw_execution_exception ();
           break;
 
         case octave_alloc_exception:
           octave_throw_bad_alloc ();
           break;
 
         case octave_quit_exception:
-          clean_up_and_exit (octave_exit_exception_status,
-                             octave_exit_exception_safe_to_return);
+          octave_throw_exit_exception (octave_exit_exception_status,
+                                       octave_exit_exception_safe_to_return);
           break;
 
         default:
           break;
         }
     }
 }
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -184,16 +184,19 @@ OCTAVE_API extern volatile sig_atomic_t 
 OCTAVE_API extern void octave_handle_signal (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_interrupt_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_execution_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_bad_alloc (void);
 
+OCTAVE_NORETURN OCTAVE_API extern void
+octave_throw_exit_exception (int exit_status, int safe_to_return);
+
 OCTAVE_API extern void octave_rethrow_exception (void);
 
 #if defined (__cplusplus)
 
 OCTAVE_DEPRECATED ("see the Octave documentation for other options")
 extern OCTAVE_API void
 clean_up_and_exit (int exit_status, bool safe_to_return = false);
 
