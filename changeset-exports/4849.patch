# HG changeset patch
# User jwe
# Date 1081265115 0
#      Tue Apr 06 15:25:15 2004 +0000
# Node ID a3440ff5eb142f90ce09d29dd4a9d297f188d75d
# Parent  8122518935e43704a7725f277f65643acc5591fc
[project @ 2004-04-06 15:23:56 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-04-06  David Bateman  <dbateman@free.fr>
+
+	* statistics/base/var.m: Update for NDArrays.  Allow dimension arg.
+
 2004-04-02  David Bateman  <dbateman@free.fr>
 
 	* statistics/base/std.m: Allow optional args for type and dim.
 	* statistics/base/center.m, statistics/base/meansq.m,
 	statistics/base/moment.m, statistics/base/range.m:
 	Update for NDArrays.
 	* signal/fftshift.m: Fix dimensioning error.
 	
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -17,32 +17,59 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} var (@var{x})
 ## For vector arguments, return the (real) variance of the values.
 ## For matrix arguments, return a row vector contaning the variance for
 ## each column.
+##
+## The argument @var{opt} determines the type of normalization to use. Valid 
+## values are
+##
+## @table @asis 
+## @item 0:
+##   normalizes with N-1, provides the square root of best unbiased estimator
+##   of the variance [default]
+## @item 1:
+##   normalizes with N, this provides the square root of the second moment
+##   around the mean
+## @end table
+##
+## The third argument @var{dim} determines the dimension along which the 
+## variance is calculated.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Compute variance
 
-function y = var(x)
+function y = var (x, opt, dim)
 
-  if (nargin != 1)
-    usage ("var (x)");
+  if (nargin < 1 || nargin > 3)
+    usage ("var (x, opt, sim)");
+  endif
+  if (nargin < 3)
+    dim = min (find (size (x) > 1));
+    if (isempty (dim))
+      dim = 1;
+    endif
+  endif
+  if (nargin < 2 || isempty (opt))
+    opt = 0;
   endif
 
-  [nr, nc] = size (x);
-  if (nr == 0 || nc == 0)
+  sz = size (x);
+  if (prod (sz) < 1)
     error ("var: x must not be empty");
-  elseif ((nr == 1) && (nc == 1))
+  elseif (sz(dim) == 1)
     y = 0;
-  elseif ((nr == 1) || (nc == 1))
-    n = length (x);
-    y = sumsq (x - sum (x) / n) / (n - 1);
   else
-    y = sumsq (x - ones (nr, 1) * (sum (x) / nr) ) / (nr - 1);
+    rng = ones (1, length (sz));
+    rng (dim) = sz (dim);
+    if (opt == 0)
+      y = sumsq (x - repmat(mean (x, dim), rng), dim) / (sz(dim) - 1);
+    else
+      y = sumsq (x - repmat(mean (x, dim), rng), dim) / sz(dim);
+    endif
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-04-06  David Bateman  <dbateman@free.fr>
+
+	* DLD_FUNCTIONS/fftn.cc: Save result of transpose operation.
+	Check for failure of transpose.
+
 2004-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-bool.h (octave_bool::bool_array_value): New function.
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::subsasgn): Don't allow
 	expressions like x(i)(j) or x(i){j} when x is empty.
 
 	* load-save.cc (get_file_format): Error if file does not exist.
diff --git a/src/DLD-FUNCTIONS/fftn.cc b/src/DLD-FUNCTIONS/fftn.cc
--- a/src/DLD-FUNCTIONS/fftn.cc
+++ b/src/DLD-FUNCTIONS/fftn.cc
@@ -59,19 +59,19 @@ do_fftn (const octave_value_list &args, 
   for (int i = 0; i < dims.length (); i++)
     if (dims(i) < 0)
       return retval;
 
   if (nargin > 1)
     {
       Matrix val = args(1).matrix_value ();
       if (val.rows () > val.columns ())
-	val.transpose ();
+	val = val.transpose ();
 
-      if (val.columns () != dims.length () || val.rows () != 1)
+      if (error_state || val.columns () != dims.length () || val.rows () != 1)
 	error ("%s: second argument must be a vector of length dim", fcn);
       else
 	{
 	  for (int i = 0; i < dims.length (); i++)
 	    {
 	      if (xisnan (val(i,0)))
 		error ("%s: NaN is invalid as a dimension", fcn);
 	      else if (NINT (val(i,0)) < 0)
