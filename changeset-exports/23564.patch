# HG changeset patch
# User Rik <rik@octave.org>
# Date 1496962606 25200
#      Thu Jun 08 15:56:46 2017 -0700
# Node ID 7049da1648c01f0201af4cc679408d2dafab36d2
# Parent  614d71cdf6141515131f1fd9ff08fbdb8f0c1072
Deprecate octave::math::finite in favor of octave::math::isfinite.
New name matches is clearer about what function does as it matches both
Octave's m-file language and C++11.

* lo-mappers.h (isfinite): Declare new function isfinite for double, float, and
std::complex types.  Use OCTAVE_DEPRECATED macro for declarations of finite
function.  Replace uses of octave::math::finite with octave::math::isfinite.

* lo-mappers.cc (isfinite): Implement new function isfinite for double and float
types.
* lo-mappers.cc (finite): Delete function finite for double and float types.

* gl-render.cc, graphics.cc, graphics.in.h, ls-mat5.cc, pr-output.cc,
quadcc.cc, ov-complex.cc, ov-cx-sparse.cc, ov-float.cc, ov-flt-complex.cc,
ov-re-sparse.cc, ov-scalar.cc, CNDArray.cc, Range.h, dNDArray.cc, fCNDArray.cc,
fNDArray.cc, lo-specfun.cc, oct-rand.cc, mx-inlines.cc, lo-utils.cc:
Replace uses of octave::math::finite with octave::math::isfinite.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2415,24 +2415,24 @@ namespace octave
 
                     if (clip(j-1, i-1) || clip(j, i-1)
                         || clip(j-1, i) || clip(j, i))
                       continue;
 
                     if (fc_mode == FLAT)
                       {
                         // "flat" only needs color at lower-left vertex
-                        if (! octave::math::finite (c(j-1,i-1)))
+                        if (! octave::math::isfinite (c(j-1,i-1)))
                           continue;
                       }
                     else if (fc_mode == INTERP)
                       {
                         // "interp" needs valid color at all 4 vertices
-                        if (! (octave::math::finite (c(j-1, i-1)) && octave::math::finite (c(j, i-1))
-                               && octave::math::finite (c(j-1, i)) && octave::math::finite (c(j, i))))
+                        if (! (octave::math::isfinite (c(j-1, i-1)) && octave::math::isfinite (c(j, i-1))
+                               && octave::math::isfinite (c(j-1, i)) && octave::math::isfinite (c(j, i))))
                           continue;
                       }
 
                     if (x_mat)
                       {
                         j1 = j-1;
                         j2 = j;
                       }
@@ -2624,23 +2624,23 @@ namespace octave
                     for (int j = 1; j < zr; j++)
                       {
                         if (clip(j-1,i) || clip(j,i))
                           continue;
 
                         if (ec_mode == FLAT)
                           {
                             // "flat" only needs color at lower-left vertex
-                            if (! octave::math::finite (c(j-1,i)))
+                            if (! octave::math::isfinite (c(j-1,i)))
                               continue;
                           }
                         else if (ec_mode == INTERP)
                           {
                             // "interp" needs valid color at both vertices
-                            if (! (octave::math::finite (c(j-1, i)) && octave::math::finite (c(j, i))))
+                            if (! (octave::math::isfinite (c(j-1, i)) && octave::math::isfinite (c(j, i))))
                               continue;
                           }
 
                         if (x_mat)
                           {
                             j1 = j-1;
                             j2 = j;
                           }
@@ -2721,23 +2721,23 @@ namespace octave
                     for (int i = 1; i < zc; i++)
                       {
                         if (clip(j,i-1) || clip(j,i))
                           continue;
 
                         if (ec_mode == FLAT)
                           {
                             // "flat" only needs color at lower-left vertex
-                            if (! octave::math::finite (c(j,i-1)))
+                            if (! octave::math::isfinite (c(j,i-1)))
                               continue;
                           }
                         else if (ec_mode == INTERP)
                           {
                             // "interp" needs valid color at both vertices
-                            if (! (octave::math::finite (c(j, i-1)) && octave::math::finite (c(j, i))))
+                            if (! (octave::math::isfinite (c(j, i-1)) && octave::math::isfinite (c(j, i))))
                               continue;
                           }
 
                         if (y_mat)
                           {
                             i1 = i-1;
                             i2 = i;
                           }
@@ -2859,17 +2859,17 @@ namespace octave
                   continue;
 
                 if (x_mat)
                   j1 = j;
 
                 if ((do_edge && mecolor.is_empty ())
                     || (do_face && mfcolor.is_empty ()))
                   {
-                    if (! octave::math::finite (c(j,i)))
+                    if (! octave::math::isfinite (c(j,i)))
                       continue;  // Skip NaNs in color data
 
                     for (int k = 0; k < 3; k++)
                       cc(k) = c(j,i,k);
                   }
 
                 Matrix lc = (do_edge ? (mecolor.is_empty () ? cc : mecolor)
                                      : Matrix ());
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1484,17 +1484,17 @@ array_property::validate (const octave_v
               error ("set: \"%s\" must be less than %g",
                      get_name ().c_str (), maxval.first);
         }
 
       if (finite_constraint == NO_CHECK) { /* do nothing */ }
       else if (finite_constraint == FINITE)
         {
           for (octave_idx_type i = 0; i < v_mat.numel (); i++)
-            if (! octave::math::finite (v_mat(i)))
+            if (! octave::math::isfinite (v_mat(i)))
               error ("set: \"%s\" must be finite", get_name ().c_str ());
         }
       else if (finite_constraint == NOT_NAN)
         {
           for (octave_idx_type i = 0; i < v_mat.numel (); i++)
             if (octave::math::isnan (v_mat(i)))
               error ("set: \"%s\" must not be nan", get_name ().c_str ());
         }
@@ -6316,17 +6316,17 @@ max_axes_scale (double& s, Matrix& limit
 {
   if (tight)
     {
       double minval = octave::numeric_limits<double>::Inf ();
       double maxval = -octave::numeric_limits<double>::Inf ();
       double min_pos = octave::numeric_limits<double>::Inf ();
       double max_neg = -octave::numeric_limits<double>::Inf ();
       get_children_limits (minval, maxval, min_pos, max_neg, kids, limit_type);
-      if (octave::math::finite (minval) && octave::math::finite (maxval))
+      if (octave::math::isfinite (minval) && octave::math::isfinite (maxval))
         {
           limits(0) = minval;
           limits(1) = maxval;
           s = octave::math::max (s, (maxval - minval) / (pbfactor * dafactor));
         }
     }
   else
     s = octave::math::max (s, (limits(1) - limits(0)) / (pbfactor * dafactor));
@@ -6877,26 +6877,26 @@ axes::get_default (const caseless_str& p
 // FIXME: maybe this should go into array_property class?
 /*
 static void
 check_limit_vals (double& min_val, double& max_val,
                   double& min_pos, double& max_neg,
                   const array_property& data)
 {
   double val = data.min_val ();
-  if (octave::math::finite (val) && val < min_val)
+  if (octave::math::isfinite (val) && val < min_val)
     min_val = val;
   val = data.max_val ();
-  if (octave::math::finite (val) && val > max_val)
+  if (octave::math::isfinite (val) && val > max_val)
     max_val = val;
   val = data.min_pos ();
-  if (octave::math::finite (val) && val > 0 && val < min_pos)
+  if (octave::math::isfinite (val) && val > 0 && val < min_pos)
     min_pos = val;
   val = data.max_neg ();
-  if (octave::math::finite (val) && val < 0 && val > max_neg)
+  if (octave::math::isfinite (val) && val < 0 && val > max_neg)
     max_neg = val;
 }
 */
 
 static void
 check_limit_vals (double& min_val, double& max_val,
                   double& min_pos, double& max_neg,
                   const octave_value& data)
@@ -6905,29 +6905,29 @@ check_limit_vals (double& min_val, doubl
     {
       Matrix m = data.matrix_value ();
 
       if (m.numel () == 4)
         {
           double val;
 
           val = m(0);
-          if (octave::math::finite (val) && val < min_val)
+          if (octave::math::isfinite (val) && val < min_val)
             min_val = val;
 
           val = m(1);
-          if (octave::math::finite (val) && val > max_val)
+          if (octave::math::isfinite (val) && val > max_val)
             max_val = val;
 
           val = m(2);
-          if (octave::math::finite (val) && val > 0 && val < min_pos)
+          if (octave::math::isfinite (val) && val > 0 && val < min_pos)
             min_pos = val;
 
           val = m(3);
-          if (octave::math::finite (val) && val < 0 && val > max_neg)
+          if (octave::math::isfinite (val) && val < 0 && val > max_neg)
             max_neg = val;
         }
     }
 }
 
 // magform(x) Returns (a, b),
 // where x = a * 10^b, abs (a) >= 1., and b is integer.
 
@@ -7497,26 +7497,26 @@ axes::update_axis_limits (const std::str
 
   Matrix limits;
   double val;
 
 #define FIX_LIMITS                              \
   if (limits.numel () == 4)                     \
     {                                           \
       val = limits(0);                          \
-      if (octave::math::finite (val))           \
+      if (octave::math::isfinite (val))           \
         min_val = val;                          \
       val = limits(1);                          \
-      if (octave::math::finite (val))           \
+      if (octave::math::isfinite (val))           \
         max_val = val;                          \
       val = limits(2);                          \
-      if (octave::math::finite (val))           \
+      if (octave::math::isfinite (val))           \
         min_pos = val;                          \
       val = limits(3);                          \
-      if (octave::math::finite (val))           \
+      if (octave::math::isfinite (val))           \
         max_neg = val;                          \
     }                                           \
   else                                          \
     {                                           \
       limits.resize (4, 1);                     \
       limits(0) = min_val;                      \
       limits(1) = max_val;                      \
       limits(2) = min_pos;                      \
@@ -8849,26 +8849,26 @@ hggroup::update_axis_limits (const std::
     {
       limits = xproperties.get_alim ().matrix_value ();
       update_type = 'a';
     }
 
   if (limits.numel () == 4)
     {
       val = limits(0);
-      if (octave::math::finite (val))
+      if (octave::math::isfinite (val))
         min_val = val;
       val = limits(1);
-      if (octave::math::finite (val))
+      if (octave::math::isfinite (val))
         max_val = val;
       val = limits(2);
-      if (octave::math::finite (val))
+      if (octave::math::isfinite (val))
         min_pos = val;
       val = limits(3);
-      if (octave::math::finite (val))
+      if (octave::math::isfinite (val))
         max_neg = val;
     }
   else
     {
       limits.resize (4, 1);
       limits(0) = min_val;
       limits(1) = max_val;
       limits(2) = min_pos;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1235,17 +1235,17 @@ protected:
         else if (! maxval.second && maxval.first <= new_val)
           error ("set: \"%s\" must be less than %g",
                  get_name ().c_str (), maxval.first);
       }
 
       if (finite_constraint == NO_CHECK) { /* do nothing */ }
       else if (finite_constraint == FINITE)
         {
-          if (! octave::math::finite (new_val))
+          if (! octave::math::isfinite (new_val))
             error ("set: \"%s\" must be finite", get_name ().c_str ());
         }
       else if (finite_constraint == NOT_NAN)
         {
           if (octave::math::isnan (new_val))
             error ("set: \"%s\" must not be nan", get_name ().c_str ());
         }
       else if (finite_constraint == NOT_INF)
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -1890,17 +1890,17 @@ save_mat5_array_length (const double *va
 
       if (save_as_floats)
         {
           bool too_large_for_float = false;
           for (octave_idx_type i = 0; i < nel; i++)
             {
               double tmp = val[i];
 
-              if (octave::math::finite (tmp)
+              if (octave::math::isfinite (tmp)
                   && fabs (tmp) > std::numeric_limits<float>::max ())
                 {
                   too_large_for_float = true;
                   break;
                 }
             }
 
           if (! too_large_for_float)
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -503,17 +503,17 @@ pr_max_internal (const Matrix& m)
   double result = -std::numeric_limits<double>::max ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         double val = m(i,j);
-        if (! octave::math::finite (val))
+        if (! octave::math::isfinite (val))
           continue;
 
         all_inf_or_nan = false;
 
         if (val > result)
           result = val;
       }
 
@@ -532,17 +532,17 @@ pr_min_internal (const Matrix& m)
   double result = std::numeric_limits<double>::max ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         double val = m(i,j);
-        if (! octave::math::finite (val))
+        if (! octave::math::isfinite (val))
           continue;
 
         all_inf_or_nan = false;
 
         if (val < result)
           result = val;
       }
 
@@ -997,20 +997,20 @@ set_format (const Complex& c, int& r_fw,
   bool inf_or_nan = (octave::math::isinf (c) || octave::math::isnan (c));
 
   bool int_only = (octave::math::x_nint (rp) == rp
                    && octave::math::x_nint (ip) == ip);
 
   double r_abs = (rp < 0.0 ? -rp : rp);
   double i_abs = (ip < 0.0 ? -ip : ip);
 
-  int r_x = (! octave::math::finite (rp)
+  int r_x = (! octave::math::isfinite (rp)
              || r_abs == 0.0) ? 0 : num_digits (r_abs);
 
-  int i_x = (! octave::math::finite (ip)
+  int i_x = (! octave::math::isfinite (ip)
              || i_abs == 0.0) ? 0 : num_digits (i_abs);
 
   int x_max, x_min;
 
   if (r_x > i_x)
     {
       x_max = r_x;
       x_min = i_x;
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1687,17 +1687,17 @@ Mathematical Software, Vol. 37, Issue 3,
         {
           iv->fx[i] = effex(i);
           if (wrap)
             {
               xw = ex(i);
               iv->fx[i] *= (1.0 + xw * xw) * M_PI / 2;
             }
           neval++;
-          if (! octave::math::finite (iv->fx[i]))
+          if (! octave::math::isfinite (iv->fx[i]))
             {
               nans[nnans++] = i;
               iv->fx[i] = 0.0;
             }
         }
       Vinvfx (iv->fx, &(iv->c[idx[3]]), 3);
       Vinvfx (iv->fx, &(iv->c[idx[2]]), 2);
       Vinvfx (iv->fx, &(iv->c[0]), 0);
@@ -1803,17 +1803,17 @@ Mathematical Software, Vol. 37, Issue 3,
                     xw = ex(i);
                     iv->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[d])
             {
-              if (! octave::math::finite (iv->fx[i]))
+              if (! octave::math::isfinite (iv->fx[i]))
                 {
                   nans[nnans++] = i;
                   iv->fx[i] = 0.0;
                 }
             }
 
           // Compute the new coefficients.
           Vinvfx (iv->fx, &(iv->c[idx[d]]), d);
@@ -1940,17 +1940,17 @@ Mathematical Software, Vol. 37, Issue 3,
                     xw = ex(i);
                     ivl->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[0])
             {
-              if (! octave::math::finite (ivl->fx[i]))
+              if (! octave::math::isfinite (ivl->fx[i]))
                 {
                   nans[nnans++] = i;
                   ivl->fx[i] = 0.0;
                 }
             }
           Vinvfx (ivl->fx, ivl->c, 0);
           if (nnans > 0)
             {
@@ -2031,17 +2031,17 @@ Mathematical Software, Vol. 37, Issue 3,
                     xw = ex(i);
                     ivr->fx[j] *= (1.0 + xw * xw) * M_PI / 2;
                   }
               }
           }
           nnans = 0;
           for (i = 0; i <= 32; i += skip[0])
             {
-              if (! octave::math::finite (ivr->fx[i]))
+              if (! octave::math::isfinite (ivr->fx[i]))
                 {
                   nans[nnans++] = i;
                   ivr->fx[i] = 0.0;
                 }
             }
           Vinvfx (ivr->fx, ivr->c, 0);
           if (nnans > 0)
             {
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -516,17 +516,17 @@ octave_complex::map (unary_mapper_t umap
     SCALAR_MAPPER (round, octave::math::round);
     SCALAR_MAPPER (roundb, octave::math::roundb);
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, std::sin);
     SCALAR_MAPPER (sinh, std::sinh);
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
-    SCALAR_MAPPER (isfinite, octave::math::finite);
+    SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::is_NA);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -947,14 +947,14 @@ octave_sparse_complex_matrix::map (unary
     ARRAY_MAPPER (sin, Complex, std::sin);
     ARRAY_MAPPER (sinh, Complex, std::sinh);
     ARRAY_MAPPER (sqrt, Complex, std::sqrt);
     ARRAY_MAPPER (tan, Complex, std::tan);
     ARRAY_MAPPER (tanh, Complex, std::tanh);
     ARRAY_MAPPER (isnan, bool, octave::math::isnan);
     ARRAY_MAPPER (isna, bool, octave::math::is_NA);
     ARRAY_MAPPER (isinf, bool, octave::math::isinf);
-    ARRAY_MAPPER (isfinite, bool, octave::math::finite);
+    ARRAY_MAPPER (isfinite, bool, octave::math::isfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseComplexMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -391,17 +391,17 @@ octave_float_scalar::map (unary_mapper_t
     SCALAR_MAPPER (round, octave::math::round);
     SCALAR_MAPPER (roundb, octave::math::roundb);
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, ::sinf);
     SCALAR_MAPPER (sinh, ::sinhf);
     SCALAR_MAPPER (sqrt, octave::math::rc_sqrt);
     SCALAR_MAPPER (tan, ::tanf);
     SCALAR_MAPPER (tanh, ::tanhf);
-    SCALAR_MAPPER (isfinite, octave::math::finite);
+    SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::is_NA);
     SCALAR_MAPPER (isnan, octave::math::isnan);
     SCALAR_MAPPER (xsignbit, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -464,17 +464,17 @@ octave_float_complex::map (unary_mapper_
     SCALAR_MAPPER (round, octave::math::round);
     SCALAR_MAPPER (roundb, octave::math::roundb);
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, std::sin);
     SCALAR_MAPPER (sinh, std::sinh);
     SCALAR_MAPPER (sqrt, std::sqrt);
     SCALAR_MAPPER (tan, std::tan);
     SCALAR_MAPPER (tanh, std::tanh);
-    SCALAR_MAPPER (isfinite, octave::math::finite);
+    SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::is_NA);
     SCALAR_MAPPER (isnan, octave::math::isnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -938,14 +938,14 @@ octave_sparse_matrix::map (unary_mapper_
     ARRAY_MAPPER (sin, double, ::sin);
     ARRAY_MAPPER (sinh, double, ::sinh);
     ARRAY_MAPPER (sqrt, Complex, octave::math::rc_sqrt);
     ARRAY_MAPPER (tan, double, ::tan);
     ARRAY_MAPPER (tanh, double, ::tanh);
     ARRAY_MAPPER (isnan, bool, octave::math::isnan);
     ARRAY_MAPPER (isna, bool, octave::math::is_NA);
     ARRAY_MAPPER (isinf, bool, octave::math::isinf);
-    ARRAY_MAPPER (isfinite, bool, octave::math::finite);
+    ARRAY_MAPPER (isfinite, bool, octave::math::isfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -412,17 +412,17 @@ octave_scalar::map (unary_mapper_t umap)
     SCALAR_MAPPER (round, octave::math::round);
     SCALAR_MAPPER (roundb, octave::math::roundb);
     SCALAR_MAPPER (signum, octave::math::signum);
     SCALAR_MAPPER (sin, ::sin);
     SCALAR_MAPPER (sinh, ::sinh);
     SCALAR_MAPPER (sqrt, octave::math::rc_sqrt);
     SCALAR_MAPPER (tan, ::tan);
     SCALAR_MAPPER (tanh, ::tanh);
-    SCALAR_MAPPER (isfinite, octave::math::finite);
+    SCALAR_MAPPER (isfinite, octave::math::isfinite);
     SCALAR_MAPPER (isinf, octave::math::isinf);
     SCALAR_MAPPER (isna, octave::math::is_NA);
     SCALAR_MAPPER (isnan, octave::math::isnan);
     SCALAR_MAPPER (xsignbit, octave::math::signbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
diff --git a/liboctave/array/CNDArray.cc b/liboctave/array/CNDArray.cc
--- a/liboctave/array/CNDArray.cc
+++ b/liboctave/array/CNDArray.cc
@@ -725,17 +725,17 @@ boolNDArray
 ComplexNDArray::isinf (void) const
 {
   return do_mx_unary_map<bool, Complex, octave::math::isinf> (*this);
 }
 
 boolNDArray
 ComplexNDArray::isfinite (void) const
 {
-  return do_mx_unary_map<bool, Complex, octave::math::finite> (*this);
+  return do_mx_unary_map<bool, Complex, octave::math::isfinite> (*this);
 }
 
 ComplexNDArray
 conj (const ComplexNDArray& a)
 {
   return do_mx_unary_map<Complex, Complex, std::conj<double>> (a);
 }
 
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -57,18 +57,18 @@ public:
     rng_limit = limit_internal ();
   }
 
   // For operators' usage (to preserve element count).
   Range (double b, double i, octave_idx_type n)
     : rng_base (b), rng_limit (b + (n-1) * i), rng_inc (i),
       rng_numel (n), cache ()
   {
-    if (! octave::math::finite (b) || ! octave::math::finite (i)
-        || ! octave::math::finite (rng_limit))
+    if (! octave::math::isfinite (b) || ! octave::math::isfinite (i)
+        || ! octave::math::isfinite (rng_limit))
       rng_numel = -2;
     else
       {
         // Code below is only needed if the resulting range must be 100%
         // correctly constructed.  If the Range object created is only
         // a temporary one used by operators this may be unnecessary.
 
         rng_limit = limit_internal ();
@@ -153,18 +153,18 @@ private:
 
 protected:
 
   // For operators' usage (to allow all values to be set directly).
   Range (double b, double l, double i, octave_idx_type n)
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_numel (n), cache ()
   {
-    if (! octave::math::finite (b) || ! octave::math::finite (i)
-        || ! octave::math::finite (l))
+    if (! octave::math::isfinite (b) || ! octave::math::isfinite (i)
+        || ! octave::math::isfinite (l))
       rng_numel = -2;
   }
 };
 
 extern OCTAVE_API Range operator - (const Range& r);
 
 extern OCTAVE_API Range operator + (double x, const Range& r);
 
diff --git a/liboctave/array/dNDArray.cc b/liboctave/array/dNDArray.cc
--- a/liboctave/array/dNDArray.cc
+++ b/liboctave/array/dNDArray.cc
@@ -817,17 +817,17 @@ boolNDArray
 NDArray::isinf (void) const
 {
   return do_mx_unary_map<bool, double, octave::math::isinf> (*this);
 }
 
 boolNDArray
 NDArray::isfinite (void) const
 {
-  return do_mx_unary_map<bool, double, octave::math::finite> (*this);
+  return do_mx_unary_map<bool, double, octave::math::isfinite> (*this);
 }
 
 void
 NDArray::increment_index (Array<octave_idx_type>& ra_idx,
                           const dim_vector& dimensions,
                           int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
diff --git a/liboctave/array/fCNDArray.cc b/liboctave/array/fCNDArray.cc
--- a/liboctave/array/fCNDArray.cc
+++ b/liboctave/array/fCNDArray.cc
@@ -731,17 +731,17 @@ boolNDArray
 FloatComplexNDArray::isinf (void) const
 {
   return do_mx_unary_map<bool, FloatComplex, octave::math::isinf> (*this);
 }
 
 boolNDArray
 FloatComplexNDArray::isfinite (void) const
 {
-  return do_mx_unary_map<bool, FloatComplex, octave::math::finite> (*this);
+  return do_mx_unary_map<bool, FloatComplex, octave::math::isfinite> (*this);
 }
 
 FloatComplexNDArray
 conj (const FloatComplexNDArray& a)
 {
   return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float>> (a);
 }
 
diff --git a/liboctave/array/fNDArray.cc b/liboctave/array/fNDArray.cc
--- a/liboctave/array/fNDArray.cc
+++ b/liboctave/array/fNDArray.cc
@@ -780,17 +780,17 @@ boolNDArray
 FloatNDArray::isinf (void) const
 {
   return do_mx_unary_map<bool, float, octave::math::isinf> (*this);
 }
 
 boolNDArray
 FloatNDArray::isfinite (void) const
 {
-  return do_mx_unary_map<bool, float, octave::math::finite> (*this);
+  return do_mx_unary_map<bool, float, octave::math::isfinite> (*this);
 }
 
 void
 FloatNDArray::increment_index (Array<octave_idx_type>& ra_idx,
                                const dim_vector& dimensions,
                                int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -350,27 +350,27 @@ namespace octave
 #if defined (HAVE_CMATH_ISNANF)
       return std::isnan (x);
 #else
       return lo_ieee_isnan (x);
 #endif
     }
 
     bool
-    finite (double x)
+    isfinite (double x)
     {
 #if defined (HAVE_CMATH_ISFINITE)
       return std::isfinite (x);
 #else
       return lo_ieee_finite (x);
 #endif
     }
 
     bool
-    finite (float x)
+    isfinite (float x)
     {
 #if defined (HAVE_CMATH_ISFINITEF)
       return std::isfinite (x);
 #else
       return lo_ieee_finite (x);
 #endif
     }
 
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -227,41 +227,54 @@ namespace octave
 
     template <typename T>
     bool
     isnan (const std::complex<T>& x)
     {
       return (isnan (std::real (x)) || isnan (std::imag (x)));
     }
 
-    extern OCTAVE_API bool finite (double x);
-    extern OCTAVE_API bool finite (float x);
+    extern OCTAVE_API bool isfinite (double x);
+    extern OCTAVE_API bool isfinite (float x);
 
     template <typename T>
     bool
+    isfinite (const std::complex<T>& x)
+    {
+      return (isfinite (std::real (x)) && isfinite (std::imag (x)));
+    }
+
+    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    inline bool finite (double x) { return octave::math::isfinite (x); }
+    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    inline bool finite (float x) { return octave::math::isfinite (x); }
+
+    template <typename T>
+    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    bool
     finite (const std::complex<T>& x)
     {
-      return (finite (std::real (x)) && finite (std::imag (x)));
+      return octave::math::isfinite (x);
     }
 
     extern OCTAVE_API bool isinf (double x);
     extern OCTAVE_API bool isinf (float x);
 
     template <typename T>
     bool
     isinf (const std::complex<T>& x)
     {
       return (isinf (std::real (x)) || isinf (std::imag (x)));
     }
 
     // Some useful tests, that are commonly repeated.
     // Test for a finite integer.
 
-    inline bool isinteger (double x) { return finite (x) && x == round (x); }
-    inline bool isinteger (float x) { return finite (x) && x == round (x); }
+    inline bool isinteger (double x) { return isfinite (x) && x == round (x); }
+    inline bool isinteger (float x) { return isfinite (x) && x == round (x); }
 
     inline double
     signum (double x)
     {
       double tmp = 0.0;
 
       if (x < 0.0)
         tmp = -1.0;
@@ -302,23 +315,23 @@ namespace octave
     x_nint (T x)
     {
       return x;
     }
 
     template <>
     inline double x_nint (double x)
     {
-      return (finite (x) ? floor (x + 0.5) : x);
+      return (isfinite (x) ? floor (x + 0.5) : x);
     }
 
     template <>
     inline float x_nint (float x)
     {
-      return (finite (x) ? floor (x + 0.5f) : x);
+      return (isfinite (x) ? floor (x + 0.5f) : x);
     }
 
     extern OCTAVE_API octave_idx_type nint_big (double x);
     extern OCTAVE_API octave_idx_type nint_big (float x);
 
     extern OCTAVE_API int nint (double x);
     extern OCTAVE_API int nint (float x);
 
@@ -747,27 +760,27 @@ inline bool xisnan (float x) { return oc
 template <typename T>
 OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
 bool
 xisnan (const std::complex<T>& x)
 {
   return octave::math::isnan (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::finite' instead")
-inline bool xfinite (double x) { return octave::math::finite (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::finite' instead")
-inline bool xfinite (float x) { return octave::math::finite (x); }
+OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+inline bool xfinite (double x) { return octave::math::isfinite (x); }
+OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+inline bool xfinite (float x) { return octave::math::isfinite (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::finite' instead")
+OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
 bool
 xfinite (const std::complex<T>& x)
 {
-  return octave::math::finite (x);
+  return octave::math::isfinite (x);
 }
 
 OCTAVE_DEPRECATED ("use 'octave::math::isinf' instead")
 inline bool xisinf (double x) { return octave::math::isinf (x); }
 OCTAVE_DEPRECATED ("use 'octave::math::isinf' instead")
 inline bool xisinf (float x) { return octave::math::isinf (x); }
 
 template <typename T>
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -636,17 +636,17 @@ namespace octave
       return retval;
     }
 
     template <typename T>
     T
     xcbrt (T x)
     {
       static const T one_third = 0.3333333333333333333f;
-      if (octave::math::finite (x))
+      if (octave::math::isfinite (x))
         {
           // Use pow.
           T y = std::pow (std::abs (x), one_third) * signum (x);
           // Correct for better accuracy.
           return (x / (y*y) + y + y) / 3;
         }
       else
         return x;
diff --git a/liboctave/numeric/oct-rand.cc b/liboctave/numeric/oct-rand.cc
--- a/liboctave/numeric/oct-rand.cc
+++ b/liboctave/numeric/oct-rand.cc
@@ -320,28 +320,28 @@ octave_rand::do_scalar (double a)
           F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, retval);
           break;
 
         case expon_dist:
           F77_FUNC (dgenexp, DGENEXP) (1.0, retval);
           break;
 
         case poisson_dist:
-          if (a < 0.0 || ! octave::math::finite (a))
+          if (a < 0.0 || ! octave::math::isfinite (a))
             retval = octave::numeric_limits<double>::NaN ();
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
               F77_FUNC (dignpoi, DIGNPOI) (a + 1, retval);
               F77_FUNC (dignpoi, DIGNPOI) (a, retval);
             }
           break;
 
         case gamma_dist:
-          if (a <= 0.0 || ! octave::math::finite (a))
+          if (a <= 0.0 || ! octave::math::isfinite (a))
             retval = octave::numeric_limits<double>::NaN ();
           else
             F77_FUNC (dgengam, DGENGAM) (1.0, a, retval);
           break;
 
         default:
           (*current_liboctave_error_handler)
             ("rand: invalid distribution ID = %d", current_distribution);
@@ -403,28 +403,28 @@ octave_rand::do_float_scalar (float a)
           F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, dretval);
           break;
 
         case expon_dist:
           F77_FUNC (dgenexp, DGENEXP) (1.0, dretval);
           break;
 
         case poisson_dist:
-          if (da < 0.0 || ! octave::math::finite (a))
+          if (da < 0.0 || ! octave::math::isfinite (a))
             dretval = octave::numeric_limits<double>::NaN ();
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
               F77_FUNC (dignpoi, DIGNPOI) (da + 1, dretval);
               F77_FUNC (dignpoi, DIGNPOI) (da, dretval);
             }
           break;
 
         case gamma_dist:
-          if (da <= 0.0 || ! octave::math::finite (a))
+          if (da <= 0.0 || ! octave::math::isfinite (a))
             dretval = octave::numeric_limits<double>::NaN ();
           else
             F77_FUNC (dgengam, DGENGAM) (1.0, da, dretval);
           break;
 
         default:
           (*current_liboctave_error_handler)
             ("rand: invalid distribution ID = %d", current_distribution);
@@ -634,17 +634,17 @@ octave_rand::get_dist_id (const std::str
 // 2) NaN, Inf are translated to 2^32-1.
 // 3) -Inf is translated to 0.
 static uint32_t
 double2uint32 (double d)
 {
   uint32_t u;
   static const double TWOUP32 = std::numeric_limits<uint32_t>::max() + 1.0;
 
-  if (! octave::math::finite (d))
+  if (! octave::math::isfinite (d))
     u = 0;
   else
     {
       d = fmod (d, TWOUP32);
       if (d < 0)
         d += TWOUP32;
       u = static_cast<uint32_t> (d);
     }
@@ -732,17 +732,17 @@ octave_rand::fill (octave_idx_type len, 
         }
       else
         oct_fill_rande (len, v);
       break;
 
     case poisson_dist:
       if (use_old_generators)
         {
-          if (a < 0.0 || ! octave::math::finite (a))
+          if (a < 0.0 || ! octave::math::isfinite (a))
 #define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
             MAKE_RAND (len);
 #undef RAND_FUNC
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
               double tmp;
               F77_FUNC (dignpoi, DIGNPOI) (a + 1, tmp);
@@ -753,17 +753,17 @@ octave_rand::fill (octave_idx_type len, 
         }
       else
         oct_fill_randp (a, len, v);
       break;
 
     case gamma_dist:
       if (use_old_generators)
         {
-          if (a <= 0.0 || ! octave::math::finite (a))
+          if (a <= 0.0 || ! octave::math::isfinite (a))
 #define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
             MAKE_RAND (len);
 #undef RAND_FUNC
           else
 #define RAND_FUNC(x) F77_FUNC (dgengam, DGENGAM) (1.0, a, x)
             MAKE_RAND (len);
 #undef RAND_FUNC
         }
@@ -822,17 +822,17 @@ octave_rand::fill (octave_idx_type len, 
       else
         oct_fill_float_rande (len, v);
       break;
 
     case poisson_dist:
       if (use_old_generators)
         {
           double da = a;
-          if (da < 0.0 || ! octave::math::finite (a))
+          if (da < 0.0 || ! octave::math::isfinite (a))
 #define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
             MAKE_RAND (len);
 #undef RAND_FUNC
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
               double tmp;
               F77_FUNC (dignpoi, DIGNPOI) (da + 1, tmp);
@@ -844,17 +844,17 @@ octave_rand::fill (octave_idx_type len, 
       else
         oct_fill_float_randp (a, len, v);
       break;
 
     case gamma_dist:
       if (use_old_generators)
         {
           double da = a;
-          if (da <= 0.0 || ! octave::math::finite (a))
+          if (da <= 0.0 || ! octave::math::isfinite (a))
 #define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
             MAKE_RAND (len);
 #undef RAND_FUNC
           else
 #define RAND_FUNC(x) F77_FUNC (dgengam, DGENGAM) (1.0, da, x)
             MAKE_RAND (len);
 #undef RAND_FUNC
         }
diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -265,17 +265,17 @@ mx_inline_any_nan (size_t n, const T *x)
 }
 
 template <typename T>
 inline bool
 mx_inline_all_finite (size_t n, const T *x)  throw ()
 {
   for (size_t i = 0; i < n; i++)
     {
-      if (! octave::math::finite (x[i]))
+      if (! octave::math::isfinite (x[i]))
         return false;
     }
 
   return true;
 }
 
 template <typename T>
 inline bool
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -45,17 +45,17 @@ bool xis_int_or_inf_or_nan (double x)
 bool xis_one_or_zero (double x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (double x)
 { return x == 0; }
 
 bool xtoo_large_for_float (double x)
 {
-  return (octave::math::finite (x)
+  return (octave::math::isfinite (x)
           && fabs (x) > std::numeric_limits<float>::max ());
 }
 
 bool xtoo_large_for_float (const Complex& x)
 {
   return (xtoo_large_for_float (x.real ())
           || xtoo_large_for_float (x.imag ()));
 }
