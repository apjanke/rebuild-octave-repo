# HG changeset patch
# User jwe
# Date 1038205220 0
#      Mon Nov 25 06:20:20 2002 +0000
# Node ID ffa7148af6eedbdc7f90c6fd68cff24ac0ac039d
# Parent  df4f83ee8ac329cafeb130b053799b85a8b8338f
[project @ 2002-11-25 06:19:46 by jwe]

diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -185,19 +185,19 @@ mostlyclean clean:
 	octave.log octave.toc \
 	munge-texi$(BUILD_EXEEXT) munge-texi.o Map-s.o
 .PHONY: mostlyclean clean
 
 distclean: clean
 	rm -f Makefile 
 .PHONY: distclean
 
-maintainer-clean: distclean
+maintainer-clean: distclean clean-texi
 	rm -f tags TAGS octave.info octave.info-* octave.dvi octave.ps
-	rm -f octave_*.html $(TEXINFO)
+	rm -f octave_*.html
 .PHONY: maintainer-clean
 
 clean-texi:
 	rm -f $(SUB_TEXINFO)
 .PHONY: clean-texi
 
 dist: clean-texi all
 	ln $(DISTFILES) ../../`cat ../../.fname`/doc/interpreter
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -197,17 +197,18 @@ OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAV
   $(SPECIAL_MATH_LIB) $(LIBCRUFT) \
   $(LIBPLPLOT) $(LIBGLOB) $(LIBDLFCN)
 
 ifneq ($INCLUDE_LINK_DEPS), true)
 OCTAVE_LIBS += $(LIBKPATHSEA)
 endif
 
 ifeq ($(INCLUDE_LINK_DEPS),true)
-  OCTINTERP_LINK_DEPS = -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT)
+  OCTINTERP_LINK_DEPS = \
+    -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT) $(FLIBS)
   OCT_LINK_DEPS = \
     -L../libcruft $(LIBCRUFT) -L../liboctave $(LIBOCTAVE) \
     -L. $(LIBOCTINTERP) $(BLAS_LIBS) $(FFTW_LIBS) $(FLIBS)
 endif
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
 	DOCSTRINGS mkbuiltins mk-oct-links \
 	defaults.h.in oct-conf.h.in octave.gperf oct-gperf.h \
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -106,35 +106,42 @@ tree_statement::eval (bool silent, int n
 	{
 	  expr->set_print_flag (pf);
 
 	  // XXX FIXME XXX -- maybe all of this should be packaged in
 	  // one virtual function that returns a flag saying whether
 	  // or not the expression will take care of binding ans and
 	  // printing the result.
 
+	  // XXX FIXME XXX -- it seems that we should just have to
+	  // call expr->rvalue () and that should take care of
+	  // everything, binding ans as necessary?
+
 	  bool do_bind_ans = false;
 
+	  bool script_file_executed = false;
+
 	  if (expr->is_identifier ())
 	    {
-	      bool script_file_executed = false;
-
 	      tree_identifier *id = static_cast<tree_identifier *> (expr);
 
-	      id->do_lookup (script_file_executed, false);
+	      id->do_lookup (script_file_executed, true);
 
 	      do_bind_ans = id->is_function ();
 	    }
 	  else
 	    do_bind_ans = (! expr->is_assignment_expression ());
 
-	  retval = expr->rvalue (nargout);
+	  if (! script_file_executed)
+	    {
+	      retval = expr->rvalue (nargout);
 
-	  if (do_bind_ans && ! (error_state || retval.empty ()))
-	    bind_ans (retval(0), pf);
+	      if (do_bind_ans && ! (error_state || retval.empty ()))
+		bind_ans (retval(0), pf);
+	    }
 	}
 
       unwind_protect::run ();
     }
 
   return retval;
 }
 
