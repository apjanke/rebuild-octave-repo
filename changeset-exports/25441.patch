# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528496857 14400
#      Fri Jun 08 18:27:37 2018 -0400
# Node ID 143007dad8648fe2510f85db3daabab6d47f6f22
# Parent  893344cee10096194206a9a5e328e5d8d1db7cea
store reference instead of pointer to interpreter in lexer

* lex.h (base_lexer::m_interpreter): Now reference instead of pointer.
In lexer constructors, require interpreter argument.  Change all uses.

* parse.h, oct-parse.in.yy: In parser constructors, require
interpreter argument.  Change all uses.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -860,17 +860,17 @@ namespace octave
         frame.add_method (app, &octave::application::forced_interactive,
                           app->forced_interactive ());
 
         app->interactive (true);
 
         app->forced_interactive (true);
       }
 
-    octave::parser curr_parser;
+    octave::parser curr_parser (m_interpreter);
 
     while (Vdebugging)
       {
         try
           {
             Vtrack_line_num = false;
 
             reset_error_handler ();
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -208,17 +208,18 @@ namespace octave
   // Currently allows conditions with side-effects, like 'y+=10' and 'y++';
   // it is odd that the former is not flagged by "is_assignment_expression".
   // Throws an exception if not valid.
 
   bool bp_table::condition_valid (const std::string& cond)
   {
     if (cond.length () > 0)
       {
-        parser parser (cond + " ;"); // ; to reject partial expr like "y=="
+        // ; to reject partial expr like "y=="
+        parser parser (cond + " ;", m_evaluator.get_interpreter ());
         parser.reset ();
         int parse_status = parser.run ();
         if (parse_status)
           error ("dbstop: Cannot parse condition '%s'", cond.c_str ());
         else
           {
             tree_statement *stmt = nullptr;
             if (! parser.m_stmt_list)
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -575,17 +575,17 @@ namespace octave
         m_comment_list = nullptr;
       }
 
     private:
 
       comment_list *m_comment_list;
     };
 
-    base_lexer (interpreter *interp = nullptr)
+    base_lexer (interpreter& interp)
       : lexical_feedback (), m_scanner (nullptr), m_input_buf (),
         m_comment_buf (), m_interpreter (interp)
     {
       init ();
     }
 
     // No copying!
 
@@ -682,17 +682,17 @@ namespace octave
 
     // Object that reads and buffers input.
     input_buffer m_input_buf;
 
     // Object that collects comment text.
     comment_buffer m_comment_buf;
 
     // Interpreter that contains us, if any.
-    interpreter *m_interpreter;
+    interpreter& m_interpreter;
 
     virtual void increment_promptflag (void) = 0;
 
     virtual void decrement_promptflag (void) = 0;
 
     virtual int promptflag (void) const = 0;
 
     virtual int promptflag (int) = 0;
@@ -749,25 +749,25 @@ namespace octave
     std::stack<int> start_state_stack;
   };
 
   class
   lexer : public base_lexer
   {
   public:
 
-    lexer (interpreter *interp = nullptr)
+    lexer (interpreter& interp)
       : base_lexer (interp), m_reader (this)
     { }
 
-    lexer (FILE *file, interpreter *interp = nullptr)
+    lexer (FILE *file, interpreter& interp)
       : base_lexer (interp), m_reader (file, this)
     { }
 
-    lexer (const std::string& eval_string, interpreter *interp = nullptr)
+    lexer (const std::string& eval_string, interpreter& interp)
       : base_lexer (interp), m_reader (eval_string, this)
     { }
 
     // No copying!
 
     lexer (const lexer&) = delete;
 
     lexer& operator = (const lexer&) = delete;
@@ -812,36 +812,35 @@ namespace octave
     input_reader m_reader;
   };
 
   class
   push_lexer : public base_lexer
   {
   public:
 
-    push_lexer (interpreter *interp = nullptr)
+    push_lexer (interpreter& interp)
       : base_lexer (interp), m_pflag (1)
     {
       append_input ("", false);
     }
 
-    push_lexer (const std::string& input, interpreter *interp = nullptr)
+    push_lexer (const std::string& input, interpreter& interp)
       : base_lexer (interp), m_pflag (1)
     {
       append_input (input, false);
     }
 
-    push_lexer (bool eof, interpreter *interp = nullptr)
+    push_lexer (bool eof, interpreter& interp)
       : base_lexer (interp), m_pflag (1)
     {
       append_input ("", eof);
     }
 
-    push_lexer (const std::string& input, bool eof,
-                interpreter *interp = nullptr)
+    push_lexer (const std::string& input, bool eof, interpreter& interp)
       : base_lexer (interp), m_pflag (1)
     {
       append_input (input, eof);
     }
 
     // No copying!
 
     push_lexer (const push_lexer&) = delete;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4511,17 +4511,20 @@ parse_fcn_file (const std::string& full_
 
   if (! full_file.empty ())
     ffile = std::fopen (full_file.c_str (), "rb");
 
   if (ffile)
     {
       frame.add_fcn (safe_fclose, ffile);
 
-      octave::parser parser (ffile);
+      octave::interpreter& interp
+        = octave::__get_interpreter__ ("parse_fcn_file");
+
+      octave::parser parser (ffile, interp);
 
       parser.m_curr_class_name = dispatch_type;
       parser.m_curr_package_name = package_name;
       parser.m_autoloading = autoload;
       parser.m_fcn_file_from_relative_lookup = relative_lookup;
 
       parser.m_lexer.m_force_script = force_script;
       parser.m_lexer.prep_for_file ();
@@ -4545,19 +4548,16 @@ parse_fcn_file (const std::string& full_
               // meta.class info (and stash it in the symbol
               // table?).  Return pointer to constructor?
 
               if (fcn_ptr)
                 panic_impossible ();
 
               bool is_at_folder = ! dispatch_type.empty ();
 
-              octave::interpreter& interp
-                = octave::__get_interpreter__ ("parse_fcn_file");
-
               try
                 {
                   fcn_ptr = parser.m_classdef_object->make_meta_class (interp, is_at_folder);
                 }
               catch (const octave::execution_exception&)
                 {
                   delete parser.m_classdef_object;
                   throw;
@@ -5384,17 +5384,17 @@ builtin ("sin", 0)
 namespace octave
 {
   octave_value_list
   eval_string (const std::string& eval_str, bool silent,
                int& parse_status, int nargout)
   {
     octave_value_list retval;
 
-    parser parser (eval_str);
+    parser parser (eval_str, __get_interpreter__ ("eval_string"));
 
     do
       {
         parser.reset ();
 
         parse_status = parser.run ();
 
         if (parse_status == 0)
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -481,26 +481,26 @@ namespace octave
     // Internal state of the Bison parser.
     void *m_parser_state;
   };
 
   class parser : public base_parser
   {
   public:
 
-    parser (void)
-      : base_parser (*(new lexer ()))
+    parser (interpreter& interp)
+      : base_parser (*(new lexer (interp)))
     { }
 
-    parser (FILE *file)
-      : base_parser (*(new lexer (file)))
+    parser (FILE *file, interpreter& interp)
+      : base_parser (*(new lexer (file, interp)))
     { }
 
-    parser (const std::string& eval_string)
-      : base_parser (*(new lexer (eval_string)))
+    parser (const std::string& eval_string, interpreter& interp)
+      : base_parser (*(new lexer (eval_string, interp)))
     { }
 
     parser (lexer& lxr)
       : base_parser (lxr)
     { }
 
     // No copying!
 
@@ -512,18 +512,18 @@ namespace octave
 
     int run (void);
   };
 
   class push_parser : public base_parser
   {
   public:
 
-    push_parser (void)
-      : base_parser (*(new push_lexer ()))
+    push_parser (interpreter& interp)
+      : base_parser (*(new push_lexer (interp)))
     { }
 
     // No copying!
 
     push_parser (const push_parser&) = delete;
 
     push_parser& operator = (const push_parser&) = delete;
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -72,17 +72,19 @@ namespace octave
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   int tree_evaluator::repl (bool interactive)
   {
     int retval = 0;
 
-    lexer *lxr = (interactive ? new lexer () : new lexer (stdin));
+    lexer *lxr = (interactive
+                  ? new lexer (m_interpreter)
+                  : new lexer (stdin, m_interpreter));
 
     parser parser (*lxr);
 
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     do
       {
         try
