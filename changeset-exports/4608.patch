# HG changeset patch
# User jwe
# Date 1068782104 0
#      Fri Nov 14 03:55:04 2003 +0000
# Node ID 22ca4cc02525a5e5257616694b125c799080e0cb
# Parent  eb84ffc19e449b49c394aa655e630873c96013ef
[project @ 2003-11-14 03:55:04 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 2003-11-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-file.h (octave_file::all, octave_file::any,
+	octave_file::dims, octave_file::is_real_type,
+	octave_file::ist_real_scalar): New functions.
+
+	* lex.l (bracket_brace_paren_nesting_level::is_bracket_or_brace):
+	New function.
+	(handle_close_bracket): New arg, bracket_type.  Change all uses.
+	Return bool, not int.  First arg is now bool.
+	(<MATRIX_START>{SNLCMT}*\}{S}*): New pattern.
+	(maybe_unput_comma): Handle brace nesting level the same as brackets.
+	(handle_close_brace): Likewise.
+	(<MATRIX_START>{S}+): Likewise.
+	(<MATRIX_START>{S}*{COMMENT}{SNLCMT}*): Likewise.
+	(<MATRIX_START>{S}*{NL}{SNLCMT}*): Likewise.
+	({NL}): Likewise.
+	({CCHAR}): Likewise.
+	(")"): Likewise.
+	(\{{S}*): Handle the same as \[{S}*.
+	("}"): Handle the same as \].
+
 	* Makefile.in (stamp-prereq): Add oct-gperf.h, parse.cc, and
 	lex.cc to the list.
 
 2003-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cell.cc (print_as_scalar): New function.
 	* ov-cell.h: Provide decl.
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -117,16 +117,20 @@ public:
   void brace (void) {  context.push (BRACE); }
   bool is_brace (void)
     { return ! context.empty () && context.top () == BRACE; }
 
   void paren (void) {  context.push (PAREN); }
   bool is_paren (void)
     { return ! context.empty () && context.top () == PAREN; }
 
+  bool is_bracket_or_brace (void)
+    { return (! context.empty ()
+	      && (context.top () == BRACKET || context.top () == BRACE)); }
+
   bool none (void) { return context.empty (); }
 
   void remove (void) { if (! context.empty ()) context.pop (); }
 
   void clear (void) { while (! context.empty ()) context.pop (); }
 
 private:
 
@@ -162,17 +166,17 @@ static symbol_record *lookup_identifier 
 static std::string grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
-static int handle_close_bracket (int spc_gobbled);
+static char handle_close_bracket (bool spc_gobbled, char bracket_type);
 static int handle_identifier (void);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static void scan_for_comments (const char *);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
@@ -267,18 +271,27 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // after seeing a ']' character...
 %}
 
 <MATRIX_START>{SNLCMT}*\]{S}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
-    int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
-    return handle_close_bracket (spc_gobbled);
+    bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
+    return handle_close_bracket (spc_gobbled, ']');
+  }
+
+<MATRIX_START>{SNLCMT}*\}{S}* {
+    scan_for_comments (yytext);
+    fixup_column_count (yytext);
+    int c = yytext[yyleng-1];
+    int cont_is_spc = eat_continuation ();
+    bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
+    return handle_close_bracket (spc_gobbled, '}');
   }
 
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
 %}
 
@@ -311,17 +324,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 <MATRIX_START>{S}+ {
     current_input_column += yyleng;
 
     int tmp = eat_continuation ();
     int bin_op = next_token_is_bin_op (true);
     int postfix_un_op = next_token_is_postfix_unary_op (true);
 
     if (! (postfix_un_op || bin_op)
-	&& nesting_level.is_bracket ()
+	&& nesting_level.is_bracket_or_brace ()
 	&& lexer_flags.convert_spaces_to_comma)
       {
 	if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
 	  {
 	    maybe_warn_separator_insert (';');
 
 	    yyunput (';', yytext);
 	  }
@@ -366,17 +379,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
       return LEXICAL_ERROR;
 
-    if (nesting_level.is_bracket ())
+    if (nesting_level.is_bracket_or_brace ())
       {
 	maybe_warn_separator_insert (';');
 
 	return ';';
       }
   }
 
 %{
@@ -522,17 +535,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
       return '\n';
     else if (nesting_level.is_paren ())
       gripe_matlab_incompatible ("bare newline inside parentheses");
-    else if (nesting_level.is_bracket ())
+    else if (nesting_level.is_bracket_or_brace ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator. 
 %}
 
@@ -622,17 +635,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     maybe_gripe_matlab_incompatible_comment (yytext[0]);
 
     if (YY_START == COMMAND_START)
       BEGIN (INITIAL);
 
     if (nesting_level.none ())
       return '\n';
-    else if (nesting_level.is_bracket ())
+    else if (nesting_level.is_bracket_or_brace ())
       return ';';
   }
 
 %{
 // Other operators.
 %}
 
 ".+"	{ XBIN_OP_RETURN (EPLUS, false); }
@@ -699,17 +712,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 ")" {
     nesting_level.remove ();
 
     current_input_column++;
     lexer_flags.cant_be_identifier = true;
     lexer_flags.quote_is_transpose = true;
-    lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket ();
+    lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket_or_brace ();
     do_comma_insert_check ();
     return ')';
   }
 
 "." {
     TOK_RETURN ('.');
   }
 
@@ -725,32 +738,36 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 ".\\="	{ XBIN_OP_RETURN (ELEFTDIV_EQ, false); }
 {POW}=  { XBIN_OP_RETURN (POW_EQ, false); }
 {EPOW}= { XBIN_OP_RETURN (EPOW_EQ, false); }
 "&="	{ XBIN_OP_RETURN (AND_EQ, false); }
 "|="	{ XBIN_OP_RETURN (OR_EQ, false); }
 "<<="	{ XBIN_OP_RETURN (LSHIFT_EQ, false); }
 ">>="	{ XBIN_OP_RETURN (RSHIFT_EQ, false); }
 
-"{" {
+\{{S}* {
     nesting_level.brace ();
+
+    current_input_column += yyleng;
+    lexer_flags.quote_is_transpose = false;
+    lexer_flags.cant_be_identifier = false;
+    lexer_flags.convert_spaces_to_comma = true;
+
     promptflag--;
-    TOK_RETURN ('{');
+    eat_whitespace ();
+
+    lexer_flags.bracketflag++;
+    BEGIN (MATRIX_START);
+    return '{';
   }
 
 "}" {
     nesting_level.remove ();
 
-    current_input_column++;
-    lexer_flags.cant_be_identifier = true;
-    lexer_flags.quote_is_transpose = true;
-    lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket ();
-    do_comma_insert_check (); // Is this really necessary?
-
-    return '}';
+    TOK_RETURN ('}');
   }
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     // EOF happens here if we are parsing nested functions.
@@ -2204,31 +2221,33 @@ next_token_is_assign_op (void)
       break;
     }
 
   yyunput (c0, yytext);
 
   return retval;
 }
 
-static int
-handle_close_bracket (int spc_gobbled)
+static char
+handle_close_bracket (bool spc_gobbled, char bracket_type)
 {
-  int retval = ']';
+  char retval = bracket_type;
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
       lexer_flags.bracketflag--;
     }
 
   if (lexer_flags.bracketflag == 0)
     BEGIN (INITIAL);
 
-  if (next_token_is_assign_op () && ! lexer_flags.looking_at_return_list)
+  if (bracket_type == ']'
+      && next_token_is_assign_op ()
+      && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else
     {
       int c1 = yyinput ();
       yyunput (c1, yytext);
 
@@ -2236,38 +2255,38 @@ handle_close_bracket (int spc_gobbled)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled);
 
 	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
 	  int sep_op = next_token_is_sep_op ();
 
 	  if (! (postfix_un_op || bin_op || sep_op)
-	      && nesting_level.is_bracket ()
+	      && nesting_level.is_bracket_or_brace ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
 	      maybe_warn_separator_insert (',');
 
 	      yyunput (',', yytext);
-	      return ']';
+	      return retval;
 	    }
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
   lexer_flags.convert_spaces_to_comma = true;
 
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (nesting_level.is_bracket ())
+  if (nesting_level.is_bracket_or_brace ())
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
diff --git a/src/ov-file.h b/src/ov-file.h
--- a/src/ov-file.h
+++ b/src/ov-file.h
@@ -76,16 +76,28 @@ public:
   octave_stream stream_value (void) const { return stream; }
 
   int stream_number (void) const { return number; }
 
   bool is_defined (void) const { return true; }
 
   bool is_stream (void) const { return true; }
 
+  // Pretend we are a real scalar for better compatibility, maybe.
+
+  bool is_real_scalar (void) const { return true; }
+
+  bool is_real_type (void) const { return true; }
+
+  dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
+
+  octave_value all (int = 0) const { return (number != 0.0); }
+
+  octave_value any (int = 0) const { return (number != 0.0); }
+
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
 
