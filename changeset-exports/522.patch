# HG changeset patch
# User jwe
# Date 774729208 0
#      Wed Jul 20 18:33:28 1994 +0000
# Node ID 2dba380d2d859828bde6258e11fb5565f46bec9d
# Parent  af19ffbbe91ddae43953eb4957de24fb6ce12e9e
[project @ 1994-07-20 18:31:40 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -29,16 +29,18 @@ Software Foundation, 675 Mass Ave, Cambr
 
 %{
 #define SHORT_CIRCUIT_LOGICALS 1
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
+#include <string.h>
+
 #include "input.h"
 #include "token.h"
 
 #include "SLStack.h"
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
@@ -156,34 +158,34 @@ EXPON	([DdEe][+-]?{D}+)
 				TOK_RETURN (',');
 			      else
 				TOK_RETURN (';');
 			    }
 		        }
 
 <HELP_FCN>[^ \t\n]*{S}*	    |
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
-			      static char *tok = (char *) NULL;
+			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strip_trailing_whitespace (yytext);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
 			      TOK_RETURN (TEXT);
 			    }
 
 <TEXT_FCN>\'{QSTR}*[\n\'] {
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
 			      jump_to_top_level ();
 			    }
 			  else
 			    {
-			      static char *tok = (char *) NULL;
+			      static char *tok = 0;
 			      delete [] tok;
 			      int off1 = doing_set ? 0 : 1;
 			      int off2 = doing_set ? 0 : 2;
 			      tok = strsave (&yytext[off1]);
 			      tok[yyleng-off2] = '\0';
 			      do_string_escapes (tok);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
@@ -196,17 +198,17 @@ EXPON	([DdEe][+-]?{D}+)
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
 			      jump_to_top_level ();
 			    }
 			  else
 			    {
-			      static char *tok = (char *) NULL;
+			      static char *tok = 0;
 			      delete [] tok;
 			      int off1 = doing_set ? 0 : 1;
 			      int off2 = doing_set ? 0 : 2;
 			      tok = strsave (&yytext[off1]);
 			      tok[yyleng-off2] = '\0';
 			      do_string_escapes (tok);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
@@ -226,17 +228,17 @@ EXPON	([DdEe][+-]?{D}+)
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
 			      jump_to_top_level ();
 			    }
 			  else
 			    {
-			      static char *tok = (char *) NULL;
+			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strsave (yytext);
 			      tok[yyleng-1] = '\0';
 			      do_string_escapes (tok);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
 			      quote_is_transpose = 1;
 			      cant_be_identifier = 1;
@@ -256,17 +258,17 @@ EXPON	([DdEe][+-]?{D}+)
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
 			      jump_to_top_level ();
 			    }
 			  else
 			    {
-			      static char *tok = (char *) NULL;
+			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strsave (yytext);
 			      tok[yyleng-1] = '\0';
 			      do_string_escapes (tok);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
 			      quote_is_transpose = 1;
 			      cant_be_identifier = 1;
@@ -474,17 +476,17 @@ EXPON	([DdEe][+-]?{D}+)
 
 <<EOF>>		TOK_RETURN (END_OF_INPUT);
 
 {IDENT}{S}*	{
 
 // Truncate the token at the first space or tab but don't write
 // directly on yytext.
 
-		  static char *tok = (char *) NULL;
+		  static char *tok = 0;
 		  delete [] tok;
 		  tok = strip_trailing_whitespace (yytext);
 		  return handle_identifier (tok, 0);
 		}
 
 {IDENT}/{S}*=	{ return handle_identifier (yytext, 1); }
 
 "\n"		{
@@ -891,29 +893,29 @@ plot_style_token (char *s)
   static char *plot_styles[] = 
     {
       "dots",
       "errorbars",
       "impulses",
       "lines",
       "linespoints",
       "points",
-      (char *) NULL,
+      0,
     };
 
   char **tmp = plot_styles;
-  while (*tmp != (char *) NULL)
+  while (*tmp)
     {
       if (almost_match (*tmp, s))
 	return *tmp;
 
       tmp++;
     }
 
-  return (char *) NULL;
+  return 0;
 }
 
 /*
  * Check to see if a character string matches any one of the plot
  * option keywords. 
  */
 static int
 is_plot_keyword (char *s)
@@ -944,17 +946,17 @@ is_plot_keyword (char *s)
  * Handle keywords.  Could probably be more efficient...
  */
 static int
 is_keyword (char *s)
 {
   if (plotting && in_plot_style)
     {
       char *sty = plot_style_token (s);
-      if (sty != (char *) NULL)
+      if (sty)
 	{
 	  in_plot_style = 0;
 	  yylval.tok_val = new token (sty);
 	  token_stack.push (yylval.tok_val);
 	  return STYLE;
 	}
     }
 
@@ -1026,17 +1028,17 @@ is_keyword (char *s)
     }
   else if (strcmp ("function", s) == 0)
     {
       if (defining_func)
 	{
 	  error ("function keyword invalid within a function body");
 
 	  if ((reading_fcn_file || reading_script_file)
-	      && curr_fcn_file_name != (char *) NULL)
+	      && curr_fcn_file_name)
 	    error ("defining new function near line %d of file `%s.m'",
 		   input_line_number, curr_fcn_file_name);
 	  else
 	    error ("defining new function near line %d", input_line_number);
 
 	  jump_to_top_level ();  // XXX FIXME XXX
 	}
       else
@@ -1329,21 +1331,21 @@ next_token_is_bin_op (int spc_prev, char
  * Used to delete trailing white space from tokens.
  */
 static char *
 strip_trailing_whitespace (char *s)
 {
   char *retval = strsave (s);
 
   char *t = strchr (retval, ' ');
-  if (t != (char *) NULL)
+  if (t)
     *t = '\0';
 
   t = strchr (retval, '\t');
-  if (t != (char *) NULL)
+  if (t)
     *t = '\0';
 
   return retval;
 }
 
 /*
  * Figure out exactly what kind of token to return when we have seen
  * an identifier.  Handles keywords.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -32,27 +32,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "config.h"
 #endif
 
 #include "SLStack.h"
 
 #include "Matrix.h"
 
 #include "error.h"
+#include "octave.h"
 #include "variables.h"
 #include "octave-hist.h"
 #include "user-prefs.h"
 #include "input.h"
 #include "utils.h"
 #include "tree.h"
 #include "tree-plot.h"
 #include "tree-const.h"
 #include "symtab.h"
-#include "builtins.h"
-#include "octave.h"
 #include "parse.h"
 #include "lex.h"
 #include "token.h"
 
 // Nonzero means we're in the middle of defining a function.
 int defining_func = 0;
 
 // Nonzero means we're in the middle of defining a loop.
@@ -65,17 +64,17 @@ int iffing = 0;
 // screwed by bogus function syntax.
 int maybe_screwed = 0;
 
 // Nonzero means we need to do some extra lookahead to avoid being
 // screwed by bogus function syntax.
 int maybe_screwed_again = 0;
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
-symbol_table *tmp_local_sym_tab = (symbol_table *) NULL;
+symbol_table *tmp_local_sym_tab = 0;
 
 // Stack to hold list of literal matrices.
 SLStack <tree_matrix *> ml;
 
 // A nonzero element corresponding to an element of ml means we just
 // started reading a new matrix.  This should probably be part of a
 // new struct for matrix lists... 
 SLStack <int> mlnm;
@@ -124,17 +123,17 @@ static tree_expression *maybe_convert_to
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 static void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
 #define ABORT_PARSE \
   do \
     { \
-      global_command = NULL_TREE; \
+      global_command = 0; \
       reset_parser (); \
       yyerrok; \
       if (interactive) \
 	YYACCEPT; \
       else \
 	YYABORT; \
     } \
   while (0)
@@ -236,23 +235,23 @@ static void maybe_warn_assign_as_truth_v
 
 /*
  * Grammar rules.
  */
 %%
 
 input		: '\n'
 		  {
-		    global_command = NULL_TREE;
+		    global_command = 0;
 		    promptflag = 1;
 		    YYACCEPT;
 		  }
 		| END_OF_INPUT
 		  {
-		    global_command = NULL_TREE;
+		    global_command = 0;
 		    promptflag = 1;
 		    YYABORT;
 		  }
 		| simple_list
 		  {
 		    global_command = $1;
 		    promptflag = 1;
 		    YYACCEPT;
@@ -279,19 +278,19 @@ input		: '\n'
 		  { ABORT_PARSE; }
 		| simple_list error '\n'
 		  { ABORT_PARSE; }
 		| simple_list error END_OF_INPUT
 		  { ABORT_PARSE; }
 		;
 
 simple_list	: semi_comma
-		  { $$ = (tree_command_list *) NULL; }
+		  { $$ = 0; }
 		| comma_semi
-		  { $$ = (tree_command_list *) NULL; }
+		  { $$ = 0; }
 		| simple_list1
 		  { $$ = $1->reverse (); }
 		| simple_list1 semi_comma
 		  {
 		    $1->set_print_flag (0);
 		    $$ = $1->reverse ();
 		  }
 		| simple_list1 comma_semi
@@ -372,22 +371,21 @@ command		: plot_command
 		| func_def
 		  { $$ = $1; }
 		| global_decl
 		  { $$ = $1; }
 		;
 
 plot_command	: PLOT plot_command1
 		  {
-		    tree_subplot_list *tmp = (tree_subplot_list *) NULL;
-		    if ($2 != (tree_subplot_list *) NULL)
+		    tree_subplot_list *tmp = 0;
+		    if ($2)
 		      tmp = $2->reverse ();
 
-		    if (tmp == (tree_subplot_list *) NULL
-			&& $1->pttype () != token::replot)
+		    if (! tmp && $1->pttype () != token::replot)
 		      {
 			yyerror ("must have something to plot");
 			ABORT_PARSE;
 		      }
 		    else
 		      {
 			$$ = new tree_plot_command (tmp, $1->pttype ());
 			plotting = 0;
@@ -423,57 +421,57 @@ ranges		: ranges1
 		  { $$ = new tree_plot_limits ($1, $2); }
 		| ranges1 ranges1 ranges1
 		  { $$ = new tree_plot_limits ($1, $2, $3); }
 		;
 
 ranges1		: OPEN_BRACE expression COLON expression CLOSE_BRACE
 		  { $$ = new tree_plot_range ($2, $4); }
 		| OPEN_BRACE COLON expression CLOSE_BRACE
-		  { $$ = new tree_plot_range (NULL, $3); }
+		  { $$ = new tree_plot_range (0, $3); }
 		| OPEN_BRACE expression COLON CLOSE_BRACE
-		  { $$ = new tree_plot_range ($2, NULL); }
+		  { $$ = new tree_plot_range ($2, 0); }
 		| OPEN_BRACE COLON CLOSE_BRACE
 		  { $$ = new tree_plot_range (); }
 		| OPEN_BRACE CLOSE_BRACE
 		  { $$ = new tree_plot_range (); }
 		;
 
 plot_command1	: // empty
-		  { $$ = (tree_subplot_list *) NULL; }
+		  { $$ = 0; }
 		| plot_command2
 		  { $$ = $1; }
 		| plot_command1 ',' plot_command2
 		  { $$ = $1->chain ($3); }
 		;
 
 plot_command2	: expression
 		  { $$ = new tree_subplot_list ($1); }
 		| expression plot_options
 		  { $$ = $2->set_data ($1); }
 		;
 
 plot_options	: using
-		  { $$ = new tree_subplot_list ($1, NULL, NULL); }
+		  { $$ = new tree_subplot_list ($1, 0, 0); }
 		| title
-		  { $$ = new tree_subplot_list (NULL, $1, NULL); }
+		  { $$ = new tree_subplot_list (0, $1, 0); }
 		| style
-		  { $$ = new tree_subplot_list (NULL, NULL, $1); }
+		  { $$ = new tree_subplot_list (0, 0, $1); }
 		| using title
-		  { $$ = new tree_subplot_list ($1, $2, NULL); }
+		  { $$ = new tree_subplot_list ($1, $2, 0); }
 		| title using
-		  { $$ = new tree_subplot_list ($2, $1, NULL); }
+		  { $$ = new tree_subplot_list ($2, $1, 0); }
 		| using style
-		  { $$ = new tree_subplot_list ($1, NULL, $2); }
+		  { $$ = new tree_subplot_list ($1, 0, $2); }
 		| style using
-		  { $$ = new tree_subplot_list ($2, NULL, $1); }
+		  { $$ = new tree_subplot_list ($2, 0, $1); }
 		| title style
-		  { $$ = new tree_subplot_list (NULL, $1, $2); }
+		  { $$ = new tree_subplot_list (0, $1, $2); }
 		| style title
-		  { $$ = new tree_subplot_list (NULL, $2, $1); }
+		  { $$ = new tree_subplot_list (0, $2, $1); }
 		| using title style
 		  { $$ = new tree_subplot_list ($1, $2, $3); }
 		| using style title
 		  { $$ = new tree_subplot_list ($1, $3, $2); }
 		| title using style
 		  { $$ = new tree_subplot_list ($2, $1, $3); }
 		| title style using
 		  { $$ = new tree_subplot_list ($3, $1, $2); }
@@ -692,37 +690,39 @@ expression	: variable '=' expression
 		| '[' screwed_again matrix_row SCREW_TWO '=' expression
 		  {
 
 // Will need a way to convert the matrix list to a list of
 // identifiers.	 If that fails, we can abort here, without losing
 // anything -- no other possible syntax is valid if we've seen the
 // equals sign as the next token after the `]'.
 
-		    $$ = (tree_multi_assignment_expression *) NULL;
+		    $$ = 0;
 		    maybe_screwed_again--;
 		    tree_matrix *tmp = ml.pop ();
 		    tmp = tmp->reverse ();
 		    tree_return_list *id_list = tmp->to_return_list ();
-		    if (id_list == NULL_TREE)
+		    if (id_list)
+		      {
+			$$ = new tree_multi_assignment_expression
+			  (id_list, $6, $5->line (), $5->column ());
+		      }
+		    else
 		      {
 			yyerror ("parse error");
 			error ("invalid identifier list for assignment");
-			$$ = (tree_multi_assignment_expression *) NULL;
+			$$ = 0;
 			ABORT_PARSE;
 		      }
-		    else
-		      $$ = new tree_multi_assignment_expression
-			(id_list, $6, $5->line (), $5->column ());
 		  }
 		| NUM '=' expression
 		  {
 		    yyerror ("parse error");
 		    error ("invalid assignment to a number");
-		    $$ = (tree_simple_assignment_expression *) NULL;
+		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		| simple_expr
 		  { $$ = $1; }
 		;
 
 simple_expr	: simple_expr1
 		  { $$ = $1; }
@@ -847,17 +847,17 @@ simple_expr1	: NUM
 		;
 
 colon_expr	: simple_expr ':' simple_expr
 		  { $$ = new tree_colon_expression
 		      ($1, $3, $2->line (), $2->column ()); }
 		| colon_expr ':' simple_expr
 		  {
 		    $$ = $1->chain ($3);
-		    if ($$ == (tree_colon_expression *) NULL)
+		    if (! $$)
 		      {
 			yyerror ("parse error");
 			ABORT_PARSE;
 		      }
 		  }
 		;
 
 word_list_cmd	: identifier word_list
@@ -900,23 +900,23 @@ safe		: // empty
 are_we_screwed	: // empty
 		  { maybe_screwed = 1; }
 		;
 
 func_def	: FCN g_symtab are_we_screwed func_def1
 		  {
 		    curr_sym_tab = top_level_sym_tab;
 		    defining_func = 0;
-		    $$ = (tree_function *) NULL;
+		    $$ = 0;
 		  }
 		| FCN g_symtab are_we_screwed func_def2
 		  {
 		    curr_sym_tab = top_level_sym_tab;
 		    defining_func = 0;
-		    $$ = (tree_function *) NULL;
+		    $$ = 0;
 		  }
 		;
 
 func_def1	: SCREW safe g_symtab '=' func_def2
 		  {
 		    tree_identifier *tmp = new tree_identifier
 		      ($1->sym_rec (), $1->line (), $1->column ());
 		    tree_parameter_list *tpl = new tree_parameter_list (tmp);
@@ -959,17 +959,17 @@ func_def2	: identifier safe local_symtab
 			    warning ("function name `%s' does not agree\
  with function file name `%s.m'", id_name, curr_fcn_file_name);
 
 			    $1->rename (curr_fcn_file_name);
 			    id_name = $1->name ();
 			  }
 
 			$4->stash_fcn_file_name (curr_fcn_file_name);
-			$4->stash_fcn_file_time (time ((time_t *) NULL));
+			$4->stash_fcn_file_time (time (0));
 			$4->mark_as_system_fcn_file ();
 		      }
 		    else if (! (input_from_tmp_history_file
 				|| input_from_startup_file)
 			     && reading_script_file
 			     && strcmp (curr_fcn_file_name, id_name) == 0)
 		      {
 			warning ("function `%s' defined within\
@@ -1018,34 +1018,33 @@ variable	: identifier
 		  }
 		| identifier '(' arg_list ')'
 		  {
 		    $$ = new tree_index_expression
 			   ($1, $3, $1->line (), $1->column ());
 		  }
 		| identifier '(' ')'
 		  {
-		    $$ = new tree_index_expression
-		           ($1, (tree_argument_list *) NULL,
-			    $1->line (), $1->column ());
+		    $$ = new tree_index_expression ($1, 0, $1->line (),
+						    $1->column ()); 
 		  }
 		| identifier '['
 		  {
 		    yyerror ("parse error");
 		    error ("use `(\' and `)\' as index operators, not\
  `[\' and `]\'"); 
-		    $$ = (tree_index_expression *) NULL;
+		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
 
 param_list	: '(' ')'
 		  {
 		    quote_is_transpose = 0;
-		    $$ = (tree_parameter_list *) NULL;
+		    $$ = 0;
 		  }
 		| '(' ELLIPSIS ')'
 		  {
 		    quote_is_transpose = 0;
 		    tree_parameter_list *tmp = new tree_parameter_list ();
 		    tmp->mark_varargs_only ();
 		    $$ = tmp;
 		  }
@@ -1101,28 +1100,28 @@ arg_list1	: ':'
 		    colon = new tree_constant (tree_constant_rep::magic_colon);
 		    $$ = new tree_argument_list (colon);
 		  }
 		| arg_list1 ',' ':'
 		  {
 		    tree_constant *colon;
 		    colon = new tree_constant (tree_constant_rep::magic_colon);
 		    $$ = $1->chain (colon);
-		    if ($$ == NULL_TREE)
+		    if (! $$)
 		      {
 			yyerror ("parse error");
 			ABORT_PARSE;
 		      }
 		  }
 		| expression
 		  { $$ = new tree_argument_list ($1); }
 		| arg_list1 ',' expression
 		  {
 		    $$ = $1->chain ($3);
-		    if ($$ == NULL_TREE)
+		    if (! $$)
 		      {
 			yyerror ("parse error");
 			ABORT_PARSE;
 		      }
 		  }
 		;
 
 matrix		: '[' screwed_again rows ']'
@@ -1166,28 +1165,28 @@ matrix_row	: expression		// First elemen
 
 %%
 
 static void
 yyerror (char *s)
 {
   char *line = current_input_line;
   int err_col = current_input_column - 1;
-  if (err_col == 0 && line != (char *) NULL)
+  if (err_col == 0 && line)
     err_col = strlen (line) + 1;
 
 // Print a message like `parse error'.
   fprintf (stderr, "\n%s", s);
 
 // Maybe print the line number and file name.
   if (reading_fcn_file || reading_script_file)
     fprintf (stderr, " near line %d of file %s.m", input_line_number,
 	     curr_fcn_file_name);
 
-  if (line != (char *) NULL)
+  if (line)
     {
       int len = strlen (line);
       if (line[len-1] == '\n')
         {
           len--;
           line[len] = '\0';
         }
 // Print the line, maybe with a pointer near the error token.
@@ -1288,17 +1287,17 @@ maybe_convert_to_ans_assign (tree_expres
 	   || expr->is_prefix_expression ())
     {
       return expr;
     }
   else
     {
       symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
 
-      assert (sr != (symbol_record *) NULL);
+      assert (sr);
       
       tree_identifier *ans = new tree_identifier (sr);
 
       return new tree_simple_assignment_expression (ans, expr);
     }
 }
 
 static void
