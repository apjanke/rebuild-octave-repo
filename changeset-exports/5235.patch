# HG changeset patch
# User jwe
# Date 1111520926 0
#      Tue Mar 22 19:48:46 2005 +0000
# Node ID 5f0ad69b5c8cb48424a55ef26b45a35a9e3b1b59
# Parent  a791b8b777e4f15321a25eb69c7fe5140ae3f894
[project @ 2005-03-22 19:48:16 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,15 @@
 2005-03-22  John W. Eaton  <jwe@octave.org>
 
+	* Makeconf.in (GLPK_LIBS): Substitute value.
+	(do-subst-config-vals): Add to list of substitutions.
+
+	* configure.in: Check for glpk.
+
 	* emacs/octave-mod.el (octave-abbrev-table): Omit fifth and sixth
 	arguments from define-abbrev for compatibility with some older
 	versions of Emacs.
 
 2005-03-21  John W. Eaton  <jwe@octave.org>
 
 	* octave-bug.in: Try harder to find default pager (use code
 	similar to that used for finding default editor).
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -181,16 +181,17 @@ LIBPLPLOT = @LIBPLPLOT@
 LIBOCTINTERP = @LIBOCTINTERP@
 LIBOCTAVE = @LIBOCTAVE@
 LIBCRUFT = @LIBCRUFT@
 LIBREADLINE = @LIBREADLINE@
 TERMLIBS = @TERMLIBS@
 
 BLAS_LIBS = @BLAS_LIBS@
 FFTW_LIBS = @FFTW_LIBS@
+GLPK_LIBS = @GLPK_LIBS@
 LIBS = @LIBS@
 
 # The arguments passed to configure.
 config_opts = @config_opts@
 
 # ==================== Where To Install Things ====================
 
 # The default location for installation.  Everything is placed in
@@ -423,16 +424,17 @@ echo "making $@ from $<"
   -e "s;%OCTAVE_CONF_F2C%;\"${F2C}\";" \
   -e "s;%OCTAVE_CONF_F2CFLAGS%;\"${F2CFLAGS}\";" \
   -e "s;%OCTAVE_CONF_F77%;\"${F77}\";" \
   -e "s;%OCTAVE_CONF_FC%;\"${FC}\";" \
   -e "s;%OCTAVE_CONF_FFLAGS%;\"${FFLAGS}\";" \
   -e "s;%OCTAVE_CONF_FFTW_LIBS%;\"${FFTW_LIBS}\";" \
   -e "s;%OCTAVE_CONF_FLIBS%;\"${FLIBS}\";" \
   -e "s;%OCTAVE_CONF_FPICFLAG%;\"${FPICFLAG}\";" \
+  -e "s;%OCTAVE_CONF_GLPK_LIBS%;\"${GLPK_LIBS}\";" \
   -e "s;%OCTAVE_CONF_INCFLAGS%;\"${INCFLAGS}\";" \
   -e "s;%OCTAVE_CONF_LD_CXX%;\"${LD_CXX}\";" \
   -e "s;%OCTAVE_CONF_LDFLAGS%;\"${LDFLAGS}\";" \
   -e "s;%OCTAVE_CONF_LD_STATIC_FLAG%;\"${LD_STATIC_FLAG}\";" \
   -e "s;%OCTAVE_CONF_LEX%;\"${LEX}\";" \
   -e "s;%OCTAVE_CONF_LEXLIB%;\"${LEXLIB}\";" \
   -e "s;%OCTAVE_CONF_LFLAGS%;\"${LFLAGS}\";" \
   -e "s;%OCTAVE_CONF_LIBCRUFT%;\"${LIBCRUFT}\";" \
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.468 $)
+AC_REVISION($Revision: 1.469 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -425,16 +425,40 @@ if test "$with_fftw" = "yes"; then
   fi
 fi
 
 if test "$with_fftw" = yes && test "$with_fftw3" = yes; then
   FFT_DIR=''
   AC_DEFINE(HAVE_FFTW3, 1, [Define if the FFTW3 library is used.])
 fi
 
+# Checks for GLPK header and library.
+
+AC_ARG_WITH(glpk,
+  [  --without-glpk          don't use GLPK],
+  with_glpk=$withval, with_glpk=yes)
+
+glpk_lib=
+if test "$with_glpk" = yes; then
+  glpk_lib="glpk"
+elif test "$with_glpk" != no; then
+  glpk_lib="$with_glpk"
+fi
+
+GLPK_LIBS=
+if test -n "$glpk_lib"; then
+  AC_CHECK_LIB($glpk_lib, glp_lpx_simplex, [
+    AC_CHECK_HEADERS(glpk.h, [
+      GLPK_LIBS="-l$glpk_lib"
+      AC_DEFINE(HAVE_GLPK, 1, [Define if GLPK is available.])])])
+fi
+AC_SUBST(GLPK_LIBS)
+
+# Checks for MPI header and library.
+
 WITH_MPI=true
 AC_ARG_WITH(mpi,
   [  --without-mpi           don't use MPI],
   with_mpi=$withval, with_mpi=yes)
 
 mpi_lib=
 if test "$with_mpi" = yes; then
   mpi_lib="mpi"
@@ -1523,16 +1547,17 @@ Octave is now configured for $canonical_
   Source directory:     $srcdir
   Installation prefix:  $prefix
   C compiler:           $CC $XTRA_CFLAGS $WARN_CFLAGS $CFLAGS
   C++ compiler:         $CXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
   Fortran compiler:     $FORT
   Fortran libraries:    $FLIBS
   BLAS libraries:       $BLAS_LIBS
   FFTW libraries:       $FFTW_LIBS
+  GLPK libraries:       $GLPK_LIBS
   UMFPACK libraries:    $UMFPACK_LIBS
   HDF5 libraries:       $HDF5_LIBS
   MPI libraries:        $MPI_LIBS
   LIBS:                 $LIBS
   Default pager:        $DEFAULT_PAGER
   gnuplot:              $GNUPLOT_BINARY
 
   Do internal array bounds checking:  $BOUNDS_CHECKING
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,22 @@
 2005-03-22  John W. Eaton  <jwe@octave.org>
-	
+
+	* Makefile.in: Add special rule for __glpk__.oct.
+
+	* toplev.cc (octave_config_info): Add GLPK_LIBS to the list.
+	* oct-conf.h.in (OCTAVE_CONF_GLPK_LIBS): Substitute here.
+
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__, glpk):
 	Adapt to Octave coding style.
 	(glpk): Move decls closer to first use.
 	(F__glpk__): Eliminate unnecessary loop seting inf values.
+	Ensure that isMIP is initialized.
+	Declare sense, nz, and isMIP volatile to avoid GCC warnings that
+	these variables might be might be clobbered by `longjmp' or `vfork'
 
 	* DLD-FUNCTIONS/__glpk__.cc: New file.
 
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2005-03-21  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (maximum_braindamage):
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -25,17 +25,22 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cfloat>
 #include <csetjmp>
 #include <ctime>
 
 #include "defun-dld.h"
 #include "error.h"
+#include "gripes.h"
+#include "oct-map.h"
 #include "oct-obj.h"
+#include "pager.h"
+
+#if defined (HAVE_GLPK)
 
 extern "C" {
 #include <glpk.h>
 }
 
 #define OCTOUT octave_stdout
 #define OCTERR octave_stdout
 #define NIntP 17
@@ -108,24 +113,24 @@ int RParam[NRealP] = {
   LPX_K_TOLOBJ
 };
 
 jmp_buf mark;  //-- Address for long jump to jump to
 int fperr; //-- Global error number
 
 
 int
-glpk_fault_hook (void *info, char *msg)
+glpk_fault_hook (void * /* info */, char *msg)
 {
   OCTERR << "*** SEVERE CRITICAL ERROR *** from GLPK !\n\n"<<msg<<" %s\n";
   longjmp (mark, -1);
 }
 
 int
-glpk_print_hook (void *info, char *msg)
+glpk_print_hook (void * /* info */, char *msg)
 {
   OCTERR << msg << "\n";
   return 1;
 }
 
 
 int
 glpk (int sense, int n, int m, double *c, int nz, int *rn, int *cn,
@@ -262,17 +267,17 @@ glpk (int sense, int n, int m, double *c
       {
 	if (isMIP)
 	  {
 	    method = 'I';
 	    error = lpx_simplex (lp);
 	    error = lpx_integer (lp);
 	  }
 	else
-	  error=lpx_simplex(lp);
+	  error = lpx_simplex(lp);
       }
      break;
 
     case 'T':
       error = lpx_interior(lp);
       break;
 
     default:
@@ -349,35 +354,39 @@ glpk (int sense, int n, int m, double *c
 
    lpx_delete_prob (lp);
 
    *status= static_cast<double> (error);
 
    return error;
 }
 
-DEFUN_DLD (__glpk__, args, nlhs,
+#endif
+
+DEFUN_DLD (__glpk__, args, ,
   "__glpk__: internal interface for the GLPK library.\n\
 You should be using using glpk instead")
 {
   // The list of values to return.  See the declaration in oct-obj.h
   octave_value_list retval;
 
+#if defined (HAVE_GLPK)
+
   int nrhs = args.length ();
 
   if (nrhs < 1)
     {
       OCTERR<<"Use the script glpk for the optimization\n";
       return retval;
     }
 
   //-- 1st Input. Sense of optimization.
-  int sense;
+  volatile int sense;
   double SENSE = args(0).scalar_value ();
-  if (SENSE> = 0)
+  if (SENSE >= 0)
     sense = 1;
   else
     sense = -1;
 
   //-- 2nd Input. A column array containing the objective function
   //--            coefficients.
   int mrowsc = args(1).rows();
 
@@ -388,17 +397,17 @@ You should be using using glpk instead")
   // If matrix A is NOT a sparse matrix
   // if(!mxIsSparse(A_IN)){
   int mrowsA = args(2).rows();
   Matrix A (args(2).matrix_value ()); // get the matrix
   Array<int> rn (mrowsA*mrowsc+1);
   Array<int> cn (mrowsA*mrowsc+1);
   ColumnVector a (mrowsA*mrowsc+1, 0.0);
 
-  int nz = 0;
+  volatile int nz = 0;
   for (int i = 0; i < mrowsA; i++)
     {
       for (int j = 0; j < mrowsc; j++)
 	{
 	  if (A(i,j) != 0)
 	    {
 	      nz++;
 	      rn(nz) = i + 1;
@@ -485,28 +494,26 @@ You should be using using glpk instead")
       else
 	freeUB(i) = 0;
     }
 
   //-- 8th Input. A column array containing the types of the variables.
   charMatrix VTYPE (args(7).char_matrix_value ());
 
   Array<int> vartype (mrowsc);
-  int isMIP;
+  volatile int isMIP = 0;
   for (int i = 0; i < mrowsc ; i++)
     {
       if (VTYPE(i,0) == 'I')
 	{
 	  isMIP = 1;
 	  vartype(i) = LPX_IV;
 	}
       else
-	{
-	  vartype(i) = LPX_CV;
-	}
+	vartype(i) = LPX_CV;
     }
 
   //-- 9th Input. A structure containing the control parameters.
   Octave_map PARAM = args(8).map_value ();
 
   //-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   //-- Integer parameters
   //-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -724,34 +731,39 @@ You should be using using glpk instead")
   ColumnVector fmin (1);
   ColumnVector status (1);
   ColumnVector lambda (mrowsA);
   ColumnVector redcosts (mrowsc);
   ColumnVector time (1);
   ColumnVector mem (1);
 
   int jmpret = setjmp (mark);
+
   if (jmpret == 0)
-    {
-      int error = glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
-			cn.fortran_vec (), a.fortran_vec (), b, ctype,
-			freeLB.fortran_vec (), lb, freeUB.fortran_vec (),
-			ub, vartype.fortran_vec (), isMIP, lpsolver,
-			save_pb, xmin.fortran_vec (), fmin.fortran_vec (),
-			status.fortran_vec (), lambda.fortran_vec (),
-			redcosts.fortran_vec (), time.fortran_vec (),
-			mem.fortran_vec ());
-    }
+    glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
+	  cn.fortran_vec (), a.fortran_vec (), b, ctype,
+	  freeLB.fortran_vec (), lb, freeUB.fortran_vec (),
+	  ub, vartype.fortran_vec (), isMIP, lpsolver,
+	  save_pb, xmin.fortran_vec (), fmin.fortran_vec (),
+	  status.fortran_vec (), lambda.fortran_vec (),
+	  redcosts.fortran_vec (), time.fortran_vec (),
+	  mem.fortran_vec ());
 
   Octave_map extra;
 
   extra.assign ("lambda", octave_value (lambda));
   extra.assign ("redcosts", octave_value (redcosts));
   extra.assign ("time", octave_value (time));
   extra.assign ("mem", octave_value (mem));
 
   retval(3) = extra;
   retval(2) = octave_value(status);
   retval(1) = octave_value(fmin);
   retval(0) = octave_value(xmin);
 
+#else
+
+  gripe_not_supported ("glpk");
+
+#endif
+
   return retval;
 }
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -532,16 +532,28 @@ oct-conf.h: oct-conf.h.in ../Makeconf Ma
 	@$(do-subst-config-vals)
 
 oct-gperf.h: octave.gperf
 	@echo "making $@ from $<"
 	@$(GPERF) -t -C -D -G -L C++ -Z octave_kw_hash \
 	  $< | $(SED) 's,lookup\[,gperf_lookup[,' > $@-t
 	@$(top_srcdir)/move-if-change $@-t $@
 
+# How to make a .oct file from a .o file:
+
+ifeq ($(ENABLE_DYNAMIC_LINKING), true)
+  ifdef CXXPICFLAG
+    __glpk__.oct : pic/__glpk__.o octave$(EXEEXT)
+	  $(DL_LD) $(DL_LDFLAGS) -o $@ $< $(OCT_LINK_DEPS) $(GLPK_LIBS)
+  else
+    __glpk__.oct : __glpk__.o octave$(EXEEXT)
+	  $(DL_LD) $(DL_LDFLAGS) -o $@ $< $(OCT_LINK_DEPS) $(GLPK_LIBS)
+  endif
+endif
+
 check: all
 .PHONY: check
 
 # If missing, GNU make attempts to create them in the reverse of the
 # order in which they are listed here.  We rely on that fact to ensure
 # that defaults.h is created before trying to create the .d files.
 # Hmm.  I wonder if we can count on that...
 
diff --git a/src/oct-conf.h.in b/src/oct-conf.h.in
--- a/src/oct-conf.h.in
+++ b/src/oct-conf.h.in
@@ -143,16 +143,20 @@ Software Foundation, 59 Temple Place - S
 #ifndef OCTAVE_CONF_FLIBS
 #define OCTAVE_CONF_FLIBS %OCTAVE_CONF_FLIBS%
 #endif
 
 #ifndef OCTAVE_CONF_FPICFLAG
 #define OCTAVE_CONF_FPICFLAG %OCTAVE_CONF_FPICFLAG%
 #endif
 
+#ifndef OCTAVE_CONF_GLPK_LIBS
+#define OCTAVE_CONF_GLPK_LIBS %OCTAVE_CONF_GLPK_LIBS%
+#endif
+
 #ifndef OCTAVE_CONF_INCFLAGS
 #define OCTAVE_CONF_INCFLAGS %OCTAVE_CONF_INCFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_LDFLAGS
 #define OCTAVE_CONF_LDFLAGS %OCTAVE_CONF_LDFLAGS%
 #endif
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -659,16 +659,17 @@ specified option.\n\
       "F2C", OCTAVE_CONF_F2C,
       "F2CFLAGS", OCTAVE_CONF_F2CFLAGS,
       "F77", OCTAVE_CONF_F77,
       "FC", OCTAVE_CONF_FC,
       "FFLAGS", OCTAVE_CONF_FFLAGS,
       "FFTW_LIBS", OCTAVE_CONF_FFTW_LIBS,
       "FLIBS", OCTAVE_CONF_FLIBS,
       "FPICFLAG", OCTAVE_CONF_FPICFLAG,
+      "GLPK_LIBS", OCTAVE_CONF_GLPK_LIBS,
       "INCFLAGS", OCTAVE_CONF_INCFLAGS,
       "LDFLAGS", OCTAVE_CONF_LDFLAGS,
       "LD_CXX", OCTAVE_CONF_LD_CXX,
       "LD_STATIC_FLAG", OCTAVE_CONF_LD_STATIC_FLAG,
       "LEX", OCTAVE_CONF_LEX,
       "LEXLIB", OCTAVE_CONF_LEXLIB,
       "LFLAGS", OCTAVE_CONF_LFLAGS,
       "LIBCRUFT", OCTAVE_CONF_LIBCRUFT,
