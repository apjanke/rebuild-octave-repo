# HG changeset patch
# User jwe
# Date 848261769 0
#      Sun Nov 17 20:16:09 1996 +0000
# Node ID 7dc71ca5d09260a6a5313141f8a7f07fd6602752
# Parent  007e977442b8b18718613c9b909635e55495141b
[project @ 1996-11-17 20:16:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+Sun Nov 17 14:14:48 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (handle_identifier): Set lexer_flags.doing_set if the
+	token is "gset", not "set".
+
+Sat Nov 16 21:41:26 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (parse.cc, lex.cc): Add special rules for these files.
+	Delete pattern rules for .y and .l files.
+
+	* parse.y (expression): Move colon_expr here.
+	(simple_expr1): From here.
+
 Fri Nov 15 13:48:02 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-plot.cc: Put semicolons at the ends of all plot commands.
 
 	* defaults.cc (subst_octave_home): Start subsequent searchs from
 	the end of the replaced text.
 
 	* pr-output.cc (pr_any_float): Kluge for SCO systems.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -13,31 +13,16 @@ top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
-# Cancel default rule for .c from .y and make .cc from .y instead.
-
-%.c : %.y
-
-%.cc : %.y
-	$(YACC) $(YFLAGS) $<
-	@$(top_srcdir)/move-if-change y.tab.c $(@F)
-
-# Likewise for .c from .l.
-
-%.c : %.l
-
-%.cc : %.l
-	$(LEX) $(LFLAGS) $< > $(@F)
-
 XALL_CXXFLAGS_1 = $(subst -fexternal-templates, , $(ALL_CXXFLAGS))
 XALL_CXXFLAGS = $(subst -fno-implicit-templates, , $(XALL_CXXFLAGS_1))
 
 %.df : %.cc
 	@echo making $@ from $<
 	@$(CXXCPP) -c $(CPPFLAGS) $(XALL_CXXFLAGS) -DMAKE_BUILTINS $< \
 	  | $(srcdir)/mkdefs > $@.t
 	@mv $@.t $@
@@ -367,16 +352,24 @@ dist: parse.cc lex.cc oct-gperf.h
 .PHONY: dist
 
 conf-dist:
 	ln octave.cc Makefile.in ../`cat ../.fname`/src
 .PHONY: conf-dist
 
 # Special rules -- these files need special things to be defined.
 
+parse.cc : parse.y
+	@echo "expect 18 shift/reduce conflicts"
+	$(YACC) $(YFLAGS) $<
+	@$(top_srcdir)/move-if-change y.tab.c $(@F)
+
+lex.cc : lex.l
+	$(LEX) $(LFLAGS) $< > $(@F)
+
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
 
 oct-conf.h: oct-conf.h.in ../Makeconf Makefile
 	@$(do-subst-config-vals)
 
 oct-gperf.h: octave.gperf
 	@echo "making $@ from $<"
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1704,17 +1704,17 @@ handle_identifier (const string& tok, in
   // arguments.  These are also reserved words, but only because it
   // would be very difficult to do anything intelligent with them if
   // they were not reserved.
 
   if (is_text_function_name (tok))
     {
       BEGIN TEXT_FCN;
 
-      if (tok == "set")
+      if (tok == "gset")
 	lexer_flags.doing_set = 1;
     }
 
   int c = yyinput ();
   yyunput (c, yytext);
   int next_tok_is_eq = (c == '=');
 
   // Make sure we put the return values of a function in the symbol
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -349,19 +349,19 @@ static void maybe_warn_missing_semi (tre
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
 
-// There are 19 shift/reduce conflicts, ok?  But this only works with
+// There are 18 shift/reduce conflicts, ok?  But this only works with
 // bison...
-// %expect 19
+// %expect 18
 
 // Where to start.
 %start input
 
 // Grammar rules.
 
 %%
 
@@ -766,16 +766,18 @@ sep		: ','
 		;
 
 screwed_again	: // empty
 		  { lexer_flags.maybe_screwed_again++; }
 		;
 
 expression	: simple_expr
 		  { $$ = $1; }
+		| colon_expr
+		  { $$ = finish_colon_expression ($1); }
 		| NUM '=' expression
 		  {
 		    yyerror ("invalid assignment to a number");
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
 
@@ -805,18 +807,16 @@ simple_expr1	: NUM
 		| variable
 		  { $$ = $1; }
 		| matrix
 		  { $$ = $1; }
 		| '[' ']'
 		  { $$ = new tree_constant (Matrix ()); }
 		| '[' ';' ']'
 		  { $$ = new tree_constant (Matrix ()); }
-		| colon_expr
-		  { $$ = finish_colon_expression ($1); }
 		| PLUS_PLUS identifier %prec UNARY
 		  { $$ = make_prefix_op (PLUS_PLUS, $2, $1); }
 		| MINUS_MINUS identifier %prec UNARY
 		  { $$ = make_prefix_op (MINUS_MINUS, $2, $1); }
 		| EXPR_NOT simple_expr
 		  { $$ = make_unary_op (EXPR_NOT, $2, $1); }
 		| '+' simple_expr %prec UNARY
 		  { $$ = $2; }
