# HG changeset patch
# User jwe
# Date 1035576811 0
#      Fri Oct 25 20:13:31 2002 +0000
# Node ID e07466fb2458c3a6a750e1197533dbbb243c92ce
# Parent  b10790694d485be973fdad3a552670d010126a2b
[project @ 2002-10-25 20:13:31 by jwe]

diff --git a/kpathsea/elt-dirs.c b/kpathsea/elt-dirs.c
--- a/kpathsea/elt-dirs.c
+++ b/kpathsea/elt-dirs.c
@@ -63,16 +63,17 @@ typedef struct
 {
   const_string key;
   str_llist_type *value;
 } cache_entry;
 
 static cache_entry *the_cache = NULL;
 static unsigned cache_length = 0;
 
+#if 0
 void
 kpse_clear_dir_cache P1H(void)
 {
   while (cache_length > 0)
     {
       str_llist_type elt = *the_cache[--cache_length].value;
 
       while (elt)
@@ -90,16 +91,17 @@ kpse_clear_dir_cache P1H(void)
 	}
     }
 
   if (the_cache)
     free (the_cache);
 
   the_cache = NULL;
 }
+#endif
 
 /* Associate KEY with VALUE.  We implement the cache as a simple linear
    list, since it's unlikely to ever be more than a dozen or so elements
    long.  We don't bother to check here if PATH has already been saved;
    we always add it to our list.  We copy KEY but not VALUE; not sure
    that's right, but it seems to be all that's needed.  */
 
 static void
diff --git a/kpathsea/pathsearch.h b/kpathsea/pathsearch.h
--- a/kpathsea/pathsearch.h
+++ b/kpathsea/pathsearch.h
@@ -67,13 +67,15 @@ extern str_llist_type *kpse_element_dirs
 extern string kpse_path_search P3H(const_string path, const_string name,
                                    boolean must_exist);
 
 
 /* Like `kpse_path_search' with MUST_EXIST true, but return a list of
    all the filenames (or NULL if none), instead of taking the first.  */
 extern string *kpse_all_path_search P2H(const_string path, const_string name);
 
+#if 0
 /* Clear the directory cache.  */
 extern void kpse_clear_dir_cache P1H(void);
+#endif
 
 #endif /* not KPATHSEA_PATHSEARCH_H */
 
