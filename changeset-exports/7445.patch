# HG changeset patch
# User jwe
# Date 1202111587 0
#      Mon Feb 04 07:53:07 2008 +0000
# Node ID af92b34f3a3a8ea6efb90dc4892dfed9ab534f18
# Parent  1e1e2608da7b828b6d7fb03cc4ddff60a01dc858
[project @ 2008-02-04 07:53:07 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2008-02-04  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (base_graphics_backend::get_screen_size,
+	graphics_backend::get_screen_size): New methods.
+	(graphics_backend::available_backends): Export symbol.
+	(class figure::properties, class axes::properties): Export classes.
+	(figure::properties::get_boundingbox): New utility method.
+	(figure::properties::position): Use valid default position.
+	(axes::properties::gridlinestyle,
+	axes::properties::minorgridlinestyle):
+	Use dotted line style as default. 
+	* graphics.cc (default_figure_position): New static function.
+	(gnuplot_backend::get_screen_size): New method.
+	(figure::properties::get_boundingbox): New utility method.
+
 2008-02-02  Shai Ayal  <shaiay@users.sourceforge.org>
 
         * graphics.h.in (base_scaler::~base_scalar): New virtual destructor.
         * graphics.cc (axes::properties::update_camera): Tag abs with std.
 
 	* graphics.h.in (graphics_backend::find_backend): New function.
 	(class figure): Add __backend__ property and set method.
 	
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -156,16 +156,27 @@ default_axes_position (void)
 static Matrix
 default_axes_outerposition (void)
 {
   Matrix m (1, 4, 0.0);
   m(2) = m(3) = 1.0;
   return m;
 }
 
+static Matrix
+default_figure_position (void)
+{
+  Matrix m (1, 4, 0.0);
+  m(0) = 300;
+  m(1) = 200;
+  m(2) = 560;
+  m(3) = 420;
+  return m;
+}
+
 // NOTE: "cb" is passed by value, because "function_value" method
 //       is non-const; passing "cb" by const-reference is not
 //       possible
 
 static void
 execute_callback (octave_value cb, const graphics_handle& h,
                   const octave_value& data)
 {
@@ -1313,16 +1324,19 @@ public:
   Matrix get_canvas_size (const graphics_handle&) const
     {
       Matrix sz (1, 2, 0.0);
       return sz;
     }
 
   double get_screen_resolution (void) const
     { return 72.0; }
+
+  Matrix get_screen_size (void) const
+    { return Matrix (1, 2, 0.0); }
 };
 
 graphics_backend
 graphics_backend::default_backend (void)
 {
   if (available_backends.size () == 0)
     register_backend (new gnuplot_backend ());
 
@@ -1399,16 +1413,33 @@ figure::properties::close (bool pop)
       gh_manager::pop_figure (__myhandle__);
 
       graphics_handle cf = gh_manager::current_figure ();
 
       xset (0, "currentfigure", cf.value ());
     }
 }
 
+Matrix
+figure::properties::get_boundingbox (void) const
+{
+  graphics_backend b = get_backend ();
+  // FIXME: screen size should be obtained from root object
+  Matrix screen_size = b.get_screen_size ();
+  Matrix pos;
+
+  pos = convert_position (get_position ().matrix_value (), get_units (),
+			  "pixels", screen_size, b);
+
+  pos(0)--;
+  pos(1)--;
+
+  return pos;
+}
+
 octave_value
 figure::get_default (const caseless_str& name) const
 {
   octave_value retval = default_properties.lookup (name);
 
   if (retval.is_undefined ())
     {
       graphics_handle parent = get_parent ();
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1114,16 +1114,22 @@ public:
       return Matrix (1, 2, 0.0);
     }
 
   virtual double get_screen_resolution (void) const
     {
       error ("get_screen_resolution: invalid graphics backend");
       return -1;
     }
+  
+  virtual Matrix get_screen_size (void) const
+    {
+      error ("get_screen_size: invalid graphics backend");
+      return Matrix (1, 2, 0.0);
+    }
 
 private:
   std::string name;
   int count;
 };
 
 class graphics_backend
 {
@@ -1182,16 +1188,19 @@ public:
     { rep->print_figure (fh, term, file, mono, debug_file); }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
     { return rep->get_canvas_size (fh); }
 
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
+  Matrix get_screen_size (void) const
+    { return rep->get_screen_size (); }
+
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
   static void unregister_backend (const std::string& name)
     { available_backends.erase (name); }
 
@@ -1203,17 +1212,17 @@ public:
       return p->second;
     else
       return default_backend ();
   }
 
 private:
   base_graphics_backend *rep;
 
-  static std::map<std::string, graphics_backend> available_backends;
+  static OCTINTERP_API std::map<std::string, graphics_backend> available_backends;
 
   typedef std::map<std::string, graphics_backend>::iterator available_backends_iterator;
   typedef std::map<std::string, graphics_backend>::const_iterator const_available_backends_iterator;
 };
 
 // ---------------------------------------------------------------------
 
 class base_graphics_object;
@@ -2016,17 +2025,17 @@ private:
   static property_list::plist_map_type init_factory_properties (void);
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API figure : public base_graphics_object
 {
 public:
-  class properties : public base_properties
+  class OCTINTERP_API properties : public base_properties
   {
   public:
     void close (bool pop = true);
 
     void set_visible (const octave_value& val);
 
     graphics_backend get_backend (void) const
       {
@@ -2062,16 +2071,18 @@ public:
 		  mark_modified ();
 		}
 	    }
 	  else
 	    error ("__backend__ must be a string");
 	}
     }
 
+    Matrix get_boundingbox (void) const;
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(figure)
       any_property __plot_stream__ h , Matrix ()
       bool_property __enhanced__ h , "on"
       radio_property nextplot , "new|{add}|replace_children|replace"
       callback_property closerequestfcn , "closereq"
@@ -2097,17 +2108,17 @@ public:
       radio_property paperunits , "{inches}|centimeters|normalized|points"
       array_property paperposition , Matrix (1, 4 , 0) 
       radio_property paperpositionmode , "auto|{manual}"
       array_property papersize r , Matrix (1, 4, 0)
       radio_property papertype , "{usletter}|uslegal|a0|a1|a2|a3|a4|a5|b0|b1|b2|b3|b4|b5|arch-a|arch-b|arch-c|arch-d|arch-e|a|b|c|d|e|tabloid"
       radio_property pointer , "crosshair|fullcrosshair|{arrow}|ibeam|watch|topl|topr|botl|botr|left|top|right|bottom|circle|cross|fleur|custom|hand"
       array_property pointershapecdata , Matrix (16, 16, 0)
       array_property pointershapehotspot , Matrix (1, 2, 0)
-      array_property position , Matrix (1, 4, 0)
+      array_property position , default_figure_position ()
       radio_property renderer , "{painters}|zbuffer|opengl|none"
       radio_property renderermode , "{auto}|manual"
       bool_property resize , "on"
       callback_property resizefcn , Matrix ()
       radio_property selectiontype , "{normal}|open|alt|extend"
       radio_property toolbar , "none|{auto}|figure"
       radio_property units , "inches|centimeters|normalized|points|{pixels}|characters"
       callback_property windowbuttondownfcn , Matrix ()
@@ -2259,17 +2270,17 @@ private:
   Matrix xform;
   Matrix xform_inv;
   scaler sx, sy, sz;
 };
 
 class OCTINTERP_API axes : public base_graphics_object
 {
 public:
-  class properties : public base_properties
+  class OCTINTERP_API properties : public base_properties
   {
   public:
     void set_defaults (base_graphics_object& obj, const std::string& mode);
 
     void remove_child (const graphics_handle& h);
 
     void delete_children (void);
 
@@ -2379,21 +2390,21 @@ public:
       radio_property cameraviewanglemode , "{auto}|manual"
       array_property currentpoint , Matrix (2, 3, 0.0)
       radio_property drawmode , "{normal}|fast"
       radio_property fontangle , "{normal}|italic|oblique"
       string_property fontname , "Helvetica"
       double_property fontsize , 12
       radio_property fontunits , "{points}|normalized|inches|centimeters|pixels"
       radio_property fontweight , "{normal}|light|demi|bold"
-      radio_property gridlinestyle , "{-}|--|:|-.|none"
+      radio_property gridlinestyle , "-|--|{:}|-.|none"
       // FIXME: should be kind of string array
       string_property linestyleorder , "-"
       double_property linewidth , 0.5
-      radio_property minorgridlinestyle , "{-}|--|:|-.|none"
+      radio_property minorgridlinestyle , "-|--|{:}|-.|none"
       array_property plotboxaspectratio m , Matrix (1, 3, 1.0)
       radio_property plotboxaspectratiomode , "{auto}|manual"
       radio_property projection , "{orthographic}|perpective"
       radio_property tickdir m , "{in}|out"
       radio_property tickdirmode , "{auto}|manual"
       array_property ticklength , Matrix (1, 2, 0.1)
       array_property tightinset r , Matrix (1, 4, 0.0)
       // FIXME: uicontextmenu should be moved here
