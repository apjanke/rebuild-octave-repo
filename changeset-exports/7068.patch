# HG changeset patch
# User jwe
# Date 1193296220 0
#      Thu Oct 25 07:10:20 2007 +0000
# Node ID 609fd20455232f781c8c335d1d3cb2a12d635e94
# Parent  88417316c1b00e91aa9abb215c74a94ce0cc8277
[project @ 2007-10-25 07:10:20 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,8 @@
-2007-10-25  Søren Hauberg  <hauberg@gmail.com>
-
-	* set/ismember.m: Improve handling of cell arrays.
-        Improve error handling.  New output arg INDEX.
-
 2007-10-24  John W. Eaton  <jwe@octave.org>
 
 	* image/saveimage.m: Use functional form of save instead of eval.
 	Use -text instead of -ascii.
 
 	* plot/__go_draw_axes__.m: Handle visible = "off" for axes objects.
 
 2007-10-23  Peter A. Gustafson  <petegus@umich.edu>
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -82,16 +82,17 @@ function out = compare_versions(v1, v2, 
     error("Operator must be a character string");
   elseif (numel (operator) > 2)
     error("Operator cannot be more than 2 characters long");
   endif
 
   ## trim off any character data that is not part of a normal version
   ## number
   numbers = "0123456789.";
+  v1, numbers, ismember (v1, numbers)
   v1firstchar = find(~ ismember(v1, numbers), 1);
   v2firstchar = find(~ ismember(v2, numbers), 1);
   if ~ isempty (v1firstchar)
     v1c = v1(v1firstchar:length(v1));
     v1nochar = v1(1:v1firstchar-1);
   else
     v1c = "";
     v1nochar = v1;
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -12,77 +12,68 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} [@var{bool}, @var{index}] = ismember (@var{a}, @var{s})
-## Return a matrix @var{bool} the same shape as @var{a} which has 1 if
-## @code{a(i,j)} is in @var{s} or 0 if it isn't. If a second output argument
-## is requested, the indexes into @var{s} of the matching elements is
-## also returned.
+## @deftypefn {Function File} {} ismember (@var{A}, @var{S})
+## Return a matrix the same shape as @var{A} which has 1 if
+## @code{A(i,j)} is in @var{S} or 0 if it isn't.
 ## @seealso{unique, union, intersection, setxor, setdiff}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Adapted-by: jwe
 
-function [c, index] = ismember (a, s)
+function c = ismember (a, S)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  ## Convert char matrices to cell arrays.
-  if (ischar (a))
-    a = cellstr (a);
-  endif
-  if (ischar (s))
-    s = cellstr (s);
-  endif
-  
-  ## Input checking.
-  if (! isa (a, class (s)))
-    error ("ismember: both input arguments must be the same type");
-  endif
-
-  if (iscell (a) && ! iscellstr (a))
-    error ("ismember: cell arrays may only contain strings");
-  endif
-
-  if (! isnumeric(a) && ! iscell (a))
-    error ("ismember: input arguments must be arrays, cell arrays, or strings");
-  endif
-  
-  ## Do the actual work.
-  if (isempty (a) || isempty (s))
+  if (isempty (a) || isempty (S))
     c = zeros (size (a), "logical");
   else
-    if (numel (s) == 1)
-      if (iscell (a))
-        c = strcmp (a, s);
+    if (iscell (a) && ! iscell (S))
+      tmp{1} = S;
+      S = tmp;
+    endif
+    if (! iscell (a) && iscell (S))
+      tmp{1} = a;
+      a = tmp;
+    endif
+    S = unique (S(:));
+    lt = length (S);
+    if (lt == 1)
+      if (iscell (a) || iscell (S))
+        c = cellfun ("length", a) == cellfun ("length", S);
+        idx = find (c);
+	if (isempty (idx))
+	  c = zeros (size (a), "logical");
+	else
+	  c(idx) = all (char (a(idx)) == repmat (char (S), length (idx), 1), 2);
+	endif
       else
-	## Both A and S are matrices.
-        c = (a == s);
+        c = (a == S);
       endif
-      index = double (c);
     elseif (numel (a) == 1)
-      if (iscell (a))
-        f = find (strcmp (a, s), 1);
+      if (iscell (a) || iscell (S))
+        c = cellfun ("length", a) == cellfun ("length", S);
+        idx = find (c);
+	if (isempty (idx))
+	  c = zeros (size (a), "logical");
+	else
+          c(idx) = all (repmat (char (a), length (idx), 1) == char (S(idx)), 2);
+          c = any(c);
+	endif
       else
-	## Both A and S are matrices.
-        f = find (a == s, 1);
-      endif
-      c = ! isempty (f);
-      index = f;
-      if (isempty (index))
-	index = 0;
+        c = any (a == S);
       endif
     else
       ## Magic:  the following code determines for each a, the index i
       ## such that S(i)<= a < S(i+1).  It does this by sorting the a
       ## into S and remembering the source index where each element came
       ## from.  Since all the a's originally came after all the S's, if 
       ## the source index is less than the length of S, then the element
       ## came from S.  We can then do a cumulative sum on the indices to
@@ -104,43 +95,37 @@ function [c, index] = ismember (a, s)
       ##    cumsum(p<=l(S)-1) = [ 0 0 0 1 1 1 2 2 2 ]
       ## Now we can use Octave's lvalue indexing to "invert" the sort,
       ## and assign all these indices back to the appropriate A and S,
       ## giving S_idx = [ -- 1 2], a_idx = [ 0 0 0 1 1 2 2 ].  Add 1 to
       ## a_idx, and we know which interval S(i) contains a.  It is
       ## easy to now check membership by comparing S(a_idx) == a.  This
       ## magic works because S starts out sorted, and because sort
       ## preserves the relative order of identical elements.
-      lt = length (s);
-      [s, sidx] = sort (s);
-      [v, p] = sort ([s(2:lt); a(:)]);
+      [v, p] = sort ([S(2:lt); a(:)]);
       idx(p) = cumsum (p <= lt-1) + 1;
       idx = idx(lt:end);
-      if (iscell (a) || iscell (s))
+      if (iscell (a) || iscell (S))
         c = (cellfun ("length", a)
-             == reshape (cellfun ("length", s(idx)), size (a)));
+	     == reshape (cellfun ("length", S(idx)), size (a)));
         idx2 = find (c);
-        c(idx2) = all (char (a(idx2)) == char (s(idx)(idx2)), 2);
-        index = zeros (size (c));
-        index(c) = sidx(idx(c));
+        c(idx2) = all (char (a(idx2)) == char (S(idx)(idx2)), 2);
       else
-	## Both A and S are matrices.
-         c = (a == reshape (s (idx), size (a)));
-        index = zeros (size (c));
-        index(c) = sidx(idx(c));
+        c = (a == reshape (S (idx), size (a)));
       endif
     endif
   endif
 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
 %!xtest assert (ismember ('', {'abc', 'def'}), false);
-%!fail ('ismember ([], {1, 2})', 'error:.*');
+%!xtest fail ('ismember ([], {1, 2})', 'error:.*');
 %!fail ('ismember ({[]}, {1, 2})', 'error:.*');
 %!assert (ismember ({'foo', 'bar'}, {'foobar'}), logical ([0, 0]))
 %!assert (ismember ({'foo'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar', 'bar'}), true)
 %!assert (ismember ({'foo', 'bar'}, {'foobar', 'bar'}), logical ([0, 1]))
 %!assert (ismember ({'xfb', 'f', 'b'}, {'fb', 'b'}), logical ([0, 0, 1]))
+%!assert (ismember ("1", "0123456789."), true)
