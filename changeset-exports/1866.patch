# HG changeset patch
# User jwe
# Date 823432149 0
#      Sun Feb 04 11:09:09 1996 +0000
# Node ID b6c48195b552fd272f3d1c8c907e407737830f62
# Parent  0e095fed283c21911c52d225439b236a12578d75
[project @ 1996-02-04 11:07:17 by jwe]

diff --git a/liboctave/LinConst.cc b/liboctave/LinConst.cc
--- a/liboctave/LinConst.cc
+++ b/liboctave/LinConst.cc
@@ -37,136 +37,16 @@ Software Foundation, 59 Temple Place - S
 // error handling
 
 void
 LinConst::error (const char* msg)
 {
   (*current_liboctave_error_handler) ("fatal LinConst error: %s", msg);
 }
 
-LinConst::LinConst (const Matrix& a_eq, const ColumnVector& b_eq,
-		    const Matrix& a_ineq, const ColumnVector& b_ineq)
-{
-  // Need some checks here.
-
-  int nc_eq = b_eq.capacity ();
-  int nc_ineq = b_ineq.capacity ();
-  nb = nc_eq + nc_ineq;
-
-  lb.resize (nb);
-  ub.resize (nb);
-
-  lb.insert (b_eq, 0);
-  lb.insert (-b_ineq, nc_eq);
-
-  ub.insert (b_eq, 0);
-  ub.fill (DBL_MAX, nc_eq, nb-1);
-
-  int nx = a_eq.columns ();
-
-  A.resize (nb, nx);
-
-  A.insert (a_eq, 0, 0);
-  A.insert (a_ineq, nc_eq, 0);
-}
-
-LinConst&
-LinConst::resize (int nc, int n)
-{
-  nb = nc;
-  lb.resize (nb);
-  A.resize (nb, n);
-  ub.resize (nb);
-
-  return *this;
-}
-
-Matrix
-LinConst::eq_constraint_matrix (void) const
-{
-  int anr = A.rows ();
-  int anc = A.columns ();
-  Matrix retval (anr, anc);
-  int count = 0;
-  for (int i = 0; i < anr; i++)
-    {
-      if (lb.elem (i) == ub.elem (i))
-	{
-	  retval.insert (A.extract (i, 0, i, anc-1), count, 0);
-	  count++;
-	}
-    }
-  retval.resize (count, anc);
-  return retval;
-}
-
-Matrix
-LinConst::ineq_constraint_matrix (void) const
-{
-  int anr = A.rows ();
-  int anc = A.columns ();
-  Matrix retval (2*anr, anc);
-  int count = 0;
-  for (int i = 0; i < anr; i++)
-    {
-      if (lb.elem (i) != ub.elem (i))
-	{
-	  Matrix tmp = A.extract (i, 0, i, anc-1);
-	  retval.insert (tmp, count, 0);
-	  count++;
-	  if (ub.elem (i) < DBL_MAX)
-	    {
-	      retval.insert (-tmp, count, 0);
-	      count++;
-	    }
-	}
-    }
-  retval.resize (count, anc);
-  return retval;
-}
-
-ColumnVector
-LinConst::eq_constraint_vector (void) const
-{
-  ColumnVector retval (nb);
-  int count = 0;
-  for (int i = 0; i < nb; i++)
-    {
-      if (lb.elem (i) == ub.elem (i))
-	{
-	  retval.elem (count) = lb.elem (i);
-	  count++;
-	}
-    }
-  retval.resize (count);
-  return retval;
-}
-
-ColumnVector
-LinConst::ineq_constraint_vector (void) const
-{
-  ColumnVector retval (2*nb);
-  int count = 0;
-  for (int i = 0; i < nb; i++)
-    {
-      if (lb.elem (i) != ub.elem (i))
-	{
-	  retval.elem (count) = -lb.elem (i);
-	  count++;
-	  if (ub.elem (i) < DBL_MAX)
-	    {
-	      retval.elem (count) = ub.elem (i);
-	      count++;
-	    }
-	}
-    }
-  retval.resize (count);
-  return retval;
-}
-
 ostream&
 operator << (ostream& os, const LinConst& c)
 {
   for (int i = 0; i < c.size (); i++)
     os << c.lower_bound (i) << " " << c.upper_bound (i) << "\n";
 
   os << "\n";
   os << c.constraint_matrix ();
diff --git a/liboctave/LinConst.h b/liboctave/LinConst.h
--- a/liboctave/LinConst.h
+++ b/liboctave/LinConst.h
@@ -1,12 +1,12 @@
 // LinConst.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -32,79 +32,68 @@ class ostream;
 
 class ColumnVector;
 
 #include <cfloat>
 
 #include "dMatrix.h"
 #include "Bounds.h"
 
-class LinConst : public Bounds
+class
+LinConst : public Bounds
 {
 public:
 
-  LinConst (void) : Bounds () { }
-  LinConst (int nc, int n) : Bounds (nc), A (nb, n) {}
-
-  LinConst (int eq, int ineq, int n)
-    : Bounds (eq+ineq), A (nb, n) {}
+  LinConst (void)
+    : Bounds (), A () { }
 
   LinConst (const ColumnVector& l, const Matrix& amat, const ColumnVector& u)
     : Bounds (l, u), A (amat)
       {
-	if (nb != amat.rows ())
-	  error ("inconsistent sizes for constraint matrix and bounds vectors");
+	if (Bounds::size () != amat.rows ())
+	  error ("nonconformant constraint matrix and bounds vectors");
       }
 
-  LinConst (const Matrix& A_eq, const ColumnVector& b_eq,
-	    const Matrix& A_ineq, const ColumnVector& b_ineq);
-
   LinConst (const LinConst& a)
-    : Bounds (a.lb, a.ub), A (a.constraint_matrix ()) {}
+    : Bounds (a.lb, a.ub), A (a.A) { }
 
   LinConst& operator = (const LinConst& a)
     {
-      nb = a.nb;
-      lb = a.lb;
-      A  = a.A;
-      ub = a.ub;
+      if (this != &a)
+	{
+	  Bounds::operator = (a);
 
+	  A  = a.A;
+	}
       return *this;
     }
 
-  LinConst& resize (int nclin, int n);
+  ~LinConst (void) { }
 
   Matrix constraint_matrix (void) const { return A; }
 
   LinConst& set_constraint_matrix (const Matrix& amat)
     {
       if (lb.capacity () != amat.rows ())
 	error ("inconsistent size for new linear constraint matrix");
 
       A = amat;
 
       return *this;
     }
 
-  Matrix eq_constraint_matrix (void) const;
-  Matrix ineq_constraint_matrix (void) const;
-
-  ColumnVector eq_constraint_vector (void) const;
-  ColumnVector ineq_constraint_vector (void) const;
-
   friend ostream& operator << (ostream& os, const LinConst& b);
 
 protected:
 
   Matrix A;
 
 private:
 
   void error (const char *msg);
-
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -39,17 +39,17 @@ class
 NPSOL_options
 {
 public:
 
   NPSOL_options (void) { init (); }
 
   NPSOL_options (const NPSOL_options& opt) { copy (opt); }
 
-  NPSOL_options& operator = (const NPSOL_options& opt);
+  NPSOL_options& operator = (const NPSOL_options& opt)
     {
       if (this != &opt)
 	copy (opt);
 
       return *this;
     }
 
   ~NPSOL_options (void) { }
diff --git a/liboctave/QP.h b/liboctave/QP.h
--- a/liboctave/QP.h
+++ b/liboctave/QP.h
@@ -46,17 +46,17 @@ public:
     : base_minimizer (x), H (H_arg), c (c_arg), bnds (), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const Bounds& b)
     : base_minimizer (x), H (H_arg), c (), bnds (b), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const LinConst& l)
-    : base_minimizer (x), H (H_arg), lc (l), bnds (), lc ()
+    : base_minimizer (x), H (H_arg), c (), bnds (), lc (l)
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg,
       const Bounds& b)
     : base_minimizer (x), H (H_arg), c (c_arg), bnds (b), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg,
@@ -86,28 +86,26 @@ public:
 	  H = qp.H;
 	  c = qp.c;
 	  bnds = qp.bnds;
 	  lc = qp.lc;
 	}
       return *this;
     }
 
-  ~QP (void) { }
+  virtual ~QP (void) { }
 
   Matrix hessian (void) const { return H; }
 
   ColumnVector linear_obj_coeff (void) const { return c; }
 
   Bounds bounds (void) const { return bnds; }
 
   LinConst linear_constraints (void) const { return lc; }
 
-  virtual ~QP (void) { }
-
 protected:
 
   Matrix H;  
   ColumnVector c;
   Bounds bnds;
   LinConst lc;
 
 private:
