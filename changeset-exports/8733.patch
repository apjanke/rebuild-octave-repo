# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234469795 18000
#      Thu Feb 12 15:16:35 2009 -0500
# Node ID 3ef774603887655daf6bdd718446d092b669de8f
# Parent  a669df7beb7354fbd7e981f64368f78b019d81d6
rename all uses of sortrows_idx to sort_rows_idx

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-12  John W. Eaton  <jwe@octave.org>
+
+	* general/sortrows.m: Call __sort_rows_idx__, not __sortrows_idx__.
+
 2009-02-12  Soren Hauberg  <hauberg@gmail.com>
 
 	* help/gen_doc_cache.m: Change API so we only handle one directory per
         call to this function.
 
 2009-02-12  Soren Hauberg  <hauberg@gmail.com>
 
 	* help/lookfor.m: Adapt to new cache scheme.
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -35,21 +35,21 @@ function [s, i] = sortrows (m, c)
   other_mode = "descend";
 
   if (issparse (m))
     error ("sortrows: sparse matrices not yet supported");
   endif
 
   ## If the sort is homogeneous, we use the built-in faster algorithm.
   if (nargin == 1)
-    i = __sortrows_idx__ (m, default_mode);
+    i = __sort_rows_idx__ (m, default_mode);
   elseif (all (c > 0))
-    i = __sortrows_idx__ (m(:,c), default_mode);
+    i = __sort_rows_idx__ (m(:,c), default_mode);
   elseif (all (c < 0))
-    i = __sortrows_idx__ (m(:,c), other_mode);
+    i = __sort_rows_idx__ (m(:,c), other_mode);
   else
     ## Otherwise, fall back to the old algorithm
     for ii = 1:length (c);
       if (c(ii) < 0)
         mode{ii} = other_mode;
       else
         mode{ii} = default_mode;
       endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2009-02-12  John W. Eaton  <jwe@octave.org>
 
+	* ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base.h,
+	ov-cell.h, ov-perm.h, ov-range.h, ov.h, data.cc, ov-base.cc,
+	ov-cell.cc: Rename all uses of sortrows_idx to sort_rows_idx.
+
 	* TEMPLATE-INST/Array-tc.cc: Don't instantiate sort functions for
 	Arrays of octave_value objects.
 	(octave_sort<octave_value>::ascending_compare,
 	octave_sort<octave_value>::descending_compare): Delete.
 
 	* ov.h (octave_value::cellstr_value): New function.
 	* ov-base.cc, ov-base.h (octave_base_value::cellstr_value):
 	New function.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5569,19 +5569,19 @@ ordered lists.\n\
 %! [v, i] = sort (a);
 %! assert (i, [1, 4, 2, 5, 3])
 
 %!error <Invalid call to sort.*> sort ();
 %!error <Invalid call to sort.*> sort (1, 2, 3, 4);
 
 */
 
-DEFUN (__sortrows_idx__, args, ,
+DEFUN (__sort_rows_idx__, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Function File} {} __sortrows_idx__ (@var{a}, @var{mode})\n\
+@deftypefn {Function File} {} __sort_rows_idx__ (@var{a}, @var{mode})\n\
 Sort the rows of the matrix @var{a} according to the order specified\n\
 by @var{mode}, which can either be `ascend' or `descend'.\n\
 Returns the index vector.\n\
 \n\
 This function does not yet support sparse matrices.\n\
 @end deftypefn\n")
 {
   octave_value retval;
@@ -5599,33 +5599,33 @@ This function does not yet support spars
     {
       std::string mode = args(1).string_value();
       if (mode == "ascend")
         smode = ASCENDING;
       else if (mode == "descend")
         smode = DESCENDING;
       else
         {
-          error ("__sortrows_idx__: mode must be either \"ascend\" or \"descend\"");
+          error ("__sort_rows_idx__: mode must be either \"ascend\" or \"descend\"");
           return retval;
         }
     }
 
   octave_value arg = args(0);
 
   if (arg.is_sparse_type ())
-    error ("__sortrows_idx__: sparse matrices not yet supported");
+    error ("__sort_rows_idx__: sparse matrices not yet supported");
   if (arg.ndims () == 2)
     {
-      Array<octave_idx_type> idx = arg.sortrows_idx (smode);
+      Array<octave_idx_type> idx = arg.sort_rows_idx (smode);
 
       retval = NDArray (idx, true);
     }
   else
-    error ("__sortrows_idx__: needs a 2-dimensional object");
+    error ("__sort_rows_idx__: needs a 2-dimensional object");
 
   return retval;
 }
 
 DEFUN (issorted, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} issorted (@var{a}, @var{rows})\n\
 Returns true if the array is sorted, ascending or descending.\n\
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -104,18 +104,18 @@ public:
     { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return to_dense ().sort (sidx, dim, mode); }
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return to_dense ().issorted (mode); }
 
-  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const
-    { return to_dense ().sortrows_idx (mode); }
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
+    { return to_dense ().sort_rows_idx (mode); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return to_dense ().issorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -122,17 +122,17 @@ public:
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return matrix.is_sorted (mode); }
 
-  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return matrix.sort_rows_idx (mode); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return matrix.is_sorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -106,17 +106,17 @@ public:
       sidx.resize (dim_vector (1, 1)); 
       sidx(0) = 0; 
       return octave_value (scalar); 
     }
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
-  Array<octave_idx_type> sortrows_idx (sortmode) const
+  Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -991,19 +991,19 @@ sortmode
 octave_base_value::issorted (sortmode) const
 {
   gripe_wrong_type_arg ("octave_base_value::issorted ()", type_name ());
 
   return UNSORTED;
 }
 
 Array<octave_idx_type>
-octave_base_value::sortrows_idx (sortmode) const
+octave_base_value::sort_rows_idx (sortmode) const
 {
-  gripe_wrong_type_arg ("octave_base_value::sortrows_idx ()", type_name ());
+  gripe_wrong_type_arg ("octave_base_value::sort_rows_idx ()", type_name ());
 
   return Array<octave_idx_type> ();
 }
 
 sortmode
 octave_base_value::issorted_rows (sortmode) const
 {
   gripe_wrong_type_arg ("octave_base_value::issorted_rows ()", type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -514,17 +514,18 @@ public:
   virtual octave_value sort (octave_idx_type dim = 0, 
 			     sortmode mode = ASCENDING) const;
   virtual octave_value sort (Array<octave_idx_type> &sidx, 
 			     octave_idx_type dim = 0,
 			     sortmode mode = ASCENDING) const;
 
   virtual sortmode issorted (sortmode mode = UNSORTED) const;
 
-  virtual Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const;
+  virtual Array<octave_idx_type>
+  sort_rows_idx (sortmode mode = ASCENDING) const;
 
   virtual sortmode issorted_rows (sortmode mode = UNSORTED) const;
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
   virtual bool islocked (void) const { return false; }
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -418,17 +418,17 @@ octave_cell::sort (Array<octave_idx_type
     }
   else
     error ("sort: only cell arrays of character strings may be sorted");
   
   return retval;
 }
 
 Array<octave_idx_type>
-octave_cell::sortrows_idx (sortmode mode) const
+octave_cell::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> retval;
 
   if (is_cellstr ())
     {
       Array<std::string> tmp = cellstr_value ();
 
       retval = tmp.sort_rows_idx (mode);
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -88,17 +88,17 @@ public:
 
   size_t byte_size (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const;
 
-  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const;
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -91,18 +91,18 @@ public:
     { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return to_dense ().sort (sidx, dim, mode); }
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return to_dense ().issorted (mode); }
 
-  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const
-    { return to_dense ().sortrows_idx (mode); }
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
+    { return to_dense ().sort_rows_idx (mode); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return to_dense ().issorted_rows (mode); }
 
   bool is_perm_matrix (void) const { return true; }
 
   bool is_matrix_type (void) const { return true; }
 
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -138,17 +138,17 @@ public:
 
   octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return range.sort (sidx, dim, mode); }
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return range.is_sorted (mode); }
 
-  Array<octave_idx_type> sortrows_idx (sortmode) const
+  Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -997,18 +997,18 @@ public:
     { return rep->sort (dim, mode); } 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		 sortmode mode = ASCENDING) const
     { return rep->sort (sidx, dim, mode); } 
 
   sortmode issorted (sortmode mode = UNSORTED) const
     { return rep->issorted (mode); }
 
-  Array<octave_idx_type> sortrows_idx (sortmode mode = ASCENDING) const
-    { return rep->sortrows_idx (mode); }
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
+    { return rep->sort_rows_idx (mode); }
 
   sortmode issorted_rows (sortmode mode = UNSORTED) const
     { return rep->issorted_rows (mode); }
 
   void lock (void) { rep->lock (); }
 
   void unlock (void) { rep->unlock (); }
 
