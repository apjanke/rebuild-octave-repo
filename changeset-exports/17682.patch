# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1382052991 -7200
#      Fri Oct 18 01:36:31 2013 +0200
# Node ID 93e272018df26335dc8fac843fa7212c29431d82
# Parent  f6fded8395133cc87b01bbe4d616d294bd6a66cf
Correct dimesion of return values form sparse min/max function with empty
matrices (bug #40295)


* dSparse.cc (SparseMatrix SparseMatrix::max (Array<octave_idx-type>&, int)) :
  Specialize return values if called with an empty matrix
  (SparseMatrix SparseMatrix::min (Array<octave_idx-type>&, int)) : ditto

* CSparse.cc (SparseComplexMatrix SparseComplexMatrix::max (
  Array<octave_idx-type>&, int)) : Specialize return values if called with
  an empty matrix
  (SparseComplexMatrix SparseComplexMatrix::min (Array<octave_idx-type>&,
  int)) : ditto

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -256,25 +256,33 @@ SparseComplexMatrix::max (int dim) const
 SparseComplexMatrix
 SparseComplexMatrix::max (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseComplexMatrix result;
   dim_vector dv = dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv(1);
 
-  if (nr == 0 || nc == 0 || dim >= dv.length ())
-    return result;
+
+  if (dim >= dv.length ())
+    {
+      idx_arg.resize (dim_vector (nr, nc), 0);
+      return *this;
+    }
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
   if (dim == 0)
     {
-      idx_arg.clear (1, nc);
+      idx_arg.resize (dim_vector (nr == 0 ? 0 : 1, nc), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseComplexMatrix (nr == 0 ? 0 : 1, nc);
+
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           Complex tmp_max;
           double abs_max = octave_NaN;
           octave_idx_type idx_j = 0;
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
@@ -324,16 +332,22 @@ SparseComplexMatrix::max (Array<octave_i
               result.xdata (ii) = tmp;
               result.xridx (ii++) = 0;
             }
           result.xcidx (j+1) = ii;
         }
     }
   else
     {
+      idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
+
+
       idx_arg.resize (dim_vector (nr, 1), 0);
 
       for (octave_idx_type i = cidx (0); i < cidx (1); i++)
         idx_arg.elem (ridx (i)) = -1;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
@@ -410,25 +424,32 @@ SparseComplexMatrix::min (int dim) const
 SparseComplexMatrix
 SparseComplexMatrix::min (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseComplexMatrix result;
   dim_vector dv = dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv(1);
 
-  if (nr == 0 || nc == 0 || dim >= dv.length ())
-    return result;
+  if (dim >= dv.length ())
+    {
+      idx_arg.resize (dim_vector (nr, nc), 0);
+      return *this;
+    }
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
   if (dim == 0)
     {
-      idx_arg.clear (1, nc);
+      idx_arg.resize (dim_vector (nr == 0 ? 0 : 1, nc), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseComplexMatrix (nr == 0 ? 0 : 1, nc);
+
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           Complex tmp_min;
           double abs_min = octave_NaN;
           octave_idx_type idx_j = 0;
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
@@ -478,17 +499,20 @@ SparseComplexMatrix::min (Array<octave_i
               result.xdata (ii) = tmp;
               result.xridx (ii++) = 0;
             }
           result.xcidx (j+1) = ii;
         }
     }
   else
     {
-      idx_arg.resize (dim_vector (nr, 1), 0);
+      idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
 
       for (octave_idx_type i = cidx (0); i < cidx (1); i++)
         idx_arg.elem (ridx (i)) = -1;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             if (idx_arg.elem (i) != -1)
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -274,25 +274,32 @@ SparseMatrix::max (int dim) const
 SparseMatrix
 SparseMatrix::max (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseMatrix result;
   dim_vector dv = dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv(1);
 
-  if (nr == 0 || nc == 0 || dim >= dv.length ())
-    return result;
+  if (dim >= dv.length ())
+    {
+      idx_arg.resize (dim_vector (nr, nc), 0);
+      return *this;
+    }
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
   if (dim == 0)
     {
-      idx_arg.clear (1, nc);
+      idx_arg.resize (dim_vector (nr == 0 ? 0 : 1, nc), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseMatrix (nr == 0 ? 0 : 1, nc);
+
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           double tmp_max = octave_NaN;
           octave_idx_type idx_j = 0;
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               if (ridx (i) != idx_j)
@@ -336,17 +343,20 @@ SparseMatrix::max (Array<octave_idx_type
               result.xridx (ii++) = 0;
             }
           result.xcidx (j+1) = ii;
 
         }
     }
   else
     {
-      idx_arg.resize (dim_vector  (nr, 1), 0);
+      idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
       for (octave_idx_type i = cidx (0); i < cidx (1); i++)
         idx_arg.elem (ridx (i)) = -1;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             if (idx_arg.elem (i) != -1)
@@ -422,25 +432,32 @@ SparseMatrix::min (int dim) const
 SparseMatrix
 SparseMatrix::min (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseMatrix result;
   dim_vector dv = dims ();
   octave_idx_type nr = dv(0);
   octave_idx_type nc = dv(1);
 
-  if (nr == 0 || nc == 0 || dim >= dv.length ())
-    return result;
+  if (dim >= dv.length ())
+    {
+      idx_arg.resize (dim_vector (nr, nc), 0);
+      return *this;
+    }
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
   if (dim == 0)
     {
-      idx_arg.clear (1, nc);
+      idx_arg.resize (dim_vector (nr == 0 ? 0 : 1, nc), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseMatrix (nr == 0 ? 0 : 1, nc);
+
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           double tmp_min = octave_NaN;
           octave_idx_type idx_j = 0;
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               if (ridx (i) != idx_j)
@@ -484,17 +501,20 @@ SparseMatrix::min (Array<octave_idx_type
               result.xridx (ii++) = 0;
             }
           result.xcidx (j+1) = ii;
 
         }
     }
   else
     {
-      idx_arg.resize (dim_vector (nr, 1), 0);
+      idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
+
+      if (nr == 0 || nc == 0 || dim >= dv.length ())
+        return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
       for (octave_idx_type i = cidx (0); i < cidx (1); i++)
         idx_arg.elem (ridx (i)) = -1;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             if (idx_arg.elem (i) != -1)
