# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542354146 18000
#      Fri Nov 16 02:42:26 2018 -0500
# Node ID 6a03af2c4c9ebe2f344732db9fb2a463dc0b59c5
# Parent  661dfb062485435517f4ca0a68c3838f2124dd3d
use symbol_info_list to gather data for saving workspace on crash

* call-stack.h, call-stack.cc (stack_frame::make_symbol_info_list):
New function.
(stack_frame::glob_symbol_info): Use it.
(stack_frame::regexp_symbol_info, stack_frame::get_symbol_info):
New functions.

* (call_stack::regexp_symbol_info, call_stack::get_symbol_info,
call_stack::top_scope_symbol_info): New functions.

* load-save.cc (load_save_system::dump_octave_core): Call
call_stack::top_scope_symbol_info to get data to save.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -90,39 +90,55 @@ namespace octave
       return false;
     else if (this->fcn_name () != rhs.fcn_name ())
       return false;
     else
       return true;
   }
 
   symbol_info_list
-  call_stack::stack_frame::glob_symbol_info (const std::string& pat) const
+  call_stack::stack_frame::make_symbol_info_list
+    (const std::list<symbol_record>& symrec_list) const
   {
-    std::list<octave::symbol_record> tmp = m_scope.glob (pat, true);
+    symbol_info_list symbol_stats;
 
-    octave::symbol_info_list symbol_stats;
-
-    for (const auto& sr : tmp)
+    for (const auto& sr : symrec_list)
       {
         octave_value value = sr.varval (m_context);
 
         if (value.is_defined ())
           {
             symbol_info syminf (sr.name (), value, sr.is_automatic (),
                                 value.iscomplex (), sr.is_formal (),
                                 sr.is_global (), sr.is_persistent ());
 
             symbol_stats.append (syminf);
           }
       }
 
     return symbol_stats;
   }
 
+  symbol_info_list
+  call_stack::stack_frame::glob_symbol_info (const std::string& pat) const
+  {
+    return make_symbol_info_list (m_scope.glob (pat, true));
+  }
+
+  symbol_info_list
+  call_stack::stack_frame::regexp_symbol_info (const std::string& pat) const
+  {
+    return make_symbol_info_list (m_scope.regexp (pat, true));
+  }
+
+  symbol_info_list call_stack::stack_frame::get_symbol_info (void) const
+  {
+    return make_symbol_info_list (m_scope.all_variables ());
+  }
+
   call_stack::call_stack (interpreter& interp)
     : cs (), curr_frame (0), m_max_stack_depth (1024), m_interpreter (interp)
   {
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     push (nullptr, nullptr, symtab.top_scope (), 0);
   }
 
@@ -683,16 +699,32 @@ namespace octave
   }
 
   symbol_info_list
   call_stack::glob_symbol_info (const std::string& pat) const
   {
     return cs[curr_frame].glob_symbol_info (pat);
   }
 
+  symbol_info_list
+  call_stack::regexp_symbol_info (const std::string& pat) const
+  {
+    return cs[curr_frame].glob_symbol_info (pat);
+  }
+
+  symbol_info_list call_stack::get_symbol_info (void) const
+  {
+    return cs[curr_frame].get_symbol_info ();
+  }
+
+  symbol_info_list call_stack::top_scope_symbol_info (void) const
+  {
+    return cs[0].get_symbol_info ();
+  }
+
   octave_value
   call_stack::max_stack_depth (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_max_stack_depth, args, nargout,
                                   "max_stack_depth", 0);
   }
 }
 
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -77,18 +77,25 @@ namespace octave
       int column (void) const { return m_column; }
 
       std::string fcn_file_name (void) const;
 
       std::string fcn_name (bool print_subfn = true) const;
 
       bool operator == (const stack_frame& rhs) const;
 
+      symbol_info_list
+      make_symbol_info_list (const std::list<symbol_record>& srl) const;
+
       symbol_info_list glob_symbol_info (const std::string& pat) const;
 
+      symbol_info_list regexp_symbol_info (const std::string& pat) const;
+
+      symbol_info_list get_symbol_info (void) const;
+
     private:
 
       octave_function *m_fcn;
       unwind_protect *m_unwind_protect_frame;
       int m_line;
       int m_column;
       symbol_scope m_scope;
       symbol_record::context_id m_context;
@@ -260,16 +267,22 @@ namespace octave
     octave_map empty_backtrace (void) const;
 
     void pop (void);
 
     void clear (void) { cs.clear (); }
 
     symbol_info_list glob_symbol_info (const std::string& pat) const;
 
+    symbol_info_list regexp_symbol_info (const std::string& pat) const;
+
+    symbol_info_list get_symbol_info (void) const;
+
+    symbol_info_list top_scope_symbol_info (void) const;
+
     octave_value max_stack_depth (const octave_value_list& args, int nargout);
 
   private:
 
     // The current call stack.
     std::deque<stack_frame> cs;
 
     size_t curr_frame;
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1027,47 +1027,40 @@ namespace octave
 
   void load_save_system::dump_octave_core (std::ostream& os,
                                            const char *fname,
                                            const load_save_format& fmt,
                                            bool save_as_floats)
   {
     write_header (os, fmt);
 
-    symbol_table& symtab = m_interpreter.get_symbol_table ();
-
-    symbol_scope top_scope = symtab.top_scope ();
+    call_stack& cs = m_interpreter.get_call_stack ();
 
-    symbol_record::context_id context = top_scope.current_context ();
-
-    std::list<symbol_record> vars = top_scope.all_variables ();
+    symbol_info_list syminfo_list = cs.top_scope_symbol_info ();
 
     double save_mem_size = 0;
 
-    for (const auto& var : vars)
+    for (const auto& syminfo : syminfo_list)
       {
-        octave_value val = var.varval (context);
+        octave_value val = syminfo.value ();
 
-        if (val.is_defined ())
-          {
-            std::string name = var.name ();
-            std::string help;
-            bool global = var.is_global ();
+        std::string name = syminfo.name ();
+        std::string help;
+        bool global = syminfo.is_global ();
 
-            double val_size = val.byte_size () / 1024;
+        double val_size = val.byte_size () / 1024;
 
-            // FIXME: maybe we should try to throw out the largest first...
+        // FIXME: maybe we should try to throw out the largest first...
 
-            if (m_octave_core_file_limit < 0
-                || save_mem_size + val_size < m_octave_core_file_limit)
-              {
-                save_mem_size += val_size;
+        if (m_octave_core_file_limit < 0
+            || save_mem_size + val_size < m_octave_core_file_limit)
+          {
+            save_mem_size += val_size;
 
-                do_save (os, val, name, help, global, fmt, save_as_floats);
-              }
+            do_save (os, val, name, help, global, fmt, save_as_floats);
           }
       }
 
     message (nullptr, "save to '%s' complete", fname);
   }
 
   // Install a variable with name NAME and the value VAL in the
   // symbol table.  If GLOBAL is TRUE, make the variable global.
