# HG changeset patch
# User jwe
# Date 1193185964 0
#      Wed Oct 24 00:32:44 2007 +0000
# Node ID 2002804df7828f9092ed623cb2043d5b869a0edf
# Parent  3e4dab6a136c5906f7f4709f1ad5c40446896fb1
[project @ 2007-10-24 00:32:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,29 @@
 2007-10-23  John W. Eaton  <jwe@octave.org>
 
+	* graphics.cc (is_handle (const graphics_handle&)): New function.
+	(gh_manager::do_free, reparent, base_properties::set_parent,
+	properties::get_title, properties::get_xlabel,
+	properties::get_ylabel, properties::get_zlabel,
+	properties::remove_child, make_graphics_object, F__go_figure__,
+	F__go_delete__, __go_axes_init__): Call OK on graphics handle
+	object instead of relying on implicit conversion operator.
+	* graphics.h.in (graphics_handle::operator double ()): Delete.
+	(graphics_handle::operator bool ()): Delete.
+	(gh_manager::do_handle_list, gh_manager::do_figure_handle_list,
+	base_properties::adopt): Call VALUE on graphics handle object
+	instead of relying on implicit conversion operator.
+
+	* ov-base.h (DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Call
+	DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2 with "( )" as arg list
+	instead of "()".
+
+	* mxarray.h.in (mxClassID): Delete trailing comma in enum decl.
+
 	* symtab.h (symbol_table::symbol_table): Reduce default table size
 	to 64.
 
 2007-10-22  Kim Hansen  <kimhanse@gmail.com>
 
 	* unwind-prot.cc: Include <cstring>.
 
 2007-10-22  David Bateman  <dbateman@free.fr>
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -456,17 +456,17 @@ gh_manager::get_handle (const std::strin
     }
 
   return retval;
 }
 
 void
 gh_manager::do_free (const graphics_handle& h)
 {
-  if (h)
+  if (h.ok ())
     {
       if (h.value () != 0)
 	{
 	  iterator p = handle_map.find (h);
 
 	  if (p != handle_map.end ())
 	    {
 	      handle_map.erase (p);
@@ -518,17 +518,17 @@ reparent (const octave_value& ov, const 
   graphics_handle h = octave_NaN;
 
   double val = ov.double_value ();
 
   if (! error_state)
     {
       h = gh_manager::lookup (val);
 
-      if (h)
+      if (h.ok ())
 	{
 	  graphics_object obj = gh_manager::get_object (h);
 	  
 	  graphics_handle parent_h = obj.get_parent ();
 
 	  graphics_object parent_obj = gh_manager::get_object (parent_h);
 
 	  parent_obj.remove_child (h);
@@ -571,16 +571,22 @@ static void
 adopt (const graphics_handle& p, const graphics_handle& h)
 {
   graphics_object parent_obj = gh_manager::get_object (p);
 
   parent_obj.adopt (h);
 }
 
 static bool
+is_handle (const graphics_handle& h)
+{
+  return h.ok ();
+}
+
+static bool
 is_handle (double val)
 {
   graphics_handle h = gh_manager::lookup (val);
 
   return h.ok ();
 }
 
 static bool
@@ -704,17 +710,17 @@ base_properties::set_parent (const octav
   double tmp = val.double_value ();
 
   graphics_handle new_parent = octave_NaN;
 
   if (! error_state)
     {
       new_parent = gh_manager::lookup (tmp);
 
-      if (new_parent)
+      if (new_parent.ok ())
 	{
 	  graphics_object parent_obj = gh_manager::get_object (parent);
 
 	  parent_obj.remove_child (__myhandle__);
 
 	  parent = new_parent;
 
 	  ::adopt (parent, __myhandle__);
@@ -1369,44 +1375,44 @@ axes::properties::set_defaults (base_gra
   children = Matrix ();
 
   override_defaults (obj);
 }
 
 graphics_handle
 axes::properties::get_title (void) const
 {
-  if (! title)
+  if (! title.ok ())
     title = gh_manager::make_graphics_handle ("text", __myhandle__);
 
   return title;
 }
 
 graphics_handle
 axes::properties::get_xlabel (void) const
 {
-  if (! xlabel)
+  if (! xlabel.ok ())
     xlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
   return xlabel;
 }
 
 graphics_handle
 axes::properties::get_ylabel (void) const
 {
-  if (! ylabel)
+  if (! ylabel.ok ())
     ylabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
   return ylabel;
 }
 
 graphics_handle
 axes::properties::get_zlabel (void) const
 {
-  if (! zlabel)
+  if (! zlabel.ok ())
     zlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
   return zlabel;
 }
 
 octave_value
 axes::properties::get (void) const
 {
@@ -1587,23 +1593,23 @@ axes::properties::get (const property_na
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 void
 axes::properties::remove_child (const graphics_handle& h)
 {
-  if (title && h == title)
+  if (title.ok () && h == title)
     title = gh_manager::make_graphics_handle ("text", __myhandle__);
-  else if (xlabel && h == xlabel)
+  else if (xlabel.ok () && h == xlabel)
     xlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
-  else if (ylabel && h == ylabel)
+  else if (ylabel.ok () && h == ylabel)
     ylabel = gh_manager::make_graphics_handle ("text", __myhandle__);
-  else if (zlabel && h == zlabel)
+  else if (zlabel.ok () && h == zlabel)
     zlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
   else
     base_properties::remove_child (h);
 }
 
 void
 axes::properties::delete_children (void)
 {
@@ -2646,17 +2652,17 @@ make_graphics_object (const std::string&
   octave_value retval;
 
   double val = args(0).double_value ();
 
   if (! error_state)
     {
       graphics_handle parent = gh_manager::lookup (val);
 
-      if (parent)
+      if (parent.ok ())
 	{
 	  graphics_handle h
 	    = gh_manager::make_graphics_handle (go_name, parent);
 
 	  if (! error_state)
 	    {
 	      adopt (parent, h);
 
@@ -2705,17 +2711,17 @@ Undocumented internal function.\n\
 
 	      if (xisnan (val))
 		h = gh_manager::make_graphics_handle ("figure", 0);
 	      else if (val > 0 && D_NINT (val) == val)
 		h = gh_manager::make_figure_handle (val);
 	      else
 		error ("__go_figure__: invalid figure number");
 
-	      if (! error_state && h)
+	      if (! error_state && h.ok ())
 		{
 		  adopt (0, h);
 
 		  xset (h, args.splice (0, 1));
 
 		  retval = h.value ();
 		}
 	      else
@@ -2808,17 +2814,17 @@ Undocumented internal function.\n\
       graphics_handle h = octave_NaN;
 
       double val = args(0).double_value ();
 
       if (! error_state)
 	{
 	  h = gh_manager::lookup (val);
 
-	  if (h)
+	  if (h.ok ())
 	    {
 	      graphics_object obj = gh_manager::get_object (h);
 
 	      graphics_handle parent_h = obj.get_parent ();
 
 	      graphics_object parent_obj = gh_manager::get_object (parent_h);
 
 	      parent_obj.remove_child (h);
@@ -2862,17 +2868,17 @@ Undocumented internal function.\n\
       graphics_handle h = octave_NaN;
 
       double val = args(0).double_value ();
 
       if (! error_state)
 	{
 	  h = gh_manager::lookup (val);
 
-	  if (h)
+	  if (h.ok ())
 	    {
 	      graphics_object obj = gh_manager::get_object (h);
 
 	      obj.set_defaults (mode);
 	    }
 	  else
 	    error ("__go_axes_init__: invalid graphics object (= %g)", val);
 	}
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -459,18 +459,16 @@ public:
     if (&a != this)
       val = a.val;
 
     return *this;
   }
 
   ~graphics_handle (void) { }
 
-  operator double (void) const { return val; }
-
   double value (void) const { return val; }
 
   octave_value as_octave_value (void) const
   {
     return ok () ? octave_value (val) : octave_value (Matrix ());
   }
 
   graphics_handle operator ++ (void)
@@ -496,18 +494,16 @@ public:
   {
     graphics_handle h = *this;
     --val;
     return h;
   }
 
   bool ok (void) const { return ! xisnan (val); }
 
-  operator bool () const { return ok (); }
-
 private:
   double val;
 };
 
 inline bool
 operator == (const graphics_handle& a, const graphics_handle& b)
 {
   return a.value () == b.value ();
@@ -574,17 +570,17 @@ public:
   graphics_handle get_parent (void) const { return parent; }
 
   void remove_child (const graphics_handle& h);
 
   void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
-    children(n) = h;
+    children(n) = h.value ();
   }
 
   void set_parent (const octave_value& val);
 
   void reparent (const graphics_handle& new_parent) { parent = new_parent; }
 
   virtual void delete_children (void);
 
@@ -1908,28 +1904,34 @@ private:
 
   graphics_handle do_make_figure_handle (double val);
 
   Matrix do_handle_list (void)
   {
     Matrix retval (1, handle_map.size ());
     octave_idx_type i = 0;
     for (const_iterator p = handle_map.begin (); p != handle_map.end (); p++)
-      retval(i++) = p->first;
+      {
+	graphics_handle h = p->first;
+	retval(i++) = h.value ();
+      }
     return retval;
   }
 
   Matrix do_figure_handle_list (void)
   {
     Matrix retval (1, figure_list.size ());
     octave_idx_type i = 0;
     for (const_figure_list_iterator p = figure_list.begin ();
 	 p != figure_list.end ();
 	 p++)
-      retval(i++) = *p;
+      {
+	graphics_handle h = *p;
+	retval(i++) = h.value ();
+      }
     return retval;
   }
 
   void do_push_figure (const graphics_handle& h);
 
   void do_pop_figure (const graphics_handle& h);
 
   graphics_handle do_current_figure (void) const
diff --git a/src/mxarray.h.in b/src/mxarray.h.in
--- a/src/mxarray.h.in
+++ b/src/mxarray.h.in
@@ -66,17 +66,17 @@ typedef enum
     mxINT8_CLASS,
     mxUINT8_CLASS,
     mxINT16_CLASS,
     mxUINT16_CLASS,
     mxINT32_CLASS,
     mxUINT32_CLASS,
     mxINT64_CLASS,
     mxUINT64_CLASS,
-    mxFUNCTION_CLASS,
+    mxFUNCTION_CLASS
   }
   mxClassID;
 
 typedef int mxLogical;
 
 /* typedef Uint16 mxChar; */
 typedef char mxChar;
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -56,17 +56,17 @@ class octave_fcn_inline;
 class octave_value_list;
 class octave_lvalue;
 
 class tree_walker;
 
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2()
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2 ( )
 
 #define DECLARE_OV_BASE_TYPEID_FUNCTIONS_AND_DATA \
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2(virtual)
 
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2(VIRTUAL) \
   public: \
     VIRTUAL int type_id (void) const { return t_id; } \
     VIRTUAL std::string type_name (void) const { return t_name; } \
