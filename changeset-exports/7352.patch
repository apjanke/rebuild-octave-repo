# HG changeset patch
# User jwe
# Date 1199732085 0
#      Mon Jan 07 18:54:45 2008 +0000
# Node ID fab9bc33b9495aeeb4873ea7f360952b546f75a9
# Parent  8470a6b0b76941ccdd2fe40beed8a19dd8ec763e
[project @ 2008-01-07 18:54:45 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-01-07  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/copyfile.m, miscellaneous/movefile.m:
+	Error if glob call fails to match any files.
+
 2008-01-04  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* strings/strtrim.m: Doc fix.
 
 2008-01-04  Muthiah Annamalai  <muthuspost@gmail.com>
 
 	* general/sub2ind.m, general/ind2sub.m: Doc fix.
 
diff --git a/scripts/miscellaneous/copyfile.m b/scripts/miscellaneous/copyfile.m
--- a/scripts/miscellaneous/copyfile.m
+++ b/scripts/miscellaneous/copyfile.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2005, 2006, 2007 John W. Eaton
+## Copyright (C) 2005, 2006, 2007, 2008 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -71,16 +71,19 @@ function [status, msg, msgid] = copyfile
     ## If f1 has more than 1 element f2 must be a directory
     isdir = (exist (f2, "dir") != 0);
     if (length(f1) > 1 && ! isdir)
       error ("copyfile: when copying multiple files, second argument must be a directory");
     endif
     
     ## Protect the file name(s).
     f1 = glob (f1);
+    if (isempty (f1))
+      error ("copyfile: no files to move");
+    endif
     p1 = sprintf ("\"%s\" ", f1{:});
     p2 = tilde_expand (f2);
 
     if (isdir && length(p1) > max_cmd_line)
       l2 = length(p2) + length (cmd) + 6;
       while (! isempty(f1))
 	p1 = sprintf ("\"%s\" ", f1{1});
 	f1(1) = [];
diff --git a/scripts/miscellaneous/movefile.m b/scripts/miscellaneous/movefile.m
--- a/scripts/miscellaneous/movefile.m
+++ b/scripts/miscellaneous/movefile.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2005, 2006, 2007 John W. Eaton
+## Copyright (C) 2005, 2006, 2007, 2008 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -70,16 +70,19 @@ function [status, msg, msgid] = movefile
     ## If f1 has more than 1 element f2 must be a directory
     isdir = (exist (f2, "dir") != 0);
     if (length(f1) > 1 && ! isdir)
       error ("movefile: when moving multiple files, second argument must be a directory");
     endif
     
     ## Protect the file name(s).
     f1 = glob (f1);
+    if (isempty (f1))
+      error ("movefile: no files to move");
+    endif
     p1 = sprintf ("\"%s\" ", f1{:});
     p2 = tilde_expand (f2);
 
     if (isdir && length(p1) > max_cmd_line)
       l2 = length(p2) + length (cmd) + 6;
       while (! isempty(f1))
 	p1 = sprintf ("\"%s\" ", f1{1});
 	f1(1) = [];
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2008-01-07  John W. Eaton  <jwe@octave.org>
 
+	* gripes.cc (gripe_wrong_type_arg (const std::string&, const
+	octave_value&, bool)): New function.
+	* gripes.h: Provide decl.
+
+	* oct-stream.cc (printf_value_cache::printf_value_cache):
+	Reject structs, cells, objects, and lists.
+	(octave_base_stream::do_printf): Quit early if printf_value_cache
+	constructor fails.
+
 	* parse.y (make_anon_fcn_handle): Don't attempt to convert
 	expression to assignment to __retval__.
 
 2008-01-07  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* ov-builtin.h (octave_builtin): Tag with OCTINTERP_API.
 	* ov-dld-fcn.h (octave_dld_function): Likewise.
 
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -151,16 +151,23 @@ gripe_wrong_type_arg (const char *name, 
 		      bool is_error)
 {
   std::string type = tc.type_name ();
 
   gripe_wrong_type_arg (name, type, is_error);
 }
 
 void
+gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
+		      bool is_error)
+{
+  gripe_wrong_type_arg (name.c_str (), tc, is_error);
+}
+
+void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op)
 {
   std::string type = op.type_name ();
   error ("invalid operand `%s' for unary operator", type.c_str ());
 }
 
 void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op)
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -86,16 +86,20 @@ extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const std::string& s,
 		      bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
 		      bool is_error = true);
 
 extern OCTINTERP_API void
+gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
+		      bool is_error = true);
+
+extern OCTINTERP_API void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
 extern OCTINTERP_API void
 gripe_implicit_conversion (const char *id, const char *from, const char *to);
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -42,16 +42,17 @@ along with Octave; see the file COPYING.
 #include "byte-swap.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 #include "quit.h"
 
 #include "error.h"
+#include "gripes.h"
 #include "input.h"
 #include "oct-stdstrm.h"
 #include "oct-stream.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // Possible values for conv_err:
 //
@@ -2271,20 +2272,33 @@ octave_base_stream::flush (void)
 
 class
 printf_value_cache
 {
 public:
 
   enum state { ok, conversion_error };
 
-  printf_value_cache (const octave_value_list& args)
+  printf_value_cache (const octave_value_list& args, const std::string& who)
     : values (args), val_idx (0), elt_idx (0),
       n_vals (values.length ()), n_elts (0), data (0),
-      curr_state (ok) { }
+      curr_state (ok)
+  {
+    for (octave_idx_type i = 0; i < values.length (); i++)
+      {
+	octave_value val = values(i);
+
+	if (val.is_map () || val.is_cell () || val.is_object ()
+	    || val.is_list ())
+	  {
+	    gripe_wrong_type_arg (who, val);
+	    break;
+	  }
+      }
+  }
 
   ~printf_value_cache (void) { }
 
   // Get the current value as a double and advance the internal pointer.
   double double_value (void);
 
   // Get the current value as an int and advance the internal pointer.
   int int_value (void);
@@ -2522,17 +2536,20 @@ octave_base_stream::do_printf (printf_fo
   std::ostream *osp = output_stream ();
 
   if (osp)
     {
       std::ostream& os = *osp;
 
       const printf_format_elt *elt = fmt_list.first ();
 
-      printf_value_cache val_cache (args);
+      printf_value_cache val_cache (args, who);
+
+      if (error_state)
+	return retval;
 
       for (;;)
 	{
 	  OCTAVE_QUIT;
 
 	  if (elt)
 	    {
 	      // NSA is the number of `star' args to convert.
