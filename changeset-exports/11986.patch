# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1244697199 -7200
#      Thu Jun 11 07:13:19 2009 +0200
# Branch release-3-2-x
# Node ID 66a639bfc52397e64136b541a3a871f7e398bce9
# Parent  bdc383a457fbe626d720478cfc3a100ffc2dc2fc
tree_anon_fcn_handle::dup: don't convert to tree_constant

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2009-06-10  John W. Eaton  <jwe@octave.org>
 
+	* pt-fcn-handle.cc (tree_anon_fcn_handle::dup): Don't convert to
+	tree_constant object here.  Do inherit from current symbol table
+	scope and context.  New test.
+
 	* lex.l	(handle_identifier): Set lexer_flags.looking_for_object_index
 	false if identifier is a keyword.
 	({IDENT}{S}*): Don't set lexer_flags.looking_for_object_index here.
 
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* octave.cc (octave_main): Call initialize_command_input
 	conditionally. Move line_editing update in front of it.
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
--- a/src/pt-fcn-handle.cc
+++ b/src/pt-fcn-handle.cc
@@ -134,16 +134,20 @@ tree_anon_fcn_handle::rvalue1 (int)
 /*
 %!function r = f2 (f, x)
 %!  r = f (x);
 %!function f = f1 (k)
 %!  f = @(x) f2 (@(y) y-k, x);
 %!test
 %! assert ((f1 (3)) (10) == 7)
 %!
+%!shared g
+%! g = @(t) feval (@(x) t*x, 2);
+%!assert (g(0.5) == 1)
+%!
 %!shared f, g, h
 %! h = @(x) sin (x);
 %! g = @(f, x) h (x);
 %! f = @() g (@(x) h, pi);
 %!assert (f () == sin (pi))
 */
 
 octave_value_list
@@ -154,90 +158,40 @@ tree_anon_fcn_handle::rvalue (int nargou
   if (nargout > 1)
     error ("invalid number of output arguments for anonymous function handle expression");
   else
     retval = rvalue1 (nargout);
 
   return retval;
 }
 
-#if 0
-tree_expression *
-tree_anon_fcn_handle::dup (symbol_table::scope_id parent_scope,
-			   symbol_table::context_id parent_context) const
-{
-  tree_parameter_list *param_list = parameter_list ();
-  tree_parameter_list *ret_list = return_list ();
-  tree_statement_list *cmd_list = body ();
-  symbol_table::scope_id this_scope = scope ();
-
-  symbol_table::scope_id new_scope = symbol_table::dup_scope (this_scope);
-
-  if (new_scope > 0)
-    symbol_table::inherit (new_scope, parent_scope, parent_context);
-
-  tree_anon_fcn_handle *new_afh = new
-    tree_anon_fcn_handle (param_list ? param_list->dup (new_scope, 0) : 0,
-			  ret_list ? ret_list->dup (new_scope, 0) : 0,
-			  cmd_list ? cmd_list->dup (new_scope, 0) : 0,
-			  new_scope, line (), column ());
-
-  new_afh->copy_base (*this);
-
-  return new_afh;
-}
-#endif
-
 tree_expression *
 tree_anon_fcn_handle::dup (symbol_table::scope_id,
 			   symbol_table::context_id) const
 {
-  // Instead of simply duplicating, transform to a tree_constant
-  // object that contains an octave_fcn_handle object with the symbol
-  // table of the referenced function primed with values from the
-  // current scope and context.
-
   tree_parameter_list *param_list = parameter_list ();
   tree_parameter_list *ret_list = return_list ();
   tree_statement_list *cmd_list = body ();
   symbol_table::scope_id this_scope = scope ();
 
   symbol_table::scope_id new_scope = symbol_table::dup_scope (this_scope);
 
   if (new_scope > 0)
     symbol_table::inherit (new_scope, symbol_table::current_scope (),
 			   symbol_table::current_context ());
 
-  octave_user_function *uf
-    = new octave_user_function (new_scope,
-				param_list ? param_list->dup (new_scope, 0) : 0,
-				ret_list ? ret_list->dup (new_scope, 0) : 0,
-				cmd_list ? cmd_list->dup (new_scope, 0) : 0);
-
-  octave_function *curr_fcn = octave_call_stack::current ();
-
-  if (curr_fcn)
-    {
-      uf->stash_parent_fcn_name (curr_fcn->name ());
-
-      symbol_table::scope_id parent_scope = curr_fcn->parent_fcn_scope ();
+  tree_anon_fcn_handle *new_afh = new
+    tree_anon_fcn_handle (param_list ? param_list->dup (new_scope, 0) : 0,
+			  ret_list ? ret_list->dup (new_scope, 0) : 0,
+			  cmd_list ? cmd_list->dup (new_scope, 0) : 0,
+			  new_scope, line (), column ());
 
-      if (parent_scope < 0)
-	parent_scope = curr_fcn->scope ();
-	
-      uf->stash_parent_fcn_scope (parent_scope);
-    }
+  new_afh->copy_base (*this);
 
-  uf->mark_as_inline_function ();
-
-  octave_value ov_fcn (uf);
-
-  octave_value fh (new octave_fcn_handle (ov_fcn, "@<anonymous>"));
-
-  return new tree_constant (fh, line (), column ());
+  return new_afh;
 }
 
 void
 tree_anon_fcn_handle::accept (tree_walker& tw)
 {
   tw.visit_anon_fcn_handle (*this);
 }
 
