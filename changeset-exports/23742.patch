# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499376370 14400
#      Thu Jul 06 17:26:10 2017 -0400
# Node ID 1f0daaf8195502da07316caaa327ec4b7d8da590
# Parent  3bb1c94b41f20836d257e513a998b867e0927fa4
don't use singleton for ch_manager, rename to url_handle_manager

* url-handle-manager.h, url-handle-manager.cc: New files.  Move
ch_manager class here from urlwrite.cc.  Rewrite to not use singleton
pattern.  Rename curl_handle to url_handle.  Move inside octave
namespace.  Change all uses.

* libinterp/corefcn/module.mk: Update.

* interpreter.h, interpreter.cc (interpreter::m_url_handle_manager):
New variable.
(interpreter::interpreter): Initialize it.
(interpreter::get_url_handle_manager): New function.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -350,16 +350,17 @@ namespace octave
     : m_app_context (app_context),
       m_environment (),
       m_help_system (*this),
       m_dynamic_loader (*this),
       m_load_path (),
       m_symbol_table (),
       m_evaluator (*this),
       m_stream_list (*this),
+      m_url_handle_manager (),
       m_cdef_manager (*this),
       m_interactive (false),
       m_read_site_files (true),
       m_read_init_files (m_app_context != 0),
       m_verbose (false),
       m_inhibit_startup_message (false),
       m_load_path_initialized (false),
       m_history_initialized (false),
@@ -1169,16 +1170,21 @@ namespace octave
     return m_evaluator;
   }
 
   stream_list& interpreter::get_stream_list (void)
   {
     return m_stream_list;
   }
 
+  url_handle_manager& interpreter::get_url_handle_manager (void)
+  {
+    return m_url_handle_manager;
+  }
+
   symbol_table::scope *
   interpreter::get_current_scope (void)
   {
     return m_symbol_table.current_scope ();
   }
 
   symbol_table::scope *
   interpreter::require_current_scope (const std::string& who)
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include "dynamic-ld.h"
 #include "environment.h"
 #include "help.h"
 #include "load-path.h"
 #include "oct-stream.h"
 #include "ov-classdef.h"
 #include "pt-eval.h"
 #include "symtab.h"
+#include "url-handle-manager.h"
 
 extern OCTINTERP_API bool quit_allowed;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
@@ -169,16 +170,18 @@ namespace octave
     symbol_table::scope * require_current_scope (const std::string& who);
 
     call_stack& get_call_stack (void);
 
     tree_evaluator& get_evaluator (void);
 
     stream_list& get_stream_list (void);
 
+    url_handle_manager& get_url_handle_manager (void);
+
     cdef_manager& get_cdef_manager (void)
     {
       return m_cdef_manager;
     }
 
     void mlock (void);
 
     void munlock (const std::string& nm);
@@ -224,16 +227,18 @@ namespace octave
     load_path m_load_path;
 
     symbol_table m_symbol_table;
 
     tree_evaluator m_evaluator;
 
     stream_list m_stream_list;
 
+    url_handle_manager m_url_handle_manager;
+
     cdef_manager m_cdef_manager;
 
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
 
     bool m_read_site_files;
 
     bool m_read_init_files;
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -80,16 +80,17 @@ COREFCN_INC = \
   %reldir%/sighandlers.h \
   %reldir%/sparse-xdiv.h \
   %reldir%/sparse-xpow.h \
   %reldir%/symtab.h \
   %reldir%/sysdep.h \
   %reldir%/text-renderer.h \
   %reldir%/toplev.h \
   %reldir%/txt-eng.h \
+  %reldir%/url-handle-manager.h \
   %reldir%/utils.h \
   %reldir%/variables.h \
   %reldir%/workspace-element.h \
   %reldir%/xdiv.h \
   %reldir%/xnorm.h \
   %reldir%/xpow.h \
   %reldir%/zfstream.h
 
@@ -237,16 +238,17 @@ COREFCN_SRC = \
   %reldir%/time.cc \
   %reldir%/text-renderer.cc \
   %reldir%/toplev.cc \
   %reldir%/tril.cc \
   %reldir%/tsearch.cc \
   %reldir%/txt-eng.cc \
   %reldir%/typecast.cc \
   %reldir%/urlwrite.cc \
+  %reldir%/url-handle-manager.cc \
   %reldir%/utils.cc \
   %reldir%/variables.cc \
   %reldir%/xdiv.cc \
   %reldir%/xnorm.cc \
   %reldir%/xpow.cc \
   %reldir%/zfstream.cc \
   $(NOINSTALL_COREFCN_INC)
 
diff --git a/libinterp/corefcn/url-handle-manager.cc b/libinterp/corefcn/url-handle-manager.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/url-handle-manager.cc
@@ -0,0 +1,89 @@
+/*
+
+Copyright (C) 2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// Extracted from urlwrite.cc.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <cmath>
+
+#include "url-handle-manager.h"
+
+static double
+make_handle_fraction (void)
+{
+  static double maxrand = RAND_MAX + 2.0;
+
+  return (rand () + 1.0) / maxrand;
+}
+
+namespace octave
+{
+  url_handle url_handle_manager::get_handle (void)
+  {
+    url_handle retval;
+
+    // Curl handles are negative integers plus some random fractional
+    // part.  To avoid running out of integers, we recycle the integer
+    // part but tack on a new random part each time.
+
+    free_list_iterator p = handle_free_list.begin ();
+
+    if (p != handle_free_list.end ())
+      {
+        retval = *p;
+        handle_free_list.erase (p);
+      }
+    else
+      {
+        retval = url_handle (next_handle);
+
+        next_handle = std::ceil (next_handle) - 1.0 - make_handle_fraction ();
+      }
+
+    return retval;
+  }
+
+  void url_handle_manager::free (const url_handle& h)
+  {
+    if (h.ok ())
+      {
+        iterator p = handle_map.find (h);
+
+        if (p == handle_map.end ())
+          error ("url_handle_manager::free: invalid object %g", h.value ());
+
+        // Curl handles are negative integers plus some random
+        // fractional part.  To avoid running out of integers, we
+        // recycle the integer part but tack on a new random part
+        // each time.
+
+        handle_map.erase (p);
+
+        if (h.value () < 0)
+          handle_free_list.insert
+            (std::ceil (h.value ()) - make_handle_fraction ());
+      }
+  }
+}
diff --git a/libinterp/corefcn/url-handle-manager.h b/libinterp/corefcn/url-handle-manager.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/url-handle-manager.h
@@ -0,0 +1,144 @@
+/*
+
+Copyright (C) 2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// Extracted from urlwrite.cc.
+
+#if ! defined (octave_url_handle_manager)
+#define octave_url_handle_manager 1
+
+#include "octave-config.h"
+
+#include <cmath>
+
+#include <map>
+#include <set>
+
+#include "lo-mappers.h"
+
+#include "oct-handle.h"
+#include "url-transfer.h"
+
+namespace octave
+{
+  typedef octave_handle url_handle;
+
+  class OCTINTERP_API url_handle_manager
+  {
+  public:
+
+    url_handle_manager (void)
+      : handle_map (), handle_free_list (),
+      next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0)) { }
+
+    url_handle_manager (const url_handle_manager&) = delete;
+
+    url_handle_manager& operator = (const url_handle_manager&) = delete;
+
+    ~url_handle_manager (void) = default;
+
+    url_handle get_handle (void);
+
+    void free (const url_handle& h);
+
+    url_handle lookup (double val)
+    {
+      iterator p = (math::isnan (val) ? handle_map.end () : handle_map.find (val));
+
+      return (p != handle_map.end ()) ? p->first : url_handle ();
+    }
+
+    url_handle lookup (const octave_value& val)
+    {
+      return val.is_real_scalar () ? lookup (val.double_value ())
+        : url_handle ();
+    }
+
+    url_transfer get_object (double val)
+    {
+      return get_object (lookup (val));
+    }
+
+    url_transfer get_object (const octave_value& val)
+    {
+      return get_object (lookup (val));
+    }
+
+    url_transfer get_object (const url_handle& h)
+    {
+      iterator p = (h.ok () ? handle_map.find (h) : handle_map.end ());
+
+      return (p != handle_map.end ()) ? p->second : url_transfer ();
+    }
+
+    url_handle make_url_handle (const std::string& host,
+                                const std::string& user,
+                                const std::string& passwd,
+                                std::ostream& os)
+    {
+      url_handle h = get_handle ();
+
+      url_transfer obj (host, user, passwd, os);
+
+      if (! obj.is_valid ())
+        error ("support for URL transfers was disabled when Octave was built");
+
+      handle_map[h] = obj;
+
+      return h;
+    }
+
+    Matrix handle_list (void)
+    {
+      Matrix retval (1, handle_map.size ());
+
+      octave_idx_type i = 0;
+      for (const auto& h_obj : handle_map)
+        {
+          url_handle h = h_obj.first;
+
+          retval(i++) = h.value ();
+        }
+
+      return retval;
+    }
+
+
+  private:
+
+    typedef std::map<url_handle, url_transfer>::iterator iterator;
+    typedef std::map<url_handle, url_transfer>::const_iterator const_iterator;
+
+    typedef std::set<url_handle>::iterator free_list_iterator;
+    typedef std::set<url_handle>::const_iterator const_free_list_iterator;
+
+    // A map of handles to curl objects.
+    std::map<url_handle, url_transfer> handle_map;
+
+    // The available curl handles.
+    std::set<url_handle> handle_free_list;
+
+    // The next handle available if handle_free_list is empty.
+    double next_handle;
+  };
+}
+
+#endif
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -34,253 +34,35 @@ along with Octave; see the file COPYING.
 #include <iostream>
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-handle.h"
 #include "glob-match.h"
-#include "singleton-cleanup.h"
 #include "url-transfer.h"
 
 #include "defun.h"
 #include "error.h"
-#include "ovl.h"
-#include "ov-cell.h"
-#include "pager.h"
+#include "interpreter.h"
 #include "oct-map.h"
 #include "oct-refcount.h"
+#include "ov-cell.h"
+#include "ovl.h"
+#include "pager.h"
 #include "unwind-prot.h"
+#include "url-handle-manager.h"
 
 static void
 delete_file (const std::string& file)
 {
   octave::sys::unlink (file);
 }
 
-typedef octave_handle curl_handle;
-
-class OCTINTERP_API ch_manager
-{
-protected:
-
-  ch_manager (void)
-    : handle_map (), handle_free_list (),
-      next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0)) { }
-
-public:
-
-  static void create_instance (void);
-
-  static bool instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      create_instance ();
-
-    if (! instance)
-      error ("unable to create ch_manager!");
-
-    return retval;
-  }
-
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-
-  static curl_handle get_handle (void)
-  {
-    return instance_ok () ? instance->do_get_handle () : curl_handle ();
-  }
-
-  static void free (const curl_handle& h)
-  {
-    if (instance_ok ())
-      instance->do_free (h);
-  }
-
-  static curl_handle lookup (double val)
-  {
-    return instance_ok () ? instance->do_lookup (val) : curl_handle ();
-  }
-
-  static curl_handle lookup (const octave_value& val)
-  {
-    return val.is_real_scalar () ? lookup (val.double_value ())
-                                 : curl_handle ();
-  }
-
-  static octave::url_transfer get_object (double val)
-  {
-    return get_object (lookup (val));
-  }
-
-  static octave::url_transfer get_object (const octave_value& val)
-  {
-    return get_object (lookup (val));
-  }
-
-  static octave::url_transfer get_object (const curl_handle& h)
-  {
-    return instance_ok () ? instance->do_get_object (h) : octave::url_transfer ();
-  }
-
-  static curl_handle make_curl_handle (const std::string& host,
-                                       const std::string& user,
-                                       const std::string& passwd,
-                                       std::ostream& os)
-  {
-    return instance_ok ()
-             ? instance->do_make_curl_handle (host, user, passwd, os)
-             : curl_handle ();
-  }
-
-  static Matrix handle_list (void)
-  {
-    return instance_ok () ? instance->do_handle_list () : Matrix ();
-  }
-
-private:
-
-  static ch_manager *instance;
-
-  typedef std::map<curl_handle, octave::url_transfer>::iterator iterator;
-  typedef std::map<curl_handle, octave::url_transfer>::const_iterator const_iterator;
-
-  typedef std::set<curl_handle>::iterator free_list_iterator;
-  typedef std::set<curl_handle>::const_iterator const_free_list_iterator;
-
-  // A map of handles to curl objects.
-  std::map<curl_handle, octave::url_transfer> handle_map;
-
-  // The available curl handles.
-  std::set<curl_handle> handle_free_list;
-
-  // The next handle available if handle_free_list is empty.
-  double next_handle;
-
-  curl_handle do_get_handle (void);
-
-  void do_free (const curl_handle& h);
-
-  curl_handle do_lookup (double val)
-  {
-    iterator p = (octave::math::isnan (val) ? handle_map.end () : handle_map.find (val));
-
-    return (p != handle_map.end ()) ? p->first : curl_handle ();
-  }
-
-  octave::url_transfer do_get_object (const curl_handle& h)
-  {
-    iterator p = (h.ok () ? handle_map.find (h) : handle_map.end ());
-
-    return (p != handle_map.end ()) ? p->second : octave::url_transfer ();
-  }
-
-  curl_handle do_make_curl_handle (const std::string& host,
-                                   const std::string& user,
-                                   const std::string& passwd,
-                                   std::ostream& os)
-  {
-    curl_handle h = get_handle ();
-
-    octave::url_transfer obj (host, user, passwd, os);
-
-    if (! obj.is_valid ())
-      error ("support for URL transfers was disabled when Octave was built");
-
-    handle_map[h] = obj;
-
-    return h;
-  }
-
-  Matrix do_handle_list (void)
-  {
-    Matrix retval (1, handle_map.size ());
-
-    octave_idx_type i = 0;
-    for (const auto& h_obj : handle_map)
-      {
-        curl_handle h = h_obj.first;
-
-        retval(i++) = h.value ();
-      }
-
-    return retval;
-  }
-};
-
-void
-ch_manager::create_instance (void)
-{
-  instance = new ch_manager ();
-
-  if (instance)
-    singleton_cleanup_list::add (cleanup_instance);
-}
-
-static double
-make_handle_fraction (void)
-{
-  static double maxrand = RAND_MAX + 2.0;
-
-  return (rand () + 1.0) / maxrand;
-}
-
-curl_handle
-ch_manager::do_get_handle (void)
-{
-  curl_handle retval;
-
-  // Curl handles are negative integers plus some random fractional
-  // part.  To avoid running out of integers, we recycle the integer
-  // part but tack on a new random part each time.
-
-  free_list_iterator p = handle_free_list.begin ();
-
-  if (p != handle_free_list.end ())
-    {
-      retval = *p;
-      handle_free_list.erase (p);
-    }
-  else
-    {
-      retval = curl_handle (next_handle);
-
-      next_handle = std::ceil (next_handle) - 1.0 - make_handle_fraction ();
-    }
-
-  return retval;
-}
-
-void
-ch_manager::do_free (const curl_handle& h)
-{
-  if (h.ok ())
-    {
-      iterator p = handle_map.find (h);
-
-      if (p == handle_map.end ())
-        error ("ch_manager::free: invalid object %g", h.value ());
-
-      // Curl handles are negative integers plus some random
-      // fractional part.  To avoid running out of integers, we
-      // recycle the integer part but tack on a new random part
-      // each time.
-
-      handle_map.erase (p);
-
-      if (h.value () < 0)
-        handle_free_list.insert
-          (std::ceil (h.value ()) - make_handle_fraction ());
-    }
-}
-
-ch_manager *ch_manager::instance = nullptr;
-
 DEFUN (urlwrite, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} urlwrite (@var{url}, @var{localfile})
 @deftypefnx {} {@var{f} =} urlwrite (@var{url}, @var{localfile})
 @deftypefnx {} {[@var{f}, @var{success}] =} urlwrite (@var{url}, @var{localfile})
 @deftypefnx {} {[@var{f}, @var{success}, @var{message}] =} urlwrite (@var{url}, @var{localfile})
 Download a remote file specified by its @var{url} and save it as
 @var{localfile}.
@@ -364,40 +146,40 @@ urlwrite ("http://www.google.com/search"
 
   if (! ofile.is_open ())
     error ("urlwrite: unable to open file");
 
   octave::unwind_protect_safe frame;
 
   frame.add_fcn (delete_file, filename);
 
-  octave::url_transfer curl = octave::url_transfer (url, ofile);
+  octave::url_transfer url_xfer (url, ofile);
 
   octave_value_list retval;
 
-  if (! curl.is_valid ())
+  if (! url_xfer.is_valid ())
     error ("support for URL transfers was disabled when Octave was built");
 
-  curl.http_action (param, method);
+  url_xfer.http_action (param, method);
 
   ofile.close ();
 
-  if (curl.good ())
+  if (url_xfer.good ())
     frame.discard ();
 
   if (nargout > 0)
     {
-      if (curl.good ())
+      if (url_xfer.good ())
         retval = ovl (octave::sys::env::make_absolute (filename), true, "");
       else
-        retval = ovl ("", false, curl.lasterror ());
+        retval = ovl ("", false, url_xfer.lasterror ());
     }
 
-  if (nargout < 2 && ! curl.good ())
-    error ("urlwrite: %s", curl.lasterror ().c_str ());
+  if (nargout < 2 && ! url_xfer.good ())
+    error ("urlwrite: %s", url_xfer.lasterror ().c_str ());
 
   return retval;
 }
 
 DEFUN (urlread, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{s} =} urlread (@var{url})
 @deftypefnx {} {[@var{s}, @var{success}] =} urlread (@var{url})
@@ -462,40 +244,40 @@ s = urlread ("http://www.google.com/sear
       param = args(2).xcellstr_value ("urlread: parameters (PARAM) for get and post requests must be given as a cell array of strings");
 
       if (param.numel () % 2 == 1)
         error ("urlread: number of elements in PARAM must be even");
     }
 
   std::ostringstream buf;
 
-  octave::url_transfer curl = octave::url_transfer (url, buf);
+  octave::url_transfer url_xfer = octave::url_transfer (url, buf);
 
-  if (! curl.is_valid ())
+  if (! url_xfer.is_valid ())
     error ("support for URL transfers was disabled when Octave was built");
 
-  curl.http_action (param, method);
+  url_xfer.http_action (param, method);
 
   octave_value_list retval;
 
   if (nargout > 0)
     {
       // Return empty string if no error occurred.
-      retval = ovl (buf.str (), curl.good (),
-                    curl.good () ? "" : curl.lasterror ());
+      retval = ovl (buf.str (), url_xfer.good (),
+                    url_xfer.good () ? "" : url_xfer.lasterror ());
     }
 
-  if (nargout < 2 && ! curl.good ())
-    error ("urlread: %s", curl.lasterror ().c_str ());
+  if (nargout < 2 && ! url_xfer.good ())
+    error ("urlread: %s", url_xfer.lasterror ().c_str ());
 
   return retval;
 }
 
-DEFUN (__ftp__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{handle} =} __ftp__ (@var{host})
 @deftypefnx {} {@var{handle} =} __ftp__ (@var{host}, @var{username}, @var{password})
 Undocumented internal function
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
@@ -506,85 +288,93 @@ Undocumented internal function
   std::string user = (nargin > 1)
     ? args(1).xstring_value ("__ftp__: USER must be a string")
     : std::string ("anonymous");
 
   std::string passwd = (nargin > 2)
     ? args(2).xstring_value ("__ftp__: PASSWD must be a string")
     : "";
 
-  curl_handle ch
-    = ch_manager::make_curl_handle (host, user, passwd, octave_stdout);
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  return ovl (ch.value ());
+  octave::url_handle uh = uhm.make_url_handle (host, user, passwd,
+                                               octave_stdout);
+
+  return ovl (uh.value ());
 }
 
-DEFUN (__ftp_pwd__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_pwd__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_pwd__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_pwd__: incorrect number of arguments");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_pwd__: invalid ftp handle");
 
-  return ovl (curl.pwd ());
+  return ovl (url_xfer.pwd ());
 }
 
-DEFUN (__ftp_cwd__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_cwd__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_cwd__ (@var{handle}, @var{path})
 Undocumented internal function
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 2)
     error ("__ftp_cwd__: incorrect number of arguments");
 
   std::string path = "";
   if (nargin > 1)
     path = args(1).xstring_value ("__ftp_cwd__: PATH must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_cwd__: invalid ftp handle");
 
-  curl.cwd (path);
+  url_xfer.cwd (path);
 
   return ovl ();
 }
 
-DEFUN (__ftp_dir__, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_dir__, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_dir__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_dir__: incorrect number of arguments");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_dir__: invalid ftp handle");
 
   octave_value retval;
 
   if (nargout == 0)
-    curl.dir ();
+    url_xfer.dir ();
   else
     {
-      string_vector sv = curl.list ();
+      string_vector sv = url_xfer.list ();
       octave_idx_type n = sv.numel ();
 
       if (n == 0)
         {
           string_vector flds (5);
 
           flds(0) = "name";
           flds(1) = "date";
@@ -606,17 +396,17 @@ Undocumented internal function
           st.assign ("name", Cell (sv));
 
           for (octave_idx_type i = 0; i < n; i++)
             {
               time_t ftime;
               bool fisdir;
               double fsize;
 
-              curl.get_fileinfo (sv(i), fsize, ftime, fisdir);
+              url_xfer.get_fileinfo (sv(i), fsize, ftime, fisdir);
 
               fileisdir (i) = fisdir;
               filectime (i) = ctime (&ftime);
               filesize (i) = fsize;
               filedatenum (i) = double (ftime);
             }
 
           st.assign ("date", filectime);
@@ -626,189 +416,207 @@ Undocumented internal function
 
           retval = st;
         }
     }
 
   return retval;
 }
 
-DEFUN (__ftp_ascii__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_ascii__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_ascii__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_ascii__: incorrect number of arguments");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_ascii__: invalid ftp handle");
 
-  curl.ascii ();
+  url_xfer.ascii ();
 
   return ovl ();
 }
 
-DEFUN (__ftp_binary__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_binary__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_binary__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_binary__: incorrect number of arguments");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_binary__: invalid ftp handle");
 
-  curl.binary ();
+  url_xfer.binary ();
 
   return ovl ();
 }
 
-DEFUN (__ftp_close__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_close__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_close__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_close__: incorrect number of arguments");
 
-  curl_handle h = ch_manager::lookup (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
+
+  octave::url_handle h = uhm.lookup (args(0));
 
   if (! h.ok ())
     error ("__ftp_close__: invalid ftp handle");
 
-  ch_manager::free (h);
+  uhm.free (h);
 
   return ovl ();
 }
 
-DEFUN (__ftp_mode__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_mode__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_mode__ (@var{handle})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 1)
     error ("__ftp_mode__: incorrect number of arguments");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_binary__: invalid ftp handle");
 
-  return ovl (curl.is_ascii () ? "ascii" : "binary");
+  return ovl (url_xfer.is_ascii () ? "ascii" : "binary");
 }
 
-DEFUN (__ftp_delete__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_delete__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_delete__ (@var{handle}, @var{path})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 2)
     error ("__ftp_delete__: incorrect number of arguments");
 
   std::string file = args(1).xstring_value ("__ftp_delete__: FILE must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_delete__: invalid ftp handle");
 
-  curl.del (file);
+  url_xfer.del (file);
 
   return ovl ();
 }
 
-DEFUN (__ftp_rmdir__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_rmdir__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_rmdir__ (@var{handle}, @var{path})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 2)
     error ("__ftp_rmdir__: incorrect number of arguments");
 
   std::string dir = args(1).xstring_value ("__ftp_rmdir__: DIR must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_rmdir__: invalid ftp handle");
 
-  curl.rmdir (dir);
+  url_xfer.rmdir (dir);
 
   return ovl ();
 }
 
-DEFUN (__ftp_mkdir__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_mkdir__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_mkdir__ (@var{handle}, @var{path})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 2)
     error ("__ftp_mkdir__: incorrect number of arguments");
 
   std::string dir = args(1).xstring_value ("__ftp_mkdir__: DIR must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_mkdir__: invalid ftp handle");
 
-  curl.mkdir (dir);
+  url_xfer.mkdir (dir);
 
   return ovl ();
 }
 
-DEFUN (__ftp_rename__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_rename__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_rename__ (@var{handle}, @var{path})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 3)
     error ("__ftp_rename__: incorrect number of arguments");
 
   std::string oldname = args(1).xstring_value ("__ftp_rename__: OLDNAME must be a string");
   std::string newname = args(2).xstring_value ("__ftp_rename__: NEWNAME must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (url_xfer.is_valid ())
     error ("__ftp_rename__: invalid ftp handle");
 
-  curl.rename (oldname, newname);
+  url_xfer.rename (oldname, newname);
 
   return ovl ();
 }
 
-DEFUN (__ftp_mput__, args, nargout,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_mput__, interp, args, nargout,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} __ftp_mput__ (@var{handle}, @var{files})
 Undocumented internal function
 @end deftypefn */)
 {
   if (args.length () != 2)
     error ("__ftp_mput__: incorrect number of arguments");
 
   std::string pat = args(1).xstring_value ("__ftp_mput__: PATTERN must be a string");
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_mput__: invalid ftp handle");
 
   string_vector file_list;
 
   glob_match pattern (octave::sys::file_ops::tilde_expand (pat));
   string_vector files = pattern.glob ();
 
   for (octave_idx_type i = 0; i < files.numel (); i++)
@@ -817,48 +625,48 @@ Undocumented internal function
 
       octave::sys::file_stat fs (file);
 
       if (! fs.exists ())
         error ("__ftp__mput: file does not exist");
 
       if (fs.is_dir ())
         {
-          file_list.append (curl.mput_directory ("", file));
+          file_list.append (url_xfer.mput_directory ("", file));
 
-          if (! curl.good ())
-            error ("__ftp_mput__: %s", curl.lasterror ().c_str ());
+          if (! url_xfer.good ())
+            error ("__ftp_mput__: %s", url_xfer.lasterror ().c_str ());
         }
       else
         {
           // FIXME: Does ascii mode need to be flagged here?
           std::ifstream ifile (file.c_str (), std::ios::in | std::ios::binary);
 
           if (! ifile.is_open ())
             error ("__ftp_mput__: unable to open file");
 
-          curl.put (file, ifile);
+          url_xfer.put (file, ifile);
 
           ifile.close ();
 
-          if (! curl.good ())
-            error ("__ftp_mput__: %s", curl.lasterror ().c_str ());
+          if (! url_xfer.good ())
+            error ("__ftp_mput__: %s", url_xfer.lasterror ().c_str ());
 
           file_list.append (file);
         }
     }
 
   if (nargout > 0)
     return ovl (file_list);
   else
     return ovl ();
 }
 
-DEFUN (__ftp_mget__, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (__ftp_mget__, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} __ftp_mget__ (@var{handle}, @var{pattern})
 @deftypefnx {} {} __ftp_mget__ (@var{handle}, @var{pattern}, @var{target})
 Undocumented internal function
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin != 2 && nargin != 3)
@@ -866,62 +674,64 @@ Undocumented internal function
 
   std::string file = args(1).xstring_value ("__ftp_mget__: PATTERN must be a string");
 
   std::string target;
 
   if (nargin == 3 && ! args(2).isempty ())
     target = args(2).xstring_value ("__ftp_mget__: TARGET must be a string") + octave::sys::file_ops::dir_sep_str ();
 
-  octave::url_transfer curl = ch_manager::get_object (args(0));
+  octave::url_handle_manager& uhm = interp.get_url_handle_manager ();
 
-  if (! curl.is_valid ())
+  octave::url_transfer url_xfer = uhm.get_object (args(0));
+
+  if (! url_xfer.is_valid ())
     error ("__ftp_mget__: invalid ftp handle");
 
-  string_vector sv = curl.list ();
+  string_vector sv = url_xfer.list ();
   octave_idx_type n = 0;
   glob_match pattern (file);
 
   for (octave_idx_type i = 0; i < sv.numel (); i++)
     {
       if (pattern.match (sv(i)))
         {
           n++;
 
           time_t ftime;
           bool fisdir;
           double fsize;
 
-          curl.get_fileinfo (sv(i), fsize, ftime, fisdir);
+          url_xfer.get_fileinfo (sv(i), fsize, ftime, fisdir);
 
           if (fisdir)
-            curl.mget_directory (sv(i), target);
+            url_xfer.mget_directory (sv(i), target);
           else
             {
               std::ofstream ofile ((target + sv(i)).c_str (),
                                    std::ios::out |
                                    std::ios::binary);
 
               if (! ofile.is_open ())
                 error ("__ftp_mget__: unable to open file");
 
               octave::unwind_protect_safe frame;
 
               frame.add_fcn (delete_file, target + sv(i));
 
-              curl.get (sv(i), ofile);
+              url_xfer.get (sv(i), ofile);
 
               ofile.close ();
 
-              if (curl.good ())
+              if (url_xfer.good ())
                 frame.discard ();
             }
 
-          if (! curl.good ())
-            error ("__ftp_mget__: %s", curl.lasterror().c_str());
+          if (! url_xfer.good ())
+            error ("__ftp_mget__: %s", url_xfer.lasterror().c_str());
         }
     }
 
   if (n == 0)
     error ("__ftp_mget__: file not found");
 
   return ovl ();
 }
