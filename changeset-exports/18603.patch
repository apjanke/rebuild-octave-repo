# HG changeset patch
# User Stefan Mahr <dac922@gmx.de>
# Date 1394588205 -3600
#      Wed Mar 12 02:36:45 2014 +0100
# Branch stable
# Node ID e7369c43ebe0d1273c527027bf3b0ecbfa8913dd
# Parent  2633b5f3106a6b6ab8bedaca9a7070663322dc52
Fix segmentation fault for interp2 and pchip method (bug #41838).

* libinterp/corefcn/__pchip_deriv__.cc (F__pchip_deriv__): Use F77_XFCN
  instead of F77_FUNC. The used FORTAN functions call xstopx_ that
  tries to restore the current_context, but F77_FUNC doesn't save the
  current_context.

diff --git a/libinterp/corefcn/__pchip_deriv__.cc b/libinterp/corefcn/__pchip_deriv__.cc
--- a/libinterp/corefcn/__pchip_deriv__.cc
+++ b/libinterp/corefcn/__pchip_deriv__.cc
@@ -90,18 +90,18 @@ Undocumented internal function.\n\
           float *dvec = dmat.fortran_vec ();
 
           octave_idx_type ierr;
           const octave_idx_type incfd = rows ? nyr : 1;
           const octave_idx_type inc = rows ? 1 : nyr;
 
           for (octave_idx_type i = (rows ? nyr : nyc); i > 0; i--)
             {
-              F77_FUNC (pchim, PCHIM) (nx, xvec.data (),
-                                       yvec, dvec, incfd, &ierr);
+              F77_XFCN (pchim, PCHIM, (nx, xvec.data (),
+                                       yvec, dvec, incfd, &ierr));
 
               yvec += inc;
               dvec += inc;
 
               if (ierr < 0)
                 {
                   error ("PCHIM: error: %i\n", ierr);
                   return retval;
@@ -137,18 +137,18 @@ Undocumented internal function.\n\
           double *dvec = dmat.fortran_vec ();
 
           octave_idx_type ierr;
           const octave_idx_type incfd = rows ? nyr : 1;
           const octave_idx_type inc = rows ? 1 : nyr;
 
           for (octave_idx_type i = (rows ? nyr : nyc); i > 0; i--)
             {
-              F77_FUNC (dpchim, DPCHIM) (nx, xvec.data (),
-                                         yvec, dvec, incfd, &ierr);
+              F77_XFCN (dpchim, DPCHIM, (nx, xvec.data (),
+                                         yvec, dvec, incfd, &ierr));
 
               yvec += inc;
               dvec += inc;
 
               if (ierr < 0)
                 {
                   error ("DPCHIM: error: %i\n", ierr);
                   return retval;
