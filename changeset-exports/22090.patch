# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1468269242 14400
#      Mon Jul 11 16:34:02 2016 -0400
# Node ID 66db9a493c84b0f86d56739ad48f4c9f4d9078ef
# Parent  c2c668b3051be4158c72fe0246335bbe7241502d
avoid accessing optarg and optind directly (bug #48454)

* getopt-wrapper.h, getopt-wrapper.c (octave_optarg_wrapper,
octave_optind_wrapper): New functions.
* octave.cc (cmdline_args::cmdline_args): Use them instead of optarg
and optind.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -425,18 +425,18 @@ namespace octave
             octave_print_verbose_usage_and_exit ();
             break;
 
           case 'i':
             m_forced_interactive = true;
             break;
 
           case 'p':
-            if (optarg)
-              m_command_line_path.push_back (optarg);
+            if (octave_optarg_wrapper ())
+              m_command_line_path.push_back (octave_optarg_wrapper ());
             break;
 
           case 'q':
             m_inhibit_startup_message = true;
             break;
 
           case 'x':
             {
@@ -445,57 +445,57 @@ namespace octave
             }
             break;
 
           case 'v':
             octave_print_version_and_exit ();
             break;
 
           case BUILT_IN_DOCSTRINGS_FILE_OPTION:
-            if (optarg)
-              Fbuilt_in_docstrings_file (octave_value (optarg));
+            if (octave_optarg_wrapper ())
+              Fbuilt_in_docstrings_file (octave_value (octave_optarg_wrapper ()));
             break;
 
           case DOC_CACHE_FILE_OPTION:
-            if (optarg)
-              Fdoc_cache_file (octave_value (optarg));
+            if (octave_optarg_wrapper ())
+              Fdoc_cache_file (octave_value (octave_optarg_wrapper ()));
             break;
 
           case EVAL_OPTION:
-            if (optarg)
+            if (octave_optarg_wrapper ())
               {
                 if (m_code_to_eval.empty ())
-                  m_code_to_eval = optarg;
+                  m_code_to_eval = octave_optarg_wrapper ();
                 else
-                  m_code_to_eval += std::string (" ") + optarg;
+                  m_code_to_eval += std::string (" ") + octave_optarg_wrapper ();
               }
             break;
 
           case EXEC_PATH_OPTION:
-            if (optarg)
-              m_exec_path = optarg;
+            if (octave_optarg_wrapper ())
+              m_exec_path = octave_optarg_wrapper ();
             break;
 
           case FORCE_GUI_OPTION:
             m_force_gui = true;
             break;
 
           case IMAGE_PATH_OPTION:
-            if (optarg)
-              m_image_path = optarg;
+            if (octave_optarg_wrapper ())
+              m_image_path = octave_optarg_wrapper ();
             break;
 
           case INFO_FILE_OPTION:
-            if (optarg)
-              Finfo_file (octave_value (optarg));
+            if (octave_optarg_wrapper ())
+              Finfo_file (octave_value (octave_optarg_wrapper ()));
             break;
 
           case INFO_PROG_OPTION:
-            if (optarg)
-              Finfo_program (octave_value (optarg));
+            if (octave_optarg_wrapper ())
+              Finfo_program (octave_value (octave_optarg_wrapper ()));
             break;
 
           case DEBUG_JIT_OPTION:
             Fdebug_jit (octave_value (true));
             break;
 
           case JIT_COMPILER_OPTION:
             Fjit_enable (octave_value (true));
@@ -525,18 +525,18 @@ namespace octave
             m_read_site_files = 0;
             break;
 
           case PERSIST_OPTION:
             m_persist = true;
             break;
 
           case TEXI_MACROS_FILE_OPTION:
-            if (optarg)
-              Ftexi_macros_file (octave_value (optarg));
+            if (octave_optarg_wrapper ())
+              Ftexi_macros_file (octave_value (octave_optarg_wrapper ()));
             break;
 
           case TRADITIONAL_OPTION:
             m_traditional = true;
             m_persist = true;
             break;
 
           default:
@@ -552,17 +552,18 @@ namespace octave
     // Check for various incompatible argument pairs
     if (m_force_gui && m_no_gui)
       {
         warning ("only one of --force-gui and --no-gui may be used");
 
         octave_print_terse_usage_and_exit ();
       }
 
-    m_remaining_args = string_vector (argv+optind, argc-optind);
+    m_remaining_args = string_vector (argv+octave_optind_wrapper (),
+                                      argc-octave_optind_wrapper ());
   }
 
   cmdline_options::cmdline_options (const cmdline_options& opts)
     : m_force_gui (opts.m_force_gui),
       m_forced_interactive (opts.m_forced_interactive),
       m_forced_line_editing (opts.m_forced_line_editing),
       m_inhibit_startup_message (opts.m_inhibit_startup_message),
       m_line_editing (opts.m_line_editing),
diff --git a/liboctave/wrappers/getopt-wrapper.c b/liboctave/wrappers/getopt-wrapper.c
--- a/liboctave/wrappers/getopt-wrapper.c
+++ b/liboctave/wrappers/getopt-wrapper.c
@@ -96,8 +96,20 @@ octave_getopt_long_wrapper (int argc, ch
   struct option *lopts = make_option_struct (longopts);
 
   int retval = getopt_long (argc, argv, shortopts, lopts, longind);
 
   free (lopts);
 
   return retval;
 }
+
+char *
+octave_optarg_wrapper (void)
+{
+  return optarg;
+}
+
+int
+octave_optind_wrapper (void)
+{
+  return optind;
+}
diff --git a/liboctave/wrappers/getopt-wrapper.h b/liboctave/wrappers/getopt-wrapper.h
--- a/liboctave/wrappers/getopt-wrapper.h
+++ b/liboctave/wrappers/getopt-wrapper.h
@@ -40,14 +40,18 @@ struct octave_getopt_options
 #define octave_optional_arg 2
 
 extern int
 octave_getopt_long_wrapper (int argc, char *const *argv,
                             const char *shortopts,
                             const struct octave_getopt_options *longopts,
                             int *longind);
 
+extern char *octave_optarg_wrapper (void);
+
+extern int octave_optind_wrapper (void);
+
 #if defined __cplusplus
 }
 #endif
 
 #endif
 
