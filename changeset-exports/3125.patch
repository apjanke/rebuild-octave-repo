# HG changeset patch
# User jwe
# Date 884927469 0
#      Fri Jan 16 05:11:09 1998 +0000
# Node ID dcc6c985d72dcdf291db2954994f7372d8d7409b
# Parent  38684be52a3e3b249aa9e4b7ee52e6410fb19644
[project @ 1998-01-16 05:08:21 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -165,16 +165,18 @@ Summary of changes for version 2.1.x:
     now.
 
   * The new built-in variable `fixed_point_format' controls whether
     Octave uses a scaled fixed-point format for displaying matrices.
     The default value is 0 unless you use --traditional.
 
   * The function sumsq now computes sum (x .* conj (x)) for complex values.
 
+  * Octave now uses readline version 2.1 and kpathsea 3.0.
+
   * New configure option, --enable-readline.
 
   * New configure option, --enable-static.
 
 Summary of changes for version 2.0.7:
 ------------------------------------
 
   This is a bug-fixing release.  There are no new user-visible features.
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -449,16 +449,22 @@ Interpreter:
   * It would be nice to have an interactive debugger.
 
   * Make whos report total memory used by variables (and functions?).
 
   * Rewrite whos and the symbol_record_info class.  Write a built-in
     function that gives all the basic information, then write who and
     whos as M-files.
 
+  * Make whos work for structure elements:
+
+      prot  type               rows   cols  name
+      ====  ====               ====   ====  ====
+      wd   matrix                m      n  struct.x
+
   * On systems that support matherr(), make it possible for users to
     enable the printing of warning messages.
 
   * Make it possible to mark variables and functions as read-only.
 
   * Provide a built-in function for applying a scalar function to an
     array.  Be sure to note in the manual that this is not the
     preferred way to write a function that can handle vector/matrix
diff --git a/config.h.bot b/config.h.bot
--- a/config.h.bot
+++ b/config.h.bot
@@ -2,19 +2,19 @@
 #if defined (__GNUC__)
 #define GCC_ATTR_NORETURN __attribute__ ((__noreturn__))
 #define GCC_ATTR_UNUSED __attribute__ ((__unused__))
 #else
 #define GCC_ATTR_NORETURN
 #define GCC_ATTR_UNUSED
 #endif
 
-#define CONST_CAST(T, E) const_cast<T> (E)
+#define CONST_CAST(T, E) (T) (E)
 
-#define DYNAMIC_CAST(T, E) dynamic_cast<T> (E)
+#define DYNAMIC_CAST(T, E) (T) (E)
 
-#define REINTERPRET_CAST(T, E) reinterpret_cast<T> (E)
+#define REINTERPRET_CAST(T, E) (T) (E)
 
-#define STATIC_CAST(T, E) static_cast<T> (E)
+#define STATIC_CAST(T, E) (T) (E)
 
 #define HEAVYWEIGHT_INDEXING 1
 
 #define WITH_KPATHSEARCH 1
diff --git a/doc/interpreter/preface.texi b/doc/interpreter/preface.texi
--- a/doc/interpreter/preface.texi
+++ b/doc/interpreter/preface.texi
@@ -86,18 +86,17 @@ C-style input and output functions.
 
 @item
 Brian Fox @email{bfox@@gnu.ai.mit.edu} wrote the @code{readline} library
 used for command history editing, and the portion of this manual that
 documents it.
 
 @item
 Klaus Gebhardt @email{gebhardt@@crunch.ikp.physik.th-darmstadt.de}
-ported Octave to OS/2 and worked with Michel Juillard
-@email{juillard@@msh-paris.fr} on the port to DOS.
+ported Octave to OS/2.
 
 @item
 A. Scottedward Hodel @email{A.S.Hodel@@eng.auburn.edu} contributed a number
 of functions including @code{expm}, @code{qzval}, @code{qzhess},
 @code{syl}, @code{lyap}, and @code{balance}.
 
 @item
 Kurt Hornik @email{Kurt.Hornik@@ci.tuwien.ac.at} provided the
@@ -109,20 +108,16 @@ mode for editing Octave code and provide
 helped tremendously with testing.  He has also been a constant source of
 new ideas for improving Octave.
 
 @item
 Phil Johnson @email{johnsonp@@nicco.sscnet.ucla.edu} has helped to make
 Linux releases available.
 
 @item
-Michel Juillard @email{juillard@@msh-paris.fr} ported Octave to DOS
-systems.
-
-@item
 Friedrich Leisch @email{leisch@@ci.tuwien.ac.at} provided the
 @code{mahalanobis} function.
 
 @item
 Ken Neighbors @email{wkn@@leland.stanford.edu} has provided many useful
 bug reports and comments on @sc{Matlab} compatibility.
 
 @item
diff --git a/doc/interpreter/tips.texi b/doc/interpreter/tips.texi
--- a/doc/interpreter/tips.texi
+++ b/doc/interpreter/tips.texi
@@ -315,17 +315,17 @@ example,
 Here is a table of the conventional possibilities for @var{header-name}:
 
 @table @samp
 @item Author
 This line states the name and net address of at least the principal
 author of the library.
 
 @smallexample
-## Author: John W. Eaton <jwe@@bevo.che.wsic.edu>
+## Author: John W. Eaton <jwe@@bevo.che.wisc.edu>
 @end smallexample
 
 @item Maintainer
 This line should contain a single name/address as in the Author line, or
 an address only, or the string @samp{jwe}.  If there is no maintainer
 line, the person(s) in the Author field are presumed to be the
 maintainers.  The example above is mildly bogus because the maintainer
 line is redundant.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+Thu Dec 18 14:53:45 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.cc (IDX_VEC_REP::sort): Don't do anything unless len > 1.
+	(make_uniq): Likewise.
+
+Fri Dec 12 10:58:33 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-ieee.cc (octave_ieee_init): Check for linux before __alpha__.
+
 Sun Nov 30 14:59:12 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc: Include cmath and lo-specfun.h, not oct-math.h.
 
 	* lo-specfun.h, lo-specfun.cc: New files.
 	* Makefile.in (INCLUDES, SOURCES): Add them to the lists.
 
 	* acosh.c, asinh.c, atanh.c, erf.c, erfc.c, gamma.c, lgamma.c,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -467,16 +467,19 @@ static inline void
 sort_data (int *d, int l)
 {
   qsort (d, l, sizeof (int), intcmp);
 }
 
 static inline int
 make_uniq (int *d, int l)
 {
+  if (l < 2)
+    return l;
+
   int k = 0;
   for (int ii = 1; ii < l; ii++)
     {
       if (d[ii] != d[k])
 	{
 	  k++;
 	  d[k] = d[ii];
 	}
@@ -542,20 +545,23 @@ IDX_VEC_REP::is_colon_equiv (int n, int 
     }
 
   return colon_equiv;
 }
 
 void
 IDX_VEC_REP::sort (bool uniq)
 {
-  sort_data (data, len);
+  if (len > 1)
+    {
+      sort_data (data, len);
 
-  if (uniq)
-    len = make_uniq (data, len);
+      if (uniq)
+	len = make_uniq (data, len);
+    }
 }
 
 void
 IDX_VEC_REP::shorten (int n)
 {
   if (n > 0 && n <= len)
     len = n;
   else
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -63,23 +63,23 @@ octave_ieee_init (void)
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 
 // Some version of gcc on some old version of Linux used to crash when
 // trying to make Inf and NaN.
 
 #if defined (SCO)
   double tmp = 1.0;
   octave_Inf = 1.0 / (tmp - tmp);
+#elif defined (linux)
+  octave_Inf = HUGE_VAL;
 #elif defined (__alpha__)
   extern unsigned int DINFINITY[2];
   octave_Inf =  (*(static_cast<double *> (DINFINITY)));
 #elif defined (HAVE_INFINITY)
   octave_Inf = infinity ();
-#elif defined (linux)
-  octave_Inf = HUGE_VAL;
 #else
   double tmp = 1e+10;
   octave_Inf = tmp;
   for (;;)
     {
       octave_Inf *= 1e+10;
       if (octave_Inf == tmp)
 	break;
diff --git a/readline/ChangeLog b/readline/ChangeLog
--- a/readline/ChangeLog
+++ b/readline/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan 13 14:59:56 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* readline.h (rl_dispatching): Add missing extern in declaration.
+
 Thu Jul 10 18:26:56 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* acconfig.h: Add #undefs for FIONREAD_IN_SYS_IOCTL,
 	HAVE_BSD_SIGNALS, HAVE_LSTAT, HAVE_POSIX_SIGNALS,
 	HAVE_POSIX_SIGSETJMP, HAVE_USG_SIGHOLD,
 	MUST_REINSTALL_SIGHANDLERS, SPEED_T_IN_SYS_TYPES, STRCOLL_BROKEN,
 	STRUCT_DIRENT_HAS_D_FILENO, and STRUCT_DIRENT_HAS_D_INO.
 
diff --git a/readline/readline.h b/readline/readline.h
--- a/readline/readline.h
+++ b/readline/readline.h
@@ -254,17 +254,17 @@ extern int rl_mark;
 
 extern int rl_done;
 
 extern int rl_pending_input;
 
 /* Non-zero if we called this function from _rl_dispatch().  It's present
    so functions can find out whether they were called from a key binding
    or directly from an application. */
-int rl_dispatching;
+extern int rl_dispatching;
 
 /* The name of the terminal to use. */
 extern char *rl_terminal_name;
 
 /* The input and output streams. */
 extern FILE *rl_instream, *rl_outstream;
 
 /* If non-zero, then this is the address of a function to call just
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+Thu Jan  8 11:54:33 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* xpow.cc (elem_xpow): If second arg of pow is complex, make sure
+	first arg is also complex.
+
+	* symtab.cc (symbol_table::rename): Properly insert new item at
+	the front of the list to avoid losing the rest of the items.
+
+Thu Dec 11 23:30:03 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* variables.cc (Fclear): Increment index to skip -x arg.
+
 Tue Dec  9 02:45:35 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (INCLUDES): Don't forget Pix.h.
 
 	* BaseSLList.cc: Don't include nonstandard libg++ header files.
 
 Sun Nov 30 14:58:56 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -400,16 +400,17 @@ symbol_table::rename (const string& old_
 	{
 	  ptr->rename (new_name);
 
 	  if (! error_state)
 	    {
 	      prev->chain (ptr->next ());
 
 	      index = hash (new_name);
+	      ptr->chain (table[index].next ());
 	      table[index].chain (ptr);
 
 	      return;
 	    }
 
 	  break;
 	}
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1024,17 +1024,20 @@ With -x, exclude the named variables")
     {
       int exclusive = 0;
 
       int idx = 1;
 
       if (argc > 1)
 	{
 	  if (argv[idx] == "-x")
-	    exclusive = 1;
+	    {
+	      idx++;
+	      exclusive = 1;
+	    }
 	}
 
       int lcount = 0;
       int gcount = 0;
       int fcount = 0;
 
       string_vector lvars;
       string_vector gvars;
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -483,19 +483,20 @@ elem_xpow (double a, const Matrix& b)
 // -*- 2 -*-
 octave_value
 elem_xpow (double a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
   int nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
+  Complex atmp (a);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      result (i, j) = pow (a, b (i, j));
+      result (i, j) = pow (atmp, b (i, j));
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const Matrix& a, double b)
 {
@@ -595,17 +596,17 @@ octave_value
 elem_xpow (const Matrix& a, const Complex& b)
 {
   int nr = a.rows ();
   int nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      result (i, j) = pow (a (i, j), b);
+      result (i, j) = pow (Complex (a (i, j)), b);
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const Matrix& a, const ComplexMatrix& b)
 {
@@ -619,17 +620,17 @@ elem_xpow (const Matrix& a, const Comple
     {
       gripe_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
       return octave_value ();
     }
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      result (i, j) = pow (a (i, j), b (i, j));
+      result (i, j) = pow (Complex (a (i, j)), b (i, j));
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const Complex& a, const Matrix& b)
 {
