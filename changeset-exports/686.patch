# HG changeset patch
# User jwe
# Date 779145043 0
#      Fri Sep 09 21:10:43 1994 +0000
# Node ID 0faebdd7df5767035576ac9408867fa094a16858
# Parent  eb88bf09a645241f30259939158079fa61cd18d6
[project @ 1994-09-09 21:09:24 by jwe]

diff --git a/scripts/Makefile.in b/scripts/Makefile.in
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -3,73 +3,87 @@
 #
 # John W. Eaton
 # jwe@che.utexas.edu
 # Department of Chemical Engineering
 # The University of Texas at Austin
 
 TOPDIR = ..
 
+script_sub_dir = .
+
 srcdir = @srcdir@
 top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = *.m
 
 DISTFILES = Makefile.in $(SOURCES)
 
-# Complete directory trees to distribute.
-DISTDIRS = amr-image
+SUBDIRS = control general image linear-algebra miscellaneous plot \
+	polynomial set signal special-matrix statistics
+
+DISTSUBDIRS = $(SUBDIRS)
 
 FCN_FILES = $(wildcard $(srcdir)/*.m)
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
 
 all:
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 .PHONY: all
 
 install: all
-	if test -d $(fcnfiledir) ; then true ; \
-	else $(TOPDIR)/mkpath $(fcnfiledir) ; fi
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
+	if test -d $(fcnfiledir)/$(script_sub_dir) ; then true ; \
+	else $(TOPDIR)/mkpath $(fcnfiledir)/$(script_sub_dir) ; fi
 	for f in $(FCN_FILES_NO_DIR) ; do \
-	  rm -f $(fcnfiledir)/$$f ; \
-	  $(INSTALL_DATA) $(srcdir)/$$f $(fcnfiledir)/$$f ; \
+	  rm -f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
+	  $(INSTALL_DATA) $(srcdir)/$$f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
 	done
 .PHONY: install
 
 uninstall:
-	for f in $(FCN_FILES_NO_DIR) ; do rm -f $(fcnfiledir)/$$f ; done
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
+	for f in $(FCN_FILES_NO_DIR) ; \
+	  do rm -f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
+	done
 .PHONY: uninstall
 
 clean:
 .PHONY: clean
 
 tags: $(SOURCES)
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 	ctags $(SOURCES)
 
 TAGS: $(SOURCES)
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 	etags $(SOURCES)
 
 mostlyclean: clean
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 .PHONY: mostlyclean
 
 distclean: clean
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 	rm -f Makefile
 .PHONY: distclean
 
 realclean: distclean
+	for dir in $(SUBDIRS); do echo making $@ in $$dir; cd $$dir; $(MAKE) $@; cd ..; done
 	rm -f tags TAGS
 .PHONY: realclean
 
 local-dist:
 	ln $(DISTFILES) ../`cat ../.fname`/scripts
-	for dir in $(DISTDIRS); do ln -s ../../scripts/$$dir ../`cat ../.fname`/scripts ; done
+	for dir in $(DISTSUBDIRS); do mkdir `cat .fname`/$$dir; cd $$dir; $(MAKE) $@; cd ..; done
 .PHONY: local-dist
 
 dist:
 	ln $(DISTFILES) ../`cat ../.fname`/scripts
-	for dir in $(DISTDIRS); do ln -s ../../scripts/$$dir ../`cat ../.fname`/scripts ; done
+	for dir in $(DISTSUBDIRS); do mkdir `cat .fname`/$$dir; cd $$dir; $(MAKE) $@; cd ..; done
 .PHONY: dist
diff --git a/scripts/image/Makefile.in b/scripts/image/Makefile.in
--- a/scripts/image/Makefile.in
+++ b/scripts/image/Makefile.in
@@ -22,38 +22,50 @@ INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = *.m
 
 DISTFILES = Makefile.in $(SOURCES)
 
 FCN_FILES = $(wildcard $(srcdir)/*.m)
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
 
+IMAGE_FILES = $(wildcard $(srcdir)/*.img)
+IMAGE_FILES_NO_DIR = $(notdir $(IMAGE_FILES))
+
 all: octtopnm
 .PHONY: all
 
 octtopnm: octtopnm.o
-	$(CC) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o octave
+	$(CC) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) octtopnm.o -o octtopnm
 
 install: all
 	if test -d $(fcnfiledir)/$(script_sub_dir) ; then true ; \
 	else $(TOPDIR)/mkpath $(fcnfiledir)/$(script_sub_dir) ; fi
 	for f in $(FCN_FILES_NO_DIR) ; do \
 	  rm -f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
 	  $(INSTALL_DATA) $(srcdir)/$$f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
 	done
+	if test -d $(fcnfiledir)/imagelib ; then true ; \
+	else $(TOPDIR)/mkpath $(fcnfiledir)/imagelib ; fi
+	for f in $(IMAGE_FILES_NO_DIR) ; do \
+	  rm -f $(fcnfiledir)/imagelib/$$f ; \
+	  $(INSTALL_DATA) $(srcdir)/$$f $(fcnfiledir)/imagelib/$$f ; \
+	done
 	if test -d $(archlibdir) ; then true ; \
 	else $(TOPDIR)/mkpath $(archlibdir) ; fi
 	$(INSTALL_PROGRAM) octtopnm $(archlibdir)/octtopnm
 .PHONY: install
 
 uninstall:
 	for f in $(FCN_FILES_NO_DIR) ; \
 	  do rm -f $(fcnfiledir)/$(script_sub_dir)/$$f ; \
 	done
+	for f in $(IMAGE_FILES_NO_DIR) ; \
+	  do rm -f $(fcnfiledir)/imagelib/$$f ; \
+	done
 	rm -f $(archlibdir)/octtopnm
 .PHONY: uninstall
 
 clean:
 .PHONY: clean
 
 tags: $(SOURCES)
 	ctags $(SOURCES)
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -15,21 +15,19 @@ function image(x, zoom)
 # July 1994
 #
 #Modified:
 # Tony Richardson
 # amr@mpl.ucsd.edu
 # July 1994
 # (Modifications based on suggestions from John Eaton.)
 
-  global IMAGEDIR
- 
   if (nargin == 0)
     # Load Bobbie Jo Richardson (Born 3/16/94)
-    x = loadimage([IMAGEDIR,"/default.img"]);
+    x = loadimage("default.img");
     zoom = 2;
   elseif(nargin == 1)
     zoom = 4;
   elseif(nargin > 2)
     error("usage: image (matrix, [zoom])");
   endif
 
   # Generate random file name
diff --git a/scripts/image/loadimage.m b/scripts/image/loadimage.m
--- a/scripts/image/loadimage.m
+++ b/scripts/image/loadimage.m
@@ -2,11 +2,23 @@ function [X, map] = loadimage(filename)
 #Load an image file.
 #
 #[X, map] = loadimage(img_file) loads an image and it's associated color
 #map from file img_file.  The image must be in stored in octave's image
 #format.
 #
 #SEE ALSO: saveimage, load, save
 
-  eval(['load ', filename]);
+  if (nargin == 0)
+    error ("usage: loadimage (filename)");
+  endif
+
+  file = file_in_path (IMAGEPATH, filename);
+
+  if (isempty (file))
+    error ("loadimage: unable to find image file");
+  endif
+
+# XXX FIXME XXX -- file is assumed to have variables X and map.
+  
+  eval(['load ', file]);
 
 endfunction
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -20,18 +20,16 @@ function saveimage(filename,X,img_form,m
 #Note: If the colormap contains only two entries and these entries are black
 #and white, the bitmap ppm and PostScript formats are used.  If the image is
 #a gray scale image (the entries within each row of the colormap are equal)
 #the gray scale ppm and PostScript image formats are used, otherwise the full
 #color formats are used.
 #
 #SEE ALSO: loadimage, save, load, colormap
 
-  global IMAGEDIR
-
   if(nargin < 2)
     error("usage: saveimage(filename,matrix,[format, [colormap]])");
   elseif(nargin == 2)
     if(!isstr(filename))
       error("File name must be a string.");
     endif
     map = colormap;
     img_form = "img";
@@ -54,22 +52,22 @@ function saveimage(filename,X,img_form,m
     ps_file = filename;
   endif
 
   # Save image in octave image file format
   eval(['save ', oct_file, ' map X']);
 
   # Convert to another format if requested.
   if (strcmp(img_form,"ppm") == 1)
-    octtopnm = sprintf([IMAGEDIR,"/octtopnm %s > %s"],oct_file,filename);
+    octtopnm = sprintf("octtopnm %s > %s",oct_file,filename);
     rm = sprintf("rm -f %s",oct_file);
     shell_cmd(octtopnm);
     shell_cmd(rm);
   elseif (strcmp(img_form,"ps") == 1)
-    octtopnm = sprintf([IMAGEDIR,"/octtopnm %s"],oct_file);
+    octtopnm = sprintf("octtopnm %s",oct_file);
     ppmtops = sprintf("pnmtops > %s 2> /dev/null", filename);
     octtops = [ octtopnm, " | ", ppmtops ];
     rm = sprintf("rm -f %s",oct_file);
     shell_cmd(octtops);
     shell_cmd(rm);
   endif
 
 endfunction
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -201,16 +201,17 @@ defaults.h: defaults.h.in ../Makeconf Ma
 	  -e "s;%OCTAVE_LIBDIR%;\"${libdir}\";" \
 	  -e "s;%OCTAVE_INFODIR%;\"${infodir}\";" \
 	  -e "s;%OCTAVE_FCNFILEDIR%;\"${fcnfiledir}\";" \
 	  -e "s;%OCTAVE_LOCALFCNFILEPATH%;\"${localfcnfilepath}\";" \
 	  -e "s;%OCTAVE_ARCHLIBDIR%;\"${archlibdir}\";" \
 	  -e "s;%OCTAVE_OCTFILEDIR%;\"${octfiledir}\";" \
 	  -e "s;%OCTAVE_LOCALOCTFILEPATH%;\"${localoctfilepath}\";" \
 	  -e "s;%OCTAVE_FCNFILEPATH%;\"${fcnfilepath}\";" \
+	  -e "s;%OCTAVE_IMAGEPATH%;\"${imagepath}\";" \
 	  -e "s;%TARGET_HOST_TYPE%;\"${target_host_type}\";")
 	@$(top_srcdir)/move-if-change $@.tmp $@
 
 check: all
 .PHONY: check
 
 
 include $(MAKEDEPS)
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -200,16 +200,29 @@ initialize_globals (char *name)
     host_name = strsave (hostname);
 
   char *hd = getenv ("HOME");
   if (hd)
     home_directory = strsave (hd);
   else
     home_directory = strsave ("I have no home!");
 
+  char *shell_path = getenv ("PATH");
+  char *arch_dir = octave_arch_lib_dir ();
+  char *tmp = strconcat (shell_path, ":");
+
+  shell_path = shell_path ? strconcat (tmp, arch_dir)
+    : strsave (arch_dir);
+
+  delete [] tmp;
+
+  char *putenv_command = strconcat ("PATH=", shell_path);
+
+  putenv (putenv_command);
+
   raw_prog_name = strsave (name);
   prog_name = strsave ("octave");
 
   load_path = default_path ();
 
   info_file = default_info_file ();
 
   editor = default_editor ();
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -547,16 +547,36 @@ sv_gnuplot_binary (void)
       warning ("invalid value specified for gnuplot_binary");
       status = -1;
     }
 
   return status;
 }
 
 int
+sv_imagepath (void)
+{
+  int status = 0;
+
+  char *s = builtin_string_variable ("IMAGEPATH");
+  if (s)
+    {
+      delete [] user_pref.imagepath;
+      user_pref.imagepath = s;
+    }
+  else
+    {
+      warning ("invalid value specified for IMAGEPATH");
+      status = -1;
+    }
+
+  return status;
+}
+
+int
 sv_info_file (void)
 {
   int status = 0;
 
   char *s = builtin_string_variable ("INFO_FILE");
   if (s)
     {
       delete [] user_pref.info_file;
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -49,16 +49,17 @@ struct user_preferences
   int treat_neg_dim_as_zero;
   int warn_assign_as_truth_value;
   int warn_comma_in_global_decl;
   int warn_divide_by_zero;
 
   char *default_save_format;
   char *editor;
   char *gnuplot_binary;
+  char *imagepath;
   char *info_file;
   char *loadpath;
   char *pager_binary;
   char *ps1;
   char *ps2;
   char *pwd;
 };
 
@@ -88,16 +89,17 @@ extern int warn_divide_by_zero (void);
 
 extern int set_output_max_field_width (void);
 extern int set_output_precision (void);
 extern int set_save_precision (void);
 
 extern int sv_default_save_format (void);
 extern int sv_editor (void);
 extern int sv_gnuplot_binary (void);
+extern int sv_imagepath (void);
 extern int sv_info_file (void);
 extern int sv_loadpath (void);
 extern int sv_pager_binary (void);
 extern int sv_ps1 (void);
 extern int sv_ps2 (void);
 extern int sv_pwd (void);
 
 #endif
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -84,17 +84,19 @@ LOSE! LOSE!
 #endif /* not (DIRENT or _POSIX_VERSION) */
 
 #include "SLStack.h"
 
 #include "procstream.h"
 #include "user-prefs.h"
 #include "variables.h"
 #include "dirfns.h"
+#include "defun.h"
 #include "error.h"
+#include "help.h"
 #include "gripes.h"
 #include "pager.h"
 #include "utils.h"
 #include "input.h"
 #include "octave.h"
 #include "oct-obj.h"
 #include "mappers.h"
 #include "version.h"
@@ -611,39 +613,76 @@ list_in_columns (ostrstream& os, char **
     }
 
   return os;
 }
 
 // See if the given file is in the path.
 
 char *
+search_path_for_file (const char *path, const char *name)
+{
+  char *retval = 0;
+
+  char *tmp = kpse_path_search (path, name, kpathsea_true);
+
+  if (tmp)
+    {
+      retval = make_absolute (tmp, the_current_working_directory);
+      free (tmp);
+    }
+
+  return retval;
+}
+
+DEFUN ("file_in_path", Ffile_in_pat, Sfile_in_path, 3, 1,
+  "file_in_path (PATH, NAME)")
+{
+  Octave_object retval;
+
+  DEFINE_ARGV("file_in_path");
+
+  if (argc == 3)
+    {
+      char *fname = search_path_for_file (argv[1], argv[2]);
+
+      if (fname)
+	retval = fname;
+      else
+	retval = Matrix ();
+    }
+  else
+    print_usage ("file_in_path");
+
+  DELETE_ARGV;
+
+  return retval;
+}
+
+
+char *
 file_in_path (const char *name, const char *suffix)
 {
   char *retval = 0;
 
   char *nm = strsave (name);
+
   if (suffix)
     {
       char *tmp = nm;
       nm = strconcat (tmp, suffix);
       delete [] tmp;
     }
 
   if (! the_current_working_directory)
     get_working_directory ("file_in_path");
 
-  char *tmp = kpse_path_search (user_pref.loadpath, nm, kpathsea_true);
+  retval = search_path_for_file (user_pref.loadpath, nm);
 
-  if (tmp)
-    {
-      retval = make_absolute (tmp, the_current_working_directory);
-      free (tmp);
-      delete [] nm;
-    }
+  delete [] nm;
 
   return retval;
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 char *
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -40,16 +40,17 @@ extern char *strsave (const char *);
 extern char *strconcat (const char *, const char *);
 
 extern void discard_until (istream&, char);
 
 #if 0
 extern char *read_until (istream&, char);
 #endif
 
+extern char *search_path_for_file (const char *, const char *);
 extern char *file_in_path (const char *, const char *);
 extern char *fcn_file_in_path (const char *);
 extern char *oct_file_in_path (const char *);
 
 extern char *octave_tmp_file_name (void);
 
 #if 0
 extern char **pathstring_to_vector (char *pathstring);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -328,17 +328,17 @@ subst_octave_home (char *s)
 
 static char *
 octave_info_dir (void)
 {
   static char *retval = subst_octave_home (OCTAVE_INFODIR);
   return retval;
 }
 
-static char *
+char *
 octave_arch_lib_dir (void)
 {
   static char *retval = subst_octave_home (OCTAVE_ARCHLIBDIR);
   return retval;
 }
 
 static char *
 default_pager (void)
@@ -1337,16 +1337,20 @@ install_builtin_variables (void)
   #if defined (HAVE_ISNAN)
   DEFVAR ("NaN", SBV_NaN, octave_NaN, 0, 1, 1, 0,
     "not a number");
   #endif
 
   DEFVAR ("LOADPATH", SBV_LOADPATH, load_path, 0, 0, 1, sv_loadpath,
     "colon separated list of directories to search for scripts");
 
+  DEFVAR ("IMAGEPATH", SBV_IMAGEPATH, OCTAVE_IMAGEPATH, 0, 0, 1,
+	  sv_imagepath,
+    "colon separated list of directories to search for image files");
+
   DEFVAR ("OCTAVE_VERSION", SBV_version, version_string, 0, 1, 1, 0,
     "Octave version");
 
   DEFVAR ("PAGER", SBV_PAGER, default_pager (), 0, 0, 1, sv_pager_binary,
     "path to pager binary");
 
   DEFVAR ("PS1", SBV_PS1, "\\s:\\#> ", 0, 0, 1, sv_ps1,
     "primary prompt string");
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -107,16 +107,17 @@ extern void bind_nargin_and_nargout (sym
 extern void bind_builtin_variable (const char *, tree_constant *,
 				   int protect = 0, int eternal = 0,
 				   sv_Function f = (sv_Function) 0,
 				   const char *help = 0);
 
 extern void install_builtin_variables (void);
 
 extern char *octave_lib_dir (void);
+extern char *octave_arch_lib_dir (void);
 extern char *default_path (void);
 extern char *default_info_file (void);
 extern char *default_editor (void);
 extern char *get_site_defaults (void);
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
