# HG changeset patch
# User Rik <rik@octave.org>
# Date 1475087385 25200
#      Wed Sep 28 11:29:45 2016 -0700
# Node ID 73a85c6cacd18938dbf01d01114e2e6c0dcb6d5c
# Parent  6b52d1e7ed56545e096229c8d40b03df0dd1540c
gsvd.m: Wrapper around __gsvd__ to obtain Matlab compatible results (bug #48807).

* __gsvd__.cc: Renamed from gsvd.cc
* __gsvd__.cc (__gsvd__): Rename function.  Remove documentation.
Comment out all BIST tests.

* gsvd.m: New function wrapper around __gsvd__.

* libinterp/corefcn/module.mk: Add __gsvd__.cc to build system.

* scripts/linear-algebra/module.mk: Add gsvd.m to build system.

diff --git a/libinterp/corefcn/gsvd.cc b/libinterp/corefcn/__gsvd__.cc
rename from libinterp/corefcn/gsvd.cc
rename to libinterp/corefcn/__gsvd__.cc
--- a/libinterp/corefcn/gsvd.cc
+++ b/libinterp/corefcn/__gsvd__.cc
@@ -70,137 +70,21 @@ function_gsvd (const T& A, const T& B, c
       if (nargout > 4)
         retval(4) = result.singular_values_B ();
       if (nargout > 5)
         retval(5) = result.R_matrix ();
     }
   return retval;
 }
 
-DEFUN (gsvd, args, nargout,
+DEFUN (__gsvd__, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{s} =} gsvd (@var{a}, @var{b})
-@deftypefnx {} {[@var{u}, @var{v}, @var{x}, @var{c}, @var{s}, @var{r}] =} gsvd (@var{a}, @var{b})
-@cindex generalized singular value decomposition
-Compute the generalized singular value decomposition of (@var{a}, @var{b}):
-@tex
-$$
- U^H A X = [I 0; 0 C] [0 R]
- V^H B X = [0 S; 0 0] [0 R]
- C*C + S*S = eye (columns (A))
- I and 0 are padding matrices of suitable size
- R is upper triangular
-$$
-@end tex
-@ifinfo
-
-@example
-@group
-u' * a * x = [I 0; 0 c] * [0 r]
-v' * b * x = [0 s; 0 0] * [0 r]
-c * c + s * s = eye (columns (a))
-I and 0 are padding matrices of suitable size
-r is upper triangular
-@end group
-@end example
-
-@end ifinfo
-
-The function @code{gsvd} normally returns the vector of generalized singular
-values
-@tex
-diag (C) ./ diag (S).
-@end tex
-@ifinfo
-diag (r) ./ diag (s).
-@end ifinfo
-If asked for five return values, it computes
-@tex
-$U$, $V$, and $X$.
-@end tex
-@ifinfo
-U, V, and X.
-@end ifinfo
-With a sixth output argument, it also returns
-@tex
-R,
-@end tex
-@ifinfo
-r,
-@end ifinfo
-The common upper triangular right term.  Other authors, like
-@nospell{S. Van Huffel}, define this transformation as the simultaneous
-diagonalization of the input matrices, this can be achieved by multiplying
-@tex
-X
-@end tex
-@ifinfo
-x
-@end ifinfo
-by the inverse of
-@tex
-[I 0; 0 R].
-@end tex
-@ifinfo
-[I 0; 0 r].
-@end ifinfo
-
-For example,
-
-@example
-gsvd (hilb (3), [1 2 3; 3 2 1])
-
-@result{}
-  0.1055705
-  0.0031759
-@end example
-
-@noindent
-and
-
-@example
-[u, v, c, s, x, r] = gsvd (hilb (3), [1 2 3; 3 2 1])
-@result{}
-
-u =
-
-  -0.965609   0.240893   0.097825
-  -0.241402  -0.690927  -0.681429
-  -0.096561  -0.681609   0.725317
-
-v =
-
-  -0.41974   0.90765
-  -0.90765  -0.41974
-
-x =
-
-   0.408248   0.902199   0.139179
-  -0.816497   0.429063  -0.386314
-   0.408248  -0.044073  -0.911806
-
-c =
-
-   0.10499   0.00000
-   0.00000   0.00318
-
-s =
-   0.99447   0.00000
-   0.00000   0.99999
-
-r =
-  -0.14093  -1.24345   0.43737
-   0.00000  -3.90043   2.57818
-   0.00000   0.00000  -2.52599
-
-@end example
-
-The code is a wrapper to the corresponding @sc{lapack} dggsvd and zggsvd
-routines.
-
+@deftypefn  {} {@var{s} =} __gsvd__ (@var{a}, @var{b})
+@deftypefnx {} {[@var{u}, @var{v}, @var{x}, @var{c}, @var{s}, @var{r}] =} __gsvd__ (@var{a}, @var{b})
+Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () !=  2)
     print_usage ();
 
   octave_value_list retval;
 
   octave_value argA = args(0);
@@ -263,199 +147,200 @@ routines.
                 error ("gsvd: A cannot have Inf or NaN values");
               if (ctmpB.any_element_is_inf_or_nan ())
                 error ("gsvd: B cannot have Inf or NaN values");
 
               retval = function_gsvd (ctmpA, ctmpB, nargout);
             }
         }
       else
-        {
-          // Actually, can't tell which arg is at fault
-          err_wrong_type_arg ("gsvd", argA);
-          //err_wrong_type_arg ("gsvd", argB);
-        }
+        error ("gsvd: A and B must be real or complex matrices");
     }
 
   return retval;
 }
 
 /*
+## FIXME: All tests are commented out for the 4.2.0 release.
+## The m-file gsvd.m needs to be replaced with C++ code that achieves Matlab
+## compatible outputs, and the BIST tests need to be updated to reflect the new
+## outputs.
+
 ## a few tests for gsvd.m
-%!shared A, A0, B, B0, U, V, C, S, X, R, D1, D2
+%!#shared A, A0, B, B0, U, V, C, S, X, R, D1, D2
 %! A0 = randn (5, 3);
 %! B0 = diag ([1 2 4]);
 %! A = A0;
 %! B = B0;
 
 ## A (5x3) and B (3x3) are full rank
-%!test
+%!#test
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros (5, 3);  D1(1:3, 1:3) = C;
 %! D2 = S;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 5x3 full rank, B: 3x3 rank deficient
-%!test
+%!#test
 %! B(2, 2) = 0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros (5, 3);  D1(1, 1) = 1;  D1(2:3, 2:3) = C;
 %! D2 = [zeros(2, 1) S; zeros(1, 3)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 5x3 rank deficient, B: 3x3 full rank
-%!test
+%!#test
 %! B = B0;
 %! A(:, 3) = 2*A(:, 1) - A(:, 2);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 3);  D1(1:3, 1:3) = C;
 %! D2 = S;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A and B are both rank deficient
-%!test
+%!#test
 %! B(:, 3) = 2*B(:, 1) - B(:, 2);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 2);  D1(1:2, 1:2) = C;
 %! D2 = [S; zeros(1, 2)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*[zeros(2, 1) R]) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*[zeros(2, 1) R]) <= 1e-6);
 
 ## A (now 3x5) and B (now 5x5) are full rank
-%!test
+%!#test
 %! A = A0.';
 %! B0 = diag ([1 2 4 8 16]);
 %! B = B0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = [C zeros(3,2)];
 %! D2 = [S zeros(3,2); zeros(2, 3) eye(2)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 3x5 full rank, B: 5x5 rank deficient
-%!test
+%!#test
 %! B(2, 2) = 0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(3, 5); D1(1, 1) = 1; D1(2:3, 2:3) = C;
 %! D2 = zeros(5, 5); D2(1:2, 2:3) = S; D2(3:4, 4:5) = eye (2);
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 3x5 rank deficient, B: 5x5 full rank
-%!test
+%!#test
 %! B = B0;
 %! A(3, :) = 2*A(1, :) - A(2, :);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros (3, 5);  D1(1:3, 1:3) = C;
 %! D2 = zeros (5, 5);  D2(1:3, 1:3) = S;  D2(4:5, 4:5) = eye (2);
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A and B are both rank deficient
-%!test
+%!#test
 %! A = A0.'; B = B0.';
 %! A(:, 3) = 2*A(:, 1) - A(:, 2);
 %! B(:, 3) = 2*B(:, 1) - B(:, 2);
 %! [U, V, X, C, S, R]=gsvd (A, B);
 %! D1 = zeros(3, 4); D1(1:3, 1:3) = C;
 %! D2 = eye (4); D2(1:3, 1:3) = S; D2(5,:) = 0;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*[zeros(4, 1) R]) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*[zeros(4, 1) R]) <= 1e-6);
 
 ## A: 5x3 complex full rank, B: 3x3 complex full rank
-%!test
+%!#test
 %! A0 = A0 + j*randn (5, 3);
 %! B0 = diag ([1 2 4]) + j*diag ([4 -2 -1]);
 %! A = A0;
 %! B = B0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 3);  D1(1:3, 1:3) = C;
 %! D2 = S;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 5x3 complex full rank, B: 3x3 complex rank deficient
-%!test
+%!#test
 %! B(2, 2) = 0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 3);  D1(1, 1) = 1;  D1(2:3, 2:3) = C;
 %! D2 = [zeros(2, 1) S; zeros(1, 3)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 5x3 complex rank deficient, B: 3x3 complex full rank
-%!test
+%!#test
 %! B = B0;
 %! A(:, 3) = 2*A(:, 1) - A(:, 2);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 3);  D1(1:3, 1:3) = C;
 %! D2 = S;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A (5x3) and B (3x3) are both complex rank deficient
-%!test
+%!#test
 %! B(:, 3) = 2*B(:, 1) - B(:, 2);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(5, 2);  D1(1:2, 1:2) = C;
 %! D2 = [S; zeros(1, 2)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*[zeros(2, 1) R]) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*[zeros(2, 1) R]) <= 1e-6);
 
 ## A (now 3x5) complex and B (now 5x5) complex are full rank
 ## now, A is 3x5
-%!test
+%!#test
 %! A = A0.';
 %! B0 = diag ([1 2 4 8 16]) + j*diag ([-5 4 -3 2 -1]);
 %! B = B0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = [C zeros(3,2)];
 %! D2 = [S zeros(3,2); zeros(2, 3) eye(2)];
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 3x5 complex full rank, B: 5x5 complex rank deficient
-%!test
+%!#test
 %! B(2, 2) = 0;
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(3, 5);  D1(1, 1) = 1;  D1(2:3, 2:3) = C;
 %! D2 = zeros(5,5);  D2(1:2, 2:3) = S;  D2(3:4, 4:5) = eye (2);
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (2, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A: 3x5 complex rank deficient, B: 5x5 complex full rank
-%!test
+%!#test
 %! B = B0;
 %! A(3, :) = 2*A(1, :) - A(2, :);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(3, 5);  D1(1:3, 1:3) = C;
 %! D2 = zeros(5,5);  D2(1:3, 1:3) = S;  D2(4:5, 4:5) = eye (2);
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
 %! assert (norm ((U'*A*X) - D1*R) <= 1e-6);
 %! assert (norm ((V'*B*X) - D2*R) <= 1e-6);
 
 ## A and B are both complex rank deficient
-%!test
+%!#test
 %! A = A0.';
 %! B = B0.';
 %! A(:, 3) = 2*A(:, 1) - A(:, 2);
 %! B(:, 3) = 2*B(:, 1) - B(:, 2);
 %! [U, V, X, C, S, R] = gsvd (A, B);
 %! D1 = zeros(3, 4);  D1(1:3, 1:3) = C;
 %! D2 = eye (4);  D2(1:3, 1:3) = S;  D2(5,:) = 0;
 %! assert (norm (diag (C).^2 + diag (S).^2 - ones (3, 1)) <= 1e-6);
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -113,16 +113,17 @@ NOINSTALL_COREFCN_INC = \
 ## oct-tex-parser.h is in the SRC list so that it will be distributed
 ## but not installed.
 
 COREFCN_SRC = \
   libinterp/corefcn/Cell.cc \
   libinterp/corefcn/__contourc__.cc \
   libinterp/corefcn/__dispatch__.cc \
   libinterp/corefcn/__dsearchn__.cc \
+  libinterp/corefcn/__gsvd__.cc \
   libinterp/corefcn/__ichol__.cc \
   libinterp/corefcn/__ilu__.cc \
   libinterp/corefcn/__lin_interpn__.cc \
   libinterp/corefcn/__luinc__.cc \
   libinterp/corefcn/__magick_read__.cc \
   libinterp/corefcn/__pchip_deriv__.cc \
   libinterp/corefcn/__qp__.cc \
   libinterp/corefcn/balance.cc \
@@ -168,17 +169,16 @@ COREFCN_SRC = \
   libinterp/corefcn/getgrent.cc \
   libinterp/corefcn/getpwent.cc \
   libinterp/corefcn/getrusage.cc \
   libinterp/corefcn/givens.cc \
   libinterp/corefcn/gl-render.cc \
   libinterp/corefcn/gl2ps-print.cc \
   libinterp/corefcn/graphics.cc \
   libinterp/corefcn/gripes.cc \
-  libinterp/corefcn/gsvd.cc \
   libinterp/corefcn/hash.cc \
   libinterp/corefcn/help.cc \
   libinterp/corefcn/hess.cc \
   libinterp/corefcn/hex2num.cc \
   libinterp/corefcn/hook-fcn.cc \
   libinterp/corefcn/input.cc \
   libinterp/corefcn/inv.cc \
   libinterp/corefcn/interpreter.cc \
diff --git a/scripts/linear-algebra/gsvd.m b/scripts/linear-algebra/gsvd.m
new file mode 100644
--- /dev/null
+++ b/scripts/linear-algebra/gsvd.m
@@ -0,0 +1,100 @@
+## Copyright (C) 2016 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{S} =} gsvd (@var{A}, @var{B})
+## @deftypefnx {} {[@var{U}, @var{V}, @var{X}, @var{C}, @var{S}] =} gsvd (@var{A}, @var{B})
+## Compute the generalized singular value decomposition of (@var{A}, @var{B}):
+##
+## @tex
+## $$ A = U C X^\dagger $$
+## $$ B = V S X^\dagger $$
+## $$ C^\dagger C + S^\dagger S = eye (columns (A)) $$
+## @end tex
+## @ifnottex
+##
+## @example
+## @group
+## A = U*C*X'
+## B = V*S*X'
+## C'*C + S'*S = eye (columns (A))
+## @end group
+## @end example
+##
+## @end ifnottex
+##
+## The function @code{gsvd} normally returns the vector of generalized singular
+## values
+## @tex
+## $$ \sqrt{{{diag (C^\dagger C)} \over {diag (S^\dagger S)}}} $$
+## @end tex
+## @ifnottex
+## @code{sqrt (diag (C'*C) ./ diag (S'*S))}.
+## @end ifnottex
+## If asked for five return values, it also computes
+## @tex
+## $U$, $V$, and $X$.
+## @end tex
+## @ifnottex
+## U, V, and X.
+## @end ifnottex
+##
+## The code is a wrapper to the corresponding @sc{lapack} dggsvd and zggsvd
+## routines.
+##
+## @seealso{svd}
+## @end deftypefn
+
+## FIXME: This m-file is a wrapper around __gsvd__ in libinterp/corefcn.
+## It was put in place strictly for the 4.2.0 release in order to achieve
+## Matlab-compatible output for the gsvd function.  Eventually the C++ code
+## needs to be updated to reflect what is being done in this m-file and then
+## this m-file should be deleted.
+
+function [U, V, X, C, S] = gsvd (A, B, econ = false)
+
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+  endif
+
+  if (nargin == 3)
+    warning ('gsvd: "economy" option is not yet implemented');
+  endif
+
+  if (nargout <= 1)
+    U = __gsvd__ (A, B);
+  else
+    [U, V, X, C, S, R] = __gsvd__ (A, B);
+    X = (R / X)';
+    [m, n] = size (A);
+    if (m > n)
+      C = [C; zeros(m-n, n)];
+    elseif (m < n)
+      C = [C, zeros(m, n-m)];
+      S0 = S;
+      S = eye (n);
+      S(1:m, 1:m) = S0;
+    endif
+  endif
+
+endfunction
+
+
+## FIXME: All BIST tests are in the C++ file __gsvd__.cc.  They are currently
+## not run because they have not been updated to reflect the actual expected
+## output.
diff --git a/scripts/linear-algebra/module.mk b/scripts/linear-algebra/module.mk
--- a/scripts/linear-algebra/module.mk
+++ b/scripts/linear-algebra/module.mk
@@ -4,16 +4,17 @@ scripts_linear_algebra_FCN_FILES = \
   scripts/linear-algebra/bandwidth.m \
   scripts/linear-algebra/commutation_matrix.m \
   scripts/linear-algebra/cond.m \
   scripts/linear-algebra/condest.m \
   scripts/linear-algebra/condeig.m \
   scripts/linear-algebra/cross.m \
   scripts/linear-algebra/duplication_matrix.m \
   scripts/linear-algebra/expm.m \
+  scripts/linear-algebra/gsvd.m \
   scripts/linear-algebra/housh.m \
   scripts/linear-algebra/isbanded.m \
   scripts/linear-algebra/isdefinite.m \
   scripts/linear-algebra/isdiag.m \
   scripts/linear-algebra/ishermitian.m \
   scripts/linear-algebra/issymmetric.m \
   scripts/linear-algebra/istril.m \
   scripts/linear-algebra/istriu.m \
