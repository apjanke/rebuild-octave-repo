# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546623138 28800
#      Fri Jan 04 09:32:18 2019 -0800
# Branch stable
# Node ID 6bfed6e4e9e96df72d7e00b4eb30403e1a16f0d5
# Parent  6e698f4606db8e807c9c76a2cda94208fe45d768
lo-ieee.cc: Fix static analyzer detected issues (bug #55347).

* lo-ieee.cc (octave_ieee_init): Use static keyword on initialized variable so
that init code is executed just once.

diff --git a/liboctave/util/lo-ieee.cc b/liboctave/util/lo-ieee.cc
--- a/liboctave/util/lo-ieee.cc
+++ b/liboctave/util/lo-ieee.cc
@@ -125,17 +125,17 @@ lo_ieee_float_nan_value (void)
   octave_ieee_init ();
 
   return lo_float_nan;
 }
 
 void
 octave_ieee_init (void)
 {
-  bool initialized = false;
+  static bool initialized = false;
 
   if (! initialized)
     {
       octave::mach_info::float_format ff = octave::mach_info::native_float_format ();
 
       switch (ff)
         {
         case octave::mach_info::flt_fmt_ieee_big_endian:
@@ -175,17 +175,17 @@ octave_ieee_init (void)
 
         default:
           // If the format is unknown, then you will probably not have a
           // useful system, so we will abort here.  Anyone wishing to
           // experiment with building Octave on a system without IEEE
           // floating point should be capable of removing this check and
           // the configure test.
           //
-          // If the the error handler returns, then we'll abort.
+          // If the error handler returns, then we'll abort.
 
           (*current_liboctave_error_handler)
             ("lo_ieee_init: floating point format is not IEEE!  Maybe DLAMCH is miscompiled, or you are using some strange system without IEEE floating point math?");
 
           abort ();
         }
 
       initialized = true;
