# HG changeset patch
# User Rik <rik@octave.org>
# Date 1393740299 28800
#      Sat Mar 01 22:04:59 2014 -0800
# Branch stable
# Node ID f51c1498b9f38e4d914eeeac3e458f56681f9737
# Parent  ea0d4dea1a170b063b34ea817cae2c0e241bb161
doc: Replace "builtin" with "built-in" for consistency and correctness.

* external.txi, func.txi, testfun.txi, doc_cache_create.m:
Replace "builtin" with "built-in" for consistency and correctness.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1754,17 +1754,17 @@ Hello Octave world!
   21 22
 $
 @end group
 @end example
 
 Note that the application @code{standalone} will be dynamically linked
 against the Octave libraries and any Octave support libraries.  The above
 allows the Octave math libraries to be used by an application.  It does
-not, however, allow the script files, oct-files, or builtin functions of
+not, however, allow the script files, oct-files, or built-in functions of
 Octave to be used by the application.  To do that the Octave interpreter
 needs to be initialized first.  An example of how to do this can then be
 seen in the code
 
 @example
 @EXAMPLEFILE(embedded.cc)
 @end example
 
@@ -1775,27 +1775,27 @@ which, as before, is compiled and run as
 @group
 $ mkoctfile --link-stand-alone embedded.cc -o embedded
 $ ./embedded
 GCD of [10, 15] is 5
 $
 @end group
 @end example
 
-It is worth noting that, if only builtin functions are to be called from 
+It is worth noting that, if only built-in functions are to be called from 
 a C++ standalone program, then it does not need to initialize the 
-interpreter to do so.  The general rule is that, for a builtin 
+interpreter to do so.  The general rule is that, for a built-in 
 function named @code{function_name} in the interpreter, there will be
 a C++ function named @code{Ffunction_name} (note the prepended capital 
-@code{F}) accessible in the C++ API@.  The declarations for all builtin 
+@code{F}) accessible in the C++ API@.  The declarations for all built-in 
 functions are collected in the header file @code{builtin-defun-decls.h}.
 This feature should be used with care as the list of built-in functions can
 change.  No guarantees can be made that a function that is currently built in
 won't be implemented as a .m file or as a dynamically linked function in the
-future.  An example of how to call builtin functions from C++ can be seen in the
+future.  An example of how to call built-in functions from C++ can be seen in the
 code
 
 @example
 @EXAMPLEFILE(standalonebuiltin.cc)
 @end example
 
 @noindent
 which, again, is compiled and run as a standalone application with
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1141,18 +1141,18 @@ A function that has been defined on the 
 A function that is marked as autoloaded with @xref{XREFautoload,,autoload}.
 
 @item A Function on the Path
 A function that can be found on the users load-path.  There can also be
 Oct-file, mex-file or m-file versions of this function and the precedence
 between these versions are in that order.
 
 @item Built-in function
-A function that is builtin to Octave itself such as @code{numel},
-@code{size}, etc.
+A function that is a part of core Octave such as @code{numel}, @code{size},
+etc.
 @end enumerate
 
 @node Script Files
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -360,18 +360,18 @@ define a function for use in multiple te
 
 @item %!endfunction
 close a function definition
 
 @item %!assert (x, y, tol)
 shorthand for @code{%!test assert (x, y, tol)}
 @end table
 
-You can also create test scripts for builtins and your own C++
-functions.  To do so put a file with the bare function name (no .m
+You can also create test scripts for built-in functions and your own C++
+functions.  To do so, put a file with the bare function name (no .m
 extension) in a directory in the load path and it will be discovered by
 the @code{test} function.  Alternatively, you can embed tests directly in your
 C++ code:
 
 @example
 @group
 /*
 %!test disp ("this is a test")
diff --git a/scripts/help/doc_cache_create.m b/scripts/help/doc_cache_create.m
--- a/scripts/help/doc_cache_create.m
+++ b/scripts/help/doc_cache_create.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {} doc_cache_create (@var{out_file}, @var{directory})
 ## Generate documentation caches for all functions in a given directory.
 ##
 ## A documentation cache is generated for all functions in @var{directory}.
 ## The
 ## resulting cache is saved in the file @var{out_file}.
 ## The cache is used to speed up @code{lookfor}.
 ##
-## If no directory is given (or it is the empty matrix), a cache for builtin
+## If no directory is given (or it is the empty matrix), a cache for built-in
 ## operators, etc. is generated.
 ##
 ## @seealso{doc_cache_file, lookfor, path}
 ## @end deftypefn
 
 function doc_cache_create (out_file = "doc-cache", directory = [])
 
   ## Check input
