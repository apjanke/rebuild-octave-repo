# HG changeset patch
# User jwe
# Date 789080379 0
#      Mon Jan 02 20:59:39 1995 +0000
# Node ID df3c4da3adb05bc03a90b560d509c9314fdfe762
# Parent  19d836fec1c8df067cb421e2b3ca51592ee7beb0
[project @ 1995-01-02 20:59:39 by jwe]

diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -165,17 +165,19 @@ public:
   tree_constant assign (tree_constant& rhs, const Octave_object& args)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
+
       rep->assign (rhs, args);
+
       return *this;
     }
 
 // Simple structure assignment.
 
   tree_constant assign_map_element (SLList<char*>& list,
 				    tree_constant& rhs);
 
@@ -306,43 +308,49 @@ public:
   void bump_value (tree_expression::type et)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
+
       rep->bump_value (et);
     }
 
 // Evaluate this constant, possibly converting complex to real, or
 // matrix to scalar, etc.
 
   tree_constant eval (int print)
     {
-      rep->maybe_mutate ();
+      if (! is_scalar_type ())
+	rep->maybe_mutate ();
+
       if (print)
 	rep->print ();
+
       return *this;
     }
 
   Octave_object eval (int print, int nargout, const Octave_object& args)
     {
       Octave_object retval;
 
 // XXX FIXME XXX -- make it safe to call do_index() with
 // args.length () == 0
+
       if (args.length () > 0)
 	retval(0) = rep->do_index (args);
       else
 	retval(0) = *this;
 
       if (retval(0).is_defined ())
 	retval(0).eval (print);
+
       return retval;
     }
 
 // Store the original text corresponding to this constant for later
 // pretty printing.
 
   void stash_original_text (char *s)
     { rep->stash_original_text (s); }
