# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264596422 -3600
#      Wed Jan 27 13:47:02 2010 +0100
# Node ID ea0d83b4470bcae8fdbf4de0c232961911dedb39
# Parent  c54ee101d13c5e04cf7731ca7ea82331182f062a
document use of ~ placeholders in the manual

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/expr.txi: Document using dummy outputs.
+	* interpreter/func.txi: Document using dummy inputs.
+
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc: Delete Emacs local-variable settings.
 	Untabify.
 
 2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* interpreter/container.txi (Creating Cell Arrays): Add
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -987,16 +987,31 @@ following will produce an error.
 
 @example
 @group
 [a, b, c, d] = [u, s, v] = svd (a);
 @print{} error: element number 4 undefined in return list
 @end group
 @end example
 
+The symbol @code{~} may be used as a placeholder in the list of lvalues,
+indicating that the corresponding return value should be ignored and not stored
+anywhere:
+
+@example
+@group
+[~, s, v] = svd (a);
+@end group
+@end example
+
+This is cleaner and more efficient than using a dummy variable.
+It is not recommended, however, to reuse such an assignment statement as a right-hand side
+in another expression. Currently, this works as expected, but may cease to work in future
+releases of Octave. The @code{nargout} value for the right-hand side expression is not affected.
+
 @opindex +=
 A very common programming pattern is to increment an existing variable
 with a given value, like this
 
 @example
 a = a + 2;
 @end example
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -27,16 +27,17 @@ Complicated Octave programs can often be
 functions.  Functions can be defined directly on the command line during
 interactive Octave sessions, or in external files, and can be called just
 like built-in functions.
 
 @menu
 * Defining Functions::          
 * Multiple Return Values::      
 * Variable-length Argument Lists::  
+* Ignoring Arguments::  
 * Variable-length Return Lists::  
 * Returning From a Function::   
 * Default Arguments::   
 * Function Files::              
 * Script Files::                
 * Function Handles Inline Functions and Anonymous Functions::
 * Commands::
 * Organization of Functions::   
@@ -431,16 +432,33 @@ print_arguments (1, "two", 3);
      @print{} Input argument 1:  1
      @print{} Input argument 2: two
      @print{} Input argument 3:  3
 @end group
 @end example
 
 @DOCSTRING(parseparams)
 
+@node Ignoring Arguments
+@section Ignoring Arguments
+
+In the formal argument list, it is possible to use the dummy placeholder @code{~}
+instead of a name. This indicates that the corresponding argument value should be ignored
+and not stored to any variable.
+
+@example
+@group
+function val = pick2nd (~, arg2)
+  val = arg2;
+endfunction
+@end group
+@end example
+
+The value of @code{nargin} is not affected by using this declaration.
+
 @node Variable-length Return Lists
 @section Variable-length Return Lists
 @cindex variable-length return lists
 @cindex @code{varargout}
 
 It is possible to return a variable number of output arguments from a
 function using a syntax that's similar to the one used with the
 special @code{varargin} parameter name.  To let a function return a
