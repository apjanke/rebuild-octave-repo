# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295562087 18000
#      Thu Jan 20 17:21:27 2011 -0500
# Node ID 1473d0cf86d210e31834f6806e070f4d2a565453
# Parent  cda4aa780d588cd152f3460851aa9d43a30d5c5c
untabify source files

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* gl-render.cc, DLD-FUNCTIONS/__init_fltk__.cc,
+	DLD-FUNCTIONS/__magick_read__.cc: Untabify.
+
 2011-01-20  Pascal Dupuis <Pascal.Dupuis@worldonline.be>.
 
 	* debug.h, dynamic-ld.cc, gl-render.cc, gl-render.h,
 	gl2ps-renderer.h, lex.h, ls-hdf5.h, oct-stream.h, oct-strstrm.h,
 	ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base-sparse.h,
 	ov-cell.h, ov-class.h, ov-dld-fcn.h, ov-fcn-handle.h,
 	ov-lazy-idx.h, ov-perm.h, ov-range.h, ov-struct.h, procstream.h,
 	pt-assign.h, symtab.h, unwind-prot.h: Initialize
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -1566,21 +1566,21 @@ private:
       }
   }
 
   void do_toggle_menubar_visibility (int fig_idx, bool menubar_is_figure)
   {
     wm_iterator win;
     if ((win = windows.find (fig_idx)) != windows.end ())
       {
-	if (menubar_is_figure)
+        if (menubar_is_figure)
           win->second->show_menubar ();
         else
           win->second->hide_menubar ();
-	
+        
         win->second->redraw ();
       }
   }
   
   void do_mark_modified (int idx)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
@@ -1800,20 +1800,20 @@ public:
               dynamic_cast<const figure::properties&> (go.get_properties ());
             
             switch (id)
               {
                 case base_properties::ID_VISIBLE:
                   figure_manager::toggle_window_visibility (ov.string_value (), fp.is_visible ());
                   break;
                 case figure::properties::ID_MENUBAR:
-		  figure_manager::toggle_menubar_visibility (ov.string_value (), fp.menubar_is("figure"));
+                  figure_manager::toggle_menubar_visibility (ov.string_value (), fp.menubar_is("figure"));
                   break;
                 case figure::properties::ID_NAME:
-		case figure::properties::ID_CURRENTAXES:
+                case figure::properties::ID_CURRENTAXES:
                   figure_manager::update_canvas (go.get_handle (), fp.get_currentaxes ());
                   break;
                 case figure::properties::ID_NUMBERTITLE:
                   figure_manager::set_name (ov.string_value ());
                   break;
               }
           }
       }
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -519,18 +519,18 @@ function.  Instead use @code{imread}.\n\
         case 32:
         case 64:
         default:
           error ("__magick_read__: image depths greater than 16-bit are not supported");
         }
     }
 #else
 
-  error ("imread: this installation of Octave does not support reading images."
-	 " Image reading capabilities were disabled when this installation was compiled.");
+  error ("imread: image reading ave does not support reading images."
+         " Image reading capabilities were disabled when this installation was compiled.");
 
 #endif
 
   return output;
 }
 
 #ifdef HAVE_MAGICK
 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -1150,22 +1150,22 @@ opengl_renderer::draw_axes (const axes::
                     p(1) += hmax;
                     break;
                 }
               if (xlabel_props.positionmode_is("auto"))
                 {
                   p = xform.untransform (p(0), p(1), p(2), true);
                   xlabel_props.set_position (p.extract_n (0, 3).transpose ());
                   xlabel_props.set_positionmode ("auto");
-	        }
+                }
               if (xlabel_props.rotationmode_is("auto"))
                 {
                   xlabel_props.set_rotation (angle);
                   xlabel_props.set_rotationmode ("auto");
-	        }
+                }
             }
         }
     }
   else
     {
       gh_manager::get_object (props.get_xlabel ()).set ("visible", "off");
     }
 
@@ -1400,22 +1400,22 @@ opengl_renderer::draw_axes (const axes::
                     p(1) += hmax;
                     break;
                 }
               if (ylabel_props.positionmode_is("auto"))
                 {
                   p = xform.untransform (p(0), p(1), p(2), true);
                   ylabel_props.set_position (p.extract_n (0, 3).transpose ());
                   ylabel_props.set_positionmode ("auto");
-	        }
+                }
               if (ylabel_props.rotationmode_is("auto"))
                 {
                   ylabel_props.set_rotation (angle);
                   ylabel_props.set_rotationmode ("auto");
-	        }
+                }
             }
         }
     }
   else
     {
       gh_manager::get_object (props.get_ylabel ()).set ("visible", "off");
     }
                 
@@ -1740,22 +1740,22 @@ opengl_renderer::draw_axes (const axes::
                     p(1) += hmax;
                     break;
                 }
               if (zlabel_props.positionmode_is("auto"))
                 {
                   p = xform.untransform (p(0), p(1), p(2), true);
                   zlabel_props.set_position (p.extract_n (0, 3).transpose ());
                   zlabel_props.set_positionmode ("auto");
-	        }
+                }
               if (zlabel_props.rotationmode_is("auto"))
                 {
                   zlabel_props.set_rotation (angle);
                   zlabel_props.set_rotationmode ("auto");
-	        }
+                }
             }
         }
     }
   else
     {
       gh_manager::get_object (props.get_zlabel ()).set ("visible", "off");
     }
 
