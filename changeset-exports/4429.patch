# HG changeset patch
# User jwe
# Date 1055824568 0
#      Tue Jun 17 04:36:08 2003 +0000
# Node ID c1f6200b5f0ea055b83ff73243a1754a9a11d00d
# Parent  067160691cc9fffe555f51f245b1662824846289
[project @ 2003-06-17 04:36:08 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,10 +1,25 @@
 2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dasrt/ddasrt.f (DDASRT): Print correct message for invalid MXSTP.
+
+	* dassl/ddassl.f (DDASSL): Handle MXSTP as in DASRT.
+
+	* dassl/ddajac.f (DDAJAC): LIPVT is now 22.
+	* dassl/ddassl.f (DDASSL): Likewise.
+	* dassl/ddaslv.f (DDASLV): Likewise.
+
+	* misc/quit.h (octave_interrupt_hook, octave_bad_alloc_hook):
+	New function pointers.
+	* misc/quit.cc: Initialize them.
+	(octave_throw_interrupt_exception): If octave_interrupt_hook is
+	set, call it.
+	(octave_throw_bad_alloc): Likewise, for octave_bad_alloc_hook.
+
 	* dasrt/ddasrt.f (DDASRT): Set LMXSTP to 21 and LIPVT to 22 to
 	avoid conflict with LLAST in DRCHECK.  Change docs for INFO(12)
 	and LIW.
 
 2003-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in, misc/Makefile.in: Handle DESTDIR.
 
diff --git a/libcruft/dasrt/ddasrt.f b/libcruft/dasrt/ddasrt.f
--- a/libcruft/dasrt/ddasrt.f
+++ b/libcruft/dasrt/ddasrt.f
@@ -382,18 +382,18 @@ C                       to YPRIME.  (If 
 C                       YPRIME should be, set it to zero. Note
 C                       that the initial Y should be such
 C                       that there must exist a YPRIME so that
 C                       F(T,Y,YPRIME) = 0.)
 C
 C        INFO(12) --Maximum number of steps.
 C          ****   Do you want to let DDASRT use the default limit for
 C                 the number of steps?
-C                 Yes - Set INFO(11) = 0
-C                  No - Set INFO(11) = 1,
+C                 Yes - Set INFO(12) = 0
+C                  No - Set INFO(12) = 1,
 C                       and define the maximum number of steps
 C                       by setting IWORK(21)=MXSTEP
 C
 C   RTOL, ATOL -- You must assign relative (RTOL) and absolute (ATOL
 C               error tolerances to tell the code how accurately you
 C               want the solution to be computed. They must be defined
 C               as variables because the code may change them. You
 C               have two choices --
@@ -950,17 +950,17 @@ C     CHECK HMAX
          HMAX=RWORK(LHMAX)
          IF(HMAX.LE.0.0D0)GO TO 710
 70    CONTINUE
 C
 C     CHECK AND COMPUTE MAXIMUM STEPS
       MXSTP=500
       IF(INFO(12).EQ.0)GO TO 80
         MXSTP=IWORK(LMXSTP)
-        IF(MXSTP.LT.0)GO TO 703
+        IF(MXSTP.LT.0)GO TO 716
 80      IWORK(LMXSTP)=MXSTP
 C
 C     INITIALIZE COUNTERS
       IWORK(LNST)=0
       IWORK(LNRE)=0
       IWORK(LNJE)=0
       IWORK(LNGE)=0
 C
diff --git a/libcruft/dassl/ddajac.f b/libcruft/dassl/ddajac.f
--- a/libcruft/dassl/ddajac.f
+++ b/libcruft/dassl/ddajac.f
@@ -68,17 +68,17 @@ C
      *   LML, LMTYPE, LMU, MBA, MBAND, MEB1, MEBAND, MSAVE, MTYPE, N,
      *   NPD, NPDM1, NROW
       DOUBLE PRECISION  DEL, DELINV, SQUR, YPSAVE, YSAVE
 C
       PARAMETER (NPD=1)
       PARAMETER (LML=1)
       PARAMETER (LMU=2)
       PARAMETER (LMTYPE=4)
-      PARAMETER (LIPVT=21)
+      PARAMETER (LIPVT=22)
 C
 C***FIRST EXECUTABLE STATEMENT  DDAJAC
       IER = 0
       NPDM1=NPD-1
       MTYPE=IWM(LMTYPE)
       GO TO (100,200,300,400,500),MTYPE
 C
 C
diff --git a/libcruft/dassl/ddaslv.f b/libcruft/dassl/ddaslv.f
--- a/libcruft/dassl/ddaslv.f
+++ b/libcruft/dassl/ddaslv.f
@@ -33,17 +33,17 @@ C
 C
       EXTERNAL  DGBTRS, DGETRS
 C
       INTEGER  LIPVT, LML, LMU, LMTYPE, MEBAND, MTYPE, NPD, INFO
       PARAMETER (NPD=1)
       PARAMETER (LML=1)
       PARAMETER (LMU=2)
       PARAMETER (LMTYPE=4)
-      PARAMETER (LIPVT=21)
+      PARAMETER (LIPVT=22)
 C
 C***FIRST EXECUTABLE STATEMENT  DDASLV
       MTYPE=IWM(LMTYPE)
       GO TO(100,100,300,400,400),MTYPE
 C
 C     DENSE MATRIX
 100   CALL DGETRS('N', NEQ, 1, WM(NPD), NEQ, IWM(LIPVT), DELTA, NEQ, 
      *     INFO)
diff --git a/libcruft/dassl/ddassl.f b/libcruft/dassl/ddassl.f
--- a/libcruft/dassl/ddassl.f
+++ b/libcruft/dassl/ddassl.f
@@ -430,17 +430,17 @@ C                     LRW .GE. 40+(MAXOR
 C                           +2*(NEQ/(ML+MU+1)+1)
 C               for the banded finite-difference-generated JACOBIAN case
 C               (when INFO(5)=0 and INFO(6)=1)
 C
 C  IWORK(*) --  Dimension this integer work array of length LIW in
 C         your calling program.
 C
 C  LIW -- Set it to the declared length of the IWORK array.
-C               You must have LIW .GE. 20+NEQ
+C               You must have LIW .GE. 21+NEQ
 C
 C  RPAR, IPAR -- These are parameter arrays, of real and integer
 C         type, respectively.  You can use them for communication
 C         between your program that calls DDASSL and the
 C         RES subroutine (and the JAC subroutine).  They are not
 C         altered by DDASSL.  If you do not need RPAR or IPAR,
 C         ignore these parameters by treating them as dummy
 C         arguments.  If you do choose to use them, dimension
@@ -937,34 +937,35 @@ C
 C     Declare externals.
 C
       EXTERNAL  D1MACH, DDAINI, DDANRM, DDASTP, DDATRP, DDAWTS, XERMSG
       DOUBLE PRECISION  D1MACH, DDANRM
 C
 C     Declare local variables.
 C
       INTEGER  I, ITEMP, LALPHA, LBETA, LCJ, LCJOLD, LCTF, LDELTA,
-     *   LENIW, LENPD, LENRW, LE, LETF, LGAMMA, LH, LHMAX, LHOLD, LIPVT,
+     *   LENIW, LENPD, LENRW, LE, LETF, LGAMMA, LH, LHMAX, LHOLD,
+     *   LMXSTP, LIPVT,
      *   LJCALC, LK, LKOLD, LIWM, LML, LMTYPE, LMU, LMXORD, LNJE, LNPD,
      *   LNRE, LNS, LNST, LNSTL, LPD, LPHASE, LPHI, LPSI, LROUND, LS,
      *   LSIGMA, LTN, LTSTOP, LWM, LWT, MBAND, MSAVE, MXORD, NPD, NTEMP,
      *   NZFLG
       DOUBLE PRECISION
      *   ATOLI, H, HMAX, HMIN, HO, R, RH, RTOLI, TDIST, TN, TNEXT,
      *   TSTOP, UROUND, YPNORM
       LOGICAL  DONE
 C       Auxiliary variables for conversion of values to be included in
 C       error messages.
       CHARACTER*8  XERN1, XERN2
       CHARACTER*16 XERN3, XERN4
 C
 C     SET POINTERS INTO IWORK
       PARAMETER (LML=1, LMU=2, LMXORD=3, LMTYPE=4, LNST=11,
-     *  LNRE=12, LNJE=13, LETF=14, LCTF=15, LNPD=16,
-     *  LIPVT=21, LJCALC=5, LPHASE=6, LK=7, LKOLD=8,
+     *  LNRE=12, LNJE=13, LETF=14, LCTF=15, LNPD=16, LMXSTP=21,
+     *  LIPVT=22, LJCALC=5, LPHASE=6, LK=7, LKOLD=8,
      *  LNS=9, LNSTL=10, LIWM=1)
 C
 C     SET RELATIVE OFFSET INTO RWORK
       PARAMETER (NPD=1)
 C
 C     SET POINTERS INTO RWORK
       PARAMETER (LTSTOP=1, LHMAX=2, LH=3, LTN=4,
      *  LCJ=5, LCJOLD=6, LHOLD=7, LS=8, LROUND=9,
@@ -1011,30 +1012,37 @@ 40    IF(IWORK(LML).LT.0.OR.IWORK(LML).G
          MBAND=IWORK(LML)+IWORK(LMU)+1
          MSAVE=(NEQ/MBAND)+1
          LENRW=40+(IWORK(LMXORD)+4)*NEQ+LENPD+2*MSAVE
          GO TO 60
 50       IWORK(LMTYPE)=4
          LENRW=40+(IWORK(LMXORD)+4)*NEQ+LENPD
 C
 C     CHECK LENGTHS OF RWORK AND IWORK
-60    LENIW=20+NEQ
+60    LENIW=21+NEQ
       IWORK(LNPD)=LENPD
       IF(LRW.LT.LENRW)GO TO 704
       IF(LIW.LT.LENIW)GO TO 705
 C
 C     CHECK TO SEE THAT TOUT IS DIFFERENT FROM T
       IF(TOUT .EQ. T)GO TO 719
 C
 C     CHECK HMAX
       IF(INFO(7).EQ.0)GO TO 70
          HMAX=RWORK(LHMAX)
          IF(HMAX.LE.0.0D0)GO TO 710
 70    CONTINUE
 C
+C     CHECK AND COMPUTE MAXIMUM STEPS
+      MXSTP=500
+      IF(INFO(12).EQ.0)GO TO 80
+        MXSTP=IWORK(LMXSTP)
+        IF(MXSTP.LT.0)GO TO 716
+80      IWORK(LMXSTP)=MXSTP
+C
 C     INITIALIZE COUNTERS
       IWORK(LNST)=0
       IWORK(LNRE)=0
       IWORK(LNJE)=0
 C
       IWORK(LNSTL)=0
       IDID=1
       GO TO 200
@@ -1263,17 +1271,17 @@ C     CHECK FOR TOO MUCH ACCURACY REQUES
 C     COMPUTE MINIMUM STEPSIZE.
 C-------------------------------------------------------
 C
 500   CONTINUE
 C     CHECK FOR FAILURE TO COMPUTE INITIAL YPRIME
       IF (IDID .EQ. -12) GO TO 527
 C
 C     CHECK FOR TOO MANY STEPS
-      IF((IWORK(LNST)-IWORK(LNSTL)).LT.500)
+      IF((IWORK(LNST)-IWORK(LNSTL)).LT.IWORK(LMXSTP))
      *   GO TO 510
            IDID=-1
            GO TO 527
 C
 C     UPDATE WT
 510   CALL DDAWTS(NEQ,INFO(2),RTOL,ATOL,RWORK(LPHI),
      *  RWORK(LWT),RPAR,IPAR)
       DO 520 I=1,NEQ
@@ -1569,16 +1577,21 @@ 714   WRITE (XERN3, '(1P,D15.6)') TOUT
 C
 715   WRITE (XERN3, '(1P,D15.6)') TSTOP
       WRITE (XERN4, '(1P,D15.6)') T
       CALL XERMSG ('SLATEC', 'DDASSL',
      *   'INFO(4)=1 AND TSTOP = ' // XERN3 // ' BEHIND T = ' // XERN4,
      *   15, 1)
       GO TO 750
 C
+716   WRITE (XERN1, '(I8)') MXSTP
+      CALL XERMSG ('SLATEC', 'DDASSL',
+     *   'INFO(12)=1 AND MXSTP = ' // XERN1 // ' ILLEGAL.', 3, 1)
+      GO TO 750
+C
 717   WRITE (XERN1, '(I8)') IWORK(LML)
       CALL XERMSG ('SLATEC', 'DDASSL',
      *   'ML = ' // XERN1 // ' ILLEGAL.  EITHER .LT. 0 OR .GT. NEQ',
      *   17, 1)
       GO TO 750
 C
 718   WRITE (XERN1, '(I8)') IWORK(LMU)
       CALL XERMSG ('SLATEC', 'DDASSL',
diff --git a/libcruft/misc/quit.cc b/libcruft/misc/quit.cc
--- a/libcruft/misc/quit.cc
+++ b/libcruft/misc/quit.cc
@@ -32,16 +32,19 @@ Software Foundation, 59 Temple Place - S
 // the ANSI standard C signal interface.
 
 #include <signal.h>
 
 #include "quit.h"
 
 octave_jmp_buf current_context;
 
+void (*octave_interrupt_hook) (void) = 0;
+void (*octave_bad_alloc_hook) (void) = 0;
+
 void
 octave_save_current_context (void *save_buf)
 {
   std::memcpy (save_buf, current_context, sizeof (octave_jmp_buf));
 }
 
 void
 octave_restore_current_context (void *save_buf)
@@ -91,22 +94,28 @@ sig_atomic_t octave_interrupt_immediatel
 
 sig_atomic_t octave_interrupt_state = 0;
 
 sig_atomic_t octave_allocation_error = 0;
 
 void
 octave_throw_interrupt_exception (void)
 {
+  if (octave_interrupt_hook)
+    octave_interrupt_hook ();
+    
   throw octave_interrupt_exception ();
 }
 
 void
 octave_throw_bad_alloc (void)
 {
+  if (octave_bad_alloc_hook)
+    octave_bad_alloc_hook ();
+    
   throw std::bad_alloc ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -82,16 +82,19 @@ extern void octave_throw_bad_alloc (void
       if (octave_interrupt_state) \
         { \
           octave_interrupt_state = 0; \
           octave_throw_interrupt_exception (); \
         } \
     } \
   while (0)
 
+extern void (*octave_interrupt_hook) (void);
+extern void (*octave_bad_alloc_hook) (void);
+
 /* Normally, you just want to use
 
      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
      ... some code that calls a "foreign" function ...
      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
    but sometimes it is useful to do something like
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DASSL.cc (DASSL::do_integrate): Set liw to 21 + n, not 20 + n.
+	Handle step limit.
+	* DASSL-opts.in: New option for step limit.
+
+2003-06-16  Per Persson <persquare@mac.com>
+
+	* oct-shlib.cc: Include mach-o/dyld.h, not Mach-O/dyld.h.
+
 2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASRT.cc (DASRT::integrate): Set liw to 21 + n, not 20 + n.
 	Store step limit in iwork(20), not iwork(18).
 
 2003-05-16  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-rand.cc: Use liboctave's clock layer instead of the system clock.
diff --git a/liboctave/DASSL-opts.in b/liboctave/DASSL-opts.in
--- a/liboctave/DASSL-opts.in
+++ b/liboctave/DASSL-opts.in
@@ -115,8 +115,19 @@ OPTION
   DOC_ITEM
 Setting the maximum stepsize will avoid passing over very large
 regions  (default is not specified).
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
+
+OPTION
+  NAME = "step limit"
+  DOC_ITEM
+Maximum number of integration steps to attempt on a single call to the
+underlying Fortran code.
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "(val >= 0) ? val : -1"
+END_OPTION
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -135,17 +135,17 @@ DASSL::do_integrate (double tout)
 
       for (int i = 0; i < 15; i++)
 	info(i) = 0;
 
       pinfo = info.fortran_vec ();
 
       int n = size ();
 
-      liw = 20 + n;
+      liw = 21 + n;
       lrw = 40 + 9*n + n*n;
 
       nn = n;
 
       iwork.resize (liw);
       rwork.resize (lrw);
 
       info(0) = 0;
@@ -214,16 +214,24 @@ DASSL::do_integrate (double tout)
       if (h0 >= 0.0)
 	{
 	  rwork(2) = h0;
 	  info(7) = 1;
 	}
       else
 	info(7) = 0;
 
+      if (step_limit () >= 0)
+	{
+	  info(11) = 1;
+	  iwork(20) = step_limit ();
+	}
+      else
+	info(11) = 0;
+
       int maxord = maximum_order ();
       if (maxord >= 0)
 	{
 	  if (maxord > 0 && maxord < 6)
 	    {
 	      info(8) = 1;
 	      iwork(2) = maxord;
 	    }
diff --git a/liboctave/oct-shlib.cc b/liboctave/oct-shlib.cc
--- a/liboctave/oct-shlib.cc
+++ b/liboctave/oct-shlib.cc
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #if defined (HAVE_SHL_LOAD_API)
 #include <cerrno>
 #include <cstring>
 #endif
 
 #if defined (HAVE_DYLD_API)
-#include <Mach-O/dyld.h>
+#include <mach-o/dyld.h>
 #endif
 
 extern "C"
 {
 #if defined (HAVE_DLOPEN_API)
 #if defined (HAVE_DLFCN_H)
 #include <dlfcn.h>
 #else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* toplev.cc (main_loop): Set octave_interrupt_hook and
+	octave_bad_alloc_hook to unwind_protect::run_all here.
+	(recover_from_exception): Don't call unwind_protect::run_all here.
+
+	* pt-except.cc (do_catch_code): Return immediately if
+	octave_interrupt_immediately is nonzero.
+
+	* sighandlers.cc (sigint_handler): If jumping, don't set
+	octave_interrupt_state.
+
 2003-06-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (get_save_type): Avoid all save types other than
 	LS_DOUBLE to avoid apparent Matlab bugs.
 
 2003-06-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (frob_function, parse_fcn_file): Handle help_buf as
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -23,16 +23,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "quit.h"
+
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pt-bp.h"
 #include "pt-cmd.h"
 #include "pt-except.h"
 #include "pt-exp.h"
 #include "pt-jump.h"
@@ -50,16 +52,19 @@ tree_try_catch_command::~tree_try_catch_
   delete lead_comm;
   delete mid_comm;
   delete trail_comm;
 }
 
 static void
 do_catch_code (void *ptr)
 {
+  if (octave_interrupt_immediately)
+    return;
+
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
   unwind_protect::begin_frame ("do_catch_code");
 
   // Set up for letting the user print any messages from errors that
   // occurred in the body of the try_catch statement.
 
   unwind_protect_bool (buffer_error_messages);
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -280,20 +280,20 @@ sigint_handler (int)
 
 	      SIGHANDLER_RETURN (0);
 	    }
 	  else
 	    // Clear the flag and do normal interrupt stuff.
 	    octave_debug_on_interrupt_state = false;
 	}
 
-      octave_interrupt_state = 1;
-
       if (octave_interrupt_immediately)
 	octave_jump_to_enclosing_context ();
+      else
+	octave_interrupt_state = 1;
     }
 
   SIGHANDLER_RETURN (0);
 }
 
 #ifdef SIGPIPE
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -93,17 +93,16 @@ tree_statement_list *global_command = 0;
 octave_user_function *curr_function = 0;
 
 // Pointer to parent function that is currently being evaluated.
 octave_user_function *curr_parent_function = 0;
 
 static void
 recover_from_exception (void)
 {
-  unwind_protect::run_all ();
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_allocation_error = 0;
   octave_restore_signal_mask ();
   octave_catch_interrupts ();
 }
 
@@ -121,16 +120,19 @@ main_loop (const std::string& fun_to_cal
       raw_mode (0);
       std::cout << "\n";
       octave_restore_signal_mask ();
 #endif
     }
 
   can_interrupt = true;
 
+  octave_interrupt_hook = unwind_protect::run_all;
+  octave_bad_alloc_hook = unwind_protect::run_all;
+
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   if (! fun_to_call.empty ())
     feval (fun_to_call);
 
   // The big loop.
