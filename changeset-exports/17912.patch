# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1384310946 0
#      Wed Nov 13 02:49:06 2013 +0000
# Node ID 01496d4811b19d3ba5c380b396bbf9ac67aca3a2
# Parent  c98ffba88c780f6942716e6ebe22127c7dc25513
imread: deal elegantly with multiples frames of different sizes.

* __magick_read__.cc (F__magick_read__): when attempting to read multiple
frames of an image file, check that they all have the same dimensions to
avoid segfaulting later while trying to access pixels that do not exist.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -752,22 +752,43 @@ use @code{imread}.\n\
       // Fix indexes from base 1 to base 0, and at the same time, make
       // sure none of the indexes is outside the range of image number.
       const octave_idx_type n = frameidx.nelem ();
       for (octave_idx_type i = 0; i < n; i++)
         {
           frameidx(i)--;
           if (frameidx(i) < 0 || frameidx(i) > nFrames - 1)
             {
+              // We do this check inside the loop because frameidx does not
+              // need to be ordered (this is a feature and even allows for
+              // some frames to be read multiple times).
               error ("imread: index/frames specified are outside the number of images");
               return output;
             }
         }
     }
 
+  // Check that all frames have the same size. We don't do this at the same
+  // time we decode the image because that's done in many different places,
+  // to cover the different types of images which would lead to a lot of
+  // copy and paste.
+  const unsigned int nRows = imvec[frameidx(0)].rows ();
+  const unsigned int nCols = imvec[frameidx(0)].columns ();
+  for (octave_idx_type frame = 0; frame < nFrames; frame++)
+    {
+      if (nRows != imvec[frameidx(frame)].rows () ||
+          nCols != imvec[frameidx(frame)].columns ())
+        {
+          error ("imread: all frames must have the same size but frame %i is different",
+                 frameidx(frame) +1);
+          error_state = 1;
+        }
+    }
+
+
   const octave_idx_type depth = get_depth (imvec[frameidx(0)]);
   if (is_indexed (imvec[frameidx(0)]))
     {
       if (depth <= 1)
         output = read_indexed_images<boolNDArray>   (imvec, frameidx,
                                                      nargout, options);
       else if (depth <= 8)
         output = read_indexed_images<uint8NDArray>  (imvec, frameidx,
