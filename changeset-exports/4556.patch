# HG changeset patch
# User jwe
# Date 1067317330 0
#      Tue Oct 28 05:02:10 2003 +0000
# Node ID 773a21e4fce8a52f909100cd36c71802741668ab
# Parent  fe70d807464479a444b8b710cbcc8608640deac9
[project @ 2003-10-28 05:02:10 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -69,48 +69,28 @@ ComplexNDArray::operator ! (void) const
   for (int i = 0; i < length (); i++)
     b.elem (i) = elem (i) != 0.0;
 
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
-boolMatrix
+boolNDArray
 ComplexNDArray::all (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      ComplexMatrix tmp = matrix_value ();
-      retval = tmp.all (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("all is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (real (elem (iter_idx)) == 0
+				 && imag (elem (iter_idx)) == 0));
 }
 
-boolMatrix
+boolNDArray
 ComplexNDArray::any (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      ComplexMatrix tmp = matrix_value ();
-      retval = tmp.any (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("any is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (real (elem (iter_idx))
+				 || imag (elem (iter_idx))));
 }
 
 ComplexMatrix
 ComplexNDArray::matrix_value (void) const
 {
   ComplexMatrix retval;
 
   int nd = ndims ();
@@ -138,16 +118,23 @@ ComplexNDArray::matrix_value (void) cons
 void
 ComplexNDArray::increment_index (Array<int>& ra_idx,
 				 const dim_vector& dimensions,
 				 int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
 }
 
+int 
+ComplexNDArray::compute_index (Array<int>& ra_idx,
+			       const dim_vector& dimensions)
+{
+  return ::compute_index (ra_idx, dimensions);
+}
+
 NDS_CMP_OPS(ComplexNDArray, real, Complex, real)
 NDS_BOOL_OPS(ComplexNDArray, Complex, 0.0)
 
 SND_CMP_OPS(Complex, real, ComplexNDArray, real)
 SND_BOOL_OPS(Complex, ComplexNDArray, 0.0)
 
 NDND_CMP_OPS(ComplexNDArray, real, ComplexNDArray, real)
 NDND_BOOL_OPS(ComplexNDArray, ComplexNDArray, 0.0)
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -69,27 +69,30 @@ public:
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
-  boolMatrix all (int dim = -1) const;
-  boolMatrix any (int dim = -1) const;
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
 
   ComplexMatrix matrix_value (void) const;
 
   ComplexNDArray squeeze (void) const { return ArrayN<Complex>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
   //  bool all_elements_are_real (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* mx-inlines.cc (MX_ND_ALL_EXPR, MX_ND_ANY_EXPR,
+	MX_ND_ALL_EVAL, MX_ND_ANY_EVAL, MX_ND_ALL_ANY): New macros.
+	* dNDArray.h (NDArray::all, NDArray::any): Return type now boolNDArray.
+	* CNDArray.h (ComplexNDArray::all, ComplexNDArray::any): Likewise.
+	* boolNDArray.h (boolNDArray::all, boolNDArray::any): Likewise.
+	* chNDArray.h (charNDArray::all, charNDArray::any): Likewise.
+	* dNDArray.cc (NDArray::all, NDArray::any): Make them work.
+	* CNDArray.cc (ComplexNDArray::all, ComplexNDArray::any): Likewise.
+	* boolNDArray.cc (boolNDArray::all, boolNDArray::any): Likewise.
+	* chNDArray.cc (charNDArray::all, charNDArray::any): Likewise.
+
 2003-10-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::resize_and_fill): Allow number of dimensions
 	to change.  From Petter Risholm  <risholm@stud.ntnu.no>.
 
 	* oct-rand.cc, CColVector.cc, CMatrix.cc, CRowVector.cc,
 	CmplxAEPBAL.cc CmplxCHOL.cc, CmplxHESS.cc, CmplxLU.cc, CmplxQR.cc,
 	CmplxQRP.cc, CmplxSCHUR.cc, CmplxSVD.cc, CollocWt.cc, DASPK.cc,
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -45,48 +45,26 @@ boolNDArray::operator ! (void) const
   for (int i = 0; i < length (); i++)
     b.elem (i) = ! elem (i);
 
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
-boolMatrix
+boolNDArray
 boolNDArray::all (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      boolMatrix tmp = matrix_value ();
-      retval = tmp.all (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("all is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR));
 }
 
-boolMatrix
+boolNDArray
 boolNDArray::any (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      boolMatrix tmp = matrix_value ();
-      retval = tmp.any (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("any is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR));
 }
 
 boolMatrix
 boolNDArray::matrix_value (void) const
 {
   boolMatrix retval;
 
   int nd = ndims ();
@@ -114,15 +92,22 @@ boolNDArray::matrix_value (void) const
 void
 boolNDArray::increment_index (Array<int>& ra_idx,
 			      const dim_vector& dimensions,
 			      int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
 }
 
+int
+boolNDArray::compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions)
+{
+  return ::compute_index (ra_idx, dimensions);
+}
+
 NDND_CMP_OPS (boolNDArray, , boolNDArray, )
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -63,27 +63,30 @@ public:
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
-  boolMatrix all (int dim = -1) const;
-  boolMatrix any (int dim = -1) const;
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
 
   boolMatrix matrix_value (void) const;
 
   boolNDArray squeeze (void) const { return ArrayN<bool>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static bool resize_fill_value (void) { return false; }
 
   //  bool all_elements_are_real (void) const;
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -32,48 +32,26 @@ Software Foundation, 59 Temple Place - S
 #include "chNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 
 #include "ArrayN-inline.h"
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
-boolMatrix
+boolNDArray
 charNDArray::all (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      charMatrix tmp = matrix_value ();
-      retval = tmp.all (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("all is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (elem (iter_idx) == ' '));
 }
 
-boolMatrix
+boolNDArray
 charNDArray::any (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      charMatrix tmp = matrix_value ();
-      retval = tmp.any (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("any is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (elem (iter_idx) != ' '));
 }
 
 charMatrix
 charNDArray::matrix_value (void) const
 {
   charMatrix retval;
 
   int nd = ndims ();
@@ -101,13 +79,20 @@ charNDArray::matrix_value (void) const
 void
 charNDArray::increment_index (Array<int>& ra_idx,
 			      const dim_vector& dimensions,
 			      int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
 }
 
+int 
+charNDArray::compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions)
+{
+  return ::compute_index (ra_idx, dimensions);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -64,27 +64,30 @@ public:
   charNDArray& operator = (const charNDArray& a)
     {
       MArrayN<char>::operator = (a);
       return *this;
     }
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
-  boolMatrix all (int dim = -1) const;
-  boolMatrix any (int dim = -1) const;
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
 
   charMatrix matrix_value (void) const;
 
   charNDArray squeeze (void) const { return ArrayN<char>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const charNDArray& a);
   // friend std::istream& operator >> (std::istream& is, charNDArray& a);
 
   static char resize_fill_value (void) { return '\0'; }
 
 private:
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -60,48 +60,26 @@ NDArray::operator ! (void) const
   for (int i = 0; i < length (); i++)
     b.elem (i) = ! elem (i);
 
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
-boolMatrix
+boolNDArray
 NDArray::all (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      Matrix tmp = matrix_value ();
-      retval = tmp.all (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("all is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR));
 }
 
-boolMatrix
+boolNDArray
 NDArray::any (int dim) const
 {
-  boolMatrix retval;
-
-  if (dimensions.length () == 2)
-    {
-      Matrix tmp = matrix_value ();
-      retval = tmp.any (dim);
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("any is not yet implemented for N-d Arrays");
-
-  return retval;
+  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR));
 }
 
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
   int nd = ndims ();
@@ -128,16 +106,23 @@ NDArray::matrix_value (void) const
 void
 NDArray::increment_index (Array<int>& ra_idx,
 			  const dim_vector& dimensions,
 			  int start_dimension)
 {
   ::increment_index (ra_idx, dimensions, start_dimension);
 }
 
+int
+NDArray::compute_index (Array<int>& ra_idx,
+			const dim_vector& dimensions)
+{
+  return ::compute_index (ra_idx, dimensions);
+}
+
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   int n = length (); 
   if (neg_zero)
     {
       for (int i = 0; i < n; i++)
 	if (lo_ieee_signbit (Array<double>::elem (i)))
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -67,27 +67,30 @@ public:
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
-  boolMatrix all (int dim = -1) const;
-  boolMatrix any (int dim = -1) const;
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
 
   Matrix matrix_value (void) const;
 
   NDArray squeeze (void) const { return ArrayN<double>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static double resize_fill_value (void) { return 0; }
 
   bool any_element_is_negative (bool = false) const;
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -345,15 +345,114 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
 			MX_ANY_ALL_OP_ROW_CODE (TEST_OP, TEST_TRUE_VAL), \
 			MX_ANY_ALL_OP_COL_CODE (TEST_OP, TEST_TRUE_VAL), \
 			INIT_VAL, INIT_VAL)
 
 #define MX_ALL_OP(DIM) MX_ANY_ALL_OP (DIM, true, ==, false)
 
 #define MX_ANY_OP(DIM) MX_ANY_ALL_OP (DIM, false, !=, true)
 
+#define MX_ND_ALL_EXPR elem (iter_idx) == 0
+
+#define MX_ND_ANY_EXPR elem (iter_idx)
+
+#define MX_ND_ALL_EVAL(TEST_EXPR) \
+ if (TEST_EXPR) \
+   { \
+     if (dim > -1) \
+       iter_idx (dim) = 0; \
+     retval (iter_idx) = 0; \
+     break; \
+   } \
+   else \
+   { \
+     if (dim > -1) \
+       iter_idx (dim) = 0; \
+     retval (iter_idx) = 1; \
+   } \
+
+#define MX_ND_ANY_EVAL(TEST_EXPR) \
+ if (TEST_EXPR) \
+   { \
+     if (dim > -1) \
+       iter_idx (dim) = 0; \
+     retval (iter_idx) = 1; \
+     break; \
+   } 
+
+#define MX_ND_ALL_ANY(EVAL_EXPR) \
+ \
+  boolNDArray retval; \
+ \
+  dim_vector dv = dims (); \
+ \
+  if (dim == -1)/* We need to find first non-singleton dim */ \
+    { \
+      for (int i = 0; i < dv.length (); i++) \
+	{ \
+          if (dv (i) > 1) \
+	    { \
+	      dim = i; \
+              break; \
+	    } \
+	} \
+      if (dim == -1) \
+        { \
+	  (*current_liboctave_error_handler) \
+	    ("all dimensions are singleton"); \
+          return retval; \
+	} \
+    } \
+ /*  Length of Dimension */\
+  int dim_length = 1; \
+  /* dim = -1 means from here that the user specified a */ \
+  /* dimension which is larger that the number of dimensions */ \
+  /* of the array */ \
+  if (dim >= dv.length ()) \
+    dim = -1; \
+  else \
+    dim_length = dv (dim); \
+  if (dim > -1) \
+    dv (dim) = 1; \
+ \
+ /* We need to find the number of elements we need to */ \
+ /* fill in retval. First we need to get last idx of  */ \
+ /* the dimension vector                              */ \
+  Array<int> temp_dv (dv.length (), 0); \
+  for (int x = 0; x < dv.length (); x++) \
+    temp_dv (x) = dv (x) - 1; \
+ \
+ /* This finds the number of elements in retval */ \
+  int num_iter = compute_index (temp_dv, dv) + 1; \
+ \
+ /* Make sure retval has correct dimensions */ \
+ retval.resize (dv, false); \
+ \
+  Array<int> iter_idx (dv.length (), 0); \
+ \
+ /* Filling in values.         */ \
+ /* First loop finds new index */ \
+  for (int j = 0; j < num_iter; j++) \
+    { \
+      for (int i = 0; i < dim_length; i++) \
+	{ \
+	  if (dim > -1) \
+	     iter_idx (dim) = i; \
+ \
+	  EVAL_EXPR \
+	} \
+ \
+      if (dim > -1) \
+        iter_idx (dim) = 0; \
+ \
+      increment_index (iter_idx, dv); \
+    } \
+ \
+  return retval
+
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
 
+	* ov-base-mat.cc (octave_base_matrix<MT>::is_true):
+	Only work for 2-dimensional objects.
+	* data.cc (ANY_ALL (FCN)): Allow dim to take values large than 2.
+
 	* ov.h (octave_value::ndims): New function.
 	* ov-base.h (octave_base_value::ndims): Likewise.
 	* ov-base-scalar.h (octave_base_scalar<T>::ndims): Likewise.
 	* ov-base-mat.cc (octave_base_matrix<MT>::ndims): New function.
 	(octave_base_matrix<MT>::length): Move here from ov-base-mat.h.
 	Make it work for N-d arrays.
 	* ov-base-mat.h (octave_base_matrix<MT>::ndims): Provide decl.
 	* data.cc (Fndims): New built-in function.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -48,17 +48,17 @@ Software Foundation, 59 Temple Place - S
   int nargin = args.length (); \
  \
   if (nargin == 1 || nargin == 2) \
     { \
       int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
  \
       if (! error_state) \
         { \
-          if (dim <= 1 && dim >= -1) \
+          if (dim >= -1) \
 	    retval = args(0).FCN (dim); \
           else \
 	    error (#FCN ": invalid dimension argument = %d", dim + 1); \
         } \
       else \
         error (#FCN ": expecting dimension argument to be an integer"); \
     } \
   else \
@@ -361,17 +361,17 @@ If @var{y} is zero, the result implement
   if (nargin == 1 || nargin == 2) \
     { \
       octave_value arg = args(0); \
  \
       int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
  \
       if (! error_state) \
 	{ \
-	  if (dim <= 1 && dim >= -1) \
+	  if (dim >= -1) \
 	    { \
 	      if (arg.is_real_type ()) \
 		{ \
 		  Matrix tmp = arg.matrix_value (); \
  \
 		  if (! error_state) \
 		    retval = tmp.FCN (dim); \
 		} \
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -171,33 +171,39 @@ octave_base_matrix<MT>::assign (const oc
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::is_true (void) const
 {
   bool retval = false;
 
-  if (rows () > 0 && columns () > 0)
+  if (matrix.dims () . length () == 2)
     {
-      boolMatrix m = (matrix.all () . all ());
-
-      retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
+      if (rows () > 0 && columns () > 0)
+	{
+	  boolNDArray m = (matrix.all () . all ());
+	  
+	  retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
+	}
     }
-
+  else
+    (*current_liboctave_error_handler)
+      ("is_true not yet implemented for N-d Arrays");
+  
   return retval;
 }
 
 template <class MT>
 int
 octave_base_matrix<MT>::length (void) const
 {
   int retval = 0;
 
-  dim_vector dv = dims();
+  dim_vector dv = dims ();
       
   for (int i = 0; i < dv.length (); i++)
     if (dv(i) > retval)
       retval = dv(i);
 
   return retval;
 }
 
