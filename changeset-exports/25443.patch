# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528495458 14400
#      Fri Jun 08 18:04:18 2018 -0400
# Node ID 2fa7cd178c4a73c42ddcbfb83e3189a003b1c28b
# Parent  47a3e4b9b6fef6721880e659b0447bdec903cfa6
new class for miscellaneous interpreter settings

* libgui/src/editor-settings.h: Rename from octave-settings.h.  Change
all uses.
* libgui/src/module.mk: Update.

* settings.h, settings.cc: New files for miscellaneous interpreter
settings and access functions.
* libinterp/corefcn/module.mk: Update.

* lex.h, lex.ll: Move static variables Vdisplay_tokens, Vtoken_count,
and lexer_debug_flag to new settings class.  Change all uses.
(base_lexer::debug_flag, base_lexer::display_tokens,
base_lexer::increment_token_count, base_lexer::lexer_debug):
New functions.
(F__display_tokens__, F__token_count__, F__lexer_debug_flag__):
Move to settings.cc.

* interpreter.h, interpreter.cc (interpreter::m_settings,
interpreter::settings): New data member and access function.

diff --git a/libgui/src/octave-settings.h b/libgui/src/editor-settings.h
rename from libgui/src/octave-settings.h
rename to libgui/src/editor-settings.h
--- a/libgui/src/octave-settings.h
+++ b/libgui/src/editor-settings.h
@@ -15,18 +15,18 @@ MERCHANTABILITY or FITNESS FOR A PARTICU
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <https://www.gnu.org/licenses/>.
 
 */
 
-#if ! defined (octave_settings_h)
-#define octave_settings_h 1
+#if ! defined (octave_editor_settings_h)
+#define octave_editor_settings_h 1
 
 //#if defined (HAVE_CONFIG_H)
 //#  include "config.h"
 //#endif
 
 #include <QStringList>
 
 // Octave comment strings
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -55,17 +55,19 @@ along with Octave; see the file COPYING.
 #include <QTextCodec>
 #include <QStyle>
 #include <QTextBlock>
 #include <QLabel>
 #include <QCheckBox>
 #include <QDialogButtonBox>
 #include <QPushButton>
 
+#include "editor-settings.h"
 #include "resource-manager.h"
+
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-txt-lexer.h"
 #include "marker.h"
 
 #include "file-ops.h"
 
 #include "bp-table.h"
@@ -74,17 +76,16 @@ along with Octave; see the file COPYING.
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave-qt-link.h"
 #include "ov-usr-fcn.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "version.h"
-#include "octave-settings.h"
 
 namespace octave
 {
   bool file_editor_tab::_cancelled = false;
 
   //! A file_editor_tab object consists of a text area and three left margins.
   //! The first holds breakpoints, bookmarks, and the debug program counter.
   //! The second holds line numbers.  The third holds "fold" marks, to hide
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -45,24 +45,24 @@ along with Octave; see the file COPYING.
 
 #include <Qsci/qscicommandset.h>
 
 #include <QKeySequence>
 #include <QShortcut>
 #include <QToolTip>
 #include <QVBoxLayout>
 
-// FIXME: hardwired marker numbers?
-#include "marker.h"
+#include "editor-settings.h"
+#include "resource-manager.h"
+#include "shortcut-manager.h"
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
-#include "shortcut-manager.h"
-#include "resource-manager.h"
-#include "octave-settings.h"
+// FIXME: hardwired marker numbers?
+#include "marker.h"
 
 // Return true if CANDIDATE is a "closing" that matches OPENING,
 // such as "end" or "endif" for "if", or "catch" for "try".
 // Used for testing the last word of an "if" etc. line,
 // or the first word of the following line.
 
 static bool
 is_end (const QString& candidate, const QString& opening)
diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -152,31 +152,31 @@ octave_gui_UI_H = $(patsubst %reldir%/%.
 BUILT_SOURCES += $(octave_gui_UI_H)
 
 noinst_HEADERS += \
   %reldir%/dialog.h \
   %reldir%/octave-dock-widget.h \
   %reldir%/documentation-dock-widget.h \
   %reldir%/documentation.h \
   %reldir%/dw-main-window.h \
+  %reldir%/editor-settings.h \
   %reldir%/external-editor-interface.h \
   %reldir%/files-dock-widget.h \
   %reldir%/history-dock-widget.h \
   %reldir%/m-editor/file-editor-interface.h \
   %reldir%/m-editor/file-editor-tab.h \
   %reldir%/m-editor/file-editor.h \
   %reldir%/m-editor/find-dialog.h \
   %reldir%/m-editor/octave-qscintilla.h \
   %reldir%/m-editor/octave-txt-lexer.h \
   %reldir%/m-editor/marker.h \
   %reldir%/main-window.h \
   %reldir%/octave-gui.h \
   %reldir%/octave-cmd.h \
   %reldir%/octave-qt-link.h \
-  %reldir%/octave-settings.h \
   %reldir%/qtinfo/texinfo-parser.h \
   %reldir%/qtinfo/webinfo.h \
   %reldir%/resource-manager.h \
   %reldir%/settings-dialog.h \
   %reldir%/shortcut-manager.h \
   %reldir%/tab-bar.h \
   %reldir%/terminal-dock-widget.h \
   %reldir%/color-picker.h \
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -24,17 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_settings_dialog_h 1
 
 #include <QDialog>
 #include <QSettings>
 #include <QLineEdit>
 #include <QRadioButton>
 
 #include "color-picker.h"
-#include "octave-settings.h"
+#include "editor-settings.h"
 
 namespace Ui
 {
   class settings_dialog;
 }
 
 class settings_dialog:public QDialog
 {
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -60,16 +60,17 @@ along with Octave; see the file COPYING.
 #include "octave.h"
 #include "ov-classdef.h"
 #include "ov.h"
 #include "ovl.h"
 #include "parse.h"
 #include "pt-eval.h"
 #include "pt-jump.h"
 #include "pt-stmt.h"
+#include "settings.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
 // TRUE means the quit() call is allowed.
@@ -312,16 +313,17 @@ namespace octave
   // Create an interpreter object and perform initialization up to the
   // point of setting reading command history and setting the load
   // path.
 
   interpreter::interpreter (application *app_context)
     : m_app_context (app_context),
       m_installation_data (),
       m_environment (*this),
+      m_settings (),
       m_help_system (*this),
       m_input_system (*this),
       m_output_system (*this),
       m_dynamic_loader (*this),
       m_load_path (*this),
       m_type_info (),
       m_symbol_table (),
       m_evaluator (*this),
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -38,16 +38,17 @@ along with Octave; see the file COPYING.
 #include "input.h"
 #include "installation-data.h"
 #include "load-path.h"
 #include "oct-stream.h"
 #include "ov-classdef.h"
 #include "ov-typeinfo.h"
 #include "pager.h"
 #include "pt-eval.h"
+#include "settings.h"
 #include "symtab.h"
 #include "url-handle-manager.h"
 
 extern OCTINTERP_API bool quit_allowed;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
@@ -154,16 +155,21 @@ namespace octave
       return  m_installation_data;
     }
 
     environment& get_environment (void)
     {
       return m_environment;
     }
 
+    settings& get_settings (void)
+    {
+      return m_settings;
+    }
+
     help_system& get_help_system (void)
     {
       return m_help_system;
     }
 
     input_system& get_input_system (void)
     {
       return m_input_system;
@@ -263,16 +269,18 @@ namespace octave
     void cleanup (void);
 
     application *m_app_context;
 
     installation_data m_installation_data;
 
     environment m_environment;
 
+    settings m_settings;
+
     help_system m_help_system;
 
     input_system m_input_system;
 
     output_system m_output_system;
 
     dynamic_loader m_dynamic_loader;
 
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -73,16 +73,17 @@ COREFCN_INC = \
   %reldir%/oct-strstrm.h \
   %reldir%/oct.h \
   %reldir%/octave-default-image.h \
   %reldir%/octave-link.h \
   %reldir%/pager.h \
   %reldir%/pr-flt-fmt.h \
   %reldir%/pr-output.h \
   %reldir%/procstream.h \
+  %reldir%/settings.h \
   %reldir%/sighandlers.h \
   %reldir%/sparse-xdiv.h \
   %reldir%/sparse-xpow.h \
   %reldir%/symrec.h \
   %reldir%/symscope.h \
   %reldir%/symtab.h \
   %reldir%/sysdep.h \
   %reldir%/text-renderer.h \
@@ -217,16 +218,17 @@ COREFCN_SRC = \
   %reldir%/psi.cc \
   %reldir%/quad.cc \
   %reldir%/quadcc.cc \
   %reldir%/qz.cc \
   %reldir%/rand.cc \
   %reldir%/rcond.cc \
   %reldir%/regexp.cc \
   %reldir%/schur.cc \
+  %reldir%/settings.cc \
   %reldir%/sighandlers.cc \
   %reldir%/sparse-xdiv.cc \
   %reldir%/sparse-xpow.cc \
   %reldir%/sparse.cc \
   %reldir%/spparms.cc \
   %reldir%/sqrtm.cc \
   %reldir%/str2double.cc \
   %reldir%/strfind.cc \
diff --git a/libinterp/corefcn/settings.cc b/libinterp/corefcn/settings.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/settings.cc
@@ -0,0 +1,93 @@
+/*
+
+Copyright (C) 2018 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "defun.h"
+#include "interpreter.h"
+#include "ov.h"
+#include "ovl.h"
+#include "settings.h"
+#include "variables.h"
+
+namespace octave
+{
+  settings::settings (void)
+    : m_display_tokens (false), m_token_count (0),
+      m_lexer_debug_flag (false)
+  { }
+
+  octave_value settings::display_tokens (const octave_value_list& args,
+                                         int nargout)
+  {
+    return set_internal_variable (m_display_tokens, args, nargout,
+                                  "__display_tokens__");
+  }
+
+  octave_value settings::lexer_debug_flag (const octave_value_list& args,
+                                           int nargout)
+  {
+    return set_internal_variable (m_lexer_debug_flag, args, nargout,
+                                  "__lexer_debug_flag__");
+  }
+}
+
+DEFMETHOD (__display_tokens__, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn {} {} __display_tokens__ ()
+Query or set the internal variable that determines whether Octave's
+lexer displays tokens as they are read.
+@seealso{__lexer_debug_flag__, __token_count__}
+@end deftypefn */)
+{
+  octave::settings& stgs = interp.get_settings ();
+
+  return stgs.display_tokens (args, nargout);
+}
+
+DEFMETHOD (__token_count__, interp, , ,
+           doc: /* -*- texinfo -*-
+@deftypefn {} {} __token_count__ ()
+Return the number of language tokens processed since Octave startup.
+@seealso{__lexer_debug_flag__, __display_tokens__}
+@end deftypefn */)
+{
+  octave::settings& stgs = interp.get_settings ();
+
+  return octave_value (stgs.token_count ());
+}
+
+DEFMETHOD (__lexer_debug_flag__, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} __lexer_debug_flag__ ()
+@deftypefnx {} {@var{old_val} =} __lexer_debug_flag__ (@var{new_val})
+Query or set the internal flag that determines whether Octave's lexer prints
+debug information as it processes an expression.
+@seealso{__display_tokens__, __token_count__, __parse_debug_flag__}
+@end deftypefn */)
+{
+  octave::settings& stgs = interp.get_settings ();
+
+  return stgs.lexer_debug_flag (args, nargout);
+}
diff --git a/libinterp/corefcn/settings.h b/libinterp/corefcn/settings.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/settings.h
@@ -0,0 +1,90 @@
+/*
+
+Copyright (C) 2018 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_settings_h)
+#define octave_settings_h 1
+
+#include "octave-config.h"
+
+class octave_value_list;
+
+namespace octave
+{
+  // Most settings for the interpreter are stored in the classes which
+  // they affect (intput_system, output_system, load_path, etc.  Some
+  // don't really fit anywhere else.  For example, there is no single
+  // lexer or parser object, so we store settings for those things
+  // here.
+
+  class settings
+  {
+  public:
+
+    settings (void);
+
+    settings (const settings&) = delete;
+
+    settings& operator = (const settings&) = delete;
+
+    ~settings (void) = default;
+
+    octave_value display_tokens (const octave_value_list& args, int nargout);
+
+    bool display_tokens (void) const { return m_display_tokens; }
+
+    bool display_tokens (bool flag)
+    {
+      bool val = m_display_tokens;
+      m_display_tokens = flag;
+      return val;
+    }
+
+    // Read only.
+    size_t token_count (void) const { return m_token_count; }
+
+    void increment_token_count (void) { ++m_token_count; }
+
+    octave_value lexer_debug_flag (const octave_value_list& args, int nargout);
+
+    bool lexer_debug_flag (void) const { return m_lexer_debug_flag; }
+
+    bool lexer_debug_flag (bool flag)
+    {
+      bool val = m_lexer_debug_flag;
+      m_lexer_debug_flag = flag;
+      return val;
+    }
+
+  private:
+
+    // Display tokens as they are processed, for debugging.
+    bool m_display_tokens = false;
+
+    // Number of tokens processed since interpreter startup.
+    size_t m_token_count = 0;
+
+    // Internal variable for lexer debugging state.
+    bool m_lexer_debug_flag = false;
+  };
+}
+
+#endif
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -670,16 +670,22 @@ namespace octave
     void push_token (token *);
 
     token * current_token (void);
 
     void display_token (int tok);
 
     void fatal_error (const char *msg);
 
+    bool debug_flag (void) const;
+
+    bool display_tokens (void) const;
+
+    void increment_token_count (void);
+
     void lexer_debug (const char *pattern);
 
     // Internal state of the flex-generated lexer.
     void *m_scanner;
 
     // Object that reads and buffers input.
     input_buffer m_input_buf;
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -318,23 +318,16 @@ object) relevant global values before an
                                                                         \
                if (id_tok >= 0)                                         \
                  return curr_lexer->count_token_internal (id_tok);      \
              }                                                          \
          }                                                              \
      }                                                                  \
    while (0)
 
-static bool Vdisplay_tokens = false;
-
-static unsigned int Vtoken_count = 0;
-
-// Internal variable for lexer debugging state.
-static bool lexer_debug_flag = false;
-
 %}
 
 D       [0-9]
 D_      [0-9_]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 Im      [iIjJ]
 CCHAR   [#%]
@@ -2031,54 +2024,16 @@ If @var{name} is omitted, return a list 
 %!assert (iskeyword ("get"), false)
 %!assert (iskeyword ("set"), false)
 
 %!error iskeyword ("A", "B")
 %!error <NAME must be a string> iskeyword (1)
 
 */
 
-DEFUN (__display_tokens__, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __display_tokens__ ()
-Query or set the internal variable that determines whether Octave's
-lexer displays tokens as they are read.
-@seealso{__lexer_debug_flag__, __token_count__}
-@end deftypefn */)
-{
-  return SET_INTERNAL_VARIABLE (display_tokens);
-}
-
-DEFUN (__token_count__, , ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __token_count__ ()
-Return the number of language tokens processed since Octave startup.
-@seealso{__lexer_debug_flag__, __display_tokens__}
-@end deftypefn */)
-{
-  return octave_value (Vtoken_count);
-}
-
-DEFUN (__lexer_debug_flag__, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} __lexer_debug_flag__ ()
-@deftypefnx {} {@var{old_val} =} __lexer_debug_flag__ (@var{new_val})
-Query or set the internal flag that determines whether Octave's lexer prints
-debug information as it processes an expression.
-@seealso{__display_tokens__, __token_count__, __parse_debug_flag__}
-@end deftypefn */)
-{
-  octave_value retval;
-
-  retval = set_internal_variable (lexer_debug_flag, args, nargout,
-                                  "__lexer_debug_flag__");
-
-  return retval;
-}
-
 namespace octave
 {
   void
   lexical_feedback::symbol_table_context::clear (void)
   {
     while (! m_frame_stack.empty ())
       m_frame_stack.pop_front ();
   }
@@ -2433,30 +2388,30 @@ namespace octave
     return yyget_leng (m_scanner);
   }
 
   int
   base_lexer::text_yyinput (void)
   {
     int c = yyinput (m_scanner);
 
-    if (lexer_debug_flag)
+    if (debug_flag ())
       {
         std::cerr << "I: ";
         display_character (c);
         std::cerr << std::endl;
       }
 
     // Convert CRLF into just LF and single CR into LF.
 
     if (c == '\r')
       {
         c = yyinput (m_scanner);
 
-        if (lexer_debug_flag)
+        if (debug_flag ())
           {
             std::cerr << "I: ";
             display_character (c);
             std::cerr << std::endl;
           }
 
         if (c != '\n')
           {
@@ -2468,17 +2423,17 @@ namespace octave
     return c;
   }
 
   void
   base_lexer::xunput (char c, char *buf)
   {
     if (c != EOF)
       {
-        if (lexer_debug_flag)
+        if (debug_flag ())
           {
             std::cerr << "U: ";
             display_character (c);
             std::cerr << std::endl;
           }
 
         yyunput (c, buf, m_scanner);
       }
@@ -3402,20 +3357,43 @@ namespace octave
   }
 
   void
   base_lexer::fatal_error (const char *msg)
   {
     error ("fatal lexer error: %s", msg);
   }
 
+  bool
+  base_lexer::debug_flag (void) const
+  {
+    settings& stgs = m_interpreter.get_settings ();
+    return stgs.lexer_debug_flag ();
+  }
+
+  bool
+  base_lexer::display_tokens (void) const
+  {
+    settings& stgs = m_interpreter.get_settings ();
+    return stgs.display_tokens ();
+  }
+
+  void
+  base_lexer::increment_token_count (void)
+  {
+    settings& stgs = m_interpreter.get_settings ();
+    stgs.increment_token_count ();
+
+    m_token_count++;
+  }
+
   void
   base_lexer::lexer_debug (const char *pattern)
   {
-    if (lexer_debug_flag)
+    if (debug_flag ())
       {
         std::cerr << std::endl;
 
         display_start_state ();
 
         std::cerr << "P: " << pattern << std::endl;
         std::cerr << "T: " << flex_yytext () << std::endl;
       }
@@ -3595,31 +3573,29 @@ namespace octave
 
     return count_token_internal (tok);
   }
 
   int
   base_lexer::count_token_internal (int tok)
   {
     if (tok != '\n')
-      {
-        Vtoken_count++;
-        m_token_count++;
-      }
+      increment_token_count ();
 
     return show_token (tok);
   }
 
   int
   base_lexer::show_token (int tok)
   {
-    if (Vdisplay_tokens)
+
+    if (display_tokens ())
       display_token (tok);
 
-    if (lexer_debug_flag)
+    if (debug_flag ())
       {
         std::cerr << "R: ";
         display_token (tok);
         std::cerr << std::endl;
       }
 
     return tok;
   }
