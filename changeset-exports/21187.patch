# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454563842 18000
#      Thu Feb 04 00:30:42 2016 -0500
# Node ID f569ba0ee237e0315769761d16208cbb9d04a259
# Parent  7f35125714b43aa57267974a48cec503ec93a773
eliminate FCN_PTR_CAST macro and associated configure test

* acinclude.m4 (CTAVE_CXX_BROKEN_REINTERPRET_CAST):
Delete macro definition.
* configure.ac: Don't use it.
* oct-conf-post.in.h (FCN_PTR_CAST): Delete macro definition.
* dynamic-ld.cc, mex.cc: Use reinterpret_cast instead of FCN_PTR_CAST
macro.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2218,19 +2218,16 @@ AC_CHECK_SIZEOF([long double])
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks,
                   struct stat.st_rdev])
 AC_CHECK_MEMBERS([struct group.gr_passwd])
 
 AC_STRUCT_TIMEZONE
 
 ### Check compiler characteristics.
 
-## Does reinterpret_cast fail for function pointers?
-OCTAVE_CXX_BROKEN_REINTERPRET_CAST
-
 ## Check if C++ compiler can auto allocate variable sized arrays.
 OCTAVE_CXX_DYNAMIC_AUTO_ARRAYS
 
 ## Check that C compiler and libraries support IEEE754 data format.
 OCTAVE_IEEE754_DATA_FORMAT
 
 ## Are bit_and, bit_or, and bit_xor defined as templated operators?
 OCTAVE_CXX_BITWISE_OP_TEMPLATES
diff --git a/libinterp/corefcn/dynamic-ld.cc b/libinterp/corefcn/dynamic-ld.cc
--- a/libinterp/corefcn/dynamic-ld.cc
+++ b/libinterp/corefcn/dynamic-ld.cc
@@ -277,17 +277,17 @@ octave_dynamic_loader::do_load_oct (cons
       // automatically at run time or configure time?
 
       function = oct_file.search (fcn_name, name_uscore_mangler);
     }
 
   if (function)
     {
       octave_dld_fcn_getter f
-        = FCN_PTR_CAST (octave_dld_fcn_getter, function);
+        = reinterpret_cast<octave_dld_fcn_getter> (function);
 
       retval = f (oct_file, relative);
 
       if (! retval)
         error ("failed to install .oct file function '%s'",
                fcn_name.c_str ());
     }
 
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -2995,26 +2995,26 @@ call_mex (bool have_fmex, void *f, const
 
   for (int i = 0; i < nargin; i++)
     argin[i] = context.make_value (args(i));
 
   mex_context = &context;
 
   if (have_fmex)
     {
-      fmex_fptr fcn = FCN_PTR_CAST (fmex_fptr, f);
+      fmex_fptr fcn = reinterpret_cast<fmex_fptr> (f);
 
       int tmp_nargout = nargout;
       int tmp_nargin = nargin;
 
       fcn (tmp_nargout, argout, tmp_nargin, argin);
     }
   else
     {
-      cmex_fptr fcn = FCN_PTR_CAST (cmex_fptr, f);
+      cmex_fptr fcn = reinterpret_cast<cmex_fptr> (f);
 
       fcn (nargout, argout, nargin, argin);
     }
 
   // Convert returned array entries back into octave values.
 
   octave_value_list retval;
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1334,40 +1334,16 @@ AC_DEFUN([OCTAVE_CXX_BITWISE_OP_TEMPLATE
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_cxx_bitwise_op_templates = yes; then
     AC_DEFINE(HAVE_CXX_BITWISE_OP_TEMPLATES, 1,
       [Define to 1 if C++ library has templated bitwise operators.])
   fi
 ])
 dnl
-dnl Check if C++ reinterpret cast works for function pointers.
-dnl
-AC_DEFUN([OCTAVE_CXX_BROKEN_REINTERPRET_CAST],
-  [AC_REQUIRE([AC_PROG_CXX])
-  AC_CACHE_CHECK([for broken C++ reinterpret_cast],
-    [octave_cv_cxx_broken_reinterpret_cast],
-    [AC_LANG_PUSH(C++)
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-        #include <cmath> ]], [[
-        typedef double (*fptr) (double);
-        fptr psin = sin;
-        void *vptr = reinterpret_cast<void *> (psin);
-        psin = reinterpret_cast<fptr> (vptr);
-      ]])],
-      octave_cv_cxx_broken_reinterpret_cast=no,
-      octave_cv_cxx_broken_reinterpret_cast=yes)
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_cxx_broken_reinterpret_cast = yes; then
-    AC_DEFINE(CXX_BROKEN_REINTERPRET_CAST, 1,
-      [Define to 1 if C++ reinterpret_cast fails for function pointers.])
-  fi
-])
-dnl
 dnl Check if the C++ library has functions to access real and imaginary
 dnl parts of complex numbers independently via references.
 dnl
 AC_DEFUN([OCTAVE_CXX_COMPLEX_REFERENCE_ACCESSORS], [
   AC_CACHE_CHECK([whether complex class can reference components independently],
     [octave_cv_cxx_complex_reference_accessors],
     [AC_LANG_PUSH(C++)
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -46,22 +46,16 @@ along with Octave; see the file COPYING.
 #else
   #define OCTAVE_DEPRECATED(msg)
   #define OCTAVE_NORETURN
   #define OCTAVE_UNUSED
 #endif
 
 #define X_CAST(T, E) (T) (E)
 
-#if defined (CXX_BROKEN_REINTERPRET_CAST)
-#define FCN_PTR_CAST(T, E) (T) (E)
-#else
-#define FCN_PTR_CAST(T, E) reinterpret_cast<T> (E)
-#endif
-
 #if ! defined (HAVE_DEV_T)
 typedef short dev_t;
 #endif
 
 #if ! defined (HAVE_INO_T)
 typedef unsigned long ino_t;
 #endif
 
