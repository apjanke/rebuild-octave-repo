# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1338154920 -7200
#      Sun May 27 23:42:00 2012 +0200
# Branch gui
# Node ID c952f1e35e50c2911bdd09625b26e5e5ebad63cb
# Parent  d6d250812c01ce6c0f414871c4678002826a99b8
Added patch from Marco Atzeri for QTerminal to build with cygwin. Removed some compiler warnings.

* FileEditorTab: Parameter of setModified was not used properly.
* OctaveLink: Exit status was not used, surrounded with Q_UNUSED.
* MainWindow: Added prepareQuit slot to always save settings before quiting.

diff --git a/.hgsubstate b/.hgsubstate
--- a/.hgsubstate
+++ b/.hgsubstate
@@ -1,2 +1,2 @@
 f9813bce2c06a6130a68db4478d1b16ddadaf276 gnulib
-a81f99b9b77d9a402b92463b41c5fdb82324349a gui/qterminal
+5c51db4e3b1fcce6a05c59af5be78f43ebc24db4 gui/qterminal
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -133,16 +133,22 @@ MainWindow::updateTerminalFont ()
   QFont font = QFont();
   //font.setStyleHint(QFont::TypeWriter);
   font.setFamily(settings->value("terminal/fontName").toString());
   font.setPointSize(settings->value("terminal/fontSize").toInt ());
   m_terminal->setTerminalFont(font);
 }
 
 void
+MainWindow::prepareForQuit ()
+{
+  writeSettings ();
+}
+
+void
 MainWindow::showAboutOctave ()
 {
   QString message =
       "GNU Octave\n"
       "Copyright (C) 2009 John W. Eaton and others.\n"
       "This is free software; see the source code for copying conditions."
       "There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or"
       "FITNESS FOR A PARTICULAR PURPOSE.  For details, type `warranty'.\n"
@@ -163,17 +169,17 @@ MainWindow::showAboutOctave ()
 }
 
 void
 MainWindow::closeEvent (QCloseEvent * closeEvent)
 {
   reportStatusMessage (tr ("Saving data and shutting down."));
   writeSettings ();
   m_closing = true;  // inform editor window that whole application is closed
-  OctaveLink::instance ()->terminateOctave();
+  OctaveLink::instance ()->terminateOctave ();
 
   QMainWindow::closeEvent (closeEvent);
 }
 
 void
 MainWindow::readSettings ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
@@ -215,17 +221,23 @@ MainWindow::construct ()
 
   m_currentDirectoryUpToolButton = new QToolButton (this);
   m_currentDirectoryUpToolButton->setIcon (style->standardIcon (QStyle::SP_FileDialogToParent));
 
   // Octave Terminal subwindow.
   m_terminal = new QTerminal(this);
   m_terminalDockWidget = new TerminalDockWidget (m_terminal, this);
 
-  //setCentralWidget (new QWidget (this));
+  /*
+  QWidget *dummyWidget = new QWidget ();
+  dummyWidget->setObjectName ("DummyWidget");
+  dummyWidget->setFixedSize (100, 100);
+  dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
+  setCentralWidget (dummyWidget);*/
+  //dummyWidget->hide ();
 
   m_fileEditor = new FileEditor (m_terminal, this);
 
   QMenu *fileMenu = menuBar ()->addMenu (tr ("&File"));
   QAction *newFileAction
     = fileMenu->addAction (QIcon::fromTheme ("document-new",
       style->standardIcon (QStyle::SP_FileIcon)), tr ("New File"));
 
@@ -272,19 +284,19 @@ MainWindow::construct ()
   QAction *clearWorkspaceAction = desktopMenu->addAction (tr ("Clear workspace"));
 
   // Window menu
   QMenu *windowMenu = menuBar ()->addMenu (tr ("&Window"));
   QAction *showCommandWindowAction = windowMenu->addAction (tr ("Command Window"));
   showCommandWindowAction->setCheckable (true);
   QAction *showWorkspaceAction = windowMenu->addAction (tr ("Workspace"));
   showWorkspaceAction->setCheckable (true);
-  QAction *showHistoryAction = windowMenu->addAction (tr ("History"));
+  QAction *showHistoryAction = windowMenu->addAction (tr ("Command History"));
   showHistoryAction->setCheckable (true);
-  QAction *showFileBrowserAction = windowMenu->addAction (tr ("File Browser"));
+  QAction *showFileBrowserAction = windowMenu->addAction (tr ("Current Directory"));
   showFileBrowserAction->setCheckable (true);
   QAction *showEditorAction = windowMenu->addAction (tr ("Editor"));
   showEditorAction->setCheckable (true);
 
   // Help menu
   QMenu *helpMenu = menuBar ()->addMenu (tr ("&Help"));
   QAction *reportBugAction = helpMenu->addAction (tr ("Report Bug"));
   QAction *agoraAction = helpMenu->addAction (tr ("Visit Agora"));
@@ -303,16 +315,18 @@ MainWindow::construct ()
   mainToolBar->addAction (undoAction);
   mainToolBar->addAction (redoAction);
   mainToolBar->addSeparator ();
   mainToolBar->addWidget (new QLabel (tr ("Current Directory:")));
   mainToolBar->addWidget (m_currentDirectoryLineEdit);
   mainToolBar->addWidget (m_currentDirectoryToolButton);
   mainToolBar->addWidget (m_currentDirectoryUpToolButton);
 
+  connect (qApp, SIGNAL(aboutToQuit ()), this, SLOT (prepareForQuit ()));
+
   connect (settingsAction, SIGNAL (triggered ()), this, SLOT (processSettingsDialogRequest ()));
   connect (exitAction, SIGNAL (triggered ()), this, SLOT (close ()));
   connect (newFileAction, SIGNAL (triggered ()), this, SLOT (newFile ()));
   connect (openFileAction, SIGNAL (triggered ()), this, SLOT (openFile ()));
   connect (reportBugAction, SIGNAL (triggered ()), this, SLOT (openBugTrackerPage ()));
   connect (agoraAction, SIGNAL (triggered ()), this, SLOT (openAgoraPage ()));
   connect (octaveForgeAction, SIGNAL (triggered ()), this, SLOT (openOctaveForgePage ()));
   connect (aboutOctaveAction, SIGNAL (triggered ()), this, SLOT (showAboutOctave ()));
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -85,16 +85,17 @@ public slots:
   void newFile ();
   void openFile ();
   void openBugTrackerPage ();
   void openAgoraPage ();
   void openOctaveForgePage ();
   void processSettingsDialogRequest ();
   void showAboutOctave ();
   void updateTerminalFont ();
+  void prepareForQuit ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
   void readSettings ();
   void writeSettings ();
 
 private:
   void construct ();
diff --git a/gui/src/backend/OctaveLink.cpp b/gui/src/backend/OctaveLink.cpp
--- a/gui/src/backend/OctaveLink.cpp
+++ b/gui/src/backend/OctaveLink.cpp
@@ -25,16 +25,17 @@ int octave_readline_hook ()
   OctaveLink::instance ()->triggerUpdateHistoryModel ();
   OctaveLink::instance ()->triggerCacheSymbolTable ();
   QDir::setCurrent (load_path::get_command_line_path ().c_str ());
   return 0;
 }
 
 void octave_exit_hook (int status)
 {
+  Q_UNUSED (status);
   OctaveLink::instance ()->terminateOctave ();
 }
 
 OctaveLink OctaveLink::m_singleton;
 
 OctaveLink::OctaveLink ():QObject ()
 {
   m_historyModel = new QStringListModel (this);
diff --git a/gui/src/editor/FileEditorTab.cpp b/gui/src/editor/FileEditorTab.cpp
--- a/gui/src/editor/FileEditorTab.cpp
+++ b/gui/src/editor/FileEditorTab.cpp
@@ -314,17 +314,17 @@ void
 FileEditorTab::redo ()
 {
   m_editArea->redo ();
 }
 
 void
 FileEditorTab::setModified (bool modified)
 {
-  m_editArea->setModified (true);
+  m_editArea->setModified (modified);
 }
 
 bool
 FileEditorTab::openFile ()
 {
   QString openFileName;
   QFileDialog fileDialog(this);
   fileDialog.setNameFilter(SAVE_FILE_FILTER);
diff --git a/gui/src/editor/FileEditorTab.h b/gui/src/editor/FileEditorTab.h
--- a/gui/src/editor/FileEditorTab.h
+++ b/gui/src/editor/FileEditorTab.h
@@ -42,17 +42,17 @@ public slots:
   void nextBookmark ();
   void previousBookmark ();
   void cut ();
   void copy ();
   void paste ();
   void undo ();
   void redo ();
 
-  void setModified (bool modified);
+  void setModified (bool modified = true);
 
   bool openFile();
   void loadFile (QString fileName);
   void newFile ();
   bool saveFile ();
   bool saveFile(QString saveFileName);
   bool saveFileAs();
   void runFile ();
