# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285747978 14400
#      Wed Sep 29 04:12:58 2010 -0400
# Node ID b0a9450d81c61694852590b3c4b3a960c985198b
# Parent  10c65e01f042eb9f5b850e53a3e393809f497810
luinc.cc: use octave_scalar_map instead of Octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-29  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/luinc.cc (Fluinc): Use octave_scalar_map
+	instead of Octave_map.
+
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Use octave_scalar_map
 	instead of Octave_map.  Use scalar values where appropriate in
 	call to glpk.
 	(OCTAVE_GLPK_GET_REAL_PARAM, OCTAVE_GLPK_GET_INT_PARAM):
 	Update for octave_scalar_map.
 
diff --git a/src/DLD-FUNCTIONS/luinc.cc b/src/DLD-FUNCTIONS/luinc.cc
--- a/src/DLD-FUNCTIONS/luinc.cc
+++ b/src/DLD-FUNCTIONS/luinc.cc
@@ -116,46 +116,63 @@ Given the string argument 'vector', @dfn
         {
           if (args(1).string_value () == "0")
             zero_level = true;
           else
             error ("luinc: unrecognized string argument");
         }
       else if (args(1).is_map ())
         {
-          Octave_map map = args(1).map_value ();
-
-          if (map.contains ("droptol"))
-            droptol = map.contents ("droptol")(0).double_value ();
+          octave_scalar_map map = args(1).scalar_map_value ();
 
-          if (map.contains ("milu"))
-            {
-              double tmp = map.contents ("milu")(0).double_value ();
-
-              milu = (tmp == 0. ? false : true);
-            }
-
-          if (map.contains ("udiag"))
+          if (! error_state)
             {
-              double tmp = map.contents ("udiag")(0).double_value ();
+              octave_value tmp;
+
+              tmp = map.contents ("droptol");
+              if (tmp.is_defined ())
+                droptol = tmp.double_value ();
+
+              tmp = map.contents ("milu");
+              if (tmp.is_defined ())
+                {
+                  double val = tmp.double_value ();
+
+                  milu = (val == 0. ? false : true);
+                }
+
+              tmp = map.contents ("udiag");
+              if (tmp.is_defined ())
+                {
+                  double val = tmp.double_value ();
 
-              udiag = (tmp == 0. ? false : true);
+                  udiag = (val == 0. ? false : true);
+                }
+
+              tmp = map.contents ("thresh");
+              if (tmp.is_defined ())
+                {
+                  thresh = tmp.matrix_value ();
+
+                  if (thresh.nelem () == 1)
+                    {
+                      thresh.resize(1,2);
+                      thresh(1) = thresh(0);
+                    }
+                  else if (thresh.nelem () != 2)
+                    {
+                      error ("luinc: expecting 2 element vector for thresh");
+                      return retval;
+                    }
+                }
             }
-
-          if (map.contains ("thresh"))
+          else
             {
-              thresh = map.contents ("thresh")(0).matrix_value ();
-
-              if (thresh.nelem () == 1)
-                {
-                  thresh.resize(1,2);
-                  thresh(1) = thresh(0);
-                }
-              else if (thresh.nelem () != 2)
-                error ("chol: expecting 2 element vector for thresh");
+              error ("luinc: options argument must be a scalar structure");
+              return retval;
             }
         }
       else
         droptol = args(1).double_value ();
 
       if (nargin == 3)
         {
           std::string tmp = args(2).string_value ();
