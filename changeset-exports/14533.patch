# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1333594797 21600
#      Wed Apr 04 20:59:57 2012 -0600
# Node ID e6aa044253eb72dcb52b407f45ae63f5e547f7e9
# Parent  2946642797d6ed9f60d73937076d129d31ca2e34
Allow comma at the end of an assignment list (bug #35645)

* src/oct-parse.yy (opt_comma): New rule.
(assign_lhs): Optionally allow for trailing comma.

diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -455,17 +455,17 @@ make_statement (T *arg)
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN SCRIPT_FILE FUNCTION_FILE CLASSDEF
 // %token VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg classdef_beg
 %type <comment_type> properties_beg methods_beg events_beg enum_beg
-%type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
+%type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep opt_comma
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr
@@ -901,17 +901,17 @@ simple_expr     : colon_expr
 // Arrange for the lexer to return CLOSE_BRACE for `]' by looking ahead
 // one token for an assignment op.
 
 assign_lhs      : simple_expr
                   {
                     $$ = new tree_argument_list ($1);
                     $$->mark_as_simple_assign_lhs ();
                   }
-                | '[' arg_list CLOSE_BRACE
+                | '[' arg_list opt_comma CLOSE_BRACE
                   {
                     $$ = $2;
                     lexer_flags.looking_at_matrix_or_assign_lhs = false;
                     for (std::set<std::string>::const_iterator p = lexer_flags.pending_local_variables.begin ();
                          p != lexer_flags.pending_local_variables.end ();
                          p++)
                       {
                         symbol_table::force_variable (*p);
@@ -1667,16 +1667,22 @@ sep             : ','
                 ;
 
 opt_sep         : // empty
                   { $$ = 0; }
                 | sep
                   { $$ = $1; }
                 ;
 
+opt_comma       : // empty
+                  { $$ = 0; }
+                | ','
+                  { $$ = ','; }
+                ;
+
 %%
 
 // Generic error messages.
 
 static void
 yyerror (const char *s)
 {
   int err_col = current_input_column - 1;
@@ -4548,16 +4554,21 @@ code strings.\n\
 %! assert (flipud, 2);
 
 %!function y = __f ()
 %!  eval ("flipud = 2;");
 %!  y = flipud;
 %!endfunction
 %!assert (__f(), 2)
 
+% bug #35645
+%!test
+%! [a,] = gcd (1,2);
+%! [a,b,] = gcd (1, 2);
+
 */
 
 DEFUN (assignin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @code{\"base\"} or @code{\"caller\"}.\n\
 @seealso{evalin}\n\
