# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1469313547 14400
#      Sat Jul 23 18:39:07 2016 -0400
# Node ID ed8a0c39e14ce9f185dfc1c45d5ef692f05cd725
# Parent  0a4c5a90f28638b69e0146a59a03815fd8a37095
Allow TAB autocompletion of local functions in debug mode (bug #48317)

* help.cc (local_functions): New function.

* help.cc (make_name_list): Include local function names in the list.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -791,16 +791,48 @@ names (const map_type& lst)
     retval[j++] = iter->first;
   return retval;
 }
 
 const static map_type operators_map (operators, operators + size (operators));
 const static map_type keywords_map (keywords, keywords + size (keywords));
 const static string_vector keyword_names = names (keywords_map);
 
+// Return a vector of all functions from this file,
+// for use in command line auto-completion.
+static string_vector
+local_functions (void)
+{
+  string_vector retval;
+
+  octave_user_code *curr_fcn = octave_call_stack::caller_user_code ();
+
+  if (! curr_fcn)
+    return retval;
+
+  // All subfunctions are listed in the top-level function of this file.
+  while (curr_fcn->is_subfunction ())
+    curr_fcn = symbol_table::get_curr_fcn (curr_fcn->parent_fcn_scope ());
+
+  // Get subfunctions.
+  const std::list<std::string> names = curr_fcn->subfunction_names ();
+
+  size_t sz = names.size ();
+  retval.resize (sz);
+
+  // Loop over them.
+  size_t i = 0;
+  for (std::list<std::string>::const_iterator p = names.begin ();
+       p != names.end (); p++)
+    retval(i++) = *p;
+
+  retval.resize (i);
+  return retval;
+}
+
 // FIXME: It's not likely that this does the right thing now.
 
 string_vector
 make_name_list (void)
 {
   const int key_len = keyword_names.numel ();
 
   const string_vector bif = symbol_table::built_in_function_names ();
@@ -813,18 +845,21 @@ make_name_list (void)
   const int lcl_len = lcl.numel ();
 
   const string_vector ffl = load_path::fcn_names ();
   const int ffl_len = ffl.numel ();
 
   const string_vector afl = autoloaded_functions ();
   const int afl_len = afl.numel ();
 
+  const string_vector lfl = local_functions ();
+  const int lfl_len = lfl.numel ();
+
   const int total_len
-    = key_len + bif_len + cfl_len + lcl_len + ffl_len + afl_len;
+    = key_len + bif_len + cfl_len + lcl_len + ffl_len + afl_len + lfl_len;
 
   string_vector list (total_len);
 
   // Put all the symbols in one big list.
 
   int j = 0;
   int i = 0;
   for (i = 0; i < key_len; i++)
@@ -840,16 +875,19 @@ make_name_list (void)
     list[j++] = lcl[i];
 
   for (i = 0; i < ffl_len; i++)
     list[j++] = ffl[i];
 
   for (i = 0; i < afl_len; i++)
     list[j++] = afl[i];
 
+  for (i = 0; i < lfl_len; i++)
+    list[j++] = lfl[i];
+
   return list;
 }
 
 static bool
 looks_like_html (const std::string& msg)
 {
   const size_t p1 = msg.find ('\n');
   std::string t = msg.substr (0, p1);
