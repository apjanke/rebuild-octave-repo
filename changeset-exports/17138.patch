# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1375378627 -3600
#      Thu Aug 01 18:37:07 2013 +0100
# Node ID 96526baf7423bbd7c85fc20de0ff62d0d3c26d5a
# Parent  603ce503babd69b55bf9eecbb9386cc1f4fa0fc2
Fix reading of images using PixelRegion with ranges ending before the limit.

* __magick_read__.cc (calculate_region): reduce image cache being loaded into
  memory by checking max() instead of limit(). Simplify calculation of output
  size by using nelem(). Fix calculation of the pointer shift required when
  moving to next column in cases where limit() and max () were different.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -50,30 +50,32 @@ calculate_region (const octave_scalar_ma
   std::map<std::string, octave_idx_type> region;
   const Cell pixel_region = options.getfield ("region").cell_value ();
 
   // Subtract 1 to account for 0 indexing.
   const Range rows     = pixel_region (0).range_value ();
   const Range cols     = pixel_region (1).range_value ();
   region["row_start"]  = rows.base () -1;
   region["col_start"]  = cols.base () -1;
-  region["row_end"]    = rows.limit () -1;
-  region["col_end"]    = cols.limit () -1;
+  region["row_end"]    = rows.max ()  -1;
+  region["col_end"]    = cols.max ()  -1;
 
-  // Length of the area to load into the Image Pixel Cache
+  // Length of the area to load into the Image Pixel Cache.  We use max and
+  // min to account for cases where last element of range is the range limit.
   region["row_cache"] = region["row_end"] - region["row_start"] +1;
   region["col_cache"] = region["col_end"] - region["col_start"] +1;
 
   // How much we have to shift in the memory when doing the loops.
   region["row_shift"] = region["col_cache"] * rows.inc ();
-  region["col_shift"] = region["col_cache"] * region["row_cache"] - cols.inc ();
+  region["col_shift"] = region["col_cache"] *
+                        (region["row_cache"] + rows.inc () -1) - cols.inc ();
 
   // The actual height and width of the output image
-  region["row_out"] = floor ((region["row_end"] - region["row_start"]) / rows.inc ()) + 1;
-  region["col_out"] = floor ((region["col_end"] - region["col_start"]) / cols.inc ()) + 1;
+  region["row_out"] = rows.nelem ();
+  region["col_out"] = cols.nelem ();
 
   return region;
 }
 
 template <class T>
 static octave_value_list
 read_indexed_images (std::vector<Magick::Image>& imvec,
                      const Array<octave_idx_type>& frameidx,
@@ -644,50 +646,57 @@ use @code{imread}.\n\
   //        A grayscale jpeg image reports being indexed even though the JPEG
   //        format has no support for indexed images. So we can skip at least
   //        for that.
 
   if (klass == Magick::PseudoClass && imvec[0].magick () != "JPEG")
     {
       if (depth <= 1)
         {
-          output = read_indexed_images <boolNDArray> (imvec, frameidx, nargout, options);
+          output = read_indexed_images <boolNDArray>   (imvec, frameidx,
+                                                        nargout, options);
         }
       else if (depth <= 8)
         {
-          output = read_indexed_images <uint8NDArray> (imvec, frameidx, nargout, options);
+          output = read_indexed_images <uint8NDArray>  (imvec, frameidx,
+                                                        nargout, options);
         }
       else if (depth <= 16)
         {
-          output = read_indexed_images <uint16NDArray> (imvec, frameidx, nargout, options);
+          output = read_indexed_images <uint16NDArray> (imvec, frameidx,
+                                                        nargout, options);
         }
       else
         {
           error ("imread: indexed images with depths greater than 16-bit are not supported");
           return output;
         }
     }
 
   else
     {
       if (depth <= 1)
         {
-          output = read_images<boolNDArray> (imvec, frameidx, nargout, options);
+          output = read_images<boolNDArray>   (imvec, frameidx,
+                                               nargout, options);
         }
       else if (depth <= 8)
         {
-          output = read_images<uint8NDArray> (imvec, frameidx, nargout, options);
+          output = read_images<uint8NDArray>  (imvec, frameidx,
+                                               nargout, options);
         }
       else if (depth <= 16)
         {
-          output = read_images<uint16NDArray> (imvec, frameidx, nargout, options);
+          output = read_images<uint16NDArray> (imvec, frameidx,
+                                               nargout, options);
         }
       else if (depth <= 32)
         {
-          output = read_images<FloatNDArray> (imvec, frameidx, nargout, options);
+          output = read_images<FloatNDArray>  (imvec, frameidx,
+                                               nargout, options);
         }
       else
         {
           error ("imread: reading of images with %i-bit depth is not supported",
                  depth);
         }
     }
 
