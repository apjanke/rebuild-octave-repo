# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1243353600 14400
#      Tue May 26 12:00:00 2009 -0400
# Node ID 95445f9f5976fe243d88df0372165a41828ab9db
# Parent  9c2349a51218d876cf6b6c2866a6c12c49bfe42e
omit file extensions from __list_functions__ output

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-05-26  John W. Eaton  <jwe@octave.org>
 
+	* load-path.h, load-path.cc (load_path::files, load_path::do_files): 
+	New arg, OMIT_EXTS.
+	* help.cc (F__list_functions__): Call load_path::files with
+	omit_exts set to true.
+
 	* symtab.h
 	(symbol_table::symbol_record::symbol_record_rep::is_variable):
 	Use "! is_local ()" instead of storage_class != local.
 	(symbol_table::do_variable_names): Only add variables to the list.
 	(symbol_table::unmark_forced_variables): New static function
 	* variables.cc (do_who): Use is_variable instead of is_defined.
 	Also limit output to variables when using regexp pattern.
 	* octave.cc (unmark_forced_vars): Delete.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -952,20 +952,27 @@ Undocumented internal function.\n\
   if (args.length () == 0)
     retval = Cell (ffl.append (afl));
   else
     {
       std::string dir = args (0).string_value ();
 
       if (! error_state)
 	{
-	  string_vector fl = load_path::files (dir);
+	  string_vector fl = load_path::files (dir, true);
 
 	  if (! error_state)
-	    retval = Cell (fl);
+	    {
+	      // Return a sorted list with unique entries (in case of
+	      // .m and .oct versions of the same function in a given
+	      // directory, for example).
+	      fl.sort (true);
+
+	      retval = Cell (fl);
+	    }
 	}
       else
         error ("__list_functions__: input must be a string");
     }  
 
   return retval;
 }
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1332,25 +1332,40 @@ load_path::do_dir_list (void) const
        i != dir_info_list.end ();
        i++)
     retval.push_back (i->dir_name);
 
   return retval;
 }
 
 string_vector
-load_path::do_files (const std::string& dir) const
+load_path::do_files (const std::string& dir, bool omit_exts) const
 {
   string_vector retval;
 
   const_dir_info_list_iterator i = find_dir_info (dir);
 
   if (i != dir_info_list.end ())
     retval = i->fcn_files;
 
+  if (omit_exts)
+    {
+      octave_idx_type len = retval.length ();
+
+      for (octave_idx_type i = 0; i < len; i++)
+	{
+	  std::string fname = retval[i];
+
+	  size_t pos = fname.rfind ('.');
+
+	  if (pos != std::string::npos)
+	    retval[i] = fname.substr (0, pos);
+	}
+    }
+
   return retval;
 }
 
 string_vector
 load_path::do_fcn_names (void) const
 {
   size_t len = fcn_map.size ();
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -181,19 +181,20 @@ public:
   }
 
   static std::list<std::string> dir_list (void)
   {
     return instance_ok ()
       ? instance->do_dir_list () : std::list<std::string> ();
   }
 
-  static string_vector files (const std::string& dir)
+  static string_vector files (const std::string& dir, bool omit_exts = false)
   {
-    return instance_ok () ? instance->do_files (dir) : string_vector ();
+    return instance_ok ()
+      ? instance->do_files (dir, omit_exts) : string_vector ();
   }
 
   static string_vector fcn_names (void)
   {
     return instance_ok () ? instance->do_fcn_names () : string_vector ();
   }
 
   static std::string path (void)
@@ -485,17 +486,17 @@ private:
   std::string do_find_first_of (const string_vector& files) const;
 
   string_vector do_find_all_first_of (const string_vector& files) const;
 
   string_vector do_dirs (void) const;
 
   std::list<std::string> do_dir_list (void) const;
 
-  string_vector do_files (const std::string& dir) const;
+  string_vector do_files (const std::string& dir, bool omit_exts) const;
 
   string_vector do_fcn_names (void) const;
 
   std::string do_path (void) const;
 
   friend void print_types (std::ostream& os, int types);
 
   friend string_vector get_file_list (const dir_info::fcn_file_map_type& lst);
