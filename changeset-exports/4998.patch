# HG changeset patch
# User jwe
# Date 1095282013 0
#      Wed Sep 15 21:00:13 2004 +0000
# Node ID 3f3d6eec0a2c5b255607d97bca767153462ff015
# Parent  d117a9fb83be18b2891dd5eae798cdd79769e220
[project @ 2004-09-15 21:00:01 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-09-15  David Bateman  <dbateman@free.fr>
+
+	* oct-sort.h (octave_sort<T>::set_compare (bool (*comp) (T, T))):
+	New function to set the comparison function for the sort.
+
 2004-09-10  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.cc (xround): Fix typo.
 
 2004-09-08  John W. Eaton  <jwe@octave.org>
 
 	* Array.h (Array::~Array): Declare virtual.
 
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -87,24 +87,24 @@ The Python license is
 #include "quit.h"
 #include "oct-sort.h"
 
 #define IFLT(a,b)  if (compare == NULL ? ((a) < (b)) : compare ((a), (b)))
 
 template <class T>
 octave_sort<T>::octave_sort (void) : compare (NULL) 
 { 
-  merge_init ( ); 
+  merge_init (); 
   merge_getmem (1024);
 }
 
 template <class T>
 octave_sort<T>::octave_sort (bool (*comp) (T, T)) : compare (comp) 
 { 
-  merge_init ( ); 
+  merge_init (); 
   merge_getmem (1024);
 }
   
 /* Reverse a slice of a list in place, from lo up to (exclusive) hi. */
 template <class T>
 void
 octave_sort<T>::reverse_slice(T *lo, T *hi)
 {
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -104,26 +104,30 @@ The Python license is
 
 /* Avoid malloc for small temp arrays. */
 #define MERGESTATE_TEMP_SIZE 1024
 
 template <class T>
 class
 octave_sort
 {
- public:
+public:
+
   octave_sort (void);
 
   octave_sort (bool (*comp) (T, T));
   
-  ~octave_sort (void) { merge_freemem ( ); }
+  ~octave_sort (void) { merge_freemem (); }
+
+  void set_compare (bool (*comp) (T, T)) { compare = comp; }
 
   void sort (T *v, int elements);
 
- private:
+private:
+
   /* One MergeState exists on the stack per invocation of mergesort.  It's just
    * a convenient way to pass state around among the helper functions.
    *
    * DGB: This isn't needed with mergesort in a class, but it doesn't slow
    *      things up, and it is likely to make my life easier for any potential
    *      backporting of changes in the Python code.
    */
   
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-09-15  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/sort.cc (mx_sort): Return octave_value, not
+	octave_value list.
+
 2004-09-15  David Bateman  <dbateman@free.fr>
 
 	* ov.cc (octave_value::octave_value (const ArrayN<char>&, bool)):
 	New Constructor .
 	* ov.h: Provide decl.
 
 	* DLD-FUNCTIONS/sort.cc (sortmode): New enum to define sort direction.
 	(template <class T> class vec_index): New class to contain values and
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -1,9 +1,9 @@
-/*
+v/*
 
 Copyright (C) 1996, 1997 John W. Eaton
 Copyright (C) 2004 David Bateman
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -45,20 +45,20 @@ class
 vec_index
 {
 public:
   T vec;
   int indx;
 };
 
 template <class T>
-static octave_value_list
+static octave_value
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
   unsigned int ns = dv (dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
@@ -100,17 +100,17 @@ mx_sort (ArrayN<T> &m, int dim, sortmode
 
 	  sort.sort (vi, ns);
 	      
 	  for (unsigned int i = 0; i < ns; i++)
 	    v[i*stride + offset] = vi[i];
 	}
     }
 
-  retval(0) = octave_value (m);
+  retval = m;
 
   return retval;
 }
 
 template <class T>
 static octave_value_list
 mx_sort_indexed (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
@@ -214,17 +214,17 @@ static inline unsigned EIGHT_BYTE_INT Fl
 inline unsigned EIGHT_BYTE_INT IFloatFlip(unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = ((f >> 63) - 1) | 0x8000000000000000ULL;
   return f ^ mask;
 }
 
 bool
 ascending_compare (unsigned EIGHT_BYTE_INT a, 
-		    unsigned EIGHT_BYTE_INT b)
+		   unsigned EIGHT_BYTE_INT b)
 {
   return (a < b);
 }
 
 bool
 ascending_compare (vec_index<unsigned EIGHT_BYTE_INT> *a, 
 		   vec_index<unsigned EIGHT_BYTE_INT> *b)
 {
@@ -245,20 +245,20 @@ descending_compare (vec_index<unsigned E
   return (a->vec > b->vec);
 }
 
 template class octave_sort<unsigned EIGHT_BYTE_INT>;
 template class vec_index<unsigned EIGHT_BYTE_INT>;
 template class octave_sort<vec_index<unsigned EIGHT_BYTE_INT> *>;
 
 template <>
-static octave_value_list
+static octave_value
 mx_sort (ArrayN<double> &m, int dim, sortmode mode)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
   unsigned int ns = dv (dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
@@ -357,17 +357,18 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	      for (unsigned int l = 0; l < ns - i + 1; l++)
 		v[l*stride + offset] = v[(l+i-1)*stride + offset];
 	      for (unsigned int l = ns - i + 1; l < ns; l++)
 		v[l*stride + offset] = octave_NaN;
 	    }
 	}
     }
 
-  retval(0) = m;
+  retval = m;
+
   return retval;
 }
 
 template <>
 static octave_value_list
 mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value_list retval;
@@ -454,16 +455,17 @@ mx_sort_indexed (ArrayN<double> &m, int 
 	      v[l*stride + offset] = octave_NaN;
 	      idx(l*stride + offset) = itmp[k];
 	    }
 	}
     }
 
   retval(1) = idx;
   retval(0) = m;
+
   return retval;
 }
 
 #else
 
 bool
 ascending_compare (double a, double b)
 {
