# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203122954 18000
#      Fri Feb 15 19:49:14 2008 -0500
# Node ID 1e01db14700bb1d3a53592dc5daaf7fd14b20eda
# Parent  6a6d2abe51ff78913838c0bb54a8468ebd9b3a58
catch octave_execution_exception for built-in and mex functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-02-15  John W. Eaton  <jwe@octave.org>
+
+	* ov-builtin.cc (octave_builtin::do_multi_index_op):
+	Catch possible octave_execution_exception.
+	* ov-mex-fcn.cc (octave_mex_function::do_multi_index_op): Likewise.
+	* ov.cc (do_binary_op, do_cat_op, do_unary_op,
+	octave_value::do_non_const_unary_op): Likewise.
+
 2008-02-14  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/balance.cc, DLD-FUNCTIONS/qz.cc:
 	Don't check f77_exception_encountered.
 
 	* sighandlers.cc (user_abort): If interrupting immediately, set
 	octave_interrupt_state if it is not already set.
 
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -96,17 +96,25 @@ octave_builtin::do_multi_index_op (int n
   else
     {
       unwind_protect::begin_frame ("builtin_func_eval");
 
       octave_call_stack::push (this);
 
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
-      retval = (*f) (args, nargout);
+      try
+	{
+	  retval = (*f) (args, nargout);
+	}
+      catch (octave_execution_exception)
+	{
+	  octave_exception_state = octave_no_exception;
+	  error ("caught execution error in library function");
+	}
 
       unwind_protect::run_frame ("builtin_func_eval");
     }
 
   return retval;
 }
 
 /*
diff --git a/src/ov-mex-fcn.cc b/src/ov-mex-fcn.cc
--- a/src/ov-mex-fcn.cc
+++ b/src/ov-mex-fcn.cc
@@ -138,17 +138,25 @@ octave_mex_function::do_multi_index_op (
   else
     {
       unwind_protect::begin_frame ("mex_func_eval");
 
       octave_call_stack::push (this);
 
       unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
-      retval = call_mex (have_fmex, mex_fcn_ptr, args, nargout, this);
+      try
+	{
+	  retval = call_mex (have_fmex, mex_fcn_ptr, args, nargout, this);
+	}
+      catch (octave_execution_exception)
+	{
+	  octave_exception_state = octave_no_exception;
+	  error ("caught execution error in library function");
+	}
 
       unwind_protect::run_frame ("mex_func_eval");
     }
 
   return retval;
 }
 
 /*
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1521,31 +1521,51 @@ do_binary_op (octave_value::binary_op op
 
   if (t1 == octave_class::static_type_id ()
       || t2 == octave_class::static_type_id ())
     {
       octave_value_typeinfo::binary_class_op_fcn f
 	= octave_value_typeinfo::lookup_binary_class_op (op);
 
       if (f)
-	retval = f (v1, v2);
+	{
+	  try
+	    {
+	      retval = f (v1, v2);
+	    }
+	  catch (octave_execution_exception)
+	    {
+	      octave_exception_state = octave_no_exception;
+	      error ("caught execution error in library function");
+	    }
+	}	    
       else
 	gripe_binary_op (octave_value::binary_op_as_string (op),
 			 v1.class_name (), v2.class_name ());
     }
   else
     {
       // FIXME -- we need to handle overloading operators for built-in
       // classes (double, char, int8, etc.)
 
       octave_value_typeinfo::binary_op_fcn f
 	= octave_value_typeinfo::lookup_binary_op (op, t1, t2);
 
       if (f)
-	retval = f (*v1.rep, *v2.rep);
+	{
+	  try
+	    {
+	      retval = f (*v1.rep, *v2.rep);
+	    }
+	  catch (octave_execution_exception)
+	    {
+	      octave_exception_state = octave_no_exception;
+	      error ("caught execution error in library function");
+	    }
+	}
       else
 	{
 	  octave_value tv1;
 	  octave_base_value::type_conv_fcn cf1 = v1.numeric_conversion_function ();
 
 	  if (cf1)
 	    {
 	      octave_base_value *tmp = cf1 (*v1.rep);
@@ -1585,17 +1605,27 @@ do_binary_op (octave_value::binary_op op
 	  else
 	    tv2 = v2;
 
 	  if (cf1 || cf2)
 	    {
 	      f = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
 
 	      if (f)
-		retval = f (*tv1.rep, *tv2.rep);
+		{
+		  try
+		    {
+		      retval = f (*tv1.rep, *tv2.rep);
+		    }
+		  catch (octave_execution_exception)
+		    {
+		      octave_exception_state = octave_no_exception;
+		      error ("caught execution error in library function");
+		    }
+		}
 	      else
 		gripe_binary_op (octave_value::binary_op_as_string (op),
 				 v1.type_name (), v2.type_name ());
 	    }
 	  else
 	    gripe_binary_op (octave_value::binary_op_as_string (op),
 			     v1.type_name (), v2.type_name ());
 	}
@@ -1632,17 +1662,27 @@ do_cat_op (const octave_value& v1, const
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
   octave_value_typeinfo::cat_op_fcn f
     = octave_value_typeinfo::lookup_cat_op (t1, t2);
 
   if (f)
-    retval = f (*v1.rep, *v2.rep, ra_idx);
+    {
+      try
+	{
+	  retval = f (*v1.rep, *v2.rep, ra_idx);
+	}
+      catch (octave_execution_exception)
+	{
+	  octave_exception_state = octave_no_exception;
+	  error ("caught execution error in library function");
+	}
+    }
   else
     {
       octave_value tv1;
       octave_base_value::type_conv_fcn cf1 = v1.numeric_conversion_function ();
 
       if (cf1)
 	{
 	  octave_base_value *tmp = cf1 (*v1.rep);
@@ -1682,17 +1722,27 @@ do_cat_op (const octave_value& v1, const
       else
 	tv2 = v2;
 
       if (cf1 || cf2)
 	{
 	  f = octave_value_typeinfo::lookup_cat_op (t1, t2);
 
 	  if (f)
-	    retval = f (*tv1.rep, *tv2.rep, ra_idx);
+	    {
+	      try
+		{
+		  retval = f (*tv1.rep, *tv2.rep, ra_idx);
+		}
+	      catch (octave_execution_exception)
+		{
+		  octave_exception_state = octave_no_exception;
+		  error ("caught execution error in library function");
+		}
+	    }
 	  else
 	    gripe_cat_op (v1.type_name (), v2.type_name ());
 	}
       else
 	gripe_cat_op (v1.type_name (), v2.type_name ());
     }
 
   return retval;
@@ -1729,31 +1779,51 @@ do_unary_op (octave_value::unary_op op, 
   int t = v.type_id ();
 
   if (t == octave_class::static_type_id ())
     {
       octave_value_typeinfo::unary_class_op_fcn f
 	= octave_value_typeinfo::lookup_unary_class_op (op);
 
       if (f)
-	retval = f (v);
+	{
+	  try
+	    {
+	      retval = f (v);
+	    }
+	  catch (octave_execution_exception)
+	    {
+	      octave_exception_state = octave_no_exception;
+	      error ("caught execution error in library function");
+	    }
+	}
       else
 	gripe_unary_op (octave_value::unary_op_as_string (op),
 			v.class_name ());
     }
   else
     {
       // FIXME -- we need to handle overloading operators for built-in
       // classes (double, char, int8, etc.)
 
       octave_value_typeinfo::unary_op_fcn f
 	= octave_value_typeinfo::lookup_unary_op (op, t);
 
       if (f)
-	retval = f (*v.rep);
+	{
+	  try
+	    {
+	      retval = f (*v.rep);
+	    }
+	  catch (octave_execution_exception)
+	    {
+	      octave_exception_state = octave_no_exception;
+	      error ("caught execution error in library function");
+	    }
+	}
       else
 	{
 	  octave_value tv;
 	  octave_base_value::type_conv_fcn cf
 	    = v.numeric_conversion_function ();
 
 	  if (cf)
 	    {
@@ -1762,17 +1832,27 @@ do_unary_op (octave_value::unary_op op, 
 	      if (tmp)
 		{
 		  tv = octave_value (tmp);
 		  t = tv.type_id ();
 
 		  f = octave_value_typeinfo::lookup_unary_op (op, t);
 
 		  if (f)
-		    retval = f (*tv.rep);
+		    {
+		      try
+			{
+			  retval = f (*tv.rep);
+			}
+		      catch (octave_execution_exception)
+			{
+			  octave_exception_state = octave_no_exception;
+			  error ("caught execution error in library function");
+			}
+		    }
 		  else
 		    gripe_unary_op (octave_value::unary_op_as_string (op),
 				    v.type_name ());
 		}
 	      else
 		gripe_unary_op_conv (octave_value::unary_op_as_string (op));
 	    }
 	  else
@@ -1801,17 +1881,25 @@ octave_value::do_non_const_unary_op (una
 
   octave_value_typeinfo::non_const_unary_op_fcn f
     = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
 
   if (f)
     {
       make_unique ();
 
-      f (*rep);
+      try
+	{
+	  f (*rep);
+	}
+      catch (octave_execution_exception)
+	{
+	  octave_exception_state = octave_no_exception;
+	  error ("caught execution error in library function");
+	}
     }
   else
     {
       octave_base_value::type_conv_fcn cf = numeric_conversion_function ();
 
       if (cf)
 	{
 	  octave_base_value *tmp = cf (*rep);
@@ -1822,17 +1910,25 @@ octave_value::do_non_const_unary_op (una
 	      rep = tmp;
 
 	      t = type_id ();
 
 	      f = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
 
 	      if (f)
 		{
-		  f (*rep);
+		  try
+		    {
+		      f (*rep);
+		    }
+		  catch (octave_execution_exception)
+		    {
+		      octave_exception_state = octave_no_exception;
+		      error ("caught execution error in library function");
+		    }
 
 		  if (old_rep && --old_rep->count == 0)
 		    delete old_rep;
 		}
 	      else
 		{
 		  if (old_rep)
 		    {
