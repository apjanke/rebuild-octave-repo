# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1419518923 -3600
#      Thu Dec 25 15:48:43 2014 +0100
# Branch gui-release
# Node ID be53bf42046484b69c75f59800f29419edf48e66
# Parent  3c038da18218b555740980460c2da0501949a42a
fix access to already removed editor window at exit

* file-editor.h: enable_menu_shortcuts is a slot, no ordinary function

* main-window.cc (focus_changed): emit new signal editor_focus_changed when
  editor gets or loses focus;
  (set_global_edit_shortcuts): boolean parameter is true when editor has focus,
  do not enable editor menus here;
  (construct): connect new signal editor_focus_changed to slot for setting
  global shortcuts and for dis- or enabling the editor menu

* main-window.h: new signal editor_focus_changed

diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -58,17 +58,16 @@ public:
   QToolBar *toolbar (void);
   void insert_new_open_actions (QAction*,QAction*,QAction*);
 
   void handle_enter_debug_mode (void);
   void handle_exit_debug_mode (void);
 
   void check_actions (void);
   void empty_script (bool startup, bool visible);
-  void enable_menu_shortcuts (bool enable);
 
 signals:
 
   void fetab_settings_changed (const QSettings *settings);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
   void fetab_save_file (const QWidget* ID, const QString& fileName,
@@ -109,17 +108,19 @@ signals:
   void fetab_zoom_out (const QWidget* ID);
   void fetab_zoom_normal (const QWidget* ID);
 
   void request_settings_dialog (const QString&);
   void execute_command_in_terminal_signal (const QString&);
   void file_loaded_signal ();
 
 public slots:
+
   void focus (void);
+  void enable_menu_shortcuts (bool);
   bool check_closing (int closing_state);
 
   void request_new_file (const QString& commands);
   void request_new_script (const QString& commands);
   void request_new_function (bool triggered = true);
   void request_open_file (void);
   void request_close_file (bool);
   void request_close_all_files (bool);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -186,19 +186,19 @@ main_window::focus_changed (QWidget *, Q
     {
       // signal to all dock widgets for updating the style
       emit active_dock_changed (_active_dock, dock);
 
       // if editor gets/loses focus, shortcuts and menus have to be updated
       octave_dock_widget *edit_dock_widget =
                         static_cast <octave_dock_widget *> (editor_window);
       if (edit_dock_widget == dock)
-        set_global_edit_shortcuts (false);
+        emit editor_focus_changed (true);
       else if (edit_dock_widget == _active_dock)
-        set_global_edit_shortcuts (true);
+        emit editor_focus_changed (false);
 
       _active_dock = dock;
     }
 }
 
 bool
 main_window::command_window_has_focus (void) const
 {
@@ -1273,16 +1273,22 @@ main_window::construct (void)
   construct_warning_bar ();
 
   connect (qApp, SIGNAL (aboutToQuit ()),
            this, SLOT (prepare_to_exit ()));
 
   connect (this, SIGNAL (settings_changed (const QSettings *)),
            this, SLOT (notice_settings (const QSettings *)));
 
+  connect (this, SIGNAL (editor_focus_changed (bool)),
+           this, SLOT (set_global_edit_shortcuts (bool)));
+
+  connect (this, SIGNAL (editor_focus_changed (bool)),
+           editor_window, SLOT (enable_menu_shortcuts (bool)));
+
   connect (file_browser_window, SIGNAL (load_file_signal (const QString&)),
            this, SLOT (handle_load_workspace_request (const QString&)));
 
   connect (file_browser_window, SIGNAL (find_files_signal (const QString&)),
            this, SLOT (find_files (const QString&)));
 
   connect_uiwidget_links ();
 
@@ -2307,40 +2313,37 @@ main_window::find_files (const QString &
 
 void
 main_window::find_files_finished (int)
 {
 
 }
 
 void
-main_window::set_global_edit_shortcuts (bool enable)
+main_window::set_global_edit_shortcuts (bool editor_has_focus)
 {
   // this slot is called when editor gets/loses focus
-  if (enable)
-    { // editor loses focus, set the global shortcuts
-      // and disable the editor's menu
-      shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
-      shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
-      shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
-      shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
-    }
-  else
+  if (editor_has_focus)
     { // disable shortcuts that are also provided by the editor itself
-      // and enable editor's menu
       QKeySequence no_key = QKeySequence ();
       _copy_action->setShortcut (no_key);
       _paste_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
       _select_all_action->setShortcut (no_key);
     }
-
-  // enable/disable the main and the editor's menu shortcuts (alt-key)
-  editor_window->enable_menu_shortcuts (! enable);
-  enable_menu_shortcuts (enable);
+  else
+    { // editor loses focus, set the global shortcuts
+      shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
+      shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
+      shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
+      shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
+    }
+
+  // dis-/enable global menu depending on editor's focus
+  enable_menu_shortcuts (! editor_has_focus);
 }
 
 void
 main_window::configure_shortcuts ()
 {
   // file menu
   shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
   shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -77,16 +77,17 @@ public:
 
   bool command_window_has_focus (void) const;
 
   void focus_command_window (void);
 
 signals:
 
   void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
+  void editor_focus_changed (bool);
 
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
   void show_doc_signal (const QString&);
 
