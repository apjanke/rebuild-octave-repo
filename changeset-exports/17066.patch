# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374732766 25200
#      Wed Jul 24 23:12:46 2013 -0700
# Node ID 328b579e08e9cf97bfd8a606141bc02864120a2e
# Parent  991e8a386aa353b939f0e7ea7d6b08e88467bb9c
mesh.m,meshc.m,meshz.m: Overhaul to use newplot and __plt_get_axis_arg__.

* scripts/plot/mesh.m: Call __plt_get_axis_arg__ and then newplot.
Fix typo in %!demo string.

* scripts/plot/meshc.m: Call __plt_get_axis_arg__ and then newplot.

* scripts/plot/meshz.m: Update to use new __plt_get_axis_arg__.

diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -41,29 +41,35 @@
 ## Author: jwe
 
 function h = mesh (varargin)
 
   if (! all (cellfun ("isreal", varargin)))
     error ("mesh: X, Y, Z, C arguments must be real");
   endif
 
-  newplot ();
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("mesh", varargin{:});
 
-  htmp = surface (varargin{:});
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
+  unwind_protect
+    hax = newplot (hax);
+    htmp = surface (hax, varargin{:});
 
-  ax = get (htmp, "parent");
+    set (htmp, "facecolor", "w");
+    set (htmp, "edgecolor", "flat");
 
-  set (htmp, "facecolor", "w");
-  set (htmp, "edgecolor", "flat");
-
-  if (! ishold ())
-    set (ax, "view", [-37.5, 30],
-         "xgrid", "on", "ygrid", "on", "zgrid", "on");
-  endif
+    if (! ishold ())
+      set (hax, "view", [-37.5, 30],
+               "xgrid", "on", "ygrid", "on", "zgrid", "on");
+    endif
+  unwind_protect_cleanup
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
+  end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
@@ -81,11 +87,11 @@ endfunction
 %! x = logspace (0,1,11);
 %! z = x'*x;
 %! mesh (x, x, z, z.^2);
 %! set (gca, 'zscale', 'log');
 %! xlabel 'X-axis';
 %! ylabel 'Y-axis';
 %! zlabel 'log scale';
 %! if (strcmp (get (gcf, '__graphics_toolkit__'), 'gnuplot'))
-%!   title ({'Gnuplot: mesh color is wrong', 'This a Gnuplot bug'});
+%!   title ({'Gnuplot: mesh color is wrong', 'This is a Gnuplot bug'});
 %! endif
 
diff --git a/scripts/plot/meshc.m b/scripts/plot/meshc.m
--- a/scripts/plot/meshc.m
+++ b/scripts/plot/meshc.m
@@ -28,37 +28,47 @@
 ## @end deftypefn
 
 function h = meshc (varargin)
 
   if (! all (cellfun ("isreal", varargin)))
     error ("meshc: X, Y, Z, C arguments must be real");
   endif
 
-  newplot ();
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("meshc", varargin{:});
 
-  htmp = surface (varargin{:});
-
-  ax = get (htmp, "parent");
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
+  unwind_protect
+    hax = newplot (hax);
 
-  set (htmp, "facecolor", "w");
-  set (htmp, "edgecolor", "flat");
-  ## FIXME - gnuplot does not support a filled surface and a
-  ## non-filled contour.  3D filled patches are also not supported.
-  ## Thus, the facecolor will be transparent for the gnuplot backend.
+    htmp = surface (hax, varargin{:});
+
+    ## FIXME - gnuplot does not support a filled surface and a
+    ## non-filled contour.  3D filled patches are also not supported.
+    ## Thus, the facecolor will be transparent for the gnuplot backend.
+    set (htmp, "facecolor", "w");
+    set (htmp, "edgecolor", "flat");
 
-  if (! ishold ())
-    set (ax, "view", [-37.5, 30],
-         "xgrid", "on", "ygrid", "on", "zgrid", "on");
-  endif
+    if (! ishold ())
+      set (hax, "view", [-37.5, 30],
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
+    endif
+
+    drawnow ();
+
+    zmin = get (hax, "zlim")(1);
 
-  drawnow ();
-  zmin = get (ax, "zlim")(1);
+    [~, htmp2] = __contour__ (hax, zmin, varargin{:});
+
+    htmp = [htmp; htmp2];
 
-  [~, htmp2] = __contour__ (ax, zmin, varargin{:});
-
-  htmp = [htmp; htmp2];
+  unwind_protect_cleanup
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
+  end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
+
diff --git a/scripts/plot/meshz.m b/scripts/plot/meshz.m
--- a/scripts/plot/meshz.m
+++ b/scripts/plot/meshz.m
@@ -28,17 +28,17 @@
 ## @end deftypefn
 
 function h = meshz (varargin)
 
   if (! all (cellfun ("isreal", varargin)))
     error ("meshz: X, Y, Z, C arguments must be real");
   endif
 
-  [ax, varargin, nargin] = __plt_get_axis_arg__ ("meshz", varargin{:});
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("meshz", varargin{:});
 
   ## Find where property/value pairs start
   charidx = find (cellfun ("isclass", varargin, "char"), 1);
 
   if (isempty (charidx))
     if (nargin == 2 || nargin == 4) 
       charidx = nargin;   # bundle C matrix back into varargin 
     else
@@ -67,24 +67,26 @@ function h = meshz (varargin)
     y = [y(1,1), y(1,:), y(1,end);
          y(:,1), y, y(:,end);
          y(end,1), y(end,:), y(end,end)];
   endif
 
   zref = min (z(isfinite (z)));
   z = [zref .* ones(1, columns(z) + 2);
        zref .* ones(rows(z), 1), z, zref .* ones(rows(z), 1);
-       zref.* ones(1, columns(z) + 2)];
+       zref .* ones(1, columns(z) + 2)];
 
-  oldax = gca ();
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
-    axes (ax);
-    htmp = mesh (x, y, z, varargin{charidx:end});
+    hax = newplot (hax);
+    htmp = mesh (hax, x, y, z, varargin{charidx:end});
   unwind_protect_cleanup
-    axes (oldax);
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
