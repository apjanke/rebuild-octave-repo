# HG changeset patch
# User jwe
# Date 942909511 0
#      Thu Nov 18 07:18:31 1999 +0000
# Node ID 34d512262892bb8083fd0bcded09592576039aab
# Parent  d2e12e998a785e0a05d5bfe6026d0ec308bab503
[project @ 1999-11-18 07:18:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+1999-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-lvalue.cc (octave_lvalue::set_index): Disallow expressions
+	like x(i)(j) = rhs.
+
 1999-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* symtab.cc (symbol_record::type_as_string): New function.
 
 	* symtab.cc (symbol_record::which): New functions.
 	* help.cc (do_which): New functions.
 	(Fwhich): Use them.
 
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -52,16 +52,28 @@ octave_lvalue::assign (octave_value::ass
 	val->assign_struct_elt (op, struct_elt_name, idx, rhs);
     }
 
   if (chg_fcn && ! error_state && chg_fcn () < 0)
     *val = saved_val;
 }
 
 void
+octave_lvalue::set_index (const octave_value_list& i)
+{
+  if (! index_set)
+    {
+      idx = i;
+      index_set = true;
+    }
+  else
+    error ("invalid index expression in assignment");
+}
+
+void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
 {
   octave_value saved_val;
 
   if (chg_fcn)
     saved_val = *val;
 
   if (idx.empty ())
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -32,34 +32,35 @@ class octave_value_list;
 #include "symtab.h"
 
 class
 octave_lvalue
 {
 public:
 
   octave_lvalue (octave_value *v = 0, symbol_record::change_function f = 0)
-    : val (v), idx (), chg_fcn (f), struct_elt_name () { }
+    : val (v), idx (), chg_fcn (f), struct_elt_name (), index_set (false) { }
 
   octave_lvalue (octave_value *v, const string& nm,
 		 symbol_record::change_function f = 0)
-    : val (v), idx (), chg_fcn (f), struct_elt_name (nm) { }
+    : val (v), idx (), chg_fcn (f), struct_elt_name (nm), index_set (false) { }
 
   octave_lvalue (const octave_lvalue& vr)
     : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
-      struct_elt_name (vr.struct_elt_name) { }
+      struct_elt_name (vr.struct_elt_name), index_set (vr.index_set) { }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
       if (this != &vr)
 	{
 	  val = vr.val;
 	  idx = vr.idx;
 	  chg_fcn = vr.chg_fcn;
 	  struct_elt_name = vr.struct_elt_name;
+	  index_set = vr.index_set;
 	}
 
       return *this;
     }
 
   ~octave_lvalue (void) { }
 
   bool is_defined (void) { return val->is_defined (); }
@@ -73,17 +74,17 @@ public:
   void assign (octave_value::assign_op, const octave_value&);
 
   octave_lvalue struct_elt_ref (const string& nm)
     {
       val->make_unique ();
       return val->struct_elt_ref (nm);
     }
 
-  void set_index (const octave_value_list& i) { idx = i; }
+  void set_index (const octave_value_list& i);
 
   void clear_index (void) { idx = octave_value_list (); }
 
   void do_unary_op (octave_value::unary_op op);
 
   octave_value value (void)
     {
       return struct_elt_name.empty ()
@@ -99,16 +100,18 @@ private:
 
   octave_value *val;
 
   octave_value_list idx;
 
   symbol_record::change_function chg_fcn;
 
   string struct_elt_name;
+
+  bool index_set;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
