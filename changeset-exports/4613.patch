# HG changeset patch
# User jwe
# Date 1068849979 0
#      Fri Nov 14 22:46:19 2003 +0000
# Node ID d1786f2d8a3c4b2d40e3a9892598de392bb96d3c
# Parent  d44675070f1a2e6e60ed54d7e89a19a2cad7590c
[project @ 2003-11-14 22:46:19 by jwe]

diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -162,25 +162,30 @@ incompatibilities and bugs.
 
 @item
 Mark Odegard @email{meo@@getech.com} provided the initial
 implementation of @code{fread}, @code{fwrite}, @code{feof}, and
 @code{ferror}.
 
 @item
 Gabriele Pannocchia  @email{pannocchia@@ing.unipi.it} provided the
-@code{dkalman.m} function and added support for singular system matrices
-to @code{dlqe} and @code{dlqr}.
+@code{dkalman.m} function, added support for singular system matrices
+to @code{dlqe} and @code{dlqr}, and has made various other
+improvements to the control system functions.
 
 @item
-Tony Richardson @email{richardson@@evansville.edu?} wrote Octave's
+Tony Richardson @email{richardson@@evansville.edu} wrote Octave's
 image processing functions as well as most of the original polynomial
 functions.
 
 @item
+Petter Risholm @email{Petter.Risholm@@idi.ntnu.no} helped to implement
+much of Octave's N-d array functionality.
+
+@item
 Ben Sapp @email{bsapp@@lanl.gov} implemented the debugger functions and
 added Texinfo markup commands to the internal doc strings.
 
 @item
 R. Bruce Tenison @email{btenison@@rstc.cc.al.us} wrote the
 @code{hess} and @code{schur} functions.
 
 @item
diff --git a/scripts/miscellaneous/path.m b/scripts/miscellaneous/path.m
--- a/scripts/miscellaneous/path.m
+++ b/scripts/miscellaneous/path.m
@@ -35,18 +35,18 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function p = path (varargin)
 
   if (nargin == 0)
     if (nargout == 0)
-      stdout << "\nLOADPATH contains the following directories:\n\n  ";
-      stdout << strrep (LOADPATH, ":", "\n  ") << "\n\n";
+      puts ("\nLOADPATH contains the following directories:\n\n  %s\n\n",
+	    strrep (DEFAULT_LOADPATH, ":", "\n  ");
     else
       p = LOADPATH;
     endif
   else
     p = varargin{1};
     for i = 2:nargin
       p = sprintf ("%s:%s", p, varargin{i});
     endfor
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,27 @@
 2003-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l (maybe_unput_comma, handle_close_bracket):
+	Don't insert comma if we are looking at an object index and the
+	closest nesting level is a brace.
+
+	* parse.y (postfix_expr): Use begin_obj_idx between postfix_expr
+	and the indexing delimiter rather than after it.
+
+	* lex.h (lexical_feedback::braceflag): New member variable.
+	* lex.l	(lexical_feedback::init): Initialize braceflag.
+	(\{{S}*): Increment lexer_flags.braceflag, not
+	lexer_flags.bracketflag.
+	(handle_close_bracket): Handle lexer_flags.braceflag and
+	lexer_flags.bracketflag separately based on bracket_type.
+	Delete unnecesary yyinput/yyunput.
+
+	* lex.l (next_token_is_postfix_unary_op): Also recognize ++ and --.
+
 	* ov-typeinfo.cc (octave_value_typeinfo::register_type,
 	octave_value_typeinfo::do_register_type):
 	New arg, c_name for class name.
 	* ov-base.cc, ov-bool-mat.cc, ov-bool.cc, ov-builtin.cc,
 	ov-cell.cc, ov-ch-mat.cc, ov-colon.cc, ov-complex.cc,
 	ov-cs-list.cc, ov-cx-mat.cc, ov-dld-fcn.cc, ov-fcn-handle.cc,
 	ov-file.cc, ov-list.cc, ov-mapper.cc, ov-range.cc, ov-re-mat.cc,
 	ov-scalar.cc, ov-str-mat.cc, ov-struct.cc, ov-usr-fcn.cc,
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -124,16 +124,19 @@ public:
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
   // Square bracket level count.
   int bracketflag;
 
+  // Curly brace level count.
+  int braceflag;
+
   // TRUE means we're in the middle of defining a loop.
   int looping;
 
   // TRUE means we think we are looking at the beginning of a
   // function definition.
   bool beginning_of_function;
 
   // Another context hack, this time for the plot command's `using',
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -749,17 +749,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     promptflag--;
     eat_whitespace ();
 
-    lexer_flags.bracketflag++;
+    lexer_flags.braceflag++;
     BEGIN (MATRIX_START);
     return '{';
   }
 
 "}" {
     nesting_level.remove ();
 
     TOK_RETURN ('}');
@@ -1503,16 +1503,28 @@ next_token_is_postfix_unary_op (bool spc
       un_op = true;
     }
   else if (c0 == '.')
     {
       int c1 = yyinput ();
       un_op = (c1 == '\'');
       yyunput (c1, yytext);
     }
+  else if (c0 == '+')
+    {
+      int c1 = yyinput ();
+      un_op = (c1 == '+');
+      yyunput (c1, yytext);
+    }
+  else if (c0 == '-')
+    {
+      int c1 = yyinput ();
+      un_op = (c1 == '-');
+      yyunput (c1, yytext);
+    }
 
   yyunput (c0, yytext);
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.
@@ -2229,64 +2241,68 @@ next_token_is_assign_op (void)
 static int
 handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
   int retval = bracket_type;
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
-      lexer_flags.bracketflag--;
+
+      if (bracket_type == ']')
+	lexer_flags.bracketflag--;
+      else if (bracket_type == '}')
+	lexer_flags.braceflag--;
+      else
+	panic_impossible ();
     }
 
-  if (lexer_flags.bracketflag == 0)
+  if (lexer_flags.bracketflag == 0 && lexer_flags.braceflag == 0)
     BEGIN (INITIAL);
 
   if (bracket_type == ']'
       && next_token_is_assign_op ()
       && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
-  else
+  else if ((lexer_flags.bracketflag || lexer_flags.braceflag)
+	   && lexer_flags.convert_spaces_to_comma
+	   && (nesting_level.is_bracket ()
+	       || (nesting_level.is_brace ()
+		   && ! lexer_flags.looking_at_object_index)))
     {
-      int c1 = yyinput ();
-      yyunput (c1, yytext);
-
-      if (lexer_flags.bracketflag)
+      int bin_op = next_token_is_bin_op (spc_gobbled);
+
+      int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
+
+      int sep_op = next_token_is_sep_op ();
+
+      if (! (postfix_un_op || bin_op || sep_op))
 	{
-	  int bin_op = next_token_is_bin_op (spc_gobbled);
-
-	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
-
-	  int sep_op = next_token_is_sep_op ();
-
-	  if (! (postfix_un_op || bin_op || sep_op)
-	      && nesting_level.is_bracket_or_brace ()
-	      && lexer_flags.convert_spaces_to_comma)
-	    {
-	      maybe_warn_separator_insert (',');
-
-	      yyunput (',', yytext);
-	      return retval;
-	    }
+	  maybe_warn_separator_insert (',');
+
+	  yyunput (',', yytext);
+	  return retval;
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
   lexer_flags.convert_spaces_to_comma = true;
 
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (nesting_level.is_bracket_or_brace ())
+  if (nesting_level.is_bracket ()
+      || (nesting_level.is_brace ()
+	  && ! lexer_flags.looking_at_object_index))
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
@@ -2494,16 +2510,19 @@ handle_identifier (void)
 }
 
 void
 lexical_feedback::init (void)
 {
   // Not initially defining a matrix list.
   bracketflag = 0;
 
+  // Not initially defining a cell array list.
+  braceflag = 0;
+
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   beginning_of_function = false;
   defining_func = false;
   parsed_function_name = false;
   parsing_nested_function = 0;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -726,32 +726,32 @@ indirect_ref_op	: '.'
 		;
 
 begin_obj_idx	: // empty
 		  { lexer_flags.looking_at_object_index++; }
 		;
 
 postfix_expr	: primary_expr
 		  { $$ = $1; }
-		| postfix_expr '(' begin_obj_idx ')'
+		| postfix_expr begin_obj_idx '(' ')'
 		  {
 		    $$ = make_index_expression ($1, 0, '(');
 		    lexer_flags.looking_at_object_index--;
 		  }
-		| postfix_expr '(' begin_obj_idx arg_list ')'
+		| postfix_expr begin_obj_idx '(' arg_list ')'
 		  {
 		    $$ = make_index_expression ($1, $4, '(');
 		    lexer_flags.looking_at_object_index--;
 		  }
-		| postfix_expr '{' begin_obj_idx '}'
+		| postfix_expr begin_obj_idx '{' '}'
 		  {
 		    $$ = make_index_expression ($1, 0, '{');
 		    lexer_flags.looking_at_object_index--;
 		  }
-		| postfix_expr '{' begin_obj_idx arg_list '}'
+		| postfix_expr begin_obj_idx '{' arg_list '}'
 		  {
 		    $$ = make_index_expression ($1, $4, '{');
 		    lexer_flags.looking_at_object_index--;
 		  }
 		| postfix_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| postfix_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
