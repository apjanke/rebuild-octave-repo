# HG changeset patch
# User Rik <rik@octave.org>
# Date 1536861897 25200
#      Thu Sep 13 11:04:57 2018 -0700
# Branch stable
# Node ID 49734a75561f14c23ed23a13cf6b47ef20d6cc40
# Parent  6e41caf35af76527f792b8b62583a244bd355732
doc: Wrap long lines in mkpp.m and unmkpp.m.

* mkpp.m, unmkpp.m: Wrap Texinfo lines to 80 characters.  Avoid breaking text
within @code{} block.

diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -32,21 +32,20 @@
 ## The i-th row of @var{coefs}, @code{@var{coefs}(@var{i},:)}, contains the
 ## coefficients for the polynomial over the @var{i}-th interval, ordered from
 ## highest (@var{m}) to lowest (@var{0}) degree.
 ##
 ## @var{coefs} may also be a multi-dimensional array, specifying a
 ## vector-valued or array-valued polynomial.  In that case the polynomial
 ## order @var{m} is defined by the length of the last dimension of @var{coefs}.
 ## The size of first dimension(s) are given by the scalar or vector @var{d}.
-## If @var{d} is not given it is set to @code{1}.
-## In this case @code{@var{p}(@var{r}, @var{i}, :)} contains the coefficients
-## for the @var{r}-th polynomial defined on interval @var{i}.
-## In any case @var{coefs} is reshaped to a 2-D matrix of size
-## @code{[@var{ni}*prod(@var{d}) @var{m}]}.
+## If @var{d} is not given it is set to @code{1}.  In this case
+## @code{@var{p}(@var{r}, @var{i}, :)} contains the coefficients for the
+## @var{r}-th polynomial defined on interval @var{i}.  In any case @var{coefs}
+## is reshaped to a 2-D matrix of size @code{[@var{ni}*prod(@var{d}) @var{m}]}.
 ##
 ## @seealso{unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 function pp = mkpp (x, P, d)
 
   ## check number of arguments
   if (nargin < 2 || nargin > 3)
@@ -85,17 +84,17 @@ endfunction
 
 %!demo # linear interpolation
 %! x = linspace (0, pi, 5)';
 %! t = [sin(x), cos(x)];
 %! m = diff (t) ./ (x(2)-x(1));
 %! b = t(1:4,:);
 %! pp = mkpp (x, [m(:),b(:)]);
 %! xi = linspace (0, pi, 50);
-%! plot (x, t, "x", xi, ppval (pp,xi));
+%! plot (x, t, "x", xi, ppval (pp,xi));bb4af245dff7
 %! legend ("control", "interp");
 
 %!demo # piecewise polynomial shape
 %! breaks = [0 1 2 3];
 %! dim = 2;
 %! coefs = zeros (dim, length (breaks) - 1, 4);
 %! # 1st edge of the shape (x, x^2)
 %! coefs(1,1,:) = [0 0 1 0];
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -28,33 +28,33 @@
 ## @example
 ## @group
 ## [breaks, coefs, numinter, order, dim] = unmkpp (pp);
 ## pp2  = mkpp (breaks, coefs, dim);
 ## @end group
 ## @end example
 ##
 ## The piecewise polynomial structure @code{pp2} obtained in this way, is
-## identical to the original @code{pp}.
-## The same can be obtained by directly accessing the fields of the structure
-## @code{pp}.
+## identical to the original @code{pp}.  The same can be obtained by directly
+## accessing the fields of the structure @code{pp}.
 ##
 ## The components are:
 ##
 ## @table @asis
 ## @item @var{x}
 ## Sample points or breaks.
 ##
 ## @item @var{p}
 ## Polynomial coefficients for points in sample interval.
 ## @code{@var{p}(@var{i}, :)} contains the coefficients for the polynomial
 ## over interval @var{i} ordered from highest to lowest degree.
 ## If @code{@var{d} > 1}, then @var{p} is a matrix of size
-## @code{[@var{n}*prod(@var{d}) @var{m}]}, where the @code{@var{i} + (1:@var{d})} rows are the
-## coefficients of all the @var{d} polynomials in the interval @var{i}.
+## @code{[@var{n}*prod(@var{d}) @var{m}]}, where the
+## @code{@var{i} + (1:@var{d})} rows are the coefficients of all the @var{d}
+## polynomials in the interval @var{i}.
 ##
 ## @item @var{n}
 ## Number of polynomial pieces or intervals,
 ## @code{@var{n} = length (@var{x}) - 1}.
 ##
 ## @item @var{k}
 ## Order of the polynomial plus 1.
 ##
