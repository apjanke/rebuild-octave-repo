# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519251065 18000
#      Wed Feb 21 17:11:05 2018 -0500
# Node ID 0aeef407b04ebb40735c5407cb088f89995af8cc
# Parent  504869574c895e02858723031bf8068461464aee
don't pass field width as separate argument in pr-output functions

* CDiagMatrix.h, dDiagMatrix.h, fCDiagMatrix.h, fDiagMatrix.h:
New typedefs for corresponding full matrix type.

* pr-output.h, pr-output.cc: Don't pass field width as separate
argument in format and print functions.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -461,23 +461,23 @@ const int pr_output_traits<float>::max_f
 
 // FIXME: it would be nice to share more code among these functions,..
 
 // Works for double and float.
 
 template <typename T>
 static inline float_display_format
 make_real_format (int digits, bool inf_or_nan,
-                  bool int_only, int& fw)
+                  bool int_only)
 {
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int ld, rd;
+  int fw, ld, rd;
 
   if (rat_format)
     {
       fw = 0;
       rd = 0;
     }
   else if (bank_format)
     {
@@ -560,42 +560,56 @@ make_real_format (int digits, bool inf_o
 
   return float_display_format (fmt);
 }
 
 // Works for double and float.
 
 template <typename T>
 float_display_format
-make_format (T val, int& fw)
+make_scalar_format (const T& val)
 {
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = (octave::math::isinf (val) || octave::math::isnan (val));
 
   bool int_only = (! inf_or_nan && octave::math::x_nint (val) == val);
 
   T val_abs = (val < 0 ? -val : val);
 
   int digits = (inf_or_nan || val_abs == 0) ? 0 : num_digits (val_abs);
 
-  return make_real_format<T> (digits, inf_or_nan, int_only, fw);
+  return make_real_format<T> (digits, inf_or_nan, int_only);
+}
+
+template <>
+float_display_format
+make_format (const double& d)
+{
+  return make_scalar_format (d);
+}
+
+template <>
+float_display_format
+make_format (const float& f)
+{
+  return make_scalar_format (f);
 }
 
 template <typename T>
 static inline float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
-                         int int_or_inf_or_nan, int& fw)
+                         int int_or_inf_or_nan)
 {
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int ld, rd;
+  int fw, ld, rd;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
@@ -706,17 +720,17 @@ make_real_matrix_format (int x_max, int 
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
 template <typename MT, typename ELT_T>
 static inline float_display_format
-make_format_internal (const MT& m, int& fw, ELT_T& scale)
+make_format_internal (const MT& m, ELT_T& scale)
 {
   assert (m.ndims () == 2);
 
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
@@ -729,42 +743,42 @@ make_format_internal (const MT& m, int& 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
   scale = ((x_max == 0 || int_or_inf_or_nan)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   return make_real_matrix_format<ELT_T> (x_max, x_min, inf_or_nan,
-                                         int_or_inf_or_nan, fw);
+                                         int_or_inf_or_nan);
 }
 
 float_display_format
-make_format (const Matrix& m, int& fw, double& scale)
+make_format (const Matrix& m, double& scale)
 {
-  return make_format_internal<Matrix, double> (m, fw, scale);
+  return make_format_internal<Matrix, double> (m, scale);
 }
 
 float_display_format
-make_format (const FloatMatrix& m, int& fw, float& scale)
+make_format (const FloatMatrix& m, float& scale)
 {
-  return make_format_internal<FloatMatrix, float> (m, fw, scale);
+  return make_format_internal<FloatMatrix, float> (m, scale);
 }
 
 template <typename T>
 static inline float_display_format
 make_complex_format (int x_max, int x_min, int r_x,
-                     bool inf_or_nan, int int_only, int& r_fw, int& i_fw)
+                     bool inf_or_nan, int int_only)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int ld, rd;
+  int i_fw, r_fw, ld, rd;
 
   if (rat_format)
     {
       i_fw = 0;
       r_fw = 0;
       rd = 0;
     }
   else if (bank_format)
@@ -903,17 +917,17 @@ make_complex_format (int x_max, int x_mi
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
   return float_display_format (r_fmt, i_fmt);
 }
 
 template <typename T>
 float_display_format
-make_format (const std::complex<T>& c, int& r_fw, int& i_fw)
+make_complex_scalar_format (const std::complex<T>& c)
 {
   if (free_format)
     return float_display_format ();
 
   T rp = c.real ();
   T ip = c.imag ();
 
   bool inf_or_nan = (octave::math::isinf (c) || octave::math::isnan (c));
@@ -938,32 +952,45 @@ make_format (const std::complex<T>& c, i
       x_min = i_x;
     }
   else
     {
       x_max = i_x;
       x_min = r_x;
     }
 
-  return make_complex_format<T> (x_max, x_min, r_x, inf_or_nan, int_only,
-                                 r_fw, i_fw);
+  return make_complex_format<T> (x_max, x_min, r_x, inf_or_nan, int_only);
+}
+
+template <>
+float_display_format
+make_format (const std::complex<double>& c)
+{
+  return make_complex_scalar_format (c);
+}
+
+template <>
+float_display_format
+make_format (const std::complex<float>& fc)
+{
+  return make_complex_scalar_format (fc);
 }
 
 template <typename T>
 static inline float_display_format
 make_complex_matrix_format (int x_max, int x_min, int r_x_max,
                             int r_x_min, bool inf_or_nan,
-                            int int_or_inf_or_nan, int& r_fw, int& i_fw)
+                            int int_or_inf_or_nan)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int ld, rd;
+  int i_fw, r_fw, ld, rd;
 
   if (rat_format)
     {
       i_fw = 9;
       r_fw = 9;
       rd = 0;
     }
   else if (bank_format)
@@ -1113,17 +1140,17 @@ make_complex_matrix_format (int x_max, i
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
   return float_display_format (r_fmt, i_fmt);
 }
 
 template <typename CMT, typename RMT, typename ELT_T>
 static inline float_display_format
-make_format_internal (const CMT& cm, int& r_fw, int& i_fw, ELT_T& scale)
+make_format_internal (const CMT& cm, ELT_T& scale)
 {
   if (free_format)
     return float_display_format ();
 
   RMT rp = real (cm);
   RMT ip = imag (cm);
 
   bool inf_or_nan = cm.any_element_is_inf_or_nan ();
@@ -1149,41 +1176,40 @@ make_format_internal (const CMT& cm, int
 
   int x_max = (r_x_max > i_x_max ? r_x_max : i_x_max);
   int x_min = (r_x_min > i_x_min ? r_x_min : i_x_min);
 
   scale = ((x_max == 0 || int_or_inf_or_nan)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
   return make_complex_matrix_format<ELT_T> (x_max, x_min, r_x_max, r_x_min,
-                                            inf_or_nan, int_or_inf_or_nan,
-                                            r_fw, i_fw);
+                                            inf_or_nan, int_or_inf_or_nan);
 }
 
 float_display_format
-make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale)
+make_format (const ComplexMatrix& cm, double& scale)
 {
-  return make_format_internal<ComplexMatrix, Matrix, double> (cm, r_fw, i_fw, scale);
+  return make_format_internal<ComplexMatrix, Matrix, double> (cm, scale);
 }
 
 float_display_format
-make_format (const FloatComplexMatrix& cm, int& r_fw, int& i_fw, float& scale)
+make_format (const FloatComplexMatrix& cm, float& scale)
 {
-  return make_format_internal<FloatComplexMatrix, FloatMatrix, float> (cm, r_fw, i_fw, scale);
+  return make_format_internal<FloatComplexMatrix, FloatMatrix, float> (cm, scale);
 }
 
 template <typename T>
 static inline float_display_format
-make_range_format (int x_max, int x_min, int all_ints, int& fw)
+make_range_format (int x_max, int x_min, int all_ints)
 {
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
-  int ld, rd;
+  int fw, ld, rd;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
   else if (bank_format)
     {
@@ -1281,17 +1307,17 @@ make_range_format (int x_max, int x_min,
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
 float_display_format
-make_format (const Range& r, int& fw, double& scale)
+make_format (const Range& r, double& scale)
 {
   if (free_format)
     return float_display_format ();
 
   double r_min = r.base ();
   double r_max = r.limit ();
 
   if (r_max < r_min)
@@ -1308,17 +1334,17 @@ make_format (const Range& r, int& fw, do
 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
   scale = ((x_max == 0 || all_ints)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
-  return make_range_format<double> (x_max, x_min, all_ints, fw);
+  return make_range_format<double> (x_max, x_min, all_ints);
 }
 
 template <typename T>
 union equiv
 {
   T val;
   unsigned char i[sizeof (T)];
 };
@@ -1356,24 +1382,26 @@ union equiv
       stmp[7] = (ctmp & 0x80) ? '1' : '0';      \
       stmp[8] = '\0';                           \
       os << stmp;                               \
     }                                           \
   while (0)
 
 template <typename T>
 static inline void
-pr_any_float (std::ostream& os, const float_format& fmt, T val, int fw = 0)
+pr_any_float (std::ostream& os, const float_format& fmt, T val)
 {
   // Unless explicitly asked for, always print in big-endian format
   // for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
+  int fw = fmt.fw;
+
   if (hex_format)
     {
       octave::preserve_stream_state stream_state (os);
 
       equiv<T> tmp;
       tmp.val = val;
 
       // Unless explicitly asked for, always print in big-endian format.
@@ -1466,63 +1494,61 @@ pr_any_float (std::ostream& os, const fl
     os << pr_engineering_float<T> (fmt, val);
   else
     os << pr_formatted_float<T> (fmt, val);
 }
 
 template <typename T>
 static inline void
 pr_float (std::ostream& os, const float_display_format& fmt, T val,
-          int fw = 0, T scale = 1)
+          T scale = 1)
 {
   if (Vfixed_point_format && ! print_g && scale != 1)
     val /= scale;
 
-  pr_any_float (os, fmt.real_format (), val, fw);
+  pr_any_float (os, fmt.real_format (), val);
 }
 
 template <typename T>
 static inline void
-pr_imag_float (std::ostream& os, const float_display_format& fmt,
-               T val, int fw = 0)
+pr_imag_float (std::ostream& os, const float_display_format& fmt, T val)
 {
-  pr_any_float (os, fmt.imag_format (), val, fw);
+  pr_any_float (os, fmt.imag_format (), val);
 }
 
 template <typename T>
 static inline void
 pr_complex (std::ostream& os, const float_display_format& fmt,
-            const std::complex<T>& cval, int r_fw = 0, int i_fw = 0,
-            T scale = 1)
+            const std::complex<T>& cval, T scale = 1)
 {
   std::complex<T> tmp
     = ((Vfixed_point_format && ! print_g && scale != 1)
        ? cval / scale : cval);
 
   T r = tmp.real ();
 
-  pr_float (os, fmt, r, r_fw);
+  pr_float (os, fmt, r);
 
   if (! bank_format)
     {
       T i = tmp.imag ();
       if (! (hex_format || bit_format) && lo_ieee_signbit (i))
         {
           os << " - ";
           i = -i;
-          pr_imag_float (os, fmt, i, i_fw);
+          pr_imag_float (os, fmt, i);
         }
       else
         {
           if (hex_format || bit_format)
             os << "  ";
           else
             os << " + ";
 
-          pr_imag_float (os, fmt, i, i_fw);
+          pr_imag_float (os, fmt, i);
         }
       os << 'i';
     }
 }
 
 static inline void
 print_empty_matrix (std::ostream& os, octave_idx_type nr, octave_idx_type nc,
                     bool pr_as_read_syntax)
@@ -1624,57 +1650,50 @@ pr_plus_format (std::ostream& os, const 
   else
     os << plus_format_chars[2];
 }
 
 template <>
 float_display_format
 make_format (const Range& rng)
 {
-  int fw = 0;
   double scale = 0;
-  return make_format (rng, fw, scale);
+  return make_format (rng, scale);
 }
 
 template <>
 float_display_format
 make_format (const NDArray& nda)
 {
-  int fw = 0;
   double scale = 0;
-  return make_format (Matrix (nda), fw, scale);
+  return make_format (Matrix (nda), scale);
 }
 
 template <>
 float_display_format
 make_format (const FloatNDArray& nda)
 {
-  int fw = 0;
   float scale = 0;
-  return make_format (FloatMatrix (nda), fw, scale);
+  return make_format (FloatMatrix (nda), scale);
 }
 
 template <>
 float_display_format
 make_format (const ComplexNDArray& nda)
 {
-  int r_fw = 0;
-  int i_fw = 0;
   double scale = 0;
-  return make_format (ComplexMatrix (nda), r_fw, i_fw, scale);
+  return make_format (ComplexMatrix (nda), scale);
 }
 
 template <>
 float_display_format
 make_format (const FloatComplexNDArray& nda)
 {
-  int r_fw = 0;
-  int i_fw = 0;
   float scale = 0;
-  return make_format (FloatComplexMatrix (nda), r_fw, i_fw, scale);
+  return make_format (FloatComplexMatrix (nda), scale);
 }
 
 template <>
 float_display_format
 make_format (const boolNDArray&)
 {
   return float_display_format (float_format (1, 1));
 }
@@ -1743,50 +1762,16 @@ MAKE_INT_MATRIX_FORMAT (octave_int8)
 MAKE_INT_MATRIX_FORMAT (octave_uint8)
 MAKE_INT_MATRIX_FORMAT (octave_int16)
 MAKE_INT_MATRIX_FORMAT (octave_uint16)
 MAKE_INT_MATRIX_FORMAT (octave_int32)
 MAKE_INT_MATRIX_FORMAT (octave_uint32)
 MAKE_INT_MATRIX_FORMAT (octave_int64)
 MAKE_INT_MATRIX_FORMAT (octave_uint64)
 
-template <>
-float_display_format
-make_format (const double& d)
-{
-  int fw = 0;
-  return make_format (d, fw);
-}
-
-template <>
-float_display_format
-make_format (const float& f)
-{
-  int fw = 0;
-  return make_format (f, fw);
-}
-
-template <>
-float_display_format
-make_format (const Complex& c)
-{
-  int r_fw = 0;
-  int i_fw = 0;
-  return make_format (c, r_fw, i_fw);
-}
-
-template <>
-float_display_format
-make_format (const FloatComplex& c)
-{
-  int r_fw = 0;
-  int i_fw = 0;
-  return make_format (c, r_fw, i_fw);
-}
-
 #define MAKE_INT_SCALAR_FORMAT(TYPE)                                    \
   template <>                                                           \
   float_display_format                                                  \
   make_format (const octave_int<TYPE>& val)                             \
   {                                                                     \
     bool isneg = false;                                                 \
     int digits                                                          \
       = static_cast<int>                                                \
@@ -1913,19 +1898,19 @@ octave_print_real_matrix_internal (std::
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
-      int fw = 0;
       typename MT::element_type scale = 1;
-      float_display_format fmt = make_format (m, fw, scale);
+      float_display_format fmt = make_format (m, scale);
+      int fw = fmt.real_format().fw;
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
         max_width -= extra_indent;
@@ -2005,17 +1990,17 @@ octave_print_real_matrix_internal (std::
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_float (os, fmt, m(i,j), fw, scale);
+                      pr_float (os, fmt, m(i,j), scale);
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -2030,19 +2015,20 @@ octave_print_real_diag_matrix_internal (
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
-      int fw;
       typename DMT::element_type scale = 1;
-      float_display_format fmt = make_format (Matrix (m.diag ()), fw, scale);
+      float_display_format fmt
+        = make_format (typename DMT::full_matrix_type (m.diag ()), scale);
+      int fw = fmt.real_format().fw;
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
         max_width -= extra_indent;
@@ -2109,17 +2095,17 @@ octave_print_real_diag_matrix_internal (
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
             typename DMT::element_type zero = 0;
-            pr_float (tmp_oss, fmt, zero, fw, scale);
+            pr_float (tmp_oss, fmt, zero, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2131,17 +2117,17 @@ octave_print_real_diag_matrix_internal (
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_float (os, fmt, m(i,j), fw, scale);
+                        pr_float (os, fmt, m(i,j), scale);
                       else
                         os << std::setw (zero_fw) << '0';
 
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
@@ -2325,19 +2311,20 @@ octave_print_complex_matrix_internal (st
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
-      int r_fw, i_fw;
       typename MT::real_elt_type scale = 1;
-      float_display_format fmt = make_format (cm, r_fw, i_fw, scale);
+      float_display_format fmt = make_format (cm, scale);
+      int r_fw = fmt.real_format().fw;
+      int i_fw = fmt.imag_format().fw;
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
@@ -2419,17 +2406,17 @@ octave_print_complex_matrix_internal (st
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_complex (os, fmt, cm(i,j), r_fw, i_fw, scale);
+                      pr_complex (os, fmt, cm(i,j), scale);
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -2444,20 +2431,21 @@ octave_print_complex_diag_matrix_interna
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
-      int r_fw, i_fw;
       typename DMT::real_elt_type scale = 1;
       float_display_format fmt
-        = make_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
+        = make_format (typename DMT::full_matrix_type (cm.diag ()), scale);
+      int r_fw = fmt.real_format().fw;
+      int i_fw = fmt.imag_format().fw;
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
@@ -2526,17 +2514,17 @@ octave_print_complex_diag_matrix_interna
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
             typename DMT::element_type zero = 0;
-            pr_complex (tmp_oss, fmt, zero, r_fw, i_fw, scale);
+            pr_complex (tmp_oss, fmt, zero, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2548,17 +2536,17 @@ octave_print_complex_diag_matrix_interna
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_complex (os, fmt, cm(i,j), r_fw, i_fw, scale);
+                        pr_complex (os, fmt, cm(i,j), scale);
                       else
                         os << std::setw (zero_fw) << '0';
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
@@ -2784,46 +2772,45 @@ octave_print_internal (std::ostream& os,
   double increment = r.inc ();
   double limit = r.limit ();
   octave_idx_type num_elem = r.numel ();
 
   if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, r);
   else
     {
-      int fw = 0;
       double scale = 1;
-      float_display_format fmt = make_format (r, fw, scale);
+      float_display_format fmt = make_format (r, scale);
 
       if (pr_as_read_syntax)
         {
           if (free_format)
             {
               os << base << " : ";
               if (increment != 1)
                 os << increment << " : ";
               os << limit;
             }
           else
             {
-              pr_float (os, fmt, base, fw);
+              pr_float (os, fmt, base);
               os << " : ";
               if (increment != 1)
                 {
-                  pr_float (os, fmt, increment, fw);
+                  pr_float (os, fmt, increment);
                   os << " : ";
                 }
-              pr_float (os, fmt, limit, fw);
+              pr_float (os, fmt, limit);
             }
         }
       else
         {
           octave::preserve_stream_state stream_state (os);
 
-          int column_width = fw + 2;
+          int column_width = fmt.real_format().fw + 2;
           octave_idx_type total_width = num_elem * column_width;
           octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
           if (free_format)
             {
               os << ' ';
               for (octave_idx_type i = 0; i < num_elem; i++)
                 os << ' ' << r.elem(i);
@@ -2870,17 +2857,17 @@ octave_print_internal (std::ostream& os,
                       // See the comments in Range::matrix_value.
                       if ((increment > 0 && val >= limit)
                           || (increment < 0 && val <= limit))
                         val = limit;
                     }
 
                   os << "  ";
 
-                  pr_float (os, fmt, val, fw, scale);
+                  pr_float (os, fmt, val, scale);
                 }
 
               col += inc;
             }
         }
     }
 }
 
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -52,43 +52,59 @@ class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
 extern float_display_format
-make_format (const Matrix& m, int& fw, double& scale);
+make_format (const Matrix& m, double& scale);
 
 extern float_display_format
-make_format (const FloatMatrix& m, int& fw, float& scale);
+make_format (const FloatMatrix& m, float& scale);
 
 template <typename T>
-extern float_display_format
-make_format (const std::complex<T>& c, int& r_fw, int& i_fw);
+float_display_format
+make_format (const std::complex<T>& c);
 
 extern float_display_format
-make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
+make_format (const ComplexMatrix& cm, double& scale);
 
 extern float_display_format
-make_format (const FloatComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
+make_format (const FloatComplexMatrix& cm, double& scale);
 
 extern float_display_format
-make_format (const Range& r, int& fw, double& scale);
+make_format (const Range& r, double& scale);
 
-template <typename MT>
+template <typename T>
 float_display_format
-make_format (const MT&)
+make_format (const T&)
 {
   return float_display_format ();
 }
 
 template <>
 float_display_format
+make_format (const double& d);
+
+template <>
+float_display_format
+make_format (const float& f);
+
+template <>
+float_display_format
+make_format (const std::complex<double>& c);
+
+template <>
+float_display_format
+make_format (const std::complex<float>& fc);
+
+template <>
+float_display_format
 make_format (const Range& r);
 
 template <>
 float_display_format
 make_format (const NDArray& nda);
 
 template <>
 float_display_format
@@ -135,32 +151,16 @@ float_display_format
 make_format (const intNDArray<octave_uint32>& nda);
 
 template <>
 float_display_format
 make_format (const intNDArray<octave_uint64>& nda);
 
 template <>
 float_display_format
-make_format (const double& d);
-
-template <>
-float_display_format
-make_format (const float& f);
-
-template <>
-float_display_format
-make_format (const Complex& c);
-
-template <>
-float_display_format
-make_format (const FloatComplex& c);
-
-template <>
-float_display_format
 make_format (const octave_int8& nda);
 
 template <>
 float_display_format
 make_format (const octave_int16& nda);
 
 template <>
 float_display_format
diff --git a/liboctave/array/CDiagMatrix.h b/liboctave/array/CDiagMatrix.h
--- a/liboctave/array/CDiagMatrix.h
+++ b/liboctave/array/CDiagMatrix.h
@@ -34,16 +34,18 @@ along with Octave; see the file COPYING.
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 ComplexDiagMatrix : public MDiagArray2<Complex>
 {
 public:
 
+  typedef ComplexMatrix full_matrix_type;
+
   typedef double real_elt_type;
   typedef Complex complex_elt_type;
   typedef Complex element_type;
 
   ComplexDiagMatrix (void) : MDiagArray2<Complex> () { }
 
   ComplexDiagMatrix (octave_idx_type r, octave_idx_type c)
     : MDiagArray2<Complex> (r, c) { }
diff --git a/liboctave/array/dDiagMatrix.h b/liboctave/array/dDiagMatrix.h
--- a/liboctave/array/dDiagMatrix.h
+++ b/liboctave/array/dDiagMatrix.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 DiagMatrix : public MDiagArray2<double>
 {
 public:
 
+  typedef Matrix full_matrix_type;
+
   DiagMatrix (void) : MDiagArray2<double> () { }
 
   DiagMatrix (octave_idx_type r, octave_idx_type c)
     : MDiagArray2<double> (r, c) { }
 
   DiagMatrix (octave_idx_type r, octave_idx_type c, double val)
     : MDiagArray2<double> (r, c, val) { }
 
diff --git a/liboctave/array/fCDiagMatrix.h b/liboctave/array/fCDiagMatrix.h
--- a/liboctave/array/fCDiagMatrix.h
+++ b/liboctave/array/fCDiagMatrix.h
@@ -34,16 +34,18 @@ along with Octave; see the file COPYING.
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
 {
 public:
 
+  typedef FloatComplexMatrix full_matrix_type;
+
   typedef float real_elt_type;
   typedef FloatComplex complex_elt_type;
   typedef FloatComplex element_type;
 
   FloatComplexDiagMatrix (void) : MDiagArray2<FloatComplex> () { }
 
   FloatComplexDiagMatrix (octave_idx_type r,
                           octave_idx_type c)
diff --git a/liboctave/array/fDiagMatrix.h b/liboctave/array/fDiagMatrix.h
--- a/liboctave/array/fDiagMatrix.h
+++ b/liboctave/array/fDiagMatrix.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatDiagMatrix : public MDiagArray2<float>
 {
 public:
 
+  typedef FloatMatrix full_matrix_type;
+
   FloatDiagMatrix (void) : MDiagArray2<float> () { }
 
   FloatDiagMatrix (octave_idx_type r, octave_idx_type c)
     : MDiagArray2<float> (r, c) { }
 
   FloatDiagMatrix (octave_idx_type r, octave_idx_type c, float val)
     : MDiagArray2<float> (r, c, val) { }
 
