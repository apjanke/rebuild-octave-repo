# HG changeset patch
# User Olaf Till <i7tiol@t-online.de>
# Date 1372700991 -7200
#      Mon Jul 01 19:49:51 2013 +0200
# Node ID dd783018709b626611c6359c46166261a0d0cad6
# Parent  234519448e7614961c2bc759134b1acf4cf3e03f
Add special case function "isnumeric" to cellfun.cc (bug #39387).

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -128,16 +128,23 @@ try_cellfun_internal_ops (const octave_v
     }
   else if (name == "islogical")
     {
       boolNDArray result (f_args.dims ());
       for (octave_idx_type  count= 0; count < k; count++)
         result(count) = f_args.elem (count).is_bool_type ();
       retval(0) = result;
     }
+  else if (name == "isnumeric")
+    {
+      boolNDArray result (f_args.dims ());
+      for (octave_idx_type  count= 0; count < k; count++)
+        result(count) = f_args.elem (count).is_numeric_type ();
+      retval(0) = result;
+    }
   else if (name == "isreal")
     {
       boolNDArray result (f_args.dims ());
       for (octave_idx_type  count= 0; count < k; count++)
         result(count) = f_args.elem (count).is_real_type ();
       retval(0) = result;
     }
   else if (name == "length")
@@ -273,16 +280,19 @@ individually.  The function @var{name} c
 \n\
 @table @code\n\
 @item isempty\n\
 Return 1 for empty elements.\n\
 \n\
 @item islogical\n\
 Return 1 for logical elements.\n\
 \n\
+@item isnumeric\n\
+Return 1 for numeric elements.\n\
+\n\
 @item isreal\n\
 Return 1 for real elements.\n\
 \n\
 @item length\n\
 Return a vector of the lengths of cell elements.\n\
 \n\
 @item ndims\n\
 Return the number of dimensions of each element.\n\
@@ -773,27 +783,30 @@ v = cellfun (@@det, a); # faster\n\
 %!test
 %! A = cellfun (@islogical, {true, 0.1, false, i*2});
 %! assert (A, [true, false, true, false]);
 %!test
 %! A = cellfun (@(x) islogical (x), {true, 0.1, false, i*2});
 %! assert (A, [true, false, true, false]);
 
 %% First input argument can be the special string "isreal",
-%% "isempty", "islogical", "length", "ndims" or "prodofsize"
+%% "isempty", "islogical", "isnumeric", "length", "ndims" or "prodofsize"
 %!test
 %! A = cellfun ("isreal", {true, 0.1, {}, i*2, [], "abc"});
 %! assert (A, [true, true, false, false, true, true]);
 %!test
 %! A = cellfun ("isempty", {true, 0.1, false, i*2, [], "abc"});
 %! assert (A, [false, false, false, false, true, false]);
 %!test
 %! A = cellfun ("islogical", {true, 0.1, false, i*2, [], "abc"});
 %! assert (A, [true, false, true, false, false, false]);
 %!test
+%! A = cellfun ("isnumeric", {true, 0.1, false, i*2, [], "abc"});
+%! assert (A, [false, true, false, true, true, false]);
+%!test
 %! A = cellfun ("length", {true, 0.1, false, i*2, [], "abc"});
 %! assert (A, [1, 1, 1, 1, 0, 3]);
 %!test
 %! A = cellfun ("ndims", {[1, 2; 3, 4]; (cell (1,2,3,4))});
 %! assert (A, [2; 4]);
 %!test
 %! A = cellfun ("prodofsize", {[1, 2; 3, 4], (cell (1,2,3,4))});
 %! assert (A, [4, 24]);
@@ -984,16 +997,17 @@ v = cellfun (@@det, a); # faster\n\
 %! assert (A.index, 1);
 
 %% A lot of other tests
 %!assert (cellfun (@sin, {0,1}), sin ([0,1]))
 %!assert (cellfun (inline ("sin (x)"), {0,1}), sin ([0,1]))
 %!assert (cellfun ("sin", {0,1}), sin ([0,1]))
 %!assert (cellfun ("isempty", {1,[]}), [false,true])
 %!assert (cellfun ("islogical", {false,pi}), [true,false])
+%!assert (cellfun ("isnumeric", {false,pi,struct()}), [false,true,false])
 %!assert (cellfun ("isreal", {1i,1}), [false,true])
 %!assert (cellfun ("length", {zeros(2,2),1}), [2,1])
 %!assert (cellfun ("prodofsize", {zeros(2,2),1}), [4,1])
 %!assert (cellfun ("ndims", {zeros([2,2,2]),1}), [3,2])
 %!assert (cellfun ("isclass", {zeros([2,2,2]),"test"}, "double"), [true,false])
 %!assert (cellfun ("size", {zeros([1,2,3]),1}, 1), [1,1])
 %!assert (cellfun ("size", {zeros([1,2,3]),1}, 2), [2,1])
 %!assert (cellfun ("size", {zeros([1,2,3]),1}, 3), [3,1])
