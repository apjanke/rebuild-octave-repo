# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458367698 25200
#      Fri Mar 18 23:08:18 2016 -0700
# Node ID 2d71bb0011a08814b3ac412db4bb148c3bdd0be3
# Parent  5d69326e8cc5dc62d79dd6661334d9a009f1570b
textscan: Use empty () rather than 'length () == 0' on strings

* textscan.cc (textscan_format_list::textscan_format_list,
textscan_format_list::read_first_row, textscan::scan_one,
textscan::parse_options): Use empty () instead of checking length () for
clarity.
* textscan.h (textscan::is_delim, textscan::whitespace_delim): Likewise.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -624,17 +624,17 @@ textscan_format_list::textscan_format_li
   unsigned int width = -1;              // Unspecified width = max (except %c)
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
   char type = '\0';
 
   bool have_more = true;
 
-  if (s.length () == 0)
+  if (s.empty ())
     {
       buf = new std::ostringstream ("%f");
       bitwidth = 64;
       type = 'f';
       add_elt_to_list (width, prec, bitwidth, octave_value (NDArray ()),
                        discard, type);
       have_more = false;
       set_from_first = true;
@@ -1123,17 +1123,17 @@ textscan_format_list::printme (void) con
 int
 textscan_format_list::read_first_row (delimited_stream& is, textscan& ts)
 {
   // Read first line and strip end-of-line, which may be two characters
   std::string first_line (20, ' ');
 
   is.getline (first_line, static_cast<char> (ts.eol2));
 
-  if (first_line.length () > 0
+  if (! first_line.empty ()
       && first_line[first_line.length () - 1] == ts.eol1)
     first_line.resize (first_line.length () - 1);
 
   std::istringstream strstr (first_line);
   delimited_stream ds (strstr, is);
 
   dim_vector dv (1,1);      // initial size of each output_container
   Complex val;
@@ -2158,17 +2158,17 @@ textscan::scan_one (delimited_stream& is
           break;
         }
 
       if (! fmt.discard)
         ov.internal_rep ()->fast_elem_insert (row (0),
                                               Cell (octave_value (vv)));
 
       // FIXME -- why does failbit get set at EOF, instead of eofbit?
-      if (vv.length () != 0)
+      if (! vv.empty ())
         is.clear (is.rdstate () & ~std::ios_base::failbit);
     }
 
   is.field_done ();
 }
 
 // Read data corresponding to the entire format string once, placing the
 // values in row ROW of retval.
@@ -2492,17 +2492,17 @@ textscan::parse_options (const octave_va
     }
 
   whitespace_table = std::string (256, '\0');
   for (unsigned int i = 0; i < whitespace.length (); i++)
     whitespace_table[whitespace[i]] = '1';
 
   // For Matlab compatibility, add 0x20 to whitespace, unless
   // whitespace is explicitly ignored.
-  if (! (whitespace.length () == 0 && fmt_list.has_string))
+  if (! (whitespace.empty () && fmt_list.has_string))
     whitespace_table[' '] = '1';
 
   // Create look-up table of delimiters, based on 'delimiter'
   delim_table = std::string (256, '\0');
   if (eol1 >= 0 && eol1 < 256)
     delim_table[eol1] = '1';        // EOL is always a delimiter
   if (eol2 >= 0 && eol2 < 256)
     delim_table[eol2] = '1';        // EOL is always a delimiter
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -169,25 +169,24 @@ private:
   bool match_literal (delimited_stream& isp, const textscan_format_elt& elem);
 
   int  skip_whitespace (delimited_stream& is, bool EOLstop = false);
 
   int  skip_delim (delimited_stream& is);
 
   bool is_delim (unsigned char ch) const
   {
-    return ((delim_table.length () == 0
-             && (isspace (ch) || ch == eol1 || ch == eol2))
+    return ((delim_table.empty () && (isspace (ch) || ch == eol1 || ch == eol2))
             || delim_table[ch] != '\0');
   }
 
   bool isspace (unsigned int ch) const { return whitespace_table[ch & 0xff]; }
 
   // True if the only delimiter is whitespace.
-  bool whitespace_delim (void) const { return delim_table.length () == 0; }
+  bool whitespace_delim (void) const { return delim_table.empty (); }
 
   // No copying!
 
   textscan (const textscan&);
 
   textscan& operator = (const textscan&);
 };
 
