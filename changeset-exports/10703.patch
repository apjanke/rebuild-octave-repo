# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1276519991 -7200
#      Mon Jun 14 14:53:11 2010 +0200
# Node ID 5eb420d923077126b2d1e066734351b3d0559f80
# Parent  c49911ab7ac7ff9dd5846e110cf0c28075bd58cb
fix sort and nth_element when trailing singleton dim is specified

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1677,30 +1677,33 @@ sort_isnan (typename ref_param<T>::type)
 {
   return false;
 }
 
 template <class T>
 Array<T>
 Array<T>::sort (int dim, sortmode mode) const
 {
-  if (dim < 0 || dim >= ndims ())
+  if (dim < 0)
     {
       (*current_liboctave_error_handler)
         ("sort: invalid dimension");
       return Array<T> ();
     }
 
   Array<T> m (dims ());
 
   dim_vector dv = m.dims ();
 
   if (m.length () < 1)
     return m;
 
+  if (dim >= dv.length ())
+    dv.resize (dim+1, 1);
+
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
 
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
@@ -2223,24 +2226,27 @@ Array<T>::find (octave_idx_type n, bool 
 
   return retval;
 }
 
 template <class T>
 Array<T>
 Array<T>::nth_element (const idx_vector& n, int dim) const
 {
-  if (dim < 0 || dim >= ndims ())
+  if (dim < 0)
     {
       (*current_liboctave_error_handler)
         ("nth_element: invalid dimension");
       return Array<T> ();
     }
 
   dim_vector dv = dims ();
+  if (dim >= dv.length ())
+    dv.resize (dim+1, 1);
+
   octave_idx_type ns = dv(dim);
 
   octave_idx_type nn = n.length (ns);
 
   dv(dim) = std::min (nn, ns);
   dv.chop_trailing_singletons ();
 
   Array<T> m (dv);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-06-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array::sort, Array::nth_element): Fix behavior when
+	trailing singleton dim is specified.
+	* Sparse.cc (Sparse::sort): Ditto.
+
 2010-06-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::copy_data): Handle class_mask case.
 	(idx_vector::increment): Fix class_colon and add class_mask.
 
 2010-06-06  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* mx-op-defs.h (MNANCHK): Add matrix element type argument and use it
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2045,17 +2045,17 @@ template <class T>
 Sparse<T>
 Sparse<T>::sort (octave_idx_type dim, sortmode mode) const
 {
   Sparse<T> m = *this;
 
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  if (m.length () < 1)
+  if (m.length () < 1 || dim > 1)
     return m;
 
   if (dim > 0)
     {
       m = m.transpose ();
       nr = m.rows ();
       nc = m.columns ();
     }
@@ -2111,19 +2111,19 @@ Sparse<T>
 Sparse<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type dim, 
                  sortmode mode) const
 {
   Sparse<T> m = *this;
 
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  if (m.length () < 1)
+  if (m.length () < 1 || dim > 1)
     {
-      sidx = Array<octave_idx_type> (dim_vector (nr, nc));
+      sidx = Array<octave_idx_type> (dim_vector (nr, nc), 1);
       return m;
     }
 
   if (dim > 0)
     {
       m = m.transpose ();
       nr = m.rows ();
       nc = m.columns ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (Fsort, Fnth_element): Fix behavior when trailing singleton
+	dim is specified.
+
 2010-06-12  Ben Abbott <bpabbott@mac.com>
 
 	* DLD-FUNCTIONS/gammainc.cc: Fix doc-string typo.
 
 2010-06-11  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/gammainc.cc: Implement complementary incomplete
 	gamma function.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5323,17 +5323,17 @@ ordered lists.\n\
   const dim_vector dv = arg.dims ();
   if (nargin == 1 || args(1).is_string ())
     {
       // Find first non singleton dimension
       dim = dv.first_non_singleton ();
     }
   else
     {
-      if (dim < 0 || dim > dv.length () - 1)
+      if (dim < 0)
         {
           error ("sort: dim must be a valid dimension");
           return retval;
         }
     }
 
   if (return_idx)
     {
@@ -5735,17 +5735,17 @@ it may be better to use @code{sort}.\n\
   if (nargin == 2 || nargin == 3)
     {
       octave_value argx = args(0);
 
       int dim = -1;
       if (nargin == 3)
         {
           dim = args(2).int_value (true) - 1;
-          if (dim < 0 || dim >= argx.ndims ())
+          if (dim < 0)
             error ("nth_element: dim must be a valid dimension");
         }
       if (dim < 0)
         dim = argx.dims ().first_non_singleton ();
 
       idx_vector n = args(1).index_vector ();
 
       if (error_state)
