# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499282695 14400
#      Wed Jul 05 15:24:55 2017 -0400
# Node ID 85f1d31956c06b0b9f92ff516414f83934025800
# Parent  06b3d1d54054e2d4cb5d6b432ef5e0688668ce2f
make echo work for command-line functions

* file-info.h (file_info::file_info): New constructor from program
text and time when text was processed.

* ov-usr-fcn.h, ov-usr-fcn.cc (octave_user_code::get_file_info):
New function.
(octave_user_code::get_code_line, octave_user_code::get_code_lines):
Use get_file_info to update m_file_info if it is not already defined.
(octave_user_code::cache_function_text): New function.

* lex.h, lex.ll (base_lexer::lexical_feedback::buffer_function_text,
base_lexer::lexical_feedback::function_text): New variables.
(base_lexer::is_keyword_token, lexer::fill_flex_buffer):
Handle buffering of function text command-line functions.

* oct-parse.in.yy (base_parser::finish_function): Cache function text
for command-line functions.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <sstream>
 
 #include "file-info.h"
+#include "file-stat.h"
 #include "str-vec.h"
 
 #include "builtin-defun-decls.h"
 #include "call-stack.h"
 #include "defaults.h"
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
@@ -61,34 +62,61 @@ along with Octave; see the file COPYING.
 // Whether to optimize subsasgn method calls.
 static bool Voptimize_subsasgn_calls = true;
 
 octave_user_code::~octave_user_code (void)
 {
   delete m_file_info;
 }
 
+void
+octave_user_code::get_file_info (void)
+{
+  std::string file_name = fcn_file_name ();
+
+  m_file_info = new octave::file_info (file_name);
+
+  octave::sys::file_stat fs (file_name);
+
+  if (fs && (fs.mtime () > time_parsed ()))
+    warning ("function file '%s' changed since it was parsed",
+             file_name.c_str ());
+}
+
 std::string
 octave_user_code::get_code_line (size_t line)
 {
   if (! m_file_info)
-    m_file_info = new octave::file_info (fcn_file_name ());
+    get_file_info ();
 
   return m_file_info->get_line (line);
 }
 
 std::deque<std::string>
 octave_user_code::get_code_lines (size_t line, size_t num_lines)
 {
   if (! m_file_info)
-    m_file_info = new octave::file_info (fcn_file_name ());
+    get_file_info ();
 
   return m_file_info->get_lines (line, num_lines);
 }
 
+void
+octave_user_code::cache_function_text (const std::string& text,
+                                       const octave::sys::time& timestamp)
+{
+  if (m_file_info)
+    delete m_file_info;
+
+  if (timestamp > time_parsed ())
+    warning ("help text for function is newer than function");
+
+  m_file_info = new octave::file_info (text, timestamp);
+}
+
 std::map<std::string, octave_value>
 octave_user_code::subfunctions (void) const
 {
   return std::map<std::string, octave_value> ();
 }
 
 // User defined scripts.
 
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -86,22 +86,27 @@ public:
   {
     return curr_unwind_protect_frame;
   }
 
   std::string get_code_line (size_t line);
 
   std::deque<std::string> get_code_lines (size_t line, size_t num_lines);
 
+  void cache_function_text (const std::string& text,
+                            const octave::sys::time& timestamp);
+
   virtual std::map<std::string, octave_value> subfunctions (void) const;
 
   virtual octave::tree_statement_list * body (void) = 0;
 
 protected:
 
+  void get_file_info (void);
+
   // pointer to the current unwind_protect frame of this function.
   octave::unwind_protect *curr_unwind_protect_frame;
 
   // Cached text of function or script code with line offsets
   // calculated.
   octave::file_info *m_file_info;
 };
 
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -267,23 +267,24 @@ namespace octave
         looking_at_matrix_or_assign_lhs (false),
         looking_for_object_index (false),
         looking_at_indirect_ref (false), parsing_class_method (false),
         parsing_classdef (false), maybe_classdef_get_set_method (false),
         parsing_classdef_get_method (false),
         parsing_classdef_set_method (false),
         quote_is_transpose (false), force_script (false),
         reading_fcn_file (false), reading_script_file (false),
-        reading_classdef_file (false),
+        reading_classdef_file (false), buffer_function_text (false),
         input_line_number (1), current_input_column (1),
         bracketflag (0), braceflag (0),
         looping (0), defining_func (0), looking_at_function_handle (0),
         block_comment_nesting_level (0), command_arg_paren_count (0),
         token_count (0), current_input_line (), comment_text (),
-        help_text (), string_text (), string_line (0), string_column (0),
+        help_text (), function_text (), string_text (),
+        string_line (0), string_column (0),
         fcn_file_name (), fcn_file_full_name (), dir_name (),
         package_name (), looking_at_object_index (), parsed_function_name (),
         pending_local_variables (), symtab_context (), nesting_level (),
         tokens ()
     {
       init ();
     }
 
@@ -381,16 +382,20 @@ namespace octave
     bool reading_fcn_file;
 
     // TRUE means we're parsing a script file.
     bool reading_script_file;
 
     // TRUE means we're parsing a classdef file.
     bool reading_classdef_file;
 
+    // TRUE means we should store the text of the function we are
+    // parsing.
+    bool buffer_function_text;
+
     // the current input line number.
     int input_line_number;
 
     // the column of the current token.
     int current_input_column;
 
     // square bracket level count.
     int bracketflag;
@@ -421,16 +426,19 @@ namespace octave
     std::string current_input_line;
 
     // The current comment text.
     std::string comment_text;
 
     // The current help text.
     std::string help_text;
 
+    // The text of functions entered on the command line.
+    std::string function_text;
+
     // The current character string text.
     std::string string_text;
 
     // The position of the beginning of the current character string.
     int string_line;
     int string_column;
 
     // Simple name of function file we are reading.
@@ -819,20 +827,17 @@ namespace octave
 
     void reset (void)
     {
       promptflag (1);
 
       base_lexer::reset ();
     }
 
-    void append_input (const std::string& input, bool eof)
-    {
-      input_buf.fill (input, eof);
-    }
+    void append_input (const std::string& input, bool eof);
 
     void increment_promptflag (void) { pflag++; }
 
     void decrement_promptflag (void) { pflag--; }
 
     int promptflag (void) const { return pflag; }
 
     int promptflag (int n)
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2156,29 +2156,31 @@ namespace octave
     maybe_classdef_get_set_method = false;
     parsing_classdef_get_method = false;
     parsing_classdef_set_method = false;
     quote_is_transpose = false;
     force_script = false;
     reading_fcn_file = false;
     reading_script_file = false;
     reading_classdef_file = false;
+    buffer_function_text = false;
     input_line_number = 1;
     current_input_column = 1;
     bracketflag = 0;
     braceflag = 0;
     looping = 0;
     defining_func = 0;
     looking_at_function_handle = 0;
     block_comment_nesting_level = 0;
     command_arg_paren_count = 0;
     token_count = 0;
     current_input_line = "";
     comment_text = "";
     help_text = "";
+    function_text = "";
     string_text = "";
     string_line = 0;
     string_column = 0;
     fcn_file_name = "";
     fcn_file_full_name = "";
     dir_name = "";
     package_name = "";
     looking_at_object_index.clear ();
@@ -2725,17 +2727,23 @@ namespace octave
             if (! force_script && token_count == 0 && input_from_file ())
               {
                 reading_fcn_file = true;
                 reading_script_file = false;
               }
 
             if (! (reading_fcn_file || reading_script_file
                    || reading_classdef_file))
-              input_line_number = 1;
+              {
+                // Input must be coming from the terminal or stdin?
+                buffer_function_text = true;
+                function_text += (current_input_line + "\n");
+
+                input_line_number = 1;
+              }
             break;
 
           case magic_file_kw:
             {
               if ((reading_fcn_file || reading_script_file
                    || reading_classdef_file)
                   && ! fcn_file_full_name.empty ())
                 tok_val = new token (magic_file_kw, fcn_file_full_name, l, c);
@@ -3638,27 +3646,60 @@ namespace octave
   lexer::fill_flex_buffer (char *buf, unsigned max_size)
   {
     int status = 0;
 
     if (input_buf.empty ())
       {
         bool eof = false;
         current_input_line = reader.get_input (eof);
+
         input_buf.fill (current_input_line, eof);
+
+        // Attempt to capture text for functions defined on the
+        // command line.
+        //
+        // FIXME: the handling of newline here seems a bit clumsy.
+        //
+        // See also comments in push_lexer::append_input.
+
+        if (buffer_function_text)
+          {
+            function_text += current_input_line;
+            if (current_input_line[current_input_line.length () - 1] != '\n')
+              function_text += "\n";
+          }
       }
 
     if (! input_buf.empty ())
       status = input_buf.copy_chunk (buf, max_size);
     else
       status = YY_NULL;
 
     return status;
   }
 
+  void
+  push_lexer::append_input (const std::string& input, bool eof)
+  {
+    // FIXME: input may contain more than one line, so how can we
+    // properly start buffering input for command-line functions?
+    //
+    // Currently, base_lexer::is_keyword_token starts buffering text
+    // for command-line functions by setting the initial value of
+    // function_text to current_input_line when function_kw is
+    // recognized.  To make that work, we need to do something like
+    // maintain a queue of input strings and pass them to the flex
+    // buffer one line at a time, while also setting
+    // current_input_line.  Some care will be needed if a single line
+    // of input arrives in multiple calls to append_input.
+
+    input_buf.fill (input, eof);
+  }
+
   int
   push_lexer::fill_flex_buffer (char *buf, unsigned max_size)
   {
     int status = 0;
 
     if (input_buf.empty () && ! input_buf.at_eof ())
       input_buf.fill (std::string (1, static_cast<char> (1)), false);
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3459,16 +3459,23 @@ namespace octave
             // tree_function object that is placed in the parse tree.
             // Otherwise, it is just inserted in the symbol table,
             // either as a subfunction or nested function (see above),
             // or as the primary function for the file, via
             // m_primary_fcn_ptr (see also load_fcn_from_file,,
             // parse_fcn_file, and
             // symbol_table::fcn_info::fcn_info_rep::find_user_function).
 
+            if (m_lexer.buffer_function_text)
+              {
+                fcn->cache_function_text (m_lexer.function_text,
+                                          fcn->time_parsed ());
+                m_lexer.buffer_function_text = false;
+              }
+
             retval = new tree_function_def (fcn);
           }
       }
 
     return retval;
   }
 
   void
diff --git a/liboctave/util/file-info.h b/liboctave/util/file-info.h
--- a/liboctave/util/file-info.h
+++ b/liboctave/util/file-info.h
@@ -38,16 +38,21 @@ namespace octave
   class file_info
   {
   public:
 
     file_info (void)
       : m_file_buf (), m_offsets (), m_timestamp (static_cast<time_t> (0))
     { }
 
+    file_info (const std::string& text, const sys::time& timestamp)
+      : m_file_buf (text), m_offsets (get_line_offsets (m_file_buf)),
+        m_timestamp (timestamp)
+    { }
+
     file_info (const std::string& fname)
       : m_file_buf (snarf_file (fname)),
         m_offsets (get_line_offsets (m_file_buf)),
         m_timestamp ()
     { }
 
     file_info (const file_info&) = default;
 
