# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1421959092 -3600
#      Thu Jan 22 21:38:12 2015 +0100
# Branch gui-release
# Node ID 4b980842edba8f0f2af3ef043c64d0bb2186a07f
# Parent  18c213fa9b20f502484bd620ab2556830e9b0683
clean up some signal-slot combinations in the editor

* file-editor-tab.cc (contructor): remove connections of signals for command
  execution and for creating the context menu;
  (execute_command_in_terminal, create_context_menu): related slots removed

* file-editor-tab.h: removed slots and signals that were emitted therein

* file-editor.cc (add_file_editor_tab): connect edit area signals directly
  to the related slots without involving the editor tab

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -77,31 +77,20 @@ file_editor_tab::file_editor_tab (const 
   // for identification when saved later.
   if (directory.count () && directory.at (directory.count () - 1) != '/')
     directory.append ("/");
 
   _file_name = directory;
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
-  // Connect signal for command execution to a slot of this tab which in turn
-  // emits a signal connected to the main window.
-  // Direct connection is not possible because tab's parent is null.
-  connect (_edit_area,
-           SIGNAL (execute_command_in_terminal_signal (const QString&)),
-           this,
-           SLOT (execute_command_in_terminal (const QString&)));
 
-  connect (_edit_area,
-           SIGNAL (cursorPositionChanged (int, int)),
-           this,
-           SLOT (handle_cursor_moved (int,int)));
+  connect (_edit_area, SIGNAL (cursorPositionChanged (int, int)),
+           this, SLOT (handle_cursor_moved (int,int)));
 
-  connect (_edit_area, SIGNAL (create_context_menu_signal (QMenu*)),
-           this, SLOT (create_context_menu (QMenu*)));
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
            this, SLOT (handle_context_menu_edit (const QString&)));
 
   // create statusbar for row/col indicator and eol mode
   _status_bar = new QStatusBar (this);
 
   // eol mode
   QLabel *eol_label = new QLabel (tr ("eol:"), this);
@@ -203,22 +192,16 @@ file_editor_tab::closeEvent (QCloseEvent
   // closing this window
   if (check_file_modified () == QMessageBox::Cancel)
     e->ignore ();
   else
     e->accept ();
 }
 
 void
-file_editor_tab::execute_command_in_terminal (const QString& command)
-{
-  emit execute_command_in_terminal_signal (command); // connected to main window
-}
-
-void
 file_editor_tab::handle_context_menu_edit (const QString& word_at_cursor)
 {
   // search for a subfunction in actual file (this is done at first because
   // octave finds this function before other with same name in the search path
   QRegExp rxfun1 ("^[\t ]*function[^=]+=[\t ]*"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
@@ -2084,22 +2067,16 @@ file_editor_tab::handle_cursor_moved (in
 {
   if (_edit_area->SendScintilla (QsciScintillaBase::SCI_AUTOCACTIVE))
     show_auto_completion (this);
 
   _row_indicator->setNum (line+1);
   _col_indicator->setNum (col+1);
 }
 
-void
-file_editor_tab::create_context_menu (QMenu *menu)
-{
-  emit create_context_menu_tab_signal (menu);
-}
-
 QString
 file_editor_tab::get_function_name ()
 {
   QRegExp rxfun1 ("^[\t ]*function[^=]+=([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun3 ("^[\t ]*function[^=]+=[\t ]*([^\\s]+)[\t ]*$");
   QRegExp rxfun4 ("^[\t ]*function[\t ]+([^\\s]+)[\t ]*$");
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -115,34 +115,30 @@ public slots:
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file (const QString& commands = QString ());
 
   void file_has_changed (const QString& fileName);
 
-  void execute_command_in_terminal (const QString& command);
-  void create_context_menu (QMenu *);
   void handle_context_menu_edit (const QString&);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, const QString& fileName,
                              bool is_octave_file);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, QWidget *);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
-  void execute_command_in_terminal_signal (const QString&);
   void set_global_edit_shortcuts_signal (bool);
-  void create_context_menu_tab_signal (QMenu *);
   void request_open_file (const QString&);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
 
 private slots:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1584,16 +1584,22 @@ file_editor::add_file_editor_tab (file_e
 
   // signals from the qscintilla edit area
   connect (f->qsci_edit_area (), SIGNAL (status_update (bool, bool)),
            this, SLOT (edit_status_update (bool, bool)));
 
   connect (f->qsci_edit_area (), SIGNAL (show_doc_signal (const QString&)),
            main_win (), SLOT (handle_show_doc (const QString&)));
 
+  connect (f->qsci_edit_area (), SIGNAL (create_context_menu_signal (QMenu *)),
+           this, SLOT (create_context_menu (QMenu *)));
+
+  connect (f->qsci_edit_area (), SIGNAL (execute_command_in_terminal_signal (const QString&)),
+           main_win (), SLOT (execute_command_in_terminal (const QString&)));
+
   // Signals from the file editor_tab
   connect (f, SIGNAL (file_name_changed (const QString&, const QString&)),
            this, SLOT (handle_file_name_changed (const QString&,
                                                  const QString&)));
 
   connect (f, SIGNAL (editor_state_changed (bool, const QString&, bool)),
            this, SLOT (handle_editor_state_changed (bool, const QString&, bool)));
 
@@ -1604,25 +1610,19 @@ file_editor::add_file_editor_tab (file_e
            this, SLOT (handle_add_filename_to_list (const QString&, QWidget*)));
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
 
   connect (f, SIGNAL (mru_add_file (const QString&)),
            this, SLOT (handle_mru_add_file (const QString&)));
 
-  connect (f, SIGNAL (create_context_menu_tab_signal (QMenu *)),
-           this, SLOT (create_context_menu (QMenu *)));
-
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
-  connect (f, SIGNAL (execute_command_in_terminal_signal (const QString&)),
-           main_win (), SLOT (execute_command_in_terminal (const QString&)));
-
   connect (f, SIGNAL (request_open_file (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
   connect (f, SIGNAL (set_global_edit_shortcuts_signal (bool)),
            main_win (), SLOT (set_global_edit_shortcuts (bool)));
 
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
