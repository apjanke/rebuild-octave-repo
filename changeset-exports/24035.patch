# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1505345886 25200
#      Wed Sep 13 16:38:06 2017 -0700
# Node ID bc0aa7e18c96fa22d167535af08e272399233275
# Parent  18efaf716530a19d0ea0a31830c2d28c47c6adff
fix possible array bounds error when calculating inverse (bug #49235)

* dMatrix.cc (Matrix::finverse): Double size of DGECON work array as required
by the LAPACK documentation.  Thanks to Dario Meluzzi for the suggestion.
* fMatrix.cc (FloatMatrix::finverse): Likewise, for SGECON.  Fix formatting and
local variable naming for consistency.
* CMatrix.cc (ComplexMatrix::finverse): Fix formatting for consistency.
* fCMatrix.cc (FloatComplexMatrix::finverse): Fix formatting and local variable
naming for consistency.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -835,17 +835,17 @@ ComplexMatrix::finverse (MatrixType& mat
 
   F77_XFCN (zgetri, ZGETRI, (nc, F77_DBLE_CMPLX_ARG (tmp_data), nr, pipvt,
                              F77_DBLE_CMPLX_ARG (z.fortran_vec ()), lwork,
                              tmp_info));
 
   info = tmp_info;
 
   lwork = static_cast<F77_INT> (std::real (z(0)));
-  lwork = (lwork <  2 *nc ? 2*nc : lwork);
+  lwork = (lwork < 2 * nc ? 2 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   Complex *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
   // Calculate (always, see bug #45577) the norm of the matrix, for later use.
   double anorm =
@@ -864,18 +864,19 @@ ComplexMatrix::finverse (MatrixType& mat
     }
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
     {
+      F77_INT zgecon_info = 0;
+
       // Now calculate the condition number for non-singular matrix.
-      F77_INT zgecon_info = 0;
       char job = '1';
       Array<double> rz (dim_vector (2 * nc, 1));
       double *prz = rz.fortran_vec ();
       F77_XFCN (zgecon, ZGECON, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  nc, F77_DBLE_CMPLX_ARG (tmp_data), nr, anorm,
                                  rcon, F77_DBLE_CMPLX_ARG (pz), prz, zgecon_info
                                  F77_CHAR_ARG_LEN (1)));
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -544,18 +544,20 @@ Matrix::finverse (MatrixType& mattype, o
   F77_INT lwork = -1;
 
   F77_INT tmp_info = 0;
 
   // Query the optimum work array size.
   F77_XFCN (dgetri, DGETRI, (nc, tmp_data, nr, pipvt,
                              z.fortran_vec (), lwork, tmp_info));
 
+  info = tmp_info;
+
   lwork = static_cast<F77_INT> (z(0));
-  lwork = (lwork < 2 *nc ? 2*nc : lwork);
+  lwork = (lwork < 4 * nc ? 4 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   double *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -838,17 +838,17 @@ FloatComplexMatrix::finverse (MatrixType
 
   F77_XFCN (cgetri, CGETRI, (nc, F77_CMPLX_ARG (tmp_data), nr, pipvt,
                              F77_CMPLX_ARG (z.fortran_vec ()), lwork,
                              tmp_info));
 
   info = tmp_info;
 
   lwork = static_cast<F77_INT> (std::real (z(0)));
-  lwork = (lwork <  2 *nc ? 2*nc : lwork);
+  lwork = (lwork < 2 * nc ? 2 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   FloatComplex *pz = z.fortran_vec ();
 
   info = 0;
   tmp_info = 0;
 
   // Calculate (always, see bug #45577) the norm of the matrix, for later use.
   float anorm =
@@ -866,27 +866,28 @@ FloatComplexMatrix::finverse (MatrixType
     }
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
     {
+      F77_INT cgecon_info = 0;
+
       // Now calculate the condition number for non-singular matrix.
-      F77_INT zgecon_info = 0;
       char job = '1';
       Array<float> rz (dim_vector (2 * nc, 1));
       float *prz = rz.fortran_vec ();
       F77_XFCN (cgecon, CGECON, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  nc, F77_CMPLX_ARG (tmp_data), nr, anorm,
-                                 rcon, F77_CMPLX_ARG (pz), prz, zgecon_info
+                                 rcon, F77_CMPLX_ARG (pz), prz, cgecon_info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (zgecon_info != 0)
+      if (cgecon_info != 0)
         info = -1;
     }
 
   if ((info == -1 && ! force)
       || octave::math::isnan (anorm) || octave::math::isinf (anorm))
     retval = *this;  // Restore contents.
   else
     {
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -541,33 +541,34 @@ FloatMatrix::finverse (MatrixType& matty
     (*current_liboctave_error_handler) ("inverse requires square matrix");
 
   Array<F77_INT> ipvt (dim_vector (nr, 1));
   F77_INT *pipvt = ipvt.fortran_vec ();
 
   retval = *this;
   float *tmp_data = retval.fortran_vec ();
 
-  Array<float> z(dim_vector (1, 1));
+  Array<float> z (dim_vector (1, 1));
   F77_INT lwork = -1;
 
   F77_INT tmp_info = 0;
 
   // Query the optimum work array size.
   F77_XFCN (sgetri, SGETRI, (nc, tmp_data, nr, pipvt,
                              z.fortran_vec (), lwork, tmp_info));
 
   info = tmp_info;
 
   lwork = static_cast<F77_INT> (z(0));
-  lwork = (lwork < 2 *nc ? 2*nc : lwork);
+  lwork = (lwork < 4 * nc ? 4 * nc : lwork);
   z.resize (dim_vector (lwork, 1));
   float *pz = z.fortran_vec ();
 
   info = 0;
+  tmp_info = 0;
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond)
     anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
             .max ();
 
   F77_XFCN (sgetrf, SGETRF, (nc, nc, tmp_data, nr, pipvt, tmp_info));
@@ -575,28 +576,28 @@ FloatMatrix::finverse (MatrixType& matty
   info = tmp_info;
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
     {
-      F77_INT dgecon_info = 0;
+      F77_INT sgecon_info = 0;
 
       // Now calculate the condition number for non-singular matrix.
       char job = '1';
       Array<F77_INT> iz (dim_vector (nc, 1));
       F77_INT *piz = iz.fortran_vec ();
       F77_XFCN (sgecon, SGECON, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  nc, tmp_data, nr, anorm,
-                                 rcon, pz, piz, dgecon_info
+                                 rcon, pz, piz, sgecon_info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (dgecon_info != 0)
+      if (sgecon_info != 0)
         info = -1;
     }
 
   if (info == -1 && ! force)
     retval = *this; // Restore matrix contents.
   else
     {
       F77_INT dgetri_info = 0;
