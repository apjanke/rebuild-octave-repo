# HG changeset patch
# User jwe
# Date 861875336 0
#      Thu Apr 24 09:48:56 1997 +0000
# Node ID b99a6a2619aa06c4a6ef4c51418514a25d5ed36c
# Parent  0a076230ca87f53167e58597342b183d2681a0d9
[project @ 1997-04-24 09:48:55 by jwe]
ov-base.h

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,76 @@
+Thu Apr 24 03:58:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-sym.h: New file.
+	* ov.h (class octave_value): Derive from octave_symbol class.
+
+	* pt-const.h, pt-const.cc: Delete lots of old useless cruft.
+
+	* pt-exp.h, pt-exp.cc (tree_binary_expression): Use type codes for
+	operators from octave_value instead of repeating them here.
+
+	* pt-fvc-base.cc (tree_fvc::increment, tree_fvc::decrement): Delete.
+	* pt-fvc.cc (tree_identifier::increment): Get reference to value
+	and increment that instead of using virutal tree_fvc::increment
+	function.
+
+	* lex.l: Handle +=, -=, *=, /=, .+=, .-=, .*=, ./=, &=, and |= ops.
+	* pt-misc.cc (initialize_undefined_elements): Pass op to assign.
+	* pt-cmd.cc (tree_for_command::do_for_command_once): Likewise.
+	* pt-fvc.cc (tree_identifier::assign): Pass op.
+	* pt-exp.cc (tree_simple_assignment_expression): Handle new ops.
+	* variables.cc (octave_variable_reference::assign): Likewise.
+	* ov.h (class octave_value): Likewise.
+	* ov.cc (octave_value::assign_op_as_string): New function.
+	(octave_value::assign, octave_value::convert_and_assign,
+	octave_value::try_assignment_with_conversion,
+	octave_value::try_assignment): Pass op.
+	* pt-pr-code.cc (tree_print_code::visit_simple_assignment_expression):
+	Use expr.oper() instead of printing "=".
+	* op-cm-cm.cc, op-cm-cs.cc, op-cm-m.cc, op-cm-s.cc, op-m-m.cc,
+	op-m-s.cc, op-str-str.cc: Pass op to INSTALL_ASSIGNOP.
+	* ops.h (INSTALL_ASSIGNOP): Pass op.
+
+	* ops.h (INSTALL_UNOP): Delete.
+
+	* lex.h (class lexical_feedback): Delete maybe_screwed field.
+	New field, parsed_function name.
+	* lex.l (lexical_feedback::init): Initialize it.
+	(handle_identifier): Don't return SCREW.  Handle switching
+	symbol table context properly for `function f ()' vs `function x ='.
+	(is_keyword): If looking at function keyword, don't set current
+	symbol table to point to the local table.
+
+	* input.cc (generate_struct_completions, looks_like_struct):
+	Disable, since they don't work now anyway.
+
+	* help.cc (Ftype): Work with octave_value instead of a pointer to
+	tree_constant.
+	* symtab.cc (symbol_record_info::symbol_record_info): Likewise.
+
+
+Tue Apr 22 22:59:55 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-io.cc (Ffprintf): If first arg is a string, assume FID = 1.
+
+Fri Apr 18 20:16:34 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-obj.h, oct-obj.cc: Implement octave_value_list with
+	Array<octave_value> as a data member, not as a class derived from
+	Array<octave_value>.
+	(octave_value_list::length, octave_value_list::resize,
+	octave_value_list::prepend, octave_value_list::append,
+	octave_value_list::reverse): New functions.
+
+	* op-cm-cm.cc, op-cm-cs.cc, op-cm-m.cc, op-cm-s.cc, op-cs-cm.cc,
+	op-cs-m.cc, op-m-cm.cc, op-m-cs.cc, op-m-m.cc, op-m-s.cc,
+	op-s-cm.cc, op-s-m.cc: Use new bool ops from liboctave instead of
+	the macros defined in ops.h.
+
 Thu Apr 17 13:12:22 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (ABORT_PARSE): Handle forced_interactive the same as
 	interactive.
 
 Mon Apr 14 01:46:50 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (octave_read): Don't forget to free input buffer if it
@@ -109,19 +177,17 @@ Wed Mar 26 17:08:27 1997  John W. Eaton 
 	(symbol_record::mark_as_static, symbol_record::is_static):
 	New functions.
 	* symtab.cc (symbol_record::init_state): Initialize tagged_static.
 	(symbol_record::clear): Don't clear static variables.
 	* symtab.cc (push_context): Don't do anything for static variables.
 
 Tue Mar 25 17:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* ov-bool-mat.cc (octave_bool_matrix::is_true): Write guts.
-
-	* ov-bool-mat.h (octave_bool_matrix): Implement all() and any().
+	* ov-bool-mat.cc, ov-bool-mat.h, ov-bool.cc, ov-bool.h: New files.
 
 	* defaults.cc (symbols_of_defaults): DEFCONST OCTAVE_HOME.
 
 	* toplev.cc (octave_config_info): Delete use of CXXLIBS.
 	* oct-conf.h.in: Ditto.
 
 	* octave.cc (maximum_braindamage): Don't bind prefer_zero_one_indexing.
 	* ov.h: Don't declare Vprefer_zero_one_indexing.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -68,25 +68,25 @@ INCLUDES := builtins.h data.h defun.h de
 	mappers.h oct.h oct-fstrm.h oct-hist.h oct-iostrm.h \
 	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
 	oct-stdstrm.h oct-stream.h oct-strstrm.h pager.h parse.h \
 	pathlen.h pr-output.h procstream.h pt-base.h pt-cmd.h \
 	pt-const.h pt-exp-base.h pt-exp.h pt-fcn.h pt-fvc-base.h \
 	pt-fvc.h pt-mat.h pt-misc.h pt-mvr-base.h pt-mvr.h \
 	pt-plot.h pt-pr-code.h pt-walk.h sighandlers.h symtab.h \
 	syscalls.h sysdep.h systime.h syswait.h token.h toplev.h \
-	unwind-prot.h utils.h variables.h version.h \
-	xdiv.h xpow.h BaseSLList.h Map.h SLList.h SLStack.h Stack.h \
-	ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-struct.h ov-scalar.h \
+	unwind-prot.h utils.h variables.h version.h xdiv.h xpow.h \
+	BaseSLList.h Map.h SLList.h SLStack.h Stack.h ov-re-mat.h \
+	ov-cx-mat.h ov-ch-mat.h ov-list.h ov-struct.h ov-scalar.h \
 	ov-range.h ov-complex.h ov-va-args.h ov-colon.h ov-base.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov.h ov-typeinfo.h ops.h \
 	op-b-b.h op-bm-bm.h op-cm-cm.h op-cm-cs.h op-cm-m.h op-cm-s.h \
 	op-cs-cm.h op-cs-cs.h op-cs-m.h op-cs-s.h op-m-cm.h op-m-cs.h \
 	op-m-m.h op-m-s.h op-s-cm.h op-s-cs.h op-s-m.h op-s-s.h \
-	op-str-str.h
+	op-str-str.h oct-sym.h oct-fcn.h oct-builtin.h oct-mapper.h
 
 TI_SRC := Array-oc.cc Array-os.cc Array-tc.cc Map-fnc.cc Map-tc.cc \
 	SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-tc.cc \
 	SLList-tm.cc SLStack-i.cc SLStack-pc.cc SLStack-str.cc \
 	SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc SLStack-ui.cc
 
 TI_OBJ := $(patsubst %.cc, %.o, $(TI_SRC))
 
@@ -105,23 +105,24 @@ SOURCES := BaseSLList.cc Map.cc SLList.c
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	pager.cc parse.y pr-output.cc procstream.cc pt-base.cc \
 	pt-cmd.cc pt-const.cc pt-exp-base.cc pt-exp.cc pt-fcn.cc \
 	pt-fvc-base.cc pt-fvc.cc pt-mat.cc pt-misc.cc pt-mvr-base.cc \
 	pt-mvr.cc pt-plot.cc pt-pr-code.cc sighandlers.cc \
 	strcasecmp.c strncase.c strfns.cc strftime.c symtab.cc \
 	syscalls.cc sysdep.cc token.cc toplev.cc unwind-prot.cc \
 	utils.cc variables.cc xdiv.cc xpow.cc ov-base.cc ov-ch-mat.cc \
-	ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
+	ov-list.cc ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov.cc ov-typeinfo.cc \
 	ops.cc op-b-b.cc op-bm-bm.cc op-cm-cm.cc op-cm-cs.cc \
 	op-cm-m.cc op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-m-cm.cc op-m-cs.cc op-m-m.cc op-m-s.cc \
-	op-s-cm.cc op-s-cs.cc op-s-m.cc op-s-s.cc op-str-str.cc
+	op-s-cm.cc op-s-cs.cc op-s-m.cc op-s-s.cc op-str-str.cc \
+	oct-fcn.cc oct-builtin.cc oct-mapper.cc
 
 OBJECTS_4 := $(SOURCES)
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
 OBJECTS_2 := $(patsubst %.y, %.o, $(OBJECTS_3))
 OBJECTS_1 := $(patsubst %.c, %.o, $(OBJECTS_2))
 OBJECTS := $(patsubst %.cc, %.o, $(OBJECTS_1))
 
 ifeq ($(SHARED_LIBS), true)
