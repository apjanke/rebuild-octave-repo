# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498318772 14400
#      Sat Jun 24 11:39:32 2017 -0400
# Node ID c84328c2a6c785d336c3bfed38904aa00c5aed49
# Parent  ffd27f53fc795ae692140edc7d88f7b11d1b3658
handle remaining args (if any) in index expression (bug #51295)

* pt-eval.cc (tree_evaluator::visit_index_expression):
Handle any remaining arguments in index expression for final function
call.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1363,33 +1363,52 @@ namespace octave
       }
 
     if (! idx.empty () && (! base_expr_val.is_function ()
                            || base_expr_val.is_classdef_meta ()))
       {
         try
           {
             retval = base_expr_val.subsref (type.substr (beg, n-beg), idx, nargout);
+
+            beg = n;
+            idx.clear ();
           }
         catch (octave::index_exception& e)  // range problems, bad index type, etc.
           {
             final_index_error (e, expr);
           }
       }
 
     // This happens if... ??
 
     octave_value val = (retval.length () ? retval(0) : octave_value ());
 
     if (val.is_function ())
       {
         octave_function *fcn = val.function_value (true);
 
         if (fcn)
-          retval = fcn->call (*this, nargout);
+          {
+            octave_value_list final_args;
+
+            if (! idx.empty ())
+              {
+                if (n - beg != 1)
+                  error ("unexpected extra index at end of expression");
+
+                if (type[beg] != '(')
+                  error ("invalid index type '%c' for function call",
+                         type[beg]);
+
+                final_args = idx.front ();
+              }
+
+            retval = fcn->call (*this, nargout, final_args);
+          }
       }
 
     m_value_stack.push (retval);
   }
 
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
