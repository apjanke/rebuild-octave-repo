# HG changeset patch
# User jwe
# Date 1201847652 0
#      Fri Feb 01 06:34:12 2008 +0000
# Node ID 600a3af7963e58204f6ff551e87e72ba9d12b118
# Parent  402168152bb930dde56494826c026576c9125787
[project @ 2008-02-01 06:32:06 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,18 @@
+2008-02-01  Bill Denney  <bill@denney.ws>
+
+	* time/weekday.m: Allow vector inputs and speed up.
+	* time/eomday.m: Return column vector for column vector inputs.
+
 2008-01-30  John W. Eaton  <jwe@octave.org>
 
+	* miscellaneous/edit.m: Use "## Created: DATE" instead of "initial
+	revision".
+
 	* plot/Makefile.in (SOURCES): Include __plt2sv__.m and
 	__plt2vs__.m in the list.
 
 	* miscellaneous/tempdir.m: Append filesep to name for
 	compatibility.  Warn if not a directory or directory does not
 	exist.
 
 	* strings/deblank.m: Improve compatibility.
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -258,18 +258,17 @@ function ret = edit (file, state)
       FUNCTION.EMAIL = " ";
     else
       FUNCTION.EMAIL = strcat ("<", default_user(0), "@", host, ">");
     endif
   endif
 
   ## Fill in the revision string.
   now = localtime (time);
-  revs = strcat (strftime ("%Y-%m-%d", now), " ", FUNCTION.AUTHOR, " ",
-		 FUNCTION.EMAIL, "\n* Initial revision");
+  revs = strcat ("Created: ", strftime ("%Y-%m-%d", now));
 
   ## Fill in the copyright string.
   copyright = strcat (strftime ("Copyright (C) %Y ", now), FUNCTION.AUTHOR);
 
   ## Fill in the author tag field.
   author = strcat ("Author: ", FUNCTION.AUTHOR, " ", FUNCTION.EMAIL);
 
   ## Fill in the header.
@@ -286,17 +285,17 @@ This program is distributed in the hope 
 but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
 GNU General Public License for more details.\n\
 \n\
 You should have received a copy of the GNU General Public License\n\
 along with this program; if not, write to the Free Software\n\
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\
 ");
-      tail = strcat (author, "\n\n", revs);
+      tail = strcat (author, "\n", revs);
 
     case "BSD"
       head = strcat (copyright, "\n\n", "\
 This program is free software; redistribution and use in source and\n\
 binary forms, with or without modification, are permitted provided that\n\
 the following conditions are met:\n\
 \n\
    1.Redistributions of source code must retain the above copyright\n\
@@ -312,28 +311,27 @@ ARE DISCLAIMED.  IN NO EVENT SHALL THE A
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n\
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n\
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n\
 SUCH DAMAGE.\
 ");
-      tail = strcat (author, "\n\n", revs);
+      tail = strcat (author, "\n", revs);
 
     case "PD"
       head = "";
-      tail = strcat (author, "\n\n",
-		     "This program is granted to the public domain\n\n",
-		     revs);
+      tail = strcat (author, "\n", revs, "\n\n",
+		     "This program is granted to the public domain.");
 
     otherwise
       head = "";
       tail = strcat (copyright, "\n\n", FUNCTION.LICENSE, "\n",
-		     author, "\n\n", revs);
+		     author, "\n", revs);
   endswitch
 
   ## Generate the function template.
   exists = exist (name);
   switch (ext)
     case {"cc", "C", "cpp"}
       if (isempty (head))
 	comment = strcat ("/*\n", tail, "\n\n*/\n\n");
@@ -396,30 +394,33 @@ function ret = default_home ()
       ret = ret{1};
     else
       ret = "";
     endif
   endif
 
 endfunction
 
-## default_user (form)
-## Returns the name associated with the current user ID.
+## Return the name associated with the current user ID.
 ##
-## If form==1 return the full name.  This will be the
-## default author.  If form==0 return the login name.
+## If LONG_FORM is 1, return the full name.  This will be the
+## default author.  Otherwise return the login name.
 ## login@host will be the default email address.
 
 function ret = default_user (long_form)
 
   ent = getpwuid (getuid);
   if (! isstruct (ent))
     ret = getenv ("USER");
     if (isempty (ret))
       ret = getenv ("USERNAME");
     endif
   elseif (long_form)
     ret = ent.gecos;
+    pos = strfind (ret, ",");
+    if (! isempty (pos))
+      ret = ret(1:pos-1);
+    endif
   else
     ret = ent.name;
   endif
 
 endfunction
diff --git a/scripts/time/eomday.m b/scripts/time/eomday.m
--- a/scripts/time/eomday.m
+++ b/scripts/time/eomday.m
@@ -14,43 +14,44 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{e} =} eomday (@var{y}, @var{m})
 ## Return the last day of the month @var{m} for the year @var{y}.
-## @seealso{datenum, datevec, weekday}
+## @seealso{datenum, datevec, weekday, eomdate}
 ## @end deftypefn
 
 ## Author: pkienzle <pkienzle@users.sf.net>
 ## Created: 25 July 2004
 ## Adapted-By: William Poetra Yoga Hadisoeseno <williampoetra@gmail.com>
 
 function e = eomday (y, m)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   eom = [31, 28, 31, 30 ,31, 30, 31, 31, 30, 31, 30, 31];
-  e = eom(m);
+  e = reshape (eom(m), size (m));
   e += (m == 2) & (mod (y, 4) == 0 & (mod (y, 100) != 0 | mod (y, 400) == 0));
 
 endfunction
 
 # tests
 %!assert(eomday([-4:4],2),[29,28,28,28,29,28,28,28,29])
 %!assert(eomday([-901,901],2),[28,28])
 %!assert(eomday([-100,100],2),[28,28])
 %!assert(eomday([-900,900],2),[28,28])
 %!assert(eomday([-400,400],2),[29,29])
 %!assert(eomday([-800,800],2),[29,29])
 %!assert(eomday(2001,1:12),[31,28,31,30,31,30,31,31,30,31,30,31])
 %!assert(eomday(1:3,1:3),[31,28,31])
 %!assert(eomday(1:2000,2)',datevec(datenum(1:2000,3,0))(:,3))
 %!assert([1900:1999](find(eomday(1900:1999,2*ones(1,100))==29)),[1904,1908,1912,1916,1920,1924,1928,1932,1936,1940,1944,1948,1952,1956,1960,1964,1968,1972,1976,1980,1984,1988,1992,1996])
+%!assert(eomday([2004;2005], [2;2]), [29;28])
 # demos
 %!demo
 %! y = 1900:1999;
 %! e = eomday (y, 2 * ones (1, 100));
 %! y (find (e == 29))
diff --git a/scripts/time/weekday.m b/scripts/time/weekday.m
--- a/scripts/time/weekday.m
+++ b/scripts/time/weekday.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000, 2001, 2004, 2005, 2006, 2007 Paul Kienzle
+## Copyright (C) 2000, 2001, 2004, 2005, 2006, 2007, 2008 Paul Kienzle
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -29,43 +29,76 @@
 ## @code{"short"}), @var{s} will contain the abbreviated name of the weekday.
 ## @seealso{datenum, datevec, eomday}
 ## @end deftypefn
 
 ## Author: pkienzle <pkienzle@users.sf.net>
 ## Created: 10 October 2001 (CVS)
 ## Adapted-By: William Poetra Yoga Hadisoeseno <williampoetra@gmail.com>
 
-function [n, s] = weekday (d, form)
+function [d, s] = weekday (d, form)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (nargin < 2)
     form = "short";
   endif
 
-  v = datevec (d);
-  t = strptime (sprintf ("%d-%d-%d", v(3), v(2), v(1)), "%d-%m-%Y");
-
-  n = t.wday + 1;
+  if (iscell (d) || isnumeric (d))
+    endsize = size (d);
+  elseif (ischar (d))
+    endsize = [size(d, 1), 1];
+  endif
+  if (ischar (d) || iscell (d))
+    ## Make sure the date is numeric
+    d = datenum (d);
+  endif
+  ## Find the offset from a known Sunday (2008-Jan-6), mod 7.
+  d = floor (reshape (mod(d - 733048, 7), endsize));
+  ## Make Saturdays a 7 and not a 0.
+  d(!d) = 7;
 
   if (nargout > 1)
     if (strcmpi (form, "long"))
-      s = strftime ("%A", t);
+      names = {"Sunday" "Monday" "Tuesday" "Wednesday" "Thursday"
+	       "Friday" "Saturday"};
     else
-      s = strftime ("%a", t);
+      names = {"Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"};
     endif
+    s = strvcat (names(d));
   endif
 
 endfunction
 
 # tests
 %!assert(weekday(728647),2)
+## Test vector inputs for both directions
+%!assert(weekday([728647 728648]), [2 3])
+%!assert(weekday([728647;728648]), [2;3])
+## Test a full week before our reference day
 %!assert(weekday('19-Dec-1994'),2)
+%!assert(weekday('20-Dec-1994'),3)
+%!assert(weekday('21-Dec-1994'),4)
+%!assert(weekday('22-Dec-1994'),5)
+%!assert(weekday('23-Dec-1994'),6)
+%!assert(weekday('24-Dec-1994'),7)
+%!assert(weekday('25-Dec-1994'),1)
+## Test our reference day
+%!assert(weekday('6-Jan-2008'),1)
+## Test a full week after our reference day
+%!assert(weekday('1-Feb-2008'),6)
+%!assert(weekday('2-Feb-2008'),7)
+%!assert(weekday('3-Feb-2008'),1)
+%!assert(weekday('4-Feb-2008'),2)
+%!assert(weekday('5-Feb-2008'),3)
+%!assert(weekday('6-Feb-2008'),4)
+%!assert(weekday('7-Feb-2008'),5)
+## Test fractional dates
+%!assert(weekday(728647.1),2)
 # demos
 %!demo
 %! [n, s] = weekday (now ())
 %!demo
 %! [n, s] = weekday (728647)
 %!demo
 %! [n, s] = weekday ('19-Dec-1994')
