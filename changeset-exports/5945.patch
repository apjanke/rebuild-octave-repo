# HG changeset patch
# User jwe
# Date 1155939565 0
#      Fri Aug 18 22:19:25 2006 +0000
# Node ID 76cfea89e4e7e321891610ce8e68597fad44dd2b
# Parent  d20c596b9b1073c40f5485d36e5e4966dc7cc782
[project @ 2006-08-18 22:19:24 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
+	* pr-output.cc (set_real_matrix_format): Also always include space
+	for sign if values are int, inf, or nan.
+	(set_complex_format, set_complex_matrix_format): Always include
+	space for sign in real format, but never in imaginary format.
+
 	* gripes.cc (gripe_logical_conversion): New function.
 	* gripes.h: Provide decl.
 	* ov.h (octave_value::bool_value, octave_value::bool_matrix_value,
 	octave_value::bool_array_value): New arg, warn.
 	* ov-base.cc, ov-base.h (octave_base_value::bool_value,
 	octave_base_value::bool_matrix_value, 
 	octave_base_value::bool_array_value): Likewise.
 	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::bool_array_value,
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -435,17 +435,17 @@ set_real_matrix_format (bool sign, int x
       rd = prec;
       fw = rd + 2;
       if (inf_or_nan && fw < 4)
 	fw = 4;
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
-      fw = digits <= 0 ? 1 : digits;
+      fw = digits <= 0 ? 2 : digits + 1;
       if (inf_or_nan && fw < 4)
 	fw = 4;
       rd = fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
@@ -583,19 +583,23 @@ set_complex_format (bool sign, int x_max
     {
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       int digits = x_max > x_min ? x_max : x_min;
-      i_fw = r_fw = digits <= 0 ? 1 : digits;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      i_fw = digits <= 0 ? 1 : digits;
+      r_fw = i_fw + 1;
+      if (inf_or_nan && i_fw < 3)
+	{
+	  i_fw = 3;
+	  r_fw = 4;
+	}
       rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
@@ -621,38 +625,46 @@ set_complex_format (bool sign, int x_max
 	  ld_min = 1;
 	  rd_min = prec > x_min ? prec - x_min : prec;
 	  x_min = -x_min + 1;
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
-      i_fw = r_fw = 1 + ld + 1 + rd;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      i_fw = ld + 1 + rd;
+      r_fw = i_fw + 1;
+      if (inf_or_nan && i_fw < 3)
+	{
+	  i_fw = 3;
+	  r_fw = 4;
+	}
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (r_fw > Voutput_max_field_width || print_e || print_g))
     {
       if (print_g)
 	{
 	  r_fmt = float_format ();
 	  i_fmt = float_format ();
 	}
       else
 	{
 	  int exp_field = 4;
 	  if (x_max > 100 || x_min > 100)
 	    exp_field++;
 
-	  i_fw = r_fw = 1 + prec + exp_field;
-	  if (inf_or_nan && i_fw < 4)
-	    i_fw = r_fw = 4;
+	  i_fw = prec + exp_field;
+	  r_fw = i_fw + 1;
+	  if (inf_or_nan && i_fw < 3)
+	    {
+	      i_fw = 3;
+	      r_fw = 4;
+	    }
 
 	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
 	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
@@ -737,18 +749,18 @@ set_complex_matrix_format (bool sign, in
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x_max > r_x_min ? r_x_max : r_x_min;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      if (inf_or_nan && r_fw < 4)
+	r_fw = 4;
       rd = 2;
     }
   else if (hex_format)
     {
       r_fw = 2 * sizeof (double);
       i_fw = 2 * sizeof (double);
       rd = 0;
     }
@@ -756,26 +768,34 @@ set_complex_matrix_format (bool sign, in
     {
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
-      i_fw = r_fw = rd + 2;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      i_fw = rd + 1;
+      r_fw = i_fw + 1;
+      if (inf_or_nan && i_fw < 3)
+	{
+	  i_fw = 3;
+	  r_fw = 4;
+	}
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
-      i_fw = r_fw = digits <= 0 ? 1 : digits;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      i_fw = digits <= 0 ? 1 : digits;
+      r_fw = i_fw + 1;
+      if (inf_or_nan && i_fw < 3)
+	{
+	  i_fw = 3;
+	  r_fw = 4;
+	}
       rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
@@ -801,19 +821,23 @@ set_complex_matrix_format (bool sign, in
 	  ld_min = 1;
 	  rd_min = prec > x_min ? prec - x_min : prec;
 	  x_min = -x_min + 1;
 	}
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
-      i_fw = r_fw = 1 + ld + 1 + rd;
-      if (inf_or_nan && i_fw < 4)
-	i_fw = r_fw = 4;
+      i_fw = ld + 1 + rd;
+      r_fw = i_fw + 1;
+      if (inf_or_nan && i_fw < 3)
+	{
+	  i_fw = 3;
+	  r_fw = 4;
+	}
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
 	  || print_g
 	  || (! Vfixed_point_format && r_fw > Voutput_max_field_width)))
     {
       if (print_g)
@@ -822,19 +846,23 @@ set_complex_matrix_format (bool sign, in
 	  i_fmt = float_format ();
 	}
       else
 	{
 	  int exp_field = 4;
 	  if (x_max > 100 || x_min > 100)
 	    exp_field++;
 
-	  i_fw = r_fw = 1 + prec + exp_field;
-	  if (inf_or_nan && i_fw < 4)
-	    i_fw = r_fw = 4;
+	  i_fw = prec + exp_field;
+	  r_fw = i_fw + 1;
+	  if (inf_or_nan && i_fw < 3)
+	    {
+	      i_fw = 3;
+	      r_fw = 4;
+	    }
 
 	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
 	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
 	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
