# HG changeset patch
# User jwe
# Date 1175741075 0
#      Thu Apr 05 02:44:35 2007 +0000
# Node ID 0ad7655cf2bcf6bc5e1e92d7e311488a2fc6ec8e
# Parent  39eb39d67dd8a90cf75adab5d475bc1f283aa978
[project @ 2007-04-05 02:44:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2007-04-04  John W. Eaton  <jwe@octave.org>
+
+	* Range.cc (Range::nelem_internal): Likewise.
+	* lo-utils.cc (NINT): Use numeric_limits<int> instead of INT_MAX.
+	(NINTbig): Use numeric_limits<octave_idx_type> instead of INT_MAX.
+	From Scott Pakin <pakin@lanl.gov>.
+
 2007-04-04  David Bateman  <dbateman@free.fr>
 
 	* dMatrix.cc (Matrix::inverse): If calc_cond is true, calculate
 	the condition number for positive definite matrices.
 	* CMatrix.cc (ComplexMatrix::inverse): Ditto.
 	* dbleChol.h (CHOL(const Matrix&, bool)): New arg, calc_cond.
 	(CHOL(const Matrix&, octave_idx_type&, bool): Ditto.
 	(octave_idx_type init (const Matrix&, bool)): Ditto.
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -21,20 +21,20 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
-#include <climits>
 #include <cmath>
 
 #include <iostream>
+#include <limits>
 
 #include "Range.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
@@ -282,17 +282,17 @@ Range::nelem_internal (void) const
       if (! teq (rng_base + (n_elt - 1) * rng_inc, rng_limit))
 	{
 	  if (teq (rng_base + (n_elt - 2) * rng_inc, rng_limit))
 	    n_elt--;
 	  else if (teq (rng_base + n_elt * rng_inc, rng_limit))
 	    n_elt++;
 	}
 
-      retval = (n_elt >= INT_MAX - 1) ? -1 : n_elt;
+      retval = (n_elt >= std::numeric_limits<octave_idx_type>::max () - 1) ? -1 : n_elt;
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -21,20 +21,20 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <climits>
 #include <cstdlib>
 #include <cstdio>
 
+#include <limits>
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
@@ -43,36 +43,35 @@ 02110-1301, USA.
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
 // Convert X to the nearest integer value.  Should not pass NaN to
 // this function.
 
 // Sometimes you need a large integer, but not always.
-// FIXME -- INT_MAX and INT_MIN are probably not right for 64-bits.
 
 octave_idx_type
 NINTbig (double x)
 {
-  if (x > INT_MAX)
-    return INT_MAX;
-  else if (x < INT_MIN)
-    return INT_MIN;
+  if (x > std::numeric_limits<octave_idx_type>::max ())
+    return std::numeric_limits<octave_idx_type>::max ();
+  else if (x < std::numeric_limits<octave_idx_type>::min ())
+    return std::numeric_limits<octave_idx_type>::min ();
   else
     return static_cast<octave_idx_type> ((x > 0) ? (x + 0.5) : (x - 0.5));
 }
 
 int
 NINT (double x)
 {
-  if (x > INT_MAX)
-    return INT_MAX;
-  else if (x < INT_MIN)
-    return INT_MIN;
+  if (x > std::numeric_limits<int>::max ())
+    return std::numeric_limits<int>::max ();
+  else if (x < std::numeric_limits<int>::min ())
+    return std::numeric_limits<int>::min ();
   else
     return static_cast<int> ((x > 0) ? (x + 0.5) : (x - 0.5));
 }
 
 double
 D_NINT (double x)
 {
   if (xisinf (x) || xisnan (x))
