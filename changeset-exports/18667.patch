# HG changeset patch
# User Rik <rik@octave.org>
# Date 1398304110 25200
#      Wed Apr 23 18:48:30 2014 -0700
# Node ID e42843ceff485448438faa44ca900944dc6896ef
# Parent  652d9ed6f88d75847faf9e3ea022d0c07e121a59
Fix axes bounding box not obeying 'layer' property.

* gl-render.cc (draw_axes_boxes): Check layer2Dtop to decide which Z-value to
place axis at.  In 2-D plot, don't draw box lines at second Z-value which
overlaps original axis and is always on top.

* graphics.cc (update_axes_layout): Set property is2D based on whether view()
elevation is 90 degrees.

* graphics.in.h (axes::properties): New is2D bool property.
* graphics.in.h (axes::properties::get_is2D): New getter function.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -868,16 +868,18 @@ opengl_renderer::draw_axes_planes (const
       set_polygon_offset (false);
     }
 }
 
 void
 opengl_renderer::draw_axes_boxes (const axes::properties& props)
 {
   bool xySym = props.get_xySym ();
+  bool layer2Dtop = props.get_layer2Dtop ();
+  bool is2d = props.get_is2D ();
   double xPlane = props.get_xPlane ();
   double yPlane = props.get_yPlane ();
   double zPlane = props.get_zPlane ();
   double xPlaneN = props.get_xPlaneN ();
   double yPlaneN = props.get_yPlaneN ();
   double zPlaneN = props.get_zPlaneN ();
   double xpTick = props.get_xpTick ();
   double ypTick = props.get_ypTick ();
@@ -894,42 +896,53 @@ opengl_renderer::draw_axes_boxes (const 
   set_linewidth (props.get_linewidth ());
 
   if (props.is_visible ())
     {
       glBegin (GL_LINES);
 
       // X box
       set_color (props.get_xcolor_rgb ());
+
+      if (layer2Dtop)
+        std::swap (zpTick, zpTickN);
+
       glVertex3d (xPlaneN, ypTick, zpTick);
       glVertex3d (xPlane, ypTick, zpTick);
 
       if (props.is_box ())
         {
           glVertex3d (xPlaneN, ypTickN, zpTick);
           glVertex3d (xPlane, ypTickN, zpTick);
-          glVertex3d (xPlaneN, ypTickN, zpTickN);
-          glVertex3d (xPlane, ypTickN, zpTickN);
-          glVertex3d (xPlaneN, ypTick, zpTickN);
-          glVertex3d (xPlane, ypTick, zpTickN);
+          if (! is2d)
+            {
+              glVertex3d (xPlaneN, ypTickN, zpTickN);
+              glVertex3d (xPlane, ypTickN, zpTickN);
+              glVertex3d (xPlaneN, ypTick, zpTickN);
+              glVertex3d (xPlane, ypTick, zpTickN);
+            }
         }
 
       // Y box
       set_color (props.get_ycolor_rgb ());
       glVertex3d (xpTick, yPlaneN, zpTick);
       glVertex3d (xpTick, yPlane, zpTick);
 
       if (props.is_box () && ! plotyy)
         {
           glVertex3d (xpTickN, yPlaneN, zpTick);
           glVertex3d (xpTickN, yPlane, zpTick);
-          glVertex3d (xpTickN, yPlaneN, zpTickN);
-          glVertex3d (xpTickN, yPlane, zpTickN);
-          glVertex3d (xpTick, yPlaneN, zpTickN);
-          glVertex3d (xpTick, yPlane, zpTickN);
+
+          if (! is2d)
+            {
+              glVertex3d (xpTickN, yPlaneN, zpTickN);
+              glVertex3d (xpTickN, yPlane, zpTickN);
+              glVertex3d (xpTick, yPlaneN, zpTickN);
+              glVertex3d (xpTick, yPlane, zpTickN);
+            }
         }
 
       // Z box
       set_color (props.get_zcolor_rgb ());
 
       if (xySym)
         {
           glVertex3d (xPlaneN, yPlane, zPlaneN);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -5194,16 +5194,17 @@ axes::properties::update_axes_layout (vo
           layer2Dtop = true;
         }
       else
         zpTick = zPlane;
     }
 
   Matrix viewmat = get_view ().matrix_value ();
   nearhoriz = std::abs (viewmat(1)) <= 5;
+  is2D = viewmat(1) == 90;
 
   update_ticklength ();
 }
 
 void
 axes::properties::update_ticklength (void)
 {
   bool mode2d = (((xstate > AXE_DEPTH_DIR ? 1 : 0) +
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3661,16 +3661,17 @@ public:
     double get_yticklen (void) const { return yticklen; }
     double get_zticklen (void) const { return zticklen; }
     double get_xtickoffset (void) const { return xtickoffset; }
     double get_ytickoffset (void) const { return ytickoffset; }
     double get_ztickoffset (void) const { return ztickoffset; }
     bool get_x2Dtop (void) const { return x2Dtop; }
     bool get_y2Dright (void) const { return y2Dright; }
     bool get_layer2Dtop (void) const { return layer2Dtop; }
+    bool get_is2D (void) const { return is2D; }
     bool get_xySym (void) const { return xySym; }
     bool get_xyzSym (void) const { return xyzSym; }
     bool get_zSign (void) const { return zSign; }
     bool get_nearhoriz (void) const { return nearhoriz; }
 
     ColumnVector pixel2coord (double px, double py) const
     { return get_transform ().untransform (px, py, (x_zlim(0)+x_zlim(1))/2); }
 
@@ -3699,17 +3700,17 @@ public:
 
     // Axes layout data
     int xstate, ystate, zstate;
     double xPlane, xPlaneN, yPlane, yPlaneN, zPlane, zPlaneN;
     double xpTick, xpTickN, ypTick, ypTickN, zpTick, zpTickN;
     double fx, fy, fz;
     double xticklen, yticklen, zticklen;
     double xtickoffset, ytickoffset, ztickoffset;
-    bool x2Dtop, y2Dright, layer2Dtop;
+    bool x2Dtop, y2Dright, layer2Dtop, is2D;
     bool xySym, xyzSym, zSign, nearhoriz;
 
 #if HAVE_FREETYPE
     // freetype renderer, used for calculation of text (tick labels) size
     ft_render text_renderer;
 #endif
 
     void set_text_child (handle_property& h, const std::string& who,
