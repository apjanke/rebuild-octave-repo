# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1357088055 18000
#      Tue Jan 01 19:54:15 2013 -0500
# Branch classdef
# Node ID 2b6fe094e6156e921ffa759ccffaf48c1130399e
# Parent  5e5705b3e505c4f87dfeb72012132e9d7732be03
Implement embryonic value-class semantic.

* libinterp/octave-value/ov-classdef.h (cdef_object_rep::set_class): Delete
method.
(cdef_object_rep::get, cdef_object_rep::put): Copy implementation from
handle_cdef_object.
(cdef_object_rep::subsref, cdef_oject_rep::subsasgn): Move implementation to
source file.
(cdef_object_rep::map): Copy field from handle_cdef_object.
(handle_cdef_rep::get, handle_cdef_rep::put): Move implementation to
cdef_object_rep.
(handle_cdef_rep::map): Move field to cdef_object_rep.
(cdef_object_rep::cdef_object_rep, cdef_object_rep::operator=): Private
declaration to disable copying.
(handle_cdef_rep::handle_cdef_rep, handle_cdef_rep::operator=): Likewise.
(class value_cdef_object): New class for value-class semantic.

* libinterp/octave-value/ov-classdef.cc (cdef_object_rep::subsref,
cdef_object_rep::subsasgn): Copy implementation from handle_cdef_object.
(cdef_class_rep::run_constructor): Do not try to assign constructor result in
case of error.
(cdef_class_rep::construct): Create value_cdef_object object for value classes.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -806,25 +806,20 @@ cdef_object_rep::map_keys (void) const
   cdef_class cls = get_class ();
 
   if (cls.ok ())
     return cls.get_names ();
   
   return string_vector ();
 }
 
-handle_cdef_object::~handle_cdef_object (void)
-{
-  printf ("deleting %s object (handle)\n", cname.c_str ());
-}
-
 octave_value_list
-handle_cdef_object::subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-			     int nargout, int& skip)
+cdef_object_rep::subsref (const std::string& type,
+                          const std::list<octave_value_list>& idx,
+                          int nargout, int& skip)
 {
   skip = 0;
 
   cdef_class cls = get_class ();
 
   octave_value_list retval;
 
   if (! cls.ok ())
@@ -894,19 +889,19 @@ handle_cdef_object::subsref (const std::
       error ("object cannot be indexed with `%c'", type[0]);
       break;
     }
 
   return retval;
 }
 
 octave_value
-handle_cdef_object::subsasgn (const std::string& type,
-                              const std::list<octave_value_list>& idx,
-                              const octave_value& rhs)
+cdef_object_rep::subsasgn (const std::string& type,
+                           const std::list<octave_value_list>& idx,
+                           const octave_value& rhs)
 {
   octave_value retval;
 
   cdef_class cls = get_class ();
 
   switch (type[0])
     {
     case '.':
@@ -952,16 +947,26 @@ handle_cdef_object::subsasgn (const std:
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
 }
 
+handle_cdef_object::~handle_cdef_object (void)
+{
+  printf ("deleting %s object (handle)\n", cname.c_str ());
+}
+
+value_cdef_object::~value_cdef_object (void)
+{
+  printf ("deleting %s object (value)\n", cname.c_str ());
+}
+
 cdef_method
 cdef_class::cdef_class_rep::find_method (const std::string& nm, bool local)
 {
   method_iterator it = method_map.find (nm);
 
   if (it == method_map.end ())
     {
       // FIXME: look into class directory
@@ -1372,29 +1377,38 @@ cdef_class::cdef_class_rep::run_construc
   if (ctor.ok ())
     {
       octave_value_list ctor_args (args);
       octave_value_list ctor_retval;
 
       ctor_args.prepend (to_ov (obj));
       ctor_retval = ctor.execute (ctor_args, 1);
 
-      if (ctor_retval.length () == 1)
-        obj = to_cdef (ctor_retval(0));
-      else
-        ::error ("%s: invalid number of output arguments for classdef constructor",
-                 ctor_name.c_str ());
+      if (! error_state)
+        {
+          if (ctor_retval.length () == 1)
+            obj = to_cdef (ctor_retval(0));
+          else
+            ::error ("%s: invalid number of output arguments for classdef constructor",
+                     ctor_name.c_str ());
+        }
     }
 }
 
 octave_value
 cdef_class::cdef_class_rep::construct (const octave_value_list& args)
 {
-  // FIXME: determine whether to use value or handle rep object
-  cdef_object obj (new handle_cdef_object (get ("Name").string_value ()));
+  cdef_object_rep *r;
+
+  if (is_handle_class ())
+    r = new handle_cdef_object (get_name ());
+  else
+    r = new value_cdef_object (get_name ());
+
+  cdef_object obj (r);
 
   initialize_object (obj);
 
   if (! error_state)
     {
       run_constructor (obj, args);
 
       if (! error_state)
@@ -1486,24 +1500,16 @@ cdef_class::make_meta_class (tree_classd
         }
     }
 
   retval = ::make_class (class_name, slist);
 
   if (error_state)
     return cdef_class ();
 
-  // FIXME: remove this...
-  if (! retval.is_handle_class ())
-    {
-      ::error ("%s: value classes not supported yet",
-               class_name.c_str ());
-      return cdef_class ();
-    }
-
   // Class attributes
 
   if (t->attribute_list ())
     {
       for (tree_classdef_attribute_list::iterator it = t->attribute_list ()->begin ();
            it != t->attribute_list ()->end (); ++it)
         {
           std::string aname = (*it)->ident ()->name ();
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -50,65 +50,69 @@ public:
 
   cdef_object_rep (const std::string& nm)
       : refcount (1), cname (nm) { }
 
   virtual ~cdef_object_rep (void) { }
 
   virtual cdef_class get_class (void) const;
 
-  virtual void set_class (const cdef_object&)
-    { error ("set_class: invalid object"); }
-
   virtual cdef_object_rep* clone (void) const
     {
       error ("clone: invalid object");
       return new cdef_object_rep ();
     }
 
-  virtual void put (const std::string&, const octave_value&)
-    { error ("put: invalid object"); }
+  virtual void put (const std::string& pname, const octave_value& val)
+    { map.assign (pname, val); }
+
+  virtual octave_value get (const std::string& pname) const
+    {
+      Cell val = map.contents (pname);
 
-  virtual octave_value get (const std::string&) const
-    {
-      error ("get: invalid object");
-      return octave_value ();
+      if (val.numel () > 0)
+	return val(0, 0);
+      else
+	{
+	  error ("get: unknown slot: %s", pname.c_str ());
+	  return octave_value ();
+	}
     }
 
-  virtual octave_value_list subsref (const std::string&,
-				     const std::list<octave_value_list>&,
-				     int, int&)
-    {
-      error ("subsref: invalid object");
-      return octave_value_list ();
-    }
+  virtual octave_value_list subsref (const std::string& type,
+                                     const std::list<octave_value_list>& idx,
+                                     int nargout, int& skip);
 
-  virtual octave_value subsasgn (const std::string&,
-                                 const std::list<octave_value_list>&,
-                                 const octave_value&)
-    {
-      error ("subsasgn: invalid object");
-      return octave_value ();
-    }
+  virtual octave_value subsasgn (const std::string& type,
+                                 const std::list<octave_value_list>& idx,
+                                 const octave_value& rhs);
 
   virtual string_vector map_keys(void) const;
 
   virtual bool is_valid (void) const { return false; }
 
   std::string class_name (void) const { return cname; }
 
   void set_class_name (const std::string& nm)
     { cname = nm; }
 
 protected:
   /* reference count */
   octave_refcount<int> refcount;
 
   /* class name */
   std::string cname;
+
+  /* object property values */
+  Octave_map map;
+
+private:
+  // No copying
+  cdef_object_rep (const cdef_object_rep&);
+  cdef_object_rep& operator = (const cdef_object_rep& );
 };
 
 class
 cdef_object
 {
 public:
   /* FIXME: use a null object */
   cdef_object (void)
@@ -197,44 +201,49 @@ public:
 
   cdef_object_rep* clone (void) const
     {
       handle_cdef_object *obj = const_cast<handle_cdef_object *> (this);
       obj->refcount++;
       return obj;
     }
 
-  void put (const std::string& pname, const octave_value& val)
-    { map.assign (pname, val); }
+  bool is_valid (void) const { return true; }
 
-  octave_value get (const std::string& pname) const
-    {
-      Cell val = map.contents (pname);
+private:
+  // No copying
+  handle_cdef_object (const handle_cdef_object&);
+  handle_cdef_object& operator = (const handle_cdef_object&);
+};
 
-      if (val.numel () > 0)
-	return val(0, 0);
-      else
-	{
-	  error ("get: unknown slot: %s", pname.c_str ());
-	  return octave_value ();
-	}
+class
+value_cdef_object : public cdef_object_rep
+{
+public:
+  value_cdef_object (void)
+      : cdef_object_rep () { }
+
+  value_cdef_object (const std::string& nm)
+      : cdef_object_rep (nm) { }
+
+  ~value_cdef_object (void);
+
+  cdef_object_rep* clone (void) const
+    {
+      value_cdef_object* obj = new value_cdef_object (cname);
+      obj->map = map;
+      return obj;
     }
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-			     int nargout, int& skip);
-
-  octave_value subsasgn (const std::string& type,
-                         const std::list<octave_value_list>& idx,
-                         const octave_value& rhs);
-
   bool is_valid (void) const { return true; }
 
-protected:
-  Octave_map map;
+private:
+  // No copying
+  value_cdef_object (const value_cdef_object&);
+  value_cdef_object& operator = (const value_cdef_object&);
 };
 
 class
 cdef_class : public cdef_object
 {
 private:
 
   class
