# HG changeset patch
# User jwe
# Date 1045861481 0
#      Fri Feb 21 21:04:41 2003 +0000
# Node ID ea4b8c35ac9d53e6b622aadcbb422d60b4fbe650
# Parent  80b83de0aa2a6ffb12fafee83fe7a4ff55cdaffe
[project @ 2003-02-21 21:04:41 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,17 @@
 2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* configure.in: Allow RLD_FLAG to be set using --enable-rpath arg.
+
+	* configure.in: Fix default RLD_FLAG value for *-sgi-*.  From 
+	Paul Kienzle <pkienzle@users.sf.net>.
+
+	* configure.in: Check for long long int and unsigned long long int.
+
 	* configure.in (AH_BOTTOM): Define HAVE_PLACEMENT_DELETE for gcc
 	3.2 and later.
 
 	* configure.in: Check for copysign and signbit.
 
 2003-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/Makefile.in (DISTFILES): Add otags.1 to the list.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.415 $)
+AC_REVISION($Revision: 1.416 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -632,20 +632,25 @@ AC_ARG_ENABLE(dl,
   ENABLE_DYNAMIC_LINKING=false)
 
 if $STATIC_LIBS || $SHARED_LIBS; then
   true
 else
   AC_MSG_ERROR([You can't disable building static AND shared libraries!])
 fi
 
-use_rpath=true
 AC_ARG_ENABLE(rpath,
-  [  --enable-rpath          add -rpath to link command for shared libraries],
-  [if test "$enableval" = no; then use_rpath=false; fi], [])
+  [  --enable-rpath          override the default link options for rpath;
+                            e.g., --with-rpath='-rpath $(octlibdir)'],
+  [ if test "$enableval" = no; then use_rpath=false;
+    else
+      use_rpath=true
+      if test "$enableval" = yes; then true;
+      else enable_rpath_arg="$enableval"; fi
+    fi], [use_rpath=false])
 
 DLFCN_DIR=
 CPICFLAG=-fPIC
 CXXPICFLAG=-fPIC
 FPICFLAG=-fPIC
 SHLEXT=so
 SHLLIB='$(SHLEXT)'
 SHLBIN=
@@ -725,17 +730,17 @@ case "$canonical_host_type" in
     SHLEXT=sl
     SH_LDFLAGS="-shared -fPIC"
     RLD_FLAG='-Wl,+b -Wl,$(octlibdir)'
   ;;
   *-sgi-*)
     CPICFLAG=
     CXXPICFLAG=
     FPICFLAG=
-    RLD_FLAG='-L$(octlibdir)'
+    RLD_FLAG='-rpath $(octlibdir)'
   ;;
   sparc-sun-sunos4*)
     if test "$ac_cv_f77_compiler_gnu" = yes; then
       FPICFLAG=-fPIC
     else
       FPICFLAG=-PIC
     fi
     SH_LD=ld
@@ -767,19 +772,21 @@ case "$canonical_host_type" in
     else
       TEMPLATE_AR='$(CXX)'
       TEMPLATE_ARFLAGS="-xar -o"
     fi
   ;;
 esac
 
 if $use_rpath; then
-  true
+  if test -n "$enable_rpath_arg"; then
+    RLD_FLAG="$enable_rpath_arg"
+  fi
 else
-  RLD_FLAG=
+  RLD_FLAG=""
 fi
 
 AC_MSG_RESULT([defining FPICFLAG to be $FPICFLAG])
 AC_MSG_RESULT([defining CPICFLAG to be $CPICFLAG])
 AC_MSG_RESULT([defining CXXPICFLAG to be $CXXPICFLAG])
 AC_MSG_RESULT([defining SHLEXT to be $SHLEXT])
 AC_MSG_RESULT([defining SHLLIB to be $SHLLIB])
 AC_MSG_RESULT([defining SHLBIN to be $SHLBIN])
@@ -823,16 +830,27 @@ AC_SUBST(library_path_var)
 ### special checks for odd OS specific things.
 ###
 ### I am told that on some SCO systems, the only place to find some
 ### functions like gethostname and gettimeofday is in libsocket.
 
 AC_CHECK_FUNCS(gethostname, [], [AC_CHECK_LIB(socket, gethostname)])
 AC_CHECK_FUNCS(getpwnam, [], [AC_CHECK_LIB(sun, getpwnam)])
 
+### Type stuff.
+
+AC_TYPE_MODE_T
+AC_TYPE_OFF_T
+AC_TYPE_PID_T
+AC_TYPE_SIZE_T
+AC_TYPE_UID_T
+AC_CHECK_TYPES([dev_t, ino_t, nlink_t, nlink_t])
+AC_CHECK_TYPES([long long int, unsigned long long int])
+AC_CHECK_TYPES([sigset_t, sig_atomic_t], , , [#include <signal.h>])
+
 ### How big are ints and how are they oriented?  These could probably
 ### be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF(short)
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 AC_CHECK_SIZEOF(long long)
 
@@ -1160,26 +1178,16 @@ AC_MSG_CHECKING([for sys_siglist variabl
 AC_TRY_LINK([#include <stdio.h>],
   [extern char *sys_siglist[]; printf ("%s\n", sys_siglist[1]);],
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SYS_SIGLIST, 1, [Define if your system has a sys_siglist variable.]),
   AC_MSG_RESULT(no))
 OCTAVE_SIGNAL_CHECK
 OCTAVE_REINSTALL_SIGHANDLERS
 
-### Type stuff.
-
-AC_TYPE_MODE_T
-AC_TYPE_OFF_T
-AC_TYPE_PID_T
-AC_TYPE_SIZE_T
-AC_TYPE_UID_T
-AC_CHECK_TYPES([dev_t, ino_t, nlink_t, nlink_t])
-AC_CHECK_TYPES([sigset_t, sig_atomic_t], , , [#include <signal.h>])
-
 ### A system dependent kluge or two.
 
 AC_CHECK_FUNCS(getrusage times)
 case "$canonical_host_type" in
   *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1, [Define if your struct rusage only has time information.])
   ;;
 esac
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.h, ov.cc (octave_value (long long int)): New constructor.
+	(octave_value (unsigned long long int)): Likewise.
+
 	* oct-obj.h (octave_value_list::operator delete): Handle systems
 	with or without placement delete.
 
 2003-02-21  Paul Kienzle <pkienzle@users.sf.net>
 
 	* utils.cc (octave_vsnprintf): Return value of vsnprintf is int,
 	not size_t.  Make sure there is some space left in the buffer for
 	vsnprintf versions which return the number of characters written
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -378,16 +378,32 @@ octave_value::octave_value (long int i)
 }
 
 octave_value::octave_value (unsigned long int i)
   : rep (new octave_scalar (i))
 {
   rep->count = 1;
 }
 
+#if defined (HAVE_LONG_LONG_INT)
+octave_value::octave_value (long long int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+#endif
+
+#if defined (HAVE_UNSIGNEDLONG_LONG_INT)
+octave_value::octave_value (unsigned long long int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+#endif
+
 octave_value::octave_value (octave_time t)
   : rep (new octave_scalar (t))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d))
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -160,16 +160,30 @@ public:
 
   octave_value (void);
   octave_value (short int i);
   octave_value (unsigned short int i);
   octave_value (int i);
   octave_value (unsigned int i);
   octave_value (long int i);
   octave_value (unsigned long int i);
+
+  // XXX FIXME XXX -- these are kluges.  They turn into doubles
+  // internally, which will break for very large values.  We just use
+  // them to store things like 64-bit ino_t, etc, and hope that those
+  // values are never actually larger than can be represented exactly
+  // in a double.
+
+#if defined (HAVE_LONG_LONG_INT)
+  octave_value (long long int i);
+#endif
+#if defined (HAVE_UNSIGNEDLONG_LONG_INT)
+  octave_value (unsigned long long int i);
+#endif
+
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
