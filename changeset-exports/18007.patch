# HG changeset patch
# User Rik <rik@octave.org>
# Date 1385435433 28800
#      Mon Nov 25 19:10:33 2013 -0800
# Node ID 25b6fbe828273379181d4facfbaa0e9635cf3ae5
# Parent  b992a17767fee9c7996e815c2e331d19361320ef
Make the CLI the default for the 3.8 release.

* NEWS: Announce '--force-gui' option

* main.in.cc (main): Make CLI the default start option.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,15 +1,16 @@
 Summary of important user-visible changes for version 3.8:
 ---------------------------------------------------------
 
- ** A GUI is now available with Octave and is the default when starting
-    an interactive session.  The original command line interface is also
-    available and can be entered by using the "--no-gui" option when
-    invoking Octave.
+ ** An experimental GUI is now available with Octave.  The GUI works well
+    on Linux systems, acceptably on Windows, but unsatisfactorily on Mac OS X.
+    To start a GUI session include the "--force-gui" option when invoking
+    Octave.  The GUI is under continuous improvement and will be the default
+    interface for the 4.0 release.
 
  ** Octave now uses OpenGL graphics by default with FLTK widgets.  If
     OpenGL libraries or FLTK widgets are not available when Octave is
     built, gnuplot is used.  You may also choose to use gnuplot for
     graphics by executing the command
 
       graphics_toolkit ("gnuplot")
 
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -580,64 +580,66 @@ strsave (const char *s)
   return tmp;
 }
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
-  bool start_gui = true;
-  bool gui_libs = true;
+  bool start_gui = false;
+  bool gui_libs = false;
 
   std::string octave_bindir = get_octave_bindir ();
 
-  std::string file = octave_bindir + dir_sep_char;
-
-#if defined (HAVE_OCTAVE_GUI)
-  file += "octave-gui";
-#else
-  file += "octave-cli";
-#endif
+  std::string file = octave_bindir + dir_sep_char + "octave-cli";
 
   char **new_argv = new char * [argc + 1];
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   int k = 1;
 #else
   int k = 0;
   new_argv[k++] = strsave ("octave");
 #endif
 
   bool warn_display = true;
 
   for (int i = 1; i < argc; i++)
     {
-      if (! strcmp (argv[i], "--no-gui-libs"))
+      if (! strcmp (argv[i], "--force-gui"))
+        {
+          start_gui = true;
+          gui_libs = true;
+          file = octave_bindir + dir_sep_char;
+          #if defined (HAVE_OCTAVE_GUI)
+            file += "octave-gui";
+          #else
+            file += "octave-cli";
+          #endif
+        }
+      else if (! strcmp (argv[i], "--no-gui-libs"))
         {
           // Run the version of Octave that is not linked with any GUI
           // libraries.  It may not be possible to do plotting or any
           // ui* calls, but it will be a little faster to start and
           // require less memory.  Don't pass the --no-gui-libs option
           // on as that option is not recognized by Octave.
 
-          start_gui = false;
-          gui_libs = false;
-          file = octave_bindir + dir_sep_char + "octave-cli";
+          // This is the default for 3.8 release.
         }
       else if (! strcmp (argv[i], "--no-gui"))
         {
           // If we see this option, then we can just exec octave; we
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave", not "octave-cli", because even
           // if the --no-gui option is given, we may be asked to do some
           // plotting or ui* calls.
 
-          start_gui = false;
-          new_argv[k++] = argv[i];
+          // This option calls the cli executable for the 3.8 release.
         }
       else if (! strcmp (argv[i], "--silent") || ! strcmp (argv[i], "-q"))
         warn_display = false;
       else
         new_argv[k++] = argv[i];
     }
 
   new_argv[k] = 0;
@@ -686,18 +688,17 @@ main (int argc, char **argv)
 
               retval = 1;
             }
 
           retval = octave_exec (file, new_argv);
         }
       else
         {
-          // Parent.  Forward signals to the child while waiting for it
-          // to exit.
+          // Parent.  Forward signals to child while waiting for it to exit.
 
           int status;
 
           while (true)
             {
               WAITPID (gui_pid, &status, 0);
 
               if (caught_signal > 0)
