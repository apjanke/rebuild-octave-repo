# HG changeset patch
# User jwe
# Date 1188269999 0
#      Tue Aug 28 02:59:59 2007 +0000
# Node ID 5e3350bdd91dac5ed1b5edf0538583d7fc6f1c49
# Parent  7eefeed173eae0ce1d859212d2fdae035188afcf
[project @ 2007-08-28 02:59:58 by jwe]

diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -74,18 +74,18 @@ IMAGES = $(IMAGES_EPS) $(IMAGES_PDF) $(I
 SUB_SOURCE := arith.txi audio.txi basics.txi bugs.txi \
 	container.txi control.txi cp-idx.txi data.txi \
 	debug.txi diffeq.txi dynamic.txi emacs.txi errors.txi eval.txi \
 	expr.txi finance.txi fn-idx.txi func.txi geometry.txi gpl.txi \
 	grammar.txi image.txi install.txi interp.txi \
 	intro.txi io.txi linalg.txi matrix.txi nonlin.txi numbers.txi \
 	op-idx.txi optim.txi package.txi plot.txi poly.txi preface.txi \
 	quad.txi quaternion.txi set.txi signal.txi sparse.txi stats.txi \
-	stmt.txi strings.txi struct.txi system.txi \
-	testfun.txi tips.txi var.txi vr-idx.txi
+	stmt.txi strings.txi system.txi testfun.txi tips.txi var.txi \
+	vr-idx.txi
 
 SOURCES := $(SUB_SOURCE) $(SCRIPT_SOURCES)
 
 MAIN_TEXINFO := $(srcdir)/octave.texi
 
 SUB_TEXINFO := $(SUB_SOURCE:.txi=.texi)
 
 # Don't list ../conf.texi here.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-08-27  John W. Eaton  <jwe@octave.org>
+
+	* oct-env.cc (octave_env::rooted_relative_pathname,
+	octave_env::do_rooted_relative_pathname): New functions.
+	* oct-env.h: Provide decls.
+
 2007-08-24  David Bateman  <dbateman@free.fr>
 
         * MSparse.h (MSparse<T>& insert (const Sparse<T>&, 
         const Array<octave_idx_type>&)): New method.
         (MSparse (const dim_vector&, octave_idx_type)): Ditto.
         * dSparse.h (SparseMatrix& SparseMatrix::insert (const
         SparseMatrix&, const Array<octave_idx_type>&)): ditto.
         (SparseMatrix (const dim_vector&, octave_idx_type)): ditto.
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -105,16 +105,23 @@ octave_env::polite_directory_format (con
 
 bool
 octave_env::absolute_pathname (const std::string& s)
 {
   return (instance_ok ())
     ? instance->do_absolute_pathname (s) : false;
 }
 
+bool
+octave_env::rooted_relative_pathname (const std::string& s)
+{
+  return (instance_ok ())
+    ? instance->do_rooted_relative_pathname (s) : false;
+}
+
 std::string
 octave_env::base_pathname (const std::string& s)
 {
   return (instance_ok ())
     ? instance->do_base_pathname (s) : std::string ();
 }
 
 std::string
@@ -256,16 +263,39 @@ octave_env::do_absolute_pathname (const 
       || (len > 2 && isalpha (s[0]) && s[1] == ':'
 	  && file_ops::is_dir_sep (s[2])))
     return true;
 #endif
 
   return false;
 }
 
+bool
+octave_env::do_rooted_relative_pathname (const std::string& s) const
+{
+  size_t len = s.length ();
+
+  if (len == 0)
+    return false;
+
+  if (len == 1 && s[0] == '.')
+    return true;
+
+  if (len > 1 && s[0] == '.' && file_ops::is_dir_sep (s[1]))
+    return true;
+
+  if (len == 2 && s[0] == '.' && s[1] == '.')
+    return true;
+
+  if (len > 2 && s[0] == '.' && s[1] == '.' && file_ops::is_dir_sep (s[2]))
+    return true;
+
+  return false;
+}
+
 // Return the `basename' of the pathname in STRING (the stuff after
 // the last directory separator).  If STRING is not a full pathname,
 // simply return it.
 
 std::string
 octave_env::do_base_pathname (const std::string& s) const
 {
   if (! do_absolute_pathname (s))
diff --git a/liboctave/oct-env.h b/liboctave/oct-env.h
--- a/liboctave/oct-env.h
+++ b/liboctave/oct-env.h
@@ -35,16 +35,18 @@ protected:
   octave_env (void);
 
 public:
 
   static std::string polite_directory_format (const std::string& name);
 
   static bool absolute_pathname (const std::string& s);
 
+  static bool rooted_relative_pathname (const std::string& s);
+
   static std::string base_pathname (const std::string& s);
 
   static std::string make_absolute (const std::string& s,
 				    const std::string& dot_path);
 
   static std::string getcwd (void);
 
   static std::string get_home_directory (void);
@@ -70,16 +72,18 @@ public:
 private:
 
   static bool instance_ok (void);
 
   std::string do_polite_directory_format (const std::string& name) const;
 
   bool do_absolute_pathname (const std::string& s) const;
 
+  bool do_rooted_relative_pathname (const std::string& s) const;
+
   std::string do_base_pathname (const std::string& s) const;
 
   std::string do_make_absolute (const std::string& s,
 				const std::string& dot_path) const;
 
   std::string do_getcwd (void) const;
 
   std::string do_get_home_directory (void) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2007-08-27  John W. Eaton  <jwe@octave.org>
 
+	* load-path.cc (load_path::do_find_file): Also files with non
+	rooted relative names.
+	* load-save.cc (find_file_to_load): Likewise.  Also handle
+	appending .mat to files with relative names.
+
 	* graphics.cc (base_properties::mark_modified,
 	base_properties::override_defaults,
 	base_properties::delete_children, figure::get_default,
 	axes::get_default): Move definitions here, from graphics.h.
 	* graphics.h (class gh_manager): Move decl to end of file.
 
 	* Cell.h (Cell::Cell (const octave_value_list&)): Create row
 	vector instead of column vector.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -389,17 +389,19 @@ do_stream_open (const std::string& name,
     {
       oct_mach_info::float_format flt_fmt =
 	oct_mach_info::string_to_float_format (arch);
 
       if (! error_state)
 	{
 	  std::string fname = file_ops::tilde_expand (name);
 
-	  if (! (md & std::ios::out || octave_env::absolute_pathname (fname)))
+	  if (! (md & std::ios::out
+		 || octave_env::absolute_pathname (fname)
+		 || octave_env::rooted_relative_pathname (fname)))
 	    {
 	      file_stat fs (fname);
 
 	      if (! fs.exists ())
 		{
 		  std::string tmp = octave_env::make_absolute
 		    (load_path::find_file (fname), octave_env::getcwd ());
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -738,49 +738,58 @@ load_path::do_find_fcn (const std::strin
   return retval;
 }
 
 std::string
 load_path::do_find_file (const std::string& file) const
 {
   std::string retval;
 
-  if (octave_env::absolute_pathname (file))
+  if (file.find ('/') != NPOS)
     {
-      file_stat fs (file);
-
-      if (fs.exists ())
-	return file;
-    }
-
-  std::string dir_name;
+      if (octave_env::absolute_pathname (file)
+	  || octave_env::rooted_relative_pathname (file))
+	{
+	  file_stat fs (file);
 
-  for (const_dir_info_list_iterator p = dir_info_list.begin ();
-       p != dir_info_list.end ();
-       p++)
-    {
-      string_vector all_files = p->all_files;
-
-      octave_idx_type len = all_files.length ();
+	  if (fs.exists ())
+	    return file;
+	}
+      else
+	{
+	  for (const_dir_info_list_iterator p = dir_info_list.begin ();
+	       p != dir_info_list.end ();
+	       p++)
+	    {
+	      std::string tfile = p->dir_name + file_ops::dir_sep_str + file;
 
-      for (octave_idx_type i = 0; i < len; i++)
-	{
-	  if (all_files[i] == file)
-	    {
-	      dir_name = p->dir_name;
+	      file_stat fs (tfile);
 
-	      goto done;
+	      if (fs.exists ())
+		return tfile;
 	    }
 	}
     }
-
- done:
+  else
+    {
+      for (const_dir_info_list_iterator p = dir_info_list.begin ();
+	   p != dir_info_list.end ();
+	   p++)
+	{
+	  string_vector all_files = p->all_files;
 
-  if (! dir_name.empty ())
-    retval = dir_name + file_ops::dir_sep_str + file;
+	  octave_idx_type len = all_files.length ();
+
+	  for (octave_idx_type i = 0; i < len; i++)
+	    {
+	      if (all_files[i] == file)
+		return p->dir_name + file_ops::dir_sep_str + file;
+	    }
+	}
+    }
 
   return retval;
 }
 
 std::string
 load_path::do_find_first_of (const string_vector& flist) const
 {
   std::string retval;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -589,17 +589,18 @@ do_load (std::istream& stream, const std
   return retval;
 }
 
 std::string
 find_file_to_load (const std::string& name, const std::string& orig_name)
 {
   std::string fname = name;
 
-  if (! octave_env::absolute_pathname (fname))
+  if (! (octave_env::absolute_pathname (fname)
+	 || octave_env::rooted_relative_pathname (fname)))
     {
       file_stat fs (fname);
 
       if (! (fs.exists () && fs.is_reg ()))
 	{
 	  std::string tmp = octave_env::make_absolute
 	    (load_path::find_file (fname), octave_env::getcwd ());
 
@@ -607,18 +608,24 @@ find_file_to_load (const std::string& na
 	    {
 	      warning_with_id ("Octave:load-file-in-path",
 			       "load: file found in load path");
 	      fname = tmp;
 	    }
 	}
     }
 
-  if (fname.rfind (".") == NPOS)
+  size_t dot_pos = fname.rfind (".");
+  size_t sep_pos = fname.find_last_of (file_ops::dir_sep_chars);
+    
+  if (dot_pos == NPOS || (sep_pos != NPOS && dot_pos < sep_pos))
     {
+      // Either no '.' in name or no '.' appears after last directory
+      // separator.
+
       file_stat fs (fname);
 
       if (! (fs.exists () && fs.is_reg ()))
 	fname = find_file_to_load (fname + ".mat", orig_name);
     }
   else
     {
       file_stat fs (fname);
