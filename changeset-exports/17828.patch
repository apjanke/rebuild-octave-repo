# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383356526 14400
#      Fri Nov 01 21:42:06 2013 -0400
# Node ID 6b787e274eb1b0eaabf0ebd7303b8d77c1e0ae32
# Parent  2de6139863745879fbfa93bd163de56b34bd5abd
make -q suppress no graphical display startup message (bug #38937)

* display.h, display.cc (display_info::err_msg): New member variable.
(display_info::display_available): Return initialization error message.
(display_info::init): Set err_message instead of calling warning.
* octave.cc (check_starting_gui): Maybe display display_info
initialization error message as a warning message.

diff --git a/libinterp/corefcn/display.cc b/libinterp/corefcn/display.cc
--- a/libinterp/corefcn/display.cc
+++ b/libinterp/corefcn/display.cc
@@ -78,17 +78,17 @@ display_info::init (bool query)
           double wd_mm = GetDeviceCaps (hdc, HORZSIZE);
 
           rx = wd * 25.4 / wd_mm;
           ry = ht * 25.4 / ht_mm;
 
           dpy_avail = true;
         }
       else
-        warning ("no graphical display found");
+        err_msg = "no graphical display found";
 
 #elif defined (HAVE_FRAMEWORK_CARBON)
 
       CGDirectDisplayID display = CGMainDisplayID ();
 
       if (display)
         {
 #  if defined (HAVE_CARBON_CGDISPLAYBITSPERPIXEL)
@@ -110,17 +110,17 @@ display_info::init (bool query)
           double wd_mm = sz_mm.width;
 
           rx = wd * 25.4 / wd_mm;
           ry = ht * 25.4 / ht_mm;
 
           dpy_avail = true;
         }
       else
-        warning ("no graphical display found");
+        err_msg = "no graphical display found";
 
 #elif defined (HAVE_X_WINDOWS)
 
       const char *display_name = getenv ("DISPLAY");
 
       if (display_name && *display_name)
         {
           Display *display = XOpenDisplay (display_name);
@@ -140,30 +140,30 @@ display_info::init (bool query)
 
                   double ht_mm = DisplayHeightMM (display, screen_number);
                   double wd_mm = DisplayWidthMM (display, screen_number);
 
                   rx = wd * 25.4 / wd_mm;
                   ry = ht * 25.4 / ht_mm;
                 }
               else
-                warning ("X11 display has no default screen");
+                err_msg = "X11 display has no default screen";
 
               XCloseDisplay (display);
 
               dpy_avail = true;
             }
           else
-            warning ("unable to open X11 DISPLAY");
+            err_msg = "unable to open X11 DISPLAY";
         }
       else
-        warning ("X11 DISPLAY environment variable not set");
+        err_msg = "X11 DISPLAY environment variable not set";
 #else
 
-      warning ("no graphical display found");
+      err_msg = "no graphical display found";
 
 #endif
     }
 }
 
 bool
 display_info::instance_ok (bool query)
 {
diff --git a/libinterp/corefcn/display.h b/libinterp/corefcn/display.h
--- a/libinterp/corefcn/display.h
+++ b/libinterp/corefcn/display.h
@@ -18,24 +18,27 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_display_h)
 #define octave_display_h 1
 
+#include <string>
+
 class Matrix;
 
 class display_info
 {
 protected:
 
   display_info (bool query = true)
-    : ht (1), wd (1), dp (0), rx (72), ry (72), dpy_avail (false)
+    : ht (1), wd (1), dp (0), rx (72), ry (72), dpy_avail (false),
+      err_msg ()
   {
     init (query);
   }
 
 public:
 
   static int height (void)
   {
@@ -59,17 +62,23 @@ public:
 
   static double y_dpi (void)
   {
     return instance_ok () ? instance->do_y_dpi () : 0;
   }
 
   static bool display_available (void)
   {
-    return instance_ok () ? instance->do_display_available () : false;
+    std::string msg;
+    return instance_ok () ? instance->do_display_available (msg) : false;
+  }
+
+  static bool display_available (std::string& msg)
+  {
+    return instance_ok () ? instance->do_display_available (msg) : false;
   }
 
   // To disable querying the window system for defaults, this function
   // must be called before any other display_info function.
   static void no_window_system (void)
   {
     instance_ok (false);
   }
@@ -86,23 +95,30 @@ private:
   int dp;
 
   // X- and Y- Resolution of the display in dots (pixels) per inch.
   double rx;
   double ry;
 
   bool dpy_avail;
 
+  std::string err_msg;
+
   int do_height (void) const { return ht; }
   int do_width (void) const { return wd; }
   int do_depth (void) const { return dp; }
 
   double do_x_dpi (void) const { return rx; }
   double do_y_dpi (void) const { return ry; }
 
-  bool do_display_available (void) const { return dpy_avail; }
+  bool do_display_available (std::string& msg) const
+  {
+    msg = err_msg;
+
+    return dpy_avail;
+  }
 
   void init (bool query = true);
 
   static bool instance_ok (bool query = true);
 };
 
 #endif
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -886,19 +886,28 @@ octave_execute_interpreter (void)
   clean_up_and_exit (retval, true);
 
   return retval;
 }
 
 static bool
 check_starting_gui (void)
 {
-  if (no_window_system || ! display_info::display_available ())
+  if (no_window_system)
     return false;
 
+  std::string err_msg;
+  if (! display_info::display_available (err_msg))
+    {
+      if (! (inhibit_startup_message || err_msg.empty ()))
+        warning (err_msg.c_str ());
+
+      return false;
+    }
+
   if (force_gui_option)
     return true;
 
   if (no_gui_option)
     return false;
 
   if (persist)
     return true;
