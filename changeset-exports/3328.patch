# HG changeset patch
# User jwe
# Date 941256176 0
#      Sat Oct 30 04:02:56 1999 +0000
# Node ID c447b7fa53e8135452ebf53bd0116eca4b160546
# Parent  bb81f9dcdac79dfb48271f7a874713c39d110e46
[project @ 1999-10-30 04:02:56 by jwe]

diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -307,27 +307,17 @@ Creates an integer variable from VAL.")
   return retval;
 }
 
 DEFUN_DLD (doit, args, ,
   "doit (I)")
 {
   octave_value_list retval;
 
-  // Might be better to use
-  //
-  //  args(0).type_name () == octave_integer::static_type_id ()
-  //
-  // But there are some problems with doing that if this function is
-  // in the same shared library as the one that defines the class.
-  // In that case, at least some systems will create two static data
-  // members for t_id.  To fix that problem, we need a different way
-  // of loading multiple functions from a single shared library...
-
-  if (args(0).type_name () == "integer")
+  if (args(0).type_id () == octave_integer::static_type_id ())
     {
       // At this point, we know we have a handle for an octave_integer
       // object, so we can peek at the representation and extract the
       // data.
 
       const octave_value& rep = args(0).get_rep ();
 
       int my_value = ((const octave_integer&) rep) . integer_value ();
