# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1523381829 14400
#      Tue Apr 10 13:37:09 2018 -0400
# Node ID 6254e47f2c6c0172f4f011c3f6d3ca3ca1d40c6c
# Parent  e3034c1956a369ba9a861e2984fb4dbebedca7c5
# Parent  2f0c0c0652d5ec532295ffb35374fbf425f1c3c7
maint: Merge stable to default.

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -434,18 +434,24 @@ b = sparse (i, j, v, sz(1), sz(2));
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction);
         }
       else if (nargout <= 1 && n_to_find == -1 && direction == 1)
         {
           // This case is equivalent to extracting indices from a logical
           // matrix.  Try to reuse the possibly cached index vector.
 
           // No need to catch index_exception, since arg is bool.
-          // Out-of-range errors have already set pos, and will be caught later.
-          retval(0) = arg.index_vector ().unmask ();
+          // Out-of-range errors have already set pos, and will be
+          // caught later.
+
+          octave_value result = arg.index_vector ().unmask ();
+
+          dim_vector dv = result.dims ();
+
+          retval(0) = (dv.isvector () ? result : result.reshape (dv.as_column ()));
         }
       else
         {
           boolNDArray v = arg.bool_array_value ();
 
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction);
         }
     }
@@ -535,16 +541,19 @@ b = sparse (i, j, v, sz(1), sz(2));
 }
 
 /*
 %!assert (find (char ([0, 97])), 2)
 %!assert (find ([1, 0, 1, 0, 1]), [1, 3, 5])
 %!assert (find ([1; 0; 3; 0; 1]), [1; 3; 5])
 %!assert (find ([0, 0, 2; 0, 3, 0; -1, 0, 0]), [3; 5; 7])
 
+%!assert <*53603> (find (ones (1,1,2) > 0), [1;2])
+%!assert <*53603> (find (ones (1,1,1,3) > 0), [1;2;3])
+
 %!test
 %! [i, j, v] = find ([0, 0, 2; 0, 3, 0; -1, 0, 0]);
 %!
 %! assert (i, [3; 2; 1]);
 %! assert (j, [1; 2; 3]);
 %! assert (v, [-1; 3; 2]);
 
 %!assert (find (single ([1, 0, 1, 0, 1])), [1, 3, 5])
