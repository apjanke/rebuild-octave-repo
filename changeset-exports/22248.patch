# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470797798 -3600
#      Wed Aug 10 03:56:38 2016 +0100
# Node ID 60986498af9e1c03d4363f0d3c41feea1510aaaa
# Parent  c8fc60a183a3fb4d96bccf26b8eb93553c77dbd2
svd: use std::vector instead of Matrix when a std::vector is enough.

* liboctave/numeric/svd.cc, liboctave/numeric/svd.h: Matrix<T> was
being used only to create an array for work by the fortran subroutines.
Use std::vector which is lighter but still provides RIIA idiom.

diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "svd.h"
 
 #include <cassert>
 #include <algorithm>
+#include <vector>
 
 #include "CMatrix.h"
 #include "dDiagMatrix.h"
 #include "fDiagMatrix.h"
 #include "dMatrix.h"
 #include "f77-fcn.h"
 #include "fCMatrix.h"
 #include "fMatrix.h"
@@ -151,218 +152,218 @@ svd<T>::right_singular_matrix (void) con
 
 
 // GESVD specializations
 
 #define GESVD_REAL_STEP(f, F)                                 \
   F77_XFCN (f, F, (F77_CONST_CHAR_ARG2 (&jobu, 1),            \
                    F77_CONST_CHAR_ARG2 (&jobv, 1),            \
                    m, n, tmp_data, m1, s_vec, u, m1, vt,      \
-                   nrow_vt1, work.fortran_vec (), lwork, info \
+                   nrow_vt1, work.data (), lwork, info \
                    F77_CHAR_ARG_LEN (1)                       \
                    F77_CHAR_ARG_LEN (1)))
 
 #define GESVD_COMPLEX_STEP(f, F, CMPLX_ARG)           \
   F77_XFCN (f, F, (F77_CONST_CHAR_ARG2 (&jobu, 1),    \
                    F77_CONST_CHAR_ARG2 (&jobv, 1),    \
                    m, n, CMPLX_ARG (tmp_data),        \
                    m1, s_vec, CMPLX_ARG (u), m1,      \
                    CMPLX_ARG (vt), nrow_vt1,          \
-                   CMPLX_ARG (work.fortran_vec ()),   \
-                   lwork, rwork.fortran_vec (), info  \
+                   CMPLX_ARG (work.data ()),   \
+                   lwork, rwork.data (), info         \
                    F77_CHAR_ARG_LEN (1)               \
                    F77_CHAR_ARG_LEN (1)))
 
 // DGESVD
 template<>
 void
 svd<Matrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
                     octave_idx_type n, double* tmp_data, octave_idx_type m1,
                     double* s_vec, double* u, double* vt,
-                    octave_idx_type nrow_vt1, Matrix& work,
+                    octave_idx_type nrow_vt1, std::vector<double>& work,
                     octave_idx_type& lwork, octave_idx_type& info)
 {
   GESVD_REAL_STEP (dgesvd, DGESVD);
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+  lwork = work[0];
+  work.reserve (lwork);
 
   GESVD_REAL_STEP (dgesvd, DGESVD);
 }
 
 // SGESVD
 template<>
 void
 svd<FloatMatrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
                          octave_idx_type n, float* tmp_data,
                          octave_idx_type m1, float* s_vec, float* u, float* vt,
-                         octave_idx_type nrow_vt1, FloatMatrix& work,
+                         octave_idx_type nrow_vt1, std::vector<float>& work,
                          octave_idx_type& lwork, octave_idx_type& info)
 {
   GESVD_REAL_STEP (sgesvd, SGESVD);
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+  lwork = work[0];
+  work.reserve (lwork);
 
   GESVD_REAL_STEP (sgesvd, SGESVD);
 }
 
 // ZGESVD
 template<>
 void
 svd<ComplexMatrix>::gesvd (char& jobu, char& jobv, octave_idx_type m,
                            octave_idx_type n, Complex* tmp_data,
                            octave_idx_type m1, double* s_vec, Complex* u,
                            Complex* vt, octave_idx_type nrow_vt1,
-                           ComplexMatrix& work,
+                           std::vector<Complex>& work,
                            octave_idx_type& lwork, octave_idx_type& info)
 {
-  Matrix rwork (5 * std::max (m, n), 1);
+  std::vector<double> rwork (5 * std::max (m, n));
 
   GESVD_COMPLEX_STEP (zgesvd, ZGESVD, F77_DBLE_CMPLX_ARG);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+  lwork = work[0].real ();
+  work.reserve (lwork);
 
   GESVD_COMPLEX_STEP (zgesvd, ZGESVD, F77_DBLE_CMPLX_ARG);
 }
 
 // CGESVD
 template<>
 void
 svd<FloatComplexMatrix>::gesvd (char& jobu, char& jobv,
                                 octave_idx_type m, octave_idx_type n,
                                 FloatComplex* tmp_data, octave_idx_type m1,
                                 float* s_vec, FloatComplex* u,
                                 FloatComplex* vt, octave_idx_type nrow_vt1,
-                                FloatComplexMatrix& work,
+                                std::vector<FloatComplex>& work,
                                 octave_idx_type& lwork, octave_idx_type& info)
 {
-  FloatMatrix rwork (5 * std::max (m, n), 1);
+  std::vector<float> rwork (5 * std::max (m, n));
 
   GESVD_COMPLEX_STEP (cgesvd, CGESVD, F77_CMPLX_ARG);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+  lwork = work[0].real ();
+  work.reserve (lwork);
 
   GESVD_COMPLEX_STEP (cgesvd, CGESVD, F77_CMPLX_ARG);
 }
 
 #undef GESVD_REAL_STEP
 #undef GESVD_COMPLEX_STEP
 
 
 // GESDD specializations
 
 #define GESDD_REAL_STEP(f, F)                                       \
   F77_XFCN (f, F, (F77_CONST_CHAR_ARG2 (&jobz, 1),                  \
                    m, n, tmp_data, m1, s_vec, u, m1, vt, nrow_vt1,  \
-                   work.fortran_vec (), lwork, iwork, info          \
+                   work.data (), lwork, iwork, info                 \
                    F77_CHAR_ARG_LEN (1)))
 
 #define GESDD_COMPLEX_STEP(f, F, CMPLX_ARG)                 \
   F77_XFCN (f, F, (F77_CONST_CHAR_ARG2 (&jobz, 1), m, n,    \
                    CMPLX_ARG (tmp_data), m1,                \
                    s_vec, CMPLX_ARG (u), m1,                \
                    CMPLX_ARG (vt), nrow_vt1,                \
-                   CMPLX_ARG (work.fortran_vec ()), lwork,  \
-                   rwork.fortran_vec (), iwork, info        \
+                   CMPLX_ARG (work.data ()), lwork,         \
+                   rwork.data (), iwork, info               \
                    F77_CHAR_ARG_LEN (1)))
 
 // DGESDD
 template<>
 void
 svd<Matrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
                     double* tmp_data, octave_idx_type m1,
                     double* s_vec, double* u,
                     double* vt, octave_idx_type nrow_vt1,
-                    Matrix& work, octave_idx_type& lwork,
+                    std::vector<double>& work, octave_idx_type& lwork,
                     octave_idx_type* iwork, octave_idx_type& info)
 {
   GESDD_REAL_STEP (dgesdd, DGESDD);
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+  lwork = work[0];
+  work.reserve (lwork);
 
   GESDD_REAL_STEP (dgesdd, DGESDD);
 }
 
 // SGESDD
 template<>
 void
 svd<FloatMatrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
                          float* tmp_data, octave_idx_type m1,
                          float* s_vec, float* u,
                          float* vt, octave_idx_type nrow_vt1,
-                         FloatMatrix& work, octave_idx_type& lwork,
+                         std::vector<float>& work, octave_idx_type& lwork,
                          octave_idx_type* iwork, octave_idx_type& info)
 {
   GESDD_REAL_STEP (sgesdd, SGESDD);
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+  lwork = work[0];
+  work.reserve (lwork);
 
   GESDD_REAL_STEP (sgesdd, SGESDD);
 }
 
 // ZGESDD
 template<>
 void
 svd<ComplexMatrix>::gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
                            Complex* tmp_data, octave_idx_type m1,
                            double* s_vec, Complex* u,
                            Complex* vt, octave_idx_type nrow_vt1,
-                           ComplexMatrix& work, octave_idx_type& lwork,
+                           std::vector<Complex>& work, octave_idx_type& lwork,
                            octave_idx_type* iwork, octave_idx_type& info)
 {
 
   octave_idx_type min_mn = std::min (m, n);
 
   octave_idx_type lrwork;
   if (jobz == 'N')
     lrwork = 7*min_mn;
   else
     lrwork = 5*min_mn*min_mn + 5*min_mn;
-  Matrix rwork (lrwork, 1);
 
+  std::vector<double> rwork (lrwork);
 
   GESDD_COMPLEX_STEP (zgesdd, ZGESDD, F77_DBLE_CMPLX_ARG);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+  lwork = work[0].real ();
+  work.reserve (lwork);
 
   GESDD_COMPLEX_STEP (zgesdd, ZGESDD, F77_DBLE_CMPLX_ARG);
 }
 
 // CGESDD
 template<>
 void
 svd<FloatComplexMatrix>::gesdd (char& jobz, octave_idx_type m,
                                 octave_idx_type n,
                                 FloatComplex* tmp_data, octave_idx_type m1,
                                 float* s_vec, FloatComplex* u,
                                 FloatComplex* vt, octave_idx_type nrow_vt1,
-                                FloatComplexMatrix& work,
+                                std::vector<FloatComplex>& work,
                                 octave_idx_type& lwork, octave_idx_type* iwork,
                                 octave_idx_type& info)
 {
   octave_idx_type min_mn = std::min (m, n);
   octave_idx_type max_mn = std::max (m, n);
 
   octave_idx_type lrwork;
   if (jobz == 'N')
     lrwork = 5*min_mn;
   else
     lrwork = min_mn * std::max (5*min_mn+7, 2*max_mn+2*min_mn+1);
-  FloatMatrix rwork (lrwork, 1);
+  std::vector<float> rwork (lrwork);
 
   GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+  lwork = work[0].real ();
+  work.reserve (lwork);
 
   GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
 }
 
 #undef GESDD_REAL_STEP
 #undef GESDD_COMPLEX_STEP
 
 
@@ -454,33 +455,33 @@ svd<T>::svd (const T& a, svd::Type type,
     right_sm.resize (nrow_vt, n);
 
   P* vt = right_sm.fortran_vec ();
 
   // Query _GESVD for the correct dimension of WORK.
 
   octave_idx_type lwork = -1;
 
-  T work (1, 1);
+  std::vector<P> work (1);
 
   octave_idx_type m1 = std::max (m, 1);
   octave_idx_type nrow_vt1 = std::max (nrow_vt, 1);
 
   if (m_driver == svd::Driver::GESVD)
     gesvd (jobu, jobv, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
            work, lwork, info);
   else if (m_driver == svd::Driver::GESDD)
     {
       assert (jobu == jobv);
       char jobz = jobu;
 
-      OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8 * std::min (m, n));
+      std::vector<octave_idx_type> iwork (8 * std::min (m, n));
 
       gesdd (jobz, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
-             work, lwork, iwork, info);
+             work, lwork, iwork.data (), info);
     }
   else
     abort ();
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.transpose ();
 }
 
diff --git a/liboctave/numeric/svd.h b/liboctave/numeric/svd.h
--- a/liboctave/numeric/svd.h
+++ b/liboctave/numeric/svd.h
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_svd_h)
 #define octave_svd_h 1
 
 #include "octave-config.h"
 
+#include "vector"
+
 template <typename T>
 class
 svd
 {
 public:
 
   typedef typename T::real_diag_matrix_type DM_T;
 
@@ -90,19 +92,20 @@ private:
   svd::Driver m_driver;
 
   T left_sm;
   DM_T sigma;
   T right_sm;
 
   void gesvd (char& jobu, char& jobv, octave_idx_type m, octave_idx_type n,
               P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
-              octave_idx_type nrow_vt1, T& work, octave_idx_type& lwork,
+              octave_idx_type nrow_vt1, std::vector<P>& work, octave_idx_type& lwork,
               octave_idx_type& info);
 
   void gesdd (char& jobz, octave_idx_type m, octave_idx_type n,
               P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
-              octave_idx_type nrow_vt1, T& work, octave_idx_type& lwork,
+              octave_idx_type nrow_vt1, std::vector<P>& work,
+              octave_idx_type& lwork,
               octave_idx_type* iwork, octave_idx_type& info);
 
 };
 
 #endif
