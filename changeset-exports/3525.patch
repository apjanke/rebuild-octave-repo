# HG changeset patch
# User jwe
# Date 949488522 0
#      Wed Feb 02 10:48:42 2000 +0000
# Node ID 6cfa474c5b99256ac5b42ea523ca1d971a85b133
# Parent  ee1eea24f078af97a189866f27b76b93ce8da48d
[project @ 2000-02-02 10:48:41 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.h (unary_op, binary_op, assign_op): Prepend `op_' to elts.
+	Change all usses
+
 	* All source files: Sprinkle with std:: qualifier as needed.
 
 2000-01-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (install_signal_handlers): Add std:: qualifier
 	for set_net_handler.
 
 	* All source files: Include iostream, fstream, strstream,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -80,68 +80,68 @@ typedef octave_value * (*type_conv_fcn) 
 
 class
 octave_value
 {
 public:
 
   enum unary_op
   {
-    not,
-    uminus,
-    transpose,
-    hermitian,
-    incr,
-    decr,
+    op_not,
+    op_uminus,
+    op_transpose,
+    op_hermitian,
+    op_incr,
+    op_decr,
     num_unary_ops,
     unknown_unary_op
   };
 
   enum binary_op
   {
-    add,
-    sub,
-    mul,
-    div,
-    pow,
-    ldiv,
-    lshift,
-    rshift,
-    lt,
-    le,
-    eq,
-    ge,
-    gt,
-    ne,
-    el_mul,
-    el_div,
-    el_pow,
-    el_ldiv,
-    el_and,
-    el_or,
-    struct_ref,
+    op_add,
+    op_sub,
+    op_mul,
+    op_div,
+    op_pow,
+    op_ldiv,
+    op_lshift,
+    op_rshift,
+    op_lt,
+    op_le,
+    op_eq,
+    op_ge,
+    op_gt,
+    op_ne,
+    op_el_mul,
+    op_el_div,
+    op_el_pow,
+    op_el_ldiv,
+    op_el_and,
+    op_el_or,
+    op_struct_ref,
     num_binary_ops,
     unknown_binary_op
   };
 
   enum assign_op
   {
-    asn_eq,
-    add_eq,
-    sub_eq,
-    mul_eq,
-    div_eq,
-    ldiv_eq,
-    lshift_eq,
-    rshift_eq,
-    el_mul_eq,
-    el_div_eq,
-    el_ldiv_eq,
-    el_and_eq,
-    el_or_eq,
+    op_asn_eq,
+    op_add_eq,
+    op_sub_eq,
+    op_mul_eq,
+    op_div_eq,
+    op_ldiv_eq,
+    op_lshift_eq,
+    op_rshift_eq,
+    op_el_mul_eq,
+    op_el_div_eq,
+    op_el_ldiv_eq,
+    op_el_and_eq,
+    op_el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
   static std::string unary_op_as_string (unary_op);
 
   static std::string binary_op_as_string (binary_op);
 
@@ -573,21 +573,21 @@ private:
   { \
     return name (a); \
   }
 
 #define OV_UNOP_FN_OP(name, op) \
   OV_UNOP_FN (name) \
   OV_UNOP_OP (name, op)
 
-OV_UNOP_FN_OP (not, !)
-OV_UNOP_FN_OP (uminus, -)
+OV_UNOP_FN_OP (op_not, !)
+OV_UNOP_FN_OP (op_uminus, -)
 
-OV_UNOP_FN (transpose)
-OV_UNOP_FN (hermitian)
+OV_UNOP_FN (op_transpose)
+OV_UNOP_FN (op_hermitian)
 
 // No simple way to define these for prefix and suffix ops?
 //
 //   incr
 //   decr
 
 #define OV_BINOP_FN(name) \
   inline octave_value \
@@ -602,41 +602,41 @@ OV_UNOP_FN (hermitian)
   { \
     return name (a1, a2); \
   }
 
 #define OV_BINOP_FN_OP(name, op) \
   OV_BINOP_FN (name) \
   OV_BINOP_OP (name, op)
 
-OV_BINOP_FN_OP (add, +)
-OV_BINOP_FN_OP (sub, -)
-OV_BINOP_FN_OP (mul, *)
-OV_BINOP_FN_OP (div, /)
+OV_BINOP_FN_OP (op_add, +)
+OV_BINOP_FN_OP (op_sub, -)
+OV_BINOP_FN_OP (op_mul, *)
+OV_BINOP_FN_OP (op_div, /)
 
-OV_BINOP_FN (pow)
-OV_BINOP_FN (ldiv)
-OV_BINOP_FN (lshift)
-OV_BINOP_FN (rshift)
+OV_BINOP_FN (op_pow)
+OV_BINOP_FN (op_ldiv)
+OV_BINOP_FN (op_lshift)
+OV_BINOP_FN (op_rshift)
 
-OV_BINOP_FN_OP (lt, <)
-OV_BINOP_FN_OP (le, <=)
-OV_BINOP_FN_OP (eq, ==)
-OV_BINOP_FN_OP (ge, >=)
-OV_BINOP_FN_OP (gt, >)
-OV_BINOP_FN_OP (ne, !=)
+OV_BINOP_FN_OP (op_lt, <)
+OV_BINOP_FN_OP (op_le, <=)
+OV_BINOP_FN_OP (op_eq, ==)
+OV_BINOP_FN_OP (op_ge, >=)
+OV_BINOP_FN_OP (op_gt, >)
+OV_BINOP_FN_OP (op_ne, !=)
 
-OV_BINOP_FN (el_mul)
-OV_BINOP_FN (el_div)
-OV_BINOP_FN (el_pow)
-OV_BINOP_FN (el_ldiv)
-OV_BINOP_FN (el_and)
-OV_BINOP_FN (el_or)
+OV_BINOP_FN (op_el_mul)
+OV_BINOP_FN (op_el_div)
+OV_BINOP_FN (op_el_pow)
+OV_BINOP_FN (op_el_ldiv)
+OV_BINOP_FN (op_el_and)
+OV_BINOP_FN (op_el_or)
 
-OV_BINOP_FN (struct_ref)
+OV_BINOP_FN (op_struct_ref)
 
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
   public: \
     int type_id (void) const { return t_id; } \
     std::string type_name (void) const { return t_name; } \
     static volatile int static_type_id (void) { return t_id; } \
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1818,93 +1818,93 @@ static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
 {
   octave_value::binary_op t = octave_value::unknown_binary_op;
 
   switch (op)
     {
     case POW:
-      t = octave_value::pow;
+      t = octave_value::op_pow;
       break;
 
     case EPOW:
-      t = octave_value::el_pow;
+      t = octave_value::op_el_pow;
       break;
 
     case '+':
-      t = octave_value::add;
+      t = octave_value::op_add;
       break;
 
     case '-':
-      t = octave_value::sub;
+      t = octave_value::op_sub;
       break;
 
     case '*':
-      t = octave_value::mul;
+      t = octave_value::op_mul;
       break;
 
     case '/':
-      t = octave_value::div;
+      t = octave_value::op_div;
       break;
 
     case EMUL:
-      t = octave_value::el_mul;
+      t = octave_value::op_el_mul;
       break;
 
     case EDIV:
-      t = octave_value::el_div;
+      t = octave_value::op_el_div;
       break;
 
     case LEFTDIV:
-      t = octave_value::ldiv;
+      t = octave_value::op_ldiv;
       break;
 
     case ELEFTDIV:
-      t = octave_value::el_ldiv;
+      t = octave_value::op_el_ldiv;
       break;
 
     case LSHIFT:
-      t = octave_value::lshift;
+      t = octave_value::op_lshift;
       break;
 
     case RSHIFT:
-      t = octave_value::rshift;
+      t = octave_value::op_rshift;
       break;
 
     case EXPR_LT:
-      t = octave_value::lt;
+      t = octave_value::op_lt;
       break;
 
     case EXPR_LE:
-      t = octave_value::le;
+      t = octave_value::op_le;
       break;
 
     case EXPR_EQ:
-      t = octave_value::eq;
+      t = octave_value::op_eq;
       break;
 
     case EXPR_GE:
-      t = octave_value::ge;
+      t = octave_value::op_ge;
       break;
 
     case EXPR_GT:
-      t = octave_value::gt;
+      t = octave_value::op_gt;
       break;
 
     case EXPR_NE:
-      t = octave_value::ne;
+      t = octave_value::op_ne;
       break;
 
     case EXPR_AND:
-      t = octave_value::el_and;
+      t = octave_value::op_el_and;
       break;
 
     case EXPR_OR:
-      t = octave_value::el_or;
+      t = octave_value::op_el_or;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -1953,29 +1953,29 @@ make_boolean_op (int op, tree_expression
 static tree_expression *
 make_prefix_op (int op, tree_expression *op1, token *tok_val)
 {
   octave_value::unary_op t = octave_value::unknown_unary_op;
 
   switch (op)
     {
     case EXPR_NOT:
-      t = octave_value::not;
+      t = octave_value::op_not;
       break;
 
     case '-':
-      t = octave_value::uminus;
+      t = octave_value::op_uminus;
       break;
 
     case PLUS_PLUS:
-      t = octave_value::incr;
+      t = octave_value::op_incr;
       break;
 
     case MINUS_MINUS:
-      t = octave_value::decr;
+      t = octave_value::op_decr;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -1992,29 +1992,29 @@ make_prefix_op (int op, tree_expression 
 static tree_expression *
 make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
   octave_value::unary_op t = octave_value::unknown_unary_op;
 
   switch (op)
     {
     case QUOTE:
-      t = octave_value::hermitian;
+      t = octave_value::op_hermitian;
       break;
 
     case TRANSPOSE:
-      t = octave_value::transpose;
+      t = octave_value::op_transpose;
       break;
 
     case PLUS_PLUS:
-      t = octave_value::incr;
+      t = octave_value::op_incr;
       break;
 
     case MINUS_MINUS:
-      t = octave_value::decr;
+      t = octave_value::op_decr;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -2272,65 +2272,65 @@ make_assign_op (int op, tree_argument_li
 {
   tree_expression *retval = 0;
 
   octave_value::assign_op t = octave_value::unknown_assign_op;
 
   switch (op)
     {
     case '=':
-      t = octave_value::asn_eq;
+      t = octave_value::op_asn_eq;
       break;
 
     case ADD_EQ:
-      t = octave_value::add_eq;
+      t = octave_value::op_add_eq;
       break;
 
     case SUB_EQ:
-      t = octave_value::sub_eq;
+      t = octave_value::op_sub_eq;
       break;
 
     case MUL_EQ:
-      t = octave_value::mul_eq;
+      t = octave_value::op_mul_eq;
       break;
 
     case DIV_EQ:
-      t = octave_value::div_eq;
+      t = octave_value::op_div_eq;
       break;
 
     case LEFTDIV_EQ:
-      t = octave_value::ldiv_eq;
+      t = octave_value::op_ldiv_eq;
       break;
 
     case LSHIFT_EQ:
-      t = octave_value::lshift_eq;
+      t = octave_value::op_lshift_eq;
       break;
 
     case RSHIFT_EQ:
-      t = octave_value::rshift_eq;
+      t = octave_value::op_rshift_eq;
       break;
 
     case EMUL_EQ:
-      t = octave_value::el_mul_eq;
+      t = octave_value::op_el_mul_eq;
       break;
 
     case EDIV_EQ:
-      t = octave_value::el_div_eq;
+      t = octave_value::op_el_div_eq;
       break;
 
     case ELEFTDIV_EQ:
-      t = octave_value::el_ldiv_eq;
+      t = octave_value::op_el_ldiv_eq;
       break;
 
     case AND_EQ:
-      t = octave_value::el_and_eq;
+      t = octave_value::op_el_and_eq;
       break;
 
     case OR_EQ:
-      t = octave_value::el_or_eq;
+      t = octave_value::op_el_or_eq;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = eq_tok->line ();
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -123,17 +123,17 @@ tree_switch_case::label_matches (const o
   bool retval = false;
 
   octave_value label_value = label->rvalue ();
 
   if (! error_state)
     {
       if (label_value.is_defined ())
 	{
-	  octave_value tmp = do_binary_op (octave_value::eq,
+	  octave_value tmp = do_binary_op (octave_value::op_eq,
 					   val, label_value);
 
 	  if (! error_state)
 	    {
 	      if (tmp.is_defined ())
 		retval = tmp.is_true ();
 	      else
 		eval_error ();
