# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451185185 28800
#      Sat Dec 26 18:59:45 2015 -0800
# Node ID fc9cca99b2de6754ed46800618ff59b6103b1794
# Parent  98e75f952a36125a5a8e583e7d6ccb1eefff1ce2
Deprecate all_strings, replace with string_vector_value.

* daspk.cc, dasrt.cc, dassl.cc, dirfns.cc, gl-render.cc, gl2ps-renderer.cc,
graphics.cc, graphics.in.h, lsode.cc, str2double.cc, strfns.cc, syscalls.cc,
sysdep.cc, utils.cc, ov-base.cc, ov-base.h, ov-cell.cc, ov-cell.h, ov-class.cc,
ov-class.h, ov-str-mat.cc, ov-str-mat.h, ov.cc, ovl.cc: Replace [x]all_strings
with [x]string_vector_value.

* ov.h(all_strings): Add GCC_ATTR_DEPRECATED warning to function prototype.
Change it to call string_vector_value.
* ov.h(string_vector_value): New prototype to call rep's string_vector_value
function.

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -345,17 +345,17 @@ parameters for @code{daspk}.\n\
                   daspk_fcn = extract_function (f_arg, "daspk", fcn_name,
                                                 fname, "; endfunction");
                 }
               while (0);
               break;
 
             case 2:
               {
-                string_vector tmp = f_arg.all_strings ();
+                string_vector tmp = f_arg.string_vector_value ();
 
                 fcn_name = unique_symbol_name ("__daspk_fcn__");
                 fname = "function y = ";
                 fname.append (fcn_name);
                 fname.append (" (x, xdot, t) y = ");
                 daspk_fcn = extract_function (tmp(0), "daspk", fcn_name,
                                               fname, "; endfunction");
 
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -427,17 +427,17 @@ parameters for @code{dasrt}.\n\
               fname.append (fcn_name);
               fname.append (" (x, xdot, t) y = ");
               dasrt_f = extract_function (f_arg, "dasrt", fcn_name, fname,
                                           "; endfunction");
               break;
 
             case 2:
               {
-                string_vector tmp = args(0).all_strings ();
+                string_vector tmp = args(0).string_vector_value ();
 
                 fcn_name = unique_symbol_name ("__dasrt_fcn__");
                 fname = "function y = ";
                 fname.append (fcn_name);
                 fname.append (" (x, xdot, t) y = ");
                 dasrt_f = extract_function (tmp(0), "dasrt", fcn_name,
                                             fname, "; endfunction");
 
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -346,17 +346,17 @@ parameters for @code{dassl}.\n\
                   dassl_fcn = extract_function (f_arg, "dassl", fcn_name,
                                                 fname, "; endfunction");
                 }
               while (0);
               break;
 
             case 2:
               {
-                string_vector tmp = f_arg.all_strings ();
+                string_vector tmp = f_arg.string_vector_value ();
 
                 fcn_name = unique_symbol_name ("__dassl_fcn__");
                 fname = "function y = ";
                 fname.append (fcn_name);
                 fname.append (" (x, xdot, t) y = ");
                 dassl_fcn = extract_function (tmp(0), "dassl", fcn_name,
                                               fname, "; endfunction");
 
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -474,17 +474,17 @@ glob (\"file[12]\")\n\
       @}\n\
 @end example\n\
 @seealso{ls, dir, readdir, what}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
-  string_vector pat = args(0).xall_strings ("glob: PATTERN must be a string");
+  string_vector pat = args(0).xstring_vector_value ("glob: PATTERN must be a string");
 
   glob_match pattern (file_ops::tilde_expand (pat));
 
   return octave_value (Cell (pattern.glob ()));
 }
 
 /*
 %!test
@@ -535,18 +535,18 @@ fnmatch (\"a*b\", @{\"ab\"; \"axyzb\"; \
 @seealso{glob, regexp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 2)
     print_usage ();
 
-  string_vector pat = args(0).all_strings ();
-  string_vector str = args(1).all_strings ();
+  string_vector pat = args(0).string_vector_value ();
+  string_vector str = args(1).string_vector_value ();
 
   glob_match pattern (file_ops::tilde_expand (pat));
 
   return octave_value (pattern.match (str));
 }
 
 DEFUN (filesep, args, ,
        "-*- texinfo -*-\n\
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1047,17 +1047,17 @@ opengl_renderer::draw_axes_x_grid (const
       std::string gridstyle = props.get_gridlinestyle ();
       std::string minorgridstyle = props.get_minorgridlinestyle ();
       bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
       bool do_xminorgrid = (props.is_xminorgrid ()
                             && (minorgridstyle != "none"));
       bool do_xminortick = props.is_xminortick ();
       Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
       Matrix xmticks = xform.xscale (props.get_xmtick ().matrix_value ());
-      string_vector xticklabels = props.get_xticklabel ().all_strings ();
+      string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
       int wmax = 0;
       int hmax = 0;
       bool tick_along_z = nearhoriz || xisinf (fy);
       bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
       set_color (props.get_xcolor_rgb ());
 
       // grid lines
@@ -1157,17 +1157,17 @@ opengl_renderer::draw_axes_y_grid (const
       std::string gridstyle = props.get_gridlinestyle ();
       std::string minorgridstyle = props.get_minorgridlinestyle ();
       bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
       bool do_yminorgrid = (props.is_yminorgrid ()
                             && (minorgridstyle != "none"));
       bool do_yminortick = props.is_yminortick ();
       Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
       Matrix ymticks = xform.yscale (props.get_ymtick ().matrix_value ());
-      string_vector yticklabels = props.get_yticklabel ().all_strings ();
+      string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
       int wmax = 0;
       int hmax = 0;
       bool tick_along_z = nearhoriz || xisinf (fx);
       bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                     && (! props.has_property ("__plotyy_axes__"));
 
       set_color (props.get_ycolor_rgb ());
 
@@ -1258,17 +1258,17 @@ opengl_renderer::draw_axes_z_grid (const
       std::string gridstyle = props.get_gridlinestyle ();
       std::string minorgridstyle = props.get_minorgridlinestyle ();
       bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
       bool do_zminorgrid = (props.is_zminorgrid ()
                             && (minorgridstyle != "none"));
       bool do_zminortick = props.is_zminortick ();
       Matrix zticks = xform.zscale (props.get_ztick ().matrix_value ());
       Matrix zmticks = xform.zscale (props.get_zmtick ().matrix_value ());
-      string_vector zticklabels = props.get_zticklabel ().all_strings ();
+      string_vector zticklabels = props.get_zticklabel ().string_vector_value ();
       int wmax = 0;
       int hmax = 0;
       bool mirror = props.is_box () && zstate != AXE_ANY_DIR;
 
       set_color (props.get_zcolor_rgb ());
 
       // grid lines
       if (do_zgrid)
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -602,17 +602,17 @@ glps_renderer::draw_text (const text::pr
     valign = 3;
   else if (props.verticalalignment_is ("middle"))
     valign = 1;
 
   // FIXME: handle margin and surrounding box
 
   Matrix bbox;
   const Matrix pos = get_transform ().scale (props.get_data_position ());
-  std::string str = props.get_string ().all_strings ().join ("\n");
+  std::string str = props.get_string ().string_vector_value ().join ("\n");
 
   render_text (str, pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0,
                halign, valign, props.get_rotation ());
 }
 
 static void
 safe_pclose (FILE *f)
 {
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -5657,17 +5657,17 @@ axes::properties::update_xlabel_position
 
   if (xlabel_props.positionmode_is ("auto")
       || xlabel_props.rotationmode_is ("auto"))
     {
       graphics_xform xform = get_transform ();
 
       Matrix ext (1, 2, 0.0);
       ext = get_ticklabel_extents (get_xtick ().matrix_value (),
-                                   get_xticklabel ().all_strings (),
+                                   get_xticklabel ().string_vector_value (),
                                    get_xlim ().matrix_value ());
 
       double wmax = ext(0);
       double hmax = ext(1);
       double angle = 0.0;
       ColumnVector p =
         graphics_xform::xform_vector ((xpTickN + xpTick)/2, ypTick, zpTick);
 
@@ -5767,17 +5767,17 @@ axes::properties::update_ylabel_position
       // x-extent accurately measures the width of the glyphs.
       // y-extent instead measures from baseline-to-baseline.
       // Pad x-extent (+4) so that it approximately matches y-extent.
       // This keeps ylabels about the same distance from y-axis as
       // xlabels are from x-axis.
       // ALWAYS use an even number for padding or horizontal alignment
       // will be off.
       ext = get_ticklabel_extents (get_ytick ().matrix_value (),
-                                   get_yticklabel ().all_strings (),
+                                   get_yticklabel ().string_vector_value (),
                                    get_ylim ().matrix_value ());
 
       double wmax = ext(0)+4;
       double hmax = ext(1);
       double angle = 0.0;
       ColumnVector p =
         graphics_xform::xform_vector (xpTick, (ypTickN + ypTick)/2, zpTick);
 
@@ -5870,17 +5870,17 @@ axes::properties::update_zlabel_position
 
   if (zlabel_props.positionmode_is ("auto")
       || zlabel_props.rotationmode_is ("auto"))
     {
       graphics_xform xform = get_transform ();
 
       Matrix ext (1, 2, 0.0);
       ext = get_ticklabel_extents (get_ztick ().matrix_value (),
-                                   get_zticklabel ().all_strings (),
+                                   get_zticklabel ().string_vector_value (),
                                    get_zlim ().matrix_value ());
 
       double wmax = ext(0);
       double hmax = ext(1);
       double angle = 0.0;
       ColumnVector p;
 
       if (xySym)
@@ -5980,17 +5980,17 @@ axes::properties::update_title_position 
         graphics_xform::xform_vector (bbox(0) + bbox(2)/2,
                                       bbox(1) - 10,
                                       (x_zlim(0) + x_zlim(1))/2);
 
       if (x2Dtop)
         {
           Matrix ext (1, 2, 0.0);
           ext = get_ticklabel_extents (get_xtick ().matrix_value (),
-                                       get_xticklabel ().all_strings (),
+                                       get_xticklabel ().string_vector_value (),
                                        get_xlim ().matrix_value ());
           p(1) -= ext(1);
         }
 
       p = xform.untransform (p(0), p(1), p(2), true);
 
       p = convert_label_position (p, title_props, xform, bbox);
 
@@ -7978,17 +7978,17 @@ text::properties::update_text_extent (vo
     valign = 4;
 
   Matrix bbox;
 
   // FIXME: string should be parsed only when modified, for efficiency
 
   octave_value string_prop = get_string ();
 
-  string_vector sv = string_prop.all_strings ();
+  string_vector sv = string_prop.string_vector_value ();
 
   renderer.text_to_pixels (sv.join ("\n"), pixels, bbox,
                            halign, valign, get_rotation (),
                            get_interpreter ());
   // The bbox is relative to the text's position.  We'll leave it that
   // way, because get_position does not return valid results when the
   // text is first constructed.  Conversion to proper coordinates is
   // performed in get_extent.
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -752,17 +752,17 @@ public:
   base_property* clone (void) const { return new text_label_property (*this); }
 
 protected:
 
   bool do_set (const octave_value& val)
   {
     if (val.is_string ())
       {
-        value = val.all_strings ();
+        value = val.string_vector_value ();
 
         stored_type = char_t;
       }
     else if (val.is_cell ())
       {
         Cell c = val.cell_value ();
 
         octave_idx_type nel = c.numel ();
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -346,17 +346,17 @@ parameters for @code{lsode}.\n\
                   lsode_fcn = extract_function (f_arg, "lsode", fcn_name,
                                                 fname, "; endfunction");
                 }
               while (0);
               break;
 
             case 2:
               {
-                string_vector tmp = f_arg.all_strings ();
+                string_vector tmp = f_arg.string_vector_value ();
 
                 fcn_name = unique_symbol_name ("__lsode_fcn__");
                 fname = "function y = ";
                 fname.append (fcn_name);
                 fname.append (" (x, t) y = ");
                 lsode_fcn = extract_function (tmp(0), "lsode", fcn_name,
                                               fname, "; endfunction");
 
diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -349,17 +349,17 @@ risk of using @code{eval} on unknown dat
   if (args(0).is_string ())
     {
       if (args(0).rows () == 0 || args(0).columns () == 0)
         retval = Matrix (1, 1, octave_NaN);
       else if (args(0).rows () == 1 && args(0).ndims () == 2)
         retval = str2double1 (args(0).string_value ());
       else
         {
-          const string_vector sv = args(0).all_strings ();
+          const string_vector sv = args(0).string_vector_value ();
 
           retval = sv.map<Complex> (str2double1);
         }
     }
   else if (args(0).is_cell ())
     {
       const Cell cell = args(0).cell_value ();
 
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -90,17 +90,17 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
       int n_elts = 0;
 
       int max_len = 0;
 
       std::queue<string_vector> args_as_strings;
 
       for (int i = 0; i < nargin; i++)
         {
-          string_vector s = args(i).xall_strings ("char: unable to convert some args to strings");
+          string_vector s = args(i).xstring_vector_value ("char: unable to convert some args to strings");
 
           if (s.numel () > 0)
             n_elts += s.numel ();
           else
             n_elts += 1;
 
           int s_max_len = s.max_length ();
 
@@ -205,17 +205,17 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
 
   int nargin = args.length ();
   int n_elts = 0;
   size_t max_len = 0;
   std::queue<string_vector> args_as_strings;
 
   for (int i = 0; i < nargin; i++)
     {
-      string_vector s = args(i).xall_strings ("strvcat: unable to convert some args to strings");
+      string_vector s = args(i).xstring_vector_value ("strvcat: unable to convert some args to strings");
 
       size_t n = s.numel ();
 
       // do not count empty strings in calculation of number of elements
       if (n > 0)
         {
           for (size_t j = 0; j < n; j++)
             {
@@ -341,17 +341,17 @@ do_strcmp_fun (const octave_value& arg0,
         }
       else
         {
           str_val = arg1;
           cell_val = arg0;
         }
 
       const Cell cell = cell_val.cell_value ();
-      const string_vector str = str_val.all_strings ();
+      const string_vector str = str_val.string_vector_value ();
       octave_idx_type r = str.numel ();
 
       if (r == 0 || r == 1)
         {
           // Broadcast the string.
 
           boolNDArray output (cell_val.dims (), false);
 
@@ -842,17 +842,17 @@ whos ans\n\
 @seealso{terminal_size}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
-  string_vector s = args(0).xall_strings ("list_in_columns: ARG must be a cellstr or char array");
+  string_vector s = args(0).xstring_vector_value ("list_in_columns: ARG must be a cellstr or char array");
 
   int width = -1;
 
   if (nargin > 1 && ! args(1).is_empty ())
     width = args(1).xint_value ("list_in_columns: WIDTH must be an integer");
 
   std::string prefix;
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -157,17 +157,17 @@ error message.\n\
     print_usage ();
 
   std::string exec_file = args(0).xstring_value ("exec: FILE must be a string");
 
   string_vector exec_args;
 
   if (nargin == 2)
     {
-      string_vector tmp = args(1).xall_strings ("exec: all arguments must be strings");
+      string_vector tmp = args(1).xstring_vector_value ("exec: all arguments must be strings");
 
       int len = tmp.numel ();
 
       exec_args.resize (len + 1);
 
       exec_args[0] = exec_file;
 
       for (int i = 0; i < len; i++)
@@ -245,17 +245,17 @@ exit status, it will linger until Octave
     print_usage ();
 
   std::string exec_file = args(0).xstring_value ("popen2: COMMAND argument must be a string");
 
   string_vector arg_list;
 
   if (nargin >= 2)
     {
-      string_vector tmp = args(1).xall_strings ("popen2: all arguments must be strings");
+      string_vector tmp = args(1).xstring_vector_value ("popen2: all arguments must be strings");
 
       int len = tmp.numel ();
 
       arg_list.resize (len + 1);
 
       arg_list[0] = exec_file;
 
       for (int i = 0; i < len; i++)
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -882,17 +882,17 @@ tilde_expand (\"~/bin\")\n\
 @end example\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
-  string_vector sv = arg.xall_strings ("tilde_expand: argument must be char or cellstr object");
+  string_vector sv = arg.xstring_vector_value ("tilde_expand: argument must be char or cellstr object");
 
   sv = file_ops::tilde_expand (sv);
 
   if (arg.is_cellstr ())
     return ovl (Cell (arg.dims (), sv));
   else
     return ovl (sv);
 }
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -308,17 +308,17 @@ If no files are found, return an empty c
 @seealso{file_in_path, dir_in_loadpath, path}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
-  string_vector names = args(0).xall_strings ("file_in_loadpath: FILE argument must be a string");
+  string_vector names = args(0).xstring_vector_value ("file_in_loadpath: FILE argument must be a string");
 
   if (names.empty ())
     error ("file_in_loadpath: FILE argument must not be empty");
 
   if (nargin == 1)
     return ovl (octave_env::make_absolute (load_path::find_first_of (names)));
   else
     {
@@ -379,17 +379,17 @@ If no files are found, return an empty c
 {
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   std::string path = args(0).xstring_value ("file_in_path: PATH must be a string");
 
-  string_vector names = args(1).xall_strings ("file_in_path: FILE argument must be a string");
+  string_vector names = args(1).xstring_vector_value ("file_in_path: FILE argument must be a string");
 
   if (names.empty ())
     error ("file_in_path: FILE argument must not be empty");
 
   if (nargin == 2)
     return ovl (search_path_for_file (path, names));
   else
     {
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -875,23 +875,23 @@ octave_base_value::uint64_array_value (v
 {
   uint64NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint64_array_value()",
                         type_name ());
   return retval;
 }
 
 string_vector
-octave_base_value::all_strings (bool pad) const
+octave_base_value::string_vector_value (bool pad) const
 {
   string_vector retval;
 
   octave_value tmp = convert_to_str (pad, true);
 
-  retval = tmp.all_strings ();
+  retval = tmp.string_vector_value ();
 
   return retval;
 }
 
 std::string
 octave_base_value::string_value (bool force) const
 {
   std::string retval;
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -555,17 +555,17 @@ public:
   virtual uint8NDArray uint8_array_value (void) const;
 
   virtual uint16NDArray uint16_array_value (void) const;
 
   virtual uint32NDArray uint32_array_value (void) const;
 
   virtual uint64NDArray uint64_array_value (void) const;
 
-  virtual string_vector all_strings (bool pad = false) const;
+  virtual string_vector string_vector_value (bool pad = false) const;
 
   virtual std::string string_value (bool force = false) const;
 
   virtual Array<std::string> cellstr_value (void) const;
 
   virtual Range range_value (void) const;
 
   virtual octave_map map_value (void) const;
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -543,31 +543,31 @@ octave_cell::is_true (void) const
 
 octave_value_list
 octave_cell::list_value (void) const
 {
   return octave_value_list (matrix);
 }
 
 string_vector
-octave_cell::all_strings (bool pad) const
+octave_cell::string_vector_value (bool pad) const
 {
   string_vector retval;
 
   octave_idx_type nel = numel ();
 
   int n_elts = 0;
 
   octave_idx_type max_len = 0;
 
   std::queue<string_vector> strvec_queue;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      string_vector s = matrix(i).all_strings ();
+      string_vector s = matrix(i).string_vector_value ();
 
       octave_idx_type s_len = s.numel ();
 
       n_elts += s_len ? s_len : 1;
 
       octave_idx_type s_max_len = s.max_length ();
 
       if (s_max_len > max_len)
@@ -1275,17 +1275,17 @@ To convert back from a cellstr to a char
   octave_value retval;
 
   octave_value_list tmp = Fiscellstr (args, 1);
 
   if (tmp(0).is_true ())
     return ovl (args(0));
   else
     {
-      string_vector s = args(0).xall_strings ("cellstr: argument STRING must be a 2-D character array");
+      string_vector s = args(0).xstring_vector_value ("cellstr: argument STRING must be a 2-D character array");
 
       return ovl (s.is_empty () ? Cell (octave_value (std::string ()))
                                 : Cell (s, true));
     }
 }
 
 DEFUN (struct2cell, args, ,
        "-*- texinfo -*-\n\
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -133,19 +133,19 @@ public:
 
   bool is_true (void) const;
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
-  { return octave_value (all_strings (pad), type); }
+  { return octave_value (string_vector_value (pad), type); }
 
-  string_vector all_strings (bool pad = false) const;
+  string_vector string_vector_value (bool pad = false) const;
 
   Array<std::string> cellstr_value (void) const;
 
   Array<std::string> cellstr_value (const char *fmt, ...) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -942,17 +942,17 @@ octave_class::is_instance_of (const std:
             break;
         }
     }
 
   return retval;
 }
 
 string_vector
-octave_class::all_strings (bool pad) const
+octave_class::string_vector_value (bool pad) const
 {
   string_vector retval;
 
   octave_value meth = symbol_table::find_method ("char", class_name ());
 
   if (! meth.is_defined ())
     error ("no char method defined for class %s", class_name ().c_str ());
 
@@ -961,17 +961,17 @@ octave_class::all_strings (bool pad) con
 
   octave_value_list tmp = feval (meth.function_value (), args, 1);
 
   if (tmp.length () >= 1)
     {
       if (! tmp(0).is_string ())
         error ("cname/char method did not return a string");
 
-      retval = tmp(0).all_strings (pad);
+      retval = tmp(0).string_vector_value (pad);
     }
 
   return retval;
 }
 
 
 void
 octave_class::print (std::ostream& os, bool)
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -163,17 +163,17 @@ public:
   { return string_vector (parent_list); }
 
   octave_base_value *find_parent_class (const std::string&);
 
   octave_base_value *unique_parent_class (const std::string&);
 
   bool is_instance_of (const std::string&) const;
 
-  string_vector all_strings (bool pad) const;
+  string_vector string_vector_value (bool pad) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name,
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -209,17 +209,17 @@ octave_char_matrix_str::array_value (boo
 ComplexNDArray
 octave_char_matrix_str::complex_array_value (bool force_string_conv) const
 {
   CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-d array",
                     complex_array_value);
 }
 
 string_vector
-octave_char_matrix_str::all_strings (bool) const
+octave_char_matrix_str::string_vector_value (bool) const
 {
   string_vector retval;
 
   if (matrix.ndims () != 2)
     error ("invalid conversion of charNDArray to string_vector");
 
   charMatrix chm (matrix);
 
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -120,17 +120,17 @@ public:
   NDArray array_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
-  string_vector all_strings (bool pad = false) const;
+  string_vector string_vector_value (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   std::string xstring_value (void) const { return string_value (); }
 
   Array<std::string> cellstr_value (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1962,17 +1962,17 @@ XVALUE_EXTRACTOR (int32NDArray, xint32_a
 XVALUE_EXTRACTOR (int64NDArray, xint64_array_value, int64_array_value)
 
 XVALUE_EXTRACTOR (uint8NDArray, xuint8_array_value, uint8_array_value)
 XVALUE_EXTRACTOR (uint16NDArray, xuint16_array_value, uint16_array_value)
 XVALUE_EXTRACTOR (uint32NDArray, xuint32_array_value, uint32_array_value)
 XVALUE_EXTRACTOR (uint64NDArray, xuint64_array_value, uint64_array_value)
 
 XVALUE_EXTRACTOR (std::string, xstring_value, rep->xstring_value)
-XVALUE_EXTRACTOR (string_vector, xall_strings, all_strings)
+XVALUE_EXTRACTOR (string_vector, xstring_vector_value, string_vector_value)
 
 XVALUE_EXTRACTOR (Cell, xcell_value, cell_value)
 XVALUE_EXTRACTOR (Array<std::string>, xcellstr_value, cellstr_value)
 
 XVALUE_EXTRACTOR (Range, xrange_value, range_value)
 
 XVALUE_EXTRACTOR (octave_map, xmap_value, map_value)
 XVALUE_EXTRACTOR (octave_scalar_map, xscalar_map_value, scalar_map_value)
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -887,18 +887,21 @@ public:
   { return rep->uint32_array_value (); }
 
   uint64NDArray uint64_array_value (void) const
   { return rep->uint64_array_value (); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
-  string_vector all_strings (bool pad = false) const
-  { return rep->all_strings (pad); }
+  string_vector string_vector_value (bool pad = false) const
+  { return rep->string_vector_value (pad); }
+
+  string_vector all_strings (bool pad = false) const GCC_ATTR_DEPRECATED
+  { return string_vector_value (pad); }
 
   Cell cell_value (void) const;
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
   Range range_value (void) const
   { return rep->range_value (); }
@@ -1106,17 +1109,17 @@ public:
   uint16NDArray xuint16_array_value (const char *fmt, ...) const;
 
   uint32NDArray xuint32_array_value (const char *fmt, ...) const;
 
   uint64NDArray xuint64_array_value (const char *fmt, ...) const;
 
   std::string xstring_value (const char *fmt, ...) const;
 
-  string_vector xall_strings (const char *fmt, ...) const;
+  string_vector xstring_vector_value (const char *fmt, ...) const;
 
   Cell xcell_value (const char *fmt, ...) const;
 
   Array<std::string> xcellstr_value (const char *fmt, ...) const;
 
   Range xrange_value (const char *fmt, ...) const;
 
   octave_map xmap_value (const char *fmt, ...) const;
diff --git a/libinterp/octave-value/ovl.cc b/libinterp/octave-value/ovl.cc
--- a/libinterp/octave-value/ovl.cc
+++ b/libinterp/octave-value/ovl.cc
@@ -244,17 +244,17 @@ octave_value_list::make_argv (const std:
       for (octave_idx_type i = 0; i < len; i++)
         {
           octave_idx_type nr = elem(i).rows ();
 
           if (nr < 2)
             argv[k++] = elem(i).string_value ();
           else
             {
-              string_vector tmp = elem(i).all_strings ();
+              string_vector tmp = elem(i).string_vector_value ();
 
               for (octave_idx_type j = 0; j < nr; j++)
                 argv[k++] = tmp[j];
             }
         }
     }
   else
     error ("%s: all arguments must be strings", fcn_name.c_str ());
