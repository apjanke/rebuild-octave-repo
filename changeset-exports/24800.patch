# HG changeset patch
# User Rik <rik@octave.org>
# Date 1519750641 28800
#      Tue Feb 27 08:57:21 2018 -0800
# Node ID 2dc04b6e1740ca9d01e89eac598c8482596c4333
# Parent  74a596fd6bab29a79af41a3974fba65742929d2e
Don't create new figure when calling colormap functions (bug #53217).

* autumn.m, bone.m, contrast.m, cool.m, copper.m, cubehelix.m, flag.m,
gray.m, hot.m, hsv.m, jet.m, lines.m, ocean.m, pink.m, prism.m, rainbow.m,
spring.m, summer.m, viridis.m, white.m, winter.m: Check root figure for
a CurrentFigure and use the number of rows in its colormap if it is
available.  Otherwise, use default of 64.

diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = autumn (n = rows (colormap ()))
+function map = autumn (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("autumn: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("autumn: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     r = ones (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = zeros (n, 1);
     map = [r, g, b];
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = bone (n = rows (colormap ()))
+function map = bone (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("bone: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("bone: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [1/8 1/8 1/8];
   elseif (n == 2)
     map = [1/16 1/8 1/8
             1    1   1 ];
   elseif (n > 2)
     x = [0:n-1]' / (n-1);
diff --git a/scripts/image/contrast.m b/scripts/image/contrast.m
--- a/scripts/image/contrast.m
+++ b/scripts/image/contrast.m
@@ -23,24 +23,30 @@
 ##
 ## The returned colormap will have @var{n} rows.  If @var{n} is not defined
 ## then the size of the current colormap is used.
 ## @seealso{colormap, brighten}
 ## @end deftypefn
 
 function cmap = contrast (x, n)
 
-  if (nargin == 1)
-    n = rows (colormap ());
-  elseif (nargin == 2)
+  if (nargin > 2)
+    print_usage ();
+  elseif (nargin == 1)
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
+  else
     if (! isscalar (n))
       error ("contrast: N must be a scalar");
     endif
-  else
-    print_usage ();
+    n = double (n);
   endif
 
   x = x(:);
   minx = min (x);
   cmap = find (diff (sort ([round(n * ((x - minx) ./ (max(x) - minx))); [0:n]'])));
   minm = min (cmap);
   cmap = (cmap - minm) ./ (max (cmap) - minm);
   cmap = [cmap, cmap, cmap];
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -23,24 +23,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = cool (n = rows (colormap ()))
+function map = cool (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("cool: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("cool: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 1, 1];
   elseif (n > 1)
     r = [0:(n-1)]' / (n - 1);
     g = 1 - r;
     b = ones (n, 1);
     map = [r, g, b];
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = copper (n = rows (colormap ()))
+function map = copper (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("copper: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("copper: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     x = [0:(n-1)]' / (n - 1);
     r = (x < 4/5) .* (5/4 * x) ...
       + (x >= 4/5);
     g = 0.7812 * x;
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -38,26 +38,34 @@
 ## @cite{"A @nospell{colour} scheme for the display of astronomical intensity
 ## images"}, Bulletin of the Astronomical Society of India, 39, 289.
 ##
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: CarnÃ« Draug <carandraug@octave.org>
 
-function map = cubehelix (n = rows (colormap ()), start = 0.5,
-                          rots = -1.5, hue = 1, gamma = 1)
+function map = cubehelix (n, start = 0.5, rots = -1.5, hue = 1, gamma = 1)
 
   if (nargin > 5)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("cubehelix: N must be a scalar");
+  elseif (nargin > 0)
+    if (! isscalar (n))
+      error ("cubehelix: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
 
-  n = double (n);
   if (n > 1)
     coeff = [ -0.14861  -0.29227   1.97294
                1.78277  -0.90649   0.00000];
 
     fract = ((0:n-1) / (n-1))';
     angle = 2 * pi * (start/3 + 1 + rots*fract);
     fract .^= gamma;
     amp   = hue * fract .* (1-fract) /2;
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = flag (n = rows (colormap ()))
+function map = flag (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("flag: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("flag: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     C = [1, 0, 0; 1, 1, 1; 0, 0, 1; 0, 0, 0];
     map = C(rem (0:(n-1), 4) + 1, :);
   else
     map = zeros (0, 3);
   endif
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -26,24 +26,33 @@
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function map = gray (n = rows (colormap ()))
+function map = gray (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("gray: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("gray: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     gr = [0:(n-1)]' / (n - 1);
     map = [gr, gr, gr];
   else
     map = zeros (0, 3);
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = hot (n = rows (colormap ()))
+function map = hot (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("hot: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("hot: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = [1, 1, 1];
   elseif (n == 2)
     map = [1, 1, 1/2
            1, 1,  1 ];
   elseif (n > 2)
     idx = floor (3/8 * n);
     nel = idx;
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -28,24 +28,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = hsv (n = rows (colormap ()))
+function map = hsv (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("hsv: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("hsv: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     hue = [0:n-1]' / n;
     map = hsv2rgb ([hue, ones(n,1), ones(n,1)]);
   else
     map = zeros (0, 3);
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = jet (n = rows (colormap ()))
+function map = jet (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("jet: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("jet: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = [0, 1, 1];
   elseif (n == 2)
     map = [0, 0, 1
            0, 1, 1];
   elseif (n > 2)
     nel = ceil (n/4);           # number of elements
     idx1 = ceil (3/8 * n) + 1;  # ~3/8*n for large n
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -23,24 +23,33 @@
 ## in the current axes @qcode{"ColorOrder"} property.  The default is blue,
 ## orange, yellow, purple, green, light blue, and dark red.
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
-function map = lines (n = rows (colormap ()))
+function map = lines (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("lines: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("lines: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = [0, 0, 1];
   elseif (n > 1)
     C = get (gca, "colororder");
     nr = rows (C);
     map = C(rem (0:(n-1), nr) + 1, :);
   else
     map = zeros (0, 3);
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -26,24 +26,33 @@
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function map = ocean (n = rows (colormap ()))
+function map = ocean (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("ocean: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("ocean: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     cutin = fix (n/3);
 
     dr = (n - 1) / cutin;
     r = prepad ([0:dr:(n-1)], n)';
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -26,24 +26,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = pink (n = rows (colormap ()))
+function map = pink (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("pink: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("pink: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = sqrt ([1/3, 1/3, 1/3]);
   elseif (n == 2)
     map = sqrt ([1/3, 1/3, 1/6
                   1    1    1 ]);
   elseif (n > 2)
     x = [0:(n-1)]' / (n-1);
     idx = floor (3/8 * n);
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -24,24 +24,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = prism (n = rows (colormap ()))
+function map = prism (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("prism: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("prism: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   if (n == 1)
     map = [1 0 0];
   elseif (n > 1)
     C = [1, 0, 0; 1, 1/2, 0; 1, 1, 0; 0, 1, 0; 0, 0, 1; 2/3, 0, 1];
     map = C(rem (0:(n-1), 6) + 1, :);
   else
     map = zeros (0, 3);
   endif
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -27,24 +27,33 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## this colormap is not part of matlab, it is like the prism
 ## colormap map but with a continuous map
 
-function map = rainbow (n = rows (colormap ()))
+function map = rainbow (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("rainbow: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("rainbow: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     x = [0:(n-1)]' / (n - 1);
 
     r = (  (x < 2/5)
          + (x >= 2/5 & x < 3/5) .* (-5 * x + 3)
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -23,24 +23,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = spring (n = rows (colormap ()))
+function map = spring (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("spring: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("spring: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [1, 0, 1];
   elseif (n > 1)
     r = ones (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = 1 - g;
     map = [r, g, b];
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -24,24 +24,33 @@
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date:  06/03/2000
 
-function map = summer (n = rows (colormap ()))
+function map = summer (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("summer: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("summer: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 0.5, 0.4];
   elseif (n > 1)
     r = [0:(n-1)]' / (n - 1);
     g = 0.5 + r / 2;
     b = 0.4 * ones (n, 1);
     map = [r, g, b];
diff --git a/scripts/image/viridis.m b/scripts/image/viridis.m
--- a/scripts/image/viridis.m
+++ b/scripts/image/viridis.m
@@ -31,24 +31,33 @@
 ## @end deftypefn
 
 ## Author: Carlo de Falco
 
 ## This is a port to Octave of the default matplotlib colormap "viridis"
 ## by Eric Firing.  The original file is distributed under CC0:
 ## http://creativecommons.org/publicdomain/zero/1.0
 
-function map = viridis (n = rows (colormap ()))
+function map = viridis (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("viridis: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("viridis: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   ## FIXME: Is there no algorithmic definition of the viridis colormap?
   persistent viridi = [0.26700401  0.00487433  0.32941519
                        0.26851048  0.00960483  0.33542652
                        0.26994384  0.01462494  0.34137895
                        0.27130489  0.01994186  0.34726862
                        0.27259384  0.02556309  0.35309303
                        0.27380934  0.03149748  0.35885256
                        0.27495242  0.03775181  0.36454323
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -23,24 +23,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = white (n = rows (colormap ()))
+function map = white (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("white: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("white: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-
   map = ones (n, 3);
 
 endfunction
 
 
 %!demo
 %! ## Show the 'white' colormap profile and as an image
 %! cmap = white (256);
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -23,24 +23,33 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
-function map = winter (n = rows (colormap ()))
+function map = winter (n)
 
   if (nargin > 1)
     print_usage ();
-  elseif (! isscalar (n))
-    error ("winter: N must be a scalar");
+  elseif (nargin == 1)
+    if (! isscalar (n))
+      error ("winter: N must be a scalar");
+    endif
+    n = double (n);
+  else
+    hf = get (0, "currentfigure");
+    if (! isempty (hf))
+      n = rows (get (hf, "colormap"));
+    else
+      n = 64;
+    endif
   endif
-  n = double (n);
 
   if (n == 1)
     map = [0, 0, 1];
   elseif (n > 1)
     r = zeros (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = 1 - g / 2;
     map = [r, g, b];
