# HG changeset patch
# User jwe
# Date 865375841 0
#      Tue Jun 03 22:10:41 1997 +0000
# Node ID 92aa3d651723b478c273279fdce28681aff712a4
# Parent  5708b8bb4f06e45817501e89e366f4b3254b40ac
[project @ 1997-06-03 22:07:16 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -71,45 +71,54 @@ Software Foundation, 59 Temple Place - S
 static string Vps1;
 
 // Secondary prompt string.
 static string Vps2;
 
 // String printed before echoed input (enabled by --echo-input).
 string Vps4;
 
+// Echo commands as they are executed?
+//
+//   1  ==>  echo commands read from script files
+//   2  ==>  echo commands from functions
+//   4  ==>  echo commands read from command line
+//
+// more than one state can be active at once.
+int Vecho_executing_commands;
+
 // Character to append after successful command-line completion attempts.
 static char Vcompletion_append_char;
 
 // Global pointer for eval().
 string current_eval_string;
 
-// Nonzero means get input from current_eval_string.
-int get_input_from_eval_string = 0;
+// TRUE means get input from current_eval_string.
+bool get_input_from_eval_string = false;
 
-// Nonzero means we're parsing a function file.
-int reading_fcn_file = 0;
+// TRUE means we're parsing a function file.
+bool reading_fcn_file = false;
 
 // Simple name of function file we are reading.
 string curr_fcn_file_name;
 
 // Full name of file we are reading.
 string curr_fcn_file_full_name;
 
-// Nonzero means we're parsing a script file.
-int reading_script_file = 0;
+// TRUE means we're parsing a script file.
+bool reading_script_file = false;
 
 // If we are reading from an M-file, this is it.
 FILE *ff_instream = 0;
 
-// Nonzero means this is an interactive shell.
-int interactive = 0;
+// TRUE means this is an interactive shell.
+bool interactive = false;
 
-// Nonzero means the user forced this shell to be interactive (-i).
-int forced_interactive = 0;
+// TRUE means the user forced this shell to be interactive (-i).
+bool forced_interactive = false;
 
 // Should we issue a prompt?
 int promptflag = 1;
 
 // The current line of input, from wherever.
 string current_input_line;
 
 // TRUE after a call to completion_matches().
@@ -782,29 +791,41 @@ completion_append_char (void)
       warning ("completion_append_char must be a single character");
       status = -1;
       break;
     }
 
   return status;
 }
 
+static int
+echo_executing_commands (void)
+{
+  Vecho_executing_commands = check_preference ("echo_executing_commands"); 
+
+  return 0;
+}
+
 void
 symbols_of_input (void)
 {
   DEFVAR (PS1, "\\s:\\#> ", 0, ps1,
     "primary prompt string");
 
   DEFVAR (PS2, "> ", 0, ps2,
     "secondary prompt string");
 
   DEFVAR (PS4, "+ ", 0, ps4,
     "string printed before echoed input (enabled by --echo-input)");
 
   DEFVAR (completion_append_char, " ", 0, completion_append_char,
     "the string to append after successful command-line completion attempts");
+
+  DEFVAR (echo_executing_commands, static_cast<double> (ECHO_OFF), 0,
+	  echo_executing_commands,
+    "echo commands as they are executed");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -31,54 +31,64 @@ Software Foundation, 59 Temple Place - S
 
 extern int octave_read (char *buf, unsigned max_size);
 extern FILE *get_input_from_file (const string& name, int warn = 1);
 extern FILE *get_input_from_stdin (void);
 
 // Global pointer for eval().
 extern string current_eval_string;
 
-// Nonzero means get input from current_eval_string.
-extern int get_input_from_eval_string;
+// TRUE means get input from current_eval_string.
+extern bool get_input_from_eval_string;
 
-// Nonzero means we're parsing a function file.
-extern int reading_fcn_file;
+// TRUE means we're parsing a function file.
+extern bool reading_fcn_file;
 
 // Simple name of function file we are reading.
 extern string curr_fcn_file_name;
 
 // Full name of file we are reading.
 extern string curr_fcn_file_full_name;
 
-// Nonzero means we're parsing a script file.
-extern int reading_script_file;
+// TRUE means we're parsing a script file.
+extern bool reading_script_file;
 
 // If we are reading from an M-file, this is it.
 extern FILE *ff_instream;
 
-// Nonzero means this is an interactive shell.
-extern int interactive;
+// TRUE means this is an interactive shell.
+extern bool interactive;
 
-// Nonzero means the user forced this shell to be interactive (-i).
-extern int forced_interactive;
+// TRUE means the user forced this shell to be interactive (-i).
+extern bool forced_interactive;
 
 // Should we issue a prompt?
 extern int promptflag;
 
 // A line of input.
 extern string current_input_line;
 
 // TRUE after a call to completion_matches().
 extern bool octave_completion_matches_called;
 
 extern string gnu_readline (const string& s, bool force_readline = false);
 
 extern void initialize_command_input (void);
 
 extern string Vps4;
 
+enum echo_state
+{
+  ECHO_OFF = 0,
+  ECHO_SCRIPTS = 1,
+  ECHO_FUNCTIONS = 2,
+  ECHO_CMD_LINE = 4
+};
+
+extern int Vecho_executing_commands;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -73,17 +73,17 @@ enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_ASCII,
     LS_MAT_BINARY,
     LS_UNKNOWN,
   };
 
-// Return nonzero if S is a valid identifier.
+// Return TRUE if S is a valid identifier.
 
 static bool
 valid_identifier (const char *s)
 {
   if (! s || ! (isalnum (*s) || *s == '_'))
      return false;
 
   while (*++s != '\0')
@@ -98,33 +98,33 @@ valid_identifier (const string& s)
 {
   return valid_identifier (s.c_str ());
 }
 
 // XXX FIXME XXX -- shouldn't this be implemented in terms of other
 // functions that are already available?
 
 // Install a variable with name NAME and the value specified TC in the
-// symbol table.  If FORCE is nonzero, replace any existing definition
-// for NAME.  If GLOBAL is nonzero, make the variable global.
+// symbol table.  If FORCE is TRUE, replace any existing definition
+// for NAME.  If GLOBAL is TRUE, make the variable global.
 //
 // Assumes TC is defined.
 
 static void
 install_loaded_variable (int force, char *name, const octave_value& val,
 			 int global, char *doc)
 {
   // Is there already a symbol by this name?  If so, what is it?
 
   symbol_record *lsr = curr_sym_tab->lookup (name);
 
-  int is_undefined = 1;
-  int is_variable = 0;
-  int is_function = 0;
-  int is_global = 0;
+  bool is_undefined = true;
+  bool is_variable = false;
+  bool is_function = false;
+  bool is_global = false;
 
   if (lsr)
     {
       is_undefined = ! lsr->is_defined ();
       is_variable = lsr->is_variable ();
       is_function = lsr->is_function ();
       is_global = lsr->is_linked_to_global ();
     }
@@ -327,26 +327,26 @@ extract_keyword (istream& is, const char
 	  *(ptr+1) = '\0';
 	}
     }
 
   return retval;
 }
 
 // Match KEYWORD on stream IS, placing the associated value in VALUE,
-// returning 1 if successful and 0 otherwise.
+// returning TRUE if successful and FALSE otherwise.
 //
 // Input should look something like:
 //
 //  [ \t]*keyword[ \t]*int-value.*\n
 
-static int
+static bool
 extract_keyword (istream& is, const char *keyword, int& value)
 {
-  int status = 0;
+  bool status = false;
   value = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '#')
 	{
 	  ostrstream buf;
@@ -369,29 +369,29 @@ extract_keyword (istream& is, const char
 	    {
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      is.putback (c);
 	      if (c != '\n')
 		is >> value;
 	      if (is)
-		status = 1;
+		status = true;
 	      while (is.get (c) && c != '\n')
 		; // Skip to beginning of next line;
 	      break;
 	    }
 	}
     }
   return status;
 }
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.  If the value
-// is tagged as global in the file, return nonzero in GLOBAL.
+// is tagged as global in the file, return TRUE in GLOBAL.
 //
 // FILENAME is used for error messages.
 //
 // The data is expected to be in the following format:
 //
 // The input file must have a header followed by some data.
 //
 // All lines in the header must begin with a `#' character.
@@ -458,17 +458,17 @@ extract_keyword (istream& is, const char
 //  string
 //  # length: 5
 //  array
 //
 // XXX FIXME XXX -- this format is fairly rigid, and doesn't allow for
 // arbitrary comments, etc.  Someone should fix that.
 
 static char *
-read_ascii_data (istream& is, const string& filename, int& global,
+read_ascii_data (istream& is, const string& filename, bool& global,
 		 octave_value& tc)
 {
   // Read name for this entry or break on EOF.
 
   char *name = extract_keyword (is, "name");
 
   if (! name)
     return 0;
@@ -516,17 +516,18 @@ read_ascii_data (istream& is, const stri
 	  is >> tmp;
 	  if (is)
 	    tc = tmp;
 	  else
 	    error ("load: failed to load scalar constant");
 	}
       else if (strncmp (ptr, "matrix", 6) == 0)
 	{
-	  int nr = 0, nc = 0;
+	  int nr = 0;
+	  int nc = 0;
 
 	  if (extract_keyword (is, "rows", nr) && nr >= 0
 	      && extract_keyword (is, "columns", nc) && nc >= 0)
 	    {
 	      if (nr > 0 && nc > 0)
 		{
 		  Matrix tmp (nr, nc);
 		  is >> tmp;
@@ -549,17 +550,18 @@ read_ascii_data (istream& is, const stri
 	  is >> tmp;
 	  if (is)
 	    tc = tmp;
 	  else
 	    error ("load: failed to load complex scalar constant");
 	}
       else if (strncmp (ptr, "complex matrix", 14) == 0)
 	{
-	  int nr = 0, nc = 0;
+	  int nr = 0;
+	  int nc = 0;
 
 	  if (extract_keyword (is, "rows", nr) && nr > 0
 	      && extract_keyword (is, "columns", nc) && nc > 0)
 	    {
 	      ComplexMatrix tmp (nr, nc);
 	      is >> tmp;
 	      if (is)
 		tc = tmp;
@@ -653,18 +655,18 @@ read_ascii_data (istream& is, const stri
       return 0;
     }
 
   return name;
 }
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.  If the value
-// is tagged as global in the file, return nonzero in GLOBAL.  If SWAP
-// is nonzero, swap bytes after reading.
+// is tagged as global in the file, return TRUE in GLOBAL.  If SWAP
+// is TRUE, swap bytes after reading.
 //
 // The data is expected to be in the following format:
 //
 // Header (one per file):
 // =====================
 //
 //   object               type            bytes
 //   ------               ----            -----
@@ -722,24 +724,25 @@ read_ascii_data (istream& is, const stri
 //
 //       for each element:
 //         length         int                 4
 //         data           string         length
 //
 // FILENAME is used for error messages.
 
 static char *
-read_binary_data (istream& is, int swap,
+read_binary_data (istream& is, bool swap,
 		  oct_mach_info::float_format fmt,
-		  const string& filename, int& global,
+		  const string& filename, bool& global,
 		  octave_value& tc, char *&doc)
 {
   char tmp = 0;
 
-  FOUR_BYTE_INT name_len = 0, doc_len = 0;
+  FOUR_BYTE_INT name_len = 0;
+  FOUR_BYTE_INT doc_len = 0;
   char *name = 0;
 
   doc = 0;
 
   // We expect to fail here, at the beginning of a record, so not
   // being able to read another name should not result in an error.
 
   is.read (&name_len, 4);
@@ -1051,24 +1054,24 @@ read_mat_ascii_data (istream& is, const 
   else
     error ("load: unable to convert filename `%s' to valid identifier",
 	   filename.c_str ());
 
   return name;
 }
 
 // Read LEN elements of data from IS in the format specified by
-// PRECISION, placing the result in DATA.  If SWAP is nonzero, swap
+// PRECISION, placing the result in DATA.  If SWAP is TRUE, swap
 // the bytes of each element before copying to DATA.  FLT_FMT
 // specifies the format of the data if we are reading floating point
 // numbers.
 
 static void
 read_mat_binary_data (istream& is, double *data, int precision,
-		      int len, int swap,
+		      int len, bool swap,
 		      oct_mach_info::float_format flt_fmt)
 {
   switch (precision)
     {
     case 0:
       read_doubles (is, data, LS_DOUBLE, len, swap, flt_fmt);
       break;
 
@@ -1093,22 +1096,22 @@ read_mat_binary_data (istream& is, doubl
       break;
 
     default:
       break;
     }
 }
 
 static int
-read_mat_file_header (istream& is, int& swap, FOUR_BYTE_INT& mopt, 
+read_mat_file_header (istream& is, bool& swap, FOUR_BYTE_INT& mopt, 
 		      FOUR_BYTE_INT& nr, FOUR_BYTE_INT& nc,
 		      FOUR_BYTE_INT& imag, FOUR_BYTE_INT& len,
 		      int quiet = 0)
 {
-  swap = 0;
+  swap = false;
 
   // We expect to fail here, at the beginning of a record, so not
   // being able to read another mopt value should not result in an
   // error.
 
   is.read (&mopt, 4);
   if (! is)
     return 1;
@@ -1130,22 +1133,22 @@ read_mat_file_header (istream& is, int& 
 //
 // If mopt is zero, it means the file was written on a little endian
 // machine, and we only need to swap if we are running on a big endian
 // machine.
 //
 // Gag me.
 
   if (oct_mach_info::words_big_endian () && mopt == 0)
-    swap = 1;
+    swap = true;
 
   // mopt is signed, therefore byte swap may result in negative value.
 
   if (mopt > 9999 || mopt < 0)
-    swap = 1;
+    swap = true;
 
   if (swap)
     {
       swap_4_bytes (static_cast<char *> (&mopt));
       swap_4_bytes (static_cast<char *> (&nr));
       swap_4_bytes (static_cast<char *> (&nc));
       swap_4_bytes (static_cast<char *> (&imag));
       swap_4_bytes (static_cast<char *> (&len));
@@ -1252,17 +1255,21 @@ read_mat_binary_data (istream& is, const
 {
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
   char *name = 0;
-  int swap = 0, type = 0, prec = 0, mach = 0, dlen = 0;
+  bool swap = false;
+  int type = 0;
+  int prec = 0;
+  int mach = 0;
+  int dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
       if (err < 0)
 	goto data_read_error;
@@ -1348,36 +1355,36 @@ read_mat_binary_data (istream& is, const
   return name;
 
  data_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
   delete [] name;
   return 0;
 }
 
-// Return nonzero if NAME matches one of the given globbing PATTERNS.
+// Return TRUE if NAME matches one of the given globbing PATTERNS.
 
 static bool
 matches_patterns (const string_vector& patterns, int pat_idx,
 		  int num_pat, const string& name)
 {
   for (int i = pat_idx; i < num_pat; i++)
     {
       glob_match pattern (patterns[i]);
 
       if (pattern.match (name))
 	return true;
     }
   return false;
 }
 
 static int
-read_binary_file_header (istream& is, int& swap,
+read_binary_file_header (istream& is, bool& swap,
 			 oct_mach_info::float_format& flt_fmt,
-			 int quiet = 0) 
+			 bool quiet = false)
 {
   int magic_len = 10;
   char magic [magic_len+1];
   is.read (magic, magic_len);
   magic[magic_len] = '\0';
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
     swap = oct_mach_info::words_big_endian ();
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
@@ -1412,20 +1419,21 @@ get_file_format (const string& fname, co
   ifstream file (fname.c_str ());
 
   if (! file)
     {
       error ("load: couldn't open input file `%s'", orig_fname.c_str ());
       return retval;
     }
 
-  int swap;
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
-  if (read_binary_file_header (file, swap, flt_fmt, 1) == 0)
+  bool swap = false;
+
+  if (read_binary_file_header (file, swap, flt_fmt, true) == 0)
     retval = LS_BINARY;
   else
     {
       file.seekg (0, ios::beg);
 
       FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
       int err = read_mat_file_header (file, swap, mopt, nr, nc, imag, len, 1);
@@ -1464,28 +1472,28 @@ get_file_format (const string& fname, co
   if (retval == LS_UNKNOWN)
     error ("load: unable to determine file format for `%s'",
 	   orig_fname.c_str ());
 
   return retval;
 }
 
 static octave_value_list
-do_load (istream& stream, const string& orig_fname, int force,
+do_load (istream& stream, const string& orig_fname, bool force,
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
-	 int list_only, int swap, int verbose, const string_vector& argv,
+	 bool list_only, bool swap, bool verbose, const string_vector& argv,
 	 int argv_idx, int argc, int nargout)
 {
   octave_value_list retval;
 
   ostrstream output_buf;
   int count = 0;
   for (;;)
     {
-      int global = 0;
+      bool global = false;
       octave_value tc;
 
       char *name = 0;
       char *doc = 0;
 
       switch (format)
 	{
 	case LS_ASCII:
@@ -1607,41 +1615,40 @@ found in the file will be replaced with 
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("load");
 
   if (error_state)
     return retval;
 
-  int force = 0;
-
   // It isn't necessary to have the default load format stored in a
   // user preference variable since we can determine the type of file
   // as we are reading.
 
   load_save_format format = LS_UNKNOWN;
 
-  int list_only = 0;
-  int verbose = 0;
+  bool force = false;
+  bool list_only = false;
+  bool verbose = false;
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-force" || argv[i] == "-f")
 	{
-	  force++;
+	  force = true;
 	}
       else if (argv[i] == "-list" || argv[i] == "-l")
 	{
-	  list_only = 1;
+	  list_only = true;
 	}
       else if (argv[i] == "-verbose" || argv[i] == "-v")
 	{
-	  verbose = 1;
+	  verbose = true;
 	}
       else if (argv[i] == "-ascii" || argv[i] == "-a")
 	{
 	  format = LS_ASCII;
 	}
       else if (argv[i] == "-binary" || argv[i] == "-b")
 	{
 	  format = LS_BINARY;
@@ -1659,17 +1666,17 @@ found in the file will be replaced with 
       print_usage ("load");
       return retval;
     }
 
   string orig_fname = argv[i];
 
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
-  int swap = 0;
+  bool swap = false;
 
   if (argv[i] == "-")
     {
       i++;
 
       if (format != LS_UNKNOWN)
 	{
 	  // XXX FIXME XXX -- if we have already seen EOF on a
@@ -1722,54 +1729,54 @@ found in the file will be replaced with 
 	    error ("load: couldn't open input file `%s'",
 		   orig_fname.c_str ());
 	}
     }
 
   return retval;
 }
 
-// Return nonzero if PATTERN has any special globbing chars in it.
-
-static int
+// Return TRUE if PATTERN has any special globbing chars in it.
+
+static bool
 glob_pattern_p (const string& pattern)
 {
   int open = 0;
 
   int len = pattern.length ();
 
   for (int i = 0; i < len; i++)
     {
       char c = pattern[i];
 
       switch (c)
 	{
 	case '?':
 	case '*':
-	  return 1;
+	  return true;
 
 	case '[':	// Only accept an open brace if there is a close
 	  open++;	// brace to match it.  Bracket expressions must be
 	  continue;	// complete, according to Posix.2
 
 	case ']':
 	  if (open)
-	    return 1;
+	    return true;
 	  continue;
 	  
 	case '\\':
 	  if (i == len - 1)
-	    return 0;
+	    return false;
 
 	default:
 	  continue;
 	}
     }
 
-  return 0;
+  return false;
 }
 
 // MAX_VAL and MIN_VAL are assumed to have integral values even though
 // they are stored in doubles.
 
 static save_type
 get_save_type (double max_val, double min_val)
 {
@@ -1793,17 +1800,17 @@ get_save_type (double max_val, double mi
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
 // binary format described above for read_binary_data.
 
 static bool
 save_binary_data (ostream& os, const octave_value& tc,
 		  const string& name, const string& doc,
-		  int mark_as_global, int save_as_floats) 
+		  bool mark_as_global, bool save_as_floats) 
 {
   FOUR_BYTE_INT name_len = name.length ();
 
   os.write (&name_len, 4);
   os << name;
 
   FOUR_BYTE_INT doc_len = doc.length ();
 
@@ -1988,17 +1995,17 @@ save_mat_binary_data (ostream& os, const
       os.write (m.data (), 8 * len);
       m = ::imag(m_cmplx);
       os.write (m.data (), 8 * len);
     }
   else if (tc.is_string ())
     {
       unwind_protect::begin_frame ("save_mat_binary_data");
       unwind_protect_int (Vimplicit_str_to_num_ok);
-      Vimplicit_str_to_num_ok = 1;
+      Vimplicit_str_to_num_ok = true;
       Matrix m = tc.matrix_value ();
       os.write (m.data (), 8 * len);
       unwind_protect::run_frame ("save_mat_binary_data");
     }
   else if (tc.is_range ())
     {
       Range r = tc.range_value ();
       double base = r.base ();
@@ -2096,17 +2103,17 @@ strip_infnan (const ComplexMatrix& m)
 
   return retval;
 }
 
 // Save the data from TC along with the corresponding NAME, and global
 // flag MARK_AS_GLOBAL on stream OS in the plain text format described
 // above for load_ascii_data.  If NAME is empty, the name: line is not
 // generated.  PRECISION specifies the number of decimal digits to print. 
-// If STRIP_NAN_AND_INF is nonzero, rows containing NaNs are deleted,
+// If STRIP_NAN_AND_INF is TRUE, rows containing NaNs are deleted,
 // and Infinite values are converted to +/-OCT_RBV (A Real Big Value,
 // but not so big that gnuplot can't handle it when trying to compute
 // axis ranges, etc.).
 //
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
@@ -2271,21 +2278,21 @@ do_save (ostream& os, symbol_record *sr,
 
     default:
       gripe_unrecognized_data_fmt ("save");
       break;
     }
 }
 
 // Save variables with names matching PATTERN on stream OS in the
-// format specified by FMT.  If SAVE_BUILTINS is nonzero, also save
+// format specified by FMT.  If SAVE_BUILTINS is TRUE, also save
 // builtin variables with names that match PATTERN.
 
 static int
-save_vars (ostream& os, const string& pattern, int save_builtins,
+save_vars (ostream& os, const string& pattern, bool save_builtins,
 	   load_save_format fmt, int save_as_floats)
 {
   int count;
 
   symbol_record **vars = curr_sym_tab->glob
     (count, pattern, symbol_record::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int saved = count;
@@ -2352,18 +2359,18 @@ write_binary_header (ostream& os, load_s
       char tmp = (char) float_format_to_mopt_digit (flt_fmt);
 
       os.write (&tmp, 1);
     }
 }
 
 static void
 save_vars (const string_vector& argv, int argv_idx, int argc,
-	   ostream& os, int save_builtins, load_save_format fmt,
-	   int save_as_floats) 
+	   ostream& os, bool save_builtins, load_save_format fmt,
+	   bool save_as_floats) 
 {
   write_binary_header (os, fmt);
 
   if (argv_idx == argc)
     {
       save_vars (os, "*", save_builtins, fmt, save_as_floats);
     }
   else
@@ -2392,17 +2399,17 @@ save_user_variables (void)
   unsigned mode = ios::out|ios::trunc;
   if (format == LS_BINARY || format == LS_MAT_BINARY)
     mode |= ios::bin;
 
   ofstream file (fname, mode);
 
   if (file)
     {
-      save_vars (string_vector (), 0, 0, file, 0, format, 0);
+      save_vars (string_vector (), 0, 0, file, false, format, false);
       message (0, "save to `%s' complete", fname);
     }
   else
     warning ("unable to open `%s' for writing...", fname);
 }
 
 DEFUN_TEXT (save, args, ,
   "save [-ascii] [-binary] [-float-binary] [-mat-binary] \n\
@@ -2417,19 +2424,19 @@ save variables in a file")
   string_vector argv = args.make_argv ("save");
 
   if (error_state)
     return retval;
 
   // Here is where we would get the default save format if it were
   // stored in a user preference variable.
 
-  int save_builtins = 0;
-
-  int save_as_floats = 0;
+  bool save_builtins = false;
+
+  bool save_as_floats = false;
 
   load_save_format format = get_default_save_format ();
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-ascii" || argv[i] == "-a")
 	{
@@ -2441,21 +2448,21 @@ save variables in a file")
 	}
       else if (argv[i] == "-mat-binary" || argv[i] == "-m")
 	{
 	  format = LS_MAT_BINARY;
 	}
       else if (argv[i] == "-float-binary" || argv[i] == "-f")
 	{
 	  format = LS_BINARY;
-	  save_as_floats = 1;
+	  save_as_floats = true;
 	}
       else if (argv[i] == "-save-builtins")
 	{
-	  save_builtins = 1;
+	  save_builtins = true;
 	}
       else
 	break;
     }
 
   if (i == argc)
     {
       print_usage ("save");
@@ -2512,22 +2519,22 @@ save variables in a file")
 
   return retval;
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
-// nonzero, assume a parametric 3-dimensional plot will be generated.
+// TRUE, assume a parametric 3-dimensional plot will be generated.
 
 bool
 save_three_d (ostream& os, const octave_value& tc, bool parametric)
 {
-  int fail = 0;
+  bool fail = false;
 
   int nr = tc.rows ();
   int nc = tc.columns ();
 
   if (tc.is_real_matrix ())
     {
       os << "# 3D data...\n"
 	 << "# type: matrix\n"
@@ -2563,17 +2570,17 @@ save_three_d (ostream& os, const octave_
 	      if (i+1 < nc)
 		os << "\n";
 	    }
 	}
     }
   else
     {
       ::error ("for now, I can only save real matrices in 3D format");
-      fail = 1;
+      fail = true;
     }
 
   return (os && ! fail);
 }
 
 static int
 default_save_format (void)
 {
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -42,30 +42,30 @@ Software Foundation, 59 Temple Place - S
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-env.h"
+#include "pathsearch.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
 #include "ops.h"
 #include "toplev.h"
 #include "parse.h"
-#include "pathsearch.h"
 #include "pt-plot.h"
 #include "procstream.h"
 #include "prog-args.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "ov.h"
 #include "unwind-prot.h"
 #include "utils.h"
@@ -74,45 +74,36 @@ Software Foundation, 59 Temple Place - S
 
 extern void install_builtins (void);
 
 #if !defined (HAVE_ATEXIT) && defined (HAVE_ON_EXIT)
 extern "C" int on_exit ();
 #define atexit on_exit
 #endif
 
-// Don't redefine the variables if glibc already has.
-#if defined (HAVE_PROGRAM_INVOCATION_NAME) || defined (WITH_KPATHSEARCH)
-extern char *program_invocation_name;
-extern char *program_invocation_short_name;
-#else
-char *program_invocation_name;
-char *program_invocation_short_name;
-#endif
-
 // The command-line options.
 static string_vector octave_argv;
 
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
 // TRUE means we read the site-wide octaverc files.
 // (--norc; --no-site-file; -f)
 static bool read_site_files = true;
 
-// Nonzero means we don't print the usual startup message.
+// TRUE means we don't print the usual startup message.
 // (--quiet; --silent; -q)
 static bool inhibit_startup_message = false;
 
-// Nonzero means we turn on compatibility options.
+// TRUE means we turn on compatibility options.
 // (--traditional)
 static bool traditional = false;
 
-// If nonzero, print verbose info in some cases.
+// If TRUE, print verbose info in some cases.
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?Vdfhiqvx] [--debug] [--echo-commands] [--exec-path path]\n\
        [--help] [--info-file file] [--info-program prog] [--interactive]\n\
        [--no-init-file] [--no-line-editing] [--no-site-file] [-p path]\n\
@@ -147,36 +138,24 @@ long_options long_opts[] =
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
     { "quiet",            prog_args::no_arg,       0, 'q' },
     { "silent",           prog_args::no_arg,       0, 'q' },
     { "traditional",      prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "verbose",          prog_args::no_arg,       0, 'V' },
     { "version",          prog_args::no_arg,       0, 'v' },
-    { 0,                  0,                 0, 0 }
+    { 0,                  0,                       0, 0 }
   };
 
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
-  octave_env::set_program_name (argv[0]);
-
-  // XXX FIXME XXX -- Kpathsea needs this.
-
-#if ! defined (HAVE_PROGRAM_INVOCATION_NAME)
-  program_invocation_name
-    = strsave (octave_env::get_program_invocation_name () . c_str ());
-
-  program_invocation_short_name
-    = strsave (octave_env::get_program_name () . c_str ());
-#endif
-
   if (argc > 1)
     {
       // Skip program name in argv.
 
       octave_argv = string_vector (argv+1, argc-1);
 
       bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
       bind_builtin_variable ("__argv__", octave_argv, 1, 1, 0);
@@ -214,19 +193,19 @@ initialize_pathsearch (void)
 static void
 execute_startup_files (void)
 {
   unwind_protect::begin_frame ("execute_startup_files");
 
   // XXX FIXME XXX -- need to make it possible to set this in startup
   // files.
 
-  unwind_protect_int (input_from_startup_file);
+  unwind_protect_bool (input_from_startup_file);
 
-  input_from_startup_file = 1;
+  input_from_startup_file = true;
 
   int verbose = (verbose_flag && ! inhibit_startup_message);
 
   if (read_site_files)
     {
       // Execute commands from the site-wide configuration file.
       // First from the file $(prefix)/lib/octave/site/m/octaverc
       // (if it exists), then from the file
@@ -362,19 +341,21 @@ maximum_braindamage (void)
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
 }
 
 // You guessed it.
 
 int
 main (int argc, char **argv)
 {
+  octave_env::set_program_name (argv[0]);
+
   // The order of these calls is important.  The call to
   // install_defaults must come before install_builtins because
-  // default variable values must be available for the varaibles to be
+  // default variable values must be available for the variables to be
   // installed, and the call to install_builtins must come before the
   // options are processed because some command line options override
   // defaults by calling bind_builtin_variable.
 
   sysdep_init ();
 
   initialize_error_handlers ();
 
@@ -415,17 +396,17 @@ main (int argc, char **argv)
 	  break;
 
 	case 'h':
 	case '?':
 	  verbose_usage ();
 	  break;
 
 	case 'i':
-	  forced_interactive = 1;
+	  forced_interactive = true;
 	  break;
 
 	case 'p':
 	  if (args.optarg ())
 	    bind_builtin_variable ("LOADPATH", args.optarg ());
 	  break;
 
 	case 'q':
@@ -458,17 +439,17 @@ main (int argc, char **argv)
 	    bind_builtin_variable ("INFO_PROGRAM", args.optarg ());
 	  break;
 
 	case NO_INIT_FILE_OPTION:
 	  read_init_files = false;
 	  break;
 
 	case NO_LINE_EDITING_OPTION:
-	  line_editing = 0;
+	  line_editing = false;
 	  break;
 
 	case NO_SITE_FILE_OPTION:
 	  read_site_files = 0;
 	  break;
 
 	case TRADITIONAL_OPTION:
 	  traditional = true;
@@ -512,28 +493,31 @@ main (int argc, char **argv)
 
   command_editor::reset_current_command_number (1);
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int last_arg_idx = args.optind ();
+
   int remaining_args = argc - last_arg_idx;
+
   if (remaining_args > 0)
     {
-      reading_script_file = 1;
+      reading_script_file = true;
+
       curr_fcn_file_name = argv[last_arg_idx];
       curr_fcn_file_full_name = curr_fcn_file_name;
 
       FILE *infile = get_input_from_file (curr_fcn_file_name);
 
       if (infile)
 	{
-	  input_from_command_line_file = 1;
+	  input_from_command_line_file = true;
 
 	  bind_builtin_variable ("program_invocation_name",
 				 curr_fcn_file_name);
 
 	  size_t pos = curr_fcn_file_name.rfind ('/');
 
 	  string tmp = (pos != NPOS)
 	    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
@@ -570,17 +554,17 @@ main (int argc, char **argv)
 
       // XXX FIXME XXX -- is this the right thing to do?
 
       bind_builtin_variable ("echo_executing_commands",
 			     static_cast<double> (ECHO_CMD_LINE));
     }
 
   if (! interactive)
-    line_editing = 0;
+    line_editing = false;
 
   int retval = main_loop ();
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 }
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -31,53 +31,27 @@ class octave_user_function;
 class tree_statement_list;
 class charMatrix;
 
 #include <string>
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
-extern void
-parse_and_execute (FILE *f);
-
-extern void
-parse_and_execute (const string& s, bool verbose = false,
-		   const char *warn_for = 0);
-
-extern octave_value
-eval_string (const string&, bool silent, int& parse_status);
-
 extern int
 main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
-// Nonzero means we are using readline.
-extern int line_editing;
-
-// Nonzero means we printed messages about reading startup files.
-extern int reading_startup_message_printed;
-
-// Nonzero means we are exiting via the builtin exit or quit functions.
-extern int quitting_gracefully;
-
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern octave_user_function *curr_function;
 
-// Nonzero means input is coming from startup file.
-extern int input_from_startup_file;
-
-// Nonzero means that input is coming from a file that was named on
-// the command line.
-extern int input_from_command_line_file;
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
