# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1208584771 14400
#      Sat Apr 19 01:59:31 2008 -0400
# Node ID 74f5e0c7de9e02c0c637b7efb1a9664a1ddab5c2
# Parent  c3bb0b7a4261bbecec337ab6704ae9753cb0662c
first pass at handling block comments

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,19 +1,36 @@
 2008-04-18  John W. Eaton  <jwe@octave.org>
 
+	* lex.l, lex.h (process_comment): New arg, start_in_block.  Call
+	grab_block_comment if start_in_block is true.  Change all uses.
+	* lex.l (grab_block_comment): New function.
+	(grab_comment_block): New arg, at_bol.  Change all uses.
+	Call grab_block_comment if we find the start of a block comment.
+	(block_comment_nesting_level): New static variable.
+	(^{S}*{CCHAR}\{{S}*{NL}): New rule.
+	(<<EOF>>): Warn about open block comments.
+	(reset_parser): Set block_comment_nesting_level to zero.
+	* parse.y (parse_fcn_file): Stash help text from
+	gobble_leading_white_space after calling reset_parser.
+	(text_getc): Keep track of input_line_number here.
+	(skip_white_sapce): Don't increment input_line_number here.
+	* lex.l (grab_comment_block): Or here.
+
 	* lex.l (Vdisplay_tokens): New static variable.
 	(F__display_tokens__): New function.
 	(display_token): New function.
 	(DISPLAY_TOK_AND_RETURN): New macro.
 	(COUNT_TOK_AND_RETURN): Use DISPLAY_TOK_AND_RETURN.
 	(<COMMAND_START>[\"\'], "'", \"): Move handle_string outside of
 	COUNT_TOK_AND_RETURN macro parameter list.
 	(handle_identifier): Don't use macros to return token values here.
-
+	(<MATRIX_START>{S}*{COMMENT}{SNLCMT}*|<MATRIX_START>{S}*{NL}{SNLCMT}*):
+	Recognize block comments here.
+	
 	* pr-output.cc (Fdisp): If nargout > 0, produce an sq-string
 	unless arg is a dq-string.
 
 2008-04-17  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (looks_like_copyright): Handle leading whitespace.
 	(class stdio_stream_reader): New class.
 	(skip_white_space): New function.
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -147,17 +147,18 @@ protected:
 
 private:
 
   // No copying!
   stream_reader (const stream_reader&);
   stream_reader& operator = (const stream_reader&);
 };
 
-extern std::string grab_comment_block (stream_reader& reader, bool& eof);
+extern std::string
+grab_comment_block (stream_reader& reader, bool at_bol, bool& eof);
 
 // TRUE means that we have encountered EOF on the input stream.
 extern bool parser_end_of_input;
 
 // Flags that need to be shared between the lexer and parser.
 extern lexical_feedback lexer_flags;
 
 #endif
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -243,25 +243,29 @@ const int bracket_brace_paren_nesting_le
 const int bracket_brace_paren_nesting_level::PAREN = 3;
 
 static bracket_brace_paren_nesting_level nesting_level;
 
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
+// The start state that was in effect when the beginning of a block
+// comment was noticed.
+static int block_comment_nesting_level = 0;
+
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_keyword_token (const std::string& s);
 static void prep_for_function (void);
 static void prep_for_nested_function (void);
-static int process_comment (bool& eof);
+static int process_comment (bool start_in_block, bool& eof);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_bracket (bool spc_gobbled, int bracket_type);
@@ -362,30 +366,36 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 //
 // It's also a pain in the ass to decide whether to insert a comma
 // after seeing a ']' character...
+
+// FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{SNLCMT}*\]{S}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, ']');
     if (spc_gobbled)
       yyunput (' ', yytext);
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
 
+%{
+// FIXME -- we need to handle block comments here.
+%}
+
 <MATRIX_START>{SNLCMT}*\}{S}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, '}');
     if (spc_gobbled)
@@ -450,31 +460,35 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	COUNT_TOK_AND_RETURN (',');
       }
   }
 
 %{
 // Semicolons are handled as row seprators in matrix constants.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
+
+// FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{SNLCMT}*;{SNLCMT}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     COUNT_TOK_AND_RETURN (';');
   }
 
 %{
 // In some cases, new lines can also become row separators.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
+
+// FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>{S}*{COMMENT}{SNLCMT}* |
 <MATRIX_START>{S}*{NL}{SNLCMT}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
 
@@ -560,16 +574,26 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     current_input_column = 1;
   }
 
 %{
 // End of file.
 %}
 
 <<EOF>> {
+    if (block_comment_nesting_level != 0)
+      {
+	warning ("block comment open at end of input");
+
+	if ((reading_fcn_file || reading_script_file)
+	    && ! curr_fcn_file_name.empty ())
+	  warning ("near line %d of file `%s.m'",
+		   input_line_number, curr_fcn_file_name.c_str ());
+      }
+
     TOK_RETURN (END_OF_INPUT);
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
@@ -642,26 +666,40 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 }
 
 %{
 // Gobble comments.  If closest nesting is inside parentheses, don't
 // return a new line.
 %} 
 
 {CCHAR} {
+    yyunput (yytext[0], yytext);
+
     bool eof = false;
-    yyunput (yytext[0], yytext);
-    int tok = process_comment (eof);
+    int tok = process_comment (false, eof);
+
     if (eof)
       TOK_RETURN (END_OF_INPUT);
     else if (tok > 0)
       COUNT_TOK_AND_RETURN (tok);
   }
 
 %{
+// Block comments.
+%}
+
+^{S}*{CCHAR}\{{S}*{NL} {
+    current_input_column = 1;
+    block_comment_nesting_level++;
+    promptflag--;
+    bool eof = false;
+    process_comment (true, eof);
+  }
+
+%{
 // Other operators.
 %}
 
 ":"     { BIN_OP_RETURN (':', false); }
 
 ".+"	{ XBIN_OP_RETURN (EPLUS, false); }
 ".-"	{ XBIN_OP_RETURN (EMINUS, false); }
 ".*"	{ BIN_OP_RETURN (EMUL, false); }
@@ -822,16 +860,19 @@ reset_parser (void)
   while (! symtab_context.empty ())
     symtab_context.pop ();
 
   symbol_table::reset_parent_scope ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
+  // We are not in a block comment.
+  block_comment_nesting_level = 0;
+
   // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
@@ -1147,18 +1188,125 @@ static void
 force_local_variable (const std::string& name)
 {
   octave_value& val = symbol_table::varref (name);
 
   if (! val.is_defined ())
     val = Matrix ();
 }
 
+static std::string
+grab_block_comment (stream_reader& reader, bool& eof)
+{
+  std::string buf;
+
+  bool at_bol = true;
+  bool look_for_marker = false;
+
+  bool warned_incompatible = false;
+
+  int c = 0;
+
+  while ((c = reader.getc ()) != EOF)
+    {
+      current_input_column++;
+
+      if (look_for_marker)
+	{
+	  at_bol = false;
+	  look_for_marker = false;
+
+	  if (c == '{' || c == '}')
+	    {
+	      std::string tmp_buf (1, static_cast<char> (c));
+
+	      int type = c;
+
+	      bool done = false;
+
+	      while ((c = reader.getc ()) != EOF && ! done)
+		{
+		  current_input_column++;
+
+		  switch (c)
+		    {
+		    case ' ':
+		    case '\t':
+		      tmp_buf += static_cast<char> (c);
+		      break;
+
+		    case '\n':
+		      {
+			current_input_column = 0;
+			at_bol = true;
+			done = true;
+
+			if (type == '{')
+			  {
+			    block_comment_nesting_level++;
+			    promptflag--;
+			  }
+			else
+			  {
+			    block_comment_nesting_level--;
+			    promptflag++;
+
+			    if (block_comment_nesting_level == 0)
+			      {
+				buf += grab_comment_block (reader, true, eof);
+
+				return buf;
+			      }
+			  }
+		      }
+		      break;
+
+		    default:
+		      at_bol = false;
+		      tmp_buf += static_cast<char> (c);
+		      buf += tmp_buf;
+		      done = true;
+		      break;
+		    }
+		}
+	    }
+	}
+
+      if (at_bol && c == '%' || c == '#')
+        {
+          if (c == '#' && ! warned_incompatible)
+	    {
+	      warned_incompatible = true;
+	      maybe_gripe_matlab_incompatible_comment (c);
+	    }
+
+	  at_bol = false;
+	  look_for_marker = true;
+	}
+      else
+	{
+	  buf += static_cast<char> (c);
+
+	  if (c == '\n')
+	    {
+	      current_input_column = 0;
+	      at_bol = true;
+	    }
+	}
+    }
+
+  if (c == EOF)
+    eof = true;
+
+  return buf;
+}
+
 std::string
-grab_comment_block (stream_reader& reader, bool& eof)
+grab_comment_block (stream_reader& reader, bool at_bol,
+		    bool& eof)
 {
   std::string buf;
 
   // TRUE means we are at the beginning of a comment block.
   bool begin_comment = false;
 
   // TRUE means we are currently reading a comment block.
   bool in_comment = false;
@@ -1169,30 +1317,79 @@ grab_comment_block (stream_reader& reade
 
   while ((c = reader.getc ()) != EOF)
     {
       current_input_column++;
 
       if (begin_comment)
 	{
 	  if (c == '%' || c == '#')
-	    continue;
+	    {
+	      at_bol = false;
+	      continue;
+	    }
+	  else if (at_bol && c == '{')
+	    {
+	      std::string tmp_buf (1, static_cast<char> (c));
+
+	      bool done = false;
+
+	      while ((c = reader.getc ()) != EOF && ! done)
+		{
+		  current_input_column++;
+
+		  switch (c)
+		    {
+		    case ' ':
+		    case '\t':
+		      tmp_buf += static_cast<char> (c);
+		      break;
+
+		    case '\n':
+		      {
+			current_input_column = 0;
+			at_bol = true;
+			done = true;
+
+			block_comment_nesting_level++;
+			promptflag--;
+
+			buf += grab_block_comment (reader, eof);
+
+			in_comment = false;
+
+			if (eof)
+			  goto done;
+		      }
+		      break;
+
+		    default:
+		      at_bol = false;
+		      tmp_buf += static_cast<char> (c);
+		      buf += tmp_buf;
+		      done = true;
+		      break;
+		    }
+		}
+	    }
 	  else
-	    begin_comment = false;
+	    {
+	      at_bol = false;
+	      begin_comment = false;
+	    }
 	}	
 
       if (in_comment)
 	{
 	  buf += static_cast<char> (c);
 
 	  if (c == '\n')
 	    {
-	      input_line_number++;
+	      at_bol = true;
 	      current_input_column = 0;
-
 	      in_comment = false;
 	    }
 	}
       else
 	{
 	  switch (c)
 	    {
 	    case ' ':
@@ -1237,28 +1434,33 @@ public:
   int getc (void) { return ::yyinput (); }
   int ungetc (int c) { ::yyunput (c, buf); return 0; }
   
 private:
   char *buf;
 };
 
 static int
-process_comment (bool& eof)
+process_comment (bool start_in_block, bool& eof)
 {
   eof = false;
 
   std::string help_txt;
 
   if (! help_buf.empty ())
     help_txt = help_buf.top ();
 
   flex_stream_reader flex_reader (yytext);
 
-  std::string txt = grab_comment_block (flex_reader, eof);
+  // process_comment is only supposed to be called when we are not
+  // initially looking at a block comment.
+
+  std::string txt = start_in_block
+    ? grab_block_comment (flex_reader, eof)
+    : grab_comment_block (flex_reader, false, eof);
 
   if (help_txt.empty () && nesting_level.none ())
     {
       if (! help_buf.empty ())
 	help_buf.pop ();
 
       help_buf.push (txt);
     }
@@ -1504,16 +1706,18 @@ strip_trailing_whitespace (char *s)
   size_t pos = retval.find_first_of (" \t");
 
   if (pos != NPOS)
     retval.resize (pos);
 
   return retval;
 }
 
+// FIXME -- we need to handle block comments here.
+
 static void
 scan_for_comments (const char *text)
 {
   std::string comment_buf;
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
@@ -1588,16 +1792,18 @@ scan_for_comments (const char *text)
 // Discard whitespace, including comments and continuations.
 //
 // Return value is logical OR of the following values:
 //
 //  ATE_NOTHING      : no spaces to eat
 //  ATE_SPACE_OR_TAB : space or tab in input
 //  ATE_NEWLINE      : bare new line in input
 
+// FIXME -- we need to handle block comments here.
+
 static yum_yum
 eat_whitespace (void)
 {
   yum_yum retval = ATE_NOTHING;
 
   std::string comment_buf;
 
   bool in_comment = false;
@@ -1777,16 +1983,18 @@ handle_number (void)
 // treated as a continuation character.  If so, this eats it, up to
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
 // If non-whitespace characters are found before comment
 // characters, return 0.  Otherwise, return 1.
 
+// FIXME -- we need to handle block comments here.
+
 static bool
 have_continuation (bool trailing_comments_ok)
 {
   std::ostringstream buf;
 
   std::string comment_buf;
 
   bool in_comment = false;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2840,22 +2840,26 @@ text_getc (FILE *f)
   int c = getc (f);
 
   // Convert CRLF into just LF.
 
   if (c == '\r')
     {
       c = getc (f);
 
-      if (c != '\n')
+      if (c == '\n')
+        input_line_number++;
+      else
 	{
 	  ungetc (c, f);
 	  c = '\r';
 	}
     }
+  else if (c == '\n')
+    input_line_number++;
 
   return c;
 }
 
 class
 stdio_stream_reader : public stream_reader
 {
 public:
@@ -2878,17 +2882,16 @@ skip_white_space (stream_reader& reader)
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  current_input_column++;
 	  break;
 
 	case '\n':
-	  input_line_number++;
 	  current_input_column = 0;
 	  break;
 
 	default:
 	  current_input_column--;
 	  reader.ungetc (c);
 	  goto done;
 	}
@@ -2915,17 +2918,17 @@ gobble_leading_white_space (FILE *ffile,
 
   while (true)
     {
       eof = skip_white_space (stdio_reader);
 
       if (eof)
 	break;
 
-      txt = grab_comment_block (stdio_reader, eof);
+      txt = grab_comment_block (stdio_reader, true, eof);
 
       if (txt.empty ())
 	break;
 
       if (! (have_help_text || looks_like_copyright (txt)))
 	{
 	  help_txt = txt;
 	  have_help_text = true;
@@ -3023,19 +3026,16 @@ parse_fcn_file (const std::string& ff, c
   unwind_protect::add (safe_fclose, ffile);
 
   if (ffile)
     {
       bool eof;
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
-      if (! help_txt.empty ())
-	help_buf.push (help_txt);
-
       if (! eof)
 	{
 	  std::string file_type;
 
 	  bool parsing_script = false;
 
 	  if (! force_script && looking_at_function_keyword (ffile))
 	    {
@@ -3074,16 +3074,19 @@ parse_fcn_file (const std::string& ff, c
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_fcn_ptr);
 	  curr_fcn_ptr = 0;
 
 	  reset_parser ();
 
+	  if (! help_txt.empty ())
+	    help_buf.push (help_txt);
+
 	  if (parsing_script)
 	    prep_lexer_for_script ();
 
 	  lexer_flags.parsing_class_method = ! dispatch_type.empty ();
 
 	  int status = yyparse ();
 
 	  fcn_ptr = curr_fcn_ptr;
