# HG changeset patch
# User jwe
# Date 857537742 0
#      Wed Mar 05 04:55:42 1997 +0000
# Node ID ef422e6f613898f727571e522acb208ef667a5c1
# Parent  ecc1a12678de67ba08883c3b7cad82ef2e7e4914
[project @ 1997-03-05 04:53:36 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,23 @@
 Tue Mar  4 20:36:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-fcn.cc (tree_function::eval): Protect function from being
+	redefined while it is being evaluated.
+	(unprotect_function): New function, for use with unwind_protect stuff.
+	* pt-fcn.h (tree_function::symtab_entry): New data member.
+	(tree_function::init): Initialize it to 0.
+	(tree_function::stash_symtab_ptr): New function.
+	* parse.y (frob_function_def): Stash pointer to function's
+	symbol_record in the function definition.
+
+	* symtab.cc (symbol_record::read_only_error): New argument,
+	action.  Change all callers.
+	(symbol_record::rename): Don't allow read-only symbols to be renamed.
+
 	* variables.cc (Fexist): Don't let files with `.' in their names
 	confuse us.
 
 	* symtab.cc (valid_identifier (const string&)): New function.
 
 Sat Mar  1 15:23:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.5 released.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2194,16 +2194,23 @@ frob_function_def (tree_identifier *id, 
 	   && curr_fcn_file_name == id_name)
     {
       warning ("function `%s' defined within script file `%s'",
 	       id_name.c_str (), curr_fcn_file_full_name.c_str ());
     }
 
   top_level_sym_tab->clear (id_name);
 
+  symbol_record *sr = global_sym_tab->lookup (id_name, 0, 0);
+
+  if (sr)
+    fcn->stash_symtab_ptr (sr);
+  else
+    panic_impossible ();
+
   id->define (fcn);
 
   id->document (help_buf);
 
   return fcn;
 }
 
 // Finish defining a function.
diff --git a/src/pt-fcn.cc b/src/pt-fcn.cc
--- a/src/pt-fcn.cc
+++ b/src/pt-fcn.cc
@@ -239,16 +239,23 @@ delete_vr_list (void *list)
 
 static void
 clear_symbol_table (void *table)
 {
   symbol_table *tmp = (symbol_table *) table;
   tmp->clear ();
 }
 
+static void
+unprotect_function (void *sr_arg)
+{
+  symbol_record *sr = (symbol_record *) sr_arg;
+  sr->unprotect ();
+}
+
 octave_value_list
 tree_function::eval (bool /* print */, int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
@@ -257,16 +264,22 @@ tree_function::eval (bool /* print */, i
 
   int nargin = args.length ();
 
   begin_unwind_frame ("func_eval");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
+  if (symtab_entry && ! symtab_entry->is_read_only ())
+    {
+      symtab_entry->protect ();
+      add_unwind_protect (unprotect_function, (void *) symtab_entry);
+    }
+
   if (call_depth > 1)
     {
       sym_tab->push_context ();
       add_unwind_protect (pop_symbol_table_context, (void *) sym_tab);
 
       if (vr_list)
 	{
 	  // Push new vr_list.
diff --git a/src/pt-fcn.h b/src/pt-fcn.h
--- a/src/pt-fcn.h
+++ b/src/pt-fcn.h
@@ -69,16 +69,19 @@ public:
   tree_function *define_param_list (tree_parameter_list *t);
   tree_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (void);
 
   void stash_fcn_file_time (time_t t)
     { t_parsed = t; }
 
+  void stash_symtab_ptr (symbol_record *sr)
+    { symtab_entry = sr; }
+
   string fcn_file_name (void)
     { return file_name; }
 
   time_t time_parsed (void)
     { return t_parsed; }
 
   void mark_as_system_fcn_file (void);
 
@@ -160,16 +163,19 @@ private:
 
   // Used to keep track of the current offset into the list of va_args.
   int curr_va_arg_number;
 
   // The list of return values when an unspecified number can be
   // returned.
   tree_va_return_list *vr_list;
 
+  // The symbol record for this function.
+  symbol_record *symtab_entry;
+
   // The symbol record for nargin in the local symbol table.
   symbol_record *nargin_sr;
 
   // The symbol record for nargout in the local symbol table.
   symbol_record *nargout_sr;
 
   void print_code_function_header (void);
   void print_code_function_trailer (void);
@@ -186,16 +192,17 @@ private:
       sym_tab = 0;
       cmd_list = 0;
       t_parsed = 0;
       system_fcn_file = 0;
       num_named_args = 0;
       num_args_passed = 0;
       curr_va_arg_number = 0;
       vr_list = 0;
+      symtab_entry = 0;
     }
 };
 
 extern void symbols_of_pt_fcn (void);
 
 #endif
 
 /*
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -261,17 +261,18 @@ tree_fvc *
 symbol_record::def (void) const
 {
   return definition ? definition->def () : 0;
 }
 
 void
 symbol_record::rename (const string& new_name)
 {
-  nm = new_name;
+  if (! read_only_error ("rename"))
+    nm = new_name;
 }
 
 int
 symbol_record::is_function (void) const
 {
   return definition ? definition->is_function () : 0;
 }
 
@@ -383,17 +384,17 @@ void
 symbol_record::set_sv_function (sv_Function f)
 {
   sv_fcn = f;
 }
 
 int
 symbol_record::define (tree_constant *t)
 {
-  if (is_variable () && read_only_error ())
+  if (is_variable () && read_only_error ("redefine"))
     return 0;
 
   tree_fvc *saved_def = 0;
   if (! definition)
     {
       definition = new symbol_def ();
       definition->count = 1;
     }
@@ -428,17 +429,17 @@ symbol_record::define (const octave_valu
 {
   tree_constant *t = new tree_constant (v);
   return define (t);
 }
 
 int
 symbol_record::define (tree_builtin *t, int text_fcn)
 {
-  if (read_only_error ())
+  if (read_only_error ("redefine"))
     return 0;
 
   if (is_variable ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
@@ -457,17 +458,17 @@ symbol_record::define (tree_builtin *t, 
   definition->count = 1;
 
   return 1;
 }
 
 int
 symbol_record::define (tree_function *t, int text_fcn)
 {
-  if (read_only_error ())
+  if (read_only_error ("redefine"))
     return 0;
 
   if (is_variable ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
@@ -485,17 +486,17 @@ symbol_record::define (tree_function *t,
   definition->count = 1;
 
   return 1;
 }
 
 int
 symbol_record::define_as_fcn (const octave_value& v)
 {
-  if (is_variable () && read_only_error ())
+  if (is_variable () && read_only_error ("redefine"))
     return 0;
 
   if (is_variable ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
@@ -677,31 +678,31 @@ symbol_record::pop_context (void)
 	}
 
       definition = context.pop ();
       linked_to_global = global_link_context.pop ();
     }
 }
 
 int
-symbol_record::read_only_error (void)
+symbol_record::read_only_error (const char *action)
 {
   if (is_read_only ())
     {
       if (is_variable ())
 	{
-	  ::error ("can't redefine read-only constant `%s'", nm.c_str ());
+	  ::error ("can't %s read-only constant `%s'", action, nm.c_str ());
 	}
       else if (is_function ())
 	{
-	  ::error ("can't redefine read-only function `%s'", nm.c_str ());
+	  ::error ("can't %s read-only function `%s'", action, nm.c_str ());
 	}
       else
 	{
-	  ::error ("can't redefine read-only symbol `%s'", nm.c_str ());
+	  ::error ("can't %s read-only symbol `%s'", action, nm.c_str ());
 	}
 
       return 1;
     }
   else
     return 0;
 }
 
@@ -909,23 +910,29 @@ symbol_table::rename (const string& old_
 
   symbol_record *prev = &table[index];
   symbol_record *ptr = prev->next ();
 
   while (ptr)
     {
       if (ptr->name () == old_name)
 	{
-	  prev->chain (ptr->next ());
-
-	  index = hash (new_name) & HASH_MASK;
-	  table[index].chain (ptr);
 	  ptr->rename (new_name);
 
-	  return;
+	  if (! error_state)
+	    {
+	      prev->chain (ptr->next ());
+
+	      index = hash (new_name) & HASH_MASK;
+	      table[index].chain (ptr);
+
+	      return;
+	    }
+
+	  break;
 	}
 
       prev = ptr;
       ptr = ptr->next ();
     }
 
   error ("unable to rename `%s' to `%s'", old_name.c_str (),
 	 new_name.c_str ());
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -202,17 +202,17 @@ private:
 
 // This should maybe be one stack with a structure containing all the
 // items we need to save for recursive calls...
   SLStack <symbol_def *> context;
   SLStack <unsigned> global_link_context;
 
   void init_state (void);
 
-  int read_only_error (void);
+  int read_only_error (const char *action);
 
   void push_def (symbol_def *sd);
   symbol_def *pop_def (void);
 
   symbol_record& operator = (const symbol_record& s);
 };
 
 // A structure for handling verbose information about a symbol_record.
