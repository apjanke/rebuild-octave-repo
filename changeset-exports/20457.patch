# HG changeset patch
# User Rik <rik@octave.org>
# Date 1440078174 25200
#      Thu Aug 20 06:42:54 2015 -0700
# Node ID 642ce72cf1abfaead53c61e999ed383aad4c4f4e
# Parent  951019b7afd4bc6309d2d2c21eafc58e32a706a4
# Parent  7e9c752138ec1a3d07ff17d4d31cee957acc7ed2
maint: Periodic merge of stable to default.

diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -232,16 +232,20 @@ find_dialog::init_search_text ()
 {
   if (_edit_area->hasSelectedText ())
     {
       int lbeg, lend, cbeg, cend;
       _edit_area->getSelection(&lbeg,&cbeg,&lend,&cend);
       if (lbeg == lend)
         _search_line_edit->setText (_edit_area->selectedText ());
     }
+
+  // set focus to "Find what" and select all text
+  _search_line_edit->setFocus();
+  _search_line_edit->selectAll();
 }
 
 void
 find_dialog::find_next ()
 {
   find (!_backward_check_box->isChecked ());
 }
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1603,17 +1603,22 @@ The format of the current machine.\n\
 \n\
 @item @qcode{\"ieee-be\"} or @qcode{\"b\"}\n\
 IEEE big endian.\n\
 \n\
 @item @qcode{\"ieee-le\"} or @qcode{\"l\"}\n\
 IEEE little endian.\n\
 @end table\n\
 \n\
+If no @var{arch} is given the value used in the call to @code{fopen} which\n\
+created the file descriptor is used.  Otherwise, the value specified with\n\
+@code{fread} overrides that of @code{fopen} and determines the data format.\n\
+\n\
 The output argument @var{val} contains the data read from the file.\n\
+\n\
 The optional return value @var{count} contains the number of elements read.\n\
 @seealso{fwrite, fgets, fgetl, fscanf, fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -239,17 +239,17 @@ Range::sort_internal (bool ascending)
       double tmp = rng_base;
       rng_base = min ();
       rng_limit = tmp;
       rng_inc = -rng_inc;
       clear_cache ();
     }
   else if (! ascending && rng_base < rng_limit && rng_inc > 0.0)
     {
-      double tmp = rng_limit;
+      double tmp = max ();
       rng_limit = min ();
       rng_base = tmp;
       rng_inc = -rng_inc;
       clear_cache ();
     }
 }
 
 void
@@ -269,17 +269,17 @@ Range::sort_internal (Array<octave_idx_t
       rng_base = min ();
       rng_limit = tmp;
       rng_inc = -rng_inc;
       clear_cache ();
       reverse = true;
     }
   else if (! ascending && rng_base < rng_limit && rng_inc > 0.0)
     {
-      double tmp = rng_limit;
+      double tmp = max ();
       rng_limit = min ();
       rng_base = tmp;
       rng_inc = -rng_inc;
       clear_cache ();
       reverse = true;
     }
 
   octave_idx_type tmp = reverse ? nel - 1 : 0;
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -1,10 +1,10 @@
 ## Copyright (C) 2009-2015 Eric Chassande-Mottin, CNRS (France)
-## Parts Copyright (C) 2012 Philip Nienhuis
+## Parts Copyright (C) 2012-2015 Philip Nienhuis
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -118,19 +118,23 @@
 ## @item user-supplied.  Two options:
 ## (1) One string, or 1x1 cell string: Skip everything to the right of it;
 ## (2) 2x1 cell string array: Everything between the left and right strings
 ## is skipped.
 ## @end itemize
 ##
 ## @item @qcode{"delimiter"}
 ## Any character in @var{value} will be used to split @var{str} into words
-## (default value = any whitespace).
+## (default value = any whitespace).  Note that whitespace is implicitly added
+## to the set of delimiter characters unless a @qcode{"%s"} format conversion
+## specifier is supplied; see @qcode{"whitespace"} parameter below.  The set
+## of delimiter characters cannot be empty; if needed Octave substitutes a
+## space as delimiter.
 ##
-## @item @qcode{"emptyvalue"}:
+## @item @qcode{"emptyvalue"}
 ## Value to return for empty numeric values in non-whitespace delimited data.
 ## The default is NaN@.  When the data type does not support NaN (int32 for
 ## example), then default is zero.
 ##
 ## @item @qcode{"multipledelimsasone"}
 ## Treat a series of consecutive delimiters, without whitespace in between,
 ## as a single delimiter.  Consecutive delimiter series need not be vertically
 ## @qcode{"aligned"}.
@@ -141,25 +145,31 @@
 ##
 ## @item @qcode{"returnonerror"}
 ## If @var{value} true (1, default), ignore read errors and return normally.
 ## If false (0), return an error.
 ##
 ## @item @qcode{"whitespace"}
 ## Any character in @var{value} will be interpreted as whitespace and trimmed;
 ## the string defining whitespace must be enclosed in double quotes for proper
-## processing of special characters like @qcode{"@xbackslashchar{}t"}.  The
-## default value for whitespace is
+## processing of special characters like @qcode{"@xbackslashchar{}t"}.  In
+## each data field, multiple consecutive whitespace characters are collapsed
+## into one space and leading and trailing whitespace is removed.  The default
+## value for whitespace is
 ## @c Note: the next line specifically has a newline which generates a space
 ## @c       in the output of qcode, but keeps the next line < 80 characters.
 ## @qcode{"
 ## @xbackslashchar{}b@xbackslashchar{}r@xbackslashchar{}n@xbackslashchar{}t"}
-## (note the space).  Unless whitespace is set to @qcode{""} (empty) AND at
-## least one @qcode{"%s"} format conversion specifier is supplied, a space is
-## always part of whitespace.
+## (note the space).  Whitespace is always added to the set of delimiter
+## characters unless at least one @qcode{"%s"} format conversion specifier is
+## supplied; in that case only whitespace explicitly specified in
+## @qcode{"delimiter"} is retained as delimiter and removed from the set of
+## whitespace characters.  If whitespace characters are to be kept as-is (in
+## e.g., strings), specify an empty value (i.e., @qcode{""}) for
+## @qcode{"whitespace"}; obviously, whitespace cannot be a delimiter then.
 ##
 ## @end table
 ##
 ## When the number of words in @var{str} doesn't match an exact multiple of
 ## the number of format conversion specifiers, strread's behavior depends on
 ## the last character of @var{str}:
 ##
 ## @table @asis
@@ -383,17 +393,17 @@ function varargout = strread (str, forma
     end
     str = cellslices (str, [1, cstop + c2len], [cstart - 1, len]);
     str = [str{:}];
   endif
 
   if (! isempty (white_spaces))
     ## For numeric fields, whitespace is always a delimiter, but not for text
     ## fields
-    if (isempty (strfind (format, "%s")))
+    if (isempty (regexp (format, '%\*?\d*s')))
       ## Add whitespace to delimiter set
       delimiter_str = unique ([white_spaces delimiter_str]);
     else
       ## Remove any delimiter chars from white_spaces list
       white_spaces = setdiff (white_spaces, delimiter_str);
     endif
   endif
   if (isempty (delimiter_str))
@@ -1081,8 +1091,14 @@ endfunction
 
 ## Illegal format specifiers
 %!test
 %!error <no valid format conversion specifiers> strread ("1.0", "%z");
 
 ## Test for false positives in check for non-supported format specifiers
 %!test
 %! assert (strread ("Total: 32.5 % (of cm values)","Total: %f % (of cm values)"), 32.5, 1e-5);
+
+## Test various forms of string format specifiers (bug #45712)
+%!test
+%! str = "14 :1 z:2 z:3 z:5 z:11";
+%! [a, b, c, d] = strread (str, "%f %s %*s %3s %*3s %f", "delimiter", ":");
+%! assert ({a, b, c, d}, {14, {"1 z"}, {"3 z"}, 11});
