# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1278605738 25200
#      Thu Jul 08 09:15:38 2010 -0700
# Node ID f2a8f68d9c2b6d768fa88653f5e3867647fc77b8
# Parent  062304bd692ec20ee06ed05035860940cfbffac1
eigs.cc: Initialize random number generator in test blocks
to get reproducible results.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-08  Rik <octave@nomad.inbox5.com>
+
+	* DLD_FUNCTIONS/eigs.cc: Initialize random number generator in test
+        blocks to get reproducible results.
+
 2010-07-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.cc (Fstruct2cell): Use octave_map. Optimize.
 
 2010-07-07  Rik <octave@nomad.inbox5.com>
 
 	* pr-output.cc (calc_scale_exp): Avoid use of % operator on negative
         operands for portability between C++ compilers.
@@ -47,16 +52,17 @@ 2010-07-06  David Bateman  <dbateman@fre
 	(static void pr_any_float (const float_format *, std::ostream&,
 	double, int)): Print engineering formats.
 	(static void init_format_state (void)): Set default state of print_eng.
 	(static void set_format_style (int, const string_vector&)): Parse
 	the "eng" argument.
 	(Fformat): Document the new engineering format.
 
 2010-07-04  Soren Hauberg  <hauberg@gmail.com>
+
 	* DLD_FUNCTIONS/__magick_read__.cc: restore locale after
 	GraphicsMagick initialisation.
 
 2010-07-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* toplev.cc (octave_call_stack::do_backtrace): Use static
 	octave_fields struct.
 	(octave_call_stack::empty_backtrace): New static method.
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -748,16 +748,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %!shared n, k, A, d0, d2
 %! n = 20;
 %! k = 4;
 %! A = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),4*ones(1,n),ones(1,n-2)]);
 %! d0 = eig (A);
 %! d2 = sort (d0);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (d1, d0(end:-1:(end-k)),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
@@ -823,17 +824,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %! fn = @(x) (A - 4.1 * eye(n)) \ x;
 %! opts.issym = 1; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 4.1, opts);
 %! assert (d1, eigs(A,k,4.1), 1e-11);
 %!testif HAVE_ARPACK
 %! AA = speye (10);
 %! fn = @(x) AA * x;
 %! opts.issym = 1; opts.isreal = 1;
-%! assert (eigs (fn, 10, AA, 3, 'lm', opts), [1; 1; 1]);
+%! assert (eigs (fn, 10, AA, 3, 'lm', opts), [1; 1; 1],10*eps);
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs(A, k, 'lm');
 %! d1 = diag(d1);
 %! for i=1:k
 %!  assert(max(abs((A - d1(i)*speye(n))*v1(:,i))),0.,1e-11)
 %! endfor
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs(A, k, 'sm');
@@ -867,16 +868,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %% Real unsymmetric tests
 %!shared n, k, A, d0
 %! n = 20;
 %! k = 4;
 %! A =  sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]);
 %! d0 = eig (A);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (abs(d1), abs(d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
@@ -996,16 +998,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %% Complex hermitian tests
 %!shared n, k, A, d0
 %! n = 20;
 %! k = 4;
 %! A = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[1i*ones(1,n-2),4*ones(1,n),-1i*ones(1,n-2)]);
 %! d0 = eig (A);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (abs(d1), abs(d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
@@ -1130,16 +1133,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %!shared n, k, A, d0, d2
 %! n = 20;
 %! k = 4;
 %! A = full(sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),4*ones(1,n),ones(1,n-2)]));
 %! d0 = eig (A);
 %! d2 = sort (d0);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (d1, d0(end:-1:(end-k)),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
@@ -1244,16 +1248,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %% Real unsymmetric tests
 %!shared n, k, A, d0
 %! n = 20;
 %! k = 4;
 %! A =  full(sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]));
 %! d0 = eig (A);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (abs(d1), abs(d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
@@ -1373,16 +1378,17 @@ K Maschhoff, D Sorensen, and C Yang.  Fo
 %% Complex hermitian tests
 %!shared n, k, A, d0
 %! n = 20;
 %! k = 4;
 %! A = full(sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[1i*ones(1,n-2),4*ones(1,n),-1i*ones(1,n-2)]));
 %! d0 = eig (A);
 %! [~, idx] = sort (abs(d0));
 %! d0 = d0(idx);
+%! rand("state", 42); % initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A,k+1);
 %! assert (abs(d1), abs(d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 'lm');
