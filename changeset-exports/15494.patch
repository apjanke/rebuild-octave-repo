# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1349454475 14400
#      Fri Oct 05 12:27:55 2012 -0400
# Node ID 05aee5a1ff3795864daba6016ac4701b1ddd86e1
# Parent  9ccf4ffb9fa295c84dabec3900454dfbaadf8eab
silence some compilation warnings

* pt-jit.cc (Fenable_jit_debugger, Fenable_jit_compiler): Remove unused args.
* webinfo.cc (webinfo::current_tab_changed, webinfo::addNewTab,
  webinfo::closeTab): Replace C-style casts with static_cast
* MDiagArray2 (MArray<T>::diag): Replace deprecated diag call with extract_diag.

diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -126,17 +126,17 @@ webinfo::link_clicked (const QUrl & link
   QString node = link.toString ();
   load_node (node);
 }
 
 void
 webinfo::current_tab_changed (int index)
 {
   QVariant tab_data = _tab_bar->tabData (index);
-  _text_browser = (QTextBrowser*) (tab_data.value<void*> ());
+  _text_browser = static_cast<QTextBrowser*> (tab_data.value<void*> ());
 
   _stacked_widget->setCurrentIndex (_stacked_widget->indexOf (_text_browser));
 
   if (_text_browser->font () != _font_web)
     {
       _text_browser->setFont (_font_web);
     }
 }
@@ -152,17 +152,17 @@ webinfo::addNewTab (const QString& name)
   disconnect(_tab_bar, SIGNAL (currentChanged(int)), this, SLOT (current_tab_changed (int)));
 
   int ns = _stacked_widget->addWidget (_text_browser);
   _stacked_widget->setCurrentIndex (ns);
 
   int nt = _tab_bar->addTab (name);
   _tab_bar->setCurrentIndex (nt);
   QVariant tab_data;
-  tab_data.setValue ( (void*)_text_browser);
+  tab_data.setValue (static_cast<void*> (_text_browser));
   _tab_bar->setTabData (nt, tab_data);
 
   connect (_tab_bar, SIGNAL (currentChanged (int)), this, SLOT (current_tab_changed (int)));
 
   if (_text_browser->font () != _font_web)
     {
       _text_browser->setFont (_font_web);
     }
@@ -176,17 +176,17 @@ webinfo::close_tab ()
   if (_tab_bar->tabText (index) != "Top")
     closeTab (index);
 }
 
 void
 webinfo::closeTab (int index)
 {
   QVariant tab_data = _tab_bar->tabData (index);
-  QWidget *w = (QWidget*) (tab_data.value<void*> ());
+  QWidget *w = static_cast<QWidget*> (tab_data.value<void*> ());
   _stacked_widget->removeWidget (w);
   delete w;
 
   _tab_bar->removeTab (index);
 }
 
 void
 webinfo::search ()
diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -2175,32 +2175,32 @@ jit_info::find (const vmap& extra_vars, 
 {
   vmap::const_iterator iter = extra_vars.find (vname);
   return iter == extra_vars.end () ? symbol_table::varval (vname)
     : *iter->second;
 }
 
 #endif
 
-DEFUN (enable_jit_debugging, args, nargout,
+DEFUN (enable_jit_debugging, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} enable_jit_debugging ()\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (enable_jit_debugging);
 #else
   warning ("enable_jit_debugging: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
-DEFUN (enable_jit_compiler, args, nargout,
+DEFUN (enable_jit_compiler, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} enable_jit_compiler ()\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (enable_jit_compiler);
 #else
diff --git a/liboctave/array/MDiagArray2.h b/liboctave/array/MDiagArray2.h
--- a/liboctave/array/MDiagArray2.h
+++ b/liboctave/array/MDiagArray2.h
@@ -86,17 +86,17 @@ public:
           if (d[i] != T ())
             retval++;
         }
 
       return retval;
     }
 
   MArray<T> diag (octave_idx_type k = 0) const
-    { return DiagArray2<T>::diag (k); }
+    { return DiagArray2<T>::extract_diag (k); }
 
   MDiagArray2<T> transpose (void) const { return DiagArray2<T>::transpose (); }
   MDiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const { return DiagArray2<T>::hermitian (fcn); }
 
   bool is_multiple_of_identity (T val) const;
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
