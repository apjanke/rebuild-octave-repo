# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1212643766 14400
#      Thu Jun 05 01:29:26 2008 -0400
# Node ID b1823dfd6ec715eba44e9c21a6834523da98ea78
# Parent  e6d5532f760eebfa0c94717bfe15d5592d4532a5
style fixes

diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1318,17 +1318,17 @@ public:
       : name (nm), count (0) { }
 
   virtual ~base_graphics_backend (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
-  virtual void close_figure (const octave_value& pstream) const
+  virtual void close_figure (const octave_value& /*pstream*/) const
     { gripe_invalid ("close_figure"); }
 
   virtual void redraw_figure (const graphics_handle&) const
     { gripe_invalid ("redraw_figure"); }
 
   virtual void print_figure (const graphics_handle&, const std::string&,
 			     const std::string&, bool,
 			     const std::string& = "") const
diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,10 +1,12 @@
 2008-06-05  John W. Eaton  <jwe@octave.org>
 
+	* opengl/gl-render.cc (xmin): New static function.
+
 	* opengl/gl-render.h (opengl_renderer): Style fixes.
 	* fltk_backend/fltk_backend.cc: Style fixes.
 
 2008-04-26  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* opengl/gl-render.h (opengl_renderer::draw(hggroup)): New method.
 	* opengl/gl-render.cc (opengl_renderer::draw(hggroup)): Likewise.
 	(opengl_renderer::draw(graphics_object)): Call it.
diff --git a/src/graphics/opengl/gl-render.cc b/src/graphics/opengl/gl-render.cc
--- a/src/graphics/opengl/gl-render.cc
+++ b/src/graphics/opengl/gl-render.cc
@@ -38,16 +38,22 @@ along with Octave; see the file COPYING.
 
 enum {
   AXE_ANY_DIR   = 0,
   AXE_DEPTH_DIR = 1,
   AXE_HORZ_DIR  = 2,
   AXE_VERT_DIR  = 3
 };
 
+static octave_idx_type
+xmin (octave_idx_type x, octave_idx_type y)
+{
+  return x < y ? x : y;
+}
+
 class
 opengl_texture
 {
 protected:
   class texture_rep
   {
   public:
     texture_rep (void) : valid (false), count (1) { }
@@ -237,26 +243,26 @@ public:
 
   void end_contour (void) const
     { gluTessEndContour (glu_tess); }
 
   void add_vertex (double *loc, void *data) const
     { gluTessVertex (glu_tess, loc, data); }
 
 protected:
-  virtual void begin (GLenum type) { }
+  virtual void begin (GLenum /*type*/) { }
 
   virtual void end (void) { }
 
-  virtual void vertex (void *data) { }
-
-  virtual void combine (GLdouble c[3], void *data[4],
-			GLfloat w[4], void **out_data) { }
-
-  virtual void edge_flag (GLboolean flag) { }
+  virtual void vertex (void */*data*/) { }
+
+  virtual void combine (GLdouble /*c*/[3], void */*data*/[4],
+			GLfloat /*w*/[4], void **/*out_data*/) { }
+
+  virtual void edge_flag (GLboolean /*flag*/) { }
 
   virtual void error (GLenum err)
     { ::error ("OpenGL tesselation error (%d)", err); }
 
   virtual void init (void)
     {
       glu_tess = gluNewTess ();
 
@@ -593,103 +599,103 @@ opengl_renderer::draw (const axes::prope
 
   xform = props.get_transform ();
   
   // draw axes object
   
   Matrix xlim = xform.xscale (props.get_xlim ().matrix_value ());
   Matrix ylim = xform.yscale (props.get_ylim ().matrix_value ());
   Matrix zlim = xform.zscale (props.get_zlim ().matrix_value ());
-  double xmin = xlim(0), xmax = xlim(1);
-  double ymin = ylim(0), ymax = ylim(1);
-  double zmin = zlim(0), zmax = zlim(1);
+  double x_min = xlim(0), x_max = xlim(1);
+  double y_min = ylim(0), y_max = ylim(1);
+  double z_min = zlim(0), z_max = zlim(1);
   
   double xd = (props.xdir_is ("normal") ? 1 : -1);
   double yd = (props.ydir_is ("normal") ? 1 : -1);
   double zd = (props.zdir_is ("normal") ? 1 : -1);
 
   ColumnVector p1, p2, xv (3), yv (3), zv (3);
   int xstate, ystate, zstate;
 
   xstate = ystate = zstate = AXE_ANY_DIR;
 
-  p1 = xform.transform (xmin, (ymin+ymax)/2, (zmin+zmax)/2, false);
-  p2 = xform.transform (xmax, (ymin+ymax)/2, (zmin+zmax)/2, false);
+  p1 = xform.transform (x_min, (y_min+y_max)/2, (z_min+z_max)/2, false);
+  p2 = xform.transform (x_max, (y_min+y_max)/2, (z_min+z_max)/2, false);
   xv(0) = xround (p2(0)-p1(0));
   xv(1) = xround (p2(1)-p1(1));
   xv(2) = (p2(2)-p1(2));
   if (xv(0) == 0 && xv(1) == 0)
     xstate = AXE_DEPTH_DIR;
   else if (xv(2) == 0)
     {
       if (xv(0) == 0)
         xstate = AXE_VERT_DIR;
       else if (xv(1) == 0)
         xstate = AXE_HORZ_DIR;
     }
   double xPlane;
   if (xv(2) == 0)
     if (xv(1) == 0)
-      xPlane = (xv(0) > 0 ? xmax : xmin);
+      xPlane = (xv(0) > 0 ? x_max : x_min);
     else
-      xPlane = (xv(1) < 0 ? xmax : xmin);
+      xPlane = (xv(1) < 0 ? x_max : x_min);
   else
-    xPlane = (xv(2) < 0 ? xmin : xmax);
-  double xPlaneN = (xPlane == xmin ? xmax : xmin);
-  double fx = (xmax-xmin)/sqrt(xv(0)*xv(0)+xv(1)*xv(1));
-
-  p1 = xform.transform ((xmin+xmax)/2, ymin, (zmin+zmax)/2, false);
-  p2 = xform.transform ((xmin+xmax)/2, ymax, (zmin+zmax)/2, false);
+    xPlane = (xv(2) < 0 ? x_min : x_max);
+  double xPlaneN = (xPlane == x_min ? x_max : x_min);
+  double fx = (x_max-x_min)/sqrt(xv(0)*xv(0)+xv(1)*xv(1));
+
+  p1 = xform.transform ((x_min+x_max)/2, y_min, (z_min+z_max)/2, false);
+  p2 = xform.transform ((x_min+x_max)/2, y_max, (z_min+z_max)/2, false);
   yv(0) = xround (p2(0)-p1(0));
   yv(1) = xround (p2(1)-p1(1));
   yv(2) = (p2(2)-p1(2));
   if (yv(0) == 0 && yv(1) == 0)
     ystate = AXE_DEPTH_DIR;
   else if (yv(2) == 0)
     {
       if (yv(0) == 0)
         ystate = AXE_VERT_DIR;
       else if (yv(1) == 0)
         ystate = AXE_HORZ_DIR;
     }
   double yPlane;
   if (yv(2) == 0)
     if (yv(1) == 0)
-      yPlane = (yv(0) > 0 ? ymax : ymin);
+      yPlane = (yv(0) > 0 ? y_max : y_min);
     else
-      yPlane = (yv(1) < 0 ? ymax : ymin);
+      yPlane = (yv(1) < 0 ? y_max : y_min);
   else
-    yPlane = (yv(2) < 0 ? ymin : ymax);
-  double yPlaneN = (yPlane == ymin ? ymax : ymin);
-  double fy = (ymax-ymin)/sqrt(yv(0)*yv(0)+yv(1)*yv(1));
-
-  p1 = xform.transform((xmin+xmax)/2, (ymin+ymax)/2, zmin, false);
-  p2 = xform.transform((xmin+xmax)/2, (ymin+ymax)/2, zmax, false);
+    yPlane = (yv(2) < 0 ? y_min : y_max);
+  double yPlaneN = (yPlane == y_min ? y_max : y_min);
+  double fy = (y_max-y_min)/sqrt(yv(0)*yv(0)+yv(1)*yv(1));
+
+  p1 = xform.transform((x_min+x_max)/2, (y_min+y_max)/2, z_min, false);
+  p2 = xform.transform((x_min+x_max)/2, (y_min+y_max)/2, z_max, false);
   zv(0) = xround(p2(0)-p1(0));
   zv(1) = xround (p2(1)-p1(1));
   zv(2) = (p2(2)-p1(2));
   if (zv(0) == 0 && zv(1) == 0)
     zstate = AXE_DEPTH_DIR;
   else if (zv(2) == 0)
   {
     if (zv(0) == 0)
       zstate = AXE_VERT_DIR;
     else if (zv(1) == 0)
       zstate = AXE_HORZ_DIR;
   }
   double zPlane;
   if (zv(2) == 0)
     if (zv(1) == 0)
-      zPlane = (zv(0) > 0 ? zmin : zmax);
+      zPlane = (zv(0) > 0 ? z_min : z_max);
     else
-      zPlane = (zv(1) < 0 ? zmin : zmax);
+      zPlane = (zv(1) < 0 ? z_min : z_max);
   else
-    zPlane = (zv(2) < 0 ? zmin : zmax);
-  double zPlaneN = (zPlane == zmin ? zmax : zmin);
-  double fz = (zmax-zmin)/sqrt(zv(0)*zv(0)+zv(1)*zv(1));
+    zPlane = (zv(2) < 0 ? z_min : z_max);
+  double zPlaneN = (zPlane == z_min ? z_max : z_min);
+  double fz = (z_max-z_min)/sqrt(zv(0)*zv(0)+zv(1)*zv(1));
 
   bool mode2d = (((xstate > AXE_DEPTH_DIR ? 1 : 0) +
         (ystate > AXE_DEPTH_DIR ? 1 : 0) +
         (zstate > AXE_DEPTH_DIR ? 1 : 0)) == 2);
   if (props.tickdirmode_is ("auto"))
   {
     // FIXME: tickdir should be updated (code below comes
     //        from JHandles)
@@ -744,32 +750,32 @@ opengl_renderer::draw (const axes::prope
   if (axe_color.numel () > 0 && visible)
     {
       set_color (axe_color);
       set_polygon_offset (true, 2.5);
 
       glBegin (GL_QUADS);
 
       // X plane
-      glVertex3d (xPlane, ymin, zmin);
-      glVertex3d (xPlane, ymax, zmin);
-      glVertex3d (xPlane, ymax, zmax);
-      glVertex3d (xPlane, ymin, zmax);
+      glVertex3d (xPlane, y_min, z_min);
+      glVertex3d (xPlane, y_max, z_min);
+      glVertex3d (xPlane, y_max, z_max);
+      glVertex3d (xPlane, y_min, z_max);
 
       // Y plane
-      glVertex3d (xmin, yPlane, zmin);
-      glVertex3d (xmax, yPlane, zmin);
-      glVertex3d (xmax, yPlane, zmax);
-      glVertex3d (xmin, yPlane, zmax);
+      glVertex3d (x_min, yPlane, z_min);
+      glVertex3d (x_max, yPlane, z_min);
+      glVertex3d (x_max, yPlane, z_max);
+      glVertex3d (x_min, yPlane, z_max);
 
       // Z plane
-      glVertex3d (xmin, ymin, zPlane);
-      glVertex3d (xmax, ymin, zPlane);
-      glVertex3d (xmax, ymax, zPlane);
-      glVertex3d (xmin, ymax, zPlane);
+      glVertex3d (x_min, y_min, zPlane);
+      glVertex3d (x_max, y_min, zPlane);
+      glVertex3d (x_max, y_max, zPlane);
+      glVertex3d (x_min, y_max, zPlane);
 
       glEnd ();
 
       set_polygon_offset (false);
     }
 
   // Axes box
 
@@ -2185,18 +2191,20 @@ void
 opengl_renderer::draw (const patch::properties &props)
 {
   Matrix f = props.get_faces ().matrix_value ();
   Matrix v = xform.scale (props.get_vertices ().matrix_value ());
   Matrix c;
   Matrix n = props.get_vertexnormals ().matrix_value ();
   Matrix a;
 
-  int nv = v.rows (), vmax = v.columns ();
-  int nf = f.rows (), fcmax = f.columns ();
+  int nv = v.rows ();
+  // int vmax = v.columns ();
+  int nf = f.rows ();
+  int fcmax = f.columns ();
 
   bool has_z = (v.columns () > 2);
   bool has_facecolor = false;
   bool has_facealpha = false;
 
   int fc_mode = (props.facecolor_is_rgb () ? 0 :
 		 (props.facecolor_is("flat") ? 1 : 2));
   int fl_mode = (props.facelighting_is ("none") ? 0 :
