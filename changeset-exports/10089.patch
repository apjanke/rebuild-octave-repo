# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1263333917 -3600
#      Tue Jan 12 23:05:17 2010 +0100
# Node ID dd70982c81a3081d057667671e27c5bdf31fbc54
# Parent  5edee330d4cb9140936bc06946c469f01ef208d1
Allow markerfacecolor and markeredgecolor to be set and used for patch objects

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-12  David Bateman  <dbateman@free.fr>
+
+	* plot/__go_draw_axes_.m:  Allow patch markerfacecolor and 
+	markeredgecolor properties to be used and set the marker colors
+	appropriately.
+
 2010-01-12  Jaroslav Hajek  <highegg@gmail.com>, Ben Barrowes  <benjamin.e.barrowes@usace.army.mil>
 
 	* set/private/validargs.m: New function.
 	* set/module.mk: Add it here.
 	* set/ismember.m: Use it here.
 	* set/intersect.m: Ditto.
 	* set/union.m: Ditto.
 	* set/setdiff.m: Ditto.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -706,17 +706,19 @@ function __go_draw_axes__ (h, plot_strea
 		 data{data_idx} = [xcol, ycol]';
 		 usingclause{data_idx} = sprintf ("record=%d using ($1):($2)",
 						  numel (xcol));
 	       endif
 	     endif
 	   endif
 
            ## patch outline
-	   if (! strncmp (obj.edgecolor, "none", 4))
+	   if (!(strncmp (obj.edgecolor, "none", 4)
+                  && strncmp (obj.markeredgecolor, "none", 4)
+                  && strncmp (obj.markerfacecolor, "none", 4)))
 
 	     data_idx++;
              is_image_data(data_idx) = false;
              parametric(data_idx) = false;
 	     have_cdata(data_idx) = false;
 	     have_3d_patch(data_idx) = false;
              titlespec{data_idx} = "title \"\"";
 	     usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
@@ -792,101 +794,233 @@ function __go_draw_axes__ (h, plot_strea
 	     else
 	       lw  = "";
 	     endif
 
 	     if (isfield (obj, "marker"))
 	       if (isfield (obj, "marker"))
 		 switch (obj.marker)
 		   case "+"
-		     pt = "pt 1";
+		     pt = pt2 = "pt 1";
 		   case "o"
 		     pt = "pt 6";
+                     pt2 = "pt 7";
 		   case "*"
-		     pt = "pt 3";
+		     pt = pt2 = "pt 3";
 		   case "."
-		     pt = "pt 0";
+		     pt = pt2 = "pt 0";
 		   case "x"
-		     pt = "pt 2";
+		     pt = pt2 = "pt 2";
 		   case {"square", "s"}
-		     pt = "pt 5";
+		     pt = "pt 4";
+		     pt2 = "pt 5";
 		   case {"diamond", "d"}
 		     pt = "pt 13";
+		     pt2 = "pt 14";
 		   case "^"
-		     pt = "pt 9";
+		     pt = "pt 8";
+		     pt2 = "pt 9";
 		   case "v"
-		     pt = "pt 11";
-		   case ">"
-		     pt = "pt 8";
-		   case "<"
 		     pt = "pt 10";
+		     pt2 = "pt 11";
+		   case ">"
+	             ## FIXME missing point type 
+		     pt = "pt 8";
+		     pt2 = "pt 9";
+		   case "<"
+	             ## FIXME missing point type 
+		     pt = "pt 10";
+		     pt2 = "pt 11";
 		   case {"pentagram", "p"}
-		     pt = "pt 4";
+	             ## FIXME missing point type 
+		     pt = pt2 = "pt 3";
 		   case {"hexagram", "h"}
-		     pt = "pt 12";
+		     pt = pt2 = "pt 3";
 		   case "none"
-		     pt = "";
+		     pt = pt2 = "";
 		   otherwise
-		     pt = "";
+		     pt = pt2 = "";
 		 endswitch
 	       endif
 	     else
 	       pt = "";
 	     endif
 
-	     style = "lines";
-	     if (isempty (lt))
-	       if (! isempty (pt))
-		 style = "points";
-	       endif
-	     elseif (! isempty (pt))
-	       style = "linespoints";
-	     endif
-
-	     if (isfield (obj, "markersize"))
-	       if (length (mdat) == nc)
-		 m = mdat(i);
-	       else
-		 m = mdat;
-	       endif
-	       if (! strcmpi (style, "lines"))
-		 ps = sprintf("pointsize %f", m);
-	       else
-		 ps = "";
-	       endif
-	     else
-	       ps = "";
-	     endif
-
 	     if (mono)
 	       colorspec = "";
 	     else
 	       colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
 				    round (255*color));
 	     endif
-	     withclause{data_idx} = sprintf ("with %s %s %s %s %s %s",
-					     style, lw, pt, lt, ps, 
-					     colorspec);
+
+             sidx = 1;
+             if (isempty (lt))
+               style = "";
+             else
+               style = "lines";
+             endif
+             tmpwith = {};
+
+             facesame = true;
+             if (! isequal (pt, pt2) && isfield (obj, "markerfacecolor") 
+	         && !strncmp (obj.markerfacecolor, "none", 4))
+               if (strncmp (obj.markerfacecolor, "auto", 4)
+	           || ! isnumeric (obj.markerfacecolor) 
+	           || (isnumeric (obj.markerfacecolor) 
+	               && isequal (color, obj.markerfacecolor)))
+	         style = strcat (style, "points");
+	         if (isfield (obj, "markersize"))
+	           if (length (mdat) == nc)
+		     m = mdat(i);
+	           else
+		     m = mdat;
+	           endif
+		   ps = sprintf("pointsize %f", m / 3);
+                 else
+                   ps = "";
+	         endif
+
+	         tmpwith{sidx} = sprintf ("with %s %s %s %s %s %s",
+					  style, lw, pt2, lt, ps, 
+					  colorspec);
+               else
+	         facesame = false;
+	         if (! isempty (style))	
+	           tmpwith{sidx} = sprintf ("with %s %s %s %s",
+					    style, lw, lt, 
+					    colorspec);
+	           sidx ++;
+	         endif
+	         if (isnumeric (obj.markerfacecolor) && ! mono)
+	           colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+				        round (255*obj.markerfacecolor));
+	         endif
+	         style = "points";
+	         if (isfield (obj, "markersize"))
+	           if (length (mdat) == nc)
+		     m = mdat(i);
+	           else
+		     m = mdat;
+	           endif
+		   ps = sprintf("pointsize %f", m / 3);
+                 else
+                   ps = "";
+	         endif
+	         tmpwith{sidx} = sprintf ("with %s %s %s %s %s %s",
+					  style, lw, pt2, lt, ps, 
+					  colorspec);
+               endif
+             endif
 
+             if (isfield (obj, "markeredgecolor") 
+	         && !strncmp (obj.markeredgecolor, "none", 4))
+               if (facesame && (strncmp (obj.markeredgecolor, "auto", 4)
+		                || ! isnumeric (obj.markeredgecolor) 
+		                || (isnumeric (obj.markeredgecolor) 
+			            && isequal (color, obj.markeredgecolor))))
+	         if (! isequal (pt, pt2) && sidx == 1 
+                     && ((length (style) == 5 
+	                  && strncmp (style, "lines", 5)) 
+                         || isempty (style)))
+	           style = strcat (style, "points");
+	           if (isfield (obj, "markersize"))
+	             if (length (mdat) == nc)
+		       m = mdat(i);
+	             else
+		       m = mdat;
+	             endif
+		     ps = sprintf("pointsize %f", m / 3);
+                   else
+                     ps = "";
+	           endif
+	           tmpwith{sidx} = sprintf ("with %s %s %s %s %s %s",
+					    style, lw, pt, lt, ps, 
+					    colorspec);
+	         endif
+               else
+	         if (!isempty (style))	
+                   if (isempty (tmpwith{sidx}))
+	             tmpwith{sidx} = sprintf ("with %s %s %s %s",
+					      style, lw, lt, 
+					      colorspec);
+                   endif
+	           sidx ++;
+	         endif
+	         if (! mono)
+	           if (strncmp (obj.markeredgecolor, "auto", 4))
+	             colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+				          round (255*color));
+	           elseif (isnumeric (obj.markeredgecolor) && ! mono)
+	             colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+				          round (255*obj.markeredgecolor));
+	           endif
+	         endif
+	         style = "points";
+	         if (isfield (obj, "markersize"))
+	           if (length (mdat) == nc)
+		     m = mdat(i);
+	           else
+		     m = mdat;
+	           endif
+		   ps = sprintf("pointsize %f", m / 3);
+                 else
+                   ps = "";
+	         endif
+	         tmpwith{sidx} = sprintf ("with %s %s %s %s %s %s",
+					  style, lw, pt, lt, ps, 
+					  colorspec);
+               endif
+             endif
+
+             if (isempty (tmpwith))
+               withclause{data_idx} = sprintf ("with %s %s %s %s %s",
+                                               style, lw, pt, lt, 
+                                               colorspec);
+             else
+	       withclause{data_idx} = tmpwith{1};
+             endif
 	     if (nd == 3)
 	       if (! isnan (xcol) && ! isnan (ycol) && ! isnan (zcol))
 		 data{data_idx} = [[xcol; xcol(1)], [ycol; ycol(1)], ...
 				   [zcol; zcol(1)]]';
 	       else
 		 data{data_idx} = [xcol, ycol, zcol]';
 	       endif
 	       usingclause{data_idx} = sprintf ("record=%d using ($1):($2):($3)", columns (data{data_idx}));
 	     else
 	       if (! isnan (xcol) && ! isnan (ycol))
 		 data{data_idx} = [[xcol; xcol(1)], [ycol; ycol(1)]]';
 	       else
 		 data{data_idx} = [xcol, ycol]';
 	       endif
 	       usingclause{data_idx} = sprintf ("record=%d using ($1):($2)", columns (data{data_idx}));
 	     endif
+
+	     if (length (tmpwith) > 1)
+	       data_idx++;
+	       is_image_data(data_idx) = is_image_data(data_idx - 1); 
+	       parametric(data_idx) = parametric(data_idx - 1);
+	       have_cdata(data_idx) = have_cdata(data_idx - 1);
+	       have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
+	       titlespec{data_idx} = "title \"\"";
+	       usingclause{data_idx} = usingclause{data_idx - 1};
+	       data{data_idx} = data{data_idx - 1};
+	       withclause{data_idx} = tmpwith{2};
+	     endif
+	     if (length (tmpwith) > 2)
+	       data_idx++;
+	       is_image_data(data_idx) = is_image_data(data_idx - 1); 
+	       parametric(data_idx) = parametric(data_idx - 1);
+	       have_cdata(data_idx) = have_cdata(data_idx - 1);
+	       have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
+	       titlespec{data_idx} = "title \"\"";
+	       usingclause{data_idx} = usingclause{data_idx - 1};
+	       data{data_idx} = data{data_idx - 1};
+	       withclause{data_idx} = tmpwith{3};
+	     endif
 	   endif
 	 endfor
 
 	case "surface"
 	  view_map = true;
           if (! (strncmp (obj.edgecolor, "none", 4)
 		 && strncmp (obj.facecolor, "none", 4)))
 	    data_idx++;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-12  David Bateman  <dbateman@free.fr>
+
+	* graphics.h.in (patch::properties): Add "flat" value to
+	markeredgecolor and  markerfacecolor properties.
+
 2010-01-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (builtin_type_t): New enum constants: btyp_cell,
 	btyp_struct and btyp_func_handle.
 	(btyp_isinteger, btyp_isfloat, btyp_isarray): New funcs.
 	(btyp_class_name): New array.
 	(get_builtin_classes): New func.
 	* ov-cell.h (octave_cell::builtin_type): New virtual override.
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3294,18 +3294,18 @@ public:
       double_property diffusestrength , 0.6
       double_property specularstrength , 0.6
       double_property specularexponent , 10.0
       double_property specularcolorreflectance , 1.0
       radio_property erasemode , "{normal}|background|xor|none"
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
-      color_property markeredgecolor , "{auto}|none"
-      color_property markerfacecolor , "auto|{none}"
+      color_property markeredgecolor , "{auto}|none|flat"
+      color_property markerfacecolor , "auto|{none}|flat"
       double_property markersize , 6
       string_property keylabel , ""
       radio_property interpreter , "{tex}|none|latex"
       radio_property alphadatamapping l , "none|{scaled}|direct"
       // hidden properties for limit computation
       row_vector_property xlim hlr , Matrix ()
       row_vector_property ylim hlr , Matrix ()
       row_vector_property zlim hlr , Matrix ()
