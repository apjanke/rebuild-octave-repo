# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374732766 25200
#      Wed Jul 24 23:12:46 2013 -0700
# Node ID cae21eadc27b3bef8c84ab20bd00c503d0c2d661
# Parent  2d17dbdf6b7db403fcb9e01fe87cb8dcc1553066
area.m: Update to use new __plt_get_axis_arg__.

* scripts/plot/area.m: Update to use new __plt_get_axis_arg__.
Tweak docstring.

diff --git a/scripts/plot/area.m b/scripts/plot/area.m
--- a/scripts/plot/area.m
+++ b/scripts/plot/area.m
@@ -17,31 +17,34 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} area (@var{y})
 ## @deftypefnx {Function File} {} area (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{lvl})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{prop}, @var{val}, @dots{})
-## @deftypefnx {Function File} {} area (@var{h}, @dots{})
+## @deftypefnx {Function File} {} area (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} area (@dots{})
 ## Area plot of the columns of @var{y}.  This shows the
 ## contributions of each column value to the row sum.  It is functionally
 ## similar to @code{plot (@var{x}, cumsum (@var{y}, 2))}, except that the
 ## area under the curve is shaded.
 ##
 ## If the @var{x} argument is omitted it defaults to 
 ## @code{1 : rows (@var{y})}.  A value @var{lvl} can be defined that determines
 ## where the base level of the shading under the curve should be defined.  The
 ## default level is 0.
 ##
 ## Additional arguments to the @code{area} function are passed directly to
 ## @code{patch}.  
 ##
+## If the first argument is an axis handle @var{hax}, then plot into these axes,
+## rather than the current axis handle returned by @code{gca}.
+##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## object representing the area patch objects.  The "BaseValue" property
 ## of the hggroup can be used to adjust the level where shading begins.
 ##
 ## Example: Verify identity sin^2 + cos^2 = 1
 ##
 ## @example
 ## @group
@@ -51,17 +54,17 @@
 ## legend ('sin^2', 'cos^2', 'location', 'NorthEastOutside');  
 ## @end group
 ## @end example
 ## @seealso{plot, patch}
 ## @end deftypefn
 
 function h = area (varargin)
 
-  [ax, varargin, nargin] = __plt_get_axis_arg__ ("area", varargin{:});
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("area", varargin{:});
 
   if (nargin == 0)
     print_usage ();
   endif
 
   idx = 1;
   x = y = [];
   bv = 0;
@@ -86,36 +89,37 @@ function h = area (varargin)
     endif
   else
     print_usage ();
   endif
   ## Check for additional args.
   if (nargin >= idx)
     args = {varargin{idx:end}};
   endif
-  newplot ();
   if (isvector (y))
     y = y(:);
   endif
   if (isempty (x))
     x = repmat ([1:rows(y)]', 1, columns (y));
   elseif (isvector (x))
-    x = repmat (x(:),  1, columns (y));
+    x = repmat (x(:), 1, columns (y));
   endif
 
-  oldax = gca ();
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
-    axes (ax);
-    tmp = __area__ (ax, x, y, bv, args{:});
+    hax = newplot (hax);
+    htmp = __area__ (hax, x, y, bv, args{:});
   unwind_protect_cleanup
-    axes (oldax);
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
   end_unwind_protect
 
   if (nargout > 0)
-    h = tmp;
+    h = htmp;
   endif
 
 endfunction
 
 function retval = __area__ (ax, x, y, bv, varargin)
 
   y0 = bv * ones (1, rows (y));
   y0 = zeros (1, rows (y));
