# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1474042953 25200
#      Fri Sep 16 09:22:33 2016 -0700
# Node ID 2aa9e8893ea960eb8929d6f9034b26da5c809f31
# Parent  05c2313904cbc8a90ada0007210b3b92e8ac9b99
Fix crash in evalc (bug #49057).

* oct-parse.in.yy (maybe_print_last_error_message, restore_octave_stdout,
restore_octave_stderr): New functions.
* oct-parse.in.yy (Fevalc): Replace try/catch block with unwind_protect.
Register three new functions above to be called if an error is encountered.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -5314,16 +5314,40 @@ Like @code{eval}, except that the expres
       // execution exception.
       if (execution_error)
         octave_throw_execution_exception ();
     }
 
   return retval;
 }
 
+static void
+maybe_print_last_error_message (bool *doit)
+{
+  if (doit && *doit)
+    // Print error message again, which was lost because of the stderr buffer
+    // Note: this keeps error_state and last_error_stack intact
+    message_with_id ("error", last_error_id ().c_str (),
+                     last_error_message ().c_str ());
+}
+
+static void
+restore_octave_stdout (std::streambuf *buf)
+{
+  octave_stdout.flush ();
+  octave_stdout.rdbuf (buf);
+}
+
+static void
+restore_octave_stderr (std::streambuf *buf)
+{
+  std::cerr.flush ();
+  std::cerr.rdbuf (buf);
+}
+
 DEFUN (evalc, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{s} =} evalc (@var{try})
 @deftypefnx {} {@var{s} =} evalc (@var{try}, @var{catch})
 Parse and evaluate the string @var{try} as if it were an Octave program,
 while capturing the output into the return variable @var{s}.
 
 If execution fails, evaluate the optional string @var{catch}.
@@ -5360,48 +5384,30 @@ s = evalc ("t = 42"), t
   std::ostream& err_stream = std::cerr;
 
   out_stream.flush ();
   err_stream.flush ();
 
   std::streambuf* old_out_buf = out_stream.rdbuf (buffer.rdbuf ());
   std::streambuf* old_err_buf = err_stream.rdbuf (buffer.rdbuf ());
 
+  bool eval_error_occurred = true;
+
+  octave::unwind_protect frame;
+
+  frame.add_fcn (maybe_print_last_error_message, &eval_error_occurred);
+  frame.add_fcn (restore_octave_stdout, old_out_buf);
+  frame.add_fcn (restore_octave_stderr, old_err_buf);
 
   // call standard eval function
   octave_value_list retval;
   int eval_nargout = std::max (0, nargout - 1);
 
-  const octave::execution_exception* eval_exception = 0;
-  try
-    {
-      retval = Feval (args, eval_nargout);
-    }
-  catch (const octave::execution_exception& e)
-    {
-      // hold back exception from eval until we have restored streams
-      eval_exception = &e;
-    }
-
-  // stop capturing buffer and restore stdout/stderr
-  out_stream.flush ();
-  err_stream.flush ();
-
-  out_stream.rdbuf (old_out_buf);
-  err_stream.rdbuf (old_err_buf);
-
-  if (eval_exception)
-    {
-      // Print error message again, which was lost because of the stderr buffer
-      // Note: this keeps error_state and last_error_stack intact
-      message_with_id ("error", last_error_id ().c_str (),
-                       last_error_message ().c_str ());
-      // rethrow original exception from above
-      throw *eval_exception;
-    }
+  retval = Feval (args, eval_nargout);
+  eval_error_occurred = false;
 
   retval.prepend (buffer.str ());
   return retval;
 }
 
 /*
 
 %!assert (evalc ("1"), "ans =  1\n")
