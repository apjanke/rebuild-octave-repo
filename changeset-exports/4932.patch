# HG changeset patch
# User jwe
# Date 1091712375 0
#      Thu Aug 05 13:26:15 2004 +0000
# Node ID 43f4ebd2704c455eee781d6324c43f2b8d6e2ade
# Parent  1ed883f251e88a94b68bd979c7f75cae1b609169
[project @ 2004-08-05 13:26:10 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2004-08-05  John W. Eaton  <jwe@octave.org>
+
+	* intNDArray.cc (intNDArray<T>::operator !, intNDArray<T>::all,
+	intNDArray<T>::any): Sprinkle with this-> as needed.
+	* mx-inlines.cc (MX_ND_REDUCTION, MX_ND_CUMULATIVE_OP): Likewise.
+
 2004-08-03  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array<T>::squeeze): Do nothing for 2-d arrays.  For
 	arrays with more than two dimensions and only one non-singleton
 	dimension, return a column vector.
 
 2004-07-28  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -34,38 +34,38 @@ Software Foundation, 59 Temple Place - S
 #include "lo-ieee.h"
 
 // unary operations
 
 template <class T>
 boolNDArray
 intNDArray<T>::operator ! (void) const
 {
-  boolNDArray b (dims ());
+  boolNDArray b (this->dims ());
 
-  for (int i = 0; i < length (); i++)
-    b.elem (i) = ! elem (i);
+  for (int i = 0; i < this->length (); i++)
+    b.elem (i) = ! this->elem (i);
 
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 template <class T>
 boolNDArray
 intNDArray<T>::all (int dim) const
 {
-  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (elem (iter_idx) == T (0)), true);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (this->elem (iter_idx) == T (0)), true);
 }
 
 template <class T>
 boolNDArray
 intNDArray<T>::any (int dim) const
 {
-  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (elem (iter_idx) == T (0)), false);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (this->elem (iter_idx) == T (0)), false);
 }
 
 template <class T>
 void
 intNDArray<T>::increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension)
 {
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -378,17 +378,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
      break; \
    } 
  
 #define MX_ND_REDUCTION(EVAL_EXPR, END_EXPR, VAL, ACC_DECL, \
                         RET_TYPE, RET_ELT_TYPE) \
  \
   RET_TYPE retval; \
  \
-  dim_vector dv = dims (); \
+  dim_vector dv = this->dims (); \
  \
   int empty = true; \
  \
   for (int i = 0; i < dv.length (); i++) \
     { \
       if (dv(i) > 0) \
         { \
           empty = false; \
@@ -449,17 +449,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
     dim = -1; \
   else \
     dim_length = dv(dim); \
  \
   if (dim > -1) \
     dv(dim) = 1; \
  \
   /* This finds the number of elements in retval */ \
-  int num_iter = (numel () / dim_length); \
+  int num_iter = (this->numel () / dim_length); \
  \
   /* Make sure retval has correct dimensions */ \
   retval.resize (dv, RET_ELT_TYPE ()); \
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
   /* Filling in values.         */ \
   /* First loop finds new index */ \
@@ -496,17 +496,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
                    INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray, Complex)
 
 #define MX_ND_ANY_ALL_REDUCTION(EVAL_EXPR, VAL) \
   MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray, bool)
 
 #define MX_ND_CUMULATIVE_OP(RET_TYPE, ACC_TYPE, VAL, OP) \
   RET_TYPE retval; \
  \
-  dim_vector dv = dims (); \
+  dim_vector dv = this->dims (); \
  \
   int empty = true; \
  \
   /* If dim is larger then number of dims, return array as is */ \
   if (dim >= dv.length ()) \
     { \
       retval = RET_TYPE (*this); \
       return retval; \
@@ -569,17 +569,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
   /*  Length of Dimension */ \
   int dim_length = 1; \
  \
   dim_length = dv (dim); \
  \
   dv (dim) = 1; \
  \
   /* This finds the number of elements in retval */ \
-  int num_iter = (numel () / dim_length); \
+  int num_iter = (this->numel () / dim_length); \
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
   /* Filling in values.         */ \
   /* First loop finds new index */ \
  \
   for (int j = 0; j < num_iter; j++) \
     { \
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -89,20 +89,20 @@ public:
 
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = octave_value ());
 
   Cell reshape (const dim_vector& new_dims) const
     { return ArrayN<octave_value>::reshape (new_dims); }
 
   // XXX FIXME XXX
-  boolMatrix all (int dim = 0) const { return boolMatrix (); }
+  boolMatrix all (int /* dim */ = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
-  boolMatrix any (int dim = 0) const { return boolMatrix (); }
+  boolMatrix any (int /* dim */ = 0) const { return boolMatrix (); }
 
   friend Cell concat (const Cell& ra, const Cell& rb, const Array<int>& ra_idx);
 
   Cell& insert (const Cell& a, int r, int c);
   Cell& insert (const Cell& a, const Array<int>& ra_idx);
 
   // XXX FIXME XXX
   bool is_true (void) const { return false; }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,31 @@
 2004-08-05  John W. Eaton  <jwe@octave.org>
 
+	* ov-base-int.cc (octave_base_int_matrix<T>::save_ascii,
+	octave_base_int_matrix<T>::load_ascii,
+	octave_base_int_matrix<T>::save_binary,
+	octave_base_int_matrix<T>::load_binary,
+	octave_base_int_matrix<T>::save_hdf5,
+	octave_base_int_matrix<T>::load_hdf5,
+	octave_base_int_matrix<T>::try_narrowing_conversion,
+	octave_base_int_scalar<T>::print_raw,
+	octave_base_int_scalar<T>::save_ascii,
+	octave_base_int_scalar<T>::load_ascii,
+	octave_base_int_scalar<T>::save_binary,
+	octave_base_int_scalar<T>::load_binary,
+	octave_base_int_scalar<T>::save_hdf5,
+	octave_base_int_scalar<T>::load_hdf5):
+	Sprinkle with this-> as needed.
+
+	* Makefile.in (EXTRAS): New macro.  Move ov-base-int.cc here from
+	OV_INTTYPE_SRC.
+	(INCLUDES_FOR_INSTALL): New macro.
+	(install-inc, uninstall): Use it instead of INCLUDES.
+
 	* variables.h (symbol_exist): Default for type is now "any".
 
 2004-08-05  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-handle.cc (octave_fcn_handle (const std::string&, 
 	const string_vector&, const std::string&)): New constructor for inline
 	function handles.
 	(octave_fcn_handle::print_raw): Allow inline functions to be printed.
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -59,34 +59,34 @@ Software Foundation, 59 Temple Place - S
 #include "ls-hdf5.h"
 
 template <class T>
 octave_value *
 octave_base_int_matrix<T>::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
-  if (matrix.nelem () == 1)
-    retval = new typename octave_value_int_traits<T>::scalar_type (matrix (0));
+  if (this->matrix.nelem () == 1)
+    retval = new typename octave_value_int_traits<T>::scalar_type (this->matrix (0));
 
   return retval;
 }
 
 template <class T>
 bool
 octave_base_int_matrix<T>::save_ascii (std::ostream& os, bool&, bool)
 {
-  dim_vector d = dims ();
+  dim_vector d = this->dims ();
 
   os << "# ndims: " << d.length () << "\n";
 
   for (int i = 0; i < d.length (); i++)
     os << " " << d (i);
 
-  os << "\n" << matrix;
+  os << "\n" << this->matrix;
 
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_matrix<T>::load_ascii (std::istream& is)
 {
@@ -108,17 +108,17 @@ octave_base_int_matrix<T>::load_ascii (s
 	  is >> tmp;
 
 	  if (!is) 
 	    {
 	      error ("load: failed to load matrix constant");
 	      success = false;
 	    }
 
-	  matrix = tmp;
+	  this->matrix = tmp;
 	}
       else
 	{
 	  error ("load: failed to extract number of rows and columns");
 	  success = false;
 	}
     }
   else
@@ -126,30 +126,30 @@ octave_base_int_matrix<T>::load_ascii (s
 
   return success;
 }
 
 template <class T>
 bool 
 octave_base_int_matrix<T>::save_binary (std::ostream& os, bool&)
 {
-  dim_vector d = dims ();
+  dim_vector d = this->dims ();
   if (d.length() < 1)
     return false;
 
   // Use negative value for ndims to differentiate with old format!!
   FOUR_BYTE_INT tmp = - d.length();
   os.write (X_CAST (char *, &tmp), 4);
   for (int i=0; i < d.length (); i++)
     {
       tmp = d(i);
       os.write (X_CAST (char *, &tmp), 4);
     }
 
-  os.write (X_CAST(char *, matrix.data()), byte_size());
+  os.write (X_CAST(char *, this->matrix.data()), this->byte_size());
 
   return true;
 }
 
 template <class T>
 bool
 octave_base_int_matrix<T>::load_binary (std::istream& is, bool swap,
 					oct_mach_info::float_format )
@@ -198,29 +198,29 @@ octave_base_int_matrix<T>::load_binary (
 	    swap_2_bytes (X_CAST (char *, &m(i)));
 	    break;
 	  case 1:
 	  default:
 	    break;
 	  }
     }
 
-  matrix = m;
+  this->matrix = m;
   return true;
 }
 
 #if defined (HAVE_HDF5)
 
 template <class T>
 bool
 octave_base_int_matrix<T>::save_hdf5 (hid_t loc_id, const char *name, bool)
 {
   hid_t save_type_hid = HDF5_SAVE_TYPE;
   bool retval = true;
-  dim_vector dv = dims ();
+  dim_vector dv = this->dims ();
   int empty = save_hdf5_empty (loc_id, name, dv);
   if (empty)
     return (empty > 0);
 
   int rank = dv.length ();
   hid_t space_hid = -1, data_hid = -1;
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
@@ -236,17 +236,17 @@ octave_base_int_matrix<T>::save_hdf5 (hi
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return false;
     }
 
   retval = H5Dwrite (data_hid, save_type_hid, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, matrix.data()) >= 0;
+		     H5P_DEFAULT, this->matrix.data()) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   return retval;
 }
 
 template <class T>
@@ -254,17 +254,17 @@ bool
 octave_base_int_matrix<T>::load_hdf5 (hid_t loc_id, const char *name,
 				      bool /* have_h5giterate_bug */)
 {
   hid_t save_type_hid = HDF5_SAVE_TYPE;
   bool retval = false;
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
-    matrix.resize(dv);
+    this->matrix.resize(dv);
   if (empty)
       return (empty > 0);
 
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t space_id = H5Dget_space (data_hid);
 
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
   
@@ -294,91 +294,91 @@ octave_base_int_matrix<T>::load_hdf5 (hi
 	dv(j) = hdims[i];
     }
 
   T m (dv);
   if (H5Dread (data_hid, save_type_hid, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, m.fortran_vec()) >= 0) 
     {
       retval = true;
-      matrix = m;
+      this->matrix = m;
     }
 
   H5Sclose (space_id);
   H5Dclose (data_hid);
 
   return retval;
 }
 
 #endif
 
 template <class T>
 void
 octave_base_int_matrix<T>::print_raw (std::ostream& os,
 				      bool pr_as_read_syntax) const
 {
-  octave_print_internal (os, matrix, pr_as_read_syntax,
-   			 current_print_indent_level ());
+  octave_print_internal (os, this->matrix, pr_as_read_syntax,
+   			 this->current_print_indent_level ());
 }
 
 template <class T>
 bool
 octave_base_int_scalar<T>::save_ascii (std::ostream& os, bool& , bool)
 {
-  os << scalar << "\n";
+  os << this->scalar << "\n";
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_scalar<T>::load_ascii (std::istream& is)
 {
-  is >> scalar;
+  is >> this->scalar;
   if (!is)
     {
       error ("load: failed to load scalar constant");
       return false;
     }
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_scalar<T>::save_binary (std::ostream& os, bool&)
 {
-  os.write (X_CAST(char *, &scalar), byte_size());
+  os.write (X_CAST(char *, &(this->scalar)), this->byte_size());
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_scalar<T>::load_binary (std::istream& is, bool swap,
 					oct_mach_info::float_format)
 {
   T tmp;
-  if (! is.read (X_CAST (char *, &tmp), byte_size()))
+  if (! is.read (X_CAST (char *, &tmp), this->byte_size()))
     return false;
 
   if (swap)
-    switch (byte_size())
+    switch (this->byte_size())
       {
       case 8:
 	swap_8_bytes (X_CAST (char *, &tmp));
 	break;
       case 4:
 	swap_4_bytes (X_CAST (char *, &tmp));
 	break;
       case 2:
 	swap_2_bytes (X_CAST (char *, &tmp));
 	break;
       case 1:
       default:
 	break;
       }
-  scalar = tmp;
+  this->scalar = tmp;
   return true;
 }
 
 #if defined (HAVE_HDF5)
 template <class T>
 bool
 octave_base_int_scalar<T>::save_hdf5 (hid_t loc_id, const char *name, bool)
 {
@@ -394,17 +394,17 @@ octave_base_int_scalar<T>::save_hdf5 (hi
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
 
   retval = H5Dwrite (data_hid, save_type_hid, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, &scalar) >= 0;
+		     H5P_DEFAULT, &(this->scalar)) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   return retval;
 }
 
 template <class T>
@@ -427,17 +427,17 @@ octave_base_int_scalar<T>::load_hdf5 (hi
   T tmp;
   if (H5Dread (data_hid, save_type_hid, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, &tmp) < 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
-  scalar = tmp;
+  this->scalar = tmp;
 
   H5Dclose (data_hid);
 
   return true;
 }
 #endif
 
 /*
