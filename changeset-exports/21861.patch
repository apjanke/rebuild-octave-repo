# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465675983 25200
#      Sat Jun 11 13:13:03 2016 -0700
# Node ID a55f1fa2c94a9b1031bdd7cbe94b2a0b3cc171a4
# Parent  f2b5499e8662b1f75e60e6d246257fe2e6abd7f4
oct-parse.in.yy: Shorten lines to < 80 characters where possible.

* oct-parse.in.yy: Shorten lines to < 80 characters where possible.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3061,17 +3061,18 @@ octave_base_parser::make_assign_op (int 
         {
           std::string kw = *it;
 
           if (is_keyword (kw))
             {
               delete lhs;
               delete rhs;
 
-              bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);
+              bison_error ("invalid assignment to keyword \"" + kw + "\"",
+                           l, c);
 
               return 0;
             }
         }
 
       return new tree_multi_assignment (lhs, rhs, false, l, c);
     }
 }
@@ -3633,17 +3634,18 @@ octave_base_parser::make_index_expressio
       int l = expr->line ();
       int c = expr->column ();
 
       if (! expr->is_postfix_indexed ())
         expr->set_postfix_index (type);
 
       if (expr->is_index_expression ())
         {
-          tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);
+          tree_index_expression *tmp =
+            static_cast<tree_index_expression *> (expr);
 
           tmp->append (args, type);
 
           retval = tmp;
         }
       else
         retval = new tree_index_expression (expr, args, l, c, type);
     }
@@ -3981,17 +3983,18 @@ octave_base_parser::append_statement_lis
 void
 octave_base_parser::bison_error (const std::string& str, int l, int c)
 {
   int err_line = l < 0 ? lexer.input_line_number : l;
   int err_col = c < 0 ? lexer.current_input_column - 1 : c;
 
   std::ostringstream output_buf;
 
-  if (lexer.reading_fcn_file || lexer.reading_script_file || lexer.reading_classdef_file)
+  if (lexer.reading_fcn_file || lexer.reading_script_file
+      || lexer.reading_classdef_file)
     output_buf << "parse error near line " << err_line
                << " of file " << lexer.fcn_file_full_name;
   else
     output_buf << "parse error:";
 
   if (str != "parse error")
     output_buf << "\n\n  " << str;
 
@@ -4692,17 +4695,17 @@ the filename and the extension.\n\
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   std::string arg;
 
   if (nargin == 1)
-    arg = args(0).xstring_value ("mfilename: expecting argument to be a character string");
+    arg = args(0).xstring_value ("mfilename: argument must be a string");
 
   std::string fname;
 
   octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
   if (fcn)
     {
       fname = fcn->fcn_file_name ();
@@ -4750,22 +4753,22 @@ context of the function that called the 
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
-  std::string file_name = args(0).xstring_value ("source: expecting filename as argument");
+  std::string file_name = args(0).xstring_value ("source: FILE must be a string");
 
   std::string context;
 
   if (nargin == 2)
-    context = args(1).xstring_value ("source: expecting context to be character string");
+    context = args(1).xstring_value ("source: CONTEXT must be a string");
 
   source_file (file_name, context);
 
   return retval;
 }
 
 // Evaluate an Octave function (built-in or interpreted) and return
 // the list of result values.  NAME is the name of the function to
@@ -4841,17 +4844,17 @@ feval (const octave_value_list& args, in
                || f_arg.is_anonymous_function ()
                || f_arg.is_inline_function ())
         {
           const octave_value_list tmp_args = get_feval_args (args);
 
           retval = f_arg.do_multi_index_op (nargout, tmp_args);
         }
       else
-        error ("feval: first argument must be a string, inline function or a function handle");
+        error ("feval: first argument must be a string, inline function, or a function handle");
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {} {} feval (@var{name}, @dots{})\n\
@@ -5070,18 +5073,19 @@ eval ('error (\"This is a bad example\")
      @print{} This error occurred:\n\
         This is a bad example\n\
 @end group\n\
 @end example\n\
 \n\
 Programming Note: if you are only using @code{eval} as an error-capturing\n\
 mechanism, rather than for the execution of arbitrary code strings,\n\
 Consider using try/catch blocks or unwind_protect/unwind_protect_cleanup\n\
-blocks instead.  These techniques have higher performance and don't introduce\n\
-the security considerations that the evaluation of arbitrary code does.\n\
+blocks instead.  These techniques have higher performance and don't\n\
+introduce the security considerations that the evaluation of arbitrary code\n\
+does.\n\
 @seealso{evalin, evalc, assignin, feval}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
@@ -5318,19 +5322,19 @@ while capturing the output into the retu
 \n\
 If execution fails, evaluate the optional string @var{catch}.\n\
 \n\
 This function behaves like @code{eval}, but any output or warning messages\n\
 which would normally be written to the console are captured and returned in\n\
 the string @var{s}.\n\
 \n\
 The @code{diary} is disabled during the execution of this function.  When\n\
-@code{system} is used, any output produced by external programs is @emph{not}\n\
-captured, unless their output is captured by the @code{system} function\n\
-itself.\n\
+@code{system} is used, any output produced by external programs is\n\
+@emph{not} captured, unless their output is captured by the @code{system}\n\
+function itself.\n\
 \n\
 @example\n\
 @group\n\
 s = evalc (\"t = 42\"), t\n\
   @result{} s = t =  42\n\
 \n\
   @result{} t =  42\n\
 @end group\n\
@@ -5448,18 +5452,18 @@ s = evalc (\"t = 42\"), t\n\
 %!error evalc ("switch = 13;")
 
 */
 
 DEFUN (__parser_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} __parser_debug_flag__ ()\n\
 @deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
-Query or set the internal flag that determines whether Octave's parser prints\n\
-debug information as it processes an expression.\n\
+Query or set the internal flag that determines whether Octave's parser\n\
+prints debug information as it processes an expression.\n\
 @seealso{__lexer_debug_flag__}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   bool debug_flag = octave_debug;
 
   retval = set_internal_variable (debug_flag, args, nargout,
