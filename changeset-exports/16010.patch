# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1360256320 18000
#      Thu Feb 07 11:58:40 2013 -0500
# Node ID c5d548e4101f63ab1ddd7606bec01210c6512927
# Parent  ba304d49d2b27257eb8a6a6e6709680544cc7518
* cellfun.cc: Style fixes.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1137,17 +1137,17 @@ arrayfun (@@str2num, [1234],\n\
 {
   octave_value_list retval;
   int nargin = args.length ();
   int nargout1 = (nargout < 1 ? 1 : nargout);
 
   if (nargin < 2)
     {
       error_with_id ("Octave:invalid-fun-call", 
-                           "arrayfun: function requires at least 2 arguments");
+                     "arrayfun: function requires at least 2 arguments");
       print_usage ();
       return retval;
     }
 
   octave_value func = args(0);
   bool symbol_table_lookup = false;
 
   if (func.is_string ())
@@ -1169,17 +1169,18 @@ arrayfun (@@str2num, [1234],\n\
             func = octave_value (ptr_func, true);
         }
       else
         {
           func = symbol_table::find_function (name);
 
           if (func.is_undefined ())
             error_with_id ("Octave:invalid-input-arg",
-                         "arrayfun: invalid function NAME: %s", name.c_str ());
+                           "arrayfun: invalid function NAME: %s",
+                           name.c_str ());
 
           symbol_table_lookup = true;
         }
 
       if (error_state)
         return retval;
     }
 
@@ -1248,17 +1249,17 @@ arrayfun (@@str2num, [1234],\n\
               fdims = inputs[j].dims ();
               k = inputs[j].numel ();
 
               for (int i = j+1; i < nargin; i++)
                 {
                   if (mask[i] && inputs[i].dims () != fdims)
                     {
                       error_with_id ("Octave:invalid-input-arg", 
-                                              "arrayfun: dimensions mismatch");
+                                     "arrayfun: dimensions mismatch");
                       return retval;
                     }
                 }
               break;
             }
         }
 
 
@@ -1296,17 +1297,17 @@ arrayfun (@@str2num, [1234],\n\
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
                   error_with_id ("Octave:invalid-fun-call", 
-                      "arrayfun: function returned fewer than nargout values");
+                                 "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1322,17 +1323,17 @@ arrayfun (@@str2num, [1234],\n\
                             {
                               octave_value val = tmp(j);
 
                               if (val.numel () == 1)
                                 retv[j] = val.resize (fdims);
                               else
                                 {
                                   error_with_id ("Octave:invalid-fun-call",
-             "arrayfun: all values must be scalars when UniformOutput = true");
+                                                 "arrayfun: all values must be scalars when UniformOutput = true");
                                   break;
                                 }
                             }
                         }
                     }
                   else
                     {
                       for (int j = 0; j < num_to_copy; j++)
@@ -1350,17 +1351,17 @@ arrayfun (@@str2num, [1234],\n\
                                                       idx_type, idx_list, val);
 
                                       if (error_state)
                                         break;
                                     }
                                   else
                                     {
                                       error_with_id ("Octave:invalid-fun-call",
-              "arrayfun: all values must be scalars when UniformOutput = true");
+                                                     "arrayfun: all values must be scalars when UniformOutput = true");
                                       break;
                                     }
                                 }
                             }
                         }
                     }
                 }
 
@@ -1409,17 +1410,17 @@ arrayfun (@@str2num, [1234],\n\
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
                   error_with_id ("Octave:invalid-fun-call", 
-                      "arrayfun: function returned fewer than nargout values");
+                                 "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1441,17 +1442,17 @@ arrayfun (@@str2num, [1234],\n\
 
               for (int j = 0; j < nargout1; j++)
                 retval(j) = results[j];
             }
         }
     }
   else
     error_with_id ("Octave:invalid-fun-call", 
-                "arrayfun: argument NAME must be a string or function handle");
+                   "arrayfun: argument NAME must be a string or function handle");
 
   return retval;
 }
 
 /*
 %!function r = __f11 (x)
 %!  global __arrayfun_test_num_outputs__;
 %!  __arrayfun_test_num_outputs__ = nargout;
