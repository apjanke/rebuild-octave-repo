# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1221977980 -7200
#      Sun Sep 21 08:19:40 2008 +0200
# Branch release-3-0-x
# Node ID 062e744728ae5ceff62c6975ac3030b4f6a6111c
# Parent  c6c678875825fd2c7e8c566be069d8bda9a3196f
Clarify fftw documentation

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-09-18  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/fftw.cc (Ffftw): Clarify the documentation.
+
 2008-09-19  David Bateman  <dbateman@free.fr>
 
 	* data.cc (SINGLE_TYPE_CONCAT, DO_SINGLE_TYPE_CONCAT): New macros
 	(do_cat): Special case single type concatenations for speed.
 	* pt.mat.cc (std::string get_concat_class (const std::string&,
 	const std::string&), void maybe_warn_string_concat (bool, bool)):
 	Remove static declaration.
 	* pt-mat.h (std::string get_concat_class (const std::string&,
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -37,37 +37,39 @@ DEFUN_DLD (fftw, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{method} =} fftw ('planner')\n\
 @deftypefnx {Loadable Function} {} fftw ('planner', @var{method})\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom')\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom', @var{wisdom})\n\
 \n\
 Manage FFTW wisdom data. Wisdom data can be used to significantly\n\
 accelerate the calculation of the FFTs but implies an initial cost\n\
-in its calculation. The wisdom used by Octave can be imported directly,\n\
-usually from a file /etc/fftw/wisdom, or @dfn{fftw} can be used\n\
-to import wisdom. For example\n\
+in its calculation. When the FFTW libraries are initialized, they read\n\
+a system wide wisdom file (typically in @file{/etc/fftw/wisdom}), allowing wisdom\n\
+to be shared between applications other than Octave. Alternatively, the\n\
+@code{fftw} function can be used to import wisdom. For example\n\
 \n\
 @example\n\
 @var{wisdom} = fftw ('dwisdom')\n\
 @end example\n\
 \n\
 will save the existing wisdom used by Octave to the string @var{wisdom}.\n\
-This string can then be saved in the usual manner. This existing wisdom\n\
-can be reimported as follows\n\
+This string can then be saved to a file and restored using the @code{save}\n\
+and @code{load} commands respectively. This existing wisdom can be reimported\n\
+as follows\n\
 \n\
 @example\n\
 fftw ('dwisdom', @var{wisdom})\n\
 @end example \n\
 \n\
 If @var{wisdom} is an empty matrix, then the wisdom used is cleared.\n\
 \n\
 During the calculation of fourier transforms further wisdom is generated.\n\
 The fashion in which this wisdom is generated is equally controlled by\n\
-the @dfn{fftw} function. There are five different manners in which the\n\
+the @code{fftw} function. There are five different manners in which the\n\
 wisdom can be treated, these being\n\
 \n\
 @table @asis\n\
 @item 'estimate'\n\
 This specifies that no run-time measurement of the optimal means of\n\
 calculating a particular is performed, and a simple heuristic is used\n\
 to pick a (probably sub-optimal) plan. The advantage of this method is\n\
 that there is little or no overhead in the generation of the plan, which\n\
@@ -100,20 +102,18 @@ be probed with\n\
 and the method used can be set using\n\
 \n\
 @example\n\
 fftw ('planner', @var{method})\n\
 @end example\n\
 \n\
 Note that calculated wisdom will be lost when restarting Octave. However,\n\
 the wisdom data can be reloaded if it is saved to a file as described\n\
-above.  Also, any system-wide wisdom file that has been found will\n\
-also be used. Saved wisdom files should not be used on different\n\
-platforms since they will not be efficient and the point of calculating\n\
-the wisdom is lost.\n\
+above. Saved wisdom files should not be used on different platforms since\n\
+they will not be efficient and the point of calculating the wisdom is lost.\n\
 @seealso{fft, ifft, fft2, ifft2, fftn, ifftn}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length();
 
   if (nargin < 1 || nargin > 2)
