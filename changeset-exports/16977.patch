# HG changeset patch
# User Rik <rik@octave.org>
# Date 1373758069 25200
#      Sat Jul 13 16:27:49 2013 -0700
# Node ID 0d5d3e53255f19a4cf4b1b3836be34743ef1985a
# Parent  13affad7347c268c1f54e03dfaa275b5a7a05932
test.m: Fix randomly failing %!warning test blocks (bug #35850, bug #38679).

* scripts/testfun/test.m: Initialize lasterr and lastwarn to "" before running
code block.  Rewrite trimleft which generated its own error with "" input.
Change output messages to correctly print "error" or "warning" depending on
code block type.  Workaround really odd bug with lastwarn function when embedded
in try/catch blocks.

diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -390,64 +390,72 @@ function [__ret1, __ret2, __ret3, __ret4
       __warning = strcmp (__type, "warning");
       [__pattern, __id, __code] = getpattern (__code);
       if (__id)
         __patstr = ["id=",__id];
       else
         if (! strcmp (__pattern, '.'))
           __patstr = ["<",__pattern,">"];
         else
-          __patstr = "an error";
+          __patstr = ifelse (__warning, "a warning", "an error");
         endif
       endif
       try
         eval (sprintf ("function __test__(%s)\n%s\nendfunction",
                        __shared, __code));
       catch
         __success = 0;
         __msg = sprintf ("%stest failed: syntax error\n%s",
                          __signal_fail, lasterr ());
       end_try_catch
 
       if (__success)
         __success = 0;
         __warnstate = warning ("query", "quiet");
         warning ("on", "quiet");
+        ## Clear error and warning strings before starting
+        lasterr ("");
+        lastwarn ("");
         try
+          ## FIXME: lastwarn () must be called once from *WITHIN* the try block
+          ##        or subsequent warning/lastwarn statements may fail.
+          ##        Likely this is something to do with the specialness of
+          ##        the try block which is disabling normal errors.
+          lastwarn ();
           eval (sprintf ("__test__(%s);", __shared));
           if (! __warning)
             __msg = sprintf ("%serror failed.\nExpected %s but got no error\n",
                              __signal_fail, __patstr);
           else
             if (! isempty (__id))
-              [~, __err] = lastwarn;
+              [~, __err] = lastwarn ();
               __mismatch = ! strcmp (__err, __id);
             else
-              __err = trimerr (lastwarn, "warning");
+              __err = trimerr (lastwarn (), "warning");
               __mismatch = isempty (regexp (__err, __pattern, "once"));
             endif
             warning (__warnstate.state, "quiet");
             if (isempty (__err))
               __msg = sprintf (["%swarning failed.\n" \
                                 "Expected %s but got no warning\n"],
                                __signal_fail, __patstr);
             elseif (__mismatch)
-              __msg = sprintf ("%serror failed.\nExpected %s but got <%s>\n",
+              __msg = sprintf ("%swarning failed.\nExpected %s but got <%s>\n",
                                __signal_fail, __patstr, __err);
             else
               __success = 1;
             endif
           endif
 
         catch
           if (! isempty (__id))
-            [~, __err] = lasterr;
+            [~, __err] = lasterr ();
             __mismatch = ! strcmp (__err, __id);
           else
-            __err = trimerr (lasterr, "error");
+            __err = trimerr (lasterr (), "error");
             __mismatch = isempty (regexp (__err, __pattern, "once"));
           endif
           warning (__warnstate.state, "quiet");
           if (__warning)
             __msg = sprintf (["%swarning failed.\n" \
                               "Expected warning %s but got error <%s>\n"],
                              __signal_fail, __patstr, __err);
           elseif (__mismatch)
@@ -640,30 +648,27 @@ function [pattern, id, rest] = getpatter
     endif
   elseif (strncmp (str, "id=", 3))
     [id, rest] = strtok (str(4:end));
   endif
 endfunction
 
 ## Strip '.*prefix:' from '.*prefix: msg\n' and strip trailing blanks.
 function msg = trimerr (msg, prefix)
-  idx = index (msg, cstrcat (prefix, ":"));
+  idx = index (msg, [prefix ":"]);
   if (idx > 0)
     msg(1:idx+length(prefix)) = [];
   endif
-  msg = trimleft (deblank (msg));
+  msg = strtrim (msg);
 endfunction
 
 ## Strip leading blanks from string.
 function str = trimleft (str)
-  idx = find (isspace (str));
-  leading = find (idx == 1:length (idx));
-  if (! isempty (leading))
-    str = str(leading(end)+1:end);
-  endif
+  idx = find (! isspace (str), 1);
+  str = str(idx:end);
 endfunction
 
 ## Make a structure out of the named variables
 ## (based on Etienne Grossmann's tar function).
 function s = bundle (varargin)
   for i = 1:nargin
     s.(deblank (argn(i,:))) = varargin{i};
   endfor
@@ -681,16 +686,17 @@ function body = __extract_test_code (nm)
           body = cstrcat (body, ln(3:end));
         endif
       endif
     endwhile
     fclose (fid);
   endif
 endfunction
 
+
 ### example from toeplitz
 %!shared msg1,msg2
 %! msg1="C must be a vector";
 %! msg2="C and R must be vectors";
 %!fail ('toeplitz ([])', msg1);
 %!fail ('toeplitz ([1,2;3,4])', msg1);
 %!fail ('toeplitz ([1,2],[])', msg2);
 %!fail ('toeplitz ([1,2],[1,2;3,4])', msg2);
