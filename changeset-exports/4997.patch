# HG changeset patch
# User jwe
# Date 1095281375 0
#      Wed Sep 15 20:49:35 2004 +0000
# Node ID d117a9fb83be18b2891dd5eae798cdd79769e220
# Parent  fcbdb120450a60699f5d4a184742c43cd7117c44
[project @ 2004-09-15 20:49:21 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,38 @@
+2004-09-15  David Bateman  <dbateman@free.fr>
+
+	* ov.cc (octave_value::octave_value (const ArrayN<char>&, bool)):
+	New Constructor .
+	* ov.h: Provide decl.
+
+	* DLD-FUNCTIONS/sort.cc (sortmode): New enum to define sort direction.
+	(template <class T> class vec_index): New class to contain values and
+	index for indexed sorts, replacing all previous struct versions. 
+	Instantiate for double, Complex, char and octave_value.
+	(template <class T> static octave_value_list mx_sort (ArrayN<T> &, int,
+	sortmode)): New templated version of mx_sort replacing all previous
+	versions, but specific to non indexed sorts. Instantiate for char
+	and double if not IEEE754.
+	(template <> static octave_value_list mx_sort (ArrayN<double> &, 
+	int, sortmode)): Specialized function of mx_sort of IEEE754.
+	(template <class T> static octave_value_list mx_sort_indexed 
+	(ArrayN<T> &, int, sortmode)): New templated version of mx_sort 
+	for indexed sorts. Instantiate for double, Complex, char and 
+	octave_value.
+	(ascending_compare, descending_compare): Comparison functions
+	for double, char, vec_index<double> *, vec_index<Complex> *,
+	vec_index<char> *, vec_index<octave_value>. Fix Complex comparison
+	operator to sort by arg of values if absolute values are equal.
+	(Fsort): Update docs for new mode argument and for sorting of 
+	strings and cell arrays of strings. Implement mode argument to
+	define ascending and descending sorts. Include sorting of cell
+	arrays of strings. Adapt for new templated versions of the mx_sort
+	function.
+
 2004-09-15  John W. Eaton  <jwe@octave.org>
 
 	* ov-cell.cc (octave_cell::subsref): Pass nargout to next_subsref.
 	* ov-builtin.cc (octave_builtin::subsref): Likewise.
 	* ov-fcn-handle.cc (octave_fcn_handle::subsref): Likewise.
 	* ov-list.cc (octave_list::subsref): Likewise.
 	* ov-mapper.cc (octave_mapper::subsref): Likewise.
 	* ov-struct.cc (octave_struct::subsref): Likewise.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -33,23 +33,23 @@ Software Foundation, 59 Temple Place - S
 #include "gripes.h"
 #include "oct-obj.h"
 #include "lo-ieee.h"
 #include "data-conv.h"
 #include "ov-cx-mat.h"
 #include "ov-cell.h"
 #include "oct-sort.cc"
 
-enum sortmode {UNDEFINED, ASCENDING, DESCENDING};
+enum sortmode { UNDEFINED, ASCENDING, DESCENDING };
 
 template <class T>
 class
 vec_index
 {
- public:
+public:
   T vec;
   int indx;
 };
 
 template <class T>
 static octave_value_list
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
@@ -69,21 +69,23 @@ mx_sort (ArrayN<T> &m, int dim, sortmode
   octave_sort<T> sort;
 
   if (mode == ASCENDING) 
     sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     sort.set_compare (descending_compare);
 
   if (stride == 1)
-    for (unsigned int j = 0; j < iter; j++)
-      {
-	sort.sort (v, ns);
-	v += ns;
-      }
+    {
+      for (unsigned int j = 0; j < iter; j++)
+	{
+	  sort.sort (v, ns);
+	  v += ns;
+	}
+    }
   else
     {
       OCTAVE_LOCAL_BUFFER (T, vi, ns);
       for (unsigned int j = 0; j < iter; j++) 
 	{
 	  unsigned int offset = j;
 	  unsigned int offset2 = 0;
 	  while (offset >= stride)
@@ -98,17 +100,18 @@ mx_sort (ArrayN<T> &m, int dim, sortmode
 
 	  sort.sort (vi, ns);
 	      
 	  for (unsigned int i = 0; i < ns; i++)
 	    v[i*stride + offset] = vi[i];
 	}
     }
 
-  retval (0) = octave_value (m);
+  retval(0) = octave_value (m);
+
   return retval;
 }
 
 template <class T>
 static octave_value_list
 mx_sort_indexed (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value_list retval;
@@ -185,18 +188,18 @@ mx_sort_indexed (ArrayN<T> &m, int dim, 
 	  for (unsigned int i = 0; i < ns; i++)
 	    {
 	      v[i*stride+offset] = vi[i]->vec;
 	      idx(i*stride+offset) = vi[i]->indx;
 	    }
 	}
     }
 
-  retval (1) = idx;
-  retval (0) = octave_value (m);
+  retval(1) = idx;
+  retval(0) = octave_value (m);
   return retval;
 }
 
 // If we have IEEE 754 data format, then we can use the trick of
 // casting doubles as unsigned eight byte integers, and with a little
 // bit of magic we can automatically sort the NaN's correctly.
 
 #if defined (HAVE_IEEE754_DATA_FORMAT) && defined (EIGHT_BYTE_INT)
@@ -296,17 +299,17 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	  // to the end.  If it will be sorted to the beginning,
 	  // fix things up.
 
 	  if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
 	      (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
 	    {
 	      unsigned int i = 0;
 	      double *vtmp = (double *)p;
-	      while (xisnan(vtmp[i++]) && i < ns);
+	      while (xisnan (vtmp[i++]) && i < ns);
 	      for (unsigned int l = 0; l < ns - i + 1; l++)
 		vtmp[l] = vtmp[l+i-1];
 	      for (unsigned int l = ns - i + 1; l < ns; l++)
 		vtmp[l] = octave_NaN;
 	    }
 
 	  p += ns;
 	}
@@ -345,17 +348,17 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	  // sorted to the beginning of the vector and the other
 	  // to the end. If it will be sorted to the beginning,
 	  // fix things up.
 
 	  if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
 	      (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
 	    {
 	      unsigned int i = 0;
-	      while (xisnan(v[i++*stride + offset]) && i < ns);
+	      while (xisnan (v[i++*stride + offset]) && i < ns);
 	      for (unsigned int l = 0; l < ns - i + 1; l++)
 		v[l*stride + offset] = v[(l+i-1)*stride + offset];
 	      for (unsigned int l = ns - i + 1; l < ns; l++)
 		v[l*stride + offset] = octave_NaN;
 	    }
 	}
     }
 
@@ -432,62 +435,62 @@ mx_sort_indexed (ArrayN<double> &m, int 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
       if ((lo_ieee_signbit (octave_NaN) && (mode == ASCENDING)) ||
 	  (! lo_ieee_signbit (octave_NaN) && (mode == DESCENDING)))
 	{
 	  unsigned int i = 0;
-	  while (xisnan(v[i++*stride+offset]) && i < ns);
+	  while (xisnan (v[i++*stride+offset]) && i < ns);
 	  OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
 	  for (unsigned int l = 0; l < i -1; l++)
 	    itmp[l] = idx(l*stride + offset);
 	  for (unsigned int l = 0; l < ns - i + 1; l++)
 	    {
 	      v[l*stride + offset] = v[(l+i-1)*stride + offset];
 	      idx(l*stride + offset) = idx((l+i-1)*stride + offset);
 	    }
 	  for (unsigned int k = 0, l = ns - i + 1; l < ns; l++, k++)
 	    {
 	      v[l*stride + offset] = octave_NaN;
 	      idx(l*stride + offset) = itmp[k];
 	    }
 	}
     }
 
-  retval (1) = idx;
-  retval (0) = m;
+  retval(1) = idx;
+  retval(0) = m;
   return retval;
 }
 
 #else
 
 bool
 ascending_compare (double a, double b)
 {
-  return (xisnan(b) || (a < b));
+  return (xisnan (b) || (a < b));
 }
 
 bool
 ascending_compare (vec_index<double> *a, vec_index<double> *b)
 {
-  return (xisnan(b->vec) || (a->vec < b->vec));
+  return (xisnan (b->vec) || (a->vec < b->vec));
 }
 
 bool
 descending_compare (double a, double b)
 {
-  return (xisnan(a) || (a > b));
+  return (xisnan (a) || (a > b));
 }
 
 bool
 descending_compare (vec_index<double> *a, vec_index<double> *b)
 {
-  return (xisnan(a->vec) || (a->vec > b->vec));
+  return (xisnan (a->vec) || (a->vec > b->vec));
 }
 
 template class octave_sort<double>;
 template class vec_index<double>;
 template class octave_sort<vec_index<double> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
@@ -503,25 +506,29 @@ static inline double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
 bool
 ascending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
-  return (xisnan(b->vec) || (xabs(a->vec) < xabs(b->vec)) ||
-	  ((xabs(a->vec) == xabs(b->vec)) && (arg(a->vec) < arg(b->vec))));
+  return (xisnan (b->vec)
+	  || (xabs (a->vec) < xabs (b->vec))
+	  || ((xabs (a->vec) == xabs (b->vec))
+	      && (arg (a->vec) < arg (b->vec))));
 }
 
 bool
 descending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
-  return (xisnan(a->vec) || (xabs(a->vec) > xabs(b->vec)) ||
-	  ((xabs(a->vec) == xabs(b->vec)) && (arg(a->vec) > arg(b->vec))));
+  return (xisnan (a->vec)
+	  || (xabs (a->vec) > xabs (b->vec))
+	  || ((xabs (a->vec) == xabs (b->vec))
+	      && (arg (a->vec) > arg (b->vec))));
 }
 
 template class vec_index<Complex>;
 template class octave_sort<vec_index<Complex> *>;
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 static octave_value_list
 mx_sort_indexed (ArrayN<Complex> &m, int dim, sortmode mode);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -592,16 +592,25 @@ octave_value::octave_value (const charND
   : rep (is_str
 	 ? new octave_char_matrix_str (chm)
 	 : new octave_char_matrix (chm))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+octave_value::octave_value (const ArrayN<char>& chm, bool is_str)
+  : rep (is_str
+	 ? new octave_char_matrix_str (chm)
+	 : new octave_char_matrix (chm))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const octave_int8& i)
   : rep (new octave_int8_scalar (i))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const octave_uint8& i)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -212,16 +212,17 @@ public:
   octave_value (const boolMatrix& bm);
   octave_value (const boolNDArray& bnda);
   octave_value (char c);
   octave_value (const char *s);
   octave_value (const std::string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (const charNDArray& chnda, bool is_string = false);
+  octave_value (const ArrayN<char>& chnda, bool is_string = false);
   octave_value (const octave_int8& i);
   octave_value (const octave_int16& i);
   octave_value (const octave_int32& i);
   octave_value (const octave_int64& i);
   octave_value (const octave_uint8& i);
   octave_value (const octave_uint16& i);
   octave_value (const octave_uint32& i);
   octave_value (const octave_uint64& i);
