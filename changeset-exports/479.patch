# HG changeset patch
# User jwe
# Date 772901493 0
#      Wed Jun 29 14:51:33 1994 +0000
# Node ID 8e9dcc4063321a3a0e08c132286982d4337ddf24
# Parent  90964309100be3d8185f4ea1749a64a51ad1c5a4
[project @ 1994-06-29 14:51:26 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -900,28 +900,29 @@ ComplexMatrix::column (char *s) const
       return ComplexColumnVector ();
     }
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
   int info;
-  double rcond; return inverse (info, rcond);
+  double rcond;
+  return inverse (info, rcond);
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 ComplexMatrix
-ComplexMatrix::inverse (int& info, double& rcond) const
+ComplexMatrix::inverse (int& info, volatile double& rcond) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return ComplexMatrix ();
@@ -1030,17 +1031,17 @@ ComplexMatrix::determinant (void) const
 ComplexDET
 ComplexMatrix::determinant (int& info) const
 {
   double rcond;
   return determinant (info, rcond);
 }
 
 ComplexDET
-ComplexMatrix::determinant (int& info, double& rcond) const
+ComplexMatrix::determinant (int& info, volatile double& rcond) const
 {
   ComplexDET retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0)
     {
@@ -1112,17 +1113,18 @@ ComplexMatrix::solve (const ComplexMatri
 
 ComplexMatrix
 ComplexMatrix::solve (const ComplexMatrix& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 ComplexMatrix
-ComplexMatrix::solve (const ComplexMatrix& b, int& info, double& rcond) const
+ComplexMatrix::solve (const ComplexMatrix& b, int& info,
+		      volatile double& rcond) const
 {
   ComplexMatrix retval;
 
   int nr = rows ();
   int nc = cols ();
   int b_nr = b.rows ();
   int b_nc = b.cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b_nr)
@@ -1175,17 +1177,17 @@ ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 ComplexColumnVector
 ComplexMatrix::solve (const ComplexColumnVector& b, int& info,
-		      double& rcond) const
+		      volatile double& rcond) const
 {
   ComplexColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
   int b_len = b.length ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b_len)
     {
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -561,17 +561,17 @@ Matrix::inverse (void) const
 Matrix
 Matrix::inverse (int& info) const
 {
   double rcond;
   return inverse (info, rcond);
 }
 
 Matrix
-Matrix::inverse (int& info, double& rcond) const
+Matrix::inverse (int& info, volatile double& rcond) const
 {
   int nr = rows ();
   int nc = cols ();
   int len = length ();
   if (nr != nc || nr == 0 || nc == 0)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return Matrix ();
@@ -680,17 +680,17 @@ Matrix::determinant (void) const
 DET
 Matrix::determinant (int& info) const
 {
   double rcond;
   return determinant (info, rcond);
 }
 
 DET
-Matrix::determinant (int& info, double& rcond) const
+Matrix::determinant (int& info, volatile double& rcond) const
 {
   DET retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (nr == 0 || nc == 0)
     {
@@ -741,17 +741,17 @@ Matrix::solve (const Matrix& b) const
 Matrix
 Matrix::solve (const Matrix& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 Matrix
-Matrix::solve (const Matrix& b, int& info, double& rcond) const
+Matrix::solve (const Matrix& b, int& info, volatile double& rcond) const
 {
   Matrix retval;
 
   int nr = rows ();
   int nc = cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b.rows ())
     {
       (*current_liboctave_error_handler)
@@ -822,17 +822,17 @@ Matrix::solve (const ColumnVector& b) co
 ColumnVector
 Matrix::solve (const ColumnVector& b, int& info) const
 {
   double rcond;
   return solve (b, info, rcond);
 }
 
 ColumnVector
-Matrix::solve (const ColumnVector& b, int& info, double& rcond) const
+Matrix::solve (const ColumnVector& b, int& info, volatile double& rcond) const
 {
   ColumnVector retval;
 
   int nr = rows ();
   int nc = cols ();
   if (nr == 0 || nc == 0 || nr != nc || nr != b.length ())
     {
       (*current_liboctave_error_handler)
