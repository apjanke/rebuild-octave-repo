# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273751240 -7200
#      Thu May 13 13:47:20 2010 +0200
# Node ID 832732c2eb800f9d3fb849adca0c78e2c1ab70f3
# Parent  b7c4954e1c00192c6bf7e5f0dff2aef781d76351
use ID for singularity warning in matrix division

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2696,21 +2696,16 @@ ComplexMatrix::lssolve (const ComplexMat
       lwork = static_cast<octave_idx_type> (std::real (work(0)));
       work.resize (lwork, 1);
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  prwork, piwork, info));
 
-      if (rank < minmn)
-        (*current_liboctave_warning_handler) 
-          ("zgelsd: rank deficient %dx%d matrix, rank = %d, tol = %e",
-           m, n, rank, rcon);
-
       if (s.elem (0) == 0.0)
         rcon = 0.0;
       else
         rcon = s.elem (minmn - 1) / s.elem (0);
 
       retval.resize (n, nrhs);
     }
 
@@ -2864,21 +2859,16 @@ ComplexMatrix::lssolve (const ComplexCol
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  prwork, piwork, info));
 
       if (rank < minmn)
         {
-          if (rank < minmn)
-            (*current_liboctave_warning_handler) 
-              ("zgelsd: rank deficient %dx%d matrix, rank = %d, tol = %e",
-               m, n, rank, rcon);
-
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
 
           retval.resize (n, nrhs);
         }
     }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (Matrix::lssolve): Remove warnings about rank.
+	* fMatrix.cc (FloatMatrix::lssolve): Ditto.
+	* CMatrix.cc (ComplexMatrix::lssolve): Ditto.
+	* fCMatrix.cc (FloatComplexMatrix::lssolve): Ditto.
+
 2010-05-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::unmask): Fix off-by-1 bug. Add tests.
 
 2010-05-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array::delete_elements (const idx_vector&)): Only call
 	resize1 when deleting the last element of a vector.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2345,19 +2345,16 @@ Matrix::lssolve (const Matrix& b, octave
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (lwork, 1);
 
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  piwork, info));
 
-      if (rank < minmn)
-        (*current_liboctave_warning_handler) 
-          ("dgelsd: rank deficient %dx%d matrix, rank = %d", m, n, rank);
       if (s.elem (0) == 0.0)
         rcon = 0.0;
       else
         rcon = s.elem (minmn - 1) / s.elem (0);
 
       retval.resize (n, nrhs);
     }
 
@@ -2504,19 +2501,16 @@ Matrix::lssolve (const ColumnVector& b, 
 
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  piwork, info));
 
       if (rank < minmn)
         {
-          if (rank < minmn)
-            (*current_liboctave_warning_handler) 
-              ("dgelsd: rank deficient %dx%d matrix, rank = %d", m, n, rank);
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
         }
 
       retval.resize (n, nrhs);
     }
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -2689,21 +2689,16 @@ FloatComplexMatrix::lssolve (const Float
       lwork = static_cast<octave_idx_type> (std::real (work(0)));
       work.resize (lwork, 1);
 
       F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  prwork, piwork, info));
 
-      if (rank < minmn)
-        (*current_liboctave_warning_handler) 
-          ("zgelsd: rank deficient %dx%d matrix, rank = %d, tol = %e",
-           m, n, rank, rcon);
-
       if (s.elem (0) == 0.0)
         rcon = 0.0;
       else
         rcon = s.elem (minmn - 1) / s.elem (0);
 
       retval.resize (n, nrhs);
     }
 
@@ -2857,21 +2852,16 @@ FloatComplexMatrix::lssolve (const Float
 
       F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  prwork, piwork, info));
 
       if (rank < minmn)
         {
-          if (rank < minmn)
-            (*current_liboctave_warning_handler) 
-              ("zgelsd: rank deficient %dx%d matrix, rank = %d, tol = %e",
-               m, n, rank, rcon);
-
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
 
           retval.resize (n, nrhs);
         }
     }
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2344,19 +2344,16 @@ FloatMatrix::lssolve (const FloatMatrix&
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (lwork, 1);
 
       F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  piwork, info));
 
-      if (rank < minmn)
-        (*current_liboctave_warning_handler) 
-          ("dgelsd: rank deficient %dx%d matrix, rank = %d", m, n, rank);
       if (s.elem (0) == 0.0)
         rcon = 0.0;
       else
         rcon = s.elem (minmn - 1) / s.elem (0);
 
       retval.resize (n, nrhs);
     }
 
@@ -2503,19 +2500,16 @@ FloatMatrix::lssolve (const FloatColumnV
 
       F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  piwork, info));
 
       if (rank < minmn)
         {
-          if (rank < minmn)
-            (*current_liboctave_warning_handler) 
-              ("dgelsd: rank deficient %dx%d matrix, rank = %d", m, n, rank);
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
         }
 
       retval.resize (n, nrhs);
     }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xdiv.cc (solve_singularity_warning): Use ID for the warning.
+
 2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sqrtm.cc (sqrtm_utri_inplace): Use an ID for the
 	warning.
 
 2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-save.cc (install_loaded_variable): Pre-extract symbol record
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -54,18 +54,18 @@ result_ok (octave_idx_type info)
   assert (info != -1);
 
   return (info != -2);
 }
 
 static void
 solve_singularity_warning (double rcond)
 {
-  warning ("matrix singular to machine precision, rcond = %g", rcond);
-  warning ("attempting to find minimum norm solution");
+  warning_with_id ("Octave:singular-matrix-div",
+                   "matrix singular to machine precision, rcond = %g", rcond);
 }
 
 template <class T1, class T2>
 bool
 mx_leftdiv_conform (const T1& a, const T2& b)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type b_nr = b.rows ();
