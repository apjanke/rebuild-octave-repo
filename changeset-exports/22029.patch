# HG changeset patch
# User Rik <rik@octave.org>
# Date 1467496885 25200
#      Sat Jul 02 15:01:25 2016 -0700
# Node ID 6e618b8277ada1c5e36a9ee2b47a9a3cd6bacbf3
# Parent  5c949eecb6dd674b63bed84b478163028f9ac912
Strip extra file separators with make_absolute_filename (bug #48351).

* oct-env.cc (do_make_absolute): Eliminate unnecessary call to do_getcwd.
Don't copy duplicate directory separators over to result string.
Strip a trailing directory separator from final result string.

diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -383,19 +383,16 @@ namespace octave
     env::do_make_absolute (const std::string& s,
                            const std::string& dot_path) const
     {
       if (dot_path.empty () || s.empty () || do_absolute_pathname (s))
         return s;
 
       std::string current_dir = dot_path;
 
-      if (current_dir.empty ())
-        current_dir = do_getcwd ();
-
       size_t pos = current_dir.length () - 1;
 
       if (! octave::sys::file_ops::is_dir_sep (current_dir[pos]))
         current_dir.append (octave::sys::file_ops::dir_sep_str ());
 
       // FIXME: this is probably not correct for all systems.
 
       size_t i = 0;
@@ -410,43 +407,53 @@ namespace octave
 
               if (octave::sys::file_ops::is_dir_sep (s[i+1]))
                 {
                   i += 2;
                   continue;
                 }
 
               if (s[i+1] == '.'
-                  && (i + 2 == slen || octave::sys::file_ops::is_dir_sep (s[i+2])))
+                  && (i + 2 == slen
+                      || octave::sys::file_ops::is_dir_sep (s[i+2])))
                 {
                   i += 2;
-
                   if (i != slen)
                     i++;
 
                   pathname_backup (current_dir, 1);
 
                   continue;
                 }
             }
 
-          size_t tmp = s.find_first_of (octave::sys::file_ops::dir_sep_chars (), i);
+          size_t tmp;
+          tmp = s.find_first_of (octave::sys::file_ops::dir_sep_chars (), i);
 
           if (tmp == std::string::npos)
             {
               current_dir.append (s, i, tmp-i);
               break;
             }
+          else if (tmp == i)
+            {
+              /* Two separators in a row, skip adding 2nd separator */
+              i++;
+            }
           else
             {
               current_dir.append (s, i, tmp-i+1);
               i = tmp + 1;
             }
         }
 
+      // Strip any trailing directory separator
+      if (octave::sys::file_ops::is_dir_sep (current_dir.back ()))
+        current_dir.pop_back ();
+      
       return current_dir;
     }
 
     // Return a string which is the current working directory.
 
     std::string
     env::do_getcwd () const
     {
