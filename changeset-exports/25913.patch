# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1538512814 -7200
#      Tue Oct 02 22:40:14 2018 +0200
# Node ID acce85499a464d4e27eac0db8592ae518e1474a9
# Parent  8b35d78ff488ee2416c9ac0f749cc2e4384efe55
check command objects in gui command queue if still valid before executing

* octave-cmd.cc (octave_command_queue::add_cmd): create a guarded pointer
  to the command object and add it to the command queue;
  (octave_command_queue::execute_command_callback): test pointer before
  calling the execute method of the related command object;

* octave-cmd.h (octave_cmd): derive from QObject allowing to use QPointer
  for it;
  (octave_command_queue): queue is a list of QPointers to octave_cmd objects;

diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -121,49 +121,57 @@ namespace octave
 
     command_editor::interrupt (true);
   }
 
   // add a command to the queue
 
   void octave_command_queue::add_cmd (octave_cmd *cmd)
   {
+    // Get a guarded pointer from the pointer to the command object
+    QPointer<octave_cmd> cmd_gp (cmd);
+
+    // And add it to the command queue
     m_queue_mutex.lock ();
-    m_queue.append (cmd);
+    m_queue.append (cmd_gp);
     m_queue_mutex.unlock ();
 
     if (m_processing.tryAcquire ())  // if callback not processing, post event
       octave_link::post_event (this, &octave_command_queue::execute_command_callback);
   }
 
   // callback for executing the command by the worker thread
 
   void octave_command_queue::execute_command_callback (void)
   {
     bool repost = false;          // flag for reposting event for this callback
 
     if (! m_queue.isEmpty ())  // list can not be empty here, just to make sure
       {
         m_queue_mutex.lock ();     // critical path
 
-        octave_cmd *cmd = m_queue.takeFirst ();
+        QPointer<octave_cmd> cmd_gp = m_queue.takeFirst ();
 
         if (m_queue.isEmpty ())
           m_processing.release (); // cmd queue empty, processing will stop
         else
           repost = true;          // not empty, repost at end
         m_queue_mutex.unlock ();
 
-        // FIXME: Could we store a reference to the interpreter in the
-        // octave_command_queue object?  If so, where is the proper
-        // place to initialize that?
+        if (! cmd_gp.isNull ())
+          {
+            // The pointer to the command object is still valid
 
-        interpreter& interp = __get_interpreter__ ("octave_command_queue::execute_command_callback");
+            // FIXME: Could we store a reference to the interpreter in the
+            // octave_command_queue object?  If so, where is the proper
+            // place to initialize that?
+            interpreter& interp = __get_interpreter__ ("octave_command_queue::execute_command_callback");
 
-        cmd->execute (interp);
+            cmd_gp->execute (interp);
+          }
 
-        delete cmd;
+        cmd_gp.clear ();    // remove the original cmd pointer
       }
 
     if (repost)  // queue not empty, so repost event for further processing
       octave_link::post_event (this, &octave_command_queue::execute_command_callback);
   }
 }
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -22,32 +22,35 @@ along with Octave; see the file COPYING.
 
 // Author: Torsten <ttl@justmail.de>
 
 #if ! defined (octave_octave_cmd_h)
 #define octave_octave_cmd_h 1
 
 #include <QSemaphore>
 #include <QMutex>
+#include <QPointer>
 #include <QString>
 #include <QFileInfo>
 
 #include "octave-qt-link.h"
 #include "ovl.h"
 
 
 namespace octave
 {
   class interpreter;
 
-  class octave_cmd
+  class octave_cmd : public QObject
   {
+    Q_OBJECT;
+
   public:
 
-    octave_cmd (void) = default;
+    octave_cmd (void) : QObject () {  };
 
     virtual ~octave_cmd (void) = default;
 
     virtual void execute (interpreter&) { }
   };
 
   class octave_cmd_exec : public octave_cmd
   {
@@ -136,17 +139,17 @@ namespace octave
 
   class octave_command_queue : QObject
   {
     Q_OBJECT;
 
   public:
 
     octave_command_queue (void)
-      : QObject (), m_queue (QList<octave_cmd *> ()), m_processing (1),
+      : QObject (), m_queue (QList<QPointer<octave_cmd>> ()), m_processing (1),
         m_queue_mutex ()
     { }
 
     ~octave_command_queue (void) = default;
 
     //! Adds a new octave command to the command queue.
     //!
     //! @param cmd The octave command to be queued.
@@ -154,15 +157,15 @@ namespace octave
     void add_cmd (octave_cmd *cmd);
 
     //! Callback routine for executing the command by the worker thread.
 
     void execute_command_callback (void);
 
   private:
 
-    QList<octave_cmd *> m_queue;
+    QList<QPointer<octave_cmd>> m_queue;
     QSemaphore m_processing;
     QMutex m_queue_mutex;
   };
 }
 
 #endif
