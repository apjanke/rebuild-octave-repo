# HG changeset patch
# User Rik <rik@octave.org>
# Date 1464886229 25200
#      Thu Jun 02 09:50:29 2016 -0700
# Node ID adf3473323a74485a5cb5f65c88943872ccba0ca
# Parent  bc266f3134d7912273dee9d318ee676393a8de3c
doc: Add more info about Octave coding conventions.

* contrib.txi, tips.txi: Add more info about Octave coding conventions.

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -292,17 +292,17 @@ An exception are matrix or cell construc
   @{sin(x), cos(x)@}
 @end group
 @end example
 
 @noindent
 Here, putting spaces after @code{sin}, @code{cos} would result in a
 parse error.
 
-For indexing expressions, do @emph{not} put a space after the
+For indexing expressions, do @strong{not} put a space after the
 identifier (this differentiates indexing and function calls nicely).
 The space after a comma is not necessary if index expressions are simple,
 i.e., you may write
 
 @example
   A(:,i,j)
 @end example
 
@@ -332,46 +332,49 @@ may be dropped.
 Use lowercase names if possible.  Uppercase is acceptable for variable
 names consisting of 1-2 letters.  Do not use mixed case names.  Function
 names must be lowercase.  Function names are global, so choose them
 wisely.
 
 Always use a specific end-of-block statement (like @code{endif},
 @code{endswitch}) rather than the generic @code{end}.
 
-Enclose the @code{if}, @code{while}, @code{until}, and @code{switch}
-conditions in parentheses, as in C:
+Enclose the condition of an @code{if}, @code{while}, @code{until}, or
+@code{switch} statement in parentheses, as in C:
 
 @example
 @group
 if (isvector (a))
   s = sum (a);
 endif
 @end group
 @end example
 
 @noindent
-Do not do this, however, with the iteration counter portion of a
-@code{for} statement.  Write:
+Do not do this, however, with the iteration counter portion of a @code{for}
+statement.  Write:
 
 @example
 @group
 for i = 1:n
   b(i) = sum (a(:,i));
 endfor
 @end group
 @end example
 
 The Octave operator @samp{!} should be used for logical negation, rather than
 @samp{~}.  The negation operator is written with a space between the operator
-and its target, e.g., @code{! A}.  Comments should begin with the @samp{#}
-character, rather than @samp{%}.
+and its target, e.g., @code{! A}.
 
-Any Built-In Self Tests or demos using the @code{%!test} or @code{%!demo}
-syntax should begin two lines after the @code{endfunction} keyword.
+Comments should begin with the @samp{#} character, rather than @samp{%}.
+@xref{Comment Tips}.
+
+Any demos or Built-In Self Tests (BIST) using the @code{%!demo} or
+@code{%!test} syntax should begin two lines after the @code{endfunction}
+keyword.  Demo blocks should be listed before test blocks.
 
 @node C++ Sources
 @section C++ Sources
 
 Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
 your editor so that it converts tabs to spaces.
 
 Format function headers like this:
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -58,47 +58,65 @@ If one prefix is insufficient, your pack
 alternative common prefixes, so long as they make sense.
 
 Separate the prefix from the rest of the symbol name with an underscore
 @samp{_}.  This will be consistent with Octave itself and with most
 Octave programs.
 
 @item
 When you encounter an error condition, call the function @code{error}
-(or @code{usage}).  The @code{error} and @code{usage} functions do not
-return.
-@xref{Errors}.
+(or @code{print_usage}).  The @code{error} and @code{print_usage} functions
+do not return.  @xref{Errors}.  It is customary to prefix the error message
+with the name of the function that generated it.  For example,
+
+@example
+error ("my_cool_function: input A must be a matrix");
+@end example
 
 @item
 Please put a copyright notice on the file if you give copies to anyone.
 Use the same lines that appear at the top of the function files
 distributed with Octave.  If you have not signed papers to assign the
 copyright to anyone else, then place your name in the copyright notice.
 @end itemize
 
 
 @node Comment Tips
 @section Tips on Writing Comments
 
 Here are the conventions to follow when writing comments.
 
 @table @samp
 @item #
-Comments that start with a single sharp-sign, @samp{#}, should all be
-aligned to the same column on the right of the source code.  Such
-comments usually explain how the code on the same line does its job.  In
+Comments that start with a single sharp-sign, @samp{#}, are used to explain
+the code on the same line as the comment itself.  These comments should
+all be aligned to the same column to the right of the source code.  In
 the Emacs mode for Octave, the @kbd{M-;} (@code{indent-for-comment})
 command automatically inserts such a @samp{#} in the right place, or
-aligns such a comment if it is already present.
+aligns such a comment if it is already present.  Example:
+
+@example
+@var{C} = 2 * pi * r;    # formula for circumference of a circle
+@end example
 
 @item ##
-Comments that start with a double sharp-sign, @samp{##}, should be aligned to
+Comments that start with a double sharp-sign, @samp{##}, are stand-alone
+comments that occupy an entire line.  These comments should be aligned to
 the same level of indentation as the code.  Such comments usually
 describe the purpose of the following lines or the state of the program
-at that point.
+at that point.  Example:
+
+@example
+@group
+## Calculate area and volume of a sphere
+@var{A} = 4 * pi * r^2;
+@var{V} = 4/3 * pi * r^3;
+@end group
+@end example
+
 @end table
 
 @noindent
 The indentation commands of the Octave mode in Emacs, such as @kbd{M-;}
 (@code{indent-for-comment}) and @kbd{TAB} (@code{octave-indent-line})
 automatically indent comments according to these conventions,
 depending on the number of semicolons.  @xref{Comments,,
 Manipulating Comments, emacs, The GNU Emacs Manual}.
