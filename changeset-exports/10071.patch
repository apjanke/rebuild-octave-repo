# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1262894839 18000
#      Thu Jan 07 15:07:19 2010 -0500
# Node ID e42b1bbd1052b45b1e8d3b4008657cbcf0495b01
# Parent  897e62651c0adc8bc682c30a406b5ef69806e4e1
variables.cc (get_top_level_value, set_top_level_value): new functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-01-07  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (get_global_value): Fix function name in error message.
+	(get_top_level_value, set_top_level_value): New functions.
+	* variables.h (get_top_level_value, set_top_level_value):
+	Provide decls.
+
+	* symtab.h (symbol_table::top_level_varref,
+	symbol_table::top_level_varval): New static functions.
+
 2010-01-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* utils.cc (octave_sleep (double)): Add OCTAVE_QUIT.
 
 2010-01-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* unwind_protect.h, unwind_protect.cc (unwind_protect): Rewrite.
 	Remove obsolete macros. Use a simple linked list.
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1079,16 +1079,28 @@ public:
   static octave_value
   global_varval (const std::string& name)
   {
     global_table_const_iterator p = global_table.find (name);
 
     return (p != global_table.end ()) ? p->second : octave_value ();
   }
 
+  static octave_value&
+  top_level_varref (const std::string& name)
+  {
+    return varref (name, top_scope (), 0);
+  }
+
+  static octave_value
+  top_level_varval (const std::string& name)
+  {
+    return varval (name, top_scope (), 0);
+  }
+
   static octave_value& persistent_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_persistent_varref (name) : foobar;
   }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -602,27 +602,44 @@ lookup_function_handle (const std::strin
 }
 
 octave_value
 get_global_value (const std::string& nm, bool silent)
 {
   octave_value val = symbol_table::global_varval (nm);
 
   if (val.is_undefined () && ! silent)
-    error ("get_global_by_name: undefined symbol `%s'", nm.c_str ());
+    error ("get_global_value: undefined symbol `%s'", nm.c_str ());
 
   return val;
 }
 
 void
 set_global_value (const std::string& nm, const octave_value& val)
 {
   symbol_table::global_varref (nm) = val;
 }
 
+octave_value
+get_top_level_value (const std::string& nm, bool silent)
+{
+  octave_value val = symbol_table::top_level_varval (nm);
+
+  if (val.is_undefined () && ! silent)
+    error ("get_top_level_value: undefined symbol `%s'", nm.c_str ());
+
+  return val;
+}
+
+void
+set_top_level_value (const std::string& nm, const octave_value& val)
+{
+  symbol_table::top_level_varref (nm) = val;
+}
+
 // Variable values.
 
 octave_value
 set_internal_variable (bool& var, const octave_value_list& args,
 		       int nargout, const char *nm)
 {
   octave_value retval;
 
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -73,17 +73,24 @@ symbol_exist (const std::string& name, c
 extern OCTINTERP_API std::string
 unique_symbol_name (const std::string& basename);
 
 extern OCTINTERP_API octave_value lookup_function_handle (const std::string& nm);
 
 extern OCTINTERP_API octave_value
 get_global_value (const std::string& nm, bool silent = false);
 
-extern OCTINTERP_API void set_global_value (const std::string& nm, const octave_value& val);
+extern OCTINTERP_API void
+set_global_value (const std::string& nm, const octave_value& val);
+
+extern OCTINTERP_API octave_value
+get_top_level_value (const std::string& nm, bool silent = false);
+
+extern OCTINTERP_API void
+set_top_level_value (const std::string& nm, const octave_value& val);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (bool& var, const octave_value_list& args,
 		       int nargout, const char *nm);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (char& var, const octave_value_list& args,
 		       int nargout, const char *nm);
