# HG changeset patch
# User jwe
# Date 1086355774 0
#      Fri Jun 04 13:29:34 2004 +0000
# Node ID 8fd9495f5054ce0d98505789755a8d81c076447a
# Parent  89eee52fd4c798cebda9a5d0676bb467b16c9cce
[project @ 2004-06-04 13:29:33 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2939,36 +2939,26 @@ assignN (Array<LT>& lhs, const Array<RT>
 		= (i < rhs_dims.length () && idx(i).is_colon ())
 		? rhs_dims(i) : idx(i).max () + 1;
 	    }
 	  else
 	    {
 	      // We didn't start out with all zero dimensions, so if
 	      // index is a colon, it refers to the current LHS
 	      // dimension.  Otherwise, it is OK to enlarge to a
-	      // dimension given by the largest index (but that index
-	      // needs to be a number, not a colon).
+	      // dimension given by the largest index, but if that 
+	      // index is a colon the new dimension is singleton.
 
 	      if (i < lhs_dims_len
 		  && (idx(i).is_colon () || idx(i).max () < lhs_dims(i)))
 		new_dims(i) = lhs_dims(i);
 	      else if (! idx(i).is_colon ())
 		new_dims(i) = idx(i).max () + 1;
 	      else
-		{
-		  // XXX FIXME XXX -- can we provide a more
-		  // informative message here?
-
-		  (*current_liboctave_error_handler)
-		    ("invalid array index for assignment");
-
-		  retval = 0;
-
-		  break;
-		}
+		new_dims(i) = 1;
 	    }
 	}
 
       if (retval != 0)
 	{
 	  if (! orig_empty
 	      && n_idx < orig_lhs_dims_len
 	      && new_dims(n_idx-1) != lhs_dims(n_idx-1))
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-06-03  David Bateman  <dbateman@free.fr>
+
+	* Array.cc (assignN): Allow magic colon for dimensions lvalue
+	greater than the existing number of dimensions in lvalue.
+
 2004-04-30  David Bateman  <dbateman@free.fr>
 
         * dim_vector.h (dim_vector::dim_vector_rep::dim_vector_rep):
 	New arg, fill_value.
 	(dim_vector::resize): Allow optional fill_value argument.
 
         * Array.cc (Array<T>::index (Array<idx_vector>&, int, const T&)):
 	Don't chop trailing dimensions of Array<idx_vector> if there is
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,23 @@
+2004-06-04  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* plot/errorbar.m: Remove debugging output.
+
+2004-06-03  Stefan van der Walt  <stefan@sun.ac.za>
+
+	* plot/__pltopt__.m: Properly escape @ symbols in doc string.
+
 2004-06-03  Paul Kienzle  <pkienzle@users.sf.net>
 
+	* deprecated/com2str.m: Include 'i' suffix for pure imaginary numbers.
+
+	* polynomial/polyout.m: Use parenthesis if necessary around
+	complex polynomial coefficient.
+
 	* plot/__errcomm__.m, plot/__errplot__.m: Simplify code and fix
 	the bug which causes __errplot__ to ignore the last argument.
 
 2004-06-03  David Bateman  <dbateman@free.fr>
 
 	* general/shiftdim.m: New function based on JWE code snippet.
 
 	* general/circdim.m: New function.
diff --git a/scripts/deprecated/com2str.m b/scripts/deprecated/com2str.m
--- a/scripts/deprecated/com2str.m
+++ b/scripts/deprecated/com2str.m
@@ -60,17 +60,17 @@ function retval = com2str (zz, flg)
 	retval = num2str (rz);
       case(1)
 	retval = [sgns(1+(rz<0)), " ", num2str(abs(rz))];
     endswitch
   elseif (rz == 0)
     ## strictly an imaginary number
     switch (flg)
       case(0)
-	retval = num2str (iz);
+	retval = [num2str(iz), "i"];
       case(1)
 	retval = [sgns(1+(iz<0)), " ", num2str(abs(iz)), "i"];
     endswitch
   else
     ## complex number
     ## strictly an imaginary number
     switch (flg)
       case(0)
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -29,20 +29,20 @@
 ##
 ## @table @code
 ## @item "-"
 ## For lines plot style (default).
 ##
 ## @item "."
 ## For dots plot style.
 ##
-## @item "@"
+## @item "@@"
 ## For points plot style.
 ##
-## @item "-@"
+## @item "-@@"
 ## For linespoints plot style.
 ##
 ## @item "^"
 ## For impulses plot style.
 ##
 ## @item "L"
 ## For steps plot style.
 ##
@@ -63,18 +63,18 @@
 ##
 ## @item "#~>"
 ## For boxxyerrorbars plot style.
 ##
 ## @item "n"
 ## With @code{n} in 1-6 (wraps at 8), plot color
 ##
 ## @item "nm"
-## With @code{m} in 1-6 (wraps at 6), point style (only valid for @code{"@"} or
-## @code{"-@"})
+## With @code{m} in 1-6 (wraps at 6), point style (only valid for @code{"@@"} or
+## @code{"-@@"})
 ##
 ## @item @var{c}
 ## Where @var{c} is one of @code{"r"}, @code{"g"}, @code{"b"}, @code{"m"},
 ## @code{"c"}, or @code{"w"} colors.
 ##
 ## @item ";title;"
 ## Here @code{"title"} is the label for the key.
 ##
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -115,13 +115,11 @@ function errorbar (varargin)
   if (nargin < 2)
     usage ("errorbar (...)");
   endif
 
   gset nologscale x;
   gset nologscale y;
   gset nopolar;
 
-  length (varargin)
-
   __errcomm__ ("errorbar", varargin{:});
 
 endfunction
diff --git a/scripts/polynomial/polyout.m b/scripts/polynomial/polyout.m
--- a/scripts/polynomial/polyout.m
+++ b/scripts/polynomial/polyout.m
@@ -48,42 +48,44 @@ function y = polyout (c, x)
   elseif (! isstr(x))
     error("polyout: second argument must be a string");
   endif
 
   n = length(c);
   if(n > 0)
     n1 = n+1;
 
-    if (imag (c(1)))
-      tmp = com2str(c(1))
-    else
-      tmp = num2str(c(1));
-    endif
 
+    tmp = coeff (c(1));
     for ii = 2:n
       if (real (c(ii)) < 0)
 	ns = " - ";
 	c(ii) = -c(ii);
       else
         ns = " + ";
       endif
 
-      if (imag (c(ii)))
-	nstr = sprintf ("(%s)", com2str (c(ii)));
-      else
-        nstr = num2str (c(ii));
-      endif
-
-      tmp = sprintf ("%s*%s^%d%s%s", tmp, x, n1-ii, ns, nstr);
+      tmp = sprintf ("%s*%s^%d%s%s", tmp, x, n1-ii, ns, coeff (c(ii)));
 
     endfor
   else
     tmp = " ";
   endif
 
   if(nargout == 0)
     disp(tmp)
   else
     y = tmp;
   endif
 
 endfunction
+
+function str = coeff(c)
+  if (imag (c))
+    if (real (c))
+      str = sprintf ("(%s)", com2str(c));
+    else
+      str = com2str(c);
+    endif
+  else
+    str = num2str(c);
+  endif
+
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2004-06-03  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-handle.h (octave_function_handle::is_matrix_type,
+	octave_function_handle::is_numeric_type,
+	octave_function_handle::is_constant,
+	octave_function_handle::is_true): New functions.
+	(octave_function_handle::is_defined): Delete (inherited version is
+	OK).
+
 2004-06-03  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/filter.cc: Fix for length(a)=1 && length(b)=2 case.
 
 2004-05-07  John W. Eaton  <jwe@octave.org>
 
 	* ov.cc (octave_value::print_with_name): Only print name tag if
 	Vprint_answer_id_name is true.
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -143,17 +143,23 @@ public:
   octave_fcn_handle (const octave_fcn_handle& fh)
     : octave_base_matrix<fcn_handle_array> (fh) { }
 
   ~octave_fcn_handle (void) { }
 
   octave_value *clone (void) const { return new octave_fcn_handle (*this); }
   octave_value *empty_clone (void) const { return new octave_fcn_handle (); }
 
-  bool is_defined (void) const { return true; }
+  bool is_matrix_type (void) const { return false; }
+
+  bool is_numeric_type (void) const { return false; }
+
+  bool is_constant (void) const { return false; }
+
+  bool is_true (void) { return false; }
 
   bool is_function_handle (void) const { return true; }
 
   octave_function *function_value (bool = false);
 
   std::string name (void) const;
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
