# HG changeset patch
# User jwe
# Date 1041637630 0
#      Fri Jan 03 23:47:10 2003 +0000
# Node ID 5ab4ac522fec5752d797007b2b0809044c1a3ee9
# Parent  8724cf60d51db59207142ed21b9ccfb3804ecdf4
[project @ 2003-01-03 23:45:06 by jwe]

diff --git a/liboctave/DAERT.h b/liboctave/DAERT.h
--- a/liboctave/DAERT.h
+++ b/liboctave/DAERT.h
@@ -30,22 +30,22 @@ Software Foundation, 59 Temple Place - S
 class
 DAERT : public base_diff_alg_eqn, public DAERTFunc
 {
 public:
 
   DAERT (void)
     : base_diff_alg_eqn (), DAERTFunc () { }
 
-  DAERT (const ColumnVector& x, double t, DAERTFunc& f)
-    : base_diff_alg_eqn (x, t), DAERTFunc (f) { }
+  DAERT (const ColumnVector& xx, double tt, DAERTFunc& f)
+    : base_diff_alg_eqn (xx, tt), DAERTFunc (f) { }
 
-  DAERT (const ColumnVector& x, const ColumnVector& xdot, double t,
+  DAERT (const ColumnVector& xx, const ColumnVector& xxdot, double tt,
 	DAERTFunc& f)
-    : base_diff_alg_eqn (x, xdot, t), DAERTFunc (f) { }
+    : base_diff_alg_eqn (xx, xxdot, tt), DAERTFunc (f) { }
 
   DAERT (const DAERT& a)
     : base_diff_alg_eqn (a), DAERTFunc (a) { }
 
   DAERT& operator = (const DAERT& a)
     {
       if (this != &a)
 	{
@@ -53,19 +53,20 @@ public:
 	  DAERTFunc::operator = (a);
 
 	}
       return *this;
     }
 
   ~DAERT (void) { }
 
-  void initialize (const ColumnVector& x, const ColumnVector& xdot, double t)
+  void initialize (const ColumnVector& xx, const ColumnVector& xxdot,
+		   double tt)
     {
-      base_diff_alg_eqn::initialize (x, xdot, t);
+      base_diff_alg_eqn::initialize (xx, xxdot, tt);
     }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/ODES.cc b/liboctave/ODES.cc
--- a/liboctave/ODES.cc
+++ b/liboctave/ODES.cc
@@ -27,27 +27,27 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "ODES.h"
 #include "lo-error.h"
 
 void
-ODES::initialize (const ColumnVector& xx, double t)
+ODES::initialize (const ColumnVector& xx, double tt)
 {
-  base_diff_eqn::initialize (xx, t);
+  base_diff_eqn::initialize (xx, tt);
   xdot = ColumnVector (xx.length (), 0.0);
 }
 
 void
-ODES::initialize (const ColumnVector& xx, double t,
+ODES::initialize (const ColumnVector& xx, double tt,
 		  const ColumnVector& xtheta)
 {
-  base_diff_eqn::initialize (xx, t);
+  base_diff_eqn::initialize (xx, tt);
   xdot = ColumnVector (xx.length (), 0.0);
   theta = xtheta;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -207,40 +207,40 @@ ODESSA::ODESSA (const ColumnVector& stat
 
   npar = 0;
   neq(0) = n;
   neq(1) = npar;
 
   y.resize (n, 1, 0.0);
 }
 
-ODESSA::ODESSA (const ColumnVector& state, const ColumnVector& theta,
+ODESSA::ODESSA (const ColumnVector& state, const ColumnVector& xtheta,
 		const Matrix& sensitivity_guess, double time, ODESFunc& f)
-  : ODES (state, theta, time, f)
+  : ODES (state, xtheta, time, f)
 {
   initialized = false;
 
   neq.resize(2);
   n = state.length();
-  npar = theta.length();
+  npar = xtheta.length();
 
   neq(0) = n;
   neq(1) = npar;
 
   sx0 = sensitivity_guess;
   par.resize (npar);
 
   for (int i = 0; i < npar; i++)
     {
-      par(i) = theta(i);
+      par(i) = xtheta(i);
     }
 
   sanity_checked = false;
 
-  npar = theta.length ();
+  npar = xtheta.length ();
 
   iopt.resize(4);
   itask = 1;
   iopt(0) = 0;
   isopt = 1;
   iopt(1) = isopt;
 
   y.resize (n, npar+1, 0.0);
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -73,20 +73,20 @@ public:
     }
 
   int size (void) const { return x.capacity (); }
 
   ColumnVector state (void) const { return x; }
 
   double time (void) const { return t; }
 
-  void set_stop_time (double t)
+  void set_stop_time (double tt)
     {
       stop_time_set = true;
-      stop_time = t;
+      stop_time = tt;
       force_restart ();
     }
 
   void clear_stop_time (void)
     {
       stop_time_set = false;
       force_restart ();
     }
