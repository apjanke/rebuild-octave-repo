# HG changeset patch
# User jwe
# Date 787427524 0
#      Wed Dec 14 17:52:04 1994 +0000
# Node ID 6aeb8fdc27d48be950c2acbc28ea830134d93e2a
# Parent  3611f5b128263973bf527e9c1ead4a9b3073dc2a
[project @ 1994-12-14 17:51:23 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1918,19 +1918,17 @@ read_binary_file_header (istream& is, in
   return 0;
 }
 
 static load_save_format
 get_file_format (const char *fname, const char *orig_fname)
 {
   load_save_format retval = LS_UNKNOWN;
 
-  ifstream file;
-
-  file.open (fname);
+  ifstream file (fname);
 
   if (! file)
     {
       error ("load: couldn't open input file `%s'", orig_fname);
       return retval;
     }
 
   int swap;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -563,17 +563,19 @@ main (int argc, char **argv)
 
   int remaining_args = argc - optind;
   if (remaining_args > 1)
     {
       usage ();
     }
   else if (remaining_args == 1)
     {
-      FILE *infile = get_input_from_file (argv[optind]);
+      reading_script_file = 1;
+      curr_fcn_file_name = argv[optind];
+      FILE *infile = get_input_from_file (curr_fcn_file_name);
       if (infile)
 	{
 	  rl_blink_matching_paren = 0;
 	  switch_to_buffer (create_buffer (infile));
 	}
       else
 	clean_up_and_exit (1);
     }
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -38,17 +38,17 @@ Software Foundation, 675 Mass Ave, Cambr
 user_preferences user_pref;
 
 // Initialize global user_pref structure.
 
 void
 init_user_prefs (void)
 {
   user_pref.automatic_replot = 0;
-  user_pref.commas_in_literal_matrix = 0;
+  user_pref.whitespace_in_literal_matrix = 0;
   user_pref.do_fortran_indexing = 0;
   user_pref.empty_list_elements_ok = 0;
   user_pref.ignore_function_time_stamp = 0;
   user_pref.implicit_str_to_num_ok = 0;
   user_pref.ok_to_lose_imaginary_part = 0;
   user_pref.output_max_field_width = 0;
   user_pref.output_precision = 0;
   user_pref.page_screen_output = 0;
@@ -111,28 +111,34 @@ int
 automatic_replot (void)
 {
   user_pref.automatic_replot = check_str_pref ("automatic_replot");
 
   return 0;
 }
 
 
-// Should commas be required to separate elements in a literal matrix
-// list?
+// Should whitespace in a literal matrix list be automatically
+// converted to commas and semicolons?
 //
 //   user specifies   value of pref
 //   --------------   -------------
-//   "required"             2
+//   "ignored"              2
 //   "traditional"          1
 //   anything else          0
 //
 // Octave will never insert a comma in a literal matrix list if the
-// user specifies "required".  For example, the statement [1 2] will
-// result in an error instead of being treated the same as [1, 2].
+// user specifies "ignored".  For example, the statement [1 2] will
+// result in an error instead of being treated the same as [1, 2], and
+// the statement
+//
+//   [ 1, 2,
+//     3, 4 ]
+//
+// will result in the vector [1 2 3 4] instead of a matrix.
 //
 // Traditional behavior makes Octave convert spaces to a comma between
 // identifiers and `('.  For example, the statement
 //
 //   [eye (2)]
 //
 // will be parsed as
 //
@@ -146,28 +152,28 @@ automatic_replot (void)
 // as traditional, except that Octave does not convert spaces to a
 // comma between identifiers and `('.  For example, the statement
 //
 //   [eye (2)]
 //
 // will result in a call to `eye' with the argument `2'. 
 
 int
-commas_in_literal_matrix (void)
+whitespace_in_literal_matrix (void)
 {
   int pref = 0;
-  char *val = builtin_string_variable ("commas_in_literal_matrix");
+  char *val = builtin_string_variable ("whitespace_in_literal_matrix");
   if (val)
     {
-      if (strncmp (val, "required", 8) == 0)
+      if (strncmp (val, "ignore", 6) == 0)
 	pref = 2;
       else if (strncmp (val, "traditional", 11) == 0)
 	pref = 1;
     }
-  user_pref.commas_in_literal_matrix = pref;
+  user_pref.whitespace_in_literal_matrix = pref;
   return 0;
 }
 
 
 // Should we allow assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -22,17 +22,17 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 #if !defined (octave_user_prefs_h)
 #define octave_user_prefs_h 1
 
 struct user_preferences
 {
   int automatic_replot;
-  int commas_in_literal_matrix;
+  int whitespace_in_literal_matrix;
   int do_fortran_indexing;
   int empty_list_elements_ok;
   int ignore_function_time_stamp;
   int implicit_str_to_num_ok;
   int ok_to_lose_imaginary_part;
   int output_max_field_width;
   int output_precision;
   int page_screen_output;
@@ -63,17 +63,17 @@ struct user_preferences
   char *pwd;
 };
 
 extern user_preferences user_pref;
 
 extern void init_user_prefs (void);
 
 extern int automatic_replot (void);
-extern int commas_in_literal_matrix (void);
+extern int whitespace_in_literal_matrix (void);
 extern int do_fortran_indexing (void);
 extern int empty_list_elements_ok (void);
 extern int ignore_function_time_stamp (void);
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
 extern int prefer_zero_one_indexing (void);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -500,31 +500,48 @@ symbol_out_of_date (symbol_record *sr)
 
 static void
 gobble_leading_white_space (FILE *ffile)
 {
   int in_comment = 0;
   int c;
   while ((c = getc (ffile)) != EOF)
     {
+      current_input_column++;
       if (in_comment)
 	{
 	  if (c == '\n')
-	    in_comment = 0;
+	    {
+	      input_line_number++;
+	      current_input_column = 0;
+	      in_comment = 0;
+	    }
 	}
       else
 	{
-	  if (c == ' ' || c == '\t' || c == '\n')
-	    continue;
-	  else if (c == '%' || c == '#')
-	    in_comment = 1;
-	  else
+	  switch (c)
 	    {
+	    case ' ':
+	    case '\t':
+	      break;
+
+	    case '\n':
+	      input_line_number++;
+	      current_input_column = 0;
+	      continue;
+
+	    case '%':
+	    case '#':
+	      in_comment = 1;
+	      break;
+
+	    default:
+	      current_input_column--;
 	      ungetc (c, ffile);
-	      break;
+	      return;
 	    }
 	}
     }
 }
 
 static int
 is_function_file (FILE *ffile)
 {
@@ -1392,19 +1409,19 @@ install_builtin_variables (void)
 
   DEFVAR ("ans", SBV_ans, , 0, 0, 1, 0,
     "");
 
   DEFVAR ("automatic_replot", SBV_automatic_replot, "false",
 	  0, 0, 1, automatic_replot,
     "if true, auto-insert a replot command when a plot changes");
 
-  DEFVAR ("commas_in_literal_matrix", SBV_commas_in_literal_matrix, "",
-	  0, 0, 1, commas_in_literal_matrix,
-    "control auto-insertion of commas in literal matrices");
+  DEFVAR ("whitespace_in_literal_matrix", SBV_whitespace_in_literal_matrix, "",
+	  0, 0, 1, whitespace_in_literal_matrix,
+    "control auto-insertion of commas and semicolons in literal matrices");
 
   DEFVAR ("default_save_format", SBV_default_save_format, "ascii",
 	  0, 0, 1, sv_default_save_format,
     "default format for files created with save, may be either\n\
 \"binary\" or \"text\""); 
 
   DEFVAR ("do_fortran_indexing", SBV_do_fortran_indexing, "false", 0, 0,
 	  1, do_fortran_indexing,
