# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1390077081 18000
#      Sat Jan 18 15:31:21 2014 -0500
# Node ID b0e8cc67639664531acc338b78a07722802e401a
# Parent  57d5bd8700df395f8273a8af613c7ee3a881e367
Fix out-of-date status check for package functions.

* ov-fcn.h (octave_function::xpackage_name): New member to keep track
of the package to which a function belongs.
(octave_function::octave_function): Initialize it;
(octave_function::stash_package_name, octave_function::package_name):
New accessor methods.
(octave_function::canonical_name): New method to return to
fully-qualified name of a function.

* oct-parse.in.yy (load_fcn_from_file): Store package name in loaded
function.

* symtab.cc (split_name_with_package): New utility function.
(out_of_date_check): Use the package owning the function when searching
for newer versions in load_path.
(load_out_of_date_fcn): New argument to pass the package name to
load_fcn_from_file.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -145,37 +145,57 @@ symbol_table::symbol_record::find (const
                 rep->finfo = get_fcn_info (name ());
             }
         }
     }
 
   return retval;
 }
 
+static void
+split_name_with_package (const std::string& name, std::string& fname,
+                         std::string& pname)
+{
+  size_t pos = name.rfind ('.');
+
+  fname.clear ();
+  pname.clear ();
+
+  if (pos != std::string::npos)
+    {
+      fname = name.substr (pos + 1);
+      pname = name.substr (0, pos);
+    }
+  else
+    fname = name;
+}
+
 // Check the load path to see if file that defined this is still
 // visible.  If the file is no longer visible, then erase the
 // definition and move on.  If the file is visible, then we also
 // need to check to see whether the file has changed since the the
 // function was loaded/parsed.  However, this check should only
 // happen once per prompt (for files found from relative path
 // elements, we also check if the working directory has changed
 // since the last time the function was loaded/parsed).
 //
 // FIXME: perhaps this should be done for all loaded functions when
 // the prompt is printed or the directory has changed, and then we
 // would not check for it when finding symbol definitions.
 
 static inline bool
 load_out_of_date_fcn (const std::string& ff, const std::string& dir_name,
                       octave_value& function,
-                      const std::string& dispatch_type = std::string ())
+                      const std::string& dispatch_type = std::string (),
+                      const std::string& package_name = std::string ())
 {
   bool retval = false;
 
-  octave_function *fcn = load_fcn_from_file (ff, dir_name, dispatch_type);
+  octave_function *fcn = load_fcn_from_file (ff, dir_name, dispatch_type,
+                                             package_name);
 
   if (fcn)
     {
       retval = true;
 
       function = octave_value (fcn);
     }
   else
@@ -207,16 +227,18 @@ out_of_date_check (octave_value& functio
 
               bool relative = check_relative && fcn->is_relative ();
 
               if (tc <= Vlast_prompt_time
                   || (relative && tc < Vlast_chdir_time))
                 {
                   bool clear_breakpoints = false;
                   std::string nm = fcn->name ();
+                  std::string pack = fcn->package_name ();
+                  std::string canonical_nm = fcn->canonical_name ();
 
                   bool is_same_file = false;
 
                   std::string file;
                   std::string dir_name;
 
                   if (check_relative)
                     {
@@ -231,43 +253,53 @@ out_of_date_check (octave_value& functio
                         {
                           // We don't want to make this an absolute name,
                           // because load_fcn_file looks at the name to
                           // decide whether it came from a relative lookup.
 
                           if (! dispatch_type.empty ())
                             {
                               file = load_path::find_method (dispatch_type, nm,
-                                                             dir_name);
+                                                             dir_name, pack);
 
                               if (file.empty ())
                                 {
+                                  std::string s_name;
+                                  std::string s_pack;
+
                                   const std::list<std::string>& plist
                                     = symbol_table::parent_classes (dispatch_type);
                                   std::list<std::string>::const_iterator it
                                     = plist.begin ();
 
                                   while (it != plist.end ())
                                     {
+                                      split_name_with_package (*it, s_name,
+                                                               s_pack);
+
                                       file = load_path::find_method (*it, nm,
-                                                                     dir_name);
+                                                                     dir_name,
+                                                                     s_pack);
                                       if (! file.empty ())
-                                        break;
+                                        {
+                                          pack = s_pack;
+                                          break;
+                                        }
 
                                       it++;
                                     }
                                 }
                             }
 
                           // Maybe it's an autoload?
                           if (file.empty ())
                             file = lookup_autoload (nm);
 
                           if (file.empty ())
-                            file = load_path::find_fcn (nm, dir_name);
+                            file = load_path::find_fcn (nm, dir_name, pack);
                         }
 
                       if (! file.empty ())
                         is_same_file = same_file (file, ff);
                     }
                   else
                     {
                       is_same_file = true;
@@ -299,17 +331,18 @@ out_of_date_check (octave_value& functio
                           file_stat fs (ff);
 
                           if (fs)
                             {
                               if (fs.is_newer (tp))
                                 {
                                   retval = load_out_of_date_fcn (ff, dir_name,
                                                                  function,
-                                                                 dispatch_type);
+                                                                 dispatch_type,
+                                                                 pack);
 
                                   clear_breakpoints = true;
                                 }
                             }
                           else
                             {
                               function = octave_value ();
 
@@ -318,25 +351,26 @@ out_of_date_check (octave_value& functio
                         }
                     }
                   else
                     {
                       // Not the same file, so load the new file in
                       // place of the old.
 
                       retval = load_out_of_date_fcn (file, dir_name, function,
-                                                     dispatch_type);
+                                                     dispatch_type, pack);
 
                       clear_breakpoints = true;
                     }
 
                   // If the function has been replaced then clear any
                   // breakpoints associated with it
                   if (clear_breakpoints)
-                    bp_table::remove_all_breakpoints_in_file (nm, true);
+                    bp_table::remove_all_breakpoints_in_file (canonical_nm,
+                                                              true);
                 }
             }
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -41,17 +41,18 @@ class tree_walker;
 class
 OCTINTERP_API
 octave_function : public octave_base_value
 {
 public:
 
   octave_function (void)
     : relative (false), locked (false), private_function (false),
-      xdispatch_class (), my_name (), my_dir_name (), doc () { }
+      xdispatch_class (), xpackage_name (), my_name (), my_dir_name (),
+      doc () { }
 
   ~octave_function (void) { }
 
   octave_base_value *clone (void) const;
   octave_base_value *empty_clone (void) const;
 
   bool is_defined (void) const { return true; }
 
@@ -95,16 +96,20 @@ public:
   virtual bool takes_varargs (void) const { return false; }
 
   virtual bool takes_var_return (void) const { return false; }
 
   void stash_dispatch_class (const std::string& nm) { xdispatch_class = nm; }
 
   std::string dispatch_class (void) const { return xdispatch_class; }
 
+  void stash_package_name (const std::string& pack) { xpackage_name = pack; }
+
+  std::string package_name (void) const { return xpackage_name; }
+
   virtual void
   mark_as_private_function (const std::string& cname = std::string ())
   {
     private_function = true;
     xdispatch_class = cname;
   }
 
   bool is_private_function (void) const { return private_function; }
@@ -151,16 +156,24 @@ public:
   }
 
   void mark_relative (void) { relative = true; }
 
   bool is_relative (void) const { return relative; }
 
   std::string name (void) const { return my_name; }
 
+  std::string canonical_name (void) const
+    {
+      if (xpackage_name.empty ())
+        return my_name;
+      else
+        return xpackage_name + "." + my_name;
+    }
+
   void document (const std::string& ds) { doc = ds; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
 
   virtual void accept (tree_walker&) { }
 
@@ -183,16 +196,20 @@ protected:
   // TRUE means this is a private function.
   bool private_function;
 
   // If this object is a class method or constructor, or a private
   // function inside a class directory, this is the name of the class
   // to which the method belongs.
   std::string xdispatch_class;
 
+  // If this function is part of a package, this is the full name
+  // of the package to which the function belongs.
+  std::string xpackage_name;
+
   // The name of this function.
   std::string my_name;
 
   // The name of the directory in the path where we found this
   // function.  May be relative.
   std::string my_dir_name;
 
   // The help text for this function.
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4028,16 +4028,17 @@ load_fcn_from_file (const std::string& f
     {
       retval = parse_fcn_file (file, nm, dispatch_type, package_name, true,
                                autoload, autoload, relative_lookup, "");
     }
 
   if (retval)
     {
       retval->stash_dir_name (dir_name);
+      retval->stash_package_name (package_name);
 
       if (retval->is_user_function ())
         {
           symbol_table::scope_id id = retval->scope ();
 
           symbol_table::stash_dir_name_for_subfunctions (id, dir_name);
         }
     }
