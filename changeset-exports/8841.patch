# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235409945 18000
#      Mon Feb 23 12:25:45 2009 -0500
# Node ID c743891156104dc3be5df713c35edc3ab48855d8
# Parent  c690e37725839344fb2579ccf5dc68ef9f04a1d3
auto repeat for debugging commands

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-02-23  John W. Eaton  <jwe@octave.org>
+
+	* input.cc (last_debugging_command): New static variable.
+	(octave_gets): Set it here.  Don't insert repeated debugging
+	commands in the history list.
+
 2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/pinv.cc: Support diagonal and permutation matrices.
 
 2008-02-21  David Bateman  <dbateman@free.fr>
 
 	* OPERATORS/op-cs-scm.cc, OPERATORS/op-cs-sm.cc, OPERATORS/op-s-scm.cc,
 	OPERATORS/op-s-sm.cc, OPERATORS/op-scm-cs.cc, OPERATORS/op-scm-s.cc,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -144,16 +144,20 @@ bool octave_completion_matches_called = 
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
 bool Vdebugging = false;
 
+// If we are in debugging mode, this is the last command entered, so
+// that we can repeat the previous command if the user just types RET.
+static std::string last_debugging_command;
+
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
 static void
 do_input_echo (const std::string& input_string)
@@ -246,16 +250,18 @@ interactive_input (const std::string& s,
 
 static std::string
 octave_gets (void)
 {
   OCTAVE_QUIT;
 
   std::string retval;
 
+  bool history_skip_auto_repeated_debugging_command = false;
+
   if ((interactive || forced_interactive)
       && (! (reading_fcn_file
 	     || reading_script_file
 	     || input_from_startup_file
 	     || input_from_command_line_file)))
     {
       std::string ps = (promptflag > 0) ? VPS1 : VPS2;
 
@@ -268,26 +274,39 @@ octave_gets (void)
       octave_diary << prompt;
 
       retval = interactive_input (prompt);
 
       // There is no need to update the load_path cache if there is no
       // user input.
       if (! retval.empty ()
 	  && retval.find_first_not_of (" \t\n\r") != std::string::npos)
-	load_path::update ();
+	{
+	  load_path::update ();
+
+	  if (Vdebugging)
+	    last_debugging_command = retval;
+	  else
+	    last_debugging_command = std::string ();
+	}
+      else if (Vdebugging)
+	{
+	  retval = last_debugging_command;
+	  history_skip_auto_repeated_debugging_command = true;
+	}
     }
   else
     retval = gnu_readline ("");
 
   current_input_line = retval;
 
   if (! current_input_line.empty ())
     {
-      if (! (input_from_startup_file || input_from_command_line_file))
+      if (! (input_from_startup_file || input_from_command_line_file
+	     || history_skip_auto_repeated_debugging_command))
 	command_history::add (current_input_line);
 
       if (! (reading_fcn_file || reading_script_file))
 	{
 	  octave_diary << current_input_line;
 
 	  if (current_input_line[current_input_line.length () - 1] != '\n')
 	    octave_diary << "\n";
