# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1379958297 -7200
#      Mon Sep 23 19:44:57 2013 +0200
# Node ID ed9a21a90221d5ddeabe215f32464fc111c91902
# Parent  6ed0a8532bcf1b786f1d41b394ea3316ca366f2c
Fix incorrect parenting of axes and hggroups (bug #39813)
Modify newplot to accept any type of graphics handle so that it can be
preserved.  Modify  __plt_get_axis_arg__ to return "parent" handle instead of
axis handle.

* newplot.m: Make the function preserve the hsave handle.  Add Matlab compatible tests

*__plt_get_axis_arg__: Return "parent" argument in case one is specified instead of axis.

diff --git a/scripts/plot/util/__plt_get_axis_arg__.m b/scripts/plot/util/__plt_get_axis_arg__.m
--- a/scripts/plot/util/__plt_get_axis_arg__.m
+++ b/scripts/plot/util/__plt_get_axis_arg__.m
@@ -45,17 +45,17 @@ function [h, varargin, narg] = __plt_get
   elseif (numel (varargin) > 1 && ! isempty (parent))
     if (parent < numel (varargin) && ishandle (varargin{parent+1}))
       htmp = varargin{parent+1};
       if (isaxes (htmp) && ! strcmp (get (htmp, "tag"), "legend"))
         h = htmp;
         varargin(parent:parent+1) = [];
       else
         ## 'parent' property for some other type like hggroup
-        h = ancestor (htmp, "axes");
+        h = htmp;
       endif
     else
       error ("%s: expecting parent value to be axes handle", caller);
     endif
   endif
 
   narg = length (varargin);
 
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -133,18 +133,20 @@ function hax = newplot (hsave = [])
       endif
       delete (kids);
       reset (cf);
   endswitch
   set (cf, "nextplot", "add");  # Matlab compatibility
 
   if (isempty (ca))
     ca = gca ();
+    deleteall = true;
   else
     set (cf, "currentaxes", ca);
+    deleteall = false;
   endif
 
   ## FIXME: Is this necessary anymore?
   ##        It seems like a kluge that belongs somewhere else.
   if (strcmp (get (ca, "__hold_all__"), "off"))
     __next_line_color__ (true);
     __next_line_style__ (true);
   else
@@ -154,18 +156,29 @@ function hax = newplot (hsave = [])
 
   anp = get (ca, "nextplot");
   switch (anp)
     case "add"
       ## Default case.  Doesn't require action.
     case "replacechildren"
       delete (get (ca, "children"));
     case "replace"
-      __go_axes_init__ (ca, "replace");
-      __request_drawnow__ ();
+      if (! deleteall && ca != hsave)
+        ## preserve hsave and its parents, uncles, ...
+        kids = allchild (ca);
+        hkid = hsave;
+        while (! any (hkid == kids))
+          hkid = get (hkid, "parent");
+        endwhile
+        kids(kids == hkid) = [];
+        delete (kids);
+      else
+        __go_axes_init__ (ca, "replace");
+        __request_drawnow__ ();
+      endif
       ## FIXME: The code above should perform the following:
       ###########################
       ## delete (allchild (ca));
       ## reset (ca);
       ###########################
       ## Actually, __go_axes_init__ does both less and more.
       ## It doesn't really remove all children since it re-instantiates
       ## xlabel, ylabel, zlabel, and title text objects.
@@ -187,8 +200,39 @@ endfunction
 %!   p = plot ([0, 1]);
 %!   hax = newplot ();
 %!   assert (hax, gca);
 %!   assert (isempty (get (gca, "children")));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   hold on;
+%!   hg1 = hggroup ();
+%!   hg2 = hggroup ("parent", hg1);
+%!   li0 = line (1:10, 1:10);
+%!   li1 = line (1:10, -1:-1:-10, "parent", hg1);
+%!   li2 = line (1:10, sin (1:10), "parent", hg2);
+%!   hold off;
+%!   newplot (hg2);
+%!   assert (ishandle (li0), false);
+%!   assert (get (hax, "children"), hg1);
+%! 
+%!   ## kids are preserved for hggroups
+%!   kids = get (hg1, "children");
+%!   newplot (hg1); 
+%!   assert (get (hg1, "children"), kids));
+%! 
+%!   ## preserve objects
+%!   newplot (li1);
+%!   assert (ishandle (li1));
+%! 
+%!   ## kids are deleted for axes
+%!   newplot (hax);  
+%!   assert (isempty (get (hax, "children")));
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
