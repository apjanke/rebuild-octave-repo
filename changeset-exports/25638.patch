# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531938181 14400
#      Wed Jul 18 14:23:01 2018 -0400
# Node ID 9d3dc0cd7fea0e3d0e80ef32380a509f4b5297f3
# Parent  e1c3d1c6e8962fab56856f0e043c293ad75ba012
fix errors in previous change

* oct-parse.yy: Delete stray %API_PREFIX_DECL% marker.

* acinclude.m4 (OCTAVE_PROG_BISON): Don't substitute unused
BISON_API_PREFIX_DECL_SYLE variable.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -111,18 +111,16 @@ static void yyerror (octave::base_parser
 
 // Bison declarations.
 
 // The grammar currently has 9 shift/reduce conflicts.  Ensure that
 // we notice if that number changes.
 
 %expect 9
 
-%API_PREFIX_DECL%
-
 // We are using the pure parser interface and the reentrant lexer
 // interface but the Octave parser and lexer are NOT properly
 // reentrant because both still use many global variables.  It should be
 // safe to create a parser object and call it while another parser
 // object is active (to parse a callback function while the main
 // interactive parser is waiting for input, for example) if you take
 // care to properly save and restore (typically with an unwind_protect
 // object) relevant global values before and after the nested call.
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -3177,18 +3177,16 @@ EOF
         if test -n "$octave_cv_bison_api_prefix_decl_style"; then
           break
         fi
       done
       rm -f conftest.yy y.tab.h y.tab.c
       ])
   fi
 
-  AC_SUBST(BISON_API_PREFIX_DECL_STYLE, $octave_cv_bison_api_prefix_decl_style)
-
   if test -z "$octave_cv_bison_api_prefix_decl_style" \
     || test "$octave_cv_bison_api_prefix_decl_style" != "api brace"; then
     tmp_have_bison=no
     warn_bison_api_prefix_decl_style="
 
 I wasn't able to find a suitable style for declaring the api prefix
 in a bison input file so I'm disabling bison.  We expect bison to
 understand the '%define api.prefix { PREFIX }' syntax.
