# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273470656 -7200
#      Mon May 10 07:50:56 2010 +0200
# Node ID 9c9e07f5eb1caf4e5b42a72ec29ce3434292f30d
# Parent  d61caf612f1ec5edeec4707f003c77fa02183b36
make schur mark triangular matrices on output

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-05-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/schur.cc (Fschur): Mark triangular matrices on output.
+
 2010-05-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.cc (octave_range::index_vector): Optimize order of
 	conditions.
 
 2010-05-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::do_non_const_unary_op): Always return *this as
diff --git a/src/DLD-FUNCTIONS/schur.cc b/src/DLD-FUNCTIONS/schur.cc
--- a/src/DLD-FUNCTIONS/schur.cc
+++ b/src/DLD-FUNCTIONS/schur.cc
@@ -33,16 +33,36 @@ along with Octave; see the file COPYING.
 #include "floatSCHUR.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+template <class Matrix>
+static octave_value
+mark_upper_triangular (const Matrix& a)
+{
+  octave_value retval = a;
+
+  octave_idx_type n = a.rows ();
+  assert (a.columns () == n);
+
+  const typename Matrix::element_type zero = typename Matrix::element_type ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    if (a(i,i) == zero)
+      return retval;
+
+  retval.matrix_type (MatrixType::Upper);
+
+  return retval;
+}
+
 DEFUN_DLD (schur, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} schur (@var{a})\n\
 @deftypefnx {Loadable Function} {@var{s} =} schur (@var{a}, \"complex\")\n\
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}] =} schur (@var{a}, @var{opt})\n\
 @cindex Schur decomposition\n\
 The Schur decomposition is used to compute eigenvalues of a\n\
 square matrix, and has applications in the solution of algebraic\n\
@@ -289,22 +309,22 @@ leading eigenvalues of\n\
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
           if (! error_state)
             {
  
               if (nargout == 0 || nargout == 1)
                 {
                   FloatComplexSCHUR result (ctmp, ord, false);
-                  retval(0) = result.schur_matrix ();
+                  retval(0) = mark_upper_triangular (result.schur_matrix ());
                 }
               else
                 {
                   FloatComplexSCHUR result (ctmp, ord, true);
-                  retval(1) = result.schur_matrix ();
+                  retval(1) = mark_upper_triangular (result.schur_matrix ());
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
     }
   else
     {
       if (! force_complex && arg.is_real_type ())
@@ -331,22 +351,22 @@ leading eigenvalues of\n\
           ComplexMatrix ctmp = arg.complex_matrix_value ();
 
           if (! error_state)
             {
  
               if (nargout == 0 || nargout == 1)
                 {
                   ComplexSCHUR result (ctmp, ord, false);
-                  retval(0) = result.schur_matrix ();
+                  retval(0) = mark_upper_triangular (result.schur_matrix ());
                 }
               else
                 {
                   ComplexSCHUR result (ctmp, ord, true);
-                  retval(1) = result.schur_matrix ();
+                  retval(1) = mark_upper_triangular (result.schur_matrix ());
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
     }
  
   return retval; 
 }
