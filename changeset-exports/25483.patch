# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1529415423 14400
#      Tue Jun 19 09:37:03 2018 -0400
# Node ID 37dbf79c22979b1e0524e5bf4ea24c0fdb8a8197
# Parent  920299ced721f68ce0d97eb0d3c309fc8a61a6ea
# Parent  0d7a89bec20e598863f52f8c972937cdba086c59
maint: Merge stable to default.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1044,32 +1044,37 @@ namespace octave
             if (! scope.is_global (name))
               {
                 octave_value val = scope.varval (name);
 
                 bool local_val_is_defined = val.is_defined ();
 
                 if (local_val_is_defined)
                   {
-                    warning_with_id ("Octave:global-from-local",
+                    warning_with_id ("Octave:global-local-conflict",
                                      "global: '%s' is defined in the current scope",
                                      name.c_str ());
-                    warning_with_id ("Octave:global-from-local",
+                    warning_with_id ("Octave:global-local-conflict",
                                      "global: in a future version, global variables must be declared before use");
 
                     // If the symbol is defined in the local but not the
                     // global scope, then use the local value as the
                     // initial value.  This value will also override any
                     // initializer in the global statement.
                     octave_value global_val = global_scope.varval (name);
 
-                    if (! global_val.is_defined ())
+                    if (global_val.is_defined ())
                       {
-                        warning_with_id ("Octave:global-from-local",
-                                         "global: global value overrides local value");
+                        warning_with_id ("Octave:global-local-conflict",
+                                         "global: global value overrides existing local value");
+                      }
+                    else
+                      {
+                        warning_with_id ("Octave:global-local-conflict",
+                                         "global: existing local value used to initialize global variable");
 
                         global_scope.assign (name, val);
                       }
                   }
 
                 id->link_to_global (global_scope, global_sr);
               }
           }
diff --git a/test/global.tst b/test/global.tst
--- a/test/global.tst
+++ b/test/global.tst
@@ -82,41 +82,54 @@
 %! g;
 
 %!function r = f ()
 %!  x = 1;
 %!  global x;
 %!  r = x;
 %!endfunction
 %!test
-%! warning ("off", "Octave:global-from-local", "local");
-%! clear global x
+%! warning ("off", "Octave:global-local-conflict", "local");
+%! clear global x      ## clears global and local value
 %! global x
 %! x = 0;
 %! assert (f (), 0);
 %! global x
 %! assert (x, 0);
 %!test
-%! warning ("off", "Octave:global-from-local", "local");
-%! clear global x
+%! warning ("off", "Octave:global-local-conflict", "local");
+%! clear global x      ## clears global and local value
 %! assert (f (), 1);
 %! global x
 %! assert (x, 1);
 
 %!function r = f ()
 %!  x = 1;
 %!  global x = 3;
 %!  r = x;
 %!endfunction
 %!test
-%! warning ("off", "Octave:global-from-local", "local");
-%! clear global x
+%! warning ("off", "Octave:global-local-conflict", "local");
+%! clear global x      ## clears global and local value
 %! global x
 %! x = 0;
 %! assert (f (), 0);
 %! global x
 %! assert (x, 0);
 %!test
-%! warning ("off", "Octave:global-from-local", "local");
+%! warning ("off", "Octave:global-local-conflict", "local");
 %! clear global x
 %! assert (f (), 1);
 %! global x
 %! assert (x, 1);
+
+%!test
+%! warning ("off", "Octave:global-local-conflict", "local");
+%! clear global x      ## clears global and local value
+%! x = 42;             ## local value
+%! global x            ## link to undefined global, global gets local value
+%! assert (x, 42);
+%! clear x             ## clears local; global still defined
+%! x = 13;             ## new local value
+%! global x;           ## link to existing global, local gets global value
+%! assert (x, 42);
+%! clear global x      ## clears global and local value
+%! assert (exist ("x"), 0);
