# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552634187 0
#      Fri Mar 15 07:16:27 2019 +0000
# Node ID 072d0610cc5634b427f673d5032f30f8f49622dd
# Parent  9c8ebafba517040f4931d3eddd513aa84ae1315f
avoid some overloaded virtual warnings (bug #55741)

* ov.h (octave_value::xnumel (const octave_value_list&)):
Rename from numel.  Change all uses.

* ov-base.h, ov-base.cc, ov-class.h, ov-class.cc, ov-classdef.h,
ov-classdef.cc: Rename "numel (const octave_value_list&) method to
xnumel.  Change all uses.

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -186,17 +186,17 @@ octave_base_value::size (void)
   const dim_vector dv = dims ();
   Matrix mdv (1, dv.ndims ());
   for (octave_idx_type i = 0; i < dv.ndims (); i++)
     mdv(i) = dv(i);
   return mdv;
 }
 
 octave_idx_type
-octave_base_value::numel (const octave_value_list& idx)
+octave_base_value::xnumel (const octave_value_list& idx)
 {
   return octave::dims_to_numel (dims (), idx);
 }
 
 octave_value
 octave_base_value::subsref (const std::string&,
                             const std::list<octave_value_list>&)
 {
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -273,17 +273,17 @@ public:
   virtual octave_value as_uint64 (void) const;
 
   virtual octave_base_value * try_narrowing_conversion (void) { return nullptr; }
 
   virtual void maybe_economize (void) { }
 
   virtual Matrix size (void);
 
-  virtual octave_idx_type numel (const octave_value_list&);
+  virtual octave_idx_type xnumel (const octave_value_list&);
 
   // FIXME: Do we really need all three of these versions of subsref?
 
   virtual octave_value
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx);
 
   virtual octave_value_list
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -327,20 +327,20 @@ octave_class::size (void)
       for (int i = 0; i < nd; i++)
         retval(i) = dv(i);
     }
 
   return retval;
 }
 
 octave_idx_type
-octave_class::numel (const octave_value_list& idx)
+octave_class::xnumel (const octave_value_list& idx)
 {
   if (in_class_method () || called_from_builtin ())
-    return octave_base_value::numel (idx);
+    return octave_base_value::xnumel (idx);
 
   octave_idx_type retval = -1;
   const std::string cn = class_name ();
 
   octave::symbol_table& symtab =
     octave::__get_symbol_table__ ("octave_class::numel");
 
   octave_value meth = symtab.find_method ("numel", cn);
@@ -357,17 +357,17 @@ octave_class::numel (const octave_value_
 
       octave_value_list lv = octave::feval (meth.function_value (), args, 1);
       if (lv.length () != 1 || ! lv(0).is_scalar_type ())
         error ("@%s/numel: invalid return value", cn.c_str ());
 
       retval = lv(0).idx_type_value (true);
     }
   else
-    retval = octave_base_value::numel (idx);
+    retval = octave_base_value::xnumel (idx);
 
   return retval;
 }
 
 octave_value_list
 octave_class::subsref (const std::string& type,
                        const std::list<octave_value_list>& idx,
                        int nargout)
@@ -461,17 +461,17 @@ octave_class::subsref (const std::string
 
           int true_nargout = nargout;
 
           if (maybe_cs_list_query)
             {
               // Set up a proper nargout for the subsref call by calling numel.
               octave_value_list tmp;
               if (type[0] != '.') tmp = idx.front ();
-              true_nargout = numel (tmp);
+              true_nargout = xnumel (tmp);
             }
 
           retval = octave::feval (meth.function_value (), args, true_nargout);
 
           // Since we're handling subsref, if the list has more than one
           // element, return it as a comma-separated list so that we can
           // pass it to the evaluator
           if (retval.length () > 1)
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -80,17 +80,17 @@ public:
   {
     return new octave_class (octave_map (map.keys ()), c_name, parent_list);
   }
 
   Cell dotref (const octave_value_list& idx);
 
   Matrix size (void);
 
-  octave_idx_type numel (const octave_value_list&);
+  octave_idx_type xnumel (const octave_value_list&);
 
   // We don't need to override all three forms of subsref.  The using
   // declaration will avoid warnings about partially-overloaded virtual
   // functions.
   using octave_base_value::subsref;
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -198,17 +198,17 @@ octave_classdef::undef_subsasgn (const s
     }
   else
     return octave_base_value::undef_subsasgn (type, idx, rhs);
 
   return octave_value ();
 }
 
 octave_idx_type
-octave_classdef::numel (const octave_value_list& idx)
+octave_classdef::xnumel (const octave_value_list& idx)
 {
   octave_idx_type retval = -1;
 
   octave::cdef_class cls = object.get_class ();
 
   if (! in_class_method (cls) && ! called_from_builtin ())
     {
       octave::cdef_method meth = cls.find_method ("numel");
@@ -228,17 +228,17 @@ octave_classdef::numel (const octave_val
             error ("@%s/numel: invalid return value", cls.get_name ().c_str ());
 
           retval = lv(0).idx_type_value (true);
 
           return retval;
         }
     }
 
-  retval = octave_base_value::numel (idx);
+  retval = octave_base_value::xnumel (idx);
 
   return retval;
 }
 
 void
 octave_classdef::print (std::ostream& os, bool)
 {
   print_raw (os);
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -105,17 +105,17 @@ public:
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
 
-  octave_idx_type numel (const octave_value_list&);
+  octave_idx_type xnumel (const octave_value_list&);
 
   string_vector map_keys (void) const { return object.map_keys (); }
 
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
   void set_property (octave_idx_type idx, const std::string& name,
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -401,18 +401,20 @@ public:
 
   octave_base_value * try_narrowing_conversion (void)
   { return rep->try_narrowing_conversion (); }
 
   // Close to dims (), but can be overloaded for classes.
   Matrix size (void)
   { return rep->size (); }
 
-  octave_idx_type numel (const octave_value_list& idx)
-  { return rep->numel (idx); }
+  // FIXME: should this function be deprecated and removed?  It supports
+  // an undocumented feature of Matlab.
+  octave_idx_type xnumel (const octave_value_list& idx)
+  { return rep->xnumel (idx); }
 
   // FIXME: Do we really need all these different versions of subsref
   // and related functions?
 
   octave_value single_subsref (const std::string& type,
                                const octave_value_list& idx);
 
   octave_value subsref (const std::string& type,
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -265,17 +265,17 @@ namespace octave
                   tmp = Cell ();
                 }
               else if (tmp.is_zero_by_zero ()
                        && (tmp.is_matrix_type () || tmp.is_string ()))
                 {
                   tmp = Cell ();
                 }
 
-              retval.numel (tmp.numel (tidx));
+              retval.numel (tmp.xnumel (tidx));
 
               idx.push_back (tidx);
               tmpidx.push_back (tidx);
               tmpi = i;
             }
             break;
 
           case '.':
@@ -297,31 +297,31 @@ namespace octave
                       if (pidx.has_magic_colon ())
                         err_invalid_inquiry_subscript ();
 
                       tmp = octave_map ();
                     }
                   else if (autoconv)
                     tmp = octave_map ();
 
-                  retval.numel (tmp.numel (pidx));
+                  retval.numel (tmp.xnumel (pidx));
 
                   tmpi = i-1;
                   tmpidx.push_back (tidx);
                 }
               else
                 {
                   if (tmp.is_undefined () || autoconv)
                     {
                       tmpi = i+1;
                       tmp = octave_value ();
                     }
                   else
                     {
-                      retval.numel (tmp.numel (octave_value_list ()));
+                      retval.numel (tmp.xnumel (octave_value_list ()));
 
                       tmpi = i;
                       tmpidx.push_back (tidx);
                     }
                 }
 
               idx.push_back (tidx);
             }
