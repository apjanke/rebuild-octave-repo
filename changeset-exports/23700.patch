# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498513447 14400
#      Mon Jun 26 17:44:07 2017 -0400
# Node ID d59fb809595b93a2814538800f842231a40b6327
# Parent  b29904962d2da3b8c2ec8cd643f2f5ee23fb2b40
* dasrt.cc (Fdasrt): Use extract_function instead of is_valid_function.

diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -461,36 +461,32 @@ parameters for @code{dasrt}.
   if (! dasrt_f)
     return retval;
 
   DAERTFunc func (dasrt_user_f);
 
   argp++;
 
   if (args(1).is_function_handle () || args(1).is_inline_function ())
+    dasrt_cf = args(1).function_value ();
+  else
     {
-      dasrt_cf = args(1).function_value ();
-
-      if (! dasrt_cf)
-        error ("dasrt: invalid constraint function G");
-
-      argp++;
-
-      func.set_constraint_function (dasrt_user_cf);
+      fcn_name = unique_symbol_name ("__dasrt_constraint_fcn__");
+      fname = "function g_out = ";
+      fname.append (fcn_name);
+      fname.append (" (x, t) g_out = ");
+      dasrt_cf = extract_function (f_arg, "dasrt", fcn_name, fname,
+                                   "; endfunction");
     }
-  else if (args(1).is_string ())
-    {
-      dasrt_cf = is_valid_function (args(1), "dasrt", true);
-      if (! dasrt_cf)
-        error ("dasrt: invalid constraint function G");
 
-      argp++;
+  if (! dasrt_cf)
+    error ("dasrt: invalid constraint function G");
 
-      func.set_constraint_function (dasrt_user_cf);
-    }
+  argp++;
+  func.set_constraint_function (dasrt_user_cf);
 
   ColumnVector state = args(argp).xvector_value ("dasrt: initial state X_0 must be a vector");
 
   ColumnVector stateprime = args(argp).xvector_value ("dasrt: initial derivatives XDOT_0 must be a vector");
   argp++;
 
   ColumnVector out_times = args(argp).xvector_value ("dasrt: output time variable T must be a vector");
   argp++;
