# HG changeset patch
# User jwe
# Date 1144867156 0
#      Wed Apr 12 18:39:16 2006 +0000
# Node ID 493849caf7e96178242af7194d6dcad6350f70e8
# Parent  ca40a52804f4d3b1f8582cb434c2888fb277088d
[project @ 2006-04-12 18:39:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2006-04-12  John W. Eaton  <jwe@octave.org>
 
+	* ov-struct.cc (struct_levels_to_print): Move here from ov.cc.
+	(Vstruct-levels_to_print): Likewise.  Now static.
+	(symbols_of_ov_struct): New function.  Move DEFVAR for
+	struct_levels_to_print here from symbols_of_ov in ov.cc.
+	* ov.h (Vstruct-levels_to_print): Delete decl.
+
 	* gripes.cc (warn_divide_by_zero): Move here from ov.cc.
 	(Vwarn_divide_by_zero): Likewise.  Now static.
 	(symbols_of_gripes): New function.  Move DEFVAR for
 	warn_divide_by_zero here from symbols_of_ov in ov.cc.
 	* ov.h (Vwarn_divide_by_zero): Delete decl.
 
 	* load-save.cc (do_load): Declare count octave_idx_type, not int.
 	* ls-oct-ascii.cc, ls-oct-ascii.h (read_ascii_data): Likewise.
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -44,16 +44,19 @@ 02110-1301, USA.
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct", "struct");
 
+// How many levels of structure elements should we print?
+static int Vstruct_levels_to_print;
+
 Cell
 octave_struct::dotref (const octave_value_list& idx)
 {
   Cell retval;
 
   assert (idx.length () == 1);
 
   std::string nm = idx(0).string_value ();
@@ -1041,17 +1044,17 @@ octave_struct::load_ascii (std::istream&
 
 	  for (octave_idx_type j = 0; j < len; j++)
 	    {
 	      octave_value t2;
 	      bool dummy;
 
 	      // recurse to read cell elements
 	      std::string nm
-		= read_ascii_data (is, std::string (), dummy, t2, count);
+		= read_ascii_data (is, std::string (), dummy, t2, j);
 
 	      if (!is)
 		break;
 
 	      // Try for some backward compatibility...
 	      if (t2.is_cell () && t2.length() > 1)
 		m.assign (nm, t2);
 	      else
@@ -1258,13 +1261,42 @@ octave_struct::load_hdf5 (hid_t loc_id, 
       retval = true;
     }
   
   return retval;
 }
 
 #endif
 
+static int
+struct_levels_to_print (void)
+{
+  double val;
+  if (builtin_real_scalar_variable ("struct_levels_to_print", val)
+      && ! xisnan (val))
+    {
+      int ival = NINT (val);
+      if (ival == val)
+	{
+	  Vstruct_levels_to_print = ival;
+	  return 0;
+	}
+    }
+  gripe_invalid_value_specified ("struct_levels_to_print");
+  return -1;
+}
+
+void
+symbols_of_ov_struct (void)
+{
+  DEFVAR (struct_levels_to_print, 2.0, struct_levels_to_print,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} struct_levels_to_print\n\
+You can tell Octave how many structure levels to display by setting the\n\
+built-in variable @code{struct_levels_to_print}.  The default value is 2.\n\
+@end defvr");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -105,19 +105,16 @@ bool Vwarn_num_to_str;
 //   octave> 'abc' + 0
 //   97 98 99
 //
 int Vwarn_str_to_num;
 
 // If TRUE, print the name along with the value.
 bool Vprint_answer_id_name;
 
-// How many levels of structure elements should we print?
-int Vstruct_levels_to_print;
-
 // If TRUE, print a warning when a matrix is resized by an indexed
 // assignment with indices outside the current bounds.
 bool Vwarn_resize_on_range_error;
 
 // XXX FIXME XXX
 
 // Octave's value type.
 
@@ -2305,34 +2302,16 @@ warn_resize_on_range_error (void)
 static int
 silent_functions (void)
 {
   Vsilent_functions = check_preference ("silent_functions");
 
   return 0;
 }
 
-static int
-struct_levels_to_print (void)
-{
-  double val;
-  if (builtin_real_scalar_variable ("struct_levels_to_print", val)
-      && ! xisnan (val))
-    {
-      int ival = NINT (val);
-      if (ival == val)
-	{
-	  Vstruct_levels_to_print = ival;
-	  return 0;
-	}
-    }
-  gripe_invalid_value_specified ("struct_levels_to_print");
-  return -1;
-}
-
 void
 symbols_of_ov (void)
 {
   DEFVAR (print_answer_id_name, true, print_answer_id_name,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} print_answer_id_name\n\
 If the value of @code{print_answer_id_name} is nonzero, variable\n\
 names are printed along with the result.  Otherwise, only the result\n\
@@ -2355,23 +2334,16 @@ function f ()\n\
 endfunction\n\
 @end example\n\
 \n\
 @noindent\n\
 is executed, Octave will either print @samp{ans = 4} or nothing\n\
 depending on the value of @code{silent_functions}.\n\
 @end defvr");
 
-  DEFVAR (struct_levels_to_print, 2.0, struct_levels_to_print,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} struct_levels_to_print\n\
-You can tell Octave how many structure levels to display by setting the\n\
-built-in variable @code{struct_levels_to_print}.  The default value is 2.\n\
-@end defvr");
-
   DEFVAR (warn_fortran_indexing, false, warn_fortran_indexing,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_fortran_indexing\n\
 If the value of @code{warn_fortran_indexing} is nonzero, a warning is\n\
 printed for expressions which select elements of a two-dimensional matrix\n\
 using a single index.  The default value is 0.\n\
 @end defvr");
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -970,19 +970,16 @@ extern bool Vwarn_num_to_str;
 extern int Vwarn_str_to_num;
 
 // Should we warn about conversions from complex to real?
 extern int Vwarn_imag_to_real;
 
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
-// How many levels of structure elements should we print?
-extern int Vstruct_levels_to_print;
-
 // If TRUE, print a warning when a matrix is resized by an indexed
 // assignment with indices outside the current bounds.
 extern bool Vwarn_resize_on_range_error;
 
 // Indentation level for structures.
 extern int struct_indent;
 
 extern void increment_struct_indent (void);
