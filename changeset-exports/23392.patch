# HG changeset patch
# User Rik <rik@octave.org>
# Date 1492041319 25200
#      Wed Apr 12 16:55:19 2017 -0700
# Node ID 77a7f2fecd7424646e682673282b589cc7b1885f
# Parent  209e749363a2b38d295da78633e056fe8d701e12
New xelem function for fast access to dim_vector internals.

* dim-vector.h: Declare xelem inline functions for fast access to
dim_vector elements with no checking.  Replace elem with xelem
in cases where input is guaranteed to be valid.

* dim-vector.cc: Replace elem with xelem in cases where input is guaranteed to
be valid.

diff --git a/liboctave/array/dim-vector.cc b/liboctave/array/dim-vector.cc
--- a/liboctave/array/dim-vector.cc
+++ b/liboctave/array/dim-vector.cc
@@ -71,34 +71,34 @@ dim_vector::chop_all_singletons (void)
 
 std::string
 dim_vector::str (char sep) const
 {
   std::ostringstream buf;
 
   for (int i = 0; i < ndims (); i++)
     {
-      buf << elem (i);
+      buf << xelem (i);
 
       if (i < ndims () - 1)
         buf << sep;
     }
 
   std::string retval = buf.str ();
 
   return retval;
 }
 
 int
 dim_vector::num_ones (void) const
 {
   int retval = 0;
 
   for (int i = 0; i < ndims (); i++)
-    if (elem (i) == 1)
+    if (xelem (i) == 1)
       retval++;
 
   return retval;
 }
 
 octave_idx_type
 dim_vector::safe_numel (void) const
 {
@@ -124,20 +124,20 @@ dim_vector::squeeze (void) const
   dim_vector new_dims = *this;
 
   bool dims_changed = 1;
 
   int k = 0;
 
   for (int i = 0; i < ndims (); i++)
     {
-      if (elem (i) == 1)
+      if (xelem (i) == 1)
         dims_changed = true;
       else
-        new_dims(k++) = elem (i);
+        new_dims(k++) = xelem (i);
     }
 
   if (dims_changed)
     {
       if (k == 0)
         new_dims = dim_vector (1, 1);
       else if (k == 1)
         {
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -206,31 +206,39 @@ public:
               Ints... lengths) : rep (newrep (2 + sizeof... (Ints)))
   {
     std::initializer_list<octave_idx_type> all_lengths = {r, c, lengths...};
     for (const octave_idx_type l: all_lengths)
       *rep++ = l;
     rep -= all_lengths.size ();
   }
 
+  // Fast access with absolutely no checking
+
+  octave_idx_type& xelem (int i) { return rep[i]; }
+    
+  octave_idx_type xelem (int i) const { return rep[i]; }
+
+  // Safe access to to elements
+
   octave_idx_type& elem (int i)
   {
 #if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     assert (i >= 0 && i < ndims ());
 #endif
     make_unique ();
-    return rep[i];
+    return xelem (i);
   }
 
   octave_idx_type elem (int i) const
   {
 #if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     assert (i >= 0 && i < ndims ());
 #endif
-    return rep[i];
+    return xelem (i);
   }
 
   void chop_trailing_singletons (void)
   {
     int l = ndims ();
     if (l > 2 && rep[l-1] == 1)
       {
         make_unique ();
@@ -289,17 +297,17 @@ public:
   {
     if (OCTAVE_ATOMIC_DECREMENT (&(count ())) == 0)
       freerep ();
   }
 
   //! Number of dimensions.
   /*!
       Returns the number of dimensions of the dim_vector.  This is number of
-      elements in the dim_vector including trailing singetons.  It is also
+      elements in the dim_vector including trailing singletons.  It is also
       the number of dimensions an Array with this dim_vector would have.
   */
   octave_idx_type ndims (void) const { return rep[-1]; }
 
   //! Number of dimensions.
   //! Synonymous with ndims().
   /*!
     While this method is not officially deprecated, consider using ndims()
@@ -330,43 +338,43 @@ public:
   std::string str (char sep = 'x') const;
 
   bool all_zero (void) const
   {
     bool retval = true;
 
     for (int i = 0; i < ndims (); i++)
       {
-        if (elem (i) != 0)
+        if (xelem (i) != 0)
           {
             retval = false;
             break;
           }
       }
 
     return retval;
   }
 
   bool empty_2d (void) const
   {
-    return ndims () == 2 && (elem (0) == 0 || elem (1) == 0);
+    return ndims () == 2 && (xelem (0) == 0 || xelem (1) == 0);
   }
 
   bool zero_by_zero (void) const
   {
-    return ndims () == 2 && elem (0) == 0 && elem (1) == 0;
+    return ndims () == 2 && xelem (0) == 0 && xelem (1) == 0;
   }
 
   bool any_zero (void) const
   {
     bool retval = false;
 
     for (int i = 0; i < ndims (); i++)
       {
-        if (elem (i) == 0)
+        if (xelem (i) == 0)
           {
             retval = true;
             break;
           }
       }
 
     return retval;
   }
@@ -410,17 +418,17 @@ public:
   octave_idx_type safe_numel (void) const;
 
   bool any_neg (void) const
   {
     int n_dims = ndims ();
     int i;
 
     for (i = 0; i < n_dims; i++)
-      if (elem (i) < 0)
+      if (xelem (i) < 0)
         break;
 
     return i < n_dims;
   }
 
   dim_vector squeeze (void) const;
 
   //! This corresponds to cat().
@@ -435,42 +443,42 @@ public:
       dimensions are set to 1, redundant are folded into the trailing
       one.  If n = 1, the result is 2d and the second dim is 1
       (dim_vectors are always at least 2D).
   */
   dim_vector redim (int n) const;
 
   dim_vector as_column (void) const
   {
-    if (ndims () == 2 && elem (1) == 1)
+    if (ndims () == 2 && xelem (1) == 1)
       return *this;
     else
       return dim_vector (numel (), 1);
   }
 
   dim_vector as_row (void) const
   {
-    if (ndims () == 2 && elem (0) == 1)
+    if (ndims () == 2 && xelem (0) == 1)
       return *this;
     else
       return dim_vector (1, numel ());
   }
 
   bool is_vector (void) const
   {
-    return (ndims () == 2 && (elem (0) == 1 || elem (1) == 1));
+    return (ndims () == 2 && (xelem (0) == 1 || xelem (1) == 1));
   }
 
   bool is_nd_vector (void) const
   {
     int num_non_one = 0;
 
     for (int i = 0; i < ndims (); i++)
       {
-        if (elem (i) != 1)
+        if (xelem (i) != 1)
           {
             num_non_one++;
 
             if (num_non_one > 1)
               break;
           }
       }
 
@@ -502,17 +510,17 @@ public:
 
     return orig_dims;
   }
 
   int first_non_singleton (int def = 0) const
   {
     for (int i = 0; i < ndims (); i++)
       {
-        if (elem (i) != 1)
+        if (xelem (i) != 1)
           return i;
       }
 
     return def;
   }
 
   //! Linear index from an index tuple.
   octave_idx_type compute_index (const octave_idx_type* idx) const
