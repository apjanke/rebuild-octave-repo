# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235974113 18000
#      Mon Mar 02 01:08:33 2009 -0500
# Node ID f155e9d1f086ba346323861ab22e6238361e1ee3
# Parent  ac8f5a159c2cf3d61c1e9cca26cde8d21f746015
graphics.cc (Fget, F__get__): return column vector, not row vector

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-02  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (Fget, F__get__): Return a column vector of property
+	values, not a row vector.
+
 2009-03-01  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-fcm-fcm.cc (DEFNDASSIGNOP_FN (dbl_assign)):
 	LHS type is float_complex_matrix, not complex_matrix.  RHS value
 	function is float_complex_array, not complex_array.
 
 2009-03-01  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4386,44 +4386,45 @@ Return the named property @var{p} from t
 If @var{p} is omitted, return the complete property list for @var{h}.\n\
 If @var{h} is a vector, return a cell array including the property\n\
 values or lists respectively.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
   octave_value retval;
-  octave_value_list vlist;
+
+  Cell vals;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       ColumnVector hcv (args(0).vector_value ());
 
       if (! error_state)
         {
 	  octave_idx_type len = hcv.length ();
 
-	  vlist.resize (len);
+	  vals.resize (dim_vector (len, 1));
 
           for (octave_idx_type n = 0; n < len; n++)
             {
               graphics_object obj = gh_manager::get_object (hcv(n));
 
               if (obj)
                 {
                   if (nargin == 1)
-                    vlist(n) = obj.get ();
+                    vals(n) = obj.get ();
                   else
                     {
                       caseless_str property = args(1).string_value ();
 
                       if (! error_state)
-                        vlist(n) = obj.get (property);
+                        vals(n) = obj.get (property);
                       else
 			{
 			  error ("get: expecting property name as second argument");
 			  break;
 			}
                     }
                 }
               else
@@ -4436,22 +4437,22 @@ values or lists respectively.\n\
       else
         error ("get: expecting graphics handle as first argument");
     }
   else
     print_usage ();
 
   if (! error_state)
     {
-      octave_idx_type len = vlist.length ();
+      octave_idx_type len = vals.numel ();
 
       if (len > 1)
-	retval = Cell (vlist);
+	retval = vals;
       else if (len == 1)
-	retval = vlist(0);
+	retval = vals(0);
     }
 
   return retval;
 }
 
 // Return all properties from the graphics handle @var{h}.
 // If @var{h} is a vector, return a cell array including the
 // property values or lists respectively.
@@ -4460,57 +4461,58 @@ DEFUN (__get__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __get__ (@var{h})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
   octave_value retval;
-  octave_value_list vlist;
+
+  Cell vals;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       ColumnVector hcv (args(0).vector_value ());
 
       if (! error_state)
         {
           octave_idx_type len = hcv.length ();
 
-          vlist.resize (len);
+          vals.resize (dim_vector (len, 1));
 
           for (octave_idx_type n = 0; n < len; n++)
             {
               graphics_object obj = gh_manager::get_object (hcv(n));
 
               if (obj)
-                vlist(n) = obj.get (true);
+                vals(n) = obj.get (true);
               else
                 {
                   error ("get: invalid handle (= %g)", hcv(n));
                   break;
                 }
             }
         }
       else
         error ("get: expecting graphics handle as first argument");
     }
   else
     print_usage ();
 
   if (! error_state)
     {
-      octave_idx_type len = vlist.length ();
+      octave_idx_type len = vals.numel ();
 
       if (len > 1)
-        retval = Cell (vlist);
+        retval = vals;
       else if (len == 1)
-        retval = vlist(0);
+        retval = vals(0);
     }
 
   return retval;
 }
 
 static octave_value
 make_graphics_object (const std::string& go_name,
 		      const octave_value_list& args)
