# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1537818336 -7200
#      Mon Sep 24 21:45:36 2018 +0200
# Node ID bb0c5879627588ad3e7777f714ef83a766069830
# Parent  483e74e0c1c350065ca553cff675cec5a2017bf4
allow to change the encoding when editor detects decoding errors (bug #54607)

* file-editor-tab.cc (load_file): set tab contents to read only during user
  dialog on decoding errors, add button for changing encoding and reloading
  the file;
  (handle_decode_warning_answer): add dialog box for changing the encoding
  and reloading the file, reload file if desired by the user;
  (handle_current_enc_changed): save new encoding if a new encoding is
  selected in the dialogs combo box

* file-editor-tab.h: update signal for opening a file together with the
  desired encoding, new slot for selecting the encoding in a combo box

*  file-editor.cc (add_file_editor_tab): update the connection between new
   file editor tab signal for opening a file with desired encoding and the
   related slot

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1746,29 +1746,32 @@ namespace octave
     QTextCodec::ConverterState st;
     QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
     const QString text = codec->toUnicode(text_data.constData(),
                                           text_data.size(), &st);
 
     // Decoding with invalid characters?
     if (st.invalidChars > 0)
       {
+        // Set read only
+        _edit_area->setReadOnly (true);
+
         // Message box for user decision
         QString msg = tr ("There were problems reading the file\n"
                           "%1\n"
                           "with the selected encoding %2.\n\n"
                           "Modifying and saving the file might "
                           "cause data loss!")
                           .arg (file_to_load).arg (_encoding);
         QMessageBox *msg_box = new QMessageBox ();
         msg_box->setIcon (QMessageBox::Warning);
         msg_box->setText (msg);
         msg_box->setWindowTitle (tr ("Octave Editor"));
         msg_box->addButton (tr ("&Edit anyway"), QMessageBox::YesRole);
-        //msg_box->addButton (tr ("&Change encoding"), QMessageBox::AcceptRole);
+        msg_box->addButton (tr ("Chan&ge encoding"), QMessageBox::AcceptRole);
         msg_box->addButton (tr ("&Close"), QMessageBox::RejectRole);
 
         connect (msg_box, SIGNAL (buttonClicked (QAbstractButton *)),
                  this, SLOT (handle_decode_warning_answer (QAbstractButton *)));
 
         msg_box->setWindowModality (Qt::WindowModal);
         msg_box->setAttribute (Qt::WA_DeleteOnClose);
         msg_box->show ();
@@ -1807,17 +1810,70 @@ namespace octave
     return QString ();
   }
 
   void file_editor_tab::handle_decode_warning_answer (QAbstractButton *btn)
   {
     QString txt = btn->text ();
 
     if (txt == tr ("&Close"))
-      close ();
+      {
+        // Just close the file
+        close ();
+        return;
+      }
+
+    if (txt == tr ("Chan&ge encoding"))
+      {
+        // Dialog for reloading the file with another encoding
+        QDialog dlg;
+        dlg.setWindowTitle (tr ("Select new default encoding"));
+
+        QLabel *text
+          = new QLabel (tr ("Please select a new encoding\n"
+                            "for reloading the current file.\n\n"
+                            "This does not change the default encoding.\n"));
+
+        QComboBox *enc_combo = new QComboBox ();
+        resource_manager::combo_encoding (enc_combo);
+        _new_encoding = enc_combo->currentText ();
+        connect (enc_combo, SIGNAL (currentTextChanged (const QString&)),
+                 this , SLOT (handle_current_enc_changed (const QString&)));
+
+        QDialogButtonBox *buttons
+          = new QDialogButtonBox (QDialogButtonBox::Ok | QDialogButtonBox::Cancel,
+                                  Qt::Horizontal);
+        connect (buttons, SIGNAL (accepted ()), &dlg, SLOT (accept ()));
+        connect (buttons, SIGNAL (rejected ()), &dlg, SLOT (reject ()));
+
+        QGridLayout *main_layout = new QGridLayout;
+        main_layout->setSizeConstraint (QLayout::SetFixedSize);
+        main_layout->addWidget (text, 0, 0);
+        main_layout->addWidget (enc_combo, 1, 0);
+        main_layout->addWidget (buttons, 2, 0);
+        dlg.setLayout (main_layout);
+
+        int answer = dlg.exec ();
+
+        if (answer == QDialog::Accepted)
+          {
+            // Reload the file with new encoding but using the same tab
+            QString reload_file_name = _file_name;  // store file name
+            _file_name = "";  // force reuse of this tab when opening a new file
+            emit request_open_file (reload_file_name, _new_encoding);
+          }
+      }
+
+    // Continue editing, set writable again
+    _edit_area->setReadOnly (false);
+  }
+
+  void file_editor_tab::handle_current_enc_changed (const QString& enc)
+  {
+    _new_encoding = enc;
   }
 
   QsciScintilla::EolMode file_editor_tab::detect_eol_mode (void)
   {
     QByteArray text = _edit_area->text ().toLatin1 ();
 
     QByteArray eol_lf = QByteArray (1,0x0a);
     QByteArray eol_cr = QByteArray (1,0x0d);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -156,17 +156,17 @@ namespace octave
     void editor_state_changed (bool copy_available, bool is_octave_file);
     void set_focus_editor_signal (QWidget *);
     void tab_remove_request (void);
     void add_filename_to_list (const QString&, const QString&, QWidget *);
     void mru_add_file (const QString& file_name, const QString& encoding);
     void editor_check_conflict_save (const QString& saveFileName,
                                      bool remove_on_success);
     void run_file_signal (const QFileInfo& info);
-    void request_open_file (const QString&);
+    void request_open_file (const QString&, const QString& = QString ());
     void edit_mfile_request (const QString&, const QString&,
                              const QString&, int);
 
     void request_find_next (void);
     void request_find_previous (void);
 
     void remove_breakpoint_via_debugger_linenr (int debugger_linenr);
     void request_remove_breakpoint_via_editor_linenr (int editor_linenr);
@@ -210,16 +210,19 @@ namespace octave
     void handle_find_dialog_finished (int decision);
 
     // When user closes QFileDialog box.
     void handle_save_file_as_answer (const QString& fileName);
     void handle_save_file_as_answer_close (const QString& fileName);
     void handle_save_file_as_answer_cancel (void);
     void handle_save_as_filter_selected (const QString& filter);
 
+    // When user changes encoding after decoding errors where found
+    void handle_current_enc_changed (const QString& enc);
+
     // When apis preparation has finished and is ready to save
     void save_apis_info (void);
 
     // When the numer of lines changes -> adapt width of margin
     void auto_margin_width (void);
 
     void handle_cursor_moved (int line, int col);
     void handle_char_added (int character);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -2184,18 +2184,18 @@ namespace octave
              this, SLOT (check_conflict_save (const QString&, bool)));
 
     connect (f, SIGNAL (mru_add_file (const QString&, const QString&)),
              this, SLOT (handle_mru_add_file (const QString&, const QString&)));
 
     connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
              main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
-    connect (f, SIGNAL (request_open_file (const QString&)),
-             this, SLOT (request_open_file (const QString&)));
+    connect (f, SIGNAL (request_open_file (const QString&, const QString&)),
+             this, SLOT (request_open_file (const QString&, const QString&)));
 
     connect (f, SIGNAL (edit_mfile_request (const QString&, const QString&,
                                             const QString&, int)),
              main_win (), SLOT (handle_edit_mfile_request (const QString&,
                                                            const QString&,
                                                            const QString&, int)));
 
     connect (f, SIGNAL (set_focus_editor_signal (QWidget*)),
