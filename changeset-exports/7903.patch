# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1215615492 14400
#      Wed Jul 09 10:58:12 2008 -0400
# Node ID 8018e10d2b8774eead9fe90f96e714f29c67de17
# Parent  c51ae36fcbce829ad019e13b6803dc95eb4240ff
save and restore global_command as needed

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-07-09  John W. Eaton  <jwe@octave.org>
+
+	* toplev.cc (main_loop): Unwind-protect global_command.
+	* input.cc (get_debug_input): Likewise.
+
 2008-07-08  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (axes::properties::keypos): Declare as
 	any_property instead of double_property.
 
 2008-06-28  John W. Eaton  <jwe@octave.org>
 
 	* debug.cc (push_dummy_call_stack_elt): Delete.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -620,26 +620,34 @@ get_debug_input (const std::string& prom
   VPS1 = prompt;
 
   while (Vdebugging)
     {
       reset_error_handler ();
 
       reset_parser ();
 
+      // Save current value of global_command.
+      unwind_protect_ptr (global_command);
+
       // This is the same as yyparse in parse.y.
       int retval = octave_parse ();
 
-      if (retval == 0 && global_command)
-	{
-	  global_command->eval ();
+      tree_statement_list *command = global_command;
+
+      // Restore previous value of global_command.
+      unwind_protect::run ();
 
-	  delete global_command;
+      if (retval == 0 && command)
+	{
+	  command->eval ();
 
-	  global_command = 0;
+	  delete command;
+
+	  command = 0;
 
 	  OCTAVE_QUIT;
 
 	  if (octave_completion_matches_called)
 	    octave_completion_matches_called = false;	    
 	}
     }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3714,34 +3714,37 @@ eval_string (const std::string& s, bool 
 
   get_input_from_eval_string = true;
   input_from_eval_string_pending = true;
   parser_end_of_input = false;
   line_editing = false;
 
   current_eval_string = s;
 
-  unwind_protect_ptr (global_command);
-
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
   unwind_protect::add (restore_input_buffer, old_buf);
   unwind_protect::add (delete_input_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   do
     {
       reset_parser ();
 
+      unwind_protect_ptr (global_command);
+
       parse_status = yyparse ();
 
       tree_statement_list *command = global_command;
 
+      // Restore previous value of global_command.
+      unwind_protect::run ();
+
       if (parse_status == 0)
         {
 	  if (command)
 	    {
 	      retval = command->eval (silent, nargout);
 
 	      delete command;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -538,41 +538,51 @@ main_loop (void)
   octave_signal_hook = octave_signal_handler;
   octave_interrupt_hook = unwind_protect::run_all;
   octave_bad_alloc_hook = unwind_protect::run_all;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
+  unwind_protect::begin_frame ("main_loop");
+
   // The big loop.
 
   int retval = 0;
   do
     {
       try
 	{
 	  symbol_table::reset_scope ();
 
 	  reset_error_handler ();
 
 	  reset_parser ();
 
+	  // Save current value of global_command.
+	  unwind_protect_ptr (global_command);
+
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
 
+	  tree_statement_list *command = global_command;
+
+	  // Restore previous value of global_command.
+	  unwind_protect::run ();
+
 	  if (retval == 0)
 	    {
-	      if (global_command)
+	      if (command)
 		{
-		  global_command->eval ();
+		  command->eval ();
 
-		  delete global_command;
+		  delete command;
 
-		  global_command = 0;
+		  command = 0;
 
 		  OCTAVE_QUIT;
 
 		  if (! (interactive || forced_interactive))
 		    {
 		      bool quit = (tree_return_command::returning
 				   || tree_break_command::breaking);
 
@@ -617,16 +627,18 @@ main_loop (void)
 	  recover_from_exception ();
 	  std::cerr
 	    << "error: memory exhausted or requested size too large for range of Octave's index type -- trying to return to prompt"
 	    << std::endl;
 	}
     }
   while (retval == 0);
 
+  unwind_protect::run_frame ("main_loop");
+
   return retval;
 }
 
 // Fix up things before exiting.
 
 void
 clean_up_and_exit (int retval)
 {
