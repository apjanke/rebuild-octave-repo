# HG changeset patch
# User Benjamin Lindner <lindnerb@users.sourceforge.net>
# Date 1234936532 18000
#      Wed Feb 18 00:55:32 2009 -0500
# Node ID bbb3fa6778f365e6d4794a2cb49f259e0b2c210b
# Parent  d943e26d30e2c27eaeb7a79b1583d03a03e08ce4
use mkstemps as replacement for mkstemp on mingw32

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-17  Benjamin Lindner  <lindnerb@users.sourceforge.net>
+
+	* configure.in: Check for mkstemps on MinGW platform
+	(HAVE_MKSTEMPS): Define if mkstsmps is avilable in libiberty.
+
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: Mention cummin and cummax
 
 2009-02-17  John W. Eaton  <jwe@octave.org>
 
 	* aclocal.m4 (OCTAVE_PROG_GPERF): Don't run gperf.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -1575,16 +1575,38 @@ AC_CHECK_FUNCS(atexit basename bcopy bze
   realpath rename resolvepath rindex rmdir round roundl select setgrent setlocale \
   setpwent setvbuf sigaction siglongjmp sigpending sigprocmask sigsuspend \
   snprintf stat strcasecmp strdup strerror stricmp strncasecmp \
   strnicmp strptime strsignal symlink tempnam tgamma tgammaf trunc umask \
   uname unlink usleep utime vfprintf vsprintf vsnprintf waitpid \
   _chmod _snprintf x_utime _utime32)
 
 case "$canonical_host_type" in
+  *-*-mingw*)
+    ## MinGW does not provide a mkstemp function.  However, it provides
+    ## the mkstemps function in libiberty.
+    AC_MSG_CHECKING(for mkstemps in libiberty)
+    save_LIBS="$LIBS"
+    LIBS="-liberty $LIBS"
+    AC_LINK_IFELSE([
+      AC_LANG_PROGRAM([[int mkstemps (char *pattern, int suffix_len);]], 
+       [[mkstemps ("XXXXXX", 0);]]
+    )],
+    [AC_MSG_RESULT(yes)
+     HAVE_MKSTEMPS=yes
+     AC_DEFINE(HAVE_MKSTEMPS, 1, [Define if mkstemps is available in libiberty.])
+    ],
+    [AC_MSG_RESULT(no)
+     HAVE_MKSTEMPS=no
+     LIBS="$save_LIBS"
+    ])
+   ;;
+esac
+
+case "$canonical_host_type" in
   *-*-msdosmsvc)
     ## The %T format specifier for strftime is reportedly broken,
     ## so use our version.  We could use an actual configure test
     ## for this.
   ;;
   *)
     AC_CHECK_FUNCS(strftime)
   ;;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-17  Benjamin Lindner  <lindnerb@users.sourceforge.net>
+
+	* file-io.cc: (Fmkstemp): Use mkstemps if it is available and
+	mkstemp is missing.
+
 2009-02-17  Olaf Till  <olaf.till@uni-jena.de>
 
 	* DLD-FUNCTIONS/lsode.cc, DLD-FUNCTIONS/daspk.cc, 
 	DLD-FUNCTIONS/dassl.cc, DLD-FUNCTIONS/dasrt.cc: Documentation fixes.
 
 2009-02-17  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/convhulln.cc (Fconvhulln): Compute convex hull
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1902,16 +1902,21 @@ system-dependent error message.\n\
 	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
+#if defined (HAVE_MKSTEMPS)
+// Prototype for mkstemps in libiberty
+extern "C" int mkstemps (char *pattern, int suffix_len);
+#endif
+
 DEFUN (mkstemp, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (@var{template}, @var{delete})\n\
 Return the file ID corresponding to a new temporary file with a unique\n\
 name created from @var{template}.  The last six characters of @var{template}\n\
 must be @code{XXXXXX} and these are replaced with a string that makes the\n\
 filename unique.  The file is then created with mode read/write and\n\
 permissions that are system dependent (on GNU/Linux systems, the permissions\n\
@@ -1930,30 +1935,34 @@ error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = -1;
 
-#if defined (HAVE_MKSTEMP)
+#if defined (HAVE_MKSTEMP) || defined (HAVE_MKSTEMPS)
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       std::string tmpl8 = args(0).string_value ();
 
       if (! error_state)
 	{
 	  OCTAVE_LOCAL_BUFFER (char, tmp, tmpl8.size () + 1);
 	  strcpy (tmp, tmpl8.c_str ());
 
+#if defined (HAVE_MKSTEMP)
 	  int fd = mkstemp (tmp);
+#else
+	  int fd = mkstemps (tmp, 0);
+#endif
 
 	  if (fd < 0)
 	    {
 	      using namespace std;
 	      retval(2) = ::strerror (errno);
 	      retval(0) = fd;
 	    }
 	  else
