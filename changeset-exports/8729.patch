# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1234427433 -3600
#      Thu Feb 12 09:30:33 2009 +0100
# Node ID d65a0a1780b68859d6902d316c779d06c90681dd
# Parent  e6a65a8605bc389afd2aef31ab4a192837db293e
Simplify documentation cache generation to only handle one directory per call to 'gen_doc_cache'

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-12  Soren Hauberg  <hauberg@gmail.com>
+
+	* help/gen_doc_cache.m: Change API so we only handle one directory per
+        call to this function.
+
 2009-02-12  Soren Hauberg  <hauberg@gmail.com>
 
 	* help/lookfor.m: Adapt to new cache scheme.
 
 2009-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/sortrows.m: Employ __sortrows_idx__ when applicable,
 	gripe for sparse matrices.
diff --git a/scripts/help/gen_doc_cache.m b/scripts/help/gen_doc_cache.m
--- a/scripts/help/gen_doc_cache.m
+++ b/scripts/help/gen_doc_cache.m
@@ -10,47 +10,46 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} gen_doc_cache ()
-## @deftypefnx{Function File} gen_doc_cache (@var{directory})
+## @deftypefn {Function File} gen_doc_cache (@var{out_file}, @var{directory})
 ## Generate documentation caches for all functions in a given directory.
 ##
 ## A documentation cache is generated for all functions in @var{directory}. The
-## resulting cache is saved in the file @code{help_cache.mat} in @var{directory}.
+## resulting cache is saved in the file @var{out_file}.
 ## The cache is used to speed up @code{lookfor}.
-## If no directory is given, all directories in the current path is traversed.
+##
+## If no directory is given (or it is the empty matrix), a cache for builtin
+## operators, etc. is generated.
 ##
 ## @seealso{lookfor, path}
 ## @end deftypefn
 
-function gen_doc_cache (p = path ())
-  if (!ischar (p))
+function gen_doc_cache (out_file = "DOC.gz", directory = [])
+  ## Check input
+  if (!ischar (out_file))
     print_usage ();
   endif
   
-  ## Generate caches for all directories in path
-  idx = find (p == pathsep ());
-  prev_idx = 1;
-  for n = 1:length (idx)
-    f = p (prev_idx:idx (n)-1);
-    gen_doc_cache_in_dir (f);
-    prev_idx = idx (n) + 1;
-  endfor
-    
-  ## Generate cache for keywords, operators, and builtins if we're handling the
-  ## entire path
-  if (nargin == 0)
-    gen_builtin_cache ();
+  ## Generate cache
+  if (isempty (directory))
+    cache = gen_builtin_cache ();
+  elseif (ischar (directory))
+    cache = gen_doc_cache_in_dir (directory);
+  else
+    error ("gen_doc_cache: second input argument must be a string");
   endif
+  
+  ## Save cache
+  save ("-text", "-z", out_file, "cache");
 endfunction
 
 function [text, first_sentence, status] = handle_function (f, text, format)
   first_sentence = "";
   ## Skip functions that start with __ as these shouldn't be searched by lookfor
   if (length (f) > 2 && all (f (1:2) == "_"))
     status = 1;
     return;
@@ -97,17 +96,17 @@ function cache = create_cache (list)
     
     ## Store the help text
     cache (1, end+1) = f;
     cache (2, end) = text;
     cache (3, end) = first_sentence;
   endfor
 endfunction
 
-function gen_doc_cache_in_dir (directory)
+function cache = gen_doc_cache_in_dir (directory)
   ## If 'directory' is not in the current path, add it so we search it
   dir_in_path = false;
   p = path ();
   idx = find (p == pathsep ());
   prev_idx = 1;
   for n = 1:length (idx)
     f = p (prev_idx:idx (n)-1);
     if (strcmp (f, directory))
@@ -120,32 +119,22 @@ function gen_doc_cache_in_dir (directory
   if (!dir_in_path)
     addpath (directory);
   endif
 
   ## Get list of functions in directory and create cache
   list = __list_functions__ (directory);
   cache = create_cache (list);
   
-  ## Write the cache
-  fn = fullfile (directory, "help_cache.mat");
-  save ("-binary", fn, "cache"); # FIXME: Should we zip it ?
-  
   if (!dir_in_path)
     rmpath (directory);
   endif
 endfunction
 
-function gen_builtin_cache ()
+function cache = gen_builtin_cache ()
   operators = __operators__ ();
   keywords = __keywords__ ();
   builtins = __builtins__ ();
   list = {operators{:}, keywords{:}, builtins{:}};
 
   cache = create_cache (list);
-  
-  ## Write the cache
-  ## FIXME: Where should we store this cache?
-  ## FIXME: if we change it -- update 'lookfor'
-  fn = fullfile (octave_config_info.datadir, "builtin_cache.mat"); 
-  save ("-binary", fn, "cache"); # FIXME: Should we zip it ?
 endfunction
 
