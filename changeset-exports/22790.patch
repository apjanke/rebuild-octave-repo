# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479427423 28800
#      Thu Nov 17 16:03:43 2016 -0800
# Node ID f403ad463aa4cb0d19cba1115ea7a02072002a30
# Parent  b25e41637412baa2e27da88f15f2f0c364df6058
isonormals.m: Overhaul function

* isonormals.m: Rewrite docstring.  Use 'vn' for output, rather than
varargout, for clarity.  Rename 'na' to 'narg' (number of input args) for
clarity.  Don't print an error if more than one output is requested.
Add more tests for input validation including for private function
__interp_cube__.

* isocolors.m: Remove example code from docstring and make it a %!demo.
Use ishghandle to more quickly check for a patch object in input validation.
Add one more input validation BIST test.

diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -46,58 +46,16 @@
 ## Optionally, a patch handle @var{p} can be given as the last input argument
 ## to all function call variations and the vertex data will be extracted
 ## from the isosurface patch object.  Finally, if no output argument is given
 ## then the colors of the patch given by the patch handle @var{p} are changed.
 ##
 ## For example:
 ##
 ## @example
-## function isofinish (p)
-##   set (gca, "PlotBoxAspectRatioMode", "manual", ...
-##             "PlotBoxAspectRatio", [1 1 1]);
-##   set (p, "FaceColor", "interp");
-##   ## set (p, "FaceLighting", "flat");
-##   ## light ("Position", [1 1 5]);  # Available with JHandles
-## endfunction
-##
-## N = 15;    # Increase number of vertices in each direction
-## iso = .4;  # Change isovalue to .1 to display a sphere
-## lin = linspace (0, 2, N);
-## [x, y, z] = meshgrid (lin, lin, lin);
-## c = abs ((x-.5).^2 + (y-.5).^2 + (z-.5).^2);
-## figure (); # Open another figure window
-##
-## subplot (2,2,1);  view (-38, 20);
-## [f, v] = isosurface (x, y, z, c, iso);
-## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
-## cdat = rand (size (c));       # Compute random patch color data
-## isocolors (x, y, z, cdat, p); # Directly set colors of patch
-## isofinish (p);                # Call user function isofinish
-##
-## subplot (2,2,2);  view (-38, 20);
-## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
-## [r, g, b] = meshgrid (lin, 2-lin, 2-lin);
-## cdat = isocolors (x, y, z, c, v); # Compute color data vertices
-## set (p, "FaceVertexCData", cdat); # Set color data manually
-## isofinish (p);
-##
-## subplot (2,2,3);  view (-38, 20);
-## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
-## cdat = isocolors (r, g, b, c, p); # Compute color data patch
-## set (p, "FaceVertexCData", cdat); # Set color data manually
-## isofinish (p);
-##
-## subplot (2,2,4);  view (-38, 20);
-## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
-## r = g = b = repmat ([1:N] / N, [N, 1, N]); # Black to white
-## cdat = isocolors (x, y, z, r, g, b, v);
-## set (p, "FaceVertexCData", cdat);
-## isofinish (p);
-## @end example
 ##
 ## @seealso{isosurface, isonormals}
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
 function cdat = isocolors (varargin)
 
@@ -135,17 +93,17 @@ function cdat = isocolors (varargin)
       vp = varargin{7};
     otherwise
       print_usage ();
   endswitch
 
   if (isnumeric (vp) && columns (vp) == 3)
     pa = [];
     v = vp;
-  elseif (ishandle (vp) && strcmp (get (vp, "type"), "patch"))
+  elseif (ishghandle (vp, "patch"))
     pa = vp;
     v = get (pa, "Vertices");
   else
     error ("isocolors: last argument must be a vertex list or patch handle");
   endif
 
   if (calc_rgb)
     new_colors = zeros (rows (v), 3);
@@ -162,24 +120,76 @@ function cdat = isocolors (varargin)
     endif
   else
     cdat = new_colors;
   endif
 
 endfunction
 
 
+%!demo
+%! function isofinish (p)
+%!   set (gca, "PlotBoxAspectRatioMode", "manual", ...
+%!             "PlotBoxAspectRatio", [1 1 1]);
+%!   set (p, "FaceColor", "interp");
+%!   set (p, "FaceLighting", "flat");
+%!   light ("Position", [1 1 5]);
+%! endfunction
+%!
+%! N = 15;    # Increase number of vertices in each direction
+%! iso = .4;  # Change isovalue to .1 to display a sphere
+%! lin = linspace (0, 2, N);
+%! [x, y, z] = meshgrid (lin, lin, lin);
+%! c = abs ((x-.5).^2 + (y-.5).^2 + (z-.5).^2);
+%! figure (); # Open another figure window
+%!
+%! subplot (2,2,1);
+%!  view (-38, 20);
+%!  [f, v] = isosurface (x, y, z, c, iso);
+%!  p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
+%!  cdat = rand (size (c));       # Compute random color data
+%!  isocolors (x, y, z, cdat, p); # Directly set colors of patch
+%!  title ("random colors for patch handle");
+%!  isofinish (p);
+%!
+%! subplot (2,2,2);
+%!  view (-38, 20);
+%!  p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
+%!  [r, g, b] = meshgrid (lin, 2-lin, 2-lin);
+%!  cdat = isocolors (x, y, z, c, v); # Compute color data vertices
+%!  set (p, "FaceVertexCData", cdat); # Set color data manually
+%!  title ('random colors for "FaceVertexCData"');
+%!  isofinish (p);
+%!
+%! subplot (2,2,3);
+%!  view (-38, 20);
+%!  p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
+%!  cdat = isocolors (r, g, b, c, p); # Compute color data for patch
+%!  set (p, "FaceVertexCData", cdat); # Set color data manually
+%!  title ('random RGB colors for "FaceVertexCData"');
+%!  isofinish (p);
+%!
+%! subplot (2,2,4);
+%!  view (-38, 20);
+%!  p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
+%!  r = g = b = repmat ([1:N] / N, [N, 1, N]); # Black to white
+%!  cdat = isocolors (x, y, z, r, g, b, v);
+%!  set (p, "FaceVertexCData", cdat);
+%!  title ('gray shades for "FaceVertexCData"');
+%!  isofinish (p);
+
 %!test
 %! [x, y, z] = meshgrid (0:.5:2, 0:.5:2, 0:.5:2);
 %! c = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 %! [f, v] = isosurface (x, y, z, c, .4);
 %! cdat = isocolors (x, y, z, c, v);
 %! assert (rows (cdat) == rows (v));
 
 ## Test input validation
 %!error isocolors ()
 %!error isocolors (1)
 %!error isocolors (1,2,3)
 %!error isocolors (1,2,3,4,5,6)
 %!error isocolors (1,2,3,4,5,6,7,8)
 %!error <last argument must be a vertex list> isocolors (1, {1})
+%!error <last argument must be a vertex list> isocolors (1, [1 2 3 4])
 %!error <last argument must be a .*patch handle> isocolors (1, 0)
 
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -12,69 +12,69 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {[@var{vn}] =} isonormals (@var{val}, @var{vert})
-## @deftypefnx {} {[@var{vn}] =} isonormals (@var{val}, @var{hp})
-## @deftypefnx {} {[@var{vn}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{vert})
-## @deftypefnx {} {[@var{vn}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{hp})
-## @deftypefnx {} {[@var{vn}] =} isonormals (@dots{}, "negate")
+## @deftypefn  {} {@var{vn} =} isonormals (@var{val}, @var{vert})
+## @deftypefnx {} {@var{vn} =} isonormals (@var{val}, @var{hp})
+## @deftypefnx {} {@var{vn} =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{vert})
+## @deftypefnx {} {@var{vn} =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{hp})
+## @deftypefnx {} {@var{vn} =} isonormals (@dots{}, "negate")
 ## @deftypefnx {} {} isonormals (@var{val}, @var{hp})
 ## @deftypefnx {} {} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{hp})
 ## @deftypefnx {} {} isonormals (@dots{}, "negate")
 ##
 ## Calculate normals to an isosurface.
 ##
 ## The vertex normals @var{vn} are calculated from the gradient of the
-## 3-dimensional array @var{val} (size: lxmxn) with the data for an
-## isosurface geometry.  The normals point towards lower values in @var{val}.
+## 3-dimensional array @var{val} (size: lxmxn) containing the data for an
+## isosurface geometry.  The normals point towards smaller values in @var{val}.
 ##
-## If called with one output argument @var{vn} and the second input argument
-## @var{vert} holds the vertices of an isosurface, the normals @var{vn} are
-## calculated at the vertices @var{vert} on a grid given by
+## If called with one output argument @var{vn}, and the second input argument
+## @var{vert} holds the vertices of an isosurface, then the normals @var{vn}
+## are calculated at the vertices @var{vert} on a grid given by
 ## @code{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{vn} has the same size as @var{vert} and can be used to set the
 ## @qcode{"VertexNormals"} property of the corresponding patch.
 ##
-## If called with further input arguments @var{x}, @var{y}, and @var{z}
+## If called with additional input arguments @var{x}, @var{y}, and @var{z},
 ## which are 3-dimensional arrays with the same size as @var{val},
-## the volume data is taken at these points.  Instead of the vertex data
-## @var{vert}, a patch handle @var{hp} can be passed to this function.
+## then the volume data is taken at these points.  Instead of the vertex data
+## @var{vert}, a patch handle @var{hp} can be passed to the function.
 ##
 ## If the last input argument is the string @qcode{"negate"}, compute the
 ## reverse vector normals of an isosurface geometry (i.e., pointed towards
-## higher values in @var{val}).
+## larger values in @var{val}).
 ##
 ## If no output argument is given, the property @qcode{"VertexNormals"} of
 ## the patch associated with the patch handle @var{hp} is changed directly.
 ##
 ## @seealso{isosurface, isocolors, smooth3}
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
-function varargout = isonormals (varargin)
+function vn = isonormals (varargin)
 
-  na = nargin;
+  narg = nargin;
   negate = false;
-  if (ischar (varargin{na}))
-    if (strcmpi (varargin{na}, "negate"))
+  if (ischar (varargin{narg}))
+    if (strcmpi (varargin{narg}, "negate"))
       negate = true;
+      narg -= 1;
     else
-      error ("isonormals: Unknown option '%s'", varargin{nargin});
+      error ("isonormals: Unknown option '%s'", varargin{narg});
     endif
-    na = nargin-1;
   endif
 
-  switch (na)
+  switch (narg)
     case 2
       val = varargin{1};
       vp = varargin{2};
       x = 1:size (val, 2);
       y = 1:size (val, 1);
       z = 1:size (val, 3);
 
     case 5
@@ -100,29 +100,23 @@ function varargout = isonormals (varargi
   endif
 
   if (negate)
     normals = __interp_cube__ ("isonormals", x, y, z, val, v, "normals");
   else
     normals = -__interp_cube__ ("isonormals", x, y, z, val, v, "normals");
   endif
 
-  switch (nargout)
-    case 0
-      if (! isempty (pa))
-        set (pa, "VertexNormals", normals);
-      endif
-
-    case 1
-      varargout = {normals};
-
-    otherwise
-      print_usage ();
-
-  endswitch
+  if (nargout == 0)
+    if (! isempty (pa))
+      set (pa, "VertexNormals", normals);
+    endif
+  else
+    vn = normals;
+  endif
 
 endfunction
 
 
 %!demo
 %! function isofinish (hp)
 %!   axis equal;
 %!   set (hp, "VertexNormals", -get (hp, "VertexNormals"));  # Revert normals
@@ -132,17 +126,17 @@ endfunction
 %!   light ();
 %! endfunction
 %!
 %! N = 15;    # Increase number of vertices in each direction
 %! iso = .4;  # Change isovalue to .1 to display a sphere
 %! lin = linspace (0, 2, N);
 %! [x, y, z] = meshgrid (lin, lin, lin);
 %! val = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
-%! clf;
+%! figure (); # Open another figure window
 %!
 %! subplot (2,2,1);
 %!  view (-38, 20);
 %!  [fac, vert, cdat] = isosurface (x, y, z, val, iso, y);
 %!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %!  title ("without isonormals");
 %!  isofinish (hp);
 %!  set (hp, "VertexNormalsMode", "auto");  # for Matlab compatibility
@@ -186,12 +180,26 @@ endfunction
 %!test
 %! [x,y,z] = meshgrid (-2:1:2, -2:1:2, -2:1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! [f,vert] = isosurface (x, y, z, val, 1);
 %! vn = isonormals (x, y, z, val, vert);
 %! dirn = vert ./ vn;
 %! assert (all (dirn(isfinite (dirn)) <= 0));
 
-%!error <Unknown option 'foo'> n = isonormals (x, y, z, val, vert, "foo")
-%!error <input must be a list of vertices or a patch handle>
-%! n = isonormals (x, y, z, val, x);
+## Test input validation
+%!error isonormals ()
+%!error isonormals (1)
+%!error isonormals (1,2,3)
+%!error isonormals (1,2,3,4)
+%!error isonormals (1,2,3,4,5,6)
+%!error <Unknown option 'foo'> isonormals (x, y, z, val, vert, "foo")
+%!error <must be a list of vertices> isonormals (1, {1})
+%!error <must be a list of vertices> isonormals (1, [1 2 3 4])
+%!error <must be a .* patch handle> isonormals (x, y, z, val, x)
+## Test validation of private function __interp_cube__ 
+%!error <X, Y, Z have unequal dimensions> isonormals ({x}, y, z, val, vert)
+%!error <X, Y, Z have unequal dimensions> isonormals (x, {y}, z, val, vert)
+%!error <X, Y, Z have unequal dimensions> isonormals (x, y, {z}, val, vert)
+%!error <X, Y, Z have unequal dimensions> isonormals (x, y, z(1), val, vert)
+%!error <X, Y, Z have unequal dimensions> isonormals (x(:), y(:), z, val, vert)
+%!error <VAL dimensions must match those of X, Y, and Z> isonormals (1, 2, 3, val, vert)
 
