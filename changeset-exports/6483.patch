# HG changeset patch
# User jwe
# Date 1175655528 0
#      Wed Apr 04 02:58:48 2007 +0000
# Node ID d00da2148c53ed22c8de5a468e100ff36eae038c
# Parent  7e958a1532c6880f2f6bd18fbf4759e8d95453a8
[project @ 2007-04-04 02:58:48 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,17 +1,17 @@
 2007-04-03  John W. Eaton  <jwe@octave.org>
 
 	* intNDArray.cc (intNDArray): Delete spurious semicolon.
 
 	* CMatrix.cc (ComplexMatrix::tinverse): Use Array<T> and
 	fortran_vec method instead of OCTAVE_LOCAL_BUFFER to avoid
 	"maybe clobbered by vfork" warning.
 
-	* Sparse-op-defs.h (SPARSE_CUMSUM): Add parens to avoid ambiguous
+	* Sparse-op-defs.h (SPARSE_CUMSUM): Add braces to avoid ambiguous
 	if/else.
 
 	* oct-spparms.h (octave_sparse_params): Define copy constructor
 	and destructor.
 
 	* Array.cc (assignN): Don't resize dimension if corresponding
 	index is empty.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2007-04-03  John W. Eaton  <jwe@octave.org>
 
+	* error.cc (Frethrow): Add braces to avoid ambiguous if/else.
+	* oct-stream.cc (octave_scan<>): Likewise.
+
 	* ov-fcn-handle.cc (make_fcn_handle): Pass ultimate parent
 	function name to lookup_function.
 
 2007-03-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/filter.cc (filter): Fix typo in doc string.
 	From Utkarsh Upadhyay <musically.ut@gmail.com>.
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -835,106 +835,117 @@ location of the error. Typically @var{er
 {
   octave_value retval;
   int nargin = args.length();
 
   if (nargin != 1)
     print_usage();
   else
     {
-      Octave_map err = args(0).map_value();
+      Octave_map err = args(0).map_value ();
 
-      if (!error_state)
+      if (! error_state)
 	{
-	  if (err.contains("message") && err.contains("identifier"))
+	  if (err.contains ("message") && err.contains ("identifier"))
 	    {
-	      std::string msg = err.contents("message")(0).string_value();
-	      std::string id = err.contents("identifier")(0).string_value();
+	      std::string msg = err.contents("message")(0).string_value ();
+	      std::string id = err.contents("identifier")(0).string_value ();
 	      int len = msg.length();
 	      std::string file;
 	      std::string nm;
 	      int l = -1;
 	      int c = -1;
 
-	      if (err.contains("stack"))
+	      if (err.contains ("stack"))
 		{
-		  Octave_map err_stack = err.contents("stack")(0).map_value();
+		  Octave_map err_stack = err.contents("stack")(0).map_value ();
+
+		  if (err_stack.contains ("file"))
+		    file = err_stack.contents("file")(0).string_value ();
 
-		  if (err_stack.contains("file"))
-		    file = err_stack.contents("file")(0).string_value();
-		  if (err_stack.contains("name"))
-		    nm = err_stack.contents("name")(0).string_value();
-		  if (err_stack.contains("line"))
-		    l = err_stack.contents("line")(0).nint_value();
-		  if (err_stack.contains("column"))
-		    c = err_stack.contents("column")(0).nint_value();
+		  if (err_stack.contains ("name"))
+		    nm = err_stack.contents("name")(0).string_value ();
+
+		  if (err_stack.contains ("line"))
+		    l = err_stack.contents("line")(0).nint_value ();
+
+		  if (err_stack.contains ("column"))
+		    c = err_stack.contents("column")(0).nint_value ();
 		}
 
 	      // Ugh.
-	      char *tmp_msg = strsave (msg.c_str());
+	      char *tmp_msg = strsave (msg.c_str ());
 	      if (tmp_msg[len-1] == '\n')
 		{
 		  if (len > 1)
 		    {
 		      tmp_msg[len - 1] = '\0';
-		      rethrow_error (id.c_str(), "%s\n", tmp_msg);
+		      rethrow_error (id.c_str (), "%s\n", tmp_msg);
 		    }
 		}
 	      else
-		rethrow_error (id.c_str(), "%s", tmp_msg);
+		rethrow_error (id.c_str (), "%s", tmp_msg);
 	      delete [] tmp_msg;
 
 	      // FIXME: Need to restore the stack as rethrow_error sets it?
 	      Vlast_error_file = file;
 	      Vlast_error_name = nm;
 	      Vlast_error_line = l;
 	      Vlast_error_column = c;
 
-	      if (err.contains("stack"))
+	      if (err.contains ("stack"))
 		{
 		  if (file.empty ())
 		    {
 		      if (nm.empty ())
 			{
 			  if (l > 0)
-			    if (c > 0)
-			      pr_where_1 ("error: near line %d, column %d", 
-					  l, c);
-			    else
-			      pr_where_1 ("error: near line %d", l );
+			    {
+			      if (c > 0)
+				pr_where_1 ("error: near line %d, column %d", 
+					    l, c);
+			      else
+				pr_where_1 ("error: near line %d", l);
+			    }
 			}
 		      else
 			{
 			  if (l > 0)
-			    if (c > 0)
-			      pr_where_1 ("error: called from `%s' near line %d, column %d", 
-					  nm.c_str(), l, c);
-			    else
-			      pr_where_1 ("error: called from `%d' near line %d", nm.c_str(), l );
+			    {
+			      if (c > 0)
+				pr_where_1 ("error: called from `%s' near line %d, column %d", 
+					    nm.c_str (), l, c);
+			      else
+				pr_where_1 ("error: called from `%d' near line %d", nm.c_str (), l);
+			    }
 			}
 		    }
 		  else
 		    {
 		      if (nm.empty ())
 			{
 			  if (l > 0)
-			    if (c > 0)
-			      pr_where_1 ("error: in file %s near line %d, column %d", 
-					  file.c_str(), l, c);
-			    else
-			      pr_where_1 ("error: in file %s near line %d", file.c_str(), l );
+			    {
+			      if (c > 0)
+				pr_where_1 ("error: in file %s near line %d, column %d", 
+					    file.c_str (), l, c);
+			      else
+				pr_where_1 ("error: in file %s near line %d", file.c_str (), l);
+			    }
 			}
 		      else
 			{
 			  if (l > 0)
-			    if (c > 0)
-			      pr_where_1 ("error: called from `%s' in file %s near line %d, column %d", 
-					  nm.c_str(), file.c_str(), l, c);
-			    else
-			      pr_where_1 ("error: called from `%d' in file %s near line %d", nm.c_str(), file.c_str(), l );
+			    {
+			      if (c > 0)
+				pr_where_1 ("error: called from `%s' in file %s near line %d, column %d", 
+					    nm.c_str (), file.c_str (), l, c);
+			      else
+				pr_where_1 ("error: called from `%d' in file %s near line %d", nm.c_str (), file.c_str (), l);
+			    }
 			}
 		    }
 		}
 	    }
 	  else
 	    error ("rethrow: structure must contain the fields 'message and 'identifier'");
 	}
     }
@@ -1402,82 +1413,82 @@ their default values.\n\
 	  err.assign ("stack", octave_value (Octave_map (dim_vector (0,1), 
 							 sv)));
 	}
 
       if (nargin == 1)
 	{
 	  if (args(0).is_string())
 	    {
-	      if (args(0).string_value() == "reset")
+	      if (args(0).string_value () == "reset")
 		{
 		  Vlast_error_message = std::string();
 		  Vlast_error_id = std::string();
 		  Vlast_error_file = std::string();
 		  Vlast_error_name = std::string();
 		  Vlast_error_line = -1;
 		  Vlast_error_column = -1;
 		}
 	      else
 		error("lasterror: unrecognized string argument");
 	    }
 	  else if (args(0).is_map ())
 	    {
-	      Octave_map new_err = args(0).map_value();
+	      Octave_map new_err = args(0).map_value ();
 	      std::string new_error_message;
 	      std::string new_error_id;
 	      std::string new_error_file;
 	      std::string new_error_name;
 	      int new_error_line = -1;
 	      int new_error_column = -1;
 
-	      if (!error_state && new_err.contains("message"))
+	      if (! error_state && new_err.contains ("message"))
 		{
 		  const std::string tmp = 
-		    new_err.contents("message")(0).string_value();
+		    new_err.contents("message")(0).string_value ();
 		  new_error_message = tmp;
 		}
 
-	      if (!error_state && new_err.contains("identifier"))
+	      if (! error_state && new_err.contains ("identifier"))
 		{
 		  const std::string tmp = 
-		    new_err.contents("identifier")(0).string_value();
+		    new_err.contents("identifier")(0).string_value ();
 		  new_error_id = tmp;
 		}
 
-	      if (!error_state && new_err.contains("stack"))
+	      if (! error_state && new_err.contains ("stack"))
 		{
 		  Octave_map new_err_stack = 
-		    new_err.contents("identifier")(0).map_value();
+		    new_err.contents("identifier")(0).map_value ();
 
-		  if (!error_state && new_err_stack.contains("file"))
+		  if (! error_state && new_err_stack.contains ("file"))
 		    {
 		      const std::string tmp = 
-			new_err_stack.contents("file")(0).string_value();
+			new_err_stack.contents("file")(0).string_value ();
 		      new_error_file = tmp;
 		    }
 
-		  if (!error_state && new_err_stack.contains("name"))
+		  if (! error_state && new_err_stack.contains ("name"))
 		    {
 		      const std::string tmp = 
-			new_err_stack.contents("name")(0).string_value();
+			new_err_stack.contents("name")(0).string_value ();
 		      new_error_name = tmp;
 		    }
 
-		  if (!error_state && new_err_stack.contains("line"))
+		  if (! error_state && new_err_stack.contains ("line"))
 		    {
 		      const int tmp = 
-			new_err_stack.contents("line")(0).nint_value();
+			new_err_stack.contents("line")(0).nint_value ();
 		      new_error_line = tmp;
 		    }
 		  
-		  if (!error_state && new_err_stack.contains("column"))
+		  if (! error_state && new_err_stack.contains ("column"))
 		    {
 		      const int tmp = 
-			new_err_stack.contents("column")(0).nint_value();
+			new_err_stack.contents("column")(0).nint_value ();
 		      new_error_column = tmp;
 		    }
 		}
 
 	      if (! error_state)
 		{
 		  Vlast_error_message = new_error_message;
 		  Vlast_error_id = new_error_id;
@@ -1486,17 +1497,17 @@ their default values.\n\
 		  Vlast_error_line = new_error_line;
 		  Vlast_error_column = new_error_column;
 		}
 	    }
 	  else
 	    error ("lasterror: argument must be a structure or a string");
 	}
 
-      if (!error_state)
+      if (! error_state)
 	retval = err;
     }
   else
     print_usage ();
 
   return retval;  
 }
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -2023,17 +2023,17 @@ interpreted as an octal number); otherwi
 
   if (status >= 0)
     retval(0) = status;
 
   return retval;
 }
 
 static octave_value
-const_value (const char *nm, const octave_value_list& args, int val)
+const_value (const char *, const octave_value_list& args, int val)
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = val;
   else
@@ -2104,17 +2104,17 @@ DEFUNX ("SEEK_END", FSEEK_END, args, ,
 @deftypefn {Built-in Function} {} SEEK_END ()\n\
 See SEEK_SET.\n\
 @end deftypefn")
 {
   return const_value ("SEEK_END", args, 1);
 }
 
 static octave_value
-const_value (const char *nm, const octave_value_list& args,
+const_value (const char *, const octave_value_list& args,
 	     const octave_value& val)
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = val;
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1251,58 +1251,59 @@ octave_scan<> (std::istream& is, const s
 
 		if (c2 != EOF)
 		  {
 		    if (c2 == 'n')
 		      {
 			int c3 = is.get ();
 
 			if (c3 != EOF)
-
-			  if (c3 == 'f')
-			    {
-			      int c4 = is.get ();
-
-			      if (c4 != EOF)
-				{
-				  is.putback (c4);
-
-				  if (isspace (c4) || ispunct (c4))
+			  {
+			    if (c3 == 'f')
+			      {
+				int c4 = is.get ();
+
+				if (c4 != EOF)
+				  {
+				    is.putback (c4);
+
+				    if (isspace (c4) || ispunct (c4))
+				      ref = octave_Inf;
+				    else
+				      {
+					is.putback (c3);
+					is.putback (c2);
+					is.putback (c1);
+
+					is >> ref;
+				      }
+				  }
+				else
+				  {
+				    is.clear ();
+
 				    ref = octave_Inf;
-				  else
-				    {
-				      is.putback (c3);
-				      is.putback (c2);
-				      is.putback (c1);
-
-				      is >> ref;
-				    }
-				}
-			      else
-				{
-				  is.clear ();
-
-				  ref = octave_Inf;
-				}
-			    }
-			  else
-			    {
-			      is.putback (c3);
-			      is.putback (c2);
-			      is.putback (c1);
-
-			      is >> ref;
-			    }
-		      }
-		    else
-		      {
-			is.putback (c2);
-			is.putback (c1);
-
-			is >> ref;
+				  }
+			      }
+			    else
+			      {
+				is.putback (c3);
+				is.putback (c2);
+				is.putback (c1);
+
+				is >> ref;
+			      }
+			}
+		      else
+			{
+			  is.putback (c2);
+			  is.putback (c1);
+
+			  is >> ref;
+			}
 		      }
 		  }
 	      }
 	    else
 	      {
 		is.putback (c1);
 
 		is >> ref;
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -301,20 +301,20 @@ tree_simple_assignment::accept (tree_wal
 
 tree_multi_assignment::tree_multi_assignment
   (tree_argument_list *lst, tree_expression *r,
    bool plhs, int l, int c, octave_value::assign_op t)
     : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs), etype (t)
 {
   for (tree_argument_list::iterator p = lhs->begin (); p != lhs->end (); p++)
     {
-      tree_expression *lhs = *p;
+      tree_expression *lhs_expr = *p;
 
-      if (lhs)
-	maybe_warn_former_built_in_variable (lhs->name ());
+      if (lhs_expr)
+	maybe_warn_former_built_in_variable (lhs_expr->name ());
     }
 }
 
 tree_multi_assignment::~tree_multi_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
