# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543969090 28800
#      Tue Dec 04 16:18:10 2018 -0800
# Node ID 0a3561379dbe376b497b5cc96159cf64342c05b5
# Parent  247126168d237ccb7e79c65f651c122982b0f724
Clarify documentation around locking functions and clear.

* func.txi: Rewrite section on locking functions.

* variables.cc (Fmlock, Fmunlock, Fmislocked): Add clear to list of @seealso
references.  Reference clear() function in the description of the functions.

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1092,73 +1092,70 @@ amount of disk space used by Octave.  In
 @code{autoload} function, that permits the user to define in which
 file a certain function will be found.
 
 @DOCSTRING(autoload)
 
 @node Function Locking
 @subsection Function Locking
 
-It is sometime desirable to lock a function into memory with the
-@code{mlock} function.  This is typically used for dynamically linked
-functions in Oct-files or mex-files that contain some initialization,
-and it is desirable that calling @code{clear} does not remove this
-initialization.
+It is sometime desirable to lock a function into memory with the @code{mlock}
+function.  This is typically used for dynamically linked functions in oct-files or mex-files that contain some initialization, and it is desirable that calling @code{clear} does not remove this initialization.
 
 As an example,
 
 @example
 @group
 function my_function ()
   mlock ();
   @dots{}
+endfunction
 @end group
 @end example
 
 @noindent
-prevents @code{my_function} from being removed from memory after it is
-called, even if @code{clear} is called.  It is possible to determine if
-a function is locked into memory with the @code{mislocked}, and to unlock
-a function with @code{munlock}, which the following illustrates.
+prevents @code{my_function} from being removed from memory after it is called,
+even if @code{clear} is called.  It is possible to determine if a function is
+locked into memory with the @code{mislocked}, and to unlock a function with
+@code{munlock}, which the following code illustrates.
 
 @example
 @group
 my_function ();
 mislocked ("my_function")
 @result{} ans = 1
 munlock ("my_function");
 mislocked ("my_function")
 @result{} ans = 0
 @end group
 @end example
 
-A common use of @code{mlock} is to prevent persistent variables from
-being removed from memory, as the following example shows:
+A common use of @code{mlock} is to prevent persistent variables from being
+removed from memory, as the following example shows:
 
 @example
 @group
 function count_calls ()
   mlock ();
   persistent calls = 0;
-  printf ("'count_calls' has been called %d times\n",
-          ++calls);
+  printf ("count_calls() has been called %d times\n", ++calls);
 endfunction
 
 count_calls ();
-@print{} 'count_calls' has been called 1 times
+@print{} count_calls() has been called 1 times
 
 clear count_calls
 count_calls ();
-@print{} 'count_calls' has been called 2 times
+@print{} count_calls() has been called 2 times
 @end group
 @end example
 
-@code{mlock} might equally be used to prevent changes to a function from having
-effect in Octave, though a similar effect can be had with the
-@code{ignore_function_time_stamp} function.
+@code{mlock} might also be used to prevent changes to an m-file, such as in an
+external editor, from having any effect in the current Octave session; A
+similar effect can be had with the @code{ignore_function_time_stamp} function.
 
 @DOCSTRING(mlock)
 
 @DOCSTRING(munlock)
 
 @DOCSTRING(mislocked)
 
 @node Function Precedence
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -830,18 +830,19 @@ set_internal_variable (std::string& var,
     }
 
   return retval;
 }
 
 DEFMETHOD (mlock, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} mlock ()
-Lock the current function into memory so that it can't be cleared.
-@seealso{munlock, mislocked, persistent}
+Lock the current function into memory so that it can't be removed with
+@code{clear}.
+@seealso{munlock, mislocked, persistent, clear}
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
 
   octave::call_stack& cs = interp.get_call_stack ();
 
   octave_function *fcn = cs.caller ();
@@ -853,20 +854,21 @@ Lock the current function into memory so
 
   return ovl ();
 }
 
 DEFMETHOD (munlock, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} munlock ()
 @deftypefnx {} {} munlock (@var{fcn})
-Unlock the named function @var{fcn}.
+Unlock the named function @var{fcn} so that it may be removed from memory with
+@code{clear}.
 
 If no function is named then unlock the current function.
-@seealso{mlock, mislocked, persistent}
+@seealso{mlock, mislocked, persistent, clear}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   if (nargin == 1)
@@ -889,20 +891,20 @@ If no function is named then unlock the 
 
   return ovl ();
 }
 
 DEFMETHOD (mislocked, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} mislocked ()
 @deftypefnx {} {} mislocked (@var{fcn})
-Return true if the named function @var{fcn} is locked.
+Return true if the named function @var{fcn} is locked in memory.
 
 If no function is named then return true if the current function is locked.
-@seealso{mlock, munlock, persistent}
+@seealso{mlock, munlock, persistent, clear}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   octave_value retval;
