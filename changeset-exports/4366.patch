# HG changeset patch
# User jwe
# Date 1046857758 0
#      Wed Mar 05 09:49:18 2003 +0000
# Node ID ad851d04b3966d7fa34b56137f684989a328780b
# Parent  4dfce8f9ee98edb8002c6350f173e98d491dd01e
[project @ 2003-03-05 09:49:18 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2003-03-05  Paul Kienzle <pkienzle@users.sf.net>
+
+	* aclocal.m4 (OCTAVE_DYNAMIC_AUTO_ARRAYS): New macro.
+	* configure.in: Use it.
+	(AH_BOTTOM): Check HAVE_DYNAMIC_AUTO_ARRAYS instead of __GNUG__.
+
 2003-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Undo previous change.
 	* Makeconf.in: Likewise.
 
 2003-03-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (KPATHSEA_INCFLAGS): New variable.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -97,16 +97,31 @@ AC_TRY_COMPILE([#include <new>],
 [operator delete((void *)0, (void *)0);],
 octave_cv_placement_delete=yes, octave_cv_placement_delete=no)])
 if test $octave_cv_placement_delete = yes; then
 AC_DEFINE(HAVE_PLACEMENT_DELETE,1,[Define if C++ supports operator delete(void *, void *)])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
+dnl See if the compiler dynamic auto arrays
+dnl
+AC_DEFUN(OCTAVE_DYNAMIC_AUTO_ARRAYS,
+[AC_CACHE_CHECK([whether C++ supports dynamic auto arrays],
+octave_cv_dynamic_auto_arrays,
+[AC_LANG_PUSH(C++)
+AC_TRY_COMPILE(,
+[void test(char *); int length(); char x[length()]; test(x);],
+octave_cv_dynamic_auto_arrays=yes, octave_cv_dynamic_auto_arrays=no)])
+if test $octave_cv_dynamic_auto_arrays = yes; then
+AC_DEFINE(HAVE_DYNAMIC_AUTO_ARRAYS,1,[Define if C++ supports dynamic auto arrays])
+fi
+AC_LANG_POP(C++)
+])
+dnl
 dnl The following test is from Karl Berry's Kpathseach library.  I'm
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
 dnl We don't actually need to run this if we don't have putenv, but it
 dnl doesn't hurt.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.420 $)
+AC_REVISION($Revision: 1.421 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -862,16 +862,20 @@ AC_C_CONST
 ### See if we should define NPOS.
 
 OCTAVE_STRING_NPOS
 
 ### See if we should use placement delete.
 
 OCTAVE_PLACEMENT_DELETE
 
+### See if we can auto allocate variable sized arrays.
+
+OCTAVE_DYNAMIC_AUTO_ARRAYS
+
 ### Checks for header files.
 
 AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
 ### C headers
@@ -1383,17 +1387,17 @@ typedef int sig_atomic_t;
 #define OCTAVE_USE_WINDOWS_API 1
 #endif
 
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #define OCTAVE_HAVE_SIG_JUMP
 #endif
 
-#if defined (__GNUG__)
+#if defined (HAVE_DYNAMIC_AUTO_ARRAYS)
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   T buf[size]
 #else
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   std::auto_ptr<T> buf ## _auto_ptr (new T [size]); \
   T *buf = buf ## _auto_ptr.get ()
 #endif
 
