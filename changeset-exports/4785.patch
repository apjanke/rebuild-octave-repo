# HG changeset patch
# User jwe
# Date 1077055097 0
#      Tue Feb 17 21:58:17 2004 +0000
# Node ID d3018a33c5847a258edc62b8ed2f8757b722c564
# Parent  743ef6154f8a5b165c09f699f82f9936590f86a6
[project @ 2004-02-17 21:58:17 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-fftw.cc (convert_packcomplex_1d, convert_packcomplex_Nd): 
+	Sprinkle with OCTAVE_QUIT.
+
 2004-02-16  David Bateman <dbateman@free.fr>
 
 	* oct-fftw.cc (octave_fftw_planner::create_plan, octave_fftw::fftNd):
 	Add support for FFTW 3.x. Include the ability to
 	use the real to complex transform for fft's of real matrices
 	(octave_fftw_planner::create_plan2d): Delete.
 	(octave_fftw::fft2d): Delete.
 	(convert_packcomplex_1d, convert_packcomplex_Nd):
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -210,70 +210,87 @@ octave_fftw_planner::create_plan (const 
 }
 
 static octave_fftw_planner fftw_planner;
 
 static inline void
 convert_packcomplex_1d (Complex *out, size_t nr, size_t nc,
 			int stride, int dist)
 {
-  // Fill in the missing data
+  OCTAVE_QUIT;
+
+  // Fill in the missing data.
+
   for (size_t i = 0; i < nr; i++)
     for (size_t j = nc/2+1; j < nc; j++)
       out[j*stride + i*dist] = conj(out[(nc - j)*stride + i*dist]);
+
+  OCTAVE_QUIT;
 }
 
 static inline void
 convert_packcomplex_Nd (Complex *out, const dim_vector &dv)
 {
   size_t nc = dv(0);
   size_t nr = dv(1);
   size_t np = (dv.length() > 2 ? dv.numel () / nc / nr : 1);
   size_t nrp = nr * np;
   Complex *ptr1, *ptr2;
 
-  // Create space for the missing elements
+  OCTAVE_QUIT;
+
+  // Create space for the missing elements.
+
   for (size_t i = 0; i < nrp; i++)
     {
       ptr1 = out + i * (nc/2 + 1) + nrp*((nc-1)/2);
       ptr2 = out + i * nc;
       for (size_t j = 0; j < nc/2+1; j++)
 	*ptr2++ = *ptr1++;
     }
 
-  // Fill in the missing data for the rank = 2 case directly for speed
+  OCTAVE_QUIT;
+
+  // Fill in the missing data for the rank = 2 case directly for speed.
+
   for (size_t i = 0; i < np; i++)
     {
       for (size_t j = 1; j < nr; j++)
 	for (size_t k = nc/2+1; k < nc; k++)
 	  out[k + (j + i*nr)*nc] = conj(out[nc - k + ((i+1)*nr - j)*nc]);
 
       for (size_t j = nc/2+1; j < nc; j++)
 	out[j + i*nr*nc] = conj(out[(i*nr+1)*nc - j]);
     }
 
-  // Now do the permutations needed for rank > 2 cases
+  OCTAVE_QUIT;
+
+  // Now do the permutations needed for rank > 2 cases.
+
   size_t jstart = dv(0) * dv(1);
   size_t kstep = dv(0);
   size_t nel = dv.numel ();
+
   for (int inner = 2; inner < dv.length(); inner++) 
     {
       size_t jmax = jstart * dv(inner);
       for (size_t i = 0; i < nel; i+=jmax)
 	for (size_t j = jstart, jj = jmax-jstart; j < jj; 
 	     j+=jstart, jj-=jstart)
 	  for (size_t k = 0; k < jstart; k+= kstep)
 	    for (size_t l = nc/2+1; l < nc; l++)
 	      {
 		Complex tmp = out[i+ j + k + l];
 		out[i + j + k + l] =  out[i + jj + k + l];
 		out[i + jj + k + l] = tmp;
 	      }
       jstart = jmax;
     }
+
+  OCTAVE_QUIT;
 }
 
 int
 octave_fftw::fft (const double *in, Complex *out, size_t npts, 
 		  size_t nsamples, int stride, int dist)
 {
   dist = (dist < 0 ? npts : dist);
 
