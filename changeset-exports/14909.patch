# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1337342399 21600
#      Fri May 18 05:59:59 2012 -0600
# Node ID a1d2f6300391cad45f26115818a3199532c39a70
# Parent  f5fe1e3bda3461aa7ad44e1a5780437a4cc6ae03
Remove OCTINTERP_API from jit classes

diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -77,17 +77,16 @@ namespace llvm
 }
 
 class octave_base_value;
 class octave_value;
 class tree;
 
 // jit_range is compatable with the llvm range structure
 struct
-OCTINTERP_API
 jit_range
 {
   jit_range (void) {}
 
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
     inc (from.inc ()), nelem (from.nelem ())
     {}
 
@@ -104,17 +103,16 @@ jit_range
 
 // Used to keep track of estimated (infered) types during JIT. This is a
 // hierarchical type system which includes both concrete and abstract types.
 //
 // Current, we only support any and scalar types. If we can't figure out what
 // type a variable is, we assign it the any type. This allows us to generate
 // code even for the case of poor type inference.
 class
-OCTINTERP_API
 jit_type
 {
 public:
   jit_type (const std::string& n, bool fi, jit_type *mparent, llvm::Type *lt,
             int tid) :
     mname (n), finit (fi), p (mparent), llvm_type (lt), id (tid)
   {}
 
@@ -226,17 +224,16 @@ public:
 private:
   Array<octave_idx_type> to_idx (const std::vector<jit_type*>& types) const;
 
   std::vector<Array<overload> > overloads;
 };
 
 // Get information and manipulate jit types.
 class
-OCTINTERP_API
 jit_typeinfo
 {
 public:
   jit_typeinfo (llvm::Module *m, llvm::ExecutionEngine *e);
 
   jit_type *get_any (void) const { return any; }
 
   jit_type *get_scalar (void) const { return scalar; }
@@ -333,17 +330,16 @@ private:
   size_t ov_idx;
   std::vector<octave_base_value*> ov_out;
 
   size_t range_idx;
   std::vector<jit_range> range_out;
 };
 
 class
-OCTINTERP_API
 jit_infer : public tree_walker
 {
   typedef std::map<std::string, jit_type *> type_map;
 public:
   jit_infer (jit_typeinfo *ti) : tinfo (ti), is_lvalue (false),
                                   rvalue_type (0)
   {}
 
@@ -451,17 +447,16 @@ private:
 
   type_map types;
   std::set<std::string> argin;
 
   std::vector<jit_type *> type_stack;
 };
 
 class
-OCTINTERP_API
 jit_generator : public tree_walker
 {
   typedef std::map<std::string, jit_type *> type_map;
 public:
   jit_generator (jit_typeinfo *ti, llvm::Module *module, tree &tee,
                  const std::set<std::string>& argin,
                  const type_map& infered_types, bool have_bounds = true);
 
@@ -569,17 +564,16 @@ private:
   llvm::Function *function;
 
   bool is_lvalue;
   std::map<std::string, value> variables;
   std::vector<value> value_stack;
 };
 
 class
-OCTINTERP_API
 tree_jit
 {
 public:
   tree_jit (void);
 
   ~tree_jit (void);
 
   bool execute (tree_simple_for_command& cmd, const octave_value& bounds);
@@ -599,17 +593,16 @@ public:
   llvm::PassManager *module_pass_manager;
   llvm::FunctionPassManager *pass_manager;
   llvm::ExecutionEngine *engine;
 
   jit_typeinfo *tinfo;
 };
 
 class
-OCTINTERP_API
 jit_info
 {
 public:
   jit_info (tree_jit& tjit, tree_simple_for_command& cmd, jit_type *bounds);
 
   bool execute (const octave_value& bounds) const;
 
   bool match (void) const;
