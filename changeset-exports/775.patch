# HG changeset patch
# User jwe
# Date 781397166 0
#      Wed Oct 05 22:46:06 1994 +0000
# Node ID d1acd4a89bf79be798537fd9bc99f77b3304fa9d
# Parent  9541a1fe575cc3bdc93b2ab0b747ac482a87e4f3
[project @ 1994-10-05 22:46:06 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -229,203 +229,203 @@ static void
 IEEE_big_double_to_IEEE_little_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_double_to_IEEE_little_double (double *d, int len)
 {
-  error ("unable to convert from VAX D float to IEEE little endian format");
+  gripe_data_conversion ("VAX D float", "IEEE little endian format");
 }
 
 static void
 VAX_G_double_to_IEEE_little_double (double *d, int len)
 {
-  error ("unable to convert from VAX G float to IEEE little endian format");
+  gripe_data_conversion ("VAX G float", "IEEE little endian format");
 }
 
 static void
 Cray_to_IEEE_little_double (double *d, int len)
 {
-  error ("unable to convert from Cray to IEEE little endian format");
+  gripe_data_conversion ("Cray", "IEEE little endian format");
 }
 
 static void
 IEEE_big_float_to_IEEE_little_float (float *d, int len)
 {
   swap_4_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_float_to_IEEE_little_float (float *d, int len)
 {
-  error ("unable to convert from VAX D float to IEEE little endian format");
+  gripe_data_conversion ("VAX D float", "IEEE little endian format");
 }
 
 static void
 VAX_G_float_to_IEEE_little_float (float *d, int len)
 {
-  error ("unable to convert from VAX G float to IEEE little endian format");
+  gripe_data_conversion ("VAX G float", "IEEE little endian format");
 }
 
 static void
 Cray_to_IEEE_little_float (float *d, int len)
 {
-  error ("unable to convert from Cray to IEEE little endian format");
+  gripe_data_conversion ("Cray", "IEEE little endian format");
 }
 
 #elif defined (IEEE_BIG_ENDIAN)
 
 static void
 IEEE_little_double_to_IEEE_big_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_double_to_IEEE_big_double (double *d, int len)
 {
-  error ("unable to convert from VAX D float to IEEE big endian format");
+  gripe_data_conversion ("VAX D float", "IEEE big endian format");
 }
 
 static void
 VAX_G_double_to_IEEE_big_double (double *d, int len)
 {
-  error ("unable to convert from VAX G float to IEEE big endian format");
+  gripe_data_conversion ("VAX G float", "IEEE big endian format");
 }
 
 static void
 Cray_to_IEEE_big_double (double *d, int len)
 {
-  error ("unable to convert from Cray to IEEE big endian format");
+  gripe_data_conversion ("Cray", "IEEE big endian format");
 }
 
 static void
 IEEE_little_float_to_IEEE_big_float (float *d, int len)
 {
   swap_4_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_float_to_IEEE_big_float (float *d, int len)
 {
-  error ("unable to convert from VAX D float to IEEE big endian format");
+  gripe_data_conversion ("VAX D float", "IEEE big endian format");
 }
 
 static void
 VAX_G_float_to_IEEE_big_float (float *d, int len)
 {
-  error ("unable to convert from VAX G float to IEEE big endian format");
+  gripe_data_conversion ("VAX G float", "IEEE big endian format");
 }
 
 static void
 Cray_to_IEEE_big_float (float *d, int len)
 {
-  error ("unable to convert from Cray to IEEE big endian format");
+  gripe_data_conversion ("Cray", "IEEE big endian format");
 }
 
 #elif defined (VAX_D_FLOAT)
 
 static void
 IEEE_little_double_to_VAX_D_double (double *d, int len)
 {
-  error ("unable to convert from IEEE little endian to VAX D float format");
+  gripe_data_conversion ("IEEE little endian", "VAX D");
 }
 
 static void
 IEEE_big_double_to_VAX_D_double (double *d, int len)
 {
-  error ("unable to convert from IEEE big endian to VAX D float format");
+  gripe_data_conversion ("IEEE big endian", "VAX D");
 }
 
 static void
 VAX_G_double_to_VAX_D_double (double *d, int len)
 {
-  error ("unable to convert from VAX G float to VAX D float format");
+  gripe_data_conversion ("VAX G float", "VAX D");
 }
 
 static void
 Cray_to_VAX_D_double (double *d, int len)
 {
-  error ("unable to convert from Cray to VAX D float format");
+  gripe_data_conversion ("Cray", "VAX D");
 }
 
 static void
 IEEE_little_float_to_VAX_D_float (float *d, int len)
 {
-  error ("unable to convert from IEEE little endian to VAX D float format");
+  gripe_data_conversion ("IEEE little endian", "VAX D");
 }
 
 static void
 IEEE_big_float_to_VAX_D_float (float *d, int len)
 {
-  error ("unable to convert from IEEE big endian to VAX D float format");
+  gripe_data_conversion ("IEEE big endian", "VAX D");
 }
 
 static void
 VAX_G_float_to_VAX_D_float (float *d, int len)
 {
-  error ("unable to convert from VAX G float to VAX D float format");
+  gripe_data_conversion ("VAX G float", "VAX D");
 }
 
 static void
 Cray_to_VAX_D_float (float *d, int len)
 {
-  error ("unable to convert from Cray to VAX D float format");
+  gripe_data_conversion ("Cray", "VAX D");
 }
 
 #elif defined (VAX_G_FLOAT)
 
 static void
 IEEE_little_double_to_VAX_G_double (double *d, int len)
 {
-  error ("unable to convert from IEEE little endian to VAX G float format");
+  gripe_data_conversion ("IEEE little endian", "VAX G");
 }
 
 static void
 IEEE_big_double_to_VAX_G_double (double *d, int len)
 {
-  error ("unable to convert from IEEE big endian to VAX G float format");
+  gripe_data_conversion ("IEEE big endian", "VAX G");
 }
 
 static void
 VAX_D_double_to_VAX_G_double (double *d, int len)
 {
-  error ("unable to convert from VAX D float to VAX G float format");
+  gripe_data_conversion ("VAX D float", "VAX G");
 }
 
 static void
 Cray_to_VAX_G_double (double *d, int len)
 {
-  error ("unable to convert from VAX G float to VAX G float format");
+  gripe_data_conversion ("VAX G float", "VAX G");
 }
 
 static void
 IEEE_little_float_to_VAX_G_float (float *d, int len)
 {
-  error ("unable to convert from IEEE little endian to VAX G float format");
+  gripe_data_conversion ("IEEE little endian", "VAX G");
 }
 
 static void
 IEEE_big_float_to_VAX_G_float (float *d, int len)
 {
-  error ("unable to convert from IEEE big endian to VAX G float format");
+  gripe_data_conversion ("IEEE big endian", "VAX G");
 }
 
 static void
 VAX_D_float_to_VAX_G_float (float *d, int len)
 {
-  error ("unable to convert from VAX D float to VAX G float format");
+  gripe_data_conversion ("VAX D float", "VAX G");
 }
 
 static void
 Cray_to_VAX_G_float (float *d, int len)
 {
-  error ("unable to convert from VAX G float to VAX G float format");
+  gripe_data_conversion ("VAX G float", "VAX G");
 }
 
 #endif
 
 static void
 do_double_format_conversion (double *data, int len,
 			     floating_point_format fmt)
 {
@@ -2092,21 +2092,21 @@ found in the file will be replaced with 
 				   global, tc, doc);
 	  break;
 
 	case LS_MAT_BINARY:
 	  name = read_mat_binary_data (stream, orig_fname, tc);
 	  break;
 
 	default:
-	  panic_impossible ();
+	  gripe_unrecognized_data_fmt ("load");
 	  break;
 	}
 
-      if (stream.eof ())
+      if (error_state || stream.eof ())
 	{
 	  break;
 	}
       else if (! error_state && name)
 	{
 	  if (tc.is_defined ())
 	    {
 	      if (argc == 0 || matches_patterns (argv, argc, name))
@@ -2560,17 +2560,17 @@ do_save (ostream& os, symbol_record *sr,
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
       break;
 
     default:
-      error ("save: unrecognized data format requested");
+      gripe_unrecognized_data_fmt ("save");
       break;
     }
 }
 
 // Save variables with names matching PATTERN on stream OS in the
 // format specified by FMT.  If SAVE_BUILTINS is nonzero, also save
 // builtin variables with names that match PATTERN.
 
