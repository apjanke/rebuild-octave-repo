# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1420650988 -3600
#      Wed Jan 07 18:16:28 2015 +0100
# Branch gui-release
# Node ID e4b25475ef3d3116973496331ef0d6bb7bdc82c3
# Parent  9da61e3ecbe7aa72f5972b83d38a7e89906d749c
provide a filter for the workspace view (bug #41222)

* workspace_view.cc (constructor): new combo-box for filter expressions,
  new check box for enable/disable filter, connect related signals, get
  last state of filter and check box from settings file;
  (destructor): write state of filter and check box into settings file;
  (setModel): use a filter proxy  model between model and table view;
  (filter_update): new slot for updating the filter expression;
  (filter_activate): new slot enabling or disabling the filter;
  (update_filter_history): new slot for saving the filter expression when
  its edtitign has finished;
  (handle_model_changed): actual row count is now taken from the filter model

* workspace_view.h: new slots filter_activate, filter_update, and
  update_filter_history; new class variables for check box, filter combo box,
  and filter model

diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -30,88 +30,165 @@ along with Octave; see the file COPYING.
 #include <QClipboard>
 #include <QMessageBox>
 #include <QLineEdit>
 #include <QHeaderView>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QPushButton>
 #include <QMenu>
+#include <QLabel>
+#include <QCompleter>
 
 #include "workspace-view.h"
 #include "resource-manager.h"
 #include "symtab.h"
 
 workspace_view::workspace_view (QWidget *p)
   : octave_dock_widget (p), view (new QTableView (this))
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
 
+  _filter = new QComboBox (this);
+  _filter->setToolTip (tr ("Enter the path or filename"));
+  _filter->setEditable (true);
+  _filter->setMaxCount (MaxFilterHistory);
+  _filter->setInsertPolicy (QComboBox::NoInsert);
+  _filter->setSizeAdjustPolicy (
+            QComboBox::AdjustToMinimumContentsLengthWithIcon);
+  QSizePolicy sizePol (QSizePolicy::Expanding, QSizePolicy::Maximum);
+  _filter->setSizePolicy (sizePol);
+  _filter->completer ()->setCaseSensitivity (Qt::CaseSensitive);
+
+  QLabel *filter_label = new QLabel (tr ("Filter"));
+
+  _filter_checkbox = new QCheckBox ();
+
   view->setWordWrap (false);
   view->setContextMenuPolicy (Qt::CustomContextMenu);
   view->setShowGrid (false);
+  (view->verticalHeader) ()->hide ();
   view->setAlternatingRowColors (true);
   view_previous_row_count = 0;
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
   // Create a new layout and add widgets to it.
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
+  QHBoxLayout *hbox_layout = new QHBoxLayout ();
+  hbox_layout->addWidget (filter_label);
+  hbox_layout->addWidget (_filter_checkbox);
+  hbox_layout->addWidget (_filter);
+  vbox_layout->addLayout (hbox_layout);
   vbox_layout->addWidget (view);
   vbox_layout->setMargin (2);
 
   // Set the empty widget to have our layout.
   widget ()->setLayout (vbox_layout);
 
+  // Filter model
+  _filter_model = new QSortFilterProxyModel ();
+  _filter_model->setFilterKeyColumn(0);
+
   // Initialize collapse/expand state of the workspace subcategories.
 
   QSettings *settings = resource_manager::get_settings ();
 
   // Initialize column order and width of the workspace
-
   view->horizontalHeader ()->restoreState (
     settings->value ("workspaceview/column_state").toByteArray ());
 
+  // Init state of the filter
+  _filter->addItems (settings->value ("workspaceview/mru_list").toStringList ());
+
+  bool filter_state =
+            settings->value ("workspaceview/filter_active", false).toBool ();
+  _filter_checkbox->setChecked (filter_state);
+  filter_activate (filter_state);
+
   // Connect signals and slots.
 
+  connect (_filter, SIGNAL (editTextChanged (const QString&)),
+           this, SLOT (filter_update (const QString&)));
+  connect (_filter_checkbox, SIGNAL (toggled (bool)),
+           this, SLOT (filter_activate (bool)));
+  connect (_filter->lineEdit (), SIGNAL (editingFinished ()),
+           this, SLOT (update_filter_history ()));
+
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT (contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
 
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue ("workspaceview/column_state",
                       view->horizontalHeader ()->saveState ());
+  settings->setValue ("workspaceview/filter_active",
+                      _filter_checkbox->isChecked ());
+
+  QStringList mru;
+  for (int i = 0; i < _filter->count (); i++)
+    mru.append (_filter->itemText (i));
+  settings->setValue ("workspaceview/mru_list", mru);
 
   settings->sync ();
 }
 
 void workspace_view::setModel (workspace_model *model)
 {
-  view->setModel (model);
+  _filter_model->setSourceModel (model);
+  view->setModel (_filter_model);
   _model = model;
 }
 
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
 
+void
+workspace_view::filter_update (const QString& expression)
+{
+  _filter_model->setFilterRegExp (QRegExp (expression,
+                                  Qt::CaseSensitive, QRegExp::FixedString));
+  handle_model_changed ();
+}
+
+void
+workspace_view::filter_activate (bool state)
+{
+  _filter->setEnabled (state);
+  _filter_model->setDynamicSortFilter (state);
+
+  if (state)
+    filter_update (_filter->currentText ());
+  else
+    filter_update (QString ());
+}
+
+void
+workspace_view::update_filter_history ()
+{
+  QString text = _filter->currentText ();
+  if (! text.isEmpty () && _filter->findText (text) == -1)
+    _filter->insertItem (0, _filter->currentText ());
+}
+
 QString
 workspace_view::get_var_name (QModelIndex index)
 {
   index = index.sibling (index.row (), 0);
   QAbstractItemModel *m = view->model ();
   QMap<int, QVariant> item_data = m->itemData (index);
 
   return item_data[0].toString ();
@@ -251,21 +328,22 @@ workspace_view::relay_contextmenu_comman
 
       emit command_requested (cmdname + " (" + var_name + ");");
     }
 }
 
 void
 workspace_view::handle_model_changed (void)
 {
+//  view->resizeRowsToContents ();
   // Just modify those rows that have been added rather than go through
   // the whole list.  For-loop test will handle when number of rows reduced.
   QFontMetrics fm = view->fontMetrics ();
   int row_height =  fm.height ();
-  int new_row_count = view->model ()->rowCount ();
+  int new_row_count = _filter_model->rowCount ();
   for (int i = view_previous_row_count; i < new_row_count; i++)
     view->setRowHeight (i, row_height);
   view_previous_row_count = new_row_count;
 }
 
 void
 workspace_view::notice_settings (const QSettings *settings)
 {
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -22,16 +22,19 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_workspace_view_h)
 #define octave_workspace_view_h 1
 
 #include <QItemDelegate>
 #include <QTableView>
 #include <QSemaphore>
+#include <QComboBox>
+#include <QSortFilterProxyModel>
+#include <QCheckBox>
 
 #include "octave-dock-widget.h"
 #include "workspace-model.h"
 
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
@@ -68,19 +71,28 @@ protected slots:
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
 
   void handle_model_changed (void);
 
   void copyClipboard ();
   void selectAll ();
 
+  void filter_update (const QString& expression);
+  void filter_activate (bool enable);
+  void update_filter_history ();
+
 private:
 
   void relay_contextmenu_command (const QString& cmdname);
 
   QString get_var_name (QModelIndex index);
   QTableView *view;
   int view_previous_row_count;
   workspace_model *_model;
+
+  QSortFilterProxyModel *_filter_model;
+  QCheckBox *_filter_checkbox;
+  QComboBox *_filter;
+  enum { MaxFilterHistory = 10 };
 };
 
 #endif
