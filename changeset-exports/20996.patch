# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451247903 28800
#      Sun Dec 27 12:25:03 2015 -0800
# Node ID 20bd3d4fabad842931ca22841bce731c124e517d
# Parent  aab7a3c7168e8d176eae14fd817b48d068726671
Clean up instances of make_argv().

* error.cc (Fwarning, Flasterr, Flastwarn): Use '[]' to access element of
vector, rather than '()'.

* help.cc (F__which__): Call make_argv without an argument rather than with "".

* input.cc: (Fecho): Call make_argv without an argument rather than with "".

* load-save.cc: Remove useless comments.  Re-indent lines.  Join lines
unnecessarily split.

* ovl.cc (make_argv): Invert if/else/error.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1470,27 +1470,27 @@ disable escape sequence expansion use a 
 
   int nargin = args.length ();
   bool done = false;
 
   if (nargin > 0 && args.all_strings_p ())
     {
       string_vector argv = args.make_argv ("warning");
 
-      std::string arg1 = argv(1);
+      std::string arg1 = argv[1];
       std::string arg2 = "all";
 
       if (nargin >= 2)
-        arg2 = argv(2);
+        arg2 = argv[2];
 
       if (arg1 == "on" || arg1 == "off" || arg1 == "error")
         {
           octave_map old_warning_options = warning_options;
 
-          if (nargin == 3 && argv(3) == "local"
+          if (nargin == 3 && argv[3] == "local"
               && ! symbol_table::at_top_level ())
             {
               symbol_table::scope_id scope
                 = octave_call_stack::current_scope ();
 
               symbol_table::context_id context
                 = octave_call_stack::current_context ();
 
@@ -1969,23 +1969,23 @@ With two arguments, also set the last me
 
   string_vector argv = args.make_argv ("lasterr");
 
   std::string prev_error_id = Vlast_error_id;
   std::string prev_error_message = Vlast_error_message;
 
   if (nargin == 2)
     {
-      Vlast_error_id = argv(2);
-      Vlast_error_message = argv(1);
+      Vlast_error_id = argv[2];
+      Vlast_error_message = argv[1];
     }
   else if (nargin == 1)
     {
       Vlast_error_id = "";
-      Vlast_error_message = argv(1);
+      Vlast_error_message = argv[1];
     }
 
   if (nargin == 0 || nargout > 0)
     return ovl (prev_error_message, prev_error_id);
   else
     return ovl ();
 }
 
@@ -2012,23 +2012,23 @@ With two arguments, also set the last me
 
   string_vector argv = args.make_argv ("lastwarn");
 
   std::string prev_warning_id = Vlast_warning_id;
   std::string prev_warning_message = Vlast_warning_message;
 
   if (nargin == 2)
     {
-      Vlast_warning_id = argv(2);
-      Vlast_warning_message = argv(1);
+      Vlast_warning_id = argv[2];
+      Vlast_warning_message = argv[1];
     }
   else if (nargin == 1)
     {
       Vlast_warning_id = "";
-      Vlast_warning_message = argv(1);
+      Vlast_warning_message = argv[1];
     }
 
   if (nargin == 0 || nargout > 0)
     return ovl (prev_warning_message, prev_warning_id);
   else
     return ovl ();
 }
 
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -1267,17 +1267,17 @@ do_which (const std::string& name)
 }
 
 DEFUN (__which__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __which__ (@var{name}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  string_vector argv = args.make_argv ("");
+  string_vector argv = args.make_argv ();
 
   int nargin = argv.numel ();
 
   octave_map m (dim_vector (1, nargin));
 
   Cell names (1, nargin);
   Cell files (1, nargin);
   Cell types (1, nargin);
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -960,17 +960,17 @@ functions.\n\
 @end table\n\
 \n\
 @noindent\n\
 With no arguments, @code{echo} toggles the current echo state.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  string_vector argv = args.make_argv ("");
+  string_vector argv = args.make_argv ();
 
   switch (args.length ())
     {
     case 0:
       {
         if ((Vecho_executing_commands & ECHO_SCRIPTS)
             || (Vecho_executing_commands & ECHO_FUNCTIONS))
           Vecho_executing_commands = ECHO_OFF;
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -647,17 +647,16 @@ Force Octave to assume the file is in Oc
   // user preference variable since we can determine the type of file
   // as we are reading.
 
   load_save_format format = LS_UNKNOWN;
 
   bool list_only = false;
   bool verbose = false;
 
-  //for (i; i < argc; i++)
   for (; i < argc; i++)
     {
       if (argv[i] == "-force" || argv[i] == "-f")
         {
           // Silently ignore this
           // warning ("load: -force ignored");
         }
       else if (argv[i] == "-list" || argv[i] == "-l")
@@ -811,17 +810,17 @@ Force Octave to assume the file is in Oc
                         {
                           if (file) file.close ();
                           return retval;
                         }
                     }
 
                   retval = do_load (file, orig_fname, format,
                                     flt_fmt, list_only, swap, verbose,
-                                argv, i, argc, nargout);
+                                    argv, i, argc, nargout);
 
                   file.close ();
                 }
               else
                 gripe_file_open ("load", orig_fname);
             }
           else
 #endif
@@ -1133,31 +1132,29 @@ parse_save_options (const string_vector 
         warning ("save: \"-tabs\" option only has an effect with \"-ascii\"");
     }
 
   return retval;
 }
 
 static string_vector
 parse_save_options (const std::string &arg, load_save_format &format,
-                    bool &append, bool &save_as_floats,
-                    bool &use_zlib)
+                    bool &append, bool &save_as_floats, bool &use_zlib)
 {
   std::istringstream is (arg);
   std::string str;
   string_vector argv;
 
   while (! is.eof ())
     {
       is >> str;
       argv.append (str);
     }
 
-  return parse_save_options (argv, format, append, save_as_floats,
-                             use_zlib);
+  return parse_save_options (argv, format, append, save_as_floats, use_zlib);
 }
 
 void
 write_header (std::ostream& os, load_save_format format)
 {
   switch (format.type)
     {
     case LS_BINARY:
@@ -1586,18 +1583,17 @@ the file @file{data} in Octave's binary 
 
   // get default options
   parse_save_options (Vsave_default_options, format, append, save_as_floats,
                       use_zlib);
 
   // override from command line
   string_vector argv = args.make_argv ();
 
-  argv = parse_save_options (argv, format, append, save_as_floats,
-                             use_zlib);
+  argv = parse_save_options (argv, format, append, save_as_floats, use_zlib);
 
   int argc = argv.numel ();
   int i = 0;
 
   if (i == argc)
     print_usage ();
 
   if (save_as_floats && format == LS_TEXT)
diff --git a/libinterp/octave-value/ovl.cc b/libinterp/octave-value/ovl.cc
--- a/libinterp/octave-value/ovl.cc
+++ b/libinterp/octave-value/ovl.cc
@@ -210,59 +210,57 @@ octave_value_list::has_magic_colon (void
   return false;
 }
 
 string_vector
 octave_value_list::make_argv (const std::string& fcn_name) const
 {
   string_vector argv;
 
-  if (all_strings_p ())
+  if (! all_strings_p ())
+    error ("%s: all arguments must be strings", fcn_name.c_str ());
+
+  octave_idx_type len = length ();
+
+  octave_idx_type total_nr = 0;
+
+  for (octave_idx_type i = 0; i < len; i++)
     {
-      octave_idx_type len = length ();
+      // An empty std::string ("") has zero columns and zero rows
+      // (a change that was made for Matlab contemptibility.
 
-      octave_idx_type total_nr = 0;
+      octave_idx_type n = elem (i).rows ();
+
+      total_nr += n ? n : 1;
+    }
 
-      for (octave_idx_type i = 0; i < len; i++)
-        {
-          // An empty std::string ("") has zero columns and zero rows (a
-          // change that was made for Matlab contemptibility.
+  octave_idx_type k = 0;
+  if (! fcn_name.empty ())
+    {
+      argv.resize (total_nr+1);
+      argv[0] = fcn_name;
+      k = 1;
+    }
+  else
+    argv.resize (total_nr);
 
-          octave_idx_type n = elem(i).rows ();
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      octave_idx_type nr = elem (i).rows ();
 
-          total_nr += n ? n : 1;
-        }
-
-      octave_idx_type k = 0;
-      if (! fcn_name.empty ())
+      if (nr < 2)
+        argv[k++] = elem (i).string_value ();
+      else
         {
-          argv.resize (total_nr+1);
-          argv[0] = fcn_name;
-          k = 1;
-        }
-      else
-        argv.resize (total_nr);
+          string_vector tmp = elem (i).string_vector_value ();
 
-      for (octave_idx_type i = 0; i < len; i++)
-        {
-          octave_idx_type nr = elem(i).rows ();
-
-          if (nr < 2)
-            argv[k++] = elem(i).string_value ();
-          else
-            {
-              string_vector tmp = elem(i).string_vector_value ();
-
-              for (octave_idx_type j = 0; j < nr; j++)
-                argv[k++] = tmp[j];
-            }
+          for (octave_idx_type j = 0; j < nr; j++)
+            argv[k++] = tmp[j];
         }
     }
-  else
-    error ("%s: all arguments must be strings", fcn_name.c_str ());
 
   return argv;
 }
 
 void
 octave_value_list::make_storable_values (void)
 {
   octave_idx_type len = length ();
