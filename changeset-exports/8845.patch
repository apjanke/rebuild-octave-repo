# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235424560 18000
#      Mon Feb 23 16:29:20 2009 -0500
# Node ID 5a6db6bd1a02bf286ebb9ea97c086cc208ae846a
# Parent  c84a5b6377c41133a80389a3c7e573dbffd74856
eigs.cc (Feigs): fix handling of sigma arg

diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -207,17 +207,16 @@ endfunction
 %! a = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),0.4*n*ones(1,n),ones(1,n-2)]);
 %! %%a = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]);
 %! [u,s,v] = svd(full(a));
 %! s = diag(s);
 %! [dum, idx] = sort(abs(s));
 %! s = s(idx);
 %! u = u(:,idx);
 %! v = v(:,idx);
-%! randn('state',42)
 %!testif HAVE_ARPACK
 %! [u2,s2,v2,flag] = svds(a,k);
 %! s2 = diag(s2);
 %! assert(flag,!1);
 %! assert(s(end:-1:end-k+1), s2, 1e-10); 
 %!testif HAVE_ARPACK
 %! [u2,s2,v2,flag] = svds(a,k,0);
 %! s2 = diag(s2);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,34 @@
 2009-02-23  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/eigs.cc (Feigs): If sigma argument is not a
+	string, try extraction as complex value and check for error
+	instead of inquiring about type first.
+
+	* pt-eval.cc (tree_evaluator::visit_break_command,
+	tree_evaluator::visit_return_command,
+	tree_evaluator::visit_global_command,
+	tree_evaluator::visit_static_command): Handle breakpoint.
+	(tree_evaluator::visit_simple_for_command,
+	tree_evaluator::visit_complex_for_command): Handle breakpoint once
+	at beginning of loop.
+	(tree_evaluator::visit_if_command_list): Don't call do_breakpoint
+	for else clauses.
+	(tree_evaluator::visit_no_op_command): Handle breakpoint if no-op
+	command is end of function or script.
+	(tree_evaluator::visit_statement): Handle breakpoint for
+	expressions but not commands.
+	(tree_evaluator::visit_while_command,
+	tree_evaluator::visit_do_until_command):
+	Check for breakpoint set on cmd, not expr.
+	(tree_evaluator::visit_do_until_command): Handle breakpoint
+	between check for breaking out of loop and loop control
+	expression.
+
 	* pt-cmd.h (tree_no_op_command::eof): New data member
 	(tree_no_op_command::tree_no_op_command): Initialize it.
 	(tree_no_op_command::is_end_of_fcn_or_script): New function.
 	* pt-stmt.cc (tree_statement::is_end_of_fcn_or_script):
 	Call is_end_of_fcn_or_script instead of looking at original text
 	of no-op command.
 
 	* pt-select.h, pt-select.cc (tree_if_command::set_breakpoint,
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -447,35 +447,36 @@ K Maschhoff, D Sorensen and C Yang. For 
 	}
     }
 
   if (!error_state && nargin > (1+arg_offset))
     k = args(1+arg_offset).nint_value ();
 
   if (!error_state && nargin > (2+arg_offset))
     {
-      if (args(2+arg_offset).is_real_scalar ()
-	  || args(2+arg_offset).is_complex_scalar ())
-	{
-	  sigma = args(2+arg_offset).complex_value ();
-	  have_sigma = true;
-	}
-      else if (args(2+arg_offset).is_string ())
+      if (args(2+arg_offset).is_string ())
 	{
 	  typ = args(2+arg_offset).string_value ();
 
 	  // Use STL function to convert to upper case
 	  transform (typ.begin (), typ.end (), typ.begin (), toupper);
 
 	  sigma = 0.;
 	}
       else
 	{
-	  error ("eigs: sigma must be a scalar or a string");
-	  return retval;
+	  sigma = args(2+arg_offset).complex_value ();
+
+	  if (! error_state)
+	    have_sigma = true;
+	  else
+	    {
+	      error ("eigs: sigma must be a scalar or a string");
+	      return retval;
+	    }
 	}
     }
 
   sigmar = std::real (sigma);
   sigmai = std::imag (sigma);
 
   if (!error_state && nargin > (3+arg_offset))
     {
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -80,20 +80,25 @@ tree_evaluator::visit_argument_list (tre
 
 void
 tree_evaluator::visit_binary_expression (tree_binary_expression&)
 {
   panic_impossible ();
 }
 
 void
-tree_evaluator::visit_break_command (tree_break_command&)
+tree_evaluator::visit_break_command (tree_break_command& cmd)
 {
   if (! error_state)
-    tree_break_command::breaking = 1;
+    {
+      if (debug_mode)
+	do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
+      tree_break_command::breaking = 1;
+    }
 }
 
 void
 tree_evaluator::visit_colon_expression (tree_colon_expression&)
 {
   panic_impossible ();
 }
 
@@ -178,22 +183,28 @@ tree_evaluator::do_decl_init_list (decl_
 	    break;
 	}
     }
 }
 
 void
 tree_evaluator::visit_global_command (tree_global_command& cmd)
 {
+  if (debug_mode)
+    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
   do_decl_init_list (do_global_init, cmd.initializer_list ());
 }
 
 void
 tree_evaluator::visit_static_command (tree_static_command& cmd)
 {
+  if (debug_mode)
+    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
   do_decl_init_list (do_static_init, cmd.initializer_list ());
 }
 
 void
 tree_evaluator::visit_decl_elt (tree_decl_elt&)
 {
   panic_impossible ();
 }
@@ -263,16 +274,19 @@ quit_loop_now (void)
   while (0)
 
 void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
+  if (debug_mode)
+    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
   unwind_protect::begin_frame ("tree_evaluator::visit_simple_for_command");
 
   unwind_protect_bool (in_loop_command);
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
@@ -403,16 +417,19 @@ tree_evaluator::visit_simple_for_command
 }
 
 void
 tree_evaluator::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   if (error_state)
     return;
 
+  if (debug_mode)
+    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
   unwind_protect::begin_frame ("tree_evaluator::visit_complex_for_command");
 
   unwind_protect_bool (in_loop_command);
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
@@ -539,19 +556,18 @@ void
 tree_evaluator::visit_if_command_list (tree_if_command_list& lst)
 {
   for (tree_if_command_list::iterator p = lst.begin (); p != lst.end (); p++)
     {
       tree_if_clause *tic = *p;
 
       tree_expression *expr = tic->condition ();
 
-      if (debug_mode)
-	do_breakpoint (! tic->is_else_clause () && tic->is_breakpoint (),
-		       tic->line (), tic->column ());
+      if (debug_mode && ! tic->is_else_clause ())
+	do_breakpoint (tic->is_breakpoint (), tic->line (), tic->column ());
 
       if (tic->is_else_clause () || expr->is_logically_true ("if"))
 	{
 	  if (! error_state)
 	    {
 	      tree_statement_list *stmt_lst = tic->commands ();
 
 	      if (stmt_lst)
@@ -583,19 +599,20 @@ tree_evaluator::visit_cell (tree_cell&)
 
 void
 tree_evaluator::visit_multi_assignment (tree_multi_assignment&)
 {
   panic_impossible ();
 }
 
 void
-tree_evaluator::visit_no_op_command (tree_no_op_command&)
+tree_evaluator::visit_no_op_command (tree_no_op_command& cmd)
 {
-  // Do nothing.
+  if (debug_mode && cmd.is_end_of_fcn_or_script ())
+    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column (), true);
 }
 
 void
 tree_evaluator::visit_constant (tree_constant&)
 {
   panic_impossible ();
 }
 
@@ -619,20 +636,25 @@ tree_evaluator::visit_postfix_expression
 
 void
 tree_evaluator::visit_prefix_expression (tree_prefix_expression&)
 {
   panic_impossible ();
 }
 
 void
-tree_evaluator::visit_return_command (tree_return_command&)
+tree_evaluator::visit_return_command (tree_return_command& cmd)
 {
   if (! error_state)
-    tree_return_command::returning = 1;
+    {
+      if (debug_mode)
+	do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+
+      tree_return_command::returning = 1;
+    }
 }
 
 void
 tree_evaluator::visit_return_list (tree_return_list&)
 {
   panic_impossible ();
 }
 
@@ -640,19 +662,16 @@ void
 tree_evaluator::visit_simple_assignment (tree_simple_assignment&)
 {
   panic_impossible ();
 }
 
 void
 tree_evaluator::visit_statement (tree_statement& stmt)
 {
-  if (debug_mode)
-    do_breakpoint (stmt);
-
   tree_command *cmd = stmt.command ();
   tree_expression *expr = stmt.expression ();
 
   if (cmd || expr)
     {
       if (in_fcn_or_script_body)
 	{
 	  octave_call_stack::set_statement (&stmt);
@@ -662,16 +681,20 @@ tree_evaluator::visit_statement (tree_st
 	}
 
       try
 	{
 	  if (cmd)
 	    cmd->accept (*this);
 	  else
 	    {
+	      if (debug_mode)
+		do_breakpoint (expr->is_breakpoint (), expr->line (),
+			       expr->column ());
+
 	      if (in_fcn_or_script_body && Vsilent_functions)
 		expr->set_print_flag (false);
 
 	      // FIXME -- maybe all of this should be packaged in
 	      // one virtual function that returns a flag saying whether
 	      // or not the expression will take care of binding ans and
 	      // printing the result.
 
@@ -789,19 +812,18 @@ tree_evaluator::visit_switch_command (tr
 
       if (! error_state && lst)
 	{
 	  for (tree_switch_case_list::iterator p = lst->begin ();
 	       p != lst->end (); p++)
 	    {
 	      tree_switch_case *t = *p;
 
-	      if (debug_mode)
-		do_breakpoint (! t->is_default_case () && t->is_breakpoint (),
-			       t->line (), t->column ());
+	      if (debug_mode && ! t->is_default_case ())
+		do_breakpoint (t->is_breakpoint (), t->line (), t->column ());
 
 	      if (t->is_default_case () || t->label_matches (val))
 		{
 		  if (error_state)
 		    break;
 
 		  tree_statement_list *stmt_lst = t->commands ();
 
@@ -1011,17 +1033,17 @@ tree_evaluator::visit_while_command (tre
     panic_impossible ();
 
   int l = expr->line ();
   int c = expr->column ();
 
   for (;;)
     {
       if (debug_mode)
-	do_breakpoint (expr->is_breakpoint (), l, c);
+	do_breakpoint (cmd.is_breakpoint (), l, c);
 
       if (expr->is_logically_true ("while"))
 	{
 	  tree_statement_list *loop_body = cmd.body ();
 
 	  if (loop_body)
 	    {
 	      loop_body->accept (*this);
@@ -1068,20 +1090,23 @@ tree_evaluator::visit_do_until_command (
       if (loop_body)
 	{
 	  loop_body->accept (*this);
 
 	  if (error_state)
 	    goto cleanup;
 	}
 
+      if (quit_loop_now ())
+	break;
+
       if (debug_mode)
-	do_breakpoint (expr->is_breakpoint (), l, c);
+	do_breakpoint (cmd.is_breakpoint (), l, c);
 
-      if (quit_loop_now () || expr->is_logically_true ("do-until"))
+      if (expr->is_logically_true ("do-until"))
 	break;
     }
 
  cleanup:
   unwind_protect::run_frame ("tree_evaluator::visit_do_until_command");
 }
 
 void
