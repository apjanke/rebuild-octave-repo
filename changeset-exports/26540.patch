# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546548894 -3600
#      Thu Jan 03 21:54:54 2019 +0100
# Branch stable
# Node ID df230bb22ba67ab1025f0c9de5f9b59989dfff73
# Parent  ed1dad5e71c3db66c81ad7d3f89929db2e10767d
jit: configure: Check if llvm::IRBuilder::CreateConstInBoundsGEP1_32 API

* m4/acinclude.m4: New macro to check if
  llvm::IRBuilder::CreateConstInBoundsGEP1_32 requires a type argument.
* configure.ac: Call the new macro.
* libinterp/parse-tree/pt-jit.cc: Add corresponding #if defined

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1441,16 +1441,18 @@ if test $ENABLE_JIT = yes; then
 
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     OCTAVE_LLVM_RAW_FD_OSTREAM_API
     OCTAVE_LLVM_LEGACY_PASSMANAGER_API
     OCTAVE_LLVM_IRBUILDER_API
     OCTAVE_LLVM_HAS_CREATEALWAYSINLINERPASS
+    OCTAVE_LLVM_IRBUILDER_CREATECONSTINBOUNDSGEP1_32_API
+
     AC_LANG_POP(C++)
     CPPFLAGS="$save_CPPFLAGS"
     LDFLAGS="$save_LDFLAGS"
   fi
 
   if test -z "$warn_llvm"; then
     AC_DEFINE(HAVE_LLVM, 1, [Define to 1 if LLVM is available.])
   else
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -1368,21 +1368,23 @@ namespace octave
         builder.SetInsertPoint (m_prelude);
 
         // The jitted function will have only one function argument, of
         // octave_base_value** type
         llvm::Value *arg = &*(m_function->arg_begin ());
 
         for (size_t i = 0; i < m_argument_vec.size (); ++i)
           {
-            // LLVM <= 3.6
-            // llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
+#if defined (LLVM_IRBUILDER_CREATECONSTINBOUNDSGEP1_32_REQUIRES_TYPE)
             // LLVM >= 3.7
             llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg_type, arg, i);
-
+#else
+            // LLVM <= 3.6
+            llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
+#endif
             m_arguments[m_argument_vec[i].first] = loaded_arg;
           }
 
         convert (blocks, constants);
       }
     catch (const jit_fail_exception& e)
       {
         m_function->eraseFromParent ();
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2806,16 +2806,47 @@ AC_DEFUN([OCTAVE_LLVM_HAS_CREATEALWAYSIN
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_llvm_has_createalwaysinlinerpass = yes; then
     AC_DEFINE(LLVM_HAS_CREATEALWAYSINLINERPASS, 1,
       [Define to 1 if llvm::createAlwaysInlinerPass exists.])
   fi
 ])
 dnl
+dnl Check llvm::IRBuilder::CreateConstInBoundsGEP1_32 API
+dbl
+AC_DEFUN([OCTAVE_LLVM_IRBUILDER_CREATECONSTINBOUNDSGEP1_32_API], [
+  AC_CACHE_CHECK([check if llvm::IRBuilder::CreateConstInBoundsGEP1_32 requires a type argument],
+    [octave_cv_llvm_irbuilder_createconstinboundsgep1_32_requires_type],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+#if defined (HAVE_LLVM_IR_IRBUILDER_H)
+          #include <llvm/IR/IRBuilder.h>
+#elif defined (HAVE_LLVM_SUPPORT_IRBUILDER_H)
+          #include <llvm/Support/IRBuilder.h>
+#else
+          #include <llvm/IRBuilder.h>
+#endif
+          ]], [[
+          llvm::LLVMContext c;
+          llvm::IRBuilder<>  irb (c);
+          llvm::Value *v;
+          v = irb.CreateConstInBoundsGEP1_32 ((llvm::Value *) nullptr, 0);
+        ]])],
+        octave_cv_llvm_irbuilder_createconstinboundsgep1_32_requires_type=no,
+        octave_cv_llvm_irbuilder_createconstinboundsgep1_32_requires_type=yes)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_llvm_irbuilder_createconstinboundsgep1_32_requires_type = yes; then
+    AC_DEFINE(LLVM_IRBUILDER_CREATECONSTINBOUNDSGEP1_32_REQUIRES_TYPE, 1,
+      [Define to 1 if llvm::IRBuilder::CreateConstInBoundsGEP1_32 requires a type argument.])
+  fi
+])
+dnl
 dnl OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS
 dnl
 dnl Set variables related to Fortran symbol names (append underscore,
 dnl use uppercase names, etc.) and calling convention (mostly used for
 dnl determining how character strings are passed).
 dnl
 AC_DEFUN([OCTAVE_CHECK_FORTRAN_SYMBOL_AND_CALLING_CONVENTIONS], [
   F77_TOLOWER=yes
