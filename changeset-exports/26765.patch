# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550779893 0
#      Thu Feb 21 20:11:33 2019 +0000
# Node ID 178fd5e6c0c2035eed3a8cf2ef12529a889b34f0
# Parent  12fe42e168410b5aa42dd14d09bfa94c9e689776
# Parent  8cfe07381fc0c8b129936d2d06d4f40ccb316b96
maint: Merge stable to default.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9469,17 +9469,18 @@ patch::properties::update_data (void)
               else
                 valid_vert = idx(ii,jj);
             }
         }
     }
 
   // check coplanarity for 3D-faces with more than 3 corners
   int fcmax = idx.rows ();
-  if (fcmax > 3 && vert.columns () > 2)
+  if (fcmax > 3 && vert.columns () > 2 && 
+      ! (facecolor_is ("none") && edgecolor_is ("none")))
     {
       for (octave_idx_type jj = 0; jj < idx.columns (); jj++)
         {
           if (! octave::math::isnan (idx(3,jj)))
             {
               // find first element that is NaN to get number of corners
               octave_idx_type nc = 3;
               while (nc < fcmax && ! octave::math::isnan (idx(nc,jj)))
@@ -9495,21 +9496,25 @@ patch::properties::update_data (void)
                   for (i_end = nc-1; i_end > i_start+1; i_end--)
                     {
                       Matrix fc = Matrix (i_end - i_start + 1, 3, 0.0);
                       for (octave_idx_type j = 0; j <= i_end-i_start; j++)
                         for (octave_idx_type i = 0; i < 3; i++)
                           fc(j,i) = vert(idx(j + i_start,jj)-1,i)
                                     - vert(idx(0,jj)-1,i);
 
+                      // FIXME: Using  svd's to check for co-planarity is slow
+                      // for faces with many vertices. Is there a better way to
+                      // check this?
+
                       // calculate rank of matrix
                       octave::math::svd<Matrix> result
                         (fc,
                          octave::math::svd<Matrix>::Type::sigma_only,
-                         octave::math::svd<Matrix>::Driver::GESVD);
+                         octave::math::svd<Matrix>::Driver::GESDD);
                       DiagMatrix sigma = result.singular_values ();
                       double tol = nc * sigma(0,0)
                                    * std::numeric_limits<double>::epsilon ();
                       if (sigma(2,2) < tol)
                         break;
                     }
                   coplanar_ends.push_back (i_end);
                   i_start = i_end;
diff --git a/scripts/plot/draw/private/__scatter__.m b/scripts/plot/draw/private/__scatter__.m
--- a/scripts/plot/draw/private/__scatter__.m
+++ b/scripts/plot/draw/private/__scatter__.m
@@ -196,49 +196,49 @@ function hg = __scatter__ (varargin)
 
     if (numel (s) == 1)
       s = repmat (s, numel (x), 1);
     endif
 
     if (one_explicit_color)
       for i = 1 : numel (x)
         if (filled)
-          __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+          __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                        "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                         "faces", 1, "vertices", [x(i), y(i), z(i,:)],
-                        "facecolor", "none", "edgecolor", "none",
                         "marker", marker,  "markersize", s(i),
                         "markeredgecolor", c, "markerfacecolor", c,
                         "linestyle", "none");
         else
-          __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+          __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                        "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                         "faces", 1, "vertices", [x(i), y(i), z(i,:)],
-                        "facecolor", "none", "edgecolor", "none",
                         "marker", marker,  "markersize", s(i),
                         "markeredgecolor", c, "markerfacecolor", "none",
                         "linestyle", "none");
         endif
       endfor
     else
       if (rows (c) == 1)
         c = repmat (c, rows (x), 1);
       endif
       for i = 1 : numel (x)
         if (filled)
-          __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+          __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                        "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                         "faces", 1, "vertices", [x(i), y(i), z(i,:)],
-                        "facecolor", "none", "edgecolor", "none",
                         "marker", marker, "markersize", s(i),
                         "markeredgecolor", "none",
                         "markerfacecolor", "flat",
                         "cdata", c(i,:), "facevertexcdata", c(i,:),
                         "linestyle", "none");
         else
-          __go_patch__ (hg, "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
+          __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                        "xdata", x(i), "ydata", y(i), "zdata", z(i,:),
                         "faces", 1, "vertices", [x(i), y(i), z(i,:)],
-                        "facecolor", "none", "edgecolor", "none",
                         "marker", marker, "markersize", s(i),
                         "markeredgecolor", "flat",
                         "markerfacecolor", "none",
                         "cdata", c(i,:), "facevertexcdata", c(i,:),
                         "linestyle", "none");
         endif
       endfor
     endif
@@ -325,46 +325,46 @@ function render_size_color (hg, vert, s,
     toolkit = get (ancestor (hg, "figure"), "__graphics_toolkit__");
     ## Does gnuplot only support triangles with different vertex colors ?
     ## FIXME: Verify gnuplot can only support one color.  If RGB triplets
     ##        can be assigned to each vertex, then fix __gnuplot_draw_axes__.m
     gnuplot_hack = (numel (x) > 1 && columns (c) == 3
                     && strcmp (toolkit, "gnuplot"));
     if (ischar (c) || ! isflat || gnuplot_hack)
       if (filled)
-        __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
+        __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                          "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
-                          "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
                           "markeredgecolor", "none",
                           "markerfacecolor", c(1,:),
                           "markersize", s, "linestyle", "none");
       else
-        __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
+        __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                          "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
-                          "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
                           "markeredgecolor", c(1,:),
                           "markerfacecolor", "none",
                           "markersize", s, "linestyle", "none");
       endif
     else
       if (filled)
-        __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
+        __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                          "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
-                          "facecolor", "none", "edgecolor", "none",
                           "marker", marker, "markersize", s,
                           "markeredgecolor", "none",
                           "markerfacecolor", "flat",
                           "cdata", c, "facevertexcdata", c,
                           "linestyle", "none");
       else
-        __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
+        __go_patch__ (hg, "facecolor", "none", "edgecolor", "none",
+                          "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
-                          "facecolor", "none", "edgecolor", "none",
                           "marker", marker, "markersize", s,
                           "markeredgecolor", "flat",
                           "markerfacecolor", "none",
                           "cdata", c, "facevertexcdata", c,
                           "linestyle", "none");
       endif
     endif
   else
