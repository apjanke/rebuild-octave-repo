# HG changeset patch
# User jwe
# Date 1142964946 0
#      Tue Mar 21 18:15:46 2006 +0000
# Node ID 252b6754e54518bc2c1e17d2ce145f86c29dc758
# Parent  67118c88cee7d688410fcf06e7a51b4b2b0065ca
[project @ 2006-03-21 18:15:42 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-21  John W. Eaton  <jwe@octave.org>
+
+	* misc/f77-fcn.h (F77_XFCN): Save octave_interrupt_immediately and
+	restore it if an exception occurs that causes a longjmp.
+
 2005-11-01  John W. Eaton  <jwe@octave.org>
 
 	* ranlib/ignbin.f, ranlib/ignpoi.f: Avoid arithmetic IF statements.
 
 2005-10-17  John W. Eaton  <jwe@octave.org>
 
 	* lapack/Makefile.in (dlamc1.o pic/dlamc1.o):
 	Add $(F77_FLOAT_STORE_FLAG) to FFLAGS.
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -49,19 +49,21 @@ extern "C" {
    to the top level.  The error_state should be checked immediately
    after this macro is used. */
 
 #define F77_XFCN(f, F, args) \
   do \
     { \
       octave_jmp_buf saved_context; \
       f77_exception_encountered = 0; \
+      sig_atomic_t saved_octave_interrupt_immediately = octave_interrupt_immediately; \
       octave_save_current_context ((char *) saved_context); \
       if (octave_set_current_context) \
 	{ \
+	  octave_interrupt_immediately = saved_octave_interrupt_immediately; \
           octave_restore_current_context ((char *) saved_context); \
 	  if (f77_exception_encountered) \
 	    F77_XFCN_ERROR (f, F); \
           else if (octave_allocation_error) \
             octave_throw_bad_alloc (); \
           else \
             octave_throw_interrupt_exception (); \
 	} \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,17 +1,17 @@
 2006-03-21  John W. Eaton  <jwe@octave.org>
 
 	* lo-specfun.cc (betainc): Use F77_XFCN instead of F77_FUNC for
 	call to xdbetai.
 
 2006-03-21  David Bateman  <dbateman@free.fr>
 
-	* lo-specfun.cc (xlgamma): Require arg strictly greater than 0.
-	Use F77_XFCN instead of F77_FUNC for call to dlgams.
+	* lo-specfun.cc (xlgamma, xgamma): Trap special values.
+	(xlgamma): Use F77_XFCN instead of F77_FUNC for call to dlgams.
 
 	* dSparse.cc (solve): Add argument singular_fallback, to allow
 	fallback to QR solvers to be optional.
 	* CSparse.cc (solve): Ditto.
 	* dSparse.h (solve): update declaration for new argument.
 	* CSparse.h (solve): Ditto.
 	* sparse-dmsolve.cc (dmsolve): Use singular_fallback argument
 	to bypass QR solvers when solving the well determined part of
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -32,16 +32,17 @@ 02110-1301, USA.
 #include "dMatrix.h"
 #include "dNDArray.h"
 #include "CNDArray.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "mx-inlines.cc"
+#include "lo-mappers.h"
 
 #ifndef M_PI
 #define M_PI 3.14159265358979323846
 #endif
 
 extern "C"
 {
   F77_RET_T
@@ -155,29 +156,36 @@ erfc (double x)
   return retval;
 }
 #endif
 
 double
 xgamma (double x)
 {
   double result;
-  F77_XFCN (xdgamma, XDGAMMA, (x, result));
+
+  if (xisnan (x))
+    result = x;
+  else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
+    result = octave_Inf;
+  else
+    F77_XFCN (xdgamma, XDGAMMA, (x, result));
   return result;
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
 
-  if (x <= 0)
-    (*current_liboctave_error_handler)
-      ("xlgamma: argument must be nonnegative");
+  if (xisnan (x))
+    result = x;
+  else if (x <= 0 || xisinf (x))
+    result = octave_Inf;
   else
     F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
 }
 
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
