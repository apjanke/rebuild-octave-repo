# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453241396 28800
#      Tue Jan 19 14:09:56 2016 -0800
# Node ID 3d0d84305600efdbb70db6e31e9dd8cfb147cfd2
# Parent  bd1752782e561c43d54c7b6ad2c26151346434cf
Use err_square_matrix_required more widely.

* errwarn.h (err_square_matrix_required): Change prototype to take a second
argument which is the name of the variable that is not square.

* errwarn.cc (err_square_matrix_required): Take second argument NAME and
print "NAME must be a square matrix".

* balance.cc (Fbalance): Update calling form of err_square_matrix_required.

* det.cc (Fdet): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* eig.cc (Feig): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* hess.cc (Fhess): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* inv.cc (Finv): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* qz.cc (Fqz): Update calling form of err_square_matrix_required.

* schur.cc (Fschur): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* sqrtm.cc (Fsqrtm): Update calling form of err_square_matrix_required.

* sylvester.cc (Fsylvester): Update calling form of err_square_matrix_required.
Update pattern in BIST tests to match new output.

* amd.cc (Famd): Switch from error to err_square_matrix_required.
Update pattern in BIST tests to match new output.

* ccolamd.cc (Fcsymamd): Switch from error to err_square_matrix_required.

* chol.cc (Fcholdelete, Fcholshift): Switch from error to
err_square_matrix_required.

* colamd.cc (Fsymamd): Switch from error to err_square_matrix_required.

* symbfact.cc (Fsymfact): Switch from error to err_square_matrix_required.

* symrcm.cc (Fsymrcm): Update calling form of err_square_matrix_required.

diff --git a/libinterp/corefcn/balance.cc b/libinterp/corefcn/balance.cc
--- a/libinterp/corefcn/balance.cc
+++ b/libinterp/corefcn/balance.cc
@@ -100,17 +100,17 @@ Generalized eigenvalue problem balancing
 
   // determine if it's AEP or GEP
   bool AEPcase = nargin == 1 || args(1).is_string ();
 
   // problem dimension
   octave_idx_type nn = args(0).rows ();
 
   if (nn != args(0).columns ())
-    err_square_matrix_required ("balance");
+    err_square_matrix_required ("balance", "A");
 
   bool isfloat = args(0).is_single_type ()
                  || (! AEPcase && args(1).is_single_type ());
 
   bool complex_case = args(0).is_complex_type ()
                       || (! AEPcase && args(1).is_complex_type ());
 
   // Extract argument 1 parameter for both AEP and GEP.
diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -77,17 +77,17 @@ For that, use any of the condition numbe
 
   int arg_is_empty = empty_arg ("det", nr, nc);
   if (arg_is_empty < 0)
     return ovl ();
   if (arg_is_empty > 0)
     return octave_value (1.0);
 
   if (nr != nc)
-    err_square_matrix_required ("det");
+    err_square_matrix_required ("det", "A");
 
   octave_value_list retval (2);
 
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
       if (nargout <= 1)
@@ -232,10 +232,10 @@ For that, use any of the condition numbe
   return retval;
 }
 
 /*
 %!assert (det ([1, 2; 3, 4]), -2, 10*eps)
 %!assert (det (single ([1, 2; 3, 4])), single (-2), 10*eps ("single"))
 %!error det ()
 %!error det (1, 2)
-%!error <argument must be a square matrix> det ([1, 2; 3, 4; 5, 6])
+%!error <must be a square matrix> det ([1, 2; 3, 4; 5, 6])
 */
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -93,20 +93,20 @@ The eigenvalues returned by @code{eig} a
       if (!(arg_b.is_single_type () || arg_b.is_double_type ()))
         {
           err_wrong_type_arg ("eig", arg_b);
           return retval;
         }
     }
 
   if (nr_a != nc_a)
-    err_square_matrix_required ("eig");
+    err_square_matrix_required ("eig", "A");
 
   if (nargin == 2 && nr_b != nc_b)
-    err_square_matrix_required ("eig");
+    err_square_matrix_required ("eig", "B");
 
   Matrix tmp_a, tmp_b;
   ComplexMatrix ctmp_a, ctmp_b;
   FloatMatrix ftmp_a, ftmp_b;
   FloatComplexMatrix fctmp_a, fctmp_b;
 
   if (arg_a.is_single_type ())
     {
@@ -291,13 +291,13 @@ The eigenvalues returned by @code{eig} a
 %! A = single ([1, 1+i; 1-i, 1]);  B = single ([2, 0; 0, 2]);
 %! [v, d] = eig (A, B);
 %! assert (A * v(:, 1), d(1, 1) * B * v(:, 1), sqrt (eps ("single")));
 %! assert (A * v(:, 2), d(2, 2) * B * v(:, 2), sqrt (eps ("single")));
 
 %!error eig ()
 %!error eig ([1, 2; 3, 4], [4, 3; 2, 1], 1)
 %!error <EIG requires same size matrices> eig ([1, 2; 3, 4], 2)
-%!error <argument must be a square matrix> eig ([1, 2; 3, 4; 5, 6])
+%!error <must be a square matrix> eig ([1, 2; 3, 4; 5, 6])
 %!error <wrong type argument> eig ("abcd")
 %!error <wrong type argument> eig ([1 2 ; 2 3], "abcd")
 %!error <wrong type argument> eig (false, [1 2 ; 2 3])
 */
diff --git a/libinterp/corefcn/errwarn.cc b/libinterp/corefcn/errwarn.cc
--- a/libinterp/corefcn/errwarn.cc
+++ b/libinterp/corefcn/errwarn.cc
@@ -104,19 +104,19 @@ err_not_implemented (const char *fcn)
 
 void
 err_range_invalid (void)
 {
   error ("range constant used in invalid context");
 }
 
 void
-err_square_matrix_required (const char *name)
+err_square_matrix_required (const char *fcn, const char *name)
 {
-  error ("%s: argument must be a square matrix", name);
+  error ("%s: %s must be a square matrix", fcn, name);
 }
 
 void
 err_string_invalid (void)
 {
   error ("std::string constant used in invalid context");
 }
 
diff --git a/libinterp/corefcn/errwarn.h b/libinterp/corefcn/errwarn.h
--- a/libinterp/corefcn/errwarn.h
+++ b/libinterp/corefcn/errwarn.h
@@ -66,17 +66,17 @@ void err_nonconformant (octave_idx_type 
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void err_not_implemented (const char *);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void err_range_invalid (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern
-void err_square_matrix_required (const char *name);
+void err_square_matrix_required (const char *fcn, const char *name);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void err_string_invalid (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void err_unrecognized_data_fmt (const char *name);
 
 OCTAVE_NORETURN OCTINTERP_API extern
diff --git a/libinterp/corefcn/hess.cc b/libinterp/corefcn/hess.cc
--- a/libinterp/corefcn/hess.cc
+++ b/libinterp/corefcn/hess.cc
@@ -75,17 +75,17 @@ IEEE Transactions on Automatic Control, 
   int arg_is_empty = empty_arg ("hess", nr, nc);
 
   if (arg_is_empty < 0)
     return ovl ();
   else if (arg_is_empty > 0)
     return octave_value_list (2, Matrix ());
 
   if (nr != nc)
-    err_square_matrix_required ("hess");
+    err_square_matrix_required ("hess", "A");
 
   octave_value_list retval;
 
   if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
         {
           FloatMatrix tmp = arg.float_matrix_value ();
@@ -154,10 +154,10 @@ IEEE Transactions on Automatic Control, 
 
 %!test
 %! a = single ([1, 2, 3; 5, 4, 6; 8, 7, 9]);
 %! [p, h] = hess (a);
 %! assert (p * h * p', a, sqrt (eps ("single")));
 
 %!error hess ()
 %!error hess ([1, 2; 3, 4], 2)
-%!error <argument must be a square matrix> hess ([1, 2; 3, 4; 5, 6])
+%!error <must be a square matrix> hess ([1, 2; 3, 4; 5, 6])
 */
diff --git a/libinterp/corefcn/inv.cc b/libinterp/corefcn/inv.cc
--- a/libinterp/corefcn/inv.cc
+++ b/libinterp/corefcn/inv.cc
@@ -69,17 +69,17 @@ sparse matrix if possible.\n\
   int arg_is_empty = empty_arg ("inverse", nr, nc);
 
   if (arg_is_empty < 0)
     return ovl ();
   else if (arg_is_empty > 0)
     return octave_value (Matrix ());
 
   if (nr != nc)
-    err_square_matrix_required ("inverse");
+    err_square_matrix_required ("inverse", "A");
 
   octave_value result;
   octave_idx_type info;
   double rcond = 0.0;
   float frcond = 0.0;
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
@@ -212,17 +212,17 @@ sparse matrix if possible.\n\
 }
 
 /*
 %!assert (inv ([1, 2; 3, 4]), [-2, 1; 1.5, -0.5], sqrt (eps))
 %!assert (inv (single ([1, 2; 3, 4])), single ([-2, 1; 1.5, -0.5]), sqrt (eps ("single")))
 
 %!error inv ()
 %!error inv ([1, 2; 3, 4], 2)
-%!error <argument must be a square matrix> inv ([1, 2; 3, 4; 5, 6])
+%!error <must be a square matrix> inv ([1, 2; 3, 4; 5, 6])
 
 %!test
 %! [xinv, rcond] = inv (single ([1,2;3,4]));
 %! assert (isa (xinv, 'single'));
 %! assert (isa (rcond, 'single'));
 
 %!test
 %! [xinv, rcond] = inv ([1,2;3,4]);
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -464,17 +464,17 @@ compatibility with @sc{matlab}.\n\
       return retval;
     }
   else if (arg_is_empty > 0)
     {
       warn_empty_arg ("qz: parameter 1; continuing");
       return octave_value_list (2, Matrix ());
     }
   else if (args(0).columns () != nn)
-    err_square_matrix_required ("qz");
+    err_square_matrix_required ("qz", "A");
 
   // Argument 1: dimensions look good; get the value.
   Matrix aa;
   ComplexMatrix caa;
 
   if (args(0).is_complex_type ())
     caa = args(0).complex_matrix_value ();
   else
diff --git a/libinterp/corefcn/schur.cc b/libinterp/corefcn/schur.cc
--- a/libinterp/corefcn/schur.cc
+++ b/libinterp/corefcn/schur.cc
@@ -162,17 +162,17 @@ in control (see @code{are} and @code{dar
           return ovl ();
         }
     }
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   if (nr != nc)
-    err_square_matrix_required ("schur");
+    err_square_matrix_required ("schur", "A");
 
   octave_value_list retval;
 
   if (! arg.is_numeric_type ())
     err_wrong_type_arg ("schur", arg);
   else if (arg.is_single_type ())
     {
       if (! force_complex && arg.is_real_type ())
@@ -256,17 +256,17 @@ in control (see @code{are} and @code{dar
 %!test
 %! a = single ([1, 2, 3; 4, 5, 9; 7, 8, 6]);
 %! [u, s] = schur (a);
 %! assert (u' * a * u, s, sqrt (eps ("single")));
 
 %!error schur ()
 %!error schur (1,2,3)
 %!error [a,b,c] = schur (1)
-%!error <argument must be a square matrix> schur ([1, 2, 3; 4, 5, 6])
+%!error <must be a square matrix> schur ([1, 2, 3; 4, 5, 6])
 %!error <wrong type argument 'cell'> schur ({1})
 %!warning <incorrect ordered schur argument> schur ([1, 2; 3, 4], "bad_opt");
 
 */
 
 DEFUN (rsf2csf, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{U}, @var{T}] =} rsf2csf (@var{UR}, @var{TR})\n\
diff --git a/libinterp/corefcn/sqrtm.cc b/libinterp/corefcn/sqrtm.cc
--- a/libinterp/corefcn/sqrtm.cc
+++ b/libinterp/corefcn/sqrtm.cc
@@ -216,17 +216,17 @@ Mathematics, Manchester, England, Januar
     print_usage ();
 
   octave_value arg = args(0);
 
   octave_idx_type n = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   if (n != nc || arg.ndims () > 2)
-    err_square_matrix_required ("sqrtm");
+    err_square_matrix_required ("sqrtm", "A");
 
   octave_value_list retval (nargout > 1 ? 3 : 1);
 
   if (nargout > 1)
     {
       // FIXME: Octave does not calculate a condition number with respect to
       //        sqrtm.  Should this return NaN instead of -1?
       retval(2) = -1.0;
diff --git a/libinterp/corefcn/sylvester.cc b/libinterp/corefcn/sylvester.cc
--- a/libinterp/corefcn/sylvester.cc
+++ b/libinterp/corefcn/sylvester.cc
@@ -92,20 +92,20 @@ sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [
     else
       return ovl (Matrix ());
   else if (arg_a_is_empty || arg_b_is_empty || arg_c_is_empty)
     return retval;
 
   // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc)
-    err_square_matrix_required ("sylvester: input A");
-  else if (b_nr != b_nc)
-    err_square_matrix_required ("sylvester: input B");
-  else if (a_nr != c_nr || b_nr != c_nc)
+    err_square_matrix_required ("sylvester", "A");
+  if (b_nr != b_nc)
+    err_square_matrix_required ("sylvester", "B");
+  if (a_nr != c_nr || b_nr != c_nc)
     err_nonconformant ();
 
   if (isfloat)
     {
       if (arg_a.is_complex_type ()
           || arg_b.is_complex_type ()
           || arg_c.is_complex_type ())
         {
@@ -161,12 +161,12 @@ sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [
 %!assert (sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12]), [1/2, 2/3; 2/3, 1/2], sqrt (eps))
 %!assert (sylvester (single ([1, 2; 3, 4]), single ([5, 6; 7, 8]), single ([9, 10; 11, 12])), single ([1/2, 2/3; 2/3, 1/2]), sqrt (eps ("single")))
 
 %% Test input validation
 %!error sylvester ()
 %!error sylvester (1)
 %!error sylvester (1,2)
 %!error sylvester (1, 2, 3, 4)
-%!error <input A: .* must be a square matrix> sylvester (ones (2,3), ones (2,2), ones (2,2))
-%!error <input B: .* must be a square matrix> sylvester (ones (2,2), ones (2,3), ones (2,2))
+%!error <A must be a square matrix> sylvester (ones (2,3), ones (2,2), ones (2,2))
+%!error <B must be a square matrix> sylvester (ones (2,2), ones (2,3), ones (2,2))
 %!error <nonconformant matrices> sylvester (ones (2,2), ones (2,2), ones (3,3))
 */
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <string>
 #include <vector>
 
 #include "ov.h"
 #include "defun-dld.h"
+#include "errwarn.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-map.h"
 
 #include "oct-sparse.h"
@@ -123,17 +124,17 @@ The author of the code itself is Timothy
 
       n_row = sm.rows ();
       n_col = sm.cols ();
       ridx = sm.xridx ();
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
-    error ("amd: matrix S must be square");
+    err_square_matrix_required ("amd", "S");
 
   OCTAVE_LOCAL_BUFFER (double, Control, AMD_CONTROL);
   AMD_NAME (_defaults) (Control) ;
   if (nargin > 1)
     {
       octave_scalar_map arg1 = args(1).xscalar_map_value ("amd: OPTS argument must be a scalar structure");
 
       octave_value tmp;
@@ -188,12 +189,12 @@ The author of the code itself is Timothy
 %!
 %!testif HAVE_AMD
 %! assert(amd (A2), [1:30])
 %! opts.dense = 25;
 %! assert(amd (A2, opts), [1:30])
 %! opts.aggressive = 1;
 %! assert(amd (A2, opts), [1:30])
 
-%!error <matrix S must be square|not available in this version> amd (A)
+%!error <S must be a square matrix|was unavailable or disabled> amd (A)
 %!error amd (A2, 2)
-%!error <matrix S is corrupted|not available in this version> amd ([])
+%!error <matrix S is corrupted|was unavailable or disabled> amd ([])
 */
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <string>
 #include <vector>
 
 #include "ov.h"
 #include "defun-dld.h"
+#include "errwarn.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
@@ -488,17 +489,17 @@ ccolamd, csymamd, amd, colamd, symamd, a
 
       n_row = sm.rows ();
       n_col = sm.cols ();
       ridx = sm.xridx ();
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
-    error ("csymamd: matrix S must be square");
+    err_square_matrix_required ("csymamd", "S");
 
   // Allocate workspace for symamd
   OCTAVE_LOCAL_BUFFER (octave_idx_type, perm, n_col+1);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, stats, CCOLAMD_STATS);
 
   if (nargin > 2)
     {
       NDArray in_cmember = args(2).array_value ();
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -1010,17 +1010,17 @@ triangular, return the Cholesky@tie{}fac
 
   if (! argr.is_numeric_type () || ! argj.is_real_scalar ())
     print_usage ();
 
   octave_idx_type n = argr.rows ();
   octave_idx_type j = argj.scalar_value ();
 
   if (argr.columns () != n)
-    error ("choldelete: matrix R must be square");
+    err_square_matrix_required ("choldelete", "R");
 
   if (j < 0 && j > n)
     error ("choldelete: index J out of range");
 
   octave_value_list retval;
 
   if (argr.is_single_type ())
     {
@@ -1139,17 +1139,17 @@ triangular, return the Cholesky@tie{}fac
       || ! argj.is_real_scalar ())
     print_usage ();
 
   octave_idx_type n = argr.rows ();
   octave_idx_type i = argi.scalar_value ();
   octave_idx_type j = argj.scalar_value ();
 
   if (argr.columns () != n)
-    error ("cholshift: R must be a square matrix");
+    err_square_matrix_required ("cholshift", "R");
 
   if (j < 0 || j > n+1 || i < 0 || i > n+1)
     error ("cholshift: index I or J is out of range");
 
   octave_value_list retval;
 
   if (argr.is_single_type () && argi.is_single_type ()
       && argj.is_single_type ())
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <string>
 #include <vector>
 
 #include "ov.h"
 #include "defun-dld.h"
+#include "errwarn.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
 #include "oct-locbuf.h"
@@ -574,17 +575,17 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
 
       n_row = sm.rows ();
       n_col = sm.cols ();
       ridx = sm.xridx ();
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
-    error ("symamd: matrix S must be square");
+    err_square_matrix_required ("symamd", "S");
 
   // Allocate workspace for symamd
   OCTAVE_LOCAL_BUFFER (octave_idx_type, perm, n_col+1);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, stats, COLAMD_STATS);
   if (! SYMAMD_NAME () (n_col, ridx, cidx, perm,
                        knobs, stats, &calloc, &free))
     {
       SYMAMD_NAME (_report) (stats) ;
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -189,17 +189,17 @@ factorization as determined by @var{typ}
         A->stype = 1;
       else if (ch == 's')
         A->stype = -1;
       else
         error ("symbfact: unrecognized TYP in symbolic factorization");
     }
 
   if (A->stype && A->nrow != A->ncol)
-    error ("symbfact: S must be a square matrix");
+    err_square_matrix_required ("symbfact", "S");
 
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Parent, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Post, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, ColCount, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, First, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Level, n);
 
   cholmod_sparse *F = CHOLMOD_NAME(transpose) (A, 0, cm);
diff --git a/libinterp/dldfcn/symrcm.cc b/libinterp/dldfcn/symrcm.cc
--- a/libinterp/dldfcn/symrcm.cc
+++ b/libinterp/dldfcn/symrcm.cc
@@ -464,17 +464,17 @@ Mathematics, ISBN 0-13-165274-5, 1981.\n
       cidx = Ac.xcidx ();
       ridx = Ac.xridx ();
     }
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   if (nr != nc)
-    err_square_matrix_required ("symrcm");
+    err_square_matrix_required ("symrcm", "S");
 
   if (nr == 0 && nc == 0)
     return ovl (NDArray (dim_vector (1, 0)));
 
   // sizes of the heaps
   octave_idx_type s = 0;
 
   // head- and tail-indices for the queue
