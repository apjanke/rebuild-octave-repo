# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1338303040 18000
#      Tue May 29 09:50:40 2012 -0500
# Node ID d4d9a64db6aa78c243e83af853992084fd084849
# Parent  168cb10bb9c587604d3a8441dedca837e96b9461
Treat undefined as any

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -582,17 +582,17 @@ jit_typeinfo::create_identity (jit_type 
     }
 
   return identities[id];
 }
 
 jit_type *
 jit_typeinfo::do_type_of (const octave_value &ov) const
 {
-  if (ov.is_undefined () || ov.is_function ())
+  if (ov.is_function ())
     return 0;
 
   if (ov.is_double_type () && ov.is_real_scalar ())
     return get_scalar ();
 
   if (ov.is_range ())
     return get_range ();
 
@@ -814,17 +814,18 @@ jit_convert::jit_convert (llvm::Module *
   // also get anything from jit_extract_argument, as these have constant types
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
     {
       jit_instruction *instr = *iter;
       if (jit_extract_argument *extract = dynamic_cast<jit_extract_argument *>(instr))
         {
           if (! extract->type ())
-            fail (); // we depend on an unknown type
+            // we depend on an unknown type
+            fail ("Unknown initial type: \"" + extract->tag () + "\""); 
           append_users (extract);
         }
     }
 
   // FIXME: Describe algorithm here
   while (worklist.size ())
     {
       jit_instruction *next = worklist.front ();
