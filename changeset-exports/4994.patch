# HG changeset patch
# User jwe
# Date 1095280291 0
#      Wed Sep 15 20:31:31 2004 +0000
# Node ID 48d0defe944554ec53d43208267948a11426e9cf
# Parent  761b8d7607858c8edc9b48f81939b9a290e28d37
[project @ 2004-09-15 20:31:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2004-09-15  John W. Eaton  <jwe@octave.org>
+
+	* ov-cell.cc (octave_cell::subsref): Pass nargout to next_subsref.
+	* ov-builtin.cc (octave_builtin::subsref): Likewise.
+	* ov-fcn-handle.cc (octave_fcn_handle::subsref): Likewise.
+	* ov-list.cc (octave_list::subsref): Likewise.
+	* ov-mapper.cc (octave_mapper::subsref): Likewise.
+	* ov-struct.cc (octave_struct::subsref): Likewise.
+	* ov-usr-fcn.cc (octave_user_function::subsref): Likewise.
+
+	* ov-struct.cc, ov-struct.h (octave_struct::subsref (const
+	std::string&, const std::list<octave_value_list>&, int)):
+	Define this version.
+	(octave_struct::subsref (const std::string&, const
+	std::list<octave_value_list>&)): Panic in this version.
+	* ov-list.cc, ov-list.h: Likewise.
+	* ov-cell.cc, ov-cell.h: Likewise.
+
+	* ov.cc (octave_value::subsref (int, const std::string&, const
+	std::list<octave_value_list>&, size_t)): New function.
+	* ov.h: Provide decl.	
+
+	* ov-cell.h (octave_cell::is_constant): Return false.
+	* ov-struct.h (octave_struct::is_constant): Delete.
+	* ov-list.h (octave_list::is_constant): Delete.
+
 2004-09-14  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sort.cc (mx_sort (charNDArray&, bool, int)):
 	New function to sort character strings.
 	(Fsort): Handle character strings.
 
 2004-09-11  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -86,17 +86,17 @@ octave_builtin::subsref (const std::stri
   //
   // XXX FIXME XXX -- Note that if a function call returns multiple
   // values, and there is further indexing to perform, then we are
   // ignoring all but the first value.  Is this really what we want to
   // do?  If it is not, then what should happen for stat("file").size,
   // for exmaple?
 
   if (idx.size () > 1)
-    retval = retval(0).next_subsref (type, idx);
+    retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
 octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -53,68 +53,75 @@ Software Foundation, 59 Temple Place - S
 #include "ls-utils.h"
 
 template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
-octave_value
+octave_value_list
 octave_cell::subsref (const std::string& type,
-		      const std::list<octave_value_list>& idx)
+		      const std::list<octave_value_list>& idx, int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
-      retval = do_index_op (idx.front ());
+      retval(0) = do_index_op (idx.front ());
       break;
 
     case '{':
       {
 	octave_value tmp = do_index_op (idx.front ());
 
 	if (! error_state)
 	  {
 	    Cell tcell = tmp.cell_value ();
 
 	    if (tcell.length () == 1)
-	      retval = tcell(0,0);
+	      retval(0) = tcell(0,0);
 	    else
 	      {
 		int n = tcell.numel ();
 
 		octave_value_list lst (n, octave_value ());
 
 		for (int i = 0; i < n; i++)
 		  {
 		    OCTAVE_QUIT;
 		    lst(i) = tcell(i);
 		  }
 
-		retval = octave_value (lst, true);
+		retval(0) = octave_value (lst, true);
 	      }
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
       break;
 
     default:
       panic_impossible ();
     }
 
-  return retval.next_subsref (type, idx);
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_user_function::subsref.
+
+  if (idx.size () > 1)
+    retval = retval(0).next_subsref (nargout, type, idx);
+
+  return retval;
 }
 
 octave_value
 octave_cell::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
 {
   octave_value retval;
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -68,38 +68,41 @@ public:
 
   octave_value *clone (void) const { return new octave_cell (*this); }
   octave_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_value *try_narrowing_conversion (void);
 #endif
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx);
-
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+			     int nargout);
+
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   size_t byte_size (void) const;
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
+  bool is_constant (void) const { return false; }
+
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const
     { return all_strings (pad, force); }
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -87,17 +87,17 @@ octave_fcn_handle::subsref (const std::s
       panic_impossible ();
     }
 
   // XXX FIXME XXX -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_builtin::subsref.
 
   if (idx.size () > 1)
-    retval = retval(0).next_subsref (type, idx);
+    retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os, bool&, bool)
 {
   os << nm << "\n";
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include "lo-sstream.h"
 #include "lo-utils.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
+#include "ov.h"
 #include "ov-list.h"
 #include "unwind-prot.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
@@ -55,35 +56,35 @@ octave_list::octave_list (const Cell& c)
   int n = c.length ();
 
   data.resize (dim_vector (1, n));
 
   for (int i = 0; i < n; i++)
     data(i) = c(i);
 }
 
-octave_value
+octave_value_list
 octave_list::subsref (const std::string& type,
-		      const std::list<octave_value_list>& idx)
+		      const std::list<octave_value_list>& idx, int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
 	octave_value_list tmp_idx = idx.front ();
 
 	if (tmp_idx.length () == 1)
 	  {
 	    idx_vector i = tmp_idx (0).index_vector ();
 
 	    Cell tmp = data.index (i);
 
-	    retval = octave_value (new octave_list (tmp));
+	    retval(0) = octave_value (new octave_list (tmp));
 	  }
 	else
 	  error ("only one index allowed for lists");
       }
       break;
 
     case '{':
       {
@@ -91,19 +92,19 @@ octave_list::subsref (const std::string&
 
 	if (tmp_idx.length () == 1)
 	  {
 	    idx_vector i = tmp_idx (0).index_vector ();
 
 	    Cell tmp = data.index (i);
 
 	    if (tmp.length () == 1)
-	      retval = tmp(0);
+	      retval(0) = tmp(0);
 	    else
-	      retval = octave_value (tmp, true);
+	      retval(0) = octave_value (tmp, true);
 	  }
 	else
 	  error ("only one index allowed for lists");
       }
       break;
 
     case '.':
       {
@@ -111,17 +112,24 @@ octave_list::subsref (const std::string&
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
       break;
 
     default:
       panic_impossible ();
     }
 
-  return retval.next_subsref (type, idx);
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_user_function::subsref.
+
+  if (idx.size () > 1)
+    retval = retval(0).next_subsref (nargout, type, idx);
+
+  return retval;
 }
 
 octave_value
 octave_list::do_index_op (const octave_value_list& idx, int resize_ok)
 {
   octave_value retval;
 
   if (idx.length () == 1)
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -61,42 +61,41 @@ public:
   octave_list (const octave_list& l)
     : octave_base_value (), data (l.data) { }
 
   ~octave_list (void) { }
 
   octave_value *clone (void) const { return new octave_list (*this); }
   octave_value *empty_clone (void) const { return new octave_list (); }
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx);
-
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+			     int nargout);
+
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   dim_vector dims (void) const { return dim_vector (1, data.length ()); }
 
   size_t byte_size (void) const;
 
   bool is_defined (void) const { return true; }
 
-  bool is_constant (void) const { return true; }
-
   bool is_list (void) const { return true; }
 
   octave_value_list list_value (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -260,18 +260,22 @@ octave_mapper::subsref (const std::strin
       break;
 
     default:
       panic_impossible ();
     }
 
   return retval;
 
-  // XXX FIXME XXX
-  //  return retval.next_subsref (type, idx);
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // and octave_builtin::subsref.
+
+  if (idx.size () > 1)
+    retval = retval(0).next_subsref (nargout, type, idx);
 }
 
 octave_value_list
 octave_mapper::do_multi_index_op (int, const octave_value_list& args)
 {
   octave_value retval;
 
   if (error_state)
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -92,21 +92,22 @@ gripe_invalid_index_type (const std::str
 }
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
-octave_value
+octave_value_list
 octave_struct::subsref (const std::string& type,
-			const std::list<octave_value_list>& idx)
+			const std::list<octave_value_list>& idx,
+			int nargout)
 {
-  octave_value retval;
+  octave_value_list retval;
 
   int skip = 1;
 
   switch (type[0])
     {
     case '(':
       {
 	if (type.length () > 1 && type[1] == '.')
@@ -115,47 +116,51 @@ octave_struct::subsref (const std::strin
 	    octave_value_list key_idx = *++p;
 
 	    Cell tmp = dotref (key_idx);
 
 	    if (! error_state)
 	      {
 		Cell t = tmp.index (idx.front ());
 
-		retval = (t.length () == 1) ? t(0) : octave_value (t, true);
+		retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
 
 		// We handled two index elements, so tell
 		// next_subsref to skip both of them.
 
 		skip++;
 	      }
 	  }
 	else
-	  retval = map.index (idx.front ());
+	  retval(0) = map.index (idx.front ());
       }
       break;
 
     case '.':
       {
 	Cell t = dotref (idx.front ());
 
-	retval = (t.length () == 1) ? t(0) : octave_value (t, true);
+	retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
       }
       break;
 
     case '{':
       gripe_invalid_index_type (type_name (), type[0]);
       break;
 
     default:
       panic_impossible ();
     }
 
-  if (! error_state)
-    retval = retval.next_subsref (type, idx, skip);
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_user_function::subsref.
+
+  if (idx.size () > 1)
+    retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value
 octave_struct::numeric_conv (const Cell& val,
 			     const std::string& type)
 {
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -64,26 +64,27 @@ public:
 
   ~octave_struct (void) { }
 
   octave_value *clone (void) const { return new octave_struct (*this); }
   octave_value *empty_clone (void) const { return new octave_struct (); }
 
   Cell dotref (const octave_value_list& idx);
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx);
-
-  octave_value_list subsref (const std::string&,
-			     const std::list<octave_value_list>&, int)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+			     int nargout);
+
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   dim_vector dims (void) const { return map.dims (); }
@@ -93,18 +94,16 @@ public:
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
   octave_value resize (const dim_vector& dv) const
     { return map.resize (dv); }
 
   bool is_defined (void) const { return true; }
 
-  bool is_constant (void) const { return true; }
-
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const { return map.keys (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -313,17 +313,17 @@ octave_user_function::subsref (const std
       panic_impossible ();
     }
 
   // XXX FIXME XXX -- perhaps there should be an
   // octave_value_list::next_subsref member function?  See also
   // octave_builtin::subsref.
 
   if (idx.size () > 1)
-    retval = retval(0).next_subsref (type, idx);
+    retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
 octave_user_function::do_multi_index_op (int nargout,
 					 const octave_value_list& args)
 {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -839,16 +839,32 @@ octave_value::next_subsref (const std::s
 	new_idx.erase (new_idx.begin ());
       return subsref (type.substr (skip), new_idx);
     }
   else
     return *this;
 }
 
 octave_value_list
+octave_value::next_subsref (int nargout, const std::string& type,
+			    const std::list<octave_value_list>& idx,
+			    size_t skip) 
+{
+  if (! error_state && idx.size () > skip)
+    {
+      std::list<octave_value_list> new_idx (idx);
+      for (size_t i = 0; i < skip; i++)
+	new_idx.erase (new_idx.begin ());
+      return subsref (type.substr (skip), new_idx, nargout);
+    }
+  else
+    return *this;
+}
+
+octave_value_list
 octave_value::do_multi_index_op (int nargout, const octave_value_list& idx)
 {
   return rep->do_multi_index_op (nargout, idx);
 }
 
 static void
 gripe_no_conversion (const std::string& on, const std::string& tn1,
 		     const std::string& tn2)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -313,16 +313,21 @@ public:
   virtual octave_value_list subsref (const std::string& type,
 				     const std::list<octave_value_list>& idx,
     				     int nargout);
 
   octave_value next_subsref (const std::string& type, const
 			     std::list<octave_value_list>& idx,
 			     size_t skip = 1);
 
+  octave_value_list next_subsref (int nargout,
+				  const std::string& type, const
+				  std::list<octave_value_list>& idx,
+				  size_t skip = 1);
+
   virtual octave_value do_index_op (const octave_value_list& idx,
 				    int resize_ok)
     { return rep->do_index_op (idx, resize_ok); }
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   virtual octave_value_list
