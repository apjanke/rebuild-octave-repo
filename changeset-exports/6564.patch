# HG changeset patch
# User jwe
# Date 1177356816 0
#      Mon Apr 23 19:33:36 2007 +0000
# Node ID efa1716abd4c04828b76a8c189e752e10d485559
# Parent  7a65c1a09ec320cbd867de20ec9d913a24df8b22
[project @ 2007-04-23 19:32:01 by jwe]

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -60,20 +60,20 @@ empty_to_nan (const octave_value& val)
 
 // ---------------------------------------------------------------------
 
 class color_property
 {
 public:
   color_property (double r = 0, double g = 0, double b = 1, double a = 1)
   {
-    rgba[0] = r;
-    rgba[1] = g;
-    rgba[2] = b;
-    rgba[3] = a;
+    xrgba[0] = r;
+    xrgba[1] = g;
+    xrgba[2] = b;
+    xrgba[3] = a;
 
     validate ();
   }
 
   color_property (char c)
   {
     c2rgba (c);
   }
@@ -82,103 +82,103 @@ public:
   {
     // FIXME -- need some error checking here.
 
     Matrix m = val.matrix_value ();
 
     if (! error_state && m.numel () >= 3 && m.numel () <= 4)
       {
 	for (int i = 0; i < m.numel (); i++)
-	  rgba[i] = m(i);
+	  xrgba[i] = m(i);
 
 	validate ();
       }
     else 
       {
 	std::string c = val.string_value ();
 
 	if (! error_state && c.length () == 1)
-	  c2rgb(c[0]);
+	  c2rgba (c[0]);
 	else
 	  error ("invalid color specification");
       }
   }
 
   void validate (void) const
   {
     for (int i = 0; i < 4; i++)
       {
-	if (rgba[i] < 0 ||  rgba[i] > 1)
+	if (xrgba[i] < 0 ||  xrgba[i] > 1)
 	  {
 	    error ("invalid RGB color specification");
 	    break;
 	  }
       }
   }
 
   operator octave_value (void) const
   {
     Matrix retval (1, 4);
 
     for (int i = 0; i < 4 ; i++)
-      retval(i) = rgba[i];
+      retval(i) = xrgba[i];
 
     return retval;
   }
 
   const double* rgba (void) const
   {
-    return rgba;
+    return xrgba;
   }
 
 private:
-  double rgba[4];
+  double xrgba[4];
 
   void c2rgba (char c)
   {
     double tmp_rgba[4] = {0,0,0,1};
 
     switch(c) 
       {
       case 'r':
-	tmp_rgb[0] = 1;	
+	tmp_rgba[0] = 1;	
 	break;	
 
       case 'g': 
-	tmp_rgb[1] = 1;
+	tmp_rgba[1] = 1;
 	break;
 
       case 'b':
-	tmp_rgb[2] = 1; 
+	tmp_rgba[2] = 1; 
 	break;
 
       case 'c': 	
-	tmp_rgb[1] = tmp_rgb[2] = 1;
+	tmp_rgba[1] = tmp_rgba[2] = 1;
 	break;
 
       case 'm':
-	tmp_rgb[0] = tmp_rgb[2] = 1;
+	tmp_rgba[0] = tmp_rgba[2] = 1;
 	break;
 
       case 'y': 
-	tmp_rgb[0] = tmp_rgb[1] = 1;
+	tmp_rgba[0] = tmp_rgba[1] = 1;
 	break;
 
       case 'w': 
-	tmp_rgb[0] = tmp_rgb[1] = tmp_rgb[2] = 1;
+	tmp_rgba[0] = tmp_rgba[1] = tmp_rgba[2] = 1;
 	break;
 
       default:
 	error ("invalid color specification");
       }
 
     if (! error_state)
       {
 	for (int i = 0; i < 4; i++)
-	  rgba[i] = tmp_rgba[i];
+	  xrgba[i] = tmp_rgba[i];
       }
   }
 };
 
 class colormap_property
 {
 public:
   colormap_property (const Matrix& m = Matrix ())
