# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1281343574 14400
#      Mon Aug 09 04:46:14 2010 -0400
# Node ID 988d16d5ae34ba8aa7a5956f78c4fc5a9c304adb
# Parent  333bf09e3b6e6d4834c0a7e11564f1d7e2a1ece2
correctly .m files that are empty or contain only comments

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-08-09  John W. Eaton  <jwe@octave.org>
+
+	* oct-parse.yy (parse_fcn_file): Handle empty script files
+	(bug #30588).
+
 2010-08-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::assign (assign_op, const std::string&,
 	const std::list<octave_value_list>&, const octave_value&):
 	Don't attempt to fix struct assignment to non-struct values here.
 	Check for successful assignment before overwriting this.
 
 	* ov-cell.cc (octave_cell::subsasgn): Allow dot assignment into empty
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -3483,16 +3483,19 @@ parse_fcn_file (const std::string& ff, c
   frame.add_fcn (safe_fclose, ffile);
 
   if (ffile)
     {
       bool eof;
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
+      if (! help_txt.empty ())
+        help_buf.push (help_txt);
+
       if (! eof)
         {
           std::string file_type;
 
           frame.protect_var (get_input_from_eval_string);
           frame.protect_var (parser_end_of_input);
           frame.protect_var (reading_fcn_file);
           frame.protect_var (reading_script_file);
@@ -3548,19 +3551,16 @@ parse_fcn_file (const std::string& ff, c
           reset_parser ();
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt. 
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-          if (! help_txt.empty ())
-            help_buf.push (help_txt);
-
           if (reading_script_file)
             prep_lexer_for_script_file ();
           else
             prep_lexer_for_function_file ();
 
           lexer_flags.parsing_class_method = ! dispatch_type.empty ();
 
           int status = yyparse ();
@@ -3571,16 +3571,25 @@ parse_fcn_file (const std::string& ff, c
             warning_with_id ("Octave:nested-functions-coerced",
                              "nested functions are coerced into subfunctions "
                              "in file %s", ff.c_str ());
 
           if (status != 0)
             error ("parse error while reading %s file %s",
                    file_type.c_str(), ff.c_str ());
         }
+      else
+        {
+          tree_statement *end_of_script
+            = make_end ("endscript", input_line_number, current_input_column);
+
+          make_script (0, end_of_script);
+
+          fcn_ptr = primary_fcn_ptr;
+        }
     }
   else if (require_file)
     error ("no such file, `%s'", ff.c_str ());
   else if (! warn_for.empty ())
     error ("%s: unable to open file `%s'", warn_for.c_str (), ff.c_str ());    
 
   return fcn_ptr;
 }
