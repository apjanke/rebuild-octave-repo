# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514330623 28800
#      Tue Dec 26 15:23:43 2017 -0800
# Node ID 19d63669d174098b7ec7ddfb4bb13c255dc82f19
# Parent  a94a1d742938b31745478b7618a0749892c71362
Don't use "userdata" property internally for legend private data.

* legend.m: Replace struct stored in "userdata" with setappdata/getappdata.
Use "handle" appdata property to store handle of graphic object referenced
by legend or by line listener objects.  Use "nocallbacks" appdata property to
stop recursion in legend callbacks.

* __getlegenddata__.m, __errplot__.m, __plt__.m, axes.m,
__gnuplot_draw_axes__.m, __gnuplot_draw_figure__.m: Replace occurrences
of 'get (h, "userdata")' with 'getappdata (h, "handle")'.

* struct2hdl.m: Remove "__appdata__" property from list of properties
to restore.

diff --git a/scripts/plot/appearance/__getlegenddata__.m b/scripts/plot/appearance/__getlegenddata__.m
--- a/scripts/plot/appearance/__getlegenddata__.m
+++ b/scripts/plot/appearance/__getlegenddata__.m
@@ -20,17 +20,17 @@
 ## @deftypefn {} {[@var{hplots}, @var{strings}] =} __getlegenddata__ (@var{h})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [hplots, text_strings] = __getlegenddata__ (hlegend)
 
   hplots = [];
   text_strings = {};
-  ca = getfield (get (hlegend, "userdata"), "handle");
+  ca = getappdata (hlegend, "handle");
   if (numel (ca) == 1)
     kids = get (ca, "children");
   else
     kids = cell2mat (get (ca, "children"));
   endif
 
   for i = numel (kids):-1:1
     typ = get (kids(i), "type");
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -185,18 +185,18 @@ function [hleg, hleg_obj, hplot, labels]
   nkids = numel (kids);
 
   ## Find any existing legend object on figure
   hlegend = [];
   fkids = get (fig, "children");
   for i = 1 : numel (fkids)
     if (   strcmp (get (fkids(i), "type"), "axes")
         && strcmp (get (fkids(i), "tag"), "legend"))
-      udata = get (fkids(i), "userdata");
-      if (any (ismember (udata.handle, ca)))
+      handle = getappdata (fkids(i), "handle");
+      if (any (ismember (handle, ca)))
         hlegend = fkids(i);
         break;
       endif
     endif
   endfor
 
   orientation = "default";
   location = "default";
@@ -399,19 +399,17 @@ function [hleg, hleg_obj, hplot, labels]
   else
     ## Create or modify legend object
     hobjects = [];
     hplots = [];
     text_strings = {};
 
     if (! isempty (hlegend))
       ## Disable callbacks while modifying an existing legend
-      legdata = get (hlegend, "userdata");
-      legdata.nocallbacks = true;
-      set (hlegend, "userdata", legdata);
+      setappdata (hlegend, "nocallbacks", true);
     endif
 
     if (have_labels)
       ## Check for valid data that can be labeled.
       have_data = false;
       have_dname = false;
       for hkid = kids.'
         typ = get (hkid, "type");
@@ -596,21 +594,22 @@ function [hleg, hleg_obj, hplot, labels]
       unwind_protect
         ud = ancestor (hplots, "axes");
         if (! isscalar (ud))
           ud = unique ([ud{:}]);
         endif
         if (isempty (hlegend))
           ## Create a legend object (axes + new properties)
           addprops = true;
-          hlegend = axes ("tag", "legend", "userdata", struct ("handle", ud),
+          hlegend = axes ("tag", "legend",
                           "box", box,
                           "xtick", [], "ytick", [],
                           "xlim", [0, 1], "ylim", [0, 1],
                           "activepositionproperty", "position");
+          setappdata (hlegend, "handle", ud);
           ## Inherit fontsize from current axis
           ## "fontunits" should be first because it affects interpretation
           ## of "fontsize" property.
           [fontunits, fontsz] = get (ca(1), {"fontunits", "fontsize"}){:};
           fontsz *= 0.90;  # Reduce legend fontsize to 90% of axes fontsize
           set (hlegend, {"fontunits", "fontsize"}, {fontunits, fontsz});
           set (hlegend, "fontunits", "points");  # legend always works in pts.
           old_hplots = [];
@@ -662,18 +661,18 @@ function [hleg, hleg_obj, hplot, labels]
         nentries = numel (hplots);
         texthandle = [];
         maxwidth = maxheight = 0;
         for k = 1 : nentries
           halign = ifelse (strcmp (textpos, "right"), "left", "right");
           texthandle(k) = text (0, 0, text_strings{k},
                                 "units", "points",
                                 "horizontalalignment", halign,
-                                txtprops{:},
-                                "userdata", hplots(k));
+                                txtprops{:});
+          setappdata (texthandle(k), "handle", hplots(k));
           extents = get (texthandle(k), "extent");
           maxwidth = max (maxwidth, extents(3));
           maxheight = max (maxheight, extents(4));
         endfor
         ## Restore units which were force to points
         set (texthandle, "units", get (0, "DefaultTextUnits"));
 
         num1 = nentries;
@@ -875,30 +874,30 @@ function [hleg, hleg_obj, hplot, labels]
             case "line"
               color = get (hplt, "color");
               style = get (hplt, "linestyle");
               lwidth = min (get (hplt, "linewidth"), 5);
               if (! strcmp (style, "none"))
                 l1 = line ("xdata", ([xoffset, xoffset + linelength] + xk * xstep) / lpos(3),
                            "ydata", [1, 1] .* (lpos(4) - yoffset - yk * ystep) / lpos(4),
                            "color", color, "linestyle", style, "linewidth", lwidth,
-                           "marker", "none",
-                           "userdata", hplt);
+                           "marker", "none");
+                setappdata (l1, "handle", hplt);
                 hobjects(end+1) = l1;
               endif
               marker = get (hplt, "marker");
               if (! strcmp (marker, "none"))
                 l1 = line ("xdata", (xoffset + 0.5 * linelength  + xk * xstep) / lpos(3),
                            "ydata", (lpos(4) - yoffset - yk * ystep) / lpos(4),
                            "color", color, "linestyle", "none", "linewidth", lwidth,
                            "marker", marker,
                            "markeredgecolor", get (hplt, "markeredgecolor"),
                            "markerfacecolor", get (hplt, "markerfacecolor"),
-                           "markersize", min (get (hplt, "markersize"),10),
-                           "userdata", hplt);
+                           "markersize", min (get (hplt, "markersize"),10));
+                setappdata (l1, "handle", hplt);
                 hobjects(end+1) = l1;
               endif
 
               ## Newly labeled objects have listeners added
               if (! any (hplt == old_hplots))
                 addlistener (hplt, "color",
                              {@cb_line_listener, hlegend, linelength, false});
                 addlistener (hplt, "linestyle",
@@ -922,27 +921,29 @@ function [hleg, hleg_obj, hplot, labels]
               edgecolor = get (hplt, "edgecolor");
               cdata = get (hplt, "cdata");
               if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
                 p1 = patch ("xdata", ([0, linelength, linelength, 0] +
                                       xoffset + xk * xstep) / lpos(3),
                             "ydata", (lpos(4) - yoffset -
                                       [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
                             "facecolor", facecolor, "edgecolor", edgecolor,
-                            "cdata", cdata, "userdata", hplt);
+                            "cdata", cdata);
+                setappdata (p1, "handle", hplt);
               else
                 ## non-standard patch only making use of marker styles
                 ## such as scatter plot.
                 p1 = patch ("xdata", (xoffset + 0.5 * linelength  + xk * xstep) / lpos(3),
                             "ydata", (lpos(4) - yoffset - yk * ystep) / lpos(4),
                             "marker", get (hplt, "marker"),
                             "markeredgecolor",get (hplt,"markeredgecolor"),
                             "markerfacecolor",get (hplt,"markerfacecolor"),
                             "markersize", min (get (hplt,"markersize"),10),
-                            "cdata", cdata, "userdata", hplt);
+                            "cdata", cdata);
+                setappdata (p1, "handle", hplt);
               endif
               hobjects(end+1) = p1;
               ## Copy clim from axes so that colors work out.
               set (hlegend, "clim", get (ca(1), "clim"));
 
               ## FIXME: Need listeners, as for line objects.
               ##        Changing clim, for example, won't update colors
 
@@ -951,17 +952,18 @@ function [hleg, hleg_obj, hplot, labels]
               edgecolor = get (hplt, "edgecolor");
               cdata = sum (get (ca(1), "clim")) / 2;
               if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
                 p1 = patch ("xdata", ([0, linelength, linelength, 0] +
                                       xoffset + xk * xstep) / lpos(3),
                             "ydata", (lpos(4) - yoffset -
                                       [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
                             "facecolor", facecolor, "edgecolor", edgecolor,
-                            "cdata", cdata, "userdata", hplt);
+                            "cdata", cdata);
+                setappdata (p1, "handle", hplt);
                 hobjects(end+1) = p1;
               endif
               ## FIXME: Need listeners, as for line objects.
 
           endswitch
 
           set (texthandle(k), "position",
                               [(txoffset + xk * xstep) / lpos(3), ...
@@ -1098,19 +1100,17 @@ function [hleg, hleg_obj, hplot, labels]
         if (! isempty (oldfig))
           set (0, "currentfigure", oldfig);
         endif
       end_unwind_protect
     endif
   endif
 
   ## Restore operation of callbacks
-  legdata = get (hlegend, "userdata");
-  legdata.nocallbacks = false;
-  set (hlegend, "userdata", legdata);
+  setappdata (hlegend, "nocallbacks", false);
 
   if (nargout > 0)
     hleg = hlegend;
     hleg_obj = hobjects;
     hplot = hplots;
     labels = text_strings;
   endif
 
@@ -1118,17 +1118,17 @@ endfunction
 
 ## A non-text property of legend has changed requiring an update.
 function cb_legend_update (hleg, ~)
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
     unwind_protect
-      hax = getfield (get (hleg, "userdata"), "handle");
+      hax = getappdata (hleg, "handle");
       ## Hack.  Maybe store this somewhere else such as appdata.
       hplots = [ get(hleg, "deletefcn"){6:end} ];
       text_strings = get (hleg, "string");
       position = get (hleg, "unmodified_axes_position");
       outerposition = get (hleg, "unmodified_axes_outerposition");
       units = get (hax, "units");
       set (hax, "units", "points");
       switch (get (hax, "activepositionproperty"))
@@ -1256,32 +1256,32 @@ function cb_restore_axes (~, ~, ca, pos,
   endfor
 
 endfunction
 
 ## Update legend item because underlying plot line object has changed.
 function cb_line_listener (h, ~, hlegend, linelength, update_name)
 
   ## Don't execute callbacks when legend is under construction
-  legdata = get (hlegend, "userdata");
+  legdata = getappdata (hlegend);
   if (legdata.nocallbacks)
     return;
   endif
 
   if (update_name)
     ## When string changes, have to rebuild legend completely
     [hplots, text_strings] = __getlegenddata__ (hlegend);
     if (isempty (hplots))
       delete (hlegend);
     else
       legend (legdata.handle(1), hplots, text_strings);
     endif
   else
     kids = get (hlegend, "children");
-    kids = kids([get(kids, "userdata"){:}] == h);
+    kids = kids([getappdata(kids, "handle"){:}] == h);
     kids = kids(strcmp (get (kids, "type"), "line"));
     idx = strcmp (get (kids, "marker"), "none");
     ll = kids (idx);
     lm = kids (! idx);
 
     [linestyle, marker, displayname] = ...
       get (h, {"linestyle", "marker", "displayname"}){:};
 
@@ -1296,30 +1296,32 @@ function cb_line_listener (h, ~, hlegend
     else
       [xpos2, ypos2] = get (lm, {"xdata", "ydata"}){:};
       xpos1 = xpos2 + [-0.5, 0.5] * linelength;
       ypos1 = [ypos2, ypos2];
       delete (lm);
     endif
 
     if (! strcmp (linestyle, "none"))
-      line ("xdata", xpos1, "ydata", ypos1, "color", get (h, "color"),
-            "linestyle", get (h, "linestyle"),
-            "linewidth", min (get (h, "linewidth"), 5),
-            "marker", "none",
-            "userdata", h, "parent", hlegend);
+      hl = line ("xdata", xpos1, "ydata", ypos1, "color", get (h, "color"),
+                 "linestyle", get (h, "linestyle"),
+                 "linewidth", min (get (h, "linewidth"), 5),
+                 "marker", "none",
+                 "parent", hlegend);
+      setappdata (hl, "handle", h);
     endif
     if (! strcmp (marker, "none"))
-      line ("xdata", xpos2, "ydata", ypos2, "color", get (h, "color"),
-            "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
-            "markerfacecolor", get (h, "markerfacecolor"),
-            "markersize", min (get (h, "markersize"), 10),
-            "linestyle", "none",
-            "linewidth", min (get (h, "linewidth"), 5),
-            "userdata", h, "parent", hlegend);
+      hl = line ("xdata", xpos2, "ydata", ypos2, "color", get (h, "color"),
+                 "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
+                 "markerfacecolor", get (h, "markerfacecolor"),
+                 "markersize", min (get (h, "markersize"), 10),
+                 "linestyle", "none",
+                 "linewidth", min (get (h, "linewidth"), 5),
+                 "parent", hlegend);
+      setappdata (hl, "handle", h);
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
@@ -1739,20 +1741,20 @@ endfunction
 %!test <*42035>
 %! h = figure ("visible", "off");
 %! unwind_protect
 %!   hax1 = subplot (1,2,1);
 %!   plot (1:10);
 %!   hax2 = subplot (1,2,2);
 %!   plot (1:10);
 %!   hleg1 = legend (hax1, "foo");
-%!   assert (get (hleg1, "userdata").handle, hax1);
+%!   assert (getappdata (hleg1, "handle"), hax1);
 %!   assert (gca (), hax2);
 %!   hleg2 = legend ("bar");
-%!   assert (get (hleg2, "userdata").handle, gca ());
+%!   assert (getappdata (hleg2, "handle"), gca ());
 %! unwind_protect_cleanup
 %!   close (h);
 %! end_unwind_protect
 
 %!test
 %! ## Difficult example from plotyy demo #1
 %! hf = figure ("visible", "off");
 %! unwind_protect
diff --git a/scripts/plot/draw/private/__errplot__.m b/scripts/plot/draw/private/__errplot__.m
--- a/scripts/plot/draw/private/__errplot__.m
+++ b/scripts/plot/draw/private/__errplot__.m
@@ -252,18 +252,18 @@ function h = __do_errplot__ (fstr, hax, 
 
   ## Process legend key
   if (! isempty (fmt.key) && nplots > 0)
     hlegend = [];
     fkids = get (gcf (), "children");
     for i = 1 : numel (fkids)
       if (   strcmp (get (fkids(i), "type"), "axes")
           && strcmp (get (fkids(i), "tag"), "legend"))
-        udata = get (fkids(i), "userdata");
-        if (! isempty (intersect (udata.handle, gca ())))
+        leghandle = getappdata (fkids(i), "handle");
+        if (! isempty (intersect (leghandle, gca ())))
           hlegend = fkids(i);
           break;
         endif
       endif
     endfor
 
     if (isempty (hlegend))
       hlgnd = [];
diff --git a/scripts/plot/draw/private/__plt__.m b/scripts/plot/draw/private/__plt__.m
--- a/scripts/plot/draw/private/__plt__.m
+++ b/scripts/plot/draw/private/__plt__.m
@@ -37,18 +37,18 @@ function retval = __plt__ (caller, h, va
     property_set = false;
     properties = {};
 
     hlegend = [];
     fkids = get (gcf (), "children");
     for i = 1 : numel (fkids)
       if (   strcmp (get (fkids(i), "type"), "axes")
           && strcmp (get (fkids(i), "tag"), "legend"))
-        udata = get (fkids(i), "userdata");
-        if (! isempty (intersect (udata.handle, gca ())))
+        leghandle = getappdata (fkids(i), "handle");
+        if (! isempty (intersect (leghandle, gca ())))
           hlegend = fkids(i);
           break;
         endif
       endif
     endfor
 
     setlgnd = false;
     if (isempty (hlegend))
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -101,21 +101,21 @@ function restack_axes (h, cf)
   unwind_protect
     set (0, "showhiddenhandles", "on");
     ch = get (cf, "children");
     axidx = isaxes (ch);
     hax = ch(axidx);
     ## Stack the legend associated with this axes on top of the axes itself
     hleg = hax(strcmp (get (hax, "tag"), "legend"));
     if (any (hleg))
-      ## Get field "handle" from structure stored in "userdata" property
+      ## Get axes handles associated with legend
       if (isscalar (hleg))
-        hlegaxes = get (hleg, "userdata").handle;
+        hlegaxes = getappdata (hleg, "handle");
       else
-        hlegaxes = [[get(hleg, "userdata"){:}].handle](:);
+        hlegaxes = [getappdata(hleg, "handle"){:}](:);
       endif
       hleg = hleg(hlegaxes == h);
       h = [hleg; h];
     endif
     ch(axidx) = [h; hax(! ismember (hax, h))];
     set (cf, "children", ch);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", show);
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -1539,17 +1539,17 @@ function __gnuplot_draw_axes__ (h, plot_
       sidx_minor = 0;
     endif
     fprintf (plot_stream, "set grid linestyle %d, linestyle %d;\n",
              sidx_major, sidx_minor);
   endif
 
   if (! isempty (hlgnd) && strcmp (hlgnd.visible, "on")
       && ! isempty (hlgnd.children)
-      && any (strcmp (get ([get(hlgnd.children, "userdata"){:}], "visible"),
+      && any (strcmp (get ([getappdata(hlgnd.children, "handle"){:}], "visible"),
                       "on")))
 
     if (strcmp (hlgnd.box, "on"))
       box = "box";
     else
       box = "nobox";
     endif
     if (strcmp (hlgnd.orientation, "vertical"))
diff --git a/scripts/plot/util/private/__gnuplot_draw_figure__.m b/scripts/plot/util/private/__gnuplot_draw_figure__.m
--- a/scripts/plot/util/private/__gnuplot_draw_figure__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_figure__.m
@@ -48,20 +48,20 @@ function __gnuplot_draw_figure__ (h, plo
       for i = nkids:-1:1
         type = get (kids(i), "type");
         switch (type)
           case "axes"
             if (strcmpi (get (kids (i), "tag"), "legend"))
               ## This is so ugly.  If there was a way of getting
               ## gnuplot to give us the text extents of strings
               ## then we could get rid of this mess.
-              lh = getfield (get (kids(i), "userdata"), "handle");
+              lh = getappdata (kids(i), "handle");
               if (isscalar (lh))
                 ## We have a legend with a single parent.  It'll be handled
-                ## below as a gnuplot key to the axis it corresponds to
+                ## below as a gnuplot key to the axis it corresponds to.
                 continue;
               else
                 ca = lh(1);
                 ## Rely upon listener to convert axes position
                 ## to "normalized" units.
                 legend_axes_units = get (kids(i), "units");
                 legend_axes_position = get (kids(i), "position");
                 legend_axes_outerposition = get (kids(i), "outerposition");
@@ -86,18 +86,18 @@ function __gnuplot_draw_figure__ (h, plo
                     endif
                     displayname = get (hobj(j), "string");
                     ll = [];
                     lm = [];
                     for k = numel (hobj) : -1 : 1
                       if (! strcmp (get (hobj(k), "type"), "line"))
                         continue;
                       endif
-                      if (get (hobj(j), "userdata")
-                          != get (hobj(k), "userdata"))
+                      if (getappdata (hobj(j), "handle")
+                          != getappdata (hobj(k), "handle"))
                         continue;
                       endif
                       if (! strcmp (get (hobj(k), "linestyle"), "none"))
                         ll = hobj(k);
                       endif
                       if (! strcmp (get (hobj(k), "marker"), "none"))
                         lm = hobj(k);
                       endif
@@ -156,26 +156,25 @@ function __gnuplot_draw_figure__ (h, plo
                 ## Find if this axes has an associated legend axes and pass it
                 ## to __gnuplot_draw_axes__
                 hlegend = [];
                 fkids = get (h, "children");
                 for j = 1 : numel (fkids)
                   if (ishghandle (fkids (j))
                       && strcmp (get (fkids (j), "type"), "axes")
                       && (strcmp (get (fkids (j), "tag"), "legend")))
-                    udata = get (fkids (j), "userdata");
-                    if (isscalar (udata.handle)
-                        && ! isempty (intersect (udata.handle, kids (i))))
-                      hlegend = get (fkids (j));
+                    leghandle = getappdata (fkids(j), "handle");
+                    if (! isempty (intersect (leghandle, kids(i))))
+                      hlegend = get (fkids(j));
                       break;
                     endif
                   endif
                 endfor
                 __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced,
-                                  bg_is_set, fg_is_set, hlegend);
+                                       bg_is_set, fg_is_set, hlegend);
               unwind_protect_cleanup
                 ## Return axes "units" and "position" back to
                 ## their original values.
                 set (kids(i), "units", orig_axes_units);
                 set (kids(i), "position", orig_axes_position);
                 bg_is_set = false;
                 fg_is_set = false;
               end_unwind_protect
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -256,32 +256,32 @@ function [h, sout] = createaxes (s, p, p
     tst = arrayfun (@(x) strcmp (x.properties.visible, "on"), kids);
     if (! any (tst))
       legend ("hide");
     endif
 
     ## remove all properties such as "textposition" that redefine
     ## the entire legend.  Also remove chidren.
     s.properties = rmfield (s.properties, ...
-                              {"userdata", "xlabel",...
+                              {"__appdata__", "xlabel",...
                                "ylabel", "zlabel", "location", ...
                                "title", "string","orientation", ...
                                "visible", "textposition"});
 
     s.children = [];
 
   elseif (strcmp (s.properties.tag, "colorbar"))
     ## colorbar
     oldax = s.properties.axes;
     if (! isempty (idx = find (oldax == p)))
       ax = p(idx+1);
       location = s.properties.location;
       h = colorbar ("peer", ax, location);
       s.properties = rmfield (s.properties, ...
-                                {"userdata", "xlabel" ...
+                                {"__appdata__", "xlabel" ...
                                  "ylabel", "zlabel", ...
                                  "title", "axes"});
       s.children= [];
     else
       error ("hdl2struct: didn't find an object");
     endif
   endif
 
