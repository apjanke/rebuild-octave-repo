# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1341958472 18000
#      Tue Jul 10 17:14:32 2012 -0500
# Node ID 70ff15b6d9963149547bb51ccca1fcc837cc5e62
# Parent  f5925478bc15cc3502bee249637b954278829d4a
Ignore unkonwn functions during compilation

* src/pt-jit.cc (jit_typeinfo::jit_typeinfo): Initialize unknown_function.
  (jit_typeinfo::type_of): Return unknown_function for unkonwn functions.

* src/pt-jit.h (jit_typeinfo::unknown_function): New variable.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1183,16 +1183,19 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   fn = create_identity (scalar);
   casts[scalar->type_id ()].add_overload (fn, false, scalar, scalar);
 
   // cast complex <- complex
   fn = create_identity (complex);
   casts[complex->type_id ()].add_overload (fn, false, complex, complex);
 
   // -------------------- builtin functions --------------------
+  add_builtin ("#unknown_function");
+  unknown_function = builtins["#unknown_function"];
+
   add_builtin ("sin");
   register_intrinsic ("sin", llvm::Intrinsic::sin, scalar, scalar);
   register_generic ("sin", matrix, matrix);
 
   add_builtin ("cos");
   register_intrinsic ("cos", llvm::Intrinsic::cos, scalar, scalar);
   register_generic ("cos", matrix, matrix);
 
@@ -1489,17 +1492,18 @@ jit_type *
 jit_typeinfo::do_type_of (const octave_value &ov) const
 {
   if (ov.is_function ())
     {
       // FIXME: This is ugly, we need to finalize how we want to to this, then
       // have octave_value fully support the needed functionality
       octave_builtin *builtin
         = dynamic_cast<octave_builtin *> (ov.internal_rep ());
-      return builtin ? builtin->to_jit () : 0;
+      return builtin && builtin->to_jit () ? builtin->to_jit ()
+        : unknown_function;
     }
 
   if (ov.is_range ())
     return get_range ();
 
   if (ov.is_double_type ())
     {
       if (ov.is_real_scalar ())
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -692,16 +692,17 @@ private:
   jit_type *any;
   jit_type *matrix;
   jit_type *scalar;
   jit_type *range;
   jit_type *string;
   jit_type *boolean;
   jit_type *index;
   jit_type *complex;
+  jit_type *unknown_function;
   std::map<std::string, jit_type *> builtins;
 
   llvm::StructType *complex_ret;
 
   std::vector<jit_operation> binary_ops;
   jit_operation grab_fn;
   jit_operation release_fn;
   jit_operation print_fn;
