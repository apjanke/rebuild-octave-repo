# HG changeset patch
# User jwe
# Date 865375053 0
#      Tue Jun 03 21:57:33 1997 +0000
# Node ID 5708b8bb4f06e45817501e89e366f4b3254b40ac
# Parent  d7edf1442471de6318ab8d41ca4690bd7a591833
[project @ 1997-06-03 21:48:05 by jwe]

diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -44,17 +44,17 @@ Software Foundation, 59 Temple Place - S
 static bool Vbeep_on_error;
 
 // Current error state.
 int error_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
-int buffer_error_messages;
+bool buffer_error_messages;
 
 // The message buffer
 ostrstream *error_message_buffer = 0;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
@@ -274,28 +274,60 @@ See also: error, printf")
 DEFUN (usage, args, ,
   "usage (FMT, ...): print a usage message according to FMT.\n\
 \n\
 See also: error, printf")
 {
   return handle_message (usage, "unknown", args);
 }
 
+void
+bind_global_error_variable (void)
+{
+  *error_message_buffer << ends;
+
+  char *error_text = error_message_buffer->str ();
+
+  bind_builtin_variable ("__error_text__", error_text, 1);
+
+  delete [] error_text;
+
+  delete error_message_buffer;
+
+  error_message_buffer = 0;
+}
+
+void
+clear_global_error_variable (void *)
+{
+  delete error_message_buffer;
+  error_message_buffer = 0;
+
+  bind_builtin_variable ("__error_text__", "", 1);
+}
+
 static int
 beep_on_error (void)
 {
   Vbeep_on_error = check_preference ("beep_on_error");
 
   return 0;
 }
 
 void
 symbols_of_error (void)
 {
   DEFVAR (beep_on_error, 0.0, 0, beep_on_error,
     "if true, beep before printing error messages");
+
+  DEFCONST (error_text, "", 0, 0,
+    "the text of error messages that would have been printed in the\n\
+body of the most recent unwind_protect statement or the TRY part of\n\
+the most recent eval() command.  Outside of unwind_protect and\n\
+eval(), or if no error has ocurred within them, the value of\n\
+__error_text__ is guaranteed to be the empty string.");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -37,17 +37,17 @@ extern void parse_error (const char *fmt
 extern void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Current error state.
 extern int error_state;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
-extern int buffer_error_messages;
+extern bool buffer_error_messages;
 
 // The message buffer
 extern ostrstream *error_message_buffer;
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -50,16 +50,17 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
+#include "parse.h"
 #include "pathsearch.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -59,34 +59,35 @@ Software Foundation, Inc.
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
+#include "parse.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// Nonzero means input is coming from temporary history file.
-int input_from_tmp_history_file = 0;
+// TRUE means input is coming from temporary history file.
+bool input_from_tmp_history_file = false;
 
 // Where history is saved.
 static string Vhistory_file;
 
 // The number of lines to keep in the history file.
 static int Vhistory_size;
 
 // TRUE if we are saving history.
-int Vsaving_history;
+bool Vsaving_history = true;
 
 // Get some default values, possibly reading them from the
 // environment.
 
 int
 default_history_size (void)
 {
   int size = 1024;
@@ -480,20 +481,22 @@ do_edit_history (int argc, const string_
     }
 
   file.close ();
 
   // Turn on command echo, so the output from this will make better
   // sense.
 
   unwind_protect::begin_frame ("do_edit_history");
+
   unwind_protect_int (Vecho_executing_commands);
-  unwind_protect_int (input_from_tmp_history_file);
+  unwind_protect_bool (input_from_tmp_history_file);
+
   Vecho_executing_commands = ECHO_CMD_LINE;
-  input_from_tmp_history_file = 1;
+  input_from_tmp_history_file = true;
 
   parse_and_execute (name);
 
   unwind_protect::run_frame ("do_edit_history");
 
   // Delete the temporary file.  Should probably be done with an
   // unwind_protect.
 
@@ -507,20 +510,22 @@ do_run_history (int argc, const string_v
 
   if (name.empty ())
     return;
 
   // Turn on command echo so the output from this will make better
   // sense.
 
   unwind_protect::begin_frame ("do_run_history");
+
   unwind_protect_int (Vecho_executing_commands);
-  unwind_protect_int (input_from_tmp_history_file);
+  unwind_protect_bool (input_from_tmp_history_file);
+
   Vecho_executing_commands = ECHO_CMD_LINE;
-  input_from_tmp_history_file = 1;
+  input_from_tmp_history_file = true;
 
   parse_and_execute (name);
 
   unwind_protect::run_frame ("do_run_history");
 
   // Delete the temporary file.
 
   // XXX FIXME XXX -- should probably be done using an unwind_protect.
diff --git a/src/oct-hist.h b/src/oct-hist.h
--- a/src/oct-hist.h
+++ b/src/oct-hist.h
@@ -25,21 +25,21 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include "cmd-hist.h"
 
 extern int default_history_size (void);
 extern string default_history_file (void);
 
-// Nonzero means input is coming from temporary history file.
-extern int input_from_tmp_history_file;
+// TRUE means input is coming from temporary history file.
+extern bool input_from_tmp_history_file;
 
 // TRUE if we are saving history.
-extern int Vsaving_history;
+extern bool Vsaving_history;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -904,17 +904,17 @@ do_binary_op (octave_value::binary_op op
     }
 
   return retval;
 }
 
 // Current indentation.
 int octave_value::curr_print_indent_level = 0;
 
-// Nonzero means we are at the beginning of a line.
+// TRUE means we are at the beginning of a line.
 bool octave_value::beginning_of_line = true;
 
 // Each print() function should call this before printing anything.
 //
 // This doesn't need to be fast, but isn't there a better way?
 
 void
 octave_value::indent (ostream& os) const
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -46,18 +46,18 @@ Software Foundation, 59 Temple Place - S
 #include "utils.h"
 #include "variables.h"
 
 static pid_t octave_pager_pid = -1;
 
 // Our actual connection to the external pager.
 static oprocstream *external_pager = 0;
 
-// Nonzero means we write to the diary file.
-static int write_to_diary_file = 0;
+// TRUE means we write to the diary file.
+static bool write_to_diary_file = false;
 
 // The name of the current diary file.
 static string diary_file;
 
 // The diary file.
 static ofstream external_diary_file;
 
 // The shell command to run as the pager.
@@ -72,19 +72,19 @@ static bool Vpage_output_immediately;
 // through the pager.
 static bool Vpage_screen_output;
 
 // Only one pager can be active at once, so having these at file
 // scope should be ok.
 static octave_interrupt_handler saved_interrupt_handler;
 static bool interrupt_handler_saved = false;
 
-static int really_flush_to_pager = 0;
+static bool really_flush_to_pager = false;
 
-static int flushing_output_to_pager = 0;
+static bool flushing_output_to_pager = false;
 
 static void
 clear_external_pager (void)
 {
   octave_child_list::remove (octave_pager_pid);
 
   octave_pager_pid = -1;
 
@@ -301,21 +301,21 @@ octave_diary_stream::stream (void)
 
 void
 flush_octave_stdout (void)
 {
   if (! flushing_output_to_pager)
     {
       unwind_protect::begin_frame ("flush_octave_stdout");
 
-      unwind_protect_int (really_flush_to_pager);
-      unwind_protect_int (flushing_output_to_pager);
+      unwind_protect_bool (really_flush_to_pager);
+      unwind_protect_bool (flushing_output_to_pager);
 
-      really_flush_to_pager = 1;
-      flushing_output_to_pager = 1;
+      really_flush_to_pager = true;
+      flushing_output_to_pager = true;
 
       octave_stdout.flush ();
 
       if (external_pager)
 	clear_external_pager ();
 
       unwind_protect::run_frame ("flush_octave_stdout");
     }
@@ -368,23 +368,23 @@ redirect all input and screen output to 
       break;
 
     case 2:
       {
 	string arg = argv[1];
 
 	if (arg == "on")
 	  {
-	    write_to_diary_file = 1;
+	    write_to_diary_file = true;
 	    open_diary_file ();
 	  }	
 	else if (arg == "off")
 	  {
 	    close_diary_file ();
-	    write_to_diary_file = 0;
+	    write_to_diary_file = false;
 	  }
 	else
 	  {
 	    diary_file = arg;
 	    open_diary_file ();
 	  }
       }
       break;
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -72,38 +72,38 @@ static bool Vsplit_long_rows;
 
 // Current format string for real numbers and the real part of complex
 // numbers.
 static char *curr_real_fmt = 0;
 
 // Current format string for the imaginary part of complex numbers.
 static char *curr_imag_fmt = 0;
 
-// Nonzero means don't do any fancy formatting.
+// TRUE means don't do any fancy formatting.
 static bool free_format = false;
 
-// Nonzero means print plus sign for nonzero, blank for zero.
+// TRUE means print plus sign for nonzero, blank for zero.
 static bool plus_format = false;
 
-// Nonzero means always print like dollars and cents.
+// TRUE means always print like dollars and cents.
 static bool bank_format = false;
 
-// Nonzero means print data in hexadecimal format.
+// TRUE means print data in hexadecimal format.
 static bool hex_format = false;
 
-// Nonzero means print data in binary-bit-pattern format.
+// TRUE means print data in binary-bit-pattern format.
 static int bit_format = 0;
 
-// Nonzero means don't put newlines around the column number headers.
+// TRUE means don't put newlines around the column number headers.
 static bool compact_format = false;
 
-// Nonzero means use an e format.
+// TRUE means use an e format.
 static bool print_e = false;
 
-// Nonzero means print E instead of e for exponent field.
+// TRUE means print E instead of e for exponent field.
 static bool print_big_e = false;
 
 // XXX FIXME XXX -- these should probably be somewhere else.
 
 static double
 pr_max_internal (const Matrix& m)
 {
   int nr = m.rows ();
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -160,17 +160,17 @@ void
 tree_checker::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   tree_argument_list *lhs = cmd.left_hand_side ();
 
   if (lhs)
     {
       int len = lhs->length ();
 
-      if (len == 0 || lhs > 2)
+      if (len == 0 || len > 2)
 	gripe ("invalid number of output arguments in for command",
 	       cmd.line ());
 
       do_lvalue_check = true;
 
       lhs->accept (*this);
 
       do_lvalue_check = false;
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -51,17 +51,17 @@ tree_try_catch_command::~tree_try_catch_
 static void
 do_catch_code (void *ptr)
 {
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
   // Set up for letting the user print any messages from errors that
   // occurred in the body of the try_catch statement.
 
-  buffer_error_messages = 0;
+  buffer_error_messages = false;
   bind_global_error_variable ();
   unwind_protect::add (clear_global_error_variable, 0);
 
   // Similarly, if we have seen a return or break statement, allow all
   // the catch code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
@@ -99,18 +99,18 @@ void
 tree_try_catch_command::eval (void)
 {
   unwind_protect::begin_frame ("tree_try_catch::eval");
 
   unwind_protect::add (do_catch_code, catch_code);
 
   if (catch_code)
     {
-      unwind_protect_int (buffer_error_messages);
-      buffer_error_messages = 1;
+      unwind_protect_bool (buffer_error_messages);
+      buffer_error_messages = true;
     }
 
   if (try_code)
     try_code->eval ();
 
   if (catch_code && error_state)
     {
       error_state = 0;
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1057,17 +1057,17 @@ tree_print_code::visit_while_command (tr
   indent ();
 
   os << "endwhile";
 }
 
 // Current indentation.
 int tree_print_code::curr_print_indent_level = 0;
 
-// Nonzero means we are at the beginning of a line.
+// TRUE means we are at the beginning of a line.
 bool tree_print_code::beginning_of_line = true;
 
 // Each print_code() function should call this before printing
 // anything.
 //
 // This doesn't need to be fast, but isn't there a better way?
 
 void
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -45,18 +45,18 @@ Software Foundation, 59 Temple Place - S
 #include "syswait.h"
 #include "toplev.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
-// Nonzero means we can be interrupted.
-int can_interrupt = 0;
+// TRUE means we can be interrupted.
+bool can_interrupt = false;
 
 // Allow us to save the signal mask and then restore it to the most
 // recently saved value.  This is necessary when using the POSIX
 // signal handling interface on some systems calling longjmp out of
 // the signal handler to get to the top level on an interrupt doesn't
 // restore the original signal mask.  Alternatively, we could use
 // sigsetjmp/siglongjmp, but saving and restoring the signal mask
 // ourselves works ok and seems simpler just now.
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -78,18 +78,18 @@ octave_interrupt_handler
   sig_handler *brk_handler;
 #endif
 };
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
-// Nonzero means we can be interrupted.
-extern int can_interrupt;
+// TRUE means we can be interrupted.
+extern bool can_interrupt;
 
 extern sig_handler *octave_set_signal_handler (int, sig_handler *);
 
 extern void install_signal_handlers (void);
 
 extern octave_interrupt_handler octave_catch_interrupts (void);
 
 extern octave_interrupt_handler octave_ignore_interrupts (void);
diff --git a/src/unwind-prot.cc b/src/unwind-prot.cc
--- a/src/unwind-prot.cc
+++ b/src/unwind-prot.cc
@@ -100,17 +100,17 @@ saved_variable::saved_variable (void)
   gen_ptr = 0;
   gen_ptr_value = 0;
   type_tag = generic;
   size = 0;
 }
 
 saved_variable::saved_variable (bool *p, bool v)
 {
-  type_tag = integer;
+  type_tag = boolean;
   ptr_to_bool = p;
   bool_value = v;
   size = sizeof (bool);  // Is this necessary?
 }
 
 saved_variable::saved_variable (int *p, int v)
 {
   type_tag = integer;
